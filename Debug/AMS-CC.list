
AMS-CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000301ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  08030340  08030340  00040340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030cf0  08030cf0  000514ac  2**0
                  CONTENTS
  4 .ARM          00000008  08030cf0  08030cf0  00040cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030cf8  08030cf8  000514ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030cf8  08030cf8  00040cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030cfc  08030cfc  00040cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000014ac  20000000  08030d00  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000514ac  2**0
                  CONTENTS
 10 .bss          0001dac4  200014b0  200014b0  000514b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001ef74  2001ef74  000514b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000514ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005d424  00000000  00000000  000514dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a26f  00000000  00000000  000ae900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000054e8  00000000  00000000  000b8b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004f50  00000000  00000000  000be058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cb6b  00000000  00000000  000c2fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00043ffa  00000000  00000000  000efb13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101861  00000000  00000000  00133b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  0023536e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000173a8  00000000  00000000  00235438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200014b0 	.word	0x200014b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08030324 	.word	0x08030324

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200014b4 	.word	0x200014b4
 80001cc:	08030324 	.word	0x08030324

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001eec0 	.word	0x2001eec0

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b9a4 	b.w	8000fcc <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f83c 	bl	8000d08 <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_d2lz>:
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	460d      	mov	r5, r1
 8000ca6:	f7ff ff0b 	bl	8000ac0 <__aeabi_dcmplt>
 8000caa:	b928      	cbnz	r0, 8000cb8 <__aeabi_d2lz+0x1c>
 8000cac:	4620      	mov	r0, r4
 8000cae:	4629      	mov	r1, r5
 8000cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb4:	f000 b80a 	b.w	8000ccc <__aeabi_d2ulz>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cbe:	f000 f805 	bl	8000ccc <__aeabi_d2ulz>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop

08000ccc <__aeabi_d2ulz>:
 8000ccc:	b5d0      	push	{r4, r6, r7, lr}
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__aeabi_d2ulz+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	460f      	mov	r7, r1
 8000cd6:	f7ff fc81 	bl	80005dc <__aeabi_dmul>
 8000cda:	f7ff ff57 	bl	8000b8c <__aeabi_d2uiz>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f7ff fc02 	bl	80004e8 <__aeabi_ui2d>
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <__aeabi_d2ulz+0x38>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f7ff fc78 	bl	80005dc <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f7ff faba 	bl	800026c <__aeabi_dsub>
 8000cf8:	f7ff ff48 	bl	8000b8c <__aeabi_d2uiz>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000d00:	3df00000 	.word	0x3df00000
 8000d04:	41f00000 	.word	0x41f00000

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468c      	mov	ip, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8083 	bne.w	8000e1e <__udivmoddi4+0x116>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4617      	mov	r7, r2
 8000d1c:	d947      	bls.n	8000dae <__udivmoddi4+0xa6>
 8000d1e:	fab2 f282 	clz	r2, r2
 8000d22:	b142      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	f1c2 0020 	rsb	r0, r2, #32
 8000d28:	fa24 f000 	lsr.w	r0, r4, r0
 8000d2c:	4091      	lsls	r1, r2
 8000d2e:	4097      	lsls	r7, r2
 8000d30:	ea40 0c01 	orr.w	ip, r0, r1
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d40:	fa1f fe87 	uxth.w	lr, r7
 8000d44:	fb08 c116 	mls	r1, r8, r6, ip
 8000d48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5a:	f080 8119 	bcs.w	8000f90 <__udivmoddi4+0x288>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8116 	bls.w	8000f90 <__udivmoddi4+0x288>
 8000d64:	3e02      	subs	r6, #2
 8000d66:	443b      	add	r3, r7
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d70:	fb08 3310 	mls	r3, r8, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	193c      	adds	r4, r7, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8105 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f240 8102 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d90:	3802      	subs	r0, #2
 8000d92:	443c      	add	r4, r7
 8000d94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	b11d      	cbz	r5, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c5 4300 	strd	r4, r3, [r5]
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	b902      	cbnz	r2, 8000db2 <__udivmoddi4+0xaa>
 8000db0:	deff      	udf	#255	; 0xff
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	d150      	bne.n	8000e5c <__udivmoddi4+0x154>
 8000dba:	1bcb      	subs	r3, r1, r7
 8000dbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc0:	fa1f f887 	uxth.w	r8, r7
 8000dc4:	2601      	movs	r6, #1
 8000dc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dca:	0c21      	lsrs	r1, r4, #16
 8000dcc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0xe2>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	f200 80e9 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1ac9      	subs	r1, r1, r3
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x10c>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x10a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80d9 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e7bf      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x12e>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80b1 	beq.w	8000f8a <__udivmoddi4+0x282>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x1cc>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0x140>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80b8 	bhi.w	8000fb8 <__udivmoddi4+0x2b0>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	468c      	mov	ip, r1
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0a8      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000e56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e5a:	e7a5      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f603 	lsr.w	r6, r0, r3
 8000e64:	4097      	lsls	r7, r2
 8000e66:	fa01 f002 	lsl.w	r0, r1, r2
 8000e6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6e:	40d9      	lsrs	r1, r3
 8000e70:	4330      	orrs	r0, r6
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e78:	fa1f f887 	uxth.w	r8, r7
 8000e7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb06 f108 	mul.w	r1, r6, r8
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8e:	d909      	bls.n	8000ea4 <__udivmoddi4+0x19c>
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e96:	f080 808d 	bcs.w	8000fb4 <__udivmoddi4+0x2ac>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 808a 	bls.w	8000fb4 <__udivmoddi4+0x2ac>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	443b      	add	r3, r7
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b281      	uxth	r1, r0
 8000ea8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb4:	fb00 f308 	mul.w	r3, r0, r8
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x1c4>
 8000ebc:	1879      	adds	r1, r7, r1
 8000ebe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ec2:	d273      	bcs.n	8000fac <__udivmoddi4+0x2a4>
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d971      	bls.n	8000fac <__udivmoddi4+0x2a4>
 8000ec8:	3802      	subs	r0, #2
 8000eca:	4439      	add	r1, r7
 8000ecc:	1acb      	subs	r3, r1, r3
 8000ece:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ed2:	e778      	b.n	8000dc6 <__udivmoddi4+0xbe>
 8000ed4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ed8:	fa03 f406 	lsl.w	r4, r3, r6
 8000edc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	0c3b      	lsrs	r3, r7, #16
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fa1f f884 	uxth.w	r8, r4
 8000efe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f06:	fb09 fa08 	mul.w	sl, r9, r8
 8000f0a:	458a      	cmp	sl, r1
 8000f0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f10:	fa00 f306 	lsl.w	r3, r0, r6
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x220>
 8000f16:	1861      	adds	r1, r4, r1
 8000f18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f1c:	d248      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f1e:	458a      	cmp	sl, r1
 8000f20:	d946      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4421      	add	r1, r4
 8000f28:	eba1 010a 	sub.w	r1, r1, sl
 8000f2c:	b2bf      	uxth	r7, r7
 8000f2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f3a:	fb00 f808 	mul.w	r8, r0, r8
 8000f3e:	45b8      	cmp	r8, r7
 8000f40:	d907      	bls.n	8000f52 <__udivmoddi4+0x24a>
 8000f42:	19e7      	adds	r7, r4, r7
 8000f44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f48:	d22e      	bcs.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4a:	45b8      	cmp	r8, r7
 8000f4c:	d92c      	bls.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4427      	add	r7, r4
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	eba7 0708 	sub.w	r7, r7, r8
 8000f5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5e:	454f      	cmp	r7, r9
 8000f60:	46c6      	mov	lr, r8
 8000f62:	4649      	mov	r1, r9
 8000f64:	d31a      	bcc.n	8000f9c <__udivmoddi4+0x294>
 8000f66:	d017      	beq.n	8000f98 <__udivmoddi4+0x290>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x27a>
 8000f6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f76:	40f2      	lsrs	r2, r6
 8000f78:	ea4c 0202 	orr.w	r2, ip, r2
 8000f7c:	40f7      	lsrs	r7, r6
 8000f7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f82:	2600      	movs	r6, #0
 8000f84:	4631      	mov	r1, r6
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e70b      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6fd      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f98:	4543      	cmp	r3, r8
 8000f9a:	d2e5      	bcs.n	8000f68 <__udivmoddi4+0x260>
 8000f9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fa0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7df      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e7d2      	b.n	8000f52 <__udivmoddi4+0x24a>
 8000fac:	4660      	mov	r0, ip
 8000fae:	e78d      	b.n	8000ecc <__udivmoddi4+0x1c4>
 8000fb0:	4681      	mov	r9, r0
 8000fb2:	e7b9      	b.n	8000f28 <__udivmoddi4+0x220>
 8000fb4:	4666      	mov	r6, ip
 8000fb6:	e775      	b.n	8000ea4 <__udivmoddi4+0x19c>
 8000fb8:	4630      	mov	r0, r6
 8000fba:	e74a      	b.n	8000e52 <__udivmoddi4+0x14a>
 8000fbc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc0:	4439      	add	r1, r7
 8000fc2:	e713      	b.n	8000dec <__udivmoddi4+0xe4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	443c      	add	r4, r7
 8000fc8:	e724      	b.n	8000e14 <__udivmoddi4+0x10c>
 8000fca:	bf00      	nop

08000fcc <__aeabi_idiv0>:
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	71bb      	strb	r3, [r7, #6]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8000fe2:	79fa      	ldrb	r2, [r7, #7]
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	b2db      	uxtb	r3, r3
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	80fb      	strh	r3, [r7, #6]
 8001008:	460b      	mov	r3, r1
 800100a:	717b      	strb	r3, [r7, #5]
 800100c:	4613      	mov	r3, r2
 800100e:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8001010:	88fa      	ldrh	r2, [r7, #6]
 8001012:	797b      	ldrb	r3, [r7, #5]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	b2da      	uxtb	r2, r3
 800101a:	793b      	ldrb	r3, [r7, #4]
 800101c:	4013      	ands	r3, r2
 800101e:	b2db      	uxtb	r3, r3
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
 8001036:	460b      	mov	r3, r1
 8001038:	717b      	strb	r3, [r7, #5]
 800103a:	4613      	mov	r3, r2
 800103c:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 800103e:	88fa      	ldrh	r2, [r7, #6]
 8001040:	797b      	ldrb	r3, [r7, #5]
 8001042:	fa42 f303 	asr.w	r3, r2, r3
 8001046:	b2da      	uxtb	r2, r3
 8001048:	793b      	ldrb	r3, [r7, #4]
 800104a:	4013      	ands	r3, r2
 800104c:	b2db      	uxtb	r3, r3
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	460b      	mov	r3, r1
 8001066:	71bb      	strb	r3, [r7, #6]
 8001068:	4613      	mov	r3, r2
 800106a:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	797b      	ldrb	r3, [r7, #5]
 8001070:	4013      	ands	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	b29b      	uxth	r3, r3
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	460b      	mov	r3, r1
 8001096:	71bb      	strb	r3, [r7, #6]
 8001098:	4613      	mov	r3, r2
 800109a:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	797b      	ldrb	r3, [r7, #5]
 80010a0:	4013      	ands	r3, r2
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	79bb      	ldrb	r3, [r7, #6]
 80010a8:	fa42 f303 	asr.w	r3, r2, r3
 80010ac:	b2db      	uxtb	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	460b      	mov	r3, r1
 80010c6:	71bb      	strb	r3, [r7, #6]
 80010c8:	4613      	mov	r3, r2
 80010ca:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 80010cc:	79fa      	ldrb	r2, [r7, #7]
 80010ce:	797b      	ldrb	r3, [r7, #5]
 80010d0:	4013      	ands	r3, r2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	461a      	mov	r2, r3
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	fa42 f303 	asr.w	r3, r2, r3
 80010dc:	b29b      	uxth	r3, r3
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <can1_ams_status_1_pack>:

int can1_ams_status_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_status_1_t *src_p,
    size_t size)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
    uint16_t max_cell_temperature;
    uint16_t min_cell_temperature;

    if (size < 8u) {
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b07      	cmp	r3, #7
 80010fa:	d802      	bhi.n	8001102 <can1_ams_status_1_pack+0x18>
        return (-EINVAL);
 80010fc:	f06f 0315 	mvn.w	r3, #21
 8001100:	e0fa      	b.n	80012f8 <can1_ams_status_1_pack+0x20e>
    }

    memset(&dst_p[0], 0, 8);
 8001102:	2208      	movs	r2, #8
 8001104:	2100      	movs	r1, #0
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f02d faea 	bl	802e6e0 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->charging_status, 0u, 0x03u);
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2203      	movs	r2, #3
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5b 	bl	8000fd0 <pack_left_shift_u8>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4313      	orrs	r3, r2
 8001124:	b2da      	uxtb	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->air1_closed, 2u, 0x04u);
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	785b      	ldrb	r3, [r3, #1]
 800112e:	2204      	movs	r2, #4
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff4c 	bl	8000fd0 <pack_left_shift_u8>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4313      	orrs	r3, r2
 8001142:	b2da      	uxtb	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->air2_closed, 3u, 0x08u);
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	789b      	ldrb	r3, [r3, #2]
 800114c:	2208      	movs	r2, #8
 800114e:	2103      	movs	r1, #3
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff3d 	bl	8000fd0 <pack_left_shift_u8>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	4313      	orrs	r3, r2
 8001160:	b2da      	uxtb	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->sc_closed, 4u, 0x10u);
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	78db      	ldrb	r3, [r3, #3]
 800116a:	2210      	movs	r2, #16
 800116c:	2104      	movs	r1, #4
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff2e 	bl	8000fd0 <pack_left_shift_u8>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4313      	orrs	r3, r2
 800117e:	b2da      	uxtb	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->pre_charge_status, 5u, 0x20u);
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	791b      	ldrb	r3, [r3, #4]
 8001188:	2220      	movs	r2, #32
 800118a:	2105      	movs	r1, #5
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff1f 	bl	8000fd0 <pack_left_shift_u8>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4313      	orrs	r3, r2
 800119c:	b2da      	uxtb	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->ams_error, 6u, 0x40u);
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	795b      	ldrb	r3, [r3, #5]
 80011a6:	2240      	movs	r2, #64	; 0x40
 80011a8:	2106      	movs	r1, #6
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff10 	bl	8000fd0 <pack_left_shift_u8>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->imd_error, 7u, 0x80u);
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	799b      	ldrb	r3, [r3, #6]
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	2107      	movs	r1, #7
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff01 	bl	8000fd0 <pack_left_shift_u8>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->state_of_charge, 0u, 0xffu);
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	79db      	ldrb	r3, [r3, #7]
 80011e2:	22ff      	movs	r2, #255	; 0xff
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fef2 	bl	8000fd0 <pack_left_shift_u8>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4619      	mov	r1, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3301      	adds	r3, #1
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3301      	adds	r3, #1
 80011fa:	430a      	orrs	r2, r1
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->min_cell_voltage, 0u, 0xffu);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	7a1b      	ldrb	r3, [r3, #8]
 8001204:	22ff      	movs	r2, #255	; 0xff
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fee1 	bl	8000fd0 <pack_left_shift_u8>
 800120e:	4603      	mov	r3, r0
 8001210:	4619      	mov	r1, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3302      	adds	r3, #2
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3302      	adds	r3, #2
 800121c:	430a      	orrs	r2, r1
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->max_cell_voltage, 0u, 0xffu);
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	7a5b      	ldrb	r3, [r3, #9]
 8001226:	22ff      	movs	r2, #255	; 0xff
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fed0 	bl	8000fd0 <pack_left_shift_u8>
 8001230:	4603      	mov	r3, r0
 8001232:	4619      	mov	r1, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3303      	adds	r3, #3
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3303      	adds	r3, #3
 800123e:	430a      	orrs	r2, r1
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	701a      	strb	r2, [r3, #0]
    min_cell_temperature = (uint16_t)src_p->min_cell_temperature;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800124a:	82fb      	strh	r3, [r7, #22]
    dst_p[4] |= pack_left_shift_u16(min_cell_temperature, 0u, 0xffu);
 800124c:	8afb      	ldrh	r3, [r7, #22]
 800124e:	22ff      	movs	r2, #255	; 0xff
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fed3 	bl	8000ffe <pack_left_shift_u16>
 8001258:	4603      	mov	r3, r0
 800125a:	4619      	mov	r1, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3304      	adds	r3, #4
 8001260:	781a      	ldrb	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	3304      	adds	r3, #4
 8001266:	430a      	orrs	r2, r1
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(min_cell_temperature, 8u, 0x0fu);
 800126c:	8afb      	ldrh	r3, [r7, #22]
 800126e:	220f      	movs	r2, #15
 8001270:	2108      	movs	r1, #8
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff feda 	bl	800102c <pack_right_shift_u16>
 8001278:	4603      	mov	r3, r0
 800127a:	4619      	mov	r1, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3305      	adds	r3, #5
 8001280:	781a      	ldrb	r2, [r3, #0]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3305      	adds	r3, #5
 8001286:	430a      	orrs	r2, r1
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	701a      	strb	r2, [r3, #0]
    max_cell_temperature = (uint16_t)src_p->max_cell_temperature;
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001292:	82bb      	strh	r3, [r7, #20]
    dst_p[5] |= pack_left_shift_u16(max_cell_temperature, 4u, 0xf0u);
 8001294:	8abb      	ldrh	r3, [r7, #20]
 8001296:	22f0      	movs	r2, #240	; 0xf0
 8001298:	2104      	movs	r1, #4
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff feaf 	bl	8000ffe <pack_left_shift_u16>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4619      	mov	r1, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3305      	adds	r3, #5
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3305      	adds	r3, #5
 80012ae:	430a      	orrs	r2, r1
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_right_shift_u16(max_cell_temperature, 4u, 0xffu);
 80012b4:	8abb      	ldrh	r3, [r7, #20]
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	2104      	movs	r1, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff feb6 	bl	800102c <pack_right_shift_u16>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4619      	mov	r1, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3306      	adds	r3, #6
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3306      	adds	r3, #6
 80012ce:	430a      	orrs	r2, r1
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_left_shift_u8(src_p->fan_speed, 0u, 0xffu);
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	7b9b      	ldrb	r3, [r3, #14]
 80012d8:	22ff      	movs	r2, #255	; 0xff
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe77 	bl	8000fd0 <pack_left_shift_u8>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4619      	mov	r1, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3307      	adds	r3, #7
 80012ea:	781a      	ldrb	r2, [r3, #0]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3307      	adds	r3, #7
 80012f0:	430a      	orrs	r2, r1
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	701a      	strb	r2, [r3, #0]

    return (8);
 80012f6:	2308      	movs	r3, #8
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <can1_ams_status_1_unpack>:

int can1_ams_status_1_unpack(
    struct can1_ams_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
    uint16_t max_cell_temperature;
    uint16_t min_cell_temperature;

    if (size < 8u) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b07      	cmp	r3, #7
 8001310:	d802      	bhi.n	8001318 <can1_ams_status_1_unpack+0x18>
        return (-EINVAL);
 8001312:	f06f 0315 	mvn.w	r3, #21
 8001316:	e0c9      	b.n	80014ac <can1_ams_status_1_unpack+0x1ac>
    }

    dst_p->charging_status = unpack_right_shift_u8(src_p[0], 0u, 0x03u);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2203      	movs	r2, #3
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff feb2 	bl	800108a <unpack_right_shift_u8>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	701a      	strb	r2, [r3, #0]
    dst_p->air1_closed = unpack_right_shift_u8(src_p[0], 2u, 0x04u);
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2204      	movs	r2, #4
 8001334:	2102      	movs	r1, #2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fea7 	bl	800108a <unpack_right_shift_u8>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	705a      	strb	r2, [r3, #1]
    dst_p->air2_closed = unpack_right_shift_u8(src_p[0], 3u, 0x08u);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2208      	movs	r2, #8
 800134a:	2103      	movs	r1, #3
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fe9c 	bl	800108a <unpack_right_shift_u8>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	709a      	strb	r2, [r3, #2]
    dst_p->sc_closed = unpack_right_shift_u8(src_p[0], 4u, 0x10u);
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2210      	movs	r2, #16
 8001360:	2104      	movs	r1, #4
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fe91 	bl	800108a <unpack_right_shift_u8>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	70da      	strb	r2, [r3, #3]
    dst_p->pre_charge_status = unpack_right_shift_u8(src_p[0], 5u, 0x20u);
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2220      	movs	r2, #32
 8001376:	2105      	movs	r1, #5
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe86 	bl	800108a <unpack_right_shift_u8>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	711a      	strb	r2, [r3, #4]
    dst_p->ams_error = unpack_right_shift_u8(src_p[0], 6u, 0x40u);
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2240      	movs	r2, #64	; 0x40
 800138c:	2106      	movs	r1, #6
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fe7b 	bl	800108a <unpack_right_shift_u8>
 8001394:	4603      	mov	r3, r0
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	715a      	strb	r2, [r3, #5]
    dst_p->imd_error = unpack_right_shift_u8(src_p[0], 7u, 0x80u);
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	2107      	movs	r1, #7
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fe70 	bl	800108a <unpack_right_shift_u8>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	719a      	strb	r2, [r3, #6]
    dst_p->state_of_charge = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	3301      	adds	r3, #1
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	22ff      	movs	r2, #255	; 0xff
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe64 	bl	800108a <unpack_right_shift_u8>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	71da      	strb	r2, [r3, #7]
    dst_p->min_cell_voltage = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3302      	adds	r3, #2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	22ff      	movs	r2, #255	; 0xff
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fe58 	bl	800108a <unpack_right_shift_u8>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	721a      	strb	r2, [r3, #8]
    dst_p->max_cell_voltage = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3303      	adds	r3, #3
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	22ff      	movs	r2, #255	; 0xff
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fe4c 	bl	800108a <unpack_right_shift_u8>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	725a      	strb	r2, [r3, #9]
    min_cell_temperature = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	3304      	adds	r3, #4
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	22ff      	movs	r2, #255	; 0xff
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe58 	bl	80010ba <unpack_right_shift_u16>
 800140a:	4603      	mov	r3, r0
 800140c:	82bb      	strh	r3, [r7, #20]
    min_cell_temperature |= unpack_left_shift_u16(src_p[5], 8u, 0x0fu);
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3305      	adds	r3, #5
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	220f      	movs	r2, #15
 8001416:	2108      	movs	r1, #8
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fe1e 	bl	800105a <unpack_left_shift_u16>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	8abb      	ldrh	r3, [r7, #20]
 8001424:	4313      	orrs	r3, r2
 8001426:	82bb      	strh	r3, [r7, #20]

    if ((min_cell_temperature & (1u << 11)) != 0u) {
 8001428:	8abb      	ldrh	r3, [r7, #20]
 800142a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <can1_ams_status_1_unpack+0x13e>
        min_cell_temperature |= 0xf000u;
 8001432:	8abb      	ldrh	r3, [r7, #20]
 8001434:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001438:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800143c:	82bb      	strh	r3, [r7, #20]
    }

    dst_p->min_cell_temperature = (int16_t)min_cell_temperature;
 800143e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	815a      	strh	r2, [r3, #10]
    max_cell_temperature = unpack_right_shift_u16(src_p[5], 4u, 0xf0u);
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	3305      	adds	r3, #5
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	22f0      	movs	r2, #240	; 0xf0
 800144e:	2104      	movs	r1, #4
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe32 	bl	80010ba <unpack_right_shift_u16>
 8001456:	4603      	mov	r3, r0
 8001458:	82fb      	strh	r3, [r7, #22]
    max_cell_temperature |= unpack_left_shift_u16(src_p[6], 4u, 0xffu);
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3306      	adds	r3, #6
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	22ff      	movs	r2, #255	; 0xff
 8001462:	2104      	movs	r1, #4
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fdf8 	bl	800105a <unpack_left_shift_u16>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	8afb      	ldrh	r3, [r7, #22]
 8001470:	4313      	orrs	r3, r2
 8001472:	82fb      	strh	r3, [r7, #22]

    if ((max_cell_temperature & (1u << 11)) != 0u) {
 8001474:	8afb      	ldrh	r3, [r7, #22]
 8001476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <can1_ams_status_1_unpack+0x18a>
        max_cell_temperature |= 0xf000u;
 800147e:	8afb      	ldrh	r3, [r7, #22]
 8001480:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001484:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001488:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->max_cell_temperature = (int16_t)max_cell_temperature;
 800148a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	819a      	strh	r2, [r3, #12]
    dst_p->fan_speed = unpack_right_shift_u8(src_p[7], 0u, 0xffu);
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3307      	adds	r3, #7
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	22ff      	movs	r2, #255	; 0xff
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fdf4 	bl	800108a <unpack_right_shift_u8>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	739a      	strb	r2, [r3, #14]

    return (0);
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <can1_ams_status_1_charging_status_encode>:

uint8_t can1_ams_status_1_charging_status_encode(double value)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80014be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014c2:	f7ff fb63 	bl	8000b8c <__aeabi_d2uiz>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b2db      	uxtb	r3, r3
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <can1_ams_status_1_charging_status_decode>:

double can1_ams_status_1_charging_status_decode(uint8_t value)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f802 	bl	80004e8 <__aeabi_ui2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	ec43 2b17 	vmov	d7, r2, r3
}
 80014ec:	eeb0 0a47 	vmov.f32	s0, s14
 80014f0:	eef0 0a67 	vmov.f32	s1, s15
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <can1_ams_status_1_air1_closed_encode>:
{
    return (value <= 3u);
}

uint8_t can1_ams_status_1_air1_closed_encode(double value)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001504:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001508:	f7ff fb40 	bl	8000b8c <__aeabi_d2uiz>
 800150c:	4603      	mov	r3, r0
 800150e:	b2db      	uxtb	r3, r3
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <can1_ams_status_1_air1_closed_decode>:

double can1_ams_status_1_air1_closed_decode(uint8_t value)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ffdf 	bl	80004e8 <__aeabi_ui2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001532:	eeb0 0a47 	vmov.f32	s0, s14
 8001536:	eef0 0a67 	vmov.f32	s1, s15
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <can1_ams_status_1_air2_closed_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_air2_closed_encode(double value)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800154a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800154e:	f7ff fb1d 	bl	8000b8c <__aeabi_d2uiz>
 8001552:	4603      	mov	r3, r0
 8001554:	b2db      	uxtb	r3, r3
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <can1_ams_status_1_air2_closed_decode>:

double can1_ams_status_1_air2_closed_decode(uint8_t value)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ffbc 	bl	80004e8 <__aeabi_ui2d>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	ec43 2b17 	vmov	d7, r2, r3
}
 8001578:	eeb0 0a47 	vmov.f32	s0, s14
 800157c:	eef0 0a67 	vmov.f32	s1, s15
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <can1_ams_status_1_sc_closed_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_sc_closed_encode(double value)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001594:	f7ff fafa 	bl	8000b8c <__aeabi_d2uiz>
 8001598:	4603      	mov	r3, r0
 800159a:	b2db      	uxtb	r3, r3
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <can1_ams_status_1_sc_closed_decode>:

double can1_ams_status_1_sc_closed_decode(uint8_t value)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ff99 	bl	80004e8 <__aeabi_ui2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	ec43 2b17 	vmov	d7, r2, r3
}
 80015be:	eeb0 0a47 	vmov.f32	s0, s14
 80015c2:	eef0 0a67 	vmov.f32	s1, s15
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <can1_ams_status_1_pre_charge_status_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_pre_charge_status_encode(double value)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80015d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015da:	f7ff fad7 	bl	8000b8c <__aeabi_d2uiz>
 80015de:	4603      	mov	r3, r0
 80015e0:	b2db      	uxtb	r3, r3
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <can1_ams_status_1_pre_charge_status_decode>:

double can1_ams_status_1_pre_charge_status_decode(uint8_t value)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff76 	bl	80004e8 <__aeabi_ui2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	ec43 2b17 	vmov	d7, r2, r3
}
 8001604:	eeb0 0a47 	vmov.f32	s0, s14
 8001608:	eef0 0a67 	vmov.f32	s1, s15
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <can1_ams_status_1_ams_error_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_ams_error_encode(double value)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800161c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001620:	f7ff fab4 	bl	8000b8c <__aeabi_d2uiz>
 8001624:	4603      	mov	r3, r0
 8001626:	b2db      	uxtb	r3, r3
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <can1_ams_status_1_ams_error_decode>:

double can1_ams_status_1_ams_error_decode(uint8_t value)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff53 	bl	80004e8 <__aeabi_ui2d>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	ec43 2b17 	vmov	d7, r2, r3
}
 800164a:	eeb0 0a47 	vmov.f32	s0, s14
 800164e:	eef0 0a67 	vmov.f32	s1, s15
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <can1_ams_status_1_imd_error_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_imd_error_encode(double value)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001662:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001666:	f7ff fa91 	bl	8000b8c <__aeabi_d2uiz>
 800166a:	4603      	mov	r3, r0
 800166c:	b2db      	uxtb	r3, r3
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <can1_ams_status_1_imd_error_decode>:

double can1_ams_status_1_imd_error_decode(uint8_t value)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff30 	bl	80004e8 <__aeabi_ui2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001690:	eeb0 0a47 	vmov.f32	s0, s14
 8001694:	eef0 0a67 	vmov.f32	s1, s15
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <can1_ams_status_1_state_of_charge_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_state_of_charge_encode(double value)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80016a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016ac:	f7ff fa6e 	bl	8000b8c <__aeabi_d2uiz>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b2db      	uxtb	r3, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <can1_ams_status_1_state_of_charge_decode>:

double can1_ams_status_1_state_of_charge_decode(uint8_t value)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff0d 	bl	80004e8 <__aeabi_ui2d>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80016d6:	eeb0 0a47 	vmov.f32	s0, s14
 80016da:	eef0 0a67 	vmov.f32	s1, s15
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	0000      	movs	r0, r0
	...

080016e8 <can1_ams_status_1_min_cell_voltage_encode>:
{
    return (value <= 100u);
}

uint8_t can1_ams_status_1_min_cell_voltage_encode(double value)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <can1_ams_status_1_min_cell_voltage_encode+0x50>)
 80016f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016fc:	f7fe fdb6 	bl	800026c <__aeabi_dsub>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	a309      	add	r3, pc, #36	; (adr r3, 8001730 <can1_ams_status_1_min_cell_voltage_encode+0x48>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7ff f88f 	bl	8000830 <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff fa37 	bl	8000b8c <__aeabi_d2uiz>
 800171e:	4603      	mov	r3, r0
 8001720:	b2db      	uxtb	r3, r3
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	f3af 8000 	nop.w
 8001730:	fcce1c58 	.word	0xfcce1c58
 8001734:	3f800e6a 	.word	0x3f800e6a
 8001738:	40040000 	.word	0x40040000
 800173c:	00000000 	.word	0x00000000

08001740 <can1_ams_status_1_min_cell_voltage_decode>:

double can1_ams_status_1_min_cell_voltage_decode(uint8_t value)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fecb 	bl	80004e8 <__aeabi_ui2d>
 8001752:	a30e      	add	r3, pc, #56	; (adr r3, 800178c <can1_ams_status_1_min_cell_voltage_decode+0x4c>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe ff40 	bl	80005dc <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <can1_ams_status_1_min_cell_voltage_decode+0x48>)
 800176a:	f7fe fd81 	bl	8000270 <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	ec43 2b17 	vmov	d7, r2, r3
}
 8001776:	eeb0 0a47 	vmov.f32	s0, s14
 800177a:	eef0 0a67 	vmov.f32	s1, s15
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	f3af 8000 	nop.w
 8001788:	40040000 	.word	0x40040000
 800178c:	fcce1c58 	.word	0xfcce1c58
 8001790:	3f800e6a 	.word	0x3f800e6a
 8001794:	00000000 	.word	0x00000000

08001798 <can1_ams_status_1_max_cell_voltage_encode>:

    return (true);
}

uint8_t can1_ams_status_1_max_cell_voltage_encode(double value)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <can1_ams_status_1_max_cell_voltage_encode+0x50>)
 80017a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ac:	f7fe fd5e 	bl	800026c <__aeabi_dsub>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	a309      	add	r3, pc, #36	; (adr r3, 80017e0 <can1_ams_status_1_max_cell_voltage_encode+0x48>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7ff f837 	bl	8000830 <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f9df 	bl	8000b8c <__aeabi_d2uiz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b2db      	uxtb	r3, r3
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	fcce1c58 	.word	0xfcce1c58
 80017e4:	3f800e6a 	.word	0x3f800e6a
 80017e8:	40040000 	.word	0x40040000
 80017ec:	00000000 	.word	0x00000000

080017f0 <can1_ams_status_1_max_cell_voltage_decode>:

double can1_ams_status_1_max_cell_voltage_decode(uint8_t value)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fe73 	bl	80004e8 <__aeabi_ui2d>
 8001802:	a30e      	add	r3, pc, #56	; (adr r3, 800183c <can1_ams_status_1_max_cell_voltage_decode+0x4c>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	f7fe fee8 	bl	80005dc <__aeabi_dmul>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <can1_ams_status_1_max_cell_voltage_decode+0x48>)
 800181a:	f7fe fd29 	bl	8000270 <__adddf3>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	ec43 2b17 	vmov	d7, r2, r3
}
 8001826:	eeb0 0a47 	vmov.f32	s0, s14
 800182a:	eef0 0a67 	vmov.f32	s1, s15
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	f3af 8000 	nop.w
 8001838:	40040000 	.word	0x40040000
 800183c:	fcce1c58 	.word	0xfcce1c58
 8001840:	3f800e6a 	.word	0x3f800e6a
 8001844:	00000000 	.word	0x00000000

08001848 <can1_ams_status_1_min_cell_temperature_encode>:

    return (true);
}

int16_t can1_ams_status_1_min_cell_temperature_encode(double value)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <can1_ams_status_1_min_cell_temperature_encode+0x50>)
 8001858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800185c:	f7fe fd08 	bl	8000270 <__adddf3>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	a309      	add	r3, pc, #36	; (adr r3, 8001890 <can1_ams_status_1_min_cell_temperature_encode+0x48>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe ffdf 	bl	8000830 <__aeabi_ddiv>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f95f 	bl	8000b3c <__aeabi_d2iz>
 800187e:	4603      	mov	r3, r0
 8001880:	b21b      	sxth	r3, r3
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	f3af 8000 	nop.w
 8001890:	757928e1 	.word	0x757928e1
 8001894:	3fa9018e 	.word	0x3fa9018e
 8001898:	40240000 	.word	0x40240000
 800189c:	00000000 	.word	0x00000000

080018a0 <can1_ams_status_1_min_cell_temperature_decode>:

double can1_ams_status_1_min_cell_temperature_decode(int16_t value)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 80018aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe2a 	bl	8000508 <__aeabi_i2d>
 80018b4:	a30d      	add	r3, pc, #52	; (adr r3, 80018ec <can1_ams_status_1_min_cell_temperature_decode+0x4c>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fe8f 	bl	80005dc <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <can1_ams_status_1_min_cell_temperature_decode+0x48>)
 80018cc:	f7fe fcce 	bl	800026c <__aeabi_dsub>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80018d8:	eeb0 0a47 	vmov.f32	s0, s14
 80018dc:	eef0 0a67 	vmov.f32	s1, s15
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40240000 	.word	0x40240000
 80018ec:	757928e1 	.word	0x757928e1
 80018f0:	3fa9018e 	.word	0x3fa9018e
 80018f4:	00000000 	.word	0x00000000

080018f8 <can1_ams_status_1_max_cell_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_status_1_max_cell_temperature_encode(double value)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <can1_ams_status_1_max_cell_temperature_encode+0x50>)
 8001908:	e9d7 0100 	ldrd	r0, r1, [r7]
 800190c:	f7fe fcb0 	bl	8000270 <__adddf3>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	a309      	add	r3, pc, #36	; (adr r3, 8001940 <can1_ams_status_1_max_cell_temperature_encode+0x48>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f7fe ff87 	bl	8000830 <__aeabi_ddiv>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff f907 	bl	8000b3c <__aeabi_d2iz>
 800192e:	4603      	mov	r3, r0
 8001930:	b21b      	sxth	r3, r3
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	f3af 8000 	nop.w
 8001940:	757928e1 	.word	0x757928e1
 8001944:	3fa9018e 	.word	0x3fa9018e
 8001948:	40240000 	.word	0x40240000
 800194c:	00000000 	.word	0x00000000

08001950 <can1_ams_status_1_max_cell_temperature_decode>:

double can1_ams_status_1_max_cell_temperature_decode(int16_t value)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800195a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fdd2 	bl	8000508 <__aeabi_i2d>
 8001964:	a30d      	add	r3, pc, #52	; (adr r3, 800199c <can1_ams_status_1_max_cell_temperature_decode+0x4c>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe fe37 	bl	80005dc <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <can1_ams_status_1_max_cell_temperature_decode+0x48>)
 800197c:	f7fe fc76 	bl	800026c <__aeabi_dsub>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	ec43 2b17 	vmov	d7, r2, r3
}
 8001988:	eeb0 0a47 	vmov.f32	s0, s14
 800198c:	eef0 0a67 	vmov.f32	s1, s15
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40240000 	.word	0x40240000
 800199c:	757928e1 	.word	0x757928e1
 80019a0:	3fa9018e 	.word	0x3fa9018e

080019a4 <can1_ams_status_1_fan_speed_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

uint8_t can1_ams_status_1_fan_speed_encode(double value)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80019ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019b2:	f7ff f8eb 	bl	8000b8c <__aeabi_d2uiz>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b2db      	uxtb	r3, r3
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <can1_ams_status_1_fan_speed_decode>:

double can1_ams_status_1_fan_speed_decode(uint8_t value)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fd8a 	bl	80004e8 <__aeabi_ui2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	ec43 2b17 	vmov	d7, r2, r3
}
 80019dc:	eeb0 0a47 	vmov.f32	s0, s14
 80019e0:	eef0 0a67 	vmov.f32	s1, s15
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <can1_dbu_status_1_pack>:

int can1_dbu_status_1_pack(
    uint8_t *dst_p,
    const struct can1_dbu_status_1_t *src_p,
    size_t size)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
    uint16_t dbu_temperature;

    if (size < 8u) {
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b07      	cmp	r3, #7
 80019fa:	d802      	bhi.n	8001a02 <can1_dbu_status_1_pack+0x18>
        return (-EINVAL);
 80019fc:	f06f 0315 	mvn.w	r3, #21
 8001a00:	e045      	b.n	8001a8e <can1_dbu_status_1_pack+0xa4>
    }

    memset(&dst_p[0], 0, 8);
 8001a02:	2208      	movs	r2, #8
 8001a04:	2100      	movs	r1, #0
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f02c fe6a 	bl	802e6e0 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->activate_ts_button, 0u, 0x01u);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fadb 	bl	8000fd0 <pack_left_shift_u8>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->ready_to_drive_button, 1u, 0x02u);
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	785b      	ldrb	r3, [r3, #1]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	2101      	movs	r1, #1
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff facc 	bl	8000fd0 <pack_left_shift_u8>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	701a      	strb	r2, [r3, #0]
    dbu_temperature = (uint16_t)src_p->dbu_temperature;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a4e:	82fb      	strh	r3, [r7, #22]
    dst_p[0] |= pack_left_shift_u16(dbu_temperature, 4u, 0xf0u);
 8001a50:	8afb      	ldrh	r3, [r7, #22]
 8001a52:	22f0      	movs	r2, #240	; 0xf0
 8001a54:	2104      	movs	r1, #4
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fad1 	bl	8000ffe <pack_left_shift_u16>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(dbu_temperature, 4u, 0xffu);
 8001a6c:	8afb      	ldrh	r3, [r7, #22]
 8001a6e:	22ff      	movs	r2, #255	; 0xff
 8001a70:	2104      	movs	r1, #4
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fada 	bl	800102c <pack_right_shift_u16>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3301      	adds	r3, #1
 8001a86:	430a      	orrs	r2, r1
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]

    return (8);
 8001a8c:	2308      	movs	r3, #8
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <can1_dbu_status_1_unpack>:

int can1_dbu_status_1_unpack(
    struct can1_dbu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
    uint16_t dbu_temperature;

    if (size < 8u) {
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b07      	cmp	r3, #7
 8001aa6:	d802      	bhi.n	8001aae <can1_dbu_status_1_unpack+0x18>
        return (-EINVAL);
 8001aa8:	f06f 0315 	mvn.w	r3, #21
 8001aac:	e03b      	b.n	8001b26 <can1_dbu_status_1_unpack+0x90>
    }

    dst_p->activate_ts_button = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fae7 	bl	800108a <unpack_right_shift_u8>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	701a      	strb	r2, [r3, #0]
    dst_p->ready_to_drive_button = unpack_right_shift_u8(src_p[0], 1u, 0x02u);
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	2101      	movs	r1, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fadc 	bl	800108a <unpack_right_shift_u8>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	705a      	strb	r2, [r3, #1]
    dbu_temperature = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	22f0      	movs	r2, #240	; 0xf0
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fae9 	bl	80010ba <unpack_right_shift_u16>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	82fb      	strh	r3, [r7, #22]
    dbu_temperature |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	3301      	adds	r3, #1
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	22ff      	movs	r2, #255	; 0xff
 8001af4:	2104      	movs	r1, #4
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff faaf 	bl	800105a <unpack_left_shift_u16>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	8afb      	ldrh	r3, [r7, #22]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	82fb      	strh	r3, [r7, #22]

    if ((dbu_temperature & (1u << 11)) != 0u) {
 8001b06:	8afb      	ldrh	r3, [r7, #22]
 8001b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <can1_dbu_status_1_unpack+0x86>
        dbu_temperature |= 0xf000u;
 8001b10:	8afb      	ldrh	r3, [r7, #22]
 8001b12:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001b16:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001b1a:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->dbu_temperature = (int16_t)dbu_temperature;
 8001b1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	805a      	strh	r2, [r3, #2]

    return (0);
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <can1_dbu_status_1_activate_ts_button_encode>:

uint8_t can1_dbu_status_1_activate_ts_button_encode(double value)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001b38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b3c:	f7ff f826 	bl	8000b8c <__aeabi_d2uiz>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b2db      	uxtb	r3, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <can1_dbu_status_1_activate_ts_button_decode>:

double can1_dbu_status_1_activate_ts_button_decode(uint8_t value)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fcc5 	bl	80004e8 <__aeabi_ui2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b66:	eeb0 0a47 	vmov.f32	s0, s14
 8001b6a:	eef0 0a67 	vmov.f32	s1, s15
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <can1_dbu_status_1_ready_to_drive_button_encode>:
{
    return (value <= 1u);
}

uint8_t can1_dbu_status_1_ready_to_drive_button_encode(double value)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b82:	f7ff f803 	bl	8000b8c <__aeabi_d2uiz>
 8001b86:	4603      	mov	r3, r0
 8001b88:	b2db      	uxtb	r3, r3
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <can1_dbu_status_1_ready_to_drive_button_decode>:

double can1_dbu_status_1_ready_to_drive_button_decode(uint8_t value)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fca2 	bl	80004e8 <__aeabi_ui2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bac:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb0:	eef0 0a67 	vmov.f32	s1, s15
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	0000      	movs	r0, r0
 8001bbc:	0000      	movs	r0, r0
	...

08001bc0 <can1_dbu_status_1_dbu_temperature_encode>:
{
    return (value <= 1u);
}

int16_t can1_dbu_status_1_dbu_temperature_encode(double value)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <can1_dbu_status_1_dbu_temperature_encode+0x50>)
 8001bd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bd4:	f7fe fb4c 	bl	8000270 <__adddf3>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	a309      	add	r3, pc, #36	; (adr r3, 8001c08 <can1_dbu_status_1_dbu_temperature_encode+0x48>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fe23 	bl	8000830 <__aeabi_ddiv>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe ffa3 	bl	8000b3c <__aeabi_d2iz>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b21b      	sxth	r3, r3
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	f3af 8000 	nop.w
 8001c08:	757928e1 	.word	0x757928e1
 8001c0c:	3fa9018e 	.word	0x3fa9018e
 8001c10:	40240000 	.word	0x40240000
 8001c14:	00000000 	.word	0x00000000

08001c18 <can1_dbu_status_1_dbu_temperature_decode>:

double can1_dbu_status_1_dbu_temperature_decode(int16_t value)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 8001c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc6e 	bl	8000508 <__aeabi_i2d>
 8001c2c:	a30d      	add	r3, pc, #52	; (adr r3, 8001c64 <can1_dbu_status_1_dbu_temperature_decode+0x4c>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe fcd3 	bl	80005dc <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <can1_dbu_status_1_dbu_temperature_decode+0x48>)
 8001c44:	f7fe fb12 	bl	800026c <__aeabi_dsub>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c50:	eeb0 0a47 	vmov.f32	s0, s14
 8001c54:	eef0 0a67 	vmov.f32	s1, s15
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40240000 	.word	0x40240000
 8001c64:	757928e1 	.word	0x757928e1
 8001c68:	3fa9018e 	.word	0x3fa9018e

08001c6c <can1_ams_temperatures_pack>:

int can1_ams_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_temperatures_t *src_p,
    size_t size)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
    uint16_t aux_1_temperature;
    uint16_t aux_2_temperature;
    uint16_t fuse_resistor_temperature;
    uint16_t pre_charge_resistor_temperature;

    if (size < 6u) {
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d802      	bhi.n	8001c84 <can1_ams_temperatures_pack+0x18>
        return (-EINVAL);
 8001c7e:	f06f 0315 	mvn.w	r3, #21
 8001c82:	e093      	b.n	8001dac <can1_ams_temperatures_pack+0x140>
    }

    memset(&dst_p[0], 0, 6);
 8001c84:	2206      	movs	r2, #6
 8001c86:	2100      	movs	r1, #0
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f02c fd29 	bl	802e6e0 <memset>

    pre_charge_resistor_temperature = (uint16_t)src_p->pre_charge_resistor_temperature;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c94:	82fb      	strh	r3, [r7, #22]
    dst_p[0] |= pack_left_shift_u16(pre_charge_resistor_temperature, 0u, 0xffu);
 8001c96:	8afb      	ldrh	r3, [r7, #22]
 8001c98:	22ff      	movs	r2, #255	; 0xff
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff f9ae 	bl	8000ffe <pack_left_shift_u16>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(pre_charge_resistor_temperature, 8u, 0x0fu);
 8001cb2:	8afb      	ldrh	r3, [r7, #22]
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	2108      	movs	r1, #8
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f9b7 	bl	800102c <pack_right_shift_u16>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]
    fuse_resistor_temperature = (uint16_t)src_p->fuse_resistor_temperature;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cd8:	82bb      	strh	r3, [r7, #20]
    dst_p[1] |= pack_left_shift_u16(fuse_resistor_temperature, 4u, 0xf0u);
 8001cda:	8abb      	ldrh	r3, [r7, #20]
 8001cdc:	22f0      	movs	r2, #240	; 0xf0
 8001cde:	2104      	movs	r1, #4
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f98c 	bl	8000ffe <pack_left_shift_u16>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3301      	adds	r3, #1
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u16(fuse_resistor_temperature, 4u, 0xffu);
 8001cfa:	8abb      	ldrh	r3, [r7, #20]
 8001cfc:	22ff      	movs	r2, #255	; 0xff
 8001cfe:	2104      	movs	r1, #4
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff f993 	bl	800102c <pack_right_shift_u16>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3302      	adds	r3, #2
 8001d14:	430a      	orrs	r2, r1
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]
    aux_1_temperature = (uint16_t)src_p->aux_1_temperature;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d20:	827b      	strh	r3, [r7, #18]
    dst_p[3] |= pack_left_shift_u16(aux_1_temperature, 0u, 0xffu);
 8001d22:	8a7b      	ldrh	r3, [r7, #18]
 8001d24:	22ff      	movs	r2, #255	; 0xff
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f968 	bl	8000ffe <pack_left_shift_u16>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4619      	mov	r1, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3303      	adds	r3, #3
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3303      	adds	r3, #3
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u16(aux_1_temperature, 8u, 0x0fu);
 8001d42:	8a7b      	ldrh	r3, [r7, #18]
 8001d44:	220f      	movs	r2, #15
 8001d46:	2108      	movs	r1, #8
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f96f 	bl	800102c <pack_right_shift_u16>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4619      	mov	r1, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3304      	adds	r3, #4
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]
    aux_2_temperature = (uint16_t)src_p->aux_2_temperature;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d68:	823b      	strh	r3, [r7, #16]
    dst_p[4] |= pack_left_shift_u16(aux_2_temperature, 4u, 0xf0u);
 8001d6a:	8a3b      	ldrh	r3, [r7, #16]
 8001d6c:	22f0      	movs	r2, #240	; 0xf0
 8001d6e:	2104      	movs	r1, #4
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff f944 	bl	8000ffe <pack_left_shift_u16>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3304      	adds	r3, #4
 8001d84:	430a      	orrs	r2, r1
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(aux_2_temperature, 4u, 0xffu);
 8001d8a:	8a3b      	ldrh	r3, [r7, #16]
 8001d8c:	22ff      	movs	r2, #255	; 0xff
 8001d8e:	2104      	movs	r1, #4
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff f94b 	bl	800102c <pack_right_shift_u16>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4619      	mov	r1, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3305      	adds	r3, #5
 8001d9e:	781a      	ldrb	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3305      	adds	r3, #5
 8001da4:	430a      	orrs	r2, r1
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]

    return (6);
 8001daa:	2306      	movs	r3, #6
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <can1_ams_temperatures_unpack>:

int can1_ams_temperatures_unpack(
    struct can1_ams_temperatures_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
    uint16_t aux_1_temperature;
    uint16_t aux_2_temperature;
    uint16_t fuse_resistor_temperature;
    uint16_t pre_charge_resistor_temperature;

    if (size < 6u) {
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d802      	bhi.n	8001dcc <can1_ams_temperatures_unpack+0x18>
        return (-EINVAL);
 8001dc6:	f06f 0315 	mvn.w	r3, #21
 8001dca:	e097      	b.n	8001efc <can1_ams_temperatures_unpack+0x148>
    }

    pre_charge_resistor_temperature = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	22ff      	movs	r2, #255	; 0xff
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff f970 	bl	80010ba <unpack_right_shift_u16>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	823b      	strh	r3, [r7, #16]
    pre_charge_resistor_temperature |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3301      	adds	r3, #1
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	220f      	movs	r2, #15
 8001de6:	2108      	movs	r1, #8
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff f936 	bl	800105a <unpack_left_shift_u16>
 8001dee:	4603      	mov	r3, r0
 8001df0:	461a      	mov	r2, r3
 8001df2:	8a3b      	ldrh	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	823b      	strh	r3, [r7, #16]

    if ((pre_charge_resistor_temperature & (1u << 11)) != 0u) {
 8001df8:	8a3b      	ldrh	r3, [r7, #16]
 8001dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <can1_ams_temperatures_unpack+0x5a>
        pre_charge_resistor_temperature |= 0xf000u;
 8001e02:	8a3b      	ldrh	r3, [r7, #16]
 8001e04:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001e08:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001e0c:	823b      	strh	r3, [r7, #16]
    }

    dst_p->pre_charge_resistor_temperature = (int16_t)pre_charge_resistor_temperature;
 8001e0e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	801a      	strh	r2, [r3, #0]
    fuse_resistor_temperature = unpack_right_shift_u16(src_p[1], 4u, 0xf0u);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	22f0      	movs	r2, #240	; 0xf0
 8001e1e:	2104      	movs	r1, #4
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f94a 	bl	80010ba <unpack_right_shift_u16>
 8001e26:	4603      	mov	r3, r0
 8001e28:	827b      	strh	r3, [r7, #18]
    fuse_resistor_temperature |= unpack_left_shift_u16(src_p[2], 4u, 0xffu);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	22ff      	movs	r2, #255	; 0xff
 8001e32:	2104      	movs	r1, #4
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff f910 	bl	800105a <unpack_left_shift_u16>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	8a7b      	ldrh	r3, [r7, #18]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	827b      	strh	r3, [r7, #18]

    if ((fuse_resistor_temperature & (1u << 11)) != 0u) {
 8001e44:	8a7b      	ldrh	r3, [r7, #18]
 8001e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <can1_ams_temperatures_unpack+0xa6>
        fuse_resistor_temperature |= 0xf000u;
 8001e4e:	8a7b      	ldrh	r3, [r7, #18]
 8001e50:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001e54:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001e58:	827b      	strh	r3, [r7, #18]
    }

    dst_p->fuse_resistor_temperature = (int16_t)fuse_resistor_temperature;
 8001e5a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	805a      	strh	r2, [r3, #2]
    aux_1_temperature = unpack_right_shift_u16(src_p[3], 0u, 0xffu);
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3303      	adds	r3, #3
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	22ff      	movs	r2, #255	; 0xff
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff f924 	bl	80010ba <unpack_right_shift_u16>
 8001e72:	4603      	mov	r3, r0
 8001e74:	82fb      	strh	r3, [r7, #22]
    aux_1_temperature |= unpack_left_shift_u16(src_p[4], 8u, 0x0fu);
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	2108      	movs	r1, #8
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f8ea 	bl	800105a <unpack_left_shift_u16>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	8afb      	ldrh	r3, [r7, #22]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	82fb      	strh	r3, [r7, #22]

    if ((aux_1_temperature & (1u << 11)) != 0u) {
 8001e90:	8afb      	ldrh	r3, [r7, #22]
 8001e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <can1_ams_temperatures_unpack+0xf2>
        aux_1_temperature |= 0xf000u;
 8001e9a:	8afb      	ldrh	r3, [r7, #22]
 8001e9c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001ea0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001ea4:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->aux_1_temperature = (int16_t)aux_1_temperature;
 8001ea6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	809a      	strh	r2, [r3, #4]
    aux_2_temperature = unpack_right_shift_u16(src_p[4], 4u, 0xf0u);
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	22f0      	movs	r2, #240	; 0xf0
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff f8fe 	bl	80010ba <unpack_right_shift_u16>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	82bb      	strh	r3, [r7, #20]
    aux_2_temperature |= unpack_left_shift_u16(src_p[5], 4u, 0xffu);
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	3305      	adds	r3, #5
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	22ff      	movs	r2, #255	; 0xff
 8001eca:	2104      	movs	r1, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff f8c4 	bl	800105a <unpack_left_shift_u16>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	8abb      	ldrh	r3, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	82bb      	strh	r3, [r7, #20]

    if ((aux_2_temperature & (1u << 11)) != 0u) {
 8001edc:	8abb      	ldrh	r3, [r7, #20]
 8001ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <can1_ams_temperatures_unpack+0x13e>
        aux_2_temperature |= 0xf000u;
 8001ee6:	8abb      	ldrh	r3, [r7, #20]
 8001ee8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001eec:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001ef0:	82bb      	strh	r3, [r7, #20]
    }

    dst_p->aux_2_temperature = (int16_t)aux_2_temperature;
 8001ef2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	80da      	strh	r2, [r3, #6]

    return (0);
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	0000      	movs	r0, r0
	...

08001f08 <can1_ams_temperatures_pre_charge_resistor_temperature_encode>:

int16_t can1_ams_temperatures_pre_charge_resistor_temperature_encode(double value)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <can1_ams_temperatures_pre_charge_resistor_temperature_encode+0x50>)
 8001f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f1c:	f7fe f9a8 	bl	8000270 <__adddf3>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	a309      	add	r3, pc, #36	; (adr r3, 8001f50 <can1_ams_temperatures_pre_charge_resistor_temperature_encode+0x48>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe fc7f 	bl	8000830 <__aeabi_ddiv>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f7fe fdff 	bl	8000b3c <__aeabi_d2iz>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	b21b      	sxth	r3, r3
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	f3af 8000 	nop.w
 8001f50:	757928e1 	.word	0x757928e1
 8001f54:	3fa9018e 	.word	0x3fa9018e
 8001f58:	40240000 	.word	0x40240000
 8001f5c:	00000000 	.word	0x00000000

08001f60 <can1_ams_temperatures_pre_charge_resistor_temperature_decode>:

double can1_ams_temperatures_pre_charge_resistor_temperature_decode(int16_t value)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 8001f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe faca 	bl	8000508 <__aeabi_i2d>
 8001f74:	a30d      	add	r3, pc, #52	; (adr r3, 8001fac <can1_ams_temperatures_pre_charge_resistor_temperature_decode+0x4c>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fb2f 	bl	80005dc <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <can1_ams_temperatures_pre_charge_resistor_temperature_decode+0x48>)
 8001f8c:	f7fe f96e 	bl	800026c <__aeabi_dsub>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f98:	eeb0 0a47 	vmov.f32	s0, s14
 8001f9c:	eef0 0a67 	vmov.f32	s1, s15
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40240000 	.word	0x40240000
 8001fac:	757928e1 	.word	0x757928e1
 8001fb0:	3fa9018e 	.word	0x3fa9018e
 8001fb4:	00000000 	.word	0x00000000

08001fb8 <can1_ams_temperatures_fuse_resistor_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_temperatures_fuse_resistor_temperature_encode(double value)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <can1_ams_temperatures_fuse_resistor_temperature_encode+0x50>)
 8001fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fcc:	f7fe f950 	bl	8000270 <__adddf3>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	a309      	add	r3, pc, #36	; (adr r3, 8002000 <can1_ams_temperatures_fuse_resistor_temperature_encode+0x48>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	f7fe fc27 	bl	8000830 <__aeabi_ddiv>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f7fe fda7 	bl	8000b3c <__aeabi_d2iz>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	b21b      	sxth	r3, r3
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	f3af 8000 	nop.w
 8002000:	757928e1 	.word	0x757928e1
 8002004:	3fa9018e 	.word	0x3fa9018e
 8002008:	40240000 	.word	0x40240000
 800200c:	00000000 	.word	0x00000000

08002010 <can1_ams_temperatures_fuse_resistor_temperature_decode>:

double can1_ams_temperatures_fuse_resistor_temperature_decode(int16_t value)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800201a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa72 	bl	8000508 <__aeabi_i2d>
 8002024:	a30d      	add	r3, pc, #52	; (adr r3, 800205c <can1_ams_temperatures_fuse_resistor_temperature_decode+0x4c>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe fad7 	bl	80005dc <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <can1_ams_temperatures_fuse_resistor_temperature_decode+0x48>)
 800203c:	f7fe f916 	bl	800026c <__aeabi_dsub>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	ec43 2b17 	vmov	d7, r2, r3
}
 8002048:	eeb0 0a47 	vmov.f32	s0, s14
 800204c:	eef0 0a67 	vmov.f32	s1, s15
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40240000 	.word	0x40240000
 800205c:	757928e1 	.word	0x757928e1
 8002060:	3fa9018e 	.word	0x3fa9018e
 8002064:	00000000 	.word	0x00000000

08002068 <can1_ams_temperatures_aux_1_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_temperatures_aux_1_temperature_encode(double value)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <can1_ams_temperatures_aux_1_temperature_encode+0x50>)
 8002078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800207c:	f7fe f8f8 	bl	8000270 <__adddf3>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	a309      	add	r3, pc, #36	; (adr r3, 80020b0 <can1_ams_temperatures_aux_1_temperature_encode+0x48>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f7fe fbcf 	bl	8000830 <__aeabi_ddiv>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fd4f 	bl	8000b3c <__aeabi_d2iz>
 800209e:	4603      	mov	r3, r0
 80020a0:	b21b      	sxth	r3, r3
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	f3af 8000 	nop.w
 80020b0:	757928e1 	.word	0x757928e1
 80020b4:	3fa9018e 	.word	0x3fa9018e
 80020b8:	40240000 	.word	0x40240000
 80020bc:	00000000 	.word	0x00000000

080020c0 <can1_ams_temperatures_aux_1_temperature_decode>:

double can1_ams_temperatures_aux_1_temperature_decode(int16_t value)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 80020ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fa1a 	bl	8000508 <__aeabi_i2d>
 80020d4:	a30d      	add	r3, pc, #52	; (adr r3, 800210c <can1_ams_temperatures_aux_1_temperature_decode+0x4c>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	f7fe fa7f 	bl	80005dc <__aeabi_dmul>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <can1_ams_temperatures_aux_1_temperature_decode+0x48>)
 80020ec:	f7fe f8be 	bl	800026c <__aeabi_dsub>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80020f8:	eeb0 0a47 	vmov.f32	s0, s14
 80020fc:	eef0 0a67 	vmov.f32	s1, s15
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40240000 	.word	0x40240000
 800210c:	757928e1 	.word	0x757928e1
 8002110:	3fa9018e 	.word	0x3fa9018e
 8002114:	00000000 	.word	0x00000000

08002118 <can1_ams_temperatures_aux_2_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_temperatures_aux_2_temperature_encode(double value)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <can1_ams_temperatures_aux_2_temperature_encode+0x50>)
 8002128:	e9d7 0100 	ldrd	r0, r1, [r7]
 800212c:	f7fe f8a0 	bl	8000270 <__adddf3>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	a309      	add	r3, pc, #36	; (adr r3, 8002160 <can1_ams_temperatures_aux_2_temperature_encode+0x48>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe fb77 	bl	8000830 <__aeabi_ddiv>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f7fe fcf7 	bl	8000b3c <__aeabi_d2iz>
 800214e:	4603      	mov	r3, r0
 8002150:	b21b      	sxth	r3, r3
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	f3af 8000 	nop.w
 8002160:	757928e1 	.word	0x757928e1
 8002164:	3fa9018e 	.word	0x3fa9018e
 8002168:	40240000 	.word	0x40240000
 800216c:	00000000 	.word	0x00000000

08002170 <can1_ams_temperatures_aux_2_temperature_decode>:

double can1_ams_temperatures_aux_2_temperature_decode(int16_t value)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800217a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f9c2 	bl	8000508 <__aeabi_i2d>
 8002184:	a30d      	add	r3, pc, #52	; (adr r3, 80021bc <can1_ams_temperatures_aux_2_temperature_decode+0x4c>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe fa27 	bl	80005dc <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <can1_ams_temperatures_aux_2_temperature_decode+0x48>)
 800219c:	f7fe f866 	bl	800026c <__aeabi_dsub>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	ec43 2b17 	vmov	d7, r2, r3
}
 80021a8:	eeb0 0a47 	vmov.f32	s0, s14
 80021ac:	eef0 0a67 	vmov.f32	s1, s15
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40240000 	.word	0x40240000
 80021bc:	757928e1 	.word	0x757928e1
 80021c0:	3fa9018e 	.word	0x3fa9018e

080021c4 <can1_ams_cell_voltages_pack>:

int can1_ams_cell_voltages_pack(
    uint8_t *dst_p,
    const struct can1_ams_cell_voltages_t *src_p,
    size_t size)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
    if (size < 7u) {
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d803      	bhi.n	80021de <can1_ams_cell_voltages_pack+0x1a>
        return (-EINVAL);
 80021d6:	f06f 0315 	mvn.w	r3, #21
 80021da:	f001 b931 	b.w	8003440 <can1_ams_cell_voltages_pack+0x127c>
    }

    memset(&dst_p[0], 0, 7);
 80021de:	2207      	movs	r2, #7
 80021e0:	2100      	movs	r1, #0
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f02c fa7c 	bl	802e6e0 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->voltage_multiplexor, 0u, 0xffu);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	22ff      	movs	r2, #255	; 0xff
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe feed 	bl	8000fd0 <pack_left_shift_u8>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	b2da      	uxtb	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	701a      	strb	r2, [r3, #0]

    switch (src_p->voltage_multiplexor) {
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b17      	cmp	r3, #23
 800220c:	f201 8116 	bhi.w	800343c <can1_ams_cell_voltages_pack+0x1278>
 8002210:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <can1_ams_cell_voltages_pack+0x54>)
 8002212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002216:	bf00      	nop
 8002218:	08002279 	.word	0x08002279
 800221c:	08002351 	.word	0x08002351
 8002220:	08002405 	.word	0x08002405
 8002224:	080024dd 	.word	0x080024dd
 8002228:	0800256d 	.word	0x0800256d
 800222c:	08002645 	.word	0x08002645
 8002230:	080026f9 	.word	0x080026f9
 8002234:	080027d1 	.word	0x080027d1
 8002238:	08002863 	.word	0x08002863
 800223c:	0800293d 	.word	0x0800293d
 8002240:	080029f3 	.word	0x080029f3
 8002244:	08002acd 	.word	0x08002acd
 8002248:	08002b5f 	.word	0x08002b5f
 800224c:	08002c39 	.word	0x08002c39
 8002250:	08002ced 	.word	0x08002ced
 8002254:	08002dc5 	.word	0x08002dc5
 8002258:	08002e55 	.word	0x08002e55
 800225c:	08002f2d 	.word	0x08002f2d
 8002260:	08002fe1 	.word	0x08002fe1
 8002264:	080030b9 	.word	0x080030b9
 8002268:	08003149 	.word	0x08003149
 800226c:	08003221 	.word	0x08003221
 8002270:	080032d5 	.word	0x080032d5
 8002274:	080033ad 	.word	0x080033ad

    case 0:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s1, 0u, 0xffu);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	785b      	ldrb	r3, [r3, #1]
 800227c:	22ff      	movs	r2, #255	; 0xff
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fea5 	bl	8000fd0 <pack_left_shift_u8>
 8002286:	4603      	mov	r3, r0
 8002288:	4619      	mov	r1, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3301      	adds	r3, #1
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3301      	adds	r3, #1
 8002294:	430a      	orrs	r2, r1
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s1, 0u, 0xffu);
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	7e5b      	ldrb	r3, [r3, #25]
 800229e:	22ff      	movs	r2, #255	; 0xff
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fe94 	bl	8000fd0 <pack_left_shift_u8>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4619      	mov	r1, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3302      	adds	r3, #2
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3302      	adds	r3, #2
 80022b6:	430a      	orrs	r2, r1
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s1, 0u, 0xffu);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80022c2:	22ff      	movs	r2, #255	; 0xff
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fe82 	bl	8000fd0 <pack_left_shift_u8>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4619      	mov	r1, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3303      	adds	r3, #3
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3303      	adds	r3, #3
 80022da:	430a      	orrs	r2, r1
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s1, 0u, 0xffu);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80022e6:	22ff      	movs	r2, #255	; 0xff
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fe70 	bl	8000fd0 <pack_left_shift_u8>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4619      	mov	r1, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3304      	adds	r3, #4
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3304      	adds	r3, #4
 80022fe:	430a      	orrs	r2, r1
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s1, 0u, 0xffu);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800230a:	22ff      	movs	r2, #255	; 0xff
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fe5e 	bl	8000fd0 <pack_left_shift_u8>
 8002314:	4603      	mov	r3, r0
 8002316:	4619      	mov	r1, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3305      	adds	r3, #5
 800231c:	781a      	ldrb	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3305      	adds	r3, #5
 8002322:	430a      	orrs	r2, r1
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s1, 0u, 0xffu);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800232e:	22ff      	movs	r2, #255	; 0xff
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fe4c 	bl	8000fd0 <pack_left_shift_u8>
 8002338:	4603      	mov	r3, r0
 800233a:	4619      	mov	r1, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3306      	adds	r3, #6
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3306      	adds	r3, #6
 8002346:	430a      	orrs	r2, r1
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	701a      	strb	r2, [r3, #0]
        break;
 800234c:	f001 b877 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 1:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s1, 0u, 0xffu);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	789b      	ldrb	r3, [r3, #2]
 8002354:	22ff      	movs	r2, #255	; 0xff
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fe39 	bl	8000fd0 <pack_left_shift_u8>
 800235e:	4603      	mov	r3, r0
 8002360:	4619      	mov	r1, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3301      	adds	r3, #1
 8002366:	781a      	ldrb	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3301      	adds	r3, #1
 800236c:	430a      	orrs	r2, r1
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s1, 0u, 0xffu);
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	7e9b      	ldrb	r3, [r3, #26]
 8002376:	22ff      	movs	r2, #255	; 0xff
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fe28 	bl	8000fd0 <pack_left_shift_u8>
 8002380:	4603      	mov	r3, r0
 8002382:	4619      	mov	r1, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3302      	adds	r3, #2
 8002388:	781a      	ldrb	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	3302      	adds	r3, #2
 800238e:	430a      	orrs	r2, r1
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s1, 0u, 0xffu);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800239a:	22ff      	movs	r2, #255	; 0xff
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fe16 	bl	8000fd0 <pack_left_shift_u8>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4619      	mov	r1, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3303      	adds	r3, #3
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	3303      	adds	r3, #3
 80023b2:	430a      	orrs	r2, r1
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s1, 0u, 0xffu);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80023be:	22ff      	movs	r2, #255	; 0xff
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fe04 	bl	8000fd0 <pack_left_shift_u8>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4619      	mov	r1, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3304      	adds	r3, #4
 80023d0:	781a      	ldrb	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3304      	adds	r3, #4
 80023d6:	430a      	orrs	r2, r1
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s1, 0u, 0xffu);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80023e2:	22ff      	movs	r2, #255	; 0xff
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fdf2 	bl	8000fd0 <pack_left_shift_u8>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4619      	mov	r1, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3305      	adds	r3, #5
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3305      	adds	r3, #5
 80023fa:	430a      	orrs	r2, r1
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
        break;
 8002400:	f001 b81d 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 2:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s2, 0u, 0xffu);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	78db      	ldrb	r3, [r3, #3]
 8002408:	22ff      	movs	r2, #255	; 0xff
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fddf 	bl	8000fd0 <pack_left_shift_u8>
 8002412:	4603      	mov	r3, r0
 8002414:	4619      	mov	r1, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3301      	adds	r3, #1
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	3301      	adds	r3, #1
 8002420:	430a      	orrs	r2, r1
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s2, 0u, 0xffu);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	7edb      	ldrb	r3, [r3, #27]
 800242a:	22ff      	movs	r2, #255	; 0xff
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fdce 	bl	8000fd0 <pack_left_shift_u8>
 8002434:	4603      	mov	r3, r0
 8002436:	4619      	mov	r1, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3302      	adds	r3, #2
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3302      	adds	r3, #2
 8002442:	430a      	orrs	r2, r1
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s2, 0u, 0xffu);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800244e:	22ff      	movs	r2, #255	; 0xff
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fdbc 	bl	8000fd0 <pack_left_shift_u8>
 8002458:	4603      	mov	r3, r0
 800245a:	4619      	mov	r1, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3303      	adds	r3, #3
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3303      	adds	r3, #3
 8002466:	430a      	orrs	r2, r1
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s2, 0u, 0xffu);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002472:	22ff      	movs	r2, #255	; 0xff
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fdaa 	bl	8000fd0 <pack_left_shift_u8>
 800247c:	4603      	mov	r3, r0
 800247e:	4619      	mov	r1, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3304      	adds	r3, #4
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3304      	adds	r3, #4
 800248a:	430a      	orrs	r2, r1
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s2, 0u, 0xffu);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8002496:	22ff      	movs	r2, #255	; 0xff
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fd98 	bl	8000fd0 <pack_left_shift_u8>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4619      	mov	r1, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3305      	adds	r3, #5
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3305      	adds	r3, #5
 80024ae:	430a      	orrs	r2, r1
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s2, 0u, 0xffu);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80024ba:	22ff      	movs	r2, #255	; 0xff
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fd86 	bl	8000fd0 <pack_left_shift_u8>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4619      	mov	r1, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3306      	adds	r3, #6
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3306      	adds	r3, #6
 80024d2:	430a      	orrs	r2, r1
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]
        break;
 80024d8:	f000 bfb1 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 3:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s2, 0u, 0xffu);
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	791b      	ldrb	r3, [r3, #4]
 80024e0:	22ff      	movs	r2, #255	; 0xff
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fd73 	bl	8000fd0 <pack_left_shift_u8>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4619      	mov	r1, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	3301      	adds	r3, #1
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	3301      	adds	r3, #1
 80024f8:	430a      	orrs	r2, r1
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s2, 0u, 0xffu);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	7f1b      	ldrb	r3, [r3, #28]
 8002502:	22ff      	movs	r2, #255	; 0xff
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fd62 	bl	8000fd0 <pack_left_shift_u8>
 800250c:	4603      	mov	r3, r0
 800250e:	4619      	mov	r1, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3302      	adds	r3, #2
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3302      	adds	r3, #2
 800251a:	430a      	orrs	r2, r1
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s2, 0u, 0xffu);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002526:	22ff      	movs	r2, #255	; 0xff
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fd50 	bl	8000fd0 <pack_left_shift_u8>
 8002530:	4603      	mov	r3, r0
 8002532:	4619      	mov	r1, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3303      	adds	r3, #3
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3303      	adds	r3, #3
 800253e:	430a      	orrs	r2, r1
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s2, 0u, 0xffu);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800254a:	22ff      	movs	r2, #255	; 0xff
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fd3e 	bl	8000fd0 <pack_left_shift_u8>
 8002554:	4603      	mov	r3, r0
 8002556:	4619      	mov	r1, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3304      	adds	r3, #4
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3304      	adds	r3, #4
 8002562:	430a      	orrs	r2, r1
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	701a      	strb	r2, [r3, #0]
        break;
 8002568:	f000 bf69 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 4:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s3, 0u, 0xffu);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	795b      	ldrb	r3, [r3, #5]
 8002570:	22ff      	movs	r2, #255	; 0xff
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fd2b 	bl	8000fd0 <pack_left_shift_u8>
 800257a:	4603      	mov	r3, r0
 800257c:	4619      	mov	r1, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3301      	adds	r3, #1
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3301      	adds	r3, #1
 8002588:	430a      	orrs	r2, r1
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s3, 0u, 0xffu);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	7f5b      	ldrb	r3, [r3, #29]
 8002592:	22ff      	movs	r2, #255	; 0xff
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fd1a 	bl	8000fd0 <pack_left_shift_u8>
 800259c:	4603      	mov	r3, r0
 800259e:	4619      	mov	r1, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3302      	adds	r3, #2
 80025a4:	781a      	ldrb	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3302      	adds	r3, #2
 80025aa:	430a      	orrs	r2, r1
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s3, 0u, 0xffu);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b6:	22ff      	movs	r2, #255	; 0xff
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fd08 	bl	8000fd0 <pack_left_shift_u8>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4619      	mov	r1, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3303      	adds	r3, #3
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3303      	adds	r3, #3
 80025ce:	430a      	orrs	r2, r1
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s3, 0u, 0xffu);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80025da:	22ff      	movs	r2, #255	; 0xff
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fcf6 	bl	8000fd0 <pack_left_shift_u8>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4619      	mov	r1, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3304      	adds	r3, #4
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3304      	adds	r3, #4
 80025f2:	430a      	orrs	r2, r1
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s3, 0u, 0xffu);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80025fe:	22ff      	movs	r2, #255	; 0xff
 8002600:	2100      	movs	r1, #0
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fce4 	bl	8000fd0 <pack_left_shift_u8>
 8002608:	4603      	mov	r3, r0
 800260a:	4619      	mov	r1, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3305      	adds	r3, #5
 8002610:	781a      	ldrb	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3305      	adds	r3, #5
 8002616:	430a      	orrs	r2, r1
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s3, 0u, 0xffu);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002622:	22ff      	movs	r2, #255	; 0xff
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fcd2 	bl	8000fd0 <pack_left_shift_u8>
 800262c:	4603      	mov	r3, r0
 800262e:	4619      	mov	r1, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3306      	adds	r3, #6
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3306      	adds	r3, #6
 800263a:	430a      	orrs	r2, r1
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	701a      	strb	r2, [r3, #0]
        break;
 8002640:	f000 befd 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 5:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s3, 0u, 0xffu);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	799b      	ldrb	r3, [r3, #6]
 8002648:	22ff      	movs	r2, #255	; 0xff
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fcbf 	bl	8000fd0 <pack_left_shift_u8>
 8002652:	4603      	mov	r3, r0
 8002654:	4619      	mov	r1, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3301      	adds	r3, #1
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3301      	adds	r3, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s3, 0u, 0xffu);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	7f9b      	ldrb	r3, [r3, #30]
 800266a:	22ff      	movs	r2, #255	; 0xff
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fcae 	bl	8000fd0 <pack_left_shift_u8>
 8002674:	4603      	mov	r3, r0
 8002676:	4619      	mov	r1, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3302      	adds	r3, #2
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3302      	adds	r3, #2
 8002682:	430a      	orrs	r2, r1
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s3, 0u, 0xffu);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800268e:	22ff      	movs	r2, #255	; 0xff
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fc9c 	bl	8000fd0 <pack_left_shift_u8>
 8002698:	4603      	mov	r3, r0
 800269a:	4619      	mov	r1, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3303      	adds	r3, #3
 80026a0:	781a      	ldrb	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3303      	adds	r3, #3
 80026a6:	430a      	orrs	r2, r1
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s3, 0u, 0xffu);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80026b2:	22ff      	movs	r2, #255	; 0xff
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fc8a 	bl	8000fd0 <pack_left_shift_u8>
 80026bc:	4603      	mov	r3, r0
 80026be:	4619      	mov	r1, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3304      	adds	r3, #4
 80026c4:	781a      	ldrb	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3304      	adds	r3, #4
 80026ca:	430a      	orrs	r2, r1
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s3, 0u, 0xffu);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80026d6:	22ff      	movs	r2, #255	; 0xff
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fc78 	bl	8000fd0 <pack_left_shift_u8>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4619      	mov	r1, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3305      	adds	r3, #5
 80026e8:	781a      	ldrb	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3305      	adds	r3, #5
 80026ee:	430a      	orrs	r2, r1
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]
        break;
 80026f4:	f000 bea3 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 6:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s4, 0u, 0xffu);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	79db      	ldrb	r3, [r3, #7]
 80026fc:	22ff      	movs	r2, #255	; 0xff
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe fc65 	bl	8000fd0 <pack_left_shift_u8>
 8002706:	4603      	mov	r3, r0
 8002708:	4619      	mov	r1, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	3301      	adds	r3, #1
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3301      	adds	r3, #1
 8002714:	430a      	orrs	r2, r1
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s4, 0u, 0xffu);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	7fdb      	ldrb	r3, [r3, #31]
 800271e:	22ff      	movs	r2, #255	; 0xff
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fc54 	bl	8000fd0 <pack_left_shift_u8>
 8002728:	4603      	mov	r3, r0
 800272a:	4619      	mov	r1, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3302      	adds	r3, #2
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3302      	adds	r3, #2
 8002736:	430a      	orrs	r2, r1
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s4, 0u, 0xffu);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002742:	22ff      	movs	r2, #255	; 0xff
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fc42 	bl	8000fd0 <pack_left_shift_u8>
 800274c:	4603      	mov	r3, r0
 800274e:	4619      	mov	r1, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3303      	adds	r3, #3
 8002754:	781a      	ldrb	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3303      	adds	r3, #3
 800275a:	430a      	orrs	r2, r1
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s4, 0u, 0xffu);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8002766:	22ff      	movs	r2, #255	; 0xff
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe fc30 	bl	8000fd0 <pack_left_shift_u8>
 8002770:	4603      	mov	r3, r0
 8002772:	4619      	mov	r1, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3304      	adds	r3, #4
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3304      	adds	r3, #4
 800277e:	430a      	orrs	r2, r1
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s4, 0u, 0xffu);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800278a:	22ff      	movs	r2, #255	; 0xff
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fc1e 	bl	8000fd0 <pack_left_shift_u8>
 8002794:	4603      	mov	r3, r0
 8002796:	4619      	mov	r1, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3305      	adds	r3, #5
 800279c:	781a      	ldrb	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3305      	adds	r3, #5
 80027a2:	430a      	orrs	r2, r1
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s4, 0u, 0xffu);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80027ae:	22ff      	movs	r2, #255	; 0xff
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fc0c 	bl	8000fd0 <pack_left_shift_u8>
 80027b8:	4603      	mov	r3, r0
 80027ba:	4619      	mov	r1, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3306      	adds	r3, #6
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3306      	adds	r3, #6
 80027c6:	430a      	orrs	r2, r1
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	701a      	strb	r2, [r3, #0]
        break;
 80027cc:	f000 be37 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 7:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s4, 0u, 0xffu);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	7a1b      	ldrb	r3, [r3, #8]
 80027d4:	22ff      	movs	r2, #255	; 0xff
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fbf9 	bl	8000fd0 <pack_left_shift_u8>
 80027de:	4603      	mov	r3, r0
 80027e0:	4619      	mov	r1, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3301      	adds	r3, #1
 80027e6:	781a      	ldrb	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3301      	adds	r3, #1
 80027ec:	430a      	orrs	r2, r1
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s4, 0u, 0xffu);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f8:	22ff      	movs	r2, #255	; 0xff
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe fbe7 	bl	8000fd0 <pack_left_shift_u8>
 8002802:	4603      	mov	r3, r0
 8002804:	4619      	mov	r1, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3302      	adds	r3, #2
 800280a:	781a      	ldrb	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3302      	adds	r3, #2
 8002810:	430a      	orrs	r2, r1
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s4, 0u, 0xffu);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800281c:	22ff      	movs	r2, #255	; 0xff
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fbd5 	bl	8000fd0 <pack_left_shift_u8>
 8002826:	4603      	mov	r3, r0
 8002828:	4619      	mov	r1, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3303      	adds	r3, #3
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3303      	adds	r3, #3
 8002834:	430a      	orrs	r2, r1
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s4, 0u, 0xffu);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002840:	22ff      	movs	r2, #255	; 0xff
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fbc3 	bl	8000fd0 <pack_left_shift_u8>
 800284a:	4603      	mov	r3, r0
 800284c:	4619      	mov	r1, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3304      	adds	r3, #4
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	3304      	adds	r3, #4
 8002858:	430a      	orrs	r2, r1
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]
        break;
 800285e:	f000 bdee 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 8:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s5, 0u, 0xffu);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	7a5b      	ldrb	r3, [r3, #9]
 8002866:	22ff      	movs	r2, #255	; 0xff
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fbb0 	bl	8000fd0 <pack_left_shift_u8>
 8002870:	4603      	mov	r3, r0
 8002872:	4619      	mov	r1, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3301      	adds	r3, #1
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3301      	adds	r3, #1
 800287e:	430a      	orrs	r2, r1
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s5, 0u, 0xffu);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800288a:	22ff      	movs	r2, #255	; 0xff
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fb9e 	bl	8000fd0 <pack_left_shift_u8>
 8002894:	4603      	mov	r3, r0
 8002896:	4619      	mov	r1, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3302      	adds	r3, #2
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3302      	adds	r3, #2
 80028a2:	430a      	orrs	r2, r1
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s5, 0u, 0xffu);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028ae:	22ff      	movs	r2, #255	; 0xff
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fb8c 	bl	8000fd0 <pack_left_shift_u8>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4619      	mov	r1, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3303      	adds	r3, #3
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3303      	adds	r3, #3
 80028c6:	430a      	orrs	r2, r1
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s5, 0u, 0xffu);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d2:	22ff      	movs	r2, #255	; 0xff
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fb7a 	bl	8000fd0 <pack_left_shift_u8>
 80028dc:	4603      	mov	r3, r0
 80028de:	4619      	mov	r1, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3304      	adds	r3, #4
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3304      	adds	r3, #4
 80028ea:	430a      	orrs	r2, r1
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s5, 0u, 0xffu);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80028f6:	22ff      	movs	r2, #255	; 0xff
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fb68 	bl	8000fd0 <pack_left_shift_u8>
 8002900:	4603      	mov	r3, r0
 8002902:	4619      	mov	r1, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	3305      	adds	r3, #5
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3305      	adds	r3, #5
 800290e:	430a      	orrs	r2, r1
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s5, 0u, 0xffu);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800291a:	22ff      	movs	r2, #255	; 0xff
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fb56 	bl	8000fd0 <pack_left_shift_u8>
 8002924:	4603      	mov	r3, r0
 8002926:	4619      	mov	r1, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3306      	adds	r3, #6
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3306      	adds	r3, #6
 8002932:	430a      	orrs	r2, r1
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]
        break;
 8002938:	f000 bd81 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 9:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s5, 0u, 0xffu);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	7a9b      	ldrb	r3, [r3, #10]
 8002940:	22ff      	movs	r2, #255	; 0xff
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fb43 	bl	8000fd0 <pack_left_shift_u8>
 800294a:	4603      	mov	r3, r0
 800294c:	4619      	mov	r1, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3301      	adds	r3, #1
 8002952:	781a      	ldrb	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3301      	adds	r3, #1
 8002958:	430a      	orrs	r2, r1
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s5, 0u, 0xffu);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002964:	22ff      	movs	r2, #255	; 0xff
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fb31 	bl	8000fd0 <pack_left_shift_u8>
 800296e:	4603      	mov	r3, r0
 8002970:	4619      	mov	r1, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3302      	adds	r3, #2
 8002976:	781a      	ldrb	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	3302      	adds	r3, #2
 800297c:	430a      	orrs	r2, r1
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s5, 0u, 0xffu);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002988:	22ff      	movs	r2, #255	; 0xff
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fb1f 	bl	8000fd0 <pack_left_shift_u8>
 8002992:	4603      	mov	r3, r0
 8002994:	4619      	mov	r1, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3303      	adds	r3, #3
 800299a:	781a      	ldrb	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3303      	adds	r3, #3
 80029a0:	430a      	orrs	r2, r1
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s5, 0u, 0xffu);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80029ac:	22ff      	movs	r2, #255	; 0xff
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe fb0d 	bl	8000fd0 <pack_left_shift_u8>
 80029b6:	4603      	mov	r3, r0
 80029b8:	4619      	mov	r1, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3304      	adds	r3, #4
 80029be:	781a      	ldrb	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3304      	adds	r3, #4
 80029c4:	430a      	orrs	r2, r1
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s5, 0u, 0xffu);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80029d0:	22ff      	movs	r2, #255	; 0xff
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe fafb 	bl	8000fd0 <pack_left_shift_u8>
 80029da:	4603      	mov	r3, r0
 80029dc:	4619      	mov	r1, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3305      	adds	r3, #5
 80029e2:	781a      	ldrb	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3305      	adds	r3, #5
 80029e8:	430a      	orrs	r2, r1
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]
        break;
 80029ee:	f000 bd26 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 10:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s6, 0u, 0xffu);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	7adb      	ldrb	r3, [r3, #11]
 80029f6:	22ff      	movs	r2, #255	; 0xff
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fae8 	bl	8000fd0 <pack_left_shift_u8>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4619      	mov	r1, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3301      	adds	r3, #1
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s6, 0u, 0xffu);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002a1a:	22ff      	movs	r2, #255	; 0xff
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fad6 	bl	8000fd0 <pack_left_shift_u8>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4619      	mov	r1, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	781a      	ldrb	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3302      	adds	r3, #2
 8002a32:	430a      	orrs	r2, r1
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s6, 0u, 0xffu);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002a3e:	22ff      	movs	r2, #255	; 0xff
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fac4 	bl	8000fd0 <pack_left_shift_u8>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3303      	adds	r3, #3
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3303      	adds	r3, #3
 8002a56:	430a      	orrs	r2, r1
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s6, 0u, 0xffu);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002a62:	22ff      	movs	r2, #255	; 0xff
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fab2 	bl	8000fd0 <pack_left_shift_u8>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4619      	mov	r1, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3304      	adds	r3, #4
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s6, 0u, 0xffu);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002a86:	22ff      	movs	r2, #255	; 0xff
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe faa0 	bl	8000fd0 <pack_left_shift_u8>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4619      	mov	r1, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3305      	adds	r3, #5
 8002a98:	781a      	ldrb	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3305      	adds	r3, #5
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s6, 0u, 0xffu);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002aaa:	22ff      	movs	r2, #255	; 0xff
 8002aac:	2100      	movs	r1, #0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fa8e 	bl	8000fd0 <pack_left_shift_u8>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3306      	adds	r3, #6
 8002abc:	781a      	ldrb	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3306      	adds	r3, #6
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]
        break;
 8002ac8:	f000 bcb9 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 11:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s6, 0u, 0xffu);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	7b1b      	ldrb	r3, [r3, #12]
 8002ad0:	22ff      	movs	r2, #255	; 0xff
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fa7b 	bl	8000fd0 <pack_left_shift_u8>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4619      	mov	r1, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s6, 0u, 0xffu);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af4:	22ff      	movs	r2, #255	; 0xff
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe fa69 	bl	8000fd0 <pack_left_shift_u8>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4619      	mov	r1, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3302      	adds	r3, #2
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s6, 0u, 0xffu);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b18:	22ff      	movs	r2, #255	; 0xff
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe fa57 	bl	8000fd0 <pack_left_shift_u8>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4619      	mov	r1, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3303      	adds	r3, #3
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3303      	adds	r3, #3
 8002b30:	430a      	orrs	r2, r1
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s6, 0u, 0xffu);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b3c:	22ff      	movs	r2, #255	; 0xff
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fa45 	bl	8000fd0 <pack_left_shift_u8>
 8002b46:	4603      	mov	r3, r0
 8002b48:	4619      	mov	r1, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3304      	adds	r3, #4
 8002b54:	430a      	orrs	r2, r1
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]
        break;
 8002b5a:	f000 bc70 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 12:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s7, 0u, 0xffu);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	7b5b      	ldrb	r3, [r3, #13]
 8002b62:	22ff      	movs	r2, #255	; 0xff
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fa32 	bl	8000fd0 <pack_left_shift_u8>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4619      	mov	r1, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3301      	adds	r3, #1
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s7, 0u, 0xffu);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b86:	22ff      	movs	r2, #255	; 0xff
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fa20 	bl	8000fd0 <pack_left_shift_u8>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4619      	mov	r1, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3302      	adds	r3, #2
 8002b98:	781a      	ldrb	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s7, 0u, 0xffu);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002baa:	22ff      	movs	r2, #255	; 0xff
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fa0e 	bl	8000fd0 <pack_left_shift_u8>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3303      	adds	r3, #3
 8002bbc:	781a      	ldrb	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3303      	adds	r3, #3
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s7, 0u, 0xffu);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002bce:	22ff      	movs	r2, #255	; 0xff
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe f9fc 	bl	8000fd0 <pack_left_shift_u8>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4619      	mov	r1, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3304      	adds	r3, #4
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3304      	adds	r3, #4
 8002be6:	430a      	orrs	r2, r1
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s7, 0u, 0xffu);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002bf2:	22ff      	movs	r2, #255	; 0xff
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe f9ea 	bl	8000fd0 <pack_left_shift_u8>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	4619      	mov	r1, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3305      	adds	r3, #5
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3305      	adds	r3, #5
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s7, 0u, 0xffu);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8002c16:	22ff      	movs	r2, #255	; 0xff
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe f9d8 	bl	8000fd0 <pack_left_shift_u8>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4619      	mov	r1, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3306      	adds	r3, #6
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3306      	adds	r3, #6
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]
        break;
 8002c34:	f000 bc03 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 13:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s7, 0u, 0xffu);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	7b9b      	ldrb	r3, [r3, #14]
 8002c3c:	22ff      	movs	r2, #255	; 0xff
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe f9c5 	bl	8000fd0 <pack_left_shift_u8>
 8002c46:	4603      	mov	r3, r0
 8002c48:	4619      	mov	r1, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	781a      	ldrb	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3301      	adds	r3, #1
 8002c54:	430a      	orrs	r2, r1
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s7, 0u, 0xffu);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002c60:	22ff      	movs	r2, #255	; 0xff
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe f9b3 	bl	8000fd0 <pack_left_shift_u8>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3302      	adds	r3, #2
 8002c72:	781a      	ldrb	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3302      	adds	r3, #2
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s7, 0u, 0xffu);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c84:	22ff      	movs	r2, #255	; 0xff
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe f9a1 	bl	8000fd0 <pack_left_shift_u8>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4619      	mov	r1, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3303      	adds	r3, #3
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3303      	adds	r3, #3
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s7, 0u, 0xffu);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002ca8:	22ff      	movs	r2, #255	; 0xff
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe f98f 	bl	8000fd0 <pack_left_shift_u8>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	781a      	ldrb	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s7, 0u, 0xffu);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8002ccc:	22ff      	movs	r2, #255	; 0xff
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe f97d 	bl	8000fd0 <pack_left_shift_u8>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4619      	mov	r1, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3305      	adds	r3, #5
 8002cde:	781a      	ldrb	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3305      	adds	r3, #5
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]
        break;
 8002cea:	e3a8      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 14:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s8, 0u, 0xffu);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	7bdb      	ldrb	r3, [r3, #15]
 8002cf0:	22ff      	movs	r2, #255	; 0xff
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe f96b 	bl	8000fd0 <pack_left_shift_u8>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3301      	adds	r3, #1
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3301      	adds	r3, #1
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s8, 0u, 0xffu);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002d14:	22ff      	movs	r2, #255	; 0xff
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe f959 	bl	8000fd0 <pack_left_shift_u8>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4619      	mov	r1, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3302      	adds	r3, #2
 8002d26:	781a      	ldrb	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s8, 0u, 0xffu);
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe f947 	bl	8000fd0 <pack_left_shift_u8>
 8002d42:	4603      	mov	r3, r0
 8002d44:	4619      	mov	r1, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3303      	adds	r3, #3
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3303      	adds	r3, #3
 8002d50:	430a      	orrs	r2, r1
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s8, 0u, 0xffu);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002d5c:	22ff      	movs	r2, #255	; 0xff
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe f935 	bl	8000fd0 <pack_left_shift_u8>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4619      	mov	r1, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	781a      	ldrb	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3304      	adds	r3, #4
 8002d74:	430a      	orrs	r2, r1
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s8, 0u, 0xffu);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002d80:	22ff      	movs	r2, #255	; 0xff
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe f923 	bl	8000fd0 <pack_left_shift_u8>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3305      	adds	r3, #5
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3305      	adds	r3, #5
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s8, 0u, 0xffu);
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002da4:	22ff      	movs	r2, #255	; 0xff
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe f911 	bl	8000fd0 <pack_left_shift_u8>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4619      	mov	r1, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3306      	adds	r3, #6
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3306      	adds	r3, #6
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]
        break;
 8002dc2:	e33c      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 15:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s8, 0u, 0xffu);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	7c1b      	ldrb	r3, [r3, #16]
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe f8ff 	bl	8000fd0 <pack_left_shift_u8>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	781a      	ldrb	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3301      	adds	r3, #1
 8002de0:	430a      	orrs	r2, r1
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s8, 0u, 0xffu);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002dec:	22ff      	movs	r2, #255	; 0xff
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe f8ed 	bl	8000fd0 <pack_left_shift_u8>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4619      	mov	r1, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3302      	adds	r3, #2
 8002e04:	430a      	orrs	r2, r1
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s8, 0u, 0xffu);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e10:	22ff      	movs	r2, #255	; 0xff
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe f8db 	bl	8000fd0 <pack_left_shift_u8>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3303      	adds	r3, #3
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3303      	adds	r3, #3
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s8, 0u, 0xffu);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e34:	22ff      	movs	r2, #255	; 0xff
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe f8c9 	bl	8000fd0 <pack_left_shift_u8>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4619      	mov	r1, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3304      	adds	r3, #4
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]
        break;
 8002e52:	e2f4      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 16:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s9, 0u, 0xffu);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	7c5b      	ldrb	r3, [r3, #17]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe f8b7 	bl	8000fd0 <pack_left_shift_u8>
 8002e62:	4603      	mov	r3, r0
 8002e64:	4619      	mov	r1, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	430a      	orrs	r2, r1
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s9, 0u, 0xffu);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e7c:	22ff      	movs	r2, #255	; 0xff
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe f8a5 	bl	8000fd0 <pack_left_shift_u8>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4619      	mov	r1, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	781a      	ldrb	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3302      	adds	r3, #2
 8002e94:	430a      	orrs	r2, r1
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s9, 0u, 0xffu);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea0:	22ff      	movs	r2, #255	; 0xff
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe f893 	bl	8000fd0 <pack_left_shift_u8>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4619      	mov	r1, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3303      	adds	r3, #3
 8002eb2:	781a      	ldrb	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3303      	adds	r3, #3
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s9, 0u, 0xffu);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002ec4:	22ff      	movs	r2, #255	; 0xff
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe f881 	bl	8000fd0 <pack_left_shift_u8>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3304      	adds	r3, #4
 8002edc:	430a      	orrs	r2, r1
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s9, 0u, 0xffu);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8002ee8:	22ff      	movs	r2, #255	; 0xff
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe f86f 	bl	8000fd0 <pack_left_shift_u8>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3305      	adds	r3, #5
 8002efa:	781a      	ldrb	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3305      	adds	r3, #5
 8002f00:	430a      	orrs	r2, r1
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s9, 0u, 0xffu);
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002f0c:	22ff      	movs	r2, #255	; 0xff
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe f85d 	bl	8000fd0 <pack_left_shift_u8>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4619      	mov	r1, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3306      	adds	r3, #6
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3306      	adds	r3, #6
 8002f24:	430a      	orrs	r2, r1
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]
        break;
 8002f2a:	e288      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 17:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s9, 0u, 0xffu);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	7c9b      	ldrb	r3, [r3, #18]
 8002f30:	22ff      	movs	r2, #255	; 0xff
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe f84b 	bl	8000fd0 <pack_left_shift_u8>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3301      	adds	r3, #1
 8002f42:	781a      	ldrb	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3301      	adds	r3, #1
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s9, 0u, 0xffu);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002f54:	22ff      	movs	r2, #255	; 0xff
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe f839 	bl	8000fd0 <pack_left_shift_u8>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4619      	mov	r1, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3302      	adds	r3, #2
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s9, 0u, 0xffu);
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f78:	22ff      	movs	r2, #255	; 0xff
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe f827 	bl	8000fd0 <pack_left_shift_u8>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4619      	mov	r1, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3303      	adds	r3, #3
 8002f8a:	781a      	ldrb	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3303      	adds	r3, #3
 8002f90:	430a      	orrs	r2, r1
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s9, 0u, 0xffu);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8002f9c:	22ff      	movs	r2, #255	; 0xff
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe f815 	bl	8000fd0 <pack_left_shift_u8>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4619      	mov	r1, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3304      	adds	r3, #4
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s9, 0u, 0xffu);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8002fc0:	22ff      	movs	r2, #255	; 0xff
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe f803 	bl	8000fd0 <pack_left_shift_u8>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4619      	mov	r1, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3305      	adds	r3, #5
 8002fd2:	781a      	ldrb	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3305      	adds	r3, #5
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]
        break;
 8002fde:	e22e      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 18:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s10, 0u, 0xffu);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	7cdb      	ldrb	r3, [r3, #19]
 8002fe4:	22ff      	movs	r2, #255	; 0xff
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fff1 	bl	8000fd0 <pack_left_shift_u8>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s10, 0u, 0xffu);
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003008:	22ff      	movs	r2, #255	; 0xff
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd ffdf 	bl	8000fd0 <pack_left_shift_u8>
 8003012:	4603      	mov	r3, r0
 8003014:	4619      	mov	r1, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3302      	adds	r3, #2
 800301a:	781a      	ldrb	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3302      	adds	r3, #2
 8003020:	430a      	orrs	r2, r1
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s10, 0u, 0xffu);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800302c:	22ff      	movs	r2, #255	; 0xff
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd ffcd 	bl	8000fd0 <pack_left_shift_u8>
 8003036:	4603      	mov	r3, r0
 8003038:	4619      	mov	r1, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3303      	adds	r3, #3
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3303      	adds	r3, #3
 8003044:	430a      	orrs	r2, r1
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s10, 0u, 0xffu);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003050:	22ff      	movs	r2, #255	; 0xff
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd ffbb 	bl	8000fd0 <pack_left_shift_u8>
 800305a:	4603      	mov	r3, r0
 800305c:	4619      	mov	r1, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3304      	adds	r3, #4
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3304      	adds	r3, #4
 8003068:	430a      	orrs	r2, r1
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s10, 0u, 0xffu);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8003074:	22ff      	movs	r2, #255	; 0xff
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd ffa9 	bl	8000fd0 <pack_left_shift_u8>
 800307e:	4603      	mov	r3, r0
 8003080:	4619      	mov	r1, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3305      	adds	r3, #5
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3305      	adds	r3, #5
 800308c:	430a      	orrs	r2, r1
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s10, 0u, 0xffu);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003098:	22ff      	movs	r2, #255	; 0xff
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd ff97 	bl	8000fd0 <pack_left_shift_u8>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4619      	mov	r1, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3306      	adds	r3, #6
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3306      	adds	r3, #6
 80030b0:	430a      	orrs	r2, r1
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]
        break;
 80030b6:	e1c2      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 19:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s10, 0u, 0xffu);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	7d1b      	ldrb	r3, [r3, #20]
 80030bc:	22ff      	movs	r2, #255	; 0xff
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd ff85 	bl	8000fd0 <pack_left_shift_u8>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4619      	mov	r1, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3301      	adds	r3, #1
 80030ce:	781a      	ldrb	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3301      	adds	r3, #1
 80030d4:	430a      	orrs	r2, r1
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s10, 0u, 0xffu);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80030e0:	22ff      	movs	r2, #255	; 0xff
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd ff73 	bl	8000fd0 <pack_left_shift_u8>
 80030ea:	4603      	mov	r3, r0
 80030ec:	4619      	mov	r1, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3302      	adds	r3, #2
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3302      	adds	r3, #2
 80030f8:	430a      	orrs	r2, r1
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s10, 0u, 0xffu);
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003104:	22ff      	movs	r2, #255	; 0xff
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd ff61 	bl	8000fd0 <pack_left_shift_u8>
 800310e:	4603      	mov	r3, r0
 8003110:	4619      	mov	r1, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3303      	adds	r3, #3
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3303      	adds	r3, #3
 800311c:	430a      	orrs	r2, r1
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s10, 0u, 0xffu);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003128:	22ff      	movs	r2, #255	; 0xff
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd ff4f 	bl	8000fd0 <pack_left_shift_u8>
 8003132:	4603      	mov	r3, r0
 8003134:	4619      	mov	r1, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3304      	adds	r3, #4
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3304      	adds	r3, #4
 8003140:	430a      	orrs	r2, r1
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]
        break;
 8003146:	e17a      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 20:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s11, 0u, 0xffu);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	7d5b      	ldrb	r3, [r3, #21]
 800314c:	22ff      	movs	r2, #255	; 0xff
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd ff3d 	bl	8000fd0 <pack_left_shift_u8>
 8003156:	4603      	mov	r3, r0
 8003158:	4619      	mov	r1, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3301      	adds	r3, #1
 800315e:	781a      	ldrb	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3301      	adds	r3, #1
 8003164:	430a      	orrs	r2, r1
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s11, 0u, 0xffu);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003170:	22ff      	movs	r2, #255	; 0xff
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd ff2b 	bl	8000fd0 <pack_left_shift_u8>
 800317a:	4603      	mov	r3, r0
 800317c:	4619      	mov	r1, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3302      	adds	r3, #2
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3302      	adds	r3, #2
 8003188:	430a      	orrs	r2, r1
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s11, 0u, 0xffu);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003194:	22ff      	movs	r2, #255	; 0xff
 8003196:	2100      	movs	r1, #0
 8003198:	4618      	mov	r0, r3
 800319a:	f7fd ff19 	bl	8000fd0 <pack_left_shift_u8>
 800319e:	4603      	mov	r3, r0
 80031a0:	4619      	mov	r1, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3303      	adds	r3, #3
 80031a6:	781a      	ldrb	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3303      	adds	r3, #3
 80031ac:	430a      	orrs	r2, r1
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s11, 0u, 0xffu);
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031b8:	22ff      	movs	r2, #255	; 0xff
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd ff07 	bl	8000fd0 <pack_left_shift_u8>
 80031c2:	4603      	mov	r3, r0
 80031c4:	4619      	mov	r1, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3304      	adds	r3, #4
 80031ca:	781a      	ldrb	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3304      	adds	r3, #4
 80031d0:	430a      	orrs	r2, r1
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s11, 0u, 0xffu);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80031dc:	22ff      	movs	r2, #255	; 0xff
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd fef5 	bl	8000fd0 <pack_left_shift_u8>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4619      	mov	r1, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3305      	adds	r3, #5
 80031ee:	781a      	ldrb	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3305      	adds	r3, #5
 80031f4:	430a      	orrs	r2, r1
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s11, 0u, 0xffu);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003200:	22ff      	movs	r2, #255	; 0xff
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd fee3 	bl	8000fd0 <pack_left_shift_u8>
 800320a:	4603      	mov	r3, r0
 800320c:	4619      	mov	r1, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3306      	adds	r3, #6
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3306      	adds	r3, #6
 8003218:	430a      	orrs	r2, r1
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]
        break;
 800321e:	e10e      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 21:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s11, 0u, 0xffu);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	7d9b      	ldrb	r3, [r3, #22]
 8003224:	22ff      	movs	r2, #255	; 0xff
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd fed1 	bl	8000fd0 <pack_left_shift_u8>
 800322e:	4603      	mov	r3, r0
 8003230:	4619      	mov	r1, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3301      	adds	r3, #1
 8003236:	781a      	ldrb	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3301      	adds	r3, #1
 800323c:	430a      	orrs	r2, r1
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s11, 0u, 0xffu);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003248:	22ff      	movs	r2, #255	; 0xff
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd febf 	bl	8000fd0 <pack_left_shift_u8>
 8003252:	4603      	mov	r3, r0
 8003254:	4619      	mov	r1, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3302      	adds	r3, #2
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3302      	adds	r3, #2
 8003260:	430a      	orrs	r2, r1
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s11, 0u, 0xffu);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800326c:	22ff      	movs	r2, #255	; 0xff
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd fead 	bl	8000fd0 <pack_left_shift_u8>
 8003276:	4603      	mov	r3, r0
 8003278:	4619      	mov	r1, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3303      	adds	r3, #3
 800327e:	781a      	ldrb	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3303      	adds	r3, #3
 8003284:	430a      	orrs	r2, r1
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s11, 0u, 0xffu);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8003290:	22ff      	movs	r2, #255	; 0xff
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd fe9b 	bl	8000fd0 <pack_left_shift_u8>
 800329a:	4603      	mov	r3, r0
 800329c:	4619      	mov	r1, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3304      	adds	r3, #4
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3304      	adds	r3, #4
 80032a8:	430a      	orrs	r2, r1
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s11, 0u, 0xffu);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80032b4:	22ff      	movs	r2, #255	; 0xff
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd fe89 	bl	8000fd0 <pack_left_shift_u8>
 80032be:	4603      	mov	r3, r0
 80032c0:	4619      	mov	r1, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3305      	adds	r3, #5
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3305      	adds	r3, #5
 80032cc:	430a      	orrs	r2, r1
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]
        break;
 80032d2:	e0b4      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 22:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s12, 0u, 0xffu);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	7ddb      	ldrb	r3, [r3, #23]
 80032d8:	22ff      	movs	r2, #255	; 0xff
 80032da:	2100      	movs	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd fe77 	bl	8000fd0 <pack_left_shift_u8>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4619      	mov	r1, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3301      	adds	r3, #1
 80032ea:	781a      	ldrb	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3301      	adds	r3, #1
 80032f0:	430a      	orrs	r2, r1
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s12, 0u, 0xffu);
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80032fc:	22ff      	movs	r2, #255	; 0xff
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd fe65 	bl	8000fd0 <pack_left_shift_u8>
 8003306:	4603      	mov	r3, r0
 8003308:	4619      	mov	r1, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3302      	adds	r3, #2
 800330e:	781a      	ldrb	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3302      	adds	r3, #2
 8003314:	430a      	orrs	r2, r1
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s12, 0u, 0xffu);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003320:	22ff      	movs	r2, #255	; 0xff
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd fe53 	bl	8000fd0 <pack_left_shift_u8>
 800332a:	4603      	mov	r3, r0
 800332c:	4619      	mov	r1, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3303      	adds	r3, #3
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3303      	adds	r3, #3
 8003338:	430a      	orrs	r2, r1
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s12, 0u, 0xffu);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8003344:	22ff      	movs	r2, #255	; 0xff
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd fe41 	bl	8000fd0 <pack_left_shift_u8>
 800334e:	4603      	mov	r3, r0
 8003350:	4619      	mov	r1, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3304      	adds	r3, #4
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3304      	adds	r3, #4
 800335c:	430a      	orrs	r2, r1
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s12, 0u, 0xffu);
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003368:	22ff      	movs	r2, #255	; 0xff
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f7fd fe2f 	bl	8000fd0 <pack_left_shift_u8>
 8003372:	4603      	mov	r3, r0
 8003374:	4619      	mov	r1, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3305      	adds	r3, #5
 800337a:	781a      	ldrb	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3305      	adds	r3, #5
 8003380:	430a      	orrs	r2, r1
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s12, 0u, 0xffu);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800338c:	22ff      	movs	r2, #255	; 0xff
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd fe1d 	bl	8000fd0 <pack_left_shift_u8>
 8003396:	4603      	mov	r3, r0
 8003398:	4619      	mov	r1, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3306      	adds	r3, #6
 800339e:	781a      	ldrb	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3306      	adds	r3, #6
 80033a4:	430a      	orrs	r2, r1
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]
        break;
 80033aa:	e048      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 23:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s12, 0u, 0xffu);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	7e1b      	ldrb	r3, [r3, #24]
 80033b0:	22ff      	movs	r2, #255	; 0xff
 80033b2:	2100      	movs	r1, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fd fe0b 	bl	8000fd0 <pack_left_shift_u8>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4619      	mov	r1, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3301      	adds	r3, #1
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3301      	adds	r3, #1
 80033c8:	430a      	orrs	r2, r1
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s12, 0u, 0xffu);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033d4:	22ff      	movs	r2, #255	; 0xff
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd fdf9 	bl	8000fd0 <pack_left_shift_u8>
 80033de:	4603      	mov	r3, r0
 80033e0:	4619      	mov	r1, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3302      	adds	r3, #2
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3302      	adds	r3, #2
 80033ec:	430a      	orrs	r2, r1
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s12, 0u, 0xffu);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80033f8:	22ff      	movs	r2, #255	; 0xff
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd fde7 	bl	8000fd0 <pack_left_shift_u8>
 8003402:	4603      	mov	r3, r0
 8003404:	4619      	mov	r1, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3303      	adds	r3, #3
 800340a:	781a      	ldrb	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3303      	adds	r3, #3
 8003410:	430a      	orrs	r2, r1
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s12, 0u, 0xffu);
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800341c:	22ff      	movs	r2, #255	; 0xff
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f7fd fdd5 	bl	8000fd0 <pack_left_shift_u8>
 8003426:	4603      	mov	r3, r0
 8003428:	4619      	mov	r1, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3304      	adds	r3, #4
 800342e:	781a      	ldrb	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3304      	adds	r3, #4
 8003434:	430a      	orrs	r2, r1
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]
        break;
 800343a:	e000      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    default:
        break;
 800343c:	bf00      	nop
    }

    return (7);
 800343e:	2307      	movs	r3, #7
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <can1_ams_cell_voltages_unpack>:

int can1_ams_cell_voltages_unpack(
    struct can1_ams_cell_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
    if (size < 7u) {
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b06      	cmp	r3, #6
 8003458:	d803      	bhi.n	8003462 <can1_ams_cell_voltages_unpack+0x1a>
        return (-EINVAL);
 800345a:	f06f 0315 	mvn.w	r3, #21
 800345e:	f000 beac 	b.w	80041ba <can1_ams_cell_voltages_unpack+0xd72>
    }

    dst_p->voltage_multiplexor = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	22ff      	movs	r2, #255	; 0xff
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f7fd fe0d 	bl	800108a <unpack_right_shift_u8>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	701a      	strb	r2, [r3, #0]

    switch (dst_p->voltage_multiplexor) {
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b17      	cmp	r3, #23
 800347e:	f200 869a 	bhi.w	80041b6 <can1_ams_cell_voltages_unpack+0xd6e>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <can1_ams_cell_voltages_unpack+0x40>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	080034e9 	.word	0x080034e9
 800348c:	08003585 	.word	0x08003585
 8003490:	08003607 	.word	0x08003607
 8003494:	080036a3 	.word	0x080036a3
 8003498:	0800370b 	.word	0x0800370b
 800349c:	080037a7 	.word	0x080037a7
 80034a0:	08003829 	.word	0x08003829
 80034a4:	080038c5 	.word	0x080038c5
 80034a8:	0800392f 	.word	0x0800392f
 80034ac:	080039cb 	.word	0x080039cb
 80034b0:	08003a4d 	.word	0x08003a4d
 80034b4:	08003ae9 	.word	0x08003ae9
 80034b8:	08003b51 	.word	0x08003b51
 80034bc:	08003bed 	.word	0x08003bed
 80034c0:	08003c6f 	.word	0x08003c6f
 80034c4:	08003d0b 	.word	0x08003d0b
 80034c8:	08003d73 	.word	0x08003d73
 80034cc:	08003e0f 	.word	0x08003e0f
 80034d0:	08003e91 	.word	0x08003e91
 80034d4:	08003f2d 	.word	0x08003f2d
 80034d8:	08003f95 	.word	0x08003f95
 80034dc:	08004031 	.word	0x08004031
 80034e0:	080040b3 	.word	0x080040b3
 80034e4:	0800414f 	.word	0x0800414f

    case 0:
        dst_p->v1s1 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	3301      	adds	r3, #1
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	22ff      	movs	r2, #255	; 0xff
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fdc9 	bl	800108a <unpack_right_shift_u8>
 80034f8:	4603      	mov	r3, r0
 80034fa:	461a      	mov	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	705a      	strb	r2, [r3, #1]
        dst_p->v2s1 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	3302      	adds	r3, #2
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	22ff      	movs	r2, #255	; 0xff
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd fdbd 	bl	800108a <unpack_right_shift_u8>
 8003510:	4603      	mov	r3, r0
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	765a      	strb	r2, [r3, #25]
        dst_p->v3s1 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	3303      	adds	r3, #3
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	22ff      	movs	r2, #255	; 0xff
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd fdb1 	bl	800108a <unpack_right_shift_u8>
 8003528:	4603      	mov	r3, r0
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        dst_p->v4s1 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3304      	adds	r3, #4
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	22ff      	movs	r2, #255	; 0xff
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f7fd fda4 	bl	800108a <unpack_right_shift_u8>
 8003542:	4603      	mov	r3, r0
 8003544:	461a      	mov	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        dst_p->v5s1 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	3305      	adds	r3, #5
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	22ff      	movs	r2, #255	; 0xff
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd fd97 	bl	800108a <unpack_right_shift_u8>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        dst_p->v6s1 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	3306      	adds	r3, #6
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	22ff      	movs	r2, #255	; 0xff
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fd8a 	bl	800108a <unpack_right_shift_u8>
 8003576:	4603      	mov	r3, r0
 8003578:	461a      	mov	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
        break;
 8003580:	f000 be1a 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 1:
        dst_p->v7s1 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	3301      	adds	r3, #1
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	22ff      	movs	r2, #255	; 0xff
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd fd7b 	bl	800108a <unpack_right_shift_u8>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	709a      	strb	r2, [r3, #2]
        dst_p->v8s1 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	3302      	adds	r3, #2
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	22ff      	movs	r2, #255	; 0xff
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fd fd6f 	bl	800108a <unpack_right_shift_u8>
 80035ac:	4603      	mov	r3, r0
 80035ae:	461a      	mov	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	769a      	strb	r2, [r3, #26]
        dst_p->v9s1 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	3303      	adds	r3, #3
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	22ff      	movs	r2, #255	; 0xff
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fd fd63 	bl	800108a <unpack_right_shift_u8>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        dst_p->v10s1 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3304      	adds	r3, #4
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	22ff      	movs	r2, #255	; 0xff
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fd fd56 	bl	800108a <unpack_right_shift_u8>
 80035de:	4603      	mov	r3, r0
 80035e0:	461a      	mov	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        dst_p->v11s1 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3305      	adds	r3, #5
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	22ff      	movs	r2, #255	; 0xff
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd fd49 	bl	800108a <unpack_right_shift_u8>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
        break;
 8003602:	f000 bdd9 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 2:
        dst_p->v1s2 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	3301      	adds	r3, #1
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	22ff      	movs	r2, #255	; 0xff
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f7fd fd3a 	bl	800108a <unpack_right_shift_u8>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	70da      	strb	r2, [r3, #3]
        dst_p->v2s2 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3302      	adds	r3, #2
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	22ff      	movs	r2, #255	; 0xff
 8003626:	2100      	movs	r1, #0
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fd2e 	bl	800108a <unpack_right_shift_u8>
 800362e:	4603      	mov	r3, r0
 8003630:	461a      	mov	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	76da      	strb	r2, [r3, #27]
        dst_p->v3s2 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3303      	adds	r3, #3
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	22ff      	movs	r2, #255	; 0xff
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f7fd fd22 	bl	800108a <unpack_right_shift_u8>
 8003646:	4603      	mov	r3, r0
 8003648:	461a      	mov	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        dst_p->v4s2 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3304      	adds	r3, #4
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	22ff      	movs	r2, #255	; 0xff
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f7fd fd15 	bl	800108a <unpack_right_shift_u8>
 8003660:	4603      	mov	r3, r0
 8003662:	461a      	mov	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        dst_p->v5s2 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	3305      	adds	r3, #5
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	22ff      	movs	r2, #255	; 0xff
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd fd08 	bl	800108a <unpack_right_shift_u8>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
        dst_p->v6s2 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	3306      	adds	r3, #6
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	22ff      	movs	r2, #255	; 0xff
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f7fd fcfb 	bl	800108a <unpack_right_shift_u8>
 8003694:	4603      	mov	r3, r0
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        break;
 800369e:	f000 bd8b 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 3:
        dst_p->v7s2 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	3301      	adds	r3, #1
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd fcec 	bl	800108a <unpack_right_shift_u8>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	711a      	strb	r2, [r3, #4]
        dst_p->v8s2 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	3302      	adds	r3, #2
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	22ff      	movs	r2, #255	; 0xff
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fd fce0 	bl	800108a <unpack_right_shift_u8>
 80036ca:	4603      	mov	r3, r0
 80036cc:	461a      	mov	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	771a      	strb	r2, [r3, #28]
        dst_p->v9s2 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	3303      	adds	r3, #3
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	22ff      	movs	r2, #255	; 0xff
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd fcd4 	bl	800108a <unpack_right_shift_u8>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        dst_p->v10s2 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	3304      	adds	r3, #4
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	22ff      	movs	r2, #255	; 0xff
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fcc7 	bl	800108a <unpack_right_shift_u8>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        break;
 8003706:	f000 bd57 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 4:
        dst_p->v1s3 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	3301      	adds	r3, #1
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	22ff      	movs	r2, #255	; 0xff
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f7fd fcb8 	bl	800108a <unpack_right_shift_u8>
 800371a:	4603      	mov	r3, r0
 800371c:	461a      	mov	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	715a      	strb	r2, [r3, #5]
        dst_p->v2s3 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3302      	adds	r3, #2
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	22ff      	movs	r2, #255	; 0xff
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd fcac 	bl	800108a <unpack_right_shift_u8>
 8003732:	4603      	mov	r3, r0
 8003734:	461a      	mov	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	775a      	strb	r2, [r3, #29]
        dst_p->v3s3 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3303      	adds	r3, #3
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	22ff      	movs	r2, #255	; 0xff
 8003742:	2100      	movs	r1, #0
 8003744:	4618      	mov	r0, r3
 8003746:	f7fd fca0 	bl	800108a <unpack_right_shift_u8>
 800374a:	4603      	mov	r3, r0
 800374c:	461a      	mov	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        dst_p->v4s3 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	3304      	adds	r3, #4
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	22ff      	movs	r2, #255	; 0xff
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f7fd fc93 	bl	800108a <unpack_right_shift_u8>
 8003764:	4603      	mov	r3, r0
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        dst_p->v5s3 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	3305      	adds	r3, #5
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	22ff      	movs	r2, #255	; 0xff
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f7fd fc86 	bl	800108a <unpack_right_shift_u8>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        dst_p->v6s3 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	3306      	adds	r3, #6
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	22ff      	movs	r2, #255	; 0xff
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f7fd fc79 	bl	800108a <unpack_right_shift_u8>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        break;
 80037a2:	f000 bd09 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 5:
        dst_p->v7s3 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	3301      	adds	r3, #1
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	22ff      	movs	r2, #255	; 0xff
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fd fc6a 	bl	800108a <unpack_right_shift_u8>
 80037b6:	4603      	mov	r3, r0
 80037b8:	461a      	mov	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	719a      	strb	r2, [r3, #6]
        dst_p->v8s3 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	3302      	adds	r3, #2
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	22ff      	movs	r2, #255	; 0xff
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fd fc5e 	bl	800108a <unpack_right_shift_u8>
 80037ce:	4603      	mov	r3, r0
 80037d0:	461a      	mov	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	779a      	strb	r2, [r3, #30]
        dst_p->v9s3 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	3303      	adds	r3, #3
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fd fc52 	bl	800108a <unpack_right_shift_u8>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461a      	mov	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        dst_p->v10s3 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	3304      	adds	r3, #4
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	22ff      	movs	r2, #255	; 0xff
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fd fc45 	bl	800108a <unpack_right_shift_u8>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        dst_p->v11s3 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	3305      	adds	r3, #5
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	22ff      	movs	r2, #255	; 0xff
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f7fd fc38 	bl	800108a <unpack_right_shift_u8>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        break;
 8003824:	f000 bcc8 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 6:
        dst_p->v1s4 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	3301      	adds	r3, #1
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	22ff      	movs	r2, #255	; 0xff
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f7fd fc29 	bl	800108a <unpack_right_shift_u8>
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	71da      	strb	r2, [r3, #7]
        dst_p->v2s4 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	3302      	adds	r3, #2
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	22ff      	movs	r2, #255	; 0xff
 8003848:	2100      	movs	r1, #0
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd fc1d 	bl	800108a <unpack_right_shift_u8>
 8003850:	4603      	mov	r3, r0
 8003852:	461a      	mov	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	77da      	strb	r2, [r3, #31]
        dst_p->v3s4 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	3303      	adds	r3, #3
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	22ff      	movs	r2, #255	; 0xff
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fc11 	bl	800108a <unpack_right_shift_u8>
 8003868:	4603      	mov	r3, r0
 800386a:	461a      	mov	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
        dst_p->v4s4 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	3304      	adds	r3, #4
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	22ff      	movs	r2, #255	; 0xff
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd fc04 	bl	800108a <unpack_right_shift_u8>
 8003882:	4603      	mov	r3, r0
 8003884:	461a      	mov	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
        dst_p->v5s4 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	3305      	adds	r3, #5
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	22ff      	movs	r2, #255	; 0xff
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd fbf7 	bl	800108a <unpack_right_shift_u8>
 800389c:	4603      	mov	r3, r0
 800389e:	461a      	mov	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
        dst_p->v6s4 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3306      	adds	r3, #6
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	22ff      	movs	r2, #255	; 0xff
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fd fbea 	bl	800108a <unpack_right_shift_u8>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
        break;
 80038c0:	f000 bc7a 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 7:
        dst_p->v7s4 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	3301      	adds	r3, #1
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	22ff      	movs	r2, #255	; 0xff
 80038cc:	2100      	movs	r1, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd fbdb 	bl	800108a <unpack_right_shift_u8>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	721a      	strb	r2, [r3, #8]
        dst_p->v8s4 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	3302      	adds	r3, #2
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	22ff      	movs	r2, #255	; 0xff
 80038e4:	2100      	movs	r1, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd fbcf 	bl	800108a <unpack_right_shift_u8>
 80038ec:	4603      	mov	r3, r0
 80038ee:	461a      	mov	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f883 2020 	strb.w	r2, [r3, #32]
        dst_p->v9s4 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3303      	adds	r3, #3
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	22ff      	movs	r2, #255	; 0xff
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f7fd fbc2 	bl	800108a <unpack_right_shift_u8>
 8003906:	4603      	mov	r3, r0
 8003908:	461a      	mov	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        dst_p->v10s4 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3304      	adds	r3, #4
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	22ff      	movs	r2, #255	; 0xff
 8003918:	2100      	movs	r1, #0
 800391a:	4618      	mov	r0, r3
 800391c:	f7fd fbb5 	bl	800108a <unpack_right_shift_u8>
 8003920:	4603      	mov	r3, r0
 8003922:	461a      	mov	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        break;
 800392a:	f000 bc45 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 8:
        dst_p->v1s5 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3301      	adds	r3, #1
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	22ff      	movs	r2, #255	; 0xff
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd fba6 	bl	800108a <unpack_right_shift_u8>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	725a      	strb	r2, [r3, #9]
        dst_p->v2s5 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	3302      	adds	r3, #2
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	22ff      	movs	r2, #255	; 0xff
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f7fd fb9a 	bl	800108a <unpack_right_shift_u8>
 8003956:	4603      	mov	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        dst_p->v3s5 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	3303      	adds	r3, #3
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	22ff      	movs	r2, #255	; 0xff
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f7fd fb8d 	bl	800108a <unpack_right_shift_u8>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        dst_p->v4s5 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	3304      	adds	r3, #4
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	22ff      	movs	r2, #255	; 0xff
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd fb80 	bl	800108a <unpack_right_shift_u8>
 800398a:	4603      	mov	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        dst_p->v5s5 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	3305      	adds	r3, #5
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	22ff      	movs	r2, #255	; 0xff
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fb73 	bl	800108a <unpack_right_shift_u8>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        dst_p->v6s5 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	3306      	adds	r3, #6
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	22ff      	movs	r2, #255	; 0xff
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fd fb66 	bl	800108a <unpack_right_shift_u8>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        break;
 80039c8:	e3f6      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 9:
        dst_p->v7s5 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	3301      	adds	r3, #1
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	22ff      	movs	r2, #255	; 0xff
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fd fb58 	bl	800108a <unpack_right_shift_u8>
 80039da:	4603      	mov	r3, r0
 80039dc:	461a      	mov	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	729a      	strb	r2, [r3, #10]
        dst_p->v8s5 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	3302      	adds	r3, #2
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	22ff      	movs	r2, #255	; 0xff
 80039ea:	2100      	movs	r1, #0
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fd fb4c 	bl	800108a <unpack_right_shift_u8>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        dst_p->v9s5 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	3303      	adds	r3, #3
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	22ff      	movs	r2, #255	; 0xff
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd fb3f 	bl	800108a <unpack_right_shift_u8>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        dst_p->v10s5 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	22ff      	movs	r2, #255	; 0xff
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fd fb32 	bl	800108a <unpack_right_shift_u8>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        dst_p->v11s5 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	3305      	adds	r3, #5
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	22ff      	movs	r2, #255	; 0xff
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd fb25 	bl	800108a <unpack_right_shift_u8>
 8003a40:	4603      	mov	r3, r0
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        break;
 8003a4a:	e3b5      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 10:
        dst_p->v1s6 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	22ff      	movs	r2, #255	; 0xff
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd fb17 	bl	800108a <unpack_right_shift_u8>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	72da      	strb	r2, [r3, #11]
        dst_p->v2s6 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	3302      	adds	r3, #2
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	22ff      	movs	r2, #255	; 0xff
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fd fb0b 	bl	800108a <unpack_right_shift_u8>
 8003a74:	4603      	mov	r3, r0
 8003a76:	461a      	mov	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        dst_p->v3s6 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	3303      	adds	r3, #3
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	22ff      	movs	r2, #255	; 0xff
 8003a86:	2100      	movs	r1, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fd fafe 	bl	800108a <unpack_right_shift_u8>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
        dst_p->v4s6 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	22ff      	movs	r2, #255	; 0xff
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fd faf1 	bl	800108a <unpack_right_shift_u8>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
        dst_p->v5s6 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	3305      	adds	r3, #5
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	22ff      	movs	r2, #255	; 0xff
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fd fae4 	bl	800108a <unpack_right_shift_u8>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        dst_p->v6s6 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	3306      	adds	r3, #6
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	22ff      	movs	r2, #255	; 0xff
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd fad7 	bl	800108a <unpack_right_shift_u8>
 8003adc:	4603      	mov	r3, r0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        break;
 8003ae6:	e367      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 11:
        dst_p->v7s6 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	3301      	adds	r3, #1
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	22ff      	movs	r2, #255	; 0xff
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd fac9 	bl	800108a <unpack_right_shift_u8>
 8003af8:	4603      	mov	r3, r0
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	731a      	strb	r2, [r3, #12]
        dst_p->v8s6 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	3302      	adds	r3, #2
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	22ff      	movs	r2, #255	; 0xff
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd fabd 	bl	800108a <unpack_right_shift_u8>
 8003b10:	4603      	mov	r3, r0
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        dst_p->v9s6 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	3303      	adds	r3, #3
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	22ff      	movs	r2, #255	; 0xff
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd fab0 	bl	800108a <unpack_right_shift_u8>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        dst_p->v10s6 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	3304      	adds	r3, #4
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	22ff      	movs	r2, #255	; 0xff
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd faa3 	bl	800108a <unpack_right_shift_u8>
 8003b44:	4603      	mov	r3, r0
 8003b46:	461a      	mov	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        break;
 8003b4e:	e333      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 12:
        dst_p->v1s7 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	3301      	adds	r3, #1
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	22ff      	movs	r2, #255	; 0xff
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fd fa95 	bl	800108a <unpack_right_shift_u8>
 8003b60:	4603      	mov	r3, r0
 8003b62:	461a      	mov	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	735a      	strb	r2, [r3, #13]
        dst_p->v2s7 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	22ff      	movs	r2, #255	; 0xff
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fd fa89 	bl	800108a <unpack_right_shift_u8>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        dst_p->v3s7 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	3303      	adds	r3, #3
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	22ff      	movs	r2, #255	; 0xff
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fd fa7c 	bl	800108a <unpack_right_shift_u8>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        dst_p->v4s7 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	22ff      	movs	r2, #255	; 0xff
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd fa6f 	bl	800108a <unpack_right_shift_u8>
 8003bac:	4603      	mov	r3, r0
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        dst_p->v5s7 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3305      	adds	r3, #5
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	22ff      	movs	r2, #255	; 0xff
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fd fa62 	bl	800108a <unpack_right_shift_u8>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        dst_p->v6s7 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	3306      	adds	r3, #6
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	22ff      	movs	r2, #255	; 0xff
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd fa55 	bl	800108a <unpack_right_shift_u8>
 8003be0:	4603      	mov	r3, r0
 8003be2:	461a      	mov	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
        break;
 8003bea:	e2e5      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 13:
        dst_p->v7s7 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	22ff      	movs	r2, #255	; 0xff
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fd fa47 	bl	800108a <unpack_right_shift_u8>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	739a      	strb	r2, [r3, #14]
        dst_p->v8s7 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	3302      	adds	r3, #2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	22ff      	movs	r2, #255	; 0xff
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd fa3b 	bl	800108a <unpack_right_shift_u8>
 8003c14:	4603      	mov	r3, r0
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        dst_p->v9s7 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3303      	adds	r3, #3
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	22ff      	movs	r2, #255	; 0xff
 8003c26:	2100      	movs	r1, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fd fa2e 	bl	800108a <unpack_right_shift_u8>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	461a      	mov	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        dst_p->v10s7 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	22ff      	movs	r2, #255	; 0xff
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fd fa21 	bl	800108a <unpack_right_shift_u8>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
        dst_p->v11s7 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	3305      	adds	r3, #5
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	22ff      	movs	r2, #255	; 0xff
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fd fa14 	bl	800108a <unpack_right_shift_u8>
 8003c62:	4603      	mov	r3, r0
 8003c64:	461a      	mov	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        break;
 8003c6c:	e2a4      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 14:
        dst_p->v1s8 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	3301      	adds	r3, #1
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	22ff      	movs	r2, #255	; 0xff
 8003c76:	2100      	movs	r1, #0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fd fa06 	bl	800108a <unpack_right_shift_u8>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	461a      	mov	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	73da      	strb	r2, [r3, #15]
        dst_p->v2s8 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	3302      	adds	r3, #2
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	22ff      	movs	r2, #255	; 0xff
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fd f9fa 	bl	800108a <unpack_right_shift_u8>
 8003c96:	4603      	mov	r3, r0
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        dst_p->v3s8 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	3303      	adds	r3, #3
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	22ff      	movs	r2, #255	; 0xff
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd f9ed 	bl	800108a <unpack_right_shift_u8>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        dst_p->v4s8 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	22ff      	movs	r2, #255	; 0xff
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fd f9e0 	bl	800108a <unpack_right_shift_u8>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        dst_p->v5s8 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	3305      	adds	r3, #5
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	22ff      	movs	r2, #255	; 0xff
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fd f9d3 	bl	800108a <unpack_right_shift_u8>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        dst_p->v6s8 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3306      	adds	r3, #6
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fd f9c6 	bl	800108a <unpack_right_shift_u8>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	461a      	mov	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        break;
 8003d08:	e256      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 15:
        dst_p->v7s8 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	22ff      	movs	r2, #255	; 0xff
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fd f9b8 	bl	800108a <unpack_right_shift_u8>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	741a      	strb	r2, [r3, #16]
        dst_p->v8s8 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	3302      	adds	r3, #2
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	22ff      	movs	r2, #255	; 0xff
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fd f9ac 	bl	800108a <unpack_right_shift_u8>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461a      	mov	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        dst_p->v9s8 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3303      	adds	r3, #3
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	22ff      	movs	r2, #255	; 0xff
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fd f99f 	bl	800108a <unpack_right_shift_u8>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        dst_p->v10s8 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	22ff      	movs	r2, #255	; 0xff
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fd f992 	bl	800108a <unpack_right_shift_u8>
 8003d66:	4603      	mov	r3, r0
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        break;
 8003d70:	e222      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 16:
        dst_p->v1s9 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	3301      	adds	r3, #1
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	22ff      	movs	r2, #255	; 0xff
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fd f984 	bl	800108a <unpack_right_shift_u8>
 8003d82:	4603      	mov	r3, r0
 8003d84:	461a      	mov	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	745a      	strb	r2, [r3, #17]
        dst_p->v2s9 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	3302      	adds	r3, #2
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	22ff      	movs	r2, #255	; 0xff
 8003d92:	2100      	movs	r1, #0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fd f978 	bl	800108a <unpack_right_shift_u8>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        dst_p->v3s9 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	3303      	adds	r3, #3
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	22ff      	movs	r2, #255	; 0xff
 8003dac:	2100      	movs	r1, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd f96b 	bl	800108a <unpack_right_shift_u8>
 8003db4:	4603      	mov	r3, r0
 8003db6:	461a      	mov	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        dst_p->v4s9 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	22ff      	movs	r2, #255	; 0xff
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fd f95e 	bl	800108a <unpack_right_shift_u8>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        dst_p->v5s9 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	3305      	adds	r3, #5
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	22ff      	movs	r2, #255	; 0xff
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd f951 	bl	800108a <unpack_right_shift_u8>
 8003de8:	4603      	mov	r3, r0
 8003dea:	461a      	mov	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        dst_p->v6s9 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	3306      	adds	r3, #6
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	22ff      	movs	r2, #255	; 0xff
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fd f944 	bl	800108a <unpack_right_shift_u8>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461a      	mov	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        break;
 8003e0c:	e1d4      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 17:
        dst_p->v7s9 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3301      	adds	r3, #1
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	22ff      	movs	r2, #255	; 0xff
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fd f936 	bl	800108a <unpack_right_shift_u8>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	461a      	mov	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	749a      	strb	r2, [r3, #18]
        dst_p->v8s9 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	3302      	adds	r3, #2
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	22ff      	movs	r2, #255	; 0xff
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fd f92a 	bl	800108a <unpack_right_shift_u8>
 8003e36:	4603      	mov	r3, r0
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        dst_p->v9s9 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	3303      	adds	r3, #3
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	22ff      	movs	r2, #255	; 0xff
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fd f91d 	bl	800108a <unpack_right_shift_u8>
 8003e50:	4603      	mov	r3, r0
 8003e52:	461a      	mov	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        dst_p->v10s9 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	22ff      	movs	r2, #255	; 0xff
 8003e62:	2100      	movs	r1, #0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd f910 	bl	800108a <unpack_right_shift_u8>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
        dst_p->v11s9 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	3305      	adds	r3, #5
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	22ff      	movs	r2, #255	; 0xff
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fd f903 	bl	800108a <unpack_right_shift_u8>
 8003e84:	4603      	mov	r3, r0
 8003e86:	461a      	mov	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
        break;
 8003e8e:	e193      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 18:
        dst_p->v1s10 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	3301      	adds	r3, #1
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	22ff      	movs	r2, #255	; 0xff
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fd f8f5 	bl	800108a <unpack_right_shift_u8>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	74da      	strb	r2, [r3, #19]
        dst_p->v2s10 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	3302      	adds	r3, #2
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	22ff      	movs	r2, #255	; 0xff
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fd f8e9 	bl	800108a <unpack_right_shift_u8>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        dst_p->v3s10 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	3303      	adds	r3, #3
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	22ff      	movs	r2, #255	; 0xff
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fd f8dc 	bl	800108a <unpack_right_shift_u8>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        dst_p->v4s10 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	22ff      	movs	r2, #255	; 0xff
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fd f8cf 	bl	800108a <unpack_right_shift_u8>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
        dst_p->v5s10 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	3305      	adds	r3, #5
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	22ff      	movs	r2, #255	; 0xff
 8003efe:	2100      	movs	r1, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fd f8c2 	bl	800108a <unpack_right_shift_u8>
 8003f06:	4603      	mov	r3, r0
 8003f08:	461a      	mov	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        dst_p->v6s10 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	3306      	adds	r3, #6
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	22ff      	movs	r2, #255	; 0xff
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd f8b5 	bl	800108a <unpack_right_shift_u8>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        break;
 8003f2a:	e145      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 19:
        dst_p->v7s10 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	22ff      	movs	r2, #255	; 0xff
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fd f8a7 	bl	800108a <unpack_right_shift_u8>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	751a      	strb	r2, [r3, #20]
        dst_p->v8s10 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	3302      	adds	r3, #2
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	22ff      	movs	r2, #255	; 0xff
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fd f89b 	bl	800108a <unpack_right_shift_u8>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        dst_p->v9s10 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	3303      	adds	r3, #3
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	22ff      	movs	r2, #255	; 0xff
 8003f66:	2100      	movs	r1, #0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fd f88e 	bl	800108a <unpack_right_shift_u8>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	461a      	mov	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        dst_p->v10s10 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	22ff      	movs	r2, #255	; 0xff
 8003f80:	2100      	movs	r1, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fd f881 	bl	800108a <unpack_right_shift_u8>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        break;
 8003f92:	e111      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 20:
        dst_p->v1s11 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	3301      	adds	r3, #1
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	22ff      	movs	r2, #255	; 0xff
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fd f873 	bl	800108a <unpack_right_shift_u8>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	755a      	strb	r2, [r3, #21]
        dst_p->v2s11 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	3302      	adds	r3, #2
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	22ff      	movs	r2, #255	; 0xff
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd f867 	bl	800108a <unpack_right_shift_u8>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        dst_p->v3s11 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	3303      	adds	r3, #3
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	22ff      	movs	r2, #255	; 0xff
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fd f85a 	bl	800108a <unpack_right_shift_u8>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        dst_p->v4s11 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	22ff      	movs	r2, #255	; 0xff
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd f84d 	bl	800108a <unpack_right_shift_u8>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        dst_p->v5s11 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	3305      	adds	r3, #5
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	22ff      	movs	r2, #255	; 0xff
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f7fd f840 	bl	800108a <unpack_right_shift_u8>
 800400a:	4603      	mov	r3, r0
 800400c:	461a      	mov	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        dst_p->v6s11 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	3306      	adds	r3, #6
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	22ff      	movs	r2, #255	; 0xff
 800401c:	2100      	movs	r1, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f7fd f833 	bl	800108a <unpack_right_shift_u8>
 8004024:	4603      	mov	r3, r0
 8004026:	461a      	mov	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        break;
 800402e:	e0c3      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 21:
        dst_p->v7s11 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	3301      	adds	r3, #1
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	22ff      	movs	r2, #255	; 0xff
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f7fd f825 	bl	800108a <unpack_right_shift_u8>
 8004040:	4603      	mov	r3, r0
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	759a      	strb	r2, [r3, #22]
        dst_p->v8s11 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	3302      	adds	r3, #2
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	22ff      	movs	r2, #255	; 0xff
 8004050:	2100      	movs	r1, #0
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd f819 	bl	800108a <unpack_right_shift_u8>
 8004058:	4603      	mov	r3, r0
 800405a:	461a      	mov	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        dst_p->v9s11 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3303      	adds	r3, #3
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	22ff      	movs	r2, #255	; 0xff
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f7fd f80c 	bl	800108a <unpack_right_shift_u8>
 8004072:	4603      	mov	r3, r0
 8004074:	461a      	mov	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        dst_p->v10s11 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	3304      	adds	r3, #4
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	22ff      	movs	r2, #255	; 0xff
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc ffff 	bl	800108a <unpack_right_shift_u8>
 800408c:	4603      	mov	r3, r0
 800408e:	461a      	mov	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        dst_p->v11s11 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	3305      	adds	r3, #5
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	22ff      	movs	r2, #255	; 0xff
 800409e:	2100      	movs	r1, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fc fff2 	bl	800108a <unpack_right_shift_u8>
 80040a6:	4603      	mov	r3, r0
 80040a8:	461a      	mov	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        break;
 80040b0:	e082      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 22:
        dst_p->v1s12 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3301      	adds	r3, #1
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	22ff      	movs	r2, #255	; 0xff
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc ffe4 	bl	800108a <unpack_right_shift_u8>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461a      	mov	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	75da      	strb	r2, [r3, #23]
        dst_p->v2s12 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3302      	adds	r3, #2
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	22ff      	movs	r2, #255	; 0xff
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fc ffd8 	bl	800108a <unpack_right_shift_u8>
 80040da:	4603      	mov	r3, r0
 80040dc:	461a      	mov	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        dst_p->v3s12 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	3303      	adds	r3, #3
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	22ff      	movs	r2, #255	; 0xff
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fc ffcb 	bl	800108a <unpack_right_shift_u8>
 80040f4:	4603      	mov	r3, r0
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        dst_p->v4s12 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	3304      	adds	r3, #4
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	22ff      	movs	r2, #255	; 0xff
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc ffbe 	bl	800108a <unpack_right_shift_u8>
 800410e:	4603      	mov	r3, r0
 8004110:	461a      	mov	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
        dst_p->v5s12 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	3305      	adds	r3, #5
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	22ff      	movs	r2, #255	; 0xff
 8004120:	2100      	movs	r1, #0
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc ffb1 	bl	800108a <unpack_right_shift_u8>
 8004128:	4603      	mov	r3, r0
 800412a:	461a      	mov	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
        dst_p->v6s12 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	3306      	adds	r3, #6
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	22ff      	movs	r2, #255	; 0xff
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f7fc ffa4 	bl	800108a <unpack_right_shift_u8>
 8004142:	4603      	mov	r3, r0
 8004144:	461a      	mov	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        break;
 800414c:	e034      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 23:
        dst_p->v7s12 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	3301      	adds	r3, #1
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	22ff      	movs	r2, #255	; 0xff
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f7fc ff96 	bl	800108a <unpack_right_shift_u8>
 800415e:	4603      	mov	r3, r0
 8004160:	461a      	mov	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	761a      	strb	r2, [r3, #24]
        dst_p->v8s12 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	3302      	adds	r3, #2
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	22ff      	movs	r2, #255	; 0xff
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f7fc ff8a 	bl	800108a <unpack_right_shift_u8>
 8004176:	4603      	mov	r3, r0
 8004178:	461a      	mov	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        dst_p->v9s12 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	3303      	adds	r3, #3
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	22ff      	movs	r2, #255	; 0xff
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f7fc ff7d 	bl	800108a <unpack_right_shift_u8>
 8004190:	4603      	mov	r3, r0
 8004192:	461a      	mov	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        dst_p->v10s12 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	3304      	adds	r3, #4
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	22ff      	movs	r2, #255	; 0xff
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fc ff70 	bl	800108a <unpack_right_shift_u8>
 80041aa:	4603      	mov	r3, r0
 80041ac:	461a      	mov	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        break;
 80041b4:	e000      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    default:
        break;
 80041b6:	bf00      	nop
    }

    return (0);
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop

080041c4 <can1_ams_cell_voltages_voltage_multiplexor_encode>:

uint8_t can1_ams_cell_voltages_voltage_multiplexor_encode(double value)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80041ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041d2:	f7fc fcdb 	bl	8000b8c <__aeabi_d2uiz>
 80041d6:	4603      	mov	r3, r0
 80041d8:	b2db      	uxtb	r3, r3
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	0000      	movs	r0, r0
 80041e4:	0000      	movs	r0, r0
	...

080041e8 <can1_ams_cell_voltages_v1s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s1_encode(double value)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	4b10      	ldr	r3, [pc, #64]	; (8004238 <can1_ams_cell_voltages_v1s1_encode+0x50>)
 80041f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041fc:	f7fc f836 	bl	800026c <__aeabi_dsub>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4610      	mov	r0, r2
 8004206:	4619      	mov	r1, r3
 8004208:	a309      	add	r3, pc, #36	; (adr r3, 8004230 <can1_ams_cell_voltages_v1s1_encode+0x48>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f7fc fb0f 	bl	8000830 <__aeabi_ddiv>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4610      	mov	r0, r2
 8004218:	4619      	mov	r1, r3
 800421a:	f7fc fcb7 	bl	8000b8c <__aeabi_d2uiz>
 800421e:	4603      	mov	r3, r0
 8004220:	b2db      	uxtb	r3, r3
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	f3af 8000 	nop.w
 8004230:	fcce1c58 	.word	0xfcce1c58
 8004234:	3f800e6a 	.word	0x3f800e6a
 8004238:	40040000 	.word	0x40040000
 800423c:	00000000 	.word	0x00000000

08004240 <can1_ams_cell_voltages_v1s1_decode>:

double can1_ams_cell_voltages_v1s1_decode(uint8_t value)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	4618      	mov	r0, r3
 800424e:	f7fc f94b 	bl	80004e8 <__aeabi_ui2d>
 8004252:	a30e      	add	r3, pc, #56	; (adr r3, 800428c <can1_ams_cell_voltages_v1s1_decode+0x4c>)
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f7fc f9c0 	bl	80005dc <__aeabi_dmul>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	4b07      	ldr	r3, [pc, #28]	; (8004288 <can1_ams_cell_voltages_v1s1_decode+0x48>)
 800426a:	f7fc f801 	bl	8000270 <__adddf3>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	ec43 2b17 	vmov	d7, r2, r3
}
 8004276:	eeb0 0a47 	vmov.f32	s0, s14
 800427a:	eef0 0a67 	vmov.f32	s1, s15
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	f3af 8000 	nop.w
 8004288:	40040000 	.word	0x40040000
 800428c:	fcce1c58 	.word	0xfcce1c58
 8004290:	3f800e6a 	.word	0x3f800e6a
 8004294:	00000000 	.word	0x00000000

08004298 <can1_ams_cell_voltages_v7s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s1_encode(double value)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <can1_ams_cell_voltages_v7s1_encode+0x50>)
 80042a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042ac:	f7fb ffde 	bl	800026c <__aeabi_dsub>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	a309      	add	r3, pc, #36	; (adr r3, 80042e0 <can1_ams_cell_voltages_v7s1_encode+0x48>)
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f7fc fab7 	bl	8000830 <__aeabi_ddiv>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4610      	mov	r0, r2
 80042c8:	4619      	mov	r1, r3
 80042ca:	f7fc fc5f 	bl	8000b8c <__aeabi_d2uiz>
 80042ce:	4603      	mov	r3, r0
 80042d0:	b2db      	uxtb	r3, r3
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	f3af 8000 	nop.w
 80042e0:	fcce1c58 	.word	0xfcce1c58
 80042e4:	3f800e6a 	.word	0x3f800e6a
 80042e8:	40040000 	.word	0x40040000
 80042ec:	00000000 	.word	0x00000000

080042f0 <can1_ams_cell_voltages_v7s1_decode>:

double can1_ams_cell_voltages_v7s1_decode(uint8_t value)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fc f8f3 	bl	80004e8 <__aeabi_ui2d>
 8004302:	a30e      	add	r3, pc, #56	; (adr r3, 800433c <can1_ams_cell_voltages_v7s1_decode+0x4c>)
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f7fc f968 	bl	80005dc <__aeabi_dmul>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4610      	mov	r0, r2
 8004312:	4619      	mov	r1, r3
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	4b07      	ldr	r3, [pc, #28]	; (8004338 <can1_ams_cell_voltages_v7s1_decode+0x48>)
 800431a:	f7fb ffa9 	bl	8000270 <__adddf3>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	ec43 2b17 	vmov	d7, r2, r3
}
 8004326:	eeb0 0a47 	vmov.f32	s0, s14
 800432a:	eef0 0a67 	vmov.f32	s1, s15
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	f3af 8000 	nop.w
 8004338:	40040000 	.word	0x40040000
 800433c:	fcce1c58 	.word	0xfcce1c58
 8004340:	3f800e6a 	.word	0x3f800e6a
 8004344:	00000000 	.word	0x00000000

08004348 <can1_ams_cell_voltages_v1s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s2_encode(double value)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <can1_ams_cell_voltages_v1s2_encode+0x50>)
 8004358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800435c:	f7fb ff86 	bl	800026c <__aeabi_dsub>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	a309      	add	r3, pc, #36	; (adr r3, 8004390 <can1_ams_cell_voltages_v1s2_encode+0x48>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f7fc fa5f 	bl	8000830 <__aeabi_ddiv>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	f7fc fc07 	bl	8000b8c <__aeabi_d2uiz>
 800437e:	4603      	mov	r3, r0
 8004380:	b2db      	uxtb	r3, r3
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	f3af 8000 	nop.w
 8004390:	fcce1c58 	.word	0xfcce1c58
 8004394:	3f800e6a 	.word	0x3f800e6a
 8004398:	40040000 	.word	0x40040000
 800439c:	00000000 	.word	0x00000000

080043a0 <can1_ams_cell_voltages_v1s2_decode>:

double can1_ams_cell_voltages_v1s2_decode(uint8_t value)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fc f89b 	bl	80004e8 <__aeabi_ui2d>
 80043b2:	a30e      	add	r3, pc, #56	; (adr r3, 80043ec <can1_ams_cell_voltages_v1s2_decode+0x4c>)
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f7fc f910 	bl	80005dc <__aeabi_dmul>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4610      	mov	r0, r2
 80043c2:	4619      	mov	r1, r3
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <can1_ams_cell_voltages_v1s2_decode+0x48>)
 80043ca:	f7fb ff51 	bl	8000270 <__adddf3>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80043d6:	eeb0 0a47 	vmov.f32	s0, s14
 80043da:	eef0 0a67 	vmov.f32	s1, s15
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	f3af 8000 	nop.w
 80043e8:	40040000 	.word	0x40040000
 80043ec:	fcce1c58 	.word	0xfcce1c58
 80043f0:	3f800e6a 	.word	0x3f800e6a
 80043f4:	00000000 	.word	0x00000000

080043f8 <can1_ams_cell_voltages_v7s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s2_encode(double value)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <can1_ams_cell_voltages_v7s2_encode+0x50>)
 8004408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800440c:	f7fb ff2e 	bl	800026c <__aeabi_dsub>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4610      	mov	r0, r2
 8004416:	4619      	mov	r1, r3
 8004418:	a309      	add	r3, pc, #36	; (adr r3, 8004440 <can1_ams_cell_voltages_v7s2_encode+0x48>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	f7fc fa07 	bl	8000830 <__aeabi_ddiv>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4610      	mov	r0, r2
 8004428:	4619      	mov	r1, r3
 800442a:	f7fc fbaf 	bl	8000b8c <__aeabi_d2uiz>
 800442e:	4603      	mov	r3, r0
 8004430:	b2db      	uxtb	r3, r3
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	f3af 8000 	nop.w
 8004440:	fcce1c58 	.word	0xfcce1c58
 8004444:	3f800e6a 	.word	0x3f800e6a
 8004448:	40040000 	.word	0x40040000
 800444c:	00000000 	.word	0x00000000

08004450 <can1_ams_cell_voltages_v7s2_decode>:

double can1_ams_cell_voltages_v7s2_decode(uint8_t value)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	4618      	mov	r0, r3
 800445e:	f7fc f843 	bl	80004e8 <__aeabi_ui2d>
 8004462:	a30e      	add	r3, pc, #56	; (adr r3, 800449c <can1_ams_cell_voltages_v7s2_decode+0x4c>)
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f7fc f8b8 	bl	80005dc <__aeabi_dmul>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	4b07      	ldr	r3, [pc, #28]	; (8004498 <can1_ams_cell_voltages_v7s2_decode+0x48>)
 800447a:	f7fb fef9 	bl	8000270 <__adddf3>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	ec43 2b17 	vmov	d7, r2, r3
}
 8004486:	eeb0 0a47 	vmov.f32	s0, s14
 800448a:	eef0 0a67 	vmov.f32	s1, s15
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	f3af 8000 	nop.w
 8004498:	40040000 	.word	0x40040000
 800449c:	fcce1c58 	.word	0xfcce1c58
 80044a0:	3f800e6a 	.word	0x3f800e6a
 80044a4:	00000000 	.word	0x00000000

080044a8 <can1_ams_cell_voltages_v1s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s3_encode(double value)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <can1_ams_cell_voltages_v1s3_encode+0x50>)
 80044b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044bc:	f7fb fed6 	bl	800026c <__aeabi_dsub>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	a309      	add	r3, pc, #36	; (adr r3, 80044f0 <can1_ams_cell_voltages_v1s3_encode+0x48>)
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f7fc f9af 	bl	8000830 <__aeabi_ddiv>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4610      	mov	r0, r2
 80044d8:	4619      	mov	r1, r3
 80044da:	f7fc fb57 	bl	8000b8c <__aeabi_d2uiz>
 80044de:	4603      	mov	r3, r0
 80044e0:	b2db      	uxtb	r3, r3
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	f3af 8000 	nop.w
 80044f0:	fcce1c58 	.word	0xfcce1c58
 80044f4:	3f800e6a 	.word	0x3f800e6a
 80044f8:	40040000 	.word	0x40040000
 80044fc:	00000000 	.word	0x00000000

08004500 <can1_ams_cell_voltages_v1s3_decode>:

double can1_ams_cell_voltages_v1s3_decode(uint8_t value)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	4618      	mov	r0, r3
 800450e:	f7fb ffeb 	bl	80004e8 <__aeabi_ui2d>
 8004512:	a30e      	add	r3, pc, #56	; (adr r3, 800454c <can1_ams_cell_voltages_v1s3_decode+0x4c>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f7fc f860 	bl	80005dc <__aeabi_dmul>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	4b07      	ldr	r3, [pc, #28]	; (8004548 <can1_ams_cell_voltages_v1s3_decode+0x48>)
 800452a:	f7fb fea1 	bl	8000270 <__adddf3>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	ec43 2b17 	vmov	d7, r2, r3
}
 8004536:	eeb0 0a47 	vmov.f32	s0, s14
 800453a:	eef0 0a67 	vmov.f32	s1, s15
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	f3af 8000 	nop.w
 8004548:	40040000 	.word	0x40040000
 800454c:	fcce1c58 	.word	0xfcce1c58
 8004550:	3f800e6a 	.word	0x3f800e6a
 8004554:	00000000 	.word	0x00000000

08004558 <can1_ams_cell_voltages_v7s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s3_encode(double value)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <can1_ams_cell_voltages_v7s3_encode+0x50>)
 8004568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800456c:	f7fb fe7e 	bl	800026c <__aeabi_dsub>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	a309      	add	r3, pc, #36	; (adr r3, 80045a0 <can1_ams_cell_voltages_v7s3_encode+0x48>)
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f7fc f957 	bl	8000830 <__aeabi_ddiv>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4610      	mov	r0, r2
 8004588:	4619      	mov	r1, r3
 800458a:	f7fc faff 	bl	8000b8c <__aeabi_d2uiz>
 800458e:	4603      	mov	r3, r0
 8004590:	b2db      	uxtb	r3, r3
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	f3af 8000 	nop.w
 80045a0:	fcce1c58 	.word	0xfcce1c58
 80045a4:	3f800e6a 	.word	0x3f800e6a
 80045a8:	40040000 	.word	0x40040000
 80045ac:	00000000 	.word	0x00000000

080045b0 <can1_ams_cell_voltages_v7s3_decode>:

double can1_ams_cell_voltages_v7s3_decode(uint8_t value)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fb ff93 	bl	80004e8 <__aeabi_ui2d>
 80045c2:	a30e      	add	r3, pc, #56	; (adr r3, 80045fc <can1_ams_cell_voltages_v7s3_decode+0x4c>)
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f7fc f808 	bl	80005dc <__aeabi_dmul>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4610      	mov	r0, r2
 80045d2:	4619      	mov	r1, r3
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <can1_ams_cell_voltages_v7s3_decode+0x48>)
 80045da:	f7fb fe49 	bl	8000270 <__adddf3>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80045e6:	eeb0 0a47 	vmov.f32	s0, s14
 80045ea:	eef0 0a67 	vmov.f32	s1, s15
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	f3af 8000 	nop.w
 80045f8:	40040000 	.word	0x40040000
 80045fc:	fcce1c58 	.word	0xfcce1c58
 8004600:	3f800e6a 	.word	0x3f800e6a
 8004604:	00000000 	.word	0x00000000

08004608 <can1_ams_cell_voltages_v1s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s4_encode(double value)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	4b10      	ldr	r3, [pc, #64]	; (8004658 <can1_ams_cell_voltages_v1s4_encode+0x50>)
 8004618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800461c:	f7fb fe26 	bl	800026c <__aeabi_dsub>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4610      	mov	r0, r2
 8004626:	4619      	mov	r1, r3
 8004628:	a309      	add	r3, pc, #36	; (adr r3, 8004650 <can1_ams_cell_voltages_v1s4_encode+0x48>)
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	f7fc f8ff 	bl	8000830 <__aeabi_ddiv>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	f7fc faa7 	bl	8000b8c <__aeabi_d2uiz>
 800463e:	4603      	mov	r3, r0
 8004640:	b2db      	uxtb	r3, r3
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	f3af 8000 	nop.w
 8004650:	fcce1c58 	.word	0xfcce1c58
 8004654:	3f800e6a 	.word	0x3f800e6a
 8004658:	40040000 	.word	0x40040000
 800465c:	00000000 	.word	0x00000000

08004660 <can1_ams_cell_voltages_v1s4_decode>:

double can1_ams_cell_voltages_v1s4_decode(uint8_t value)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	4618      	mov	r0, r3
 800466e:	f7fb ff3b 	bl	80004e8 <__aeabi_ui2d>
 8004672:	a30e      	add	r3, pc, #56	; (adr r3, 80046ac <can1_ams_cell_voltages_v1s4_decode+0x4c>)
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f7fb ffb0 	bl	80005dc <__aeabi_dmul>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4610      	mov	r0, r2
 8004682:	4619      	mov	r1, r3
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <can1_ams_cell_voltages_v1s4_decode+0x48>)
 800468a:	f7fb fdf1 	bl	8000270 <__adddf3>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	ec43 2b17 	vmov	d7, r2, r3
}
 8004696:	eeb0 0a47 	vmov.f32	s0, s14
 800469a:	eef0 0a67 	vmov.f32	s1, s15
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	f3af 8000 	nop.w
 80046a8:	40040000 	.word	0x40040000
 80046ac:	fcce1c58 	.word	0xfcce1c58
 80046b0:	3f800e6a 	.word	0x3f800e6a
 80046b4:	00000000 	.word	0x00000000

080046b8 <can1_ams_cell_voltages_v7s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s4_encode(double value)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	4b10      	ldr	r3, [pc, #64]	; (8004708 <can1_ams_cell_voltages_v7s4_encode+0x50>)
 80046c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046cc:	f7fb fdce 	bl	800026c <__aeabi_dsub>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	a309      	add	r3, pc, #36	; (adr r3, 8004700 <can1_ams_cell_voltages_v7s4_encode+0x48>)
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	f7fc f8a7 	bl	8000830 <__aeabi_ddiv>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	f7fc fa4f 	bl	8000b8c <__aeabi_d2uiz>
 80046ee:	4603      	mov	r3, r0
 80046f0:	b2db      	uxtb	r3, r3
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	f3af 8000 	nop.w
 8004700:	fcce1c58 	.word	0xfcce1c58
 8004704:	3f800e6a 	.word	0x3f800e6a
 8004708:	40040000 	.word	0x40040000
 800470c:	00000000 	.word	0x00000000

08004710 <can1_ams_cell_voltages_v7s4_decode>:

double can1_ams_cell_voltages_v7s4_decode(uint8_t value)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	4618      	mov	r0, r3
 800471e:	f7fb fee3 	bl	80004e8 <__aeabi_ui2d>
 8004722:	a30e      	add	r3, pc, #56	; (adr r3, 800475c <can1_ams_cell_voltages_v7s4_decode+0x4c>)
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f7fb ff58 	bl	80005dc <__aeabi_dmul>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4610      	mov	r0, r2
 8004732:	4619      	mov	r1, r3
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	4b07      	ldr	r3, [pc, #28]	; (8004758 <can1_ams_cell_voltages_v7s4_decode+0x48>)
 800473a:	f7fb fd99 	bl	8000270 <__adddf3>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	ec43 2b17 	vmov	d7, r2, r3
}
 8004746:	eeb0 0a47 	vmov.f32	s0, s14
 800474a:	eef0 0a67 	vmov.f32	s1, s15
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	f3af 8000 	nop.w
 8004758:	40040000 	.word	0x40040000
 800475c:	fcce1c58 	.word	0xfcce1c58
 8004760:	3f800e6a 	.word	0x3f800e6a
 8004764:	00000000 	.word	0x00000000

08004768 <can1_ams_cell_voltages_v1s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s5_encode(double value)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <can1_ams_cell_voltages_v1s5_encode+0x50>)
 8004778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800477c:	f7fb fd76 	bl	800026c <__aeabi_dsub>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4610      	mov	r0, r2
 8004786:	4619      	mov	r1, r3
 8004788:	a309      	add	r3, pc, #36	; (adr r3, 80047b0 <can1_ams_cell_voltages_v1s5_encode+0x48>)
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f7fc f84f 	bl	8000830 <__aeabi_ddiv>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	f7fc f9f7 	bl	8000b8c <__aeabi_d2uiz>
 800479e:	4603      	mov	r3, r0
 80047a0:	b2db      	uxtb	r3, r3
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	f3af 8000 	nop.w
 80047b0:	fcce1c58 	.word	0xfcce1c58
 80047b4:	3f800e6a 	.word	0x3f800e6a
 80047b8:	40040000 	.word	0x40040000
 80047bc:	00000000 	.word	0x00000000

080047c0 <can1_ams_cell_voltages_v1s5_decode>:

double can1_ams_cell_voltages_v1s5_decode(uint8_t value)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fb fe8b 	bl	80004e8 <__aeabi_ui2d>
 80047d2:	a30e      	add	r3, pc, #56	; (adr r3, 800480c <can1_ams_cell_voltages_v1s5_decode+0x4c>)
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f7fb ff00 	bl	80005dc <__aeabi_dmul>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4610      	mov	r0, r2
 80047e2:	4619      	mov	r1, r3
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	4b07      	ldr	r3, [pc, #28]	; (8004808 <can1_ams_cell_voltages_v1s5_decode+0x48>)
 80047ea:	f7fb fd41 	bl	8000270 <__adddf3>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80047f6:	eeb0 0a47 	vmov.f32	s0, s14
 80047fa:	eef0 0a67 	vmov.f32	s1, s15
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	f3af 8000 	nop.w
 8004808:	40040000 	.word	0x40040000
 800480c:	fcce1c58 	.word	0xfcce1c58
 8004810:	3f800e6a 	.word	0x3f800e6a
 8004814:	00000000 	.word	0x00000000

08004818 <can1_ams_cell_voltages_v7s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s5_encode(double value)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	4b10      	ldr	r3, [pc, #64]	; (8004868 <can1_ams_cell_voltages_v7s5_encode+0x50>)
 8004828:	e9d7 0100 	ldrd	r0, r1, [r7]
 800482c:	f7fb fd1e 	bl	800026c <__aeabi_dsub>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	a309      	add	r3, pc, #36	; (adr r3, 8004860 <can1_ams_cell_voltages_v7s5_encode+0x48>)
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	f7fb fff7 	bl	8000830 <__aeabi_ddiv>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	f7fc f99f 	bl	8000b8c <__aeabi_d2uiz>
 800484e:	4603      	mov	r3, r0
 8004850:	b2db      	uxtb	r3, r3
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	f3af 8000 	nop.w
 8004860:	fcce1c58 	.word	0xfcce1c58
 8004864:	3f800e6a 	.word	0x3f800e6a
 8004868:	40040000 	.word	0x40040000
 800486c:	00000000 	.word	0x00000000

08004870 <can1_ams_cell_voltages_v7s5_decode>:

double can1_ams_cell_voltages_v7s5_decode(uint8_t value)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fb fe33 	bl	80004e8 <__aeabi_ui2d>
 8004882:	a30e      	add	r3, pc, #56	; (adr r3, 80048bc <can1_ams_cell_voltages_v7s5_decode+0x4c>)
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f7fb fea8 	bl	80005dc <__aeabi_dmul>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <can1_ams_cell_voltages_v7s5_decode+0x48>)
 800489a:	f7fb fce9 	bl	8000270 <__adddf3>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80048a6:	eeb0 0a47 	vmov.f32	s0, s14
 80048aa:	eef0 0a67 	vmov.f32	s1, s15
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	f3af 8000 	nop.w
 80048b8:	40040000 	.word	0x40040000
 80048bc:	fcce1c58 	.word	0xfcce1c58
 80048c0:	3f800e6a 	.word	0x3f800e6a
 80048c4:	00000000 	.word	0x00000000

080048c8 <can1_ams_cell_voltages_v1s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s6_encode(double value)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <can1_ams_cell_voltages_v1s6_encode+0x50>)
 80048d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048dc:	f7fb fcc6 	bl	800026c <__aeabi_dsub>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4610      	mov	r0, r2
 80048e6:	4619      	mov	r1, r3
 80048e8:	a309      	add	r3, pc, #36	; (adr r3, 8004910 <can1_ams_cell_voltages_v1s6_encode+0x48>)
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f7fb ff9f 	bl	8000830 <__aeabi_ddiv>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4610      	mov	r0, r2
 80048f8:	4619      	mov	r1, r3
 80048fa:	f7fc f947 	bl	8000b8c <__aeabi_d2uiz>
 80048fe:	4603      	mov	r3, r0
 8004900:	b2db      	uxtb	r3, r3
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	f3af 8000 	nop.w
 8004910:	fcce1c58 	.word	0xfcce1c58
 8004914:	3f800e6a 	.word	0x3f800e6a
 8004918:	40040000 	.word	0x40040000
 800491c:	00000000 	.word	0x00000000

08004920 <can1_ams_cell_voltages_v1s6_decode>:

double can1_ams_cell_voltages_v1s6_decode(uint8_t value)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	4618      	mov	r0, r3
 800492e:	f7fb fddb 	bl	80004e8 <__aeabi_ui2d>
 8004932:	a30e      	add	r3, pc, #56	; (adr r3, 800496c <can1_ams_cell_voltages_v1s6_decode+0x4c>)
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f7fb fe50 	bl	80005dc <__aeabi_dmul>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	4b07      	ldr	r3, [pc, #28]	; (8004968 <can1_ams_cell_voltages_v1s6_decode+0x48>)
 800494a:	f7fb fc91 	bl	8000270 <__adddf3>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	ec43 2b17 	vmov	d7, r2, r3
}
 8004956:	eeb0 0a47 	vmov.f32	s0, s14
 800495a:	eef0 0a67 	vmov.f32	s1, s15
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	f3af 8000 	nop.w
 8004968:	40040000 	.word	0x40040000
 800496c:	fcce1c58 	.word	0xfcce1c58
 8004970:	3f800e6a 	.word	0x3f800e6a
 8004974:	00000000 	.word	0x00000000

08004978 <can1_ams_cell_voltages_v7s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s6_encode(double value)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <can1_ams_cell_voltages_v7s6_encode+0x50>)
 8004988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800498c:	f7fb fc6e 	bl	800026c <__aeabi_dsub>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4610      	mov	r0, r2
 8004996:	4619      	mov	r1, r3
 8004998:	a309      	add	r3, pc, #36	; (adr r3, 80049c0 <can1_ams_cell_voltages_v7s6_encode+0x48>)
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	f7fb ff47 	bl	8000830 <__aeabi_ddiv>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	f7fc f8ef 	bl	8000b8c <__aeabi_d2uiz>
 80049ae:	4603      	mov	r3, r0
 80049b0:	b2db      	uxtb	r3, r3
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	f3af 8000 	nop.w
 80049c0:	fcce1c58 	.word	0xfcce1c58
 80049c4:	3f800e6a 	.word	0x3f800e6a
 80049c8:	40040000 	.word	0x40040000
 80049cc:	00000000 	.word	0x00000000

080049d0 <can1_ams_cell_voltages_v7s6_decode>:

double can1_ams_cell_voltages_v7s6_decode(uint8_t value)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fb fd83 	bl	80004e8 <__aeabi_ui2d>
 80049e2:	a30e      	add	r3, pc, #56	; (adr r3, 8004a1c <can1_ams_cell_voltages_v7s6_decode+0x4c>)
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	f7fb fdf8 	bl	80005dc <__aeabi_dmul>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4610      	mov	r0, r2
 80049f2:	4619      	mov	r1, r3
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	4b07      	ldr	r3, [pc, #28]	; (8004a18 <can1_ams_cell_voltages_v7s6_decode+0x48>)
 80049fa:	f7fb fc39 	bl	8000270 <__adddf3>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	ec43 2b17 	vmov	d7, r2, r3
}
 8004a06:	eeb0 0a47 	vmov.f32	s0, s14
 8004a0a:	eef0 0a67 	vmov.f32	s1, s15
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	f3af 8000 	nop.w
 8004a18:	40040000 	.word	0x40040000
 8004a1c:	fcce1c58 	.word	0xfcce1c58
 8004a20:	3f800e6a 	.word	0x3f800e6a
 8004a24:	00000000 	.word	0x00000000

08004a28 <can1_ams_cell_voltages_v1s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s7_encode(double value)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <can1_ams_cell_voltages_v1s7_encode+0x50>)
 8004a38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a3c:	f7fb fc16 	bl	800026c <__aeabi_dsub>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	a309      	add	r3, pc, #36	; (adr r3, 8004a70 <can1_ams_cell_voltages_v1s7_encode+0x48>)
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	f7fb feef 	bl	8000830 <__aeabi_ddiv>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f7fc f897 	bl	8000b8c <__aeabi_d2uiz>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	b2db      	uxtb	r3, r3
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	f3af 8000 	nop.w
 8004a70:	fcce1c58 	.word	0xfcce1c58
 8004a74:	3f800e6a 	.word	0x3f800e6a
 8004a78:	40040000 	.word	0x40040000
 8004a7c:	00000000 	.word	0x00000000

08004a80 <can1_ams_cell_voltages_v1s7_decode>:

double can1_ams_cell_voltages_v1s7_decode(uint8_t value)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fb fd2b 	bl	80004e8 <__aeabi_ui2d>
 8004a92:	a30e      	add	r3, pc, #56	; (adr r3, 8004acc <can1_ams_cell_voltages_v1s7_decode+0x4c>)
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f7fb fda0 	bl	80005dc <__aeabi_dmul>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <can1_ams_cell_voltages_v1s7_decode+0x48>)
 8004aaa:	f7fb fbe1 	bl	8000270 <__adddf3>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	ec43 2b17 	vmov	d7, r2, r3
}
 8004ab6:	eeb0 0a47 	vmov.f32	s0, s14
 8004aba:	eef0 0a67 	vmov.f32	s1, s15
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	f3af 8000 	nop.w
 8004ac8:	40040000 	.word	0x40040000
 8004acc:	fcce1c58 	.word	0xfcce1c58
 8004ad0:	3f800e6a 	.word	0x3f800e6a
 8004ad4:	00000000 	.word	0x00000000

08004ad8 <can1_ams_cell_voltages_v7s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s7_encode(double value)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <can1_ams_cell_voltages_v7s7_encode+0x50>)
 8004ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aec:	f7fb fbbe 	bl	800026c <__aeabi_dsub>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4610      	mov	r0, r2
 8004af6:	4619      	mov	r1, r3
 8004af8:	a309      	add	r3, pc, #36	; (adr r3, 8004b20 <can1_ams_cell_voltages_v7s7_encode+0x48>)
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	f7fb fe97 	bl	8000830 <__aeabi_ddiv>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	f7fc f83f 	bl	8000b8c <__aeabi_d2uiz>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	b2db      	uxtb	r3, r3
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	f3af 8000 	nop.w
 8004b20:	fcce1c58 	.word	0xfcce1c58
 8004b24:	3f800e6a 	.word	0x3f800e6a
 8004b28:	40040000 	.word	0x40040000
 8004b2c:	00000000 	.word	0x00000000

08004b30 <can1_ams_cell_voltages_v7s7_decode>:

double can1_ams_cell_voltages_v7s7_decode(uint8_t value)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fb fcd3 	bl	80004e8 <__aeabi_ui2d>
 8004b42:	a30e      	add	r3, pc, #56	; (adr r3, 8004b7c <can1_ams_cell_voltages_v7s7_decode+0x4c>)
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	f7fb fd48 	bl	80005dc <__aeabi_dmul>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4610      	mov	r0, r2
 8004b52:	4619      	mov	r1, r3
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <can1_ams_cell_voltages_v7s7_decode+0x48>)
 8004b5a:	f7fb fb89 	bl	8000270 <__adddf3>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	ec43 2b17 	vmov	d7, r2, r3
}
 8004b66:	eeb0 0a47 	vmov.f32	s0, s14
 8004b6a:	eef0 0a67 	vmov.f32	s1, s15
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	f3af 8000 	nop.w
 8004b78:	40040000 	.word	0x40040000
 8004b7c:	fcce1c58 	.word	0xfcce1c58
 8004b80:	3f800e6a 	.word	0x3f800e6a
 8004b84:	00000000 	.word	0x00000000

08004b88 <can1_ams_cell_voltages_v1s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s8_encode(double value)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <can1_ams_cell_voltages_v1s8_encode+0x50>)
 8004b98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b9c:	f7fb fb66 	bl	800026c <__aeabi_dsub>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	a309      	add	r3, pc, #36	; (adr r3, 8004bd0 <can1_ams_cell_voltages_v1s8_encode+0x48>)
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f7fb fe3f 	bl	8000830 <__aeabi_ddiv>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f7fb ffe7 	bl	8000b8c <__aeabi_d2uiz>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	b2db      	uxtb	r3, r3
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	f3af 8000 	nop.w
 8004bd0:	fcce1c58 	.word	0xfcce1c58
 8004bd4:	3f800e6a 	.word	0x3f800e6a
 8004bd8:	40040000 	.word	0x40040000
 8004bdc:	00000000 	.word	0x00000000

08004be0 <can1_ams_cell_voltages_v1s8_decode>:

double can1_ams_cell_voltages_v1s8_decode(uint8_t value)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fb fc7b 	bl	80004e8 <__aeabi_ui2d>
 8004bf2:	a30e      	add	r3, pc, #56	; (adr r3, 8004c2c <can1_ams_cell_voltages_v1s8_decode+0x4c>)
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f7fb fcf0 	bl	80005dc <__aeabi_dmul>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4610      	mov	r0, r2
 8004c02:	4619      	mov	r1, r3
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <can1_ams_cell_voltages_v1s8_decode+0x48>)
 8004c0a:	f7fb fb31 	bl	8000270 <__adddf3>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	ec43 2b17 	vmov	d7, r2, r3
}
 8004c16:	eeb0 0a47 	vmov.f32	s0, s14
 8004c1a:	eef0 0a67 	vmov.f32	s1, s15
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	f3af 8000 	nop.w
 8004c28:	40040000 	.word	0x40040000
 8004c2c:	fcce1c58 	.word	0xfcce1c58
 8004c30:	3f800e6a 	.word	0x3f800e6a
 8004c34:	00000000 	.word	0x00000000

08004c38 <can1_ams_cell_voltages_v7s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s8_encode(double value)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <can1_ams_cell_voltages_v7s8_encode+0x50>)
 8004c48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c4c:	f7fb fb0e 	bl	800026c <__aeabi_dsub>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	a309      	add	r3, pc, #36	; (adr r3, 8004c80 <can1_ams_cell_voltages_v7s8_encode+0x48>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fde7 	bl	8000830 <__aeabi_ddiv>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f7fb ff8f 	bl	8000b8c <__aeabi_d2uiz>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	b2db      	uxtb	r3, r3
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	f3af 8000 	nop.w
 8004c80:	fcce1c58 	.word	0xfcce1c58
 8004c84:	3f800e6a 	.word	0x3f800e6a
 8004c88:	40040000 	.word	0x40040000
 8004c8c:	00000000 	.word	0x00000000

08004c90 <can1_ams_cell_voltages_v7s8_decode>:

double can1_ams_cell_voltages_v7s8_decode(uint8_t value)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fb fc23 	bl	80004e8 <__aeabi_ui2d>
 8004ca2:	a30e      	add	r3, pc, #56	; (adr r3, 8004cdc <can1_ams_cell_voltages_v7s8_decode+0x4c>)
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	f7fb fc98 	bl	80005dc <__aeabi_dmul>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <can1_ams_cell_voltages_v7s8_decode+0x48>)
 8004cba:	f7fb fad9 	bl	8000270 <__adddf3>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	ec43 2b17 	vmov	d7, r2, r3
}
 8004cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8004cca:	eef0 0a67 	vmov.f32	s1, s15
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	f3af 8000 	nop.w
 8004cd8:	40040000 	.word	0x40040000
 8004cdc:	fcce1c58 	.word	0xfcce1c58
 8004ce0:	3f800e6a 	.word	0x3f800e6a
 8004ce4:	00000000 	.word	0x00000000

08004ce8 <can1_ams_cell_voltages_v1s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s9_encode(double value)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <can1_ams_cell_voltages_v1s9_encode+0x50>)
 8004cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cfc:	f7fb fab6 	bl	800026c <__aeabi_dsub>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4610      	mov	r0, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	a309      	add	r3, pc, #36	; (adr r3, 8004d30 <can1_ams_cell_voltages_v1s9_encode+0x48>)
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f7fb fd8f 	bl	8000830 <__aeabi_ddiv>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4610      	mov	r0, r2
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f7fb ff37 	bl	8000b8c <__aeabi_d2uiz>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	b2db      	uxtb	r3, r3
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	f3af 8000 	nop.w
 8004d30:	fcce1c58 	.word	0xfcce1c58
 8004d34:	3f800e6a 	.word	0x3f800e6a
 8004d38:	40040000 	.word	0x40040000
 8004d3c:	00000000 	.word	0x00000000

08004d40 <can1_ams_cell_voltages_v1s9_decode>:

double can1_ams_cell_voltages_v1s9_decode(uint8_t value)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fb fbcb 	bl	80004e8 <__aeabi_ui2d>
 8004d52:	a30e      	add	r3, pc, #56	; (adr r3, 8004d8c <can1_ams_cell_voltages_v1s9_decode+0x4c>)
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	f7fb fc40 	bl	80005dc <__aeabi_dmul>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4610      	mov	r0, r2
 8004d62:	4619      	mov	r1, r3
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <can1_ams_cell_voltages_v1s9_decode+0x48>)
 8004d6a:	f7fb fa81 	bl	8000270 <__adddf3>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	ec43 2b17 	vmov	d7, r2, r3
}
 8004d76:	eeb0 0a47 	vmov.f32	s0, s14
 8004d7a:	eef0 0a67 	vmov.f32	s1, s15
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	f3af 8000 	nop.w
 8004d88:	40040000 	.word	0x40040000
 8004d8c:	fcce1c58 	.word	0xfcce1c58
 8004d90:	3f800e6a 	.word	0x3f800e6a
 8004d94:	00000000 	.word	0x00000000

08004d98 <can1_ams_cell_voltages_v7s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s9_encode(double value)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <can1_ams_cell_voltages_v7s9_encode+0x50>)
 8004da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dac:	f7fb fa5e 	bl	800026c <__aeabi_dsub>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	a309      	add	r3, pc, #36	; (adr r3, 8004de0 <can1_ams_cell_voltages_v7s9_encode+0x48>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f7fb fd37 	bl	8000830 <__aeabi_ddiv>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	4619      	mov	r1, r3
 8004dca:	f7fb fedf 	bl	8000b8c <__aeabi_d2uiz>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	b2db      	uxtb	r3, r3
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	f3af 8000 	nop.w
 8004de0:	fcce1c58 	.word	0xfcce1c58
 8004de4:	3f800e6a 	.word	0x3f800e6a
 8004de8:	40040000 	.word	0x40040000
 8004dec:	00000000 	.word	0x00000000

08004df0 <can1_ams_cell_voltages_v7s9_decode>:

double can1_ams_cell_voltages_v7s9_decode(uint8_t value)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fb fb73 	bl	80004e8 <__aeabi_ui2d>
 8004e02:	a30e      	add	r3, pc, #56	; (adr r3, 8004e3c <can1_ams_cell_voltages_v7s9_decode+0x4c>)
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f7fb fbe8 	bl	80005dc <__aeabi_dmul>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4610      	mov	r0, r2
 8004e12:	4619      	mov	r1, r3
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <can1_ams_cell_voltages_v7s9_decode+0x48>)
 8004e1a:	f7fb fa29 	bl	8000270 <__adddf3>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	ec43 2b17 	vmov	d7, r2, r3
}
 8004e26:	eeb0 0a47 	vmov.f32	s0, s14
 8004e2a:	eef0 0a67 	vmov.f32	s1, s15
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	f3af 8000 	nop.w
 8004e38:	40040000 	.word	0x40040000
 8004e3c:	fcce1c58 	.word	0xfcce1c58
 8004e40:	3f800e6a 	.word	0x3f800e6a
 8004e44:	00000000 	.word	0x00000000

08004e48 <can1_ams_cell_voltages_v1s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s10_encode(double value)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <can1_ams_cell_voltages_v1s10_encode+0x50>)
 8004e58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e5c:	f7fb fa06 	bl	800026c <__aeabi_dsub>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4610      	mov	r0, r2
 8004e66:	4619      	mov	r1, r3
 8004e68:	a309      	add	r3, pc, #36	; (adr r3, 8004e90 <can1_ams_cell_voltages_v1s10_encode+0x48>)
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f7fb fcdf 	bl	8000830 <__aeabi_ddiv>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4610      	mov	r0, r2
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f7fb fe87 	bl	8000b8c <__aeabi_d2uiz>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	b2db      	uxtb	r3, r3
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	f3af 8000 	nop.w
 8004e90:	fcce1c58 	.word	0xfcce1c58
 8004e94:	3f800e6a 	.word	0x3f800e6a
 8004e98:	40040000 	.word	0x40040000
 8004e9c:	00000000 	.word	0x00000000

08004ea0 <can1_ams_cell_voltages_v1s10_decode>:

double can1_ams_cell_voltages_v1s10_decode(uint8_t value)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fb fb1b 	bl	80004e8 <__aeabi_ui2d>
 8004eb2:	a30e      	add	r3, pc, #56	; (adr r3, 8004eec <can1_ams_cell_voltages_v1s10_decode+0x4c>)
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f7fb fb90 	bl	80005dc <__aeabi_dmul>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <can1_ams_cell_voltages_v1s10_decode+0x48>)
 8004eca:	f7fb f9d1 	bl	8000270 <__adddf3>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	ec43 2b17 	vmov	d7, r2, r3
}
 8004ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8004eda:	eef0 0a67 	vmov.f32	s1, s15
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	f3af 8000 	nop.w
 8004ee8:	40040000 	.word	0x40040000
 8004eec:	fcce1c58 	.word	0xfcce1c58
 8004ef0:	3f800e6a 	.word	0x3f800e6a
 8004ef4:	00000000 	.word	0x00000000

08004ef8 <can1_ams_cell_voltages_v7s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s10_encode(double value)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <can1_ams_cell_voltages_v7s10_encode+0x50>)
 8004f08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f0c:	f7fb f9ae 	bl	800026c <__aeabi_dsub>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4610      	mov	r0, r2
 8004f16:	4619      	mov	r1, r3
 8004f18:	a309      	add	r3, pc, #36	; (adr r3, 8004f40 <can1_ams_cell_voltages_v7s10_encode+0x48>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f7fb fc87 	bl	8000830 <__aeabi_ddiv>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f7fb fe2f 	bl	8000b8c <__aeabi_d2uiz>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	b2db      	uxtb	r3, r3
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	f3af 8000 	nop.w
 8004f40:	fcce1c58 	.word	0xfcce1c58
 8004f44:	3f800e6a 	.word	0x3f800e6a
 8004f48:	40040000 	.word	0x40040000
 8004f4c:	00000000 	.word	0x00000000

08004f50 <can1_ams_cell_voltages_v7s10_decode>:

double can1_ams_cell_voltages_v7s10_decode(uint8_t value)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fb fac3 	bl	80004e8 <__aeabi_ui2d>
 8004f62:	a30e      	add	r3, pc, #56	; (adr r3, 8004f9c <can1_ams_cell_voltages_v7s10_decode+0x4c>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	f7fb fb38 	bl	80005dc <__aeabi_dmul>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <can1_ams_cell_voltages_v7s10_decode+0x48>)
 8004f7a:	f7fb f979 	bl	8000270 <__adddf3>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	ec43 2b17 	vmov	d7, r2, r3
}
 8004f86:	eeb0 0a47 	vmov.f32	s0, s14
 8004f8a:	eef0 0a67 	vmov.f32	s1, s15
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	f3af 8000 	nop.w
 8004f98:	40040000 	.word	0x40040000
 8004f9c:	fcce1c58 	.word	0xfcce1c58
 8004fa0:	3f800e6a 	.word	0x3f800e6a
 8004fa4:	00000000 	.word	0x00000000

08004fa8 <can1_ams_cell_voltages_v1s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s11_encode(double value)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <can1_ams_cell_voltages_v1s11_encode+0x50>)
 8004fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fbc:	f7fb f956 	bl	800026c <__aeabi_dsub>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	a309      	add	r3, pc, #36	; (adr r3, 8004ff0 <can1_ams_cell_voltages_v1s11_encode+0x48>)
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	f7fb fc2f 	bl	8000830 <__aeabi_ddiv>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	f7fb fdd7 	bl	8000b8c <__aeabi_d2uiz>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	b2db      	uxtb	r3, r3
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	f3af 8000 	nop.w
 8004ff0:	fcce1c58 	.word	0xfcce1c58
 8004ff4:	3f800e6a 	.word	0x3f800e6a
 8004ff8:	40040000 	.word	0x40040000
 8004ffc:	00000000 	.word	0x00000000

08005000 <can1_ams_cell_voltages_v1s11_decode>:

double can1_ams_cell_voltages_v1s11_decode(uint8_t value)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	4618      	mov	r0, r3
 800500e:	f7fb fa6b 	bl	80004e8 <__aeabi_ui2d>
 8005012:	a30e      	add	r3, pc, #56	; (adr r3, 800504c <can1_ams_cell_voltages_v1s11_decode+0x4c>)
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	f7fb fae0 	bl	80005dc <__aeabi_dmul>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4610      	mov	r0, r2
 8005022:	4619      	mov	r1, r3
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <can1_ams_cell_voltages_v1s11_decode+0x48>)
 800502a:	f7fb f921 	bl	8000270 <__adddf3>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	ec43 2b17 	vmov	d7, r2, r3
}
 8005036:	eeb0 0a47 	vmov.f32	s0, s14
 800503a:	eef0 0a67 	vmov.f32	s1, s15
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	f3af 8000 	nop.w
 8005048:	40040000 	.word	0x40040000
 800504c:	fcce1c58 	.word	0xfcce1c58
 8005050:	3f800e6a 	.word	0x3f800e6a
 8005054:	00000000 	.word	0x00000000

08005058 <can1_ams_cell_voltages_v7s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s11_encode(double value)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <can1_ams_cell_voltages_v7s11_encode+0x50>)
 8005068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800506c:	f7fb f8fe 	bl	800026c <__aeabi_dsub>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
 8005078:	a309      	add	r3, pc, #36	; (adr r3, 80050a0 <can1_ams_cell_voltages_v7s11_encode+0x48>)
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f7fb fbd7 	bl	8000830 <__aeabi_ddiv>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	f7fb fd7f 	bl	8000b8c <__aeabi_d2uiz>
 800508e:	4603      	mov	r3, r0
 8005090:	b2db      	uxtb	r3, r3
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	f3af 8000 	nop.w
 80050a0:	fcce1c58 	.word	0xfcce1c58
 80050a4:	3f800e6a 	.word	0x3f800e6a
 80050a8:	40040000 	.word	0x40040000
 80050ac:	00000000 	.word	0x00000000

080050b0 <can1_ams_cell_voltages_v7s11_decode>:

double can1_ams_cell_voltages_v7s11_decode(uint8_t value)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fb fa13 	bl	80004e8 <__aeabi_ui2d>
 80050c2:	a30e      	add	r3, pc, #56	; (adr r3, 80050fc <can1_ams_cell_voltages_v7s11_decode+0x4c>)
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f7fb fa88 	bl	80005dc <__aeabi_dmul>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4610      	mov	r0, r2
 80050d2:	4619      	mov	r1, r3
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <can1_ams_cell_voltages_v7s11_decode+0x48>)
 80050da:	f7fb f8c9 	bl	8000270 <__adddf3>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80050e6:	eeb0 0a47 	vmov.f32	s0, s14
 80050ea:	eef0 0a67 	vmov.f32	s1, s15
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	f3af 8000 	nop.w
 80050f8:	40040000 	.word	0x40040000
 80050fc:	fcce1c58 	.word	0xfcce1c58
 8005100:	3f800e6a 	.word	0x3f800e6a
 8005104:	00000000 	.word	0x00000000

08005108 <can1_ams_cell_voltages_v1s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s12_encode(double value)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <can1_ams_cell_voltages_v1s12_encode+0x50>)
 8005118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800511c:	f7fb f8a6 	bl	800026c <__aeabi_dsub>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4610      	mov	r0, r2
 8005126:	4619      	mov	r1, r3
 8005128:	a309      	add	r3, pc, #36	; (adr r3, 8005150 <can1_ams_cell_voltages_v1s12_encode+0x48>)
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f7fb fb7f 	bl	8000830 <__aeabi_ddiv>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4610      	mov	r0, r2
 8005138:	4619      	mov	r1, r3
 800513a:	f7fb fd27 	bl	8000b8c <__aeabi_d2uiz>
 800513e:	4603      	mov	r3, r0
 8005140:	b2db      	uxtb	r3, r3
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	f3af 8000 	nop.w
 8005150:	fcce1c58 	.word	0xfcce1c58
 8005154:	3f800e6a 	.word	0x3f800e6a
 8005158:	40040000 	.word	0x40040000
 800515c:	00000000 	.word	0x00000000

08005160 <can1_ams_cell_voltages_v1s12_decode>:

double can1_ams_cell_voltages_v1s12_decode(uint8_t value)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	4618      	mov	r0, r3
 800516e:	f7fb f9bb 	bl	80004e8 <__aeabi_ui2d>
 8005172:	a30e      	add	r3, pc, #56	; (adr r3, 80051ac <can1_ams_cell_voltages_v1s12_decode+0x4c>)
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f7fb fa30 	bl	80005dc <__aeabi_dmul>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4610      	mov	r0, r2
 8005182:	4619      	mov	r1, r3
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <can1_ams_cell_voltages_v1s12_decode+0x48>)
 800518a:	f7fb f871 	bl	8000270 <__adddf3>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	ec43 2b17 	vmov	d7, r2, r3
}
 8005196:	eeb0 0a47 	vmov.f32	s0, s14
 800519a:	eef0 0a67 	vmov.f32	s1, s15
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	f3af 8000 	nop.w
 80051a8:	40040000 	.word	0x40040000
 80051ac:	fcce1c58 	.word	0xfcce1c58
 80051b0:	3f800e6a 	.word	0x3f800e6a
 80051b4:	00000000 	.word	0x00000000

080051b8 <can1_ams_cell_voltages_v7s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s12_encode(double value)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <can1_ams_cell_voltages_v7s12_encode+0x50>)
 80051c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051cc:	f7fb f84e 	bl	800026c <__aeabi_dsub>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4610      	mov	r0, r2
 80051d6:	4619      	mov	r1, r3
 80051d8:	a309      	add	r3, pc, #36	; (adr r3, 8005200 <can1_ams_cell_voltages_v7s12_encode+0x48>)
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7fb fb27 	bl	8000830 <__aeabi_ddiv>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4610      	mov	r0, r2
 80051e8:	4619      	mov	r1, r3
 80051ea:	f7fb fccf 	bl	8000b8c <__aeabi_d2uiz>
 80051ee:	4603      	mov	r3, r0
 80051f0:	b2db      	uxtb	r3, r3
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	f3af 8000 	nop.w
 8005200:	fcce1c58 	.word	0xfcce1c58
 8005204:	3f800e6a 	.word	0x3f800e6a
 8005208:	40040000 	.word	0x40040000
 800520c:	00000000 	.word	0x00000000

08005210 <can1_ams_cell_voltages_v7s12_decode>:

double can1_ams_cell_voltages_v7s12_decode(uint8_t value)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	4603      	mov	r3, r0
 8005218:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	4618      	mov	r0, r3
 800521e:	f7fb f963 	bl	80004e8 <__aeabi_ui2d>
 8005222:	a30e      	add	r3, pc, #56	; (adr r3, 800525c <can1_ams_cell_voltages_v7s12_decode+0x4c>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fb f9d8 	bl	80005dc <__aeabi_dmul>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	4b07      	ldr	r3, [pc, #28]	; (8005258 <can1_ams_cell_voltages_v7s12_decode+0x48>)
 800523a:	f7fb f819 	bl	8000270 <__adddf3>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	ec43 2b17 	vmov	d7, r2, r3
}
 8005246:	eeb0 0a47 	vmov.f32	s0, s14
 800524a:	eef0 0a67 	vmov.f32	s1, s15
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	f3af 8000 	nop.w
 8005258:	40040000 	.word	0x40040000
 800525c:	fcce1c58 	.word	0xfcce1c58
 8005260:	3f800e6a 	.word	0x3f800e6a
 8005264:	00000000 	.word	0x00000000

08005268 <can1_ams_cell_voltages_v2s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s1_encode(double value)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <can1_ams_cell_voltages_v2s1_encode+0x50>)
 8005278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800527c:	f7fa fff6 	bl	800026c <__aeabi_dsub>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4610      	mov	r0, r2
 8005286:	4619      	mov	r1, r3
 8005288:	a309      	add	r3, pc, #36	; (adr r3, 80052b0 <can1_ams_cell_voltages_v2s1_encode+0x48>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	f7fb facf 	bl	8000830 <__aeabi_ddiv>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4610      	mov	r0, r2
 8005298:	4619      	mov	r1, r3
 800529a:	f7fb fc77 	bl	8000b8c <__aeabi_d2uiz>
 800529e:	4603      	mov	r3, r0
 80052a0:	b2db      	uxtb	r3, r3
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	f3af 8000 	nop.w
 80052b0:	fcce1c58 	.word	0xfcce1c58
 80052b4:	3f800e6a 	.word	0x3f800e6a
 80052b8:	40040000 	.word	0x40040000
 80052bc:	00000000 	.word	0x00000000

080052c0 <can1_ams_cell_voltages_v2s1_decode>:

double can1_ams_cell_voltages_v2s1_decode(uint8_t value)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fb f90b 	bl	80004e8 <__aeabi_ui2d>
 80052d2:	a30e      	add	r3, pc, #56	; (adr r3, 800530c <can1_ams_cell_voltages_v2s1_decode+0x4c>)
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	f7fb f980 	bl	80005dc <__aeabi_dmul>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4610      	mov	r0, r2
 80052e2:	4619      	mov	r1, r3
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	4b07      	ldr	r3, [pc, #28]	; (8005308 <can1_ams_cell_voltages_v2s1_decode+0x48>)
 80052ea:	f7fa ffc1 	bl	8000270 <__adddf3>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80052f6:	eeb0 0a47 	vmov.f32	s0, s14
 80052fa:	eef0 0a67 	vmov.f32	s1, s15
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	f3af 8000 	nop.w
 8005308:	40040000 	.word	0x40040000
 800530c:	fcce1c58 	.word	0xfcce1c58
 8005310:	3f800e6a 	.word	0x3f800e6a
 8005314:	00000000 	.word	0x00000000

08005318 <can1_ams_cell_voltages_v8s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s1_encode(double value)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	4b10      	ldr	r3, [pc, #64]	; (8005368 <can1_ams_cell_voltages_v8s1_encode+0x50>)
 8005328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800532c:	f7fa ff9e 	bl	800026c <__aeabi_dsub>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4610      	mov	r0, r2
 8005336:	4619      	mov	r1, r3
 8005338:	a309      	add	r3, pc, #36	; (adr r3, 8005360 <can1_ams_cell_voltages_v8s1_encode+0x48>)
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	f7fb fa77 	bl	8000830 <__aeabi_ddiv>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4610      	mov	r0, r2
 8005348:	4619      	mov	r1, r3
 800534a:	f7fb fc1f 	bl	8000b8c <__aeabi_d2uiz>
 800534e:	4603      	mov	r3, r0
 8005350:	b2db      	uxtb	r3, r3
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	f3af 8000 	nop.w
 8005360:	fcce1c58 	.word	0xfcce1c58
 8005364:	3f800e6a 	.word	0x3f800e6a
 8005368:	40040000 	.word	0x40040000
 800536c:	00000000 	.word	0x00000000

08005370 <can1_ams_cell_voltages_v8s1_decode>:

double can1_ams_cell_voltages_v8s1_decode(uint8_t value)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	4618      	mov	r0, r3
 800537e:	f7fb f8b3 	bl	80004e8 <__aeabi_ui2d>
 8005382:	a30e      	add	r3, pc, #56	; (adr r3, 80053bc <can1_ams_cell_voltages_v8s1_decode+0x4c>)
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	f7fb f928 	bl	80005dc <__aeabi_dmul>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4610      	mov	r0, r2
 8005392:	4619      	mov	r1, r3
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <can1_ams_cell_voltages_v8s1_decode+0x48>)
 800539a:	f7fa ff69 	bl	8000270 <__adddf3>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80053a6:	eeb0 0a47 	vmov.f32	s0, s14
 80053aa:	eef0 0a67 	vmov.f32	s1, s15
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	f3af 8000 	nop.w
 80053b8:	40040000 	.word	0x40040000
 80053bc:	fcce1c58 	.word	0xfcce1c58
 80053c0:	3f800e6a 	.word	0x3f800e6a
 80053c4:	00000000 	.word	0x00000000

080053c8 <can1_ams_cell_voltages_v2s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s2_encode(double value)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	4b10      	ldr	r3, [pc, #64]	; (8005418 <can1_ams_cell_voltages_v2s2_encode+0x50>)
 80053d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053dc:	f7fa ff46 	bl	800026c <__aeabi_dsub>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4610      	mov	r0, r2
 80053e6:	4619      	mov	r1, r3
 80053e8:	a309      	add	r3, pc, #36	; (adr r3, 8005410 <can1_ams_cell_voltages_v2s2_encode+0x48>)
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	f7fb fa1f 	bl	8000830 <__aeabi_ddiv>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4610      	mov	r0, r2
 80053f8:	4619      	mov	r1, r3
 80053fa:	f7fb fbc7 	bl	8000b8c <__aeabi_d2uiz>
 80053fe:	4603      	mov	r3, r0
 8005400:	b2db      	uxtb	r3, r3
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	f3af 8000 	nop.w
 8005410:	fcce1c58 	.word	0xfcce1c58
 8005414:	3f800e6a 	.word	0x3f800e6a
 8005418:	40040000 	.word	0x40040000
 800541c:	00000000 	.word	0x00000000

08005420 <can1_ams_cell_voltages_v2s2_decode>:

double can1_ams_cell_voltages_v2s2_decode(uint8_t value)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	4618      	mov	r0, r3
 800542e:	f7fb f85b 	bl	80004e8 <__aeabi_ui2d>
 8005432:	a30e      	add	r3, pc, #56	; (adr r3, 800546c <can1_ams_cell_voltages_v2s2_decode+0x4c>)
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	f7fb f8d0 	bl	80005dc <__aeabi_dmul>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4610      	mov	r0, r2
 8005442:	4619      	mov	r1, r3
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	4b07      	ldr	r3, [pc, #28]	; (8005468 <can1_ams_cell_voltages_v2s2_decode+0x48>)
 800544a:	f7fa ff11 	bl	8000270 <__adddf3>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	ec43 2b17 	vmov	d7, r2, r3
}
 8005456:	eeb0 0a47 	vmov.f32	s0, s14
 800545a:	eef0 0a67 	vmov.f32	s1, s15
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	f3af 8000 	nop.w
 8005468:	40040000 	.word	0x40040000
 800546c:	fcce1c58 	.word	0xfcce1c58
 8005470:	3f800e6a 	.word	0x3f800e6a
 8005474:	00000000 	.word	0x00000000

08005478 <can1_ams_cell_voltages_v8s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s2_encode(double value)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <can1_ams_cell_voltages_v8s2_encode+0x50>)
 8005488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800548c:	f7fa feee 	bl	800026c <__aeabi_dsub>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4610      	mov	r0, r2
 8005496:	4619      	mov	r1, r3
 8005498:	a309      	add	r3, pc, #36	; (adr r3, 80054c0 <can1_ams_cell_voltages_v8s2_encode+0x48>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fb f9c7 	bl	8000830 <__aeabi_ddiv>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4610      	mov	r0, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	f7fb fb6f 	bl	8000b8c <__aeabi_d2uiz>
 80054ae:	4603      	mov	r3, r0
 80054b0:	b2db      	uxtb	r3, r3
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	f3af 8000 	nop.w
 80054c0:	fcce1c58 	.word	0xfcce1c58
 80054c4:	3f800e6a 	.word	0x3f800e6a
 80054c8:	40040000 	.word	0x40040000
 80054cc:	00000000 	.word	0x00000000

080054d0 <can1_ams_cell_voltages_v8s2_decode>:

double can1_ams_cell_voltages_v8s2_decode(uint8_t value)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fb f803 	bl	80004e8 <__aeabi_ui2d>
 80054e2:	a30e      	add	r3, pc, #56	; (adr r3, 800551c <can1_ams_cell_voltages_v8s2_decode+0x4c>)
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f7fb f878 	bl	80005dc <__aeabi_dmul>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4610      	mov	r0, r2
 80054f2:	4619      	mov	r1, r3
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	4b07      	ldr	r3, [pc, #28]	; (8005518 <can1_ams_cell_voltages_v8s2_decode+0x48>)
 80054fa:	f7fa feb9 	bl	8000270 <__adddf3>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	ec43 2b17 	vmov	d7, r2, r3
}
 8005506:	eeb0 0a47 	vmov.f32	s0, s14
 800550a:	eef0 0a67 	vmov.f32	s1, s15
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	f3af 8000 	nop.w
 8005518:	40040000 	.word	0x40040000
 800551c:	fcce1c58 	.word	0xfcce1c58
 8005520:	3f800e6a 	.word	0x3f800e6a
 8005524:	00000000 	.word	0x00000000

08005528 <can1_ams_cell_voltages_v2s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s3_encode(double value)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	4b10      	ldr	r3, [pc, #64]	; (8005578 <can1_ams_cell_voltages_v2s3_encode+0x50>)
 8005538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800553c:	f7fa fe96 	bl	800026c <__aeabi_dsub>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4610      	mov	r0, r2
 8005546:	4619      	mov	r1, r3
 8005548:	a309      	add	r3, pc, #36	; (adr r3, 8005570 <can1_ams_cell_voltages_v2s3_encode+0x48>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f7fb f96f 	bl	8000830 <__aeabi_ddiv>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4610      	mov	r0, r2
 8005558:	4619      	mov	r1, r3
 800555a:	f7fb fb17 	bl	8000b8c <__aeabi_d2uiz>
 800555e:	4603      	mov	r3, r0
 8005560:	b2db      	uxtb	r3, r3
}
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	f3af 8000 	nop.w
 8005570:	fcce1c58 	.word	0xfcce1c58
 8005574:	3f800e6a 	.word	0x3f800e6a
 8005578:	40040000 	.word	0x40040000
 800557c:	00000000 	.word	0x00000000

08005580 <can1_ams_cell_voltages_v2s3_decode>:

double can1_ams_cell_voltages_v2s3_decode(uint8_t value)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	4618      	mov	r0, r3
 800558e:	f7fa ffab 	bl	80004e8 <__aeabi_ui2d>
 8005592:	a30e      	add	r3, pc, #56	; (adr r3, 80055cc <can1_ams_cell_voltages_v2s3_decode+0x4c>)
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	f7fb f820 	bl	80005dc <__aeabi_dmul>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4610      	mov	r0, r2
 80055a2:	4619      	mov	r1, r3
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	4b07      	ldr	r3, [pc, #28]	; (80055c8 <can1_ams_cell_voltages_v2s3_decode+0x48>)
 80055aa:	f7fa fe61 	bl	8000270 <__adddf3>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80055b6:	eeb0 0a47 	vmov.f32	s0, s14
 80055ba:	eef0 0a67 	vmov.f32	s1, s15
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	f3af 8000 	nop.w
 80055c8:	40040000 	.word	0x40040000
 80055cc:	fcce1c58 	.word	0xfcce1c58
 80055d0:	3f800e6a 	.word	0x3f800e6a
 80055d4:	00000000 	.word	0x00000000

080055d8 <can1_ams_cell_voltages_v8s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s3_encode(double value)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	4b10      	ldr	r3, [pc, #64]	; (8005628 <can1_ams_cell_voltages_v8s3_encode+0x50>)
 80055e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055ec:	f7fa fe3e 	bl	800026c <__aeabi_dsub>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4610      	mov	r0, r2
 80055f6:	4619      	mov	r1, r3
 80055f8:	a309      	add	r3, pc, #36	; (adr r3, 8005620 <can1_ams_cell_voltages_v8s3_encode+0x48>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fb f917 	bl	8000830 <__aeabi_ddiv>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4610      	mov	r0, r2
 8005608:	4619      	mov	r1, r3
 800560a:	f7fb fabf 	bl	8000b8c <__aeabi_d2uiz>
 800560e:	4603      	mov	r3, r0
 8005610:	b2db      	uxtb	r3, r3
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	f3af 8000 	nop.w
 8005620:	fcce1c58 	.word	0xfcce1c58
 8005624:	3f800e6a 	.word	0x3f800e6a
 8005628:	40040000 	.word	0x40040000
 800562c:	00000000 	.word	0x00000000

08005630 <can1_ams_cell_voltages_v8s3_decode>:

double can1_ams_cell_voltages_v8s3_decode(uint8_t value)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	4603      	mov	r3, r0
 8005638:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	4618      	mov	r0, r3
 800563e:	f7fa ff53 	bl	80004e8 <__aeabi_ui2d>
 8005642:	a30e      	add	r3, pc, #56	; (adr r3, 800567c <can1_ams_cell_voltages_v8s3_decode+0x4c>)
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f7fa ffc8 	bl	80005dc <__aeabi_dmul>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4610      	mov	r0, r2
 8005652:	4619      	mov	r1, r3
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	4b07      	ldr	r3, [pc, #28]	; (8005678 <can1_ams_cell_voltages_v8s3_decode+0x48>)
 800565a:	f7fa fe09 	bl	8000270 <__adddf3>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	ec43 2b17 	vmov	d7, r2, r3
}
 8005666:	eeb0 0a47 	vmov.f32	s0, s14
 800566a:	eef0 0a67 	vmov.f32	s1, s15
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	f3af 8000 	nop.w
 8005678:	40040000 	.word	0x40040000
 800567c:	fcce1c58 	.word	0xfcce1c58
 8005680:	3f800e6a 	.word	0x3f800e6a
 8005684:	00000000 	.word	0x00000000

08005688 <can1_ams_cell_voltages_v2s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s4_encode(double value)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <can1_ams_cell_voltages_v2s4_encode+0x50>)
 8005698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800569c:	f7fa fde6 	bl	800026c <__aeabi_dsub>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4610      	mov	r0, r2
 80056a6:	4619      	mov	r1, r3
 80056a8:	a309      	add	r3, pc, #36	; (adr r3, 80056d0 <can1_ams_cell_voltages_v2s4_encode+0x48>)
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f7fb f8bf 	bl	8000830 <__aeabi_ddiv>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4610      	mov	r0, r2
 80056b8:	4619      	mov	r1, r3
 80056ba:	f7fb fa67 	bl	8000b8c <__aeabi_d2uiz>
 80056be:	4603      	mov	r3, r0
 80056c0:	b2db      	uxtb	r3, r3
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	f3af 8000 	nop.w
 80056d0:	fcce1c58 	.word	0xfcce1c58
 80056d4:	3f800e6a 	.word	0x3f800e6a
 80056d8:	40040000 	.word	0x40040000
 80056dc:	00000000 	.word	0x00000000

080056e0 <can1_ams_cell_voltages_v2s4_decode>:

double can1_ams_cell_voltages_v2s4_decode(uint8_t value)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fa fefb 	bl	80004e8 <__aeabi_ui2d>
 80056f2:	a30e      	add	r3, pc, #56	; (adr r3, 800572c <can1_ams_cell_voltages_v2s4_decode+0x4c>)
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	f7fa ff70 	bl	80005dc <__aeabi_dmul>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4610      	mov	r0, r2
 8005702:	4619      	mov	r1, r3
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	4b07      	ldr	r3, [pc, #28]	; (8005728 <can1_ams_cell_voltages_v2s4_decode+0x48>)
 800570a:	f7fa fdb1 	bl	8000270 <__adddf3>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	ec43 2b17 	vmov	d7, r2, r3
}
 8005716:	eeb0 0a47 	vmov.f32	s0, s14
 800571a:	eef0 0a67 	vmov.f32	s1, s15
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	f3af 8000 	nop.w
 8005728:	40040000 	.word	0x40040000
 800572c:	fcce1c58 	.word	0xfcce1c58
 8005730:	3f800e6a 	.word	0x3f800e6a
 8005734:	00000000 	.word	0x00000000

08005738 <can1_ams_cell_voltages_v8s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s4_encode(double value)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	4b10      	ldr	r3, [pc, #64]	; (8005788 <can1_ams_cell_voltages_v8s4_encode+0x50>)
 8005748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800574c:	f7fa fd8e 	bl	800026c <__aeabi_dsub>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4610      	mov	r0, r2
 8005756:	4619      	mov	r1, r3
 8005758:	a309      	add	r3, pc, #36	; (adr r3, 8005780 <can1_ams_cell_voltages_v8s4_encode+0x48>)
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	f7fb f867 	bl	8000830 <__aeabi_ddiv>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4610      	mov	r0, r2
 8005768:	4619      	mov	r1, r3
 800576a:	f7fb fa0f 	bl	8000b8c <__aeabi_d2uiz>
 800576e:	4603      	mov	r3, r0
 8005770:	b2db      	uxtb	r3, r3
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	f3af 8000 	nop.w
 8005780:	fcce1c58 	.word	0xfcce1c58
 8005784:	3f800e6a 	.word	0x3f800e6a
 8005788:	40040000 	.word	0x40040000
 800578c:	00000000 	.word	0x00000000

08005790 <can1_ams_cell_voltages_v8s4_decode>:

double can1_ams_cell_voltages_v8s4_decode(uint8_t value)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	4618      	mov	r0, r3
 800579e:	f7fa fea3 	bl	80004e8 <__aeabi_ui2d>
 80057a2:	a30e      	add	r3, pc, #56	; (adr r3, 80057dc <can1_ams_cell_voltages_v8s4_decode+0x4c>)
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	f7fa ff18 	bl	80005dc <__aeabi_dmul>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4610      	mov	r0, r2
 80057b2:	4619      	mov	r1, r3
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <can1_ams_cell_voltages_v8s4_decode+0x48>)
 80057ba:	f7fa fd59 	bl	8000270 <__adddf3>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80057c6:	eeb0 0a47 	vmov.f32	s0, s14
 80057ca:	eef0 0a67 	vmov.f32	s1, s15
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	f3af 8000 	nop.w
 80057d8:	40040000 	.word	0x40040000
 80057dc:	fcce1c58 	.word	0xfcce1c58
 80057e0:	3f800e6a 	.word	0x3f800e6a
 80057e4:	00000000 	.word	0x00000000

080057e8 <can1_ams_cell_voltages_v2s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s5_encode(double value)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	4b10      	ldr	r3, [pc, #64]	; (8005838 <can1_ams_cell_voltages_v2s5_encode+0x50>)
 80057f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057fc:	f7fa fd36 	bl	800026c <__aeabi_dsub>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4610      	mov	r0, r2
 8005806:	4619      	mov	r1, r3
 8005808:	a309      	add	r3, pc, #36	; (adr r3, 8005830 <can1_ams_cell_voltages_v2s5_encode+0x48>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f7fb f80f 	bl	8000830 <__aeabi_ddiv>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4610      	mov	r0, r2
 8005818:	4619      	mov	r1, r3
 800581a:	f7fb f9b7 	bl	8000b8c <__aeabi_d2uiz>
 800581e:	4603      	mov	r3, r0
 8005820:	b2db      	uxtb	r3, r3
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	f3af 8000 	nop.w
 8005830:	fcce1c58 	.word	0xfcce1c58
 8005834:	3f800e6a 	.word	0x3f800e6a
 8005838:	40040000 	.word	0x40040000
 800583c:	00000000 	.word	0x00000000

08005840 <can1_ams_cell_voltages_v2s5_decode>:

double can1_ams_cell_voltages_v2s5_decode(uint8_t value)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	4618      	mov	r0, r3
 800584e:	f7fa fe4b 	bl	80004e8 <__aeabi_ui2d>
 8005852:	a30e      	add	r3, pc, #56	; (adr r3, 800588c <can1_ams_cell_voltages_v2s5_decode+0x4c>)
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f7fa fec0 	bl	80005dc <__aeabi_dmul>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4610      	mov	r0, r2
 8005862:	4619      	mov	r1, r3
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	4b07      	ldr	r3, [pc, #28]	; (8005888 <can1_ams_cell_voltages_v2s5_decode+0x48>)
 800586a:	f7fa fd01 	bl	8000270 <__adddf3>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	ec43 2b17 	vmov	d7, r2, r3
}
 8005876:	eeb0 0a47 	vmov.f32	s0, s14
 800587a:	eef0 0a67 	vmov.f32	s1, s15
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	f3af 8000 	nop.w
 8005888:	40040000 	.word	0x40040000
 800588c:	fcce1c58 	.word	0xfcce1c58
 8005890:	3f800e6a 	.word	0x3f800e6a
 8005894:	00000000 	.word	0x00000000

08005898 <can1_ams_cell_voltages_v8s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s5_encode(double value)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <can1_ams_cell_voltages_v8s5_encode+0x50>)
 80058a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058ac:	f7fa fcde 	bl	800026c <__aeabi_dsub>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4610      	mov	r0, r2
 80058b6:	4619      	mov	r1, r3
 80058b8:	a309      	add	r3, pc, #36	; (adr r3, 80058e0 <can1_ams_cell_voltages_v8s5_encode+0x48>)
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f7fa ffb7 	bl	8000830 <__aeabi_ddiv>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4610      	mov	r0, r2
 80058c8:	4619      	mov	r1, r3
 80058ca:	f7fb f95f 	bl	8000b8c <__aeabi_d2uiz>
 80058ce:	4603      	mov	r3, r0
 80058d0:	b2db      	uxtb	r3, r3
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	f3af 8000 	nop.w
 80058e0:	fcce1c58 	.word	0xfcce1c58
 80058e4:	3f800e6a 	.word	0x3f800e6a
 80058e8:	40040000 	.word	0x40040000
 80058ec:	00000000 	.word	0x00000000

080058f0 <can1_ams_cell_voltages_v8s5_decode>:

double can1_ams_cell_voltages_v8s5_decode(uint8_t value)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	4603      	mov	r3, r0
 80058f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fa fdf3 	bl	80004e8 <__aeabi_ui2d>
 8005902:	a30e      	add	r3, pc, #56	; (adr r3, 800593c <can1_ams_cell_voltages_v8s5_decode+0x4c>)
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	f7fa fe68 	bl	80005dc <__aeabi_dmul>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4610      	mov	r0, r2
 8005912:	4619      	mov	r1, r3
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	4b07      	ldr	r3, [pc, #28]	; (8005938 <can1_ams_cell_voltages_v8s5_decode+0x48>)
 800591a:	f7fa fca9 	bl	8000270 <__adddf3>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	ec43 2b17 	vmov	d7, r2, r3
}
 8005926:	eeb0 0a47 	vmov.f32	s0, s14
 800592a:	eef0 0a67 	vmov.f32	s1, s15
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	f3af 8000 	nop.w
 8005938:	40040000 	.word	0x40040000
 800593c:	fcce1c58 	.word	0xfcce1c58
 8005940:	3f800e6a 	.word	0x3f800e6a
 8005944:	00000000 	.word	0x00000000

08005948 <can1_ams_cell_voltages_v2s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s6_encode(double value)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	4b10      	ldr	r3, [pc, #64]	; (8005998 <can1_ams_cell_voltages_v2s6_encode+0x50>)
 8005958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800595c:	f7fa fc86 	bl	800026c <__aeabi_dsub>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4610      	mov	r0, r2
 8005966:	4619      	mov	r1, r3
 8005968:	a309      	add	r3, pc, #36	; (adr r3, 8005990 <can1_ams_cell_voltages_v2s6_encode+0x48>)
 800596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596e:	f7fa ff5f 	bl	8000830 <__aeabi_ddiv>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	f7fb f907 	bl	8000b8c <__aeabi_d2uiz>
 800597e:	4603      	mov	r3, r0
 8005980:	b2db      	uxtb	r3, r3
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	f3af 8000 	nop.w
 8005990:	fcce1c58 	.word	0xfcce1c58
 8005994:	3f800e6a 	.word	0x3f800e6a
 8005998:	40040000 	.word	0x40040000
 800599c:	00000000 	.word	0x00000000

080059a0 <can1_ams_cell_voltages_v2s6_decode>:

double can1_ams_cell_voltages_v2s6_decode(uint8_t value)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fa fd9b 	bl	80004e8 <__aeabi_ui2d>
 80059b2:	a30e      	add	r3, pc, #56	; (adr r3, 80059ec <can1_ams_cell_voltages_v2s6_decode+0x4c>)
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	f7fa fe10 	bl	80005dc <__aeabi_dmul>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4610      	mov	r0, r2
 80059c2:	4619      	mov	r1, r3
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <can1_ams_cell_voltages_v2s6_decode+0x48>)
 80059ca:	f7fa fc51 	bl	8000270 <__adddf3>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80059d6:	eeb0 0a47 	vmov.f32	s0, s14
 80059da:	eef0 0a67 	vmov.f32	s1, s15
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	f3af 8000 	nop.w
 80059e8:	40040000 	.word	0x40040000
 80059ec:	fcce1c58 	.word	0xfcce1c58
 80059f0:	3f800e6a 	.word	0x3f800e6a
 80059f4:	00000000 	.word	0x00000000

080059f8 <can1_ams_cell_voltages_v8s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s6_encode(double value)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <can1_ams_cell_voltages_v8s6_encode+0x50>)
 8005a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a0c:	f7fa fc2e 	bl	800026c <__aeabi_dsub>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4610      	mov	r0, r2
 8005a16:	4619      	mov	r1, r3
 8005a18:	a309      	add	r3, pc, #36	; (adr r3, 8005a40 <can1_ams_cell_voltages_v8s6_encode+0x48>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f7fa ff07 	bl	8000830 <__aeabi_ddiv>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4610      	mov	r0, r2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f7fb f8af 	bl	8000b8c <__aeabi_d2uiz>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	b2db      	uxtb	r3, r3
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	f3af 8000 	nop.w
 8005a40:	fcce1c58 	.word	0xfcce1c58
 8005a44:	3f800e6a 	.word	0x3f800e6a
 8005a48:	40040000 	.word	0x40040000
 8005a4c:	00000000 	.word	0x00000000

08005a50 <can1_ams_cell_voltages_v8s6_decode>:

double can1_ams_cell_voltages_v8s6_decode(uint8_t value)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fa fd43 	bl	80004e8 <__aeabi_ui2d>
 8005a62:	a30e      	add	r3, pc, #56	; (adr r3, 8005a9c <can1_ams_cell_voltages_v8s6_decode+0x4c>)
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	f7fa fdb8 	bl	80005dc <__aeabi_dmul>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4610      	mov	r0, r2
 8005a72:	4619      	mov	r1, r3
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	4b07      	ldr	r3, [pc, #28]	; (8005a98 <can1_ams_cell_voltages_v8s6_decode+0x48>)
 8005a7a:	f7fa fbf9 	bl	8000270 <__adddf3>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	ec43 2b17 	vmov	d7, r2, r3
}
 8005a86:	eeb0 0a47 	vmov.f32	s0, s14
 8005a8a:	eef0 0a67 	vmov.f32	s1, s15
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	f3af 8000 	nop.w
 8005a98:	40040000 	.word	0x40040000
 8005a9c:	fcce1c58 	.word	0xfcce1c58
 8005aa0:	3f800e6a 	.word	0x3f800e6a
 8005aa4:	00000000 	.word	0x00000000

08005aa8 <can1_ams_cell_voltages_v2s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s7_encode(double value)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <can1_ams_cell_voltages_v2s7_encode+0x50>)
 8005ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005abc:	f7fa fbd6 	bl	800026c <__aeabi_dsub>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	a309      	add	r3, pc, #36	; (adr r3, 8005af0 <can1_ams_cell_voltages_v2s7_encode+0x48>)
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f7fa feaf 	bl	8000830 <__aeabi_ddiv>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	4619      	mov	r1, r3
 8005ada:	f7fb f857 	bl	8000b8c <__aeabi_d2uiz>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	b2db      	uxtb	r3, r3
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	f3af 8000 	nop.w
 8005af0:	fcce1c58 	.word	0xfcce1c58
 8005af4:	3f800e6a 	.word	0x3f800e6a
 8005af8:	40040000 	.word	0x40040000
 8005afc:	00000000 	.word	0x00000000

08005b00 <can1_ams_cell_voltages_v2s7_decode>:

double can1_ams_cell_voltages_v2s7_decode(uint8_t value)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fa fceb 	bl	80004e8 <__aeabi_ui2d>
 8005b12:	a30e      	add	r3, pc, #56	; (adr r3, 8005b4c <can1_ams_cell_voltages_v2s7_decode+0x4c>)
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f7fa fd60 	bl	80005dc <__aeabi_dmul>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4610      	mov	r0, r2
 8005b22:	4619      	mov	r1, r3
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <can1_ams_cell_voltages_v2s7_decode+0x48>)
 8005b2a:	f7fa fba1 	bl	8000270 <__adddf3>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	ec43 2b17 	vmov	d7, r2, r3
}
 8005b36:	eeb0 0a47 	vmov.f32	s0, s14
 8005b3a:	eef0 0a67 	vmov.f32	s1, s15
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	f3af 8000 	nop.w
 8005b48:	40040000 	.word	0x40040000
 8005b4c:	fcce1c58 	.word	0xfcce1c58
 8005b50:	3f800e6a 	.word	0x3f800e6a
 8005b54:	00000000 	.word	0x00000000

08005b58 <can1_ams_cell_voltages_v8s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s7_encode(double value)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	4b10      	ldr	r3, [pc, #64]	; (8005ba8 <can1_ams_cell_voltages_v8s7_encode+0x50>)
 8005b68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b6c:	f7fa fb7e 	bl	800026c <__aeabi_dsub>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4610      	mov	r0, r2
 8005b76:	4619      	mov	r1, r3
 8005b78:	a309      	add	r3, pc, #36	; (adr r3, 8005ba0 <can1_ams_cell_voltages_v8s7_encode+0x48>)
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	f7fa fe57 	bl	8000830 <__aeabi_ddiv>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4610      	mov	r0, r2
 8005b88:	4619      	mov	r1, r3
 8005b8a:	f7fa ffff 	bl	8000b8c <__aeabi_d2uiz>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	b2db      	uxtb	r3, r3
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	f3af 8000 	nop.w
 8005ba0:	fcce1c58 	.word	0xfcce1c58
 8005ba4:	3f800e6a 	.word	0x3f800e6a
 8005ba8:	40040000 	.word	0x40040000
 8005bac:	00000000 	.word	0x00000000

08005bb0 <can1_ams_cell_voltages_v8s7_decode>:

double can1_ams_cell_voltages_v8s7_decode(uint8_t value)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005bba:	79fb      	ldrb	r3, [r7, #7]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fa fc93 	bl	80004e8 <__aeabi_ui2d>
 8005bc2:	a30e      	add	r3, pc, #56	; (adr r3, 8005bfc <can1_ams_cell_voltages_v8s7_decode+0x4c>)
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	f7fa fd08 	bl	80005dc <__aeabi_dmul>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	4b07      	ldr	r3, [pc, #28]	; (8005bf8 <can1_ams_cell_voltages_v8s7_decode+0x48>)
 8005bda:	f7fa fb49 	bl	8000270 <__adddf3>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	ec43 2b17 	vmov	d7, r2, r3
}
 8005be6:	eeb0 0a47 	vmov.f32	s0, s14
 8005bea:	eef0 0a67 	vmov.f32	s1, s15
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	f3af 8000 	nop.w
 8005bf8:	40040000 	.word	0x40040000
 8005bfc:	fcce1c58 	.word	0xfcce1c58
 8005c00:	3f800e6a 	.word	0x3f800e6a
 8005c04:	00000000 	.word	0x00000000

08005c08 <can1_ams_cell_voltages_v2s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s8_encode(double value)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <can1_ams_cell_voltages_v2s8_encode+0x50>)
 8005c18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c1c:	f7fa fb26 	bl	800026c <__aeabi_dsub>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	4610      	mov	r0, r2
 8005c26:	4619      	mov	r1, r3
 8005c28:	a309      	add	r3, pc, #36	; (adr r3, 8005c50 <can1_ams_cell_voltages_v2s8_encode+0x48>)
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	f7fa fdff 	bl	8000830 <__aeabi_ddiv>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4610      	mov	r0, r2
 8005c38:	4619      	mov	r1, r3
 8005c3a:	f7fa ffa7 	bl	8000b8c <__aeabi_d2uiz>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	b2db      	uxtb	r3, r3
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	f3af 8000 	nop.w
 8005c50:	fcce1c58 	.word	0xfcce1c58
 8005c54:	3f800e6a 	.word	0x3f800e6a
 8005c58:	40040000 	.word	0x40040000
 8005c5c:	00000000 	.word	0x00000000

08005c60 <can1_ams_cell_voltages_v2s8_decode>:

double can1_ams_cell_voltages_v2s8_decode(uint8_t value)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fa fc3b 	bl	80004e8 <__aeabi_ui2d>
 8005c72:	a30e      	add	r3, pc, #56	; (adr r3, 8005cac <can1_ams_cell_voltages_v2s8_decode+0x4c>)
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f7fa fcb0 	bl	80005dc <__aeabi_dmul>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4610      	mov	r0, r2
 8005c82:	4619      	mov	r1, r3
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <can1_ams_cell_voltages_v2s8_decode+0x48>)
 8005c8a:	f7fa faf1 	bl	8000270 <__adddf3>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	ec43 2b17 	vmov	d7, r2, r3
}
 8005c96:	eeb0 0a47 	vmov.f32	s0, s14
 8005c9a:	eef0 0a67 	vmov.f32	s1, s15
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	f3af 8000 	nop.w
 8005ca8:	40040000 	.word	0x40040000
 8005cac:	fcce1c58 	.word	0xfcce1c58
 8005cb0:	3f800e6a 	.word	0x3f800e6a
 8005cb4:	00000000 	.word	0x00000000

08005cb8 <can1_ams_cell_voltages_v8s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s8_encode(double value)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <can1_ams_cell_voltages_v8s8_encode+0x50>)
 8005cc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ccc:	f7fa face 	bl	800026c <__aeabi_dsub>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	a309      	add	r3, pc, #36	; (adr r3, 8005d00 <can1_ams_cell_voltages_v8s8_encode+0x48>)
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f7fa fda7 	bl	8000830 <__aeabi_ddiv>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	4619      	mov	r1, r3
 8005cea:	f7fa ff4f 	bl	8000b8c <__aeabi_d2uiz>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	b2db      	uxtb	r3, r3
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	f3af 8000 	nop.w
 8005d00:	fcce1c58 	.word	0xfcce1c58
 8005d04:	3f800e6a 	.word	0x3f800e6a
 8005d08:	40040000 	.word	0x40040000
 8005d0c:	00000000 	.word	0x00000000

08005d10 <can1_ams_cell_voltages_v8s8_decode>:

double can1_ams_cell_voltages_v8s8_decode(uint8_t value)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fa fbe3 	bl	80004e8 <__aeabi_ui2d>
 8005d22:	a30e      	add	r3, pc, #56	; (adr r3, 8005d5c <can1_ams_cell_voltages_v8s8_decode+0x4c>)
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f7fa fc58 	bl	80005dc <__aeabi_dmul>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4610      	mov	r0, r2
 8005d32:	4619      	mov	r1, r3
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <can1_ams_cell_voltages_v8s8_decode+0x48>)
 8005d3a:	f7fa fa99 	bl	8000270 <__adddf3>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	ec43 2b17 	vmov	d7, r2, r3
}
 8005d46:	eeb0 0a47 	vmov.f32	s0, s14
 8005d4a:	eef0 0a67 	vmov.f32	s1, s15
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	f3af 8000 	nop.w
 8005d58:	40040000 	.word	0x40040000
 8005d5c:	fcce1c58 	.word	0xfcce1c58
 8005d60:	3f800e6a 	.word	0x3f800e6a
 8005d64:	00000000 	.word	0x00000000

08005d68 <can1_ams_cell_voltages_v2s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s9_encode(double value)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005d72:	f04f 0200 	mov.w	r2, #0
 8005d76:	4b10      	ldr	r3, [pc, #64]	; (8005db8 <can1_ams_cell_voltages_v2s9_encode+0x50>)
 8005d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d7c:	f7fa fa76 	bl	800026c <__aeabi_dsub>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4610      	mov	r0, r2
 8005d86:	4619      	mov	r1, r3
 8005d88:	a309      	add	r3, pc, #36	; (adr r3, 8005db0 <can1_ams_cell_voltages_v2s9_encode+0x48>)
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	f7fa fd4f 	bl	8000830 <__aeabi_ddiv>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4610      	mov	r0, r2
 8005d98:	4619      	mov	r1, r3
 8005d9a:	f7fa fef7 	bl	8000b8c <__aeabi_d2uiz>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	b2db      	uxtb	r3, r3
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	f3af 8000 	nop.w
 8005db0:	fcce1c58 	.word	0xfcce1c58
 8005db4:	3f800e6a 	.word	0x3f800e6a
 8005db8:	40040000 	.word	0x40040000
 8005dbc:	00000000 	.word	0x00000000

08005dc0 <can1_ams_cell_voltages_v2s9_decode>:

double can1_ams_cell_voltages_v2s9_decode(uint8_t value)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fa fb8b 	bl	80004e8 <__aeabi_ui2d>
 8005dd2:	a30e      	add	r3, pc, #56	; (adr r3, 8005e0c <can1_ams_cell_voltages_v2s9_decode+0x4c>)
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	f7fa fc00 	bl	80005dc <__aeabi_dmul>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4610      	mov	r0, r2
 8005de2:	4619      	mov	r1, r3
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <can1_ams_cell_voltages_v2s9_decode+0x48>)
 8005dea:	f7fa fa41 	bl	8000270 <__adddf3>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	ec43 2b17 	vmov	d7, r2, r3
}
 8005df6:	eeb0 0a47 	vmov.f32	s0, s14
 8005dfa:	eef0 0a67 	vmov.f32	s1, s15
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	f3af 8000 	nop.w
 8005e08:	40040000 	.word	0x40040000
 8005e0c:	fcce1c58 	.word	0xfcce1c58
 8005e10:	3f800e6a 	.word	0x3f800e6a
 8005e14:	00000000 	.word	0x00000000

08005e18 <can1_ams_cell_voltages_v8s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s9_encode(double value)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	4b10      	ldr	r3, [pc, #64]	; (8005e68 <can1_ams_cell_voltages_v8s9_encode+0x50>)
 8005e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e2c:	f7fa fa1e 	bl	800026c <__aeabi_dsub>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4610      	mov	r0, r2
 8005e36:	4619      	mov	r1, r3
 8005e38:	a309      	add	r3, pc, #36	; (adr r3, 8005e60 <can1_ams_cell_voltages_v8s9_encode+0x48>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f7fa fcf7 	bl	8000830 <__aeabi_ddiv>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4610      	mov	r0, r2
 8005e48:	4619      	mov	r1, r3
 8005e4a:	f7fa fe9f 	bl	8000b8c <__aeabi_d2uiz>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	b2db      	uxtb	r3, r3
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	f3af 8000 	nop.w
 8005e60:	fcce1c58 	.word	0xfcce1c58
 8005e64:	3f800e6a 	.word	0x3f800e6a
 8005e68:	40040000 	.word	0x40040000
 8005e6c:	00000000 	.word	0x00000000

08005e70 <can1_ams_cell_voltages_v8s9_decode>:

double can1_ams_cell_voltages_v8s9_decode(uint8_t value)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	4603      	mov	r3, r0
 8005e78:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fa fb33 	bl	80004e8 <__aeabi_ui2d>
 8005e82:	a30e      	add	r3, pc, #56	; (adr r3, 8005ebc <can1_ams_cell_voltages_v8s9_decode+0x4c>)
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f7fa fba8 	bl	80005dc <__aeabi_dmul>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4610      	mov	r0, r2
 8005e92:	4619      	mov	r1, r3
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <can1_ams_cell_voltages_v8s9_decode+0x48>)
 8005e9a:	f7fa f9e9 	bl	8000270 <__adddf3>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	ec43 2b17 	vmov	d7, r2, r3
}
 8005ea6:	eeb0 0a47 	vmov.f32	s0, s14
 8005eaa:	eef0 0a67 	vmov.f32	s1, s15
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	f3af 8000 	nop.w
 8005eb8:	40040000 	.word	0x40040000
 8005ebc:	fcce1c58 	.word	0xfcce1c58
 8005ec0:	3f800e6a 	.word	0x3f800e6a
 8005ec4:	00000000 	.word	0x00000000

08005ec8 <can1_ams_cell_voltages_v2s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s10_encode(double value)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <can1_ams_cell_voltages_v2s10_encode+0x50>)
 8005ed8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005edc:	f7fa f9c6 	bl	800026c <__aeabi_dsub>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	a309      	add	r3, pc, #36	; (adr r3, 8005f10 <can1_ams_cell_voltages_v2s10_encode+0x48>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa fc9f 	bl	8000830 <__aeabi_ddiv>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	4619      	mov	r1, r3
 8005efa:	f7fa fe47 	bl	8000b8c <__aeabi_d2uiz>
 8005efe:	4603      	mov	r3, r0
 8005f00:	b2db      	uxtb	r3, r3
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	f3af 8000 	nop.w
 8005f10:	fcce1c58 	.word	0xfcce1c58
 8005f14:	3f800e6a 	.word	0x3f800e6a
 8005f18:	40040000 	.word	0x40040000
 8005f1c:	00000000 	.word	0x00000000

08005f20 <can1_ams_cell_voltages_v2s10_decode>:

double can1_ams_cell_voltages_v2s10_decode(uint8_t value)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fa fadb 	bl	80004e8 <__aeabi_ui2d>
 8005f32:	a30e      	add	r3, pc, #56	; (adr r3, 8005f6c <can1_ams_cell_voltages_v2s10_decode+0x4c>)
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	f7fa fb50 	bl	80005dc <__aeabi_dmul>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4610      	mov	r0, r2
 8005f42:	4619      	mov	r1, r3
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <can1_ams_cell_voltages_v2s10_decode+0x48>)
 8005f4a:	f7fa f991 	bl	8000270 <__adddf3>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	ec43 2b17 	vmov	d7, r2, r3
}
 8005f56:	eeb0 0a47 	vmov.f32	s0, s14
 8005f5a:	eef0 0a67 	vmov.f32	s1, s15
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	f3af 8000 	nop.w
 8005f68:	40040000 	.word	0x40040000
 8005f6c:	fcce1c58 	.word	0xfcce1c58
 8005f70:	3f800e6a 	.word	0x3f800e6a
 8005f74:	00000000 	.word	0x00000000

08005f78 <can1_ams_cell_voltages_v8s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s10_encode(double value)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	4b10      	ldr	r3, [pc, #64]	; (8005fc8 <can1_ams_cell_voltages_v8s10_encode+0x50>)
 8005f88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f8c:	f7fa f96e 	bl	800026c <__aeabi_dsub>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4610      	mov	r0, r2
 8005f96:	4619      	mov	r1, r3
 8005f98:	a309      	add	r3, pc, #36	; (adr r3, 8005fc0 <can1_ams_cell_voltages_v8s10_encode+0x48>)
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f7fa fc47 	bl	8000830 <__aeabi_ddiv>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	4619      	mov	r1, r3
 8005faa:	f7fa fdef 	bl	8000b8c <__aeabi_d2uiz>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	b2db      	uxtb	r3, r3
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	f3af 8000 	nop.w
 8005fc0:	fcce1c58 	.word	0xfcce1c58
 8005fc4:	3f800e6a 	.word	0x3f800e6a
 8005fc8:	40040000 	.word	0x40040000
 8005fcc:	00000000 	.word	0x00000000

08005fd0 <can1_ams_cell_voltages_v8s10_decode>:

double can1_ams_cell_voltages_v8s10_decode(uint8_t value)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fa fa83 	bl	80004e8 <__aeabi_ui2d>
 8005fe2:	a30e      	add	r3, pc, #56	; (adr r3, 800601c <can1_ams_cell_voltages_v8s10_decode+0x4c>)
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	f7fa faf8 	bl	80005dc <__aeabi_dmul>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	4b07      	ldr	r3, [pc, #28]	; (8006018 <can1_ams_cell_voltages_v8s10_decode+0x48>)
 8005ffa:	f7fa f939 	bl	8000270 <__adddf3>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	ec43 2b17 	vmov	d7, r2, r3
}
 8006006:	eeb0 0a47 	vmov.f32	s0, s14
 800600a:	eef0 0a67 	vmov.f32	s1, s15
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	f3af 8000 	nop.w
 8006018:	40040000 	.word	0x40040000
 800601c:	fcce1c58 	.word	0xfcce1c58
 8006020:	3f800e6a 	.word	0x3f800e6a
 8006024:	00000000 	.word	0x00000000

08006028 <can1_ams_cell_voltages_v2s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s11_encode(double value)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	4b10      	ldr	r3, [pc, #64]	; (8006078 <can1_ams_cell_voltages_v2s11_encode+0x50>)
 8006038:	e9d7 0100 	ldrd	r0, r1, [r7]
 800603c:	f7fa f916 	bl	800026c <__aeabi_dsub>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4610      	mov	r0, r2
 8006046:	4619      	mov	r1, r3
 8006048:	a309      	add	r3, pc, #36	; (adr r3, 8006070 <can1_ams_cell_voltages_v2s11_encode+0x48>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa fbef 	bl	8000830 <__aeabi_ddiv>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4610      	mov	r0, r2
 8006058:	4619      	mov	r1, r3
 800605a:	f7fa fd97 	bl	8000b8c <__aeabi_d2uiz>
 800605e:	4603      	mov	r3, r0
 8006060:	b2db      	uxtb	r3, r3
}
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	f3af 8000 	nop.w
 8006070:	fcce1c58 	.word	0xfcce1c58
 8006074:	3f800e6a 	.word	0x3f800e6a
 8006078:	40040000 	.word	0x40040000
 800607c:	00000000 	.word	0x00000000

08006080 <can1_ams_cell_voltages_v2s11_decode>:

double can1_ams_cell_voltages_v2s11_decode(uint8_t value)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	4618      	mov	r0, r3
 800608e:	f7fa fa2b 	bl	80004e8 <__aeabi_ui2d>
 8006092:	a30e      	add	r3, pc, #56	; (adr r3, 80060cc <can1_ams_cell_voltages_v2s11_decode+0x4c>)
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	f7fa faa0 	bl	80005dc <__aeabi_dmul>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4610      	mov	r0, r2
 80060a2:	4619      	mov	r1, r3
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <can1_ams_cell_voltages_v2s11_decode+0x48>)
 80060aa:	f7fa f8e1 	bl	8000270 <__adddf3>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80060b6:	eeb0 0a47 	vmov.f32	s0, s14
 80060ba:	eef0 0a67 	vmov.f32	s1, s15
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	f3af 8000 	nop.w
 80060c8:	40040000 	.word	0x40040000
 80060cc:	fcce1c58 	.word	0xfcce1c58
 80060d0:	3f800e6a 	.word	0x3f800e6a
 80060d4:	00000000 	.word	0x00000000

080060d8 <can1_ams_cell_voltages_v8s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s11_encode(double value)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80060e2:	f04f 0200 	mov.w	r2, #0
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <can1_ams_cell_voltages_v8s11_encode+0x50>)
 80060e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060ec:	f7fa f8be 	bl	800026c <__aeabi_dsub>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4610      	mov	r0, r2
 80060f6:	4619      	mov	r1, r3
 80060f8:	a309      	add	r3, pc, #36	; (adr r3, 8006120 <can1_ams_cell_voltages_v8s11_encode+0x48>)
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	f7fa fb97 	bl	8000830 <__aeabi_ddiv>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4610      	mov	r0, r2
 8006108:	4619      	mov	r1, r3
 800610a:	f7fa fd3f 	bl	8000b8c <__aeabi_d2uiz>
 800610e:	4603      	mov	r3, r0
 8006110:	b2db      	uxtb	r3, r3
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	f3af 8000 	nop.w
 8006120:	fcce1c58 	.word	0xfcce1c58
 8006124:	3f800e6a 	.word	0x3f800e6a
 8006128:	40040000 	.word	0x40040000
 800612c:	00000000 	.word	0x00000000

08006130 <can1_ams_cell_voltages_v8s11_decode>:

double can1_ams_cell_voltages_v8s11_decode(uint8_t value)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	4603      	mov	r3, r0
 8006138:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	4618      	mov	r0, r3
 800613e:	f7fa f9d3 	bl	80004e8 <__aeabi_ui2d>
 8006142:	a30e      	add	r3, pc, #56	; (adr r3, 800617c <can1_ams_cell_voltages_v8s11_decode+0x4c>)
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f7fa fa48 	bl	80005dc <__aeabi_dmul>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4610      	mov	r0, r2
 8006152:	4619      	mov	r1, r3
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	4b07      	ldr	r3, [pc, #28]	; (8006178 <can1_ams_cell_voltages_v8s11_decode+0x48>)
 800615a:	f7fa f889 	bl	8000270 <__adddf3>
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	ec43 2b17 	vmov	d7, r2, r3
}
 8006166:	eeb0 0a47 	vmov.f32	s0, s14
 800616a:	eef0 0a67 	vmov.f32	s1, s15
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	f3af 8000 	nop.w
 8006178:	40040000 	.word	0x40040000
 800617c:	fcce1c58 	.word	0xfcce1c58
 8006180:	3f800e6a 	.word	0x3f800e6a
 8006184:	00000000 	.word	0x00000000

08006188 <can1_ams_cell_voltages_v2s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s12_encode(double value)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006192:	f04f 0200 	mov.w	r2, #0
 8006196:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <can1_ams_cell_voltages_v2s12_encode+0x50>)
 8006198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800619c:	f7fa f866 	bl	800026c <__aeabi_dsub>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4610      	mov	r0, r2
 80061a6:	4619      	mov	r1, r3
 80061a8:	a309      	add	r3, pc, #36	; (adr r3, 80061d0 <can1_ams_cell_voltages_v2s12_encode+0x48>)
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	f7fa fb3f 	bl	8000830 <__aeabi_ddiv>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4610      	mov	r0, r2
 80061b8:	4619      	mov	r1, r3
 80061ba:	f7fa fce7 	bl	8000b8c <__aeabi_d2uiz>
 80061be:	4603      	mov	r3, r0
 80061c0:	b2db      	uxtb	r3, r3
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	f3af 8000 	nop.w
 80061d0:	fcce1c58 	.word	0xfcce1c58
 80061d4:	3f800e6a 	.word	0x3f800e6a
 80061d8:	40040000 	.word	0x40040000
 80061dc:	00000000 	.word	0x00000000

080061e0 <can1_ams_cell_voltages_v2s12_decode>:

double can1_ams_cell_voltages_v2s12_decode(uint8_t value)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fa f97b 	bl	80004e8 <__aeabi_ui2d>
 80061f2:	a30e      	add	r3, pc, #56	; (adr r3, 800622c <can1_ams_cell_voltages_v2s12_decode+0x4c>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f7fa f9f0 	bl	80005dc <__aeabi_dmul>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4610      	mov	r0, r2
 8006202:	4619      	mov	r1, r3
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	4b07      	ldr	r3, [pc, #28]	; (8006228 <can1_ams_cell_voltages_v2s12_decode+0x48>)
 800620a:	f7fa f831 	bl	8000270 <__adddf3>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	ec43 2b17 	vmov	d7, r2, r3
}
 8006216:	eeb0 0a47 	vmov.f32	s0, s14
 800621a:	eef0 0a67 	vmov.f32	s1, s15
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	f3af 8000 	nop.w
 8006228:	40040000 	.word	0x40040000
 800622c:	fcce1c58 	.word	0xfcce1c58
 8006230:	3f800e6a 	.word	0x3f800e6a
 8006234:	00000000 	.word	0x00000000

08006238 <can1_ams_cell_voltages_v8s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s12_encode(double value)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	4b10      	ldr	r3, [pc, #64]	; (8006288 <can1_ams_cell_voltages_v8s12_encode+0x50>)
 8006248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800624c:	f7fa f80e 	bl	800026c <__aeabi_dsub>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4610      	mov	r0, r2
 8006256:	4619      	mov	r1, r3
 8006258:	a309      	add	r3, pc, #36	; (adr r3, 8006280 <can1_ams_cell_voltages_v8s12_encode+0x48>)
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f7fa fae7 	bl	8000830 <__aeabi_ddiv>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4610      	mov	r0, r2
 8006268:	4619      	mov	r1, r3
 800626a:	f7fa fc8f 	bl	8000b8c <__aeabi_d2uiz>
 800626e:	4603      	mov	r3, r0
 8006270:	b2db      	uxtb	r3, r3
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	f3af 8000 	nop.w
 8006280:	fcce1c58 	.word	0xfcce1c58
 8006284:	3f800e6a 	.word	0x3f800e6a
 8006288:	40040000 	.word	0x40040000
 800628c:	00000000 	.word	0x00000000

08006290 <can1_ams_cell_voltages_v8s12_decode>:

double can1_ams_cell_voltages_v8s12_decode(uint8_t value)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	4618      	mov	r0, r3
 800629e:	f7fa f923 	bl	80004e8 <__aeabi_ui2d>
 80062a2:	a30e      	add	r3, pc, #56	; (adr r3, 80062dc <can1_ams_cell_voltages_v8s12_decode+0x4c>)
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f7fa f998 	bl	80005dc <__aeabi_dmul>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4610      	mov	r0, r2
 80062b2:	4619      	mov	r1, r3
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	4b07      	ldr	r3, [pc, #28]	; (80062d8 <can1_ams_cell_voltages_v8s12_decode+0x48>)
 80062ba:	f7f9 ffd9 	bl	8000270 <__adddf3>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80062c6:	eeb0 0a47 	vmov.f32	s0, s14
 80062ca:	eef0 0a67 	vmov.f32	s1, s15
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	f3af 8000 	nop.w
 80062d8:	40040000 	.word	0x40040000
 80062dc:	fcce1c58 	.word	0xfcce1c58
 80062e0:	3f800e6a 	.word	0x3f800e6a
 80062e4:	00000000 	.word	0x00000000

080062e8 <can1_ams_cell_voltages_v3s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s1_encode(double value)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	4b10      	ldr	r3, [pc, #64]	; (8006338 <can1_ams_cell_voltages_v3s1_encode+0x50>)
 80062f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062fc:	f7f9 ffb6 	bl	800026c <__aeabi_dsub>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4610      	mov	r0, r2
 8006306:	4619      	mov	r1, r3
 8006308:	a309      	add	r3, pc, #36	; (adr r3, 8006330 <can1_ams_cell_voltages_v3s1_encode+0x48>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	f7fa fa8f 	bl	8000830 <__aeabi_ddiv>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4610      	mov	r0, r2
 8006318:	4619      	mov	r1, r3
 800631a:	f7fa fc37 	bl	8000b8c <__aeabi_d2uiz>
 800631e:	4603      	mov	r3, r0
 8006320:	b2db      	uxtb	r3, r3
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	f3af 8000 	nop.w
 8006330:	fcce1c58 	.word	0xfcce1c58
 8006334:	3f800e6a 	.word	0x3f800e6a
 8006338:	40040000 	.word	0x40040000
 800633c:	00000000 	.word	0x00000000

08006340 <can1_ams_cell_voltages_v3s1_decode>:

double can1_ams_cell_voltages_v3s1_decode(uint8_t value)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	4603      	mov	r3, r0
 8006348:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	4618      	mov	r0, r3
 800634e:	f7fa f8cb 	bl	80004e8 <__aeabi_ui2d>
 8006352:	a30e      	add	r3, pc, #56	; (adr r3, 800638c <can1_ams_cell_voltages_v3s1_decode+0x4c>)
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f7fa f940 	bl	80005dc <__aeabi_dmul>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4610      	mov	r0, r2
 8006362:	4619      	mov	r1, r3
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	4b07      	ldr	r3, [pc, #28]	; (8006388 <can1_ams_cell_voltages_v3s1_decode+0x48>)
 800636a:	f7f9 ff81 	bl	8000270 <__adddf3>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	ec43 2b17 	vmov	d7, r2, r3
}
 8006376:	eeb0 0a47 	vmov.f32	s0, s14
 800637a:	eef0 0a67 	vmov.f32	s1, s15
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	f3af 8000 	nop.w
 8006388:	40040000 	.word	0x40040000
 800638c:	fcce1c58 	.word	0xfcce1c58
 8006390:	3f800e6a 	.word	0x3f800e6a
 8006394:	00000000 	.word	0x00000000

08006398 <can1_ams_cell_voltages_v9s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s1_encode(double value)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80063a2:	f04f 0200 	mov.w	r2, #0
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <can1_ams_cell_voltages_v9s1_encode+0x50>)
 80063a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063ac:	f7f9 ff5e 	bl	800026c <__aeabi_dsub>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4610      	mov	r0, r2
 80063b6:	4619      	mov	r1, r3
 80063b8:	a309      	add	r3, pc, #36	; (adr r3, 80063e0 <can1_ams_cell_voltages_v9s1_encode+0x48>)
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f7fa fa37 	bl	8000830 <__aeabi_ddiv>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4610      	mov	r0, r2
 80063c8:	4619      	mov	r1, r3
 80063ca:	f7fa fbdf 	bl	8000b8c <__aeabi_d2uiz>
 80063ce:	4603      	mov	r3, r0
 80063d0:	b2db      	uxtb	r3, r3
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	f3af 8000 	nop.w
 80063e0:	fcce1c58 	.word	0xfcce1c58
 80063e4:	3f800e6a 	.word	0x3f800e6a
 80063e8:	40040000 	.word	0x40040000
 80063ec:	00000000 	.word	0x00000000

080063f0 <can1_ams_cell_voltages_v9s1_decode>:

double can1_ams_cell_voltages_v9s1_decode(uint8_t value)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	4603      	mov	r3, r0
 80063f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fa f873 	bl	80004e8 <__aeabi_ui2d>
 8006402:	a30e      	add	r3, pc, #56	; (adr r3, 800643c <can1_ams_cell_voltages_v9s1_decode+0x4c>)
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f7fa f8e8 	bl	80005dc <__aeabi_dmul>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4610      	mov	r0, r2
 8006412:	4619      	mov	r1, r3
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	4b07      	ldr	r3, [pc, #28]	; (8006438 <can1_ams_cell_voltages_v9s1_decode+0x48>)
 800641a:	f7f9 ff29 	bl	8000270 <__adddf3>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	ec43 2b17 	vmov	d7, r2, r3
}
 8006426:	eeb0 0a47 	vmov.f32	s0, s14
 800642a:	eef0 0a67 	vmov.f32	s1, s15
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	f3af 8000 	nop.w
 8006438:	40040000 	.word	0x40040000
 800643c:	fcce1c58 	.word	0xfcce1c58
 8006440:	3f800e6a 	.word	0x3f800e6a
 8006444:	00000000 	.word	0x00000000

08006448 <can1_ams_cell_voltages_v3s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s2_encode(double value)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	4b10      	ldr	r3, [pc, #64]	; (8006498 <can1_ams_cell_voltages_v3s2_encode+0x50>)
 8006458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800645c:	f7f9 ff06 	bl	800026c <__aeabi_dsub>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4610      	mov	r0, r2
 8006466:	4619      	mov	r1, r3
 8006468:	a309      	add	r3, pc, #36	; (adr r3, 8006490 <can1_ams_cell_voltages_v3s2_encode+0x48>)
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7fa f9df 	bl	8000830 <__aeabi_ddiv>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4610      	mov	r0, r2
 8006478:	4619      	mov	r1, r3
 800647a:	f7fa fb87 	bl	8000b8c <__aeabi_d2uiz>
 800647e:	4603      	mov	r3, r0
 8006480:	b2db      	uxtb	r3, r3
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	f3af 8000 	nop.w
 8006490:	fcce1c58 	.word	0xfcce1c58
 8006494:	3f800e6a 	.word	0x3f800e6a
 8006498:	40040000 	.word	0x40040000
 800649c:	00000000 	.word	0x00000000

080064a0 <can1_ams_cell_voltages_v3s2_decode>:

double can1_ams_cell_voltages_v3s2_decode(uint8_t value)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	4603      	mov	r3, r0
 80064a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80064aa:	79fb      	ldrb	r3, [r7, #7]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fa f81b 	bl	80004e8 <__aeabi_ui2d>
 80064b2:	a30e      	add	r3, pc, #56	; (adr r3, 80064ec <can1_ams_cell_voltages_v3s2_decode+0x4c>)
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f7fa f890 	bl	80005dc <__aeabi_dmul>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4610      	mov	r0, r2
 80064c2:	4619      	mov	r1, r3
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	4b07      	ldr	r3, [pc, #28]	; (80064e8 <can1_ams_cell_voltages_v3s2_decode+0x48>)
 80064ca:	f7f9 fed1 	bl	8000270 <__adddf3>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80064d6:	eeb0 0a47 	vmov.f32	s0, s14
 80064da:	eef0 0a67 	vmov.f32	s1, s15
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	f3af 8000 	nop.w
 80064e8:	40040000 	.word	0x40040000
 80064ec:	fcce1c58 	.word	0xfcce1c58
 80064f0:	3f800e6a 	.word	0x3f800e6a
 80064f4:	00000000 	.word	0x00000000

080064f8 <can1_ams_cell_voltages_v9s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s2_encode(double value)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	4b10      	ldr	r3, [pc, #64]	; (8006548 <can1_ams_cell_voltages_v9s2_encode+0x50>)
 8006508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800650c:	f7f9 feae 	bl	800026c <__aeabi_dsub>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4610      	mov	r0, r2
 8006516:	4619      	mov	r1, r3
 8006518:	a309      	add	r3, pc, #36	; (adr r3, 8006540 <can1_ams_cell_voltages_v9s2_encode+0x48>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	f7fa f987 	bl	8000830 <__aeabi_ddiv>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4610      	mov	r0, r2
 8006528:	4619      	mov	r1, r3
 800652a:	f7fa fb2f 	bl	8000b8c <__aeabi_d2uiz>
 800652e:	4603      	mov	r3, r0
 8006530:	b2db      	uxtb	r3, r3
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	f3af 8000 	nop.w
 8006540:	fcce1c58 	.word	0xfcce1c58
 8006544:	3f800e6a 	.word	0x3f800e6a
 8006548:	40040000 	.word	0x40040000
 800654c:	00000000 	.word	0x00000000

08006550 <can1_ams_cell_voltages_v9s2_decode>:

double can1_ams_cell_voltages_v9s2_decode(uint8_t value)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	4618      	mov	r0, r3
 800655e:	f7f9 ffc3 	bl	80004e8 <__aeabi_ui2d>
 8006562:	a30e      	add	r3, pc, #56	; (adr r3, 800659c <can1_ams_cell_voltages_v9s2_decode+0x4c>)
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f7fa f838 	bl	80005dc <__aeabi_dmul>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4610      	mov	r0, r2
 8006572:	4619      	mov	r1, r3
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	4b07      	ldr	r3, [pc, #28]	; (8006598 <can1_ams_cell_voltages_v9s2_decode+0x48>)
 800657a:	f7f9 fe79 	bl	8000270 <__adddf3>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	ec43 2b17 	vmov	d7, r2, r3
}
 8006586:	eeb0 0a47 	vmov.f32	s0, s14
 800658a:	eef0 0a67 	vmov.f32	s1, s15
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	f3af 8000 	nop.w
 8006598:	40040000 	.word	0x40040000
 800659c:	fcce1c58 	.word	0xfcce1c58
 80065a0:	3f800e6a 	.word	0x3f800e6a
 80065a4:	00000000 	.word	0x00000000

080065a8 <can1_ams_cell_voltages_v3s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s3_encode(double value)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <can1_ams_cell_voltages_v3s3_encode+0x50>)
 80065b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065bc:	f7f9 fe56 	bl	800026c <__aeabi_dsub>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4610      	mov	r0, r2
 80065c6:	4619      	mov	r1, r3
 80065c8:	a309      	add	r3, pc, #36	; (adr r3, 80065f0 <can1_ams_cell_voltages_v3s3_encode+0x48>)
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f7fa f92f 	bl	8000830 <__aeabi_ddiv>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4610      	mov	r0, r2
 80065d8:	4619      	mov	r1, r3
 80065da:	f7fa fad7 	bl	8000b8c <__aeabi_d2uiz>
 80065de:	4603      	mov	r3, r0
 80065e0:	b2db      	uxtb	r3, r3
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	f3af 8000 	nop.w
 80065f0:	fcce1c58 	.word	0xfcce1c58
 80065f4:	3f800e6a 	.word	0x3f800e6a
 80065f8:	40040000 	.word	0x40040000
 80065fc:	00000000 	.word	0x00000000

08006600 <can1_ams_cell_voltages_v3s3_decode>:

double can1_ams_cell_voltages_v3s3_decode(uint8_t value)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	4618      	mov	r0, r3
 800660e:	f7f9 ff6b 	bl	80004e8 <__aeabi_ui2d>
 8006612:	a30e      	add	r3, pc, #56	; (adr r3, 800664c <can1_ams_cell_voltages_v3s3_decode+0x4c>)
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	f7f9 ffe0 	bl	80005dc <__aeabi_dmul>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4610      	mov	r0, r2
 8006622:	4619      	mov	r1, r3
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	4b07      	ldr	r3, [pc, #28]	; (8006648 <can1_ams_cell_voltages_v3s3_decode+0x48>)
 800662a:	f7f9 fe21 	bl	8000270 <__adddf3>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	ec43 2b17 	vmov	d7, r2, r3
}
 8006636:	eeb0 0a47 	vmov.f32	s0, s14
 800663a:	eef0 0a67 	vmov.f32	s1, s15
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	f3af 8000 	nop.w
 8006648:	40040000 	.word	0x40040000
 800664c:	fcce1c58 	.word	0xfcce1c58
 8006650:	3f800e6a 	.word	0x3f800e6a
 8006654:	00000000 	.word	0x00000000

08006658 <can1_ams_cell_voltages_v9s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s3_encode(double value)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	4b10      	ldr	r3, [pc, #64]	; (80066a8 <can1_ams_cell_voltages_v9s3_encode+0x50>)
 8006668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800666c:	f7f9 fdfe 	bl	800026c <__aeabi_dsub>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4610      	mov	r0, r2
 8006676:	4619      	mov	r1, r3
 8006678:	a309      	add	r3, pc, #36	; (adr r3, 80066a0 <can1_ams_cell_voltages_v9s3_encode+0x48>)
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f7fa f8d7 	bl	8000830 <__aeabi_ddiv>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4610      	mov	r0, r2
 8006688:	4619      	mov	r1, r3
 800668a:	f7fa fa7f 	bl	8000b8c <__aeabi_d2uiz>
 800668e:	4603      	mov	r3, r0
 8006690:	b2db      	uxtb	r3, r3
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	f3af 8000 	nop.w
 80066a0:	fcce1c58 	.word	0xfcce1c58
 80066a4:	3f800e6a 	.word	0x3f800e6a
 80066a8:	40040000 	.word	0x40040000
 80066ac:	00000000 	.word	0x00000000

080066b0 <can1_ams_cell_voltages_v9s3_decode>:

double can1_ams_cell_voltages_v9s3_decode(uint8_t value)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80066ba:	79fb      	ldrb	r3, [r7, #7]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7f9 ff13 	bl	80004e8 <__aeabi_ui2d>
 80066c2:	a30e      	add	r3, pc, #56	; (adr r3, 80066fc <can1_ams_cell_voltages_v9s3_decode+0x4c>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f7f9 ff88 	bl	80005dc <__aeabi_dmul>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4610      	mov	r0, r2
 80066d2:	4619      	mov	r1, r3
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <can1_ams_cell_voltages_v9s3_decode+0x48>)
 80066da:	f7f9 fdc9 	bl	8000270 <__adddf3>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80066e6:	eeb0 0a47 	vmov.f32	s0, s14
 80066ea:	eef0 0a67 	vmov.f32	s1, s15
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	f3af 8000 	nop.w
 80066f8:	40040000 	.word	0x40040000
 80066fc:	fcce1c58 	.word	0xfcce1c58
 8006700:	3f800e6a 	.word	0x3f800e6a
 8006704:	00000000 	.word	0x00000000

08006708 <can1_ams_cell_voltages_v3s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s4_encode(double value)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	4b10      	ldr	r3, [pc, #64]	; (8006758 <can1_ams_cell_voltages_v3s4_encode+0x50>)
 8006718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800671c:	f7f9 fda6 	bl	800026c <__aeabi_dsub>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4610      	mov	r0, r2
 8006726:	4619      	mov	r1, r3
 8006728:	a309      	add	r3, pc, #36	; (adr r3, 8006750 <can1_ams_cell_voltages_v3s4_encode+0x48>)
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f7fa f87f 	bl	8000830 <__aeabi_ddiv>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	4610      	mov	r0, r2
 8006738:	4619      	mov	r1, r3
 800673a:	f7fa fa27 	bl	8000b8c <__aeabi_d2uiz>
 800673e:	4603      	mov	r3, r0
 8006740:	b2db      	uxtb	r3, r3
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	f3af 8000 	nop.w
 8006750:	fcce1c58 	.word	0xfcce1c58
 8006754:	3f800e6a 	.word	0x3f800e6a
 8006758:	40040000 	.word	0x40040000
 800675c:	00000000 	.word	0x00000000

08006760 <can1_ams_cell_voltages_v3s4_decode>:

double can1_ams_cell_voltages_v3s4_decode(uint8_t value)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	4618      	mov	r0, r3
 800676e:	f7f9 febb 	bl	80004e8 <__aeabi_ui2d>
 8006772:	a30e      	add	r3, pc, #56	; (adr r3, 80067ac <can1_ams_cell_voltages_v3s4_decode+0x4c>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f7f9 ff30 	bl	80005dc <__aeabi_dmul>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4610      	mov	r0, r2
 8006782:	4619      	mov	r1, r3
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <can1_ams_cell_voltages_v3s4_decode+0x48>)
 800678a:	f7f9 fd71 	bl	8000270 <__adddf3>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	ec43 2b17 	vmov	d7, r2, r3
}
 8006796:	eeb0 0a47 	vmov.f32	s0, s14
 800679a:	eef0 0a67 	vmov.f32	s1, s15
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	f3af 8000 	nop.w
 80067a8:	40040000 	.word	0x40040000
 80067ac:	fcce1c58 	.word	0xfcce1c58
 80067b0:	3f800e6a 	.word	0x3f800e6a
 80067b4:	00000000 	.word	0x00000000

080067b8 <can1_ams_cell_voltages_v9s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s4_encode(double value)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	4b10      	ldr	r3, [pc, #64]	; (8006808 <can1_ams_cell_voltages_v9s4_encode+0x50>)
 80067c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067cc:	f7f9 fd4e 	bl	800026c <__aeabi_dsub>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4610      	mov	r0, r2
 80067d6:	4619      	mov	r1, r3
 80067d8:	a309      	add	r3, pc, #36	; (adr r3, 8006800 <can1_ams_cell_voltages_v9s4_encode+0x48>)
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f7fa f827 	bl	8000830 <__aeabi_ddiv>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4610      	mov	r0, r2
 80067e8:	4619      	mov	r1, r3
 80067ea:	f7fa f9cf 	bl	8000b8c <__aeabi_d2uiz>
 80067ee:	4603      	mov	r3, r0
 80067f0:	b2db      	uxtb	r3, r3
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	f3af 8000 	nop.w
 8006800:	fcce1c58 	.word	0xfcce1c58
 8006804:	3f800e6a 	.word	0x3f800e6a
 8006808:	40040000 	.word	0x40040000
 800680c:	00000000 	.word	0x00000000

08006810 <can1_ams_cell_voltages_v9s4_decode>:

double can1_ams_cell_voltages_v9s4_decode(uint8_t value)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	4618      	mov	r0, r3
 800681e:	f7f9 fe63 	bl	80004e8 <__aeabi_ui2d>
 8006822:	a30e      	add	r3, pc, #56	; (adr r3, 800685c <can1_ams_cell_voltages_v9s4_decode+0x4c>)
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f7f9 fed8 	bl	80005dc <__aeabi_dmul>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4610      	mov	r0, r2
 8006832:	4619      	mov	r1, r3
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	4b07      	ldr	r3, [pc, #28]	; (8006858 <can1_ams_cell_voltages_v9s4_decode+0x48>)
 800683a:	f7f9 fd19 	bl	8000270 <__adddf3>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	ec43 2b17 	vmov	d7, r2, r3
}
 8006846:	eeb0 0a47 	vmov.f32	s0, s14
 800684a:	eef0 0a67 	vmov.f32	s1, s15
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	f3af 8000 	nop.w
 8006858:	40040000 	.word	0x40040000
 800685c:	fcce1c58 	.word	0xfcce1c58
 8006860:	3f800e6a 	.word	0x3f800e6a
 8006864:	00000000 	.word	0x00000000

08006868 <can1_ams_cell_voltages_v3s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s5_encode(double value)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006872:	f04f 0200 	mov.w	r2, #0
 8006876:	4b10      	ldr	r3, [pc, #64]	; (80068b8 <can1_ams_cell_voltages_v3s5_encode+0x50>)
 8006878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800687c:	f7f9 fcf6 	bl	800026c <__aeabi_dsub>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4610      	mov	r0, r2
 8006886:	4619      	mov	r1, r3
 8006888:	a309      	add	r3, pc, #36	; (adr r3, 80068b0 <can1_ams_cell_voltages_v3s5_encode+0x48>)
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	f7f9 ffcf 	bl	8000830 <__aeabi_ddiv>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	f7fa f977 	bl	8000b8c <__aeabi_d2uiz>
 800689e:	4603      	mov	r3, r0
 80068a0:	b2db      	uxtb	r3, r3
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	f3af 8000 	nop.w
 80068b0:	fcce1c58 	.word	0xfcce1c58
 80068b4:	3f800e6a 	.word	0x3f800e6a
 80068b8:	40040000 	.word	0x40040000
 80068bc:	00000000 	.word	0x00000000

080068c0 <can1_ams_cell_voltages_v3s5_decode>:

double can1_ams_cell_voltages_v3s5_decode(uint8_t value)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	4603      	mov	r3, r0
 80068c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80068ca:	79fb      	ldrb	r3, [r7, #7]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7f9 fe0b 	bl	80004e8 <__aeabi_ui2d>
 80068d2:	a30e      	add	r3, pc, #56	; (adr r3, 800690c <can1_ams_cell_voltages_v3s5_decode+0x4c>)
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f7f9 fe80 	bl	80005dc <__aeabi_dmul>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4610      	mov	r0, r2
 80068e2:	4619      	mov	r1, r3
 80068e4:	f04f 0200 	mov.w	r2, #0
 80068e8:	4b07      	ldr	r3, [pc, #28]	; (8006908 <can1_ams_cell_voltages_v3s5_decode+0x48>)
 80068ea:	f7f9 fcc1 	bl	8000270 <__adddf3>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80068f6:	eeb0 0a47 	vmov.f32	s0, s14
 80068fa:	eef0 0a67 	vmov.f32	s1, s15
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	f3af 8000 	nop.w
 8006908:	40040000 	.word	0x40040000
 800690c:	fcce1c58 	.word	0xfcce1c58
 8006910:	3f800e6a 	.word	0x3f800e6a
 8006914:	00000000 	.word	0x00000000

08006918 <can1_ams_cell_voltages_v9s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s5_encode(double value)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	4b10      	ldr	r3, [pc, #64]	; (8006968 <can1_ams_cell_voltages_v9s5_encode+0x50>)
 8006928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800692c:	f7f9 fc9e 	bl	800026c <__aeabi_dsub>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4610      	mov	r0, r2
 8006936:	4619      	mov	r1, r3
 8006938:	a309      	add	r3, pc, #36	; (adr r3, 8006960 <can1_ams_cell_voltages_v9s5_encode+0x48>)
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f7f9 ff77 	bl	8000830 <__aeabi_ddiv>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4610      	mov	r0, r2
 8006948:	4619      	mov	r1, r3
 800694a:	f7fa f91f 	bl	8000b8c <__aeabi_d2uiz>
 800694e:	4603      	mov	r3, r0
 8006950:	b2db      	uxtb	r3, r3
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	f3af 8000 	nop.w
 8006960:	fcce1c58 	.word	0xfcce1c58
 8006964:	3f800e6a 	.word	0x3f800e6a
 8006968:	40040000 	.word	0x40040000
 800696c:	00000000 	.word	0x00000000

08006970 <can1_ams_cell_voltages_v9s5_decode>:

double can1_ams_cell_voltages_v9s5_decode(uint8_t value)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	4603      	mov	r3, r0
 8006978:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800697a:	79fb      	ldrb	r3, [r7, #7]
 800697c:	4618      	mov	r0, r3
 800697e:	f7f9 fdb3 	bl	80004e8 <__aeabi_ui2d>
 8006982:	a30e      	add	r3, pc, #56	; (adr r3, 80069bc <can1_ams_cell_voltages_v9s5_decode+0x4c>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f7f9 fe28 	bl	80005dc <__aeabi_dmul>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4610      	mov	r0, r2
 8006992:	4619      	mov	r1, r3
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <can1_ams_cell_voltages_v9s5_decode+0x48>)
 800699a:	f7f9 fc69 	bl	8000270 <__adddf3>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80069a6:	eeb0 0a47 	vmov.f32	s0, s14
 80069aa:	eef0 0a67 	vmov.f32	s1, s15
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	f3af 8000 	nop.w
 80069b8:	40040000 	.word	0x40040000
 80069bc:	fcce1c58 	.word	0xfcce1c58
 80069c0:	3f800e6a 	.word	0x3f800e6a
 80069c4:	00000000 	.word	0x00000000

080069c8 <can1_ams_cell_voltages_v3s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s6_encode(double value)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <can1_ams_cell_voltages_v3s6_encode+0x50>)
 80069d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069dc:	f7f9 fc46 	bl	800026c <__aeabi_dsub>
 80069e0:	4602      	mov	r2, r0
 80069e2:	460b      	mov	r3, r1
 80069e4:	4610      	mov	r0, r2
 80069e6:	4619      	mov	r1, r3
 80069e8:	a309      	add	r3, pc, #36	; (adr r3, 8006a10 <can1_ams_cell_voltages_v3s6_encode+0x48>)
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	f7f9 ff1f 	bl	8000830 <__aeabi_ddiv>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4610      	mov	r0, r2
 80069f8:	4619      	mov	r1, r3
 80069fa:	f7fa f8c7 	bl	8000b8c <__aeabi_d2uiz>
 80069fe:	4603      	mov	r3, r0
 8006a00:	b2db      	uxtb	r3, r3
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	f3af 8000 	nop.w
 8006a10:	fcce1c58 	.word	0xfcce1c58
 8006a14:	3f800e6a 	.word	0x3f800e6a
 8006a18:	40040000 	.word	0x40040000
 8006a1c:	00000000 	.word	0x00000000

08006a20 <can1_ams_cell_voltages_v3s6_decode>:

double can1_ams_cell_voltages_v3s6_decode(uint8_t value)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7f9 fd5b 	bl	80004e8 <__aeabi_ui2d>
 8006a32:	a30e      	add	r3, pc, #56	; (adr r3, 8006a6c <can1_ams_cell_voltages_v3s6_decode+0x4c>)
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f7f9 fdd0 	bl	80005dc <__aeabi_dmul>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4610      	mov	r0, r2
 8006a42:	4619      	mov	r1, r3
 8006a44:	f04f 0200 	mov.w	r2, #0
 8006a48:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <can1_ams_cell_voltages_v3s6_decode+0x48>)
 8006a4a:	f7f9 fc11 	bl	8000270 <__adddf3>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	ec43 2b17 	vmov	d7, r2, r3
}
 8006a56:	eeb0 0a47 	vmov.f32	s0, s14
 8006a5a:	eef0 0a67 	vmov.f32	s1, s15
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	f3af 8000 	nop.w
 8006a68:	40040000 	.word	0x40040000
 8006a6c:	fcce1c58 	.word	0xfcce1c58
 8006a70:	3f800e6a 	.word	0x3f800e6a
 8006a74:	00000000 	.word	0x00000000

08006a78 <can1_ams_cell_voltages_v9s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s6_encode(double value)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006a82:	f04f 0200 	mov.w	r2, #0
 8006a86:	4b10      	ldr	r3, [pc, #64]	; (8006ac8 <can1_ams_cell_voltages_v9s6_encode+0x50>)
 8006a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a8c:	f7f9 fbee 	bl	800026c <__aeabi_dsub>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4610      	mov	r0, r2
 8006a96:	4619      	mov	r1, r3
 8006a98:	a309      	add	r3, pc, #36	; (adr r3, 8006ac0 <can1_ams_cell_voltages_v9s6_encode+0x48>)
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	f7f9 fec7 	bl	8000830 <__aeabi_ddiv>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	f7fa f86f 	bl	8000b8c <__aeabi_d2uiz>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	b2db      	uxtb	r3, r3
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	f3af 8000 	nop.w
 8006ac0:	fcce1c58 	.word	0xfcce1c58
 8006ac4:	3f800e6a 	.word	0x3f800e6a
 8006ac8:	40040000 	.word	0x40040000
 8006acc:	00000000 	.word	0x00000000

08006ad0 <can1_ams_cell_voltages_v9s6_decode>:

double can1_ams_cell_voltages_v9s6_decode(uint8_t value)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006ada:	79fb      	ldrb	r3, [r7, #7]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7f9 fd03 	bl	80004e8 <__aeabi_ui2d>
 8006ae2:	a30e      	add	r3, pc, #56	; (adr r3, 8006b1c <can1_ams_cell_voltages_v9s6_decode+0x4c>)
 8006ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae8:	f7f9 fd78 	bl	80005dc <__aeabi_dmul>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4610      	mov	r0, r2
 8006af2:	4619      	mov	r1, r3
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	4b07      	ldr	r3, [pc, #28]	; (8006b18 <can1_ams_cell_voltages_v9s6_decode+0x48>)
 8006afa:	f7f9 fbb9 	bl	8000270 <__adddf3>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	ec43 2b17 	vmov	d7, r2, r3
}
 8006b06:	eeb0 0a47 	vmov.f32	s0, s14
 8006b0a:	eef0 0a67 	vmov.f32	s1, s15
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	f3af 8000 	nop.w
 8006b18:	40040000 	.word	0x40040000
 8006b1c:	fcce1c58 	.word	0xfcce1c58
 8006b20:	3f800e6a 	.word	0x3f800e6a
 8006b24:	00000000 	.word	0x00000000

08006b28 <can1_ams_cell_voltages_v3s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s7_encode(double value)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	4b10      	ldr	r3, [pc, #64]	; (8006b78 <can1_ams_cell_voltages_v3s7_encode+0x50>)
 8006b38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b3c:	f7f9 fb96 	bl	800026c <__aeabi_dsub>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4610      	mov	r0, r2
 8006b46:	4619      	mov	r1, r3
 8006b48:	a309      	add	r3, pc, #36	; (adr r3, 8006b70 <can1_ams_cell_voltages_v3s7_encode+0x48>)
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	f7f9 fe6f 	bl	8000830 <__aeabi_ddiv>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4610      	mov	r0, r2
 8006b58:	4619      	mov	r1, r3
 8006b5a:	f7fa f817 	bl	8000b8c <__aeabi_d2uiz>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	b2db      	uxtb	r3, r3
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	f3af 8000 	nop.w
 8006b70:	fcce1c58 	.word	0xfcce1c58
 8006b74:	3f800e6a 	.word	0x3f800e6a
 8006b78:	40040000 	.word	0x40040000
 8006b7c:	00000000 	.word	0x00000000

08006b80 <can1_ams_cell_voltages_v3s7_decode>:

double can1_ams_cell_voltages_v3s7_decode(uint8_t value)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	4603      	mov	r3, r0
 8006b88:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7f9 fcab 	bl	80004e8 <__aeabi_ui2d>
 8006b92:	a30e      	add	r3, pc, #56	; (adr r3, 8006bcc <can1_ams_cell_voltages_v3s7_decode+0x4c>)
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	f7f9 fd20 	bl	80005dc <__aeabi_dmul>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <can1_ams_cell_voltages_v3s7_decode+0x48>)
 8006baa:	f7f9 fb61 	bl	8000270 <__adddf3>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	ec43 2b17 	vmov	d7, r2, r3
}
 8006bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8006bba:	eef0 0a67 	vmov.f32	s1, s15
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	f3af 8000 	nop.w
 8006bc8:	40040000 	.word	0x40040000
 8006bcc:	fcce1c58 	.word	0xfcce1c58
 8006bd0:	3f800e6a 	.word	0x3f800e6a
 8006bd4:	00000000 	.word	0x00000000

08006bd8 <can1_ams_cell_voltages_v9s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s7_encode(double value)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <can1_ams_cell_voltages_v9s7_encode+0x50>)
 8006be8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bec:	f7f9 fb3e 	bl	800026c <__aeabi_dsub>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	a309      	add	r3, pc, #36	; (adr r3, 8006c20 <can1_ams_cell_voltages_v9s7_encode+0x48>)
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f7f9 fe17 	bl	8000830 <__aeabi_ddiv>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4610      	mov	r0, r2
 8006c08:	4619      	mov	r1, r3
 8006c0a:	f7f9 ffbf 	bl	8000b8c <__aeabi_d2uiz>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	b2db      	uxtb	r3, r3
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	f3af 8000 	nop.w
 8006c20:	fcce1c58 	.word	0xfcce1c58
 8006c24:	3f800e6a 	.word	0x3f800e6a
 8006c28:	40040000 	.word	0x40040000
 8006c2c:	00000000 	.word	0x00000000

08006c30 <can1_ams_cell_voltages_v9s7_decode>:

double can1_ams_cell_voltages_v9s7_decode(uint8_t value)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7f9 fc53 	bl	80004e8 <__aeabi_ui2d>
 8006c42:	a30e      	add	r3, pc, #56	; (adr r3, 8006c7c <can1_ams_cell_voltages_v9s7_decode+0x4c>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f7f9 fcc8 	bl	80005dc <__aeabi_dmul>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4610      	mov	r0, r2
 8006c52:	4619      	mov	r1, r3
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <can1_ams_cell_voltages_v9s7_decode+0x48>)
 8006c5a:	f7f9 fb09 	bl	8000270 <__adddf3>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	ec43 2b17 	vmov	d7, r2, r3
}
 8006c66:	eeb0 0a47 	vmov.f32	s0, s14
 8006c6a:	eef0 0a67 	vmov.f32	s1, s15
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	f3af 8000 	nop.w
 8006c78:	40040000 	.word	0x40040000
 8006c7c:	fcce1c58 	.word	0xfcce1c58
 8006c80:	3f800e6a 	.word	0x3f800e6a
 8006c84:	00000000 	.word	0x00000000

08006c88 <can1_ams_cell_voltages_v3s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s8_encode(double value)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006c92:	f04f 0200 	mov.w	r2, #0
 8006c96:	4b10      	ldr	r3, [pc, #64]	; (8006cd8 <can1_ams_cell_voltages_v3s8_encode+0x50>)
 8006c98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c9c:	f7f9 fae6 	bl	800026c <__aeabi_dsub>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	a309      	add	r3, pc, #36	; (adr r3, 8006cd0 <can1_ams_cell_voltages_v3s8_encode+0x48>)
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	f7f9 fdbf 	bl	8000830 <__aeabi_ddiv>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f7f9 ff67 	bl	8000b8c <__aeabi_d2uiz>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	b2db      	uxtb	r3, r3
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	f3af 8000 	nop.w
 8006cd0:	fcce1c58 	.word	0xfcce1c58
 8006cd4:	3f800e6a 	.word	0x3f800e6a
 8006cd8:	40040000 	.word	0x40040000
 8006cdc:	00000000 	.word	0x00000000

08006ce0 <can1_ams_cell_voltages_v3s8_decode>:

double can1_ams_cell_voltages_v3s8_decode(uint8_t value)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7f9 fbfb 	bl	80004e8 <__aeabi_ui2d>
 8006cf2:	a30e      	add	r3, pc, #56	; (adr r3, 8006d2c <can1_ams_cell_voltages_v3s8_decode+0x4c>)
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	f7f9 fc70 	bl	80005dc <__aeabi_dmul>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4610      	mov	r0, r2
 8006d02:	4619      	mov	r1, r3
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <can1_ams_cell_voltages_v3s8_decode+0x48>)
 8006d0a:	f7f9 fab1 	bl	8000270 <__adddf3>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	ec43 2b17 	vmov	d7, r2, r3
}
 8006d16:	eeb0 0a47 	vmov.f32	s0, s14
 8006d1a:	eef0 0a67 	vmov.f32	s1, s15
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	f3af 8000 	nop.w
 8006d28:	40040000 	.word	0x40040000
 8006d2c:	fcce1c58 	.word	0xfcce1c58
 8006d30:	3f800e6a 	.word	0x3f800e6a
 8006d34:	00000000 	.word	0x00000000

08006d38 <can1_ams_cell_voltages_v9s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s8_encode(double value)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <can1_ams_cell_voltages_v9s8_encode+0x50>)
 8006d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d4c:	f7f9 fa8e 	bl	800026c <__aeabi_dsub>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4610      	mov	r0, r2
 8006d56:	4619      	mov	r1, r3
 8006d58:	a309      	add	r3, pc, #36	; (adr r3, 8006d80 <can1_ams_cell_voltages_v9s8_encode+0x48>)
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	f7f9 fd67 	bl	8000830 <__aeabi_ddiv>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f7f9 ff0f 	bl	8000b8c <__aeabi_d2uiz>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	b2db      	uxtb	r3, r3
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	f3af 8000 	nop.w
 8006d80:	fcce1c58 	.word	0xfcce1c58
 8006d84:	3f800e6a 	.word	0x3f800e6a
 8006d88:	40040000 	.word	0x40040000
 8006d8c:	00000000 	.word	0x00000000

08006d90 <can1_ams_cell_voltages_v9s8_decode>:

double can1_ams_cell_voltages_v9s8_decode(uint8_t value)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7f9 fba3 	bl	80004e8 <__aeabi_ui2d>
 8006da2:	a30e      	add	r3, pc, #56	; (adr r3, 8006ddc <can1_ams_cell_voltages_v9s8_decode+0x4c>)
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	f7f9 fc18 	bl	80005dc <__aeabi_dmul>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4610      	mov	r0, r2
 8006db2:	4619      	mov	r1, r3
 8006db4:	f04f 0200 	mov.w	r2, #0
 8006db8:	4b07      	ldr	r3, [pc, #28]	; (8006dd8 <can1_ams_cell_voltages_v9s8_decode+0x48>)
 8006dba:	f7f9 fa59 	bl	8000270 <__adddf3>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	ec43 2b17 	vmov	d7, r2, r3
}
 8006dc6:	eeb0 0a47 	vmov.f32	s0, s14
 8006dca:	eef0 0a67 	vmov.f32	s1, s15
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	f3af 8000 	nop.w
 8006dd8:	40040000 	.word	0x40040000
 8006ddc:	fcce1c58 	.word	0xfcce1c58
 8006de0:	3f800e6a 	.word	0x3f800e6a
 8006de4:	00000000 	.word	0x00000000

08006de8 <can1_ams_cell_voltages_v3s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s9_encode(double value)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006df2:	f04f 0200 	mov.w	r2, #0
 8006df6:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <can1_ams_cell_voltages_v3s9_encode+0x50>)
 8006df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dfc:	f7f9 fa36 	bl	800026c <__aeabi_dsub>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4610      	mov	r0, r2
 8006e06:	4619      	mov	r1, r3
 8006e08:	a309      	add	r3, pc, #36	; (adr r3, 8006e30 <can1_ams_cell_voltages_v3s9_encode+0x48>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 fd0f 	bl	8000830 <__aeabi_ddiv>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4610      	mov	r0, r2
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f7f9 feb7 	bl	8000b8c <__aeabi_d2uiz>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	b2db      	uxtb	r3, r3
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	f3af 8000 	nop.w
 8006e30:	fcce1c58 	.word	0xfcce1c58
 8006e34:	3f800e6a 	.word	0x3f800e6a
 8006e38:	40040000 	.word	0x40040000
 8006e3c:	00000000 	.word	0x00000000

08006e40 <can1_ams_cell_voltages_v3s9_decode>:

double can1_ams_cell_voltages_v3s9_decode(uint8_t value)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4603      	mov	r3, r0
 8006e48:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7f9 fb4b 	bl	80004e8 <__aeabi_ui2d>
 8006e52:	a30e      	add	r3, pc, #56	; (adr r3, 8006e8c <can1_ams_cell_voltages_v3s9_decode+0x4c>)
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	f7f9 fbc0 	bl	80005dc <__aeabi_dmul>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4610      	mov	r0, r2
 8006e62:	4619      	mov	r1, r3
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	4b07      	ldr	r3, [pc, #28]	; (8006e88 <can1_ams_cell_voltages_v3s9_decode+0x48>)
 8006e6a:	f7f9 fa01 	bl	8000270 <__adddf3>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	ec43 2b17 	vmov	d7, r2, r3
}
 8006e76:	eeb0 0a47 	vmov.f32	s0, s14
 8006e7a:	eef0 0a67 	vmov.f32	s1, s15
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	f3af 8000 	nop.w
 8006e88:	40040000 	.word	0x40040000
 8006e8c:	fcce1c58 	.word	0xfcce1c58
 8006e90:	3f800e6a 	.word	0x3f800e6a
 8006e94:	00000000 	.word	0x00000000

08006e98 <can1_ams_cell_voltages_v9s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s9_encode(double value)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006ea2:	f04f 0200 	mov.w	r2, #0
 8006ea6:	4b10      	ldr	r3, [pc, #64]	; (8006ee8 <can1_ams_cell_voltages_v9s9_encode+0x50>)
 8006ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eac:	f7f9 f9de 	bl	800026c <__aeabi_dsub>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	a309      	add	r3, pc, #36	; (adr r3, 8006ee0 <can1_ams_cell_voltages_v9s9_encode+0x48>)
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	f7f9 fcb7 	bl	8000830 <__aeabi_ddiv>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f7f9 fe5f 	bl	8000b8c <__aeabi_d2uiz>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	b2db      	uxtb	r3, r3
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	f3af 8000 	nop.w
 8006ee0:	fcce1c58 	.word	0xfcce1c58
 8006ee4:	3f800e6a 	.word	0x3f800e6a
 8006ee8:	40040000 	.word	0x40040000
 8006eec:	00000000 	.word	0x00000000

08006ef0 <can1_ams_cell_voltages_v9s9_decode>:

double can1_ams_cell_voltages_v9s9_decode(uint8_t value)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006efa:	79fb      	ldrb	r3, [r7, #7]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7f9 faf3 	bl	80004e8 <__aeabi_ui2d>
 8006f02:	a30e      	add	r3, pc, #56	; (adr r3, 8006f3c <can1_ams_cell_voltages_v9s9_decode+0x4c>)
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	f7f9 fb68 	bl	80005dc <__aeabi_dmul>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4610      	mov	r0, r2
 8006f12:	4619      	mov	r1, r3
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <can1_ams_cell_voltages_v9s9_decode+0x48>)
 8006f1a:	f7f9 f9a9 	bl	8000270 <__adddf3>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	ec43 2b17 	vmov	d7, r2, r3
}
 8006f26:	eeb0 0a47 	vmov.f32	s0, s14
 8006f2a:	eef0 0a67 	vmov.f32	s1, s15
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	f3af 8000 	nop.w
 8006f38:	40040000 	.word	0x40040000
 8006f3c:	fcce1c58 	.word	0xfcce1c58
 8006f40:	3f800e6a 	.word	0x3f800e6a
 8006f44:	00000000 	.word	0x00000000

08006f48 <can1_ams_cell_voltages_v3s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s10_encode(double value)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <can1_ams_cell_voltages_v3s10_encode+0x50>)
 8006f58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f5c:	f7f9 f986 	bl	800026c <__aeabi_dsub>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4610      	mov	r0, r2
 8006f66:	4619      	mov	r1, r3
 8006f68:	a309      	add	r3, pc, #36	; (adr r3, 8006f90 <can1_ams_cell_voltages_v3s10_encode+0x48>)
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	f7f9 fc5f 	bl	8000830 <__aeabi_ddiv>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	4610      	mov	r0, r2
 8006f78:	4619      	mov	r1, r3
 8006f7a:	f7f9 fe07 	bl	8000b8c <__aeabi_d2uiz>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	b2db      	uxtb	r3, r3
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	f3af 8000 	nop.w
 8006f90:	fcce1c58 	.word	0xfcce1c58
 8006f94:	3f800e6a 	.word	0x3f800e6a
 8006f98:	40040000 	.word	0x40040000
 8006f9c:	00000000 	.word	0x00000000

08006fa0 <can1_ams_cell_voltages_v3s10_decode>:

double can1_ams_cell_voltages_v3s10_decode(uint8_t value)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006faa:	79fb      	ldrb	r3, [r7, #7]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7f9 fa9b 	bl	80004e8 <__aeabi_ui2d>
 8006fb2:	a30e      	add	r3, pc, #56	; (adr r3, 8006fec <can1_ams_cell_voltages_v3s10_decode+0x4c>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	f7f9 fb10 	bl	80005dc <__aeabi_dmul>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	4b07      	ldr	r3, [pc, #28]	; (8006fe8 <can1_ams_cell_voltages_v3s10_decode+0x48>)
 8006fca:	f7f9 f951 	bl	8000270 <__adddf3>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	ec43 2b17 	vmov	d7, r2, r3
}
 8006fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8006fda:	eef0 0a67 	vmov.f32	s1, s15
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	f3af 8000 	nop.w
 8006fe8:	40040000 	.word	0x40040000
 8006fec:	fcce1c58 	.word	0xfcce1c58
 8006ff0:	3f800e6a 	.word	0x3f800e6a
 8006ff4:	00000000 	.word	0x00000000

08006ff8 <can1_ams_cell_voltages_v9s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s10_encode(double value)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007002:	f04f 0200 	mov.w	r2, #0
 8007006:	4b10      	ldr	r3, [pc, #64]	; (8007048 <can1_ams_cell_voltages_v9s10_encode+0x50>)
 8007008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800700c:	f7f9 f92e 	bl	800026c <__aeabi_dsub>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4610      	mov	r0, r2
 8007016:	4619      	mov	r1, r3
 8007018:	a309      	add	r3, pc, #36	; (adr r3, 8007040 <can1_ams_cell_voltages_v9s10_encode+0x48>)
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f7f9 fc07 	bl	8000830 <__aeabi_ddiv>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4610      	mov	r0, r2
 8007028:	4619      	mov	r1, r3
 800702a:	f7f9 fdaf 	bl	8000b8c <__aeabi_d2uiz>
 800702e:	4603      	mov	r3, r0
 8007030:	b2db      	uxtb	r3, r3
}
 8007032:	4618      	mov	r0, r3
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	f3af 8000 	nop.w
 8007040:	fcce1c58 	.word	0xfcce1c58
 8007044:	3f800e6a 	.word	0x3f800e6a
 8007048:	40040000 	.word	0x40040000
 800704c:	00000000 	.word	0x00000000

08007050 <can1_ams_cell_voltages_v9s10_decode>:

double can1_ams_cell_voltages_v9s10_decode(uint8_t value)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	4603      	mov	r3, r0
 8007058:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800705a:	79fb      	ldrb	r3, [r7, #7]
 800705c:	4618      	mov	r0, r3
 800705e:	f7f9 fa43 	bl	80004e8 <__aeabi_ui2d>
 8007062:	a30e      	add	r3, pc, #56	; (adr r3, 800709c <can1_ams_cell_voltages_v9s10_decode+0x4c>)
 8007064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007068:	f7f9 fab8 	bl	80005dc <__aeabi_dmul>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4610      	mov	r0, r2
 8007072:	4619      	mov	r1, r3
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	4b07      	ldr	r3, [pc, #28]	; (8007098 <can1_ams_cell_voltages_v9s10_decode+0x48>)
 800707a:	f7f9 f8f9 	bl	8000270 <__adddf3>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	ec43 2b17 	vmov	d7, r2, r3
}
 8007086:	eeb0 0a47 	vmov.f32	s0, s14
 800708a:	eef0 0a67 	vmov.f32	s1, s15
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	f3af 8000 	nop.w
 8007098:	40040000 	.word	0x40040000
 800709c:	fcce1c58 	.word	0xfcce1c58
 80070a0:	3f800e6a 	.word	0x3f800e6a
 80070a4:	00000000 	.word	0x00000000

080070a8 <can1_ams_cell_voltages_v3s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s11_encode(double value)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	4b10      	ldr	r3, [pc, #64]	; (80070f8 <can1_ams_cell_voltages_v3s11_encode+0x50>)
 80070b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070bc:	f7f9 f8d6 	bl	800026c <__aeabi_dsub>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4610      	mov	r0, r2
 80070c6:	4619      	mov	r1, r3
 80070c8:	a309      	add	r3, pc, #36	; (adr r3, 80070f0 <can1_ams_cell_voltages_v3s11_encode+0x48>)
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f7f9 fbaf 	bl	8000830 <__aeabi_ddiv>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4610      	mov	r0, r2
 80070d8:	4619      	mov	r1, r3
 80070da:	f7f9 fd57 	bl	8000b8c <__aeabi_d2uiz>
 80070de:	4603      	mov	r3, r0
 80070e0:	b2db      	uxtb	r3, r3
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	f3af 8000 	nop.w
 80070f0:	fcce1c58 	.word	0xfcce1c58
 80070f4:	3f800e6a 	.word	0x3f800e6a
 80070f8:	40040000 	.word	0x40040000
 80070fc:	00000000 	.word	0x00000000

08007100 <can1_ams_cell_voltages_v3s11_decode>:

double can1_ams_cell_voltages_v3s11_decode(uint8_t value)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	4618      	mov	r0, r3
 800710e:	f7f9 f9eb 	bl	80004e8 <__aeabi_ui2d>
 8007112:	a30e      	add	r3, pc, #56	; (adr r3, 800714c <can1_ams_cell_voltages_v3s11_decode+0x4c>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f7f9 fa60 	bl	80005dc <__aeabi_dmul>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4610      	mov	r0, r2
 8007122:	4619      	mov	r1, r3
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	4b07      	ldr	r3, [pc, #28]	; (8007148 <can1_ams_cell_voltages_v3s11_decode+0x48>)
 800712a:	f7f9 f8a1 	bl	8000270 <__adddf3>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	ec43 2b17 	vmov	d7, r2, r3
}
 8007136:	eeb0 0a47 	vmov.f32	s0, s14
 800713a:	eef0 0a67 	vmov.f32	s1, s15
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	f3af 8000 	nop.w
 8007148:	40040000 	.word	0x40040000
 800714c:	fcce1c58 	.word	0xfcce1c58
 8007150:	3f800e6a 	.word	0x3f800e6a
 8007154:	00000000 	.word	0x00000000

08007158 <can1_ams_cell_voltages_v9s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s11_encode(double value)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007162:	f04f 0200 	mov.w	r2, #0
 8007166:	4b10      	ldr	r3, [pc, #64]	; (80071a8 <can1_ams_cell_voltages_v9s11_encode+0x50>)
 8007168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800716c:	f7f9 f87e 	bl	800026c <__aeabi_dsub>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4610      	mov	r0, r2
 8007176:	4619      	mov	r1, r3
 8007178:	a309      	add	r3, pc, #36	; (adr r3, 80071a0 <can1_ams_cell_voltages_v9s11_encode+0x48>)
 800717a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717e:	f7f9 fb57 	bl	8000830 <__aeabi_ddiv>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4610      	mov	r0, r2
 8007188:	4619      	mov	r1, r3
 800718a:	f7f9 fcff 	bl	8000b8c <__aeabi_d2uiz>
 800718e:	4603      	mov	r3, r0
 8007190:	b2db      	uxtb	r3, r3
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	f3af 8000 	nop.w
 80071a0:	fcce1c58 	.word	0xfcce1c58
 80071a4:	3f800e6a 	.word	0x3f800e6a
 80071a8:	40040000 	.word	0x40040000
 80071ac:	00000000 	.word	0x00000000

080071b0 <can1_ams_cell_voltages_v9s11_decode>:

double can1_ams_cell_voltages_v9s11_decode(uint8_t value)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7f9 f993 	bl	80004e8 <__aeabi_ui2d>
 80071c2:	a30e      	add	r3, pc, #56	; (adr r3, 80071fc <can1_ams_cell_voltages_v9s11_decode+0x4c>)
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f7f9 fa08 	bl	80005dc <__aeabi_dmul>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4610      	mov	r0, r2
 80071d2:	4619      	mov	r1, r3
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	4b07      	ldr	r3, [pc, #28]	; (80071f8 <can1_ams_cell_voltages_v9s11_decode+0x48>)
 80071da:	f7f9 f849 	bl	8000270 <__adddf3>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80071e6:	eeb0 0a47 	vmov.f32	s0, s14
 80071ea:	eef0 0a67 	vmov.f32	s1, s15
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	f3af 8000 	nop.w
 80071f8:	40040000 	.word	0x40040000
 80071fc:	fcce1c58 	.word	0xfcce1c58
 8007200:	3f800e6a 	.word	0x3f800e6a
 8007204:	00000000 	.word	0x00000000

08007208 <can1_ams_cell_voltages_v3s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s12_encode(double value)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	4b10      	ldr	r3, [pc, #64]	; (8007258 <can1_ams_cell_voltages_v3s12_encode+0x50>)
 8007218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800721c:	f7f9 f826 	bl	800026c <__aeabi_dsub>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4610      	mov	r0, r2
 8007226:	4619      	mov	r1, r3
 8007228:	a309      	add	r3, pc, #36	; (adr r3, 8007250 <can1_ams_cell_voltages_v3s12_encode+0x48>)
 800722a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722e:	f7f9 faff 	bl	8000830 <__aeabi_ddiv>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4610      	mov	r0, r2
 8007238:	4619      	mov	r1, r3
 800723a:	f7f9 fca7 	bl	8000b8c <__aeabi_d2uiz>
 800723e:	4603      	mov	r3, r0
 8007240:	b2db      	uxtb	r3, r3
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	f3af 8000 	nop.w
 8007250:	fcce1c58 	.word	0xfcce1c58
 8007254:	3f800e6a 	.word	0x3f800e6a
 8007258:	40040000 	.word	0x40040000
 800725c:	00000000 	.word	0x00000000

08007260 <can1_ams_cell_voltages_v3s12_decode>:

double can1_ams_cell_voltages_v3s12_decode(uint8_t value)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	4603      	mov	r3, r0
 8007268:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	4618      	mov	r0, r3
 800726e:	f7f9 f93b 	bl	80004e8 <__aeabi_ui2d>
 8007272:	a30e      	add	r3, pc, #56	; (adr r3, 80072ac <can1_ams_cell_voltages_v3s12_decode+0x4c>)
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f7f9 f9b0 	bl	80005dc <__aeabi_dmul>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4610      	mov	r0, r2
 8007282:	4619      	mov	r1, r3
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <can1_ams_cell_voltages_v3s12_decode+0x48>)
 800728a:	f7f8 fff1 	bl	8000270 <__adddf3>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	ec43 2b17 	vmov	d7, r2, r3
}
 8007296:	eeb0 0a47 	vmov.f32	s0, s14
 800729a:	eef0 0a67 	vmov.f32	s1, s15
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	f3af 8000 	nop.w
 80072a8:	40040000 	.word	0x40040000
 80072ac:	fcce1c58 	.word	0xfcce1c58
 80072b0:	3f800e6a 	.word	0x3f800e6a
 80072b4:	00000000 	.word	0x00000000

080072b8 <can1_ams_cell_voltages_v9s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s12_encode(double value)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80072c2:	f04f 0200 	mov.w	r2, #0
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <can1_ams_cell_voltages_v9s12_encode+0x50>)
 80072c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072cc:	f7f8 ffce 	bl	800026c <__aeabi_dsub>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4610      	mov	r0, r2
 80072d6:	4619      	mov	r1, r3
 80072d8:	a309      	add	r3, pc, #36	; (adr r3, 8007300 <can1_ams_cell_voltages_v9s12_encode+0x48>)
 80072da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072de:	f7f9 faa7 	bl	8000830 <__aeabi_ddiv>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	4610      	mov	r0, r2
 80072e8:	4619      	mov	r1, r3
 80072ea:	f7f9 fc4f 	bl	8000b8c <__aeabi_d2uiz>
 80072ee:	4603      	mov	r3, r0
 80072f0:	b2db      	uxtb	r3, r3
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	f3af 8000 	nop.w
 8007300:	fcce1c58 	.word	0xfcce1c58
 8007304:	3f800e6a 	.word	0x3f800e6a
 8007308:	40040000 	.word	0x40040000
 800730c:	00000000 	.word	0x00000000

08007310 <can1_ams_cell_voltages_v9s12_decode>:

double can1_ams_cell_voltages_v9s12_decode(uint8_t value)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	4603      	mov	r3, r0
 8007318:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	4618      	mov	r0, r3
 800731e:	f7f9 f8e3 	bl	80004e8 <__aeabi_ui2d>
 8007322:	a30e      	add	r3, pc, #56	; (adr r3, 800735c <can1_ams_cell_voltages_v9s12_decode+0x4c>)
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f7f9 f958 	bl	80005dc <__aeabi_dmul>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4610      	mov	r0, r2
 8007332:	4619      	mov	r1, r3
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	4b07      	ldr	r3, [pc, #28]	; (8007358 <can1_ams_cell_voltages_v9s12_decode+0x48>)
 800733a:	f7f8 ff99 	bl	8000270 <__adddf3>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	ec43 2b17 	vmov	d7, r2, r3
}
 8007346:	eeb0 0a47 	vmov.f32	s0, s14
 800734a:	eef0 0a67 	vmov.f32	s1, s15
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	f3af 8000 	nop.w
 8007358:	40040000 	.word	0x40040000
 800735c:	fcce1c58 	.word	0xfcce1c58
 8007360:	3f800e6a 	.word	0x3f800e6a
 8007364:	00000000 	.word	0x00000000

08007368 <can1_ams_cell_voltages_v4s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s1_encode(double value)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	4b10      	ldr	r3, [pc, #64]	; (80073b8 <can1_ams_cell_voltages_v4s1_encode+0x50>)
 8007378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800737c:	f7f8 ff76 	bl	800026c <__aeabi_dsub>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4610      	mov	r0, r2
 8007386:	4619      	mov	r1, r3
 8007388:	a309      	add	r3, pc, #36	; (adr r3, 80073b0 <can1_ams_cell_voltages_v4s1_encode+0x48>)
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	f7f9 fa4f 	bl	8000830 <__aeabi_ddiv>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	4610      	mov	r0, r2
 8007398:	4619      	mov	r1, r3
 800739a:	f7f9 fbf7 	bl	8000b8c <__aeabi_d2uiz>
 800739e:	4603      	mov	r3, r0
 80073a0:	b2db      	uxtb	r3, r3
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	f3af 8000 	nop.w
 80073b0:	fcce1c58 	.word	0xfcce1c58
 80073b4:	3f800e6a 	.word	0x3f800e6a
 80073b8:	40040000 	.word	0x40040000
 80073bc:	00000000 	.word	0x00000000

080073c0 <can1_ams_cell_voltages_v4s1_decode>:

double can1_ams_cell_voltages_v4s1_decode(uint8_t value)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7f9 f88b 	bl	80004e8 <__aeabi_ui2d>
 80073d2:	a30e      	add	r3, pc, #56	; (adr r3, 800740c <can1_ams_cell_voltages_v4s1_decode+0x4c>)
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f7f9 f900 	bl	80005dc <__aeabi_dmul>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4610      	mov	r0, r2
 80073e2:	4619      	mov	r1, r3
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	4b07      	ldr	r3, [pc, #28]	; (8007408 <can1_ams_cell_voltages_v4s1_decode+0x48>)
 80073ea:	f7f8 ff41 	bl	8000270 <__adddf3>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80073f6:	eeb0 0a47 	vmov.f32	s0, s14
 80073fa:	eef0 0a67 	vmov.f32	s1, s15
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	f3af 8000 	nop.w
 8007408:	40040000 	.word	0x40040000
 800740c:	fcce1c58 	.word	0xfcce1c58
 8007410:	3f800e6a 	.word	0x3f800e6a
 8007414:	00000000 	.word	0x00000000

08007418 <can1_ams_cell_voltages_v10s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s1_encode(double value)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	4b10      	ldr	r3, [pc, #64]	; (8007468 <can1_ams_cell_voltages_v10s1_encode+0x50>)
 8007428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800742c:	f7f8 ff1e 	bl	800026c <__aeabi_dsub>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4610      	mov	r0, r2
 8007436:	4619      	mov	r1, r3
 8007438:	a309      	add	r3, pc, #36	; (adr r3, 8007460 <can1_ams_cell_voltages_v10s1_encode+0x48>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f7f9 f9f7 	bl	8000830 <__aeabi_ddiv>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4610      	mov	r0, r2
 8007448:	4619      	mov	r1, r3
 800744a:	f7f9 fb9f 	bl	8000b8c <__aeabi_d2uiz>
 800744e:	4603      	mov	r3, r0
 8007450:	b2db      	uxtb	r3, r3
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	f3af 8000 	nop.w
 8007460:	fcce1c58 	.word	0xfcce1c58
 8007464:	3f800e6a 	.word	0x3f800e6a
 8007468:	40040000 	.word	0x40040000
 800746c:	00000000 	.word	0x00000000

08007470 <can1_ams_cell_voltages_v10s1_decode>:

double can1_ams_cell_voltages_v10s1_decode(uint8_t value)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800747a:	79fb      	ldrb	r3, [r7, #7]
 800747c:	4618      	mov	r0, r3
 800747e:	f7f9 f833 	bl	80004e8 <__aeabi_ui2d>
 8007482:	a30e      	add	r3, pc, #56	; (adr r3, 80074bc <can1_ams_cell_voltages_v10s1_decode+0x4c>)
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	f7f9 f8a8 	bl	80005dc <__aeabi_dmul>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	4610      	mov	r0, r2
 8007492:	4619      	mov	r1, r3
 8007494:	f04f 0200 	mov.w	r2, #0
 8007498:	4b07      	ldr	r3, [pc, #28]	; (80074b8 <can1_ams_cell_voltages_v10s1_decode+0x48>)
 800749a:	f7f8 fee9 	bl	8000270 <__adddf3>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80074a6:	eeb0 0a47 	vmov.f32	s0, s14
 80074aa:	eef0 0a67 	vmov.f32	s1, s15
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	f3af 8000 	nop.w
 80074b8:	40040000 	.word	0x40040000
 80074bc:	fcce1c58 	.word	0xfcce1c58
 80074c0:	3f800e6a 	.word	0x3f800e6a
 80074c4:	00000000 	.word	0x00000000

080074c8 <can1_ams_cell_voltages_v4s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s2_encode(double value)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	4b10      	ldr	r3, [pc, #64]	; (8007518 <can1_ams_cell_voltages_v4s2_encode+0x50>)
 80074d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074dc:	f7f8 fec6 	bl	800026c <__aeabi_dsub>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4610      	mov	r0, r2
 80074e6:	4619      	mov	r1, r3
 80074e8:	a309      	add	r3, pc, #36	; (adr r3, 8007510 <can1_ams_cell_voltages_v4s2_encode+0x48>)
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f7f9 f99f 	bl	8000830 <__aeabi_ddiv>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4610      	mov	r0, r2
 80074f8:	4619      	mov	r1, r3
 80074fa:	f7f9 fb47 	bl	8000b8c <__aeabi_d2uiz>
 80074fe:	4603      	mov	r3, r0
 8007500:	b2db      	uxtb	r3, r3
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	f3af 8000 	nop.w
 8007510:	fcce1c58 	.word	0xfcce1c58
 8007514:	3f800e6a 	.word	0x3f800e6a
 8007518:	40040000 	.word	0x40040000
 800751c:	00000000 	.word	0x00000000

08007520 <can1_ams_cell_voltages_v4s2_decode>:

double can1_ams_cell_voltages_v4s2_decode(uint8_t value)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800752a:	79fb      	ldrb	r3, [r7, #7]
 800752c:	4618      	mov	r0, r3
 800752e:	f7f8 ffdb 	bl	80004e8 <__aeabi_ui2d>
 8007532:	a30e      	add	r3, pc, #56	; (adr r3, 800756c <can1_ams_cell_voltages_v4s2_decode+0x4c>)
 8007534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007538:	f7f9 f850 	bl	80005dc <__aeabi_dmul>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4610      	mov	r0, r2
 8007542:	4619      	mov	r1, r3
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	4b07      	ldr	r3, [pc, #28]	; (8007568 <can1_ams_cell_voltages_v4s2_decode+0x48>)
 800754a:	f7f8 fe91 	bl	8000270 <__adddf3>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	ec43 2b17 	vmov	d7, r2, r3
}
 8007556:	eeb0 0a47 	vmov.f32	s0, s14
 800755a:	eef0 0a67 	vmov.f32	s1, s15
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	f3af 8000 	nop.w
 8007568:	40040000 	.word	0x40040000
 800756c:	fcce1c58 	.word	0xfcce1c58
 8007570:	3f800e6a 	.word	0x3f800e6a
 8007574:	00000000 	.word	0x00000000

08007578 <can1_ams_cell_voltages_v10s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s2_encode(double value)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <can1_ams_cell_voltages_v10s2_encode+0x50>)
 8007588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800758c:	f7f8 fe6e 	bl	800026c <__aeabi_dsub>
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	4610      	mov	r0, r2
 8007596:	4619      	mov	r1, r3
 8007598:	a309      	add	r3, pc, #36	; (adr r3, 80075c0 <can1_ams_cell_voltages_v10s2_encode+0x48>)
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	f7f9 f947 	bl	8000830 <__aeabi_ddiv>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4610      	mov	r0, r2
 80075a8:	4619      	mov	r1, r3
 80075aa:	f7f9 faef 	bl	8000b8c <__aeabi_d2uiz>
 80075ae:	4603      	mov	r3, r0
 80075b0:	b2db      	uxtb	r3, r3
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	f3af 8000 	nop.w
 80075c0:	fcce1c58 	.word	0xfcce1c58
 80075c4:	3f800e6a 	.word	0x3f800e6a
 80075c8:	40040000 	.word	0x40040000
 80075cc:	00000000 	.word	0x00000000

080075d0 <can1_ams_cell_voltages_v10s2_decode>:

double can1_ams_cell_voltages_v10s2_decode(uint8_t value)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80075da:	79fb      	ldrb	r3, [r7, #7]
 80075dc:	4618      	mov	r0, r3
 80075de:	f7f8 ff83 	bl	80004e8 <__aeabi_ui2d>
 80075e2:	a30e      	add	r3, pc, #56	; (adr r3, 800761c <can1_ams_cell_voltages_v10s2_decode+0x4c>)
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	f7f8 fff8 	bl	80005dc <__aeabi_dmul>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4610      	mov	r0, r2
 80075f2:	4619      	mov	r1, r3
 80075f4:	f04f 0200 	mov.w	r2, #0
 80075f8:	4b07      	ldr	r3, [pc, #28]	; (8007618 <can1_ams_cell_voltages_v10s2_decode+0x48>)
 80075fa:	f7f8 fe39 	bl	8000270 <__adddf3>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	ec43 2b17 	vmov	d7, r2, r3
}
 8007606:	eeb0 0a47 	vmov.f32	s0, s14
 800760a:	eef0 0a67 	vmov.f32	s1, s15
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	f3af 8000 	nop.w
 8007618:	40040000 	.word	0x40040000
 800761c:	fcce1c58 	.word	0xfcce1c58
 8007620:	3f800e6a 	.word	0x3f800e6a
 8007624:	00000000 	.word	0x00000000

08007628 <can1_ams_cell_voltages_v4s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s3_encode(double value)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007632:	f04f 0200 	mov.w	r2, #0
 8007636:	4b10      	ldr	r3, [pc, #64]	; (8007678 <can1_ams_cell_voltages_v4s3_encode+0x50>)
 8007638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800763c:	f7f8 fe16 	bl	800026c <__aeabi_dsub>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4610      	mov	r0, r2
 8007646:	4619      	mov	r1, r3
 8007648:	a309      	add	r3, pc, #36	; (adr r3, 8007670 <can1_ams_cell_voltages_v4s3_encode+0x48>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	f7f9 f8ef 	bl	8000830 <__aeabi_ddiv>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4610      	mov	r0, r2
 8007658:	4619      	mov	r1, r3
 800765a:	f7f9 fa97 	bl	8000b8c <__aeabi_d2uiz>
 800765e:	4603      	mov	r3, r0
 8007660:	b2db      	uxtb	r3, r3
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	f3af 8000 	nop.w
 8007670:	fcce1c58 	.word	0xfcce1c58
 8007674:	3f800e6a 	.word	0x3f800e6a
 8007678:	40040000 	.word	0x40040000
 800767c:	00000000 	.word	0x00000000

08007680 <can1_ams_cell_voltages_v4s3_decode>:

double can1_ams_cell_voltages_v4s3_decode(uint8_t value)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	4618      	mov	r0, r3
 800768e:	f7f8 ff2b 	bl	80004e8 <__aeabi_ui2d>
 8007692:	a30e      	add	r3, pc, #56	; (adr r3, 80076cc <can1_ams_cell_voltages_v4s3_decode+0x4c>)
 8007694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007698:	f7f8 ffa0 	bl	80005dc <__aeabi_dmul>
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	4610      	mov	r0, r2
 80076a2:	4619      	mov	r1, r3
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <can1_ams_cell_voltages_v4s3_decode+0x48>)
 80076aa:	f7f8 fde1 	bl	8000270 <__adddf3>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80076b6:	eeb0 0a47 	vmov.f32	s0, s14
 80076ba:	eef0 0a67 	vmov.f32	s1, s15
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	f3af 8000 	nop.w
 80076c8:	40040000 	.word	0x40040000
 80076cc:	fcce1c58 	.word	0xfcce1c58
 80076d0:	3f800e6a 	.word	0x3f800e6a
 80076d4:	00000000 	.word	0x00000000

080076d8 <can1_ams_cell_voltages_v10s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s3_encode(double value)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80076e2:	f04f 0200 	mov.w	r2, #0
 80076e6:	4b10      	ldr	r3, [pc, #64]	; (8007728 <can1_ams_cell_voltages_v10s3_encode+0x50>)
 80076e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076ec:	f7f8 fdbe 	bl	800026c <__aeabi_dsub>
 80076f0:	4602      	mov	r2, r0
 80076f2:	460b      	mov	r3, r1
 80076f4:	4610      	mov	r0, r2
 80076f6:	4619      	mov	r1, r3
 80076f8:	a309      	add	r3, pc, #36	; (adr r3, 8007720 <can1_ams_cell_voltages_v10s3_encode+0x48>)
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	f7f9 f897 	bl	8000830 <__aeabi_ddiv>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4610      	mov	r0, r2
 8007708:	4619      	mov	r1, r3
 800770a:	f7f9 fa3f 	bl	8000b8c <__aeabi_d2uiz>
 800770e:	4603      	mov	r3, r0
 8007710:	b2db      	uxtb	r3, r3
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	f3af 8000 	nop.w
 8007720:	fcce1c58 	.word	0xfcce1c58
 8007724:	3f800e6a 	.word	0x3f800e6a
 8007728:	40040000 	.word	0x40040000
 800772c:	00000000 	.word	0x00000000

08007730 <can1_ams_cell_voltages_v10s3_decode>:

double can1_ams_cell_voltages_v10s3_decode(uint8_t value)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	4618      	mov	r0, r3
 800773e:	f7f8 fed3 	bl	80004e8 <__aeabi_ui2d>
 8007742:	a30e      	add	r3, pc, #56	; (adr r3, 800777c <can1_ams_cell_voltages_v10s3_decode+0x4c>)
 8007744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007748:	f7f8 ff48 	bl	80005dc <__aeabi_dmul>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	4610      	mov	r0, r2
 8007752:	4619      	mov	r1, r3
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	4b07      	ldr	r3, [pc, #28]	; (8007778 <can1_ams_cell_voltages_v10s3_decode+0x48>)
 800775a:	f7f8 fd89 	bl	8000270 <__adddf3>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	ec43 2b17 	vmov	d7, r2, r3
}
 8007766:	eeb0 0a47 	vmov.f32	s0, s14
 800776a:	eef0 0a67 	vmov.f32	s1, s15
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	f3af 8000 	nop.w
 8007778:	40040000 	.word	0x40040000
 800777c:	fcce1c58 	.word	0xfcce1c58
 8007780:	3f800e6a 	.word	0x3f800e6a
 8007784:	00000000 	.word	0x00000000

08007788 <can1_ams_cell_voltages_v4s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s4_encode(double value)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007792:	f04f 0200 	mov.w	r2, #0
 8007796:	4b10      	ldr	r3, [pc, #64]	; (80077d8 <can1_ams_cell_voltages_v4s4_encode+0x50>)
 8007798:	e9d7 0100 	ldrd	r0, r1, [r7]
 800779c:	f7f8 fd66 	bl	800026c <__aeabi_dsub>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4610      	mov	r0, r2
 80077a6:	4619      	mov	r1, r3
 80077a8:	a309      	add	r3, pc, #36	; (adr r3, 80077d0 <can1_ams_cell_voltages_v4s4_encode+0x48>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	f7f9 f83f 	bl	8000830 <__aeabi_ddiv>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4610      	mov	r0, r2
 80077b8:	4619      	mov	r1, r3
 80077ba:	f7f9 f9e7 	bl	8000b8c <__aeabi_d2uiz>
 80077be:	4603      	mov	r3, r0
 80077c0:	b2db      	uxtb	r3, r3
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	f3af 8000 	nop.w
 80077d0:	fcce1c58 	.word	0xfcce1c58
 80077d4:	3f800e6a 	.word	0x3f800e6a
 80077d8:	40040000 	.word	0x40040000
 80077dc:	00000000 	.word	0x00000000

080077e0 <can1_ams_cell_voltages_v4s4_decode>:

double can1_ams_cell_voltages_v4s4_decode(uint8_t value)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7f8 fe7b 	bl	80004e8 <__aeabi_ui2d>
 80077f2:	a30e      	add	r3, pc, #56	; (adr r3, 800782c <can1_ams_cell_voltages_v4s4_decode+0x4c>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f7f8 fef0 	bl	80005dc <__aeabi_dmul>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4610      	mov	r0, r2
 8007802:	4619      	mov	r1, r3
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	4b07      	ldr	r3, [pc, #28]	; (8007828 <can1_ams_cell_voltages_v4s4_decode+0x48>)
 800780a:	f7f8 fd31 	bl	8000270 <__adddf3>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	ec43 2b17 	vmov	d7, r2, r3
}
 8007816:	eeb0 0a47 	vmov.f32	s0, s14
 800781a:	eef0 0a67 	vmov.f32	s1, s15
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	f3af 8000 	nop.w
 8007828:	40040000 	.word	0x40040000
 800782c:	fcce1c58 	.word	0xfcce1c58
 8007830:	3f800e6a 	.word	0x3f800e6a
 8007834:	00000000 	.word	0x00000000

08007838 <can1_ams_cell_voltages_v10s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s4_encode(double value)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	4b10      	ldr	r3, [pc, #64]	; (8007888 <can1_ams_cell_voltages_v10s4_encode+0x50>)
 8007848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800784c:	f7f8 fd0e 	bl	800026c <__aeabi_dsub>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4610      	mov	r0, r2
 8007856:	4619      	mov	r1, r3
 8007858:	a309      	add	r3, pc, #36	; (adr r3, 8007880 <can1_ams_cell_voltages_v10s4_encode+0x48>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f8 ffe7 	bl	8000830 <__aeabi_ddiv>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	4610      	mov	r0, r2
 8007868:	4619      	mov	r1, r3
 800786a:	f7f9 f98f 	bl	8000b8c <__aeabi_d2uiz>
 800786e:	4603      	mov	r3, r0
 8007870:	b2db      	uxtb	r3, r3
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	f3af 8000 	nop.w
 8007880:	fcce1c58 	.word	0xfcce1c58
 8007884:	3f800e6a 	.word	0x3f800e6a
 8007888:	40040000 	.word	0x40040000
 800788c:	00000000 	.word	0x00000000

08007890 <can1_ams_cell_voltages_v10s4_decode>:

double can1_ams_cell_voltages_v10s4_decode(uint8_t value)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800789a:	79fb      	ldrb	r3, [r7, #7]
 800789c:	4618      	mov	r0, r3
 800789e:	f7f8 fe23 	bl	80004e8 <__aeabi_ui2d>
 80078a2:	a30e      	add	r3, pc, #56	; (adr r3, 80078dc <can1_ams_cell_voltages_v10s4_decode+0x4c>)
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f7f8 fe98 	bl	80005dc <__aeabi_dmul>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4610      	mov	r0, r2
 80078b2:	4619      	mov	r1, r3
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	4b07      	ldr	r3, [pc, #28]	; (80078d8 <can1_ams_cell_voltages_v10s4_decode+0x48>)
 80078ba:	f7f8 fcd9 	bl	8000270 <__adddf3>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80078c6:	eeb0 0a47 	vmov.f32	s0, s14
 80078ca:	eef0 0a67 	vmov.f32	s1, s15
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	f3af 8000 	nop.w
 80078d8:	40040000 	.word	0x40040000
 80078dc:	fcce1c58 	.word	0xfcce1c58
 80078e0:	3f800e6a 	.word	0x3f800e6a
 80078e4:	00000000 	.word	0x00000000

080078e8 <can1_ams_cell_voltages_v4s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s5_encode(double value)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80078f2:	f04f 0200 	mov.w	r2, #0
 80078f6:	4b10      	ldr	r3, [pc, #64]	; (8007938 <can1_ams_cell_voltages_v4s5_encode+0x50>)
 80078f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078fc:	f7f8 fcb6 	bl	800026c <__aeabi_dsub>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4610      	mov	r0, r2
 8007906:	4619      	mov	r1, r3
 8007908:	a309      	add	r3, pc, #36	; (adr r3, 8007930 <can1_ams_cell_voltages_v4s5_encode+0x48>)
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	f7f8 ff8f 	bl	8000830 <__aeabi_ddiv>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	4610      	mov	r0, r2
 8007918:	4619      	mov	r1, r3
 800791a:	f7f9 f937 	bl	8000b8c <__aeabi_d2uiz>
 800791e:	4603      	mov	r3, r0
 8007920:	b2db      	uxtb	r3, r3
}
 8007922:	4618      	mov	r0, r3
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	f3af 8000 	nop.w
 8007930:	fcce1c58 	.word	0xfcce1c58
 8007934:	3f800e6a 	.word	0x3f800e6a
 8007938:	40040000 	.word	0x40040000
 800793c:	00000000 	.word	0x00000000

08007940 <can1_ams_cell_voltages_v4s5_decode>:

double can1_ams_cell_voltages_v4s5_decode(uint8_t value)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	4618      	mov	r0, r3
 800794e:	f7f8 fdcb 	bl	80004e8 <__aeabi_ui2d>
 8007952:	a30e      	add	r3, pc, #56	; (adr r3, 800798c <can1_ams_cell_voltages_v4s5_decode+0x4c>)
 8007954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007958:	f7f8 fe40 	bl	80005dc <__aeabi_dmul>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4610      	mov	r0, r2
 8007962:	4619      	mov	r1, r3
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	4b07      	ldr	r3, [pc, #28]	; (8007988 <can1_ams_cell_voltages_v4s5_decode+0x48>)
 800796a:	f7f8 fc81 	bl	8000270 <__adddf3>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	ec43 2b17 	vmov	d7, r2, r3
}
 8007976:	eeb0 0a47 	vmov.f32	s0, s14
 800797a:	eef0 0a67 	vmov.f32	s1, s15
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	f3af 8000 	nop.w
 8007988:	40040000 	.word	0x40040000
 800798c:	fcce1c58 	.word	0xfcce1c58
 8007990:	3f800e6a 	.word	0x3f800e6a
 8007994:	00000000 	.word	0x00000000

08007998 <can1_ams_cell_voltages_v10s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s5_encode(double value)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80079a2:	f04f 0200 	mov.w	r2, #0
 80079a6:	4b10      	ldr	r3, [pc, #64]	; (80079e8 <can1_ams_cell_voltages_v10s5_encode+0x50>)
 80079a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079ac:	f7f8 fc5e 	bl	800026c <__aeabi_dsub>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4610      	mov	r0, r2
 80079b6:	4619      	mov	r1, r3
 80079b8:	a309      	add	r3, pc, #36	; (adr r3, 80079e0 <can1_ams_cell_voltages_v10s5_encode+0x48>)
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	f7f8 ff37 	bl	8000830 <__aeabi_ddiv>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	4610      	mov	r0, r2
 80079c8:	4619      	mov	r1, r3
 80079ca:	f7f9 f8df 	bl	8000b8c <__aeabi_d2uiz>
 80079ce:	4603      	mov	r3, r0
 80079d0:	b2db      	uxtb	r3, r3
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	f3af 8000 	nop.w
 80079e0:	fcce1c58 	.word	0xfcce1c58
 80079e4:	3f800e6a 	.word	0x3f800e6a
 80079e8:	40040000 	.word	0x40040000
 80079ec:	00000000 	.word	0x00000000

080079f0 <can1_ams_cell_voltages_v10s5_decode>:

double can1_ams_cell_voltages_v10s5_decode(uint8_t value)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7f8 fd73 	bl	80004e8 <__aeabi_ui2d>
 8007a02:	a30e      	add	r3, pc, #56	; (adr r3, 8007a3c <can1_ams_cell_voltages_v10s5_decode+0x4c>)
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	f7f8 fde8 	bl	80005dc <__aeabi_dmul>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4610      	mov	r0, r2
 8007a12:	4619      	mov	r1, r3
 8007a14:	f04f 0200 	mov.w	r2, #0
 8007a18:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <can1_ams_cell_voltages_v10s5_decode+0x48>)
 8007a1a:	f7f8 fc29 	bl	8000270 <__adddf3>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	ec43 2b17 	vmov	d7, r2, r3
}
 8007a26:	eeb0 0a47 	vmov.f32	s0, s14
 8007a2a:	eef0 0a67 	vmov.f32	s1, s15
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	f3af 8000 	nop.w
 8007a38:	40040000 	.word	0x40040000
 8007a3c:	fcce1c58 	.word	0xfcce1c58
 8007a40:	3f800e6a 	.word	0x3f800e6a
 8007a44:	00000000 	.word	0x00000000

08007a48 <can1_ams_cell_voltages_v4s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s6_encode(double value)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007a52:	f04f 0200 	mov.w	r2, #0
 8007a56:	4b10      	ldr	r3, [pc, #64]	; (8007a98 <can1_ams_cell_voltages_v4s6_encode+0x50>)
 8007a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a5c:	f7f8 fc06 	bl	800026c <__aeabi_dsub>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4610      	mov	r0, r2
 8007a66:	4619      	mov	r1, r3
 8007a68:	a309      	add	r3, pc, #36	; (adr r3, 8007a90 <can1_ams_cell_voltages_v4s6_encode+0x48>)
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	f7f8 fedf 	bl	8000830 <__aeabi_ddiv>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4610      	mov	r0, r2
 8007a78:	4619      	mov	r1, r3
 8007a7a:	f7f9 f887 	bl	8000b8c <__aeabi_d2uiz>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	b2db      	uxtb	r3, r3
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	f3af 8000 	nop.w
 8007a90:	fcce1c58 	.word	0xfcce1c58
 8007a94:	3f800e6a 	.word	0x3f800e6a
 8007a98:	40040000 	.word	0x40040000
 8007a9c:	00000000 	.word	0x00000000

08007aa0 <can1_ams_cell_voltages_v4s6_decode>:

double can1_ams_cell_voltages_v4s6_decode(uint8_t value)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7f8 fd1b 	bl	80004e8 <__aeabi_ui2d>
 8007ab2:	a30e      	add	r3, pc, #56	; (adr r3, 8007aec <can1_ams_cell_voltages_v4s6_decode+0x4c>)
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	f7f8 fd90 	bl	80005dc <__aeabi_dmul>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	4b07      	ldr	r3, [pc, #28]	; (8007ae8 <can1_ams_cell_voltages_v4s6_decode+0x48>)
 8007aca:	f7f8 fbd1 	bl	8000270 <__adddf3>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	ec43 2b17 	vmov	d7, r2, r3
}
 8007ad6:	eeb0 0a47 	vmov.f32	s0, s14
 8007ada:	eef0 0a67 	vmov.f32	s1, s15
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	f3af 8000 	nop.w
 8007ae8:	40040000 	.word	0x40040000
 8007aec:	fcce1c58 	.word	0xfcce1c58
 8007af0:	3f800e6a 	.word	0x3f800e6a
 8007af4:	00000000 	.word	0x00000000

08007af8 <can1_ams_cell_voltages_v10s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s6_encode(double value)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	4b10      	ldr	r3, [pc, #64]	; (8007b48 <can1_ams_cell_voltages_v10s6_encode+0x50>)
 8007b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b0c:	f7f8 fbae 	bl	800026c <__aeabi_dsub>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4610      	mov	r0, r2
 8007b16:	4619      	mov	r1, r3
 8007b18:	a309      	add	r3, pc, #36	; (adr r3, 8007b40 <can1_ams_cell_voltages_v10s6_encode+0x48>)
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	f7f8 fe87 	bl	8000830 <__aeabi_ddiv>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4610      	mov	r0, r2
 8007b28:	4619      	mov	r1, r3
 8007b2a:	f7f9 f82f 	bl	8000b8c <__aeabi_d2uiz>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	b2db      	uxtb	r3, r3
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w
 8007b40:	fcce1c58 	.word	0xfcce1c58
 8007b44:	3f800e6a 	.word	0x3f800e6a
 8007b48:	40040000 	.word	0x40040000
 8007b4c:	00000000 	.word	0x00000000

08007b50 <can1_ams_cell_voltages_v10s6_decode>:

double can1_ams_cell_voltages_v10s6_decode(uint8_t value)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7f8 fcc3 	bl	80004e8 <__aeabi_ui2d>
 8007b62:	a30e      	add	r3, pc, #56	; (adr r3, 8007b9c <can1_ams_cell_voltages_v10s6_decode+0x4c>)
 8007b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b68:	f7f8 fd38 	bl	80005dc <__aeabi_dmul>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4610      	mov	r0, r2
 8007b72:	4619      	mov	r1, r3
 8007b74:	f04f 0200 	mov.w	r2, #0
 8007b78:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <can1_ams_cell_voltages_v10s6_decode+0x48>)
 8007b7a:	f7f8 fb79 	bl	8000270 <__adddf3>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	ec43 2b17 	vmov	d7, r2, r3
}
 8007b86:	eeb0 0a47 	vmov.f32	s0, s14
 8007b8a:	eef0 0a67 	vmov.f32	s1, s15
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	f3af 8000 	nop.w
 8007b98:	40040000 	.word	0x40040000
 8007b9c:	fcce1c58 	.word	0xfcce1c58
 8007ba0:	3f800e6a 	.word	0x3f800e6a
 8007ba4:	00000000 	.word	0x00000000

08007ba8 <can1_ams_cell_voltages_v4s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s7_encode(double value)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	4b10      	ldr	r3, [pc, #64]	; (8007bf8 <can1_ams_cell_voltages_v4s7_encode+0x50>)
 8007bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bbc:	f7f8 fb56 	bl	800026c <__aeabi_dsub>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	a309      	add	r3, pc, #36	; (adr r3, 8007bf0 <can1_ams_cell_voltages_v4s7_encode+0x48>)
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	f7f8 fe2f 	bl	8000830 <__aeabi_ddiv>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	4619      	mov	r1, r3
 8007bda:	f7f8 ffd7 	bl	8000b8c <__aeabi_d2uiz>
 8007bde:	4603      	mov	r3, r0
 8007be0:	b2db      	uxtb	r3, r3
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	f3af 8000 	nop.w
 8007bf0:	fcce1c58 	.word	0xfcce1c58
 8007bf4:	3f800e6a 	.word	0x3f800e6a
 8007bf8:	40040000 	.word	0x40040000
 8007bfc:	00000000 	.word	0x00000000

08007c00 <can1_ams_cell_voltages_v4s7_decode>:

double can1_ams_cell_voltages_v4s7_decode(uint8_t value)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7f8 fc6b 	bl	80004e8 <__aeabi_ui2d>
 8007c12:	a30e      	add	r3, pc, #56	; (adr r3, 8007c4c <can1_ams_cell_voltages_v4s7_decode+0x4c>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f7f8 fce0 	bl	80005dc <__aeabi_dmul>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4610      	mov	r0, r2
 8007c22:	4619      	mov	r1, r3
 8007c24:	f04f 0200 	mov.w	r2, #0
 8007c28:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <can1_ams_cell_voltages_v4s7_decode+0x48>)
 8007c2a:	f7f8 fb21 	bl	8000270 <__adddf3>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	ec43 2b17 	vmov	d7, r2, r3
}
 8007c36:	eeb0 0a47 	vmov.f32	s0, s14
 8007c3a:	eef0 0a67 	vmov.f32	s1, s15
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	f3af 8000 	nop.w
 8007c48:	40040000 	.word	0x40040000
 8007c4c:	fcce1c58 	.word	0xfcce1c58
 8007c50:	3f800e6a 	.word	0x3f800e6a
 8007c54:	00000000 	.word	0x00000000

08007c58 <can1_ams_cell_voltages_v10s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s7_encode(double value)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007c62:	f04f 0200 	mov.w	r2, #0
 8007c66:	4b10      	ldr	r3, [pc, #64]	; (8007ca8 <can1_ams_cell_voltages_v10s7_encode+0x50>)
 8007c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c6c:	f7f8 fafe 	bl	800026c <__aeabi_dsub>
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	4610      	mov	r0, r2
 8007c76:	4619      	mov	r1, r3
 8007c78:	a309      	add	r3, pc, #36	; (adr r3, 8007ca0 <can1_ams_cell_voltages_v10s7_encode+0x48>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 fdd7 	bl	8000830 <__aeabi_ddiv>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4610      	mov	r0, r2
 8007c88:	4619      	mov	r1, r3
 8007c8a:	f7f8 ff7f 	bl	8000b8c <__aeabi_d2uiz>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	b2db      	uxtb	r3, r3
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	fcce1c58 	.word	0xfcce1c58
 8007ca4:	3f800e6a 	.word	0x3f800e6a
 8007ca8:	40040000 	.word	0x40040000
 8007cac:	00000000 	.word	0x00000000

08007cb0 <can1_ams_cell_voltages_v10s7_decode>:

double can1_ams_cell_voltages_v10s7_decode(uint8_t value)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7f8 fc13 	bl	80004e8 <__aeabi_ui2d>
 8007cc2:	a30e      	add	r3, pc, #56	; (adr r3, 8007cfc <can1_ams_cell_voltages_v10s7_decode+0x4c>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 fc88 	bl	80005dc <__aeabi_dmul>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	4b07      	ldr	r3, [pc, #28]	; (8007cf8 <can1_ams_cell_voltages_v10s7_decode+0x48>)
 8007cda:	f7f8 fac9 	bl	8000270 <__adddf3>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	ec43 2b17 	vmov	d7, r2, r3
}
 8007ce6:	eeb0 0a47 	vmov.f32	s0, s14
 8007cea:	eef0 0a67 	vmov.f32	s1, s15
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	f3af 8000 	nop.w
 8007cf8:	40040000 	.word	0x40040000
 8007cfc:	fcce1c58 	.word	0xfcce1c58
 8007d00:	3f800e6a 	.word	0x3f800e6a
 8007d04:	00000000 	.word	0x00000000

08007d08 <can1_ams_cell_voltages_v4s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s8_encode(double value)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007d12:	f04f 0200 	mov.w	r2, #0
 8007d16:	4b10      	ldr	r3, [pc, #64]	; (8007d58 <can1_ams_cell_voltages_v4s8_encode+0x50>)
 8007d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d1c:	f7f8 faa6 	bl	800026c <__aeabi_dsub>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4610      	mov	r0, r2
 8007d26:	4619      	mov	r1, r3
 8007d28:	a309      	add	r3, pc, #36	; (adr r3, 8007d50 <can1_ams_cell_voltages_v4s8_encode+0x48>)
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f7f8 fd7f 	bl	8000830 <__aeabi_ddiv>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4610      	mov	r0, r2
 8007d38:	4619      	mov	r1, r3
 8007d3a:	f7f8 ff27 	bl	8000b8c <__aeabi_d2uiz>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	b2db      	uxtb	r3, r3
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	f3af 8000 	nop.w
 8007d50:	fcce1c58 	.word	0xfcce1c58
 8007d54:	3f800e6a 	.word	0x3f800e6a
 8007d58:	40040000 	.word	0x40040000
 8007d5c:	00000000 	.word	0x00000000

08007d60 <can1_ams_cell_voltages_v4s8_decode>:

double can1_ams_cell_voltages_v4s8_decode(uint8_t value)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	4603      	mov	r3, r0
 8007d68:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7f8 fbbb 	bl	80004e8 <__aeabi_ui2d>
 8007d72:	a30e      	add	r3, pc, #56	; (adr r3, 8007dac <can1_ams_cell_voltages_v4s8_decode+0x4c>)
 8007d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d78:	f7f8 fc30 	bl	80005dc <__aeabi_dmul>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4610      	mov	r0, r2
 8007d82:	4619      	mov	r1, r3
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <can1_ams_cell_voltages_v4s8_decode+0x48>)
 8007d8a:	f7f8 fa71 	bl	8000270 <__adddf3>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	ec43 2b17 	vmov	d7, r2, r3
}
 8007d96:	eeb0 0a47 	vmov.f32	s0, s14
 8007d9a:	eef0 0a67 	vmov.f32	s1, s15
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	f3af 8000 	nop.w
 8007da8:	40040000 	.word	0x40040000
 8007dac:	fcce1c58 	.word	0xfcce1c58
 8007db0:	3f800e6a 	.word	0x3f800e6a
 8007db4:	00000000 	.word	0x00000000

08007db8 <can1_ams_cell_voltages_v10s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s8_encode(double value)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007dc2:	f04f 0200 	mov.w	r2, #0
 8007dc6:	4b10      	ldr	r3, [pc, #64]	; (8007e08 <can1_ams_cell_voltages_v10s8_encode+0x50>)
 8007dc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dcc:	f7f8 fa4e 	bl	800026c <__aeabi_dsub>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	a309      	add	r3, pc, #36	; (adr r3, 8007e00 <can1_ams_cell_voltages_v10s8_encode+0x48>)
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f7f8 fd27 	bl	8000830 <__aeabi_ddiv>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4610      	mov	r0, r2
 8007de8:	4619      	mov	r1, r3
 8007dea:	f7f8 fecf 	bl	8000b8c <__aeabi_d2uiz>
 8007dee:	4603      	mov	r3, r0
 8007df0:	b2db      	uxtb	r3, r3
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	f3af 8000 	nop.w
 8007e00:	fcce1c58 	.word	0xfcce1c58
 8007e04:	3f800e6a 	.word	0x3f800e6a
 8007e08:	40040000 	.word	0x40040000
 8007e0c:	00000000 	.word	0x00000000

08007e10 <can1_ams_cell_voltages_v10s8_decode>:

double can1_ams_cell_voltages_v10s8_decode(uint8_t value)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7f8 fb63 	bl	80004e8 <__aeabi_ui2d>
 8007e22:	a30e      	add	r3, pc, #56	; (adr r3, 8007e5c <can1_ams_cell_voltages_v10s8_decode+0x4c>)
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f7f8 fbd8 	bl	80005dc <__aeabi_dmul>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4610      	mov	r0, r2
 8007e32:	4619      	mov	r1, r3
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <can1_ams_cell_voltages_v10s8_decode+0x48>)
 8007e3a:	f7f8 fa19 	bl	8000270 <__adddf3>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	ec43 2b17 	vmov	d7, r2, r3
}
 8007e46:	eeb0 0a47 	vmov.f32	s0, s14
 8007e4a:	eef0 0a67 	vmov.f32	s1, s15
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	f3af 8000 	nop.w
 8007e58:	40040000 	.word	0x40040000
 8007e5c:	fcce1c58 	.word	0xfcce1c58
 8007e60:	3f800e6a 	.word	0x3f800e6a
 8007e64:	00000000 	.word	0x00000000

08007e68 <can1_ams_cell_voltages_v4s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s9_encode(double value)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007e72:	f04f 0200 	mov.w	r2, #0
 8007e76:	4b10      	ldr	r3, [pc, #64]	; (8007eb8 <can1_ams_cell_voltages_v4s9_encode+0x50>)
 8007e78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e7c:	f7f8 f9f6 	bl	800026c <__aeabi_dsub>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4610      	mov	r0, r2
 8007e86:	4619      	mov	r1, r3
 8007e88:	a309      	add	r3, pc, #36	; (adr r3, 8007eb0 <can1_ams_cell_voltages_v4s9_encode+0x48>)
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f7f8 fccf 	bl	8000830 <__aeabi_ddiv>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	4610      	mov	r0, r2
 8007e98:	4619      	mov	r1, r3
 8007e9a:	f7f8 fe77 	bl	8000b8c <__aeabi_d2uiz>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	b2db      	uxtb	r3, r3
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	f3af 8000 	nop.w
 8007eb0:	fcce1c58 	.word	0xfcce1c58
 8007eb4:	3f800e6a 	.word	0x3f800e6a
 8007eb8:	40040000 	.word	0x40040000
 8007ebc:	00000000 	.word	0x00000000

08007ec0 <can1_ams_cell_voltages_v4s9_decode>:

double can1_ams_cell_voltages_v4s9_decode(uint8_t value)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7f8 fb0b 	bl	80004e8 <__aeabi_ui2d>
 8007ed2:	a30e      	add	r3, pc, #56	; (adr r3, 8007f0c <can1_ams_cell_voltages_v4s9_decode+0x4c>)
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	f7f8 fb80 	bl	80005dc <__aeabi_dmul>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <can1_ams_cell_voltages_v4s9_decode+0x48>)
 8007eea:	f7f8 f9c1 	bl	8000270 <__adddf3>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	ec43 2b17 	vmov	d7, r2, r3
}
 8007ef6:	eeb0 0a47 	vmov.f32	s0, s14
 8007efa:	eef0 0a67 	vmov.f32	s1, s15
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	f3af 8000 	nop.w
 8007f08:	40040000 	.word	0x40040000
 8007f0c:	fcce1c58 	.word	0xfcce1c58
 8007f10:	3f800e6a 	.word	0x3f800e6a
 8007f14:	00000000 	.word	0x00000000

08007f18 <can1_ams_cell_voltages_v10s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s9_encode(double value)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007f22:	f04f 0200 	mov.w	r2, #0
 8007f26:	4b10      	ldr	r3, [pc, #64]	; (8007f68 <can1_ams_cell_voltages_v10s9_encode+0x50>)
 8007f28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f2c:	f7f8 f99e 	bl	800026c <__aeabi_dsub>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4610      	mov	r0, r2
 8007f36:	4619      	mov	r1, r3
 8007f38:	a309      	add	r3, pc, #36	; (adr r3, 8007f60 <can1_ams_cell_voltages_v10s9_encode+0x48>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f7f8 fc77 	bl	8000830 <__aeabi_ddiv>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4610      	mov	r0, r2
 8007f48:	4619      	mov	r1, r3
 8007f4a:	f7f8 fe1f 	bl	8000b8c <__aeabi_d2uiz>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	b2db      	uxtb	r3, r3
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	f3af 8000 	nop.w
 8007f60:	fcce1c58 	.word	0xfcce1c58
 8007f64:	3f800e6a 	.word	0x3f800e6a
 8007f68:	40040000 	.word	0x40040000
 8007f6c:	00000000 	.word	0x00000000

08007f70 <can1_ams_cell_voltages_v10s9_decode>:

double can1_ams_cell_voltages_v10s9_decode(uint8_t value)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7f8 fab3 	bl	80004e8 <__aeabi_ui2d>
 8007f82:	a30e      	add	r3, pc, #56	; (adr r3, 8007fbc <can1_ams_cell_voltages_v10s9_decode+0x4c>)
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f7f8 fb28 	bl	80005dc <__aeabi_dmul>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4610      	mov	r0, r2
 8007f92:	4619      	mov	r1, r3
 8007f94:	f04f 0200 	mov.w	r2, #0
 8007f98:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <can1_ams_cell_voltages_v10s9_decode+0x48>)
 8007f9a:	f7f8 f969 	bl	8000270 <__adddf3>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	ec43 2b17 	vmov	d7, r2, r3
}
 8007fa6:	eeb0 0a47 	vmov.f32	s0, s14
 8007faa:	eef0 0a67 	vmov.f32	s1, s15
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	f3af 8000 	nop.w
 8007fb8:	40040000 	.word	0x40040000
 8007fbc:	fcce1c58 	.word	0xfcce1c58
 8007fc0:	3f800e6a 	.word	0x3f800e6a
 8007fc4:	00000000 	.word	0x00000000

08007fc8 <can1_ams_cell_voltages_v4s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s10_encode(double value)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007fd2:	f04f 0200 	mov.w	r2, #0
 8007fd6:	4b10      	ldr	r3, [pc, #64]	; (8008018 <can1_ams_cell_voltages_v4s10_encode+0x50>)
 8007fd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fdc:	f7f8 f946 	bl	800026c <__aeabi_dsub>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	a309      	add	r3, pc, #36	; (adr r3, 8008010 <can1_ams_cell_voltages_v4s10_encode+0x48>)
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f7f8 fc1f 	bl	8000830 <__aeabi_ddiv>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	f7f8 fdc7 	bl	8000b8c <__aeabi_d2uiz>
 8007ffe:	4603      	mov	r3, r0
 8008000:	b2db      	uxtb	r3, r3
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	f3af 8000 	nop.w
 8008010:	fcce1c58 	.word	0xfcce1c58
 8008014:	3f800e6a 	.word	0x3f800e6a
 8008018:	40040000 	.word	0x40040000
 800801c:	00000000 	.word	0x00000000

08008020 <can1_ams_cell_voltages_v4s10_decode>:

double can1_ams_cell_voltages_v4s10_decode(uint8_t value)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	4618      	mov	r0, r3
 800802e:	f7f8 fa5b 	bl	80004e8 <__aeabi_ui2d>
 8008032:	a30e      	add	r3, pc, #56	; (adr r3, 800806c <can1_ams_cell_voltages_v4s10_decode+0x4c>)
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f7f8 fad0 	bl	80005dc <__aeabi_dmul>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4610      	mov	r0, r2
 8008042:	4619      	mov	r1, r3
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	4b07      	ldr	r3, [pc, #28]	; (8008068 <can1_ams_cell_voltages_v4s10_decode+0x48>)
 800804a:	f7f8 f911 	bl	8000270 <__adddf3>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	ec43 2b17 	vmov	d7, r2, r3
}
 8008056:	eeb0 0a47 	vmov.f32	s0, s14
 800805a:	eef0 0a67 	vmov.f32	s1, s15
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	f3af 8000 	nop.w
 8008068:	40040000 	.word	0x40040000
 800806c:	fcce1c58 	.word	0xfcce1c58
 8008070:	3f800e6a 	.word	0x3f800e6a
 8008074:	00000000 	.word	0x00000000

08008078 <can1_ams_cell_voltages_v10s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s10_encode(double value)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008082:	f04f 0200 	mov.w	r2, #0
 8008086:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <can1_ams_cell_voltages_v10s10_encode+0x50>)
 8008088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800808c:	f7f8 f8ee 	bl	800026c <__aeabi_dsub>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4610      	mov	r0, r2
 8008096:	4619      	mov	r1, r3
 8008098:	a309      	add	r3, pc, #36	; (adr r3, 80080c0 <can1_ams_cell_voltages_v10s10_encode+0x48>)
 800809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809e:	f7f8 fbc7 	bl	8000830 <__aeabi_ddiv>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4610      	mov	r0, r2
 80080a8:	4619      	mov	r1, r3
 80080aa:	f7f8 fd6f 	bl	8000b8c <__aeabi_d2uiz>
 80080ae:	4603      	mov	r3, r0
 80080b0:	b2db      	uxtb	r3, r3
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	f3af 8000 	nop.w
 80080c0:	fcce1c58 	.word	0xfcce1c58
 80080c4:	3f800e6a 	.word	0x3f800e6a
 80080c8:	40040000 	.word	0x40040000
 80080cc:	00000000 	.word	0x00000000

080080d0 <can1_ams_cell_voltages_v10s10_decode>:

double can1_ams_cell_voltages_v10s10_decode(uint8_t value)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80080da:	79fb      	ldrb	r3, [r7, #7]
 80080dc:	4618      	mov	r0, r3
 80080de:	f7f8 fa03 	bl	80004e8 <__aeabi_ui2d>
 80080e2:	a30e      	add	r3, pc, #56	; (adr r3, 800811c <can1_ams_cell_voltages_v10s10_decode+0x4c>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f7f8 fa78 	bl	80005dc <__aeabi_dmul>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4610      	mov	r0, r2
 80080f2:	4619      	mov	r1, r3
 80080f4:	f04f 0200 	mov.w	r2, #0
 80080f8:	4b07      	ldr	r3, [pc, #28]	; (8008118 <can1_ams_cell_voltages_v10s10_decode+0x48>)
 80080fa:	f7f8 f8b9 	bl	8000270 <__adddf3>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	ec43 2b17 	vmov	d7, r2, r3
}
 8008106:	eeb0 0a47 	vmov.f32	s0, s14
 800810a:	eef0 0a67 	vmov.f32	s1, s15
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	f3af 8000 	nop.w
 8008118:	40040000 	.word	0x40040000
 800811c:	fcce1c58 	.word	0xfcce1c58
 8008120:	3f800e6a 	.word	0x3f800e6a
 8008124:	00000000 	.word	0x00000000

08008128 <can1_ams_cell_voltages_v4s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s11_encode(double value)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008132:	f04f 0200 	mov.w	r2, #0
 8008136:	4b10      	ldr	r3, [pc, #64]	; (8008178 <can1_ams_cell_voltages_v4s11_encode+0x50>)
 8008138:	e9d7 0100 	ldrd	r0, r1, [r7]
 800813c:	f7f8 f896 	bl	800026c <__aeabi_dsub>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4610      	mov	r0, r2
 8008146:	4619      	mov	r1, r3
 8008148:	a309      	add	r3, pc, #36	; (adr r3, 8008170 <can1_ams_cell_voltages_v4s11_encode+0x48>)
 800814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814e:	f7f8 fb6f 	bl	8000830 <__aeabi_ddiv>
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	4610      	mov	r0, r2
 8008158:	4619      	mov	r1, r3
 800815a:	f7f8 fd17 	bl	8000b8c <__aeabi_d2uiz>
 800815e:	4603      	mov	r3, r0
 8008160:	b2db      	uxtb	r3, r3
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	f3af 8000 	nop.w
 8008170:	fcce1c58 	.word	0xfcce1c58
 8008174:	3f800e6a 	.word	0x3f800e6a
 8008178:	40040000 	.word	0x40040000
 800817c:	00000000 	.word	0x00000000

08008180 <can1_ams_cell_voltages_v4s11_decode>:

double can1_ams_cell_voltages_v4s11_decode(uint8_t value)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	4618      	mov	r0, r3
 800818e:	f7f8 f9ab 	bl	80004e8 <__aeabi_ui2d>
 8008192:	a30e      	add	r3, pc, #56	; (adr r3, 80081cc <can1_ams_cell_voltages_v4s11_decode+0x4c>)
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	f7f8 fa20 	bl	80005dc <__aeabi_dmul>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4610      	mov	r0, r2
 80081a2:	4619      	mov	r1, r3
 80081a4:	f04f 0200 	mov.w	r2, #0
 80081a8:	4b07      	ldr	r3, [pc, #28]	; (80081c8 <can1_ams_cell_voltages_v4s11_decode+0x48>)
 80081aa:	f7f8 f861 	bl	8000270 <__adddf3>
 80081ae:	4602      	mov	r2, r0
 80081b0:	460b      	mov	r3, r1
 80081b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80081b6:	eeb0 0a47 	vmov.f32	s0, s14
 80081ba:	eef0 0a67 	vmov.f32	s1, s15
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	f3af 8000 	nop.w
 80081c8:	40040000 	.word	0x40040000
 80081cc:	fcce1c58 	.word	0xfcce1c58
 80081d0:	3f800e6a 	.word	0x3f800e6a
 80081d4:	00000000 	.word	0x00000000

080081d8 <can1_ams_cell_voltages_v10s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s11_encode(double value)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80081e2:	f04f 0200 	mov.w	r2, #0
 80081e6:	4b10      	ldr	r3, [pc, #64]	; (8008228 <can1_ams_cell_voltages_v10s11_encode+0x50>)
 80081e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ec:	f7f8 f83e 	bl	800026c <__aeabi_dsub>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4610      	mov	r0, r2
 80081f6:	4619      	mov	r1, r3
 80081f8:	a309      	add	r3, pc, #36	; (adr r3, 8008220 <can1_ams_cell_voltages_v10s11_encode+0x48>)
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	f7f8 fb17 	bl	8000830 <__aeabi_ddiv>
 8008202:	4602      	mov	r2, r0
 8008204:	460b      	mov	r3, r1
 8008206:	4610      	mov	r0, r2
 8008208:	4619      	mov	r1, r3
 800820a:	f7f8 fcbf 	bl	8000b8c <__aeabi_d2uiz>
 800820e:	4603      	mov	r3, r0
 8008210:	b2db      	uxtb	r3, r3
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	f3af 8000 	nop.w
 8008220:	fcce1c58 	.word	0xfcce1c58
 8008224:	3f800e6a 	.word	0x3f800e6a
 8008228:	40040000 	.word	0x40040000
 800822c:	00000000 	.word	0x00000000

08008230 <can1_ams_cell_voltages_v10s11_decode>:

double can1_ams_cell_voltages_v10s11_decode(uint8_t value)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800823a:	79fb      	ldrb	r3, [r7, #7]
 800823c:	4618      	mov	r0, r3
 800823e:	f7f8 f953 	bl	80004e8 <__aeabi_ui2d>
 8008242:	a30e      	add	r3, pc, #56	; (adr r3, 800827c <can1_ams_cell_voltages_v10s11_decode+0x4c>)
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	f7f8 f9c8 	bl	80005dc <__aeabi_dmul>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	4610      	mov	r0, r2
 8008252:	4619      	mov	r1, r3
 8008254:	f04f 0200 	mov.w	r2, #0
 8008258:	4b07      	ldr	r3, [pc, #28]	; (8008278 <can1_ams_cell_voltages_v10s11_decode+0x48>)
 800825a:	f7f8 f809 	bl	8000270 <__adddf3>
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	ec43 2b17 	vmov	d7, r2, r3
}
 8008266:	eeb0 0a47 	vmov.f32	s0, s14
 800826a:	eef0 0a67 	vmov.f32	s1, s15
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	f3af 8000 	nop.w
 8008278:	40040000 	.word	0x40040000
 800827c:	fcce1c58 	.word	0xfcce1c58
 8008280:	3f800e6a 	.word	0x3f800e6a
 8008284:	00000000 	.word	0x00000000

08008288 <can1_ams_cell_voltages_v4s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s12_encode(double value)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008292:	f04f 0200 	mov.w	r2, #0
 8008296:	4b10      	ldr	r3, [pc, #64]	; (80082d8 <can1_ams_cell_voltages_v4s12_encode+0x50>)
 8008298:	e9d7 0100 	ldrd	r0, r1, [r7]
 800829c:	f7f7 ffe6 	bl	800026c <__aeabi_dsub>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	4610      	mov	r0, r2
 80082a6:	4619      	mov	r1, r3
 80082a8:	a309      	add	r3, pc, #36	; (adr r3, 80082d0 <can1_ams_cell_voltages_v4s12_encode+0x48>)
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	f7f8 fabf 	bl	8000830 <__aeabi_ddiv>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4610      	mov	r0, r2
 80082b8:	4619      	mov	r1, r3
 80082ba:	f7f8 fc67 	bl	8000b8c <__aeabi_d2uiz>
 80082be:	4603      	mov	r3, r0
 80082c0:	b2db      	uxtb	r3, r3
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	f3af 8000 	nop.w
 80082d0:	fcce1c58 	.word	0xfcce1c58
 80082d4:	3f800e6a 	.word	0x3f800e6a
 80082d8:	40040000 	.word	0x40040000
 80082dc:	00000000 	.word	0x00000000

080082e0 <can1_ams_cell_voltages_v4s12_decode>:

double can1_ams_cell_voltages_v4s12_decode(uint8_t value)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7f8 f8fb 	bl	80004e8 <__aeabi_ui2d>
 80082f2:	a30e      	add	r3, pc, #56	; (adr r3, 800832c <can1_ams_cell_voltages_v4s12_decode+0x4c>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f8 f970 	bl	80005dc <__aeabi_dmul>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4610      	mov	r0, r2
 8008302:	4619      	mov	r1, r3
 8008304:	f04f 0200 	mov.w	r2, #0
 8008308:	4b07      	ldr	r3, [pc, #28]	; (8008328 <can1_ams_cell_voltages_v4s12_decode+0x48>)
 800830a:	f7f7 ffb1 	bl	8000270 <__adddf3>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	ec43 2b17 	vmov	d7, r2, r3
}
 8008316:	eeb0 0a47 	vmov.f32	s0, s14
 800831a:	eef0 0a67 	vmov.f32	s1, s15
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	f3af 8000 	nop.w
 8008328:	40040000 	.word	0x40040000
 800832c:	fcce1c58 	.word	0xfcce1c58
 8008330:	3f800e6a 	.word	0x3f800e6a
 8008334:	00000000 	.word	0x00000000

08008338 <can1_ams_cell_voltages_v10s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s12_encode(double value)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008342:	f04f 0200 	mov.w	r2, #0
 8008346:	4b10      	ldr	r3, [pc, #64]	; (8008388 <can1_ams_cell_voltages_v10s12_encode+0x50>)
 8008348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800834c:	f7f7 ff8e 	bl	800026c <__aeabi_dsub>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4610      	mov	r0, r2
 8008356:	4619      	mov	r1, r3
 8008358:	a309      	add	r3, pc, #36	; (adr r3, 8008380 <can1_ams_cell_voltages_v10s12_encode+0x48>)
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	f7f8 fa67 	bl	8000830 <__aeabi_ddiv>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4610      	mov	r0, r2
 8008368:	4619      	mov	r1, r3
 800836a:	f7f8 fc0f 	bl	8000b8c <__aeabi_d2uiz>
 800836e:	4603      	mov	r3, r0
 8008370:	b2db      	uxtb	r3, r3
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	f3af 8000 	nop.w
 8008380:	fcce1c58 	.word	0xfcce1c58
 8008384:	3f800e6a 	.word	0x3f800e6a
 8008388:	40040000 	.word	0x40040000
 800838c:	00000000 	.word	0x00000000

08008390 <can1_ams_cell_voltages_v10s12_decode>:

double can1_ams_cell_voltages_v10s12_decode(uint8_t value)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	4618      	mov	r0, r3
 800839e:	f7f8 f8a3 	bl	80004e8 <__aeabi_ui2d>
 80083a2:	a30e      	add	r3, pc, #56	; (adr r3, 80083dc <can1_ams_cell_voltages_v10s12_decode+0x4c>)
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	f7f8 f918 	bl	80005dc <__aeabi_dmul>
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	4610      	mov	r0, r2
 80083b2:	4619      	mov	r1, r3
 80083b4:	f04f 0200 	mov.w	r2, #0
 80083b8:	4b07      	ldr	r3, [pc, #28]	; (80083d8 <can1_ams_cell_voltages_v10s12_decode+0x48>)
 80083ba:	f7f7 ff59 	bl	8000270 <__adddf3>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80083c6:	eeb0 0a47 	vmov.f32	s0, s14
 80083ca:	eef0 0a67 	vmov.f32	s1, s15
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	f3af 8000 	nop.w
 80083d8:	40040000 	.word	0x40040000
 80083dc:	fcce1c58 	.word	0xfcce1c58
 80083e0:	3f800e6a 	.word	0x3f800e6a
 80083e4:	00000000 	.word	0x00000000

080083e8 <can1_ams_cell_voltages_v5s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s1_encode(double value)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80083f2:	f04f 0200 	mov.w	r2, #0
 80083f6:	4b10      	ldr	r3, [pc, #64]	; (8008438 <can1_ams_cell_voltages_v5s1_encode+0x50>)
 80083f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083fc:	f7f7 ff36 	bl	800026c <__aeabi_dsub>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4610      	mov	r0, r2
 8008406:	4619      	mov	r1, r3
 8008408:	a309      	add	r3, pc, #36	; (adr r3, 8008430 <can1_ams_cell_voltages_v5s1_encode+0x48>)
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	f7f8 fa0f 	bl	8000830 <__aeabi_ddiv>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	4610      	mov	r0, r2
 8008418:	4619      	mov	r1, r3
 800841a:	f7f8 fbb7 	bl	8000b8c <__aeabi_d2uiz>
 800841e:	4603      	mov	r3, r0
 8008420:	b2db      	uxtb	r3, r3
}
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	f3af 8000 	nop.w
 8008430:	fcce1c58 	.word	0xfcce1c58
 8008434:	3f800e6a 	.word	0x3f800e6a
 8008438:	40040000 	.word	0x40040000
 800843c:	00000000 	.word	0x00000000

08008440 <can1_ams_cell_voltages_v5s1_decode>:

double can1_ams_cell_voltages_v5s1_decode(uint8_t value)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	4618      	mov	r0, r3
 800844e:	f7f8 f84b 	bl	80004e8 <__aeabi_ui2d>
 8008452:	a30e      	add	r3, pc, #56	; (adr r3, 800848c <can1_ams_cell_voltages_v5s1_decode+0x4c>)
 8008454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008458:	f7f8 f8c0 	bl	80005dc <__aeabi_dmul>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	4610      	mov	r0, r2
 8008462:	4619      	mov	r1, r3
 8008464:	f04f 0200 	mov.w	r2, #0
 8008468:	4b07      	ldr	r3, [pc, #28]	; (8008488 <can1_ams_cell_voltages_v5s1_decode+0x48>)
 800846a:	f7f7 ff01 	bl	8000270 <__adddf3>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	ec43 2b17 	vmov	d7, r2, r3
}
 8008476:	eeb0 0a47 	vmov.f32	s0, s14
 800847a:	eef0 0a67 	vmov.f32	s1, s15
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	f3af 8000 	nop.w
 8008488:	40040000 	.word	0x40040000
 800848c:	fcce1c58 	.word	0xfcce1c58
 8008490:	3f800e6a 	.word	0x3f800e6a
 8008494:	00000000 	.word	0x00000000

08008498 <can1_ams_cell_voltages_v11s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s1_encode(double value)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80084a2:	f04f 0200 	mov.w	r2, #0
 80084a6:	4b10      	ldr	r3, [pc, #64]	; (80084e8 <can1_ams_cell_voltages_v11s1_encode+0x50>)
 80084a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084ac:	f7f7 fede 	bl	800026c <__aeabi_dsub>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4610      	mov	r0, r2
 80084b6:	4619      	mov	r1, r3
 80084b8:	a309      	add	r3, pc, #36	; (adr r3, 80084e0 <can1_ams_cell_voltages_v11s1_encode+0x48>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	f7f8 f9b7 	bl	8000830 <__aeabi_ddiv>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	4610      	mov	r0, r2
 80084c8:	4619      	mov	r1, r3
 80084ca:	f7f8 fb5f 	bl	8000b8c <__aeabi_d2uiz>
 80084ce:	4603      	mov	r3, r0
 80084d0:	b2db      	uxtb	r3, r3
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	f3af 8000 	nop.w
 80084e0:	fcce1c58 	.word	0xfcce1c58
 80084e4:	3f800e6a 	.word	0x3f800e6a
 80084e8:	40040000 	.word	0x40040000
 80084ec:	00000000 	.word	0x00000000

080084f0 <can1_ams_cell_voltages_v11s1_decode>:

double can1_ams_cell_voltages_v11s1_decode(uint8_t value)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7f7 fff3 	bl	80004e8 <__aeabi_ui2d>
 8008502:	a30e      	add	r3, pc, #56	; (adr r3, 800853c <can1_ams_cell_voltages_v11s1_decode+0x4c>)
 8008504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008508:	f7f8 f868 	bl	80005dc <__aeabi_dmul>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4610      	mov	r0, r2
 8008512:	4619      	mov	r1, r3
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	4b07      	ldr	r3, [pc, #28]	; (8008538 <can1_ams_cell_voltages_v11s1_decode+0x48>)
 800851a:	f7f7 fea9 	bl	8000270 <__adddf3>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	ec43 2b17 	vmov	d7, r2, r3
}
 8008526:	eeb0 0a47 	vmov.f32	s0, s14
 800852a:	eef0 0a67 	vmov.f32	s1, s15
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	f3af 8000 	nop.w
 8008538:	40040000 	.word	0x40040000
 800853c:	fcce1c58 	.word	0xfcce1c58
 8008540:	3f800e6a 	.word	0x3f800e6a
 8008544:	00000000 	.word	0x00000000

08008548 <can1_ams_cell_voltages_v5s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s2_encode(double value)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008552:	f04f 0200 	mov.w	r2, #0
 8008556:	4b10      	ldr	r3, [pc, #64]	; (8008598 <can1_ams_cell_voltages_v5s2_encode+0x50>)
 8008558:	e9d7 0100 	ldrd	r0, r1, [r7]
 800855c:	f7f7 fe86 	bl	800026c <__aeabi_dsub>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4610      	mov	r0, r2
 8008566:	4619      	mov	r1, r3
 8008568:	a309      	add	r3, pc, #36	; (adr r3, 8008590 <can1_ams_cell_voltages_v5s2_encode+0x48>)
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f7f8 f95f 	bl	8000830 <__aeabi_ddiv>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4610      	mov	r0, r2
 8008578:	4619      	mov	r1, r3
 800857a:	f7f8 fb07 	bl	8000b8c <__aeabi_d2uiz>
 800857e:	4603      	mov	r3, r0
 8008580:	b2db      	uxtb	r3, r3
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	f3af 8000 	nop.w
 8008590:	fcce1c58 	.word	0xfcce1c58
 8008594:	3f800e6a 	.word	0x3f800e6a
 8008598:	40040000 	.word	0x40040000
 800859c:	00000000 	.word	0x00000000

080085a0 <can1_ams_cell_voltages_v5s2_decode>:

double can1_ams_cell_voltages_v5s2_decode(uint8_t value)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80085aa:	79fb      	ldrb	r3, [r7, #7]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7f7 ff9b 	bl	80004e8 <__aeabi_ui2d>
 80085b2:	a30e      	add	r3, pc, #56	; (adr r3, 80085ec <can1_ams_cell_voltages_v5s2_decode+0x4c>)
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	f7f8 f810 	bl	80005dc <__aeabi_dmul>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4610      	mov	r0, r2
 80085c2:	4619      	mov	r1, r3
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	4b07      	ldr	r3, [pc, #28]	; (80085e8 <can1_ams_cell_voltages_v5s2_decode+0x48>)
 80085ca:	f7f7 fe51 	bl	8000270 <__adddf3>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80085d6:	eeb0 0a47 	vmov.f32	s0, s14
 80085da:	eef0 0a67 	vmov.f32	s1, s15
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	f3af 8000 	nop.w
 80085e8:	40040000 	.word	0x40040000
 80085ec:	fcce1c58 	.word	0xfcce1c58
 80085f0:	3f800e6a 	.word	0x3f800e6a
 80085f4:	00000000 	.word	0x00000000

080085f8 <can1_ams_cell_voltages_v5s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s3_encode(double value)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008602:	f04f 0200 	mov.w	r2, #0
 8008606:	4b10      	ldr	r3, [pc, #64]	; (8008648 <can1_ams_cell_voltages_v5s3_encode+0x50>)
 8008608:	e9d7 0100 	ldrd	r0, r1, [r7]
 800860c:	f7f7 fe2e 	bl	800026c <__aeabi_dsub>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4610      	mov	r0, r2
 8008616:	4619      	mov	r1, r3
 8008618:	a309      	add	r3, pc, #36	; (adr r3, 8008640 <can1_ams_cell_voltages_v5s3_encode+0x48>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f8 f907 	bl	8000830 <__aeabi_ddiv>
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	4610      	mov	r0, r2
 8008628:	4619      	mov	r1, r3
 800862a:	f7f8 faaf 	bl	8000b8c <__aeabi_d2uiz>
 800862e:	4603      	mov	r3, r0
 8008630:	b2db      	uxtb	r3, r3
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	f3af 8000 	nop.w
 8008640:	fcce1c58 	.word	0xfcce1c58
 8008644:	3f800e6a 	.word	0x3f800e6a
 8008648:	40040000 	.word	0x40040000
 800864c:	00000000 	.word	0x00000000

08008650 <can1_ams_cell_voltages_v5s3_decode>:

double can1_ams_cell_voltages_v5s3_decode(uint8_t value)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800865a:	79fb      	ldrb	r3, [r7, #7]
 800865c:	4618      	mov	r0, r3
 800865e:	f7f7 ff43 	bl	80004e8 <__aeabi_ui2d>
 8008662:	a30e      	add	r3, pc, #56	; (adr r3, 800869c <can1_ams_cell_voltages_v5s3_decode+0x4c>)
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	f7f7 ffb8 	bl	80005dc <__aeabi_dmul>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4610      	mov	r0, r2
 8008672:	4619      	mov	r1, r3
 8008674:	f04f 0200 	mov.w	r2, #0
 8008678:	4b07      	ldr	r3, [pc, #28]	; (8008698 <can1_ams_cell_voltages_v5s3_decode+0x48>)
 800867a:	f7f7 fdf9 	bl	8000270 <__adddf3>
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	ec43 2b17 	vmov	d7, r2, r3
}
 8008686:	eeb0 0a47 	vmov.f32	s0, s14
 800868a:	eef0 0a67 	vmov.f32	s1, s15
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	f3af 8000 	nop.w
 8008698:	40040000 	.word	0x40040000
 800869c:	fcce1c58 	.word	0xfcce1c58
 80086a0:	3f800e6a 	.word	0x3f800e6a
 80086a4:	00000000 	.word	0x00000000

080086a8 <can1_ams_cell_voltages_v11s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s3_encode(double value)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <can1_ams_cell_voltages_v11s3_encode+0x50>)
 80086b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086bc:	f7f7 fdd6 	bl	800026c <__aeabi_dsub>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	4610      	mov	r0, r2
 80086c6:	4619      	mov	r1, r3
 80086c8:	a309      	add	r3, pc, #36	; (adr r3, 80086f0 <can1_ams_cell_voltages_v11s3_encode+0x48>)
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	f7f8 f8af 	bl	8000830 <__aeabi_ddiv>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4610      	mov	r0, r2
 80086d8:	4619      	mov	r1, r3
 80086da:	f7f8 fa57 	bl	8000b8c <__aeabi_d2uiz>
 80086de:	4603      	mov	r3, r0
 80086e0:	b2db      	uxtb	r3, r3
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	f3af 8000 	nop.w
 80086f0:	fcce1c58 	.word	0xfcce1c58
 80086f4:	3f800e6a 	.word	0x3f800e6a
 80086f8:	40040000 	.word	0x40040000
 80086fc:	00000000 	.word	0x00000000

08008700 <can1_ams_cell_voltages_v11s3_decode>:

double can1_ams_cell_voltages_v11s3_decode(uint8_t value)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	4618      	mov	r0, r3
 800870e:	f7f7 feeb 	bl	80004e8 <__aeabi_ui2d>
 8008712:	a30e      	add	r3, pc, #56	; (adr r3, 800874c <can1_ams_cell_voltages_v11s3_decode+0x4c>)
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	f7f7 ff60 	bl	80005dc <__aeabi_dmul>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4610      	mov	r0, r2
 8008722:	4619      	mov	r1, r3
 8008724:	f04f 0200 	mov.w	r2, #0
 8008728:	4b07      	ldr	r3, [pc, #28]	; (8008748 <can1_ams_cell_voltages_v11s3_decode+0x48>)
 800872a:	f7f7 fda1 	bl	8000270 <__adddf3>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	ec43 2b17 	vmov	d7, r2, r3
}
 8008736:	eeb0 0a47 	vmov.f32	s0, s14
 800873a:	eef0 0a67 	vmov.f32	s1, s15
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	f3af 8000 	nop.w
 8008748:	40040000 	.word	0x40040000
 800874c:	fcce1c58 	.word	0xfcce1c58
 8008750:	3f800e6a 	.word	0x3f800e6a
 8008754:	00000000 	.word	0x00000000

08008758 <can1_ams_cell_voltages_v5s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s4_encode(double value)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008762:	f04f 0200 	mov.w	r2, #0
 8008766:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <can1_ams_cell_voltages_v5s4_encode+0x50>)
 8008768:	e9d7 0100 	ldrd	r0, r1, [r7]
 800876c:	f7f7 fd7e 	bl	800026c <__aeabi_dsub>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4610      	mov	r0, r2
 8008776:	4619      	mov	r1, r3
 8008778:	a309      	add	r3, pc, #36	; (adr r3, 80087a0 <can1_ams_cell_voltages_v5s4_encode+0x48>)
 800877a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877e:	f7f8 f857 	bl	8000830 <__aeabi_ddiv>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4610      	mov	r0, r2
 8008788:	4619      	mov	r1, r3
 800878a:	f7f8 f9ff 	bl	8000b8c <__aeabi_d2uiz>
 800878e:	4603      	mov	r3, r0
 8008790:	b2db      	uxtb	r3, r3
}
 8008792:	4618      	mov	r0, r3
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	f3af 8000 	nop.w
 80087a0:	fcce1c58 	.word	0xfcce1c58
 80087a4:	3f800e6a 	.word	0x3f800e6a
 80087a8:	40040000 	.word	0x40040000
 80087ac:	00000000 	.word	0x00000000

080087b0 <can1_ams_cell_voltages_v5s4_decode>:

double can1_ams_cell_voltages_v5s4_decode(uint8_t value)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	4618      	mov	r0, r3
 80087be:	f7f7 fe93 	bl	80004e8 <__aeabi_ui2d>
 80087c2:	a30e      	add	r3, pc, #56	; (adr r3, 80087fc <can1_ams_cell_voltages_v5s4_decode+0x4c>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	f7f7 ff08 	bl	80005dc <__aeabi_dmul>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4610      	mov	r0, r2
 80087d2:	4619      	mov	r1, r3
 80087d4:	f04f 0200 	mov.w	r2, #0
 80087d8:	4b07      	ldr	r3, [pc, #28]	; (80087f8 <can1_ams_cell_voltages_v5s4_decode+0x48>)
 80087da:	f7f7 fd49 	bl	8000270 <__adddf3>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80087e6:	eeb0 0a47 	vmov.f32	s0, s14
 80087ea:	eef0 0a67 	vmov.f32	s1, s15
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	f3af 8000 	nop.w
 80087f8:	40040000 	.word	0x40040000
 80087fc:	fcce1c58 	.word	0xfcce1c58
 8008800:	3f800e6a 	.word	0x3f800e6a
 8008804:	00000000 	.word	0x00000000

08008808 <can1_ams_cell_voltages_v5s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s5_encode(double value)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	4b10      	ldr	r3, [pc, #64]	; (8008858 <can1_ams_cell_voltages_v5s5_encode+0x50>)
 8008818:	e9d7 0100 	ldrd	r0, r1, [r7]
 800881c:	f7f7 fd26 	bl	800026c <__aeabi_dsub>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	4610      	mov	r0, r2
 8008826:	4619      	mov	r1, r3
 8008828:	a309      	add	r3, pc, #36	; (adr r3, 8008850 <can1_ams_cell_voltages_v5s5_encode+0x48>)
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	f7f7 ffff 	bl	8000830 <__aeabi_ddiv>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	4610      	mov	r0, r2
 8008838:	4619      	mov	r1, r3
 800883a:	f7f8 f9a7 	bl	8000b8c <__aeabi_d2uiz>
 800883e:	4603      	mov	r3, r0
 8008840:	b2db      	uxtb	r3, r3
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	f3af 8000 	nop.w
 8008850:	fcce1c58 	.word	0xfcce1c58
 8008854:	3f800e6a 	.word	0x3f800e6a
 8008858:	40040000 	.word	0x40040000
 800885c:	00000000 	.word	0x00000000

08008860 <can1_ams_cell_voltages_v5s5_decode>:

double can1_ams_cell_voltages_v5s5_decode(uint8_t value)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	4618      	mov	r0, r3
 800886e:	f7f7 fe3b 	bl	80004e8 <__aeabi_ui2d>
 8008872:	a30e      	add	r3, pc, #56	; (adr r3, 80088ac <can1_ams_cell_voltages_v5s5_decode+0x4c>)
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	f7f7 feb0 	bl	80005dc <__aeabi_dmul>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4610      	mov	r0, r2
 8008882:	4619      	mov	r1, r3
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	4b07      	ldr	r3, [pc, #28]	; (80088a8 <can1_ams_cell_voltages_v5s5_decode+0x48>)
 800888a:	f7f7 fcf1 	bl	8000270 <__adddf3>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	ec43 2b17 	vmov	d7, r2, r3
}
 8008896:	eeb0 0a47 	vmov.f32	s0, s14
 800889a:	eef0 0a67 	vmov.f32	s1, s15
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	f3af 8000 	nop.w
 80088a8:	40040000 	.word	0x40040000
 80088ac:	fcce1c58 	.word	0xfcce1c58
 80088b0:	3f800e6a 	.word	0x3f800e6a
 80088b4:	00000000 	.word	0x00000000

080088b8 <can1_ams_cell_voltages_v11s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s5_encode(double value)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80088c2:	f04f 0200 	mov.w	r2, #0
 80088c6:	4b10      	ldr	r3, [pc, #64]	; (8008908 <can1_ams_cell_voltages_v11s5_encode+0x50>)
 80088c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088cc:	f7f7 fcce 	bl	800026c <__aeabi_dsub>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4610      	mov	r0, r2
 80088d6:	4619      	mov	r1, r3
 80088d8:	a309      	add	r3, pc, #36	; (adr r3, 8008900 <can1_ams_cell_voltages_v11s5_encode+0x48>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	f7f7 ffa7 	bl	8000830 <__aeabi_ddiv>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4610      	mov	r0, r2
 80088e8:	4619      	mov	r1, r3
 80088ea:	f7f8 f94f 	bl	8000b8c <__aeabi_d2uiz>
 80088ee:	4603      	mov	r3, r0
 80088f0:	b2db      	uxtb	r3, r3
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	f3af 8000 	nop.w
 8008900:	fcce1c58 	.word	0xfcce1c58
 8008904:	3f800e6a 	.word	0x3f800e6a
 8008908:	40040000 	.word	0x40040000
 800890c:	00000000 	.word	0x00000000

08008910 <can1_ams_cell_voltages_v11s5_decode>:

double can1_ams_cell_voltages_v11s5_decode(uint8_t value)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	4618      	mov	r0, r3
 800891e:	f7f7 fde3 	bl	80004e8 <__aeabi_ui2d>
 8008922:	a30e      	add	r3, pc, #56	; (adr r3, 800895c <can1_ams_cell_voltages_v11s5_decode+0x4c>)
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	f7f7 fe58 	bl	80005dc <__aeabi_dmul>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4610      	mov	r0, r2
 8008932:	4619      	mov	r1, r3
 8008934:	f04f 0200 	mov.w	r2, #0
 8008938:	4b07      	ldr	r3, [pc, #28]	; (8008958 <can1_ams_cell_voltages_v11s5_decode+0x48>)
 800893a:	f7f7 fc99 	bl	8000270 <__adddf3>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	ec43 2b17 	vmov	d7, r2, r3
}
 8008946:	eeb0 0a47 	vmov.f32	s0, s14
 800894a:	eef0 0a67 	vmov.f32	s1, s15
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	f3af 8000 	nop.w
 8008958:	40040000 	.word	0x40040000
 800895c:	fcce1c58 	.word	0xfcce1c58
 8008960:	3f800e6a 	.word	0x3f800e6a
 8008964:	00000000 	.word	0x00000000

08008968 <can1_ams_cell_voltages_v5s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s6_encode(double value)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008972:	f04f 0200 	mov.w	r2, #0
 8008976:	4b10      	ldr	r3, [pc, #64]	; (80089b8 <can1_ams_cell_voltages_v5s6_encode+0x50>)
 8008978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800897c:	f7f7 fc76 	bl	800026c <__aeabi_dsub>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4610      	mov	r0, r2
 8008986:	4619      	mov	r1, r3
 8008988:	a309      	add	r3, pc, #36	; (adr r3, 80089b0 <can1_ams_cell_voltages_v5s6_encode+0x48>)
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	f7f7 ff4f 	bl	8000830 <__aeabi_ddiv>
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	4610      	mov	r0, r2
 8008998:	4619      	mov	r1, r3
 800899a:	f7f8 f8f7 	bl	8000b8c <__aeabi_d2uiz>
 800899e:	4603      	mov	r3, r0
 80089a0:	b2db      	uxtb	r3, r3
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	f3af 8000 	nop.w
 80089b0:	fcce1c58 	.word	0xfcce1c58
 80089b4:	3f800e6a 	.word	0x3f800e6a
 80089b8:	40040000 	.word	0x40040000
 80089bc:	00000000 	.word	0x00000000

080089c0 <can1_ams_cell_voltages_v5s6_decode>:

double can1_ams_cell_voltages_v5s6_decode(uint8_t value)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	4603      	mov	r3, r0
 80089c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80089ca:	79fb      	ldrb	r3, [r7, #7]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7f7 fd8b 	bl	80004e8 <__aeabi_ui2d>
 80089d2:	a30e      	add	r3, pc, #56	; (adr r3, 8008a0c <can1_ams_cell_voltages_v5s6_decode+0x4c>)
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	f7f7 fe00 	bl	80005dc <__aeabi_dmul>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4610      	mov	r0, r2
 80089e2:	4619      	mov	r1, r3
 80089e4:	f04f 0200 	mov.w	r2, #0
 80089e8:	4b07      	ldr	r3, [pc, #28]	; (8008a08 <can1_ams_cell_voltages_v5s6_decode+0x48>)
 80089ea:	f7f7 fc41 	bl	8000270 <__adddf3>
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80089f6:	eeb0 0a47 	vmov.f32	s0, s14
 80089fa:	eef0 0a67 	vmov.f32	s1, s15
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	f3af 8000 	nop.w
 8008a08:	40040000 	.word	0x40040000
 8008a0c:	fcce1c58 	.word	0xfcce1c58
 8008a10:	3f800e6a 	.word	0x3f800e6a
 8008a14:	00000000 	.word	0x00000000

08008a18 <can1_ams_cell_voltages_v5s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s7_encode(double value)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008a22:	f04f 0200 	mov.w	r2, #0
 8008a26:	4b10      	ldr	r3, [pc, #64]	; (8008a68 <can1_ams_cell_voltages_v5s7_encode+0x50>)
 8008a28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a2c:	f7f7 fc1e 	bl	800026c <__aeabi_dsub>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	4610      	mov	r0, r2
 8008a36:	4619      	mov	r1, r3
 8008a38:	a309      	add	r3, pc, #36	; (adr r3, 8008a60 <can1_ams_cell_voltages_v5s7_encode+0x48>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f7f7 fef7 	bl	8000830 <__aeabi_ddiv>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	4610      	mov	r0, r2
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f7f8 f89f 	bl	8000b8c <__aeabi_d2uiz>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	b2db      	uxtb	r3, r3
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	f3af 8000 	nop.w
 8008a60:	fcce1c58 	.word	0xfcce1c58
 8008a64:	3f800e6a 	.word	0x3f800e6a
 8008a68:	40040000 	.word	0x40040000
 8008a6c:	00000000 	.word	0x00000000

08008a70 <can1_ams_cell_voltages_v5s7_decode>:

double can1_ams_cell_voltages_v5s7_decode(uint8_t value)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	4603      	mov	r3, r0
 8008a78:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7f7 fd33 	bl	80004e8 <__aeabi_ui2d>
 8008a82:	a30e      	add	r3, pc, #56	; (adr r3, 8008abc <can1_ams_cell_voltages_v5s7_decode+0x4c>)
 8008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a88:	f7f7 fda8 	bl	80005dc <__aeabi_dmul>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4610      	mov	r0, r2
 8008a92:	4619      	mov	r1, r3
 8008a94:	f04f 0200 	mov.w	r2, #0
 8008a98:	4b07      	ldr	r3, [pc, #28]	; (8008ab8 <can1_ams_cell_voltages_v5s7_decode+0x48>)
 8008a9a:	f7f7 fbe9 	bl	8000270 <__adddf3>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	ec43 2b17 	vmov	d7, r2, r3
}
 8008aa6:	eeb0 0a47 	vmov.f32	s0, s14
 8008aaa:	eef0 0a67 	vmov.f32	s1, s15
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	f3af 8000 	nop.w
 8008ab8:	40040000 	.word	0x40040000
 8008abc:	fcce1c58 	.word	0xfcce1c58
 8008ac0:	3f800e6a 	.word	0x3f800e6a
 8008ac4:	00000000 	.word	0x00000000

08008ac8 <can1_ams_cell_voltages_v11s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s7_encode(double value)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008ad2:	f04f 0200 	mov.w	r2, #0
 8008ad6:	4b10      	ldr	r3, [pc, #64]	; (8008b18 <can1_ams_cell_voltages_v11s7_encode+0x50>)
 8008ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008adc:	f7f7 fbc6 	bl	800026c <__aeabi_dsub>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	a309      	add	r3, pc, #36	; (adr r3, 8008b10 <can1_ams_cell_voltages_v11s7_encode+0x48>)
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	f7f7 fe9f 	bl	8000830 <__aeabi_ddiv>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	4610      	mov	r0, r2
 8008af8:	4619      	mov	r1, r3
 8008afa:	f7f8 f847 	bl	8000b8c <__aeabi_d2uiz>
 8008afe:	4603      	mov	r3, r0
 8008b00:	b2db      	uxtb	r3, r3
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	f3af 8000 	nop.w
 8008b10:	fcce1c58 	.word	0xfcce1c58
 8008b14:	3f800e6a 	.word	0x3f800e6a
 8008b18:	40040000 	.word	0x40040000
 8008b1c:	00000000 	.word	0x00000000

08008b20 <can1_ams_cell_voltages_v11s7_decode>:

double can1_ams_cell_voltages_v11s7_decode(uint8_t value)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7f7 fcdb 	bl	80004e8 <__aeabi_ui2d>
 8008b32:	a30e      	add	r3, pc, #56	; (adr r3, 8008b6c <can1_ams_cell_voltages_v11s7_decode+0x4c>)
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	f7f7 fd50 	bl	80005dc <__aeabi_dmul>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4610      	mov	r0, r2
 8008b42:	4619      	mov	r1, r3
 8008b44:	f04f 0200 	mov.w	r2, #0
 8008b48:	4b07      	ldr	r3, [pc, #28]	; (8008b68 <can1_ams_cell_voltages_v11s7_decode+0x48>)
 8008b4a:	f7f7 fb91 	bl	8000270 <__adddf3>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	ec43 2b17 	vmov	d7, r2, r3
}
 8008b56:	eeb0 0a47 	vmov.f32	s0, s14
 8008b5a:	eef0 0a67 	vmov.f32	s1, s15
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	f3af 8000 	nop.w
 8008b68:	40040000 	.word	0x40040000
 8008b6c:	fcce1c58 	.word	0xfcce1c58
 8008b70:	3f800e6a 	.word	0x3f800e6a
 8008b74:	00000000 	.word	0x00000000

08008b78 <can1_ams_cell_voltages_v5s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s8_encode(double value)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008b82:	f04f 0200 	mov.w	r2, #0
 8008b86:	4b10      	ldr	r3, [pc, #64]	; (8008bc8 <can1_ams_cell_voltages_v5s8_encode+0x50>)
 8008b88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b8c:	f7f7 fb6e 	bl	800026c <__aeabi_dsub>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4610      	mov	r0, r2
 8008b96:	4619      	mov	r1, r3
 8008b98:	a309      	add	r3, pc, #36	; (adr r3, 8008bc0 <can1_ams_cell_voltages_v5s8_encode+0x48>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fe47 	bl	8000830 <__aeabi_ddiv>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	4619      	mov	r1, r3
 8008baa:	f7f7 ffef 	bl	8000b8c <__aeabi_d2uiz>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	b2db      	uxtb	r3, r3
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	f3af 8000 	nop.w
 8008bc0:	fcce1c58 	.word	0xfcce1c58
 8008bc4:	3f800e6a 	.word	0x3f800e6a
 8008bc8:	40040000 	.word	0x40040000
 8008bcc:	00000000 	.word	0x00000000

08008bd0 <can1_ams_cell_voltages_v5s8_decode>:

double can1_ams_cell_voltages_v5s8_decode(uint8_t value)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7f7 fc83 	bl	80004e8 <__aeabi_ui2d>
 8008be2:	a30e      	add	r3, pc, #56	; (adr r3, 8008c1c <can1_ams_cell_voltages_v5s8_decode+0x4c>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f7f7 fcf8 	bl	80005dc <__aeabi_dmul>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	f04f 0200 	mov.w	r2, #0
 8008bf8:	4b07      	ldr	r3, [pc, #28]	; (8008c18 <can1_ams_cell_voltages_v5s8_decode+0x48>)
 8008bfa:	f7f7 fb39 	bl	8000270 <__adddf3>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	ec43 2b17 	vmov	d7, r2, r3
}
 8008c06:	eeb0 0a47 	vmov.f32	s0, s14
 8008c0a:	eef0 0a67 	vmov.f32	s1, s15
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	f3af 8000 	nop.w
 8008c18:	40040000 	.word	0x40040000
 8008c1c:	fcce1c58 	.word	0xfcce1c58
 8008c20:	3f800e6a 	.word	0x3f800e6a
 8008c24:	00000000 	.word	0x00000000

08008c28 <can1_ams_cell_voltages_v5s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s9_encode(double value)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008c32:	f04f 0200 	mov.w	r2, #0
 8008c36:	4b10      	ldr	r3, [pc, #64]	; (8008c78 <can1_ams_cell_voltages_v5s9_encode+0x50>)
 8008c38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c3c:	f7f7 fb16 	bl	800026c <__aeabi_dsub>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4610      	mov	r0, r2
 8008c46:	4619      	mov	r1, r3
 8008c48:	a309      	add	r3, pc, #36	; (adr r3, 8008c70 <can1_ams_cell_voltages_v5s9_encode+0x48>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fdef 	bl	8000830 <__aeabi_ddiv>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4610      	mov	r0, r2
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f7f7 ff97 	bl	8000b8c <__aeabi_d2uiz>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	b2db      	uxtb	r3, r3
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	f3af 8000 	nop.w
 8008c70:	fcce1c58 	.word	0xfcce1c58
 8008c74:	3f800e6a 	.word	0x3f800e6a
 8008c78:	40040000 	.word	0x40040000
 8008c7c:	00000000 	.word	0x00000000

08008c80 <can1_ams_cell_voltages_v5s9_decode>:

double can1_ams_cell_voltages_v5s9_decode(uint8_t value)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	4603      	mov	r3, r0
 8008c88:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008c8a:	79fb      	ldrb	r3, [r7, #7]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7f7 fc2b 	bl	80004e8 <__aeabi_ui2d>
 8008c92:	a30e      	add	r3, pc, #56	; (adr r3, 8008ccc <can1_ams_cell_voltages_v5s9_decode+0x4c>)
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	f7f7 fca0 	bl	80005dc <__aeabi_dmul>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <can1_ams_cell_voltages_v5s9_decode+0x48>)
 8008caa:	f7f7 fae1 	bl	8000270 <__adddf3>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	ec43 2b17 	vmov	d7, r2, r3
}
 8008cb6:	eeb0 0a47 	vmov.f32	s0, s14
 8008cba:	eef0 0a67 	vmov.f32	s1, s15
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	f3af 8000 	nop.w
 8008cc8:	40040000 	.word	0x40040000
 8008ccc:	fcce1c58 	.word	0xfcce1c58
 8008cd0:	3f800e6a 	.word	0x3f800e6a
 8008cd4:	00000000 	.word	0x00000000

08008cd8 <can1_ams_cell_voltages_v11s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s9_encode(double value)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008ce2:	f04f 0200 	mov.w	r2, #0
 8008ce6:	4b10      	ldr	r3, [pc, #64]	; (8008d28 <can1_ams_cell_voltages_v11s9_encode+0x50>)
 8008ce8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cec:	f7f7 fabe 	bl	800026c <__aeabi_dsub>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	a309      	add	r3, pc, #36	; (adr r3, 8008d20 <can1_ams_cell_voltages_v11s9_encode+0x48>)
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	f7f7 fd97 	bl	8000830 <__aeabi_ddiv>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4610      	mov	r0, r2
 8008d08:	4619      	mov	r1, r3
 8008d0a:	f7f7 ff3f 	bl	8000b8c <__aeabi_d2uiz>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	b2db      	uxtb	r3, r3
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	f3af 8000 	nop.w
 8008d20:	fcce1c58 	.word	0xfcce1c58
 8008d24:	3f800e6a 	.word	0x3f800e6a
 8008d28:	40040000 	.word	0x40040000
 8008d2c:	00000000 	.word	0x00000000

08008d30 <can1_ams_cell_voltages_v11s9_decode>:

double can1_ams_cell_voltages_v11s9_decode(uint8_t value)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008d3a:	79fb      	ldrb	r3, [r7, #7]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7f7 fbd3 	bl	80004e8 <__aeabi_ui2d>
 8008d42:	a30e      	add	r3, pc, #56	; (adr r3, 8008d7c <can1_ams_cell_voltages_v11s9_decode+0x4c>)
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f7f7 fc48 	bl	80005dc <__aeabi_dmul>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4610      	mov	r0, r2
 8008d52:	4619      	mov	r1, r3
 8008d54:	f04f 0200 	mov.w	r2, #0
 8008d58:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <can1_ams_cell_voltages_v11s9_decode+0x48>)
 8008d5a:	f7f7 fa89 	bl	8000270 <__adddf3>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	ec43 2b17 	vmov	d7, r2, r3
}
 8008d66:	eeb0 0a47 	vmov.f32	s0, s14
 8008d6a:	eef0 0a67 	vmov.f32	s1, s15
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	f3af 8000 	nop.w
 8008d78:	40040000 	.word	0x40040000
 8008d7c:	fcce1c58 	.word	0xfcce1c58
 8008d80:	3f800e6a 	.word	0x3f800e6a
 8008d84:	00000000 	.word	0x00000000

08008d88 <can1_ams_cell_voltages_v5s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s10_encode(double value)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008d92:	f04f 0200 	mov.w	r2, #0
 8008d96:	4b10      	ldr	r3, [pc, #64]	; (8008dd8 <can1_ams_cell_voltages_v5s10_encode+0x50>)
 8008d98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d9c:	f7f7 fa66 	bl	800026c <__aeabi_dsub>
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	4610      	mov	r0, r2
 8008da6:	4619      	mov	r1, r3
 8008da8:	a309      	add	r3, pc, #36	; (adr r3, 8008dd0 <can1_ams_cell_voltages_v5s10_encode+0x48>)
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f7f7 fd3f 	bl	8000830 <__aeabi_ddiv>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4610      	mov	r0, r2
 8008db8:	4619      	mov	r1, r3
 8008dba:	f7f7 fee7 	bl	8000b8c <__aeabi_d2uiz>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	b2db      	uxtb	r3, r3
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	f3af 8000 	nop.w
 8008dd0:	fcce1c58 	.word	0xfcce1c58
 8008dd4:	3f800e6a 	.word	0x3f800e6a
 8008dd8:	40040000 	.word	0x40040000
 8008ddc:	00000000 	.word	0x00000000

08008de0 <can1_ams_cell_voltages_v5s10_decode>:

double can1_ams_cell_voltages_v5s10_decode(uint8_t value)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	4603      	mov	r3, r0
 8008de8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7f7 fb7b 	bl	80004e8 <__aeabi_ui2d>
 8008df2:	a30e      	add	r3, pc, #56	; (adr r3, 8008e2c <can1_ams_cell_voltages_v5s10_decode+0x4c>)
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	f7f7 fbf0 	bl	80005dc <__aeabi_dmul>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4610      	mov	r0, r2
 8008e02:	4619      	mov	r1, r3
 8008e04:	f04f 0200 	mov.w	r2, #0
 8008e08:	4b07      	ldr	r3, [pc, #28]	; (8008e28 <can1_ams_cell_voltages_v5s10_decode+0x48>)
 8008e0a:	f7f7 fa31 	bl	8000270 <__adddf3>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	ec43 2b17 	vmov	d7, r2, r3
}
 8008e16:	eeb0 0a47 	vmov.f32	s0, s14
 8008e1a:	eef0 0a67 	vmov.f32	s1, s15
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	f3af 8000 	nop.w
 8008e28:	40040000 	.word	0x40040000
 8008e2c:	fcce1c58 	.word	0xfcce1c58
 8008e30:	3f800e6a 	.word	0x3f800e6a
 8008e34:	00000000 	.word	0x00000000

08008e38 <can1_ams_cell_voltages_v5s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s11_encode(double value)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008e42:	f04f 0200 	mov.w	r2, #0
 8008e46:	4b10      	ldr	r3, [pc, #64]	; (8008e88 <can1_ams_cell_voltages_v5s11_encode+0x50>)
 8008e48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e4c:	f7f7 fa0e 	bl	800026c <__aeabi_dsub>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4610      	mov	r0, r2
 8008e56:	4619      	mov	r1, r3
 8008e58:	a309      	add	r3, pc, #36	; (adr r3, 8008e80 <can1_ams_cell_voltages_v5s11_encode+0x48>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	f7f7 fce7 	bl	8000830 <__aeabi_ddiv>
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4610      	mov	r0, r2
 8008e68:	4619      	mov	r1, r3
 8008e6a:	f7f7 fe8f 	bl	8000b8c <__aeabi_d2uiz>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	b2db      	uxtb	r3, r3
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	f3af 8000 	nop.w
 8008e80:	fcce1c58 	.word	0xfcce1c58
 8008e84:	3f800e6a 	.word	0x3f800e6a
 8008e88:	40040000 	.word	0x40040000
 8008e8c:	00000000 	.word	0x00000000

08008e90 <can1_ams_cell_voltages_v5s11_decode>:

double can1_ams_cell_voltages_v5s11_decode(uint8_t value)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7f7 fb23 	bl	80004e8 <__aeabi_ui2d>
 8008ea2:	a30e      	add	r3, pc, #56	; (adr r3, 8008edc <can1_ams_cell_voltages_v5s11_decode+0x4c>)
 8008ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea8:	f7f7 fb98 	bl	80005dc <__aeabi_dmul>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	f04f 0200 	mov.w	r2, #0
 8008eb8:	4b07      	ldr	r3, [pc, #28]	; (8008ed8 <can1_ams_cell_voltages_v5s11_decode+0x48>)
 8008eba:	f7f7 f9d9 	bl	8000270 <__adddf3>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	ec43 2b17 	vmov	d7, r2, r3
}
 8008ec6:	eeb0 0a47 	vmov.f32	s0, s14
 8008eca:	eef0 0a67 	vmov.f32	s1, s15
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	f3af 8000 	nop.w
 8008ed8:	40040000 	.word	0x40040000
 8008edc:	fcce1c58 	.word	0xfcce1c58
 8008ee0:	3f800e6a 	.word	0x3f800e6a
 8008ee4:	00000000 	.word	0x00000000

08008ee8 <can1_ams_cell_voltages_v11s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s11_encode(double value)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008ef2:	f04f 0200 	mov.w	r2, #0
 8008ef6:	4b10      	ldr	r3, [pc, #64]	; (8008f38 <can1_ams_cell_voltages_v11s11_encode+0x50>)
 8008ef8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008efc:	f7f7 f9b6 	bl	800026c <__aeabi_dsub>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4610      	mov	r0, r2
 8008f06:	4619      	mov	r1, r3
 8008f08:	a309      	add	r3, pc, #36	; (adr r3, 8008f30 <can1_ams_cell_voltages_v11s11_encode+0x48>)
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f7f7 fc8f 	bl	8000830 <__aeabi_ddiv>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	4610      	mov	r0, r2
 8008f18:	4619      	mov	r1, r3
 8008f1a:	f7f7 fe37 	bl	8000b8c <__aeabi_d2uiz>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	b2db      	uxtb	r3, r3
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	f3af 8000 	nop.w
 8008f30:	fcce1c58 	.word	0xfcce1c58
 8008f34:	3f800e6a 	.word	0x3f800e6a
 8008f38:	40040000 	.word	0x40040000
 8008f3c:	00000000 	.word	0x00000000

08008f40 <can1_ams_cell_voltages_v11s11_decode>:

double can1_ams_cell_voltages_v11s11_decode(uint8_t value)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7f7 facb 	bl	80004e8 <__aeabi_ui2d>
 8008f52:	a30e      	add	r3, pc, #56	; (adr r3, 8008f8c <can1_ams_cell_voltages_v11s11_decode+0x4c>)
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	f7f7 fb40 	bl	80005dc <__aeabi_dmul>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4610      	mov	r0, r2
 8008f62:	4619      	mov	r1, r3
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	4b07      	ldr	r3, [pc, #28]	; (8008f88 <can1_ams_cell_voltages_v11s11_decode+0x48>)
 8008f6a:	f7f7 f981 	bl	8000270 <__adddf3>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	ec43 2b17 	vmov	d7, r2, r3
}
 8008f76:	eeb0 0a47 	vmov.f32	s0, s14
 8008f7a:	eef0 0a67 	vmov.f32	s1, s15
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	f3af 8000 	nop.w
 8008f88:	40040000 	.word	0x40040000
 8008f8c:	fcce1c58 	.word	0xfcce1c58
 8008f90:	3f800e6a 	.word	0x3f800e6a
 8008f94:	00000000 	.word	0x00000000

08008f98 <can1_ams_cell_voltages_v5s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s12_encode(double value)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008fa2:	f04f 0200 	mov.w	r2, #0
 8008fa6:	4b10      	ldr	r3, [pc, #64]	; (8008fe8 <can1_ams_cell_voltages_v5s12_encode+0x50>)
 8008fa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fac:	f7f7 f95e 	bl	800026c <__aeabi_dsub>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	a309      	add	r3, pc, #36	; (adr r3, 8008fe0 <can1_ams_cell_voltages_v5s12_encode+0x48>)
 8008fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbe:	f7f7 fc37 	bl	8000830 <__aeabi_ddiv>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4610      	mov	r0, r2
 8008fc8:	4619      	mov	r1, r3
 8008fca:	f7f7 fddf 	bl	8000b8c <__aeabi_d2uiz>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	b2db      	uxtb	r3, r3
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	f3af 8000 	nop.w
 8008fe0:	fcce1c58 	.word	0xfcce1c58
 8008fe4:	3f800e6a 	.word	0x3f800e6a
 8008fe8:	40040000 	.word	0x40040000
 8008fec:	00000000 	.word	0x00000000

08008ff0 <can1_ams_cell_voltages_v5s12_decode>:

double can1_ams_cell_voltages_v5s12_decode(uint8_t value)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7f7 fa73 	bl	80004e8 <__aeabi_ui2d>
 8009002:	a30e      	add	r3, pc, #56	; (adr r3, 800903c <can1_ams_cell_voltages_v5s12_decode+0x4c>)
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f7f7 fae8 	bl	80005dc <__aeabi_dmul>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4610      	mov	r0, r2
 8009012:	4619      	mov	r1, r3
 8009014:	f04f 0200 	mov.w	r2, #0
 8009018:	4b07      	ldr	r3, [pc, #28]	; (8009038 <can1_ams_cell_voltages_v5s12_decode+0x48>)
 800901a:	f7f7 f929 	bl	8000270 <__adddf3>
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	ec43 2b17 	vmov	d7, r2, r3
}
 8009026:	eeb0 0a47 	vmov.f32	s0, s14
 800902a:	eef0 0a67 	vmov.f32	s1, s15
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	f3af 8000 	nop.w
 8009038:	40040000 	.word	0x40040000
 800903c:	fcce1c58 	.word	0xfcce1c58
 8009040:	3f800e6a 	.word	0x3f800e6a
 8009044:	00000000 	.word	0x00000000

08009048 <can1_ams_cell_voltages_v6s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s1_encode(double value)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	4b10      	ldr	r3, [pc, #64]	; (8009098 <can1_ams_cell_voltages_v6s1_encode+0x50>)
 8009058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800905c:	f7f7 f906 	bl	800026c <__aeabi_dsub>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4610      	mov	r0, r2
 8009066:	4619      	mov	r1, r3
 8009068:	a309      	add	r3, pc, #36	; (adr r3, 8009090 <can1_ams_cell_voltages_v6s1_encode+0x48>)
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	f7f7 fbdf 	bl	8000830 <__aeabi_ddiv>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	4610      	mov	r0, r2
 8009078:	4619      	mov	r1, r3
 800907a:	f7f7 fd87 	bl	8000b8c <__aeabi_d2uiz>
 800907e:	4603      	mov	r3, r0
 8009080:	b2db      	uxtb	r3, r3
}
 8009082:	4618      	mov	r0, r3
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	f3af 8000 	nop.w
 8009090:	fcce1c58 	.word	0xfcce1c58
 8009094:	3f800e6a 	.word	0x3f800e6a
 8009098:	40040000 	.word	0x40040000
 800909c:	00000000 	.word	0x00000000

080090a0 <can1_ams_cell_voltages_v6s1_decode>:

double can1_ams_cell_voltages_v6s1_decode(uint8_t value)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80090aa:	79fb      	ldrb	r3, [r7, #7]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7f7 fa1b 	bl	80004e8 <__aeabi_ui2d>
 80090b2:	a30e      	add	r3, pc, #56	; (adr r3, 80090ec <can1_ams_cell_voltages_v6s1_decode+0x4c>)
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f7f7 fa90 	bl	80005dc <__aeabi_dmul>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	4610      	mov	r0, r2
 80090c2:	4619      	mov	r1, r3
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	4b07      	ldr	r3, [pc, #28]	; (80090e8 <can1_ams_cell_voltages_v6s1_decode+0x48>)
 80090ca:	f7f7 f8d1 	bl	8000270 <__adddf3>
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80090d6:	eeb0 0a47 	vmov.f32	s0, s14
 80090da:	eef0 0a67 	vmov.f32	s1, s15
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	f3af 8000 	nop.w
 80090e8:	40040000 	.word	0x40040000
 80090ec:	fcce1c58 	.word	0xfcce1c58
 80090f0:	3f800e6a 	.word	0x3f800e6a
 80090f4:	00000000 	.word	0x00000000

080090f8 <can1_ams_cell_voltages_v6s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s2_encode(double value)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009102:	f04f 0200 	mov.w	r2, #0
 8009106:	4b10      	ldr	r3, [pc, #64]	; (8009148 <can1_ams_cell_voltages_v6s2_encode+0x50>)
 8009108:	e9d7 0100 	ldrd	r0, r1, [r7]
 800910c:	f7f7 f8ae 	bl	800026c <__aeabi_dsub>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	4610      	mov	r0, r2
 8009116:	4619      	mov	r1, r3
 8009118:	a309      	add	r3, pc, #36	; (adr r3, 8009140 <can1_ams_cell_voltages_v6s2_encode+0x48>)
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f7f7 fb87 	bl	8000830 <__aeabi_ddiv>
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	4610      	mov	r0, r2
 8009128:	4619      	mov	r1, r3
 800912a:	f7f7 fd2f 	bl	8000b8c <__aeabi_d2uiz>
 800912e:	4603      	mov	r3, r0
 8009130:	b2db      	uxtb	r3, r3
}
 8009132:	4618      	mov	r0, r3
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	f3af 8000 	nop.w
 8009140:	fcce1c58 	.word	0xfcce1c58
 8009144:	3f800e6a 	.word	0x3f800e6a
 8009148:	40040000 	.word	0x40040000
 800914c:	00000000 	.word	0x00000000

08009150 <can1_ams_cell_voltages_v6s2_decode>:

double can1_ams_cell_voltages_v6s2_decode(uint8_t value)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800915a:	79fb      	ldrb	r3, [r7, #7]
 800915c:	4618      	mov	r0, r3
 800915e:	f7f7 f9c3 	bl	80004e8 <__aeabi_ui2d>
 8009162:	a30e      	add	r3, pc, #56	; (adr r3, 800919c <can1_ams_cell_voltages_v6s2_decode+0x4c>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f7f7 fa38 	bl	80005dc <__aeabi_dmul>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	4610      	mov	r0, r2
 8009172:	4619      	mov	r1, r3
 8009174:	f04f 0200 	mov.w	r2, #0
 8009178:	4b07      	ldr	r3, [pc, #28]	; (8009198 <can1_ams_cell_voltages_v6s2_decode+0x48>)
 800917a:	f7f7 f879 	bl	8000270 <__adddf3>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	ec43 2b17 	vmov	d7, r2, r3
}
 8009186:	eeb0 0a47 	vmov.f32	s0, s14
 800918a:	eef0 0a67 	vmov.f32	s1, s15
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	f3af 8000 	nop.w
 8009198:	40040000 	.word	0x40040000
 800919c:	fcce1c58 	.word	0xfcce1c58
 80091a0:	3f800e6a 	.word	0x3f800e6a
 80091a4:	00000000 	.word	0x00000000

080091a8 <can1_ams_cell_voltages_v6s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s3_encode(double value)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80091b2:	f04f 0200 	mov.w	r2, #0
 80091b6:	4b10      	ldr	r3, [pc, #64]	; (80091f8 <can1_ams_cell_voltages_v6s3_encode+0x50>)
 80091b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091bc:	f7f7 f856 	bl	800026c <__aeabi_dsub>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4610      	mov	r0, r2
 80091c6:	4619      	mov	r1, r3
 80091c8:	a309      	add	r3, pc, #36	; (adr r3, 80091f0 <can1_ams_cell_voltages_v6s3_encode+0x48>)
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	f7f7 fb2f 	bl	8000830 <__aeabi_ddiv>
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4610      	mov	r0, r2
 80091d8:	4619      	mov	r1, r3
 80091da:	f7f7 fcd7 	bl	8000b8c <__aeabi_d2uiz>
 80091de:	4603      	mov	r3, r0
 80091e0:	b2db      	uxtb	r3, r3
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	f3af 8000 	nop.w
 80091f0:	fcce1c58 	.word	0xfcce1c58
 80091f4:	3f800e6a 	.word	0x3f800e6a
 80091f8:	40040000 	.word	0x40040000
 80091fc:	00000000 	.word	0x00000000

08009200 <can1_ams_cell_voltages_v6s3_decode>:

double can1_ams_cell_voltages_v6s3_decode(uint8_t value)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	4603      	mov	r3, r0
 8009208:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	4618      	mov	r0, r3
 800920e:	f7f7 f96b 	bl	80004e8 <__aeabi_ui2d>
 8009212:	a30e      	add	r3, pc, #56	; (adr r3, 800924c <can1_ams_cell_voltages_v6s3_decode+0x4c>)
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f7f7 f9e0 	bl	80005dc <__aeabi_dmul>
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	4610      	mov	r0, r2
 8009222:	4619      	mov	r1, r3
 8009224:	f04f 0200 	mov.w	r2, #0
 8009228:	4b07      	ldr	r3, [pc, #28]	; (8009248 <can1_ams_cell_voltages_v6s3_decode+0x48>)
 800922a:	f7f7 f821 	bl	8000270 <__adddf3>
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	ec43 2b17 	vmov	d7, r2, r3
}
 8009236:	eeb0 0a47 	vmov.f32	s0, s14
 800923a:	eef0 0a67 	vmov.f32	s1, s15
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	f3af 8000 	nop.w
 8009248:	40040000 	.word	0x40040000
 800924c:	fcce1c58 	.word	0xfcce1c58
 8009250:	3f800e6a 	.word	0x3f800e6a
 8009254:	00000000 	.word	0x00000000

08009258 <can1_ams_cell_voltages_v6s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s4_encode(double value)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009262:	f04f 0200 	mov.w	r2, #0
 8009266:	4b10      	ldr	r3, [pc, #64]	; (80092a8 <can1_ams_cell_voltages_v6s4_encode+0x50>)
 8009268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800926c:	f7f6 fffe 	bl	800026c <__aeabi_dsub>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4610      	mov	r0, r2
 8009276:	4619      	mov	r1, r3
 8009278:	a309      	add	r3, pc, #36	; (adr r3, 80092a0 <can1_ams_cell_voltages_v6s4_encode+0x48>)
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	f7f7 fad7 	bl	8000830 <__aeabi_ddiv>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	4610      	mov	r0, r2
 8009288:	4619      	mov	r1, r3
 800928a:	f7f7 fc7f 	bl	8000b8c <__aeabi_d2uiz>
 800928e:	4603      	mov	r3, r0
 8009290:	b2db      	uxtb	r3, r3
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	f3af 8000 	nop.w
 80092a0:	fcce1c58 	.word	0xfcce1c58
 80092a4:	3f800e6a 	.word	0x3f800e6a
 80092a8:	40040000 	.word	0x40040000
 80092ac:	00000000 	.word	0x00000000

080092b0 <can1_ams_cell_voltages_v6s4_decode>:

double can1_ams_cell_voltages_v6s4_decode(uint8_t value)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80092ba:	79fb      	ldrb	r3, [r7, #7]
 80092bc:	4618      	mov	r0, r3
 80092be:	f7f7 f913 	bl	80004e8 <__aeabi_ui2d>
 80092c2:	a30e      	add	r3, pc, #56	; (adr r3, 80092fc <can1_ams_cell_voltages_v6s4_decode+0x4c>)
 80092c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c8:	f7f7 f988 	bl	80005dc <__aeabi_dmul>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4610      	mov	r0, r2
 80092d2:	4619      	mov	r1, r3
 80092d4:	f04f 0200 	mov.w	r2, #0
 80092d8:	4b07      	ldr	r3, [pc, #28]	; (80092f8 <can1_ams_cell_voltages_v6s4_decode+0x48>)
 80092da:	f7f6 ffc9 	bl	8000270 <__adddf3>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80092e6:	eeb0 0a47 	vmov.f32	s0, s14
 80092ea:	eef0 0a67 	vmov.f32	s1, s15
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	f3af 8000 	nop.w
 80092f8:	40040000 	.word	0x40040000
 80092fc:	fcce1c58 	.word	0xfcce1c58
 8009300:	3f800e6a 	.word	0x3f800e6a
 8009304:	00000000 	.word	0x00000000

08009308 <can1_ams_cell_voltages_v6s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s5_encode(double value)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009312:	f04f 0200 	mov.w	r2, #0
 8009316:	4b10      	ldr	r3, [pc, #64]	; (8009358 <can1_ams_cell_voltages_v6s5_encode+0x50>)
 8009318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800931c:	f7f6 ffa6 	bl	800026c <__aeabi_dsub>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	4610      	mov	r0, r2
 8009326:	4619      	mov	r1, r3
 8009328:	a309      	add	r3, pc, #36	; (adr r3, 8009350 <can1_ams_cell_voltages_v6s5_encode+0x48>)
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	f7f7 fa7f 	bl	8000830 <__aeabi_ddiv>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	4610      	mov	r0, r2
 8009338:	4619      	mov	r1, r3
 800933a:	f7f7 fc27 	bl	8000b8c <__aeabi_d2uiz>
 800933e:	4603      	mov	r3, r0
 8009340:	b2db      	uxtb	r3, r3
}
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	f3af 8000 	nop.w
 8009350:	fcce1c58 	.word	0xfcce1c58
 8009354:	3f800e6a 	.word	0x3f800e6a
 8009358:	40040000 	.word	0x40040000
 800935c:	00000000 	.word	0x00000000

08009360 <can1_ams_cell_voltages_v6s5_decode>:

double can1_ams_cell_voltages_v6s5_decode(uint8_t value)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800936a:	79fb      	ldrb	r3, [r7, #7]
 800936c:	4618      	mov	r0, r3
 800936e:	f7f7 f8bb 	bl	80004e8 <__aeabi_ui2d>
 8009372:	a30e      	add	r3, pc, #56	; (adr r3, 80093ac <can1_ams_cell_voltages_v6s5_decode+0x4c>)
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	f7f7 f930 	bl	80005dc <__aeabi_dmul>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4610      	mov	r0, r2
 8009382:	4619      	mov	r1, r3
 8009384:	f04f 0200 	mov.w	r2, #0
 8009388:	4b07      	ldr	r3, [pc, #28]	; (80093a8 <can1_ams_cell_voltages_v6s5_decode+0x48>)
 800938a:	f7f6 ff71 	bl	8000270 <__adddf3>
 800938e:	4602      	mov	r2, r0
 8009390:	460b      	mov	r3, r1
 8009392:	ec43 2b17 	vmov	d7, r2, r3
}
 8009396:	eeb0 0a47 	vmov.f32	s0, s14
 800939a:	eef0 0a67 	vmov.f32	s1, s15
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	f3af 8000 	nop.w
 80093a8:	40040000 	.word	0x40040000
 80093ac:	fcce1c58 	.word	0xfcce1c58
 80093b0:	3f800e6a 	.word	0x3f800e6a
 80093b4:	00000000 	.word	0x00000000

080093b8 <can1_ams_cell_voltages_v6s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s6_encode(double value)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80093c2:	f04f 0200 	mov.w	r2, #0
 80093c6:	4b10      	ldr	r3, [pc, #64]	; (8009408 <can1_ams_cell_voltages_v6s6_encode+0x50>)
 80093c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093cc:	f7f6 ff4e 	bl	800026c <__aeabi_dsub>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4610      	mov	r0, r2
 80093d6:	4619      	mov	r1, r3
 80093d8:	a309      	add	r3, pc, #36	; (adr r3, 8009400 <can1_ams_cell_voltages_v6s6_encode+0x48>)
 80093da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093de:	f7f7 fa27 	bl	8000830 <__aeabi_ddiv>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4610      	mov	r0, r2
 80093e8:	4619      	mov	r1, r3
 80093ea:	f7f7 fbcf 	bl	8000b8c <__aeabi_d2uiz>
 80093ee:	4603      	mov	r3, r0
 80093f0:	b2db      	uxtb	r3, r3
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	f3af 8000 	nop.w
 8009400:	fcce1c58 	.word	0xfcce1c58
 8009404:	3f800e6a 	.word	0x3f800e6a
 8009408:	40040000 	.word	0x40040000
 800940c:	00000000 	.word	0x00000000

08009410 <can1_ams_cell_voltages_v6s6_decode>:

double can1_ams_cell_voltages_v6s6_decode(uint8_t value)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800941a:	79fb      	ldrb	r3, [r7, #7]
 800941c:	4618      	mov	r0, r3
 800941e:	f7f7 f863 	bl	80004e8 <__aeabi_ui2d>
 8009422:	a30e      	add	r3, pc, #56	; (adr r3, 800945c <can1_ams_cell_voltages_v6s6_decode+0x4c>)
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f7f7 f8d8 	bl	80005dc <__aeabi_dmul>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4610      	mov	r0, r2
 8009432:	4619      	mov	r1, r3
 8009434:	f04f 0200 	mov.w	r2, #0
 8009438:	4b07      	ldr	r3, [pc, #28]	; (8009458 <can1_ams_cell_voltages_v6s6_decode+0x48>)
 800943a:	f7f6 ff19 	bl	8000270 <__adddf3>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	ec43 2b17 	vmov	d7, r2, r3
}
 8009446:	eeb0 0a47 	vmov.f32	s0, s14
 800944a:	eef0 0a67 	vmov.f32	s1, s15
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	f3af 8000 	nop.w
 8009458:	40040000 	.word	0x40040000
 800945c:	fcce1c58 	.word	0xfcce1c58
 8009460:	3f800e6a 	.word	0x3f800e6a
 8009464:	00000000 	.word	0x00000000

08009468 <can1_ams_cell_voltages_v6s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s7_encode(double value)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009472:	f04f 0200 	mov.w	r2, #0
 8009476:	4b10      	ldr	r3, [pc, #64]	; (80094b8 <can1_ams_cell_voltages_v6s7_encode+0x50>)
 8009478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800947c:	f7f6 fef6 	bl	800026c <__aeabi_dsub>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	4610      	mov	r0, r2
 8009486:	4619      	mov	r1, r3
 8009488:	a309      	add	r3, pc, #36	; (adr r3, 80094b0 <can1_ams_cell_voltages_v6s7_encode+0x48>)
 800948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948e:	f7f7 f9cf 	bl	8000830 <__aeabi_ddiv>
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	4610      	mov	r0, r2
 8009498:	4619      	mov	r1, r3
 800949a:	f7f7 fb77 	bl	8000b8c <__aeabi_d2uiz>
 800949e:	4603      	mov	r3, r0
 80094a0:	b2db      	uxtb	r3, r3
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	f3af 8000 	nop.w
 80094b0:	fcce1c58 	.word	0xfcce1c58
 80094b4:	3f800e6a 	.word	0x3f800e6a
 80094b8:	40040000 	.word	0x40040000
 80094bc:	00000000 	.word	0x00000000

080094c0 <can1_ams_cell_voltages_v6s7_decode>:

double can1_ams_cell_voltages_v6s7_decode(uint8_t value)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80094ca:	79fb      	ldrb	r3, [r7, #7]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7f7 f80b 	bl	80004e8 <__aeabi_ui2d>
 80094d2:	a30e      	add	r3, pc, #56	; (adr r3, 800950c <can1_ams_cell_voltages_v6s7_decode+0x4c>)
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	f7f7 f880 	bl	80005dc <__aeabi_dmul>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	4610      	mov	r0, r2
 80094e2:	4619      	mov	r1, r3
 80094e4:	f04f 0200 	mov.w	r2, #0
 80094e8:	4b07      	ldr	r3, [pc, #28]	; (8009508 <can1_ams_cell_voltages_v6s7_decode+0x48>)
 80094ea:	f7f6 fec1 	bl	8000270 <__adddf3>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80094f6:	eeb0 0a47 	vmov.f32	s0, s14
 80094fa:	eef0 0a67 	vmov.f32	s1, s15
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	f3af 8000 	nop.w
 8009508:	40040000 	.word	0x40040000
 800950c:	fcce1c58 	.word	0xfcce1c58
 8009510:	3f800e6a 	.word	0x3f800e6a
 8009514:	00000000 	.word	0x00000000

08009518 <can1_ams_cell_voltages_v6s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s8_encode(double value)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009522:	f04f 0200 	mov.w	r2, #0
 8009526:	4b10      	ldr	r3, [pc, #64]	; (8009568 <can1_ams_cell_voltages_v6s8_encode+0x50>)
 8009528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800952c:	f7f6 fe9e 	bl	800026c <__aeabi_dsub>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	4610      	mov	r0, r2
 8009536:	4619      	mov	r1, r3
 8009538:	a309      	add	r3, pc, #36	; (adr r3, 8009560 <can1_ams_cell_voltages_v6s8_encode+0x48>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f7 f977 	bl	8000830 <__aeabi_ddiv>
 8009542:	4602      	mov	r2, r0
 8009544:	460b      	mov	r3, r1
 8009546:	4610      	mov	r0, r2
 8009548:	4619      	mov	r1, r3
 800954a:	f7f7 fb1f 	bl	8000b8c <__aeabi_d2uiz>
 800954e:	4603      	mov	r3, r0
 8009550:	b2db      	uxtb	r3, r3
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	f3af 8000 	nop.w
 8009560:	fcce1c58 	.word	0xfcce1c58
 8009564:	3f800e6a 	.word	0x3f800e6a
 8009568:	40040000 	.word	0x40040000
 800956c:	00000000 	.word	0x00000000

08009570 <can1_ams_cell_voltages_v6s8_decode>:

double can1_ams_cell_voltages_v6s8_decode(uint8_t value)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	4603      	mov	r3, r0
 8009578:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	4618      	mov	r0, r3
 800957e:	f7f6 ffb3 	bl	80004e8 <__aeabi_ui2d>
 8009582:	a30e      	add	r3, pc, #56	; (adr r3, 80095bc <can1_ams_cell_voltages_v6s8_decode+0x4c>)
 8009584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009588:	f7f7 f828 	bl	80005dc <__aeabi_dmul>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4610      	mov	r0, r2
 8009592:	4619      	mov	r1, r3
 8009594:	f04f 0200 	mov.w	r2, #0
 8009598:	4b07      	ldr	r3, [pc, #28]	; (80095b8 <can1_ams_cell_voltages_v6s8_decode+0x48>)
 800959a:	f7f6 fe69 	bl	8000270 <__adddf3>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80095a6:	eeb0 0a47 	vmov.f32	s0, s14
 80095aa:	eef0 0a67 	vmov.f32	s1, s15
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	f3af 8000 	nop.w
 80095b8:	40040000 	.word	0x40040000
 80095bc:	fcce1c58 	.word	0xfcce1c58
 80095c0:	3f800e6a 	.word	0x3f800e6a
 80095c4:	00000000 	.word	0x00000000

080095c8 <can1_ams_cell_voltages_v6s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s9_encode(double value)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80095d2:	f04f 0200 	mov.w	r2, #0
 80095d6:	4b10      	ldr	r3, [pc, #64]	; (8009618 <can1_ams_cell_voltages_v6s9_encode+0x50>)
 80095d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095dc:	f7f6 fe46 	bl	800026c <__aeabi_dsub>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4610      	mov	r0, r2
 80095e6:	4619      	mov	r1, r3
 80095e8:	a309      	add	r3, pc, #36	; (adr r3, 8009610 <can1_ams_cell_voltages_v6s9_encode+0x48>)
 80095ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ee:	f7f7 f91f 	bl	8000830 <__aeabi_ddiv>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4610      	mov	r0, r2
 80095f8:	4619      	mov	r1, r3
 80095fa:	f7f7 fac7 	bl	8000b8c <__aeabi_d2uiz>
 80095fe:	4603      	mov	r3, r0
 8009600:	b2db      	uxtb	r3, r3
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	f3af 8000 	nop.w
 8009610:	fcce1c58 	.word	0xfcce1c58
 8009614:	3f800e6a 	.word	0x3f800e6a
 8009618:	40040000 	.word	0x40040000
 800961c:	00000000 	.word	0x00000000

08009620 <can1_ams_cell_voltages_v6s9_decode>:

double can1_ams_cell_voltages_v6s9_decode(uint8_t value)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	4603      	mov	r3, r0
 8009628:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800962a:	79fb      	ldrb	r3, [r7, #7]
 800962c:	4618      	mov	r0, r3
 800962e:	f7f6 ff5b 	bl	80004e8 <__aeabi_ui2d>
 8009632:	a30e      	add	r3, pc, #56	; (adr r3, 800966c <can1_ams_cell_voltages_v6s9_decode+0x4c>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f7f6 ffd0 	bl	80005dc <__aeabi_dmul>
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	4610      	mov	r0, r2
 8009642:	4619      	mov	r1, r3
 8009644:	f04f 0200 	mov.w	r2, #0
 8009648:	4b07      	ldr	r3, [pc, #28]	; (8009668 <can1_ams_cell_voltages_v6s9_decode+0x48>)
 800964a:	f7f6 fe11 	bl	8000270 <__adddf3>
 800964e:	4602      	mov	r2, r0
 8009650:	460b      	mov	r3, r1
 8009652:	ec43 2b17 	vmov	d7, r2, r3
}
 8009656:	eeb0 0a47 	vmov.f32	s0, s14
 800965a:	eef0 0a67 	vmov.f32	s1, s15
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	f3af 8000 	nop.w
 8009668:	40040000 	.word	0x40040000
 800966c:	fcce1c58 	.word	0xfcce1c58
 8009670:	3f800e6a 	.word	0x3f800e6a
 8009674:	00000000 	.word	0x00000000

08009678 <can1_ams_cell_voltages_v6s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s10_encode(double value)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009682:	f04f 0200 	mov.w	r2, #0
 8009686:	4b10      	ldr	r3, [pc, #64]	; (80096c8 <can1_ams_cell_voltages_v6s10_encode+0x50>)
 8009688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800968c:	f7f6 fdee 	bl	800026c <__aeabi_dsub>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	4610      	mov	r0, r2
 8009696:	4619      	mov	r1, r3
 8009698:	a309      	add	r3, pc, #36	; (adr r3, 80096c0 <can1_ams_cell_voltages_v6s10_encode+0x48>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f7 f8c7 	bl	8000830 <__aeabi_ddiv>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4610      	mov	r0, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	f7f7 fa6f 	bl	8000b8c <__aeabi_d2uiz>
 80096ae:	4603      	mov	r3, r0
 80096b0:	b2db      	uxtb	r3, r3
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	f3af 8000 	nop.w
 80096c0:	fcce1c58 	.word	0xfcce1c58
 80096c4:	3f800e6a 	.word	0x3f800e6a
 80096c8:	40040000 	.word	0x40040000
 80096cc:	00000000 	.word	0x00000000

080096d0 <can1_ams_cell_voltages_v6s10_decode>:

double can1_ams_cell_voltages_v6s10_decode(uint8_t value)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	4618      	mov	r0, r3
 80096de:	f7f6 ff03 	bl	80004e8 <__aeabi_ui2d>
 80096e2:	a30e      	add	r3, pc, #56	; (adr r3, 800971c <can1_ams_cell_voltages_v6s10_decode+0x4c>)
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	f7f6 ff78 	bl	80005dc <__aeabi_dmul>
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	4610      	mov	r0, r2
 80096f2:	4619      	mov	r1, r3
 80096f4:	f04f 0200 	mov.w	r2, #0
 80096f8:	4b07      	ldr	r3, [pc, #28]	; (8009718 <can1_ams_cell_voltages_v6s10_decode+0x48>)
 80096fa:	f7f6 fdb9 	bl	8000270 <__adddf3>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	ec43 2b17 	vmov	d7, r2, r3
}
 8009706:	eeb0 0a47 	vmov.f32	s0, s14
 800970a:	eef0 0a67 	vmov.f32	s1, s15
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	f3af 8000 	nop.w
 8009718:	40040000 	.word	0x40040000
 800971c:	fcce1c58 	.word	0xfcce1c58
 8009720:	3f800e6a 	.word	0x3f800e6a
 8009724:	00000000 	.word	0x00000000

08009728 <can1_ams_cell_voltages_v6s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s11_encode(double value)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009732:	f04f 0200 	mov.w	r2, #0
 8009736:	4b10      	ldr	r3, [pc, #64]	; (8009778 <can1_ams_cell_voltages_v6s11_encode+0x50>)
 8009738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800973c:	f7f6 fd96 	bl	800026c <__aeabi_dsub>
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	4610      	mov	r0, r2
 8009746:	4619      	mov	r1, r3
 8009748:	a309      	add	r3, pc, #36	; (adr r3, 8009770 <can1_ams_cell_voltages_v6s11_encode+0x48>)
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f7f7 f86f 	bl	8000830 <__aeabi_ddiv>
 8009752:	4602      	mov	r2, r0
 8009754:	460b      	mov	r3, r1
 8009756:	4610      	mov	r0, r2
 8009758:	4619      	mov	r1, r3
 800975a:	f7f7 fa17 	bl	8000b8c <__aeabi_d2uiz>
 800975e:	4603      	mov	r3, r0
 8009760:	b2db      	uxtb	r3, r3
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	f3af 8000 	nop.w
 8009770:	fcce1c58 	.word	0xfcce1c58
 8009774:	3f800e6a 	.word	0x3f800e6a
 8009778:	40040000 	.word	0x40040000
 800977c:	00000000 	.word	0x00000000

08009780 <can1_ams_cell_voltages_v6s11_decode>:

double can1_ams_cell_voltages_v6s11_decode(uint8_t value)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	4618      	mov	r0, r3
 800978e:	f7f6 feab 	bl	80004e8 <__aeabi_ui2d>
 8009792:	a30e      	add	r3, pc, #56	; (adr r3, 80097cc <can1_ams_cell_voltages_v6s11_decode+0x4c>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	f7f6 ff20 	bl	80005dc <__aeabi_dmul>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	4610      	mov	r0, r2
 80097a2:	4619      	mov	r1, r3
 80097a4:	f04f 0200 	mov.w	r2, #0
 80097a8:	4b07      	ldr	r3, [pc, #28]	; (80097c8 <can1_ams_cell_voltages_v6s11_decode+0x48>)
 80097aa:	f7f6 fd61 	bl	8000270 <__adddf3>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80097b6:	eeb0 0a47 	vmov.f32	s0, s14
 80097ba:	eef0 0a67 	vmov.f32	s1, s15
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	f3af 8000 	nop.w
 80097c8:	40040000 	.word	0x40040000
 80097cc:	fcce1c58 	.word	0xfcce1c58
 80097d0:	3f800e6a 	.word	0x3f800e6a
 80097d4:	00000000 	.word	0x00000000

080097d8 <can1_ams_cell_voltages_v6s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s12_encode(double value)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80097e2:	f04f 0200 	mov.w	r2, #0
 80097e6:	4b10      	ldr	r3, [pc, #64]	; (8009828 <can1_ams_cell_voltages_v6s12_encode+0x50>)
 80097e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097ec:	f7f6 fd3e 	bl	800026c <__aeabi_dsub>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4610      	mov	r0, r2
 80097f6:	4619      	mov	r1, r3
 80097f8:	a309      	add	r3, pc, #36	; (adr r3, 8009820 <can1_ams_cell_voltages_v6s12_encode+0x48>)
 80097fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fe:	f7f7 f817 	bl	8000830 <__aeabi_ddiv>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4610      	mov	r0, r2
 8009808:	4619      	mov	r1, r3
 800980a:	f7f7 f9bf 	bl	8000b8c <__aeabi_d2uiz>
 800980e:	4603      	mov	r3, r0
 8009810:	b2db      	uxtb	r3, r3
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	f3af 8000 	nop.w
 8009820:	fcce1c58 	.word	0xfcce1c58
 8009824:	3f800e6a 	.word	0x3f800e6a
 8009828:	40040000 	.word	0x40040000
 800982c:	00000000 	.word	0x00000000

08009830 <can1_ams_cell_voltages_v6s12_decode>:

double can1_ams_cell_voltages_v6s12_decode(uint8_t value)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	4603      	mov	r3, r0
 8009838:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800983a:	79fb      	ldrb	r3, [r7, #7]
 800983c:	4618      	mov	r0, r3
 800983e:	f7f6 fe53 	bl	80004e8 <__aeabi_ui2d>
 8009842:	a30e      	add	r3, pc, #56	; (adr r3, 800987c <can1_ams_cell_voltages_v6s12_decode+0x4c>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f7f6 fec8 	bl	80005dc <__aeabi_dmul>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4610      	mov	r0, r2
 8009852:	4619      	mov	r1, r3
 8009854:	f04f 0200 	mov.w	r2, #0
 8009858:	4b07      	ldr	r3, [pc, #28]	; (8009878 <can1_ams_cell_voltages_v6s12_decode+0x48>)
 800985a:	f7f6 fd09 	bl	8000270 <__adddf3>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	ec43 2b17 	vmov	d7, r2, r3
}
 8009866:	eeb0 0a47 	vmov.f32	s0, s14
 800986a:	eef0 0a67 	vmov.f32	s1, s15
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	f3af 8000 	nop.w
 8009878:	40040000 	.word	0x40040000
 800987c:	fcce1c58 	.word	0xfcce1c58
 8009880:	3f800e6a 	.word	0x3f800e6a

08009884 <can1_ams_cell_temperatures_pack>:

int can1_ams_cell_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_cell_temperatures_t *src_p,
    size_t size)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b0a2      	sub	sp, #136	; 0x88
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
    uint16_t t5s6;
    uint16_t t5s7;
    uint16_t t5s8;
    uint16_t t5s9;

    if (size < 8u) {
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b07      	cmp	r3, #7
 8009894:	d803      	bhi.n	800989e <can1_ams_cell_temperatures_pack+0x1a>
        return (-EINVAL);
 8009896:	f06f 0315 	mvn.w	r3, #21
 800989a:	f001 b90d 	b.w	800aab8 <can1_ams_cell_temperatures_pack+0x1234>
    }

    memset(&dst_p[0], 0, 8);
 800989e:	2208      	movs	r2, #8
 80098a0:	2100      	movs	r1, #0
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f024 ff1c 	bl	802e6e0 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->temperature_multiplexor, 0u, 0x0fu);
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	220f      	movs	r2, #15
 80098ae:	2100      	movs	r1, #0
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7f7 fb8d 	bl	8000fd0 <pack_left_shift_u8>
 80098b6:	4603      	mov	r3, r0
 80098b8:	461a      	mov	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	4313      	orrs	r3, r2
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	701a      	strb	r2, [r3, #0]

    switch (src_p->temperature_multiplexor) {
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	2b0b      	cmp	r3, #11
 80098cc:	f201 80f2 	bhi.w	800aab4 <can1_ams_cell_temperatures_pack+0x1230>
 80098d0:	a201      	add	r2, pc, #4	; (adr r2, 80098d8 <can1_ams_cell_temperatures_pack+0x54>)
 80098d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d6:	bf00      	nop
 80098d8:	08009909 	.word	0x08009909
 80098dc:	08009a71 	.word	0x08009a71
 80098e0:	08009bd9 	.word	0x08009bd9
 80098e4:	08009d41 	.word	0x08009d41
 80098e8:	08009ea9 	.word	0x08009ea9
 80098ec:	0800a017 	.word	0x0800a017
 80098f0:	0800a19d 	.word	0x0800a19d
 80098f4:	0800a321 	.word	0x0800a321
 80098f8:	0800a4a5 	.word	0x0800a4a5
 80098fc:	0800a629 	.word	0x0800a629
 8009900:	0800a7ad 	.word	0x0800a7ad
 8009904:	0800a931 	.word	0x0800a931

    case 0:
        t1s1 = (uint16_t)src_p->t1s1;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800990e:	833b      	strh	r3, [r7, #24]
        dst_p[0] |= pack_left_shift_u16(t1s1, 4u, 0xf0u);
 8009910:	8b3b      	ldrh	r3, [r7, #24]
 8009912:	22f0      	movs	r2, #240	; 0xf0
 8009914:	2104      	movs	r1, #4
 8009916:	4618      	mov	r0, r3
 8009918:	f7f7 fb71 	bl	8000ffe <pack_left_shift_u16>
 800991c:	4603      	mov	r3, r0
 800991e:	461a      	mov	r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	4313      	orrs	r3, r2
 8009926:	b2da      	uxtb	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s1, 4u, 0xffu);
 800992c:	8b3b      	ldrh	r3, [r7, #24]
 800992e:	22ff      	movs	r2, #255	; 0xff
 8009930:	2104      	movs	r1, #4
 8009932:	4618      	mov	r0, r3
 8009934:	f7f7 fb7a 	bl	800102c <pack_right_shift_u16>
 8009938:	4603      	mov	r3, r0
 800993a:	4619      	mov	r1, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	3301      	adds	r3, #1
 8009940:	781a      	ldrb	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3301      	adds	r3, #1
 8009946:	430a      	orrs	r2, r1
 8009948:	b2d2      	uxtb	r2, r2
 800994a:	701a      	strb	r2, [r3, #0]
        t2s1 = (uint16_t)src_p->t2s1;
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009952:	82fb      	strh	r3, [r7, #22]
        dst_p[2] |= pack_left_shift_u16(t2s1, 0u, 0xffu);
 8009954:	8afb      	ldrh	r3, [r7, #22]
 8009956:	22ff      	movs	r2, #255	; 0xff
 8009958:	2100      	movs	r1, #0
 800995a:	4618      	mov	r0, r3
 800995c:	f7f7 fb4f 	bl	8000ffe <pack_left_shift_u16>
 8009960:	4603      	mov	r3, r0
 8009962:	4619      	mov	r1, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	3302      	adds	r3, #2
 8009968:	781a      	ldrb	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3302      	adds	r3, #2
 800996e:	430a      	orrs	r2, r1
 8009970:	b2d2      	uxtb	r2, r2
 8009972:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s1, 8u, 0x0fu);
 8009974:	8afb      	ldrh	r3, [r7, #22]
 8009976:	220f      	movs	r2, #15
 8009978:	2108      	movs	r1, #8
 800997a:	4618      	mov	r0, r3
 800997c:	f7f7 fb56 	bl	800102c <pack_right_shift_u16>
 8009980:	4603      	mov	r3, r0
 8009982:	4619      	mov	r1, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3303      	adds	r3, #3
 8009988:	781a      	ldrb	r2, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3303      	adds	r3, #3
 800998e:	430a      	orrs	r2, r1
 8009990:	b2d2      	uxtb	r2, r2
 8009992:	701a      	strb	r2, [r3, #0]
        t3s1 = (uint16_t)src_p->t3s1;
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800999a:	82bb      	strh	r3, [r7, #20]
        dst_p[3] |= pack_left_shift_u16(t3s1, 4u, 0xf0u);
 800999c:	8abb      	ldrh	r3, [r7, #20]
 800999e:	22f0      	movs	r2, #240	; 0xf0
 80099a0:	2104      	movs	r1, #4
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7f7 fb2b 	bl	8000ffe <pack_left_shift_u16>
 80099a8:	4603      	mov	r3, r0
 80099aa:	4619      	mov	r1, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3303      	adds	r3, #3
 80099b0:	781a      	ldrb	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	3303      	adds	r3, #3
 80099b6:	430a      	orrs	r2, r1
 80099b8:	b2d2      	uxtb	r2, r2
 80099ba:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s1, 4u, 0xffu);
 80099bc:	8abb      	ldrh	r3, [r7, #20]
 80099be:	22ff      	movs	r2, #255	; 0xff
 80099c0:	2104      	movs	r1, #4
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7f7 fb32 	bl	800102c <pack_right_shift_u16>
 80099c8:	4603      	mov	r3, r0
 80099ca:	4619      	mov	r1, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	3304      	adds	r3, #4
 80099d0:	781a      	ldrb	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3304      	adds	r3, #4
 80099d6:	430a      	orrs	r2, r1
 80099d8:	b2d2      	uxtb	r2, r2
 80099da:	701a      	strb	r2, [r3, #0]
        t4s1 = (uint16_t)src_p->t4s1;
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80099e2:	827b      	strh	r3, [r7, #18]
        dst_p[5] |= pack_left_shift_u16(t4s1, 0u, 0xffu);
 80099e4:	8a7b      	ldrh	r3, [r7, #18]
 80099e6:	22ff      	movs	r2, #255	; 0xff
 80099e8:	2100      	movs	r1, #0
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7f7 fb07 	bl	8000ffe <pack_left_shift_u16>
 80099f0:	4603      	mov	r3, r0
 80099f2:	4619      	mov	r1, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	3305      	adds	r3, #5
 80099f8:	781a      	ldrb	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	3305      	adds	r3, #5
 80099fe:	430a      	orrs	r2, r1
 8009a00:	b2d2      	uxtb	r2, r2
 8009a02:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s1, 8u, 0x0fu);
 8009a04:	8a7b      	ldrh	r3, [r7, #18]
 8009a06:	220f      	movs	r2, #15
 8009a08:	2108      	movs	r1, #8
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7f7 fb0e 	bl	800102c <pack_right_shift_u16>
 8009a10:	4603      	mov	r3, r0
 8009a12:	4619      	mov	r1, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3306      	adds	r3, #6
 8009a18:	781a      	ldrb	r2, [r3, #0]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	3306      	adds	r3, #6
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	b2d2      	uxtb	r2, r2
 8009a22:	701a      	strb	r2, [r3, #0]
        t5s1 = (uint16_t)src_p->t5s1;
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8009a2a:	823b      	strh	r3, [r7, #16]
        dst_p[6] |= pack_left_shift_u16(t5s1, 4u, 0xf0u);
 8009a2c:	8a3b      	ldrh	r3, [r7, #16]
 8009a2e:	22f0      	movs	r2, #240	; 0xf0
 8009a30:	2104      	movs	r1, #4
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7f7 fae3 	bl	8000ffe <pack_left_shift_u16>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3306      	adds	r3, #6
 8009a40:	781a      	ldrb	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	3306      	adds	r3, #6
 8009a46:	430a      	orrs	r2, r1
 8009a48:	b2d2      	uxtb	r2, r2
 8009a4a:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s1, 4u, 0xffu);
 8009a4c:	8a3b      	ldrh	r3, [r7, #16]
 8009a4e:	22ff      	movs	r2, #255	; 0xff
 8009a50:	2104      	movs	r1, #4
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7f7 faea 	bl	800102c <pack_right_shift_u16>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3307      	adds	r3, #7
 8009a60:	781a      	ldrb	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3307      	adds	r3, #7
 8009a66:	430a      	orrs	r2, r1
 8009a68:	b2d2      	uxtb	r2, r2
 8009a6a:	701a      	strb	r2, [r3, #0]
        break;
 8009a6c:	f001 b823 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 1:
        t1s2 = (uint16_t)src_p->t1s2;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009a76:	847b      	strh	r3, [r7, #34]	; 0x22
        dst_p[0] |= pack_left_shift_u16(t1s2, 4u, 0xf0u);
 8009a78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a7a:	22f0      	movs	r2, #240	; 0xf0
 8009a7c:	2104      	movs	r1, #4
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7f7 fabd 	bl	8000ffe <pack_left_shift_u16>
 8009a84:	4603      	mov	r3, r0
 8009a86:	461a      	mov	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s2, 4u, 0xffu);
 8009a94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a96:	22ff      	movs	r2, #255	; 0xff
 8009a98:	2104      	movs	r1, #4
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f7 fac6 	bl	800102c <pack_right_shift_u16>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	781a      	ldrb	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	3301      	adds	r3, #1
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	b2d2      	uxtb	r2, r2
 8009ab2:	701a      	strb	r2, [r3, #0]
        t2s2 = (uint16_t)src_p->t2s2;
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8009aba:	843b      	strh	r3, [r7, #32]
        dst_p[2] |= pack_left_shift_u16(t2s2, 0u, 0xffu);
 8009abc:	8c3b      	ldrh	r3, [r7, #32]
 8009abe:	22ff      	movs	r2, #255	; 0xff
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7f7 fa9b 	bl	8000ffe <pack_left_shift_u16>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	4619      	mov	r1, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3302      	adds	r3, #2
 8009ad0:	781a      	ldrb	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3302      	adds	r3, #2
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	b2d2      	uxtb	r2, r2
 8009ada:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s2, 8u, 0x0fu);
 8009adc:	8c3b      	ldrh	r3, [r7, #32]
 8009ade:	220f      	movs	r2, #15
 8009ae0:	2108      	movs	r1, #8
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7f7 faa2 	bl	800102c <pack_right_shift_u16>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	4619      	mov	r1, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3303      	adds	r3, #3
 8009af0:	781a      	ldrb	r2, [r3, #0]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3303      	adds	r3, #3
 8009af6:	430a      	orrs	r2, r1
 8009af8:	b2d2      	uxtb	r2, r2
 8009afa:	701a      	strb	r2, [r3, #0]
        t3s2 = (uint16_t)src_p->t3s2;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8009b02:	83fb      	strh	r3, [r7, #30]
        dst_p[3] |= pack_left_shift_u16(t3s2, 4u, 0xf0u);
 8009b04:	8bfb      	ldrh	r3, [r7, #30]
 8009b06:	22f0      	movs	r2, #240	; 0xf0
 8009b08:	2104      	movs	r1, #4
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7f7 fa77 	bl	8000ffe <pack_left_shift_u16>
 8009b10:	4603      	mov	r3, r0
 8009b12:	4619      	mov	r1, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	3303      	adds	r3, #3
 8009b18:	781a      	ldrb	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3303      	adds	r3, #3
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	b2d2      	uxtb	r2, r2
 8009b22:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s2, 4u, 0xffu);
 8009b24:	8bfb      	ldrh	r3, [r7, #30]
 8009b26:	22ff      	movs	r2, #255	; 0xff
 8009b28:	2104      	movs	r1, #4
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7f7 fa7e 	bl	800102c <pack_right_shift_u16>
 8009b30:	4603      	mov	r3, r0
 8009b32:	4619      	mov	r1, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3304      	adds	r3, #4
 8009b38:	781a      	ldrb	r2, [r3, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	b2d2      	uxtb	r2, r2
 8009b42:	701a      	strb	r2, [r3, #0]
        t4s2 = (uint16_t)src_p->t4s2;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8009b4a:	83bb      	strh	r3, [r7, #28]
        dst_p[5] |= pack_left_shift_u16(t4s2, 0u, 0xffu);
 8009b4c:	8bbb      	ldrh	r3, [r7, #28]
 8009b4e:	22ff      	movs	r2, #255	; 0xff
 8009b50:	2100      	movs	r1, #0
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7f7 fa53 	bl	8000ffe <pack_left_shift_u16>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	3305      	adds	r3, #5
 8009b60:	781a      	ldrb	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	3305      	adds	r3, #5
 8009b66:	430a      	orrs	r2, r1
 8009b68:	b2d2      	uxtb	r2, r2
 8009b6a:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s2, 8u, 0x0fu);
 8009b6c:	8bbb      	ldrh	r3, [r7, #28]
 8009b6e:	220f      	movs	r2, #15
 8009b70:	2108      	movs	r1, #8
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7f7 fa5a 	bl	800102c <pack_right_shift_u16>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	3306      	adds	r3, #6
 8009b80:	781a      	ldrb	r2, [r3, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3306      	adds	r3, #6
 8009b86:	430a      	orrs	r2, r1
 8009b88:	b2d2      	uxtb	r2, r2
 8009b8a:	701a      	strb	r2, [r3, #0]
        t5s2 = (uint16_t)src_p->t5s2;
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8009b92:	837b      	strh	r3, [r7, #26]
        dst_p[6] |= pack_left_shift_u16(t5s2, 4u, 0xf0u);
 8009b94:	8b7b      	ldrh	r3, [r7, #26]
 8009b96:	22f0      	movs	r2, #240	; 0xf0
 8009b98:	2104      	movs	r1, #4
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7f7 fa2f 	bl	8000ffe <pack_left_shift_u16>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	3306      	adds	r3, #6
 8009ba8:	781a      	ldrb	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3306      	adds	r3, #6
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	b2d2      	uxtb	r2, r2
 8009bb2:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s2, 4u, 0xffu);
 8009bb4:	8b7b      	ldrh	r3, [r7, #26]
 8009bb6:	22ff      	movs	r2, #255	; 0xff
 8009bb8:	2104      	movs	r1, #4
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7f7 fa36 	bl	800102c <pack_right_shift_u16>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3307      	adds	r3, #7
 8009bc8:	781a      	ldrb	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3307      	adds	r3, #7
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	701a      	strb	r2, [r3, #0]
        break;
 8009bd4:	f000 bf6f 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 2:
        t1s3 = (uint16_t)src_p->t1s3;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009bde:	85bb      	strh	r3, [r7, #44]	; 0x2c
        dst_p[0] |= pack_left_shift_u16(t1s3, 4u, 0xf0u);
 8009be0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009be2:	22f0      	movs	r2, #240	; 0xf0
 8009be4:	2104      	movs	r1, #4
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7f7 fa09 	bl	8000ffe <pack_left_shift_u16>
 8009bec:	4603      	mov	r3, r0
 8009bee:	461a      	mov	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s3, 4u, 0xffu);
 8009bfc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009bfe:	22ff      	movs	r2, #255	; 0xff
 8009c00:	2104      	movs	r1, #4
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7f7 fa12 	bl	800102c <pack_right_shift_u16>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	781a      	ldrb	r2, [r3, #0]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	430a      	orrs	r2, r1
 8009c18:	b2d2      	uxtb	r2, r2
 8009c1a:	701a      	strb	r2, [r3, #0]
        t2s3 = (uint16_t)src_p->t2s3;
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8009c22:	857b      	strh	r3, [r7, #42]	; 0x2a
        dst_p[2] |= pack_left_shift_u16(t2s3, 0u, 0xffu);
 8009c24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c26:	22ff      	movs	r2, #255	; 0xff
 8009c28:	2100      	movs	r1, #0
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7f7 f9e7 	bl	8000ffe <pack_left_shift_u16>
 8009c30:	4603      	mov	r3, r0
 8009c32:	4619      	mov	r1, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3302      	adds	r3, #2
 8009c38:	781a      	ldrb	r2, [r3, #0]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3302      	adds	r3, #2
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	b2d2      	uxtb	r2, r2
 8009c42:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s3, 8u, 0x0fu);
 8009c44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c46:	220f      	movs	r2, #15
 8009c48:	2108      	movs	r1, #8
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7f7 f9ee 	bl	800102c <pack_right_shift_u16>
 8009c50:	4603      	mov	r3, r0
 8009c52:	4619      	mov	r1, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3303      	adds	r3, #3
 8009c58:	781a      	ldrb	r2, [r3, #0]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3303      	adds	r3, #3
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	b2d2      	uxtb	r2, r2
 8009c62:	701a      	strb	r2, [r3, #0]
        t3s3 = (uint16_t)src_p->t3s3;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8009c6a:	853b      	strh	r3, [r7, #40]	; 0x28
        dst_p[3] |= pack_left_shift_u16(t3s3, 4u, 0xf0u);
 8009c6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c6e:	22f0      	movs	r2, #240	; 0xf0
 8009c70:	2104      	movs	r1, #4
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7f7 f9c3 	bl	8000ffe <pack_left_shift_u16>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3303      	adds	r3, #3
 8009c80:	781a      	ldrb	r2, [r3, #0]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3303      	adds	r3, #3
 8009c86:	430a      	orrs	r2, r1
 8009c88:	b2d2      	uxtb	r2, r2
 8009c8a:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s3, 4u, 0xffu);
 8009c8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c8e:	22ff      	movs	r2, #255	; 0xff
 8009c90:	2104      	movs	r1, #4
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7f7 f9ca 	bl	800102c <pack_right_shift_u16>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	781a      	ldrb	r2, [r3, #0]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	b2d2      	uxtb	r2, r2
 8009caa:	701a      	strb	r2, [r3, #0]
        t4s3 = (uint16_t)src_p->t4s3;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 8009cb2:	84fb      	strh	r3, [r7, #38]	; 0x26
        dst_p[5] |= pack_left_shift_u16(t4s3, 0u, 0xffu);
 8009cb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cb6:	22ff      	movs	r2, #255	; 0xff
 8009cb8:	2100      	movs	r1, #0
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7f7 f99f 	bl	8000ffe <pack_left_shift_u16>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3305      	adds	r3, #5
 8009cc8:	781a      	ldrb	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3305      	adds	r3, #5
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	b2d2      	uxtb	r2, r2
 8009cd2:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s3, 8u, 0x0fu);
 8009cd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cd6:	220f      	movs	r2, #15
 8009cd8:	2108      	movs	r1, #8
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7f7 f9a6 	bl	800102c <pack_right_shift_u16>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3306      	adds	r3, #6
 8009ce8:	781a      	ldrb	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	3306      	adds	r3, #6
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	b2d2      	uxtb	r2, r2
 8009cf2:	701a      	strb	r2, [r3, #0]
        t5s3 = (uint16_t)src_p->t5s3;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	; 0x66
 8009cfa:	84bb      	strh	r3, [r7, #36]	; 0x24
        dst_p[6] |= pack_left_shift_u16(t5s3, 4u, 0xf0u);
 8009cfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cfe:	22f0      	movs	r2, #240	; 0xf0
 8009d00:	2104      	movs	r1, #4
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7f7 f97b 	bl	8000ffe <pack_left_shift_u16>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	3306      	adds	r3, #6
 8009d10:	781a      	ldrb	r2, [r3, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3306      	adds	r3, #6
 8009d16:	430a      	orrs	r2, r1
 8009d18:	b2d2      	uxtb	r2, r2
 8009d1a:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s3, 4u, 0xffu);
 8009d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d1e:	22ff      	movs	r2, #255	; 0xff
 8009d20:	2104      	movs	r1, #4
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7f7 f982 	bl	800102c <pack_right_shift_u16>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3307      	adds	r3, #7
 8009d30:	781a      	ldrb	r2, [r3, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	3307      	adds	r3, #7
 8009d36:	430a      	orrs	r2, r1
 8009d38:	b2d2      	uxtb	r2, r2
 8009d3a:	701a      	strb	r2, [r3, #0]
        break;
 8009d3c:	f000 bebb 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 3:
        t1s4 = (uint16_t)src_p->t1s4;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d46:	86fb      	strh	r3, [r7, #54]	; 0x36
        dst_p[0] |= pack_left_shift_u16(t1s4, 4u, 0xf0u);
 8009d48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d4a:	22f0      	movs	r2, #240	; 0xf0
 8009d4c:	2104      	movs	r1, #4
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7f7 f955 	bl	8000ffe <pack_left_shift_u16>
 8009d54:	4603      	mov	r3, r0
 8009d56:	461a      	mov	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s4, 4u, 0xffu);
 8009d64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d66:	22ff      	movs	r2, #255	; 0xff
 8009d68:	2104      	movs	r1, #4
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7f7 f95e 	bl	800102c <pack_right_shift_u16>
 8009d70:	4603      	mov	r3, r0
 8009d72:	4619      	mov	r1, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	3301      	adds	r3, #1
 8009d78:	781a      	ldrb	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	b2d2      	uxtb	r2, r2
 8009d82:	701a      	strb	r2, [r3, #0]
        t2s4 = (uint16_t)src_p->t2s4;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8009d8a:	86bb      	strh	r3, [r7, #52]	; 0x34
        dst_p[2] |= pack_left_shift_u16(t2s4, 0u, 0xffu);
 8009d8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009d8e:	22ff      	movs	r2, #255	; 0xff
 8009d90:	2100      	movs	r1, #0
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7f7 f933 	bl	8000ffe <pack_left_shift_u16>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	3302      	adds	r3, #2
 8009da0:	781a      	ldrb	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	3302      	adds	r3, #2
 8009da6:	430a      	orrs	r2, r1
 8009da8:	b2d2      	uxtb	r2, r2
 8009daa:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s4, 8u, 0x0fu);
 8009dac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009dae:	220f      	movs	r2, #15
 8009db0:	2108      	movs	r1, #8
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7f7 f93a 	bl	800102c <pack_right_shift_u16>
 8009db8:	4603      	mov	r3, r0
 8009dba:	4619      	mov	r1, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3303      	adds	r3, #3
 8009dc0:	781a      	ldrb	r2, [r3, #0]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	3303      	adds	r3, #3
 8009dc6:	430a      	orrs	r2, r1
 8009dc8:	b2d2      	uxtb	r2, r2
 8009dca:	701a      	strb	r2, [r3, #0]
        t3s4 = (uint16_t)src_p->t3s4;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8009dd2:	867b      	strh	r3, [r7, #50]	; 0x32
        dst_p[3] |= pack_left_shift_u16(t3s4, 4u, 0xf0u);
 8009dd4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009dd6:	22f0      	movs	r2, #240	; 0xf0
 8009dd8:	2104      	movs	r1, #4
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7f7 f90f 	bl	8000ffe <pack_left_shift_u16>
 8009de0:	4603      	mov	r3, r0
 8009de2:	4619      	mov	r1, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	3303      	adds	r3, #3
 8009de8:	781a      	ldrb	r2, [r3, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3303      	adds	r3, #3
 8009dee:	430a      	orrs	r2, r1
 8009df0:	b2d2      	uxtb	r2, r2
 8009df2:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s4, 4u, 0xffu);
 8009df4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009df6:	22ff      	movs	r2, #255	; 0xff
 8009df8:	2104      	movs	r1, #4
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7f7 f916 	bl	800102c <pack_right_shift_u16>
 8009e00:	4603      	mov	r3, r0
 8009e02:	4619      	mov	r1, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	3304      	adds	r3, #4
 8009e08:	781a      	ldrb	r2, [r3, #0]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	b2d2      	uxtb	r2, r2
 8009e12:	701a      	strb	r2, [r3, #0]
        t4s4 = (uint16_t)src_p->t4s4;
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8009e1a:	863b      	strh	r3, [r7, #48]	; 0x30
        dst_p[5] |= pack_left_shift_u16(t4s4, 0u, 0xffu);
 8009e1c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009e1e:	22ff      	movs	r2, #255	; 0xff
 8009e20:	2100      	movs	r1, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7f7 f8eb 	bl	8000ffe <pack_left_shift_u16>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3305      	adds	r3, #5
 8009e30:	781a      	ldrb	r2, [r3, #0]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	3305      	adds	r3, #5
 8009e36:	430a      	orrs	r2, r1
 8009e38:	b2d2      	uxtb	r2, r2
 8009e3a:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s4, 8u, 0x0fu);
 8009e3c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009e3e:	220f      	movs	r2, #15
 8009e40:	2108      	movs	r1, #8
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7f7 f8f2 	bl	800102c <pack_right_shift_u16>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3306      	adds	r3, #6
 8009e50:	781a      	ldrb	r2, [r3, #0]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3306      	adds	r3, #6
 8009e56:	430a      	orrs	r2, r1
 8009e58:	b2d2      	uxtb	r2, r2
 8009e5a:	701a      	strb	r2, [r3, #0]
        t5s4 = (uint16_t)src_p->t5s4;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8009e62:	85fb      	strh	r3, [r7, #46]	; 0x2e
        dst_p[6] |= pack_left_shift_u16(t5s4, 4u, 0xf0u);
 8009e64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e66:	22f0      	movs	r2, #240	; 0xf0
 8009e68:	2104      	movs	r1, #4
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7f7 f8c7 	bl	8000ffe <pack_left_shift_u16>
 8009e70:	4603      	mov	r3, r0
 8009e72:	4619      	mov	r1, r3
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	3306      	adds	r3, #6
 8009e78:	781a      	ldrb	r2, [r3, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	3306      	adds	r3, #6
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	b2d2      	uxtb	r2, r2
 8009e82:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s4, 4u, 0xffu);
 8009e84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e86:	22ff      	movs	r2, #255	; 0xff
 8009e88:	2104      	movs	r1, #4
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7f7 f8ce 	bl	800102c <pack_right_shift_u16>
 8009e90:	4603      	mov	r3, r0
 8009e92:	4619      	mov	r1, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	3307      	adds	r3, #7
 8009e98:	781a      	ldrb	r2, [r3, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3307      	adds	r3, #7
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	b2d2      	uxtb	r2, r2
 8009ea2:	701a      	strb	r2, [r3, #0]
        break;
 8009ea4:	f000 be07 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 4:
        t1s5 = (uint16_t)src_p->t1s5;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009eae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        dst_p[0] |= pack_left_shift_u16(t1s5, 4u, 0xf0u);
 8009eb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009eb6:	22f0      	movs	r2, #240	; 0xf0
 8009eb8:	2104      	movs	r1, #4
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7f7 f89f 	bl	8000ffe <pack_left_shift_u16>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	b2da      	uxtb	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s5, 4u, 0xffu);
 8009ed0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009ed4:	22ff      	movs	r2, #255	; 0xff
 8009ed6:	2104      	movs	r1, #4
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7f7 f8a7 	bl	800102c <pack_right_shift_u16>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	781a      	ldrb	r2, [r3, #0]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3301      	adds	r3, #1
 8009eec:	430a      	orrs	r2, r1
 8009eee:	b2d2      	uxtb	r2, r2
 8009ef0:	701a      	strb	r2, [r3, #0]
        t2s5 = (uint16_t)src_p->t2s5;
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8009ef8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        dst_p[2] |= pack_left_shift_u16(t2s5, 0u, 0xffu);
 8009efa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009efc:	22ff      	movs	r2, #255	; 0xff
 8009efe:	2100      	movs	r1, #0
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7f7 f87c 	bl	8000ffe <pack_left_shift_u16>
 8009f06:	4603      	mov	r3, r0
 8009f08:	4619      	mov	r1, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	3302      	adds	r3, #2
 8009f0e:	781a      	ldrb	r2, [r3, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3302      	adds	r3, #2
 8009f14:	430a      	orrs	r2, r1
 8009f16:	b2d2      	uxtb	r2, r2
 8009f18:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s5, 8u, 0x0fu);
 8009f1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009f1c:	220f      	movs	r2, #15
 8009f1e:	2108      	movs	r1, #8
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7f7 f883 	bl	800102c <pack_right_shift_u16>
 8009f26:	4603      	mov	r3, r0
 8009f28:	4619      	mov	r1, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3303      	adds	r3, #3
 8009f2e:	781a      	ldrb	r2, [r3, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	3303      	adds	r3, #3
 8009f34:	430a      	orrs	r2, r1
 8009f36:	b2d2      	uxtb	r2, r2
 8009f38:	701a      	strb	r2, [r3, #0]
        t3s5 = (uint16_t)src_p->t3s5;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8009f40:	87bb      	strh	r3, [r7, #60]	; 0x3c
        dst_p[3] |= pack_left_shift_u16(t3s5, 4u, 0xf0u);
 8009f42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009f44:	22f0      	movs	r2, #240	; 0xf0
 8009f46:	2104      	movs	r1, #4
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7f7 f858 	bl	8000ffe <pack_left_shift_u16>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	4619      	mov	r1, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	3303      	adds	r3, #3
 8009f56:	781a      	ldrb	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3303      	adds	r3, #3
 8009f5c:	430a      	orrs	r2, r1
 8009f5e:	b2d2      	uxtb	r2, r2
 8009f60:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s5, 4u, 0xffu);
 8009f62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009f64:	22ff      	movs	r2, #255	; 0xff
 8009f66:	2104      	movs	r1, #4
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7f7 f85f 	bl	800102c <pack_right_shift_u16>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	4619      	mov	r1, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3304      	adds	r3, #4
 8009f76:	781a      	ldrb	r2, [r3, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	b2d2      	uxtb	r2, r2
 8009f80:	701a      	strb	r2, [r3, #0]
        t4s5 = (uint16_t)src_p->t4s5;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8009f88:	877b      	strh	r3, [r7, #58]	; 0x3a
        dst_p[5] |= pack_left_shift_u16(t4s5, 0u, 0xffu);
 8009f8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009f8c:	22ff      	movs	r2, #255	; 0xff
 8009f8e:	2100      	movs	r1, #0
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7f7 f834 	bl	8000ffe <pack_left_shift_u16>
 8009f96:	4603      	mov	r3, r0
 8009f98:	4619      	mov	r1, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3305      	adds	r3, #5
 8009f9e:	781a      	ldrb	r2, [r3, #0]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3305      	adds	r3, #5
 8009fa4:	430a      	orrs	r2, r1
 8009fa6:	b2d2      	uxtb	r2, r2
 8009fa8:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s5, 8u, 0x0fu);
 8009faa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009fac:	220f      	movs	r2, #15
 8009fae:	2108      	movs	r1, #8
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7f7 f83b 	bl	800102c <pack_right_shift_u16>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	4619      	mov	r1, r3
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3306      	adds	r3, #6
 8009fbe:	781a      	ldrb	r2, [r3, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	3306      	adds	r3, #6
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	b2d2      	uxtb	r2, r2
 8009fc8:	701a      	strb	r2, [r3, #0]
        t5s5 = (uint16_t)src_p->t5s5;
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 8009fd0:	873b      	strh	r3, [r7, #56]	; 0x38
        dst_p[6] |= pack_left_shift_u16(t5s5, 4u, 0xf0u);
 8009fd2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009fd4:	22f0      	movs	r2, #240	; 0xf0
 8009fd6:	2104      	movs	r1, #4
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7f7 f810 	bl	8000ffe <pack_left_shift_u16>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3306      	adds	r3, #6
 8009fe6:	781a      	ldrb	r2, [r3, #0]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	3306      	adds	r3, #6
 8009fec:	430a      	orrs	r2, r1
 8009fee:	b2d2      	uxtb	r2, r2
 8009ff0:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s5, 4u, 0xffu);
 8009ff2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009ff4:	22ff      	movs	r2, #255	; 0xff
 8009ff6:	2104      	movs	r1, #4
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7f7 f817 	bl	800102c <pack_right_shift_u16>
 8009ffe:	4603      	mov	r3, r0
 800a000:	4619      	mov	r1, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	3307      	adds	r3, #7
 800a006:	781a      	ldrb	r2, [r3, #0]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3307      	adds	r3, #7
 800a00c:	430a      	orrs	r2, r1
 800a00e:	b2d2      	uxtb	r2, r2
 800a010:	701a      	strb	r2, [r3, #0]
        break;
 800a012:	f000 bd50 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 5:
        t1s6 = (uint16_t)src_p->t1s6;
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a01c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        dst_p[0] |= pack_left_shift_u16(t1s6, 4u, 0xf0u);
 800a020:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a024:	22f0      	movs	r2, #240	; 0xf0
 800a026:	2104      	movs	r1, #4
 800a028:	4618      	mov	r0, r3
 800a02a:	f7f6 ffe8 	bl	8000ffe <pack_left_shift_u16>
 800a02e:	4603      	mov	r3, r0
 800a030:	461a      	mov	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	4313      	orrs	r3, r2
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s6, 4u, 0xffu);
 800a03e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a042:	22ff      	movs	r2, #255	; 0xff
 800a044:	2104      	movs	r1, #4
 800a046:	4618      	mov	r0, r3
 800a048:	f7f6 fff0 	bl	800102c <pack_right_shift_u16>
 800a04c:	4603      	mov	r3, r0
 800a04e:	4619      	mov	r1, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	3301      	adds	r3, #1
 800a054:	781a      	ldrb	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	3301      	adds	r3, #1
 800a05a:	430a      	orrs	r2, r1
 800a05c:	b2d2      	uxtb	r2, r2
 800a05e:	701a      	strb	r2, [r3, #0]
        t2s6 = (uint16_t)src_p->t2s6;
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800a066:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        dst_p[2] |= pack_left_shift_u16(t2s6, 0u, 0xffu);
 800a06a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a06e:	22ff      	movs	r2, #255	; 0xff
 800a070:	2100      	movs	r1, #0
 800a072:	4618      	mov	r0, r3
 800a074:	f7f6 ffc3 	bl	8000ffe <pack_left_shift_u16>
 800a078:	4603      	mov	r3, r0
 800a07a:	4619      	mov	r1, r3
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	3302      	adds	r3, #2
 800a080:	781a      	ldrb	r2, [r3, #0]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	3302      	adds	r3, #2
 800a086:	430a      	orrs	r2, r1
 800a088:	b2d2      	uxtb	r2, r2
 800a08a:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s6, 8u, 0x0fu);
 800a08c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a090:	220f      	movs	r2, #15
 800a092:	2108      	movs	r1, #8
 800a094:	4618      	mov	r0, r3
 800a096:	f7f6 ffc9 	bl	800102c <pack_right_shift_u16>
 800a09a:	4603      	mov	r3, r0
 800a09c:	4619      	mov	r1, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3303      	adds	r3, #3
 800a0a2:	781a      	ldrb	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3303      	adds	r3, #3
 800a0a8:	430a      	orrs	r2, r1
 800a0aa:	b2d2      	uxtb	r2, r2
 800a0ac:	701a      	strb	r2, [r3, #0]
        t3s6 = (uint16_t)src_p->t3s6;
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a0b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        dst_p[3] |= pack_left_shift_u16(t3s6, 4u, 0xf0u);
 800a0b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a0bc:	22f0      	movs	r2, #240	; 0xf0
 800a0be:	2104      	movs	r1, #4
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7f6 ff9c 	bl	8000ffe <pack_left_shift_u16>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3303      	adds	r3, #3
 800a0ce:	781a      	ldrb	r2, [r3, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	3303      	adds	r3, #3
 800a0d4:	430a      	orrs	r2, r1
 800a0d6:	b2d2      	uxtb	r2, r2
 800a0d8:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s6, 4u, 0xffu);
 800a0da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a0de:	22ff      	movs	r2, #255	; 0xff
 800a0e0:	2104      	movs	r1, #4
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7f6 ffa2 	bl	800102c <pack_right_shift_u16>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	781a      	ldrb	r2, [r3, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	b2d2      	uxtb	r2, r2
 800a0fa:	701a      	strb	r2, [r3, #0]
        t4s6 = (uint16_t)src_p->t4s6;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800a102:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        dst_p[5] |= pack_left_shift_u16(t4s6, 0u, 0xffu);
 800a106:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a10a:	22ff      	movs	r2, #255	; 0xff
 800a10c:	2100      	movs	r1, #0
 800a10e:	4618      	mov	r0, r3
 800a110:	f7f6 ff75 	bl	8000ffe <pack_left_shift_u16>
 800a114:	4603      	mov	r3, r0
 800a116:	4619      	mov	r1, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	3305      	adds	r3, #5
 800a11c:	781a      	ldrb	r2, [r3, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	3305      	adds	r3, #5
 800a122:	430a      	orrs	r2, r1
 800a124:	b2d2      	uxtb	r2, r2
 800a126:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s6, 8u, 0x0fu);
 800a128:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a12c:	220f      	movs	r2, #15
 800a12e:	2108      	movs	r1, #8
 800a130:	4618      	mov	r0, r3
 800a132:	f7f6 ff7b 	bl	800102c <pack_right_shift_u16>
 800a136:	4603      	mov	r3, r0
 800a138:	4619      	mov	r1, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3306      	adds	r3, #6
 800a13e:	781a      	ldrb	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	3306      	adds	r3, #6
 800a144:	430a      	orrs	r2, r1
 800a146:	b2d2      	uxtb	r2, r2
 800a148:	701a      	strb	r2, [r3, #0]
        t5s6 = (uint16_t)src_p->t5s6;
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800a150:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        dst_p[6] |= pack_left_shift_u16(t5s6, 4u, 0xf0u);
 800a154:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a158:	22f0      	movs	r2, #240	; 0xf0
 800a15a:	2104      	movs	r1, #4
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7f6 ff4e 	bl	8000ffe <pack_left_shift_u16>
 800a162:	4603      	mov	r3, r0
 800a164:	4619      	mov	r1, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3306      	adds	r3, #6
 800a16a:	781a      	ldrb	r2, [r3, #0]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	3306      	adds	r3, #6
 800a170:	430a      	orrs	r2, r1
 800a172:	b2d2      	uxtb	r2, r2
 800a174:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s6, 4u, 0xffu);
 800a176:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a17a:	22ff      	movs	r2, #255	; 0xff
 800a17c:	2104      	movs	r1, #4
 800a17e:	4618      	mov	r0, r3
 800a180:	f7f6 ff54 	bl	800102c <pack_right_shift_u16>
 800a184:	4603      	mov	r3, r0
 800a186:	4619      	mov	r1, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3307      	adds	r3, #7
 800a18c:	781a      	ldrb	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	3307      	adds	r3, #7
 800a192:	430a      	orrs	r2, r1
 800a194:	b2d2      	uxtb	r2, r2
 800a196:	701a      	strb	r2, [r3, #0]
        break;
 800a198:	f000 bc8d 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 6:
        t1s7 = (uint16_t)src_p->t1s7;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800a1a2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        dst_p[0] |= pack_left_shift_u16(t1s7, 4u, 0xf0u);
 800a1a6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a1aa:	22f0      	movs	r2, #240	; 0xf0
 800a1ac:	2104      	movs	r1, #4
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7f6 ff25 	bl	8000ffe <pack_left_shift_u16>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s7, 4u, 0xffu);
 800a1c4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a1c8:	22ff      	movs	r2, #255	; 0xff
 800a1ca:	2104      	movs	r1, #4
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7f6 ff2d 	bl	800102c <pack_right_shift_u16>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	781a      	ldrb	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	b2d2      	uxtb	r2, r2
 800a1e4:	701a      	strb	r2, [r3, #0]
        t2s7 = (uint16_t)src_p->t2s7;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800a1ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        dst_p[2] |= pack_left_shift_u16(t2s7, 0u, 0xffu);
 800a1f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a1f4:	22ff      	movs	r2, #255	; 0xff
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7f6 ff00 	bl	8000ffe <pack_left_shift_u16>
 800a1fe:	4603      	mov	r3, r0
 800a200:	4619      	mov	r1, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3302      	adds	r3, #2
 800a206:	781a      	ldrb	r2, [r3, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	3302      	adds	r3, #2
 800a20c:	430a      	orrs	r2, r1
 800a20e:	b2d2      	uxtb	r2, r2
 800a210:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s7, 8u, 0x0fu);
 800a212:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a216:	220f      	movs	r2, #15
 800a218:	2108      	movs	r1, #8
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7f6 ff06 	bl	800102c <pack_right_shift_u16>
 800a220:	4603      	mov	r3, r0
 800a222:	4619      	mov	r1, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	3303      	adds	r3, #3
 800a228:	781a      	ldrb	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	3303      	adds	r3, #3
 800a22e:	430a      	orrs	r2, r1
 800a230:	b2d2      	uxtb	r2, r2
 800a232:	701a      	strb	r2, [r3, #0]
        t3s7 = (uint16_t)src_p->t3s7;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a23a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        dst_p[3] |= pack_left_shift_u16(t3s7, 4u, 0xf0u);
 800a23e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a242:	22f0      	movs	r2, #240	; 0xf0
 800a244:	2104      	movs	r1, #4
 800a246:	4618      	mov	r0, r3
 800a248:	f7f6 fed9 	bl	8000ffe <pack_left_shift_u16>
 800a24c:	4603      	mov	r3, r0
 800a24e:	4619      	mov	r1, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	3303      	adds	r3, #3
 800a254:	781a      	ldrb	r2, [r3, #0]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	3303      	adds	r3, #3
 800a25a:	430a      	orrs	r2, r1
 800a25c:	b2d2      	uxtb	r2, r2
 800a25e:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s7, 4u, 0xffu);
 800a260:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a264:	22ff      	movs	r2, #255	; 0xff
 800a266:	2104      	movs	r1, #4
 800a268:	4618      	mov	r0, r3
 800a26a:	f7f6 fedf 	bl	800102c <pack_right_shift_u16>
 800a26e:	4603      	mov	r3, r0
 800a270:	4619      	mov	r1, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3304      	adds	r3, #4
 800a276:	781a      	ldrb	r2, [r3, #0]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	3304      	adds	r3, #4
 800a27c:	430a      	orrs	r2, r1
 800a27e:	b2d2      	uxtb	r2, r2
 800a280:	701a      	strb	r2, [r3, #0]
        t4s7 = (uint16_t)src_p->t4s7;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800a288:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        dst_p[5] |= pack_left_shift_u16(t4s7, 0u, 0xffu);
 800a28c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a290:	22ff      	movs	r2, #255	; 0xff
 800a292:	2100      	movs	r1, #0
 800a294:	4618      	mov	r0, r3
 800a296:	f7f6 feb2 	bl	8000ffe <pack_left_shift_u16>
 800a29a:	4603      	mov	r3, r0
 800a29c:	4619      	mov	r1, r3
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	3305      	adds	r3, #5
 800a2a2:	781a      	ldrb	r2, [r3, #0]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	3305      	adds	r3, #5
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	b2d2      	uxtb	r2, r2
 800a2ac:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s7, 8u, 0x0fu);
 800a2ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2b2:	220f      	movs	r2, #15
 800a2b4:	2108      	movs	r1, #8
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7f6 feb8 	bl	800102c <pack_right_shift_u16>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	4619      	mov	r1, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3306      	adds	r3, #6
 800a2c4:	781a      	ldrb	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3306      	adds	r3, #6
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	b2d2      	uxtb	r2, r2
 800a2ce:	701a      	strb	r2, [r3, #0]
        t5s7 = (uint16_t)src_p->t5s7;
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	f9b3 306e 	ldrsh.w	r3, [r3, #110]	; 0x6e
 800a2d6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        dst_p[6] |= pack_left_shift_u16(t5s7, 4u, 0xf0u);
 800a2da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a2de:	22f0      	movs	r2, #240	; 0xf0
 800a2e0:	2104      	movs	r1, #4
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7f6 fe8b 	bl	8000ffe <pack_left_shift_u16>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	3306      	adds	r3, #6
 800a2f0:	781a      	ldrb	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3306      	adds	r3, #6
 800a2f6:	430a      	orrs	r2, r1
 800a2f8:	b2d2      	uxtb	r2, r2
 800a2fa:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s7, 4u, 0xffu);
 800a2fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a300:	22ff      	movs	r2, #255	; 0xff
 800a302:	2104      	movs	r1, #4
 800a304:	4618      	mov	r0, r3
 800a306:	f7f6 fe91 	bl	800102c <pack_right_shift_u16>
 800a30a:	4603      	mov	r3, r0
 800a30c:	4619      	mov	r1, r3
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	3307      	adds	r3, #7
 800a312:	781a      	ldrb	r2, [r3, #0]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	3307      	adds	r3, #7
 800a318:	430a      	orrs	r2, r1
 800a31a:	b2d2      	uxtb	r2, r2
 800a31c:	701a      	strb	r2, [r3, #0]
        break;
 800a31e:	e3ca      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 7:
        t1s8 = (uint16_t)src_p->t1s8;
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a326:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        dst_p[0] |= pack_left_shift_u16(t1s8, 4u, 0xf0u);
 800a32a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a32e:	22f0      	movs	r2, #240	; 0xf0
 800a330:	2104      	movs	r1, #4
 800a332:	4618      	mov	r0, r3
 800a334:	f7f6 fe63 	bl	8000ffe <pack_left_shift_u16>
 800a338:	4603      	mov	r3, r0
 800a33a:	461a      	mov	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	4313      	orrs	r3, r2
 800a342:	b2da      	uxtb	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s8, 4u, 0xffu);
 800a348:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a34c:	22ff      	movs	r2, #255	; 0xff
 800a34e:	2104      	movs	r1, #4
 800a350:	4618      	mov	r0, r3
 800a352:	f7f6 fe6b 	bl	800102c <pack_right_shift_u16>
 800a356:	4603      	mov	r3, r0
 800a358:	4619      	mov	r1, r3
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3301      	adds	r3, #1
 800a35e:	781a      	ldrb	r2, [r3, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	3301      	adds	r3, #1
 800a364:	430a      	orrs	r2, r1
 800a366:	b2d2      	uxtb	r2, r2
 800a368:	701a      	strb	r2, [r3, #0]
        t2s8 = (uint16_t)src_p->t2s8;
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800a370:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        dst_p[2] |= pack_left_shift_u16(t2s8, 0u, 0xffu);
 800a374:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a378:	22ff      	movs	r2, #255	; 0xff
 800a37a:	2100      	movs	r1, #0
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7f6 fe3e 	bl	8000ffe <pack_left_shift_u16>
 800a382:	4603      	mov	r3, r0
 800a384:	4619      	mov	r1, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3302      	adds	r3, #2
 800a38a:	781a      	ldrb	r2, [r3, #0]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	3302      	adds	r3, #2
 800a390:	430a      	orrs	r2, r1
 800a392:	b2d2      	uxtb	r2, r2
 800a394:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s8, 8u, 0x0fu);
 800a396:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a39a:	220f      	movs	r2, #15
 800a39c:	2108      	movs	r1, #8
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7f6 fe44 	bl	800102c <pack_right_shift_u16>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3303      	adds	r3, #3
 800a3ac:	781a      	ldrb	r2, [r3, #0]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3303      	adds	r3, #3
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	b2d2      	uxtb	r2, r2
 800a3b6:	701a      	strb	r2, [r3, #0]
        t3s8 = (uint16_t)src_p->t3s8;
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a3be:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        dst_p[3] |= pack_left_shift_u16(t3s8, 4u, 0xf0u);
 800a3c2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a3c6:	22f0      	movs	r2, #240	; 0xf0
 800a3c8:	2104      	movs	r1, #4
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7f6 fe17 	bl	8000ffe <pack_left_shift_u16>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3303      	adds	r3, #3
 800a3d8:	781a      	ldrb	r2, [r3, #0]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	3303      	adds	r3, #3
 800a3de:	430a      	orrs	r2, r1
 800a3e0:	b2d2      	uxtb	r2, r2
 800a3e2:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s8, 4u, 0xffu);
 800a3e4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a3e8:	22ff      	movs	r2, #255	; 0xff
 800a3ea:	2104      	movs	r1, #4
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7f6 fe1d 	bl	800102c <pack_right_shift_u16>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	3304      	adds	r3, #4
 800a3fa:	781a      	ldrb	r2, [r3, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	3304      	adds	r3, #4
 800a400:	430a      	orrs	r2, r1
 800a402:	b2d2      	uxtb	r2, r2
 800a404:	701a      	strb	r2, [r3, #0]
        t4s8 = (uint16_t)src_p->t4s8;
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800a40c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        dst_p[5] |= pack_left_shift_u16(t4s8, 0u, 0xffu);
 800a410:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800a414:	22ff      	movs	r2, #255	; 0xff
 800a416:	2100      	movs	r1, #0
 800a418:	4618      	mov	r0, r3
 800a41a:	f7f6 fdf0 	bl	8000ffe <pack_left_shift_u16>
 800a41e:	4603      	mov	r3, r0
 800a420:	4619      	mov	r1, r3
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	3305      	adds	r3, #5
 800a426:	781a      	ldrb	r2, [r3, #0]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3305      	adds	r3, #5
 800a42c:	430a      	orrs	r2, r1
 800a42e:	b2d2      	uxtb	r2, r2
 800a430:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s8, 8u, 0x0fu);
 800a432:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800a436:	220f      	movs	r2, #15
 800a438:	2108      	movs	r1, #8
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7f6 fdf6 	bl	800102c <pack_right_shift_u16>
 800a440:	4603      	mov	r3, r0
 800a442:	4619      	mov	r1, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	3306      	adds	r3, #6
 800a448:	781a      	ldrb	r2, [r3, #0]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3306      	adds	r3, #6
 800a44e:	430a      	orrs	r2, r1
 800a450:	b2d2      	uxtb	r2, r2
 800a452:	701a      	strb	r2, [r3, #0]
        t5s8 = (uint16_t)src_p->t5s8;
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800a45a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        dst_p[6] |= pack_left_shift_u16(t5s8, 4u, 0xf0u);
 800a45e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a462:	22f0      	movs	r2, #240	; 0xf0
 800a464:	2104      	movs	r1, #4
 800a466:	4618      	mov	r0, r3
 800a468:	f7f6 fdc9 	bl	8000ffe <pack_left_shift_u16>
 800a46c:	4603      	mov	r3, r0
 800a46e:	4619      	mov	r1, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	3306      	adds	r3, #6
 800a474:	781a      	ldrb	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3306      	adds	r3, #6
 800a47a:	430a      	orrs	r2, r1
 800a47c:	b2d2      	uxtb	r2, r2
 800a47e:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s8, 4u, 0xffu);
 800a480:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a484:	22ff      	movs	r2, #255	; 0xff
 800a486:	2104      	movs	r1, #4
 800a488:	4618      	mov	r0, r3
 800a48a:	f7f6 fdcf 	bl	800102c <pack_right_shift_u16>
 800a48e:	4603      	mov	r3, r0
 800a490:	4619      	mov	r1, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3307      	adds	r3, #7
 800a496:	781a      	ldrb	r2, [r3, #0]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	3307      	adds	r3, #7
 800a49c:	430a      	orrs	r2, r1
 800a49e:	b2d2      	uxtb	r2, r2
 800a4a0:	701a      	strb	r2, [r3, #0]
        break;
 800a4a2:	e308      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 8:
        t1s9 = (uint16_t)src_p->t1s9;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a4aa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        dst_p[0] |= pack_left_shift_u16(t1s9, 4u, 0xf0u);
 800a4ae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a4b2:	22f0      	movs	r2, #240	; 0xf0
 800a4b4:	2104      	movs	r1, #4
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7f6 fda1 	bl	8000ffe <pack_left_shift_u16>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	461a      	mov	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s9, 4u, 0xffu);
 800a4cc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a4d0:	22ff      	movs	r2, #255	; 0xff
 800a4d2:	2104      	movs	r1, #4
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7f6 fda9 	bl	800102c <pack_right_shift_u16>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	4619      	mov	r1, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	781a      	ldrb	r2, [r3, #0]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	b2d2      	uxtb	r2, r2
 800a4ec:	701a      	strb	r2, [r3, #0]
        t2s9 = (uint16_t)src_p->t2s9;
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800a4f4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        dst_p[2] |= pack_left_shift_u16(t2s9, 0u, 0xffu);
 800a4f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a4fc:	22ff      	movs	r2, #255	; 0xff
 800a4fe:	2100      	movs	r1, #0
 800a500:	4618      	mov	r0, r3
 800a502:	f7f6 fd7c 	bl	8000ffe <pack_left_shift_u16>
 800a506:	4603      	mov	r3, r0
 800a508:	4619      	mov	r1, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	3302      	adds	r3, #2
 800a50e:	781a      	ldrb	r2, [r3, #0]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	3302      	adds	r3, #2
 800a514:	430a      	orrs	r2, r1
 800a516:	b2d2      	uxtb	r2, r2
 800a518:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s9, 8u, 0x0fu);
 800a51a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a51e:	220f      	movs	r2, #15
 800a520:	2108      	movs	r1, #8
 800a522:	4618      	mov	r0, r3
 800a524:	f7f6 fd82 	bl	800102c <pack_right_shift_u16>
 800a528:	4603      	mov	r3, r0
 800a52a:	4619      	mov	r1, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	3303      	adds	r3, #3
 800a530:	781a      	ldrb	r2, [r3, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	3303      	adds	r3, #3
 800a536:	430a      	orrs	r2, r1
 800a538:	b2d2      	uxtb	r2, r2
 800a53a:	701a      	strb	r2, [r3, #0]
        t3s9 = (uint16_t)src_p->t3s9;
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800a542:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        dst_p[3] |= pack_left_shift_u16(t3s9, 4u, 0xf0u);
 800a546:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a54a:	22f0      	movs	r2, #240	; 0xf0
 800a54c:	2104      	movs	r1, #4
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f6 fd55 	bl	8000ffe <pack_left_shift_u16>
 800a554:	4603      	mov	r3, r0
 800a556:	4619      	mov	r1, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3303      	adds	r3, #3
 800a55c:	781a      	ldrb	r2, [r3, #0]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3303      	adds	r3, #3
 800a562:	430a      	orrs	r2, r1
 800a564:	b2d2      	uxtb	r2, r2
 800a566:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s9, 4u, 0xffu);
 800a568:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a56c:	22ff      	movs	r2, #255	; 0xff
 800a56e:	2104      	movs	r1, #4
 800a570:	4618      	mov	r0, r3
 800a572:	f7f6 fd5b 	bl	800102c <pack_right_shift_u16>
 800a576:	4603      	mov	r3, r0
 800a578:	4619      	mov	r1, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3304      	adds	r3, #4
 800a57e:	781a      	ldrb	r2, [r3, #0]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3304      	adds	r3, #4
 800a584:	430a      	orrs	r2, r1
 800a586:	b2d2      	uxtb	r2, r2
 800a588:	701a      	strb	r2, [r3, #0]
        t4s9 = (uint16_t)src_p->t4s9;
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 800a590:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        dst_p[5] |= pack_left_shift_u16(t4s9, 0u, 0xffu);
 800a594:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a598:	22ff      	movs	r2, #255	; 0xff
 800a59a:	2100      	movs	r1, #0
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7f6 fd2e 	bl	8000ffe <pack_left_shift_u16>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3305      	adds	r3, #5
 800a5aa:	781a      	ldrb	r2, [r3, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	3305      	adds	r3, #5
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	b2d2      	uxtb	r2, r2
 800a5b4:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s9, 8u, 0x0fu);
 800a5b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a5ba:	220f      	movs	r2, #15
 800a5bc:	2108      	movs	r1, #8
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7f6 fd34 	bl	800102c <pack_right_shift_u16>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	3306      	adds	r3, #6
 800a5cc:	781a      	ldrb	r2, [r3, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3306      	adds	r3, #6
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	b2d2      	uxtb	r2, r2
 800a5d6:	701a      	strb	r2, [r3, #0]
        t5s9 = (uint16_t)src_p->t5s9;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800a5de:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        dst_p[6] |= pack_left_shift_u16(t5s9, 4u, 0xf0u);
 800a5e2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800a5e6:	22f0      	movs	r2, #240	; 0xf0
 800a5e8:	2104      	movs	r1, #4
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7f6 fd07 	bl	8000ffe <pack_left_shift_u16>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	3306      	adds	r3, #6
 800a5f8:	781a      	ldrb	r2, [r3, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3306      	adds	r3, #6
 800a5fe:	430a      	orrs	r2, r1
 800a600:	b2d2      	uxtb	r2, r2
 800a602:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s9, 4u, 0xffu);
 800a604:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800a608:	22ff      	movs	r2, #255	; 0xff
 800a60a:	2104      	movs	r1, #4
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7f6 fd0d 	bl	800102c <pack_right_shift_u16>
 800a612:	4603      	mov	r3, r0
 800a614:	4619      	mov	r1, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3307      	adds	r3, #7
 800a61a:	781a      	ldrb	r2, [r3, #0]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	3307      	adds	r3, #7
 800a620:	430a      	orrs	r2, r1
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	701a      	strb	r2, [r3, #0]
        break;
 800a626:	e246      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 9:
        t1s10 = (uint16_t)src_p->t1s10;
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a62e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        dst_p[0] |= pack_left_shift_u16(t1s10, 4u, 0xf0u);
 800a632:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800a636:	22f0      	movs	r2, #240	; 0xf0
 800a638:	2104      	movs	r1, #4
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7f6 fcdf 	bl	8000ffe <pack_left_shift_u16>
 800a640:	4603      	mov	r3, r0
 800a642:	461a      	mov	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	4313      	orrs	r3, r2
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s10, 4u, 0xffu);
 800a650:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800a654:	22ff      	movs	r2, #255	; 0xff
 800a656:	2104      	movs	r1, #4
 800a658:	4618      	mov	r0, r3
 800a65a:	f7f6 fce7 	bl	800102c <pack_right_shift_u16>
 800a65e:	4603      	mov	r3, r0
 800a660:	4619      	mov	r1, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3301      	adds	r3, #1
 800a666:	781a      	ldrb	r2, [r3, #0]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3301      	adds	r3, #1
 800a66c:	430a      	orrs	r2, r1
 800a66e:	b2d2      	uxtb	r2, r2
 800a670:	701a      	strb	r2, [r3, #0]
        t2s10 = (uint16_t)src_p->t2s10;
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800a678:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        dst_p[2] |= pack_left_shift_u16(t2s10, 0u, 0xffu);
 800a67c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800a680:	22ff      	movs	r2, #255	; 0xff
 800a682:	2100      	movs	r1, #0
 800a684:	4618      	mov	r0, r3
 800a686:	f7f6 fcba 	bl	8000ffe <pack_left_shift_u16>
 800a68a:	4603      	mov	r3, r0
 800a68c:	4619      	mov	r1, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	3302      	adds	r3, #2
 800a692:	781a      	ldrb	r2, [r3, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	3302      	adds	r3, #2
 800a698:	430a      	orrs	r2, r1
 800a69a:	b2d2      	uxtb	r2, r2
 800a69c:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s10, 8u, 0x0fu);
 800a69e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800a6a2:	220f      	movs	r2, #15
 800a6a4:	2108      	movs	r1, #8
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7f6 fcc0 	bl	800102c <pack_right_shift_u16>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	3303      	adds	r3, #3
 800a6b4:	781a      	ldrb	r2, [r3, #0]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	3303      	adds	r3, #3
 800a6ba:	430a      	orrs	r2, r1
 800a6bc:	b2d2      	uxtb	r2, r2
 800a6be:	701a      	strb	r2, [r3, #0]
        t3s10 = (uint16_t)src_p->t3s10;
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a6c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        dst_p[3] |= pack_left_shift_u16(t3s10, 4u, 0xf0u);
 800a6ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a6ce:	22f0      	movs	r2, #240	; 0xf0
 800a6d0:	2104      	movs	r1, #4
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7f6 fc93 	bl	8000ffe <pack_left_shift_u16>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	4619      	mov	r1, r3
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	3303      	adds	r3, #3
 800a6e0:	781a      	ldrb	r2, [r3, #0]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3303      	adds	r3, #3
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	b2d2      	uxtb	r2, r2
 800a6ea:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s10, 4u, 0xffu);
 800a6ec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a6f0:	22ff      	movs	r2, #255	; 0xff
 800a6f2:	2104      	movs	r1, #4
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7f6 fc99 	bl	800102c <pack_right_shift_u16>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3304      	adds	r3, #4
 800a702:	781a      	ldrb	r2, [r3, #0]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3304      	adds	r3, #4
 800a708:	430a      	orrs	r2, r1
 800a70a:	b2d2      	uxtb	r2, r2
 800a70c:	701a      	strb	r2, [r3, #0]
        t4s10 = (uint16_t)src_p->t4s10;
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 800a714:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        dst_p[5] |= pack_left_shift_u16(t4s10, 0u, 0xffu);
 800a718:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a71c:	22ff      	movs	r2, #255	; 0xff
 800a71e:	2100      	movs	r1, #0
 800a720:	4618      	mov	r0, r3
 800a722:	f7f6 fc6c 	bl	8000ffe <pack_left_shift_u16>
 800a726:	4603      	mov	r3, r0
 800a728:	4619      	mov	r1, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	3305      	adds	r3, #5
 800a72e:	781a      	ldrb	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	3305      	adds	r3, #5
 800a734:	430a      	orrs	r2, r1
 800a736:	b2d2      	uxtb	r2, r2
 800a738:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s10, 8u, 0x0fu);
 800a73a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a73e:	220f      	movs	r2, #15
 800a740:	2108      	movs	r1, #8
 800a742:	4618      	mov	r0, r3
 800a744:	f7f6 fc72 	bl	800102c <pack_right_shift_u16>
 800a748:	4603      	mov	r3, r0
 800a74a:	4619      	mov	r1, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	3306      	adds	r3, #6
 800a750:	781a      	ldrb	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3306      	adds	r3, #6
 800a756:	430a      	orrs	r2, r1
 800a758:	b2d2      	uxtb	r2, r2
 800a75a:	701a      	strb	r2, [r3, #0]
        t5s10 = (uint16_t)src_p->t5s10;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800a762:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        dst_p[6] |= pack_left_shift_u16(t5s10, 4u, 0xf0u);
 800a766:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800a76a:	22f0      	movs	r2, #240	; 0xf0
 800a76c:	2104      	movs	r1, #4
 800a76e:	4618      	mov	r0, r3
 800a770:	f7f6 fc45 	bl	8000ffe <pack_left_shift_u16>
 800a774:	4603      	mov	r3, r0
 800a776:	4619      	mov	r1, r3
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	3306      	adds	r3, #6
 800a77c:	781a      	ldrb	r2, [r3, #0]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3306      	adds	r3, #6
 800a782:	430a      	orrs	r2, r1
 800a784:	b2d2      	uxtb	r2, r2
 800a786:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s10, 4u, 0xffu);
 800a788:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800a78c:	22ff      	movs	r2, #255	; 0xff
 800a78e:	2104      	movs	r1, #4
 800a790:	4618      	mov	r0, r3
 800a792:	f7f6 fc4b 	bl	800102c <pack_right_shift_u16>
 800a796:	4603      	mov	r3, r0
 800a798:	4619      	mov	r1, r3
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3307      	adds	r3, #7
 800a79e:	781a      	ldrb	r2, [r3, #0]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	3307      	adds	r3, #7
 800a7a4:	430a      	orrs	r2, r1
 800a7a6:	b2d2      	uxtb	r2, r2
 800a7a8:	701a      	strb	r2, [r3, #0]
        break;
 800a7aa:	e184      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 10:
        t1s11 = (uint16_t)src_p->t1s11;
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a7b2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        dst_p[0] |= pack_left_shift_u16(t1s11, 4u, 0xf0u);
 800a7b6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800a7ba:	22f0      	movs	r2, #240	; 0xf0
 800a7bc:	2104      	movs	r1, #4
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7f6 fc1d 	bl	8000ffe <pack_left_shift_u16>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s11, 4u, 0xffu);
 800a7d4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800a7d8:	22ff      	movs	r2, #255	; 0xff
 800a7da:	2104      	movs	r1, #4
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7f6 fc25 	bl	800102c <pack_right_shift_u16>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	781a      	ldrb	r2, [r3, #0]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	b2d2      	uxtb	r2, r2
 800a7f4:	701a      	strb	r2, [r3, #0]
        t2s11 = (uint16_t)src_p->t2s11;
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800a7fc:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        dst_p[2] |= pack_left_shift_u16(t2s11, 0u, 0xffu);
 800a800:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a804:	22ff      	movs	r2, #255	; 0xff
 800a806:	2100      	movs	r1, #0
 800a808:	4618      	mov	r0, r3
 800a80a:	f7f6 fbf8 	bl	8000ffe <pack_left_shift_u16>
 800a80e:	4603      	mov	r3, r0
 800a810:	4619      	mov	r1, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3302      	adds	r3, #2
 800a816:	781a      	ldrb	r2, [r3, #0]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	3302      	adds	r3, #2
 800a81c:	430a      	orrs	r2, r1
 800a81e:	b2d2      	uxtb	r2, r2
 800a820:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s11, 8u, 0x0fu);
 800a822:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a826:	220f      	movs	r2, #15
 800a828:	2108      	movs	r1, #8
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7f6 fbfe 	bl	800102c <pack_right_shift_u16>
 800a830:	4603      	mov	r3, r0
 800a832:	4619      	mov	r1, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	3303      	adds	r3, #3
 800a838:	781a      	ldrb	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3303      	adds	r3, #3
 800a83e:	430a      	orrs	r2, r1
 800a840:	b2d2      	uxtb	r2, r2
 800a842:	701a      	strb	r2, [r3, #0]
        t3s11 = (uint16_t)src_p->t3s11;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a84a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        dst_p[3] |= pack_left_shift_u16(t3s11, 4u, 0xf0u);
 800a84e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a852:	22f0      	movs	r2, #240	; 0xf0
 800a854:	2104      	movs	r1, #4
 800a856:	4618      	mov	r0, r3
 800a858:	f7f6 fbd1 	bl	8000ffe <pack_left_shift_u16>
 800a85c:	4603      	mov	r3, r0
 800a85e:	4619      	mov	r1, r3
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	3303      	adds	r3, #3
 800a864:	781a      	ldrb	r2, [r3, #0]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3303      	adds	r3, #3
 800a86a:	430a      	orrs	r2, r1
 800a86c:	b2d2      	uxtb	r2, r2
 800a86e:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s11, 4u, 0xffu);
 800a870:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a874:	22ff      	movs	r2, #255	; 0xff
 800a876:	2104      	movs	r1, #4
 800a878:	4618      	mov	r0, r3
 800a87a:	f7f6 fbd7 	bl	800102c <pack_right_shift_u16>
 800a87e:	4603      	mov	r3, r0
 800a880:	4619      	mov	r1, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3304      	adds	r3, #4
 800a886:	781a      	ldrb	r2, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	3304      	adds	r3, #4
 800a88c:	430a      	orrs	r2, r1
 800a88e:	b2d2      	uxtb	r2, r2
 800a890:	701a      	strb	r2, [r3, #0]
        t4s11 = (uint16_t)src_p->t4s11;
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 800a898:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        dst_p[5] |= pack_left_shift_u16(t4s11, 0u, 0xffu);
 800a89c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a8a0:	22ff      	movs	r2, #255	; 0xff
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7f6 fbaa 	bl	8000ffe <pack_left_shift_u16>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3305      	adds	r3, #5
 800a8b2:	781a      	ldrb	r2, [r3, #0]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	3305      	adds	r3, #5
 800a8b8:	430a      	orrs	r2, r1
 800a8ba:	b2d2      	uxtb	r2, r2
 800a8bc:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s11, 8u, 0x0fu);
 800a8be:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a8c2:	220f      	movs	r2, #15
 800a8c4:	2108      	movs	r1, #8
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7f6 fbb0 	bl	800102c <pack_right_shift_u16>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	3306      	adds	r3, #6
 800a8d4:	781a      	ldrb	r2, [r3, #0]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	3306      	adds	r3, #6
 800a8da:	430a      	orrs	r2, r1
 800a8dc:	b2d2      	uxtb	r2, r2
 800a8de:	701a      	strb	r2, [r3, #0]
        t5s11 = (uint16_t)src_p->t5s11;
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 800a8e6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        dst_p[6] |= pack_left_shift_u16(t5s11, 4u, 0xf0u);
 800a8ea:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800a8ee:	22f0      	movs	r2, #240	; 0xf0
 800a8f0:	2104      	movs	r1, #4
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7f6 fb83 	bl	8000ffe <pack_left_shift_u16>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	3306      	adds	r3, #6
 800a900:	781a      	ldrb	r2, [r3, #0]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3306      	adds	r3, #6
 800a906:	430a      	orrs	r2, r1
 800a908:	b2d2      	uxtb	r2, r2
 800a90a:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s11, 4u, 0xffu);
 800a90c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800a910:	22ff      	movs	r2, #255	; 0xff
 800a912:	2104      	movs	r1, #4
 800a914:	4618      	mov	r0, r3
 800a916:	f7f6 fb89 	bl	800102c <pack_right_shift_u16>
 800a91a:	4603      	mov	r3, r0
 800a91c:	4619      	mov	r1, r3
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3307      	adds	r3, #7
 800a922:	781a      	ldrb	r2, [r3, #0]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	3307      	adds	r3, #7
 800a928:	430a      	orrs	r2, r1
 800a92a:	b2d2      	uxtb	r2, r2
 800a92c:	701a      	strb	r2, [r3, #0]
        break;
 800a92e:	e0c2      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 11:
        t1s12 = (uint16_t)src_p->t1s12;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a936:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        dst_p[0] |= pack_left_shift_u16(t1s12, 4u, 0xf0u);
 800a93a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a93e:	22f0      	movs	r2, #240	; 0xf0
 800a940:	2104      	movs	r1, #4
 800a942:	4618      	mov	r0, r3
 800a944:	f7f6 fb5b 	bl	8000ffe <pack_left_shift_u16>
 800a948:	4603      	mov	r3, r0
 800a94a:	461a      	mov	r2, r3
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	4313      	orrs	r3, r2
 800a952:	b2da      	uxtb	r2, r3
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s12, 4u, 0xffu);
 800a958:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a95c:	22ff      	movs	r2, #255	; 0xff
 800a95e:	2104      	movs	r1, #4
 800a960:	4618      	mov	r0, r3
 800a962:	f7f6 fb63 	bl	800102c <pack_right_shift_u16>
 800a966:	4603      	mov	r3, r0
 800a968:	4619      	mov	r1, r3
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3301      	adds	r3, #1
 800a96e:	781a      	ldrb	r2, [r3, #0]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	3301      	adds	r3, #1
 800a974:	430a      	orrs	r2, r1
 800a976:	b2d2      	uxtb	r2, r2
 800a978:	701a      	strb	r2, [r3, #0]
        t2s12 = (uint16_t)src_p->t2s12;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a980:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        dst_p[2] |= pack_left_shift_u16(t2s12, 0u, 0xffu);
 800a984:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a988:	22ff      	movs	r2, #255	; 0xff
 800a98a:	2100      	movs	r1, #0
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7f6 fb36 	bl	8000ffe <pack_left_shift_u16>
 800a992:	4603      	mov	r3, r0
 800a994:	4619      	mov	r1, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3302      	adds	r3, #2
 800a99a:	781a      	ldrb	r2, [r3, #0]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	3302      	adds	r3, #2
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	b2d2      	uxtb	r2, r2
 800a9a4:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s12, 8u, 0x0fu);
 800a9a6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a9aa:	220f      	movs	r2, #15
 800a9ac:	2108      	movs	r1, #8
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7f6 fb3c 	bl	800102c <pack_right_shift_u16>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	3303      	adds	r3, #3
 800a9bc:	781a      	ldrb	r2, [r3, #0]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	3303      	adds	r3, #3
 800a9c2:	430a      	orrs	r2, r1
 800a9c4:	b2d2      	uxtb	r2, r2
 800a9c6:	701a      	strb	r2, [r3, #0]
        t3s12 = (uint16_t)src_p->t3s12;
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800a9ce:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        dst_p[3] |= pack_left_shift_u16(t3s12, 4u, 0xf0u);
 800a9d2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800a9d6:	22f0      	movs	r2, #240	; 0xf0
 800a9d8:	2104      	movs	r1, #4
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7f6 fb0f 	bl	8000ffe <pack_left_shift_u16>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	3303      	adds	r3, #3
 800a9e8:	781a      	ldrb	r2, [r3, #0]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3303      	adds	r3, #3
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	b2d2      	uxtb	r2, r2
 800a9f2:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s12, 4u, 0xffu);
 800a9f4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800a9f8:	22ff      	movs	r2, #255	; 0xff
 800a9fa:	2104      	movs	r1, #4
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7f6 fb15 	bl	800102c <pack_right_shift_u16>
 800aa02:	4603      	mov	r3, r0
 800aa04:	4619      	mov	r1, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3304      	adds	r3, #4
 800aa0a:	781a      	ldrb	r2, [r3, #0]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	430a      	orrs	r2, r1
 800aa12:	b2d2      	uxtb	r2, r2
 800aa14:	701a      	strb	r2, [r3, #0]
        t4s12 = (uint16_t)src_p->t4s12;
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 800aa1c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        dst_p[5] |= pack_left_shift_u16(t4s12, 0u, 0xffu);
 800aa20:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800aa24:	22ff      	movs	r2, #255	; 0xff
 800aa26:	2100      	movs	r1, #0
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7f6 fae8 	bl	8000ffe <pack_left_shift_u16>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	4619      	mov	r1, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3305      	adds	r3, #5
 800aa36:	781a      	ldrb	r2, [r3, #0]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	3305      	adds	r3, #5
 800aa3c:	430a      	orrs	r2, r1
 800aa3e:	b2d2      	uxtb	r2, r2
 800aa40:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s12, 8u, 0x0fu);
 800aa42:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800aa46:	220f      	movs	r2, #15
 800aa48:	2108      	movs	r1, #8
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7f6 faee 	bl	800102c <pack_right_shift_u16>
 800aa50:	4603      	mov	r3, r0
 800aa52:	4619      	mov	r1, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	3306      	adds	r3, #6
 800aa58:	781a      	ldrb	r2, [r3, #0]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	3306      	adds	r3, #6
 800aa5e:	430a      	orrs	r2, r1
 800aa60:	b2d2      	uxtb	r2, r2
 800aa62:	701a      	strb	r2, [r3, #0]
        t5s12 = (uint16_t)src_p->t5s12;
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800aa6a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        dst_p[6] |= pack_left_shift_u16(t5s12, 4u, 0xf0u);
 800aa6e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800aa72:	22f0      	movs	r2, #240	; 0xf0
 800aa74:	2104      	movs	r1, #4
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7f6 fac1 	bl	8000ffe <pack_left_shift_u16>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	4619      	mov	r1, r3
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	3306      	adds	r3, #6
 800aa84:	781a      	ldrb	r2, [r3, #0]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	3306      	adds	r3, #6
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	b2d2      	uxtb	r2, r2
 800aa8e:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s12, 4u, 0xffu);
 800aa90:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800aa94:	22ff      	movs	r2, #255	; 0xff
 800aa96:	2104      	movs	r1, #4
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7f6 fac7 	bl	800102c <pack_right_shift_u16>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3307      	adds	r3, #7
 800aaa6:	781a      	ldrb	r2, [r3, #0]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	3307      	adds	r3, #7
 800aaac:	430a      	orrs	r2, r1
 800aaae:	b2d2      	uxtb	r2, r2
 800aab0:	701a      	strb	r2, [r3, #0]
        break;
 800aab2:	e000      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    default:
        break;
 800aab4:	bf00      	nop
    }

    return (8);
 800aab6:	2308      	movs	r3, #8
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3788      	adds	r7, #136	; 0x88
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <can1_ams_cell_temperatures_unpack>:

int can1_ams_cell_temperatures_unpack(
    struct can1_ams_cell_temperatures_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b0a2      	sub	sp, #136	; 0x88
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
    uint16_t t5s6;
    uint16_t t5s7;
    uint16_t t5s8;
    uint16_t t5s9;

    if (size < 8u) {
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b07      	cmp	r3, #7
 800aad0:	d803      	bhi.n	800aada <can1_ams_cell_temperatures_unpack+0x1a>
        return (-EINVAL);
 800aad2:	f06f 0315 	mvn.w	r3, #21
 800aad6:	f001 ba11 	b.w	800befc <can1_ams_cell_temperatures_unpack+0x143c>
    }

    dst_p->temperature_multiplexor = unpack_right_shift_u8(src_p[0], 0u, 0x0fu);
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	220f      	movs	r2, #15
 800aae0:	2100      	movs	r1, #0
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7f6 fad1 	bl	800108a <unpack_right_shift_u8>
 800aae8:	4603      	mov	r3, r0
 800aaea:	461a      	mov	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	701a      	strb	r2, [r3, #0]

    switch (dst_p->temperature_multiplexor) {
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	2b0b      	cmp	r3, #11
 800aaf6:	f201 81ff 	bhi.w	800bef8 <can1_ams_cell_temperatures_unpack+0x1438>
 800aafa:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <can1_ams_cell_temperatures_unpack+0x40>)
 800aafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab00:	0800ab31 	.word	0x0800ab31
 800ab04:	0800acd7 	.word	0x0800acd7
 800ab08:	0800ae7d 	.word	0x0800ae7d
 800ab0c:	0800b023 	.word	0x0800b023
 800ab10:	0800b1c9 	.word	0x0800b1c9
 800ab14:	0800b36f 	.word	0x0800b36f
 800ab18:	0800b515 	.word	0x0800b515
 800ab1c:	0800b6bb 	.word	0x0800b6bb
 800ab20:	0800b861 	.word	0x0800b861
 800ab24:	0800ba07 	.word	0x0800ba07
 800ab28:	0800bbad 	.word	0x0800bbad
 800ab2c:	0800bd53 	.word	0x0800bd53

    case 0:
        t1s1 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	22f0      	movs	r2, #240	; 0xf0
 800ab36:	2104      	movs	r1, #4
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7f6 fabe 	bl	80010ba <unpack_right_shift_u16>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        t1s1 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	3301      	adds	r3, #1
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	22ff      	movs	r2, #255	; 0xff
 800ab4c:	2104      	movs	r1, #4
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7f6 fa83 	bl	800105a <unpack_left_shift_u16>
 800ab54:	4603      	mov	r3, r0
 800ab56:	461a      	mov	r2, r3
 800ab58:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

        if ((t1s1 & (1u << 11)) != 0u) {
 800ab62:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800ab66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d007      	beq.n	800ab7e <can1_ams_cell_temperatures_unpack+0xbe>
            t1s1 |= 0xf000u;
 800ab6e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800ab72:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ab76:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ab7a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        }

        dst_p->t1s1 = (int16_t)t1s1;
 800ab7e:	f9b7 2080 	ldrsh.w	r2, [r7, #128]	; 0x80
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	805a      	strh	r2, [r3, #2]
        t2s1 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	3302      	adds	r3, #2
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	22ff      	movs	r2, #255	; 0xff
 800ab8e:	2100      	movs	r1, #0
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7f6 fa92 	bl	80010ba <unpack_right_shift_u16>
 800ab96:	4603      	mov	r3, r0
 800ab98:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        t2s1 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	3303      	adds	r3, #3
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	220f      	movs	r2, #15
 800aba4:	2108      	movs	r1, #8
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7f6 fa57 	bl	800105a <unpack_left_shift_u16>
 800abac:	4603      	mov	r3, r0
 800abae:	461a      	mov	r2, r3
 800abb0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800abb4:	4313      	orrs	r3, r2
 800abb6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

        if ((t2s1 & (1u << 11)) != 0u) {
 800abba:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800abbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d007      	beq.n	800abd6 <can1_ams_cell_temperatures_unpack+0x116>
            t2s1 |= 0xf000u;
 800abc6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800abca:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800abce:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800abd2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        }

        dst_p->t2s1 = (int16_t)t2s1;
 800abd6:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	835a      	strh	r2, [r3, #26]
        t3s1 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	3303      	adds	r3, #3
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	22f0      	movs	r2, #240	; 0xf0
 800abe6:	2104      	movs	r1, #4
 800abe8:	4618      	mov	r0, r3
 800abea:	f7f6 fa66 	bl	80010ba <unpack_right_shift_u16>
 800abee:	4603      	mov	r3, r0
 800abf0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        t3s1 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	3304      	adds	r3, #4
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	22ff      	movs	r2, #255	; 0xff
 800abfc:	2104      	movs	r1, #4
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7f6 fa2b 	bl	800105a <unpack_left_shift_u16>
 800ac04:	4603      	mov	r3, r0
 800ac06:	461a      	mov	r2, r3
 800ac08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

        if ((t3s1 & (1u << 11)) != 0u) {
 800ac12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ac16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d007      	beq.n	800ac2e <can1_ams_cell_temperatures_unpack+0x16e>
            t3s1 |= 0xf000u;
 800ac1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ac22:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ac26:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ac2a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        }

        dst_p->t3s1 = (int16_t)t3s1;
 800ac2e:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	865a      	strh	r2, [r3, #50]	; 0x32
        t4s1 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	3305      	adds	r3, #5
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	22ff      	movs	r2, #255	; 0xff
 800ac3e:	2100      	movs	r1, #0
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7f6 fa3a 	bl	80010ba <unpack_right_shift_u16>
 800ac46:	4603      	mov	r3, r0
 800ac48:	873b      	strh	r3, [r7, #56]	; 0x38
        t4s1 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	3306      	adds	r3, #6
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	220f      	movs	r2, #15
 800ac52:	2108      	movs	r1, #8
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7f6 fa00 	bl	800105a <unpack_left_shift_u16>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac60:	4313      	orrs	r3, r2
 800ac62:	873b      	strh	r3, [r7, #56]	; 0x38

        if ((t4s1 & (1u << 11)) != 0u) {
 800ac64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d005      	beq.n	800ac7a <can1_ams_cell_temperatures_unpack+0x1ba>
            t4s1 |= 0xf000u;
 800ac6e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac70:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ac74:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ac78:	873b      	strh	r3, [r7, #56]	; 0x38
        }

        dst_p->t4s1 = (int16_t)t4s1;
 800ac7a:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        t5s1 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	3306      	adds	r3, #6
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	22f0      	movs	r2, #240	; 0xf0
 800ac8c:	2104      	movs	r1, #4
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7f6 fa13 	bl	80010ba <unpack_right_shift_u16>
 800ac94:	4603      	mov	r3, r0
 800ac96:	843b      	strh	r3, [r7, #32]
        t5s1 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	3307      	adds	r3, #7
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	22ff      	movs	r2, #255	; 0xff
 800aca0:	2104      	movs	r1, #4
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7f6 f9d9 	bl	800105a <unpack_left_shift_u16>
 800aca8:	4603      	mov	r3, r0
 800acaa:	461a      	mov	r2, r3
 800acac:	8c3b      	ldrh	r3, [r7, #32]
 800acae:	4313      	orrs	r3, r2
 800acb0:	843b      	strh	r3, [r7, #32]

        if ((t5s1 & (1u << 11)) != 0u) {
 800acb2:	8c3b      	ldrh	r3, [r7, #32]
 800acb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d005      	beq.n	800acc8 <can1_ams_cell_temperatures_unpack+0x208>
            t5s1 |= 0xf000u;
 800acbc:	8c3b      	ldrh	r3, [r7, #32]
 800acbe:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800acc2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800acc6:	843b      	strh	r3, [r7, #32]
        }

        dst_p->t5s1 = (int16_t)t5s1;
 800acc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        break;
 800acd2:	f001 b912 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 1:
        t1s2 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	22f0      	movs	r2, #240	; 0xf0
 800acdc:	2104      	movs	r1, #4
 800acde:	4618      	mov	r0, r3
 800ace0:	f7f6 f9eb 	bl	80010ba <unpack_right_shift_u16>
 800ace4:	4603      	mov	r3, r0
 800ace6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        t1s2 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	3301      	adds	r3, #1
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	22ff      	movs	r2, #255	; 0xff
 800acf2:	2104      	movs	r1, #4
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7f6 f9b0 	bl	800105a <unpack_left_shift_u16>
 800acfa:	4603      	mov	r3, r0
 800acfc:	461a      	mov	r2, r3
 800acfe:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ad02:	4313      	orrs	r3, r2
 800ad04:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        if ((t1s2 & (1u << 11)) != 0u) {
 800ad08:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ad0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d007      	beq.n	800ad24 <can1_ams_cell_temperatures_unpack+0x264>
            t1s2 |= 0xf000u;
 800ad14:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ad18:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ad1c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ad20:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        }

        dst_p->t1s2 = (int16_t)t1s2;
 800ad24:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	809a      	strh	r2, [r3, #4]
        t2s2 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	3302      	adds	r3, #2
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	22ff      	movs	r2, #255	; 0xff
 800ad34:	2100      	movs	r1, #0
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7f6 f9bf 	bl	80010ba <unpack_right_shift_u16>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        t2s2 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	3303      	adds	r3, #3
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	220f      	movs	r2, #15
 800ad4a:	2108      	movs	r1, #8
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7f6 f984 	bl	800105a <unpack_left_shift_u16>
 800ad52:	4603      	mov	r3, r0
 800ad54:	461a      	mov	r2, r3
 800ad56:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        if ((t2s2 & (1u << 11)) != 0u) {
 800ad60:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ad64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d007      	beq.n	800ad7c <can1_ams_cell_temperatures_unpack+0x2bc>
            t2s2 |= 0xf000u;
 800ad6c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ad70:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ad74:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ad78:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        }

        dst_p->t2s2 = (int16_t)t2s2;
 800ad7c:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	839a      	strh	r2, [r3, #28]
        t3s2 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	3303      	adds	r3, #3
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	22f0      	movs	r2, #240	; 0xf0
 800ad8c:	2104      	movs	r1, #4
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7f6 f993 	bl	80010ba <unpack_right_shift_u16>
 800ad94:	4603      	mov	r3, r0
 800ad96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        t3s2 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	3304      	adds	r3, #4
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	22ff      	movs	r2, #255	; 0xff
 800ada2:	2104      	movs	r1, #4
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7f6 f958 	bl	800105a <unpack_left_shift_u16>
 800adaa:	4603      	mov	r3, r0
 800adac:	461a      	mov	r2, r3
 800adae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800adb2:	4313      	orrs	r3, r2
 800adb4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        if ((t3s2 & (1u << 11)) != 0u) {
 800adb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800adbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d007      	beq.n	800add4 <can1_ams_cell_temperatures_unpack+0x314>
            t3s2 |= 0xf000u;
 800adc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800adc8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800adcc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800add0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }

        dst_p->t3s2 = (int16_t)t3s2;
 800add4:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	869a      	strh	r2, [r3, #52]	; 0x34
        t4s2 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	3305      	adds	r3, #5
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	22ff      	movs	r2, #255	; 0xff
 800ade4:	2100      	movs	r1, #0
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7f6 f967 	bl	80010ba <unpack_right_shift_u16>
 800adec:	4603      	mov	r3, r0
 800adee:	86fb      	strh	r3, [r7, #54]	; 0x36
        t4s2 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	3306      	adds	r3, #6
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	220f      	movs	r2, #15
 800adf8:	2108      	movs	r1, #8
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7f6 f92d 	bl	800105a <unpack_left_shift_u16>
 800ae00:	4603      	mov	r3, r0
 800ae02:	461a      	mov	r2, r3
 800ae04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae06:	4313      	orrs	r3, r2
 800ae08:	86fb      	strh	r3, [r7, #54]	; 0x36

        if ((t4s2 & (1u << 11)) != 0u) {
 800ae0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d005      	beq.n	800ae20 <can1_ams_cell_temperatures_unpack+0x360>
            t4s2 |= 0xf000u;
 800ae14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae16:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ae1a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ae1e:	86fb      	strh	r3, [r7, #54]	; 0x36
        }

        dst_p->t4s2 = (int16_t)t4s2;
 800ae20:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        t5s2 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	3306      	adds	r3, #6
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	22f0      	movs	r2, #240	; 0xf0
 800ae32:	2104      	movs	r1, #4
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7f6 f940 	bl	80010ba <unpack_right_shift_u16>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	83fb      	strh	r3, [r7, #30]
        t5s2 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	3307      	adds	r3, #7
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	22ff      	movs	r2, #255	; 0xff
 800ae46:	2104      	movs	r1, #4
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7f6 f906 	bl	800105a <unpack_left_shift_u16>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	461a      	mov	r2, r3
 800ae52:	8bfb      	ldrh	r3, [r7, #30]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	83fb      	strh	r3, [r7, #30]

        if ((t5s2 & (1u << 11)) != 0u) {
 800ae58:	8bfb      	ldrh	r3, [r7, #30]
 800ae5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d005      	beq.n	800ae6e <can1_ams_cell_temperatures_unpack+0x3ae>
            t5s2 |= 0xf000u;
 800ae62:	8bfb      	ldrh	r3, [r7, #30]
 800ae64:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ae68:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ae6c:	83fb      	strh	r3, [r7, #30]
        }

        dst_p->t5s2 = (int16_t)t5s2;
 800ae6e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
        break;
 800ae78:	f001 b83f 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 2:
        t1s3 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	22f0      	movs	r2, #240	; 0xf0
 800ae82:	2104      	movs	r1, #4
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7f6 f918 	bl	80010ba <unpack_right_shift_u16>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        t1s3 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	3301      	adds	r3, #1
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	22ff      	movs	r2, #255	; 0xff
 800ae98:	2104      	movs	r1, #4
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7f6 f8dd 	bl	800105a <unpack_left_shift_u16>
 800aea0:	4603      	mov	r3, r0
 800aea2:	461a      	mov	r2, r3
 800aea4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

        if ((t1s3 & (1u << 11)) != 0u) {
 800aeae:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800aeb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d007      	beq.n	800aeca <can1_ams_cell_temperatures_unpack+0x40a>
            t1s3 |= 0xf000u;
 800aeba:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800aebe:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800aec2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800aec6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        }

        dst_p->t1s3 = (int16_t)t1s3;
 800aeca:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	; 0x7c
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	80da      	strh	r2, [r3, #6]
        t2s3 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	3302      	adds	r3, #2
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	22ff      	movs	r2, #255	; 0xff
 800aeda:	2100      	movs	r1, #0
 800aedc:	4618      	mov	r0, r3
 800aede:	f7f6 f8ec 	bl	80010ba <unpack_right_shift_u16>
 800aee2:	4603      	mov	r3, r0
 800aee4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        t2s3 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	3303      	adds	r3, #3
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	220f      	movs	r2, #15
 800aef0:	2108      	movs	r1, #8
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7f6 f8b1 	bl	800105a <unpack_left_shift_u16>
 800aef8:	4603      	mov	r3, r0
 800aefa:	461a      	mov	r2, r3
 800aefc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800af00:	4313      	orrs	r3, r2
 800af02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

        if ((t2s3 & (1u << 11)) != 0u) {
 800af06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800af0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d007      	beq.n	800af22 <can1_ams_cell_temperatures_unpack+0x462>
            t2s3 |= 0xf000u;
 800af12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800af16:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800af1a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800af1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        }

        dst_p->t2s3 = (int16_t)t2s3;
 800af22:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	83da      	strh	r2, [r3, #30]
        t3s3 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	3303      	adds	r3, #3
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	22f0      	movs	r2, #240	; 0xf0
 800af32:	2104      	movs	r1, #4
 800af34:	4618      	mov	r0, r3
 800af36:	f7f6 f8c0 	bl	80010ba <unpack_right_shift_u16>
 800af3a:	4603      	mov	r3, r0
 800af3c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        t3s3 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	3304      	adds	r3, #4
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	22ff      	movs	r2, #255	; 0xff
 800af48:	2104      	movs	r1, #4
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7f6 f885 	bl	800105a <unpack_left_shift_u16>
 800af50:	4603      	mov	r3, r0
 800af52:	461a      	mov	r2, r3
 800af54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af58:	4313      	orrs	r3, r2
 800af5a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        if ((t3s3 & (1u << 11)) != 0u) {
 800af5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af66:	2b00      	cmp	r3, #0
 800af68:	d007      	beq.n	800af7a <can1_ams_cell_temperatures_unpack+0x4ba>
            t3s3 |= 0xf000u;
 800af6a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af6e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800af72:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800af76:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        }

        dst_p->t3s3 = (int16_t)t3s3;
 800af7a:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	86da      	strh	r2, [r3, #54]	; 0x36
        t4s3 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	3305      	adds	r3, #5
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	22ff      	movs	r2, #255	; 0xff
 800af8a:	2100      	movs	r1, #0
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7f6 f894 	bl	80010ba <unpack_right_shift_u16>
 800af92:	4603      	mov	r3, r0
 800af94:	86bb      	strh	r3, [r7, #52]	; 0x34
        t4s3 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	3306      	adds	r3, #6
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	220f      	movs	r2, #15
 800af9e:	2108      	movs	r1, #8
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7f6 f85a 	bl	800105a <unpack_left_shift_u16>
 800afa6:	4603      	mov	r3, r0
 800afa8:	461a      	mov	r2, r3
 800afaa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800afac:	4313      	orrs	r3, r2
 800afae:	86bb      	strh	r3, [r7, #52]	; 0x34

        if ((t4s3 & (1u << 11)) != 0u) {
 800afb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800afb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d005      	beq.n	800afc6 <can1_ams_cell_temperatures_unpack+0x506>
            t4s3 |= 0xf000u;
 800afba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800afbc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800afc0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800afc4:	86bb      	strh	r3, [r7, #52]	; 0x34
        }

        dst_p->t4s3 = (int16_t)t4s3;
 800afc6:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
        t5s3 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	3306      	adds	r3, #6
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	22f0      	movs	r2, #240	; 0xf0
 800afd8:	2104      	movs	r1, #4
 800afda:	4618      	mov	r0, r3
 800afdc:	f7f6 f86d 	bl	80010ba <unpack_right_shift_u16>
 800afe0:	4603      	mov	r3, r0
 800afe2:	83bb      	strh	r3, [r7, #28]
        t5s3 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	3307      	adds	r3, #7
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	22ff      	movs	r2, #255	; 0xff
 800afec:	2104      	movs	r1, #4
 800afee:	4618      	mov	r0, r3
 800aff0:	f7f6 f833 	bl	800105a <unpack_left_shift_u16>
 800aff4:	4603      	mov	r3, r0
 800aff6:	461a      	mov	r2, r3
 800aff8:	8bbb      	ldrh	r3, [r7, #28]
 800affa:	4313      	orrs	r3, r2
 800affc:	83bb      	strh	r3, [r7, #28]

        if ((t5s3 & (1u << 11)) != 0u) {
 800affe:	8bbb      	ldrh	r3, [r7, #28]
 800b000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b004:	2b00      	cmp	r3, #0
 800b006:	d005      	beq.n	800b014 <can1_ams_cell_temperatures_unpack+0x554>
            t5s3 |= 0xf000u;
 800b008:	8bbb      	ldrh	r3, [r7, #28]
 800b00a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b00e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b012:	83bb      	strh	r3, [r7, #28]
        }

        dst_p->t5s3 = (int16_t)t5s3;
 800b014:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        break;
 800b01e:	f000 bf6c 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 3:
        t1s4 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	22f0      	movs	r2, #240	; 0xf0
 800b028:	2104      	movs	r1, #4
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7f6 f845 	bl	80010ba <unpack_right_shift_u16>
 800b030:	4603      	mov	r3, r0
 800b032:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        t1s4 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	3301      	adds	r3, #1
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	22ff      	movs	r2, #255	; 0xff
 800b03e:	2104      	movs	r1, #4
 800b040:	4618      	mov	r0, r3
 800b042:	f7f6 f80a 	bl	800105a <unpack_left_shift_u16>
 800b046:	4603      	mov	r3, r0
 800b048:	461a      	mov	r2, r3
 800b04a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b04e:	4313      	orrs	r3, r2
 800b050:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

        if ((t1s4 & (1u << 11)) != 0u) {
 800b054:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d007      	beq.n	800b070 <can1_ams_cell_temperatures_unpack+0x5b0>
            t1s4 |= 0xf000u;
 800b060:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b064:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b068:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b06c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        }

        dst_p->t1s4 = (int16_t)t1s4;
 800b070:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	811a      	strh	r2, [r3, #8]
        t2s4 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	3302      	adds	r3, #2
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	22ff      	movs	r2, #255	; 0xff
 800b080:	2100      	movs	r1, #0
 800b082:	4618      	mov	r0, r3
 800b084:	f7f6 f819 	bl	80010ba <unpack_right_shift_u16>
 800b088:	4603      	mov	r3, r0
 800b08a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        t2s4 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	3303      	adds	r3, #3
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	220f      	movs	r2, #15
 800b096:	2108      	movs	r1, #8
 800b098:	4618      	mov	r0, r3
 800b09a:	f7f5 ffde 	bl	800105a <unpack_left_shift_u16>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        if ((t2s4 & (1u << 11)) != 0u) {
 800b0ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b0b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d007      	beq.n	800b0c8 <can1_ams_cell_temperatures_unpack+0x608>
            t2s4 |= 0xf000u;
 800b0b8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b0bc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b0c0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b0c4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        }

        dst_p->t2s4 = (int16_t)t2s4;
 800b0c8:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	841a      	strh	r2, [r3, #32]
        t3s4 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	3303      	adds	r3, #3
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	22f0      	movs	r2, #240	; 0xf0
 800b0d8:	2104      	movs	r1, #4
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7f5 ffed 	bl	80010ba <unpack_right_shift_u16>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        t3s4 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	3304      	adds	r3, #4
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	22ff      	movs	r2, #255	; 0xff
 800b0ee:	2104      	movs	r1, #4
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7f5 ffb2 	bl	800105a <unpack_left_shift_u16>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b0fe:	4313      	orrs	r3, r2
 800b100:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((t3s4 & (1u << 11)) != 0u) {
 800b104:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d007      	beq.n	800b120 <can1_ams_cell_temperatures_unpack+0x660>
            t3s4 |= 0xf000u;
 800b110:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b114:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b118:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b11c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        }

        dst_p->t3s4 = (int16_t)t3s4;
 800b120:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	871a      	strh	r2, [r3, #56]	; 0x38
        t4s4 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	3305      	adds	r3, #5
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	22ff      	movs	r2, #255	; 0xff
 800b130:	2100      	movs	r1, #0
 800b132:	4618      	mov	r0, r3
 800b134:	f7f5 ffc1 	bl	80010ba <unpack_right_shift_u16>
 800b138:	4603      	mov	r3, r0
 800b13a:	867b      	strh	r3, [r7, #50]	; 0x32
        t4s4 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	3306      	adds	r3, #6
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	220f      	movs	r2, #15
 800b144:	2108      	movs	r1, #8
 800b146:	4618      	mov	r0, r3
 800b148:	f7f5 ff87 	bl	800105a <unpack_left_shift_u16>
 800b14c:	4603      	mov	r3, r0
 800b14e:	461a      	mov	r2, r3
 800b150:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b152:	4313      	orrs	r3, r2
 800b154:	867b      	strh	r3, [r7, #50]	; 0x32

        if ((t4s4 & (1u << 11)) != 0u) {
 800b156:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d005      	beq.n	800b16c <can1_ams_cell_temperatures_unpack+0x6ac>
            t4s4 |= 0xf000u;
 800b160:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b162:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b166:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b16a:	867b      	strh	r3, [r7, #50]	; 0x32
        }

        dst_p->t4s4 = (int16_t)t4s4;
 800b16c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        t5s4 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	3306      	adds	r3, #6
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	22f0      	movs	r2, #240	; 0xf0
 800b17e:	2104      	movs	r1, #4
 800b180:	4618      	mov	r0, r3
 800b182:	f7f5 ff9a 	bl	80010ba <unpack_right_shift_u16>
 800b186:	4603      	mov	r3, r0
 800b188:	837b      	strh	r3, [r7, #26]
        t5s4 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	3307      	adds	r3, #7
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	22ff      	movs	r2, #255	; 0xff
 800b192:	2104      	movs	r1, #4
 800b194:	4618      	mov	r0, r3
 800b196:	f7f5 ff60 	bl	800105a <unpack_left_shift_u16>
 800b19a:	4603      	mov	r3, r0
 800b19c:	461a      	mov	r2, r3
 800b19e:	8b7b      	ldrh	r3, [r7, #26]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	837b      	strh	r3, [r7, #26]

        if ((t5s4 & (1u << 11)) != 0u) {
 800b1a4:	8b7b      	ldrh	r3, [r7, #26]
 800b1a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d005      	beq.n	800b1ba <can1_ams_cell_temperatures_unpack+0x6fa>
            t5s4 |= 0xf000u;
 800b1ae:	8b7b      	ldrh	r3, [r7, #26]
 800b1b0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b1b4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b1b8:	837b      	strh	r3, [r7, #26]
        }

        dst_p->t5s4 = (int16_t)t5s4;
 800b1ba:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        break;
 800b1c4:	f000 be99 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 4:
        t1s5 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	22f0      	movs	r2, #240	; 0xf0
 800b1ce:	2104      	movs	r1, #4
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7f5 ff72 	bl	80010ba <unpack_right_shift_u16>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        t1s5 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	22ff      	movs	r2, #255	; 0xff
 800b1e4:	2104      	movs	r1, #4
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7f5 ff37 	bl	800105a <unpack_left_shift_u16>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

        if ((t1s5 & (1u << 11)) != 0u) {
 800b1fa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800b1fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b202:	2b00      	cmp	r3, #0
 800b204:	d007      	beq.n	800b216 <can1_ams_cell_temperatures_unpack+0x756>
            t1s5 |= 0xf000u;
 800b206:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800b20a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b20e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b212:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        }

        dst_p->t1s5 = (int16_t)t1s5;
 800b216:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	815a      	strh	r2, [r3, #10]
        t2s5 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	3302      	adds	r3, #2
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	22ff      	movs	r2, #255	; 0xff
 800b226:	2100      	movs	r1, #0
 800b228:	4618      	mov	r0, r3
 800b22a:	f7f5 ff46 	bl	80010ba <unpack_right_shift_u16>
 800b22e:	4603      	mov	r3, r0
 800b230:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        t2s5 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	3303      	adds	r3, #3
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	220f      	movs	r2, #15
 800b23c:	2108      	movs	r1, #8
 800b23e:	4618      	mov	r0, r3
 800b240:	f7f5 ff0b 	bl	800105a <unpack_left_shift_u16>
 800b244:	4603      	mov	r3, r0
 800b246:	461a      	mov	r2, r3
 800b248:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800b24c:	4313      	orrs	r3, r2
 800b24e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

        if ((t2s5 & (1u << 11)) != 0u) {
 800b252:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800b256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d007      	beq.n	800b26e <can1_ams_cell_temperatures_unpack+0x7ae>
            t2s5 |= 0xf000u;
 800b25e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800b262:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b266:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b26a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        }

        dst_p->t2s5 = (int16_t)t2s5;
 800b26e:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	845a      	strh	r2, [r3, #34]	; 0x22
        t3s5 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	3303      	adds	r3, #3
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	22f0      	movs	r2, #240	; 0xf0
 800b27e:	2104      	movs	r1, #4
 800b280:	4618      	mov	r0, r3
 800b282:	f7f5 ff1a 	bl	80010ba <unpack_right_shift_u16>
 800b286:	4603      	mov	r3, r0
 800b288:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        t3s5 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	3304      	adds	r3, #4
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	22ff      	movs	r2, #255	; 0xff
 800b294:	2104      	movs	r1, #4
 800b296:	4618      	mov	r0, r3
 800b298:	f7f5 fedf 	bl	800105a <unpack_left_shift_u16>
 800b29c:	4603      	mov	r3, r0
 800b29e:	461a      	mov	r2, r3
 800b2a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

        if ((t3s5 & (1u << 11)) != 0u) {
 800b2aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b2ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d007      	beq.n	800b2c6 <can1_ams_cell_temperatures_unpack+0x806>
            t3s5 |= 0xf000u;
 800b2b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b2ba:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b2be:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b2c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        }

        dst_p->t3s5 = (int16_t)t3s5;
 800b2c6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	875a      	strh	r2, [r3, #58]	; 0x3a
        t4s5 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	3305      	adds	r3, #5
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	22ff      	movs	r2, #255	; 0xff
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7f5 feee 	bl	80010ba <unpack_right_shift_u16>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	863b      	strh	r3, [r7, #48]	; 0x30
        t4s5 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	3306      	adds	r3, #6
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	220f      	movs	r2, #15
 800b2ea:	2108      	movs	r1, #8
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7f5 feb4 	bl	800105a <unpack_left_shift_u16>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	863b      	strh	r3, [r7, #48]	; 0x30

        if ((t4s5 & (1u << 11)) != 0u) {
 800b2fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b2fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b302:	2b00      	cmp	r3, #0
 800b304:	d005      	beq.n	800b312 <can1_ams_cell_temperatures_unpack+0x852>
            t4s5 |= 0xf000u;
 800b306:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b308:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b30c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b310:	863b      	strh	r3, [r7, #48]	; 0x30
        }

        dst_p->t4s5 = (int16_t)t4s5;
 800b312:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        t5s5 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	3306      	adds	r3, #6
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	22f0      	movs	r2, #240	; 0xf0
 800b324:	2104      	movs	r1, #4
 800b326:	4618      	mov	r0, r3
 800b328:	f7f5 fec7 	bl	80010ba <unpack_right_shift_u16>
 800b32c:	4603      	mov	r3, r0
 800b32e:	833b      	strh	r3, [r7, #24]
        t5s5 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	3307      	adds	r3, #7
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	22ff      	movs	r2, #255	; 0xff
 800b338:	2104      	movs	r1, #4
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7f5 fe8d 	bl	800105a <unpack_left_shift_u16>
 800b340:	4603      	mov	r3, r0
 800b342:	461a      	mov	r2, r3
 800b344:	8b3b      	ldrh	r3, [r7, #24]
 800b346:	4313      	orrs	r3, r2
 800b348:	833b      	strh	r3, [r7, #24]

        if ((t5s5 & (1u << 11)) != 0u) {
 800b34a:	8b3b      	ldrh	r3, [r7, #24]
 800b34c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b350:	2b00      	cmp	r3, #0
 800b352:	d005      	beq.n	800b360 <can1_ams_cell_temperatures_unpack+0x8a0>
            t5s5 |= 0xf000u;
 800b354:	8b3b      	ldrh	r3, [r7, #24]
 800b356:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b35a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b35e:	833b      	strh	r3, [r7, #24]
        }

        dst_p->t5s5 = (int16_t)t5s5;
 800b360:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        break;
 800b36a:	f000 bdc6 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 5:
        t1s6 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	22f0      	movs	r2, #240	; 0xf0
 800b374:	2104      	movs	r1, #4
 800b376:	4618      	mov	r0, r3
 800b378:	f7f5 fe9f 	bl	80010ba <unpack_right_shift_u16>
 800b37c:	4603      	mov	r3, r0
 800b37e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        t1s6 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	3301      	adds	r3, #1
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	22ff      	movs	r2, #255	; 0xff
 800b38a:	2104      	movs	r1, #4
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7f5 fe64 	bl	800105a <unpack_left_shift_u16>
 800b392:	4603      	mov	r3, r0
 800b394:	461a      	mov	r2, r3
 800b396:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b39a:	4313      	orrs	r3, r2
 800b39c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

        if ((t1s6 & (1u << 11)) != 0u) {
 800b3a0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b3a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d007      	beq.n	800b3bc <can1_ams_cell_temperatures_unpack+0x8fc>
            t1s6 |= 0xf000u;
 800b3ac:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b3b0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b3b4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b3b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        }

        dst_p->t1s6 = (int16_t)t1s6;
 800b3bc:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	819a      	strh	r2, [r3, #12]
        t2s6 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	3302      	adds	r3, #2
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	22ff      	movs	r2, #255	; 0xff
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7f5 fe73 	bl	80010ba <unpack_right_shift_u16>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        t2s6 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	3303      	adds	r3, #3
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	220f      	movs	r2, #15
 800b3e2:	2108      	movs	r1, #8
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7f5 fe38 	bl	800105a <unpack_left_shift_u16>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if ((t2s6 & (1u << 11)) != 0u) {
 800b3f8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b3fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b400:	2b00      	cmp	r3, #0
 800b402:	d007      	beq.n	800b414 <can1_ams_cell_temperatures_unpack+0x954>
            t2s6 |= 0xf000u;
 800b404:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b408:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b40c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b410:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        }

        dst_p->t2s6 = (int16_t)t2s6;
 800b414:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	849a      	strh	r2, [r3, #36]	; 0x24
        t3s6 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	3303      	adds	r3, #3
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	22f0      	movs	r2, #240	; 0xf0
 800b424:	2104      	movs	r1, #4
 800b426:	4618      	mov	r0, r3
 800b428:	f7f5 fe47 	bl	80010ba <unpack_right_shift_u16>
 800b42c:	4603      	mov	r3, r0
 800b42e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        t3s6 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	3304      	adds	r3, #4
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	22ff      	movs	r2, #255	; 0xff
 800b43a:	2104      	movs	r1, #4
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7f5 fe0c 	bl	800105a <unpack_left_shift_u16>
 800b442:	4603      	mov	r3, r0
 800b444:	461a      	mov	r2, r3
 800b446:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b44a:	4313      	orrs	r3, r2
 800b44c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

        if ((t3s6 & (1u << 11)) != 0u) {
 800b450:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d007      	beq.n	800b46c <can1_ams_cell_temperatures_unpack+0x9ac>
            t3s6 |= 0xf000u;
 800b45c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b460:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b464:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b468:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        }

        dst_p->t3s6 = (int16_t)t3s6;
 800b46c:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	879a      	strh	r2, [r3, #60]	; 0x3c
        t4s6 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	3305      	adds	r3, #5
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	22ff      	movs	r2, #255	; 0xff
 800b47c:	2100      	movs	r1, #0
 800b47e:	4618      	mov	r0, r3
 800b480:	f7f5 fe1b 	bl	80010ba <unpack_right_shift_u16>
 800b484:	4603      	mov	r3, r0
 800b486:	85fb      	strh	r3, [r7, #46]	; 0x2e
        t4s6 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	3306      	adds	r3, #6
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	220f      	movs	r2, #15
 800b490:	2108      	movs	r1, #8
 800b492:	4618      	mov	r0, r3
 800b494:	f7f5 fde1 	bl	800105a <unpack_left_shift_u16>
 800b498:	4603      	mov	r3, r0
 800b49a:	461a      	mov	r2, r3
 800b49c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if ((t4s6 & (1u << 11)) != 0u) {
 800b4a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d005      	beq.n	800b4b8 <can1_ams_cell_temperatures_unpack+0x9f8>
            t4s6 |= 0xf000u;
 800b4ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4ae:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b4b2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b4b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }

        dst_p->t4s6 = (int16_t)t4s6;
 800b4b8:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        t5s6 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	3306      	adds	r3, #6
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	22f0      	movs	r2, #240	; 0xf0
 800b4ca:	2104      	movs	r1, #4
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7f5 fdf4 	bl	80010ba <unpack_right_shift_u16>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	82fb      	strh	r3, [r7, #22]
        t5s6 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	3307      	adds	r3, #7
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	22ff      	movs	r2, #255	; 0xff
 800b4de:	2104      	movs	r1, #4
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7f5 fdba 	bl	800105a <unpack_left_shift_u16>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	8afb      	ldrh	r3, [r7, #22]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	82fb      	strh	r3, [r7, #22]

        if ((t5s6 & (1u << 11)) != 0u) {
 800b4f0:	8afb      	ldrh	r3, [r7, #22]
 800b4f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d005      	beq.n	800b506 <can1_ams_cell_temperatures_unpack+0xa46>
            t5s6 |= 0xf000u;
 800b4fa:	8afb      	ldrh	r3, [r7, #22]
 800b4fc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b500:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b504:	82fb      	strh	r3, [r7, #22]
        }

        dst_p->t5s6 = (int16_t)t5s6;
 800b506:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
        break;
 800b510:	f000 bcf3 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 6:
        t1s7 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	22f0      	movs	r2, #240	; 0xf0
 800b51a:	2104      	movs	r1, #4
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7f5 fdcc 	bl	80010ba <unpack_right_shift_u16>
 800b522:	4603      	mov	r3, r0
 800b524:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        t1s7 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	3301      	adds	r3, #1
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	22ff      	movs	r2, #255	; 0xff
 800b530:	2104      	movs	r1, #4
 800b532:	4618      	mov	r0, r3
 800b534:	f7f5 fd91 	bl	800105a <unpack_left_shift_u16>
 800b538:	4603      	mov	r3, r0
 800b53a:	461a      	mov	r2, r3
 800b53c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800b540:	4313      	orrs	r3, r2
 800b542:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

        if ((t1s7 & (1u << 11)) != 0u) {
 800b546:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800b54a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d007      	beq.n	800b562 <can1_ams_cell_temperatures_unpack+0xaa2>
            t1s7 |= 0xf000u;
 800b552:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800b556:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b55a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b55e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        }

        dst_p->t1s7 = (int16_t)t1s7;
 800b562:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	81da      	strh	r2, [r3, #14]
        t2s7 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	3302      	adds	r3, #2
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	22ff      	movs	r2, #255	; 0xff
 800b572:	2100      	movs	r1, #0
 800b574:	4618      	mov	r0, r3
 800b576:	f7f5 fda0 	bl	80010ba <unpack_right_shift_u16>
 800b57a:	4603      	mov	r3, r0
 800b57c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        t2s7 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	3303      	adds	r3, #3
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	220f      	movs	r2, #15
 800b588:	2108      	movs	r1, #8
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7f5 fd65 	bl	800105a <unpack_left_shift_u16>
 800b590:	4603      	mov	r3, r0
 800b592:	461a      	mov	r2, r3
 800b594:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800b598:	4313      	orrs	r3, r2
 800b59a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

        if ((t2s7 & (1u << 11)) != 0u) {
 800b59e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800b5a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d007      	beq.n	800b5ba <can1_ams_cell_temperatures_unpack+0xafa>
            t2s7 |= 0xf000u;
 800b5aa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800b5ae:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b5b2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b5b6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        dst_p->t2s7 = (int16_t)t2s7;
 800b5ba:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	84da      	strh	r2, [r3, #38]	; 0x26
        t3s7 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	3303      	adds	r3, #3
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	22f0      	movs	r2, #240	; 0xf0
 800b5ca:	2104      	movs	r1, #4
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7f5 fd74 	bl	80010ba <unpack_right_shift_u16>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        t3s7 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	3304      	adds	r3, #4
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	22ff      	movs	r2, #255	; 0xff
 800b5e0:	2104      	movs	r1, #4
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7f5 fd39 	bl	800105a <unpack_left_shift_u16>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

        if ((t3s7 & (1u << 11)) != 0u) {
 800b5f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b5fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d007      	beq.n	800b612 <can1_ams_cell_temperatures_unpack+0xb52>
            t3s7 |= 0xf000u;
 800b602:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b606:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b60a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b60e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        }

        dst_p->t3s7 = (int16_t)t3s7;
 800b612:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	87da      	strh	r2, [r3, #62]	; 0x3e
        t4s7 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	3305      	adds	r3, #5
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	22ff      	movs	r2, #255	; 0xff
 800b622:	2100      	movs	r1, #0
 800b624:	4618      	mov	r0, r3
 800b626:	f7f5 fd48 	bl	80010ba <unpack_right_shift_u16>
 800b62a:	4603      	mov	r3, r0
 800b62c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        t4s7 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	3306      	adds	r3, #6
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	220f      	movs	r2, #15
 800b636:	2108      	movs	r1, #8
 800b638:	4618      	mov	r0, r3
 800b63a:	f7f5 fd0e 	bl	800105a <unpack_left_shift_u16>
 800b63e:	4603      	mov	r3, r0
 800b640:	461a      	mov	r2, r3
 800b642:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b644:	4313      	orrs	r3, r2
 800b646:	85bb      	strh	r3, [r7, #44]	; 0x2c

        if ((t4s7 & (1u << 11)) != 0u) {
 800b648:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b64a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d005      	beq.n	800b65e <can1_ams_cell_temperatures_unpack+0xb9e>
            t4s7 |= 0xf000u;
 800b652:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b654:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b658:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b65c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }

        dst_p->t4s7 = (int16_t)t4s7;
 800b65e:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        t5s7 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	3306      	adds	r3, #6
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	22f0      	movs	r2, #240	; 0xf0
 800b670:	2104      	movs	r1, #4
 800b672:	4618      	mov	r0, r3
 800b674:	f7f5 fd21 	bl	80010ba <unpack_right_shift_u16>
 800b678:	4603      	mov	r3, r0
 800b67a:	82bb      	strh	r3, [r7, #20]
        t5s7 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	3307      	adds	r3, #7
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	22ff      	movs	r2, #255	; 0xff
 800b684:	2104      	movs	r1, #4
 800b686:	4618      	mov	r0, r3
 800b688:	f7f5 fce7 	bl	800105a <unpack_left_shift_u16>
 800b68c:	4603      	mov	r3, r0
 800b68e:	461a      	mov	r2, r3
 800b690:	8abb      	ldrh	r3, [r7, #20]
 800b692:	4313      	orrs	r3, r2
 800b694:	82bb      	strh	r3, [r7, #20]

        if ((t5s7 & (1u << 11)) != 0u) {
 800b696:	8abb      	ldrh	r3, [r7, #20]
 800b698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d005      	beq.n	800b6ac <can1_ams_cell_temperatures_unpack+0xbec>
            t5s7 |= 0xf000u;
 800b6a0:	8abb      	ldrh	r3, [r7, #20]
 800b6a2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b6a6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b6aa:	82bb      	strh	r3, [r7, #20]
        }

        dst_p->t5s7 = (int16_t)t5s7;
 800b6ac:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
        break;
 800b6b6:	f000 bc20 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 7:
        t1s8 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	22f0      	movs	r2, #240	; 0xf0
 800b6c0:	2104      	movs	r1, #4
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7f5 fcf9 	bl	80010ba <unpack_right_shift_u16>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        t1s8 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	22ff      	movs	r2, #255	; 0xff
 800b6d6:	2104      	movs	r1, #4
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7f5 fcbe 	bl	800105a <unpack_left_shift_u16>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

        if ((t1s8 & (1u << 11)) != 0u) {
 800b6ec:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800b6f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d007      	beq.n	800b708 <can1_ams_cell_temperatures_unpack+0xc48>
            t1s8 |= 0xf000u;
 800b6f8:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800b6fc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b700:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b704:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        }

        dst_p->t1s8 = (int16_t)t1s8;
 800b708:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	; 0x72
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	821a      	strh	r2, [r3, #16]
        t2s8 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	3302      	adds	r3, #2
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	22ff      	movs	r2, #255	; 0xff
 800b718:	2100      	movs	r1, #0
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7f5 fccd 	bl	80010ba <unpack_right_shift_u16>
 800b720:	4603      	mov	r3, r0
 800b722:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        t2s8 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	3303      	adds	r3, #3
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	220f      	movs	r2, #15
 800b72e:	2108      	movs	r1, #8
 800b730:	4618      	mov	r0, r3
 800b732:	f7f5 fc92 	bl	800105a <unpack_left_shift_u16>
 800b736:	4603      	mov	r3, r0
 800b738:	461a      	mov	r2, r3
 800b73a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b73e:	4313      	orrs	r3, r2
 800b740:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if ((t2s8 & (1u << 11)) != 0u) {
 800b744:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d007      	beq.n	800b760 <can1_ams_cell_temperatures_unpack+0xca0>
            t2s8 |= 0xf000u;
 800b750:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b754:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b758:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b75c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        }

        dst_p->t2s8 = (int16_t)t2s8;
 800b760:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	851a      	strh	r2, [r3, #40]	; 0x28
        t3s8 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	3303      	adds	r3, #3
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	22f0      	movs	r2, #240	; 0xf0
 800b770:	2104      	movs	r1, #4
 800b772:	4618      	mov	r0, r3
 800b774:	f7f5 fca1 	bl	80010ba <unpack_right_shift_u16>
 800b778:	4603      	mov	r3, r0
 800b77a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        t3s8 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	3304      	adds	r3, #4
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	22ff      	movs	r2, #255	; 0xff
 800b786:	2104      	movs	r1, #4
 800b788:	4618      	mov	r0, r3
 800b78a:	f7f5 fc66 	bl	800105a <unpack_left_shift_u16>
 800b78e:	4603      	mov	r3, r0
 800b790:	461a      	mov	r2, r3
 800b792:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b796:	4313      	orrs	r3, r2
 800b798:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

        if ((t3s8 & (1u << 11)) != 0u) {
 800b79c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d007      	beq.n	800b7b8 <can1_ams_cell_temperatures_unpack+0xcf8>
            t3s8 |= 0xf000u;
 800b7a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7ac:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b7b0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b7b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        }

        dst_p->t3s8 = (int16_t)t3s8;
 800b7b8:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        t4s8 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	3305      	adds	r3, #5
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	22ff      	movs	r2, #255	; 0xff
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7f5 fc74 	bl	80010ba <unpack_right_shift_u16>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	857b      	strh	r3, [r7, #42]	; 0x2a
        t4s8 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	3306      	adds	r3, #6
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	220f      	movs	r2, #15
 800b7de:	2108      	movs	r1, #8
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7f5 fc3a 	bl	800105a <unpack_left_shift_u16>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((t4s8 & (1u << 11)) != 0u) {
 800b7f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b7f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d005      	beq.n	800b806 <can1_ams_cell_temperatures_unpack+0xd46>
            t4s8 |= 0xf000u;
 800b7fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b7fc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b800:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b804:	857b      	strh	r3, [r7, #42]	; 0x2a
        }

        dst_p->t4s8 = (int16_t)t4s8;
 800b806:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
        t5s8 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	3306      	adds	r3, #6
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	22f0      	movs	r2, #240	; 0xf0
 800b818:	2104      	movs	r1, #4
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7f5 fc4d 	bl	80010ba <unpack_right_shift_u16>
 800b820:	4603      	mov	r3, r0
 800b822:	827b      	strh	r3, [r7, #18]
        t5s8 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	3307      	adds	r3, #7
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	22ff      	movs	r2, #255	; 0xff
 800b82c:	2104      	movs	r1, #4
 800b82e:	4618      	mov	r0, r3
 800b830:	f7f5 fc13 	bl	800105a <unpack_left_shift_u16>
 800b834:	4603      	mov	r3, r0
 800b836:	461a      	mov	r2, r3
 800b838:	8a7b      	ldrh	r3, [r7, #18]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	827b      	strh	r3, [r7, #18]

        if ((t5s8 & (1u << 11)) != 0u) {
 800b83e:	8a7b      	ldrh	r3, [r7, #18]
 800b840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b844:	2b00      	cmp	r3, #0
 800b846:	d005      	beq.n	800b854 <can1_ams_cell_temperatures_unpack+0xd94>
            t5s8 |= 0xf000u;
 800b848:	8a7b      	ldrh	r3, [r7, #18]
 800b84a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b84e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b852:	827b      	strh	r3, [r7, #18]
        }

        dst_p->t5s8 = (int16_t)t5s8;
 800b854:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
        break;
 800b85e:	e34c      	b.n	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 8:
        t1s9 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	22f0      	movs	r2, #240	; 0xf0
 800b866:	2104      	movs	r1, #4
 800b868:	4618      	mov	r0, r3
 800b86a:	f7f5 fc26 	bl	80010ba <unpack_right_shift_u16>
 800b86e:	4603      	mov	r3, r0
 800b870:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        t1s9 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	3301      	adds	r3, #1
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	22ff      	movs	r2, #255	; 0xff
 800b87c:	2104      	movs	r1, #4
 800b87e:	4618      	mov	r0, r3
 800b880:	f7f5 fbeb 	bl	800105a <unpack_left_shift_u16>
 800b884:	4603      	mov	r3, r0
 800b886:	461a      	mov	r2, r3
 800b888:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800b88c:	4313      	orrs	r3, r2
 800b88e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

        if ((t1s9 & (1u << 11)) != 0u) {
 800b892:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800b896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d007      	beq.n	800b8ae <can1_ams_cell_temperatures_unpack+0xdee>
            t1s9 |= 0xf000u;
 800b89e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800b8a2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b8a6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b8aa:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        }

        dst_p->t1s9 = (int16_t)t1s9;
 800b8ae:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	825a      	strh	r2, [r3, #18]
        t2s9 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	3302      	adds	r3, #2
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	22ff      	movs	r2, #255	; 0xff
 800b8be:	2100      	movs	r1, #0
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7f5 fbfa 	bl	80010ba <unpack_right_shift_u16>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        t2s9 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	3303      	adds	r3, #3
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	220f      	movs	r2, #15
 800b8d4:	2108      	movs	r1, #8
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f5 fbbf 	bl	800105a <unpack_left_shift_u16>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	461a      	mov	r2, r3
 800b8e0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

        if ((t2s9 & (1u << 11)) != 0u) {
 800b8ea:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800b8ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d007      	beq.n	800b906 <can1_ams_cell_temperatures_unpack+0xe46>
            t2s9 |= 0xf000u;
 800b8f6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800b8fa:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b8fe:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b902:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        }

        dst_p->t2s9 = (int16_t)t2s9;
 800b906:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	855a      	strh	r2, [r3, #42]	; 0x2a
        t3s9 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	3303      	adds	r3, #3
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	22f0      	movs	r2, #240	; 0xf0
 800b916:	2104      	movs	r1, #4
 800b918:	4618      	mov	r0, r3
 800b91a:	f7f5 fbce 	bl	80010ba <unpack_right_shift_u16>
 800b91e:	4603      	mov	r3, r0
 800b920:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        t3s9 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	3304      	adds	r3, #4
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	22ff      	movs	r2, #255	; 0xff
 800b92c:	2104      	movs	r1, #4
 800b92e:	4618      	mov	r0, r3
 800b930:	f7f5 fb93 	bl	800105a <unpack_left_shift_u16>
 800b934:	4603      	mov	r3, r0
 800b936:	461a      	mov	r2, r3
 800b938:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b93c:	4313      	orrs	r3, r2
 800b93e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

        if ((t3s9 & (1u << 11)) != 0u) {
 800b942:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d007      	beq.n	800b95e <can1_ams_cell_temperatures_unpack+0xe9e>
            t3s9 |= 0xf000u;
 800b94e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b952:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b956:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b95a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        }

        dst_p->t3s9 = (int16_t)t3s9;
 800b95e:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        t4s9 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	3305      	adds	r3, #5
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	22ff      	movs	r2, #255	; 0xff
 800b970:	2100      	movs	r1, #0
 800b972:	4618      	mov	r0, r3
 800b974:	f7f5 fba1 	bl	80010ba <unpack_right_shift_u16>
 800b978:	4603      	mov	r3, r0
 800b97a:	853b      	strh	r3, [r7, #40]	; 0x28
        t4s9 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	3306      	adds	r3, #6
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	220f      	movs	r2, #15
 800b984:	2108      	movs	r1, #8
 800b986:	4618      	mov	r0, r3
 800b988:	f7f5 fb67 	bl	800105a <unpack_left_shift_u16>
 800b98c:	4603      	mov	r3, r0
 800b98e:	461a      	mov	r2, r3
 800b990:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b992:	4313      	orrs	r3, r2
 800b994:	853b      	strh	r3, [r7, #40]	; 0x28

        if ((t4s9 & (1u << 11)) != 0u) {
 800b996:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d005      	beq.n	800b9ac <can1_ams_cell_temperatures_unpack+0xeec>
            t4s9 |= 0xf000u;
 800b9a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b9a2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b9a6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b9aa:	853b      	strh	r3, [r7, #40]	; 0x28
        }

        dst_p->t4s9 = (int16_t)t4s9;
 800b9ac:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        t5s9 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	3306      	adds	r3, #6
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	22f0      	movs	r2, #240	; 0xf0
 800b9be:	2104      	movs	r1, #4
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7f5 fb7a 	bl	80010ba <unpack_right_shift_u16>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	823b      	strh	r3, [r7, #16]
        t5s9 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	3307      	adds	r3, #7
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	22ff      	movs	r2, #255	; 0xff
 800b9d2:	2104      	movs	r1, #4
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7f5 fb40 	bl	800105a <unpack_left_shift_u16>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	461a      	mov	r2, r3
 800b9de:	8a3b      	ldrh	r3, [r7, #16]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	823b      	strh	r3, [r7, #16]

        if ((t5s9 & (1u << 11)) != 0u) {
 800b9e4:	8a3b      	ldrh	r3, [r7, #16]
 800b9e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d005      	beq.n	800b9fa <can1_ams_cell_temperatures_unpack+0xf3a>
            t5s9 |= 0xf000u;
 800b9ee:	8a3b      	ldrh	r3, [r7, #16]
 800b9f0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b9f4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b9f8:	823b      	strh	r3, [r7, #16]
        }

        dst_p->t5s9 = (int16_t)t5s9;
 800b9fa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        break;
 800ba04:	e279      	b.n	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 9:
        t1s10 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	22f0      	movs	r2, #240	; 0xf0
 800ba0c:	2104      	movs	r1, #4
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7f5 fb53 	bl	80010ba <unpack_right_shift_u16>
 800ba14:	4603      	mov	r3, r0
 800ba16:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        t1s10 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	22ff      	movs	r2, #255	; 0xff
 800ba22:	2104      	movs	r1, #4
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7f5 fb18 	bl	800105a <unpack_left_shift_u16>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ba32:	4313      	orrs	r3, r2
 800ba34:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        if ((t1s10 & (1u << 11)) != 0u) {
 800ba38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ba3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d007      	beq.n	800ba54 <can1_ams_cell_temperatures_unpack+0xf94>
            t1s10 |= 0xf000u;
 800ba44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ba48:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ba4c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ba50:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        }

        dst_p->t1s10 = (int16_t)t1s10;
 800ba54:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	829a      	strh	r2, [r3, #20]
        t2s10 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	3302      	adds	r3, #2
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	22ff      	movs	r2, #255	; 0xff
 800ba64:	2100      	movs	r1, #0
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7f5 fb27 	bl	80010ba <unpack_right_shift_u16>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        t2s10 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	3303      	adds	r3, #3
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	220f      	movs	r2, #15
 800ba7a:	2108      	movs	r1, #8
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7f5 faec 	bl	800105a <unpack_left_shift_u16>
 800ba82:	4603      	mov	r3, r0
 800ba84:	461a      	mov	r2, r3
 800ba86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

        if ((t2s10 & (1u << 11)) != 0u) {
 800ba90:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ba94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d007      	beq.n	800baac <can1_ams_cell_temperatures_unpack+0xfec>
            t2s10 |= 0xf000u;
 800ba9c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800baa0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800baa4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800baa8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        }

        dst_p->t2s10 = (int16_t)t2s10;
 800baac:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	859a      	strh	r2, [r3, #44]	; 0x2c
        t3s10 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	3303      	adds	r3, #3
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	22f0      	movs	r2, #240	; 0xf0
 800babc:	2104      	movs	r1, #4
 800babe:	4618      	mov	r0, r3
 800bac0:	f7f5 fafb 	bl	80010ba <unpack_right_shift_u16>
 800bac4:	4603      	mov	r3, r0
 800bac6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        t3s10 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	3304      	adds	r3, #4
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	22ff      	movs	r2, #255	; 0xff
 800bad2:	2104      	movs	r1, #4
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7f5 fac0 	bl	800105a <unpack_left_shift_u16>
 800bada:	4603      	mov	r3, r0
 800badc:	461a      	mov	r2, r3
 800bade:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bae2:	4313      	orrs	r3, r2
 800bae4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

        if ((t3s10 & (1u << 11)) != 0u) {
 800bae8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800baec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d007      	beq.n	800bb04 <can1_ams_cell_temperatures_unpack+0x1044>
            t3s10 |= 0xf000u;
 800baf4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800baf8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bafc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bb00:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        }

        dst_p->t3s10 = (int16_t)t3s10;
 800bb04:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        t4s10 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	3305      	adds	r3, #5
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	22ff      	movs	r2, #255	; 0xff
 800bb16:	2100      	movs	r1, #0
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7f5 face 	bl	80010ba <unpack_right_shift_u16>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	87fb      	strh	r3, [r7, #62]	; 0x3e
        t4s10 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	3306      	adds	r3, #6
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	220f      	movs	r2, #15
 800bb2a:	2108      	movs	r1, #8
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7f5 fa94 	bl	800105a <unpack_left_shift_u16>
 800bb32:	4603      	mov	r3, r0
 800bb34:	461a      	mov	r2, r3
 800bb36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	87fb      	strh	r3, [r7, #62]	; 0x3e

        if ((t4s10 & (1u << 11)) != 0u) {
 800bb3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bb3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d005      	beq.n	800bb52 <can1_ams_cell_temperatures_unpack+0x1092>
            t4s10 |= 0xf000u;
 800bb46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bb48:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bb4c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bb50:	87fb      	strh	r3, [r7, #62]	; 0x3e
        }

        dst_p->t4s10 = (int16_t)t4s10;
 800bb52:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        t5s10 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	3306      	adds	r3, #6
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	22f0      	movs	r2, #240	; 0xf0
 800bb64:	2104      	movs	r1, #4
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7f5 faa7 	bl	80010ba <unpack_right_shift_u16>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	84fb      	strh	r3, [r7, #38]	; 0x26
        t5s10 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	3307      	adds	r3, #7
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	22ff      	movs	r2, #255	; 0xff
 800bb78:	2104      	movs	r1, #4
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7f5 fa6d 	bl	800105a <unpack_left_shift_u16>
 800bb80:	4603      	mov	r3, r0
 800bb82:	461a      	mov	r2, r3
 800bb84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb86:	4313      	orrs	r3, r2
 800bb88:	84fb      	strh	r3, [r7, #38]	; 0x26

        if ((t5s10 & (1u << 11)) != 0u) {
 800bb8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d005      	beq.n	800bba0 <can1_ams_cell_temperatures_unpack+0x10e0>
            t5s10 |= 0xf000u;
 800bb94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb96:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bb9a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bb9e:	84fb      	strh	r3, [r7, #38]	; 0x26
        }

        dst_p->t5s10 = (int16_t)t5s10;
 800bba0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        break;
 800bbaa:	e1a6      	b.n	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 10:
        t1s11 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	22f0      	movs	r2, #240	; 0xf0
 800bbb2:	2104      	movs	r1, #4
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7f5 fa80 	bl	80010ba <unpack_right_shift_u16>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        t1s11 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	22ff      	movs	r2, #255	; 0xff
 800bbc8:	2104      	movs	r1, #4
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7f5 fa45 	bl	800105a <unpack_left_shift_u16>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

        if ((t1s11 & (1u << 11)) != 0u) {
 800bbde:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800bbe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d007      	beq.n	800bbfa <can1_ams_cell_temperatures_unpack+0x113a>
            t1s11 |= 0xf000u;
 800bbea:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800bbee:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bbf2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bbf6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        }

        dst_p->t1s11 = (int16_t)t1s11;
 800bbfa:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	82da      	strh	r2, [r3, #22]
        t2s11 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	3302      	adds	r3, #2
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	22ff      	movs	r2, #255	; 0xff
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7f5 fa54 	bl	80010ba <unpack_right_shift_u16>
 800bc12:	4603      	mov	r3, r0
 800bc14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        t2s11 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	3303      	adds	r3, #3
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	220f      	movs	r2, #15
 800bc20:	2108      	movs	r1, #8
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7f5 fa19 	bl	800105a <unpack_left_shift_u16>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bc30:	4313      	orrs	r3, r2
 800bc32:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

        if ((t2s11 & (1u << 11)) != 0u) {
 800bc36:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bc3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d007      	beq.n	800bc52 <can1_ams_cell_temperatures_unpack+0x1192>
            t2s11 |= 0xf000u;
 800bc42:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bc46:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bc4a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bc4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        }

        dst_p->t2s11 = (int16_t)t2s11;
 800bc52:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	85da      	strh	r2, [r3, #46]	; 0x2e
        t3s11 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	3303      	adds	r3, #3
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	22f0      	movs	r2, #240	; 0xf0
 800bc62:	2104      	movs	r1, #4
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7f5 fa28 	bl	80010ba <unpack_right_shift_u16>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        t3s11 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	3304      	adds	r3, #4
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	22ff      	movs	r2, #255	; 0xff
 800bc78:	2104      	movs	r1, #4
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7f5 f9ed 	bl	800105a <unpack_left_shift_u16>
 800bc80:	4603      	mov	r3, r0
 800bc82:	461a      	mov	r2, r3
 800bc84:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

        if ((t3s11 & (1u << 11)) != 0u) {
 800bc8e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bc92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d007      	beq.n	800bcaa <can1_ams_cell_temperatures_unpack+0x11ea>
            t3s11 |= 0xf000u;
 800bc9a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bc9e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bca2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bca6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        }

        dst_p->t3s11 = (int16_t)t3s11;
 800bcaa:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        t4s11 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	3305      	adds	r3, #5
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	22ff      	movs	r2, #255	; 0xff
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7f5 f9fb 	bl	80010ba <unpack_right_shift_u16>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
        t4s11 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	3306      	adds	r3, #6
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	220f      	movs	r2, #15
 800bcd0:	2108      	movs	r1, #8
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7f5 f9c1 	bl	800105a <unpack_left_shift_u16>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	461a      	mov	r2, r3
 800bcdc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bcde:	4313      	orrs	r3, r2
 800bce0:	87bb      	strh	r3, [r7, #60]	; 0x3c

        if ((t4s11 & (1u << 11)) != 0u) {
 800bce2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d005      	beq.n	800bcf8 <can1_ams_cell_temperatures_unpack+0x1238>
            t4s11 |= 0xf000u;
 800bcec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bcee:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bcf2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bcf6:	87bb      	strh	r3, [r7, #60]	; 0x3c
        }

        dst_p->t4s11 = (int16_t)t4s11;
 800bcf8:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
        t5s11 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	3306      	adds	r3, #6
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	22f0      	movs	r2, #240	; 0xf0
 800bd0a:	2104      	movs	r1, #4
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7f5 f9d4 	bl	80010ba <unpack_right_shift_u16>
 800bd12:	4603      	mov	r3, r0
 800bd14:	84bb      	strh	r3, [r7, #36]	; 0x24
        t5s11 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	3307      	adds	r3, #7
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	22ff      	movs	r2, #255	; 0xff
 800bd1e:	2104      	movs	r1, #4
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7f5 f99a 	bl	800105a <unpack_left_shift_u16>
 800bd26:	4603      	mov	r3, r0
 800bd28:	461a      	mov	r2, r3
 800bd2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	84bb      	strh	r3, [r7, #36]	; 0x24

        if ((t5s11 & (1u << 11)) != 0u) {
 800bd30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d005      	beq.n	800bd46 <can1_ams_cell_temperatures_unpack+0x1286>
            t5s11 |= 0xf000u;
 800bd3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd3c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bd40:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bd44:	84bb      	strh	r3, [r7, #36]	; 0x24
        }

        dst_p->t5s11 = (int16_t)t5s11;
 800bd46:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        break;
 800bd50:	e0d3      	b.n	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 11:
        t1s12 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	22f0      	movs	r2, #240	; 0xf0
 800bd58:	2104      	movs	r1, #4
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7f5 f9ad 	bl	80010ba <unpack_right_shift_u16>
 800bd60:	4603      	mov	r3, r0
 800bd62:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        t1s12 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	22ff      	movs	r2, #255	; 0xff
 800bd6e:	2104      	movs	r1, #4
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7f5 f972 	bl	800105a <unpack_left_shift_u16>
 800bd76:	4603      	mov	r3, r0
 800bd78:	461a      	mov	r2, r3
 800bd7a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

        if ((t1s12 & (1u << 11)) != 0u) {
 800bd84:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800bd88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d007      	beq.n	800bda0 <can1_ams_cell_temperatures_unpack+0x12e0>
            t1s12 |= 0xf000u;
 800bd90:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800bd94:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bd98:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bd9c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        }

        dst_p->t1s12 = (int16_t)t1s12;
 800bda0:	f9b7 2082 	ldrsh.w	r2, [r7, #130]	; 0x82
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	831a      	strh	r2, [r3, #24]
        t2s12 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	3302      	adds	r3, #2
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	22ff      	movs	r2, #255	; 0xff
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7f5 f981 	bl	80010ba <unpack_right_shift_u16>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        t2s12 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	3303      	adds	r3, #3
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	220f      	movs	r2, #15
 800bdc6:	2108      	movs	r1, #8
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7f5 f946 	bl	800105a <unpack_left_shift_u16>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

        if ((t2s12 & (1u << 11)) != 0u) {
 800bddc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800bde0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d007      	beq.n	800bdf8 <can1_ams_cell_temperatures_unpack+0x1338>
            t2s12 |= 0xf000u;
 800bde8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800bdec:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bdf0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bdf4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        }

        dst_p->t2s12 = (int16_t)t2s12;
 800bdf8:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	861a      	strh	r2, [r3, #48]	; 0x30
        t3s12 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	3303      	adds	r3, #3
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	22f0      	movs	r2, #240	; 0xf0
 800be08:	2104      	movs	r1, #4
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7f5 f955 	bl	80010ba <unpack_right_shift_u16>
 800be10:	4603      	mov	r3, r0
 800be12:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        t3s12 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	3304      	adds	r3, #4
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	22ff      	movs	r2, #255	; 0xff
 800be1e:	2104      	movs	r1, #4
 800be20:	4618      	mov	r0, r3
 800be22:	f7f5 f91a 	bl	800105a <unpack_left_shift_u16>
 800be26:	4603      	mov	r3, r0
 800be28:	461a      	mov	r2, r3
 800be2a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800be2e:	4313      	orrs	r3, r2
 800be30:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((t3s12 & (1u << 11)) != 0u) {
 800be34:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800be38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d007      	beq.n	800be50 <can1_ams_cell_temperatures_unpack+0x1390>
            t3s12 |= 0xf000u;
 800be40:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800be44:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800be48:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800be4c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        }

        dst_p->t3s12 = (int16_t)t3s12;
 800be50:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        t4s12 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	3305      	adds	r3, #5
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	22ff      	movs	r2, #255	; 0xff
 800be62:	2100      	movs	r1, #0
 800be64:	4618      	mov	r0, r3
 800be66:	f7f5 f928 	bl	80010ba <unpack_right_shift_u16>
 800be6a:	4603      	mov	r3, r0
 800be6c:	877b      	strh	r3, [r7, #58]	; 0x3a
        t4s12 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	3306      	adds	r3, #6
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	220f      	movs	r2, #15
 800be76:	2108      	movs	r1, #8
 800be78:	4618      	mov	r0, r3
 800be7a:	f7f5 f8ee 	bl	800105a <unpack_left_shift_u16>
 800be7e:	4603      	mov	r3, r0
 800be80:	461a      	mov	r2, r3
 800be82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800be84:	4313      	orrs	r3, r2
 800be86:	877b      	strh	r3, [r7, #58]	; 0x3a

        if ((t4s12 & (1u << 11)) != 0u) {
 800be88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800be8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d005      	beq.n	800be9e <can1_ams_cell_temperatures_unpack+0x13de>
            t4s12 |= 0xf000u;
 800be92:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800be94:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800be98:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800be9c:	877b      	strh	r3, [r7, #58]	; 0x3a
        }

        dst_p->t4s12 = (int16_t)t4s12;
 800be9e:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        t5s12 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	3306      	adds	r3, #6
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	22f0      	movs	r2, #240	; 0xf0
 800beb0:	2104      	movs	r1, #4
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7f5 f901 	bl	80010ba <unpack_right_shift_u16>
 800beb8:	4603      	mov	r3, r0
 800beba:	847b      	strh	r3, [r7, #34]	; 0x22
        t5s12 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	3307      	adds	r3, #7
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	22ff      	movs	r2, #255	; 0xff
 800bec4:	2104      	movs	r1, #4
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7f5 f8c7 	bl	800105a <unpack_left_shift_u16>
 800becc:	4603      	mov	r3, r0
 800bece:	461a      	mov	r2, r3
 800bed0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bed2:	4313      	orrs	r3, r2
 800bed4:	847b      	strh	r3, [r7, #34]	; 0x22

        if ((t5s12 & (1u << 11)) != 0u) {
 800bed6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d005      	beq.n	800beec <can1_ams_cell_temperatures_unpack+0x142c>
            t5s12 |= 0xf000u;
 800bee0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bee2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bee6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800beea:	847b      	strh	r3, [r7, #34]	; 0x22
        }

        dst_p->t5s12 = (int16_t)t5s12;
 800beec:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
        break;
 800bef6:	e000      	b.n	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    default:
        break;
 800bef8:	bf00      	nop
    }

    return (0);
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3788      	adds	r7, #136	; 0x88
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <can1_ams_cell_temperatures_temperature_multiplexor_encode>:

uint8_t can1_ams_cell_temperatures_temperature_multiplexor_encode(double value)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800bf0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf12:	f7f4 fe3b 	bl	8000b8c <__aeabi_d2uiz>
 800bf16:	4603      	mov	r3, r0
 800bf18:	b2db      	uxtb	r3, r3
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	0000      	movs	r0, r0
 800bf24:	0000      	movs	r0, r0
	...

0800bf28 <can1_ams_cell_temperatures_t1s1_encode>:
{
    return (value <= 15u);
}

int16_t can1_ams_cell_temperatures_t1s1_encode(double value)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800bf32:	f04f 0200 	mov.w	r2, #0
 800bf36:	4b10      	ldr	r3, [pc, #64]	; (800bf78 <can1_ams_cell_temperatures_t1s1_encode+0x50>)
 800bf38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf3c:	f7f4 f998 	bl	8000270 <__adddf3>
 800bf40:	4602      	mov	r2, r0
 800bf42:	460b      	mov	r3, r1
 800bf44:	4610      	mov	r0, r2
 800bf46:	4619      	mov	r1, r3
 800bf48:	a309      	add	r3, pc, #36	; (adr r3, 800bf70 <can1_ams_cell_temperatures_t1s1_encode+0x48>)
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	f7f4 fc6f 	bl	8000830 <__aeabi_ddiv>
 800bf52:	4602      	mov	r2, r0
 800bf54:	460b      	mov	r3, r1
 800bf56:	4610      	mov	r0, r2
 800bf58:	4619      	mov	r1, r3
 800bf5a:	f7f4 fdef 	bl	8000b3c <__aeabi_d2iz>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	b21b      	sxth	r3, r3
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	f3af 8000 	nop.w
 800bf70:	757928e1 	.word	0x757928e1
 800bf74:	3fa9018e 	.word	0x3fa9018e
 800bf78:	40240000 	.word	0x40240000
 800bf7c:	00000000 	.word	0x00000000

0800bf80 <can1_ams_cell_temperatures_t1s1_decode>:

double can1_ams_cell_temperatures_t1s1_decode(int16_t value)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	4603      	mov	r3, r0
 800bf88:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800bf8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7f4 faba 	bl	8000508 <__aeabi_i2d>
 800bf94:	a30d      	add	r3, pc, #52	; (adr r3, 800bfcc <can1_ams_cell_temperatures_t1s1_decode+0x4c>)
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	f7f4 fb1f 	bl	80005dc <__aeabi_dmul>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	f04f 0200 	mov.w	r2, #0
 800bfaa:	4b07      	ldr	r3, [pc, #28]	; (800bfc8 <can1_ams_cell_temperatures_t1s1_decode+0x48>)
 800bfac:	f7f4 f95e 	bl	800026c <__aeabi_dsub>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	ec43 2b17 	vmov	d7, r2, r3
}
 800bfb8:	eeb0 0a47 	vmov.f32	s0, s14
 800bfbc:	eef0 0a67 	vmov.f32	s1, s15
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	40240000 	.word	0x40240000
 800bfcc:	757928e1 	.word	0x757928e1
 800bfd0:	3fa9018e 	.word	0x3fa9018e
 800bfd4:	00000000 	.word	0x00000000

0800bfd8 <can1_ams_cell_temperatures_t1s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s2_encode(double value)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800bfe2:	f04f 0200 	mov.w	r2, #0
 800bfe6:	4b10      	ldr	r3, [pc, #64]	; (800c028 <can1_ams_cell_temperatures_t1s2_encode+0x50>)
 800bfe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bfec:	f7f4 f940 	bl	8000270 <__adddf3>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4610      	mov	r0, r2
 800bff6:	4619      	mov	r1, r3
 800bff8:	a309      	add	r3, pc, #36	; (adr r3, 800c020 <can1_ams_cell_temperatures_t1s2_encode+0x48>)
 800bffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffe:	f7f4 fc17 	bl	8000830 <__aeabi_ddiv>
 800c002:	4602      	mov	r2, r0
 800c004:	460b      	mov	r3, r1
 800c006:	4610      	mov	r0, r2
 800c008:	4619      	mov	r1, r3
 800c00a:	f7f4 fd97 	bl	8000b3c <__aeabi_d2iz>
 800c00e:	4603      	mov	r3, r0
 800c010:	b21b      	sxth	r3, r3
}
 800c012:	4618      	mov	r0, r3
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	f3af 8000 	nop.w
 800c020:	757928e1 	.word	0x757928e1
 800c024:	3fa9018e 	.word	0x3fa9018e
 800c028:	40240000 	.word	0x40240000
 800c02c:	00000000 	.word	0x00000000

0800c030 <can1_ams_cell_temperatures_t1s2_decode>:

double can1_ams_cell_temperatures_t1s2_decode(int16_t value)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	4603      	mov	r3, r0
 800c038:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c03a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c03e:	4618      	mov	r0, r3
 800c040:	f7f4 fa62 	bl	8000508 <__aeabi_i2d>
 800c044:	a30d      	add	r3, pc, #52	; (adr r3, 800c07c <can1_ams_cell_temperatures_t1s2_decode+0x4c>)
 800c046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04a:	f7f4 fac7 	bl	80005dc <__aeabi_dmul>
 800c04e:	4602      	mov	r2, r0
 800c050:	460b      	mov	r3, r1
 800c052:	4610      	mov	r0, r2
 800c054:	4619      	mov	r1, r3
 800c056:	f04f 0200 	mov.w	r2, #0
 800c05a:	4b07      	ldr	r3, [pc, #28]	; (800c078 <can1_ams_cell_temperatures_t1s2_decode+0x48>)
 800c05c:	f7f4 f906 	bl	800026c <__aeabi_dsub>
 800c060:	4602      	mov	r2, r0
 800c062:	460b      	mov	r3, r1
 800c064:	ec43 2b17 	vmov	d7, r2, r3
}
 800c068:	eeb0 0a47 	vmov.f32	s0, s14
 800c06c:	eef0 0a67 	vmov.f32	s1, s15
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	40240000 	.word	0x40240000
 800c07c:	757928e1 	.word	0x757928e1
 800c080:	3fa9018e 	.word	0x3fa9018e
 800c084:	00000000 	.word	0x00000000

0800c088 <can1_ams_cell_temperatures_t1s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s3_encode(double value)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c092:	f04f 0200 	mov.w	r2, #0
 800c096:	4b10      	ldr	r3, [pc, #64]	; (800c0d8 <can1_ams_cell_temperatures_t1s3_encode+0x50>)
 800c098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c09c:	f7f4 f8e8 	bl	8000270 <__adddf3>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	4610      	mov	r0, r2
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	a309      	add	r3, pc, #36	; (adr r3, 800c0d0 <can1_ams_cell_temperatures_t1s3_encode+0x48>)
 800c0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ae:	f7f4 fbbf 	bl	8000830 <__aeabi_ddiv>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	4610      	mov	r0, r2
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	f7f4 fd3f 	bl	8000b3c <__aeabi_d2iz>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	b21b      	sxth	r3, r3
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	f3af 8000 	nop.w
 800c0d0:	757928e1 	.word	0x757928e1
 800c0d4:	3fa9018e 	.word	0x3fa9018e
 800c0d8:	40240000 	.word	0x40240000
 800c0dc:	00000000 	.word	0x00000000

0800c0e0 <can1_ams_cell_temperatures_t1s3_decode>:

double can1_ams_cell_temperatures_t1s3_decode(int16_t value)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c0ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7f4 fa0a 	bl	8000508 <__aeabi_i2d>
 800c0f4:	a30d      	add	r3, pc, #52	; (adr r3, 800c12c <can1_ams_cell_temperatures_t1s3_decode+0x4c>)
 800c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fa:	f7f4 fa6f 	bl	80005dc <__aeabi_dmul>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	4610      	mov	r0, r2
 800c104:	4619      	mov	r1, r3
 800c106:	f04f 0200 	mov.w	r2, #0
 800c10a:	4b07      	ldr	r3, [pc, #28]	; (800c128 <can1_ams_cell_temperatures_t1s3_decode+0x48>)
 800c10c:	f7f4 f8ae 	bl	800026c <__aeabi_dsub>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	ec43 2b17 	vmov	d7, r2, r3
}
 800c118:	eeb0 0a47 	vmov.f32	s0, s14
 800c11c:	eef0 0a67 	vmov.f32	s1, s15
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	40240000 	.word	0x40240000
 800c12c:	757928e1 	.word	0x757928e1
 800c130:	3fa9018e 	.word	0x3fa9018e
 800c134:	00000000 	.word	0x00000000

0800c138 <can1_ams_cell_temperatures_t1s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s4_encode(double value)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c142:	f04f 0200 	mov.w	r2, #0
 800c146:	4b10      	ldr	r3, [pc, #64]	; (800c188 <can1_ams_cell_temperatures_t1s4_encode+0x50>)
 800c148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c14c:	f7f4 f890 	bl	8000270 <__adddf3>
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	4610      	mov	r0, r2
 800c156:	4619      	mov	r1, r3
 800c158:	a309      	add	r3, pc, #36	; (adr r3, 800c180 <can1_ams_cell_temperatures_t1s4_encode+0x48>)
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	f7f4 fb67 	bl	8000830 <__aeabi_ddiv>
 800c162:	4602      	mov	r2, r0
 800c164:	460b      	mov	r3, r1
 800c166:	4610      	mov	r0, r2
 800c168:	4619      	mov	r1, r3
 800c16a:	f7f4 fce7 	bl	8000b3c <__aeabi_d2iz>
 800c16e:	4603      	mov	r3, r0
 800c170:	b21b      	sxth	r3, r3
}
 800c172:	4618      	mov	r0, r3
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	f3af 8000 	nop.w
 800c180:	757928e1 	.word	0x757928e1
 800c184:	3fa9018e 	.word	0x3fa9018e
 800c188:	40240000 	.word	0x40240000
 800c18c:	00000000 	.word	0x00000000

0800c190 <can1_ams_cell_temperatures_t1s4_decode>:

double can1_ams_cell_temperatures_t1s4_decode(int16_t value)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	4603      	mov	r3, r0
 800c198:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c19a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7f4 f9b2 	bl	8000508 <__aeabi_i2d>
 800c1a4:	a30d      	add	r3, pc, #52	; (adr r3, 800c1dc <can1_ams_cell_temperatures_t1s4_decode+0x4c>)
 800c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1aa:	f7f4 fa17 	bl	80005dc <__aeabi_dmul>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	4610      	mov	r0, r2
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	f04f 0200 	mov.w	r2, #0
 800c1ba:	4b07      	ldr	r3, [pc, #28]	; (800c1d8 <can1_ams_cell_temperatures_t1s4_decode+0x48>)
 800c1bc:	f7f4 f856 	bl	800026c <__aeabi_dsub>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c1c8:	eeb0 0a47 	vmov.f32	s0, s14
 800c1cc:	eef0 0a67 	vmov.f32	s1, s15
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	40240000 	.word	0x40240000
 800c1dc:	757928e1 	.word	0x757928e1
 800c1e0:	3fa9018e 	.word	0x3fa9018e
 800c1e4:	00000000 	.word	0x00000000

0800c1e8 <can1_ams_cell_temperatures_t1s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s5_encode(double value)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c1f2:	f04f 0200 	mov.w	r2, #0
 800c1f6:	4b10      	ldr	r3, [pc, #64]	; (800c238 <can1_ams_cell_temperatures_t1s5_encode+0x50>)
 800c1f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c1fc:	f7f4 f838 	bl	8000270 <__adddf3>
 800c200:	4602      	mov	r2, r0
 800c202:	460b      	mov	r3, r1
 800c204:	4610      	mov	r0, r2
 800c206:	4619      	mov	r1, r3
 800c208:	a309      	add	r3, pc, #36	; (adr r3, 800c230 <can1_ams_cell_temperatures_t1s5_encode+0x48>)
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	f7f4 fb0f 	bl	8000830 <__aeabi_ddiv>
 800c212:	4602      	mov	r2, r0
 800c214:	460b      	mov	r3, r1
 800c216:	4610      	mov	r0, r2
 800c218:	4619      	mov	r1, r3
 800c21a:	f7f4 fc8f 	bl	8000b3c <__aeabi_d2iz>
 800c21e:	4603      	mov	r3, r0
 800c220:	b21b      	sxth	r3, r3
}
 800c222:	4618      	mov	r0, r3
 800c224:	3708      	adds	r7, #8
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	f3af 8000 	nop.w
 800c230:	757928e1 	.word	0x757928e1
 800c234:	3fa9018e 	.word	0x3fa9018e
 800c238:	40240000 	.word	0x40240000
 800c23c:	00000000 	.word	0x00000000

0800c240 <can1_ams_cell_temperatures_t1s5_decode>:

double can1_ams_cell_temperatures_t1s5_decode(int16_t value)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	4603      	mov	r3, r0
 800c248:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c24a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c24e:	4618      	mov	r0, r3
 800c250:	f7f4 f95a 	bl	8000508 <__aeabi_i2d>
 800c254:	a30d      	add	r3, pc, #52	; (adr r3, 800c28c <can1_ams_cell_temperatures_t1s5_decode+0x4c>)
 800c256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25a:	f7f4 f9bf 	bl	80005dc <__aeabi_dmul>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	4610      	mov	r0, r2
 800c264:	4619      	mov	r1, r3
 800c266:	f04f 0200 	mov.w	r2, #0
 800c26a:	4b07      	ldr	r3, [pc, #28]	; (800c288 <can1_ams_cell_temperatures_t1s5_decode+0x48>)
 800c26c:	f7f3 fffe 	bl	800026c <__aeabi_dsub>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	ec43 2b17 	vmov	d7, r2, r3
}
 800c278:	eeb0 0a47 	vmov.f32	s0, s14
 800c27c:	eef0 0a67 	vmov.f32	s1, s15
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	40240000 	.word	0x40240000
 800c28c:	757928e1 	.word	0x757928e1
 800c290:	3fa9018e 	.word	0x3fa9018e
 800c294:	00000000 	.word	0x00000000

0800c298 <can1_ams_cell_temperatures_t1s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s6_encode(double value)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c2a2:	f04f 0200 	mov.w	r2, #0
 800c2a6:	4b10      	ldr	r3, [pc, #64]	; (800c2e8 <can1_ams_cell_temperatures_t1s6_encode+0x50>)
 800c2a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c2ac:	f7f3 ffe0 	bl	8000270 <__adddf3>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4610      	mov	r0, r2
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	a309      	add	r3, pc, #36	; (adr r3, 800c2e0 <can1_ams_cell_temperatures_t1s6_encode+0x48>)
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	f7f4 fab7 	bl	8000830 <__aeabi_ddiv>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4610      	mov	r0, r2
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	f7f4 fc37 	bl	8000b3c <__aeabi_d2iz>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	b21b      	sxth	r3, r3
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	f3af 8000 	nop.w
 800c2e0:	757928e1 	.word	0x757928e1
 800c2e4:	3fa9018e 	.word	0x3fa9018e
 800c2e8:	40240000 	.word	0x40240000
 800c2ec:	00000000 	.word	0x00000000

0800c2f0 <can1_ams_cell_temperatures_t1s6_decode>:

double can1_ams_cell_temperatures_t1s6_decode(int16_t value)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c2fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7f4 f902 	bl	8000508 <__aeabi_i2d>
 800c304:	a30d      	add	r3, pc, #52	; (adr r3, 800c33c <can1_ams_cell_temperatures_t1s6_decode+0x4c>)
 800c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30a:	f7f4 f967 	bl	80005dc <__aeabi_dmul>
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	4610      	mov	r0, r2
 800c314:	4619      	mov	r1, r3
 800c316:	f04f 0200 	mov.w	r2, #0
 800c31a:	4b07      	ldr	r3, [pc, #28]	; (800c338 <can1_ams_cell_temperatures_t1s6_decode+0x48>)
 800c31c:	f7f3 ffa6 	bl	800026c <__aeabi_dsub>
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	ec43 2b17 	vmov	d7, r2, r3
}
 800c328:	eeb0 0a47 	vmov.f32	s0, s14
 800c32c:	eef0 0a67 	vmov.f32	s1, s15
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	40240000 	.word	0x40240000
 800c33c:	757928e1 	.word	0x757928e1
 800c340:	3fa9018e 	.word	0x3fa9018e
 800c344:	00000000 	.word	0x00000000

0800c348 <can1_ams_cell_temperatures_t1s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s7_encode(double value)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c352:	f04f 0200 	mov.w	r2, #0
 800c356:	4b10      	ldr	r3, [pc, #64]	; (800c398 <can1_ams_cell_temperatures_t1s7_encode+0x50>)
 800c358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c35c:	f7f3 ff88 	bl	8000270 <__adddf3>
 800c360:	4602      	mov	r2, r0
 800c362:	460b      	mov	r3, r1
 800c364:	4610      	mov	r0, r2
 800c366:	4619      	mov	r1, r3
 800c368:	a309      	add	r3, pc, #36	; (adr r3, 800c390 <can1_ams_cell_temperatures_t1s7_encode+0x48>)
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	f7f4 fa5f 	bl	8000830 <__aeabi_ddiv>
 800c372:	4602      	mov	r2, r0
 800c374:	460b      	mov	r3, r1
 800c376:	4610      	mov	r0, r2
 800c378:	4619      	mov	r1, r3
 800c37a:	f7f4 fbdf 	bl	8000b3c <__aeabi_d2iz>
 800c37e:	4603      	mov	r3, r0
 800c380:	b21b      	sxth	r3, r3
}
 800c382:	4618      	mov	r0, r3
 800c384:	3708      	adds	r7, #8
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	f3af 8000 	nop.w
 800c390:	757928e1 	.word	0x757928e1
 800c394:	3fa9018e 	.word	0x3fa9018e
 800c398:	40240000 	.word	0x40240000
 800c39c:	00000000 	.word	0x00000000

0800c3a0 <can1_ams_cell_temperatures_t1s7_decode>:

double can1_ams_cell_temperatures_t1s7_decode(int16_t value)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c3aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f4 f8aa 	bl	8000508 <__aeabi_i2d>
 800c3b4:	a30d      	add	r3, pc, #52	; (adr r3, 800c3ec <can1_ams_cell_temperatures_t1s7_decode+0x4c>)
 800c3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ba:	f7f4 f90f 	bl	80005dc <__aeabi_dmul>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	4610      	mov	r0, r2
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	f04f 0200 	mov.w	r2, #0
 800c3ca:	4b07      	ldr	r3, [pc, #28]	; (800c3e8 <can1_ams_cell_temperatures_t1s7_decode+0x48>)
 800c3cc:	f7f3 ff4e 	bl	800026c <__aeabi_dsub>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c3d8:	eeb0 0a47 	vmov.f32	s0, s14
 800c3dc:	eef0 0a67 	vmov.f32	s1, s15
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	40240000 	.word	0x40240000
 800c3ec:	757928e1 	.word	0x757928e1
 800c3f0:	3fa9018e 	.word	0x3fa9018e
 800c3f4:	00000000 	.word	0x00000000

0800c3f8 <can1_ams_cell_temperatures_t1s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s8_encode(double value)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c402:	f04f 0200 	mov.w	r2, #0
 800c406:	4b10      	ldr	r3, [pc, #64]	; (800c448 <can1_ams_cell_temperatures_t1s8_encode+0x50>)
 800c408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c40c:	f7f3 ff30 	bl	8000270 <__adddf3>
 800c410:	4602      	mov	r2, r0
 800c412:	460b      	mov	r3, r1
 800c414:	4610      	mov	r0, r2
 800c416:	4619      	mov	r1, r3
 800c418:	a309      	add	r3, pc, #36	; (adr r3, 800c440 <can1_ams_cell_temperatures_t1s8_encode+0x48>)
 800c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41e:	f7f4 fa07 	bl	8000830 <__aeabi_ddiv>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	4610      	mov	r0, r2
 800c428:	4619      	mov	r1, r3
 800c42a:	f7f4 fb87 	bl	8000b3c <__aeabi_d2iz>
 800c42e:	4603      	mov	r3, r0
 800c430:	b21b      	sxth	r3, r3
}
 800c432:	4618      	mov	r0, r3
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	f3af 8000 	nop.w
 800c440:	757928e1 	.word	0x757928e1
 800c444:	3fa9018e 	.word	0x3fa9018e
 800c448:	40240000 	.word	0x40240000
 800c44c:	00000000 	.word	0x00000000

0800c450 <can1_ams_cell_temperatures_t1s8_decode>:

double can1_ams_cell_temperatures_t1s8_decode(int16_t value)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c45a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c45e:	4618      	mov	r0, r3
 800c460:	f7f4 f852 	bl	8000508 <__aeabi_i2d>
 800c464:	a30d      	add	r3, pc, #52	; (adr r3, 800c49c <can1_ams_cell_temperatures_t1s8_decode+0x4c>)
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	f7f4 f8b7 	bl	80005dc <__aeabi_dmul>
 800c46e:	4602      	mov	r2, r0
 800c470:	460b      	mov	r3, r1
 800c472:	4610      	mov	r0, r2
 800c474:	4619      	mov	r1, r3
 800c476:	f04f 0200 	mov.w	r2, #0
 800c47a:	4b07      	ldr	r3, [pc, #28]	; (800c498 <can1_ams_cell_temperatures_t1s8_decode+0x48>)
 800c47c:	f7f3 fef6 	bl	800026c <__aeabi_dsub>
 800c480:	4602      	mov	r2, r0
 800c482:	460b      	mov	r3, r1
 800c484:	ec43 2b17 	vmov	d7, r2, r3
}
 800c488:	eeb0 0a47 	vmov.f32	s0, s14
 800c48c:	eef0 0a67 	vmov.f32	s1, s15
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	40240000 	.word	0x40240000
 800c49c:	757928e1 	.word	0x757928e1
 800c4a0:	3fa9018e 	.word	0x3fa9018e
 800c4a4:	00000000 	.word	0x00000000

0800c4a8 <can1_ams_cell_temperatures_t1s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s9_encode(double value)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c4b2:	f04f 0200 	mov.w	r2, #0
 800c4b6:	4b10      	ldr	r3, [pc, #64]	; (800c4f8 <can1_ams_cell_temperatures_t1s9_encode+0x50>)
 800c4b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c4bc:	f7f3 fed8 	bl	8000270 <__adddf3>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	a309      	add	r3, pc, #36	; (adr r3, 800c4f0 <can1_ams_cell_temperatures_t1s9_encode+0x48>)
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f7f4 f9af 	bl	8000830 <__aeabi_ddiv>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	4619      	mov	r1, r3
 800c4da:	f7f4 fb2f 	bl	8000b3c <__aeabi_d2iz>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	b21b      	sxth	r3, r3
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	f3af 8000 	nop.w
 800c4f0:	757928e1 	.word	0x757928e1
 800c4f4:	3fa9018e 	.word	0x3fa9018e
 800c4f8:	40240000 	.word	0x40240000
 800c4fc:	00000000 	.word	0x00000000

0800c500 <can1_ams_cell_temperatures_t1s9_decode>:

double can1_ams_cell_temperatures_t1s9_decode(int16_t value)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	4603      	mov	r3, r0
 800c508:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c50a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c50e:	4618      	mov	r0, r3
 800c510:	f7f3 fffa 	bl	8000508 <__aeabi_i2d>
 800c514:	a30d      	add	r3, pc, #52	; (adr r3, 800c54c <can1_ams_cell_temperatures_t1s9_decode+0x4c>)
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	f7f4 f85f 	bl	80005dc <__aeabi_dmul>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	4610      	mov	r0, r2
 800c524:	4619      	mov	r1, r3
 800c526:	f04f 0200 	mov.w	r2, #0
 800c52a:	4b07      	ldr	r3, [pc, #28]	; (800c548 <can1_ams_cell_temperatures_t1s9_decode+0x48>)
 800c52c:	f7f3 fe9e 	bl	800026c <__aeabi_dsub>
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	ec43 2b17 	vmov	d7, r2, r3
}
 800c538:	eeb0 0a47 	vmov.f32	s0, s14
 800c53c:	eef0 0a67 	vmov.f32	s1, s15
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	40240000 	.word	0x40240000
 800c54c:	757928e1 	.word	0x757928e1
 800c550:	3fa9018e 	.word	0x3fa9018e
 800c554:	00000000 	.word	0x00000000

0800c558 <can1_ams_cell_temperatures_t1s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s10_encode(double value)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c562:	f04f 0200 	mov.w	r2, #0
 800c566:	4b10      	ldr	r3, [pc, #64]	; (800c5a8 <can1_ams_cell_temperatures_t1s10_encode+0x50>)
 800c568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c56c:	f7f3 fe80 	bl	8000270 <__adddf3>
 800c570:	4602      	mov	r2, r0
 800c572:	460b      	mov	r3, r1
 800c574:	4610      	mov	r0, r2
 800c576:	4619      	mov	r1, r3
 800c578:	a309      	add	r3, pc, #36	; (adr r3, 800c5a0 <can1_ams_cell_temperatures_t1s10_encode+0x48>)
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	f7f4 f957 	bl	8000830 <__aeabi_ddiv>
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	4610      	mov	r0, r2
 800c588:	4619      	mov	r1, r3
 800c58a:	f7f4 fad7 	bl	8000b3c <__aeabi_d2iz>
 800c58e:	4603      	mov	r3, r0
 800c590:	b21b      	sxth	r3, r3
}
 800c592:	4618      	mov	r0, r3
 800c594:	3708      	adds	r7, #8
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	f3af 8000 	nop.w
 800c5a0:	757928e1 	.word	0x757928e1
 800c5a4:	3fa9018e 	.word	0x3fa9018e
 800c5a8:	40240000 	.word	0x40240000
 800c5ac:	00000000 	.word	0x00000000

0800c5b0 <can1_ams_cell_temperatures_t1s10_decode>:

double can1_ams_cell_temperatures_t1s10_decode(int16_t value)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c5ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7f3 ffa2 	bl	8000508 <__aeabi_i2d>
 800c5c4:	a30d      	add	r3, pc, #52	; (adr r3, 800c5fc <can1_ams_cell_temperatures_t1s10_decode+0x4c>)
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	f7f4 f807 	bl	80005dc <__aeabi_dmul>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	4610      	mov	r0, r2
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	f04f 0200 	mov.w	r2, #0
 800c5da:	4b07      	ldr	r3, [pc, #28]	; (800c5f8 <can1_ams_cell_temperatures_t1s10_decode+0x48>)
 800c5dc:	f7f3 fe46 	bl	800026c <__aeabi_dsub>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c5e8:	eeb0 0a47 	vmov.f32	s0, s14
 800c5ec:	eef0 0a67 	vmov.f32	s1, s15
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	40240000 	.word	0x40240000
 800c5fc:	757928e1 	.word	0x757928e1
 800c600:	3fa9018e 	.word	0x3fa9018e
 800c604:	00000000 	.word	0x00000000

0800c608 <can1_ams_cell_temperatures_t1s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s11_encode(double value)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c612:	f04f 0200 	mov.w	r2, #0
 800c616:	4b10      	ldr	r3, [pc, #64]	; (800c658 <can1_ams_cell_temperatures_t1s11_encode+0x50>)
 800c618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c61c:	f7f3 fe28 	bl	8000270 <__adddf3>
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	4610      	mov	r0, r2
 800c626:	4619      	mov	r1, r3
 800c628:	a309      	add	r3, pc, #36	; (adr r3, 800c650 <can1_ams_cell_temperatures_t1s11_encode+0x48>)
 800c62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62e:	f7f4 f8ff 	bl	8000830 <__aeabi_ddiv>
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	4610      	mov	r0, r2
 800c638:	4619      	mov	r1, r3
 800c63a:	f7f4 fa7f 	bl	8000b3c <__aeabi_d2iz>
 800c63e:	4603      	mov	r3, r0
 800c640:	b21b      	sxth	r3, r3
}
 800c642:	4618      	mov	r0, r3
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	f3af 8000 	nop.w
 800c650:	757928e1 	.word	0x757928e1
 800c654:	3fa9018e 	.word	0x3fa9018e
 800c658:	40240000 	.word	0x40240000
 800c65c:	00000000 	.word	0x00000000

0800c660 <can1_ams_cell_temperatures_t1s11_decode>:

double can1_ams_cell_temperatures_t1s11_decode(int16_t value)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	4603      	mov	r3, r0
 800c668:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c66a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c66e:	4618      	mov	r0, r3
 800c670:	f7f3 ff4a 	bl	8000508 <__aeabi_i2d>
 800c674:	a30d      	add	r3, pc, #52	; (adr r3, 800c6ac <can1_ams_cell_temperatures_t1s11_decode+0x4c>)
 800c676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67a:	f7f3 ffaf 	bl	80005dc <__aeabi_dmul>
 800c67e:	4602      	mov	r2, r0
 800c680:	460b      	mov	r3, r1
 800c682:	4610      	mov	r0, r2
 800c684:	4619      	mov	r1, r3
 800c686:	f04f 0200 	mov.w	r2, #0
 800c68a:	4b07      	ldr	r3, [pc, #28]	; (800c6a8 <can1_ams_cell_temperatures_t1s11_decode+0x48>)
 800c68c:	f7f3 fdee 	bl	800026c <__aeabi_dsub>
 800c690:	4602      	mov	r2, r0
 800c692:	460b      	mov	r3, r1
 800c694:	ec43 2b17 	vmov	d7, r2, r3
}
 800c698:	eeb0 0a47 	vmov.f32	s0, s14
 800c69c:	eef0 0a67 	vmov.f32	s1, s15
 800c6a0:	3708      	adds	r7, #8
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	40240000 	.word	0x40240000
 800c6ac:	757928e1 	.word	0x757928e1
 800c6b0:	3fa9018e 	.word	0x3fa9018e
 800c6b4:	00000000 	.word	0x00000000

0800c6b8 <can1_ams_cell_temperatures_t1s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s12_encode(double value)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c6c2:	f04f 0200 	mov.w	r2, #0
 800c6c6:	4b10      	ldr	r3, [pc, #64]	; (800c708 <can1_ams_cell_temperatures_t1s12_encode+0x50>)
 800c6c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6cc:	f7f3 fdd0 	bl	8000270 <__adddf3>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	a309      	add	r3, pc, #36	; (adr r3, 800c700 <can1_ams_cell_temperatures_t1s12_encode+0x48>)
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	f7f4 f8a7 	bl	8000830 <__aeabi_ddiv>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	4610      	mov	r0, r2
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	f7f4 fa27 	bl	8000b3c <__aeabi_d2iz>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	b21b      	sxth	r3, r3
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	f3af 8000 	nop.w
 800c700:	757928e1 	.word	0x757928e1
 800c704:	3fa9018e 	.word	0x3fa9018e
 800c708:	40240000 	.word	0x40240000
 800c70c:	00000000 	.word	0x00000000

0800c710 <can1_ams_cell_temperatures_t1s12_decode>:

double can1_ams_cell_temperatures_t1s12_decode(int16_t value)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c71a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c71e:	4618      	mov	r0, r3
 800c720:	f7f3 fef2 	bl	8000508 <__aeabi_i2d>
 800c724:	a30d      	add	r3, pc, #52	; (adr r3, 800c75c <can1_ams_cell_temperatures_t1s12_decode+0x4c>)
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	f7f3 ff57 	bl	80005dc <__aeabi_dmul>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	4610      	mov	r0, r2
 800c734:	4619      	mov	r1, r3
 800c736:	f04f 0200 	mov.w	r2, #0
 800c73a:	4b07      	ldr	r3, [pc, #28]	; (800c758 <can1_ams_cell_temperatures_t1s12_decode+0x48>)
 800c73c:	f7f3 fd96 	bl	800026c <__aeabi_dsub>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	ec43 2b17 	vmov	d7, r2, r3
}
 800c748:	eeb0 0a47 	vmov.f32	s0, s14
 800c74c:	eef0 0a67 	vmov.f32	s1, s15
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	40240000 	.word	0x40240000
 800c75c:	757928e1 	.word	0x757928e1
 800c760:	3fa9018e 	.word	0x3fa9018e
 800c764:	00000000 	.word	0x00000000

0800c768 <can1_ams_cell_temperatures_t2s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s1_encode(double value)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c772:	f04f 0200 	mov.w	r2, #0
 800c776:	4b10      	ldr	r3, [pc, #64]	; (800c7b8 <can1_ams_cell_temperatures_t2s1_encode+0x50>)
 800c778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c77c:	f7f3 fd78 	bl	8000270 <__adddf3>
 800c780:	4602      	mov	r2, r0
 800c782:	460b      	mov	r3, r1
 800c784:	4610      	mov	r0, r2
 800c786:	4619      	mov	r1, r3
 800c788:	a309      	add	r3, pc, #36	; (adr r3, 800c7b0 <can1_ams_cell_temperatures_t2s1_encode+0x48>)
 800c78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78e:	f7f4 f84f 	bl	8000830 <__aeabi_ddiv>
 800c792:	4602      	mov	r2, r0
 800c794:	460b      	mov	r3, r1
 800c796:	4610      	mov	r0, r2
 800c798:	4619      	mov	r1, r3
 800c79a:	f7f4 f9cf 	bl	8000b3c <__aeabi_d2iz>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	b21b      	sxth	r3, r3
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	f3af 8000 	nop.w
 800c7b0:	757928e1 	.word	0x757928e1
 800c7b4:	3fa9018e 	.word	0x3fa9018e
 800c7b8:	40240000 	.word	0x40240000
 800c7bc:	00000000 	.word	0x00000000

0800c7c0 <can1_ams_cell_temperatures_t2s1_decode>:

double can1_ams_cell_temperatures_t2s1_decode(int16_t value)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c7ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7f3 fe9a 	bl	8000508 <__aeabi_i2d>
 800c7d4:	a30d      	add	r3, pc, #52	; (adr r3, 800c80c <can1_ams_cell_temperatures_t2s1_decode+0x4c>)
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	f7f3 feff 	bl	80005dc <__aeabi_dmul>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	f04f 0200 	mov.w	r2, #0
 800c7ea:	4b07      	ldr	r3, [pc, #28]	; (800c808 <can1_ams_cell_temperatures_t2s1_decode+0x48>)
 800c7ec:	f7f3 fd3e 	bl	800026c <__aeabi_dsub>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c7f8:	eeb0 0a47 	vmov.f32	s0, s14
 800c7fc:	eef0 0a67 	vmov.f32	s1, s15
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	40240000 	.word	0x40240000
 800c80c:	757928e1 	.word	0x757928e1
 800c810:	3fa9018e 	.word	0x3fa9018e
 800c814:	00000000 	.word	0x00000000

0800c818 <can1_ams_cell_temperatures_t2s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s2_encode(double value)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c822:	f04f 0200 	mov.w	r2, #0
 800c826:	4b10      	ldr	r3, [pc, #64]	; (800c868 <can1_ams_cell_temperatures_t2s2_encode+0x50>)
 800c828:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c82c:	f7f3 fd20 	bl	8000270 <__adddf3>
 800c830:	4602      	mov	r2, r0
 800c832:	460b      	mov	r3, r1
 800c834:	4610      	mov	r0, r2
 800c836:	4619      	mov	r1, r3
 800c838:	a309      	add	r3, pc, #36	; (adr r3, 800c860 <can1_ams_cell_temperatures_t2s2_encode+0x48>)
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	f7f3 fff7 	bl	8000830 <__aeabi_ddiv>
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
 800c846:	4610      	mov	r0, r2
 800c848:	4619      	mov	r1, r3
 800c84a:	f7f4 f977 	bl	8000b3c <__aeabi_d2iz>
 800c84e:	4603      	mov	r3, r0
 800c850:	b21b      	sxth	r3, r3
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	f3af 8000 	nop.w
 800c860:	757928e1 	.word	0x757928e1
 800c864:	3fa9018e 	.word	0x3fa9018e
 800c868:	40240000 	.word	0x40240000
 800c86c:	00000000 	.word	0x00000000

0800c870 <can1_ams_cell_temperatures_t2s2_decode>:

double can1_ams_cell_temperatures_t2s2_decode(int16_t value)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	4603      	mov	r3, r0
 800c878:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c87a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c87e:	4618      	mov	r0, r3
 800c880:	f7f3 fe42 	bl	8000508 <__aeabi_i2d>
 800c884:	a30d      	add	r3, pc, #52	; (adr r3, 800c8bc <can1_ams_cell_temperatures_t2s2_decode+0x4c>)
 800c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88a:	f7f3 fea7 	bl	80005dc <__aeabi_dmul>
 800c88e:	4602      	mov	r2, r0
 800c890:	460b      	mov	r3, r1
 800c892:	4610      	mov	r0, r2
 800c894:	4619      	mov	r1, r3
 800c896:	f04f 0200 	mov.w	r2, #0
 800c89a:	4b07      	ldr	r3, [pc, #28]	; (800c8b8 <can1_ams_cell_temperatures_t2s2_decode+0x48>)
 800c89c:	f7f3 fce6 	bl	800026c <__aeabi_dsub>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c8a8:	eeb0 0a47 	vmov.f32	s0, s14
 800c8ac:	eef0 0a67 	vmov.f32	s1, s15
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	40240000 	.word	0x40240000
 800c8bc:	757928e1 	.word	0x757928e1
 800c8c0:	3fa9018e 	.word	0x3fa9018e
 800c8c4:	00000000 	.word	0x00000000

0800c8c8 <can1_ams_cell_temperatures_t2s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s3_encode(double value)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c8d2:	f04f 0200 	mov.w	r2, #0
 800c8d6:	4b10      	ldr	r3, [pc, #64]	; (800c918 <can1_ams_cell_temperatures_t2s3_encode+0x50>)
 800c8d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8dc:	f7f3 fcc8 	bl	8000270 <__adddf3>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	a309      	add	r3, pc, #36	; (adr r3, 800c910 <can1_ams_cell_temperatures_t2s3_encode+0x48>)
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	f7f3 ff9f 	bl	8000830 <__aeabi_ddiv>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	f7f4 f91f 	bl	8000b3c <__aeabi_d2iz>
 800c8fe:	4603      	mov	r3, r0
 800c900:	b21b      	sxth	r3, r3
}
 800c902:	4618      	mov	r0, r3
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	f3af 8000 	nop.w
 800c910:	757928e1 	.word	0x757928e1
 800c914:	3fa9018e 	.word	0x3fa9018e
 800c918:	40240000 	.word	0x40240000
 800c91c:	00000000 	.word	0x00000000

0800c920 <can1_ams_cell_temperatures_t2s3_decode>:

double can1_ams_cell_temperatures_t2s3_decode(int16_t value)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	4603      	mov	r3, r0
 800c928:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c92a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c92e:	4618      	mov	r0, r3
 800c930:	f7f3 fdea 	bl	8000508 <__aeabi_i2d>
 800c934:	a30d      	add	r3, pc, #52	; (adr r3, 800c96c <can1_ams_cell_temperatures_t2s3_decode+0x4c>)
 800c936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93a:	f7f3 fe4f 	bl	80005dc <__aeabi_dmul>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	4610      	mov	r0, r2
 800c944:	4619      	mov	r1, r3
 800c946:	f04f 0200 	mov.w	r2, #0
 800c94a:	4b07      	ldr	r3, [pc, #28]	; (800c968 <can1_ams_cell_temperatures_t2s3_decode+0x48>)
 800c94c:	f7f3 fc8e 	bl	800026c <__aeabi_dsub>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	ec43 2b17 	vmov	d7, r2, r3
}
 800c958:	eeb0 0a47 	vmov.f32	s0, s14
 800c95c:	eef0 0a67 	vmov.f32	s1, s15
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	40240000 	.word	0x40240000
 800c96c:	757928e1 	.word	0x757928e1
 800c970:	3fa9018e 	.word	0x3fa9018e
 800c974:	00000000 	.word	0x00000000

0800c978 <can1_ams_cell_temperatures_t2s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s4_encode(double value)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c982:	f04f 0200 	mov.w	r2, #0
 800c986:	4b10      	ldr	r3, [pc, #64]	; (800c9c8 <can1_ams_cell_temperatures_t2s4_encode+0x50>)
 800c988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c98c:	f7f3 fc70 	bl	8000270 <__adddf3>
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	4610      	mov	r0, r2
 800c996:	4619      	mov	r1, r3
 800c998:	a309      	add	r3, pc, #36	; (adr r3, 800c9c0 <can1_ams_cell_temperatures_t2s4_encode+0x48>)
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	f7f3 ff47 	bl	8000830 <__aeabi_ddiv>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	4610      	mov	r0, r2
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	f7f4 f8c7 	bl	8000b3c <__aeabi_d2iz>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	b21b      	sxth	r3, r3
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	f3af 8000 	nop.w
 800c9c0:	757928e1 	.word	0x757928e1
 800c9c4:	3fa9018e 	.word	0x3fa9018e
 800c9c8:	40240000 	.word	0x40240000
 800c9cc:	00000000 	.word	0x00000000

0800c9d0 <can1_ams_cell_temperatures_t2s4_decode>:

double can1_ams_cell_temperatures_t2s4_decode(int16_t value)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c9da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7f3 fd92 	bl	8000508 <__aeabi_i2d>
 800c9e4:	a30d      	add	r3, pc, #52	; (adr r3, 800ca1c <can1_ams_cell_temperatures_t2s4_decode+0x4c>)
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	f7f3 fdf7 	bl	80005dc <__aeabi_dmul>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	f04f 0200 	mov.w	r2, #0
 800c9fa:	4b07      	ldr	r3, [pc, #28]	; (800ca18 <can1_ams_cell_temperatures_t2s4_decode+0x48>)
 800c9fc:	f7f3 fc36 	bl	800026c <__aeabi_dsub>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	ec43 2b17 	vmov	d7, r2, r3
}
 800ca08:	eeb0 0a47 	vmov.f32	s0, s14
 800ca0c:	eef0 0a67 	vmov.f32	s1, s15
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	40240000 	.word	0x40240000
 800ca1c:	757928e1 	.word	0x757928e1
 800ca20:	3fa9018e 	.word	0x3fa9018e
 800ca24:	00000000 	.word	0x00000000

0800ca28 <can1_ams_cell_temperatures_t2s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s5_encode(double value)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ca32:	f04f 0200 	mov.w	r2, #0
 800ca36:	4b10      	ldr	r3, [pc, #64]	; (800ca78 <can1_ams_cell_temperatures_t2s5_encode+0x50>)
 800ca38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca3c:	f7f3 fc18 	bl	8000270 <__adddf3>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4610      	mov	r0, r2
 800ca46:	4619      	mov	r1, r3
 800ca48:	a309      	add	r3, pc, #36	; (adr r3, 800ca70 <can1_ams_cell_temperatures_t2s5_encode+0x48>)
 800ca4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4e:	f7f3 feef 	bl	8000830 <__aeabi_ddiv>
 800ca52:	4602      	mov	r2, r0
 800ca54:	460b      	mov	r3, r1
 800ca56:	4610      	mov	r0, r2
 800ca58:	4619      	mov	r1, r3
 800ca5a:	f7f4 f86f 	bl	8000b3c <__aeabi_d2iz>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	b21b      	sxth	r3, r3
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	f3af 8000 	nop.w
 800ca70:	757928e1 	.word	0x757928e1
 800ca74:	3fa9018e 	.word	0x3fa9018e
 800ca78:	40240000 	.word	0x40240000
 800ca7c:	00000000 	.word	0x00000000

0800ca80 <can1_ams_cell_temperatures_t2s5_decode>:

double can1_ams_cell_temperatures_t2s5_decode(int16_t value)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	4603      	mov	r3, r0
 800ca88:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800ca8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7f3 fd3a 	bl	8000508 <__aeabi_i2d>
 800ca94:	a30d      	add	r3, pc, #52	; (adr r3, 800cacc <can1_ams_cell_temperatures_t2s5_decode+0x4c>)
 800ca96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9a:	f7f3 fd9f 	bl	80005dc <__aeabi_dmul>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	4610      	mov	r0, r2
 800caa4:	4619      	mov	r1, r3
 800caa6:	f04f 0200 	mov.w	r2, #0
 800caaa:	4b07      	ldr	r3, [pc, #28]	; (800cac8 <can1_ams_cell_temperatures_t2s5_decode+0x48>)
 800caac:	f7f3 fbde 	bl	800026c <__aeabi_dsub>
 800cab0:	4602      	mov	r2, r0
 800cab2:	460b      	mov	r3, r1
 800cab4:	ec43 2b17 	vmov	d7, r2, r3
}
 800cab8:	eeb0 0a47 	vmov.f32	s0, s14
 800cabc:	eef0 0a67 	vmov.f32	s1, s15
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	40240000 	.word	0x40240000
 800cacc:	757928e1 	.word	0x757928e1
 800cad0:	3fa9018e 	.word	0x3fa9018e
 800cad4:	00000000 	.word	0x00000000

0800cad8 <can1_ams_cell_temperatures_t2s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s6_encode(double value)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cae2:	f04f 0200 	mov.w	r2, #0
 800cae6:	4b10      	ldr	r3, [pc, #64]	; (800cb28 <can1_ams_cell_temperatures_t2s6_encode+0x50>)
 800cae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800caec:	f7f3 fbc0 	bl	8000270 <__adddf3>
 800caf0:	4602      	mov	r2, r0
 800caf2:	460b      	mov	r3, r1
 800caf4:	4610      	mov	r0, r2
 800caf6:	4619      	mov	r1, r3
 800caf8:	a309      	add	r3, pc, #36	; (adr r3, 800cb20 <can1_ams_cell_temperatures_t2s6_encode+0x48>)
 800cafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafe:	f7f3 fe97 	bl	8000830 <__aeabi_ddiv>
 800cb02:	4602      	mov	r2, r0
 800cb04:	460b      	mov	r3, r1
 800cb06:	4610      	mov	r0, r2
 800cb08:	4619      	mov	r1, r3
 800cb0a:	f7f4 f817 	bl	8000b3c <__aeabi_d2iz>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	b21b      	sxth	r3, r3
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	f3af 8000 	nop.w
 800cb20:	757928e1 	.word	0x757928e1
 800cb24:	3fa9018e 	.word	0x3fa9018e
 800cb28:	40240000 	.word	0x40240000
 800cb2c:	00000000 	.word	0x00000000

0800cb30 <can1_ams_cell_temperatures_t2s6_decode>:

double can1_ams_cell_temperatures_t2s6_decode(int16_t value)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	4603      	mov	r3, r0
 800cb38:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cb3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7f3 fce2 	bl	8000508 <__aeabi_i2d>
 800cb44:	a30d      	add	r3, pc, #52	; (adr r3, 800cb7c <can1_ams_cell_temperatures_t2s6_decode+0x4c>)
 800cb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4a:	f7f3 fd47 	bl	80005dc <__aeabi_dmul>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	460b      	mov	r3, r1
 800cb52:	4610      	mov	r0, r2
 800cb54:	4619      	mov	r1, r3
 800cb56:	f04f 0200 	mov.w	r2, #0
 800cb5a:	4b07      	ldr	r3, [pc, #28]	; (800cb78 <can1_ams_cell_temperatures_t2s6_decode+0x48>)
 800cb5c:	f7f3 fb86 	bl	800026c <__aeabi_dsub>
 800cb60:	4602      	mov	r2, r0
 800cb62:	460b      	mov	r3, r1
 800cb64:	ec43 2b17 	vmov	d7, r2, r3
}
 800cb68:	eeb0 0a47 	vmov.f32	s0, s14
 800cb6c:	eef0 0a67 	vmov.f32	s1, s15
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	40240000 	.word	0x40240000
 800cb7c:	757928e1 	.word	0x757928e1
 800cb80:	3fa9018e 	.word	0x3fa9018e
 800cb84:	00000000 	.word	0x00000000

0800cb88 <can1_ams_cell_temperatures_t2s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s7_encode(double value)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cb92:	f04f 0200 	mov.w	r2, #0
 800cb96:	4b10      	ldr	r3, [pc, #64]	; (800cbd8 <can1_ams_cell_temperatures_t2s7_encode+0x50>)
 800cb98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb9c:	f7f3 fb68 	bl	8000270 <__adddf3>
 800cba0:	4602      	mov	r2, r0
 800cba2:	460b      	mov	r3, r1
 800cba4:	4610      	mov	r0, r2
 800cba6:	4619      	mov	r1, r3
 800cba8:	a309      	add	r3, pc, #36	; (adr r3, 800cbd0 <can1_ams_cell_temperatures_t2s7_encode+0x48>)
 800cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbae:	f7f3 fe3f 	bl	8000830 <__aeabi_ddiv>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	4619      	mov	r1, r3
 800cbba:	f7f3 ffbf 	bl	8000b3c <__aeabi_d2iz>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	b21b      	sxth	r3, r3
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	f3af 8000 	nop.w
 800cbd0:	757928e1 	.word	0x757928e1
 800cbd4:	3fa9018e 	.word	0x3fa9018e
 800cbd8:	40240000 	.word	0x40240000
 800cbdc:	00000000 	.word	0x00000000

0800cbe0 <can1_ams_cell_temperatures_t2s7_decode>:

double can1_ams_cell_temperatures_t2s7_decode(int16_t value)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cbea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7f3 fc8a 	bl	8000508 <__aeabi_i2d>
 800cbf4:	a30d      	add	r3, pc, #52	; (adr r3, 800cc2c <can1_ams_cell_temperatures_t2s7_decode+0x4c>)
 800cbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfa:	f7f3 fcef 	bl	80005dc <__aeabi_dmul>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	4610      	mov	r0, r2
 800cc04:	4619      	mov	r1, r3
 800cc06:	f04f 0200 	mov.w	r2, #0
 800cc0a:	4b07      	ldr	r3, [pc, #28]	; (800cc28 <can1_ams_cell_temperatures_t2s7_decode+0x48>)
 800cc0c:	f7f3 fb2e 	bl	800026c <__aeabi_dsub>
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	ec43 2b17 	vmov	d7, r2, r3
}
 800cc18:	eeb0 0a47 	vmov.f32	s0, s14
 800cc1c:	eef0 0a67 	vmov.f32	s1, s15
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	40240000 	.word	0x40240000
 800cc2c:	757928e1 	.word	0x757928e1
 800cc30:	3fa9018e 	.word	0x3fa9018e
 800cc34:	00000000 	.word	0x00000000

0800cc38 <can1_ams_cell_temperatures_t2s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s8_encode(double value)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cc42:	f04f 0200 	mov.w	r2, #0
 800cc46:	4b10      	ldr	r3, [pc, #64]	; (800cc88 <can1_ams_cell_temperatures_t2s8_encode+0x50>)
 800cc48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc4c:	f7f3 fb10 	bl	8000270 <__adddf3>
 800cc50:	4602      	mov	r2, r0
 800cc52:	460b      	mov	r3, r1
 800cc54:	4610      	mov	r0, r2
 800cc56:	4619      	mov	r1, r3
 800cc58:	a309      	add	r3, pc, #36	; (adr r3, 800cc80 <can1_ams_cell_temperatures_t2s8_encode+0x48>)
 800cc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5e:	f7f3 fde7 	bl	8000830 <__aeabi_ddiv>
 800cc62:	4602      	mov	r2, r0
 800cc64:	460b      	mov	r3, r1
 800cc66:	4610      	mov	r0, r2
 800cc68:	4619      	mov	r1, r3
 800cc6a:	f7f3 ff67 	bl	8000b3c <__aeabi_d2iz>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	b21b      	sxth	r3, r3
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3708      	adds	r7, #8
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	f3af 8000 	nop.w
 800cc80:	757928e1 	.word	0x757928e1
 800cc84:	3fa9018e 	.word	0x3fa9018e
 800cc88:	40240000 	.word	0x40240000
 800cc8c:	00000000 	.word	0x00000000

0800cc90 <can1_ams_cell_temperatures_t2s8_decode>:

double can1_ams_cell_temperatures_t2s8_decode(int16_t value)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	4603      	mov	r3, r0
 800cc98:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cc9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7f3 fc32 	bl	8000508 <__aeabi_i2d>
 800cca4:	a30d      	add	r3, pc, #52	; (adr r3, 800ccdc <can1_ams_cell_temperatures_t2s8_decode+0x4c>)
 800cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccaa:	f7f3 fc97 	bl	80005dc <__aeabi_dmul>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	f04f 0200 	mov.w	r2, #0
 800ccba:	4b07      	ldr	r3, [pc, #28]	; (800ccd8 <can1_ams_cell_temperatures_t2s8_decode+0x48>)
 800ccbc:	f7f3 fad6 	bl	800026c <__aeabi_dsub>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	ec43 2b17 	vmov	d7, r2, r3
}
 800ccc8:	eeb0 0a47 	vmov.f32	s0, s14
 800cccc:	eef0 0a67 	vmov.f32	s1, s15
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	40240000 	.word	0x40240000
 800ccdc:	757928e1 	.word	0x757928e1
 800cce0:	3fa9018e 	.word	0x3fa9018e
 800cce4:	00000000 	.word	0x00000000

0800cce8 <can1_ams_cell_temperatures_t2s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s9_encode(double value)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ccf2:	f04f 0200 	mov.w	r2, #0
 800ccf6:	4b10      	ldr	r3, [pc, #64]	; (800cd38 <can1_ams_cell_temperatures_t2s9_encode+0x50>)
 800ccf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ccfc:	f7f3 fab8 	bl	8000270 <__adddf3>
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	4610      	mov	r0, r2
 800cd06:	4619      	mov	r1, r3
 800cd08:	a309      	add	r3, pc, #36	; (adr r3, 800cd30 <can1_ams_cell_temperatures_t2s9_encode+0x48>)
 800cd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0e:	f7f3 fd8f 	bl	8000830 <__aeabi_ddiv>
 800cd12:	4602      	mov	r2, r0
 800cd14:	460b      	mov	r3, r1
 800cd16:	4610      	mov	r0, r2
 800cd18:	4619      	mov	r1, r3
 800cd1a:	f7f3 ff0f 	bl	8000b3c <__aeabi_d2iz>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	b21b      	sxth	r3, r3
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3708      	adds	r7, #8
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	f3af 8000 	nop.w
 800cd30:	757928e1 	.word	0x757928e1
 800cd34:	3fa9018e 	.word	0x3fa9018e
 800cd38:	40240000 	.word	0x40240000
 800cd3c:	00000000 	.word	0x00000000

0800cd40 <can1_ams_cell_temperatures_t2s9_decode>:

double can1_ams_cell_temperatures_t2s9_decode(int16_t value)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	4603      	mov	r3, r0
 800cd48:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cd4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7f3 fbda 	bl	8000508 <__aeabi_i2d>
 800cd54:	a30d      	add	r3, pc, #52	; (adr r3, 800cd8c <can1_ams_cell_temperatures_t2s9_decode+0x4c>)
 800cd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5a:	f7f3 fc3f 	bl	80005dc <__aeabi_dmul>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	460b      	mov	r3, r1
 800cd62:	4610      	mov	r0, r2
 800cd64:	4619      	mov	r1, r3
 800cd66:	f04f 0200 	mov.w	r2, #0
 800cd6a:	4b07      	ldr	r3, [pc, #28]	; (800cd88 <can1_ams_cell_temperatures_t2s9_decode+0x48>)
 800cd6c:	f7f3 fa7e 	bl	800026c <__aeabi_dsub>
 800cd70:	4602      	mov	r2, r0
 800cd72:	460b      	mov	r3, r1
 800cd74:	ec43 2b17 	vmov	d7, r2, r3
}
 800cd78:	eeb0 0a47 	vmov.f32	s0, s14
 800cd7c:	eef0 0a67 	vmov.f32	s1, s15
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	40240000 	.word	0x40240000
 800cd8c:	757928e1 	.word	0x757928e1
 800cd90:	3fa9018e 	.word	0x3fa9018e
 800cd94:	00000000 	.word	0x00000000

0800cd98 <can1_ams_cell_temperatures_t2s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s10_encode(double value)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cda2:	f04f 0200 	mov.w	r2, #0
 800cda6:	4b10      	ldr	r3, [pc, #64]	; (800cde8 <can1_ams_cell_temperatures_t2s10_encode+0x50>)
 800cda8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cdac:	f7f3 fa60 	bl	8000270 <__adddf3>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	a309      	add	r3, pc, #36	; (adr r3, 800cde0 <can1_ams_cell_temperatures_t2s10_encode+0x48>)
 800cdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbe:	f7f3 fd37 	bl	8000830 <__aeabi_ddiv>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	4610      	mov	r0, r2
 800cdc8:	4619      	mov	r1, r3
 800cdca:	f7f3 feb7 	bl	8000b3c <__aeabi_d2iz>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	b21b      	sxth	r3, r3
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3708      	adds	r7, #8
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	f3af 8000 	nop.w
 800cde0:	757928e1 	.word	0x757928e1
 800cde4:	3fa9018e 	.word	0x3fa9018e
 800cde8:	40240000 	.word	0x40240000
 800cdec:	00000000 	.word	0x00000000

0800cdf0 <can1_ams_cell_temperatures_t2s10_decode>:

double can1_ams_cell_temperatures_t2s10_decode(int16_t value)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cdfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7f3 fb82 	bl	8000508 <__aeabi_i2d>
 800ce04:	a30d      	add	r3, pc, #52	; (adr r3, 800ce3c <can1_ams_cell_temperatures_t2s10_decode+0x4c>)
 800ce06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0a:	f7f3 fbe7 	bl	80005dc <__aeabi_dmul>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	460b      	mov	r3, r1
 800ce12:	4610      	mov	r0, r2
 800ce14:	4619      	mov	r1, r3
 800ce16:	f04f 0200 	mov.w	r2, #0
 800ce1a:	4b07      	ldr	r3, [pc, #28]	; (800ce38 <can1_ams_cell_temperatures_t2s10_decode+0x48>)
 800ce1c:	f7f3 fa26 	bl	800026c <__aeabi_dsub>
 800ce20:	4602      	mov	r2, r0
 800ce22:	460b      	mov	r3, r1
 800ce24:	ec43 2b17 	vmov	d7, r2, r3
}
 800ce28:	eeb0 0a47 	vmov.f32	s0, s14
 800ce2c:	eef0 0a67 	vmov.f32	s1, s15
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	40240000 	.word	0x40240000
 800ce3c:	757928e1 	.word	0x757928e1
 800ce40:	3fa9018e 	.word	0x3fa9018e
 800ce44:	00000000 	.word	0x00000000

0800ce48 <can1_ams_cell_temperatures_t2s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s11_encode(double value)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ce52:	f04f 0200 	mov.w	r2, #0
 800ce56:	4b10      	ldr	r3, [pc, #64]	; (800ce98 <can1_ams_cell_temperatures_t2s11_encode+0x50>)
 800ce58:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ce5c:	f7f3 fa08 	bl	8000270 <__adddf3>
 800ce60:	4602      	mov	r2, r0
 800ce62:	460b      	mov	r3, r1
 800ce64:	4610      	mov	r0, r2
 800ce66:	4619      	mov	r1, r3
 800ce68:	a309      	add	r3, pc, #36	; (adr r3, 800ce90 <can1_ams_cell_temperatures_t2s11_encode+0x48>)
 800ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6e:	f7f3 fcdf 	bl	8000830 <__aeabi_ddiv>
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	4610      	mov	r0, r2
 800ce78:	4619      	mov	r1, r3
 800ce7a:	f7f3 fe5f 	bl	8000b3c <__aeabi_d2iz>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	b21b      	sxth	r3, r3
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3708      	adds	r7, #8
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	f3af 8000 	nop.w
 800ce90:	757928e1 	.word	0x757928e1
 800ce94:	3fa9018e 	.word	0x3fa9018e
 800ce98:	40240000 	.word	0x40240000
 800ce9c:	00000000 	.word	0x00000000

0800cea0 <can1_ams_cell_temperatures_t2s11_decode>:

double can1_ams_cell_temperatures_t2s11_decode(int16_t value)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	4603      	mov	r3, r0
 800cea8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800ceaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7f3 fb2a 	bl	8000508 <__aeabi_i2d>
 800ceb4:	a30d      	add	r3, pc, #52	; (adr r3, 800ceec <can1_ams_cell_temperatures_t2s11_decode+0x4c>)
 800ceb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceba:	f7f3 fb8f 	bl	80005dc <__aeabi_dmul>
 800cebe:	4602      	mov	r2, r0
 800cec0:	460b      	mov	r3, r1
 800cec2:	4610      	mov	r0, r2
 800cec4:	4619      	mov	r1, r3
 800cec6:	f04f 0200 	mov.w	r2, #0
 800ceca:	4b07      	ldr	r3, [pc, #28]	; (800cee8 <can1_ams_cell_temperatures_t2s11_decode+0x48>)
 800cecc:	f7f3 f9ce 	bl	800026c <__aeabi_dsub>
 800ced0:	4602      	mov	r2, r0
 800ced2:	460b      	mov	r3, r1
 800ced4:	ec43 2b17 	vmov	d7, r2, r3
}
 800ced8:	eeb0 0a47 	vmov.f32	s0, s14
 800cedc:	eef0 0a67 	vmov.f32	s1, s15
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	40240000 	.word	0x40240000
 800ceec:	757928e1 	.word	0x757928e1
 800cef0:	3fa9018e 	.word	0x3fa9018e
 800cef4:	00000000 	.word	0x00000000

0800cef8 <can1_ams_cell_temperatures_t2s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s12_encode(double value)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cf02:	f04f 0200 	mov.w	r2, #0
 800cf06:	4b10      	ldr	r3, [pc, #64]	; (800cf48 <can1_ams_cell_temperatures_t2s12_encode+0x50>)
 800cf08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf0c:	f7f3 f9b0 	bl	8000270 <__adddf3>
 800cf10:	4602      	mov	r2, r0
 800cf12:	460b      	mov	r3, r1
 800cf14:	4610      	mov	r0, r2
 800cf16:	4619      	mov	r1, r3
 800cf18:	a309      	add	r3, pc, #36	; (adr r3, 800cf40 <can1_ams_cell_temperatures_t2s12_encode+0x48>)
 800cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1e:	f7f3 fc87 	bl	8000830 <__aeabi_ddiv>
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	4610      	mov	r0, r2
 800cf28:	4619      	mov	r1, r3
 800cf2a:	f7f3 fe07 	bl	8000b3c <__aeabi_d2iz>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	b21b      	sxth	r3, r3
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3708      	adds	r7, #8
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	f3af 8000 	nop.w
 800cf40:	757928e1 	.word	0x757928e1
 800cf44:	3fa9018e 	.word	0x3fa9018e
 800cf48:	40240000 	.word	0x40240000
 800cf4c:	00000000 	.word	0x00000000

0800cf50 <can1_ams_cell_temperatures_t2s12_decode>:

double can1_ams_cell_temperatures_t2s12_decode(int16_t value)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	4603      	mov	r3, r0
 800cf58:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cf5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7f3 fad2 	bl	8000508 <__aeabi_i2d>
 800cf64:	a30d      	add	r3, pc, #52	; (adr r3, 800cf9c <can1_ams_cell_temperatures_t2s12_decode+0x4c>)
 800cf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6a:	f7f3 fb37 	bl	80005dc <__aeabi_dmul>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	460b      	mov	r3, r1
 800cf72:	4610      	mov	r0, r2
 800cf74:	4619      	mov	r1, r3
 800cf76:	f04f 0200 	mov.w	r2, #0
 800cf7a:	4b07      	ldr	r3, [pc, #28]	; (800cf98 <can1_ams_cell_temperatures_t2s12_decode+0x48>)
 800cf7c:	f7f3 f976 	bl	800026c <__aeabi_dsub>
 800cf80:	4602      	mov	r2, r0
 800cf82:	460b      	mov	r3, r1
 800cf84:	ec43 2b17 	vmov	d7, r2, r3
}
 800cf88:	eeb0 0a47 	vmov.f32	s0, s14
 800cf8c:	eef0 0a67 	vmov.f32	s1, s15
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	40240000 	.word	0x40240000
 800cf9c:	757928e1 	.word	0x757928e1
 800cfa0:	3fa9018e 	.word	0x3fa9018e
 800cfa4:	00000000 	.word	0x00000000

0800cfa8 <can1_ams_cell_temperatures_t3s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s1_encode(double value)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cfb2:	f04f 0200 	mov.w	r2, #0
 800cfb6:	4b10      	ldr	r3, [pc, #64]	; (800cff8 <can1_ams_cell_temperatures_t3s1_encode+0x50>)
 800cfb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cfbc:	f7f3 f958 	bl	8000270 <__adddf3>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	4610      	mov	r0, r2
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	a309      	add	r3, pc, #36	; (adr r3, 800cff0 <can1_ams_cell_temperatures_t3s1_encode+0x48>)
 800cfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfce:	f7f3 fc2f 	bl	8000830 <__aeabi_ddiv>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	4610      	mov	r0, r2
 800cfd8:	4619      	mov	r1, r3
 800cfda:	f7f3 fdaf 	bl	8000b3c <__aeabi_d2iz>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	b21b      	sxth	r3, r3
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3708      	adds	r7, #8
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	f3af 8000 	nop.w
 800cff0:	757928e1 	.word	0x757928e1
 800cff4:	3fa9018e 	.word	0x3fa9018e
 800cff8:	40240000 	.word	0x40240000
 800cffc:	00000000 	.word	0x00000000

0800d000 <can1_ams_cell_temperatures_t3s1_decode>:

double can1_ams_cell_temperatures_t3s1_decode(int16_t value)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	4603      	mov	r3, r0
 800d008:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d00a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d00e:	4618      	mov	r0, r3
 800d010:	f7f3 fa7a 	bl	8000508 <__aeabi_i2d>
 800d014:	a30d      	add	r3, pc, #52	; (adr r3, 800d04c <can1_ams_cell_temperatures_t3s1_decode+0x4c>)
 800d016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01a:	f7f3 fadf 	bl	80005dc <__aeabi_dmul>
 800d01e:	4602      	mov	r2, r0
 800d020:	460b      	mov	r3, r1
 800d022:	4610      	mov	r0, r2
 800d024:	4619      	mov	r1, r3
 800d026:	f04f 0200 	mov.w	r2, #0
 800d02a:	4b07      	ldr	r3, [pc, #28]	; (800d048 <can1_ams_cell_temperatures_t3s1_decode+0x48>)
 800d02c:	f7f3 f91e 	bl	800026c <__aeabi_dsub>
 800d030:	4602      	mov	r2, r0
 800d032:	460b      	mov	r3, r1
 800d034:	ec43 2b17 	vmov	d7, r2, r3
}
 800d038:	eeb0 0a47 	vmov.f32	s0, s14
 800d03c:	eef0 0a67 	vmov.f32	s1, s15
 800d040:	3708      	adds	r7, #8
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	40240000 	.word	0x40240000
 800d04c:	757928e1 	.word	0x757928e1
 800d050:	3fa9018e 	.word	0x3fa9018e
 800d054:	00000000 	.word	0x00000000

0800d058 <can1_ams_cell_temperatures_t3s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s2_encode(double value)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d062:	f04f 0200 	mov.w	r2, #0
 800d066:	4b10      	ldr	r3, [pc, #64]	; (800d0a8 <can1_ams_cell_temperatures_t3s2_encode+0x50>)
 800d068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d06c:	f7f3 f900 	bl	8000270 <__adddf3>
 800d070:	4602      	mov	r2, r0
 800d072:	460b      	mov	r3, r1
 800d074:	4610      	mov	r0, r2
 800d076:	4619      	mov	r1, r3
 800d078:	a309      	add	r3, pc, #36	; (adr r3, 800d0a0 <can1_ams_cell_temperatures_t3s2_encode+0x48>)
 800d07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07e:	f7f3 fbd7 	bl	8000830 <__aeabi_ddiv>
 800d082:	4602      	mov	r2, r0
 800d084:	460b      	mov	r3, r1
 800d086:	4610      	mov	r0, r2
 800d088:	4619      	mov	r1, r3
 800d08a:	f7f3 fd57 	bl	8000b3c <__aeabi_d2iz>
 800d08e:	4603      	mov	r3, r0
 800d090:	b21b      	sxth	r3, r3
}
 800d092:	4618      	mov	r0, r3
 800d094:	3708      	adds	r7, #8
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	f3af 8000 	nop.w
 800d0a0:	757928e1 	.word	0x757928e1
 800d0a4:	3fa9018e 	.word	0x3fa9018e
 800d0a8:	40240000 	.word	0x40240000
 800d0ac:	00000000 	.word	0x00000000

0800d0b0 <can1_ams_cell_temperatures_t3s2_decode>:

double can1_ams_cell_temperatures_t3s2_decode(int16_t value)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d0ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7f3 fa22 	bl	8000508 <__aeabi_i2d>
 800d0c4:	a30d      	add	r3, pc, #52	; (adr r3, 800d0fc <can1_ams_cell_temperatures_t3s2_decode+0x4c>)
 800d0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ca:	f7f3 fa87 	bl	80005dc <__aeabi_dmul>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	4610      	mov	r0, r2
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	f04f 0200 	mov.w	r2, #0
 800d0da:	4b07      	ldr	r3, [pc, #28]	; (800d0f8 <can1_ams_cell_temperatures_t3s2_decode+0x48>)
 800d0dc:	f7f3 f8c6 	bl	800026c <__aeabi_dsub>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d0e8:	eeb0 0a47 	vmov.f32	s0, s14
 800d0ec:	eef0 0a67 	vmov.f32	s1, s15
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	40240000 	.word	0x40240000
 800d0fc:	757928e1 	.word	0x757928e1
 800d100:	3fa9018e 	.word	0x3fa9018e
 800d104:	00000000 	.word	0x00000000

0800d108 <can1_ams_cell_temperatures_t3s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s3_encode(double value)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d112:	f04f 0200 	mov.w	r2, #0
 800d116:	4b10      	ldr	r3, [pc, #64]	; (800d158 <can1_ams_cell_temperatures_t3s3_encode+0x50>)
 800d118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d11c:	f7f3 f8a8 	bl	8000270 <__adddf3>
 800d120:	4602      	mov	r2, r0
 800d122:	460b      	mov	r3, r1
 800d124:	4610      	mov	r0, r2
 800d126:	4619      	mov	r1, r3
 800d128:	a309      	add	r3, pc, #36	; (adr r3, 800d150 <can1_ams_cell_temperatures_t3s3_encode+0x48>)
 800d12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12e:	f7f3 fb7f 	bl	8000830 <__aeabi_ddiv>
 800d132:	4602      	mov	r2, r0
 800d134:	460b      	mov	r3, r1
 800d136:	4610      	mov	r0, r2
 800d138:	4619      	mov	r1, r3
 800d13a:	f7f3 fcff 	bl	8000b3c <__aeabi_d2iz>
 800d13e:	4603      	mov	r3, r0
 800d140:	b21b      	sxth	r3, r3
}
 800d142:	4618      	mov	r0, r3
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	f3af 8000 	nop.w
 800d150:	757928e1 	.word	0x757928e1
 800d154:	3fa9018e 	.word	0x3fa9018e
 800d158:	40240000 	.word	0x40240000
 800d15c:	00000000 	.word	0x00000000

0800d160 <can1_ams_cell_temperatures_t3s3_decode>:

double can1_ams_cell_temperatures_t3s3_decode(int16_t value)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	4603      	mov	r3, r0
 800d168:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d16a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d16e:	4618      	mov	r0, r3
 800d170:	f7f3 f9ca 	bl	8000508 <__aeabi_i2d>
 800d174:	a30d      	add	r3, pc, #52	; (adr r3, 800d1ac <can1_ams_cell_temperatures_t3s3_decode+0x4c>)
 800d176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17a:	f7f3 fa2f 	bl	80005dc <__aeabi_dmul>
 800d17e:	4602      	mov	r2, r0
 800d180:	460b      	mov	r3, r1
 800d182:	4610      	mov	r0, r2
 800d184:	4619      	mov	r1, r3
 800d186:	f04f 0200 	mov.w	r2, #0
 800d18a:	4b07      	ldr	r3, [pc, #28]	; (800d1a8 <can1_ams_cell_temperatures_t3s3_decode+0x48>)
 800d18c:	f7f3 f86e 	bl	800026c <__aeabi_dsub>
 800d190:	4602      	mov	r2, r0
 800d192:	460b      	mov	r3, r1
 800d194:	ec43 2b17 	vmov	d7, r2, r3
}
 800d198:	eeb0 0a47 	vmov.f32	s0, s14
 800d19c:	eef0 0a67 	vmov.f32	s1, s15
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	40240000 	.word	0x40240000
 800d1ac:	757928e1 	.word	0x757928e1
 800d1b0:	3fa9018e 	.word	0x3fa9018e
 800d1b4:	00000000 	.word	0x00000000

0800d1b8 <can1_ams_cell_temperatures_t3s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s4_encode(double value)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d1c2:	f04f 0200 	mov.w	r2, #0
 800d1c6:	4b10      	ldr	r3, [pc, #64]	; (800d208 <can1_ams_cell_temperatures_t3s4_encode+0x50>)
 800d1c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1cc:	f7f3 f850 	bl	8000270 <__adddf3>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	4610      	mov	r0, r2
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	a309      	add	r3, pc, #36	; (adr r3, 800d200 <can1_ams_cell_temperatures_t3s4_encode+0x48>)
 800d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1de:	f7f3 fb27 	bl	8000830 <__aeabi_ddiv>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	4610      	mov	r0, r2
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	f7f3 fca7 	bl	8000b3c <__aeabi_d2iz>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	b21b      	sxth	r3, r3
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3708      	adds	r7, #8
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	f3af 8000 	nop.w
 800d200:	757928e1 	.word	0x757928e1
 800d204:	3fa9018e 	.word	0x3fa9018e
 800d208:	40240000 	.word	0x40240000
 800d20c:	00000000 	.word	0x00000000

0800d210 <can1_ams_cell_temperatures_t3s4_decode>:

double can1_ams_cell_temperatures_t3s4_decode(int16_t value)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	4603      	mov	r3, r0
 800d218:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d21a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d21e:	4618      	mov	r0, r3
 800d220:	f7f3 f972 	bl	8000508 <__aeabi_i2d>
 800d224:	a30d      	add	r3, pc, #52	; (adr r3, 800d25c <can1_ams_cell_temperatures_t3s4_decode+0x4c>)
 800d226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22a:	f7f3 f9d7 	bl	80005dc <__aeabi_dmul>
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	4610      	mov	r0, r2
 800d234:	4619      	mov	r1, r3
 800d236:	f04f 0200 	mov.w	r2, #0
 800d23a:	4b07      	ldr	r3, [pc, #28]	; (800d258 <can1_ams_cell_temperatures_t3s4_decode+0x48>)
 800d23c:	f7f3 f816 	bl	800026c <__aeabi_dsub>
 800d240:	4602      	mov	r2, r0
 800d242:	460b      	mov	r3, r1
 800d244:	ec43 2b17 	vmov	d7, r2, r3
}
 800d248:	eeb0 0a47 	vmov.f32	s0, s14
 800d24c:	eef0 0a67 	vmov.f32	s1, s15
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	40240000 	.word	0x40240000
 800d25c:	757928e1 	.word	0x757928e1
 800d260:	3fa9018e 	.word	0x3fa9018e
 800d264:	00000000 	.word	0x00000000

0800d268 <can1_ams_cell_temperatures_t3s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s5_encode(double value)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d272:	f04f 0200 	mov.w	r2, #0
 800d276:	4b10      	ldr	r3, [pc, #64]	; (800d2b8 <can1_ams_cell_temperatures_t3s5_encode+0x50>)
 800d278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d27c:	f7f2 fff8 	bl	8000270 <__adddf3>
 800d280:	4602      	mov	r2, r0
 800d282:	460b      	mov	r3, r1
 800d284:	4610      	mov	r0, r2
 800d286:	4619      	mov	r1, r3
 800d288:	a309      	add	r3, pc, #36	; (adr r3, 800d2b0 <can1_ams_cell_temperatures_t3s5_encode+0x48>)
 800d28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28e:	f7f3 facf 	bl	8000830 <__aeabi_ddiv>
 800d292:	4602      	mov	r2, r0
 800d294:	460b      	mov	r3, r1
 800d296:	4610      	mov	r0, r2
 800d298:	4619      	mov	r1, r3
 800d29a:	f7f3 fc4f 	bl	8000b3c <__aeabi_d2iz>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	b21b      	sxth	r3, r3
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	f3af 8000 	nop.w
 800d2b0:	757928e1 	.word	0x757928e1
 800d2b4:	3fa9018e 	.word	0x3fa9018e
 800d2b8:	40240000 	.word	0x40240000
 800d2bc:	00000000 	.word	0x00000000

0800d2c0 <can1_ams_cell_temperatures_t3s5_decode>:

double can1_ams_cell_temperatures_t3s5_decode(int16_t value)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d2ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7f3 f91a 	bl	8000508 <__aeabi_i2d>
 800d2d4:	a30d      	add	r3, pc, #52	; (adr r3, 800d30c <can1_ams_cell_temperatures_t3s5_decode+0x4c>)
 800d2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2da:	f7f3 f97f 	bl	80005dc <__aeabi_dmul>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	4610      	mov	r0, r2
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	f04f 0200 	mov.w	r2, #0
 800d2ea:	4b07      	ldr	r3, [pc, #28]	; (800d308 <can1_ams_cell_temperatures_t3s5_decode+0x48>)
 800d2ec:	f7f2 ffbe 	bl	800026c <__aeabi_dsub>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d2f8:	eeb0 0a47 	vmov.f32	s0, s14
 800d2fc:	eef0 0a67 	vmov.f32	s1, s15
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	40240000 	.word	0x40240000
 800d30c:	757928e1 	.word	0x757928e1
 800d310:	3fa9018e 	.word	0x3fa9018e
 800d314:	00000000 	.word	0x00000000

0800d318 <can1_ams_cell_temperatures_t3s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s6_encode(double value)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d322:	f04f 0200 	mov.w	r2, #0
 800d326:	4b10      	ldr	r3, [pc, #64]	; (800d368 <can1_ams_cell_temperatures_t3s6_encode+0x50>)
 800d328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d32c:	f7f2 ffa0 	bl	8000270 <__adddf3>
 800d330:	4602      	mov	r2, r0
 800d332:	460b      	mov	r3, r1
 800d334:	4610      	mov	r0, r2
 800d336:	4619      	mov	r1, r3
 800d338:	a309      	add	r3, pc, #36	; (adr r3, 800d360 <can1_ams_cell_temperatures_t3s6_encode+0x48>)
 800d33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33e:	f7f3 fa77 	bl	8000830 <__aeabi_ddiv>
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	4610      	mov	r0, r2
 800d348:	4619      	mov	r1, r3
 800d34a:	f7f3 fbf7 	bl	8000b3c <__aeabi_d2iz>
 800d34e:	4603      	mov	r3, r0
 800d350:	b21b      	sxth	r3, r3
}
 800d352:	4618      	mov	r0, r3
 800d354:	3708      	adds	r7, #8
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	f3af 8000 	nop.w
 800d360:	757928e1 	.word	0x757928e1
 800d364:	3fa9018e 	.word	0x3fa9018e
 800d368:	40240000 	.word	0x40240000
 800d36c:	00000000 	.word	0x00000000

0800d370 <can1_ams_cell_temperatures_t3s6_decode>:

double can1_ams_cell_temperatures_t3s6_decode(int16_t value)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	4603      	mov	r3, r0
 800d378:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d37a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d37e:	4618      	mov	r0, r3
 800d380:	f7f3 f8c2 	bl	8000508 <__aeabi_i2d>
 800d384:	a30d      	add	r3, pc, #52	; (adr r3, 800d3bc <can1_ams_cell_temperatures_t3s6_decode+0x4c>)
 800d386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38a:	f7f3 f927 	bl	80005dc <__aeabi_dmul>
 800d38e:	4602      	mov	r2, r0
 800d390:	460b      	mov	r3, r1
 800d392:	4610      	mov	r0, r2
 800d394:	4619      	mov	r1, r3
 800d396:	f04f 0200 	mov.w	r2, #0
 800d39a:	4b07      	ldr	r3, [pc, #28]	; (800d3b8 <can1_ams_cell_temperatures_t3s6_decode+0x48>)
 800d39c:	f7f2 ff66 	bl	800026c <__aeabi_dsub>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d3a8:	eeb0 0a47 	vmov.f32	s0, s14
 800d3ac:	eef0 0a67 	vmov.f32	s1, s15
 800d3b0:	3708      	adds	r7, #8
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	40240000 	.word	0x40240000
 800d3bc:	757928e1 	.word	0x757928e1
 800d3c0:	3fa9018e 	.word	0x3fa9018e
 800d3c4:	00000000 	.word	0x00000000

0800d3c8 <can1_ams_cell_temperatures_t3s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s7_encode(double value)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d3d2:	f04f 0200 	mov.w	r2, #0
 800d3d6:	4b10      	ldr	r3, [pc, #64]	; (800d418 <can1_ams_cell_temperatures_t3s7_encode+0x50>)
 800d3d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d3dc:	f7f2 ff48 	bl	8000270 <__adddf3>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	a309      	add	r3, pc, #36	; (adr r3, 800d410 <can1_ams_cell_temperatures_t3s7_encode+0x48>)
 800d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ee:	f7f3 fa1f 	bl	8000830 <__aeabi_ddiv>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	4610      	mov	r0, r2
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	f7f3 fb9f 	bl	8000b3c <__aeabi_d2iz>
 800d3fe:	4603      	mov	r3, r0
 800d400:	b21b      	sxth	r3, r3
}
 800d402:	4618      	mov	r0, r3
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	f3af 8000 	nop.w
 800d410:	757928e1 	.word	0x757928e1
 800d414:	3fa9018e 	.word	0x3fa9018e
 800d418:	40240000 	.word	0x40240000
 800d41c:	00000000 	.word	0x00000000

0800d420 <can1_ams_cell_temperatures_t3s7_decode>:

double can1_ams_cell_temperatures_t3s7_decode(int16_t value)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	4603      	mov	r3, r0
 800d428:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d42a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d42e:	4618      	mov	r0, r3
 800d430:	f7f3 f86a 	bl	8000508 <__aeabi_i2d>
 800d434:	a30d      	add	r3, pc, #52	; (adr r3, 800d46c <can1_ams_cell_temperatures_t3s7_decode+0x4c>)
 800d436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43a:	f7f3 f8cf 	bl	80005dc <__aeabi_dmul>
 800d43e:	4602      	mov	r2, r0
 800d440:	460b      	mov	r3, r1
 800d442:	4610      	mov	r0, r2
 800d444:	4619      	mov	r1, r3
 800d446:	f04f 0200 	mov.w	r2, #0
 800d44a:	4b07      	ldr	r3, [pc, #28]	; (800d468 <can1_ams_cell_temperatures_t3s7_decode+0x48>)
 800d44c:	f7f2 ff0e 	bl	800026c <__aeabi_dsub>
 800d450:	4602      	mov	r2, r0
 800d452:	460b      	mov	r3, r1
 800d454:	ec43 2b17 	vmov	d7, r2, r3
}
 800d458:	eeb0 0a47 	vmov.f32	s0, s14
 800d45c:	eef0 0a67 	vmov.f32	s1, s15
 800d460:	3708      	adds	r7, #8
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	40240000 	.word	0x40240000
 800d46c:	757928e1 	.word	0x757928e1
 800d470:	3fa9018e 	.word	0x3fa9018e
 800d474:	00000000 	.word	0x00000000

0800d478 <can1_ams_cell_temperatures_t3s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s8_encode(double value)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d482:	f04f 0200 	mov.w	r2, #0
 800d486:	4b10      	ldr	r3, [pc, #64]	; (800d4c8 <can1_ams_cell_temperatures_t3s8_encode+0x50>)
 800d488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d48c:	f7f2 fef0 	bl	8000270 <__adddf3>
 800d490:	4602      	mov	r2, r0
 800d492:	460b      	mov	r3, r1
 800d494:	4610      	mov	r0, r2
 800d496:	4619      	mov	r1, r3
 800d498:	a309      	add	r3, pc, #36	; (adr r3, 800d4c0 <can1_ams_cell_temperatures_t3s8_encode+0x48>)
 800d49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49e:	f7f3 f9c7 	bl	8000830 <__aeabi_ddiv>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	4610      	mov	r0, r2
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	f7f3 fb47 	bl	8000b3c <__aeabi_d2iz>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	b21b      	sxth	r3, r3
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3708      	adds	r7, #8
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	f3af 8000 	nop.w
 800d4c0:	757928e1 	.word	0x757928e1
 800d4c4:	3fa9018e 	.word	0x3fa9018e
 800d4c8:	40240000 	.word	0x40240000
 800d4cc:	00000000 	.word	0x00000000

0800d4d0 <can1_ams_cell_temperatures_t3s8_decode>:

double can1_ams_cell_temperatures_t3s8_decode(int16_t value)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d4da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7f3 f812 	bl	8000508 <__aeabi_i2d>
 800d4e4:	a30d      	add	r3, pc, #52	; (adr r3, 800d51c <can1_ams_cell_temperatures_t3s8_decode+0x4c>)
 800d4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ea:	f7f3 f877 	bl	80005dc <__aeabi_dmul>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	4610      	mov	r0, r2
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	f04f 0200 	mov.w	r2, #0
 800d4fa:	4b07      	ldr	r3, [pc, #28]	; (800d518 <can1_ams_cell_temperatures_t3s8_decode+0x48>)
 800d4fc:	f7f2 feb6 	bl	800026c <__aeabi_dsub>
 800d500:	4602      	mov	r2, r0
 800d502:	460b      	mov	r3, r1
 800d504:	ec43 2b17 	vmov	d7, r2, r3
}
 800d508:	eeb0 0a47 	vmov.f32	s0, s14
 800d50c:	eef0 0a67 	vmov.f32	s1, s15
 800d510:	3708      	adds	r7, #8
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	40240000 	.word	0x40240000
 800d51c:	757928e1 	.word	0x757928e1
 800d520:	3fa9018e 	.word	0x3fa9018e
 800d524:	00000000 	.word	0x00000000

0800d528 <can1_ams_cell_temperatures_t3s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s9_encode(double value)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d532:	f04f 0200 	mov.w	r2, #0
 800d536:	4b10      	ldr	r3, [pc, #64]	; (800d578 <can1_ams_cell_temperatures_t3s9_encode+0x50>)
 800d538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d53c:	f7f2 fe98 	bl	8000270 <__adddf3>
 800d540:	4602      	mov	r2, r0
 800d542:	460b      	mov	r3, r1
 800d544:	4610      	mov	r0, r2
 800d546:	4619      	mov	r1, r3
 800d548:	a309      	add	r3, pc, #36	; (adr r3, 800d570 <can1_ams_cell_temperatures_t3s9_encode+0x48>)
 800d54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54e:	f7f3 f96f 	bl	8000830 <__aeabi_ddiv>
 800d552:	4602      	mov	r2, r0
 800d554:	460b      	mov	r3, r1
 800d556:	4610      	mov	r0, r2
 800d558:	4619      	mov	r1, r3
 800d55a:	f7f3 faef 	bl	8000b3c <__aeabi_d2iz>
 800d55e:	4603      	mov	r3, r0
 800d560:	b21b      	sxth	r3, r3
}
 800d562:	4618      	mov	r0, r3
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	f3af 8000 	nop.w
 800d570:	757928e1 	.word	0x757928e1
 800d574:	3fa9018e 	.word	0x3fa9018e
 800d578:	40240000 	.word	0x40240000
 800d57c:	00000000 	.word	0x00000000

0800d580 <can1_ams_cell_temperatures_t3s9_decode>:

double can1_ams_cell_temperatures_t3s9_decode(int16_t value)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	4603      	mov	r3, r0
 800d588:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d58a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d58e:	4618      	mov	r0, r3
 800d590:	f7f2 ffba 	bl	8000508 <__aeabi_i2d>
 800d594:	a30d      	add	r3, pc, #52	; (adr r3, 800d5cc <can1_ams_cell_temperatures_t3s9_decode+0x4c>)
 800d596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59a:	f7f3 f81f 	bl	80005dc <__aeabi_dmul>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	4610      	mov	r0, r2
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	f04f 0200 	mov.w	r2, #0
 800d5aa:	4b07      	ldr	r3, [pc, #28]	; (800d5c8 <can1_ams_cell_temperatures_t3s9_decode+0x48>)
 800d5ac:	f7f2 fe5e 	bl	800026c <__aeabi_dsub>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d5b8:	eeb0 0a47 	vmov.f32	s0, s14
 800d5bc:	eef0 0a67 	vmov.f32	s1, s15
 800d5c0:	3708      	adds	r7, #8
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	40240000 	.word	0x40240000
 800d5cc:	757928e1 	.word	0x757928e1
 800d5d0:	3fa9018e 	.word	0x3fa9018e
 800d5d4:	00000000 	.word	0x00000000

0800d5d8 <can1_ams_cell_temperatures_t3s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s10_encode(double value)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d5e2:	f04f 0200 	mov.w	r2, #0
 800d5e6:	4b10      	ldr	r3, [pc, #64]	; (800d628 <can1_ams_cell_temperatures_t3s10_encode+0x50>)
 800d5e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d5ec:	f7f2 fe40 	bl	8000270 <__adddf3>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	4610      	mov	r0, r2
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	a309      	add	r3, pc, #36	; (adr r3, 800d620 <can1_ams_cell_temperatures_t3s10_encode+0x48>)
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	f7f3 f917 	bl	8000830 <__aeabi_ddiv>
 800d602:	4602      	mov	r2, r0
 800d604:	460b      	mov	r3, r1
 800d606:	4610      	mov	r0, r2
 800d608:	4619      	mov	r1, r3
 800d60a:	f7f3 fa97 	bl	8000b3c <__aeabi_d2iz>
 800d60e:	4603      	mov	r3, r0
 800d610:	b21b      	sxth	r3, r3
}
 800d612:	4618      	mov	r0, r3
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	f3af 8000 	nop.w
 800d620:	757928e1 	.word	0x757928e1
 800d624:	3fa9018e 	.word	0x3fa9018e
 800d628:	40240000 	.word	0x40240000
 800d62c:	00000000 	.word	0x00000000

0800d630 <can1_ams_cell_temperatures_t3s10_decode>:

double can1_ams_cell_temperatures_t3s10_decode(int16_t value)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	4603      	mov	r3, r0
 800d638:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d63a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d63e:	4618      	mov	r0, r3
 800d640:	f7f2 ff62 	bl	8000508 <__aeabi_i2d>
 800d644:	a30d      	add	r3, pc, #52	; (adr r3, 800d67c <can1_ams_cell_temperatures_t3s10_decode+0x4c>)
 800d646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64a:	f7f2 ffc7 	bl	80005dc <__aeabi_dmul>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	4610      	mov	r0, r2
 800d654:	4619      	mov	r1, r3
 800d656:	f04f 0200 	mov.w	r2, #0
 800d65a:	4b07      	ldr	r3, [pc, #28]	; (800d678 <can1_ams_cell_temperatures_t3s10_decode+0x48>)
 800d65c:	f7f2 fe06 	bl	800026c <__aeabi_dsub>
 800d660:	4602      	mov	r2, r0
 800d662:	460b      	mov	r3, r1
 800d664:	ec43 2b17 	vmov	d7, r2, r3
}
 800d668:	eeb0 0a47 	vmov.f32	s0, s14
 800d66c:	eef0 0a67 	vmov.f32	s1, s15
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	40240000 	.word	0x40240000
 800d67c:	757928e1 	.word	0x757928e1
 800d680:	3fa9018e 	.word	0x3fa9018e
 800d684:	00000000 	.word	0x00000000

0800d688 <can1_ams_cell_temperatures_t3s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s11_encode(double value)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d692:	f04f 0200 	mov.w	r2, #0
 800d696:	4b10      	ldr	r3, [pc, #64]	; (800d6d8 <can1_ams_cell_temperatures_t3s11_encode+0x50>)
 800d698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d69c:	f7f2 fde8 	bl	8000270 <__adddf3>
 800d6a0:	4602      	mov	r2, r0
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	4610      	mov	r0, r2
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	a309      	add	r3, pc, #36	; (adr r3, 800d6d0 <can1_ams_cell_temperatures_t3s11_encode+0x48>)
 800d6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ae:	f7f3 f8bf 	bl	8000830 <__aeabi_ddiv>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	4610      	mov	r0, r2
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	f7f3 fa3f 	bl	8000b3c <__aeabi_d2iz>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	b21b      	sxth	r3, r3
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3708      	adds	r7, #8
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	f3af 8000 	nop.w
 800d6d0:	757928e1 	.word	0x757928e1
 800d6d4:	3fa9018e 	.word	0x3fa9018e
 800d6d8:	40240000 	.word	0x40240000
 800d6dc:	00000000 	.word	0x00000000

0800d6e0 <can1_ams_cell_temperatures_t3s11_decode>:

double can1_ams_cell_temperatures_t3s11_decode(int16_t value)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d6ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7f2 ff0a 	bl	8000508 <__aeabi_i2d>
 800d6f4:	a30d      	add	r3, pc, #52	; (adr r3, 800d72c <can1_ams_cell_temperatures_t3s11_decode+0x4c>)
 800d6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fa:	f7f2 ff6f 	bl	80005dc <__aeabi_dmul>
 800d6fe:	4602      	mov	r2, r0
 800d700:	460b      	mov	r3, r1
 800d702:	4610      	mov	r0, r2
 800d704:	4619      	mov	r1, r3
 800d706:	f04f 0200 	mov.w	r2, #0
 800d70a:	4b07      	ldr	r3, [pc, #28]	; (800d728 <can1_ams_cell_temperatures_t3s11_decode+0x48>)
 800d70c:	f7f2 fdae 	bl	800026c <__aeabi_dsub>
 800d710:	4602      	mov	r2, r0
 800d712:	460b      	mov	r3, r1
 800d714:	ec43 2b17 	vmov	d7, r2, r3
}
 800d718:	eeb0 0a47 	vmov.f32	s0, s14
 800d71c:	eef0 0a67 	vmov.f32	s1, s15
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	40240000 	.word	0x40240000
 800d72c:	757928e1 	.word	0x757928e1
 800d730:	3fa9018e 	.word	0x3fa9018e
 800d734:	00000000 	.word	0x00000000

0800d738 <can1_ams_cell_temperatures_t3s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s12_encode(double value)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d742:	f04f 0200 	mov.w	r2, #0
 800d746:	4b10      	ldr	r3, [pc, #64]	; (800d788 <can1_ams_cell_temperatures_t3s12_encode+0x50>)
 800d748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d74c:	f7f2 fd90 	bl	8000270 <__adddf3>
 800d750:	4602      	mov	r2, r0
 800d752:	460b      	mov	r3, r1
 800d754:	4610      	mov	r0, r2
 800d756:	4619      	mov	r1, r3
 800d758:	a309      	add	r3, pc, #36	; (adr r3, 800d780 <can1_ams_cell_temperatures_t3s12_encode+0x48>)
 800d75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75e:	f7f3 f867 	bl	8000830 <__aeabi_ddiv>
 800d762:	4602      	mov	r2, r0
 800d764:	460b      	mov	r3, r1
 800d766:	4610      	mov	r0, r2
 800d768:	4619      	mov	r1, r3
 800d76a:	f7f3 f9e7 	bl	8000b3c <__aeabi_d2iz>
 800d76e:	4603      	mov	r3, r0
 800d770:	b21b      	sxth	r3, r3
}
 800d772:	4618      	mov	r0, r3
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	f3af 8000 	nop.w
 800d780:	757928e1 	.word	0x757928e1
 800d784:	3fa9018e 	.word	0x3fa9018e
 800d788:	40240000 	.word	0x40240000
 800d78c:	00000000 	.word	0x00000000

0800d790 <can1_ams_cell_temperatures_t3s12_decode>:

double can1_ams_cell_temperatures_t3s12_decode(int16_t value)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	4603      	mov	r3, r0
 800d798:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d79a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7f2 feb2 	bl	8000508 <__aeabi_i2d>
 800d7a4:	a30d      	add	r3, pc, #52	; (adr r3, 800d7dc <can1_ams_cell_temperatures_t3s12_decode+0x4c>)
 800d7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7aa:	f7f2 ff17 	bl	80005dc <__aeabi_dmul>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	4610      	mov	r0, r2
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	f04f 0200 	mov.w	r2, #0
 800d7ba:	4b07      	ldr	r3, [pc, #28]	; (800d7d8 <can1_ams_cell_temperatures_t3s12_decode+0x48>)
 800d7bc:	f7f2 fd56 	bl	800026c <__aeabi_dsub>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d7c8:	eeb0 0a47 	vmov.f32	s0, s14
 800d7cc:	eef0 0a67 	vmov.f32	s1, s15
 800d7d0:	3708      	adds	r7, #8
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	40240000 	.word	0x40240000
 800d7dc:	757928e1 	.word	0x757928e1
 800d7e0:	3fa9018e 	.word	0x3fa9018e
 800d7e4:	00000000 	.word	0x00000000

0800d7e8 <can1_ams_cell_temperatures_t4s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s1_encode(double value)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d7f2:	f04f 0200 	mov.w	r2, #0
 800d7f6:	4b10      	ldr	r3, [pc, #64]	; (800d838 <can1_ams_cell_temperatures_t4s1_encode+0x50>)
 800d7f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7fc:	f7f2 fd38 	bl	8000270 <__adddf3>
 800d800:	4602      	mov	r2, r0
 800d802:	460b      	mov	r3, r1
 800d804:	4610      	mov	r0, r2
 800d806:	4619      	mov	r1, r3
 800d808:	a309      	add	r3, pc, #36	; (adr r3, 800d830 <can1_ams_cell_temperatures_t4s1_encode+0x48>)
 800d80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80e:	f7f3 f80f 	bl	8000830 <__aeabi_ddiv>
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4610      	mov	r0, r2
 800d818:	4619      	mov	r1, r3
 800d81a:	f7f3 f98f 	bl	8000b3c <__aeabi_d2iz>
 800d81e:	4603      	mov	r3, r0
 800d820:	b21b      	sxth	r3, r3
}
 800d822:	4618      	mov	r0, r3
 800d824:	3708      	adds	r7, #8
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	f3af 8000 	nop.w
 800d830:	757928e1 	.word	0x757928e1
 800d834:	3fa9018e 	.word	0x3fa9018e
 800d838:	40240000 	.word	0x40240000
 800d83c:	00000000 	.word	0x00000000

0800d840 <can1_ams_cell_temperatures_t4s1_decode>:

double can1_ams_cell_temperatures_t4s1_decode(int16_t value)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	4603      	mov	r3, r0
 800d848:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d84a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d84e:	4618      	mov	r0, r3
 800d850:	f7f2 fe5a 	bl	8000508 <__aeabi_i2d>
 800d854:	a30d      	add	r3, pc, #52	; (adr r3, 800d88c <can1_ams_cell_temperatures_t4s1_decode+0x4c>)
 800d856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85a:	f7f2 febf 	bl	80005dc <__aeabi_dmul>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	4610      	mov	r0, r2
 800d864:	4619      	mov	r1, r3
 800d866:	f04f 0200 	mov.w	r2, #0
 800d86a:	4b07      	ldr	r3, [pc, #28]	; (800d888 <can1_ams_cell_temperatures_t4s1_decode+0x48>)
 800d86c:	f7f2 fcfe 	bl	800026c <__aeabi_dsub>
 800d870:	4602      	mov	r2, r0
 800d872:	460b      	mov	r3, r1
 800d874:	ec43 2b17 	vmov	d7, r2, r3
}
 800d878:	eeb0 0a47 	vmov.f32	s0, s14
 800d87c:	eef0 0a67 	vmov.f32	s1, s15
 800d880:	3708      	adds	r7, #8
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	40240000 	.word	0x40240000
 800d88c:	757928e1 	.word	0x757928e1
 800d890:	3fa9018e 	.word	0x3fa9018e
 800d894:	00000000 	.word	0x00000000

0800d898 <can1_ams_cell_temperatures_t4s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s2_encode(double value)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d8a2:	f04f 0200 	mov.w	r2, #0
 800d8a6:	4b10      	ldr	r3, [pc, #64]	; (800d8e8 <can1_ams_cell_temperatures_t4s2_encode+0x50>)
 800d8a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d8ac:	f7f2 fce0 	bl	8000270 <__adddf3>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	a309      	add	r3, pc, #36	; (adr r3, 800d8e0 <can1_ams_cell_temperatures_t4s2_encode+0x48>)
 800d8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8be:	f7f2 ffb7 	bl	8000830 <__aeabi_ddiv>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	4610      	mov	r0, r2
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	f7f3 f937 	bl	8000b3c <__aeabi_d2iz>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	b21b      	sxth	r3, r3
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	f3af 8000 	nop.w
 800d8e0:	757928e1 	.word	0x757928e1
 800d8e4:	3fa9018e 	.word	0x3fa9018e
 800d8e8:	40240000 	.word	0x40240000
 800d8ec:	00000000 	.word	0x00000000

0800d8f0 <can1_ams_cell_temperatures_t4s2_decode>:

double can1_ams_cell_temperatures_t4s2_decode(int16_t value)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d8fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7f2 fe02 	bl	8000508 <__aeabi_i2d>
 800d904:	a30d      	add	r3, pc, #52	; (adr r3, 800d93c <can1_ams_cell_temperatures_t4s2_decode+0x4c>)
 800d906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90a:	f7f2 fe67 	bl	80005dc <__aeabi_dmul>
 800d90e:	4602      	mov	r2, r0
 800d910:	460b      	mov	r3, r1
 800d912:	4610      	mov	r0, r2
 800d914:	4619      	mov	r1, r3
 800d916:	f04f 0200 	mov.w	r2, #0
 800d91a:	4b07      	ldr	r3, [pc, #28]	; (800d938 <can1_ams_cell_temperatures_t4s2_decode+0x48>)
 800d91c:	f7f2 fca6 	bl	800026c <__aeabi_dsub>
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	ec43 2b17 	vmov	d7, r2, r3
}
 800d928:	eeb0 0a47 	vmov.f32	s0, s14
 800d92c:	eef0 0a67 	vmov.f32	s1, s15
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	40240000 	.word	0x40240000
 800d93c:	757928e1 	.word	0x757928e1
 800d940:	3fa9018e 	.word	0x3fa9018e
 800d944:	00000000 	.word	0x00000000

0800d948 <can1_ams_cell_temperatures_t4s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s3_encode(double value)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d952:	f04f 0200 	mov.w	r2, #0
 800d956:	4b10      	ldr	r3, [pc, #64]	; (800d998 <can1_ams_cell_temperatures_t4s3_encode+0x50>)
 800d958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d95c:	f7f2 fc88 	bl	8000270 <__adddf3>
 800d960:	4602      	mov	r2, r0
 800d962:	460b      	mov	r3, r1
 800d964:	4610      	mov	r0, r2
 800d966:	4619      	mov	r1, r3
 800d968:	a309      	add	r3, pc, #36	; (adr r3, 800d990 <can1_ams_cell_temperatures_t4s3_encode+0x48>)
 800d96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96e:	f7f2 ff5f 	bl	8000830 <__aeabi_ddiv>
 800d972:	4602      	mov	r2, r0
 800d974:	460b      	mov	r3, r1
 800d976:	4610      	mov	r0, r2
 800d978:	4619      	mov	r1, r3
 800d97a:	f7f3 f8df 	bl	8000b3c <__aeabi_d2iz>
 800d97e:	4603      	mov	r3, r0
 800d980:	b21b      	sxth	r3, r3
}
 800d982:	4618      	mov	r0, r3
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	f3af 8000 	nop.w
 800d990:	757928e1 	.word	0x757928e1
 800d994:	3fa9018e 	.word	0x3fa9018e
 800d998:	40240000 	.word	0x40240000
 800d99c:	00000000 	.word	0x00000000

0800d9a0 <can1_ams_cell_temperatures_t4s3_decode>:

double can1_ams_cell_temperatures_t4s3_decode(int16_t value)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d9aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7f2 fdaa 	bl	8000508 <__aeabi_i2d>
 800d9b4:	a30d      	add	r3, pc, #52	; (adr r3, 800d9ec <can1_ams_cell_temperatures_t4s3_decode+0x4c>)
 800d9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ba:	f7f2 fe0f 	bl	80005dc <__aeabi_dmul>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4610      	mov	r0, r2
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	f04f 0200 	mov.w	r2, #0
 800d9ca:	4b07      	ldr	r3, [pc, #28]	; (800d9e8 <can1_ams_cell_temperatures_t4s3_decode+0x48>)
 800d9cc:	f7f2 fc4e 	bl	800026c <__aeabi_dsub>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d9d8:	eeb0 0a47 	vmov.f32	s0, s14
 800d9dc:	eef0 0a67 	vmov.f32	s1, s15
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	40240000 	.word	0x40240000
 800d9ec:	757928e1 	.word	0x757928e1
 800d9f0:	3fa9018e 	.word	0x3fa9018e
 800d9f4:	00000000 	.word	0x00000000

0800d9f8 <can1_ams_cell_temperatures_t4s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s4_encode(double value)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800da02:	f04f 0200 	mov.w	r2, #0
 800da06:	4b10      	ldr	r3, [pc, #64]	; (800da48 <can1_ams_cell_temperatures_t4s4_encode+0x50>)
 800da08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da0c:	f7f2 fc30 	bl	8000270 <__adddf3>
 800da10:	4602      	mov	r2, r0
 800da12:	460b      	mov	r3, r1
 800da14:	4610      	mov	r0, r2
 800da16:	4619      	mov	r1, r3
 800da18:	a309      	add	r3, pc, #36	; (adr r3, 800da40 <can1_ams_cell_temperatures_t4s4_encode+0x48>)
 800da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1e:	f7f2 ff07 	bl	8000830 <__aeabi_ddiv>
 800da22:	4602      	mov	r2, r0
 800da24:	460b      	mov	r3, r1
 800da26:	4610      	mov	r0, r2
 800da28:	4619      	mov	r1, r3
 800da2a:	f7f3 f887 	bl	8000b3c <__aeabi_d2iz>
 800da2e:	4603      	mov	r3, r0
 800da30:	b21b      	sxth	r3, r3
}
 800da32:	4618      	mov	r0, r3
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	f3af 8000 	nop.w
 800da40:	757928e1 	.word	0x757928e1
 800da44:	3fa9018e 	.word	0x3fa9018e
 800da48:	40240000 	.word	0x40240000
 800da4c:	00000000 	.word	0x00000000

0800da50 <can1_ams_cell_temperatures_t4s4_decode>:

double can1_ams_cell_temperatures_t4s4_decode(int16_t value)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800da5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f2 fd52 	bl	8000508 <__aeabi_i2d>
 800da64:	a30d      	add	r3, pc, #52	; (adr r3, 800da9c <can1_ams_cell_temperatures_t4s4_decode+0x4c>)
 800da66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6a:	f7f2 fdb7 	bl	80005dc <__aeabi_dmul>
 800da6e:	4602      	mov	r2, r0
 800da70:	460b      	mov	r3, r1
 800da72:	4610      	mov	r0, r2
 800da74:	4619      	mov	r1, r3
 800da76:	f04f 0200 	mov.w	r2, #0
 800da7a:	4b07      	ldr	r3, [pc, #28]	; (800da98 <can1_ams_cell_temperatures_t4s4_decode+0x48>)
 800da7c:	f7f2 fbf6 	bl	800026c <__aeabi_dsub>
 800da80:	4602      	mov	r2, r0
 800da82:	460b      	mov	r3, r1
 800da84:	ec43 2b17 	vmov	d7, r2, r3
}
 800da88:	eeb0 0a47 	vmov.f32	s0, s14
 800da8c:	eef0 0a67 	vmov.f32	s1, s15
 800da90:	3708      	adds	r7, #8
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	40240000 	.word	0x40240000
 800da9c:	757928e1 	.word	0x757928e1
 800daa0:	3fa9018e 	.word	0x3fa9018e
 800daa4:	00000000 	.word	0x00000000

0800daa8 <can1_ams_cell_temperatures_t4s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s5_encode(double value)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dab2:	f04f 0200 	mov.w	r2, #0
 800dab6:	4b10      	ldr	r3, [pc, #64]	; (800daf8 <can1_ams_cell_temperatures_t4s5_encode+0x50>)
 800dab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dabc:	f7f2 fbd8 	bl	8000270 <__adddf3>
 800dac0:	4602      	mov	r2, r0
 800dac2:	460b      	mov	r3, r1
 800dac4:	4610      	mov	r0, r2
 800dac6:	4619      	mov	r1, r3
 800dac8:	a309      	add	r3, pc, #36	; (adr r3, 800daf0 <can1_ams_cell_temperatures_t4s5_encode+0x48>)
 800daca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dace:	f7f2 feaf 	bl	8000830 <__aeabi_ddiv>
 800dad2:	4602      	mov	r2, r0
 800dad4:	460b      	mov	r3, r1
 800dad6:	4610      	mov	r0, r2
 800dad8:	4619      	mov	r1, r3
 800dada:	f7f3 f82f 	bl	8000b3c <__aeabi_d2iz>
 800dade:	4603      	mov	r3, r0
 800dae0:	b21b      	sxth	r3, r3
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3708      	adds	r7, #8
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	f3af 8000 	nop.w
 800daf0:	757928e1 	.word	0x757928e1
 800daf4:	3fa9018e 	.word	0x3fa9018e
 800daf8:	40240000 	.word	0x40240000
 800dafc:	00000000 	.word	0x00000000

0800db00 <can1_ams_cell_temperatures_t4s5_decode>:

double can1_ams_cell_temperatures_t4s5_decode(int16_t value)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	4603      	mov	r3, r0
 800db08:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800db0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db0e:	4618      	mov	r0, r3
 800db10:	f7f2 fcfa 	bl	8000508 <__aeabi_i2d>
 800db14:	a30d      	add	r3, pc, #52	; (adr r3, 800db4c <can1_ams_cell_temperatures_t4s5_decode+0x4c>)
 800db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1a:	f7f2 fd5f 	bl	80005dc <__aeabi_dmul>
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	4610      	mov	r0, r2
 800db24:	4619      	mov	r1, r3
 800db26:	f04f 0200 	mov.w	r2, #0
 800db2a:	4b07      	ldr	r3, [pc, #28]	; (800db48 <can1_ams_cell_temperatures_t4s5_decode+0x48>)
 800db2c:	f7f2 fb9e 	bl	800026c <__aeabi_dsub>
 800db30:	4602      	mov	r2, r0
 800db32:	460b      	mov	r3, r1
 800db34:	ec43 2b17 	vmov	d7, r2, r3
}
 800db38:	eeb0 0a47 	vmov.f32	s0, s14
 800db3c:	eef0 0a67 	vmov.f32	s1, s15
 800db40:	3708      	adds	r7, #8
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	40240000 	.word	0x40240000
 800db4c:	757928e1 	.word	0x757928e1
 800db50:	3fa9018e 	.word	0x3fa9018e
 800db54:	00000000 	.word	0x00000000

0800db58 <can1_ams_cell_temperatures_t4s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s6_encode(double value)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800db62:	f04f 0200 	mov.w	r2, #0
 800db66:	4b10      	ldr	r3, [pc, #64]	; (800dba8 <can1_ams_cell_temperatures_t4s6_encode+0x50>)
 800db68:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db6c:	f7f2 fb80 	bl	8000270 <__adddf3>
 800db70:	4602      	mov	r2, r0
 800db72:	460b      	mov	r3, r1
 800db74:	4610      	mov	r0, r2
 800db76:	4619      	mov	r1, r3
 800db78:	a309      	add	r3, pc, #36	; (adr r3, 800dba0 <can1_ams_cell_temperatures_t4s6_encode+0x48>)
 800db7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7e:	f7f2 fe57 	bl	8000830 <__aeabi_ddiv>
 800db82:	4602      	mov	r2, r0
 800db84:	460b      	mov	r3, r1
 800db86:	4610      	mov	r0, r2
 800db88:	4619      	mov	r1, r3
 800db8a:	f7f2 ffd7 	bl	8000b3c <__aeabi_d2iz>
 800db8e:	4603      	mov	r3, r0
 800db90:	b21b      	sxth	r3, r3
}
 800db92:	4618      	mov	r0, r3
 800db94:	3708      	adds	r7, #8
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	f3af 8000 	nop.w
 800dba0:	757928e1 	.word	0x757928e1
 800dba4:	3fa9018e 	.word	0x3fa9018e
 800dba8:	40240000 	.word	0x40240000
 800dbac:	00000000 	.word	0x00000000

0800dbb0 <can1_ams_cell_temperatures_t4s6_decode>:

double can1_ams_cell_temperatures_t4s6_decode(int16_t value)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800dbba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7f2 fca2 	bl	8000508 <__aeabi_i2d>
 800dbc4:	a30d      	add	r3, pc, #52	; (adr r3, 800dbfc <can1_ams_cell_temperatures_t4s6_decode+0x4c>)
 800dbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbca:	f7f2 fd07 	bl	80005dc <__aeabi_dmul>
 800dbce:	4602      	mov	r2, r0
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	4610      	mov	r0, r2
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	f04f 0200 	mov.w	r2, #0
 800dbda:	4b07      	ldr	r3, [pc, #28]	; (800dbf8 <can1_ams_cell_temperatures_t4s6_decode+0x48>)
 800dbdc:	f7f2 fb46 	bl	800026c <__aeabi_dsub>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	ec43 2b17 	vmov	d7, r2, r3
}
 800dbe8:	eeb0 0a47 	vmov.f32	s0, s14
 800dbec:	eef0 0a67 	vmov.f32	s1, s15
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	40240000 	.word	0x40240000
 800dbfc:	757928e1 	.word	0x757928e1
 800dc00:	3fa9018e 	.word	0x3fa9018e
 800dc04:	00000000 	.word	0x00000000

0800dc08 <can1_ams_cell_temperatures_t4s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s7_encode(double value)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dc12:	f04f 0200 	mov.w	r2, #0
 800dc16:	4b10      	ldr	r3, [pc, #64]	; (800dc58 <can1_ams_cell_temperatures_t4s7_encode+0x50>)
 800dc18:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dc1c:	f7f2 fb28 	bl	8000270 <__adddf3>
 800dc20:	4602      	mov	r2, r0
 800dc22:	460b      	mov	r3, r1
 800dc24:	4610      	mov	r0, r2
 800dc26:	4619      	mov	r1, r3
 800dc28:	a309      	add	r3, pc, #36	; (adr r3, 800dc50 <can1_ams_cell_temperatures_t4s7_encode+0x48>)
 800dc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2e:	f7f2 fdff 	bl	8000830 <__aeabi_ddiv>
 800dc32:	4602      	mov	r2, r0
 800dc34:	460b      	mov	r3, r1
 800dc36:	4610      	mov	r0, r2
 800dc38:	4619      	mov	r1, r3
 800dc3a:	f7f2 ff7f 	bl	8000b3c <__aeabi_d2iz>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	b21b      	sxth	r3, r3
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3708      	adds	r7, #8
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	f3af 8000 	nop.w
 800dc50:	757928e1 	.word	0x757928e1
 800dc54:	3fa9018e 	.word	0x3fa9018e
 800dc58:	40240000 	.word	0x40240000
 800dc5c:	00000000 	.word	0x00000000

0800dc60 <can1_ams_cell_temperatures_t4s7_decode>:

double can1_ams_cell_temperatures_t4s7_decode(int16_t value)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	4603      	mov	r3, r0
 800dc68:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800dc6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7f2 fc4a 	bl	8000508 <__aeabi_i2d>
 800dc74:	a30d      	add	r3, pc, #52	; (adr r3, 800dcac <can1_ams_cell_temperatures_t4s7_decode+0x4c>)
 800dc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7a:	f7f2 fcaf 	bl	80005dc <__aeabi_dmul>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	460b      	mov	r3, r1
 800dc82:	4610      	mov	r0, r2
 800dc84:	4619      	mov	r1, r3
 800dc86:	f04f 0200 	mov.w	r2, #0
 800dc8a:	4b07      	ldr	r3, [pc, #28]	; (800dca8 <can1_ams_cell_temperatures_t4s7_decode+0x48>)
 800dc8c:	f7f2 faee 	bl	800026c <__aeabi_dsub>
 800dc90:	4602      	mov	r2, r0
 800dc92:	460b      	mov	r3, r1
 800dc94:	ec43 2b17 	vmov	d7, r2, r3
}
 800dc98:	eeb0 0a47 	vmov.f32	s0, s14
 800dc9c:	eef0 0a67 	vmov.f32	s1, s15
 800dca0:	3708      	adds	r7, #8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	40240000 	.word	0x40240000
 800dcac:	757928e1 	.word	0x757928e1
 800dcb0:	3fa9018e 	.word	0x3fa9018e
 800dcb4:	00000000 	.word	0x00000000

0800dcb8 <can1_ams_cell_temperatures_t4s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s8_encode(double value)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dcc2:	f04f 0200 	mov.w	r2, #0
 800dcc6:	4b10      	ldr	r3, [pc, #64]	; (800dd08 <can1_ams_cell_temperatures_t4s8_encode+0x50>)
 800dcc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dccc:	f7f2 fad0 	bl	8000270 <__adddf3>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4610      	mov	r0, r2
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	a309      	add	r3, pc, #36	; (adr r3, 800dd00 <can1_ams_cell_temperatures_t4s8_encode+0x48>)
 800dcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcde:	f7f2 fda7 	bl	8000830 <__aeabi_ddiv>
 800dce2:	4602      	mov	r2, r0
 800dce4:	460b      	mov	r3, r1
 800dce6:	4610      	mov	r0, r2
 800dce8:	4619      	mov	r1, r3
 800dcea:	f7f2 ff27 	bl	8000b3c <__aeabi_d2iz>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	b21b      	sxth	r3, r3
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	f3af 8000 	nop.w
 800dd00:	757928e1 	.word	0x757928e1
 800dd04:	3fa9018e 	.word	0x3fa9018e
 800dd08:	40240000 	.word	0x40240000
 800dd0c:	00000000 	.word	0x00000000

0800dd10 <can1_ams_cell_temperatures_t4s8_decode>:

double can1_ams_cell_temperatures_t4s8_decode(int16_t value)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	4603      	mov	r3, r0
 800dd18:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800dd1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7f2 fbf2 	bl	8000508 <__aeabi_i2d>
 800dd24:	a30d      	add	r3, pc, #52	; (adr r3, 800dd5c <can1_ams_cell_temperatures_t4s8_decode+0x4c>)
 800dd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2a:	f7f2 fc57 	bl	80005dc <__aeabi_dmul>
 800dd2e:	4602      	mov	r2, r0
 800dd30:	460b      	mov	r3, r1
 800dd32:	4610      	mov	r0, r2
 800dd34:	4619      	mov	r1, r3
 800dd36:	f04f 0200 	mov.w	r2, #0
 800dd3a:	4b07      	ldr	r3, [pc, #28]	; (800dd58 <can1_ams_cell_temperatures_t4s8_decode+0x48>)
 800dd3c:	f7f2 fa96 	bl	800026c <__aeabi_dsub>
 800dd40:	4602      	mov	r2, r0
 800dd42:	460b      	mov	r3, r1
 800dd44:	ec43 2b17 	vmov	d7, r2, r3
}
 800dd48:	eeb0 0a47 	vmov.f32	s0, s14
 800dd4c:	eef0 0a67 	vmov.f32	s1, s15
 800dd50:	3708      	adds	r7, #8
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	40240000 	.word	0x40240000
 800dd5c:	757928e1 	.word	0x757928e1
 800dd60:	3fa9018e 	.word	0x3fa9018e
 800dd64:	00000000 	.word	0x00000000

0800dd68 <can1_ams_cell_temperatures_t4s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s9_encode(double value)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dd72:	f04f 0200 	mov.w	r2, #0
 800dd76:	4b10      	ldr	r3, [pc, #64]	; (800ddb8 <can1_ams_cell_temperatures_t4s9_encode+0x50>)
 800dd78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dd7c:	f7f2 fa78 	bl	8000270 <__adddf3>
 800dd80:	4602      	mov	r2, r0
 800dd82:	460b      	mov	r3, r1
 800dd84:	4610      	mov	r0, r2
 800dd86:	4619      	mov	r1, r3
 800dd88:	a309      	add	r3, pc, #36	; (adr r3, 800ddb0 <can1_ams_cell_temperatures_t4s9_encode+0x48>)
 800dd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8e:	f7f2 fd4f 	bl	8000830 <__aeabi_ddiv>
 800dd92:	4602      	mov	r2, r0
 800dd94:	460b      	mov	r3, r1
 800dd96:	4610      	mov	r0, r2
 800dd98:	4619      	mov	r1, r3
 800dd9a:	f7f2 fecf 	bl	8000b3c <__aeabi_d2iz>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	b21b      	sxth	r3, r3
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3708      	adds	r7, #8
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	f3af 8000 	nop.w
 800ddb0:	757928e1 	.word	0x757928e1
 800ddb4:	3fa9018e 	.word	0x3fa9018e
 800ddb8:	40240000 	.word	0x40240000
 800ddbc:	00000000 	.word	0x00000000

0800ddc0 <can1_ams_cell_temperatures_t4s9_decode>:

double can1_ams_cell_temperatures_t4s9_decode(int16_t value)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800ddca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7f2 fb9a 	bl	8000508 <__aeabi_i2d>
 800ddd4:	a30d      	add	r3, pc, #52	; (adr r3, 800de0c <can1_ams_cell_temperatures_t4s9_decode+0x4c>)
 800ddd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddda:	f7f2 fbff 	bl	80005dc <__aeabi_dmul>
 800ddde:	4602      	mov	r2, r0
 800dde0:	460b      	mov	r3, r1
 800dde2:	4610      	mov	r0, r2
 800dde4:	4619      	mov	r1, r3
 800dde6:	f04f 0200 	mov.w	r2, #0
 800ddea:	4b07      	ldr	r3, [pc, #28]	; (800de08 <can1_ams_cell_temperatures_t4s9_decode+0x48>)
 800ddec:	f7f2 fa3e 	bl	800026c <__aeabi_dsub>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	ec43 2b17 	vmov	d7, r2, r3
}
 800ddf8:	eeb0 0a47 	vmov.f32	s0, s14
 800ddfc:	eef0 0a67 	vmov.f32	s1, s15
 800de00:	3708      	adds	r7, #8
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	40240000 	.word	0x40240000
 800de0c:	757928e1 	.word	0x757928e1
 800de10:	3fa9018e 	.word	0x3fa9018e
 800de14:	00000000 	.word	0x00000000

0800de18 <can1_ams_cell_temperatures_t4s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s10_encode(double value)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800de22:	f04f 0200 	mov.w	r2, #0
 800de26:	4b10      	ldr	r3, [pc, #64]	; (800de68 <can1_ams_cell_temperatures_t4s10_encode+0x50>)
 800de28:	e9d7 0100 	ldrd	r0, r1, [r7]
 800de2c:	f7f2 fa20 	bl	8000270 <__adddf3>
 800de30:	4602      	mov	r2, r0
 800de32:	460b      	mov	r3, r1
 800de34:	4610      	mov	r0, r2
 800de36:	4619      	mov	r1, r3
 800de38:	a309      	add	r3, pc, #36	; (adr r3, 800de60 <can1_ams_cell_temperatures_t4s10_encode+0x48>)
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	f7f2 fcf7 	bl	8000830 <__aeabi_ddiv>
 800de42:	4602      	mov	r2, r0
 800de44:	460b      	mov	r3, r1
 800de46:	4610      	mov	r0, r2
 800de48:	4619      	mov	r1, r3
 800de4a:	f7f2 fe77 	bl	8000b3c <__aeabi_d2iz>
 800de4e:	4603      	mov	r3, r0
 800de50:	b21b      	sxth	r3, r3
}
 800de52:	4618      	mov	r0, r3
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	f3af 8000 	nop.w
 800de60:	757928e1 	.word	0x757928e1
 800de64:	3fa9018e 	.word	0x3fa9018e
 800de68:	40240000 	.word	0x40240000
 800de6c:	00000000 	.word	0x00000000

0800de70 <can1_ams_cell_temperatures_t4s10_decode>:

double can1_ams_cell_temperatures_t4s10_decode(int16_t value)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	4603      	mov	r3, r0
 800de78:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800de7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800de7e:	4618      	mov	r0, r3
 800de80:	f7f2 fb42 	bl	8000508 <__aeabi_i2d>
 800de84:	a30d      	add	r3, pc, #52	; (adr r3, 800debc <can1_ams_cell_temperatures_t4s10_decode+0x4c>)
 800de86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8a:	f7f2 fba7 	bl	80005dc <__aeabi_dmul>
 800de8e:	4602      	mov	r2, r0
 800de90:	460b      	mov	r3, r1
 800de92:	4610      	mov	r0, r2
 800de94:	4619      	mov	r1, r3
 800de96:	f04f 0200 	mov.w	r2, #0
 800de9a:	4b07      	ldr	r3, [pc, #28]	; (800deb8 <can1_ams_cell_temperatures_t4s10_decode+0x48>)
 800de9c:	f7f2 f9e6 	bl	800026c <__aeabi_dsub>
 800dea0:	4602      	mov	r2, r0
 800dea2:	460b      	mov	r3, r1
 800dea4:	ec43 2b17 	vmov	d7, r2, r3
}
 800dea8:	eeb0 0a47 	vmov.f32	s0, s14
 800deac:	eef0 0a67 	vmov.f32	s1, s15
 800deb0:	3708      	adds	r7, #8
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	40240000 	.word	0x40240000
 800debc:	757928e1 	.word	0x757928e1
 800dec0:	3fa9018e 	.word	0x3fa9018e
 800dec4:	00000000 	.word	0x00000000

0800dec8 <can1_ams_cell_temperatures_t4s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s11_encode(double value)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ded2:	f04f 0200 	mov.w	r2, #0
 800ded6:	4b10      	ldr	r3, [pc, #64]	; (800df18 <can1_ams_cell_temperatures_t4s11_encode+0x50>)
 800ded8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dedc:	f7f2 f9c8 	bl	8000270 <__adddf3>
 800dee0:	4602      	mov	r2, r0
 800dee2:	460b      	mov	r3, r1
 800dee4:	4610      	mov	r0, r2
 800dee6:	4619      	mov	r1, r3
 800dee8:	a309      	add	r3, pc, #36	; (adr r3, 800df10 <can1_ams_cell_temperatures_t4s11_encode+0x48>)
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	f7f2 fc9f 	bl	8000830 <__aeabi_ddiv>
 800def2:	4602      	mov	r2, r0
 800def4:	460b      	mov	r3, r1
 800def6:	4610      	mov	r0, r2
 800def8:	4619      	mov	r1, r3
 800defa:	f7f2 fe1f 	bl	8000b3c <__aeabi_d2iz>
 800defe:	4603      	mov	r3, r0
 800df00:	b21b      	sxth	r3, r3
}
 800df02:	4618      	mov	r0, r3
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	f3af 8000 	nop.w
 800df10:	757928e1 	.word	0x757928e1
 800df14:	3fa9018e 	.word	0x3fa9018e
 800df18:	40240000 	.word	0x40240000
 800df1c:	00000000 	.word	0x00000000

0800df20 <can1_ams_cell_temperatures_t4s11_decode>:

double can1_ams_cell_temperatures_t4s11_decode(int16_t value)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	4603      	mov	r3, r0
 800df28:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800df2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df2e:	4618      	mov	r0, r3
 800df30:	f7f2 faea 	bl	8000508 <__aeabi_i2d>
 800df34:	a30d      	add	r3, pc, #52	; (adr r3, 800df6c <can1_ams_cell_temperatures_t4s11_decode+0x4c>)
 800df36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3a:	f7f2 fb4f 	bl	80005dc <__aeabi_dmul>
 800df3e:	4602      	mov	r2, r0
 800df40:	460b      	mov	r3, r1
 800df42:	4610      	mov	r0, r2
 800df44:	4619      	mov	r1, r3
 800df46:	f04f 0200 	mov.w	r2, #0
 800df4a:	4b07      	ldr	r3, [pc, #28]	; (800df68 <can1_ams_cell_temperatures_t4s11_decode+0x48>)
 800df4c:	f7f2 f98e 	bl	800026c <__aeabi_dsub>
 800df50:	4602      	mov	r2, r0
 800df52:	460b      	mov	r3, r1
 800df54:	ec43 2b17 	vmov	d7, r2, r3
}
 800df58:	eeb0 0a47 	vmov.f32	s0, s14
 800df5c:	eef0 0a67 	vmov.f32	s1, s15
 800df60:	3708      	adds	r7, #8
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	40240000 	.word	0x40240000
 800df6c:	757928e1 	.word	0x757928e1
 800df70:	3fa9018e 	.word	0x3fa9018e
 800df74:	00000000 	.word	0x00000000

0800df78 <can1_ams_cell_temperatures_t4s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s12_encode(double value)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800df82:	f04f 0200 	mov.w	r2, #0
 800df86:	4b10      	ldr	r3, [pc, #64]	; (800dfc8 <can1_ams_cell_temperatures_t4s12_encode+0x50>)
 800df88:	e9d7 0100 	ldrd	r0, r1, [r7]
 800df8c:	f7f2 f970 	bl	8000270 <__adddf3>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4610      	mov	r0, r2
 800df96:	4619      	mov	r1, r3
 800df98:	a309      	add	r3, pc, #36	; (adr r3, 800dfc0 <can1_ams_cell_temperatures_t4s12_encode+0x48>)
 800df9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9e:	f7f2 fc47 	bl	8000830 <__aeabi_ddiv>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	4610      	mov	r0, r2
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	f7f2 fdc7 	bl	8000b3c <__aeabi_d2iz>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	b21b      	sxth	r3, r3
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	f3af 8000 	nop.w
 800dfc0:	757928e1 	.word	0x757928e1
 800dfc4:	3fa9018e 	.word	0x3fa9018e
 800dfc8:	40240000 	.word	0x40240000
 800dfcc:	00000000 	.word	0x00000000

0800dfd0 <can1_ams_cell_temperatures_t4s12_decode>:

double can1_ams_cell_temperatures_t4s12_decode(int16_t value)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800dfda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7f2 fa92 	bl	8000508 <__aeabi_i2d>
 800dfe4:	a30d      	add	r3, pc, #52	; (adr r3, 800e01c <can1_ams_cell_temperatures_t4s12_decode+0x4c>)
 800dfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfea:	f7f2 faf7 	bl	80005dc <__aeabi_dmul>
 800dfee:	4602      	mov	r2, r0
 800dff0:	460b      	mov	r3, r1
 800dff2:	4610      	mov	r0, r2
 800dff4:	4619      	mov	r1, r3
 800dff6:	f04f 0200 	mov.w	r2, #0
 800dffa:	4b07      	ldr	r3, [pc, #28]	; (800e018 <can1_ams_cell_temperatures_t4s12_decode+0x48>)
 800dffc:	f7f2 f936 	bl	800026c <__aeabi_dsub>
 800e000:	4602      	mov	r2, r0
 800e002:	460b      	mov	r3, r1
 800e004:	ec43 2b17 	vmov	d7, r2, r3
}
 800e008:	eeb0 0a47 	vmov.f32	s0, s14
 800e00c:	eef0 0a67 	vmov.f32	s1, s15
 800e010:	3708      	adds	r7, #8
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	40240000 	.word	0x40240000
 800e01c:	757928e1 	.word	0x757928e1
 800e020:	3fa9018e 	.word	0x3fa9018e
 800e024:	00000000 	.word	0x00000000

0800e028 <can1_ams_cell_temperatures_t5s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s1_encode(double value)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e032:	f04f 0200 	mov.w	r2, #0
 800e036:	4b10      	ldr	r3, [pc, #64]	; (800e078 <can1_ams_cell_temperatures_t5s1_encode+0x50>)
 800e038:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e03c:	f7f2 f918 	bl	8000270 <__adddf3>
 800e040:	4602      	mov	r2, r0
 800e042:	460b      	mov	r3, r1
 800e044:	4610      	mov	r0, r2
 800e046:	4619      	mov	r1, r3
 800e048:	a309      	add	r3, pc, #36	; (adr r3, 800e070 <can1_ams_cell_temperatures_t5s1_encode+0x48>)
 800e04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04e:	f7f2 fbef 	bl	8000830 <__aeabi_ddiv>
 800e052:	4602      	mov	r2, r0
 800e054:	460b      	mov	r3, r1
 800e056:	4610      	mov	r0, r2
 800e058:	4619      	mov	r1, r3
 800e05a:	f7f2 fd6f 	bl	8000b3c <__aeabi_d2iz>
 800e05e:	4603      	mov	r3, r0
 800e060:	b21b      	sxth	r3, r3
}
 800e062:	4618      	mov	r0, r3
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	f3af 8000 	nop.w
 800e070:	757928e1 	.word	0x757928e1
 800e074:	3fa9018e 	.word	0x3fa9018e
 800e078:	40240000 	.word	0x40240000
 800e07c:	00000000 	.word	0x00000000

0800e080 <can1_ams_cell_temperatures_t5s1_decode>:

double can1_ams_cell_temperatures_t5s1_decode(int16_t value)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	4603      	mov	r3, r0
 800e088:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e08a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e08e:	4618      	mov	r0, r3
 800e090:	f7f2 fa3a 	bl	8000508 <__aeabi_i2d>
 800e094:	a30d      	add	r3, pc, #52	; (adr r3, 800e0cc <can1_ams_cell_temperatures_t5s1_decode+0x4c>)
 800e096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09a:	f7f2 fa9f 	bl	80005dc <__aeabi_dmul>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	f04f 0200 	mov.w	r2, #0
 800e0aa:	4b07      	ldr	r3, [pc, #28]	; (800e0c8 <can1_ams_cell_temperatures_t5s1_decode+0x48>)
 800e0ac:	f7f2 f8de 	bl	800026c <__aeabi_dsub>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e0b8:	eeb0 0a47 	vmov.f32	s0, s14
 800e0bc:	eef0 0a67 	vmov.f32	s1, s15
 800e0c0:	3708      	adds	r7, #8
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	40240000 	.word	0x40240000
 800e0cc:	757928e1 	.word	0x757928e1
 800e0d0:	3fa9018e 	.word	0x3fa9018e
 800e0d4:	00000000 	.word	0x00000000

0800e0d8 <can1_ams_cell_temperatures_t5s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s2_encode(double value)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e0e2:	f04f 0200 	mov.w	r2, #0
 800e0e6:	4b10      	ldr	r3, [pc, #64]	; (800e128 <can1_ams_cell_temperatures_t5s2_encode+0x50>)
 800e0e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e0ec:	f7f2 f8c0 	bl	8000270 <__adddf3>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	a309      	add	r3, pc, #36	; (adr r3, 800e120 <can1_ams_cell_temperatures_t5s2_encode+0x48>)
 800e0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fe:	f7f2 fb97 	bl	8000830 <__aeabi_ddiv>
 800e102:	4602      	mov	r2, r0
 800e104:	460b      	mov	r3, r1
 800e106:	4610      	mov	r0, r2
 800e108:	4619      	mov	r1, r3
 800e10a:	f7f2 fd17 	bl	8000b3c <__aeabi_d2iz>
 800e10e:	4603      	mov	r3, r0
 800e110:	b21b      	sxth	r3, r3
}
 800e112:	4618      	mov	r0, r3
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	f3af 8000 	nop.w
 800e120:	757928e1 	.word	0x757928e1
 800e124:	3fa9018e 	.word	0x3fa9018e
 800e128:	40240000 	.word	0x40240000
 800e12c:	00000000 	.word	0x00000000

0800e130 <can1_ams_cell_temperatures_t5s2_decode>:

double can1_ams_cell_temperatures_t5s2_decode(int16_t value)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	4603      	mov	r3, r0
 800e138:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e13a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e13e:	4618      	mov	r0, r3
 800e140:	f7f2 f9e2 	bl	8000508 <__aeabi_i2d>
 800e144:	a30d      	add	r3, pc, #52	; (adr r3, 800e17c <can1_ams_cell_temperatures_t5s2_decode+0x4c>)
 800e146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14a:	f7f2 fa47 	bl	80005dc <__aeabi_dmul>
 800e14e:	4602      	mov	r2, r0
 800e150:	460b      	mov	r3, r1
 800e152:	4610      	mov	r0, r2
 800e154:	4619      	mov	r1, r3
 800e156:	f04f 0200 	mov.w	r2, #0
 800e15a:	4b07      	ldr	r3, [pc, #28]	; (800e178 <can1_ams_cell_temperatures_t5s2_decode+0x48>)
 800e15c:	f7f2 f886 	bl	800026c <__aeabi_dsub>
 800e160:	4602      	mov	r2, r0
 800e162:	460b      	mov	r3, r1
 800e164:	ec43 2b17 	vmov	d7, r2, r3
}
 800e168:	eeb0 0a47 	vmov.f32	s0, s14
 800e16c:	eef0 0a67 	vmov.f32	s1, s15
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	40240000 	.word	0x40240000
 800e17c:	757928e1 	.word	0x757928e1
 800e180:	3fa9018e 	.word	0x3fa9018e
 800e184:	00000000 	.word	0x00000000

0800e188 <can1_ams_cell_temperatures_t5s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s3_encode(double value)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e192:	f04f 0200 	mov.w	r2, #0
 800e196:	4b10      	ldr	r3, [pc, #64]	; (800e1d8 <can1_ams_cell_temperatures_t5s3_encode+0x50>)
 800e198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e19c:	f7f2 f868 	bl	8000270 <__adddf3>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	460b      	mov	r3, r1
 800e1a4:	4610      	mov	r0, r2
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	a309      	add	r3, pc, #36	; (adr r3, 800e1d0 <can1_ams_cell_temperatures_t5s3_encode+0x48>)
 800e1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ae:	f7f2 fb3f 	bl	8000830 <__aeabi_ddiv>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	f7f2 fcbf 	bl	8000b3c <__aeabi_d2iz>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	b21b      	sxth	r3, r3
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	f3af 8000 	nop.w
 800e1d0:	757928e1 	.word	0x757928e1
 800e1d4:	3fa9018e 	.word	0x3fa9018e
 800e1d8:	40240000 	.word	0x40240000
 800e1dc:	00000000 	.word	0x00000000

0800e1e0 <can1_ams_cell_temperatures_t5s3_decode>:

double can1_ams_cell_temperatures_t5s3_decode(int16_t value)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e1ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7f2 f98a 	bl	8000508 <__aeabi_i2d>
 800e1f4:	a30d      	add	r3, pc, #52	; (adr r3, 800e22c <can1_ams_cell_temperatures_t5s3_decode+0x4c>)
 800e1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fa:	f7f2 f9ef 	bl	80005dc <__aeabi_dmul>
 800e1fe:	4602      	mov	r2, r0
 800e200:	460b      	mov	r3, r1
 800e202:	4610      	mov	r0, r2
 800e204:	4619      	mov	r1, r3
 800e206:	f04f 0200 	mov.w	r2, #0
 800e20a:	4b07      	ldr	r3, [pc, #28]	; (800e228 <can1_ams_cell_temperatures_t5s3_decode+0x48>)
 800e20c:	f7f2 f82e 	bl	800026c <__aeabi_dsub>
 800e210:	4602      	mov	r2, r0
 800e212:	460b      	mov	r3, r1
 800e214:	ec43 2b17 	vmov	d7, r2, r3
}
 800e218:	eeb0 0a47 	vmov.f32	s0, s14
 800e21c:	eef0 0a67 	vmov.f32	s1, s15
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	40240000 	.word	0x40240000
 800e22c:	757928e1 	.word	0x757928e1
 800e230:	3fa9018e 	.word	0x3fa9018e
 800e234:	00000000 	.word	0x00000000

0800e238 <can1_ams_cell_temperatures_t5s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s4_encode(double value)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e242:	f04f 0200 	mov.w	r2, #0
 800e246:	4b10      	ldr	r3, [pc, #64]	; (800e288 <can1_ams_cell_temperatures_t5s4_encode+0x50>)
 800e248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e24c:	f7f2 f810 	bl	8000270 <__adddf3>
 800e250:	4602      	mov	r2, r0
 800e252:	460b      	mov	r3, r1
 800e254:	4610      	mov	r0, r2
 800e256:	4619      	mov	r1, r3
 800e258:	a309      	add	r3, pc, #36	; (adr r3, 800e280 <can1_ams_cell_temperatures_t5s4_encode+0x48>)
 800e25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25e:	f7f2 fae7 	bl	8000830 <__aeabi_ddiv>
 800e262:	4602      	mov	r2, r0
 800e264:	460b      	mov	r3, r1
 800e266:	4610      	mov	r0, r2
 800e268:	4619      	mov	r1, r3
 800e26a:	f7f2 fc67 	bl	8000b3c <__aeabi_d2iz>
 800e26e:	4603      	mov	r3, r0
 800e270:	b21b      	sxth	r3, r3
}
 800e272:	4618      	mov	r0, r3
 800e274:	3708      	adds	r7, #8
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	f3af 8000 	nop.w
 800e280:	757928e1 	.word	0x757928e1
 800e284:	3fa9018e 	.word	0x3fa9018e
 800e288:	40240000 	.word	0x40240000
 800e28c:	00000000 	.word	0x00000000

0800e290 <can1_ams_cell_temperatures_t5s4_decode>:

double can1_ams_cell_temperatures_t5s4_decode(int16_t value)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	4603      	mov	r3, r0
 800e298:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e29a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7f2 f932 	bl	8000508 <__aeabi_i2d>
 800e2a4:	a30d      	add	r3, pc, #52	; (adr r3, 800e2dc <can1_ams_cell_temperatures_t5s4_decode+0x4c>)
 800e2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2aa:	f7f2 f997 	bl	80005dc <__aeabi_dmul>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	4610      	mov	r0, r2
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	f04f 0200 	mov.w	r2, #0
 800e2ba:	4b07      	ldr	r3, [pc, #28]	; (800e2d8 <can1_ams_cell_temperatures_t5s4_decode+0x48>)
 800e2bc:	f7f1 ffd6 	bl	800026c <__aeabi_dsub>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e2c8:	eeb0 0a47 	vmov.f32	s0, s14
 800e2cc:	eef0 0a67 	vmov.f32	s1, s15
 800e2d0:	3708      	adds	r7, #8
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	40240000 	.word	0x40240000
 800e2dc:	757928e1 	.word	0x757928e1
 800e2e0:	3fa9018e 	.word	0x3fa9018e
 800e2e4:	00000000 	.word	0x00000000

0800e2e8 <can1_ams_cell_temperatures_t5s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s5_encode(double value)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e2f2:	f04f 0200 	mov.w	r2, #0
 800e2f6:	4b10      	ldr	r3, [pc, #64]	; (800e338 <can1_ams_cell_temperatures_t5s5_encode+0x50>)
 800e2f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e2fc:	f7f1 ffb8 	bl	8000270 <__adddf3>
 800e300:	4602      	mov	r2, r0
 800e302:	460b      	mov	r3, r1
 800e304:	4610      	mov	r0, r2
 800e306:	4619      	mov	r1, r3
 800e308:	a309      	add	r3, pc, #36	; (adr r3, 800e330 <can1_ams_cell_temperatures_t5s5_encode+0x48>)
 800e30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30e:	f7f2 fa8f 	bl	8000830 <__aeabi_ddiv>
 800e312:	4602      	mov	r2, r0
 800e314:	460b      	mov	r3, r1
 800e316:	4610      	mov	r0, r2
 800e318:	4619      	mov	r1, r3
 800e31a:	f7f2 fc0f 	bl	8000b3c <__aeabi_d2iz>
 800e31e:	4603      	mov	r3, r0
 800e320:	b21b      	sxth	r3, r3
}
 800e322:	4618      	mov	r0, r3
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	f3af 8000 	nop.w
 800e330:	757928e1 	.word	0x757928e1
 800e334:	3fa9018e 	.word	0x3fa9018e
 800e338:	40240000 	.word	0x40240000
 800e33c:	00000000 	.word	0x00000000

0800e340 <can1_ams_cell_temperatures_t5s5_decode>:

double can1_ams_cell_temperatures_t5s5_decode(int16_t value)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	4603      	mov	r3, r0
 800e348:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e34a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e34e:	4618      	mov	r0, r3
 800e350:	f7f2 f8da 	bl	8000508 <__aeabi_i2d>
 800e354:	a30d      	add	r3, pc, #52	; (adr r3, 800e38c <can1_ams_cell_temperatures_t5s5_decode+0x4c>)
 800e356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35a:	f7f2 f93f 	bl	80005dc <__aeabi_dmul>
 800e35e:	4602      	mov	r2, r0
 800e360:	460b      	mov	r3, r1
 800e362:	4610      	mov	r0, r2
 800e364:	4619      	mov	r1, r3
 800e366:	f04f 0200 	mov.w	r2, #0
 800e36a:	4b07      	ldr	r3, [pc, #28]	; (800e388 <can1_ams_cell_temperatures_t5s5_decode+0x48>)
 800e36c:	f7f1 ff7e 	bl	800026c <__aeabi_dsub>
 800e370:	4602      	mov	r2, r0
 800e372:	460b      	mov	r3, r1
 800e374:	ec43 2b17 	vmov	d7, r2, r3
}
 800e378:	eeb0 0a47 	vmov.f32	s0, s14
 800e37c:	eef0 0a67 	vmov.f32	s1, s15
 800e380:	3708      	adds	r7, #8
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	40240000 	.word	0x40240000
 800e38c:	757928e1 	.word	0x757928e1
 800e390:	3fa9018e 	.word	0x3fa9018e
 800e394:	00000000 	.word	0x00000000

0800e398 <can1_ams_cell_temperatures_t5s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s6_encode(double value)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e3a2:	f04f 0200 	mov.w	r2, #0
 800e3a6:	4b10      	ldr	r3, [pc, #64]	; (800e3e8 <can1_ams_cell_temperatures_t5s6_encode+0x50>)
 800e3a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e3ac:	f7f1 ff60 	bl	8000270 <__adddf3>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	460b      	mov	r3, r1
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	a309      	add	r3, pc, #36	; (adr r3, 800e3e0 <can1_ams_cell_temperatures_t5s6_encode+0x48>)
 800e3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3be:	f7f2 fa37 	bl	8000830 <__aeabi_ddiv>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	4610      	mov	r0, r2
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	f7f2 fbb7 	bl	8000b3c <__aeabi_d2iz>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	b21b      	sxth	r3, r3
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3708      	adds	r7, #8
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	f3af 8000 	nop.w
 800e3e0:	757928e1 	.word	0x757928e1
 800e3e4:	3fa9018e 	.word	0x3fa9018e
 800e3e8:	40240000 	.word	0x40240000
 800e3ec:	00000000 	.word	0x00000000

0800e3f0 <can1_ams_cell_temperatures_t5s6_decode>:

double can1_ams_cell_temperatures_t5s6_decode(int16_t value)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e3fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7f2 f882 	bl	8000508 <__aeabi_i2d>
 800e404:	a30d      	add	r3, pc, #52	; (adr r3, 800e43c <can1_ams_cell_temperatures_t5s6_decode+0x4c>)
 800e406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40a:	f7f2 f8e7 	bl	80005dc <__aeabi_dmul>
 800e40e:	4602      	mov	r2, r0
 800e410:	460b      	mov	r3, r1
 800e412:	4610      	mov	r0, r2
 800e414:	4619      	mov	r1, r3
 800e416:	f04f 0200 	mov.w	r2, #0
 800e41a:	4b07      	ldr	r3, [pc, #28]	; (800e438 <can1_ams_cell_temperatures_t5s6_decode+0x48>)
 800e41c:	f7f1 ff26 	bl	800026c <__aeabi_dsub>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	ec43 2b17 	vmov	d7, r2, r3
}
 800e428:	eeb0 0a47 	vmov.f32	s0, s14
 800e42c:	eef0 0a67 	vmov.f32	s1, s15
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	40240000 	.word	0x40240000
 800e43c:	757928e1 	.word	0x757928e1
 800e440:	3fa9018e 	.word	0x3fa9018e
 800e444:	00000000 	.word	0x00000000

0800e448 <can1_ams_cell_temperatures_t5s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s7_encode(double value)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e452:	f04f 0200 	mov.w	r2, #0
 800e456:	4b10      	ldr	r3, [pc, #64]	; (800e498 <can1_ams_cell_temperatures_t5s7_encode+0x50>)
 800e458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e45c:	f7f1 ff08 	bl	8000270 <__adddf3>
 800e460:	4602      	mov	r2, r0
 800e462:	460b      	mov	r3, r1
 800e464:	4610      	mov	r0, r2
 800e466:	4619      	mov	r1, r3
 800e468:	a309      	add	r3, pc, #36	; (adr r3, 800e490 <can1_ams_cell_temperatures_t5s7_encode+0x48>)
 800e46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46e:	f7f2 f9df 	bl	8000830 <__aeabi_ddiv>
 800e472:	4602      	mov	r2, r0
 800e474:	460b      	mov	r3, r1
 800e476:	4610      	mov	r0, r2
 800e478:	4619      	mov	r1, r3
 800e47a:	f7f2 fb5f 	bl	8000b3c <__aeabi_d2iz>
 800e47e:	4603      	mov	r3, r0
 800e480:	b21b      	sxth	r3, r3
}
 800e482:	4618      	mov	r0, r3
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	f3af 8000 	nop.w
 800e490:	757928e1 	.word	0x757928e1
 800e494:	3fa9018e 	.word	0x3fa9018e
 800e498:	40240000 	.word	0x40240000
 800e49c:	00000000 	.word	0x00000000

0800e4a0 <can1_ams_cell_temperatures_t5s7_decode>:

double can1_ams_cell_temperatures_t5s7_decode(int16_t value)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e4aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7f2 f82a 	bl	8000508 <__aeabi_i2d>
 800e4b4:	a30d      	add	r3, pc, #52	; (adr r3, 800e4ec <can1_ams_cell_temperatures_t5s7_decode+0x4c>)
 800e4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ba:	f7f2 f88f 	bl	80005dc <__aeabi_dmul>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	4610      	mov	r0, r2
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	f04f 0200 	mov.w	r2, #0
 800e4ca:	4b07      	ldr	r3, [pc, #28]	; (800e4e8 <can1_ams_cell_temperatures_t5s7_decode+0x48>)
 800e4cc:	f7f1 fece 	bl	800026c <__aeabi_dsub>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e4d8:	eeb0 0a47 	vmov.f32	s0, s14
 800e4dc:	eef0 0a67 	vmov.f32	s1, s15
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	40240000 	.word	0x40240000
 800e4ec:	757928e1 	.word	0x757928e1
 800e4f0:	3fa9018e 	.word	0x3fa9018e
 800e4f4:	00000000 	.word	0x00000000

0800e4f8 <can1_ams_cell_temperatures_t5s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s8_encode(double value)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e502:	f04f 0200 	mov.w	r2, #0
 800e506:	4b10      	ldr	r3, [pc, #64]	; (800e548 <can1_ams_cell_temperatures_t5s8_encode+0x50>)
 800e508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e50c:	f7f1 feb0 	bl	8000270 <__adddf3>
 800e510:	4602      	mov	r2, r0
 800e512:	460b      	mov	r3, r1
 800e514:	4610      	mov	r0, r2
 800e516:	4619      	mov	r1, r3
 800e518:	a309      	add	r3, pc, #36	; (adr r3, 800e540 <can1_ams_cell_temperatures_t5s8_encode+0x48>)
 800e51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51e:	f7f2 f987 	bl	8000830 <__aeabi_ddiv>
 800e522:	4602      	mov	r2, r0
 800e524:	460b      	mov	r3, r1
 800e526:	4610      	mov	r0, r2
 800e528:	4619      	mov	r1, r3
 800e52a:	f7f2 fb07 	bl	8000b3c <__aeabi_d2iz>
 800e52e:	4603      	mov	r3, r0
 800e530:	b21b      	sxth	r3, r3
}
 800e532:	4618      	mov	r0, r3
 800e534:	3708      	adds	r7, #8
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	f3af 8000 	nop.w
 800e540:	757928e1 	.word	0x757928e1
 800e544:	3fa9018e 	.word	0x3fa9018e
 800e548:	40240000 	.word	0x40240000
 800e54c:	00000000 	.word	0x00000000

0800e550 <can1_ams_cell_temperatures_t5s8_decode>:

double can1_ams_cell_temperatures_t5s8_decode(int16_t value)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e55a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e55e:	4618      	mov	r0, r3
 800e560:	f7f1 ffd2 	bl	8000508 <__aeabi_i2d>
 800e564:	a30d      	add	r3, pc, #52	; (adr r3, 800e59c <can1_ams_cell_temperatures_t5s8_decode+0x4c>)
 800e566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56a:	f7f2 f837 	bl	80005dc <__aeabi_dmul>
 800e56e:	4602      	mov	r2, r0
 800e570:	460b      	mov	r3, r1
 800e572:	4610      	mov	r0, r2
 800e574:	4619      	mov	r1, r3
 800e576:	f04f 0200 	mov.w	r2, #0
 800e57a:	4b07      	ldr	r3, [pc, #28]	; (800e598 <can1_ams_cell_temperatures_t5s8_decode+0x48>)
 800e57c:	f7f1 fe76 	bl	800026c <__aeabi_dsub>
 800e580:	4602      	mov	r2, r0
 800e582:	460b      	mov	r3, r1
 800e584:	ec43 2b17 	vmov	d7, r2, r3
}
 800e588:	eeb0 0a47 	vmov.f32	s0, s14
 800e58c:	eef0 0a67 	vmov.f32	s1, s15
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	40240000 	.word	0x40240000
 800e59c:	757928e1 	.word	0x757928e1
 800e5a0:	3fa9018e 	.word	0x3fa9018e
 800e5a4:	00000000 	.word	0x00000000

0800e5a8 <can1_ams_cell_temperatures_t5s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s9_encode(double value)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e5b2:	f04f 0200 	mov.w	r2, #0
 800e5b6:	4b10      	ldr	r3, [pc, #64]	; (800e5f8 <can1_ams_cell_temperatures_t5s9_encode+0x50>)
 800e5b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e5bc:	f7f1 fe58 	bl	8000270 <__adddf3>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	4610      	mov	r0, r2
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	a309      	add	r3, pc, #36	; (adr r3, 800e5f0 <can1_ams_cell_temperatures_t5s9_encode+0x48>)
 800e5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ce:	f7f2 f92f 	bl	8000830 <__aeabi_ddiv>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	4610      	mov	r0, r2
 800e5d8:	4619      	mov	r1, r3
 800e5da:	f7f2 faaf 	bl	8000b3c <__aeabi_d2iz>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	b21b      	sxth	r3, r3
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3708      	adds	r7, #8
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	f3af 8000 	nop.w
 800e5f0:	757928e1 	.word	0x757928e1
 800e5f4:	3fa9018e 	.word	0x3fa9018e
 800e5f8:	40240000 	.word	0x40240000
 800e5fc:	00000000 	.word	0x00000000

0800e600 <can1_ams_cell_temperatures_t5s9_decode>:

double can1_ams_cell_temperatures_t5s9_decode(int16_t value)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	4603      	mov	r3, r0
 800e608:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e60a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e60e:	4618      	mov	r0, r3
 800e610:	f7f1 ff7a 	bl	8000508 <__aeabi_i2d>
 800e614:	a30d      	add	r3, pc, #52	; (adr r3, 800e64c <can1_ams_cell_temperatures_t5s9_decode+0x4c>)
 800e616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61a:	f7f1 ffdf 	bl	80005dc <__aeabi_dmul>
 800e61e:	4602      	mov	r2, r0
 800e620:	460b      	mov	r3, r1
 800e622:	4610      	mov	r0, r2
 800e624:	4619      	mov	r1, r3
 800e626:	f04f 0200 	mov.w	r2, #0
 800e62a:	4b07      	ldr	r3, [pc, #28]	; (800e648 <can1_ams_cell_temperatures_t5s9_decode+0x48>)
 800e62c:	f7f1 fe1e 	bl	800026c <__aeabi_dsub>
 800e630:	4602      	mov	r2, r0
 800e632:	460b      	mov	r3, r1
 800e634:	ec43 2b17 	vmov	d7, r2, r3
}
 800e638:	eeb0 0a47 	vmov.f32	s0, s14
 800e63c:	eef0 0a67 	vmov.f32	s1, s15
 800e640:	3708      	adds	r7, #8
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	40240000 	.word	0x40240000
 800e64c:	757928e1 	.word	0x757928e1
 800e650:	3fa9018e 	.word	0x3fa9018e
 800e654:	00000000 	.word	0x00000000

0800e658 <can1_ams_cell_temperatures_t5s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s10_encode(double value)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e662:	f04f 0200 	mov.w	r2, #0
 800e666:	4b10      	ldr	r3, [pc, #64]	; (800e6a8 <can1_ams_cell_temperatures_t5s10_encode+0x50>)
 800e668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e66c:	f7f1 fe00 	bl	8000270 <__adddf3>
 800e670:	4602      	mov	r2, r0
 800e672:	460b      	mov	r3, r1
 800e674:	4610      	mov	r0, r2
 800e676:	4619      	mov	r1, r3
 800e678:	a309      	add	r3, pc, #36	; (adr r3, 800e6a0 <can1_ams_cell_temperatures_t5s10_encode+0x48>)
 800e67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e67e:	f7f2 f8d7 	bl	8000830 <__aeabi_ddiv>
 800e682:	4602      	mov	r2, r0
 800e684:	460b      	mov	r3, r1
 800e686:	4610      	mov	r0, r2
 800e688:	4619      	mov	r1, r3
 800e68a:	f7f2 fa57 	bl	8000b3c <__aeabi_d2iz>
 800e68e:	4603      	mov	r3, r0
 800e690:	b21b      	sxth	r3, r3
}
 800e692:	4618      	mov	r0, r3
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	f3af 8000 	nop.w
 800e6a0:	757928e1 	.word	0x757928e1
 800e6a4:	3fa9018e 	.word	0x3fa9018e
 800e6a8:	40240000 	.word	0x40240000
 800e6ac:	00000000 	.word	0x00000000

0800e6b0 <can1_ams_cell_temperatures_t5s10_decode>:

double can1_ams_cell_temperatures_t5s10_decode(int16_t value)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e6ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7f1 ff22 	bl	8000508 <__aeabi_i2d>
 800e6c4:	a30d      	add	r3, pc, #52	; (adr r3, 800e6fc <can1_ams_cell_temperatures_t5s10_decode+0x4c>)
 800e6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ca:	f7f1 ff87 	bl	80005dc <__aeabi_dmul>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	4610      	mov	r0, r2
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	f04f 0200 	mov.w	r2, #0
 800e6da:	4b07      	ldr	r3, [pc, #28]	; (800e6f8 <can1_ams_cell_temperatures_t5s10_decode+0x48>)
 800e6dc:	f7f1 fdc6 	bl	800026c <__aeabi_dsub>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e6e8:	eeb0 0a47 	vmov.f32	s0, s14
 800e6ec:	eef0 0a67 	vmov.f32	s1, s15
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	40240000 	.word	0x40240000
 800e6fc:	757928e1 	.word	0x757928e1
 800e700:	3fa9018e 	.word	0x3fa9018e
 800e704:	00000000 	.word	0x00000000

0800e708 <can1_ams_cell_temperatures_t5s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s11_encode(double value)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e712:	f04f 0200 	mov.w	r2, #0
 800e716:	4b10      	ldr	r3, [pc, #64]	; (800e758 <can1_ams_cell_temperatures_t5s11_encode+0x50>)
 800e718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e71c:	f7f1 fda8 	bl	8000270 <__adddf3>
 800e720:	4602      	mov	r2, r0
 800e722:	460b      	mov	r3, r1
 800e724:	4610      	mov	r0, r2
 800e726:	4619      	mov	r1, r3
 800e728:	a309      	add	r3, pc, #36	; (adr r3, 800e750 <can1_ams_cell_temperatures_t5s11_encode+0x48>)
 800e72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72e:	f7f2 f87f 	bl	8000830 <__aeabi_ddiv>
 800e732:	4602      	mov	r2, r0
 800e734:	460b      	mov	r3, r1
 800e736:	4610      	mov	r0, r2
 800e738:	4619      	mov	r1, r3
 800e73a:	f7f2 f9ff 	bl	8000b3c <__aeabi_d2iz>
 800e73e:	4603      	mov	r3, r0
 800e740:	b21b      	sxth	r3, r3
}
 800e742:	4618      	mov	r0, r3
 800e744:	3708      	adds	r7, #8
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	f3af 8000 	nop.w
 800e750:	757928e1 	.word	0x757928e1
 800e754:	3fa9018e 	.word	0x3fa9018e
 800e758:	40240000 	.word	0x40240000
 800e75c:	00000000 	.word	0x00000000

0800e760 <can1_ams_cell_temperatures_t5s11_decode>:

double can1_ams_cell_temperatures_t5s11_decode(int16_t value)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	4603      	mov	r3, r0
 800e768:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e76a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e76e:	4618      	mov	r0, r3
 800e770:	f7f1 feca 	bl	8000508 <__aeabi_i2d>
 800e774:	a30d      	add	r3, pc, #52	; (adr r3, 800e7ac <can1_ams_cell_temperatures_t5s11_decode+0x4c>)
 800e776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77a:	f7f1 ff2f 	bl	80005dc <__aeabi_dmul>
 800e77e:	4602      	mov	r2, r0
 800e780:	460b      	mov	r3, r1
 800e782:	4610      	mov	r0, r2
 800e784:	4619      	mov	r1, r3
 800e786:	f04f 0200 	mov.w	r2, #0
 800e78a:	4b07      	ldr	r3, [pc, #28]	; (800e7a8 <can1_ams_cell_temperatures_t5s11_decode+0x48>)
 800e78c:	f7f1 fd6e 	bl	800026c <__aeabi_dsub>
 800e790:	4602      	mov	r2, r0
 800e792:	460b      	mov	r3, r1
 800e794:	ec43 2b17 	vmov	d7, r2, r3
}
 800e798:	eeb0 0a47 	vmov.f32	s0, s14
 800e79c:	eef0 0a67 	vmov.f32	s1, s15
 800e7a0:	3708      	adds	r7, #8
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	40240000 	.word	0x40240000
 800e7ac:	757928e1 	.word	0x757928e1
 800e7b0:	3fa9018e 	.word	0x3fa9018e
 800e7b4:	00000000 	.word	0x00000000

0800e7b8 <can1_ams_cell_temperatures_t5s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s12_encode(double value)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e7c2:	f04f 0200 	mov.w	r2, #0
 800e7c6:	4b10      	ldr	r3, [pc, #64]	; (800e808 <can1_ams_cell_temperatures_t5s12_encode+0x50>)
 800e7c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e7cc:	f7f1 fd50 	bl	8000270 <__adddf3>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	4610      	mov	r0, r2
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	a309      	add	r3, pc, #36	; (adr r3, 800e800 <can1_ams_cell_temperatures_t5s12_encode+0x48>)
 800e7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7de:	f7f2 f827 	bl	8000830 <__aeabi_ddiv>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	4610      	mov	r0, r2
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	f7f2 f9a7 	bl	8000b3c <__aeabi_d2iz>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	b21b      	sxth	r3, r3
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3708      	adds	r7, #8
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	f3af 8000 	nop.w
 800e800:	757928e1 	.word	0x757928e1
 800e804:	3fa9018e 	.word	0x3fa9018e
 800e808:	40240000 	.word	0x40240000
 800e80c:	00000000 	.word	0x00000000

0800e810 <can1_ams_cell_temperatures_t5s12_decode>:

double can1_ams_cell_temperatures_t5s12_decode(int16_t value)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	4603      	mov	r3, r0
 800e818:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e81a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e81e:	4618      	mov	r0, r3
 800e820:	f7f1 fe72 	bl	8000508 <__aeabi_i2d>
 800e824:	a30d      	add	r3, pc, #52	; (adr r3, 800e85c <can1_ams_cell_temperatures_t5s12_decode+0x4c>)
 800e826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82a:	f7f1 fed7 	bl	80005dc <__aeabi_dmul>
 800e82e:	4602      	mov	r2, r0
 800e830:	460b      	mov	r3, r1
 800e832:	4610      	mov	r0, r2
 800e834:	4619      	mov	r1, r3
 800e836:	f04f 0200 	mov.w	r2, #0
 800e83a:	4b07      	ldr	r3, [pc, #28]	; (800e858 <can1_ams_cell_temperatures_t5s12_decode+0x48>)
 800e83c:	f7f1 fd16 	bl	800026c <__aeabi_dsub>
 800e840:	4602      	mov	r2, r0
 800e842:	460b      	mov	r3, r1
 800e844:	ec43 2b17 	vmov	d7, r2, r3
}
 800e848:	eeb0 0a47 	vmov.f32	s0, s14
 800e84c:	eef0 0a67 	vmov.f32	s1, s15
 800e850:	3708      	adds	r7, #8
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	40240000 	.word	0x40240000
 800e85c:	757928e1 	.word	0x757928e1
 800e860:	3fa9018e 	.word	0x3fa9018e

0800e864 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e864:	b480      	push	{r7}
 800e866:	b083      	sub	sp, #12
 800e868:	af00      	add	r7, sp, #0
 800e86a:	4603      	mov	r3, r0
 800e86c:	71fb      	strb	r3, [r7, #7]
 800e86e:	460b      	mov	r3, r1
 800e870:	71bb      	strb	r3, [r7, #6]
 800e872:	4613      	mov	r3, r2
 800e874:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800e876:	79fa      	ldrb	r2, [r7, #7]
 800e878:	79bb      	ldrb	r3, [r7, #6]
 800e87a:	fa02 f303 	lsl.w	r3, r2, r3
 800e87e:	b2da      	uxtb	r2, r3
 800e880:	797b      	ldrb	r3, [r7, #5]
 800e882:	4013      	ands	r3, r2
 800e884:	b2db      	uxtb	r3, r3
}
 800e886:	4618      	mov	r0, r3
 800e888:	370c      	adds	r7, #12
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr

0800e892 <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e892:	b480      	push	{r7}
 800e894:	b083      	sub	sp, #12
 800e896:	af00      	add	r7, sp, #0
 800e898:	4603      	mov	r3, r0
 800e89a:	80fb      	strh	r3, [r7, #6]
 800e89c:	460b      	mov	r3, r1
 800e89e:	717b      	strb	r3, [r7, #5]
 800e8a0:	4613      	mov	r3, r2
 800e8a2:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800e8a4:	88fa      	ldrh	r2, [r7, #6]
 800e8a6:	797b      	ldrb	r3, [r7, #5]
 800e8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ac:	b2da      	uxtb	r2, r3
 800e8ae:	793b      	ldrb	r3, [r7, #4]
 800e8b0:	4013      	ands	r3, r2
 800e8b2:	b2db      	uxtb	r3, r3
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <pack_left_shift_u64>:

static inline uint8_t pack_left_shift_u64(
    uint64_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e8c0:	b4f0      	push	{r4, r5, r6, r7}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800e8ca:	4611      	mov	r1, r2
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	71fb      	strb	r3, [r7, #7]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	71bb      	strb	r3, [r7, #6]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800e8d6:	79f9      	ldrb	r1, [r7, #7]
 800e8d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e8dc:	f1a1 0620 	sub.w	r6, r1, #32
 800e8e0:	f1c1 0020 	rsb	r0, r1, #32
 800e8e4:	fa03 f501 	lsl.w	r5, r3, r1
 800e8e8:	fa02 f606 	lsl.w	r6, r2, r6
 800e8ec:	4335      	orrs	r5, r6
 800e8ee:	fa22 f000 	lsr.w	r0, r2, r0
 800e8f2:	4305      	orrs	r5, r0
 800e8f4:	fa02 f401 	lsl.w	r4, r2, r1
 800e8f8:	b2e2      	uxtb	r2, r4
 800e8fa:	79bb      	ldrb	r3, [r7, #6]
 800e8fc:	4013      	ands	r3, r2
 800e8fe:	b2db      	uxtb	r3, r3
}
 800e900:	4618      	mov	r0, r3
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bcf0      	pop	{r4, r5, r6, r7}
 800e908:	4770      	bx	lr

0800e90a <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e90a:	b480      	push	{r7}
 800e90c:	b083      	sub	sp, #12
 800e90e:	af00      	add	r7, sp, #0
 800e910:	4603      	mov	r3, r0
 800e912:	80fb      	strh	r3, [r7, #6]
 800e914:	460b      	mov	r3, r1
 800e916:	717b      	strb	r3, [r7, #5]
 800e918:	4613      	mov	r3, r2
 800e91a:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 800e91c:	88fa      	ldrh	r2, [r7, #6]
 800e91e:	797b      	ldrb	r3, [r7, #5]
 800e920:	fa42 f303 	asr.w	r3, r2, r3
 800e924:	b2da      	uxtb	r2, r3
 800e926:	793b      	ldrb	r3, [r7, #4]
 800e928:	4013      	ands	r3, r2
 800e92a:	b2db      	uxtb	r3, r3
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <pack_right_shift_u64>:

static inline uint8_t pack_right_shift_u64(
    uint64_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e938:	b4f0      	push	{r4, r5, r6, r7}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800e942:	4611      	mov	r1, r2
 800e944:	461a      	mov	r2, r3
 800e946:	460b      	mov	r3, r1
 800e948:	71fb      	strb	r3, [r7, #7]
 800e94a:	4613      	mov	r3, r2
 800e94c:	71bb      	strb	r3, [r7, #6]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 800e94e:	79f9      	ldrb	r1, [r7, #7]
 800e950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e954:	f1c1 0620 	rsb	r6, r1, #32
 800e958:	f1a1 0020 	sub.w	r0, r1, #32
 800e95c:	fa22 f401 	lsr.w	r4, r2, r1
 800e960:	fa03 f606 	lsl.w	r6, r3, r6
 800e964:	4334      	orrs	r4, r6
 800e966:	fa23 f000 	lsr.w	r0, r3, r0
 800e96a:	4304      	orrs	r4, r0
 800e96c:	fa23 f501 	lsr.w	r5, r3, r1
 800e970:	b2e2      	uxtb	r2, r4
 800e972:	79bb      	ldrb	r3, [r7, #6]
 800e974:	4013      	ands	r3, r2
 800e976:	b2db      	uxtb	r3, r3
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3710      	adds	r7, #16
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bcf0      	pop	{r4, r5, r6, r7}
 800e980:	4770      	bx	lr

0800e982 <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e982:	b480      	push	{r7}
 800e984:	b083      	sub	sp, #12
 800e986:	af00      	add	r7, sp, #0
 800e988:	4603      	mov	r3, r0
 800e98a:	71fb      	strb	r3, [r7, #7]
 800e98c:	460b      	mov	r3, r1
 800e98e:	71bb      	strb	r3, [r7, #6]
 800e990:	4613      	mov	r3, r2
 800e992:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 800e994:	79fa      	ldrb	r2, [r7, #7]
 800e996:	797b      	ldrb	r3, [r7, #5]
 800e998:	4013      	ands	r3, r2
 800e99a:	b2db      	uxtb	r3, r3
 800e99c:	461a      	mov	r2, r3
 800e99e:	79bb      	ldrb	r3, [r7, #6]
 800e9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800e9a4:	b29b      	uxth	r3, r3
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	370c      	adds	r7, #12
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr

0800e9b2 <unpack_left_shift_u64>:

static inline uint64_t unpack_left_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e9b2:	b4f0      	push	{r4, r5, r6, r7}
 800e9b4:	b082      	sub	sp, #8
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	71fb      	strb	r3, [r7, #7]
 800e9bc:	460b      	mov	r3, r1
 800e9be:	71bb      	strb	r3, [r7, #6]
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) << shift);
 800e9c4:	79fa      	ldrb	r2, [r7, #7]
 800e9c6:	797b      	ldrb	r3, [r7, #5]
 800e9c8:	4013      	ands	r3, r2
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	b2da      	uxtb	r2, r3
 800e9ce:	f04f 0300 	mov.w	r3, #0
 800e9d2:	79b9      	ldrb	r1, [r7, #6]
 800e9d4:	f1a1 0620 	sub.w	r6, r1, #32
 800e9d8:	f1c1 0020 	rsb	r0, r1, #32
 800e9dc:	fa03 f501 	lsl.w	r5, r3, r1
 800e9e0:	fa02 f606 	lsl.w	r6, r2, r6
 800e9e4:	4335      	orrs	r5, r6
 800e9e6:	fa22 f000 	lsr.w	r0, r2, r0
 800e9ea:	4305      	orrs	r5, r0
 800e9ec:	fa02 f401 	lsl.w	r4, r2, r1
 800e9f0:	4622      	mov	r2, r4
 800e9f2:	462b      	mov	r3, r5
}
 800e9f4:	4610      	mov	r0, r2
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	3708      	adds	r7, #8
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bcf0      	pop	{r4, r5, r6, r7}
 800e9fe:	4770      	bx	lr

0800ea00 <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	4603      	mov	r3, r0
 800ea08:	71fb      	strb	r3, [r7, #7]
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	71bb      	strb	r3, [r7, #6]
 800ea0e:	4613      	mov	r3, r2
 800ea10:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800ea12:	79fa      	ldrb	r2, [r7, #7]
 800ea14:	797b      	ldrb	r3, [r7, #5]
 800ea16:	4013      	ands	r3, r2
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	79bb      	ldrb	r3, [r7, #6]
 800ea1e:	fa42 f303 	asr.w	r3, r2, r3
 800ea22:	b2db      	uxtb	r3, r3
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	370c      	adds	r7, #12
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	4603      	mov	r3, r0
 800ea38:	71fb      	strb	r3, [r7, #7]
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	71bb      	strb	r3, [r7, #6]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 800ea42:	79fa      	ldrb	r2, [r7, #7]
 800ea44:	797b      	ldrb	r3, [r7, #5]
 800ea46:	4013      	ands	r3, r2
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	79bb      	ldrb	r3, [r7, #6]
 800ea4e:	fa42 f303 	asr.w	r3, r2, r3
 800ea52:	b29b      	uxth	r3, r3
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	370c      	adds	r7, #12
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr

0800ea60 <unpack_right_shift_u64>:

static inline uint64_t unpack_right_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800ea60:	b4f0      	push	{r4, r5, r6, r7}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	4603      	mov	r3, r0
 800ea68:	71fb      	strb	r3, [r7, #7]
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	71bb      	strb	r3, [r7, #6]
 800ea6e:	4613      	mov	r3, r2
 800ea70:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) >> shift);
 800ea72:	79fa      	ldrb	r2, [r7, #7]
 800ea74:	797b      	ldrb	r3, [r7, #5]
 800ea76:	4013      	ands	r3, r2
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	b2da      	uxtb	r2, r3
 800ea7c:	f04f 0300 	mov.w	r3, #0
 800ea80:	79b9      	ldrb	r1, [r7, #6]
 800ea82:	f1c1 0620 	rsb	r6, r1, #32
 800ea86:	f1a1 0020 	sub.w	r0, r1, #32
 800ea8a:	fa22 f401 	lsr.w	r4, r2, r1
 800ea8e:	fa03 f606 	lsl.w	r6, r3, r6
 800ea92:	4334      	orrs	r4, r6
 800ea94:	fa23 f000 	lsr.w	r0, r3, r0
 800ea98:	4304      	orrs	r4, r0
 800ea9a:	fa23 f501 	lsr.w	r5, r3, r1
 800ea9e:	4622      	mov	r2, r4
 800eaa0:	462b      	mov	r3, r5
}
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bcf0      	pop	{r4, r5, r6, r7}
 800eaac:	4770      	bx	lr

0800eaae <can2_amk1_setpoints_1_unpack>:

int can2_amk1_setpoints_1_unpack(
    struct can2_amk1_setpoints_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b086      	sub	sp, #24
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	60f8      	str	r0, [r7, #12]
 800eab6:	60b9      	str	r1, [r7, #8]
 800eab8:	607a      	str	r2, [r7, #4]
    uint16_t amk1_target_velocity;
    uint16_t amk1_torque_limit_negativ;
    uint16_t amk1_torque_limit_positiv;

    if (size < 8u) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2b07      	cmp	r3, #7
 800eabe:	d802      	bhi.n	800eac6 <can2_amk1_setpoints_1_unpack+0x18>
        return (-EINVAL);
 800eac0:	f06f 0315 	mvn.w	r3, #21
 800eac4:	e081      	b.n	800ebca <can2_amk1_setpoints_1_unpack+0x11c>
    }

    dst_p->amk1_control_inverter_on = unpack_right_shift_u8(src_p[1], 0u, 0x01u);
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	3301      	adds	r3, #1
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	2201      	movs	r2, #1
 800eace:	2100      	movs	r1, #0
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7ff ff95 	bl	800ea00 <unpack_right_shift_u8>
 800ead6:	4603      	mov	r3, r0
 800ead8:	461a      	mov	r2, r3
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	701a      	strb	r2, [r3, #0]
    dst_p->amk1_control_dc_on = unpack_right_shift_u8(src_p[1], 1u, 0x02u);
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	3301      	adds	r3, #1
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	2202      	movs	r2, #2
 800eae6:	2101      	movs	r1, #1
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7ff ff89 	bl	800ea00 <unpack_right_shift_u8>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	705a      	strb	r2, [r3, #1]
    dst_p->amk1_control_enable = unpack_right_shift_u8(src_p[1], 2u, 0x04u);
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	2204      	movs	r2, #4
 800eafe:	2102      	movs	r1, #2
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7ff ff7d 	bl	800ea00 <unpack_right_shift_u8>
 800eb06:	4603      	mov	r3, r0
 800eb08:	461a      	mov	r2, r3
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	709a      	strb	r2, [r3, #2]
    dst_p->amk1_control_error_reset = unpack_right_shift_u8(src_p[1], 3u, 0x08u);
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	3301      	adds	r3, #1
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	2208      	movs	r2, #8
 800eb16:	2103      	movs	r1, #3
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7ff ff71 	bl	800ea00 <unpack_right_shift_u8>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	461a      	mov	r2, r3
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	70da      	strb	r2, [r3, #3]
    amk1_target_velocity = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	3302      	adds	r3, #2
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	22ff      	movs	r2, #255	; 0xff
 800eb2e:	2100      	movs	r1, #0
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7ff ff7d 	bl	800ea30 <unpack_right_shift_u16>
 800eb36:	4603      	mov	r3, r0
 800eb38:	82fb      	strh	r3, [r7, #22]
    amk1_target_velocity |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	3303      	adds	r3, #3
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	22ff      	movs	r2, #255	; 0xff
 800eb42:	2108      	movs	r1, #8
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff ff1c 	bl	800e982 <unpack_left_shift_u16>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	8afb      	ldrh	r3, [r7, #22]
 800eb50:	4313      	orrs	r3, r2
 800eb52:	82fb      	strh	r3, [r7, #22]
    dst_p->amk1_target_velocity = (int16_t)amk1_target_velocity;
 800eb54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	809a      	strh	r2, [r3, #4]
    amk1_torque_limit_positiv = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	3304      	adds	r3, #4
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	22ff      	movs	r2, #255	; 0xff
 800eb64:	2100      	movs	r1, #0
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7ff ff62 	bl	800ea30 <unpack_right_shift_u16>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	82bb      	strh	r3, [r7, #20]
    amk1_torque_limit_positiv |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	3305      	adds	r3, #5
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	22ff      	movs	r2, #255	; 0xff
 800eb78:	2108      	movs	r1, #8
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7ff ff01 	bl	800e982 <unpack_left_shift_u16>
 800eb80:	4603      	mov	r3, r0
 800eb82:	461a      	mov	r2, r3
 800eb84:	8abb      	ldrh	r3, [r7, #20]
 800eb86:	4313      	orrs	r3, r2
 800eb88:	82bb      	strh	r3, [r7, #20]
    dst_p->amk1_torque_limit_positiv = (int16_t)amk1_torque_limit_positiv;
 800eb8a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	80da      	strh	r2, [r3, #6]
    amk1_torque_limit_negativ = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	3306      	adds	r3, #6
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	22ff      	movs	r2, #255	; 0xff
 800eb9a:	2100      	movs	r1, #0
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7ff ff47 	bl	800ea30 <unpack_right_shift_u16>
 800eba2:	4603      	mov	r3, r0
 800eba4:	827b      	strh	r3, [r7, #18]
    amk1_torque_limit_negativ |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	3307      	adds	r3, #7
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	22ff      	movs	r2, #255	; 0xff
 800ebae:	2108      	movs	r1, #8
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7ff fee6 	bl	800e982 <unpack_left_shift_u16>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	461a      	mov	r2, r3
 800ebba:	8a7b      	ldrh	r3, [r7, #18]
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	827b      	strh	r3, [r7, #18]
    dst_p->amk1_torque_limit_negativ = (int16_t)amk1_torque_limit_negativ;
 800ebc0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	811a      	strh	r2, [r3, #8]

    return (0);
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3718      	adds	r7, #24
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <can2_amk1_setpoints_1_amk1_control_inverter_on_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_inverter_on_decode(uint8_t value)
{
 800ebd2:	b580      	push	{r7, lr}
 800ebd4:	b082      	sub	sp, #8
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	4603      	mov	r3, r0
 800ebda:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800ebdc:	79fb      	ldrb	r3, [r7, #7]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7f1 fc82 	bl	80004e8 <__aeabi_ui2d>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	ec43 2b17 	vmov	d7, r2, r3
}
 800ebec:	eeb0 0a47 	vmov.f32	s0, s14
 800ebf0:	eef0 0a67 	vmov.f32	s1, s15
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <can2_amk1_setpoints_1_amk1_control_dc_on_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_dc_on_decode(uint8_t value)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b082      	sub	sp, #8
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	4603      	mov	r3, r0
 800ec02:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800ec04:	79fb      	ldrb	r3, [r7, #7]
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7f1 fc6e 	bl	80004e8 <__aeabi_ui2d>
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	460b      	mov	r3, r1
 800ec10:	ec43 2b17 	vmov	d7, r2, r3
}
 800ec14:	eeb0 0a47 	vmov.f32	s0, s14
 800ec18:	eef0 0a67 	vmov.f32	s1, s15
 800ec1c:	3708      	adds	r7, #8
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <can2_amk1_setpoints_1_amk1_control_enable_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_enable_decode(uint8_t value)
{
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b082      	sub	sp, #8
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	4603      	mov	r3, r0
 800ec2a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800ec2c:	79fb      	ldrb	r3, [r7, #7]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7f1 fc5a 	bl	80004e8 <__aeabi_ui2d>
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	ec43 2b17 	vmov	d7, r2, r3
}
 800ec3c:	eeb0 0a47 	vmov.f32	s0, s14
 800ec40:	eef0 0a67 	vmov.f32	s1, s15
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}

0800ec4a <can2_amk1_setpoints_1_amk1_control_error_reset_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_error_reset_decode(uint8_t value)
{
 800ec4a:	b580      	push	{r7, lr}
 800ec4c:	b082      	sub	sp, #8
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	4603      	mov	r3, r0
 800ec52:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800ec54:	79fb      	ldrb	r3, [r7, #7]
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7f1 fc46 	bl	80004e8 <__aeabi_ui2d>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	460b      	mov	r3, r1
 800ec60:	ec43 2b17 	vmov	d7, r2, r3
}
 800ec64:	eeb0 0a47 	vmov.f32	s0, s14
 800ec68:	eef0 0a67 	vmov.f32	s1, s15
 800ec6c:	3708      	adds	r7, #8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <can2_amk1_setpoints_1_amk1_target_velocity_decode>:
{
    return (int16_t)(value);
}

double can2_amk1_setpoints_1_amk1_target_velocity_decode(int16_t value)
{
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b082      	sub	sp, #8
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	4603      	mov	r3, r0
 800ec7a:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800ec7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7f1 fc41 	bl	8000508 <__aeabi_i2d>
 800ec86:	4602      	mov	r2, r0
 800ec88:	460b      	mov	r3, r1
 800ec8a:	ec43 2b17 	vmov	d7, r2, r3
}
 800ec8e:	eeb0 0a47 	vmov.f32	s0, s14
 800ec92:	eef0 0a67 	vmov.f32	s1, s15
 800ec96:	3708      	adds	r7, #8
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode>:
{
    return (int16_t)(value);
}

double can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode(int16_t value)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	4603      	mov	r3, r0
 800eca4:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800eca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7f1 fc2c 	bl	8000508 <__aeabi_i2d>
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	460b      	mov	r3, r1
 800ecb4:	ec43 2b17 	vmov	d7, r2, r3
}
 800ecb8:	eeb0 0a47 	vmov.f32	s0, s14
 800ecbc:	eef0 0a67 	vmov.f32	s1, s15
 800ecc0:	3708      	adds	r7, #8
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode>:
{
    return (int16_t)(value);
}

double can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode(int16_t value)
{
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b082      	sub	sp, #8
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	4603      	mov	r3, r0
 800ecce:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800ecd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7f1 fc17 	bl	8000508 <__aeabi_i2d>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	460b      	mov	r3, r1
 800ecde:	ec43 2b17 	vmov	d7, r2, r3
}
 800ece2:	eeb0 0a47 	vmov.f32	s0, s14
 800ece6:	eef0 0a67 	vmov.f32	s1, s15
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <can2_ivt_msg_result_i_pack>:

int can2_ivt_msg_result_i_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_i_t *src_p,
    size_t size)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	607a      	str	r2, [r7, #4]
    uint64_t i_ts;

    if (size < 6u) {
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2b05      	cmp	r3, #5
 800ed00:	d802      	bhi.n	800ed08 <can2_ivt_msg_result_i_pack+0x18>
        return (-EINVAL);
 800ed02:	f06f 0315 	mvn.w	r3, #21
 800ed06:	e068      	b.n	800edda <can2_ivt_msg_result_i_pack+0xea>
    }

    memset(&dst_p[0], 0, 6);
 800ed08:	2206      	movs	r2, #6
 800ed0a:	2100      	movs	r1, #0
 800ed0c:	68f8      	ldr	r0, [r7, #12]
 800ed0e:	f01f fce7 	bl	802e6e0 <memset>

    i_ts = (uint64_t)src_p->i_ts;
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    dst_p[0] |= pack_right_shift_u64(i_ts, 40u, 0xffu);
 800ed1c:	23ff      	movs	r3, #255	; 0xff
 800ed1e:	2228      	movs	r2, #40	; 0x28
 800ed20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ed24:	f7ff fe08 	bl	800e938 <pack_right_shift_u64>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	b2da      	uxtb	r2, r3
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u64(i_ts, 32u, 0xffu);
 800ed38:	23ff      	movs	r3, #255	; 0xff
 800ed3a:	2220      	movs	r2, #32
 800ed3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ed40:	f7ff fdfa 	bl	800e938 <pack_right_shift_u64>
 800ed44:	4603      	mov	r3, r0
 800ed46:	4619      	mov	r1, r3
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	781a      	ldrb	r2, [r3, #0]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	3301      	adds	r3, #1
 800ed52:	430a      	orrs	r2, r1
 800ed54:	b2d2      	uxtb	r2, r2
 800ed56:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u64(i_ts, 24u, 0xffu);
 800ed58:	23ff      	movs	r3, #255	; 0xff
 800ed5a:	2218      	movs	r2, #24
 800ed5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ed60:	f7ff fdea 	bl	800e938 <pack_right_shift_u64>
 800ed64:	4603      	mov	r3, r0
 800ed66:	4619      	mov	r1, r3
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	3302      	adds	r3, #2
 800ed6c:	781a      	ldrb	r2, [r3, #0]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	3302      	adds	r3, #2
 800ed72:	430a      	orrs	r2, r1
 800ed74:	b2d2      	uxtb	r2, r2
 800ed76:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u64(i_ts, 16u, 0xffu);
 800ed78:	23ff      	movs	r3, #255	; 0xff
 800ed7a:	2210      	movs	r2, #16
 800ed7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ed80:	f7ff fdda 	bl	800e938 <pack_right_shift_u64>
 800ed84:	4603      	mov	r3, r0
 800ed86:	4619      	mov	r1, r3
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	3303      	adds	r3, #3
 800ed8c:	781a      	ldrb	r2, [r3, #0]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	3303      	adds	r3, #3
 800ed92:	430a      	orrs	r2, r1
 800ed94:	b2d2      	uxtb	r2, r2
 800ed96:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u64(i_ts, 8u, 0xffu);
 800ed98:	23ff      	movs	r3, #255	; 0xff
 800ed9a:	2208      	movs	r2, #8
 800ed9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800eda0:	f7ff fdca 	bl	800e938 <pack_right_shift_u64>
 800eda4:	4603      	mov	r3, r0
 800eda6:	4619      	mov	r1, r3
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	3304      	adds	r3, #4
 800edac:	781a      	ldrb	r2, [r3, #0]
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	3304      	adds	r3, #4
 800edb2:	430a      	orrs	r2, r1
 800edb4:	b2d2      	uxtb	r2, r2
 800edb6:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u64(i_ts, 0u, 0xffu);
 800edb8:	23ff      	movs	r3, #255	; 0xff
 800edba:	2200      	movs	r2, #0
 800edbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800edc0:	f7ff fd7e 	bl	800e8c0 <pack_left_shift_u64>
 800edc4:	4603      	mov	r3, r0
 800edc6:	4619      	mov	r1, r3
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	3305      	adds	r3, #5
 800edcc:	781a      	ldrb	r2, [r3, #0]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	3305      	adds	r3, #5
 800edd2:	430a      	orrs	r2, r1
 800edd4:	b2d2      	uxtb	r2, r2
 800edd6:	701a      	strb	r2, [r3, #0]

    return (6);
 800edd8:	2306      	movs	r3, #6
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3718      	adds	r7, #24
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
	...

0800ede4 <can2_ivt_msg_result_i_unpack>:

int can2_ivt_msg_result_i_unpack(
    struct can2_ivt_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800ede4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ede8:	b08e      	sub	sp, #56	; 0x38
 800edea:	af00      	add	r7, sp, #0
 800edec:	62f8      	str	r0, [r7, #44]	; 0x2c
 800edee:	62b9      	str	r1, [r7, #40]	; 0x28
 800edf0:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t i_ts;

    if (size < 6u) {
 800edf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf4:	2b05      	cmp	r3, #5
 800edf6:	d802      	bhi.n	800edfe <can2_ivt_msg_result_i_unpack+0x1a>
        return (-EINVAL);
 800edf8:	f06f 0315 	mvn.w	r3, #21
 800edfc:	e081      	b.n	800ef02 <can2_ivt_msg_result_i_unpack+0x11e>
    }

    i_ts = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 800edfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	22ff      	movs	r2, #255	; 0xff
 800ee04:	2128      	movs	r1, #40	; 0x28
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff fdd3 	bl	800e9b2 <unpack_left_shift_u64>
 800ee0c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	3301      	adds	r3, #1
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	22ff      	movs	r2, #255	; 0xff
 800ee18:	2120      	movs	r1, #32
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7ff fdc9 	bl	800e9b2 <unpack_left_shift_u64>
 800ee20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ee24:	ea42 0400 	orr.w	r4, r2, r0
 800ee28:	ea43 0501 	orr.w	r5, r3, r1
 800ee2c:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 800ee30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee32:	3302      	adds	r3, #2
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	22ff      	movs	r2, #255	; 0xff
 800ee38:	2118      	movs	r1, #24
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7ff fdb9 	bl	800e9b2 <unpack_left_shift_u64>
 800ee40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ee44:	ea42 0800 	orr.w	r8, r2, r0
 800ee48:	ea43 0901 	orr.w	r9, r3, r1
 800ee4c:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 800ee50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee52:	3303      	adds	r3, #3
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	22ff      	movs	r2, #255	; 0xff
 800ee58:	2110      	movs	r1, #16
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7ff fda9 	bl	800e9b2 <unpack_left_shift_u64>
 800ee60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ee64:	ea42 0400 	orr.w	r4, r2, r0
 800ee68:	613c      	str	r4, [r7, #16]
 800ee6a:	430b      	orrs	r3, r1
 800ee6c:	617b      	str	r3, [r7, #20]
 800ee6e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ee72:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800ee76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee78:	3304      	adds	r3, #4
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	22ff      	movs	r2, #255	; 0xff
 800ee7e:	2108      	movs	r1, #8
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7ff fd96 	bl	800e9b2 <unpack_left_shift_u64>
 800ee86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ee8a:	ea42 0400 	orr.w	r4, r2, r0
 800ee8e:	60bc      	str	r4, [r7, #8]
 800ee90:	430b      	orrs	r3, r1
 800ee92:	60fb      	str	r3, [r7, #12]
 800ee94:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ee98:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 800ee9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9e:	3305      	adds	r3, #5
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	22ff      	movs	r2, #255	; 0xff
 800eea4:	2100      	movs	r1, #0
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7ff fdda 	bl	800ea60 <unpack_right_shift_u64>
 800eeac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eeb0:	ea42 0400 	orr.w	r4, r2, r0
 800eeb4:	603c      	str	r4, [r7, #0]
 800eeb6:	430b      	orrs	r3, r1
 800eeb8:	607b      	str	r3, [r7, #4]
 800eeba:	e9d7 3400 	ldrd	r3, r4, [r7]
 800eebe:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((i_ts & (1ull << 47)) != 0ull) {
 800eec2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eec6:	f04f 0000 	mov.w	r0, #0
 800eeca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800eece:	ea02 0400 	and.w	r4, r2, r0
 800eed2:	61bc      	str	r4, [r7, #24]
 800eed4:	400b      	ands	r3, r1
 800eed6:	61fb      	str	r3, [r7, #28]
 800eed8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800eedc:	4323      	orrs	r3, r4
 800eede:	d00a      	beq.n	800eef6 <can2_ivt_msg_result_i_unpack+0x112>
        i_ts |= 0xffff000000000000ull;
 800eee0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eee4:	f04f 0000 	mov.w	r0, #0
 800eee8:	4908      	ldr	r1, [pc, #32]	; (800ef0c <can2_ivt_msg_result_i_unpack+0x128>)
 800eeea:	ea42 0a00 	orr.w	sl, r2, r0
 800eeee:	ea43 0b01 	orr.w	fp, r3, r1
 800eef2:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->i_ts = (int64_t)i_ts;
 800eef6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eefa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eefc:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 800ef00:	2300      	movs	r3, #0
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3738      	adds	r7, #56	; 0x38
 800ef06:	46bd      	mov	sp, r7
 800ef08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef0c:	ffff0000 	.word	0xffff0000

0800ef10 <can2_ivt_msg_result_i_i_ts_encode>:

int64_t can2_ivt_msg_result_i_i_ts_encode(double value)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	ed87 0b00 	vstr	d0, [r7]
    return (int64_t)(value / 0.001);
 800ef1a:	a30b      	add	r3, pc, #44	; (adr r3, 800ef48 <can2_ivt_msg_result_i_i_ts_encode+0x38>)
 800ef1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef24:	f7f1 fc84 	bl	8000830 <__aeabi_ddiv>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	4610      	mov	r0, r2
 800ef2e:	4619      	mov	r1, r3
 800ef30:	f7f1 feb4 	bl	8000c9c <__aeabi_d2lz>
 800ef34:	4602      	mov	r2, r0
 800ef36:	460b      	mov	r3, r1
}
 800ef38:	4610      	mov	r0, r2
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	3708      	adds	r7, #8
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	f3af 8000 	nop.w
 800ef48:	d2f1a9fc 	.word	0xd2f1a9fc
 800ef4c:	3f50624d 	.word	0x3f50624d

0800ef50 <can2_ivt_msg_result_i_i_ts_decode>:

double can2_ivt_msg_result_i_i_ts_decode(int64_t value)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	e9c7 0100 	strd	r0, r1, [r7]
    return ((double)value * 0.001);
 800ef5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef5e:	f7f1 fb0f 	bl	8000580 <__aeabi_l2d>
 800ef62:	a309      	add	r3, pc, #36	; (adr r3, 800ef88 <can2_ivt_msg_result_i_i_ts_decode+0x38>)
 800ef64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef68:	f7f1 fb38 	bl	80005dc <__aeabi_dmul>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	460b      	mov	r3, r1
 800ef70:	ec43 2b17 	vmov	d7, r2, r3
}
 800ef74:	eeb0 0a47 	vmov.f32	s0, s14
 800ef78:	eef0 0a67 	vmov.f32	s1, s15
 800ef7c:	3708      	adds	r7, #8
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	f3af 8000 	nop.w
 800ef88:	d2f1a9fc 	.word	0xd2f1a9fc
 800ef8c:	3f50624d 	.word	0x3f50624d

0800ef90 <can2_ivt_msg_result_u1_pack>:

int can2_ivt_msg_result_u1_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_u1_t *src_p,
    size_t size)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	60b9      	str	r1, [r7, #8]
 800ef9a:	607a      	str	r2, [r7, #4]
    uint64_t u_cells;

    if (size < 6u) {
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2b05      	cmp	r3, #5
 800efa0:	d802      	bhi.n	800efa8 <can2_ivt_msg_result_u1_pack+0x18>
        return (-EINVAL);
 800efa2:	f06f 0315 	mvn.w	r3, #21
 800efa6:	e068      	b.n	800f07a <can2_ivt_msg_result_u1_pack+0xea>
    }

    memset(&dst_p[0], 0, 6);
 800efa8:	2206      	movs	r2, #6
 800efaa:	2100      	movs	r1, #0
 800efac:	68f8      	ldr	r0, [r7, #12]
 800efae:	f01f fb97 	bl	802e6e0 <memset>

    u_cells = (uint64_t)src_p->u_cells;
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    dst_p[0] |= pack_right_shift_u64(u_cells, 40u, 0xffu);
 800efbc:	23ff      	movs	r3, #255	; 0xff
 800efbe:	2228      	movs	r2, #40	; 0x28
 800efc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800efc4:	f7ff fcb8 	bl	800e938 <pack_right_shift_u64>
 800efc8:	4603      	mov	r3, r0
 800efca:	461a      	mov	r2, r3
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	4313      	orrs	r3, r2
 800efd2:	b2da      	uxtb	r2, r3
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u64(u_cells, 32u, 0xffu);
 800efd8:	23ff      	movs	r3, #255	; 0xff
 800efda:	2220      	movs	r2, #32
 800efdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800efe0:	f7ff fcaa 	bl	800e938 <pack_right_shift_u64>
 800efe4:	4603      	mov	r3, r0
 800efe6:	4619      	mov	r1, r3
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	3301      	adds	r3, #1
 800efec:	781a      	ldrb	r2, [r3, #0]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	3301      	adds	r3, #1
 800eff2:	430a      	orrs	r2, r1
 800eff4:	b2d2      	uxtb	r2, r2
 800eff6:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u64(u_cells, 24u, 0xffu);
 800eff8:	23ff      	movs	r3, #255	; 0xff
 800effa:	2218      	movs	r2, #24
 800effc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f000:	f7ff fc9a 	bl	800e938 <pack_right_shift_u64>
 800f004:	4603      	mov	r3, r0
 800f006:	4619      	mov	r1, r3
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	3302      	adds	r3, #2
 800f00c:	781a      	ldrb	r2, [r3, #0]
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	3302      	adds	r3, #2
 800f012:	430a      	orrs	r2, r1
 800f014:	b2d2      	uxtb	r2, r2
 800f016:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u64(u_cells, 16u, 0xffu);
 800f018:	23ff      	movs	r3, #255	; 0xff
 800f01a:	2210      	movs	r2, #16
 800f01c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f020:	f7ff fc8a 	bl	800e938 <pack_right_shift_u64>
 800f024:	4603      	mov	r3, r0
 800f026:	4619      	mov	r1, r3
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	3303      	adds	r3, #3
 800f02c:	781a      	ldrb	r2, [r3, #0]
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	3303      	adds	r3, #3
 800f032:	430a      	orrs	r2, r1
 800f034:	b2d2      	uxtb	r2, r2
 800f036:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u64(u_cells, 8u, 0xffu);
 800f038:	23ff      	movs	r3, #255	; 0xff
 800f03a:	2208      	movs	r2, #8
 800f03c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f040:	f7ff fc7a 	bl	800e938 <pack_right_shift_u64>
 800f044:	4603      	mov	r3, r0
 800f046:	4619      	mov	r1, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	3304      	adds	r3, #4
 800f04c:	781a      	ldrb	r2, [r3, #0]
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	3304      	adds	r3, #4
 800f052:	430a      	orrs	r2, r1
 800f054:	b2d2      	uxtb	r2, r2
 800f056:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u64(u_cells, 0u, 0xffu);
 800f058:	23ff      	movs	r3, #255	; 0xff
 800f05a:	2200      	movs	r2, #0
 800f05c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f060:	f7ff fc2e 	bl	800e8c0 <pack_left_shift_u64>
 800f064:	4603      	mov	r3, r0
 800f066:	4619      	mov	r1, r3
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	3305      	adds	r3, #5
 800f06c:	781a      	ldrb	r2, [r3, #0]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	3305      	adds	r3, #5
 800f072:	430a      	orrs	r2, r1
 800f074:	b2d2      	uxtb	r2, r2
 800f076:	701a      	strb	r2, [r3, #0]

    return (6);
 800f078:	2306      	movs	r3, #6
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3718      	adds	r7, #24
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
	...

0800f084 <can2_ivt_msg_result_u1_unpack>:

int can2_ivt_msg_result_u1_unpack(
    struct can2_ivt_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800f084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f088:	b08e      	sub	sp, #56	; 0x38
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f08e:	62b9      	str	r1, [r7, #40]	; 0x28
 800f090:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_cells;

    if (size < 6u) {
 800f092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f094:	2b05      	cmp	r3, #5
 800f096:	d802      	bhi.n	800f09e <can2_ivt_msg_result_u1_unpack+0x1a>
        return (-EINVAL);
 800f098:	f06f 0315 	mvn.w	r3, #21
 800f09c:	e081      	b.n	800f1a2 <can2_ivt_msg_result_u1_unpack+0x11e>
    }

    u_cells = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 800f09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	22ff      	movs	r2, #255	; 0xff
 800f0a4:	2128      	movs	r1, #40	; 0x28
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7ff fc83 	bl	800e9b2 <unpack_left_shift_u64>
 800f0ac:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 800f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	22ff      	movs	r2, #255	; 0xff
 800f0b8:	2120      	movs	r1, #32
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7ff fc79 	bl	800e9b2 <unpack_left_shift_u64>
 800f0c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f0c4:	ea42 0400 	orr.w	r4, r2, r0
 800f0c8:	ea43 0501 	orr.w	r5, r3, r1
 800f0cc:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 800f0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d2:	3302      	adds	r3, #2
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	22ff      	movs	r2, #255	; 0xff
 800f0d8:	2118      	movs	r1, #24
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7ff fc69 	bl	800e9b2 <unpack_left_shift_u64>
 800f0e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f0e4:	ea42 0800 	orr.w	r8, r2, r0
 800f0e8:	ea43 0901 	orr.w	r9, r3, r1
 800f0ec:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 800f0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f2:	3303      	adds	r3, #3
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	22ff      	movs	r2, #255	; 0xff
 800f0f8:	2110      	movs	r1, #16
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7ff fc59 	bl	800e9b2 <unpack_left_shift_u64>
 800f100:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f104:	ea42 0400 	orr.w	r4, r2, r0
 800f108:	613c      	str	r4, [r7, #16]
 800f10a:	430b      	orrs	r3, r1
 800f10c:	617b      	str	r3, [r7, #20]
 800f10e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f112:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800f116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f118:	3304      	adds	r3, #4
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	22ff      	movs	r2, #255	; 0xff
 800f11e:	2108      	movs	r1, #8
 800f120:	4618      	mov	r0, r3
 800f122:	f7ff fc46 	bl	800e9b2 <unpack_left_shift_u64>
 800f126:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f12a:	ea42 0400 	orr.w	r4, r2, r0
 800f12e:	60bc      	str	r4, [r7, #8]
 800f130:	430b      	orrs	r3, r1
 800f132:	60fb      	str	r3, [r7, #12]
 800f134:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f138:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 800f13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13e:	3305      	adds	r3, #5
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	22ff      	movs	r2, #255	; 0xff
 800f144:	2100      	movs	r1, #0
 800f146:	4618      	mov	r0, r3
 800f148:	f7ff fc8a 	bl	800ea60 <unpack_right_shift_u64>
 800f14c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f150:	ea42 0400 	orr.w	r4, r2, r0
 800f154:	603c      	str	r4, [r7, #0]
 800f156:	430b      	orrs	r3, r1
 800f158:	607b      	str	r3, [r7, #4]
 800f15a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f15e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_cells & (1ull << 47)) != 0ull) {
 800f162:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f166:	f04f 0000 	mov.w	r0, #0
 800f16a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f16e:	ea02 0400 	and.w	r4, r2, r0
 800f172:	61bc      	str	r4, [r7, #24]
 800f174:	400b      	ands	r3, r1
 800f176:	61fb      	str	r3, [r7, #28]
 800f178:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f17c:	4323      	orrs	r3, r4
 800f17e:	d00a      	beq.n	800f196 <can2_ivt_msg_result_u1_unpack+0x112>
        u_cells |= 0xffff000000000000ull;
 800f180:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f184:	f04f 0000 	mov.w	r0, #0
 800f188:	4908      	ldr	r1, [pc, #32]	; (800f1ac <can2_ivt_msg_result_u1_unpack+0x128>)
 800f18a:	ea42 0a00 	orr.w	sl, r2, r0
 800f18e:	ea43 0b01 	orr.w	fp, r3, r1
 800f192:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_cells = (int64_t)u_cells;
 800f196:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f19a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f19c:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 800f1a0:	2300      	movs	r3, #0
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3738      	adds	r7, #56	; 0x38
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f1ac:	ffff0000 	.word	0xffff0000

0800f1b0 <can2_ivt_msg_result_u1_u_cells_encode>:

int64_t can2_ivt_msg_result_u1_u_cells_encode(double value)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	ed87 0b00 	vstr	d0, [r7]
    return (int64_t)(value / 0.001);
 800f1ba:	a30b      	add	r3, pc, #44	; (adr r3, 800f1e8 <can2_ivt_msg_result_u1_u_cells_encode+0x38>)
 800f1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f1c4:	f7f1 fb34 	bl	8000830 <__aeabi_ddiv>
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	4610      	mov	r0, r2
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	f7f1 fd64 	bl	8000c9c <__aeabi_d2lz>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	460b      	mov	r3, r1
}
 800f1d8:	4610      	mov	r0, r2
 800f1da:	4619      	mov	r1, r3
 800f1dc:	3708      	adds	r7, #8
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	f3af 8000 	nop.w
 800f1e8:	d2f1a9fc 	.word	0xd2f1a9fc
 800f1ec:	3f50624d 	.word	0x3f50624d

0800f1f0 <can2_ivt_msg_result_u1_u_cells_decode>:

double can2_ivt_msg_result_u1_u_cells_decode(int64_t value)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	e9c7 0100 	strd	r0, r1, [r7]
    return ((double)value * 0.001);
 800f1fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f1fe:	f7f1 f9bf 	bl	8000580 <__aeabi_l2d>
 800f202:	a309      	add	r3, pc, #36	; (adr r3, 800f228 <can2_ivt_msg_result_u1_u_cells_decode+0x38>)
 800f204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f208:	f7f1 f9e8 	bl	80005dc <__aeabi_dmul>
 800f20c:	4602      	mov	r2, r0
 800f20e:	460b      	mov	r3, r1
 800f210:	ec43 2b17 	vmov	d7, r2, r3
}
 800f214:	eeb0 0a47 	vmov.f32	s0, s14
 800f218:	eef0 0a67 	vmov.f32	s1, s15
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	f3af 8000 	nop.w
 800f228:	d2f1a9fc 	.word	0xd2f1a9fc
 800f22c:	3f50624d 	.word	0x3f50624d

0800f230 <can2_ivt_msg_result_u3_pack>:

int can2_ivt_msg_result_u3_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_u3_t *src_p,
    size_t size)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b086      	sub	sp, #24
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	607a      	str	r2, [r7, #4]
    uint64_t u_vehicle;

    if (size < 6u) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b05      	cmp	r3, #5
 800f240:	d802      	bhi.n	800f248 <can2_ivt_msg_result_u3_pack+0x18>
        return (-EINVAL);
 800f242:	f06f 0315 	mvn.w	r3, #21
 800f246:	e068      	b.n	800f31a <can2_ivt_msg_result_u3_pack+0xea>
    }

    memset(&dst_p[0], 0, 6);
 800f248:	2206      	movs	r2, #6
 800f24a:	2100      	movs	r1, #0
 800f24c:	68f8      	ldr	r0, [r7, #12]
 800f24e:	f01f fa47 	bl	802e6e0 <memset>

    u_vehicle = (uint64_t)src_p->u_vehicle;
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f258:	e9c7 2304 	strd	r2, r3, [r7, #16]
    dst_p[0] |= pack_right_shift_u64(u_vehicle, 40u, 0xffu);
 800f25c:	23ff      	movs	r3, #255	; 0xff
 800f25e:	2228      	movs	r2, #40	; 0x28
 800f260:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f264:	f7ff fb68 	bl	800e938 <pack_right_shift_u64>
 800f268:	4603      	mov	r3, r0
 800f26a:	461a      	mov	r2, r3
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	4313      	orrs	r3, r2
 800f272:	b2da      	uxtb	r2, r3
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u64(u_vehicle, 32u, 0xffu);
 800f278:	23ff      	movs	r3, #255	; 0xff
 800f27a:	2220      	movs	r2, #32
 800f27c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f280:	f7ff fb5a 	bl	800e938 <pack_right_shift_u64>
 800f284:	4603      	mov	r3, r0
 800f286:	4619      	mov	r1, r3
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	3301      	adds	r3, #1
 800f28c:	781a      	ldrb	r2, [r3, #0]
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	3301      	adds	r3, #1
 800f292:	430a      	orrs	r2, r1
 800f294:	b2d2      	uxtb	r2, r2
 800f296:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u64(u_vehicle, 24u, 0xffu);
 800f298:	23ff      	movs	r3, #255	; 0xff
 800f29a:	2218      	movs	r2, #24
 800f29c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f2a0:	f7ff fb4a 	bl	800e938 <pack_right_shift_u64>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	3302      	adds	r3, #2
 800f2ac:	781a      	ldrb	r2, [r3, #0]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	3302      	adds	r3, #2
 800f2b2:	430a      	orrs	r2, r1
 800f2b4:	b2d2      	uxtb	r2, r2
 800f2b6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u64(u_vehicle, 16u, 0xffu);
 800f2b8:	23ff      	movs	r3, #255	; 0xff
 800f2ba:	2210      	movs	r2, #16
 800f2bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f2c0:	f7ff fb3a 	bl	800e938 <pack_right_shift_u64>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	3303      	adds	r3, #3
 800f2cc:	781a      	ldrb	r2, [r3, #0]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	3303      	adds	r3, #3
 800f2d2:	430a      	orrs	r2, r1
 800f2d4:	b2d2      	uxtb	r2, r2
 800f2d6:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u64(u_vehicle, 8u, 0xffu);
 800f2d8:	23ff      	movs	r3, #255	; 0xff
 800f2da:	2208      	movs	r2, #8
 800f2dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f2e0:	f7ff fb2a 	bl	800e938 <pack_right_shift_u64>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	3304      	adds	r3, #4
 800f2ec:	781a      	ldrb	r2, [r3, #0]
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	3304      	adds	r3, #4
 800f2f2:	430a      	orrs	r2, r1
 800f2f4:	b2d2      	uxtb	r2, r2
 800f2f6:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u64(u_vehicle, 0u, 0xffu);
 800f2f8:	23ff      	movs	r3, #255	; 0xff
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f300:	f7ff fade 	bl	800e8c0 <pack_left_shift_u64>
 800f304:	4603      	mov	r3, r0
 800f306:	4619      	mov	r1, r3
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	3305      	adds	r3, #5
 800f30c:	781a      	ldrb	r2, [r3, #0]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	3305      	adds	r3, #5
 800f312:	430a      	orrs	r2, r1
 800f314:	b2d2      	uxtb	r2, r2
 800f316:	701a      	strb	r2, [r3, #0]

    return (6);
 800f318:	2306      	movs	r3, #6
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3718      	adds	r7, #24
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
	...

0800f324 <can2_ivt_msg_result_u3_unpack>:

int can2_ivt_msg_result_u3_unpack(
    struct can2_ivt_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800f324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f328:	b08e      	sub	sp, #56	; 0x38
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f32e:	62b9      	str	r1, [r7, #40]	; 0x28
 800f330:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_vehicle;

    if (size < 6u) {
 800f332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f334:	2b05      	cmp	r3, #5
 800f336:	d802      	bhi.n	800f33e <can2_ivt_msg_result_u3_unpack+0x1a>
        return (-EINVAL);
 800f338:	f06f 0315 	mvn.w	r3, #21
 800f33c:	e081      	b.n	800f442 <can2_ivt_msg_result_u3_unpack+0x11e>
    }

    u_vehicle = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 800f33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	22ff      	movs	r2, #255	; 0xff
 800f344:	2128      	movs	r1, #40	; 0x28
 800f346:	4618      	mov	r0, r3
 800f348:	f7ff fb33 	bl	800e9b2 <unpack_left_shift_u64>
 800f34c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 800f350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f352:	3301      	adds	r3, #1
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	22ff      	movs	r2, #255	; 0xff
 800f358:	2120      	movs	r1, #32
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7ff fb29 	bl	800e9b2 <unpack_left_shift_u64>
 800f360:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f364:	ea42 0400 	orr.w	r4, r2, r0
 800f368:	ea43 0501 	orr.w	r5, r3, r1
 800f36c:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 800f370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f372:	3302      	adds	r3, #2
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	22ff      	movs	r2, #255	; 0xff
 800f378:	2118      	movs	r1, #24
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7ff fb19 	bl	800e9b2 <unpack_left_shift_u64>
 800f380:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f384:	ea42 0800 	orr.w	r8, r2, r0
 800f388:	ea43 0901 	orr.w	r9, r3, r1
 800f38c:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 800f390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f392:	3303      	adds	r3, #3
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	22ff      	movs	r2, #255	; 0xff
 800f398:	2110      	movs	r1, #16
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7ff fb09 	bl	800e9b2 <unpack_left_shift_u64>
 800f3a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f3a4:	ea42 0400 	orr.w	r4, r2, r0
 800f3a8:	613c      	str	r4, [r7, #16]
 800f3aa:	430b      	orrs	r3, r1
 800f3ac:	617b      	str	r3, [r7, #20]
 800f3ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f3b2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800f3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b8:	3304      	adds	r3, #4
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	22ff      	movs	r2, #255	; 0xff
 800f3be:	2108      	movs	r1, #8
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7ff faf6 	bl	800e9b2 <unpack_left_shift_u64>
 800f3c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f3ca:	ea42 0400 	orr.w	r4, r2, r0
 800f3ce:	60bc      	str	r4, [r7, #8]
 800f3d0:	430b      	orrs	r3, r1
 800f3d2:	60fb      	str	r3, [r7, #12]
 800f3d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f3d8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 800f3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3de:	3305      	adds	r3, #5
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	22ff      	movs	r2, #255	; 0xff
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7ff fb3a 	bl	800ea60 <unpack_right_shift_u64>
 800f3ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f3f0:	ea42 0400 	orr.w	r4, r2, r0
 800f3f4:	603c      	str	r4, [r7, #0]
 800f3f6:	430b      	orrs	r3, r1
 800f3f8:	607b      	str	r3, [r7, #4]
 800f3fa:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f3fe:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_vehicle & (1ull << 47)) != 0ull) {
 800f402:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f406:	f04f 0000 	mov.w	r0, #0
 800f40a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f40e:	ea02 0400 	and.w	r4, r2, r0
 800f412:	61bc      	str	r4, [r7, #24]
 800f414:	400b      	ands	r3, r1
 800f416:	61fb      	str	r3, [r7, #28]
 800f418:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f41c:	4323      	orrs	r3, r4
 800f41e:	d00a      	beq.n	800f436 <can2_ivt_msg_result_u3_unpack+0x112>
        u_vehicle |= 0xffff000000000000ull;
 800f420:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f424:	f04f 0000 	mov.w	r0, #0
 800f428:	4908      	ldr	r1, [pc, #32]	; (800f44c <can2_ivt_msg_result_u3_unpack+0x128>)
 800f42a:	ea42 0a00 	orr.w	sl, r2, r0
 800f42e:	ea43 0b01 	orr.w	fp, r3, r1
 800f432:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_vehicle = (int64_t)u_vehicle;
 800f436:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f43a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f43c:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 800f440:	2300      	movs	r3, #0
}
 800f442:	4618      	mov	r0, r3
 800f444:	3738      	adds	r7, #56	; 0x38
 800f446:	46bd      	mov	sp, r7
 800f448:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f44c:	ffff0000 	.word	0xffff0000

0800f450 <can2_ivt_msg_result_u3_u_vehicle_encode>:

int64_t can2_ivt_msg_result_u3_u_vehicle_encode(double value)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	ed87 0b00 	vstr	d0, [r7]
    return (int64_t)(value / 0.001);
 800f45a:	a30b      	add	r3, pc, #44	; (adr r3, 800f488 <can2_ivt_msg_result_u3_u_vehicle_encode+0x38>)
 800f45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f460:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f464:	f7f1 f9e4 	bl	8000830 <__aeabi_ddiv>
 800f468:	4602      	mov	r2, r0
 800f46a:	460b      	mov	r3, r1
 800f46c:	4610      	mov	r0, r2
 800f46e:	4619      	mov	r1, r3
 800f470:	f7f1 fc14 	bl	8000c9c <__aeabi_d2lz>
 800f474:	4602      	mov	r2, r0
 800f476:	460b      	mov	r3, r1
}
 800f478:	4610      	mov	r0, r2
 800f47a:	4619      	mov	r1, r3
 800f47c:	3708      	adds	r7, #8
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
 800f482:	bf00      	nop
 800f484:	f3af 8000 	nop.w
 800f488:	d2f1a9fc 	.word	0xd2f1a9fc
 800f48c:	3f50624d 	.word	0x3f50624d

0800f490 <can2_ivt_msg_result_u3_u_vehicle_decode>:

double can2_ivt_msg_result_u3_u_vehicle_decode(int64_t value)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	e9c7 0100 	strd	r0, r1, [r7]
    return ((double)value * 0.001);
 800f49a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f49e:	f7f1 f86f 	bl	8000580 <__aeabi_l2d>
 800f4a2:	a309      	add	r3, pc, #36	; (adr r3, 800f4c8 <can2_ivt_msg_result_u3_u_vehicle_decode+0x38>)
 800f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a8:	f7f1 f898 	bl	80005dc <__aeabi_dmul>
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	ec43 2b17 	vmov	d7, r2, r3
}
 800f4b4:	eeb0 0a47 	vmov.f32	s0, s14
 800f4b8:	eef0 0a67 	vmov.f32	s1, s15
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	f3af 8000 	nop.w
 800f4c8:	d2f1a9fc 	.word	0xd2f1a9fc
 800f4cc:	3f50624d 	.word	0x3f50624d

0800f4d0 <can2_charger_config_pack>:

int can2_charger_config_pack(
    uint8_t *dst_p,
    const struct can2_charger_config_t *src_p,
    size_t size)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
    if (size < 4u) {
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b03      	cmp	r3, #3
 800f4e0:	d802      	bhi.n	800f4e8 <can2_charger_config_pack+0x18>
        return (-EINVAL);
 800f4e2:	f06f 0315 	mvn.w	r3, #21
 800f4e6:	e0b5      	b.n	800f654 <can2_charger_config_pack+0x184>
    }

    memset(&dst_p[0], 0, 4);
 800f4e8:	2204      	movs	r2, #4
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	f01f f8f7 	bl	802e6e0 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->set_mux, 0u, 0xffu);
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	22ff      	movs	r2, #255	; 0xff
 800f4f8:	2100      	movs	r1, #0
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7ff f9b2 	bl	800e864 <pack_left_shift_u8>
 800f500:	4603      	mov	r3, r0
 800f502:	461a      	mov	r2, r3
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	4313      	orrs	r3, r2
 800f50a:	b2da      	uxtb	r2, r3
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	701a      	strb	r2, [r3, #0]

    switch (src_p->set_mux) {
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	3b40      	subs	r3, #64	; 0x40
 800f516:	2b04      	cmp	r3, #4
 800f518:	f200 809a 	bhi.w	800f650 <can2_charger_config_pack+0x180>
 800f51c:	a201      	add	r2, pc, #4	; (adr r2, 800f524 <can2_charger_config_pack+0x54>)
 800f51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f522:	bf00      	nop
 800f524:	0800f539 	.word	0x0800f539
 800f528:	0800f57f 	.word	0x0800f57f
 800f52c:	0800f5c5 	.word	0x0800f5c5
 800f530:	0800f651 	.word	0x0800f651
 800f534:	0800f60b 	.word	0x0800f60b

    case 64:
        dst_p[1] |= pack_right_shift_u16(src_p->msg_set_voltage_limit, 8u, 0xffu);
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	885b      	ldrh	r3, [r3, #2]
 800f53c:	22ff      	movs	r2, #255	; 0xff
 800f53e:	2108      	movs	r1, #8
 800f540:	4618      	mov	r0, r3
 800f542:	f7ff f9e2 	bl	800e90a <pack_right_shift_u16>
 800f546:	4603      	mov	r3, r0
 800f548:	4619      	mov	r1, r3
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	3301      	adds	r3, #1
 800f54e:	781a      	ldrb	r2, [r3, #0]
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	3301      	adds	r3, #1
 800f554:	430a      	orrs	r2, r1
 800f556:	b2d2      	uxtb	r2, r2
 800f558:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u16(src_p->msg_set_voltage_limit, 0u, 0xffu);
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	885b      	ldrh	r3, [r3, #2]
 800f55e:	22ff      	movs	r2, #255	; 0xff
 800f560:	2100      	movs	r1, #0
 800f562:	4618      	mov	r0, r3
 800f564:	f7ff f995 	bl	800e892 <pack_left_shift_u16>
 800f568:	4603      	mov	r3, r0
 800f56a:	4619      	mov	r1, r3
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	3302      	adds	r3, #2
 800f570:	781a      	ldrb	r2, [r3, #0]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	3302      	adds	r3, #2
 800f576:	430a      	orrs	r2, r1
 800f578:	b2d2      	uxtb	r2, r2
 800f57a:	701a      	strb	r2, [r3, #0]
        break;
 800f57c:	e069      	b.n	800f652 <can2_charger_config_pack+0x182>

    case 65:
        dst_p[1] |= pack_right_shift_u16(src_p->msg_set_current_limit, 8u, 0xffu);
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	889b      	ldrh	r3, [r3, #4]
 800f582:	22ff      	movs	r2, #255	; 0xff
 800f584:	2108      	movs	r1, #8
 800f586:	4618      	mov	r0, r3
 800f588:	f7ff f9bf 	bl	800e90a <pack_right_shift_u16>
 800f58c:	4603      	mov	r3, r0
 800f58e:	4619      	mov	r1, r3
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	3301      	adds	r3, #1
 800f594:	781a      	ldrb	r2, [r3, #0]
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	3301      	adds	r3, #1
 800f59a:	430a      	orrs	r2, r1
 800f59c:	b2d2      	uxtb	r2, r2
 800f59e:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u16(src_p->msg_set_current_limit, 0u, 0xffu);
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	889b      	ldrh	r3, [r3, #4]
 800f5a4:	22ff      	movs	r2, #255	; 0xff
 800f5a6:	2100      	movs	r1, #0
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7ff f972 	bl	800e892 <pack_left_shift_u16>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	3302      	adds	r3, #2
 800f5b6:	781a      	ldrb	r2, [r3, #0]
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	3302      	adds	r3, #2
 800f5bc:	430a      	orrs	r2, r1
 800f5be:	b2d2      	uxtb	r2, r2
 800f5c0:	701a      	strb	r2, [r3, #0]
        break;
 800f5c2:	e046      	b.n	800f652 <can2_charger_config_pack+0x182>

    case 66:
        dst_p[1] |= pack_right_shift_u16(src_p->msg_set_power_limit, 8u, 0xffu);
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	88db      	ldrh	r3, [r3, #6]
 800f5c8:	22ff      	movs	r2, #255	; 0xff
 800f5ca:	2108      	movs	r1, #8
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7ff f99c 	bl	800e90a <pack_right_shift_u16>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	781a      	ldrb	r2, [r3, #0]
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	3301      	adds	r3, #1
 800f5e0:	430a      	orrs	r2, r1
 800f5e2:	b2d2      	uxtb	r2, r2
 800f5e4:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u16(src_p->msg_set_power_limit, 0u, 0xffu);
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	88db      	ldrh	r3, [r3, #6]
 800f5ea:	22ff      	movs	r2, #255	; 0xff
 800f5ec:	2100      	movs	r1, #0
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7ff f94f 	bl	800e892 <pack_left_shift_u16>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	3302      	adds	r3, #2
 800f5fc:	781a      	ldrb	r2, [r3, #0]
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	3302      	adds	r3, #2
 800f602:	430a      	orrs	r2, r1
 800f604:	b2d2      	uxtb	r2, r2
 800f606:	701a      	strb	r2, [r3, #0]
        break;
 800f608:	e023      	b.n	800f652 <can2_charger_config_pack+0x182>

    case 68:
        dst_p[2] |= pack_left_shift_u8(src_p->msg_set_enabled, 0u, 0xffu);
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	7a1b      	ldrb	r3, [r3, #8]
 800f60e:	22ff      	movs	r2, #255	; 0xff
 800f610:	2100      	movs	r1, #0
 800f612:	4618      	mov	r0, r3
 800f614:	f7ff f926 	bl	800e864 <pack_left_shift_u8>
 800f618:	4603      	mov	r3, r0
 800f61a:	4619      	mov	r1, r3
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	3302      	adds	r3, #2
 800f620:	781a      	ldrb	r2, [r3, #0]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	3302      	adds	r3, #2
 800f626:	430a      	orrs	r2, r1
 800f628:	b2d2      	uxtb	r2, r2
 800f62a:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->msg_set_time_out, 0u, 0xffu);
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	7a5b      	ldrb	r3, [r3, #9]
 800f630:	22ff      	movs	r2, #255	; 0xff
 800f632:	2100      	movs	r1, #0
 800f634:	4618      	mov	r0, r3
 800f636:	f7ff f915 	bl	800e864 <pack_left_shift_u8>
 800f63a:	4603      	mov	r3, r0
 800f63c:	4619      	mov	r1, r3
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	3303      	adds	r3, #3
 800f642:	781a      	ldrb	r2, [r3, #0]
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	3303      	adds	r3, #3
 800f648:	430a      	orrs	r2, r1
 800f64a:	b2d2      	uxtb	r2, r2
 800f64c:	701a      	strb	r2, [r3, #0]
        break;
 800f64e:	e000      	b.n	800f652 <can2_charger_config_pack+0x182>

    default:
        break;
 800f650:	bf00      	nop
    }

    return (4);
 800f652:	2304      	movs	r3, #4
}
 800f654:	4618      	mov	r0, r3
 800f656:	3710      	adds	r7, #16
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <can2_charger_config_unpack>:

int can2_charger_config_unpack(
    struct can2_charger_config_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b084      	sub	sp, #16
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	607a      	str	r2, [r7, #4]
    if (size < 4u) {
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2b03      	cmp	r3, #3
 800f66c:	d802      	bhi.n	800f674 <can2_charger_config_unpack+0x18>
        return (-EINVAL);
 800f66e:	f06f 0315 	mvn.w	r3, #21
 800f672:	e08f      	b.n	800f794 <can2_charger_config_unpack+0x138>
    }

    dst_p->set_mux = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	22ff      	movs	r2, #255	; 0xff
 800f67a:	2100      	movs	r1, #0
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7ff f9bf 	bl	800ea00 <unpack_right_shift_u8>
 800f682:	4603      	mov	r3, r0
 800f684:	461a      	mov	r2, r3
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	701a      	strb	r2, [r3, #0]

    switch (dst_p->set_mux) {
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	3b40      	subs	r3, #64	; 0x40
 800f690:	2b04      	cmp	r3, #4
 800f692:	d87d      	bhi.n	800f790 <can2_charger_config_unpack+0x134>
 800f694:	a201      	add	r2, pc, #4	; (adr r2, 800f69c <can2_charger_config_unpack+0x40>)
 800f696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f69a:	bf00      	nop
 800f69c:	0800f6b1 	.word	0x0800f6b1
 800f6a0:	0800f6eb 	.word	0x0800f6eb
 800f6a4:	0800f725 	.word	0x0800f725
 800f6a8:	0800f791 	.word	0x0800f791
 800f6ac:	0800f75f 	.word	0x0800f75f

    case 64:
        dst_p->msg_set_voltage_limit = unpack_left_shift_u16(src_p[1], 8u, 0xffu);
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	22ff      	movs	r2, #255	; 0xff
 800f6b8:	2108      	movs	r1, #8
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7ff f961 	bl	800e982 <unpack_left_shift_u16>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	805a      	strh	r2, [r3, #2]
        dst_p->msg_set_voltage_limit |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	3302      	adds	r3, #2
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	22ff      	movs	r2, #255	; 0xff
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7ff f9ac 	bl	800ea30 <unpack_right_shift_u16>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	461a      	mov	r2, r3
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	885b      	ldrh	r3, [r3, #2]
 800f6e0:	4313      	orrs	r3, r2
 800f6e2:	b29a      	uxth	r2, r3
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	805a      	strh	r2, [r3, #2]
        break;
 800f6e8:	e053      	b.n	800f792 <can2_charger_config_unpack+0x136>

    case 65:
        dst_p->msg_set_current_limit = unpack_left_shift_u16(src_p[1], 8u, 0xffu);
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	22ff      	movs	r2, #255	; 0xff
 800f6f2:	2108      	movs	r1, #8
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7ff f944 	bl	800e982 <unpack_left_shift_u16>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	809a      	strh	r2, [r3, #4]
        dst_p->msg_set_current_limit |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	3302      	adds	r3, #2
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	22ff      	movs	r2, #255	; 0xff
 800f70a:	2100      	movs	r1, #0
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7ff f98f 	bl	800ea30 <unpack_right_shift_u16>
 800f712:	4603      	mov	r3, r0
 800f714:	461a      	mov	r2, r3
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	889b      	ldrh	r3, [r3, #4]
 800f71a:	4313      	orrs	r3, r2
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	809a      	strh	r2, [r3, #4]
        break;
 800f722:	e036      	b.n	800f792 <can2_charger_config_unpack+0x136>

    case 66:
        dst_p->msg_set_power_limit = unpack_left_shift_u16(src_p[1], 8u, 0xffu);
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	3301      	adds	r3, #1
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	22ff      	movs	r2, #255	; 0xff
 800f72c:	2108      	movs	r1, #8
 800f72e:	4618      	mov	r0, r3
 800f730:	f7ff f927 	bl	800e982 <unpack_left_shift_u16>
 800f734:	4603      	mov	r3, r0
 800f736:	461a      	mov	r2, r3
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	80da      	strh	r2, [r3, #6]
        dst_p->msg_set_power_limit |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	3302      	adds	r3, #2
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	22ff      	movs	r2, #255	; 0xff
 800f744:	2100      	movs	r1, #0
 800f746:	4618      	mov	r0, r3
 800f748:	f7ff f972 	bl	800ea30 <unpack_right_shift_u16>
 800f74c:	4603      	mov	r3, r0
 800f74e:	461a      	mov	r2, r3
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	88db      	ldrh	r3, [r3, #6]
 800f754:	4313      	orrs	r3, r2
 800f756:	b29a      	uxth	r2, r3
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	80da      	strh	r2, [r3, #6]
        break;
 800f75c:	e019      	b.n	800f792 <can2_charger_config_unpack+0x136>

    case 68:
        dst_p->msg_set_enabled = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	3302      	adds	r3, #2
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	22ff      	movs	r2, #255	; 0xff
 800f766:	2100      	movs	r1, #0
 800f768:	4618      	mov	r0, r3
 800f76a:	f7ff f949 	bl	800ea00 <unpack_right_shift_u8>
 800f76e:	4603      	mov	r3, r0
 800f770:	461a      	mov	r2, r3
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	721a      	strb	r2, [r3, #8]
        dst_p->msg_set_time_out = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	3303      	adds	r3, #3
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	22ff      	movs	r2, #255	; 0xff
 800f77e:	2100      	movs	r1, #0
 800f780:	4618      	mov	r0, r3
 800f782:	f7ff f93d 	bl	800ea00 <unpack_right_shift_u8>
 800f786:	4603      	mov	r3, r0
 800f788:	461a      	mov	r2, r3
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	725a      	strb	r2, [r3, #9]
        break;
 800f78e:	e000      	b.n	800f792 <can2_charger_config_unpack+0x136>

    default:
        break;
 800f790:	bf00      	nop
    }

    return (0);
 800f792:	2300      	movs	r3, #0
}
 800f794:	4618      	mov	r0, r3
 800f796:	3710      	adds	r7, #16
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <can2_charger_config_set_mux_encode>:

uint8_t can2_charger_config_set_mux_encode(double value)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b082      	sub	sp, #8
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800f7a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f7aa:	f7f1 f9ef 	bl	8000b8c <__aeabi_d2uiz>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	b2db      	uxtb	r3, r3
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3708      	adds	r7, #8
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <can2_charger_config_msg_set_voltage_limit_encode>:

    return (true);
}

uint16_t can2_charger_config_msg_set_voltage_limit_encode(double value)
{
 800f7ba:	b580      	push	{r7, lr}
 800f7bc:	b082      	sub	sp, #8
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	ed87 0b00 	vstr	d0, [r7]
    return (uint16_t)(value);
 800f7c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f7c8:	f7f1 f9e0 	bl	8000b8c <__aeabi_d2uiz>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	b29b      	uxth	r3, r3
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3708      	adds	r7, #8
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <can2_charger_config_msg_set_voltage_limit_decode>:

double can2_charger_config_msg_set_voltage_limit_decode(uint16_t value)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	4603      	mov	r3, r0
 800f7e0:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800f7e2:	88fb      	ldrh	r3, [r7, #6]
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7f0 fe7f 	bl	80004e8 <__aeabi_ui2d>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	ec43 2b17 	vmov	d7, r2, r3
}
 800f7f2:	eeb0 0a47 	vmov.f32	s0, s14
 800f7f6:	eef0 0a67 	vmov.f32	s1, s15
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <can2_charger_config_msg_set_current_limit_encode>:
{
    return (value <= 900u);
}

uint16_t can2_charger_config_msg_set_current_limit_encode(double value)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	ed87 0b00 	vstr	d0, [r7]
    return (uint16_t)(value / 0.1);
 800f80a:	a309      	add	r3, pc, #36	; (adr r3, 800f830 <can2_charger_config_msg_set_current_limit_encode+0x30>)
 800f80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f810:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f814:	f7f1 f80c 	bl	8000830 <__aeabi_ddiv>
 800f818:	4602      	mov	r2, r0
 800f81a:	460b      	mov	r3, r1
 800f81c:	4610      	mov	r0, r2
 800f81e:	4619      	mov	r1, r3
 800f820:	f7f1 f9b4 	bl	8000b8c <__aeabi_d2uiz>
 800f824:	4603      	mov	r3, r0
 800f826:	b29b      	uxth	r3, r3
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3708      	adds	r7, #8
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}
 800f830:	9999999a 	.word	0x9999999a
 800f834:	3fb99999 	.word	0x3fb99999

0800f838 <can2_charger_config_msg_set_current_limit_decode>:

double can2_charger_config_msg_set_current_limit_decode(uint16_t value)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	4603      	mov	r3, r0
 800f840:	80fb      	strh	r3, [r7, #6]
    return ((double)value * 0.1);
 800f842:	88fb      	ldrh	r3, [r7, #6]
 800f844:	4618      	mov	r0, r3
 800f846:	f7f0 fe4f 	bl	80004e8 <__aeabi_ui2d>
 800f84a:	a309      	add	r3, pc, #36	; (adr r3, 800f870 <can2_charger_config_msg_set_current_limit_decode+0x38>)
 800f84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f850:	f7f0 fec4 	bl	80005dc <__aeabi_dmul>
 800f854:	4602      	mov	r2, r0
 800f856:	460b      	mov	r3, r1
 800f858:	ec43 2b17 	vmov	d7, r2, r3
}
 800f85c:	eeb0 0a47 	vmov.f32	s0, s14
 800f860:	eef0 0a67 	vmov.f32	s1, s15
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	f3af 8000 	nop.w
 800f870:	9999999a 	.word	0x9999999a
 800f874:	3fb99999 	.word	0x3fb99999

0800f878 <can2_charger_config_msg_set_power_limit_encode>:
{
    return (value <= 133u);
}

uint16_t can2_charger_config_msg_set_power_limit_encode(double value)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	ed87 0b00 	vstr	d0, [r7]
    return (uint16_t)(value);
 800f882:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f886:	f7f1 f981 	bl	8000b8c <__aeabi_d2uiz>
 800f88a:	4603      	mov	r3, r0
 800f88c:	b29b      	uxth	r3, r3
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3708      	adds	r7, #8
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}

0800f896 <can2_charger_config_msg_set_power_limit_decode>:

double can2_charger_config_msg_set_power_limit_decode(uint16_t value)
{
 800f896:	b580      	push	{r7, lr}
 800f898:	b082      	sub	sp, #8
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	4603      	mov	r3, r0
 800f89e:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800f8a0:	88fb      	ldrh	r3, [r7, #6]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7f0 fe20 	bl	80004e8 <__aeabi_ui2d>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	ec43 2b17 	vmov	d7, r2, r3
}
 800f8b0:	eeb0 0a47 	vmov.f32	s0, s14
 800f8b4:	eef0 0a67 	vmov.f32	s1, s15
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}

0800f8be <can2_charger_config_msg_set_enabled_encode>:
{
    return (value <= 2559u);
}

uint8_t can2_charger_config_msg_set_enabled_encode(double value)
{
 800f8be:	b580      	push	{r7, lr}
 800f8c0:	b082      	sub	sp, #8
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800f8c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f8cc:	f7f1 f95e 	bl	8000b8c <__aeabi_d2uiz>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	b2db      	uxtb	r3, r3
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <can2_charger_config_msg_set_enabled_decode>:

double can2_charger_config_msg_set_enabled_decode(uint8_t value)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f8e6:	79fb      	ldrb	r3, [r7, #7]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7f0 fdfd 	bl	80004e8 <__aeabi_ui2d>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	ec43 2b17 	vmov	d7, r2, r3
}
 800f8f6:	eeb0 0a47 	vmov.f32	s0, s14
 800f8fa:	eef0 0a67 	vmov.f32	s1, s15
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <can2_charger_config_msg_set_time_out_encode>:
{
    return (value <= 1u);
}

uint8_t can2_charger_config_msg_set_time_out_encode(double value)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800f90e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f912:	f7f1 f93b 	bl	8000b8c <__aeabi_d2uiz>
 800f916:	4603      	mov	r3, r0
 800f918:	b2db      	uxtb	r3, r3
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}

0800f922 <can2_charger_config_msg_set_time_out_decode>:

double can2_charger_config_msg_set_time_out_decode(uint8_t value)
{
 800f922:	b580      	push	{r7, lr}
 800f924:	b082      	sub	sp, #8
 800f926:	af00      	add	r7, sp, #0
 800f928:	4603      	mov	r3, r0
 800f92a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f92c:	79fb      	ldrb	r3, [r7, #7]
 800f92e:	4618      	mov	r0, r3
 800f930:	f7f0 fdda 	bl	80004e8 <__aeabi_ui2d>
 800f934:	4602      	mov	r2, r0
 800f936:	460b      	mov	r3, r1
 800f938:	ec43 2b17 	vmov	d7, r2, r3
}
 800f93c:	eeb0 0a47 	vmov.f32	s0, s14
 800f940:	eef0 0a67 	vmov.f32	s1, s15
 800f944:	3708      	adds	r7, #8
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <can2_cc_status_pack>:

int can2_cc_status_pack(
    uint8_t *dst_p,
    const struct can2_cc_status_t *src_p,
    size_t size)
{
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b084      	sub	sp, #16
 800f94e:	af00      	add	r7, sp, #0
 800f950:	60f8      	str	r0, [r7, #12]
 800f952:	60b9      	str	r1, [r7, #8]
 800f954:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d102      	bne.n	800f962 <can2_cc_status_pack+0x18>
        return (-EINVAL);
 800f95c:	f06f 0315 	mvn.w	r3, #21
 800f960:	e014      	b.n	800f98c <can2_cc_status_pack+0x42>
    }

    memset(&dst_p[0], 0, 1);
 800f962:	2201      	movs	r2, #1
 800f964:	2100      	movs	r1, #0
 800f966:	68f8      	ldr	r0, [r7, #12]
 800f968:	f01e feba 	bl	802e6e0 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->enable_ams_charging, 0u, 0x01u);
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	2201      	movs	r2, #1
 800f972:	2100      	movs	r1, #0
 800f974:	4618      	mov	r0, r3
 800f976:	f7fe ff75 	bl	800e864 <pack_left_shift_u8>
 800f97a:	4603      	mov	r3, r0
 800f97c:	461a      	mov	r2, r3
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	4313      	orrs	r3, r2
 800f984:	b2da      	uxtb	r2, r3
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	701a      	strb	r2, [r3, #0]

    return (1);
 800f98a:	2301      	movs	r3, #1
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3710      	adds	r7, #16
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <can2_cc_status_unpack>:

int can2_cc_status_unpack(
    struct can2_cc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d102      	bne.n	800f9ac <can2_cc_status_unpack+0x18>
        return (-EINVAL);
 800f9a6:	f06f 0315 	mvn.w	r3, #21
 800f9aa:	e00b      	b.n	800f9c4 <can2_cc_status_unpack+0x30>
    }

    dst_p->enable_ams_charging = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	2100      	movs	r1, #0
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7ff f823 	bl	800ea00 <unpack_right_shift_u8>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	461a      	mov	r2, r3
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	701a      	strb	r2, [r3, #0]

    return (0);
 800f9c2:	2300      	movs	r3, #0
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	3710      	adds	r7, #16
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}

0800f9cc <can2_cc_status_enable_ams_charging_encode>:

uint8_t can2_cc_status_enable_ams_charging_encode(double value)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800f9d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f9da:	f7f1 f8d7 	bl	8000b8c <__aeabi_d2uiz>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	b2db      	uxtb	r3, r3
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3708      	adds	r7, #8
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <can2_cc_status_enable_ams_charging_decode>:

double can2_cc_status_enable_ams_charging_decode(uint8_t value)
{
 800f9ea:	b580      	push	{r7, lr}
 800f9ec:	b082      	sub	sp, #8
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f9f4:	79fb      	ldrb	r3, [r7, #7]
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7f0 fd76 	bl	80004e8 <__aeabi_ui2d>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	460b      	mov	r3, r1
 800fa00:	ec43 2b17 	vmov	d7, r2, r3
}
 800fa04:	eeb0 0a47 	vmov.f32	s0, s14
 800fa08:	eef0 0a67 	vmov.f32	s1, s15
 800fa0c:	3708      	adds	r7, #8
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
	...

0800fa14 <can1_ams_cell_voltages_array_raise>:
static uint8_t can2_cc_status_flag = 0;

static CAN_HandleTypeDef* _hcan1;
static CAN_HandleTypeDef* _hcan2;

static void can1_ams_cell_voltages_array_raise(uint16_t _index) {
 800fa14:	b480      	push	{r7}
 800fa16:	b087      	sub	sp, #28
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	80fb      	strh	r3, [r7, #6]
   static uint8_t array[1 +  24 / 8];
   static uint8_t count = 0;
   uint8_t index;

   switch(_index) {
 800fa1e:	88fb      	ldrh	r3, [r7, #6]
 800fa20:	2b17      	cmp	r3, #23
 800fa22:	f200 80c2 	bhi.w	800fbaa <can1_ams_cell_voltages_array_raise+0x196>
 800fa26:	a201      	add	r2, pc, #4	; (adr r2, 800fa2c <can1_ams_cell_voltages_array_raise+0x18>)
 800fa28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa2c:	0800fa8d 	.word	0x0800fa8d
 800fa30:	0800fa93 	.word	0x0800fa93
 800fa34:	0800fa99 	.word	0x0800fa99
 800fa38:	0800fa9f 	.word	0x0800fa9f
 800fa3c:	0800faa5 	.word	0x0800faa5
 800fa40:	0800faab 	.word	0x0800faab
 800fa44:	0800fab1 	.word	0x0800fab1
 800fa48:	0800fab7 	.word	0x0800fab7
 800fa4c:	0800fabd 	.word	0x0800fabd
 800fa50:	0800fac3 	.word	0x0800fac3
 800fa54:	0800fac9 	.word	0x0800fac9
 800fa58:	0800facf 	.word	0x0800facf
 800fa5c:	0800fad5 	.word	0x0800fad5
 800fa60:	0800fadb 	.word	0x0800fadb
 800fa64:	0800fae1 	.word	0x0800fae1
 800fa68:	0800fae7 	.word	0x0800fae7
 800fa6c:	0800faed 	.word	0x0800faed
 800fa70:	0800faf3 	.word	0x0800faf3
 800fa74:	0800faf9 	.word	0x0800faf9
 800fa78:	0800faff 	.word	0x0800faff
 800fa7c:	0800fb05 	.word	0x0800fb05
 800fa80:	0800fb0b 	.word	0x0800fb0b
 800fa84:	0800fb11 	.word	0x0800fb11
 800fa88:	0800fb17 	.word	0x0800fb17
       case 0: index = 0; break;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	75fb      	strb	r3, [r7, #23]
 800fa90:	e044      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 1: index = 1; break;
 800fa92:	2301      	movs	r3, #1
 800fa94:	75fb      	strb	r3, [r7, #23]
 800fa96:	e041      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 2: index = 2; break;
 800fa98:	2302      	movs	r3, #2
 800fa9a:	75fb      	strb	r3, [r7, #23]
 800fa9c:	e03e      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 3: index = 3; break;
 800fa9e:	2303      	movs	r3, #3
 800faa0:	75fb      	strb	r3, [r7, #23]
 800faa2:	e03b      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 4: index = 4; break;
 800faa4:	2304      	movs	r3, #4
 800faa6:	75fb      	strb	r3, [r7, #23]
 800faa8:	e038      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 5: index = 5; break;
 800faaa:	2305      	movs	r3, #5
 800faac:	75fb      	strb	r3, [r7, #23]
 800faae:	e035      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 6: index = 6; break;
 800fab0:	2306      	movs	r3, #6
 800fab2:	75fb      	strb	r3, [r7, #23]
 800fab4:	e032      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 7: index = 7; break;
 800fab6:	2307      	movs	r3, #7
 800fab8:	75fb      	strb	r3, [r7, #23]
 800faba:	e02f      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 8: index = 8; break;
 800fabc:	2308      	movs	r3, #8
 800fabe:	75fb      	strb	r3, [r7, #23]
 800fac0:	e02c      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 9: index = 9; break;
 800fac2:	2309      	movs	r3, #9
 800fac4:	75fb      	strb	r3, [r7, #23]
 800fac6:	e029      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 10: index = 10; break;
 800fac8:	230a      	movs	r3, #10
 800faca:	75fb      	strb	r3, [r7, #23]
 800facc:	e026      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 11: index = 11; break;
 800face:	230b      	movs	r3, #11
 800fad0:	75fb      	strb	r3, [r7, #23]
 800fad2:	e023      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 12: index = 12; break;
 800fad4:	230c      	movs	r3, #12
 800fad6:	75fb      	strb	r3, [r7, #23]
 800fad8:	e020      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 13: index = 13; break;
 800fada:	230d      	movs	r3, #13
 800fadc:	75fb      	strb	r3, [r7, #23]
 800fade:	e01d      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 14: index = 14; break;
 800fae0:	230e      	movs	r3, #14
 800fae2:	75fb      	strb	r3, [r7, #23]
 800fae4:	e01a      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 15: index = 15; break;
 800fae6:	230f      	movs	r3, #15
 800fae8:	75fb      	strb	r3, [r7, #23]
 800faea:	e017      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 16: index = 16; break;
 800faec:	2310      	movs	r3, #16
 800faee:	75fb      	strb	r3, [r7, #23]
 800faf0:	e014      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 17: index = 17; break;
 800faf2:	2311      	movs	r3, #17
 800faf4:	75fb      	strb	r3, [r7, #23]
 800faf6:	e011      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 18: index = 18; break;
 800faf8:	2312      	movs	r3, #18
 800fafa:	75fb      	strb	r3, [r7, #23]
 800fafc:	e00e      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 19: index = 19; break;
 800fafe:	2313      	movs	r3, #19
 800fb00:	75fb      	strb	r3, [r7, #23]
 800fb02:	e00b      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 20: index = 20; break;
 800fb04:	2314      	movs	r3, #20
 800fb06:	75fb      	strb	r3, [r7, #23]
 800fb08:	e008      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 21: index = 21; break;
 800fb0a:	2315      	movs	r3, #21
 800fb0c:	75fb      	strb	r3, [r7, #23]
 800fb0e:	e005      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 22: index = 22; break;
 800fb10:	2316      	movs	r3, #22
 800fb12:	75fb      	strb	r3, [r7, #23]
 800fb14:	e002      	b.n	800fb1c <can1_ams_cell_voltages_array_raise+0x108>
       case 23: index = 23; break;
 800fb16:	2317      	movs	r3, #23
 800fb18:	75fb      	strb	r3, [r7, #23]
 800fb1a:	bf00      	nop
       default: return;
   }

    if(index < 24) {
 800fb1c:	7dfb      	ldrb	r3, [r7, #23]
 800fb1e:	2b17      	cmp	r3, #23
 800fb20:	d844      	bhi.n	800fbac <can1_ams_cell_voltages_array_raise+0x198>
        uint8_t div = index / 8;
 800fb22:	7dfb      	ldrb	r3, [r7, #23]
 800fb24:	08db      	lsrs	r3, r3, #3
 800fb26:	73fb      	strb	r3, [r7, #15]
        uint8_t rem = index % 8;
 800fb28:	7dfb      	ldrb	r3, [r7, #23]
 800fb2a:	f003 0307 	and.w	r3, r3, #7
 800fb2e:	73bb      	strb	r3, [r7, #14]
        uint8_t flag = (1 << rem);
 800fb30:	7bbb      	ldrb	r3, [r7, #14]
 800fb32:	2201      	movs	r2, #1
 800fb34:	fa02 f303 	lsl.w	r3, r2, r3
 800fb38:	737b      	strb	r3, [r7, #13]
        
        if(!(array[div] & flag)) {
 800fb3a:	7bfb      	ldrb	r3, [r7, #15]
 800fb3c:	4a1e      	ldr	r2, [pc, #120]	; (800fbb8 <can1_ams_cell_voltages_array_raise+0x1a4>)
 800fb3e:	5cd2      	ldrb	r2, [r2, r3]
 800fb40:	7b7b      	ldrb	r3, [r7, #13]
 800fb42:	4013      	ands	r3, r2
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d130      	bne.n	800fbac <can1_ams_cell_voltages_array_raise+0x198>
            array[div] |= flag;
 800fb4a:	7bfb      	ldrb	r3, [r7, #15]
 800fb4c:	4a1a      	ldr	r2, [pc, #104]	; (800fbb8 <can1_ams_cell_voltages_array_raise+0x1a4>)
 800fb4e:	5cd1      	ldrb	r1, [r2, r3]
 800fb50:	7bfb      	ldrb	r3, [r7, #15]
 800fb52:	7b7a      	ldrb	r2, [r7, #13]
 800fb54:	430a      	orrs	r2, r1
 800fb56:	b2d1      	uxtb	r1, r2
 800fb58:	4a17      	ldr	r2, [pc, #92]	; (800fbb8 <can1_ams_cell_voltages_array_raise+0x1a4>)
 800fb5a:	54d1      	strb	r1, [r2, r3]
            count = (count + 1) % 24;
 800fb5c:	4b17      	ldr	r3, [pc, #92]	; (800fbbc <can1_ams_cell_voltages_array_raise+0x1a8>)
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	1c5a      	adds	r2, r3, #1
 800fb62:	4b17      	ldr	r3, [pc, #92]	; (800fbc0 <can1_ams_cell_voltages_array_raise+0x1ac>)
 800fb64:	fb83 1302 	smull	r1, r3, r3, r2
 800fb68:	1099      	asrs	r1, r3, #2
 800fb6a:	17d3      	asrs	r3, r2, #31
 800fb6c:	1ac9      	subs	r1, r1, r3
 800fb6e:	460b      	mov	r3, r1
 800fb70:	005b      	lsls	r3, r3, #1
 800fb72:	440b      	add	r3, r1
 800fb74:	00db      	lsls	r3, r3, #3
 800fb76:	1ad1      	subs	r1, r2, r3
 800fb78:	b2ca      	uxtb	r2, r1
 800fb7a:	4b10      	ldr	r3, [pc, #64]	; (800fbbc <can1_ams_cell_voltages_array_raise+0x1a8>)
 800fb7c:	701a      	strb	r2, [r3, #0]

            if(count == 0) {
 800fb7e:	4b0f      	ldr	r3, [pc, #60]	; (800fbbc <can1_ams_cell_voltages_array_raise+0x1a8>)
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d112      	bne.n	800fbac <can1_ams_cell_voltages_array_raise+0x198>
                for(int i = 0; i < (1 + 24 / 8); i++) {
 800fb86:	2300      	movs	r3, #0
 800fb88:	613b      	str	r3, [r7, #16]
 800fb8a:	e007      	b.n	800fb9c <can1_ams_cell_voltages_array_raise+0x188>
                    array[i] = 0;
 800fb8c:	4a0a      	ldr	r2, [pc, #40]	; (800fbb8 <can1_ams_cell_voltages_array_raise+0x1a4>)
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	4413      	add	r3, r2
 800fb92:	2200      	movs	r2, #0
 800fb94:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < (1 + 24 / 8); i++) {
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	3301      	adds	r3, #1
 800fb9a:	613b      	str	r3, [r7, #16]
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	2b03      	cmp	r3, #3
 800fba0:	ddf4      	ble.n	800fb8c <can1_ams_cell_voltages_array_raise+0x178>
                }
                can1_ams_cell_voltages_flag = 1;
 800fba2:	4b08      	ldr	r3, [pc, #32]	; (800fbc4 <can1_ams_cell_voltages_array_raise+0x1b0>)
 800fba4:	2201      	movs	r2, #1
 800fba6:	701a      	strb	r2, [r3, #0]
 800fba8:	e000      	b.n	800fbac <can1_ams_cell_voltages_array_raise+0x198>
       default: return;
 800fbaa:	bf00      	nop
            }
        }
    }
}
 800fbac:	371c      	adds	r7, #28
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr
 800fbb6:	bf00      	nop
 800fbb8:	20001638 	.word	0x20001638
 800fbbc:	2000163c 	.word	0x2000163c
 800fbc0:	2aaaaaab 	.word	0x2aaaaaab
 800fbc4:	20001628 	.word	0x20001628

0800fbc8 <can1_ams_cell_temperatures_array_raise>:
static void can1_ams_cell_temperatures_array_raise(uint16_t _index) {
 800fbc8:	b480      	push	{r7}
 800fbca:	b087      	sub	sp, #28
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	4603      	mov	r3, r0
 800fbd0:	80fb      	strh	r3, [r7, #6]
   static uint8_t array[1 +  12 / 8];
   static uint8_t count = 0;
   uint8_t index;

   switch(_index) {
 800fbd2:	88fb      	ldrh	r3, [r7, #6]
 800fbd4:	2b0b      	cmp	r3, #11
 800fbd6:	f200 8086 	bhi.w	800fce6 <can1_ams_cell_temperatures_array_raise+0x11e>
 800fbda:	a201      	add	r2, pc, #4	; (adr r2, 800fbe0 <can1_ams_cell_temperatures_array_raise+0x18>)
 800fbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe0:	0800fc11 	.word	0x0800fc11
 800fbe4:	0800fc17 	.word	0x0800fc17
 800fbe8:	0800fc1d 	.word	0x0800fc1d
 800fbec:	0800fc23 	.word	0x0800fc23
 800fbf0:	0800fc29 	.word	0x0800fc29
 800fbf4:	0800fc2f 	.word	0x0800fc2f
 800fbf8:	0800fc35 	.word	0x0800fc35
 800fbfc:	0800fc3b 	.word	0x0800fc3b
 800fc00:	0800fc41 	.word	0x0800fc41
 800fc04:	0800fc47 	.word	0x0800fc47
 800fc08:	0800fc4d 	.word	0x0800fc4d
 800fc0c:	0800fc53 	.word	0x0800fc53
       case 0: index = 0; break;
 800fc10:	2300      	movs	r3, #0
 800fc12:	75fb      	strb	r3, [r7, #23]
 800fc14:	e020      	b.n	800fc58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 1: index = 1; break;
 800fc16:	2301      	movs	r3, #1
 800fc18:	75fb      	strb	r3, [r7, #23]
 800fc1a:	e01d      	b.n	800fc58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 2: index = 2; break;
 800fc1c:	2302      	movs	r3, #2
 800fc1e:	75fb      	strb	r3, [r7, #23]
 800fc20:	e01a      	b.n	800fc58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 3: index = 3; break;
 800fc22:	2303      	movs	r3, #3
 800fc24:	75fb      	strb	r3, [r7, #23]
 800fc26:	e017      	b.n	800fc58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 4: index = 4; break;
 800fc28:	2304      	movs	r3, #4
 800fc2a:	75fb      	strb	r3, [r7, #23]
 800fc2c:	e014      	b.n	800fc58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 5: index = 5; break;
 800fc2e:	2305      	movs	r3, #5
 800fc30:	75fb      	strb	r3, [r7, #23]
 800fc32:	e011      	b.n	800fc58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 6: index = 6; break;
 800fc34:	2306      	movs	r3, #6
 800fc36:	75fb      	strb	r3, [r7, #23]
 800fc38:	e00e      	b.n	800fc58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 7: index = 7; break;
 800fc3a:	2307      	movs	r3, #7
 800fc3c:	75fb      	strb	r3, [r7, #23]
 800fc3e:	e00b      	b.n	800fc58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 8: index = 8; break;
 800fc40:	2308      	movs	r3, #8
 800fc42:	75fb      	strb	r3, [r7, #23]
 800fc44:	e008      	b.n	800fc58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 9: index = 9; break;
 800fc46:	2309      	movs	r3, #9
 800fc48:	75fb      	strb	r3, [r7, #23]
 800fc4a:	e005      	b.n	800fc58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 10: index = 10; break;
 800fc4c:	230a      	movs	r3, #10
 800fc4e:	75fb      	strb	r3, [r7, #23]
 800fc50:	e002      	b.n	800fc58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 11: index = 11; break;
 800fc52:	230b      	movs	r3, #11
 800fc54:	75fb      	strb	r3, [r7, #23]
 800fc56:	bf00      	nop
       default: return;
   }

    if(index < 12) {
 800fc58:	7dfb      	ldrb	r3, [r7, #23]
 800fc5a:	2b0b      	cmp	r3, #11
 800fc5c:	d844      	bhi.n	800fce8 <can1_ams_cell_temperatures_array_raise+0x120>
        uint8_t div = index / 8;
 800fc5e:	7dfb      	ldrb	r3, [r7, #23]
 800fc60:	08db      	lsrs	r3, r3, #3
 800fc62:	73fb      	strb	r3, [r7, #15]
        uint8_t rem = index % 8;
 800fc64:	7dfb      	ldrb	r3, [r7, #23]
 800fc66:	f003 0307 	and.w	r3, r3, #7
 800fc6a:	73bb      	strb	r3, [r7, #14]
        uint8_t flag = (1 << rem);
 800fc6c:	7bbb      	ldrb	r3, [r7, #14]
 800fc6e:	2201      	movs	r2, #1
 800fc70:	fa02 f303 	lsl.w	r3, r2, r3
 800fc74:	737b      	strb	r3, [r7, #13]
        
        if(!(array[div] & flag)) {
 800fc76:	7bfb      	ldrb	r3, [r7, #15]
 800fc78:	4a1e      	ldr	r2, [pc, #120]	; (800fcf4 <can1_ams_cell_temperatures_array_raise+0x12c>)
 800fc7a:	5cd2      	ldrb	r2, [r2, r3]
 800fc7c:	7b7b      	ldrb	r3, [r7, #13]
 800fc7e:	4013      	ands	r3, r2
 800fc80:	b2db      	uxtb	r3, r3
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d130      	bne.n	800fce8 <can1_ams_cell_temperatures_array_raise+0x120>
            array[div] |= flag;
 800fc86:	7bfb      	ldrb	r3, [r7, #15]
 800fc88:	4a1a      	ldr	r2, [pc, #104]	; (800fcf4 <can1_ams_cell_temperatures_array_raise+0x12c>)
 800fc8a:	5cd1      	ldrb	r1, [r2, r3]
 800fc8c:	7bfb      	ldrb	r3, [r7, #15]
 800fc8e:	7b7a      	ldrb	r2, [r7, #13]
 800fc90:	430a      	orrs	r2, r1
 800fc92:	b2d1      	uxtb	r1, r2
 800fc94:	4a17      	ldr	r2, [pc, #92]	; (800fcf4 <can1_ams_cell_temperatures_array_raise+0x12c>)
 800fc96:	54d1      	strb	r1, [r2, r3]
            count = (count + 1) % 12;
 800fc98:	4b17      	ldr	r3, [pc, #92]	; (800fcf8 <can1_ams_cell_temperatures_array_raise+0x130>)
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	1c5a      	adds	r2, r3, #1
 800fc9e:	4b17      	ldr	r3, [pc, #92]	; (800fcfc <can1_ams_cell_temperatures_array_raise+0x134>)
 800fca0:	fb83 1302 	smull	r1, r3, r3, r2
 800fca4:	1059      	asrs	r1, r3, #1
 800fca6:	17d3      	asrs	r3, r2, #31
 800fca8:	1ac9      	subs	r1, r1, r3
 800fcaa:	460b      	mov	r3, r1
 800fcac:	005b      	lsls	r3, r3, #1
 800fcae:	440b      	add	r3, r1
 800fcb0:	009b      	lsls	r3, r3, #2
 800fcb2:	1ad1      	subs	r1, r2, r3
 800fcb4:	b2ca      	uxtb	r2, r1
 800fcb6:	4b10      	ldr	r3, [pc, #64]	; (800fcf8 <can1_ams_cell_temperatures_array_raise+0x130>)
 800fcb8:	701a      	strb	r2, [r3, #0]

            if(count == 0) {
 800fcba:	4b0f      	ldr	r3, [pc, #60]	; (800fcf8 <can1_ams_cell_temperatures_array_raise+0x130>)
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d112      	bne.n	800fce8 <can1_ams_cell_temperatures_array_raise+0x120>
                for(int i = 0; i < (1 + 12 / 8); i++) {
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	613b      	str	r3, [r7, #16]
 800fcc6:	e007      	b.n	800fcd8 <can1_ams_cell_temperatures_array_raise+0x110>
                    array[i] = 0;
 800fcc8:	4a0a      	ldr	r2, [pc, #40]	; (800fcf4 <can1_ams_cell_temperatures_array_raise+0x12c>)
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	4413      	add	r3, r2
 800fcce:	2200      	movs	r2, #0
 800fcd0:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < (1 + 12 / 8); i++) {
 800fcd2:	693b      	ldr	r3, [r7, #16]
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	613b      	str	r3, [r7, #16]
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	ddf4      	ble.n	800fcc8 <can1_ams_cell_temperatures_array_raise+0x100>
                }
                can1_ams_cell_temperatures_flag = 1;
 800fcde:	4b08      	ldr	r3, [pc, #32]	; (800fd00 <can1_ams_cell_temperatures_array_raise+0x138>)
 800fce0:	2201      	movs	r2, #1
 800fce2:	701a      	strb	r2, [r3, #0]
 800fce4:	e000      	b.n	800fce8 <can1_ams_cell_temperatures_array_raise+0x120>
       default: return;
 800fce6:	bf00      	nop
            }
        }
    }
}
 800fce8:	371c      	adds	r7, #28
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr
 800fcf2:	bf00      	nop
 800fcf4:	20001640 	.word	0x20001640
 800fcf8:	20001642 	.word	0x20001642
 800fcfc:	2aaaaaab 	.word	0x2aaaaaab
 800fd00:	20001629 	.word	0x20001629

0800fd04 <can2_charger_config_array_raise>:
static void can2_charger_config_array_raise(uint16_t _index) {
 800fd04:	b480      	push	{r7}
 800fd06:	b087      	sub	sp, #28
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	80fb      	strh	r3, [r7, #6]
   static uint8_t array[1 +  4 / 8];
   static uint8_t count = 0;
   uint8_t index;

   switch(_index) {
 800fd0e:	88fb      	ldrh	r3, [r7, #6]
 800fd10:	3b40      	subs	r3, #64	; 0x40
 800fd12:	2b04      	cmp	r3, #4
 800fd14:	d85b      	bhi.n	800fdce <can2_charger_config_array_raise+0xca>
 800fd16:	a201      	add	r2, pc, #4	; (adr r2, 800fd1c <can2_charger_config_array_raise+0x18>)
 800fd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd1c:	0800fd31 	.word	0x0800fd31
 800fd20:	0800fd37 	.word	0x0800fd37
 800fd24:	0800fd3d 	.word	0x0800fd3d
 800fd28:	0800fdcf 	.word	0x0800fdcf
 800fd2c:	0800fd43 	.word	0x0800fd43
       case 64: index = 0; break;
 800fd30:	2300      	movs	r3, #0
 800fd32:	75fb      	strb	r3, [r7, #23]
 800fd34:	e008      	b.n	800fd48 <can2_charger_config_array_raise+0x44>
       case 65: index = 1; break;
 800fd36:	2301      	movs	r3, #1
 800fd38:	75fb      	strb	r3, [r7, #23]
 800fd3a:	e005      	b.n	800fd48 <can2_charger_config_array_raise+0x44>
       case 66: index = 2; break;
 800fd3c:	2302      	movs	r3, #2
 800fd3e:	75fb      	strb	r3, [r7, #23]
 800fd40:	e002      	b.n	800fd48 <can2_charger_config_array_raise+0x44>
       case 68: index = 3; break;
 800fd42:	2303      	movs	r3, #3
 800fd44:	75fb      	strb	r3, [r7, #23]
 800fd46:	bf00      	nop
       default: return;
   }

    if(index < 4) {
 800fd48:	7dfb      	ldrb	r3, [r7, #23]
 800fd4a:	2b03      	cmp	r3, #3
 800fd4c:	d840      	bhi.n	800fdd0 <can2_charger_config_array_raise+0xcc>
        uint8_t div = index / 8;
 800fd4e:	7dfb      	ldrb	r3, [r7, #23]
 800fd50:	08db      	lsrs	r3, r3, #3
 800fd52:	73fb      	strb	r3, [r7, #15]
        uint8_t rem = index % 8;
 800fd54:	7dfb      	ldrb	r3, [r7, #23]
 800fd56:	f003 0307 	and.w	r3, r3, #7
 800fd5a:	73bb      	strb	r3, [r7, #14]
        uint8_t flag = (1 << rem);
 800fd5c:	7bbb      	ldrb	r3, [r7, #14]
 800fd5e:	2201      	movs	r2, #1
 800fd60:	fa02 f303 	lsl.w	r3, r2, r3
 800fd64:	737b      	strb	r3, [r7, #13]
        
        if(!(array[div] & flag)) {
 800fd66:	7bfb      	ldrb	r3, [r7, #15]
 800fd68:	4a1c      	ldr	r2, [pc, #112]	; (800fddc <can2_charger_config_array_raise+0xd8>)
 800fd6a:	5cd2      	ldrb	r2, [r2, r3]
 800fd6c:	7b7b      	ldrb	r3, [r7, #13]
 800fd6e:	4013      	ands	r3, r2
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d12c      	bne.n	800fdd0 <can2_charger_config_array_raise+0xcc>
            array[div] |= flag;
 800fd76:	7bfb      	ldrb	r3, [r7, #15]
 800fd78:	4a18      	ldr	r2, [pc, #96]	; (800fddc <can2_charger_config_array_raise+0xd8>)
 800fd7a:	5cd1      	ldrb	r1, [r2, r3]
 800fd7c:	7bfb      	ldrb	r3, [r7, #15]
 800fd7e:	7b7a      	ldrb	r2, [r7, #13]
 800fd80:	430a      	orrs	r2, r1
 800fd82:	b2d1      	uxtb	r1, r2
 800fd84:	4a15      	ldr	r2, [pc, #84]	; (800fddc <can2_charger_config_array_raise+0xd8>)
 800fd86:	54d1      	strb	r1, [r2, r3]
            count = (count + 1) % 4;
 800fd88:	4b15      	ldr	r3, [pc, #84]	; (800fde0 <can2_charger_config_array_raise+0xdc>)
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	425a      	negs	r2, r3
 800fd90:	f003 0303 	and.w	r3, r3, #3
 800fd94:	f002 0203 	and.w	r2, r2, #3
 800fd98:	bf58      	it	pl
 800fd9a:	4253      	negpl	r3, r2
 800fd9c:	b2da      	uxtb	r2, r3
 800fd9e:	4b10      	ldr	r3, [pc, #64]	; (800fde0 <can2_charger_config_array_raise+0xdc>)
 800fda0:	701a      	strb	r2, [r3, #0]

            if(count == 0) {
 800fda2:	4b0f      	ldr	r3, [pc, #60]	; (800fde0 <can2_charger_config_array_raise+0xdc>)
 800fda4:	781b      	ldrb	r3, [r3, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d112      	bne.n	800fdd0 <can2_charger_config_array_raise+0xcc>
                for(int i = 0; i < (1 + 4 / 8); i++) {
 800fdaa:	2300      	movs	r3, #0
 800fdac:	613b      	str	r3, [r7, #16]
 800fdae:	e007      	b.n	800fdc0 <can2_charger_config_array_raise+0xbc>
                    array[i] = 0;
 800fdb0:	4a0a      	ldr	r2, [pc, #40]	; (800fddc <can2_charger_config_array_raise+0xd8>)
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	4413      	add	r3, r2
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < (1 + 4 / 8); i++) {
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	613b      	str	r3, [r7, #16]
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	ddf4      	ble.n	800fdb0 <can2_charger_config_array_raise+0xac>
                }
                can2_charger_config_flag = 1;
 800fdc6:	4b07      	ldr	r3, [pc, #28]	; (800fde4 <can2_charger_config_array_raise+0xe0>)
 800fdc8:	2201      	movs	r2, #1
 800fdca:	701a      	strb	r2, [r3, #0]
 800fdcc:	e000      	b.n	800fdd0 <can2_charger_config_array_raise+0xcc>
       default: return;
 800fdce:	bf00      	nop
            }
        }
    }
}
 800fdd0:	371c      	adds	r7, #28
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr
 800fdda:	bf00      	nop
 800fddc:	20001644 	.word	0x20001644
 800fde0:	20001645 	.word	0x20001645
 800fde4:	2000162e 	.word	0x2000162e

0800fde8 <can1_ams_status_1_decode>:
/*
 * @Brief  
 * @Retval None
 */
void can1_ams_status_1_decode() {
 800fde8:	b580      	push	{r7, lr}
 800fdea:	af00      	add	r7, sp, #0
   can1_ams_status_1_unpack(&can1_ams_status_1, rx_data, 8);
 800fdec:	2208      	movs	r2, #8
 800fdee:	4905      	ldr	r1, [pc, #20]	; (800fe04 <can1_ams_status_1_decode+0x1c>)
 800fdf0:	4805      	ldr	r0, [pc, #20]	; (800fe08 <can1_ams_status_1_decode+0x20>)
 800fdf2:	f7f1 fa85 	bl	8001300 <can1_ams_status_1_unpack>
   can1_ams_status_1_flag = 1;
 800fdf6:	4b05      	ldr	r3, [pc, #20]	; (800fe0c <can1_ams_status_1_decode+0x24>)
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	701a      	strb	r2, [r3, #0]
   can1_ams_status_1_receive();
 800fdfc:	f002 fbc6 	bl	801258c <can1_ams_status_1_receive>
}
 800fe00:	bf00      	nop
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	200014d0 	.word	0x200014d0
 800fe08:	200014d8 	.word	0x200014d8
 800fe0c:	20001625 	.word	0x20001625

0800fe10 <can1_dbu_status_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_decode() {
 800fe10:	b580      	push	{r7, lr}
 800fe12:	af00      	add	r7, sp, #0
   can1_dbu_status_1_unpack(&can1_dbu_status_1, rx_data, 8);
 800fe14:	2208      	movs	r2, #8
 800fe16:	4905      	ldr	r1, [pc, #20]	; (800fe2c <can1_dbu_status_1_decode+0x1c>)
 800fe18:	4805      	ldr	r0, [pc, #20]	; (800fe30 <can1_dbu_status_1_decode+0x20>)
 800fe1a:	f7f1 fe3c 	bl	8001a96 <can1_dbu_status_1_unpack>
   can1_dbu_status_1_flag = 1;
 800fe1e:	4b05      	ldr	r3, [pc, #20]	; (800fe34 <can1_dbu_status_1_decode+0x24>)
 800fe20:	2201      	movs	r2, #1
 800fe22:	701a      	strb	r2, [r3, #0]
   can1_dbu_status_1_receive();
 800fe24:	f002 fc72 	bl	801270c <can1_dbu_status_1_receive>
}
 800fe28:	bf00      	nop
 800fe2a:	bd80      	pop	{r7, pc}
 800fe2c:	200014d0 	.word	0x200014d0
 800fe30:	200014e8 	.word	0x200014e8
 800fe34:	20001626 	.word	0x20001626

0800fe38 <can1_ams_temperatures_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_temperatures_decode() {
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	af00      	add	r7, sp, #0
   can1_ams_temperatures_unpack(&can1_ams_temperatures, rx_data, 6);
 800fe3c:	2206      	movs	r2, #6
 800fe3e:	4905      	ldr	r1, [pc, #20]	; (800fe54 <can1_ams_temperatures_decode+0x1c>)
 800fe40:	4805      	ldr	r0, [pc, #20]	; (800fe58 <can1_ams_temperatures_decode+0x20>)
 800fe42:	f7f1 ffb7 	bl	8001db4 <can1_ams_temperatures_unpack>
   can1_ams_temperatures_flag = 1;
 800fe46:	4b05      	ldr	r3, [pc, #20]	; (800fe5c <can1_ams_temperatures_decode+0x24>)
 800fe48:	2201      	movs	r2, #1
 800fe4a:	701a      	strb	r2, [r3, #0]
   can1_ams_temperatures_receive();
 800fe4c:	f002 fc9c 	bl	8012788 <can1_ams_temperatures_receive>
}
 800fe50:	bf00      	nop
 800fe52:	bd80      	pop	{r7, pc}
 800fe54:	200014d0 	.word	0x200014d0
 800fe58:	200014ec 	.word	0x200014ec
 800fe5c:	20001627 	.word	0x20001627

0800fe60 <can1_ams_cell_voltages_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_voltages_decode() {
 800fe60:	b580      	push	{r7, lr}
 800fe62:	af00      	add	r7, sp, #0
   can1_ams_cell_voltages_unpack(&can1_ams_cell_voltages, rx_data, 7);
 800fe64:	2207      	movs	r2, #7
 800fe66:	4907      	ldr	r1, [pc, #28]	; (800fe84 <can1_ams_cell_voltages_decode+0x24>)
 800fe68:	4807      	ldr	r0, [pc, #28]	; (800fe88 <can1_ams_cell_voltages_decode+0x28>)
 800fe6a:	f7f3 faed 	bl	8003448 <can1_ams_cell_voltages_unpack>
   can1_ams_cell_voltages_array_raise(can1_ams_cell_voltages.voltage_multiplexor);
 800fe6e:	4b06      	ldr	r3, [pc, #24]	; (800fe88 <can1_ams_cell_voltages_decode+0x28>)
 800fe70:	781b      	ldrb	r3, [r3, #0]
 800fe72:	b29b      	uxth	r3, r3
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7ff fdcd 	bl	800fa14 <can1_ams_cell_voltages_array_raise>
   can1_ams_cell_voltages_receive();
 800fe7a:	f002 fccb 	bl	8012814 <can1_ams_cell_voltages_receive>
}
 800fe7e:	bf00      	nop
 800fe80:	bd80      	pop	{r7, pc}
 800fe82:	bf00      	nop
 800fe84:	200014d0 	.word	0x200014d0
 800fe88:	200014f4 	.word	0x200014f4

0800fe8c <can1_ams_cell_temperatures_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_temperatures_decode() {
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	af00      	add	r7, sp, #0
   can1_ams_cell_temperatures_unpack(&can1_ams_cell_temperatures, rx_data, 8);
 800fe90:	2208      	movs	r2, #8
 800fe92:	4907      	ldr	r1, [pc, #28]	; (800feb0 <can1_ams_cell_temperatures_decode+0x24>)
 800fe94:	4807      	ldr	r0, [pc, #28]	; (800feb4 <can1_ams_cell_temperatures_decode+0x28>)
 800fe96:	f7fa fe13 	bl	800aac0 <can1_ams_cell_temperatures_unpack>
   can1_ams_cell_temperatures_array_raise(can1_ams_cell_temperatures.temperature_multiplexor);
 800fe9a:	4b06      	ldr	r3, [pc, #24]	; (800feb4 <can1_ams_cell_temperatures_decode+0x28>)
 800fe9c:	781b      	ldrb	r3, [r3, #0]
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7ff fe91 	bl	800fbc8 <can1_ams_cell_temperatures_array_raise>
   can1_ams_cell_temperatures_receive();
 800fea6:	f003 fb21 	bl	80134ec <can1_ams_cell_temperatures_receive>
}
 800feaa:	bf00      	nop
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	200014d0 	.word	0x200014d0
 800feb4:	20001574 	.word	0x20001574

0800feb8 <can2_amk1_setpoints_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_amk1_setpoints_1_decode() {
 800feb8:	b580      	push	{r7, lr}
 800feba:	af00      	add	r7, sp, #0
   can2_amk1_setpoints_1_unpack(&can2_amk1_setpoints_1, rx_data, 8);
 800febc:	2208      	movs	r2, #8
 800febe:	4905      	ldr	r1, [pc, #20]	; (800fed4 <can2_amk1_setpoints_1_decode+0x1c>)
 800fec0:	4805      	ldr	r0, [pc, #20]	; (800fed8 <can2_amk1_setpoints_1_decode+0x20>)
 800fec2:	f7fe fdf4 	bl	800eaae <can2_amk1_setpoints_1_unpack>
   can2_amk1_setpoints_1_flag = 1;
 800fec6:	4b05      	ldr	r3, [pc, #20]	; (800fedc <can2_amk1_setpoints_1_decode+0x24>)
 800fec8:	2201      	movs	r2, #1
 800feca:	701a      	strb	r2, [r3, #0]
   can2_amk1_setpoints_1_receive();
 800fecc:	f003 fe38 	bl	8013b40 <can2_amk1_setpoints_1_receive>
}
 800fed0:	bf00      	nop
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	200014d0 	.word	0x200014d0
 800fed8:	200015f0 	.word	0x200015f0
 800fedc:	2000162a 	.word	0x2000162a

0800fee0 <can2_ivt_msg_result_i_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_decode() {
 800fee0:	b580      	push	{r7, lr}
 800fee2:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_i_unpack(&can2_ivt_msg_result_i, rx_data, 6);
 800fee4:	2206      	movs	r2, #6
 800fee6:	4905      	ldr	r1, [pc, #20]	; (800fefc <can2_ivt_msg_result_i_decode+0x1c>)
 800fee8:	4805      	ldr	r0, [pc, #20]	; (800ff00 <can2_ivt_msg_result_i_decode+0x20>)
 800feea:	f7fe ff7b 	bl	800ede4 <can2_ivt_msg_result_i_unpack>
   can2_ivt_msg_result_i_flag = 1;
 800feee:	4b05      	ldr	r3, [pc, #20]	; (800ff04 <can2_ivt_msg_result_i_decode+0x24>)
 800fef0:	2201      	movs	r2, #1
 800fef2:	701a      	strb	r2, [r3, #0]
   can2_ivt_msg_result_i_receive();
 800fef4:	f003 fea0 	bl	8013c38 <can2_ivt_msg_result_i_receive>
}
 800fef8:	bf00      	nop
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	200014d0 	.word	0x200014d0
 800ff00:	20001600 	.word	0x20001600
 800ff04:	2000162b 	.word	0x2000162b

0800ff08 <can2_ivt_msg_result_u1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_decode() {
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u1_unpack(&can2_ivt_msg_result_u1, rx_data, 6);
 800ff0c:	2206      	movs	r2, #6
 800ff0e:	4905      	ldr	r1, [pc, #20]	; (800ff24 <can2_ivt_msg_result_u1_decode+0x1c>)
 800ff10:	4805      	ldr	r0, [pc, #20]	; (800ff28 <can2_ivt_msg_result_u1_decode+0x20>)
 800ff12:	f7ff f8b7 	bl	800f084 <can2_ivt_msg_result_u1_unpack>
   can2_ivt_msg_result_u1_flag = 1;
 800ff16:	4b05      	ldr	r3, [pc, #20]	; (800ff2c <can2_ivt_msg_result_u1_decode+0x24>)
 800ff18:	2201      	movs	r2, #1
 800ff1a:	701a      	strb	r2, [r3, #0]
   can2_ivt_msg_result_u1_receive();
 800ff1c:	f003 feb0 	bl	8013c80 <can2_ivt_msg_result_u1_receive>
}
 800ff20:	bf00      	nop
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	200014d0 	.word	0x200014d0
 800ff28:	20001608 	.word	0x20001608
 800ff2c:	2000162c 	.word	0x2000162c

0800ff30 <can2_ivt_msg_result_u3_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_decode() {
 800ff30:	b580      	push	{r7, lr}
 800ff32:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u3_unpack(&can2_ivt_msg_result_u3, rx_data, 6);
 800ff34:	2206      	movs	r2, #6
 800ff36:	4905      	ldr	r1, [pc, #20]	; (800ff4c <can2_ivt_msg_result_u3_decode+0x1c>)
 800ff38:	4805      	ldr	r0, [pc, #20]	; (800ff50 <can2_ivt_msg_result_u3_decode+0x20>)
 800ff3a:	f7ff f9f3 	bl	800f324 <can2_ivt_msg_result_u3_unpack>
   can2_ivt_msg_result_u3_flag = 1;
 800ff3e:	4b05      	ldr	r3, [pc, #20]	; (800ff54 <can2_ivt_msg_result_u3_decode+0x24>)
 800ff40:	2201      	movs	r2, #1
 800ff42:	701a      	strb	r2, [r3, #0]
   can2_ivt_msg_result_u3_receive();
 800ff44:	f003 fec0 	bl	8013cc8 <can2_ivt_msg_result_u3_receive>
}
 800ff48:	bf00      	nop
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	200014d0 	.word	0x200014d0
 800ff50:	20001610 	.word	0x20001610
 800ff54:	2000162d 	.word	0x2000162d

0800ff58 <can2_charger_config_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_charger_config_decode() {
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	af00      	add	r7, sp, #0
   can2_charger_config_unpack(&can2_charger_config, rx_data, 4);
 800ff5c:	2204      	movs	r2, #4
 800ff5e:	4907      	ldr	r1, [pc, #28]	; (800ff7c <can2_charger_config_decode+0x24>)
 800ff60:	4807      	ldr	r0, [pc, #28]	; (800ff80 <can2_charger_config_decode+0x28>)
 800ff62:	f7ff fb7b 	bl	800f65c <can2_charger_config_unpack>
   can2_charger_config_array_raise(can2_charger_config.set_mux);
 800ff66:	4b06      	ldr	r3, [pc, #24]	; (800ff80 <can2_charger_config_decode+0x28>)
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7ff fec9 	bl	800fd04 <can2_charger_config_array_raise>
   can2_charger_config_receive();
 800ff72:	f003 fecd 	bl	8013d10 <can2_charger_config_receive>
}
 800ff76:	bf00      	nop
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	200014d0 	.word	0x200014d0
 800ff80:	20001618 	.word	0x20001618

0800ff84 <can2_cc_status_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_cc_status_decode() {
 800ff84:	b580      	push	{r7, lr}
 800ff86:	af00      	add	r7, sp, #0
   can2_cc_status_unpack(&can2_cc_status, rx_data, 1);
 800ff88:	2201      	movs	r2, #1
 800ff8a:	4905      	ldr	r1, [pc, #20]	; (800ffa0 <can2_cc_status_decode+0x1c>)
 800ff8c:	4805      	ldr	r0, [pc, #20]	; (800ffa4 <can2_cc_status_decode+0x20>)
 800ff8e:	f7ff fd01 	bl	800f994 <can2_cc_status_unpack>
   can2_cc_status_flag = 1;
 800ff92:	4b05      	ldr	r3, [pc, #20]	; (800ffa8 <can2_cc_status_decode+0x24>)
 800ff94:	2201      	movs	r2, #1
 800ff96:	701a      	strb	r2, [r3, #0]
   can2_cc_status_receive();
 800ff98:	f003 ff0e 	bl	8013db8 <can2_cc_status_receive>
}
 800ff9c:	bf00      	nop
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	200014d0 	.word	0x200014d0
 800ffa4:	20001624 	.word	0x20001624
 800ffa8:	2000162f 	.word	0x2000162f

0800ffac <can1_ams_status_1_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_status_1_transmit() {
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b09a      	sub	sp, #104	; 0x68
 800ffb0:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 800ffb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	601a      	str	r2, [r3, #0]
 800ffba:	605a      	str	r2, [r3, #4]
 800ffbc:	609a      	str	r2, [r3, #8]
 800ffbe:	60da      	str	r2, [r3, #12]
 800ffc0:	611a      	str	r2, [r3, #16]
 800ffc2:	615a      	str	r2, [r3, #20]
 800ffc4:	2320      	movs	r3, #32
 800ffc6:	64bb      	str	r3, [r7, #72]	; 0x48
 800ffc8:	2308      	movs	r3, #8
 800ffca:	65bb      	str	r3, [r7, #88]	; 0x58
       .StdId = 32,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_status_1_t ams_status_1;
   can1_ams_status_1_tx_callback(&ams_status_1);
 800ffcc:	463b      	mov	r3, r7
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f005 fdbc 	bl	8015b4c <can1_ams_status_1_tx_callback>

   can1_ams_status_1.charging_status = can1_ams_status_1_charging_status_encode(ams_status_1.charging_status);
 800ffd4:	78fb      	ldrb	r3, [r7, #3]
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7f0 fa86 	bl	80004e8 <__aeabi_ui2d>
 800ffdc:	4602      	mov	r2, r0
 800ffde:	460b      	mov	r3, r1
 800ffe0:	ec43 2b10 	vmov	d0, r2, r3
 800ffe4:	f7f1 fa66 	bl	80014b4 <can1_ams_status_1_charging_status_encode>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	461a      	mov	r2, r3
 800ffec:	4b60      	ldr	r3, [pc, #384]	; (8010170 <can1_ams_status_1_transmit+0x1c4>)
 800ffee:	701a      	strb	r2, [r3, #0]
   can1_ams_status_1.air1_closed = can1_ams_status_1_air1_closed_encode(ams_status_1.air1_closed);
 800fff0:	783b      	ldrb	r3, [r7, #0]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7f0 fa78 	bl	80004e8 <__aeabi_ui2d>
 800fff8:	4602      	mov	r2, r0
 800fffa:	460b      	mov	r3, r1
 800fffc:	ec43 2b10 	vmov	d0, r2, r3
 8010000:	f7f1 fa7b 	bl	80014fa <can1_ams_status_1_air1_closed_encode>
 8010004:	4603      	mov	r3, r0
 8010006:	461a      	mov	r2, r3
 8010008:	4b59      	ldr	r3, [pc, #356]	; (8010170 <can1_ams_status_1_transmit+0x1c4>)
 801000a:	705a      	strb	r2, [r3, #1]
   can1_ams_status_1.air2_closed = can1_ams_status_1_air2_closed_encode(ams_status_1.air2_closed);
 801000c:	787b      	ldrb	r3, [r7, #1]
 801000e:	4618      	mov	r0, r3
 8010010:	f7f0 fa6a 	bl	80004e8 <__aeabi_ui2d>
 8010014:	4602      	mov	r2, r0
 8010016:	460b      	mov	r3, r1
 8010018:	ec43 2b10 	vmov	d0, r2, r3
 801001c:	f7f1 fa90 	bl	8001540 <can1_ams_status_1_air2_closed_encode>
 8010020:	4603      	mov	r3, r0
 8010022:	461a      	mov	r2, r3
 8010024:	4b52      	ldr	r3, [pc, #328]	; (8010170 <can1_ams_status_1_transmit+0x1c4>)
 8010026:	709a      	strb	r2, [r3, #2]
   can1_ams_status_1.sc_closed = can1_ams_status_1_sc_closed_encode(ams_status_1.sc_closed);
 8010028:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801002c:	4618      	mov	r0, r3
 801002e:	f7f0 fa5b 	bl	80004e8 <__aeabi_ui2d>
 8010032:	4602      	mov	r2, r0
 8010034:	460b      	mov	r3, r1
 8010036:	ec43 2b10 	vmov	d0, r2, r3
 801003a:	f7f1 faa4 	bl	8001586 <can1_ams_status_1_sc_closed_encode>
 801003e:	4603      	mov	r3, r0
 8010040:	461a      	mov	r2, r3
 8010042:	4b4b      	ldr	r3, [pc, #300]	; (8010170 <can1_ams_status_1_transmit+0x1c4>)
 8010044:	70da      	strb	r2, [r3, #3]
   can1_ams_status_1.pre_charge_status = can1_ams_status_1_pre_charge_status_encode(ams_status_1.pre_charge_status);
 8010046:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801004a:	4618      	mov	r0, r3
 801004c:	f7f0 fa4c 	bl	80004e8 <__aeabi_ui2d>
 8010050:	4602      	mov	r2, r0
 8010052:	460b      	mov	r3, r1
 8010054:	ec43 2b10 	vmov	d0, r2, r3
 8010058:	f7f1 fab8 	bl	80015cc <can1_ams_status_1_pre_charge_status_encode>
 801005c:	4603      	mov	r3, r0
 801005e:	461a      	mov	r2, r3
 8010060:	4b43      	ldr	r3, [pc, #268]	; (8010170 <can1_ams_status_1_transmit+0x1c4>)
 8010062:	711a      	strb	r2, [r3, #4]
   can1_ams_status_1.ams_error = can1_ams_status_1_ams_error_encode(ams_status_1.ams_error);
 8010064:	78bb      	ldrb	r3, [r7, #2]
 8010066:	4618      	mov	r0, r3
 8010068:	f7f0 fa3e 	bl	80004e8 <__aeabi_ui2d>
 801006c:	4602      	mov	r2, r0
 801006e:	460b      	mov	r3, r1
 8010070:	ec43 2b10 	vmov	d0, r2, r3
 8010074:	f7f1 facd 	bl	8001612 <can1_ams_status_1_ams_error_encode>
 8010078:	4603      	mov	r3, r0
 801007a:	461a      	mov	r2, r3
 801007c:	4b3c      	ldr	r3, [pc, #240]	; (8010170 <can1_ams_status_1_transmit+0x1c4>)
 801007e:	715a      	strb	r2, [r3, #5]
   can1_ams_status_1.imd_error = can1_ams_status_1_imd_error_encode(ams_status_1.imd_error);
 8010080:	7c3b      	ldrb	r3, [r7, #16]
 8010082:	4618      	mov	r0, r3
 8010084:	f7f0 fa30 	bl	80004e8 <__aeabi_ui2d>
 8010088:	4602      	mov	r2, r0
 801008a:	460b      	mov	r3, r1
 801008c:	ec43 2b10 	vmov	d0, r2, r3
 8010090:	f7f1 fae2 	bl	8001658 <can1_ams_status_1_imd_error_encode>
 8010094:	4603      	mov	r3, r0
 8010096:	461a      	mov	r2, r3
 8010098:	4b35      	ldr	r3, [pc, #212]	; (8010170 <can1_ams_status_1_transmit+0x1c4>)
 801009a:	719a      	strb	r2, [r3, #6]
   can1_ams_status_1.state_of_charge = can1_ams_status_1_state_of_charge_encode(ams_status_1.state_of_charge);
 801009c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80100a0:	eeb0 0a47 	vmov.f32	s0, s14
 80100a4:	eef0 0a67 	vmov.f32	s1, s15
 80100a8:	f7f1 faf9 	bl	800169e <can1_ams_status_1_state_of_charge_encode>
 80100ac:	4603      	mov	r3, r0
 80100ae:	461a      	mov	r2, r3
 80100b0:	4b2f      	ldr	r3, [pc, #188]	; (8010170 <can1_ams_status_1_transmit+0x1c4>)
 80100b2:	71da      	strb	r2, [r3, #7]
   can1_ams_status_1.min_cell_voltage = can1_ams_status_1_min_cell_voltage_encode(ams_status_1.min_cell_voltage);
 80100b4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80100b8:	eeb0 0a47 	vmov.f32	s0, s14
 80100bc:	eef0 0a67 	vmov.f32	s1, s15
 80100c0:	f7f1 fb12 	bl	80016e8 <can1_ams_status_1_min_cell_voltage_encode>
 80100c4:	4603      	mov	r3, r0
 80100c6:	461a      	mov	r2, r3
 80100c8:	4b29      	ldr	r3, [pc, #164]	; (8010170 <can1_ams_status_1_transmit+0x1c4>)
 80100ca:	721a      	strb	r2, [r3, #8]
   can1_ams_status_1.max_cell_voltage = can1_ams_status_1_max_cell_voltage_encode(ams_status_1.max_cell_voltage);
 80100cc:	ed97 7b08 	vldr	d7, [r7, #32]
 80100d0:	eeb0 0a47 	vmov.f32	s0, s14
 80100d4:	eef0 0a67 	vmov.f32	s1, s15
 80100d8:	f7f1 fb5e 	bl	8001798 <can1_ams_status_1_max_cell_voltage_encode>
 80100dc:	4603      	mov	r3, r0
 80100de:	461a      	mov	r2, r3
 80100e0:	4b23      	ldr	r3, [pc, #140]	; (8010170 <can1_ams_status_1_transmit+0x1c4>)
 80100e2:	725a      	strb	r2, [r3, #9]
   can1_ams_status_1.min_cell_temperature = can1_ams_status_1_min_cell_temperature_encode(ams_status_1.min_cell_temperature);
 80100e4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80100e8:	eeb0 0a47 	vmov.f32	s0, s14
 80100ec:	eef0 0a67 	vmov.f32	s1, s15
 80100f0:	f7f1 fbaa 	bl	8001848 <can1_ams_status_1_min_cell_temperature_encode>
 80100f4:	4603      	mov	r3, r0
 80100f6:	461a      	mov	r2, r3
 80100f8:	4b1d      	ldr	r3, [pc, #116]	; (8010170 <can1_ams_status_1_transmit+0x1c4>)
 80100fa:	815a      	strh	r2, [r3, #10]
   can1_ams_status_1.max_cell_temperature = can1_ams_status_1_max_cell_temperature_encode(ams_status_1.max_cell_temperature);
 80100fc:	ed97 7b06 	vldr	d7, [r7, #24]
 8010100:	eeb0 0a47 	vmov.f32	s0, s14
 8010104:	eef0 0a67 	vmov.f32	s1, s15
 8010108:	f7f1 fbf6 	bl	80018f8 <can1_ams_status_1_max_cell_temperature_encode>
 801010c:	4603      	mov	r3, r0
 801010e:	461a      	mov	r2, r3
 8010110:	4b17      	ldr	r3, [pc, #92]	; (8010170 <can1_ams_status_1_transmit+0x1c4>)
 8010112:	819a      	strh	r2, [r3, #12]
   can1_ams_status_1.fan_speed = can1_ams_status_1_fan_speed_encode(ams_status_1.fan_speed);
 8010114:	ed97 7b02 	vldr	d7, [r7, #8]
 8010118:	eeb0 0a47 	vmov.f32	s0, s14
 801011c:	eef0 0a67 	vmov.f32	s1, s15
 8010120:	f7f1 fc40 	bl	80019a4 <can1_ams_status_1_fan_speed_encode>
 8010124:	4603      	mov	r3, r0
 8010126:	461a      	mov	r2, r3
 8010128:	4b11      	ldr	r3, [pc, #68]	; (8010170 <can1_ams_status_1_transmit+0x1c4>)
 801012a:	739a      	strb	r2, [r3, #14]

   can1_ams_status_1_pack(tx_data, &can1_ams_status_1, 8);
 801012c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010130:	2208      	movs	r2, #8
 8010132:	490f      	ldr	r1, [pc, #60]	; (8010170 <can1_ams_status_1_transmit+0x1c4>)
 8010134:	4618      	mov	r0, r3
 8010136:	f7f0 ffd8 	bl	80010ea <can1_ams_status_1_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801013a:	bf00      	nop
 801013c:	4b0d      	ldr	r3, [pc, #52]	; (8010174 <can1_ams_status_1_transmit+0x1c8>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	4618      	mov	r0, r3
 8010142:	f015 fbf2 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8010146:	4603      	mov	r3, r0
 8010148:	2b00      	cmp	r3, #0
 801014a:	d0f7      	beq.n	801013c <can1_ams_status_1_transmit+0x190>
   if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801014c:	4b09      	ldr	r3, [pc, #36]	; (8010174 <can1_ams_status_1_transmit+0x1c8>)
 801014e:	6818      	ldr	r0, [r3, #0]
 8010150:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8010154:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8010158:	4b07      	ldr	r3, [pc, #28]	; (8010178 <can1_ams_status_1_transmit+0x1cc>)
 801015a:	f015 fb0b 	bl	8025774 <HAL_CAN_AddTxMessage>
 801015e:	4603      	mov	r3, r0
 8010160:	2b00      	cmp	r3, #0
 8010162:	d001      	beq.n	8010168 <can1_ams_status_1_transmit+0x1bc>
       Error_Handler();
 8010164:	f007 fa76 	bl	8017654 <Error_Handler>
   }
}
 8010168:	bf00      	nop
 801016a:	3768      	adds	r7, #104	; 0x68
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}
 8010170:	200014d8 	.word	0x200014d8
 8010174:	20001630 	.word	0x20001630
 8010178:	200014cc 	.word	0x200014cc

0801017c <can1_dbu_status_1_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_transmit() {
 801017c:	b580      	push	{r7, lr}
 801017e:	b08e      	sub	sp, #56	; 0x38
 8010180:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 8010182:	f107 0318 	add.w	r3, r7, #24
 8010186:	2200      	movs	r2, #0
 8010188:	601a      	str	r2, [r3, #0]
 801018a:	605a      	str	r2, [r3, #4]
 801018c:	609a      	str	r2, [r3, #8]
 801018e:	60da      	str	r2, [r3, #12]
 8010190:	611a      	str	r2, [r3, #16]
 8010192:	615a      	str	r2, [r3, #20]
 8010194:	2340      	movs	r3, #64	; 0x40
 8010196:	61bb      	str	r3, [r7, #24]
 8010198:	2308      	movs	r3, #8
 801019a:	62bb      	str	r3, [r7, #40]	; 0x28
       .StdId = 64,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   dbu_status_1_t dbu_status_1;
   can1_dbu_status_1_tx_callback(&dbu_status_1);
 801019c:	463b      	mov	r3, r7
 801019e:	4618      	mov	r0, r3
 80101a0:	f005 fe52 	bl	8015e48 <can1_dbu_status_1_tx_callback>

   can1_dbu_status_1.activate_ts_button = can1_dbu_status_1_activate_ts_button_encode(dbu_status_1.activate_ts_button);
 80101a4:	783b      	ldrb	r3, [r7, #0]
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7f0 f99e 	bl	80004e8 <__aeabi_ui2d>
 80101ac:	4602      	mov	r2, r0
 80101ae:	460b      	mov	r3, r1
 80101b0:	ec43 2b10 	vmov	d0, r2, r3
 80101b4:	f7f1 fcbb 	bl	8001b2e <can1_dbu_status_1_activate_ts_button_encode>
 80101b8:	4603      	mov	r3, r0
 80101ba:	461a      	mov	r2, r3
 80101bc:	4b1e      	ldr	r3, [pc, #120]	; (8010238 <can1_dbu_status_1_transmit+0xbc>)
 80101be:	701a      	strb	r2, [r3, #0]
   can1_dbu_status_1.ready_to_drive_button = can1_dbu_status_1_ready_to_drive_button_encode(dbu_status_1.ready_to_drive_button);
 80101c0:	7c3b      	ldrb	r3, [r7, #16]
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7f0 f990 	bl	80004e8 <__aeabi_ui2d>
 80101c8:	4602      	mov	r2, r0
 80101ca:	460b      	mov	r3, r1
 80101cc:	ec43 2b10 	vmov	d0, r2, r3
 80101d0:	f7f1 fcd0 	bl	8001b74 <can1_dbu_status_1_ready_to_drive_button_encode>
 80101d4:	4603      	mov	r3, r0
 80101d6:	461a      	mov	r2, r3
 80101d8:	4b17      	ldr	r3, [pc, #92]	; (8010238 <can1_dbu_status_1_transmit+0xbc>)
 80101da:	705a      	strb	r2, [r3, #1]
   can1_dbu_status_1.dbu_temperature = can1_dbu_status_1_dbu_temperature_encode(dbu_status_1.dbu_temperature);
 80101dc:	ed97 7b02 	vldr	d7, [r7, #8]
 80101e0:	eeb0 0a47 	vmov.f32	s0, s14
 80101e4:	eef0 0a67 	vmov.f32	s1, s15
 80101e8:	f7f1 fcea 	bl	8001bc0 <can1_dbu_status_1_dbu_temperature_encode>
 80101ec:	4603      	mov	r3, r0
 80101ee:	461a      	mov	r2, r3
 80101f0:	4b11      	ldr	r3, [pc, #68]	; (8010238 <can1_dbu_status_1_transmit+0xbc>)
 80101f2:	805a      	strh	r2, [r3, #2]

   can1_dbu_status_1_pack(tx_data, &can1_dbu_status_1, 8);
 80101f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80101f8:	2208      	movs	r2, #8
 80101fa:	490f      	ldr	r1, [pc, #60]	; (8010238 <can1_dbu_status_1_transmit+0xbc>)
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7f1 fbf4 	bl	80019ea <can1_dbu_status_1_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8010202:	bf00      	nop
 8010204:	4b0d      	ldr	r3, [pc, #52]	; (801023c <can1_dbu_status_1_transmit+0xc0>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	4618      	mov	r0, r3
 801020a:	f015 fb8e 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 801020e:	4603      	mov	r3, r0
 8010210:	2b00      	cmp	r3, #0
 8010212:	d0f7      	beq.n	8010204 <can1_dbu_status_1_transmit+0x88>
   if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010214:	4b09      	ldr	r3, [pc, #36]	; (801023c <can1_dbu_status_1_transmit+0xc0>)
 8010216:	6818      	ldr	r0, [r3, #0]
 8010218:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801021c:	f107 0118 	add.w	r1, r7, #24
 8010220:	4b07      	ldr	r3, [pc, #28]	; (8010240 <can1_dbu_status_1_transmit+0xc4>)
 8010222:	f015 faa7 	bl	8025774 <HAL_CAN_AddTxMessage>
 8010226:	4603      	mov	r3, r0
 8010228:	2b00      	cmp	r3, #0
 801022a:	d001      	beq.n	8010230 <can1_dbu_status_1_transmit+0xb4>
       Error_Handler();
 801022c:	f007 fa12 	bl	8017654 <Error_Handler>
   }
}
 8010230:	bf00      	nop
 8010232:	3738      	adds	r7, #56	; 0x38
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}
 8010238:	200014e8 	.word	0x200014e8
 801023c:	20001630 	.word	0x20001630
 8010240:	200014cc 	.word	0x200014cc

08010244 <can1_ams_temperatures_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_temperatures_transmit() {
 8010244:	b580      	push	{r7, lr}
 8010246:	b090      	sub	sp, #64	; 0x40
 8010248:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 801024a:	f107 0320 	add.w	r3, r7, #32
 801024e:	2200      	movs	r2, #0
 8010250:	601a      	str	r2, [r3, #0]
 8010252:	605a      	str	r2, [r3, #4]
 8010254:	609a      	str	r2, [r3, #8]
 8010256:	60da      	str	r2, [r3, #12]
 8010258:	611a      	str	r2, [r3, #16]
 801025a:	615a      	str	r2, [r3, #20]
 801025c:	2323      	movs	r3, #35	; 0x23
 801025e:	623b      	str	r3, [r7, #32]
 8010260:	2306      	movs	r3, #6
 8010262:	633b      	str	r3, [r7, #48]	; 0x30
       .StdId = 35,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_temperatures_t ams_temperatures;
   can1_ams_temperatures_tx_callback(&ams_temperatures);
 8010264:	463b      	mov	r3, r7
 8010266:	4618      	mov	r0, r3
 8010268:	f005 fd4c 	bl	8015d04 <can1_ams_temperatures_tx_callback>

   can1_ams_temperatures.pre_charge_resistor_temperature = can1_ams_temperatures_pre_charge_resistor_temperature_encode(ams_temperatures.pre_charge_resistor_temperature);
 801026c:	ed97 7b06 	vldr	d7, [r7, #24]
 8010270:	eeb0 0a47 	vmov.f32	s0, s14
 8010274:	eef0 0a67 	vmov.f32	s1, s15
 8010278:	f7f1 fe46 	bl	8001f08 <can1_ams_temperatures_pre_charge_resistor_temperature_encode>
 801027c:	4603      	mov	r3, r0
 801027e:	461a      	mov	r2, r3
 8010280:	4b23      	ldr	r3, [pc, #140]	; (8010310 <can1_ams_temperatures_transmit+0xcc>)
 8010282:	801a      	strh	r2, [r3, #0]
   can1_ams_temperatures.fuse_resistor_temperature = can1_ams_temperatures_fuse_resistor_temperature_encode(ams_temperatures.fuse_resistor_temperature);
 8010284:	ed97 7b04 	vldr	d7, [r7, #16]
 8010288:	eeb0 0a47 	vmov.f32	s0, s14
 801028c:	eef0 0a67 	vmov.f32	s1, s15
 8010290:	f7f1 fe92 	bl	8001fb8 <can1_ams_temperatures_fuse_resistor_temperature_encode>
 8010294:	4603      	mov	r3, r0
 8010296:	461a      	mov	r2, r3
 8010298:	4b1d      	ldr	r3, [pc, #116]	; (8010310 <can1_ams_temperatures_transmit+0xcc>)
 801029a:	805a      	strh	r2, [r3, #2]
   can1_ams_temperatures.aux_1_temperature = can1_ams_temperatures_aux_1_temperature_encode(ams_temperatures.aux_1_temperature);
 801029c:	ed97 7b00 	vldr	d7, [r7]
 80102a0:	eeb0 0a47 	vmov.f32	s0, s14
 80102a4:	eef0 0a67 	vmov.f32	s1, s15
 80102a8:	f7f1 fede 	bl	8002068 <can1_ams_temperatures_aux_1_temperature_encode>
 80102ac:	4603      	mov	r3, r0
 80102ae:	461a      	mov	r2, r3
 80102b0:	4b17      	ldr	r3, [pc, #92]	; (8010310 <can1_ams_temperatures_transmit+0xcc>)
 80102b2:	809a      	strh	r2, [r3, #4]
   can1_ams_temperatures.aux_2_temperature = can1_ams_temperatures_aux_2_temperature_encode(ams_temperatures.aux_2_temperature);
 80102b4:	ed97 7b02 	vldr	d7, [r7, #8]
 80102b8:	eeb0 0a47 	vmov.f32	s0, s14
 80102bc:	eef0 0a67 	vmov.f32	s1, s15
 80102c0:	f7f1 ff2a 	bl	8002118 <can1_ams_temperatures_aux_2_temperature_encode>
 80102c4:	4603      	mov	r3, r0
 80102c6:	461a      	mov	r2, r3
 80102c8:	4b11      	ldr	r3, [pc, #68]	; (8010310 <can1_ams_temperatures_transmit+0xcc>)
 80102ca:	80da      	strh	r2, [r3, #6]

   can1_ams_temperatures_pack(tx_data, &can1_ams_temperatures, 6);
 80102cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80102d0:	2206      	movs	r2, #6
 80102d2:	490f      	ldr	r1, [pc, #60]	; (8010310 <can1_ams_temperatures_transmit+0xcc>)
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7f1 fcc9 	bl	8001c6c <can1_ams_temperatures_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80102da:	bf00      	nop
 80102dc:	4b0d      	ldr	r3, [pc, #52]	; (8010314 <can1_ams_temperatures_transmit+0xd0>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4618      	mov	r0, r3
 80102e2:	f015 fb22 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 80102e6:	4603      	mov	r3, r0
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d0f7      	beq.n	80102dc <can1_ams_temperatures_transmit+0x98>
   if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80102ec:	4b09      	ldr	r3, [pc, #36]	; (8010314 <can1_ams_temperatures_transmit+0xd0>)
 80102ee:	6818      	ldr	r0, [r3, #0]
 80102f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80102f4:	f107 0120 	add.w	r1, r7, #32
 80102f8:	4b07      	ldr	r3, [pc, #28]	; (8010318 <can1_ams_temperatures_transmit+0xd4>)
 80102fa:	f015 fa3b 	bl	8025774 <HAL_CAN_AddTxMessage>
 80102fe:	4603      	mov	r3, r0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d001      	beq.n	8010308 <can1_ams_temperatures_transmit+0xc4>
       Error_Handler();
 8010304:	f007 f9a6 	bl	8017654 <Error_Handler>
   }
}
 8010308:	bf00      	nop
 801030a:	3740      	adds	r7, #64	; 0x40
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}
 8010310:	200014ec 	.word	0x200014ec
 8010314:	20001630 	.word	0x20001630
 8010318:	200014cc 	.word	0x200014cc

0801031c <can1_ams_cell_voltages_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_voltages_transmit() {
 801031c:	b580      	push	{r7, lr}
 801031e:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8010322:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 8010324:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8010328:	2200      	movs	r2, #0
 801032a:	601a      	str	r2, [r3, #0]
 801032c:	605a      	str	r2, [r3, #4]
 801032e:	609a      	str	r2, [r3, #8]
 8010330:	60da      	str	r2, [r3, #12]
 8010332:	611a      	str	r2, [r3, #16]
 8010334:	615a      	str	r2, [r3, #20]
 8010336:	2321      	movs	r3, #33	; 0x21
 8010338:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 801033c:	2307      	movs	r3, #7
 801033e:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
       .StdId = 33,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_cell_voltages_t ams_cell_voltages;
   can1_ams_cell_voltages_tx_callback(&ams_cell_voltages);
 8010342:	463b      	mov	r3, r7
 8010344:	4618      	mov	r0, r3
 8010346:	f005 fcf1 	bl	8015d2c <can1_ams_cell_voltages_tx_callback>

   can1_ams_cell_voltages.voltage_multiplexor = can1_ams_cell_voltages_voltage_multiplexor_encode(ams_cell_voltages.voltage_multiplexor);
 801034a:	463b      	mov	r3, r7
 801034c:	f893 33f0 	ldrb.w	r3, [r3, #1008]	; 0x3f0
 8010350:	4618      	mov	r0, r3
 8010352:	f7f0 f8c9 	bl	80004e8 <__aeabi_ui2d>
 8010356:	4602      	mov	r2, r0
 8010358:	460b      	mov	r3, r1
 801035a:	ec43 2b10 	vmov	d0, r2, r3
 801035e:	f7f3 ff31 	bl	80041c4 <can1_ams_cell_voltages_voltage_multiplexor_encode>
 8010362:	4603      	mov	r3, r0
 8010364:	461a      	mov	r2, r3
 8010366:	4bec      	ldr	r3, [pc, #944]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010368:	701a      	strb	r2, [r3, #0]
   can1_ams_cell_voltages.v1s1 = can1_ams_cell_voltages_v1s1_encode(ams_cell_voltages.v1s1);
 801036a:	463b      	mov	r3, r7
 801036c:	ed93 7b00 	vldr	d7, [r3]
 8010370:	eeb0 0a47 	vmov.f32	s0, s14
 8010374:	eef0 0a67 	vmov.f32	s1, s15
 8010378:	f7f3 ff36 	bl	80041e8 <can1_ams_cell_voltages_v1s1_encode>
 801037c:	4603      	mov	r3, r0
 801037e:	461a      	mov	r2, r3
 8010380:	4be5      	ldr	r3, [pc, #916]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010382:	705a      	strb	r2, [r3, #1]
   can1_ams_cell_voltages.v7s1 = can1_ams_cell_voltages_v7s1_encode(ams_cell_voltages.v7s1);
 8010384:	463b      	mov	r3, r7
 8010386:	ed93 7b90 	vldr	d7, [r3, #576]	; 0x240
 801038a:	eeb0 0a47 	vmov.f32	s0, s14
 801038e:	eef0 0a67 	vmov.f32	s1, s15
 8010392:	f7f3 ff81 	bl	8004298 <can1_ams_cell_voltages_v7s1_encode>
 8010396:	4603      	mov	r3, r0
 8010398:	461a      	mov	r2, r3
 801039a:	4bdf      	ldr	r3, [pc, #892]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 801039c:	709a      	strb	r2, [r3, #2]
   can1_ams_cell_voltages.v1s2 = can1_ams_cell_voltages_v1s2_encode(ams_cell_voltages.v1s2);
 801039e:	463b      	mov	r3, r7
 80103a0:	ed93 7b02 	vldr	d7, [r3, #8]
 80103a4:	eeb0 0a47 	vmov.f32	s0, s14
 80103a8:	eef0 0a67 	vmov.f32	s1, s15
 80103ac:	f7f3 ffcc 	bl	8004348 <can1_ams_cell_voltages_v1s2_encode>
 80103b0:	4603      	mov	r3, r0
 80103b2:	461a      	mov	r2, r3
 80103b4:	4bd8      	ldr	r3, [pc, #864]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 80103b6:	70da      	strb	r2, [r3, #3]
   can1_ams_cell_voltages.v7s2 = can1_ams_cell_voltages_v7s2_encode(ams_cell_voltages.v7s2);
 80103b8:	463b      	mov	r3, r7
 80103ba:	ed93 7b92 	vldr	d7, [r3, #584]	; 0x248
 80103be:	eeb0 0a47 	vmov.f32	s0, s14
 80103c2:	eef0 0a67 	vmov.f32	s1, s15
 80103c6:	f7f4 f817 	bl	80043f8 <can1_ams_cell_voltages_v7s2_encode>
 80103ca:	4603      	mov	r3, r0
 80103cc:	461a      	mov	r2, r3
 80103ce:	4bd2      	ldr	r3, [pc, #840]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 80103d0:	711a      	strb	r2, [r3, #4]
   can1_ams_cell_voltages.v1s3 = can1_ams_cell_voltages_v1s3_encode(ams_cell_voltages.v1s3);
 80103d2:	463b      	mov	r3, r7
 80103d4:	ed93 7b04 	vldr	d7, [r3, #16]
 80103d8:	eeb0 0a47 	vmov.f32	s0, s14
 80103dc:	eef0 0a67 	vmov.f32	s1, s15
 80103e0:	f7f4 f862 	bl	80044a8 <can1_ams_cell_voltages_v1s3_encode>
 80103e4:	4603      	mov	r3, r0
 80103e6:	461a      	mov	r2, r3
 80103e8:	4bcb      	ldr	r3, [pc, #812]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 80103ea:	715a      	strb	r2, [r3, #5]
   can1_ams_cell_voltages.v7s3 = can1_ams_cell_voltages_v7s3_encode(ams_cell_voltages.v7s3);
 80103ec:	463b      	mov	r3, r7
 80103ee:	ed93 7b94 	vldr	d7, [r3, #592]	; 0x250
 80103f2:	eeb0 0a47 	vmov.f32	s0, s14
 80103f6:	eef0 0a67 	vmov.f32	s1, s15
 80103fa:	f7f4 f8ad 	bl	8004558 <can1_ams_cell_voltages_v7s3_encode>
 80103fe:	4603      	mov	r3, r0
 8010400:	461a      	mov	r2, r3
 8010402:	4bc5      	ldr	r3, [pc, #788]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010404:	719a      	strb	r2, [r3, #6]
   can1_ams_cell_voltages.v1s4 = can1_ams_cell_voltages_v1s4_encode(ams_cell_voltages.v1s4);
 8010406:	463b      	mov	r3, r7
 8010408:	ed93 7b06 	vldr	d7, [r3, #24]
 801040c:	eeb0 0a47 	vmov.f32	s0, s14
 8010410:	eef0 0a67 	vmov.f32	s1, s15
 8010414:	f7f4 f8f8 	bl	8004608 <can1_ams_cell_voltages_v1s4_encode>
 8010418:	4603      	mov	r3, r0
 801041a:	461a      	mov	r2, r3
 801041c:	4bbe      	ldr	r3, [pc, #760]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 801041e:	71da      	strb	r2, [r3, #7]
   can1_ams_cell_voltages.v7s4 = can1_ams_cell_voltages_v7s4_encode(ams_cell_voltages.v7s4);
 8010420:	463b      	mov	r3, r7
 8010422:	ed93 7b96 	vldr	d7, [r3, #600]	; 0x258
 8010426:	eeb0 0a47 	vmov.f32	s0, s14
 801042a:	eef0 0a67 	vmov.f32	s1, s15
 801042e:	f7f4 f943 	bl	80046b8 <can1_ams_cell_voltages_v7s4_encode>
 8010432:	4603      	mov	r3, r0
 8010434:	461a      	mov	r2, r3
 8010436:	4bb8      	ldr	r3, [pc, #736]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010438:	721a      	strb	r2, [r3, #8]
   can1_ams_cell_voltages.v1s5 = can1_ams_cell_voltages_v1s5_encode(ams_cell_voltages.v1s5);
 801043a:	463b      	mov	r3, r7
 801043c:	ed93 7b08 	vldr	d7, [r3, #32]
 8010440:	eeb0 0a47 	vmov.f32	s0, s14
 8010444:	eef0 0a67 	vmov.f32	s1, s15
 8010448:	f7f4 f98e 	bl	8004768 <can1_ams_cell_voltages_v1s5_encode>
 801044c:	4603      	mov	r3, r0
 801044e:	461a      	mov	r2, r3
 8010450:	4bb1      	ldr	r3, [pc, #708]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010452:	725a      	strb	r2, [r3, #9]
   can1_ams_cell_voltages.v7s5 = can1_ams_cell_voltages_v7s5_encode(ams_cell_voltages.v7s5);
 8010454:	463b      	mov	r3, r7
 8010456:	ed93 7b98 	vldr	d7, [r3, #608]	; 0x260
 801045a:	eeb0 0a47 	vmov.f32	s0, s14
 801045e:	eef0 0a67 	vmov.f32	s1, s15
 8010462:	f7f4 f9d9 	bl	8004818 <can1_ams_cell_voltages_v7s5_encode>
 8010466:	4603      	mov	r3, r0
 8010468:	461a      	mov	r2, r3
 801046a:	4bab      	ldr	r3, [pc, #684]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 801046c:	729a      	strb	r2, [r3, #10]
   can1_ams_cell_voltages.v1s6 = can1_ams_cell_voltages_v1s6_encode(ams_cell_voltages.v1s6);
 801046e:	463b      	mov	r3, r7
 8010470:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8010474:	eeb0 0a47 	vmov.f32	s0, s14
 8010478:	eef0 0a67 	vmov.f32	s1, s15
 801047c:	f7f4 fa24 	bl	80048c8 <can1_ams_cell_voltages_v1s6_encode>
 8010480:	4603      	mov	r3, r0
 8010482:	461a      	mov	r2, r3
 8010484:	4ba4      	ldr	r3, [pc, #656]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010486:	72da      	strb	r2, [r3, #11]
   can1_ams_cell_voltages.v7s6 = can1_ams_cell_voltages_v7s6_encode(ams_cell_voltages.v7s6);
 8010488:	463b      	mov	r3, r7
 801048a:	ed93 7b9a 	vldr	d7, [r3, #616]	; 0x268
 801048e:	eeb0 0a47 	vmov.f32	s0, s14
 8010492:	eef0 0a67 	vmov.f32	s1, s15
 8010496:	f7f4 fa6f 	bl	8004978 <can1_ams_cell_voltages_v7s6_encode>
 801049a:	4603      	mov	r3, r0
 801049c:	461a      	mov	r2, r3
 801049e:	4b9e      	ldr	r3, [pc, #632]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 80104a0:	731a      	strb	r2, [r3, #12]
   can1_ams_cell_voltages.v1s7 = can1_ams_cell_voltages_v1s7_encode(ams_cell_voltages.v1s7);
 80104a2:	463b      	mov	r3, r7
 80104a4:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80104a8:	eeb0 0a47 	vmov.f32	s0, s14
 80104ac:	eef0 0a67 	vmov.f32	s1, s15
 80104b0:	f7f4 faba 	bl	8004a28 <can1_ams_cell_voltages_v1s7_encode>
 80104b4:	4603      	mov	r3, r0
 80104b6:	461a      	mov	r2, r3
 80104b8:	4b97      	ldr	r3, [pc, #604]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 80104ba:	735a      	strb	r2, [r3, #13]
   can1_ams_cell_voltages.v7s7 = can1_ams_cell_voltages_v7s7_encode(ams_cell_voltages.v7s7);
 80104bc:	463b      	mov	r3, r7
 80104be:	ed93 7b9c 	vldr	d7, [r3, #624]	; 0x270
 80104c2:	eeb0 0a47 	vmov.f32	s0, s14
 80104c6:	eef0 0a67 	vmov.f32	s1, s15
 80104ca:	f7f4 fb05 	bl	8004ad8 <can1_ams_cell_voltages_v7s7_encode>
 80104ce:	4603      	mov	r3, r0
 80104d0:	461a      	mov	r2, r3
 80104d2:	4b91      	ldr	r3, [pc, #580]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 80104d4:	739a      	strb	r2, [r3, #14]
   can1_ams_cell_voltages.v1s8 = can1_ams_cell_voltages_v1s8_encode(ams_cell_voltages.v1s8);
 80104d6:	463b      	mov	r3, r7
 80104d8:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80104dc:	eeb0 0a47 	vmov.f32	s0, s14
 80104e0:	eef0 0a67 	vmov.f32	s1, s15
 80104e4:	f7f4 fb50 	bl	8004b88 <can1_ams_cell_voltages_v1s8_encode>
 80104e8:	4603      	mov	r3, r0
 80104ea:	461a      	mov	r2, r3
 80104ec:	4b8a      	ldr	r3, [pc, #552]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 80104ee:	73da      	strb	r2, [r3, #15]
   can1_ams_cell_voltages.v7s8 = can1_ams_cell_voltages_v7s8_encode(ams_cell_voltages.v7s8);
 80104f0:	463b      	mov	r3, r7
 80104f2:	ed93 7b9e 	vldr	d7, [r3, #632]	; 0x278
 80104f6:	eeb0 0a47 	vmov.f32	s0, s14
 80104fa:	eef0 0a67 	vmov.f32	s1, s15
 80104fe:	f7f4 fb9b 	bl	8004c38 <can1_ams_cell_voltages_v7s8_encode>
 8010502:	4603      	mov	r3, r0
 8010504:	461a      	mov	r2, r3
 8010506:	4b84      	ldr	r3, [pc, #528]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010508:	741a      	strb	r2, [r3, #16]
   can1_ams_cell_voltages.v1s9 = can1_ams_cell_voltages_v1s9_encode(ams_cell_voltages.v1s9);
 801050a:	463b      	mov	r3, r7
 801050c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8010510:	eeb0 0a47 	vmov.f32	s0, s14
 8010514:	eef0 0a67 	vmov.f32	s1, s15
 8010518:	f7f4 fbe6 	bl	8004ce8 <can1_ams_cell_voltages_v1s9_encode>
 801051c:	4603      	mov	r3, r0
 801051e:	461a      	mov	r2, r3
 8010520:	4b7d      	ldr	r3, [pc, #500]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010522:	745a      	strb	r2, [r3, #17]
   can1_ams_cell_voltages.v7s9 = can1_ams_cell_voltages_v7s9_encode(ams_cell_voltages.v7s9);
 8010524:	463b      	mov	r3, r7
 8010526:	ed93 7ba0 	vldr	d7, [r3, #640]	; 0x280
 801052a:	eeb0 0a47 	vmov.f32	s0, s14
 801052e:	eef0 0a67 	vmov.f32	s1, s15
 8010532:	f7f4 fc31 	bl	8004d98 <can1_ams_cell_voltages_v7s9_encode>
 8010536:	4603      	mov	r3, r0
 8010538:	461a      	mov	r2, r3
 801053a:	4b77      	ldr	r3, [pc, #476]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 801053c:	749a      	strb	r2, [r3, #18]
   can1_ams_cell_voltages.v1s10 = can1_ams_cell_voltages_v1s10_encode(ams_cell_voltages.v1s10);
 801053e:	463b      	mov	r3, r7
 8010540:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8010544:	eeb0 0a47 	vmov.f32	s0, s14
 8010548:	eef0 0a67 	vmov.f32	s1, s15
 801054c:	f7f4 fc7c 	bl	8004e48 <can1_ams_cell_voltages_v1s10_encode>
 8010550:	4603      	mov	r3, r0
 8010552:	461a      	mov	r2, r3
 8010554:	4b70      	ldr	r3, [pc, #448]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010556:	74da      	strb	r2, [r3, #19]
   can1_ams_cell_voltages.v7s10 = can1_ams_cell_voltages_v7s10_encode(ams_cell_voltages.v7s10);
 8010558:	463b      	mov	r3, r7
 801055a:	ed93 7ba2 	vldr	d7, [r3, #648]	; 0x288
 801055e:	eeb0 0a47 	vmov.f32	s0, s14
 8010562:	eef0 0a67 	vmov.f32	s1, s15
 8010566:	f7f4 fcc7 	bl	8004ef8 <can1_ams_cell_voltages_v7s10_encode>
 801056a:	4603      	mov	r3, r0
 801056c:	461a      	mov	r2, r3
 801056e:	4b6a      	ldr	r3, [pc, #424]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010570:	751a      	strb	r2, [r3, #20]
   can1_ams_cell_voltages.v1s11 = can1_ams_cell_voltages_v1s11_encode(ams_cell_voltages.v1s11);
 8010572:	463b      	mov	r3, r7
 8010574:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8010578:	eeb0 0a47 	vmov.f32	s0, s14
 801057c:	eef0 0a67 	vmov.f32	s1, s15
 8010580:	f7f4 fd12 	bl	8004fa8 <can1_ams_cell_voltages_v1s11_encode>
 8010584:	4603      	mov	r3, r0
 8010586:	461a      	mov	r2, r3
 8010588:	4b63      	ldr	r3, [pc, #396]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 801058a:	755a      	strb	r2, [r3, #21]
   can1_ams_cell_voltages.v7s11 = can1_ams_cell_voltages_v7s11_encode(ams_cell_voltages.v7s11);
 801058c:	463b      	mov	r3, r7
 801058e:	ed93 7ba4 	vldr	d7, [r3, #656]	; 0x290
 8010592:	eeb0 0a47 	vmov.f32	s0, s14
 8010596:	eef0 0a67 	vmov.f32	s1, s15
 801059a:	f7f4 fd5d 	bl	8005058 <can1_ams_cell_voltages_v7s11_encode>
 801059e:	4603      	mov	r3, r0
 80105a0:	461a      	mov	r2, r3
 80105a2:	4b5d      	ldr	r3, [pc, #372]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 80105a4:	759a      	strb	r2, [r3, #22]
   can1_ams_cell_voltages.v1s12 = can1_ams_cell_voltages_v1s12_encode(ams_cell_voltages.v1s12);
 80105a6:	463b      	mov	r3, r7
 80105a8:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80105ac:	eeb0 0a47 	vmov.f32	s0, s14
 80105b0:	eef0 0a67 	vmov.f32	s1, s15
 80105b4:	f7f4 fda8 	bl	8005108 <can1_ams_cell_voltages_v1s12_encode>
 80105b8:	4603      	mov	r3, r0
 80105ba:	461a      	mov	r2, r3
 80105bc:	4b56      	ldr	r3, [pc, #344]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 80105be:	75da      	strb	r2, [r3, #23]
   can1_ams_cell_voltages.v7s12 = can1_ams_cell_voltages_v7s12_encode(ams_cell_voltages.v7s12);
 80105c0:	463b      	mov	r3, r7
 80105c2:	ed93 7ba6 	vldr	d7, [r3, #664]	; 0x298
 80105c6:	eeb0 0a47 	vmov.f32	s0, s14
 80105ca:	eef0 0a67 	vmov.f32	s1, s15
 80105ce:	f7f4 fdf3 	bl	80051b8 <can1_ams_cell_voltages_v7s12_encode>
 80105d2:	4603      	mov	r3, r0
 80105d4:	461a      	mov	r2, r3
 80105d6:	4b50      	ldr	r3, [pc, #320]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 80105d8:	761a      	strb	r2, [r3, #24]
   can1_ams_cell_voltages.v2s1 = can1_ams_cell_voltages_v2s1_encode(ams_cell_voltages.v2s1);
 80105da:	463b      	mov	r3, r7
 80105dc:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80105e0:	eeb0 0a47 	vmov.f32	s0, s14
 80105e4:	eef0 0a67 	vmov.f32	s1, s15
 80105e8:	f7f4 fe3e 	bl	8005268 <can1_ams_cell_voltages_v2s1_encode>
 80105ec:	4603      	mov	r3, r0
 80105ee:	461a      	mov	r2, r3
 80105f0:	4b49      	ldr	r3, [pc, #292]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 80105f2:	765a      	strb	r2, [r3, #25]
   can1_ams_cell_voltages.v8s1 = can1_ams_cell_voltages_v8s1_encode(ams_cell_voltages.v8s1);
 80105f4:	463b      	mov	r3, r7
 80105f6:	ed93 7ba8 	vldr	d7, [r3, #672]	; 0x2a0
 80105fa:	eeb0 0a47 	vmov.f32	s0, s14
 80105fe:	eef0 0a67 	vmov.f32	s1, s15
 8010602:	f7f4 fe89 	bl	8005318 <can1_ams_cell_voltages_v8s1_encode>
 8010606:	4603      	mov	r3, r0
 8010608:	461a      	mov	r2, r3
 801060a:	4b43      	ldr	r3, [pc, #268]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 801060c:	769a      	strb	r2, [r3, #26]
   can1_ams_cell_voltages.v2s2 = can1_ams_cell_voltages_v2s2_encode(ams_cell_voltages.v2s2);
 801060e:	463b      	mov	r3, r7
 8010610:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8010614:	eeb0 0a47 	vmov.f32	s0, s14
 8010618:	eef0 0a67 	vmov.f32	s1, s15
 801061c:	f7f4 fed4 	bl	80053c8 <can1_ams_cell_voltages_v2s2_encode>
 8010620:	4603      	mov	r3, r0
 8010622:	461a      	mov	r2, r3
 8010624:	4b3c      	ldr	r3, [pc, #240]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010626:	76da      	strb	r2, [r3, #27]
   can1_ams_cell_voltages.v8s2 = can1_ams_cell_voltages_v8s2_encode(ams_cell_voltages.v8s2);
 8010628:	463b      	mov	r3, r7
 801062a:	ed93 7baa 	vldr	d7, [r3, #680]	; 0x2a8
 801062e:	eeb0 0a47 	vmov.f32	s0, s14
 8010632:	eef0 0a67 	vmov.f32	s1, s15
 8010636:	f7f4 ff1f 	bl	8005478 <can1_ams_cell_voltages_v8s2_encode>
 801063a:	4603      	mov	r3, r0
 801063c:	461a      	mov	r2, r3
 801063e:	4b36      	ldr	r3, [pc, #216]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010640:	771a      	strb	r2, [r3, #28]
   can1_ams_cell_voltages.v2s3 = can1_ams_cell_voltages_v2s3_encode(ams_cell_voltages.v2s3);
 8010642:	463b      	mov	r3, r7
 8010644:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8010648:	eeb0 0a47 	vmov.f32	s0, s14
 801064c:	eef0 0a67 	vmov.f32	s1, s15
 8010650:	f7f4 ff6a 	bl	8005528 <can1_ams_cell_voltages_v2s3_encode>
 8010654:	4603      	mov	r3, r0
 8010656:	461a      	mov	r2, r3
 8010658:	4b2f      	ldr	r3, [pc, #188]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 801065a:	775a      	strb	r2, [r3, #29]
   can1_ams_cell_voltages.v8s3 = can1_ams_cell_voltages_v8s3_encode(ams_cell_voltages.v8s3);
 801065c:	463b      	mov	r3, r7
 801065e:	ed93 7bac 	vldr	d7, [r3, #688]	; 0x2b0
 8010662:	eeb0 0a47 	vmov.f32	s0, s14
 8010666:	eef0 0a67 	vmov.f32	s1, s15
 801066a:	f7f4 ffb5 	bl	80055d8 <can1_ams_cell_voltages_v8s3_encode>
 801066e:	4603      	mov	r3, r0
 8010670:	461a      	mov	r2, r3
 8010672:	4b29      	ldr	r3, [pc, #164]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010674:	779a      	strb	r2, [r3, #30]
   can1_ams_cell_voltages.v2s4 = can1_ams_cell_voltages_v2s4_encode(ams_cell_voltages.v2s4);
 8010676:	463b      	mov	r3, r7
 8010678:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 801067c:	eeb0 0a47 	vmov.f32	s0, s14
 8010680:	eef0 0a67 	vmov.f32	s1, s15
 8010684:	f7f5 f800 	bl	8005688 <can1_ams_cell_voltages_v2s4_encode>
 8010688:	4603      	mov	r3, r0
 801068a:	461a      	mov	r2, r3
 801068c:	4b22      	ldr	r3, [pc, #136]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 801068e:	77da      	strb	r2, [r3, #31]
   can1_ams_cell_voltages.v8s4 = can1_ams_cell_voltages_v8s4_encode(ams_cell_voltages.v8s4);
 8010690:	463b      	mov	r3, r7
 8010692:	ed93 7bae 	vldr	d7, [r3, #696]	; 0x2b8
 8010696:	eeb0 0a47 	vmov.f32	s0, s14
 801069a:	eef0 0a67 	vmov.f32	s1, s15
 801069e:	f7f5 f84b 	bl	8005738 <can1_ams_cell_voltages_v8s4_encode>
 80106a2:	4603      	mov	r3, r0
 80106a4:	461a      	mov	r2, r3
 80106a6:	4b1c      	ldr	r3, [pc, #112]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 80106a8:	f883 2020 	strb.w	r2, [r3, #32]
   can1_ams_cell_voltages.v2s5 = can1_ams_cell_voltages_v2s5_encode(ams_cell_voltages.v2s5);
 80106ac:	463b      	mov	r3, r7
 80106ae:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80106b2:	eeb0 0a47 	vmov.f32	s0, s14
 80106b6:	eef0 0a67 	vmov.f32	s1, s15
 80106ba:	f7f5 f895 	bl	80057e8 <can1_ams_cell_voltages_v2s5_encode>
 80106be:	4603      	mov	r3, r0
 80106c0:	461a      	mov	r2, r3
 80106c2:	4b15      	ldr	r3, [pc, #84]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 80106c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   can1_ams_cell_voltages.v8s5 = can1_ams_cell_voltages_v8s5_encode(ams_cell_voltages.v8s5);
 80106c8:	463b      	mov	r3, r7
 80106ca:	ed93 7bb0 	vldr	d7, [r3, #704]	; 0x2c0
 80106ce:	eeb0 0a47 	vmov.f32	s0, s14
 80106d2:	eef0 0a67 	vmov.f32	s1, s15
 80106d6:	f7f5 f8df 	bl	8005898 <can1_ams_cell_voltages_v8s5_encode>
 80106da:	4603      	mov	r3, r0
 80106dc:	461a      	mov	r2, r3
 80106de:	4b0e      	ldr	r3, [pc, #56]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 80106e0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   can1_ams_cell_voltages.v2s6 = can1_ams_cell_voltages_v2s6_encode(ams_cell_voltages.v2s6);
 80106e4:	463b      	mov	r3, r7
 80106e6:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80106ea:	eeb0 0a47 	vmov.f32	s0, s14
 80106ee:	eef0 0a67 	vmov.f32	s1, s15
 80106f2:	f7f5 f929 	bl	8005948 <can1_ams_cell_voltages_v2s6_encode>
 80106f6:	4603      	mov	r3, r0
 80106f8:	461a      	mov	r2, r3
 80106fa:	4b07      	ldr	r3, [pc, #28]	; (8010718 <can1_ams_cell_voltages_transmit+0x3fc>)
 80106fc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
   can1_ams_cell_voltages.v8s6 = can1_ams_cell_voltages_v8s6_encode(ams_cell_voltages.v8s6);
 8010700:	463b      	mov	r3, r7
 8010702:	ed93 7bb2 	vldr	d7, [r3, #712]	; 0x2c8
 8010706:	eeb0 0a47 	vmov.f32	s0, s14
 801070a:	eef0 0a67 	vmov.f32	s1, s15
 801070e:	f7f5 f973 	bl	80059f8 <can1_ams_cell_voltages_v8s6_encode>
 8010712:	4603      	mov	r3, r0
 8010714:	461a      	mov	r2, r3
 8010716:	e001      	b.n	801071c <can1_ams_cell_voltages_transmit+0x400>
 8010718:	200014f4 	.word	0x200014f4
 801071c:	4bed      	ldr	r3, [pc, #948]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 801071e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   can1_ams_cell_voltages.v2s7 = can1_ams_cell_voltages_v2s7_encode(ams_cell_voltages.v2s7);
 8010722:	463b      	mov	r3, r7
 8010724:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8010728:	eeb0 0a47 	vmov.f32	s0, s14
 801072c:	eef0 0a67 	vmov.f32	s1, s15
 8010730:	f7f5 f9ba 	bl	8005aa8 <can1_ams_cell_voltages_v2s7_encode>
 8010734:	4603      	mov	r3, r0
 8010736:	461a      	mov	r2, r3
 8010738:	4be6      	ldr	r3, [pc, #920]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 801073a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
   can1_ams_cell_voltages.v8s7 = can1_ams_cell_voltages_v8s7_encode(ams_cell_voltages.v8s7);
 801073e:	463b      	mov	r3, r7
 8010740:	ed93 7bb4 	vldr	d7, [r3, #720]	; 0x2d0
 8010744:	eeb0 0a47 	vmov.f32	s0, s14
 8010748:	eef0 0a67 	vmov.f32	s1, s15
 801074c:	f7f5 fa04 	bl	8005b58 <can1_ams_cell_voltages_v8s7_encode>
 8010750:	4603      	mov	r3, r0
 8010752:	461a      	mov	r2, r3
 8010754:	4bdf      	ldr	r3, [pc, #892]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010756:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   can1_ams_cell_voltages.v2s8 = can1_ams_cell_voltages_v2s8_encode(ams_cell_voltages.v2s8);
 801075a:	463b      	mov	r3, r7
 801075c:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8010760:	eeb0 0a47 	vmov.f32	s0, s14
 8010764:	eef0 0a67 	vmov.f32	s1, s15
 8010768:	f7f5 fa4e 	bl	8005c08 <can1_ams_cell_voltages_v2s8_encode>
 801076c:	4603      	mov	r3, r0
 801076e:	461a      	mov	r2, r3
 8010770:	4bd8      	ldr	r3, [pc, #864]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010772:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   can1_ams_cell_voltages.v8s8 = can1_ams_cell_voltages_v8s8_encode(ams_cell_voltages.v8s8);
 8010776:	463b      	mov	r3, r7
 8010778:	ed93 7bb6 	vldr	d7, [r3, #728]	; 0x2d8
 801077c:	eeb0 0a47 	vmov.f32	s0, s14
 8010780:	eef0 0a67 	vmov.f32	s1, s15
 8010784:	f7f5 fa98 	bl	8005cb8 <can1_ams_cell_voltages_v8s8_encode>
 8010788:	4603      	mov	r3, r0
 801078a:	461a      	mov	r2, r3
 801078c:	4bd1      	ldr	r3, [pc, #836]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 801078e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   can1_ams_cell_voltages.v2s9 = can1_ams_cell_voltages_v2s9_encode(ams_cell_voltages.v2s9);
 8010792:	463b      	mov	r3, r7
 8010794:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8010798:	eeb0 0a47 	vmov.f32	s0, s14
 801079c:	eef0 0a67 	vmov.f32	s1, s15
 80107a0:	f7f5 fae2 	bl	8005d68 <can1_ams_cell_voltages_v2s9_encode>
 80107a4:	4603      	mov	r3, r0
 80107a6:	461a      	mov	r2, r3
 80107a8:	4bca      	ldr	r3, [pc, #808]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 80107aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   can1_ams_cell_voltages.v8s9 = can1_ams_cell_voltages_v8s9_encode(ams_cell_voltages.v8s9);
 80107ae:	463b      	mov	r3, r7
 80107b0:	ed93 7bb8 	vldr	d7, [r3, #736]	; 0x2e0
 80107b4:	eeb0 0a47 	vmov.f32	s0, s14
 80107b8:	eef0 0a67 	vmov.f32	s1, s15
 80107bc:	f7f5 fb2c 	bl	8005e18 <can1_ams_cell_voltages_v8s9_encode>
 80107c0:	4603      	mov	r3, r0
 80107c2:	461a      	mov	r2, r3
 80107c4:	4bc3      	ldr	r3, [pc, #780]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 80107c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   can1_ams_cell_voltages.v2s10 = can1_ams_cell_voltages_v2s10_encode(ams_cell_voltages.v2s10);
 80107ca:	463b      	mov	r3, r7
 80107cc:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 80107d0:	eeb0 0a47 	vmov.f32	s0, s14
 80107d4:	eef0 0a67 	vmov.f32	s1, s15
 80107d8:	f7f5 fb76 	bl	8005ec8 <can1_ams_cell_voltages_v2s10_encode>
 80107dc:	4603      	mov	r3, r0
 80107de:	461a      	mov	r2, r3
 80107e0:	4bbc      	ldr	r3, [pc, #752]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 80107e2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   can1_ams_cell_voltages.v8s10 = can1_ams_cell_voltages_v8s10_encode(ams_cell_voltages.v8s10);
 80107e6:	463b      	mov	r3, r7
 80107e8:	ed93 7bba 	vldr	d7, [r3, #744]	; 0x2e8
 80107ec:	eeb0 0a47 	vmov.f32	s0, s14
 80107f0:	eef0 0a67 	vmov.f32	s1, s15
 80107f4:	f7f5 fbc0 	bl	8005f78 <can1_ams_cell_voltages_v8s10_encode>
 80107f8:	4603      	mov	r3, r0
 80107fa:	461a      	mov	r2, r3
 80107fc:	4bb5      	ldr	r3, [pc, #724]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 80107fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   can1_ams_cell_voltages.v2s11 = can1_ams_cell_voltages_v2s11_encode(ams_cell_voltages.v2s11);
 8010802:	463b      	mov	r3, r7
 8010804:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8010808:	eeb0 0a47 	vmov.f32	s0, s14
 801080c:	eef0 0a67 	vmov.f32	s1, s15
 8010810:	f7f5 fc0a 	bl	8006028 <can1_ams_cell_voltages_v2s11_encode>
 8010814:	4603      	mov	r3, r0
 8010816:	461a      	mov	r2, r3
 8010818:	4bae      	ldr	r3, [pc, #696]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 801081a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   can1_ams_cell_voltages.v8s11 = can1_ams_cell_voltages_v8s11_encode(ams_cell_voltages.v8s11);
 801081e:	463b      	mov	r3, r7
 8010820:	ed93 7bbc 	vldr	d7, [r3, #752]	; 0x2f0
 8010824:	eeb0 0a47 	vmov.f32	s0, s14
 8010828:	eef0 0a67 	vmov.f32	s1, s15
 801082c:	f7f5 fc54 	bl	80060d8 <can1_ams_cell_voltages_v8s11_encode>
 8010830:	4603      	mov	r3, r0
 8010832:	461a      	mov	r2, r3
 8010834:	4ba7      	ldr	r3, [pc, #668]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010836:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   can1_ams_cell_voltages.v2s12 = can1_ams_cell_voltages_v2s12_encode(ams_cell_voltages.v2s12);
 801083a:	463b      	mov	r3, r7
 801083c:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 8010840:	eeb0 0a47 	vmov.f32	s0, s14
 8010844:	eef0 0a67 	vmov.f32	s1, s15
 8010848:	f7f5 fc9e 	bl	8006188 <can1_ams_cell_voltages_v2s12_encode>
 801084c:	4603      	mov	r3, r0
 801084e:	461a      	mov	r2, r3
 8010850:	4ba0      	ldr	r3, [pc, #640]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010852:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   can1_ams_cell_voltages.v8s12 = can1_ams_cell_voltages_v8s12_encode(ams_cell_voltages.v8s12);
 8010856:	463b      	mov	r3, r7
 8010858:	ed93 7bbe 	vldr	d7, [r3, #760]	; 0x2f8
 801085c:	eeb0 0a47 	vmov.f32	s0, s14
 8010860:	eef0 0a67 	vmov.f32	s1, s15
 8010864:	f7f5 fce8 	bl	8006238 <can1_ams_cell_voltages_v8s12_encode>
 8010868:	4603      	mov	r3, r0
 801086a:	461a      	mov	r2, r3
 801086c:	4b99      	ldr	r3, [pc, #612]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 801086e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   can1_ams_cell_voltages.v3s1 = can1_ams_cell_voltages_v3s1_encode(ams_cell_voltages.v3s1);
 8010872:	463b      	mov	r3, r7
 8010874:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 8010878:	eeb0 0a47 	vmov.f32	s0, s14
 801087c:	eef0 0a67 	vmov.f32	s1, s15
 8010880:	f7f5 fd32 	bl	80062e8 <can1_ams_cell_voltages_v3s1_encode>
 8010884:	4603      	mov	r3, r0
 8010886:	461a      	mov	r2, r3
 8010888:	4b92      	ldr	r3, [pc, #584]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 801088a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   can1_ams_cell_voltages.v9s1 = can1_ams_cell_voltages_v9s1_encode(ams_cell_voltages.v9s1);
 801088e:	463b      	mov	r3, r7
 8010890:	ed93 7bc0 	vldr	d7, [r3, #768]	; 0x300
 8010894:	eeb0 0a47 	vmov.f32	s0, s14
 8010898:	eef0 0a67 	vmov.f32	s1, s15
 801089c:	f7f5 fd7c 	bl	8006398 <can1_ams_cell_voltages_v9s1_encode>
 80108a0:	4603      	mov	r3, r0
 80108a2:	461a      	mov	r2, r3
 80108a4:	4b8b      	ldr	r3, [pc, #556]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 80108a6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   can1_ams_cell_voltages.v3s2 = can1_ams_cell_voltages_v3s2_encode(ams_cell_voltages.v3s2);
 80108aa:	463b      	mov	r3, r7
 80108ac:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 80108b0:	eeb0 0a47 	vmov.f32	s0, s14
 80108b4:	eef0 0a67 	vmov.f32	s1, s15
 80108b8:	f7f5 fdc6 	bl	8006448 <can1_ams_cell_voltages_v3s2_encode>
 80108bc:	4603      	mov	r3, r0
 80108be:	461a      	mov	r2, r3
 80108c0:	4b84      	ldr	r3, [pc, #528]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 80108c2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   can1_ams_cell_voltages.v9s2 = can1_ams_cell_voltages_v9s2_encode(ams_cell_voltages.v9s2);
 80108c6:	463b      	mov	r3, r7
 80108c8:	ed93 7bc2 	vldr	d7, [r3, #776]	; 0x308
 80108cc:	eeb0 0a47 	vmov.f32	s0, s14
 80108d0:	eef0 0a67 	vmov.f32	s1, s15
 80108d4:	f7f5 fe10 	bl	80064f8 <can1_ams_cell_voltages_v9s2_encode>
 80108d8:	4603      	mov	r3, r0
 80108da:	461a      	mov	r2, r3
 80108dc:	4b7d      	ldr	r3, [pc, #500]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 80108de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   can1_ams_cell_voltages.v3s3 = can1_ams_cell_voltages_v3s3_encode(ams_cell_voltages.v3s3);
 80108e2:	463b      	mov	r3, r7
 80108e4:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 80108e8:	eeb0 0a47 	vmov.f32	s0, s14
 80108ec:	eef0 0a67 	vmov.f32	s1, s15
 80108f0:	f7f5 fe5a 	bl	80065a8 <can1_ams_cell_voltages_v3s3_encode>
 80108f4:	4603      	mov	r3, r0
 80108f6:	461a      	mov	r2, r3
 80108f8:	4b76      	ldr	r3, [pc, #472]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 80108fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   can1_ams_cell_voltages.v9s3 = can1_ams_cell_voltages_v9s3_encode(ams_cell_voltages.v9s3);
 80108fe:	463b      	mov	r3, r7
 8010900:	ed93 7bc4 	vldr	d7, [r3, #784]	; 0x310
 8010904:	eeb0 0a47 	vmov.f32	s0, s14
 8010908:	eef0 0a67 	vmov.f32	s1, s15
 801090c:	f7f5 fea4 	bl	8006658 <can1_ams_cell_voltages_v9s3_encode>
 8010910:	4603      	mov	r3, r0
 8010912:	461a      	mov	r2, r3
 8010914:	4b6f      	ldr	r3, [pc, #444]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010916:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
   can1_ams_cell_voltages.v3s4 = can1_ams_cell_voltages_v3s4_encode(ams_cell_voltages.v3s4);
 801091a:	463b      	mov	r3, r7
 801091c:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
 8010920:	eeb0 0a47 	vmov.f32	s0, s14
 8010924:	eef0 0a67 	vmov.f32	s1, s15
 8010928:	f7f5 feee 	bl	8006708 <can1_ams_cell_voltages_v3s4_encode>
 801092c:	4603      	mov	r3, r0
 801092e:	461a      	mov	r2, r3
 8010930:	4b68      	ldr	r3, [pc, #416]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010932:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   can1_ams_cell_voltages.v9s4 = can1_ams_cell_voltages_v9s4_encode(ams_cell_voltages.v9s4);
 8010936:	463b      	mov	r3, r7
 8010938:	ed93 7bc6 	vldr	d7, [r3, #792]	; 0x318
 801093c:	eeb0 0a47 	vmov.f32	s0, s14
 8010940:	eef0 0a67 	vmov.f32	s1, s15
 8010944:	f7f5 ff38 	bl	80067b8 <can1_ams_cell_voltages_v9s4_encode>
 8010948:	4603      	mov	r3, r0
 801094a:	461a      	mov	r2, r3
 801094c:	4b61      	ldr	r3, [pc, #388]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 801094e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   can1_ams_cell_voltages.v3s5 = can1_ams_cell_voltages_v3s5_encode(ams_cell_voltages.v3s5);
 8010952:	463b      	mov	r3, r7
 8010954:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
 8010958:	eeb0 0a47 	vmov.f32	s0, s14
 801095c:	eef0 0a67 	vmov.f32	s1, s15
 8010960:	f7f5 ff82 	bl	8006868 <can1_ams_cell_voltages_v3s5_encode>
 8010964:	4603      	mov	r3, r0
 8010966:	461a      	mov	r2, r3
 8010968:	4b5a      	ldr	r3, [pc, #360]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 801096a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   can1_ams_cell_voltages.v9s5 = can1_ams_cell_voltages_v9s5_encode(ams_cell_voltages.v9s5);
 801096e:	463b      	mov	r3, r7
 8010970:	ed93 7bc8 	vldr	d7, [r3, #800]	; 0x320
 8010974:	eeb0 0a47 	vmov.f32	s0, s14
 8010978:	eef0 0a67 	vmov.f32	s1, s15
 801097c:	f7f5 ffcc 	bl	8006918 <can1_ams_cell_voltages_v9s5_encode>
 8010980:	4603      	mov	r3, r0
 8010982:	461a      	mov	r2, r3
 8010984:	4b53      	ldr	r3, [pc, #332]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010986:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
   can1_ams_cell_voltages.v3s6 = can1_ams_cell_voltages_v3s6_encode(ams_cell_voltages.v3s6);
 801098a:	463b      	mov	r3, r7
 801098c:	ed93 7b3a 	vldr	d7, [r3, #232]	; 0xe8
 8010990:	eeb0 0a47 	vmov.f32	s0, s14
 8010994:	eef0 0a67 	vmov.f32	s1, s15
 8010998:	f7f6 f816 	bl	80069c8 <can1_ams_cell_voltages_v3s6_encode>
 801099c:	4603      	mov	r3, r0
 801099e:	461a      	mov	r2, r3
 80109a0:	4b4c      	ldr	r3, [pc, #304]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 80109a2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   can1_ams_cell_voltages.v9s6 = can1_ams_cell_voltages_v9s6_encode(ams_cell_voltages.v9s6);
 80109a6:	463b      	mov	r3, r7
 80109a8:	ed93 7bca 	vldr	d7, [r3, #808]	; 0x328
 80109ac:	eeb0 0a47 	vmov.f32	s0, s14
 80109b0:	eef0 0a67 	vmov.f32	s1, s15
 80109b4:	f7f6 f860 	bl	8006a78 <can1_ams_cell_voltages_v9s6_encode>
 80109b8:	4603      	mov	r3, r0
 80109ba:	461a      	mov	r2, r3
 80109bc:	4b45      	ldr	r3, [pc, #276]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 80109be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   can1_ams_cell_voltages.v3s7 = can1_ams_cell_voltages_v3s7_encode(ams_cell_voltages.v3s7);
 80109c2:	463b      	mov	r3, r7
 80109c4:	ed93 7b3c 	vldr	d7, [r3, #240]	; 0xf0
 80109c8:	eeb0 0a47 	vmov.f32	s0, s14
 80109cc:	eef0 0a67 	vmov.f32	s1, s15
 80109d0:	f7f6 f8aa 	bl	8006b28 <can1_ams_cell_voltages_v3s7_encode>
 80109d4:	4603      	mov	r3, r0
 80109d6:	461a      	mov	r2, r3
 80109d8:	4b3e      	ldr	r3, [pc, #248]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 80109da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
   can1_ams_cell_voltages.v9s7 = can1_ams_cell_voltages_v9s7_encode(ams_cell_voltages.v9s7);
 80109de:	463b      	mov	r3, r7
 80109e0:	ed93 7bcc 	vldr	d7, [r3, #816]	; 0x330
 80109e4:	eeb0 0a47 	vmov.f32	s0, s14
 80109e8:	eef0 0a67 	vmov.f32	s1, s15
 80109ec:	f7f6 f8f4 	bl	8006bd8 <can1_ams_cell_voltages_v9s7_encode>
 80109f0:	4603      	mov	r3, r0
 80109f2:	461a      	mov	r2, r3
 80109f4:	4b37      	ldr	r3, [pc, #220]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 80109f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   can1_ams_cell_voltages.v3s8 = can1_ams_cell_voltages_v3s8_encode(ams_cell_voltages.v3s8);
 80109fa:	463b      	mov	r3, r7
 80109fc:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8010a00:	eeb0 0a47 	vmov.f32	s0, s14
 8010a04:	eef0 0a67 	vmov.f32	s1, s15
 8010a08:	f7f6 f93e 	bl	8006c88 <can1_ams_cell_voltages_v3s8_encode>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	461a      	mov	r2, r3
 8010a10:	4b30      	ldr	r3, [pc, #192]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010a12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   can1_ams_cell_voltages.v9s8 = can1_ams_cell_voltages_v9s8_encode(ams_cell_voltages.v9s8);
 8010a16:	463b      	mov	r3, r7
 8010a18:	ed93 7bce 	vldr	d7, [r3, #824]	; 0x338
 8010a1c:	eeb0 0a47 	vmov.f32	s0, s14
 8010a20:	eef0 0a67 	vmov.f32	s1, s15
 8010a24:	f7f6 f988 	bl	8006d38 <can1_ams_cell_voltages_v9s8_encode>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	4b29      	ldr	r3, [pc, #164]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   can1_ams_cell_voltages.v3s9 = can1_ams_cell_voltages_v3s9_encode(ams_cell_voltages.v3s9);
 8010a32:	463b      	mov	r3, r7
 8010a34:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8010a38:	eeb0 0a47 	vmov.f32	s0, s14
 8010a3c:	eef0 0a67 	vmov.f32	s1, s15
 8010a40:	f7f6 f9d2 	bl	8006de8 <can1_ams_cell_voltages_v3s9_encode>
 8010a44:	4603      	mov	r3, r0
 8010a46:	461a      	mov	r2, r3
 8010a48:	4b22      	ldr	r3, [pc, #136]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   can1_ams_cell_voltages.v9s9 = can1_ams_cell_voltages_v9s9_encode(ams_cell_voltages.v9s9);
 8010a4e:	463b      	mov	r3, r7
 8010a50:	ed93 7bd0 	vldr	d7, [r3, #832]	; 0x340
 8010a54:	eeb0 0a47 	vmov.f32	s0, s14
 8010a58:	eef0 0a67 	vmov.f32	s1, s15
 8010a5c:	f7f6 fa1c 	bl	8006e98 <can1_ams_cell_voltages_v9s9_encode>
 8010a60:	4603      	mov	r3, r0
 8010a62:	461a      	mov	r2, r3
 8010a64:	4b1b      	ldr	r3, [pc, #108]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
   can1_ams_cell_voltages.v3s10 = can1_ams_cell_voltages_v3s10_encode(ams_cell_voltages.v3s10);
 8010a6a:	463b      	mov	r3, r7
 8010a6c:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8010a70:	eeb0 0a47 	vmov.f32	s0, s14
 8010a74:	eef0 0a67 	vmov.f32	s1, s15
 8010a78:	f7f6 fa66 	bl	8006f48 <can1_ams_cell_voltages_v3s10_encode>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	461a      	mov	r2, r3
 8010a80:	4b14      	ldr	r3, [pc, #80]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010a82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
   can1_ams_cell_voltages.v9s10 = can1_ams_cell_voltages_v9s10_encode(ams_cell_voltages.v9s10);
 8010a86:	463b      	mov	r3, r7
 8010a88:	ed93 7bd2 	vldr	d7, [r3, #840]	; 0x348
 8010a8c:	eeb0 0a47 	vmov.f32	s0, s14
 8010a90:	eef0 0a67 	vmov.f32	s1, s15
 8010a94:	f7f6 fab0 	bl	8006ff8 <can1_ams_cell_voltages_v9s10_encode>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	4b0d      	ldr	r3, [pc, #52]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   can1_ams_cell_voltages.v3s11 = can1_ams_cell_voltages_v3s11_encode(ams_cell_voltages.v3s11);
 8010aa2:	463b      	mov	r3, r7
 8010aa4:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 8010aa8:	eeb0 0a47 	vmov.f32	s0, s14
 8010aac:	eef0 0a67 	vmov.f32	s1, s15
 8010ab0:	f7f6 fafa 	bl	80070a8 <can1_ams_cell_voltages_v3s11_encode>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	4b06      	ldr	r3, [pc, #24]	; (8010ad4 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   can1_ams_cell_voltages.v9s11 = can1_ams_cell_voltages_v9s11_encode(ams_cell_voltages.v9s11);
 8010abe:	463b      	mov	r3, r7
 8010ac0:	ed93 7bd4 	vldr	d7, [r3, #848]	; 0x350
 8010ac4:	eeb0 0a47 	vmov.f32	s0, s14
 8010ac8:	eef0 0a67 	vmov.f32	s1, s15
 8010acc:	f7f6 fb44 	bl	8007158 <can1_ams_cell_voltages_v9s11_encode>
 8010ad0:	e002      	b.n	8010ad8 <can1_ams_cell_voltages_transmit+0x7bc>
 8010ad2:	bf00      	nop
 8010ad4:	200014f4 	.word	0x200014f4
 8010ad8:	4603      	mov	r3, r0
 8010ada:	461a      	mov	r2, r3
 8010adc:	4bed      	ldr	r3, [pc, #948]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010ade:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
   can1_ams_cell_voltages.v3s12 = can1_ams_cell_voltages_v3s12_encode(ams_cell_voltages.v3s12);
 8010ae2:	463b      	mov	r3, r7
 8010ae4:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
 8010ae8:	eeb0 0a47 	vmov.f32	s0, s14
 8010aec:	eef0 0a67 	vmov.f32	s1, s15
 8010af0:	f7f6 fb8a 	bl	8007208 <can1_ams_cell_voltages_v3s12_encode>
 8010af4:	4603      	mov	r3, r0
 8010af6:	461a      	mov	r2, r3
 8010af8:	4be6      	ldr	r3, [pc, #920]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010afa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
   can1_ams_cell_voltages.v9s12 = can1_ams_cell_voltages_v9s12_encode(ams_cell_voltages.v9s12);
 8010afe:	463b      	mov	r3, r7
 8010b00:	ed93 7bd6 	vldr	d7, [r3, #856]	; 0x358
 8010b04:	eeb0 0a47 	vmov.f32	s0, s14
 8010b08:	eef0 0a67 	vmov.f32	s1, s15
 8010b0c:	f7f6 fbd4 	bl	80072b8 <can1_ams_cell_voltages_v9s12_encode>
 8010b10:	4603      	mov	r3, r0
 8010b12:	461a      	mov	r2, r3
 8010b14:	4bdf      	ldr	r3, [pc, #892]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010b16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
   can1_ams_cell_voltages.v4s1 = can1_ams_cell_voltages_v4s1_encode(ams_cell_voltages.v4s1);
 8010b1a:	463b      	mov	r3, r7
 8010b1c:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8010b20:	eeb0 0a47 	vmov.f32	s0, s14
 8010b24:	eef0 0a67 	vmov.f32	s1, s15
 8010b28:	f7f6 fc1e 	bl	8007368 <can1_ams_cell_voltages_v4s1_encode>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	461a      	mov	r2, r3
 8010b30:	4bd8      	ldr	r3, [pc, #864]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010b32:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   can1_ams_cell_voltages.v10s1 = can1_ams_cell_voltages_v10s1_encode(ams_cell_voltages.v10s1);
 8010b36:	463b      	mov	r3, r7
 8010b38:	ed93 7bd8 	vldr	d7, [r3, #864]	; 0x360
 8010b3c:	eeb0 0a47 	vmov.f32	s0, s14
 8010b40:	eef0 0a67 	vmov.f32	s1, s15
 8010b44:	f7f6 fc68 	bl	8007418 <can1_ams_cell_voltages_v10s1_encode>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	4bd1      	ldr	r3, [pc, #836]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010b4e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   can1_ams_cell_voltages.v4s2 = can1_ams_cell_voltages_v4s2_encode(ams_cell_voltages.v4s2);
 8010b52:	463b      	mov	r3, r7
 8010b54:	ed93 7b4a 	vldr	d7, [r3, #296]	; 0x128
 8010b58:	eeb0 0a47 	vmov.f32	s0, s14
 8010b5c:	eef0 0a67 	vmov.f32	s1, s15
 8010b60:	f7f6 fcb2 	bl	80074c8 <can1_ams_cell_voltages_v4s2_encode>
 8010b64:	4603      	mov	r3, r0
 8010b66:	461a      	mov	r2, r3
 8010b68:	4bca      	ldr	r3, [pc, #808]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010b6a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
   can1_ams_cell_voltages.v10s2 = can1_ams_cell_voltages_v10s2_encode(ams_cell_voltages.v10s2);
 8010b6e:	463b      	mov	r3, r7
 8010b70:	ed93 7bda 	vldr	d7, [r3, #872]	; 0x368
 8010b74:	eeb0 0a47 	vmov.f32	s0, s14
 8010b78:	eef0 0a67 	vmov.f32	s1, s15
 8010b7c:	f7f6 fcfc 	bl	8007578 <can1_ams_cell_voltages_v10s2_encode>
 8010b80:	4603      	mov	r3, r0
 8010b82:	461a      	mov	r2, r3
 8010b84:	4bc3      	ldr	r3, [pc, #780]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010b86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
   can1_ams_cell_voltages.v4s3 = can1_ams_cell_voltages_v4s3_encode(ams_cell_voltages.v4s3);
 8010b8a:	463b      	mov	r3, r7
 8010b8c:	ed93 7b4c 	vldr	d7, [r3, #304]	; 0x130
 8010b90:	eeb0 0a47 	vmov.f32	s0, s14
 8010b94:	eef0 0a67 	vmov.f32	s1, s15
 8010b98:	f7f6 fd46 	bl	8007628 <can1_ams_cell_voltages_v4s3_encode>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	4bbc      	ldr	r3, [pc, #752]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010ba2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
   can1_ams_cell_voltages.v10s3 = can1_ams_cell_voltages_v10s3_encode(ams_cell_voltages.v10s3);
 8010ba6:	463b      	mov	r3, r7
 8010ba8:	ed93 7bdc 	vldr	d7, [r3, #880]	; 0x370
 8010bac:	eeb0 0a47 	vmov.f32	s0, s14
 8010bb0:	eef0 0a67 	vmov.f32	s1, s15
 8010bb4:	f7f6 fd90 	bl	80076d8 <can1_ams_cell_voltages_v10s3_encode>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	461a      	mov	r2, r3
 8010bbc:	4bb5      	ldr	r3, [pc, #724]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010bbe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   can1_ams_cell_voltages.v4s4 = can1_ams_cell_voltages_v4s4_encode(ams_cell_voltages.v4s4);
 8010bc2:	463b      	mov	r3, r7
 8010bc4:	ed93 7b4e 	vldr	d7, [r3, #312]	; 0x138
 8010bc8:	eeb0 0a47 	vmov.f32	s0, s14
 8010bcc:	eef0 0a67 	vmov.f32	s1, s15
 8010bd0:	f7f6 fdda 	bl	8007788 <can1_ams_cell_voltages_v4s4_encode>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	461a      	mov	r2, r3
 8010bd8:	4bae      	ldr	r3, [pc, #696]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010bda:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
   can1_ams_cell_voltages.v10s4 = can1_ams_cell_voltages_v10s4_encode(ams_cell_voltages.v10s4);
 8010bde:	463b      	mov	r3, r7
 8010be0:	ed93 7bde 	vldr	d7, [r3, #888]	; 0x378
 8010be4:	eeb0 0a47 	vmov.f32	s0, s14
 8010be8:	eef0 0a67 	vmov.f32	s1, s15
 8010bec:	f7f6 fe24 	bl	8007838 <can1_ams_cell_voltages_v10s4_encode>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	4ba7      	ldr	r3, [pc, #668]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   can1_ams_cell_voltages.v4s5 = can1_ams_cell_voltages_v4s5_encode(ams_cell_voltages.v4s5);
 8010bfa:	463b      	mov	r3, r7
 8010bfc:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8010c00:	eeb0 0a47 	vmov.f32	s0, s14
 8010c04:	eef0 0a67 	vmov.f32	s1, s15
 8010c08:	f7f6 fe6e 	bl	80078e8 <can1_ams_cell_voltages_v4s5_encode>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	461a      	mov	r2, r3
 8010c10:	4ba0      	ldr	r3, [pc, #640]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
   can1_ams_cell_voltages.v10s5 = can1_ams_cell_voltages_v10s5_encode(ams_cell_voltages.v10s5);
 8010c16:	463b      	mov	r3, r7
 8010c18:	ed93 7be0 	vldr	d7, [r3, #896]	; 0x380
 8010c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8010c20:	eef0 0a67 	vmov.f32	s1, s15
 8010c24:	f7f6 feb8 	bl	8007998 <can1_ams_cell_voltages_v10s5_encode>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	4b99      	ldr	r3, [pc, #612]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010c2e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
   can1_ams_cell_voltages.v4s6 = can1_ams_cell_voltages_v4s6_encode(ams_cell_voltages.v4s6);
 8010c32:	463b      	mov	r3, r7
 8010c34:	ed93 7b52 	vldr	d7, [r3, #328]	; 0x148
 8010c38:	eeb0 0a47 	vmov.f32	s0, s14
 8010c3c:	eef0 0a67 	vmov.f32	s1, s15
 8010c40:	f7f6 ff02 	bl	8007a48 <can1_ams_cell_voltages_v4s6_encode>
 8010c44:	4603      	mov	r3, r0
 8010c46:	461a      	mov	r2, r3
 8010c48:	4b92      	ldr	r3, [pc, #584]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010c4a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
   can1_ams_cell_voltages.v10s6 = can1_ams_cell_voltages_v10s6_encode(ams_cell_voltages.v10s6);
 8010c4e:	463b      	mov	r3, r7
 8010c50:	ed93 7be2 	vldr	d7, [r3, #904]	; 0x388
 8010c54:	eeb0 0a47 	vmov.f32	s0, s14
 8010c58:	eef0 0a67 	vmov.f32	s1, s15
 8010c5c:	f7f6 ff4c 	bl	8007af8 <can1_ams_cell_voltages_v10s6_encode>
 8010c60:	4603      	mov	r3, r0
 8010c62:	461a      	mov	r2, r3
 8010c64:	4b8b      	ldr	r3, [pc, #556]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010c66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
   can1_ams_cell_voltages.v4s7 = can1_ams_cell_voltages_v4s7_encode(ams_cell_voltages.v4s7);
 8010c6a:	463b      	mov	r3, r7
 8010c6c:	ed93 7b54 	vldr	d7, [r3, #336]	; 0x150
 8010c70:	eeb0 0a47 	vmov.f32	s0, s14
 8010c74:	eef0 0a67 	vmov.f32	s1, s15
 8010c78:	f7f6 ff96 	bl	8007ba8 <can1_ams_cell_voltages_v4s7_encode>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	461a      	mov	r2, r3
 8010c80:	4b84      	ldr	r3, [pc, #528]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010c82:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
   can1_ams_cell_voltages.v10s7 = can1_ams_cell_voltages_v10s7_encode(ams_cell_voltages.v10s7);
 8010c86:	463b      	mov	r3, r7
 8010c88:	ed93 7be4 	vldr	d7, [r3, #912]	; 0x390
 8010c8c:	eeb0 0a47 	vmov.f32	s0, s14
 8010c90:	eef0 0a67 	vmov.f32	s1, s15
 8010c94:	f7f6 ffe0 	bl	8007c58 <can1_ams_cell_voltages_v10s7_encode>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	4b7d      	ldr	r3, [pc, #500]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010c9e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
   can1_ams_cell_voltages.v4s8 = can1_ams_cell_voltages_v4s8_encode(ams_cell_voltages.v4s8);
 8010ca2:	463b      	mov	r3, r7
 8010ca4:	ed93 7b56 	vldr	d7, [r3, #344]	; 0x158
 8010ca8:	eeb0 0a47 	vmov.f32	s0, s14
 8010cac:	eef0 0a67 	vmov.f32	s1, s15
 8010cb0:	f7f7 f82a 	bl	8007d08 <can1_ams_cell_voltages_v4s8_encode>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	461a      	mov	r2, r3
 8010cb8:	4b76      	ldr	r3, [pc, #472]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010cba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
   can1_ams_cell_voltages.v10s8 = can1_ams_cell_voltages_v10s8_encode(ams_cell_voltages.v10s8);
 8010cbe:	463b      	mov	r3, r7
 8010cc0:	ed93 7be6 	vldr	d7, [r3, #920]	; 0x398
 8010cc4:	eeb0 0a47 	vmov.f32	s0, s14
 8010cc8:	eef0 0a67 	vmov.f32	s1, s15
 8010ccc:	f7f7 f874 	bl	8007db8 <can1_ams_cell_voltages_v10s8_encode>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	461a      	mov	r2, r3
 8010cd4:	4b6f      	ldr	r3, [pc, #444]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010cd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
   can1_ams_cell_voltages.v4s9 = can1_ams_cell_voltages_v4s9_encode(ams_cell_voltages.v4s9);
 8010cda:	463b      	mov	r3, r7
 8010cdc:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8010ce0:	eeb0 0a47 	vmov.f32	s0, s14
 8010ce4:	eef0 0a67 	vmov.f32	s1, s15
 8010ce8:	f7f7 f8be 	bl	8007e68 <can1_ams_cell_voltages_v4s9_encode>
 8010cec:	4603      	mov	r3, r0
 8010cee:	461a      	mov	r2, r3
 8010cf0:	4b68      	ldr	r3, [pc, #416]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010cf2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
   can1_ams_cell_voltages.v10s9 = can1_ams_cell_voltages_v10s9_encode(ams_cell_voltages.v10s9);
 8010cf6:	463b      	mov	r3, r7
 8010cf8:	ed93 7be8 	vldr	d7, [r3, #928]	; 0x3a0
 8010cfc:	eeb0 0a47 	vmov.f32	s0, s14
 8010d00:	eef0 0a67 	vmov.f32	s1, s15
 8010d04:	f7f7 f908 	bl	8007f18 <can1_ams_cell_voltages_v10s9_encode>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	461a      	mov	r2, r3
 8010d0c:	4b61      	ldr	r3, [pc, #388]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010d0e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
   can1_ams_cell_voltages.v4s10 = can1_ams_cell_voltages_v4s10_encode(ams_cell_voltages.v4s10);
 8010d12:	463b      	mov	r3, r7
 8010d14:	ed93 7b5a 	vldr	d7, [r3, #360]	; 0x168
 8010d18:	eeb0 0a47 	vmov.f32	s0, s14
 8010d1c:	eef0 0a67 	vmov.f32	s1, s15
 8010d20:	f7f7 f952 	bl	8007fc8 <can1_ams_cell_voltages_v4s10_encode>
 8010d24:	4603      	mov	r3, r0
 8010d26:	461a      	mov	r2, r3
 8010d28:	4b5a      	ldr	r3, [pc, #360]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010d2a:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
   can1_ams_cell_voltages.v10s10 = can1_ams_cell_voltages_v10s10_encode(ams_cell_voltages.v10s10);
 8010d2e:	463b      	mov	r3, r7
 8010d30:	ed93 7bea 	vldr	d7, [r3, #936]	; 0x3a8
 8010d34:	eeb0 0a47 	vmov.f32	s0, s14
 8010d38:	eef0 0a67 	vmov.f32	s1, s15
 8010d3c:	f7f7 f99c 	bl	8008078 <can1_ams_cell_voltages_v10s10_encode>
 8010d40:	4603      	mov	r3, r0
 8010d42:	461a      	mov	r2, r3
 8010d44:	4b53      	ldr	r3, [pc, #332]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010d46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
   can1_ams_cell_voltages.v4s11 = can1_ams_cell_voltages_v4s11_encode(ams_cell_voltages.v4s11);
 8010d4a:	463b      	mov	r3, r7
 8010d4c:	ed93 7b5c 	vldr	d7, [r3, #368]	; 0x170
 8010d50:	eeb0 0a47 	vmov.f32	s0, s14
 8010d54:	eef0 0a67 	vmov.f32	s1, s15
 8010d58:	f7f7 f9e6 	bl	8008128 <can1_ams_cell_voltages_v4s11_encode>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	461a      	mov	r2, r3
 8010d60:	4b4c      	ldr	r3, [pc, #304]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   can1_ams_cell_voltages.v10s11 = can1_ams_cell_voltages_v10s11_encode(ams_cell_voltages.v10s11);
 8010d66:	463b      	mov	r3, r7
 8010d68:	ed93 7bec 	vldr	d7, [r3, #944]	; 0x3b0
 8010d6c:	eeb0 0a47 	vmov.f32	s0, s14
 8010d70:	eef0 0a67 	vmov.f32	s1, s15
 8010d74:	f7f7 fa30 	bl	80081d8 <can1_ams_cell_voltages_v10s11_encode>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	4b45      	ldr	r3, [pc, #276]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010d7e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
   can1_ams_cell_voltages.v4s12 = can1_ams_cell_voltages_v4s12_encode(ams_cell_voltages.v4s12);
 8010d82:	463b      	mov	r3, r7
 8010d84:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8010d88:	eeb0 0a47 	vmov.f32	s0, s14
 8010d8c:	eef0 0a67 	vmov.f32	s1, s15
 8010d90:	f7f7 fa7a 	bl	8008288 <can1_ams_cell_voltages_v4s12_encode>
 8010d94:	4603      	mov	r3, r0
 8010d96:	461a      	mov	r2, r3
 8010d98:	4b3e      	ldr	r3, [pc, #248]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010d9a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
   can1_ams_cell_voltages.v10s12 = can1_ams_cell_voltages_v10s12_encode(ams_cell_voltages.v10s12);
 8010d9e:	463b      	mov	r3, r7
 8010da0:	ed93 7bee 	vldr	d7, [r3, #952]	; 0x3b8
 8010da4:	eeb0 0a47 	vmov.f32	s0, s14
 8010da8:	eef0 0a67 	vmov.f32	s1, s15
 8010dac:	f7f7 fac4 	bl	8008338 <can1_ams_cell_voltages_v10s12_encode>
 8010db0:	4603      	mov	r3, r0
 8010db2:	461a      	mov	r2, r3
 8010db4:	4b37      	ldr	r3, [pc, #220]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010db6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
   can1_ams_cell_voltages.v5s1 = can1_ams_cell_voltages_v5s1_encode(ams_cell_voltages.v5s1);
 8010dba:	463b      	mov	r3, r7
 8010dbc:	ed93 7b60 	vldr	d7, [r3, #384]	; 0x180
 8010dc0:	eeb0 0a47 	vmov.f32	s0, s14
 8010dc4:	eef0 0a67 	vmov.f32	s1, s15
 8010dc8:	f7f7 fb0e 	bl	80083e8 <can1_ams_cell_voltages_v5s1_encode>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	461a      	mov	r2, r3
 8010dd0:	4b30      	ldr	r3, [pc, #192]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010dd2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
   can1_ams_cell_voltages.v11s1 = can1_ams_cell_voltages_v11s1_encode(ams_cell_voltages.v11s1);
 8010dd6:	463b      	mov	r3, r7
 8010dd8:	ed93 7bf0 	vldr	d7, [r3, #960]	; 0x3c0
 8010ddc:	eeb0 0a47 	vmov.f32	s0, s14
 8010de0:	eef0 0a67 	vmov.f32	s1, s15
 8010de4:	f7f7 fb58 	bl	8008498 <can1_ams_cell_voltages_v11s1_encode>
 8010de8:	4603      	mov	r3, r0
 8010dea:	461a      	mov	r2, r3
 8010dec:	4b29      	ldr	r3, [pc, #164]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010dee:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
   can1_ams_cell_voltages.v5s2 = can1_ams_cell_voltages_v5s2_encode(ams_cell_voltages.v5s2);
 8010df2:	463b      	mov	r3, r7
 8010df4:	ed93 7b62 	vldr	d7, [r3, #392]	; 0x188
 8010df8:	eeb0 0a47 	vmov.f32	s0, s14
 8010dfc:	eef0 0a67 	vmov.f32	s1, s15
 8010e00:	f7f7 fba2 	bl	8008548 <can1_ams_cell_voltages_v5s2_encode>
 8010e04:	4603      	mov	r3, r0
 8010e06:	461a      	mov	r2, r3
 8010e08:	4b22      	ldr	r3, [pc, #136]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010e0a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
   can1_ams_cell_voltages.v5s3 = can1_ams_cell_voltages_v5s3_encode(ams_cell_voltages.v5s3);
 8010e0e:	463b      	mov	r3, r7
 8010e10:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8010e14:	eeb0 0a47 	vmov.f32	s0, s14
 8010e18:	eef0 0a67 	vmov.f32	s1, s15
 8010e1c:	f7f7 fbec 	bl	80085f8 <can1_ams_cell_voltages_v5s3_encode>
 8010e20:	4603      	mov	r3, r0
 8010e22:	461a      	mov	r2, r3
 8010e24:	4b1b      	ldr	r3, [pc, #108]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010e26:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
   can1_ams_cell_voltages.v11s3 = can1_ams_cell_voltages_v11s3_encode(ams_cell_voltages.v11s3);
 8010e2a:	463b      	mov	r3, r7
 8010e2c:	ed93 7bf2 	vldr	d7, [r3, #968]	; 0x3c8
 8010e30:	eeb0 0a47 	vmov.f32	s0, s14
 8010e34:	eef0 0a67 	vmov.f32	s1, s15
 8010e38:	f7f7 fc36 	bl	80086a8 <can1_ams_cell_voltages_v11s3_encode>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	461a      	mov	r2, r3
 8010e40:	4b14      	ldr	r3, [pc, #80]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010e42:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
   can1_ams_cell_voltages.v5s4 = can1_ams_cell_voltages_v5s4_encode(ams_cell_voltages.v5s4);
 8010e46:	463b      	mov	r3, r7
 8010e48:	ed93 7b66 	vldr	d7, [r3, #408]	; 0x198
 8010e4c:	eeb0 0a47 	vmov.f32	s0, s14
 8010e50:	eef0 0a67 	vmov.f32	s1, s15
 8010e54:	f7f7 fc80 	bl	8008758 <can1_ams_cell_voltages_v5s4_encode>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	4b0d      	ldr	r3, [pc, #52]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010e5e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
   can1_ams_cell_voltages.v5s5 = can1_ams_cell_voltages_v5s5_encode(ams_cell_voltages.v5s5);
 8010e62:	463b      	mov	r3, r7
 8010e64:	ed93 7b68 	vldr	d7, [r3, #416]	; 0x1a0
 8010e68:	eeb0 0a47 	vmov.f32	s0, s14
 8010e6c:	eef0 0a67 	vmov.f32	s1, s15
 8010e70:	f7f7 fcca 	bl	8008808 <can1_ams_cell_voltages_v5s5_encode>
 8010e74:	4603      	mov	r3, r0
 8010e76:	461a      	mov	r2, r3
 8010e78:	4b06      	ldr	r3, [pc, #24]	; (8010e94 <can1_ams_cell_voltages_transmit+0xb78>)
 8010e7a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
   can1_ams_cell_voltages.v11s5 = can1_ams_cell_voltages_v11s5_encode(ams_cell_voltages.v11s5);
 8010e7e:	463b      	mov	r3, r7
 8010e80:	ed93 7bf4 	vldr	d7, [r3, #976]	; 0x3d0
 8010e84:	eeb0 0a47 	vmov.f32	s0, s14
 8010e88:	eef0 0a67 	vmov.f32	s1, s15
 8010e8c:	f7f7 fd14 	bl	80088b8 <can1_ams_cell_voltages_v11s5_encode>
 8010e90:	e002      	b.n	8010e98 <can1_ams_cell_voltages_transmit+0xb7c>
 8010e92:	bf00      	nop
 8010e94:	200014f4 	.word	0x200014f4
 8010e98:	4603      	mov	r3, r0
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	4be0      	ldr	r3, [pc, #896]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8010e9e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   can1_ams_cell_voltages.v5s6 = can1_ams_cell_voltages_v5s6_encode(ams_cell_voltages.v5s6);
 8010ea2:	463b      	mov	r3, r7
 8010ea4:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 8010ea8:	eeb0 0a47 	vmov.f32	s0, s14
 8010eac:	eef0 0a67 	vmov.f32	s1, s15
 8010eb0:	f7f7 fd5a 	bl	8008968 <can1_ams_cell_voltages_v5s6_encode>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	4bd9      	ldr	r3, [pc, #868]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8010eba:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
   can1_ams_cell_voltages.v5s7 = can1_ams_cell_voltages_v5s7_encode(ams_cell_voltages.v5s7);
 8010ebe:	463b      	mov	r3, r7
 8010ec0:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8010ec4:	eeb0 0a47 	vmov.f32	s0, s14
 8010ec8:	eef0 0a67 	vmov.f32	s1, s15
 8010ecc:	f7f7 fda4 	bl	8008a18 <can1_ams_cell_voltages_v5s7_encode>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	4bd2      	ldr	r3, [pc, #840]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8010ed6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   can1_ams_cell_voltages.v11s7 = can1_ams_cell_voltages_v11s7_encode(ams_cell_voltages.v11s7);
 8010eda:	463b      	mov	r3, r7
 8010edc:	ed93 7bf6 	vldr	d7, [r3, #984]	; 0x3d8
 8010ee0:	eeb0 0a47 	vmov.f32	s0, s14
 8010ee4:	eef0 0a67 	vmov.f32	s1, s15
 8010ee8:	f7f7 fdee 	bl	8008ac8 <can1_ams_cell_voltages_v11s7_encode>
 8010eec:	4603      	mov	r3, r0
 8010eee:	461a      	mov	r2, r3
 8010ef0:	4bcb      	ldr	r3, [pc, #812]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8010ef2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
   can1_ams_cell_voltages.v5s8 = can1_ams_cell_voltages_v5s8_encode(ams_cell_voltages.v5s8);
 8010ef6:	463b      	mov	r3, r7
 8010ef8:	ed93 7b6e 	vldr	d7, [r3, #440]	; 0x1b8
 8010efc:	eeb0 0a47 	vmov.f32	s0, s14
 8010f00:	eef0 0a67 	vmov.f32	s1, s15
 8010f04:	f7f7 fe38 	bl	8008b78 <can1_ams_cell_voltages_v5s8_encode>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	4bc4      	ldr	r3, [pc, #784]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f0e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
   can1_ams_cell_voltages.v5s9 = can1_ams_cell_voltages_v5s9_encode(ams_cell_voltages.v5s9);
 8010f12:	463b      	mov	r3, r7
 8010f14:	ed93 7b70 	vldr	d7, [r3, #448]	; 0x1c0
 8010f18:	eeb0 0a47 	vmov.f32	s0, s14
 8010f1c:	eef0 0a67 	vmov.f32	s1, s15
 8010f20:	f7f7 fe82 	bl	8008c28 <can1_ams_cell_voltages_v5s9_encode>
 8010f24:	4603      	mov	r3, r0
 8010f26:	461a      	mov	r2, r3
 8010f28:	4bbd      	ldr	r3, [pc, #756]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f2a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
   can1_ams_cell_voltages.v11s9 = can1_ams_cell_voltages_v11s9_encode(ams_cell_voltages.v11s9);
 8010f2e:	463b      	mov	r3, r7
 8010f30:	ed93 7bf8 	vldr	d7, [r3, #992]	; 0x3e0
 8010f34:	eeb0 0a47 	vmov.f32	s0, s14
 8010f38:	eef0 0a67 	vmov.f32	s1, s15
 8010f3c:	f7f7 fecc 	bl	8008cd8 <can1_ams_cell_voltages_v11s9_encode>
 8010f40:	4603      	mov	r3, r0
 8010f42:	461a      	mov	r2, r3
 8010f44:	4bb6      	ldr	r3, [pc, #728]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f46:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
   can1_ams_cell_voltages.v5s10 = can1_ams_cell_voltages_v5s10_encode(ams_cell_voltages.v5s10);
 8010f4a:	463b      	mov	r3, r7
 8010f4c:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 8010f50:	eeb0 0a47 	vmov.f32	s0, s14
 8010f54:	eef0 0a67 	vmov.f32	s1, s15
 8010f58:	f7f7 ff16 	bl	8008d88 <can1_ams_cell_voltages_v5s10_encode>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	461a      	mov	r2, r3
 8010f60:	4baf      	ldr	r3, [pc, #700]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f62:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
   can1_ams_cell_voltages.v5s11 = can1_ams_cell_voltages_v5s11_encode(ams_cell_voltages.v5s11);
 8010f66:	463b      	mov	r3, r7
 8010f68:	ed93 7b74 	vldr	d7, [r3, #464]	; 0x1d0
 8010f6c:	eeb0 0a47 	vmov.f32	s0, s14
 8010f70:	eef0 0a67 	vmov.f32	s1, s15
 8010f74:	f7f7 ff60 	bl	8008e38 <can1_ams_cell_voltages_v5s11_encode>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	4ba8      	ldr	r3, [pc, #672]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
   can1_ams_cell_voltages.v11s11 = can1_ams_cell_voltages_v11s11_encode(ams_cell_voltages.v11s11);
 8010f82:	463b      	mov	r3, r7
 8010f84:	ed93 7bfa 	vldr	d7, [r3, #1000]	; 0x3e8
 8010f88:	eeb0 0a47 	vmov.f32	s0, s14
 8010f8c:	eef0 0a67 	vmov.f32	s1, s15
 8010f90:	f7f7 ffaa 	bl	8008ee8 <can1_ams_cell_voltages_v11s11_encode>
 8010f94:	4603      	mov	r3, r0
 8010f96:	461a      	mov	r2, r3
 8010f98:	4ba1      	ldr	r3, [pc, #644]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f9a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
   can1_ams_cell_voltages.v5s12 = can1_ams_cell_voltages_v5s12_encode(ams_cell_voltages.v5s12);
 8010f9e:	463b      	mov	r3, r7
 8010fa0:	ed93 7b76 	vldr	d7, [r3, #472]	; 0x1d8
 8010fa4:	eeb0 0a47 	vmov.f32	s0, s14
 8010fa8:	eef0 0a67 	vmov.f32	s1, s15
 8010fac:	f7f7 fff4 	bl	8008f98 <can1_ams_cell_voltages_v5s12_encode>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	4b9a      	ldr	r3, [pc, #616]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8010fb6:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
   can1_ams_cell_voltages.v6s1 = can1_ams_cell_voltages_v6s1_encode(ams_cell_voltages.v6s1);
 8010fba:	463b      	mov	r3, r7
 8010fbc:	ed93 7b78 	vldr	d7, [r3, #480]	; 0x1e0
 8010fc0:	eeb0 0a47 	vmov.f32	s0, s14
 8010fc4:	eef0 0a67 	vmov.f32	s1, s15
 8010fc8:	f7f8 f83e 	bl	8009048 <can1_ams_cell_voltages_v6s1_encode>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	461a      	mov	r2, r3
 8010fd0:	4b93      	ldr	r3, [pc, #588]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8010fd2:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
   can1_ams_cell_voltages.v6s2 = can1_ams_cell_voltages_v6s2_encode(ams_cell_voltages.v6s2);
 8010fd6:	463b      	mov	r3, r7
 8010fd8:	ed93 7b7a 	vldr	d7, [r3, #488]	; 0x1e8
 8010fdc:	eeb0 0a47 	vmov.f32	s0, s14
 8010fe0:	eef0 0a67 	vmov.f32	s1, s15
 8010fe4:	f7f8 f888 	bl	80090f8 <can1_ams_cell_voltages_v6s2_encode>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	461a      	mov	r2, r3
 8010fec:	4b8c      	ldr	r3, [pc, #560]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8010fee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   can1_ams_cell_voltages.v6s3 = can1_ams_cell_voltages_v6s3_encode(ams_cell_voltages.v6s3);
 8010ff2:	463b      	mov	r3, r7
 8010ff4:	ed93 7b7c 	vldr	d7, [r3, #496]	; 0x1f0
 8010ff8:	eeb0 0a47 	vmov.f32	s0, s14
 8010ffc:	eef0 0a67 	vmov.f32	s1, s15
 8011000:	f7f8 f8d2 	bl	80091a8 <can1_ams_cell_voltages_v6s3_encode>
 8011004:	4603      	mov	r3, r0
 8011006:	461a      	mov	r2, r3
 8011008:	4b85      	ldr	r3, [pc, #532]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 801100a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
   can1_ams_cell_voltages.v6s4 = can1_ams_cell_voltages_v6s4_encode(ams_cell_voltages.v6s4);
 801100e:	463b      	mov	r3, r7
 8011010:	ed93 7b7e 	vldr	d7, [r3, #504]	; 0x1f8
 8011014:	eeb0 0a47 	vmov.f32	s0, s14
 8011018:	eef0 0a67 	vmov.f32	s1, s15
 801101c:	f7f8 f91c 	bl	8009258 <can1_ams_cell_voltages_v6s4_encode>
 8011020:	4603      	mov	r3, r0
 8011022:	461a      	mov	r2, r3
 8011024:	4b7e      	ldr	r3, [pc, #504]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8011026:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
   can1_ams_cell_voltages.v6s5 = can1_ams_cell_voltages_v6s5_encode(ams_cell_voltages.v6s5);
 801102a:	463b      	mov	r3, r7
 801102c:	ed93 7b80 	vldr	d7, [r3, #512]	; 0x200
 8011030:	eeb0 0a47 	vmov.f32	s0, s14
 8011034:	eef0 0a67 	vmov.f32	s1, s15
 8011038:	f7f8 f966 	bl	8009308 <can1_ams_cell_voltages_v6s5_encode>
 801103c:	4603      	mov	r3, r0
 801103e:	461a      	mov	r2, r3
 8011040:	4b77      	ldr	r3, [pc, #476]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8011042:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
   can1_ams_cell_voltages.v6s6 = can1_ams_cell_voltages_v6s6_encode(ams_cell_voltages.v6s6);
 8011046:	463b      	mov	r3, r7
 8011048:	ed93 7b82 	vldr	d7, [r3, #520]	; 0x208
 801104c:	eeb0 0a47 	vmov.f32	s0, s14
 8011050:	eef0 0a67 	vmov.f32	s1, s15
 8011054:	f7f8 f9b0 	bl	80093b8 <can1_ams_cell_voltages_v6s6_encode>
 8011058:	4603      	mov	r3, r0
 801105a:	461a      	mov	r2, r3
 801105c:	4b70      	ldr	r3, [pc, #448]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 801105e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   can1_ams_cell_voltages.v6s7 = can1_ams_cell_voltages_v6s7_encode(ams_cell_voltages.v6s7);
 8011062:	463b      	mov	r3, r7
 8011064:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8011068:	eeb0 0a47 	vmov.f32	s0, s14
 801106c:	eef0 0a67 	vmov.f32	s1, s15
 8011070:	f7f8 f9fa 	bl	8009468 <can1_ams_cell_voltages_v6s7_encode>
 8011074:	4603      	mov	r3, r0
 8011076:	461a      	mov	r2, r3
 8011078:	4b69      	ldr	r3, [pc, #420]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 801107a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   can1_ams_cell_voltages.v6s8 = can1_ams_cell_voltages_v6s8_encode(ams_cell_voltages.v6s8);
 801107e:	463b      	mov	r3, r7
 8011080:	ed93 7b86 	vldr	d7, [r3, #536]	; 0x218
 8011084:	eeb0 0a47 	vmov.f32	s0, s14
 8011088:	eef0 0a67 	vmov.f32	s1, s15
 801108c:	f7f8 fa44 	bl	8009518 <can1_ams_cell_voltages_v6s8_encode>
 8011090:	4603      	mov	r3, r0
 8011092:	461a      	mov	r2, r3
 8011094:	4b62      	ldr	r3, [pc, #392]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8011096:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   can1_ams_cell_voltages.v6s9 = can1_ams_cell_voltages_v6s9_encode(ams_cell_voltages.v6s9);
 801109a:	463b      	mov	r3, r7
 801109c:	ed93 7b88 	vldr	d7, [r3, #544]	; 0x220
 80110a0:	eeb0 0a47 	vmov.f32	s0, s14
 80110a4:	eef0 0a67 	vmov.f32	s1, s15
 80110a8:	f7f8 fa8e 	bl	80095c8 <can1_ams_cell_voltages_v6s9_encode>
 80110ac:	4603      	mov	r3, r0
 80110ae:	461a      	mov	r2, r3
 80110b0:	4b5b      	ldr	r3, [pc, #364]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 80110b2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
   can1_ams_cell_voltages.v6s10 = can1_ams_cell_voltages_v6s10_encode(ams_cell_voltages.v6s10);
 80110b6:	463b      	mov	r3, r7
 80110b8:	ed93 7b8a 	vldr	d7, [r3, #552]	; 0x228
 80110bc:	eeb0 0a47 	vmov.f32	s0, s14
 80110c0:	eef0 0a67 	vmov.f32	s1, s15
 80110c4:	f7f8 fad8 	bl	8009678 <can1_ams_cell_voltages_v6s10_encode>
 80110c8:	4603      	mov	r3, r0
 80110ca:	461a      	mov	r2, r3
 80110cc:	4b54      	ldr	r3, [pc, #336]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 80110ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
   can1_ams_cell_voltages.v6s11 = can1_ams_cell_voltages_v6s11_encode(ams_cell_voltages.v6s11);
 80110d2:	463b      	mov	r3, r7
 80110d4:	ed93 7b8c 	vldr	d7, [r3, #560]	; 0x230
 80110d8:	eeb0 0a47 	vmov.f32	s0, s14
 80110dc:	eef0 0a67 	vmov.f32	s1, s15
 80110e0:	f7f8 fb22 	bl	8009728 <can1_ams_cell_voltages_v6s11_encode>
 80110e4:	4603      	mov	r3, r0
 80110e6:	461a      	mov	r2, r3
 80110e8:	4b4d      	ldr	r3, [pc, #308]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 80110ea:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
   can1_ams_cell_voltages.v6s12 = can1_ams_cell_voltages_v6s12_encode(ams_cell_voltages.v6s12);
 80110ee:	463b      	mov	r3, r7
 80110f0:	ed93 7b8e 	vldr	d7, [r3, #568]	; 0x238
 80110f4:	eeb0 0a47 	vmov.f32	s0, s14
 80110f8:	eef0 0a67 	vmov.f32	s1, s15
 80110fc:	f7f8 fb6c 	bl	80097d8 <can1_ams_cell_voltages_v6s12_encode>
 8011100:	4603      	mov	r3, r0
 8011102:	461a      	mov	r2, r3
 8011104:	4b46      	ldr	r3, [pc, #280]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8011106:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

       can1_ams_cell_voltages.voltage_multiplexor = 0;
 801110a:	4b45      	ldr	r3, [pc, #276]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 801110c:	2200      	movs	r2, #0
 801110e:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011110:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011114:	2207      	movs	r2, #7
 8011116:	4942      	ldr	r1, [pc, #264]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8011118:	4618      	mov	r0, r3
 801111a:	f7f1 f853 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801111e:	bf00      	nop
 8011120:	4b40      	ldr	r3, [pc, #256]	; (8011224 <can1_ams_cell_voltages_transmit+0xf08>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	4618      	mov	r0, r3
 8011126:	f014 fc00 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 801112a:	4603      	mov	r3, r0
 801112c:	2b00      	cmp	r3, #0
 801112e:	d0f7      	beq.n	8011120 <can1_ams_cell_voltages_transmit+0xe04>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011130:	4b3c      	ldr	r3, [pc, #240]	; (8011224 <can1_ams_cell_voltages_transmit+0xf08>)
 8011132:	6818      	ldr	r0, [r3, #0]
 8011134:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011138:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801113c:	4b3a      	ldr	r3, [pc, #232]	; (8011228 <can1_ams_cell_voltages_transmit+0xf0c>)
 801113e:	f014 fb19 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011142:	4603      	mov	r3, r0
 8011144:	2b00      	cmp	r3, #0
 8011146:	d001      	beq.n	801114c <can1_ams_cell_voltages_transmit+0xe30>
           Error_Handler();
 8011148:	f006 fa84 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 1;
 801114c:	4b34      	ldr	r3, [pc, #208]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 801114e:	2201      	movs	r2, #1
 8011150:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011152:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011156:	2207      	movs	r2, #7
 8011158:	4931      	ldr	r1, [pc, #196]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 801115a:	4618      	mov	r0, r3
 801115c:	f7f1 f832 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011160:	bf00      	nop
 8011162:	4b30      	ldr	r3, [pc, #192]	; (8011224 <can1_ams_cell_voltages_transmit+0xf08>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	4618      	mov	r0, r3
 8011168:	f014 fbdf 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 801116c:	4603      	mov	r3, r0
 801116e:	2b00      	cmp	r3, #0
 8011170:	d0f7      	beq.n	8011162 <can1_ams_cell_voltages_transmit+0xe46>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011172:	4b2c      	ldr	r3, [pc, #176]	; (8011224 <can1_ams_cell_voltages_transmit+0xf08>)
 8011174:	6818      	ldr	r0, [r3, #0]
 8011176:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801117a:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801117e:	4b2a      	ldr	r3, [pc, #168]	; (8011228 <can1_ams_cell_voltages_transmit+0xf0c>)
 8011180:	f014 faf8 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011184:	4603      	mov	r3, r0
 8011186:	2b00      	cmp	r3, #0
 8011188:	d001      	beq.n	801118e <can1_ams_cell_voltages_transmit+0xe72>
           Error_Handler();
 801118a:	f006 fa63 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 2;
 801118e:	4b24      	ldr	r3, [pc, #144]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8011190:	2202      	movs	r2, #2
 8011192:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011194:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011198:	2207      	movs	r2, #7
 801119a:	4921      	ldr	r1, [pc, #132]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 801119c:	4618      	mov	r0, r3
 801119e:	f7f1 f811 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80111a2:	bf00      	nop
 80111a4:	4b1f      	ldr	r3, [pc, #124]	; (8011224 <can1_ams_cell_voltages_transmit+0xf08>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	4618      	mov	r0, r3
 80111aa:	f014 fbbe 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 80111ae:	4603      	mov	r3, r0
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d0f7      	beq.n	80111a4 <can1_ams_cell_voltages_transmit+0xe88>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80111b4:	4b1b      	ldr	r3, [pc, #108]	; (8011224 <can1_ams_cell_voltages_transmit+0xf08>)
 80111b6:	6818      	ldr	r0, [r3, #0]
 80111b8:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80111bc:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80111c0:	4b19      	ldr	r3, [pc, #100]	; (8011228 <can1_ams_cell_voltages_transmit+0xf0c>)
 80111c2:	f014 fad7 	bl	8025774 <HAL_CAN_AddTxMessage>
 80111c6:	4603      	mov	r3, r0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d001      	beq.n	80111d0 <can1_ams_cell_voltages_transmit+0xeb4>
           Error_Handler();
 80111cc:	f006 fa42 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 3;
 80111d0:	4b13      	ldr	r3, [pc, #76]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 80111d2:	2203      	movs	r2, #3
 80111d4:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80111d6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80111da:	2207      	movs	r2, #7
 80111dc:	4910      	ldr	r1, [pc, #64]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 80111de:	4618      	mov	r0, r3
 80111e0:	f7f0 fff0 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80111e4:	bf00      	nop
 80111e6:	4b0f      	ldr	r3, [pc, #60]	; (8011224 <can1_ams_cell_voltages_transmit+0xf08>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	4618      	mov	r0, r3
 80111ec:	f014 fb9d 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 80111f0:	4603      	mov	r3, r0
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d0f7      	beq.n	80111e6 <can1_ams_cell_voltages_transmit+0xeca>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80111f6:	4b0b      	ldr	r3, [pc, #44]	; (8011224 <can1_ams_cell_voltages_transmit+0xf08>)
 80111f8:	6818      	ldr	r0, [r3, #0]
 80111fa:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80111fe:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011202:	4b09      	ldr	r3, [pc, #36]	; (8011228 <can1_ams_cell_voltages_transmit+0xf0c>)
 8011204:	f014 fab6 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011208:	4603      	mov	r3, r0
 801120a:	2b00      	cmp	r3, #0
 801120c:	d001      	beq.n	8011212 <can1_ams_cell_voltages_transmit+0xef6>
           Error_Handler();
 801120e:	f006 fa21 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 4;
 8011212:	4b03      	ldr	r3, [pc, #12]	; (8011220 <can1_ams_cell_voltages_transmit+0xf04>)
 8011214:	2204      	movs	r2, #4
 8011216:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011218:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801121c:	e006      	b.n	801122c <can1_ams_cell_voltages_transmit+0xf10>
 801121e:	bf00      	nop
 8011220:	200014f4 	.word	0x200014f4
 8011224:	20001630 	.word	0x20001630
 8011228:	200014cc 	.word	0x200014cc
 801122c:	2207      	movs	r2, #7
 801122e:	49c7      	ldr	r1, [pc, #796]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 8011230:	4618      	mov	r0, r3
 8011232:	f7f0 ffc7 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011236:	bf00      	nop
 8011238:	4bc5      	ldr	r3, [pc, #788]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	4618      	mov	r0, r3
 801123e:	f014 fb74 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011242:	4603      	mov	r3, r0
 8011244:	2b00      	cmp	r3, #0
 8011246:	d0f7      	beq.n	8011238 <can1_ams_cell_voltages_transmit+0xf1c>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011248:	4bc1      	ldr	r3, [pc, #772]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 801124a:	6818      	ldr	r0, [r3, #0]
 801124c:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011250:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011254:	4bbf      	ldr	r3, [pc, #764]	; (8011554 <can1_ams_cell_voltages_transmit+0x1238>)
 8011256:	f014 fa8d 	bl	8025774 <HAL_CAN_AddTxMessage>
 801125a:	4603      	mov	r3, r0
 801125c:	2b00      	cmp	r3, #0
 801125e:	d001      	beq.n	8011264 <can1_ams_cell_voltages_transmit+0xf48>
           Error_Handler();
 8011260:	f006 f9f8 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 5;
 8011264:	4bb9      	ldr	r3, [pc, #740]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 8011266:	2205      	movs	r2, #5
 8011268:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 801126a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801126e:	2207      	movs	r2, #7
 8011270:	49b6      	ldr	r1, [pc, #728]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 8011272:	4618      	mov	r0, r3
 8011274:	f7f0 ffa6 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011278:	bf00      	nop
 801127a:	4bb5      	ldr	r3, [pc, #724]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	4618      	mov	r0, r3
 8011280:	f014 fb53 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d0f7      	beq.n	801127a <can1_ams_cell_voltages_transmit+0xf5e>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801128a:	4bb1      	ldr	r3, [pc, #708]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 801128c:	6818      	ldr	r0, [r3, #0]
 801128e:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011292:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011296:	4baf      	ldr	r3, [pc, #700]	; (8011554 <can1_ams_cell_voltages_transmit+0x1238>)
 8011298:	f014 fa6c 	bl	8025774 <HAL_CAN_AddTxMessage>
 801129c:	4603      	mov	r3, r0
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d001      	beq.n	80112a6 <can1_ams_cell_voltages_transmit+0xf8a>
           Error_Handler();
 80112a2:	f006 f9d7 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 6;
 80112a6:	4ba9      	ldr	r3, [pc, #676]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 80112a8:	2206      	movs	r2, #6
 80112aa:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80112ac:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80112b0:	2207      	movs	r2, #7
 80112b2:	49a6      	ldr	r1, [pc, #664]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7f0 ff85 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80112ba:	bf00      	nop
 80112bc:	4ba4      	ldr	r3, [pc, #656]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	4618      	mov	r0, r3
 80112c2:	f014 fb32 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 80112c6:	4603      	mov	r3, r0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d0f7      	beq.n	80112bc <can1_ams_cell_voltages_transmit+0xfa0>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80112cc:	4ba0      	ldr	r3, [pc, #640]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 80112ce:	6818      	ldr	r0, [r3, #0]
 80112d0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80112d4:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80112d8:	4b9e      	ldr	r3, [pc, #632]	; (8011554 <can1_ams_cell_voltages_transmit+0x1238>)
 80112da:	f014 fa4b 	bl	8025774 <HAL_CAN_AddTxMessage>
 80112de:	4603      	mov	r3, r0
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d001      	beq.n	80112e8 <can1_ams_cell_voltages_transmit+0xfcc>
           Error_Handler();
 80112e4:	f006 f9b6 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 7;
 80112e8:	4b98      	ldr	r3, [pc, #608]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 80112ea:	2207      	movs	r2, #7
 80112ec:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80112ee:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80112f2:	2207      	movs	r2, #7
 80112f4:	4995      	ldr	r1, [pc, #596]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7f0 ff64 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80112fc:	bf00      	nop
 80112fe:	4b94      	ldr	r3, [pc, #592]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	4618      	mov	r0, r3
 8011304:	f014 fb11 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d0f7      	beq.n	80112fe <can1_ams_cell_voltages_transmit+0xfe2>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801130e:	4b90      	ldr	r3, [pc, #576]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 8011310:	6818      	ldr	r0, [r3, #0]
 8011312:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011316:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801131a:	4b8e      	ldr	r3, [pc, #568]	; (8011554 <can1_ams_cell_voltages_transmit+0x1238>)
 801131c:	f014 fa2a 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011320:	4603      	mov	r3, r0
 8011322:	2b00      	cmp	r3, #0
 8011324:	d001      	beq.n	801132a <can1_ams_cell_voltages_transmit+0x100e>
           Error_Handler();
 8011326:	f006 f995 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 8;
 801132a:	4b88      	ldr	r3, [pc, #544]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 801132c:	2208      	movs	r2, #8
 801132e:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011330:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011334:	2207      	movs	r2, #7
 8011336:	4985      	ldr	r1, [pc, #532]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 8011338:	4618      	mov	r0, r3
 801133a:	f7f0 ff43 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801133e:	bf00      	nop
 8011340:	4b83      	ldr	r3, [pc, #524]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	4618      	mov	r0, r3
 8011346:	f014 faf0 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 801134a:	4603      	mov	r3, r0
 801134c:	2b00      	cmp	r3, #0
 801134e:	d0f7      	beq.n	8011340 <can1_ams_cell_voltages_transmit+0x1024>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011350:	4b7f      	ldr	r3, [pc, #508]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 8011352:	6818      	ldr	r0, [r3, #0]
 8011354:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011358:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801135c:	4b7d      	ldr	r3, [pc, #500]	; (8011554 <can1_ams_cell_voltages_transmit+0x1238>)
 801135e:	f014 fa09 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011362:	4603      	mov	r3, r0
 8011364:	2b00      	cmp	r3, #0
 8011366:	d001      	beq.n	801136c <can1_ams_cell_voltages_transmit+0x1050>
           Error_Handler();
 8011368:	f006 f974 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 9;
 801136c:	4b77      	ldr	r3, [pc, #476]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 801136e:	2209      	movs	r2, #9
 8011370:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011372:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011376:	2207      	movs	r2, #7
 8011378:	4974      	ldr	r1, [pc, #464]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 801137a:	4618      	mov	r0, r3
 801137c:	f7f0 ff22 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011380:	bf00      	nop
 8011382:	4b73      	ldr	r3, [pc, #460]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	4618      	mov	r0, r3
 8011388:	f014 facf 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 801138c:	4603      	mov	r3, r0
 801138e:	2b00      	cmp	r3, #0
 8011390:	d0f7      	beq.n	8011382 <can1_ams_cell_voltages_transmit+0x1066>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011392:	4b6f      	ldr	r3, [pc, #444]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 8011394:	6818      	ldr	r0, [r3, #0]
 8011396:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801139a:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801139e:	4b6d      	ldr	r3, [pc, #436]	; (8011554 <can1_ams_cell_voltages_transmit+0x1238>)
 80113a0:	f014 f9e8 	bl	8025774 <HAL_CAN_AddTxMessage>
 80113a4:	4603      	mov	r3, r0
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d001      	beq.n	80113ae <can1_ams_cell_voltages_transmit+0x1092>
           Error_Handler();
 80113aa:	f006 f953 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 10;
 80113ae:	4b67      	ldr	r3, [pc, #412]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 80113b0:	220a      	movs	r2, #10
 80113b2:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80113b4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80113b8:	2207      	movs	r2, #7
 80113ba:	4964      	ldr	r1, [pc, #400]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 80113bc:	4618      	mov	r0, r3
 80113be:	f7f0 ff01 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80113c2:	bf00      	nop
 80113c4:	4b62      	ldr	r3, [pc, #392]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	4618      	mov	r0, r3
 80113ca:	f014 faae 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 80113ce:	4603      	mov	r3, r0
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d0f7      	beq.n	80113c4 <can1_ams_cell_voltages_transmit+0x10a8>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80113d4:	4b5e      	ldr	r3, [pc, #376]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 80113d6:	6818      	ldr	r0, [r3, #0]
 80113d8:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80113dc:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80113e0:	4b5c      	ldr	r3, [pc, #368]	; (8011554 <can1_ams_cell_voltages_transmit+0x1238>)
 80113e2:	f014 f9c7 	bl	8025774 <HAL_CAN_AddTxMessage>
 80113e6:	4603      	mov	r3, r0
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d001      	beq.n	80113f0 <can1_ams_cell_voltages_transmit+0x10d4>
           Error_Handler();
 80113ec:	f006 f932 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 11;
 80113f0:	4b56      	ldr	r3, [pc, #344]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 80113f2:	220b      	movs	r2, #11
 80113f4:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80113f6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80113fa:	2207      	movs	r2, #7
 80113fc:	4953      	ldr	r1, [pc, #332]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 80113fe:	4618      	mov	r0, r3
 8011400:	f7f0 fee0 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011404:	bf00      	nop
 8011406:	4b52      	ldr	r3, [pc, #328]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	4618      	mov	r0, r3
 801140c:	f014 fa8d 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011410:	4603      	mov	r3, r0
 8011412:	2b00      	cmp	r3, #0
 8011414:	d0f7      	beq.n	8011406 <can1_ams_cell_voltages_transmit+0x10ea>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011416:	4b4e      	ldr	r3, [pc, #312]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 8011418:	6818      	ldr	r0, [r3, #0]
 801141a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801141e:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011422:	4b4c      	ldr	r3, [pc, #304]	; (8011554 <can1_ams_cell_voltages_transmit+0x1238>)
 8011424:	f014 f9a6 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011428:	4603      	mov	r3, r0
 801142a:	2b00      	cmp	r3, #0
 801142c:	d001      	beq.n	8011432 <can1_ams_cell_voltages_transmit+0x1116>
           Error_Handler();
 801142e:	f006 f911 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 12;
 8011432:	4b46      	ldr	r3, [pc, #280]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 8011434:	220c      	movs	r2, #12
 8011436:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011438:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801143c:	2207      	movs	r2, #7
 801143e:	4943      	ldr	r1, [pc, #268]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 8011440:	4618      	mov	r0, r3
 8011442:	f7f0 febf 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011446:	bf00      	nop
 8011448:	4b41      	ldr	r3, [pc, #260]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4618      	mov	r0, r3
 801144e:	f014 fa6c 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011452:	4603      	mov	r3, r0
 8011454:	2b00      	cmp	r3, #0
 8011456:	d0f7      	beq.n	8011448 <can1_ams_cell_voltages_transmit+0x112c>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011458:	4b3d      	ldr	r3, [pc, #244]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 801145a:	6818      	ldr	r0, [r3, #0]
 801145c:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011460:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011464:	4b3b      	ldr	r3, [pc, #236]	; (8011554 <can1_ams_cell_voltages_transmit+0x1238>)
 8011466:	f014 f985 	bl	8025774 <HAL_CAN_AddTxMessage>
 801146a:	4603      	mov	r3, r0
 801146c:	2b00      	cmp	r3, #0
 801146e:	d001      	beq.n	8011474 <can1_ams_cell_voltages_transmit+0x1158>
           Error_Handler();
 8011470:	f006 f8f0 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 13;
 8011474:	4b35      	ldr	r3, [pc, #212]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 8011476:	220d      	movs	r2, #13
 8011478:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 801147a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801147e:	2207      	movs	r2, #7
 8011480:	4932      	ldr	r1, [pc, #200]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 8011482:	4618      	mov	r0, r3
 8011484:	f7f0 fe9e 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011488:	bf00      	nop
 801148a:	4b31      	ldr	r3, [pc, #196]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	4618      	mov	r0, r3
 8011490:	f014 fa4b 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011494:	4603      	mov	r3, r0
 8011496:	2b00      	cmp	r3, #0
 8011498:	d0f7      	beq.n	801148a <can1_ams_cell_voltages_transmit+0x116e>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801149a:	4b2d      	ldr	r3, [pc, #180]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 801149c:	6818      	ldr	r0, [r3, #0]
 801149e:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80114a2:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80114a6:	4b2b      	ldr	r3, [pc, #172]	; (8011554 <can1_ams_cell_voltages_transmit+0x1238>)
 80114a8:	f014 f964 	bl	8025774 <HAL_CAN_AddTxMessage>
 80114ac:	4603      	mov	r3, r0
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d001      	beq.n	80114b6 <can1_ams_cell_voltages_transmit+0x119a>
           Error_Handler();
 80114b2:	f006 f8cf 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 14;
 80114b6:	4b25      	ldr	r3, [pc, #148]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 80114b8:	220e      	movs	r2, #14
 80114ba:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80114bc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80114c0:	2207      	movs	r2, #7
 80114c2:	4922      	ldr	r1, [pc, #136]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 80114c4:	4618      	mov	r0, r3
 80114c6:	f7f0 fe7d 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80114ca:	bf00      	nop
 80114cc:	4b20      	ldr	r3, [pc, #128]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	4618      	mov	r0, r3
 80114d2:	f014 fa2a 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d0f7      	beq.n	80114cc <can1_ams_cell_voltages_transmit+0x11b0>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80114dc:	4b1c      	ldr	r3, [pc, #112]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 80114de:	6818      	ldr	r0, [r3, #0]
 80114e0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80114e4:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80114e8:	4b1a      	ldr	r3, [pc, #104]	; (8011554 <can1_ams_cell_voltages_transmit+0x1238>)
 80114ea:	f014 f943 	bl	8025774 <HAL_CAN_AddTxMessage>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d001      	beq.n	80114f8 <can1_ams_cell_voltages_transmit+0x11dc>
           Error_Handler();
 80114f4:	f006 f8ae 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 15;
 80114f8:	4b14      	ldr	r3, [pc, #80]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 80114fa:	220f      	movs	r2, #15
 80114fc:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80114fe:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011502:	2207      	movs	r2, #7
 8011504:	4911      	ldr	r1, [pc, #68]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 8011506:	4618      	mov	r0, r3
 8011508:	f7f0 fe5c 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801150c:	bf00      	nop
 801150e:	4b10      	ldr	r3, [pc, #64]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	4618      	mov	r0, r3
 8011514:	f014 fa09 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011518:	4603      	mov	r3, r0
 801151a:	2b00      	cmp	r3, #0
 801151c:	d0f7      	beq.n	801150e <can1_ams_cell_voltages_transmit+0x11f2>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801151e:	4b0c      	ldr	r3, [pc, #48]	; (8011550 <can1_ams_cell_voltages_transmit+0x1234>)
 8011520:	6818      	ldr	r0, [r3, #0]
 8011522:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011526:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801152a:	4b0a      	ldr	r3, [pc, #40]	; (8011554 <can1_ams_cell_voltages_transmit+0x1238>)
 801152c:	f014 f922 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d001      	beq.n	801153a <can1_ams_cell_voltages_transmit+0x121e>
           Error_Handler();
 8011536:	f006 f88d 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 16;
 801153a:	4b04      	ldr	r3, [pc, #16]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 801153c:	2210      	movs	r2, #16
 801153e:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011540:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011544:	2207      	movs	r2, #7
 8011546:	4901      	ldr	r1, [pc, #4]	; (801154c <can1_ams_cell_voltages_transmit+0x1230>)
 8011548:	4618      	mov	r0, r3
 801154a:	e005      	b.n	8011558 <can1_ams_cell_voltages_transmit+0x123c>
 801154c:	200014f4 	.word	0x200014f4
 8011550:	20001630 	.word	0x20001630
 8011554:	200014cc 	.word	0x200014cc
 8011558:	f7f0 fe34 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801155c:	bf00      	nop
 801155e:	4b81      	ldr	r3, [pc, #516]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	4618      	mov	r0, r3
 8011564:	f014 f9e1 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011568:	4603      	mov	r3, r0
 801156a:	2b00      	cmp	r3, #0
 801156c:	d0f7      	beq.n	801155e <can1_ams_cell_voltages_transmit+0x1242>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801156e:	4b7d      	ldr	r3, [pc, #500]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 8011570:	6818      	ldr	r0, [r3, #0]
 8011572:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011576:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801157a:	4b7b      	ldr	r3, [pc, #492]	; (8011768 <can1_ams_cell_voltages_transmit+0x144c>)
 801157c:	f014 f8fa 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d001      	beq.n	801158a <can1_ams_cell_voltages_transmit+0x126e>
           Error_Handler();
 8011586:	f006 f865 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 17;
 801158a:	4b78      	ldr	r3, [pc, #480]	; (801176c <can1_ams_cell_voltages_transmit+0x1450>)
 801158c:	2211      	movs	r2, #17
 801158e:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011590:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011594:	2207      	movs	r2, #7
 8011596:	4975      	ldr	r1, [pc, #468]	; (801176c <can1_ams_cell_voltages_transmit+0x1450>)
 8011598:	4618      	mov	r0, r3
 801159a:	f7f0 fe13 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801159e:	bf00      	nop
 80115a0:	4b70      	ldr	r3, [pc, #448]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4618      	mov	r0, r3
 80115a6:	f014 f9c0 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 80115aa:	4603      	mov	r3, r0
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d0f7      	beq.n	80115a0 <can1_ams_cell_voltages_transmit+0x1284>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80115b0:	4b6c      	ldr	r3, [pc, #432]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 80115b2:	6818      	ldr	r0, [r3, #0]
 80115b4:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80115b8:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80115bc:	4b6a      	ldr	r3, [pc, #424]	; (8011768 <can1_ams_cell_voltages_transmit+0x144c>)
 80115be:	f014 f8d9 	bl	8025774 <HAL_CAN_AddTxMessage>
 80115c2:	4603      	mov	r3, r0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d001      	beq.n	80115cc <can1_ams_cell_voltages_transmit+0x12b0>
           Error_Handler();
 80115c8:	f006 f844 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 18;
 80115cc:	4b67      	ldr	r3, [pc, #412]	; (801176c <can1_ams_cell_voltages_transmit+0x1450>)
 80115ce:	2212      	movs	r2, #18
 80115d0:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80115d2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80115d6:	2207      	movs	r2, #7
 80115d8:	4964      	ldr	r1, [pc, #400]	; (801176c <can1_ams_cell_voltages_transmit+0x1450>)
 80115da:	4618      	mov	r0, r3
 80115dc:	f7f0 fdf2 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80115e0:	bf00      	nop
 80115e2:	4b60      	ldr	r3, [pc, #384]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	4618      	mov	r0, r3
 80115e8:	f014 f99f 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 80115ec:	4603      	mov	r3, r0
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d0f7      	beq.n	80115e2 <can1_ams_cell_voltages_transmit+0x12c6>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80115f2:	4b5c      	ldr	r3, [pc, #368]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 80115f4:	6818      	ldr	r0, [r3, #0]
 80115f6:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80115fa:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80115fe:	4b5a      	ldr	r3, [pc, #360]	; (8011768 <can1_ams_cell_voltages_transmit+0x144c>)
 8011600:	f014 f8b8 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d001      	beq.n	801160e <can1_ams_cell_voltages_transmit+0x12f2>
           Error_Handler();
 801160a:	f006 f823 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 19;
 801160e:	4b57      	ldr	r3, [pc, #348]	; (801176c <can1_ams_cell_voltages_transmit+0x1450>)
 8011610:	2213      	movs	r2, #19
 8011612:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011614:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011618:	2207      	movs	r2, #7
 801161a:	4954      	ldr	r1, [pc, #336]	; (801176c <can1_ams_cell_voltages_transmit+0x1450>)
 801161c:	4618      	mov	r0, r3
 801161e:	f7f0 fdd1 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011622:	bf00      	nop
 8011624:	4b4f      	ldr	r3, [pc, #316]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4618      	mov	r0, r3
 801162a:	f014 f97e 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	d0f7      	beq.n	8011624 <can1_ams_cell_voltages_transmit+0x1308>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011634:	4b4b      	ldr	r3, [pc, #300]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 8011636:	6818      	ldr	r0, [r3, #0]
 8011638:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801163c:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011640:	4b49      	ldr	r3, [pc, #292]	; (8011768 <can1_ams_cell_voltages_transmit+0x144c>)
 8011642:	f014 f897 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011646:	4603      	mov	r3, r0
 8011648:	2b00      	cmp	r3, #0
 801164a:	d001      	beq.n	8011650 <can1_ams_cell_voltages_transmit+0x1334>
           Error_Handler();
 801164c:	f006 f802 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 20;
 8011650:	4b46      	ldr	r3, [pc, #280]	; (801176c <can1_ams_cell_voltages_transmit+0x1450>)
 8011652:	2214      	movs	r2, #20
 8011654:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011656:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801165a:	2207      	movs	r2, #7
 801165c:	4943      	ldr	r1, [pc, #268]	; (801176c <can1_ams_cell_voltages_transmit+0x1450>)
 801165e:	4618      	mov	r0, r3
 8011660:	f7f0 fdb0 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011664:	bf00      	nop
 8011666:	4b3f      	ldr	r3, [pc, #252]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	4618      	mov	r0, r3
 801166c:	f014 f95d 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011670:	4603      	mov	r3, r0
 8011672:	2b00      	cmp	r3, #0
 8011674:	d0f7      	beq.n	8011666 <can1_ams_cell_voltages_transmit+0x134a>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011676:	4b3b      	ldr	r3, [pc, #236]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 8011678:	6818      	ldr	r0, [r3, #0]
 801167a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801167e:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011682:	4b39      	ldr	r3, [pc, #228]	; (8011768 <can1_ams_cell_voltages_transmit+0x144c>)
 8011684:	f014 f876 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011688:	4603      	mov	r3, r0
 801168a:	2b00      	cmp	r3, #0
 801168c:	d001      	beq.n	8011692 <can1_ams_cell_voltages_transmit+0x1376>
           Error_Handler();
 801168e:	f005 ffe1 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 21;
 8011692:	4b36      	ldr	r3, [pc, #216]	; (801176c <can1_ams_cell_voltages_transmit+0x1450>)
 8011694:	2215      	movs	r2, #21
 8011696:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011698:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801169c:	2207      	movs	r2, #7
 801169e:	4933      	ldr	r1, [pc, #204]	; (801176c <can1_ams_cell_voltages_transmit+0x1450>)
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7f0 fd8f 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80116a6:	bf00      	nop
 80116a8:	4b2e      	ldr	r3, [pc, #184]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	4618      	mov	r0, r3
 80116ae:	f014 f93c 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 80116b2:	4603      	mov	r3, r0
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d0f7      	beq.n	80116a8 <can1_ams_cell_voltages_transmit+0x138c>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80116b8:	4b2a      	ldr	r3, [pc, #168]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 80116ba:	6818      	ldr	r0, [r3, #0]
 80116bc:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80116c0:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80116c4:	4b28      	ldr	r3, [pc, #160]	; (8011768 <can1_ams_cell_voltages_transmit+0x144c>)
 80116c6:	f014 f855 	bl	8025774 <HAL_CAN_AddTxMessage>
 80116ca:	4603      	mov	r3, r0
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d001      	beq.n	80116d4 <can1_ams_cell_voltages_transmit+0x13b8>
           Error_Handler();
 80116d0:	f005 ffc0 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 22;
 80116d4:	4b25      	ldr	r3, [pc, #148]	; (801176c <can1_ams_cell_voltages_transmit+0x1450>)
 80116d6:	2216      	movs	r2, #22
 80116d8:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80116da:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80116de:	2207      	movs	r2, #7
 80116e0:	4922      	ldr	r1, [pc, #136]	; (801176c <can1_ams_cell_voltages_transmit+0x1450>)
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7f0 fd6e 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80116e8:	bf00      	nop
 80116ea:	4b1e      	ldr	r3, [pc, #120]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	4618      	mov	r0, r3
 80116f0:	f014 f91b 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 80116f4:	4603      	mov	r3, r0
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d0f7      	beq.n	80116ea <can1_ams_cell_voltages_transmit+0x13ce>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80116fa:	4b1a      	ldr	r3, [pc, #104]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 80116fc:	6818      	ldr	r0, [r3, #0]
 80116fe:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011702:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011706:	4b18      	ldr	r3, [pc, #96]	; (8011768 <can1_ams_cell_voltages_transmit+0x144c>)
 8011708:	f014 f834 	bl	8025774 <HAL_CAN_AddTxMessage>
 801170c:	4603      	mov	r3, r0
 801170e:	2b00      	cmp	r3, #0
 8011710:	d001      	beq.n	8011716 <can1_ams_cell_voltages_transmit+0x13fa>
           Error_Handler();
 8011712:	f005 ff9f 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 23;
 8011716:	4b15      	ldr	r3, [pc, #84]	; (801176c <can1_ams_cell_voltages_transmit+0x1450>)
 8011718:	2217      	movs	r2, #23
 801171a:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 801171c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011720:	2207      	movs	r2, #7
 8011722:	4912      	ldr	r1, [pc, #72]	; (801176c <can1_ams_cell_voltages_transmit+0x1450>)
 8011724:	4618      	mov	r0, r3
 8011726:	f7f0 fd4d 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801172a:	bf00      	nop
 801172c:	4b0d      	ldr	r3, [pc, #52]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	4618      	mov	r0, r3
 8011732:	f014 f8fa 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011736:	4603      	mov	r3, r0
 8011738:	2b00      	cmp	r3, #0
 801173a:	d0f7      	beq.n	801172c <can1_ams_cell_voltages_transmit+0x1410>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801173c:	4b09      	ldr	r3, [pc, #36]	; (8011764 <can1_ams_cell_voltages_transmit+0x1448>)
 801173e:	6818      	ldr	r0, [r3, #0]
 8011740:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011744:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011748:	4b07      	ldr	r3, [pc, #28]	; (8011768 <can1_ams_cell_voltages_transmit+0x144c>)
 801174a:	f014 f813 	bl	8025774 <HAL_CAN_AddTxMessage>
 801174e:	4603      	mov	r3, r0
 8011750:	2b00      	cmp	r3, #0
 8011752:	d001      	beq.n	8011758 <can1_ams_cell_voltages_transmit+0x143c>
           Error_Handler();
 8011754:	f005 ff7e 	bl	8017654 <Error_Handler>
       }
}
 8011758:	bf00      	nop
 801175a:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}
 8011762:	bf00      	nop
 8011764:	20001630 	.word	0x20001630
 8011768:	200014cc 	.word	0x200014cc
 801176c:	200014f4 	.word	0x200014f4

08011770 <can1_ams_cell_temperatures_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_temperatures_transmit() {
 8011770:	b580      	push	{r7, lr}
 8011772:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8011776:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 8011778:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801177c:	2200      	movs	r2, #0
 801177e:	601a      	str	r2, [r3, #0]
 8011780:	605a      	str	r2, [r3, #4]
 8011782:	609a      	str	r2, [r3, #8]
 8011784:	60da      	str	r2, [r3, #12]
 8011786:	611a      	str	r2, [r3, #16]
 8011788:	615a      	str	r2, [r3, #20]
 801178a:	2322      	movs	r3, #34	; 0x22
 801178c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8011790:	2308      	movs	r3, #8
 8011792:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
       .StdId = 34,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_cell_temperatures_t ams_cell_temperatures;
   can1_ams_cell_temperatures_tx_callback(&ams_cell_temperatures);
 8011796:	463b      	mov	r3, r7
 8011798:	4618      	mov	r0, r3
 801179a:	f004 fadb 	bl	8015d54 <can1_ams_cell_temperatures_tx_callback>

   can1_ams_cell_temperatures.temperature_multiplexor = can1_ams_cell_temperatures_temperature_multiplexor_encode(ams_cell_temperatures.temperature_multiplexor);
 801179e:	463b      	mov	r3, r7
 80117a0:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 80117a4:	4618      	mov	r0, r3
 80117a6:	f7ee fe9f 	bl	80004e8 <__aeabi_ui2d>
 80117aa:	4602      	mov	r2, r0
 80117ac:	460b      	mov	r3, r1
 80117ae:	ec43 2b10 	vmov	d0, r2, r3
 80117b2:	f7fa fba7 	bl	800bf04 <can1_ams_cell_temperatures_temperature_multiplexor_encode>
 80117b6:	4603      	mov	r3, r0
 80117b8:	461a      	mov	r2, r3
 80117ba:	4bde      	ldr	r3, [pc, #888]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80117bc:	701a      	strb	r2, [r3, #0]
   can1_ams_cell_temperatures.t1s1 = can1_ams_cell_temperatures_t1s1_encode(ams_cell_temperatures.t1s1);
 80117be:	463b      	mov	r3, r7
 80117c0:	ed93 7b00 	vldr	d7, [r3]
 80117c4:	eeb0 0a47 	vmov.f32	s0, s14
 80117c8:	eef0 0a67 	vmov.f32	s1, s15
 80117cc:	f7fa fbac 	bl	800bf28 <can1_ams_cell_temperatures_t1s1_encode>
 80117d0:	4603      	mov	r3, r0
 80117d2:	461a      	mov	r2, r3
 80117d4:	4bd7      	ldr	r3, [pc, #860]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80117d6:	805a      	strh	r2, [r3, #2]
   can1_ams_cell_temperatures.t1s2 = can1_ams_cell_temperatures_t1s2_encode(ams_cell_temperatures.t1s2);
 80117d8:	463b      	mov	r3, r7
 80117da:	ed93 7b02 	vldr	d7, [r3, #8]
 80117de:	eeb0 0a47 	vmov.f32	s0, s14
 80117e2:	eef0 0a67 	vmov.f32	s1, s15
 80117e6:	f7fa fbf7 	bl	800bfd8 <can1_ams_cell_temperatures_t1s2_encode>
 80117ea:	4603      	mov	r3, r0
 80117ec:	461a      	mov	r2, r3
 80117ee:	4bd1      	ldr	r3, [pc, #836]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80117f0:	809a      	strh	r2, [r3, #4]
   can1_ams_cell_temperatures.t1s3 = can1_ams_cell_temperatures_t1s3_encode(ams_cell_temperatures.t1s3);
 80117f2:	463b      	mov	r3, r7
 80117f4:	ed93 7b04 	vldr	d7, [r3, #16]
 80117f8:	eeb0 0a47 	vmov.f32	s0, s14
 80117fc:	eef0 0a67 	vmov.f32	s1, s15
 8011800:	f7fa fc42 	bl	800c088 <can1_ams_cell_temperatures_t1s3_encode>
 8011804:	4603      	mov	r3, r0
 8011806:	461a      	mov	r2, r3
 8011808:	4bca      	ldr	r3, [pc, #808]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801180a:	80da      	strh	r2, [r3, #6]
   can1_ams_cell_temperatures.t1s4 = can1_ams_cell_temperatures_t1s4_encode(ams_cell_temperatures.t1s4);
 801180c:	463b      	mov	r3, r7
 801180e:	ed93 7b06 	vldr	d7, [r3, #24]
 8011812:	eeb0 0a47 	vmov.f32	s0, s14
 8011816:	eef0 0a67 	vmov.f32	s1, s15
 801181a:	f7fa fc8d 	bl	800c138 <can1_ams_cell_temperatures_t1s4_encode>
 801181e:	4603      	mov	r3, r0
 8011820:	461a      	mov	r2, r3
 8011822:	4bc4      	ldr	r3, [pc, #784]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011824:	811a      	strh	r2, [r3, #8]
   can1_ams_cell_temperatures.t1s5 = can1_ams_cell_temperatures_t1s5_encode(ams_cell_temperatures.t1s5);
 8011826:	463b      	mov	r3, r7
 8011828:	ed93 7b08 	vldr	d7, [r3, #32]
 801182c:	eeb0 0a47 	vmov.f32	s0, s14
 8011830:	eef0 0a67 	vmov.f32	s1, s15
 8011834:	f7fa fcd8 	bl	800c1e8 <can1_ams_cell_temperatures_t1s5_encode>
 8011838:	4603      	mov	r3, r0
 801183a:	461a      	mov	r2, r3
 801183c:	4bbd      	ldr	r3, [pc, #756]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801183e:	815a      	strh	r2, [r3, #10]
   can1_ams_cell_temperatures.t1s6 = can1_ams_cell_temperatures_t1s6_encode(ams_cell_temperatures.t1s6);
 8011840:	463b      	mov	r3, r7
 8011842:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8011846:	eeb0 0a47 	vmov.f32	s0, s14
 801184a:	eef0 0a67 	vmov.f32	s1, s15
 801184e:	f7fa fd23 	bl	800c298 <can1_ams_cell_temperatures_t1s6_encode>
 8011852:	4603      	mov	r3, r0
 8011854:	461a      	mov	r2, r3
 8011856:	4bb7      	ldr	r3, [pc, #732]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011858:	819a      	strh	r2, [r3, #12]
   can1_ams_cell_temperatures.t1s7 = can1_ams_cell_temperatures_t1s7_encode(ams_cell_temperatures.t1s7);
 801185a:	463b      	mov	r3, r7
 801185c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8011860:	eeb0 0a47 	vmov.f32	s0, s14
 8011864:	eef0 0a67 	vmov.f32	s1, s15
 8011868:	f7fa fd6e 	bl	800c348 <can1_ams_cell_temperatures_t1s7_encode>
 801186c:	4603      	mov	r3, r0
 801186e:	461a      	mov	r2, r3
 8011870:	4bb0      	ldr	r3, [pc, #704]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011872:	81da      	strh	r2, [r3, #14]
   can1_ams_cell_temperatures.t1s8 = can1_ams_cell_temperatures_t1s8_encode(ams_cell_temperatures.t1s8);
 8011874:	463b      	mov	r3, r7
 8011876:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 801187a:	eeb0 0a47 	vmov.f32	s0, s14
 801187e:	eef0 0a67 	vmov.f32	s1, s15
 8011882:	f7fa fdb9 	bl	800c3f8 <can1_ams_cell_temperatures_t1s8_encode>
 8011886:	4603      	mov	r3, r0
 8011888:	461a      	mov	r2, r3
 801188a:	4baa      	ldr	r3, [pc, #680]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801188c:	821a      	strh	r2, [r3, #16]
   can1_ams_cell_temperatures.t1s9 = can1_ams_cell_temperatures_t1s9_encode(ams_cell_temperatures.t1s9);
 801188e:	463b      	mov	r3, r7
 8011890:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8011894:	eeb0 0a47 	vmov.f32	s0, s14
 8011898:	eef0 0a67 	vmov.f32	s1, s15
 801189c:	f7fa fe04 	bl	800c4a8 <can1_ams_cell_temperatures_t1s9_encode>
 80118a0:	4603      	mov	r3, r0
 80118a2:	461a      	mov	r2, r3
 80118a4:	4ba3      	ldr	r3, [pc, #652]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80118a6:	825a      	strh	r2, [r3, #18]
   can1_ams_cell_temperatures.t1s10 = can1_ams_cell_temperatures_t1s10_encode(ams_cell_temperatures.t1s10);
 80118a8:	463b      	mov	r3, r7
 80118aa:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80118ae:	eeb0 0a47 	vmov.f32	s0, s14
 80118b2:	eef0 0a67 	vmov.f32	s1, s15
 80118b6:	f7fa fe4f 	bl	800c558 <can1_ams_cell_temperatures_t1s10_encode>
 80118ba:	4603      	mov	r3, r0
 80118bc:	461a      	mov	r2, r3
 80118be:	4b9d      	ldr	r3, [pc, #628]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80118c0:	829a      	strh	r2, [r3, #20]
   can1_ams_cell_temperatures.t1s11 = can1_ams_cell_temperatures_t1s11_encode(ams_cell_temperatures.t1s11);
 80118c2:	463b      	mov	r3, r7
 80118c4:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80118c8:	eeb0 0a47 	vmov.f32	s0, s14
 80118cc:	eef0 0a67 	vmov.f32	s1, s15
 80118d0:	f7fa fe9a 	bl	800c608 <can1_ams_cell_temperatures_t1s11_encode>
 80118d4:	4603      	mov	r3, r0
 80118d6:	461a      	mov	r2, r3
 80118d8:	4b96      	ldr	r3, [pc, #600]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80118da:	82da      	strh	r2, [r3, #22]
   can1_ams_cell_temperatures.t1s12 = can1_ams_cell_temperatures_t1s12_encode(ams_cell_temperatures.t1s12);
 80118dc:	463b      	mov	r3, r7
 80118de:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80118e2:	eeb0 0a47 	vmov.f32	s0, s14
 80118e6:	eef0 0a67 	vmov.f32	s1, s15
 80118ea:	f7fa fee5 	bl	800c6b8 <can1_ams_cell_temperatures_t1s12_encode>
 80118ee:	4603      	mov	r3, r0
 80118f0:	461a      	mov	r2, r3
 80118f2:	4b90      	ldr	r3, [pc, #576]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80118f4:	831a      	strh	r2, [r3, #24]
   can1_ams_cell_temperatures.t2s1 = can1_ams_cell_temperatures_t2s1_encode(ams_cell_temperatures.t2s1);
 80118f6:	463b      	mov	r3, r7
 80118f8:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80118fc:	eeb0 0a47 	vmov.f32	s0, s14
 8011900:	eef0 0a67 	vmov.f32	s1, s15
 8011904:	f7fa ff30 	bl	800c768 <can1_ams_cell_temperatures_t2s1_encode>
 8011908:	4603      	mov	r3, r0
 801190a:	461a      	mov	r2, r3
 801190c:	4b89      	ldr	r3, [pc, #548]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801190e:	835a      	strh	r2, [r3, #26]
   can1_ams_cell_temperatures.t2s2 = can1_ams_cell_temperatures_t2s2_encode(ams_cell_temperatures.t2s2);
 8011910:	463b      	mov	r3, r7
 8011912:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8011916:	eeb0 0a47 	vmov.f32	s0, s14
 801191a:	eef0 0a67 	vmov.f32	s1, s15
 801191e:	f7fa ff7b 	bl	800c818 <can1_ams_cell_temperatures_t2s2_encode>
 8011922:	4603      	mov	r3, r0
 8011924:	461a      	mov	r2, r3
 8011926:	4b83      	ldr	r3, [pc, #524]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011928:	839a      	strh	r2, [r3, #28]
   can1_ams_cell_temperatures.t2s3 = can1_ams_cell_temperatures_t2s3_encode(ams_cell_temperatures.t2s3);
 801192a:	463b      	mov	r3, r7
 801192c:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8011930:	eeb0 0a47 	vmov.f32	s0, s14
 8011934:	eef0 0a67 	vmov.f32	s1, s15
 8011938:	f7fa ffc6 	bl	800c8c8 <can1_ams_cell_temperatures_t2s3_encode>
 801193c:	4603      	mov	r3, r0
 801193e:	461a      	mov	r2, r3
 8011940:	4b7c      	ldr	r3, [pc, #496]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011942:	83da      	strh	r2, [r3, #30]
   can1_ams_cell_temperatures.t2s4 = can1_ams_cell_temperatures_t2s4_encode(ams_cell_temperatures.t2s4);
 8011944:	463b      	mov	r3, r7
 8011946:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 801194a:	eeb0 0a47 	vmov.f32	s0, s14
 801194e:	eef0 0a67 	vmov.f32	s1, s15
 8011952:	f7fb f811 	bl	800c978 <can1_ams_cell_temperatures_t2s4_encode>
 8011956:	4603      	mov	r3, r0
 8011958:	461a      	mov	r2, r3
 801195a:	4b76      	ldr	r3, [pc, #472]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801195c:	841a      	strh	r2, [r3, #32]
   can1_ams_cell_temperatures.t2s5 = can1_ams_cell_temperatures_t2s5_encode(ams_cell_temperatures.t2s5);
 801195e:	463b      	mov	r3, r7
 8011960:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8011964:	eeb0 0a47 	vmov.f32	s0, s14
 8011968:	eef0 0a67 	vmov.f32	s1, s15
 801196c:	f7fb f85c 	bl	800ca28 <can1_ams_cell_temperatures_t2s5_encode>
 8011970:	4603      	mov	r3, r0
 8011972:	461a      	mov	r2, r3
 8011974:	4b6f      	ldr	r3, [pc, #444]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011976:	845a      	strh	r2, [r3, #34]	; 0x22
   can1_ams_cell_temperatures.t2s6 = can1_ams_cell_temperatures_t2s6_encode(ams_cell_temperatures.t2s6);
 8011978:	463b      	mov	r3, r7
 801197a:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 801197e:	eeb0 0a47 	vmov.f32	s0, s14
 8011982:	eef0 0a67 	vmov.f32	s1, s15
 8011986:	f7fb f8a7 	bl	800cad8 <can1_ams_cell_temperatures_t2s6_encode>
 801198a:	4603      	mov	r3, r0
 801198c:	461a      	mov	r2, r3
 801198e:	4b69      	ldr	r3, [pc, #420]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011990:	849a      	strh	r2, [r3, #36]	; 0x24
   can1_ams_cell_temperatures.t2s7 = can1_ams_cell_temperatures_t2s7_encode(ams_cell_temperatures.t2s7);
 8011992:	463b      	mov	r3, r7
 8011994:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8011998:	eeb0 0a47 	vmov.f32	s0, s14
 801199c:	eef0 0a67 	vmov.f32	s1, s15
 80119a0:	f7fb f8f2 	bl	800cb88 <can1_ams_cell_temperatures_t2s7_encode>
 80119a4:	4603      	mov	r3, r0
 80119a6:	461a      	mov	r2, r3
 80119a8:	4b62      	ldr	r3, [pc, #392]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80119aa:	84da      	strh	r2, [r3, #38]	; 0x26
   can1_ams_cell_temperatures.t2s8 = can1_ams_cell_temperatures_t2s8_encode(ams_cell_temperatures.t2s8);
 80119ac:	463b      	mov	r3, r7
 80119ae:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80119b2:	eeb0 0a47 	vmov.f32	s0, s14
 80119b6:	eef0 0a67 	vmov.f32	s1, s15
 80119ba:	f7fb f93d 	bl	800cc38 <can1_ams_cell_temperatures_t2s8_encode>
 80119be:	4603      	mov	r3, r0
 80119c0:	461a      	mov	r2, r3
 80119c2:	4b5c      	ldr	r3, [pc, #368]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80119c4:	851a      	strh	r2, [r3, #40]	; 0x28
   can1_ams_cell_temperatures.t2s9 = can1_ams_cell_temperatures_t2s9_encode(ams_cell_temperatures.t2s9);
 80119c6:	463b      	mov	r3, r7
 80119c8:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80119cc:	eeb0 0a47 	vmov.f32	s0, s14
 80119d0:	eef0 0a67 	vmov.f32	s1, s15
 80119d4:	f7fb f988 	bl	800cce8 <can1_ams_cell_temperatures_t2s9_encode>
 80119d8:	4603      	mov	r3, r0
 80119da:	461a      	mov	r2, r3
 80119dc:	4b55      	ldr	r3, [pc, #340]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80119de:	855a      	strh	r2, [r3, #42]	; 0x2a
   can1_ams_cell_temperatures.t2s10 = can1_ams_cell_temperatures_t2s10_encode(ams_cell_temperatures.t2s10);
 80119e0:	463b      	mov	r3, r7
 80119e2:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 80119e6:	eeb0 0a47 	vmov.f32	s0, s14
 80119ea:	eef0 0a67 	vmov.f32	s1, s15
 80119ee:	f7fb f9d3 	bl	800cd98 <can1_ams_cell_temperatures_t2s10_encode>
 80119f2:	4603      	mov	r3, r0
 80119f4:	461a      	mov	r2, r3
 80119f6:	4b4f      	ldr	r3, [pc, #316]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80119f8:	859a      	strh	r2, [r3, #44]	; 0x2c
   can1_ams_cell_temperatures.t2s11 = can1_ams_cell_temperatures_t2s11_encode(ams_cell_temperatures.t2s11);
 80119fa:	463b      	mov	r3, r7
 80119fc:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8011a00:	eeb0 0a47 	vmov.f32	s0, s14
 8011a04:	eef0 0a67 	vmov.f32	s1, s15
 8011a08:	f7fb fa1e 	bl	800ce48 <can1_ams_cell_temperatures_t2s11_encode>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	461a      	mov	r2, r3
 8011a10:	4b48      	ldr	r3, [pc, #288]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011a12:	85da      	strh	r2, [r3, #46]	; 0x2e
   can1_ams_cell_temperatures.t2s12 = can1_ams_cell_temperatures_t2s12_encode(ams_cell_temperatures.t2s12);
 8011a14:	463b      	mov	r3, r7
 8011a16:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 8011a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8011a1e:	eef0 0a67 	vmov.f32	s1, s15
 8011a22:	f7fb fa69 	bl	800cef8 <can1_ams_cell_temperatures_t2s12_encode>
 8011a26:	4603      	mov	r3, r0
 8011a28:	461a      	mov	r2, r3
 8011a2a:	4b42      	ldr	r3, [pc, #264]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011a2c:	861a      	strh	r2, [r3, #48]	; 0x30
   can1_ams_cell_temperatures.t3s1 = can1_ams_cell_temperatures_t3s1_encode(ams_cell_temperatures.t3s1);
 8011a2e:	463b      	mov	r3, r7
 8011a30:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 8011a34:	eeb0 0a47 	vmov.f32	s0, s14
 8011a38:	eef0 0a67 	vmov.f32	s1, s15
 8011a3c:	f7fb fab4 	bl	800cfa8 <can1_ams_cell_temperatures_t3s1_encode>
 8011a40:	4603      	mov	r3, r0
 8011a42:	461a      	mov	r2, r3
 8011a44:	4b3b      	ldr	r3, [pc, #236]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011a46:	865a      	strh	r2, [r3, #50]	; 0x32
   can1_ams_cell_temperatures.t3s2 = can1_ams_cell_temperatures_t3s2_encode(ams_cell_temperatures.t3s2);
 8011a48:	463b      	mov	r3, r7
 8011a4a:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 8011a4e:	eeb0 0a47 	vmov.f32	s0, s14
 8011a52:	eef0 0a67 	vmov.f32	s1, s15
 8011a56:	f7fb faff 	bl	800d058 <can1_ams_cell_temperatures_t3s2_encode>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	461a      	mov	r2, r3
 8011a5e:	4b35      	ldr	r3, [pc, #212]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011a60:	869a      	strh	r2, [r3, #52]	; 0x34
   can1_ams_cell_temperatures.t3s3 = can1_ams_cell_temperatures_t3s3_encode(ams_cell_temperatures.t3s3);
 8011a62:	463b      	mov	r3, r7
 8011a64:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8011a68:	eeb0 0a47 	vmov.f32	s0, s14
 8011a6c:	eef0 0a67 	vmov.f32	s1, s15
 8011a70:	f7fb fb4a 	bl	800d108 <can1_ams_cell_temperatures_t3s3_encode>
 8011a74:	4603      	mov	r3, r0
 8011a76:	461a      	mov	r2, r3
 8011a78:	4b2e      	ldr	r3, [pc, #184]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011a7a:	86da      	strh	r2, [r3, #54]	; 0x36
   can1_ams_cell_temperatures.t3s4 = can1_ams_cell_temperatures_t3s4_encode(ams_cell_temperatures.t3s4);
 8011a7c:	463b      	mov	r3, r7
 8011a7e:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
 8011a82:	eeb0 0a47 	vmov.f32	s0, s14
 8011a86:	eef0 0a67 	vmov.f32	s1, s15
 8011a8a:	f7fb fb95 	bl	800d1b8 <can1_ams_cell_temperatures_t3s4_encode>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	461a      	mov	r2, r3
 8011a92:	4b28      	ldr	r3, [pc, #160]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011a94:	871a      	strh	r2, [r3, #56]	; 0x38
   can1_ams_cell_temperatures.t3s5 = can1_ams_cell_temperatures_t3s5_encode(ams_cell_temperatures.t3s5);
 8011a96:	463b      	mov	r3, r7
 8011a98:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
 8011a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8011aa0:	eef0 0a67 	vmov.f32	s1, s15
 8011aa4:	f7fb fbe0 	bl	800d268 <can1_ams_cell_temperatures_t3s5_encode>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	461a      	mov	r2, r3
 8011aac:	4b21      	ldr	r3, [pc, #132]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011aae:	875a      	strh	r2, [r3, #58]	; 0x3a
   can1_ams_cell_temperatures.t3s6 = can1_ams_cell_temperatures_t3s6_encode(ams_cell_temperatures.t3s6);
 8011ab0:	463b      	mov	r3, r7
 8011ab2:	ed93 7b3a 	vldr	d7, [r3, #232]	; 0xe8
 8011ab6:	eeb0 0a47 	vmov.f32	s0, s14
 8011aba:	eef0 0a67 	vmov.f32	s1, s15
 8011abe:	f7fb fc2b 	bl	800d318 <can1_ams_cell_temperatures_t3s6_encode>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	4b1b      	ldr	r3, [pc, #108]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011ac8:	879a      	strh	r2, [r3, #60]	; 0x3c
   can1_ams_cell_temperatures.t3s7 = can1_ams_cell_temperatures_t3s7_encode(ams_cell_temperatures.t3s7);
 8011aca:	463b      	mov	r3, r7
 8011acc:	ed93 7b3c 	vldr	d7, [r3, #240]	; 0xf0
 8011ad0:	eeb0 0a47 	vmov.f32	s0, s14
 8011ad4:	eef0 0a67 	vmov.f32	s1, s15
 8011ad8:	f7fb fc76 	bl	800d3c8 <can1_ams_cell_temperatures_t3s7_encode>
 8011adc:	4603      	mov	r3, r0
 8011ade:	461a      	mov	r2, r3
 8011ae0:	4b14      	ldr	r3, [pc, #80]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
   can1_ams_cell_temperatures.t3s8 = can1_ams_cell_temperatures_t3s8_encode(ams_cell_temperatures.t3s8);
 8011ae4:	463b      	mov	r3, r7
 8011ae6:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8011aea:	eeb0 0a47 	vmov.f32	s0, s14
 8011aee:	eef0 0a67 	vmov.f32	s1, s15
 8011af2:	f7fb fcc1 	bl	800d478 <can1_ams_cell_temperatures_t3s8_encode>
 8011af6:	4603      	mov	r3, r0
 8011af8:	461a      	mov	r2, r3
 8011afa:	4b0e      	ldr	r3, [pc, #56]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011afc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
   can1_ams_cell_temperatures.t3s9 = can1_ams_cell_temperatures_t3s9_encode(ams_cell_temperatures.t3s9);
 8011b00:	463b      	mov	r3, r7
 8011b02:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8011b06:	eeb0 0a47 	vmov.f32	s0, s14
 8011b0a:	eef0 0a67 	vmov.f32	s1, s15
 8011b0e:	f7fb fd0b 	bl	800d528 <can1_ams_cell_temperatures_t3s9_encode>
 8011b12:	4603      	mov	r3, r0
 8011b14:	461a      	mov	r2, r3
 8011b16:	4b07      	ldr	r3, [pc, #28]	; (8011b34 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011b18:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   can1_ams_cell_temperatures.t3s10 = can1_ams_cell_temperatures_t3s10_encode(ams_cell_temperatures.t3s10);
 8011b1c:	463b      	mov	r3, r7
 8011b1e:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8011b22:	eeb0 0a47 	vmov.f32	s0, s14
 8011b26:	eef0 0a67 	vmov.f32	s1, s15
 8011b2a:	f7fb fd55 	bl	800d5d8 <can1_ams_cell_temperatures_t3s10_encode>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	e002      	b.n	8011b38 <can1_ams_cell_temperatures_transmit+0x3c8>
 8011b32:	bf00      	nop
 8011b34:	20001574 	.word	0x20001574
 8011b38:	461a      	mov	r2, r3
 8011b3a:	4be4      	ldr	r3, [pc, #912]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   can1_ams_cell_temperatures.t3s11 = can1_ams_cell_temperatures_t3s11_encode(ams_cell_temperatures.t3s11);
 8011b40:	463b      	mov	r3, r7
 8011b42:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 8011b46:	eeb0 0a47 	vmov.f32	s0, s14
 8011b4a:	eef0 0a67 	vmov.f32	s1, s15
 8011b4e:	f7fb fd9b 	bl	800d688 <can1_ams_cell_temperatures_t3s11_encode>
 8011b52:	4603      	mov	r3, r0
 8011b54:	461a      	mov	r2, r3
 8011b56:	4bdd      	ldr	r3, [pc, #884]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   can1_ams_cell_temperatures.t3s12 = can1_ams_cell_temperatures_t3s12_encode(ams_cell_temperatures.t3s12);
 8011b5c:	463b      	mov	r3, r7
 8011b5e:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
 8011b62:	eeb0 0a47 	vmov.f32	s0, s14
 8011b66:	eef0 0a67 	vmov.f32	s1, s15
 8011b6a:	f7fb fde5 	bl	800d738 <can1_ams_cell_temperatures_t3s12_encode>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	461a      	mov	r2, r3
 8011b72:	4bd6      	ldr	r3, [pc, #856]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
   can1_ams_cell_temperatures.t4s1 = can1_ams_cell_temperatures_t4s1_encode(ams_cell_temperatures.t4s1);
 8011b78:	463b      	mov	r3, r7
 8011b7a:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8011b7e:	eeb0 0a47 	vmov.f32	s0, s14
 8011b82:	eef0 0a67 	vmov.f32	s1, s15
 8011b86:	f7fb fe2f 	bl	800d7e8 <can1_ams_cell_temperatures_t4s1_encode>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	461a      	mov	r2, r3
 8011b8e:	4bcf      	ldr	r3, [pc, #828]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
   can1_ams_cell_temperatures.t4s2 = can1_ams_cell_temperatures_t4s2_encode(ams_cell_temperatures.t4s2);
 8011b94:	463b      	mov	r3, r7
 8011b96:	ed93 7b4a 	vldr	d7, [r3, #296]	; 0x128
 8011b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8011b9e:	eef0 0a67 	vmov.f32	s1, s15
 8011ba2:	f7fb fe79 	bl	800d898 <can1_ams_cell_temperatures_t4s2_encode>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	461a      	mov	r2, r3
 8011baa:	4bc8      	ldr	r3, [pc, #800]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011bac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   can1_ams_cell_temperatures.t4s3 = can1_ams_cell_temperatures_t4s3_encode(ams_cell_temperatures.t4s3);
 8011bb0:	463b      	mov	r3, r7
 8011bb2:	ed93 7b4c 	vldr	d7, [r3, #304]	; 0x130
 8011bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8011bba:	eef0 0a67 	vmov.f32	s1, s15
 8011bbe:	f7fb fec3 	bl	800d948 <can1_ams_cell_temperatures_t4s3_encode>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	4bc1      	ldr	r3, [pc, #772]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011bc8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   can1_ams_cell_temperatures.t4s4 = can1_ams_cell_temperatures_t4s4_encode(ams_cell_temperatures.t4s4);
 8011bcc:	463b      	mov	r3, r7
 8011bce:	ed93 7b4e 	vldr	d7, [r3, #312]	; 0x138
 8011bd2:	eeb0 0a47 	vmov.f32	s0, s14
 8011bd6:	eef0 0a67 	vmov.f32	s1, s15
 8011bda:	f7fb ff0d 	bl	800d9f8 <can1_ams_cell_temperatures_t4s4_encode>
 8011bde:	4603      	mov	r3, r0
 8011be0:	461a      	mov	r2, r3
 8011be2:	4bba      	ldr	r3, [pc, #744]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011be4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   can1_ams_cell_temperatures.t4s5 = can1_ams_cell_temperatures_t4s5_encode(ams_cell_temperatures.t4s5);
 8011be8:	463b      	mov	r3, r7
 8011bea:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8011bee:	eeb0 0a47 	vmov.f32	s0, s14
 8011bf2:	eef0 0a67 	vmov.f32	s1, s15
 8011bf6:	f7fb ff57 	bl	800daa8 <can1_ams_cell_temperatures_t4s5_encode>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	4bb3      	ldr	r3, [pc, #716]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011c00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
   can1_ams_cell_temperatures.t4s6 = can1_ams_cell_temperatures_t4s6_encode(ams_cell_temperatures.t4s6);
 8011c04:	463b      	mov	r3, r7
 8011c06:	ed93 7b52 	vldr	d7, [r3, #328]	; 0x148
 8011c0a:	eeb0 0a47 	vmov.f32	s0, s14
 8011c0e:	eef0 0a67 	vmov.f32	s1, s15
 8011c12:	f7fb ffa1 	bl	800db58 <can1_ams_cell_temperatures_t4s6_encode>
 8011c16:	4603      	mov	r3, r0
 8011c18:	461a      	mov	r2, r3
 8011c1a:	4bac      	ldr	r3, [pc, #688]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011c1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
   can1_ams_cell_temperatures.t4s7 = can1_ams_cell_temperatures_t4s7_encode(ams_cell_temperatures.t4s7);
 8011c20:	463b      	mov	r3, r7
 8011c22:	ed93 7b54 	vldr	d7, [r3, #336]	; 0x150
 8011c26:	eeb0 0a47 	vmov.f32	s0, s14
 8011c2a:	eef0 0a67 	vmov.f32	s1, s15
 8011c2e:	f7fb ffeb 	bl	800dc08 <can1_ams_cell_temperatures_t4s7_encode>
 8011c32:	4603      	mov	r3, r0
 8011c34:	461a      	mov	r2, r3
 8011c36:	4ba5      	ldr	r3, [pc, #660]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011c38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
   can1_ams_cell_temperatures.t4s8 = can1_ams_cell_temperatures_t4s8_encode(ams_cell_temperatures.t4s8);
 8011c3c:	463b      	mov	r3, r7
 8011c3e:	ed93 7b56 	vldr	d7, [r3, #344]	; 0x158
 8011c42:	eeb0 0a47 	vmov.f32	s0, s14
 8011c46:	eef0 0a67 	vmov.f32	s1, s15
 8011c4a:	f7fc f835 	bl	800dcb8 <can1_ams_cell_temperatures_t4s8_encode>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	461a      	mov	r2, r3
 8011c52:	4b9e      	ldr	r3, [pc, #632]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011c54:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
   can1_ams_cell_temperatures.t4s9 = can1_ams_cell_temperatures_t4s9_encode(ams_cell_temperatures.t4s9);
 8011c58:	463b      	mov	r3, r7
 8011c5a:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8011c5e:	eeb0 0a47 	vmov.f32	s0, s14
 8011c62:	eef0 0a67 	vmov.f32	s1, s15
 8011c66:	f7fc f87f 	bl	800dd68 <can1_ams_cell_temperatures_t4s9_encode>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	4b97      	ldr	r3, [pc, #604]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011c70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
   can1_ams_cell_temperatures.t4s10 = can1_ams_cell_temperatures_t4s10_encode(ams_cell_temperatures.t4s10);
 8011c74:	463b      	mov	r3, r7
 8011c76:	ed93 7b5a 	vldr	d7, [r3, #360]	; 0x168
 8011c7a:	eeb0 0a47 	vmov.f32	s0, s14
 8011c7e:	eef0 0a67 	vmov.f32	s1, s15
 8011c82:	f7fc f8c9 	bl	800de18 <can1_ams_cell_temperatures_t4s10_encode>
 8011c86:	4603      	mov	r3, r0
 8011c88:	461a      	mov	r2, r3
 8011c8a:	4b90      	ldr	r3, [pc, #576]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
   can1_ams_cell_temperatures.t4s11 = can1_ams_cell_temperatures_t4s11_encode(ams_cell_temperatures.t4s11);
 8011c90:	463b      	mov	r3, r7
 8011c92:	ed93 7b5c 	vldr	d7, [r3, #368]	; 0x170
 8011c96:	eeb0 0a47 	vmov.f32	s0, s14
 8011c9a:	eef0 0a67 	vmov.f32	s1, s15
 8011c9e:	f7fc f913 	bl	800dec8 <can1_ams_cell_temperatures_t4s11_encode>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	4b89      	ldr	r3, [pc, #548]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011ca8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
   can1_ams_cell_temperatures.t4s12 = can1_ams_cell_temperatures_t4s12_encode(ams_cell_temperatures.t4s12);
 8011cac:	463b      	mov	r3, r7
 8011cae:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8011cb2:	eeb0 0a47 	vmov.f32	s0, s14
 8011cb6:	eef0 0a67 	vmov.f32	s1, s15
 8011cba:	f7fc f95d 	bl	800df78 <can1_ams_cell_temperatures_t4s12_encode>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	461a      	mov	r2, r3
 8011cc2:	4b82      	ldr	r3, [pc, #520]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011cc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
   can1_ams_cell_temperatures.t5s1 = can1_ams_cell_temperatures_t5s1_encode(ams_cell_temperatures.t5s1);
 8011cc8:	463b      	mov	r3, r7
 8011cca:	ed93 7b60 	vldr	d7, [r3, #384]	; 0x180
 8011cce:	eeb0 0a47 	vmov.f32	s0, s14
 8011cd2:	eef0 0a67 	vmov.f32	s1, s15
 8011cd6:	f7fc f9a7 	bl	800e028 <can1_ams_cell_temperatures_t5s1_encode>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	461a      	mov	r2, r3
 8011cde:	4b7b      	ldr	r3, [pc, #492]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011ce0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
   can1_ams_cell_temperatures.t5s2 = can1_ams_cell_temperatures_t5s2_encode(ams_cell_temperatures.t5s2);
 8011ce4:	463b      	mov	r3, r7
 8011ce6:	ed93 7b62 	vldr	d7, [r3, #392]	; 0x188
 8011cea:	eeb0 0a47 	vmov.f32	s0, s14
 8011cee:	eef0 0a67 	vmov.f32	s1, s15
 8011cf2:	f7fc f9f1 	bl	800e0d8 <can1_ams_cell_temperatures_t5s2_encode>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	461a      	mov	r2, r3
 8011cfa:	4b74      	ldr	r3, [pc, #464]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011cfc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
   can1_ams_cell_temperatures.t5s3 = can1_ams_cell_temperatures_t5s3_encode(ams_cell_temperatures.t5s3);
 8011d00:	463b      	mov	r3, r7
 8011d02:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8011d06:	eeb0 0a47 	vmov.f32	s0, s14
 8011d0a:	eef0 0a67 	vmov.f32	s1, s15
 8011d0e:	f7fc fa3b 	bl	800e188 <can1_ams_cell_temperatures_t5s3_encode>
 8011d12:	4603      	mov	r3, r0
 8011d14:	461a      	mov	r2, r3
 8011d16:	4b6d      	ldr	r3, [pc, #436]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011d18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
   can1_ams_cell_temperatures.t5s4 = can1_ams_cell_temperatures_t5s4_encode(ams_cell_temperatures.t5s4);
 8011d1c:	463b      	mov	r3, r7
 8011d1e:	ed93 7b66 	vldr	d7, [r3, #408]	; 0x198
 8011d22:	eeb0 0a47 	vmov.f32	s0, s14
 8011d26:	eef0 0a67 	vmov.f32	s1, s15
 8011d2a:	f7fc fa85 	bl	800e238 <can1_ams_cell_temperatures_t5s4_encode>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	461a      	mov	r2, r3
 8011d32:	4b66      	ldr	r3, [pc, #408]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011d34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
   can1_ams_cell_temperatures.t5s5 = can1_ams_cell_temperatures_t5s5_encode(ams_cell_temperatures.t5s5);
 8011d38:	463b      	mov	r3, r7
 8011d3a:	ed93 7b68 	vldr	d7, [r3, #416]	; 0x1a0
 8011d3e:	eeb0 0a47 	vmov.f32	s0, s14
 8011d42:	eef0 0a67 	vmov.f32	s1, s15
 8011d46:	f7fc facf 	bl	800e2e8 <can1_ams_cell_temperatures_t5s5_encode>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	4b5f      	ldr	r3, [pc, #380]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011d50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
   can1_ams_cell_temperatures.t5s6 = can1_ams_cell_temperatures_t5s6_encode(ams_cell_temperatures.t5s6);
 8011d54:	463b      	mov	r3, r7
 8011d56:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 8011d5a:	eeb0 0a47 	vmov.f32	s0, s14
 8011d5e:	eef0 0a67 	vmov.f32	s1, s15
 8011d62:	f7fc fb19 	bl	800e398 <can1_ams_cell_temperatures_t5s6_encode>
 8011d66:	4603      	mov	r3, r0
 8011d68:	461a      	mov	r2, r3
 8011d6a:	4b58      	ldr	r3, [pc, #352]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011d6c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
   can1_ams_cell_temperatures.t5s7 = can1_ams_cell_temperatures_t5s7_encode(ams_cell_temperatures.t5s7);
 8011d70:	463b      	mov	r3, r7
 8011d72:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8011d76:	eeb0 0a47 	vmov.f32	s0, s14
 8011d7a:	eef0 0a67 	vmov.f32	s1, s15
 8011d7e:	f7fc fb63 	bl	800e448 <can1_ams_cell_temperatures_t5s7_encode>
 8011d82:	4603      	mov	r3, r0
 8011d84:	461a      	mov	r2, r3
 8011d86:	4b51      	ldr	r3, [pc, #324]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011d88:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
   can1_ams_cell_temperatures.t5s8 = can1_ams_cell_temperatures_t5s8_encode(ams_cell_temperatures.t5s8);
 8011d8c:	463b      	mov	r3, r7
 8011d8e:	ed93 7b6e 	vldr	d7, [r3, #440]	; 0x1b8
 8011d92:	eeb0 0a47 	vmov.f32	s0, s14
 8011d96:	eef0 0a67 	vmov.f32	s1, s15
 8011d9a:	f7fc fbad 	bl	800e4f8 <can1_ams_cell_temperatures_t5s8_encode>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	461a      	mov	r2, r3
 8011da2:	4b4a      	ldr	r3, [pc, #296]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011da4:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
   can1_ams_cell_temperatures.t5s9 = can1_ams_cell_temperatures_t5s9_encode(ams_cell_temperatures.t5s9);
 8011da8:	463b      	mov	r3, r7
 8011daa:	ed93 7b70 	vldr	d7, [r3, #448]	; 0x1c0
 8011dae:	eeb0 0a47 	vmov.f32	s0, s14
 8011db2:	eef0 0a67 	vmov.f32	s1, s15
 8011db6:	f7fc fbf7 	bl	800e5a8 <can1_ams_cell_temperatures_t5s9_encode>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	461a      	mov	r2, r3
 8011dbe:	4b43      	ldr	r3, [pc, #268]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011dc0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
   can1_ams_cell_temperatures.t5s10 = can1_ams_cell_temperatures_t5s10_encode(ams_cell_temperatures.t5s10);
 8011dc4:	463b      	mov	r3, r7
 8011dc6:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 8011dca:	eeb0 0a47 	vmov.f32	s0, s14
 8011dce:	eef0 0a67 	vmov.f32	s1, s15
 8011dd2:	f7fc fc41 	bl	800e658 <can1_ams_cell_temperatures_t5s10_encode>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	461a      	mov	r2, r3
 8011dda:	4b3c      	ldr	r3, [pc, #240]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011ddc:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
   can1_ams_cell_temperatures.t5s11 = can1_ams_cell_temperatures_t5s11_encode(ams_cell_temperatures.t5s11);
 8011de0:	463b      	mov	r3, r7
 8011de2:	ed93 7b74 	vldr	d7, [r3, #464]	; 0x1d0
 8011de6:	eeb0 0a47 	vmov.f32	s0, s14
 8011dea:	eef0 0a67 	vmov.f32	s1, s15
 8011dee:	f7fc fc8b 	bl	800e708 <can1_ams_cell_temperatures_t5s11_encode>
 8011df2:	4603      	mov	r3, r0
 8011df4:	461a      	mov	r2, r3
 8011df6:	4b35      	ldr	r3, [pc, #212]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011df8:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
   can1_ams_cell_temperatures.t5s12 = can1_ams_cell_temperatures_t5s12_encode(ams_cell_temperatures.t5s12);
 8011dfc:	463b      	mov	r3, r7
 8011dfe:	ed93 7b76 	vldr	d7, [r3, #472]	; 0x1d8
 8011e02:	eeb0 0a47 	vmov.f32	s0, s14
 8011e06:	eef0 0a67 	vmov.f32	s1, s15
 8011e0a:	f7fc fcd5 	bl	800e7b8 <can1_ams_cell_temperatures_t5s12_encode>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	461a      	mov	r2, r3
 8011e12:	4b2e      	ldr	r3, [pc, #184]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011e14:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78

       can1_ams_cell_temperatures.temperature_multiplexor = 0;
 8011e18:	4b2c      	ldr	r3, [pc, #176]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011e22:	2208      	movs	r2, #8
 8011e24:	4929      	ldr	r1, [pc, #164]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7f7 fd2c 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011e2c:	bf00      	nop
 8011e2e:	4b28      	ldr	r3, [pc, #160]	; (8011ed0 <can1_ams_cell_temperatures_transmit+0x760>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	4618      	mov	r0, r3
 8011e34:	f013 fd79 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d0f7      	beq.n	8011e2e <can1_ams_cell_temperatures_transmit+0x6be>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011e3e:	4b24      	ldr	r3, [pc, #144]	; (8011ed0 <can1_ams_cell_temperatures_transmit+0x760>)
 8011e40:	6818      	ldr	r0, [r3, #0]
 8011e42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011e46:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011e4a:	4b22      	ldr	r3, [pc, #136]	; (8011ed4 <can1_ams_cell_temperatures_transmit+0x764>)
 8011e4c:	f013 fc92 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011e50:	4603      	mov	r3, r0
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d001      	beq.n	8011e5a <can1_ams_cell_temperatures_transmit+0x6ea>
           Error_Handler();
 8011e56:	f005 fbfd 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 1;
 8011e5a:	4b1c      	ldr	r3, [pc, #112]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011e5c:	2201      	movs	r2, #1
 8011e5e:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011e64:	2208      	movs	r2, #8
 8011e66:	4919      	ldr	r1, [pc, #100]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f7f7 fd0b 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011e6e:	bf00      	nop
 8011e70:	4b17      	ldr	r3, [pc, #92]	; (8011ed0 <can1_ams_cell_temperatures_transmit+0x760>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	4618      	mov	r0, r3
 8011e76:	f013 fd58 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d0f7      	beq.n	8011e70 <can1_ams_cell_temperatures_transmit+0x700>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011e80:	4b13      	ldr	r3, [pc, #76]	; (8011ed0 <can1_ams_cell_temperatures_transmit+0x760>)
 8011e82:	6818      	ldr	r0, [r3, #0]
 8011e84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011e88:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011e8c:	4b11      	ldr	r3, [pc, #68]	; (8011ed4 <can1_ams_cell_temperatures_transmit+0x764>)
 8011e8e:	f013 fc71 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011e92:	4603      	mov	r3, r0
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d001      	beq.n	8011e9c <can1_ams_cell_temperatures_transmit+0x72c>
           Error_Handler();
 8011e98:	f005 fbdc 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 2;
 8011e9c:	4b0b      	ldr	r3, [pc, #44]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011e9e:	2202      	movs	r2, #2
 8011ea0:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011ea6:	2208      	movs	r2, #8
 8011ea8:	4908      	ldr	r1, [pc, #32]	; (8011ecc <can1_ams_cell_temperatures_transmit+0x75c>)
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f7f7 fcea 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011eb0:	bf00      	nop
 8011eb2:	4b07      	ldr	r3, [pc, #28]	; (8011ed0 <can1_ams_cell_temperatures_transmit+0x760>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f013 fd37 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d0f7      	beq.n	8011eb2 <can1_ams_cell_temperatures_transmit+0x742>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011ec2:	4b03      	ldr	r3, [pc, #12]	; (8011ed0 <can1_ams_cell_temperatures_transmit+0x760>)
 8011ec4:	6818      	ldr	r0, [r3, #0]
 8011ec6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011eca:	e005      	b.n	8011ed8 <can1_ams_cell_temperatures_transmit+0x768>
 8011ecc:	20001574 	.word	0x20001574
 8011ed0:	20001630 	.word	0x20001630
 8011ed4:	200014cc 	.word	0x200014cc
 8011ed8:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011edc:	4b9a      	ldr	r3, [pc, #616]	; (8012148 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011ede:	f013 fc49 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d001      	beq.n	8011eec <can1_ams_cell_temperatures_transmit+0x77c>
           Error_Handler();
 8011ee8:	f005 fbb4 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 3;
 8011eec:	4b97      	ldr	r3, [pc, #604]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011eee:	2203      	movs	r2, #3
 8011ef0:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011ef6:	2208      	movs	r2, #8
 8011ef8:	4994      	ldr	r1, [pc, #592]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7f7 fcc2 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011f00:	bf00      	nop
 8011f02:	4b93      	ldr	r3, [pc, #588]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	4618      	mov	r0, r3
 8011f08:	f013 fd0f 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d0f7      	beq.n	8011f02 <can1_ams_cell_temperatures_transmit+0x792>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011f12:	4b8f      	ldr	r3, [pc, #572]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011f14:	6818      	ldr	r0, [r3, #0]
 8011f16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011f1a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011f1e:	4b8a      	ldr	r3, [pc, #552]	; (8012148 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011f20:	f013 fc28 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011f24:	4603      	mov	r3, r0
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d001      	beq.n	8011f2e <can1_ams_cell_temperatures_transmit+0x7be>
           Error_Handler();
 8011f2a:	f005 fb93 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 4;
 8011f2e:	4b87      	ldr	r3, [pc, #540]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011f30:	2204      	movs	r2, #4
 8011f32:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011f38:	2208      	movs	r2, #8
 8011f3a:	4984      	ldr	r1, [pc, #528]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f7f7 fca1 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011f42:	bf00      	nop
 8011f44:	4b82      	ldr	r3, [pc, #520]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f013 fcee 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d0f7      	beq.n	8011f44 <can1_ams_cell_temperatures_transmit+0x7d4>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011f54:	4b7e      	ldr	r3, [pc, #504]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011f56:	6818      	ldr	r0, [r3, #0]
 8011f58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011f5c:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011f60:	4b79      	ldr	r3, [pc, #484]	; (8012148 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011f62:	f013 fc07 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011f66:	4603      	mov	r3, r0
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d001      	beq.n	8011f70 <can1_ams_cell_temperatures_transmit+0x800>
           Error_Handler();
 8011f6c:	f005 fb72 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 5;
 8011f70:	4b76      	ldr	r3, [pc, #472]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011f72:	2205      	movs	r2, #5
 8011f74:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011f7a:	2208      	movs	r2, #8
 8011f7c:	4973      	ldr	r1, [pc, #460]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7f7 fc80 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011f84:	bf00      	nop
 8011f86:	4b72      	ldr	r3, [pc, #456]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f013 fccd 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011f90:	4603      	mov	r3, r0
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d0f7      	beq.n	8011f86 <can1_ams_cell_temperatures_transmit+0x816>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011f96:	4b6e      	ldr	r3, [pc, #440]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011f98:	6818      	ldr	r0, [r3, #0]
 8011f9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011f9e:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011fa2:	4b69      	ldr	r3, [pc, #420]	; (8012148 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011fa4:	f013 fbe6 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d001      	beq.n	8011fb2 <can1_ams_cell_temperatures_transmit+0x842>
           Error_Handler();
 8011fae:	f005 fb51 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 6;
 8011fb2:	4b66      	ldr	r3, [pc, #408]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011fb4:	2206      	movs	r2, #6
 8011fb6:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011fbc:	2208      	movs	r2, #8
 8011fbe:	4963      	ldr	r1, [pc, #396]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f7f7 fc5f 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011fc6:	bf00      	nop
 8011fc8:	4b61      	ldr	r3, [pc, #388]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f013 fcac 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d0f7      	beq.n	8011fc8 <can1_ams_cell_temperatures_transmit+0x858>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011fd8:	4b5d      	ldr	r3, [pc, #372]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011fda:	6818      	ldr	r0, [r3, #0]
 8011fdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011fe0:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011fe4:	4b58      	ldr	r3, [pc, #352]	; (8012148 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011fe6:	f013 fbc5 	bl	8025774 <HAL_CAN_AddTxMessage>
 8011fea:	4603      	mov	r3, r0
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d001      	beq.n	8011ff4 <can1_ams_cell_temperatures_transmit+0x884>
           Error_Handler();
 8011ff0:	f005 fb30 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 7;
 8011ff4:	4b55      	ldr	r3, [pc, #340]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011ff6:	2207      	movs	r2, #7
 8011ff8:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011ffe:	2208      	movs	r2, #8
 8012000:	4952      	ldr	r1, [pc, #328]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8012002:	4618      	mov	r0, r3
 8012004:	f7f7 fc3e 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8012008:	bf00      	nop
 801200a:	4b51      	ldr	r3, [pc, #324]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	4618      	mov	r0, r3
 8012010:	f013 fc8b 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8012014:	4603      	mov	r3, r0
 8012016:	2b00      	cmp	r3, #0
 8012018:	d0f7      	beq.n	801200a <can1_ams_cell_temperatures_transmit+0x89a>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801201a:	4b4d      	ldr	r3, [pc, #308]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 801201c:	6818      	ldr	r0, [r3, #0]
 801201e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8012022:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8012026:	4b48      	ldr	r3, [pc, #288]	; (8012148 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8012028:	f013 fba4 	bl	8025774 <HAL_CAN_AddTxMessage>
 801202c:	4603      	mov	r3, r0
 801202e:	2b00      	cmp	r3, #0
 8012030:	d001      	beq.n	8012036 <can1_ams_cell_temperatures_transmit+0x8c6>
           Error_Handler();
 8012032:	f005 fb0f 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 8;
 8012036:	4b45      	ldr	r3, [pc, #276]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8012038:	2208      	movs	r2, #8
 801203a:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 801203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8012040:	2208      	movs	r2, #8
 8012042:	4942      	ldr	r1, [pc, #264]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8012044:	4618      	mov	r0, r3
 8012046:	f7f7 fc1d 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801204a:	bf00      	nop
 801204c:	4b40      	ldr	r3, [pc, #256]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	4618      	mov	r0, r3
 8012052:	f013 fc6a 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8012056:	4603      	mov	r3, r0
 8012058:	2b00      	cmp	r3, #0
 801205a:	d0f7      	beq.n	801204c <can1_ams_cell_temperatures_transmit+0x8dc>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801205c:	4b3c      	ldr	r3, [pc, #240]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 801205e:	6818      	ldr	r0, [r3, #0]
 8012060:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8012064:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8012068:	4b37      	ldr	r3, [pc, #220]	; (8012148 <can1_ams_cell_temperatures_transmit+0x9d8>)
 801206a:	f013 fb83 	bl	8025774 <HAL_CAN_AddTxMessage>
 801206e:	4603      	mov	r3, r0
 8012070:	2b00      	cmp	r3, #0
 8012072:	d001      	beq.n	8012078 <can1_ams_cell_temperatures_transmit+0x908>
           Error_Handler();
 8012074:	f005 faee 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 9;
 8012078:	4b34      	ldr	r3, [pc, #208]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 801207a:	2209      	movs	r2, #9
 801207c:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 801207e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8012082:	2208      	movs	r2, #8
 8012084:	4931      	ldr	r1, [pc, #196]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8012086:	4618      	mov	r0, r3
 8012088:	f7f7 fbfc 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801208c:	bf00      	nop
 801208e:	4b30      	ldr	r3, [pc, #192]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	4618      	mov	r0, r3
 8012094:	f013 fc49 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8012098:	4603      	mov	r3, r0
 801209a:	2b00      	cmp	r3, #0
 801209c:	d0f7      	beq.n	801208e <can1_ams_cell_temperatures_transmit+0x91e>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801209e:	4b2c      	ldr	r3, [pc, #176]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 80120a0:	6818      	ldr	r0, [r3, #0]
 80120a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80120a6:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 80120aa:	4b27      	ldr	r3, [pc, #156]	; (8012148 <can1_ams_cell_temperatures_transmit+0x9d8>)
 80120ac:	f013 fb62 	bl	8025774 <HAL_CAN_AddTxMessage>
 80120b0:	4603      	mov	r3, r0
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d001      	beq.n	80120ba <can1_ams_cell_temperatures_transmit+0x94a>
           Error_Handler();
 80120b6:	f005 facd 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 10;
 80120ba:	4b24      	ldr	r3, [pc, #144]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 80120bc:	220a      	movs	r2, #10
 80120be:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 80120c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80120c4:	2208      	movs	r2, #8
 80120c6:	4921      	ldr	r1, [pc, #132]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7f7 fbdb 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80120ce:	bf00      	nop
 80120d0:	4b1f      	ldr	r3, [pc, #124]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	4618      	mov	r0, r3
 80120d6:	f013 fc28 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 80120da:	4603      	mov	r3, r0
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d0f7      	beq.n	80120d0 <can1_ams_cell_temperatures_transmit+0x960>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80120e0:	4b1b      	ldr	r3, [pc, #108]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 80120e2:	6818      	ldr	r0, [r3, #0]
 80120e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80120e8:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 80120ec:	4b16      	ldr	r3, [pc, #88]	; (8012148 <can1_ams_cell_temperatures_transmit+0x9d8>)
 80120ee:	f013 fb41 	bl	8025774 <HAL_CAN_AddTxMessage>
 80120f2:	4603      	mov	r3, r0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d001      	beq.n	80120fc <can1_ams_cell_temperatures_transmit+0x98c>
           Error_Handler();
 80120f8:	f005 faac 	bl	8017654 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 11;
 80120fc:	4b13      	ldr	r3, [pc, #76]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 80120fe:	220b      	movs	r2, #11
 8012100:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8012102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8012106:	2208      	movs	r2, #8
 8012108:	4910      	ldr	r1, [pc, #64]	; (801214c <can1_ams_cell_temperatures_transmit+0x9dc>)
 801210a:	4618      	mov	r0, r3
 801210c:	f7f7 fbba 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8012110:	bf00      	nop
 8012112:	4b0f      	ldr	r3, [pc, #60]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	4618      	mov	r0, r3
 8012118:	f013 fc07 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 801211c:	4603      	mov	r3, r0
 801211e:	2b00      	cmp	r3, #0
 8012120:	d0f7      	beq.n	8012112 <can1_ams_cell_temperatures_transmit+0x9a2>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8012122:	4b0b      	ldr	r3, [pc, #44]	; (8012150 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8012124:	6818      	ldr	r0, [r3, #0]
 8012126:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801212a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 801212e:	4b06      	ldr	r3, [pc, #24]	; (8012148 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8012130:	f013 fb20 	bl	8025774 <HAL_CAN_AddTxMessage>
 8012134:	4603      	mov	r3, r0
 8012136:	2b00      	cmp	r3, #0
 8012138:	d001      	beq.n	801213e <can1_ams_cell_temperatures_transmit+0x9ce>
           Error_Handler();
 801213a:	f005 fa8b 	bl	8017654 <Error_Handler>
       }
}
 801213e:	bf00      	nop
 8012140:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	200014cc 	.word	0x200014cc
 801214c:	20001574 	.word	0x20001574
 8012150:	20001630 	.word	0x20001630

08012154 <can2_ivt_msg_result_i_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_transmit() {
 8012154:	b580      	push	{r7, lr}
 8012156:	b08a      	sub	sp, #40	; 0x28
 8012158:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 801215a:	f107 0308 	add.w	r3, r7, #8
 801215e:	2200      	movs	r2, #0
 8012160:	601a      	str	r2, [r3, #0]
 8012162:	605a      	str	r2, [r3, #4]
 8012164:	609a      	str	r2, [r3, #8]
 8012166:	60da      	str	r2, [r3, #12]
 8012168:	611a      	str	r2, [r3, #16]
 801216a:	615a      	str	r2, [r3, #20]
 801216c:	f240 5321 	movw	r3, #1313	; 0x521
 8012170:	60bb      	str	r3, [r7, #8]
 8012172:	2306      	movs	r3, #6
 8012174:	61bb      	str	r3, [r7, #24]
       .StdId = 1313,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ivt_msg_result_i_t ivt_msg_result_i;
   can2_ivt_msg_result_i_tx_callback(&ivt_msg_result_i);
 8012176:	463b      	mov	r3, r7
 8012178:	4618      	mov	r0, r3
 801217a:	f003 fdff 	bl	8015d7c <can2_ivt_msg_result_i_tx_callback>

   can2_ivt_msg_result_i.i_ts = can2_ivt_msg_result_i_i_ts_encode(ivt_msg_result_i.i_ts);
 801217e:	ed97 7b00 	vldr	d7, [r7]
 8012182:	eeb0 0a47 	vmov.f32	s0, s14
 8012186:	eef0 0a67 	vmov.f32	s1, s15
 801218a:	f7fc fec1 	bl	800ef10 <can2_ivt_msg_result_i_i_ts_encode>
 801218e:	4602      	mov	r2, r0
 8012190:	460b      	mov	r3, r1
 8012192:	4912      	ldr	r1, [pc, #72]	; (80121dc <can2_ivt_msg_result_i_transmit+0x88>)
 8012194:	e9c1 2300 	strd	r2, r3, [r1]

   can2_ivt_msg_result_i_pack(tx_data, &can2_ivt_msg_result_i, 6);
 8012198:	f107 0320 	add.w	r3, r7, #32
 801219c:	2206      	movs	r2, #6
 801219e:	490f      	ldr	r1, [pc, #60]	; (80121dc <can2_ivt_msg_result_i_transmit+0x88>)
 80121a0:	4618      	mov	r0, r3
 80121a2:	f7fc fda5 	bl	800ecf0 <can2_ivt_msg_result_i_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 80121a6:	bf00      	nop
 80121a8:	4b0d      	ldr	r3, [pc, #52]	; (80121e0 <can2_ivt_msg_result_i_transmit+0x8c>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	4618      	mov	r0, r3
 80121ae:	f013 fbbc 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 80121b2:	4603      	mov	r3, r0
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d0f7      	beq.n	80121a8 <can2_ivt_msg_result_i_transmit+0x54>
   if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80121b8:	4b09      	ldr	r3, [pc, #36]	; (80121e0 <can2_ivt_msg_result_i_transmit+0x8c>)
 80121ba:	6818      	ldr	r0, [r3, #0]
 80121bc:	f107 0220 	add.w	r2, r7, #32
 80121c0:	f107 0108 	add.w	r1, r7, #8
 80121c4:	4b07      	ldr	r3, [pc, #28]	; (80121e4 <can2_ivt_msg_result_i_transmit+0x90>)
 80121c6:	f013 fad5 	bl	8025774 <HAL_CAN_AddTxMessage>
 80121ca:	4603      	mov	r3, r0
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d001      	beq.n	80121d4 <can2_ivt_msg_result_i_transmit+0x80>
       Error_Handler();
 80121d0:	f005 fa40 	bl	8017654 <Error_Handler>
   }
}
 80121d4:	bf00      	nop
 80121d6:	3728      	adds	r7, #40	; 0x28
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}
 80121dc:	20001600 	.word	0x20001600
 80121e0:	20001634 	.word	0x20001634
 80121e4:	200014cc 	.word	0x200014cc

080121e8 <can2_ivt_msg_result_u1_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_transmit() {
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b08a      	sub	sp, #40	; 0x28
 80121ec:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 80121ee:	f107 0308 	add.w	r3, r7, #8
 80121f2:	2200      	movs	r2, #0
 80121f4:	601a      	str	r2, [r3, #0]
 80121f6:	605a      	str	r2, [r3, #4]
 80121f8:	609a      	str	r2, [r3, #8]
 80121fa:	60da      	str	r2, [r3, #12]
 80121fc:	611a      	str	r2, [r3, #16]
 80121fe:	615a      	str	r2, [r3, #20]
 8012200:	f240 5322 	movw	r3, #1314	; 0x522
 8012204:	60bb      	str	r3, [r7, #8]
 8012206:	2306      	movs	r3, #6
 8012208:	61bb      	str	r3, [r7, #24]
       .StdId = 1314,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ivt_msg_result_u1_t ivt_msg_result_u1;
   can2_ivt_msg_result_u1_tx_callback(&ivt_msg_result_u1);
 801220a:	463b      	mov	r3, r7
 801220c:	4618      	mov	r0, r3
 801220e:	f003 fdc9 	bl	8015da4 <can2_ivt_msg_result_u1_tx_callback>

   can2_ivt_msg_result_u1.u_cells = can2_ivt_msg_result_u1_u_cells_encode(ivt_msg_result_u1.u_cells);
 8012212:	ed97 7b00 	vldr	d7, [r7]
 8012216:	eeb0 0a47 	vmov.f32	s0, s14
 801221a:	eef0 0a67 	vmov.f32	s1, s15
 801221e:	f7fc ffc7 	bl	800f1b0 <can2_ivt_msg_result_u1_u_cells_encode>
 8012222:	4602      	mov	r2, r0
 8012224:	460b      	mov	r3, r1
 8012226:	4912      	ldr	r1, [pc, #72]	; (8012270 <can2_ivt_msg_result_u1_transmit+0x88>)
 8012228:	e9c1 2300 	strd	r2, r3, [r1]

   can2_ivt_msg_result_u1_pack(tx_data, &can2_ivt_msg_result_u1, 6);
 801222c:	f107 0320 	add.w	r3, r7, #32
 8012230:	2206      	movs	r2, #6
 8012232:	490f      	ldr	r1, [pc, #60]	; (8012270 <can2_ivt_msg_result_u1_transmit+0x88>)
 8012234:	4618      	mov	r0, r3
 8012236:	f7fc feab 	bl	800ef90 <can2_ivt_msg_result_u1_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 801223a:	bf00      	nop
 801223c:	4b0d      	ldr	r3, [pc, #52]	; (8012274 <can2_ivt_msg_result_u1_transmit+0x8c>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	4618      	mov	r0, r3
 8012242:	f013 fb72 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8012246:	4603      	mov	r3, r0
 8012248:	2b00      	cmp	r3, #0
 801224a:	d0f7      	beq.n	801223c <can2_ivt_msg_result_u1_transmit+0x54>
   if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801224c:	4b09      	ldr	r3, [pc, #36]	; (8012274 <can2_ivt_msg_result_u1_transmit+0x8c>)
 801224e:	6818      	ldr	r0, [r3, #0]
 8012250:	f107 0220 	add.w	r2, r7, #32
 8012254:	f107 0108 	add.w	r1, r7, #8
 8012258:	4b07      	ldr	r3, [pc, #28]	; (8012278 <can2_ivt_msg_result_u1_transmit+0x90>)
 801225a:	f013 fa8b 	bl	8025774 <HAL_CAN_AddTxMessage>
 801225e:	4603      	mov	r3, r0
 8012260:	2b00      	cmp	r3, #0
 8012262:	d001      	beq.n	8012268 <can2_ivt_msg_result_u1_transmit+0x80>
       Error_Handler();
 8012264:	f005 f9f6 	bl	8017654 <Error_Handler>
   }
}
 8012268:	bf00      	nop
 801226a:	3728      	adds	r7, #40	; 0x28
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}
 8012270:	20001608 	.word	0x20001608
 8012274:	20001634 	.word	0x20001634
 8012278:	200014cc 	.word	0x200014cc

0801227c <can2_ivt_msg_result_u3_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_transmit() {
 801227c:	b580      	push	{r7, lr}
 801227e:	b08a      	sub	sp, #40	; 0x28
 8012280:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 8012282:	f107 0308 	add.w	r3, r7, #8
 8012286:	2200      	movs	r2, #0
 8012288:	601a      	str	r2, [r3, #0]
 801228a:	605a      	str	r2, [r3, #4]
 801228c:	609a      	str	r2, [r3, #8]
 801228e:	60da      	str	r2, [r3, #12]
 8012290:	611a      	str	r2, [r3, #16]
 8012292:	615a      	str	r2, [r3, #20]
 8012294:	f240 5324 	movw	r3, #1316	; 0x524
 8012298:	60bb      	str	r3, [r7, #8]
 801229a:	2306      	movs	r3, #6
 801229c:	61bb      	str	r3, [r7, #24]
       .StdId = 1316,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ivt_msg_result_u3_t ivt_msg_result_u3;
   can2_ivt_msg_result_u3_tx_callback(&ivt_msg_result_u3);
 801229e:	463b      	mov	r3, r7
 80122a0:	4618      	mov	r0, r3
 80122a2:	f003 fd93 	bl	8015dcc <can2_ivt_msg_result_u3_tx_callback>

   can2_ivt_msg_result_u3.u_vehicle = can2_ivt_msg_result_u3_u_vehicle_encode(ivt_msg_result_u3.u_vehicle);
 80122a6:	ed97 7b00 	vldr	d7, [r7]
 80122aa:	eeb0 0a47 	vmov.f32	s0, s14
 80122ae:	eef0 0a67 	vmov.f32	s1, s15
 80122b2:	f7fd f8cd 	bl	800f450 <can2_ivt_msg_result_u3_u_vehicle_encode>
 80122b6:	4602      	mov	r2, r0
 80122b8:	460b      	mov	r3, r1
 80122ba:	4912      	ldr	r1, [pc, #72]	; (8012304 <can2_ivt_msg_result_u3_transmit+0x88>)
 80122bc:	e9c1 2300 	strd	r2, r3, [r1]

   can2_ivt_msg_result_u3_pack(tx_data, &can2_ivt_msg_result_u3, 6);
 80122c0:	f107 0320 	add.w	r3, r7, #32
 80122c4:	2206      	movs	r2, #6
 80122c6:	490f      	ldr	r1, [pc, #60]	; (8012304 <can2_ivt_msg_result_u3_transmit+0x88>)
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7fc ffb1 	bl	800f230 <can2_ivt_msg_result_u3_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 80122ce:	bf00      	nop
 80122d0:	4b0d      	ldr	r3, [pc, #52]	; (8012308 <can2_ivt_msg_result_u3_transmit+0x8c>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	4618      	mov	r0, r3
 80122d6:	f013 fb28 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 80122da:	4603      	mov	r3, r0
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d0f7      	beq.n	80122d0 <can2_ivt_msg_result_u3_transmit+0x54>
   if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80122e0:	4b09      	ldr	r3, [pc, #36]	; (8012308 <can2_ivt_msg_result_u3_transmit+0x8c>)
 80122e2:	6818      	ldr	r0, [r3, #0]
 80122e4:	f107 0220 	add.w	r2, r7, #32
 80122e8:	f107 0108 	add.w	r1, r7, #8
 80122ec:	4b07      	ldr	r3, [pc, #28]	; (801230c <can2_ivt_msg_result_u3_transmit+0x90>)
 80122ee:	f013 fa41 	bl	8025774 <HAL_CAN_AddTxMessage>
 80122f2:	4603      	mov	r3, r0
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d001      	beq.n	80122fc <can2_ivt_msg_result_u3_transmit+0x80>
       Error_Handler();
 80122f8:	f005 f9ac 	bl	8017654 <Error_Handler>
   }
}
 80122fc:	bf00      	nop
 80122fe:	3728      	adds	r7, #40	; 0x28
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	20001610 	.word	0x20001610
 8012308:	20001634 	.word	0x20001634
 801230c:	200014cc 	.word	0x200014cc

08012310 <can2_charger_config_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can2_charger_config_transmit() {
 8012310:	b580      	push	{r7, lr}
 8012312:	b094      	sub	sp, #80	; 0x50
 8012314:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 8012316:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801231a:	2200      	movs	r2, #0
 801231c:	601a      	str	r2, [r3, #0]
 801231e:	605a      	str	r2, [r3, #4]
 8012320:	609a      	str	r2, [r3, #8]
 8012322:	60da      	str	r2, [r3, #12]
 8012324:	611a      	str	r2, [r3, #16]
 8012326:	615a      	str	r2, [r3, #20]
 8012328:	f44f 731c 	mov.w	r3, #624	; 0x270
 801232c:	633b      	str	r3, [r7, #48]	; 0x30
 801232e:	2304      	movs	r3, #4
 8012330:	643b      	str	r3, [r7, #64]	; 0x40
       .StdId = 624,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   charger_config_t charger_config;
   can2_charger_config_tx_callback(&charger_config);
 8012332:	463b      	mov	r3, r7
 8012334:	4618      	mov	r0, r3
 8012336:	f003 fbdd 	bl	8015af4 <can2_charger_config_tx_callback>

   can2_charger_config.set_mux = can2_charger_config_set_mux_encode(charger_config.set_mux);
 801233a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801233e:	4618      	mov	r0, r3
 8012340:	f7ee f8d2 	bl	80004e8 <__aeabi_ui2d>
 8012344:	4602      	mov	r2, r0
 8012346:	460b      	mov	r3, r1
 8012348:	ec43 2b10 	vmov	d0, r2, r3
 801234c:	f7fd fa26 	bl	800f79c <can2_charger_config_set_mux_encode>
 8012350:	4603      	mov	r3, r0
 8012352:	461a      	mov	r2, r3
 8012354:	4b64      	ldr	r3, [pc, #400]	; (80124e8 <can2_charger_config_transmit+0x1d8>)
 8012356:	701a      	strb	r2, [r3, #0]
   can2_charger_config.msg_set_voltage_limit = can2_charger_config_msg_set_voltage_limit_encode(charger_config.msg_set_voltage_limit);
 8012358:	ed97 7b08 	vldr	d7, [r7, #32]
 801235c:	eeb0 0a47 	vmov.f32	s0, s14
 8012360:	eef0 0a67 	vmov.f32	s1, s15
 8012364:	f7fd fa29 	bl	800f7ba <can2_charger_config_msg_set_voltage_limit_encode>
 8012368:	4603      	mov	r3, r0
 801236a:	461a      	mov	r2, r3
 801236c:	4b5e      	ldr	r3, [pc, #376]	; (80124e8 <can2_charger_config_transmit+0x1d8>)
 801236e:	805a      	strh	r2, [r3, #2]
   can2_charger_config.msg_set_current_limit = can2_charger_config_msg_set_current_limit_encode(charger_config.msg_set_current_limit);
 8012370:	ed97 7b00 	vldr	d7, [r7]
 8012374:	eeb0 0a47 	vmov.f32	s0, s14
 8012378:	eef0 0a67 	vmov.f32	s1, s15
 801237c:	f7fd fa40 	bl	800f800 <can2_charger_config_msg_set_current_limit_encode>
 8012380:	4603      	mov	r3, r0
 8012382:	461a      	mov	r2, r3
 8012384:	4b58      	ldr	r3, [pc, #352]	; (80124e8 <can2_charger_config_transmit+0x1d8>)
 8012386:	809a      	strh	r2, [r3, #4]
   can2_charger_config.msg_set_power_limit = can2_charger_config_msg_set_power_limit_encode(charger_config.msg_set_power_limit);
 8012388:	ed97 7b04 	vldr	d7, [r7, #16]
 801238c:	eeb0 0a47 	vmov.f32	s0, s14
 8012390:	eef0 0a67 	vmov.f32	s1, s15
 8012394:	f7fd fa70 	bl	800f878 <can2_charger_config_msg_set_power_limit_encode>
 8012398:	4603      	mov	r3, r0
 801239a:	461a      	mov	r2, r3
 801239c:	4b52      	ldr	r3, [pc, #328]	; (80124e8 <can2_charger_config_transmit+0x1d8>)
 801239e:	80da      	strh	r2, [r3, #6]
   can2_charger_config.msg_set_enabled = can2_charger_config_msg_set_enabled_encode(charger_config.msg_set_enabled);
 80123a0:	7a3b      	ldrb	r3, [r7, #8]
 80123a2:	4618      	mov	r0, r3
 80123a4:	f7ee f8a0 	bl	80004e8 <__aeabi_ui2d>
 80123a8:	4602      	mov	r2, r0
 80123aa:	460b      	mov	r3, r1
 80123ac:	ec43 2b10 	vmov	d0, r2, r3
 80123b0:	f7fd fa85 	bl	800f8be <can2_charger_config_msg_set_enabled_encode>
 80123b4:	4603      	mov	r3, r0
 80123b6:	461a      	mov	r2, r3
 80123b8:	4b4b      	ldr	r3, [pc, #300]	; (80124e8 <can2_charger_config_transmit+0x1d8>)
 80123ba:	721a      	strb	r2, [r3, #8]
   can2_charger_config.msg_set_time_out = can2_charger_config_msg_set_time_out_encode(charger_config.msg_set_time_out);
 80123bc:	7e3b      	ldrb	r3, [r7, #24]
 80123be:	4618      	mov	r0, r3
 80123c0:	f7ee f892 	bl	80004e8 <__aeabi_ui2d>
 80123c4:	4602      	mov	r2, r0
 80123c6:	460b      	mov	r3, r1
 80123c8:	ec43 2b10 	vmov	d0, r2, r3
 80123cc:	f7fd fa9a 	bl	800f904 <can2_charger_config_msg_set_time_out_encode>
 80123d0:	4603      	mov	r3, r0
 80123d2:	461a      	mov	r2, r3
 80123d4:	4b44      	ldr	r3, [pc, #272]	; (80124e8 <can2_charger_config_transmit+0x1d8>)
 80123d6:	725a      	strb	r2, [r3, #9]

       can2_charger_config.set_mux = 64;
 80123d8:	4b43      	ldr	r3, [pc, #268]	; (80124e8 <can2_charger_config_transmit+0x1d8>)
 80123da:	2240      	movs	r2, #64	; 0x40
 80123dc:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_charger_config, 4);
 80123de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80123e2:	2204      	movs	r2, #4
 80123e4:	4940      	ldr	r1, [pc, #256]	; (80124e8 <can2_charger_config_transmit+0x1d8>)
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7fd f872 	bl	800f4d0 <can2_charger_config_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 80123ec:	bf00      	nop
 80123ee:	4b3f      	ldr	r3, [pc, #252]	; (80124ec <can2_charger_config_transmit+0x1dc>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	4618      	mov	r0, r3
 80123f4:	f013 fa99 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d0f7      	beq.n	80123ee <can2_charger_config_transmit+0xde>
       if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80123fe:	4b3b      	ldr	r3, [pc, #236]	; (80124ec <can2_charger_config_transmit+0x1dc>)
 8012400:	6818      	ldr	r0, [r3, #0]
 8012402:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012406:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801240a:	4b39      	ldr	r3, [pc, #228]	; (80124f0 <can2_charger_config_transmit+0x1e0>)
 801240c:	f013 f9b2 	bl	8025774 <HAL_CAN_AddTxMessage>
 8012410:	4603      	mov	r3, r0
 8012412:	2b00      	cmp	r3, #0
 8012414:	d001      	beq.n	801241a <can2_charger_config_transmit+0x10a>
           Error_Handler();
 8012416:	f005 f91d 	bl	8017654 <Error_Handler>
       }
       can2_charger_config.set_mux = 65;
 801241a:	4b33      	ldr	r3, [pc, #204]	; (80124e8 <can2_charger_config_transmit+0x1d8>)
 801241c:	2241      	movs	r2, #65	; 0x41
 801241e:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_charger_config, 4);
 8012420:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012424:	2204      	movs	r2, #4
 8012426:	4930      	ldr	r1, [pc, #192]	; (80124e8 <can2_charger_config_transmit+0x1d8>)
 8012428:	4618      	mov	r0, r3
 801242a:	f7fd f851 	bl	800f4d0 <can2_charger_config_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 801242e:	bf00      	nop
 8012430:	4b2e      	ldr	r3, [pc, #184]	; (80124ec <can2_charger_config_transmit+0x1dc>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	4618      	mov	r0, r3
 8012436:	f013 fa78 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 801243a:	4603      	mov	r3, r0
 801243c:	2b00      	cmp	r3, #0
 801243e:	d0f7      	beq.n	8012430 <can2_charger_config_transmit+0x120>
       if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8012440:	4b2a      	ldr	r3, [pc, #168]	; (80124ec <can2_charger_config_transmit+0x1dc>)
 8012442:	6818      	ldr	r0, [r3, #0]
 8012444:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012448:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801244c:	4b28      	ldr	r3, [pc, #160]	; (80124f0 <can2_charger_config_transmit+0x1e0>)
 801244e:	f013 f991 	bl	8025774 <HAL_CAN_AddTxMessage>
 8012452:	4603      	mov	r3, r0
 8012454:	2b00      	cmp	r3, #0
 8012456:	d001      	beq.n	801245c <can2_charger_config_transmit+0x14c>
           Error_Handler();
 8012458:	f005 f8fc 	bl	8017654 <Error_Handler>
       }
       can2_charger_config.set_mux = 66;
 801245c:	4b22      	ldr	r3, [pc, #136]	; (80124e8 <can2_charger_config_transmit+0x1d8>)
 801245e:	2242      	movs	r2, #66	; 0x42
 8012460:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_charger_config, 4);
 8012462:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012466:	2204      	movs	r2, #4
 8012468:	491f      	ldr	r1, [pc, #124]	; (80124e8 <can2_charger_config_transmit+0x1d8>)
 801246a:	4618      	mov	r0, r3
 801246c:	f7fd f830 	bl	800f4d0 <can2_charger_config_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 8012470:	bf00      	nop
 8012472:	4b1e      	ldr	r3, [pc, #120]	; (80124ec <can2_charger_config_transmit+0x1dc>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	4618      	mov	r0, r3
 8012478:	f013 fa57 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 801247c:	4603      	mov	r3, r0
 801247e:	2b00      	cmp	r3, #0
 8012480:	d0f7      	beq.n	8012472 <can2_charger_config_transmit+0x162>
       if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8012482:	4b1a      	ldr	r3, [pc, #104]	; (80124ec <can2_charger_config_transmit+0x1dc>)
 8012484:	6818      	ldr	r0, [r3, #0]
 8012486:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801248a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801248e:	4b18      	ldr	r3, [pc, #96]	; (80124f0 <can2_charger_config_transmit+0x1e0>)
 8012490:	f013 f970 	bl	8025774 <HAL_CAN_AddTxMessage>
 8012494:	4603      	mov	r3, r0
 8012496:	2b00      	cmp	r3, #0
 8012498:	d001      	beq.n	801249e <can2_charger_config_transmit+0x18e>
           Error_Handler();
 801249a:	f005 f8db 	bl	8017654 <Error_Handler>
       }
       can2_charger_config.set_mux = 68;
 801249e:	4b12      	ldr	r3, [pc, #72]	; (80124e8 <can2_charger_config_transmit+0x1d8>)
 80124a0:	2244      	movs	r2, #68	; 0x44
 80124a2:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_charger_config, 4);
 80124a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80124a8:	2204      	movs	r2, #4
 80124aa:	490f      	ldr	r1, [pc, #60]	; (80124e8 <can2_charger_config_transmit+0x1d8>)
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7fd f80f 	bl	800f4d0 <can2_charger_config_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 80124b2:	bf00      	nop
 80124b4:	4b0d      	ldr	r3, [pc, #52]	; (80124ec <can2_charger_config_transmit+0x1dc>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	4618      	mov	r0, r3
 80124ba:	f013 fa36 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d0f7      	beq.n	80124b4 <can2_charger_config_transmit+0x1a4>
       if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80124c4:	4b09      	ldr	r3, [pc, #36]	; (80124ec <can2_charger_config_transmit+0x1dc>)
 80124c6:	6818      	ldr	r0, [r3, #0]
 80124c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80124cc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80124d0:	4b07      	ldr	r3, [pc, #28]	; (80124f0 <can2_charger_config_transmit+0x1e0>)
 80124d2:	f013 f94f 	bl	8025774 <HAL_CAN_AddTxMessage>
 80124d6:	4603      	mov	r3, r0
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d001      	beq.n	80124e0 <can2_charger_config_transmit+0x1d0>
           Error_Handler();
 80124dc:	f005 f8ba 	bl	8017654 <Error_Handler>
       }
}
 80124e0:	bf00      	nop
 80124e2:	3750      	adds	r7, #80	; 0x50
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}
 80124e8:	20001618 	.word	0x20001618
 80124ec:	20001634 	.word	0x20001634
 80124f0:	200014cc 	.word	0x200014cc

080124f4 <can2_cc_status_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can2_cc_status_transmit() {
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b08a      	sub	sp, #40	; 0x28
 80124f8:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 80124fa:	f107 0308 	add.w	r3, r7, #8
 80124fe:	2200      	movs	r2, #0
 8012500:	601a      	str	r2, [r3, #0]
 8012502:	605a      	str	r2, [r3, #4]
 8012504:	609a      	str	r2, [r3, #8]
 8012506:	60da      	str	r2, [r3, #12]
 8012508:	611a      	str	r2, [r3, #16]
 801250a:	615a      	str	r2, [r3, #20]
 801250c:	f44f 7314 	mov.w	r3, #592	; 0x250
 8012510:	60bb      	str	r3, [r7, #8]
 8012512:	2301      	movs	r3, #1
 8012514:	61bb      	str	r3, [r7, #24]
       .StdId = 592,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   cc_status_t cc_status;
   can2_cc_status_tx_callback(&cc_status);
 8012516:	1d3b      	adds	r3, r7, #4
 8012518:	4618      	mov	r0, r3
 801251a:	f003 fc6b 	bl	8015df4 <can2_cc_status_tx_callback>

   can2_cc_status.enable_ams_charging = can2_cc_status_enable_ams_charging_encode(cc_status.enable_ams_charging);
 801251e:	793b      	ldrb	r3, [r7, #4]
 8012520:	4618      	mov	r0, r3
 8012522:	f7ed ffe1 	bl	80004e8 <__aeabi_ui2d>
 8012526:	4602      	mov	r2, r0
 8012528:	460b      	mov	r3, r1
 801252a:	ec43 2b10 	vmov	d0, r2, r3
 801252e:	f7fd fa4d 	bl	800f9cc <can2_cc_status_enable_ams_charging_encode>
 8012532:	4603      	mov	r3, r0
 8012534:	461a      	mov	r2, r3
 8012536:	4b12      	ldr	r3, [pc, #72]	; (8012580 <can2_cc_status_transmit+0x8c>)
 8012538:	701a      	strb	r2, [r3, #0]

   can2_cc_status_pack(tx_data, &can2_cc_status, 1);
 801253a:	f107 0320 	add.w	r3, r7, #32
 801253e:	2201      	movs	r2, #1
 8012540:	490f      	ldr	r1, [pc, #60]	; (8012580 <can2_cc_status_transmit+0x8c>)
 8012542:	4618      	mov	r0, r3
 8012544:	f7fd fa01 	bl	800f94a <can2_cc_status_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 8012548:	bf00      	nop
 801254a:	4b0e      	ldr	r3, [pc, #56]	; (8012584 <can2_cc_status_transmit+0x90>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	4618      	mov	r0, r3
 8012550:	f013 f9eb 	bl	802592a <HAL_CAN_GetTxMailboxesFreeLevel>
 8012554:	4603      	mov	r3, r0
 8012556:	2b00      	cmp	r3, #0
 8012558:	d0f7      	beq.n	801254a <can2_cc_status_transmit+0x56>
   if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801255a:	4b0a      	ldr	r3, [pc, #40]	; (8012584 <can2_cc_status_transmit+0x90>)
 801255c:	6818      	ldr	r0, [r3, #0]
 801255e:	f107 0220 	add.w	r2, r7, #32
 8012562:	f107 0108 	add.w	r1, r7, #8
 8012566:	4b08      	ldr	r3, [pc, #32]	; (8012588 <can2_cc_status_transmit+0x94>)
 8012568:	f013 f904 	bl	8025774 <HAL_CAN_AddTxMessage>
 801256c:	4603      	mov	r3, r0
 801256e:	2b00      	cmp	r3, #0
 8012570:	d001      	beq.n	8012576 <can2_cc_status_transmit+0x82>
       Error_Handler();
 8012572:	f005 f86f 	bl	8017654 <Error_Handler>
   }
}
 8012576:	bf00      	nop
 8012578:	3728      	adds	r7, #40	; 0x28
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
 801257e:	bf00      	nop
 8012580:	20001624 	.word	0x20001624
 8012584:	20001634 	.word	0x20001634
 8012588:	200014cc 	.word	0x200014cc

0801258c <can1_ams_status_1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_status_1_receive() {
 801258c:	b580      	push	{r7, lr}
 801258e:	b092      	sub	sp, #72	; 0x48
 8012590:	af00      	add	r7, sp, #0
   if(can1_ams_status_1_flag) {
 8012592:	4b5c      	ldr	r3, [pc, #368]	; (8012704 <can1_ams_status_1_receive+0x178>)
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	2b00      	cmp	r3, #0
 8012598:	f000 80af 	beq.w	80126fa <can1_ams_status_1_receive+0x16e>
       ams_status_1_t ams_status_1;
       ams_status_1.charging_status = can1_ams_status_1_charging_status_decode(can1_ams_status_1.charging_status);
 801259c:	4b5a      	ldr	r3, [pc, #360]	; (8012708 <can1_ams_status_1_receive+0x17c>)
 801259e:	781b      	ldrb	r3, [r3, #0]
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7ee ff96 	bl	80014d2 <can1_ams_status_1_charging_status_decode>
 80125a6:	ec53 2b10 	vmov	r2, r3, d0
 80125aa:	4610      	mov	r0, r2
 80125ac:	4619      	mov	r1, r3
 80125ae:	f7ee faed 	bl	8000b8c <__aeabi_d2uiz>
 80125b2:	4603      	mov	r3, r0
 80125b4:	b2db      	uxtb	r3, r3
 80125b6:	70fb      	strb	r3, [r7, #3]
       ams_status_1.air1_closed = can1_ams_status_1_air1_closed_decode(can1_ams_status_1.air1_closed);
 80125b8:	4b53      	ldr	r3, [pc, #332]	; (8012708 <can1_ams_status_1_receive+0x17c>)
 80125ba:	785b      	ldrb	r3, [r3, #1]
 80125bc:	4618      	mov	r0, r3
 80125be:	f7ee ffab 	bl	8001518 <can1_ams_status_1_air1_closed_decode>
 80125c2:	ec53 2b10 	vmov	r2, r3, d0
 80125c6:	4610      	mov	r0, r2
 80125c8:	4619      	mov	r1, r3
 80125ca:	f7ee fadf 	bl	8000b8c <__aeabi_d2uiz>
 80125ce:	4603      	mov	r3, r0
 80125d0:	b2db      	uxtb	r3, r3
 80125d2:	703b      	strb	r3, [r7, #0]
       ams_status_1.air2_closed = can1_ams_status_1_air2_closed_decode(can1_ams_status_1.air2_closed);
 80125d4:	4b4c      	ldr	r3, [pc, #304]	; (8012708 <can1_ams_status_1_receive+0x17c>)
 80125d6:	789b      	ldrb	r3, [r3, #2]
 80125d8:	4618      	mov	r0, r3
 80125da:	f7ee ffc0 	bl	800155e <can1_ams_status_1_air2_closed_decode>
 80125de:	ec53 2b10 	vmov	r2, r3, d0
 80125e2:	4610      	mov	r0, r2
 80125e4:	4619      	mov	r1, r3
 80125e6:	f7ee fad1 	bl	8000b8c <__aeabi_d2uiz>
 80125ea:	4603      	mov	r3, r0
 80125ec:	b2db      	uxtb	r3, r3
 80125ee:	707b      	strb	r3, [r7, #1]
       ams_status_1.sc_closed = can1_ams_status_1_sc_closed_decode(can1_ams_status_1.sc_closed);
 80125f0:	4b45      	ldr	r3, [pc, #276]	; (8012708 <can1_ams_status_1_receive+0x17c>)
 80125f2:	78db      	ldrb	r3, [r3, #3]
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7ee ffd5 	bl	80015a4 <can1_ams_status_1_sc_closed_decode>
 80125fa:	ec53 2b10 	vmov	r2, r3, d0
 80125fe:	4610      	mov	r0, r2
 8012600:	4619      	mov	r1, r3
 8012602:	f7ee fac3 	bl	8000b8c <__aeabi_d2uiz>
 8012606:	4603      	mov	r3, r0
 8012608:	b2db      	uxtb	r3, r3
 801260a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
       ams_status_1.pre_charge_status = can1_ams_status_1_pre_charge_status_decode(can1_ams_status_1.pre_charge_status);
 801260e:	4b3e      	ldr	r3, [pc, #248]	; (8012708 <can1_ams_status_1_receive+0x17c>)
 8012610:	791b      	ldrb	r3, [r3, #4]
 8012612:	4618      	mov	r0, r3
 8012614:	f7ee ffe9 	bl	80015ea <can1_ams_status_1_pre_charge_status_decode>
 8012618:	ec53 2b10 	vmov	r2, r3, d0
 801261c:	4610      	mov	r0, r2
 801261e:	4619      	mov	r1, r3
 8012620:	f7ee fab4 	bl	8000b8c <__aeabi_d2uiz>
 8012624:	4603      	mov	r3, r0
 8012626:	b2db      	uxtb	r3, r3
 8012628:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
       ams_status_1.ams_error = can1_ams_status_1_ams_error_decode(can1_ams_status_1.ams_error);
 801262c:	4b36      	ldr	r3, [pc, #216]	; (8012708 <can1_ams_status_1_receive+0x17c>)
 801262e:	795b      	ldrb	r3, [r3, #5]
 8012630:	4618      	mov	r0, r3
 8012632:	f7ee fffd 	bl	8001630 <can1_ams_status_1_ams_error_decode>
 8012636:	ec53 2b10 	vmov	r2, r3, d0
 801263a:	4610      	mov	r0, r2
 801263c:	4619      	mov	r1, r3
 801263e:	f7ee faa5 	bl	8000b8c <__aeabi_d2uiz>
 8012642:	4603      	mov	r3, r0
 8012644:	b2db      	uxtb	r3, r3
 8012646:	70bb      	strb	r3, [r7, #2]
       ams_status_1.imd_error = can1_ams_status_1_imd_error_decode(can1_ams_status_1.imd_error);
 8012648:	4b2f      	ldr	r3, [pc, #188]	; (8012708 <can1_ams_status_1_receive+0x17c>)
 801264a:	799b      	ldrb	r3, [r3, #6]
 801264c:	4618      	mov	r0, r3
 801264e:	f7ef f812 	bl	8001676 <can1_ams_status_1_imd_error_decode>
 8012652:	ec53 2b10 	vmov	r2, r3, d0
 8012656:	4610      	mov	r0, r2
 8012658:	4619      	mov	r1, r3
 801265a:	f7ee fa97 	bl	8000b8c <__aeabi_d2uiz>
 801265e:	4603      	mov	r3, r0
 8012660:	b2db      	uxtb	r3, r3
 8012662:	743b      	strb	r3, [r7, #16]
       ams_status_1.state_of_charge = can1_ams_status_1_state_of_charge_decode(can1_ams_status_1.state_of_charge);
 8012664:	4b28      	ldr	r3, [pc, #160]	; (8012708 <can1_ams_status_1_receive+0x17c>)
 8012666:	79db      	ldrb	r3, [r3, #7]
 8012668:	4618      	mov	r0, r3
 801266a:	f7ef f827 	bl	80016bc <can1_ams_status_1_state_of_charge_decode>
 801266e:	eeb0 7a40 	vmov.f32	s14, s0
 8012672:	eef0 7a60 	vmov.f32	s15, s1
 8012676:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
       ams_status_1.min_cell_voltage = can1_ams_status_1_min_cell_voltage_decode(can1_ams_status_1.min_cell_voltage);
 801267a:	4b23      	ldr	r3, [pc, #140]	; (8012708 <can1_ams_status_1_receive+0x17c>)
 801267c:	7a1b      	ldrb	r3, [r3, #8]
 801267e:	4618      	mov	r0, r3
 8012680:	f7ef f85e 	bl	8001740 <can1_ams_status_1_min_cell_voltage_decode>
 8012684:	eeb0 7a40 	vmov.f32	s14, s0
 8012688:	eef0 7a60 	vmov.f32	s15, s1
 801268c:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
       ams_status_1.max_cell_voltage = can1_ams_status_1_max_cell_voltage_decode(can1_ams_status_1.max_cell_voltage);
 8012690:	4b1d      	ldr	r3, [pc, #116]	; (8012708 <can1_ams_status_1_receive+0x17c>)
 8012692:	7a5b      	ldrb	r3, [r3, #9]
 8012694:	4618      	mov	r0, r3
 8012696:	f7ef f8ab 	bl	80017f0 <can1_ams_status_1_max_cell_voltage_decode>
 801269a:	eeb0 7a40 	vmov.f32	s14, s0
 801269e:	eef0 7a60 	vmov.f32	s15, s1
 80126a2:	ed87 7b08 	vstr	d7, [r7, #32]
       ams_status_1.min_cell_temperature = can1_ams_status_1_min_cell_temperature_decode(can1_ams_status_1.min_cell_temperature);
 80126a6:	4b18      	ldr	r3, [pc, #96]	; (8012708 <can1_ams_status_1_receive+0x17c>)
 80126a8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7ef f8f7 	bl	80018a0 <can1_ams_status_1_min_cell_temperature_decode>
 80126b2:	eeb0 7a40 	vmov.f32	s14, s0
 80126b6:	eef0 7a60 	vmov.f32	s15, s1
 80126ba:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
       ams_status_1.max_cell_temperature = can1_ams_status_1_max_cell_temperature_decode(can1_ams_status_1.max_cell_temperature);
 80126be:	4b12      	ldr	r3, [pc, #72]	; (8012708 <can1_ams_status_1_receive+0x17c>)
 80126c0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7ef f943 	bl	8001950 <can1_ams_status_1_max_cell_temperature_decode>
 80126ca:	eeb0 7a40 	vmov.f32	s14, s0
 80126ce:	eef0 7a60 	vmov.f32	s15, s1
 80126d2:	ed87 7b06 	vstr	d7, [r7, #24]
       ams_status_1.fan_speed = can1_ams_status_1_fan_speed_decode(can1_ams_status_1.fan_speed);
 80126d6:	4b0c      	ldr	r3, [pc, #48]	; (8012708 <can1_ams_status_1_receive+0x17c>)
 80126d8:	7b9b      	ldrb	r3, [r3, #14]
 80126da:	4618      	mov	r0, r3
 80126dc:	f7ef f971 	bl	80019c2 <can1_ams_status_1_fan_speed_decode>
 80126e0:	eeb0 7a40 	vmov.f32	s14, s0
 80126e4:	eef0 7a60 	vmov.f32	s15, s1
 80126e8:	ed87 7b02 	vstr	d7, [r7, #8]
       can1_ams_status_1_rx_callback(&ams_status_1);
 80126ec:	463b      	mov	r3, r7
 80126ee:	4618      	mov	r0, r3
 80126f0:	f001 fd8e 	bl	8014210 <can1_ams_status_1_rx_callback>
       can1_ams_status_1_flag = 0;
 80126f4:	4b03      	ldr	r3, [pc, #12]	; (8012704 <can1_ams_status_1_receive+0x178>)
 80126f6:	2200      	movs	r2, #0
 80126f8:	701a      	strb	r2, [r3, #0]
   }
}
 80126fa:	bf00      	nop
 80126fc:	3748      	adds	r7, #72	; 0x48
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	20001625 	.word	0x20001625
 8012708:	200014d8 	.word	0x200014d8

0801270c <can1_dbu_status_1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_receive() {
 801270c:	b580      	push	{r7, lr}
 801270e:	b086      	sub	sp, #24
 8012710:	af00      	add	r7, sp, #0
   if(can1_dbu_status_1_flag) {
 8012712:	4b1b      	ldr	r3, [pc, #108]	; (8012780 <can1_dbu_status_1_receive+0x74>)
 8012714:	781b      	ldrb	r3, [r3, #0]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d02e      	beq.n	8012778 <can1_dbu_status_1_receive+0x6c>
       dbu_status_1_t dbu_status_1;
       dbu_status_1.activate_ts_button = can1_dbu_status_1_activate_ts_button_decode(can1_dbu_status_1.activate_ts_button);
 801271a:	4b1a      	ldr	r3, [pc, #104]	; (8012784 <can1_dbu_status_1_receive+0x78>)
 801271c:	781b      	ldrb	r3, [r3, #0]
 801271e:	4618      	mov	r0, r3
 8012720:	f7ef fa14 	bl	8001b4c <can1_dbu_status_1_activate_ts_button_decode>
 8012724:	ec53 2b10 	vmov	r2, r3, d0
 8012728:	4610      	mov	r0, r2
 801272a:	4619      	mov	r1, r3
 801272c:	f7ee fa2e 	bl	8000b8c <__aeabi_d2uiz>
 8012730:	4603      	mov	r3, r0
 8012732:	b2db      	uxtb	r3, r3
 8012734:	703b      	strb	r3, [r7, #0]
       dbu_status_1.ready_to_drive_button = can1_dbu_status_1_ready_to_drive_button_decode(can1_dbu_status_1.ready_to_drive_button);
 8012736:	4b13      	ldr	r3, [pc, #76]	; (8012784 <can1_dbu_status_1_receive+0x78>)
 8012738:	785b      	ldrb	r3, [r3, #1]
 801273a:	4618      	mov	r0, r3
 801273c:	f7ef fa29 	bl	8001b92 <can1_dbu_status_1_ready_to_drive_button_decode>
 8012740:	ec53 2b10 	vmov	r2, r3, d0
 8012744:	4610      	mov	r0, r2
 8012746:	4619      	mov	r1, r3
 8012748:	f7ee fa20 	bl	8000b8c <__aeabi_d2uiz>
 801274c:	4603      	mov	r3, r0
 801274e:	b2db      	uxtb	r3, r3
 8012750:	743b      	strb	r3, [r7, #16]
       dbu_status_1.dbu_temperature = can1_dbu_status_1_dbu_temperature_decode(can1_dbu_status_1.dbu_temperature);
 8012752:	4b0c      	ldr	r3, [pc, #48]	; (8012784 <can1_dbu_status_1_receive+0x78>)
 8012754:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012758:	4618      	mov	r0, r3
 801275a:	f7ef fa5d 	bl	8001c18 <can1_dbu_status_1_dbu_temperature_decode>
 801275e:	eeb0 7a40 	vmov.f32	s14, s0
 8012762:	eef0 7a60 	vmov.f32	s15, s1
 8012766:	ed87 7b02 	vstr	d7, [r7, #8]
       can1_dbu_status_1_rx_callback(&dbu_status_1);
 801276a:	463b      	mov	r3, r7
 801276c:	4618      	mov	r0, r3
 801276e:	f003 f90b 	bl	8015988 <can1_dbu_status_1_rx_callback>
       can1_dbu_status_1_flag = 0;
 8012772:	4b03      	ldr	r3, [pc, #12]	; (8012780 <can1_dbu_status_1_receive+0x74>)
 8012774:	2200      	movs	r2, #0
 8012776:	701a      	strb	r2, [r3, #0]
   }
}
 8012778:	bf00      	nop
 801277a:	3718      	adds	r7, #24
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}
 8012780:	20001626 	.word	0x20001626
 8012784:	200014e8 	.word	0x200014e8

08012788 <can1_ams_temperatures_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_temperatures_receive() {
 8012788:	b580      	push	{r7, lr}
 801278a:	b088      	sub	sp, #32
 801278c:	af00      	add	r7, sp, #0
   if(can1_ams_temperatures_flag) {
 801278e:	4b1f      	ldr	r3, [pc, #124]	; (801280c <can1_ams_temperatures_receive+0x84>)
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d036      	beq.n	8012804 <can1_ams_temperatures_receive+0x7c>
       ams_temperatures_t ams_temperatures;
       ams_temperatures.pre_charge_resistor_temperature = can1_ams_temperatures_pre_charge_resistor_temperature_decode(can1_ams_temperatures.pre_charge_resistor_temperature);
 8012796:	4b1e      	ldr	r3, [pc, #120]	; (8012810 <can1_ams_temperatures_receive+0x88>)
 8012798:	f9b3 3000 	ldrsh.w	r3, [r3]
 801279c:	4618      	mov	r0, r3
 801279e:	f7ef fbdf 	bl	8001f60 <can1_ams_temperatures_pre_charge_resistor_temperature_decode>
 80127a2:	eeb0 7a40 	vmov.f32	s14, s0
 80127a6:	eef0 7a60 	vmov.f32	s15, s1
 80127aa:	ed87 7b06 	vstr	d7, [r7, #24]
       ams_temperatures.fuse_resistor_temperature = can1_ams_temperatures_fuse_resistor_temperature_decode(can1_ams_temperatures.fuse_resistor_temperature);
 80127ae:	4b18      	ldr	r3, [pc, #96]	; (8012810 <can1_ams_temperatures_receive+0x88>)
 80127b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80127b4:	4618      	mov	r0, r3
 80127b6:	f7ef fc2b 	bl	8002010 <can1_ams_temperatures_fuse_resistor_temperature_decode>
 80127ba:	eeb0 7a40 	vmov.f32	s14, s0
 80127be:	eef0 7a60 	vmov.f32	s15, s1
 80127c2:	ed87 7b04 	vstr	d7, [r7, #16]
       ams_temperatures.aux_1_temperature = can1_ams_temperatures_aux_1_temperature_decode(can1_ams_temperatures.aux_1_temperature);
 80127c6:	4b12      	ldr	r3, [pc, #72]	; (8012810 <can1_ams_temperatures_receive+0x88>)
 80127c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80127cc:	4618      	mov	r0, r3
 80127ce:	f7ef fc77 	bl	80020c0 <can1_ams_temperatures_aux_1_temperature_decode>
 80127d2:	eeb0 7a40 	vmov.f32	s14, s0
 80127d6:	eef0 7a60 	vmov.f32	s15, s1
 80127da:	ed87 7b00 	vstr	d7, [r7]
       ams_temperatures.aux_2_temperature = can1_ams_temperatures_aux_2_temperature_decode(can1_ams_temperatures.aux_2_temperature);
 80127de:	4b0c      	ldr	r3, [pc, #48]	; (8012810 <can1_ams_temperatures_receive+0x88>)
 80127e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80127e4:	4618      	mov	r0, r3
 80127e6:	f7ef fcc3 	bl	8002170 <can1_ams_temperatures_aux_2_temperature_decode>
 80127ea:	eeb0 7a40 	vmov.f32	s14, s0
 80127ee:	eef0 7a60 	vmov.f32	s15, s1
 80127f2:	ed87 7b02 	vstr	d7, [r7, #8]
       can1_ams_temperatures_rx_callback(&ams_temperatures);
 80127f6:	463b      	mov	r3, r7
 80127f8:	4618      	mov	r0, r3
 80127fa:	f001 fd13 	bl	8014224 <can1_ams_temperatures_rx_callback>
       can1_ams_temperatures_flag = 0;
 80127fe:	4b03      	ldr	r3, [pc, #12]	; (801280c <can1_ams_temperatures_receive+0x84>)
 8012800:	2200      	movs	r2, #0
 8012802:	701a      	strb	r2, [r3, #0]
   }
}
 8012804:	bf00      	nop
 8012806:	3720      	adds	r7, #32
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}
 801280c:	20001627 	.word	0x20001627
 8012810:	200014ec 	.word	0x200014ec

08012814 <can1_ams_cell_voltages_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_voltages_receive() {
 8012814:	b580      	push	{r7, lr}
 8012816:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 801281a:	af00      	add	r7, sp, #0
   if(can1_ams_cell_voltages_flag) {
 801281c:	4bdb      	ldr	r3, [pc, #876]	; (8012b8c <can1_ams_cell_voltages_receive+0x378>)
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	f000 865a 	beq.w	80134da <can1_ams_cell_voltages_receive+0xcc6>
       ams_cell_voltages_t ams_cell_voltages;
       ams_cell_voltages.v1s1 = can1_ams_cell_voltages_v1s1_decode(can1_ams_cell_voltages.v1s1);
 8012826:	4bda      	ldr	r3, [pc, #872]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012828:	785b      	ldrb	r3, [r3, #1]
 801282a:	4618      	mov	r0, r3
 801282c:	f7f1 fd08 	bl	8004240 <can1_ams_cell_voltages_v1s1_decode>
 8012830:	eeb0 7a40 	vmov.f32	s14, s0
 8012834:	eef0 7a60 	vmov.f32	s15, s1
 8012838:	463b      	mov	r3, r7
 801283a:	ed83 7b00 	vstr	d7, [r3]
       ams_cell_voltages.v7s1 = can1_ams_cell_voltages_v7s1_decode(can1_ams_cell_voltages.v7s1);
 801283e:	4bd4      	ldr	r3, [pc, #848]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012840:	789b      	ldrb	r3, [r3, #2]
 8012842:	4618      	mov	r0, r3
 8012844:	f7f1 fd54 	bl	80042f0 <can1_ams_cell_voltages_v7s1_decode>
 8012848:	eeb0 7a40 	vmov.f32	s14, s0
 801284c:	eef0 7a60 	vmov.f32	s15, s1
 8012850:	463b      	mov	r3, r7
 8012852:	ed83 7b90 	vstr	d7, [r3, #576]	; 0x240
       ams_cell_voltages.v1s2 = can1_ams_cell_voltages_v1s2_decode(can1_ams_cell_voltages.v1s2);
 8012856:	4bce      	ldr	r3, [pc, #824]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012858:	78db      	ldrb	r3, [r3, #3]
 801285a:	4618      	mov	r0, r3
 801285c:	f7f1 fda0 	bl	80043a0 <can1_ams_cell_voltages_v1s2_decode>
 8012860:	eeb0 7a40 	vmov.f32	s14, s0
 8012864:	eef0 7a60 	vmov.f32	s15, s1
 8012868:	463b      	mov	r3, r7
 801286a:	ed83 7b02 	vstr	d7, [r3, #8]
       ams_cell_voltages.v7s2 = can1_ams_cell_voltages_v7s2_decode(can1_ams_cell_voltages.v7s2);
 801286e:	4bc8      	ldr	r3, [pc, #800]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012870:	791b      	ldrb	r3, [r3, #4]
 8012872:	4618      	mov	r0, r3
 8012874:	f7f1 fdec 	bl	8004450 <can1_ams_cell_voltages_v7s2_decode>
 8012878:	eeb0 7a40 	vmov.f32	s14, s0
 801287c:	eef0 7a60 	vmov.f32	s15, s1
 8012880:	463b      	mov	r3, r7
 8012882:	ed83 7b92 	vstr	d7, [r3, #584]	; 0x248
       ams_cell_voltages.v1s3 = can1_ams_cell_voltages_v1s3_decode(can1_ams_cell_voltages.v1s3);
 8012886:	4bc2      	ldr	r3, [pc, #776]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012888:	795b      	ldrb	r3, [r3, #5]
 801288a:	4618      	mov	r0, r3
 801288c:	f7f1 fe38 	bl	8004500 <can1_ams_cell_voltages_v1s3_decode>
 8012890:	eeb0 7a40 	vmov.f32	s14, s0
 8012894:	eef0 7a60 	vmov.f32	s15, s1
 8012898:	463b      	mov	r3, r7
 801289a:	ed83 7b04 	vstr	d7, [r3, #16]
       ams_cell_voltages.v7s3 = can1_ams_cell_voltages_v7s3_decode(can1_ams_cell_voltages.v7s3);
 801289e:	4bbc      	ldr	r3, [pc, #752]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 80128a0:	799b      	ldrb	r3, [r3, #6]
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7f1 fe84 	bl	80045b0 <can1_ams_cell_voltages_v7s3_decode>
 80128a8:	eeb0 7a40 	vmov.f32	s14, s0
 80128ac:	eef0 7a60 	vmov.f32	s15, s1
 80128b0:	463b      	mov	r3, r7
 80128b2:	ed83 7b94 	vstr	d7, [r3, #592]	; 0x250
       ams_cell_voltages.v1s4 = can1_ams_cell_voltages_v1s4_decode(can1_ams_cell_voltages.v1s4);
 80128b6:	4bb6      	ldr	r3, [pc, #728]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 80128b8:	79db      	ldrb	r3, [r3, #7]
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7f1 fed0 	bl	8004660 <can1_ams_cell_voltages_v1s4_decode>
 80128c0:	eeb0 7a40 	vmov.f32	s14, s0
 80128c4:	eef0 7a60 	vmov.f32	s15, s1
 80128c8:	463b      	mov	r3, r7
 80128ca:	ed83 7b06 	vstr	d7, [r3, #24]
       ams_cell_voltages.v7s4 = can1_ams_cell_voltages_v7s4_decode(can1_ams_cell_voltages.v7s4);
 80128ce:	4bb0      	ldr	r3, [pc, #704]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 80128d0:	7a1b      	ldrb	r3, [r3, #8]
 80128d2:	4618      	mov	r0, r3
 80128d4:	f7f1 ff1c 	bl	8004710 <can1_ams_cell_voltages_v7s4_decode>
 80128d8:	eeb0 7a40 	vmov.f32	s14, s0
 80128dc:	eef0 7a60 	vmov.f32	s15, s1
 80128e0:	463b      	mov	r3, r7
 80128e2:	ed83 7b96 	vstr	d7, [r3, #600]	; 0x258
       ams_cell_voltages.v1s5 = can1_ams_cell_voltages_v1s5_decode(can1_ams_cell_voltages.v1s5);
 80128e6:	4baa      	ldr	r3, [pc, #680]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 80128e8:	7a5b      	ldrb	r3, [r3, #9]
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7f1 ff68 	bl	80047c0 <can1_ams_cell_voltages_v1s5_decode>
 80128f0:	eeb0 7a40 	vmov.f32	s14, s0
 80128f4:	eef0 7a60 	vmov.f32	s15, s1
 80128f8:	463b      	mov	r3, r7
 80128fa:	ed83 7b08 	vstr	d7, [r3, #32]
       ams_cell_voltages.v7s5 = can1_ams_cell_voltages_v7s5_decode(can1_ams_cell_voltages.v7s5);
 80128fe:	4ba4      	ldr	r3, [pc, #656]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012900:	7a9b      	ldrb	r3, [r3, #10]
 8012902:	4618      	mov	r0, r3
 8012904:	f7f1 ffb4 	bl	8004870 <can1_ams_cell_voltages_v7s5_decode>
 8012908:	eeb0 7a40 	vmov.f32	s14, s0
 801290c:	eef0 7a60 	vmov.f32	s15, s1
 8012910:	463b      	mov	r3, r7
 8012912:	ed83 7b98 	vstr	d7, [r3, #608]	; 0x260
       ams_cell_voltages.v1s6 = can1_ams_cell_voltages_v1s6_decode(can1_ams_cell_voltages.v1s6);
 8012916:	4b9e      	ldr	r3, [pc, #632]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012918:	7adb      	ldrb	r3, [r3, #11]
 801291a:	4618      	mov	r0, r3
 801291c:	f7f2 f800 	bl	8004920 <can1_ams_cell_voltages_v1s6_decode>
 8012920:	eeb0 7a40 	vmov.f32	s14, s0
 8012924:	eef0 7a60 	vmov.f32	s15, s1
 8012928:	463b      	mov	r3, r7
 801292a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
       ams_cell_voltages.v7s6 = can1_ams_cell_voltages_v7s6_decode(can1_ams_cell_voltages.v7s6);
 801292e:	4b98      	ldr	r3, [pc, #608]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012930:	7b1b      	ldrb	r3, [r3, #12]
 8012932:	4618      	mov	r0, r3
 8012934:	f7f2 f84c 	bl	80049d0 <can1_ams_cell_voltages_v7s6_decode>
 8012938:	eeb0 7a40 	vmov.f32	s14, s0
 801293c:	eef0 7a60 	vmov.f32	s15, s1
 8012940:	463b      	mov	r3, r7
 8012942:	ed83 7b9a 	vstr	d7, [r3, #616]	; 0x268
       ams_cell_voltages.v1s7 = can1_ams_cell_voltages_v1s7_decode(can1_ams_cell_voltages.v1s7);
 8012946:	4b92      	ldr	r3, [pc, #584]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012948:	7b5b      	ldrb	r3, [r3, #13]
 801294a:	4618      	mov	r0, r3
 801294c:	f7f2 f898 	bl	8004a80 <can1_ams_cell_voltages_v1s7_decode>
 8012950:	eeb0 7a40 	vmov.f32	s14, s0
 8012954:	eef0 7a60 	vmov.f32	s15, s1
 8012958:	463b      	mov	r3, r7
 801295a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
       ams_cell_voltages.v7s7 = can1_ams_cell_voltages_v7s7_decode(can1_ams_cell_voltages.v7s7);
 801295e:	4b8c      	ldr	r3, [pc, #560]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012960:	7b9b      	ldrb	r3, [r3, #14]
 8012962:	4618      	mov	r0, r3
 8012964:	f7f2 f8e4 	bl	8004b30 <can1_ams_cell_voltages_v7s7_decode>
 8012968:	eeb0 7a40 	vmov.f32	s14, s0
 801296c:	eef0 7a60 	vmov.f32	s15, s1
 8012970:	463b      	mov	r3, r7
 8012972:	ed83 7b9c 	vstr	d7, [r3, #624]	; 0x270
       ams_cell_voltages.v1s8 = can1_ams_cell_voltages_v1s8_decode(can1_ams_cell_voltages.v1s8);
 8012976:	4b86      	ldr	r3, [pc, #536]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012978:	7bdb      	ldrb	r3, [r3, #15]
 801297a:	4618      	mov	r0, r3
 801297c:	f7f2 f930 	bl	8004be0 <can1_ams_cell_voltages_v1s8_decode>
 8012980:	eeb0 7a40 	vmov.f32	s14, s0
 8012984:	eef0 7a60 	vmov.f32	s15, s1
 8012988:	463b      	mov	r3, r7
 801298a:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
       ams_cell_voltages.v7s8 = can1_ams_cell_voltages_v7s8_decode(can1_ams_cell_voltages.v7s8);
 801298e:	4b80      	ldr	r3, [pc, #512]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012990:	7c1b      	ldrb	r3, [r3, #16]
 8012992:	4618      	mov	r0, r3
 8012994:	f7f2 f97c 	bl	8004c90 <can1_ams_cell_voltages_v7s8_decode>
 8012998:	eeb0 7a40 	vmov.f32	s14, s0
 801299c:	eef0 7a60 	vmov.f32	s15, s1
 80129a0:	463b      	mov	r3, r7
 80129a2:	ed83 7b9e 	vstr	d7, [r3, #632]	; 0x278
       ams_cell_voltages.v1s9 = can1_ams_cell_voltages_v1s9_decode(can1_ams_cell_voltages.v1s9);
 80129a6:	4b7a      	ldr	r3, [pc, #488]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 80129a8:	7c5b      	ldrb	r3, [r3, #17]
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7f2 f9c8 	bl	8004d40 <can1_ams_cell_voltages_v1s9_decode>
 80129b0:	eeb0 7a40 	vmov.f32	s14, s0
 80129b4:	eef0 7a60 	vmov.f32	s15, s1
 80129b8:	463b      	mov	r3, r7
 80129ba:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
       ams_cell_voltages.v7s9 = can1_ams_cell_voltages_v7s9_decode(can1_ams_cell_voltages.v7s9);
 80129be:	4b74      	ldr	r3, [pc, #464]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 80129c0:	7c9b      	ldrb	r3, [r3, #18]
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7f2 fa14 	bl	8004df0 <can1_ams_cell_voltages_v7s9_decode>
 80129c8:	eeb0 7a40 	vmov.f32	s14, s0
 80129cc:	eef0 7a60 	vmov.f32	s15, s1
 80129d0:	463b      	mov	r3, r7
 80129d2:	ed83 7ba0 	vstr	d7, [r3, #640]	; 0x280
       ams_cell_voltages.v1s10 = can1_ams_cell_voltages_v1s10_decode(can1_ams_cell_voltages.v1s10);
 80129d6:	4b6e      	ldr	r3, [pc, #440]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 80129d8:	7cdb      	ldrb	r3, [r3, #19]
 80129da:	4618      	mov	r0, r3
 80129dc:	f7f2 fa60 	bl	8004ea0 <can1_ams_cell_voltages_v1s10_decode>
 80129e0:	eeb0 7a40 	vmov.f32	s14, s0
 80129e4:	eef0 7a60 	vmov.f32	s15, s1
 80129e8:	463b      	mov	r3, r7
 80129ea:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
       ams_cell_voltages.v7s10 = can1_ams_cell_voltages_v7s10_decode(can1_ams_cell_voltages.v7s10);
 80129ee:	4b68      	ldr	r3, [pc, #416]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 80129f0:	7d1b      	ldrb	r3, [r3, #20]
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7f2 faac 	bl	8004f50 <can1_ams_cell_voltages_v7s10_decode>
 80129f8:	eeb0 7a40 	vmov.f32	s14, s0
 80129fc:	eef0 7a60 	vmov.f32	s15, s1
 8012a00:	463b      	mov	r3, r7
 8012a02:	ed83 7ba2 	vstr	d7, [r3, #648]	; 0x288
       ams_cell_voltages.v1s11 = can1_ams_cell_voltages_v1s11_decode(can1_ams_cell_voltages.v1s11);
 8012a06:	4b62      	ldr	r3, [pc, #392]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012a08:	7d5b      	ldrb	r3, [r3, #21]
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f7f2 faf8 	bl	8005000 <can1_ams_cell_voltages_v1s11_decode>
 8012a10:	eeb0 7a40 	vmov.f32	s14, s0
 8012a14:	eef0 7a60 	vmov.f32	s15, s1
 8012a18:	463b      	mov	r3, r7
 8012a1a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
       ams_cell_voltages.v7s11 = can1_ams_cell_voltages_v7s11_decode(can1_ams_cell_voltages.v7s11);
 8012a1e:	4b5c      	ldr	r3, [pc, #368]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012a20:	7d9b      	ldrb	r3, [r3, #22]
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7f2 fb44 	bl	80050b0 <can1_ams_cell_voltages_v7s11_decode>
 8012a28:	eeb0 7a40 	vmov.f32	s14, s0
 8012a2c:	eef0 7a60 	vmov.f32	s15, s1
 8012a30:	463b      	mov	r3, r7
 8012a32:	ed83 7ba4 	vstr	d7, [r3, #656]	; 0x290
       ams_cell_voltages.v1s12 = can1_ams_cell_voltages_v1s12_decode(can1_ams_cell_voltages.v1s12);
 8012a36:	4b56      	ldr	r3, [pc, #344]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012a38:	7ddb      	ldrb	r3, [r3, #23]
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7f2 fb90 	bl	8005160 <can1_ams_cell_voltages_v1s12_decode>
 8012a40:	eeb0 7a40 	vmov.f32	s14, s0
 8012a44:	eef0 7a60 	vmov.f32	s15, s1
 8012a48:	463b      	mov	r3, r7
 8012a4a:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
       ams_cell_voltages.v7s12 = can1_ams_cell_voltages_v7s12_decode(can1_ams_cell_voltages.v7s12);
 8012a4e:	4b50      	ldr	r3, [pc, #320]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012a50:	7e1b      	ldrb	r3, [r3, #24]
 8012a52:	4618      	mov	r0, r3
 8012a54:	f7f2 fbdc 	bl	8005210 <can1_ams_cell_voltages_v7s12_decode>
 8012a58:	eeb0 7a40 	vmov.f32	s14, s0
 8012a5c:	eef0 7a60 	vmov.f32	s15, s1
 8012a60:	463b      	mov	r3, r7
 8012a62:	ed83 7ba6 	vstr	d7, [r3, #664]	; 0x298
       ams_cell_voltages.v2s1 = can1_ams_cell_voltages_v2s1_decode(can1_ams_cell_voltages.v2s1);
 8012a66:	4b4a      	ldr	r3, [pc, #296]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012a68:	7e5b      	ldrb	r3, [r3, #25]
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f7f2 fc28 	bl	80052c0 <can1_ams_cell_voltages_v2s1_decode>
 8012a70:	eeb0 7a40 	vmov.f32	s14, s0
 8012a74:	eef0 7a60 	vmov.f32	s15, s1
 8012a78:	463b      	mov	r3, r7
 8012a7a:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
       ams_cell_voltages.v8s1 = can1_ams_cell_voltages_v8s1_decode(can1_ams_cell_voltages.v8s1);
 8012a7e:	4b44      	ldr	r3, [pc, #272]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012a80:	7e9b      	ldrb	r3, [r3, #26]
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7f2 fc74 	bl	8005370 <can1_ams_cell_voltages_v8s1_decode>
 8012a88:	eeb0 7a40 	vmov.f32	s14, s0
 8012a8c:	eef0 7a60 	vmov.f32	s15, s1
 8012a90:	463b      	mov	r3, r7
 8012a92:	ed83 7ba8 	vstr	d7, [r3, #672]	; 0x2a0
       ams_cell_voltages.v2s2 = can1_ams_cell_voltages_v2s2_decode(can1_ams_cell_voltages.v2s2);
 8012a96:	4b3e      	ldr	r3, [pc, #248]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012a98:	7edb      	ldrb	r3, [r3, #27]
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7f2 fcc0 	bl	8005420 <can1_ams_cell_voltages_v2s2_decode>
 8012aa0:	eeb0 7a40 	vmov.f32	s14, s0
 8012aa4:	eef0 7a60 	vmov.f32	s15, s1
 8012aa8:	463b      	mov	r3, r7
 8012aaa:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
       ams_cell_voltages.v8s2 = can1_ams_cell_voltages_v8s2_decode(can1_ams_cell_voltages.v8s2);
 8012aae:	4b38      	ldr	r3, [pc, #224]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012ab0:	7f1b      	ldrb	r3, [r3, #28]
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7f2 fd0c 	bl	80054d0 <can1_ams_cell_voltages_v8s2_decode>
 8012ab8:	eeb0 7a40 	vmov.f32	s14, s0
 8012abc:	eef0 7a60 	vmov.f32	s15, s1
 8012ac0:	463b      	mov	r3, r7
 8012ac2:	ed83 7baa 	vstr	d7, [r3, #680]	; 0x2a8
       ams_cell_voltages.v2s3 = can1_ams_cell_voltages_v2s3_decode(can1_ams_cell_voltages.v2s3);
 8012ac6:	4b32      	ldr	r3, [pc, #200]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012ac8:	7f5b      	ldrb	r3, [r3, #29]
 8012aca:	4618      	mov	r0, r3
 8012acc:	f7f2 fd58 	bl	8005580 <can1_ams_cell_voltages_v2s3_decode>
 8012ad0:	eeb0 7a40 	vmov.f32	s14, s0
 8012ad4:	eef0 7a60 	vmov.f32	s15, s1
 8012ad8:	463b      	mov	r3, r7
 8012ada:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
       ams_cell_voltages.v8s3 = can1_ams_cell_voltages_v8s3_decode(can1_ams_cell_voltages.v8s3);
 8012ade:	4b2c      	ldr	r3, [pc, #176]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012ae0:	7f9b      	ldrb	r3, [r3, #30]
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f7f2 fda4 	bl	8005630 <can1_ams_cell_voltages_v8s3_decode>
 8012ae8:	eeb0 7a40 	vmov.f32	s14, s0
 8012aec:	eef0 7a60 	vmov.f32	s15, s1
 8012af0:	463b      	mov	r3, r7
 8012af2:	ed83 7bac 	vstr	d7, [r3, #688]	; 0x2b0
       ams_cell_voltages.v2s4 = can1_ams_cell_voltages_v2s4_decode(can1_ams_cell_voltages.v2s4);
 8012af6:	4b26      	ldr	r3, [pc, #152]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012af8:	7fdb      	ldrb	r3, [r3, #31]
 8012afa:	4618      	mov	r0, r3
 8012afc:	f7f2 fdf0 	bl	80056e0 <can1_ams_cell_voltages_v2s4_decode>
 8012b00:	eeb0 7a40 	vmov.f32	s14, s0
 8012b04:	eef0 7a60 	vmov.f32	s15, s1
 8012b08:	463b      	mov	r3, r7
 8012b0a:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
       ams_cell_voltages.v8s4 = can1_ams_cell_voltages_v8s4_decode(can1_ams_cell_voltages.v8s4);
 8012b0e:	4b20      	ldr	r3, [pc, #128]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7f2 fe3b 	bl	8005790 <can1_ams_cell_voltages_v8s4_decode>
 8012b1a:	eeb0 7a40 	vmov.f32	s14, s0
 8012b1e:	eef0 7a60 	vmov.f32	s15, s1
 8012b22:	463b      	mov	r3, r7
 8012b24:	ed83 7bae 	vstr	d7, [r3, #696]	; 0x2b8
       ams_cell_voltages.v2s5 = can1_ams_cell_voltages_v2s5_decode(can1_ams_cell_voltages.v2s5);
 8012b28:	4b19      	ldr	r3, [pc, #100]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012b2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7f2 fe86 	bl	8005840 <can1_ams_cell_voltages_v2s5_decode>
 8012b34:	eeb0 7a40 	vmov.f32	s14, s0
 8012b38:	eef0 7a60 	vmov.f32	s15, s1
 8012b3c:	463b      	mov	r3, r7
 8012b3e:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
       ams_cell_voltages.v8s5 = can1_ams_cell_voltages_v8s5_decode(can1_ams_cell_voltages.v8s5);
 8012b42:	4b13      	ldr	r3, [pc, #76]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012b44:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f7f2 fed1 	bl	80058f0 <can1_ams_cell_voltages_v8s5_decode>
 8012b4e:	eeb0 7a40 	vmov.f32	s14, s0
 8012b52:	eef0 7a60 	vmov.f32	s15, s1
 8012b56:	463b      	mov	r3, r7
 8012b58:	ed83 7bb0 	vstr	d7, [r3, #704]	; 0x2c0
       ams_cell_voltages.v2s6 = can1_ams_cell_voltages_v2s6_decode(can1_ams_cell_voltages.v2s6);
 8012b5c:	4b0c      	ldr	r3, [pc, #48]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012b5e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7f2 ff1c 	bl	80059a0 <can1_ams_cell_voltages_v2s6_decode>
 8012b68:	eeb0 7a40 	vmov.f32	s14, s0
 8012b6c:	eef0 7a60 	vmov.f32	s15, s1
 8012b70:	463b      	mov	r3, r7
 8012b72:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
       ams_cell_voltages.v8s6 = can1_ams_cell_voltages_v8s6_decode(can1_ams_cell_voltages.v8s6);
 8012b76:	4b06      	ldr	r3, [pc, #24]	; (8012b90 <can1_ams_cell_voltages_receive+0x37c>)
 8012b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7f2 ff67 	bl	8005a50 <can1_ams_cell_voltages_v8s6_decode>
 8012b82:	eeb0 7a40 	vmov.f32	s14, s0
 8012b86:	eef0 7a60 	vmov.f32	s15, s1
 8012b8a:	e003      	b.n	8012b94 <can1_ams_cell_voltages_receive+0x380>
 8012b8c:	20001628 	.word	0x20001628
 8012b90:	200014f4 	.word	0x200014f4
 8012b94:	463b      	mov	r3, r7
 8012b96:	ed83 7bb2 	vstr	d7, [r3, #712]	; 0x2c8
       ams_cell_voltages.v2s7 = can1_ams_cell_voltages_v2s7_decode(can1_ams_cell_voltages.v2s7);
 8012b9a:	4bec      	ldr	r3, [pc, #944]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012b9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f7f2 ffad 	bl	8005b00 <can1_ams_cell_voltages_v2s7_decode>
 8012ba6:	eeb0 7a40 	vmov.f32	s14, s0
 8012baa:	eef0 7a60 	vmov.f32	s15, s1
 8012bae:	463b      	mov	r3, r7
 8012bb0:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
       ams_cell_voltages.v8s7 = can1_ams_cell_voltages_v8s7_decode(can1_ams_cell_voltages.v8s7);
 8012bb4:	4be5      	ldr	r3, [pc, #916]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012bb6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7f2 fff8 	bl	8005bb0 <can1_ams_cell_voltages_v8s7_decode>
 8012bc0:	eeb0 7a40 	vmov.f32	s14, s0
 8012bc4:	eef0 7a60 	vmov.f32	s15, s1
 8012bc8:	463b      	mov	r3, r7
 8012bca:	ed83 7bb4 	vstr	d7, [r3, #720]	; 0x2d0
       ams_cell_voltages.v2s8 = can1_ams_cell_voltages_v2s8_decode(can1_ams_cell_voltages.v2s8);
 8012bce:	4bdf      	ldr	r3, [pc, #892]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012bd0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7f3 f843 	bl	8005c60 <can1_ams_cell_voltages_v2s8_decode>
 8012bda:	eeb0 7a40 	vmov.f32	s14, s0
 8012bde:	eef0 7a60 	vmov.f32	s15, s1
 8012be2:	463b      	mov	r3, r7
 8012be4:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
       ams_cell_voltages.v8s8 = can1_ams_cell_voltages_v8s8_decode(can1_ams_cell_voltages.v8s8);
 8012be8:	4bd8      	ldr	r3, [pc, #864]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7f3 f88e 	bl	8005d10 <can1_ams_cell_voltages_v8s8_decode>
 8012bf4:	eeb0 7a40 	vmov.f32	s14, s0
 8012bf8:	eef0 7a60 	vmov.f32	s15, s1
 8012bfc:	463b      	mov	r3, r7
 8012bfe:	ed83 7bb6 	vstr	d7, [r3, #728]	; 0x2d8
       ams_cell_voltages.v2s9 = can1_ams_cell_voltages_v2s9_decode(can1_ams_cell_voltages.v2s9);
 8012c02:	4bd2      	ldr	r3, [pc, #840]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012c04:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f7f3 f8d9 	bl	8005dc0 <can1_ams_cell_voltages_v2s9_decode>
 8012c0e:	eeb0 7a40 	vmov.f32	s14, s0
 8012c12:	eef0 7a60 	vmov.f32	s15, s1
 8012c16:	463b      	mov	r3, r7
 8012c18:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
       ams_cell_voltages.v8s9 = can1_ams_cell_voltages_v8s9_decode(can1_ams_cell_voltages.v8s9);
 8012c1c:	4bcb      	ldr	r3, [pc, #812]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012c1e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8012c22:	4618      	mov	r0, r3
 8012c24:	f7f3 f924 	bl	8005e70 <can1_ams_cell_voltages_v8s9_decode>
 8012c28:	eeb0 7a40 	vmov.f32	s14, s0
 8012c2c:	eef0 7a60 	vmov.f32	s15, s1
 8012c30:	463b      	mov	r3, r7
 8012c32:	ed83 7bb8 	vstr	d7, [r3, #736]	; 0x2e0
       ams_cell_voltages.v2s10 = can1_ams_cell_voltages_v2s10_decode(can1_ams_cell_voltages.v2s10);
 8012c36:	4bc5      	ldr	r3, [pc, #788]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012c38:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7f3 f96f 	bl	8005f20 <can1_ams_cell_voltages_v2s10_decode>
 8012c42:	eeb0 7a40 	vmov.f32	s14, s0
 8012c46:	eef0 7a60 	vmov.f32	s15, s1
 8012c4a:	463b      	mov	r3, r7
 8012c4c:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
       ams_cell_voltages.v8s10 = can1_ams_cell_voltages_v8s10_decode(can1_ams_cell_voltages.v8s10);
 8012c50:	4bbe      	ldr	r3, [pc, #760]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012c52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7f3 f9ba 	bl	8005fd0 <can1_ams_cell_voltages_v8s10_decode>
 8012c5c:	eeb0 7a40 	vmov.f32	s14, s0
 8012c60:	eef0 7a60 	vmov.f32	s15, s1
 8012c64:	463b      	mov	r3, r7
 8012c66:	ed83 7bba 	vstr	d7, [r3, #744]	; 0x2e8
       ams_cell_voltages.v2s11 = can1_ams_cell_voltages_v2s11_decode(can1_ams_cell_voltages.v2s11);
 8012c6a:	4bb8      	ldr	r3, [pc, #736]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012c6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c70:	4618      	mov	r0, r3
 8012c72:	f7f3 fa05 	bl	8006080 <can1_ams_cell_voltages_v2s11_decode>
 8012c76:	eeb0 7a40 	vmov.f32	s14, s0
 8012c7a:	eef0 7a60 	vmov.f32	s15, s1
 8012c7e:	463b      	mov	r3, r7
 8012c80:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
       ams_cell_voltages.v8s11 = can1_ams_cell_voltages_v8s11_decode(can1_ams_cell_voltages.v8s11);
 8012c84:	4bb1      	ldr	r3, [pc, #708]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012c86:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7f3 fa50 	bl	8006130 <can1_ams_cell_voltages_v8s11_decode>
 8012c90:	eeb0 7a40 	vmov.f32	s14, s0
 8012c94:	eef0 7a60 	vmov.f32	s15, s1
 8012c98:	463b      	mov	r3, r7
 8012c9a:	ed83 7bbc 	vstr	d7, [r3, #752]	; 0x2f0
       ams_cell_voltages.v2s12 = can1_ams_cell_voltages_v2s12_decode(can1_ams_cell_voltages.v2s12);
 8012c9e:	4bab      	ldr	r3, [pc, #684]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012ca0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7f3 fa9b 	bl	80061e0 <can1_ams_cell_voltages_v2s12_decode>
 8012caa:	eeb0 7a40 	vmov.f32	s14, s0
 8012cae:	eef0 7a60 	vmov.f32	s15, s1
 8012cb2:	463b      	mov	r3, r7
 8012cb4:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
       ams_cell_voltages.v8s12 = can1_ams_cell_voltages_v8s12_decode(can1_ams_cell_voltages.v8s12);
 8012cb8:	4ba4      	ldr	r3, [pc, #656]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012cba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f7f3 fae6 	bl	8006290 <can1_ams_cell_voltages_v8s12_decode>
 8012cc4:	eeb0 7a40 	vmov.f32	s14, s0
 8012cc8:	eef0 7a60 	vmov.f32	s15, s1
 8012ccc:	463b      	mov	r3, r7
 8012cce:	ed83 7bbe 	vstr	d7, [r3, #760]	; 0x2f8
       ams_cell_voltages.v3s1 = can1_ams_cell_voltages_v3s1_decode(can1_ams_cell_voltages.v3s1);
 8012cd2:	4b9e      	ldr	r3, [pc, #632]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012cd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f7f3 fb31 	bl	8006340 <can1_ams_cell_voltages_v3s1_decode>
 8012cde:	eeb0 7a40 	vmov.f32	s14, s0
 8012ce2:	eef0 7a60 	vmov.f32	s15, s1
 8012ce6:	463b      	mov	r3, r7
 8012ce8:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
       ams_cell_voltages.v9s1 = can1_ams_cell_voltages_v9s1_decode(can1_ams_cell_voltages.v9s1);
 8012cec:	4b97      	ldr	r3, [pc, #604]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012cee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f7f3 fb7c 	bl	80063f0 <can1_ams_cell_voltages_v9s1_decode>
 8012cf8:	eeb0 7a40 	vmov.f32	s14, s0
 8012cfc:	eef0 7a60 	vmov.f32	s15, s1
 8012d00:	463b      	mov	r3, r7
 8012d02:	ed83 7bc0 	vstr	d7, [r3, #768]	; 0x300
       ams_cell_voltages.v3s2 = can1_ams_cell_voltages_v3s2_decode(can1_ams_cell_voltages.v3s2);
 8012d06:	4b91      	ldr	r3, [pc, #580]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012d08:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7f3 fbc7 	bl	80064a0 <can1_ams_cell_voltages_v3s2_decode>
 8012d12:	eeb0 7a40 	vmov.f32	s14, s0
 8012d16:	eef0 7a60 	vmov.f32	s15, s1
 8012d1a:	463b      	mov	r3, r7
 8012d1c:	ed83 7b32 	vstr	d7, [r3, #200]	; 0xc8
       ams_cell_voltages.v9s2 = can1_ams_cell_voltages_v9s2_decode(can1_ams_cell_voltages.v9s2);
 8012d20:	4b8a      	ldr	r3, [pc, #552]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012d22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012d26:	4618      	mov	r0, r3
 8012d28:	f7f3 fc12 	bl	8006550 <can1_ams_cell_voltages_v9s2_decode>
 8012d2c:	eeb0 7a40 	vmov.f32	s14, s0
 8012d30:	eef0 7a60 	vmov.f32	s15, s1
 8012d34:	463b      	mov	r3, r7
 8012d36:	ed83 7bc2 	vstr	d7, [r3, #776]	; 0x308
       ams_cell_voltages.v3s3 = can1_ams_cell_voltages_v3s3_decode(can1_ams_cell_voltages.v3s3);
 8012d3a:	4b84      	ldr	r3, [pc, #528]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7f3 fc5d 	bl	8006600 <can1_ams_cell_voltages_v3s3_decode>
 8012d46:	eeb0 7a40 	vmov.f32	s14, s0
 8012d4a:	eef0 7a60 	vmov.f32	s15, s1
 8012d4e:	463b      	mov	r3, r7
 8012d50:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
       ams_cell_voltages.v9s3 = can1_ams_cell_voltages_v9s3_decode(can1_ams_cell_voltages.v9s3);
 8012d54:	4b7d      	ldr	r3, [pc, #500]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012d56:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f7f3 fca8 	bl	80066b0 <can1_ams_cell_voltages_v9s3_decode>
 8012d60:	eeb0 7a40 	vmov.f32	s14, s0
 8012d64:	eef0 7a60 	vmov.f32	s15, s1
 8012d68:	463b      	mov	r3, r7
 8012d6a:	ed83 7bc4 	vstr	d7, [r3, #784]	; 0x310
       ams_cell_voltages.v3s4 = can1_ams_cell_voltages_v3s4_decode(can1_ams_cell_voltages.v3s4);
 8012d6e:	4b77      	ldr	r3, [pc, #476]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012d70:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8012d74:	4618      	mov	r0, r3
 8012d76:	f7f3 fcf3 	bl	8006760 <can1_ams_cell_voltages_v3s4_decode>
 8012d7a:	eeb0 7a40 	vmov.f32	s14, s0
 8012d7e:	eef0 7a60 	vmov.f32	s15, s1
 8012d82:	463b      	mov	r3, r7
 8012d84:	ed83 7b36 	vstr	d7, [r3, #216]	; 0xd8
       ams_cell_voltages.v9s4 = can1_ams_cell_voltages_v9s4_decode(can1_ams_cell_voltages.v9s4);
 8012d88:	4b70      	ldr	r3, [pc, #448]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012d8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f7f3 fd3e 	bl	8006810 <can1_ams_cell_voltages_v9s4_decode>
 8012d94:	eeb0 7a40 	vmov.f32	s14, s0
 8012d98:	eef0 7a60 	vmov.f32	s15, s1
 8012d9c:	463b      	mov	r3, r7
 8012d9e:	ed83 7bc6 	vstr	d7, [r3, #792]	; 0x318
       ams_cell_voltages.v3s5 = can1_ams_cell_voltages_v3s5_decode(can1_ams_cell_voltages.v3s5);
 8012da2:	4b6a      	ldr	r3, [pc, #424]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012da4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7f3 fd89 	bl	80068c0 <can1_ams_cell_voltages_v3s5_decode>
 8012dae:	eeb0 7a40 	vmov.f32	s14, s0
 8012db2:	eef0 7a60 	vmov.f32	s15, s1
 8012db6:	463b      	mov	r3, r7
 8012db8:	ed83 7b38 	vstr	d7, [r3, #224]	; 0xe0
       ams_cell_voltages.v9s5 = can1_ams_cell_voltages_v9s5_decode(can1_ams_cell_voltages.v9s5);
 8012dbc:	4b63      	ldr	r3, [pc, #396]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012dbe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7f3 fdd4 	bl	8006970 <can1_ams_cell_voltages_v9s5_decode>
 8012dc8:	eeb0 7a40 	vmov.f32	s14, s0
 8012dcc:	eef0 7a60 	vmov.f32	s15, s1
 8012dd0:	463b      	mov	r3, r7
 8012dd2:	ed83 7bc8 	vstr	d7, [r3, #800]	; 0x320
       ams_cell_voltages.v3s6 = can1_ams_cell_voltages_v3s6_decode(can1_ams_cell_voltages.v3s6);
 8012dd6:	4b5d      	ldr	r3, [pc, #372]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012dd8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7f3 fe1f 	bl	8006a20 <can1_ams_cell_voltages_v3s6_decode>
 8012de2:	eeb0 7a40 	vmov.f32	s14, s0
 8012de6:	eef0 7a60 	vmov.f32	s15, s1
 8012dea:	463b      	mov	r3, r7
 8012dec:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8
       ams_cell_voltages.v9s6 = can1_ams_cell_voltages_v9s6_decode(can1_ams_cell_voltages.v9s6);
 8012df0:	4b56      	ldr	r3, [pc, #344]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7f3 fe6a 	bl	8006ad0 <can1_ams_cell_voltages_v9s6_decode>
 8012dfc:	eeb0 7a40 	vmov.f32	s14, s0
 8012e00:	eef0 7a60 	vmov.f32	s15, s1
 8012e04:	463b      	mov	r3, r7
 8012e06:	ed83 7bca 	vstr	d7, [r3, #808]	; 0x328
       ams_cell_voltages.v3s7 = can1_ams_cell_voltages_v3s7_decode(can1_ams_cell_voltages.v3s7);
 8012e0a:	4b50      	ldr	r3, [pc, #320]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7f3 feb5 	bl	8006b80 <can1_ams_cell_voltages_v3s7_decode>
 8012e16:	eeb0 7a40 	vmov.f32	s14, s0
 8012e1a:	eef0 7a60 	vmov.f32	s15, s1
 8012e1e:	463b      	mov	r3, r7
 8012e20:	ed83 7b3c 	vstr	d7, [r3, #240]	; 0xf0
       ams_cell_voltages.v9s7 = can1_ams_cell_voltages_v9s7_decode(can1_ams_cell_voltages.v9s7);
 8012e24:	4b49      	ldr	r3, [pc, #292]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7f3 ff00 	bl	8006c30 <can1_ams_cell_voltages_v9s7_decode>
 8012e30:	eeb0 7a40 	vmov.f32	s14, s0
 8012e34:	eef0 7a60 	vmov.f32	s15, s1
 8012e38:	463b      	mov	r3, r7
 8012e3a:	ed83 7bcc 	vstr	d7, [r3, #816]	; 0x330
       ams_cell_voltages.v3s8 = can1_ams_cell_voltages_v3s8_decode(can1_ams_cell_voltages.v3s8);
 8012e3e:	4b43      	ldr	r3, [pc, #268]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012e40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7f3 ff4b 	bl	8006ce0 <can1_ams_cell_voltages_v3s8_decode>
 8012e4a:	eeb0 7a40 	vmov.f32	s14, s0
 8012e4e:	eef0 7a60 	vmov.f32	s15, s1
 8012e52:	463b      	mov	r3, r7
 8012e54:	ed83 7b3e 	vstr	d7, [r3, #248]	; 0xf8
       ams_cell_voltages.v9s8 = can1_ams_cell_voltages_v9s8_decode(can1_ams_cell_voltages.v9s8);
 8012e58:	4b3c      	ldr	r3, [pc, #240]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7f3 ff96 	bl	8006d90 <can1_ams_cell_voltages_v9s8_decode>
 8012e64:	eeb0 7a40 	vmov.f32	s14, s0
 8012e68:	eef0 7a60 	vmov.f32	s15, s1
 8012e6c:	463b      	mov	r3, r7
 8012e6e:	ed83 7bce 	vstr	d7, [r3, #824]	; 0x338
       ams_cell_voltages.v3s9 = can1_ams_cell_voltages_v3s9_decode(can1_ams_cell_voltages.v3s9);
 8012e72:	4b36      	ldr	r3, [pc, #216]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f7f3 ffe1 	bl	8006e40 <can1_ams_cell_voltages_v3s9_decode>
 8012e7e:	eeb0 7a40 	vmov.f32	s14, s0
 8012e82:	eef0 7a60 	vmov.f32	s15, s1
 8012e86:	463b      	mov	r3, r7
 8012e88:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
       ams_cell_voltages.v9s9 = can1_ams_cell_voltages_v9s9_decode(can1_ams_cell_voltages.v9s9);
 8012e8c:	4b2f      	ldr	r3, [pc, #188]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7f4 f82c 	bl	8006ef0 <can1_ams_cell_voltages_v9s9_decode>
 8012e98:	eeb0 7a40 	vmov.f32	s14, s0
 8012e9c:	eef0 7a60 	vmov.f32	s15, s1
 8012ea0:	463b      	mov	r3, r7
 8012ea2:	ed83 7bd0 	vstr	d7, [r3, #832]	; 0x340
       ams_cell_voltages.v3s10 = can1_ams_cell_voltages_v3s10_decode(can1_ams_cell_voltages.v3s10);
 8012ea6:	4b29      	ldr	r3, [pc, #164]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012ea8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7f4 f877 	bl	8006fa0 <can1_ams_cell_voltages_v3s10_decode>
 8012eb2:	eeb0 7a40 	vmov.f32	s14, s0
 8012eb6:	eef0 7a60 	vmov.f32	s15, s1
 8012eba:	463b      	mov	r3, r7
 8012ebc:	ed83 7b42 	vstr	d7, [r3, #264]	; 0x108
       ams_cell_voltages.v9s10 = can1_ams_cell_voltages_v9s10_decode(can1_ams_cell_voltages.v9s10);
 8012ec0:	4b22      	ldr	r3, [pc, #136]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012ec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f7f4 f8c2 	bl	8007050 <can1_ams_cell_voltages_v9s10_decode>
 8012ecc:	eeb0 7a40 	vmov.f32	s14, s0
 8012ed0:	eef0 7a60 	vmov.f32	s15, s1
 8012ed4:	463b      	mov	r3, r7
 8012ed6:	ed83 7bd2 	vstr	d7, [r3, #840]	; 0x348
       ams_cell_voltages.v3s11 = can1_ams_cell_voltages_v3s11_decode(can1_ams_cell_voltages.v3s11);
 8012eda:	4b1c      	ldr	r3, [pc, #112]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012edc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f7f4 f90d 	bl	8007100 <can1_ams_cell_voltages_v3s11_decode>
 8012ee6:	eeb0 7a40 	vmov.f32	s14, s0
 8012eea:	eef0 7a60 	vmov.f32	s15, s1
 8012eee:	463b      	mov	r3, r7
 8012ef0:	ed83 7b44 	vstr	d7, [r3, #272]	; 0x110
       ams_cell_voltages.v9s11 = can1_ams_cell_voltages_v9s11_decode(can1_ams_cell_voltages.v9s11);
 8012ef4:	4b15      	ldr	r3, [pc, #84]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012ef6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7f4 f958 	bl	80071b0 <can1_ams_cell_voltages_v9s11_decode>
 8012f00:	eeb0 7a40 	vmov.f32	s14, s0
 8012f04:	eef0 7a60 	vmov.f32	s15, s1
 8012f08:	463b      	mov	r3, r7
 8012f0a:	ed83 7bd4 	vstr	d7, [r3, #848]	; 0x350
       ams_cell_voltages.v3s12 = can1_ams_cell_voltages_v3s12_decode(can1_ams_cell_voltages.v3s12);
 8012f0e:	4b0f      	ldr	r3, [pc, #60]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012f10:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8012f14:	4618      	mov	r0, r3
 8012f16:	f7f4 f9a3 	bl	8007260 <can1_ams_cell_voltages_v3s12_decode>
 8012f1a:	eeb0 7a40 	vmov.f32	s14, s0
 8012f1e:	eef0 7a60 	vmov.f32	s15, s1
 8012f22:	463b      	mov	r3, r7
 8012f24:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
       ams_cell_voltages.v9s12 = can1_ams_cell_voltages_v9s12_decode(can1_ams_cell_voltages.v9s12);
 8012f28:	4b08      	ldr	r3, [pc, #32]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012f2a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7f4 f9ee 	bl	8007310 <can1_ams_cell_voltages_v9s12_decode>
 8012f34:	eeb0 7a40 	vmov.f32	s14, s0
 8012f38:	eef0 7a60 	vmov.f32	s15, s1
 8012f3c:	463b      	mov	r3, r7
 8012f3e:	ed83 7bd6 	vstr	d7, [r3, #856]	; 0x358
       ams_cell_voltages.v4s1 = can1_ams_cell_voltages_v4s1_decode(can1_ams_cell_voltages.v4s1);
 8012f42:	4b02      	ldr	r3, [pc, #8]	; (8012f4c <can1_ams_cell_voltages_receive+0x738>)
 8012f44:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8012f48:	e002      	b.n	8012f50 <can1_ams_cell_voltages_receive+0x73c>
 8012f4a:	bf00      	nop
 8012f4c:	200014f4 	.word	0x200014f4
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7f4 fa35 	bl	80073c0 <can1_ams_cell_voltages_v4s1_decode>
 8012f56:	eeb0 7a40 	vmov.f32	s14, s0
 8012f5a:	eef0 7a60 	vmov.f32	s15, s1
 8012f5e:	463b      	mov	r3, r7
 8012f60:	ed83 7b48 	vstr	d7, [r3, #288]	; 0x120
       ams_cell_voltages.v10s1 = can1_ams_cell_voltages_v10s1_decode(can1_ams_cell_voltages.v10s1);
 8012f64:	4beb      	ldr	r3, [pc, #940]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8012f66:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7f4 fa80 	bl	8007470 <can1_ams_cell_voltages_v10s1_decode>
 8012f70:	eeb0 7a40 	vmov.f32	s14, s0
 8012f74:	eef0 7a60 	vmov.f32	s15, s1
 8012f78:	463b      	mov	r3, r7
 8012f7a:	ed83 7bd8 	vstr	d7, [r3, #864]	; 0x360
       ams_cell_voltages.v4s2 = can1_ams_cell_voltages_v4s2_decode(can1_ams_cell_voltages.v4s2);
 8012f7e:	4be5      	ldr	r3, [pc, #916]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8012f80:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7f4 facb 	bl	8007520 <can1_ams_cell_voltages_v4s2_decode>
 8012f8a:	eeb0 7a40 	vmov.f32	s14, s0
 8012f8e:	eef0 7a60 	vmov.f32	s15, s1
 8012f92:	463b      	mov	r3, r7
 8012f94:	ed83 7b4a 	vstr	d7, [r3, #296]	; 0x128
       ams_cell_voltages.v10s2 = can1_ams_cell_voltages_v10s2_decode(can1_ams_cell_voltages.v10s2);
 8012f98:	4bde      	ldr	r3, [pc, #888]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8012f9a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7f4 fb16 	bl	80075d0 <can1_ams_cell_voltages_v10s2_decode>
 8012fa4:	eeb0 7a40 	vmov.f32	s14, s0
 8012fa8:	eef0 7a60 	vmov.f32	s15, s1
 8012fac:	463b      	mov	r3, r7
 8012fae:	ed83 7bda 	vstr	d7, [r3, #872]	; 0x368
       ams_cell_voltages.v4s3 = can1_ams_cell_voltages_v4s3_decode(can1_ams_cell_voltages.v4s3);
 8012fb2:	4bd8      	ldr	r3, [pc, #864]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8012fb4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f7f4 fb61 	bl	8007680 <can1_ams_cell_voltages_v4s3_decode>
 8012fbe:	eeb0 7a40 	vmov.f32	s14, s0
 8012fc2:	eef0 7a60 	vmov.f32	s15, s1
 8012fc6:	463b      	mov	r3, r7
 8012fc8:	ed83 7b4c 	vstr	d7, [r3, #304]	; 0x130
       ams_cell_voltages.v10s3 = can1_ams_cell_voltages_v10s3_decode(can1_ams_cell_voltages.v10s3);
 8012fcc:	4bd1      	ldr	r3, [pc, #836]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8012fce:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7f4 fbac 	bl	8007730 <can1_ams_cell_voltages_v10s3_decode>
 8012fd8:	eeb0 7a40 	vmov.f32	s14, s0
 8012fdc:	eef0 7a60 	vmov.f32	s15, s1
 8012fe0:	463b      	mov	r3, r7
 8012fe2:	ed83 7bdc 	vstr	d7, [r3, #880]	; 0x370
       ams_cell_voltages.v4s4 = can1_ams_cell_voltages_v4s4_decode(can1_ams_cell_voltages.v4s4);
 8012fe6:	4bcb      	ldr	r3, [pc, #812]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8012fe8:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8012fec:	4618      	mov	r0, r3
 8012fee:	f7f4 fbf7 	bl	80077e0 <can1_ams_cell_voltages_v4s4_decode>
 8012ff2:	eeb0 7a40 	vmov.f32	s14, s0
 8012ff6:	eef0 7a60 	vmov.f32	s15, s1
 8012ffa:	463b      	mov	r3, r7
 8012ffc:	ed83 7b4e 	vstr	d7, [r3, #312]	; 0x138
       ams_cell_voltages.v10s4 = can1_ams_cell_voltages_v10s4_decode(can1_ams_cell_voltages.v10s4);
 8013000:	4bc4      	ldr	r3, [pc, #784]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8013002:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013006:	4618      	mov	r0, r3
 8013008:	f7f4 fc42 	bl	8007890 <can1_ams_cell_voltages_v10s4_decode>
 801300c:	eeb0 7a40 	vmov.f32	s14, s0
 8013010:	eef0 7a60 	vmov.f32	s15, s1
 8013014:	463b      	mov	r3, r7
 8013016:	ed83 7bde 	vstr	d7, [r3, #888]	; 0x378
       ams_cell_voltages.v4s5 = can1_ams_cell_voltages_v4s5_decode(can1_ams_cell_voltages.v4s5);
 801301a:	4bbe      	ldr	r3, [pc, #760]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 801301c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013020:	4618      	mov	r0, r3
 8013022:	f7f4 fc8d 	bl	8007940 <can1_ams_cell_voltages_v4s5_decode>
 8013026:	eeb0 7a40 	vmov.f32	s14, s0
 801302a:	eef0 7a60 	vmov.f32	s15, s1
 801302e:	463b      	mov	r3, r7
 8013030:	ed83 7b50 	vstr	d7, [r3, #320]	; 0x140
       ams_cell_voltages.v10s5 = can1_ams_cell_voltages_v10s5_decode(can1_ams_cell_voltages.v10s5);
 8013034:	4bb7      	ldr	r3, [pc, #732]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8013036:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801303a:	4618      	mov	r0, r3
 801303c:	f7f4 fcd8 	bl	80079f0 <can1_ams_cell_voltages_v10s5_decode>
 8013040:	eeb0 7a40 	vmov.f32	s14, s0
 8013044:	eef0 7a60 	vmov.f32	s15, s1
 8013048:	463b      	mov	r3, r7
 801304a:	ed83 7be0 	vstr	d7, [r3, #896]	; 0x380
       ams_cell_voltages.v4s6 = can1_ams_cell_voltages_v4s6_decode(can1_ams_cell_voltages.v4s6);
 801304e:	4bb1      	ldr	r3, [pc, #708]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8013050:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8013054:	4618      	mov	r0, r3
 8013056:	f7f4 fd23 	bl	8007aa0 <can1_ams_cell_voltages_v4s6_decode>
 801305a:	eeb0 7a40 	vmov.f32	s14, s0
 801305e:	eef0 7a60 	vmov.f32	s15, s1
 8013062:	463b      	mov	r3, r7
 8013064:	ed83 7b52 	vstr	d7, [r3, #328]	; 0x148
       ams_cell_voltages.v10s6 = can1_ams_cell_voltages_v10s6_decode(can1_ams_cell_voltages.v10s6);
 8013068:	4baa      	ldr	r3, [pc, #680]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 801306a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801306e:	4618      	mov	r0, r3
 8013070:	f7f4 fd6e 	bl	8007b50 <can1_ams_cell_voltages_v10s6_decode>
 8013074:	eeb0 7a40 	vmov.f32	s14, s0
 8013078:	eef0 7a60 	vmov.f32	s15, s1
 801307c:	463b      	mov	r3, r7
 801307e:	ed83 7be2 	vstr	d7, [r3, #904]	; 0x388
       ams_cell_voltages.v4s7 = can1_ams_cell_voltages_v4s7_decode(can1_ams_cell_voltages.v4s7);
 8013082:	4ba4      	ldr	r3, [pc, #656]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8013084:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8013088:	4618      	mov	r0, r3
 801308a:	f7f4 fdb9 	bl	8007c00 <can1_ams_cell_voltages_v4s7_decode>
 801308e:	eeb0 7a40 	vmov.f32	s14, s0
 8013092:	eef0 7a60 	vmov.f32	s15, s1
 8013096:	463b      	mov	r3, r7
 8013098:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150
       ams_cell_voltages.v10s7 = can1_ams_cell_voltages_v10s7_decode(can1_ams_cell_voltages.v10s7);
 801309c:	4b9d      	ldr	r3, [pc, #628]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 801309e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80130a2:	4618      	mov	r0, r3
 80130a4:	f7f4 fe04 	bl	8007cb0 <can1_ams_cell_voltages_v10s7_decode>
 80130a8:	eeb0 7a40 	vmov.f32	s14, s0
 80130ac:	eef0 7a60 	vmov.f32	s15, s1
 80130b0:	463b      	mov	r3, r7
 80130b2:	ed83 7be4 	vstr	d7, [r3, #912]	; 0x390
       ams_cell_voltages.v4s8 = can1_ams_cell_voltages_v4s8_decode(can1_ams_cell_voltages.v4s8);
 80130b6:	4b97      	ldr	r3, [pc, #604]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 80130b8:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80130bc:	4618      	mov	r0, r3
 80130be:	f7f4 fe4f 	bl	8007d60 <can1_ams_cell_voltages_v4s8_decode>
 80130c2:	eeb0 7a40 	vmov.f32	s14, s0
 80130c6:	eef0 7a60 	vmov.f32	s15, s1
 80130ca:	463b      	mov	r3, r7
 80130cc:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158
       ams_cell_voltages.v10s8 = can1_ams_cell_voltages_v10s8_decode(can1_ams_cell_voltages.v10s8);
 80130d0:	4b90      	ldr	r3, [pc, #576]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 80130d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7f4 fe9a 	bl	8007e10 <can1_ams_cell_voltages_v10s8_decode>
 80130dc:	eeb0 7a40 	vmov.f32	s14, s0
 80130e0:	eef0 7a60 	vmov.f32	s15, s1
 80130e4:	463b      	mov	r3, r7
 80130e6:	ed83 7be6 	vstr	d7, [r3, #920]	; 0x398
       ams_cell_voltages.v4s9 = can1_ams_cell_voltages_v4s9_decode(can1_ams_cell_voltages.v4s9);
 80130ea:	4b8a      	ldr	r3, [pc, #552]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 80130ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7f4 fee5 	bl	8007ec0 <can1_ams_cell_voltages_v4s9_decode>
 80130f6:	eeb0 7a40 	vmov.f32	s14, s0
 80130fa:	eef0 7a60 	vmov.f32	s15, s1
 80130fe:	463b      	mov	r3, r7
 8013100:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160
       ams_cell_voltages.v10s9 = can1_ams_cell_voltages_v10s9_decode(can1_ams_cell_voltages.v10s9);
 8013104:	4b83      	ldr	r3, [pc, #524]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8013106:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 801310a:	4618      	mov	r0, r3
 801310c:	f7f4 ff30 	bl	8007f70 <can1_ams_cell_voltages_v10s9_decode>
 8013110:	eeb0 7a40 	vmov.f32	s14, s0
 8013114:	eef0 7a60 	vmov.f32	s15, s1
 8013118:	463b      	mov	r3, r7
 801311a:	ed83 7be8 	vstr	d7, [r3, #928]	; 0x3a0
       ams_cell_voltages.v4s10 = can1_ams_cell_voltages_v4s10_decode(can1_ams_cell_voltages.v4s10);
 801311e:	4b7d      	ldr	r3, [pc, #500]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8013120:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8013124:	4618      	mov	r0, r3
 8013126:	f7f4 ff7b 	bl	8008020 <can1_ams_cell_voltages_v4s10_decode>
 801312a:	eeb0 7a40 	vmov.f32	s14, s0
 801312e:	eef0 7a60 	vmov.f32	s15, s1
 8013132:	463b      	mov	r3, r7
 8013134:	ed83 7b5a 	vstr	d7, [r3, #360]	; 0x168
       ams_cell_voltages.v10s10 = can1_ams_cell_voltages_v10s10_decode(can1_ams_cell_voltages.v10s10);
 8013138:	4b76      	ldr	r3, [pc, #472]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 801313a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801313e:	4618      	mov	r0, r3
 8013140:	f7f4 ffc6 	bl	80080d0 <can1_ams_cell_voltages_v10s10_decode>
 8013144:	eeb0 7a40 	vmov.f32	s14, s0
 8013148:	eef0 7a60 	vmov.f32	s15, s1
 801314c:	463b      	mov	r3, r7
 801314e:	ed83 7bea 	vstr	d7, [r3, #936]	; 0x3a8
       ams_cell_voltages.v4s11 = can1_ams_cell_voltages_v4s11_decode(can1_ams_cell_voltages.v4s11);
 8013152:	4b70      	ldr	r3, [pc, #448]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8013154:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013158:	4618      	mov	r0, r3
 801315a:	f7f5 f811 	bl	8008180 <can1_ams_cell_voltages_v4s11_decode>
 801315e:	eeb0 7a40 	vmov.f32	s14, s0
 8013162:	eef0 7a60 	vmov.f32	s15, s1
 8013166:	463b      	mov	r3, r7
 8013168:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170
       ams_cell_voltages.v10s11 = can1_ams_cell_voltages_v10s11_decode(can1_ams_cell_voltages.v10s11);
 801316c:	4b69      	ldr	r3, [pc, #420]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 801316e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8013172:	4618      	mov	r0, r3
 8013174:	f7f5 f85c 	bl	8008230 <can1_ams_cell_voltages_v10s11_decode>
 8013178:	eeb0 7a40 	vmov.f32	s14, s0
 801317c:	eef0 7a60 	vmov.f32	s15, s1
 8013180:	463b      	mov	r3, r7
 8013182:	ed83 7bec 	vstr	d7, [r3, #944]	; 0x3b0
       ams_cell_voltages.v4s12 = can1_ams_cell_voltages_v4s12_decode(can1_ams_cell_voltages.v4s12);
 8013186:	4b63      	ldr	r3, [pc, #396]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8013188:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 801318c:	4618      	mov	r0, r3
 801318e:	f7f5 f8a7 	bl	80082e0 <can1_ams_cell_voltages_v4s12_decode>
 8013192:	eeb0 7a40 	vmov.f32	s14, s0
 8013196:	eef0 7a60 	vmov.f32	s15, s1
 801319a:	463b      	mov	r3, r7
 801319c:	ed83 7b5e 	vstr	d7, [r3, #376]	; 0x178
       ams_cell_voltages.v10s12 = can1_ams_cell_voltages_v10s12_decode(can1_ams_cell_voltages.v10s12);
 80131a0:	4b5c      	ldr	r3, [pc, #368]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 80131a2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7f5 f8f2 	bl	8008390 <can1_ams_cell_voltages_v10s12_decode>
 80131ac:	eeb0 7a40 	vmov.f32	s14, s0
 80131b0:	eef0 7a60 	vmov.f32	s15, s1
 80131b4:	463b      	mov	r3, r7
 80131b6:	ed83 7bee 	vstr	d7, [r3, #952]	; 0x3b8
       ams_cell_voltages.v5s1 = can1_ams_cell_voltages_v5s1_decode(can1_ams_cell_voltages.v5s1);
 80131ba:	4b56      	ldr	r3, [pc, #344]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 80131bc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7f5 f93d 	bl	8008440 <can1_ams_cell_voltages_v5s1_decode>
 80131c6:	eeb0 7a40 	vmov.f32	s14, s0
 80131ca:	eef0 7a60 	vmov.f32	s15, s1
 80131ce:	463b      	mov	r3, r7
 80131d0:	ed83 7b60 	vstr	d7, [r3, #384]	; 0x180
       ams_cell_voltages.v11s1 = can1_ams_cell_voltages_v11s1_decode(can1_ams_cell_voltages.v11s1);
 80131d4:	4b4f      	ldr	r3, [pc, #316]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 80131d6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80131da:	4618      	mov	r0, r3
 80131dc:	f7f5 f988 	bl	80084f0 <can1_ams_cell_voltages_v11s1_decode>
 80131e0:	eeb0 7a40 	vmov.f32	s14, s0
 80131e4:	eef0 7a60 	vmov.f32	s15, s1
 80131e8:	463b      	mov	r3, r7
 80131ea:	ed83 7bf0 	vstr	d7, [r3, #960]	; 0x3c0
       ams_cell_voltages.v5s2 = can1_ams_cell_voltages_v5s2_decode(can1_ams_cell_voltages.v5s2);
 80131ee:	4b49      	ldr	r3, [pc, #292]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 80131f0:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7f5 f9d3 	bl	80085a0 <can1_ams_cell_voltages_v5s2_decode>
 80131fa:	eeb0 7a40 	vmov.f32	s14, s0
 80131fe:	eef0 7a60 	vmov.f32	s15, s1
 8013202:	463b      	mov	r3, r7
 8013204:	ed83 7b62 	vstr	d7, [r3, #392]	; 0x188
       ams_cell_voltages.v5s3 = can1_ams_cell_voltages_v5s3_decode(can1_ams_cell_voltages.v5s3);
 8013208:	4b42      	ldr	r3, [pc, #264]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 801320a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801320e:	4618      	mov	r0, r3
 8013210:	f7f5 fa1e 	bl	8008650 <can1_ams_cell_voltages_v5s3_decode>
 8013214:	eeb0 7a40 	vmov.f32	s14, s0
 8013218:	eef0 7a60 	vmov.f32	s15, s1
 801321c:	463b      	mov	r3, r7
 801321e:	ed83 7b64 	vstr	d7, [r3, #400]	; 0x190
       ams_cell_voltages.v11s3 = can1_ams_cell_voltages_v11s3_decode(can1_ams_cell_voltages.v11s3);
 8013222:	4b3c      	ldr	r3, [pc, #240]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8013224:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8013228:	4618      	mov	r0, r3
 801322a:	f7f5 fa69 	bl	8008700 <can1_ams_cell_voltages_v11s3_decode>
 801322e:	eeb0 7a40 	vmov.f32	s14, s0
 8013232:	eef0 7a60 	vmov.f32	s15, s1
 8013236:	463b      	mov	r3, r7
 8013238:	ed83 7bf2 	vstr	d7, [r3, #968]	; 0x3c8
       ams_cell_voltages.v5s4 = can1_ams_cell_voltages_v5s4_decode(can1_ams_cell_voltages.v5s4);
 801323c:	4b35      	ldr	r3, [pc, #212]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 801323e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8013242:	4618      	mov	r0, r3
 8013244:	f7f5 fab4 	bl	80087b0 <can1_ams_cell_voltages_v5s4_decode>
 8013248:	eeb0 7a40 	vmov.f32	s14, s0
 801324c:	eef0 7a60 	vmov.f32	s15, s1
 8013250:	463b      	mov	r3, r7
 8013252:	ed83 7b66 	vstr	d7, [r3, #408]	; 0x198
       ams_cell_voltages.v5s5 = can1_ams_cell_voltages_v5s5_decode(can1_ams_cell_voltages.v5s5);
 8013256:	4b2f      	ldr	r3, [pc, #188]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8013258:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 801325c:	4618      	mov	r0, r3
 801325e:	f7f5 faff 	bl	8008860 <can1_ams_cell_voltages_v5s5_decode>
 8013262:	eeb0 7a40 	vmov.f32	s14, s0
 8013266:	eef0 7a60 	vmov.f32	s15, s1
 801326a:	463b      	mov	r3, r7
 801326c:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0
       ams_cell_voltages.v11s5 = can1_ams_cell_voltages_v11s5_decode(can1_ams_cell_voltages.v11s5);
 8013270:	4b28      	ldr	r3, [pc, #160]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 8013272:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8013276:	4618      	mov	r0, r3
 8013278:	f7f5 fb4a 	bl	8008910 <can1_ams_cell_voltages_v11s5_decode>
 801327c:	eeb0 7a40 	vmov.f32	s14, s0
 8013280:	eef0 7a60 	vmov.f32	s15, s1
 8013284:	463b      	mov	r3, r7
 8013286:	ed83 7bf4 	vstr	d7, [r3, #976]	; 0x3d0
       ams_cell_voltages.v5s6 = can1_ams_cell_voltages_v5s6_decode(can1_ams_cell_voltages.v5s6);
 801328a:	4b22      	ldr	r3, [pc, #136]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 801328c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8013290:	4618      	mov	r0, r3
 8013292:	f7f5 fb95 	bl	80089c0 <can1_ams_cell_voltages_v5s6_decode>
 8013296:	eeb0 7a40 	vmov.f32	s14, s0
 801329a:	eef0 7a60 	vmov.f32	s15, s1
 801329e:	463b      	mov	r3, r7
 80132a0:	ed83 7b6a 	vstr	d7, [r3, #424]	; 0x1a8
       ams_cell_voltages.v5s7 = can1_ams_cell_voltages_v5s7_decode(can1_ams_cell_voltages.v5s7);
 80132a4:	4b1b      	ldr	r3, [pc, #108]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 80132a6:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7f5 fbe0 	bl	8008a70 <can1_ams_cell_voltages_v5s7_decode>
 80132b0:	eeb0 7a40 	vmov.f32	s14, s0
 80132b4:	eef0 7a60 	vmov.f32	s15, s1
 80132b8:	463b      	mov	r3, r7
 80132ba:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
       ams_cell_voltages.v11s7 = can1_ams_cell_voltages_v11s7_decode(can1_ams_cell_voltages.v11s7);
 80132be:	4b15      	ldr	r3, [pc, #84]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 80132c0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80132c4:	4618      	mov	r0, r3
 80132c6:	f7f5 fc2b 	bl	8008b20 <can1_ams_cell_voltages_v11s7_decode>
 80132ca:	eeb0 7a40 	vmov.f32	s14, s0
 80132ce:	eef0 7a60 	vmov.f32	s15, s1
 80132d2:	463b      	mov	r3, r7
 80132d4:	ed83 7bf6 	vstr	d7, [r3, #984]	; 0x3d8
       ams_cell_voltages.v5s8 = can1_ams_cell_voltages_v5s8_decode(can1_ams_cell_voltages.v5s8);
 80132d8:	4b0e      	ldr	r3, [pc, #56]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 80132da:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80132de:	4618      	mov	r0, r3
 80132e0:	f7f5 fc76 	bl	8008bd0 <can1_ams_cell_voltages_v5s8_decode>
 80132e4:	eeb0 7a40 	vmov.f32	s14, s0
 80132e8:	eef0 7a60 	vmov.f32	s15, s1
 80132ec:	463b      	mov	r3, r7
 80132ee:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8
       ams_cell_voltages.v5s9 = can1_ams_cell_voltages_v5s9_decode(can1_ams_cell_voltages.v5s9);
 80132f2:	4b08      	ldr	r3, [pc, #32]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 80132f4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80132f8:	4618      	mov	r0, r3
 80132fa:	f7f5 fcc1 	bl	8008c80 <can1_ams_cell_voltages_v5s9_decode>
 80132fe:	eeb0 7a40 	vmov.f32	s14, s0
 8013302:	eef0 7a60 	vmov.f32	s15, s1
 8013306:	463b      	mov	r3, r7
 8013308:	ed83 7b70 	vstr	d7, [r3, #448]	; 0x1c0
       ams_cell_voltages.v11s9 = can1_ams_cell_voltages_v11s9_decode(can1_ams_cell_voltages.v11s9);
 801330c:	4b01      	ldr	r3, [pc, #4]	; (8013314 <can1_ams_cell_voltages_receive+0xb00>)
 801330e:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8013312:	e001      	b.n	8013318 <can1_ams_cell_voltages_receive+0xb04>
 8013314:	200014f4 	.word	0x200014f4
 8013318:	4618      	mov	r0, r3
 801331a:	f7f5 fd09 	bl	8008d30 <can1_ams_cell_voltages_v11s9_decode>
 801331e:	eeb0 7a40 	vmov.f32	s14, s0
 8013322:	eef0 7a60 	vmov.f32	s15, s1
 8013326:	463b      	mov	r3, r7
 8013328:	ed83 7bf8 	vstr	d7, [r3, #992]	; 0x3e0
       ams_cell_voltages.v5s10 = can1_ams_cell_voltages_v5s10_decode(can1_ams_cell_voltages.v5s10);
 801332c:	4b6d      	ldr	r3, [pc, #436]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 801332e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8013332:	4618      	mov	r0, r3
 8013334:	f7f5 fd54 	bl	8008de0 <can1_ams_cell_voltages_v5s10_decode>
 8013338:	eeb0 7a40 	vmov.f32	s14, s0
 801333c:	eef0 7a60 	vmov.f32	s15, s1
 8013340:	463b      	mov	r3, r7
 8013342:	ed83 7b72 	vstr	d7, [r3, #456]	; 0x1c8
       ams_cell_voltages.v5s11 = can1_ams_cell_voltages_v5s11_decode(can1_ams_cell_voltages.v5s11);
 8013346:	4b67      	ldr	r3, [pc, #412]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 8013348:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801334c:	4618      	mov	r0, r3
 801334e:	f7f5 fd9f 	bl	8008e90 <can1_ams_cell_voltages_v5s11_decode>
 8013352:	eeb0 7a40 	vmov.f32	s14, s0
 8013356:	eef0 7a60 	vmov.f32	s15, s1
 801335a:	463b      	mov	r3, r7
 801335c:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0
       ams_cell_voltages.v11s11 = can1_ams_cell_voltages_v11s11_decode(can1_ams_cell_voltages.v11s11);
 8013360:	4b60      	ldr	r3, [pc, #384]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 8013362:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8013366:	4618      	mov	r0, r3
 8013368:	f7f5 fdea 	bl	8008f40 <can1_ams_cell_voltages_v11s11_decode>
 801336c:	eeb0 7a40 	vmov.f32	s14, s0
 8013370:	eef0 7a60 	vmov.f32	s15, s1
 8013374:	463b      	mov	r3, r7
 8013376:	ed83 7bfa 	vstr	d7, [r3, #1000]	; 0x3e8
       ams_cell_voltages.v5s12 = can1_ams_cell_voltages_v5s12_decode(can1_ams_cell_voltages.v5s12);
 801337a:	4b5a      	ldr	r3, [pc, #360]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 801337c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8013380:	4618      	mov	r0, r3
 8013382:	f7f5 fe35 	bl	8008ff0 <can1_ams_cell_voltages_v5s12_decode>
 8013386:	eeb0 7a40 	vmov.f32	s14, s0
 801338a:	eef0 7a60 	vmov.f32	s15, s1
 801338e:	463b      	mov	r3, r7
 8013390:	ed83 7b76 	vstr	d7, [r3, #472]	; 0x1d8
       ams_cell_voltages.v6s1 = can1_ams_cell_voltages_v6s1_decode(can1_ams_cell_voltages.v6s1);
 8013394:	4b53      	ldr	r3, [pc, #332]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 8013396:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 801339a:	4618      	mov	r0, r3
 801339c:	f7f5 fe80 	bl	80090a0 <can1_ams_cell_voltages_v6s1_decode>
 80133a0:	eeb0 7a40 	vmov.f32	s14, s0
 80133a4:	eef0 7a60 	vmov.f32	s15, s1
 80133a8:	463b      	mov	r3, r7
 80133aa:	ed83 7b78 	vstr	d7, [r3, #480]	; 0x1e0
       ams_cell_voltages.v6s2 = can1_ams_cell_voltages_v6s2_decode(can1_ams_cell_voltages.v6s2);
 80133ae:	4b4d      	ldr	r3, [pc, #308]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 80133b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7f5 fecb 	bl	8009150 <can1_ams_cell_voltages_v6s2_decode>
 80133ba:	eeb0 7a40 	vmov.f32	s14, s0
 80133be:	eef0 7a60 	vmov.f32	s15, s1
 80133c2:	463b      	mov	r3, r7
 80133c4:	ed83 7b7a 	vstr	d7, [r3, #488]	; 0x1e8
       ams_cell_voltages.v6s3 = can1_ams_cell_voltages_v6s3_decode(can1_ams_cell_voltages.v6s3);
 80133c8:	4b46      	ldr	r3, [pc, #280]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 80133ca:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7f5 ff16 	bl	8009200 <can1_ams_cell_voltages_v6s3_decode>
 80133d4:	eeb0 7a40 	vmov.f32	s14, s0
 80133d8:	eef0 7a60 	vmov.f32	s15, s1
 80133dc:	463b      	mov	r3, r7
 80133de:	ed83 7b7c 	vstr	d7, [r3, #496]	; 0x1f0
       ams_cell_voltages.v6s4 = can1_ams_cell_voltages_v6s4_decode(can1_ams_cell_voltages.v6s4);
 80133e2:	4b40      	ldr	r3, [pc, #256]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 80133e4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7f5 ff61 	bl	80092b0 <can1_ams_cell_voltages_v6s4_decode>
 80133ee:	eeb0 7a40 	vmov.f32	s14, s0
 80133f2:	eef0 7a60 	vmov.f32	s15, s1
 80133f6:	463b      	mov	r3, r7
 80133f8:	ed83 7b7e 	vstr	d7, [r3, #504]	; 0x1f8
       ams_cell_voltages.v6s5 = can1_ams_cell_voltages_v6s5_decode(can1_ams_cell_voltages.v6s5);
 80133fc:	4b39      	ldr	r3, [pc, #228]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 80133fe:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8013402:	4618      	mov	r0, r3
 8013404:	f7f5 ffac 	bl	8009360 <can1_ams_cell_voltages_v6s5_decode>
 8013408:	eeb0 7a40 	vmov.f32	s14, s0
 801340c:	eef0 7a60 	vmov.f32	s15, s1
 8013410:	463b      	mov	r3, r7
 8013412:	ed83 7b80 	vstr	d7, [r3, #512]	; 0x200
       ams_cell_voltages.v6s6 = can1_ams_cell_voltages_v6s6_decode(can1_ams_cell_voltages.v6s6);
 8013416:	4b33      	ldr	r3, [pc, #204]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 8013418:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801341c:	4618      	mov	r0, r3
 801341e:	f7f5 fff7 	bl	8009410 <can1_ams_cell_voltages_v6s6_decode>
 8013422:	eeb0 7a40 	vmov.f32	s14, s0
 8013426:	eef0 7a60 	vmov.f32	s15, s1
 801342a:	463b      	mov	r3, r7
 801342c:	ed83 7b82 	vstr	d7, [r3, #520]	; 0x208
       ams_cell_voltages.v6s7 = can1_ams_cell_voltages_v6s7_decode(can1_ams_cell_voltages.v6s7);
 8013430:	4b2c      	ldr	r3, [pc, #176]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 8013432:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8013436:	4618      	mov	r0, r3
 8013438:	f7f6 f842 	bl	80094c0 <can1_ams_cell_voltages_v6s7_decode>
 801343c:	eeb0 7a40 	vmov.f32	s14, s0
 8013440:	eef0 7a60 	vmov.f32	s15, s1
 8013444:	463b      	mov	r3, r7
 8013446:	ed83 7b84 	vstr	d7, [r3, #528]	; 0x210
       ams_cell_voltages.v6s8 = can1_ams_cell_voltages_v6s8_decode(can1_ams_cell_voltages.v6s8);
 801344a:	4b26      	ldr	r3, [pc, #152]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 801344c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8013450:	4618      	mov	r0, r3
 8013452:	f7f6 f88d 	bl	8009570 <can1_ams_cell_voltages_v6s8_decode>
 8013456:	eeb0 7a40 	vmov.f32	s14, s0
 801345a:	eef0 7a60 	vmov.f32	s15, s1
 801345e:	463b      	mov	r3, r7
 8013460:	ed83 7b86 	vstr	d7, [r3, #536]	; 0x218
       ams_cell_voltages.v6s9 = can1_ams_cell_voltages_v6s9_decode(can1_ams_cell_voltages.v6s9);
 8013464:	4b1f      	ldr	r3, [pc, #124]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 8013466:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 801346a:	4618      	mov	r0, r3
 801346c:	f7f6 f8d8 	bl	8009620 <can1_ams_cell_voltages_v6s9_decode>
 8013470:	eeb0 7a40 	vmov.f32	s14, s0
 8013474:	eef0 7a60 	vmov.f32	s15, s1
 8013478:	463b      	mov	r3, r7
 801347a:	ed83 7b88 	vstr	d7, [r3, #544]	; 0x220
       ams_cell_voltages.v6s10 = can1_ams_cell_voltages_v6s10_decode(can1_ams_cell_voltages.v6s10);
 801347e:	4b19      	ldr	r3, [pc, #100]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 8013480:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013484:	4618      	mov	r0, r3
 8013486:	f7f6 f923 	bl	80096d0 <can1_ams_cell_voltages_v6s10_decode>
 801348a:	eeb0 7a40 	vmov.f32	s14, s0
 801348e:	eef0 7a60 	vmov.f32	s15, s1
 8013492:	463b      	mov	r3, r7
 8013494:	ed83 7b8a 	vstr	d7, [r3, #552]	; 0x228
       ams_cell_voltages.v6s11 = can1_ams_cell_voltages_v6s11_decode(can1_ams_cell_voltages.v6s11);
 8013498:	4b12      	ldr	r3, [pc, #72]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 801349a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801349e:	4618      	mov	r0, r3
 80134a0:	f7f6 f96e 	bl	8009780 <can1_ams_cell_voltages_v6s11_decode>
 80134a4:	eeb0 7a40 	vmov.f32	s14, s0
 80134a8:	eef0 7a60 	vmov.f32	s15, s1
 80134ac:	463b      	mov	r3, r7
 80134ae:	ed83 7b8c 	vstr	d7, [r3, #560]	; 0x230
       ams_cell_voltages.v6s12 = can1_ams_cell_voltages_v6s12_decode(can1_ams_cell_voltages.v6s12);
 80134b2:	4b0c      	ldr	r3, [pc, #48]	; (80134e4 <can1_ams_cell_voltages_receive+0xcd0>)
 80134b4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7f6 f9b9 	bl	8009830 <can1_ams_cell_voltages_v6s12_decode>
 80134be:	eeb0 7a40 	vmov.f32	s14, s0
 80134c2:	eef0 7a60 	vmov.f32	s15, s1
 80134c6:	463b      	mov	r3, r7
 80134c8:	ed83 7b8e 	vstr	d7, [r3, #568]	; 0x238
       can1_ams_cell_voltages_rx_callback(&ams_cell_voltages);
 80134cc:	463b      	mov	r3, r7
 80134ce:	4618      	mov	r0, r3
 80134d0:	f000 feb2 	bl	8014238 <can1_ams_cell_voltages_rx_callback>
       can1_ams_cell_voltages_flag = 0;
 80134d4:	4b04      	ldr	r3, [pc, #16]	; (80134e8 <can1_ams_cell_voltages_receive+0xcd4>)
 80134d6:	2200      	movs	r2, #0
 80134d8:	701a      	strb	r2, [r3, #0]
   }
}
 80134da:	bf00      	nop
 80134dc:	f507 777e 	add.w	r7, r7, #1016	; 0x3f8
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd80      	pop	{r7, pc}
 80134e4:	200014f4 	.word	0x200014f4
 80134e8:	20001628 	.word	0x20001628

080134ec <can1_ams_cell_temperatures_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_temperatures_receive() {
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b0fa      	sub	sp, #488	; 0x1e8
 80134f0:	af00      	add	r7, sp, #0
   if(can1_ams_cell_temperatures_flag) {
 80134f2:	4beb      	ldr	r3, [pc, #940]	; (80138a0 <can1_ams_cell_temperatures_receive+0x3b4>)
 80134f4:	781b      	ldrb	r3, [r3, #0]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	f000 8318 	beq.w	8013b2c <can1_ams_cell_temperatures_receive+0x640>
       ams_cell_temperatures_t ams_cell_temperatures;
       ams_cell_temperatures.t1s1 = can1_ams_cell_temperatures_t1s1_decode(can1_ams_cell_temperatures.t1s1);
 80134fc:	4be9      	ldr	r3, [pc, #932]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80134fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013502:	4618      	mov	r0, r3
 8013504:	f7f8 fd3c 	bl	800bf80 <can1_ams_cell_temperatures_t1s1_decode>
 8013508:	eeb0 7a40 	vmov.f32	s14, s0
 801350c:	eef0 7a60 	vmov.f32	s15, s1
 8013510:	463b      	mov	r3, r7
 8013512:	ed83 7b00 	vstr	d7, [r3]
       ams_cell_temperatures.t1s2 = can1_ams_cell_temperatures_t1s2_decode(can1_ams_cell_temperatures.t1s2);
 8013516:	4be3      	ldr	r3, [pc, #908]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013518:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801351c:	4618      	mov	r0, r3
 801351e:	f7f8 fd87 	bl	800c030 <can1_ams_cell_temperatures_t1s2_decode>
 8013522:	eeb0 7a40 	vmov.f32	s14, s0
 8013526:	eef0 7a60 	vmov.f32	s15, s1
 801352a:	463b      	mov	r3, r7
 801352c:	ed83 7b02 	vstr	d7, [r3, #8]
       ams_cell_temperatures.t1s3 = can1_ams_cell_temperatures_t1s3_decode(can1_ams_cell_temperatures.t1s3);
 8013530:	4bdc      	ldr	r3, [pc, #880]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013532:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013536:	4618      	mov	r0, r3
 8013538:	f7f8 fdd2 	bl	800c0e0 <can1_ams_cell_temperatures_t1s3_decode>
 801353c:	eeb0 7a40 	vmov.f32	s14, s0
 8013540:	eef0 7a60 	vmov.f32	s15, s1
 8013544:	463b      	mov	r3, r7
 8013546:	ed83 7b04 	vstr	d7, [r3, #16]
       ams_cell_temperatures.t1s4 = can1_ams_cell_temperatures_t1s4_decode(can1_ams_cell_temperatures.t1s4);
 801354a:	4bd6      	ldr	r3, [pc, #856]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801354c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013550:	4618      	mov	r0, r3
 8013552:	f7f8 fe1d 	bl	800c190 <can1_ams_cell_temperatures_t1s4_decode>
 8013556:	eeb0 7a40 	vmov.f32	s14, s0
 801355a:	eef0 7a60 	vmov.f32	s15, s1
 801355e:	463b      	mov	r3, r7
 8013560:	ed83 7b06 	vstr	d7, [r3, #24]
       ams_cell_temperatures.t1s5 = can1_ams_cell_temperatures_t1s5_decode(can1_ams_cell_temperatures.t1s5);
 8013564:	4bcf      	ldr	r3, [pc, #828]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013566:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801356a:	4618      	mov	r0, r3
 801356c:	f7f8 fe68 	bl	800c240 <can1_ams_cell_temperatures_t1s5_decode>
 8013570:	eeb0 7a40 	vmov.f32	s14, s0
 8013574:	eef0 7a60 	vmov.f32	s15, s1
 8013578:	463b      	mov	r3, r7
 801357a:	ed83 7b08 	vstr	d7, [r3, #32]
       ams_cell_temperatures.t1s6 = can1_ams_cell_temperatures_t1s6_decode(can1_ams_cell_temperatures.t1s6);
 801357e:	4bc9      	ldr	r3, [pc, #804]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013580:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013584:	4618      	mov	r0, r3
 8013586:	f7f8 feb3 	bl	800c2f0 <can1_ams_cell_temperatures_t1s6_decode>
 801358a:	eeb0 7a40 	vmov.f32	s14, s0
 801358e:	eef0 7a60 	vmov.f32	s15, s1
 8013592:	463b      	mov	r3, r7
 8013594:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
       ams_cell_temperatures.t1s7 = can1_ams_cell_temperatures_t1s7_decode(can1_ams_cell_temperatures.t1s7);
 8013598:	4bc2      	ldr	r3, [pc, #776]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801359a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801359e:	4618      	mov	r0, r3
 80135a0:	f7f8 fefe 	bl	800c3a0 <can1_ams_cell_temperatures_t1s7_decode>
 80135a4:	eeb0 7a40 	vmov.f32	s14, s0
 80135a8:	eef0 7a60 	vmov.f32	s15, s1
 80135ac:	463b      	mov	r3, r7
 80135ae:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
       ams_cell_temperatures.t1s8 = can1_ams_cell_temperatures_t1s8_decode(can1_ams_cell_temperatures.t1s8);
 80135b2:	4bbc      	ldr	r3, [pc, #752]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80135b4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7f8 ff49 	bl	800c450 <can1_ams_cell_temperatures_t1s8_decode>
 80135be:	eeb0 7a40 	vmov.f32	s14, s0
 80135c2:	eef0 7a60 	vmov.f32	s15, s1
 80135c6:	463b      	mov	r3, r7
 80135c8:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
       ams_cell_temperatures.t1s9 = can1_ams_cell_temperatures_t1s9_decode(can1_ams_cell_temperatures.t1s9);
 80135cc:	4bb5      	ldr	r3, [pc, #724]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80135ce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7f8 ff94 	bl	800c500 <can1_ams_cell_temperatures_t1s9_decode>
 80135d8:	eeb0 7a40 	vmov.f32	s14, s0
 80135dc:	eef0 7a60 	vmov.f32	s15, s1
 80135e0:	463b      	mov	r3, r7
 80135e2:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
       ams_cell_temperatures.t1s10 = can1_ams_cell_temperatures_t1s10_decode(can1_ams_cell_temperatures.t1s10);
 80135e6:	4baf      	ldr	r3, [pc, #700]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80135e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7f8 ffdf 	bl	800c5b0 <can1_ams_cell_temperatures_t1s10_decode>
 80135f2:	eeb0 7a40 	vmov.f32	s14, s0
 80135f6:	eef0 7a60 	vmov.f32	s15, s1
 80135fa:	463b      	mov	r3, r7
 80135fc:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
       ams_cell_temperatures.t1s11 = can1_ams_cell_temperatures_t1s11_decode(can1_ams_cell_temperatures.t1s11);
 8013600:	4ba8      	ldr	r3, [pc, #672]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013602:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8013606:	4618      	mov	r0, r3
 8013608:	f7f9 f82a 	bl	800c660 <can1_ams_cell_temperatures_t1s11_decode>
 801360c:	eeb0 7a40 	vmov.f32	s14, s0
 8013610:	eef0 7a60 	vmov.f32	s15, s1
 8013614:	463b      	mov	r3, r7
 8013616:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
       ams_cell_temperatures.t1s12 = can1_ams_cell_temperatures_t1s12_decode(can1_ams_cell_temperatures.t1s12);
 801361a:	4ba2      	ldr	r3, [pc, #648]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801361c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013620:	4618      	mov	r0, r3
 8013622:	f7f9 f875 	bl	800c710 <can1_ams_cell_temperatures_t1s12_decode>
 8013626:	eeb0 7a40 	vmov.f32	s14, s0
 801362a:	eef0 7a60 	vmov.f32	s15, s1
 801362e:	463b      	mov	r3, r7
 8013630:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
       ams_cell_temperatures.t2s1 = can1_ams_cell_temperatures_t2s1_decode(can1_ams_cell_temperatures.t2s1);
 8013634:	4b9b      	ldr	r3, [pc, #620]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013636:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801363a:	4618      	mov	r0, r3
 801363c:	f7f9 f8c0 	bl	800c7c0 <can1_ams_cell_temperatures_t2s1_decode>
 8013640:	eeb0 7a40 	vmov.f32	s14, s0
 8013644:	eef0 7a60 	vmov.f32	s15, s1
 8013648:	463b      	mov	r3, r7
 801364a:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
       ams_cell_temperatures.t2s2 = can1_ams_cell_temperatures_t2s2_decode(can1_ams_cell_temperatures.t2s2);
 801364e:	4b95      	ldr	r3, [pc, #596]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013650:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013654:	4618      	mov	r0, r3
 8013656:	f7f9 f90b 	bl	800c870 <can1_ams_cell_temperatures_t2s2_decode>
 801365a:	eeb0 7a40 	vmov.f32	s14, s0
 801365e:	eef0 7a60 	vmov.f32	s15, s1
 8013662:	463b      	mov	r3, r7
 8013664:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
       ams_cell_temperatures.t2s3 = can1_ams_cell_temperatures_t2s3_decode(can1_ams_cell_temperatures.t2s3);
 8013668:	4b8e      	ldr	r3, [pc, #568]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801366a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801366e:	4618      	mov	r0, r3
 8013670:	f7f9 f956 	bl	800c920 <can1_ams_cell_temperatures_t2s3_decode>
 8013674:	eeb0 7a40 	vmov.f32	s14, s0
 8013678:	eef0 7a60 	vmov.f32	s15, s1
 801367c:	463b      	mov	r3, r7
 801367e:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
       ams_cell_temperatures.t2s4 = can1_ams_cell_temperatures_t2s4_decode(can1_ams_cell_temperatures.t2s4);
 8013682:	4b88      	ldr	r3, [pc, #544]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013684:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8013688:	4618      	mov	r0, r3
 801368a:	f7f9 f9a1 	bl	800c9d0 <can1_ams_cell_temperatures_t2s4_decode>
 801368e:	eeb0 7a40 	vmov.f32	s14, s0
 8013692:	eef0 7a60 	vmov.f32	s15, s1
 8013696:	463b      	mov	r3, r7
 8013698:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
       ams_cell_temperatures.t2s5 = can1_ams_cell_temperatures_t2s5_decode(can1_ams_cell_temperatures.t2s5);
 801369c:	4b81      	ldr	r3, [pc, #516]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801369e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80136a2:	4618      	mov	r0, r3
 80136a4:	f7f9 f9ec 	bl	800ca80 <can1_ams_cell_temperatures_t2s5_decode>
 80136a8:	eeb0 7a40 	vmov.f32	s14, s0
 80136ac:	eef0 7a60 	vmov.f32	s15, s1
 80136b0:	463b      	mov	r3, r7
 80136b2:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
       ams_cell_temperatures.t2s6 = can1_ams_cell_temperatures_t2s6_decode(can1_ams_cell_temperatures.t2s6);
 80136b6:	4b7b      	ldr	r3, [pc, #492]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80136b8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80136bc:	4618      	mov	r0, r3
 80136be:	f7f9 fa37 	bl	800cb30 <can1_ams_cell_temperatures_t2s6_decode>
 80136c2:	eeb0 7a40 	vmov.f32	s14, s0
 80136c6:	eef0 7a60 	vmov.f32	s15, s1
 80136ca:	463b      	mov	r3, r7
 80136cc:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
       ams_cell_temperatures.t2s7 = can1_ams_cell_temperatures_t2s7_decode(can1_ams_cell_temperatures.t2s7);
 80136d0:	4b74      	ldr	r3, [pc, #464]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80136d2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7f9 fa82 	bl	800cbe0 <can1_ams_cell_temperatures_t2s7_decode>
 80136dc:	eeb0 7a40 	vmov.f32	s14, s0
 80136e0:	eef0 7a60 	vmov.f32	s15, s1
 80136e4:	463b      	mov	r3, r7
 80136e6:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
       ams_cell_temperatures.t2s8 = can1_ams_cell_temperatures_t2s8_decode(can1_ams_cell_temperatures.t2s8);
 80136ea:	4b6e      	ldr	r3, [pc, #440]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80136ec:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7f9 facd 	bl	800cc90 <can1_ams_cell_temperatures_t2s8_decode>
 80136f6:	eeb0 7a40 	vmov.f32	s14, s0
 80136fa:	eef0 7a60 	vmov.f32	s15, s1
 80136fe:	463b      	mov	r3, r7
 8013700:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
       ams_cell_temperatures.t2s9 = can1_ams_cell_temperatures_t2s9_decode(can1_ams_cell_temperatures.t2s9);
 8013704:	4b67      	ldr	r3, [pc, #412]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013706:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801370a:	4618      	mov	r0, r3
 801370c:	f7f9 fb18 	bl	800cd40 <can1_ams_cell_temperatures_t2s9_decode>
 8013710:	eeb0 7a40 	vmov.f32	s14, s0
 8013714:	eef0 7a60 	vmov.f32	s15, s1
 8013718:	463b      	mov	r3, r7
 801371a:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
       ams_cell_temperatures.t2s10 = can1_ams_cell_temperatures_t2s10_decode(can1_ams_cell_temperatures.t2s10);
 801371e:	4b61      	ldr	r3, [pc, #388]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013720:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8013724:	4618      	mov	r0, r3
 8013726:	f7f9 fb63 	bl	800cdf0 <can1_ams_cell_temperatures_t2s10_decode>
 801372a:	eeb0 7a40 	vmov.f32	s14, s0
 801372e:	eef0 7a60 	vmov.f32	s15, s1
 8013732:	463b      	mov	r3, r7
 8013734:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
       ams_cell_temperatures.t2s11 = can1_ams_cell_temperatures_t2s11_decode(can1_ams_cell_temperatures.t2s11);
 8013738:	4b5a      	ldr	r3, [pc, #360]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801373a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 801373e:	4618      	mov	r0, r3
 8013740:	f7f9 fbae 	bl	800cea0 <can1_ams_cell_temperatures_t2s11_decode>
 8013744:	eeb0 7a40 	vmov.f32	s14, s0
 8013748:	eef0 7a60 	vmov.f32	s15, s1
 801374c:	463b      	mov	r3, r7
 801374e:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
       ams_cell_temperatures.t2s12 = can1_ams_cell_temperatures_t2s12_decode(can1_ams_cell_temperatures.t2s12);
 8013752:	4b54      	ldr	r3, [pc, #336]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013754:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013758:	4618      	mov	r0, r3
 801375a:	f7f9 fbf9 	bl	800cf50 <can1_ams_cell_temperatures_t2s12_decode>
 801375e:	eeb0 7a40 	vmov.f32	s14, s0
 8013762:	eef0 7a60 	vmov.f32	s15, s1
 8013766:	463b      	mov	r3, r7
 8013768:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
       ams_cell_temperatures.t3s1 = can1_ams_cell_temperatures_t3s1_decode(can1_ams_cell_temperatures.t3s1);
 801376c:	4b4d      	ldr	r3, [pc, #308]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801376e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8013772:	4618      	mov	r0, r3
 8013774:	f7f9 fc44 	bl	800d000 <can1_ams_cell_temperatures_t3s1_decode>
 8013778:	eeb0 7a40 	vmov.f32	s14, s0
 801377c:	eef0 7a60 	vmov.f32	s15, s1
 8013780:	463b      	mov	r3, r7
 8013782:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
       ams_cell_temperatures.t3s2 = can1_ams_cell_temperatures_t3s2_decode(can1_ams_cell_temperatures.t3s2);
 8013786:	4b47      	ldr	r3, [pc, #284]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013788:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801378c:	4618      	mov	r0, r3
 801378e:	f7f9 fc8f 	bl	800d0b0 <can1_ams_cell_temperatures_t3s2_decode>
 8013792:	eeb0 7a40 	vmov.f32	s14, s0
 8013796:	eef0 7a60 	vmov.f32	s15, s1
 801379a:	463b      	mov	r3, r7
 801379c:	ed83 7b32 	vstr	d7, [r3, #200]	; 0xc8
       ams_cell_temperatures.t3s3 = can1_ams_cell_temperatures_t3s3_decode(can1_ams_cell_temperatures.t3s3);
 80137a0:	4b40      	ldr	r3, [pc, #256]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80137a2:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7f9 fcda 	bl	800d160 <can1_ams_cell_temperatures_t3s3_decode>
 80137ac:	eeb0 7a40 	vmov.f32	s14, s0
 80137b0:	eef0 7a60 	vmov.f32	s15, s1
 80137b4:	463b      	mov	r3, r7
 80137b6:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
       ams_cell_temperatures.t3s4 = can1_ams_cell_temperatures_t3s4_decode(can1_ams_cell_temperatures.t3s4);
 80137ba:	4b3a      	ldr	r3, [pc, #232]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80137bc:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7f9 fd25 	bl	800d210 <can1_ams_cell_temperatures_t3s4_decode>
 80137c6:	eeb0 7a40 	vmov.f32	s14, s0
 80137ca:	eef0 7a60 	vmov.f32	s15, s1
 80137ce:	463b      	mov	r3, r7
 80137d0:	ed83 7b36 	vstr	d7, [r3, #216]	; 0xd8
       ams_cell_temperatures.t3s5 = can1_ams_cell_temperatures_t3s5_decode(can1_ams_cell_temperatures.t3s5);
 80137d4:	4b33      	ldr	r3, [pc, #204]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80137d6:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80137da:	4618      	mov	r0, r3
 80137dc:	f7f9 fd70 	bl	800d2c0 <can1_ams_cell_temperatures_t3s5_decode>
 80137e0:	eeb0 7a40 	vmov.f32	s14, s0
 80137e4:	eef0 7a60 	vmov.f32	s15, s1
 80137e8:	463b      	mov	r3, r7
 80137ea:	ed83 7b38 	vstr	d7, [r3, #224]	; 0xe0
       ams_cell_temperatures.t3s6 = can1_ams_cell_temperatures_t3s6_decode(can1_ams_cell_temperatures.t3s6);
 80137ee:	4b2d      	ldr	r3, [pc, #180]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80137f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7f9 fdbb 	bl	800d370 <can1_ams_cell_temperatures_t3s6_decode>
 80137fa:	eeb0 7a40 	vmov.f32	s14, s0
 80137fe:	eef0 7a60 	vmov.f32	s15, s1
 8013802:	463b      	mov	r3, r7
 8013804:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8
       ams_cell_temperatures.t3s7 = can1_ams_cell_temperatures_t3s7_decode(can1_ams_cell_temperatures.t3s7);
 8013808:	4b26      	ldr	r3, [pc, #152]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801380a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801380e:	4618      	mov	r0, r3
 8013810:	f7f9 fe06 	bl	800d420 <can1_ams_cell_temperatures_t3s7_decode>
 8013814:	eeb0 7a40 	vmov.f32	s14, s0
 8013818:	eef0 7a60 	vmov.f32	s15, s1
 801381c:	463b      	mov	r3, r7
 801381e:	ed83 7b3c 	vstr	d7, [r3, #240]	; 0xf0
       ams_cell_temperatures.t3s8 = can1_ams_cell_temperatures_t3s8_decode(can1_ams_cell_temperatures.t3s8);
 8013822:	4b20      	ldr	r3, [pc, #128]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013824:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013828:	4618      	mov	r0, r3
 801382a:	f7f9 fe51 	bl	800d4d0 <can1_ams_cell_temperatures_t3s8_decode>
 801382e:	eeb0 7a40 	vmov.f32	s14, s0
 8013832:	eef0 7a60 	vmov.f32	s15, s1
 8013836:	463b      	mov	r3, r7
 8013838:	ed83 7b3e 	vstr	d7, [r3, #248]	; 0xf8
       ams_cell_temperatures.t3s9 = can1_ams_cell_temperatures_t3s9_decode(can1_ams_cell_temperatures.t3s9);
 801383c:	4b19      	ldr	r3, [pc, #100]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801383e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8013842:	4618      	mov	r0, r3
 8013844:	f7f9 fe9c 	bl	800d580 <can1_ams_cell_temperatures_t3s9_decode>
 8013848:	eeb0 7a40 	vmov.f32	s14, s0
 801384c:	eef0 7a60 	vmov.f32	s15, s1
 8013850:	463b      	mov	r3, r7
 8013852:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
       ams_cell_temperatures.t3s10 = can1_ams_cell_temperatures_t3s10_decode(can1_ams_cell_temperatures.t3s10);
 8013856:	4b13      	ldr	r3, [pc, #76]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013858:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801385c:	4618      	mov	r0, r3
 801385e:	f7f9 fee7 	bl	800d630 <can1_ams_cell_temperatures_t3s10_decode>
 8013862:	eeb0 7a40 	vmov.f32	s14, s0
 8013866:	eef0 7a60 	vmov.f32	s15, s1
 801386a:	463b      	mov	r3, r7
 801386c:	ed83 7b42 	vstr	d7, [r3, #264]	; 0x108
       ams_cell_temperatures.t3s11 = can1_ams_cell_temperatures_t3s11_decode(can1_ams_cell_temperatures.t3s11);
 8013870:	4b0c      	ldr	r3, [pc, #48]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013872:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8013876:	4618      	mov	r0, r3
 8013878:	f7f9 ff32 	bl	800d6e0 <can1_ams_cell_temperatures_t3s11_decode>
 801387c:	eeb0 7a40 	vmov.f32	s14, s0
 8013880:	eef0 7a60 	vmov.f32	s15, s1
 8013884:	463b      	mov	r3, r7
 8013886:	ed83 7b44 	vstr	d7, [r3, #272]	; 0x110
       ams_cell_temperatures.t3s12 = can1_ams_cell_temperatures_t3s12_decode(can1_ams_cell_temperatures.t3s12);
 801388a:	4b06      	ldr	r3, [pc, #24]	; (80138a4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801388c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8013890:	4618      	mov	r0, r3
 8013892:	f7f9 ff7d 	bl	800d790 <can1_ams_cell_temperatures_t3s12_decode>
 8013896:	eeb0 7a40 	vmov.f32	s14, s0
 801389a:	eef0 7a60 	vmov.f32	s15, s1
 801389e:	e003      	b.n	80138a8 <can1_ams_cell_temperatures_receive+0x3bc>
 80138a0:	20001629 	.word	0x20001629
 80138a4:	20001574 	.word	0x20001574
 80138a8:	463b      	mov	r3, r7
 80138aa:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
       ams_cell_temperatures.t4s1 = can1_ams_cell_temperatures_t4s1_decode(can1_ams_cell_temperatures.t4s1);
 80138ae:	4ba2      	ldr	r3, [pc, #648]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 80138b0:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80138b4:	4618      	mov	r0, r3
 80138b6:	f7f9 ffc3 	bl	800d840 <can1_ams_cell_temperatures_t4s1_decode>
 80138ba:	eeb0 7a40 	vmov.f32	s14, s0
 80138be:	eef0 7a60 	vmov.f32	s15, s1
 80138c2:	463b      	mov	r3, r7
 80138c4:	ed83 7b48 	vstr	d7, [r3, #288]	; 0x120
       ams_cell_temperatures.t4s2 = can1_ams_cell_temperatures_t4s2_decode(can1_ams_cell_temperatures.t4s2);
 80138c8:	4b9b      	ldr	r3, [pc, #620]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 80138ca:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7fa f80e 	bl	800d8f0 <can1_ams_cell_temperatures_t4s2_decode>
 80138d4:	eeb0 7a40 	vmov.f32	s14, s0
 80138d8:	eef0 7a60 	vmov.f32	s15, s1
 80138dc:	463b      	mov	r3, r7
 80138de:	ed83 7b4a 	vstr	d7, [r3, #296]	; 0x128
       ams_cell_temperatures.t4s3 = can1_ams_cell_temperatures_t4s3_decode(can1_ams_cell_temperatures.t4s3);
 80138e2:	4b95      	ldr	r3, [pc, #596]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 80138e4:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7fa f859 	bl	800d9a0 <can1_ams_cell_temperatures_t4s3_decode>
 80138ee:	eeb0 7a40 	vmov.f32	s14, s0
 80138f2:	eef0 7a60 	vmov.f32	s15, s1
 80138f6:	463b      	mov	r3, r7
 80138f8:	ed83 7b4c 	vstr	d7, [r3, #304]	; 0x130
       ams_cell_temperatures.t4s4 = can1_ams_cell_temperatures_t4s4_decode(can1_ams_cell_temperatures.t4s4);
 80138fc:	4b8e      	ldr	r3, [pc, #568]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 80138fe:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8013902:	4618      	mov	r0, r3
 8013904:	f7fa f8a4 	bl	800da50 <can1_ams_cell_temperatures_t4s4_decode>
 8013908:	eeb0 7a40 	vmov.f32	s14, s0
 801390c:	eef0 7a60 	vmov.f32	s15, s1
 8013910:	463b      	mov	r3, r7
 8013912:	ed83 7b4e 	vstr	d7, [r3, #312]	; 0x138
       ams_cell_temperatures.t4s5 = can1_ams_cell_temperatures_t4s5_decode(can1_ams_cell_temperatures.t4s5);
 8013916:	4b88      	ldr	r3, [pc, #544]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 8013918:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801391c:	4618      	mov	r0, r3
 801391e:	f7fa f8ef 	bl	800db00 <can1_ams_cell_temperatures_t4s5_decode>
 8013922:	eeb0 7a40 	vmov.f32	s14, s0
 8013926:	eef0 7a60 	vmov.f32	s15, s1
 801392a:	463b      	mov	r3, r7
 801392c:	ed83 7b50 	vstr	d7, [r3, #320]	; 0x140
       ams_cell_temperatures.t4s6 = can1_ams_cell_temperatures_t4s6_decode(can1_ams_cell_temperatures.t4s6);
 8013930:	4b81      	ldr	r3, [pc, #516]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 8013932:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8013936:	4618      	mov	r0, r3
 8013938:	f7fa f93a 	bl	800dbb0 <can1_ams_cell_temperatures_t4s6_decode>
 801393c:	eeb0 7a40 	vmov.f32	s14, s0
 8013940:	eef0 7a60 	vmov.f32	s15, s1
 8013944:	463b      	mov	r3, r7
 8013946:	ed83 7b52 	vstr	d7, [r3, #328]	; 0x148
       ams_cell_temperatures.t4s7 = can1_ams_cell_temperatures_t4s7_decode(can1_ams_cell_temperatures.t4s7);
 801394a:	4b7b      	ldr	r3, [pc, #492]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 801394c:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8013950:	4618      	mov	r0, r3
 8013952:	f7fa f985 	bl	800dc60 <can1_ams_cell_temperatures_t4s7_decode>
 8013956:	eeb0 7a40 	vmov.f32	s14, s0
 801395a:	eef0 7a60 	vmov.f32	s15, s1
 801395e:	463b      	mov	r3, r7
 8013960:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150
       ams_cell_temperatures.t4s8 = can1_ams_cell_temperatures_t4s8_decode(can1_ams_cell_temperatures.t4s8);
 8013964:	4b74      	ldr	r3, [pc, #464]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 8013966:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 801396a:	4618      	mov	r0, r3
 801396c:	f7fa f9d0 	bl	800dd10 <can1_ams_cell_temperatures_t4s8_decode>
 8013970:	eeb0 7a40 	vmov.f32	s14, s0
 8013974:	eef0 7a60 	vmov.f32	s15, s1
 8013978:	463b      	mov	r3, r7
 801397a:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158
       ams_cell_temperatures.t4s9 = can1_ams_cell_temperatures_t4s9_decode(can1_ams_cell_temperatures.t4s9);
 801397e:	4b6e      	ldr	r3, [pc, #440]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 8013980:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8013984:	4618      	mov	r0, r3
 8013986:	f7fa fa1b 	bl	800ddc0 <can1_ams_cell_temperatures_t4s9_decode>
 801398a:	eeb0 7a40 	vmov.f32	s14, s0
 801398e:	eef0 7a60 	vmov.f32	s15, s1
 8013992:	463b      	mov	r3, r7
 8013994:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160
       ams_cell_temperatures.t4s10 = can1_ams_cell_temperatures_t4s10_decode(can1_ams_cell_temperatures.t4s10);
 8013998:	4b67      	ldr	r3, [pc, #412]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 801399a:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 801399e:	4618      	mov	r0, r3
 80139a0:	f7fa fa66 	bl	800de70 <can1_ams_cell_temperatures_t4s10_decode>
 80139a4:	eeb0 7a40 	vmov.f32	s14, s0
 80139a8:	eef0 7a60 	vmov.f32	s15, s1
 80139ac:	463b      	mov	r3, r7
 80139ae:	ed83 7b5a 	vstr	d7, [r3, #360]	; 0x168
       ams_cell_temperatures.t4s11 = can1_ams_cell_temperatures_t4s11_decode(can1_ams_cell_temperatures.t4s11);
 80139b2:	4b61      	ldr	r3, [pc, #388]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 80139b4:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7fa fab1 	bl	800df20 <can1_ams_cell_temperatures_t4s11_decode>
 80139be:	eeb0 7a40 	vmov.f32	s14, s0
 80139c2:	eef0 7a60 	vmov.f32	s15, s1
 80139c6:	463b      	mov	r3, r7
 80139c8:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170
       ams_cell_temperatures.t4s12 = can1_ams_cell_temperatures_t4s12_decode(can1_ams_cell_temperatures.t4s12);
 80139cc:	4b5a      	ldr	r3, [pc, #360]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 80139ce:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7fa fafc 	bl	800dfd0 <can1_ams_cell_temperatures_t4s12_decode>
 80139d8:	eeb0 7a40 	vmov.f32	s14, s0
 80139dc:	eef0 7a60 	vmov.f32	s15, s1
 80139e0:	463b      	mov	r3, r7
 80139e2:	ed83 7b5e 	vstr	d7, [r3, #376]	; 0x178
       ams_cell_temperatures.t5s1 = can1_ams_cell_temperatures_t5s1_decode(can1_ams_cell_temperatures.t5s1);
 80139e6:	4b54      	ldr	r3, [pc, #336]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 80139e8:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7fa fb47 	bl	800e080 <can1_ams_cell_temperatures_t5s1_decode>
 80139f2:	eeb0 7a40 	vmov.f32	s14, s0
 80139f6:	eef0 7a60 	vmov.f32	s15, s1
 80139fa:	463b      	mov	r3, r7
 80139fc:	ed83 7b60 	vstr	d7, [r3, #384]	; 0x180
       ams_cell_temperatures.t5s2 = can1_ams_cell_temperatures_t5s2_decode(can1_ams_cell_temperatures.t5s2);
 8013a00:	4b4d      	ldr	r3, [pc, #308]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 8013a02:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7fa fb92 	bl	800e130 <can1_ams_cell_temperatures_t5s2_decode>
 8013a0c:	eeb0 7a40 	vmov.f32	s14, s0
 8013a10:	eef0 7a60 	vmov.f32	s15, s1
 8013a14:	463b      	mov	r3, r7
 8013a16:	ed83 7b62 	vstr	d7, [r3, #392]	; 0x188
       ams_cell_temperatures.t5s3 = can1_ams_cell_temperatures_t5s3_decode(can1_ams_cell_temperatures.t5s3);
 8013a1a:	4b47      	ldr	r3, [pc, #284]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 8013a1c:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	; 0x66
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7fa fbdd 	bl	800e1e0 <can1_ams_cell_temperatures_t5s3_decode>
 8013a26:	eeb0 7a40 	vmov.f32	s14, s0
 8013a2a:	eef0 7a60 	vmov.f32	s15, s1
 8013a2e:	463b      	mov	r3, r7
 8013a30:	ed83 7b64 	vstr	d7, [r3, #400]	; 0x190
       ams_cell_temperatures.t5s4 = can1_ams_cell_temperatures_t5s4_decode(can1_ams_cell_temperatures.t5s4);
 8013a34:	4b40      	ldr	r3, [pc, #256]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 8013a36:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7fa fc28 	bl	800e290 <can1_ams_cell_temperatures_t5s4_decode>
 8013a40:	eeb0 7a40 	vmov.f32	s14, s0
 8013a44:	eef0 7a60 	vmov.f32	s15, s1
 8013a48:	463b      	mov	r3, r7
 8013a4a:	ed83 7b66 	vstr	d7, [r3, #408]	; 0x198
       ams_cell_temperatures.t5s5 = can1_ams_cell_temperatures_t5s5_decode(can1_ams_cell_temperatures.t5s5);
 8013a4e:	4b3a      	ldr	r3, [pc, #232]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 8013a50:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 8013a54:	4618      	mov	r0, r3
 8013a56:	f7fa fc73 	bl	800e340 <can1_ams_cell_temperatures_t5s5_decode>
 8013a5a:	eeb0 7a40 	vmov.f32	s14, s0
 8013a5e:	eef0 7a60 	vmov.f32	s15, s1
 8013a62:	463b      	mov	r3, r7
 8013a64:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0
       ams_cell_temperatures.t5s6 = can1_ams_cell_temperatures_t5s6_decode(can1_ams_cell_temperatures.t5s6);
 8013a68:	4b33      	ldr	r3, [pc, #204]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 8013a6a:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7fa fcbe 	bl	800e3f0 <can1_ams_cell_temperatures_t5s6_decode>
 8013a74:	eeb0 7a40 	vmov.f32	s14, s0
 8013a78:	eef0 7a60 	vmov.f32	s15, s1
 8013a7c:	463b      	mov	r3, r7
 8013a7e:	ed83 7b6a 	vstr	d7, [r3, #424]	; 0x1a8
       ams_cell_temperatures.t5s7 = can1_ams_cell_temperatures_t5s7_decode(can1_ams_cell_temperatures.t5s7);
 8013a82:	4b2d      	ldr	r3, [pc, #180]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 8013a84:	f9b3 306e 	ldrsh.w	r3, [r3, #110]	; 0x6e
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f7fa fd09 	bl	800e4a0 <can1_ams_cell_temperatures_t5s7_decode>
 8013a8e:	eeb0 7a40 	vmov.f32	s14, s0
 8013a92:	eef0 7a60 	vmov.f32	s15, s1
 8013a96:	463b      	mov	r3, r7
 8013a98:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
       ams_cell_temperatures.t5s8 = can1_ams_cell_temperatures_t5s8_decode(can1_ams_cell_temperatures.t5s8);
 8013a9c:	4b26      	ldr	r3, [pc, #152]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 8013a9e:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7fa fd54 	bl	800e550 <can1_ams_cell_temperatures_t5s8_decode>
 8013aa8:	eeb0 7a40 	vmov.f32	s14, s0
 8013aac:	eef0 7a60 	vmov.f32	s15, s1
 8013ab0:	463b      	mov	r3, r7
 8013ab2:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8
       ams_cell_temperatures.t5s9 = can1_ams_cell_temperatures_t5s9_decode(can1_ams_cell_temperatures.t5s9);
 8013ab6:	4b20      	ldr	r3, [pc, #128]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 8013ab8:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8013abc:	4618      	mov	r0, r3
 8013abe:	f7fa fd9f 	bl	800e600 <can1_ams_cell_temperatures_t5s9_decode>
 8013ac2:	eeb0 7a40 	vmov.f32	s14, s0
 8013ac6:	eef0 7a60 	vmov.f32	s15, s1
 8013aca:	463b      	mov	r3, r7
 8013acc:	ed83 7b70 	vstr	d7, [r3, #448]	; 0x1c0
       ams_cell_temperatures.t5s10 = can1_ams_cell_temperatures_t5s10_decode(can1_ams_cell_temperatures.t5s10);
 8013ad0:	4b19      	ldr	r3, [pc, #100]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 8013ad2:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f7fa fdea 	bl	800e6b0 <can1_ams_cell_temperatures_t5s10_decode>
 8013adc:	eeb0 7a40 	vmov.f32	s14, s0
 8013ae0:	eef0 7a60 	vmov.f32	s15, s1
 8013ae4:	463b      	mov	r3, r7
 8013ae6:	ed83 7b72 	vstr	d7, [r3, #456]	; 0x1c8
       ams_cell_temperatures.t5s11 = can1_ams_cell_temperatures_t5s11_decode(can1_ams_cell_temperatures.t5s11);
 8013aea:	4b13      	ldr	r3, [pc, #76]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 8013aec:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8013af0:	4618      	mov	r0, r3
 8013af2:	f7fa fe35 	bl	800e760 <can1_ams_cell_temperatures_t5s11_decode>
 8013af6:	eeb0 7a40 	vmov.f32	s14, s0
 8013afa:	eef0 7a60 	vmov.f32	s15, s1
 8013afe:	463b      	mov	r3, r7
 8013b00:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0
       ams_cell_temperatures.t5s12 = can1_ams_cell_temperatures_t5s12_decode(can1_ams_cell_temperatures.t5s12);
 8013b04:	4b0c      	ldr	r3, [pc, #48]	; (8013b38 <can1_ams_cell_temperatures_receive+0x64c>)
 8013b06:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f7fa fe80 	bl	800e810 <can1_ams_cell_temperatures_t5s12_decode>
 8013b10:	eeb0 7a40 	vmov.f32	s14, s0
 8013b14:	eef0 7a60 	vmov.f32	s15, s1
 8013b18:	463b      	mov	r3, r7
 8013b1a:	ed83 7b76 	vstr	d7, [r3, #472]	; 0x1d8
       can1_ams_cell_temperatures_rx_callback(&ams_cell_temperatures);
 8013b1e:	463b      	mov	r3, r7
 8013b20:	4618      	mov	r0, r3
 8013b22:	f000 fb93 	bl	801424c <can1_ams_cell_temperatures_rx_callback>
       can1_ams_cell_temperatures_flag = 0;
 8013b26:	4b05      	ldr	r3, [pc, #20]	; (8013b3c <can1_ams_cell_temperatures_receive+0x650>)
 8013b28:	2200      	movs	r2, #0
 8013b2a:	701a      	strb	r2, [r3, #0]
   }
}
 8013b2c:	bf00      	nop
 8013b2e:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 8013b32:	46bd      	mov	sp, r7
 8013b34:	bd80      	pop	{r7, pc}
 8013b36:	bf00      	nop
 8013b38:	20001574 	.word	0x20001574
 8013b3c:	20001629 	.word	0x20001629

08013b40 <can2_amk1_setpoints_1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_amk1_setpoints_1_receive() {
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b084      	sub	sp, #16
 8013b44:	af00      	add	r7, sp, #0
   if(can2_amk1_setpoints_1_flag) {
 8013b46:	4b3a      	ldr	r3, [pc, #232]	; (8013c30 <can2_amk1_setpoints_1_receive+0xf0>)
 8013b48:	781b      	ldrb	r3, [r3, #0]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d06b      	beq.n	8013c26 <can2_amk1_setpoints_1_receive+0xe6>
       amk1_setpoints_1_t amk1_setpoints_1;
       amk1_setpoints_1.amk1_control_inverter_on = can2_amk1_setpoints_1_amk1_control_inverter_on_decode(can2_amk1_setpoints_1.amk1_control_inverter_on);
 8013b4e:	4b39      	ldr	r3, [pc, #228]	; (8013c34 <can2_amk1_setpoints_1_receive+0xf4>)
 8013b50:	781b      	ldrb	r3, [r3, #0]
 8013b52:	4618      	mov	r0, r3
 8013b54:	f7fb f83d 	bl	800ebd2 <can2_amk1_setpoints_1_amk1_control_inverter_on_decode>
 8013b58:	ec53 2b10 	vmov	r2, r3, d0
 8013b5c:	4610      	mov	r0, r2
 8013b5e:	4619      	mov	r1, r3
 8013b60:	f7ed f814 	bl	8000b8c <__aeabi_d2uiz>
 8013b64:	4603      	mov	r3, r0
 8013b66:	b2db      	uxtb	r3, r3
 8013b68:	71fb      	strb	r3, [r7, #7]
       amk1_setpoints_1.amk1_control_dc_on = can2_amk1_setpoints_1_amk1_control_dc_on_decode(can2_amk1_setpoints_1.amk1_control_dc_on);
 8013b6a:	4b32      	ldr	r3, [pc, #200]	; (8013c34 <can2_amk1_setpoints_1_receive+0xf4>)
 8013b6c:	785b      	ldrb	r3, [r3, #1]
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7fb f843 	bl	800ebfa <can2_amk1_setpoints_1_amk1_control_dc_on_decode>
 8013b74:	ec53 2b10 	vmov	r2, r3, d0
 8013b78:	4610      	mov	r0, r2
 8013b7a:	4619      	mov	r1, r3
 8013b7c:	f7ed f806 	bl	8000b8c <__aeabi_d2uiz>
 8013b80:	4603      	mov	r3, r0
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	713b      	strb	r3, [r7, #4]
       amk1_setpoints_1.amk1_control_enable = can2_amk1_setpoints_1_amk1_control_enable_decode(can2_amk1_setpoints_1.amk1_control_enable);
 8013b86:	4b2b      	ldr	r3, [pc, #172]	; (8013c34 <can2_amk1_setpoints_1_receive+0xf4>)
 8013b88:	789b      	ldrb	r3, [r3, #2]
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7fb f849 	bl	800ec22 <can2_amk1_setpoints_1_amk1_control_enable_decode>
 8013b90:	ec53 2b10 	vmov	r2, r3, d0
 8013b94:	4610      	mov	r0, r2
 8013b96:	4619      	mov	r1, r3
 8013b98:	f7ec fff8 	bl	8000b8c <__aeabi_d2uiz>
 8013b9c:	4603      	mov	r3, r0
 8013b9e:	b2db      	uxtb	r3, r3
 8013ba0:	717b      	strb	r3, [r7, #5]
       amk1_setpoints_1.amk1_control_error_reset = can2_amk1_setpoints_1_amk1_control_error_reset_decode(can2_amk1_setpoints_1.amk1_control_error_reset);
 8013ba2:	4b24      	ldr	r3, [pc, #144]	; (8013c34 <can2_amk1_setpoints_1_receive+0xf4>)
 8013ba4:	78db      	ldrb	r3, [r3, #3]
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f7fb f84f 	bl	800ec4a <can2_amk1_setpoints_1_amk1_control_error_reset_decode>
 8013bac:	ec53 2b10 	vmov	r2, r3, d0
 8013bb0:	4610      	mov	r0, r2
 8013bb2:	4619      	mov	r1, r3
 8013bb4:	f7ec ffea 	bl	8000b8c <__aeabi_d2uiz>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	b2db      	uxtb	r3, r3
 8013bbc:	71bb      	strb	r3, [r7, #6]
       amk1_setpoints_1.amk1_target_velocity = can2_amk1_setpoints_1_amk1_target_velocity_decode(can2_amk1_setpoints_1.amk1_target_velocity);
 8013bbe:	4b1d      	ldr	r3, [pc, #116]	; (8013c34 <can2_amk1_setpoints_1_receive+0xf4>)
 8013bc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f7fb f854 	bl	800ec72 <can2_amk1_setpoints_1_amk1_target_velocity_decode>
 8013bca:	ec53 2b10 	vmov	r2, r3, d0
 8013bce:	4610      	mov	r0, r2
 8013bd0:	4619      	mov	r1, r3
 8013bd2:	f7ec ffb3 	bl	8000b3c <__aeabi_d2iz>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	b21b      	sxth	r3, r3
 8013bda:	813b      	strh	r3, [r7, #8]
       amk1_setpoints_1.amk1_torque_limit_positiv = can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode(can2_amk1_setpoints_1.amk1_torque_limit_positiv);
 8013bdc:	4b15      	ldr	r3, [pc, #84]	; (8013c34 <can2_amk1_setpoints_1_receive+0xf4>)
 8013bde:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7fb f85a 	bl	800ec9c <can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode>
 8013be8:	ec53 2b10 	vmov	r2, r3, d0
 8013bec:	4610      	mov	r0, r2
 8013bee:	4619      	mov	r1, r3
 8013bf0:	f7ec ffa4 	bl	8000b3c <__aeabi_d2iz>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	b21b      	sxth	r3, r3
 8013bf8:	81bb      	strh	r3, [r7, #12]
       amk1_setpoints_1.amk1_torque_limit_negativ = can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode(can2_amk1_setpoints_1.amk1_torque_limit_negativ);
 8013bfa:	4b0e      	ldr	r3, [pc, #56]	; (8013c34 <can2_amk1_setpoints_1_receive+0xf4>)
 8013bfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7fb f860 	bl	800ecc6 <can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode>
 8013c06:	ec53 2b10 	vmov	r2, r3, d0
 8013c0a:	4610      	mov	r0, r2
 8013c0c:	4619      	mov	r1, r3
 8013c0e:	f7ec ff95 	bl	8000b3c <__aeabi_d2iz>
 8013c12:	4603      	mov	r3, r0
 8013c14:	b21b      	sxth	r3, r3
 8013c16:	817b      	strh	r3, [r7, #10]
       can2_amk1_setpoints_1_rx_callback(&amk1_setpoints_1);
 8013c18:	1d3b      	adds	r3, r7, #4
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	f000 fb20 	bl	8014260 <can2_amk1_setpoints_1_rx_callback>
       can2_amk1_setpoints_1_flag = 0;
 8013c20:	4b03      	ldr	r3, [pc, #12]	; (8013c30 <can2_amk1_setpoints_1_receive+0xf0>)
 8013c22:	2200      	movs	r2, #0
 8013c24:	701a      	strb	r2, [r3, #0]
   }
}
 8013c26:	bf00      	nop
 8013c28:	3710      	adds	r7, #16
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}
 8013c2e:	bf00      	nop
 8013c30:	2000162a 	.word	0x2000162a
 8013c34:	200015f0 	.word	0x200015f0

08013c38 <can2_ivt_msg_result_i_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_receive() {
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b082      	sub	sp, #8
 8013c3c:	af00      	add	r7, sp, #0
   if(can2_ivt_msg_result_i_flag) {
 8013c3e:	4b0e      	ldr	r3, [pc, #56]	; (8013c78 <can2_ivt_msg_result_i_receive+0x40>)
 8013c40:	781b      	ldrb	r3, [r3, #0]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d013      	beq.n	8013c6e <can2_ivt_msg_result_i_receive+0x36>
       ivt_msg_result_i_t ivt_msg_result_i;
       ivt_msg_result_i.i_ts = can2_ivt_msg_result_i_i_ts_decode(can2_ivt_msg_result_i.i_ts);
 8013c46:	4b0d      	ldr	r3, [pc, #52]	; (8013c7c <can2_ivt_msg_result_i_receive+0x44>)
 8013c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c4c:	4610      	mov	r0, r2
 8013c4e:	4619      	mov	r1, r3
 8013c50:	f7fb f97e 	bl	800ef50 <can2_ivt_msg_result_i_i_ts_decode>
 8013c54:	eeb0 7a40 	vmov.f32	s14, s0
 8013c58:	eef0 7a60 	vmov.f32	s15, s1
 8013c5c:	ed87 7b00 	vstr	d7, [r7]
       can2_ivt_msg_result_i_rx_callback(&ivt_msg_result_i);
 8013c60:	463b      	mov	r3, r7
 8013c62:	4618      	mov	r0, r3
 8013c64:	f001 febe 	bl	80159e4 <can2_ivt_msg_result_i_rx_callback>
       can2_ivt_msg_result_i_flag = 0;
 8013c68:	4b03      	ldr	r3, [pc, #12]	; (8013c78 <can2_ivt_msg_result_i_receive+0x40>)
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	701a      	strb	r2, [r3, #0]
   }
}
 8013c6e:	bf00      	nop
 8013c70:	3708      	adds	r7, #8
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}
 8013c76:	bf00      	nop
 8013c78:	2000162b 	.word	0x2000162b
 8013c7c:	20001600 	.word	0x20001600

08013c80 <can2_ivt_msg_result_u1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_receive() {
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b082      	sub	sp, #8
 8013c84:	af00      	add	r7, sp, #0
   if(can2_ivt_msg_result_u1_flag) {
 8013c86:	4b0e      	ldr	r3, [pc, #56]	; (8013cc0 <can2_ivt_msg_result_u1_receive+0x40>)
 8013c88:	781b      	ldrb	r3, [r3, #0]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d013      	beq.n	8013cb6 <can2_ivt_msg_result_u1_receive+0x36>
       ivt_msg_result_u1_t ivt_msg_result_u1;
       ivt_msg_result_u1.u_cells = can2_ivt_msg_result_u1_u_cells_decode(can2_ivt_msg_result_u1.u_cells);
 8013c8e:	4b0d      	ldr	r3, [pc, #52]	; (8013cc4 <can2_ivt_msg_result_u1_receive+0x44>)
 8013c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c94:	4610      	mov	r0, r2
 8013c96:	4619      	mov	r1, r3
 8013c98:	f7fb faaa 	bl	800f1f0 <can2_ivt_msg_result_u1_u_cells_decode>
 8013c9c:	eeb0 7a40 	vmov.f32	s14, s0
 8013ca0:	eef0 7a60 	vmov.f32	s15, s1
 8013ca4:	ed87 7b00 	vstr	d7, [r7]
       can2_ivt_msg_result_u1_rx_callback(&ivt_msg_result_u1);
 8013ca8:	463b      	mov	r3, r7
 8013caa:	4618      	mov	r0, r3
 8013cac:	f001 febc 	bl	8015a28 <can2_ivt_msg_result_u1_rx_callback>
       can2_ivt_msg_result_u1_flag = 0;
 8013cb0:	4b03      	ldr	r3, [pc, #12]	; (8013cc0 <can2_ivt_msg_result_u1_receive+0x40>)
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	701a      	strb	r2, [r3, #0]
   }
}
 8013cb6:	bf00      	nop
 8013cb8:	3708      	adds	r7, #8
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}
 8013cbe:	bf00      	nop
 8013cc0:	2000162c 	.word	0x2000162c
 8013cc4:	20001608 	.word	0x20001608

08013cc8 <can2_ivt_msg_result_u3_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_receive() {
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b082      	sub	sp, #8
 8013ccc:	af00      	add	r7, sp, #0
   if(can2_ivt_msg_result_u3_flag) {
 8013cce:	4b0e      	ldr	r3, [pc, #56]	; (8013d08 <can2_ivt_msg_result_u3_receive+0x40>)
 8013cd0:	781b      	ldrb	r3, [r3, #0]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d013      	beq.n	8013cfe <can2_ivt_msg_result_u3_receive+0x36>
       ivt_msg_result_u3_t ivt_msg_result_u3;
       ivt_msg_result_u3.u_vehicle = can2_ivt_msg_result_u3_u_vehicle_decode(can2_ivt_msg_result_u3.u_vehicle);
 8013cd6:	4b0d      	ldr	r3, [pc, #52]	; (8013d0c <can2_ivt_msg_result_u3_receive+0x44>)
 8013cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cdc:	4610      	mov	r0, r2
 8013cde:	4619      	mov	r1, r3
 8013ce0:	f7fb fbd6 	bl	800f490 <can2_ivt_msg_result_u3_u_vehicle_decode>
 8013ce4:	eeb0 7a40 	vmov.f32	s14, s0
 8013ce8:	eef0 7a60 	vmov.f32	s15, s1
 8013cec:	ed87 7b00 	vstr	d7, [r7]
       can2_ivt_msg_result_u3_rx_callback(&ivt_msg_result_u3);
 8013cf0:	463b      	mov	r3, r7
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f001 feba 	bl	8015a6c <can2_ivt_msg_result_u3_rx_callback>
       can2_ivt_msg_result_u3_flag = 0;
 8013cf8:	4b03      	ldr	r3, [pc, #12]	; (8013d08 <can2_ivt_msg_result_u3_receive+0x40>)
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	701a      	strb	r2, [r3, #0]
   }
}
 8013cfe:	bf00      	nop
 8013d00:	3708      	adds	r7, #8
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}
 8013d06:	bf00      	nop
 8013d08:	2000162d 	.word	0x2000162d
 8013d0c:	20001610 	.word	0x20001610

08013d10 <can2_charger_config_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_charger_config_receive() {
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b08c      	sub	sp, #48	; 0x30
 8013d14:	af00      	add	r7, sp, #0
   if(can2_charger_config_flag) {
 8013d16:	4b26      	ldr	r3, [pc, #152]	; (8013db0 <can2_charger_config_receive+0xa0>)
 8013d18:	781b      	ldrb	r3, [r3, #0]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d043      	beq.n	8013da6 <can2_charger_config_receive+0x96>
       charger_config_t charger_config;
       charger_config.msg_set_voltage_limit = can2_charger_config_msg_set_voltage_limit_decode(can2_charger_config.msg_set_voltage_limit);
 8013d1e:	4b25      	ldr	r3, [pc, #148]	; (8013db4 <can2_charger_config_receive+0xa4>)
 8013d20:	885b      	ldrh	r3, [r3, #2]
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7fb fd58 	bl	800f7d8 <can2_charger_config_msg_set_voltage_limit_decode>
 8013d28:	eeb0 7a40 	vmov.f32	s14, s0
 8013d2c:	eef0 7a60 	vmov.f32	s15, s1
 8013d30:	ed87 7b08 	vstr	d7, [r7, #32]
       charger_config.msg_set_current_limit = can2_charger_config_msg_set_current_limit_decode(can2_charger_config.msg_set_current_limit);
 8013d34:	4b1f      	ldr	r3, [pc, #124]	; (8013db4 <can2_charger_config_receive+0xa4>)
 8013d36:	889b      	ldrh	r3, [r3, #4]
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f7fb fd7d 	bl	800f838 <can2_charger_config_msg_set_current_limit_decode>
 8013d3e:	eeb0 7a40 	vmov.f32	s14, s0
 8013d42:	eef0 7a60 	vmov.f32	s15, s1
 8013d46:	ed87 7b00 	vstr	d7, [r7]
       charger_config.msg_set_power_limit = can2_charger_config_msg_set_power_limit_decode(can2_charger_config.msg_set_power_limit);
 8013d4a:	4b1a      	ldr	r3, [pc, #104]	; (8013db4 <can2_charger_config_receive+0xa4>)
 8013d4c:	88db      	ldrh	r3, [r3, #6]
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7fb fda1 	bl	800f896 <can2_charger_config_msg_set_power_limit_decode>
 8013d54:	eeb0 7a40 	vmov.f32	s14, s0
 8013d58:	eef0 7a60 	vmov.f32	s15, s1
 8013d5c:	ed87 7b04 	vstr	d7, [r7, #16]
       charger_config.msg_set_enabled = can2_charger_config_msg_set_enabled_decode(can2_charger_config.msg_set_enabled);
 8013d60:	4b14      	ldr	r3, [pc, #80]	; (8013db4 <can2_charger_config_receive+0xa4>)
 8013d62:	7a1b      	ldrb	r3, [r3, #8]
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7fb fdb9 	bl	800f8dc <can2_charger_config_msg_set_enabled_decode>
 8013d6a:	ec53 2b10 	vmov	r2, r3, d0
 8013d6e:	4610      	mov	r0, r2
 8013d70:	4619      	mov	r1, r3
 8013d72:	f7ec ff0b 	bl	8000b8c <__aeabi_d2uiz>
 8013d76:	4603      	mov	r3, r0
 8013d78:	b2db      	uxtb	r3, r3
 8013d7a:	723b      	strb	r3, [r7, #8]
       charger_config.msg_set_time_out = can2_charger_config_msg_set_time_out_decode(can2_charger_config.msg_set_time_out);
 8013d7c:	4b0d      	ldr	r3, [pc, #52]	; (8013db4 <can2_charger_config_receive+0xa4>)
 8013d7e:	7a5b      	ldrb	r3, [r3, #9]
 8013d80:	4618      	mov	r0, r3
 8013d82:	f7fb fdce 	bl	800f922 <can2_charger_config_msg_set_time_out_decode>
 8013d86:	ec53 2b10 	vmov	r2, r3, d0
 8013d8a:	4610      	mov	r0, r2
 8013d8c:	4619      	mov	r1, r3
 8013d8e:	f7ec fefd 	bl	8000b8c <__aeabi_d2uiz>
 8013d92:	4603      	mov	r3, r0
 8013d94:	b2db      	uxtb	r3, r3
 8013d96:	763b      	strb	r3, [r7, #24]
       can2_charger_config_rx_callback(&charger_config);
 8013d98:	463b      	mov	r3, r7
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f002 f89c 	bl	8015ed8 <can2_charger_config_rx_callback>
       can2_charger_config_flag = 0;
 8013da0:	4b03      	ldr	r3, [pc, #12]	; (8013db0 <can2_charger_config_receive+0xa0>)
 8013da2:	2200      	movs	r2, #0
 8013da4:	701a      	strb	r2, [r3, #0]
   }
}
 8013da6:	bf00      	nop
 8013da8:	3730      	adds	r7, #48	; 0x30
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}
 8013dae:	bf00      	nop
 8013db0:	2000162e 	.word	0x2000162e
 8013db4:	20001618 	.word	0x20001618

08013db8 <can2_cc_status_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_cc_status_receive() {
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b082      	sub	sp, #8
 8013dbc:	af00      	add	r7, sp, #0
   if(can2_cc_status_flag) {
 8013dbe:	4b0e      	ldr	r3, [pc, #56]	; (8013df8 <can2_cc_status_receive+0x40>)
 8013dc0:	781b      	ldrb	r3, [r3, #0]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d014      	beq.n	8013df0 <can2_cc_status_receive+0x38>
       cc_status_t cc_status;
       cc_status.enable_ams_charging = can2_cc_status_enable_ams_charging_decode(can2_cc_status.enable_ams_charging);
 8013dc6:	4b0d      	ldr	r3, [pc, #52]	; (8013dfc <can2_cc_status_receive+0x44>)
 8013dc8:	781b      	ldrb	r3, [r3, #0]
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7fb fe0d 	bl	800f9ea <can2_cc_status_enable_ams_charging_decode>
 8013dd0:	ec53 2b10 	vmov	r2, r3, d0
 8013dd4:	4610      	mov	r0, r2
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	f7ec fed8 	bl	8000b8c <__aeabi_d2uiz>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	b2db      	uxtb	r3, r3
 8013de0:	713b      	strb	r3, [r7, #4]
       can2_cc_status_rx_callback(&cc_status);
 8013de2:	1d3b      	adds	r3, r7, #4
 8013de4:	4618      	mov	r0, r3
 8013de6:	f001 fe63 	bl	8015ab0 <can2_cc_status_rx_callback>
       can2_cc_status_flag = 0;
 8013dea:	4b03      	ldr	r3, [pc, #12]	; (8013df8 <can2_cc_status_receive+0x40>)
 8013dec:	2200      	movs	r2, #0
 8013dee:	701a      	strb	r2, [r3, #0]
   }
}
 8013df0:	bf00      	nop
 8013df2:	3708      	adds	r7, #8
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}
 8013df8:	2000162f 	.word	0x2000162f
 8013dfc:	20001624 	.word	0x20001624

08013e00 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b08a      	sub	sp, #40	; 0x28
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data)) {
 8013e08:	f107 020c 	add.w	r2, r7, #12
 8013e0c:	4b53      	ldr	r3, [pc, #332]	; (8013f5c <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8013e0e:	2100      	movs	r1, #0
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f011 fdbf 	bl	8025994 <HAL_CAN_GetRxMessage>
 8013e16:	4603      	mov	r3, r0
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	f040 809a 	bne.w	8013f52 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
       switch(rx_header.StdId) {
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	f240 5224 	movw	r2, #1316	; 0x524
 8013e24:	4293      	cmp	r3, r2
 8013e26:	f000 808b 	beq.w	8013f40 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>
 8013e2a:	f240 5224 	movw	r2, #1316	; 0x524
 8013e2e:	4293      	cmp	r3, r2
 8013e30:	f200 8090 	bhi.w	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013e34:	f240 5222 	movw	r2, #1314	; 0x522
 8013e38:	4293      	cmp	r3, r2
 8013e3a:	d07e      	beq.n	8013f3a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 8013e3c:	f240 5222 	movw	r2, #1314	; 0x522
 8013e40:	4293      	cmp	r3, r2
 8013e42:	f200 8087 	bhi.w	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013e46:	f240 5221 	movw	r2, #1313	; 0x521
 8013e4a:	4293      	cmp	r3, r2
 8013e4c:	d072      	beq.n	8013f34 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
 8013e4e:	f240 5221 	movw	r2, #1313	; 0x521
 8013e52:	4293      	cmp	r3, r2
 8013e54:	d87e      	bhi.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013e56:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013e5a:	d074      	beq.n	8013f46 <HAL_CAN_RxFifo0MsgPendingCallback+0x146>
 8013e5c:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013e60:	d878      	bhi.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013e62:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013e66:	d071      	beq.n	8013f4c <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>
 8013e68:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013e6c:	d872      	bhi.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013e6e:	2b40      	cmp	r3, #64	; 0x40
 8013e70:	d84a      	bhi.n	8013f08 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
 8013e72:	2b20      	cmp	r3, #32
 8013e74:	d36e      	bcc.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013e76:	3b20      	subs	r3, #32
 8013e78:	2b20      	cmp	r3, #32
 8013e7a:	d86b      	bhi.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013e7c:	a201      	add	r2, pc, #4	; (adr r2, 8013e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8013e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e82:	bf00      	nop
 8013e84:	08013f11 	.word	0x08013f11
 8013e88:	08013f23 	.word	0x08013f23
 8013e8c:	08013f29 	.word	0x08013f29
 8013e90:	08013f1d 	.word	0x08013f1d
 8013e94:	08013f55 	.word	0x08013f55
 8013e98:	08013f55 	.word	0x08013f55
 8013e9c:	08013f55 	.word	0x08013f55
 8013ea0:	08013f55 	.word	0x08013f55
 8013ea4:	08013f55 	.word	0x08013f55
 8013ea8:	08013f55 	.word	0x08013f55
 8013eac:	08013f55 	.word	0x08013f55
 8013eb0:	08013f55 	.word	0x08013f55
 8013eb4:	08013f55 	.word	0x08013f55
 8013eb8:	08013f55 	.word	0x08013f55
 8013ebc:	08013f55 	.word	0x08013f55
 8013ec0:	08013f55 	.word	0x08013f55
 8013ec4:	08013f55 	.word	0x08013f55
 8013ec8:	08013f55 	.word	0x08013f55
 8013ecc:	08013f55 	.word	0x08013f55
 8013ed0:	08013f55 	.word	0x08013f55
 8013ed4:	08013f55 	.word	0x08013f55
 8013ed8:	08013f55 	.word	0x08013f55
 8013edc:	08013f55 	.word	0x08013f55
 8013ee0:	08013f55 	.word	0x08013f55
 8013ee4:	08013f55 	.word	0x08013f55
 8013ee8:	08013f55 	.word	0x08013f55
 8013eec:	08013f55 	.word	0x08013f55
 8013ef0:	08013f55 	.word	0x08013f55
 8013ef4:	08013f55 	.word	0x08013f55
 8013ef8:	08013f55 	.word	0x08013f55
 8013efc:	08013f55 	.word	0x08013f55
 8013f00:	08013f55 	.word	0x08013f55
 8013f04:	08013f17 	.word	0x08013f17
 8013f08:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 8013f0c:	d00f      	beq.n	8013f2e <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 8013f0e:	e021      	b.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can1_ams_status_1_decode();
 8013f10:	f7fb ff6a 	bl	800fde8 <can1_ams_status_1_decode>
               break;
 8013f14:	e01e      	b.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can1_dbu_status_1_decode();
 8013f16:	f7fb ff7b 	bl	800fe10 <can1_dbu_status_1_decode>
               break;
 8013f1a:	e01b      	b.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can1_ams_temperatures_decode();
 8013f1c:	f7fb ff8c 	bl	800fe38 <can1_ams_temperatures_decode>
               break;
 8013f20:	e018      	b.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can1_ams_cell_voltages_decode();
 8013f22:	f7fb ff9d 	bl	800fe60 <can1_ams_cell_voltages_decode>
               break;
 8013f26:	e015      	b.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can1_ams_cell_temperatures_decode();
 8013f28:	f7fb ffb0 	bl	800fe8c <can1_ams_cell_temperatures_decode>
               break;
 8013f2c:	e012      	b.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_amk1_setpoints_1_decode();
 8013f2e:	f7fb ffc3 	bl	800feb8 <can2_amk1_setpoints_1_decode>
               break;
 8013f32:	e00f      	b.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_ivt_msg_result_i_decode();
 8013f34:	f7fb ffd4 	bl	800fee0 <can2_ivt_msg_result_i_decode>
               break;
 8013f38:	e00c      	b.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_ivt_msg_result_u1_decode();
 8013f3a:	f7fb ffe5 	bl	800ff08 <can2_ivt_msg_result_u1_decode>
               break;
 8013f3e:	e009      	b.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_ivt_msg_result_u3_decode();
 8013f40:	f7fb fff6 	bl	800ff30 <can2_ivt_msg_result_u3_decode>
               break;
 8013f44:	e006      	b.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_charger_config_decode();
 8013f46:	f7fc f807 	bl	800ff58 <can2_charger_config_decode>
               break;
 8013f4a:	e003      	b.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_cc_status_decode();
 8013f4c:	f7fc f81a 	bl	800ff84 <can2_cc_status_decode>
               break;
 8013f50:	e000      	b.n	8013f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
    }
 8013f52:	bf00      	nop
}
 8013f54:	bf00      	nop
 8013f56:	3728      	adds	r7, #40	; 0x28
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}
 8013f5c:	200014d0 	.word	0x200014d0

08013f60 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b08a      	sub	sp, #40	; 0x28
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rx_header, rx_data)) {
 8013f68:	f107 020c 	add.w	r2, r7, #12
 8013f6c:	4b53      	ldr	r3, [pc, #332]	; (80140bc <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8013f6e:	2101      	movs	r1, #1
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f011 fd0f 	bl	8025994 <HAL_CAN_GetRxMessage>
 8013f76:	4603      	mov	r3, r0
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	f040 809a 	bne.w	80140b2 <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
       switch(rx_header.StdId) {
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	f240 5224 	movw	r2, #1316	; 0x524
 8013f84:	4293      	cmp	r3, r2
 8013f86:	f000 808b 	beq.w	80140a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>
 8013f8a:	f240 5224 	movw	r2, #1316	; 0x524
 8013f8e:	4293      	cmp	r3, r2
 8013f90:	f200 8090 	bhi.w	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013f94:	f240 5222 	movw	r2, #1314	; 0x522
 8013f98:	4293      	cmp	r3, r2
 8013f9a:	d07e      	beq.n	801409a <HAL_CAN_RxFifo1MsgPendingCallback+0x13a>
 8013f9c:	f240 5222 	movw	r2, #1314	; 0x522
 8013fa0:	4293      	cmp	r3, r2
 8013fa2:	f200 8087 	bhi.w	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013fa6:	f240 5221 	movw	r2, #1313	; 0x521
 8013faa:	4293      	cmp	r3, r2
 8013fac:	d072      	beq.n	8014094 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>
 8013fae:	f240 5221 	movw	r2, #1313	; 0x521
 8013fb2:	4293      	cmp	r3, r2
 8013fb4:	d87e      	bhi.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013fb6:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013fba:	d074      	beq.n	80140a6 <HAL_CAN_RxFifo1MsgPendingCallback+0x146>
 8013fbc:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013fc0:	d878      	bhi.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013fc2:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013fc6:	d071      	beq.n	80140ac <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>
 8013fc8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013fcc:	d872      	bhi.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013fce:	2b40      	cmp	r3, #64	; 0x40
 8013fd0:	d84a      	bhi.n	8014068 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>
 8013fd2:	2b20      	cmp	r3, #32
 8013fd4:	d36e      	bcc.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013fd6:	3b20      	subs	r3, #32
 8013fd8:	2b20      	cmp	r3, #32
 8013fda:	d86b      	bhi.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013fdc:	a201      	add	r2, pc, #4	; (adr r2, 8013fe4 <HAL_CAN_RxFifo1MsgPendingCallback+0x84>)
 8013fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fe2:	bf00      	nop
 8013fe4:	08014071 	.word	0x08014071
 8013fe8:	08014083 	.word	0x08014083
 8013fec:	08014089 	.word	0x08014089
 8013ff0:	0801407d 	.word	0x0801407d
 8013ff4:	080140b5 	.word	0x080140b5
 8013ff8:	080140b5 	.word	0x080140b5
 8013ffc:	080140b5 	.word	0x080140b5
 8014000:	080140b5 	.word	0x080140b5
 8014004:	080140b5 	.word	0x080140b5
 8014008:	080140b5 	.word	0x080140b5
 801400c:	080140b5 	.word	0x080140b5
 8014010:	080140b5 	.word	0x080140b5
 8014014:	080140b5 	.word	0x080140b5
 8014018:	080140b5 	.word	0x080140b5
 801401c:	080140b5 	.word	0x080140b5
 8014020:	080140b5 	.word	0x080140b5
 8014024:	080140b5 	.word	0x080140b5
 8014028:	080140b5 	.word	0x080140b5
 801402c:	080140b5 	.word	0x080140b5
 8014030:	080140b5 	.word	0x080140b5
 8014034:	080140b5 	.word	0x080140b5
 8014038:	080140b5 	.word	0x080140b5
 801403c:	080140b5 	.word	0x080140b5
 8014040:	080140b5 	.word	0x080140b5
 8014044:	080140b5 	.word	0x080140b5
 8014048:	080140b5 	.word	0x080140b5
 801404c:	080140b5 	.word	0x080140b5
 8014050:	080140b5 	.word	0x080140b5
 8014054:	080140b5 	.word	0x080140b5
 8014058:	080140b5 	.word	0x080140b5
 801405c:	080140b5 	.word	0x080140b5
 8014060:	080140b5 	.word	0x080140b5
 8014064:	08014077 	.word	0x08014077
 8014068:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 801406c:	d00f      	beq.n	801408e <HAL_CAN_RxFifo1MsgPendingCallback+0x12e>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 801406e:	e021      	b.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can1_ams_status_1_decode();
 8014070:	f7fb feba 	bl	800fde8 <can1_ams_status_1_decode>
               break;
 8014074:	e01e      	b.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can1_dbu_status_1_decode();
 8014076:	f7fb fecb 	bl	800fe10 <can1_dbu_status_1_decode>
               break;
 801407a:	e01b      	b.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can1_ams_temperatures_decode();
 801407c:	f7fb fedc 	bl	800fe38 <can1_ams_temperatures_decode>
               break;
 8014080:	e018      	b.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can1_ams_cell_voltages_decode();
 8014082:	f7fb feed 	bl	800fe60 <can1_ams_cell_voltages_decode>
               break;
 8014086:	e015      	b.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can1_ams_cell_temperatures_decode();
 8014088:	f7fb ff00 	bl	800fe8c <can1_ams_cell_temperatures_decode>
               break;
 801408c:	e012      	b.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_amk1_setpoints_1_decode();
 801408e:	f7fb ff13 	bl	800feb8 <can2_amk1_setpoints_1_decode>
               break;
 8014092:	e00f      	b.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_ivt_msg_result_i_decode();
 8014094:	f7fb ff24 	bl	800fee0 <can2_ivt_msg_result_i_decode>
               break;
 8014098:	e00c      	b.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_ivt_msg_result_u1_decode();
 801409a:	f7fb ff35 	bl	800ff08 <can2_ivt_msg_result_u1_decode>
               break;
 801409e:	e009      	b.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_ivt_msg_result_u3_decode();
 80140a0:	f7fb ff46 	bl	800ff30 <can2_ivt_msg_result_u3_decode>
               break;
 80140a4:	e006      	b.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_charger_config_decode();
 80140a6:	f7fb ff57 	bl	800ff58 <can2_charger_config_decode>
               break;
 80140aa:	e003      	b.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_cc_status_decode();
 80140ac:	f7fb ff6a 	bl	800ff84 <can2_cc_status_decode>
               break;
 80140b0:	e000      	b.n	80140b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
    }
 80140b2:	bf00      	nop
}
 80140b4:	bf00      	nop
 80140b6:	3728      	adds	r7, #40	; 0x28
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}
 80140bc:	200014d0 	.word	0x200014d0

080140c0 <simple_filter>:


void simple_filter() {
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b08a      	sub	sp, #40	; 0x28
 80140c4:	af00      	add	r7, sp, #0
   CAN_FilterTypeDef filter_config;
   
   filter_config.FilterActivation = ENABLE;
 80140c6:	2301      	movs	r3, #1
 80140c8:	623b      	str	r3, [r7, #32]
   filter_config.FilterBank = 0;
 80140ca:	2300      	movs	r3, #0
 80140cc:	617b      	str	r3, [r7, #20]
   filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80140ce:	2300      	movs	r3, #0
 80140d0:	61bb      	str	r3, [r7, #24]
   filter_config.FilterIdHigh = 0x0000;
 80140d2:	2300      	movs	r3, #0
 80140d4:	603b      	str	r3, [r7, #0]
   filter_config.FilterIdLow = 0x0000;
 80140d6:	2300      	movs	r3, #0
 80140d8:	607b      	str	r3, [r7, #4]
   filter_config.FilterMaskIdHigh = 0x0000;
 80140da:	2300      	movs	r3, #0
 80140dc:	60bb      	str	r3, [r7, #8]
   filter_config.FilterMaskIdLow = 0x0000;
 80140de:	2300      	movs	r3, #0
 80140e0:	60fb      	str	r3, [r7, #12]
   filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80140e2:	2301      	movs	r3, #1
 80140e4:	61fb      	str	r3, [r7, #28]

   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80140e6:	2300      	movs	r3, #0
 80140e8:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan1, &filter_config) != HAL_OK) {
 80140ea:	4b1d      	ldr	r3, [pc, #116]	; (8014160 <simple_filter+0xa0>)
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	463a      	mov	r2, r7
 80140f0:	4611      	mov	r1, r2
 80140f2:	4618      	mov	r0, r3
 80140f4:	f011 f9d8 	bl	80254a8 <HAL_CAN_ConfigFilter>
 80140f8:	4603      	mov	r3, r0
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d001      	beq.n	8014102 <simple_filter+0x42>
       Error_Handler();
 80140fe:	f003 faa9 	bl	8017654 <Error_Handler>
   }
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8014102:	2301      	movs	r3, #1
 8014104:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan1, &filter_config) != HAL_OK) {
 8014106:	4b16      	ldr	r3, [pc, #88]	; (8014160 <simple_filter+0xa0>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	463a      	mov	r2, r7
 801410c:	4611      	mov	r1, r2
 801410e:	4618      	mov	r0, r3
 8014110:	f011 f9ca 	bl	80254a8 <HAL_CAN_ConfigFilter>
 8014114:	4603      	mov	r3, r0
 8014116:	2b00      	cmp	r3, #0
 8014118:	d001      	beq.n	801411e <simple_filter+0x5e>
       Error_Handler();
 801411a:	f003 fa9b 	bl	8017654 <Error_Handler>
   }
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 801411e:	2300      	movs	r3, #0
 8014120:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan2, &filter_config) != HAL_OK) {
 8014122:	4b10      	ldr	r3, [pc, #64]	; (8014164 <simple_filter+0xa4>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	463a      	mov	r2, r7
 8014128:	4611      	mov	r1, r2
 801412a:	4618      	mov	r0, r3
 801412c:	f011 f9bc 	bl	80254a8 <HAL_CAN_ConfigFilter>
 8014130:	4603      	mov	r3, r0
 8014132:	2b00      	cmp	r3, #0
 8014134:	d001      	beq.n	801413a <simple_filter+0x7a>
       Error_Handler();
 8014136:	f003 fa8d 	bl	8017654 <Error_Handler>
   }
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 801413a:	2301      	movs	r3, #1
 801413c:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan2, &filter_config) != HAL_OK) {
 801413e:	4b09      	ldr	r3, [pc, #36]	; (8014164 <simple_filter+0xa4>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	463a      	mov	r2, r7
 8014144:	4611      	mov	r1, r2
 8014146:	4618      	mov	r0, r3
 8014148:	f011 f9ae 	bl	80254a8 <HAL_CAN_ConfigFilter>
 801414c:	4603      	mov	r3, r0
 801414e:	2b00      	cmp	r3, #0
 8014150:	d001      	beq.n	8014156 <simple_filter+0x96>
       Error_Handler();
 8014152:	f003 fa7f 	bl	8017654 <Error_Handler>
   }


}
 8014156:	bf00      	nop
 8014158:	3728      	adds	r7, #40	; 0x28
 801415a:	46bd      	mov	sp, r7
 801415c:	bd80      	pop	{r7, pc}
 801415e:	bf00      	nop
 8014160:	20001630 	.word	0x20001630
 8014164:	20001634 	.word	0x20001634

08014168 <initialize_CAN>:

void initialize_CAN(CAN_HandleTypeDef* __hcan1, CAN_HandleTypeDef* __hcan2) {
 8014168:	b580      	push	{r7, lr}
 801416a:	b082      	sub	sp, #8
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
 8014170:	6039      	str	r1, [r7, #0]
   _hcan1 = __hcan1;
 8014172:	4a25      	ldr	r2, [pc, #148]	; (8014208 <initialize_CAN+0xa0>)
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	6013      	str	r3, [r2, #0]

   if (HAL_CAN_Start(_hcan1) != HAL_OK) {
 8014178:	4b23      	ldr	r3, [pc, #140]	; (8014208 <initialize_CAN+0xa0>)
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	4618      	mov	r0, r3
 801417e:	f011 fa73 	bl	8025668 <HAL_CAN_Start>
 8014182:	4603      	mov	r3, r0
 8014184:	2b00      	cmp	r3, #0
 8014186:	d001      	beq.n	801418c <initialize_CAN+0x24>
       Error_Handler();
 8014188:	f003 fa64 	bl	8017654 <Error_Handler>
   }
   if (HAL_CAN_WakeUp(_hcan1) != HAL_OK) {
 801418c:	4b1e      	ldr	r3, [pc, #120]	; (8014208 <initialize_CAN+0xa0>)
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	4618      	mov	r0, r3
 8014192:	f011 faad 	bl	80256f0 <HAL_CAN_WakeUp>
 8014196:	4603      	mov	r3, r0
 8014198:	2b00      	cmp	r3, #0
 801419a:	d001      	beq.n	80141a0 <initialize_CAN+0x38>
       Error_Handler();
 801419c:	f003 fa5a 	bl	8017654 <Error_Handler>
   }
   if (HAL_CAN_ActivateNotification(_hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 80141a0:	4b19      	ldr	r3, [pc, #100]	; (8014208 <initialize_CAN+0xa0>)
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	2112      	movs	r1, #18
 80141a6:	4618      	mov	r0, r3
 80141a8:	f011 fd06 	bl	8025bb8 <HAL_CAN_ActivateNotification>
 80141ac:	4603      	mov	r3, r0
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d001      	beq.n	80141b6 <initialize_CAN+0x4e>
       Error_Handler();
 80141b2:	f003 fa4f 	bl	8017654 <Error_Handler>
   }

   _hcan2 = __hcan2;
 80141b6:	4a15      	ldr	r2, [pc, #84]	; (801420c <initialize_CAN+0xa4>)
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	6013      	str	r3, [r2, #0]

   if (HAL_CAN_Start(_hcan2) != HAL_OK) {
 80141bc:	4b13      	ldr	r3, [pc, #76]	; (801420c <initialize_CAN+0xa4>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	4618      	mov	r0, r3
 80141c2:	f011 fa51 	bl	8025668 <HAL_CAN_Start>
 80141c6:	4603      	mov	r3, r0
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d001      	beq.n	80141d0 <initialize_CAN+0x68>
       Error_Handler();
 80141cc:	f003 fa42 	bl	8017654 <Error_Handler>
   }
   if (HAL_CAN_WakeUp(_hcan2) != HAL_OK) {
 80141d0:	4b0e      	ldr	r3, [pc, #56]	; (801420c <initialize_CAN+0xa4>)
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	4618      	mov	r0, r3
 80141d6:	f011 fa8b 	bl	80256f0 <HAL_CAN_WakeUp>
 80141da:	4603      	mov	r3, r0
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d001      	beq.n	80141e4 <initialize_CAN+0x7c>
       Error_Handler();
 80141e0:	f003 fa38 	bl	8017654 <Error_Handler>
   }
   if (HAL_CAN_ActivateNotification(_hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 80141e4:	4b09      	ldr	r3, [pc, #36]	; (801420c <initialize_CAN+0xa4>)
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	2112      	movs	r1, #18
 80141ea:	4618      	mov	r0, r3
 80141ec:	f011 fce4 	bl	8025bb8 <HAL_CAN_ActivateNotification>
 80141f0:	4603      	mov	r3, r0
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d001      	beq.n	80141fa <initialize_CAN+0x92>
       Error_Handler();
 80141f6:	f003 fa2d 	bl	8017654 <Error_Handler>
   }


   simple_filter();
 80141fa:	f7ff ff61 	bl	80140c0 <simple_filter>

}
 80141fe:	bf00      	nop
 8014200:	3708      	adds	r7, #8
 8014202:	46bd      	mov	sp, r7
 8014204:	bd80      	pop	{r7, pc}
 8014206:	bf00      	nop
 8014208:	20001630 	.word	0x20001630
 801420c:	20001634 	.word	0x20001634

08014210 <can1_ams_status_1_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_status_1_rx_callback(ams_status_1_t* ams_status_1) {
 8014210:	b480      	push	{r7}
 8014212:	b083      	sub	sp, #12
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]

}
 8014218:	bf00      	nop
 801421a:	370c      	adds	r7, #12
 801421c:	46bd      	mov	sp, r7
 801421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014222:	4770      	bx	lr

08014224 <can1_ams_temperatures_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_temperatures_rx_callback(ams_temperatures_t* ams_temperatures) {
 8014224:	b480      	push	{r7}
 8014226:	b083      	sub	sp, #12
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]

}
 801422c:	bf00      	nop
 801422e:	370c      	adds	r7, #12
 8014230:	46bd      	mov	sp, r7
 8014232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014236:	4770      	bx	lr

08014238 <can1_ams_cell_voltages_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_cell_voltages_rx_callback(ams_cell_voltages_t* ams_cell_voltages) {
 8014238:	b480      	push	{r7}
 801423a:	b083      	sub	sp, #12
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]

}
 8014240:	bf00      	nop
 8014242:	370c      	adds	r7, #12
 8014244:	46bd      	mov	sp, r7
 8014246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424a:	4770      	bx	lr

0801424c <can1_ams_cell_temperatures_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_cell_temperatures_rx_callback(ams_cell_temperatures_t* ams_cell_temperatures) {
 801424c:	b480      	push	{r7}
 801424e:	b083      	sub	sp, #12
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]

}
 8014254:	bf00      	nop
 8014256:	370c      	adds	r7, #12
 8014258:	46bd      	mov	sp, r7
 801425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425e:	4770      	bx	lr

08014260 <can2_amk1_setpoints_1_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can2_amk1_setpoints_1_rx_callback(amk1_setpoints_1_t* amk1_setpoints_1) {
 8014260:	b480      	push	{r7}
 8014262:	b083      	sub	sp, #12
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]

}
 8014268:	bf00      	nop
 801426a:	370c      	adds	r7, #12
 801426c:	46bd      	mov	sp, r7
 801426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014272:	4770      	bx	lr

08014274 <inc_res>:
 * @Brief	Increments if true, resets (to zero) otherwise
 * @Param	A conditional statement which evaluates to true or false
 * @Param	A pointer to an integer which may be incremented or reset
 * @Retval	Void
 */
static void inc_res(uint8_t cnd, uint8_t *ptr) {
 8014274:	b480      	push	{r7}
 8014276:	b083      	sub	sp, #12
 8014278:	af00      	add	r7, sp, #0
 801427a:	4603      	mov	r3, r0
 801427c:	6039      	str	r1, [r7, #0]
 801427e:	71fb      	strb	r3, [r7, #7]
	if (cnd) {
 8014280:	79fb      	ldrb	r3, [r7, #7]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d006      	beq.n	8014294 <inc_res+0x20>
		ptr[0]++;
 8014286:	683b      	ldr	r3, [r7, #0]
 8014288:	781b      	ldrb	r3, [r3, #0]
 801428a:	3301      	adds	r3, #1
 801428c:	b2da      	uxtb	r2, r3
 801428e:	683b      	ldr	r3, [r7, #0]
 8014290:	701a      	strb	r2, [r3, #0]
	} else {
		ptr[0] = 0;
	}
}
 8014292:	e002      	b.n	801429a <inc_res+0x26>
		ptr[0] = 0;
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	2200      	movs	r2, #0
 8014298:	701a      	strb	r2, [r3, #0]
}
 801429a:	bf00      	nop
 801429c:	370c      	adds	r7, #12
 801429e:	46bd      	mov	sp, r7
 80142a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a4:	4770      	bx	lr
	...

080142a8 <COM_voltages_ok>:
 * @Param	A vector of voltages to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_voltages_ok(double *voltages,
		uint16_t sample_constraint) {
 80142a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142aa:	b087      	sub	sp, #28
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
 80142b0:	460b      	mov	r3, r1
 80142b2:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 4.19;
 80142b4:	4b2e      	ldr	r3, [pc, #184]	; (8014370 <COM_voltages_ok+0xc8>)
 80142b6:	613b      	str	r3, [r7, #16]
	const float lower_boundary = 2.81;
 80142b8:	4b2e      	ldr	r3, [pc, #184]	; (8014374 <COM_voltages_ok+0xcc>)
 80142ba:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 126; p++) {
 80142bc:	2300      	movs	r3, #0
 80142be:	617b      	str	r3, [r7, #20]
 80142c0:	e04d      	b.n	801435e <COM_voltages_ok+0xb6>
		inc_res(voltages[p] > upper_boundary, &over_voltages[p]);
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	00db      	lsls	r3, r3, #3
 80142c6:	687a      	ldr	r2, [r7, #4]
 80142c8:	4413      	add	r3, r2
 80142ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80142ce:	6938      	ldr	r0, [r7, #16]
 80142d0:	f7ec f92c 	bl	800052c <__aeabi_f2d>
 80142d4:	4602      	mov	r2, r0
 80142d6:	460b      	mov	r3, r1
 80142d8:	2101      	movs	r1, #1
 80142da:	460e      	mov	r6, r1
 80142dc:	4620      	mov	r0, r4
 80142de:	4629      	mov	r1, r5
 80142e0:	f7ec fc0c 	bl	8000afc <__aeabi_dcmpgt>
 80142e4:	4603      	mov	r3, r0
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d101      	bne.n	80142ee <COM_voltages_ok+0x46>
 80142ea:	2300      	movs	r3, #0
 80142ec:	461e      	mov	r6, r3
 80142ee:	b2f3      	uxtb	r3, r6
 80142f0:	4618      	mov	r0, r3
 80142f2:	697b      	ldr	r3, [r7, #20]
 80142f4:	4a20      	ldr	r2, [pc, #128]	; (8014378 <COM_voltages_ok+0xd0>)
 80142f6:	4413      	add	r3, r2
 80142f8:	4619      	mov	r1, r3
 80142fa:	f7ff ffbb 	bl	8014274 <inc_res>
		inc_res(lower_boundary > voltages[p], &under_voltages[p]);
 80142fe:	68f8      	ldr	r0, [r7, #12]
 8014300:	f7ec f914 	bl	800052c <__aeabi_f2d>
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	00db      	lsls	r3, r3, #3
 8014308:	687a      	ldr	r2, [r7, #4]
 801430a:	4413      	add	r3, r2
 801430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014310:	2401      	movs	r4, #1
 8014312:	f7ec fbf3 	bl	8000afc <__aeabi_dcmpgt>
 8014316:	4603      	mov	r3, r0
 8014318:	2b00      	cmp	r3, #0
 801431a:	d101      	bne.n	8014320 <COM_voltages_ok+0x78>
 801431c:	2300      	movs	r3, #0
 801431e:	461c      	mov	r4, r3
 8014320:	b2e3      	uxtb	r3, r4
 8014322:	4618      	mov	r0, r3
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	4a15      	ldr	r2, [pc, #84]	; (801437c <COM_voltages_ok+0xd4>)
 8014328:	4413      	add	r3, r2
 801432a:	4619      	mov	r1, r3
 801432c:	f7ff ffa2 	bl	8014274 <inc_res>

		if (over_voltages[p] > sample_constraint) {
 8014330:	4a11      	ldr	r2, [pc, #68]	; (8014378 <COM_voltages_ok+0xd0>)
 8014332:	697b      	ldr	r3, [r7, #20]
 8014334:	4413      	add	r3, r2
 8014336:	781b      	ldrb	r3, [r3, #0]
 8014338:	b29b      	uxth	r3, r3
 801433a:	887a      	ldrh	r2, [r7, #2]
 801433c:	429a      	cmp	r2, r3
 801433e:	d201      	bcs.n	8014344 <COM_voltages_ok+0x9c>
			return ERROR_OVER_VOLTAGE;
 8014340:	2316      	movs	r3, #22
 8014342:	e010      	b.n	8014366 <COM_voltages_ok+0xbe>
		}
		if (under_voltages[p] > sample_constraint) {
 8014344:	4a0d      	ldr	r2, [pc, #52]	; (801437c <COM_voltages_ok+0xd4>)
 8014346:	697b      	ldr	r3, [r7, #20]
 8014348:	4413      	add	r3, r2
 801434a:	781b      	ldrb	r3, [r3, #0]
 801434c:	b29b      	uxth	r3, r3
 801434e:	887a      	ldrh	r2, [r7, #2]
 8014350:	429a      	cmp	r2, r3
 8014352:	d201      	bcs.n	8014358 <COM_voltages_ok+0xb0>
			return ERROR_UNDER_VOLTAGE;
 8014354:	2315      	movs	r3, #21
 8014356:	e006      	b.n	8014366 <COM_voltages_ok+0xbe>
	for (int p = 0; p < 126; p++) {
 8014358:	697b      	ldr	r3, [r7, #20]
 801435a:	3301      	adds	r3, #1
 801435c:	617b      	str	r3, [r7, #20]
 801435e:	697b      	ldr	r3, [r7, #20]
 8014360:	2b7d      	cmp	r3, #125	; 0x7d
 8014362:	ddae      	ble.n	80142c2 <COM_voltages_ok+0x1a>
		}
	}

	return 0;
 8014364:	2300      	movs	r3, #0

}
 8014366:	4618      	mov	r0, r3
 8014368:	371c      	adds	r7, #28
 801436a:	46bd      	mov	sp, r7
 801436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801436e:	bf00      	nop
 8014370:	4086147b 	.word	0x4086147b
 8014374:	4033d70a 	.word	0x4033d70a
 8014378:	20001648 	.word	0x20001648
 801437c:	200016c8 	.word	0x200016c8

08014380 <COM_temperatures_ok>:
 * @Param	A vector of temperatures to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_temperatures_ok(double *temperatures,
		uint16_t sample_constraint) {
 8014380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014382:	b087      	sub	sp, #28
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
 8014388:	460b      	mov	r3, r1
 801438a:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 60;
 801438c:	4b2e      	ldr	r3, [pc, #184]	; (8014448 <COM_temperatures_ok+0xc8>)
 801438e:	613b      	str	r3, [r7, #16]
	const float lower_boundary = -20;
 8014390:	4b2e      	ldr	r3, [pc, #184]	; (801444c <COM_temperatures_ok+0xcc>)
 8014392:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 60; p++) {
 8014394:	2300      	movs	r3, #0
 8014396:	617b      	str	r3, [r7, #20]
 8014398:	e04d      	b.n	8014436 <COM_temperatures_ok+0xb6>
		inc_res(temperatures[p] > upper_boundary,
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	00db      	lsls	r3, r3, #3
 801439e:	687a      	ldr	r2, [r7, #4]
 80143a0:	4413      	add	r3, r2
 80143a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80143a6:	6938      	ldr	r0, [r7, #16]
 80143a8:	f7ec f8c0 	bl	800052c <__aeabi_f2d>
 80143ac:	4602      	mov	r2, r0
 80143ae:	460b      	mov	r3, r1
 80143b0:	2101      	movs	r1, #1
 80143b2:	460e      	mov	r6, r1
 80143b4:	4620      	mov	r0, r4
 80143b6:	4629      	mov	r1, r5
 80143b8:	f7ec fba0 	bl	8000afc <__aeabi_dcmpgt>
 80143bc:	4603      	mov	r3, r0
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d101      	bne.n	80143c6 <COM_temperatures_ok+0x46>
 80143c2:	2300      	movs	r3, #0
 80143c4:	461e      	mov	r6, r3
 80143c6:	b2f3      	uxtb	r3, r6
 80143c8:	4618      	mov	r0, r3
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	4a20      	ldr	r2, [pc, #128]	; (8014450 <COM_temperatures_ok+0xd0>)
 80143ce:	4413      	add	r3, r2
 80143d0:	4619      	mov	r1, r3
 80143d2:	f7ff ff4f 	bl	8014274 <inc_res>
				&over_temperatures[p]);
		inc_res(lower_boundary > temperatures[p],
 80143d6:	68f8      	ldr	r0, [r7, #12]
 80143d8:	f7ec f8a8 	bl	800052c <__aeabi_f2d>
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	00db      	lsls	r3, r3, #3
 80143e0:	687a      	ldr	r2, [r7, #4]
 80143e2:	4413      	add	r3, r2
 80143e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143e8:	2401      	movs	r4, #1
 80143ea:	f7ec fb87 	bl	8000afc <__aeabi_dcmpgt>
 80143ee:	4603      	mov	r3, r0
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d101      	bne.n	80143f8 <COM_temperatures_ok+0x78>
 80143f4:	2300      	movs	r3, #0
 80143f6:	461c      	mov	r4, r3
 80143f8:	b2e3      	uxtb	r3, r4
 80143fa:	4618      	mov	r0, r3
 80143fc:	697b      	ldr	r3, [r7, #20]
 80143fe:	4a15      	ldr	r2, [pc, #84]	; (8014454 <COM_temperatures_ok+0xd4>)
 8014400:	4413      	add	r3, r2
 8014402:	4619      	mov	r1, r3
 8014404:	f7ff ff36 	bl	8014274 <inc_res>
				&under_temperatures[p]);

		if (over_temperatures[p] > sample_constraint) {
 8014408:	4a11      	ldr	r2, [pc, #68]	; (8014450 <COM_temperatures_ok+0xd0>)
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	4413      	add	r3, r2
 801440e:	781b      	ldrb	r3, [r3, #0]
 8014410:	b29b      	uxth	r3, r3
 8014412:	887a      	ldrh	r2, [r7, #2]
 8014414:	429a      	cmp	r2, r3
 8014416:	d201      	bcs.n	801441c <COM_temperatures_ok+0x9c>
			return ERROR_OVER_TEMPERATURE;
 8014418:	2318      	movs	r3, #24
 801441a:	e010      	b.n	801443e <COM_temperatures_ok+0xbe>
		}
		if (under_temperatures[p] > sample_constraint) {
 801441c:	4a0d      	ldr	r2, [pc, #52]	; (8014454 <COM_temperatures_ok+0xd4>)
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	4413      	add	r3, r2
 8014422:	781b      	ldrb	r3, [r3, #0]
 8014424:	b29b      	uxth	r3, r3
 8014426:	887a      	ldrh	r2, [r7, #2]
 8014428:	429a      	cmp	r2, r3
 801442a:	d201      	bcs.n	8014430 <COM_temperatures_ok+0xb0>
			return ERROR_UNDER_TEMPERATURE;
 801442c:	2317      	movs	r3, #23
 801442e:	e006      	b.n	801443e <COM_temperatures_ok+0xbe>
	for (int p = 0; p < 60; p++) {
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	3301      	adds	r3, #1
 8014434:	617b      	str	r3, [r7, #20]
 8014436:	697b      	ldr	r3, [r7, #20]
 8014438:	2b3b      	cmp	r3, #59	; 0x3b
 801443a:	ddae      	ble.n	801439a <COM_temperatures_ok+0x1a>
		}
	}

	return 0;
 801443c:	2300      	movs	r3, #0

}
 801443e:	4618      	mov	r0, r3
 8014440:	371c      	adds	r7, #28
 8014442:	46bd      	mov	sp, r7
 8014444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014446:	bf00      	nop
 8014448:	42700000 	.word	0x42700000
 801444c:	c1a00000 	.word	0xc1a00000
 8014450:	20001748 	.word	0x20001748
 8014454:	20001784 	.word	0x20001784

08014458 <COM_current_ok>:
 * @Param	A single current to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_current_ok(double *current,
		uint16_t sample_constraint) {
 8014458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801445a:	b085      	sub	sp, #20
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
 8014460:	460b      	mov	r3, r1
 8014462:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 100;
 8014464:	4b21      	ldr	r3, [pc, #132]	; (80144ec <COM_current_ok+0x94>)
 8014466:	60fb      	str	r3, [r7, #12]
	const float lower_boundary = -40;
 8014468:	4b21      	ldr	r3, [pc, #132]	; (80144f0 <COM_current_ok+0x98>)
 801446a:	60bb      	str	r3, [r7, #8]

	inc_res(current[0] > upper_boundary, &over_current);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014472:	68f8      	ldr	r0, [r7, #12]
 8014474:	f7ec f85a 	bl	800052c <__aeabi_f2d>
 8014478:	4602      	mov	r2, r0
 801447a:	460b      	mov	r3, r1
 801447c:	2101      	movs	r1, #1
 801447e:	460e      	mov	r6, r1
 8014480:	4620      	mov	r0, r4
 8014482:	4629      	mov	r1, r5
 8014484:	f7ec fb3a 	bl	8000afc <__aeabi_dcmpgt>
 8014488:	4603      	mov	r3, r0
 801448a:	2b00      	cmp	r3, #0
 801448c:	d101      	bne.n	8014492 <COM_current_ok+0x3a>
 801448e:	2300      	movs	r3, #0
 8014490:	461e      	mov	r6, r3
 8014492:	b2f3      	uxtb	r3, r6
 8014494:	4917      	ldr	r1, [pc, #92]	; (80144f4 <COM_current_ok+0x9c>)
 8014496:	4618      	mov	r0, r3
 8014498:	f7ff feec 	bl	8014274 <inc_res>
	inc_res(lower_boundary > current[0], &under_current);
 801449c:	68b8      	ldr	r0, [r7, #8]
 801449e:	f7ec f845 	bl	800052c <__aeabi_f2d>
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144a8:	2401      	movs	r4, #1
 80144aa:	f7ec fb27 	bl	8000afc <__aeabi_dcmpgt>
 80144ae:	4603      	mov	r3, r0
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d101      	bne.n	80144b8 <COM_current_ok+0x60>
 80144b4:	2300      	movs	r3, #0
 80144b6:	461c      	mov	r4, r3
 80144b8:	b2e3      	uxtb	r3, r4
 80144ba:	490f      	ldr	r1, [pc, #60]	; (80144f8 <COM_current_ok+0xa0>)
 80144bc:	4618      	mov	r0, r3
 80144be:	f7ff fed9 	bl	8014274 <inc_res>

	if (over_current > sample_constraint) {
 80144c2:	4b0c      	ldr	r3, [pc, #48]	; (80144f4 <COM_current_ok+0x9c>)
 80144c4:	781b      	ldrb	r3, [r3, #0]
 80144c6:	b29b      	uxth	r3, r3
 80144c8:	887a      	ldrh	r2, [r7, #2]
 80144ca:	429a      	cmp	r2, r3
 80144cc:	d201      	bcs.n	80144d2 <COM_current_ok+0x7a>
		return ERROR_OVER_CURRENT;
 80144ce:	2320      	movs	r3, #32
 80144d0:	e008      	b.n	80144e4 <COM_current_ok+0x8c>
	}
	if (under_current > sample_constraint) {
 80144d2:	4b09      	ldr	r3, [pc, #36]	; (80144f8 <COM_current_ok+0xa0>)
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	b29b      	uxth	r3, r3
 80144d8:	887a      	ldrh	r2, [r7, #2]
 80144da:	429a      	cmp	r2, r3
 80144dc:	d201      	bcs.n	80144e2 <COM_current_ok+0x8a>
		return ERROR_UNDER_CURRENT;
 80144de:	231f      	movs	r3, #31
 80144e0:	e000      	b.n	80144e4 <COM_current_ok+0x8c>
	}

	return 0;
 80144e2:	2300      	movs	r3, #0

}
 80144e4:	4618      	mov	r0, r3
 80144e6:	3714      	adds	r7, #20
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144ec:	42c80000 	.word	0x42c80000
 80144f0:	c2200000 	.word	0xc2200000
 80144f4:	200017c0 	.word	0x200017c0
 80144f8:	200017c1 	.word	0x200017c1

080144fc <FAN_initialize>:
#include "main.h"
#include "programme_data.h"

#include "FAN.h"

void FAN_initialize(TIM_HandleTypeDef *htim) {
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b084      	sub	sp, #16
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
	const float frequency = 1000;
 8014504:	4b10      	ldr	r3, [pc, #64]	; (8014548 <FAN_initialize+0x4c>)
 8014506:	60fb      	str	r3, [r7, #12]

	htim->Instance->ARR = 65535 / frequency;
 8014508:	eddf 6a10 	vldr	s13, [pc, #64]	; 801454c <FAN_initialize+0x50>
 801450c:	ed97 7a03 	vldr	s14, [r7, #12]
 8014510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801451c:	ee17 2a90 	vmov	r2, s15
 8014520:	62da      	str	r2, [r3, #44]	; 0x2c
	htim->Instance->CCR3 = htim->Instance->ARR / 2;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	0852      	lsrs	r2, r2, #1
 801452e:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	2200      	movs	r2, #0
 8014536:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8014538:	2108      	movs	r1, #8
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f013 ff48 	bl	80283d0 <HAL_TIM_PWM_Start>

}
 8014540:	bf00      	nop
 8014542:	3710      	adds	r7, #16
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}
 8014548:	447a0000 	.word	0x447a0000
 801454c:	477fff00 	.word	0x477fff00

08014550 <FAN_duty_cycle>:

void FAN_duty_cycle(TIM_HandleTypeDef *htim, float duty_cycle) {
 8014550:	b480      	push	{r7}
 8014552:	b083      	sub	sp, #12
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
 8014558:	ed87 0a00 	vstr	s0, [r7]
	if (duty_cycle < 0) {
 801455c:	edd7 7a00 	vldr	s15, [r7]
 8014560:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014568:	d502      	bpl.n	8014570 <FAN_duty_cycle+0x20>
		duty_cycle = 0;
 801456a:	f04f 0300 	mov.w	r3, #0
 801456e:	603b      	str	r3, [r7, #0]
	}
	if (100 < duty_cycle) {
 8014570:	edd7 7a00 	vldr	s15, [r7]
 8014574:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80145c8 <FAN_duty_cycle+0x78>
 8014578:	eef4 7ac7 	vcmpe.f32	s15, s14
 801457c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014580:	dd01      	ble.n	8014586 <FAN_duty_cycle+0x36>
		duty_cycle = 100;
 8014582:	4b12      	ldr	r3, [pc, #72]	; (80145cc <FAN_duty_cycle+0x7c>)
 8014584:	603b      	str	r3, [r7, #0]
	}

	htim->Instance->CCR3 = (duty_cycle / 100) * htim->Instance->ARR;
 8014586:	edd7 7a00 	vldr	s15, [r7]
 801458a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80145c8 <FAN_duty_cycle+0x78>
 801458e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014598:	ee07 3a90 	vmov	s15, r3
 801459c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80145a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80145ac:	ee17 2a90 	vmov	r2, s15
 80145b0:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	2200      	movs	r2, #0
 80145b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80145ba:	bf00      	nop
 80145bc:	370c      	adds	r7, #12
 80145be:	46bd      	mov	sp, r7
 80145c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c4:	4770      	bx	lr
 80145c6:	bf00      	nop
 80145c8:	42c80000 	.word	0x42c80000
 80145cc:	42c80000 	.word	0x42c80000

080145d0 <HAL_TIM_IC_CaptureCallback>:
#include "IMD.h"
#include "programme_data.h"
#include "programme_queues.h"


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b084      	sub	sp, #16
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
	float ante = 0;
 80145d8:	f04f 0300 	mov.w	r3, #0
 80145dc:	60fb      	str	r3, [r7, #12]
	float conq = 0;
 80145de:	f04f 0300 	mov.w	r3, #0
 80145e2:	60bb      	str	r3, [r7, #8]

	if (htim->Instance == TIM2) {
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80145ec:	d135      	bne.n	801465a <HAL_TIM_IC_CaptureCallback+0x8a>
		ante = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80145ee:	2104      	movs	r1, #4
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f014 fd83 	bl	80290fc <HAL_TIM_ReadCapturedValue>
 80145f6:	ee07 0a90 	vmov	s15, r0
 80145fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80145fe:	edc7 7a03 	vstr	s15, [r7, #12]
		conq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8014602:	2100      	movs	r1, #0
 8014604:	6878      	ldr	r0, [r7, #4]
 8014606:	f014 fd79 	bl	80290fc <HAL_TIM_ReadCapturedValue>
 801460a:	ee07 0a90 	vmov	s15, r0
 801460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014612:	edc7 7a02 	vstr	s15, [r7, #8]

		IMD.duty_cycle = ante / conq;
 8014616:	ed97 7a03 	vldr	s14, [r7, #12]
 801461a:	edd7 7a02 	vldr	s15, [r7, #8]
 801461e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014622:	ee16 0a90 	vmov	r0, s13
 8014626:	f7eb ff81 	bl	800052c <__aeabi_f2d>
 801462a:	4602      	mov	r2, r0
 801462c:	460b      	mov	r3, r1
 801462e:	490d      	ldr	r1, [pc, #52]	; (8014664 <HAL_TIM_IC_CaptureCallback+0x94>)
 8014630:	e9c1 2300 	strd	r2, r3, [r1]
		IMD.frequency = 100000000 / (conq + 1);
 8014634:	edd7 7a02 	vldr	s15, [r7, #8]
 8014638:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801463c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014640:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8014668 <HAL_TIM_IC_CaptureCallback+0x98>
 8014644:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014648:	ee16 0a90 	vmov	r0, s13
 801464c:	f7eb ff6e 	bl	800052c <__aeabi_f2d>
 8014650:	4602      	mov	r2, r0
 8014652:	460b      	mov	r3, r1
 8014654:	4903      	ldr	r1, [pc, #12]	; (8014664 <HAL_TIM_IC_CaptureCallback+0x94>)
 8014656:	e9c1 2302 	strd	r2, r3, [r1, #8]

	}
}
 801465a:	bf00      	nop
 801465c:	3710      	adds	r7, #16
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}
 8014662:	bf00      	nop
 8014664:	2001b828 	.word	0x2001b828
 8014668:	4cbebc20 	.word	0x4cbebc20

0801466c <initialize_IMD>:

void initialize_IMD(TIM_HandleTypeDef *htim) {
 801466c:	b580      	push	{r7, lr}
 801466e:	b082      	sub	sp, #8
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 4200000;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	4a0b      	ldr	r2, [pc, #44]	; (80146a8 <initialize_IMD+0x3c>)
 801467a:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1) != HAL_OK) {
 801467c:	2100      	movs	r1, #0
 801467e:	6878      	ldr	r0, [r7, #4]
 8014680:	f014 f8a4 	bl	80287cc <HAL_TIM_IC_Start_IT>
 8014684:	4603      	mov	r3, r0
 8014686:	2b00      	cmp	r3, #0
 8014688:	d001      	beq.n	801468e <initialize_IMD+0x22>
		Error_Handler();
 801468a:	f002 ffe3 	bl	8017654 <Error_Handler>
	}

	if (HAL_TIM_IC_Start(htim, TIM_CHANNEL_2) != HAL_OK) {
 801468e:	2104      	movs	r1, #4
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f013 ffbf 	bl	8028614 <HAL_TIM_IC_Start>
 8014696:	4603      	mov	r3, r0
 8014698:	2b00      	cmp	r3, #0
 801469a:	d001      	beq.n	80146a0 <initialize_IMD+0x34>
		Error_Handler();
 801469c:	f002 ffda 	bl	8017654 <Error_Handler>
	}
}
 80146a0:	bf00      	nop
 80146a2:	3708      	adds	r7, #8
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}
 80146a8:	00401640 	.word	0x00401640

080146ac <pec15_calc>:
 * @param	The data used to calculate the PEC
 * @retval	The 16-bit PEC code
 */
uint16_t pec15_calc(uint8_t len, // Number of bytes that will be used to calculate a PEC
		uint8_t *data  // Array of data that will be used to calculate  a PEC
		) {
 80146ac:	b480      	push	{r7}
 80146ae:	b085      	sub	sp, #20
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	4603      	mov	r3, r0
 80146b4:	6039      	str	r1, [r7, #0]
 80146b6:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;                    // initialize the PEC
 80146b8:	2310      	movs	r3, #16
 80146ba:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 80146bc:	2300      	movs	r3, #0
 80146be:	737b      	strb	r3, [r7, #13]
 80146c0:	e018      	b.n	80146f4 <pec15_calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 80146c2:	89fb      	ldrh	r3, [r7, #14]
 80146c4:	09db      	lsrs	r3, r3, #7
 80146c6:	b29a      	uxth	r2, r3
 80146c8:	7b7b      	ldrb	r3, [r7, #13]
 80146ca:	6839      	ldr	r1, [r7, #0]
 80146cc:	440b      	add	r3, r1
 80146ce:	781b      	ldrb	r3, [r3, #0]
 80146d0:	b29b      	uxth	r3, r3
 80146d2:	4053      	eors	r3, r2
 80146d4:	b29b      	uxth	r3, r3
 80146d6:	b2db      	uxtb	r3, r3
 80146d8:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 80146da:	89fb      	ldrh	r3, [r7, #14]
 80146dc:	021b      	lsls	r3, r3, #8
 80146de:	b29a      	uxth	r2, r3
 80146e0:	897b      	ldrh	r3, [r7, #10]
 80146e2:	490b      	ldr	r1, [pc, #44]	; (8014710 <pec15_calc+0x64>)
 80146e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	4053      	eors	r3, r2
 80146ec:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 80146ee:	7b7b      	ldrb	r3, [r7, #13]
 80146f0:	3301      	adds	r3, #1
 80146f2:	737b      	strb	r3, [r7, #13]
 80146f4:	7b7a      	ldrb	r2, [r7, #13]
 80146f6:	79fb      	ldrb	r3, [r7, #7]
 80146f8:	429a      	cmp	r2, r3
 80146fa:	d3e2      	bcc.n	80146c2 <pec15_calc+0x16>
	}
	return (remainder * 2);  // The CRC15 has a 0 in the LSB so the remainder
 80146fc:	89fb      	ldrh	r3, [r7, #14]
 80146fe:	005b      	lsls	r3, r3, #1
 8014700:	b29b      	uxth	r3, r3
							 // must be multiplied by 2
}
 8014702:	4618      	mov	r0, r3
 8014704:	3714      	adds	r7, #20
 8014706:	46bd      	mov	sp, r7
 8014708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470c:	4770      	bx	lr
 801470e:	bf00      	nop
 8014710:	080304b0 	.word	0x080304b0

08014714 <initialize_LTC>:
/*
 * @brief	Set the hspi which LTC uses
 * @param	The hspi to be used
 * @retval	None
 */
void initialize_LTC(SPI_HandleTypeDef *hspi) {
 8014714:	b480      	push	{r7}
 8014716:	b083      	sub	sp, #12
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
	hltc = hspi;
 801471c:	4a04      	ldr	r2, [pc, #16]	; (8014730 <initialize_LTC+0x1c>)
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	6013      	str	r3, [r2, #0]
}
 8014722:	bf00      	nop
 8014724:	370c      	adds	r7, #12
 8014726:	46bd      	mov	sp, r7
 8014728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472c:	4770      	bx	lr
 801472e:	bf00      	nop
 8014730:	2001b874 	.word	0x2001b874

08014734 <LTC_CS_select>:

/*
 * @brief	Selects CS
 * @retval	None
 */
void LTC_CS_select(void) {
 8014734:	b580      	push	{r7, lr}
 8014736:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 0);
 8014738:	2200      	movs	r2, #0
 801473a:	2110      	movs	r1, #16
 801473c:	4802      	ldr	r0, [pc, #8]	; (8014748 <LTC_CS_select+0x14>)
 801473e:	f012 fa75 	bl	8026c2c <HAL_GPIO_WritePin>
}
 8014742:	bf00      	nop
 8014744:	bd80      	pop	{r7, pc}
 8014746:	bf00      	nop
 8014748:	40020800 	.word	0x40020800

0801474c <LTC_CS_deselect>:

/*
 * @brief	Deselects CS
 * @retval	None
 */
void LTC_CS_deselect(void) {
 801474c:	b580      	push	{r7, lr}
 801474e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 1);
 8014750:	2201      	movs	r2, #1
 8014752:	2110      	movs	r1, #16
 8014754:	4802      	ldr	r0, [pc, #8]	; (8014760 <LTC_CS_deselect+0x14>)
 8014756:	f012 fa69 	bl	8026c2c <HAL_GPIO_WritePin>
}
 801475a:	bf00      	nop
 801475c:	bd80      	pop	{r7, pc}
 801475e:	bf00      	nop
 8014760:	40020800 	.word	0x40020800

08014764 <LTC_wake>:

/*
 * @brief	A helper function which interfaces with SPI. wakes the isoSPI port from sleep
 * @retval	LTC Status
 */
uint8_t LTC_wake() {
 8014764:	b580      	push	{r7, lr}
 8014766:	b082      	sub	sp, #8
 8014768:	af00      	add	r7, sp, #0
	uint16_t pec;

	// This is the ADSTAT command. Chosen for no specific reason
	uint16_t command = 0b0000010101101000;
 801476a:	f44f 63ad 	mov.w	r3, #1384	; 0x568
 801476e:	80fb      	strh	r3, [r7, #6]

	// This is how one would pack the command, calculate the PEC, and the pack the contents.
	LTC_command_buffer[0] = command >> 8;
 8014770:	88fb      	ldrh	r3, [r7, #6]
 8014772:	0a1b      	lsrs	r3, r3, #8
 8014774:	b29b      	uxth	r3, r3
 8014776:	b2da      	uxtb	r2, r3
 8014778:	4b12      	ldr	r3, [pc, #72]	; (80147c4 <LTC_wake+0x60>)
 801477a:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 801477c:	88fb      	ldrh	r3, [r7, #6]
 801477e:	b2da      	uxtb	r2, r3
 8014780:	4b10      	ldr	r3, [pc, #64]	; (80147c4 <LTC_wake+0x60>)
 8014782:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8014784:	490f      	ldr	r1, [pc, #60]	; (80147c4 <LTC_wake+0x60>)
 8014786:	2002      	movs	r0, #2
 8014788:	f7ff ff90 	bl	80146ac <pec15_calc>
 801478c:	4603      	mov	r3, r0
 801478e:	80bb      	strh	r3, [r7, #4]
	LTC_command_buffer[2] = pec >> 8;
 8014790:	88bb      	ldrh	r3, [r7, #4]
 8014792:	0a1b      	lsrs	r3, r3, #8
 8014794:	b29b      	uxth	r3, r3
 8014796:	b2da      	uxtb	r2, r3
 8014798:	4b0a      	ldr	r3, [pc, #40]	; (80147c4 <LTC_wake+0x60>)
 801479a:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 801479c:	88bb      	ldrh	r3, [r7, #4]
 801479e:	b2da      	uxtb	r2, r3
 80147a0:	4b08      	ldr	r3, [pc, #32]	; (80147c4 <LTC_wake+0x60>)
 80147a2:	70da      	strb	r2, [r3, #3]

	// Simply lock the CS before transmitting and/or receiving
	LTC_CS_select();
 80147a4:	f7ff ffc6 	bl	8014734 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 80147a8:	4b07      	ldr	r3, [pc, #28]	; (80147c8 <LTC_wake+0x64>)
 80147aa:	6818      	ldr	r0, [r3, #0]
 80147ac:	2300      	movs	r3, #0
 80147ae:	2204      	movs	r2, #4
 80147b0:	4904      	ldr	r1, [pc, #16]	; (80147c4 <LTC_wake+0x60>)
 80147b2:	f012 ff6c 	bl	802768e <HAL_SPI_Transmit>
	LTC_CS_deselect();
 80147b6:	f7ff ffc9 	bl	801474c <LTC_CS_deselect>

	return 1;
 80147ba:	2301      	movs	r3, #1
}
 80147bc:	4618      	mov	r0, r3
 80147be:	3708      	adds	r7, #8
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	2001b884 	.word	0x2001b884
 80147c8:	2001b874 	.word	0x2001b874

080147cc <LTC_command>:
 * @brief	A helper function which interfaces with SPI.
 * @param	Wether or not to wake the isoSPI port first
 * @param	Which command to be sent
 * @retval	LTC Status
 */
uint8_t LTC_command(uint8_t wake, uint16_t command) {
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b084      	sub	sp, #16
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	4603      	mov	r3, r0
 80147d4:	460a      	mov	r2, r1
 80147d6:	71fb      	strb	r3, [r7, #7]
 80147d8:	4613      	mov	r3, r2
 80147da:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 80147dc:	79fb      	ldrb	r3, [r7, #7]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d006      	beq.n	80147f0 <LTC_command+0x24>
		if (!LTC_wake()) {
 80147e2:	f7ff ffbf 	bl	8014764 <LTC_wake>
 80147e6:	4603      	mov	r3, r0
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d101      	bne.n	80147f0 <LTC_command+0x24>
			return 0;
 80147ec:	2300      	movs	r3, #0
 80147ee:	e025      	b.n	801483c <LTC_command+0x70>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 80147f0:	88bb      	ldrh	r3, [r7, #4]
 80147f2:	0a1b      	lsrs	r3, r3, #8
 80147f4:	b29b      	uxth	r3, r3
 80147f6:	b2da      	uxtb	r2, r3
 80147f8:	4b12      	ldr	r3, [pc, #72]	; (8014844 <LTC_command+0x78>)
 80147fa:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 80147fc:	88bb      	ldrh	r3, [r7, #4]
 80147fe:	b2da      	uxtb	r2, r3
 8014800:	4b10      	ldr	r3, [pc, #64]	; (8014844 <LTC_command+0x78>)
 8014802:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8014804:	490f      	ldr	r1, [pc, #60]	; (8014844 <LTC_command+0x78>)
 8014806:	2002      	movs	r0, #2
 8014808:	f7ff ff50 	bl	80146ac <pec15_calc>
 801480c:	4603      	mov	r3, r0
 801480e:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 8014810:	89fb      	ldrh	r3, [r7, #14]
 8014812:	0a1b      	lsrs	r3, r3, #8
 8014814:	b29b      	uxth	r3, r3
 8014816:	b2da      	uxtb	r2, r3
 8014818:	4b0a      	ldr	r3, [pc, #40]	; (8014844 <LTC_command+0x78>)
 801481a:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 801481c:	89fb      	ldrh	r3, [r7, #14]
 801481e:	b2da      	uxtb	r2, r3
 8014820:	4b08      	ldr	r3, [pc, #32]	; (8014844 <LTC_command+0x78>)
 8014822:	70da      	strb	r2, [r3, #3]

	LTC_CS_select();
 8014824:	f7ff ff86 	bl	8014734 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8014828:	4b07      	ldr	r3, [pc, #28]	; (8014848 <LTC_command+0x7c>)
 801482a:	6818      	ldr	r0, [r3, #0]
 801482c:	2300      	movs	r3, #0
 801482e:	2204      	movs	r2, #4
 8014830:	4904      	ldr	r1, [pc, #16]	; (8014844 <LTC_command+0x78>)
 8014832:	f012 ff2c 	bl	802768e <HAL_SPI_Transmit>
	LTC_CS_deselect();
 8014836:	f7ff ff89 	bl	801474c <LTC_CS_deselect>

	return 1;
 801483a:	2301      	movs	r3, #1
}
 801483c:	4618      	mov	r0, r3
 801483e:	3710      	adds	r7, #16
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}
 8014844:	2001b884 	.word	0x2001b884
 8014848:	2001b874 	.word	0x2001b874

0801484c <LTC_read_command>:
 * @brief	A helper function which interfaces with SPI. Puts received data in LTC_read_buffer
 * @param	Whether or not to wake the isoSPI port first
 * @param	Which command the received data corresponds to
 * @retval	LTC Status
 */
uint8_t LTC_read_command(uint8_t wake, uint16_t command) {
 801484c:	b580      	push	{r7, lr}
 801484e:	b084      	sub	sp, #16
 8014850:	af00      	add	r7, sp, #0
 8014852:	4603      	mov	r3, r0
 8014854:	460a      	mov	r2, r1
 8014856:	71fb      	strb	r3, [r7, #7]
 8014858:	4613      	mov	r3, r2
 801485a:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 801485c:	79fb      	ldrb	r3, [r7, #7]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d006      	beq.n	8014870 <LTC_read_command+0x24>
		if (!LTC_wake()) {
 8014862:	f7ff ff7f 	bl	8014764 <LTC_wake>
 8014866:	4603      	mov	r3, r0
 8014868:	2b00      	cmp	r3, #0
 801486a:	d101      	bne.n	8014870 <LTC_read_command+0x24>
			return 0;
 801486c:	2300      	movs	r3, #0
 801486e:	e042      	b.n	80148f6 <LTC_read_command+0xaa>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 8014870:	88bb      	ldrh	r3, [r7, #4]
 8014872:	0a1b      	lsrs	r3, r3, #8
 8014874:	b29b      	uxth	r3, r3
 8014876:	b2da      	uxtb	r2, r3
 8014878:	4b21      	ldr	r3, [pc, #132]	; (8014900 <LTC_read_command+0xb4>)
 801487a:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 801487c:	88bb      	ldrh	r3, [r7, #4]
 801487e:	b2da      	uxtb	r2, r3
 8014880:	4b1f      	ldr	r3, [pc, #124]	; (8014900 <LTC_read_command+0xb4>)
 8014882:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8014884:	491e      	ldr	r1, [pc, #120]	; (8014900 <LTC_read_command+0xb4>)
 8014886:	2002      	movs	r0, #2
 8014888:	f7ff ff10 	bl	80146ac <pec15_calc>
 801488c:	4603      	mov	r3, r0
 801488e:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 8014890:	89fb      	ldrh	r3, [r7, #14]
 8014892:	0a1b      	lsrs	r3, r3, #8
 8014894:	b29b      	uxth	r3, r3
 8014896:	b2da      	uxtb	r2, r3
 8014898:	4b19      	ldr	r3, [pc, #100]	; (8014900 <LTC_read_command+0xb4>)
 801489a:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 801489c:	89fb      	ldrh	r3, [r7, #14]
 801489e:	b2da      	uxtb	r2, r3
 80148a0:	4b17      	ldr	r3, [pc, #92]	; (8014900 <LTC_read_command+0xb4>)
 80148a2:	70da      	strb	r2, [r3, #3]

	// We receive at the same instance
	LTC_CS_select();
 80148a4:	f7ff ff46 	bl	8014734 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 80148a8:	4b16      	ldr	r3, [pc, #88]	; (8014904 <LTC_read_command+0xb8>)
 80148aa:	6818      	ldr	r0, [r3, #0]
 80148ac:	2300      	movs	r3, #0
 80148ae:	2204      	movs	r2, #4
 80148b0:	4913      	ldr	r1, [pc, #76]	; (8014900 <LTC_read_command+0xb4>)
 80148b2:	f012 feec 	bl	802768e <HAL_SPI_Transmit>
	HAL_SPI_Receive(hltc, LTC_read_buffer, 10, LTC_COM_TIMEOUT);
 80148b6:	4b13      	ldr	r3, [pc, #76]	; (8014904 <LTC_read_command+0xb8>)
 80148b8:	6818      	ldr	r0, [r3, #0]
 80148ba:	2300      	movs	r3, #0
 80148bc:	220a      	movs	r2, #10
 80148be:	4912      	ldr	r1, [pc, #72]	; (8014908 <LTC_read_command+0xbc>)
 80148c0:	f013 f821 	bl	8027906 <HAL_SPI_Receive>
	LTC_CS_deselect();
 80148c4:	f7ff ff42 	bl	801474c <LTC_CS_deselect>

	// We should make sure that the data is correct
	pec = pec15_calc(8, LTC_read_buffer);
 80148c8:	490f      	ldr	r1, [pc, #60]	; (8014908 <LTC_read_command+0xbc>)
 80148ca:	2008      	movs	r0, #8
 80148cc:	f7ff feee 	bl	80146ac <pec15_calc>
 80148d0:	4603      	mov	r3, r0
 80148d2:	81fb      	strh	r3, [r7, #14]

	// If there is a discrepancy we return an error code
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 80148d4:	89fb      	ldrh	r3, [r7, #14]
 80148d6:	0a1b      	lsrs	r3, r3, #8
 80148d8:	b29b      	uxth	r3, r3
 80148da:	b2db      	uxtb	r3, r3
 80148dc:	4a0a      	ldr	r2, [pc, #40]	; (8014908 <LTC_read_command+0xbc>)
 80148de:	7a12      	ldrb	r2, [r2, #8]
 80148e0:	4293      	cmp	r3, r2
 80148e2:	d005      	beq.n	80148f0 <LTC_read_command+0xa4>
			&& (((pec >> 0) & 0xff) != LTC_read_buffer[9]))) {
 80148e4:	89fb      	ldrh	r3, [r7, #14]
 80148e6:	b2db      	uxtb	r3, r3
 80148e8:	4a07      	ldr	r2, [pc, #28]	; (8014908 <LTC_read_command+0xbc>)
 80148ea:	7a52      	ldrb	r2, [r2, #9]
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 80148ec:	4293      	cmp	r3, r2
 80148ee:	d101      	bne.n	80148f4 <LTC_read_command+0xa8>
		return 0;
 80148f0:	2300      	movs	r3, #0
 80148f2:	e000      	b.n	80148f6 <LTC_read_command+0xaa>
	}

	return 1;
 80148f4:	2301      	movs	r3, #1
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	3710      	adds	r7, #16
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bd80      	pop	{r7, pc}
 80148fe:	bf00      	nop
 8014900:	2001b884 	.word	0x2001b884
 8014904:	2001b874 	.word	0x2001b874
 8014908:	2001b878 	.word	0x2001b878

0801490c <LTC_acquire_data>:
 * @brief	The function which acquires all of the cell temperatures and voltages, and places them in cell_voltages and cell_temperatures
 * @param	Whether or not to wake the isoSPI port beforehand
 * @param	LTC_data_valid[n] is high if the n:th slave has given valid data
 * @retval	LTC Status
 */
uint8_t LTC_acquire_data(uint8_t wake) {
 801490c:	b580      	push	{r7, lr}
 801490e:	b088      	sub	sp, #32
 8014910:	af00      	add	r7, sp, #0
 8014912:	4603      	mov	r3, r0
 8014914:	71fb      	strb	r3, [r7, #7]
	int p, k, i, j, command;

	/* ADCV, MD = 10, PUP = 1, DCP = 0, CH = 000 */
	command = 0b0000001101110000;
 8014916:	f44f 735c 	mov.w	r3, #880	; 0x370
 801491a:	60fb      	str	r3, [r7, #12]

	LTC_command(wake, command);
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	b29a      	uxth	r2, r3
 8014920:	79fb      	ldrb	r3, [r7, #7]
 8014922:	4611      	mov	r1, r2
 8014924:	4618      	mov	r0, r3
 8014926:	f7ff ff51 	bl	80147cc <LTC_command>

	HAL_Delay(2);
 801492a:	2002      	movs	r0, #2
 801492c:	f00f ff4a 	bl	80247c4 <HAL_Delay>

	/* ADAX : MD = 10, PUP = 1, CH = 000 */
	command = 0b0000010101100000;
 8014930:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8014934:	60fb      	str	r3, [r7, #12]

	LTC_command(0, command);
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	b29b      	uxth	r3, r3
 801493a:	4619      	mov	r1, r3
 801493c:	2000      	movs	r0, #0
 801493e:	f7ff ff45 	bl	80147cc <LTC_command>

	//osDelay(configTICK_RATE_HZ * 0.02); // ~2 ms
	HAL_Delay(2);
 8014942:	2002      	movs	r0, #2
 8014944:	f00f ff3e 	bl	80247c4 <HAL_Delay>

	// First we fill the cell_voltage buffer with the integer values
	p = 0;
 8014948:	2300      	movs	r3, #0
 801494a:	61fb      	str	r3, [r7, #28]

	for (k = 0; k < 12; k++) { // 12 segments
 801494c:	2300      	movs	r3, #0
 801494e:	61bb      	str	r3, [r7, #24]
 8014950:	e041      	b.n	80149d6 <LTC_acquire_data+0xca>
		for (i = 0; i < 6; i++) {
 8014952:	2300      	movs	r3, #0
 8014954:	617b      	str	r3, [r7, #20]
 8014956:	e038      	b.n	80149ca <LTC_acquire_data+0xbe>
			// We use the RDCVA command and increment it every pass to get RDCVB, RDCVC .. RDAUXB
			command = 0b1000000000000100 | (cellstack_address_map(k) << 11);
 8014958:	69bb      	ldr	r3, [r7, #24]
 801495a:	02db      	lsls	r3, r3, #11
 801495c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014960:	f043 0304 	orr.w	r3, r3, #4
 8014964:	60fb      	str	r3, [r7, #12]
			command += 2 * i;
 8014966:	697b      	ldr	r3, [r7, #20]
 8014968:	005b      	lsls	r3, r3, #1
 801496a:	68fa      	ldr	r2, [r7, #12]
 801496c:	4413      	add	r3, r2
 801496e:	60fb      	str	r3, [r7, #12]

			if(!LTC_read_command(0, command)) {
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	b29b      	uxth	r3, r3
 8014974:	4619      	mov	r1, r3
 8014976:	2000      	movs	r0, #0
 8014978:	f7ff ff68 	bl	801484c <LTC_read_command>
 801497c:	4603      	mov	r3, r0
 801497e:	2b00      	cmp	r3, #0
 8014980:	d101      	bne.n	8014986 <LTC_acquire_data+0x7a>
				/* Data wasn't to be read */
				return 0;
 8014982:	2300      	movs	r3, #0
 8014984:	e039      	b.n	80149fa <LTC_acquire_data+0xee>
			}

			for (j = 0; j < 3; j++) {
 8014986:	2300      	movs	r3, #0
 8014988:	613b      	str	r3, [r7, #16]
 801498a:	e018      	b.n	80149be <LTC_acquire_data+0xb2>
				LTC_data[p] = LTC_read_buffer[2 * j]
 801498c:	693b      	ldr	r3, [r7, #16]
 801498e:	005b      	lsls	r3, r3, #1
 8014990:	4a1c      	ldr	r2, [pc, #112]	; (8014a04 <LTC_acquire_data+0xf8>)
 8014992:	5cd3      	ldrb	r3, [r2, r3]
 8014994:	b21a      	sxth	r2, r3
						| (LTC_read_buffer[2 * j + 1] << 8);
 8014996:	693b      	ldr	r3, [r7, #16]
 8014998:	005b      	lsls	r3, r3, #1
 801499a:	3301      	adds	r3, #1
 801499c:	4919      	ldr	r1, [pc, #100]	; (8014a04 <LTC_acquire_data+0xf8>)
 801499e:	5ccb      	ldrb	r3, [r1, r3]
 80149a0:	021b      	lsls	r3, r3, #8
 80149a2:	b21b      	sxth	r3, r3
 80149a4:	4313      	orrs	r3, r2
 80149a6:	b21b      	sxth	r3, r3
 80149a8:	b299      	uxth	r1, r3
				LTC_data[p] = LTC_read_buffer[2 * j]
 80149aa:	4a17      	ldr	r2, [pc, #92]	; (8014a08 <LTC_acquire_data+0xfc>)
 80149ac:	69fb      	ldr	r3, [r7, #28]
 80149ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				p++;
 80149b2:	69fb      	ldr	r3, [r7, #28]
 80149b4:	3301      	adds	r3, #1
 80149b6:	61fb      	str	r3, [r7, #28]
			for (j = 0; j < 3; j++) {
 80149b8:	693b      	ldr	r3, [r7, #16]
 80149ba:	3301      	adds	r3, #1
 80149bc:	613b      	str	r3, [r7, #16]
 80149be:	693b      	ldr	r3, [r7, #16]
 80149c0:	2b02      	cmp	r3, #2
 80149c2:	dde3      	ble.n	801498c <LTC_acquire_data+0x80>
		for (i = 0; i < 6; i++) {
 80149c4:	697b      	ldr	r3, [r7, #20]
 80149c6:	3301      	adds	r3, #1
 80149c8:	617b      	str	r3, [r7, #20]
 80149ca:	697b      	ldr	r3, [r7, #20]
 80149cc:	2b05      	cmp	r3, #5
 80149ce:	ddc3      	ble.n	8014958 <LTC_acquire_data+0x4c>
	for (k = 0; k < 12; k++) { // 12 segments
 80149d0:	69bb      	ldr	r3, [r7, #24]
 80149d2:	3301      	adds	r3, #1
 80149d4:	61bb      	str	r3, [r7, #24]
 80149d6:	69bb      	ldr	r3, [r7, #24]
 80149d8:	2b0b      	cmp	r3, #11
 80149da:	ddba      	ble.n	8014952 <LTC_acquire_data+0x46>
			}
		}

	}

	if(!LTC_make_voltages()) {
 80149dc:	f000 f818 	bl	8014a10 <LTC_make_voltages>
 80149e0:	4603      	mov	r3, r0
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d101      	bne.n	80149ea <LTC_acquire_data+0xde>
		/* Data was corrupted, or voltage reference was off */
		return 0;
 80149e6:	2300      	movs	r3, #0
 80149e8:	e007      	b.n	80149fa <LTC_acquire_data+0xee>
	}
	if(!LTC_make_temperatures()) {
 80149ea:	f000 f879 	bl	8014ae0 <LTC_make_temperatures>
 80149ee:	4603      	mov	r3, r0
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d101      	bne.n	80149f8 <LTC_acquire_data+0xec>
		/* Data was corrupted, or voltage reference was off */
		return 0;
 80149f4:	2300      	movs	r3, #0
 80149f6:	e000      	b.n	80149fa <LTC_acquire_data+0xee>
	}

	/* Everything is fine ! */
	return 1;
 80149f8:	2301      	movs	r3, #1
}
 80149fa:	4618      	mov	r0, r3
 80149fc:	3720      	adds	r7, #32
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
 8014a02:	bf00      	nop
 8014a04:	2001b878 	.word	0x2001b878
 8014a08:	2001bc78 	.word	0x2001bc78
 8014a0c:	00000000 	.word	0x00000000

08014a10 <LTC_make_voltages>:
#define cellstack_voltage_count(cellstack) (11 - (cellstack % 2))
/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_voltages
 * @retval	1 if successful
 */
uint8_t LTC_make_voltages(void) {
 8014a10:	b590      	push	{r4, r7, lr}
 8014a12:	b083      	sub	sp, #12
 8014a14:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;
	p = 0;
 8014a16:	2300      	movs	r3, #0
 8014a18:	807b      	strh	r3, [r7, #2]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	80fb      	strh	r3, [r7, #6]
 8014a1e:	e04e      	b.n	8014abe <LTC_make_voltages+0xae>
		K = cellstack_voltage_count(cellstack);
 8014a20:	88fb      	ldrh	r3, [r7, #6]
 8014a22:	f003 0301 	and.w	r3, r3, #1
 8014a26:	b29b      	uxth	r3, r3
 8014a28:	f1c3 030b 	rsb	r3, r3, #11
 8014a2c:	803b      	strh	r3, [r7, #0]
		for (k = 0; k < K; k++) {
 8014a2e:	2300      	movs	r3, #0
 8014a30:	80bb      	strh	r3, [r7, #4]
 8014a32:	e03d      	b.n	8014ab0 <LTC_make_voltages+0xa0>
			if(LTC_data[18 * cellstack + k] == 0) {
 8014a34:	88fa      	ldrh	r2, [r7, #6]
 8014a36:	4613      	mov	r3, r2
 8014a38:	00db      	lsls	r3, r3, #3
 8014a3a:	4413      	add	r3, r2
 8014a3c:	005b      	lsls	r3, r3, #1
 8014a3e:	461a      	mov	r2, r3
 8014a40:	88bb      	ldrh	r3, [r7, #4]
 8014a42:	4413      	add	r3, r2
 8014a44:	4a24      	ldr	r2, [pc, #144]	; (8014ad8 <LTC_make_voltages+0xc8>)
 8014a46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d101      	bne.n	8014a52 <LTC_make_voltages+0x42>
				/* The voltage reference is not on */
				return 0;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	e039      	b.n	8014ac6 <LTC_make_voltages+0xb6>
			}
			if(LTC_data[18 * cellstack + k] == 0xffff) {
 8014a52:	88fa      	ldrh	r2, [r7, #6]
 8014a54:	4613      	mov	r3, r2
 8014a56:	00db      	lsls	r3, r3, #3
 8014a58:	4413      	add	r3, r2
 8014a5a:	005b      	lsls	r3, r3, #1
 8014a5c:	461a      	mov	r2, r3
 8014a5e:	88bb      	ldrh	r3, [r7, #4]
 8014a60:	4413      	add	r3, r2
 8014a62:	4a1d      	ldr	r2, [pc, #116]	; (8014ad8 <LTC_make_voltages+0xc8>)
 8014a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a6c:	4293      	cmp	r3, r2
 8014a6e:	d101      	bne.n	8014a74 <LTC_make_voltages+0x64>
				/* The data is corrupted */
				return 0;
 8014a70:	2300      	movs	r3, #0
 8014a72:	e028      	b.n	8014ac6 <LTC_make_voltages+0xb6>
			}

			LTC_voltages[p] = 0.0001 * LTC_data[18 * cellstack + k];
 8014a74:	88fa      	ldrh	r2, [r7, #6]
 8014a76:	4613      	mov	r3, r2
 8014a78:	00db      	lsls	r3, r3, #3
 8014a7a:	4413      	add	r3, r2
 8014a7c:	005b      	lsls	r3, r3, #1
 8014a7e:	461a      	mov	r2, r3
 8014a80:	88bb      	ldrh	r3, [r7, #4]
 8014a82:	4413      	add	r3, r2
 8014a84:	4a14      	ldr	r2, [pc, #80]	; (8014ad8 <LTC_make_voltages+0xc8>)
 8014a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7eb fd3c 	bl	8000508 <__aeabi_i2d>
 8014a90:	887c      	ldrh	r4, [r7, #2]
 8014a92:	a30f      	add	r3, pc, #60	; (adr r3, 8014ad0 <LTC_make_voltages+0xc0>)
 8014a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a98:	f7eb fda0 	bl	80005dc <__aeabi_dmul>
 8014a9c:	4602      	mov	r2, r0
 8014a9e:	460b      	mov	r3, r1
 8014aa0:	480e      	ldr	r0, [pc, #56]	; (8014adc <LTC_make_voltages+0xcc>)
 8014aa2:	00e1      	lsls	r1, r4, #3
 8014aa4:	4401      	add	r1, r0
 8014aa6:	e9c1 2300 	strd	r2, r3, [r1]
		for (k = 0; k < K; k++) {
 8014aaa:	88bb      	ldrh	r3, [r7, #4]
 8014aac:	3301      	adds	r3, #1
 8014aae:	80bb      	strh	r3, [r7, #4]
 8014ab0:	88ba      	ldrh	r2, [r7, #4]
 8014ab2:	883b      	ldrh	r3, [r7, #0]
 8014ab4:	429a      	cmp	r2, r3
 8014ab6:	d3bd      	bcc.n	8014a34 <LTC_make_voltages+0x24>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 8014ab8:	88fb      	ldrh	r3, [r7, #6]
 8014aba:	3301      	adds	r3, #1
 8014abc:	80fb      	strh	r3, [r7, #6]
 8014abe:	88fb      	ldrh	r3, [r7, #6]
 8014ac0:	2b0b      	cmp	r3, #11
 8014ac2:	d9ad      	bls.n	8014a20 <LTC_make_voltages+0x10>
		}
	}

	return 1;
 8014ac4:	2301      	movs	r3, #1
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	370c      	adds	r7, #12
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd90      	pop	{r4, r7, pc}
 8014ace:	bf00      	nop
 8014ad0:	eb1c432d 	.word	0xeb1c432d
 8014ad4:	3f1a36e2 	.word	0x3f1a36e2
 8014ad8:	2001bc78 	.word	0x2001bc78
 8014adc:	2001b888 	.word	0x2001b888

08014ae0 <LTC_make_temperatures>:

/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_temperatures
 * @retval	1 if successful
 */
uint8_t LTC_make_temperatures(void) {
 8014ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ae4:	b08d      	sub	sp, #52	; 0x34
 8014ae6:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;
	double beta = 3500;
 8014ae8:	a35f      	add	r3, pc, #380	; (adr r3, 8014c68 <LTC_make_temperatures+0x188>)
 8014aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aee:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temp = 25 + 273.15;
 8014af2:	a35f      	add	r3, pc, #380	; (adr r3, 8014c70 <LTC_make_temperatures+0x190>)
 8014af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double R0 = 10000 * exp(-beta / temp);
 8014afc:	6a38      	ldr	r0, [r7, #32]
 8014afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b00:	f083 4100 	eor.w	r1, r3, #2147483648	; 0x80000000
 8014b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014b08:	f7eb fe92 	bl	8000830 <__aeabi_ddiv>
 8014b0c:	4602      	mov	r2, r0
 8014b0e:	460b      	mov	r3, r1
 8014b10:	ec43 2b17 	vmov	d7, r2, r3
 8014b14:	eeb0 0a47 	vmov.f32	s0, s14
 8014b18:	eef0 0a67 	vmov.f32	s1, s15
 8014b1c:	f019 ff54 	bl	802e9c8 <exp>
 8014b20:	ec51 0b10 	vmov	r0, r1, d0
 8014b24:	a354      	add	r3, pc, #336	; (adr r3, 8014c78 <LTC_make_temperatures+0x198>)
 8014b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b2a:	f7eb fd57 	bl	80005dc <__aeabi_dmul>
 8014b2e:	4602      	mov	r2, r0
 8014b30:	460b      	mov	r3, r1
 8014b32:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double R = 10000;
 8014b36:	a350      	add	r3, pc, #320	; (adr r3, 8014c78 <LTC_make_temperatures+0x198>)
 8014b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b3c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	p = 0;
 8014b40:	2300      	movs	r3, #0
 8014b42:	80fb      	strh	r3, [r7, #6]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 8014b44:	2300      	movs	r3, #0
 8014b46:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8014b48:	e07b      	b.n	8014c42 <LTC_make_temperatures+0x162>
		K = 5;
 8014b4a:	2305      	movs	r3, #5
 8014b4c:	80bb      	strh	r3, [r7, #4]

		for (k = 0; k < K; k++) {
 8014b4e:	2300      	movs	r3, #0
 8014b50:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8014b52:	e06f      	b.n	8014c34 <LTC_make_temperatures+0x154>
			LTC_temperatures[p] = beta
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 8014b54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014b56:	4613      	mov	r3, r2
 8014b58:	00db      	lsls	r3, r3, #3
 8014b5a:	4413      	add	r3, r2
 8014b5c:	005b      	lsls	r3, r3, #1
 8014b5e:	f103 020c 	add.w	r2, r3, #12
 8014b62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014b64:	4413      	add	r3, r2
 8014b66:	4a3e      	ldr	r2, [pc, #248]	; (8014c60 <LTC_make_temperatures+0x180>)
 8014b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f7eb fccb 	bl	8000508 <__aeabi_i2d>
 8014b72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014b76:	f7eb fd31 	bl	80005dc <__aeabi_dmul>
 8014b7a:	4602      	mov	r2, r0
 8014b7c:	460b      	mov	r3, r1
 8014b7e:	ec43 2b17 	vmov	d7, r2, r3
 8014b82:	eeb0 0a47 	vmov.f32	s0, s14
 8014b86:	eef0 0a67 	vmov.f32	s1, s15
 8014b8a:	f019 ff6d 	bl	802ea68 <log>
 8014b8e:	ec59 8b10 	vmov	r8, r9, d0
							- log(
									-R0
 8014b92:	693c      	ldr	r4, [r7, #16]
 8014b94:	697b      	ldr	r3, [r7, #20]
 8014b96:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
											* (LTC_data[18 * cellstack + 12 + k]
 8014b9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014b9c:	4613      	mov	r3, r2
 8014b9e:	00db      	lsls	r3, r3, #3
 8014ba0:	4413      	add	r3, r2
 8014ba2:	005b      	lsls	r3, r3, #1
 8014ba4:	f103 020c 	add.w	r2, r3, #12
 8014ba8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014baa:	4413      	add	r3, r2
 8014bac:	4a2c      	ldr	r2, [pc, #176]	; (8014c60 <LTC_make_temperatures+0x180>)
 8014bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014bb2:	4619      	mov	r1, r3
													- LTC_data[18 * cellstack
 8014bb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014bb6:	4613      	mov	r3, r2
 8014bb8:	00db      	lsls	r3, r3, #3
 8014bba:	4413      	add	r3, r2
 8014bbc:	005b      	lsls	r3, r3, #1
															+ 12 + K])))
 8014bbe:	f103 020c 	add.w	r2, r3, #12
 8014bc2:	88bb      	ldrh	r3, [r7, #4]
 8014bc4:	4413      	add	r3, r2
													- LTC_data[18 * cellstack
 8014bc6:	4a26      	ldr	r2, [pc, #152]	; (8014c60 <LTC_make_temperatures+0x180>)
 8014bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014bcc:	1acb      	subs	r3, r1, r3
							- log(
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f7eb fc9a 	bl	8000508 <__aeabi_i2d>
 8014bd4:	4602      	mov	r2, r0
 8014bd6:	460b      	mov	r3, r1
 8014bd8:	4620      	mov	r0, r4
 8014bda:	4629      	mov	r1, r5
 8014bdc:	f7eb fcfe 	bl	80005dc <__aeabi_dmul>
 8014be0:	4602      	mov	r2, r0
 8014be2:	460b      	mov	r3, r1
 8014be4:	ec43 2b17 	vmov	d7, r2, r3
 8014be8:	eeb0 0a47 	vmov.f32	s0, s14
 8014bec:	eef0 0a67 	vmov.f32	s1, s15
 8014bf0:	f019 ff3a 	bl	802ea68 <log>
 8014bf4:	ec53 2b10 	vmov	r2, r3, d0
 8014bf8:	4640      	mov	r0, r8
 8014bfa:	4649      	mov	r1, r9
 8014bfc:	f7eb fb36 	bl	800026c <__aeabi_dsub>
 8014c00:	4602      	mov	r2, r0
 8014c02:	460b      	mov	r3, r1
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 8014c04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8014c08:	f7eb fe12 	bl	8000830 <__aeabi_ddiv>
 8014c0c:	4602      	mov	r2, r0
 8014c0e:	460b      	mov	r3, r1
 8014c10:	4610      	mov	r0, r2
 8014c12:	4619      	mov	r1, r3
			LTC_temperatures[p] = beta
 8014c14:	88fe      	ldrh	r6, [r7, #6]
					- 273.15;
 8014c16:	a310      	add	r3, pc, #64	; (adr r3, 8014c58 <LTC_make_temperatures+0x178>)
 8014c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c1c:	f7eb fb26 	bl	800026c <__aeabi_dsub>
 8014c20:	4602      	mov	r2, r0
 8014c22:	460b      	mov	r3, r1
			LTC_temperatures[p] = beta
 8014c24:	480f      	ldr	r0, [pc, #60]	; (8014c64 <LTC_make_temperatures+0x184>)
 8014c26:	00f1      	lsls	r1, r6, #3
 8014c28:	4401      	add	r1, r0
 8014c2a:	e9c1 2300 	strd	r2, r3, [r1]
		for (k = 0; k < K; k++) {
 8014c2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014c30:	3301      	adds	r3, #1
 8014c32:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8014c34:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8014c36:	88bb      	ldrh	r3, [r7, #4]
 8014c38:	429a      	cmp	r2, r3
 8014c3a:	d38b      	bcc.n	8014b54 <LTC_make_temperatures+0x74>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 8014c3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014c3e:	3301      	adds	r3, #1
 8014c40:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8014c42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014c44:	2b0b      	cmp	r3, #11
 8014c46:	d980      	bls.n	8014b4a <LTC_make_temperatures+0x6a>

		}
	}

	return 1;
 8014c48:	2301      	movs	r3, #1
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3734      	adds	r7, #52	; 0x34
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c54:	f3af 8000 	nop.w
 8014c58:	66666666 	.word	0x66666666
 8014c5c:	40711266 	.word	0x40711266
 8014c60:	2001bc78 	.word	0x2001bc78
 8014c64:	2001be28 	.word	0x2001be28
 8014c68:	00000000 	.word	0x00000000
 8014c6c:	40ab5800 	.word	0x40ab5800
 8014c70:	66666666 	.word	0x66666666
 8014c74:	4072a266 	.word	0x4072a266
 8014c78:	00000000 	.word	0x00000000
 8014c7c:	40c38800 	.word	0x40c38800

08014c80 <PID_progress>:
/*
 * @brief	Progress the PID
 * @param	Input at current timestep
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_progress(PID_t *ctrl, float input) {
 8014c80:	b480      	push	{r7}
 8014c82:	b087      	sub	sp, #28
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
 8014c88:	ed87 0a00 	vstr	s0, [r7]
	ctrl->input = input;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	683a      	ldr	r2, [r7, #0]
 8014c90:	605a      	str	r2, [r3, #4]
	ctrl->error = ctrl->input - ctrl->reference;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	ed93 7a01 	vldr	s14, [r3, #4]
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8014c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	edc3 7a00 	vstr	s15, [r3]

	ctrl->output = arm_pid_f32(&(ctrl->controller), ctrl->error);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f103 0218 	add.w	r2, r3, #24
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	617a      	str	r2, [r7, #20]
 8014cb4:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8014cb6:	697b      	ldr	r3, [r7, #20]
 8014cb8:	ed93 7a00 	vldr	s14, [r3]
 8014cbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8014cc0:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8014cc4:	697b      	ldr	r3, [r7, #20]
 8014cc6:	edd3 6a01 	vldr	s13, [r3, #4]
 8014cca:	697b      	ldr	r3, [r7, #20]
 8014ccc:	edd3 7a03 	vldr	s15, [r3, #12]
 8014cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8014cd4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8014cd8:	697b      	ldr	r3, [r7, #20]
 8014cda:	edd3 6a02 	vldr	s13, [r3, #8]
 8014cde:	697b      	ldr	r3, [r7, #20]
 8014ce0:	edd3 7a04 	vldr	s15, [r3, #16]
 8014ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014ce8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014cec:	697b      	ldr	r3, [r7, #20]
 8014cee:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8014cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014cf6:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8014cfa:	697b      	ldr	r3, [r7, #20]
 8014cfc:	68da      	ldr	r2, [r3, #12]
 8014cfe:	697b      	ldr	r3, [r7, #20]
 8014d00:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8014d02:	697b      	ldr	r3, [r7, #20]
 8014d04:	693a      	ldr	r2, [r7, #16]
 8014d06:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	68fa      	ldr	r2, [r7, #12]
 8014d0c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8014d0e:	68fa      	ldr	r2, [r7, #12]
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	609a      	str	r2, [r3, #8]

	if (ctrl->output < ctrl->output_lower_bound) {
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	ed93 7a02 	vldr	s14, [r3, #8]
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8014d20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d28:	d503      	bpl.n	8014d32 <PID_progress+0xb2>
		ctrl->output = ctrl->output_lower_bound;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	695a      	ldr	r2, [r3, #20]
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	609a      	str	r2, [r3, #8]
	}

	if (ctrl->output_upper_bound < ctrl->output) {
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	ed93 7a04 	vldr	s14, [r3, #16]
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8014d3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d46:	d503      	bpl.n	8014d50 <PID_progress+0xd0>
		ctrl->output = ctrl->output_upper_bound;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	691a      	ldr	r2, [r3, #16]
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	609a      	str	r2, [r3, #8]
	}

	return 1;
 8014d50:	2301      	movs	r3, #1
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	371c      	adds	r7, #28
 8014d56:	46bd      	mov	sp, r7
 8014d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5c:	4770      	bx	lr

08014d5e <PID_initialize>:
 * @param	output upper bound, ex 100 for PWM
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_initialize(PID_t *ctrl, float reference,
		float proportional, float integral, float derivative,
		float output_lower_bound, float output_upper_bound) {
 8014d5e:	b580      	push	{r7, lr}
 8014d60:	b088      	sub	sp, #32
 8014d62:	af00      	add	r7, sp, #0
 8014d64:	61f8      	str	r0, [r7, #28]
 8014d66:	ed87 0a06 	vstr	s0, [r7, #24]
 8014d6a:	edc7 0a05 	vstr	s1, [r7, #20]
 8014d6e:	ed87 1a04 	vstr	s2, [r7, #16]
 8014d72:	edc7 1a03 	vstr	s3, [r7, #12]
 8014d76:	ed87 2a02 	vstr	s4, [r7, #8]
 8014d7a:	edc7 2a01 	vstr	s5, [r7, #4]
	if (output_upper_bound < output_lower_bound) {
 8014d7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8014d82:	edd7 7a02 	vldr	s15, [r7, #8]
 8014d86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d8e:	d501      	bpl.n	8014d94 <PID_initialize+0x36>
		return 0;
 8014d90:	2300      	movs	r3, #0
 8014d92:	e024      	b.n	8014dde <PID_initialize+0x80>
	}

	ctrl->error = 0.;
 8014d94:	69fb      	ldr	r3, [r7, #28]
 8014d96:	f04f 0200 	mov.w	r2, #0
 8014d9a:	601a      	str	r2, [r3, #0]
	ctrl->input = 0.;
 8014d9c:	69fb      	ldr	r3, [r7, #28]
 8014d9e:	f04f 0200 	mov.w	r2, #0
 8014da2:	605a      	str	r2, [r3, #4]
	ctrl->output = 0.;
 8014da4:	69fb      	ldr	r3, [r7, #28]
 8014da6:	f04f 0200 	mov.w	r2, #0
 8014daa:	609a      	str	r2, [r3, #8]
	ctrl->reference = reference;
 8014dac:	69fb      	ldr	r3, [r7, #28]
 8014dae:	69ba      	ldr	r2, [r7, #24]
 8014db0:	60da      	str	r2, [r3, #12]

	ctrl->output_upper_bound = output_upper_bound;
 8014db2:	69fb      	ldr	r3, [r7, #28]
 8014db4:	687a      	ldr	r2, [r7, #4]
 8014db6:	611a      	str	r2, [r3, #16]
	ctrl->output_lower_bound = output_lower_bound;
 8014db8:	69fb      	ldr	r3, [r7, #28]
 8014dba:	68ba      	ldr	r2, [r7, #8]
 8014dbc:	615a      	str	r2, [r3, #20]

	ctrl->controller.Kp = proportional;
 8014dbe:	69fb      	ldr	r3, [r7, #28]
 8014dc0:	697a      	ldr	r2, [r7, #20]
 8014dc2:	631a      	str	r2, [r3, #48]	; 0x30
	ctrl->controller.Ki = integral;
 8014dc4:	69fb      	ldr	r3, [r7, #28]
 8014dc6:	693a      	ldr	r2, [r7, #16]
 8014dc8:	635a      	str	r2, [r3, #52]	; 0x34
	ctrl->controller.Kd = derivative;
 8014dca:	69fb      	ldr	r3, [r7, #28]
 8014dcc:	68fa      	ldr	r2, [r7, #12]
 8014dce:	639a      	str	r2, [r3, #56]	; 0x38

	arm_pid_init_f32(&(ctrl->controller), 1);
 8014dd0:	69fb      	ldr	r3, [r7, #28]
 8014dd2:	3318      	adds	r3, #24
 8014dd4:	2101      	movs	r1, #1
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f019 fc1c 	bl	802e614 <arm_pid_init_f32>

	return 1;
 8014ddc:	2301      	movs	r3, #1
}
 8014dde:	4618      	mov	r0, r3
 8014de0:	3720      	adds	r7, #32
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}
	...

08014de8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8014de8:	b580      	push	{r7, lr}
 8014dea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8014dec:	4803      	ldr	r0, [pc, #12]	; (8014dfc <_cbSendSystemDesc+0x14>)
 8014dee:	f019 f97d 	bl	802e0ec <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8014df2:	4803      	ldr	r0, [pc, #12]	; (8014e00 <_cbSendSystemDesc+0x18>)
 8014df4:	f019 f97a 	bl	802e0ec <SEGGER_SYSVIEW_SendSysDesc>
}
 8014df8:	bf00      	nop
 8014dfa:	bd80      	pop	{r7, pc}
 8014dfc:	08030340 	.word	0x08030340
 8014e00:	0803036c 	.word	0x0803036c

08014e04 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8014e04:	b580      	push	{r7, lr}
 8014e06:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8014e08:	4b06      	ldr	r3, [pc, #24]	; (8014e24 <SEGGER_SYSVIEW_Conf+0x20>)
 8014e0a:	6818      	ldr	r0, [r3, #0]
 8014e0c:	4b05      	ldr	r3, [pc, #20]	; (8014e24 <SEGGER_SYSVIEW_Conf+0x20>)
 8014e0e:	6819      	ldr	r1, [r3, #0]
 8014e10:	4b05      	ldr	r3, [pc, #20]	; (8014e28 <SEGGER_SYSVIEW_Conf+0x24>)
 8014e12:	4a06      	ldr	r2, [pc, #24]	; (8014e2c <SEGGER_SYSVIEW_Conf+0x28>)
 8014e14:	f018 fce8 	bl	802d7e8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8014e18:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8014e1c:	f018 fd28 	bl	802d870 <SEGGER_SYSVIEW_SetRAMBase>
}
 8014e20:	bf00      	nop
 8014e22:	bd80      	pop	{r7, pc}
 8014e24:	20000080 	.word	0x20000080
 8014e28:	08014de9 	.word	0x08014de9
 8014e2c:	080308b0 	.word	0x080308b0

08014e30 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8014e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e32:	b085      	sub	sp, #20
 8014e34:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8014e36:	2300      	movs	r3, #0
 8014e38:	607b      	str	r3, [r7, #4]
 8014e3a:	e048      	b.n	8014ece <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8014e3c:	4929      	ldr	r1, [pc, #164]	; (8014ee4 <_cbSendTaskList+0xb4>)
 8014e3e:	687a      	ldr	r2, [r7, #4]
 8014e40:	4613      	mov	r3, r2
 8014e42:	009b      	lsls	r3, r3, #2
 8014e44:	4413      	add	r3, r2
 8014e46:	009b      	lsls	r3, r3, #2
 8014e48:	440b      	add	r3, r1
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f016 ff57 	bl	802bd00 <uxTaskGetStackHighWaterMark>
 8014e52:	4601      	mov	r1, r0
 8014e54:	4823      	ldr	r0, [pc, #140]	; (8014ee4 <_cbSendTaskList+0xb4>)
 8014e56:	687a      	ldr	r2, [r7, #4]
 8014e58:	4613      	mov	r3, r2
 8014e5a:	009b      	lsls	r3, r3, #2
 8014e5c:	4413      	add	r3, r2
 8014e5e:	009b      	lsls	r3, r3, #2
 8014e60:	4403      	add	r3, r0
 8014e62:	3310      	adds	r3, #16
 8014e64:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8014e66:	491f      	ldr	r1, [pc, #124]	; (8014ee4 <_cbSendTaskList+0xb4>)
 8014e68:	687a      	ldr	r2, [r7, #4]
 8014e6a:	4613      	mov	r3, r2
 8014e6c:	009b      	lsls	r3, r3, #2
 8014e6e:	4413      	add	r3, r2
 8014e70:	009b      	lsls	r3, r3, #2
 8014e72:	440b      	add	r3, r1
 8014e74:	6818      	ldr	r0, [r3, #0]
 8014e76:	491b      	ldr	r1, [pc, #108]	; (8014ee4 <_cbSendTaskList+0xb4>)
 8014e78:	687a      	ldr	r2, [r7, #4]
 8014e7a:	4613      	mov	r3, r2
 8014e7c:	009b      	lsls	r3, r3, #2
 8014e7e:	4413      	add	r3, r2
 8014e80:	009b      	lsls	r3, r3, #2
 8014e82:	440b      	add	r3, r1
 8014e84:	3304      	adds	r3, #4
 8014e86:	6819      	ldr	r1, [r3, #0]
 8014e88:	4c16      	ldr	r4, [pc, #88]	; (8014ee4 <_cbSendTaskList+0xb4>)
 8014e8a:	687a      	ldr	r2, [r7, #4]
 8014e8c:	4613      	mov	r3, r2
 8014e8e:	009b      	lsls	r3, r3, #2
 8014e90:	4413      	add	r3, r2
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	4423      	add	r3, r4
 8014e96:	3308      	adds	r3, #8
 8014e98:	681c      	ldr	r4, [r3, #0]
 8014e9a:	4d12      	ldr	r5, [pc, #72]	; (8014ee4 <_cbSendTaskList+0xb4>)
 8014e9c:	687a      	ldr	r2, [r7, #4]
 8014e9e:	4613      	mov	r3, r2
 8014ea0:	009b      	lsls	r3, r3, #2
 8014ea2:	4413      	add	r3, r2
 8014ea4:	009b      	lsls	r3, r3, #2
 8014ea6:	442b      	add	r3, r5
 8014ea8:	330c      	adds	r3, #12
 8014eaa:	681d      	ldr	r5, [r3, #0]
 8014eac:	4e0d      	ldr	r6, [pc, #52]	; (8014ee4 <_cbSendTaskList+0xb4>)
 8014eae:	687a      	ldr	r2, [r7, #4]
 8014eb0:	4613      	mov	r3, r2
 8014eb2:	009b      	lsls	r3, r3, #2
 8014eb4:	4413      	add	r3, r2
 8014eb6:	009b      	lsls	r3, r3, #2
 8014eb8:	4433      	add	r3, r6
 8014eba:	3310      	adds	r3, #16
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	9300      	str	r3, [sp, #0]
 8014ec0:	462b      	mov	r3, r5
 8014ec2:	4622      	mov	r2, r4
 8014ec4:	f000 f8b6 	bl	8015034 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	3301      	adds	r3, #1
 8014ecc:	607b      	str	r3, [r7, #4]
 8014ece:	4b06      	ldr	r3, [pc, #24]	; (8014ee8 <_cbSendTaskList+0xb8>)
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	687a      	ldr	r2, [r7, #4]
 8014ed4:	429a      	cmp	r2, r3
 8014ed6:	d3b1      	bcc.n	8014e3c <_cbSendTaskList+0xc>
  }
}
 8014ed8:	bf00      	nop
 8014eda:	bf00      	nop
 8014edc:	370c      	adds	r7, #12
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	200017c4 	.word	0x200017c4
 8014ee8:	20001904 	.word	0x20001904

08014eec <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8014eec:	b5b0      	push	{r4, r5, r7, lr}
 8014eee:	b082      	sub	sp, #8
 8014ef0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8014ef2:	f016 fbdd 	bl	802b6b0 <xTaskGetTickCountFromISR>
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	461a      	mov	r2, r3
 8014efa:	f04f 0300 	mov.w	r3, #0
 8014efe:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8014f02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014f06:	4602      	mov	r2, r0
 8014f08:	460b      	mov	r3, r1
 8014f0a:	f04f 0400 	mov.w	r4, #0
 8014f0e:	f04f 0500 	mov.w	r5, #0
 8014f12:	015d      	lsls	r5, r3, #5
 8014f14:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8014f18:	0154      	lsls	r4, r2, #5
 8014f1a:	4622      	mov	r2, r4
 8014f1c:	462b      	mov	r3, r5
 8014f1e:	1a12      	subs	r2, r2, r0
 8014f20:	eb63 0301 	sbc.w	r3, r3, r1
 8014f24:	f04f 0400 	mov.w	r4, #0
 8014f28:	f04f 0500 	mov.w	r5, #0
 8014f2c:	009d      	lsls	r5, r3, #2
 8014f2e:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8014f32:	0094      	lsls	r4, r2, #2
 8014f34:	4622      	mov	r2, r4
 8014f36:	462b      	mov	r3, r5
 8014f38:	1812      	adds	r2, r2, r0
 8014f3a:	eb41 0303 	adc.w	r3, r1, r3
 8014f3e:	f04f 0000 	mov.w	r0, #0
 8014f42:	f04f 0100 	mov.w	r1, #0
 8014f46:	00d9      	lsls	r1, r3, #3
 8014f48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014f4c:	00d0      	lsls	r0, r2, #3
 8014f4e:	4602      	mov	r2, r0
 8014f50:	460b      	mov	r3, r1
 8014f52:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8014f56:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8014f5a:	4610      	mov	r0, r2
 8014f5c:	4619      	mov	r1, r3
 8014f5e:	3708      	adds	r7, #8
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bdb0      	pop	{r4, r5, r7, pc}

08014f64 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b086      	sub	sp, #24
 8014f68:	af02      	add	r7, sp, #8
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	60b9      	str	r1, [r7, #8]
 8014f6e:	607a      	str	r2, [r7, #4]
 8014f70:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8014f72:	2205      	movs	r2, #5
 8014f74:	492b      	ldr	r1, [pc, #172]	; (8015024 <SYSVIEW_AddTask+0xc0>)
 8014f76:	68b8      	ldr	r0, [r7, #8]
 8014f78:	f019 fb96 	bl	802e6a8 <memcmp>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d04b      	beq.n	801501a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8014f82:	4b29      	ldr	r3, [pc, #164]	; (8015028 <SYSVIEW_AddTask+0xc4>)
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	2b0f      	cmp	r3, #15
 8014f88:	d903      	bls.n	8014f92 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8014f8a:	4828      	ldr	r0, [pc, #160]	; (801502c <SYSVIEW_AddTask+0xc8>)
 8014f8c:	f019 fae6 	bl	802e55c <SEGGER_SYSVIEW_Warn>
    return;
 8014f90:	e044      	b.n	801501c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8014f92:	4b25      	ldr	r3, [pc, #148]	; (8015028 <SYSVIEW_AddTask+0xc4>)
 8014f94:	681a      	ldr	r2, [r3, #0]
 8014f96:	4926      	ldr	r1, [pc, #152]	; (8015030 <SYSVIEW_AddTask+0xcc>)
 8014f98:	4613      	mov	r3, r2
 8014f9a:	009b      	lsls	r3, r3, #2
 8014f9c:	4413      	add	r3, r2
 8014f9e:	009b      	lsls	r3, r3, #2
 8014fa0:	440b      	add	r3, r1
 8014fa2:	68fa      	ldr	r2, [r7, #12]
 8014fa4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8014fa6:	4b20      	ldr	r3, [pc, #128]	; (8015028 <SYSVIEW_AddTask+0xc4>)
 8014fa8:	681a      	ldr	r2, [r3, #0]
 8014faa:	4921      	ldr	r1, [pc, #132]	; (8015030 <SYSVIEW_AddTask+0xcc>)
 8014fac:	4613      	mov	r3, r2
 8014fae:	009b      	lsls	r3, r3, #2
 8014fb0:	4413      	add	r3, r2
 8014fb2:	009b      	lsls	r3, r3, #2
 8014fb4:	440b      	add	r3, r1
 8014fb6:	3304      	adds	r3, #4
 8014fb8:	68ba      	ldr	r2, [r7, #8]
 8014fba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8014fbc:	4b1a      	ldr	r3, [pc, #104]	; (8015028 <SYSVIEW_AddTask+0xc4>)
 8014fbe:	681a      	ldr	r2, [r3, #0]
 8014fc0:	491b      	ldr	r1, [pc, #108]	; (8015030 <SYSVIEW_AddTask+0xcc>)
 8014fc2:	4613      	mov	r3, r2
 8014fc4:	009b      	lsls	r3, r3, #2
 8014fc6:	4413      	add	r3, r2
 8014fc8:	009b      	lsls	r3, r3, #2
 8014fca:	440b      	add	r3, r1
 8014fcc:	3308      	adds	r3, #8
 8014fce:	687a      	ldr	r2, [r7, #4]
 8014fd0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8014fd2:	4b15      	ldr	r3, [pc, #84]	; (8015028 <SYSVIEW_AddTask+0xc4>)
 8014fd4:	681a      	ldr	r2, [r3, #0]
 8014fd6:	4916      	ldr	r1, [pc, #88]	; (8015030 <SYSVIEW_AddTask+0xcc>)
 8014fd8:	4613      	mov	r3, r2
 8014fda:	009b      	lsls	r3, r3, #2
 8014fdc:	4413      	add	r3, r2
 8014fde:	009b      	lsls	r3, r3, #2
 8014fe0:	440b      	add	r3, r1
 8014fe2:	330c      	adds	r3, #12
 8014fe4:	683a      	ldr	r2, [r7, #0]
 8014fe6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8014fe8:	4b0f      	ldr	r3, [pc, #60]	; (8015028 <SYSVIEW_AddTask+0xc4>)
 8014fea:	681a      	ldr	r2, [r3, #0]
 8014fec:	4910      	ldr	r1, [pc, #64]	; (8015030 <SYSVIEW_AddTask+0xcc>)
 8014fee:	4613      	mov	r3, r2
 8014ff0:	009b      	lsls	r3, r3, #2
 8014ff2:	4413      	add	r3, r2
 8014ff4:	009b      	lsls	r3, r3, #2
 8014ff6:	440b      	add	r3, r1
 8014ff8:	3310      	adds	r3, #16
 8014ffa:	69ba      	ldr	r2, [r7, #24]
 8014ffc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8014ffe:	4b0a      	ldr	r3, [pc, #40]	; (8015028 <SYSVIEW_AddTask+0xc4>)
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	3301      	adds	r3, #1
 8015004:	4a08      	ldr	r2, [pc, #32]	; (8015028 <SYSVIEW_AddTask+0xc4>)
 8015006:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8015008:	69bb      	ldr	r3, [r7, #24]
 801500a:	9300      	str	r3, [sp, #0]
 801500c:	683b      	ldr	r3, [r7, #0]
 801500e:	687a      	ldr	r2, [r7, #4]
 8015010:	68b9      	ldr	r1, [r7, #8]
 8015012:	68f8      	ldr	r0, [r7, #12]
 8015014:	f000 f80e 	bl	8015034 <SYSVIEW_SendTaskInfo>
 8015018:	e000      	b.n	801501c <SYSVIEW_AddTask+0xb8>
    return;
 801501a:	bf00      	nop

}
 801501c:	3710      	adds	r7, #16
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}
 8015022:	bf00      	nop
 8015024:	0803037c 	.word	0x0803037c
 8015028:	20001904 	.word	0x20001904
 801502c:	08030384 	.word	0x08030384
 8015030:	200017c4 	.word	0x200017c4

08015034 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8015034:	b580      	push	{r7, lr}
 8015036:	b08a      	sub	sp, #40	; 0x28
 8015038:	af00      	add	r7, sp, #0
 801503a:	60f8      	str	r0, [r7, #12]
 801503c:	60b9      	str	r1, [r7, #8]
 801503e:	607a      	str	r2, [r7, #4]
 8015040:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8015042:	f107 0314 	add.w	r3, r7, #20
 8015046:	2214      	movs	r2, #20
 8015048:	2100      	movs	r1, #0
 801504a:	4618      	mov	r0, r3
 801504c:	f019 fb48 	bl	802e6e0 <memset>
  TaskInfo.TaskID     = TaskID;
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8015060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015062:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8015064:	f107 0314 	add.w	r3, r7, #20
 8015068:	4618      	mov	r0, r3
 801506a:	f018 ff47 	bl	802defc <SEGGER_SYSVIEW_SendTaskInfo>
}
 801506e:	bf00      	nop
 8015070:	3728      	adds	r7, #40	; 0x28
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}
	...

08015078 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b084      	sub	sp, #16
 801507c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801507e:	463b      	mov	r3, r7
 8015080:	2200      	movs	r2, #0
 8015082:	601a      	str	r2, [r3, #0]
 8015084:	605a      	str	r2, [r3, #4]
 8015086:	609a      	str	r2, [r3, #8]
 8015088:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 801508a:	4b37      	ldr	r3, [pc, #220]	; (8015168 <MX_ADC1_Init+0xf0>)
 801508c:	4a37      	ldr	r2, [pc, #220]	; (801516c <MX_ADC1_Init+0xf4>)
 801508e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8015090:	4b35      	ldr	r3, [pc, #212]	; (8015168 <MX_ADC1_Init+0xf0>)
 8015092:	2200      	movs	r2, #0
 8015094:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8015096:	4b34      	ldr	r3, [pc, #208]	; (8015168 <MX_ADC1_Init+0xf0>)
 8015098:	2200      	movs	r2, #0
 801509a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 801509c:	4b32      	ldr	r3, [pc, #200]	; (8015168 <MX_ADC1_Init+0xf0>)
 801509e:	2201      	movs	r2, #1
 80150a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80150a2:	4b31      	ldr	r3, [pc, #196]	; (8015168 <MX_ADC1_Init+0xf0>)
 80150a4:	2200      	movs	r2, #0
 80150a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80150a8:	4b2f      	ldr	r3, [pc, #188]	; (8015168 <MX_ADC1_Init+0xf0>)
 80150aa:	2200      	movs	r2, #0
 80150ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80150b0:	4b2d      	ldr	r3, [pc, #180]	; (8015168 <MX_ADC1_Init+0xf0>)
 80150b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80150b8:	4b2b      	ldr	r3, [pc, #172]	; (8015168 <MX_ADC1_Init+0xf0>)
 80150ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80150be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80150c0:	4b29      	ldr	r3, [pc, #164]	; (8015168 <MX_ADC1_Init+0xf0>)
 80150c2:	2200      	movs	r2, #0
 80150c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80150c6:	4b28      	ldr	r3, [pc, #160]	; (8015168 <MX_ADC1_Init+0xf0>)
 80150c8:	2204      	movs	r2, #4
 80150ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80150cc:	4b26      	ldr	r3, [pc, #152]	; (8015168 <MX_ADC1_Init+0xf0>)
 80150ce:	2201      	movs	r2, #1
 80150d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80150d4:	4b24      	ldr	r3, [pc, #144]	; (8015168 <MX_ADC1_Init+0xf0>)
 80150d6:	2201      	movs	r2, #1
 80150d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80150da:	4823      	ldr	r0, [pc, #140]	; (8015168 <MX_ADC1_Init+0xf0>)
 80150dc:	f00f fb96 	bl	802480c <HAL_ADC_Init>
 80150e0:	4603      	mov	r3, r0
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d001      	beq.n	80150ea <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80150e6:	f002 fab5 	bl	8017654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80150ea:	2301      	movs	r3, #1
 80150ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80150ee:	2301      	movs	r3, #1
 80150f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80150f2:	2302      	movs	r3, #2
 80150f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80150f6:	463b      	mov	r3, r7
 80150f8:	4619      	mov	r1, r3
 80150fa:	481b      	ldr	r0, [pc, #108]	; (8015168 <MX_ADC1_Init+0xf0>)
 80150fc:	f00f fe2e 	bl	8024d5c <HAL_ADC_ConfigChannel>
 8015100:	4603      	mov	r3, r0
 8015102:	2b00      	cmp	r3, #0
 8015104:	d001      	beq.n	801510a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8015106:	f002 faa5 	bl	8017654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 801510a:	2302      	movs	r3, #2
 801510c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 801510e:	2302      	movs	r3, #2
 8015110:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8015112:	463b      	mov	r3, r7
 8015114:	4619      	mov	r1, r3
 8015116:	4814      	ldr	r0, [pc, #80]	; (8015168 <MX_ADC1_Init+0xf0>)
 8015118:	f00f fe20 	bl	8024d5c <HAL_ADC_ConfigChannel>
 801511c:	4603      	mov	r3, r0
 801511e:	2b00      	cmp	r3, #0
 8015120:	d001      	beq.n	8015126 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8015122:	f002 fa97 	bl	8017654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8015126:	2303      	movs	r3, #3
 8015128:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 801512a:	2303      	movs	r3, #3
 801512c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801512e:	463b      	mov	r3, r7
 8015130:	4619      	mov	r1, r3
 8015132:	480d      	ldr	r0, [pc, #52]	; (8015168 <MX_ADC1_Init+0xf0>)
 8015134:	f00f fe12 	bl	8024d5c <HAL_ADC_ConfigChannel>
 8015138:	4603      	mov	r3, r0
 801513a:	2b00      	cmp	r3, #0
 801513c:	d001      	beq.n	8015142 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 801513e:	f002 fa89 	bl	8017654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8015142:	2304      	movs	r3, #4
 8015144:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8015146:	2304      	movs	r3, #4
 8015148:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801514a:	463b      	mov	r3, r7
 801514c:	4619      	mov	r1, r3
 801514e:	4806      	ldr	r0, [pc, #24]	; (8015168 <MX_ADC1_Init+0xf0>)
 8015150:	f00f fe04 	bl	8024d5c <HAL_ADC_ConfigChannel>
 8015154:	4603      	mov	r3, r0
 8015156:	2b00      	cmp	r3, #0
 8015158:	d001      	beq.n	801515e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 801515a:	f002 fa7b 	bl	8017654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 801515e:	bf00      	nop
 8015160:	3710      	adds	r7, #16
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}
 8015166:	bf00      	nop
 8015168:	2001c008 	.word	0x2001c008
 801516c:	40012000 	.word	0x40012000

08015170 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b08a      	sub	sp, #40	; 0x28
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015178:	f107 0314 	add.w	r3, r7, #20
 801517c:	2200      	movs	r2, #0
 801517e:	601a      	str	r2, [r3, #0]
 8015180:	605a      	str	r2, [r3, #4]
 8015182:	609a      	str	r2, [r3, #8]
 8015184:	60da      	str	r2, [r3, #12]
 8015186:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	4a33      	ldr	r2, [pc, #204]	; (801525c <HAL_ADC_MspInit+0xec>)
 801518e:	4293      	cmp	r3, r2
 8015190:	d160      	bne.n	8015254 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8015192:	2300      	movs	r3, #0
 8015194:	613b      	str	r3, [r7, #16]
 8015196:	4b32      	ldr	r3, [pc, #200]	; (8015260 <HAL_ADC_MspInit+0xf0>)
 8015198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801519a:	4a31      	ldr	r2, [pc, #196]	; (8015260 <HAL_ADC_MspInit+0xf0>)
 801519c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80151a0:	6453      	str	r3, [r2, #68]	; 0x44
 80151a2:	4b2f      	ldr	r3, [pc, #188]	; (8015260 <HAL_ADC_MspInit+0xf0>)
 80151a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80151aa:	613b      	str	r3, [r7, #16]
 80151ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80151ae:	2300      	movs	r3, #0
 80151b0:	60fb      	str	r3, [r7, #12]
 80151b2:	4b2b      	ldr	r3, [pc, #172]	; (8015260 <HAL_ADC_MspInit+0xf0>)
 80151b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151b6:	4a2a      	ldr	r2, [pc, #168]	; (8015260 <HAL_ADC_MspInit+0xf0>)
 80151b8:	f043 0301 	orr.w	r3, r3, #1
 80151bc:	6313      	str	r3, [r2, #48]	; 0x30
 80151be:	4b28      	ldr	r3, [pc, #160]	; (8015260 <HAL_ADC_MspInit+0xf0>)
 80151c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151c2:	f003 0301 	and.w	r3, r3, #1
 80151c6:	60fb      	str	r3, [r7, #12]
 80151c8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = precharge_resistor_temperature_Pin|fuse_resistor_temperature_Pin|aux_temp1_Pin|aux_temp2_Pin;
 80151ca:	231e      	movs	r3, #30
 80151cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80151ce:	2303      	movs	r3, #3
 80151d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80151d2:	2300      	movs	r3, #0
 80151d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80151d6:	f107 0314 	add.w	r3, r7, #20
 80151da:	4619      	mov	r1, r3
 80151dc:	4821      	ldr	r0, [pc, #132]	; (8015264 <HAL_ADC_MspInit+0xf4>)
 80151de:	f011 fb89 	bl	80268f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80151e2:	4b21      	ldr	r3, [pc, #132]	; (8015268 <HAL_ADC_MspInit+0xf8>)
 80151e4:	4a21      	ldr	r2, [pc, #132]	; (801526c <HAL_ADC_MspInit+0xfc>)
 80151e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80151e8:	4b1f      	ldr	r3, [pc, #124]	; (8015268 <HAL_ADC_MspInit+0xf8>)
 80151ea:	2200      	movs	r2, #0
 80151ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80151ee:	4b1e      	ldr	r3, [pc, #120]	; (8015268 <HAL_ADC_MspInit+0xf8>)
 80151f0:	2200      	movs	r2, #0
 80151f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80151f4:	4b1c      	ldr	r3, [pc, #112]	; (8015268 <HAL_ADC_MspInit+0xf8>)
 80151f6:	2200      	movs	r2, #0
 80151f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80151fa:	4b1b      	ldr	r3, [pc, #108]	; (8015268 <HAL_ADC_MspInit+0xf8>)
 80151fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015200:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8015202:	4b19      	ldr	r3, [pc, #100]	; (8015268 <HAL_ADC_MspInit+0xf8>)
 8015204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015208:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801520a:	4b17      	ldr	r3, [pc, #92]	; (8015268 <HAL_ADC_MspInit+0xf8>)
 801520c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015210:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8015212:	4b15      	ldr	r3, [pc, #84]	; (8015268 <HAL_ADC_MspInit+0xf8>)
 8015214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015218:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 801521a:	4b13      	ldr	r3, [pc, #76]	; (8015268 <HAL_ADC_MspInit+0xf8>)
 801521c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8015220:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015222:	4b11      	ldr	r3, [pc, #68]	; (8015268 <HAL_ADC_MspInit+0xf8>)
 8015224:	2200      	movs	r2, #0
 8015226:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8015228:	480f      	ldr	r0, [pc, #60]	; (8015268 <HAL_ADC_MspInit+0xf8>)
 801522a:	f010 fff3 	bl	8026214 <HAL_DMA_Init>
 801522e:	4603      	mov	r3, r0
 8015230:	2b00      	cmp	r3, #0
 8015232:	d001      	beq.n	8015238 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8015234:	f002 fa0e 	bl	8017654 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	4a0b      	ldr	r2, [pc, #44]	; (8015268 <HAL_ADC_MspInit+0xf8>)
 801523c:	639a      	str	r2, [r3, #56]	; 0x38
 801523e:	4a0a      	ldr	r2, [pc, #40]	; (8015268 <HAL_ADC_MspInit+0xf8>)
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8015244:	2200      	movs	r2, #0
 8015246:	2105      	movs	r1, #5
 8015248:	2012      	movs	r0, #18
 801524a:	f010 ffb9 	bl	80261c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 801524e:	2012      	movs	r0, #18
 8015250:	f010 ffd2 	bl	80261f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8015254:	bf00      	nop
 8015256:	3728      	adds	r7, #40	; 0x28
 8015258:	46bd      	mov	sp, r7
 801525a:	bd80      	pop	{r7, pc}
 801525c:	40012000 	.word	0x40012000
 8015260:	40023800 	.word	0x40023800
 8015264:	40020000 	.word	0x40020000
 8015268:	2001c050 	.word	0x2001c050
 801526c:	40026410 	.word	0x40026410

08015270 <interpret_ADC_buffer>:
/* USER CODE BEGIN 1 */

static temperatures_t temperatures;
static uint16_t adcBuffer[128];

void interpret_ADC_buffer(uint16_t *_adcBuffer, uint8_t L) {
 8015270:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015274:	b08c      	sub	sp, #48	; 0x30
 8015276:	af00      	add	r7, sp, #0
 8015278:	6078      	str	r0, [r7, #4]
 801527a:	460b      	mov	r3, r1
 801527c:	70fb      	strb	r3, [r7, #3]
	uint16_t i, j;
	float adcAverageBuffer[4];

	float beta = 3500;
 801527e:	4bd6      	ldr	r3, [pc, #856]	; (80155d8 <interpret_ADC_buffer+0x368>)
 8015280:	62bb      	str	r3, [r7, #40]	; 0x28
	float temp = 25 + 273.15;
 8015282:	4bd6      	ldr	r3, [pc, #856]	; (80155dc <interpret_ADC_buffer+0x36c>)
 8015284:	627b      	str	r3, [r7, #36]	; 0x24
	float R0 = 10000 * exp(-beta / temp);
 8015286:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801528a:	eeb1 7a67 	vneg.f32	s14, s15
 801528e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015292:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015296:	ee16 0a90 	vmov	r0, s13
 801529a:	f7eb f947 	bl	800052c <__aeabi_f2d>
 801529e:	4602      	mov	r2, r0
 80152a0:	460b      	mov	r3, r1
 80152a2:	ec43 2b10 	vmov	d0, r2, r3
 80152a6:	f019 fb8f 	bl	802e9c8 <exp>
 80152aa:	ec51 0b10 	vmov	r0, r1, d0
 80152ae:	a3c6      	add	r3, pc, #792	; (adr r3, 80155c8 <interpret_ADC_buffer+0x358>)
 80152b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152b4:	f7eb f992 	bl	80005dc <__aeabi_dmul>
 80152b8:	4602      	mov	r2, r0
 80152ba:	460b      	mov	r3, r1
 80152bc:	4610      	mov	r0, r2
 80152be:	4619      	mov	r1, r3
 80152c0:	f7eb fc84 	bl	8000bcc <__aeabi_d2f>
 80152c4:	4603      	mov	r3, r0
 80152c6:	623b      	str	r3, [r7, #32]
	float R = 10000;
 80152c8:	4bc5      	ldr	r3, [pc, #788]	; (80155e0 <interpret_ADC_buffer+0x370>)
 80152ca:	61fb      	str	r3, [r7, #28]
	float resolution = pow(2, 12) - 1;
 80152cc:	4bc5      	ldr	r3, [pc, #788]	; (80155e4 <interpret_ADC_buffer+0x374>)
 80152ce:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < 4; i++) {
 80152d0:	2300      	movs	r3, #0
 80152d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80152d4:	e067      	b.n	80153a6 <interpret_ADC_buffer+0x136>
		adcAverageBuffer[i] = 0;
 80152d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80152d8:	009b      	lsls	r3, r3, #2
 80152da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80152de:	4413      	add	r3, r2
 80152e0:	3b28      	subs	r3, #40	; 0x28
 80152e2:	f04f 0200 	mov.w	r2, #0
 80152e6:	601a      	str	r2, [r3, #0]
		for (j = 0; j < L/4; j++) {
 80152e8:	2300      	movs	r3, #0
 80152ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80152ec:	e020      	b.n	8015330 <interpret_ADC_buffer+0xc0>
			adcAverageBuffer[i] += _adcBuffer[4 * j + i];
 80152ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80152f0:	009b      	lsls	r3, r3, #2
 80152f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80152f6:	4413      	add	r3, r2
 80152f8:	3b28      	subs	r3, #40	; 0x28
 80152fa:	ed93 7a00 	vldr	s14, [r3]
 80152fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015300:	009a      	lsls	r2, r3, #2
 8015302:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015304:	4413      	add	r3, r2
 8015306:	005b      	lsls	r3, r3, #1
 8015308:	687a      	ldr	r2, [r7, #4]
 801530a:	4413      	add	r3, r2
 801530c:	881b      	ldrh	r3, [r3, #0]
 801530e:	ee07 3a90 	vmov	s15, r3
 8015312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015316:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015318:	ee77 7a27 	vadd.f32	s15, s14, s15
 801531c:	009b      	lsls	r3, r3, #2
 801531e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015322:	4413      	add	r3, r2
 8015324:	3b28      	subs	r3, #40	; 0x28
 8015326:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < L/4; j++) {
 801532a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801532c:	3301      	adds	r3, #1
 801532e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8015330:	78fb      	ldrb	r3, [r7, #3]
 8015332:	089b      	lsrs	r3, r3, #2
 8015334:	b2db      	uxtb	r3, r3
 8015336:	b29b      	uxth	r3, r3
 8015338:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801533a:	429a      	cmp	r2, r3
 801533c:	d3d7      	bcc.n	80152ee <interpret_ADC_buffer+0x7e>
		}
		adcAverageBuffer[i] /= L/4;
 801533e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015340:	009b      	lsls	r3, r3, #2
 8015342:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015346:	4413      	add	r3, r2
 8015348:	3b28      	subs	r3, #40	; 0x28
 801534a:	edd3 6a00 	vldr	s13, [r3]
 801534e:	78fb      	ldrb	r3, [r7, #3]
 8015350:	089b      	lsrs	r3, r3, #2
 8015352:	b2db      	uxtb	r3, r3
 8015354:	ee07 3a90 	vmov	s15, r3
 8015358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801535c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801535e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015362:	009b      	lsls	r3, r3, #2
 8015364:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015368:	4413      	add	r3, r2
 801536a:	3b28      	subs	r3, #40	; 0x28
 801536c:	edc3 7a00 	vstr	s15, [r3]

		/* The adc value shouldn't be negative, nor should it be 0 */
		if (adcAverageBuffer[i] < 0.25) {
 8015370:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015372:	009b      	lsls	r3, r3, #2
 8015374:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015378:	4413      	add	r3, r2
 801537a:	3b28      	subs	r3, #40	; 0x28
 801537c:	edd3 7a00 	vldr	s15, [r3]
 8015380:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8015384:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801538c:	d508      	bpl.n	80153a0 <interpret_ADC_buffer+0x130>
			adcAverageBuffer[i] = 1;
 801538e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015390:	009b      	lsls	r3, r3, #2
 8015392:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015396:	4413      	add	r3, r2
 8015398:	3b28      	subs	r3, #40	; 0x28
 801539a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801539e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 4; i++) {
 80153a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80153a2:	3301      	adds	r3, #1
 80153a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80153a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80153a8:	2b03      	cmp	r3, #3
 80153aa:	d994      	bls.n	80152d6 <interpret_ADC_buffer+0x66>
	}
	/* temperature = beta / (log(R0 * ( resolution / adcAverageBuffer[i] - 1) ) - log(R)); */
	/* v/vt = ((2^n - 1)*v/vref)/((2^n - 1)*vt/vref) = ((2^n - 1)*v/vref)/adcAverageBuffer[i] */
	/* Assume v = vref, n = 12 */
	temperatures.precharge_resistor = beta
			/ (log(R0 * (resolution / adcAverageBuffer[0] - 1)) - log(R))
 80153ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153ae:	f7eb f8bd 	bl	800052c <__aeabi_f2d>
 80153b2:	4604      	mov	r4, r0
 80153b4:	460d      	mov	r5, r1
 80153b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80153ba:	edd7 6a06 	vldr	s13, [r7, #24]
 80153be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80153c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80153c6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80153ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80153ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80153d2:	ee17 0a90 	vmov	r0, s15
 80153d6:	f7eb f8a9 	bl	800052c <__aeabi_f2d>
 80153da:	4602      	mov	r2, r0
 80153dc:	460b      	mov	r3, r1
 80153de:	ec43 2b10 	vmov	d0, r2, r3
 80153e2:	f019 fb41 	bl	802ea68 <log>
 80153e6:	ec59 8b10 	vmov	r8, r9, d0
 80153ea:	69f8      	ldr	r0, [r7, #28]
 80153ec:	f7eb f89e 	bl	800052c <__aeabi_f2d>
 80153f0:	4602      	mov	r2, r0
 80153f2:	460b      	mov	r3, r1
 80153f4:	ec43 2b10 	vmov	d0, r2, r3
 80153f8:	f019 fb36 	bl	802ea68 <log>
 80153fc:	ec53 2b10 	vmov	r2, r3, d0
 8015400:	4640      	mov	r0, r8
 8015402:	4649      	mov	r1, r9
 8015404:	f7ea ff32 	bl	800026c <__aeabi_dsub>
 8015408:	4602      	mov	r2, r0
 801540a:	460b      	mov	r3, r1
 801540c:	4620      	mov	r0, r4
 801540e:	4629      	mov	r1, r5
 8015410:	f7eb fa0e 	bl	8000830 <__aeabi_ddiv>
 8015414:	4602      	mov	r2, r0
 8015416:	460b      	mov	r3, r1
 8015418:	4610      	mov	r0, r2
 801541a:	4619      	mov	r1, r3
			- 273.15;
 801541c:	a36c      	add	r3, pc, #432	; (adr r3, 80155d0 <interpret_ADC_buffer+0x360>)
 801541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015422:	f7ea ff23 	bl	800026c <__aeabi_dsub>
 8015426:	4602      	mov	r2, r0
 8015428:	460b      	mov	r3, r1
	temperatures.precharge_resistor = beta
 801542a:	496f      	ldr	r1, [pc, #444]	; (80155e8 <interpret_ADC_buffer+0x378>)
 801542c:	e9c1 2300 	strd	r2, r3, [r1]
	temperatures.fuse = beta
			/ (log(R0 * (resolution / adcAverageBuffer[1] - 1)) - log(R))
 8015430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015432:	f7eb f87b 	bl	800052c <__aeabi_f2d>
 8015436:	4604      	mov	r4, r0
 8015438:	460d      	mov	r5, r1
 801543a:	ed97 7a03 	vldr	s14, [r7, #12]
 801543e:	edd7 6a06 	vldr	s13, [r7, #24]
 8015442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801544a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801544e:	edd7 7a08 	vldr	s15, [r7, #32]
 8015452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015456:	ee17 0a90 	vmov	r0, s15
 801545a:	f7eb f867 	bl	800052c <__aeabi_f2d>
 801545e:	4602      	mov	r2, r0
 8015460:	460b      	mov	r3, r1
 8015462:	ec43 2b10 	vmov	d0, r2, r3
 8015466:	f019 faff 	bl	802ea68 <log>
 801546a:	ec59 8b10 	vmov	r8, r9, d0
 801546e:	69f8      	ldr	r0, [r7, #28]
 8015470:	f7eb f85c 	bl	800052c <__aeabi_f2d>
 8015474:	4602      	mov	r2, r0
 8015476:	460b      	mov	r3, r1
 8015478:	ec43 2b10 	vmov	d0, r2, r3
 801547c:	f019 faf4 	bl	802ea68 <log>
 8015480:	ec53 2b10 	vmov	r2, r3, d0
 8015484:	4640      	mov	r0, r8
 8015486:	4649      	mov	r1, r9
 8015488:	f7ea fef0 	bl	800026c <__aeabi_dsub>
 801548c:	4602      	mov	r2, r0
 801548e:	460b      	mov	r3, r1
 8015490:	4620      	mov	r0, r4
 8015492:	4629      	mov	r1, r5
 8015494:	f7eb f9cc 	bl	8000830 <__aeabi_ddiv>
 8015498:	4602      	mov	r2, r0
 801549a:	460b      	mov	r3, r1
 801549c:	4610      	mov	r0, r2
 801549e:	4619      	mov	r1, r3
			- 273.15;
 80154a0:	a34b      	add	r3, pc, #300	; (adr r3, 80155d0 <interpret_ADC_buffer+0x360>)
 80154a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154a6:	f7ea fee1 	bl	800026c <__aeabi_dsub>
 80154aa:	4602      	mov	r2, r0
 80154ac:	460b      	mov	r3, r1
	temperatures.fuse = beta
 80154ae:	494e      	ldr	r1, [pc, #312]	; (80155e8 <interpret_ADC_buffer+0x378>)
 80154b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	temperatures.aux_1 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[2] - 1)) - log(R))
 80154b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154b6:	f7eb f839 	bl	800052c <__aeabi_f2d>
 80154ba:	4604      	mov	r4, r0
 80154bc:	460d      	mov	r5, r1
 80154be:	ed97 7a04 	vldr	s14, [r7, #16]
 80154c2:	edd7 6a06 	vldr	s13, [r7, #24]
 80154c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80154ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80154ce:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80154d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80154d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80154da:	ee17 0a90 	vmov	r0, s15
 80154de:	f7eb f825 	bl	800052c <__aeabi_f2d>
 80154e2:	4602      	mov	r2, r0
 80154e4:	460b      	mov	r3, r1
 80154e6:	ec43 2b10 	vmov	d0, r2, r3
 80154ea:	f019 fabd 	bl	802ea68 <log>
 80154ee:	ec59 8b10 	vmov	r8, r9, d0
 80154f2:	69f8      	ldr	r0, [r7, #28]
 80154f4:	f7eb f81a 	bl	800052c <__aeabi_f2d>
 80154f8:	4602      	mov	r2, r0
 80154fa:	460b      	mov	r3, r1
 80154fc:	ec43 2b10 	vmov	d0, r2, r3
 8015500:	f019 fab2 	bl	802ea68 <log>
 8015504:	ec53 2b10 	vmov	r2, r3, d0
 8015508:	4640      	mov	r0, r8
 801550a:	4649      	mov	r1, r9
 801550c:	f7ea feae 	bl	800026c <__aeabi_dsub>
 8015510:	4602      	mov	r2, r0
 8015512:	460b      	mov	r3, r1
 8015514:	4620      	mov	r0, r4
 8015516:	4629      	mov	r1, r5
 8015518:	f7eb f98a 	bl	8000830 <__aeabi_ddiv>
 801551c:	4602      	mov	r2, r0
 801551e:	460b      	mov	r3, r1
 8015520:	4610      	mov	r0, r2
 8015522:	4619      	mov	r1, r3
			- 273.15;
 8015524:	a32a      	add	r3, pc, #168	; (adr r3, 80155d0 <interpret_ADC_buffer+0x360>)
 8015526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801552a:	f7ea fe9f 	bl	800026c <__aeabi_dsub>
 801552e:	4602      	mov	r2, r0
 8015530:	460b      	mov	r3, r1
	temperatures.aux_1 = beta
 8015532:	492d      	ldr	r1, [pc, #180]	; (80155e8 <interpret_ADC_buffer+0x378>)
 8015534:	e9c1 2304 	strd	r2, r3, [r1, #16]
	temperatures.aux_2 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[3] - 1)) - log(R))
 8015538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801553a:	f7ea fff7 	bl	800052c <__aeabi_f2d>
 801553e:	4604      	mov	r4, r0
 8015540:	460d      	mov	r5, r1
 8015542:	ed97 7a05 	vldr	s14, [r7, #20]
 8015546:	edd7 6a06 	vldr	s13, [r7, #24]
 801554a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801554e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015552:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8015556:	edd7 7a08 	vldr	s15, [r7, #32]
 801555a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801555e:	ee17 0a90 	vmov	r0, s15
 8015562:	f7ea ffe3 	bl	800052c <__aeabi_f2d>
 8015566:	4602      	mov	r2, r0
 8015568:	460b      	mov	r3, r1
 801556a:	ec43 2b10 	vmov	d0, r2, r3
 801556e:	f019 fa7b 	bl	802ea68 <log>
 8015572:	ec59 8b10 	vmov	r8, r9, d0
 8015576:	69f8      	ldr	r0, [r7, #28]
 8015578:	f7ea ffd8 	bl	800052c <__aeabi_f2d>
 801557c:	4602      	mov	r2, r0
 801557e:	460b      	mov	r3, r1
 8015580:	ec43 2b10 	vmov	d0, r2, r3
 8015584:	f019 fa70 	bl	802ea68 <log>
 8015588:	ec53 2b10 	vmov	r2, r3, d0
 801558c:	4640      	mov	r0, r8
 801558e:	4649      	mov	r1, r9
 8015590:	f7ea fe6c 	bl	800026c <__aeabi_dsub>
 8015594:	4602      	mov	r2, r0
 8015596:	460b      	mov	r3, r1
 8015598:	4620      	mov	r0, r4
 801559a:	4629      	mov	r1, r5
 801559c:	f7eb f948 	bl	8000830 <__aeabi_ddiv>
 80155a0:	4602      	mov	r2, r0
 80155a2:	460b      	mov	r3, r1
 80155a4:	4610      	mov	r0, r2
 80155a6:	4619      	mov	r1, r3
			- 273.15;
 80155a8:	a309      	add	r3, pc, #36	; (adr r3, 80155d0 <interpret_ADC_buffer+0x360>)
 80155aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ae:	f7ea fe5d 	bl	800026c <__aeabi_dsub>
 80155b2:	4602      	mov	r2, r0
 80155b4:	460b      	mov	r3, r1
	temperatures.aux_2 = beta
 80155b6:	490c      	ldr	r1, [pc, #48]	; (80155e8 <interpret_ADC_buffer+0x378>)
 80155b8:	e9c1 2306 	strd	r2, r3, [r1, #24]

}
 80155bc:	bf00      	nop
 80155be:	3730      	adds	r7, #48	; 0x30
 80155c0:	46bd      	mov	sp, r7
 80155c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80155c6:	bf00      	nop
 80155c8:	00000000 	.word	0x00000000
 80155cc:	40c38800 	.word	0x40c38800
 80155d0:	66666666 	.word	0x66666666
 80155d4:	40711266 	.word	0x40711266
 80155d8:	455ac000 	.word	0x455ac000
 80155dc:	43951333 	.word	0x43951333
 80155e0:	461c4000 	.word	0x461c4000
 80155e4:	457ff000 	.word	0x457ff000
 80155e8:	20001908 	.word	0x20001908
 80155ec:	00000000 	.word	0x00000000

080155f0 <initialize_TEM>:

void initialize_TEM(TIM_HandleTypeDef *htim) {
 80155f0:	b590      	push	{r4, r7, lr}
 80155f2:	b083      	sub	sp, #12
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
	htim->Instance->PSC = 100;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	2264      	movs	r2, #100	; 0x64
 80155fe:	629a      	str	r2, [r3, #40]	; 0x28
	htim->Instance->ARR = (64000000 / htim->Instance->PSC) * (0.18 / 64);
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015606:	4a12      	ldr	r2, [pc, #72]	; (8015650 <initialize_TEM+0x60>)
 8015608:	fbb2 f3f3 	udiv	r3, r2, r3
 801560c:	4618      	mov	r0, r3
 801560e:	f7ea ff6b 	bl	80004e8 <__aeabi_ui2d>
 8015612:	a30d      	add	r3, pc, #52	; (adr r3, 8015648 <initialize_TEM+0x58>)
 8015614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015618:	f7ea ffe0 	bl	80005dc <__aeabi_dmul>
 801561c:	4602      	mov	r2, r0
 801561e:	460b      	mov	r3, r1
 8015620:	4610      	mov	r0, r2
 8015622:	4619      	mov	r1, r3
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	681c      	ldr	r4, [r3, #0]
 8015628:	f7eb fab0 	bl	8000b8c <__aeabi_d2uiz>
 801562c:	4603      	mov	r3, r0
 801562e:	62e3      	str	r3, [r4, #44]	; 0x2c
	HAL_TIM_Base_Start(htim);
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	f012 fd9b 	bl	802816c <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, 128);
 8015636:	2280      	movs	r2, #128	; 0x80
 8015638:	4906      	ldr	r1, [pc, #24]	; (8015654 <initialize_TEM+0x64>)
 801563a:	4807      	ldr	r0, [pc, #28]	; (8015658 <initialize_TEM+0x68>)
 801563c:	f00f fa6a 	bl	8024b14 <HAL_ADC_Start_DMA>

}
 8015640:	bf00      	nop
 8015642:	370c      	adds	r7, #12
 8015644:	46bd      	mov	sp, r7
 8015646:	bd90      	pop	{r4, r7, pc}
 8015648:	70a3d70a 	.word	0x70a3d70a
 801564c:	3f670a3d 	.word	0x3f670a3d
 8015650:	03d09000 	.word	0x03d09000
 8015654:	20001928 	.word	0x20001928
 8015658:	2001c008 	.word	0x2001c008

0801565c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 801565c:	b580      	push	{r7, lr}
 801565e:	b084      	sub	sp, #16
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
	interpret_ADC_buffer(&adcBuffer[0], 64);
 8015664:	2140      	movs	r1, #64	; 0x40
 8015666:	480e      	ldr	r0, [pc, #56]	; (80156a0 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8015668:	f7ff fe02 	bl	8015270 <interpret_ADC_buffer>

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801566c:	2300      	movs	r3, #0
 801566e:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(temperatures_queue, &temperatures,
 8015670:	4b0c      	ldr	r3, [pc, #48]	; (80156a4 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8015672:	6818      	ldr	r0, [r3, #0]
 8015674:	f107 020c 	add.w	r2, r7, #12
 8015678:	2302      	movs	r3, #2
 801567a:	490b      	ldr	r1, [pc, #44]	; (80156a8 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 801567c:	f015 f81e 	bl	802a6bc <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d007      	beq.n	8015696 <HAL_ADC_ConvHalfCpltCallback+0x3a>
 8015686:	4b09      	ldr	r3, [pc, #36]	; (80156ac <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8015688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801568c:	601a      	str	r2, [r3, #0]
 801568e:	f3bf 8f4f 	dsb	sy
 8015692:	f3bf 8f6f 	isb	sy

}
 8015696:	bf00      	nop
 8015698:	3710      	adds	r7, #16
 801569a:	46bd      	mov	sp, r7
 801569c:	bd80      	pop	{r7, pc}
 801569e:	bf00      	nop
 80156a0:	20001928 	.word	0x20001928
 80156a4:	2001b844 	.word	0x2001b844
 80156a8:	20001908 	.word	0x20001908
 80156ac:	e000ed04 	.word	0xe000ed04

080156b0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b084      	sub	sp, #16
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
	interpret_ADC_buffer(&adcBuffer[64], 64);
 80156b8:	2140      	movs	r1, #64	; 0x40
 80156ba:	480e      	ldr	r0, [pc, #56]	; (80156f4 <HAL_ADC_ConvCpltCallback+0x44>)
 80156bc:	f7ff fdd8 	bl	8015270 <interpret_ADC_buffer>

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80156c0:	2300      	movs	r3, #0
 80156c2:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(temperatures_queue, &temperatures,
 80156c4:	4b0c      	ldr	r3, [pc, #48]	; (80156f8 <HAL_ADC_ConvCpltCallback+0x48>)
 80156c6:	6818      	ldr	r0, [r3, #0]
 80156c8:	f107 020c 	add.w	r2, r7, #12
 80156cc:	2302      	movs	r3, #2
 80156ce:	490b      	ldr	r1, [pc, #44]	; (80156fc <HAL_ADC_ConvCpltCallback+0x4c>)
 80156d0:	f014 fff4 	bl	802a6bc <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d007      	beq.n	80156ea <HAL_ADC_ConvCpltCallback+0x3a>
 80156da:	4b09      	ldr	r3, [pc, #36]	; (8015700 <HAL_ADC_ConvCpltCallback+0x50>)
 80156dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156e0:	601a      	str	r2, [r3, #0]
 80156e2:	f3bf 8f4f 	dsb	sy
 80156e6:	f3bf 8f6f 	isb	sy
}
 80156ea:	bf00      	nop
 80156ec:	3710      	adds	r7, #16
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}
 80156f2:	bf00      	nop
 80156f4:	200019a8 	.word	0x200019a8
 80156f8:	2001b844 	.word	0x2001b844
 80156fc:	20001908 	.word	0x20001908
 8015700:	e000ed04 	.word	0xe000ed04

08015704 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8015704:	b580      	push	{r7, lr}
 8015706:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8015708:	4b18      	ldr	r3, [pc, #96]	; (801576c <MX_CAN1_Init+0x68>)
 801570a:	4a19      	ldr	r2, [pc, #100]	; (8015770 <MX_CAN1_Init+0x6c>)
 801570c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 801570e:	4b17      	ldr	r3, [pc, #92]	; (801576c <MX_CAN1_Init+0x68>)
 8015710:	2202      	movs	r2, #2
 8015712:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8015714:	4b15      	ldr	r3, [pc, #84]	; (801576c <MX_CAN1_Init+0x68>)
 8015716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801571a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 801571c:	4b13      	ldr	r3, [pc, #76]	; (801576c <MX_CAN1_Init+0x68>)
 801571e:	2200      	movs	r2, #0
 8015720:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8015722:	4b12      	ldr	r3, [pc, #72]	; (801576c <MX_CAN1_Init+0x68>)
 8015724:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8015728:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 801572a:	4b10      	ldr	r3, [pc, #64]	; (801576c <MX_CAN1_Init+0x68>)
 801572c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8015730:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8015732:	4b0e      	ldr	r3, [pc, #56]	; (801576c <MX_CAN1_Init+0x68>)
 8015734:	2200      	movs	r2, #0
 8015736:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8015738:	4b0c      	ldr	r3, [pc, #48]	; (801576c <MX_CAN1_Init+0x68>)
 801573a:	2200      	movs	r2, #0
 801573c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 801573e:	4b0b      	ldr	r3, [pc, #44]	; (801576c <MX_CAN1_Init+0x68>)
 8015740:	2200      	movs	r2, #0
 8015742:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8015744:	4b09      	ldr	r3, [pc, #36]	; (801576c <MX_CAN1_Init+0x68>)
 8015746:	2200      	movs	r2, #0
 8015748:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 801574a:	4b08      	ldr	r3, [pc, #32]	; (801576c <MX_CAN1_Init+0x68>)
 801574c:	2200      	movs	r2, #0
 801574e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8015750:	4b06      	ldr	r3, [pc, #24]	; (801576c <MX_CAN1_Init+0x68>)
 8015752:	2200      	movs	r2, #0
 8015754:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8015756:	4805      	ldr	r0, [pc, #20]	; (801576c <MX_CAN1_Init+0x68>)
 8015758:	f00f fdaa 	bl	80252b0 <HAL_CAN_Init>
 801575c:	4603      	mov	r3, r0
 801575e:	2b00      	cmp	r3, #0
 8015760:	d001      	beq.n	8015766 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8015762:	f001 ff77 	bl	8017654 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8015766:	bf00      	nop
 8015768:	bd80      	pop	{r7, pc}
 801576a:	bf00      	nop
 801576c:	2001c0d8 	.word	0x2001c0d8
 8015770:	40006400 	.word	0x40006400

08015774 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8015778:	4b18      	ldr	r3, [pc, #96]	; (80157dc <MX_CAN2_Init+0x68>)
 801577a:	4a19      	ldr	r2, [pc, #100]	; (80157e0 <MX_CAN2_Init+0x6c>)
 801577c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 801577e:	4b17      	ldr	r3, [pc, #92]	; (80157dc <MX_CAN2_Init+0x68>)
 8015780:	2204      	movs	r2, #4
 8015782:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_LOOPBACK;
 8015784:	4b15      	ldr	r3, [pc, #84]	; (80157dc <MX_CAN2_Init+0x68>)
 8015786:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801578a:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 801578c:	4b13      	ldr	r3, [pc, #76]	; (80157dc <MX_CAN2_Init+0x68>)
 801578e:	2200      	movs	r2, #0
 8015790:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8015792:	4b12      	ldr	r3, [pc, #72]	; (80157dc <MX_CAN2_Init+0x68>)
 8015794:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8015798:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 801579a:	4b10      	ldr	r3, [pc, #64]	; (80157dc <MX_CAN2_Init+0x68>)
 801579c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80157a0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80157a2:	4b0e      	ldr	r3, [pc, #56]	; (80157dc <MX_CAN2_Init+0x68>)
 80157a4:	2200      	movs	r2, #0
 80157a6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80157a8:	4b0c      	ldr	r3, [pc, #48]	; (80157dc <MX_CAN2_Init+0x68>)
 80157aa:	2200      	movs	r2, #0
 80157ac:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80157ae:	4b0b      	ldr	r3, [pc, #44]	; (80157dc <MX_CAN2_Init+0x68>)
 80157b0:	2200      	movs	r2, #0
 80157b2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80157b4:	4b09      	ldr	r3, [pc, #36]	; (80157dc <MX_CAN2_Init+0x68>)
 80157b6:	2200      	movs	r2, #0
 80157b8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80157ba:	4b08      	ldr	r3, [pc, #32]	; (80157dc <MX_CAN2_Init+0x68>)
 80157bc:	2200      	movs	r2, #0
 80157be:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80157c0:	4b06      	ldr	r3, [pc, #24]	; (80157dc <MX_CAN2_Init+0x68>)
 80157c2:	2200      	movs	r2, #0
 80157c4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80157c6:	4805      	ldr	r0, [pc, #20]	; (80157dc <MX_CAN2_Init+0x68>)
 80157c8:	f00f fd72 	bl	80252b0 <HAL_CAN_Init>
 80157cc:	4603      	mov	r3, r0
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d001      	beq.n	80157d6 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80157d2:	f001 ff3f 	bl	8017654 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80157d6:	bf00      	nop
 80157d8:	bd80      	pop	{r7, pc}
 80157da:	bf00      	nop
 80157dc:	2001c0b0 	.word	0x2001c0b0
 80157e0:	40006800 	.word	0x40006800

080157e4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b08c      	sub	sp, #48	; 0x30
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80157ec:	f107 031c 	add.w	r3, r7, #28
 80157f0:	2200      	movs	r2, #0
 80157f2:	601a      	str	r2, [r3, #0]
 80157f4:	605a      	str	r2, [r3, #4]
 80157f6:	609a      	str	r2, [r3, #8]
 80157f8:	60da      	str	r2, [r3, #12]
 80157fa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	4a5b      	ldr	r2, [pc, #364]	; (8015970 <HAL_CAN_MspInit+0x18c>)
 8015802:	4293      	cmp	r3, r2
 8015804:	d14e      	bne.n	80158a4 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8015806:	4b5b      	ldr	r3, [pc, #364]	; (8015974 <HAL_CAN_MspInit+0x190>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	3301      	adds	r3, #1
 801580c:	4a59      	ldr	r2, [pc, #356]	; (8015974 <HAL_CAN_MspInit+0x190>)
 801580e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8015810:	4b58      	ldr	r3, [pc, #352]	; (8015974 <HAL_CAN_MspInit+0x190>)
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	2b01      	cmp	r3, #1
 8015816:	d10d      	bne.n	8015834 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8015818:	2300      	movs	r3, #0
 801581a:	61bb      	str	r3, [r7, #24]
 801581c:	4b56      	ldr	r3, [pc, #344]	; (8015978 <HAL_CAN_MspInit+0x194>)
 801581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015820:	4a55      	ldr	r2, [pc, #340]	; (8015978 <HAL_CAN_MspInit+0x194>)
 8015822:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015826:	6413      	str	r3, [r2, #64]	; 0x40
 8015828:	4b53      	ldr	r3, [pc, #332]	; (8015978 <HAL_CAN_MspInit+0x194>)
 801582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801582c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015830:	61bb      	str	r3, [r7, #24]
 8015832:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015834:	2300      	movs	r3, #0
 8015836:	617b      	str	r3, [r7, #20]
 8015838:	4b4f      	ldr	r3, [pc, #316]	; (8015978 <HAL_CAN_MspInit+0x194>)
 801583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801583c:	4a4e      	ldr	r2, [pc, #312]	; (8015978 <HAL_CAN_MspInit+0x194>)
 801583e:	f043 0301 	orr.w	r3, r3, #1
 8015842:	6313      	str	r3, [r2, #48]	; 0x30
 8015844:	4b4c      	ldr	r3, [pc, #304]	; (8015978 <HAL_CAN_MspInit+0x194>)
 8015846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015848:	f003 0301 	and.w	r3, r3, #1
 801584c:	617b      	str	r3, [r7, #20]
 801584e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015850:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015856:	2302      	movs	r3, #2
 8015858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801585a:	2300      	movs	r3, #0
 801585c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801585e:	2303      	movs	r3, #3
 8015860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8015862:	2309      	movs	r3, #9
 8015864:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015866:	f107 031c 	add.w	r3, r7, #28
 801586a:	4619      	mov	r1, r3
 801586c:	4843      	ldr	r0, [pc, #268]	; (801597c <HAL_CAN_MspInit+0x198>)
 801586e:	f011 f841 	bl	80268f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8015872:	2200      	movs	r2, #0
 8015874:	2105      	movs	r1, #5
 8015876:	2013      	movs	r0, #19
 8015878:	f010 fca2 	bl	80261c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 801587c:	2013      	movs	r0, #19
 801587e:	f010 fcbb 	bl	80261f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8015882:	2200      	movs	r2, #0
 8015884:	2105      	movs	r1, #5
 8015886:	2014      	movs	r0, #20
 8015888:	f010 fc9a 	bl	80261c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 801588c:	2014      	movs	r0, #20
 801588e:	f010 fcb3 	bl	80261f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8015892:	2200      	movs	r2, #0
 8015894:	2105      	movs	r1, #5
 8015896:	2015      	movs	r0, #21
 8015898:	f010 fc92 	bl	80261c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 801589c:	2015      	movs	r0, #21
 801589e:	f010 fcab 	bl	80261f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80158a2:	e060      	b.n	8015966 <HAL_CAN_MspInit+0x182>
  else if(canHandle->Instance==CAN2)
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	4a35      	ldr	r2, [pc, #212]	; (8015980 <HAL_CAN_MspInit+0x19c>)
 80158aa:	4293      	cmp	r3, r2
 80158ac:	d15b      	bne.n	8015966 <HAL_CAN_MspInit+0x182>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80158ae:	2300      	movs	r3, #0
 80158b0:	613b      	str	r3, [r7, #16]
 80158b2:	4b31      	ldr	r3, [pc, #196]	; (8015978 <HAL_CAN_MspInit+0x194>)
 80158b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158b6:	4a30      	ldr	r2, [pc, #192]	; (8015978 <HAL_CAN_MspInit+0x194>)
 80158b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80158bc:	6413      	str	r3, [r2, #64]	; 0x40
 80158be:	4b2e      	ldr	r3, [pc, #184]	; (8015978 <HAL_CAN_MspInit+0x194>)
 80158c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80158c6:	613b      	str	r3, [r7, #16]
 80158c8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80158ca:	4b2a      	ldr	r3, [pc, #168]	; (8015974 <HAL_CAN_MspInit+0x190>)
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	3301      	adds	r3, #1
 80158d0:	4a28      	ldr	r2, [pc, #160]	; (8015974 <HAL_CAN_MspInit+0x190>)
 80158d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80158d4:	4b27      	ldr	r3, [pc, #156]	; (8015974 <HAL_CAN_MspInit+0x190>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	2b01      	cmp	r3, #1
 80158da:	d10d      	bne.n	80158f8 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80158dc:	2300      	movs	r3, #0
 80158de:	60fb      	str	r3, [r7, #12]
 80158e0:	4b25      	ldr	r3, [pc, #148]	; (8015978 <HAL_CAN_MspInit+0x194>)
 80158e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158e4:	4a24      	ldr	r2, [pc, #144]	; (8015978 <HAL_CAN_MspInit+0x194>)
 80158e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80158ea:	6413      	str	r3, [r2, #64]	; 0x40
 80158ec:	4b22      	ldr	r3, [pc, #136]	; (8015978 <HAL_CAN_MspInit+0x194>)
 80158ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80158f4:	60fb      	str	r3, [r7, #12]
 80158f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80158f8:	2300      	movs	r3, #0
 80158fa:	60bb      	str	r3, [r7, #8]
 80158fc:	4b1e      	ldr	r3, [pc, #120]	; (8015978 <HAL_CAN_MspInit+0x194>)
 80158fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015900:	4a1d      	ldr	r2, [pc, #116]	; (8015978 <HAL_CAN_MspInit+0x194>)
 8015902:	f043 0302 	orr.w	r3, r3, #2
 8015906:	6313      	str	r3, [r2, #48]	; 0x30
 8015908:	4b1b      	ldr	r3, [pc, #108]	; (8015978 <HAL_CAN_MspInit+0x194>)
 801590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801590c:	f003 0302 	and.w	r3, r3, #2
 8015910:	60bb      	str	r3, [r7, #8]
 8015912:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8015914:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8015918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801591a:	2302      	movs	r3, #2
 801591c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801591e:	2300      	movs	r3, #0
 8015920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015922:	2303      	movs	r3, #3
 8015924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8015926:	2309      	movs	r3, #9
 8015928:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801592a:	f107 031c 	add.w	r3, r7, #28
 801592e:	4619      	mov	r1, r3
 8015930:	4814      	ldr	r0, [pc, #80]	; (8015984 <HAL_CAN_MspInit+0x1a0>)
 8015932:	f010 ffdf 	bl	80268f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8015936:	2200      	movs	r2, #0
 8015938:	2105      	movs	r1, #5
 801593a:	203f      	movs	r0, #63	; 0x3f
 801593c:	f010 fc40 	bl	80261c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8015940:	203f      	movs	r0, #63	; 0x3f
 8015942:	f010 fc59 	bl	80261f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8015946:	2200      	movs	r2, #0
 8015948:	2105      	movs	r1, #5
 801594a:	2040      	movs	r0, #64	; 0x40
 801594c:	f010 fc38 	bl	80261c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8015950:	2040      	movs	r0, #64	; 0x40
 8015952:	f010 fc51 	bl	80261f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8015956:	2200      	movs	r2, #0
 8015958:	2105      	movs	r1, #5
 801595a:	2041      	movs	r0, #65	; 0x41
 801595c:	f010 fc30 	bl	80261c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8015960:	2041      	movs	r0, #65	; 0x41
 8015962:	f010 fc49 	bl	80261f8 <HAL_NVIC_EnableIRQ>
}
 8015966:	bf00      	nop
 8015968:	3730      	adds	r7, #48	; 0x30
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	40006400 	.word	0x40006400
 8015974:	20001a28 	.word	0x20001a28
 8015978:	40023800 	.word	0x40023800
 801597c:	40020000 	.word	0x40020000
 8015980:	40006800 	.word	0x40006800
 8015984:	40020400 	.word	0x40020400

08015988 <can1_dbu_status_1_rx_callback>:
#include "programme_queues.h"
#include "canlib_data.h"
#include "canlib_callbacks.h"
#include "CSE.h"

void can1_dbu_status_1_rx_callback(dbu_status_1_t *dbu_status_1) {
 8015988:	b580      	push	{r7, lr}
 801598a:	b084      	sub	sp, #16
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015990:	2300      	movs	r3, #0
 8015992:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(start_drive_queue,
 8015994:	4b10      	ldr	r3, [pc, #64]	; (80159d8 <can1_dbu_status_1_rx_callback+0x50>)
 8015996:	6818      	ldr	r0, [r3, #0]
 8015998:	6879      	ldr	r1, [r7, #4]
 801599a:	f107 020c 	add.w	r2, r7, #12
 801599e:	2302      	movs	r3, #2
 80159a0:	f014 fe8c 	bl	802a6bc <xQueueGenericSendFromISR>
			&dbu_status_1->activate_ts_button, &xHigherPriorityTaskWoken);
	xQueueOverwriteFromISR(start_balance_queue,
 80159a4:	4b0d      	ldr	r3, [pc, #52]	; (80159dc <can1_dbu_status_1_rx_callback+0x54>)
 80159a6:	6818      	ldr	r0, [r3, #0]
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f103 0110 	add.w	r1, r3, #16
 80159ae:	f107 020c 	add.w	r2, r7, #12
 80159b2:	2302      	movs	r3, #2
 80159b4:	f014 fe82 	bl	802a6bc <xQueueGenericSendFromISR>
			&dbu_status_1->ready_to_drive_button, &xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d007      	beq.n	80159ce <can1_dbu_status_1_rx_callback+0x46>
 80159be:	4b08      	ldr	r3, [pc, #32]	; (80159e0 <can1_dbu_status_1_rx_callback+0x58>)
 80159c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159c4:	601a      	str	r2, [r3, #0]
 80159c6:	f3bf 8f4f 	dsb	sy
 80159ca:	f3bf 8f6f 	isb	sy
}
 80159ce:	bf00      	nop
 80159d0:	3710      	adds	r7, #16
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bd80      	pop	{r7, pc}
 80159d6:	bf00      	nop
 80159d8:	2001b83c 	.word	0x2001b83c
 80159dc:	2001b85c 	.word	0x2001b85c
 80159e0:	e000ed04 	.word	0xe000ed04

080159e4 <can2_ivt_msg_result_i_rx_callback>:

void can2_ivt_msg_result_i_rx_callback(ivt_msg_result_i_t *ivt_msg_result_i) {
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b084      	sub	sp, #16
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80159ec:	2300      	movs	r3, #0
 80159ee:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(accumulator_current_queue, &ivt_msg_result_i->i_ts,
 80159f0:	4b0b      	ldr	r3, [pc, #44]	; (8015a20 <can2_ivt_msg_result_i_rx_callback+0x3c>)
 80159f2:	6818      	ldr	r0, [r3, #0]
 80159f4:	6879      	ldr	r1, [r7, #4]
 80159f6:	f107 020c 	add.w	r2, r7, #12
 80159fa:	2302      	movs	r3, #2
 80159fc:	f014 fe5e 	bl	802a6bc <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d007      	beq.n	8015a16 <can2_ivt_msg_result_i_rx_callback+0x32>
 8015a06:	4b07      	ldr	r3, [pc, #28]	; (8015a24 <can2_ivt_msg_result_i_rx_callback+0x40>)
 8015a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a0c:	601a      	str	r2, [r3, #0]
 8015a0e:	f3bf 8f4f 	dsb	sy
 8015a12:	f3bf 8f6f 	isb	sy
}
 8015a16:	bf00      	nop
 8015a18:	3710      	adds	r7, #16
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}
 8015a1e:	bf00      	nop
 8015a20:	2001b860 	.word	0x2001b860
 8015a24:	e000ed04 	.word	0xe000ed04

08015a28 <can2_ivt_msg_result_u1_rx_callback>:

void can2_ivt_msg_result_u1_rx_callback(ivt_msg_result_u1_t *ivt_msg_result_u1) {
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b084      	sub	sp, #16
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015a30:	2300      	movs	r3, #0
 8015a32:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(accumulator_voltage_queue,
 8015a34:	4b0b      	ldr	r3, [pc, #44]	; (8015a64 <can2_ivt_msg_result_u1_rx_callback+0x3c>)
 8015a36:	6818      	ldr	r0, [r3, #0]
 8015a38:	6879      	ldr	r1, [r7, #4]
 8015a3a:	f107 020c 	add.w	r2, r7, #12
 8015a3e:	2302      	movs	r3, #2
 8015a40:	f014 fe3c 	bl	802a6bc <xQueueGenericSendFromISR>
			&ivt_msg_result_u1->u_cells, &xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d007      	beq.n	8015a5a <can2_ivt_msg_result_u1_rx_callback+0x32>
 8015a4a:	4b07      	ldr	r3, [pc, #28]	; (8015a68 <can2_ivt_msg_result_u1_rx_callback+0x40>)
 8015a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a50:	601a      	str	r2, [r3, #0]
 8015a52:	f3bf 8f4f 	dsb	sy
 8015a56:	f3bf 8f6f 	isb	sy
}
 8015a5a:	bf00      	nop
 8015a5c:	3710      	adds	r7, #16
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	bd80      	pop	{r7, pc}
 8015a62:	bf00      	nop
 8015a64:	2001b858 	.word	0x2001b858
 8015a68:	e000ed04 	.word	0xe000ed04

08015a6c <can2_ivt_msg_result_u3_rx_callback>:

void can2_ivt_msg_result_u3_rx_callback(ivt_msg_result_u3_t *ivt_msg_result_u3) {
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b084      	sub	sp, #16
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015a74:	2300      	movs	r3, #0
 8015a76:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(vehicle_voltage_queue, &ivt_msg_result_u3->u_vehicle,
 8015a78:	4b0b      	ldr	r3, [pc, #44]	; (8015aa8 <can2_ivt_msg_result_u3_rx_callback+0x3c>)
 8015a7a:	6818      	ldr	r0, [r3, #0]
 8015a7c:	6879      	ldr	r1, [r7, #4]
 8015a7e:	f107 020c 	add.w	r2, r7, #12
 8015a82:	2302      	movs	r3, #2
 8015a84:	f014 fe1a 	bl	802a6bc <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d007      	beq.n	8015a9e <can2_ivt_msg_result_u3_rx_callback+0x32>
 8015a8e:	4b07      	ldr	r3, [pc, #28]	; (8015aac <can2_ivt_msg_result_u3_rx_callback+0x40>)
 8015a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a94:	601a      	str	r2, [r3, #0]
 8015a96:	f3bf 8f4f 	dsb	sy
 8015a9a:	f3bf 8f6f 	isb	sy
}
 8015a9e:	bf00      	nop
 8015aa0:	3710      	adds	r7, #16
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}
 8015aa6:	bf00      	nop
 8015aa8:	2001b854 	.word	0x2001b854
 8015aac:	e000ed04 	.word	0xe000ed04

08015ab0 <can2_cc_status_rx_callback>:

void can2_cc_status_rx_callback(cc_status_t *cc_status) {
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b084      	sub	sp, #16
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015ab8:	2300      	movs	r3, #0
 8015aba:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(start_charge_queue, &cc_status->enable_ams_charging,
 8015abc:	4b0b      	ldr	r3, [pc, #44]	; (8015aec <can2_cc_status_rx_callback+0x3c>)
 8015abe:	6818      	ldr	r0, [r3, #0]
 8015ac0:	6879      	ldr	r1, [r7, #4]
 8015ac2:	f107 020c 	add.w	r2, r7, #12
 8015ac6:	2302      	movs	r3, #2
 8015ac8:	f014 fdf8 	bl	802a6bc <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d007      	beq.n	8015ae2 <can2_cc_status_rx_callback+0x32>
 8015ad2:	4b07      	ldr	r3, [pc, #28]	; (8015af0 <can2_cc_status_rx_callback+0x40>)
 8015ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ad8:	601a      	str	r2, [r3, #0]
 8015ada:	f3bf 8f4f 	dsb	sy
 8015ade:	f3bf 8f6f 	isb	sy
}
 8015ae2:	bf00      	nop
 8015ae4:	3710      	adds	r7, #16
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bd80      	pop	{r7, pc}
 8015aea:	bf00      	nop
 8015aec:	2001b84c 	.word	0x2001b84c
 8015af0:	e000ed04 	.word	0xe000ed04

08015af4 <can2_charger_config_tx_callback>:

uint8_t can2_charger_config_tx_callback(charger_config_t *charger_config) {
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b082      	sub	sp, #8
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
	charger_config->msg_set_current_limit = charger.charger_current_limit;
 8015afc:	4b12      	ldr	r3, [pc, #72]	; (8015b48 <can2_charger_config_tx_callback+0x54>)
 8015afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b02:	6879      	ldr	r1, [r7, #4]
 8015b04:	e9c1 2300 	strd	r2, r3, [r1]
	charger_config->msg_set_voltage_limit = charger.charger_voltage_limit;
 8015b08:	4b0f      	ldr	r3, [pc, #60]	; (8015b48 <can2_charger_config_tx_callback+0x54>)
 8015b0a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015b0e:	6879      	ldr	r1, [r7, #4]
 8015b10:	e9c1 2308 	strd	r2, r3, [r1, #32]
	charger_config->msg_set_power_limit = charger.charger_current_limit * charger.charger_voltage_limit;
 8015b14:	4b0c      	ldr	r3, [pc, #48]	; (8015b48 <can2_charger_config_tx_callback+0x54>)
 8015b16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015b1a:	4b0b      	ldr	r3, [pc, #44]	; (8015b48 <can2_charger_config_tx_callback+0x54>)
 8015b1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015b20:	f7ea fd5c 	bl	80005dc <__aeabi_dmul>
 8015b24:	4602      	mov	r2, r0
 8015b26:	460b      	mov	r3, r1
 8015b28:	6879      	ldr	r1, [r7, #4]
 8015b2a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	charger_config->msg_set_time_out = 60;
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	223c      	movs	r2, #60	; 0x3c
 8015b32:	761a      	strb	r2, [r3, #24]
	charger_config->msg_set_enabled = charger.enable_charger;
 8015b34:	4b04      	ldr	r3, [pc, #16]	; (8015b48 <can2_charger_config_tx_callback+0x54>)
 8015b36:	7c1a      	ldrb	r2, [r3, #16]
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	721a      	strb	r2, [r3, #8]
	return 1;
 8015b3c:	2301      	movs	r3, #1
}
 8015b3e:	4618      	mov	r0, r3
 8015b40:	3708      	adds	r7, #8
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}
 8015b46:	bf00      	nop
 8015b48:	2001b808 	.word	0x2001b808

08015b4c <can1_ams_status_1_tx_callback>:

uint8_t can1_ams_status_1_tx_callback(ams_status_1_t *ams_status_1) {
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b096      	sub	sp, #88	; 0x58
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
	double minimum_cell_temperature;
	double maximum_cell_voltage;
	double minimum_cell_voltage;
	temperatures_t temperatures;

	if (xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 8015b54:	4b65      	ldr	r3, [pc, #404]	; (8015cec <can1_ams_status_1_tx_callback+0x1a0>)
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f014 ff6c 	bl	802aa3c <xQueuePeek>
 8015b64:	4603      	mov	r3, r0
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	f000 80ba 	beq.w	8015ce0 <can1_ams_status_1_tx_callback+0x194>
			&& xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)
 8015b6c:	4b60      	ldr	r3, [pc, #384]	; (8015cf0 <can1_ams_status_1_tx_callback+0x1a4>)
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8015b74:	2200      	movs	r2, #0
 8015b76:	4618      	mov	r0, r3
 8015b78:	f014 ff60 	bl	802aa3c <xQueuePeek>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	f000 80ae 	beq.w	8015ce0 <can1_ams_status_1_tx_callback+0x194>
			&& xQueuePeek(temperatures_queue, &temperatures, 0)) {
 8015b84:	4b5b      	ldr	r3, [pc, #364]	; (8015cf4 <can1_ams_status_1_tx_callback+0x1a8>)
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	f107 0108 	add.w	r1, r7, #8
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f014 ff54 	bl	802aa3c <xQueuePeek>
 8015b94:	4603      	mov	r3, r0
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	f000 80a2 	beq.w	8015ce0 <can1_ams_status_1_tx_callback+0x194>
		maximum_cell_temperature = cell_temperatures[0];
 8015b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ba2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		minimum_cell_temperature = cell_temperatures[0];
 8015ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bac:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		maximum_cell_voltage = cell_voltages[0];
 8015bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bb6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		minimum_cell_voltage = cell_voltages[0];
 8015bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bc0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		for (int i = 0; i < 126; i++) {
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8015bc8:	e03e      	b.n	8015c48 <can1_ams_status_1_tx_callback+0xfc>
			if (maximum_cell_temperature < cell_temperatures[0]) {
 8015bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bd0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8015bd4:	f7ea ff74 	bl	8000ac0 <__aeabi_dcmplt>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d004      	beq.n	8015be8 <can1_ams_status_1_tx_callback+0x9c>
				maximum_cell_temperature = cell_temperatures[0];
 8015bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015be4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}
			if (minimum_cell_temperature > cell_temperatures[0]) {
 8015be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8015bf2:	f7ea ff83 	bl	8000afc <__aeabi_dcmpgt>
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d004      	beq.n	8015c06 <can1_ams_status_1_tx_callback+0xba>
				minimum_cell_temperature = cell_temperatures[0];
 8015bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c02:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			if (maximum_cell_voltage < cell_voltages[0]) {
 8015c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c0c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8015c10:	f7ea ff56 	bl	8000ac0 <__aeabi_dcmplt>
 8015c14:	4603      	mov	r3, r0
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d004      	beq.n	8015c24 <can1_ams_status_1_tx_callback+0xd8>
				maximum_cell_voltage = cell_voltages[0];
 8015c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c20:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			}
			if (minimum_cell_voltage > cell_voltages[0]) {
 8015c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c2a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8015c2e:	f7ea ff65 	bl	8000afc <__aeabi_dcmpgt>
 8015c32:	4603      	mov	r3, r0
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d004      	beq.n	8015c42 <can1_ams_status_1_tx_callback+0xf6>
				minimum_cell_voltage = cell_voltages[0];
 8015c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c3e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		for (int i = 0; i < 126; i++) {
 8015c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c44:	3301      	adds	r3, #1
 8015c46:	637b      	str	r3, [r7, #52]	; 0x34
 8015c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c4a:	2b7d      	cmp	r3, #125	; 0x7d
 8015c4c:	ddbd      	ble.n	8015bca <can1_ams_status_1_tx_callback+0x7e>
			}

		}

		ams_status_1->air1_closed = get_air_minus_ext();
 8015c4e:	f001 fd4f 	bl	80176f0 <get_air_minus_ext>
 8015c52:	4603      	mov	r3, r0
 8015c54:	461a      	mov	r2, r3
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	701a      	strb	r2, [r3, #0]
		ams_status_1->air2_closed = get_air_plus_ext();
 8015c5a:	f001 fd15 	bl	8017688 <get_air_plus_ext>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	461a      	mov	r2, r3
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	705a      	strb	r2, [r3, #1]
		ams_status_1->ams_error = get_ams_error_latched_ext();
 8015c66:	f001 fdab 	bl	80177c0 <get_ams_error_latched_ext>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	461a      	mov	r2, r3
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	709a      	strb	r2, [r3, #2]
		ams_status_1->imd_error = get_imd_error_latched_ext();
 8015c72:	f001 fdc5 	bl	8017800 <get_imd_error_latched_ext>
 8015c76:	4603      	mov	r3, r0
 8015c78:	461a      	mov	r2, r3
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	741a      	strb	r2, [r3, #16]
		ams_status_1->charging_status = charger.enable_charger;
 8015c7e:	4b1e      	ldr	r3, [pc, #120]	; (8015cf8 <can1_ams_status_1_tx_callback+0x1ac>)
 8015c80:	7c1a      	ldrb	r2, [r3, #16]
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	70da      	strb	r2, [r3, #3]
		ams_status_1->fan_speed = pPID.duty_cycle;
 8015c86:	4b1d      	ldr	r3, [pc, #116]	; (8015cfc <can1_ams_status_1_tx_callback+0x1b0>)
 8015c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c8c:	6879      	ldr	r1, [r7, #4]
 8015c8e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ams_status_1->max_cell_temperature = maximum_cell_temperature;
 8015c92:	6879      	ldr	r1, [r7, #4]
 8015c94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8015c98:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ams_status_1->max_cell_voltage = maximum_cell_voltage;
 8015c9c:	6879      	ldr	r1, [r7, #4]
 8015c9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015ca2:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ams_status_1->min_cell_temperature = minimum_cell_temperature;
 8015ca6:	6879      	ldr	r1, [r7, #4]
 8015ca8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8015cac:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		ams_status_1->min_cell_voltage = minimum_cell_voltage;
 8015cb0:	6879      	ldr	r1, [r7, #4]
 8015cb2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8015cb6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		ams_status_1->pre_charge_status = 1;
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	2201      	movs	r2, #1
 8015cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		ams_status_1->sc_closed = get_sc_probe_ext();
 8015cc2:	f001 fda9 	bl	8017818 <get_sc_probe_ext>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	461a      	mov	r2, r3
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		ams_status_1->state_of_charge = CSE_Y.soc;
 8015cd0:	4b0b      	ldr	r3, [pc, #44]	; (8015d00 <can1_ams_status_1_tx_callback+0x1b4>)
 8015cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cd6:	6879      	ldr	r1, [r7, #4]
 8015cd8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

		return 1;
 8015cdc:	2301      	movs	r3, #1
 8015cde:	e000      	b.n	8015ce2 <can1_ams_status_1_tx_callback+0x196>
	} else {
		return 0;
 8015ce0:	2300      	movs	r3, #0
	}

}
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	3758      	adds	r7, #88	; 0x58
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	bd80      	pop	{r7, pc}
 8015cea:	bf00      	nop
 8015cec:	2001b838 	.word	0x2001b838
 8015cf0:	2001b850 	.word	0x2001b850
 8015cf4:	2001b844 	.word	0x2001b844
 8015cf8:	2001b808 	.word	0x2001b808
 8015cfc:	2001b800 	.word	0x2001b800
 8015d00:	2001c320 	.word	0x2001c320

08015d04 <can1_ams_temperatures_tx_callback>:

uint8_t can1_ams_temperatures_tx_callback(ams_temperatures_t *ams_temperatures) {
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b082      	sub	sp, #8
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
	return xQueuePeek(temperatures_queue, &ams_temperatures->aux_1_temperature,
 8015d0c:	4b06      	ldr	r3, [pc, #24]	; (8015d28 <can1_ams_temperatures_tx_callback+0x24>)
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	6879      	ldr	r1, [r7, #4]
 8015d12:	2200      	movs	r2, #0
 8015d14:	4618      	mov	r0, r3
 8015d16:	f014 fe91 	bl	802aa3c <xQueuePeek>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	b2db      	uxtb	r3, r3
			0);
}
 8015d1e:	4618      	mov	r0, r3
 8015d20:	3708      	adds	r7, #8
 8015d22:	46bd      	mov	sp, r7
 8015d24:	bd80      	pop	{r7, pc}
 8015d26:	bf00      	nop
 8015d28:	2001b844 	.word	0x2001b844

08015d2c <can1_ams_cell_voltages_tx_callback>:

uint8_t can1_ams_cell_voltages_tx_callback(
		ams_cell_voltages_t *ams_cell_voltages) {
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b082      	sub	sp, #8
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
	return xQueuePeek(cell_voltages_queue, &ams_cell_voltages->v1s1, 0);
 8015d34:	4b06      	ldr	r3, [pc, #24]	; (8015d50 <can1_ams_cell_voltages_tx_callback+0x24>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	6879      	ldr	r1, [r7, #4]
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f014 fe7d 	bl	802aa3c <xQueuePeek>
 8015d42:	4603      	mov	r3, r0
 8015d44:	b2db      	uxtb	r3, r3
}
 8015d46:	4618      	mov	r0, r3
 8015d48:	3708      	adds	r7, #8
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	bd80      	pop	{r7, pc}
 8015d4e:	bf00      	nop
 8015d50:	2001b838 	.word	0x2001b838

08015d54 <can1_ams_cell_temperatures_tx_callback>:

uint8_t can1_ams_cell_temperatures_tx_callback(
		ams_cell_temperatures_t *ams_cell_temperatures) {
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b082      	sub	sp, #8
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
	return xQueuePeek(cell_temperatures_queue, &ams_cell_temperatures->t1s1, 0);
 8015d5c:	4b06      	ldr	r3, [pc, #24]	; (8015d78 <can1_ams_cell_temperatures_tx_callback+0x24>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	6879      	ldr	r1, [r7, #4]
 8015d62:	2200      	movs	r2, #0
 8015d64:	4618      	mov	r0, r3
 8015d66:	f014 fe69 	bl	802aa3c <xQueuePeek>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	b2db      	uxtb	r3, r3
}
 8015d6e:	4618      	mov	r0, r3
 8015d70:	3708      	adds	r7, #8
 8015d72:	46bd      	mov	sp, r7
 8015d74:	bd80      	pop	{r7, pc}
 8015d76:	bf00      	nop
 8015d78:	2001b850 	.word	0x2001b850

08015d7c <can2_ivt_msg_result_i_tx_callback>:
#include "canlib_data.h"
#include "canlib_callbacks.h"
#include "SIM0.h"


uint8_t can2_ivt_msg_result_i_tx_callback(ivt_msg_result_i_t* ivt_msg_result_i){
 8015d7c:	b480      	push	{r7}
 8015d7e:	b083      	sub	sp, #12
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
	ivt_msg_result_i->i_ts = SIM0_Y.current;
 8015d84:	4b06      	ldr	r3, [pc, #24]	; (8015da0 <can2_ivt_msg_result_i_tx_callback+0x24>)
 8015d86:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8015d8a:	6879      	ldr	r1, [r7, #4]
 8015d8c:	e9c1 2300 	strd	r2, r3, [r1]
	return 1;
 8015d90:	2301      	movs	r3, #1
}
 8015d92:	4618      	mov	r0, r3
 8015d94:	370c      	adds	r7, #12
 8015d96:	46bd      	mov	sp, r7
 8015d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d9c:	4770      	bx	lr
 8015d9e:	bf00      	nop
 8015da0:	2001dc00 	.word	0x2001dc00

08015da4 <can2_ivt_msg_result_u1_tx_callback>:

uint8_t can2_ivt_msg_result_u1_tx_callback(ivt_msg_result_u1_t* ivt_msg_result_u1) {
 8015da4:	b480      	push	{r7}
 8015da6:	b083      	sub	sp, #12
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
	ivt_msg_result_u1->u_cells = SIM0_Y.accumulator_voltage;
 8015dac:	4b06      	ldr	r3, [pc, #24]	; (8015dc8 <can2_ivt_msg_result_u1_tx_callback+0x24>)
 8015dae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8015db2:	6879      	ldr	r1, [r7, #4]
 8015db4:	e9c1 2300 	strd	r2, r3, [r1]
	return 1;
 8015db8:	2301      	movs	r3, #1
}
 8015dba:	4618      	mov	r0, r3
 8015dbc:	370c      	adds	r7, #12
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc4:	4770      	bx	lr
 8015dc6:	bf00      	nop
 8015dc8:	2001dc00 	.word	0x2001dc00

08015dcc <can2_ivt_msg_result_u3_tx_callback>:

uint8_t can2_ivt_msg_result_u3_tx_callback(ivt_msg_result_u3_t* ivt_msg_result_u3) {
 8015dcc:	b480      	push	{r7}
 8015dce:	b083      	sub	sp, #12
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
	ivt_msg_result_u3->u_vehicle = SIM0_Y.vehicle_voltage;
 8015dd4:	4b06      	ldr	r3, [pc, #24]	; (8015df0 <can2_ivt_msg_result_u3_tx_callback+0x24>)
 8015dd6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8015dda:	6879      	ldr	r1, [r7, #4]
 8015ddc:	e9c1 2300 	strd	r2, r3, [r1]
	return 1;
 8015de0:	2301      	movs	r3, #1
}
 8015de2:	4618      	mov	r0, r3
 8015de4:	370c      	adds	r7, #12
 8015de6:	46bd      	mov	sp, r7
 8015de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dec:	4770      	bx	lr
 8015dee:	bf00      	nop
 8015df0:	2001dc00 	.word	0x2001dc00

08015df4 <can2_cc_status_tx_callback>:

uint8_t can2_cc_status_tx_callback(cc_status_t* cc_status) {
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b082      	sub	sp, #8
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
	cc_status->enable_ams_charging = SIM0_U.charge && !SIM0_U.drive;
 8015dfc:	4b11      	ldr	r3, [pc, #68]	; (8015e44 <can2_cc_status_tx_callback+0x50>)
 8015dfe:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8015e02:	f04f 0200 	mov.w	r2, #0
 8015e06:	f04f 0300 	mov.w	r3, #0
 8015e0a:	f7ea fe4f 	bl	8000aac <__aeabi_dcmpeq>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d10d      	bne.n	8015e30 <can2_cc_status_tx_callback+0x3c>
 8015e14:	4b0b      	ldr	r3, [pc, #44]	; (8015e44 <can2_cc_status_tx_callback+0x50>)
 8015e16:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8015e1a:	f04f 0200 	mov.w	r2, #0
 8015e1e:	f04f 0300 	mov.w	r3, #0
 8015e22:	f7ea fe43 	bl	8000aac <__aeabi_dcmpeq>
 8015e26:	4603      	mov	r3, r0
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d001      	beq.n	8015e30 <can2_cc_status_tx_callback+0x3c>
 8015e2c:	2301      	movs	r3, #1
 8015e2e:	e000      	b.n	8015e32 <can2_cc_status_tx_callback+0x3e>
 8015e30:	2300      	movs	r3, #0
 8015e32:	b2da      	uxtb	r2, r3
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	701a      	strb	r2, [r3, #0]
	return 1;
 8015e38:	2301      	movs	r3, #1
}
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	3708      	adds	r7, #8
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}
 8015e42:	bf00      	nop
 8015e44:	2001e9f8 	.word	0x2001e9f8

08015e48 <can1_dbu_status_1_tx_callback>:

uint8_t can1_dbu_status_1_tx_callback(dbu_status_1_t* dbu_status_1) {
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b082      	sub	sp, #8
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
	dbu_status_1->activate_ts_button = SIM0_U.drive && !SIM0_U.charge;
 8015e50:	4b20      	ldr	r3, [pc, #128]	; (8015ed4 <can1_dbu_status_1_tx_callback+0x8c>)
 8015e52:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8015e56:	f04f 0200 	mov.w	r2, #0
 8015e5a:	f04f 0300 	mov.w	r3, #0
 8015e5e:	f7ea fe25 	bl	8000aac <__aeabi_dcmpeq>
 8015e62:	4603      	mov	r3, r0
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d10d      	bne.n	8015e84 <can1_dbu_status_1_tx_callback+0x3c>
 8015e68:	4b1a      	ldr	r3, [pc, #104]	; (8015ed4 <can1_dbu_status_1_tx_callback+0x8c>)
 8015e6a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8015e6e:	f04f 0200 	mov.w	r2, #0
 8015e72:	f04f 0300 	mov.w	r3, #0
 8015e76:	f7ea fe19 	bl	8000aac <__aeabi_dcmpeq>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d001      	beq.n	8015e84 <can1_dbu_status_1_tx_callback+0x3c>
 8015e80:	2301      	movs	r3, #1
 8015e82:	e000      	b.n	8015e86 <can1_dbu_status_1_tx_callback+0x3e>
 8015e84:	2300      	movs	r3, #0
 8015e86:	b2da      	uxtb	r2, r3
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	701a      	strb	r2, [r3, #0]
	dbu_status_1->ready_to_drive_button = SIM0_U.charge && SIM0_U.drive;
 8015e8c:	4b11      	ldr	r3, [pc, #68]	; (8015ed4 <can1_dbu_status_1_tx_callback+0x8c>)
 8015e8e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8015e92:	f04f 0200 	mov.w	r2, #0
 8015e96:	f04f 0300 	mov.w	r3, #0
 8015e9a:	f7ea fe07 	bl	8000aac <__aeabi_dcmpeq>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d10d      	bne.n	8015ec0 <can1_dbu_status_1_tx_callback+0x78>
 8015ea4:	4b0b      	ldr	r3, [pc, #44]	; (8015ed4 <can1_dbu_status_1_tx_callback+0x8c>)
 8015ea6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8015eaa:	f04f 0200 	mov.w	r2, #0
 8015eae:	f04f 0300 	mov.w	r3, #0
 8015eb2:	f7ea fdfb 	bl	8000aac <__aeabi_dcmpeq>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d101      	bne.n	8015ec0 <can1_dbu_status_1_tx_callback+0x78>
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	e000      	b.n	8015ec2 <can1_dbu_status_1_tx_callback+0x7a>
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	b2da      	uxtb	r2, r3
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	741a      	strb	r2, [r3, #16]
	return 1;
 8015ec8:	2301      	movs	r3, #1
}
 8015eca:	4618      	mov	r0, r3
 8015ecc:	3708      	adds	r7, #8
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	bd80      	pop	{r7, pc}
 8015ed2:	bf00      	nop
 8015ed4:	2001e9f8 	.word	0x2001e9f8

08015ed8 <can2_charger_config_rx_callback>:

void can2_charger_config_rx_callback(charger_config_t *charger_config) {
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b082      	sub	sp, #8
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
	SIM0_U.CurrentLimit = charger_config->msg_set_current_limit;
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ee6:	490b      	ldr	r1, [pc, #44]	; (8015f14 <can2_charger_config_rx_callback+0x3c>)
 8015ee8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	SIM0_U.VoltageLimit = charger_config->msg_set_voltage_limit;
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015ef2:	4908      	ldr	r1, [pc, #32]	; (8015f14 <can2_charger_config_rx_callback+0x3c>)
 8015ef4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	SIM0_U.EnableCharge = charger_config->msg_set_enabled;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	7a1b      	ldrb	r3, [r3, #8]
 8015efc:	4618      	mov	r0, r3
 8015efe:	f7ea faf3 	bl	80004e8 <__aeabi_ui2d>
 8015f02:	4602      	mov	r2, r0
 8015f04:	460b      	mov	r3, r1
 8015f06:	4903      	ldr	r1, [pc, #12]	; (8015f14 <can2_charger_config_rx_callback+0x3c>)
 8015f08:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8015f0c:	bf00      	nop
 8015f0e:	3708      	adds	r7, #8
 8015f10:	46bd      	mov	sp, r7
 8015f12:	bd80      	pop	{r7, pc}
 8015f14:	2001e9f8 	.word	0x2001e9f8

08015f18 <swap>:
#define _abc(a,b,c) _abcd(a,b,c,0)_abcd(a,b,c,1)_abcd(a,b,c,2)_abcd(a,b,c,3)_abcd(a,b,c,4)_abcd(a,b,c,5)_abcd(a,b,c,6)
#define _ab(a,b) _abc(a,b,0)_abc(a,b,1)_abc(a,b,2)
#define _a(a) _ab(a,0)_ab(a,1)_ab(a,2)
		_a(0)_a(1) };

void swap(uint8_t g) {
 8015f18:	b480      	push	{r7}
 8015f1a:	b085      	sub	sp, #20
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	4603      	mov	r3, r0
 8015f20:	71fb      	strb	r3, [r7, #7]
	uint8_t _I = sorted_indices[g];
 8015f22:	79fb      	ldrb	r3, [r7, #7]
 8015f24:	4a0a      	ldr	r2, [pc, #40]	; (8015f50 <swap+0x38>)
 8015f26:	5cd3      	ldrb	r3, [r2, r3]
 8015f28:	73fb      	strb	r3, [r7, #15]
	sorted_indices[g] = sorted_indices[g - 1];
 8015f2a:	79fb      	ldrb	r3, [r7, #7]
 8015f2c:	1e5a      	subs	r2, r3, #1
 8015f2e:	79fb      	ldrb	r3, [r7, #7]
 8015f30:	4907      	ldr	r1, [pc, #28]	; (8015f50 <swap+0x38>)
 8015f32:	5c89      	ldrb	r1, [r1, r2]
 8015f34:	4a06      	ldr	r2, [pc, #24]	; (8015f50 <swap+0x38>)
 8015f36:	54d1      	strb	r1, [r2, r3]
	sorted_indices[g - 1] = _I;
 8015f38:	79fb      	ldrb	r3, [r7, #7]
 8015f3a:	3b01      	subs	r3, #1
 8015f3c:	4904      	ldr	r1, [pc, #16]	; (8015f50 <swap+0x38>)
 8015f3e:	7bfa      	ldrb	r2, [r7, #15]
 8015f40:	54ca      	strb	r2, [r1, r3]
}
 8015f42:	bf00      	nop
 8015f44:	3714      	adds	r7, #20
 8015f46:	46bd      	mov	sp, r7
 8015f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4c:	4770      	bx	lr
 8015f4e:	bf00      	nop
 8015f50:	20000000 	.word	0x20000000

08015f54 <compare>:

uint8_t compare(uint8_t g) {
 8015f54:	b590      	push	{r4, r7, lr}
 8015f56:	b083      	sub	sp, #12
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	71fb      	strb	r3, [r7, #7]
	return cell_voltages[sorted_indices[g]] < cell_voltages[sorted_indices[g - 1]];
 8015f5e:	4b10      	ldr	r3, [pc, #64]	; (8015fa0 <compare+0x4c>)
 8015f60:	681a      	ldr	r2, [r3, #0]
 8015f62:	79fb      	ldrb	r3, [r7, #7]
 8015f64:	490f      	ldr	r1, [pc, #60]	; (8015fa4 <compare+0x50>)
 8015f66:	5ccb      	ldrb	r3, [r1, r3]
 8015f68:	00db      	lsls	r3, r3, #3
 8015f6a:	4413      	add	r3, r2
 8015f6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015f70:	4b0b      	ldr	r3, [pc, #44]	; (8015fa0 <compare+0x4c>)
 8015f72:	681a      	ldr	r2, [r3, #0]
 8015f74:	79fb      	ldrb	r3, [r7, #7]
 8015f76:	3b01      	subs	r3, #1
 8015f78:	4c0a      	ldr	r4, [pc, #40]	; (8015fa4 <compare+0x50>)
 8015f7a:	5ce3      	ldrb	r3, [r4, r3]
 8015f7c:	00db      	lsls	r3, r3, #3
 8015f7e:	4413      	add	r3, r2
 8015f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f84:	2401      	movs	r4, #1
 8015f86:	f7ea fd9b 	bl	8000ac0 <__aeabi_dcmplt>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d101      	bne.n	8015f94 <compare+0x40>
 8015f90:	2300      	movs	r3, #0
 8015f92:	461c      	mov	r4, r3
 8015f94:	b2e3      	uxtb	r3, r4
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	370c      	adds	r7, #12
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd90      	pop	{r4, r7, pc}
 8015f9e:	bf00      	nop
 8015fa0:	2001c16c 	.word	0x2001c16c
 8015fa4:	20000000 	.word	0x20000000

08015fa8 <gnome_sort>:

void gnome_sort() {
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b082      	sub	sp, #8
 8015fac:	af00      	add	r7, sp, #0
	uint8_t gnome = 0;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	71fb      	strb	r3, [r7, #7]
	while (gnome < 126) {
 8015fb2:	e014      	b.n	8015fde <gnome_sort+0x36>
		if ((gnome == 0) || compare(gnome)) {
 8015fb4:	79fb      	ldrb	r3, [r7, #7]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d006      	beq.n	8015fc8 <gnome_sort+0x20>
 8015fba:	79fb      	ldrb	r3, [r7, #7]
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	f7ff ffc9 	bl	8015f54 <compare>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d003      	beq.n	8015fd0 <gnome_sort+0x28>
			gnome++;
 8015fc8:	79fb      	ldrb	r3, [r7, #7]
 8015fca:	3301      	adds	r3, #1
 8015fcc:	71fb      	strb	r3, [r7, #7]
 8015fce:	e006      	b.n	8015fde <gnome_sort+0x36>
		} else {
			swap(gnome);
 8015fd0:	79fb      	ldrb	r3, [r7, #7]
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7ff ffa0 	bl	8015f18 <swap>
			gnome--;
 8015fd8:	79fb      	ldrb	r3, [r7, #7]
 8015fda:	3b01      	subs	r3, #1
 8015fdc:	71fb      	strb	r3, [r7, #7]
	while (gnome < 126) {
 8015fde:	79fb      	ldrb	r3, [r7, #7]
 8015fe0:	2b7d      	cmp	r3, #125	; 0x7d
 8015fe2:	d9e7      	bls.n	8015fb4 <gnome_sort+0xc>
		}
	}
}
 8015fe4:	bf00      	nop
 8015fe6:	bf00      	nop
 8015fe8:	3708      	adds	r7, #8
 8015fea:	46bd      	mov	sp, r7
 8015fec:	bd80      	pop	{r7, pc}
	...

08015ff0 <do_cell_balancing>:

uint8_t do_cell_balancing() {
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b082      	sub	sp, #8
 8015ff4:	af00      	add	r7, sp, #0
	if (xQueuePeek(cell_voltages_queue, &cell_voltages, 0)) {
 8015ff6:	4b19      	ldr	r3, [pc, #100]	; (801605c <do_cell_balancing+0x6c>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	4918      	ldr	r1, [pc, #96]	; (8016060 <do_cell_balancing+0x70>)
 8015ffe:	4618      	mov	r0, r3
 8016000:	f014 fd1c 	bl	802aa3c <xQueuePeek>
 8016004:	4603      	mov	r3, r0
 8016006:	2b00      	cmp	r3, #0
 8016008:	d023      	beq.n	8016052 <do_cell_balancing+0x62>
		gnome_sort();
 801600a:	f7ff ffcd 	bl	8015fa8 <gnome_sort>
		for (int i = 0; i < 126; i++) {
 801600e:	2300      	movs	r3, #0
 8016010:	607b      	str	r3, [r7, #4]
 8016012:	e009      	b.n	8016028 <do_cell_balancing+0x38>
			set_balance_ext(0, i, NULL);
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	b2db      	uxtb	r3, r3
 8016018:	2200      	movs	r2, #0
 801601a:	4619      	mov	r1, r3
 801601c:	2000      	movs	r0, #0
 801601e:	f001 fc0b 	bl	8017838 <set_balance_ext>
		for (int i = 0; i < 126; i++) {
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	3301      	adds	r3, #1
 8016026:	607b      	str	r3, [r7, #4]
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2b7d      	cmp	r3, #125	; 0x7d
 801602c:	ddf2      	ble.n	8016014 <do_cell_balancing+0x24>
		}
		for (int i = 0; i < 41; i++) {
 801602e:	2300      	movs	r3, #0
 8016030:	603b      	str	r3, [r7, #0]
 8016032:	e00b      	b.n	801604c <do_cell_balancing+0x5c>
			set_balance_ext(1, sorted_indices[i], NULL);
 8016034:	4a0b      	ldr	r2, [pc, #44]	; (8016064 <do_cell_balancing+0x74>)
 8016036:	683b      	ldr	r3, [r7, #0]
 8016038:	4413      	add	r3, r2
 801603a:	781b      	ldrb	r3, [r3, #0]
 801603c:	2200      	movs	r2, #0
 801603e:	4619      	mov	r1, r3
 8016040:	2001      	movs	r0, #1
 8016042:	f001 fbf9 	bl	8017838 <set_balance_ext>
		for (int i = 0; i < 41; i++) {
 8016046:	683b      	ldr	r3, [r7, #0]
 8016048:	3301      	adds	r3, #1
 801604a:	603b      	str	r3, [r7, #0]
 801604c:	683b      	ldr	r3, [r7, #0]
 801604e:	2b28      	cmp	r3, #40	; 0x28
 8016050:	ddf0      	ble.n	8016034 <do_cell_balancing+0x44>

		}
	}
	return 1;
 8016052:	2301      	movs	r3, #1
}
 8016054:	4618      	mov	r0, r3
 8016056:	3708      	adds	r7, #8
 8016058:	46bd      	mov	sp, r7
 801605a:	bd80      	pop	{r7, pc}
 801605c:	2001b838 	.word	0x2001b838
 8016060:	2001c16c 	.word	0x2001c16c
 8016064:	20000000 	.word	0x20000000

08016068 <end_cell_balancing>:

uint8_t end_cell_balancing() {
 8016068:	b580      	push	{r7, lr}
 801606a:	b082      	sub	sp, #8
 801606c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 126; i++) {
 801606e:	2300      	movs	r3, #0
 8016070:	607b      	str	r3, [r7, #4]
 8016072:	e009      	b.n	8016088 <end_cell_balancing+0x20>
		set_balance_ext(0, i, NULL);
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	b2db      	uxtb	r3, r3
 8016078:	2200      	movs	r2, #0
 801607a:	4619      	mov	r1, r3
 801607c:	2000      	movs	r0, #0
 801607e:	f001 fbdb 	bl	8017838 <set_balance_ext>
	for (int i = 0; i < 126; i++) {
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	3301      	adds	r3, #1
 8016086:	607b      	str	r3, [r7, #4]
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	2b7d      	cmp	r3, #125	; 0x7d
 801608c:	ddf2      	ble.n	8016074 <end_cell_balancing+0xc>
	}
	return 1;
 801608e:	2301      	movs	r3, #1
}
 8016090:	4618      	mov	r0, r3
 8016092:	3708      	adds	r7, #8
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}

08016098 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b082      	sub	sp, #8
 801609c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 801609e:	2300      	movs	r3, #0
 80160a0:	607b      	str	r3, [r7, #4]
 80160a2:	4b0c      	ldr	r3, [pc, #48]	; (80160d4 <MX_DMA_Init+0x3c>)
 80160a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160a6:	4a0b      	ldr	r2, [pc, #44]	; (80160d4 <MX_DMA_Init+0x3c>)
 80160a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80160ac:	6313      	str	r3, [r2, #48]	; 0x30
 80160ae:	4b09      	ldr	r3, [pc, #36]	; (80160d4 <MX_DMA_Init+0x3c>)
 80160b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80160b6:	607b      	str	r3, [r7, #4]
 80160b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80160ba:	2200      	movs	r2, #0
 80160bc:	2105      	movs	r1, #5
 80160be:	2038      	movs	r0, #56	; 0x38
 80160c0:	f010 f87e 	bl	80261c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80160c4:	2038      	movs	r0, #56	; 0x38
 80160c6:	f010 f897 	bl	80261f8 <HAL_NVIC_EnableIRQ>

}
 80160ca:	bf00      	nop
 80160cc:	3708      	adds	r7, #8
 80160ce:	46bd      	mov	sp, r7
 80160d0:	bd80      	pop	{r7, pc}
 80160d2:	bf00      	nop
 80160d4:	40023800 	.word	0x40023800

080160d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b08a      	sub	sp, #40	; 0x28
 80160dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80160de:	f107 0314 	add.w	r3, r7, #20
 80160e2:	2200      	movs	r2, #0
 80160e4:	601a      	str	r2, [r3, #0]
 80160e6:	605a      	str	r2, [r3, #4]
 80160e8:	609a      	str	r2, [r3, #8]
 80160ea:	60da      	str	r2, [r3, #12]
 80160ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80160ee:	2300      	movs	r3, #0
 80160f0:	613b      	str	r3, [r7, #16]
 80160f2:	4b5c      	ldr	r3, [pc, #368]	; (8016264 <MX_GPIO_Init+0x18c>)
 80160f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160f6:	4a5b      	ldr	r2, [pc, #364]	; (8016264 <MX_GPIO_Init+0x18c>)
 80160f8:	f043 0310 	orr.w	r3, r3, #16
 80160fc:	6313      	str	r3, [r2, #48]	; 0x30
 80160fe:	4b59      	ldr	r3, [pc, #356]	; (8016264 <MX_GPIO_Init+0x18c>)
 8016100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016102:	f003 0310 	and.w	r3, r3, #16
 8016106:	613b      	str	r3, [r7, #16]
 8016108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801610a:	2300      	movs	r3, #0
 801610c:	60fb      	str	r3, [r7, #12]
 801610e:	4b55      	ldr	r3, [pc, #340]	; (8016264 <MX_GPIO_Init+0x18c>)
 8016110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016112:	4a54      	ldr	r2, [pc, #336]	; (8016264 <MX_GPIO_Init+0x18c>)
 8016114:	f043 0304 	orr.w	r3, r3, #4
 8016118:	6313      	str	r3, [r2, #48]	; 0x30
 801611a:	4b52      	ldr	r3, [pc, #328]	; (8016264 <MX_GPIO_Init+0x18c>)
 801611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801611e:	f003 0304 	and.w	r3, r3, #4
 8016122:	60fb      	str	r3, [r7, #12]
 8016124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8016126:	2300      	movs	r3, #0
 8016128:	60bb      	str	r3, [r7, #8]
 801612a:	4b4e      	ldr	r3, [pc, #312]	; (8016264 <MX_GPIO_Init+0x18c>)
 801612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801612e:	4a4d      	ldr	r2, [pc, #308]	; (8016264 <MX_GPIO_Init+0x18c>)
 8016130:	f043 0301 	orr.w	r3, r3, #1
 8016134:	6313      	str	r3, [r2, #48]	; 0x30
 8016136:	4b4b      	ldr	r3, [pc, #300]	; (8016264 <MX_GPIO_Init+0x18c>)
 8016138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801613a:	f003 0301 	and.w	r3, r3, #1
 801613e:	60bb      	str	r3, [r7, #8]
 8016140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8016142:	2300      	movs	r3, #0
 8016144:	607b      	str	r3, [r7, #4]
 8016146:	4b47      	ldr	r3, [pc, #284]	; (8016264 <MX_GPIO_Init+0x18c>)
 8016148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801614a:	4a46      	ldr	r2, [pc, #280]	; (8016264 <MX_GPIO_Init+0x18c>)
 801614c:	f043 0302 	orr.w	r3, r3, #2
 8016150:	6313      	str	r3, [r2, #48]	; 0x30
 8016152:	4b44      	ldr	r3, [pc, #272]	; (8016264 <MX_GPIO_Init+0x18c>)
 8016154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016156:	f003 0302 	and.w	r3, r3, #2
 801615a:	607b      	str	r3, [r7, #4]
 801615c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin, GPIO_PIN_RESET);
 801615e:	2200      	movs	r2, #0
 8016160:	210e      	movs	r1, #14
 8016162:	4841      	ldr	r0, [pc, #260]	; (8016268 <MX_GPIO_Init+0x190>)
 8016164:	f010 fd62 	bl	8026c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 8016168:	2200      	movs	r2, #0
 801616a:	21e0      	movs	r1, #224	; 0xe0
 801616c:	483f      	ldr	r0, [pc, #252]	; (801626c <MX_GPIO_Init+0x194>)
 801616e:	f010 fd5d 	bl	8026c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin, GPIO_PIN_RESET);
 8016172:	2200      	movs	r2, #0
 8016174:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8016178:	483d      	ldr	r0, [pc, #244]	; (8016270 <MX_GPIO_Init+0x198>)
 801617a:	f010 fd57 	bl	8026c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin;
 801617e:	230e      	movs	r3, #14
 8016180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016182:	2301      	movs	r3, #1
 8016184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016186:	2300      	movs	r3, #0
 8016188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801618a:	2300      	movs	r3, #0
 801618c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801618e:	f107 0314 	add.w	r3, r7, #20
 8016192:	4619      	mov	r1, r3
 8016194:	4834      	ldr	r0, [pc, #208]	; (8016268 <MX_GPIO_Init+0x190>)
 8016196:	f010 fbad 	bl	80268f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIR_plus_closed_Pin|AIR_minus_closed_Pin|precharge_closed_Pin;
 801619a:	2370      	movs	r3, #112	; 0x70
 801619c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801619e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80161a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80161a4:	2300      	movs	r3, #0
 80161a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80161a8:	f107 0314 	add.w	r3, r7, #20
 80161ac:	4619      	mov	r1, r3
 80161ae:	482e      	ldr	r0, [pc, #184]	; (8016268 <MX_GPIO_Init+0x190>)
 80161b0:	f010 fba0 	bl	80268f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin;
 80161b4:	23e0      	movs	r3, #224	; 0xe0
 80161b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80161b8:	2301      	movs	r3, #1
 80161ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80161bc:	2300      	movs	r3, #0
 80161be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80161c0:	2300      	movs	r3, #0
 80161c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80161c4:	f107 0314 	add.w	r3, r7, #20
 80161c8:	4619      	mov	r1, r3
 80161ca:	4828      	ldr	r0, [pc, #160]	; (801626c <MX_GPIO_Init+0x194>)
 80161cc:	f010 fb92 	bl	80268f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin;
 80161d0:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 80161d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80161d6:	2301      	movs	r3, #1
 80161d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80161da:	2300      	movs	r3, #0
 80161dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80161de:	2300      	movs	r3, #0
 80161e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80161e2:	f107 0314 	add.w	r3, r7, #20
 80161e6:	4619      	mov	r1, r3
 80161e8:	4821      	ldr	r0, [pc, #132]	; (8016270 <MX_GPIO_Init+0x198>)
 80161ea:	f010 fb83 	bl	80268f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_probe_Pin;
 80161ee:	2302      	movs	r3, #2
 80161f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80161f2:	2300      	movs	r3, #0
 80161f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80161f6:	2300      	movs	r3, #0
 80161f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SC_probe_GPIO_Port, &GPIO_InitStruct);
 80161fa:	f107 0314 	add.w	r3, r7, #20
 80161fe:	4619      	mov	r1, r3
 8016200:	481c      	ldr	r0, [pc, #112]	; (8016274 <MX_GPIO_Init+0x19c>)
 8016202:	f010 fb77 	bl	80268f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMD_ok_Pin;
 8016206:	2304      	movs	r3, #4
 8016208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801620a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 801620e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016210:	2300      	movs	r3, #0
 8016212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMD_ok_GPIO_Port, &GPIO_InitStruct);
 8016214:	f107 0314 	add.w	r3, r7, #20
 8016218:	4619      	mov	r1, r3
 801621a:	4816      	ldr	r0, [pc, #88]	; (8016274 <MX_GPIO_Init+0x19c>)
 801621c:	f010 fb6a 	bl	80268f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AMS_error_latched_Pin|IMD_error_latched_Pin;
 8016220:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8016224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016226:	2300      	movs	r3, #0
 8016228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801622a:	2300      	movs	r3, #0
 801622c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801622e:	f107 0314 	add.w	r3, r7, #20
 8016232:	4619      	mov	r1, r3
 8016234:	480e      	ldr	r0, [pc, #56]	; (8016270 <MX_GPIO_Init+0x198>)
 8016236:	f010 fb5d 	bl	80268f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 801623a:	2200      	movs	r2, #0
 801623c:	2105      	movs	r1, #5
 801623e:	200a      	movs	r0, #10
 8016240:	f00f ffbe 	bl	80261c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8016244:	200a      	movs	r0, #10
 8016246:	f00f ffd7 	bl	80261f8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 801624a:	2200      	movs	r2, #0
 801624c:	2105      	movs	r1, #5
 801624e:	2017      	movs	r0, #23
 8016250:	f00f ffb6 	bl	80261c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8016254:	2017      	movs	r0, #23
 8016256:	f00f ffcf 	bl	80261f8 <HAL_NVIC_EnableIRQ>

}
 801625a:	bf00      	nop
 801625c:	3728      	adds	r7, #40	; 0x28
 801625e:	46bd      	mov	sp, r7
 8016260:	bd80      	pop	{r7, pc}
 8016262:	bf00      	nop
 8016264:	40023800 	.word	0x40023800
 8016268:	40021000 	.word	0x40021000
 801626c:	40020000 	.word	0x40020000
 8016270:	40020800 	.word	0x40020800
 8016274:	40020400 	.word	0x40020400

08016278 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

/* RELAY MONITORING */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8016278:	b590      	push	{r4, r7, lr}
 801627a:	b083      	sub	sp, #12
 801627c:	af00      	add	r7, sp, #0
 801627e:	4603      	mov	r3, r0
 8016280:	80fb      	strh	r3, [r7, #6]
#ifdef SIMULATION
	switch (GPIO_Pin) {
 8016282:	88fb      	ldrh	r3, [r7, #6]
 8016284:	2b40      	cmp	r3, #64	; 0x40
 8016286:	d00e      	beq.n	80162a6 <HAL_GPIO_EXTI_Callback+0x2e>
 8016288:	2b40      	cmp	r3, #64	; 0x40
 801628a:	dc32      	bgt.n	80162f2 <HAL_GPIO_EXTI_Callback+0x7a>
 801628c:	2b20      	cmp	r3, #32
 801628e:	d015      	beq.n	80162bc <HAL_GPIO_EXTI_Callback+0x44>
 8016290:	2b20      	cmp	r3, #32
 8016292:	dc2e      	bgt.n	80162f2 <HAL_GPIO_EXTI_Callback+0x7a>
 8016294:	2b04      	cmp	r3, #4
 8016296:	d002      	beq.n	801629e <HAL_GPIO_EXTI_Callback+0x26>
 8016298:	2b10      	cmp	r3, #16
 801629a:	d01b      	beq.n	80162d4 <HAL_GPIO_EXTI_Callback+0x5c>
			__raise_ams_error(ERROR_AIR_PLUS);
		}
		break;
	}
#endif
}
 801629c:	e029      	b.n	80162f2 <HAL_GPIO_EXTI_Callback+0x7a>
		__raise_imd_error(ERROR_IMD);
 801629e:	2002      	movs	r0, #2
 80162a0:	f000 fa74 	bl	801678c <__raise_imd_error>
		break;
 80162a4:	e025      	b.n	80162f2 <HAL_GPIO_EXTI_Callback+0x7a>
		if (get_precharge_ext() != get_set_precharge_ext()) {
 80162a6:	f001 fa57 	bl	8017758 <get_precharge_ext>
 80162aa:	4604      	mov	r4, r0
 80162ac:	f001 fa64 	bl	8017778 <get_set_precharge_ext>
 80162b0:	4603      	mov	r3, r0
 80162b2:	429c      	cmp	r4, r3
 80162b4:	d002      	beq.n	80162bc <HAL_GPIO_EXTI_Callback+0x44>
			__raise_ams_error(ERROR_PRECHARGE);
 80162b6:	202b      	movs	r0, #43	; 0x2b
 80162b8:	f000 fa46 	bl	8016748 <__raise_ams_error>
		if (get_air_minus_ext() != get_set_air_minus_ext()) {
 80162bc:	f001 fa18 	bl	80176f0 <get_air_minus_ext>
 80162c0:	4604      	mov	r4, r0
 80162c2:	f001 fa25 	bl	8017710 <get_set_air_minus_ext>
 80162c6:	4603      	mov	r3, r0
 80162c8:	429c      	cmp	r4, r3
 80162ca:	d00f      	beq.n	80162ec <HAL_GPIO_EXTI_Callback+0x74>
			__raise_ams_error(ERROR_AIR_MINUS);
 80162cc:	2029      	movs	r0, #41	; 0x29
 80162ce:	f000 fa3b 	bl	8016748 <__raise_ams_error>
		break;
 80162d2:	e00b      	b.n	80162ec <HAL_GPIO_EXTI_Callback+0x74>
		if (get_air_plus_ext() != get_set_air_plus_ext()) {
 80162d4:	f001 f9d8 	bl	8017688 <get_air_plus_ext>
 80162d8:	4604      	mov	r4, r0
 80162da:	f001 f9e5 	bl	80176a8 <get_set_air_plus_ext>
 80162de:	4603      	mov	r3, r0
 80162e0:	429c      	cmp	r4, r3
 80162e2:	d005      	beq.n	80162f0 <HAL_GPIO_EXTI_Callback+0x78>
			__raise_ams_error(ERROR_AIR_PLUS);
 80162e4:	202a      	movs	r0, #42	; 0x2a
 80162e6:	f000 fa2f 	bl	8016748 <__raise_ams_error>
		break;
 80162ea:	e001      	b.n	80162f0 <HAL_GPIO_EXTI_Callback+0x78>
		break;
 80162ec:	bf00      	nop
 80162ee:	e000      	b.n	80162f2 <HAL_GPIO_EXTI_Callback+0x7a>
		break;
 80162f0:	bf00      	nop
}
 80162f2:	bf00      	nop
 80162f4:	370c      	adds	r7, #12
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bd90      	pop	{r4, r7, pc}
	...

080162fc <main>:
		sizeof(ams_state_t), };

const queue_info error_queue_info = { .element_count = 1, .element_size =
		sizeof(error_t), };

int main() {
 80162fc:	b580      	push	{r7, lr}
 80162fe:	af00      	add	r7, sp, #0
	/* INSTRUMENTATE */
	SEGGER_SYSVIEW_Conf();
 8016300:	f7fe fd80 	bl	8014e04 <SEGGER_SYSVIEW_Conf>

	/* RESET PERIPHERALS, ETC. */
	HAL_Init();
 8016304:	f00e fa1c 	bl	8024740 <HAL_Init>

	/* CONFIGURE SYSTEM CLOCK */
	SystemClock_Config();
 8016308:	f000 f930 	bl	801656c <SystemClock_Config>

	/* INITIALZE PERIPHERALS */
	MX_GPIO_Init();
 801630c:	f7ff fee4 	bl	80160d8 <MX_GPIO_Init>
	MX_SPI2_Init();
 8016310:	f001 faae 	bl	8017870 <MX_SPI2_Init>
	MX_CAN1_Init();
 8016314:	f7ff f9f6 	bl	8015704 <MX_CAN1_Init>
	MX_CAN2_Init();
 8016318:	f7ff fa2c 	bl	8015774 <MX_CAN2_Init>
	MX_TIM1_Init();
 801631c:	f001 fc74 	bl	8017c08 <MX_TIM1_Init>
	MX_DMA_Init();
 8016320:	f7ff feba 	bl	8016098 <MX_DMA_Init>
	MX_ADC1_Init();
 8016324:	f7fe fea8 	bl	8015078 <MX_ADC1_Init>
	MX_TIM3_Init();
 8016328:	f001 fdaa 	bl	8017e80 <MX_TIM3_Init>
	MX_TIM2_Init();
 801632c:	f001 fd0c 	bl	8017d48 <MX_TIM2_Init>

	initialize_CAN(&hcan1, &hcan2);
 8016330:	4966      	ldr	r1, [pc, #408]	; (80164cc <main+0x1d0>)
 8016332:	4867      	ldr	r0, [pc, #412]	; (80164d0 <main+0x1d4>)
 8016334:	f7fd ff18 	bl	8014168 <initialize_CAN>
	initialize_LTC(&hspi2);
 8016338:	4866      	ldr	r0, [pc, #408]	; (80164d4 <main+0x1d8>)
 801633a:	f7fe f9eb 	bl	8014714 <initialize_LTC>

	/* Initialize kernel */
	osKernelInitialize();
 801633e:	f013 fd31 	bl	8029da4 <osKernelInitialize>

	/* INITIALIZE QUEUES */

	temperatures_queue = xQueueCreate(temperatures_queue_info.element_count,
 8016342:	2301      	movs	r3, #1
 8016344:	2220      	movs	r2, #32
 8016346:	4611      	mov	r1, r2
 8016348:	2200      	movs	r2, #0
 801634a:	4618      	mov	r0, r3
 801634c:	f014 f82c 	bl	802a3a8 <xQueueGenericCreate>
 8016350:	4603      	mov	r3, r0
 8016352:	4a61      	ldr	r2, [pc, #388]	; (80164d8 <main+0x1dc>)
 8016354:	6013      	str	r3, [r2, #0]
			temperatures_queue_info.element_size);

	accumulator_voltage_queue = xQueueCreate(
 8016356:	2301      	movs	r3, #1
 8016358:	2208      	movs	r2, #8
 801635a:	4611      	mov	r1, r2
 801635c:	2200      	movs	r2, #0
 801635e:	4618      	mov	r0, r3
 8016360:	f014 f822 	bl	802a3a8 <xQueueGenericCreate>
 8016364:	4603      	mov	r3, r0
 8016366:	4a5d      	ldr	r2, [pc, #372]	; (80164dc <main+0x1e0>)
 8016368:	6013      	str	r3, [r2, #0]
			accumulator_voltage_queue_info.element_count,
			accumulator_voltage_queue_info.element_size);

	vehicle_voltage_queue = xQueueCreate(
 801636a:	2301      	movs	r3, #1
 801636c:	2208      	movs	r2, #8
 801636e:	4611      	mov	r1, r2
 8016370:	2200      	movs	r2, #0
 8016372:	4618      	mov	r0, r3
 8016374:	f014 f818 	bl	802a3a8 <xQueueGenericCreate>
 8016378:	4603      	mov	r3, r0
 801637a:	4a59      	ldr	r2, [pc, #356]	; (80164e0 <main+0x1e4>)
 801637c:	6013      	str	r3, [r2, #0]
			vehicle_voltage_queue_info.element_count,
			vehicle_voltage_queue_info.element_size);

	accumulator_current_queue = xQueueCreate(
 801637e:	2301      	movs	r3, #1
 8016380:	2208      	movs	r2, #8
 8016382:	4611      	mov	r1, r2
 8016384:	2200      	movs	r2, #0
 8016386:	4618      	mov	r0, r3
 8016388:	f014 f80e 	bl	802a3a8 <xQueueGenericCreate>
 801638c:	4603      	mov	r3, r0
 801638e:	4a55      	ldr	r2, [pc, #340]	; (80164e4 <main+0x1e8>)
 8016390:	6013      	str	r3, [r2, #0]
			accumulator_current_queue_info.element_count,
			accumulator_current_queue_info.element_size);

	cell_voltages_queue = xQueueCreate(cell_voltages_queue_info.element_count,
 8016392:	2301      	movs	r3, #1
 8016394:	2204      	movs	r2, #4
 8016396:	4611      	mov	r1, r2
 8016398:	2200      	movs	r2, #0
 801639a:	4618      	mov	r0, r3
 801639c:	f014 f804 	bl	802a3a8 <xQueueGenericCreate>
 80163a0:	4603      	mov	r3, r0
 80163a2:	4a51      	ldr	r2, [pc, #324]	; (80164e8 <main+0x1ec>)
 80163a4:	6013      	str	r3, [r2, #0]
			cell_voltages_queue_info.element_size);

	cell_temperatures_queue = xQueueCreate(
 80163a6:	2301      	movs	r3, #1
 80163a8:	2204      	movs	r2, #4
 80163aa:	4611      	mov	r1, r2
 80163ac:	2200      	movs	r2, #0
 80163ae:	4618      	mov	r0, r3
 80163b0:	f013 fffa 	bl	802a3a8 <xQueueGenericCreate>
 80163b4:	4603      	mov	r3, r0
 80163b6:	4a4d      	ldr	r2, [pc, #308]	; (80164ec <main+0x1f0>)
 80163b8:	6013      	str	r3, [r2, #0]
			cell_temperatures_queue_info.element_count,
			cell_temperatures_queue_info.element_size);

	start_drive_queue = xQueueCreate(start_drive_queue_info.element_count,
 80163ba:	2301      	movs	r3, #1
 80163bc:	2201      	movs	r2, #1
 80163be:	4611      	mov	r1, r2
 80163c0:	2200      	movs	r2, #0
 80163c2:	4618      	mov	r0, r3
 80163c4:	f013 fff0 	bl	802a3a8 <xQueueGenericCreate>
 80163c8:	4603      	mov	r3, r0
 80163ca:	4a49      	ldr	r2, [pc, #292]	; (80164f0 <main+0x1f4>)
 80163cc:	6013      	str	r3, [r2, #0]
			start_drive_queue_info.element_size);

	start_charge_queue = xQueueCreate(start_charge_queue_info.element_count,
 80163ce:	2301      	movs	r3, #1
 80163d0:	2201      	movs	r2, #1
 80163d2:	4611      	mov	r1, r2
 80163d4:	2200      	movs	r2, #0
 80163d6:	4618      	mov	r0, r3
 80163d8:	f013 ffe6 	bl	802a3a8 <xQueueGenericCreate>
 80163dc:	4603      	mov	r3, r0
 80163de:	4a45      	ldr	r2, [pc, #276]	; (80164f4 <main+0x1f8>)
 80163e0:	6013      	str	r3, [r2, #0]
			start_charge_queue_info.element_size);

	start_balance_queue = xQueueCreate(start_balance_queue_info.element_count,
 80163e2:	2301      	movs	r3, #1
 80163e4:	2201      	movs	r2, #1
 80163e6:	4611      	mov	r1, r2
 80163e8:	2200      	movs	r2, #0
 80163ea:	4618      	mov	r0, r3
 80163ec:	f013 ffdc 	bl	802a3a8 <xQueueGenericCreate>
 80163f0:	4603      	mov	r3, r0
 80163f2:	4a41      	ldr	r2, [pc, #260]	; (80164f8 <main+0x1fc>)
 80163f4:	6013      	str	r3, [r2, #0]
			start_balance_queue_info.element_size);

	state_queue = xQueueCreate(state_queue_info.element_count,
 80163f6:	2301      	movs	r3, #1
 80163f8:	2201      	movs	r2, #1
 80163fa:	4611      	mov	r1, r2
 80163fc:	2200      	movs	r2, #0
 80163fe:	4618      	mov	r0, r3
 8016400:	f013 ffd2 	bl	802a3a8 <xQueueGenericCreate>
 8016404:	4603      	mov	r3, r0
 8016406:	4a3d      	ldr	r2, [pc, #244]	; (80164fc <main+0x200>)
 8016408:	6013      	str	r3, [r2, #0]
			state_queue_info.element_size);

	error_queue = xQueueCreate(error_queue_info.element_count,
 801640a:	2301      	movs	r3, #1
 801640c:	2201      	movs	r2, #1
 801640e:	4611      	mov	r1, r2
 8016410:	2200      	movs	r2, #0
 8016412:	4618      	mov	r0, r3
 8016414:	f013 ffc8 	bl	802a3a8 <xQueueGenericCreate>
 8016418:	4603      	mov	r3, r0
 801641a:	4a39      	ldr	r2, [pc, #228]	; (8016500 <main+0x204>)
 801641c:	6013      	str	r3, [r2, #0]
			error_queue_info.element_size);

	/* INITIALIZE TASKS */

	first_tick = 0.25 * TICK2HZ + osKernelGetTickCount(); // Wait for segger, etc
 801641e:	f013 fd0b 	bl	8029e38 <osKernelGetTickCount>
 8016422:	4603      	mov	r3, r0
 8016424:	4618      	mov	r0, r3
 8016426:	f7ea f85f 	bl	80004e8 <__aeabi_ui2d>
 801642a:	f04f 0200 	mov.w	r2, #0
 801642e:	4b35      	ldr	r3, [pc, #212]	; (8016504 <main+0x208>)
 8016430:	f7e9 ff1e 	bl	8000270 <__adddf3>
 8016434:	4602      	mov	r2, r0
 8016436:	460b      	mov	r3, r1
 8016438:	4610      	mov	r0, r2
 801643a:	4619      	mov	r1, r3
 801643c:	f7ea fba6 	bl	8000b8c <__aeabi_d2uiz>
 8016440:	4603      	mov	r3, r0
 8016442:	4a31      	ldr	r2, [pc, #196]	; (8016508 <main+0x20c>)
 8016444:	6013      	str	r3, [r2, #0]

	SM_task_handle = osThreadNew(start_SM_task, NULL, &SM_task_info.attributes);
 8016446:	4a31      	ldr	r2, [pc, #196]	; (801650c <main+0x210>)
 8016448:	2100      	movs	r1, #0
 801644a:	4831      	ldr	r0, [pc, #196]	; (8016510 <main+0x214>)
 801644c:	f013 fd09 	bl	8029e62 <osThreadNew>
 8016450:	4603      	mov	r3, r0
 8016452:	4a30      	ldr	r2, [pc, #192]	; (8016514 <main+0x218>)
 8016454:	6013      	str	r3, [r2, #0]

#ifdef SIMULATION
	SIM_task_handle = osThreadNew(start_SIM_task, NULL,
 8016456:	4a30      	ldr	r2, [pc, #192]	; (8016518 <main+0x21c>)
 8016458:	2100      	movs	r1, #0
 801645a:	4830      	ldr	r0, [pc, #192]	; (801651c <main+0x220>)
 801645c:	f013 fd01 	bl	8029e62 <osThreadNew>
 8016460:	4603      	mov	r3, r0
 8016462:	4a2f      	ldr	r2, [pc, #188]	; (8016520 <main+0x224>)
 8016464:	6013      	str	r3, [r2, #0]
			&SIM_task_info.attributes);
#endif

	CSE_task_handle = osThreadNew(start_CSE_task, NULL,
 8016466:	4a2f      	ldr	r2, [pc, #188]	; (8016524 <main+0x228>)
 8016468:	2100      	movs	r1, #0
 801646a:	482f      	ldr	r0, [pc, #188]	; (8016528 <main+0x22c>)
 801646c:	f013 fcf9 	bl	8029e62 <osThreadNew>
 8016470:	4603      	mov	r3, r0
 8016472:	4a2e      	ldr	r2, [pc, #184]	; (801652c <main+0x230>)
 8016474:	6013      	str	r3, [r2, #0]
			&CSE_task_info.attributes);

	COOL_task_handle = osThreadNew(start_COOL_task, NULL,
 8016476:	4a2e      	ldr	r2, [pc, #184]	; (8016530 <main+0x234>)
 8016478:	2100      	movs	r1, #0
 801647a:	482e      	ldr	r0, [pc, #184]	; (8016534 <main+0x238>)
 801647c:	f013 fcf1 	bl	8029e62 <osThreadNew>
 8016480:	4603      	mov	r3, r0
 8016482:	4a2d      	ldr	r2, [pc, #180]	; (8016538 <main+0x23c>)
 8016484:	6013      	str	r3, [r2, #0]
			&COOL_task_info.attributes);

	CAN_task_handle = osThreadNew(start_CAN_task, NULL,
 8016486:	4a2d      	ldr	r2, [pc, #180]	; (801653c <main+0x240>)
 8016488:	2100      	movs	r1, #0
 801648a:	482d      	ldr	r0, [pc, #180]	; (8016540 <main+0x244>)
 801648c:	f013 fce9 	bl	8029e62 <osThreadNew>
 8016490:	4603      	mov	r3, r0
 8016492:	4a2c      	ldr	r2, [pc, #176]	; (8016544 <main+0x248>)
 8016494:	6013      	str	r3, [r2, #0]
			&CAN_task_info.attributes);

	COM_task_handle = osThreadNew(start_COM_task, NULL,
 8016496:	4a2c      	ldr	r2, [pc, #176]	; (8016548 <main+0x24c>)
 8016498:	2100      	movs	r1, #0
 801649a:	482c      	ldr	r0, [pc, #176]	; (801654c <main+0x250>)
 801649c:	f013 fce1 	bl	8029e62 <osThreadNew>
 80164a0:	4603      	mov	r3, r0
 80164a2:	4a2b      	ldr	r2, [pc, #172]	; (8016550 <main+0x254>)
 80164a4:	6013      	str	r3, [r2, #0]
			&COM_task_info.attributes);

	IWDG_task_handle = osThreadNew(start_IWDG_task, NULL,
 80164a6:	4a2b      	ldr	r2, [pc, #172]	; (8016554 <main+0x258>)
 80164a8:	2100      	movs	r1, #0
 80164aa:	482b      	ldr	r0, [pc, #172]	; (8016558 <main+0x25c>)
 80164ac:	f013 fcd9 	bl	8029e62 <osThreadNew>
 80164b0:	4603      	mov	r3, r0
 80164b2:	4a2a      	ldr	r2, [pc, #168]	; (801655c <main+0x260>)
 80164b4:	6013      	str	r3, [r2, #0]
			&IWDG_task_info.attributes);

	error_handler_task_handle = osThreadNew(start_error_handler_task, NULL,
 80164b6:	4a2a      	ldr	r2, [pc, #168]	; (8016560 <main+0x264>)
 80164b8:	2100      	movs	r1, #0
 80164ba:	482a      	ldr	r0, [pc, #168]	; (8016564 <main+0x268>)
 80164bc:	f013 fcd1 	bl	8029e62 <osThreadNew>
 80164c0:	4603      	mov	r3, r0
 80164c2:	4a29      	ldr	r2, [pc, #164]	; (8016568 <main+0x26c>)
 80164c4:	6013      	str	r3, [r2, #0]
			&error_handler_task_info.attributes);

	/* Launch RTOS ! */
	osKernelStart();
 80164c6:	f013 fc91 	bl	8029dec <osKernelStart>

	for (;;)
 80164ca:	e7fe      	b.n	80164ca <main+0x1ce>
 80164cc:	2001c0b0 	.word	0x2001c0b0
 80164d0:	2001c0d8 	.word	0x2001c0d8
 80164d4:	2001c1a4 	.word	0x2001c1a4
 80164d8:	2001b844 	.word	0x2001b844
 80164dc:	2001b858 	.word	0x2001b858
 80164e0:	2001b854 	.word	0x2001b854
 80164e4:	2001b860 	.word	0x2001b860
 80164e8:	2001b838 	.word	0x2001b838
 80164ec:	2001b850 	.word	0x2001b850
 80164f0:	2001b83c 	.word	0x2001b83c
 80164f4:	2001b84c 	.word	0x2001b84c
 80164f8:	2001b85c 	.word	0x2001b85c
 80164fc:	2001b840 	.word	0x2001b840
 8016500:	2001b848 	.word	0x2001b848
 8016504:	406f4000 	.word	0x406f4000
 8016508:	2001c194 	.word	0x2001c194
 801650c:	080308b8 	.word	0x080308b8
 8016510:	080167d1 	.word	0x080167d1
 8016514:	2001c180 	.word	0x2001c180
 8016518:	080309a8 	.word	0x080309a8
 801651c:	08017379 	.word	0x08017379
 8016520:	2001c184 	.word	0x2001c184
 8016524:	08030918 	.word	0x08030918
 8016528:	08016f95 	.word	0x08016f95
 801652c:	2001c18c 	.word	0x2001c18c
 8016530:	080308e8 	.word	0x080308e8
 8016534:	080170c1 	.word	0x080170c1
 8016538:	2001c188 	.word	0x2001c188
 801653c:	08030948 	.word	0x08030948
 8016540:	08016ec1 	.word	0x08016ec1
 8016544:	2001c190 	.word	0x2001c190
 8016548:	08030978 	.word	0x08030978
 801654c:	08016b49 	.word	0x08016b49
 8016550:	2001c17c 	.word	0x2001c17c
 8016554:	08030a08 	.word	0x08030a08
 8016558:	080172e9 	.word	0x080172e9
 801655c:	2001c198 	.word	0x2001c198
 8016560:	080309d8 	.word	0x080309d8
 8016564:	0801721d 	.word	0x0801721d
 8016568:	2001c1a0 	.word	0x2001c1a0

0801656c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b094      	sub	sp, #80	; 0x50
 8016570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8016572:	f107 0320 	add.w	r3, r7, #32
 8016576:	2230      	movs	r2, #48	; 0x30
 8016578:	2100      	movs	r1, #0
 801657a:	4618      	mov	r0, r3
 801657c:	f018 f8b0 	bl	802e6e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8016580:	f107 030c 	add.w	r3, r7, #12
 8016584:	2200      	movs	r2, #0
 8016586:	601a      	str	r2, [r3, #0]
 8016588:	605a      	str	r2, [r3, #4]
 801658a:	609a      	str	r2, [r3, #8]
 801658c:	60da      	str	r2, [r3, #12]
 801658e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8016590:	2300      	movs	r3, #0
 8016592:	60bb      	str	r3, [r7, #8]
 8016594:	4b29      	ldr	r3, [pc, #164]	; (801663c <SystemClock_Config+0xd0>)
 8016596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016598:	4a28      	ldr	r2, [pc, #160]	; (801663c <SystemClock_Config+0xd0>)
 801659a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801659e:	6413      	str	r3, [r2, #64]	; 0x40
 80165a0:	4b26      	ldr	r3, [pc, #152]	; (801663c <SystemClock_Config+0xd0>)
 80165a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80165a8:	60bb      	str	r3, [r7, #8]
 80165aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80165ac:	2300      	movs	r3, #0
 80165ae:	607b      	str	r3, [r7, #4]
 80165b0:	4b23      	ldr	r3, [pc, #140]	; (8016640 <SystemClock_Config+0xd4>)
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	4a22      	ldr	r2, [pc, #136]	; (8016640 <SystemClock_Config+0xd4>)
 80165b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80165ba:	6013      	str	r3, [r2, #0]
 80165bc:	4b20      	ldr	r3, [pc, #128]	; (8016640 <SystemClock_Config+0xd4>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80165c4:	607b      	str	r3, [r7, #4]
 80165c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80165c8:	230a      	movs	r3, #10
 80165ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80165cc:	2301      	movs	r3, #1
 80165ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80165d0:	2310      	movs	r3, #16
 80165d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80165d4:	2301      	movs	r3, #1
 80165d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80165d8:	2302      	movs	r3, #2
 80165da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80165dc:	2300      	movs	r3, #0
 80165de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80165e0:	2308      	movs	r3, #8
 80165e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80165e4:	2380      	movs	r3, #128	; 0x80
 80165e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80165e8:	2302      	movs	r3, #2
 80165ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80165ec:	2304      	movs	r3, #4
 80165ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80165f0:	f107 0320 	add.w	r3, r7, #32
 80165f4:	4618      	mov	r0, r3
 80165f6:	f010 fb5b 	bl	8026cb0 <HAL_RCC_OscConfig>
 80165fa:	4603      	mov	r3, r0
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d001      	beq.n	8016604 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8016600:	f001 f828 	bl	8017654 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8016604:	230f      	movs	r3, #15
 8016606:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8016608:	2302      	movs	r3, #2
 801660a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801660c:	2300      	movs	r3, #0
 801660e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8016610:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8016614:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8016616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801661a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 801661c:	f107 030c 	add.w	r3, r7, #12
 8016620:	2104      	movs	r1, #4
 8016622:	4618      	mov	r0, r3
 8016624:	f010 fdbc 	bl	80271a0 <HAL_RCC_ClockConfig>
 8016628:	4603      	mov	r3, r0
 801662a:	2b00      	cmp	r3, #0
 801662c:	d001      	beq.n	8016632 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 801662e:	f001 f811 	bl	8017654 <Error_Handler>
  }
}
 8016632:	bf00      	nop
 8016634:	3750      	adds	r7, #80	; 0x50
 8016636:	46bd      	mov	sp, r7
 8016638:	bd80      	pop	{r7, pc}
 801663a:	bf00      	nop
 801663c:	40023800 	.word	0x40023800
 8016640:	40007000 	.word	0x40007000

08016644 <__wait_for_data>:
#define WAIT_FOR_ACCUMULATOR_VOLTAGE	0x0004
#define WAIT_FOR_ACCUMULATOR_CURRENT	0x0008
#define WAIT_FOR_VEHICLE_VOLTAGE		0x0010
#define WAIT_FOR_ALL 					0x001F

void __wait_for_data(uint16_t FLAGS) {
 8016644:	b580      	push	{r7, lr}
 8016646:	b088      	sub	sp, #32
 8016648:	af00      	add	r7, sp, #0
 801664a:	4603      	mov	r3, r0
 801664c:	80fb      	strh	r3, [r7, #6]
	uint8_t NOT_OK = FLAGS;
 801664e:	88fb      	ldrh	r3, [r7, #6]
 8016650:	77fb      	strb	r3, [r7, #31]

	double _d;
	double *_dptr;
	uint8_t _u8;
	while (NOT_OK) {
 8016652:	e067      	b.n	8016724 <__wait_for_data+0xe0>
		osDelay(2.00 * TICK2HZ);
 8016654:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8016658:	f013 fc95 	bl	8029f86 <osDelay>
		if (FLAGS & WAIT_FOR_CELL_VOLTAGES) {
 801665c:	88fb      	ldrh	r3, [r7, #6]
 801665e:	f003 0301 	and.w	r3, r3, #1
 8016662:	2b00      	cmp	r3, #0
 8016664:	d00e      	beq.n	8016684 <__wait_for_data+0x40>
			if (xQueuePeek(cell_voltages_queue, &_dptr, 0)) {
 8016666:	4b33      	ldr	r3, [pc, #204]	; (8016734 <__wait_for_data+0xf0>)
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	f107 010c 	add.w	r1, r7, #12
 801666e:	2200      	movs	r2, #0
 8016670:	4618      	mov	r0, r3
 8016672:	f014 f9e3 	bl	802aa3c <xQueuePeek>
 8016676:	4603      	mov	r3, r0
 8016678:	2b00      	cmp	r3, #0
 801667a:	d003      	beq.n	8016684 <__wait_for_data+0x40>
				NOT_OK &= ~WAIT_FOR_CELL_VOLTAGES;
 801667c:	7ffb      	ldrb	r3, [r7, #31]
 801667e:	f023 0301 	bic.w	r3, r3, #1
 8016682:	77fb      	strb	r3, [r7, #31]
			}
		}
		if (FLAGS & WAIT_FOR_CELL_TEMPERATURES) {
 8016684:	88fb      	ldrh	r3, [r7, #6]
 8016686:	f003 0302 	and.w	r3, r3, #2
 801668a:	2b00      	cmp	r3, #0
 801668c:	d00e      	beq.n	80166ac <__wait_for_data+0x68>
			if (xQueuePeek(cell_temperatures_queue, &_dptr, 0)) {
 801668e:	4b2a      	ldr	r3, [pc, #168]	; (8016738 <__wait_for_data+0xf4>)
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	f107 010c 	add.w	r1, r7, #12
 8016696:	2200      	movs	r2, #0
 8016698:	4618      	mov	r0, r3
 801669a:	f014 f9cf 	bl	802aa3c <xQueuePeek>
 801669e:	4603      	mov	r3, r0
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d003      	beq.n	80166ac <__wait_for_data+0x68>
				NOT_OK &= ~WAIT_FOR_CELL_TEMPERATURES;
 80166a4:	7ffb      	ldrb	r3, [r7, #31]
 80166a6:	f023 0302 	bic.w	r3, r3, #2
 80166aa:	77fb      	strb	r3, [r7, #31]
			}
		}
		if (FLAGS & WAIT_FOR_ACCUMULATOR_CURRENT) {
 80166ac:	88fb      	ldrh	r3, [r7, #6]
 80166ae:	f003 0308 	and.w	r3, r3, #8
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d00e      	beq.n	80166d4 <__wait_for_data+0x90>
			if (xQueuePeek(accumulator_current_queue, &_d, 0)) {
 80166b6:	4b21      	ldr	r3, [pc, #132]	; (801673c <__wait_for_data+0xf8>)
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	f107 0110 	add.w	r1, r7, #16
 80166be:	2200      	movs	r2, #0
 80166c0:	4618      	mov	r0, r3
 80166c2:	f014 f9bb 	bl	802aa3c <xQueuePeek>
 80166c6:	4603      	mov	r3, r0
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d003      	beq.n	80166d4 <__wait_for_data+0x90>
				NOT_OK &= ~WAIT_FOR_ACCUMULATOR_CURRENT;
 80166cc:	7ffb      	ldrb	r3, [r7, #31]
 80166ce:	f023 0308 	bic.w	r3, r3, #8
 80166d2:	77fb      	strb	r3, [r7, #31]
			}
		}
		if (FLAGS & WAIT_FOR_ACCUMULATOR_VOLTAGE) {
 80166d4:	88fb      	ldrh	r3, [r7, #6]
 80166d6:	f003 0304 	and.w	r3, r3, #4
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d00e      	beq.n	80166fc <__wait_for_data+0xb8>
			if (xQueuePeek(accumulator_voltage_queue, &_d, 0)) {
 80166de:	4b18      	ldr	r3, [pc, #96]	; (8016740 <__wait_for_data+0xfc>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	f107 0110 	add.w	r1, r7, #16
 80166e6:	2200      	movs	r2, #0
 80166e8:	4618      	mov	r0, r3
 80166ea:	f014 f9a7 	bl	802aa3c <xQueuePeek>
 80166ee:	4603      	mov	r3, r0
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d003      	beq.n	80166fc <__wait_for_data+0xb8>
				NOT_OK &= ~WAIT_FOR_ACCUMULATOR_VOLTAGE;
 80166f4:	7ffb      	ldrb	r3, [r7, #31]
 80166f6:	f023 0304 	bic.w	r3, r3, #4
 80166fa:	77fb      	strb	r3, [r7, #31]
			}
		}
		if (FLAGS & WAIT_FOR_VEHICLE_VOLTAGE) {
 80166fc:	88fb      	ldrh	r3, [r7, #6]
 80166fe:	f003 0310 	and.w	r3, r3, #16
 8016702:	2b00      	cmp	r3, #0
 8016704:	d00e      	beq.n	8016724 <__wait_for_data+0xe0>
			if (xQueuePeek(vehicle_voltage_queue, &_d, 0)) {
 8016706:	4b0f      	ldr	r3, [pc, #60]	; (8016744 <__wait_for_data+0x100>)
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	f107 0110 	add.w	r1, r7, #16
 801670e:	2200      	movs	r2, #0
 8016710:	4618      	mov	r0, r3
 8016712:	f014 f993 	bl	802aa3c <xQueuePeek>
 8016716:	4603      	mov	r3, r0
 8016718:	2b00      	cmp	r3, #0
 801671a:	d003      	beq.n	8016724 <__wait_for_data+0xe0>
				NOT_OK &= ~WAIT_FOR_VEHICLE_VOLTAGE;
 801671c:	7ffb      	ldrb	r3, [r7, #31]
 801671e:	f023 0310 	bic.w	r3, r3, #16
 8016722:	77fb      	strb	r3, [r7, #31]
	while (NOT_OK) {
 8016724:	7ffb      	ldrb	r3, [r7, #31]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d194      	bne.n	8016654 <__wait_for_data+0x10>
			}
		}
	}
}
 801672a:	bf00      	nop
 801672c:	bf00      	nop
 801672e:	3720      	adds	r7, #32
 8016730:	46bd      	mov	sp, r7
 8016732:	bd80      	pop	{r7, pc}
 8016734:	2001b838 	.word	0x2001b838
 8016738:	2001b850 	.word	0x2001b850
 801673c:	2001b860 	.word	0x2001b860
 8016740:	2001b858 	.word	0x2001b858
 8016744:	2001b854 	.word	0x2001b854

08016748 <__raise_ams_error>:

void __raise_ams_error(error_t error) {
 8016748:	b580      	push	{r7, lr}
 801674a:	b082      	sub	sp, #8
 801674c:	af00      	add	r7, sp, #0
 801674e:	4603      	mov	r3, r0
 8016750:	71fb      	strb	r3, [r7, #7]
	set_ams_error_ext(1);
 8016752:	2001      	movs	r0, #1
 8016754:	f001 f820 	bl	8017798 <set_ams_error_ext>
	__error = error;
 8016758:	79fa      	ldrb	r2, [r7, #7]
 801675a:	4b09      	ldr	r3, [pc, #36]	; (8016780 <__raise_ams_error+0x38>)
 801675c:	701a      	strb	r2, [r3, #0]
#ifdef STREAM_DATA
	SEGGER_SYSVIEW_PrintfHost("error %i", error);
 801675e:	79fb      	ldrb	r3, [r7, #7]
 8016760:	4619      	mov	r1, r3
 8016762:	4808      	ldr	r0, [pc, #32]	; (8016784 <__raise_ams_error+0x3c>)
 8016764:	f017 fee6 	bl	802e534 <SEGGER_SYSVIEW_PrintfHost>
#endif
	xQueueOverwrite(error_queue, &error);
 8016768:	4b07      	ldr	r3, [pc, #28]	; (8016788 <__raise_ams_error+0x40>)
 801676a:	6818      	ldr	r0, [r3, #0]
 801676c:	1df9      	adds	r1, r7, #7
 801676e:	2302      	movs	r3, #2
 8016770:	2200      	movs	r2, #0
 8016772:	f013 fe7d 	bl	802a470 <xQueueGenericSend>
}
 8016776:	bf00      	nop
 8016778:	3708      	adds	r7, #8
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}
 801677e:	bf00      	nop
 8016780:	2001b820 	.word	0x2001b820
 8016784:	08030438 	.word	0x08030438
 8016788:	2001b848 	.word	0x2001b848

0801678c <__raise_imd_error>:

void __raise_imd_error(error_t error) {
 801678c:	b580      	push	{r7, lr}
 801678e:	b082      	sub	sp, #8
 8016790:	af00      	add	r7, sp, #0
 8016792:	4603      	mov	r3, r0
 8016794:	71fb      	strb	r3, [r7, #7]
	set_imd_error_ext(1);
 8016796:	2001      	movs	r0, #1
 8016798:	f001 f81e 	bl	80177d8 <set_imd_error_ext>
	__error = error;
 801679c:	79fa      	ldrb	r2, [r7, #7]
 801679e:	4b09      	ldr	r3, [pc, #36]	; (80167c4 <__raise_imd_error+0x38>)
 80167a0:	701a      	strb	r2, [r3, #0]
#ifdef STREAM_DATA
	SEGGER_SYSVIEW_PrintfHost("error %i", error);
 80167a2:	79fb      	ldrb	r3, [r7, #7]
 80167a4:	4619      	mov	r1, r3
 80167a6:	4808      	ldr	r0, [pc, #32]	; (80167c8 <__raise_imd_error+0x3c>)
 80167a8:	f017 fec4 	bl	802e534 <SEGGER_SYSVIEW_PrintfHost>
#endif
	xQueueOverwrite(error_queue, &error);
 80167ac:	4b07      	ldr	r3, [pc, #28]	; (80167cc <__raise_imd_error+0x40>)
 80167ae:	6818      	ldr	r0, [r3, #0]
 80167b0:	1df9      	adds	r1, r7, #7
 80167b2:	2302      	movs	r3, #2
 80167b4:	2200      	movs	r2, #0
 80167b6:	f013 fe5b 	bl	802a470 <xQueueGenericSend>
}
 80167ba:	bf00      	nop
 80167bc:	3708      	adds	r7, #8
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}
 80167c2:	bf00      	nop
 80167c4:	2001b820 	.word	0x2001b820
 80167c8:	08030438 	.word	0x08030438
 80167cc:	2001b848 	.word	0x2001b848

080167d0 <start_SM_task>:

/* ENTER TASKS */
void start_SM_task(void *argument) {
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b094      	sub	sp, #80	; 0x50
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_Start();
 80167d8:	f017 fa16 	bl	802dc08 <SEGGER_SYSVIEW_Start>

	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80167dc:	4ba3      	ldr	r3, [pc, #652]	; (8016a6c <start_SM_task+0x29c>)
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t tick_increment = TICK2HZ * SM_task_info.periodicity;
 80167e2:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8016a70 <start_SM_task+0x2a0>
 80167e6:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8016a74 <start_SM_task+0x2a4>
 80167ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80167ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80167f2:	ee17 3a90 	vmov	r3, s15
 80167f6:	61fb      	str	r3, [r7, #28]

	/* Make task-specific structures */
	ams_inputs.Ts = SM_task_info.periodicity;
 80167f8:	4a9f      	ldr	r2, [pc, #636]	; (8016a78 <start_SM_task+0x2a8>)
 80167fa:	4ba0      	ldr	r3, [pc, #640]	; (8016a7c <start_SM_task+0x2ac>)
 80167fc:	63da      	str	r2, [r3, #60]	; 0x3c
	double minimum;
	double mean;
	double variance;
	double maximum;

	initialize_TEM(&htim3); // This has to be inside a task
 80167fe:	48a0      	ldr	r0, [pc, #640]	; (8016a80 <start_SM_task+0x2b0>)
 8016800:	f7fe fef6 	bl	80155f0 <initialize_TEM>
	initialize_IMD(&htim2); // This has to be inside a task
 8016804:	489f      	ldr	r0, [pc, #636]	; (8016a84 <start_SM_task+0x2b4>)
 8016806:	f7fd ff31 	bl	801466c <initialize_IMD>

	/* Wait until offset */
	next_tick += TICK2HZ * SM_task_info.offset;
 801680a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801680c:	ee07 3a90 	vmov	s15, r3
 8016810:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016814:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8016a88 <start_SM_task+0x2b8>
 8016818:	eddf 7a96 	vldr	s15, [pc, #600]	; 8016a74 <start_SM_task+0x2a4>
 801681c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016828:	ee17 3a90 	vmov	r3, s15
 801682c:	64fb      	str	r3, [r7, #76]	; 0x4c
	osDelayUntil(next_tick);
 801682e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8016830:	f013 fbc4 	bl	8029fbc <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 8016834:	201f      	movs	r0, #31
 8016836:	f7ff ff05 	bl	8016644 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */
		/* Receive every piece of data which is required to propagate the state machine */
		if (0x1 && xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 801683a:	4b94      	ldr	r3, [pc, #592]	; (8016a8c <start_SM_task+0x2bc>)
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	f107 010c 	add.w	r1, r7, #12
 8016842:	2200      	movs	r2, #0
 8016844:	4618      	mov	r0, r3
 8016846:	f014 f8f9 	bl	802aa3c <xQueuePeek>
 801684a:	4603      	mov	r3, r0
 801684c:	2b00      	cmp	r3, #0
 801684e:	f000 813b 	beq.w	8016ac8 <start_SM_task+0x2f8>
				&& xQueuePeek(accumulator_current_queue,
 8016852:	4b8f      	ldr	r3, [pc, #572]	; (8016a90 <start_SM_task+0x2c0>)
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	2200      	movs	r2, #0
 8016858:	498e      	ldr	r1, [pc, #568]	; (8016a94 <start_SM_task+0x2c4>)
 801685a:	4618      	mov	r0, r3
 801685c:	f014 f8ee 	bl	802aa3c <xQueuePeek>
 8016860:	4603      	mov	r3, r0
 8016862:	2b00      	cmp	r3, #0
 8016864:	f000 8130 	beq.w	8016ac8 <start_SM_task+0x2f8>
						&ams_inputs.accumulator_current, 0)
				&& xQueuePeek(accumulator_voltage_queue,
 8016868:	4b8b      	ldr	r3, [pc, #556]	; (8016a98 <start_SM_task+0x2c8>)
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	2200      	movs	r2, #0
 801686e:	4983      	ldr	r1, [pc, #524]	; (8016a7c <start_SM_task+0x2ac>)
 8016870:	4618      	mov	r0, r3
 8016872:	f014 f8e3 	bl	802aa3c <xQueuePeek>
 8016876:	4603      	mov	r3, r0
 8016878:	2b00      	cmp	r3, #0
 801687a:	f000 8125 	beq.w	8016ac8 <start_SM_task+0x2f8>
						&ams_inputs.accumulator_voltage, 0)
				&& xQueuePeek(vehicle_voltage_queue,
 801687e:	4b87      	ldr	r3, [pc, #540]	; (8016a9c <start_SM_task+0x2cc>)
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	2200      	movs	r2, #0
 8016884:	4986      	ldr	r1, [pc, #536]	; (8016aa0 <start_SM_task+0x2d0>)
 8016886:	4618      	mov	r0, r3
 8016888:	f014 f8d8 	bl	802aa3c <xQueuePeek>
 801688c:	4603      	mov	r3, r0
 801688e:	2b00      	cmp	r3, #0
 8016890:	f000 811a 	beq.w	8016ac8 <start_SM_task+0x2f8>
						&ams_inputs.vehicle_voltage, 0)) {

			/* Calculate mean, maximum and variance of cell voltages */
			{
				mean = 0;
 8016894:	f04f 0200 	mov.w	r2, #0
 8016898:	f04f 0300 	mov.w	r3, #0
 801689c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				variance = 0;
 80168a0:	f04f 0200 	mov.w	r2, #0
 80168a4:	f04f 0300 	mov.w	r3, #0
 80168a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				maximum = cell_voltages[0];
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				minimum = cell_voltages[0];
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				for (int i = 0; i < 126; i++) {
 80168c0:	2300      	movs	r3, #0
 80168c2:	627b      	str	r3, [r7, #36]	; 0x24
 80168c4:	e03a      	b.n	801693c <start_SM_task+0x16c>
					mean += cell_voltages[i];
 80168c6:	68fa      	ldr	r2, [r7, #12]
 80168c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ca:	00db      	lsls	r3, r3, #3
 80168cc:	4413      	add	r3, r2
 80168ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80168d6:	f7e9 fccb 	bl	8000270 <__adddf3>
 80168da:	4602      	mov	r2, r0
 80168dc:	460b      	mov	r3, r1
 80168de:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
					if (cell_voltages[i] > maximum) {
 80168e2:	68fa      	ldr	r2, [r7, #12]
 80168e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168e6:	00db      	lsls	r3, r3, #3
 80168e8:	4413      	add	r3, r2
 80168ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80168f2:	f7ea f8e5 	bl	8000ac0 <__aeabi_dcmplt>
 80168f6:	4603      	mov	r3, r0
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d007      	beq.n	801690c <start_SM_task+0x13c>
						maximum = cell_voltages[i];
 80168fc:	68fa      	ldr	r2, [r7, #12]
 80168fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016900:	00db      	lsls	r3, r3, #3
 8016902:	4413      	add	r3, r2
 8016904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016908:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
					}
					if (cell_voltages[i] < minimum) {
 801690c:	68fa      	ldr	r2, [r7, #12]
 801690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016910:	00db      	lsls	r3, r3, #3
 8016912:	4413      	add	r3, r2
 8016914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016918:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801691c:	f7ea f8ee 	bl	8000afc <__aeabi_dcmpgt>
 8016920:	4603      	mov	r3, r0
 8016922:	2b00      	cmp	r3, #0
 8016924:	d007      	beq.n	8016936 <start_SM_task+0x166>
						minimum = cell_voltages[i];
 8016926:	68fa      	ldr	r2, [r7, #12]
 8016928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801692a:	00db      	lsls	r3, r3, #3
 801692c:	4413      	add	r3, r2
 801692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016932:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				for (int i = 0; i < 126; i++) {
 8016936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016938:	3301      	adds	r3, #1
 801693a:	627b      	str	r3, [r7, #36]	; 0x24
 801693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801693e:	2b7d      	cmp	r3, #125	; 0x7d
 8016940:	ddc1      	ble.n	80168c6 <start_SM_task+0xf6>
					}
				}
				mean /= 126;
 8016942:	f04f 0200 	mov.w	r2, #0
 8016946:	4b57      	ldr	r3, [pc, #348]	; (8016aa4 <start_SM_task+0x2d4>)
 8016948:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801694c:	f7e9 ff70 	bl	8000830 <__aeabi_ddiv>
 8016950:	4602      	mov	r2, r0
 8016952:	460b      	mov	r3, r1
 8016954:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				for (int i = 0; i < 126; i++) {
 8016958:	2300      	movs	r3, #0
 801695a:	623b      	str	r3, [r7, #32]
 801695c:	e020      	b.n	80169a0 <start_SM_task+0x1d0>
					double svar = cell_voltages[i] - mean;
 801695e:	68fa      	ldr	r2, [r7, #12]
 8016960:	6a3b      	ldr	r3, [r7, #32]
 8016962:	00db      	lsls	r3, r3, #3
 8016964:	4413      	add	r3, r2
 8016966:	e9d3 0100 	ldrd	r0, r1, [r3]
 801696a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801696e:	f7e9 fc7d 	bl	800026c <__aeabi_dsub>
 8016972:	4602      	mov	r2, r0
 8016974:	460b      	mov	r3, r1
 8016976:	e9c7 2304 	strd	r2, r3, [r7, #16]
					variance += svar * svar;
 801697a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801697e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016982:	f7e9 fe2b 	bl	80005dc <__aeabi_dmul>
 8016986:	4602      	mov	r2, r0
 8016988:	460b      	mov	r3, r1
 801698a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801698e:	f7e9 fc6f 	bl	8000270 <__adddf3>
 8016992:	4602      	mov	r2, r0
 8016994:	460b      	mov	r3, r1
 8016996:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				for (int i = 0; i < 126; i++) {
 801699a:	6a3b      	ldr	r3, [r7, #32]
 801699c:	3301      	adds	r3, #1
 801699e:	623b      	str	r3, [r7, #32]
 80169a0:	6a3b      	ldr	r3, [r7, #32]
 80169a2:	2b7d      	cmp	r3, #125	; 0x7d
 80169a4:	dddb      	ble.n	801695e <start_SM_task+0x18e>
				}
			}

			/* Set the rest of the state machine inputs */
			ams_inputs.cell_voltages_variance = variance;
 80169a6:	4935      	ldr	r1, [pc, #212]	; (8016a7c <start_SM_task+0x2ac>)
 80169a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80169ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
			ams_inputs.maximum_cell_voltage = maximum;
 80169b0:	4932      	ldr	r1, [pc, #200]	; (8016a7c <start_SM_task+0x2ac>)
 80169b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80169b6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			ams_inputs.minimum_cell_voltage = minimum;
 80169ba:	4930      	ldr	r1, [pc, #192]	; (8016a7c <start_SM_task+0x2ac>)
 80169bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80169c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			ams_inputs.charger_is_awake = 1;
 80169c4:	4b2d      	ldr	r3, [pc, #180]	; (8016a7c <start_SM_task+0x2ac>)
 80169c6:	2201      	movs	r2, #1
 80169c8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			ams_inputs.ams_error = get_ams_error_latched_ext();
 80169cc:	f000 fef8 	bl	80177c0 <get_ams_error_latched_ext>
 80169d0:	4603      	mov	r3, r0
 80169d2:	461a      	mov	r2, r3
 80169d4:	4b29      	ldr	r3, [pc, #164]	; (8016a7c <start_SM_task+0x2ac>)
 80169d6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
			ams_inputs.imd_error = get_imd_error_latched_ext();
 80169da:	f000 ff11 	bl	8017800 <get_imd_error_latched_ext>
 80169de:	4603      	mov	r3, r0
 80169e0:	461a      	mov	r2, r3
 80169e2:	4b26      	ldr	r3, [pc, #152]	; (8016a7c <start_SM_task+0x2ac>)
 80169e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			ams_inputs.air_minus_closed = get_air_minus_ext();
 80169e8:	f000 fe82 	bl	80176f0 <get_air_minus_ext>
 80169ec:	4603      	mov	r3, r0
 80169ee:	461a      	mov	r2, r3
 80169f0:	4b22      	ldr	r3, [pc, #136]	; (8016a7c <start_SM_task+0x2ac>)
 80169f2:	721a      	strb	r2, [r3, #8]
			ams_inputs.air_plus_closed = get_air_plus_ext();
 80169f4:	f000 fe48 	bl	8017688 <get_air_plus_ext>
 80169f8:	4603      	mov	r3, r0
 80169fa:	461a      	mov	r2, r3
 80169fc:	4b1f      	ldr	r3, [pc, #124]	; (8016a7c <start_SM_task+0x2ac>)
 80169fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			ams_inputs.precharge_closed = get_precharge_ext();
 8016a02:	f000 fea9 	bl	8017758 <get_precharge_ext>
 8016a06:	4603      	mov	r3, r0
 8016a08:	461a      	mov	r2, r3
 8016a0a:	4b1c      	ldr	r3, [pc, #112]	; (8016a7c <start_SM_task+0x2ac>)
 8016a0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			ams_inputs.SC = get_sc_probe_ext();
 8016a10:	f000 ff02 	bl	8017818 <get_sc_probe_ext>
 8016a14:	4603      	mov	r3, r0
 8016a16:	461a      	mov	r2, r3
 8016a18:	4b18      	ldr	r3, [pc, #96]	; (8016a7c <start_SM_task+0x2ac>)
 8016a1a:	761a      	strb	r2, [r3, #24]

			/* Try to get the trigger signals */
			xQueueReceive(start_drive_queue, &ams_inputs.drive, 0);
 8016a1c:	4b22      	ldr	r3, [pc, #136]	; (8016aa8 <start_SM_task+0x2d8>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	2200      	movs	r2, #0
 8016a22:	4922      	ldr	r1, [pc, #136]	; (8016aac <start_SM_task+0x2dc>)
 8016a24:	4618      	mov	r0, r3
 8016a26:	f013 fef9 	bl	802a81c <xQueueReceive>
			xQueueReceive(start_charge_queue, &ams_inputs.charge, 0);
 8016a2a:	4b21      	ldr	r3, [pc, #132]	; (8016ab0 <start_SM_task+0x2e0>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	2200      	movs	r2, #0
 8016a30:	4920      	ldr	r1, [pc, #128]	; (8016ab4 <start_SM_task+0x2e4>)
 8016a32:	4618      	mov	r0, r3
 8016a34:	f013 fef2 	bl	802a81c <xQueueReceive>
			xQueueReceive(start_balance_queue, &ams_inputs.balance, 0);
 8016a38:	4b1f      	ldr	r3, [pc, #124]	; (8016ab8 <start_SM_task+0x2e8>)
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	2200      	movs	r2, #0
 8016a3e:	491f      	ldr	r1, [pc, #124]	; (8016abc <start_SM_task+0x2ec>)
 8016a40:	4618      	mov	r0, r3
 8016a42:	f013 feeb 	bl	802a81c <xQueueReceive>

			ams_state_t state = ams_function(); // _step
 8016a46:	f00d fdf7 	bl	8024638 <ams_function>
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	72fb      	strb	r3, [r7, #11]

#ifdef STREAM_DATA
			SEGGER_SYSVIEW_PrintfHost("state %i", state);
 8016a4e:	7afb      	ldrb	r3, [r7, #11]
 8016a50:	4619      	mov	r1, r3
 8016a52:	481b      	ldr	r0, [pc, #108]	; (8016ac0 <start_SM_task+0x2f0>)
 8016a54:	f017 fd6e 	bl	802e534 <SEGGER_SYSVIEW_PrintfHost>
#endif
			xQueueOverwrite(state_queue, &state);
 8016a58:	4b1a      	ldr	r3, [pc, #104]	; (8016ac4 <start_SM_task+0x2f4>)
 8016a5a:	6818      	ldr	r0, [r3, #0]
 8016a5c:	f107 010b 	add.w	r1, r7, #11
 8016a60:	2302      	movs	r3, #2
 8016a62:	2200      	movs	r2, #0
 8016a64:	f013 fd04 	bl	802a470 <xQueueGenericSend>
						&ams_inputs.vehicle_voltage, 0)) {
 8016a68:	e031      	b.n	8016ace <start_SM_task+0x2fe>
 8016a6a:	bf00      	nop
 8016a6c:	2001c194 	.word	0x2001c194
 8016a70:	3e4ccccd 	.word	0x3e4ccccd
 8016a74:	447a0000 	.word	0x447a0000
 8016a78:	3e4ccccd 	.word	0x3e4ccccd
 8016a7c:	2001c100 	.word	0x2001c100
 8016a80:	2001c244 	.word	0x2001c244
 8016a84:	2001c2d4 	.word	0x2001c2d4
 8016a88:	00000000 	.word	0x00000000
 8016a8c:	2001b838 	.word	0x2001b838
 8016a90:	2001b860 	.word	0x2001b860
 8016a94:	2001c150 	.word	0x2001c150
 8016a98:	2001b858 	.word	0x2001b858
 8016a9c:	2001b854 	.word	0x2001b854
 8016aa0:	2001c120 	.word	0x2001c120
 8016aa4:	405f8000 	.word	0x405f8000
 8016aa8:	2001b83c 	.word	0x2001b83c
 8016aac:	2001c158 	.word	0x2001c158
 8016ab0:	2001b84c 	.word	0x2001b84c
 8016ab4:	2001c159 	.word	0x2001c159
 8016ab8:	2001b85c 	.word	0x2001b85c
 8016abc:	2001c14a 	.word	0x2001c14a
 8016ac0:	08030444 	.word	0x08030444
 8016ac4:	2001b840 	.word	0x2001b840
		} else {
			__raise_ams_error(ERROR_AMS);
 8016ac8:	2003      	movs	r0, #3
 8016aca:	f7ff fe3d 	bl	8016748 <__raise_ams_error>
		}

		/* If any error was produced by the state machine (1xx), then raise them */
		if (ams_outputs.error) {
 8016ace:	4b1c      	ldr	r3, [pc, #112]	; (8016b40 <start_SM_task+0x370>)
 8016ad0:	7a1b      	ldrb	r3, [r3, #8]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d004      	beq.n	8016ae0 <start_SM_task+0x310>
			__raise_ams_error((error_t) ams_outputs.error);
 8016ad6:	4b1a      	ldr	r3, [pc, #104]	; (8016b40 <start_SM_task+0x370>)
 8016ad8:	7a1b      	ldrb	r3, [r3, #8]
 8016ada:	4618      	mov	r0, r3
 8016adc:	f7ff fe34 	bl	8016748 <__raise_ams_error>
		}

		charger.charger_current_limit = 6.6 * 2; 		// 2 * C
 8016ae0:	4918      	ldr	r1, [pc, #96]	; (8016b44 <start_SM_task+0x374>)
 8016ae2:	a313      	add	r3, pc, #76	; (adr r3, 8016b30 <start_SM_task+0x360>)
 8016ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ae8:	e9c1 2300 	strd	r2, r3, [r1]
		charger.charger_voltage_limit = 4.15 * 126;	// sought cell voltage times count of cells
 8016aec:	4915      	ldr	r1, [pc, #84]	; (8016b44 <start_SM_task+0x374>)
 8016aee:	a312      	add	r3, pc, #72	; (adr r3, 8016b38 <start_SM_task+0x368>)
 8016af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016af4:	e9c1 2302 	strd	r2, r3, [r1, #8]
		charger.enable_charger = ams_outputs.enable_charger;
 8016af8:	4b11      	ldr	r3, [pc, #68]	; (8016b40 <start_SM_task+0x370>)
 8016afa:	791a      	ldrb	r2, [r3, #4]
 8016afc:	4b11      	ldr	r3, [pc, #68]	; (8016b44 <start_SM_task+0x374>)
 8016afe:	741a      	strb	r2, [r3, #16]


		set_air_minus_ext(ams_outputs.close_air_minus);
 8016b00:	4b0f      	ldr	r3, [pc, #60]	; (8016b40 <start_SM_task+0x370>)
 8016b02:	799b      	ldrb	r3, [r3, #6]
 8016b04:	4618      	mov	r0, r3
 8016b06:	f000 fddf 	bl	80176c8 <set_air_minus_ext>
		set_air_plus_ext(ams_outputs.close_air_plus);
 8016b0a:	4b0d      	ldr	r3, [pc, #52]	; (8016b40 <start_SM_task+0x370>)
 8016b0c:	78db      	ldrb	r3, [r3, #3]
 8016b0e:	4618      	mov	r0, r3
 8016b10:	f000 fda6 	bl	8017660 <set_air_plus_ext>
		set_precharge_ext(ams_outputs.close_precharge);
 8016b14:	4b0a      	ldr	r3, [pc, #40]	; (8016b40 <start_SM_task+0x370>)
 8016b16:	79db      	ldrb	r3, [r3, #7]
 8016b18:	4618      	mov	r0, r3
 8016b1a:	f000 fe09 	bl	8017730 <set_precharge_ext>

		/* Wait until next period */
		next_tick += tick_increment;
 8016b1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016b20:	69fb      	ldr	r3, [r7, #28]
 8016b22:	4413      	add	r3, r2
 8016b24:	64fb      	str	r3, [r7, #76]	; 0x4c
		osDelayUntil(next_tick);
 8016b26:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8016b28:	f013 fa48 	bl	8029fbc <osDelayUntil>
		if (0x1 && xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 8016b2c:	e685      	b.n	801683a <start_SM_task+0x6a>
 8016b2e:	bf00      	nop
 8016b30:	66666666 	.word	0x66666666
 8016b34:	402a6666 	.word	0x402a6666
 8016b38:	33333334 	.word	0x33333334
 8016b3c:	40805733 	.word	0x40805733
 8016b40:	2001c160 	.word	0x2001c160
 8016b44:	2001b808 	.word	0x2001b808

08016b48 <start_COM_task>:
	}
}


void start_COM_task(void *argument) {
 8016b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b4c:	b099      	sub	sp, #100	; 0x64
 8016b4e:	af06      	add	r7, sp, #24
 8016b50:	60f8      	str	r0, [r7, #12]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016b52:	4bc9      	ldr	r3, [pc, #804]	; (8016e78 <start_COM_task+0x330>)
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t tick_increment = TICK2HZ * COM_task_info.periodicity;
 8016b58:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 8016e7c <start_COM_task+0x334>
 8016b5c:	eddf 7ac8 	vldr	s15, [pc, #800]	; 8016e80 <start_COM_task+0x338>
 8016b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016b68:	ee17 3a90 	vmov	r3, s15
 8016b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	error_t accumulator_current_error;
	uint8_t cell_data_valid;
	uint8_t accumulator_current_valid;

#ifdef STREAM_DATA
	uint8_t __k = 0;
 8016b6e:	2300      	movs	r3, #0
 8016b70:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
#endif

	const float voltage_time_constraint = 0.5;
 8016b74:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8016b78:	63bb      	str	r3, [r7, #56]	; 0x38
	const float temperature_time_constraint = 1.0;
 8016b7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8016b7e:	637b      	str	r3, [r7, #52]	; 0x34
	const float current_time_constraint = 0.5;
 8016b80:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8016b84:	633b      	str	r3, [r7, #48]	; 0x30

	uint16_t voltage_sample_constraint = 1
			+ (voltage_time_constraint / COM_task_info.periodicity);
 8016b86:	eddf 6abd 	vldr	s13, [pc, #756]	; 8016e7c <start_COM_task+0x334>
 8016b8a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016b96:	ee77 7a87 	vadd.f32	s15, s15, s14
	uint16_t voltage_sample_constraint = 1
 8016b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016b9e:	ee17 3a90 	vmov	r3, s15
 8016ba2:	85fb      	strh	r3, [r7, #46]	; 0x2e

	uint16_t temperature_sample_constraint = 1
			+ (temperature_time_constraint / COM_task_info.periodicity);
 8016ba4:	eddf 6ab5 	vldr	s13, [pc, #724]	; 8016e7c <start_COM_task+0x334>
 8016ba8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8016bac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016bb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016bb4:	ee77 7a87 	vadd.f32	s15, s15, s14
	uint16_t temperature_sample_constraint = 1
 8016bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016bbc:	ee17 3a90 	vmov	r3, s15
 8016bc0:	85bb      	strh	r3, [r7, #44]	; 0x2c

	uint16_t current_sample_constraint = 1
			+ (current_time_constraint / COM_task_info.periodicity);
 8016bc2:	eddf 6aae 	vldr	s13, [pc, #696]	; 8016e7c <start_COM_task+0x334>
 8016bc6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8016bca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016bce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016bd2:	ee77 7a87 	vadd.f32	s15, s15, s14
	uint16_t current_sample_constraint = 1
 8016bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016bda:	ee17 3a90 	vmov	r3, s15
 8016bde:	857b      	strh	r3, [r7, #42]	; 0x2a

	/* Wait until offset */
	next_tick += TICK2HZ * COM_task_info.offset;
 8016be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016be2:	ee07 3a90 	vmov	s15, r3
 8016be6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016bea:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8016e84 <start_COM_task+0x33c>
 8016bee:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8016e80 <start_COM_task+0x338>
 8016bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016bfe:	ee17 3a90 	vmov	r3, s15
 8016c02:	647b      	str	r3, [r7, #68]	; 0x44
	osDelayUntil(next_tick);
 8016c04:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016c06:	f013 f9d9 	bl	8029fbc <osDelayUntil>

	__wait_for_data(WAIT_FOR_ACCUMULATOR_CURRENT);
 8016c0a:	2008      	movs	r0, #8
 8016c0c:	f7ff fd1a 	bl	8016644 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */

		accumulator_current_valid = xQueuePeek(accumulator_current_queue,
 8016c10:	4b9d      	ldr	r3, [pc, #628]	; (8016e88 <start_COM_task+0x340>)
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	f107 0110 	add.w	r1, r7, #16
 8016c18:	2200      	movs	r2, #0
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f013 ff0e 	bl	802aa3c <xQueuePeek>
 8016c20:	4603      	mov	r3, r0
 8016c22:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				&accumulator_current, 0);

		/* Get new data over isoSPI */
		cell_data_valid = LTC_acquire_data(1);
 8016c26:	2001      	movs	r0, #1
 8016c28:	f7fd fe70 	bl	801490c <LTC_acquire_data>
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

		/* Get data from the program */
#ifdef SIMULATION
		cell_voltages = SIM0_Y.cell_voltages;
 8016c32:	4b96      	ldr	r3, [pc, #600]	; (8016e8c <start_COM_task+0x344>)
 8016c34:	623b      	str	r3, [r7, #32]
		cell_temperatures = SIM0_Y.cell_temperatures;
 8016c36:	4b96      	ldr	r3, [pc, #600]	; (8016e90 <start_COM_task+0x348>)
 8016c38:	61fb      	str	r3, [r7, #28]
		cell_data_valid = 1;
 8016c3a:	2301      	movs	r3, #1
 8016c3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		cell_voltages = LTC_voltages;
		cell_temperatures = LTC_temperatures;
#endif

		/* If new cell data is available, supply the system with it */
		if (cell_data_valid) {
 8016c40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d010      	beq.n	8016c6a <start_COM_task+0x122>
			xQueueOverwrite(cell_voltages_queue, &cell_voltages);
 8016c48:	4b92      	ldr	r3, [pc, #584]	; (8016e94 <start_COM_task+0x34c>)
 8016c4a:	6818      	ldr	r0, [r3, #0]
 8016c4c:	f107 0120 	add.w	r1, r7, #32
 8016c50:	2302      	movs	r3, #2
 8016c52:	2200      	movs	r2, #0
 8016c54:	f013 fc0c 	bl	802a470 <xQueueGenericSend>
			xQueueOverwrite(cell_temperatures_queue, &cell_temperatures);
 8016c58:	4b8f      	ldr	r3, [pc, #572]	; (8016e98 <start_COM_task+0x350>)
 8016c5a:	6818      	ldr	r0, [r3, #0]
 8016c5c:	f107 011c 	add.w	r1, r7, #28
 8016c60:	2302      	movs	r3, #2
 8016c62:	2200      	movs	r2, #0
 8016c64:	f013 fc04 	bl	802a470 <xQueueGenericSend>
 8016c68:	e002      	b.n	8016c70 <start_COM_task+0x128>
		} else {
			__raise_ams_error(ERROR_NO_LTC_DATA);
 8016c6a:	200a      	movs	r0, #10
 8016c6c:	f7ff fd6c 	bl	8016748 <__raise_ams_error>
		}

		/* Raise an error if cell voltage time constraints are not met,
		 * or if there is no data being received */
		cell_voltages_error = COM_voltages_ok(cell_voltages,
 8016c70:	6a3b      	ldr	r3, [r7, #32]
 8016c72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016c74:	4611      	mov	r1, r2
 8016c76:	4618      	mov	r0, r3
 8016c78:	f7fd fb16 	bl	80142a8 <COM_voltages_ok>
 8016c7c:	4603      	mov	r3, r0
 8016c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				voltage_sample_constraint);

		if (cell_voltages_error) {
 8016c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d004      	beq.n	8016c94 <start_COM_task+0x14c>
			__raise_ams_error(cell_voltages_error);
 8016c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c8e:	4618      	mov	r0, r3
 8016c90:	f7ff fd5a 	bl	8016748 <__raise_ams_error>
		}

		/* Raise an error if cell temperature time constraints are not met,
		 * or if there is no data being received */
		cell_temperatures_error = COM_temperatures_ok(cell_temperatures,
 8016c94:	69fa      	ldr	r2, [r7, #28]
 8016c96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	bf0c      	ite	eq
 8016c9c:	2301      	moveq	r3, #1
 8016c9e:	2300      	movne	r3, #0
 8016ca0:	b2db      	uxtb	r3, r3
 8016ca2:	b29b      	uxth	r3, r3
 8016ca4:	4619      	mov	r1, r3
 8016ca6:	4610      	mov	r0, r2
 8016ca8:	f7fd fb6a 	bl	8014380 <COM_temperatures_ok>
 8016cac:	4603      	mov	r3, r0
 8016cae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				!temperature_sample_constraint);

		if (cell_temperatures_error) {
 8016cb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d004      	beq.n	8016cc4 <start_COM_task+0x17c>
			__raise_ams_error(cell_temperatures_error);
 8016cba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	f7ff fd42 	bl	8016748 <__raise_ams_error>
		}

		/* If no new accumulator current was gathered, raise an error */
		if (!accumulator_current_valid) {
 8016cc4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d102      	bne.n	8016cd2 <start_COM_task+0x18a>
			__raise_ams_error(ERROR_NO_CURRENT_DATA);
 8016ccc:	200b      	movs	r0, #11
 8016cce:	f7ff fd3b 	bl	8016748 <__raise_ams_error>
		}

		/* Raise an error if accumulator current time constraints are not met,
		 * or if there is no data being received */
		accumulator_current_error = COM_current_ok(&accumulator_current,
 8016cd2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8016cd4:	f107 0310 	add.w	r3, r7, #16
 8016cd8:	4611      	mov	r1, r2
 8016cda:	4618      	mov	r0, r3
 8016cdc:	f7fd fbbc 	bl	8014458 <COM_current_ok>
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				current_sample_constraint);

		if (accumulator_current_error) {
 8016ce6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d004      	beq.n	8016cf8 <start_COM_task+0x1b0>
			__raise_ams_error(accumulator_current_error);
 8016cee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f7ff fd28 	bl	8016748 <__raise_ams_error>
		}


		 #ifdef STREAM_DATA
		 SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016cf8:	f897 4043 	ldrb.w	r4, [r7, #67]	; 0x43
		 (uint16_t) (10000 * cell_voltages[__k]),
 8016cfc:	6a3a      	ldr	r2, [r7, #32]
 8016cfe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016d02:	00db      	lsls	r3, r3, #3
 8016d04:	4413      	add	r3, r2
 8016d06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016d0a:	a359      	add	r3, pc, #356	; (adr r3, 8016e70 <start_COM_task+0x328>)
 8016d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d10:	f7e9 fc64 	bl	80005dc <__aeabi_dmul>
 8016d14:	4602      	mov	r2, r0
 8016d16:	460b      	mov	r3, r1
 8016d18:	4610      	mov	r0, r2
 8016d1a:	4619      	mov	r1, r3
 8016d1c:	f7e9 ff36 	bl	8000b8c <__aeabi_d2uiz>
 8016d20:	4603      	mov	r3, r0
 8016d22:	b29b      	uxth	r3, r3
		 SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016d24:	4698      	mov	r8, r3
		 (uint16_t) (10000 * cell_voltages[__k + 1]),
 8016d26:	6a3a      	ldr	r2, [r7, #32]
 8016d28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016d2c:	3301      	adds	r3, #1
 8016d2e:	00db      	lsls	r3, r3, #3
 8016d30:	4413      	add	r3, r2
 8016d32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016d36:	a34e      	add	r3, pc, #312	; (adr r3, 8016e70 <start_COM_task+0x328>)
 8016d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d3c:	f7e9 fc4e 	bl	80005dc <__aeabi_dmul>
 8016d40:	4602      	mov	r2, r0
 8016d42:	460b      	mov	r3, r1
 8016d44:	4610      	mov	r0, r2
 8016d46:	4619      	mov	r1, r3
 8016d48:	f7e9 ff20 	bl	8000b8c <__aeabi_d2uiz>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	b29b      	uxth	r3, r3
		 SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016d50:	4699      	mov	r9, r3
		 (uint16_t) (10000 * cell_voltages[__k + 2]),
 8016d52:	6a3a      	ldr	r2, [r7, #32]
 8016d54:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016d58:	3302      	adds	r3, #2
 8016d5a:	00db      	lsls	r3, r3, #3
 8016d5c:	4413      	add	r3, r2
 8016d5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016d62:	a343      	add	r3, pc, #268	; (adr r3, 8016e70 <start_COM_task+0x328>)
 8016d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d68:	f7e9 fc38 	bl	80005dc <__aeabi_dmul>
 8016d6c:	4602      	mov	r2, r0
 8016d6e:	460b      	mov	r3, r1
 8016d70:	4610      	mov	r0, r2
 8016d72:	4619      	mov	r1, r3
 8016d74:	f7e9 ff0a 	bl	8000b8c <__aeabi_d2uiz>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	b29b      	uxth	r3, r3
		 SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016d7c:	461d      	mov	r5, r3
		 (uint16_t) (10000 * cell_voltages[__k + 3]),
 8016d7e:	6a3a      	ldr	r2, [r7, #32]
 8016d80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016d84:	3303      	adds	r3, #3
 8016d86:	00db      	lsls	r3, r3, #3
 8016d88:	4413      	add	r3, r2
 8016d8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016d8e:	a338      	add	r3, pc, #224	; (adr r3, 8016e70 <start_COM_task+0x328>)
 8016d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d94:	f7e9 fc22 	bl	80005dc <__aeabi_dmul>
 8016d98:	4602      	mov	r2, r0
 8016d9a:	460b      	mov	r3, r1
 8016d9c:	4610      	mov	r0, r2
 8016d9e:	4619      	mov	r1, r3
 8016da0:	f7e9 fef4 	bl	8000b8c <__aeabi_d2uiz>
 8016da4:	4603      	mov	r3, r0
 8016da6:	b29b      	uxth	r3, r3
		 SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016da8:	461e      	mov	r6, r3
		 (uint16_t) (10000 * cell_voltages[__k + 4]),
 8016daa:	6a3a      	ldr	r2, [r7, #32]
 8016dac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016db0:	3304      	adds	r3, #4
 8016db2:	00db      	lsls	r3, r3, #3
 8016db4:	4413      	add	r3, r2
 8016db6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016dba:	a32d      	add	r3, pc, #180	; (adr r3, 8016e70 <start_COM_task+0x328>)
 8016dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dc0:	f7e9 fc0c 	bl	80005dc <__aeabi_dmul>
 8016dc4:	4602      	mov	r2, r0
 8016dc6:	460b      	mov	r3, r1
 8016dc8:	4610      	mov	r0, r2
 8016dca:	4619      	mov	r1, r3
 8016dcc:	f7e9 fede 	bl	8000b8c <__aeabi_d2uiz>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	b29b      	uxth	r3, r3
		 SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016dd4:	60bb      	str	r3, [r7, #8]
		 (uint16_t) (10000 * cell_voltages[__k + 5]),
 8016dd6:	6a3a      	ldr	r2, [r7, #32]
 8016dd8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016ddc:	3305      	adds	r3, #5
 8016dde:	00db      	lsls	r3, r3, #3
 8016de0:	4413      	add	r3, r2
 8016de2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016de6:	a322      	add	r3, pc, #136	; (adr r3, 8016e70 <start_COM_task+0x328>)
 8016de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dec:	f7e9 fbf6 	bl	80005dc <__aeabi_dmul>
 8016df0:	4602      	mov	r2, r0
 8016df2:	460b      	mov	r3, r1
 8016df4:	4610      	mov	r0, r2
 8016df6:	4619      	mov	r1, r3
 8016df8:	f7e9 fec8 	bl	8000b8c <__aeabi_d2uiz>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	b29b      	uxth	r3, r3
		 SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016e00:	607b      	str	r3, [r7, #4]
		 (uint16_t) (10000 * cell_voltages[__k + 6]));
 8016e02:	6a3a      	ldr	r2, [r7, #32]
 8016e04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016e08:	3306      	adds	r3, #6
 8016e0a:	00db      	lsls	r3, r3, #3
 8016e0c:	4413      	add	r3, r2
 8016e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016e12:	a317      	add	r3, pc, #92	; (adr r3, 8016e70 <start_COM_task+0x328>)
 8016e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e18:	f7e9 fbe0 	bl	80005dc <__aeabi_dmul>
 8016e1c:	4602      	mov	r2, r0
 8016e1e:	460b      	mov	r3, r1
 8016e20:	4610      	mov	r0, r2
 8016e22:	4619      	mov	r1, r3
 8016e24:	f7e9 feb2 	bl	8000b8c <__aeabi_d2uiz>
 8016e28:	4603      	mov	r3, r0
 8016e2a:	b29b      	uxth	r3, r3
		 SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016e2c:	9304      	str	r3, [sp, #16]
 8016e2e:	687a      	ldr	r2, [r7, #4]
 8016e30:	9203      	str	r2, [sp, #12]
 8016e32:	68bb      	ldr	r3, [r7, #8]
 8016e34:	9302      	str	r3, [sp, #8]
 8016e36:	9601      	str	r6, [sp, #4]
 8016e38:	9500      	str	r5, [sp, #0]
 8016e3a:	464b      	mov	r3, r9
 8016e3c:	4642      	mov	r2, r8
 8016e3e:	4621      	mov	r1, r4
 8016e40:	4816      	ldr	r0, [pc, #88]	; (8016e9c <start_COM_task+0x354>)
 8016e42:	f017 fb77 	bl	802e534 <SEGGER_SYSVIEW_PrintfHost>
		 __k = (__k + 7) % 126;
 8016e46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016e4a:	1dda      	adds	r2, r3, #7
 8016e4c:	4b14      	ldr	r3, [pc, #80]	; (8016ea0 <start_COM_task+0x358>)
 8016e4e:	fb83 1302 	smull	r1, r3, r3, r2
 8016e52:	4413      	add	r3, r2
 8016e54:	1199      	asrs	r1, r3, #6
 8016e56:	17d3      	asrs	r3, r2, #31
 8016e58:	1ac9      	subs	r1, r1, r3
 8016e5a:	460b      	mov	r3, r1
 8016e5c:	019b      	lsls	r3, r3, #6
 8016e5e:	1a5b      	subs	r3, r3, r1
 8016e60:	005b      	lsls	r3, r3, #1
 8016e62:	1ad1      	subs	r1, r2, r3
 8016e64:	460b      	mov	r3, r1
 8016e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		 #endif


		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8016e6a:	e01f      	b.n	8016eac <start_COM_task+0x364>
 8016e6c:	f3af 8000 	nop.w
 8016e70:	00000000 	.word	0x00000000
 8016e74:	40c38800 	.word	0x40c38800
 8016e78:	2001c194 	.word	0x2001c194
 8016e7c:	3e4ccccd 	.word	0x3e4ccccd
 8016e80:	447a0000 	.word	0x447a0000
 8016e84:	00000000 	.word	0x00000000
 8016e88:	2001b860 	.word	0x2001b860
 8016e8c:	2001dc40 	.word	0x2001dc40
 8016e90:	2001e810 	.word	0x2001e810
 8016e94:	2001b838 	.word	0x2001b838
 8016e98:	2001b850 	.word	0x2001b850
 8016e9c:	08030450 	.word	0x08030450
 8016ea0:	82082083 	.word	0x82082083
			next_tick += tick_increment;
 8016ea4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ea8:	4413      	add	r3, r2
 8016eaa:	647b      	str	r3, [r7, #68]	; 0x44
		while (next_tick < osKernelGetTickCount()) {
 8016eac:	f012 ffc4 	bl	8029e38 <osKernelGetTickCount>
 8016eb0:	4602      	mov	r2, r0
 8016eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016eb4:	4293      	cmp	r3, r2
 8016eb6:	d3f5      	bcc.n	8016ea4 <start_COM_task+0x35c>
		}
		osDelayUntil(next_tick);
 8016eb8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016eba:	f013 f87f 	bl	8029fbc <osDelayUntil>
		accumulator_current_valid = xQueuePeek(accumulator_current_queue,
 8016ebe:	e6a7      	b.n	8016c10 <start_COM_task+0xc8>

08016ec0 <start_CAN_task>:
	}
}

void start_CAN_task(void *argument) {
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b086      	sub	sp, #24
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016ec8:	4b2d      	ldr	r3, [pc, #180]	; (8016f80 <start_CAN_task+0xc0>)
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * CAN_task_info.periodicity;
 8016ece:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8016f84 <start_CAN_task+0xc4>
 8016ed2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8016f88 <start_CAN_task+0xc8>
 8016ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016ede:	ee17 3a90 	vmov	r3, s15
 8016ee2:	60fb      	str	r3, [r7, #12]

	/* Make task-specific structures */
	uint32_t k = 0;
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	613b      	str	r3, [r7, #16]

	/* Wait until offset */
	next_tick += TICK2HZ * CAN_task_info.offset;
 8016ee8:	697b      	ldr	r3, [r7, #20]
 8016eea:	ee07 3a90 	vmov	s15, r3
 8016eee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016ef2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8016f8c <start_CAN_task+0xcc>
 8016ef6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8016f88 <start_CAN_task+0xc8>
 8016efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f06:	ee17 3a90 	vmov	r3, s15
 8016f0a:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8016f0c:	6978      	ldr	r0, [r7, #20]
 8016f0e:	f013 f855 	bl	8029fbc <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		if (!(k % 2)) {
 8016f12:	693b      	ldr	r3, [r7, #16]
 8016f14:	f003 0301 	and.w	r3, r3, #1
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d101      	bne.n	8016f20 <start_CAN_task+0x60>
			can1_ams_status_1_transmit();
 8016f1c:	f7f9 f846 	bl	800ffac <can1_ams_status_1_transmit>
		}
		if (!(k % 2)) {
 8016f20:	693b      	ldr	r3, [r7, #16]
 8016f22:	f003 0301 	and.w	r3, r3, #1
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d101      	bne.n	8016f2e <start_CAN_task+0x6e>
			can1_ams_temperatures_transmit();
 8016f2a:	f7f9 f98b 	bl	8010244 <can1_ams_temperatures_transmit>
		}
		if (!(k % 3)) {
 8016f2e:	6939      	ldr	r1, [r7, #16]
 8016f30:	4b17      	ldr	r3, [pc, #92]	; (8016f90 <start_CAN_task+0xd0>)
 8016f32:	fba3 2301 	umull	r2, r3, r3, r1
 8016f36:	085a      	lsrs	r2, r3, #1
 8016f38:	4613      	mov	r3, r2
 8016f3a:	005b      	lsls	r3, r3, #1
 8016f3c:	4413      	add	r3, r2
 8016f3e:	1aca      	subs	r2, r1, r3
 8016f40:	2a00      	cmp	r2, #0
 8016f42:	d101      	bne.n	8016f48 <start_CAN_task+0x88>
			can2_charger_config_transmit();
 8016f44:	f7fb f9e4 	bl	8012310 <can2_charger_config_transmit>
		}
		if (!(k % 4)) {
 8016f48:	693b      	ldr	r3, [r7, #16]
 8016f4a:	f003 0303 	and.w	r3, r3, #3
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d103      	bne.n	8016f5a <start_CAN_task+0x9a>
			can1_ams_cell_temperatures_transmit();
 8016f52:	f7fa fc0d 	bl	8011770 <can1_ams_cell_temperatures_transmit>
			can1_ams_cell_voltages_transmit();
 8016f56:	f7f9 f9e1 	bl	801031c <can1_ams_cell_voltages_transmit>
		}
		k++;
 8016f5a:	693b      	ldr	r3, [r7, #16]
 8016f5c:	3301      	adds	r3, #1
 8016f5e:	613b      	str	r3, [r7, #16]
		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8016f60:	e003      	b.n	8016f6a <start_CAN_task+0xaa>
			next_tick += tick_increment;
 8016f62:	697a      	ldr	r2, [r7, #20]
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	4413      	add	r3, r2
 8016f68:	617b      	str	r3, [r7, #20]
		while (next_tick < osKernelGetTickCount()) {
 8016f6a:	f012 ff65 	bl	8029e38 <osKernelGetTickCount>
 8016f6e:	4602      	mov	r2, r0
 8016f70:	697b      	ldr	r3, [r7, #20]
 8016f72:	4293      	cmp	r3, r2
 8016f74:	d3f5      	bcc.n	8016f62 <start_CAN_task+0xa2>
		}
		osDelayUntil(next_tick);
 8016f76:	6978      	ldr	r0, [r7, #20]
 8016f78:	f013 f820 	bl	8029fbc <osDelayUntil>
		if (!(k % 2)) {
 8016f7c:	e7c9      	b.n	8016f12 <start_CAN_task+0x52>
 8016f7e:	bf00      	nop
 8016f80:	2001c194 	.word	0x2001c194
 8016f84:	3e4ccccd 	.word	0x3e4ccccd
 8016f88:	447a0000 	.word	0x447a0000
 8016f8c:	00000000 	.word	0x00000000
 8016f90:	aaaaaaab 	.word	0xaaaaaaab

08016f94 <start_CSE_task>:
	}
}

void start_CSE_task(void *argument) {
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b08c      	sub	sp, #48	; 0x30
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016f9c:	4b40      	ldr	r3, [pc, #256]	; (80170a0 <start_CSE_task+0x10c>)
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t tick_increment = TICK2HZ * CSE_task_info.periodicity;
 8016fa2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80170a4 <start_CSE_task+0x110>
 8016fa6:	eddf 7a40 	vldr	s15, [pc, #256]	; 80170a8 <start_CSE_task+0x114>
 8016faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016fb2:	ee17 3a90 	vmov	r3, s15
 8016fb6:	61bb      	str	r3, [r7, #24]

	/* Make task-specific structures */
	CSE_initialize();
 8016fb8:	f002 ffe6 	bl	8019f88 <CSE_initialize>
	double *cell_voltages;
	double accumulator_current;
	double mean_cell_voltage;

	/* Wait until offset */
	next_tick += TICK2HZ * CSE_task_info.offset;
 8016fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fbe:	ee07 3a90 	vmov	s15, r3
 8016fc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016fc6:	eddf 6a39 	vldr	s13, [pc, #228]	; 80170ac <start_CSE_task+0x118>
 8016fca:	eddf 7a37 	vldr	s15, [pc, #220]	; 80170a8 <start_CSE_task+0x114>
 8016fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016fda:	ee17 3a90 	vmov	r3, s15
 8016fde:	62fb      	str	r3, [r7, #44]	; 0x2c
	osDelayUntil(next_tick);
 8016fe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016fe2:	f012 ffeb 	bl	8029fbc <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 8016fe6:	201f      	movs	r0, #31
 8016fe8:	f7ff fb2c 	bl	8016644 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */

		/* Collect cell voltages and accumulator current -- then calcualte SOC/SOH */
		if (xQueuePeek(accumulator_current_queue, &accumulator_current, 0)
 8016fec:	4b30      	ldr	r3, [pc, #192]	; (80170b0 <start_CSE_task+0x11c>)
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	f107 0108 	add.w	r1, r7, #8
 8016ff4:	2200      	movs	r2, #0
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f013 fd20 	bl	802aa3c <xQueuePeek>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d043      	beq.n	801708a <start_CSE_task+0xf6>
				&& xQueuePeek(cell_voltages_queue, &cell_voltages, 0)) {
 8017002:	4b2c      	ldr	r3, [pc, #176]	; (80170b4 <start_CSE_task+0x120>)
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	f107 0114 	add.w	r1, r7, #20
 801700a:	2200      	movs	r2, #0
 801700c:	4618      	mov	r0, r3
 801700e:	f013 fd15 	bl	802aa3c <xQueuePeek>
 8017012:	4603      	mov	r3, r0
 8017014:	2b00      	cmp	r3, #0
 8017016:	d038      	beq.n	801708a <start_CSE_task+0xf6>
			/*
			 * Calculate the mean cell voltage -- if the periodicity is high enough
			 * one might calculate them all individually at some point (and/or do them interleaving)
			 */
			mean_cell_voltage = 0;
 8017018:	f04f 0200 	mov.w	r2, #0
 801701c:	f04f 0300 	mov.w	r3, #0
 8017020:	e9c7 2308 	strd	r2, r3, [r7, #32]
			for (int i = 0; i < 126; i++) {
 8017024:	2300      	movs	r3, #0
 8017026:	61fb      	str	r3, [r7, #28]
 8017028:	e010      	b.n	801704c <start_CSE_task+0xb8>
				mean_cell_voltage += cell_voltages[i];
 801702a:	697a      	ldr	r2, [r7, #20]
 801702c:	69fb      	ldr	r3, [r7, #28]
 801702e:	00db      	lsls	r3, r3, #3
 8017030:	4413      	add	r3, r2
 8017032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017036:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801703a:	f7e9 f919 	bl	8000270 <__adddf3>
 801703e:	4602      	mov	r2, r0
 8017040:	460b      	mov	r3, r1
 8017042:	e9c7 2308 	strd	r2, r3, [r7, #32]
			for (int i = 0; i < 126; i++) {
 8017046:	69fb      	ldr	r3, [r7, #28]
 8017048:	3301      	adds	r3, #1
 801704a:	61fb      	str	r3, [r7, #28]
 801704c:	69fb      	ldr	r3, [r7, #28]
 801704e:	2b7d      	cmp	r3, #125	; 0x7d
 8017050:	ddeb      	ble.n	801702a <start_CSE_task+0x96>
			}
			mean_cell_voltage /= 126;
 8017052:	f04f 0200 	mov.w	r2, #0
 8017056:	4b18      	ldr	r3, [pc, #96]	; (80170b8 <start_CSE_task+0x124>)
 8017058:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801705c:	f7e9 fbe8 	bl	8000830 <__aeabi_ddiv>
 8017060:	4602      	mov	r2, r0
 8017062:	460b      	mov	r3, r1
 8017064:	e9c7 2308 	strd	r2, r3, [r7, #32]

			CSE_U.current = accumulator_current;
 8017068:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801706c:	4913      	ldr	r1, [pc, #76]	; (80170bc <start_CSE_task+0x128>)
 801706e:	e9c1 2300 	strd	r2, r3, [r1]
			CSE_U.y = mean_cell_voltage;
 8017072:	4912      	ldr	r1, [pc, #72]	; (80170bc <start_CSE_task+0x128>)
 8017074:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8017078:	e9c1 2302 	strd	r2, r3, [r1, #8]

			CSE_step();
 801707c:	f001 fc80 	bl	8018980 <CSE_step>


		}

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8017080:	e003      	b.n	801708a <start_CSE_task+0xf6>
			next_tick += tick_increment;
 8017082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017084:	69bb      	ldr	r3, [r7, #24]
 8017086:	4413      	add	r3, r2
 8017088:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (next_tick < osKernelGetTickCount()) {
 801708a:	f012 fed5 	bl	8029e38 <osKernelGetTickCount>
 801708e:	4602      	mov	r2, r0
 8017090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017092:	4293      	cmp	r3, r2
 8017094:	d3f5      	bcc.n	8017082 <start_CSE_task+0xee>
		}
		osDelayUntil(next_tick);
 8017096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017098:	f012 ff90 	bl	8029fbc <osDelayUntil>
		if (xQueuePeek(accumulator_current_queue, &accumulator_current, 0)
 801709c:	e7a6      	b.n	8016fec <start_CSE_task+0x58>
 801709e:	bf00      	nop
 80170a0:	2001c194 	.word	0x2001c194
 80170a4:	3e4ccccd 	.word	0x3e4ccccd
 80170a8:	447a0000 	.word	0x447a0000
 80170ac:	00000000 	.word	0x00000000
 80170b0:	2001b860 	.word	0x2001b860
 80170b4:	2001b838 	.word	0x2001b838
 80170b8:	405f8000 	.word	0x405f8000
 80170bc:	2001c330 	.word	0x2001c330

080170c0 <start_COOL_task>:
	}
}

void start_COOL_task(void *argument) {
 80170c0:	b580      	push	{r7, lr}
 80170c2:	b098      	sub	sp, #96	; 0x60
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80170c8:	4b4b      	ldr	r3, [pc, #300]	; (80171f8 <start_COOL_task+0x138>)
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t tick_increment = TICK2HZ * COOL_task_info.periodicity;
 80170ce:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80171fc <start_COOL_task+0x13c>
 80170d2:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8017200 <start_COOL_task+0x140>
 80170d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80170da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80170de:	ee17 3a90 	vmov	r3, s15
 80170e2:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Make task-specific structures */
	PID_t PID;

	PID_initialize(&PID, // *ptr
 80170e4:	f107 030c 	add.w	r3, r7, #12
 80170e8:	eddf 2a46 	vldr	s5, [pc, #280]	; 8017204 <start_COOL_task+0x144>
 80170ec:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 80170f0:	eddf 1a45 	vldr	s3, [pc, #276]	; 8017208 <start_COOL_task+0x148>
 80170f4:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8017208 <start_COOL_task+0x148>
 80170f8:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80170fc:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8017100:	4618      	mov	r0, r3
 8017102:	f7fd fe2c 	bl	8014d5e <PID_initialize>
			0,			// Integral gain
			0,			// Differential gain
			20,			// Lower PID output bound
			100			// Upper PID output bound
			);
	FAN_initialize(&htim1);
 8017106:	4841      	ldr	r0, [pc, #260]	; (801720c <start_COOL_task+0x14c>)
 8017108:	f7fd f9f8 	bl	80144fc <FAN_initialize>

	double *cell_temperatures;
	double max_cell_temperature;

	/* Wait until offset */
	next_tick += TICK2HZ * COOL_task_info.offset;
 801710c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801710e:	ee07 3a90 	vmov	s15, r3
 8017112:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017116:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8017208 <start_COOL_task+0x148>
 801711a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8017200 <start_COOL_task+0x140>
 801711e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801712a:	ee17 3a90 	vmov	r3, s15
 801712e:	65fb      	str	r3, [r7, #92]	; 0x5c
	osDelayUntil(next_tick);
 8017130:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8017132:	f012 ff43 	bl	8029fbc <osDelayUntil>

	__wait_for_data(WAIT_FOR_CELL_TEMPERATURES);
 8017136:	2002      	movs	r0, #2
 8017138:	f7ff fa84 	bl	8016644 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */

		/* If the cell temperatures are received one may input them into the PID */
		if (xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)) {
 801713c:	4b34      	ldr	r3, [pc, #208]	; (8017210 <start_COOL_task+0x150>)
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	f107 0108 	add.w	r1, r7, #8
 8017144:	2200      	movs	r2, #0
 8017146:	4618      	mov	r0, r3
 8017148:	f013 fc78 	bl	802aa3c <xQueuePeek>
 801714c:	4603      	mov	r3, r0
 801714e:	2b00      	cmp	r3, #0
 8017150:	d048      	beq.n	80171e4 <start_COOL_task+0x124>
			/* Calculate the maximum cell temperature */
			max_cell_temperature = 0;
 8017152:	f04f 0200 	mov.w	r2, #0
 8017156:	f04f 0300 	mov.w	r3, #0
 801715a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			for (int i = 0; i < 126; i++) {
 801715e:	2300      	movs	r3, #0
 8017160:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017162:	e010      	b.n	8017186 <start_COOL_task+0xc6>
				max_cell_temperature += cell_temperatures[i];
 8017164:	68ba      	ldr	r2, [r7, #8]
 8017166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017168:	00db      	lsls	r3, r3, #3
 801716a:	4413      	add	r3, r2
 801716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017170:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8017174:	f7e9 f87c 	bl	8000270 <__adddf3>
 8017178:	4602      	mov	r2, r0
 801717a:	460b      	mov	r3, r1
 801717c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			for (int i = 0; i < 126; i++) {
 8017180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017182:	3301      	adds	r3, #1
 8017184:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017188:	2b7d      	cmp	r3, #125	; 0x7d
 801718a:	ddeb      	ble.n	8017164 <start_COOL_task+0xa4>
			}
			max_cell_temperature /= 126;
 801718c:	f04f 0200 	mov.w	r2, #0
 8017190:	4b20      	ldr	r3, [pc, #128]	; (8017214 <start_COOL_task+0x154>)
 8017192:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8017196:	f7e9 fb4b 	bl	8000830 <__aeabi_ddiv>
 801719a:	4602      	mov	r2, r0
 801719c:	460b      	mov	r3, r1
 801719e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

			/* Progress the PID and set the fan duty cycle accordingly */
			PID_progress(&PID, max_cell_temperature);
 80171a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80171a6:	f7e9 fd11 	bl	8000bcc <__aeabi_d2f>
 80171aa:	4602      	mov	r2, r0
 80171ac:	f107 030c 	add.w	r3, r7, #12
 80171b0:	ee00 2a10 	vmov	s0, r2
 80171b4:	4618      	mov	r0, r3
 80171b6:	f7fd fd63 	bl	8014c80 <PID_progress>
			FAN_duty_cycle(&htim1, PID.output);
 80171ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80171be:	eeb0 0a67 	vmov.f32	s0, s15
 80171c2:	4812      	ldr	r0, [pc, #72]	; (801720c <start_COOL_task+0x14c>)
 80171c4:	f7fd f9c4 	bl	8014550 <FAN_duty_cycle>

			pPID.duty_cycle = PID.output;
 80171c8:	697b      	ldr	r3, [r7, #20]
 80171ca:	4618      	mov	r0, r3
 80171cc:	f7e9 f9ae 	bl	800052c <__aeabi_f2d>
 80171d0:	4602      	mov	r2, r0
 80171d2:	460b      	mov	r3, r1
 80171d4:	4910      	ldr	r1, [pc, #64]	; (8017218 <start_COOL_task+0x158>)
 80171d6:	e9c1 2300 	strd	r2, r3, [r1]
		}

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 80171da:	e003      	b.n	80171e4 <start_COOL_task+0x124>
			next_tick += tick_increment;
 80171dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80171de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171e0:	4413      	add	r3, r2
 80171e2:	65fb      	str	r3, [r7, #92]	; 0x5c
		while (next_tick < osKernelGetTickCount()) {
 80171e4:	f012 fe28 	bl	8029e38 <osKernelGetTickCount>
 80171e8:	4602      	mov	r2, r0
 80171ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171ec:	4293      	cmp	r3, r2
 80171ee:	d3f5      	bcc.n	80171dc <start_COOL_task+0x11c>
		}
		osDelayUntil(next_tick);
 80171f0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80171f2:	f012 fee3 	bl	8029fbc <osDelayUntil>
		if (xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)) {
 80171f6:	e7a1      	b.n	801713c <start_COOL_task+0x7c>
 80171f8:	2001c194 	.word	0x2001c194
 80171fc:	3e4ccccd 	.word	0x3e4ccccd
 8017200:	447a0000 	.word	0x447a0000
 8017204:	42c80000 	.word	0x42c80000
 8017208:	00000000 	.word	0x00000000
 801720c:	2001c28c 	.word	0x2001c28c
 8017210:	2001b850 	.word	0x2001b850
 8017214:	405f8000 	.word	0x405f8000
 8017218:	2001b800 	.word	0x2001b800

0801721c <start_error_handler_task>:
	}
}

void start_error_handler_task(void *argument) {
 801721c:	b580      	push	{r7, lr}
 801721e:	b086      	sub	sp, #24
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8017224:	4b2a      	ldr	r3, [pc, #168]	; (80172d0 <start_error_handler_task+0xb4>)
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 801722a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80172d4 <start_error_handler_task+0xb8>
 801722e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80172d8 <start_error_handler_task+0xbc>
 8017232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801723a:	ee17 3a90 	vmov	r3, s15
 801723e:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	error_t error;

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 8017240:	697b      	ldr	r3, [r7, #20]
 8017242:	ee07 3a90 	vmov	s15, r3
 8017246:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801724a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80172dc <start_error_handler_task+0xc0>
 801724e:	eddf 7a22 	vldr	s15, [pc, #136]	; 80172d8 <start_error_handler_task+0xbc>
 8017252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017256:	ee77 7a27 	vadd.f32	s15, s14, s15
 801725a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801725e:	ee17 3a90 	vmov	r3, s15
 8017262:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8017264:	6978      	ldr	r0, [r7, #20]
 8017266:	f012 fea9 	bl	8029fbc <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		if (xQueueReceive(error_queue, &error, 0)) {
 801726a:	4b1d      	ldr	r3, [pc, #116]	; (80172e0 <start_error_handler_task+0xc4>)
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	f107 010f 	add.w	r1, r7, #15
 8017272:	2200      	movs	r2, #0
 8017274:	4618      	mov	r0, r3
 8017276:	f013 fad1 	bl	802a81c <xQueueReceive>
 801727a:	4603      	mov	r3, r0
 801727c:	2b00      	cmp	r3, #0
 801727e:	d00a      	beq.n	8017296 <start_error_handler_task+0x7a>
			switch (error) {
 8017280:	7bfb      	ldrb	r3, [r7, #15]
 8017282:	2b02      	cmp	r3, #2
 8017284:	d103      	bne.n	801728e <start_error_handler_task+0x72>
			case ERROR_IMD:
				set_imd_error_ext(1);
 8017286:	2001      	movs	r0, #1
 8017288:	f000 faa6 	bl	80177d8 <set_imd_error_ext>
				break;
 801728c:	e011      	b.n	80172b2 <start_error_handler_task+0x96>
			default:
				set_ams_error_ext(1);
 801728e:	2001      	movs	r0, #1
 8017290:	f000 fa82 	bl	8017798 <set_ams_error_ext>
				break;
 8017294:	e00d      	b.n	80172b2 <start_error_handler_task+0x96>
			}
		} else {
			set_ams_error_ext(0);
 8017296:	2000      	movs	r0, #0
 8017298:	f000 fa7e 	bl	8017798 <set_ams_error_ext>
			set_imd_error_ext(0);
 801729c:	2000      	movs	r0, #0
 801729e:	f000 fa9b 	bl	80177d8 <set_imd_error_ext>
			if (!get_ams_error_latched_ext()) {
 80172a2:	f000 fa8d 	bl	80177c0 <get_ams_error_latched_ext>
 80172a6:	4603      	mov	r3, r0
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d107      	bne.n	80172bc <start_error_handler_task+0xa0>
				__error = 0;
 80172ac:	4b0d      	ldr	r3, [pc, #52]	; (80172e4 <start_error_handler_task+0xc8>)
 80172ae:	2200      	movs	r2, #0
 80172b0:	701a      	strb	r2, [r3, #0]
			}
		}

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 80172b2:	e003      	b.n	80172bc <start_error_handler_task+0xa0>
			next_tick += tick_increment;
 80172b4:	697a      	ldr	r2, [r7, #20]
 80172b6:	693b      	ldr	r3, [r7, #16]
 80172b8:	4413      	add	r3, r2
 80172ba:	617b      	str	r3, [r7, #20]
		while (next_tick < osKernelGetTickCount()) {
 80172bc:	f012 fdbc 	bl	8029e38 <osKernelGetTickCount>
 80172c0:	4602      	mov	r2, r0
 80172c2:	697b      	ldr	r3, [r7, #20]
 80172c4:	4293      	cmp	r3, r2
 80172c6:	d3f5      	bcc.n	80172b4 <start_error_handler_task+0x98>
		}
		osDelayUntil(next_tick);
 80172c8:	6978      	ldr	r0, [r7, #20]
 80172ca:	f012 fe77 	bl	8029fbc <osDelayUntil>
		if (xQueueReceive(error_queue, &error, 0)) {
 80172ce:	e7cc      	b.n	801726a <start_error_handler_task+0x4e>
 80172d0:	2001c194 	.word	0x2001c194
 80172d4:	3e4ccccd 	.word	0x3e4ccccd
 80172d8:	447a0000 	.word	0x447a0000
 80172dc:	00000000 	.word	0x00000000
 80172e0:	2001b848 	.word	0x2001b848
 80172e4:	2001b820 	.word	0x2001b820

080172e8 <start_IWDG_task>:
	}
}

void start_IWDG_task(void *argument) {
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b084      	sub	sp, #16
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80172f0:	4b1b      	ldr	r3, [pc, #108]	; (8017360 <start_IWDG_task+0x78>)
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 80172f6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8017364 <start_IWDG_task+0x7c>
 80172fa:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8017368 <start_IWDG_task+0x80>
 80172fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017306:	ee17 3a90 	vmov	r3, s15
 801730a:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	ee07 3a90 	vmov	s15, r3
 8017312:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017316:	eddf 6a15 	vldr	s13, [pc, #84]	; 801736c <start_IWDG_task+0x84>
 801731a:	eddf 7a13 	vldr	s15, [pc, #76]	; 8017368 <start_IWDG_task+0x80>
 801731e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801732a:	ee17 3a90 	vmov	r3, s15
 801732e:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8017330:	68f8      	ldr	r0, [r7, #12]
 8017332:	f012 fe43 	bl	8029fbc <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 8017336:	201f      	movs	r0, #31
 8017338:	f7ff f984 	bl	8016644 <__wait_for_data>

	//initialize_IWDG(&hiwdg, IWDG_task_info.periodicity);

	for (;;) {
		/* Enter periodic behaviour */
		HAL_IWDG_Refresh(&hiwdg);
 801733c:	480c      	ldr	r0, [pc, #48]	; (8017370 <start_IWDG_task+0x88>)
 801733e:	f00f fca7 	bl	8026c90 <HAL_IWDG_Refresh>

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8017342:	e003      	b.n	801734c <start_IWDG_task+0x64>
			next_tick += tick_increment;
 8017344:	68fa      	ldr	r2, [r7, #12]
 8017346:	68bb      	ldr	r3, [r7, #8]
 8017348:	4413      	add	r3, r2
 801734a:	60fb      	str	r3, [r7, #12]
		while (next_tick < osKernelGetTickCount()) {
 801734c:	f012 fd74 	bl	8029e38 <osKernelGetTickCount>
 8017350:	4602      	mov	r2, r0
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	4293      	cmp	r3, r2
 8017356:	d3f5      	bcc.n	8017344 <start_IWDG_task+0x5c>
		}
		osDelayUntil(next_tick);
 8017358:	68f8      	ldr	r0, [r7, #12]
 801735a:	f012 fe2f 	bl	8029fbc <osDelayUntil>
		HAL_IWDG_Refresh(&hiwdg);
 801735e:	e7ed      	b.n	801733c <start_IWDG_task+0x54>
 8017360:	2001c194 	.word	0x2001c194
 8017364:	3e4ccccd 	.word	0x3e4ccccd
 8017368:	447a0000 	.word	0x447a0000
 801736c:	00000000 	.word	0x00000000
 8017370:	2001c170 	.word	0x2001c170
 8017374:	00000000 	.word	0x00000000

08017378 <start_SIM_task>:
	}
}

void start_SIM_task(void *argument) {
 8017378:	b5b0      	push	{r4, r5, r7, lr}
 801737a:	b088      	sub	sp, #32
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8017380:	4ba1      	ldr	r3, [pc, #644]	; (8017608 <start_SIM_task+0x290>)
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	61fb      	str	r3, [r7, #28]
	uint32_t tick_increment = TICK2HZ * SIM_task_info.periodicity;
 8017386:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 801760c <start_SIM_task+0x294>
 801738a:	eddf 7aa1 	vldr	s15, [pc, #644]	; 8017610 <start_SIM_task+0x298>
 801738e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017396:	ee17 3a90 	vmov	r3, s15
 801739a:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	SIM0_initialize();
 801739c:	f003 ff2c 	bl	801b1f8 <SIM0_initialize>
	uint16_t k = 0;
 80173a0:	2300      	movs	r3, #0
 80173a2:	837b      	strh	r3, [r7, #26]

	uint8_t SC = 1;
 80173a4:	2301      	movs	r3, #1
 80173a6:	73fb      	strb	r3, [r7, #15]
	uint8_t start_drive = 0;
 80173a8:	2300      	movs	r3, #0
 80173aa:	73bb      	strb	r3, [r7, #14]
	uint8_t start_charge = 1;
 80173ac:	2301      	movs	r3, #1
 80173ae:	737b      	strb	r3, [r7, #13]
	uint8_t start_balance = 0;
 80173b0:	2300      	movs	r3, #0
 80173b2:	733b      	strb	r3, [r7, #12]

	SIM0_P.Ts = SIM_task_info.periodicity;
 80173b4:	4b97      	ldr	r3, [pc, #604]	; (8017614 <start_SIM_task+0x29c>)
 80173b6:	4618      	mov	r0, r3
 80173b8:	f7e9 f8b8 	bl	800052c <__aeabi_f2d>
 80173bc:	4602      	mov	r2, r0
 80173be:	460b      	mov	r3, r1
 80173c0:	4995      	ldr	r1, [pc, #596]	; (8017618 <start_SIM_task+0x2a0>)
 80173c2:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
	SIM0_U.SC = SC;
 80173c6:	7bfb      	ldrb	r3, [r7, #15]
 80173c8:	4618      	mov	r0, r3
 80173ca:	f7e9 f88d 	bl	80004e8 <__aeabi_ui2d>
 80173ce:	4602      	mov	r2, r0
 80173d0:	460b      	mov	r3, r1
 80173d2:	4992      	ldr	r1, [pc, #584]	; (801761c <start_SIM_task+0x2a4>)
 80173d4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	SIM0_U.drive = start_drive ^ start_balance;
 80173d8:	7bba      	ldrb	r2, [r7, #14]
 80173da:	7b3b      	ldrb	r3, [r7, #12]
 80173dc:	4053      	eors	r3, r2
 80173de:	b2db      	uxtb	r3, r3
 80173e0:	4618      	mov	r0, r3
 80173e2:	f7e9 f891 	bl	8000508 <__aeabi_i2d>
 80173e6:	4602      	mov	r2, r0
 80173e8:	460b      	mov	r3, r1
 80173ea:	498c      	ldr	r1, [pc, #560]	; (801761c <start_SIM_task+0x2a4>)
 80173ec:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	SIM0_U.charge = start_charge ^ start_balance;
 80173f0:	7b7a      	ldrb	r2, [r7, #13]
 80173f2:	7b3b      	ldrb	r3, [r7, #12]
 80173f4:	4053      	eors	r3, r2
 80173f6:	b2db      	uxtb	r3, r3
 80173f8:	4618      	mov	r0, r3
 80173fa:	f7e9 f885 	bl	8000508 <__aeabi_i2d>
 80173fe:	4602      	mov	r2, r0
 8017400:	460b      	mov	r3, r1
 8017402:	4986      	ldr	r1, [pc, #536]	; (801761c <start_SIM_task+0x2a4>)
 8017404:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	SIM0_U.drive_current = 0;
 8017408:	4b84      	ldr	r3, [pc, #528]	; (801761c <start_SIM_task+0x2a4>)
 801740a:	f503 618b 	add.w	r1, r3, #1112	; 0x458
 801740e:	f04f 0200 	mov.w	r2, #0
 8017412:	f04f 0300 	mov.w	r3, #0
 8017416:	e9c1 2300 	strd	r2, r3, [r1]

	for(int i = 0; i < 126; i++) {
 801741a:	2300      	movs	r3, #0
 801741c:	617b      	str	r3, [r7, #20]
 801741e:	e07c      	b.n	801751a <start_SIM_task+0x1a2>
		float m = fabsf(cos(i) + cos(i + 1) + cos(i + 2) + cos(i + 3)) / 4;
 8017420:	6978      	ldr	r0, [r7, #20]
 8017422:	f7e9 f871 	bl	8000508 <__aeabi_i2d>
 8017426:	4602      	mov	r2, r0
 8017428:	460b      	mov	r3, r1
 801742a:	ec43 2b10 	vmov	d0, r2, r3
 801742e:	f017 fa27 	bl	802e880 <cos>
 8017432:	ec55 4b10 	vmov	r4, r5, d0
 8017436:	697b      	ldr	r3, [r7, #20]
 8017438:	3301      	adds	r3, #1
 801743a:	4618      	mov	r0, r3
 801743c:	f7e9 f864 	bl	8000508 <__aeabi_i2d>
 8017440:	4602      	mov	r2, r0
 8017442:	460b      	mov	r3, r1
 8017444:	ec43 2b10 	vmov	d0, r2, r3
 8017448:	f017 fa1a 	bl	802e880 <cos>
 801744c:	ec53 2b10 	vmov	r2, r3, d0
 8017450:	4620      	mov	r0, r4
 8017452:	4629      	mov	r1, r5
 8017454:	f7e8 ff0c 	bl	8000270 <__adddf3>
 8017458:	4602      	mov	r2, r0
 801745a:	460b      	mov	r3, r1
 801745c:	4614      	mov	r4, r2
 801745e:	461d      	mov	r5, r3
 8017460:	697b      	ldr	r3, [r7, #20]
 8017462:	3302      	adds	r3, #2
 8017464:	4618      	mov	r0, r3
 8017466:	f7e9 f84f 	bl	8000508 <__aeabi_i2d>
 801746a:	4602      	mov	r2, r0
 801746c:	460b      	mov	r3, r1
 801746e:	ec43 2b10 	vmov	d0, r2, r3
 8017472:	f017 fa05 	bl	802e880 <cos>
 8017476:	ec53 2b10 	vmov	r2, r3, d0
 801747a:	4620      	mov	r0, r4
 801747c:	4629      	mov	r1, r5
 801747e:	f7e8 fef7 	bl	8000270 <__adddf3>
 8017482:	4602      	mov	r2, r0
 8017484:	460b      	mov	r3, r1
 8017486:	4614      	mov	r4, r2
 8017488:	461d      	mov	r5, r3
 801748a:	697b      	ldr	r3, [r7, #20]
 801748c:	3303      	adds	r3, #3
 801748e:	4618      	mov	r0, r3
 8017490:	f7e9 f83a 	bl	8000508 <__aeabi_i2d>
 8017494:	4602      	mov	r2, r0
 8017496:	460b      	mov	r3, r1
 8017498:	ec43 2b10 	vmov	d0, r2, r3
 801749c:	f017 f9f0 	bl	802e880 <cos>
 80174a0:	ec53 2b10 	vmov	r2, r3, d0
 80174a4:	4620      	mov	r0, r4
 80174a6:	4629      	mov	r1, r5
 80174a8:	f7e8 fee2 	bl	8000270 <__adddf3>
 80174ac:	4602      	mov	r2, r0
 80174ae:	460b      	mov	r3, r1
 80174b0:	4610      	mov	r0, r2
 80174b2:	4619      	mov	r1, r3
 80174b4:	f7e9 fb8a 	bl	8000bcc <__aeabi_d2f>
 80174b8:	ee07 0a90 	vmov	s15, r0
 80174bc:	eeb0 7ae7 	vabs.f32	s14, s15
 80174c0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80174c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80174c8:	edc7 7a02 	vstr	s15, [r7, #8]
	    SIM0_DW.Memory_PreviousInput[i] = SIM0_P.cQur[0] * (1 - 0.4 * m);
 80174cc:	4b52      	ldr	r3, [pc, #328]	; (8017618 <start_SIM_task+0x2a0>)
 80174ce:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 80174d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80174d6:	68b8      	ldr	r0, [r7, #8]
 80174d8:	f7e9 f828 	bl	800052c <__aeabi_f2d>
 80174dc:	a348      	add	r3, pc, #288	; (adr r3, 8017600 <start_SIM_task+0x288>)
 80174de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174e2:	f7e9 f87b 	bl	80005dc <__aeabi_dmul>
 80174e6:	4602      	mov	r2, r0
 80174e8:	460b      	mov	r3, r1
 80174ea:	f04f 0000 	mov.w	r0, #0
 80174ee:	494c      	ldr	r1, [pc, #304]	; (8017620 <start_SIM_task+0x2a8>)
 80174f0:	f7e8 febc 	bl	800026c <__aeabi_dsub>
 80174f4:	4602      	mov	r2, r0
 80174f6:	460b      	mov	r3, r1
 80174f8:	4620      	mov	r0, r4
 80174fa:	4629      	mov	r1, r5
 80174fc:	f7e9 f86e 	bl	80005dc <__aeabi_dmul>
 8017500:	4602      	mov	r2, r0
 8017502:	460b      	mov	r3, r1
 8017504:	4847      	ldr	r0, [pc, #284]	; (8017624 <start_SIM_task+0x2ac>)
 8017506:	6979      	ldr	r1, [r7, #20]
 8017508:	f201 1103 	addw	r1, r1, #259	; 0x103
 801750c:	00c9      	lsls	r1, r1, #3
 801750e:	4401      	add	r1, r0
 8017510:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i < 126; i++) {
 8017514:	697b      	ldr	r3, [r7, #20]
 8017516:	3301      	adds	r3, #1
 8017518:	617b      	str	r3, [r7, #20]
 801751a:	697b      	ldr	r3, [r7, #20]
 801751c:	2b7d      	cmp	r3, #125	; 0x7d
 801751e:	f77f af7f 	ble.w	8017420 <start_SIM_task+0xa8>
	}

	/* Wait until offset */
	next_tick += TICK2HZ * SIM_task_info.offset;
 8017522:	69fb      	ldr	r3, [r7, #28]
 8017524:	ee07 3a90 	vmov	s15, r3
 8017528:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801752c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8017628 <start_SIM_task+0x2b0>
 8017530:	eddf 7a37 	vldr	s15, [pc, #220]	; 8017610 <start_SIM_task+0x298>
 8017534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017538:	ee77 7a27 	vadd.f32	s15, s14, s15
 801753c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017540:	ee17 3a90 	vmov	r3, s15
 8017544:	61fb      	str	r3, [r7, #28]
	osDelayUntil(next_tick);
 8017546:	69f8      	ldr	r0, [r7, #28]
 8017548:	f012 fd38 	bl	8029fbc <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		SIM0_step();
 801754c:	f002 fd40 	bl	8019fd0 <SIM0_step>
		if ((k % 5) == 0) {
 8017550:	8b7a      	ldrh	r2, [r7, #26]
 8017552:	4b36      	ldr	r3, [pc, #216]	; (801762c <start_SIM_task+0x2b4>)
 8017554:	fba3 1302 	umull	r1, r3, r3, r2
 8017558:	0899      	lsrs	r1, r3, #2
 801755a:	460b      	mov	r3, r1
 801755c:	009b      	lsls	r3, r3, #2
 801755e:	440b      	add	r3, r1
 8017560:	1ad3      	subs	r3, r2, r3
 8017562:	b29b      	uxth	r3, r3
 8017564:	2b00      	cmp	r3, #0
 8017566:	d101      	bne.n	801756c <start_SIM_task+0x1f4>
			can1_dbu_status_1_transmit();
 8017568:	f7f8 fe08 	bl	801017c <can1_dbu_status_1_transmit>
		}
		if ((k % 5) == 1) {
 801756c:	8b7a      	ldrh	r2, [r7, #26]
 801756e:	4b2f      	ldr	r3, [pc, #188]	; (801762c <start_SIM_task+0x2b4>)
 8017570:	fba3 1302 	umull	r1, r3, r3, r2
 8017574:	0899      	lsrs	r1, r3, #2
 8017576:	460b      	mov	r3, r1
 8017578:	009b      	lsls	r3, r3, #2
 801757a:	440b      	add	r3, r1
 801757c:	1ad3      	subs	r3, r2, r3
 801757e:	b29b      	uxth	r3, r3
 8017580:	2b01      	cmp	r3, #1
 8017582:	d101      	bne.n	8017588 <start_SIM_task+0x210>
			can2_cc_status_transmit();
 8017584:	f7fa ffb6 	bl	80124f4 <can2_cc_status_transmit>
		}
		if ((k % 5) == 2) {
 8017588:	8b7a      	ldrh	r2, [r7, #26]
 801758a:	4b28      	ldr	r3, [pc, #160]	; (801762c <start_SIM_task+0x2b4>)
 801758c:	fba3 1302 	umull	r1, r3, r3, r2
 8017590:	0899      	lsrs	r1, r3, #2
 8017592:	460b      	mov	r3, r1
 8017594:	009b      	lsls	r3, r3, #2
 8017596:	440b      	add	r3, r1
 8017598:	1ad3      	subs	r3, r2, r3
 801759a:	b29b      	uxth	r3, r3
 801759c:	2b02      	cmp	r3, #2
 801759e:	d101      	bne.n	80175a4 <start_SIM_task+0x22c>
			can2_ivt_msg_result_i_transmit();
 80175a0:	f7fa fdd8 	bl	8012154 <can2_ivt_msg_result_i_transmit>

		}
		if ((k % 5) == 3) {
 80175a4:	8b7a      	ldrh	r2, [r7, #26]
 80175a6:	4b21      	ldr	r3, [pc, #132]	; (801762c <start_SIM_task+0x2b4>)
 80175a8:	fba3 1302 	umull	r1, r3, r3, r2
 80175ac:	0899      	lsrs	r1, r3, #2
 80175ae:	460b      	mov	r3, r1
 80175b0:	009b      	lsls	r3, r3, #2
 80175b2:	440b      	add	r3, r1
 80175b4:	1ad3      	subs	r3, r2, r3
 80175b6:	b29b      	uxth	r3, r3
 80175b8:	2b03      	cmp	r3, #3
 80175ba:	d101      	bne.n	80175c0 <start_SIM_task+0x248>
			can2_ivt_msg_result_u1_transmit();
 80175bc:	f7fa fe14 	bl	80121e8 <can2_ivt_msg_result_u1_transmit>

		}
		if ((k % 5) == 4) {
 80175c0:	8b7a      	ldrh	r2, [r7, #26]
 80175c2:	4b1a      	ldr	r3, [pc, #104]	; (801762c <start_SIM_task+0x2b4>)
 80175c4:	fba3 1302 	umull	r1, r3, r3, r2
 80175c8:	0899      	lsrs	r1, r3, #2
 80175ca:	460b      	mov	r3, r1
 80175cc:	009b      	lsls	r3, r3, #2
 80175ce:	440b      	add	r3, r1
 80175d0:	1ad3      	subs	r3, r2, r3
 80175d2:	b29b      	uxth	r3, r3
 80175d4:	2b04      	cmp	r3, #4
 80175d6:	d101      	bne.n	80175dc <start_SIM_task+0x264>
			can2_ivt_msg_result_u3_transmit();
 80175d8:	f7fa fe50 	bl	801227c <can2_ivt_msg_result_u3_transmit>

		}
		k++;
 80175dc:	8b7b      	ldrh	r3, [r7, #26]
 80175de:	3301      	adds	r3, #1
 80175e0:	837b      	strh	r3, [r7, #26]

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 80175e2:	e003      	b.n	80175ec <start_SIM_task+0x274>
			next_tick += tick_increment;
 80175e4:	69fa      	ldr	r2, [r7, #28]
 80175e6:	693b      	ldr	r3, [r7, #16]
 80175e8:	4413      	add	r3, r2
 80175ea:	61fb      	str	r3, [r7, #28]
		while (next_tick < osKernelGetTickCount()) {
 80175ec:	f012 fc24 	bl	8029e38 <osKernelGetTickCount>
 80175f0:	4602      	mov	r2, r0
 80175f2:	69fb      	ldr	r3, [r7, #28]
 80175f4:	4293      	cmp	r3, r2
 80175f6:	d3f5      	bcc.n	80175e4 <start_SIM_task+0x26c>
		}
		osDelayUntil(next_tick);
 80175f8:	69f8      	ldr	r0, [r7, #28]
 80175fa:	f012 fcdf 	bl	8029fbc <osDelayUntil>
		SIM0_step();
 80175fe:	e7a5      	b.n	801754c <start_SIM_task+0x1d4>
 8017600:	9999999a 	.word	0x9999999a
 8017604:	3fd99999 	.word	0x3fd99999
 8017608:	2001c194 	.word	0x2001c194
 801760c:	3e4ccccd 	.word	0x3e4ccccd
 8017610:	447a0000 	.word	0x447a0000
 8017614:	3e4ccccd 	.word	0x3e4ccccd
 8017618:	20000360 	.word	0x20000360
 801761c:	2001e9f8 	.word	0x2001e9f8
 8017620:	3ff00000 	.word	0x3ff00000
 8017624:	2001c3a0 	.word	0x2001c3a0
 8017628:	00000000 	.word	0x00000000
 801762c:	cccccccd 	.word	0xcccccccd

08017630 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b082      	sub	sp, #8
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	4a04      	ldr	r2, [pc, #16]	; (8017650 <HAL_TIM_PeriodElapsedCallback+0x20>)
 801763e:	4293      	cmp	r3, r2
 8017640:	d101      	bne.n	8017646 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8017642:	f00d f89f 	bl	8024784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8017646:	bf00      	nop
 8017648:	3708      	adds	r7, #8
 801764a:	46bd      	mov	sp, r7
 801764c:	bd80      	pop	{r7, pc}
 801764e:	bf00      	nop
 8017650:	40000c00 	.word	0x40000c00

08017654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8017654:	b480      	push	{r7}
 8017656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8017658:	b672      	cpsid	i
}
 801765a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 801765c:	e7fe      	b.n	801765c <Error_Handler+0x8>
	...

08017660 <set_air_plus_ext>:
#include "main.h"

#include "canlib_callbacks.h"
#include "SIM0.h"

void set_air_plus_ext(uint8_t closed) {
 8017660:	b580      	push	{r7, lr}
 8017662:	b082      	sub	sp, #8
 8017664:	af00      	add	r7, sp, #0
 8017666:	4603      	mov	r3, r0
 8017668:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnableAirPlus = closed;
 801766a:	79fb      	ldrb	r3, [r7, #7]
 801766c:	4618      	mov	r0, r3
 801766e:	f7e8 ff3b 	bl	80004e8 <__aeabi_ui2d>
 8017672:	4602      	mov	r2, r0
 8017674:	460b      	mov	r3, r1
 8017676:	4903      	ldr	r1, [pc, #12]	; (8017684 <set_air_plus_ext+0x24>)
 8017678:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
#else
	HAL_GPIO_WritePin(enable_AIR_plus_GPIO_Port, enable_AIR_plus_Pin, closed);
#endif
}
 801767c:	bf00      	nop
 801767e:	3708      	adds	r7, #8
 8017680:	46bd      	mov	sp, r7
 8017682:	bd80      	pop	{r7, pc}
 8017684:	2001e9f8 	.word	0x2001e9f8

08017688 <get_air_plus_ext>:

uint8_t get_air_plus_ext() {
 8017688:	b580      	push	{r7, lr}
 801768a:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AIR_plus_closed;
 801768c:	4b05      	ldr	r3, [pc, #20]	; (80176a4 <get_air_plus_ext+0x1c>)
 801768e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8017692:	4610      	mov	r0, r2
 8017694:	4619      	mov	r1, r3
 8017696:	f7e9 fa79 	bl	8000b8c <__aeabi_d2uiz>
 801769a:	4603      	mov	r3, r0
 801769c:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(AIR_plus_closed_GPIO_Port, AIR_plus_closed_Pin);
#endif
}
 801769e:	4618      	mov	r0, r3
 80176a0:	bd80      	pop	{r7, pc}
 80176a2:	bf00      	nop
 80176a4:	2001dc00 	.word	0x2001dc00

080176a8 <get_set_air_plus_ext>:

uint8_t get_set_air_plus_ext() {
 80176a8:	b580      	push	{r7, lr}
 80176aa:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_U.EnableAirPlus;
 80176ac:	4b05      	ldr	r3, [pc, #20]	; (80176c4 <get_set_air_plus_ext+0x1c>)
 80176ae:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80176b2:	4610      	mov	r0, r2
 80176b4:	4619      	mov	r1, r3
 80176b6:	f7e9 fa69 	bl	8000b8c <__aeabi_d2uiz>
 80176ba:	4603      	mov	r3, r0
 80176bc:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(enable_AIR_plus_GPIO_Port, enable_AIR_plus_Pin);
#endif
}
 80176be:	4618      	mov	r0, r3
 80176c0:	bd80      	pop	{r7, pc}
 80176c2:	bf00      	nop
 80176c4:	2001e9f8 	.word	0x2001e9f8

080176c8 <set_air_minus_ext>:

void set_air_minus_ext(uint8_t closed) {
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b082      	sub	sp, #8
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	4603      	mov	r3, r0
 80176d0:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnableAirMinus = closed;
 80176d2:	79fb      	ldrb	r3, [r7, #7]
 80176d4:	4618      	mov	r0, r3
 80176d6:	f7e8 ff07 	bl	80004e8 <__aeabi_ui2d>
 80176da:	4602      	mov	r2, r0
 80176dc:	460b      	mov	r3, r1
 80176de:	4903      	ldr	r1, [pc, #12]	; (80176ec <set_air_minus_ext+0x24>)
 80176e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
#else
	HAL_GPIO_WritePin(enable_AIR_minus_GPIO_Port, enable_AIR_minus_Pin, closed);
#endif
}
 80176e4:	bf00      	nop
 80176e6:	3708      	adds	r7, #8
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}
 80176ec:	2001e9f8 	.word	0x2001e9f8

080176f0 <get_air_minus_ext>:

uint8_t get_air_minus_ext() {
 80176f0:	b580      	push	{r7, lr}
 80176f2:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AIR_minus_closed;
 80176f4:	4b05      	ldr	r3, [pc, #20]	; (801770c <get_air_minus_ext+0x1c>)
 80176f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80176fa:	4610      	mov	r0, r2
 80176fc:	4619      	mov	r1, r3
 80176fe:	f7e9 fa45 	bl	8000b8c <__aeabi_d2uiz>
 8017702:	4603      	mov	r3, r0
 8017704:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(AIR_minus_closed_GPIO_Port, AIR_minus_closed_Pin);
#endif
}
 8017706:	4618      	mov	r0, r3
 8017708:	bd80      	pop	{r7, pc}
 801770a:	bf00      	nop
 801770c:	2001dc00 	.word	0x2001dc00

08017710 <get_set_air_minus_ext>:

uint8_t get_set_air_minus_ext() {
 8017710:	b580      	push	{r7, lr}
 8017712:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_U.EnableAirMinus;
 8017714:	4b05      	ldr	r3, [pc, #20]	; (801772c <get_set_air_minus_ext+0x1c>)
 8017716:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 801771a:	4610      	mov	r0, r2
 801771c:	4619      	mov	r1, r3
 801771e:	f7e9 fa35 	bl	8000b8c <__aeabi_d2uiz>
 8017722:	4603      	mov	r3, r0
 8017724:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(enable_AIR_minus_GPIO_Port, enable_AIR_minus_Pin);
#endif
}
 8017726:	4618      	mov	r0, r3
 8017728:	bd80      	pop	{r7, pc}
 801772a:	bf00      	nop
 801772c:	2001e9f8 	.word	0x2001e9f8

08017730 <set_precharge_ext>:

void set_precharge_ext(uint8_t closed) {
 8017730:	b580      	push	{r7, lr}
 8017732:	b082      	sub	sp, #8
 8017734:	af00      	add	r7, sp, #0
 8017736:	4603      	mov	r3, r0
 8017738:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnablePrecharge = closed;
 801773a:	79fb      	ldrb	r3, [r7, #7]
 801773c:	4618      	mov	r0, r3
 801773e:	f7e8 fed3 	bl	80004e8 <__aeabi_ui2d>
 8017742:	4602      	mov	r2, r0
 8017744:	460b      	mov	r3, r1
 8017746:	4903      	ldr	r1, [pc, #12]	; (8017754 <set_precharge_ext+0x24>)
 8017748:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#else
	HAL_GPIO_WritePin(enable_precharge_GPIO_Port, enable_precharge_Pin, closed);
#endif
}
 801774c:	bf00      	nop
 801774e:	3708      	adds	r7, #8
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}
 8017754:	2001e9f8 	.word	0x2001e9f8

08017758 <get_precharge_ext>:

uint8_t get_precharge_ext() {
 8017758:	b580      	push	{r7, lr}
 801775a:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.precharge_closed;
 801775c:	4b05      	ldr	r3, [pc, #20]	; (8017774 <get_precharge_ext+0x1c>)
 801775e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017762:	4610      	mov	r0, r2
 8017764:	4619      	mov	r1, r3
 8017766:	f7e9 fa11 	bl	8000b8c <__aeabi_d2uiz>
 801776a:	4603      	mov	r3, r0
 801776c:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(precharge_closed_GPIO_Port, precharge_closed_Pin);
#endif

}
 801776e:	4618      	mov	r0, r3
 8017770:	bd80      	pop	{r7, pc}
 8017772:	bf00      	nop
 8017774:	2001dc00 	.word	0x2001dc00

08017778 <get_set_precharge_ext>:

uint8_t get_set_precharge_ext() {
 8017778:	b580      	push	{r7, lr}
 801777a:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_U.EnablePrecharge;
 801777c:	4b05      	ldr	r3, [pc, #20]	; (8017794 <get_set_precharge_ext+0x1c>)
 801777e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8017782:	4610      	mov	r0, r2
 8017784:	4619      	mov	r1, r3
 8017786:	f7e9 fa01 	bl	8000b8c <__aeabi_d2uiz>
 801778a:	4603      	mov	r3, r0
 801778c:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(enable_precharge_GPIO_Port, enable_precharge_Pin);
#endif
}
 801778e:	4618      	mov	r0, r3
 8017790:	bd80      	pop	{r7, pc}
 8017792:	bf00      	nop
 8017794:	2001e9f8 	.word	0x2001e9f8

08017798 <set_ams_error_ext>:

void set_ams_error_ext(uint8_t raise_error) {
 8017798:	b580      	push	{r7, lr}
 801779a:	b082      	sub	sp, #8
 801779c:	af00      	add	r7, sp, #0
 801779e:	4603      	mov	r3, r0
 80177a0:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.AMS_error = raise_error;
 80177a2:	79fb      	ldrb	r3, [r7, #7]
 80177a4:	4618      	mov	r0, r3
 80177a6:	f7e8 fe9f 	bl	80004e8 <__aeabi_ui2d>
 80177aa:	4602      	mov	r2, r0
 80177ac:	460b      	mov	r3, r1
 80177ae:	4903      	ldr	r1, [pc, #12]	; (80177bc <set_ams_error_ext+0x24>)
 80177b0:	e9c1 2300 	strd	r2, r3, [r1]
#else
	HAL_GPIO_WritePin(AMS_error_GPIO_Port, AMS_error_Pin, raise_error);
#endif
}
 80177b4:	bf00      	nop
 80177b6:	3708      	adds	r7, #8
 80177b8:	46bd      	mov	sp, r7
 80177ba:	bd80      	pop	{r7, pc}
 80177bc:	2001e9f8 	.word	0x2001e9f8

080177c0 <get_ams_error_latched_ext>:

uint8_t get_ams_error_latched_ext() {
 80177c0:	b480      	push	{r7}
 80177c2:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AMS_error_latched;
 80177c4:	4b03      	ldr	r3, [pc, #12]	; (80177d4 <get_ams_error_latched_ext+0x14>)
 80177c6:	781b      	ldrb	r3, [r3, #0]
#else
	return HAL_GPIO_ReadPin(AMS_error_latched_GPIO_Port, AMS_error_latched_Pin);
#endif
}
 80177c8:	4618      	mov	r0, r3
 80177ca:	46bd      	mov	sp, r7
 80177cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d0:	4770      	bx	lr
 80177d2:	bf00      	nop
 80177d4:	2001dc00 	.word	0x2001dc00

080177d8 <set_imd_error_ext>:

void set_imd_error_ext(uint8_t raise_error) {
 80177d8:	b580      	push	{r7, lr}
 80177da:	b082      	sub	sp, #8
 80177dc:	af00      	add	r7, sp, #0
 80177de:	4603      	mov	r3, r0
 80177e0:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.IMD_error = raise_error;
 80177e2:	79fb      	ldrb	r3, [r7, #7]
 80177e4:	4618      	mov	r0, r3
 80177e6:	f7e8 fe7f 	bl	80004e8 <__aeabi_ui2d>
 80177ea:	4602      	mov	r2, r0
 80177ec:	460b      	mov	r3, r1
 80177ee:	4903      	ldr	r1, [pc, #12]	; (80177fc <set_imd_error_ext+0x24>)
 80177f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
#else
	return HAL_GPIO_ReadPin(IMD_error_GPIO_Port, IMD_error_Pin);
#endif
}
 80177f4:	bf00      	nop
 80177f6:	3708      	adds	r7, #8
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}
 80177fc:	2001e9f8 	.word	0x2001e9f8

08017800 <get_imd_error_latched_ext>:

uint8_t get_imd_error_latched_ext() {
 8017800:	b480      	push	{r7}
 8017802:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.IMD_error_latched;
 8017804:	4b03      	ldr	r3, [pc, #12]	; (8017814 <get_imd_error_latched_ext+0x14>)
 8017806:	785b      	ldrb	r3, [r3, #1]
#else
	return HAL_GPIO_ReadPin(IMD_error_latched_GPIO_Port, IMD_error_latched_Pin);
#endif
}
 8017808:	4618      	mov	r0, r3
 801780a:	46bd      	mov	sp, r7
 801780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017810:	4770      	bx	lr
 8017812:	bf00      	nop
 8017814:	2001dc00 	.word	0x2001dc00

08017818 <get_sc_probe_ext>:

uint8_t get_sc_probe_ext() {
 8017818:	b580      	push	{r7, lr}
 801781a:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.SC_probe;
 801781c:	4b05      	ldr	r3, [pc, #20]	; (8017834 <get_sc_probe_ext+0x1c>)
 801781e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8017822:	4610      	mov	r0, r2
 8017824:	4619      	mov	r1, r3
 8017826:	f7e9 f9b1 	bl	8000b8c <__aeabi_d2uiz>
 801782a:	4603      	mov	r3, r0
 801782c:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(SC_probe_GPIO_Port, SC_probe_Pin);
#endif
}
 801782e:	4618      	mov	r0, r3
 8017830:	bd80      	pop	{r7, pc}
 8017832:	bf00      	nop
 8017834:	2001dc00 	.word	0x2001dc00

08017838 <set_balance_ext>:
	return HAL_GPIO_ReadPin(IMD_ok_GPIO_Port, IMD_ok_Pin);
#endif
}


void set_balance_ext(uint8_t closed, uint8_t index, void *settings) {
 8017838:	b590      	push	{r4, r7, lr}
 801783a:	b083      	sub	sp, #12
 801783c:	af00      	add	r7, sp, #0
 801783e:	4603      	mov	r3, r0
 8017840:	603a      	str	r2, [r7, #0]
 8017842:	71fb      	strb	r3, [r7, #7]
 8017844:	460b      	mov	r3, r1
 8017846:	71bb      	strb	r3, [r7, #6]
#ifdef SIMULATION
	SIM0_U.BalanceOut[index] = closed;
 8017848:	79bc      	ldrb	r4, [r7, #6]
 801784a:	79fb      	ldrb	r3, [r7, #7]
 801784c:	4618      	mov	r0, r3
 801784e:	f7e8 fe4b 	bl	80004e8 <__aeabi_ui2d>
 8017852:	4602      	mov	r2, r0
 8017854:	460b      	mov	r3, r1
 8017856:	4805      	ldr	r0, [pc, #20]	; (801786c <set_balance_ext+0x34>)
 8017858:	f104 010d 	add.w	r1, r4, #13
 801785c:	00c9      	lsls	r1, r1, #3
 801785e:	4401      	add	r1, r0
 8017860:	e9c1 2300 	strd	r2, r3, [r1]
#else

#endif

}
 8017864:	bf00      	nop
 8017866:	370c      	adds	r7, #12
 8017868:	46bd      	mov	sp, r7
 801786a:	bd90      	pop	{r4, r7, pc}
 801786c:	2001e9f8 	.word	0x2001e9f8

08017870 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8017870:	b580      	push	{r7, lr}
 8017872:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8017874:	4b17      	ldr	r3, [pc, #92]	; (80178d4 <MX_SPI2_Init+0x64>)
 8017876:	4a18      	ldr	r2, [pc, #96]	; (80178d8 <MX_SPI2_Init+0x68>)
 8017878:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801787a:	4b16      	ldr	r3, [pc, #88]	; (80178d4 <MX_SPI2_Init+0x64>)
 801787c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017880:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8017882:	4b14      	ldr	r3, [pc, #80]	; (80178d4 <MX_SPI2_Init+0x64>)
 8017884:	2200      	movs	r2, #0
 8017886:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8017888:	4b12      	ldr	r3, [pc, #72]	; (80178d4 <MX_SPI2_Init+0x64>)
 801788a:	2200      	movs	r2, #0
 801788c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 801788e:	4b11      	ldr	r3, [pc, #68]	; (80178d4 <MX_SPI2_Init+0x64>)
 8017890:	2200      	movs	r2, #0
 8017892:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017894:	4b0f      	ldr	r3, [pc, #60]	; (80178d4 <MX_SPI2_Init+0x64>)
 8017896:	2200      	movs	r2, #0
 8017898:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 801789a:	4b0e      	ldr	r3, [pc, #56]	; (80178d4 <MX_SPI2_Init+0x64>)
 801789c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80178a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80178a2:	4b0c      	ldr	r3, [pc, #48]	; (80178d4 <MX_SPI2_Init+0x64>)
 80178a4:	2228      	movs	r2, #40	; 0x28
 80178a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80178a8:	4b0a      	ldr	r3, [pc, #40]	; (80178d4 <MX_SPI2_Init+0x64>)
 80178aa:	2200      	movs	r2, #0
 80178ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80178ae:	4b09      	ldr	r3, [pc, #36]	; (80178d4 <MX_SPI2_Init+0x64>)
 80178b0:	2200      	movs	r2, #0
 80178b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80178b4:	4b07      	ldr	r3, [pc, #28]	; (80178d4 <MX_SPI2_Init+0x64>)
 80178b6:	2200      	movs	r2, #0
 80178b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80178ba:	4b06      	ldr	r3, [pc, #24]	; (80178d4 <MX_SPI2_Init+0x64>)
 80178bc:	220a      	movs	r2, #10
 80178be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80178c0:	4804      	ldr	r0, [pc, #16]	; (80178d4 <MX_SPI2_Init+0x64>)
 80178c2:	f00f fe5b 	bl	802757c <HAL_SPI_Init>
 80178c6:	4603      	mov	r3, r0
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d001      	beq.n	80178d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80178cc:	f7ff fec2 	bl	8017654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80178d0:	bf00      	nop
 80178d2:	bd80      	pop	{r7, pc}
 80178d4:	2001c1a4 	.word	0x2001c1a4
 80178d8:	40003800 	.word	0x40003800

080178dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b08a      	sub	sp, #40	; 0x28
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80178e4:	f107 0314 	add.w	r3, r7, #20
 80178e8:	2200      	movs	r2, #0
 80178ea:	601a      	str	r2, [r3, #0]
 80178ec:	605a      	str	r2, [r3, #4]
 80178ee:	609a      	str	r2, [r3, #8]
 80178f0:	60da      	str	r2, [r3, #12]
 80178f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	4a28      	ldr	r2, [pc, #160]	; (801799c <HAL_SPI_MspInit+0xc0>)
 80178fa:	4293      	cmp	r3, r2
 80178fc:	d14a      	bne.n	8017994 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80178fe:	2300      	movs	r3, #0
 8017900:	613b      	str	r3, [r7, #16]
 8017902:	4b27      	ldr	r3, [pc, #156]	; (80179a0 <HAL_SPI_MspInit+0xc4>)
 8017904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017906:	4a26      	ldr	r2, [pc, #152]	; (80179a0 <HAL_SPI_MspInit+0xc4>)
 8017908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801790c:	6413      	str	r3, [r2, #64]	; 0x40
 801790e:	4b24      	ldr	r3, [pc, #144]	; (80179a0 <HAL_SPI_MspInit+0xc4>)
 8017910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017916:	613b      	str	r3, [r7, #16]
 8017918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801791a:	2300      	movs	r3, #0
 801791c:	60fb      	str	r3, [r7, #12]
 801791e:	4b20      	ldr	r3, [pc, #128]	; (80179a0 <HAL_SPI_MspInit+0xc4>)
 8017920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017922:	4a1f      	ldr	r2, [pc, #124]	; (80179a0 <HAL_SPI_MspInit+0xc4>)
 8017924:	f043 0304 	orr.w	r3, r3, #4
 8017928:	6313      	str	r3, [r2, #48]	; 0x30
 801792a:	4b1d      	ldr	r3, [pc, #116]	; (80179a0 <HAL_SPI_MspInit+0xc4>)
 801792c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801792e:	f003 0304 	and.w	r3, r3, #4
 8017932:	60fb      	str	r3, [r7, #12]
 8017934:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017936:	2300      	movs	r3, #0
 8017938:	60bb      	str	r3, [r7, #8]
 801793a:	4b19      	ldr	r3, [pc, #100]	; (80179a0 <HAL_SPI_MspInit+0xc4>)
 801793c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801793e:	4a18      	ldr	r2, [pc, #96]	; (80179a0 <HAL_SPI_MspInit+0xc4>)
 8017940:	f043 0302 	orr.w	r3, r3, #2
 8017944:	6313      	str	r3, [r2, #48]	; 0x30
 8017946:	4b16      	ldr	r3, [pc, #88]	; (80179a0 <HAL_SPI_MspInit+0xc4>)
 8017948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801794a:	f003 0302 	and.w	r3, r3, #2
 801794e:	60bb      	str	r3, [r7, #8]
 8017950:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8017952:	230c      	movs	r3, #12
 8017954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017956:	2302      	movs	r3, #2
 8017958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801795a:	2300      	movs	r3, #0
 801795c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801795e:	2303      	movs	r3, #3
 8017960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8017962:	2305      	movs	r3, #5
 8017964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017966:	f107 0314 	add.w	r3, r7, #20
 801796a:	4619      	mov	r1, r3
 801796c:	480d      	ldr	r0, [pc, #52]	; (80179a4 <HAL_SPI_MspInit+0xc8>)
 801796e:	f00e ffc1 	bl	80268f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8017972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017978:	2302      	movs	r3, #2
 801797a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801797c:	2300      	movs	r3, #0
 801797e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017980:	2303      	movs	r3, #3
 8017982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8017984:	2305      	movs	r3, #5
 8017986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017988:	f107 0314 	add.w	r3, r7, #20
 801798c:	4619      	mov	r1, r3
 801798e:	4806      	ldr	r0, [pc, #24]	; (80179a8 <HAL_SPI_MspInit+0xcc>)
 8017990:	f00e ffb0 	bl	80268f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8017994:	bf00      	nop
 8017996:	3728      	adds	r7, #40	; 0x28
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}
 801799c:	40003800 	.word	0x40003800
 80179a0:	40023800 	.word	0x40023800
 80179a4:	40020800 	.word	0x40020800
 80179a8:	40020400 	.word	0x40020400

080179ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b082      	sub	sp, #8
 80179b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80179b2:	2300      	movs	r3, #0
 80179b4:	607b      	str	r3, [r7, #4]
 80179b6:	4b12      	ldr	r3, [pc, #72]	; (8017a00 <HAL_MspInit+0x54>)
 80179b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179ba:	4a11      	ldr	r2, [pc, #68]	; (8017a00 <HAL_MspInit+0x54>)
 80179bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80179c0:	6453      	str	r3, [r2, #68]	; 0x44
 80179c2:	4b0f      	ldr	r3, [pc, #60]	; (8017a00 <HAL_MspInit+0x54>)
 80179c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80179ca:	607b      	str	r3, [r7, #4]
 80179cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80179ce:	2300      	movs	r3, #0
 80179d0:	603b      	str	r3, [r7, #0]
 80179d2:	4b0b      	ldr	r3, [pc, #44]	; (8017a00 <HAL_MspInit+0x54>)
 80179d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179d6:	4a0a      	ldr	r2, [pc, #40]	; (8017a00 <HAL_MspInit+0x54>)
 80179d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80179dc:	6413      	str	r3, [r2, #64]	; 0x40
 80179de:	4b08      	ldr	r3, [pc, #32]	; (8017a00 <HAL_MspInit+0x54>)
 80179e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80179e6:	603b      	str	r3, [r7, #0]
 80179e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80179ea:	2200      	movs	r2, #0
 80179ec:	210f      	movs	r1, #15
 80179ee:	f06f 0001 	mvn.w	r0, #1
 80179f2:	f00e fbe5 	bl	80261c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80179f6:	bf00      	nop
 80179f8:	3708      	adds	r7, #8
 80179fa:	46bd      	mov	sp, r7
 80179fc:	bd80      	pop	{r7, pc}
 80179fe:	bf00      	nop
 8017a00:	40023800 	.word	0x40023800

08017a04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b08c      	sub	sp, #48	; 0x30
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8017a10:	2300      	movs	r3, #0
 8017a12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8017a14:	2200      	movs	r2, #0
 8017a16:	6879      	ldr	r1, [r7, #4]
 8017a18:	2032      	movs	r0, #50	; 0x32
 8017a1a:	f00e fbd1 	bl	80261c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8017a1e:	2032      	movs	r0, #50	; 0x32
 8017a20:	f00e fbea 	bl	80261f8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8017a24:	2300      	movs	r3, #0
 8017a26:	60fb      	str	r3, [r7, #12]
 8017a28:	4b1f      	ldr	r3, [pc, #124]	; (8017aa8 <HAL_InitTick+0xa4>)
 8017a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a2c:	4a1e      	ldr	r2, [pc, #120]	; (8017aa8 <HAL_InitTick+0xa4>)
 8017a2e:	f043 0308 	orr.w	r3, r3, #8
 8017a32:	6413      	str	r3, [r2, #64]	; 0x40
 8017a34:	4b1c      	ldr	r3, [pc, #112]	; (8017aa8 <HAL_InitTick+0xa4>)
 8017a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a38:	f003 0308 	and.w	r3, r3, #8
 8017a3c:	60fb      	str	r3, [r7, #12]
 8017a3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8017a40:	f107 0210 	add.w	r2, r7, #16
 8017a44:	f107 0314 	add.w	r3, r7, #20
 8017a48:	4611      	mov	r1, r2
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f00f fd64 	bl	8027518 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8017a50:	f00f fd4e 	bl	80274f0 <HAL_RCC_GetPCLK1Freq>
 8017a54:	4603      	mov	r3, r0
 8017a56:	005b      	lsls	r3, r3, #1
 8017a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8017a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a5c:	4a13      	ldr	r2, [pc, #76]	; (8017aac <HAL_InitTick+0xa8>)
 8017a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8017a62:	0c9b      	lsrs	r3, r3, #18
 8017a64:	3b01      	subs	r3, #1
 8017a66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8017a68:	4b11      	ldr	r3, [pc, #68]	; (8017ab0 <HAL_InitTick+0xac>)
 8017a6a:	4a12      	ldr	r2, [pc, #72]	; (8017ab4 <HAL_InitTick+0xb0>)
 8017a6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8017a6e:	4b10      	ldr	r3, [pc, #64]	; (8017ab0 <HAL_InitTick+0xac>)
 8017a70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017a74:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8017a76:	4a0e      	ldr	r2, [pc, #56]	; (8017ab0 <HAL_InitTick+0xac>)
 8017a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a7a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8017a7c:	4b0c      	ldr	r3, [pc, #48]	; (8017ab0 <HAL_InitTick+0xac>)
 8017a7e:	2200      	movs	r2, #0
 8017a80:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017a82:	4b0b      	ldr	r3, [pc, #44]	; (8017ab0 <HAL_InitTick+0xac>)
 8017a84:	2200      	movs	r2, #0
 8017a86:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8017a88:	4809      	ldr	r0, [pc, #36]	; (8017ab0 <HAL_InitTick+0xac>)
 8017a8a:	f010 fb1f 	bl	80280cc <HAL_TIM_Base_Init>
 8017a8e:	4603      	mov	r3, r0
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d104      	bne.n	8017a9e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8017a94:	4806      	ldr	r0, [pc, #24]	; (8017ab0 <HAL_InitTick+0xac>)
 8017a96:	f010 fbd1 	bl	802823c <HAL_TIM_Base_Start_IT>
 8017a9a:	4603      	mov	r3, r0
 8017a9c:	e000      	b.n	8017aa0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8017a9e:	2301      	movs	r3, #1
}
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	3730      	adds	r7, #48	; 0x30
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd80      	pop	{r7, pc}
 8017aa8:	40023800 	.word	0x40023800
 8017aac:	431bde83 	.word	0x431bde83
 8017ab0:	2001c1fc 	.word	0x2001c1fc
 8017ab4:	40000c00 	.word	0x40000c00

08017ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017ab8:	b480      	push	{r7}
 8017aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8017abc:	e7fe      	b.n	8017abc <NMI_Handler+0x4>

08017abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8017abe:	b480      	push	{r7}
 8017ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017ac2:	e7fe      	b.n	8017ac2 <HardFault_Handler+0x4>

08017ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017ac4:	b480      	push	{r7}
 8017ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017ac8:	e7fe      	b.n	8017ac8 <MemManage_Handler+0x4>

08017aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017aca:	b480      	push	{r7}
 8017acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017ace:	e7fe      	b.n	8017ace <BusFault_Handler+0x4>

08017ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017ad0:	b480      	push	{r7}
 8017ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017ad4:	e7fe      	b.n	8017ad4 <UsageFault_Handler+0x4>

08017ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017ad6:	b480      	push	{r7}
 8017ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017ada:	bf00      	nop
 8017adc:	46bd      	mov	sp, r7
 8017ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae2:	4770      	bx	lr

08017ae4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AIR_plus_closed_Pin);
 8017ae8:	2010      	movs	r0, #16
 8017aea:	f00f f8b9 	bl	8026c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8017aee:	bf00      	nop
 8017af0:	bd80      	pop	{r7, pc}
	...

08017af4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8017af8:	4802      	ldr	r0, [pc, #8]	; (8017b04 <ADC_IRQHandler+0x10>)
 8017afa:	f00c feca 	bl	8024892 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8017afe:	bf00      	nop
 8017b00:	bd80      	pop	{r7, pc}
 8017b02:	bf00      	nop
 8017b04:	2001c008 	.word	0x2001c008

08017b08 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8017b0c:	4802      	ldr	r0, [pc, #8]	; (8017b18 <CAN1_TX_IRQHandler+0x10>)
 8017b0e:	f00e f879 	bl	8025c04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8017b12:	bf00      	nop
 8017b14:	bd80      	pop	{r7, pc}
 8017b16:	bf00      	nop
 8017b18:	2001c0d8 	.word	0x2001c0d8

08017b1c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8017b20:	4802      	ldr	r0, [pc, #8]	; (8017b2c <CAN1_RX0_IRQHandler+0x10>)
 8017b22:	f00e f86f 	bl	8025c04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8017b26:	bf00      	nop
 8017b28:	bd80      	pop	{r7, pc}
 8017b2a:	bf00      	nop
 8017b2c:	2001c0d8 	.word	0x2001c0d8

08017b30 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8017b34:	4802      	ldr	r0, [pc, #8]	; (8017b40 <CAN1_RX1_IRQHandler+0x10>)
 8017b36:	f00e f865 	bl	8025c04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8017b3a:	bf00      	nop
 8017b3c:	bd80      	pop	{r7, pc}
 8017b3e:	bf00      	nop
 8017b40:	2001c0d8 	.word	0x2001c0d8

08017b44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8017b44:	b580      	push	{r7, lr}
 8017b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AIR_minus_closed_Pin);
 8017b48:	2020      	movs	r0, #32
 8017b4a:	f00f f889 	bl	8026c60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(precharge_closed_Pin);
 8017b4e:	2040      	movs	r0, #64	; 0x40
 8017b50:	f00f f886 	bl	8026c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8017b54:	bf00      	nop
 8017b56:	bd80      	pop	{r7, pc}

08017b58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8017b58:	b580      	push	{r7, lr}
 8017b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8017b5c:	4802      	ldr	r0, [pc, #8]	; (8017b68 <TIM2_IRQHandler+0x10>)
 8017b5e:	f010 ff5d 	bl	8028a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8017b62:	bf00      	nop
 8017b64:	bd80      	pop	{r7, pc}
 8017b66:	bf00      	nop
 8017b68:	2001c2d4 	.word	0x2001c2d4

08017b6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8017b6c:	b580      	push	{r7, lr}
 8017b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8017b70:	4802      	ldr	r0, [pc, #8]	; (8017b7c <TIM3_IRQHandler+0x10>)
 8017b72:	f010 ff53 	bl	8028a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8017b76:	bf00      	nop
 8017b78:	bd80      	pop	{r7, pc}
 8017b7a:	bf00      	nop
 8017b7c:	2001c244 	.word	0x2001c244

08017b80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8017b84:	4802      	ldr	r0, [pc, #8]	; (8017b90 <TIM5_IRQHandler+0x10>)
 8017b86:	f010 ff49 	bl	8028a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8017b8a:	bf00      	nop
 8017b8c:	bd80      	pop	{r7, pc}
 8017b8e:	bf00      	nop
 8017b90:	2001c1fc 	.word	0x2001c1fc

08017b94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8017b94:	b580      	push	{r7, lr}
 8017b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8017b98:	4802      	ldr	r0, [pc, #8]	; (8017ba4 <DMA2_Stream0_IRQHandler+0x10>)
 8017b9a:	f00e fc41 	bl	8026420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8017b9e:	bf00      	nop
 8017ba0:	bd80      	pop	{r7, pc}
 8017ba2:	bf00      	nop
 8017ba4:	2001c050 	.word	0x2001c050

08017ba8 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8017ba8:	b580      	push	{r7, lr}
 8017baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8017bac:	4802      	ldr	r0, [pc, #8]	; (8017bb8 <CAN2_TX_IRQHandler+0x10>)
 8017bae:	f00e f829 	bl	8025c04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8017bb2:	bf00      	nop
 8017bb4:	bd80      	pop	{r7, pc}
 8017bb6:	bf00      	nop
 8017bb8:	2001c0b0 	.word	0x2001c0b0

08017bbc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8017bc0:	4802      	ldr	r0, [pc, #8]	; (8017bcc <CAN2_RX0_IRQHandler+0x10>)
 8017bc2:	f00e f81f 	bl	8025c04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8017bc6:	bf00      	nop
 8017bc8:	bd80      	pop	{r7, pc}
 8017bca:	bf00      	nop
 8017bcc:	2001c0b0 	.word	0x2001c0b0

08017bd0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8017bd4:	4802      	ldr	r0, [pc, #8]	; (8017be0 <CAN2_RX1_IRQHandler+0x10>)
 8017bd6:	f00e f815 	bl	8025c04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8017bda:	bf00      	nop
 8017bdc:	bd80      	pop	{r7, pc}
 8017bde:	bf00      	nop
 8017be0:	2001c0b0 	.word	0x2001c0b0

08017be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017be4:	b480      	push	{r7}
 8017be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8017be8:	4b06      	ldr	r3, [pc, #24]	; (8017c04 <SystemInit+0x20>)
 8017bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017bee:	4a05      	ldr	r2, [pc, #20]	; (8017c04 <SystemInit+0x20>)
 8017bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8017bf8:	bf00      	nop
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c00:	4770      	bx	lr
 8017c02:	bf00      	nop
 8017c04:	e000ed00 	.word	0xe000ed00

08017c08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b096      	sub	sp, #88	; 0x58
 8017c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017c0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017c12:	2200      	movs	r2, #0
 8017c14:	601a      	str	r2, [r3, #0]
 8017c16:	605a      	str	r2, [r3, #4]
 8017c18:	609a      	str	r2, [r3, #8]
 8017c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017c1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017c20:	2200      	movs	r2, #0
 8017c22:	601a      	str	r2, [r3, #0]
 8017c24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8017c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	601a      	str	r2, [r3, #0]
 8017c2e:	605a      	str	r2, [r3, #4]
 8017c30:	609a      	str	r2, [r3, #8]
 8017c32:	60da      	str	r2, [r3, #12]
 8017c34:	611a      	str	r2, [r3, #16]
 8017c36:	615a      	str	r2, [r3, #20]
 8017c38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8017c3a:	1d3b      	adds	r3, r7, #4
 8017c3c:	2220      	movs	r2, #32
 8017c3e:	2100      	movs	r1, #0
 8017c40:	4618      	mov	r0, r3
 8017c42:	f016 fd4d 	bl	802e6e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8017c46:	4b3e      	ldr	r3, [pc, #248]	; (8017d40 <MX_TIM1_Init+0x138>)
 8017c48:	4a3e      	ldr	r2, [pc, #248]	; (8017d44 <MX_TIM1_Init+0x13c>)
 8017c4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8017c4c:	4b3c      	ldr	r3, [pc, #240]	; (8017d40 <MX_TIM1_Init+0x138>)
 8017c4e:	2200      	movs	r2, #0
 8017c50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017c52:	4b3b      	ldr	r3, [pc, #236]	; (8017d40 <MX_TIM1_Init+0x138>)
 8017c54:	2200      	movs	r2, #0
 8017c56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8017c58:	4b39      	ldr	r3, [pc, #228]	; (8017d40 <MX_TIM1_Init+0x138>)
 8017c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017c60:	4b37      	ldr	r3, [pc, #220]	; (8017d40 <MX_TIM1_Init+0x138>)
 8017c62:	2200      	movs	r2, #0
 8017c64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8017c66:	4b36      	ldr	r3, [pc, #216]	; (8017d40 <MX_TIM1_Init+0x138>)
 8017c68:	2200      	movs	r2, #0
 8017c6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017c6c:	4b34      	ldr	r3, [pc, #208]	; (8017d40 <MX_TIM1_Init+0x138>)
 8017c6e:	2200      	movs	r2, #0
 8017c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8017c72:	4833      	ldr	r0, [pc, #204]	; (8017d40 <MX_TIM1_Init+0x138>)
 8017c74:	f010 fa2a 	bl	80280cc <HAL_TIM_Base_Init>
 8017c78:	4603      	mov	r3, r0
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d001      	beq.n	8017c82 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8017c7e:	f7ff fce9 	bl	8017654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017c86:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017c88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017c8c:	4619      	mov	r1, r3
 8017c8e:	482c      	ldr	r0, [pc, #176]	; (8017d40 <MX_TIM1_Init+0x138>)
 8017c90:	f011 f92a 	bl	8028ee8 <HAL_TIM_ConfigClockSource>
 8017c94:	4603      	mov	r3, r0
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d001      	beq.n	8017c9e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8017c9a:	f7ff fcdb 	bl	8017654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8017c9e:	4828      	ldr	r0, [pc, #160]	; (8017d40 <MX_TIM1_Init+0x138>)
 8017ca0:	f010 fb3c 	bl	802831c <HAL_TIM_PWM_Init>
 8017ca4:	4603      	mov	r3, r0
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d001      	beq.n	8017cae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8017caa:	f7ff fcd3 	bl	8017654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017cae:	2300      	movs	r3, #0
 8017cb0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8017cb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017cba:	4619      	mov	r1, r3
 8017cbc:	4820      	ldr	r0, [pc, #128]	; (8017d40 <MX_TIM1_Init+0x138>)
 8017cbe:	f011 ff4b 	bl	8029b58 <HAL_TIMEx_MasterConfigSynchronization>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d001      	beq.n	8017ccc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8017cc8:	f7ff fcc4 	bl	8017654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017ccc:	2360      	movs	r3, #96	; 0x60
 8017cce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8017cd8:	2300      	movs	r3, #0
 8017cda:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017cdc:	2300      	movs	r3, #0
 8017cde:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8017ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017cec:	2208      	movs	r2, #8
 8017cee:	4619      	mov	r1, r3
 8017cf0:	4813      	ldr	r0, [pc, #76]	; (8017d40 <MX_TIM1_Init+0x138>)
 8017cf2:	f011 f837 	bl	8028d64 <HAL_TIM_PWM_ConfigChannel>
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d001      	beq.n	8017d00 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8017cfc:	f7ff fcaa 	bl	8017654 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8017d00:	2300      	movs	r3, #0
 8017d02:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8017d04:	2300      	movs	r3, #0
 8017d06:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8017d08:	2300      	movs	r3, #0
 8017d0a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8017d10:	2300      	movs	r3, #0
 8017d12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8017d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017d18:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8017d1e:	1d3b      	adds	r3, r7, #4
 8017d20:	4619      	mov	r1, r3
 8017d22:	4807      	ldr	r0, [pc, #28]	; (8017d40 <MX_TIM1_Init+0x138>)
 8017d24:	f011 ff94 	bl	8029c50 <HAL_TIMEx_ConfigBreakDeadTime>
 8017d28:	4603      	mov	r3, r0
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d001      	beq.n	8017d32 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8017d2e:	f7ff fc91 	bl	8017654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8017d32:	4803      	ldr	r0, [pc, #12]	; (8017d40 <MX_TIM1_Init+0x138>)
 8017d34:	f000 f974 	bl	8018020 <HAL_TIM_MspPostInit>

}
 8017d38:	bf00      	nop
 8017d3a:	3758      	adds	r7, #88	; 0x58
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}
 8017d40:	2001c28c 	.word	0x2001c28c
 8017d44:	40010000 	.word	0x40010000

08017d48 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b090      	sub	sp, #64	; 0x40
 8017d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017d4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017d52:	2200      	movs	r2, #0
 8017d54:	601a      	str	r2, [r3, #0]
 8017d56:	605a      	str	r2, [r3, #4]
 8017d58:	609a      	str	r2, [r3, #8]
 8017d5a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8017d5c:	f107 031c 	add.w	r3, r7, #28
 8017d60:	2200      	movs	r2, #0
 8017d62:	601a      	str	r2, [r3, #0]
 8017d64:	605a      	str	r2, [r3, #4]
 8017d66:	609a      	str	r2, [r3, #8]
 8017d68:	60da      	str	r2, [r3, #12]
 8017d6a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8017d6c:	f107 030c 	add.w	r3, r7, #12
 8017d70:	2200      	movs	r2, #0
 8017d72:	601a      	str	r2, [r3, #0]
 8017d74:	605a      	str	r2, [r3, #4]
 8017d76:	609a      	str	r2, [r3, #8]
 8017d78:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017d7a:	1d3b      	adds	r3, r7, #4
 8017d7c:	2200      	movs	r2, #0
 8017d7e:	601a      	str	r2, [r3, #0]
 8017d80:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8017d82:	4b3e      	ldr	r3, [pc, #248]	; (8017e7c <MX_TIM2_Init+0x134>)
 8017d84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017d88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8017d8a:	4b3c      	ldr	r3, [pc, #240]	; (8017e7c <MX_TIM2_Init+0x134>)
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017d90:	4b3a      	ldr	r3, [pc, #232]	; (8017e7c <MX_TIM2_Init+0x134>)
 8017d92:	2200      	movs	r2, #0
 8017d94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8017d96:	4b39      	ldr	r3, [pc, #228]	; (8017e7c <MX_TIM2_Init+0x134>)
 8017d98:	f04f 32ff 	mov.w	r2, #4294967295
 8017d9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017d9e:	4b37      	ldr	r3, [pc, #220]	; (8017e7c <MX_TIM2_Init+0x134>)
 8017da0:	2200      	movs	r2, #0
 8017da2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017da4:	4b35      	ldr	r3, [pc, #212]	; (8017e7c <MX_TIM2_Init+0x134>)
 8017da6:	2200      	movs	r2, #0
 8017da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8017daa:	4834      	ldr	r0, [pc, #208]	; (8017e7c <MX_TIM2_Init+0x134>)
 8017dac:	f010 f98e 	bl	80280cc <HAL_TIM_Base_Init>
 8017db0:	4603      	mov	r3, r0
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d001      	beq.n	8017dba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8017db6:	f7ff fc4d 	bl	8017654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017dbe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8017dc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017dc4:	4619      	mov	r1, r3
 8017dc6:	482d      	ldr	r0, [pc, #180]	; (8017e7c <MX_TIM2_Init+0x134>)
 8017dc8:	f011 f88e 	bl	8028ee8 <HAL_TIM_ConfigClockSource>
 8017dcc:	4603      	mov	r3, r0
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d001      	beq.n	8017dd6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8017dd2:	f7ff fc3f 	bl	8017654 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8017dd6:	4829      	ldr	r0, [pc, #164]	; (8017e7c <MX_TIM2_Init+0x134>)
 8017dd8:	f010 fbc2 	bl	8028560 <HAL_TIM_IC_Init>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d001      	beq.n	8017de6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8017de2:	f7ff fc37 	bl	8017654 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8017de6:	2304      	movs	r3, #4
 8017de8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8017dea:	2350      	movs	r3, #80	; 0x50
 8017dec:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8017dee:	2300      	movs	r3, #0
 8017df0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8017df2:	2300      	movs	r3, #0
 8017df4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8017df6:	2300      	movs	r3, #0
 8017df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8017dfa:	f107 031c 	add.w	r3, r7, #28
 8017dfe:	4619      	mov	r1, r3
 8017e00:	481e      	ldr	r0, [pc, #120]	; (8017e7c <MX_TIM2_Init+0x134>)
 8017e02:	f011 f938 	bl	8029076 <HAL_TIM_SlaveConfigSynchro>
 8017e06:	4603      	mov	r3, r0
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d001      	beq.n	8017e10 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8017e0c:	f7ff fc22 	bl	8017654 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8017e10:	2300      	movs	r3, #0
 8017e12:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8017e14:	2301      	movs	r3, #1
 8017e16:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8017e18:	2300      	movs	r3, #0
 8017e1a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8017e20:	f107 030c 	add.w	r3, r7, #12
 8017e24:	2200      	movs	r2, #0
 8017e26:	4619      	mov	r1, r3
 8017e28:	4814      	ldr	r0, [pc, #80]	; (8017e7c <MX_TIM2_Init+0x134>)
 8017e2a:	f010 feff 	bl	8028c2c <HAL_TIM_IC_ConfigChannel>
 8017e2e:	4603      	mov	r3, r0
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d001      	beq.n	8017e38 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8017e34:	f7ff fc0e 	bl	8017654 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8017e38:	2302      	movs	r3, #2
 8017e3a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8017e3c:	2302      	movs	r3, #2
 8017e3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8017e40:	f107 030c 	add.w	r3, r7, #12
 8017e44:	2204      	movs	r2, #4
 8017e46:	4619      	mov	r1, r3
 8017e48:	480c      	ldr	r0, [pc, #48]	; (8017e7c <MX_TIM2_Init+0x134>)
 8017e4a:	f010 feef 	bl	8028c2c <HAL_TIM_IC_ConfigChannel>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d001      	beq.n	8017e58 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8017e54:	f7ff fbfe 	bl	8017654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017e58:	2300      	movs	r3, #0
 8017e5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8017e60:	1d3b      	adds	r3, r7, #4
 8017e62:	4619      	mov	r1, r3
 8017e64:	4805      	ldr	r0, [pc, #20]	; (8017e7c <MX_TIM2_Init+0x134>)
 8017e66:	f011 fe77 	bl	8029b58 <HAL_TIMEx_MasterConfigSynchronization>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d001      	beq.n	8017e74 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8017e70:	f7ff fbf0 	bl	8017654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8017e74:	bf00      	nop
 8017e76:	3740      	adds	r7, #64	; 0x40
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	bd80      	pop	{r7, pc}
 8017e7c:	2001c2d4 	.word	0x2001c2d4

08017e80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b086      	sub	sp, #24
 8017e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017e86:	f107 0308 	add.w	r3, r7, #8
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	601a      	str	r2, [r3, #0]
 8017e8e:	605a      	str	r2, [r3, #4]
 8017e90:	609a      	str	r2, [r3, #8]
 8017e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017e94:	463b      	mov	r3, r7
 8017e96:	2200      	movs	r2, #0
 8017e98:	601a      	str	r2, [r3, #0]
 8017e9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8017e9c:	4b1d      	ldr	r3, [pc, #116]	; (8017f14 <MX_TIM3_Init+0x94>)
 8017e9e:	4a1e      	ldr	r2, [pc, #120]	; (8017f18 <MX_TIM3_Init+0x98>)
 8017ea0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8017ea2:	4b1c      	ldr	r3, [pc, #112]	; (8017f14 <MX_TIM3_Init+0x94>)
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017ea8:	4b1a      	ldr	r3, [pc, #104]	; (8017f14 <MX_TIM3_Init+0x94>)
 8017eaa:	2200      	movs	r2, #0
 8017eac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8017eae:	4b19      	ldr	r3, [pc, #100]	; (8017f14 <MX_TIM3_Init+0x94>)
 8017eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017eb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017eb6:	4b17      	ldr	r3, [pc, #92]	; (8017f14 <MX_TIM3_Init+0x94>)
 8017eb8:	2200      	movs	r2, #0
 8017eba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017ebc:	4b15      	ldr	r3, [pc, #84]	; (8017f14 <MX_TIM3_Init+0x94>)
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8017ec2:	4814      	ldr	r0, [pc, #80]	; (8017f14 <MX_TIM3_Init+0x94>)
 8017ec4:	f010 f902 	bl	80280cc <HAL_TIM_Base_Init>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d001      	beq.n	8017ed2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8017ece:	f7ff fbc1 	bl	8017654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017ed6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8017ed8:	f107 0308 	add.w	r3, r7, #8
 8017edc:	4619      	mov	r1, r3
 8017ede:	480d      	ldr	r0, [pc, #52]	; (8017f14 <MX_TIM3_Init+0x94>)
 8017ee0:	f011 f802 	bl	8028ee8 <HAL_TIM_ConfigClockSource>
 8017ee4:	4603      	mov	r3, r0
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d001      	beq.n	8017eee <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8017eea:	f7ff fbb3 	bl	8017654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8017eee:	2320      	movs	r3, #32
 8017ef0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8017ef6:	463b      	mov	r3, r7
 8017ef8:	4619      	mov	r1, r3
 8017efa:	4806      	ldr	r0, [pc, #24]	; (8017f14 <MX_TIM3_Init+0x94>)
 8017efc:	f011 fe2c 	bl	8029b58 <HAL_TIMEx_MasterConfigSynchronization>
 8017f00:	4603      	mov	r3, r0
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d001      	beq.n	8017f0a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8017f06:	f7ff fba5 	bl	8017654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8017f0a:	bf00      	nop
 8017f0c:	3718      	adds	r7, #24
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}
 8017f12:	bf00      	nop
 8017f14:	2001c244 	.word	0x2001c244
 8017f18:	40000400 	.word	0x40000400

08017f1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b08c      	sub	sp, #48	; 0x30
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017f24:	f107 031c 	add.w	r3, r7, #28
 8017f28:	2200      	movs	r2, #0
 8017f2a:	601a      	str	r2, [r3, #0]
 8017f2c:	605a      	str	r2, [r3, #4]
 8017f2e:	609a      	str	r2, [r3, #8]
 8017f30:	60da      	str	r2, [r3, #12]
 8017f32:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	4a35      	ldr	r2, [pc, #212]	; (8018010 <HAL_TIM_Base_MspInit+0xf4>)
 8017f3a:	4293      	cmp	r3, r2
 8017f3c:	d10e      	bne.n	8017f5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8017f3e:	2300      	movs	r3, #0
 8017f40:	61bb      	str	r3, [r7, #24]
 8017f42:	4b34      	ldr	r3, [pc, #208]	; (8018014 <HAL_TIM_Base_MspInit+0xf8>)
 8017f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f46:	4a33      	ldr	r2, [pc, #204]	; (8018014 <HAL_TIM_Base_MspInit+0xf8>)
 8017f48:	f043 0301 	orr.w	r3, r3, #1
 8017f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8017f4e:	4b31      	ldr	r3, [pc, #196]	; (8018014 <HAL_TIM_Base_MspInit+0xf8>)
 8017f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f52:	f003 0301 	and.w	r3, r3, #1
 8017f56:	61bb      	str	r3, [r7, #24]
 8017f58:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8017f5a:	e055      	b.n	8018008 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017f64:	d135      	bne.n	8017fd2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8017f66:	2300      	movs	r3, #0
 8017f68:	617b      	str	r3, [r7, #20]
 8017f6a:	4b2a      	ldr	r3, [pc, #168]	; (8018014 <HAL_TIM_Base_MspInit+0xf8>)
 8017f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f6e:	4a29      	ldr	r2, [pc, #164]	; (8018014 <HAL_TIM_Base_MspInit+0xf8>)
 8017f70:	f043 0301 	orr.w	r3, r3, #1
 8017f74:	6413      	str	r3, [r2, #64]	; 0x40
 8017f76:	4b27      	ldr	r3, [pc, #156]	; (8018014 <HAL_TIM_Base_MspInit+0xf8>)
 8017f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f7a:	f003 0301 	and.w	r3, r3, #1
 8017f7e:	617b      	str	r3, [r7, #20]
 8017f80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017f82:	2300      	movs	r3, #0
 8017f84:	613b      	str	r3, [r7, #16]
 8017f86:	4b23      	ldr	r3, [pc, #140]	; (8018014 <HAL_TIM_Base_MspInit+0xf8>)
 8017f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f8a:	4a22      	ldr	r2, [pc, #136]	; (8018014 <HAL_TIM_Base_MspInit+0xf8>)
 8017f8c:	f043 0301 	orr.w	r3, r3, #1
 8017f90:	6313      	str	r3, [r2, #48]	; 0x30
 8017f92:	4b20      	ldr	r3, [pc, #128]	; (8018014 <HAL_TIM_Base_MspInit+0xf8>)
 8017f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f96:	f003 0301 	and.w	r3, r3, #1
 8017f9a:	613b      	str	r3, [r7, #16]
 8017f9c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMD_data_Pin;
 8017f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017fa4:	2302      	movs	r3, #2
 8017fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017fa8:	2300      	movs	r3, #0
 8017faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017fac:	2300      	movs	r3, #0
 8017fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8017fb0:	2301      	movs	r3, #1
 8017fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMD_data_GPIO_Port, &GPIO_InitStruct);
 8017fb4:	f107 031c 	add.w	r3, r7, #28
 8017fb8:	4619      	mov	r1, r3
 8017fba:	4817      	ldr	r0, [pc, #92]	; (8018018 <HAL_TIM_Base_MspInit+0xfc>)
 8017fbc:	f00e fc9a 	bl	80268f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	2105      	movs	r1, #5
 8017fc4:	201c      	movs	r0, #28
 8017fc6:	f00e f8fb 	bl	80261c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8017fca:	201c      	movs	r0, #28
 8017fcc:	f00e f914 	bl	80261f8 <HAL_NVIC_EnableIRQ>
}
 8017fd0:	e01a      	b.n	8018008 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	4a11      	ldr	r2, [pc, #68]	; (801801c <HAL_TIM_Base_MspInit+0x100>)
 8017fd8:	4293      	cmp	r3, r2
 8017fda:	d115      	bne.n	8018008 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8017fdc:	2300      	movs	r3, #0
 8017fde:	60fb      	str	r3, [r7, #12]
 8017fe0:	4b0c      	ldr	r3, [pc, #48]	; (8018014 <HAL_TIM_Base_MspInit+0xf8>)
 8017fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fe4:	4a0b      	ldr	r2, [pc, #44]	; (8018014 <HAL_TIM_Base_MspInit+0xf8>)
 8017fe6:	f043 0302 	orr.w	r3, r3, #2
 8017fea:	6413      	str	r3, [r2, #64]	; 0x40
 8017fec:	4b09      	ldr	r3, [pc, #36]	; (8018014 <HAL_TIM_Base_MspInit+0xf8>)
 8017fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ff0:	f003 0302 	and.w	r3, r3, #2
 8017ff4:	60fb      	str	r3, [r7, #12]
 8017ff6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	2105      	movs	r1, #5
 8017ffc:	201d      	movs	r0, #29
 8017ffe:	f00e f8df 	bl	80261c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8018002:	201d      	movs	r0, #29
 8018004:	f00e f8f8 	bl	80261f8 <HAL_NVIC_EnableIRQ>
}
 8018008:	bf00      	nop
 801800a:	3730      	adds	r7, #48	; 0x30
 801800c:	46bd      	mov	sp, r7
 801800e:	bd80      	pop	{r7, pc}
 8018010:	40010000 	.word	0x40010000
 8018014:	40023800 	.word	0x40023800
 8018018:	40020000 	.word	0x40020000
 801801c:	40000400 	.word	0x40000400

08018020 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b088      	sub	sp, #32
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018028:	f107 030c 	add.w	r3, r7, #12
 801802c:	2200      	movs	r2, #0
 801802e:	601a      	str	r2, [r3, #0]
 8018030:	605a      	str	r2, [r3, #4]
 8018032:	609a      	str	r2, [r3, #8]
 8018034:	60da      	str	r2, [r3, #12]
 8018036:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	4a12      	ldr	r2, [pc, #72]	; (8018088 <HAL_TIM_MspPostInit+0x68>)
 801803e:	4293      	cmp	r3, r2
 8018040:	d11e      	bne.n	8018080 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8018042:	2300      	movs	r3, #0
 8018044:	60bb      	str	r3, [r7, #8]
 8018046:	4b11      	ldr	r3, [pc, #68]	; (801808c <HAL_TIM_MspPostInit+0x6c>)
 8018048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801804a:	4a10      	ldr	r2, [pc, #64]	; (801808c <HAL_TIM_MspPostInit+0x6c>)
 801804c:	f043 0310 	orr.w	r3, r3, #16
 8018050:	6313      	str	r3, [r2, #48]	; 0x30
 8018052:	4b0e      	ldr	r3, [pc, #56]	; (801808c <HAL_TIM_MspPostInit+0x6c>)
 8018054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018056:	f003 0310 	and.w	r3, r3, #16
 801805a:	60bb      	str	r3, [r7, #8]
 801805c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = fan_PWM_Pin;
 801805e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018062:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018064:	2302      	movs	r3, #2
 8018066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018068:	2300      	movs	r3, #0
 801806a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801806c:	2300      	movs	r3, #0
 801806e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8018070:	2301      	movs	r3, #1
 8018072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fan_PWM_GPIO_Port, &GPIO_InitStruct);
 8018074:	f107 030c 	add.w	r3, r7, #12
 8018078:	4619      	mov	r1, r3
 801807a:	4805      	ldr	r0, [pc, #20]	; (8018090 <HAL_TIM_MspPostInit+0x70>)
 801807c:	f00e fc3a 	bl	80268f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8018080:	bf00      	nop
 8018082:	3720      	adds	r7, #32
 8018084:	46bd      	mov	sp, r7
 8018086:	bd80      	pop	{r7, pc}
 8018088:	40010000 	.word	0x40010000
 801808c:	40023800 	.word	0x40023800
 8018090:	40021000 	.word	0x40021000

08018094 <CSE_S_x>:
RT_MODEL_CSE_T *const CSE_M = &CSE_M_;
static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy);
void CSE_S_x(const real_T rtu_x[3], real_T rty_x_next[3])
{
 8018094:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018098:	b086      	sub	sp, #24
 801809a:	af00      	add	r7, sp, #0
 801809c:	6078      	str	r0, [r7, #4]
 801809e:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  real_T tmp;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	3308      	adds	r3, #8
 80180a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	3310      	adds	r3, #16
 80180ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180b0:	f7e8 fbbe 	bl	8000830 <__aeabi_ddiv>
 80180b4:	4602      	mov	r2, r0
 80180b6:	460b      	mov	r3, r1
 80180b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
  tmp = exp(-CSE_P.Ts / look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.tau, 12U));
 80180bc:	4b3e      	ldr	r3, [pc, #248]	; (80181b8 <CSE_S_x+0x124>)
 80180be:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80180c2:	4614      	mov	r4, r2
 80180c4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80180c8:	220c      	movs	r2, #12
 80180ca:	493c      	ldr	r1, [pc, #240]	; (80181bc <CSE_S_x+0x128>)
 80180cc:	483c      	ldr	r0, [pc, #240]	; (80181c0 <CSE_S_x+0x12c>)
 80180ce:	ed97 0b04 	vldr	d0, [r7, #16]
 80180d2:	f005 fb47 	bl	801d764 <look1_binlxpw>
 80180d6:	ec53 2b10 	vmov	r2, r3, d0
 80180da:	4620      	mov	r0, r4
 80180dc:	4629      	mov	r1, r5
 80180de:	f7e8 fba7 	bl	8000830 <__aeabi_ddiv>
 80180e2:	4602      	mov	r2, r0
 80180e4:	460b      	mov	r3, r1
 80180e6:	ec43 2b17 	vmov	d7, r2, r3
 80180ea:	eeb0 0a47 	vmov.f32	s0, s14
 80180ee:	eef0 0a67 	vmov.f32	s1, s15
 80180f2:	f016 fc69 	bl	802e9c8 <exp>
 80180f6:	ed87 0b02 	vstr	d0, [r7, #8]
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 80180fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80180fe:	f04f 0000 	mov.w	r0, #0
 8018102:	4930      	ldr	r1, [pc, #192]	; (80181c4 <CSE_S_x+0x130>)
 8018104:	f7e8 f8b2 	bl	800026c <__aeabi_dsub>
 8018108:	4602      	mov	r2, r0
 801810a:	460b      	mov	r3, r1
 801810c:	4610      	mov	r0, r2
 801810e:	4619      	mov	r1, r3
 8018110:	4b2d      	ldr	r3, [pc, #180]	; (80181c8 <CSE_S_x+0x134>)
 8018112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018116:	f7e8 fa61 	bl	80005dc <__aeabi_dmul>
 801811a:	4602      	mov	r2, r0
 801811c:	460b      	mov	r3, r1
 801811e:	4614      	mov	r4, r2
 8018120:	461d      	mov	r5, r3
 8018122:	220c      	movs	r2, #12
 8018124:	4924      	ldr	r1, [pc, #144]	; (80181b8 <CSE_S_x+0x124>)
 8018126:	4826      	ldr	r0, [pc, #152]	; (80181c0 <CSE_S_x+0x12c>)
 8018128:	ed97 0b04 	vldr	d0, [r7, #16]
 801812c:	f005 fb1a 	bl	801d764 <look1_binlxpw>
 8018130:	ec53 2b10 	vmov	r2, r3, d0
 8018134:	4620      	mov	r0, r4
 8018136:	4629      	mov	r1, r5
 8018138:	f7e8 fa50 	bl	80005dc <__aeabi_dmul>
 801813c:	4602      	mov	r2, r0
 801813e:	460b      	mov	r3, r1
 8018140:	4614      	mov	r4, r2
 8018142:	461d      	mov	r5, r3
    CSE_P.soc, CSE_P.Rp, 12U) + tmp * rtu_x[0];
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	e9d3 0100 	ldrd	r0, r1, [r3]
 801814a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801814e:	f7e8 fa45 	bl	80005dc <__aeabi_dmul>
 8018152:	4602      	mov	r2, r0
 8018154:	460b      	mov	r3, r1
 8018156:	4620      	mov	r0, r4
 8018158:	4629      	mov	r1, r5
 801815a:	f7e8 f889 	bl	8000270 <__adddf3>
 801815e:	4602      	mov	r2, r0
 8018160:	460b      	mov	r3, r1
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 8018162:	6839      	ldr	r1, [r7, #0]
 8018164:	e9c1 2300 	strd	r2, r3, [r1]
  rty_x_next[1] = CSE_U.current * CSE_P.Ts + rtu_x[1];
 8018168:	4b17      	ldr	r3, [pc, #92]	; (80181c8 <CSE_S_x+0x134>)
 801816a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801816e:	4b12      	ldr	r3, [pc, #72]	; (80181b8 <CSE_S_x+0x124>)
 8018170:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8018174:	f7e8 fa32 	bl	80005dc <__aeabi_dmul>
 8018178:	4602      	mov	r2, r0
 801817a:	460b      	mov	r3, r1
 801817c:	4690      	mov	r8, r2
 801817e:	4699      	mov	r9, r3
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	3308      	adds	r3, #8
 8018184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018188:	6839      	ldr	r1, [r7, #0]
 801818a:	f101 0408 	add.w	r4, r1, #8
 801818e:	4640      	mov	r0, r8
 8018190:	4649      	mov	r1, r9
 8018192:	f7e8 f86d 	bl	8000270 <__adddf3>
 8018196:	4602      	mov	r2, r0
 8018198:	460b      	mov	r3, r1
 801819a:	e9c4 2300 	strd	r2, r3, [r4]
  rty_x_next[2] = rtu_x[2];
 801819e:	683b      	ldr	r3, [r7, #0]
 80181a0:	f103 0110 	add.w	r1, r3, #16
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80181aa:	e9c1 2300 	strd	r2, r3, [r1]
}
 80181ae:	bf00      	nop
 80181b0:	3718      	adds	r7, #24
 80181b2:	46bd      	mov	sp, r7
 80181b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80181b8:	20000088 	.word	0x20000088
 80181bc:	20000230 	.word	0x20000230
 80181c0:	200001c8 	.word	0x200001c8
 80181c4:	3ff00000 	.word	0x3ff00000
 80181c8:	2001c330 	.word	0x2001c330

080181cc <CSE_M_x>:

void CSE_M_x(const real_T rtu_x[3], real_T *rty_y)
{
 80181cc:	b5b0      	push	{r4, r5, r7, lr}
 80181ce:	b084      	sub	sp, #16
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
 80181d4:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	3308      	adds	r3, #8
 80181da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	3310      	adds	r3, #16
 80181e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181e6:	f7e8 fb23 	bl	8000830 <__aeabi_ddiv>
 80181ea:	4602      	mov	r2, r0
 80181ec:	460b      	mov	r3, r1
 80181ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 80181f2:	4b19      	ldr	r3, [pc, #100]	; (8018258 <CSE_M_x+0x8c>)
 80181f4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80181f8:	220c      	movs	r2, #12
 80181fa:	4918      	ldr	r1, [pc, #96]	; (801825c <CSE_M_x+0x90>)
 80181fc:	4818      	ldr	r0, [pc, #96]	; (8018260 <CSE_M_x+0x94>)
 80181fe:	ed97 0b02 	vldr	d0, [r7, #8]
 8018202:	f005 faaf 	bl	801d764 <look1_binlxpw>
 8018206:	ec53 2b10 	vmov	r2, r3, d0
 801820a:	4620      	mov	r0, r4
 801820c:	4629      	mov	r1, r5
 801820e:	f7e8 f9e5 	bl	80005dc <__aeabi_dmul>
 8018212:	4602      	mov	r2, r0
 8018214:	460b      	mov	r3, r1
 8018216:	4614      	mov	r4, r2
 8018218:	461d      	mov	r5, r3
            + look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 801821a:	220c      	movs	r2, #12
 801821c:	4911      	ldr	r1, [pc, #68]	; (8018264 <CSE_M_x+0x98>)
 801821e:	4810      	ldr	r0, [pc, #64]	; (8018260 <CSE_M_x+0x94>)
 8018220:	ed97 0b02 	vldr	d0, [r7, #8]
 8018224:	f005 fa9e 	bl	801d764 <look1_binlxpw>
 8018228:	ec53 2b10 	vmov	r2, r3, d0
 801822c:	4620      	mov	r0, r4
 801822e:	4629      	mov	r1, r5
 8018230:	f7e8 f81e 	bl	8000270 <__adddf3>
 8018234:	4602      	mov	r2, r0
 8018236:	460b      	mov	r3, r1
 8018238:	4610      	mov	r0, r2
 801823a:	4619      	mov	r1, r3
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018242:	f7e8 f815 	bl	8000270 <__adddf3>
 8018246:	4602      	mov	r2, r0
 8018248:	460b      	mov	r3, r1
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 801824a:	6839      	ldr	r1, [r7, #0]
 801824c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8018250:	bf00      	nop
 8018252:	3710      	adds	r7, #16
 8018254:	46bd      	mov	sp, r7
 8018256:	bdb0      	pop	{r4, r5, r7, pc}
 8018258:	2001c330 	.word	0x2001c330
 801825c:	200000f0 	.word	0x200000f0
 8018260:	200001c8 	.word	0x200001c8
 8018264:	20000160 	.word	0x20000160

08018268 <UKFCorrectorAdditive_getPredict>:

static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy)
{
 8018268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801826c:	ed2d 8b02 	vpush	{d8}
 8018270:	b0e1      	sub	sp, #388	; 0x184
 8018272:	af04      	add	r7, sp, #16
 8018274:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8018278:	ed84 0b00 	vstr	d0, [r4]
 801827c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8018280:	6020      	str	r0, [r4, #0]
 8018282:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8018286:	6001      	str	r1, [r0, #0]
 8018288:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801828c:	ed81 1b00 	vstr	d1, [r1]
 8018290:	f107 0120 	add.w	r1, r7, #32
 8018294:	ed81 2b00 	vstr	d2, [r1]
 8018298:	f107 0118 	add.w	r1, r7, #24
 801829c:	ed81 3b00 	vstr	d3, [r1]
 80182a0:	f107 0114 	add.w	r1, r7, #20
 80182a4:	600a      	str	r2, [r1, #0]
 80182a6:	f107 0210 	add.w	r2, r7, #16
 80182aa:	6013      	str	r3, [r2, #0]
  real_T Wmean[2];
  real_T tempY;
  real_T tempY_tmp;
  int32_T knt;
  int32_T knt_0;
  tempY_tmp = alpha * alpha;
 80182ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80182b0:	e9d1 2300 	ldrd	r2, r3, [r1]
 80182b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80182b8:	f7e8 f990 	bl	80005dc <__aeabi_dmul>
 80182bc:	4602      	mov	r2, r0
 80182be:	460b      	mov	r3, r1
 80182c0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80182c4:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = (kappa + 3.0) * tempY_tmp;
 80182c8:	f107 0118 	add.w	r1, r7, #24
 80182cc:	f04f 0200 	mov.w	r2, #0
 80182d0:	4b96      	ldr	r3, [pc, #600]	; (801852c <UKFCorrectorAdditive_getPredict+0x2c4>)
 80182d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80182d6:	f7e7 ffcb 	bl	8000270 <__adddf3>
 80182da:	4602      	mov	r2, r0
 80182dc:	460b      	mov	r3, r1
 80182de:	4610      	mov	r0, r2
 80182e0:	4619      	mov	r1, r3
 80182e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80182e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182ea:	f7e8 f977 	bl	80005dc <__aeabi_dmul>
 80182ee:	4602      	mov	r2, r0
 80182f0:	460b      	mov	r3, r1
 80182f2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80182f6:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[0] = 1.0 - 3.0 / tempY;
 80182fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80182fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018302:	f04f 0000 	mov.w	r0, #0
 8018306:	4989      	ldr	r1, [pc, #548]	; (801852c <UKFCorrectorAdditive_getPredict+0x2c4>)
 8018308:	f7e8 fa92 	bl	8000830 <__aeabi_ddiv>
 801830c:	4602      	mov	r2, r0
 801830e:	460b      	mov	r3, r1
 8018310:	f04f 0000 	mov.w	r0, #0
 8018314:	4986      	ldr	r1, [pc, #536]	; (8018530 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8018316:	f7e7 ffa9 	bl	800026c <__aeabi_dsub>
 801831a:	4602      	mov	r2, r0
 801831c:	460b      	mov	r3, r1
 801831e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8018322:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = 1.0 / (2.0 * tempY);
 8018326:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801832a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801832e:	4602      	mov	r2, r0
 8018330:	460b      	mov	r3, r1
 8018332:	f7e7 ff9d 	bl	8000270 <__adddf3>
 8018336:	4602      	mov	r2, r0
 8018338:	460b      	mov	r3, r1
 801833a:	f04f 0000 	mov.w	r0, #0
 801833e:	497c      	ldr	r1, [pc, #496]	; (8018530 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8018340:	f7e8 fa76 	bl	8000830 <__aeabi_ddiv>
 8018344:	4602      	mov	r2, r0
 8018346:	460b      	mov	r3, r1
 8018348:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801834c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  Wcov[0] = ((1.0 - tempY_tmp) + beta) + Wmean[0];
 8018350:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018358:	f04f 0000 	mov.w	r0, #0
 801835c:	4974      	ldr	r1, [pc, #464]	; (8018530 <UKFCorrectorAdditive_getPredict+0x2c8>)
 801835e:	f7e7 ff85 	bl	800026c <__aeabi_dsub>
 8018362:	4602      	mov	r2, r0
 8018364:	460b      	mov	r3, r1
 8018366:	4610      	mov	r0, r2
 8018368:	4619      	mov	r1, r3
 801836a:	f107 0320 	add.w	r3, r7, #32
 801836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018372:	f7e7 ff7d 	bl	8000270 <__adddf3>
 8018376:	4602      	mov	r2, r0
 8018378:	460b      	mov	r3, r1
 801837a:	4610      	mov	r0, r2
 801837c:	4619      	mov	r1, r3
 801837e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018386:	f7e7 ff73 	bl	8000270 <__adddf3>
 801838a:	4602      	mov	r2, r0
 801838c:	460b      	mov	r3, r1
 801838e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8018392:	e9c1 2300 	strd	r2, r3, [r1]
  Wcov[1] = Wmean[1];
 8018396:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801839a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801839e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80183a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (Wmean[0] != 0.0) {
 80183a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80183aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80183ae:	f04f 0200 	mov.w	r2, #0
 80183b2:	f04f 0300 	mov.w	r3, #0
 80183b6:	f7e8 fb79 	bl	8000aac <__aeabi_dcmpeq>
 80183ba:	4603      	mov	r3, r0
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d154      	bne.n	801846a <UKFCorrectorAdditive_getPredict+0x202>
    real_T Wcov_0;
    *Sy = Wmean[0];
 80183c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80183c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183c8:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80183cc:	e9c1 2300 	strd	r2, r3, [r1]
    tempY_tmp = Wmean[0];
 80183d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80183d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183d8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80183dc:	e9c1 2300 	strd	r2, r3, [r1]
    Wmean[0] /= Wmean[0];
 80183e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80183e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80183e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80183ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183f0:	f7e8 fa1e 	bl	8000830 <__aeabi_ddiv>
 80183f4:	4602      	mov	r2, r0
 80183f6:	460b      	mov	r3, r1
 80183f8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80183fc:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov[0] /= *Sy;
 8018400:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8018404:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018408:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018410:	f7e8 fa0e 	bl	8000830 <__aeabi_ddiv>
 8018414:	4602      	mov	r2, r0
 8018416:	460b      	mov	r3, r1
 8018418:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801841c:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov_0 = Wmean[1];
 8018420:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018424:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018428:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    Wmean[1] /= tempY_tmp;
 801842c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018430:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8018434:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801843c:	f7e8 f9f8 	bl	8000830 <__aeabi_ddiv>
 8018440:	4602      	mov	r2, r0
 8018442:	460b      	mov	r3, r1
 8018444:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8018448:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Wcov[1] = Wcov_0 / *Sy;
 801844c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018454:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8018458:	f7e8 f9ea 	bl	8000830 <__aeabi_ddiv>
 801845c:	4602      	mov	r2, r0
 801845e:	460b      	mov	r3, r1
 8018460:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8018464:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8018468:	e006      	b.n	8018478 <UKFCorrectorAdditive_getPredict+0x210>
  } else {
    *Sy = 1.0;
 801846a:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 801846e:	f04f 0200 	mov.w	r2, #0
 8018472:	4b2f      	ldr	r3, [pc, #188]	; (8018530 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8018474:	e9c1 2300 	strd	r2, r3, [r1]
  }

  tempY = sqrt(tempY);
 8018478:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801847c:	ed93 7b00 	vldr	d7, [r3]
 8018480:	eeb0 0a47 	vmov.f32	s0, s14
 8018484:	eef0 0a67 	vmov.f32	s1, s15
 8018488:	f016 fb36 	bl	802eaf8 <sqrt>
 801848c:	eeb0 7a40 	vmov.f32	s14, s0
 8018490:	eef0 7a60 	vmov.f32	s15, s1
 8018494:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018498:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 9; knt++) {
 801849c:	2300      	movs	r3, #0
 801849e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80184a2:	e037      	b.n	8018514 <UKFCorrectorAdditive_getPredict+0x2ac>
    tempY_tmp = tempY * S[knt];
 80184a4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80184a8:	00db      	lsls	r3, r3, #3
 80184aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80184ae:	6812      	ldr	r2, [r2, #0]
 80184b0:	4413      	add	r3, r2
 80184b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80184b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80184ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184be:	f7e8 f88d 	bl	80005dc <__aeabi_dmul>
 80184c2:	4602      	mov	r2, r0
 80184c4:	460b      	mov	r3, r1
 80184c6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80184ca:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt] = tempY_tmp;
 80184ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80184d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184d6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80184da:	00c9      	lsls	r1, r1, #3
 80184dc:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80184e0:	4401      	add	r1, r0
 80184e2:	39a0      	subs	r1, #160	; 0xa0
 80184e4:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt + 9] = -tempY_tmp;
 80184e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80184ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80184f4:	3109      	adds	r1, #9
 80184f6:	4690      	mov	r8, r2
 80184f8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80184fc:	00cb      	lsls	r3, r1, #3
 80184fe:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8018502:	4413      	add	r3, r2
 8018504:	3ba0      	subs	r3, #160	; 0xa0
 8018506:	e9c3 8900 	strd	r8, r9, [r3]
  for (knt = 0; knt < 9; knt++) {
 801850a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801850e:	3301      	adds	r3, #1
 8018510:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8018514:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018518:	2b08      	cmp	r3, #8
 801851a:	ddc3      	ble.n	80184a4 <UKFCorrectorAdditive_getPredict+0x23c>
  }

  knt_0 = 0;
 801851c:	2300      	movs	r3, #0
 801851e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8018522:	2300      	movs	r3, #0
 8018524:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8018528:	e065      	b.n	80185f6 <UKFCorrectorAdditive_getPredict+0x38e>
 801852a:	bf00      	nop
 801852c:	40080000 	.word	0x40080000
 8018530:	3ff00000 	.word	0x3ff00000
    X2[knt_0] += X1[0];
 8018534:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8018538:	00db      	lsls	r3, r3, #3
 801853a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801853e:	4413      	add	r3, r2
 8018540:	3ba0      	subs	r3, #160	; 0xa0
 8018542:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018546:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018550:	f7e7 fe8e 	bl	8000270 <__adddf3>
 8018554:	4602      	mov	r2, r0
 8018556:	460b      	mov	r3, r1
 8018558:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 801855c:	00c9      	lsls	r1, r1, #3
 801855e:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8018562:	4401      	add	r1, r0
 8018564:	39a0      	subs	r1, #160	; 0xa0
 8018566:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 1] += X1[1];
 801856a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801856e:	3301      	adds	r3, #1
 8018570:	00db      	lsls	r3, r3, #3
 8018572:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8018576:	4413      	add	r3, r2
 8018578:	3ba0      	subs	r3, #160	; 0xa0
 801857a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801857e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	3308      	adds	r3, #8
 8018586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801858a:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 801858e:	3401      	adds	r4, #1
 8018590:	f7e7 fe6e 	bl	8000270 <__adddf3>
 8018594:	4602      	mov	r2, r0
 8018596:	460b      	mov	r3, r1
 8018598:	00e1      	lsls	r1, r4, #3
 801859a:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 801859e:	4401      	add	r1, r0
 80185a0:	39a0      	subs	r1, #160	; 0xa0
 80185a2:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 2] += X1[2];
 80185a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80185aa:	3302      	adds	r3, #2
 80185ac:	00db      	lsls	r3, r3, #3
 80185ae:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80185b2:	4413      	add	r3, r2
 80185b4:	3ba0      	subs	r3, #160	; 0xa0
 80185b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80185ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	3310      	adds	r3, #16
 80185c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185c6:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 80185ca:	3402      	adds	r4, #2
 80185cc:	f7e7 fe50 	bl	8000270 <__adddf3>
 80185d0:	4602      	mov	r2, r0
 80185d2:	460b      	mov	r3, r1
 80185d4:	00e1      	lsls	r1, r4, #3
 80185d6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80185da:	4401      	add	r1, r0
 80185dc:	39a0      	subs	r1, #160	; 0xa0
 80185de:	e9c1 2300 	strd	r2, r3, [r1]
    knt_0 += 3;
 80185e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80185e6:	3303      	adds	r3, #3
 80185e8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 80185ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80185f0:	3301      	adds	r3, #1
 80185f2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80185f6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80185fa:	2b05      	cmp	r3, #5
 80185fc:	dd9a      	ble.n	8018534 <UKFCorrectorAdditive_getPredict+0x2cc>
  }

  knt_0 = 0;
 80185fe:	2300      	movs	r3, #0
 8018600:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8018604:	2300      	movs	r3, #0
 8018606:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 801860a:	e018      	b.n	801863e <UKFCorrectorAdditive_getPredict+0x3d6>
    CSE_M_x(&X2[knt_0], &Y2[knt]);
 801860c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8018610:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8018614:	00db      	lsls	r3, r3, #3
 8018616:	18d0      	adds	r0, r2, r3
 8018618:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801861c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018620:	00db      	lsls	r3, r3, #3
 8018622:	4413      	add	r3, r2
 8018624:	4619      	mov	r1, r3
 8018626:	f7ff fdd1 	bl	80181cc <CSE_M_x>
    knt_0 += 3;
 801862a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801862e:	3303      	adds	r3, #3
 8018630:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8018634:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018638:	3301      	adds	r3, #1
 801863a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 801863e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018642:	2b05      	cmp	r3, #5
 8018644:	dde2      	ble.n	801860c <UKFCorrectorAdditive_getPredict+0x3a4>
  }

  CSE_M_x(X1, &tempY);
 8018646:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801864a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801864e:	4611      	mov	r1, r2
 8018650:	6818      	ldr	r0, [r3, #0]
 8018652:	f7ff fdbb 	bl	80181cc <CSE_M_x>
  for (knt = 0; knt < 6; knt++) {
 8018656:	2300      	movs	r3, #0
 8018658:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 801865c:	e027      	b.n	80186ae <UKFCorrectorAdditive_getPredict+0x446>
    Y2_0[knt] = (Y2[knt] - tempY) + tempY;
 801865e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018662:	00db      	lsls	r3, r3, #3
 8018664:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8018668:	4413      	add	r3, r2
 801866a:	3bd0      	subs	r3, #208	; 0xd0
 801866c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018670:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018678:	f7e7 fdf8 	bl	800026c <__aeabi_dsub>
 801867c:	4602      	mov	r2, r0
 801867e:	460b      	mov	r3, r1
 8018680:	4610      	mov	r0, r2
 8018682:	4619      	mov	r1, r3
 8018684:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801868c:	f7e7 fdf0 	bl	8000270 <__adddf3>
 8018690:	4602      	mov	r2, r0
 8018692:	460b      	mov	r3, r1
 8018694:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8018698:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 801869c:	00c9      	lsls	r1, r1, #3
 801869e:	4401      	add	r1, r0
 80186a0:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 80186a4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80186a8:	3301      	adds	r3, #1
 80186aa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80186ae:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80186b2:	2b05      	cmp	r3, #5
 80186b4:	ddd3      	ble.n	801865e <UKFCorrectorAdditive_getPredict+0x3f6>
  }

  UTMeanCovSqrt_C6QfB9Td(Wmean, Wcov, *Sy, tempY, Y2_0, X1, X2, Ymean,
 80186b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80186ba:	ed93 7b00 	vldr	d7, [r3]
 80186be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80186c2:	ed93 6b00 	vldr	d6, [r3]
 80186c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80186ca:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80186ce:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80186d2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80186d6:	f107 0210 	add.w	r2, r7, #16
 80186da:	6812      	ldr	r2, [r2, #0]
 80186dc:	9203      	str	r2, [sp, #12]
 80186de:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80186e2:	9202      	str	r2, [sp, #8]
 80186e4:	f107 0214 	add.w	r2, r7, #20
 80186e8:	6812      	ldr	r2, [r2, #0]
 80186ea:	9201      	str	r2, [sp, #4]
 80186ec:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80186f0:	9200      	str	r2, [sp, #0]
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	4622      	mov	r2, r4
 80186f6:	eeb0 1a46 	vmov.f32	s2, s12
 80186fa:	eef0 1a66 	vmov.f32	s3, s13
 80186fe:	eeb0 0a47 	vmov.f32	s0, s14
 8018702:	eef0 0a67 	vmov.f32	s1, s15
 8018706:	f004 fbd3 	bl	801ceb0 <UTMeanCovSqrt_C6QfB9Td>
    &tempY_tmp, Pxy);
  Wmean[0] = tempY_tmp;
 801870a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018712:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8018716:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = Rs;
 801871a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801871e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018726:	e9c1 2302 	strd	r2, r3, [r1, #8]
  *Sy = tempY_tmp;
 801872a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801872e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018732:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8018736:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = xnrm2_Mnmxg9YT(1, Wmean, 2);
 801873a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801873e:	2202      	movs	r2, #2
 8018740:	4619      	mov	r1, r3
 8018742:	2001      	movs	r0, #1
 8018744:	f009 fee6 	bl	8022514 <xnrm2_Mnmxg9YT>
 8018748:	eeb0 7a40 	vmov.f32	s14, s0
 801874c:	eef0 7a60 	vmov.f32	s15, s1
 8018750:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018754:	ed83 7b00 	vstr	d7, [r3]
  if (tempY != 0.0) {
 8018758:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801875c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018760:	f04f 0200 	mov.w	r2, #0
 8018764:	f04f 0300 	mov.w	r3, #0
 8018768:	f7e8 f9a0 	bl	8000aac <__aeabi_dcmpeq>
 801876c:	4603      	mov	r3, r0
 801876e:	2b00      	cmp	r3, #0
 8018770:	d000      	beq.n	8018774 <UKFCorrectorAdditive_getPredict+0x50c>
      *Sy = tempY;
    } else {
      *Sy = tempY;
    }
  }
}
 8018772:	e0fa      	b.n	801896a <UKFCorrectorAdditive_getPredict+0x702>
    tempY = rt_hypotd_snf(tempY_tmp, tempY);
 8018774:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018778:	ed93 7b00 	vldr	d7, [r3]
 801877c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018780:	ed93 6b00 	vldr	d6, [r3]
 8018784:	eeb0 1a46 	vmov.f32	s2, s12
 8018788:	eef0 1a66 	vmov.f32	s3, s13
 801878c:	eeb0 0a47 	vmov.f32	s0, s14
 8018790:	eef0 0a67 	vmov.f32	s1, s15
 8018794:	f007 fb34 	bl	801fe00 <rt_hypotd_snf>
 8018798:	eeb0 7a40 	vmov.f32	s14, s0
 801879c:	eef0 7a60 	vmov.f32	s15, s1
 80187a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80187a4:	ed83 7b00 	vstr	d7, [r3]
    if (tempY_tmp >= 0.0) {
 80187a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80187ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80187b0:	f04f 0200 	mov.w	r2, #0
 80187b4:	f04f 0300 	mov.w	r3, #0
 80187b8:	f7e8 f996 	bl	8000ae8 <__aeabi_dcmpge>
 80187bc:	4603      	mov	r3, r0
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d00a      	beq.n	80187d8 <UKFCorrectorAdditive_getPredict+0x570>
      tempY = -tempY;
 80187c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80187c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187ca:	4615      	mov	r5, r2
 80187cc:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 80187d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80187d4:	e9c3 5600 	strd	r5, r6, [r3]
    if (fabs(tempY) < 1.0020841800044864E-292) {
 80187d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80187dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187e0:	60ba      	str	r2, [r7, #8]
 80187e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80187e6:	60fb      	str	r3, [r7, #12]
 80187e8:	f04f 0200 	mov.w	r2, #0
 80187ec:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80187f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80187f4:	f7e8 f964 	bl	8000ac0 <__aeabi_dcmplt>
 80187f8:	4603      	mov	r3, r0
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	f000 80ad 	beq.w	801895a <UKFCorrectorAdditive_getPredict+0x6f2>
      knt = 0;
 8018800:	2300      	movs	r3, #0
 8018802:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        knt++;
 8018806:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801880a:	3301      	adds	r3, #1
 801880c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        Wmean[1] *= 9.9792015476736E+291;
 8018810:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018814:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8018818:	f04f 0200 	mov.w	r2, #0
 801881c:	4b57      	ldr	r3, [pc, #348]	; (801897c <UKFCorrectorAdditive_getPredict+0x714>)
 801881e:	f7e7 fedd 	bl	80005dc <__aeabi_dmul>
 8018822:	4602      	mov	r2, r0
 8018824:	460b      	mov	r3, r1
 8018826:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801882a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        tempY *= 9.9792015476736E+291;
 801882e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018832:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018836:	f04f 0200 	mov.w	r2, #0
 801883a:	4b50      	ldr	r3, [pc, #320]	; (801897c <UKFCorrectorAdditive_getPredict+0x714>)
 801883c:	f7e7 fece 	bl	80005dc <__aeabi_dmul>
 8018840:	4602      	mov	r2, r0
 8018842:	460b      	mov	r3, r1
 8018844:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8018848:	e9c1 2300 	strd	r2, r3, [r1]
        *Sy *= 9.9792015476736E+291;
 801884c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018850:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018854:	f04f 0200 	mov.w	r2, #0
 8018858:	4b48      	ldr	r3, [pc, #288]	; (801897c <UKFCorrectorAdditive_getPredict+0x714>)
 801885a:	f7e7 febf 	bl	80005dc <__aeabi_dmul>
 801885e:	4602      	mov	r2, r0
 8018860:	460b      	mov	r3, r1
 8018862:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8018866:	e9c1 2300 	strd	r2, r3, [r1]
      } while ((fabs(tempY) < 1.0020841800044864E-292) && (knt < 20));
 801886a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018872:	603a      	str	r2, [r7, #0]
 8018874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018878:	607b      	str	r3, [r7, #4]
 801887a:	f04f 0200 	mov.w	r2, #0
 801887e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8018882:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018886:	f7e8 f91b 	bl	8000ac0 <__aeabi_dcmplt>
 801888a:	4603      	mov	r3, r0
 801888c:	2b00      	cmp	r3, #0
 801888e:	d003      	beq.n	8018898 <UKFCorrectorAdditive_getPredict+0x630>
 8018890:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018894:	2b13      	cmp	r3, #19
 8018896:	ddb6      	ble.n	8018806 <UKFCorrectorAdditive_getPredict+0x59e>
      tempY = rt_hypotd_snf(*Sy, xnrm2_Mnmxg9YT(1, Wmean, 2));
 8018898:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801889c:	ed93 8b00 	vldr	d8, [r3]
 80188a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80188a4:	2202      	movs	r2, #2
 80188a6:	4619      	mov	r1, r3
 80188a8:	2001      	movs	r0, #1
 80188aa:	f009 fe33 	bl	8022514 <xnrm2_Mnmxg9YT>
 80188ae:	eeb0 7a40 	vmov.f32	s14, s0
 80188b2:	eef0 7a60 	vmov.f32	s15, s1
 80188b6:	eeb0 1a47 	vmov.f32	s2, s14
 80188ba:	eef0 1a67 	vmov.f32	s3, s15
 80188be:	eeb0 0a48 	vmov.f32	s0, s16
 80188c2:	eef0 0a68 	vmov.f32	s1, s17
 80188c6:	f007 fa9b 	bl	801fe00 <rt_hypotd_snf>
 80188ca:	eeb0 7a40 	vmov.f32	s14, s0
 80188ce:	eef0 7a60 	vmov.f32	s15, s1
 80188d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80188d6:	ed83 7b00 	vstr	d7, [r3]
      if (*Sy >= 0.0) {
 80188da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80188de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80188e2:	f04f 0200 	mov.w	r2, #0
 80188e6:	f04f 0300 	mov.w	r3, #0
 80188ea:	f7e8 f8fd 	bl	8000ae8 <__aeabi_dcmpge>
 80188ee:	4603      	mov	r3, r0
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d00a      	beq.n	801890a <UKFCorrectorAdditive_getPredict+0x6a2>
        tempY = -tempY;
 80188f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80188f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188fc:	4692      	mov	sl, r2
 80188fe:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8018902:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018906:	e9c3 ab00 	strd	sl, fp, [r3]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 801890a:	2300      	movs	r3, #0
 801890c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8018910:	e014      	b.n	801893c <UKFCorrectorAdditive_getPredict+0x6d4>
        tempY *= 1.0020841800044864E-292;
 8018912:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018916:	e9d3 0100 	ldrd	r0, r1, [r3]
 801891a:	f04f 0200 	mov.w	r2, #0
 801891e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8018922:	f7e7 fe5b 	bl	80005dc <__aeabi_dmul>
 8018926:	4602      	mov	r2, r0
 8018928:	460b      	mov	r3, r1
 801892a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801892e:	e9c1 2300 	strd	r2, r3, [r1]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8018932:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8018936:	3301      	adds	r3, #1
 8018938:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 801893c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8018940:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018944:	429a      	cmp	r2, r3
 8018946:	dbe4      	blt.n	8018912 <UKFCorrectorAdditive_getPredict+0x6aa>
      *Sy = tempY;
 8018948:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018950:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8018954:	e9c1 2300 	strd	r2, r3, [r1]
}
 8018958:	e007      	b.n	801896a <UKFCorrectorAdditive_getPredict+0x702>
      *Sy = tempY;
 801895a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018962:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8018966:	e9c1 2300 	strd	r2, r3, [r1]
}
 801896a:	bf00      	nop
 801896c:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8018970:	46bd      	mov	sp, r7
 8018972:	ecbd 8b02 	vpop	{d8}
 8018976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801897a:	bf00      	nop
 801897c:	7c900000 	.word	0x7c900000

08018980 <CSE_step>:

void CSE_step(void)
{
 8018980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018984:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 8018988:	af06      	add	r7, sp, #24
  int32_T iAcol_0;
  static const real_T Wmean[2] = { 1.0, -0.1666668333335 };

  static const real_T Wcov[2] = { 0.999996999998, -0.1666668333335 };

  if (CSE_P.Enable1_Value) {
 801898a:	4bb3      	ldr	r3, [pc, #716]	; (8018c58 <CSE_step+0x2d8>)
 801898c:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
 8018990:	2b00      	cmp	r3, #0
 8018992:	f001 803e 	beq.w	8019a12 <CSE_step+0x1092>
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8018996:	2300      	movs	r3, #0
 8018998:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    CSE_M_x(CSE_DW.x, &s_0);
 801899c:	f107 0308 	add.w	r3, r7, #8
 80189a0:	4619      	mov	r1, r3
 80189a2:	48ae      	ldr	r0, [pc, #696]	; (8018c5c <CSE_step+0x2dc>)
 80189a4:	f7ff fc12 	bl	80181cc <CSE_M_x>
    UKFCorrectorAdditive_getPredict(CSE_P.R1_Value, CSE_DW.x, CSE_DW.P, 0.001,
 80189a8:	4bab      	ldr	r3, [pc, #684]	; (8018c58 <CSE_step+0x2d8>)
 80189aa:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 80189ae:	f107 0110 	add.w	r1, r7, #16
 80189b2:	f107 0208 	add.w	r2, r7, #8
 80189b6:	463b      	mov	r3, r7
 80189b8:	9300      	str	r3, [sp, #0]
 80189ba:	460b      	mov	r3, r1
 80189bc:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 8018c40 <CSE_step+0x2c0>
 80189c0:	ed9f 2ba1 	vldr	d2, [pc, #644]	; 8018c48 <CSE_step+0x2c8>
 80189c4:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8018c50 <CSE_step+0x2d0>
 80189c8:	49a5      	ldr	r1, [pc, #660]	; (8018c60 <CSE_step+0x2e0>)
 80189ca:	48a4      	ldr	r0, [pc, #656]	; (8018c5c <CSE_step+0x2dc>)
 80189cc:	eeb0 0a47 	vmov.f32	s0, s14
 80189d0:	eef0 0a67 	vmov.f32	s1, s15
 80189d4:	f7ff fc48 	bl	8018268 <UKFCorrectorAdditive_getPredict>
      2.0, 0.0, &s_0, tempY, &temp);
    s_0 = CSE_U.y - s_0;
 80189d8:	4ba2      	ldr	r3, [pc, #648]	; (8018c64 <CSE_step+0x2e4>)
 80189da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80189de:	f107 0308 	add.w	r3, r7, #8
 80189e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189e6:	f7e7 fc41 	bl	800026c <__aeabi_dsub>
 80189ea:	4602      	mov	r2, r0
 80189ec:	460b      	mov	r3, r1
 80189ee:	f107 0108 	add.w	r1, r7, #8
 80189f2:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 = 0;
 80189f6:	2300      	movs	r3, #0
 80189f8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80189fc:	2300      	movs	r3, #0
 80189fe:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8018a02:	e04a      	b.n	8018a9a <CSE_step+0x11a>
      R[iAcol_0] = CSE_DW.P[iAcol];
 8018a04:	4a96      	ldr	r2, [pc, #600]	; (8018c60 <CSE_step+0x2e0>)
 8018a06:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018a0a:	00db      	lsls	r3, r3, #3
 8018a0c:	4413      	add	r3, r2
 8018a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a12:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8018a16:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8018a1a:	00c9      	lsls	r1, r1, #3
 8018a1c:	4401      	add	r1, r0
 8018a1e:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 1] = CSE_DW.P[iAcol + 3];
 8018a22:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018a26:	3303      	adds	r3, #3
 8018a28:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8018a2c:	1c51      	adds	r1, r2, #1
 8018a2e:	4a8c      	ldr	r2, [pc, #560]	; (8018c60 <CSE_step+0x2e0>)
 8018a30:	00db      	lsls	r3, r3, #3
 8018a32:	4413      	add	r3, r2
 8018a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a38:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8018a3c:	00c9      	lsls	r1, r1, #3
 8018a3e:	4401      	add	r1, r0
 8018a40:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 2] = CSE_DW.P[iAcol + 6];
 8018a44:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018a48:	3306      	adds	r3, #6
 8018a4a:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8018a4e:	1c91      	adds	r1, r2, #2
 8018a50:	4a83      	ldr	r2, [pc, #524]	; (8018c60 <CSE_step+0x2e0>)
 8018a52:	00db      	lsls	r3, r3, #3
 8018a54:	4413      	add	r3, r2
 8018a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a5a:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8018a5e:	00c9      	lsls	r1, r1, #3
 8018a60:	4401      	add	r1, r0
 8018a62:	e9c1 2300 	strd	r2, r3, [r1]
      C[iAcol] = tempY[iAcol];
 8018a66:	f107 0210 	add.w	r2, r7, #16
 8018a6a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018a6e:	00db      	lsls	r3, r3, #3
 8018a70:	4413      	add	r3, r2
 8018a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a76:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8018a7a:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8018a7e:	00c9      	lsls	r1, r1, #3
 8018a80:	4401      	add	r1, r0
 8018a82:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8018a86:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018a8a:	3303      	adds	r3, #3
 8018a8c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8018a90:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018a94:	3301      	adds	r3, #1
 8018a96:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8018a9a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018a9e:	2b02      	cmp	r3, #2
 8018aa0:	ddb0      	ble.n	8018a04 <CSE_step+0x84>
    }

    trisolve_BC1XmAGq(temp, C);
 8018aa2:	463b      	mov	r3, r7
 8018aa4:	ed93 7b00 	vldr	d7, [r3]
 8018aa8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018aac:	4618      	mov	r0, r3
 8018aae:	eeb0 0a47 	vmov.f32	s0, s14
 8018ab2:	eef0 0a67 	vmov.f32	s1, s15
 8018ab6:	f009 f8c7 	bl	8021c48 <trisolve_BC1XmAGq>
    K[0] = C[0];
 8018aba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ac2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018ac6:	e9c1 2300 	strd	r2, r3, [r1]
    K[1] = C[1];
 8018aca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018ace:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018ad2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018ad6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    K[2] = C[2];
 8018ada:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018ade:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018ae2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018ae6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    trisolve_BC1XmAGq(temp, K);
 8018aea:	463b      	mov	r3, r7
 8018aec:	ed93 7b00 	vldr	d7, [r3]
 8018af0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018af4:	4618      	mov	r0, r3
 8018af6:	eeb0 0a47 	vmov.f32	s0, s14
 8018afa:	eef0 0a67 	vmov.f32	s1, s15
 8018afe:	f009 f8a3 	bl	8021c48 <trisolve_BC1XmAGq>
    tempY[0] = K[0] * temp;
 8018b02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018b06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018b0a:	463b      	mov	r3, r7
 8018b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b10:	f7e7 fd64 	bl	80005dc <__aeabi_dmul>
 8018b14:	4602      	mov	r2, r0
 8018b16:	460b      	mov	r3, r1
 8018b18:	f107 0110 	add.w	r1, r7, #16
 8018b1c:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8018b20:	2300      	movs	r3, #0
 8018b22:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8018b26:	e011      	b.n	8018b4c <CSE_step+0x1cc>
      R[iAcol + 1] = 0.0;
 8018b28:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018b2c:	3301      	adds	r3, #1
 8018b2e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018b32:	00db      	lsls	r3, r3, #3
 8018b34:	18d1      	adds	r1, r2, r3
 8018b36:	f04f 0200 	mov.w	r2, #0
 8018b3a:	f04f 0300 	mov.w	r3, #0
 8018b3e:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8018b42:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018b46:	3301      	adds	r3, #1
 8018b48:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8018b4c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018b50:	2b01      	cmp	r3, #1
 8018b52:	dde9      	ble.n	8018b28 <CSE_step+0x1a8>
    }

    tempY[1] = K[1] * temp;
 8018b54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018b58:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8018b5c:	463b      	mov	r3, r7
 8018b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b62:	f7e7 fd3b 	bl	80005dc <__aeabi_dmul>
 8018b66:	4602      	mov	r2, r0
 8018b68:	460b      	mov	r3, r1
 8018b6a:	f107 0110 	add.w	r1, r7, #16
 8018b6e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    R[5] = 0.0;
 8018b72:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8018b76:	f04f 0200 	mov.w	r2, #0
 8018b7a:	f04f 0300 	mov.w	r3, #0
 8018b7e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    tempY[2] = K[2] * temp;
 8018b82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018b86:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8018b8a:	463b      	mov	r3, r7
 8018b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b90:	f7e7 fd24 	bl	80005dc <__aeabi_dmul>
 8018b94:	4602      	mov	r2, r0
 8018b96:	460b      	mov	r3, r1
 8018b98:	f107 0110 	add.w	r1, r7, #16
 8018b9c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    errorCondition = (R[0] == 0.0);
 8018ba0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018ba4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018ba8:	2301      	movs	r3, #1
 8018baa:	461e      	mov	r6, r3
 8018bac:	f04f 0200 	mov.w	r2, #0
 8018bb0:	f04f 0300 	mov.w	r3, #0
 8018bb4:	f7e7 ff7a 	bl	8000aac <__aeabi_dcmpeq>
 8018bb8:	4603      	mov	r3, r0
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d101      	bne.n	8018bc2 <CSE_step+0x242>
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	461e      	mov	r6, r3
 8018bc2:	b2f3      	uxtb	r3, r6
 8018bc4:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    if (!errorCondition) {
 8018bc8:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d113      	bne.n	8018bf8 <CSE_step+0x278>
      errorCondition = (R[4] == 0.0);
 8018bd0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018bd4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8018bd8:	2301      	movs	r3, #1
 8018bda:	461e      	mov	r6, r3
 8018bdc:	f04f 0200 	mov.w	r2, #0
 8018be0:	f04f 0300 	mov.w	r3, #0
 8018be4:	f7e7 ff62 	bl	8000aac <__aeabi_dcmpeq>
 8018be8:	4603      	mov	r3, r0
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d101      	bne.n	8018bf2 <CSE_step+0x272>
 8018bee:	2300      	movs	r3, #0
 8018bf0:	461e      	mov	r6, r3
 8018bf2:	b2f3      	uxtb	r3, r6
 8018bf4:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    if (!errorCondition) {
 8018bf8:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d113      	bne.n	8018c28 <CSE_step+0x2a8>
      errorCondition = (R[8] == 0.0);
 8018c00:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018c04:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8018c08:	2301      	movs	r3, #1
 8018c0a:	461e      	mov	r6, r3
 8018c0c:	f04f 0200 	mov.w	r2, #0
 8018c10:	f04f 0300 	mov.w	r3, #0
 8018c14:	f7e7 ff4a 	bl	8000aac <__aeabi_dcmpeq>
 8018c18:	4603      	mov	r3, r0
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d101      	bne.n	8018c22 <CSE_step+0x2a2>
 8018c1e:	2300      	movs	r3, #0
 8018c20:	461e      	mov	r6, r3
 8018c22:	b2f3      	uxtb	r3, r6
 8018c24:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    guard1 = false;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    if (errorCondition) {
 8018c2e:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d018      	beq.n	8018c68 <CSE_step+0x2e8>
      guard1 = true;
 8018c36:	2301      	movs	r3, #1
 8018c38:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8018c3c:	e395      	b.n	801936a <CSE_step+0x9ea>
 8018c3e:	bf00      	nop
	...
 8018c4c:	40000000 	.word	0x40000000
 8018c50:	d2f1a9fc 	.word	0xd2f1a9fc
 8018c54:	3f50624d 	.word	0x3f50624d
 8018c58:	20000088 	.word	0x20000088
 8018c5c:	2001c388 	.word	0x2001c388
 8018c60:	2001c340 	.word	0x2001c340
 8018c64:	2001c330 	.word	0x2001c330
    } else {
      real_T absxk;
      real_T scale;
      real_T t;
      C[2] = tempY[2];
 8018c68:	f107 0310 	add.w	r3, r7, #16
 8018c6c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018c70:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018c74:	e9c1 2304 	strd	r2, r3, [r1, #16]
      C[0] = tempY[0] / R[0];
 8018c78:	f107 0310 	add.w	r3, r7, #16
 8018c7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018c80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c88:	f7e7 fdd2 	bl	8000830 <__aeabi_ddiv>
 8018c8c:	4602      	mov	r2, r0
 8018c8e:	460b      	mov	r3, r1
 8018c90:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018c94:	e9c1 2300 	strd	r2, r3, [r1]
      C[1] = (tempY[1] - C[0] * R[3]) / R[4];
 8018c98:	f107 0310 	add.w	r3, r7, #16
 8018c9c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8018ca0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018ca8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018cac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8018cb0:	f7e7 fc94 	bl	80005dc <__aeabi_dmul>
 8018cb4:	4602      	mov	r2, r0
 8018cb6:	460b      	mov	r3, r1
 8018cb8:	4640      	mov	r0, r8
 8018cba:	4649      	mov	r1, r9
 8018cbc:	f7e7 fad6 	bl	800026c <__aeabi_dsub>
 8018cc0:	4602      	mov	r2, r0
 8018cc2:	460b      	mov	r3, r1
 8018cc4:	4610      	mov	r0, r2
 8018cc6:	4619      	mov	r1, r3
 8018cc8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018ccc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018cd0:	f7e7 fdae 	bl	8000830 <__aeabi_ddiv>
 8018cd4:	4602      	mov	r2, r0
 8018cd6:	460b      	mov	r3, r1
 8018cd8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018cdc:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = tempY[2];
 8018ce0:	f107 0310 	add.w	r3, r7, #16
 8018ce4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018ce8:	4639      	mov	r1, r7
 8018cea:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8018cee:	2300      	movs	r3, #0
 8018cf0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8018cf4:	e025      	b.n	8018d42 <CSE_step+0x3c2>
        temp -= R[iAcol_0 + 6] * C[iAcol_0];
 8018cf6:	463b      	mov	r3, r7
 8018cf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018cfc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018d00:	3306      	adds	r3, #6
 8018d02:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018d06:	00db      	lsls	r3, r3, #3
 8018d08:	4413      	add	r3, r2
 8018d0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018d0e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8018d12:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018d16:	00db      	lsls	r3, r3, #3
 8018d18:	4413      	add	r3, r2
 8018d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d1e:	f7e7 fc5d 	bl	80005dc <__aeabi_dmul>
 8018d22:	4602      	mov	r2, r0
 8018d24:	460b      	mov	r3, r1
 8018d26:	4640      	mov	r0, r8
 8018d28:	4649      	mov	r1, r9
 8018d2a:	f7e7 fa9f 	bl	800026c <__aeabi_dsub>
 8018d2e:	4602      	mov	r2, r0
 8018d30:	460b      	mov	r3, r1
 8018d32:	4639      	mov	r1, r7
 8018d34:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8018d38:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018d3c:	3301      	adds	r3, #1
 8018d3e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8018d42:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018d46:	2b01      	cmp	r3, #1
 8018d48:	ddd5      	ble.n	8018cf6 <CSE_step+0x376>
      }

      C[2] = temp / R[8];
 8018d4a:	463b      	mov	r3, r7
 8018d4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018d50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018d54:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8018d58:	f7e7 fd6a 	bl	8000830 <__aeabi_ddiv>
 8018d5c:	4602      	mov	r2, r0
 8018d5e:	460b      	mov	r3, r1
 8018d60:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018d64:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8018d68:	f04f 0200 	mov.w	r2, #0
 8018d6c:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8018d70:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
      absxk = fabs(C[0]);
 8018d74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d7c:	4611      	mov	r1, r2
 8018d7e:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8018d82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018d86:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > 3.3121686421112381E-170) {
 8018d8a:	f04f 0200 	mov.w	r2, #0
 8018d8e:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8018d92:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018d96:	f7e7 feb1 	bl	8000afc <__aeabi_dcmpgt>
 8018d9a:	4603      	mov	r3, r0
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d00a      	beq.n	8018db6 <CSE_step+0x436>
        temp = 1.0;
 8018da0:	4639      	mov	r1, r7
 8018da2:	f04f 0200 	mov.w	r2, #0
 8018da6:	4bbf      	ldr	r3, [pc, #764]	; (80190a4 <CSE_step+0x724>)
 8018da8:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8018dac:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8018db0:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8018db4:	e016      	b.n	8018de4 <CSE_step+0x464>
      } else {
        t = absxk / 3.3121686421112381E-170;
 8018db6:	f04f 0200 	mov.w	r2, #0
 8018dba:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8018dbe:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018dc2:	f7e7 fd35 	bl	8000830 <__aeabi_ddiv>
 8018dc6:	4602      	mov	r2, r0
 8018dc8:	460b      	mov	r3, r1
 8018dca:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = t * t;
 8018dce:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018dd2:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8018dd6:	f7e7 fc01 	bl	80005dc <__aeabi_dmul>
 8018dda:	4602      	mov	r2, r0
 8018ddc:	460b      	mov	r3, r1
 8018dde:	4639      	mov	r1, r7
 8018de0:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[1]);
 8018de4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018de8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018dec:	4611      	mov	r1, r2
 8018dee:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8018df2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018df6:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 8018dfa:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8018dfe:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018e02:	f7e7 fe7b 	bl	8000afc <__aeabi_dcmpgt>
 8018e06:	4603      	mov	r3, r0
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d02b      	beq.n	8018e64 <CSE_step+0x4e4>
        t = scale / absxk;
 8018e0c:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8018e10:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8018e14:	f7e7 fd0c 	bl	8000830 <__aeabi_ddiv>
 8018e18:	4602      	mov	r2, r0
 8018e1a:	460b      	mov	r3, r1
 8018e1c:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8018e20:	463b      	mov	r3, r7
 8018e22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018e26:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018e2a:	f7e7 fbd7 	bl	80005dc <__aeabi_dmul>
 8018e2e:	4602      	mov	r2, r0
 8018e30:	460b      	mov	r3, r1
 8018e32:	4610      	mov	r0, r2
 8018e34:	4619      	mov	r1, r3
 8018e36:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018e3a:	f7e7 fbcf 	bl	80005dc <__aeabi_dmul>
 8018e3e:	4602      	mov	r2, r0
 8018e40:	460b      	mov	r3, r1
 8018e42:	4610      	mov	r0, r2
 8018e44:	4619      	mov	r1, r3
 8018e46:	f04f 0200 	mov.w	r2, #0
 8018e4a:	4b96      	ldr	r3, [pc, #600]	; (80190a4 <CSE_step+0x724>)
 8018e4c:	f7e7 fa10 	bl	8000270 <__adddf3>
 8018e50:	4602      	mov	r2, r0
 8018e52:	460b      	mov	r3, r1
 8018e54:	4639      	mov	r1, r7
 8018e56:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8018e5a:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8018e5e:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8018e62:	e01d      	b.n	8018ea0 <CSE_step+0x520>
      } else {
        t = absxk / scale;
 8018e64:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8018e68:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018e6c:	f7e7 fce0 	bl	8000830 <__aeabi_ddiv>
 8018e70:	4602      	mov	r2, r0
 8018e72:	460b      	mov	r3, r1
 8018e74:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8018e78:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018e7c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8018e80:	f7e7 fbac 	bl	80005dc <__aeabi_dmul>
 8018e84:	4602      	mov	r2, r0
 8018e86:	460b      	mov	r3, r1
 8018e88:	4610      	mov	r0, r2
 8018e8a:	4619      	mov	r1, r3
 8018e8c:	463b      	mov	r3, r7
 8018e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e92:	f7e7 f9ed 	bl	8000270 <__adddf3>
 8018e96:	4602      	mov	r2, r0
 8018e98:	460b      	mov	r3, r1
 8018e9a:	4639      	mov	r1, r7
 8018e9c:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[2]);
 8018ea0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018ea4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018ea8:	4611      	mov	r1, r2
 8018eaa:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8018eae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018eb2:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 8018eb6:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8018eba:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018ebe:	f7e7 fe1d 	bl	8000afc <__aeabi_dcmpgt>
 8018ec2:	4603      	mov	r3, r0
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d02b      	beq.n	8018f20 <CSE_step+0x5a0>
        t = scale / absxk;
 8018ec8:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8018ecc:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8018ed0:	f7e7 fcae 	bl	8000830 <__aeabi_ddiv>
 8018ed4:	4602      	mov	r2, r0
 8018ed6:	460b      	mov	r3, r1
 8018ed8:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8018edc:	463b      	mov	r3, r7
 8018ede:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018ee2:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018ee6:	f7e7 fb79 	bl	80005dc <__aeabi_dmul>
 8018eea:	4602      	mov	r2, r0
 8018eec:	460b      	mov	r3, r1
 8018eee:	4610      	mov	r0, r2
 8018ef0:	4619      	mov	r1, r3
 8018ef2:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018ef6:	f7e7 fb71 	bl	80005dc <__aeabi_dmul>
 8018efa:	4602      	mov	r2, r0
 8018efc:	460b      	mov	r3, r1
 8018efe:	4610      	mov	r0, r2
 8018f00:	4619      	mov	r1, r3
 8018f02:	f04f 0200 	mov.w	r2, #0
 8018f06:	4b67      	ldr	r3, [pc, #412]	; (80190a4 <CSE_step+0x724>)
 8018f08:	f7e7 f9b2 	bl	8000270 <__adddf3>
 8018f0c:	4602      	mov	r2, r0
 8018f0e:	460b      	mov	r3, r1
 8018f10:	4639      	mov	r1, r7
 8018f12:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8018f16:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8018f1a:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8018f1e:	e01d      	b.n	8018f5c <CSE_step+0x5dc>
      } else {
        t = absxk / scale;
 8018f20:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8018f24:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018f28:	f7e7 fc82 	bl	8000830 <__aeabi_ddiv>
 8018f2c:	4602      	mov	r2, r0
 8018f2e:	460b      	mov	r3, r1
 8018f30:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8018f34:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018f38:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8018f3c:	f7e7 fb4e 	bl	80005dc <__aeabi_dmul>
 8018f40:	4602      	mov	r2, r0
 8018f42:	460b      	mov	r3, r1
 8018f44:	4610      	mov	r0, r2
 8018f46:	4619      	mov	r1, r3
 8018f48:	463b      	mov	r3, r7
 8018f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f4e:	f7e7 f98f 	bl	8000270 <__adddf3>
 8018f52:	4602      	mov	r2, r0
 8018f54:	460b      	mov	r3, r1
 8018f56:	4639      	mov	r1, r7
 8018f58:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 8018f5c:	463b      	mov	r3, r7
 8018f5e:	ed93 7b00 	vldr	d7, [r3]
 8018f62:	eeb0 0a47 	vmov.f32	s0, s14
 8018f66:	eef0 0a67 	vmov.f32	s1, s15
 8018f6a:	f015 fdc5 	bl	802eaf8 <sqrt>
 8018f6e:	ec51 0b10 	vmov	r0, r1, d0
 8018f72:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8018f76:	f7e7 fb31 	bl	80005dc <__aeabi_dmul>
 8018f7a:	4602      	mov	r2, r0
 8018f7c:	460b      	mov	r3, r1
 8018f7e:	4639      	mov	r1, r7
 8018f80:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 8018f84:	463b      	mov	r3, r7
 8018f86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018f8a:	f04f 0200 	mov.w	r2, #0
 8018f8e:	4b45      	ldr	r3, [pc, #276]	; (80190a4 <CSE_step+0x724>)
 8018f90:	f7e7 fdaa 	bl	8000ae8 <__aeabi_dcmpge>
 8018f94:	4603      	mov	r3, r0
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d003      	beq.n	8018fa2 <CSE_step+0x622>
        guard1 = true;
 8018f9a:	2301      	movs	r3, #1
 8018f9c:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8018fa0:	e1e3      	b.n	801936a <CSE_step+0x9ea>
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), C[2], &tempY[2], &s[2], &temp);
 8018fa2:	463b      	mov	r3, r7
 8018fa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018fa8:	463b      	mov	r3, r7
 8018faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fae:	f7e7 fb15 	bl	80005dc <__aeabi_dmul>
 8018fb2:	4602      	mov	r2, r0
 8018fb4:	460b      	mov	r3, r1
 8018fb6:	f04f 0000 	mov.w	r0, #0
 8018fba:	493a      	ldr	r1, [pc, #232]	; (80190a4 <CSE_step+0x724>)
 8018fbc:	f7e7 f956 	bl	800026c <__aeabi_dsub>
 8018fc0:	4602      	mov	r2, r0
 8018fc2:	460b      	mov	r3, r1
 8018fc4:	ec43 2b17 	vmov	d7, r2, r3
 8018fc8:	eeb0 0a47 	vmov.f32	s0, s14
 8018fcc:	eef0 0a67 	vmov.f32	s1, s15
 8018fd0:	f015 fd92 	bl	802eaf8 <sqrt>
 8018fd4:	eeb0 6a40 	vmov.f32	s12, s0
 8018fd8:	eef0 6a60 	vmov.f32	s13, s1
 8018fdc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018fe0:	ed93 7b04 	vldr	d7, [r3, #16]
 8018fe4:	463a      	mov	r2, r7
 8018fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018fea:	f103 0110 	add.w	r1, r3, #16
 8018fee:	f107 0310 	add.w	r3, r7, #16
 8018ff2:	3310      	adds	r3, #16
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	eeb0 1a47 	vmov.f32	s2, s14
 8018ffa:	eef0 1a67 	vmov.f32	s3, s15
 8018ffe:	eeb0 0a46 	vmov.f32	s0, s12
 8019002:	eef0 0a66 	vmov.f32	s1, s13
 8019006:	f006 fd6f 	bl	801fae8 <rotate_LZ7ctbe0>
        C[2] = 0.0;
 801900a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801900e:	f04f 0200 	mov.w	r2, #0
 8019012:	f04f 0300 	mov.w	r3, #0
 8019016:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, C[1], &tempY[1], &s[1], &temp);
 801901a:	463b      	mov	r3, r7
 801901c:	ed93 7b00 	vldr	d7, [r3]
 8019020:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019024:	ed93 6b02 	vldr	d6, [r3, #8]
 8019028:	463a      	mov	r2, r7
 801902a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801902e:	f103 0108 	add.w	r1, r3, #8
 8019032:	f107 0310 	add.w	r3, r7, #16
 8019036:	3308      	adds	r3, #8
 8019038:	4618      	mov	r0, r3
 801903a:	eeb0 1a46 	vmov.f32	s2, s12
 801903e:	eef0 1a66 	vmov.f32	s3, s13
 8019042:	eeb0 0a47 	vmov.f32	s0, s14
 8019046:	eef0 0a67 	vmov.f32	s1, s15
 801904a:	f006 fd4d 	bl	801fae8 <rotate_LZ7ctbe0>
        C[1] = 0.0;
 801904e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8019052:	f04f 0200 	mov.w	r2, #0
 8019056:	f04f 0300 	mov.w	r3, #0
 801905a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, C[0], &tempY[0], &s[0], &temp);
 801905e:	463b      	mov	r3, r7
 8019060:	ed93 7b00 	vldr	d7, [r3]
 8019064:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019068:	ed93 6b00 	vldr	d6, [r3]
 801906c:	463a      	mov	r2, r7
 801906e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8019072:	f107 0310 	add.w	r3, r7, #16
 8019076:	4618      	mov	r0, r3
 8019078:	eeb0 1a46 	vmov.f32	s2, s12
 801907c:	eef0 1a66 	vmov.f32	s3, s13
 8019080:	eeb0 0a47 	vmov.f32	s0, s14
 8019084:	eef0 0a67 	vmov.f32	s1, s15
 8019088:	f006 fd2e 	bl	801fae8 <rotate_LZ7ctbe0>
        C[0] = 0.0;
 801908c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8019090:	f04f 0200 	mov.w	r2, #0
 8019094:	f04f 0300 	mov.w	r3, #0
 8019098:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 801909c:	2300      	movs	r3, #0
 801909e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80190a2:	e06e      	b.n	8019182 <CSE_step+0x802>
 80190a4:	3ff00000 	.word	0x3ff00000
          temp = s[iAcol_0] * R[iAcol_0];
 80190a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80190ac:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80190b0:	00db      	lsls	r3, r3, #3
 80190b2:	4413      	add	r3, r2
 80190b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80190b8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80190bc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80190c0:	00db      	lsls	r3, r3, #3
 80190c2:	4413      	add	r3, r2
 80190c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190c8:	f7e7 fa88 	bl	80005dc <__aeabi_dmul>
 80190cc:	4602      	mov	r2, r0
 80190ce:	460b      	mov	r3, r1
 80190d0:	4639      	mov	r1, r7
 80190d2:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0] = tempY[iAcol_0] * R[iAcol_0] - s[iAcol_0] * C[0];
 80190d6:	f107 0210 	add.w	r2, r7, #16
 80190da:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80190de:	00db      	lsls	r3, r3, #3
 80190e0:	4413      	add	r3, r2
 80190e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80190e6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80190ea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80190ee:	00db      	lsls	r3, r3, #3
 80190f0:	4413      	add	r3, r2
 80190f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190f6:	f7e7 fa71 	bl	80005dc <__aeabi_dmul>
 80190fa:	4602      	mov	r2, r0
 80190fc:	460b      	mov	r3, r1
 80190fe:	4690      	mov	r8, r2
 8019100:	4699      	mov	r9, r3
 8019102:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019106:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801910a:	00db      	lsls	r3, r3, #3
 801910c:	4413      	add	r3, r2
 801910e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019112:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801911a:	f7e7 fa5f 	bl	80005dc <__aeabi_dmul>
 801911e:	4602      	mov	r2, r0
 8019120:	460b      	mov	r3, r1
 8019122:	4640      	mov	r0, r8
 8019124:	4649      	mov	r1, r9
 8019126:	f7e7 f8a1 	bl	800026c <__aeabi_dsub>
 801912a:	4602      	mov	r2, r0
 801912c:	460b      	mov	r3, r1
 801912e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8019132:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019136:	00c9      	lsls	r1, r1, #3
 8019138:	4401      	add	r1, r0
 801913a:	e9c1 2300 	strd	r2, r3, [r1]
          C[0] = tempY[iAcol_0] * C[0] + temp;
 801913e:	f107 0210 	add.w	r2, r7, #16
 8019142:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019146:	00db      	lsls	r3, r3, #3
 8019148:	4413      	add	r3, r2
 801914a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801914e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019156:	f7e7 fa41 	bl	80005dc <__aeabi_dmul>
 801915a:	4602      	mov	r2, r0
 801915c:	460b      	mov	r3, r1
 801915e:	4610      	mov	r0, r2
 8019160:	4619      	mov	r1, r3
 8019162:	463b      	mov	r3, r7
 8019164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019168:	f7e7 f882 	bl	8000270 <__adddf3>
 801916c:	4602      	mov	r2, r0
 801916e:	460b      	mov	r3, r1
 8019170:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8019174:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 8019178:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801917c:	3b01      	subs	r3, #1
 801917e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019182:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019186:	2b00      	cmp	r3, #0
 8019188:	da8e      	bge.n	80190a8 <CSE_step+0x728>
        }

        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 801918a:	2301      	movs	r3, #1
 801918c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019190:	e06f      	b.n	8019272 <CSE_step+0x8f2>
          temp = R[iAcol_0 + 3];
 8019192:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019196:	3303      	adds	r3, #3
 8019198:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801919c:	00db      	lsls	r3, r3, #3
 801919e:	4413      	add	r3, r2
 80191a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191a4:	4639      	mov	r1, r7
 80191a6:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 3] = temp * tempY[iAcol_0] - s[iAcol_0] * C[1];
 80191aa:	f107 0210 	add.w	r2, r7, #16
 80191ae:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80191b2:	00db      	lsls	r3, r3, #3
 80191b4:	4413      	add	r3, r2
 80191b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80191ba:	463b      	mov	r3, r7
 80191bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191c0:	f7e7 fa0c 	bl	80005dc <__aeabi_dmul>
 80191c4:	4602      	mov	r2, r0
 80191c6:	460b      	mov	r3, r1
 80191c8:	4690      	mov	r8, r2
 80191ca:	4699      	mov	r9, r3
 80191cc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80191d0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80191d4:	00db      	lsls	r3, r3, #3
 80191d6:	4413      	add	r3, r2
 80191d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80191dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80191e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80191e4:	f7e7 f9fa 	bl	80005dc <__aeabi_dmul>
 80191e8:	4602      	mov	r2, r0
 80191ea:	460b      	mov	r3, r1
 80191ec:	4610      	mov	r0, r2
 80191ee:	4619      	mov	r1, r3
 80191f0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80191f4:	1cde      	adds	r6, r3, #3
 80191f6:	4602      	mov	r2, r0
 80191f8:	460b      	mov	r3, r1
 80191fa:	4640      	mov	r0, r8
 80191fc:	4649      	mov	r1, r9
 80191fe:	f7e7 f835 	bl	800026c <__aeabi_dsub>
 8019202:	4602      	mov	r2, r0
 8019204:	460b      	mov	r3, r1
 8019206:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 801920a:	00f1      	lsls	r1, r6, #3
 801920c:	4401      	add	r1, r0
 801920e:	e9c1 2300 	strd	r2, r3, [r1]
          C[1] = tempY[iAcol_0] * C[1] + temp * s[iAcol_0];
 8019212:	f107 0210 	add.w	r2, r7, #16
 8019216:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801921a:	00db      	lsls	r3, r3, #3
 801921c:	4413      	add	r3, r2
 801921e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019222:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019226:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801922a:	f7e7 f9d7 	bl	80005dc <__aeabi_dmul>
 801922e:	4602      	mov	r2, r0
 8019230:	460b      	mov	r3, r1
 8019232:	4690      	mov	r8, r2
 8019234:	4699      	mov	r9, r3
 8019236:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801923a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801923e:	00db      	lsls	r3, r3, #3
 8019240:	4413      	add	r3, r2
 8019242:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019246:	463b      	mov	r3, r7
 8019248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801924c:	f7e7 f9c6 	bl	80005dc <__aeabi_dmul>
 8019250:	4602      	mov	r2, r0
 8019252:	460b      	mov	r3, r1
 8019254:	4640      	mov	r0, r8
 8019256:	4649      	mov	r1, r9
 8019258:	f7e7 f80a 	bl	8000270 <__adddf3>
 801925c:	4602      	mov	r2, r0
 801925e:	460b      	mov	r3, r1
 8019260:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8019264:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 8019268:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801926c:	3b01      	subs	r3, #1
 801926e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019272:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019276:	2b00      	cmp	r3, #0
 8019278:	da8b      	bge.n	8019192 <CSE_step+0x812>
        }

        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 801927a:	2302      	movs	r3, #2
 801927c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019280:	e06f      	b.n	8019362 <CSE_step+0x9e2>
          temp = R[iAcol_0 + 6];
 8019282:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019286:	3306      	adds	r3, #6
 8019288:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801928c:	00db      	lsls	r3, r3, #3
 801928e:	4413      	add	r3, r2
 8019290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019294:	4639      	mov	r1, r7
 8019296:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 6] = temp * tempY[iAcol_0] - s[iAcol_0] * C[2];
 801929a:	f107 0210 	add.w	r2, r7, #16
 801929e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80192a2:	00db      	lsls	r3, r3, #3
 80192a4:	4413      	add	r3, r2
 80192a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80192aa:	463b      	mov	r3, r7
 80192ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192b0:	f7e7 f994 	bl	80005dc <__aeabi_dmul>
 80192b4:	4602      	mov	r2, r0
 80192b6:	460b      	mov	r3, r1
 80192b8:	4690      	mov	r8, r2
 80192ba:	4699      	mov	r9, r3
 80192bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80192c0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80192c4:	00db      	lsls	r3, r3, #3
 80192c6:	4413      	add	r3, r2
 80192c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80192cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80192d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80192d4:	f7e7 f982 	bl	80005dc <__aeabi_dmul>
 80192d8:	4602      	mov	r2, r0
 80192da:	460b      	mov	r3, r1
 80192dc:	4610      	mov	r0, r2
 80192de:	4619      	mov	r1, r3
 80192e0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80192e4:	1d9e      	adds	r6, r3, #6
 80192e6:	4602      	mov	r2, r0
 80192e8:	460b      	mov	r3, r1
 80192ea:	4640      	mov	r0, r8
 80192ec:	4649      	mov	r1, r9
 80192ee:	f7e6 ffbd 	bl	800026c <__aeabi_dsub>
 80192f2:	4602      	mov	r2, r0
 80192f4:	460b      	mov	r3, r1
 80192f6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80192fa:	00f1      	lsls	r1, r6, #3
 80192fc:	4401      	add	r1, r0
 80192fe:	e9c1 2300 	strd	r2, r3, [r1]
          C[2] = tempY[iAcol_0] * C[2] + temp * s[iAcol_0];
 8019302:	f107 0210 	add.w	r2, r7, #16
 8019306:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801930a:	00db      	lsls	r3, r3, #3
 801930c:	4413      	add	r3, r2
 801930e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019312:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019316:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801931a:	f7e7 f95f 	bl	80005dc <__aeabi_dmul>
 801931e:	4602      	mov	r2, r0
 8019320:	460b      	mov	r3, r1
 8019322:	4690      	mov	r8, r2
 8019324:	4699      	mov	r9, r3
 8019326:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801932a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801932e:	00db      	lsls	r3, r3, #3
 8019330:	4413      	add	r3, r2
 8019332:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019336:	463b      	mov	r3, r7
 8019338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801933c:	f7e7 f94e 	bl	80005dc <__aeabi_dmul>
 8019340:	4602      	mov	r2, r0
 8019342:	460b      	mov	r3, r1
 8019344:	4640      	mov	r0, r8
 8019346:	4649      	mov	r1, r9
 8019348:	f7e6 ff92 	bl	8000270 <__adddf3>
 801934c:	4602      	mov	r2, r0
 801934e:	460b      	mov	r3, r1
 8019350:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8019354:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 8019358:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801935c:	3b01      	subs	r3, #1
 801935e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019362:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019366:	2b00      	cmp	r3, #0
 8019368:	da8b      	bge.n	8019282 <CSE_step+0x902>
        }
      }
    }

    if (guard1) {
 801936a:	f897 32de 	ldrb.w	r3, [r7, #734]	; 0x2de
 801936e:	2b00      	cmp	r3, #0
 8019370:	f000 82e1 	beq.w	8019936 <CSE_step+0xfb6>
      int32_T R_tmp;
      boolean_T exitg2;
      iAcol_0 = 0;
 8019374:	2300      	movs	r3, #0
 8019376:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801937a:	2300      	movs	r3, #0
 801937c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019380:	e0d6      	b.n	8019530 <CSE_step+0xbb0>
        coffset = 0;
 8019382:	2300      	movs	r3, #0
 8019384:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8019388:	2300      	movs	r3, #0
 801938a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 801938e:	e0c0      	b.n	8019512 <CSE_step+0xb92>
          R_tmp = coffset + iAcol;
 8019390:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8019394:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019398:	4413      	add	r3, r2
 801939a:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R_0[R_tmp] = 0.0;
 801939e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80193a2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80193a6:	00db      	lsls	r3, r3, #3
 80193a8:	18d1      	adds	r1, r2, r3
 80193aa:	f04f 0200 	mov.w	r2, #0
 80193ae:	f04f 0300 	mov.w	r3, #0
 80193b2:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0] * R[coffset];
 80193b6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80193ba:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80193be:	00db      	lsls	r3, r3, #3
 80193c0:	4413      	add	r3, r2
 80193c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80193c6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80193ca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80193ce:	00db      	lsls	r3, r3, #3
 80193d0:	4413      	add	r3, r2
 80193d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80193d6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80193da:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80193de:	00db      	lsls	r3, r3, #3
 80193e0:	4413      	add	r3, r2
 80193e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193e6:	f7e7 f8f9 	bl	80005dc <__aeabi_dmul>
 80193ea:	4602      	mov	r2, r0
 80193ec:	460b      	mov	r3, r1
 80193ee:	4640      	mov	r0, r8
 80193f0:	4649      	mov	r1, r9
 80193f2:	f7e6 ff3d 	bl	8000270 <__adddf3>
 80193f6:	4602      	mov	r2, r0
 80193f8:	460b      	mov	r3, r1
 80193fa:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80193fe:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8019402:	00c9      	lsls	r1, r1, #3
 8019404:	4401      	add	r1, r0
 8019406:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 1] * R[coffset + 1];
 801940a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801940e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8019412:	00db      	lsls	r3, r3, #3
 8019414:	4413      	add	r3, r2
 8019416:	e9d3 8900 	ldrd	r8, r9, [r3]
 801941a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801941e:	3301      	adds	r3, #1
 8019420:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019424:	00db      	lsls	r3, r3, #3
 8019426:	4413      	add	r3, r2
 8019428:	e9d3 0100 	ldrd	r0, r1, [r3]
 801942c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019430:	3301      	adds	r3, #1
 8019432:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019436:	00db      	lsls	r3, r3, #3
 8019438:	4413      	add	r3, r2
 801943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801943e:	f7e7 f8cd 	bl	80005dc <__aeabi_dmul>
 8019442:	4602      	mov	r2, r0
 8019444:	460b      	mov	r3, r1
 8019446:	4640      	mov	r0, r8
 8019448:	4649      	mov	r1, r9
 801944a:	f7e6 ff11 	bl	8000270 <__adddf3>
 801944e:	4602      	mov	r2, r0
 8019450:	460b      	mov	r3, r1
 8019452:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8019456:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 801945a:	00c9      	lsls	r1, r1, #3
 801945c:	4401      	add	r1, r0
 801945e:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 2] * R[coffset + 2];
 8019462:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019466:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 801946a:	00db      	lsls	r3, r3, #3
 801946c:	4413      	add	r3, r2
 801946e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019472:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019476:	3302      	adds	r3, #2
 8019478:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801947c:	00db      	lsls	r3, r3, #3
 801947e:	4413      	add	r3, r2
 8019480:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019484:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019488:	3302      	adds	r3, #2
 801948a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801948e:	00db      	lsls	r3, r3, #3
 8019490:	4413      	add	r3, r2
 8019492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019496:	f7e7 f8a1 	bl	80005dc <__aeabi_dmul>
 801949a:	4602      	mov	r2, r0
 801949c:	460b      	mov	r3, r1
 801949e:	4640      	mov	r0, r8
 80194a0:	4649      	mov	r1, r9
 80194a2:	f7e6 fee5 	bl	8000270 <__adddf3>
 80194a6:	4602      	mov	r2, r0
 80194a8:	460b      	mov	r3, r1
 80194aa:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80194ae:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80194b2:	00c9      	lsls	r1, r1, #3
 80194b4:	4401      	add	r1, r0
 80194b6:	e9c1 2300 	strd	r2, r3, [r1]
          tempY_0[aoffset + iAcol_0] = tempY[aoffset] * tempY[iAcol];
 80194ba:	f107 0210 	add.w	r2, r7, #16
 80194be:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80194c2:	00db      	lsls	r3, r3, #3
 80194c4:	4413      	add	r3, r2
 80194c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80194ca:	f107 0210 	add.w	r2, r7, #16
 80194ce:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80194d2:	00db      	lsls	r3, r3, #3
 80194d4:	4413      	add	r3, r2
 80194d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80194da:	f8d7 62ec 	ldr.w	r6, [r7, #748]	; 0x2ec
 80194de:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80194e2:	4433      	add	r3, r6
 80194e4:	461e      	mov	r6, r3
 80194e6:	4642      	mov	r2, r8
 80194e8:	464b      	mov	r3, r9
 80194ea:	f7e7 f877 	bl	80005dc <__aeabi_dmul>
 80194ee:	4602      	mov	r2, r0
 80194f0:	460b      	mov	r3, r1
 80194f2:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80194f6:	00f1      	lsls	r1, r6, #3
 80194f8:	4401      	add	r1, r0
 80194fa:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 80194fe:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019502:	3303      	adds	r3, #3
 8019504:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8019508:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801950c:	3301      	adds	r3, #1
 801950e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8019512:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019516:	2b02      	cmp	r3, #2
 8019518:	f77f af3a 	ble.w	8019390 <CSE_step+0xa10>
        }

        iAcol_0 += 3;
 801951c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019520:	3303      	adds	r3, #3
 8019522:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8019526:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801952a:	3301      	adds	r3, #1
 801952c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019530:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019534:	2b02      	cmp	r3, #2
 8019536:	f77f af24 	ble.w	8019382 <CSE_step+0xa02>
      }

      errorCondition = true;
 801953a:	2301      	movs	r3, #1
 801953c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8019540:	2300      	movs	r3, #0
 8019542:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019546:	e045      	b.n	80195d4 <CSE_step+0xc54>
        temp = R_0[iAcol] - tempY_0[iAcol];
 8019548:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801954c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019550:	00db      	lsls	r3, r3, #3
 8019552:	4413      	add	r3, r2
 8019554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019558:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801955c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019560:	00db      	lsls	r3, r3, #3
 8019562:	4413      	add	r3, r2
 8019564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019568:	f7e6 fe80 	bl	800026c <__aeabi_dsub>
 801956c:	4602      	mov	r2, r0
 801956e:	460b      	mov	r3, r1
 8019570:	4639      	mov	r1, r7
 8019572:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 8019576:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 801957a:	2b00      	cmp	r3, #0
 801957c:	d01a      	beq.n	80195b4 <CSE_step+0xc34>
 801957e:	463b      	mov	r3, r7
 8019580:	ed93 7b00 	vldr	d7, [r3]
 8019584:	eeb0 0a47 	vmov.f32	s0, s14
 8019588:	eef0 0a67 	vmov.f32	s1, s15
 801958c:	f006 fd22 	bl	801ffd4 <rtIsInf>
 8019590:	4603      	mov	r3, r0
 8019592:	2b00      	cmp	r3, #0
 8019594:	d10b      	bne.n	80195ae <CSE_step+0xc2e>
 8019596:	463b      	mov	r3, r7
 8019598:	ed93 7b00 	vldr	d7, [r3]
 801959c:	eeb0 0a47 	vmov.f32	s0, s14
 80195a0:	eef0 0a67 	vmov.f32	s1, s15
 80195a4:	f006 fd3a 	bl	802001c <rtIsNaN>
 80195a8:	4603      	mov	r3, r0
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d002      	beq.n	80195b4 <CSE_step+0xc34>
          errorCondition = false;
 80195ae:	2300      	movs	r3, #0
 80195b0:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
        }

        Ss[iAcol] = temp;
 80195b4:	463b      	mov	r3, r7
 80195b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195ba:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80195be:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 80195c2:	00c9      	lsls	r1, r1, #3
 80195c4:	4401      	add	r1, r0
 80195c6:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 80195ca:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80195ce:	3301      	adds	r3, #1
 80195d0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80195d4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80195d8:	2b08      	cmp	r3, #8
 80195da:	ddb5      	ble.n	8019548 <CSE_step+0xbc8>
      }

      if (errorCondition) {
 80195dc:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d00a      	beq.n	80195fa <CSE_step+0xc7a>
        svd_u3DvUgOe(Ss, tempY_0, s, R_0);
 80195e4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80195e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80195ec:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80195f0:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80195f4:	f006 fd64 	bl	80200c0 <svd_u3DvUgOe>
 80195f8:	e02c      	b.n	8019654 <CSE_step+0xcd4>
      } else {
        s[0] = (rtNaN);
 80195fa:	4bd2      	ldr	r3, [pc, #840]	; (8019944 <CSE_step+0xfc4>)
 80195fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019600:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8019604:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8019608:	4bce      	ldr	r3, [pc, #824]	; (8019944 <CSE_step+0xfc4>)
 801960a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801960e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8019612:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 8019616:	4bcb      	ldr	r3, [pc, #812]	; (8019944 <CSE_step+0xfc4>)
 8019618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801961c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8019620:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8019624:	2300      	movs	r3, #0
 8019626:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801962a:	e00f      	b.n	801964c <CSE_step+0xccc>
          R_0[iAcol_0] = (rtNaN);
 801962c:	4bc5      	ldr	r3, [pc, #788]	; (8019944 <CSE_step+0xfc4>)
 801962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019632:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8019636:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 801963a:	00c9      	lsls	r1, r1, #3
 801963c:	4401      	add	r1, r0
 801963e:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8019642:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019646:	3301      	adds	r3, #1
 8019648:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801964c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019650:	2b08      	cmp	r3, #8
 8019652:	ddeb      	ble.n	801962c <CSE_step+0xcac>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 8019654:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8019658:	2248      	movs	r2, #72	; 0x48
 801965a:	2100      	movs	r1, #0
 801965c:	4618      	mov	r0, r3
 801965e:	f015 f83f 	bl	802e6e0 <memset>
      Ss[0] = s[0];
 8019662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801966a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801966e:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 8019672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019676:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801967a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801967e:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 8019682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019686:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801968a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801968e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8019692:	2300      	movs	r3, #0
 8019694:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019698:	e01e      	b.n	80196d8 <CSE_step+0xd58>
        Ss[iAcol_0] = sqrt(Ss[iAcol_0]);
 801969a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801969e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80196a2:	00db      	lsls	r3, r3, #3
 80196a4:	4413      	add	r3, r2
 80196a6:	ed93 7b00 	vldr	d7, [r3]
 80196aa:	eeb0 0a47 	vmov.f32	s0, s14
 80196ae:	eef0 0a67 	vmov.f32	s1, s15
 80196b2:	f015 fa21 	bl	802eaf8 <sqrt>
 80196b6:	eeb0 7a40 	vmov.f32	s14, s0
 80196ba:	eef0 7a60 	vmov.f32	s15, s1
 80196be:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80196c2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80196c6:	00db      	lsls	r3, r3, #3
 80196c8:	4413      	add	r3, r2
 80196ca:	ed83 7b00 	vstr	d7, [r3]
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80196ce:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80196d2:	3301      	adds	r3, #1
 80196d4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80196d8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80196dc:	2b08      	cmp	r3, #8
 80196de:	dddc      	ble.n	801969a <CSE_step+0xd1a>
      }

      iAcol_0 = 0;
 80196e0:	2300      	movs	r3, #0
 80196e2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80196e6:	2300      	movs	r3, #0
 80196e8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80196ec:	e0b4      	b.n	8019858 <CSE_step+0xed8>
        coffset = 0;
 80196ee:	2300      	movs	r3, #0
 80196f0:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 80196f4:	2300      	movs	r3, #0
 80196f6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80196fa:	e09e      	b.n	801983a <CSE_step+0xeba>
          R_tmp = coffset + iAcol;
 80196fc:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8019700:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019704:	4413      	add	r3, r2
 8019706:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R[R_tmp] = 0.0;
 801970a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801970e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8019712:	00db      	lsls	r3, r3, #3
 8019714:	18d1      	adds	r1, r2, r3
 8019716:	f04f 0200 	mov.w	r2, #0
 801971a:	f04f 0300 	mov.w	r3, #0
 801971e:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0] * R_0[aoffset];
 8019722:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019726:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 801972a:	00db      	lsls	r3, r3, #3
 801972c:	4413      	add	r3, r2
 801972e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019732:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019736:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801973a:	00db      	lsls	r3, r3, #3
 801973c:	4413      	add	r3, r2
 801973e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019742:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019746:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801974a:	00db      	lsls	r3, r3, #3
 801974c:	4413      	add	r3, r2
 801974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019752:	f7e6 ff43 	bl	80005dc <__aeabi_dmul>
 8019756:	4602      	mov	r2, r0
 8019758:	460b      	mov	r3, r1
 801975a:	4640      	mov	r0, r8
 801975c:	4649      	mov	r1, r9
 801975e:	f7e6 fd87 	bl	8000270 <__adddf3>
 8019762:	4602      	mov	r2, r0
 8019764:	460b      	mov	r3, r1
 8019766:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 801976a:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 801976e:	00c9      	lsls	r1, r1, #3
 8019770:	4401      	add	r1, r0
 8019772:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 1] * R_0[aoffset + 3];
 8019776:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801977a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 801977e:	00db      	lsls	r3, r3, #3
 8019780:	4413      	add	r3, r2
 8019782:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019786:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801978a:	3301      	adds	r3, #1
 801978c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019790:	00db      	lsls	r3, r3, #3
 8019792:	4413      	add	r3, r2
 8019794:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019798:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801979c:	3303      	adds	r3, #3
 801979e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80197a2:	00db      	lsls	r3, r3, #3
 80197a4:	4413      	add	r3, r2
 80197a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197aa:	f7e6 ff17 	bl	80005dc <__aeabi_dmul>
 80197ae:	4602      	mov	r2, r0
 80197b0:	460b      	mov	r3, r1
 80197b2:	4640      	mov	r0, r8
 80197b4:	4649      	mov	r1, r9
 80197b6:	f7e6 fd5b 	bl	8000270 <__adddf3>
 80197ba:	4602      	mov	r2, r0
 80197bc:	460b      	mov	r3, r1
 80197be:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80197c2:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80197c6:	00c9      	lsls	r1, r1, #3
 80197c8:	4401      	add	r1, r0
 80197ca:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 2] * R_0[aoffset + 6];
 80197ce:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80197d2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80197d6:	00db      	lsls	r3, r3, #3
 80197d8:	4413      	add	r3, r2
 80197da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80197de:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80197e2:	3302      	adds	r3, #2
 80197e4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80197e8:	00db      	lsls	r3, r3, #3
 80197ea:	4413      	add	r3, r2
 80197ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80197f0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80197f4:	3306      	adds	r3, #6
 80197f6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80197fa:	00db      	lsls	r3, r3, #3
 80197fc:	4413      	add	r3, r2
 80197fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019802:	f7e6 feeb 	bl	80005dc <__aeabi_dmul>
 8019806:	4602      	mov	r2, r0
 8019808:	460b      	mov	r3, r1
 801980a:	4640      	mov	r0, r8
 801980c:	4649      	mov	r1, r9
 801980e:	f7e6 fd2f 	bl	8000270 <__adddf3>
 8019812:	4602      	mov	r2, r0
 8019814:	460b      	mov	r3, r1
 8019816:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 801981a:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 801981e:	00c9      	lsls	r1, r1, #3
 8019820:	4401      	add	r1, r0
 8019822:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 8019826:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801982a:	3303      	adds	r3, #3
 801982c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8019830:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019834:	3301      	adds	r3, #1
 8019836:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 801983a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801983e:	2b02      	cmp	r3, #2
 8019840:	f77f af5c 	ble.w	80196fc <CSE_step+0xd7c>
        }

        iAcol_0 += 3;
 8019844:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019848:	3303      	adds	r3, #3
 801984a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801984e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019852:	3301      	adds	r3, #1
 8019854:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019858:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801985c:	2b02      	cmp	r3, #2
 801985e:	f77f af46 	ble.w	80196ee <CSE_step+0xd6e>
      }

      errorCondition = true;
 8019862:	2301      	movs	r3, #1
 8019864:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      iAcol = 0;
 8019868:	2300      	movs	r3, #0
 801986a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
      exitg2 = false;
 801986e:	2300      	movs	r3, #0
 8019870:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8019874:	e042      	b.n	80198fc <CSE_step+0xf7c>
        int32_T exitg1;
        iAcol_0 = iAcol + 1;
 8019876:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801987a:	3301      	adds	r3, #1
 801987c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
        do {
          exitg1 = 0;
 8019880:	2300      	movs	r3, #0
 8019882:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          if (iAcol_0 + 1 < 4) {
 8019886:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801988a:	2b02      	cmp	r3, #2
 801988c:	dc23      	bgt.n	80198d6 <CSE_step+0xf56>
            if (!(R[3 * iAcol + iAcol_0] == 0.0)) {
 801988e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8019892:	4613      	mov	r3, r2
 8019894:	005b      	lsls	r3, r3, #1
 8019896:	441a      	add	r2, r3
 8019898:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801989c:	4413      	add	r3, r2
 801989e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80198a2:	00db      	lsls	r3, r3, #3
 80198a4:	4413      	add	r3, r2
 80198a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80198aa:	f04f 0200 	mov.w	r2, #0
 80198ae:	f04f 0300 	mov.w	r3, #0
 80198b2:	f7e7 f8fb 	bl	8000aac <__aeabi_dcmpeq>
 80198b6:	4603      	mov	r3, r0
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d106      	bne.n	80198ca <CSE_step+0xf4a>
              errorCondition = false;
 80198bc:	2300      	movs	r3, #0
 80198be:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
              exitg1 = 1;
 80198c2:	2301      	movs	r3, #1
 80198c4:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 80198c8:	e00d      	b.n	80198e6 <CSE_step+0xf66>
            } else {
              iAcol_0++;
 80198ca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80198ce:	3301      	adds	r3, #1
 80198d0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80198d4:	e007      	b.n	80198e6 <CSE_step+0xf66>
            }
          } else {
            iAcol++;
 80198d6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80198da:	3301      	adds	r3, #1
 80198dc:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            exitg1 = 2;
 80198e0:	2302      	movs	r3, #2
 80198e2:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          }
        } while (exitg1 == 0);
 80198e6:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d0c8      	beq.n	8019880 <CSE_step+0xf00>

        if (exitg1 == 1) {
 80198ee:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80198f2:	2b01      	cmp	r3, #1
 80198f4:	d102      	bne.n	80198fc <CSE_step+0xf7c>
          exitg2 = true;
 80198f6:	2301      	movs	r3, #1
 80198f8:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 80198fc:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8019900:	2b00      	cmp	r3, #0
 8019902:	d103      	bne.n	801990c <CSE_step+0xf8c>
 8019904:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019908:	2b02      	cmp	r3, #2
 801990a:	ddb4      	ble.n	8019876 <CSE_step+0xef6>
        }
      }

      if (!errorCondition) {
 801990c:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8019910:	2b00      	cmp	r3, #0
 8019912:	d110      	bne.n	8019936 <CSE_step+0xfb6>
        memcpy(&R_0[0], &R[0], 9U * sizeof(real_T));
 8019914:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8019918:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801991c:	2248      	movs	r2, #72	; 0x48
 801991e:	4618      	mov	r0, r3
 8019920:	f014 fed0 	bl	802e6c4 <memcpy>
        qr_5a2P8Gh6(R_0, tempY_0, R);
 8019924:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019928:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801992c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8019930:	4618      	mov	r0, r3
 8019932:	f004 f801 	bl	801d938 <qr_5a2P8Gh6>
      }
    }

    iAcol_0 = 0;
 8019936:	2300      	movs	r3, #0
 8019938:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801993c:	2300      	movs	r3, #0
 801993e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019942:	e062      	b.n	8019a0a <CSE_step+0x108a>
 8019944:	2001ee68 	.word	0x2001ee68
      CSE_DW.P[iAcol_0] = R[iAcol];
 8019948:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801994c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019950:	00db      	lsls	r3, r3, #3
 8019952:	4413      	add	r3, r2
 8019954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019958:	48a5      	ldr	r0, [pc, #660]	; (8019bf0 <CSE_step+0x1270>)
 801995a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 801995e:	00c9      	lsls	r1, r1, #3
 8019960:	4401      	add	r1, r0
 8019962:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 8019966:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801996a:	3303      	adds	r3, #3
 801996c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019970:	1c51      	adds	r1, r2, #1
 8019972:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019976:	00db      	lsls	r3, r3, #3
 8019978:	4413      	add	r3, r2
 801997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801997e:	489c      	ldr	r0, [pc, #624]	; (8019bf0 <CSE_step+0x1270>)
 8019980:	00c9      	lsls	r1, r1, #3
 8019982:	4401      	add	r1, r0
 8019984:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8019988:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801998c:	3306      	adds	r3, #6
 801998e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019992:	1c91      	adds	r1, r2, #2
 8019994:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019998:	00db      	lsls	r3, r3, #3
 801999a:	4413      	add	r3, r2
 801999c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199a0:	4893      	ldr	r0, [pc, #588]	; (8019bf0 <CSE_step+0x1270>)
 80199a2:	00c9      	lsls	r1, r1, #3
 80199a4:	4401      	add	r1, r0
 80199a6:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.x[iAcol] += K[iAcol] * s_0;
 80199aa:	4a91      	ldr	r2, [pc, #580]	; (8019bf0 <CSE_step+0x1270>)
 80199ac:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80199b0:	3309      	adds	r3, #9
 80199b2:	00db      	lsls	r3, r3, #3
 80199b4:	4413      	add	r3, r2
 80199b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80199ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80199be:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80199c2:	00db      	lsls	r3, r3, #3
 80199c4:	4413      	add	r3, r2
 80199c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80199ca:	f107 0308 	add.w	r3, r7, #8
 80199ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199d2:	f7e6 fe03 	bl	80005dc <__aeabi_dmul>
 80199d6:	4602      	mov	r2, r0
 80199d8:	460b      	mov	r3, r1
 80199da:	4640      	mov	r0, r8
 80199dc:	4649      	mov	r1, r9
 80199de:	f7e6 fc47 	bl	8000270 <__adddf3>
 80199e2:	4602      	mov	r2, r0
 80199e4:	460b      	mov	r3, r1
 80199e6:	4882      	ldr	r0, [pc, #520]	; (8019bf0 <CSE_step+0x1270>)
 80199e8:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 80199ec:	3109      	adds	r1, #9
 80199ee:	00c9      	lsls	r1, r1, #3
 80199f0:	4401      	add	r1, r0
 80199f2:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 80199f6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80199fa:	3303      	adds	r3, #3
 80199fc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8019a00:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019a04:	3301      	adds	r3, #1
 8019a06:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019a0a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019a0e:	2b02      	cmp	r3, #2
 8019a10:	dd9a      	ble.n	8019948 <CSE_step+0xfc8>
    }
  }

  CSE_Y.soc = CSE_DW.x[1] / CSE_DW.x[2];
 8019a12:	4b77      	ldr	r3, [pc, #476]	; (8019bf0 <CSE_step+0x1270>)
 8019a14:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8019a18:	4b75      	ldr	r3, [pc, #468]	; (8019bf0 <CSE_step+0x1270>)
 8019a1a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8019a1e:	f7e6 ff07 	bl	8000830 <__aeabi_ddiv>
 8019a22:	4602      	mov	r2, r0
 8019a24:	460b      	mov	r3, r1
 8019a26:	4973      	ldr	r1, [pc, #460]	; (8019bf4 <CSE_step+0x1274>)
 8019a28:	e9c1 2300 	strd	r2, r3, [r1]
  CSE_Y.capacity = CSE_DW.x[2];
 8019a2c:	4b70      	ldr	r3, [pc, #448]	; (8019bf0 <CSE_step+0x1270>)
 8019a2e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8019a32:	4970      	ldr	r1, [pc, #448]	; (8019bf4 <CSE_step+0x1274>)
 8019a34:	e9c1 2302 	strd	r2, r3, [r1, #8]
  CSE_S_x(CSE_DW.x, tempY);
 8019a38:	f107 0310 	add.w	r3, r7, #16
 8019a3c:	4619      	mov	r1, r3
 8019a3e:	486e      	ldr	r0, [pc, #440]	; (8019bf8 <CSE_step+0x1278>)
 8019a40:	f7fe fb28 	bl	8018094 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8019a44:	2300      	movs	r3, #0
 8019a46:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019a4a:	e034      	b.n	8019ab6 <CSE_step+0x1136>
    s_0 = 0.0017320508075688774 * CSE_DW.P[iAcol_0];
 8019a4c:	4a68      	ldr	r2, [pc, #416]	; (8019bf0 <CSE_step+0x1270>)
 8019a4e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019a52:	00db      	lsls	r3, r3, #3
 8019a54:	4413      	add	r3, r2
 8019a56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019a5a:	a363      	add	r3, pc, #396	; (adr r3, 8019be8 <CSE_step+0x1268>)
 8019a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a60:	f7e6 fdbc 	bl	80005dc <__aeabi_dmul>
 8019a64:	4602      	mov	r2, r0
 8019a66:	460b      	mov	r3, r1
 8019a68:	f107 0108 	add.w	r1, r7, #8
 8019a6c:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0] = s_0;
 8019a70:	f107 0308 	add.w	r3, r7, #8
 8019a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a78:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019a7c:	00c9      	lsls	r1, r1, #3
 8019a7e:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8019a82:	4401      	add	r1, r0
 8019a84:	39d0      	subs	r1, #208	; 0xd0
 8019a86:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 9] = -s_0;
 8019a8a:	f107 0308 	add.w	r3, r7, #8
 8019a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a92:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019a96:	3109      	adds	r1, #9
 8019a98:	4614      	mov	r4, r2
 8019a9a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8019a9e:	00cb      	lsls	r3, r1, #3
 8019aa0:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8019aa4:	4413      	add	r3, r2
 8019aa6:	3bd0      	subs	r3, #208	; 0xd0
 8019aa8:	e9c3 4500 	strd	r4, r5, [r3]
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8019aac:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019ab0:	3301      	adds	r3, #1
 8019ab2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019ab6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019aba:	2b08      	cmp	r3, #8
 8019abc:	ddc6      	ble.n	8019a4c <CSE_step+0x10cc>
  }

  iAcol_0 = 0;
 8019abe:	2300      	movs	r3, #0
 8019ac0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8019ac4:	2300      	movs	r3, #0
 8019ac6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019aca:	e058      	b.n	8019b7e <CSE_step+0x11fe>
    X2state[iAcol_0] += CSE_DW.x[0];
 8019acc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019ad0:	00db      	lsls	r3, r3, #3
 8019ad2:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8019ad6:	4413      	add	r3, r2
 8019ad8:	3bd0      	subs	r3, #208	; 0xd0
 8019ada:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019ade:	4b44      	ldr	r3, [pc, #272]	; (8019bf0 <CSE_step+0x1270>)
 8019ae0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8019ae4:	f7e6 fbc4 	bl	8000270 <__adddf3>
 8019ae8:	4602      	mov	r2, r0
 8019aea:	460b      	mov	r3, r1
 8019aec:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019af0:	00c9      	lsls	r1, r1, #3
 8019af2:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8019af6:	4401      	add	r1, r0
 8019af8:	39d0      	subs	r1, #208	; 0xd0
 8019afa:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 1] += CSE_DW.x[1];
 8019afe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019b02:	3301      	adds	r3, #1
 8019b04:	00db      	lsls	r3, r3, #3
 8019b06:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8019b0a:	4413      	add	r3, r2
 8019b0c:	3bd0      	subs	r3, #208	; 0xd0
 8019b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019b12:	4b37      	ldr	r3, [pc, #220]	; (8019bf0 <CSE_step+0x1270>)
 8019b14:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8019b18:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8019b1c:	3401      	adds	r4, #1
 8019b1e:	f7e6 fba7 	bl	8000270 <__adddf3>
 8019b22:	4602      	mov	r2, r0
 8019b24:	460b      	mov	r3, r1
 8019b26:	00e1      	lsls	r1, r4, #3
 8019b28:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8019b2c:	4401      	add	r1, r0
 8019b2e:	39d0      	subs	r1, #208	; 0xd0
 8019b30:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 2] += CSE_DW.x[2];
 8019b34:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019b38:	3302      	adds	r3, #2
 8019b3a:	00db      	lsls	r3, r3, #3
 8019b3c:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8019b40:	4413      	add	r3, r2
 8019b42:	3bd0      	subs	r3, #208	; 0xd0
 8019b44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019b48:	4b29      	ldr	r3, [pc, #164]	; (8019bf0 <CSE_step+0x1270>)
 8019b4a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8019b4e:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8019b52:	3402      	adds	r4, #2
 8019b54:	f7e6 fb8c 	bl	8000270 <__adddf3>
 8019b58:	4602      	mov	r2, r0
 8019b5a:	460b      	mov	r3, r1
 8019b5c:	00e1      	lsls	r1, r4, #3
 8019b5e:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8019b62:	4401      	add	r1, r0
 8019b64:	39d0      	subs	r1, #208	; 0xd0
 8019b66:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 8019b6a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019b6e:	3303      	adds	r3, #3
 8019b70:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8019b74:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019b78:	3301      	adds	r3, #1
 8019b7a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019b7e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019b82:	2b05      	cmp	r3, #5
 8019b84:	dda2      	ble.n	8019acc <CSE_step+0x114c>
  }

  iAcol_0 = 0;
 8019b86:	2300      	movs	r3, #0
 8019b88:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8019b8c:	2300      	movs	r3, #0
 8019b8e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019b92:	e018      	b.n	8019bc6 <CSE_step+0x1246>
    CSE_S_x(&X2state[iAcol_0], &Y2[iAcol_0]);
 8019b94:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8019b98:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019b9c:	00db      	lsls	r3, r3, #3
 8019b9e:	18d0      	adds	r0, r2, r3
 8019ba0:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8019ba4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019ba8:	00db      	lsls	r3, r3, #3
 8019baa:	4413      	add	r3, r2
 8019bac:	4619      	mov	r1, r3
 8019bae:	f7fe fa71 	bl	8018094 <CSE_S_x>
    iAcol_0 += 3;
 8019bb2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019bb6:	3303      	adds	r3, #3
 8019bb8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8019bbc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019bc0:	3301      	adds	r3, #1
 8019bc2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019bc6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019bca:	2b05      	cmp	r3, #5
 8019bcc:	dde2      	ble.n	8019b94 <CSE_step+0x1214>
  }

  CSE_S_x(CSE_DW.x, tempY);
 8019bce:	f107 0310 	add.w	r3, r7, #16
 8019bd2:	4619      	mov	r1, r3
 8019bd4:	4808      	ldr	r0, [pc, #32]	; (8019bf8 <CSE_step+0x1278>)
 8019bd6:	f7fe fa5d 	bl	8018094 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8019bda:	2300      	movs	r3, #0
 8019bdc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019be0:	e021      	b.n	8019c26 <CSE_step+0x12a6>
 8019be2:	bf00      	nop
 8019be4:	f3af 8000 	nop.w
 8019be8:	64b487da 	.word	0x64b487da
 8019bec:	3f5c60bf 	.word	0x3f5c60bf
 8019bf0:	2001c340 	.word	0x2001c340
 8019bf4:	2001c320 	.word	0x2001c320
 8019bf8:	2001c388 	.word	0x2001c388
    C[iAcol_0] = CSE_DW.x[iAcol_0];
 8019bfc:	4ab8      	ldr	r2, [pc, #736]	; (8019ee0 <CSE_step+0x1560>)
 8019bfe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019c02:	3309      	adds	r3, #9
 8019c04:	00db      	lsls	r3, r3, #3
 8019c06:	4413      	add	r3, r2
 8019c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c0c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8019c10:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019c14:	00c9      	lsls	r1, r1, #3
 8019c16:	4401      	add	r1, r0
 8019c18:	e9c1 2300 	strd	r2, r3, [r1]
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8019c1c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019c20:	3301      	adds	r3, #1
 8019c22:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019c26:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019c2a:	2b02      	cmp	r3, #2
 8019c2c:	dde6      	ble.n	8019bfc <CSE_step+0x127c>
  }

  UTMeanCovSqrt_C2vgLQ4W(Wmean, Wcov, -999999.0, tempY, Y2, C, X2state, CSE_DW.x,
 8019c2e:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8019c32:	f107 0210 	add.w	r2, r7, #16
 8019c36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8019c3a:	9304      	str	r3, [sp, #16]
 8019c3c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8019c40:	9303      	str	r3, [sp, #12]
 8019c42:	4ba8      	ldr	r3, [pc, #672]	; (8019ee4 <CSE_step+0x1564>)
 8019c44:	9302      	str	r3, [sp, #8]
 8019c46:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8019c4a:	9301      	str	r3, [sp, #4]
 8019c4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019c50:	9300      	str	r3, [sp, #0]
 8019c52:	460b      	mov	r3, r1
 8019c54:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8019ed8 <CSE_step+0x1558>
 8019c58:	49a3      	ldr	r1, [pc, #652]	; (8019ee8 <CSE_step+0x1568>)
 8019c5a:	48a4      	ldr	r0, [pc, #656]	; (8019eec <CSE_step+0x156c>)
 8019c5c:	f001 fc3c 	bl	801b4d8 <UTMeanCovSqrt_C2vgLQ4W>
    Ss, R);
  memset(&R[0], 0, 9U * sizeof(real_T));
 8019c60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8019c64:	2248      	movs	r2, #72	; 0x48
 8019c66:	2100      	movs	r1, #0
 8019c68:	4618      	mov	r0, r3
 8019c6a:	f014 fd39 	bl	802e6e0 <memset>
  R[0] = 1.0;
 8019c6e:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8019c72:	f04f 0200 	mov.w	r2, #0
 8019c76:	4b9e      	ldr	r3, [pc, #632]	; (8019ef0 <CSE_step+0x1570>)
 8019c78:	e9c1 2300 	strd	r2, r3, [r1]
  R[4] = 1.0;
 8019c7c:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8019c80:	f04f 0200 	mov.w	r2, #0
 8019c84:	4b9a      	ldr	r3, [pc, #616]	; (8019ef0 <CSE_step+0x1570>)
 8019c86:	e9c1 2308 	strd	r2, r3, [r1, #32]
  R[8] = 1.0;
 8019c8a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8019c8e:	f04f 0200 	mov.w	r2, #0
 8019c92:	4b97      	ldr	r3, [pc, #604]	; (8019ef0 <CSE_step+0x1570>)
 8019c94:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8019c98:	2300      	movs	r3, #0
 8019c9a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019c9e:	e07e      	b.n	8019d9e <CSE_step+0x141e>
    coffset = iAcol_0 * 3;
 8019ca0:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019ca4:	4613      	mov	r3, r2
 8019ca6:	005b      	lsls	r3, r3, #1
 8019ca8:	4413      	add	r3, r2
 8019caa:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8019cae:	2300      	movs	r3, #0
 8019cb0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019cb4:	e06a      	b.n	8019d8c <CSE_step+0x140c>
      aoffset = iAcol * 3;
 8019cb6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8019cba:	4613      	mov	r3, r2
 8019cbc:	005b      	lsls	r3, r3, #1
 8019cbe:	4413      	add	r3, r2
 8019cc0:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8019cc4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019cc8:	3301      	adds	r3, #1
 8019cca:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019cce:	00db      	lsls	r3, r3, #3
 8019cd0:	4413      	add	r3, r2
 8019cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019cd6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019cda:	3303      	adds	r3, #3
 8019cdc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019ce0:	00db      	lsls	r3, r3, #3
 8019ce2:	4413      	add	r3, r2
 8019ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ce8:	f7e6 fc78 	bl	80005dc <__aeabi_dmul>
 8019cec:	4602      	mov	r2, r0
 8019cee:	460b      	mov	r3, r1
 8019cf0:	4614      	mov	r4, r2
 8019cf2:	461d      	mov	r5, r3
 8019cf4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019cf8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019cfc:	00db      	lsls	r3, r3, #3
 8019cfe:	4413      	add	r3, r2
 8019d00:	e9d3 0100 	ldrd	r0, r1, [r3]
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8019d04:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019d08:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019d0c:	00db      	lsls	r3, r3, #3
 8019d0e:	4413      	add	r3, r2
 8019d10:	e9d3 2300 	ldrd	r2, r3, [r3]
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8019d14:	f7e6 fc62 	bl	80005dc <__aeabi_dmul>
 8019d18:	4602      	mov	r2, r0
 8019d1a:	460b      	mov	r3, r1
 8019d1c:	4620      	mov	r0, r4
 8019d1e:	4629      	mov	r1, r5
 8019d20:	f7e6 faa6 	bl	8000270 <__adddf3>
 8019d24:	4602      	mov	r2, r0
 8019d26:	460b      	mov	r3, r1
 8019d28:	4690      	mov	r8, r2
 8019d2a:	4699      	mov	r9, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8019d2c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019d30:	3302      	adds	r3, #2
 8019d32:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019d36:	00db      	lsls	r3, r3, #3
 8019d38:	4413      	add	r3, r2
 8019d3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019d3e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019d42:	3306      	adds	r3, #6
 8019d44:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019d48:	00db      	lsls	r3, r3, #3
 8019d4a:	4413      	add	r3, r2
 8019d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d50:	f7e6 fc44 	bl	80005dc <__aeabi_dmul>
 8019d54:	4602      	mov	r2, r0
 8019d56:	460b      	mov	r3, r1
 8019d58:	4610      	mov	r0, r2
 8019d5a:	4619      	mov	r1, r3
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8019d5c:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8019d60:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019d64:	18d4      	adds	r4, r2, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8019d66:	4602      	mov	r2, r0
 8019d68:	460b      	mov	r3, r1
 8019d6a:	4640      	mov	r0, r8
 8019d6c:	4649      	mov	r1, r9
 8019d6e:	f7e6 fa7f 	bl	8000270 <__adddf3>
 8019d72:	4602      	mov	r2, r0
 8019d74:	460b      	mov	r3, r1
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8019d76:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8019d7a:	00e1      	lsls	r1, r4, #3
 8019d7c:	4401      	add	r1, r0
 8019d7e:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8019d82:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019d86:	3301      	adds	r3, #1
 8019d88:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019d8c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019d90:	2b02      	cmp	r3, #2
 8019d92:	dd90      	ble.n	8019cb6 <CSE_step+0x1336>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8019d94:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019d98:	3301      	adds	r3, #1
 8019d9a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019d9e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019da2:	2b02      	cmp	r3, #2
 8019da4:	f77f af7c 	ble.w	8019ca0 <CSE_step+0x1320>
    }
  }

  iAcol_0 = 0;
 8019da8:	2300      	movs	r3, #0
 8019daa:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  iAcol = 0;
 8019dae:	2300      	movs	r3, #0
 8019db0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 8019db4:	2300      	movs	r3, #0
 8019db6:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8019dba:	e077      	b.n	8019eac <CSE_step+0x152c>
    Y2[iAcol_0] = R_0[iAcol];
 8019dbc:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019dc0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019dc4:	00db      	lsls	r3, r3, #3
 8019dc6:	4413      	add	r3, r2
 8019dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dcc:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019dd0:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019dd4:	00c9      	lsls	r1, r1, #3
 8019dd6:	4401      	add	r1, r0
 8019dd8:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 3] = CSE_P.Q_Value[coffset];
 8019ddc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019de0:	1cd9      	adds	r1, r3, #3
 8019de2:	4a44      	ldr	r2, [pc, #272]	; (8019ef4 <CSE_step+0x1574>)
 8019de4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019de8:	3344      	adds	r3, #68	; 0x44
 8019dea:	00db      	lsls	r3, r3, #3
 8019dec:	4413      	add	r3, r2
 8019dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019df2:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019df6:	00c9      	lsls	r1, r1, #3
 8019df8:	4401      	add	r1, r0
 8019dfa:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 1] = R_0[iAcol + 1];
 8019dfe:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019e02:	3301      	adds	r3, #1
 8019e04:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019e08:	1c51      	adds	r1, r2, #1
 8019e0a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019e0e:	00db      	lsls	r3, r3, #3
 8019e10:	4413      	add	r3, r2
 8019e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e16:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019e1a:	00c9      	lsls	r1, r1, #3
 8019e1c:	4401      	add	r1, r0
 8019e1e:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 4] = CSE_P.Q_Value[coffset + 3];
 8019e22:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019e26:	3303      	adds	r3, #3
 8019e28:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019e2c:	1d11      	adds	r1, r2, #4
 8019e2e:	4a31      	ldr	r2, [pc, #196]	; (8019ef4 <CSE_step+0x1574>)
 8019e30:	3344      	adds	r3, #68	; 0x44
 8019e32:	00db      	lsls	r3, r3, #3
 8019e34:	4413      	add	r3, r2
 8019e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e3a:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019e3e:	00c9      	lsls	r1, r1, #3
 8019e40:	4401      	add	r1, r0
 8019e42:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 2] = R_0[iAcol + 2];
 8019e46:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019e4a:	3302      	adds	r3, #2
 8019e4c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019e50:	1c91      	adds	r1, r2, #2
 8019e52:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019e56:	00db      	lsls	r3, r3, #3
 8019e58:	4413      	add	r3, r2
 8019e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e5e:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019e62:	00c9      	lsls	r1, r1, #3
 8019e64:	4401      	add	r1, r0
 8019e66:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 5] = CSE_P.Q_Value[coffset + 6];
 8019e6a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019e6e:	3306      	adds	r3, #6
 8019e70:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019e74:	1d51      	adds	r1, r2, #5
 8019e76:	4a1f      	ldr	r2, [pc, #124]	; (8019ef4 <CSE_step+0x1574>)
 8019e78:	3344      	adds	r3, #68	; 0x44
 8019e7a:	00db      	lsls	r3, r3, #3
 8019e7c:	4413      	add	r3, r2
 8019e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e82:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019e86:	00c9      	lsls	r1, r1, #3
 8019e88:	4401      	add	r1, r0
 8019e8a:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 6;
 8019e8e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019e92:	3306      	adds	r3, #6
 8019e94:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    iAcol += 3;
 8019e98:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019e9c:	3303      	adds	r3, #3
 8019e9e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 8019ea2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019ea6:	3301      	adds	r3, #1
 8019ea8:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8019eac:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019eb0:	2b02      	cmp	r3, #2
 8019eb2:	dd83      	ble.n	8019dbc <CSE_step+0x143c>
  }

  qr_DvOBrgQi(Y2, X2state, R);
 8019eb4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019eb8:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8019ebc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8019ec0:	4618      	mov	r0, r3
 8019ec2:	f004 fcc1 	bl	801e848 <qr_DvOBrgQi>
  iAcol_0 = 0;
 8019ec6:	2300      	movs	r3, #0
 8019ec8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8019ecc:	2300      	movs	r3, #0
 8019ece:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019ed2:	e04c      	b.n	8019f6e <CSE_step+0x15ee>
 8019ed4:	f3af 8000 	nop.w
 8019ed8:	00000000 	.word	0x00000000
 8019edc:	c12e847e 	.word	0xc12e847e
 8019ee0:	2001c340 	.word	0x2001c340
 8019ee4:	2001c388 	.word	0x2001c388
 8019ee8:	08030a60 	.word	0x08030a60
 8019eec:	08030a50 	.word	0x08030a50
 8019ef0:	3ff00000 	.word	0x3ff00000
 8019ef4:	20000088 	.word	0x20000088
    CSE_DW.P[iAcol_0] = R[iAcol];
 8019ef8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019efc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019f00:	00db      	lsls	r3, r3, #3
 8019f02:	4413      	add	r3, r2
 8019f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f08:	481e      	ldr	r0, [pc, #120]	; (8019f84 <CSE_step+0x1604>)
 8019f0a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019f0e:	00c9      	lsls	r1, r1, #3
 8019f10:	4401      	add	r1, r0
 8019f12:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 8019f16:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019f1a:	3303      	adds	r3, #3
 8019f1c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019f20:	1c51      	adds	r1, r2, #1
 8019f22:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019f26:	00db      	lsls	r3, r3, #3
 8019f28:	4413      	add	r3, r2
 8019f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f2e:	4815      	ldr	r0, [pc, #84]	; (8019f84 <CSE_step+0x1604>)
 8019f30:	00c9      	lsls	r1, r1, #3
 8019f32:	4401      	add	r1, r0
 8019f34:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8019f38:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019f3c:	3306      	adds	r3, #6
 8019f3e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019f42:	1c91      	adds	r1, r2, #2
 8019f44:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019f48:	00db      	lsls	r3, r3, #3
 8019f4a:	4413      	add	r3, r2
 8019f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f50:	480c      	ldr	r0, [pc, #48]	; (8019f84 <CSE_step+0x1604>)
 8019f52:	00c9      	lsls	r1, r1, #3
 8019f54:	4401      	add	r1, r0
 8019f56:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 8019f5a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019f5e:	3303      	adds	r3, #3
 8019f60:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8019f64:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019f68:	3301      	adds	r3, #1
 8019f6a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019f6e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019f72:	2b02      	cmp	r3, #2
 8019f74:	ddc0      	ble.n	8019ef8 <CSE_step+0x1578>
  }
}
 8019f76:	bf00      	nop
 8019f78:	bf00      	nop
 8019f7a:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 8019f7e:	46bd      	mov	sp, r7
 8019f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019f84:	2001c340 	.word	0x2001c340

08019f88 <CSE_initialize>:

void CSE_initialize(void)
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN(sizeof(real_T));
 8019f8c:	2008      	movs	r0, #8
 8019f8e:	f005 ffdd 	bl	801ff4c <rt_InitInfAndNaN>
  memcpy(&CSE_DW.P[0], &CSE_P.DataStoreMemoryP_InitialValue[0], 9U * sizeof
 8019f92:	2248      	movs	r2, #72	; 0x48
 8019f94:	490b      	ldr	r1, [pc, #44]	; (8019fc4 <CSE_initialize+0x3c>)
 8019f96:	480c      	ldr	r0, [pc, #48]	; (8019fc8 <CSE_initialize+0x40>)
 8019f98:	f014 fb94 	bl	802e6c4 <memcpy>
         (real_T));
  CSE_DW.x[0] = CSE_P.DataStoreMemoryx_InitialValue[0];
 8019f9c:	4b0b      	ldr	r3, [pc, #44]	; (8019fcc <CSE_initialize+0x44>)
 8019f9e:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 8019fa2:	4909      	ldr	r1, [pc, #36]	; (8019fc8 <CSE_initialize+0x40>)
 8019fa4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  CSE_DW.x[1] = CSE_P.DataStoreMemoryx_InitialValue[1];
 8019fa8:	4b08      	ldr	r3, [pc, #32]	; (8019fcc <CSE_initialize+0x44>)
 8019faa:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8019fae:	4906      	ldr	r1, [pc, #24]	; (8019fc8 <CSE_initialize+0x40>)
 8019fb0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  CSE_DW.x[2] = CSE_P.DataStoreMemoryx_InitialValue[2];
 8019fb4:	4b05      	ldr	r3, [pc, #20]	; (8019fcc <CSE_initialize+0x44>)
 8019fb6:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8019fba:	4903      	ldr	r1, [pc, #12]	; (8019fc8 <CSE_initialize+0x40>)
 8019fbc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 8019fc0:	bf00      	nop
 8019fc2:	bd80      	pop	{r7, pc}
 8019fc4:	200002f8 	.word	0x200002f8
 8019fc8:	2001c340 	.word	0x2001c340
 8019fcc:	20000088 	.word	0x20000088

08019fd0 <SIM0_step>:
ExtU_SIM0_T SIM0_U;
ExtY_SIM0_T SIM0_Y;
static RT_MODEL_SIM0_T SIM0_M_;
RT_MODEL_SIM0_T *const SIM0_M = &SIM0_M_;
void SIM0_step(void)
{
 8019fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fd4:	f5ad 5da0 	sub.w	sp, sp, #5120	; 0x1400
 8019fd8:	b087      	sub	sp, #28
 8019fda:	af00      	add	r7, sp, #0
  int32_T i;
  int32_T iU;
  int32_T rtb_is_charge;
  boolean_T rtb_Logic_idx_0;
  boolean_T rtb_Logic_p_idx_0;
  rtb_Memory20 = SIM0_DW.Memory20_PreviousInput;
 8019fdc:	4b20      	ldr	r3, [pc, #128]	; (801a060 <SIM0_step+0x90>)
 8019fde:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8019fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe6:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8019fea:	f101 0118 	add.w	r1, r1, #24
 8019fee:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 8019ff2:	4b1c      	ldr	r3, [pc, #112]	; (801a064 <SIM0_step+0x94>)
 8019ff4:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8019ff8:	4b1a      	ldr	r3, [pc, #104]	; (801a064 <SIM0_step+0x94>)
 8019ffa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019ffe:	a316      	add	r3, pc, #88	; (adr r3, 801a058 <SIM0_step+0x88>)
 801a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a004:	f7e6 faea 	bl	80005dc <__aeabi_dmul>
 801a008:	4602      	mov	r2, r0
 801a00a:	460b      	mov	r3, r1
 801a00c:	4650      	mov	r0, sl
 801a00e:	4659      	mov	r1, fp
 801a010:	f7e6 fc0e 	bl	8000830 <__aeabi_ddiv>
 801a014:	4602      	mov	r2, r0
 801a016:	460b      	mov	r3, r1
 801a018:	4610      	mov	r0, r2
 801a01a:	4619      	mov	r1, r3
                SIM0_DW.Memory9_PreviousInput);
 801a01c:	4b10      	ldr	r3, [pc, #64]	; (801a060 <SIM0_step+0x90>)
 801a01e:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 801a022:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 801a026:	f7e6 fad9 	bl	80005dc <__aeabi_dmul>
 801a02a:	4602      	mov	r2, r0
 801a02c:	460b      	mov	r3, r1
 801a02e:	ec43 2b17 	vmov	d7, r2, r3
 801a032:	eeb0 0a47 	vmov.f32	s0, s14
 801a036:	eef0 0a67 	vmov.f32	s1, s15
 801a03a:	f014 fcc5 	bl	802e9c8 <exp>
 801a03e:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801a042:	f103 0308 	add.w	r3, r3, #8
 801a046:	ed83 0b00 	vstr	d0, [r3]
  for (i = 0; i < 126; i++) {
 801a04a:	2300      	movs	r3, #0
 801a04c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a050:	f102 020c 	add.w	r2, r2, #12
 801a054:	6013      	str	r3, [r2, #0]
 801a056:	e243      	b.n	801a4e0 <SIM0_step+0x510>
 801a058:	00000000 	.word	0x00000000
 801a05c:	40ac2000 	.word	0x40ac2000
 801a060:	2001c3a0 	.word	0x2001c3a0
 801a064:	20000360 	.word	0x20000360
    rtb_Memory15[i] = SIM0_DW.Memory15_PreviousInput[i];
 801a068:	4aca      	ldr	r2, [pc, #808]	; (801a394 <SIM0_step+0x3c4>)
 801a06a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a06e:	f103 030c 	add.w	r3, r3, #12
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	3305      	adds	r3, #5
 801a076:	00db      	lsls	r3, r3, #3
 801a078:	4413      	add	r3, r2
 801a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a07e:	f607 70c8 	addw	r0, r7, #4040	; 0xfc8
 801a082:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a086:	f101 010c 	add.w	r1, r1, #12
 801a08a:	6809      	ldr	r1, [r1, #0]
 801a08c:	00c9      	lsls	r1, r1, #3
 801a08e:	4401      	add	r1, r0
 801a090:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 801a094:	4abf      	ldr	r2, [pc, #764]	; (801a394 <SIM0_step+0x3c4>)
 801a096:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a09a:	f103 030c 	add.w	r3, r3, #12
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	f203 1303 	addw	r3, r3, #259	; 0x103
 801a0a4:	00db      	lsls	r3, r3, #3
 801a0a6:	4413      	add	r3, r2
 801a0a8:	e9d3 0100 	ldrd	r0, r1, [r3]
      SIM0_DW.Memory10_PreviousInput[i];
 801a0ac:	4ab9      	ldr	r2, [pc, #740]	; (801a394 <SIM0_step+0x3c4>)
 801a0ae:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a0b2:	f103 030c 	add.w	r3, r3, #12
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	f203 1381 	addw	r3, r3, #385	; 0x181
 801a0bc:	00db      	lsls	r3, r3, #3
 801a0be:	4413      	add	r3, r2
 801a0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 801a0c4:	f7e6 fbb4 	bl	8000830 <__aeabi_ddiv>
 801a0c8:	4602      	mov	r2, r0
 801a0ca:	460b      	mov	r3, r1
 801a0cc:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a0d0:	f101 0108 	add.w	r1, r1, #8
 801a0d4:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.Rs, 12U);
 801a0d8:	220c      	movs	r2, #12
 801a0da:	49af      	ldr	r1, [pc, #700]	; (801a398 <SIM0_step+0x3c8>)
 801a0dc:	48af      	ldr	r0, [pc, #700]	; (801a39c <SIM0_step+0x3cc>)
 801a0de:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a0e2:	f103 0308 	add.w	r3, r3, #8
 801a0e6:	ed93 0b00 	vldr	d0, [r3]
 801a0ea:	f003 fb3b 	bl	801d764 <look1_binlxpw>
 801a0ee:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a0f2:	ed83 0b00 	vstr	d0, [r3]
    rtb_is_drive = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.tau, 12U);
 801a0f6:	220c      	movs	r2, #12
 801a0f8:	49a9      	ldr	r1, [pc, #676]	; (801a3a0 <SIM0_step+0x3d0>)
 801a0fa:	48a8      	ldr	r0, [pc, #672]	; (801a39c <SIM0_step+0x3cc>)
 801a0fc:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a100:	f103 0308 	add.w	r3, r3, #8
 801a104:	ed93 0b00 	vldr	d0, [r3]
 801a108:	f003 fb2c 	bl	801d764 <look1_binlxpw>
 801a10c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a110:	f103 0318 	add.w	r3, r3, #24
 801a114:	ed83 0b00 	vstr	d0, [r3]
    rtb_Product9 = rtb_Product1_n * rtb_is_drive;
 801a118:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a11c:	f103 0318 	add.w	r3, r3, #24
 801a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a124:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a128:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a12c:	f7e6 fa56 	bl	80005dc <__aeabi_dmul>
 801a130:	4602      	mov	r2, r0
 801a132:	460b      	mov	r3, r1
 801a134:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 801a138:	f101 0118 	add.w	r1, r1, #24
 801a13c:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 801a140:	220c      	movs	r2, #12
 801a142:	4998      	ldr	r1, [pc, #608]	; (801a3a4 <SIM0_step+0x3d4>)
 801a144:	4895      	ldr	r0, [pc, #596]	; (801a39c <SIM0_step+0x3cc>)
 801a146:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a14a:	f103 0308 	add.w	r3, r3, #8
 801a14e:	ed93 0b00 	vldr	d0, [r3]
 801a152:	f003 fb07 	bl	801d764 <look1_binlxpw>
 801a156:	ec51 0b10 	vmov	r0, r1, d0
 801a15a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a162:	f7e6 f885 	bl	8000270 <__adddf3>
 801a166:	4602      	mov	r2, r0
 801a168:	460b      	mov	r3, r1
 801a16a:	4610      	mov	r0, r2
 801a16c:	4619      	mov	r1, r3
      SIM0_P.Rp, 12U)) * SIM0_P.Ts;
 801a16e:	4b8e      	ldr	r3, [pc, #568]	; (801a3a8 <SIM0_step+0x3d8>)
 801a170:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 801a174:	f7e6 fa32 	bl	80005dc <__aeabi_dmul>
 801a178:	4602      	mov	r2, r0
 801a17a:	460b      	mov	r3, r1
 801a17c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a180:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 801a184:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 801a188:	f103 0318 	add.w	r3, r3, #24
 801a18c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a190:	4602      	mov	r2, r0
 801a192:	460b      	mov	r3, r1
 801a194:	f7e6 f86c 	bl	8000270 <__adddf3>
 801a198:	4602      	mov	r2, r0
 801a19a:	460b      	mov	r3, r1
 801a19c:	4610      	mov	r0, r2
 801a19e:	4619      	mov	r1, r3
 801a1a0:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1a8:	f7e6 f862 	bl	8000270 <__adddf3>
 801a1ac:	4602      	mov	r2, r0
 801a1ae:	460b      	mov	r3, r1
 801a1b0:	4610      	mov	r0, r2
 801a1b2:	4619      	mov	r1, r3
 801a1b4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a1b8:	f103 0318 	add.w	r3, r3, #24
 801a1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1c0:	f7e6 fa0c 	bl	80005dc <__aeabi_dmul>
 801a1c4:	4602      	mov	r2, r0
 801a1c6:	460b      	mov	r3, r1
 801a1c8:	4692      	mov	sl, r2
 801a1ca:	469b      	mov	fp, r3
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 801a1cc:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 801a1d0:	f103 0318 	add.w	r3, r3, #24
 801a1d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a1d8:	4602      	mov	r2, r0
 801a1da:	460b      	mov	r3, r1
 801a1dc:	f7e6 f848 	bl	8000270 <__adddf3>
 801a1e0:	4602      	mov	r2, r0
 801a1e2:	460b      	mov	r3, r1
 801a1e4:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a1e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a1ec:	f7e6 f83e 	bl	800026c <__aeabi_dsub>
 801a1f0:	4602      	mov	r2, r0
 801a1f2:	460b      	mov	r3, r1
 801a1f4:	4610      	mov	r0, r2
 801a1f6:	4619      	mov	r1, r3
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 801a1f8:	4b66      	ldr	r3, [pc, #408]	; (801a394 <SIM0_step+0x3c4>)
 801a1fa:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 801a202:	f7e6 f9eb 	bl	80005dc <__aeabi_dmul>
 801a206:	4602      	mov	r2, r0
 801a208:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 801a20a:	4650      	mov	r0, sl
 801a20c:	4659      	mov	r1, fp
 801a20e:	f7e6 f82f 	bl	8000270 <__adddf3>
 801a212:	4602      	mov	r2, r0
 801a214:	460b      	mov	r3, r1
 801a216:	e9c7 2300 	strd	r2, r3, [r7]
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 801a21a:	4b63      	ldr	r3, [pc, #396]	; (801a3a8 <SIM0_step+0x3d8>)
 801a21c:	e9d3 ab3c 	ldrd	sl, fp, [r3, #240]	; 0xf0
 801a220:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a224:	f103 0318 	add.w	r3, r3, #24
 801a228:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a22c:	4602      	mov	r2, r0
 801a22e:	460b      	mov	r3, r1
 801a230:	f7e6 f81e 	bl	8000270 <__adddf3>
 801a234:	4602      	mov	r2, r0
 801a236:	460b      	mov	r3, r1
 801a238:	4650      	mov	r0, sl
 801a23a:	4659      	mov	r1, fp
 801a23c:	f7e6 f816 	bl	800026c <__aeabi_dsub>
 801a240:	4602      	mov	r2, r0
 801a242:	460b      	mov	r3, r1
 801a244:	4610      	mov	r0, r2
 801a246:	4619      	mov	r1, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 801a248:	4a52      	ldr	r2, [pc, #328]	; (801a394 <SIM0_step+0x3c4>)
 801a24a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a24e:	f103 030c 	add.w	r3, r3, #12
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	3383      	adds	r3, #131	; 0x83
 801a256:	00db      	lsls	r3, r3, #3
 801a258:	4413      	add	r3, r2
 801a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a25e:	f7e6 f9bd 	bl	80005dc <__aeabi_dmul>
 801a262:	4602      	mov	r2, r0
 801a264:	460b      	mov	r3, r1
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 801a266:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a26a:	f7e5 ffff 	bl	800026c <__aeabi_dsub>
 801a26e:	4602      	mov	r2, r0
 801a270:	460b      	mov	r3, r1
 801a272:	4692      	mov	sl, r2
 801a274:	469b      	mov	fp, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 801a276:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a27a:	f103 0318 	add.w	r3, r3, #24
 801a27e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a282:	4602      	mov	r2, r0
 801a284:	460b      	mov	r3, r1
 801a286:	f7e5 fff3 	bl	8000270 <__adddf3>
 801a28a:	4602      	mov	r2, r0
 801a28c:	460b      	mov	r3, r1
 801a28e:	4610      	mov	r0, r2
 801a290:	4619      	mov	r1, r3
      SIM0_P.Ts);
 801a292:	4b45      	ldr	r3, [pc, #276]	; (801a3a8 <SIM0_step+0x3d8>)
 801a294:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 801a298:	f7e5 ffea 	bl	8000270 <__adddf3>
 801a29c:	4602      	mov	r2, r0
 801a29e:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 801a2a0:	4650      	mov	r0, sl
 801a2a2:	4659      	mov	r1, fp
 801a2a4:	f7e6 fac4 	bl	8000830 <__aeabi_ddiv>
 801a2a8:	4602      	mov	r2, r0
 801a2aa:	460b      	mov	r3, r1
 801a2ac:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a2b0:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 801a2b4:	220c      	movs	r2, #12
 801a2b6:	493d      	ldr	r1, [pc, #244]	; (801a3ac <SIM0_step+0x3dc>)
 801a2b8:	4838      	ldr	r0, [pc, #224]	; (801a39c <SIM0_step+0x3cc>)
 801a2ba:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a2be:	f103 0308 	add.w	r3, r3, #8
 801a2c2:	ed93 0b00 	vldr	d0, [r3]
 801a2c6:	f003 fa4d 	bl	801d764 <look1_binlxpw>
 801a2ca:	ec53 2b10 	vmov	r2, r3, d0
 801a2ce:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a2d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a2d6:	f7e5 ffcb 	bl	8000270 <__adddf3>
 801a2da:	4602      	mov	r2, r0
 801a2dc:	460b      	mov	r3, r1
 801a2de:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a2e2:	f101 0118 	add.w	r1, r1, #24
 801a2e6:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_P.ocv, 12U);
    SIM0_Y.cell_voltages[i] = rtb_is_drive;
 801a2ea:	4a31      	ldr	r2, [pc, #196]	; (801a3b0 <SIM0_step+0x3e0>)
 801a2ec:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a2f0:	f103 030c 	add.w	r3, r3, #12
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	3308      	adds	r3, #8
 801a2f8:	00db      	lsls	r3, r3, #3
 801a2fa:	18d1      	adds	r1, r2, r3
 801a2fc:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a300:	f103 0318 	add.w	r3, r3, #24
 801a304:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a308:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_socs[i] = rtb_Memory22;
 801a30c:	4a28      	ldr	r2, [pc, #160]	; (801a3b0 <SIM0_step+0x3e0>)
 801a30e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a312:	f103 030c 	add.w	r3, r3, #12
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	3386      	adds	r3, #134	; 0x86
 801a31a:	00db      	lsls	r3, r3, #3
 801a31c:	18d1      	adds	r1, r2, r3
 801a31e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a322:	f103 0308 	add.w	r3, r3, #8
 801a326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a32a:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_capacities[i] = SIM0_DW.Memory10_PreviousInput[i];
 801a32e:	4a19      	ldr	r2, [pc, #100]	; (801a394 <SIM0_step+0x3c4>)
 801a330:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a334:	f103 030c 	add.w	r3, r3, #12
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	f203 1381 	addw	r3, r3, #385	; 0x181
 801a33e:	00db      	lsls	r3, r3, #3
 801a340:	4413      	add	r3, r2
 801a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a346:	481a      	ldr	r0, [pc, #104]	; (801a3b0 <SIM0_step+0x3e0>)
 801a348:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a34c:	f101 010c 	add.w	r1, r1, #12
 801a350:	6809      	ldr	r1, [r1, #0]
 801a352:	f501 7182 	add.w	r1, r1, #260	; 0x104
 801a356:	00c9      	lsls	r1, r1, #3
 801a358:	4401      	add	r1, r0
 801a35a:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory21[i] = SIM0_DW.Memory10_PreviousInput[i] * rtb_Exp;
 801a35e:	4a0d      	ldr	r2, [pc, #52]	; (801a394 <SIM0_step+0x3c4>)
 801a360:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a364:	f103 030c 	add.w	r3, r3, #12
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	f203 1381 	addw	r3, r3, #385	; 0x181
 801a36e:	00db      	lsls	r3, r3, #3
 801a370:	4413      	add	r3, r2
 801a372:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a376:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801a37a:	f103 0308 	add.w	r3, r3, #8
 801a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a382:	f7e6 f92b 	bl	80005dc <__aeabi_dmul>
 801a386:	4602      	mov	r2, r0
 801a388:	460b      	mov	r3, r1
 801a38a:	f507 60fd 	add.w	r0, r7, #2024	; 0x7e8
 801a38e:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a392:	e00f      	b.n	801a3b4 <SIM0_step+0x3e4>
 801a394:	2001c3a0 	.word	0x2001c3a0
 801a398:	200003e8 	.word	0x200003e8
 801a39c:	20000e80 	.word	0x20000e80
 801a3a0:	20000ee8 	.word	0x20000ee8
 801a3a4:	20000380 	.word	0x20000380
 801a3a8:	20000360 	.word	0x20000360
 801a3ac:	20000e18 	.word	0x20000e18
 801a3b0:	2001dc00 	.word	0x2001dc00
 801a3b4:	f101 010c 	add.w	r1, r1, #12
 801a3b8:	6809      	ldr	r1, [r1, #0]
 801a3ba:	00c9      	lsls	r1, r1, #3
 801a3bc:	4401      	add	r1, r0
 801a3be:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz[i] = rtb_Product1_n;
 801a3c2:	f107 0318 	add.w	r3, r7, #24
 801a3c6:	3b10      	subs	r3, #16
 801a3c8:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a3cc:	f102 020c 	add.w	r2, r2, #12
 801a3d0:	6812      	ldr	r2, [r2, #0]
 801a3d2:	00d2      	lsls	r2, r2, #3
 801a3d4:	1899      	adds	r1, r3, r2
 801a3d6:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3de:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rpz[i] = (SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 801a3e2:	4aa2      	ldr	r2, [pc, #648]	; (801a66c <SIM0_step+0x69c>)
 801a3e4:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a3e8:	f103 030c 	add.w	r3, r3, #12
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801a3f2:	00db      	lsls	r3, r3, #3
 801a3f4:	4413      	add	r3, r2
 801a3f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a3fa:	4b9d      	ldr	r3, [pc, #628]	; (801a670 <SIM0_step+0x6a0>)
 801a3fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801a400:	f7e6 fa16 	bl	8000830 <__aeabi_ddiv>
 801a404:	4602      	mov	r2, r0
 801a406:	460b      	mov	r3, r1
 801a408:	4610      	mov	r0, r2
 801a40a:	4619      	mov	r1, r3
                  * SIM0_DW.Memory19_PreviousInput[i] * SIM0_P.Gain_Gain +
 801a40c:	4a97      	ldr	r2, [pc, #604]	; (801a66c <SIM0_step+0x69c>)
 801a40e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a412:	f103 030c 	add.w	r3, r3, #12
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801a41c:	00db      	lsls	r3, r3, #3
 801a41e:	4413      	add	r3, r2
 801a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a424:	f7e6 f8da 	bl	80005dc <__aeabi_dmul>
 801a428:	4602      	mov	r2, r0
 801a42a:	460b      	mov	r3, r1
 801a42c:	4610      	mov	r0, r2
 801a42e:	4619      	mov	r1, r3
 801a430:	4b8f      	ldr	r3, [pc, #572]	; (801a670 <SIM0_step+0x6a0>)
 801a432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a436:	3318      	adds	r3, #24
 801a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a43c:	f7e6 f8ce 	bl	80005dc <__aeabi_dmul>
 801a440:	4602      	mov	r2, r0
 801a442:	460b      	mov	r3, r1
 801a444:	4610      	mov	r0, r2
 801a446:	4619      	mov	r1, r3
 801a448:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a44c:	f103 0318 	add.w	r3, r3, #24
 801a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a454:	f7e5 ff0c 	bl	8000270 <__adddf3>
 801a458:	4602      	mov	r2, r0
 801a45a:	460b      	mov	r3, r1
 801a45c:	4610      	mov	r0, r2
 801a45e:	4619      	mov	r1, r3
                  rtb_Memory20) * SIM0_P.Ts + SIM0_DW.Memory_PreviousInput[i];
 801a460:	4b83      	ldr	r3, [pc, #524]	; (801a670 <SIM0_step+0x6a0>)
 801a462:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 801a466:	f7e6 f8b9 	bl	80005dc <__aeabi_dmul>
 801a46a:	4602      	mov	r2, r0
 801a46c:	460b      	mov	r3, r1
 801a46e:	4610      	mov	r0, r2
 801a470:	4619      	mov	r1, r3
 801a472:	4a7e      	ldr	r2, [pc, #504]	; (801a66c <SIM0_step+0x69c>)
 801a474:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a478:	f103 030c 	add.w	r3, r3, #12
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	f203 1303 	addw	r3, r3, #259	; 0x103
 801a482:	00db      	lsls	r3, r3, #3
 801a484:	4413      	add	r3, r2
 801a486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a48a:	f7e5 fef1 	bl	8000270 <__adddf3>
 801a48e:	4602      	mov	r2, r0
 801a490:	460b      	mov	r3, r1
    rtb_Rpz[i] = (SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 801a492:	f507 707e 	add.w	r0, r7, #1016	; 0x3f8
 801a496:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a49a:	f101 010c 	add.w	r1, r1, #12
 801a49e:	6809      	ldr	r1, [r1, #0]
 801a4a0:	00c9      	lsls	r1, r1, #3
 801a4a2:	4401      	add	r1, r0
 801a4a4:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory19[i] = rtb_is_drive;
 801a4a8:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 801a4ac:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a4b0:	f103 030c 	add.w	r3, r3, #12
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	00db      	lsls	r3, r3, #3
 801a4b8:	18d1      	adds	r1, r2, r3
 801a4ba:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a4be:	f103 0318 	add.w	r3, r3, #24
 801a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4c6:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 801a4ca:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a4ce:	f103 030c 	add.w	r3, r3, #12
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	3301      	adds	r3, #1
 801a4d6:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a4da:	f102 020c 	add.w	r2, r2, #12
 801a4de:	6013      	str	r3, [r2, #0]
 801a4e0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a4e4:	f103 030c 	add.w	r3, r3, #12
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	2b7d      	cmp	r3, #125	; 0x7d
 801a4ec:	f77f adbc 	ble.w	801a068 <SIM0_step+0x98>
  }

  boolean_T rtb_Logic_idx_1;
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 801a4f0:	4b5e      	ldr	r3, [pc, #376]	; (801a66c <SIM0_step+0x69c>)
 801a4f2:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801a4f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a4fa:	f04f 0200 	mov.w	r2, #0
 801a4fe:	f04f 0300 	mov.w	r3, #0
 801a502:	f7e6 fad3 	bl	8000aac <__aeabi_dcmpeq>
 801a506:	4603      	mov	r3, r0
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d101      	bne.n	801a510 <SIM0_step+0x540>
 801a50c:	2602      	movs	r6, #2
 801a50e:	e000      	b.n	801a512 <SIM0_step+0x542>
 801a510:	2600      	movs	r6, #0
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 801a512:	4b56      	ldr	r3, [pc, #344]	; (801a66c <SIM0_step+0x69c>)
 801a514:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801a518:	3308      	adds	r3, #8
 801a51a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a51e:	2301      	movs	r3, #1
 801a520:	469a      	mov	sl, r3
 801a522:	f04f 0200 	mov.w	r2, #0
 801a526:	f04f 0300 	mov.w	r3, #0
 801a52a:	f7e6 fabf 	bl	8000aac <__aeabi_dcmpeq>
 801a52e:	4603      	mov	r3, r0
 801a530:	2b00      	cmp	r3, #0
 801a532:	d001      	beq.n	801a538 <SIM0_step+0x568>
 801a534:	2300      	movs	r3, #0
 801a536:	469a      	mov	sl, r3
 801a538:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 801a53c:	4433      	add	r3, r6
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 801a53e:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_m);
 801a540:	4b4a      	ldr	r3, [pc, #296]	; (801a66c <SIM0_step+0x69c>)
 801a542:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801a546:	3318      	adds	r3, #24
 801a548:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 801a54a:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 801a54c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a550:	f102 020c 	add.w	r2, r2, #12
 801a554:	6013      	str	r3, [r2, #0]
  rtb_Logic_idx_0 = SIM0_P.Logic_table[(uint32_T)i];
 801a556:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a55a:	f103 030c 	add.w	r3, r3, #12
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	4a43      	ldr	r2, [pc, #268]	; (801a670 <SIM0_step+0x6a0>)
 801a562:	4413      	add	r3, r2
 801a564:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 801a568:	3318      	adds	r3, #24
 801a56a:	781b      	ldrb	r3, [r3, #0]
 801a56c:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 801a570:	f102 0217 	add.w	r2, r2, #23
 801a574:	7013      	strb	r3, [r2, #0]
  rtb_Logic_idx_1 = SIM0_P.Logic_table[i + 8U];
 801a576:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a57a:	f103 030c 	add.w	r3, r3, #12
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	3308      	adds	r3, #8
 801a582:	4a3b      	ldr	r2, [pc, #236]	; (801a670 <SIM0_step+0x6a0>)
 801a584:	4413      	add	r3, r2
 801a586:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 801a58a:	3318      	adds	r3, #24
 801a58c:	781b      	ldrb	r3, [r3, #0]
 801a58e:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 801a592:	f102 0216 	add.w	r2, r2, #22
 801a596:	7013      	strb	r3, [r2, #0]
  SIM0_Y.AMS_error_latched = rtb_Logic_idx_0;
 801a598:	4a36      	ldr	r2, [pc, #216]	; (801a674 <SIM0_step+0x6a4>)
 801a59a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a59e:	f103 0317 	add.w	r3, r3, #23
 801a5a2:	781b      	ldrb	r3, [r3, #0]
 801a5a4:	7013      	strb	r3, [r2, #0]
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 801a5a6:	4b31      	ldr	r3, [pc, #196]	; (801a66c <SIM0_step+0x69c>)
 801a5a8:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801a5ac:	3310      	adds	r3, #16
 801a5ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a5b2:	f04f 0200 	mov.w	r2, #0
 801a5b6:	f04f 0300 	mov.w	r3, #0
 801a5ba:	f7e6 fa77 	bl	8000aac <__aeabi_dcmpeq>
 801a5be:	4603      	mov	r3, r0
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	d101      	bne.n	801a5c8 <SIM0_step+0x5f8>
 801a5c4:	2602      	movs	r6, #2
 801a5c6:	e000      	b.n	801a5ca <SIM0_step+0x5fa>
 801a5c8:	2600      	movs	r6, #0
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 801a5ca:	4b28      	ldr	r3, [pc, #160]	; (801a66c <SIM0_step+0x69c>)
 801a5cc:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801a5d0:	3318      	adds	r3, #24
 801a5d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a5d6:	2301      	movs	r3, #1
 801a5d8:	469a      	mov	sl, r3
 801a5da:	f04f 0200 	mov.w	r2, #0
 801a5de:	f04f 0300 	mov.w	r3, #0
 801a5e2:	f7e6 fa63 	bl	8000aac <__aeabi_dcmpeq>
 801a5e6:	4603      	mov	r3, r0
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d001      	beq.n	801a5f0 <SIM0_step+0x620>
 801a5ec:	2300      	movs	r3, #0
 801a5ee:	469a      	mov	sl, r3
 801a5f0:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 801a5f4:	4433      	add	r3, r6
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 801a5f6:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_c);
 801a5f8:	4b1c      	ldr	r3, [pc, #112]	; (801a66c <SIM0_step+0x69c>)
 801a5fa:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801a5fe:	3319      	adds	r3, #25
 801a600:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 801a602:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 801a604:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a608:	f102 020c 	add.w	r2, r2, #12
 801a60c:	6013      	str	r3, [r2, #0]
  rtb_Logic_p_idx_0 = SIM0_P.Logic_table_p[(uint32_T)i];
 801a60e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a612:	f103 030c 	add.w	r3, r3, #12
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	4a15      	ldr	r2, [pc, #84]	; (801a670 <SIM0_step+0x6a0>)
 801a61a:	4413      	add	r3, r2
 801a61c:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 801a620:	3308      	adds	r3, #8
 801a622:	781b      	ldrb	r3, [r3, #0]
 801a624:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 801a628:	f102 0215 	add.w	r2, r2, #21
 801a62c:	7013      	strb	r3, [r2, #0]
  SIM0_Y.IMD_error_latched = rtb_Logic_p_idx_0;
 801a62e:	4a11      	ldr	r2, [pc, #68]	; (801a674 <SIM0_step+0x6a4>)
 801a630:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a634:	f103 0315 	add.w	r3, r3, #21
 801a638:	781b      	ldrb	r3, [r3, #0]
 801a63a:	7053      	strb	r3, [r2, #1]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 801a63c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a640:	f103 0316 	add.w	r3, r3, #22
 801a644:	781b      	ldrb	r3, [r3, #0]
 801a646:	2b00      	cmp	r3, #0
 801a648:	d016      	beq.n	801a678 <SIM0_step+0x6a8>
 801a64a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a64e:	f103 030c 	add.w	r3, r3, #12
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	3308      	adds	r3, #8
 801a656:	4a06      	ldr	r2, [pc, #24]	; (801a670 <SIM0_step+0x6a0>)
 801a658:	4413      	add	r3, r2
 801a65a:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 801a65e:	3308      	adds	r3, #8
 801a660:	781b      	ldrb	r3, [r3, #0]
 801a662:	4618      	mov	r0, r3
 801a664:	f7e5 ff40 	bl	80004e8 <__aeabi_ui2d>
 801a668:	e00a      	b.n	801a680 <SIM0_step+0x6b0>
 801a66a:	bf00      	nop
 801a66c:	2001c3a0 	.word	0x2001c3a0
 801a670:	20000360 	.word	0x20000360
 801a674:	2001dc00 	.word	0x2001dc00
 801a678:	f04f 0000 	mov.w	r0, #0
 801a67c:	f04f 0100 	mov.w	r1, #0
    SIM0_DW.Memory5_PreviousInput;
 801a680:	4bba      	ldr	r3, [pc, #744]	; (801a96c <SIM0_step+0x99c>)
 801a682:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801a686:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 801a68a:	f7e5 ffa7 	bl	80005dc <__aeabi_dmul>
 801a68e:	4602      	mov	r2, r0
 801a690:	460b      	mov	r3, r1
 801a692:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a696:	f101 0108 	add.w	r1, r1, #8
 801a69a:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.SC_probe = rtb_Memory22;
 801a69e:	49b4      	ldr	r1, [pc, #720]	; (801a970 <SIM0_step+0x9a0>)
 801a6a0:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a6a4:	f103 0308 	add.w	r3, r3, #8
 801a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtb_Exp = rtb_Memory22 * SIM0_DW.Delay1_DSTATE;
 801a6b0:	4bae      	ldr	r3, [pc, #696]	; (801a96c <SIM0_step+0x99c>)
 801a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6b6:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a6ba:	f101 0108 	add.w	r1, r1, #8
 801a6be:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6c2:	f7e5 ff8b 	bl	80005dc <__aeabi_dmul>
 801a6c6:	4602      	mov	r2, r0
 801a6c8:	460b      	mov	r3, r1
 801a6ca:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a6ce:	f101 0108 	add.w	r1, r1, #8
 801a6d2:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.precharge_closed = rtb_Exp;
 801a6d6:	49a6      	ldr	r1, [pc, #664]	; (801a970 <SIM0_step+0x9a0>)
 801a6d8:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801a6dc:	f103 0308 	add.w	r3, r3, #8
 801a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6e4:	e9c1 2308 	strd	r2, r3, [r1, #32]
  rtb_Product1_n = rtb_Memory22 * SIM0_DW.Delay2_DSTATE[0];
 801a6e8:	4ba0      	ldr	r3, [pc, #640]	; (801a96c <SIM0_step+0x99c>)
 801a6ea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801a6ee:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a6f2:	f101 0108 	add.w	r1, r1, #8
 801a6f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6fa:	f7e5 ff6f 	bl	80005dc <__aeabi_dmul>
 801a6fe:	4602      	mov	r2, r0
 801a700:	460b      	mov	r3, r1
 801a702:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a706:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Memory22 *= SIM0_DW.Delay3_DSTATE[0];
 801a70a:	4b98      	ldr	r3, [pc, #608]	; (801a96c <SIM0_step+0x99c>)
 801a70c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a710:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a714:	f101 0108 	add.w	r1, r1, #8
 801a718:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a71c:	f7e5 ff5e 	bl	80005dc <__aeabi_dmul>
 801a720:	4602      	mov	r2, r0
 801a722:	460b      	mov	r3, r1
 801a724:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a728:	f101 0108 	add.w	r1, r1, #8
 801a72c:	e9c1 2300 	strd	r2, r3, [r1]
  i = 1;
 801a730:	2301      	movs	r3, #1
 801a732:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a736:	f102 020c 	add.w	r2, r2, #12
 801a73a:	6013      	str	r3, [r2, #0]
  rtb_is_charge = 0;
 801a73c:	2300      	movs	r3, #0
 801a73e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a742:	f102 0204 	add.w	r2, r2, #4
 801a746:	6013      	str	r3, [r2, #0]
  rtb_is_drive = 0.0;
 801a748:	f04f 0200 	mov.w	r2, #0
 801a74c:	f04f 0300 	mov.w	r3, #0
 801a750:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a754:	f101 0118 	add.w	r1, r1, #24
 801a758:	e9c1 2300 	strd	r2, r3, [r1]
  if (SIM0_DW.Memory6_PreviousInput != 0.0) {
 801a75c:	4b83      	ldr	r3, [pc, #524]	; (801a96c <SIM0_step+0x99c>)
 801a75e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801a762:	3308      	adds	r3, #8
 801a764:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a768:	f04f 0200 	mov.w	r2, #0
 801a76c:	f04f 0300 	mov.w	r3, #0
 801a770:	f7e6 f99c 	bl	8000aac <__aeabi_dcmpeq>
 801a774:	4603      	mov	r3, r0
 801a776:	2b00      	cmp	r3, #0
 801a778:	d10c      	bne.n	801a794 <SIM0_step+0x7c4>
    i = 2;
 801a77a:	2302      	movs	r3, #2
 801a77c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a780:	f102 020c 	add.w	r2, r2, #12
 801a784:	6013      	str	r3, [r2, #0]
    rtb_is_charge = 1;
 801a786:	2301      	movs	r3, #1
 801a788:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a78c:	f102 0204 	add.w	r2, r2, #4
 801a790:	6013      	str	r3, [r2, #0]
 801a792:	e01d      	b.n	801a7d0 <SIM0_step+0x800>
  } else if (SIM0_DW.Memory7_PreviousInput != 0.0) {
 801a794:	4b75      	ldr	r3, [pc, #468]	; (801a96c <SIM0_step+0x99c>)
 801a796:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801a79a:	3310      	adds	r3, #16
 801a79c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a7a0:	f04f 0200 	mov.w	r2, #0
 801a7a4:	f04f 0300 	mov.w	r3, #0
 801a7a8:	f7e6 f980 	bl	8000aac <__aeabi_dcmpeq>
 801a7ac:	4603      	mov	r3, r0
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d10e      	bne.n	801a7d0 <SIM0_step+0x800>
    i = 3;
 801a7b2:	2303      	movs	r3, #3
 801a7b4:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a7b8:	f102 020c 	add.w	r2, r2, #12
 801a7bc:	6013      	str	r3, [r2, #0]
    rtb_is_drive = 1.0;
 801a7be:	f04f 0200 	mov.w	r2, #0
 801a7c2:	4b6c      	ldr	r3, [pc, #432]	; (801a974 <SIM0_step+0x9a4>)
 801a7c4:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a7c8:	f101 0118 	add.w	r1, r1, #24
 801a7cc:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_Product9 = rtb_Memory22 * rtb_Product1_n;
 801a7d0:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7d8:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a7dc:	f101 0108 	add.w	r1, r1, #8
 801a7e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a7e4:	f7e5 fefa 	bl	80005dc <__aeabi_dmul>
 801a7e8:	4602      	mov	r2, r0
 801a7ea:	460b      	mov	r3, r1
 801a7ec:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 801a7f0:	f101 0118 	add.w	r1, r1, #24
 801a7f4:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_is_drive = rtb_is_drive * SIM0_DW.Memory22_PreviousInput * rtb_Product9;
 801a7f8:	4b5c      	ldr	r3, [pc, #368]	; (801a96c <SIM0_step+0x99c>)
 801a7fa:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801a7fe:	3318      	adds	r3, #24
 801a800:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a804:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a808:	f103 0318 	add.w	r3, r3, #24
 801a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a810:	f7e5 fee4 	bl	80005dc <__aeabi_dmul>
 801a814:	4602      	mov	r2, r0
 801a816:	460b      	mov	r3, r1
 801a818:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 801a81c:	f101 0118 	add.w	r1, r1, #24
 801a820:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a824:	f7e5 feda 	bl	80005dc <__aeabi_dmul>
 801a828:	4602      	mov	r2, r0
 801a82a:	460b      	mov	r3, r1
 801a82c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a830:	f101 0118 	add.w	r1, r1, #24
 801a834:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_y = rtb_Memory15[0];
 801a838:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 801a83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a840:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a844:	f101 0110 	add.w	r1, r1, #16
 801a848:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 801a84c:	2300      	movs	r3, #0
 801a84e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a852:	f102 0208 	add.w	r2, r2, #8
 801a856:	6013      	str	r3, [r2, #0]
 801a858:	e026      	b.n	801a8a8 <SIM0_step+0x8d8>
    rtb_y += rtb_Memory15[iU + 1];
 801a85a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a85e:	f103 0308 	add.w	r3, r3, #8
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	3301      	adds	r3, #1
 801a866:	f607 72c8 	addw	r2, r7, #4040	; 0xfc8
 801a86a:	00db      	lsls	r3, r3, #3
 801a86c:	4413      	add	r3, r2
 801a86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a872:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a876:	f101 0110 	add.w	r1, r1, #16
 801a87a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a87e:	f7e5 fcf7 	bl	8000270 <__adddf3>
 801a882:	4602      	mov	r2, r0
 801a884:	460b      	mov	r3, r1
 801a886:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a88a:	f101 0110 	add.w	r1, r1, #16
 801a88e:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 801a892:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a896:	f103 0308 	add.w	r3, r3, #8
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	3301      	adds	r3, #1
 801a89e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a8a2:	f102 0208 	add.w	r2, r2, #8
 801a8a6:	6013      	str	r3, [r2, #0]
 801a8a8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a8ac:	f103 0308 	add.w	r3, r3, #8
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	2b7c      	cmp	r3, #124	; 0x7c
 801a8b4:	ddd1      	ble.n	801a85a <SIM0_step+0x88a>
  }

  if (SIM0_DW.Memory16_PreviousInput != 0.0) {
 801a8b6:	4b2d      	ldr	r3, [pc, #180]	; (801a96c <SIM0_step+0x99c>)
 801a8b8:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801a8bc:	3308      	adds	r3, #8
 801a8be:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a8c2:	f04f 0200 	mov.w	r2, #0
 801a8c6:	f04f 0300 	mov.w	r3, #0
 801a8ca:	f7e6 f8ef 	bl	8000aac <__aeabi_dcmpeq>
 801a8ce:	4603      	mov	r3, r0
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d151      	bne.n	801a978 <SIM0_step+0x9a8>
    rtb_Current = SIM0_DW.Memory17_PreviousInput - rtb_y;
 801a8d4:	4b25      	ldr	r3, [pc, #148]	; (801a96c <SIM0_step+0x99c>)
 801a8d6:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801a8da:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a8de:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a8e2:	f103 0310 	add.w	r3, r3, #16
 801a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8ea:	f7e5 fcbf 	bl	800026c <__aeabi_dsub>
 801a8ee:	4602      	mov	r2, r0
 801a8f0:	460b      	mov	r3, r1
 801a8f2:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a8f6:	f101 0110 	add.w	r1, r1, #16
 801a8fa:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Current < 0.0) {
 801a8fe:	f04f 0200 	mov.w	r2, #0
 801a902:	f04f 0300 	mov.w	r3, #0
 801a906:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a90a:	f101 0110 	add.w	r1, r1, #16
 801a90e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a912:	f7e6 f8d5 	bl	8000ac0 <__aeabi_dcmplt>
 801a916:	4603      	mov	r3, r0
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d009      	beq.n	801a930 <SIM0_step+0x960>
      rtb_Current = 0.0;
 801a91c:	f04f 0200 	mov.w	r2, #0
 801a920:	f04f 0300 	mov.w	r3, #0
 801a924:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a928:	f101 0110 	add.w	r1, r1, #16
 801a92c:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if (SIM0_DW.Memory18_PreviousInput < rtb_Current) {
 801a930:	4b0e      	ldr	r3, [pc, #56]	; (801a96c <SIM0_step+0x99c>)
 801a932:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801a936:	3310      	adds	r3, #16
 801a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a93c:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a940:	f101 0110 	add.w	r1, r1, #16
 801a944:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a948:	f7e6 f8d8 	bl	8000afc <__aeabi_dcmpgt>
 801a94c:	4603      	mov	r3, r0
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d01c      	beq.n	801a98c <SIM0_step+0x9bc>
      rtb_Current = SIM0_DW.Memory18_PreviousInput;
 801a952:	4b06      	ldr	r3, [pc, #24]	; (801a96c <SIM0_step+0x99c>)
 801a954:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801a958:	3310      	adds	r3, #16
 801a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a95e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a962:	f101 0110 	add.w	r1, r1, #16
 801a966:	e9c1 2300 	strd	r2, r3, [r1]
 801a96a:	e00f      	b.n	801a98c <SIM0_step+0x9bc>
 801a96c:	2001c3a0 	.word	0x2001c3a0
 801a970:	2001dc00 	.word	0x2001dc00
 801a974:	3ff00000 	.word	0x3ff00000
    }
  } else {
    rtb_Current = 0.0;
 801a978:	f04f 0200 	mov.w	r2, #0
 801a97c:	f04f 0300 	mov.w	r3, #0
 801a980:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a984:	f101 0110 	add.w	r1, r1, #16
 801a988:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_current = 0.0;
 801a98c:	f04f 0200 	mov.w	r2, #0
 801a990:	f04f 0300 	mov.w	r3, #0
 801a994:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a998:	e9c1 2300 	strd	r2, r3, [r1]
  if (i == 1) {
 801a99c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a9a0:	f103 030c 	add.w	r3, r3, #12
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	2b01      	cmp	r3, #1
 801a9a8:	d109      	bne.n	801a9be <SIM0_step+0x9ee>
    rtb_Exp = -1.0;
 801a9aa:	f04f 0200 	mov.w	r2, #0
 801a9ae:	4bc0      	ldr	r3, [pc, #768]	; (801acb0 <SIM0_step+0xce0>)
 801a9b0:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a9b4:	f101 0108 	add.w	r1, r1, #8
 801a9b8:	e9c1 2300 	strd	r2, r3, [r1]
 801a9bc:	e1d3      	b.n	801ad66 <SIM0_step+0xd96>
  } else if (i == 2) {
 801a9be:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a9c2:	f103 030c 	add.w	r3, r3, #12
 801a9c6:	681b      	ldr	r3, [r3, #0]
 801a9c8:	2b02      	cmp	r3, #2
 801a9ca:	f040 8099 	bne.w	801ab00 <SIM0_step+0xb30>
    if (rtb_Memory22 != 0.0) {
 801a9ce:	f04f 0200 	mov.w	r2, #0
 801a9d2:	f04f 0300 	mov.w	r3, #0
 801a9d6:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a9da:	f101 0108 	add.w	r1, r1, #8
 801a9de:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a9e2:	f7e6 f863 	bl	8000aac <__aeabi_dcmpeq>
 801a9e6:	4603      	mov	r3, r0
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d17f      	bne.n	801aaec <SIM0_step+0xb1c>
      if ((rtb_Product1_n != 0.0) || (rtb_Exp != 0.0)) {
 801a9ec:	f04f 0200 	mov.w	r2, #0
 801a9f0:	f04f 0300 	mov.w	r3, #0
 801a9f4:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a9f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a9fc:	f7e6 f856 	bl	8000aac <__aeabi_dcmpeq>
 801aa00:	4603      	mov	r3, r0
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d00e      	beq.n	801aa24 <SIM0_step+0xa54>
 801aa06:	f04f 0200 	mov.w	r2, #0
 801aa0a:	f04f 0300 	mov.w	r3, #0
 801aa0e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801aa12:	f101 0108 	add.w	r1, r1, #8
 801aa16:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa1a:	f7e6 f847 	bl	8000aac <__aeabi_dcmpeq>
 801aa1e:	4603      	mov	r3, r0
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d141      	bne.n	801aaa8 <SIM0_step+0xad8>
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 801aa24:	4ba3      	ldr	r3, [pc, #652]	; (801acb4 <SIM0_step+0xce4>)
 801aa26:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801aa2a:	3318      	adds	r3, #24
 801aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa30:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801aa34:	f101 0110 	add.w	r1, r1, #16
 801aa38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa3c:	f7e5 fc16 	bl	800026c <__aeabi_dsub>
 801aa40:	4602      	mov	r2, r0
 801aa42:	460b      	mov	r3, r1
 801aa44:	4610      	mov	r0, r2
 801aa46:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 801aa48:	4b9a      	ldr	r3, [pc, #616]	; (801acb4 <SIM0_step+0xce4>)
 801aa4a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801aa4e:	3318      	adds	r3, #24
 801aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 801aa54:	f7e5 fc0c 	bl	8000270 <__adddf3>
 801aa58:	4602      	mov	r2, r0
 801aa5a:	460b      	mov	r3, r1
 801aa5c:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801aa60:	f101 0108 	add.w	r1, r1, #8
 801aa64:	e9c1 2300 	strd	r2, r3, [r1]
        rtb_current = (real_T)rtb_is_charge * rtb_Current * rtb_Product9;
 801aa68:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801aa6c:	f103 0304 	add.w	r3, r3, #4
 801aa70:	6818      	ldr	r0, [r3, #0]
 801aa72:	f7e5 fd49 	bl	8000508 <__aeabi_i2d>
 801aa76:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801aa7a:	f103 0310 	add.w	r3, r3, #16
 801aa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa82:	f7e5 fdab 	bl	80005dc <__aeabi_dmul>
 801aa86:	4602      	mov	r2, r0
 801aa88:	460b      	mov	r3, r1
 801aa8a:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 801aa8e:	f101 0118 	add.w	r1, r1, #24
 801aa92:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa96:	f7e5 fda1 	bl	80005dc <__aeabi_dmul>
 801aa9a:	4602      	mov	r2, r0
 801aa9c:	460b      	mov	r3, r1
 801aa9e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801aaa2:	e9c1 2300 	strd	r2, r3, [r1]
 801aaa6:	e15e      	b.n	801ad66 <SIM0_step+0xd96>
      } else {
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 801aaa8:	4b82      	ldr	r3, [pc, #520]	; (801acb4 <SIM0_step+0xce4>)
 801aaaa:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801aaae:	e9d3 0100 	ldrd	r0, r1, [r3]
                   SIM0_DW.Memory_PreviousInput_a) +
 801aab2:	4b80      	ldr	r3, [pc, #512]	; (801acb4 <SIM0_step+0xce4>)
 801aab4:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801aab8:	3318      	adds	r3, #24
 801aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 801aabe:	f7e5 fbd5 	bl	800026c <__aeabi_dsub>
 801aac2:	4602      	mov	r2, r0
 801aac4:	460b      	mov	r3, r1
 801aac6:	4610      	mov	r0, r2
 801aac8:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 801aaca:	4b7a      	ldr	r3, [pc, #488]	; (801acb4 <SIM0_step+0xce4>)
 801aacc:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801aad0:	3318      	adds	r3, #24
 801aad2:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 801aad6:	f7e5 fbcb 	bl	8000270 <__adddf3>
 801aada:	4602      	mov	r2, r0
 801aadc:	460b      	mov	r3, r1
 801aade:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801aae2:	f101 0108 	add.w	r1, r1, #8
 801aae6:	e9c1 2300 	strd	r2, r3, [r1]
 801aaea:	e13c      	b.n	801ad66 <SIM0_step+0xd96>
      }
    } else {
      rtb_Exp = -1.0;
 801aaec:	f04f 0200 	mov.w	r2, #0
 801aaf0:	4b6f      	ldr	r3, [pc, #444]	; (801acb0 <SIM0_step+0xce0>)
 801aaf2:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801aaf6:	f101 0108 	add.w	r1, r1, #8
 801aafa:	e9c1 2300 	strd	r2, r3, [r1]
 801aafe:	e132      	b.n	801ad66 <SIM0_step+0xd96>
    }
  } else if (rtb_Memory22 != 0.0) {
 801ab00:	f04f 0200 	mov.w	r2, #0
 801ab04:	f04f 0300 	mov.w	r3, #0
 801ab08:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801ab0c:	f101 0108 	add.w	r1, r1, #8
 801ab10:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab14:	f7e5 ffca 	bl	8000aac <__aeabi_dcmpeq>
 801ab18:	4603      	mov	r3, r0
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	f040 811a 	bne.w	801ad54 <SIM0_step+0xd84>
    if (rtb_Product1_n != 0.0) {
 801ab20:	f04f 0200 	mov.w	r2, #0
 801ab24:	f04f 0300 	mov.w	r3, #0
 801ab28:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801ab2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab30:	f7e5 ffbc 	bl	8000aac <__aeabi_dcmpeq>
 801ab34:	4603      	mov	r3, r0
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d152      	bne.n	801abe0 <SIM0_step+0xc10>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 801ab3a:	4b5e      	ldr	r3, [pc, #376]	; (801acb4 <SIM0_step+0xce4>)
 801ab3c:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801ab40:	3318      	adds	r3, #24
 801ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab46:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801ab4a:	f101 0110 	add.w	r1, r1, #16
 801ab4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab52:	f7e5 fb8b 	bl	800026c <__aeabi_dsub>
 801ab56:	4602      	mov	r2, r0
 801ab58:	460b      	mov	r3, r1
 801ab5a:	4610      	mov	r0, r2
 801ab5c:	4619      	mov	r1, r3
 801ab5e:	a352      	add	r3, pc, #328	; (adr r3, 801aca8 <SIM0_step+0xcd8>)
 801ab60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab64:	f7e5 fd3a 	bl	80005dc <__aeabi_dmul>
 801ab68:	4602      	mov	r2, r0
 801ab6a:	460b      	mov	r3, r1
 801ab6c:	4610      	mov	r0, r2
 801ab6e:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 801ab70:	4b50      	ldr	r3, [pc, #320]	; (801acb4 <SIM0_step+0xce4>)
 801ab72:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801ab76:	3318      	adds	r3, #24
 801ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 801ab7c:	f7e5 fb78 	bl	8000270 <__adddf3>
 801ab80:	4602      	mov	r2, r0
 801ab82:	460b      	mov	r3, r1
 801ab84:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ab88:	f101 0108 	add.w	r1, r1, #8
 801ab8c:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 0.5;
 801ab90:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801ab94:	f103 0308 	add.w	r3, r3, #8
 801ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab9c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801aba0:	f101 0110 	add.w	r1, r1, #16
 801aba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aba8:	f7e5 fb60 	bl	800026c <__aeabi_dsub>
 801abac:	4602      	mov	r2, r0
 801abae:	460b      	mov	r3, r1
 801abb0:	4610      	mov	r0, r2
 801abb2:	4619      	mov	r1, r3
 801abb4:	f04f 0200 	mov.w	r2, #0
 801abb8:	4b3f      	ldr	r3, [pc, #252]	; (801acb8 <SIM0_step+0xce8>)
 801abba:	f7e5 fe39 	bl	8000830 <__aeabi_ddiv>
 801abbe:	4602      	mov	r2, r0
 801abc0:	460b      	mov	r3, r1
 801abc2:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801abc6:	f101 0118 	add.w	r1, r1, #24
 801abca:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abce:	f7e5 fb4d 	bl	800026c <__aeabi_dsub>
 801abd2:	4602      	mov	r2, r0
 801abd4:	460b      	mov	r3, r1
 801abd6:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801abda:	e9c1 2300 	strd	r2, r3, [r1]
 801abde:	e0c2      	b.n	801ad66 <SIM0_step+0xd96>
    } else if (rtb_Exp != 0.0) {
 801abe0:	f04f 0200 	mov.w	r2, #0
 801abe4:	f04f 0300 	mov.w	r3, #0
 801abe8:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801abec:	f101 0108 	add.w	r1, r1, #8
 801abf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abf4:	f7e5 ff5a 	bl	8000aac <__aeabi_dcmpeq>
 801abf8:	4603      	mov	r3, r0
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d162      	bne.n	801acc4 <SIM0_step+0xcf4>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 801abfe:	4b2d      	ldr	r3, [pc, #180]	; (801acb4 <SIM0_step+0xce4>)
 801ac00:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801ac04:	3318      	adds	r3, #24
 801ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac0a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801ac0e:	f101 0110 	add.w	r1, r1, #16
 801ac12:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac16:	f7e5 fb29 	bl	800026c <__aeabi_dsub>
 801ac1a:	4602      	mov	r2, r0
 801ac1c:	460b      	mov	r3, r1
 801ac1e:	4610      	mov	r0, r2
 801ac20:	4619      	mov	r1, r3
 801ac22:	f04f 0200 	mov.w	r2, #0
 801ac26:	4b25      	ldr	r3, [pc, #148]	; (801acbc <SIM0_step+0xcec>)
 801ac28:	f7e5 fe02 	bl	8000830 <__aeabi_ddiv>
 801ac2c:	4602      	mov	r2, r0
 801ac2e:	460b      	mov	r3, r1
 801ac30:	4610      	mov	r0, r2
 801ac32:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 801ac34:	4b1f      	ldr	r3, [pc, #124]	; (801acb4 <SIM0_step+0xce4>)
 801ac36:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801ac3a:	3318      	adds	r3, #24
 801ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 801ac40:	f7e5 fb16 	bl	8000270 <__adddf3>
 801ac44:	4602      	mov	r2, r0
 801ac46:	460b      	mov	r3, r1
 801ac48:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ac4c:	f101 0108 	add.w	r1, r1, #8
 801ac50:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 100.0;
 801ac54:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801ac58:	f103 0308 	add.w	r3, r3, #8
 801ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac60:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801ac64:	f101 0110 	add.w	r1, r1, #16
 801ac68:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac6c:	f7e5 fafe 	bl	800026c <__aeabi_dsub>
 801ac70:	4602      	mov	r2, r0
 801ac72:	460b      	mov	r3, r1
 801ac74:	4610      	mov	r0, r2
 801ac76:	4619      	mov	r1, r3
 801ac78:	f04f 0200 	mov.w	r2, #0
 801ac7c:	4b10      	ldr	r3, [pc, #64]	; (801acc0 <SIM0_step+0xcf0>)
 801ac7e:	f7e5 fdd7 	bl	8000830 <__aeabi_ddiv>
 801ac82:	4602      	mov	r2, r0
 801ac84:	460b      	mov	r3, r1
 801ac86:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801ac8a:	f101 0118 	add.w	r1, r1, #24
 801ac8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac92:	f7e5 faeb 	bl	800026c <__aeabi_dsub>
 801ac96:	4602      	mov	r2, r0
 801ac98:	460b      	mov	r3, r1
 801ac9a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ac9e:	e9c1 2300 	strd	r2, r3, [r1]
 801aca2:	e060      	b.n	801ad66 <SIM0_step+0xd96>
 801aca4:	f3af 8000 	nop.w
 801aca8:	9999999a 	.word	0x9999999a
 801acac:	3fe99999 	.word	0x3fe99999
 801acb0:	bff00000 	.word	0xbff00000
 801acb4:	2001c3a0 	.word	0x2001c3a0
 801acb8:	3fe00000 	.word	0x3fe00000
 801acbc:	40490000 	.word	0x40490000
 801acc0:	40590000 	.word	0x40590000
    } else {
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 801acc4:	4bad      	ldr	r3, [pc, #692]	; (801af7c <SIM0_step+0xfac>)
 801acc6:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801acca:	3318      	adds	r3, #24
 801accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acd0:	f04f 0000 	mov.w	r0, #0
 801acd4:	f04f 0100 	mov.w	r1, #0
 801acd8:	f7e5 fac8 	bl	800026c <__aeabi_dsub>
 801acdc:	4602      	mov	r2, r0
 801acde:	460b      	mov	r3, r1
 801ace0:	4610      	mov	r0, r2
 801ace2:	4619      	mov	r1, r3
 801ace4:	f04f 0200 	mov.w	r2, #0
 801ace8:	4ba5      	ldr	r3, [pc, #660]	; (801af80 <SIM0_step+0xfb0>)
 801acea:	f7e5 fda1 	bl	8000830 <__aeabi_ddiv>
 801acee:	4602      	mov	r2, r0
 801acf0:	460b      	mov	r3, r1
 801acf2:	4610      	mov	r0, r2
 801acf4:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 801acf6:	4ba1      	ldr	r3, [pc, #644]	; (801af7c <SIM0_step+0xfac>)
 801acf8:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801acfc:	3318      	adds	r3, #24
 801acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 801ad02:	f7e5 fab5 	bl	8000270 <__adddf3>
 801ad06:	4602      	mov	r2, r0
 801ad08:	460b      	mov	r3, r1
 801ad0a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ad0e:	f101 0108 	add.w	r1, r1, #8
 801ad12:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = -(0.0 - rtb_Exp) / 10.0;
 801ad16:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801ad1a:	f103 0308 	add.w	r3, r3, #8
 801ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad22:	f04f 0000 	mov.w	r0, #0
 801ad26:	f04f 0100 	mov.w	r1, #0
 801ad2a:	f7e5 fa9f 	bl	800026c <__aeabi_dsub>
 801ad2e:	4602      	mov	r2, r0
 801ad30:	460b      	mov	r3, r1
 801ad32:	4690      	mov	r8, r2
 801ad34:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 801ad38:	f04f 0200 	mov.w	r2, #0
 801ad3c:	4b91      	ldr	r3, [pc, #580]	; (801af84 <SIM0_step+0xfb4>)
 801ad3e:	4640      	mov	r0, r8
 801ad40:	4649      	mov	r1, r9
 801ad42:	f7e5 fd75 	bl	8000830 <__aeabi_ddiv>
 801ad46:	4602      	mov	r2, r0
 801ad48:	460b      	mov	r3, r1
 801ad4a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ad4e:	e9c1 2300 	strd	r2, r3, [r1]
 801ad52:	e008      	b.n	801ad66 <SIM0_step+0xd96>
    }
  } else {
    rtb_Exp = -1.0;
 801ad54:	f04f 0200 	mov.w	r2, #0
 801ad58:	4b8b      	ldr	r3, [pc, #556]	; (801af88 <SIM0_step+0xfb8>)
 801ad5a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ad5e:	f101 0108 	add.w	r1, r1, #8
 801ad62:	e9c1 2300 	strd	r2, r3, [r1]
  }

  SIM0_Y.vehicle_voltage = rtb_Exp;
 801ad66:	4989      	ldr	r1, [pc, #548]	; (801af8c <SIM0_step+0xfbc>)
 801ad68:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801ad6c:	f103 0308 	add.w	r3, r3, #8
 801ad70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad74:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  SIM0_Y.current = rtb_current;
 801ad78:	4984      	ldr	r1, [pc, #528]	; (801af8c <SIM0_step+0xfbc>)
 801ad7a:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad82:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  SIM0_Y.accumulator_voltage = rtb_y;
 801ad86:	4981      	ldr	r1, [pc, #516]	; (801af8c <SIM0_step+0xfbc>)
 801ad88:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801ad8c:	f103 0310 	add.w	r3, r3, #16
 801ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad94:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  SIM0_Y.AIR_minus_closed = rtb_Memory22;
 801ad98:	497c      	ldr	r1, [pc, #496]	; (801af8c <SIM0_step+0xfbc>)
 801ad9a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801ad9e:	f103 0308 	add.w	r3, r3, #8
 801ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ada6:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_Y.AIR_plus_closed = rtb_Product1_n;
 801adaa:	4978      	ldr	r1, [pc, #480]	; (801af8c <SIM0_step+0xfbc>)
 801adac:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801adb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adb4:	e9c1 2306 	strd	r2, r3, [r1, #24]
  memcpy(&SIM0_Y.cell_temperatures[0], &SIM0_P.cTmp[0], 60U * sizeof(real_T));
 801adb8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801adbc:	4974      	ldr	r1, [pc, #464]	; (801af90 <SIM0_step+0xfc0>)
 801adbe:	4875      	ldr	r0, [pc, #468]	; (801af94 <SIM0_step+0xfc4>)
 801adc0:	f013 fc80 	bl	802e6c4 <memcpy>
  SIM0_Y.IMD_ok = SIM0_P.IMD_ok;
 801adc4:	4b74      	ldr	r3, [pc, #464]	; (801af98 <SIM0_step+0xfc8>)
 801adc6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801adca:	4970      	ldr	r1, [pc, #448]	; (801af8c <SIM0_step+0xfbc>)
 801adcc:	f501 615f 	add.w	r1, r1, #3568	; 0xdf0
 801add0:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory20_PreviousInput = rtb_current;
 801add4:	4b69      	ldr	r3, [pc, #420]	; (801af7c <SIM0_step+0xfac>)
 801add6:	f603 0108 	addw	r1, r3, #2056	; 0x808
 801adda:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801adde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ade2:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory11_PreviousInput = rtb_Memory20;
 801ade6:	4b65      	ldr	r3, [pc, #404]	; (801af7c <SIM0_step+0xfac>)
 801ade8:	f503 6101 	add.w	r1, r3, #2064	; 0x810
 801adec:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801adf0:	f103 0318 	add.w	r3, r3, #24
 801adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adf8:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
    SIM0_DW.Memory9_PreviousInput);
 801adfc:	4b5f      	ldr	r3, [pc, #380]	; (801af7c <SIM0_step+0xfac>)
 801adfe:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 801ae02:	e9d3 0100 	ldrd	r0, r1, [r3]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
 801ae06:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801ae0a:	f103 0318 	add.w	r3, r3, #24
 801ae0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae12:	f7e5 fa2d 	bl	8000270 <__adddf3>
 801ae16:	4602      	mov	r2, r0
 801ae18:	460b      	mov	r3, r1
 801ae1a:	4614      	mov	r4, r2
 801ae1c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801ae20:	4b56      	ldr	r3, [pc, #344]	; (801af7c <SIM0_step+0xfac>)
 801ae22:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 801ae26:	e9c3 4500 	strd	r4, r5, [r3]
  for (i = 0; i < 126; i++) {
 801ae2a:	2300      	movs	r3, #0
 801ae2c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801ae30:	f102 020c 	add.w	r2, r2, #12
 801ae34:	6013      	str	r3, [r2, #0]
 801ae36:	e109      	b.n	801b04c <SIM0_step+0x107c>
    rtb_Memory22 = rtb_Memory21[i];
 801ae38:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 801ae3c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801ae40:	f103 030c 	add.w	r3, r3, #12
 801ae44:	681b      	ldr	r3, [r3, #0]
 801ae46:	00db      	lsls	r3, r3, #3
 801ae48:	4413      	add	r3, r2
 801ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae4e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801ae52:	f101 0108 	add.w	r1, r1, #8
 801ae56:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory20 = rtb_Rpz[i];
 801ae5a:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 801ae5e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801ae62:	f103 030c 	add.w	r3, r3, #12
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	00db      	lsls	r3, r3, #3
 801ae6a:	4413      	add	r3, r2
 801ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae70:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801ae74:	f101 0118 	add.w	r1, r1, #24
 801ae78:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Memory19[i];
 801ae7c:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 801ae80:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801ae84:	f103 030c 	add.w	r3, r3, #12
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	00db      	lsls	r3, r3, #3
 801ae8c:	4413      	add	r3, r2
 801ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae92:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801ae96:	f101 0118 	add.w	r1, r1, #24
 801ae9a:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory15_PreviousInput[i] = rtb_is_drive;
 801ae9e:	4a37      	ldr	r2, [pc, #220]	; (801af7c <SIM0_step+0xfac>)
 801aea0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801aea4:	f103 030c 	add.w	r3, r3, #12
 801aea8:	681b      	ldr	r3, [r3, #0]
 801aeaa:	3305      	adds	r3, #5
 801aeac:	00db      	lsls	r3, r3, #3
 801aeae:	18d1      	adds	r1, r2, r3
 801aeb0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801aeb4:	f103 0318 	add.w	r3, r3, #24
 801aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aebc:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory12_PreviousInput[i] = rtb_Rsz[i];
 801aec0:	f107 0318 	add.w	r3, r7, #24
 801aec4:	3b10      	subs	r3, #16
 801aec6:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801aeca:	f102 020c 	add.w	r2, r2, #12
 801aece:	6812      	ldr	r2, [r2, #0]
 801aed0:	00d2      	lsls	r2, r2, #3
 801aed2:	4413      	add	r3, r2
 801aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aed8:	4828      	ldr	r0, [pc, #160]	; (801af7c <SIM0_step+0xfac>)
 801aeda:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801aede:	f101 010c 	add.w	r1, r1, #12
 801aee2:	6809      	ldr	r1, [r1, #0]
 801aee4:	3183      	adds	r1, #131	; 0x83
 801aee6:	00c9      	lsls	r1, r1, #3
 801aee8:	4401      	add	r1, r0
 801aeea:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Memory20 > rtb_Memory22) {
 801aeee:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801aef2:	f103 0308 	add.w	r3, r3, #8
 801aef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aefa:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801aefe:	f101 0118 	add.w	r1, r1, #24
 801af02:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af06:	f7e5 fdf9 	bl	8000afc <__aeabi_dcmpgt>
 801af0a:	4603      	mov	r3, r0
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d012      	beq.n	801af36 <SIM0_step+0xf66>
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory22;
 801af10:	4a1a      	ldr	r2, [pc, #104]	; (801af7c <SIM0_step+0xfac>)
 801af12:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801af16:	f103 030c 	add.w	r3, r3, #12
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	f203 1303 	addw	r3, r3, #259	; 0x103
 801af20:	00db      	lsls	r3, r3, #3
 801af22:	18d1      	adds	r1, r2, r3
 801af24:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801af28:	f103 0308 	add.w	r3, r3, #8
 801af2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af30:	e9c1 2300 	strd	r2, r3, [r1]
 801af34:	e044      	b.n	801afc0 <SIM0_step+0xff0>
    } else if (rtb_Memory20 < SIM0_P.Constant1_Value) {
 801af36:	4b18      	ldr	r3, [pc, #96]	; (801af98 <SIM0_step+0xfc8>)
 801af38:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801af3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af40:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801af44:	f101 0118 	add.w	r1, r1, #24
 801af48:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af4c:	f7e5 fdb8 	bl	8000ac0 <__aeabi_dcmplt>
 801af50:	4603      	mov	r3, r0
 801af52:	2b00      	cmp	r3, #0
 801af54:	d022      	beq.n	801af9c <SIM0_step+0xfcc>
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.Constant1_Value;
 801af56:	4b10      	ldr	r3, [pc, #64]	; (801af98 <SIM0_step+0xfc8>)
 801af58:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801af5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af60:	4806      	ldr	r0, [pc, #24]	; (801af7c <SIM0_step+0xfac>)
 801af62:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801af66:	f101 010c 	add.w	r1, r1, #12
 801af6a:	6809      	ldr	r1, [r1, #0]
 801af6c:	f201 1103 	addw	r1, r1, #259	; 0x103
 801af70:	00c9      	lsls	r1, r1, #3
 801af72:	4401      	add	r1, r0
 801af74:	e9c1 2300 	strd	r2, r3, [r1]
 801af78:	e022      	b.n	801afc0 <SIM0_step+0xff0>
 801af7a:	bf00      	nop
 801af7c:	2001c3a0 	.word	0x2001c3a0
 801af80:	40140000 	.word	0x40140000
 801af84:	40240000 	.word	0x40240000
 801af88:	bff00000 	.word	0xbff00000
 801af8c:	2001dc00 	.word	0x2001dc00
 801af90:	20000c38 	.word	0x20000c38
 801af94:	2001e810 	.word	0x2001e810
 801af98:	20000360 	.word	0x20000360
    } else {
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory20;
 801af9c:	4a94      	ldr	r2, [pc, #592]	; (801b1f0 <SIM0_step+0x1220>)
 801af9e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801afa2:	f103 030c 	add.w	r3, r3, #12
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	f203 1303 	addw	r3, r3, #259	; 0x103
 801afac:	00db      	lsls	r3, r3, #3
 801afae:	18d1      	adds	r1, r2, r3
 801afb0:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801afb4:	f103 0318 	add.w	r3, r3, #24
 801afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afbc:	e9c1 2300 	strd	r2, r3, [r1]
    }

    SIM0_DW.Memory10_PreviousInput[i] = rtb_Memory22;
 801afc0:	4a8b      	ldr	r2, [pc, #556]	; (801b1f0 <SIM0_step+0x1220>)
 801afc2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801afc6:	f103 030c 	add.w	r3, r3, #12
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	f203 1381 	addw	r3, r3, #385	; 0x181
 801afd0:	00db      	lsls	r3, r3, #3
 801afd2:	18d1      	adds	r1, r2, r3
 801afd4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801afd8:	f103 0308 	add.w	r3, r3, #8
 801afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afe0:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory19_PreviousInput[i] = SIM0_U.BalanceOut[i];
 801afe4:	4a83      	ldr	r2, [pc, #524]	; (801b1f4 <SIM0_step+0x1224>)
 801afe6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801afea:	f103 030c 	add.w	r3, r3, #12
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	330d      	adds	r3, #13
 801aff2:	00db      	lsls	r3, r3, #3
 801aff4:	4413      	add	r3, r2
 801aff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801affa:	487d      	ldr	r0, [pc, #500]	; (801b1f0 <SIM0_step+0x1220>)
 801affc:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801b000:	f101 010c 	add.w	r1, r1, #12
 801b004:	6809      	ldr	r1, [r1, #0]
 801b006:	f501 7100 	add.w	r1, r1, #512	; 0x200
 801b00a:	00c9      	lsls	r1, r1, #3
 801b00c:	4401      	add	r1, r0
 801b00e:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory21_PreviousInput[i] = rtb_is_drive;
 801b012:	4a77      	ldr	r2, [pc, #476]	; (801b1f0 <SIM0_step+0x1220>)
 801b014:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b018:	f103 030c 	add.w	r3, r3, #12
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801b022:	00db      	lsls	r3, r3, #3
 801b024:	18d1      	adds	r1, r2, r3
 801b026:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b02a:	f103 0318 	add.w	r3, r3, #24
 801b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b032:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 801b036:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b03a:	f103 030c 	add.w	r3, r3, #12
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	3301      	adds	r3, #1
 801b042:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801b046:	f102 020c 	add.w	r2, r2, #12
 801b04a:	6013      	str	r3, [r2, #0]
 801b04c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b050:	f103 030c 	add.w	r3, r3, #12
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	2b7d      	cmp	r3, #125	; 0x7d
 801b058:	f77f aeee 	ble.w	801ae38 <SIM0_step+0xe68>
  }

  SIM0_DW.Memory1_PreviousInput = SIM0_U.AMS_error;
 801b05c:	4b65      	ldr	r3, [pc, #404]	; (801b1f4 <SIM0_step+0x1224>)
 801b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b062:	4963      	ldr	r1, [pc, #396]	; (801b1f0 <SIM0_step+0x1220>)
 801b064:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 801b068:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory2_PreviousInput = SIM0_U.AMS_error_reset;
 801b06c:	4b61      	ldr	r3, [pc, #388]	; (801b1f4 <SIM0_step+0x1224>)
 801b06e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801b072:	4b5f      	ldr	r3, [pc, #380]	; (801b1f0 <SIM0_step+0x1220>)
 801b074:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b078:	3308      	adds	r3, #8
 801b07a:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_m = rtb_Logic_idx_0;
 801b07e:	4b5c      	ldr	r3, [pc, #368]	; (801b1f0 <SIM0_step+0x1220>)
 801b080:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b084:	3318      	adds	r3, #24
 801b086:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 801b08a:	f102 0217 	add.w	r2, r2, #23
 801b08e:	7812      	ldrb	r2, [r2, #0]
 801b090:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory3_PreviousInput = SIM0_U.IMD_error;
 801b092:	4b58      	ldr	r3, [pc, #352]	; (801b1f4 <SIM0_step+0x1224>)
 801b094:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801b098:	4b55      	ldr	r3, [pc, #340]	; (801b1f0 <SIM0_step+0x1220>)
 801b09a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b09e:	3310      	adds	r3, #16
 801b0a0:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory4_PreviousInput = SIM0_U.IMD_error_reset;
 801b0a4:	4b53      	ldr	r3, [pc, #332]	; (801b1f4 <SIM0_step+0x1224>)
 801b0a6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801b0aa:	4b51      	ldr	r3, [pc, #324]	; (801b1f0 <SIM0_step+0x1220>)
 801b0ac:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b0b0:	3318      	adds	r3, #24
 801b0b2:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_c = rtb_Logic_p_idx_0;
 801b0b6:	4b4e      	ldr	r3, [pc, #312]	; (801b1f0 <SIM0_step+0x1220>)
 801b0b8:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b0bc:	3319      	adds	r3, #25
 801b0be:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 801b0c2:	f102 0215 	add.w	r2, r2, #21
 801b0c6:	7812      	ldrb	r2, [r2, #0]
 801b0c8:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory5_PreviousInput = SIM0_U.SC;
 801b0ca:	4b4a      	ldr	r3, [pc, #296]	; (801b1f4 <SIM0_step+0x1224>)
 801b0cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b0d0:	4947      	ldr	r1, [pc, #284]	; (801b1f0 <SIM0_step+0x1220>)
 801b0d2:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 801b0d6:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay1_DSTATE = SIM0_DW.Memory14_PreviousInput;
 801b0da:	4b45      	ldr	r3, [pc, #276]	; (801b1f0 <SIM0_step+0x1220>)
 801b0dc:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b0e0:	3308      	adds	r3, #8
 801b0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0e6:	4942      	ldr	r1, [pc, #264]	; (801b1f0 <SIM0_step+0x1220>)
 801b0e8:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay3_DSTATE[0] = SIM0_DW.Delay3_DSTATE[1];
 801b0ec:	4b40      	ldr	r3, [pc, #256]	; (801b1f0 <SIM0_step+0x1220>)
 801b0ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801b0f2:	493f      	ldr	r1, [pc, #252]	; (801b1f0 <SIM0_step+0x1220>)
 801b0f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
  SIM0_DW.Delay3_DSTATE[1] = SIM0_DW.Memory8_PreviousInput;
 801b0f8:	4b3d      	ldr	r3, [pc, #244]	; (801b1f0 <SIM0_step+0x1220>)
 801b0fa:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b0fe:	3310      	adds	r3, #16
 801b100:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b104:	493a      	ldr	r1, [pc, #232]	; (801b1f0 <SIM0_step+0x1220>)
 801b106:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_DW.Delay2_DSTATE[0] = SIM0_DW.Delay2_DSTATE[1];
 801b10a:	4b39      	ldr	r3, [pc, #228]	; (801b1f0 <SIM0_step+0x1220>)
 801b10c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b110:	4937      	ldr	r1, [pc, #220]	; (801b1f0 <SIM0_step+0x1220>)
 801b112:	e9c1 2306 	strd	r2, r3, [r1, #24]
  SIM0_DW.Delay2_DSTATE[1] = SIM0_DW.Memory13_PreviousInput;
 801b116:	4b36      	ldr	r3, [pc, #216]	; (801b1f0 <SIM0_step+0x1220>)
 801b118:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b120:	4933      	ldr	r1, [pc, #204]	; (801b1f0 <SIM0_step+0x1220>)
 801b122:	e9c1 2308 	strd	r2, r3, [r1, #32]
  SIM0_DW.Memory6_PreviousInput = SIM0_U.charge;
 801b126:	4b33      	ldr	r3, [pc, #204]	; (801b1f4 <SIM0_step+0x1224>)
 801b128:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 801b12c:	4b30      	ldr	r3, [pc, #192]	; (801b1f0 <SIM0_step+0x1220>)
 801b12e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b132:	3308      	adds	r3, #8
 801b134:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory7_PreviousInput = SIM0_U.drive;
 801b138:	4b2e      	ldr	r3, [pc, #184]	; (801b1f4 <SIM0_step+0x1224>)
 801b13a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 801b13e:	4b2c      	ldr	r3, [pc, #176]	; (801b1f0 <SIM0_step+0x1220>)
 801b140:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b144:	3310      	adds	r3, #16
 801b146:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory22_PreviousInput = SIM0_U.drive_current;
 801b14a:	4b2a      	ldr	r3, [pc, #168]	; (801b1f4 <SIM0_step+0x1224>)
 801b14c:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801b150:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b154:	4b26      	ldr	r3, [pc, #152]	; (801b1f0 <SIM0_step+0x1220>)
 801b156:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b15a:	3318      	adds	r3, #24
 801b15c:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory17_PreviousInput = SIM0_U.VoltageLimit;
 801b160:	4b24      	ldr	r3, [pc, #144]	; (801b1f4 <SIM0_step+0x1224>)
 801b162:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 801b166:	4922      	ldr	r1, [pc, #136]	; (801b1f0 <SIM0_step+0x1220>)
 801b168:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 801b16c:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory16_PreviousInput = SIM0_U.EnableCharge;
 801b170:	4b20      	ldr	r3, [pc, #128]	; (801b1f4 <SIM0_step+0x1224>)
 801b172:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 801b176:	4b1e      	ldr	r3, [pc, #120]	; (801b1f0 <SIM0_step+0x1220>)
 801b178:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b17c:	3308      	adds	r3, #8
 801b17e:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory18_PreviousInput = SIM0_U.CurrentLimit;
 801b182:	4b1c      	ldr	r3, [pc, #112]	; (801b1f4 <SIM0_step+0x1224>)
 801b184:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 801b188:	4b19      	ldr	r3, [pc, #100]	; (801b1f0 <SIM0_step+0x1220>)
 801b18a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b18e:	3310      	adds	r3, #16
 801b190:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_a = rtb_Exp;
 801b194:	4b16      	ldr	r3, [pc, #88]	; (801b1f0 <SIM0_step+0x1220>)
 801b196:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b19a:	3318      	adds	r3, #24
 801b19c:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 801b1a0:	f102 0208 	add.w	r2, r2, #8
 801b1a4:	e9d2 0100 	ldrd	r0, r1, [r2]
 801b1a8:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory13_PreviousInput = SIM0_U.EnableAirPlus;
 801b1ac:	4b11      	ldr	r3, [pc, #68]	; (801b1f4 <SIM0_step+0x1224>)
 801b1ae:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 801b1b2:	490f      	ldr	r1, [pc, #60]	; (801b1f0 <SIM0_step+0x1220>)
 801b1b4:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 801b1b8:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory14_PreviousInput = SIM0_U.EnablePrecharge;
 801b1bc:	4b0d      	ldr	r3, [pc, #52]	; (801b1f4 <SIM0_step+0x1224>)
 801b1be:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801b1c2:	4b0b      	ldr	r3, [pc, #44]	; (801b1f0 <SIM0_step+0x1220>)
 801b1c4:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b1c8:	3308      	adds	r3, #8
 801b1ca:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory8_PreviousInput = SIM0_U.EnableAirMinus;
 801b1ce:	4b09      	ldr	r3, [pc, #36]	; (801b1f4 <SIM0_step+0x1224>)
 801b1d0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 801b1d4:	4b06      	ldr	r3, [pc, #24]	; (801b1f0 <SIM0_step+0x1220>)
 801b1d6:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b1da:	3310      	adds	r3, #16
 801b1dc:	e9c3 0100 	strd	r0, r1, [r3]
}
 801b1e0:	bf00      	nop
 801b1e2:	f507 57a0 	add.w	r7, r7, #5120	; 0x1400
 801b1e6:	371c      	adds	r7, #28
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1ee:	bf00      	nop
 801b1f0:	2001c3a0 	.word	0x2001c3a0
 801b1f4:	2001e9f8 	.word	0x2001e9f8

0801b1f8 <SIM0_initialize>:

void SIM0_initialize(void)
{
 801b1f8:	b480      	push	{r7}
 801b1fa:	b083      	sub	sp, #12
 801b1fc:	af00      	add	r7, sp, #0
  {
    int32_T i;
    SIM0_DW.Memory20_PreviousInput = SIM0_P.Memory20_InitialCondition;
 801b1fe:	4b10      	ldr	r3, [pc, #64]	; (801b240 <SIM0_initialize+0x48>)
 801b200:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 801b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b208:	490e      	ldr	r1, [pc, #56]	; (801b244 <SIM0_initialize+0x4c>)
 801b20a:	f601 0108 	addw	r1, r1, #2056	; 0x808
 801b20e:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory11_PreviousInput = SIM0_P.Memory11_InitialCondition;
 801b212:	4b0b      	ldr	r3, [pc, #44]	; (801b240 <SIM0_initialize+0x48>)
 801b214:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 801b218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b21c:	4909      	ldr	r1, [pc, #36]	; (801b244 <SIM0_initialize+0x4c>)
 801b21e:	f501 6101 	add.w	r1, r1, #2064	; 0x810
 801b222:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory9_PreviousInput = SIM0_P.Memory9_InitialCondition;
 801b226:	4b06      	ldr	r3, [pc, #24]	; (801b240 <SIM0_initialize+0x48>)
 801b228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b230:	4904      	ldr	r1, [pc, #16]	; (801b244 <SIM0_initialize+0x4c>)
 801b232:	f601 71f8 	addw	r1, r1, #4088	; 0xff8
 801b236:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 801b23a:	2300      	movs	r3, #0
 801b23c:	607b      	str	r3, [r7, #4]
 801b23e:	e055      	b.n	801b2ec <SIM0_initialize+0xf4>
 801b240:	20000360 	.word	0x20000360
 801b244:	2001c3a0 	.word	0x2001c3a0
      SIM0_DW.Memory15_PreviousInput[i] = SIM0_P.Memory15_InitialCondition;
 801b248:	4ba1      	ldr	r3, [pc, #644]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b24a:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 801b24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b252:	48a0      	ldr	r0, [pc, #640]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b254:	6879      	ldr	r1, [r7, #4]
 801b256:	3105      	adds	r1, #5
 801b258:	00c9      	lsls	r1, r1, #3
 801b25a:	4401      	add	r1, r0
 801b25c:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory12_PreviousInput[i] = SIM0_P.Memory12_InitialCondition[i];
 801b260:	4a9b      	ldr	r2, [pc, #620]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801b268:	00db      	lsls	r3, r3, #3
 801b26a:	4413      	add	r3, r2
 801b26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b270:	4898      	ldr	r0, [pc, #608]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b272:	6879      	ldr	r1, [r7, #4]
 801b274:	3183      	adds	r1, #131	; 0x83
 801b276:	00c9      	lsls	r1, r1, #3
 801b278:	4401      	add	r1, r0
 801b27a:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.cQur[0];
 801b27e:	4b94      	ldr	r3, [pc, #592]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b280:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 801b284:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b288:	4892      	ldr	r0, [pc, #584]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b28a:	6879      	ldr	r1, [r7, #4]
 801b28c:	f201 1103 	addw	r1, r1, #259	; 0x103
 801b290:	00c9      	lsls	r1, r1, #3
 801b292:	4401      	add	r1, r0
 801b294:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory10_PreviousInput[i] = SIM0_P.cCap[0];
 801b298:	4b8d      	ldr	r3, [pc, #564]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b29a:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 801b29e:	488d      	ldr	r0, [pc, #564]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b2a0:	6879      	ldr	r1, [r7, #4]
 801b2a2:	f201 1181 	addw	r1, r1, #385	; 0x181
 801b2a6:	00c9      	lsls	r1, r1, #3
 801b2a8:	4401      	add	r1, r0
 801b2aa:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory19_PreviousInput[i] = SIM0_P.Memory19_InitialCondition;
 801b2ae:	4b88      	ldr	r3, [pc, #544]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b2b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b2b4:	3308      	adds	r3, #8
 801b2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2ba:	4886      	ldr	r0, [pc, #536]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b2bc:	6879      	ldr	r1, [r7, #4]
 801b2be:	f501 7100 	add.w	r1, r1, #512	; 0x200
 801b2c2:	00c9      	lsls	r1, r1, #3
 801b2c4:	4401      	add	r1, r0
 801b2c6:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory21_PreviousInput[i] = SIM0_P.Memory21_InitialCondition;
 801b2ca:	4b81      	ldr	r3, [pc, #516]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b2cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b2d0:	3310      	adds	r3, #16
 801b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2d6:	487f      	ldr	r0, [pc, #508]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b2d8:	6879      	ldr	r1, [r7, #4]
 801b2da:	f201 217e 	addw	r1, r1, #638	; 0x27e
 801b2de:	00c9      	lsls	r1, r1, #3
 801b2e0:	4401      	add	r1, r0
 801b2e2:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	3301      	adds	r3, #1
 801b2ea:	607b      	str	r3, [r7, #4]
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	2b7d      	cmp	r3, #125	; 0x7d
 801b2f0:	ddaa      	ble.n	801b248 <SIM0_initialize+0x50>
    }

    SIM0_DW.Memory1_PreviousInput = SIM0_P.Memory1_InitialCondition;
 801b2f2:	4b77      	ldr	r3, [pc, #476]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b2f4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801b2f8:	3308      	adds	r3, #8
 801b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2fe:	4975      	ldr	r1, [pc, #468]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b300:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 801b304:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory2_PreviousInput = SIM0_P.Memory2_InitialCondition;
 801b308:	4b71      	ldr	r3, [pc, #452]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b30a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801b30e:	3310      	adds	r3, #16
 801b310:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b314:	4b6f      	ldr	r3, [pc, #444]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b316:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b31a:	3308      	adds	r3, #8
 801b31c:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_m = SIM0_P.SRFlipFlop2_initial_condition;
 801b320:	4b6b      	ldr	r3, [pc, #428]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b322:	f893 2bf0 	ldrb.w	r2, [r3, #3056]	; 0xbf0
 801b326:	4b6b      	ldr	r3, [pc, #428]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b328:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b32c:	3318      	adds	r3, #24
 801b32e:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory3_PreviousInput = SIM0_P.Memory3_InitialCondition;
 801b330:	4b67      	ldr	r3, [pc, #412]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b332:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801b336:	3318      	adds	r3, #24
 801b338:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b33c:	4b65      	ldr	r3, [pc, #404]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b33e:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b342:	3310      	adds	r3, #16
 801b344:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory4_PreviousInput = SIM0_P.Memory4_InitialCondition;
 801b348:	4b61      	ldr	r3, [pc, #388]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b34a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801b34e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b352:	4b60      	ldr	r3, [pc, #384]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b354:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b358:	3318      	adds	r3, #24
 801b35a:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_c = SIM0_P.SRFlipFlop1_initial_condition;
 801b35e:	4b5c      	ldr	r3, [pc, #368]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b360:	f893 2bf1 	ldrb.w	r2, [r3, #3057]	; 0xbf1
 801b364:	4b5b      	ldr	r3, [pc, #364]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b366:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b36a:	3319      	adds	r3, #25
 801b36c:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory5_PreviousInput = SIM0_P.Memory5_InitialCondition;
 801b36e:	4b58      	ldr	r3, [pc, #352]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b370:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801b374:	3308      	adds	r3, #8
 801b376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b37a:	4956      	ldr	r1, [pc, #344]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b37c:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 801b380:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay1_DSTATE = SIM0_P.Delay1_InitialCondition;
 801b384:	4b52      	ldr	r3, [pc, #328]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b386:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801b38a:	3310      	adds	r3, #16
 801b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b390:	4950      	ldr	r1, [pc, #320]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b392:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay3_DSTATE[0] = SIM0_P.Delay3_InitialCondition;
 801b396:	4b4e      	ldr	r3, [pc, #312]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b398:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801b39c:	3318      	adds	r3, #24
 801b39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3a2:	494c      	ldr	r1, [pc, #304]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b3a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    SIM0_DW.Delay2_DSTATE[0] = SIM0_P.Delay2_InitialCondition;
 801b3a8:	4b49      	ldr	r3, [pc, #292]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b3aa:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801b3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3b2:	4948      	ldr	r1, [pc, #288]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b3b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    SIM0_DW.Delay3_DSTATE[1] = SIM0_P.Delay3_InitialCondition;
 801b3b8:	4b45      	ldr	r3, [pc, #276]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b3ba:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801b3be:	3318      	adds	r3, #24
 801b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3c4:	4943      	ldr	r1, [pc, #268]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b3c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    SIM0_DW.Delay2_DSTATE[1] = SIM0_P.Delay2_InitialCondition;
 801b3ca:	4b41      	ldr	r3, [pc, #260]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b3cc:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801b3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3d4:	493f      	ldr	r1, [pc, #252]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b3d6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    SIM0_DW.Memory6_PreviousInput = SIM0_P.Memory6_InitialCondition;
 801b3da:	4b3d      	ldr	r3, [pc, #244]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b3dc:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801b3e0:	3308      	adds	r3, #8
 801b3e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b3e6:	4b3b      	ldr	r3, [pc, #236]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b3e8:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b3ec:	3308      	adds	r3, #8
 801b3ee:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory7_PreviousInput = SIM0_P.Memory7_InitialCondition;
 801b3f2:	4b37      	ldr	r3, [pc, #220]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b3f4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801b3f8:	3310      	adds	r3, #16
 801b3fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b3fe:	4b35      	ldr	r3, [pc, #212]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b400:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b404:	3310      	adds	r3, #16
 801b406:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory22_PreviousInput = SIM0_P.Memory22_InitialCondition;
 801b40a:	4b31      	ldr	r3, [pc, #196]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b40c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801b410:	3318      	adds	r3, #24
 801b412:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b416:	4b2f      	ldr	r3, [pc, #188]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b418:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b41c:	3318      	adds	r3, #24
 801b41e:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory17_PreviousInput = SIM0_P.Memory17_InitialCondition;
 801b422:	4b2b      	ldr	r3, [pc, #172]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b424:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 801b428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b42c:	4929      	ldr	r1, [pc, #164]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b42e:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 801b432:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory16_PreviousInput = SIM0_P.Memory16_InitialCondition;
 801b436:	4b26      	ldr	r3, [pc, #152]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b438:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 801b43c:	3308      	adds	r3, #8
 801b43e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b442:	4b24      	ldr	r3, [pc, #144]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b444:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b448:	3308      	adds	r3, #8
 801b44a:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory18_PreviousInput = SIM0_P.Memory18_InitialCondition;
 801b44e:	4b20      	ldr	r3, [pc, #128]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b450:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 801b454:	3310      	adds	r3, #16
 801b456:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b45a:	4b1e      	ldr	r3, [pc, #120]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b45c:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b460:	3310      	adds	r3, #16
 801b462:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_a = SIM0_P.Memory_InitialCondition;
 801b466:	4b1a      	ldr	r3, [pc, #104]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b468:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 801b46c:	3318      	adds	r3, #24
 801b46e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b472:	4b18      	ldr	r3, [pc, #96]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b474:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b478:	3318      	adds	r3, #24
 801b47a:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory13_PreviousInput = SIM0_P.Memory13_InitialCondition;
 801b47e:	4b14      	ldr	r3, [pc, #80]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b480:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 801b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b488:	4912      	ldr	r1, [pc, #72]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b48a:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 801b48e:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory14_PreviousInput = SIM0_P.Memory14_InitialCondition;
 801b492:	4b0f      	ldr	r3, [pc, #60]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b494:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 801b498:	3308      	adds	r3, #8
 801b49a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b49e:	4b0d      	ldr	r3, [pc, #52]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b4a0:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b4a4:	3308      	adds	r3, #8
 801b4a6:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory8_PreviousInput = SIM0_P.Memory8_InitialCondition;
 801b4aa:	4b09      	ldr	r3, [pc, #36]	; (801b4d0 <SIM0_initialize+0x2d8>)
 801b4ac:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 801b4b0:	3310      	adds	r3, #16
 801b4b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b4b6:	4b07      	ldr	r3, [pc, #28]	; (801b4d4 <SIM0_initialize+0x2dc>)
 801b4b8:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b4bc:	3310      	adds	r3, #16
 801b4be:	e9c3 0100 	strd	r0, r1, [r3]
  }
}
 801b4c2:	bf00      	nop
 801b4c4:	370c      	adds	r7, #12
 801b4c6:	46bd      	mov	sp, r7
 801b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4cc:	4770      	bx	lr
 801b4ce:	bf00      	nop
 801b4d0:	20000360 	.word	0x20000360
 801b4d4:	2001c3a0 	.word	0x2001c3a0

0801b4d8 <UTMeanCovSqrt_C2vgLQ4W>:
#include "qr_5a2P8Gh6.h"

void UTMeanCovSqrt_C2vgLQ4W(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1[3], real_T Y2[18], const real_T X1[3],
  real_T X2[18], real_T Ymean[3], real_T Sy[9], real_T Pxy[9])
{
 801b4d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b4dc:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 801b4e0:	af00      	add	r7, sp, #0
 801b4e2:	f107 0414 	add.w	r4, r7, #20
 801b4e6:	6020      	str	r0, [r4, #0]
 801b4e8:	f107 0010 	add.w	r0, r7, #16
 801b4ec:	6001      	str	r1, [r0, #0]
 801b4ee:	f107 0108 	add.w	r1, r7, #8
 801b4f2:	ed81 0b00 	vstr	d0, [r1]
 801b4f6:	1d39      	adds	r1, r7, #4
 801b4f8:	600a      	str	r2, [r1, #0]
 801b4fa:	463a      	mov	r2, r7
 801b4fc:	6013      	str	r3, [r2, #0]
  int32_T i;
  int32_T iAcol;
  int32_T i_0;
  int32_T i_1;
  int32_T kk;
  Ymean[0] = Y1[0] * meanWeights[0];
 801b4fe:	1d3b      	adds	r3, r7, #4
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b506:	f107 0314 	add.w	r3, r7, #20
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b510:	f7e5 f864 	bl	80005dc <__aeabi_dmul>
 801b514:	4602      	mov	r2, r0
 801b516:	460b      	mov	r3, r1
 801b518:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 801b51c:	e9c1 2300 	strd	r2, r3, [r1]
  Ymean[1] = meanWeights[0] * Y1[1];
 801b520:	f107 0314 	add.w	r3, r7, #20
 801b524:	681b      	ldr	r3, [r3, #0]
 801b526:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b52a:	1d3b      	adds	r3, r7, #4
 801b52c:	681b      	ldr	r3, [r3, #0]
 801b52e:	3308      	adds	r3, #8
 801b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b534:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 801b538:	3408      	adds	r4, #8
 801b53a:	f7e5 f84f 	bl	80005dc <__aeabi_dmul>
 801b53e:	4602      	mov	r2, r0
 801b540:	460b      	mov	r3, r1
 801b542:	e9c4 2300 	strd	r2, r3, [r4]
  Ymean[2] = meanWeights[0] * Y1[2];
 801b546:	f107 0314 	add.w	r3, r7, #20
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b550:	1d3b      	adds	r3, r7, #4
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	3310      	adds	r3, #16
 801b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b55a:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 801b55e:	3410      	adds	r4, #16
 801b560:	f7e5 f83c 	bl	80005dc <__aeabi_dmul>
 801b564:	4602      	mov	r2, r0
 801b566:	460b      	mov	r3, r1
 801b568:	e9c4 2300 	strd	r2, r3, [r4]
  iAcol = 0;
 801b56c:	2300      	movs	r3, #0
 801b56e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801b572:	2300      	movs	r3, #0
 801b574:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b578:	e079      	b.n	801b66e <UTMeanCovSqrt_C2vgLQ4W+0x196>
    Ymean[0] += Y2[iAcol] * meanWeights[1];
 801b57a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b57e:	e9d3 4500 	ldrd	r4, r5, [r3]
 801b582:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b586:	00db      	lsls	r3, r3, #3
 801b588:	463a      	mov	r2, r7
 801b58a:	6812      	ldr	r2, [r2, #0]
 801b58c:	4413      	add	r3, r2
 801b58e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b592:	f107 0314 	add.w	r3, r7, #20
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	3308      	adds	r3, #8
 801b59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b59e:	f7e5 f81d 	bl	80005dc <__aeabi_dmul>
 801b5a2:	4602      	mov	r2, r0
 801b5a4:	460b      	mov	r3, r1
 801b5a6:	4620      	mov	r0, r4
 801b5a8:	4629      	mov	r1, r5
 801b5aa:	f7e4 fe61 	bl	8000270 <__adddf3>
 801b5ae:	4602      	mov	r2, r0
 801b5b0:	460b      	mov	r3, r1
 801b5b2:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 801b5b6:	e9c1 2300 	strd	r2, r3, [r1]
    Ymean[1] += Y2[iAcol + 1] * meanWeights[1];
 801b5ba:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b5be:	3308      	adds	r3, #8
 801b5c0:	e9d3 4500 	ldrd	r4, r5, [r3]
 801b5c4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b5c8:	3301      	adds	r3, #1
 801b5ca:	00db      	lsls	r3, r3, #3
 801b5cc:	463a      	mov	r2, r7
 801b5ce:	6812      	ldr	r2, [r2, #0]
 801b5d0:	4413      	add	r3, r2
 801b5d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b5d6:	f107 0314 	add.w	r3, r7, #20
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	3308      	adds	r3, #8
 801b5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5e2:	f7e4 fffb 	bl	80005dc <__aeabi_dmul>
 801b5e6:	4602      	mov	r2, r0
 801b5e8:	460b      	mov	r3, r1
 801b5ea:	4610      	mov	r0, r2
 801b5ec:	4619      	mov	r1, r3
 801b5ee:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b5f2:	f103 0608 	add.w	r6, r3, #8
 801b5f6:	4602      	mov	r2, r0
 801b5f8:	460b      	mov	r3, r1
 801b5fa:	4620      	mov	r0, r4
 801b5fc:	4629      	mov	r1, r5
 801b5fe:	f7e4 fe37 	bl	8000270 <__adddf3>
 801b602:	4602      	mov	r2, r0
 801b604:	460b      	mov	r3, r1
 801b606:	e9c6 2300 	strd	r2, r3, [r6]
    Ymean[2] += Y2[iAcol + 2] * meanWeights[1];
 801b60a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b60e:	3310      	adds	r3, #16
 801b610:	e9d3 4500 	ldrd	r4, r5, [r3]
 801b614:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b618:	3302      	adds	r3, #2
 801b61a:	00db      	lsls	r3, r3, #3
 801b61c:	463a      	mov	r2, r7
 801b61e:	6812      	ldr	r2, [r2, #0]
 801b620:	4413      	add	r3, r2
 801b622:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b626:	f107 0314 	add.w	r3, r7, #20
 801b62a:	681b      	ldr	r3, [r3, #0]
 801b62c:	3308      	adds	r3, #8
 801b62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b632:	f7e4 ffd3 	bl	80005dc <__aeabi_dmul>
 801b636:	4602      	mov	r2, r0
 801b638:	460b      	mov	r3, r1
 801b63a:	4610      	mov	r0, r2
 801b63c:	4619      	mov	r1, r3
 801b63e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b642:	f103 0610 	add.w	r6, r3, #16
 801b646:	4602      	mov	r2, r0
 801b648:	460b      	mov	r3, r1
 801b64a:	4620      	mov	r0, r4
 801b64c:	4629      	mov	r1, r5
 801b64e:	f7e4 fe0f 	bl	8000270 <__adddf3>
 801b652:	4602      	mov	r2, r0
 801b654:	460b      	mov	r3, r1
 801b656:	e9c6 2300 	strd	r2, r3, [r6]
    iAcol += 3;
 801b65a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b65e:	3303      	adds	r3, #3
 801b660:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801b664:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b668:	3301      	adds	r3, #1
 801b66a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b66e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b672:	2b05      	cmp	r3, #5
 801b674:	dd81      	ble.n	801b57a <UTMeanCovSqrt_C2vgLQ4W+0xa2>
  }

  signOOM = Ymean[0] * OOM;
 801b676:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b67e:	f107 0108 	add.w	r1, r7, #8
 801b682:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b686:	f7e4 ffa9 	bl	80005dc <__aeabi_dmul>
 801b68a:	4602      	mov	r2, r0
 801b68c:	460b      	mov	r3, r1
 801b68e:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  scale = Y1[0] - signOOM;
 801b692:	1d3b      	adds	r3, r7, #4
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b69a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b69e:	f7e4 fde5 	bl	800026c <__aeabi_dsub>
 801b6a2:	4602      	mov	r2, r0
 801b6a4:	460b      	mov	r3, r1
 801b6a6:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
  Ymean[0] = signOOM;
 801b6aa:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 801b6ae:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b6b2:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[0] = scale;
 801b6b6:	1d3b      	adds	r3, r7, #4
 801b6b8:	6819      	ldr	r1, [r3, #0]
 801b6ba:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801b6be:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[1] * OOM;
 801b6c2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b6c6:	3308      	adds	r3, #8
 801b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6cc:	f107 0108 	add.w	r1, r7, #8
 801b6d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b6d4:	f7e4 ff82 	bl	80005dc <__aeabi_dmul>
 801b6d8:	4602      	mov	r2, r0
 801b6da:	460b      	mov	r3, r1
 801b6dc:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  absxk = Y1[1] - signOOM;
 801b6e0:	1d3b      	adds	r3, r7, #4
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	3308      	adds	r3, #8
 801b6e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b6ea:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b6ee:	f7e4 fdbd 	bl	800026c <__aeabi_dsub>
 801b6f2:	4602      	mov	r2, r0
 801b6f4:	460b      	mov	r3, r1
 801b6f6:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
  Ymean[1] = signOOM;
 801b6fa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b6fe:	f103 0108 	add.w	r1, r3, #8
 801b702:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b706:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[1] = absxk;
 801b70a:	1d3b      	adds	r3, r7, #4
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	f103 0108 	add.w	r1, r3, #8
 801b712:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801b716:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[2] * OOM;
 801b71a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b71e:	3310      	adds	r3, #16
 801b720:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b724:	f107 0108 	add.w	r1, r7, #8
 801b728:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b72c:	f7e4 ff56 	bl	80005dc <__aeabi_dmul>
 801b730:	4602      	mov	r2, r0
 801b732:	460b      	mov	r3, r1
 801b734:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  b_t = Y1[2] - signOOM;
 801b738:	1d3b      	adds	r3, r7, #4
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	3310      	adds	r3, #16
 801b73e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b742:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b746:	f7e4 fd91 	bl	800026c <__aeabi_dsub>
 801b74a:	4602      	mov	r2, r0
 801b74c:	460b      	mov	r3, r1
 801b74e:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
  Ymean[2] = signOOM;
 801b752:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b756:	f103 0110 	add.w	r1, r3, #16
 801b75a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b75e:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[2] = b_t;
 801b762:	1d3b      	adds	r3, r7, #4
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	f103 0110 	add.w	r1, r3, #16
 801b76a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801b76e:	e9c1 2300 	strd	r2, r3, [r1]
  iAcol = 0;
 801b772:	2300      	movs	r3, #0
 801b774:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801b778:	2300      	movs	r3, #0
 801b77a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b77e:	e054      	b.n	801b82a <UTMeanCovSqrt_C2vgLQ4W+0x352>
    Y2[iAcol] -= Ymean[0];
 801b780:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b784:	00db      	lsls	r3, r3, #3
 801b786:	463a      	mov	r2, r7
 801b788:	6812      	ldr	r2, [r2, #0]
 801b78a:	4413      	add	r3, r2
 801b78c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b790:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b794:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b798:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801b79c:	00e4      	lsls	r4, r4, #3
 801b79e:	463d      	mov	r5, r7
 801b7a0:	682d      	ldr	r5, [r5, #0]
 801b7a2:	442c      	add	r4, r5
 801b7a4:	f7e4 fd62 	bl	800026c <__aeabi_dsub>
 801b7a8:	4602      	mov	r2, r0
 801b7aa:	460b      	mov	r3, r1
 801b7ac:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 1] -= Ymean[1];
 801b7b0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b7b4:	3301      	adds	r3, #1
 801b7b6:	00db      	lsls	r3, r3, #3
 801b7b8:	463a      	mov	r2, r7
 801b7ba:	6812      	ldr	r2, [r2, #0]
 801b7bc:	4413      	add	r3, r2
 801b7be:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b7c2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b7c6:	3308      	adds	r3, #8
 801b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7cc:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801b7d0:	3401      	adds	r4, #1
 801b7d2:	00e4      	lsls	r4, r4, #3
 801b7d4:	463d      	mov	r5, r7
 801b7d6:	682d      	ldr	r5, [r5, #0]
 801b7d8:	442c      	add	r4, r5
 801b7da:	f7e4 fd47 	bl	800026c <__aeabi_dsub>
 801b7de:	4602      	mov	r2, r0
 801b7e0:	460b      	mov	r3, r1
 801b7e2:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 2] -= signOOM;
 801b7e6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b7ea:	3302      	adds	r3, #2
 801b7ec:	00db      	lsls	r3, r3, #3
 801b7ee:	463a      	mov	r2, r7
 801b7f0:	6812      	ldr	r2, [r2, #0]
 801b7f2:	4413      	add	r3, r2
 801b7f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b7f8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b7fc:	3302      	adds	r3, #2
 801b7fe:	00db      	lsls	r3, r3, #3
 801b800:	463a      	mov	r2, r7
 801b802:	6812      	ldr	r2, [r2, #0]
 801b804:	18d4      	adds	r4, r2, r3
 801b806:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b80a:	f7e4 fd2f 	bl	800026c <__aeabi_dsub>
 801b80e:	4602      	mov	r2, r0
 801b810:	460b      	mov	r3, r1
 801b812:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 801b816:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b81a:	3303      	adds	r3, #3
 801b81c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801b820:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b824:	3301      	adds	r3, #1
 801b826:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b82a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b82e:	2b05      	cmp	r3, #5
 801b830:	dda6      	ble.n	801b780 <UTMeanCovSqrt_C2vgLQ4W+0x2a8>
  }

  if (rtIsNaN(OOM)) {
 801b832:	f107 0308 	add.w	r3, r7, #8
 801b836:	ed93 0b00 	vldr	d0, [r3]
 801b83a:	f004 fbef 	bl	802001c <rtIsNaN>
 801b83e:	4603      	mov	r3, r0
 801b840:	2b00      	cmp	r3, #0
 801b842:	d006      	beq.n	801b852 <UTMeanCovSqrt_C2vgLQ4W+0x37a>
    signOOM = OOM;
 801b844:	f107 0308 	add.w	r3, r7, #8
 801b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b84c:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 801b850:	e029      	b.n	801b8a6 <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else if (OOM < 0.0) {
 801b852:	f107 0108 	add.w	r1, r7, #8
 801b856:	f04f 0200 	mov.w	r2, #0
 801b85a:	f04f 0300 	mov.w	r3, #0
 801b85e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b862:	f7e5 f92d 	bl	8000ac0 <__aeabi_dcmplt>
 801b866:	4603      	mov	r3, r0
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d005      	beq.n	801b878 <UTMeanCovSqrt_C2vgLQ4W+0x3a0>
    signOOM = -1.0;
 801b86c:	f04f 0200 	mov.w	r2, #0
 801b870:	4bce      	ldr	r3, [pc, #824]	; (801bbac <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 801b872:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 801b876:	e016      	b.n	801b8a6 <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else {
    signOOM = (OOM > 0.0);
 801b878:	f107 0108 	add.w	r1, r7, #8
 801b87c:	f04f 0200 	mov.w	r2, #0
 801b880:	f04f 0300 	mov.w	r3, #0
 801b884:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b888:	f7e5 f938 	bl	8000afc <__aeabi_dcmpgt>
 801b88c:	4603      	mov	r3, r0
 801b88e:	2b00      	cmp	r3, #0
 801b890:	d003      	beq.n	801b89a <UTMeanCovSqrt_C2vgLQ4W+0x3c2>
 801b892:	f04f 0200 	mov.w	r2, #0
 801b896:	4bc6      	ldr	r3, [pc, #792]	; (801bbb0 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 801b898:	e003      	b.n	801b8a2 <UTMeanCovSqrt_C2vgLQ4W+0x3ca>
 801b89a:	f04f 0200 	mov.w	r2, #0
 801b89e:	f04f 0300 	mov.w	r3, #0
 801b8a2:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  }

  covWeights_0 = signOOM * covWeights[0];
 801b8a6:	f107 0310 	add.w	r3, r7, #16
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8b0:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 801b8b4:	f7e4 fe92 	bl	80005dc <__aeabi_dmul>
 801b8b8:	4602      	mov	r2, r0
 801b8ba:	460b      	mov	r3, r1
 801b8bc:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
  covWeights_1 = signOOM * covWeights[1];
 801b8c0:	f107 0310 	add.w	r3, r7, #16
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	3308      	adds	r3, #8
 801b8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8cc:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 801b8d0:	f7e4 fe84 	bl	80005dc <__aeabi_dmul>
 801b8d4:	4602      	mov	r2, r0
 801b8d6:	460b      	mov	r3, r1
 801b8d8:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
  OOM *= signOOM;
 801b8dc:	f107 0408 	add.w	r4, r7, #8
 801b8e0:	f107 0108 	add.w	r1, r7, #8
 801b8e4:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b8ec:	f7e4 fe76 	bl	80005dc <__aeabi_dmul>
 801b8f0:	4602      	mov	r2, r0
 801b8f2:	460b      	mov	r3, r1
 801b8f4:	e9c4 2300 	strd	r2, r3, [r4]
  signOOM = sqrt(OOM);
 801b8f8:	f107 0308 	add.w	r3, r7, #8
 801b8fc:	ed93 0b00 	vldr	d0, [r3]
 801b900:	f013 f8fa 	bl	802eaf8 <sqrt>
 801b904:	ed87 0ba8 	vstr	d0, [r7, #672]	; 0x2a0
  temp = sqrt(covWeights_1);
 801b908:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 801b90c:	f013 f8f4 	bl	802eaf8 <sqrt>
 801b910:	eeb0 7a40 	vmov.f32	s14, s0
 801b914:	eef0 7a60 	vmov.f32	s15, s1
 801b918:	f107 0318 	add.w	r3, r7, #24
 801b91c:	ed83 7b00 	vstr	d7, [r3]
  kk = 0;
 801b920:	2300      	movs	r3, #0
 801b922:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 801b926:	2300      	movs	r3, #0
 801b928:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801b92c:	e03c      	b.n	801b9a8 <UTMeanCovSqrt_C2vgLQ4W+0x4d0>
    i_1 = 0;
 801b92e:	2300      	movs	r3, #0
 801b930:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 801b934:	2300      	movs	r3, #0
 801b936:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801b93a:	e027      	b.n	801b98c <UTMeanCovSqrt_C2vgLQ4W+0x4b4>
      temp_0[i + kk] = Y2[i_1 + iAcol] * temp;
 801b93c:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 801b940:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b944:	4413      	add	r3, r2
 801b946:	00db      	lsls	r3, r3, #3
 801b948:	463a      	mov	r2, r7
 801b94a:	6812      	ldr	r2, [r2, #0]
 801b94c:	4413      	add	r3, r2
 801b94e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b952:	f107 0318 	add.w	r3, r7, #24
 801b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b95a:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 801b95e:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 801b962:	442c      	add	r4, r5
 801b964:	f7e4 fe3a 	bl	80005dc <__aeabi_dmul>
 801b968:	4602      	mov	r2, r0
 801b96a:	460b      	mov	r3, r1
 801b96c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 801b970:	00e1      	lsls	r1, r4, #3
 801b972:	4401      	add	r1, r0
 801b974:	e9c1 2300 	strd	r2, r3, [r1]
      i_1 += 3;
 801b978:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801b97c:	3303      	adds	r3, #3
 801b97e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 801b982:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801b986:	3301      	adds	r3, #1
 801b988:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801b98c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801b990:	2b05      	cmp	r3, #5
 801b992:	ddd3      	ble.n	801b93c <UTMeanCovSqrt_C2vgLQ4W+0x464>
    }

    kk += 6;
 801b994:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b998:	3306      	adds	r3, #6
 801b99a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 801b99e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b9a2:	3301      	adds	r3, #1
 801b9a4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801b9a8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b9ac:	2b02      	cmp	r3, #2
 801b9ae:	ddbe      	ble.n	801b92e <UTMeanCovSqrt_C2vgLQ4W+0x456>
  }

  qr_DvOBrgQi(temp_0, a__1, Sy);
 801b9b0:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 801b9b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801b9b8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801b9bc:	4618      	mov	r0, r3
 801b9be:	f002 ff43 	bl	801e848 <qr_DvOBrgQi>
  if (!rtIsNaN(covWeights_0)) {
 801b9c2:	ed97 0bac 	vldr	d0, [r7, #688]	; 0x2b0
 801b9c6:	f004 fb29 	bl	802001c <rtIsNaN>
 801b9ca:	4603      	mov	r3, r0
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d125      	bne.n	801ba1c <UTMeanCovSqrt_C2vgLQ4W+0x544>
    if (covWeights_0 < 0.0) {
 801b9d0:	f04f 0200 	mov.w	r2, #0
 801b9d4:	f04f 0300 	mov.w	r3, #0
 801b9d8:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 801b9dc:	f7e5 f870 	bl	8000ac0 <__aeabi_dcmplt>
 801b9e0:	4603      	mov	r3, r0
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d005      	beq.n	801b9f2 <UTMeanCovSqrt_C2vgLQ4W+0x51a>
      covWeights_0 = -1.0;
 801b9e6:	f04f 0200 	mov.w	r2, #0
 801b9ea:	4b70      	ldr	r3, [pc, #448]	; (801bbac <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 801b9ec:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 801b9f0:	e014      	b.n	801ba1c <UTMeanCovSqrt_C2vgLQ4W+0x544>
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 801b9f2:	f04f 0200 	mov.w	r2, #0
 801b9f6:	f04f 0300 	mov.w	r3, #0
 801b9fa:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 801b9fe:	f7e5 f87d 	bl	8000afc <__aeabi_dcmpgt>
 801ba02:	4603      	mov	r3, r0
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d003      	beq.n	801ba10 <UTMeanCovSqrt_C2vgLQ4W+0x538>
 801ba08:	f04f 0200 	mov.w	r2, #0
 801ba0c:	4b68      	ldr	r3, [pc, #416]	; (801bbb0 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 801ba0e:	e003      	b.n	801ba18 <UTMeanCovSqrt_C2vgLQ4W+0x540>
 801ba10:	f04f 0200 	mov.w	r2, #0
 801ba14:	f04f 0300 	mov.w	r3, #0
 801ba18:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    }
  }

  if (covWeights_0 == 1.0) {
 801ba1c:	f04f 0200 	mov.w	r2, #0
 801ba20:	4b63      	ldr	r3, [pc, #396]	; (801bbb0 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 801ba22:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 801ba26:	f7e5 f841 	bl	8000aac <__aeabi_dcmpeq>
 801ba2a:	4603      	mov	r3, r0
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	f000 81bd 	beq.w	801bdac <UTMeanCovSqrt_C2vgLQ4W+0x8d4>
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801ba32:	2300      	movs	r3, #0
 801ba34:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801ba38:	e011      	b.n	801ba5e <UTMeanCovSqrt_C2vgLQ4W+0x586>
      Sy[iAcol + 1] = 0.0;
 801ba3a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ba3e:	3301      	adds	r3, #1
 801ba40:	00db      	lsls	r3, r3, #3
 801ba42:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801ba46:	18d1      	adds	r1, r2, r3
 801ba48:	f04f 0200 	mov.w	r2, #0
 801ba4c:	f04f 0300 	mov.w	r3, #0
 801ba50:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801ba54:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ba58:	3301      	adds	r3, #1
 801ba5a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801ba5e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ba62:	2b01      	cmp	r3, #1
 801ba64:	dde9      	ble.n	801ba3a <UTMeanCovSqrt_C2vgLQ4W+0x562>
    }

    Sy[5] = 0.0;
 801ba66:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801ba6a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801ba6e:	f04f 0200 	mov.w	r2, #0
 801ba72:	f04f 0300 	mov.w	r3, #0
 801ba76:	e9c1 2300 	strd	r2, r3, [r1]
    c[2] = 0.0;
 801ba7a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801ba7e:	f04f 0200 	mov.w	r2, #0
 801ba82:	f04f 0300 	mov.w	r3, #0
 801ba86:	e9c1 2304 	strd	r2, r3, [r1, #16]
    s[2] = 0.0;
 801ba8a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801ba8e:	f04f 0200 	mov.w	r2, #0
 801ba92:	f04f 0300 	mov.w	r3, #0
 801ba96:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rotate_LZ7ctbe0(Sy[0], scale, &c[0], &s[0], &Sy[0]);
 801ba9a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801ba9e:	ed93 7b00 	vldr	d7, [r3]
 801baa2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801baa6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801baaa:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801baae:	4618      	mov	r0, r3
 801bab0:	ed97 1baa 	vldr	d1, [r7, #680]	; 0x2a8
 801bab4:	eeb0 0a47 	vmov.f32	s0, s14
 801bab8:	eef0 0a67 	vmov.f32	s1, s15
 801babc:	f004 f814 	bl	801fae8 <rotate_LZ7ctbe0>
    temp = c[0] * absxk - s[0] * Sy[3];
 801bac0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bac4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bac8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801bacc:	f7e4 fd86 	bl	80005dc <__aeabi_dmul>
 801bad0:	4602      	mov	r2, r0
 801bad2:	460b      	mov	r3, r1
 801bad4:	4614      	mov	r4, r2
 801bad6:	461d      	mov	r5, r3
 801bad8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801badc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bae0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bae4:	3318      	adds	r3, #24
 801bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baea:	f7e4 fd77 	bl	80005dc <__aeabi_dmul>
 801baee:	4602      	mov	r2, r0
 801baf0:	460b      	mov	r3, r1
 801baf2:	4620      	mov	r0, r4
 801baf4:	4629      	mov	r1, r5
 801baf6:	f7e4 fbb9 	bl	800026c <__aeabi_dsub>
 801bafa:	4602      	mov	r2, r0
 801bafc:	460b      	mov	r3, r1
 801bafe:	f107 0118 	add.w	r1, r7, #24
 801bb02:	e9c1 2300 	strd	r2, r3, [r1]
    Sy[3] = c[0] * Sy[3] + s[0] * absxk;
 801bb06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bb0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bb0e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bb12:	3318      	adds	r3, #24
 801bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb18:	f7e4 fd60 	bl	80005dc <__aeabi_dmul>
 801bb1c:	4602      	mov	r2, r0
 801bb1e:	460b      	mov	r3, r1
 801bb20:	4690      	mov	r8, r2
 801bb22:	4699      	mov	r9, r3
 801bb24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bb28:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bb2c:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801bb30:	f7e4 fd54 	bl	80005dc <__aeabi_dmul>
 801bb34:	4602      	mov	r2, r0
 801bb36:	460b      	mov	r3, r1
 801bb38:	4610      	mov	r0, r2
 801bb3a:	4619      	mov	r1, r3
 801bb3c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bb40:	f103 0418 	add.w	r4, r3, #24
 801bb44:	4602      	mov	r2, r0
 801bb46:	460b      	mov	r3, r1
 801bb48:	4640      	mov	r0, r8
 801bb4a:	4649      	mov	r1, r9
 801bb4c:	f7e4 fb90 	bl	8000270 <__adddf3>
 801bb50:	4602      	mov	r2, r0
 801bb52:	460b      	mov	r3, r1
 801bb54:	e9c4 2300 	strd	r2, r3, [r4]
    rotate_LZ7ctbe0(Sy[4], temp, &c[1], &s[1], &Sy[4]);
 801bb58:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bb5c:	3320      	adds	r3, #32
 801bb5e:	ed93 7b00 	vldr	d7, [r3]
 801bb62:	f107 0318 	add.w	r3, r7, #24
 801bb66:	ed93 6b00 	vldr	d6, [r3]
 801bb6a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bb6e:	f103 0220 	add.w	r2, r3, #32
 801bb72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bb76:	f103 0108 	add.w	r1, r3, #8
 801bb7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bb7e:	3308      	adds	r3, #8
 801bb80:	4618      	mov	r0, r3
 801bb82:	eeb0 1a46 	vmov.f32	s2, s12
 801bb86:	eef0 1a66 	vmov.f32	s3, s13
 801bb8a:	eeb0 0a47 	vmov.f32	s0, s14
 801bb8e:	eef0 0a67 	vmov.f32	s1, s15
 801bb92:	f003 ffa9 	bl	801fae8 <rotate_LZ7ctbe0>
    temp = b_t;
 801bb96:	f107 0118 	add.w	r1, r7, #24
 801bb9a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801bb9e:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801bba2:	2300      	movs	r3, #0
 801bba4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bba8:	e06f      	b.n	801bc8a <UTMeanCovSqrt_C2vgLQ4W+0x7b2>
 801bbaa:	bf00      	nop
 801bbac:	bff00000 	.word	0xbff00000
 801bbb0:	3ff00000 	.word	0x3ff00000
      scale = s[iAcol] * temp;
 801bbb4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801bbb8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bbbc:	00db      	lsls	r3, r3, #3
 801bbbe:	4413      	add	r3, r2
 801bbc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bbc4:	f107 0318 	add.w	r3, r7, #24
 801bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbcc:	f7e4 fd06 	bl	80005dc <__aeabi_dmul>
 801bbd0:	4602      	mov	r2, r0
 801bbd2:	460b      	mov	r3, r1
 801bbd4:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = Sy[iAcol + 6];
 801bbd8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bbdc:	3306      	adds	r3, #6
 801bbde:	00db      	lsls	r3, r3, #3
 801bbe0:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bbe4:	4413      	add	r3, r2
 801bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbea:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
      temp = c[iAcol] * temp - absxk * s[iAcol];
 801bbee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801bbf2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bbf6:	00db      	lsls	r3, r3, #3
 801bbf8:	4413      	add	r3, r2
 801bbfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bbfe:	f107 0318 	add.w	r3, r7, #24
 801bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc06:	f7e4 fce9 	bl	80005dc <__aeabi_dmul>
 801bc0a:	4602      	mov	r2, r0
 801bc0c:	460b      	mov	r3, r1
 801bc0e:	4614      	mov	r4, r2
 801bc10:	461d      	mov	r5, r3
 801bc12:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801bc16:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bc1a:	00db      	lsls	r3, r3, #3
 801bc1c:	4413      	add	r3, r2
 801bc1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bc22:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801bc26:	f7e4 fcd9 	bl	80005dc <__aeabi_dmul>
 801bc2a:	4602      	mov	r2, r0
 801bc2c:	460b      	mov	r3, r1
 801bc2e:	4620      	mov	r0, r4
 801bc30:	4629      	mov	r1, r5
 801bc32:	f7e4 fb1b 	bl	800026c <__aeabi_dsub>
 801bc36:	4602      	mov	r2, r0
 801bc38:	460b      	mov	r3, r1
 801bc3a:	f107 0118 	add.w	r1, r7, #24
 801bc3e:	e9c1 2300 	strd	r2, r3, [r1]
      Sy[iAcol + 6] = absxk * c[iAcol] + scale;
 801bc42:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801bc46:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bc4a:	00db      	lsls	r3, r3, #3
 801bc4c:	4413      	add	r3, r2
 801bc4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bc52:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801bc56:	f7e4 fcc1 	bl	80005dc <__aeabi_dmul>
 801bc5a:	4602      	mov	r2, r0
 801bc5c:	460b      	mov	r3, r1
 801bc5e:	4610      	mov	r0, r2
 801bc60:	4619      	mov	r1, r3
 801bc62:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bc66:	3306      	adds	r3, #6
 801bc68:	00db      	lsls	r3, r3, #3
 801bc6a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bc6e:	18d4      	adds	r4, r2, r3
 801bc70:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801bc74:	f7e4 fafc 	bl	8000270 <__adddf3>
 801bc78:	4602      	mov	r2, r0
 801bc7a:	460b      	mov	r3, r1
 801bc7c:	e9c4 2300 	strd	r2, r3, [r4]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801bc80:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bc84:	3301      	adds	r3, #1
 801bc86:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bc8a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bc8e:	2b01      	cmp	r3, #1
 801bc90:	dd90      	ble.n	801bbb4 <UTMeanCovSqrt_C2vgLQ4W+0x6dc>
    }

    rotate_LZ7ctbe0(Sy[8], temp, &c[2], &s[2], &Sy[8]);
 801bc92:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bc96:	3340      	adds	r3, #64	; 0x40
 801bc98:	ed93 7b00 	vldr	d7, [r3]
 801bc9c:	f107 0318 	add.w	r3, r7, #24
 801bca0:	ed93 6b00 	vldr	d6, [r3]
 801bca4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bca8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 801bcac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bcb0:	f103 0110 	add.w	r1, r3, #16
 801bcb4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bcb8:	3310      	adds	r3, #16
 801bcba:	4618      	mov	r0, r3
 801bcbc:	eeb0 1a46 	vmov.f32	s2, s12
 801bcc0:	eef0 1a66 	vmov.f32	s3, s13
 801bcc4:	eeb0 0a47 	vmov.f32	s0, s14
 801bcc8:	eef0 0a67 	vmov.f32	s1, s15
 801bccc:	f003 ff0c 	bl	801fae8 <rotate_LZ7ctbe0>
    kk = 0;
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801bcd6:	2300      	movs	r3, #0
 801bcd8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bcdc:	e03d      	b.n	801bd5a <UTMeanCovSqrt_C2vgLQ4W+0x882>
      Sy_0[kk] = Sy[iAcol];
 801bcde:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bce2:	00db      	lsls	r3, r3, #3
 801bce4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bce8:	4413      	add	r3, r2
 801bcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcee:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801bcf2:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 801bcf6:	00c9      	lsls	r1, r1, #3
 801bcf8:	4401      	add	r1, r0
 801bcfa:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 801bcfe:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bd02:	3303      	adds	r3, #3
 801bd04:	00db      	lsls	r3, r3, #3
 801bd06:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bd0a:	4413      	add	r3, r2
 801bd0c:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801bd10:	1c51      	adds	r1, r2, #1
 801bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd16:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801bd1a:	00c9      	lsls	r1, r1, #3
 801bd1c:	4401      	add	r1, r0
 801bd1e:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 801bd22:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bd26:	3306      	adds	r3, #6
 801bd28:	00db      	lsls	r3, r3, #3
 801bd2a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bd2e:	4413      	add	r3, r2
 801bd30:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801bd34:	1c91      	adds	r1, r2, #2
 801bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd3a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801bd3e:	00c9      	lsls	r1, r1, #3
 801bd40:	4401      	add	r1, r0
 801bd42:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 801bd46:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bd4a:	3303      	adds	r3, #3
 801bd4c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801bd50:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bd54:	3301      	adds	r3, #1
 801bd56:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bd5a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bd5e:	2b02      	cmp	r3, #2
 801bd60:	ddbd      	ble.n	801bcde <UTMeanCovSqrt_C2vgLQ4W+0x806>
    }

    for (kk = 0; kk < 9; kk++) {
 801bd62:	2300      	movs	r3, #0
 801bd64:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801bd68:	e01a      	b.n	801bda0 <UTMeanCovSqrt_C2vgLQ4W+0x8c8>
      Sy[kk] = signOOM * Sy_0[kk];
 801bd6a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801bd6e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bd72:	00db      	lsls	r3, r3, #3
 801bd74:	4413      	add	r3, r2
 801bd76:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bd7a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bd7e:	00db      	lsls	r3, r3, #3
 801bd80:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bd84:	18d4      	adds	r4, r2, r3
 801bd86:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801bd8a:	f7e4 fc27 	bl	80005dc <__aeabi_dmul>
 801bd8e:	4602      	mov	r2, r0
 801bd90:	460b      	mov	r3, r1
 801bd92:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 801bd96:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bd9a:	3301      	adds	r3, #1
 801bd9c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801bda0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bda4:	2b08      	cmp	r3, #8
 801bda6:	dde0      	ble.n	801bd6a <UTMeanCovSqrt_C2vgLQ4W+0x892>
 801bda8:	f000 bf6e 	b.w	801cc88 <UTMeanCovSqrt_C2vgLQ4W+0x17b0>
    }
  } else {
    boolean_T errorCondition;
    boolean_T guard1 = false;
 801bdac:	2300      	movs	r3, #0
 801bdae:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801bdb2:	2300      	movs	r3, #0
 801bdb4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bdb8:	e011      	b.n	801bdde <UTMeanCovSqrt_C2vgLQ4W+0x906>
      Sy[iAcol + 1] = 0.0;
 801bdba:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bdbe:	3301      	adds	r3, #1
 801bdc0:	00db      	lsls	r3, r3, #3
 801bdc2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bdc6:	18d1      	adds	r1, r2, r3
 801bdc8:	f04f 0200 	mov.w	r2, #0
 801bdcc:	f04f 0300 	mov.w	r3, #0
 801bdd0:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801bdd4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bdd8:	3301      	adds	r3, #1
 801bdda:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bdde:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bde2:	2b01      	cmp	r3, #1
 801bde4:	dde9      	ble.n	801bdba <UTMeanCovSqrt_C2vgLQ4W+0x8e2>
    }

    Sy[5] = 0.0;
 801bde6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bdea:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801bdee:	f04f 0200 	mov.w	r2, #0
 801bdf2:	f04f 0300 	mov.w	r3, #0
 801bdf6:	e9c1 2300 	strd	r2, r3, [r1]
    errorCondition = (Sy[0] == 0.0);
 801bdfa:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bdfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801be02:	2301      	movs	r3, #1
 801be04:	461c      	mov	r4, r3
 801be06:	f04f 0200 	mov.w	r2, #0
 801be0a:	f04f 0300 	mov.w	r3, #0
 801be0e:	f7e4 fe4d 	bl	8000aac <__aeabi_dcmpeq>
 801be12:	4603      	mov	r3, r0
 801be14:	2b00      	cmp	r3, #0
 801be16:	d101      	bne.n	801be1c <UTMeanCovSqrt_C2vgLQ4W+0x944>
 801be18:	2300      	movs	r3, #0
 801be1a:	461c      	mov	r4, r3
 801be1c:	b2e3      	uxtb	r3, r4
 801be1e:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if (!errorCondition) {
 801be22:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801be26:	2b00      	cmp	r3, #0
 801be28:	d114      	bne.n	801be54 <UTMeanCovSqrt_C2vgLQ4W+0x97c>
      errorCondition = (Sy[4] == 0.0);
 801be2a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801be2e:	3320      	adds	r3, #32
 801be30:	e9d3 0100 	ldrd	r0, r1, [r3]
 801be34:	2301      	movs	r3, #1
 801be36:	461c      	mov	r4, r3
 801be38:	f04f 0200 	mov.w	r2, #0
 801be3c:	f04f 0300 	mov.w	r3, #0
 801be40:	f7e4 fe34 	bl	8000aac <__aeabi_dcmpeq>
 801be44:	4603      	mov	r3, r0
 801be46:	2b00      	cmp	r3, #0
 801be48:	d101      	bne.n	801be4e <UTMeanCovSqrt_C2vgLQ4W+0x976>
 801be4a:	2300      	movs	r3, #0
 801be4c:	461c      	mov	r4, r3
 801be4e:	b2e3      	uxtb	r3, r4
 801be50:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    if (!errorCondition) {
 801be54:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801be58:	2b00      	cmp	r3, #0
 801be5a:	d114      	bne.n	801be86 <UTMeanCovSqrt_C2vgLQ4W+0x9ae>
      errorCondition = (Sy[8] == 0.0);
 801be5c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801be60:	3340      	adds	r3, #64	; 0x40
 801be62:	e9d3 0100 	ldrd	r0, r1, [r3]
 801be66:	2301      	movs	r3, #1
 801be68:	461c      	mov	r4, r3
 801be6a:	f04f 0200 	mov.w	r2, #0
 801be6e:	f04f 0300 	mov.w	r3, #0
 801be72:	f7e4 fe1b 	bl	8000aac <__aeabi_dcmpeq>
 801be76:	4603      	mov	r3, r0
 801be78:	2b00      	cmp	r3, #0
 801be7a:	d101      	bne.n	801be80 <UTMeanCovSqrt_C2vgLQ4W+0x9a8>
 801be7c:	2300      	movs	r3, #0
 801be7e:	461c      	mov	r4, r3
 801be80:	b2e3      	uxtb	r3, r4
 801be82:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    guard1 = false;
 801be86:	2300      	movs	r3, #0
 801be88:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    if (errorCondition) {
 801be8c:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801be90:	2b00      	cmp	r3, #0
 801be92:	d003      	beq.n	801be9c <UTMeanCovSqrt_C2vgLQ4W+0x9c4>
      guard1 = true;
 801be94:	2301      	movs	r3, #1
 801be96:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 801be9a:	e394      	b.n	801c5c6 <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
    } else {
      x[2] = b_t;
 801be9c:	f107 0120 	add.w	r1, r7, #32
 801bea0:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801bea4:	e9c1 2304 	strd	r2, r3, [r1, #16]
      x[0] = scale / Sy[0];
 801bea8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801beac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beb0:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 801beb4:	f7e4 fcbc 	bl	8000830 <__aeabi_ddiv>
 801beb8:	4602      	mov	r2, r0
 801beba:	460b      	mov	r3, r1
 801bebc:	f107 0120 	add.w	r1, r7, #32
 801bec0:	e9c1 2300 	strd	r2, r3, [r1]
      x[1] = (absxk - x[0] * Sy[3]) / Sy[4];
 801bec4:	f107 0320 	add.w	r3, r7, #32
 801bec8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801becc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bed0:	3318      	adds	r3, #24
 801bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bed6:	f7e4 fb81 	bl	80005dc <__aeabi_dmul>
 801beda:	4602      	mov	r2, r0
 801bedc:	460b      	mov	r3, r1
 801bede:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801bee2:	f7e4 f9c3 	bl	800026c <__aeabi_dsub>
 801bee6:	4602      	mov	r2, r0
 801bee8:	460b      	mov	r3, r1
 801beea:	4610      	mov	r0, r2
 801beec:	4619      	mov	r1, r3
 801beee:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bef2:	3320      	adds	r3, #32
 801bef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bef8:	f7e4 fc9a 	bl	8000830 <__aeabi_ddiv>
 801befc:	4602      	mov	r2, r0
 801befe:	460b      	mov	r3, r1
 801bf00:	f107 0120 	add.w	r1, r7, #32
 801bf04:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = b_t;
 801bf08:	f107 0118 	add.w	r1, r7, #24
 801bf0c:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801bf10:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 801bf14:	2300      	movs	r3, #0
 801bf16:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801bf1a:	e027      	b.n	801bf6c <UTMeanCovSqrt_C2vgLQ4W+0xa94>
        temp -= Sy[kk + 6] * x[kk];
 801bf1c:	f107 0318 	add.w	r3, r7, #24
 801bf20:	e9d3 4500 	ldrd	r4, r5, [r3]
 801bf24:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bf28:	3306      	adds	r3, #6
 801bf2a:	00db      	lsls	r3, r3, #3
 801bf2c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bf30:	4413      	add	r3, r2
 801bf32:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bf36:	f107 0220 	add.w	r2, r7, #32
 801bf3a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bf3e:	00db      	lsls	r3, r3, #3
 801bf40:	4413      	add	r3, r2
 801bf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf46:	f7e4 fb49 	bl	80005dc <__aeabi_dmul>
 801bf4a:	4602      	mov	r2, r0
 801bf4c:	460b      	mov	r3, r1
 801bf4e:	4620      	mov	r0, r4
 801bf50:	4629      	mov	r1, r5
 801bf52:	f7e4 f98b 	bl	800026c <__aeabi_dsub>
 801bf56:	4602      	mov	r2, r0
 801bf58:	460b      	mov	r3, r1
 801bf5a:	f107 0118 	add.w	r1, r7, #24
 801bf5e:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 801bf62:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bf66:	3301      	adds	r3, #1
 801bf68:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801bf6c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bf70:	2b01      	cmp	r3, #1
 801bf72:	ddd3      	ble.n	801bf1c <UTMeanCovSqrt_C2vgLQ4W+0xa44>
      }

      x[2] = temp / Sy[8];
 801bf74:	f107 0318 	add.w	r3, r7, #24
 801bf78:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bf7c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bf80:	3340      	adds	r3, #64	; 0x40
 801bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf86:	f7e4 fc53 	bl	8000830 <__aeabi_ddiv>
 801bf8a:	4602      	mov	r2, r0
 801bf8c:	460b      	mov	r3, r1
 801bf8e:	f107 0120 	add.w	r1, r7, #32
 801bf92:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 801bf96:	f04f 0200 	mov.w	r2, #0
 801bf9a:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 801bf9e:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = fabs(x[0]);
 801bfa2:	f107 0320 	add.w	r3, r7, #32
 801bfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfaa:	4611      	mov	r1, r2
 801bfac:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 801bfb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bfb4:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > 3.3121686421112381E-170) {
 801bfb8:	f04f 0200 	mov.w	r2, #0
 801bfbc:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 801bfc0:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801bfc4:	f7e4 fd9a 	bl	8000afc <__aeabi_dcmpgt>
 801bfc8:	4603      	mov	r3, r0
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d00b      	beq.n	801bfe6 <UTMeanCovSqrt_C2vgLQ4W+0xb0e>
        temp = 1.0;
 801bfce:	f107 0118 	add.w	r1, r7, #24
 801bfd2:	f04f 0200 	mov.w	r2, #0
 801bfd6:	4b85      	ldr	r3, [pc, #532]	; (801c1ec <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801bfd8:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 801bfdc:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801bfe0:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 801bfe4:	e017      	b.n	801c016 <UTMeanCovSqrt_C2vgLQ4W+0xb3e>
      } else {
        b_t = absxk / 3.3121686421112381E-170;
 801bfe6:	f04f 0200 	mov.w	r2, #0
 801bfea:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 801bfee:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801bff2:	f7e4 fc1d 	bl	8000830 <__aeabi_ddiv>
 801bff6:	4602      	mov	r2, r0
 801bff8:	460b      	mov	r3, r1
 801bffa:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = b_t * b_t;
 801bffe:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c002:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 801c006:	f7e4 fae9 	bl	80005dc <__aeabi_dmul>
 801c00a:	4602      	mov	r2, r0
 801c00c:	460b      	mov	r3, r1
 801c00e:	f107 0118 	add.w	r1, r7, #24
 801c012:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[1]);
 801c016:	f107 0320 	add.w	r3, r7, #32
 801c01a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801c01e:	4611      	mov	r1, r2
 801c020:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 801c024:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c028:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 801c02c:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801c030:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801c034:	f7e4 fd62 	bl	8000afc <__aeabi_dcmpgt>
 801c038:	4603      	mov	r3, r0
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d02d      	beq.n	801c09a <UTMeanCovSqrt_C2vgLQ4W+0xbc2>
        b_t = scale / absxk;
 801c03e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c042:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 801c046:	f7e4 fbf3 	bl	8000830 <__aeabi_ddiv>
 801c04a:	4602      	mov	r2, r0
 801c04c:	460b      	mov	r3, r1
 801c04e:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 801c052:	f107 0318 	add.w	r3, r7, #24
 801c056:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c05a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c05e:	f7e4 fabd 	bl	80005dc <__aeabi_dmul>
 801c062:	4602      	mov	r2, r0
 801c064:	460b      	mov	r3, r1
 801c066:	4610      	mov	r0, r2
 801c068:	4619      	mov	r1, r3
 801c06a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c06e:	f7e4 fab5 	bl	80005dc <__aeabi_dmul>
 801c072:	4602      	mov	r2, r0
 801c074:	460b      	mov	r3, r1
 801c076:	4610      	mov	r0, r2
 801c078:	4619      	mov	r1, r3
 801c07a:	f04f 0200 	mov.w	r2, #0
 801c07e:	4b5b      	ldr	r3, [pc, #364]	; (801c1ec <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801c080:	f7e4 f8f6 	bl	8000270 <__adddf3>
 801c084:	4602      	mov	r2, r0
 801c086:	460b      	mov	r3, r1
 801c088:	f107 0118 	add.w	r1, r7, #24
 801c08c:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 801c090:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c094:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 801c098:	e01f      	b.n	801c0da <UTMeanCovSqrt_C2vgLQ4W+0xc02>
      } else {
        b_t = absxk / scale;
 801c09a:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801c09e:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801c0a2:	f7e4 fbc5 	bl	8000830 <__aeabi_ddiv>
 801c0a6:	4602      	mov	r2, r0
 801c0a8:	460b      	mov	r3, r1
 801c0aa:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 801c0ae:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c0b2:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 801c0b6:	f7e4 fa91 	bl	80005dc <__aeabi_dmul>
 801c0ba:	4602      	mov	r2, r0
 801c0bc:	460b      	mov	r3, r1
 801c0be:	4610      	mov	r0, r2
 801c0c0:	4619      	mov	r1, r3
 801c0c2:	f107 0318 	add.w	r3, r7, #24
 801c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0ca:	f7e4 f8d1 	bl	8000270 <__adddf3>
 801c0ce:	4602      	mov	r2, r0
 801c0d0:	460b      	mov	r3, r1
 801c0d2:	f107 0118 	add.w	r1, r7, #24
 801c0d6:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[2]);
 801c0da:	f107 0320 	add.w	r3, r7, #32
 801c0de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801c0e2:	4611      	mov	r1, r2
 801c0e4:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 801c0e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c0ec:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 801c0f0:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801c0f4:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801c0f8:	f7e4 fd00 	bl	8000afc <__aeabi_dcmpgt>
 801c0fc:	4603      	mov	r3, r0
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d02d      	beq.n	801c15e <UTMeanCovSqrt_C2vgLQ4W+0xc86>
        b_t = scale / absxk;
 801c102:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c106:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 801c10a:	f7e4 fb91 	bl	8000830 <__aeabi_ddiv>
 801c10e:	4602      	mov	r2, r0
 801c110:	460b      	mov	r3, r1
 801c112:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 801c116:	f107 0318 	add.w	r3, r7, #24
 801c11a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c11e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c122:	f7e4 fa5b 	bl	80005dc <__aeabi_dmul>
 801c126:	4602      	mov	r2, r0
 801c128:	460b      	mov	r3, r1
 801c12a:	4610      	mov	r0, r2
 801c12c:	4619      	mov	r1, r3
 801c12e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c132:	f7e4 fa53 	bl	80005dc <__aeabi_dmul>
 801c136:	4602      	mov	r2, r0
 801c138:	460b      	mov	r3, r1
 801c13a:	4610      	mov	r0, r2
 801c13c:	4619      	mov	r1, r3
 801c13e:	f04f 0200 	mov.w	r2, #0
 801c142:	4b2a      	ldr	r3, [pc, #168]	; (801c1ec <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801c144:	f7e4 f894 	bl	8000270 <__adddf3>
 801c148:	4602      	mov	r2, r0
 801c14a:	460b      	mov	r3, r1
 801c14c:	f107 0118 	add.w	r1, r7, #24
 801c150:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 801c154:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c158:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 801c15c:	e01f      	b.n	801c19e <UTMeanCovSqrt_C2vgLQ4W+0xcc6>
      } else {
        b_t = absxk / scale;
 801c15e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801c162:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801c166:	f7e4 fb63 	bl	8000830 <__aeabi_ddiv>
 801c16a:	4602      	mov	r2, r0
 801c16c:	460b      	mov	r3, r1
 801c16e:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 801c172:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c176:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 801c17a:	f7e4 fa2f 	bl	80005dc <__aeabi_dmul>
 801c17e:	4602      	mov	r2, r0
 801c180:	460b      	mov	r3, r1
 801c182:	4610      	mov	r0, r2
 801c184:	4619      	mov	r1, r3
 801c186:	f107 0318 	add.w	r3, r7, #24
 801c18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c18e:	f7e4 f86f 	bl	8000270 <__adddf3>
 801c192:	4602      	mov	r2, r0
 801c194:	460b      	mov	r3, r1
 801c196:	f107 0118 	add.w	r1, r7, #24
 801c19a:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 801c19e:	f107 0318 	add.w	r3, r7, #24
 801c1a2:	ed93 7b00 	vldr	d7, [r3]
 801c1a6:	eeb0 0a47 	vmov.f32	s0, s14
 801c1aa:	eef0 0a67 	vmov.f32	s1, s15
 801c1ae:	f012 fca3 	bl	802eaf8 <sqrt>
 801c1b2:	ec51 0b10 	vmov	r0, r1, d0
 801c1b6:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801c1ba:	f7e4 fa0f 	bl	80005dc <__aeabi_dmul>
 801c1be:	4602      	mov	r2, r0
 801c1c0:	460b      	mov	r3, r1
 801c1c2:	f107 0118 	add.w	r1, r7, #24
 801c1c6:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 801c1ca:	f107 0318 	add.w	r3, r7, #24
 801c1ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c1d2:	f04f 0200 	mov.w	r2, #0
 801c1d6:	4b05      	ldr	r3, [pc, #20]	; (801c1ec <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801c1d8:	f7e4 fc86 	bl	8000ae8 <__aeabi_dcmpge>
 801c1dc:	4603      	mov	r3, r0
 801c1de:	2b00      	cmp	r3, #0
 801c1e0:	d006      	beq.n	801c1f0 <UTMeanCovSqrt_C2vgLQ4W+0xd18>
        guard1 = true;
 801c1e2:	2301      	movs	r3, #1
 801c1e4:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 801c1e8:	e1ed      	b.n	801c5c6 <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
 801c1ea:	bf00      	nop
 801c1ec:	3ff00000 	.word	0x3ff00000
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), x[2], &c[2], &s[2], &temp);
 801c1f0:	f107 0318 	add.w	r3, r7, #24
 801c1f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c1f8:	f107 0318 	add.w	r3, r7, #24
 801c1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c200:	f7e4 f9ec 	bl	80005dc <__aeabi_dmul>
 801c204:	4602      	mov	r2, r0
 801c206:	460b      	mov	r3, r1
 801c208:	f04f 0000 	mov.w	r0, #0
 801c20c:	49b4      	ldr	r1, [pc, #720]	; (801c4e0 <UTMeanCovSqrt_C2vgLQ4W+0x1008>)
 801c20e:	f7e4 f82d 	bl	800026c <__aeabi_dsub>
 801c212:	4602      	mov	r2, r0
 801c214:	460b      	mov	r3, r1
 801c216:	ec43 2b17 	vmov	d7, r2, r3
 801c21a:	eeb0 0a47 	vmov.f32	s0, s14
 801c21e:	eef0 0a67 	vmov.f32	s1, s15
 801c222:	f012 fc69 	bl	802eaf8 <sqrt>
 801c226:	eeb0 6a40 	vmov.f32	s12, s0
 801c22a:	eef0 6a60 	vmov.f32	s13, s1
 801c22e:	f107 0320 	add.w	r3, r7, #32
 801c232:	ed93 7b04 	vldr	d7, [r3, #16]
 801c236:	f107 0218 	add.w	r2, r7, #24
 801c23a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c23e:	f103 0110 	add.w	r1, r3, #16
 801c242:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c246:	3310      	adds	r3, #16
 801c248:	4618      	mov	r0, r3
 801c24a:	eeb0 1a47 	vmov.f32	s2, s14
 801c24e:	eef0 1a67 	vmov.f32	s3, s15
 801c252:	eeb0 0a46 	vmov.f32	s0, s12
 801c256:	eef0 0a66 	vmov.f32	s1, s13
 801c25a:	f003 fc45 	bl	801fae8 <rotate_LZ7ctbe0>
        x[2] = 0.0;
 801c25e:	f107 0120 	add.w	r1, r7, #32
 801c262:	f04f 0200 	mov.w	r2, #0
 801c266:	f04f 0300 	mov.w	r3, #0
 801c26a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, x[1], &c[1], &s[1], &temp);
 801c26e:	f107 0318 	add.w	r3, r7, #24
 801c272:	ed93 7b00 	vldr	d7, [r3]
 801c276:	f107 0320 	add.w	r3, r7, #32
 801c27a:	ed93 6b02 	vldr	d6, [r3, #8]
 801c27e:	f107 0218 	add.w	r2, r7, #24
 801c282:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c286:	f103 0108 	add.w	r1, r3, #8
 801c28a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c28e:	3308      	adds	r3, #8
 801c290:	4618      	mov	r0, r3
 801c292:	eeb0 1a46 	vmov.f32	s2, s12
 801c296:	eef0 1a66 	vmov.f32	s3, s13
 801c29a:	eeb0 0a47 	vmov.f32	s0, s14
 801c29e:	eef0 0a67 	vmov.f32	s1, s15
 801c2a2:	f003 fc21 	bl	801fae8 <rotate_LZ7ctbe0>
        x[1] = 0.0;
 801c2a6:	f107 0120 	add.w	r1, r7, #32
 801c2aa:	f04f 0200 	mov.w	r2, #0
 801c2ae:	f04f 0300 	mov.w	r3, #0
 801c2b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, x[0], &c[0], &s[0], &temp);
 801c2b6:	f107 0318 	add.w	r3, r7, #24
 801c2ba:	ed93 7b00 	vldr	d7, [r3]
 801c2be:	f107 0320 	add.w	r3, r7, #32
 801c2c2:	ed93 6b00 	vldr	d6, [r3]
 801c2c6:	f107 0218 	add.w	r2, r7, #24
 801c2ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c2ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c2d2:	4618      	mov	r0, r3
 801c2d4:	eeb0 1a46 	vmov.f32	s2, s12
 801c2d8:	eef0 1a66 	vmov.f32	s3, s13
 801c2dc:	eeb0 0a47 	vmov.f32	s0, s14
 801c2e0:	eef0 0a67 	vmov.f32	s1, s15
 801c2e4:	f003 fc00 	bl	801fae8 <rotate_LZ7ctbe0>
        x[0] = 0.0;
 801c2e8:	f107 0120 	add.w	r1, r7, #32
 801c2ec:	f04f 0200 	mov.w	r2, #0
 801c2f0:	f04f 0300 	mov.w	r3, #0
 801c2f4:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 801c2f8:	2300      	movs	r3, #0
 801c2fa:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c2fe:	e072      	b.n	801c3e6 <UTMeanCovSqrt_C2vgLQ4W+0xf0e>
          temp = s[iAcol] * Sy[iAcol];
 801c300:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c304:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c308:	00db      	lsls	r3, r3, #3
 801c30a:	4413      	add	r3, r2
 801c30c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c310:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c314:	00db      	lsls	r3, r3, #3
 801c316:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c31a:	4413      	add	r3, r2
 801c31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c320:	f7e4 f95c 	bl	80005dc <__aeabi_dmul>
 801c324:	4602      	mov	r2, r0
 801c326:	460b      	mov	r3, r1
 801c328:	f107 0118 	add.w	r1, r7, #24
 801c32c:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[iAcol] = c[iAcol] * Sy[iAcol] - s[iAcol] * x[0];
 801c330:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c334:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c338:	00db      	lsls	r3, r3, #3
 801c33a:	4413      	add	r3, r2
 801c33c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c340:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c344:	00db      	lsls	r3, r3, #3
 801c346:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c34a:	4413      	add	r3, r2
 801c34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c350:	f7e4 f944 	bl	80005dc <__aeabi_dmul>
 801c354:	4602      	mov	r2, r0
 801c356:	460b      	mov	r3, r1
 801c358:	4690      	mov	r8, r2
 801c35a:	4699      	mov	r9, r3
 801c35c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c360:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c364:	00db      	lsls	r3, r3, #3
 801c366:	4413      	add	r3, r2
 801c368:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c36c:	f107 0320 	add.w	r3, r7, #32
 801c370:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c374:	f7e4 f932 	bl	80005dc <__aeabi_dmul>
 801c378:	4602      	mov	r2, r0
 801c37a:	460b      	mov	r3, r1
 801c37c:	4610      	mov	r0, r2
 801c37e:	4619      	mov	r1, r3
 801c380:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c384:	00db      	lsls	r3, r3, #3
 801c386:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c38a:	18d4      	adds	r4, r2, r3
 801c38c:	4602      	mov	r2, r0
 801c38e:	460b      	mov	r3, r1
 801c390:	4640      	mov	r0, r8
 801c392:	4649      	mov	r1, r9
 801c394:	f7e3 ff6a 	bl	800026c <__aeabi_dsub>
 801c398:	4602      	mov	r2, r0
 801c39a:	460b      	mov	r3, r1
 801c39c:	e9c4 2300 	strd	r2, r3, [r4]
          x[0] = c[iAcol] * x[0] + temp;
 801c3a0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c3a4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c3a8:	00db      	lsls	r3, r3, #3
 801c3aa:	4413      	add	r3, r2
 801c3ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c3b0:	f107 0320 	add.w	r3, r7, #32
 801c3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3b8:	f7e4 f910 	bl	80005dc <__aeabi_dmul>
 801c3bc:	4602      	mov	r2, r0
 801c3be:	460b      	mov	r3, r1
 801c3c0:	4610      	mov	r0, r2
 801c3c2:	4619      	mov	r1, r3
 801c3c4:	f107 0318 	add.w	r3, r7, #24
 801c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3cc:	f7e3 ff50 	bl	8000270 <__adddf3>
 801c3d0:	4602      	mov	r2, r0
 801c3d2:	460b      	mov	r3, r1
 801c3d4:	f107 0120 	add.w	r1, r7, #32
 801c3d8:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 801c3dc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c3e0:	3b01      	subs	r3, #1
 801c3e2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c3e6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	da88      	bge.n	801c300 <UTMeanCovSqrt_C2vgLQ4W+0xe28>
        }

        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 801c3ee:	2301      	movs	r3, #1
 801c3f0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c3f4:	e06c      	b.n	801c4d0 <UTMeanCovSqrt_C2vgLQ4W+0xff8>
          absxk = Sy[iAcol + 3];
 801c3f6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c3fa:	3303      	adds	r3, #3
 801c3fc:	00db      	lsls	r3, r3, #3
 801c3fe:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c402:	4413      	add	r3, r2
 801c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c408:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 3] = absxk * c[iAcol] - s[iAcol] * x[1];
 801c40c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c410:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c414:	00db      	lsls	r3, r3, #3
 801c416:	4413      	add	r3, r2
 801c418:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c41c:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c420:	f7e4 f8dc 	bl	80005dc <__aeabi_dmul>
 801c424:	4602      	mov	r2, r0
 801c426:	460b      	mov	r3, r1
 801c428:	4690      	mov	r8, r2
 801c42a:	4699      	mov	r9, r3
 801c42c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c430:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c434:	00db      	lsls	r3, r3, #3
 801c436:	4413      	add	r3, r2
 801c438:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c43c:	f107 0320 	add.w	r3, r7, #32
 801c440:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801c444:	f7e4 f8ca 	bl	80005dc <__aeabi_dmul>
 801c448:	4602      	mov	r2, r0
 801c44a:	460b      	mov	r3, r1
 801c44c:	4610      	mov	r0, r2
 801c44e:	4619      	mov	r1, r3
 801c450:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c454:	3303      	adds	r3, #3
 801c456:	00db      	lsls	r3, r3, #3
 801c458:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c45c:	18d4      	adds	r4, r2, r3
 801c45e:	4602      	mov	r2, r0
 801c460:	460b      	mov	r3, r1
 801c462:	4640      	mov	r0, r8
 801c464:	4649      	mov	r1, r9
 801c466:	f7e3 ff01 	bl	800026c <__aeabi_dsub>
 801c46a:	4602      	mov	r2, r0
 801c46c:	460b      	mov	r3, r1
 801c46e:	e9c4 2300 	strd	r2, r3, [r4]
          x[1] = c[iAcol] * x[1] + absxk * s[iAcol];
 801c472:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c476:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c47a:	00db      	lsls	r3, r3, #3
 801c47c:	4413      	add	r3, r2
 801c47e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c482:	f107 0320 	add.w	r3, r7, #32
 801c486:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801c48a:	f7e4 f8a7 	bl	80005dc <__aeabi_dmul>
 801c48e:	4602      	mov	r2, r0
 801c490:	460b      	mov	r3, r1
 801c492:	4614      	mov	r4, r2
 801c494:	461d      	mov	r5, r3
 801c496:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c49a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c49e:	00db      	lsls	r3, r3, #3
 801c4a0:	4413      	add	r3, r2
 801c4a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c4a6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c4aa:	f7e4 f897 	bl	80005dc <__aeabi_dmul>
 801c4ae:	4602      	mov	r2, r0
 801c4b0:	460b      	mov	r3, r1
 801c4b2:	4620      	mov	r0, r4
 801c4b4:	4629      	mov	r1, r5
 801c4b6:	f7e3 fedb 	bl	8000270 <__adddf3>
 801c4ba:	4602      	mov	r2, r0
 801c4bc:	460b      	mov	r3, r1
 801c4be:	f107 0120 	add.w	r1, r7, #32
 801c4c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 801c4c6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c4ca:	3b01      	subs	r3, #1
 801c4cc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c4d0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	da8e      	bge.n	801c3f6 <UTMeanCovSqrt_C2vgLQ4W+0xf1e>
        }

        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 801c4d8:	2302      	movs	r3, #2
 801c4da:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c4de:	e06e      	b.n	801c5be <UTMeanCovSqrt_C2vgLQ4W+0x10e6>
 801c4e0:	3ff00000 	.word	0x3ff00000
          absxk = Sy[iAcol + 6];
 801c4e4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c4e8:	3306      	adds	r3, #6
 801c4ea:	00db      	lsls	r3, r3, #3
 801c4ec:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c4f0:	4413      	add	r3, r2
 801c4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4f6:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 6] = absxk * c[iAcol] - s[iAcol] * x[2];
 801c4fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c4fe:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c502:	00db      	lsls	r3, r3, #3
 801c504:	4413      	add	r3, r2
 801c506:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c50a:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c50e:	f7e4 f865 	bl	80005dc <__aeabi_dmul>
 801c512:	4602      	mov	r2, r0
 801c514:	460b      	mov	r3, r1
 801c516:	4690      	mov	r8, r2
 801c518:	4699      	mov	r9, r3
 801c51a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c51e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c522:	00db      	lsls	r3, r3, #3
 801c524:	4413      	add	r3, r2
 801c526:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c52a:	f107 0320 	add.w	r3, r7, #32
 801c52e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801c532:	f7e4 f853 	bl	80005dc <__aeabi_dmul>
 801c536:	4602      	mov	r2, r0
 801c538:	460b      	mov	r3, r1
 801c53a:	4610      	mov	r0, r2
 801c53c:	4619      	mov	r1, r3
 801c53e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c542:	3306      	adds	r3, #6
 801c544:	00db      	lsls	r3, r3, #3
 801c546:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c54a:	18d4      	adds	r4, r2, r3
 801c54c:	4602      	mov	r2, r0
 801c54e:	460b      	mov	r3, r1
 801c550:	4640      	mov	r0, r8
 801c552:	4649      	mov	r1, r9
 801c554:	f7e3 fe8a 	bl	800026c <__aeabi_dsub>
 801c558:	4602      	mov	r2, r0
 801c55a:	460b      	mov	r3, r1
 801c55c:	e9c4 2300 	strd	r2, r3, [r4]
          x[2] = c[iAcol] * x[2] + absxk * s[iAcol];
 801c560:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c564:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c568:	00db      	lsls	r3, r3, #3
 801c56a:	4413      	add	r3, r2
 801c56c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c570:	f107 0320 	add.w	r3, r7, #32
 801c574:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801c578:	f7e4 f830 	bl	80005dc <__aeabi_dmul>
 801c57c:	4602      	mov	r2, r0
 801c57e:	460b      	mov	r3, r1
 801c580:	4614      	mov	r4, r2
 801c582:	461d      	mov	r5, r3
 801c584:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c588:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c58c:	00db      	lsls	r3, r3, #3
 801c58e:	4413      	add	r3, r2
 801c590:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c594:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c598:	f7e4 f820 	bl	80005dc <__aeabi_dmul>
 801c59c:	4602      	mov	r2, r0
 801c59e:	460b      	mov	r3, r1
 801c5a0:	4620      	mov	r0, r4
 801c5a2:	4629      	mov	r1, r5
 801c5a4:	f7e3 fe64 	bl	8000270 <__adddf3>
 801c5a8:	4602      	mov	r2, r0
 801c5aa:	460b      	mov	r3, r1
 801c5ac:	f107 0120 	add.w	r1, r7, #32
 801c5b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 801c5b4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c5b8:	3b01      	subs	r3, #1
 801c5ba:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c5be:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	da8e      	bge.n	801c4e4 <UTMeanCovSqrt_C2vgLQ4W+0x100c>
        }
      }
    }

    if (guard1) {
 801c5c6:	f897 328a 	ldrb.w	r3, [r7, #650]	; 0x28a
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	f000 82f0 	beq.w	801cbb0 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
      boolean_T exitg2;
      kk = 0;
 801c5d0:	2300      	movs	r3, #0
 801c5d2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801c5d6:	2300      	movs	r3, #0
 801c5d8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c5dc:	e0d3      	b.n	801c786 <UTMeanCovSqrt_C2vgLQ4W+0x12ae>
        i_1 = 0;
 801c5de:	2300      	movs	r3, #0
 801c5e0:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801c5e4:	2300      	movs	r3, #0
 801c5e6:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801c5ea:	e0bd      	b.n	801c768 <UTMeanCovSqrt_C2vgLQ4W+0x1290>
          Sy_tmp = i_1 + iAcol;
 801c5ec:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 801c5f0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c5f4:	4413      	add	r3, r2
 801c5f6:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy_0[Sy_tmp] = 0.0;
 801c5fa:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c5fe:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c602:	00db      	lsls	r3, r3, #3
 801c604:	18d1      	adds	r1, r2, r3
 801c606:	f04f 0200 	mov.w	r2, #0
 801c60a:	f04f 0300 	mov.w	r3, #0
 801c60e:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk] * Sy[i_1];
 801c612:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c616:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c61a:	00db      	lsls	r3, r3, #3
 801c61c:	4413      	add	r3, r2
 801c61e:	e9d3 4500 	ldrd	r4, r5, [r3]
 801c622:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c626:	00db      	lsls	r3, r3, #3
 801c628:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c62c:	4413      	add	r3, r2
 801c62e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c632:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801c636:	00db      	lsls	r3, r3, #3
 801c638:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c63c:	4413      	add	r3, r2
 801c63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c642:	f7e3 ffcb 	bl	80005dc <__aeabi_dmul>
 801c646:	4602      	mov	r2, r0
 801c648:	460b      	mov	r3, r1
 801c64a:	4620      	mov	r0, r4
 801c64c:	4629      	mov	r1, r5
 801c64e:	f7e3 fe0f 	bl	8000270 <__adddf3>
 801c652:	4602      	mov	r2, r0
 801c654:	460b      	mov	r3, r1
 801c656:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801c65a:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801c65e:	00c9      	lsls	r1, r1, #3
 801c660:	4401      	add	r1, r0
 801c662:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 1] * Sy[i_1 + 1];
 801c666:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c66a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c66e:	00db      	lsls	r3, r3, #3
 801c670:	4413      	add	r3, r2
 801c672:	e9d3 4500 	ldrd	r4, r5, [r3]
 801c676:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c67a:	3301      	adds	r3, #1
 801c67c:	00db      	lsls	r3, r3, #3
 801c67e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c682:	4413      	add	r3, r2
 801c684:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c688:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801c68c:	3301      	adds	r3, #1
 801c68e:	00db      	lsls	r3, r3, #3
 801c690:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c694:	4413      	add	r3, r2
 801c696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c69a:	f7e3 ff9f 	bl	80005dc <__aeabi_dmul>
 801c69e:	4602      	mov	r2, r0
 801c6a0:	460b      	mov	r3, r1
 801c6a2:	4620      	mov	r0, r4
 801c6a4:	4629      	mov	r1, r5
 801c6a6:	f7e3 fde3 	bl	8000270 <__adddf3>
 801c6aa:	4602      	mov	r2, r0
 801c6ac:	460b      	mov	r3, r1
 801c6ae:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801c6b2:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801c6b6:	00c9      	lsls	r1, r1, #3
 801c6b8:	4401      	add	r1, r0
 801c6ba:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 2] * Sy[i_1 + 2];
 801c6be:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c6c2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c6c6:	00db      	lsls	r3, r3, #3
 801c6c8:	4413      	add	r3, r2
 801c6ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 801c6ce:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c6d2:	3302      	adds	r3, #2
 801c6d4:	00db      	lsls	r3, r3, #3
 801c6d6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c6da:	4413      	add	r3, r2
 801c6dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c6e0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801c6e4:	3302      	adds	r3, #2
 801c6e6:	00db      	lsls	r3, r3, #3
 801c6e8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c6ec:	4413      	add	r3, r2
 801c6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6f2:	f7e3 ff73 	bl	80005dc <__aeabi_dmul>
 801c6f6:	4602      	mov	r2, r0
 801c6f8:	460b      	mov	r3, r1
 801c6fa:	4620      	mov	r0, r4
 801c6fc:	4629      	mov	r1, r5
 801c6fe:	f7e3 fdb7 	bl	8000270 <__adddf3>
 801c702:	4602      	mov	r2, r0
 801c704:	460b      	mov	r3, r1
 801c706:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801c70a:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801c70e:	00c9      	lsls	r1, r1, #3
 801c710:	4401      	add	r1, r0
 801c712:	e9c1 2300 	strd	r2, r3, [r1]
          Y1_0[i + kk] = Y1[i] * Y1[iAcol];
 801c716:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801c71a:	00db      	lsls	r3, r3, #3
 801c71c:	1d3a      	adds	r2, r7, #4
 801c71e:	6812      	ldr	r2, [r2, #0]
 801c720:	4413      	add	r3, r2
 801c722:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c726:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c72a:	00db      	lsls	r3, r3, #3
 801c72c:	1d3a      	adds	r2, r7, #4
 801c72e:	6812      	ldr	r2, [r2, #0]
 801c730:	4413      	add	r3, r2
 801c732:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c736:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 801c73a:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 801c73e:	442c      	add	r4, r5
 801c740:	f7e3 ff4c 	bl	80005dc <__aeabi_dmul>
 801c744:	4602      	mov	r2, r0
 801c746:	460b      	mov	r3, r1
 801c748:	f107 0068 	add.w	r0, r7, #104	; 0x68
 801c74c:	00e1      	lsls	r1, r4, #3
 801c74e:	4401      	add	r1, r0
 801c750:	e9c1 2300 	strd	r2, r3, [r1]
          i_1 += 3;
 801c754:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801c758:	3303      	adds	r3, #3
 801c75a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801c75e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801c762:	3301      	adds	r3, #1
 801c764:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801c768:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801c76c:	2b02      	cmp	r3, #2
 801c76e:	f77f af3d 	ble.w	801c5ec <UTMeanCovSqrt_C2vgLQ4W+0x1114>
        }

        kk += 3;
 801c772:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c776:	3303      	adds	r3, #3
 801c778:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801c77c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c780:	3301      	adds	r3, #1
 801c782:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c786:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c78a:	2b02      	cmp	r3, #2
 801c78c:	f77f af27 	ble.w	801c5de <UTMeanCovSqrt_C2vgLQ4W+0x1106>
      }

      errorCondition = true;
 801c790:	2301      	movs	r3, #1
 801c792:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      for (iAcol = 0; iAcol < 9; iAcol++) {
 801c796:	2300      	movs	r3, #0
 801c798:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c79c:	e049      	b.n	801c832 <UTMeanCovSqrt_C2vgLQ4W+0x135a>
        temp = Sy_0[iAcol] - Y1_0[iAcol];
 801c79e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c7a2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c7a6:	00db      	lsls	r3, r3, #3
 801c7a8:	4413      	add	r3, r2
 801c7aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c7ae:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801c7b2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c7b6:	00db      	lsls	r3, r3, #3
 801c7b8:	4413      	add	r3, r2
 801c7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7be:	f7e3 fd55 	bl	800026c <__aeabi_dsub>
 801c7c2:	4602      	mov	r2, r0
 801c7c4:	460b      	mov	r3, r1
 801c7c6:	f107 0118 	add.w	r1, r7, #24
 801c7ca:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 801c7ce:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d01c      	beq.n	801c810 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
 801c7d6:	f107 0318 	add.w	r3, r7, #24
 801c7da:	ed93 7b00 	vldr	d7, [r3]
 801c7de:	eeb0 0a47 	vmov.f32	s0, s14
 801c7e2:	eef0 0a67 	vmov.f32	s1, s15
 801c7e6:	f003 fbf5 	bl	801ffd4 <rtIsInf>
 801c7ea:	4603      	mov	r3, r0
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d10c      	bne.n	801c80a <UTMeanCovSqrt_C2vgLQ4W+0x1332>
 801c7f0:	f107 0318 	add.w	r3, r7, #24
 801c7f4:	ed93 7b00 	vldr	d7, [r3]
 801c7f8:	eeb0 0a47 	vmov.f32	s0, s14
 801c7fc:	eef0 0a67 	vmov.f32	s1, s15
 801c800:	f003 fc0c 	bl	802001c <rtIsNaN>
 801c804:	4603      	mov	r3, r0
 801c806:	2b00      	cmp	r3, #0
 801c808:	d002      	beq.n	801c810 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
          errorCondition = false;
 801c80a:	2300      	movs	r3, #0
 801c80c:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
        }

        Ss[iAcol] = temp;
 801c810:	f107 0318 	add.w	r3, r7, #24
 801c814:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c818:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 801c81c:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 801c820:	00c9      	lsls	r1, r1, #3
 801c822:	4401      	add	r1, r0
 801c824:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 801c828:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c82c:	3301      	adds	r3, #1
 801c82e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c832:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c836:	2b08      	cmp	r3, #8
 801c838:	ddb1      	ble.n	801c79e <UTMeanCovSqrt_C2vgLQ4W+0x12c6>
      }

      if (errorCondition) {
 801c83a:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d00a      	beq.n	801c858 <UTMeanCovSqrt_C2vgLQ4W+0x1380>
        svd_u3DvUgOe(Ss, Y1_0, s, Sy_0);
 801c842:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c84a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801c84e:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 801c852:	f003 fc35 	bl	80200c0 <svd_u3DvUgOe>
 801c856:	e02c      	b.n	801c8b2 <UTMeanCovSqrt_C2vgLQ4W+0x13da>
      } else {
        s[0] = (rtNaN);
 801c858:	4bbc      	ldr	r3, [pc, #752]	; (801cb4c <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801c85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c85e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c862:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 801c866:	4bb9      	ldr	r3, [pc, #740]	; (801cb4c <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801c868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c86c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c870:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 801c874:	4bb5      	ldr	r3, [pc, #724]	; (801cb4c <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801c876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c87a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c87e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (kk = 0; kk < 9; kk++) {
 801c882:	2300      	movs	r3, #0
 801c884:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801c888:	e00f      	b.n	801c8aa <UTMeanCovSqrt_C2vgLQ4W+0x13d2>
          Sy_0[kk] = (rtNaN);
 801c88a:	4bb0      	ldr	r3, [pc, #704]	; (801cb4c <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801c88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c890:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801c894:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 801c898:	00c9      	lsls	r1, r1, #3
 801c89a:	4401      	add	r1, r0
 801c89c:	e9c1 2300 	strd	r2, r3, [r1]
        for (kk = 0; kk < 9; kk++) {
 801c8a0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c8a4:	3301      	adds	r3, #1
 801c8a6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801c8aa:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c8ae:	2b08      	cmp	r3, #8
 801c8b0:	ddeb      	ble.n	801c88a <UTMeanCovSqrt_C2vgLQ4W+0x13b2>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 801c8b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c8b6:	2248      	movs	r2, #72	; 0x48
 801c8b8:	2100      	movs	r1, #0
 801c8ba:	4618      	mov	r0, r3
 801c8bc:	f011 ff10 	bl	802e6e0 <memset>
      Ss[0] = s[0];
 801c8c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8c8:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 801c8cc:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 801c8d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c8d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801c8d8:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 801c8dc:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 801c8e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c8e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801c8e8:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 801c8ec:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (kk = 0; kk < 9; kk++) {
 801c8f0:	2300      	movs	r3, #0
 801c8f2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801c8f6:	e01e      	b.n	801c936 <UTMeanCovSqrt_C2vgLQ4W+0x145e>
        Ss[kk] = sqrt(Ss[kk]);
 801c8f8:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801c8fc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c900:	00db      	lsls	r3, r3, #3
 801c902:	4413      	add	r3, r2
 801c904:	ed93 7b00 	vldr	d7, [r3]
 801c908:	eeb0 0a47 	vmov.f32	s0, s14
 801c90c:	eef0 0a67 	vmov.f32	s1, s15
 801c910:	f012 f8f2 	bl	802eaf8 <sqrt>
 801c914:	eeb0 7a40 	vmov.f32	s14, s0
 801c918:	eef0 7a60 	vmov.f32	s15, s1
 801c91c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801c920:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c924:	00db      	lsls	r3, r3, #3
 801c926:	4413      	add	r3, r2
 801c928:	ed83 7b00 	vstr	d7, [r3]
      for (kk = 0; kk < 9; kk++) {
 801c92c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c930:	3301      	adds	r3, #1
 801c932:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801c936:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c93a:	2b08      	cmp	r3, #8
 801c93c:	dddc      	ble.n	801c8f8 <UTMeanCovSqrt_C2vgLQ4W+0x1420>
      }

      kk = 0;
 801c93e:	2300      	movs	r3, #0
 801c940:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801c944:	2300      	movs	r3, #0
 801c946:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c94a:	e0c0      	b.n	801cace <UTMeanCovSqrt_C2vgLQ4W+0x15f6>
        i_1 = 0;
 801c94c:	2300      	movs	r3, #0
 801c94e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801c952:	2300      	movs	r3, #0
 801c954:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801c958:	e0aa      	b.n	801cab0 <UTMeanCovSqrt_C2vgLQ4W+0x15d8>
          Sy_tmp = i_1 + iAcol;
 801c95a:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 801c95e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c962:	4413      	add	r3, r2
 801c964:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy[Sy_tmp] = 0.0;
 801c968:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c96c:	00db      	lsls	r3, r3, #3
 801c96e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c972:	18d1      	adds	r1, r2, r3
 801c974:	f04f 0200 	mov.w	r2, #0
 801c978:	f04f 0300 	mov.w	r3, #0
 801c97c:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[Sy_tmp] += Ss[kk] * Sy_0[i];
 801c980:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c984:	00db      	lsls	r3, r3, #3
 801c986:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c98a:	4413      	add	r3, r2
 801c98c:	e9d3 4500 	ldrd	r4, r5, [r3]
 801c990:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801c994:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c998:	00db      	lsls	r3, r3, #3
 801c99a:	4413      	add	r3, r2
 801c99c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c9a0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c9a4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801c9a8:	00db      	lsls	r3, r3, #3
 801c9aa:	4413      	add	r3, r2
 801c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9b0:	f7e3 fe14 	bl	80005dc <__aeabi_dmul>
 801c9b4:	4602      	mov	r2, r0
 801c9b6:	460b      	mov	r3, r1
 801c9b8:	4610      	mov	r0, r2
 801c9ba:	4619      	mov	r1, r3
 801c9bc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c9c0:	00db      	lsls	r3, r3, #3
 801c9c2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c9c6:	18d6      	adds	r6, r2, r3
 801c9c8:	4602      	mov	r2, r0
 801c9ca:	460b      	mov	r3, r1
 801c9cc:	4620      	mov	r0, r4
 801c9ce:	4629      	mov	r1, r5
 801c9d0:	f7e3 fc4e 	bl	8000270 <__adddf3>
 801c9d4:	4602      	mov	r2, r0
 801c9d6:	460b      	mov	r3, r1
 801c9d8:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 1] * Sy_0[i + 3];
 801c9dc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c9e0:	00db      	lsls	r3, r3, #3
 801c9e2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c9e6:	4413      	add	r3, r2
 801c9e8:	e9d3 4500 	ldrd	r4, r5, [r3]
 801c9ec:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c9f0:	3301      	adds	r3, #1
 801c9f2:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801c9f6:	00db      	lsls	r3, r3, #3
 801c9f8:	4413      	add	r3, r2
 801c9fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c9fe:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801ca02:	3303      	adds	r3, #3
 801ca04:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801ca08:	00db      	lsls	r3, r3, #3
 801ca0a:	4413      	add	r3, r2
 801ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca10:	f7e3 fde4 	bl	80005dc <__aeabi_dmul>
 801ca14:	4602      	mov	r2, r0
 801ca16:	460b      	mov	r3, r1
 801ca18:	4610      	mov	r0, r2
 801ca1a:	4619      	mov	r1, r3
 801ca1c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801ca20:	00db      	lsls	r3, r3, #3
 801ca22:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801ca26:	18d6      	adds	r6, r2, r3
 801ca28:	4602      	mov	r2, r0
 801ca2a:	460b      	mov	r3, r1
 801ca2c:	4620      	mov	r0, r4
 801ca2e:	4629      	mov	r1, r5
 801ca30:	f7e3 fc1e 	bl	8000270 <__adddf3>
 801ca34:	4602      	mov	r2, r0
 801ca36:	460b      	mov	r3, r1
 801ca38:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 2] * Sy_0[i + 6];
 801ca3c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801ca40:	00db      	lsls	r3, r3, #3
 801ca42:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801ca46:	4413      	add	r3, r2
 801ca48:	e9d3 4500 	ldrd	r4, r5, [r3]
 801ca4c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ca50:	3302      	adds	r3, #2
 801ca52:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801ca56:	00db      	lsls	r3, r3, #3
 801ca58:	4413      	add	r3, r2
 801ca5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ca5e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801ca62:	3306      	adds	r3, #6
 801ca64:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801ca68:	00db      	lsls	r3, r3, #3
 801ca6a:	4413      	add	r3, r2
 801ca6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca70:	f7e3 fdb4 	bl	80005dc <__aeabi_dmul>
 801ca74:	4602      	mov	r2, r0
 801ca76:	460b      	mov	r3, r1
 801ca78:	4610      	mov	r0, r2
 801ca7a:	4619      	mov	r1, r3
 801ca7c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801ca80:	00db      	lsls	r3, r3, #3
 801ca82:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801ca86:	18d6      	adds	r6, r2, r3
 801ca88:	4602      	mov	r2, r0
 801ca8a:	460b      	mov	r3, r1
 801ca8c:	4620      	mov	r0, r4
 801ca8e:	4629      	mov	r1, r5
 801ca90:	f7e3 fbee 	bl	8000270 <__adddf3>
 801ca94:	4602      	mov	r2, r0
 801ca96:	460b      	mov	r3, r1
 801ca98:	e9c6 2300 	strd	r2, r3, [r6]
          i_1 += 3;
 801ca9c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801caa0:	3303      	adds	r3, #3
 801caa2:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801caa6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801caaa:	3301      	adds	r3, #1
 801caac:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801cab0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801cab4:	2b02      	cmp	r3, #2
 801cab6:	f77f af50 	ble.w	801c95a <UTMeanCovSqrt_C2vgLQ4W+0x1482>
        }

        kk += 3;
 801caba:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cabe:	3303      	adds	r3, #3
 801cac0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801cac4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cac8:	3301      	adds	r3, #1
 801caca:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801cace:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cad2:	2b02      	cmp	r3, #2
 801cad4:	f77f af3a 	ble.w	801c94c <UTMeanCovSqrt_C2vgLQ4W+0x1474>
      }

      errorCondition = true;
 801cad8:	2301      	movs	r3, #1
 801cada:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      kk = 0;
 801cade:	2300      	movs	r3, #0
 801cae0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      exitg2 = false;
 801cae4:	2300      	movs	r3, #0
 801cae6:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 801caea:	e044      	b.n	801cb76 <UTMeanCovSqrt_C2vgLQ4W+0x169e>
        int32_T exitg1;
        iAcol = kk + 1;
 801caec:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801caf0:	3301      	adds	r3, #1
 801caf2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
        do {
          exitg1 = 0;
 801caf6:	2300      	movs	r3, #0
 801caf8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          if (iAcol + 1 < 4) {
 801cafc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cb00:	2b02      	cmp	r3, #2
 801cb02:	dc25      	bgt.n	801cb50 <UTMeanCovSqrt_C2vgLQ4W+0x1678>
            if (!(Sy[3 * kk + iAcol] == 0.0)) {
 801cb04:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801cb08:	4613      	mov	r3, r2
 801cb0a:	005b      	lsls	r3, r3, #1
 801cb0c:	441a      	add	r2, r3
 801cb0e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cb12:	4413      	add	r3, r2
 801cb14:	00db      	lsls	r3, r3, #3
 801cb16:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cb1a:	4413      	add	r3, r2
 801cb1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cb20:	f04f 0200 	mov.w	r2, #0
 801cb24:	f04f 0300 	mov.w	r3, #0
 801cb28:	f7e3 ffc0 	bl	8000aac <__aeabi_dcmpeq>
 801cb2c:	4603      	mov	r3, r0
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d106      	bne.n	801cb40 <UTMeanCovSqrt_C2vgLQ4W+0x1668>
              errorCondition = false;
 801cb32:	2300      	movs	r3, #0
 801cb34:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
              exitg1 = 1;
 801cb38:	2301      	movs	r3, #1
 801cb3a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 801cb3e:	e00f      	b.n	801cb60 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
            } else {
              iAcol++;
 801cb40:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cb44:	3301      	adds	r3, #1
 801cb46:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801cb4a:	e009      	b.n	801cb60 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
 801cb4c:	2001ee68 	.word	0x2001ee68
            }
          } else {
            kk++;
 801cb50:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cb54:	3301      	adds	r3, #1
 801cb56:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            exitg1 = 2;
 801cb5a:	2302      	movs	r3, #2
 801cb5c:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          }
        } while (exitg1 == 0);
 801cb60:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	d0c6      	beq.n	801caf6 <UTMeanCovSqrt_C2vgLQ4W+0x161e>

        if (exitg1 == 1) {
 801cb68:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801cb6c:	2b01      	cmp	r3, #1
 801cb6e:	d102      	bne.n	801cb76 <UTMeanCovSqrt_C2vgLQ4W+0x169e>
          exitg2 = true;
 801cb70:	2301      	movs	r3, #1
 801cb72:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 801cb76:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 801cb7a:	2b00      	cmp	r3, #0
 801cb7c:	d103      	bne.n	801cb86 <UTMeanCovSqrt_C2vgLQ4W+0x16ae>
 801cb7e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cb82:	2b02      	cmp	r3, #2
 801cb84:	ddb2      	ble.n	801caec <UTMeanCovSqrt_C2vgLQ4W+0x1614>
        }
      }

      if (!errorCondition) {
 801cb86:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d110      	bne.n	801cbb0 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
        memcpy(&Sy_0[0], &Sy[0], 9U * sizeof(real_T));
 801cb8e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cb92:	2248      	movs	r2, #72	; 0x48
 801cb94:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 801cb98:	4618      	mov	r0, r3
 801cb9a:	f011 fd93 	bl	802e6c4 <memcpy>
        qr_5a2P8Gh6(Sy_0, Y1_0, Sy);
 801cb9e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801cba2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cba6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cbaa:	4618      	mov	r0, r3
 801cbac:	f000 fec4 	bl	801d938 <qr_5a2P8Gh6>
      }
    }

    kk = 0;
 801cbb0:	2300      	movs	r3, #0
 801cbb2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801cbb6:	2300      	movs	r3, #0
 801cbb8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801cbbc:	e03d      	b.n	801cc3a <UTMeanCovSqrt_C2vgLQ4W+0x1762>
      Sy_0[kk] = Sy[iAcol];
 801cbbe:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cbc2:	00db      	lsls	r3, r3, #3
 801cbc4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cbc8:	4413      	add	r3, r2
 801cbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbce:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801cbd2:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 801cbd6:	00c9      	lsls	r1, r1, #3
 801cbd8:	4401      	add	r1, r0
 801cbda:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 801cbde:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cbe2:	3303      	adds	r3, #3
 801cbe4:	00db      	lsls	r3, r3, #3
 801cbe6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cbea:	4413      	add	r3, r2
 801cbec:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801cbf0:	1c51      	adds	r1, r2, #1
 801cbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbf6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801cbfa:	00c9      	lsls	r1, r1, #3
 801cbfc:	4401      	add	r1, r0
 801cbfe:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 801cc02:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cc06:	3306      	adds	r3, #6
 801cc08:	00db      	lsls	r3, r3, #3
 801cc0a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cc0e:	4413      	add	r3, r2
 801cc10:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801cc14:	1c91      	adds	r1, r2, #2
 801cc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc1a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801cc1e:	00c9      	lsls	r1, r1, #3
 801cc20:	4401      	add	r1, r0
 801cc22:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 801cc26:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cc2a:	3303      	adds	r3, #3
 801cc2c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801cc30:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cc34:	3301      	adds	r3, #1
 801cc36:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801cc3a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cc3e:	2b02      	cmp	r3, #2
 801cc40:	ddbd      	ble.n	801cbbe <UTMeanCovSqrt_C2vgLQ4W+0x16e6>
    }

    for (kk = 0; kk < 9; kk++) {
 801cc42:	2300      	movs	r3, #0
 801cc44:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801cc48:	e01a      	b.n	801cc80 <UTMeanCovSqrt_C2vgLQ4W+0x17a8>
      Sy[kk] = signOOM * Sy_0[kk];
 801cc4a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801cc4e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cc52:	00db      	lsls	r3, r3, #3
 801cc54:	4413      	add	r3, r2
 801cc56:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cc5a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cc5e:	00db      	lsls	r3, r3, #3
 801cc60:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cc64:	18d4      	adds	r4, r2, r3
 801cc66:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801cc6a:	f7e3 fcb7 	bl	80005dc <__aeabi_dmul>
 801cc6e:	4602      	mov	r2, r0
 801cc70:	460b      	mov	r3, r1
 801cc72:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 801cc76:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cc7a:	3301      	adds	r3, #1
 801cc7c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801cc80:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cc84:	2b08      	cmp	r3, #8
 801cc86:	dde0      	ble.n	801cc4a <UTMeanCovSqrt_C2vgLQ4W+0x1772>
    }
  }

  iAcol = 0;
 801cc88:	2300      	movs	r3, #0
 801cc8a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801cc8e:	2300      	movs	r3, #0
 801cc90:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801cc94:	e057      	b.n	801cd46 <UTMeanCovSqrt_C2vgLQ4W+0x186e>
    X2[iAcol] -= X1[0];
 801cc96:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cc9a:	00db      	lsls	r3, r3, #3
 801cc9c:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cca0:	4413      	add	r3, r2
 801cca2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cca6:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801ccaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccae:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801ccb2:	00e4      	lsls	r4, r4, #3
 801ccb4:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 801ccb8:	442c      	add	r4, r5
 801ccba:	f7e3 fad7 	bl	800026c <__aeabi_dsub>
 801ccbe:	4602      	mov	r2, r0
 801ccc0:	460b      	mov	r3, r1
 801ccc2:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 1] -= X1[1];
 801ccc6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ccca:	3301      	adds	r3, #1
 801cccc:	00db      	lsls	r3, r3, #3
 801ccce:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801ccd2:	4413      	add	r3, r2
 801ccd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ccd8:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801ccdc:	3308      	adds	r3, #8
 801ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cce2:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801cce6:	3401      	adds	r4, #1
 801cce8:	00e4      	lsls	r4, r4, #3
 801ccea:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 801ccee:	442c      	add	r4, r5
 801ccf0:	f7e3 fabc 	bl	800026c <__aeabi_dsub>
 801ccf4:	4602      	mov	r2, r0
 801ccf6:	460b      	mov	r3, r1
 801ccf8:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 2] -= X1[2];
 801ccfc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cd00:	3302      	adds	r3, #2
 801cd02:	00db      	lsls	r3, r3, #3
 801cd04:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cd08:	4413      	add	r3, r2
 801cd0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cd0e:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801cd12:	3310      	adds	r3, #16
 801cd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd18:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801cd1c:	3402      	adds	r4, #2
 801cd1e:	00e4      	lsls	r4, r4, #3
 801cd20:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 801cd24:	442c      	add	r4, r5
 801cd26:	f7e3 faa1 	bl	800026c <__aeabi_dsub>
 801cd2a:	4602      	mov	r2, r0
 801cd2c:	460b      	mov	r3, r1
 801cd2e:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 801cd32:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cd36:	3303      	adds	r3, #3
 801cd38:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801cd3c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cd40:	3301      	adds	r3, #1
 801cd42:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801cd46:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cd4a:	2b05      	cmp	r3, #5
 801cd4c:	dda3      	ble.n	801cc96 <UTMeanCovSqrt_C2vgLQ4W+0x17be>
  }

  signOOM = covWeights_1 * OOM;
 801cd4e:	f107 0308 	add.w	r3, r7, #8
 801cd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd56:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 801cd5a:	f7e3 fc3f 	bl	80005dc <__aeabi_dmul>
 801cd5e:	4602      	mov	r2, r0
 801cd60:	460b      	mov	r3, r1
 801cd62:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  for (kk = 0; kk < 3; kk++) {
 801cd66:	2300      	movs	r3, #0
 801cd68:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801cd6c:	e071      	b.n	801ce52 <UTMeanCovSqrt_C2vgLQ4W+0x197a>
    iAcol = 0;
 801cd6e:	2300      	movs	r3, #0
 801cd70:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 801cd74:	2300      	movs	r3, #0
 801cd76:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 801cd7a:	e061      	b.n	801ce40 <UTMeanCovSqrt_C2vgLQ4W+0x1968>
      Sy_tmp = iAcol + kk;
 801cd7c:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801cd80:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cd84:	4413      	add	r3, r2
 801cd86:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
      Ss[Sy_tmp] = 0.0;
 801cd8a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801cd8e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801cd92:	00db      	lsls	r3, r3, #3
 801cd94:	18d1      	adds	r1, r2, r3
 801cd96:	f04f 0200 	mov.w	r2, #0
 801cd9a:	f04f 0300 	mov.w	r3, #0
 801cd9e:	e9c1 2300 	strd	r2, r3, [r1]
      i = 0;
 801cda2:	2300      	movs	r3, #0
 801cda4:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 801cda8:	2300      	movs	r3, #0
 801cdaa:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 801cdae:	e039      	b.n	801ce24 <UTMeanCovSqrt_C2vgLQ4W+0x194c>
        Ss[Sy_tmp] += X2[i + kk] * Y2[i + i_1];
 801cdb0:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801cdb4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801cdb8:	00db      	lsls	r3, r3, #3
 801cdba:	4413      	add	r3, r2
 801cdbc:	e9d3 4500 	ldrd	r4, r5, [r3]
 801cdc0:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 801cdc4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cdc8:	4413      	add	r3, r2
 801cdca:	00db      	lsls	r3, r3, #3
 801cdcc:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cdd0:	4413      	add	r3, r2
 801cdd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cdd6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 801cdda:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801cdde:	4413      	add	r3, r2
 801cde0:	00db      	lsls	r3, r3, #3
 801cde2:	463a      	mov	r2, r7
 801cde4:	6812      	ldr	r2, [r2, #0]
 801cde6:	4413      	add	r3, r2
 801cde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdec:	f7e3 fbf6 	bl	80005dc <__aeabi_dmul>
 801cdf0:	4602      	mov	r2, r0
 801cdf2:	460b      	mov	r3, r1
 801cdf4:	4620      	mov	r0, r4
 801cdf6:	4629      	mov	r1, r5
 801cdf8:	f7e3 fa3a 	bl	8000270 <__adddf3>
 801cdfc:	4602      	mov	r2, r0
 801cdfe:	460b      	mov	r3, r1
 801ce00:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 801ce04:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801ce08:	00c9      	lsls	r1, r1, #3
 801ce0a:	4401      	add	r1, r0
 801ce0c:	e9c1 2300 	strd	r2, r3, [r1]
        i += 3;
 801ce10:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801ce14:	3303      	adds	r3, #3
 801ce16:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 801ce1a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 801ce1e:	3301      	adds	r3, #1
 801ce20:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 801ce24:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 801ce28:	2b05      	cmp	r3, #5
 801ce2a:	ddc1      	ble.n	801cdb0 <UTMeanCovSqrt_C2vgLQ4W+0x18d8>
      }

      iAcol += 3;
 801ce2c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ce30:	3303      	adds	r3, #3
 801ce32:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 801ce36:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801ce3a:	3301      	adds	r3, #1
 801ce3c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 801ce40:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801ce44:	2b02      	cmp	r3, #2
 801ce46:	dd99      	ble.n	801cd7c <UTMeanCovSqrt_C2vgLQ4W+0x18a4>
  for (kk = 0; kk < 3; kk++) {
 801ce48:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ce4c:	3301      	adds	r3, #1
 801ce4e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801ce52:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ce56:	2b02      	cmp	r3, #2
 801ce58:	dd89      	ble.n	801cd6e <UTMeanCovSqrt_C2vgLQ4W+0x1896>
    }
  }

  for (kk = 0; kk < 9; kk++) {
 801ce5a:	2300      	movs	r3, #0
 801ce5c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801ce60:	e01a      	b.n	801ce98 <UTMeanCovSqrt_C2vgLQ4W+0x19c0>
    Pxy[kk] = Ss[kk] * signOOM;
 801ce62:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801ce66:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ce6a:	00db      	lsls	r3, r3, #3
 801ce6c:	4413      	add	r3, r2
 801ce6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ce72:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ce76:	00db      	lsls	r3, r3, #3
 801ce78:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801ce7c:	18d4      	adds	r4, r2, r3
 801ce7e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801ce82:	f7e3 fbab 	bl	80005dc <__aeabi_dmul>
 801ce86:	4602      	mov	r2, r0
 801ce88:	460b      	mov	r3, r1
 801ce8a:	e9c4 2300 	strd	r2, r3, [r4]
  for (kk = 0; kk < 9; kk++) {
 801ce8e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ce92:	3301      	adds	r3, #1
 801ce94:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801ce98:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ce9c:	2b08      	cmp	r3, #8
 801ce9e:	dde0      	ble.n	801ce62 <UTMeanCovSqrt_C2vgLQ4W+0x198a>
  }
}
 801cea0:	bf00      	nop
 801cea2:	bf00      	nop
 801cea4:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 801cea8:	46bd      	mov	sp, r7
 801ceaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ceae:	bf00      	nop

0801ceb0 <UTMeanCovSqrt_C6QfB9Td>:
#include "rotate_LZ7ctbe0.h"

void UTMeanCovSqrt_C6QfB9Td(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1, real_T Y2[6], const real_T X1[3], real_T
  X2[18], real_T *Ymean, real_T *Sy, real_T Pxy[3])
{
 801ceb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ceb4:	ed2d 8b02 	vpush	{d8}
 801ceb8:	b0ac      	sub	sp, #176	; 0xb0
 801ceba:	af00      	add	r7, sp, #0
 801cebc:	6378      	str	r0, [r7, #52]	; 0x34
 801cebe:	6339      	str	r1, [r7, #48]	; 0x30
 801cec0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 801cec4:	ed87 1b08 	vstr	d1, [r7, #32]
 801cec8:	61fa      	str	r2, [r7, #28]
 801ceca:	61bb      	str	r3, [r7, #24]
  real_T signOOM;
  real_T xnorm;
  int32_T b_k;
  int32_T i;
  int32_T knt;
  *Ymean = Y1 * meanWeights[0];
 801cecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cece:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ced2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801ced6:	f7e3 fb81 	bl	80005dc <__aeabi_dmul>
 801ceda:	4602      	mov	r2, r0
 801cedc:	460b      	mov	r3, r1
 801cede:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801cee2:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 801cee6:	2300      	movs	r3, #0
 801cee8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801ceec:	e021      	b.n	801cf32 <UTMeanCovSqrt_C6QfB9Td+0x82>
    *Ymean += Y2[knt] * meanWeights[1];
 801ceee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801cef2:	e9d3 4500 	ldrd	r4, r5, [r3]
 801cef6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cefa:	00db      	lsls	r3, r3, #3
 801cefc:	69fa      	ldr	r2, [r7, #28]
 801cefe:	4413      	add	r3, r2
 801cf00:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cf04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf06:	3308      	adds	r3, #8
 801cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf0c:	f7e3 fb66 	bl	80005dc <__aeabi_dmul>
 801cf10:	4602      	mov	r2, r0
 801cf12:	460b      	mov	r3, r1
 801cf14:	4620      	mov	r0, r4
 801cf16:	4629      	mov	r1, r5
 801cf18:	f7e3 f9aa 	bl	8000270 <__adddf3>
 801cf1c:	4602      	mov	r2, r0
 801cf1e:	460b      	mov	r3, r1
 801cf20:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801cf24:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 801cf28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cf2c:	3301      	adds	r3, #1
 801cf2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801cf32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cf36:	2b05      	cmp	r3, #5
 801cf38:	ddd9      	ble.n	801ceee <UTMeanCovSqrt_C6QfB9Td+0x3e>
  }

  *Ymean *= OOM;
 801cf3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801cf3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cf42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801cf46:	f7e3 fb49 	bl	80005dc <__aeabi_dmul>
 801cf4a:	4602      	mov	r2, r0
 801cf4c:	460b      	mov	r3, r1
 801cf4e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801cf52:	e9c1 2300 	strd	r2, r3, [r1]
  Y1 -= *Ymean;
 801cf56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801cf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf5e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801cf62:	f7e3 f983 	bl	800026c <__aeabi_dsub>
 801cf66:	4602      	mov	r2, r0
 801cf68:	460b      	mov	r3, r1
 801cf6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (knt = 0; knt < 6; knt++) {
 801cf6e:	2300      	movs	r3, #0
 801cf70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801cf74:	e01c      	b.n	801cfb0 <UTMeanCovSqrt_C6QfB9Td+0x100>
    Y2[knt] -= *Ymean;
 801cf76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cf7a:	00db      	lsls	r3, r3, #3
 801cf7c:	69fa      	ldr	r2, [r7, #28]
 801cf7e:	4413      	add	r3, r2
 801cf80:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cf84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801cf88:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cf8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cf90:	00db      	lsls	r3, r3, #3
 801cf92:	69fa      	ldr	r2, [r7, #28]
 801cf94:	18d4      	adds	r4, r2, r3
 801cf96:	4642      	mov	r2, r8
 801cf98:	464b      	mov	r3, r9
 801cf9a:	f7e3 f967 	bl	800026c <__aeabi_dsub>
 801cf9e:	4602      	mov	r2, r0
 801cfa0:	460b      	mov	r3, r1
 801cfa2:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 6; knt++) {
 801cfa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cfaa:	3301      	adds	r3, #1
 801cfac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801cfb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cfb4:	2b05      	cmp	r3, #5
 801cfb6:	ddde      	ble.n	801cf76 <UTMeanCovSqrt_C6QfB9Td+0xc6>
  }

  if (rtIsNaN(OOM)) {
 801cfb8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 801cfbc:	f003 f82e 	bl	802001c <rtIsNaN>
 801cfc0:	4603      	mov	r3, r0
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d004      	beq.n	801cfd0 <UTMeanCovSqrt_C6QfB9Td+0x120>
    signOOM = OOM;
 801cfc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801cfca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 801cfce:	e025      	b.n	801d01c <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else if (OOM < 0.0) {
 801cfd0:	f04f 0200 	mov.w	r2, #0
 801cfd4:	f04f 0300 	mov.w	r3, #0
 801cfd8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801cfdc:	f7e3 fd70 	bl	8000ac0 <__aeabi_dcmplt>
 801cfe0:	4603      	mov	r3, r0
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d005      	beq.n	801cff2 <UTMeanCovSqrt_C6QfB9Td+0x142>
    signOOM = -1.0;
 801cfe6:	f04f 0200 	mov.w	r2, #0
 801cfea:	4bc3      	ldr	r3, [pc, #780]	; (801d2f8 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 801cfec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 801cff0:	e014      	b.n	801d01c <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else {
    signOOM = (OOM > 0.0);
 801cff2:	f04f 0200 	mov.w	r2, #0
 801cff6:	f04f 0300 	mov.w	r3, #0
 801cffa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801cffe:	f7e3 fd7d 	bl	8000afc <__aeabi_dcmpgt>
 801d002:	4603      	mov	r3, r0
 801d004:	2b00      	cmp	r3, #0
 801d006:	d003      	beq.n	801d010 <UTMeanCovSqrt_C6QfB9Td+0x160>
 801d008:	f04f 0200 	mov.w	r2, #0
 801d00c:	4bbb      	ldr	r3, [pc, #748]	; (801d2fc <UTMeanCovSqrt_C6QfB9Td+0x44c>)
 801d00e:	e003      	b.n	801d018 <UTMeanCovSqrt_C6QfB9Td+0x168>
 801d010:	f04f 0200 	mov.w	r2, #0
 801d014:	f04f 0300 	mov.w	r3, #0
 801d018:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  covWeights_0 = signOOM * covWeights[0];
 801d01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d01e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d022:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801d026:	f7e3 fad9 	bl	80005dc <__aeabi_dmul>
 801d02a:	4602      	mov	r2, r0
 801d02c:	460b      	mov	r3, r1
 801d02e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  covWeights_1 = signOOM * covWeights[1];
 801d032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d034:	3308      	adds	r3, #8
 801d036:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d03a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801d03e:	f7e3 facd 	bl	80005dc <__aeabi_dmul>
 801d042:	4602      	mov	r2, r0
 801d044:	460b      	mov	r3, r1
 801d046:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  OOM *= signOOM;
 801d04a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801d04e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801d052:	f7e3 fac3 	bl	80005dc <__aeabi_dmul>
 801d056:	4602      	mov	r2, r0
 801d058:	460b      	mov	r3, r1
 801d05a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  signOOM = sqrt(covWeights_1);
 801d05e:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 801d062:	f011 fd49 	bl	802eaf8 <sqrt>
 801d066:	eeb0 7a40 	vmov.f32	s14, s0
 801d06a:	eef0 7a60 	vmov.f32	s15, s1
 801d06e:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  for (knt = 0; knt < 6; knt++) {
 801d072:	2300      	movs	r3, #0
 801d074:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d078:	e01a      	b.n	801d0b0 <UTMeanCovSqrt_C6QfB9Td+0x200>
    A[knt] = signOOM * Y2[knt];
 801d07a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d07e:	00db      	lsls	r3, r3, #3
 801d080:	69fa      	ldr	r2, [r7, #28]
 801d082:	4413      	add	r3, r2
 801d084:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d088:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801d08c:	f7e3 faa6 	bl	80005dc <__aeabi_dmul>
 801d090:	4602      	mov	r2, r0
 801d092:	460b      	mov	r3, r1
 801d094:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801d098:	00c9      	lsls	r1, r1, #3
 801d09a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801d09e:	4401      	add	r1, r0
 801d0a0:	3948      	subs	r1, #72	; 0x48
 801d0a2:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 801d0a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d0aa:	3301      	adds	r3, #1
 801d0ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d0b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d0b4:	2b05      	cmp	r3, #5
 801d0b6:	dde0      	ble.n	801d07a <UTMeanCovSqrt_C6QfB9Td+0x1ca>
  }

  signOOM = A[0];
 801d0b8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801d0bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  xnorm = xnrm2_7bm34mDQ(5, A, 2);
 801d0c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d0c4:	2202      	movs	r2, #2
 801d0c6:	4619      	mov	r1, r3
 801d0c8:	2005      	movs	r0, #5
 801d0ca:	f005 f975 	bl	80223b8 <xnrm2_7bm34mDQ>
 801d0ce:	eeb0 7a40 	vmov.f32	s14, s0
 801d0d2:	eef0 7a60 	vmov.f32	s15, s1
 801d0d6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  if (xnorm != 0.0) {
 801d0da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801d0de:	f04f 0200 	mov.w	r2, #0
 801d0e2:	f04f 0300 	mov.w	r3, #0
 801d0e6:	f7e3 fce1 	bl	8000aac <__aeabi_dcmpeq>
 801d0ea:	4603      	mov	r3, r0
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	f040 80e7 	bne.w	801d2c0 <UTMeanCovSqrt_C6QfB9Td+0x410>
    xnorm = rt_hypotd_snf(A[0], xnorm);
 801d0f2:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 801d0f6:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 801d0fa:	eeb0 1a46 	vmov.f32	s2, s12
 801d0fe:	eef0 1a66 	vmov.f32	s3, s13
 801d102:	eeb0 0a47 	vmov.f32	s0, s14
 801d106:	eef0 0a67 	vmov.f32	s1, s15
 801d10a:	f002 fe79 	bl	801fe00 <rt_hypotd_snf>
 801d10e:	eeb0 7a40 	vmov.f32	s14, s0
 801d112:	eef0 7a60 	vmov.f32	s15, s1
 801d116:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    if (A[0] >= 0.0) {
 801d11a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801d11e:	f04f 0200 	mov.w	r2, #0
 801d122:	f04f 0300 	mov.w	r3, #0
 801d126:	f7e3 fcdf 	bl	8000ae8 <__aeabi_dcmpge>
 801d12a:	4603      	mov	r3, r0
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	d009      	beq.n	801d144 <UTMeanCovSqrt_C6QfB9Td+0x294>
      xnorm = -xnorm;
 801d130:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d134:	613a      	str	r2, [r7, #16]
 801d136:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801d13a:	617b      	str	r3, [r7, #20]
 801d13c:	ed97 7b04 	vldr	d7, [r7, #16]
 801d140:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    }

    if (fabs(xnorm) < 1.0020841800044864E-292) {
 801d144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d148:	60ba      	str	r2, [r7, #8]
 801d14a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d14e:	60fb      	str	r3, [r7, #12]
 801d150:	f04f 0200 	mov.w	r2, #0
 801d154:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d158:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801d15c:	f7e3 fcb0 	bl	8000ac0 <__aeabi_dcmplt>
 801d160:	4603      	mov	r3, r0
 801d162:	2b00      	cmp	r3, #0
 801d164:	f000 80a8 	beq.w	801d2b8 <UTMeanCovSqrt_C6QfB9Td+0x408>
      knt = 0;
 801d168:	2300      	movs	r3, #0
 801d16a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      do {
        knt++;
 801d16e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d172:	3301      	adds	r3, #1
 801d174:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (b_k = 1; b_k < 6; b_k++) {
 801d178:	2301      	movs	r3, #1
 801d17a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d17e:	e01d      	b.n	801d1bc <UTMeanCovSqrt_C6QfB9Td+0x30c>
          A[b_k] *= 9.9792015476736E+291;
 801d180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d184:	00db      	lsls	r3, r3, #3
 801d186:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801d18a:	4413      	add	r3, r2
 801d18c:	3b48      	subs	r3, #72	; 0x48
 801d18e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d192:	f04f 0200 	mov.w	r2, #0
 801d196:	4b5a      	ldr	r3, [pc, #360]	; (801d300 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 801d198:	f7e3 fa20 	bl	80005dc <__aeabi_dmul>
 801d19c:	4602      	mov	r2, r0
 801d19e:	460b      	mov	r3, r1
 801d1a0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 801d1a4:	00c9      	lsls	r1, r1, #3
 801d1a6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801d1aa:	4401      	add	r1, r0
 801d1ac:	3948      	subs	r1, #72	; 0x48
 801d1ae:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_k = 1; b_k < 6; b_k++) {
 801d1b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d1b6:	3301      	adds	r3, #1
 801d1b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d1bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d1c0:	2b05      	cmp	r3, #5
 801d1c2:	dddd      	ble.n	801d180 <UTMeanCovSqrt_C6QfB9Td+0x2d0>
        }

        xnorm *= 9.9792015476736E+291;
 801d1c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801d1c8:	f04f 0200 	mov.w	r2, #0
 801d1cc:	4b4c      	ldr	r3, [pc, #304]	; (801d300 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 801d1ce:	f7e3 fa05 	bl	80005dc <__aeabi_dmul>
 801d1d2:	4602      	mov	r2, r0
 801d1d4:	460b      	mov	r3, r1
 801d1d6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        signOOM *= 9.9792015476736E+291;
 801d1da:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801d1de:	f04f 0200 	mov.w	r2, #0
 801d1e2:	4b47      	ldr	r3, [pc, #284]	; (801d300 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 801d1e4:	f7e3 f9fa 	bl	80005dc <__aeabi_dmul>
 801d1e8:	4602      	mov	r2, r0
 801d1ea:	460b      	mov	r3, r1
 801d1ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt < 20));
 801d1f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d1f4:	603a      	str	r2, [r7, #0]
 801d1f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d1fa:	607b      	str	r3, [r7, #4]
 801d1fc:	f04f 0200 	mov.w	r2, #0
 801d200:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d204:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d208:	f7e3 fc5a 	bl	8000ac0 <__aeabi_dcmplt>
 801d20c:	4603      	mov	r3, r0
 801d20e:	2b00      	cmp	r3, #0
 801d210:	d003      	beq.n	801d21a <UTMeanCovSqrt_C6QfB9Td+0x36a>
 801d212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d216:	2b13      	cmp	r3, #19
 801d218:	dda9      	ble.n	801d16e <UTMeanCovSqrt_C6QfB9Td+0x2be>

      xnorm = rt_hypotd_snf(signOOM, xnrm2_7bm34mDQ(5, A, 2));
 801d21a:	ed97 8b10 	vldr	d8, [r7, #64]	; 0x40
 801d21e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d222:	2202      	movs	r2, #2
 801d224:	4619      	mov	r1, r3
 801d226:	2005      	movs	r0, #5
 801d228:	f005 f8c6 	bl	80223b8 <xnrm2_7bm34mDQ>
 801d22c:	eeb0 7a40 	vmov.f32	s14, s0
 801d230:	eef0 7a60 	vmov.f32	s15, s1
 801d234:	eeb0 1a47 	vmov.f32	s2, s14
 801d238:	eef0 1a67 	vmov.f32	s3, s15
 801d23c:	eeb0 0a48 	vmov.f32	s0, s16
 801d240:	eef0 0a68 	vmov.f32	s1, s17
 801d244:	f002 fddc 	bl	801fe00 <rt_hypotd_snf>
 801d248:	eeb0 7a40 	vmov.f32	s14, s0
 801d24c:	eef0 7a60 	vmov.f32	s15, s1
 801d250:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
      if (signOOM >= 0.0) {
 801d254:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801d258:	f04f 0200 	mov.w	r2, #0
 801d25c:	f04f 0300 	mov.w	r3, #0
 801d260:	f7e3 fc42 	bl	8000ae8 <__aeabi_dcmpge>
 801d264:	4603      	mov	r3, r0
 801d266:	2b00      	cmp	r3, #0
 801d268:	d006      	beq.n	801d278 <UTMeanCovSqrt_C6QfB9Td+0x3c8>
        xnorm = -xnorm;
 801d26a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d26e:	4692      	mov	sl, r2
 801d270:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 801d274:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      }

      for (b_k = 0; b_k < knt; b_k++) {
 801d278:	2300      	movs	r3, #0
 801d27a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d27e:	e010      	b.n	801d2a2 <UTMeanCovSqrt_C6QfB9Td+0x3f2>
        xnorm *= 1.0020841800044864E-292;
 801d280:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801d284:	f04f 0200 	mov.w	r2, #0
 801d288:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d28c:	f7e3 f9a6 	bl	80005dc <__aeabi_dmul>
 801d290:	4602      	mov	r2, r0
 801d292:	460b      	mov	r3, r1
 801d294:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      for (b_k = 0; b_k < knt; b_k++) {
 801d298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d29c:	3301      	adds	r3, #1
 801d29e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d2a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801d2a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d2aa:	429a      	cmp	r2, r3
 801d2ac:	dbe8      	blt.n	801d280 <UTMeanCovSqrt_C6QfB9Td+0x3d0>
      }

      signOOM = xnorm;
 801d2ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d2b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 801d2b6:	e003      	b.n	801d2c0 <UTMeanCovSqrt_C6QfB9Td+0x410>
    } else {
      signOOM = xnorm;
 801d2b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d2bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  if (!rtIsNaN(covWeights_0)) {
 801d2c0:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 801d2c4:	eeb0 0a47 	vmov.f32	s0, s14
 801d2c8:	eef0 0a67 	vmov.f32	s1, s15
 801d2cc:	f002 fea6 	bl	802001c <rtIsNaN>
 801d2d0:	4603      	mov	r3, r0
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d12b      	bne.n	801d32e <UTMeanCovSqrt_C6QfB9Td+0x47e>
    if (covWeights_0 < 0.0) {
 801d2d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801d2da:	f04f 0200 	mov.w	r2, #0
 801d2de:	f04f 0300 	mov.w	r3, #0
 801d2e2:	f7e3 fbed 	bl	8000ac0 <__aeabi_dcmplt>
 801d2e6:	4603      	mov	r3, r0
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d00b      	beq.n	801d304 <UTMeanCovSqrt_C6QfB9Td+0x454>
      covWeights_0 = -1.0;
 801d2ec:	f04f 0200 	mov.w	r2, #0
 801d2f0:	4b01      	ldr	r3, [pc, #4]	; (801d2f8 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 801d2f2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 801d2f6:	e01a      	b.n	801d32e <UTMeanCovSqrt_C6QfB9Td+0x47e>
 801d2f8:	bff00000 	.word	0xbff00000
 801d2fc:	3ff00000 	.word	0x3ff00000
 801d300:	7c900000 	.word	0x7c900000
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 801d304:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801d308:	f04f 0200 	mov.w	r2, #0
 801d30c:	f04f 0300 	mov.w	r3, #0
 801d310:	f7e3 fbf4 	bl	8000afc <__aeabi_dcmpgt>
 801d314:	4603      	mov	r3, r0
 801d316:	2b00      	cmp	r3, #0
 801d318:	d003      	beq.n	801d322 <UTMeanCovSqrt_C6QfB9Td+0x472>
 801d31a:	f04f 0200 	mov.w	r2, #0
 801d31e:	4b99      	ldr	r3, [pc, #612]	; (801d584 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 801d320:	e003      	b.n	801d32a <UTMeanCovSqrt_C6QfB9Td+0x47a>
 801d322:	f04f 0200 	mov.w	r2, #0
 801d326:	f04f 0300 	mov.w	r3, #0
 801d32a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }
  }

  if (covWeights_0 == 1.0) {
 801d32e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801d332:	f04f 0200 	mov.w	r2, #0
 801d336:	4b93      	ldr	r3, [pc, #588]	; (801d584 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 801d338:	f7e3 fbb8 	bl	8000aac <__aeabi_dcmpeq>
 801d33c:	4603      	mov	r3, r0
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d021      	beq.n	801d386 <UTMeanCovSqrt_C6QfB9Td+0x4d6>
    rotate_LZ7ctbe0(signOOM, Y1, &signOOM, &xnorm, &covWeights_0);
 801d342:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 801d346:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d34a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d34e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d352:	4618      	mov	r0, r3
 801d354:	ed97 1b08 	vldr	d1, [r7, #32]
 801d358:	eeb0 0a47 	vmov.f32	s0, s14
 801d35c:	eef0 0a67 	vmov.f32	s1, s15
 801d360:	f002 fbc2 	bl	801fae8 <rotate_LZ7ctbe0>
    *Sy = sqrt(OOM) * covWeights_0;
 801d364:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 801d368:	f011 fbc6 	bl	802eaf8 <sqrt>
 801d36c:	ec51 0b10 	vmov	r0, r1, d0
 801d370:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801d374:	f7e3 f932 	bl	80005dc <__aeabi_dmul>
 801d378:	4602      	mov	r2, r0
 801d37a:	460b      	mov	r3, r1
 801d37c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 801d380:	e9c1 2300 	strd	r2, r3, [r1]
 801d384:	e016      	b.n	801d3b4 <UTMeanCovSqrt_C6QfB9Td+0x504>
  } else {
    cholUpdateFactor_HBMX5a5h(&signOOM, Y1);
 801d386:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d38a:	ed97 0b08 	vldr	d0, [r7, #32]
 801d38e:	4618      	mov	r0, r3
 801d390:	f000 f8fa 	bl	801d588 <cholUpdateFactor_HBMX5a5h>
    *Sy = sqrt(OOM) * signOOM;
 801d394:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 801d398:	f011 fbae 	bl	802eaf8 <sqrt>
 801d39c:	ec51 0b10 	vmov	r0, r1, d0
 801d3a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801d3a4:	f7e3 f91a 	bl	80005dc <__aeabi_dmul>
 801d3a8:	4602      	mov	r2, r0
 801d3aa:	460b      	mov	r3, r1
 801d3ac:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 801d3b0:	e9c1 2300 	strd	r2, r3, [r1]
  }

  b_k = 0;
 801d3b4:	2300      	movs	r3, #0
 801d3b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 801d3ba:	2300      	movs	r3, #0
 801d3bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d3c0:	e054      	b.n	801d46c <UTMeanCovSqrt_C6QfB9Td+0x5bc>
    X2[b_k] -= X1[0];
 801d3c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d3c6:	00db      	lsls	r3, r3, #3
 801d3c8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801d3cc:	4413      	add	r3, r2
 801d3ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d3d2:	69bb      	ldr	r3, [r7, #24]
 801d3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3d8:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 801d3dc:	00e4      	lsls	r4, r4, #3
 801d3de:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 801d3e2:	442c      	add	r4, r5
 801d3e4:	f7e2 ff42 	bl	800026c <__aeabi_dsub>
 801d3e8:	4602      	mov	r2, r0
 801d3ea:	460b      	mov	r3, r1
 801d3ec:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 1] -= X1[1];
 801d3f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d3f4:	3301      	adds	r3, #1
 801d3f6:	00db      	lsls	r3, r3, #3
 801d3f8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801d3fc:	4413      	add	r3, r2
 801d3fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d402:	69bb      	ldr	r3, [r7, #24]
 801d404:	3308      	adds	r3, #8
 801d406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d40a:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 801d40e:	3401      	adds	r4, #1
 801d410:	00e4      	lsls	r4, r4, #3
 801d412:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 801d416:	442c      	add	r4, r5
 801d418:	f7e2 ff28 	bl	800026c <__aeabi_dsub>
 801d41c:	4602      	mov	r2, r0
 801d41e:	460b      	mov	r3, r1
 801d420:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 2] -= X1[2];
 801d424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d428:	3302      	adds	r3, #2
 801d42a:	00db      	lsls	r3, r3, #3
 801d42c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801d430:	4413      	add	r3, r2
 801d432:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d436:	69bb      	ldr	r3, [r7, #24]
 801d438:	3310      	adds	r3, #16
 801d43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d43e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 801d442:	3402      	adds	r4, #2
 801d444:	00e4      	lsls	r4, r4, #3
 801d446:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 801d44a:	442c      	add	r4, r5
 801d44c:	f7e2 ff0e 	bl	800026c <__aeabi_dsub>
 801d450:	4602      	mov	r2, r0
 801d452:	460b      	mov	r3, r1
 801d454:	e9c4 2300 	strd	r2, r3, [r4]
    b_k += 3;
 801d458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d45c:	3303      	adds	r3, #3
 801d45e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 801d462:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d466:	3301      	adds	r3, #1
 801d468:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d46c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d470:	2b05      	cmp	r3, #5
 801d472:	dda6      	ble.n	801d3c2 <UTMeanCovSqrt_C6QfB9Td+0x512>
  }

  signOOM = covWeights_1 * OOM;
 801d474:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801d478:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801d47c:	f7e3 f8ae 	bl	80005dc <__aeabi_dmul>
 801d480:	4602      	mov	r2, r0
 801d482:	460b      	mov	r3, r1
 801d484:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (knt = 0; knt < 3; knt++) {
 801d488:	2300      	movs	r3, #0
 801d48a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d48e:	e06c      	b.n	801d56a <UTMeanCovSqrt_C6QfB9Td+0x6ba>
    X2_0[knt] = 0.0;
 801d490:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d494:	00db      	lsls	r3, r3, #3
 801d496:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801d49a:	4413      	add	r3, r2
 801d49c:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 801d4a0:	f04f 0200 	mov.w	r2, #0
 801d4a4:	f04f 0300 	mov.w	r3, #0
 801d4a8:	e9c1 2300 	strd	r2, r3, [r1]
    b_k = 0;
 801d4ac:	2300      	movs	r3, #0
 801d4ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 801d4b2:	2300      	movs	r3, #0
 801d4b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801d4b8:	e037      	b.n	801d52a <UTMeanCovSqrt_C6QfB9Td+0x67a>
      X2_0[knt] += X2[b_k + knt] * Y2[i];
 801d4ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d4be:	00db      	lsls	r3, r3, #3
 801d4c0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801d4c4:	4413      	add	r3, r2
 801d4c6:	3b60      	subs	r3, #96	; 0x60
 801d4c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 801d4cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801d4d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d4d4:	4413      	add	r3, r2
 801d4d6:	00db      	lsls	r3, r3, #3
 801d4d8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801d4dc:	4413      	add	r3, r2
 801d4de:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d4e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d4e6:	00db      	lsls	r3, r3, #3
 801d4e8:	69fa      	ldr	r2, [r7, #28]
 801d4ea:	4413      	add	r3, r2
 801d4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4f0:	f7e3 f874 	bl	80005dc <__aeabi_dmul>
 801d4f4:	4602      	mov	r2, r0
 801d4f6:	460b      	mov	r3, r1
 801d4f8:	4620      	mov	r0, r4
 801d4fa:	4629      	mov	r1, r5
 801d4fc:	f7e2 feb8 	bl	8000270 <__adddf3>
 801d500:	4602      	mov	r2, r0
 801d502:	460b      	mov	r3, r1
 801d504:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801d508:	00c9      	lsls	r1, r1, #3
 801d50a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801d50e:	4401      	add	r1, r0
 801d510:	3960      	subs	r1, #96	; 0x60
 801d512:	e9c1 2300 	strd	r2, r3, [r1]
      b_k += 3;
 801d516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d51a:	3303      	adds	r3, #3
 801d51c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 801d520:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d524:	3301      	adds	r3, #1
 801d526:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801d52a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d52e:	2b05      	cmp	r3, #5
 801d530:	ddc3      	ble.n	801d4ba <UTMeanCovSqrt_C6QfB9Td+0x60a>
    }

    Pxy[knt] = X2_0[knt] * signOOM;
 801d532:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d536:	00db      	lsls	r3, r3, #3
 801d538:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801d53c:	4413      	add	r3, r2
 801d53e:	3b60      	subs	r3, #96	; 0x60
 801d540:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d544:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801d548:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 801d54c:	00e4      	lsls	r4, r4, #3
 801d54e:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 801d552:	442c      	add	r4, r5
 801d554:	f7e3 f842 	bl	80005dc <__aeabi_dmul>
 801d558:	4602      	mov	r2, r0
 801d55a:	460b      	mov	r3, r1
 801d55c:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 3; knt++) {
 801d560:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d564:	3301      	adds	r3, #1
 801d566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d56a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d56e:	2b02      	cmp	r3, #2
 801d570:	dd8e      	ble.n	801d490 <UTMeanCovSqrt_C6QfB9Td+0x5e0>
  }
}
 801d572:	bf00      	nop
 801d574:	bf00      	nop
 801d576:	37b0      	adds	r7, #176	; 0xb0
 801d578:	46bd      	mov	sp, r7
 801d57a:	ecbd 8b02 	vpop	{d8}
 801d57e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d582:	bf00      	nop
 801d584:	3ff00000 	.word	0x3ff00000

0801d588 <cholUpdateFactor_HBMX5a5h>:
#include "rotate_LZ7ctbe0.h"
#include "rt_nonfinite.h"
#include "rtGetNaN.h"

void cholUpdateFactor_HBMX5a5h(real_T *S, real_T U)
{
 801d588:	b5b0      	push	{r4, r5, r7, lr}
 801d58a:	b090      	sub	sp, #64	; 0x40
 801d58c:	af00      	add	r7, sp, #0
 801d58e:	60f8      	str	r0, [r7, #12]
 801d590:	ed87 0b00 	vstr	d0, [r7]
  real_T alpha;
  real_T c;
  real_T nrmx;
  real_T s;
  int8_T p;
  R = *S;
 801d594:	68fb      	ldr	r3, [r7, #12]
 801d596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d59a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  p = 0;
 801d59e:	2300      	movs	r3, #0
 801d5a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (*S == 0.0) {
 801d5a4:	68fb      	ldr	r3, [r7, #12]
 801d5a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d5aa:	f04f 0200 	mov.w	r2, #0
 801d5ae:	f04f 0300 	mov.w	r3, #0
 801d5b2:	f7e3 fa7b 	bl	8000aac <__aeabi_dcmpeq>
 801d5b6:	4603      	mov	r3, r0
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	d003      	beq.n	801d5c4 <cholUpdateFactor_HBMX5a5h+0x3c>
    p = 2;
 801d5bc:	2302      	movs	r3, #2
 801d5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801d5c2:	e065      	b.n	801d690 <cholUpdateFactor_HBMX5a5h+0x108>
  } else {
    s = U / *S;
 801d5c4:	68fb      	ldr	r3, [r7, #12]
 801d5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d5ce:	f7e3 f92f 	bl	8000830 <__aeabi_ddiv>
 801d5d2:	4602      	mov	r2, r0
 801d5d4:	460b      	mov	r3, r1
 801d5d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    nrmx = fabs(s);
 801d5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5dc:	63bb      	str	r3, [r7, #56]	; 0x38
 801d5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d5e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (nrmx >= 1.0) {
 801d5e6:	f04f 0200 	mov.w	r2, #0
 801d5ea:	4b5c      	ldr	r3, [pc, #368]	; (801d75c <cholUpdateFactor_HBMX5a5h+0x1d4>)
 801d5ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801d5f0:	f7e3 fa7a 	bl	8000ae8 <__aeabi_dcmpge>
 801d5f4:	4603      	mov	r3, r0
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	d003      	beq.n	801d602 <cholUpdateFactor_HBMX5a5h+0x7a>
      p = 1;
 801d5fa:	2301      	movs	r3, #1
 801d5fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801d600:	e046      	b.n	801d690 <cholUpdateFactor_HBMX5a5h+0x108>
    } else {
      rotate_LZ7ctbe0(sqrt(1.0 - nrmx * nrmx), s, &R, &c, &alpha);
 801d602:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d606:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801d60a:	f7e2 ffe7 	bl	80005dc <__aeabi_dmul>
 801d60e:	4602      	mov	r2, r0
 801d610:	460b      	mov	r3, r1
 801d612:	f04f 0000 	mov.w	r0, #0
 801d616:	4951      	ldr	r1, [pc, #324]	; (801d75c <cholUpdateFactor_HBMX5a5h+0x1d4>)
 801d618:	f7e2 fe28 	bl	800026c <__aeabi_dsub>
 801d61c:	4602      	mov	r2, r0
 801d61e:	460b      	mov	r3, r1
 801d620:	ec43 2b17 	vmov	d7, r2, r3
 801d624:	eeb0 0a47 	vmov.f32	s0, s14
 801d628:	eef0 0a67 	vmov.f32	s1, s15
 801d62c:	f011 fa64 	bl	802eaf8 <sqrt>
 801d630:	eeb0 7a40 	vmov.f32	s14, s0
 801d634:	eef0 7a60 	vmov.f32	s15, s1
 801d638:	f107 0218 	add.w	r2, r7, #24
 801d63c:	f107 0110 	add.w	r1, r7, #16
 801d640:	f107 0320 	add.w	r3, r7, #32
 801d644:	4618      	mov	r0, r3
 801d646:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 801d64a:	eeb0 0a47 	vmov.f32	s0, s14
 801d64e:	eef0 0a67 	vmov.f32	s1, s15
 801d652:	f002 fa49 	bl	801fae8 <rotate_LZ7ctbe0>
      R = R * *S - c * 0.0;
 801d656:	68fb      	ldr	r3, [r7, #12]
 801d658:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d65c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d660:	f7e2 ffbc 	bl	80005dc <__aeabi_dmul>
 801d664:	4602      	mov	r2, r0
 801d666:	460b      	mov	r3, r1
 801d668:	4614      	mov	r4, r2
 801d66a:	461d      	mov	r5, r3
 801d66c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d670:	f04f 0200 	mov.w	r2, #0
 801d674:	f04f 0300 	mov.w	r3, #0
 801d678:	f7e2 ffb0 	bl	80005dc <__aeabi_dmul>
 801d67c:	4602      	mov	r2, r0
 801d67e:	460b      	mov	r3, r1
 801d680:	4620      	mov	r0, r4
 801d682:	4629      	mov	r1, r5
 801d684:	f7e2 fdf2 	bl	800026c <__aeabi_dsub>
 801d688:	4602      	mov	r2, r0
 801d68a:	460b      	mov	r3, r1
 801d68c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
  }

  *S = R;
 801d690:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d694:	68f9      	ldr	r1, [r7, #12]
 801d696:	e9c1 2300 	strd	r2, r3, [r1]
  if (p != 0) {
 801d69a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	d057      	beq.n	801d752 <cholUpdateFactor_HBMX5a5h+0x1ca>
    s = R * R - U * U;
 801d6a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801d6a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d6aa:	f7e2 ff97 	bl	80005dc <__aeabi_dmul>
 801d6ae:	4602      	mov	r2, r0
 801d6b0:	460b      	mov	r3, r1
 801d6b2:	4614      	mov	r4, r2
 801d6b4:	461d      	mov	r5, r3
 801d6b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d6ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d6be:	f7e2 ff8d 	bl	80005dc <__aeabi_dmul>
 801d6c2:	4602      	mov	r2, r0
 801d6c4:	460b      	mov	r3, r1
 801d6c6:	4620      	mov	r0, r4
 801d6c8:	4629      	mov	r1, r5
 801d6ca:	f7e2 fdcf 	bl	800026c <__aeabi_dsub>
 801d6ce:	4602      	mov	r2, r0
 801d6d0:	460b      	mov	r3, r1
 801d6d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if ((!rtIsInf(s)) && (!rtIsNaN(s))) {
 801d6d6:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801d6da:	f002 fc7b 	bl	801ffd4 <rtIsInf>
 801d6de:	4603      	mov	r3, r0
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	d11d      	bne.n	801d720 <cholUpdateFactor_HBMX5a5h+0x198>
 801d6e4:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801d6e8:	f002 fc98 	bl	802001c <rtIsNaN>
 801d6ec:	4603      	mov	r3, r0
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	d116      	bne.n	801d720 <cholUpdateFactor_HBMX5a5h+0x198>
      nrmx = 1.0;
 801d6f2:	f04f 0200 	mov.w	r2, #0
 801d6f6:	4b19      	ldr	r3, [pc, #100]	; (801d75c <cholUpdateFactor_HBMX5a5h+0x1d4>)
 801d6f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      if (s != 0.0) {
 801d6fc:	f04f 0200 	mov.w	r2, #0
 801d700:	f04f 0300 	mov.w	r3, #0
 801d704:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801d708:	f7e3 f9d0 	bl	8000aac <__aeabi_dcmpeq>
 801d70c:	4603      	mov	r3, r0
 801d70e:	2b00      	cmp	r3, #0
 801d710:	d110      	bne.n	801d734 <cholUpdateFactor_HBMX5a5h+0x1ac>
        s = fabs(s);
 801d712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d714:	633b      	str	r3, [r7, #48]	; 0x30
 801d716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d718:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d71c:	637b      	str	r3, [r7, #52]	; 0x34
      if (s != 0.0) {
 801d71e:	e009      	b.n	801d734 <cholUpdateFactor_HBMX5a5h+0x1ac>
      }
    } else {
      s = (rtNaN);
 801d720:	4b0f      	ldr	r3, [pc, #60]	; (801d760 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 801d722:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d726:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      nrmx = (rtNaN);
 801d72a:	4b0d      	ldr	r3, [pc, #52]	; (801d760 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 801d72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d730:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    *S = nrmx * sqrt(s);
 801d734:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801d738:	f011 f9de 	bl	802eaf8 <sqrt>
 801d73c:	ec51 0b10 	vmov	r0, r1, d0
 801d740:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d744:	f7e2 ff4a 	bl	80005dc <__aeabi_dmul>
 801d748:	4602      	mov	r2, r0
 801d74a:	460b      	mov	r3, r1
 801d74c:	68f9      	ldr	r1, [r7, #12]
 801d74e:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 801d752:	bf00      	nop
 801d754:	3740      	adds	r7, #64	; 0x40
 801d756:	46bd      	mov	sp, r7
 801d758:	bdb0      	pop	{r4, r5, r7, pc}
 801d75a:	bf00      	nop
 801d75c:	3ff00000 	.word	0x3ff00000
 801d760:	2001ee68 	.word	0x2001ee68

0801d764 <look1_binlxpw>:
#include "look1_binlxpw.h"
#include "rtwtypes.h"

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 801d764:	b5b0      	push	{r4, r5, r7, lr}
 801d766:	b08e      	sub	sp, #56	; 0x38
 801d768:	af00      	add	r7, sp, #0
 801d76a:	ed87 0b04 	vstr	d0, [r7, #16]
 801d76e:	60f8      	str	r0, [r7, #12]
 801d770:	60b9      	str	r1, [r7, #8]
 801d772:	607a      	str	r2, [r7, #4]
  real_T frac;
  real_T yL_0d0;
  uint32_T iLeft;
  if (u0 <= bp0[0U]) {
 801d774:	68fb      	ldr	r3, [r7, #12]
 801d776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d77a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d77e:	f7e3 f9a9 	bl	8000ad4 <__aeabi_dcmple>
 801d782:	4603      	mov	r3, r0
 801d784:	2b00      	cmp	r3, #0
 801d786:	d020      	beq.n	801d7ca <look1_binlxpw+0x66>
    iLeft = 0U;
 801d788:	2300      	movs	r3, #0
 801d78a:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 801d78c:	68fb      	ldr	r3, [r7, #12]
 801d78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d792:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d796:	f7e2 fd69 	bl	800026c <__aeabi_dsub>
 801d79a:	4602      	mov	r2, r0
 801d79c:	460b      	mov	r3, r1
 801d79e:	4614      	mov	r4, r2
 801d7a0:	461d      	mov	r5, r3
 801d7a2:	68fb      	ldr	r3, [r7, #12]
 801d7a4:	3308      	adds	r3, #8
 801d7a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d7aa:	68fb      	ldr	r3, [r7, #12]
 801d7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7b0:	f7e2 fd5c 	bl	800026c <__aeabi_dsub>
 801d7b4:	4602      	mov	r2, r0
 801d7b6:	460b      	mov	r3, r1
 801d7b8:	4620      	mov	r0, r4
 801d7ba:	4629      	mov	r1, r5
 801d7bc:	f7e3 f838 	bl	8000830 <__aeabi_ddiv>
 801d7c0:	4602      	mov	r2, r0
 801d7c2:	460b      	mov	r3, r1
 801d7c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801d7c8:	e087      	b.n	801d8da <look1_binlxpw+0x176>
  } else if (u0 < bp0[maxIndex]) {
 801d7ca:	687b      	ldr	r3, [r7, #4]
 801d7cc:	00db      	lsls	r3, r3, #3
 801d7ce:	68fa      	ldr	r2, [r7, #12]
 801d7d0:	4413      	add	r3, r2
 801d7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d7da:	f7e3 f971 	bl	8000ac0 <__aeabi_dcmplt>
 801d7de:	4603      	mov	r3, r0
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d04b      	beq.n	801d87c <look1_binlxpw+0x118>
    uint32_T bpIdx;
    uint32_T iRght;
    bpIdx = maxIndex >> 1U;
 801d7e4:	687b      	ldr	r3, [r7, #4]
 801d7e6:	085b      	lsrs	r3, r3, #1
 801d7e8:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 801d7ea:	2300      	movs	r3, #0
 801d7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 801d7f2:	e016      	b.n	801d822 <look1_binlxpw+0xbe>
      if (u0 < bp0[bpIdx]) {
 801d7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7f6:	00db      	lsls	r3, r3, #3
 801d7f8:	68fa      	ldr	r2, [r7, #12]
 801d7fa:	4413      	add	r3, r2
 801d7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d800:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d804:	f7e3 f95c 	bl	8000ac0 <__aeabi_dcmplt>
 801d808:	4603      	mov	r3, r0
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	d002      	beq.n	801d814 <look1_binlxpw+0xb0>
        iRght = bpIdx;
 801d80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d810:	627b      	str	r3, [r7, #36]	; 0x24
 801d812:	e001      	b.n	801d818 <look1_binlxpw+0xb4>
      } else {
        iLeft = bpIdx;
 801d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d816:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 801d818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d81c:	4413      	add	r3, r2
 801d81e:	085b      	lsrs	r3, r3, #1
 801d820:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 801d822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d826:	1ad3      	subs	r3, r2, r3
 801d828:	2b01      	cmp	r3, #1
 801d82a:	d8e3      	bhi.n	801d7f4 <look1_binlxpw+0x90>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 801d82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d82e:	00db      	lsls	r3, r3, #3
 801d830:	68fa      	ldr	r2, [r7, #12]
 801d832:	4413      	add	r3, r2
 801d834:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d838:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d83c:	f7e2 fd16 	bl	800026c <__aeabi_dsub>
 801d840:	4602      	mov	r2, r0
 801d842:	460b      	mov	r3, r1
 801d844:	4614      	mov	r4, r2
 801d846:	461d      	mov	r5, r3
 801d848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d84a:	3301      	adds	r3, #1
 801d84c:	00db      	lsls	r3, r3, #3
 801d84e:	68fa      	ldr	r2, [r7, #12]
 801d850:	4413      	add	r3, r2
 801d852:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d858:	00db      	lsls	r3, r3, #3
 801d85a:	68fa      	ldr	r2, [r7, #12]
 801d85c:	4413      	add	r3, r2
 801d85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d862:	f7e2 fd03 	bl	800026c <__aeabi_dsub>
 801d866:	4602      	mov	r2, r0
 801d868:	460b      	mov	r3, r1
 801d86a:	4620      	mov	r0, r4
 801d86c:	4629      	mov	r1, r5
 801d86e:	f7e2 ffdf 	bl	8000830 <__aeabi_ddiv>
 801d872:	4602      	mov	r2, r0
 801d874:	460b      	mov	r3, r1
 801d876:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801d87a:	e02e      	b.n	801d8da <look1_binlxpw+0x176>
  } else {
    iLeft = maxIndex - 1U;
 801d87c:	687b      	ldr	r3, [r7, #4]
 801d87e:	3b01      	subs	r3, #1
 801d880:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801d888:	3b01      	subs	r3, #1
 801d88a:	00db      	lsls	r3, r3, #3
 801d88c:	68fa      	ldr	r2, [r7, #12]
 801d88e:	4413      	add	r3, r2
 801d890:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d894:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d898:	f7e2 fce8 	bl	800026c <__aeabi_dsub>
 801d89c:	4602      	mov	r2, r0
 801d89e:	460b      	mov	r3, r1
 801d8a0:	4614      	mov	r4, r2
 801d8a2:	461d      	mov	r5, r3
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	00db      	lsls	r3, r3, #3
 801d8a8:	68fa      	ldr	r2, [r7, #12]
 801d8aa:	4413      	add	r3, r2
 801d8ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801d8b6:	3b01      	subs	r3, #1
 801d8b8:	00db      	lsls	r3, r3, #3
 801d8ba:	68fa      	ldr	r2, [r7, #12]
 801d8bc:	4413      	add	r3, r2
 801d8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8c2:	f7e2 fcd3 	bl	800026c <__aeabi_dsub>
 801d8c6:	4602      	mov	r2, r0
 801d8c8:	460b      	mov	r3, r1
 801d8ca:	4620      	mov	r0, r4
 801d8cc:	4629      	mov	r1, r5
 801d8ce:	f7e2 ffaf 	bl	8000830 <__aeabi_ddiv>
 801d8d2:	4602      	mov	r2, r0
 801d8d4:	460b      	mov	r3, r1
 801d8d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  yL_0d0 = table[iLeft];
 801d8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8dc:	00db      	lsls	r3, r3, #3
 801d8de:	68ba      	ldr	r2, [r7, #8]
 801d8e0:	4413      	add	r3, r2
 801d8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 801d8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8ec:	3301      	adds	r3, #1
 801d8ee:	00db      	lsls	r3, r3, #3
 801d8f0:	68ba      	ldr	r2, [r7, #8]
 801d8f2:	4413      	add	r3, r2
 801d8f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d8f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d8fc:	f7e2 fcb6 	bl	800026c <__aeabi_dsub>
 801d900:	4602      	mov	r2, r0
 801d902:	460b      	mov	r3, r1
 801d904:	4610      	mov	r0, r2
 801d906:	4619      	mov	r1, r3
 801d908:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801d90c:	f7e2 fe66 	bl	80005dc <__aeabi_dmul>
 801d910:	4602      	mov	r2, r0
 801d912:	460b      	mov	r3, r1
 801d914:	4610      	mov	r0, r2
 801d916:	4619      	mov	r1, r3
 801d918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d91c:	f7e2 fca8 	bl	8000270 <__adddf3>
 801d920:	4602      	mov	r2, r0
 801d922:	460b      	mov	r3, r1
 801d924:	ec43 2b17 	vmov	d7, r2, r3
}
 801d928:	eeb0 0a47 	vmov.f32	s0, s14
 801d92c:	eef0 0a67 	vmov.f32	s1, s15
 801d930:	3738      	adds	r7, #56	; 0x38
 801d932:	46bd      	mov	sp, r7
 801d934:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d938 <qr_5a2P8Gh6>:
#include <math.h>
#include "xgemv_fRiR1I1O.h"
#include "xgerc_tNNiazQU.h"

void qr_5a2P8Gh6(const real_T A[9], real_T Q[9], real_T R[9])
{
 801d938:	b5b0      	push	{r4, r5, r7, lr}
 801d93a:	b0c0      	sub	sp, #256	; 0x100
 801d93c:	af04      	add	r7, sp, #16
 801d93e:	6578      	str	r0, [r7, #84]	; 0x54
 801d940:	6539      	str	r1, [r7, #80]	; 0x50
 801d942:	64fa      	str	r2, [r7, #76]	; 0x4c
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 9U * sizeof(real_T));
 801d944:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d948:	2248      	movs	r2, #72	; 0x48
 801d94a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801d94c:	4618      	mov	r0, r3
 801d94e:	f010 feb9 	bl	802e6c4 <memcpy>
  tau_idx_0 = 0.0;
 801d952:	f04f 0200 	mov.w	r2, #0
 801d956:	f04f 0300 	mov.w	r3, #0
 801d95a:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  work[0] = 0.0;
 801d95e:	f04f 0200 	mov.w	r2, #0
 801d962:	f04f 0300 	mov.w	r3, #0
 801d966:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  tau_idx_1 = 0.0;
 801d96a:	f04f 0200 	mov.w	r2, #0
 801d96e:	f04f 0300 	mov.w	r3, #0
 801d972:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  work[1] = 0.0;
 801d976:	f04f 0200 	mov.w	r2, #0
 801d97a:	f04f 0300 	mov.w	r3, #0
 801d97e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  work[2] = 0.0;
 801d982:	f04f 0200 	mov.w	r2, #0
 801d986:	f04f 0300 	mov.w	r3, #0
 801d98a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  atmp = b_A[0];
 801d98e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801d992:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(2, b_A, 2);
 801d996:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d99a:	2202      	movs	r2, #2
 801d99c:	4619      	mov	r1, r3
 801d99e:	2002      	movs	r0, #2
 801d9a0:	f004 ffc2 	bl	8022928 <xnrm2_xDOlDEtw>
 801d9a4:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 801d9a8:	f04f 0200 	mov.w	r2, #0
 801d9ac:	f04f 0300 	mov.w	r3, #0
 801d9b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801d9b4:	f7e3 f87a 	bl	8000aac <__aeabi_dcmpeq>
 801d9b8:	4603      	mov	r3, r0
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	f040 8172 	bne.w	801dca4 <qr_5a2P8Gh6+0x36c>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 801d9c0:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 801d9c4:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 801d9c8:	eeb0 0a47 	vmov.f32	s0, s14
 801d9cc:	eef0 0a67 	vmov.f32	s1, s15
 801d9d0:	f002 fa16 	bl	801fe00 <rt_hypotd_snf>
 801d9d4:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[0] >= 0.0) {
 801d9d8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801d9dc:	f04f 0200 	mov.w	r2, #0
 801d9e0:	f04f 0300 	mov.w	r3, #0
 801d9e4:	f7e3 f880 	bl	8000ae8 <__aeabi_dcmpge>
 801d9e8:	4603      	mov	r3, r0
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d009      	beq.n	801da02 <qr_5a2P8Gh6+0xca>
      beta1 = -beta1;
 801d9ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801d9f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801d9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801d9fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801d9fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801da02:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 801da06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801da0a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801da0e:	f04f 0200 	mov.w	r2, #0
 801da12:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801da16:	4620      	mov	r0, r4
 801da18:	4629      	mov	r1, r5
 801da1a:	f7e3 f851 	bl	8000ac0 <__aeabi_dcmplt>
 801da1e:	4603      	mov	r3, r0
 801da20:	2b00      	cmp	r3, #0
 801da22:	f000 80f1 	beq.w	801dc08 <qr_5a2P8Gh6+0x2d0>
      knt = 0;
 801da26:	2300      	movs	r3, #0
 801da28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 801da2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801da30:	3301      	adds	r3, #1
 801da32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801da36:	2301      	movs	r3, #1
 801da38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801da3c:	e01f      	b.n	801da7e <qr_5a2P8Gh6+0x146>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801da3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801da42:	00db      	lsls	r3, r3, #3
 801da44:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801da48:	4413      	add	r3, r2
 801da4a:	3b80      	subs	r3, #128	; 0x80
 801da4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801da50:	f04f 0200 	mov.w	r2, #0
 801da54:	4bc9      	ldr	r3, [pc, #804]	; (801dd7c <qr_5a2P8Gh6+0x444>)
 801da56:	f7e2 fdc1 	bl	80005dc <__aeabi_dmul>
 801da5a:	4602      	mov	r2, r0
 801da5c:	460b      	mov	r3, r1
 801da5e:	4610      	mov	r0, r2
 801da60:	4619      	mov	r1, r3
 801da62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801da66:	00db      	lsls	r3, r3, #3
 801da68:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801da6c:	4413      	add	r3, r2
 801da6e:	3b80      	subs	r3, #128	; 0x80
 801da70:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801da74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801da78:	3301      	adds	r3, #1
 801da7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801da7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801da82:	2b02      	cmp	r3, #2
 801da84:	dddb      	ble.n	801da3e <qr_5a2P8Gh6+0x106>
        }

        beta1 *= 9.9792015476736E+291;
 801da86:	f04f 0200 	mov.w	r2, #0
 801da8a:	4bbc      	ldr	r3, [pc, #752]	; (801dd7c <qr_5a2P8Gh6+0x444>)
 801da8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801da90:	f7e2 fda4 	bl	80005dc <__aeabi_dmul>
 801da94:	4602      	mov	r2, r0
 801da96:	460b      	mov	r3, r1
 801da98:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 801da9c:	f04f 0200 	mov.w	r2, #0
 801daa0:	4bb6      	ldr	r3, [pc, #728]	; (801dd7c <qr_5a2P8Gh6+0x444>)
 801daa2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801daa6:	f7e2 fd99 	bl	80005dc <__aeabi_dmul>
 801daaa:	4602      	mov	r2, r0
 801daac:	460b      	mov	r3, r1
 801daae:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801dab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801dab6:	643b      	str	r3, [r7, #64]	; 0x40
 801dab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801dabc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801dac0:	647b      	str	r3, [r7, #68]	; 0x44
 801dac2:	f04f 0200 	mov.w	r2, #0
 801dac6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801daca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801dace:	f7e2 fff7 	bl	8000ac0 <__aeabi_dcmplt>
 801dad2:	4603      	mov	r3, r0
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	d003      	beq.n	801dae0 <qr_5a2P8Gh6+0x1a8>
 801dad8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801dadc:	2b13      	cmp	r3, #19
 801dade:	dda5      	ble.n	801da2c <qr_5a2P8Gh6+0xf4>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(2, b_A, 2));
 801dae0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801dae4:	2202      	movs	r2, #2
 801dae6:	4619      	mov	r1, r3
 801dae8:	2002      	movs	r0, #2
 801daea:	f004 ff1d 	bl	8022928 <xnrm2_xDOlDEtw>
 801daee:	eeb0 7a40 	vmov.f32	s14, s0
 801daf2:	eef0 7a60 	vmov.f32	s15, s1
 801daf6:	eeb0 1a47 	vmov.f32	s2, s14
 801dafa:	eef0 1a67 	vmov.f32	s3, s15
 801dafe:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 801db02:	f002 f97d 	bl	801fe00 <rt_hypotd_snf>
 801db06:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 801db0a:	f04f 0200 	mov.w	r2, #0
 801db0e:	f04f 0300 	mov.w	r3, #0
 801db12:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801db16:	f7e2 ffe7 	bl	8000ae8 <__aeabi_dcmpge>
 801db1a:	4603      	mov	r3, r0
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	d009      	beq.n	801db34 <qr_5a2P8Gh6+0x1fc>
        beta1 = -beta1;
 801db20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801db24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801db28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801db2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801db30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 801db34:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801db38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801db3c:	f7e2 fb96 	bl	800026c <__aeabi_dsub>
 801db40:	4602      	mov	r2, r0
 801db42:	460b      	mov	r3, r1
 801db44:	4610      	mov	r0, r2
 801db46:	4619      	mov	r1, r3
 801db48:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801db4c:	f7e2 fe70 	bl	8000830 <__aeabi_ddiv>
 801db50:	4602      	mov	r2, r0
 801db52:	460b      	mov	r3, r1
 801db54:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (atmp - beta1);
 801db58:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801db5c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801db60:	f7e2 fb84 	bl	800026c <__aeabi_dsub>
 801db64:	4602      	mov	r2, r0
 801db66:	460b      	mov	r3, r1
 801db68:	f04f 0000 	mov.w	r0, #0
 801db6c:	4984      	ldr	r1, [pc, #528]	; (801dd80 <qr_5a2P8Gh6+0x448>)
 801db6e:	f7e2 fe5f 	bl	8000830 <__aeabi_ddiv>
 801db72:	4602      	mov	r2, r0
 801db74:	460b      	mov	r3, r1
 801db76:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801db7a:	2301      	movs	r3, #1
 801db7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801db80:	e01e      	b.n	801dbc0 <qr_5a2P8Gh6+0x288>
        b_A[b_coltop] *= atmp;
 801db82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801db86:	00db      	lsls	r3, r3, #3
 801db88:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801db8c:	4413      	add	r3, r2
 801db8e:	3b80      	subs	r3, #128	; 0x80
 801db90:	e9d3 0100 	ldrd	r0, r1, [r3]
 801db94:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801db98:	f7e2 fd20 	bl	80005dc <__aeabi_dmul>
 801db9c:	4602      	mov	r2, r0
 801db9e:	460b      	mov	r3, r1
 801dba0:	4610      	mov	r0, r2
 801dba2:	4619      	mov	r1, r3
 801dba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dba8:	00db      	lsls	r3, r3, #3
 801dbaa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801dbae:	4413      	add	r3, r2
 801dbb0:	3b80      	subs	r3, #128	; 0x80
 801dbb2:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801dbb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dbba:	3301      	adds	r3, #1
 801dbbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801dbc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dbc4:	2b02      	cmp	r3, #2
 801dbc6:	dddc      	ble.n	801db82 <qr_5a2P8Gh6+0x24a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801dbc8:	2300      	movs	r3, #0
 801dbca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801dbce:	e010      	b.n	801dbf2 <qr_5a2P8Gh6+0x2ba>
        beta1 *= 1.0020841800044864E-292;
 801dbd0:	f04f 0200 	mov.w	r2, #0
 801dbd4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801dbd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801dbdc:	f7e2 fcfe 	bl	80005dc <__aeabi_dmul>
 801dbe0:	4602      	mov	r2, r0
 801dbe2:	460b      	mov	r3, r1
 801dbe4:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801dbe8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dbec:	3301      	adds	r3, #1
 801dbee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801dbf2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801dbf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801dbfa:	429a      	cmp	r2, r3
 801dbfc:	dbe8      	blt.n	801dbd0 <qr_5a2P8Gh6+0x298>
      }

      atmp = beta1;
 801dbfe:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801dc02:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 801dc06:	e04d      	b.n	801dca4 <qr_5a2P8Gh6+0x36c>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 801dc08:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801dc0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801dc10:	f7e2 fb2c 	bl	800026c <__aeabi_dsub>
 801dc14:	4602      	mov	r2, r0
 801dc16:	460b      	mov	r3, r1
 801dc18:	4610      	mov	r0, r2
 801dc1a:	4619      	mov	r1, r3
 801dc1c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801dc20:	f7e2 fe06 	bl	8000830 <__aeabi_ddiv>
 801dc24:	4602      	mov	r2, r0
 801dc26:	460b      	mov	r3, r1
 801dc28:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (b_A[0] - beta1);
 801dc2c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801dc30:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801dc34:	f7e2 fb1a 	bl	800026c <__aeabi_dsub>
 801dc38:	4602      	mov	r2, r0
 801dc3a:	460b      	mov	r3, r1
 801dc3c:	f04f 0000 	mov.w	r0, #0
 801dc40:	494f      	ldr	r1, [pc, #316]	; (801dd80 <qr_5a2P8Gh6+0x448>)
 801dc42:	f7e2 fdf5 	bl	8000830 <__aeabi_ddiv>
 801dc46:	4602      	mov	r2, r0
 801dc48:	460b      	mov	r3, r1
 801dc4a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 801dc4e:	2301      	movs	r3, #1
 801dc50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801dc54:	e01e      	b.n	801dc94 <qr_5a2P8Gh6+0x35c>
        b_A[c_lastc] *= atmp;
 801dc56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dc5a:	00db      	lsls	r3, r3, #3
 801dc5c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801dc60:	4413      	add	r3, r2
 801dc62:	3b80      	subs	r3, #128	; 0x80
 801dc64:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dc68:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801dc6c:	f7e2 fcb6 	bl	80005dc <__aeabi_dmul>
 801dc70:	4602      	mov	r2, r0
 801dc72:	460b      	mov	r3, r1
 801dc74:	4610      	mov	r0, r2
 801dc76:	4619      	mov	r1, r3
 801dc78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dc7c:	00db      	lsls	r3, r3, #3
 801dc7e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801dc82:	4413      	add	r3, r2
 801dc84:	3b80      	subs	r3, #128	; 0x80
 801dc86:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 801dc8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dc8e:	3301      	adds	r3, #1
 801dc90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801dc94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dc98:	2b02      	cmp	r3, #2
 801dc9a:	dddc      	ble.n	801dc56 <qr_5a2P8Gh6+0x31e>
      }

      atmp = beta1;
 801dc9c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801dca0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[0] = 1.0;
 801dca4:	f04f 0200 	mov.w	r2, #0
 801dca8:	4b35      	ldr	r3, [pc, #212]	; (801dd80 <qr_5a2P8Gh6+0x448>)
 801dcaa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 801dcae:	f04f 0200 	mov.w	r2, #0
 801dcb2:	f04f 0300 	mov.w	r3, #0
 801dcb6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801dcba:	f7e2 fef7 	bl	8000aac <__aeabi_dcmpeq>
 801dcbe:	4603      	mov	r3, r0
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	f040 8081 	bne.w	801ddc8 <qr_5a2P8Gh6+0x490>
    knt = 3;
 801dcc6:	2303      	movs	r3, #3
 801dcc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 2;
 801dccc:	2302      	movs	r3, #2
 801dcce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801dcd2:	e009      	b.n	801dce8 <qr_5a2P8Gh6+0x3b0>
      knt--;
 801dcd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801dcd8:	3b01      	subs	r3, #1
 801dcda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 801dcde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dce2:	3b01      	subs	r3, #1
 801dce4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801dce8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	dd11      	ble.n	801dd14 <qr_5a2P8Gh6+0x3dc>
 801dcf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dcf4:	00db      	lsls	r3, r3, #3
 801dcf6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801dcfa:	4413      	add	r3, r2
 801dcfc:	3b80      	subs	r3, #128	; 0x80
 801dcfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dd02:	f04f 0200 	mov.w	r2, #0
 801dd06:	f04f 0300 	mov.w	r3, #0
 801dd0a:	f7e2 fecf 	bl	8000aac <__aeabi_dcmpeq>
 801dd0e:	4603      	mov	r3, r0
 801dd10:	2b00      	cmp	r3, #0
 801dd12:	d1df      	bne.n	801dcd4 <qr_5a2P8Gh6+0x39c>
    }

    c_lastc = 2;
 801dd14:	2302      	movs	r3, #2
 801dd16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    exitg2 = false;
 801dd1a:	2300      	movs	r3, #0
 801dd1c:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 801dd20:	e049      	b.n	801ddb6 <qr_5a2P8Gh6+0x47e>
      b_coltop = (c_lastc - 1) * 3 + 3;
 801dd22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801dd26:	4613      	mov	r3, r2
 801dd28:	005b      	lsls	r3, r3, #1
 801dd2a:	4413      	add	r3, r2
 801dd2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      coltop = b_coltop;
 801dd30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dd34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      do {
        exitg1 = 0;
 801dd38:	2300      	movs	r3, #0
 801dd3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (coltop + 1 <= b_coltop + knt) {
 801dd3e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801dd42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801dd46:	441a      	add	r2, r3
 801dd48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801dd4c:	4293      	cmp	r3, r2
 801dd4e:	da1f      	bge.n	801dd90 <qr_5a2P8Gh6+0x458>
          if (b_A[coltop] != 0.0) {
 801dd50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801dd54:	00db      	lsls	r3, r3, #3
 801dd56:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801dd5a:	4413      	add	r3, r2
 801dd5c:	3b80      	subs	r3, #128	; 0x80
 801dd5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dd62:	f04f 0200 	mov.w	r2, #0
 801dd66:	f04f 0300 	mov.w	r3, #0
 801dd6a:	f7e2 fe9f 	bl	8000aac <__aeabi_dcmpeq>
 801dd6e:	4603      	mov	r3, r0
 801dd70:	2b00      	cmp	r3, #0
 801dd72:	d107      	bne.n	801dd84 <qr_5a2P8Gh6+0x44c>
            exitg1 = 1;
 801dd74:	2301      	movs	r3, #1
 801dd76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801dd7a:	e011      	b.n	801dda0 <qr_5a2P8Gh6+0x468>
 801dd7c:	7c900000 	.word	0x7c900000
 801dd80:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 801dd84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801dd88:	3301      	adds	r3, #1
 801dd8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801dd8e:	e007      	b.n	801dda0 <qr_5a2P8Gh6+0x468>
          }
        } else {
          c_lastc--;
 801dd90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dd94:	3b01      	subs	r3, #1
 801dd96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
          exitg1 = 2;
 801dd9a:	2302      	movs	r3, #2
 801dd9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 801dda0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	d0c7      	beq.n	801dd38 <qr_5a2P8Gh6+0x400>

      if (exitg1 == 1) {
 801dda8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ddac:	2b01      	cmp	r3, #1
 801ddae:	d102      	bne.n	801ddb6 <qr_5a2P8Gh6+0x47e>
        exitg2 = true;
 801ddb0:	2301      	movs	r3, #1
 801ddb2:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 801ddb6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	d10a      	bne.n	801ddd4 <qr_5a2P8Gh6+0x49c>
 801ddbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	dcad      	bgt.n	801dd22 <qr_5a2P8Gh6+0x3ea>
 801ddc6:	e005      	b.n	801ddd4 <qr_5a2P8Gh6+0x49c>
      }
    }
  } else {
    knt = 0;
 801ddc8:	2300      	movs	r3, #0
 801ddca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 801ddce:	2300      	movs	r3, #0
 801ddd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 801ddd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	dd29      	ble.n	801de30 <qr_5a2P8Gh6+0x4f8>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 4, b_A, 1, work);
 801dddc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801dde0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801dde4:	9302      	str	r3, [sp, #8]
 801dde6:	2301      	movs	r3, #1
 801dde8:	9301      	str	r3, [sp, #4]
 801ddea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ddee:	9300      	str	r3, [sp, #0]
 801ddf0:	2304      	movs	r3, #4
 801ddf2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801ddf6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801ddfa:	f004 f951 	bl	80220a0 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_0, 1, work, b_A, 4);
 801ddfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801de02:	63bb      	str	r3, [r7, #56]	; 0x38
 801de04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801de08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801de0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801de0e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801de12:	2304      	movs	r3, #4
 801de14:	9301      	str	r3, [sp, #4]
 801de16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801de1a:	9300      	str	r3, [sp, #0]
 801de1c:	4613      	mov	r3, r2
 801de1e:	2201      	movs	r2, #1
 801de20:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 801de24:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801de28:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801de2c:	f004 fa41 	bl	80222b2 <xgerc_tNNiazQU>
  }

  b_A[0] = atmp;
 801de30:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801de34:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  atmp = b_A[4];
 801de38:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801de3c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(1, b_A, 6);
 801de40:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801de44:	2206      	movs	r2, #6
 801de46:	4619      	mov	r1, r3
 801de48:	2001      	movs	r0, #1
 801de4a:	f004 fd6d 	bl	8022928 <xnrm2_xDOlDEtw>
 801de4e:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 801de52:	f04f 0200 	mov.w	r2, #0
 801de56:	f04f 0300 	mov.w	r3, #0
 801de5a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801de5e:	f7e2 fe25 	bl	8000aac <__aeabi_dcmpeq>
 801de62:	4603      	mov	r3, r0
 801de64:	2b00      	cmp	r3, #0
 801de66:	f040 8170 	bne.w	801e14a <qr_5a2P8Gh6+0x812>
    beta1 = rt_hypotd_snf(b_A[4], beta1);
 801de6a:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 801de6e:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 801de72:	eeb0 0a47 	vmov.f32	s0, s14
 801de76:	eef0 0a67 	vmov.f32	s1, s15
 801de7a:	f001 ffc1 	bl	801fe00 <rt_hypotd_snf>
 801de7e:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[4] >= 0.0) {
 801de82:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801de86:	f04f 0200 	mov.w	r2, #0
 801de8a:	f04f 0300 	mov.w	r3, #0
 801de8e:	f7e2 fe2b 	bl	8000ae8 <__aeabi_dcmpge>
 801de92:	4603      	mov	r3, r0
 801de94:	2b00      	cmp	r3, #0
 801de96:	d009      	beq.n	801deac <qr_5a2P8Gh6+0x574>
      beta1 = -beta1;
 801de98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801de9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801dea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801dea4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801dea8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801deac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801deb0:	633b      	str	r3, [r7, #48]	; 0x30
 801deb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801deb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801deba:	637b      	str	r3, [r7, #52]	; 0x34
 801debc:	f04f 0200 	mov.w	r2, #0
 801dec0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801dec4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801dec8:	f7e2 fdfa 	bl	8000ac0 <__aeabi_dcmplt>
 801decc:	4603      	mov	r3, r0
 801dece:	2b00      	cmp	r3, #0
 801ded0:	f000 80ef 	beq.w	801e0b2 <qr_5a2P8Gh6+0x77a>
      knt = 0;
 801ded4:	2300      	movs	r3, #0
 801ded6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 801deda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801dede:	3301      	adds	r3, #1
 801dee0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801dee4:	2305      	movs	r3, #5
 801dee6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801deea:	e01f      	b.n	801df2c <qr_5a2P8Gh6+0x5f4>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801deec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801def0:	00db      	lsls	r3, r3, #3
 801def2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801def6:	4413      	add	r3, r2
 801def8:	3b80      	subs	r3, #128	; 0x80
 801defa:	e9d3 0100 	ldrd	r0, r1, [r3]
 801defe:	f04f 0200 	mov.w	r2, #0
 801df02:	4bc9      	ldr	r3, [pc, #804]	; (801e228 <qr_5a2P8Gh6+0x8f0>)
 801df04:	f7e2 fb6a 	bl	80005dc <__aeabi_dmul>
 801df08:	4602      	mov	r2, r0
 801df0a:	460b      	mov	r3, r1
 801df0c:	4610      	mov	r0, r2
 801df0e:	4619      	mov	r1, r3
 801df10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801df14:	00db      	lsls	r3, r3, #3
 801df16:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801df1a:	4413      	add	r3, r2
 801df1c:	3b80      	subs	r3, #128	; 0x80
 801df1e:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801df22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801df26:	3301      	adds	r3, #1
 801df28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801df2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801df30:	2b05      	cmp	r3, #5
 801df32:	dddb      	ble.n	801deec <qr_5a2P8Gh6+0x5b4>
        }

        beta1 *= 9.9792015476736E+291;
 801df34:	f04f 0200 	mov.w	r2, #0
 801df38:	4bbb      	ldr	r3, [pc, #748]	; (801e228 <qr_5a2P8Gh6+0x8f0>)
 801df3a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801df3e:	f7e2 fb4d 	bl	80005dc <__aeabi_dmul>
 801df42:	4602      	mov	r2, r0
 801df44:	460b      	mov	r3, r1
 801df46:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 801df4a:	f04f 0200 	mov.w	r2, #0
 801df4e:	4bb6      	ldr	r3, [pc, #728]	; (801e228 <qr_5a2P8Gh6+0x8f0>)
 801df50:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801df54:	f7e2 fb42 	bl	80005dc <__aeabi_dmul>
 801df58:	4602      	mov	r2, r0
 801df5a:	460b      	mov	r3, r1
 801df5c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801df60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801df64:	62bb      	str	r3, [r7, #40]	; 0x28
 801df66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801df6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801df6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801df70:	f04f 0200 	mov.w	r2, #0
 801df74:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801df78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801df7c:	f7e2 fda0 	bl	8000ac0 <__aeabi_dcmplt>
 801df80:	4603      	mov	r3, r0
 801df82:	2b00      	cmp	r3, #0
 801df84:	d003      	beq.n	801df8e <qr_5a2P8Gh6+0x656>
 801df86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801df8a:	2b13      	cmp	r3, #19
 801df8c:	dda5      	ble.n	801deda <qr_5a2P8Gh6+0x5a2>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(1, b_A, 6));
 801df8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801df92:	2206      	movs	r2, #6
 801df94:	4619      	mov	r1, r3
 801df96:	2001      	movs	r0, #1
 801df98:	f004 fcc6 	bl	8022928 <xnrm2_xDOlDEtw>
 801df9c:	eeb0 7a40 	vmov.f32	s14, s0
 801dfa0:	eef0 7a60 	vmov.f32	s15, s1
 801dfa4:	eeb0 1a47 	vmov.f32	s2, s14
 801dfa8:	eef0 1a67 	vmov.f32	s3, s15
 801dfac:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 801dfb0:	f001 ff26 	bl	801fe00 <rt_hypotd_snf>
 801dfb4:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 801dfb8:	f04f 0200 	mov.w	r2, #0
 801dfbc:	f04f 0300 	mov.w	r3, #0
 801dfc0:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801dfc4:	f7e2 fd90 	bl	8000ae8 <__aeabi_dcmpge>
 801dfc8:	4603      	mov	r3, r0
 801dfca:	2b00      	cmp	r3, #0
 801dfcc:	d009      	beq.n	801dfe2 <qr_5a2P8Gh6+0x6aa>
        beta1 = -beta1;
 801dfce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801dfd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801dfd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801dfda:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801dfde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 801dfe2:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801dfe6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801dfea:	f7e2 f93f 	bl	800026c <__aeabi_dsub>
 801dfee:	4602      	mov	r2, r0
 801dff0:	460b      	mov	r3, r1
 801dff2:	4610      	mov	r0, r2
 801dff4:	4619      	mov	r1, r3
 801dff6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801dffa:	f7e2 fc19 	bl	8000830 <__aeabi_ddiv>
 801dffe:	4602      	mov	r2, r0
 801e000:	460b      	mov	r3, r1
 801e002:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (atmp - beta1);
 801e006:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801e00a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801e00e:	f7e2 f92d 	bl	800026c <__aeabi_dsub>
 801e012:	4602      	mov	r2, r0
 801e014:	460b      	mov	r3, r1
 801e016:	f04f 0000 	mov.w	r0, #0
 801e01a:	4984      	ldr	r1, [pc, #528]	; (801e22c <qr_5a2P8Gh6+0x8f4>)
 801e01c:	f7e2 fc08 	bl	8000830 <__aeabi_ddiv>
 801e020:	4602      	mov	r2, r0
 801e022:	460b      	mov	r3, r1
 801e024:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801e028:	2305      	movs	r3, #5
 801e02a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e02e:	e01c      	b.n	801e06a <qr_5a2P8Gh6+0x732>
        b_A[b_coltop] *= atmp;
 801e030:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e034:	00db      	lsls	r3, r3, #3
 801e036:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e03a:	4413      	add	r3, r2
 801e03c:	3b80      	subs	r3, #128	; 0x80
 801e03e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e042:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801e046:	f7e2 fac9 	bl	80005dc <__aeabi_dmul>
 801e04a:	4602      	mov	r2, r0
 801e04c:	460b      	mov	r3, r1
 801e04e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e052:	00c9      	lsls	r1, r1, #3
 801e054:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801e058:	4401      	add	r1, r0
 801e05a:	3980      	subs	r1, #128	; 0x80
 801e05c:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801e060:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e064:	3301      	adds	r3, #1
 801e066:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e06a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e06e:	2b05      	cmp	r3, #5
 801e070:	ddde      	ble.n	801e030 <qr_5a2P8Gh6+0x6f8>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801e072:	2300      	movs	r3, #0
 801e074:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e078:	e010      	b.n	801e09c <qr_5a2P8Gh6+0x764>
        beta1 *= 1.0020841800044864E-292;
 801e07a:	f04f 0200 	mov.w	r2, #0
 801e07e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801e082:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801e086:	f7e2 faa9 	bl	80005dc <__aeabi_dmul>
 801e08a:	4602      	mov	r2, r0
 801e08c:	460b      	mov	r3, r1
 801e08e:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801e092:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e096:	3301      	adds	r3, #1
 801e098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e09c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e0a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e0a4:	429a      	cmp	r2, r3
 801e0a6:	dbe8      	blt.n	801e07a <qr_5a2P8Gh6+0x742>
      }

      atmp = beta1;
 801e0a8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801e0ac:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 801e0b0:	e04b      	b.n	801e14a <qr_5a2P8Gh6+0x812>
    } else {
      tau_idx_1 = (beta1 - b_A[4]) / beta1;
 801e0b2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801e0b6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801e0ba:	f7e2 f8d7 	bl	800026c <__aeabi_dsub>
 801e0be:	4602      	mov	r2, r0
 801e0c0:	460b      	mov	r3, r1
 801e0c2:	4610      	mov	r0, r2
 801e0c4:	4619      	mov	r1, r3
 801e0c6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801e0ca:	f7e2 fbb1 	bl	8000830 <__aeabi_ddiv>
 801e0ce:	4602      	mov	r2, r0
 801e0d0:	460b      	mov	r3, r1
 801e0d2:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (b_A[4] - beta1);
 801e0d6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801e0da:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801e0de:	f7e2 f8c5 	bl	800026c <__aeabi_dsub>
 801e0e2:	4602      	mov	r2, r0
 801e0e4:	460b      	mov	r3, r1
 801e0e6:	f04f 0000 	mov.w	r0, #0
 801e0ea:	4950      	ldr	r1, [pc, #320]	; (801e22c <qr_5a2P8Gh6+0x8f4>)
 801e0ec:	f7e2 fba0 	bl	8000830 <__aeabi_ddiv>
 801e0f0:	4602      	mov	r2, r0
 801e0f2:	460b      	mov	r3, r1
 801e0f4:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 801e0f8:	2305      	movs	r3, #5
 801e0fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e0fe:	e01c      	b.n	801e13a <qr_5a2P8Gh6+0x802>
        b_A[c_lastc] *= atmp;
 801e100:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e104:	00db      	lsls	r3, r3, #3
 801e106:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e10a:	4413      	add	r3, r2
 801e10c:	3b80      	subs	r3, #128	; 0x80
 801e10e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e112:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801e116:	f7e2 fa61 	bl	80005dc <__aeabi_dmul>
 801e11a:	4602      	mov	r2, r0
 801e11c:	460b      	mov	r3, r1
 801e11e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801e122:	00c9      	lsls	r1, r1, #3
 801e124:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801e128:	4401      	add	r1, r0
 801e12a:	3980      	subs	r1, #128	; 0x80
 801e12c:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 801e130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e134:	3301      	adds	r3, #1
 801e136:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e13a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e13e:	2b05      	cmp	r3, #5
 801e140:	ddde      	ble.n	801e100 <qr_5a2P8Gh6+0x7c8>
      }

      atmp = beta1;
 801e142:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801e146:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[4] = 1.0;
 801e14a:	f04f 0200 	mov.w	r2, #0
 801e14e:	4b37      	ldr	r3, [pc, #220]	; (801e22c <qr_5a2P8Gh6+0x8f4>)
 801e150:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 801e154:	f04f 0200 	mov.w	r2, #0
 801e158:	f04f 0300 	mov.w	r3, #0
 801e15c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801e160:	f7e2 fca4 	bl	8000aac <__aeabi_dcmpeq>
 801e164:	4603      	mov	r3, r0
 801e166:	2b00      	cmp	r3, #0
 801e168:	d162      	bne.n	801e230 <qr_5a2P8Gh6+0x8f8>
    knt = 2;
 801e16a:	2302      	movs	r3, #2
 801e16c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 5;
 801e170:	2305      	movs	r3, #5
 801e172:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801e176:	e009      	b.n	801e18c <qr_5a2P8Gh6+0x854>
      knt--;
 801e178:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e17c:	3b01      	subs	r3, #1
 801e17e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 801e182:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e186:	3b01      	subs	r3, #1
 801e188:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801e18c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e190:	2b00      	cmp	r3, #0
 801e192:	dd11      	ble.n	801e1b8 <qr_5a2P8Gh6+0x880>
 801e194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e198:	00db      	lsls	r3, r3, #3
 801e19a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e19e:	4413      	add	r3, r2
 801e1a0:	3b80      	subs	r3, #128	; 0x80
 801e1a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e1a6:	f04f 0200 	mov.w	r2, #0
 801e1aa:	f04f 0300 	mov.w	r3, #0
 801e1ae:	f7e2 fc7d 	bl	8000aac <__aeabi_dcmpeq>
 801e1b2:	4603      	mov	r3, r0
 801e1b4:	2b00      	cmp	r3, #0
 801e1b6:	d1df      	bne.n	801e178 <qr_5a2P8Gh6+0x840>
    }

    c_lastc = 1;
 801e1b8:	2301      	movs	r3, #1
 801e1ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    coltop = 7;
 801e1be:	2307      	movs	r3, #7
 801e1c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    do {
      exitg1 = 0;
 801e1c4:	2300      	movs	r3, #0
 801e1c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (coltop + 1 <= knt + 7) {
 801e1ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e1ce:	3306      	adds	r3, #6
 801e1d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801e1d4:	429a      	cmp	r2, r3
 801e1d6:	dc1b      	bgt.n	801e210 <qr_5a2P8Gh6+0x8d8>
        if (b_A[coltop] != 0.0) {
 801e1d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e1dc:	00db      	lsls	r3, r3, #3
 801e1de:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e1e2:	4413      	add	r3, r2
 801e1e4:	3b80      	subs	r3, #128	; 0x80
 801e1e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e1ea:	f04f 0200 	mov.w	r2, #0
 801e1ee:	f04f 0300 	mov.w	r3, #0
 801e1f2:	f7e2 fc5b 	bl	8000aac <__aeabi_dcmpeq>
 801e1f6:	4603      	mov	r3, r0
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	d103      	bne.n	801e204 <qr_5a2P8Gh6+0x8cc>
          exitg1 = 1;
 801e1fc:	2301      	movs	r3, #1
 801e1fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801e202:	e00b      	b.n	801e21c <qr_5a2P8Gh6+0x8e4>
        } else {
          coltop++;
 801e204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e208:	3301      	adds	r3, #1
 801e20a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801e20e:	e005      	b.n	801e21c <qr_5a2P8Gh6+0x8e4>
        }
      } else {
        c_lastc = 0;
 801e210:	2300      	movs	r3, #0
 801e212:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        exitg1 = 1;
 801e216:	2301      	movs	r3, #1
 801e218:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 801e21c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e220:	2b00      	cmp	r3, #0
 801e222:	d0cf      	beq.n	801e1c4 <qr_5a2P8Gh6+0x88c>
 801e224:	e00a      	b.n	801e23c <qr_5a2P8Gh6+0x904>
 801e226:	bf00      	nop
 801e228:	7c900000 	.word	0x7c900000
 801e22c:	3ff00000 	.word	0x3ff00000
  } else {
    knt = 0;
 801e230:	2300      	movs	r3, #0
 801e232:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 801e236:	2300      	movs	r3, #0
 801e238:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 801e23c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e240:	2b00      	cmp	r3, #0
 801e242:	dd29      	ble.n	801e298 <qr_5a2P8Gh6+0x960>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 8, b_A, 5, work);
 801e244:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801e248:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e24c:	9302      	str	r3, [sp, #8]
 801e24e:	2305      	movs	r3, #5
 801e250:	9301      	str	r3, [sp, #4]
 801e252:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e256:	9300      	str	r3, [sp, #0]
 801e258:	2308      	movs	r3, #8
 801e25a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801e25e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801e262:	f003 ff1d 	bl	80220a0 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_1, 5, work, b_A, 8);
 801e266:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e26a:	623b      	str	r3, [r7, #32]
 801e26c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e274:	627b      	str	r3, [r7, #36]	; 0x24
 801e276:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801e27a:	2308      	movs	r3, #8
 801e27c:	9301      	str	r3, [sp, #4]
 801e27e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e282:	9300      	str	r3, [sp, #0]
 801e284:	4613      	mov	r3, r2
 801e286:	2205      	movs	r2, #5
 801e288:	ed97 0b08 	vldr	d0, [r7, #32]
 801e28c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801e290:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801e294:	f004 f80d 	bl	80222b2 <xgerc_tNNiazQU>
  }

  b_A[4] = atmp;
 801e298:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801e29c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  R[0] = b_A[0];
 801e2a0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801e2a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801e2a6:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801e2aa:	2301      	movs	r3, #1
 801e2ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e2b0:	e00f      	b.n	801e2d2 <qr_5a2P8Gh6+0x99a>
    R[c_lastc] = 0.0;
 801e2b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e2b6:	00db      	lsls	r3, r3, #3
 801e2b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e2ba:	18d1      	adds	r1, r2, r3
 801e2bc:	f04f 0200 	mov.w	r2, #0
 801e2c0:	f04f 0300 	mov.w	r3, #0
 801e2c4:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801e2c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e2cc:	3301      	adds	r3, #1
 801e2ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e2d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e2d6:	2b02      	cmp	r3, #2
 801e2d8:	ddeb      	ble.n	801e2b2 <qr_5a2P8Gh6+0x97a>
  }

  work[0] = 0.0;
 801e2da:	f04f 0200 	mov.w	r2, #0
 801e2de:	f04f 0300 	mov.w	r3, #0
 801e2e2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801e2e6:	2300      	movs	r3, #0
 801e2e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e2ec:	e016      	b.n	801e31c <qr_5a2P8Gh6+0x9e4>
    R[c_lastc + 3] = b_A[c_lastc + 3];
 801e2ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e2f2:	3303      	adds	r3, #3
 801e2f4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e2f8:	3203      	adds	r2, #3
 801e2fa:	00d2      	lsls	r2, r2, #3
 801e2fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801e2fe:	4411      	add	r1, r2
 801e300:	00db      	lsls	r3, r3, #3
 801e302:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e306:	4413      	add	r3, r2
 801e308:	3b80      	subs	r3, #128	; 0x80
 801e30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e30e:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801e312:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e316:	3301      	adds	r3, #1
 801e318:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e31c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e320:	2b01      	cmp	r3, #1
 801e322:	dde4      	ble.n	801e2ee <qr_5a2P8Gh6+0x9b6>
  }

  while (c_lastc + 1 < 4) {
 801e324:	e010      	b.n	801e348 <qr_5a2P8Gh6+0xa10>
    R[c_lastc + 3] = 0.0;
 801e326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e32a:	3303      	adds	r3, #3
 801e32c:	00db      	lsls	r3, r3, #3
 801e32e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e330:	18d1      	adds	r1, r2, r3
 801e332:	f04f 0200 	mov.w	r2, #0
 801e336:	f04f 0300 	mov.w	r3, #0
 801e33a:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 801e33e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e342:	3301      	adds	r3, #1
 801e344:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  while (c_lastc + 1 < 4) {
 801e348:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e34c:	2b02      	cmp	r3, #2
 801e34e:	ddea      	ble.n	801e326 <qr_5a2P8Gh6+0x9ee>
  }

  work[1] = 0.0;
 801e350:	f04f 0200 	mov.w	r2, #0
 801e354:	f04f 0300 	mov.w	r3, #0
 801e358:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801e35c:	2300      	movs	r3, #0
 801e35e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e362:	e016      	b.n	801e392 <qr_5a2P8Gh6+0xa5a>
    R[c_lastc + 6] = b_A[c_lastc + 6];
 801e364:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e368:	3306      	adds	r3, #6
 801e36a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e36e:	3206      	adds	r2, #6
 801e370:	00d2      	lsls	r2, r2, #3
 801e372:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801e374:	4411      	add	r1, r2
 801e376:	00db      	lsls	r3, r3, #3
 801e378:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e37c:	4413      	add	r3, r2
 801e37e:	3b80      	subs	r3, #128	; 0x80
 801e380:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e384:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801e388:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e38c:	3301      	adds	r3, #1
 801e38e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e392:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e396:	2b02      	cmp	r3, #2
 801e398:	dde4      	ble.n	801e364 <qr_5a2P8Gh6+0xa2c>
  }

  work[2] = 0.0;
 801e39a:	f04f 0200 	mov.w	r2, #0
 801e39e:	f04f 0300 	mov.w	r3, #0
 801e3a2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  b_A[8] = 1.0;
 801e3a6:	f04f 0200 	mov.w	r2, #0
 801e3aa:	4bc8      	ldr	r3, [pc, #800]	; (801e6cc <qr_5a2P8Gh6+0xd94>)
 801e3ac:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801e3b0:	2300      	movs	r3, #0
 801e3b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e3b6:	e014      	b.n	801e3e2 <qr_5a2P8Gh6+0xaaa>
    b_A[7 - c_lastc] = 0.0;
 801e3b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e3bc:	f1c3 0307 	rsb	r3, r3, #7
 801e3c0:	00db      	lsls	r3, r3, #3
 801e3c2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e3c6:	4413      	add	r3, r2
 801e3c8:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 801e3cc:	f04f 0200 	mov.w	r2, #0
 801e3d0:	f04f 0300 	mov.w	r3, #0
 801e3d4:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801e3d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e3dc:	3301      	adds	r3, #1
 801e3de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e3e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e3e6:	2b01      	cmp	r3, #1
 801e3e8:	dde6      	ble.n	801e3b8 <qr_5a2P8Gh6+0xa80>
  }

  b_A[4] = 1.0;
 801e3ea:	f04f 0200 	mov.w	r2, #0
 801e3ee:	4bb7      	ldr	r3, [pc, #732]	; (801e6cc <qr_5a2P8Gh6+0xd94>)
 801e3f0:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 801e3f4:	f04f 0200 	mov.w	r2, #0
 801e3f8:	f04f 0300 	mov.w	r3, #0
 801e3fc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801e400:	f7e2 fb54 	bl	8000aac <__aeabi_dcmpeq>
 801e404:	4603      	mov	r3, r0
 801e406:	2b00      	cmp	r3, #0
 801e408:	d15c      	bne.n	801e4c4 <qr_5a2P8Gh6+0xb8c>
    b_coltop = 7;
 801e40a:	2307      	movs	r3, #7
 801e40c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801e410:	e009      	b.n	801e426 <qr_5a2P8Gh6+0xaee>
      c_lastc--;
 801e412:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e416:	3b01      	subs	r3, #1
 801e418:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 801e41c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e420:	3b01      	subs	r3, #1
 801e422:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801e426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	dd12      	ble.n	801e454 <qr_5a2P8Gh6+0xb1c>
 801e42e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e432:	3b02      	subs	r3, #2
 801e434:	00db      	lsls	r3, r3, #3
 801e436:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e43a:	4413      	add	r3, r2
 801e43c:	3b80      	subs	r3, #128	; 0x80
 801e43e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e442:	f04f 0200 	mov.w	r2, #0
 801e446:	f04f 0300 	mov.w	r3, #0
 801e44a:	f7e2 fb2f 	bl	8000aac <__aeabi_dcmpeq>
 801e44e:	4603      	mov	r3, r0
 801e450:	2b00      	cmp	r3, #0
 801e452:	d1de      	bne.n	801e412 <qr_5a2P8Gh6+0xada>
    }

    b_coltop = 1;
 801e454:	2301      	movs	r3, #1
 801e456:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    knt = 8;
 801e45a:	2308      	movs	r3, #8
 801e45c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    do {
      exitg1 = 0;
 801e460:	2300      	movs	r3, #0
 801e462:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (knt <= c_lastc + 7) {
 801e466:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e46a:	3307      	adds	r3, #7
 801e46c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801e470:	429a      	cmp	r2, r3
 801e472:	dc1c      	bgt.n	801e4ae <qr_5a2P8Gh6+0xb76>
        if (b_A[knt - 1] != 0.0) {
 801e474:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e478:	3b01      	subs	r3, #1
 801e47a:	00db      	lsls	r3, r3, #3
 801e47c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e480:	4413      	add	r3, r2
 801e482:	3b80      	subs	r3, #128	; 0x80
 801e484:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e488:	f04f 0200 	mov.w	r2, #0
 801e48c:	f04f 0300 	mov.w	r3, #0
 801e490:	f7e2 fb0c 	bl	8000aac <__aeabi_dcmpeq>
 801e494:	4603      	mov	r3, r0
 801e496:	2b00      	cmp	r3, #0
 801e498:	d103      	bne.n	801e4a2 <qr_5a2P8Gh6+0xb6a>
          exitg1 = 1;
 801e49a:	2301      	movs	r3, #1
 801e49c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801e4a0:	e00b      	b.n	801e4ba <qr_5a2P8Gh6+0xb82>
        } else {
          knt++;
 801e4a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e4a6:	3301      	adds	r3, #1
 801e4a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801e4ac:	e005      	b.n	801e4ba <qr_5a2P8Gh6+0xb82>
        }
      } else {
        b_coltop = 0;
 801e4ae:	2300      	movs	r3, #0
 801e4b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        exitg1 = 1;
 801e4b4:	2301      	movs	r3, #1
 801e4b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 801e4ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e4be:	2b00      	cmp	r3, #0
 801e4c0:	d0ce      	beq.n	801e460 <qr_5a2P8Gh6+0xb28>
 801e4c2:	e005      	b.n	801e4d0 <qr_5a2P8Gh6+0xb98>
  } else {
    c_lastc = 0;
 801e4c4:	2300      	movs	r3, #0
 801e4c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 801e4ca:	2300      	movs	r3, #0
 801e4cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 801e4d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	dd29      	ble.n	801e52c <qr_5a2P8Gh6+0xbf4>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 8, b_A, 5, work);
 801e4d8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801e4dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e4e0:	9302      	str	r3, [sp, #8]
 801e4e2:	2305      	movs	r3, #5
 801e4e4:	9301      	str	r3, [sp, #4]
 801e4e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e4ea:	9300      	str	r3, [sp, #0]
 801e4ec:	2308      	movs	r3, #8
 801e4ee:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e4f2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801e4f6:	f003 fdd3 	bl	80220a0 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_1, 5, work, b_A, 8);
 801e4fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e4fe:	61bb      	str	r3, [r7, #24]
 801e500:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e504:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e508:	61fb      	str	r3, [r7, #28]
 801e50a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801e50e:	2308      	movs	r3, #8
 801e510:	9301      	str	r3, [sp, #4]
 801e512:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e516:	9300      	str	r3, [sp, #0]
 801e518:	4613      	mov	r3, r2
 801e51a:	2205      	movs	r2, #5
 801e51c:	ed97 0b06 	vldr	d0, [r7, #24]
 801e520:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e524:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801e528:	f003 fec3 	bl	80222b2 <xgerc_tNNiazQU>
  }

  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801e52c:	2305      	movs	r3, #5
 801e52e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e532:	e024      	b.n	801e57e <qr_5a2P8Gh6+0xc46>
    b_A[b_coltop] *= -tau_idx_1;
 801e534:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e538:	00db      	lsls	r3, r3, #3
 801e53a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e53e:	4413      	add	r3, r2
 801e540:	3b80      	subs	r3, #128	; 0x80
 801e542:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e546:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e54a:	613b      	str	r3, [r7, #16]
 801e54c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e550:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e554:	617b      	str	r3, [r7, #20]
 801e556:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e55a:	f7e2 f83f 	bl	80005dc <__aeabi_dmul>
 801e55e:	4602      	mov	r2, r0
 801e560:	460b      	mov	r3, r1
 801e562:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e566:	00c9      	lsls	r1, r1, #3
 801e568:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801e56c:	4401      	add	r1, r0
 801e56e:	3980      	subs	r1, #128	; 0x80
 801e570:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801e574:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e578:	3301      	adds	r3, #1
 801e57a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e57e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e582:	2b05      	cmp	r3, #5
 801e584:	ddd6      	ble.n	801e534 <qr_5a2P8Gh6+0xbfc>
  }

  b_A[4] = 1.0 - tau_idx_1;
 801e586:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 801e58a:	f04f 0000 	mov.w	r0, #0
 801e58e:	494f      	ldr	r1, [pc, #316]	; (801e6cc <qr_5a2P8Gh6+0xd94>)
 801e590:	f7e1 fe6c 	bl	800026c <__aeabi_dsub>
 801e594:	4602      	mov	r2, r0
 801e596:	460b      	mov	r3, r1
 801e598:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  b_A[3] = 0.0;
 801e59c:	f04f 0200 	mov.w	r2, #0
 801e5a0:	f04f 0300 	mov.w	r3, #0
 801e5a4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_A[0] = 1.0;
 801e5a8:	f04f 0200 	mov.w	r2, #0
 801e5ac:	4b47      	ldr	r3, [pc, #284]	; (801e6cc <qr_5a2P8Gh6+0xd94>)
 801e5ae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 801e5b2:	f04f 0200 	mov.w	r2, #0
 801e5b6:	f04f 0300 	mov.w	r3, #0
 801e5ba:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801e5be:	f7e2 fa75 	bl	8000aac <__aeabi_dcmpeq>
 801e5c2:	4603      	mov	r3, r0
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	f040 8083 	bne.w	801e6d0 <qr_5a2P8Gh6+0xd98>
    c_lastc = 3;
 801e5ca:	2303      	movs	r3, #3
 801e5cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 4;
 801e5d0:	2304      	movs	r3, #4
 801e5d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801e5d6:	e009      	b.n	801e5ec <qr_5a2P8Gh6+0xcb4>
      c_lastc--;
 801e5d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e5dc:	3b01      	subs	r3, #1
 801e5de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 801e5e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e5e6:	3b01      	subs	r3, #1
 801e5e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801e5ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e5f0:	2b00      	cmp	r3, #0
 801e5f2:	dd12      	ble.n	801e61a <qr_5a2P8Gh6+0xce2>
 801e5f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e5f8:	3b02      	subs	r3, #2
 801e5fa:	00db      	lsls	r3, r3, #3
 801e5fc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e600:	4413      	add	r3, r2
 801e602:	3b80      	subs	r3, #128	; 0x80
 801e604:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e608:	f04f 0200 	mov.w	r2, #0
 801e60c:	f04f 0300 	mov.w	r3, #0
 801e610:	f7e2 fa4c 	bl	8000aac <__aeabi_dcmpeq>
 801e614:	4603      	mov	r3, r0
 801e616:	2b00      	cmp	r3, #0
 801e618:	d1de      	bne.n	801e5d8 <qr_5a2P8Gh6+0xca0>
    }

    b_coltop = 2;
 801e61a:	2302      	movs	r3, #2
 801e61c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    exitg2 = false;
 801e620:	2300      	movs	r3, #0
 801e622:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 801e626:	e048      	b.n	801e6ba <qr_5a2P8Gh6+0xd82>
      coltop = (b_coltop - 1) * 3 + 4;
 801e628:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e62c:	1e5a      	subs	r2, r3, #1
 801e62e:	4613      	mov	r3, r2
 801e630:	005b      	lsls	r3, r3, #1
 801e632:	4413      	add	r3, r2
 801e634:	3304      	adds	r3, #4
 801e636:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      knt = coltop;
 801e63a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e63e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        exitg1 = 0;
 801e642:	2300      	movs	r3, #0
 801e644:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (knt <= (coltop + c_lastc) - 1) {
 801e648:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801e64c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e650:	4413      	add	r3, r2
 801e652:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801e656:	429a      	cmp	r2, r3
 801e658:	da1c      	bge.n	801e694 <qr_5a2P8Gh6+0xd5c>
          if (b_A[knt - 1] != 0.0) {
 801e65a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e65e:	3b01      	subs	r3, #1
 801e660:	00db      	lsls	r3, r3, #3
 801e662:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e666:	4413      	add	r3, r2
 801e668:	3b80      	subs	r3, #128	; 0x80
 801e66a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e66e:	f04f 0200 	mov.w	r2, #0
 801e672:	f04f 0300 	mov.w	r3, #0
 801e676:	f7e2 fa19 	bl	8000aac <__aeabi_dcmpeq>
 801e67a:	4603      	mov	r3, r0
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	d103      	bne.n	801e688 <qr_5a2P8Gh6+0xd50>
            exitg1 = 1;
 801e680:	2301      	movs	r3, #1
 801e682:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801e686:	e00d      	b.n	801e6a4 <qr_5a2P8Gh6+0xd6c>
          } else {
            knt++;
 801e688:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e68c:	3301      	adds	r3, #1
 801e68e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801e692:	e007      	b.n	801e6a4 <qr_5a2P8Gh6+0xd6c>
          }
        } else {
          b_coltop--;
 801e694:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e698:	3b01      	subs	r3, #1
 801e69a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          exitg1 = 2;
 801e69e:	2302      	movs	r3, #2
 801e6a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 801e6a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e6a8:	2b00      	cmp	r3, #0
 801e6aa:	d0ca      	beq.n	801e642 <qr_5a2P8Gh6+0xd0a>

      if (exitg1 == 1) {
 801e6ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e6b0:	2b01      	cmp	r3, #1
 801e6b2:	d102      	bne.n	801e6ba <qr_5a2P8Gh6+0xd82>
        exitg2 = true;
 801e6b4:	2301      	movs	r3, #1
 801e6b6:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 801e6ba:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	d10c      	bne.n	801e6dc <qr_5a2P8Gh6+0xda4>
 801e6c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e6c6:	2b00      	cmp	r3, #0
 801e6c8:	dcae      	bgt.n	801e628 <qr_5a2P8Gh6+0xcf0>
 801e6ca:	e007      	b.n	801e6dc <qr_5a2P8Gh6+0xda4>
 801e6cc:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 801e6d0:	2300      	movs	r3, #0
 801e6d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 801e6d6:	2300      	movs	r3, #0
 801e6d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 801e6dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e6e0:	2b00      	cmp	r3, #0
 801e6e2:	dd29      	ble.n	801e738 <qr_5a2P8Gh6+0xe00>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 4, b_A, 1, work);
 801e6e4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801e6e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e6ec:	9302      	str	r3, [sp, #8]
 801e6ee:	2301      	movs	r3, #1
 801e6f0:	9301      	str	r3, [sp, #4]
 801e6f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e6f6:	9300      	str	r3, [sp, #0]
 801e6f8:	2304      	movs	r3, #4
 801e6fa:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e6fe:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801e702:	f003 fccd 	bl	80220a0 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 4);
 801e706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e70a:	60bb      	str	r3, [r7, #8]
 801e70c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e710:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e714:	60fb      	str	r3, [r7, #12]
 801e716:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801e71a:	2304      	movs	r3, #4
 801e71c:	9301      	str	r3, [sp, #4]
 801e71e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e722:	9300      	str	r3, [sp, #0]
 801e724:	4613      	mov	r3, r2
 801e726:	2201      	movs	r2, #1
 801e728:	ed97 0b02 	vldr	d0, [r7, #8]
 801e72c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e730:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801e734:	f003 fdbd 	bl	80222b2 <xgerc_tNNiazQU>
  }

  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801e738:	2301      	movs	r3, #1
 801e73a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e73e:	e024      	b.n	801e78a <qr_5a2P8Gh6+0xe52>
    b_A[b_coltop] *= -tau_idx_0;
 801e740:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e744:	00db      	lsls	r3, r3, #3
 801e746:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e74a:	4413      	add	r3, r2
 801e74c:	3b80      	subs	r3, #128	; 0x80
 801e74e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e756:	603b      	str	r3, [r7, #0]
 801e758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e75c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e760:	607b      	str	r3, [r7, #4]
 801e762:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e766:	f7e1 ff39 	bl	80005dc <__aeabi_dmul>
 801e76a:	4602      	mov	r2, r0
 801e76c:	460b      	mov	r3, r1
 801e76e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e772:	00c9      	lsls	r1, r1, #3
 801e774:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801e778:	4401      	add	r1, r0
 801e77a:	3980      	subs	r1, #128	; 0x80
 801e77c:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801e780:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e784:	3301      	adds	r3, #1
 801e786:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e78a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e78e:	2b02      	cmp	r3, #2
 801e790:	ddd6      	ble.n	801e740 <qr_5a2P8Gh6+0xe08>
  }

  b_A[0] = 1.0 - tau_idx_0;
 801e792:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 801e796:	f04f 0000 	mov.w	r0, #0
 801e79a:	492a      	ldr	r1, [pc, #168]	; (801e844 <qr_5a2P8Gh6+0xf0c>)
 801e79c:	f7e1 fd66 	bl	800026c <__aeabi_dsub>
 801e7a0:	4602      	mov	r2, r0
 801e7a2:	460b      	mov	r3, r1
 801e7a4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  c_lastc = 0;
 801e7a8:	2300      	movs	r3, #0
 801e7aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 801e7ae:	2300      	movs	r3, #0
 801e7b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e7b4:	e03d      	b.n	801e832 <qr_5a2P8Gh6+0xefa>
    Q[c_lastc] = b_A[c_lastc];
 801e7b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e7ba:	00db      	lsls	r3, r3, #3
 801e7bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e7be:	18d1      	adds	r1, r2, r3
 801e7c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e7c4:	00db      	lsls	r3, r3, #3
 801e7c6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e7ca:	4413      	add	r3, r2
 801e7cc:	3b80      	subs	r3, #128	; 0x80
 801e7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7d2:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 1] = b_A[c_lastc + 1];
 801e7d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e7da:	3301      	adds	r3, #1
 801e7dc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e7e0:	3201      	adds	r2, #1
 801e7e2:	00d2      	lsls	r2, r2, #3
 801e7e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801e7e6:	4411      	add	r1, r2
 801e7e8:	00db      	lsls	r3, r3, #3
 801e7ea:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e7ee:	4413      	add	r3, r2
 801e7f0:	3b80      	subs	r3, #128	; 0x80
 801e7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7f6:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 2] = b_A[c_lastc + 2];
 801e7fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e7fe:	3302      	adds	r3, #2
 801e800:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e804:	3202      	adds	r2, #2
 801e806:	00d2      	lsls	r2, r2, #3
 801e808:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801e80a:	4411      	add	r1, r2
 801e80c:	00db      	lsls	r3, r3, #3
 801e80e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e812:	4413      	add	r3, r2
 801e814:	3b80      	subs	r3, #128	; 0x80
 801e816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e81a:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc += 3;
 801e81e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e822:	3303      	adds	r3, #3
 801e824:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 801e828:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e82c:	3301      	adds	r3, #1
 801e82e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e832:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e836:	2b02      	cmp	r3, #2
 801e838:	ddbd      	ble.n	801e7b6 <qr_5a2P8Gh6+0xe7e>
  }
}
 801e83a:	bf00      	nop
 801e83c:	bf00      	nop
 801e83e:	37f0      	adds	r7, #240	; 0xf0
 801e840:	46bd      	mov	sp, r7
 801e842:	bdb0      	pop	{r4, r5, r7, pc}
 801e844:	3ff00000 	.word	0x3ff00000

0801e848 <qr_DvOBrgQi>:
#include <math.h>
#include "xgemv_NQlWbt2i.h"
#include "xgerc_R09LiDgJ.h"

void qr_DvOBrgQi(const real_T A[18], real_T Q[18], real_T R[9])
{
 801e848:	b5b0      	push	{r4, r5, r7, lr}
 801e84a:	b0da      	sub	sp, #360	; 0x168
 801e84c:	af04      	add	r7, sp, #16
 801e84e:	66f8      	str	r0, [r7, #108]	; 0x6c
 801e850:	66b9      	str	r1, [r7, #104]	; 0x68
 801e852:	667a      	str	r2, [r7, #100]	; 0x64
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 18U * sizeof(real_T));
 801e854:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e858:	2290      	movs	r2, #144	; 0x90
 801e85a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801e85c:	4618      	mov	r0, r3
 801e85e:	f00f ff31 	bl	802e6c4 <memcpy>
  work[0] = 0.0;
 801e862:	f04f 0200 	mov.w	r2, #0
 801e866:	f04f 0300 	mov.w	r3, #0
 801e86a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  work[1] = 0.0;
 801e86e:	f04f 0200 	mov.w	r2, #0
 801e872:	f04f 0300 	mov.w	r3, #0
 801e876:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  work[2] = 0.0;
 801e87a:	f04f 0200 	mov.w	r2, #0
 801e87e:	f04f 0300 	mov.w	r3, #0
 801e882:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  atmp = b_A[0];
 801e886:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801e88a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_0 = 0.0;
 801e88e:	f04f 0200 	mov.w	r2, #0
 801e892:	f04f 0300 	mov.w	r3, #0
 801e896:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  beta1 = xnrm2_nLdASVZH(5, b_A, 2);
 801e89a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e89e:	2202      	movs	r2, #2
 801e8a0:	4619      	mov	r1, r3
 801e8a2:	2005      	movs	r0, #5
 801e8a4:	f003 ff92 	bl	80227cc <xnrm2_nLdASVZH>
 801e8a8:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 801e8ac:	f04f 0200 	mov.w	r2, #0
 801e8b0:	f04f 0300 	mov.w	r3, #0
 801e8b4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801e8b8:	f7e2 f8f8 	bl	8000aac <__aeabi_dcmpeq>
 801e8bc:	4603      	mov	r3, r0
 801e8be:	2b00      	cmp	r3, #0
 801e8c0:	f040 8172 	bne.w	801eba8 <qr_DvOBrgQi+0x360>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 801e8c4:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 801e8c8:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 801e8cc:	eeb0 0a47 	vmov.f32	s0, s14
 801e8d0:	eef0 0a67 	vmov.f32	s1, s15
 801e8d4:	f001 fa94 	bl	801fe00 <rt_hypotd_snf>
 801e8d8:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[0] >= 0.0) {
 801e8dc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801e8e0:	f04f 0200 	mov.w	r2, #0
 801e8e4:	f04f 0300 	mov.w	r3, #0
 801e8e8:	f7e2 f8fe 	bl	8000ae8 <__aeabi_dcmpge>
 801e8ec:	4603      	mov	r3, r0
 801e8ee:	2b00      	cmp	r3, #0
 801e8f0:	d009      	beq.n	801e906 <qr_DvOBrgQi+0xbe>
      beta1 = -beta1;
 801e8f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801e8f6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801e8fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801e8fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e902:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801e906:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 801e90a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801e90e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801e912:	f04f 0200 	mov.w	r2, #0
 801e916:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801e91a:	4620      	mov	r0, r4
 801e91c:	4629      	mov	r1, r5
 801e91e:	f7e2 f8cf 	bl	8000ac0 <__aeabi_dcmplt>
 801e922:	4603      	mov	r3, r0
 801e924:	2b00      	cmp	r3, #0
 801e926:	f000 80f1 	beq.w	801eb0c <qr_DvOBrgQi+0x2c4>
      knt = 0;
 801e92a:	2300      	movs	r3, #0
 801e92c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 801e930:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801e934:	3301      	adds	r3, #1
 801e936:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801e93a:	2301      	movs	r3, #1
 801e93c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801e940:	e01f      	b.n	801e982 <qr_DvOBrgQi+0x13a>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801e942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801e946:	00db      	lsls	r3, r3, #3
 801e948:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801e94c:	4413      	add	r3, r2
 801e94e:	3bd0      	subs	r3, #208	; 0xd0
 801e950:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e954:	f04f 0200 	mov.w	r2, #0
 801e958:	4bca      	ldr	r3, [pc, #808]	; (801ec84 <qr_DvOBrgQi+0x43c>)
 801e95a:	f7e1 fe3f 	bl	80005dc <__aeabi_dmul>
 801e95e:	4602      	mov	r2, r0
 801e960:	460b      	mov	r3, r1
 801e962:	4610      	mov	r0, r2
 801e964:	4619      	mov	r1, r3
 801e966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801e96a:	00db      	lsls	r3, r3, #3
 801e96c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801e970:	4413      	add	r3, r2
 801e972:	3bd0      	subs	r3, #208	; 0xd0
 801e974:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801e978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801e97c:	3301      	adds	r3, #1
 801e97e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801e982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801e986:	2b05      	cmp	r3, #5
 801e988:	dddb      	ble.n	801e942 <qr_DvOBrgQi+0xfa>
        }

        beta1 *= 9.9792015476736E+291;
 801e98a:	f04f 0200 	mov.w	r2, #0
 801e98e:	4bbd      	ldr	r3, [pc, #756]	; (801ec84 <qr_DvOBrgQi+0x43c>)
 801e990:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801e994:	f7e1 fe22 	bl	80005dc <__aeabi_dmul>
 801e998:	4602      	mov	r2, r0
 801e99a:	460b      	mov	r3, r1
 801e99c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 801e9a0:	f04f 0200 	mov.w	r2, #0
 801e9a4:	4bb7      	ldr	r3, [pc, #732]	; (801ec84 <qr_DvOBrgQi+0x43c>)
 801e9a6:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801e9aa:	f7e1 fe17 	bl	80005dc <__aeabi_dmul>
 801e9ae:	4602      	mov	r2, r0
 801e9b0:	460b      	mov	r3, r1
 801e9b2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801e9b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801e9ba:	65bb      	str	r3, [r7, #88]	; 0x58
 801e9bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801e9c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e9c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 801e9c6:	f04f 0200 	mov.w	r2, #0
 801e9ca:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801e9ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801e9d2:	f7e2 f875 	bl	8000ac0 <__aeabi_dcmplt>
 801e9d6:	4603      	mov	r3, r0
 801e9d8:	2b00      	cmp	r3, #0
 801e9da:	d003      	beq.n	801e9e4 <qr_DvOBrgQi+0x19c>
 801e9dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801e9e0:	2b13      	cmp	r3, #19
 801e9e2:	dda5      	ble.n	801e930 <qr_DvOBrgQi+0xe8>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(5, b_A, 2));
 801e9e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e9e8:	2202      	movs	r2, #2
 801e9ea:	4619      	mov	r1, r3
 801e9ec:	2005      	movs	r0, #5
 801e9ee:	f003 feed 	bl	80227cc <xnrm2_nLdASVZH>
 801e9f2:	eeb0 7a40 	vmov.f32	s14, s0
 801e9f6:	eef0 7a60 	vmov.f32	s15, s1
 801e9fa:	eeb0 1a47 	vmov.f32	s2, s14
 801e9fe:	eef0 1a67 	vmov.f32	s3, s15
 801ea02:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 801ea06:	f001 f9fb 	bl	801fe00 <rt_hypotd_snf>
 801ea0a:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 801ea0e:	f04f 0200 	mov.w	r2, #0
 801ea12:	f04f 0300 	mov.w	r3, #0
 801ea16:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801ea1a:	f7e2 f865 	bl	8000ae8 <__aeabi_dcmpge>
 801ea1e:	4603      	mov	r3, r0
 801ea20:	2b00      	cmp	r3, #0
 801ea22:	d009      	beq.n	801ea38 <qr_DvOBrgQi+0x1f0>
        beta1 = -beta1;
 801ea24:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801ea28:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801ea2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ea30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801ea34:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 801ea38:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801ea3c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ea40:	f7e1 fc14 	bl	800026c <__aeabi_dsub>
 801ea44:	4602      	mov	r2, r0
 801ea46:	460b      	mov	r3, r1
 801ea48:	4610      	mov	r0, r2
 801ea4a:	4619      	mov	r1, r3
 801ea4c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ea50:	f7e1 feee 	bl	8000830 <__aeabi_ddiv>
 801ea54:	4602      	mov	r2, r0
 801ea56:	460b      	mov	r3, r1
 801ea58:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (atmp - beta1);
 801ea5c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ea60:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801ea64:	f7e1 fc02 	bl	800026c <__aeabi_dsub>
 801ea68:	4602      	mov	r2, r0
 801ea6a:	460b      	mov	r3, r1
 801ea6c:	f04f 0000 	mov.w	r0, #0
 801ea70:	4985      	ldr	r1, [pc, #532]	; (801ec88 <qr_DvOBrgQi+0x440>)
 801ea72:	f7e1 fedd 	bl	8000830 <__aeabi_ddiv>
 801ea76:	4602      	mov	r2, r0
 801ea78:	460b      	mov	r3, r1
 801ea7a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801ea7e:	2301      	movs	r3, #1
 801ea80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801ea84:	e01e      	b.n	801eac4 <qr_DvOBrgQi+0x27c>
        b_A[b_coltop] *= atmp;
 801ea86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ea8a:	00db      	lsls	r3, r3, #3
 801ea8c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ea90:	4413      	add	r3, r2
 801ea92:	3bd0      	subs	r3, #208	; 0xd0
 801ea94:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ea98:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801ea9c:	f7e1 fd9e 	bl	80005dc <__aeabi_dmul>
 801eaa0:	4602      	mov	r2, r0
 801eaa2:	460b      	mov	r3, r1
 801eaa4:	4610      	mov	r0, r2
 801eaa6:	4619      	mov	r1, r3
 801eaa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801eaac:	00db      	lsls	r3, r3, #3
 801eaae:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801eab2:	4413      	add	r3, r2
 801eab4:	3bd0      	subs	r3, #208	; 0xd0
 801eab6:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801eaba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801eabe:	3301      	adds	r3, #1
 801eac0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801eac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801eac8:	2b05      	cmp	r3, #5
 801eaca:	dddc      	ble.n	801ea86 <qr_DvOBrgQi+0x23e>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801eacc:	2300      	movs	r3, #0
 801eace:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801ead2:	e010      	b.n	801eaf6 <qr_DvOBrgQi+0x2ae>
        beta1 *= 1.0020841800044864E-292;
 801ead4:	f04f 0200 	mov.w	r2, #0
 801ead8:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801eadc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801eae0:	f7e1 fd7c 	bl	80005dc <__aeabi_dmul>
 801eae4:	4602      	mov	r2, r0
 801eae6:	460b      	mov	r3, r1
 801eae8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801eaec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801eaf0:	3301      	adds	r3, #1
 801eaf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801eaf6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801eafa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801eafe:	429a      	cmp	r2, r3
 801eb00:	dbe8      	blt.n	801ead4 <qr_DvOBrgQi+0x28c>
      }

      atmp = beta1;
 801eb02:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801eb06:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 801eb0a:	e04d      	b.n	801eba8 <qr_DvOBrgQi+0x360>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 801eb0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801eb10:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801eb14:	f7e1 fbaa 	bl	800026c <__aeabi_dsub>
 801eb18:	4602      	mov	r2, r0
 801eb1a:	460b      	mov	r3, r1
 801eb1c:	4610      	mov	r0, r2
 801eb1e:	4619      	mov	r1, r3
 801eb20:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801eb24:	f7e1 fe84 	bl	8000830 <__aeabi_ddiv>
 801eb28:	4602      	mov	r2, r0
 801eb2a:	460b      	mov	r3, r1
 801eb2c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (b_A[0] - beta1);
 801eb30:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801eb34:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801eb38:	f7e1 fb98 	bl	800026c <__aeabi_dsub>
 801eb3c:	4602      	mov	r2, r0
 801eb3e:	460b      	mov	r3, r1
 801eb40:	f04f 0000 	mov.w	r0, #0
 801eb44:	4950      	ldr	r1, [pc, #320]	; (801ec88 <qr_DvOBrgQi+0x440>)
 801eb46:	f7e1 fe73 	bl	8000830 <__aeabi_ddiv>
 801eb4a:	4602      	mov	r2, r0
 801eb4c:	460b      	mov	r3, r1
 801eb4e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 801eb52:	2301      	movs	r3, #1
 801eb54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801eb58:	e01e      	b.n	801eb98 <qr_DvOBrgQi+0x350>
        b_A[c_lastc] *= atmp;
 801eb5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801eb5e:	00db      	lsls	r3, r3, #3
 801eb60:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801eb64:	4413      	add	r3, r2
 801eb66:	3bd0      	subs	r3, #208	; 0xd0
 801eb68:	e9d3 0100 	ldrd	r0, r1, [r3]
 801eb6c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801eb70:	f7e1 fd34 	bl	80005dc <__aeabi_dmul>
 801eb74:	4602      	mov	r2, r0
 801eb76:	460b      	mov	r3, r1
 801eb78:	4610      	mov	r0, r2
 801eb7a:	4619      	mov	r1, r3
 801eb7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801eb80:	00db      	lsls	r3, r3, #3
 801eb82:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801eb86:	4413      	add	r3, r2
 801eb88:	3bd0      	subs	r3, #208	; 0xd0
 801eb8a:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 801eb8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801eb92:	3301      	adds	r3, #1
 801eb94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801eb98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801eb9c:	2b05      	cmp	r3, #5
 801eb9e:	dddc      	ble.n	801eb5a <qr_DvOBrgQi+0x312>
      }

      atmp = beta1;
 801eba0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801eba4:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[0] = 1.0;
 801eba8:	f04f 0200 	mov.w	r2, #0
 801ebac:	4b36      	ldr	r3, [pc, #216]	; (801ec88 <qr_DvOBrgQi+0x440>)
 801ebae:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 801ebb2:	f04f 0200 	mov.w	r2, #0
 801ebb6:	f04f 0300 	mov.w	r3, #0
 801ebba:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801ebbe:	f7e1 ff75 	bl	8000aac <__aeabi_dcmpeq>
 801ebc2:	4603      	mov	r3, r0
 801ebc4:	2b00      	cmp	r3, #0
 801ebc6:	f040 8083 	bne.w	801ecd0 <qr_DvOBrgQi+0x488>
    knt = 6;
 801ebca:	2306      	movs	r3, #6
 801ebcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 5;
 801ebd0:	2305      	movs	r3, #5
 801ebd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801ebd6:	e009      	b.n	801ebec <qr_DvOBrgQi+0x3a4>
      knt--;
 801ebd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ebdc:	3b01      	subs	r3, #1
 801ebde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 801ebe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ebe6:	3b01      	subs	r3, #1
 801ebe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801ebec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	dd11      	ble.n	801ec18 <qr_DvOBrgQi+0x3d0>
 801ebf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ebf8:	00db      	lsls	r3, r3, #3
 801ebfa:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ebfe:	4413      	add	r3, r2
 801ec00:	3bd0      	subs	r3, #208	; 0xd0
 801ec02:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ec06:	f04f 0200 	mov.w	r2, #0
 801ec0a:	f04f 0300 	mov.w	r3, #0
 801ec0e:	f7e1 ff4d 	bl	8000aac <__aeabi_dcmpeq>
 801ec12:	4603      	mov	r3, r0
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	d1df      	bne.n	801ebd8 <qr_DvOBrgQi+0x390>
    }

    c_lastc = 2;
 801ec18:	2302      	movs	r3, #2
 801ec1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    exitg2 = false;
 801ec1e:	2300      	movs	r3, #0
 801ec20:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 801ec24:	e04b      	b.n	801ecbe <qr_DvOBrgQi+0x476>
      b_coltop = (c_lastc - 1) * 6 + 6;
 801ec26:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801ec2a:	4613      	mov	r3, r2
 801ec2c:	005b      	lsls	r3, r3, #1
 801ec2e:	4413      	add	r3, r2
 801ec30:	005b      	lsls	r3, r3, #1
 801ec32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      coltop = b_coltop;
 801ec36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ec3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      do {
        exitg1 = 0;
 801ec3e:	2300      	movs	r3, #0
 801ec40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (coltop + 1 <= b_coltop + knt) {
 801ec44:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801ec48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ec4c:	441a      	add	r2, r3
 801ec4e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801ec52:	4293      	cmp	r3, r2
 801ec54:	da20      	bge.n	801ec98 <qr_DvOBrgQi+0x450>
          if (b_A[coltop] != 0.0) {
 801ec56:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801ec5a:	00db      	lsls	r3, r3, #3
 801ec5c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ec60:	4413      	add	r3, r2
 801ec62:	3bd0      	subs	r3, #208	; 0xd0
 801ec64:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ec68:	f04f 0200 	mov.w	r2, #0
 801ec6c:	f04f 0300 	mov.w	r3, #0
 801ec70:	f7e1 ff1c 	bl	8000aac <__aeabi_dcmpeq>
 801ec74:	4603      	mov	r3, r0
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	d108      	bne.n	801ec8c <qr_DvOBrgQi+0x444>
            exitg1 = 1;
 801ec7a:	2301      	movs	r3, #1
 801ec7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801ec80:	e012      	b.n	801eca8 <qr_DvOBrgQi+0x460>
 801ec82:	bf00      	nop
 801ec84:	7c900000 	.word	0x7c900000
 801ec88:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 801ec8c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801ec90:	3301      	adds	r3, #1
 801ec92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801ec96:	e007      	b.n	801eca8 <qr_DvOBrgQi+0x460>
          }
        } else {
          c_lastc--;
 801ec98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ec9c:	3b01      	subs	r3, #1
 801ec9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          exitg1 = 2;
 801eca2:	2302      	movs	r3, #2
 801eca4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 801eca8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801ecac:	2b00      	cmp	r3, #0
 801ecae:	d0c6      	beq.n	801ec3e <qr_DvOBrgQi+0x3f6>

      if (exitg1 == 1) {
 801ecb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801ecb4:	2b01      	cmp	r3, #1
 801ecb6:	d102      	bne.n	801ecbe <qr_DvOBrgQi+0x476>
        exitg2 = true;
 801ecb8:	2301      	movs	r3, #1
 801ecba:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 801ecbe:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 801ecc2:	2b00      	cmp	r3, #0
 801ecc4:	d10a      	bne.n	801ecdc <qr_DvOBrgQi+0x494>
 801ecc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ecca:	2b00      	cmp	r3, #0
 801eccc:	dcab      	bgt.n	801ec26 <qr_DvOBrgQi+0x3de>
 801ecce:	e005      	b.n	801ecdc <qr_DvOBrgQi+0x494>
      }
    }
  } else {
    knt = 0;
 801ecd0:	2300      	movs	r3, #0
 801ecd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 801ecd6:	2300      	movs	r3, #0
 801ecd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 801ecdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	dd29      	ble.n	801ed38 <qr_DvOBrgQi+0x4f0>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 7, b_A, 1, work);
 801ece4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801ece8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ecec:	9302      	str	r3, [sp, #8]
 801ecee:	2301      	movs	r3, #1
 801ecf0:	9301      	str	r3, [sp, #4]
 801ecf2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ecf6:	9300      	str	r3, [sp, #0]
 801ecf8:	2307      	movs	r3, #7
 801ecfa:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801ecfe:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801ed02:	f003 f945 	bl	8021f90 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_0, 1, work, b_A, 7);
 801ed06:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801ed0a:	653b      	str	r3, [r7, #80]	; 0x50
 801ed0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801ed10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801ed14:	657b      	str	r3, [r7, #84]	; 0x54
 801ed16:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801ed1a:	2307      	movs	r3, #7
 801ed1c:	9301      	str	r3, [sp, #4]
 801ed1e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ed22:	9300      	str	r3, [sp, #0]
 801ed24:	4613      	mov	r3, r2
 801ed26:	2201      	movs	r2, #1
 801ed28:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801ed2c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801ed30:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801ed34:	f003 fa3a 	bl	80221ac <xgerc_R09LiDgJ>
  }

  b_A[0] = atmp;
 801ed38:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801ed3c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  atmp = b_A[7];
 801ed40:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801ed44:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_1 = 0.0;
 801ed48:	f04f 0200 	mov.w	r2, #0
 801ed4c:	f04f 0300 	mov.w	r3, #0
 801ed50:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  beta1 = xnrm2_nLdASVZH(4, b_A, 9);
 801ed54:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ed58:	2209      	movs	r2, #9
 801ed5a:	4619      	mov	r1, r3
 801ed5c:	2004      	movs	r0, #4
 801ed5e:	f003 fd35 	bl	80227cc <xnrm2_nLdASVZH>
 801ed62:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 801ed66:	f04f 0200 	mov.w	r2, #0
 801ed6a:	f04f 0300 	mov.w	r3, #0
 801ed6e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ed72:	f7e1 fe9b 	bl	8000aac <__aeabi_dcmpeq>
 801ed76:	4603      	mov	r3, r0
 801ed78:	2b00      	cmp	r3, #0
 801ed7a:	f040 8174 	bne.w	801f066 <qr_DvOBrgQi+0x81e>
    beta1 = rt_hypotd_snf(b_A[7], beta1);
 801ed7e:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 801ed82:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 801ed86:	eeb0 0a47 	vmov.f32	s0, s14
 801ed8a:	eef0 0a67 	vmov.f32	s1, s15
 801ed8e:	f001 f837 	bl	801fe00 <rt_hypotd_snf>
 801ed92:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[7] >= 0.0) {
 801ed96:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801ed9a:	f04f 0200 	mov.w	r2, #0
 801ed9e:	f04f 0300 	mov.w	r3, #0
 801eda2:	f7e1 fea1 	bl	8000ae8 <__aeabi_dcmpge>
 801eda6:	4603      	mov	r3, r0
 801eda8:	2b00      	cmp	r3, #0
 801edaa:	d009      	beq.n	801edc0 <qr_DvOBrgQi+0x578>
      beta1 = -beta1;
 801edac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801edb0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801edb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801edb8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801edbc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801edc0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801edc4:	64bb      	str	r3, [r7, #72]	; 0x48
 801edc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801edca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801edce:	64fb      	str	r3, [r7, #76]	; 0x4c
 801edd0:	f04f 0200 	mov.w	r2, #0
 801edd4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801edd8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801eddc:	f7e1 fe70 	bl	8000ac0 <__aeabi_dcmplt>
 801ede0:	4603      	mov	r3, r0
 801ede2:	2b00      	cmp	r3, #0
 801ede4:	f000 80f1 	beq.w	801efca <qr_DvOBrgQi+0x782>
      knt = 0;
 801ede8:	2300      	movs	r3, #0
 801edea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 801edee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801edf2:	3301      	adds	r3, #1
 801edf4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801edf8:	2308      	movs	r3, #8
 801edfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801edfe:	e01f      	b.n	801ee40 <qr_DvOBrgQi+0x5f8>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801ee00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ee04:	00db      	lsls	r3, r3, #3
 801ee06:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ee0a:	4413      	add	r3, r2
 801ee0c:	3bd0      	subs	r3, #208	; 0xd0
 801ee0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ee12:	f04f 0200 	mov.w	r2, #0
 801ee16:	4bc6      	ldr	r3, [pc, #792]	; (801f130 <qr_DvOBrgQi+0x8e8>)
 801ee18:	f7e1 fbe0 	bl	80005dc <__aeabi_dmul>
 801ee1c:	4602      	mov	r2, r0
 801ee1e:	460b      	mov	r3, r1
 801ee20:	4610      	mov	r0, r2
 801ee22:	4619      	mov	r1, r3
 801ee24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ee28:	00db      	lsls	r3, r3, #3
 801ee2a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ee2e:	4413      	add	r3, r2
 801ee30:	3bd0      	subs	r3, #208	; 0xd0
 801ee32:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801ee36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ee3a:	3301      	adds	r3, #1
 801ee3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801ee40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ee44:	2b0b      	cmp	r3, #11
 801ee46:	dddb      	ble.n	801ee00 <qr_DvOBrgQi+0x5b8>
        }

        beta1 *= 9.9792015476736E+291;
 801ee48:	f04f 0200 	mov.w	r2, #0
 801ee4c:	4bb8      	ldr	r3, [pc, #736]	; (801f130 <qr_DvOBrgQi+0x8e8>)
 801ee4e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ee52:	f7e1 fbc3 	bl	80005dc <__aeabi_dmul>
 801ee56:	4602      	mov	r2, r0
 801ee58:	460b      	mov	r3, r1
 801ee5a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 801ee5e:	f04f 0200 	mov.w	r2, #0
 801ee62:	4bb3      	ldr	r3, [pc, #716]	; (801f130 <qr_DvOBrgQi+0x8e8>)
 801ee64:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801ee68:	f7e1 fbb8 	bl	80005dc <__aeabi_dmul>
 801ee6c:	4602      	mov	r2, r0
 801ee6e:	460b      	mov	r3, r1
 801ee70:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801ee74:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801ee78:	643b      	str	r3, [r7, #64]	; 0x40
 801ee7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ee7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ee82:	647b      	str	r3, [r7, #68]	; 0x44
 801ee84:	f04f 0200 	mov.w	r2, #0
 801ee88:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801ee8c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ee90:	f7e1 fe16 	bl	8000ac0 <__aeabi_dcmplt>
 801ee94:	4603      	mov	r3, r0
 801ee96:	2b00      	cmp	r3, #0
 801ee98:	d003      	beq.n	801eea2 <qr_DvOBrgQi+0x65a>
 801ee9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ee9e:	2b13      	cmp	r3, #19
 801eea0:	dda5      	ble.n	801edee <qr_DvOBrgQi+0x5a6>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(4, b_A, 9));
 801eea2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801eea6:	2209      	movs	r2, #9
 801eea8:	4619      	mov	r1, r3
 801eeaa:	2004      	movs	r0, #4
 801eeac:	f003 fc8e 	bl	80227cc <xnrm2_nLdASVZH>
 801eeb0:	eeb0 7a40 	vmov.f32	s14, s0
 801eeb4:	eef0 7a60 	vmov.f32	s15, s1
 801eeb8:	eeb0 1a47 	vmov.f32	s2, s14
 801eebc:	eef0 1a67 	vmov.f32	s3, s15
 801eec0:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 801eec4:	f000 ff9c 	bl	801fe00 <rt_hypotd_snf>
 801eec8:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 801eecc:	f04f 0200 	mov.w	r2, #0
 801eed0:	f04f 0300 	mov.w	r3, #0
 801eed4:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801eed8:	f7e1 fe06 	bl	8000ae8 <__aeabi_dcmpge>
 801eedc:	4603      	mov	r3, r0
 801eede:	2b00      	cmp	r3, #0
 801eee0:	d009      	beq.n	801eef6 <qr_DvOBrgQi+0x6ae>
        beta1 = -beta1;
 801eee2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801eee6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801eeea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801eeee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801eef2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 801eef6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801eefa:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801eefe:	f7e1 f9b5 	bl	800026c <__aeabi_dsub>
 801ef02:	4602      	mov	r2, r0
 801ef04:	460b      	mov	r3, r1
 801ef06:	4610      	mov	r0, r2
 801ef08:	4619      	mov	r1, r3
 801ef0a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ef0e:	f7e1 fc8f 	bl	8000830 <__aeabi_ddiv>
 801ef12:	4602      	mov	r2, r0
 801ef14:	460b      	mov	r3, r1
 801ef16:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (atmp - beta1);
 801ef1a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ef1e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801ef22:	f7e1 f9a3 	bl	800026c <__aeabi_dsub>
 801ef26:	4602      	mov	r2, r0
 801ef28:	460b      	mov	r3, r1
 801ef2a:	f04f 0000 	mov.w	r0, #0
 801ef2e:	4981      	ldr	r1, [pc, #516]	; (801f134 <qr_DvOBrgQi+0x8ec>)
 801ef30:	f7e1 fc7e 	bl	8000830 <__aeabi_ddiv>
 801ef34:	4602      	mov	r2, r0
 801ef36:	460b      	mov	r3, r1
 801ef38:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801ef3c:	2308      	movs	r3, #8
 801ef3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801ef42:	e01e      	b.n	801ef82 <qr_DvOBrgQi+0x73a>
        b_A[b_coltop] *= atmp;
 801ef44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ef48:	00db      	lsls	r3, r3, #3
 801ef4a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ef4e:	4413      	add	r3, r2
 801ef50:	3bd0      	subs	r3, #208	; 0xd0
 801ef52:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ef56:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801ef5a:	f7e1 fb3f 	bl	80005dc <__aeabi_dmul>
 801ef5e:	4602      	mov	r2, r0
 801ef60:	460b      	mov	r3, r1
 801ef62:	4610      	mov	r0, r2
 801ef64:	4619      	mov	r1, r3
 801ef66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ef6a:	00db      	lsls	r3, r3, #3
 801ef6c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ef70:	4413      	add	r3, r2
 801ef72:	3bd0      	subs	r3, #208	; 0xd0
 801ef74:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801ef78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ef7c:	3301      	adds	r3, #1
 801ef7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801ef82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ef86:	2b0b      	cmp	r3, #11
 801ef88:	dddc      	ble.n	801ef44 <qr_DvOBrgQi+0x6fc>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801ef8a:	2300      	movs	r3, #0
 801ef8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801ef90:	e010      	b.n	801efb4 <qr_DvOBrgQi+0x76c>
        beta1 *= 1.0020841800044864E-292;
 801ef92:	f04f 0200 	mov.w	r2, #0
 801ef96:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801ef9a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ef9e:	f7e1 fb1d 	bl	80005dc <__aeabi_dmul>
 801efa2:	4602      	mov	r2, r0
 801efa4:	460b      	mov	r3, r1
 801efa6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801efaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801efae:	3301      	adds	r3, #1
 801efb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801efb4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801efb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801efbc:	429a      	cmp	r2, r3
 801efbe:	dbe8      	blt.n	801ef92 <qr_DvOBrgQi+0x74a>
      }

      atmp = beta1;
 801efc0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801efc4:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 801efc8:	e04d      	b.n	801f066 <qr_DvOBrgQi+0x81e>
    } else {
      tau_idx_1 = (beta1 - b_A[7]) / beta1;
 801efca:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801efce:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801efd2:	f7e1 f94b 	bl	800026c <__aeabi_dsub>
 801efd6:	4602      	mov	r2, r0
 801efd8:	460b      	mov	r3, r1
 801efda:	4610      	mov	r0, r2
 801efdc:	4619      	mov	r1, r3
 801efde:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801efe2:	f7e1 fc25 	bl	8000830 <__aeabi_ddiv>
 801efe6:	4602      	mov	r2, r0
 801efe8:	460b      	mov	r3, r1
 801efea:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (b_A[7] - beta1);
 801efee:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801eff2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801eff6:	f7e1 f939 	bl	800026c <__aeabi_dsub>
 801effa:	4602      	mov	r2, r0
 801effc:	460b      	mov	r3, r1
 801effe:	f04f 0000 	mov.w	r0, #0
 801f002:	494c      	ldr	r1, [pc, #304]	; (801f134 <qr_DvOBrgQi+0x8ec>)
 801f004:	f7e1 fc14 	bl	8000830 <__aeabi_ddiv>
 801f008:	4602      	mov	r2, r0
 801f00a:	460b      	mov	r3, r1
 801f00c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 801f010:	2308      	movs	r3, #8
 801f012:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f016:	e01e      	b.n	801f056 <qr_DvOBrgQi+0x80e>
        b_A[c_lastc] *= atmp;
 801f018:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f01c:	00db      	lsls	r3, r3, #3
 801f01e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f022:	4413      	add	r3, r2
 801f024:	3bd0      	subs	r3, #208	; 0xd0
 801f026:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f02a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f02e:	f7e1 fad5 	bl	80005dc <__aeabi_dmul>
 801f032:	4602      	mov	r2, r0
 801f034:	460b      	mov	r3, r1
 801f036:	4610      	mov	r0, r2
 801f038:	4619      	mov	r1, r3
 801f03a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f03e:	00db      	lsls	r3, r3, #3
 801f040:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f044:	4413      	add	r3, r2
 801f046:	3bd0      	subs	r3, #208	; 0xd0
 801f048:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 801f04c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f050:	3301      	adds	r3, #1
 801f052:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f056:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f05a:	2b0b      	cmp	r3, #11
 801f05c:	dddc      	ble.n	801f018 <qr_DvOBrgQi+0x7d0>
      }

      atmp = beta1;
 801f05e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f062:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[7] = 1.0;
 801f066:	f04f 0200 	mov.w	r2, #0
 801f06a:	4b32      	ldr	r3, [pc, #200]	; (801f134 <qr_DvOBrgQi+0x8ec>)
 801f06c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 801f070:	f04f 0200 	mov.w	r2, #0
 801f074:	f04f 0300 	mov.w	r3, #0
 801f078:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801f07c:	f7e1 fd16 	bl	8000aac <__aeabi_dcmpeq>
 801f080:	4603      	mov	r3, r0
 801f082:	2b00      	cmp	r3, #0
 801f084:	d163      	bne.n	801f14e <qr_DvOBrgQi+0x906>
    knt = 5;
 801f086:	2305      	movs	r3, #5
 801f088:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 11;
 801f08c:	230b      	movs	r3, #11
 801f08e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801f092:	e009      	b.n	801f0a8 <qr_DvOBrgQi+0x860>
      knt--;
 801f094:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f098:	3b01      	subs	r3, #1
 801f09a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 801f09e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f0a2:	3b01      	subs	r3, #1
 801f0a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801f0a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f0ac:	2b00      	cmp	r3, #0
 801f0ae:	dd11      	ble.n	801f0d4 <qr_DvOBrgQi+0x88c>
 801f0b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f0b4:	00db      	lsls	r3, r3, #3
 801f0b6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f0ba:	4413      	add	r3, r2
 801f0bc:	3bd0      	subs	r3, #208	; 0xd0
 801f0be:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f0c2:	f04f 0200 	mov.w	r2, #0
 801f0c6:	f04f 0300 	mov.w	r3, #0
 801f0ca:	f7e1 fcef 	bl	8000aac <__aeabi_dcmpeq>
 801f0ce:	4603      	mov	r3, r0
 801f0d0:	2b00      	cmp	r3, #0
 801f0d2:	d1df      	bne.n	801f094 <qr_DvOBrgQi+0x84c>
    }

    c_lastc = 1;
 801f0d4:	2301      	movs	r3, #1
 801f0d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    coltop = 13;
 801f0da:	230d      	movs	r3, #13
 801f0dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    do {
      exitg1 = 0;
 801f0e0:	2300      	movs	r3, #0
 801f0e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (coltop + 1 <= knt + 13) {
 801f0e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f0ea:	f103 020c 	add.w	r2, r3, #12
 801f0ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801f0f2:	4293      	cmp	r3, r2
 801f0f4:	dc20      	bgt.n	801f138 <qr_DvOBrgQi+0x8f0>
        if (b_A[coltop] != 0.0) {
 801f0f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801f0fa:	00db      	lsls	r3, r3, #3
 801f0fc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f100:	4413      	add	r3, r2
 801f102:	3bd0      	subs	r3, #208	; 0xd0
 801f104:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f108:	f04f 0200 	mov.w	r2, #0
 801f10c:	f04f 0300 	mov.w	r3, #0
 801f110:	f7e1 fccc 	bl	8000aac <__aeabi_dcmpeq>
 801f114:	4603      	mov	r3, r0
 801f116:	2b00      	cmp	r3, #0
 801f118:	d103      	bne.n	801f122 <qr_DvOBrgQi+0x8da>
          exitg1 = 1;
 801f11a:	2301      	movs	r3, #1
 801f11c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801f120:	e010      	b.n	801f144 <qr_DvOBrgQi+0x8fc>
        } else {
          coltop++;
 801f122:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801f126:	3301      	adds	r3, #1
 801f128:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801f12c:	e00a      	b.n	801f144 <qr_DvOBrgQi+0x8fc>
 801f12e:	bf00      	nop
 801f130:	7c900000 	.word	0x7c900000
 801f134:	3ff00000 	.word	0x3ff00000
        }
      } else {
        c_lastc = 0;
 801f138:	2300      	movs	r3, #0
 801f13a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        exitg1 = 1;
 801f13e:	2301      	movs	r3, #1
 801f140:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 801f144:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801f148:	2b00      	cmp	r3, #0
 801f14a:	d0c9      	beq.n	801f0e0 <qr_DvOBrgQi+0x898>
 801f14c:	e005      	b.n	801f15a <qr_DvOBrgQi+0x912>
  } else {
    knt = 0;
 801f14e:	2300      	movs	r3, #0
 801f150:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 801f154:	2300      	movs	r3, #0
 801f156:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 801f15a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f15e:	2b00      	cmp	r3, #0
 801f160:	dd29      	ble.n	801f1b6 <qr_DvOBrgQi+0x96e>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 14, b_A, 8, work);
 801f162:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801f166:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f16a:	9302      	str	r3, [sp, #8]
 801f16c:	2308      	movs	r3, #8
 801f16e:	9301      	str	r3, [sp, #4]
 801f170:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f174:	9300      	str	r3, [sp, #0]
 801f176:	230e      	movs	r3, #14
 801f178:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801f17c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801f180:	f002 ff06 	bl	8021f90 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_1, 8, work, b_A, 14);
 801f184:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801f188:	63bb      	str	r3, [r7, #56]	; 0x38
 801f18a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801f18e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f192:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f194:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801f198:	230e      	movs	r3, #14
 801f19a:	9301      	str	r3, [sp, #4]
 801f19c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f1a0:	9300      	str	r3, [sp, #0]
 801f1a2:	4613      	mov	r3, r2
 801f1a4:	2208      	movs	r2, #8
 801f1a6:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 801f1aa:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801f1ae:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801f1b2:	f002 fffb 	bl	80221ac <xgerc_R09LiDgJ>
  }

  b_A[7] = atmp;
 801f1b6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f1ba:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  atmp = b_A[14];
 801f1be:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801f1c2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_2 = 0.0;
 801f1c6:	f04f 0200 	mov.w	r2, #0
 801f1ca:	f04f 0300 	mov.w	r3, #0
 801f1ce:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  beta1 = xnrm2_nLdASVZH(3, b_A, 16);
 801f1d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f1d6:	2210      	movs	r2, #16
 801f1d8:	4619      	mov	r1, r3
 801f1da:	2003      	movs	r0, #3
 801f1dc:	f003 faf6 	bl	80227cc <xnrm2_nLdASVZH>
 801f1e0:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 801f1e4:	f04f 0200 	mov.w	r2, #0
 801f1e8:	f04f 0300 	mov.w	r3, #0
 801f1ec:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f1f0:	f7e1 fc5c 	bl	8000aac <__aeabi_dcmpeq>
 801f1f4:	4603      	mov	r3, r0
 801f1f6:	2b00      	cmp	r3, #0
 801f1f8:	f040 8170 	bne.w	801f4dc <qr_DvOBrgQi+0xc94>
    beta1 = rt_hypotd_snf(b_A[14], beta1);
 801f1fc:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 801f200:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 801f204:	eeb0 0a47 	vmov.f32	s0, s14
 801f208:	eef0 0a67 	vmov.f32	s1, s15
 801f20c:	f000 fdf8 	bl	801fe00 <rt_hypotd_snf>
 801f210:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[14] >= 0.0) {
 801f214:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 801f218:	f04f 0200 	mov.w	r2, #0
 801f21c:	f04f 0300 	mov.w	r3, #0
 801f220:	f7e1 fc62 	bl	8000ae8 <__aeabi_dcmpge>
 801f224:	4603      	mov	r3, r0
 801f226:	2b00      	cmp	r3, #0
 801f228:	d009      	beq.n	801f23e <qr_DvOBrgQi+0x9f6>
      beta1 = -beta1;
 801f22a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801f22e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801f232:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801f236:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f23a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801f23e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801f242:	633b      	str	r3, [r7, #48]	; 0x30
 801f244:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801f248:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f24c:	637b      	str	r3, [r7, #52]	; 0x34
 801f24e:	f04f 0200 	mov.w	r2, #0
 801f252:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801f256:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801f25a:	f7e1 fc31 	bl	8000ac0 <__aeabi_dcmplt>
 801f25e:	4603      	mov	r3, r0
 801f260:	2b00      	cmp	r3, #0
 801f262:	f000 80ef 	beq.w	801f444 <qr_DvOBrgQi+0xbfc>
      knt = 0;
 801f266:	2300      	movs	r3, #0
 801f268:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 801f26c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f270:	3301      	adds	r3, #1
 801f272:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f276:	230f      	movs	r3, #15
 801f278:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f27c:	e01f      	b.n	801f2be <qr_DvOBrgQi+0xa76>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801f27e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f282:	00db      	lsls	r3, r3, #3
 801f284:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f288:	4413      	add	r3, r2
 801f28a:	3bd0      	subs	r3, #208	; 0xd0
 801f28c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f290:	f04f 0200 	mov.w	r2, #0
 801f294:	4bb5      	ldr	r3, [pc, #724]	; (801f56c <qr_DvOBrgQi+0xd24>)
 801f296:	f7e1 f9a1 	bl	80005dc <__aeabi_dmul>
 801f29a:	4602      	mov	r2, r0
 801f29c:	460b      	mov	r3, r1
 801f29e:	4610      	mov	r0, r2
 801f2a0:	4619      	mov	r1, r3
 801f2a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f2a6:	00db      	lsls	r3, r3, #3
 801f2a8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f2ac:	4413      	add	r3, r2
 801f2ae:	3bd0      	subs	r3, #208	; 0xd0
 801f2b0:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f2b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f2b8:	3301      	adds	r3, #1
 801f2ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f2be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f2c2:	2b11      	cmp	r3, #17
 801f2c4:	dddb      	ble.n	801f27e <qr_DvOBrgQi+0xa36>
        }

        beta1 *= 9.9792015476736E+291;
 801f2c6:	f04f 0200 	mov.w	r2, #0
 801f2ca:	4ba8      	ldr	r3, [pc, #672]	; (801f56c <qr_DvOBrgQi+0xd24>)
 801f2cc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f2d0:	f7e1 f984 	bl	80005dc <__aeabi_dmul>
 801f2d4:	4602      	mov	r2, r0
 801f2d6:	460b      	mov	r3, r1
 801f2d8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 801f2dc:	f04f 0200 	mov.w	r2, #0
 801f2e0:	4ba2      	ldr	r3, [pc, #648]	; (801f56c <qr_DvOBrgQi+0xd24>)
 801f2e2:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801f2e6:	f7e1 f979 	bl	80005dc <__aeabi_dmul>
 801f2ea:	4602      	mov	r2, r0
 801f2ec:	460b      	mov	r3, r1
 801f2ee:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801f2f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801f2f6:	62bb      	str	r3, [r7, #40]	; 0x28
 801f2f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801f2fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f300:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f302:	f04f 0200 	mov.w	r2, #0
 801f306:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801f30a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801f30e:	f7e1 fbd7 	bl	8000ac0 <__aeabi_dcmplt>
 801f312:	4603      	mov	r3, r0
 801f314:	2b00      	cmp	r3, #0
 801f316:	d003      	beq.n	801f320 <qr_DvOBrgQi+0xad8>
 801f318:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f31c:	2b13      	cmp	r3, #19
 801f31e:	dda5      	ble.n	801f26c <qr_DvOBrgQi+0xa24>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(3, b_A, 16));
 801f320:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f324:	2210      	movs	r2, #16
 801f326:	4619      	mov	r1, r3
 801f328:	2003      	movs	r0, #3
 801f32a:	f003 fa4f 	bl	80227cc <xnrm2_nLdASVZH>
 801f32e:	eeb0 7a40 	vmov.f32	s14, s0
 801f332:	eef0 7a60 	vmov.f32	s15, s1
 801f336:	eeb0 1a47 	vmov.f32	s2, s14
 801f33a:	eef0 1a67 	vmov.f32	s3, s15
 801f33e:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 801f342:	f000 fd5d 	bl	801fe00 <rt_hypotd_snf>
 801f346:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 801f34a:	f04f 0200 	mov.w	r2, #0
 801f34e:	f04f 0300 	mov.w	r3, #0
 801f352:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801f356:	f7e1 fbc7 	bl	8000ae8 <__aeabi_dcmpge>
 801f35a:	4603      	mov	r3, r0
 801f35c:	2b00      	cmp	r3, #0
 801f35e:	d009      	beq.n	801f374 <qr_DvOBrgQi+0xb2c>
        beta1 = -beta1;
 801f360:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801f364:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801f368:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801f36c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f370:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_2 = (beta1 - atmp) / beta1;
 801f374:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f378:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f37c:	f7e0 ff76 	bl	800026c <__aeabi_dsub>
 801f380:	4602      	mov	r2, r0
 801f382:	460b      	mov	r3, r1
 801f384:	4610      	mov	r0, r2
 801f386:	4619      	mov	r1, r3
 801f388:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f38c:	f7e1 fa50 	bl	8000830 <__aeabi_ddiv>
 801f390:	4602      	mov	r2, r0
 801f392:	460b      	mov	r3, r1
 801f394:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (atmp - beta1);
 801f398:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f39c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801f3a0:	f7e0 ff64 	bl	800026c <__aeabi_dsub>
 801f3a4:	4602      	mov	r2, r0
 801f3a6:	460b      	mov	r3, r1
 801f3a8:	f04f 0000 	mov.w	r0, #0
 801f3ac:	4970      	ldr	r1, [pc, #448]	; (801f570 <qr_DvOBrgQi+0xd28>)
 801f3ae:	f7e1 fa3f 	bl	8000830 <__aeabi_ddiv>
 801f3b2:	4602      	mov	r2, r0
 801f3b4:	460b      	mov	r3, r1
 801f3b6:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f3ba:	230f      	movs	r3, #15
 801f3bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f3c0:	e01c      	b.n	801f3fc <qr_DvOBrgQi+0xbb4>
        b_A[b_coltop] *= atmp;
 801f3c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f3c6:	00db      	lsls	r3, r3, #3
 801f3c8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f3cc:	4413      	add	r3, r2
 801f3ce:	3bd0      	subs	r3, #208	; 0xd0
 801f3d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f3d4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f3d8:	f7e1 f900 	bl	80005dc <__aeabi_dmul>
 801f3dc:	4602      	mov	r2, r0
 801f3de:	460b      	mov	r3, r1
 801f3e0:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f3e4:	00c9      	lsls	r1, r1, #3
 801f3e6:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801f3ea:	4401      	add	r1, r0
 801f3ec:	39d0      	subs	r1, #208	; 0xd0
 801f3ee:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f3f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f3f6:	3301      	adds	r3, #1
 801f3f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f3fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f400:	2b11      	cmp	r3, #17
 801f402:	ddde      	ble.n	801f3c2 <qr_DvOBrgQi+0xb7a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801f404:	2300      	movs	r3, #0
 801f406:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f40a:	e010      	b.n	801f42e <qr_DvOBrgQi+0xbe6>
        beta1 *= 1.0020841800044864E-292;
 801f40c:	f04f 0200 	mov.w	r2, #0
 801f410:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801f414:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f418:	f7e1 f8e0 	bl	80005dc <__aeabi_dmul>
 801f41c:	4602      	mov	r2, r0
 801f41e:	460b      	mov	r3, r1
 801f420:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801f424:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f428:	3301      	adds	r3, #1
 801f42a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f42e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801f432:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f436:	429a      	cmp	r2, r3
 801f438:	dbe8      	blt.n	801f40c <qr_DvOBrgQi+0xbc4>
      }

      atmp = beta1;
 801f43a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f43e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 801f442:	e04b      	b.n	801f4dc <qr_DvOBrgQi+0xc94>
    } else {
      tau_idx_2 = (beta1 - b_A[14]) / beta1;
 801f444:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801f448:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f44c:	f7e0 ff0e 	bl	800026c <__aeabi_dsub>
 801f450:	4602      	mov	r2, r0
 801f452:	460b      	mov	r3, r1
 801f454:	4610      	mov	r0, r2
 801f456:	4619      	mov	r1, r3
 801f458:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f45c:	f7e1 f9e8 	bl	8000830 <__aeabi_ddiv>
 801f460:	4602      	mov	r2, r0
 801f462:	460b      	mov	r3, r1
 801f464:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (b_A[14] - beta1);
 801f468:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 801f46c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f470:	f7e0 fefc 	bl	800026c <__aeabi_dsub>
 801f474:	4602      	mov	r2, r0
 801f476:	460b      	mov	r3, r1
 801f478:	f04f 0000 	mov.w	r0, #0
 801f47c:	493c      	ldr	r1, [pc, #240]	; (801f570 <qr_DvOBrgQi+0xd28>)
 801f47e:	f7e1 f9d7 	bl	8000830 <__aeabi_ddiv>
 801f482:	4602      	mov	r2, r0
 801f484:	460b      	mov	r3, r1
 801f486:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 801f48a:	230f      	movs	r3, #15
 801f48c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f490:	e01c      	b.n	801f4cc <qr_DvOBrgQi+0xc84>
        b_A[c_lastc] *= atmp;
 801f492:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f496:	00db      	lsls	r3, r3, #3
 801f498:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f49c:	4413      	add	r3, r2
 801f49e:	3bd0      	subs	r3, #208	; 0xd0
 801f4a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f4a4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f4a8:	f7e1 f898 	bl	80005dc <__aeabi_dmul>
 801f4ac:	4602      	mov	r2, r0
 801f4ae:	460b      	mov	r3, r1
 801f4b0:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801f4b4:	00c9      	lsls	r1, r1, #3
 801f4b6:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801f4ba:	4401      	add	r1, r0
 801f4bc:	39d0      	subs	r1, #208	; 0xd0
 801f4be:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 801f4c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f4c6:	3301      	adds	r3, #1
 801f4c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f4cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f4d0:	2b11      	cmp	r3, #17
 801f4d2:	ddde      	ble.n	801f492 <qr_DvOBrgQi+0xc4a>
      }

      atmp = beta1;
 801f4d4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f4d8:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[14] = atmp;
 801f4dc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f4e0:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  R[0] = b_A[0];
 801f4e4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801f4e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801f4ea:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801f4ee:	2301      	movs	r3, #1
 801f4f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f4f4:	e00f      	b.n	801f516 <qr_DvOBrgQi+0xcce>
    R[c_lastc] = 0.0;
 801f4f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f4fa:	00db      	lsls	r3, r3, #3
 801f4fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801f4fe:	18d1      	adds	r1, r2, r3
 801f500:	f04f 0200 	mov.w	r2, #0
 801f504:	f04f 0300 	mov.w	r3, #0
 801f508:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801f50c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f510:	3301      	adds	r3, #1
 801f512:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f516:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f51a:	2b02      	cmp	r3, #2
 801f51c:	ddeb      	ble.n	801f4f6 <qr_DvOBrgQi+0xcae>
  }

  work[0] = 0.0;
 801f51e:	f04f 0200 	mov.w	r2, #0
 801f522:	f04f 0300 	mov.w	r3, #0
 801f526:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801f52a:	2300      	movs	r3, #0
 801f52c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f530:	e016      	b.n	801f560 <qr_DvOBrgQi+0xd18>
    R[c_lastc + 3] = b_A[c_lastc + 6];
 801f532:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f536:	3306      	adds	r3, #6
 801f538:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801f53c:	3203      	adds	r2, #3
 801f53e:	00d2      	lsls	r2, r2, #3
 801f540:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801f542:	4411      	add	r1, r2
 801f544:	00db      	lsls	r3, r3, #3
 801f546:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f54a:	4413      	add	r3, r2
 801f54c:	3bd0      	subs	r3, #208	; 0xd0
 801f54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f552:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801f556:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f55a:	3301      	adds	r3, #1
 801f55c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f560:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f564:	2b01      	cmp	r3, #1
 801f566:	dde4      	ble.n	801f532 <qr_DvOBrgQi+0xcea>
  }

  while (c_lastc + 1 < 4) {
 801f568:	e015      	b.n	801f596 <qr_DvOBrgQi+0xd4e>
 801f56a:	bf00      	nop
 801f56c:	7c900000 	.word	0x7c900000
 801f570:	3ff00000 	.word	0x3ff00000
    R[c_lastc + 3] = 0.0;
 801f574:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f578:	3303      	adds	r3, #3
 801f57a:	00db      	lsls	r3, r3, #3
 801f57c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801f57e:	18d1      	adds	r1, r2, r3
 801f580:	f04f 0200 	mov.w	r2, #0
 801f584:	f04f 0300 	mov.w	r3, #0
 801f588:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 801f58c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f590:	3301      	adds	r3, #1
 801f592:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  while (c_lastc + 1 < 4) {
 801f596:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f59a:	2b02      	cmp	r3, #2
 801f59c:	ddea      	ble.n	801f574 <qr_DvOBrgQi+0xd2c>
  }

  work[1] = 0.0;
 801f59e:	f04f 0200 	mov.w	r2, #0
 801f5a2:	f04f 0300 	mov.w	r3, #0
 801f5a6:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801f5aa:	2300      	movs	r3, #0
 801f5ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f5b0:	e016      	b.n	801f5e0 <qr_DvOBrgQi+0xd98>
    R[c_lastc + 6] = b_A[c_lastc + 12];
 801f5b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f5b6:	330c      	adds	r3, #12
 801f5b8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801f5bc:	3206      	adds	r2, #6
 801f5be:	00d2      	lsls	r2, r2, #3
 801f5c0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801f5c2:	4411      	add	r1, r2
 801f5c4:	00db      	lsls	r3, r3, #3
 801f5c6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f5ca:	4413      	add	r3, r2
 801f5cc:	3bd0      	subs	r3, #208	; 0xd0
 801f5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5d2:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801f5d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f5da:	3301      	adds	r3, #1
 801f5dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f5e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f5e4:	2b02      	cmp	r3, #2
 801f5e6:	dde4      	ble.n	801f5b2 <qr_DvOBrgQi+0xd6a>
  }

  work[2] = 0.0;
 801f5e8:	f04f 0200 	mov.w	r2, #0
 801f5ec:	f04f 0300 	mov.w	r3, #0
 801f5f0:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f5f4:	230f      	movs	r3, #15
 801f5f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f5fa:	e024      	b.n	801f646 <qr_DvOBrgQi+0xdfe>
    b_A[b_coltop] *= -tau_idx_2;
 801f5fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f600:	00db      	lsls	r3, r3, #3
 801f602:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f606:	4413      	add	r3, r2
 801f608:	3bd0      	subs	r3, #208	; 0xd0
 801f60a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f60e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801f612:	623b      	str	r3, [r7, #32]
 801f614:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801f618:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f61c:	627b      	str	r3, [r7, #36]	; 0x24
 801f61e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801f622:	f7e0 ffdb 	bl	80005dc <__aeabi_dmul>
 801f626:	4602      	mov	r2, r0
 801f628:	460b      	mov	r3, r1
 801f62a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f62e:	00c9      	lsls	r1, r1, #3
 801f630:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801f634:	4401      	add	r1, r0
 801f636:	39d0      	subs	r1, #208	; 0xd0
 801f638:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f63c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f640:	3301      	adds	r3, #1
 801f642:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f64a:	2b11      	cmp	r3, #17
 801f64c:	ddd6      	ble.n	801f5fc <qr_DvOBrgQi+0xdb4>
  }

  b_A[14] = 1.0 - tau_idx_2;
 801f64e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 801f652:	f04f 0000 	mov.w	r0, #0
 801f656:	49cc      	ldr	r1, [pc, #816]	; (801f988 <qr_DvOBrgQi+0x1140>)
 801f658:	f7e0 fe08 	bl	800026c <__aeabi_dsub>
 801f65c:	4602      	mov	r2, r0
 801f65e:	460b      	mov	r3, r1
 801f660:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801f664:	2300      	movs	r3, #0
 801f666:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f66a:	e014      	b.n	801f696 <qr_DvOBrgQi+0xe4e>
    b_A[13 - c_lastc] = 0.0;
 801f66c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f670:	f1c3 030d 	rsb	r3, r3, #13
 801f674:	00db      	lsls	r3, r3, #3
 801f676:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f67a:	4413      	add	r3, r2
 801f67c:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 801f680:	f04f 0200 	mov.w	r2, #0
 801f684:	f04f 0300 	mov.w	r3, #0
 801f688:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801f68c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f690:	3301      	adds	r3, #1
 801f692:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f696:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f69a:	2b01      	cmp	r3, #1
 801f69c:	dde6      	ble.n	801f66c <qr_DvOBrgQi+0xe24>
  }

  b_A[7] = 1.0;
 801f69e:	f04f 0200 	mov.w	r2, #0
 801f6a2:	4bb9      	ldr	r3, [pc, #740]	; (801f988 <qr_DvOBrgQi+0x1140>)
 801f6a4:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 801f6a8:	f04f 0200 	mov.w	r2, #0
 801f6ac:	f04f 0300 	mov.w	r3, #0
 801f6b0:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801f6b4:	f7e1 f9fa 	bl	8000aac <__aeabi_dcmpeq>
 801f6b8:	4603      	mov	r3, r0
 801f6ba:	2b00      	cmp	r3, #0
 801f6bc:	d15f      	bne.n	801f77e <qr_DvOBrgQi+0xf36>
    c_lastc = 5;
 801f6be:	2305      	movs	r3, #5
 801f6c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 13;
 801f6c4:	230d      	movs	r3, #13
 801f6c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801f6ca:	e009      	b.n	801f6e0 <qr_DvOBrgQi+0xe98>
      c_lastc--;
 801f6cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f6d0:	3b01      	subs	r3, #1
 801f6d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 801f6d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f6da:	3b01      	subs	r3, #1
 801f6dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801f6e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f6e4:	2b00      	cmp	r3, #0
 801f6e6:	dd12      	ble.n	801f70e <qr_DvOBrgQi+0xec6>
 801f6e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f6ec:	3b02      	subs	r3, #2
 801f6ee:	00db      	lsls	r3, r3, #3
 801f6f0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f6f4:	4413      	add	r3, r2
 801f6f6:	3bd0      	subs	r3, #208	; 0xd0
 801f6f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f6fc:	f04f 0200 	mov.w	r2, #0
 801f700:	f04f 0300 	mov.w	r3, #0
 801f704:	f7e1 f9d2 	bl	8000aac <__aeabi_dcmpeq>
 801f708:	4603      	mov	r3, r0
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	d1de      	bne.n	801f6cc <qr_DvOBrgQi+0xe84>
    }

    b_coltop = 1;
 801f70e:	2301      	movs	r3, #1
 801f710:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    knt = 14;
 801f714:	230e      	movs	r3, #14
 801f716:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    do {
      exitg1 = 0;
 801f71a:	2300      	movs	r3, #0
 801f71c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (knt <= c_lastc + 13) {
 801f720:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f724:	330d      	adds	r3, #13
 801f726:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801f72a:	429a      	cmp	r2, r3
 801f72c:	dc1c      	bgt.n	801f768 <qr_DvOBrgQi+0xf20>
        if (b_A[knt - 1] != 0.0) {
 801f72e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f732:	3b01      	subs	r3, #1
 801f734:	00db      	lsls	r3, r3, #3
 801f736:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f73a:	4413      	add	r3, r2
 801f73c:	3bd0      	subs	r3, #208	; 0xd0
 801f73e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f742:	f04f 0200 	mov.w	r2, #0
 801f746:	f04f 0300 	mov.w	r3, #0
 801f74a:	f7e1 f9af 	bl	8000aac <__aeabi_dcmpeq>
 801f74e:	4603      	mov	r3, r0
 801f750:	2b00      	cmp	r3, #0
 801f752:	d103      	bne.n	801f75c <qr_DvOBrgQi+0xf14>
          exitg1 = 1;
 801f754:	2301      	movs	r3, #1
 801f756:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801f75a:	e00b      	b.n	801f774 <qr_DvOBrgQi+0xf2c>
        } else {
          knt++;
 801f75c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f760:	3301      	adds	r3, #1
 801f762:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801f766:	e005      	b.n	801f774 <qr_DvOBrgQi+0xf2c>
        }
      } else {
        b_coltop = 0;
 801f768:	2300      	movs	r3, #0
 801f76a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        exitg1 = 1;
 801f76e:	2301      	movs	r3, #1
 801f770:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 801f774:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801f778:	2b00      	cmp	r3, #0
 801f77a:	d0ce      	beq.n	801f71a <qr_DvOBrgQi+0xed2>
 801f77c:	e005      	b.n	801f78a <qr_DvOBrgQi+0xf42>
  } else {
    c_lastc = 0;
 801f77e:	2300      	movs	r3, #0
 801f780:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 801f784:	2300      	movs	r3, #0
 801f786:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 801f78a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f78e:	2b00      	cmp	r3, #0
 801f790:	dd29      	ble.n	801f7e6 <qr_DvOBrgQi+0xf9e>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 14, b_A, 8, work);
 801f792:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801f796:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f79a:	9302      	str	r3, [sp, #8]
 801f79c:	2308      	movs	r3, #8
 801f79e:	9301      	str	r3, [sp, #4]
 801f7a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f7a4:	9300      	str	r3, [sp, #0]
 801f7a6:	230e      	movs	r3, #14
 801f7a8:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f7ac:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801f7b0:	f002 fbee 	bl	8021f90 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_1, 8, work, b_A, 14);
 801f7b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801f7b8:	61bb      	str	r3, [r7, #24]
 801f7ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801f7be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f7c2:	61fb      	str	r3, [r7, #28]
 801f7c4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801f7c8:	230e      	movs	r3, #14
 801f7ca:	9301      	str	r3, [sp, #4]
 801f7cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f7d0:	9300      	str	r3, [sp, #0]
 801f7d2:	4613      	mov	r3, r2
 801f7d4:	2208      	movs	r2, #8
 801f7d6:	ed97 0b06 	vldr	d0, [r7, #24]
 801f7da:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f7de:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801f7e2:	f002 fce3 	bl	80221ac <xgerc_R09LiDgJ>
  }

  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801f7e6:	2308      	movs	r3, #8
 801f7e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f7ec:	e024      	b.n	801f838 <qr_DvOBrgQi+0xff0>
    b_A[b_coltop] *= -tau_idx_1;
 801f7ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f7f2:	00db      	lsls	r3, r3, #3
 801f7f4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f7f8:	4413      	add	r3, r2
 801f7fa:	3bd0      	subs	r3, #208	; 0xd0
 801f7fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f800:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801f804:	613b      	str	r3, [r7, #16]
 801f806:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801f80a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f80e:	617b      	str	r3, [r7, #20]
 801f810:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801f814:	f7e0 fee2 	bl	80005dc <__aeabi_dmul>
 801f818:	4602      	mov	r2, r0
 801f81a:	460b      	mov	r3, r1
 801f81c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f820:	00c9      	lsls	r1, r1, #3
 801f822:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801f826:	4401      	add	r1, r0
 801f828:	39d0      	subs	r1, #208	; 0xd0
 801f82a:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801f82e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f832:	3301      	adds	r3, #1
 801f834:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f83c:	2b0b      	cmp	r3, #11
 801f83e:	ddd6      	ble.n	801f7ee <qr_DvOBrgQi+0xfa6>
  }

  b_A[7] = 1.0 - tau_idx_1;
 801f840:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801f844:	f04f 0000 	mov.w	r0, #0
 801f848:	494f      	ldr	r1, [pc, #316]	; (801f988 <qr_DvOBrgQi+0x1140>)
 801f84a:	f7e0 fd0f 	bl	800026c <__aeabi_dsub>
 801f84e:	4602      	mov	r2, r0
 801f850:	460b      	mov	r3, r1
 801f852:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  b_A[6] = 0.0;
 801f856:	f04f 0200 	mov.w	r2, #0
 801f85a:	f04f 0300 	mov.w	r3, #0
 801f85e:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  b_A[0] = 1.0;
 801f862:	f04f 0200 	mov.w	r2, #0
 801f866:	4b48      	ldr	r3, [pc, #288]	; (801f988 <qr_DvOBrgQi+0x1140>)
 801f868:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 801f86c:	f04f 0200 	mov.w	r2, #0
 801f870:	f04f 0300 	mov.w	r3, #0
 801f874:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801f878:	f7e1 f918 	bl	8000aac <__aeabi_dcmpeq>
 801f87c:	4603      	mov	r3, r0
 801f87e:	2b00      	cmp	r3, #0
 801f880:	f040 8084 	bne.w	801f98c <qr_DvOBrgQi+0x1144>
    c_lastc = 6;
 801f884:	2306      	movs	r3, #6
 801f886:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 7;
 801f88a:	2307      	movs	r3, #7
 801f88c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801f890:	e009      	b.n	801f8a6 <qr_DvOBrgQi+0x105e>
      c_lastc--;
 801f892:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f896:	3b01      	subs	r3, #1
 801f898:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 801f89c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f8a0:	3b01      	subs	r3, #1
 801f8a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801f8a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f8aa:	2b00      	cmp	r3, #0
 801f8ac:	dd12      	ble.n	801f8d4 <qr_DvOBrgQi+0x108c>
 801f8ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f8b2:	3b02      	subs	r3, #2
 801f8b4:	00db      	lsls	r3, r3, #3
 801f8b6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f8ba:	4413      	add	r3, r2
 801f8bc:	3bd0      	subs	r3, #208	; 0xd0
 801f8be:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f8c2:	f04f 0200 	mov.w	r2, #0
 801f8c6:	f04f 0300 	mov.w	r3, #0
 801f8ca:	f7e1 f8ef 	bl	8000aac <__aeabi_dcmpeq>
 801f8ce:	4603      	mov	r3, r0
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	d1de      	bne.n	801f892 <qr_DvOBrgQi+0x104a>
    }

    b_coltop = 2;
 801f8d4:	2302      	movs	r3, #2
 801f8d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    exitg2 = false;
 801f8da:	2300      	movs	r3, #0
 801f8dc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 801f8e0:	e049      	b.n	801f976 <qr_DvOBrgQi+0x112e>
      coltop = (b_coltop - 1) * 6 + 7;
 801f8e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f8e6:	1e5a      	subs	r2, r3, #1
 801f8e8:	4613      	mov	r3, r2
 801f8ea:	005b      	lsls	r3, r3, #1
 801f8ec:	4413      	add	r3, r2
 801f8ee:	005b      	lsls	r3, r3, #1
 801f8f0:	3307      	adds	r3, #7
 801f8f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      knt = coltop;
 801f8f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801f8fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        exitg1 = 0;
 801f8fe:	2300      	movs	r3, #0
 801f900:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (knt <= (coltop + c_lastc) - 1) {
 801f904:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801f908:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f90c:	4413      	add	r3, r2
 801f90e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801f912:	429a      	cmp	r2, r3
 801f914:	da1c      	bge.n	801f950 <qr_DvOBrgQi+0x1108>
          if (b_A[knt - 1] != 0.0) {
 801f916:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f91a:	3b01      	subs	r3, #1
 801f91c:	00db      	lsls	r3, r3, #3
 801f91e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f922:	4413      	add	r3, r2
 801f924:	3bd0      	subs	r3, #208	; 0xd0
 801f926:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f92a:	f04f 0200 	mov.w	r2, #0
 801f92e:	f04f 0300 	mov.w	r3, #0
 801f932:	f7e1 f8bb 	bl	8000aac <__aeabi_dcmpeq>
 801f936:	4603      	mov	r3, r0
 801f938:	2b00      	cmp	r3, #0
 801f93a:	d103      	bne.n	801f944 <qr_DvOBrgQi+0x10fc>
            exitg1 = 1;
 801f93c:	2301      	movs	r3, #1
 801f93e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801f942:	e00d      	b.n	801f960 <qr_DvOBrgQi+0x1118>
          } else {
            knt++;
 801f944:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f948:	3301      	adds	r3, #1
 801f94a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801f94e:	e007      	b.n	801f960 <qr_DvOBrgQi+0x1118>
          }
        } else {
          b_coltop--;
 801f950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f954:	3b01      	subs	r3, #1
 801f956:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          exitg1 = 2;
 801f95a:	2302      	movs	r3, #2
 801f95c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 801f960:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801f964:	2b00      	cmp	r3, #0
 801f966:	d0ca      	beq.n	801f8fe <qr_DvOBrgQi+0x10b6>

      if (exitg1 == 1) {
 801f968:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801f96c:	2b01      	cmp	r3, #1
 801f96e:	d102      	bne.n	801f976 <qr_DvOBrgQi+0x112e>
        exitg2 = true;
 801f970:	2301      	movs	r3, #1
 801f972:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 801f976:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 801f97a:	2b00      	cmp	r3, #0
 801f97c:	d10c      	bne.n	801f998 <qr_DvOBrgQi+0x1150>
 801f97e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f982:	2b00      	cmp	r3, #0
 801f984:	dcad      	bgt.n	801f8e2 <qr_DvOBrgQi+0x109a>
 801f986:	e007      	b.n	801f998 <qr_DvOBrgQi+0x1150>
 801f988:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 801f98c:	2300      	movs	r3, #0
 801f98e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 801f992:	2300      	movs	r3, #0
 801f994:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 801f998:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f99c:	2b00      	cmp	r3, #0
 801f99e:	dd29      	ble.n	801f9f4 <qr_DvOBrgQi+0x11ac>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 7, b_A, 1, work);
 801f9a0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801f9a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f9a8:	9302      	str	r3, [sp, #8]
 801f9aa:	2301      	movs	r3, #1
 801f9ac:	9301      	str	r3, [sp, #4]
 801f9ae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f9b2:	9300      	str	r3, [sp, #0]
 801f9b4:	2307      	movs	r3, #7
 801f9b6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f9ba:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801f9be:	f002 fae7 	bl	8021f90 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 7);
 801f9c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801f9c6:	60bb      	str	r3, [r7, #8]
 801f9c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801f9cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f9d0:	60fb      	str	r3, [r7, #12]
 801f9d2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801f9d6:	2307      	movs	r3, #7
 801f9d8:	9301      	str	r3, [sp, #4]
 801f9da:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f9de:	9300      	str	r3, [sp, #0]
 801f9e0:	4613      	mov	r3, r2
 801f9e2:	2201      	movs	r2, #1
 801f9e4:	ed97 0b02 	vldr	d0, [r7, #8]
 801f9e8:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f9ec:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801f9f0:	f002 fbdc 	bl	80221ac <xgerc_R09LiDgJ>
  }

  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801f9f4:	2301      	movs	r3, #1
 801f9f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f9fa:	e024      	b.n	801fa46 <qr_DvOBrgQi+0x11fe>
    b_A[b_coltop] *= -tau_idx_0;
 801f9fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fa00:	00db      	lsls	r3, r3, #3
 801fa02:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801fa06:	4413      	add	r3, r2
 801fa08:	3bd0      	subs	r3, #208	; 0xd0
 801fa0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fa0e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801fa12:	603b      	str	r3, [r7, #0]
 801fa14:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801fa18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801fa1c:	607b      	str	r3, [r7, #4]
 801fa1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fa22:	f7e0 fddb 	bl	80005dc <__aeabi_dmul>
 801fa26:	4602      	mov	r2, r0
 801fa28:	460b      	mov	r3, r1
 801fa2a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801fa2e:	00c9      	lsls	r1, r1, #3
 801fa30:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801fa34:	4401      	add	r1, r0
 801fa36:	39d0      	subs	r1, #208	; 0xd0
 801fa38:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801fa3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fa40:	3301      	adds	r3, #1
 801fa42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801fa46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fa4a:	2b05      	cmp	r3, #5
 801fa4c:	ddd6      	ble.n	801f9fc <qr_DvOBrgQi+0x11b4>
  }

  b_A[0] = 1.0 - tau_idx_0;
 801fa4e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801fa52:	f04f 0000 	mov.w	r0, #0
 801fa56:	4923      	ldr	r1, [pc, #140]	; (801fae4 <qr_DvOBrgQi+0x129c>)
 801fa58:	f7e0 fc08 	bl	800026c <__aeabi_dsub>
 801fa5c:	4602      	mov	r2, r0
 801fa5e:	460b      	mov	r3, r1
 801fa60:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_coltop = 0;
 801fa64:	2300      	movs	r3, #0
 801fa66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 801fa6a:	2300      	movs	r3, #0
 801fa6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801fa70:	e02d      	b.n	801face <qr_DvOBrgQi+0x1286>
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 801fa72:	2300      	movs	r3, #0
 801fa74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801fa78:	e01b      	b.n	801fab2 <qr_DvOBrgQi+0x126a>
      knt = c_lastc + b_coltop;
 801fa7a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801fa7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fa82:	4413      	add	r3, r2
 801fa84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Q[knt] = b_A[knt];
 801fa88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801fa8c:	00db      	lsls	r3, r3, #3
 801fa8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801fa90:	18d1      	adds	r1, r2, r3
 801fa92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801fa96:	00db      	lsls	r3, r3, #3
 801fa98:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801fa9c:	4413      	add	r3, r2
 801fa9e:	3bd0      	subs	r3, #208	; 0xd0
 801faa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801faa4:	e9c1 2300 	strd	r2, r3, [r1]
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 801faa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801faac:	3301      	adds	r3, #1
 801faae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801fab2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801fab6:	2b05      	cmp	r3, #5
 801fab8:	dddf      	ble.n	801fa7a <qr_DvOBrgQi+0x1232>
    }

    b_coltop += 6;
 801faba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fabe:	3306      	adds	r3, #6
 801fac0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 801fac4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801fac8:	3301      	adds	r3, #1
 801faca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801face:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801fad2:	2b02      	cmp	r3, #2
 801fad4:	ddcd      	ble.n	801fa72 <qr_DvOBrgQi+0x122a>
  }
}
 801fad6:	bf00      	nop
 801fad8:	bf00      	nop
 801fada:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 801fade:	46bd      	mov	sp, r7
 801fae0:	bdb0      	pop	{r4, r5, r7, pc}
 801fae2:	bf00      	nop
 801fae4:	3ff00000 	.word	0x3ff00000

0801fae8 <rotate_LZ7ctbe0>:
#include "rotate_LZ7ctbe0.h"
#include <math.h>
#include "rt_hypotd_snf.h"

void rotate_LZ7ctbe0(real_T x, real_T y, real_T *c, real_T *s, real_T *r)
{
 801fae8:	b5b0      	push	{r4, r5, r7, lr}
 801faea:	b092      	sub	sp, #72	; 0x48
 801faec:	af00      	add	r7, sp, #0
 801faee:	ed87 0b06 	vstr	d0, [r7, #24]
 801faf2:	ed87 1b04 	vstr	d1, [r7, #16]
 801faf6:	60f8      	str	r0, [r7, #12]
 801faf8:	60b9      	str	r1, [r7, #8]
 801fafa:	607a      	str	r2, [r7, #4]
  real_T absx;
  real_T absy;
  absx = fabs(x);
 801fafc:	69bb      	ldr	r3, [r7, #24]
 801fafe:	643b      	str	r3, [r7, #64]	; 0x40
 801fb00:	69fb      	ldr	r3, [r7, #28]
 801fb02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fb06:	647b      	str	r3, [r7, #68]	; 0x44
  absy = fabs(y);
 801fb08:	693b      	ldr	r3, [r7, #16]
 801fb0a:	63bb      	str	r3, [r7, #56]	; 0x38
 801fb0c:	697b      	ldr	r3, [r7, #20]
 801fb0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fb12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (absy == 0.0) {
 801fb14:	f04f 0200 	mov.w	r2, #0
 801fb18:	f04f 0300 	mov.w	r3, #0
 801fb1c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801fb20:	f7e0 ffc4 	bl	8000aac <__aeabi_dcmpeq>
 801fb24:	4603      	mov	r3, r0
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	d012      	beq.n	801fb50 <rotate_LZ7ctbe0+0x68>
    *c = 1.0;
 801fb2a:	68f9      	ldr	r1, [r7, #12]
 801fb2c:	f04f 0200 	mov.w	r2, #0
 801fb30:	4b4e      	ldr	r3, [pc, #312]	; (801fc6c <rotate_LZ7ctbe0+0x184>)
 801fb32:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 0.0;
 801fb36:	68b9      	ldr	r1, [r7, #8]
 801fb38:	f04f 0200 	mov.w	r2, #0
 801fb3c:	f04f 0300 	mov.w	r3, #0
 801fb40:	e9c1 2300 	strd	r2, r3, [r1]
    *r = x;
 801fb44:	6879      	ldr	r1, [r7, #4]
 801fb46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801fb4a:	e9c1 2300 	strd	r2, r3, [r1]
    *c = absx / rho;
    xx /= absx;
    *s = xx * yy / rho;
    *r = rho * absy * xx;
  }
}
 801fb4e:	e088      	b.n	801fc62 <rotate_LZ7ctbe0+0x17a>
  } else if (absx == 0.0) {
 801fb50:	f04f 0200 	mov.w	r2, #0
 801fb54:	f04f 0300 	mov.w	r3, #0
 801fb58:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801fb5c:	f7e0 ffa6 	bl	8000aac <__aeabi_dcmpeq>
 801fb60:	4603      	mov	r3, r0
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	d012      	beq.n	801fb8c <rotate_LZ7ctbe0+0xa4>
    *c = 0.0;
 801fb66:	68f9      	ldr	r1, [r7, #12]
 801fb68:	f04f 0200 	mov.w	r2, #0
 801fb6c:	f04f 0300 	mov.w	r3, #0
 801fb70:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 1.0;
 801fb74:	68b9      	ldr	r1, [r7, #8]
 801fb76:	f04f 0200 	mov.w	r2, #0
 801fb7a:	4b3c      	ldr	r3, [pc, #240]	; (801fc6c <rotate_LZ7ctbe0+0x184>)
 801fb7c:	e9c1 2300 	strd	r2, r3, [r1]
    *r = y;
 801fb80:	6879      	ldr	r1, [r7, #4]
 801fb82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801fb86:	e9c1 2300 	strd	r2, r3, [r1]
}
 801fb8a:	e06a      	b.n	801fc62 <rotate_LZ7ctbe0+0x17a>
    absy += absx;
 801fb8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801fb90:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801fb94:	f7e0 fb6c 	bl	8000270 <__adddf3>
 801fb98:	4602      	mov	r2, r0
 801fb9a:	460b      	mov	r3, r1
 801fb9c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xx = x / absy;
 801fba0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801fba4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801fba8:	f7e0 fe42 	bl	8000830 <__aeabi_ddiv>
 801fbac:	4602      	mov	r2, r0
 801fbae:	460b      	mov	r3, r1
 801fbb0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    yy = y / absy;
 801fbb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801fbb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801fbbc:	f7e0 fe38 	bl	8000830 <__aeabi_ddiv>
 801fbc0:	4602      	mov	r2, r0
 801fbc2:	460b      	mov	r3, r1
 801fbc4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    absx = fabs(xx);
 801fbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fbca:	643b      	str	r3, [r7, #64]	; 0x40
 801fbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fbce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fbd2:	647b      	str	r3, [r7, #68]	; 0x44
    rho = rt_hypotd_snf(absx, fabs(yy));
 801fbd4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 801fbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fbd8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801fbdc:	ec45 4b11 	vmov	d1, r4, r5
 801fbe0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 801fbe4:	f000 f90c 	bl	801fe00 <rt_hypotd_snf>
 801fbe8:	ed87 0b08 	vstr	d0, [r7, #32]
    *c = absx / rho;
 801fbec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801fbf0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801fbf4:	f7e0 fe1c 	bl	8000830 <__aeabi_ddiv>
 801fbf8:	4602      	mov	r2, r0
 801fbfa:	460b      	mov	r3, r1
 801fbfc:	68f9      	ldr	r1, [r7, #12]
 801fbfe:	e9c1 2300 	strd	r2, r3, [r1]
    xx /= absx;
 801fc02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801fc06:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801fc0a:	f7e0 fe11 	bl	8000830 <__aeabi_ddiv>
 801fc0e:	4602      	mov	r2, r0
 801fc10:	460b      	mov	r3, r1
 801fc12:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    *s = xx * yy / rho;
 801fc16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801fc1a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801fc1e:	f7e0 fcdd 	bl	80005dc <__aeabi_dmul>
 801fc22:	4602      	mov	r2, r0
 801fc24:	460b      	mov	r3, r1
 801fc26:	4610      	mov	r0, r2
 801fc28:	4619      	mov	r1, r3
 801fc2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801fc2e:	f7e0 fdff 	bl	8000830 <__aeabi_ddiv>
 801fc32:	4602      	mov	r2, r0
 801fc34:	460b      	mov	r3, r1
 801fc36:	68b9      	ldr	r1, [r7, #8]
 801fc38:	e9c1 2300 	strd	r2, r3, [r1]
    *r = rho * absy * xx;
 801fc3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801fc40:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801fc44:	f7e0 fcca 	bl	80005dc <__aeabi_dmul>
 801fc48:	4602      	mov	r2, r0
 801fc4a:	460b      	mov	r3, r1
 801fc4c:	4610      	mov	r0, r2
 801fc4e:	4619      	mov	r1, r3
 801fc50:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801fc54:	f7e0 fcc2 	bl	80005dc <__aeabi_dmul>
 801fc58:	4602      	mov	r2, r0
 801fc5a:	460b      	mov	r3, r1
 801fc5c:	6879      	ldr	r1, [r7, #4]
 801fc5e:	e9c1 2300 	strd	r2, r3, [r1]
}
 801fc62:	bf00      	nop
 801fc64:	3748      	adds	r7, #72	; 0x48
 801fc66:	46bd      	mov	sp, r7
 801fc68:	bdb0      	pop	{r4, r5, r7, pc}
 801fc6a:	bf00      	nop
 801fc6c:	3ff00000 	.word	0x3ff00000

0801fc70 <rtGetInf>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetInf(void)
{
 801fc70:	b580      	push	{r7, lr}
 801fc72:	b086      	sub	sp, #24
 801fc74:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 801fc76:	2340      	movs	r3, #64	; 0x40
 801fc78:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 801fc7a:	f04f 0200 	mov.w	r2, #0
 801fc7e:	f04f 0300 	mov.w	r3, #0
 801fc82:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 801fc86:	68fb      	ldr	r3, [r7, #12]
 801fc88:	2b20      	cmp	r3, #32
 801fc8a:	d10b      	bne.n	801fca4 <rtGetInf+0x34>
    inf = rtGetInfF();
 801fc8c:	f000 f820 	bl	801fcd0 <rtGetInfF>
 801fc90:	ee10 3a10 	vmov	r3, s0
 801fc94:	4618      	mov	r0, r3
 801fc96:	f7e0 fc49 	bl	800052c <__aeabi_f2d>
 801fc9a:	4602      	mov	r2, r0
 801fc9c:	460b      	mov	r3, r1
 801fc9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801fca2:	e007      	b.n	801fcb4 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 801fca4:	4b09      	ldr	r3, [pc, #36]	; (801fccc <rtGetInf+0x5c>)
 801fca6:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 801fca8:	2300      	movs	r3, #0
 801fcaa:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 801fcac:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fcb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 801fcb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801fcb8:	ec43 2b17 	vmov	d7, r2, r3
}
 801fcbc:	eeb0 0a47 	vmov.f32	s0, s14
 801fcc0:	eef0 0a67 	vmov.f32	s1, s15
 801fcc4:	3718      	adds	r7, #24
 801fcc6:	46bd      	mov	sp, r7
 801fcc8:	bd80      	pop	{r7, pc}
 801fcca:	bf00      	nop
 801fccc:	7ff00000 	.word	0x7ff00000

0801fcd0 <rtGetInfF>:

real32_T rtGetInfF(void)
{
 801fcd0:	b480      	push	{r7}
 801fcd2:	b083      	sub	sp, #12
 801fcd4:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 801fcd6:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801fcda:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	ee07 3a90 	vmov	s15, r3
}
 801fce2:	eeb0 0a67 	vmov.f32	s0, s15
 801fce6:	370c      	adds	r7, #12
 801fce8:	46bd      	mov	sp, r7
 801fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcee:	4770      	bx	lr

0801fcf0 <rtGetMinusInf>:

real_T rtGetMinusInf(void)
{
 801fcf0:	b580      	push	{r7, lr}
 801fcf2:	b086      	sub	sp, #24
 801fcf4:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 801fcf6:	2340      	movs	r3, #64	; 0x40
 801fcf8:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 801fcfa:	f04f 0200 	mov.w	r2, #0
 801fcfe:	f04f 0300 	mov.w	r3, #0
 801fd02:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 801fd06:	68fb      	ldr	r3, [r7, #12]
 801fd08:	2b20      	cmp	r3, #32
 801fd0a:	d10b      	bne.n	801fd24 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 801fd0c:	f000 f820 	bl	801fd50 <rtGetMinusInfF>
 801fd10:	ee10 3a10 	vmov	r3, s0
 801fd14:	4618      	mov	r0, r3
 801fd16:	f7e0 fc09 	bl	800052c <__aeabi_f2d>
 801fd1a:	4602      	mov	r2, r0
 801fd1c:	460b      	mov	r3, r1
 801fd1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801fd22:	e007      	b.n	801fd34 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 801fd24:	4b09      	ldr	r3, [pc, #36]	; (801fd4c <rtGetMinusInf+0x5c>)
 801fd26:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 801fd28:	2300      	movs	r3, #0
 801fd2a:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 801fd2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fd30:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 801fd34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801fd38:	ec43 2b17 	vmov	d7, r2, r3
}
 801fd3c:	eeb0 0a47 	vmov.f32	s0, s14
 801fd40:	eef0 0a67 	vmov.f32	s1, s15
 801fd44:	3718      	adds	r7, #24
 801fd46:	46bd      	mov	sp, r7
 801fd48:	bd80      	pop	{r7, pc}
 801fd4a:	bf00      	nop
 801fd4c:	fff00000 	.word	0xfff00000

0801fd50 <rtGetMinusInfF>:

real32_T rtGetMinusInfF(void)
{
 801fd50:	b480      	push	{r7}
 801fd52:	b083      	sub	sp, #12
 801fd54:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 801fd56:	4b06      	ldr	r3, [pc, #24]	; (801fd70 <rtGetMinusInfF+0x20>)
 801fd58:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 801fd5a:	687b      	ldr	r3, [r7, #4]
 801fd5c:	ee07 3a90 	vmov	s15, r3
}
 801fd60:	eeb0 0a67 	vmov.f32	s0, s15
 801fd64:	370c      	adds	r7, #12
 801fd66:	46bd      	mov	sp, r7
 801fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd6c:	4770      	bx	lr
 801fd6e:	bf00      	nop
 801fd70:	ff800000 	.word	0xff800000

0801fd74 <rtGetNaN>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetNaN(void)
{
 801fd74:	b580      	push	{r7, lr}
 801fd76:	b086      	sub	sp, #24
 801fd78:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 801fd7a:	2340      	movs	r3, #64	; 0x40
 801fd7c:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 801fd7e:	f04f 0200 	mov.w	r2, #0
 801fd82:	f04f 0300 	mov.w	r3, #0
 801fd86:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 801fd8a:	68fb      	ldr	r3, [r7, #12]
 801fd8c:	2b20      	cmp	r3, #32
 801fd8e:	d10b      	bne.n	801fda8 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 801fd90:	f000 f820 	bl	801fdd4 <rtGetNaNF>
 801fd94:	ee10 3a10 	vmov	r3, s0
 801fd98:	4618      	mov	r0, r3
 801fd9a:	f7e0 fbc7 	bl	800052c <__aeabi_f2d>
 801fd9e:	4602      	mov	r2, r0
 801fda0:	460b      	mov	r3, r1
 801fda2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801fda6:	e007      	b.n	801fdb8 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 801fda8:	4b09      	ldr	r3, [pc, #36]	; (801fdd0 <rtGetNaN+0x5c>)
 801fdaa:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 801fdac:	2300      	movs	r3, #0
 801fdae:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 801fdb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fdb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 801fdb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801fdbc:	ec43 2b17 	vmov	d7, r2, r3
}
 801fdc0:	eeb0 0a47 	vmov.f32	s0, s14
 801fdc4:	eef0 0a67 	vmov.f32	s1, s15
 801fdc8:	3718      	adds	r7, #24
 801fdca:	46bd      	mov	sp, r7
 801fdcc:	bd80      	pop	{r7, pc}
 801fdce:	bf00      	nop
 801fdd0:	fff80000 	.word	0xfff80000

0801fdd4 <rtGetNaNF>:

real32_T rtGetNaNF(void)
{
 801fdd4:	b480      	push	{r7}
 801fdd6:	b083      	sub	sp, #12
 801fdd8:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 801fdda:	f04f 0300 	mov.w	r3, #0
 801fdde:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 801fde0:	4b05      	ldr	r3, [pc, #20]	; (801fdf8 <rtGetNaNF+0x24>)
 801fde2:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 801fde4:	687b      	ldr	r3, [r7, #4]
 801fde6:	ee07 3a90 	vmov	s15, r3
}
 801fdea:	eeb0 0a67 	vmov.f32	s0, s15
 801fdee:	370c      	adds	r7, #12
 801fdf0:	46bd      	mov	sp, r7
 801fdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdf6:	4770      	bx	lr
 801fdf8:	ffc00000 	.word	0xffc00000
 801fdfc:	00000000 	.word	0x00000000

0801fe00 <rt_hypotd_snf>:
#include "rt_hypotd_snf.h"
#include <math.h>
#include "rt_nonfinite.h"

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
 801fe00:	b580      	push	{r7, lr}
 801fe02:	b088      	sub	sp, #32
 801fe04:	af00      	add	r7, sp, #0
 801fe06:	ed87 0b02 	vstr	d0, [r7, #8]
 801fe0a:	ed87 1b00 	vstr	d1, [r7]
  real_T a;
  real_T y;
  a = fabs(u0);
 801fe0e:	68bb      	ldr	r3, [r7, #8]
 801fe10:	613b      	str	r3, [r7, #16]
 801fe12:	68fb      	ldr	r3, [r7, #12]
 801fe14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fe18:	617b      	str	r3, [r7, #20]
  y = fabs(u1);
 801fe1a:	683b      	ldr	r3, [r7, #0]
 801fe1c:	61bb      	str	r3, [r7, #24]
 801fe1e:	687b      	ldr	r3, [r7, #4]
 801fe20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fe24:	61fb      	str	r3, [r7, #28]
  if (a < y) {
 801fe26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801fe2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801fe2e:	f7e0 fe47 	bl	8000ac0 <__aeabi_dcmplt>
 801fe32:	4603      	mov	r3, r0
 801fe34:	2b00      	cmp	r3, #0
 801fe36:	d02d      	beq.n	801fe94 <rt_hypotd_snf+0x94>
    a /= y;
 801fe38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801fe3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801fe40:	f7e0 fcf6 	bl	8000830 <__aeabi_ddiv>
 801fe44:	4602      	mov	r2, r0
 801fe46:	460b      	mov	r3, r1
 801fe48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y *= sqrt(a * a + 1.0);
 801fe4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801fe50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801fe54:	f7e0 fbc2 	bl	80005dc <__aeabi_dmul>
 801fe58:	4602      	mov	r2, r0
 801fe5a:	460b      	mov	r3, r1
 801fe5c:	4610      	mov	r0, r2
 801fe5e:	4619      	mov	r1, r3
 801fe60:	f04f 0200 	mov.w	r2, #0
 801fe64:	4b38      	ldr	r3, [pc, #224]	; (801ff48 <rt_hypotd_snf+0x148>)
 801fe66:	f7e0 fa03 	bl	8000270 <__adddf3>
 801fe6a:	4602      	mov	r2, r0
 801fe6c:	460b      	mov	r3, r1
 801fe6e:	ec43 2b17 	vmov	d7, r2, r3
 801fe72:	eeb0 0a47 	vmov.f32	s0, s14
 801fe76:	eef0 0a67 	vmov.f32	s1, s15
 801fe7a:	f00e fe3d 	bl	802eaf8 <sqrt>
 801fe7e:	ec53 2b10 	vmov	r2, r3, d0
 801fe82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801fe86:	f7e0 fba9 	bl	80005dc <__aeabi_dmul>
 801fe8a:	4602      	mov	r2, r0
 801fe8c:	460b      	mov	r3, r1
 801fe8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801fe92:	e048      	b.n	801ff26 <rt_hypotd_snf+0x126>
  } else if (a > y) {
 801fe94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801fe98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801fe9c:	f7e0 fe2e 	bl	8000afc <__aeabi_dcmpgt>
 801fea0:	4603      	mov	r3, r0
 801fea2:	2b00      	cmp	r3, #0
 801fea4:	d02d      	beq.n	801ff02 <rt_hypotd_snf+0x102>
    y /= a;
 801fea6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801feaa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801feae:	f7e0 fcbf 	bl	8000830 <__aeabi_ddiv>
 801feb2:	4602      	mov	r2, r0
 801feb4:	460b      	mov	r3, r1
 801feb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = sqrt(y * y + 1.0) * a;
 801feba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801febe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801fec2:	f7e0 fb8b 	bl	80005dc <__aeabi_dmul>
 801fec6:	4602      	mov	r2, r0
 801fec8:	460b      	mov	r3, r1
 801feca:	4610      	mov	r0, r2
 801fecc:	4619      	mov	r1, r3
 801fece:	f04f 0200 	mov.w	r2, #0
 801fed2:	4b1d      	ldr	r3, [pc, #116]	; (801ff48 <rt_hypotd_snf+0x148>)
 801fed4:	f7e0 f9cc 	bl	8000270 <__adddf3>
 801fed8:	4602      	mov	r2, r0
 801feda:	460b      	mov	r3, r1
 801fedc:	ec43 2b17 	vmov	d7, r2, r3
 801fee0:	eeb0 0a47 	vmov.f32	s0, s14
 801fee4:	eef0 0a67 	vmov.f32	s1, s15
 801fee8:	f00e fe06 	bl	802eaf8 <sqrt>
 801feec:	ec53 2b10 	vmov	r2, r3, d0
 801fef0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801fef4:	f7e0 fb72 	bl	80005dc <__aeabi_dmul>
 801fef8:	4602      	mov	r2, r0
 801fefa:	460b      	mov	r3, r1
 801fefc:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801ff00:	e011      	b.n	801ff26 <rt_hypotd_snf+0x126>
  } else if (!rtIsNaN(y)) {
 801ff02:	ed97 0b06 	vldr	d0, [r7, #24]
 801ff06:	f000 f889 	bl	802001c <rtIsNaN>
 801ff0a:	4603      	mov	r3, r0
 801ff0c:	2b00      	cmp	r3, #0
 801ff0e:	d10a      	bne.n	801ff26 <rt_hypotd_snf+0x126>
    y = a * 1.4142135623730951;
 801ff10:	a30b      	add	r3, pc, #44	; (adr r3, 801ff40 <rt_hypotd_snf+0x140>)
 801ff12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801ff1a:	f7e0 fb5f 	bl	80005dc <__aeabi_dmul>
 801ff1e:	4602      	mov	r2, r0
 801ff20:	460b      	mov	r3, r1
 801ff22:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  return y;
 801ff26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ff2a:	ec43 2b17 	vmov	d7, r2, r3
}
 801ff2e:	eeb0 0a47 	vmov.f32	s0, s14
 801ff32:	eef0 0a67 	vmov.f32	s1, s15
 801ff36:	3720      	adds	r7, #32
 801ff38:	46bd      	mov	sp, r7
 801ff3a:	bd80      	pop	{r7, pc}
 801ff3c:	f3af 8000 	nop.w
 801ff40:	667f3bcd 	.word	0x667f3bcd
 801ff44:	3ff6a09e 	.word	0x3ff6a09e
 801ff48:	3ff00000 	.word	0x3ff00000

0801ff4c <rt_InitInfAndNaN>:
real_T rtNaN;
real32_T rtInfF;
real32_T rtMinusInfF;
real32_T rtNaNF;
void rt_InitInfAndNaN(size_t realSize)
{
 801ff4c:	b580      	push	{r7, lr}
 801ff4e:	b082      	sub	sp, #8
 801ff50:	af00      	add	r7, sp, #0
 801ff52:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 801ff54:	f7ff ff0e 	bl	801fd74 <rtGetNaN>
 801ff58:	eeb0 7a40 	vmov.f32	s14, s0
 801ff5c:	eef0 7a60 	vmov.f32	s15, s1
 801ff60:	4b16      	ldr	r3, [pc, #88]	; (801ffbc <rt_InitInfAndNaN+0x70>)
 801ff62:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 801ff66:	f7ff ff35 	bl	801fdd4 <rtGetNaNF>
 801ff6a:	eef0 7a40 	vmov.f32	s15, s0
 801ff6e:	4b14      	ldr	r3, [pc, #80]	; (801ffc0 <rt_InitInfAndNaN+0x74>)
 801ff70:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 801ff74:	f7ff fe7c 	bl	801fc70 <rtGetInf>
 801ff78:	eeb0 7a40 	vmov.f32	s14, s0
 801ff7c:	eef0 7a60 	vmov.f32	s15, s1
 801ff80:	4b10      	ldr	r3, [pc, #64]	; (801ffc4 <rt_InitInfAndNaN+0x78>)
 801ff82:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 801ff86:	f7ff fea3 	bl	801fcd0 <rtGetInfF>
 801ff8a:	eef0 7a40 	vmov.f32	s15, s0
 801ff8e:	4b0e      	ldr	r3, [pc, #56]	; (801ffc8 <rt_InitInfAndNaN+0x7c>)
 801ff90:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 801ff94:	f7ff feac 	bl	801fcf0 <rtGetMinusInf>
 801ff98:	eeb0 7a40 	vmov.f32	s14, s0
 801ff9c:	eef0 7a60 	vmov.f32	s15, s1
 801ffa0:	4b0a      	ldr	r3, [pc, #40]	; (801ffcc <rt_InitInfAndNaN+0x80>)
 801ffa2:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 801ffa6:	f7ff fed3 	bl	801fd50 <rtGetMinusInfF>
 801ffaa:	eef0 7a40 	vmov.f32	s15, s0
 801ffae:	4b08      	ldr	r3, [pc, #32]	; (801ffd0 <rt_InitInfAndNaN+0x84>)
 801ffb0:	edc3 7a00 	vstr	s15, [r3]
}
 801ffb4:	bf00      	nop
 801ffb6:	3708      	adds	r7, #8
 801ffb8:	46bd      	mov	sp, r7
 801ffba:	bd80      	pop	{r7, pc}
 801ffbc:	2001ee68 	.word	0x2001ee68
 801ffc0:	2001ee58 	.word	0x2001ee58
 801ffc4:	2001ee60 	.word	0x2001ee60
 801ffc8:	2001ee5c 	.word	0x2001ee5c
 801ffcc:	2001ee70 	.word	0x2001ee70
 801ffd0:	2001ee78 	.word	0x2001ee78

0801ffd4 <rtIsInf>:

boolean_T rtIsInf(real_T value)
{
 801ffd4:	b580      	push	{r7, lr}
 801ffd6:	b082      	sub	sp, #8
 801ffd8:	af00      	add	r7, sp, #0
 801ffda:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 801ffde:	4b0d      	ldr	r3, [pc, #52]	; (8020014 <rtIsInf+0x40>)
 801ffe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ffe8:	f7e0 fd60 	bl	8000aac <__aeabi_dcmpeq>
 801ffec:	4603      	mov	r3, r0
 801ffee:	2b00      	cmp	r3, #0
 801fff0:	d109      	bne.n	8020006 <rtIsInf+0x32>
 801fff2:	4b09      	ldr	r3, [pc, #36]	; (8020018 <rtIsInf+0x44>)
 801fff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fff8:	e9d7 0100 	ldrd	r0, r1, [r7]
 801fffc:	f7e0 fd56 	bl	8000aac <__aeabi_dcmpeq>
 8020000:	4603      	mov	r3, r0
 8020002:	2b00      	cmp	r3, #0
 8020004:	d001      	beq.n	802000a <rtIsInf+0x36>
 8020006:	2301      	movs	r3, #1
 8020008:	e000      	b.n	802000c <rtIsInf+0x38>
 802000a:	2300      	movs	r3, #0
}
 802000c:	4618      	mov	r0, r3
 802000e:	3708      	adds	r7, #8
 8020010:	46bd      	mov	sp, r7
 8020012:	bd80      	pop	{r7, pc}
 8020014:	2001ee60 	.word	0x2001ee60
 8020018:	2001ee70 	.word	0x2001ee70

0802001c <rtIsNaN>:
{
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

boolean_T rtIsNaN(real_T value)
{
 802001c:	b580      	push	{r7, lr}
 802001e:	b086      	sub	sp, #24
 8020020:	af00      	add	r7, sp, #0
 8020022:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 8020026:	2300      	movs	r3, #0
 8020028:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 802002a:	2340      	movs	r3, #64	; 0x40
 802002c:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 802002e:	693b      	ldr	r3, [r7, #16]
 8020030:	2b20      	cmp	r3, #32
 8020032:	d10b      	bne.n	802004c <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 8020034:	e9d7 0100 	ldrd	r0, r1, [r7]
 8020038:	f7e0 fdc8 	bl	8000bcc <__aeabi_d2f>
 802003c:	4603      	mov	r3, r0
 802003e:	ee00 3a10 	vmov	s0, r3
 8020042:	f000 f821 	bl	8020088 <rtIsNaNF>
 8020046:	4603      	mov	r3, r0
 8020048:	75fb      	strb	r3, [r7, #23]
 802004a:	e015      	b.n	8020078 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 802004c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020050:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8020054:	68fa      	ldr	r2, [r7, #12]
 8020056:	4b0b      	ldr	r3, [pc, #44]	; (8020084 <rtIsNaN+0x68>)
 8020058:	4013      	ands	r3, r2
 802005a:	4a0a      	ldr	r2, [pc, #40]	; (8020084 <rtIsNaN+0x68>)
 802005c:	4293      	cmp	r3, r2
 802005e:	d109      	bne.n	8020074 <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8020060:	68fb      	ldr	r3, [r7, #12]
 8020062:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8020066:	2b00      	cmp	r3, #0
 8020068:	d102      	bne.n	8020070 <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 802006a:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 802006c:	2b00      	cmp	r3, #0
 802006e:	d001      	beq.n	8020074 <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8020070:	2301      	movs	r3, #1
 8020072:	e000      	b.n	8020076 <rtIsNaN+0x5a>
 8020074:	2300      	movs	r3, #0
 8020076:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8020078:	7dfb      	ldrb	r3, [r7, #23]
}
 802007a:	4618      	mov	r0, r3
 802007c:	3718      	adds	r7, #24
 802007e:	46bd      	mov	sp, r7
 8020080:	bd80      	pop	{r7, pc}
 8020082:	bf00      	nop
 8020084:	7ff00000 	.word	0x7ff00000

08020088 <rtIsNaNF>:

boolean_T rtIsNaNF(real32_T value)
{
 8020088:	b480      	push	{r7}
 802008a:	b085      	sub	sp, #20
 802008c:	af00      	add	r7, sp, #0
 802008e:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 8020092:	687b      	ldr	r3, [r7, #4]
 8020094:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8020096:	68fb      	ldr	r3, [r7, #12]
 8020098:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 802009c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80200a0:	d106      	bne.n	80200b0 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 80200a2:	68fb      	ldr	r3, [r7, #12]
 80200a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	d001      	beq.n	80200b0 <rtIsNaNF+0x28>
 80200ac:	2301      	movs	r3, #1
 80200ae:	e000      	b.n	80200b2 <rtIsNaNF+0x2a>
 80200b0:	2300      	movs	r3, #0
 80200b2:	b2db      	uxtb	r3, r3
}
 80200b4:	4618      	mov	r0, r3
 80200b6:	3714      	adds	r7, #20
 80200b8:	46bd      	mov	sp, r7
 80200ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200be:	4770      	bx	lr

080200c0 <svd_u3DvUgOe>:
#include "xrotg_XzIjz1eG.h"
#include "xrot_i7f01JoJ.h"
#include "xswap_JoAqPjUv.h"

void svd_u3DvUgOe(const real_T A[9], real_T U[9], real_T s[3], real_T V[9])
{
 80200c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80200c4:	ed2d 8b02 	vpush	{d8}
 80200c8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80200cc:	af02      	add	r7, sp, #8
 80200ce:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80200d2:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80200d6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80200da:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80200de:	6013      	str	r3, [r2, #0]
  int32_T kase;
  int32_T m;
  int32_T qjj;
  int32_T qq;
  boolean_T apply_transform;
  e[0] = 0.0;
 80200e0:	f04f 0200 	mov.w	r2, #0
 80200e4:	f04f 0300 	mov.w	r3, #0
 80200e8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  work[0] = 0.0;
 80200ec:	f04f 0200 	mov.w	r2, #0
 80200f0:	f04f 0300 	mov.w	r3, #0
 80200f4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  e[1] = 0.0;
 80200f8:	f04f 0200 	mov.w	r2, #0
 80200fc:	f04f 0300 	mov.w	r3, #0
 8020100:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  work[1] = 0.0;
 8020104:	f04f 0200 	mov.w	r2, #0
 8020108:	f04f 0300 	mov.w	r3, #0
 802010c:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  e[2] = 0.0;
 8020110:	f04f 0200 	mov.w	r2, #0
 8020114:	f04f 0300 	mov.w	r3, #0
 8020118:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  work[2] = 0.0;
 802011c:	f04f 0200 	mov.w	r2, #0
 8020120:	f04f 0300 	mov.w	r3, #0
 8020124:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  for (qq = 0; qq < 9; qq++) {
 8020128:	2300      	movs	r3, #0
 802012a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802012e:	e02e      	b.n	802018e <svd_u3DvUgOe+0xce>
    b_A[qq] = A[qq];
 8020130:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020134:	00da      	lsls	r2, r3, #3
 8020136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 802013a:	4413      	add	r3, r2
 802013c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020140:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020144:	00db      	lsls	r3, r3, #3
 8020146:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802014a:	4413      	add	r3, r2
 802014c:	3b88      	subs	r3, #136	; 0x88
 802014e:	e9c3 0100 	strd	r0, r1, [r3]
    U[qq] = 0.0;
 8020152:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020156:	00da      	lsls	r2, r3, #3
 8020158:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 802015c:	1899      	adds	r1, r3, r2
 802015e:	f04f 0200 	mov.w	r2, #0
 8020162:	f04f 0300 	mov.w	r3, #0
 8020166:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq] = 0.0;
 802016a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802016e:	00da      	lsls	r2, r3, #3
 8020170:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020174:	681b      	ldr	r3, [r3, #0]
 8020176:	1899      	adds	r1, r3, r2
 8020178:	f04f 0200 	mov.w	r2, #0
 802017c:	f04f 0300 	mov.w	r3, #0
 8020180:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 0; qq < 9; qq++) {
 8020184:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020188:	3301      	adds	r3, #1
 802018a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802018e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020192:	2b08      	cmp	r3, #8
 8020194:	ddcc      	ble.n	8020130 <svd_u3DvUgOe+0x70>
  }

  qq = 0;
 8020196:	2300      	movs	r3, #0
 8020198:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  apply_transform = false;
 802019c:	2300      	movs	r3, #0
 802019e:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(3, b_A, 1);
 80201a2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80201a6:	2201      	movs	r2, #1
 80201a8:	4619      	mov	r1, r3
 80201aa:	2003      	movs	r0, #3
 80201ac:	f002 fbbc 	bl	8022928 <xnrm2_xDOlDEtw>
 80201b0:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 80201b4:	f04f 0200 	mov.w	r2, #0
 80201b8:	f04f 0300 	mov.w	r3, #0
 80201bc:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 80201c0:	f7e0 fc9c 	bl	8000afc <__aeabi_dcmpgt>
 80201c4:	4603      	mov	r3, r0
 80201c6:	2b00      	cmp	r3, #0
 80201c8:	d07b      	beq.n	80202c2 <svd_u3DvUgOe+0x202>
    apply_transform = true;
 80201ca:	2301      	movs	r3, #1
 80201cc:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[0] < 0.0) {
 80201d0:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80201d4:	f04f 0200 	mov.w	r2, #0
 80201d8:	f04f 0300 	mov.w	r3, #0
 80201dc:	f7e0 fc70 	bl	8000ac0 <__aeabi_dcmplt>
 80201e0:	4603      	mov	r3, r0
 80201e2:	2b00      	cmp	r3, #0
 80201e4:	d008      	beq.n	80201f8 <svd_u3DvUgOe+0x138>
      b_s[0] = -nrm;
 80201e6:	f8d7 41c8 	ldr.w	r4, [r7, #456]	; 0x1c8
 80201ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80201ee:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80201f2:	e9c7 4558 	strd	r4, r5, [r7, #352]	; 0x160
 80201f6:	e003      	b.n	8020200 <svd_u3DvUgOe+0x140>
    } else {
      b_s[0] = nrm;
 80201f8:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80201fc:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    }

    if (fabs(b_s[0]) >= 1.0020841800044864E-292) {
 8020200:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8020204:	4690      	mov	r8, r2
 8020206:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 802020a:	f04f 0200 	mov.w	r2, #0
 802020e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8020212:	4640      	mov	r0, r8
 8020214:	4649      	mov	r1, r9
 8020216:	f7e0 fc67 	bl	8000ae8 <__aeabi_dcmpge>
 802021a:	4603      	mov	r3, r0
 802021c:	2b00      	cmp	r3, #0
 802021e:	d016      	beq.n	802024e <svd_u3DvUgOe+0x18e>
      xscal_59GtRAwv(3, 1.0 / b_s[0], b_A, 1);
 8020220:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8020224:	f04f 0000 	mov.w	r0, #0
 8020228:	49c1      	ldr	r1, [pc, #772]	; (8020530 <svd_u3DvUgOe+0x470>)
 802022a:	f7e0 fb01 	bl	8000830 <__aeabi_ddiv>
 802022e:	4602      	mov	r2, r0
 8020230:	460b      	mov	r3, r1
 8020232:	ec43 2b17 	vmov	d7, r2, r3
 8020236:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 802023a:	2201      	movs	r2, #1
 802023c:	4619      	mov	r1, r3
 802023e:	eeb0 0a47 	vmov.f32	s0, s14
 8020242:	eef0 0a67 	vmov.f32	s1, s15
 8020246:	2003      	movs	r0, #3
 8020248:	f002 fe36 	bl	8022eb8 <xscal_59GtRAwv>
 802024c:	e026      	b.n	802029c <svd_u3DvUgOe+0x1dc>
    } else {
      for (qjj = 0; qjj < 3; qjj++) {
 802024e:	2300      	movs	r3, #0
 8020250:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8020254:	e01e      	b.n	8020294 <svd_u3DvUgOe+0x1d4>
        b_A[qjj] /= b_s[0];
 8020256:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802025a:	00db      	lsls	r3, r3, #3
 802025c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020260:	4413      	add	r3, r2
 8020262:	3b88      	subs	r3, #136	; 0x88
 8020264:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020268:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 802026c:	f7e0 fae0 	bl	8000830 <__aeabi_ddiv>
 8020270:	4602      	mov	r2, r0
 8020272:	460b      	mov	r3, r1
 8020274:	4610      	mov	r0, r2
 8020276:	4619      	mov	r1, r3
 8020278:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802027c:	00db      	lsls	r3, r3, #3
 802027e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020282:	4413      	add	r3, r2
 8020284:	3b88      	subs	r3, #136	; 0x88
 8020286:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 0; qjj < 3; qjj++) {
 802028a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802028e:	3301      	adds	r3, #1
 8020290:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8020294:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020298:	2b02      	cmp	r3, #2
 802029a:	dddc      	ble.n	8020256 <svd_u3DvUgOe+0x196>
      }
    }

    b_A[0]++;
 802029c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80202a0:	f04f 0200 	mov.w	r2, #0
 80202a4:	4ba2      	ldr	r3, [pc, #648]	; (8020530 <svd_u3DvUgOe+0x470>)
 80202a6:	f7df ffe3 	bl	8000270 <__adddf3>
 80202aa:	4602      	mov	r2, r0
 80202ac:	460b      	mov	r3, r1
 80202ae:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
    b_s[0] = -b_s[0];
 80202b2:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80202b6:	4692      	mov	sl, r2
 80202b8:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80202bc:	e9c7 ab58 	strd	sl, fp, [r7, #352]	; 0x160
 80202c0:	e005      	b.n	80202ce <svd_u3DvUgOe+0x20e>
  } else {
    b_s[0] = 0.0;
 80202c2:	f04f 0200 	mov.w	r2, #0
 80202c6:	f04f 0300 	mov.w	r3, #0
 80202ca:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  }

  for (d = 1; d + 1 < 4; d++) {
 80202ce:	2301      	movs	r3, #1
 80202d0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80202d4:	e047      	b.n	8020366 <svd_u3DvUgOe+0x2a6>
    qjj = 3 * d;
 80202d6:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80202da:	4613      	mov	r3, r2
 80202dc:	005b      	lsls	r3, r3, #1
 80202de:	4413      	add	r3, r2
 80202e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 80202e4:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	d025      	beq.n	8020338 <svd_u3DvUgOe+0x278>
      xaxpy_guu0hJif(3, -(xdotc_mznw4aLl(3, b_A, 1, b_A, qjj + 1) / b_A[0]), 1,
 80202ec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80202f0:	3301      	adds	r3, #1
 80202f2:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80202f6:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80202fa:	9300      	str	r3, [sp, #0]
 80202fc:	4613      	mov	r3, r2
 80202fe:	2201      	movs	r2, #1
 8020300:	2003      	movs	r0, #3
 8020302:	f001 fdf8 	bl	8021ef6 <xdotc_mznw4aLl>
 8020306:	ec51 0b10 	vmov	r0, r1, d0
 802030a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 802030e:	f7e0 fa8f 	bl	8000830 <__aeabi_ddiv>
 8020312:	4602      	mov	r2, r0
 8020314:	460b      	mov	r3, r1
 8020316:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 802031a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 802031e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8020322:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020326:	3301      	adds	r3, #1
 8020328:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 802032c:	2101      	movs	r1, #1
 802032e:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8020332:	2003      	movs	r0, #3
 8020334:	f001 fd8b 	bl	8021e4e <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 8020338:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802033c:	00db      	lsls	r3, r3, #3
 802033e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020342:	4413      	add	r3, r2
 8020344:	3b88      	subs	r3, #136	; 0x88
 8020346:	e9d3 0100 	ldrd	r0, r1, [r3]
 802034a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802034e:	00db      	lsls	r3, r3, #3
 8020350:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020354:	4413      	add	r3, r2
 8020356:	3bb8      	subs	r3, #184	; 0xb8
 8020358:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 1; d + 1 < 4; d++) {
 802035c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020360:	3301      	adds	r3, #1
 8020362:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020366:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802036a:	2b02      	cmp	r3, #2
 802036c:	ddb3      	ble.n	80202d6 <svd_u3DvUgOe+0x216>
  }

  while (qq + 1 < 4) {
 802036e:	e015      	b.n	802039c <svd_u3DvUgOe+0x2dc>
    U[qq] = b_A[qq];
 8020370:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020374:	00da      	lsls	r2, r3, #3
 8020376:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 802037a:	1899      	adds	r1, r3, r2
 802037c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020380:	00db      	lsls	r3, r3, #3
 8020382:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020386:	4413      	add	r3, r2
 8020388:	3b88      	subs	r3, #136	; 0x88
 802038a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802038e:	e9c1 2300 	strd	r2, r3, [r1]
    qq++;
 8020392:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020396:	3301      	adds	r3, #1
 8020398:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  while (qq + 1 < 4) {
 802039c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80203a0:	2b02      	cmp	r3, #2
 80203a2:	dde5      	ble.n	8020370 <svd_u3DvUgOe+0x2b0>
  }

  nrm = xnrm2_Rlk0oxWw(2, e, 2);
 80203a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80203a8:	2202      	movs	r2, #2
 80203aa:	4619      	mov	r1, r3
 80203ac:	2002      	movs	r0, #2
 80203ae:	f002 f95f 	bl	8022670 <xnrm2_Rlk0oxWw>
 80203b2:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm == 0.0) {
 80203b6:	f04f 0200 	mov.w	r2, #0
 80203ba:	f04f 0300 	mov.w	r3, #0
 80203be:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 80203c2:	f7e0 fb73 	bl	8000aac <__aeabi_dcmpeq>
 80203c6:	4603      	mov	r3, r0
 80203c8:	2b00      	cmp	r3, #0
 80203ca:	d006      	beq.n	80203da <svd_u3DvUgOe+0x31a>
    e[0] = 0.0;
 80203cc:	f04f 0200 	mov.w	r2, #0
 80203d0:	f04f 0300 	mov.w	r3, #0
 80203d4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 80203d8:	e10d      	b.n	80205f6 <svd_u3DvUgOe+0x536>
  } else {
    if (e[1] < 0.0) {
 80203da:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 80203de:	f04f 0200 	mov.w	r2, #0
 80203e2:	f04f 0300 	mov.w	r3, #0
 80203e6:	f7e0 fb6b 	bl	8000ac0 <__aeabi_dcmplt>
 80203ea:	4603      	mov	r3, r0
 80203ec:	2b00      	cmp	r3, #0
 80203ee:	d00e      	beq.n	802040e <svd_u3DvUgOe+0x34e>
      e[0] = -nrm;
 80203f0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80203f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80203f8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80203fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020400:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8020404:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 8020408:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
 802040c:	e003      	b.n	8020416 <svd_u3DvUgOe+0x356>
    } else {
      e[0] = nrm;
 802040e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020412:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    }

    nrm = e[0];
 8020416:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 802041a:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    if (fabs(e[0]) >= 1.0020841800044864E-292) {
 802041e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8020422:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8020426:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802042a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 802042e:	f04f 0200 	mov.w	r2, #0
 8020432:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8020436:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 802043a:	f7e0 fb55 	bl	8000ae8 <__aeabi_dcmpge>
 802043e:	4603      	mov	r3, r0
 8020440:	2b00      	cmp	r3, #0
 8020442:	d016      	beq.n	8020472 <svd_u3DvUgOe+0x3b2>
      xscal_PLmmUlD2(2, 1.0 / e[0], e, 2);
 8020444:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8020448:	f04f 0000 	mov.w	r0, #0
 802044c:	4938      	ldr	r1, [pc, #224]	; (8020530 <svd_u3DvUgOe+0x470>)
 802044e:	f7e0 f9ef 	bl	8000830 <__aeabi_ddiv>
 8020452:	4602      	mov	r2, r0
 8020454:	460b      	mov	r3, r1
 8020456:	ec43 2b17 	vmov	d7, r2, r3
 802045a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 802045e:	2202      	movs	r2, #2
 8020460:	4619      	mov	r1, r3
 8020462:	eeb0 0a47 	vmov.f32	s0, s14
 8020466:	eef0 0a67 	vmov.f32	s1, s15
 802046a:	2002      	movs	r0, #2
 802046c:	f002 fd58 	bl	8022f20 <xscal_PLmmUlD2>
 8020470:	e026      	b.n	80204c0 <svd_u3DvUgOe+0x400>
    } else {
      for (qq = 1; qq < 3; qq++) {
 8020472:	2301      	movs	r3, #1
 8020474:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020478:	e01e      	b.n	80204b8 <svd_u3DvUgOe+0x3f8>
        e[qq] /= nrm;
 802047a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802047e:	00db      	lsls	r3, r3, #3
 8020480:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020484:	4413      	add	r3, r2
 8020486:	3bb8      	subs	r3, #184	; 0xb8
 8020488:	e9d3 0100 	ldrd	r0, r1, [r3]
 802048c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020490:	f7e0 f9ce 	bl	8000830 <__aeabi_ddiv>
 8020494:	4602      	mov	r2, r0
 8020496:	460b      	mov	r3, r1
 8020498:	4610      	mov	r0, r2
 802049a:	4619      	mov	r1, r3
 802049c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80204a0:	00db      	lsls	r3, r3, #3
 80204a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80204a6:	4413      	add	r3, r2
 80204a8:	3bb8      	subs	r3, #184	; 0xb8
 80204aa:	e9c3 0100 	strd	r0, r1, [r3]
      for (qq = 1; qq < 3; qq++) {
 80204ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80204b2:	3301      	adds	r3, #1
 80204b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80204b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80204bc:	2b02      	cmp	r3, #2
 80204be:	dddc      	ble.n	802047a <svd_u3DvUgOe+0x3ba>
      }
    }

    e[1]++;
 80204c0:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 80204c4:	f04f 0200 	mov.w	r2, #0
 80204c8:	4b19      	ldr	r3, [pc, #100]	; (8020530 <svd_u3DvUgOe+0x470>)
 80204ca:	f7df fed1 	bl	8000270 <__adddf3>
 80204ce:	4602      	mov	r2, r0
 80204d0:	460b      	mov	r3, r1
 80204d2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    e[0] = -e[0];
 80204d6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80204da:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80204de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80204e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80204e6:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 80204ea:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
    for (qq = 2; qq < 4; qq++) {
 80204ee:	2302      	movs	r3, #2
 80204f0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80204f4:	e013      	b.n	802051e <svd_u3DvUgOe+0x45e>
      work[qq - 1] = 0.0;
 80204f6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80204fa:	3b01      	subs	r3, #1
 80204fc:	00db      	lsls	r3, r3, #3
 80204fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020502:	4413      	add	r3, r2
 8020504:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 8020508:	f04f 0200 	mov.w	r2, #0
 802050c:	f04f 0300 	mov.w	r3, #0
 8020510:	e9c1 2300 	strd	r2, r3, [r1]
    for (qq = 2; qq < 4; qq++) {
 8020514:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020518:	3301      	adds	r3, #1
 802051a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802051e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020522:	2b03      	cmp	r3, #3
 8020524:	dde7      	ble.n	80204f6 <svd_u3DvUgOe+0x436>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 8020526:	2301      	movs	r3, #1
 8020528:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802052c:	e025      	b.n	802057a <svd_u3DvUgOe+0x4ba>
 802052e:	bf00      	nop
 8020530:	3ff00000 	.word	0x3ff00000
      xaxpy_OQ28XA21(2, e[qq], b_A, 3 * qq + 2, work, 2);
 8020534:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020538:	00db      	lsls	r3, r3, #3
 802053a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802053e:	4413      	add	r3, r2
 8020540:	3bb8      	subs	r3, #184	; 0xb8
 8020542:	ed93 7b00 	vldr	d7, [r3]
 8020546:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 802054a:	4613      	mov	r3, r2
 802054c:	005b      	lsls	r3, r3, #1
 802054e:	4413      	add	r3, r2
 8020550:	1c98      	adds	r0, r3, #2
 8020552:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020556:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 802055a:	2302      	movs	r3, #2
 802055c:	9300      	str	r3, [sp, #0]
 802055e:	4613      	mov	r3, r2
 8020560:	4602      	mov	r2, r0
 8020562:	eeb0 0a47 	vmov.f32	s0, s14
 8020566:	eef0 0a67 	vmov.f32	s1, s15
 802056a:	2002      	movs	r0, #2
 802056c:	f001 fbc7 	bl	8021cfe <xaxpy_OQ28XA21>
    for (qq = 1; qq + 1 < 4; qq++) {
 8020570:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020574:	3301      	adds	r3, #1
 8020576:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802057a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802057e:	2b02      	cmp	r3, #2
 8020580:	ddd8      	ble.n	8020534 <svd_u3DvUgOe+0x474>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 8020582:	2301      	movs	r3, #1
 8020584:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020588:	e031      	b.n	80205ee <svd_u3DvUgOe+0x52e>
      xaxpy_Wxch84Fl(2, -e[qq] / e[1], work, 2, b_A, 3 * qq + 2);
 802058a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802058e:	00db      	lsls	r3, r3, #3
 8020590:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020594:	4413      	add	r3, r2
 8020596:	3bb8      	subs	r3, #184	; 0xb8
 8020598:	e9d3 2300 	ldrd	r2, r3, [r3]
 802059c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80205a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80205a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80205a8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80205ac:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80205b0:	f7e0 f93e 	bl	8000830 <__aeabi_ddiv>
 80205b4:	4602      	mov	r2, r0
 80205b6:	460b      	mov	r3, r1
 80205b8:	ec43 2b17 	vmov	d7, r2, r3
 80205bc:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80205c0:	4613      	mov	r3, r2
 80205c2:	005b      	lsls	r3, r3, #1
 80205c4:	4413      	add	r3, r2
 80205c6:	3302      	adds	r3, #2
 80205c8:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80205cc:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80205d0:	9300      	str	r3, [sp, #0]
 80205d2:	4613      	mov	r3, r2
 80205d4:	2202      	movs	r2, #2
 80205d6:	eeb0 0a47 	vmov.f32	s0, s14
 80205da:	eef0 0a67 	vmov.f32	s1, s15
 80205de:	2002      	movs	r0, #2
 80205e0:	f001 fbe1 	bl	8021da6 <xaxpy_Wxch84Fl>
    for (qq = 1; qq + 1 < 4; qq++) {
 80205e4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80205e8:	3301      	adds	r3, #1
 80205ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80205ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80205f2:	2b02      	cmp	r3, #2
 80205f4:	ddc9      	ble.n	802058a <svd_u3DvUgOe+0x4ca>
    }
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 80205f6:	2301      	movs	r3, #1
 80205f8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80205fc:	e016      	b.n	802062c <svd_u3DvUgOe+0x56c>
    V[qq] = e[qq];
 80205fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020602:	00da      	lsls	r2, r3, #3
 8020604:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020608:	681b      	ldr	r3, [r3, #0]
 802060a:	1899      	adds	r1, r3, r2
 802060c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020610:	00db      	lsls	r3, r3, #3
 8020612:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020616:	4413      	add	r3, r2
 8020618:	3bb8      	subs	r3, #184	; 0xb8
 802061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802061e:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 8020622:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020626:	3301      	adds	r3, #1
 8020628:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802062c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020630:	2b02      	cmp	r3, #2
 8020632:	dde4      	ble.n	80205fe <svd_u3DvUgOe+0x53e>
  }

  apply_transform = false;
 8020634:	2300      	movs	r3, #0
 8020636:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(2, b_A, 5);
 802063a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 802063e:	2205      	movs	r2, #5
 8020640:	4619      	mov	r1, r3
 8020642:	2002      	movs	r0, #2
 8020644:	f002 f970 	bl	8022928 <xnrm2_xDOlDEtw>
 8020648:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 802064c:	f04f 0200 	mov.w	r2, #0
 8020650:	f04f 0300 	mov.w	r3, #0
 8020654:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8020658:	f7e0 fa50 	bl	8000afc <__aeabi_dcmpgt>
 802065c:	4603      	mov	r3, r0
 802065e:	2b00      	cmp	r3, #0
 8020660:	f000 808a 	beq.w	8020778 <svd_u3DvUgOe+0x6b8>
    apply_transform = true;
 8020664:	2301      	movs	r3, #1
 8020666:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[4] < 0.0) {
 802066a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 802066e:	f04f 0200 	mov.w	r2, #0
 8020672:	f04f 0300 	mov.w	r3, #0
 8020676:	f7e0 fa23 	bl	8000ac0 <__aeabi_dcmplt>
 802067a:	4603      	mov	r3, r0
 802067c:	2b00      	cmp	r3, #0
 802067e:	d00e      	beq.n	802069e <svd_u3DvUgOe+0x5de>
      b_s[1] = -nrm;
 8020680:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8020684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8020688:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 802068c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020690:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8020694:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8020698:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 802069c:	e003      	b.n	80206a6 <svd_u3DvUgOe+0x5e6>
    } else {
      b_s[1] = nrm;
 802069e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80206a2:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    }

    if (fabs(b_s[1]) >= 1.0020841800044864E-292) {
 80206a6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80206aa:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80206ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80206b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80206b6:	f04f 0200 	mov.w	r2, #0
 80206ba:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80206be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80206c2:	f7e0 fa11 	bl	8000ae8 <__aeabi_dcmpge>
 80206c6:	4603      	mov	r3, r0
 80206c8:	2b00      	cmp	r3, #0
 80206ca:	d016      	beq.n	80206fa <svd_u3DvUgOe+0x63a>
      xscal_59GtRAwv(2, 1.0 / b_s[1], b_A, 5);
 80206cc:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80206d0:	f04f 0000 	mov.w	r0, #0
 80206d4:	49d6      	ldr	r1, [pc, #856]	; (8020a30 <svd_u3DvUgOe+0x970>)
 80206d6:	f7e0 f8ab 	bl	8000830 <__aeabi_ddiv>
 80206da:	4602      	mov	r2, r0
 80206dc:	460b      	mov	r3, r1
 80206de:	ec43 2b17 	vmov	d7, r2, r3
 80206e2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80206e6:	2205      	movs	r2, #5
 80206e8:	4619      	mov	r1, r3
 80206ea:	eeb0 0a47 	vmov.f32	s0, s14
 80206ee:	eef0 0a67 	vmov.f32	s1, s15
 80206f2:	2002      	movs	r0, #2
 80206f4:	f002 fbe0 	bl	8022eb8 <xscal_59GtRAwv>
 80206f8:	e026      	b.n	8020748 <svd_u3DvUgOe+0x688>
    } else {
      for (qjj = 4; qjj < 6; qjj++) {
 80206fa:	2304      	movs	r3, #4
 80206fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8020700:	e01e      	b.n	8020740 <svd_u3DvUgOe+0x680>
        b_A[qjj] /= b_s[1];
 8020702:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020706:	00db      	lsls	r3, r3, #3
 8020708:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802070c:	4413      	add	r3, r2
 802070e:	3b88      	subs	r3, #136	; 0x88
 8020710:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020714:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8020718:	f7e0 f88a 	bl	8000830 <__aeabi_ddiv>
 802071c:	4602      	mov	r2, r0
 802071e:	460b      	mov	r3, r1
 8020720:	4610      	mov	r0, r2
 8020722:	4619      	mov	r1, r3
 8020724:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020728:	00db      	lsls	r3, r3, #3
 802072a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802072e:	4413      	add	r3, r2
 8020730:	3b88      	subs	r3, #136	; 0x88
 8020732:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 4; qjj < 6; qjj++) {
 8020736:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802073a:	3301      	adds	r3, #1
 802073c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8020740:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020744:	2b05      	cmp	r3, #5
 8020746:	dddc      	ble.n	8020702 <svd_u3DvUgOe+0x642>
      }
    }

    b_A[4]++;
 8020748:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 802074c:	f04f 0200 	mov.w	r2, #0
 8020750:	4bb7      	ldr	r3, [pc, #732]	; (8020a30 <svd_u3DvUgOe+0x970>)
 8020752:	f7df fd8d 	bl	8000270 <__adddf3>
 8020756:	4602      	mov	r2, r0
 8020758:	460b      	mov	r3, r1
 802075a:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    b_s[1] = -b_s[1];
 802075e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8020762:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8020766:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 802076a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802076e:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8020772:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 8020776:	e005      	b.n	8020784 <svd_u3DvUgOe+0x6c4>
  } else {
    b_s[1] = 0.0;
 8020778:	f04f 0200 	mov.w	r2, #0
 802077c:	f04f 0300 	mov.w	r3, #0
 8020780:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  }

  for (d = 2; d + 1 < 4; d++) {
 8020784:	2302      	movs	r3, #2
 8020786:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 802078a:	e048      	b.n	802081e <svd_u3DvUgOe+0x75e>
    qjj = 3 * d + 1;
 802078c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020790:	4613      	mov	r3, r2
 8020792:	005b      	lsls	r3, r3, #1
 8020794:	4413      	add	r3, r2
 8020796:	3301      	adds	r3, #1
 8020798:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 802079c:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	d025      	beq.n	80207f0 <svd_u3DvUgOe+0x730>
      xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, b_A, 5, b_A, qjj + 1) / b_A[4]), 5,
 80207a4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80207a8:	3301      	adds	r3, #1
 80207aa:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80207ae:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80207b2:	9300      	str	r3, [sp, #0]
 80207b4:	4613      	mov	r3, r2
 80207b6:	2205      	movs	r2, #5
 80207b8:	2002      	movs	r0, #2
 80207ba:	f001 fb9c 	bl	8021ef6 <xdotc_mznw4aLl>
 80207be:	ec51 0b10 	vmov	r0, r1, d0
 80207c2:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 80207c6:	f7e0 f833 	bl	8000830 <__aeabi_ddiv>
 80207ca:	4602      	mov	r2, r0
 80207cc:	460b      	mov	r3, r1
 80207ce:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80207d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80207d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80207da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80207de:	3301      	adds	r3, #1
 80207e0:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80207e4:	2105      	movs	r1, #5
 80207e6:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 80207ea:	2002      	movs	r0, #2
 80207ec:	f001 fb2f 	bl	8021e4e <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 80207f0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80207f4:	00db      	lsls	r3, r3, #3
 80207f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80207fa:	4413      	add	r3, r2
 80207fc:	3b88      	subs	r3, #136	; 0x88
 80207fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020802:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020806:	00db      	lsls	r3, r3, #3
 8020808:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802080c:	4413      	add	r3, r2
 802080e:	3bb8      	subs	r3, #184	; 0xb8
 8020810:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 2; d + 1 < 4; d++) {
 8020814:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020818:	3301      	adds	r3, #1
 802081a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 802081e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020822:	2b02      	cmp	r3, #2
 8020824:	ddb2      	ble.n	802078c <svd_u3DvUgOe+0x6cc>
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 8020826:	2301      	movs	r3, #1
 8020828:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802082c:	e017      	b.n	802085e <svd_u3DvUgOe+0x79e>
    U[qq + 3] = b_A[qq + 3];
 802082e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020832:	1cd8      	adds	r0, r3, #3
 8020834:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020838:	3303      	adds	r3, #3
 802083a:	00da      	lsls	r2, r3, #3
 802083c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020840:	1899      	adds	r1, r3, r2
 8020842:	00c3      	lsls	r3, r0, #3
 8020844:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020848:	4413      	add	r3, r2
 802084a:	3b88      	subs	r3, #136	; 0x88
 802084c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020850:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 8020854:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020858:	3301      	adds	r3, #1
 802085a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802085e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020862:	2b02      	cmp	r3, #2
 8020864:	dde3      	ble.n	802082e <svd_u3DvUgOe+0x76e>
  }

  m = 1;
 8020866:	2301      	movs	r3, #1
 8020868:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  b_s[2] = b_A[8];
 802086c:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8020870:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  U[6] = 0.0;
 8020874:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020878:	f103 0130 	add.w	r1, r3, #48	; 0x30
 802087c:	f04f 0200 	mov.w	r2, #0
 8020880:	f04f 0300 	mov.w	r3, #0
 8020884:	e9c1 2300 	strd	r2, r3, [r1]
  U[7] = 0.0;
 8020888:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 802088c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8020890:	f04f 0200 	mov.w	r2, #0
 8020894:	f04f 0300 	mov.w	r3, #0
 8020898:	e9c1 2300 	strd	r2, r3, [r1]
  U[8] = 1.0;
 802089c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80208a0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80208a4:	f04f 0200 	mov.w	r2, #0
 80208a8:	4b61      	ldr	r3, [pc, #388]	; (8020a30 <svd_u3DvUgOe+0x970>)
 80208aa:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 80208ae:	2301      	movs	r3, #1
 80208b0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80208b4:	e100      	b.n	8020ab8 <svd_u3DvUgOe+0x9f8>
    qq = 3 * d + d;
 80208b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80208ba:	009b      	lsls	r3, r3, #2
 80208bc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    if (b_s[d] != 0.0) {
 80208c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80208c4:	00db      	lsls	r3, r3, #3
 80208c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80208ca:	4413      	add	r3, r2
 80208cc:	3ba0      	subs	r3, #160	; 0xa0
 80208ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80208d2:	f04f 0200 	mov.w	r2, #0
 80208d6:	f04f 0300 	mov.w	r3, #0
 80208da:	f7e0 f8e7 	bl	8000aac <__aeabi_dcmpeq>
 80208de:	4603      	mov	r3, r0
 80208e0:	2b00      	cmp	r3, #0
 80208e2:	f040 80a7 	bne.w	8020a34 <svd_u3DvUgOe+0x974>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 80208e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80208ea:	3301      	adds	r3, #1
 80208ec:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80208f0:	e043      	b.n	802097a <svd_u3DvUgOe+0x8ba>
        qjj = (3 * kase + d) + 1;
 80208f2:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 80208f6:	4613      	mov	r3, r2
 80208f8:	005b      	lsls	r3, r3, #1
 80208fa:	441a      	add	r2, r3
 80208fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020900:	4413      	add	r3, r2
 8020902:	3301      	adds	r3, #1
 8020904:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(3 - d, -(xdotc_mznw4aLl(3 - d, U, qq + 1, U, qjj) / U[qq]),
 8020908:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802090c:	f1c3 0403 	rsb	r4, r3, #3
 8020910:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020914:	f1c3 0003 	rsb	r0, r3, #3
 8020918:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802091c:	1c5a      	adds	r2, r3, #1
 802091e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020922:	9300      	str	r3, [sp, #0]
 8020924:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020928:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 802092c:	f001 fae3 	bl	8021ef6 <xdotc_mznw4aLl>
 8020930:	ec51 0b10 	vmov	r0, r1, d0
 8020934:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020938:	00da      	lsls	r2, r3, #3
 802093a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 802093e:	4413      	add	r3, r2
 8020940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020944:	f7df ff74 	bl	8000830 <__aeabi_ddiv>
 8020948:	4602      	mov	r2, r0
 802094a:	460b      	mov	r3, r1
 802094c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8020950:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8020958:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802095c:	1c59      	adds	r1, r3, #1
 802095e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020962:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8020966:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 802096a:	4620      	mov	r0, r4
 802096c:	f001 fa6f 	bl	8021e4e <xaxpy_guu0hJif>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 8020970:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020974:	3301      	adds	r3, #1
 8020976:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 802097a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 802097e:	2b02      	cmp	r3, #2
 8020980:	ddb7      	ble.n	80208f2 <svd_u3DvUgOe+0x832>
                       qq + 1, U, qjj);
      }

      for (qjj = d; qjj + 1 < 4; qjj++) {
 8020982:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020986:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 802098a:	e026      	b.n	80209da <svd_u3DvUgOe+0x91a>
        kase = 3 * d + qjj;
 802098c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020990:	4613      	mov	r3, r2
 8020992:	005b      	lsls	r3, r3, #1
 8020994:	441a      	add	r2, r3
 8020996:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802099a:	4413      	add	r3, r2
 802099c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        U[kase] = -U[kase];
 80209a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80209a4:	00da      	lsls	r2, r3, #3
 80209a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80209aa:	4413      	add	r3, r2
 80209ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80209b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80209b4:	00da      	lsls	r2, r3, #3
 80209b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80209ba:	4413      	add	r3, r2
 80209bc:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80209c0:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 80209c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80209c8:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 80209cc:	ed83 7b00 	vstr	d7, [r3]
      for (qjj = d; qjj + 1 < 4; qjj++) {
 80209d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80209d4:	3301      	adds	r3, #1
 80209d6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80209da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80209de:	2b02      	cmp	r3, #2
 80209e0:	ddd4      	ble.n	802098c <svd_u3DvUgOe+0x8cc>
      }

      U[qq]++;
 80209e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80209e6:	00da      	lsls	r2, r3, #3
 80209e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80209ec:	189c      	adds	r4, r3, r2
 80209ee:	e9d4 0100 	ldrd	r0, r1, [r4]
 80209f2:	f04f 0200 	mov.w	r2, #0
 80209f6:	4b0e      	ldr	r3, [pc, #56]	; (8020a30 <svd_u3DvUgOe+0x970>)
 80209f8:	f7df fc3a 	bl	8000270 <__adddf3>
 80209fc:	4602      	mov	r2, r0
 80209fe:	460b      	mov	r3, r1
 8020a00:	e9c4 2300 	strd	r2, r3, [r4]
      if (d - 1 >= 0) {
 8020a04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020a08:	2b00      	cmp	r3, #0
 8020a0a:	dd50      	ble.n	8020aae <svd_u3DvUgOe+0x9ee>
        U[3 * d] = 0.0;
 8020a0c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020a10:	4613      	mov	r3, r2
 8020a12:	005b      	lsls	r3, r3, #1
 8020a14:	4413      	add	r3, r2
 8020a16:	00db      	lsls	r3, r3, #3
 8020a18:	461a      	mov	r2, r3
 8020a1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020a1e:	1899      	adds	r1, r3, r2
 8020a20:	f04f 0200 	mov.w	r2, #0
 8020a24:	f04f 0300 	mov.w	r3, #0
 8020a28:	e9c1 2300 	strd	r2, r3, [r1]
 8020a2c:	e03f      	b.n	8020aae <svd_u3DvUgOe+0x9ee>
 8020a2e:	bf00      	nop
 8020a30:	3ff00000 	.word	0x3ff00000
      }
    } else {
      U[3 * d] = 0.0;
 8020a34:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020a38:	4613      	mov	r3, r2
 8020a3a:	005b      	lsls	r3, r3, #1
 8020a3c:	4413      	add	r3, r2
 8020a3e:	00db      	lsls	r3, r3, #3
 8020a40:	461a      	mov	r2, r3
 8020a42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020a46:	1899      	adds	r1, r3, r2
 8020a48:	f04f 0200 	mov.w	r2, #0
 8020a4c:	f04f 0300 	mov.w	r3, #0
 8020a50:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 1] = 0.0;
 8020a54:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020a58:	4613      	mov	r3, r2
 8020a5a:	005b      	lsls	r3, r3, #1
 8020a5c:	4413      	add	r3, r2
 8020a5e:	00db      	lsls	r3, r3, #3
 8020a60:	f103 0208 	add.w	r2, r3, #8
 8020a64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020a68:	1899      	adds	r1, r3, r2
 8020a6a:	f04f 0200 	mov.w	r2, #0
 8020a6e:	f04f 0300 	mov.w	r3, #0
 8020a72:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 2] = 0.0;
 8020a76:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020a7a:	4613      	mov	r3, r2
 8020a7c:	005b      	lsls	r3, r3, #1
 8020a7e:	4413      	add	r3, r2
 8020a80:	00db      	lsls	r3, r3, #3
 8020a82:	f103 0210 	add.w	r2, r3, #16
 8020a86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020a8a:	1899      	adds	r1, r3, r2
 8020a8c:	f04f 0200 	mov.w	r2, #0
 8020a90:	f04f 0300 	mov.w	r3, #0
 8020a94:	e9c1 2300 	strd	r2, r3, [r1]
      U[qq] = 1.0;
 8020a98:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020a9c:	00da      	lsls	r2, r3, #3
 8020a9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020aa2:	1899      	adds	r1, r3, r2
 8020aa4:	f04f 0200 	mov.w	r2, #0
 8020aa8:	4b11      	ldr	r3, [pc, #68]	; (8020af0 <svd_u3DvUgOe+0xa30>)
 8020aaa:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 8020aae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020ab2:	3b01      	subs	r3, #1
 8020ab4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020ab8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	f6bf aefa 	bge.w	80208b6 <svd_u3DvUgOe+0x7f6>
    }
  }

  for (qq = 2; qq >= 0; qq--) {
 8020ac2:	2302      	movs	r3, #2
 8020ac4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020ac8:	e096      	b.n	8020bf8 <svd_u3DvUgOe+0xb38>
    if ((qq + 1 <= 1) && (e[0] != 0.0)) {
 8020aca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020ace:	2b00      	cmp	r3, #0
 8020ad0:	dc4c      	bgt.n	8020b6c <svd_u3DvUgOe+0xaac>
 8020ad2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8020ad6:	f04f 0200 	mov.w	r2, #0
 8020ada:	f04f 0300 	mov.w	r3, #0
 8020ade:	f7df ffe5 	bl	8000aac <__aeabi_dcmpeq>
 8020ae2:	4603      	mov	r3, r0
 8020ae4:	2b00      	cmp	r3, #0
 8020ae6:	d141      	bne.n	8020b6c <svd_u3DvUgOe+0xaac>
      for (d = 2; d < 4; d++) {
 8020ae8:	2302      	movs	r3, #2
 8020aea:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020aee:	e039      	b.n	8020b64 <svd_u3DvUgOe+0xaa4>
 8020af0:	3ff00000 	.word	0x3ff00000
        qjj = (d - 1) * 3 + 2;
 8020af4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020af8:	1e5a      	subs	r2, r3, #1
 8020afa:	4613      	mov	r3, r2
 8020afc:	005b      	lsls	r3, r3, #1
 8020afe:	4413      	add	r3, r2
 8020b00:	3302      	adds	r3, #2
 8020b02:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, V, 2, V, qjj) / V[1]), 2, V, qjj);
 8020b06:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8020b0a:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8020b0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020b12:	9300      	str	r3, [sp, #0]
 8020b14:	6813      	ldr	r3, [r2, #0]
 8020b16:	2202      	movs	r2, #2
 8020b18:	6809      	ldr	r1, [r1, #0]
 8020b1a:	2002      	movs	r0, #2
 8020b1c:	f001 f9eb 	bl	8021ef6 <xdotc_mznw4aLl>
 8020b20:	ec51 0b10 	vmov	r0, r1, d0
 8020b24:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020b28:	681b      	ldr	r3, [r3, #0]
 8020b2a:	3308      	adds	r3, #8
 8020b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b30:	f7df fe7e 	bl	8000830 <__aeabi_ddiv>
 8020b34:	4602      	mov	r2, r0
 8020b36:	460b      	mov	r3, r1
 8020b38:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8020b3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020b40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8020b44:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8020b48:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020b4c:	6812      	ldr	r2, [r2, #0]
 8020b4e:	2102      	movs	r1, #2
 8020b50:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 8020b54:	2002      	movs	r0, #2
 8020b56:	f001 f97a 	bl	8021e4e <xaxpy_guu0hJif>
      for (d = 2; d < 4; d++) {
 8020b5a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020b5e:	3301      	adds	r3, #1
 8020b60:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020b64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020b68:	2b03      	cmp	r3, #3
 8020b6a:	ddc3      	ble.n	8020af4 <svd_u3DvUgOe+0xa34>
      }
    }

    V[3 * qq] = 0.0;
 8020b6c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8020b70:	4613      	mov	r3, r2
 8020b72:	005b      	lsls	r3, r3, #1
 8020b74:	4413      	add	r3, r2
 8020b76:	00db      	lsls	r3, r3, #3
 8020b78:	461a      	mov	r2, r3
 8020b7a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020b7e:	681b      	ldr	r3, [r3, #0]
 8020b80:	1899      	adds	r1, r3, r2
 8020b82:	f04f 0200 	mov.w	r2, #0
 8020b86:	f04f 0300 	mov.w	r3, #0
 8020b8a:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 1] = 0.0;
 8020b8e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8020b92:	4613      	mov	r3, r2
 8020b94:	005b      	lsls	r3, r3, #1
 8020b96:	4413      	add	r3, r2
 8020b98:	00db      	lsls	r3, r3, #3
 8020b9a:	f103 0208 	add.w	r2, r3, #8
 8020b9e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020ba2:	681b      	ldr	r3, [r3, #0]
 8020ba4:	1899      	adds	r1, r3, r2
 8020ba6:	f04f 0200 	mov.w	r2, #0
 8020baa:	f04f 0300 	mov.w	r3, #0
 8020bae:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 2] = 0.0;
 8020bb2:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8020bb6:	4613      	mov	r3, r2
 8020bb8:	005b      	lsls	r3, r3, #1
 8020bba:	4413      	add	r3, r2
 8020bbc:	00db      	lsls	r3, r3, #3
 8020bbe:	f103 0210 	add.w	r2, r3, #16
 8020bc2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020bc6:	681b      	ldr	r3, [r3, #0]
 8020bc8:	1899      	adds	r1, r3, r2
 8020bca:	f04f 0200 	mov.w	r2, #0
 8020bce:	f04f 0300 	mov.w	r3, #0
 8020bd2:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq + 3 * qq] = 1.0;
 8020bd6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020bda:	015a      	lsls	r2, r3, #5
 8020bdc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020be0:	681b      	ldr	r3, [r3, #0]
 8020be2:	1899      	adds	r1, r3, r2
 8020be4:	f04f 0200 	mov.w	r2, #0
 8020be8:	4bbd      	ldr	r3, [pc, #756]	; (8020ee0 <svd_u3DvUgOe+0xe20>)
 8020bea:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 2; qq >= 0; qq--) {
 8020bee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020bf2:	3b01      	subs	r3, #1
 8020bf4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020bf8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	f6bf af64 	bge.w	8020aca <svd_u3DvUgOe+0xa0a>
  }

  ztest = e[0];
 8020c02:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8020c06:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[0] != 0.0) {
 8020c0a:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8020c0e:	f04f 0200 	mov.w	r2, #0
 8020c12:	f04f 0300 	mov.w	r3, #0
 8020c16:	f7df ff49 	bl	8000aac <__aeabi_dcmpeq>
 8020c1a:	4603      	mov	r3, r0
 8020c1c:	2b00      	cmp	r3, #0
 8020c1e:	d12a      	bne.n	8020c76 <svd_u3DvUgOe+0xbb6>
    rt = fabs(b_s[0]);
 8020c20:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8020c24:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8020c28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8020c30:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8020c34:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[0] / rt;
 8020c38:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8020c3c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020c40:	f7df fdf6 	bl	8000830 <__aeabi_ddiv>
 8020c44:	4602      	mov	r2, r0
 8020c46:	460b      	mov	r3, r1
 8020c48:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[0] = rt;
 8020c4c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020c50:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    ztest = e[0] / nrm;
 8020c54:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8020c58:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020c5c:	f7df fde8 	bl	8000830 <__aeabi_ddiv>
 8020c60:	4602      	mov	r2, r0
 8020c62:	460b      	mov	r3, r1
 8020c64:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 1);
 8020c68:	2101      	movs	r1, #1
 8020c6a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8020c6e:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8020c72:	f002 f989 	bl	8022f88 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 8020c76:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8020c7a:	f04f 0200 	mov.w	r2, #0
 8020c7e:	f04f 0300 	mov.w	r3, #0
 8020c82:	f7df ff13 	bl	8000aac <__aeabi_dcmpeq>
 8020c86:	4603      	mov	r3, r0
 8020c88:	2b00      	cmp	r3, #0
 8020c8a:	d12b      	bne.n	8020ce4 <svd_u3DvUgOe+0xc24>
    rt = fabs(ztest);
 8020c8c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020c90:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8020c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020c98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8020c9c:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8020ca0:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 8020ca4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8020ca8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020cac:	f7df fdc0 	bl	8000830 <__aeabi_ddiv>
 8020cb0:	4602      	mov	r2, r0
 8020cb2:	460b      	mov	r3, r1
 8020cb4:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 8020cb8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020cbc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[1] *= nrm;
 8020cc0:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8020cc4:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020cc8:	f7df fc88 	bl	80005dc <__aeabi_dmul>
 8020ccc:	4602      	mov	r2, r0
 8020cce:	460b      	mov	r3, r1
 8020cd0:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    xscal_eaAxXsvQ(nrm, V, 4);
 8020cd4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020cd8:	2104      	movs	r1, #4
 8020cda:	6818      	ldr	r0, [r3, #0]
 8020cdc:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8020ce0:	f002 f952 	bl	8022f88 <xscal_eaAxXsvQ>
  }

  e[0] = ztest;
 8020ce4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020ce8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  ztest = b_A[7];
 8020cec:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8020cf0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[1] != 0.0) {
 8020cf4:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8020cf8:	f04f 0200 	mov.w	r2, #0
 8020cfc:	f04f 0300 	mov.w	r3, #0
 8020d00:	f7df fed4 	bl	8000aac <__aeabi_dcmpeq>
 8020d04:	4603      	mov	r3, r0
 8020d06:	2b00      	cmp	r3, #0
 8020d08:	d12a      	bne.n	8020d60 <svd_u3DvUgOe+0xca0>
    rt = fabs(b_s[1]);
 8020d0a:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8020d0e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8020d12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8020d1a:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8020d1e:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[1] / rt;
 8020d22:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8020d26:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020d2a:	f7df fd81 	bl	8000830 <__aeabi_ddiv>
 8020d2e:	4602      	mov	r2, r0
 8020d30:	460b      	mov	r3, r1
 8020d32:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[1] = rt;
 8020d36:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020d3a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    ztest = b_A[7] / nrm;
 8020d3e:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 8020d42:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020d46:	f7df fd73 	bl	8000830 <__aeabi_ddiv>
 8020d4a:	4602      	mov	r2, r0
 8020d4c:	460b      	mov	r3, r1
 8020d4e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 4);
 8020d52:	2104      	movs	r1, #4
 8020d54:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8020d58:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8020d5c:	f002 f914 	bl	8022f88 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 8020d60:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8020d64:	f04f 0200 	mov.w	r2, #0
 8020d68:	f04f 0300 	mov.w	r3, #0
 8020d6c:	f7df fe9e 	bl	8000aac <__aeabi_dcmpeq>
 8020d70:	4603      	mov	r3, r0
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	d12b      	bne.n	8020dce <svd_u3DvUgOe+0xd0e>
    rt = fabs(ztest);
 8020d76:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020d7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8020d7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020d82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8020d86:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8020d8a:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 8020d8e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8020d92:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020d96:	f7df fd4b 	bl	8000830 <__aeabi_ddiv>
 8020d9a:	4602      	mov	r2, r0
 8020d9c:	460b      	mov	r3, r1
 8020d9e:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 8020da2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020da6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[2] = b_A[8] * nrm;
 8020daa:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8020dae:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020db2:	f7df fc13 	bl	80005dc <__aeabi_dmul>
 8020db6:	4602      	mov	r2, r0
 8020db8:	460b      	mov	r3, r1
 8020dba:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, V, 7);
 8020dbe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020dc2:	2107      	movs	r1, #7
 8020dc4:	6818      	ldr	r0, [r3, #0]
 8020dc6:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8020dca:	f002 f8dd 	bl	8022f88 <xscal_eaAxXsvQ>
  }

  e[1] = ztest;
 8020dce:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020dd2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  if (b_s[2] != 0.0) {
 8020dd6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8020dda:	f04f 0200 	mov.w	r2, #0
 8020dde:	f04f 0300 	mov.w	r3, #0
 8020de2:	f7df fe63 	bl	8000aac <__aeabi_dcmpeq>
 8020de6:	4603      	mov	r3, r0
 8020de8:	2b00      	cmp	r3, #0
 8020dea:	d11e      	bne.n	8020e2a <svd_u3DvUgOe+0xd6a>
    rt = fabs(b_s[2]);
 8020dec:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8020df0:	67ba      	str	r2, [r7, #120]	; 0x78
 8020df2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020df6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8020df8:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8020dfc:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[2] / rt;
 8020e00:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8020e04:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020e08:	f7df fd12 	bl	8000830 <__aeabi_ddiv>
 8020e0c:	4602      	mov	r2, r0
 8020e0e:	460b      	mov	r3, r1
 8020e10:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[2] = rt;
 8020e14:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020e18:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, U, 7);
 8020e1c:	2107      	movs	r1, #7
 8020e1e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8020e22:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8020e26:	f002 f8af 	bl	8022f88 <xscal_eaAxXsvQ>
  }

  e[2] = 0.0;
 8020e2a:	f04f 0200 	mov.w	r2, #0
 8020e2e:	f04f 0300 	mov.w	r3, #0
 8020e32:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  qq = 0;
 8020e36:	2300      	movs	r3, #0
 8020e38:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  nrm = fmax(fmax(fmax(b_s[0], e[0]), fmax(b_s[1], ztest)), fmax(b_s[2], 0.0));
 8020e3c:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8020e40:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 8020e44:	eeb0 1a46 	vmov.f32	s2, s12
 8020e48:	eef0 1a66 	vmov.f32	s3, s13
 8020e4c:	eeb0 0a47 	vmov.f32	s0, s14
 8020e50:	eef0 0a67 	vmov.f32	s1, s15
 8020e54:	f00d fd64 	bl	802e920 <fmax>
 8020e58:	eeb0 8a40 	vmov.f32	s16, s0
 8020e5c:	eef0 8a60 	vmov.f32	s17, s1
 8020e60:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8020e64:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 8020e68:	eeb0 1a46 	vmov.f32	s2, s12
 8020e6c:	eef0 1a66 	vmov.f32	s3, s13
 8020e70:	eeb0 0a47 	vmov.f32	s0, s14
 8020e74:	eef0 0a67 	vmov.f32	s1, s15
 8020e78:	f00d fd52 	bl	802e920 <fmax>
 8020e7c:	eeb0 7a40 	vmov.f32	s14, s0
 8020e80:	eef0 7a60 	vmov.f32	s15, s1
 8020e84:	eeb0 1a47 	vmov.f32	s2, s14
 8020e88:	eef0 1a67 	vmov.f32	s3, s15
 8020e8c:	eeb0 0a48 	vmov.f32	s0, s16
 8020e90:	eef0 0a68 	vmov.f32	s1, s17
 8020e94:	f00d fd44 	bl	802e920 <fmax>
 8020e98:	eeb0 8a40 	vmov.f32	s16, s0
 8020e9c:	eef0 8a60 	vmov.f32	s17, s1
 8020ea0:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8020ea4:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8020ed8 <svd_u3DvUgOe+0xe18>
 8020ea8:	eeb0 0a47 	vmov.f32	s0, s14
 8020eac:	eef0 0a67 	vmov.f32	s1, s15
 8020eb0:	f00d fd36 	bl	802e920 <fmax>
 8020eb4:	eeb0 7a40 	vmov.f32	s14, s0
 8020eb8:	eef0 7a60 	vmov.f32	s15, s1
 8020ebc:	eeb0 1a47 	vmov.f32	s2, s14
 8020ec0:	eef0 1a67 	vmov.f32	s3, s15
 8020ec4:	eeb0 0a48 	vmov.f32	s0, s16
 8020ec8:	eef0 0a68 	vmov.f32	s1, s17
 8020ecc:	f00d fd28 	bl	802e920 <fmax>
 8020ed0:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  while ((m + 2 > 0) && (qq < 75)) {
 8020ed4:	f000 be8a 	b.w	8021bec <svd_u3DvUgOe+0x1b2c>
	...
 8020ee0:	3ff00000 	.word	0x3ff00000
    kase = m + 1;
 8020ee4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8020ee8:	3301      	adds	r3, #1
 8020eea:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int32_T exitg1;
    do {
      exitg1 = 0;
 8020eee:	2300      	movs	r3, #0
 8020ef0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
      d = kase;
 8020ef4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020ef8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      if (kase == 0) {
 8020efc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020f00:	2b00      	cmp	r3, #0
 8020f02:	d103      	bne.n	8020f0c <svd_u3DvUgOe+0xe4c>
        exitg1 = 1;
 8020f04:	2301      	movs	r3, #1
 8020f06:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8020f0a:	e092      	b.n	8021032 <svd_u3DvUgOe+0xf72>
      } else {
        rt = fabs(e[kase - 1]);
 8020f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020f10:	3b01      	subs	r3, #1
 8020f12:	00db      	lsls	r3, r3, #3
 8020f14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020f18:	4413      	add	r3, r2
 8020f1a:	3bb8      	subs	r3, #184	; 0xb8
 8020f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f20:	673a      	str	r2, [r7, #112]	; 0x70
 8020f22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020f26:	677b      	str	r3, [r7, #116]	; 0x74
 8020f28:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8020f2c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
        if (rt <= (fabs(b_s[kase - 1]) + fabs(b_s[kase])) *
 8020f30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020f34:	3b01      	subs	r3, #1
 8020f36:	00db      	lsls	r3, r3, #3
 8020f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020f3c:	4413      	add	r3, r2
 8020f3e:	3ba0      	subs	r3, #160	; 0xa0
 8020f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f44:	66ba      	str	r2, [r7, #104]	; 0x68
 8020f46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8020f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020f50:	00db      	lsls	r3, r3, #3
 8020f52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020f56:	4413      	add	r3, r2
 8020f58:	3ba0      	subs	r3, #160	; 0xa0
 8020f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f5e:	663a      	str	r2, [r7, #96]	; 0x60
 8020f60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020f64:	667b      	str	r3, [r7, #100]	; 0x64
 8020f66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8020f6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8020f6e:	f7df f97f 	bl	8000270 <__adddf3>
 8020f72:	4602      	mov	r2, r0
 8020f74:	460b      	mov	r3, r1
 8020f76:	4610      	mov	r0, r2
 8020f78:	4619      	mov	r1, r3
 8020f7a:	f04f 0200 	mov.w	r2, #0
 8020f7e:	4bb2      	ldr	r3, [pc, #712]	; (8021248 <svd_u3DvUgOe+0x1188>)
 8020f80:	f7df fb2c 	bl	80005dc <__aeabi_dmul>
 8020f84:	4602      	mov	r2, r0
 8020f86:	460b      	mov	r3, r1
 8020f88:	4610      	mov	r0, r2
 8020f8a:	4619      	mov	r1, r3
 8020f8c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020f90:	f7df fdaa 	bl	8000ae8 <__aeabi_dcmpge>
 8020f94:	4603      	mov	r3, r0
 8020f96:	2b00      	cmp	r3, #0
 8020f98:	d012      	beq.n	8020fc0 <svd_u3DvUgOe+0xf00>
            2.2204460492503131E-16) {
          e[kase - 1] = 0.0;
 8020f9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020f9e:	3b01      	subs	r3, #1
 8020fa0:	00db      	lsls	r3, r3, #3
 8020fa2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020fa6:	4413      	add	r3, r2
 8020fa8:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 8020fac:	f04f 0200 	mov.w	r2, #0
 8020fb0:	f04f 0300 	mov.w	r3, #0
 8020fb4:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 8020fb8:	2301      	movs	r3, #1
 8020fba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8020fbe:	e038      	b.n	8021032 <svd_u3DvUgOe+0xf72>
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 8020fc0:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8020fc4:	f04f 0200 	mov.w	r2, #0
 8020fc8:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8020fcc:	f7df fd82 	bl	8000ad4 <__aeabi_dcmple>
 8020fd0:	4603      	mov	r3, r0
 8020fd2:	2b00      	cmp	r3, #0
 8020fd4:	d115      	bne.n	8021002 <svd_u3DvUgOe+0xf42>
 8020fd6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020fda:	2b14      	cmp	r3, #20
 8020fdc:	dd24      	ble.n	8021028 <svd_u3DvUgOe+0xf68>
                     2.2204460492503131E-16 * nrm))) {
 8020fde:	f04f 0200 	mov.w	r2, #0
 8020fe2:	4b99      	ldr	r3, [pc, #612]	; (8021248 <svd_u3DvUgOe+0x1188>)
 8020fe4:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8020fe8:	f7df faf8 	bl	80005dc <__aeabi_dmul>
 8020fec:	4602      	mov	r2, r0
 8020fee:	460b      	mov	r3, r1
 8020ff0:	4610      	mov	r0, r2
 8020ff2:	4619      	mov	r1, r3
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 8020ff4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020ff8:	f7df fd76 	bl	8000ae8 <__aeabi_dcmpge>
 8020ffc:	4603      	mov	r3, r0
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	d012      	beq.n	8021028 <svd_u3DvUgOe+0xf68>
          e[kase - 1] = 0.0;
 8021002:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021006:	3b01      	subs	r3, #1
 8021008:	00db      	lsls	r3, r3, #3
 802100a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802100e:	4413      	add	r3, r2
 8021010:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 8021014:	f04f 0200 	mov.w	r2, #0
 8021018:	f04f 0300 	mov.w	r3, #0
 802101c:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 8021020:	2301      	movs	r3, #1
 8021022:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8021026:	e004      	b.n	8021032 <svd_u3DvUgOe+0xf72>
        } else {
          kase--;
 8021028:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 802102c:	3b01      	subs	r3, #1
 802102e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        }
      }
    } while (exitg1 == 0);
 8021032:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8021036:	2b00      	cmp	r3, #0
 8021038:	f43f af59 	beq.w	8020eee <svd_u3DvUgOe+0xe2e>

    if (m + 1 == kase) {
 802103c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021040:	1c5a      	adds	r2, r3, #1
 8021042:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021046:	4293      	cmp	r3, r2
 8021048:	d103      	bne.n	8021052 <svd_u3DvUgOe+0xf92>
      kase = 4;
 802104a:	2304      	movs	r3, #4
 802104c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8021050:	e0c7      	b.n	80211e2 <svd_u3DvUgOe+0x1122>
    } else {
      int32_T k_ii;
      boolean_T exitg2;
      qjj = m + 2;
 8021052:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021056:	3302      	adds	r3, #2
 8021058:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
      k_ii = m + 2;
 802105c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021060:	3302      	adds	r3, #2
 8021062:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      exitg2 = false;
 8021066:	2300      	movs	r3, #0
 8021068:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
      while ((!exitg2) && (k_ii >= kase)) {
 802106c:	e092      	b.n	8021194 <svd_u3DvUgOe+0x10d4>
        qjj = k_ii;
 802106e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8021072:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        if (k_ii == kase) {
 8021076:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 802107a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 802107e:	429a      	cmp	r2, r3
 8021080:	d103      	bne.n	802108a <svd_u3DvUgOe+0xfca>
          exitg2 = true;
 8021082:	2301      	movs	r3, #1
 8021084:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 8021088:	e084      	b.n	8021194 <svd_u3DvUgOe+0x10d4>
        } else {
          rt = 0.0;
 802108a:	f04f 0200 	mov.w	r2, #0
 802108e:	f04f 0300 	mov.w	r3, #0
 8021092:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          if (k_ii < m + 2) {
 8021096:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 802109a:	1c5a      	adds	r2, r3, #1
 802109c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80210a0:	4293      	cmp	r3, r2
 80210a2:	dc11      	bgt.n	80210c8 <svd_u3DvUgOe+0x1008>
            rt = fabs(e[k_ii - 1]);
 80210a4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80210a8:	3b01      	subs	r3, #1
 80210aa:	00db      	lsls	r3, r3, #3
 80210ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80210b0:	4413      	add	r3, r2
 80210b2:	3bb8      	subs	r3, #184	; 0xb8
 80210b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80210ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80210be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80210c0:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80210c4:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
          }

          if (k_ii > kase + 1) {
 80210c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80210cc:	1c5a      	adds	r2, r3, #1
 80210ce:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80210d2:	4293      	cmp	r3, r2
 80210d4:	dd17      	ble.n	8021106 <svd_u3DvUgOe+0x1046>
            rt += fabs(e[k_ii - 2]);
 80210d6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80210da:	3b02      	subs	r3, #2
 80210dc:	00db      	lsls	r3, r3, #3
 80210de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80210e2:	4413      	add	r3, r2
 80210e4:	3bb8      	subs	r3, #184	; 0xb8
 80210e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210ea:	653a      	str	r2, [r7, #80]	; 0x50
 80210ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80210f0:	657b      	str	r3, [r7, #84]	; 0x54
 80210f2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80210f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80210fa:	f7df f8b9 	bl	8000270 <__adddf3>
 80210fe:	4602      	mov	r2, r0
 8021100:	460b      	mov	r3, r1
 8021102:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          }

          ztest = fabs(b_s[k_ii - 1]);
 8021106:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 802110a:	3b01      	subs	r3, #1
 802110c:	00db      	lsls	r3, r3, #3
 802110e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021112:	4413      	add	r3, r2
 8021114:	3ba0      	subs	r3, #160	; 0xa0
 8021116:	e9d3 2300 	ldrd	r2, r3, [r3]
 802111a:	64ba      	str	r2, [r7, #72]	; 0x48
 802111c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021120:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021122:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8021126:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=
 802112a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 802112e:	f04f 0200 	mov.w	r2, #0
 8021132:	4b45      	ldr	r3, [pc, #276]	; (8021248 <svd_u3DvUgOe+0x1188>)
 8021134:	f7df fa52 	bl	80005dc <__aeabi_dmul>
 8021138:	4602      	mov	r2, r0
 802113a:	460b      	mov	r3, r1
 802113c:	4610      	mov	r0, r2
 802113e:	4619      	mov	r1, r3
 8021140:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8021144:	f7df fcd0 	bl	8000ae8 <__aeabi_dcmpge>
 8021148:	4603      	mov	r3, r0
 802114a:	2b00      	cmp	r3, #0
 802114c:	d10a      	bne.n	8021164 <svd_u3DvUgOe+0x10a4>
 802114e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8021152:	f04f 0200 	mov.w	r2, #0
 8021156:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 802115a:	f7df fcbb 	bl	8000ad4 <__aeabi_dcmple>
 802115e:	4603      	mov	r3, r0
 8021160:	2b00      	cmp	r3, #0
 8021162:	d012      	beq.n	802118a <svd_u3DvUgOe+0x10ca>
               1.0020841800044864E-292)) {
            b_s[k_ii - 1] = 0.0;
 8021164:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8021168:	3b01      	subs	r3, #1
 802116a:	00db      	lsls	r3, r3, #3
 802116c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021170:	4413      	add	r3, r2
 8021172:	f1a3 01a0 	sub.w	r1, r3, #160	; 0xa0
 8021176:	f04f 0200 	mov.w	r2, #0
 802117a:	f04f 0300 	mov.w	r3, #0
 802117e:	e9c1 2300 	strd	r2, r3, [r1]
            exitg2 = true;
 8021182:	2301      	movs	r3, #1
 8021184:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 8021188:	e004      	b.n	8021194 <svd_u3DvUgOe+0x10d4>
          } else {
            k_ii--;
 802118a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 802118e:	3b01      	subs	r3, #1
 8021190:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      while ((!exitg2) && (k_ii >= kase)) {
 8021194:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8021198:	2b00      	cmp	r3, #0
 802119a:	d106      	bne.n	80211aa <svd_u3DvUgOe+0x10ea>
 802119c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80211a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80211a4:	429a      	cmp	r2, r3
 80211a6:	f6bf af62 	bge.w	802106e <svd_u3DvUgOe+0xfae>
          }
        }
      }

      if (qjj == kase) {
 80211aa:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80211ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80211b2:	429a      	cmp	r2, r3
 80211b4:	d103      	bne.n	80211be <svd_u3DvUgOe+0x10fe>
        kase = 3;
 80211b6:	2303      	movs	r3, #3
 80211b8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80211bc:	e011      	b.n	80211e2 <svd_u3DvUgOe+0x1122>
      } else if (m + 2 == qjj) {
 80211be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80211c2:	1c9a      	adds	r2, r3, #2
 80211c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80211c8:	4293      	cmp	r3, r2
 80211ca:	d103      	bne.n	80211d4 <svd_u3DvUgOe+0x1114>
        kase = 1;
 80211cc:	2301      	movs	r3, #1
 80211ce:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80211d2:	e006      	b.n	80211e2 <svd_u3DvUgOe+0x1122>
      } else {
        kase = 2;
 80211d4:	2302      	movs	r3, #2
 80211d6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        d = qjj;
 80211da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80211de:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      }
    }

    switch (kase) {
 80211e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80211e6:	2b03      	cmp	r3, #3
 80211e8:	f000 8113 	beq.w	8021412 <svd_u3DvUgOe+0x1352>
 80211ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80211f0:	2b03      	cmp	r3, #3
 80211f2:	f300 8443 	bgt.w	8021a7c <svd_u3DvUgOe+0x19bc>
 80211f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80211fa:	2b01      	cmp	r3, #1
 80211fc:	d005      	beq.n	802120a <svd_u3DvUgOe+0x114a>
 80211fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021202:	2b02      	cmp	r3, #2
 8021204:	d07b      	beq.n	80212fe <svd_u3DvUgOe+0x123e>
 8021206:	f000 bc39 	b.w	8021a7c <svd_u3DvUgOe+0x19bc>
     case 1:
      rt = e[m];
 802120a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 802120e:	00db      	lsls	r3, r3, #3
 8021210:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021214:	4413      	add	r3, r2
 8021216:	3bb8      	subs	r3, #184	; 0xb8
 8021218:	e9d3 2300 	ldrd	r2, r3, [r3]
 802121c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[m] = 0.0;
 8021220:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021224:	00db      	lsls	r3, r3, #3
 8021226:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802122a:	4413      	add	r3, r2
 802122c:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 8021230:	f04f 0200 	mov.w	r2, #0
 8021234:	f04f 0300 	mov.w	r3, #0
 8021238:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 802123c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021240:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8021244:	e053      	b.n	80212ee <svd_u3DvUgOe+0x122e>
 8021246:	bf00      	nop
 8021248:	3cb00000 	.word	0x3cb00000
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 802124c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8021250:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021254:	00db      	lsls	r3, r3, #3
 8021256:	18d0      	adds	r0, r2, r3
 8021258:	f507 738c 	add.w	r3, r7, #280	; 0x118
 802125c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8021260:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8021264:	f001 fd2a 	bl	8022cbc <xrotg_XzIjz1eG>
        if (qjj + 1 > d + 1) {
 8021268:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 802126c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021270:	429a      	cmp	r2, r3
 8021272:	dd19      	ble.n	80212a8 <svd_u3DvUgOe+0x11e8>
          rt = -sqds * e[0];
 8021274:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8021278:	643a      	str	r2, [r7, #64]	; 0x40
 802127a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 802127e:	647b      	str	r3, [r7, #68]	; 0x44
 8021280:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8021284:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8021288:	f7df f9a8 	bl	80005dc <__aeabi_dmul>
 802128c:	4602      	mov	r2, r0
 802128e:	460b      	mov	r3, r1
 8021290:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          e[0] *= ztest;
 8021294:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8021298:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 802129c:	f7df f99e 	bl	80005dc <__aeabi_dmul>
 80212a0:	4602      	mov	r2, r0
 80212a2:	460b      	mov	r3, r1
 80212a4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        }

        xrot_i7f01JoJ(V, 3 * qjj + 1, 3 * (m + 1) + 1, ztest, sqds);
 80212a8:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80212ac:	4613      	mov	r3, r2
 80212ae:	005b      	lsls	r3, r3, #1
 80212b0:	4413      	add	r3, r2
 80212b2:	1c59      	adds	r1, r3, #1
 80212b4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80212b8:	1c5a      	adds	r2, r3, #1
 80212ba:	4613      	mov	r3, r2
 80212bc:	005b      	lsls	r3, r3, #1
 80212be:	4413      	add	r3, r2
 80212c0:	1c5a      	adds	r2, r3, #1
 80212c2:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 80212c6:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 80212ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80212ce:	eeb0 1a46 	vmov.f32	s2, s12
 80212d2:	eef0 1a66 	vmov.f32	s3, s13
 80212d6:	eeb0 0a47 	vmov.f32	s0, s14
 80212da:	eef0 0a67 	vmov.f32	s1, s15
 80212de:	6818      	ldr	r0, [r3, #0]
 80212e0:	f001 fbd0 	bl	8022a84 <xrot_i7f01JoJ>
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 80212e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80212e8:	3b01      	subs	r3, #1
 80212ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80212ee:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80212f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80212f6:	429a      	cmp	r2, r3
 80212f8:	daa8      	bge.n	802124c <svd_u3DvUgOe+0x118c>
      }
      break;
 80212fa:	f000 bc77 	b.w	8021bec <svd_u3DvUgOe+0x1b2c>

     case 2:
      rt = e[d - 1];
 80212fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021302:	3b01      	subs	r3, #1
 8021304:	00db      	lsls	r3, r3, #3
 8021306:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802130a:	4413      	add	r3, r2
 802130c:	3bb8      	subs	r3, #184	; 0xb8
 802130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021312:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[d - 1] = 0.0;
 8021316:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802131a:	3b01      	subs	r3, #1
 802131c:	00db      	lsls	r3, r3, #3
 802131e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021322:	4413      	add	r3, r2
 8021324:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 8021328:	f04f 0200 	mov.w	r2, #0
 802132c:	f04f 0300 	mov.w	r3, #0
 8021330:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = d; qjj < m + 2; qjj++) {
 8021334:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021338:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 802133c:	e061      	b.n	8021402 <svd_u3DvUgOe+0x1342>
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 802133e:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8021342:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021346:	00db      	lsls	r3, r3, #3
 8021348:	18d0      	adds	r0, r2, r3
 802134a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 802134e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8021352:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8021356:	f001 fcb1 	bl	8022cbc <xrotg_XzIjz1eG>
        rt = -sqds * e[qjj];
 802135a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 802135e:	63ba      	str	r2, [r7, #56]	; 0x38
 8021360:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8021364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021366:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802136a:	00db      	lsls	r3, r3, #3
 802136c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021370:	4413      	add	r3, r2
 8021372:	3bb8      	subs	r3, #184	; 0xb8
 8021374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021378:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 802137c:	f7df f92e 	bl	80005dc <__aeabi_dmul>
 8021380:	4602      	mov	r2, r0
 8021382:	460b      	mov	r3, r1
 8021384:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        e[qjj] *= ztest;
 8021388:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802138c:	00db      	lsls	r3, r3, #3
 802138e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021392:	4413      	add	r3, r2
 8021394:	3bb8      	subs	r3, #184	; 0xb8
 8021396:	e9d3 0100 	ldrd	r0, r1, [r3]
 802139a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 802139e:	f7df f91d 	bl	80005dc <__aeabi_dmul>
 80213a2:	4602      	mov	r2, r0
 80213a4:	460b      	mov	r3, r1
 80213a6:	4610      	mov	r0, r2
 80213a8:	4619      	mov	r1, r3
 80213aa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80213ae:	00db      	lsls	r3, r3, #3
 80213b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80213b4:	4413      	add	r3, r2
 80213b6:	3bb8      	subs	r3, #184	; 0xb8
 80213b8:	e9c3 0100 	strd	r0, r1, [r3]
        xrot_i7f01JoJ(U, 3 * qjj + 1, 3 * (d - 1) + 1, ztest, sqds);
 80213bc:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80213c0:	4613      	mov	r3, r2
 80213c2:	005b      	lsls	r3, r3, #1
 80213c4:	4413      	add	r3, r2
 80213c6:	1c59      	adds	r1, r3, #1
 80213c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80213cc:	1e5a      	subs	r2, r3, #1
 80213ce:	4613      	mov	r3, r2
 80213d0:	005b      	lsls	r3, r3, #1
 80213d2:	4413      	add	r3, r2
 80213d4:	3301      	adds	r3, #1
 80213d6:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 80213da:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 80213de:	eeb0 1a46 	vmov.f32	s2, s12
 80213e2:	eef0 1a66 	vmov.f32	s3, s13
 80213e6:	eeb0 0a47 	vmov.f32	s0, s14
 80213ea:	eef0 0a67 	vmov.f32	s1, s15
 80213ee:	461a      	mov	r2, r3
 80213f0:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80213f4:	f001 fb46 	bl	8022a84 <xrot_i7f01JoJ>
      for (qjj = d; qjj < m + 2; qjj++) {
 80213f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80213fc:	3301      	adds	r3, #1
 80213fe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8021402:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021406:	1c5a      	adds	r2, r3, #1
 8021408:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802140c:	4293      	cmp	r3, r2
 802140e:	dd96      	ble.n	802133e <svd_u3DvUgOe+0x127e>
      }
      break;
 8021410:	e3ec      	b.n	8021bec <svd_u3DvUgOe+0x1b2c>

     case 3:
      {
        real_T emm1;
        real_T shift;
        sqds = b_s[m + 1];
 8021412:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021416:	3301      	adds	r3, #1
 8021418:	00db      	lsls	r3, r3, #3
 802141a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802141e:	4413      	add	r3, r2
 8021420:	3ba0      	subs	r3, #160	; 0xa0
 8021422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021426:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 802142a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 802142e:	633a      	str	r2, [r7, #48]	; 0x30
 8021430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021434:	637b      	str	r3, [r7, #52]	; 0x34
 8021436:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 802143a:	00db      	lsls	r3, r3, #3
 802143c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021440:	4413      	add	r3, r2
 8021442:	3ba0      	subs	r3, #160	; 0xa0
 8021444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021448:	62ba      	str	r2, [r7, #40]	; 0x28
 802144a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802144e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021450:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8021454:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8021458:	f00d fa62 	bl	802e920 <fmax>
 802145c:	eeb0 7a40 	vmov.f32	s14, s0
 8021460:	eef0 7a60 	vmov.f32	s15, s1
 8021464:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021468:	00db      	lsls	r3, r3, #3
 802146a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802146e:	4413      	add	r3, r2
 8021470:	3bb8      	subs	r3, #184	; 0xb8
 8021472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021476:	623a      	str	r2, [r7, #32]
 8021478:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802147c:	627b      	str	r3, [r7, #36]	; 0x24
 802147e:	ed97 1b08 	vldr	d1, [r7, #32]
 8021482:	eeb0 0a47 	vmov.f32	s0, s14
 8021486:	eef0 0a67 	vmov.f32	s1, s15
 802148a:	f00d fa49 	bl	802e920 <fmax>
 802148e:	eeb0 7a40 	vmov.f32	s14, s0
 8021492:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 8021496:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802149a:	00db      	lsls	r3, r3, #3
 802149c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80214a0:	4413      	add	r3, r2
 80214a2:	3ba0      	subs	r3, #160	; 0xa0
 80214a4:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 80214a8:	61ba      	str	r2, [r7, #24]
 80214aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80214ae:	61fb      	str	r3, [r7, #28]
 80214b0:	ed97 1b06 	vldr	d1, [r7, #24]
 80214b4:	eeb0 0a47 	vmov.f32	s0, s14
 80214b8:	eef0 0a67 	vmov.f32	s1, s15
 80214bc:	f00d fa30 	bl	802e920 <fmax>
 80214c0:	eeb0 7a40 	vmov.f32	s14, s0
 80214c4:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 80214c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80214cc:	00db      	lsls	r3, r3, #3
 80214ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80214d2:	4413      	add	r3, r2
 80214d4:	3bb8      	subs	r3, #184	; 0xb8
 80214d6:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 80214da:	613a      	str	r2, [r7, #16]
 80214dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80214e0:	617b      	str	r3, [r7, #20]
 80214e2:	ed97 1b04 	vldr	d1, [r7, #16]
 80214e6:	eeb0 0a47 	vmov.f32	s0, s14
 80214ea:	eef0 0a67 	vmov.f32	s1, s15
 80214ee:	f00d fa17 	bl	802e920 <fmax>
 80214f2:	eeb0 7a40 	vmov.f32	s14, s0
 80214f6:	eef0 7a60 	vmov.f32	s15, s1
 80214fa:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
        rt = sqds / ztest;
 80214fe:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8021502:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8021506:	f7df f993 	bl	8000830 <__aeabi_ddiv>
 802150a:	4602      	mov	r2, r0
 802150c:	460b      	mov	r3, r1
 802150e:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        smm1 = b_s[m] / ztest;
 8021512:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021516:	00db      	lsls	r3, r3, #3
 8021518:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802151c:	4413      	add	r3, r2
 802151e:	3ba0      	subs	r3, #160	; 0xa0
 8021520:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021524:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8021528:	f7df f982 	bl	8000830 <__aeabi_ddiv>
 802152c:	4602      	mov	r2, r0
 802152e:	460b      	mov	r3, r1
 8021530:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 = e[m] / ztest;
 8021534:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021538:	00db      	lsls	r3, r3, #3
 802153a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802153e:	4413      	add	r3, r2
 8021540:	3bb8      	subs	r3, #184	; 0xb8
 8021542:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021546:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 802154a:	f7df f971 	bl	8000830 <__aeabi_ddiv>
 802154e:	4602      	mov	r2, r0
 8021550:	460b      	mov	r3, r1
 8021552:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        sqds = b_s[d] / ztest;
 8021556:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802155a:	00db      	lsls	r3, r3, #3
 802155c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021560:	4413      	add	r3, r2
 8021562:	3ba0      	subs	r3, #160	; 0xa0
 8021564:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021568:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 802156c:	f7df f960 	bl	8000830 <__aeabi_ddiv>
 8021570:	4602      	mov	r2, r0
 8021572:	460b      	mov	r3, r1
 8021574:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;
 8021578:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 802157c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8021580:	f7de fe76 	bl	8000270 <__adddf3>
 8021584:	4602      	mov	r2, r0
 8021586:	460b      	mov	r3, r1
 8021588:	4614      	mov	r4, r2
 802158a:	461d      	mov	r5, r3
 802158c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8021590:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8021594:	f7de fe6a 	bl	800026c <__aeabi_dsub>
 8021598:	4602      	mov	r2, r0
 802159a:	460b      	mov	r3, r1
 802159c:	4620      	mov	r0, r4
 802159e:	4629      	mov	r1, r5
 80215a0:	f7df f81c 	bl	80005dc <__aeabi_dmul>
 80215a4:	4602      	mov	r2, r0
 80215a6:	460b      	mov	r3, r1
 80215a8:	4614      	mov	r4, r2
 80215aa:	461d      	mov	r5, r3
 80215ac:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 80215b0:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80215b4:	f7df f812 	bl	80005dc <__aeabi_dmul>
 80215b8:	4602      	mov	r2, r0
 80215ba:	460b      	mov	r3, r1
 80215bc:	4620      	mov	r0, r4
 80215be:	4629      	mov	r1, r5
 80215c0:	f7de fe56 	bl	8000270 <__adddf3>
 80215c4:	4602      	mov	r2, r0
 80215c6:	460b      	mov	r3, r1
 80215c8:	4610      	mov	r0, r2
 80215ca:	4619      	mov	r1, r3
 80215cc:	f04f 0200 	mov.w	r2, #0
 80215d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80215d4:	f7df f92c 	bl	8000830 <__aeabi_ddiv>
 80215d8:	4602      	mov	r2, r0
 80215da:	460b      	mov	r3, r1
 80215dc:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 *= rt;
 80215e0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80215e4:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80215e8:	f7de fff8 	bl	80005dc <__aeabi_dmul>
 80215ec:	4602      	mov	r2, r0
 80215ee:	460b      	mov	r3, r1
 80215f0:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        emm1 *= emm1;
 80215f4:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 80215f8:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80215fc:	f7de ffee 	bl	80005dc <__aeabi_dmul>
 8021600:	4602      	mov	r2, r0
 8021602:	460b      	mov	r3, r1
 8021604:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
 8021608:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 802160c:	f04f 0200 	mov.w	r2, #0
 8021610:	f04f 0300 	mov.w	r3, #0
 8021614:	f7df fa4a 	bl	8000aac <__aeabi_dcmpeq>
 8021618:	4603      	mov	r3, r0
 802161a:	2b00      	cmp	r3, #0
 802161c:	d00a      	beq.n	8021634 <svd_u3DvUgOe+0x1574>
 802161e:	f04f 0200 	mov.w	r2, #0
 8021622:	f04f 0300 	mov.w	r3, #0
 8021626:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 802162a:	f7df fa3f 	bl	8000aac <__aeabi_dcmpeq>
 802162e:	4603      	mov	r3, r0
 8021630:	2b00      	cmp	r3, #0
 8021632:	d13f      	bne.n	80216b4 <svd_u3DvUgOe+0x15f4>
          shift = sqrt(smm1 * smm1 + emm1);
 8021634:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8021638:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 802163c:	f7de ffce 	bl	80005dc <__aeabi_dmul>
 8021640:	4602      	mov	r2, r0
 8021642:	460b      	mov	r3, r1
 8021644:	4610      	mov	r0, r2
 8021646:	4619      	mov	r1, r3
 8021648:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 802164c:	f7de fe10 	bl	8000270 <__adddf3>
 8021650:	4602      	mov	r2, r0
 8021652:	460b      	mov	r3, r1
 8021654:	ec43 2b17 	vmov	d7, r2, r3
 8021658:	eeb0 0a47 	vmov.f32	s0, s14
 802165c:	eef0 0a67 	vmov.f32	s1, s15
 8021660:	f00d fa4a 	bl	802eaf8 <sqrt>
 8021664:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
          if (smm1 < 0.0) {
 8021668:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 802166c:	f04f 0200 	mov.w	r2, #0
 8021670:	f04f 0300 	mov.w	r3, #0
 8021674:	f7df fa24 	bl	8000ac0 <__aeabi_dcmplt>
 8021678:	4603      	mov	r3, r0
 802167a:	2b00      	cmp	r3, #0
 802167c:	d009      	beq.n	8021692 <svd_u3DvUgOe+0x15d2>
            shift = -shift;
 802167e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8021682:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8021686:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 802168a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 802168e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
          }

          shift = emm1 / (smm1 + shift);
 8021692:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8021696:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 802169a:	f7de fde9 	bl	8000270 <__adddf3>
 802169e:	4602      	mov	r2, r0
 80216a0:	460b      	mov	r3, r1
 80216a2:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80216a6:	f7df f8c3 	bl	8000830 <__aeabi_ddiv>
 80216aa:	4602      	mov	r2, r0
 80216ac:	460b      	mov	r3, r1
 80216ae:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
 80216b2:	e005      	b.n	80216c0 <svd_u3DvUgOe+0x1600>
        } else {
          shift = 0.0;
 80216b4:	f04f 0200 	mov.w	r2, #0
 80216b8:	f04f 0300 	mov.w	r3, #0
 80216bc:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        }

        rt = (sqds + rt) * (sqds - rt) + shift;
 80216c0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80216c4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80216c8:	f7de fdd2 	bl	8000270 <__adddf3>
 80216cc:	4602      	mov	r2, r0
 80216ce:	460b      	mov	r3, r1
 80216d0:	4614      	mov	r4, r2
 80216d2:	461d      	mov	r5, r3
 80216d4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80216d8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80216dc:	f7de fdc6 	bl	800026c <__aeabi_dsub>
 80216e0:	4602      	mov	r2, r0
 80216e2:	460b      	mov	r3, r1
 80216e4:	4620      	mov	r0, r4
 80216e6:	4629      	mov	r1, r5
 80216e8:	f7de ff78 	bl	80005dc <__aeabi_dmul>
 80216ec:	4602      	mov	r2, r0
 80216ee:	460b      	mov	r3, r1
 80216f0:	4610      	mov	r0, r2
 80216f2:	4619      	mov	r1, r3
 80216f4:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 80216f8:	f7de fdba 	bl	8000270 <__adddf3>
 80216fc:	4602      	mov	r2, r0
 80216fe:	460b      	mov	r3, r1
 8021700:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        ztest = e[d] / ztest * sqds;
 8021704:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021708:	00db      	lsls	r3, r3, #3
 802170a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802170e:	4413      	add	r3, r2
 8021710:	3bb8      	subs	r3, #184	; 0xb8
 8021712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021716:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 802171a:	f7df f889 	bl	8000830 <__aeabi_ddiv>
 802171e:	4602      	mov	r2, r0
 8021720:	460b      	mov	r3, r1
 8021722:	4610      	mov	r0, r2
 8021724:	4619      	mov	r1, r3
 8021726:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 802172a:	f7de ff57 	bl	80005dc <__aeabi_dmul>
 802172e:	4602      	mov	r2, r0
 8021730:	460b      	mov	r3, r1
 8021732:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 8021736:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802173a:	3301      	adds	r3, #1
 802173c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8021740:	e183      	b.n	8021a4a <svd_u3DvUgOe+0x198a>
          xrotg_XzIjz1eG(&rt, &ztest, &sqds, &smm1);
 8021742:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8021746:	f507 728c 	add.w	r2, r7, #280	; 0x118
 802174a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 802174e:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8021752:	f001 fab3 	bl	8022cbc <xrotg_XzIjz1eG>
          if (qjj > d + 1) {
 8021756:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802175a:	1c5a      	adds	r2, r3, #1
 802175c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021760:	4293      	cmp	r3, r2
 8021762:	dd03      	ble.n	802176c <svd_u3DvUgOe+0x16ac>
            e[0] = rt;
 8021764:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8021768:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
          }

          rt = e[qjj - 1];
 802176c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021770:	3b01      	subs	r3, #1
 8021772:	00db      	lsls	r3, r3, #3
 8021774:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021778:	4413      	add	r3, r2
 802177a:	3bb8      	subs	r3, #184	; 0xb8
 802177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021780:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          emm1 = b_s[qjj - 1];
 8021784:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021788:	3b01      	subs	r3, #1
 802178a:	00db      	lsls	r3, r3, #3
 802178c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021790:	4413      	add	r3, r2
 8021792:	3ba0      	subs	r3, #160	; 0xa0
 8021794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021798:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
          e[qjj - 1] = rt * sqds - emm1 * smm1;
 802179c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80217a0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80217a4:	f7de ff1a 	bl	80005dc <__aeabi_dmul>
 80217a8:	4602      	mov	r2, r0
 80217aa:	460b      	mov	r3, r1
 80217ac:	4690      	mov	r8, r2
 80217ae:	4699      	mov	r9, r3
 80217b0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80217b4:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 80217b8:	f7de ff10 	bl	80005dc <__aeabi_dmul>
 80217bc:	4602      	mov	r2, r0
 80217be:	460b      	mov	r3, r1
 80217c0:	4610      	mov	r0, r2
 80217c2:	4619      	mov	r1, r3
 80217c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80217c8:	1e5c      	subs	r4, r3, #1
 80217ca:	4602      	mov	r2, r0
 80217cc:	460b      	mov	r3, r1
 80217ce:	4640      	mov	r0, r8
 80217d0:	4649      	mov	r1, r9
 80217d2:	f7de fd4b 	bl	800026c <__aeabi_dsub>
 80217d6:	4602      	mov	r2, r0
 80217d8:	460b      	mov	r3, r1
 80217da:	4610      	mov	r0, r2
 80217dc:	4619      	mov	r1, r3
 80217de:	00e3      	lsls	r3, r4, #3
 80217e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80217e4:	4413      	add	r3, r2
 80217e6:	3bb8      	subs	r3, #184	; 0xb8
 80217e8:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * b_s[qjj];
 80217ec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80217f0:	00db      	lsls	r3, r3, #3
 80217f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80217f6:	4413      	add	r3, r2
 80217f8:	3ba0      	subs	r3, #160	; 0xa0
 80217fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80217fe:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8021802:	f7de feeb 	bl	80005dc <__aeabi_dmul>
 8021806:	4602      	mov	r2, r0
 8021808:	460b      	mov	r3, r1
 802180a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          b_s[qjj] *= sqds;
 802180e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021812:	00db      	lsls	r3, r3, #3
 8021814:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021818:	4413      	add	r3, r2
 802181a:	3ba0      	subs	r3, #160	; 0xa0
 802181c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021820:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8021824:	f7de feda 	bl	80005dc <__aeabi_dmul>
 8021828:	4602      	mov	r2, r0
 802182a:	460b      	mov	r3, r1
 802182c:	4610      	mov	r0, r2
 802182e:	4619      	mov	r1, r3
 8021830:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021834:	00db      	lsls	r3, r3, #3
 8021836:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802183a:	4413      	add	r3, r2
 802183c:	3ba0      	subs	r3, #160	; 0xa0
 802183e:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(V, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 8021842:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021846:	1e5a      	subs	r2, r3, #1
 8021848:	4613      	mov	r3, r2
 802184a:	005b      	lsls	r3, r3, #1
 802184c:	4413      	add	r3, r2
 802184e:	1c59      	adds	r1, r3, #1
 8021850:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8021854:	4613      	mov	r3, r2
 8021856:	005b      	lsls	r3, r3, #1
 8021858:	4413      	add	r3, r2
 802185a:	1c5a      	adds	r2, r3, #1
 802185c:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8021860:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 8021864:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8021868:	eeb0 1a46 	vmov.f32	s2, s12
 802186c:	eef0 1a66 	vmov.f32	s3, s13
 8021870:	eeb0 0a47 	vmov.f32	s0, s14
 8021874:	eef0 0a67 	vmov.f32	s1, s15
 8021878:	6818      	ldr	r0, [r3, #0]
 802187a:	f001 f903 	bl	8022a84 <xrot_i7f01JoJ>
          b_s[qjj - 1] = emm1 * sqds + rt * smm1;
 802187e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8021882:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8021886:	f7de fea9 	bl	80005dc <__aeabi_dmul>
 802188a:	4602      	mov	r2, r0
 802188c:	460b      	mov	r3, r1
 802188e:	4690      	mov	r8, r2
 8021890:	4699      	mov	r9, r3
 8021892:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8021896:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 802189a:	f7de fe9f 	bl	80005dc <__aeabi_dmul>
 802189e:	4602      	mov	r2, r0
 80218a0:	460b      	mov	r3, r1
 80218a2:	4610      	mov	r0, r2
 80218a4:	4619      	mov	r1, r3
 80218a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80218aa:	1e5c      	subs	r4, r3, #1
 80218ac:	4602      	mov	r2, r0
 80218ae:	460b      	mov	r3, r1
 80218b0:	4640      	mov	r0, r8
 80218b2:	4649      	mov	r1, r9
 80218b4:	f7de fcdc 	bl	8000270 <__adddf3>
 80218b8:	4602      	mov	r2, r0
 80218ba:	460b      	mov	r3, r1
 80218bc:	4610      	mov	r0, r2
 80218be:	4619      	mov	r1, r3
 80218c0:	00e3      	lsls	r3, r4, #3
 80218c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80218c6:	4413      	add	r3, r2
 80218c8:	3ba0      	subs	r3, #160	; 0xa0
 80218ca:	e9c3 0100 	strd	r0, r1, [r3]
          xrotg_XzIjz1eG(&b_s[qjj - 1], &ztest, &sqds, &smm1);
 80218ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80218d2:	3b01      	subs	r3, #1
 80218d4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80218d8:	00db      	lsls	r3, r3, #3
 80218da:	18d0      	adds	r0, r2, r3
 80218dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80218e0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80218e4:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80218e8:	f001 f9e8 	bl	8022cbc <xrotg_XzIjz1eG>
          rt = e[qjj - 1] * sqds + smm1 * b_s[qjj];
 80218ec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80218f0:	3b01      	subs	r3, #1
 80218f2:	00db      	lsls	r3, r3, #3
 80218f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80218f8:	4413      	add	r3, r2
 80218fa:	3bb8      	subs	r3, #184	; 0xb8
 80218fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021900:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8021904:	f7de fe6a 	bl	80005dc <__aeabi_dmul>
 8021908:	4602      	mov	r2, r0
 802190a:	460b      	mov	r3, r1
 802190c:	4614      	mov	r4, r2
 802190e:	461d      	mov	r5, r3
 8021910:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021914:	00db      	lsls	r3, r3, #3
 8021916:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802191a:	4413      	add	r3, r2
 802191c:	3ba0      	subs	r3, #160	; 0xa0
 802191e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021922:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8021926:	f7de fe59 	bl	80005dc <__aeabi_dmul>
 802192a:	4602      	mov	r2, r0
 802192c:	460b      	mov	r3, r1
 802192e:	4620      	mov	r0, r4
 8021930:	4629      	mov	r1, r5
 8021932:	f7de fc9d 	bl	8000270 <__adddf3>
 8021936:	4602      	mov	r2, r0
 8021938:	460b      	mov	r3, r1
 802193a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          b_s[qjj] = e[qjj - 1] * -smm1 + sqds * b_s[qjj];
 802193e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021942:	3b01      	subs	r3, #1
 8021944:	00db      	lsls	r3, r3, #3
 8021946:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802194a:	4413      	add	r3, r2
 802194c:	3bb8      	subs	r3, #184	; 0xb8
 802194e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021952:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8021956:	60ba      	str	r2, [r7, #8]
 8021958:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 802195c:	60fb      	str	r3, [r7, #12]
 802195e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021962:	f7de fe3b 	bl	80005dc <__aeabi_dmul>
 8021966:	4602      	mov	r2, r0
 8021968:	460b      	mov	r3, r1
 802196a:	4614      	mov	r4, r2
 802196c:	461d      	mov	r5, r3
 802196e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021972:	00db      	lsls	r3, r3, #3
 8021974:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021978:	4413      	add	r3, r2
 802197a:	3ba0      	subs	r3, #160	; 0xa0
 802197c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021980:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8021984:	f7de fe2a 	bl	80005dc <__aeabi_dmul>
 8021988:	4602      	mov	r2, r0
 802198a:	460b      	mov	r3, r1
 802198c:	4620      	mov	r0, r4
 802198e:	4629      	mov	r1, r5
 8021990:	f7de fc6e 	bl	8000270 <__adddf3>
 8021994:	4602      	mov	r2, r0
 8021996:	460b      	mov	r3, r1
 8021998:	4610      	mov	r0, r2
 802199a:	4619      	mov	r1, r3
 802199c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80219a0:	00db      	lsls	r3, r3, #3
 80219a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80219a6:	4413      	add	r3, r2
 80219a8:	3ba0      	subs	r3, #160	; 0xa0
 80219aa:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * e[qjj];
 80219ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80219b2:	00db      	lsls	r3, r3, #3
 80219b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80219b8:	4413      	add	r3, r2
 80219ba:	3bb8      	subs	r3, #184	; 0xb8
 80219bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80219c0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80219c4:	f7de fe0a 	bl	80005dc <__aeabi_dmul>
 80219c8:	4602      	mov	r2, r0
 80219ca:	460b      	mov	r3, r1
 80219cc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          e[qjj] *= sqds;
 80219d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80219d4:	00db      	lsls	r3, r3, #3
 80219d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80219da:	4413      	add	r3, r2
 80219dc:	3bb8      	subs	r3, #184	; 0xb8
 80219de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80219e2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80219e6:	f7de fdf9 	bl	80005dc <__aeabi_dmul>
 80219ea:	4602      	mov	r2, r0
 80219ec:	460b      	mov	r3, r1
 80219ee:	4610      	mov	r0, r2
 80219f0:	4619      	mov	r1, r3
 80219f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80219f6:	00db      	lsls	r3, r3, #3
 80219f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80219fc:	4413      	add	r3, r2
 80219fe:	3bb8      	subs	r3, #184	; 0xb8
 8021a00:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(U, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 8021a04:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021a08:	1e5a      	subs	r2, r3, #1
 8021a0a:	4613      	mov	r3, r2
 8021a0c:	005b      	lsls	r3, r3, #1
 8021a0e:	4413      	add	r3, r2
 8021a10:	1c59      	adds	r1, r3, #1
 8021a12:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8021a16:	4613      	mov	r3, r2
 8021a18:	005b      	lsls	r3, r3, #1
 8021a1a:	4413      	add	r3, r2
 8021a1c:	3301      	adds	r3, #1
 8021a1e:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8021a22:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 8021a26:	eeb0 1a46 	vmov.f32	s2, s12
 8021a2a:	eef0 1a66 	vmov.f32	s3, s13
 8021a2e:	eeb0 0a47 	vmov.f32	s0, s14
 8021a32:	eef0 0a67 	vmov.f32	s1, s15
 8021a36:	461a      	mov	r2, r3
 8021a38:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8021a3c:	f001 f822 	bl	8022a84 <xrot_i7f01JoJ>
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 8021a40:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021a44:	3301      	adds	r3, #1
 8021a46:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8021a4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021a4e:	1c5a      	adds	r2, r3, #1
 8021a50:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021a54:	4293      	cmp	r3, r2
 8021a56:	f77f ae74 	ble.w	8021742 <svd_u3DvUgOe+0x1682>
        }

        e[m] = rt;
 8021a5a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8021a5e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021a62:	00db      	lsls	r3, r3, #3
 8021a64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021a68:	4413      	add	r3, r2
 8021a6a:	3bb8      	subs	r3, #184	; 0xb8
 8021a6c:	e9c3 0100 	strd	r0, r1, [r3]
        qq++;
 8021a70:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021a74:	3301      	adds	r3, #1
 8021a76:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      }
      break;
 8021a7a:	e0b7      	b.n	8021bec <svd_u3DvUgOe+0x1b2c>

     default:
      if (b_s[d] < 0.0) {
 8021a7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021a80:	00db      	lsls	r3, r3, #3
 8021a82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021a86:	4413      	add	r3, r2
 8021a88:	3ba0      	subs	r3, #160	; 0xa0
 8021a8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021a8e:	f04f 0200 	mov.w	r2, #0
 8021a92:	f04f 0300 	mov.w	r3, #0
 8021a96:	f7df f813 	bl	8000ac0 <__aeabi_dcmplt>
 8021a9a:	4603      	mov	r3, r0
 8021a9c:	2b00      	cmp	r3, #0
 8021a9e:	d025      	beq.n	8021aec <svd_u3DvUgOe+0x1a2c>
        b_s[d] = -b_s[d];
 8021aa0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021aa4:	00db      	lsls	r3, r3, #3
 8021aa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021aaa:	4413      	add	r3, r2
 8021aac:	3ba0      	subs	r3, #160	; 0xa0
 8021aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ab2:	603a      	str	r2, [r7, #0]
 8021ab4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8021ab8:	607b      	str	r3, [r7, #4]
 8021aba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021abe:	00db      	lsls	r3, r3, #3
 8021ac0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021ac4:	4413      	add	r3, r2
 8021ac6:	3ba0      	subs	r3, #160	; 0xa0
 8021ac8:	ed97 7b00 	vldr	d7, [r7]
 8021acc:	ed83 7b00 	vstr	d7, [r3]
        xscal_eaAxXsvQ(-1.0, V, 3 * d + 1);
 8021ad0:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8021ad4:	4613      	mov	r3, r2
 8021ad6:	005b      	lsls	r3, r3, #1
 8021ad8:	4413      	add	r3, r2
 8021ada:	1c5a      	adds	r2, r3, #1
 8021adc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8021ae0:	4611      	mov	r1, r2
 8021ae2:	6818      	ldr	r0, [r3, #0]
 8021ae4:	ed9f 0b56 	vldr	d0, [pc, #344]	; 8021c40 <svd_u3DvUgOe+0x1b80>
 8021ae8:	f001 fa4e 	bl	8022f88 <xscal_eaAxXsvQ>
      }

      qq = d + 1;
 8021aec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021af0:	3301      	adds	r3, #1
 8021af2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 8021af6:	e055      	b.n	8021ba4 <svd_u3DvUgOe+0x1ae4>
        rt = b_s[d];
 8021af8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021afc:	00db      	lsls	r3, r3, #3
 8021afe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021b02:	4413      	add	r3, r2
 8021b04:	3ba0      	subs	r3, #160	; 0xa0
 8021b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b0a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        b_s[d] = b_s[qq];
 8021b0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021b12:	00db      	lsls	r3, r3, #3
 8021b14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021b18:	4413      	add	r3, r2
 8021b1a:	3ba0      	subs	r3, #160	; 0xa0
 8021b1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021b20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021b24:	00db      	lsls	r3, r3, #3
 8021b26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021b2a:	4413      	add	r3, r2
 8021b2c:	3ba0      	subs	r3, #160	; 0xa0
 8021b2e:	e9c3 0100 	strd	r0, r1, [r3]
        b_s[qq] = rt;
 8021b32:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8021b36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021b3a:	00db      	lsls	r3, r3, #3
 8021b3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021b40:	4413      	add	r3, r2
 8021b42:	3ba0      	subs	r3, #160	; 0xa0
 8021b44:	e9c3 0100 	strd	r0, r1, [r3]
        xswap_JoAqPjUv(V, 3 * d + 1, 3 * (d + 1) + 1);
 8021b48:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8021b4c:	4613      	mov	r3, r2
 8021b4e:	005b      	lsls	r3, r3, #1
 8021b50:	4413      	add	r3, r2
 8021b52:	1c59      	adds	r1, r3, #1
 8021b54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021b58:	1c5a      	adds	r2, r3, #1
 8021b5a:	4613      	mov	r3, r2
 8021b5c:	005b      	lsls	r3, r3, #1
 8021b5e:	4413      	add	r3, r2
 8021b60:	3301      	adds	r3, #1
 8021b62:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8021b66:	461a      	mov	r2, r3
 8021b68:	6800      	ldr	r0, [r0, #0]
 8021b6a:	f001 fa3c 	bl	8022fe6 <xswap_JoAqPjUv>
        xswap_JoAqPjUv(U, 3 * d + 1, 3 * (d + 1) + 1);
 8021b6e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8021b72:	4613      	mov	r3, r2
 8021b74:	005b      	lsls	r3, r3, #1
 8021b76:	4413      	add	r3, r2
 8021b78:	1c59      	adds	r1, r3, #1
 8021b7a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021b7e:	1c5a      	adds	r2, r3, #1
 8021b80:	4613      	mov	r3, r2
 8021b82:	005b      	lsls	r3, r3, #1
 8021b84:	4413      	add	r3, r2
 8021b86:	3301      	adds	r3, #1
 8021b88:	461a      	mov	r2, r3
 8021b8a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8021b8e:	f001 fa2a 	bl	8022fe6 <xswap_JoAqPjUv>
        d = qq;
 8021b92:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021b96:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        qq++;
 8021b9a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021b9e:	3301      	adds	r3, #1
 8021ba0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 8021ba4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021ba8:	2b01      	cmp	r3, #1
 8021baa:	dc16      	bgt.n	8021bda <svd_u3DvUgOe+0x1b1a>
 8021bac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021bb0:	00db      	lsls	r3, r3, #3
 8021bb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021bb6:	4413      	add	r3, r2
 8021bb8:	3ba0      	subs	r3, #160	; 0xa0
 8021bba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021bbe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021bc2:	00db      	lsls	r3, r3, #3
 8021bc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021bc8:	4413      	add	r3, r2
 8021bca:	3ba0      	subs	r3, #160	; 0xa0
 8021bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bd0:	f7de ff76 	bl	8000ac0 <__aeabi_dcmplt>
 8021bd4:	4603      	mov	r3, r0
 8021bd6:	2b00      	cmp	r3, #0
 8021bd8:	d18e      	bne.n	8021af8 <svd_u3DvUgOe+0x1a38>
      }

      qq = 0;
 8021bda:	2300      	movs	r3, #0
 8021bdc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      m--;
 8021be0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021be4:	3b01      	subs	r3, #1
 8021be6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
      break;
 8021bea:	bf00      	nop
  while ((m + 2 > 0) && (qq < 75)) {
 8021bec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021bf4:	db04      	blt.n	8021c00 <svd_u3DvUgOe+0x1b40>
 8021bf6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021bfa:	2b4a      	cmp	r3, #74	; 0x4a
 8021bfc:	f77f a972 	ble.w	8020ee4 <svd_u3DvUgOe+0xe24>
    }
  }

  s[0] = b_s[0];
 8021c00:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8021c04:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8021c08:	e9c1 2300 	strd	r2, r3, [r1]
  s[1] = b_s[1];
 8021c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8021c10:	f103 0108 	add.w	r1, r3, #8
 8021c14:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8021c18:	e9c1 2300 	strd	r2, r3, [r1]
  s[2] = b_s[2];
 8021c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8021c20:	f103 0110 	add.w	r1, r3, #16
 8021c24:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8021c28:	e9c1 2300 	strd	r2, r3, [r1]
}
 8021c2c:	bf00      	nop
 8021c2e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8021c32:	46bd      	mov	sp, r7
 8021c34:	ecbd 8b02 	vpop	{d8}
 8021c38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021c3c:	f3af 8000 	nop.w
 8021c40:	00000000 	.word	0x00000000
 8021c44:	bff00000 	.word	0xbff00000

08021c48 <trisolve_BC1XmAGq>:
#include "rtwtypes.h"
#include "trisolve_BC1XmAGq.h"

void trisolve_BC1XmAGq(real_T A, real_T B[3])
{
 8021c48:	b590      	push	{r4, r7, lr}
 8021c4a:	b085      	sub	sp, #20
 8021c4c:	af00      	add	r7, sp, #0
 8021c4e:	ed87 0b02 	vstr	d0, [r7, #8]
 8021c52:	6078      	str	r0, [r7, #4]
  if (B[0] != 0.0) {
 8021c54:	687b      	ldr	r3, [r7, #4]
 8021c56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021c5a:	f04f 0200 	mov.w	r2, #0
 8021c5e:	f04f 0300 	mov.w	r3, #0
 8021c62:	f7de ff23 	bl	8000aac <__aeabi_dcmpeq>
 8021c66:	4603      	mov	r3, r0
 8021c68:	2b00      	cmp	r3, #0
 8021c6a:	d10b      	bne.n	8021c84 <trisolve_BC1XmAGq+0x3c>
    B[0] /= A;
 8021c6c:	687b      	ldr	r3, [r7, #4]
 8021c6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021c72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021c76:	f7de fddb 	bl	8000830 <__aeabi_ddiv>
 8021c7a:	4602      	mov	r2, r0
 8021c7c:	460b      	mov	r3, r1
 8021c7e:	6879      	ldr	r1, [r7, #4]
 8021c80:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (B[1] != 0.0) {
 8021c84:	687b      	ldr	r3, [r7, #4]
 8021c86:	3308      	adds	r3, #8
 8021c88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021c8c:	f04f 0200 	mov.w	r2, #0
 8021c90:	f04f 0300 	mov.w	r3, #0
 8021c94:	f7de ff0a 	bl	8000aac <__aeabi_dcmpeq>
 8021c98:	4603      	mov	r3, r0
 8021c9a:	2b00      	cmp	r3, #0
 8021c9c:	d10e      	bne.n	8021cbc <trisolve_BC1XmAGq+0x74>
    B[1] /= A;
 8021c9e:	687b      	ldr	r3, [r7, #4]
 8021ca0:	3308      	adds	r3, #8
 8021ca2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021ca6:	687b      	ldr	r3, [r7, #4]
 8021ca8:	f103 0408 	add.w	r4, r3, #8
 8021cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021cb0:	f7de fdbe 	bl	8000830 <__aeabi_ddiv>
 8021cb4:	4602      	mov	r2, r0
 8021cb6:	460b      	mov	r3, r1
 8021cb8:	e9c4 2300 	strd	r2, r3, [r4]
  }

  if (B[2] != 0.0) {
 8021cbc:	687b      	ldr	r3, [r7, #4]
 8021cbe:	3310      	adds	r3, #16
 8021cc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021cc4:	f04f 0200 	mov.w	r2, #0
 8021cc8:	f04f 0300 	mov.w	r3, #0
 8021ccc:	f7de feee 	bl	8000aac <__aeabi_dcmpeq>
 8021cd0:	4603      	mov	r3, r0
 8021cd2:	2b00      	cmp	r3, #0
 8021cd4:	d000      	beq.n	8021cd8 <trisolve_BC1XmAGq+0x90>
    B[2] /= A;
  }
}
 8021cd6:	e00e      	b.n	8021cf6 <trisolve_BC1XmAGq+0xae>
    B[2] /= A;
 8021cd8:	687b      	ldr	r3, [r7, #4]
 8021cda:	3310      	adds	r3, #16
 8021cdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021ce0:	687b      	ldr	r3, [r7, #4]
 8021ce2:	f103 0410 	add.w	r4, r3, #16
 8021ce6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021cea:	f7de fda1 	bl	8000830 <__aeabi_ddiv>
 8021cee:	4602      	mov	r2, r0
 8021cf0:	460b      	mov	r3, r1
 8021cf2:	e9c4 2300 	strd	r2, r3, [r4]
}
 8021cf6:	bf00      	nop
 8021cf8:	3714      	adds	r7, #20
 8021cfa:	46bd      	mov	sp, r7
 8021cfc:	bd90      	pop	{r4, r7, pc}

08021cfe <xaxpy_OQ28XA21>:
#include "rtwtypes.h"
#include "xaxpy_OQ28XA21.h"

void xaxpy_OQ28XA21(int32_T n, real_T a, const real_T x[9], int32_T ix0, real_T
                    y[3], int32_T iy0)
{
 8021cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d00:	b08b      	sub	sp, #44	; 0x2c
 8021d02:	af00      	add	r7, sp, #0
 8021d04:	6178      	str	r0, [r7, #20]
 8021d06:	ed87 0b02 	vstr	d0, [r7, #8]
 8021d0a:	6139      	str	r1, [r7, #16]
 8021d0c:	607a      	str	r2, [r7, #4]
 8021d0e:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 8021d10:	697b      	ldr	r3, [r7, #20]
 8021d12:	2b00      	cmp	r3, #0
 8021d14:	dd43      	ble.n	8021d9e <xaxpy_OQ28XA21+0xa0>
 8021d16:	f04f 0200 	mov.w	r2, #0
 8021d1a:	f04f 0300 	mov.w	r3, #0
 8021d1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021d22:	f7de fec3 	bl	8000aac <__aeabi_dcmpeq>
 8021d26:	4603      	mov	r3, r0
 8021d28:	2b00      	cmp	r3, #0
 8021d2a:	d000      	beq.n	8021d2e <xaxpy_OQ28XA21+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 8021d2c:	e037      	b.n	8021d9e <xaxpy_OQ28XA21+0xa0>
    ix = ix0 - 1;
 8021d2e:	687b      	ldr	r3, [r7, #4]
 8021d30:	3b01      	subs	r3, #1
 8021d32:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 8021d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021d36:	3b01      	subs	r3, #1
 8021d38:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021d3a:	2300      	movs	r3, #0
 8021d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8021d3e:	e02a      	b.n	8021d96 <xaxpy_OQ28XA21+0x98>
      y[iy] += a * x[ix];
 8021d40:	69fb      	ldr	r3, [r7, #28]
 8021d42:	00db      	lsls	r3, r3, #3
 8021d44:	683a      	ldr	r2, [r7, #0]
 8021d46:	4413      	add	r3, r2
 8021d48:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021d4c:	6a3b      	ldr	r3, [r7, #32]
 8021d4e:	00db      	lsls	r3, r3, #3
 8021d50:	693a      	ldr	r2, [r7, #16]
 8021d52:	4413      	add	r3, r2
 8021d54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021d5c:	f7de fc3e 	bl	80005dc <__aeabi_dmul>
 8021d60:	4602      	mov	r2, r0
 8021d62:	460b      	mov	r3, r1
 8021d64:	4610      	mov	r0, r2
 8021d66:	4619      	mov	r1, r3
 8021d68:	69fb      	ldr	r3, [r7, #28]
 8021d6a:	00db      	lsls	r3, r3, #3
 8021d6c:	683a      	ldr	r2, [r7, #0]
 8021d6e:	18d6      	adds	r6, r2, r3
 8021d70:	4602      	mov	r2, r0
 8021d72:	460b      	mov	r3, r1
 8021d74:	4620      	mov	r0, r4
 8021d76:	4629      	mov	r1, r5
 8021d78:	f7de fa7a 	bl	8000270 <__adddf3>
 8021d7c:	4602      	mov	r2, r0
 8021d7e:	460b      	mov	r3, r1
 8021d80:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 8021d84:	6a3b      	ldr	r3, [r7, #32]
 8021d86:	3301      	adds	r3, #1
 8021d88:	623b      	str	r3, [r7, #32]
      iy++;
 8021d8a:	69fb      	ldr	r3, [r7, #28]
 8021d8c:	3301      	adds	r3, #1
 8021d8e:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d92:	3301      	adds	r3, #1
 8021d94:	627b      	str	r3, [r7, #36]	; 0x24
 8021d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021d98:	697b      	ldr	r3, [r7, #20]
 8021d9a:	429a      	cmp	r2, r3
 8021d9c:	dbd0      	blt.n	8021d40 <xaxpy_OQ28XA21+0x42>
}
 8021d9e:	bf00      	nop
 8021da0:	372c      	adds	r7, #44	; 0x2c
 8021da2:	46bd      	mov	sp, r7
 8021da4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021da6 <xaxpy_Wxch84Fl>:
#include "rtwtypes.h"
#include "xaxpy_Wxch84Fl.h"

void xaxpy_Wxch84Fl(int32_T n, real_T a, const real_T x[3], int32_T ix0, real_T
                    y[9], int32_T iy0)
{
 8021da6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021da8:	b08b      	sub	sp, #44	; 0x2c
 8021daa:	af00      	add	r7, sp, #0
 8021dac:	6178      	str	r0, [r7, #20]
 8021dae:	ed87 0b02 	vstr	d0, [r7, #8]
 8021db2:	6139      	str	r1, [r7, #16]
 8021db4:	607a      	str	r2, [r7, #4]
 8021db6:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 8021db8:	697b      	ldr	r3, [r7, #20]
 8021dba:	2b00      	cmp	r3, #0
 8021dbc:	dd43      	ble.n	8021e46 <xaxpy_Wxch84Fl+0xa0>
 8021dbe:	f04f 0200 	mov.w	r2, #0
 8021dc2:	f04f 0300 	mov.w	r3, #0
 8021dc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021dca:	f7de fe6f 	bl	8000aac <__aeabi_dcmpeq>
 8021dce:	4603      	mov	r3, r0
 8021dd0:	2b00      	cmp	r3, #0
 8021dd2:	d000      	beq.n	8021dd6 <xaxpy_Wxch84Fl+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 8021dd4:	e037      	b.n	8021e46 <xaxpy_Wxch84Fl+0xa0>
    ix = ix0 - 1;
 8021dd6:	687b      	ldr	r3, [r7, #4]
 8021dd8:	3b01      	subs	r3, #1
 8021dda:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 8021ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021dde:	3b01      	subs	r3, #1
 8021de0:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021de2:	2300      	movs	r3, #0
 8021de4:	627b      	str	r3, [r7, #36]	; 0x24
 8021de6:	e02a      	b.n	8021e3e <xaxpy_Wxch84Fl+0x98>
      y[iy] += a * x[ix];
 8021de8:	69fb      	ldr	r3, [r7, #28]
 8021dea:	00db      	lsls	r3, r3, #3
 8021dec:	683a      	ldr	r2, [r7, #0]
 8021dee:	4413      	add	r3, r2
 8021df0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021df4:	6a3b      	ldr	r3, [r7, #32]
 8021df6:	00db      	lsls	r3, r3, #3
 8021df8:	693a      	ldr	r2, [r7, #16]
 8021dfa:	4413      	add	r3, r2
 8021dfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021e00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021e04:	f7de fbea 	bl	80005dc <__aeabi_dmul>
 8021e08:	4602      	mov	r2, r0
 8021e0a:	460b      	mov	r3, r1
 8021e0c:	4610      	mov	r0, r2
 8021e0e:	4619      	mov	r1, r3
 8021e10:	69fb      	ldr	r3, [r7, #28]
 8021e12:	00db      	lsls	r3, r3, #3
 8021e14:	683a      	ldr	r2, [r7, #0]
 8021e16:	18d6      	adds	r6, r2, r3
 8021e18:	4602      	mov	r2, r0
 8021e1a:	460b      	mov	r3, r1
 8021e1c:	4620      	mov	r0, r4
 8021e1e:	4629      	mov	r1, r5
 8021e20:	f7de fa26 	bl	8000270 <__adddf3>
 8021e24:	4602      	mov	r2, r0
 8021e26:	460b      	mov	r3, r1
 8021e28:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 8021e2c:	6a3b      	ldr	r3, [r7, #32]
 8021e2e:	3301      	adds	r3, #1
 8021e30:	623b      	str	r3, [r7, #32]
      iy++;
 8021e32:	69fb      	ldr	r3, [r7, #28]
 8021e34:	3301      	adds	r3, #1
 8021e36:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e3a:	3301      	adds	r3, #1
 8021e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8021e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021e40:	697b      	ldr	r3, [r7, #20]
 8021e42:	429a      	cmp	r2, r3
 8021e44:	dbd0      	blt.n	8021de8 <xaxpy_Wxch84Fl+0x42>
}
 8021e46:	bf00      	nop
 8021e48:	372c      	adds	r7, #44	; 0x2c
 8021e4a:	46bd      	mov	sp, r7
 8021e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021e4e <xaxpy_guu0hJif>:
#include "rtwtypes.h"
#include "xaxpy_guu0hJif.h"

void xaxpy_guu0hJif(int32_T n, real_T a, int32_T ix0, real_T y[9], int32_T iy0)
{
 8021e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021e50:	b08b      	sub	sp, #44	; 0x2c
 8021e52:	af00      	add	r7, sp, #0
 8021e54:	6178      	str	r0, [r7, #20]
 8021e56:	ed87 0b02 	vstr	d0, [r7, #8]
 8021e5a:	6139      	str	r1, [r7, #16]
 8021e5c:	607a      	str	r2, [r7, #4]
 8021e5e:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 8021e60:	697b      	ldr	r3, [r7, #20]
 8021e62:	2b00      	cmp	r3, #0
 8021e64:	dd43      	ble.n	8021eee <xaxpy_guu0hJif+0xa0>
 8021e66:	f04f 0200 	mov.w	r2, #0
 8021e6a:	f04f 0300 	mov.w	r3, #0
 8021e6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021e72:	f7de fe1b 	bl	8000aac <__aeabi_dcmpeq>
 8021e76:	4603      	mov	r3, r0
 8021e78:	2b00      	cmp	r3, #0
 8021e7a:	d000      	beq.n	8021e7e <xaxpy_guu0hJif+0x30>
      y[iy] += a * y[ix];
      ix++;
      iy++;
    }
  }
}
 8021e7c:	e037      	b.n	8021eee <xaxpy_guu0hJif+0xa0>
    ix = ix0 - 1;
 8021e7e:	693b      	ldr	r3, [r7, #16]
 8021e80:	3b01      	subs	r3, #1
 8021e82:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 8021e84:	683b      	ldr	r3, [r7, #0]
 8021e86:	3b01      	subs	r3, #1
 8021e88:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021e8a:	2300      	movs	r3, #0
 8021e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8021e8e:	e02a      	b.n	8021ee6 <xaxpy_guu0hJif+0x98>
      y[iy] += a * y[ix];
 8021e90:	69fb      	ldr	r3, [r7, #28]
 8021e92:	00db      	lsls	r3, r3, #3
 8021e94:	687a      	ldr	r2, [r7, #4]
 8021e96:	4413      	add	r3, r2
 8021e98:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021e9c:	6a3b      	ldr	r3, [r7, #32]
 8021e9e:	00db      	lsls	r3, r3, #3
 8021ea0:	687a      	ldr	r2, [r7, #4]
 8021ea2:	4413      	add	r3, r2
 8021ea4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021eac:	f7de fb96 	bl	80005dc <__aeabi_dmul>
 8021eb0:	4602      	mov	r2, r0
 8021eb2:	460b      	mov	r3, r1
 8021eb4:	4610      	mov	r0, r2
 8021eb6:	4619      	mov	r1, r3
 8021eb8:	69fb      	ldr	r3, [r7, #28]
 8021eba:	00db      	lsls	r3, r3, #3
 8021ebc:	687a      	ldr	r2, [r7, #4]
 8021ebe:	18d6      	adds	r6, r2, r3
 8021ec0:	4602      	mov	r2, r0
 8021ec2:	460b      	mov	r3, r1
 8021ec4:	4620      	mov	r0, r4
 8021ec6:	4629      	mov	r1, r5
 8021ec8:	f7de f9d2 	bl	8000270 <__adddf3>
 8021ecc:	4602      	mov	r2, r0
 8021ece:	460b      	mov	r3, r1
 8021ed0:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 8021ed4:	6a3b      	ldr	r3, [r7, #32]
 8021ed6:	3301      	adds	r3, #1
 8021ed8:	623b      	str	r3, [r7, #32]
      iy++;
 8021eda:	69fb      	ldr	r3, [r7, #28]
 8021edc:	3301      	adds	r3, #1
 8021ede:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ee2:	3301      	adds	r3, #1
 8021ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8021ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021ee8:	697b      	ldr	r3, [r7, #20]
 8021eea:	429a      	cmp	r2, r3
 8021eec:	dbd0      	blt.n	8021e90 <xaxpy_guu0hJif+0x42>
}
 8021eee:	bf00      	nop
 8021ef0:	372c      	adds	r7, #44	; 0x2c
 8021ef2:	46bd      	mov	sp, r7
 8021ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021ef6 <xdotc_mznw4aLl>:
#include "rtwtypes.h"
#include "xdotc_mznw4aLl.h"

real_T xdotc_mznw4aLl(int32_T n, const real_T x[9], int32_T ix0, const real_T y
                      [9], int32_T iy0)
{
 8021ef6:	b580      	push	{r7, lr}
 8021ef8:	b08a      	sub	sp, #40	; 0x28
 8021efa:	af00      	add	r7, sp, #0
 8021efc:	60f8      	str	r0, [r7, #12]
 8021efe:	60b9      	str	r1, [r7, #8]
 8021f00:	607a      	str	r2, [r7, #4]
 8021f02:	603b      	str	r3, [r7, #0]
  real_T d;
  int32_T k;
  d = 0.0;
 8021f04:	f04f 0200 	mov.w	r2, #0
 8021f08:	f04f 0300 	mov.w	r3, #0
 8021f0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (n >= 1) {
 8021f10:	68fb      	ldr	r3, [r7, #12]
 8021f12:	2b00      	cmp	r3, #0
 8021f14:	dd31      	ble.n	8021f7a <xdotc_mznw4aLl+0x84>
    int32_T ix;
    int32_T iy;
    ix = ix0;
 8021f16:	687b      	ldr	r3, [r7, #4]
 8021f18:	61bb      	str	r3, [r7, #24]
    iy = iy0;
 8021f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f1c:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 8021f1e:	2300      	movs	r3, #0
 8021f20:	61fb      	str	r3, [r7, #28]
 8021f22:	e026      	b.n	8021f72 <xdotc_mznw4aLl+0x7c>
      d += x[ix - 1] * y[iy - 1];
 8021f24:	69bb      	ldr	r3, [r7, #24]
 8021f26:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8021f2a:	3b01      	subs	r3, #1
 8021f2c:	00db      	lsls	r3, r3, #3
 8021f2e:	68ba      	ldr	r2, [r7, #8]
 8021f30:	4413      	add	r3, r2
 8021f32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021f36:	697b      	ldr	r3, [r7, #20]
 8021f38:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8021f3c:	3b01      	subs	r3, #1
 8021f3e:	00db      	lsls	r3, r3, #3
 8021f40:	683a      	ldr	r2, [r7, #0]
 8021f42:	4413      	add	r3, r2
 8021f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f48:	f7de fb48 	bl	80005dc <__aeabi_dmul>
 8021f4c:	4602      	mov	r2, r0
 8021f4e:	460b      	mov	r3, r1
 8021f50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021f54:	f7de f98c 	bl	8000270 <__adddf3>
 8021f58:	4602      	mov	r2, r0
 8021f5a:	460b      	mov	r3, r1
 8021f5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
      ix++;
 8021f60:	69bb      	ldr	r3, [r7, #24]
 8021f62:	3301      	adds	r3, #1
 8021f64:	61bb      	str	r3, [r7, #24]
      iy++;
 8021f66:	697b      	ldr	r3, [r7, #20]
 8021f68:	3301      	adds	r3, #1
 8021f6a:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 8021f6c:	69fb      	ldr	r3, [r7, #28]
 8021f6e:	3301      	adds	r3, #1
 8021f70:	61fb      	str	r3, [r7, #28]
 8021f72:	69fa      	ldr	r2, [r7, #28]
 8021f74:	68fb      	ldr	r3, [r7, #12]
 8021f76:	429a      	cmp	r2, r3
 8021f78:	dbd4      	blt.n	8021f24 <xdotc_mznw4aLl+0x2e>
    }
  }

  return d;
 8021f7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8021f7e:	ec43 2b17 	vmov	d7, r2, r3
}
 8021f82:	eeb0 0a47 	vmov.f32	s0, s14
 8021f86:	eef0 0a67 	vmov.f32	s1, s15
 8021f8a:	3728      	adds	r7, #40	; 0x28
 8021f8c:	46bd      	mov	sp, r7
 8021f8e:	bd80      	pop	{r7, pc}

08021f90 <xgemv_NQlWbt2i>:
#include "rtwtypes.h"
#include "xgemv_NQlWbt2i.h"

void xgemv_NQlWbt2i(int32_T m, int32_T n, const real_T A[18], int32_T ia0, const
                    real_T x[18], int32_T ix0, real_T y[3])
{
 8021f90:	b590      	push	{r4, r7, lr}
 8021f92:	b08f      	sub	sp, #60	; 0x3c
 8021f94:	af00      	add	r7, sp, #0
 8021f96:	60f8      	str	r0, [r7, #12]
 8021f98:	60b9      	str	r1, [r7, #8]
 8021f9a:	607a      	str	r2, [r7, #4]
 8021f9c:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 8021f9e:	68fb      	ldr	r3, [r7, #12]
 8021fa0:	2b00      	cmp	r3, #0
 8021fa2:	d079      	beq.n	8022098 <xgemv_NQlWbt2i+0x108>
 8021fa4:	68bb      	ldr	r3, [r7, #8]
 8021fa6:	2b00      	cmp	r3, #0
 8021fa8:	d076      	beq.n	8022098 <xgemv_NQlWbt2i+0x108>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 8021faa:	2300      	movs	r3, #0
 8021fac:	637b      	str	r3, [r7, #52]	; 0x34
 8021fae:	e00c      	b.n	8021fca <xgemv_NQlWbt2i+0x3a>
      y[b_iy] = 0.0;
 8021fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021fb2:	00db      	lsls	r3, r3, #3
 8021fb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8021fb6:	18d1      	adds	r1, r2, r3
 8021fb8:	f04f 0200 	mov.w	r2, #0
 8021fbc:	f04f 0300 	mov.w	r3, #0
 8021fc0:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 8021fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021fc6:	3301      	adds	r3, #1
 8021fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8021fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021fcc:	68bb      	ldr	r3, [r7, #8]
 8021fce:	429a      	cmp	r2, r3
 8021fd0:	dbee      	blt.n	8021fb0 <xgemv_NQlWbt2i+0x20>
    }

    b_iy = 0;
 8021fd2:	2300      	movs	r3, #0
 8021fd4:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 6 + ia0;
 8021fd6:	68bb      	ldr	r3, [r7, #8]
 8021fd8:	1e5a      	subs	r2, r3, #1
 8021fda:	4613      	mov	r3, r2
 8021fdc:	005b      	lsls	r3, r3, #1
 8021fde:	4413      	add	r3, r2
 8021fe0:	005b      	lsls	r3, r3, #1
 8021fe2:	461a      	mov	r2, r3
 8021fe4:	683b      	ldr	r3, [r7, #0]
 8021fe6:	4413      	add	r3, r2
 8021fe8:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 6) {
 8021fea:	683b      	ldr	r3, [r7, #0]
 8021fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021fee:	e04f      	b.n	8022090 <xgemv_NQlWbt2i+0x100>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 8021ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021ff2:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 8021ff4:	f04f 0200 	mov.w	r2, #0
 8021ff8:	f04f 0300 	mov.w	r3, #0
 8021ffc:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 8022000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022002:	68fb      	ldr	r3, [r7, #12]
 8022004:	4413      	add	r3, r2
 8022006:	3b01      	subs	r3, #1
 8022008:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 802200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802200c:	633b      	str	r3, [r7, #48]	; 0x30
 802200e:	e023      	b.n	8022058 <xgemv_NQlWbt2i+0xc8>
        c += A[ia - 1] * x[ix - 1];
 8022010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022012:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022016:	3b01      	subs	r3, #1
 8022018:	00db      	lsls	r3, r3, #3
 802201a:	687a      	ldr	r2, [r7, #4]
 802201c:	4413      	add	r3, r2
 802201e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022022:	69fb      	ldr	r3, [r7, #28]
 8022024:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022028:	3b01      	subs	r3, #1
 802202a:	00db      	lsls	r3, r3, #3
 802202c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802202e:	4413      	add	r3, r2
 8022030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022034:	f7de fad2 	bl	80005dc <__aeabi_dmul>
 8022038:	4602      	mov	r2, r0
 802203a:	460b      	mov	r3, r1
 802203c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022040:	f7de f916 	bl	8000270 <__adddf3>
 8022044:	4602      	mov	r2, r0
 8022046:	460b      	mov	r3, r1
 8022048:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 802204c:	69fb      	ldr	r3, [r7, #28]
 802204e:	3301      	adds	r3, #1
 8022050:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 8022052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022054:	3301      	adds	r3, #1
 8022056:	633b      	str	r3, [r7, #48]	; 0x30
 8022058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802205a:	697b      	ldr	r3, [r7, #20]
 802205c:	429a      	cmp	r2, r3
 802205e:	ddd7      	ble.n	8022010 <xgemv_NQlWbt2i+0x80>
      }

      y[b_iy] += c;
 8022060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022062:	00db      	lsls	r3, r3, #3
 8022064:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8022066:	4413      	add	r3, r2
 8022068:	e9d3 0100 	ldrd	r0, r1, [r3]
 802206c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802206e:	00db      	lsls	r3, r3, #3
 8022070:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8022072:	18d4      	adds	r4, r2, r3
 8022074:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022078:	f7de f8fa 	bl	8000270 <__adddf3>
 802207c:	4602      	mov	r2, r0
 802207e:	460b      	mov	r3, r1
 8022080:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 8022084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022086:	3301      	adds	r3, #1
 8022088:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 6) {
 802208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802208c:	3306      	adds	r3, #6
 802208e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022092:	69bb      	ldr	r3, [r7, #24]
 8022094:	429a      	cmp	r2, r3
 8022096:	ddab      	ble.n	8021ff0 <xgemv_NQlWbt2i+0x60>
    }
  }
}
 8022098:	bf00      	nop
 802209a:	373c      	adds	r7, #60	; 0x3c
 802209c:	46bd      	mov	sp, r7
 802209e:	bd90      	pop	{r4, r7, pc}

080220a0 <xgemv_fRiR1I1O>:
#include "rtwtypes.h"
#include "xgemv_fRiR1I1O.h"

void xgemv_fRiR1I1O(int32_T m, int32_T n, const real_T A[9], int32_T ia0, const
                    real_T x[9], int32_T ix0, real_T y[3])
{
 80220a0:	b590      	push	{r4, r7, lr}
 80220a2:	b08f      	sub	sp, #60	; 0x3c
 80220a4:	af00      	add	r7, sp, #0
 80220a6:	60f8      	str	r0, [r7, #12]
 80220a8:	60b9      	str	r1, [r7, #8]
 80220aa:	607a      	str	r2, [r7, #4]
 80220ac:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 80220ae:	68fb      	ldr	r3, [r7, #12]
 80220b0:	2b00      	cmp	r3, #0
 80220b2:	d077      	beq.n	80221a4 <xgemv_fRiR1I1O+0x104>
 80220b4:	68bb      	ldr	r3, [r7, #8]
 80220b6:	2b00      	cmp	r3, #0
 80220b8:	d074      	beq.n	80221a4 <xgemv_fRiR1I1O+0x104>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 80220ba:	2300      	movs	r3, #0
 80220bc:	637b      	str	r3, [r7, #52]	; 0x34
 80220be:	e00c      	b.n	80220da <xgemv_fRiR1I1O+0x3a>
      y[b_iy] = 0.0;
 80220c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80220c2:	00db      	lsls	r3, r3, #3
 80220c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80220c6:	18d1      	adds	r1, r2, r3
 80220c8:	f04f 0200 	mov.w	r2, #0
 80220cc:	f04f 0300 	mov.w	r3, #0
 80220d0:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 80220d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80220d6:	3301      	adds	r3, #1
 80220d8:	637b      	str	r3, [r7, #52]	; 0x34
 80220da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80220dc:	68bb      	ldr	r3, [r7, #8]
 80220de:	429a      	cmp	r2, r3
 80220e0:	dbee      	blt.n	80220c0 <xgemv_fRiR1I1O+0x20>
    }

    b_iy = 0;
 80220e2:	2300      	movs	r3, #0
 80220e4:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 3 + ia0;
 80220e6:	68bb      	ldr	r3, [r7, #8]
 80220e8:	1e5a      	subs	r2, r3, #1
 80220ea:	4613      	mov	r3, r2
 80220ec:	005b      	lsls	r3, r3, #1
 80220ee:	4413      	add	r3, r2
 80220f0:	683a      	ldr	r2, [r7, #0]
 80220f2:	4413      	add	r3, r2
 80220f4:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 3) {
 80220f6:	683b      	ldr	r3, [r7, #0]
 80220f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80220fa:	e04f      	b.n	802219c <xgemv_fRiR1I1O+0xfc>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 80220fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80220fe:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 8022100:	f04f 0200 	mov.w	r2, #0
 8022104:	f04f 0300 	mov.w	r3, #0
 8022108:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 802210c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802210e:	68fb      	ldr	r3, [r7, #12]
 8022110:	4413      	add	r3, r2
 8022112:	3b01      	subs	r3, #1
 8022114:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 8022116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022118:	633b      	str	r3, [r7, #48]	; 0x30
 802211a:	e023      	b.n	8022164 <xgemv_fRiR1I1O+0xc4>
        c += A[ia - 1] * x[ix - 1];
 802211c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802211e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022122:	3b01      	subs	r3, #1
 8022124:	00db      	lsls	r3, r3, #3
 8022126:	687a      	ldr	r2, [r7, #4]
 8022128:	4413      	add	r3, r2
 802212a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802212e:	69fb      	ldr	r3, [r7, #28]
 8022130:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022134:	3b01      	subs	r3, #1
 8022136:	00db      	lsls	r3, r3, #3
 8022138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802213a:	4413      	add	r3, r2
 802213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022140:	f7de fa4c 	bl	80005dc <__aeabi_dmul>
 8022144:	4602      	mov	r2, r0
 8022146:	460b      	mov	r3, r1
 8022148:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802214c:	f7de f890 	bl	8000270 <__adddf3>
 8022150:	4602      	mov	r2, r0
 8022152:	460b      	mov	r3, r1
 8022154:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 8022158:	69fb      	ldr	r3, [r7, #28]
 802215a:	3301      	adds	r3, #1
 802215c:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 802215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022160:	3301      	adds	r3, #1
 8022162:	633b      	str	r3, [r7, #48]	; 0x30
 8022164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022166:	697b      	ldr	r3, [r7, #20]
 8022168:	429a      	cmp	r2, r3
 802216a:	ddd7      	ble.n	802211c <xgemv_fRiR1I1O+0x7c>
      }

      y[b_iy] += c;
 802216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802216e:	00db      	lsls	r3, r3, #3
 8022170:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8022172:	4413      	add	r3, r2
 8022174:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802217a:	00db      	lsls	r3, r3, #3
 802217c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802217e:	18d4      	adds	r4, r2, r3
 8022180:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022184:	f7de f874 	bl	8000270 <__adddf3>
 8022188:	4602      	mov	r2, r0
 802218a:	460b      	mov	r3, r1
 802218c:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 8022190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022192:	3301      	adds	r3, #1
 8022194:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 3) {
 8022196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022198:	3303      	adds	r3, #3
 802219a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802219c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802219e:	69bb      	ldr	r3, [r7, #24]
 80221a0:	429a      	cmp	r2, r3
 80221a2:	ddab      	ble.n	80220fc <xgemv_fRiR1I1O+0x5c>
    }
  }
}
 80221a4:	bf00      	nop
 80221a6:	373c      	adds	r7, #60	; 0x3c
 80221a8:	46bd      	mov	sp, r7
 80221aa:	bd90      	pop	{r4, r7, pc}

080221ac <xgerc_R09LiDgJ>:
#include "rtwtypes.h"
#include "xgerc_R09LiDgJ.h"

void xgerc_R09LiDgJ(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[18], int32_T ia0)
{
 80221ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80221ae:	b091      	sub	sp, #68	; 0x44
 80221b0:	af00      	add	r7, sp, #0
 80221b2:	6178      	str	r0, [r7, #20]
 80221b4:	6139      	str	r1, [r7, #16]
 80221b6:	ed87 0b02 	vstr	d0, [r7, #8]
 80221ba:	607a      	str	r2, [r7, #4]
 80221bc:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 80221be:	f04f 0200 	mov.w	r2, #0
 80221c2:	f04f 0300 	mov.w	r3, #0
 80221c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80221ca:	f7de fc6f 	bl	8000aac <__aeabi_dcmpeq>
 80221ce:	4603      	mov	r3, r0
 80221d0:	2b00      	cmp	r3, #0
 80221d2:	d000      	beq.n	80221d6 <xgerc_R09LiDgJ+0x2a>

      jy++;
      jA += 6;
    }
  }
}
 80221d4:	e069      	b.n	80222aa <xgerc_R09LiDgJ+0xfe>
    jA = ia0 - 1;
 80221d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80221d8:	3b01      	subs	r3, #1
 80221da:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 80221dc:	2300      	movs	r3, #0
 80221de:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 80221e0:	2300      	movs	r3, #0
 80221e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80221e4:	e05d      	b.n	80222a2 <xgerc_R09LiDgJ+0xf6>
      if (y[jy] != 0.0) {
 80221e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80221e8:	00db      	lsls	r3, r3, #3
 80221ea:	683a      	ldr	r2, [r7, #0]
 80221ec:	4413      	add	r3, r2
 80221ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80221f2:	f04f 0200 	mov.w	r2, #0
 80221f6:	f04f 0300 	mov.w	r3, #0
 80221fa:	f7de fc57 	bl	8000aac <__aeabi_dcmpeq>
 80221fe:	4603      	mov	r3, r0
 8022200:	2b00      	cmp	r3, #0
 8022202:	d145      	bne.n	8022290 <xgerc_R09LiDgJ+0xe4>
        temp = y[jy] * alpha1;
 8022204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022206:	00db      	lsls	r3, r3, #3
 8022208:	683a      	ldr	r2, [r7, #0]
 802220a:	4413      	add	r3, r2
 802220c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022210:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8022214:	f7de f9e2 	bl	80005dc <__aeabi_dmul>
 8022218:	4602      	mov	r2, r0
 802221a:	460b      	mov	r3, r1
 802221c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 8022220:	687b      	ldr	r3, [r7, #4]
 8022222:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 8022224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022226:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 8022228:	697a      	ldr	r2, [r7, #20]
 802222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802222c:	4413      	add	r3, r2
 802222e:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 8022230:	e02a      	b.n	8022288 <xgerc_R09LiDgJ+0xdc>
          A[ijA] += A[ix - 1] * temp;
 8022232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022234:	00db      	lsls	r3, r3, #3
 8022236:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8022238:	4413      	add	r3, r2
 802223a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022240:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022244:	3b01      	subs	r3, #1
 8022246:	00db      	lsls	r3, r3, #3
 8022248:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802224a:	4413      	add	r3, r2
 802224c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022250:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022254:	f7de f9c2 	bl	80005dc <__aeabi_dmul>
 8022258:	4602      	mov	r2, r0
 802225a:	460b      	mov	r3, r1
 802225c:	4610      	mov	r0, r2
 802225e:	4619      	mov	r1, r3
 8022260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022262:	00db      	lsls	r3, r3, #3
 8022264:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8022266:	18d6      	adds	r6, r2, r3
 8022268:	4602      	mov	r2, r0
 802226a:	460b      	mov	r3, r1
 802226c:	4620      	mov	r0, r4
 802226e:	4629      	mov	r1, r5
 8022270:	f7dd fffe 	bl	8000270 <__adddf3>
 8022274:	4602      	mov	r2, r0
 8022276:	460b      	mov	r3, r1
 8022278:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 802227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802227e:	3301      	adds	r3, #1
 8022280:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 8022282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022284:	3301      	adds	r3, #1
 8022286:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 8022288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802228a:	69fb      	ldr	r3, [r7, #28]
 802228c:	429a      	cmp	r2, r3
 802228e:	dbd0      	blt.n	8022232 <xgerc_R09LiDgJ+0x86>
      jy++;
 8022290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022292:	3301      	adds	r3, #1
 8022294:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 6;
 8022296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022298:	3306      	adds	r3, #6
 802229a:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 802229c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802229e:	3301      	adds	r3, #1
 80222a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80222a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80222a4:	693b      	ldr	r3, [r7, #16]
 80222a6:	429a      	cmp	r2, r3
 80222a8:	db9d      	blt.n	80221e6 <xgerc_R09LiDgJ+0x3a>
}
 80222aa:	bf00      	nop
 80222ac:	3744      	adds	r7, #68	; 0x44
 80222ae:	46bd      	mov	sp, r7
 80222b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080222b2 <xgerc_tNNiazQU>:
#include "rtwtypes.h"
#include "xgerc_tNNiazQU.h"

void xgerc_tNNiazQU(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[9], int32_T ia0)
{
 80222b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80222b4:	b091      	sub	sp, #68	; 0x44
 80222b6:	af00      	add	r7, sp, #0
 80222b8:	6178      	str	r0, [r7, #20]
 80222ba:	6139      	str	r1, [r7, #16]
 80222bc:	ed87 0b02 	vstr	d0, [r7, #8]
 80222c0:	607a      	str	r2, [r7, #4]
 80222c2:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 80222c4:	f04f 0200 	mov.w	r2, #0
 80222c8:	f04f 0300 	mov.w	r3, #0
 80222cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80222d0:	f7de fbec 	bl	8000aac <__aeabi_dcmpeq>
 80222d4:	4603      	mov	r3, r0
 80222d6:	2b00      	cmp	r3, #0
 80222d8:	d000      	beq.n	80222dc <xgerc_tNNiazQU+0x2a>

      jy++;
      jA += 3;
    }
  }
}
 80222da:	e069      	b.n	80223b0 <xgerc_tNNiazQU+0xfe>
    jA = ia0 - 1;
 80222dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80222de:	3b01      	subs	r3, #1
 80222e0:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 80222e2:	2300      	movs	r3, #0
 80222e4:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 80222e6:	2300      	movs	r3, #0
 80222e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80222ea:	e05d      	b.n	80223a8 <xgerc_tNNiazQU+0xf6>
      if (y[jy] != 0.0) {
 80222ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80222ee:	00db      	lsls	r3, r3, #3
 80222f0:	683a      	ldr	r2, [r7, #0]
 80222f2:	4413      	add	r3, r2
 80222f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80222f8:	f04f 0200 	mov.w	r2, #0
 80222fc:	f04f 0300 	mov.w	r3, #0
 8022300:	f7de fbd4 	bl	8000aac <__aeabi_dcmpeq>
 8022304:	4603      	mov	r3, r0
 8022306:	2b00      	cmp	r3, #0
 8022308:	d145      	bne.n	8022396 <xgerc_tNNiazQU+0xe4>
        temp = y[jy] * alpha1;
 802230a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802230c:	00db      	lsls	r3, r3, #3
 802230e:	683a      	ldr	r2, [r7, #0]
 8022310:	4413      	add	r3, r2
 8022312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802231a:	f7de f95f 	bl	80005dc <__aeabi_dmul>
 802231e:	4602      	mov	r2, r0
 8022320:	460b      	mov	r3, r1
 8022322:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 8022326:	687b      	ldr	r3, [r7, #4]
 8022328:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 802232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802232c:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 802232e:	697a      	ldr	r2, [r7, #20]
 8022330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022332:	4413      	add	r3, r2
 8022334:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 8022336:	e02a      	b.n	802238e <xgerc_tNNiazQU+0xdc>
          A[ijA] += A[ix - 1] * temp;
 8022338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802233a:	00db      	lsls	r3, r3, #3
 802233c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802233e:	4413      	add	r3, r2
 8022340:	e9d3 4500 	ldrd	r4, r5, [r3]
 8022344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022346:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802234a:	3b01      	subs	r3, #1
 802234c:	00db      	lsls	r3, r3, #3
 802234e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8022350:	4413      	add	r3, r2
 8022352:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022356:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802235a:	f7de f93f 	bl	80005dc <__aeabi_dmul>
 802235e:	4602      	mov	r2, r0
 8022360:	460b      	mov	r3, r1
 8022362:	4610      	mov	r0, r2
 8022364:	4619      	mov	r1, r3
 8022366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022368:	00db      	lsls	r3, r3, #3
 802236a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802236c:	18d6      	adds	r6, r2, r3
 802236e:	4602      	mov	r2, r0
 8022370:	460b      	mov	r3, r1
 8022372:	4620      	mov	r0, r4
 8022374:	4629      	mov	r1, r5
 8022376:	f7dd ff7b 	bl	8000270 <__adddf3>
 802237a:	4602      	mov	r2, r0
 802237c:	460b      	mov	r3, r1
 802237e:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 8022382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022384:	3301      	adds	r3, #1
 8022386:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 8022388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802238a:	3301      	adds	r3, #1
 802238c:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 802238e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022390:	69fb      	ldr	r3, [r7, #28]
 8022392:	429a      	cmp	r2, r3
 8022394:	dbd0      	blt.n	8022338 <xgerc_tNNiazQU+0x86>
      jy++;
 8022396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022398:	3301      	adds	r3, #1
 802239a:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 3;
 802239c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802239e:	3303      	adds	r3, #3
 80223a0:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 80223a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80223a4:	3301      	adds	r3, #1
 80223a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80223a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80223aa:	693b      	ldr	r3, [r7, #16]
 80223ac:	429a      	cmp	r2, r3
 80223ae:	db9d      	blt.n	80222ec <xgerc_tNNiazQU+0x3a>
}
 80223b0:	bf00      	nop
 80223b2:	3744      	adds	r7, #68	; 0x44
 80223b4:	46bd      	mov	sp, r7
 80223b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080223b8 <xnrm2_7bm34mDQ>:
#include "rtwtypes.h"
#include "xnrm2_7bm34mDQ.h"
#include <math.h>

real_T xnrm2_7bm34mDQ(int32_T n, const real_T x[6], int32_T ix0)
{
 80223b8:	b580      	push	{r7, lr}
 80223ba:	b092      	sub	sp, #72	; 0x48
 80223bc:	af00      	add	r7, sp, #0
 80223be:	60f8      	str	r0, [r7, #12]
 80223c0:	60b9      	str	r1, [r7, #8]
 80223c2:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 80223c4:	f04f 0200 	mov.w	r2, #0
 80223c8:	f04f 0300 	mov.w	r3, #0
 80223cc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 80223d0:	68fb      	ldr	r3, [r7, #12]
 80223d2:	2b00      	cmp	r3, #0
 80223d4:	f340 8090 	ble.w	80224f8 <xnrm2_7bm34mDQ+0x140>
    if (n == 1) {
 80223d8:	68fb      	ldr	r3, [r7, #12]
 80223da:	2b01      	cmp	r3, #1
 80223dc:	d10e      	bne.n	80223fc <xnrm2_7bm34mDQ+0x44>
      y = fabs(x[ix0 - 1]);
 80223de:	687b      	ldr	r3, [r7, #4]
 80223e0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80223e4:	3b01      	subs	r3, #1
 80223e6:	00db      	lsls	r3, r3, #3
 80223e8:	68ba      	ldr	r2, [r7, #8]
 80223ea:	4413      	add	r3, r2
 80223ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223f0:	4611      	mov	r1, r2
 80223f2:	6439      	str	r1, [r7, #64]	; 0x40
 80223f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80223f8:	647b      	str	r3, [r7, #68]	; 0x44
 80223fa:	e07d      	b.n	80224f8 <xnrm2_7bm34mDQ+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 80223fc:	f04f 0200 	mov.w	r2, #0
 8022400:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8022404:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8022408:	687a      	ldr	r2, [r7, #4]
 802240a:	68fb      	ldr	r3, [r7, #12]
 802240c:	4413      	add	r3, r2
 802240e:	3b01      	subs	r3, #1
 8022410:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 8022412:	687b      	ldr	r3, [r7, #4]
 8022414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022416:	e05d      	b.n	80224d4 <xnrm2_7bm34mDQ+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8022418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802241a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802241e:	3b01      	subs	r3, #1
 8022420:	00db      	lsls	r3, r3, #3
 8022422:	68ba      	ldr	r2, [r7, #8]
 8022424:	4413      	add	r3, r2
 8022426:	e9d3 2300 	ldrd	r2, r3, [r3]
 802242a:	4611      	mov	r1, r2
 802242c:	6239      	str	r1, [r7, #32]
 802242e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022432:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8022434:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022438:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802243c:	f7de fb5e 	bl	8000afc <__aeabi_dcmpgt>
 8022440:	4603      	mov	r3, r0
 8022442:	2b00      	cmp	r3, #0
 8022444:	d029      	beq.n	802249a <xnrm2_7bm34mDQ+0xe2>
          real_T t;
          t = scale / absxk;
 8022446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802244a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 802244e:	f7de f9ef 	bl	8000830 <__aeabi_ddiv>
 8022452:	4602      	mov	r2, r0
 8022454:	460b      	mov	r3, r1
 8022456:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 802245a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802245e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8022462:	f7de f8bb 	bl	80005dc <__aeabi_dmul>
 8022466:	4602      	mov	r2, r0
 8022468:	460b      	mov	r3, r1
 802246a:	4610      	mov	r0, r2
 802246c:	4619      	mov	r1, r3
 802246e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022472:	f7de f8b3 	bl	80005dc <__aeabi_dmul>
 8022476:	4602      	mov	r2, r0
 8022478:	460b      	mov	r3, r1
 802247a:	4610      	mov	r0, r2
 802247c:	4619      	mov	r1, r3
 802247e:	f04f 0200 	mov.w	r2, #0
 8022482:	4b23      	ldr	r3, [pc, #140]	; (8022510 <xnrm2_7bm34mDQ+0x158>)
 8022484:	f7dd fef4 	bl	8000270 <__adddf3>
 8022488:	4602      	mov	r2, r0
 802248a:	460b      	mov	r3, r1
 802248c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8022490:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022494:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8022498:	e019      	b.n	80224ce <xnrm2_7bm34mDQ+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 802249a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 802249e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80224a2:	f7de f9c5 	bl	8000830 <__aeabi_ddiv>
 80224a6:	4602      	mov	r2, r0
 80224a8:	460b      	mov	r3, r1
 80224aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 80224ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80224b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80224b6:	f7de f891 	bl	80005dc <__aeabi_dmul>
 80224ba:	4602      	mov	r2, r0
 80224bc:	460b      	mov	r3, r1
 80224be:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80224c2:	f7dd fed5 	bl	8000270 <__adddf3>
 80224c6:	4602      	mov	r2, r0
 80224c8:	460b      	mov	r3, r1
 80224ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 80224ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80224d0:	3301      	adds	r3, #1
 80224d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80224d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80224d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80224d8:	429a      	cmp	r2, r3
 80224da:	dd9d      	ble.n	8022418 <xnrm2_7bm34mDQ+0x60>
        }
      }

      y = scale * sqrt(y);
 80224dc:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80224e0:	f00c fb0a 	bl	802eaf8 <sqrt>
 80224e4:	ec53 2b10 	vmov	r2, r3, d0
 80224e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80224ec:	f7de f876 	bl	80005dc <__aeabi_dmul>
 80224f0:	4602      	mov	r2, r0
 80224f2:	460b      	mov	r3, r1
 80224f4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 80224f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80224fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8022500:	eeb0 0a47 	vmov.f32	s0, s14
 8022504:	eef0 0a67 	vmov.f32	s1, s15
 8022508:	3748      	adds	r7, #72	; 0x48
 802250a:	46bd      	mov	sp, r7
 802250c:	bd80      	pop	{r7, pc}
 802250e:	bf00      	nop
 8022510:	3ff00000 	.word	0x3ff00000

08022514 <xnrm2_Mnmxg9YT>:
#include "rtwtypes.h"
#include "xnrm2_Mnmxg9YT.h"
#include <math.h>

real_T xnrm2_Mnmxg9YT(int32_T n, const real_T x[2], int32_T ix0)
{
 8022514:	b580      	push	{r7, lr}
 8022516:	b092      	sub	sp, #72	; 0x48
 8022518:	af00      	add	r7, sp, #0
 802251a:	60f8      	str	r0, [r7, #12]
 802251c:	60b9      	str	r1, [r7, #8]
 802251e:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8022520:	f04f 0200 	mov.w	r2, #0
 8022524:	f04f 0300 	mov.w	r3, #0
 8022528:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 802252c:	68fb      	ldr	r3, [r7, #12]
 802252e:	2b00      	cmp	r3, #0
 8022530:	f340 8090 	ble.w	8022654 <xnrm2_Mnmxg9YT+0x140>
    if (n == 1) {
 8022534:	68fb      	ldr	r3, [r7, #12]
 8022536:	2b01      	cmp	r3, #1
 8022538:	d10e      	bne.n	8022558 <xnrm2_Mnmxg9YT+0x44>
      y = fabs(x[ix0 - 1]);
 802253a:	687b      	ldr	r3, [r7, #4]
 802253c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022540:	3b01      	subs	r3, #1
 8022542:	00db      	lsls	r3, r3, #3
 8022544:	68ba      	ldr	r2, [r7, #8]
 8022546:	4413      	add	r3, r2
 8022548:	e9d3 2300 	ldrd	r2, r3, [r3]
 802254c:	4611      	mov	r1, r2
 802254e:	6439      	str	r1, [r7, #64]	; 0x40
 8022550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022554:	647b      	str	r3, [r7, #68]	; 0x44
 8022556:	e07d      	b.n	8022654 <xnrm2_Mnmxg9YT+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 8022558:	f04f 0200 	mov.w	r2, #0
 802255c:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8022560:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8022564:	687a      	ldr	r2, [r7, #4]
 8022566:	68fb      	ldr	r3, [r7, #12]
 8022568:	4413      	add	r3, r2
 802256a:	3b01      	subs	r3, #1
 802256c:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 802256e:	687b      	ldr	r3, [r7, #4]
 8022570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022572:	e05d      	b.n	8022630 <xnrm2_Mnmxg9YT+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8022574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022576:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802257a:	3b01      	subs	r3, #1
 802257c:	00db      	lsls	r3, r3, #3
 802257e:	68ba      	ldr	r2, [r7, #8]
 8022580:	4413      	add	r3, r2
 8022582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022586:	4611      	mov	r1, r2
 8022588:	6239      	str	r1, [r7, #32]
 802258a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802258e:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8022590:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022594:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022598:	f7de fab0 	bl	8000afc <__aeabi_dcmpgt>
 802259c:	4603      	mov	r3, r0
 802259e:	2b00      	cmp	r3, #0
 80225a0:	d029      	beq.n	80225f6 <xnrm2_Mnmxg9YT+0xe2>
          real_T t;
          t = scale / absxk;
 80225a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80225a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80225aa:	f7de f941 	bl	8000830 <__aeabi_ddiv>
 80225ae:	4602      	mov	r2, r0
 80225b0:	460b      	mov	r3, r1
 80225b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 80225b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80225ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80225be:	f7de f80d 	bl	80005dc <__aeabi_dmul>
 80225c2:	4602      	mov	r2, r0
 80225c4:	460b      	mov	r3, r1
 80225c6:	4610      	mov	r0, r2
 80225c8:	4619      	mov	r1, r3
 80225ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80225ce:	f7de f805 	bl	80005dc <__aeabi_dmul>
 80225d2:	4602      	mov	r2, r0
 80225d4:	460b      	mov	r3, r1
 80225d6:	4610      	mov	r0, r2
 80225d8:	4619      	mov	r1, r3
 80225da:	f04f 0200 	mov.w	r2, #0
 80225de:	4b23      	ldr	r3, [pc, #140]	; (802266c <xnrm2_Mnmxg9YT+0x158>)
 80225e0:	f7dd fe46 	bl	8000270 <__adddf3>
 80225e4:	4602      	mov	r2, r0
 80225e6:	460b      	mov	r3, r1
 80225e8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 80225ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80225f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80225f4:	e019      	b.n	802262a <xnrm2_Mnmxg9YT+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 80225f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80225fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80225fe:	f7de f917 	bl	8000830 <__aeabi_ddiv>
 8022602:	4602      	mov	r2, r0
 8022604:	460b      	mov	r3, r1
 8022606:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 802260a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802260e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8022612:	f7dd ffe3 	bl	80005dc <__aeabi_dmul>
 8022616:	4602      	mov	r2, r0
 8022618:	460b      	mov	r3, r1
 802261a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 802261e:	f7dd fe27 	bl	8000270 <__adddf3>
 8022622:	4602      	mov	r2, r0
 8022624:	460b      	mov	r3, r1
 8022626:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 802262a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802262c:	3301      	adds	r3, #1
 802262e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022630:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8022632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022634:	429a      	cmp	r2, r3
 8022636:	dd9d      	ble.n	8022574 <xnrm2_Mnmxg9YT+0x60>
        }
      }

      y = scale * sqrt(y);
 8022638:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 802263c:	f00c fa5c 	bl	802eaf8 <sqrt>
 8022640:	ec53 2b10 	vmov	r2, r3, d0
 8022644:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022648:	f7dd ffc8 	bl	80005dc <__aeabi_dmul>
 802264c:	4602      	mov	r2, r0
 802264e:	460b      	mov	r3, r1
 8022650:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8022654:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8022658:	ec43 2b17 	vmov	d7, r2, r3
}
 802265c:	eeb0 0a47 	vmov.f32	s0, s14
 8022660:	eef0 0a67 	vmov.f32	s1, s15
 8022664:	3748      	adds	r7, #72	; 0x48
 8022666:	46bd      	mov	sp, r7
 8022668:	bd80      	pop	{r7, pc}
 802266a:	bf00      	nop
 802266c:	3ff00000 	.word	0x3ff00000

08022670 <xnrm2_Rlk0oxWw>:
#include "rtwtypes.h"
#include "xnrm2_Rlk0oxWw.h"
#include <math.h>

real_T xnrm2_Rlk0oxWw(int32_T n, const real_T x[3], int32_T ix0)
{
 8022670:	b580      	push	{r7, lr}
 8022672:	b092      	sub	sp, #72	; 0x48
 8022674:	af00      	add	r7, sp, #0
 8022676:	60f8      	str	r0, [r7, #12]
 8022678:	60b9      	str	r1, [r7, #8]
 802267a:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 802267c:	f04f 0200 	mov.w	r2, #0
 8022680:	f04f 0300 	mov.w	r3, #0
 8022684:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8022688:	68fb      	ldr	r3, [r7, #12]
 802268a:	2b00      	cmp	r3, #0
 802268c:	f340 8090 	ble.w	80227b0 <xnrm2_Rlk0oxWw+0x140>
    if (n == 1) {
 8022690:	68fb      	ldr	r3, [r7, #12]
 8022692:	2b01      	cmp	r3, #1
 8022694:	d10e      	bne.n	80226b4 <xnrm2_Rlk0oxWw+0x44>
      y = fabs(x[ix0 - 1]);
 8022696:	687b      	ldr	r3, [r7, #4]
 8022698:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802269c:	3b01      	subs	r3, #1
 802269e:	00db      	lsls	r3, r3, #3
 80226a0:	68ba      	ldr	r2, [r7, #8]
 80226a2:	4413      	add	r3, r2
 80226a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226a8:	4611      	mov	r1, r2
 80226aa:	6439      	str	r1, [r7, #64]	; 0x40
 80226ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80226b0:	647b      	str	r3, [r7, #68]	; 0x44
 80226b2:	e07d      	b.n	80227b0 <xnrm2_Rlk0oxWw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 80226b4:	f04f 0200 	mov.w	r2, #0
 80226b8:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80226bc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 80226c0:	687a      	ldr	r2, [r7, #4]
 80226c2:	68fb      	ldr	r3, [r7, #12]
 80226c4:	4413      	add	r3, r2
 80226c6:	3b01      	subs	r3, #1
 80226c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 80226ca:	687b      	ldr	r3, [r7, #4]
 80226cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80226ce:	e05d      	b.n	802278c <xnrm2_Rlk0oxWw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 80226d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80226d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80226d6:	3b01      	subs	r3, #1
 80226d8:	00db      	lsls	r3, r3, #3
 80226da:	68ba      	ldr	r2, [r7, #8]
 80226dc:	4413      	add	r3, r2
 80226de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226e2:	4611      	mov	r1, r2
 80226e4:	6239      	str	r1, [r7, #32]
 80226e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80226ea:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 80226ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80226f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80226f4:	f7de fa02 	bl	8000afc <__aeabi_dcmpgt>
 80226f8:	4603      	mov	r3, r0
 80226fa:	2b00      	cmp	r3, #0
 80226fc:	d029      	beq.n	8022752 <xnrm2_Rlk0oxWw+0xe2>
          real_T t;
          t = scale / absxk;
 80226fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022702:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022706:	f7de f893 	bl	8000830 <__aeabi_ddiv>
 802270a:	4602      	mov	r2, r0
 802270c:	460b      	mov	r3, r1
 802270e:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8022712:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022716:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 802271a:	f7dd ff5f 	bl	80005dc <__aeabi_dmul>
 802271e:	4602      	mov	r2, r0
 8022720:	460b      	mov	r3, r1
 8022722:	4610      	mov	r0, r2
 8022724:	4619      	mov	r1, r3
 8022726:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802272a:	f7dd ff57 	bl	80005dc <__aeabi_dmul>
 802272e:	4602      	mov	r2, r0
 8022730:	460b      	mov	r3, r1
 8022732:	4610      	mov	r0, r2
 8022734:	4619      	mov	r1, r3
 8022736:	f04f 0200 	mov.w	r2, #0
 802273a:	4b23      	ldr	r3, [pc, #140]	; (80227c8 <xnrm2_Rlk0oxWw+0x158>)
 802273c:	f7dd fd98 	bl	8000270 <__adddf3>
 8022740:	4602      	mov	r2, r0
 8022742:	460b      	mov	r3, r1
 8022744:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8022748:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802274c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8022750:	e019      	b.n	8022786 <xnrm2_Rlk0oxWw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8022752:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022756:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802275a:	f7de f869 	bl	8000830 <__aeabi_ddiv>
 802275e:	4602      	mov	r2, r0
 8022760:	460b      	mov	r3, r1
 8022762:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8022766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802276a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802276e:	f7dd ff35 	bl	80005dc <__aeabi_dmul>
 8022772:	4602      	mov	r2, r0
 8022774:	460b      	mov	r3, r1
 8022776:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 802277a:	f7dd fd79 	bl	8000270 <__adddf3>
 802277e:	4602      	mov	r2, r0
 8022780:	460b      	mov	r3, r1
 8022782:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8022786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022788:	3301      	adds	r3, #1
 802278a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802278c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022790:	429a      	cmp	r2, r3
 8022792:	dd9d      	ble.n	80226d0 <xnrm2_Rlk0oxWw+0x60>
        }
      }

      y = scale * sqrt(y);
 8022794:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8022798:	f00c f9ae 	bl	802eaf8 <sqrt>
 802279c:	ec53 2b10 	vmov	r2, r3, d0
 80227a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80227a4:	f7dd ff1a 	bl	80005dc <__aeabi_dmul>
 80227a8:	4602      	mov	r2, r0
 80227aa:	460b      	mov	r3, r1
 80227ac:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 80227b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80227b4:	ec43 2b17 	vmov	d7, r2, r3
}
 80227b8:	eeb0 0a47 	vmov.f32	s0, s14
 80227bc:	eef0 0a67 	vmov.f32	s1, s15
 80227c0:	3748      	adds	r7, #72	; 0x48
 80227c2:	46bd      	mov	sp, r7
 80227c4:	bd80      	pop	{r7, pc}
 80227c6:	bf00      	nop
 80227c8:	3ff00000 	.word	0x3ff00000

080227cc <xnrm2_nLdASVZH>:
#include "rtwtypes.h"
#include "xnrm2_nLdASVZH.h"
#include <math.h>

real_T xnrm2_nLdASVZH(int32_T n, const real_T x[18], int32_T ix0)
{
 80227cc:	b580      	push	{r7, lr}
 80227ce:	b092      	sub	sp, #72	; 0x48
 80227d0:	af00      	add	r7, sp, #0
 80227d2:	60f8      	str	r0, [r7, #12]
 80227d4:	60b9      	str	r1, [r7, #8]
 80227d6:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 80227d8:	f04f 0200 	mov.w	r2, #0
 80227dc:	f04f 0300 	mov.w	r3, #0
 80227e0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 80227e4:	68fb      	ldr	r3, [r7, #12]
 80227e6:	2b00      	cmp	r3, #0
 80227e8:	f340 8090 	ble.w	802290c <xnrm2_nLdASVZH+0x140>
    if (n == 1) {
 80227ec:	68fb      	ldr	r3, [r7, #12]
 80227ee:	2b01      	cmp	r3, #1
 80227f0:	d10e      	bne.n	8022810 <xnrm2_nLdASVZH+0x44>
      y = fabs(x[ix0 - 1]);
 80227f2:	687b      	ldr	r3, [r7, #4]
 80227f4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80227f8:	3b01      	subs	r3, #1
 80227fa:	00db      	lsls	r3, r3, #3
 80227fc:	68ba      	ldr	r2, [r7, #8]
 80227fe:	4413      	add	r3, r2
 8022800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022804:	4611      	mov	r1, r2
 8022806:	6439      	str	r1, [r7, #64]	; 0x40
 8022808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802280c:	647b      	str	r3, [r7, #68]	; 0x44
 802280e:	e07d      	b.n	802290c <xnrm2_nLdASVZH+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 8022810:	f04f 0200 	mov.w	r2, #0
 8022814:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8022818:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 802281c:	687a      	ldr	r2, [r7, #4]
 802281e:	68fb      	ldr	r3, [r7, #12]
 8022820:	4413      	add	r3, r2
 8022822:	3b01      	subs	r3, #1
 8022824:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 8022826:	687b      	ldr	r3, [r7, #4]
 8022828:	63fb      	str	r3, [r7, #60]	; 0x3c
 802282a:	e05d      	b.n	80228e8 <xnrm2_nLdASVZH+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 802282c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802282e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022832:	3b01      	subs	r3, #1
 8022834:	00db      	lsls	r3, r3, #3
 8022836:	68ba      	ldr	r2, [r7, #8]
 8022838:	4413      	add	r3, r2
 802283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802283e:	4611      	mov	r1, r2
 8022840:	6239      	str	r1, [r7, #32]
 8022842:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022846:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8022848:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 802284c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022850:	f7de f954 	bl	8000afc <__aeabi_dcmpgt>
 8022854:	4603      	mov	r3, r0
 8022856:	2b00      	cmp	r3, #0
 8022858:	d029      	beq.n	80228ae <xnrm2_nLdASVZH+0xe2>
          real_T t;
          t = scale / absxk;
 802285a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802285e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022862:	f7dd ffe5 	bl	8000830 <__aeabi_ddiv>
 8022866:	4602      	mov	r2, r0
 8022868:	460b      	mov	r3, r1
 802286a:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 802286e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022872:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8022876:	f7dd feb1 	bl	80005dc <__aeabi_dmul>
 802287a:	4602      	mov	r2, r0
 802287c:	460b      	mov	r3, r1
 802287e:	4610      	mov	r0, r2
 8022880:	4619      	mov	r1, r3
 8022882:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022886:	f7dd fea9 	bl	80005dc <__aeabi_dmul>
 802288a:	4602      	mov	r2, r0
 802288c:	460b      	mov	r3, r1
 802288e:	4610      	mov	r0, r2
 8022890:	4619      	mov	r1, r3
 8022892:	f04f 0200 	mov.w	r2, #0
 8022896:	4b23      	ldr	r3, [pc, #140]	; (8022924 <xnrm2_nLdASVZH+0x158>)
 8022898:	f7dd fcea 	bl	8000270 <__adddf3>
 802289c:	4602      	mov	r2, r0
 802289e:	460b      	mov	r3, r1
 80228a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 80228a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80228a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80228ac:	e019      	b.n	80228e2 <xnrm2_nLdASVZH+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 80228ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80228b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80228b6:	f7dd ffbb 	bl	8000830 <__aeabi_ddiv>
 80228ba:	4602      	mov	r2, r0
 80228bc:	460b      	mov	r3, r1
 80228be:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 80228c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80228c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80228ca:	f7dd fe87 	bl	80005dc <__aeabi_dmul>
 80228ce:	4602      	mov	r2, r0
 80228d0:	460b      	mov	r3, r1
 80228d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80228d6:	f7dd fccb 	bl	8000270 <__adddf3>
 80228da:	4602      	mov	r2, r0
 80228dc:	460b      	mov	r3, r1
 80228de:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 80228e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80228e4:	3301      	adds	r3, #1
 80228e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80228e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80228ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80228ec:	429a      	cmp	r2, r3
 80228ee:	dd9d      	ble.n	802282c <xnrm2_nLdASVZH+0x60>
        }
      }

      y = scale * sqrt(y);
 80228f0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80228f4:	f00c f900 	bl	802eaf8 <sqrt>
 80228f8:	ec53 2b10 	vmov	r2, r3, d0
 80228fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022900:	f7dd fe6c 	bl	80005dc <__aeabi_dmul>
 8022904:	4602      	mov	r2, r0
 8022906:	460b      	mov	r3, r1
 8022908:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 802290c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8022910:	ec43 2b17 	vmov	d7, r2, r3
}
 8022914:	eeb0 0a47 	vmov.f32	s0, s14
 8022918:	eef0 0a67 	vmov.f32	s1, s15
 802291c:	3748      	adds	r7, #72	; 0x48
 802291e:	46bd      	mov	sp, r7
 8022920:	bd80      	pop	{r7, pc}
 8022922:	bf00      	nop
 8022924:	3ff00000 	.word	0x3ff00000

08022928 <xnrm2_xDOlDEtw>:
#include "rtwtypes.h"
#include "xnrm2_xDOlDEtw.h"
#include <math.h>

real_T xnrm2_xDOlDEtw(int32_T n, const real_T x[9], int32_T ix0)
{
 8022928:	b580      	push	{r7, lr}
 802292a:	b092      	sub	sp, #72	; 0x48
 802292c:	af00      	add	r7, sp, #0
 802292e:	60f8      	str	r0, [r7, #12]
 8022930:	60b9      	str	r1, [r7, #8]
 8022932:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8022934:	f04f 0200 	mov.w	r2, #0
 8022938:	f04f 0300 	mov.w	r3, #0
 802293c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8022940:	68fb      	ldr	r3, [r7, #12]
 8022942:	2b00      	cmp	r3, #0
 8022944:	f340 8090 	ble.w	8022a68 <xnrm2_xDOlDEtw+0x140>
    if (n == 1) {
 8022948:	68fb      	ldr	r3, [r7, #12]
 802294a:	2b01      	cmp	r3, #1
 802294c:	d10e      	bne.n	802296c <xnrm2_xDOlDEtw+0x44>
      y = fabs(x[ix0 - 1]);
 802294e:	687b      	ldr	r3, [r7, #4]
 8022950:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022954:	3b01      	subs	r3, #1
 8022956:	00db      	lsls	r3, r3, #3
 8022958:	68ba      	ldr	r2, [r7, #8]
 802295a:	4413      	add	r3, r2
 802295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022960:	4611      	mov	r1, r2
 8022962:	6439      	str	r1, [r7, #64]	; 0x40
 8022964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022968:	647b      	str	r3, [r7, #68]	; 0x44
 802296a:	e07d      	b.n	8022a68 <xnrm2_xDOlDEtw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 802296c:	f04f 0200 	mov.w	r2, #0
 8022970:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8022974:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8022978:	687a      	ldr	r2, [r7, #4]
 802297a:	68fb      	ldr	r3, [r7, #12]
 802297c:	4413      	add	r3, r2
 802297e:	3b01      	subs	r3, #1
 8022980:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 8022982:	687b      	ldr	r3, [r7, #4]
 8022984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022986:	e05d      	b.n	8022a44 <xnrm2_xDOlDEtw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8022988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802298a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802298e:	3b01      	subs	r3, #1
 8022990:	00db      	lsls	r3, r3, #3
 8022992:	68ba      	ldr	r2, [r7, #8]
 8022994:	4413      	add	r3, r2
 8022996:	e9d3 2300 	ldrd	r2, r3, [r3]
 802299a:	4611      	mov	r1, r2
 802299c:	6239      	str	r1, [r7, #32]
 802299e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80229a2:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 80229a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80229a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80229ac:	f7de f8a6 	bl	8000afc <__aeabi_dcmpgt>
 80229b0:	4603      	mov	r3, r0
 80229b2:	2b00      	cmp	r3, #0
 80229b4:	d029      	beq.n	8022a0a <xnrm2_xDOlDEtw+0xe2>
          real_T t;
          t = scale / absxk;
 80229b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80229ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80229be:	f7dd ff37 	bl	8000830 <__aeabi_ddiv>
 80229c2:	4602      	mov	r2, r0
 80229c4:	460b      	mov	r3, r1
 80229c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 80229ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80229ce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80229d2:	f7dd fe03 	bl	80005dc <__aeabi_dmul>
 80229d6:	4602      	mov	r2, r0
 80229d8:	460b      	mov	r3, r1
 80229da:	4610      	mov	r0, r2
 80229dc:	4619      	mov	r1, r3
 80229de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80229e2:	f7dd fdfb 	bl	80005dc <__aeabi_dmul>
 80229e6:	4602      	mov	r2, r0
 80229e8:	460b      	mov	r3, r1
 80229ea:	4610      	mov	r0, r2
 80229ec:	4619      	mov	r1, r3
 80229ee:	f04f 0200 	mov.w	r2, #0
 80229f2:	4b23      	ldr	r3, [pc, #140]	; (8022a80 <xnrm2_xDOlDEtw+0x158>)
 80229f4:	f7dd fc3c 	bl	8000270 <__adddf3>
 80229f8:	4602      	mov	r2, r0
 80229fa:	460b      	mov	r3, r1
 80229fc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8022a00:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022a04:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8022a08:	e019      	b.n	8022a3e <xnrm2_xDOlDEtw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8022a0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022a0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022a12:	f7dd ff0d 	bl	8000830 <__aeabi_ddiv>
 8022a16:	4602      	mov	r2, r0
 8022a18:	460b      	mov	r3, r1
 8022a1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8022a1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022a22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8022a26:	f7dd fdd9 	bl	80005dc <__aeabi_dmul>
 8022a2a:	4602      	mov	r2, r0
 8022a2c:	460b      	mov	r3, r1
 8022a2e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8022a32:	f7dd fc1d 	bl	8000270 <__adddf3>
 8022a36:	4602      	mov	r2, r0
 8022a38:	460b      	mov	r3, r1
 8022a3a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8022a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022a40:	3301      	adds	r3, #1
 8022a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8022a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022a48:	429a      	cmp	r2, r3
 8022a4a:	dd9d      	ble.n	8022988 <xnrm2_xDOlDEtw+0x60>
        }
      }

      y = scale * sqrt(y);
 8022a4c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8022a50:	f00c f852 	bl	802eaf8 <sqrt>
 8022a54:	ec53 2b10 	vmov	r2, r3, d0
 8022a58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022a5c:	f7dd fdbe 	bl	80005dc <__aeabi_dmul>
 8022a60:	4602      	mov	r2, r0
 8022a62:	460b      	mov	r3, r1
 8022a64:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8022a68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8022a6c:	ec43 2b17 	vmov	d7, r2, r3
}
 8022a70:	eeb0 0a47 	vmov.f32	s0, s14
 8022a74:	eef0 0a67 	vmov.f32	s1, s15
 8022a78:	3748      	adds	r7, #72	; 0x48
 8022a7a:	46bd      	mov	sp, r7
 8022a7c:	bd80      	pop	{r7, pc}
 8022a7e:	bf00      	nop
 8022a80:	3ff00000 	.word	0x3ff00000

08022a84 <xrot_i7f01JoJ>:
#include "rtwtypes.h"
#include "xrot_i7f01JoJ.h"

void xrot_i7f01JoJ(real_T x[9], int32_T ix0, int32_T iy0, real_T c, real_T s)
{
 8022a84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8022a88:	b08c      	sub	sp, #48	; 0x30
 8022a8a:	af00      	add	r7, sp, #0
 8022a8c:	61f8      	str	r0, [r7, #28]
 8022a8e:	61b9      	str	r1, [r7, #24]
 8022a90:	617a      	str	r2, [r7, #20]
 8022a92:	ed87 0b02 	vstr	d0, [r7, #8]
 8022a96:	ed87 1b00 	vstr	d1, [r7]
  real_T temp;
  real_T temp_tmp;
  temp = x[iy0 - 1];
 8022a9a:	697b      	ldr	r3, [r7, #20]
 8022a9c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022aa0:	3b01      	subs	r3, #1
 8022aa2:	00db      	lsls	r3, r3, #3
 8022aa4:	69fa      	ldr	r2, [r7, #28]
 8022aa6:	4413      	add	r3, r2
 8022aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022aac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 - 1];
 8022ab0:	69bb      	ldr	r3, [r7, #24]
 8022ab2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022ab6:	3b01      	subs	r3, #1
 8022ab8:	00db      	lsls	r3, r3, #3
 8022aba:	69fa      	ldr	r2, [r7, #28]
 8022abc:	4413      	add	r3, r2
 8022abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ac2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 - 1] = temp * c - temp_tmp * s;
 8022ac6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022aca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022ace:	f7dd fd85 	bl	80005dc <__aeabi_dmul>
 8022ad2:	4602      	mov	r2, r0
 8022ad4:	460b      	mov	r3, r1
 8022ad6:	4690      	mov	r8, r2
 8022ad8:	4699      	mov	r9, r3
 8022ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022ade:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022ae2:	f7dd fd7b 	bl	80005dc <__aeabi_dmul>
 8022ae6:	4602      	mov	r2, r0
 8022ae8:	460b      	mov	r3, r1
 8022aea:	4610      	mov	r0, r2
 8022aec:	4619      	mov	r1, r3
 8022aee:	697b      	ldr	r3, [r7, #20]
 8022af0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022af4:	3b01      	subs	r3, #1
 8022af6:	00db      	lsls	r3, r3, #3
 8022af8:	69fa      	ldr	r2, [r7, #28]
 8022afa:	18d4      	adds	r4, r2, r3
 8022afc:	4602      	mov	r2, r0
 8022afe:	460b      	mov	r3, r1
 8022b00:	4640      	mov	r0, r8
 8022b02:	4649      	mov	r1, r9
 8022b04:	f7dd fbb2 	bl	800026c <__aeabi_dsub>
 8022b08:	4602      	mov	r2, r0
 8022b0a:	460b      	mov	r3, r1
 8022b0c:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 - 1] = temp_tmp * c + temp * s;
 8022b10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022b14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022b18:	f7dd fd60 	bl	80005dc <__aeabi_dmul>
 8022b1c:	4602      	mov	r2, r0
 8022b1e:	460b      	mov	r3, r1
 8022b20:	4690      	mov	r8, r2
 8022b22:	4699      	mov	r9, r3
 8022b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022b28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022b2c:	f7dd fd56 	bl	80005dc <__aeabi_dmul>
 8022b30:	4602      	mov	r2, r0
 8022b32:	460b      	mov	r3, r1
 8022b34:	4610      	mov	r0, r2
 8022b36:	4619      	mov	r1, r3
 8022b38:	69bb      	ldr	r3, [r7, #24]
 8022b3a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022b3e:	3b01      	subs	r3, #1
 8022b40:	00db      	lsls	r3, r3, #3
 8022b42:	69fa      	ldr	r2, [r7, #28]
 8022b44:	18d4      	adds	r4, r2, r3
 8022b46:	4602      	mov	r2, r0
 8022b48:	460b      	mov	r3, r1
 8022b4a:	4640      	mov	r0, r8
 8022b4c:	4649      	mov	r1, r9
 8022b4e:	f7dd fb8f 	bl	8000270 <__adddf3>
 8022b52:	4602      	mov	r2, r0
 8022b54:	460b      	mov	r3, r1
 8022b56:	e9c4 2300 	strd	r2, r3, [r4]
  temp = x[ix0] * c + x[iy0] * s;
 8022b5a:	69bb      	ldr	r3, [r7, #24]
 8022b5c:	00db      	lsls	r3, r3, #3
 8022b5e:	69fa      	ldr	r2, [r7, #28]
 8022b60:	4413      	add	r3, r2
 8022b62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022b66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022b6a:	f7dd fd37 	bl	80005dc <__aeabi_dmul>
 8022b6e:	4602      	mov	r2, r0
 8022b70:	460b      	mov	r3, r1
 8022b72:	4614      	mov	r4, r2
 8022b74:	461d      	mov	r5, r3
 8022b76:	697b      	ldr	r3, [r7, #20]
 8022b78:	00db      	lsls	r3, r3, #3
 8022b7a:	69fa      	ldr	r2, [r7, #28]
 8022b7c:	4413      	add	r3, r2
 8022b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022b86:	f7dd fd29 	bl	80005dc <__aeabi_dmul>
 8022b8a:	4602      	mov	r2, r0
 8022b8c:	460b      	mov	r3, r1
 8022b8e:	4620      	mov	r0, r4
 8022b90:	4629      	mov	r1, r5
 8022b92:	f7dd fb6d 	bl	8000270 <__adddf3>
 8022b96:	4602      	mov	r2, r0
 8022b98:	460b      	mov	r3, r1
 8022b9a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  x[iy0] = x[iy0] * c - x[ix0] * s;
 8022b9e:	697b      	ldr	r3, [r7, #20]
 8022ba0:	00db      	lsls	r3, r3, #3
 8022ba2:	69fa      	ldr	r2, [r7, #28]
 8022ba4:	4413      	add	r3, r2
 8022ba6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022baa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022bae:	f7dd fd15 	bl	80005dc <__aeabi_dmul>
 8022bb2:	4602      	mov	r2, r0
 8022bb4:	460b      	mov	r3, r1
 8022bb6:	4690      	mov	r8, r2
 8022bb8:	4699      	mov	r9, r3
 8022bba:	69bb      	ldr	r3, [r7, #24]
 8022bbc:	00db      	lsls	r3, r3, #3
 8022bbe:	69fa      	ldr	r2, [r7, #28]
 8022bc0:	4413      	add	r3, r2
 8022bc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022bca:	f7dd fd07 	bl	80005dc <__aeabi_dmul>
 8022bce:	4602      	mov	r2, r0
 8022bd0:	460b      	mov	r3, r1
 8022bd2:	4610      	mov	r0, r2
 8022bd4:	4619      	mov	r1, r3
 8022bd6:	697b      	ldr	r3, [r7, #20]
 8022bd8:	00db      	lsls	r3, r3, #3
 8022bda:	69fa      	ldr	r2, [r7, #28]
 8022bdc:	18d4      	adds	r4, r2, r3
 8022bde:	4602      	mov	r2, r0
 8022be0:	460b      	mov	r3, r1
 8022be2:	4640      	mov	r0, r8
 8022be4:	4649      	mov	r1, r9
 8022be6:	f7dd fb41 	bl	800026c <__aeabi_dsub>
 8022bea:	4602      	mov	r2, r0
 8022bec:	460b      	mov	r3, r1
 8022bee:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0] = temp;
 8022bf2:	69bb      	ldr	r3, [r7, #24]
 8022bf4:	00db      	lsls	r3, r3, #3
 8022bf6:	69fa      	ldr	r2, [r7, #28]
 8022bf8:	18d1      	adds	r1, r2, r3
 8022bfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8022bfe:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[iy0 + 1];
 8022c02:	697b      	ldr	r3, [r7, #20]
 8022c04:	3301      	adds	r3, #1
 8022c06:	00db      	lsls	r3, r3, #3
 8022c08:	69fa      	ldr	r2, [r7, #28]
 8022c0a:	4413      	add	r3, r2
 8022c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c10:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 + 1];
 8022c14:	69bb      	ldr	r3, [r7, #24]
 8022c16:	3301      	adds	r3, #1
 8022c18:	00db      	lsls	r3, r3, #3
 8022c1a:	69fa      	ldr	r2, [r7, #28]
 8022c1c:	4413      	add	r3, r2
 8022c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c22:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 + 1] = temp * c - temp_tmp * s;
 8022c26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022c2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022c2e:	f7dd fcd5 	bl	80005dc <__aeabi_dmul>
 8022c32:	4602      	mov	r2, r0
 8022c34:	460b      	mov	r3, r1
 8022c36:	4690      	mov	r8, r2
 8022c38:	4699      	mov	r9, r3
 8022c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022c3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022c42:	f7dd fccb 	bl	80005dc <__aeabi_dmul>
 8022c46:	4602      	mov	r2, r0
 8022c48:	460b      	mov	r3, r1
 8022c4a:	4610      	mov	r0, r2
 8022c4c:	4619      	mov	r1, r3
 8022c4e:	697b      	ldr	r3, [r7, #20]
 8022c50:	3301      	adds	r3, #1
 8022c52:	00db      	lsls	r3, r3, #3
 8022c54:	69fa      	ldr	r2, [r7, #28]
 8022c56:	18d4      	adds	r4, r2, r3
 8022c58:	4602      	mov	r2, r0
 8022c5a:	460b      	mov	r3, r1
 8022c5c:	4640      	mov	r0, r8
 8022c5e:	4649      	mov	r1, r9
 8022c60:	f7dd fb04 	bl	800026c <__aeabi_dsub>
 8022c64:	4602      	mov	r2, r0
 8022c66:	460b      	mov	r3, r1
 8022c68:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 + 1] = temp_tmp * c + temp * s;
 8022c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022c70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022c74:	f7dd fcb2 	bl	80005dc <__aeabi_dmul>
 8022c78:	4602      	mov	r2, r0
 8022c7a:	460b      	mov	r3, r1
 8022c7c:	4690      	mov	r8, r2
 8022c7e:	4699      	mov	r9, r3
 8022c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022c84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022c88:	f7dd fca8 	bl	80005dc <__aeabi_dmul>
 8022c8c:	4602      	mov	r2, r0
 8022c8e:	460b      	mov	r3, r1
 8022c90:	4610      	mov	r0, r2
 8022c92:	4619      	mov	r1, r3
 8022c94:	69bb      	ldr	r3, [r7, #24]
 8022c96:	3301      	adds	r3, #1
 8022c98:	00db      	lsls	r3, r3, #3
 8022c9a:	69fa      	ldr	r2, [r7, #28]
 8022c9c:	18d4      	adds	r4, r2, r3
 8022c9e:	4602      	mov	r2, r0
 8022ca0:	460b      	mov	r3, r1
 8022ca2:	4640      	mov	r0, r8
 8022ca4:	4649      	mov	r1, r9
 8022ca6:	f7dd fae3 	bl	8000270 <__adddf3>
 8022caa:	4602      	mov	r2, r0
 8022cac:	460b      	mov	r3, r1
 8022cae:	e9c4 2300 	strd	r2, r3, [r4]
}
 8022cb2:	bf00      	nop
 8022cb4:	3730      	adds	r7, #48	; 0x30
 8022cb6:	46bd      	mov	sp, r7
 8022cb8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08022cbc <xrotg_XzIjz1eG>:
#include "rtwtypes.h"
#include "xrotg_XzIjz1eG.h"
#include <math.h>

void xrotg_XzIjz1eG(real_T *a, real_T *b, real_T *c, real_T *s)
{
 8022cbc:	b5b0      	push	{r4, r5, r7, lr}
 8022cbe:	b090      	sub	sp, #64	; 0x40
 8022cc0:	af00      	add	r7, sp, #0
 8022cc2:	60f8      	str	r0, [r7, #12]
 8022cc4:	60b9      	str	r1, [r7, #8]
 8022cc6:	607a      	str	r2, [r7, #4]
 8022cc8:	603b      	str	r3, [r7, #0]
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
 8022cca:	68bb      	ldr	r3, [r7, #8]
 8022ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cd0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  absa = fabs(*a);
 8022cd4:	68fb      	ldr	r3, [r7, #12]
 8022cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cda:	4611      	mov	r1, r2
 8022cdc:	62b9      	str	r1, [r7, #40]	; 0x28
 8022cde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  absb = fabs(*b);
 8022ce4:	68bb      	ldr	r3, [r7, #8]
 8022ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cea:	4611      	mov	r1, r2
 8022cec:	6239      	str	r1, [r7, #32]
 8022cee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022cf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (absa > absb) {
 8022cf4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022cf8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022cfc:	f7dd fefe 	bl	8000afc <__aeabi_dcmpgt>
 8022d00:	4603      	mov	r3, r0
 8022d02:	2b00      	cmp	r3, #0
 8022d04:	d004      	beq.n	8022d10 <xrotg_XzIjz1eG+0x54>
    roe = *a;
 8022d06:	68fb      	ldr	r3, [r7, #12]
 8022d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d0c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  scale = absa + absb;
 8022d10:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022d14:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022d18:	f7dd faaa 	bl	8000270 <__adddf3>
 8022d1c:	4602      	mov	r2, r0
 8022d1e:	460b      	mov	r3, r1
 8022d20:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  if (scale == 0.0) {
 8022d24:	f04f 0200 	mov.w	r2, #0
 8022d28:	f04f 0300 	mov.w	r3, #0
 8022d2c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022d30:	f7dd febc 	bl	8000aac <__aeabi_dcmpeq>
 8022d34:	4603      	mov	r3, r0
 8022d36:	2b00      	cmp	r3, #0
 8022d38:	d01b      	beq.n	8022d72 <xrotg_XzIjz1eG+0xb6>
    *s = 0.0;
 8022d3a:	6839      	ldr	r1, [r7, #0]
 8022d3c:	f04f 0200 	mov.w	r2, #0
 8022d40:	f04f 0300 	mov.w	r3, #0
 8022d44:	e9c1 2300 	strd	r2, r3, [r1]
    *c = 1.0;
 8022d48:	6879      	ldr	r1, [r7, #4]
 8022d4a:	f04f 0200 	mov.w	r2, #0
 8022d4e:	4b59      	ldr	r3, [pc, #356]	; (8022eb4 <xrotg_XzIjz1eG+0x1f8>)
 8022d50:	e9c1 2300 	strd	r2, r3, [r1]
    *a = 0.0;
 8022d54:	68f9      	ldr	r1, [r7, #12]
 8022d56:	f04f 0200 	mov.w	r2, #0
 8022d5a:	f04f 0300 	mov.w	r3, #0
 8022d5e:	e9c1 2300 	strd	r2, r3, [r1]
    *b = 0.0;
 8022d62:	68b9      	ldr	r1, [r7, #8]
 8022d64:	f04f 0200 	mov.w	r2, #0
 8022d68:	f04f 0300 	mov.w	r3, #0
 8022d6c:	e9c1 2300 	strd	r2, r3, [r1]
      *b = 1.0;
    }

    *a = scale;
  }
}
 8022d70:	e09b      	b.n	8022eaa <xrotg_XzIjz1eG+0x1ee>
    ads = absa / scale;
 8022d72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022d76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022d7a:	f7dd fd59 	bl	8000830 <__aeabi_ddiv>
 8022d7e:	4602      	mov	r2, r0
 8022d80:	460b      	mov	r3, r1
 8022d82:	e9c7 2306 	strd	r2, r3, [r7, #24]
    bds = absb / scale;
 8022d86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022d8a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022d8e:	f7dd fd4f 	bl	8000830 <__aeabi_ddiv>
 8022d92:	4602      	mov	r2, r0
 8022d94:	460b      	mov	r3, r1
 8022d96:	e9c7 2304 	strd	r2, r3, [r7, #16]
    scale *= sqrt(ads * ads + bds * bds);
 8022d9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022d9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8022da2:	f7dd fc1b 	bl	80005dc <__aeabi_dmul>
 8022da6:	4602      	mov	r2, r0
 8022da8:	460b      	mov	r3, r1
 8022daa:	4614      	mov	r4, r2
 8022dac:	461d      	mov	r5, r3
 8022dae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022db2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8022db6:	f7dd fc11 	bl	80005dc <__aeabi_dmul>
 8022dba:	4602      	mov	r2, r0
 8022dbc:	460b      	mov	r3, r1
 8022dbe:	4620      	mov	r0, r4
 8022dc0:	4629      	mov	r1, r5
 8022dc2:	f7dd fa55 	bl	8000270 <__adddf3>
 8022dc6:	4602      	mov	r2, r0
 8022dc8:	460b      	mov	r3, r1
 8022dca:	ec43 2b17 	vmov	d7, r2, r3
 8022dce:	eeb0 0a47 	vmov.f32	s0, s14
 8022dd2:	eef0 0a67 	vmov.f32	s1, s15
 8022dd6:	f00b fe8f 	bl	802eaf8 <sqrt>
 8022dda:	ec53 2b10 	vmov	r2, r3, d0
 8022dde:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022de2:	f7dd fbfb 	bl	80005dc <__aeabi_dmul>
 8022de6:	4602      	mov	r2, r0
 8022de8:	460b      	mov	r3, r1
 8022dea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (roe < 0.0) {
 8022dee:	f04f 0200 	mov.w	r2, #0
 8022df2:	f04f 0300 	mov.w	r3, #0
 8022df6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8022dfa:	f7dd fe61 	bl	8000ac0 <__aeabi_dcmplt>
 8022dfe:	4603      	mov	r3, r0
 8022e00:	2b00      	cmp	r3, #0
 8022e02:	d005      	beq.n	8022e10 <xrotg_XzIjz1eG+0x154>
      scale = -scale;
 8022e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022e06:	633b      	str	r3, [r7, #48]	; 0x30
 8022e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022e0a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8022e0e:	637b      	str	r3, [r7, #52]	; 0x34
    *c = *a / scale;
 8022e10:	68fb      	ldr	r3, [r7, #12]
 8022e12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022e16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022e1a:	f7dd fd09 	bl	8000830 <__aeabi_ddiv>
 8022e1e:	4602      	mov	r2, r0
 8022e20:	460b      	mov	r3, r1
 8022e22:	6879      	ldr	r1, [r7, #4]
 8022e24:	e9c1 2300 	strd	r2, r3, [r1]
    *s = *b / scale;
 8022e28:	68bb      	ldr	r3, [r7, #8]
 8022e2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022e2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022e32:	f7dd fcfd 	bl	8000830 <__aeabi_ddiv>
 8022e36:	4602      	mov	r2, r0
 8022e38:	460b      	mov	r3, r1
 8022e3a:	6839      	ldr	r1, [r7, #0]
 8022e3c:	e9c1 2300 	strd	r2, r3, [r1]
    if (absa > absb) {
 8022e40:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022e44:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022e48:	f7dd fe58 	bl	8000afc <__aeabi_dcmpgt>
 8022e4c:	4603      	mov	r3, r0
 8022e4e:	2b00      	cmp	r3, #0
 8022e50:	d006      	beq.n	8022e60 <xrotg_XzIjz1eG+0x1a4>
      *b = *s;
 8022e52:	683b      	ldr	r3, [r7, #0]
 8022e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e58:	68b9      	ldr	r1, [r7, #8]
 8022e5a:	e9c1 2300 	strd	r2, r3, [r1]
 8022e5e:	e01f      	b.n	8022ea0 <xrotg_XzIjz1eG+0x1e4>
    } else if (*c != 0.0) {
 8022e60:	687b      	ldr	r3, [r7, #4]
 8022e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022e66:	f04f 0200 	mov.w	r2, #0
 8022e6a:	f04f 0300 	mov.w	r3, #0
 8022e6e:	f7dd fe1d 	bl	8000aac <__aeabi_dcmpeq>
 8022e72:	4603      	mov	r3, r0
 8022e74:	2b00      	cmp	r3, #0
 8022e76:	d10d      	bne.n	8022e94 <xrotg_XzIjz1eG+0x1d8>
      *b = 1.0 / *c;
 8022e78:	687b      	ldr	r3, [r7, #4]
 8022e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e7e:	f04f 0000 	mov.w	r0, #0
 8022e82:	490c      	ldr	r1, [pc, #48]	; (8022eb4 <xrotg_XzIjz1eG+0x1f8>)
 8022e84:	f7dd fcd4 	bl	8000830 <__aeabi_ddiv>
 8022e88:	4602      	mov	r2, r0
 8022e8a:	460b      	mov	r3, r1
 8022e8c:	68b9      	ldr	r1, [r7, #8]
 8022e8e:	e9c1 2300 	strd	r2, r3, [r1]
 8022e92:	e005      	b.n	8022ea0 <xrotg_XzIjz1eG+0x1e4>
      *b = 1.0;
 8022e94:	68b9      	ldr	r1, [r7, #8]
 8022e96:	f04f 0200 	mov.w	r2, #0
 8022e9a:	4b06      	ldr	r3, [pc, #24]	; (8022eb4 <xrotg_XzIjz1eG+0x1f8>)
 8022e9c:	e9c1 2300 	strd	r2, r3, [r1]
    *a = scale;
 8022ea0:	68f9      	ldr	r1, [r7, #12]
 8022ea2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022ea6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8022eaa:	bf00      	nop
 8022eac:	3740      	adds	r7, #64	; 0x40
 8022eae:	46bd      	mov	sp, r7
 8022eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8022eb2:	bf00      	nop
 8022eb4:	3ff00000 	.word	0x3ff00000

08022eb8 <xscal_59GtRAwv>:
#include "rtwtypes.h"
#include "xscal_59GtRAwv.h"

void xscal_59GtRAwv(int32_T n, real_T a, real_T x[9], int32_T ix0)
{
 8022eb8:	b590      	push	{r4, r7, lr}
 8022eba:	b089      	sub	sp, #36	; 0x24
 8022ebc:	af00      	add	r7, sp, #0
 8022ebe:	6178      	str	r0, [r7, #20]
 8022ec0:	ed87 0b02 	vstr	d0, [r7, #8]
 8022ec4:	6139      	str	r1, [r7, #16]
 8022ec6:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 8022ec8:	687a      	ldr	r2, [r7, #4]
 8022eca:	697b      	ldr	r3, [r7, #20]
 8022ecc:	4413      	add	r3, r2
 8022ece:	3b01      	subs	r3, #1
 8022ed0:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 8022ed2:	687b      	ldr	r3, [r7, #4]
 8022ed4:	61fb      	str	r3, [r7, #28]
 8022ed6:	e01a      	b.n	8022f0e <xscal_59GtRAwv+0x56>
    x[k - 1] *= a;
 8022ed8:	69fb      	ldr	r3, [r7, #28]
 8022eda:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022ede:	3b01      	subs	r3, #1
 8022ee0:	00db      	lsls	r3, r3, #3
 8022ee2:	693a      	ldr	r2, [r7, #16]
 8022ee4:	4413      	add	r3, r2
 8022ee6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022eea:	69fb      	ldr	r3, [r7, #28]
 8022eec:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022ef0:	3b01      	subs	r3, #1
 8022ef2:	00db      	lsls	r3, r3, #3
 8022ef4:	693a      	ldr	r2, [r7, #16]
 8022ef6:	18d4      	adds	r4, r2, r3
 8022ef8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022efc:	f7dd fb6e 	bl	80005dc <__aeabi_dmul>
 8022f00:	4602      	mov	r2, r0
 8022f02:	460b      	mov	r3, r1
 8022f04:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 8022f08:	69fb      	ldr	r3, [r7, #28]
 8022f0a:	3301      	adds	r3, #1
 8022f0c:	61fb      	str	r3, [r7, #28]
 8022f0e:	69fa      	ldr	r2, [r7, #28]
 8022f10:	69bb      	ldr	r3, [r7, #24]
 8022f12:	429a      	cmp	r2, r3
 8022f14:	dde0      	ble.n	8022ed8 <xscal_59GtRAwv+0x20>
  }
}
 8022f16:	bf00      	nop
 8022f18:	bf00      	nop
 8022f1a:	3724      	adds	r7, #36	; 0x24
 8022f1c:	46bd      	mov	sp, r7
 8022f1e:	bd90      	pop	{r4, r7, pc}

08022f20 <xscal_PLmmUlD2>:
#include "rtwtypes.h"
#include "xscal_PLmmUlD2.h"

void xscal_PLmmUlD2(int32_T n, real_T a, real_T x[3], int32_T ix0)
{
 8022f20:	b590      	push	{r4, r7, lr}
 8022f22:	b089      	sub	sp, #36	; 0x24
 8022f24:	af00      	add	r7, sp, #0
 8022f26:	6178      	str	r0, [r7, #20]
 8022f28:	ed87 0b02 	vstr	d0, [r7, #8]
 8022f2c:	6139      	str	r1, [r7, #16]
 8022f2e:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 8022f30:	687a      	ldr	r2, [r7, #4]
 8022f32:	697b      	ldr	r3, [r7, #20]
 8022f34:	4413      	add	r3, r2
 8022f36:	3b01      	subs	r3, #1
 8022f38:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 8022f3a:	687b      	ldr	r3, [r7, #4]
 8022f3c:	61fb      	str	r3, [r7, #28]
 8022f3e:	e01a      	b.n	8022f76 <xscal_PLmmUlD2+0x56>
    x[k - 1] *= a;
 8022f40:	69fb      	ldr	r3, [r7, #28]
 8022f42:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022f46:	3b01      	subs	r3, #1
 8022f48:	00db      	lsls	r3, r3, #3
 8022f4a:	693a      	ldr	r2, [r7, #16]
 8022f4c:	4413      	add	r3, r2
 8022f4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022f52:	69fb      	ldr	r3, [r7, #28]
 8022f54:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022f58:	3b01      	subs	r3, #1
 8022f5a:	00db      	lsls	r3, r3, #3
 8022f5c:	693a      	ldr	r2, [r7, #16]
 8022f5e:	18d4      	adds	r4, r2, r3
 8022f60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022f64:	f7dd fb3a 	bl	80005dc <__aeabi_dmul>
 8022f68:	4602      	mov	r2, r0
 8022f6a:	460b      	mov	r3, r1
 8022f6c:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 8022f70:	69fb      	ldr	r3, [r7, #28]
 8022f72:	3301      	adds	r3, #1
 8022f74:	61fb      	str	r3, [r7, #28]
 8022f76:	69fa      	ldr	r2, [r7, #28]
 8022f78:	69bb      	ldr	r3, [r7, #24]
 8022f7a:	429a      	cmp	r2, r3
 8022f7c:	dde0      	ble.n	8022f40 <xscal_PLmmUlD2+0x20>
  }
}
 8022f7e:	bf00      	nop
 8022f80:	bf00      	nop
 8022f82:	3724      	adds	r7, #36	; 0x24
 8022f84:	46bd      	mov	sp, r7
 8022f86:	bd90      	pop	{r4, r7, pc}

08022f88 <xscal_eaAxXsvQ>:
#include "rtwtypes.h"
#include "xscal_eaAxXsvQ.h"

void xscal_eaAxXsvQ(real_T a, real_T x[9], int32_T ix0)
{
 8022f88:	b590      	push	{r4, r7, lr}
 8022f8a:	b087      	sub	sp, #28
 8022f8c:	af00      	add	r7, sp, #0
 8022f8e:	ed87 0b02 	vstr	d0, [r7, #8]
 8022f92:	6078      	str	r0, [r7, #4]
 8022f94:	6039      	str	r1, [r7, #0]
  int32_T k;
  for (k = ix0; k <= ix0 + 2; k++) {
 8022f96:	683b      	ldr	r3, [r7, #0]
 8022f98:	617b      	str	r3, [r7, #20]
 8022f9a:	e01a      	b.n	8022fd2 <xscal_eaAxXsvQ+0x4a>
    x[k - 1] *= a;
 8022f9c:	697b      	ldr	r3, [r7, #20]
 8022f9e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022fa2:	3b01      	subs	r3, #1
 8022fa4:	00db      	lsls	r3, r3, #3
 8022fa6:	687a      	ldr	r2, [r7, #4]
 8022fa8:	4413      	add	r3, r2
 8022faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022fae:	697b      	ldr	r3, [r7, #20]
 8022fb0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022fb4:	3b01      	subs	r3, #1
 8022fb6:	00db      	lsls	r3, r3, #3
 8022fb8:	687a      	ldr	r2, [r7, #4]
 8022fba:	18d4      	adds	r4, r2, r3
 8022fbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022fc0:	f7dd fb0c 	bl	80005dc <__aeabi_dmul>
 8022fc4:	4602      	mov	r2, r0
 8022fc6:	460b      	mov	r3, r1
 8022fc8:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= ix0 + 2; k++) {
 8022fcc:	697b      	ldr	r3, [r7, #20]
 8022fce:	3301      	adds	r3, #1
 8022fd0:	617b      	str	r3, [r7, #20]
 8022fd2:	683b      	ldr	r3, [r7, #0]
 8022fd4:	3302      	adds	r3, #2
 8022fd6:	697a      	ldr	r2, [r7, #20]
 8022fd8:	429a      	cmp	r2, r3
 8022fda:	dddf      	ble.n	8022f9c <xscal_eaAxXsvQ+0x14>
  }
}
 8022fdc:	bf00      	nop
 8022fde:	bf00      	nop
 8022fe0:	371c      	adds	r7, #28
 8022fe2:	46bd      	mov	sp, r7
 8022fe4:	bd90      	pop	{r4, r7, pc}

08022fe6 <xswap_JoAqPjUv>:
#include "rtwtypes.h"
#include "xswap_JoAqPjUv.h"

void xswap_JoAqPjUv(real_T x[9], int32_T ix0, int32_T iy0)
{
 8022fe6:	b480      	push	{r7}
 8022fe8:	b087      	sub	sp, #28
 8022fea:	af00      	add	r7, sp, #0
 8022fec:	60f8      	str	r0, [r7, #12]
 8022fee:	60b9      	str	r1, [r7, #8]
 8022ff0:	607a      	str	r2, [r7, #4]
  real_T temp;
  temp = x[ix0 - 1];
 8022ff2:	68bb      	ldr	r3, [r7, #8]
 8022ff4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022ff8:	3b01      	subs	r3, #1
 8022ffa:	00db      	lsls	r3, r3, #3
 8022ffc:	68fa      	ldr	r2, [r7, #12]
 8022ffe:	4413      	add	r3, r2
 8023000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023004:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 - 1] = x[iy0 - 1];
 8023008:	687b      	ldr	r3, [r7, #4]
 802300a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802300e:	3b01      	subs	r3, #1
 8023010:	00db      	lsls	r3, r3, #3
 8023012:	68fa      	ldr	r2, [r7, #12]
 8023014:	441a      	add	r2, r3
 8023016:	68bb      	ldr	r3, [r7, #8]
 8023018:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802301c:	3b01      	subs	r3, #1
 802301e:	00db      	lsls	r3, r3, #3
 8023020:	68f9      	ldr	r1, [r7, #12]
 8023022:	4419      	add	r1, r3
 8023024:	e9d2 2300 	ldrd	r2, r3, [r2]
 8023028:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 - 1] = temp;
 802302c:	687b      	ldr	r3, [r7, #4]
 802302e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8023032:	3b01      	subs	r3, #1
 8023034:	00db      	lsls	r3, r3, #3
 8023036:	68fa      	ldr	r2, [r7, #12]
 8023038:	18d1      	adds	r1, r2, r3
 802303a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802303e:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0];
 8023042:	68bb      	ldr	r3, [r7, #8]
 8023044:	00db      	lsls	r3, r3, #3
 8023046:	68fa      	ldr	r2, [r7, #12]
 8023048:	4413      	add	r3, r2
 802304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802304e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0] = x[iy0];
 8023052:	687b      	ldr	r3, [r7, #4]
 8023054:	00db      	lsls	r3, r3, #3
 8023056:	68fa      	ldr	r2, [r7, #12]
 8023058:	4413      	add	r3, r2
 802305a:	68ba      	ldr	r2, [r7, #8]
 802305c:	00d2      	lsls	r2, r2, #3
 802305e:	68f9      	ldr	r1, [r7, #12]
 8023060:	4411      	add	r1, r2
 8023062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023066:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0] = temp;
 802306a:	687b      	ldr	r3, [r7, #4]
 802306c:	00db      	lsls	r3, r3, #3
 802306e:	68fa      	ldr	r2, [r7, #12]
 8023070:	18d1      	adds	r1, r2, r3
 8023072:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8023076:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0 + 1];
 802307a:	68bb      	ldr	r3, [r7, #8]
 802307c:	3301      	adds	r3, #1
 802307e:	00db      	lsls	r3, r3, #3
 8023080:	68fa      	ldr	r2, [r7, #12]
 8023082:	4413      	add	r3, r2
 8023084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023088:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 + 1] = x[iy0 + 1];
 802308c:	687b      	ldr	r3, [r7, #4]
 802308e:	3301      	adds	r3, #1
 8023090:	00db      	lsls	r3, r3, #3
 8023092:	68fa      	ldr	r2, [r7, #12]
 8023094:	4413      	add	r3, r2
 8023096:	68ba      	ldr	r2, [r7, #8]
 8023098:	3201      	adds	r2, #1
 802309a:	00d2      	lsls	r2, r2, #3
 802309c:	68f9      	ldr	r1, [r7, #12]
 802309e:	4411      	add	r1, r2
 80230a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230a4:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 + 1] = temp;
 80230a8:	687b      	ldr	r3, [r7, #4]
 80230aa:	3301      	adds	r3, #1
 80230ac:	00db      	lsls	r3, r3, #3
 80230ae:	68fa      	ldr	r2, [r7, #12]
 80230b0:	18d1      	adds	r1, r2, r3
 80230b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80230b6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80230ba:	bf00      	nop
 80230bc:	371c      	adds	r7, #28
 80230be:	46bd      	mov	sp, r7
 80230c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230c4:	4770      	bx	lr

080230c6 <ams_error>:

__weak uint8_t end_cell_balancing() {
   /* Type your actual code somewhere else */
}

__weak void ams_error() {
 80230c6:	b480      	push	{r7}
 80230c8:	af00      	add	r7, sp, #0
   /* Type your actual code somewhere else */
}
 80230ca:	bf00      	nop
 80230cc:	46bd      	mov	sp, r7
 80230ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230d2:	4770      	bx	lr

080230d4 <ams_error_0_function>:
static float timer_r0;
static float timer_r1;
static float timer_r2;
static float timer_r3;

ams_state_t ams_error_0_function() {
 80230d4:	b480      	push	{r7}
 80230d6:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 80230d8:	4b04      	ldr	r3, [pc, #16]	; (80230ec <ams_error_0_function+0x18>)
 80230da:	f04f 0200 	mov.w	r2, #0
 80230de:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_ERROR_DETECTED;
 80230e0:	2304      	movs	r3, #4
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_ERROR_0;
}
 80230e2:	4618      	mov	r0, r3
 80230e4:	46bd      	mov	sp, r7
 80230e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230ea:	4770      	bx	lr
 80230ec:	20001a38 	.word	0x20001a38

080230f0 <ams_error_error_detected_function>:

ams_state_t ams_error_error_detected_function() {
 80230f0:	b480      	push	{r7}
 80230f2:	af00      	add	r7, sp, #0
   if(1) {
       ams_outputs.close_air_plus=0;
 80230f4:	4b0a      	ldr	r3, [pc, #40]	; (8023120 <ams_error_error_detected_function+0x30>)
 80230f6:	2200      	movs	r2, #0
 80230f8:	70da      	strb	r2, [r3, #3]
       ams_outputs.close_air_minus=0;
 80230fa:	4b09      	ldr	r3, [pc, #36]	; (8023120 <ams_error_error_detected_function+0x30>)
 80230fc:	2200      	movs	r2, #0
 80230fe:	719a      	strb	r2, [r3, #6]
       ams_outputs.close_precharge=0;
 8023100:	4b07      	ldr	r3, [pc, #28]	; (8023120 <ams_error_error_detected_function+0x30>)
 8023102:	2200      	movs	r2, #0
 8023104:	71da      	strb	r2, [r3, #7]
       ams_outputs.enable_charger=0;
 8023106:	4b06      	ldr	r3, [pc, #24]	; (8023120 <ams_error_error_detected_function+0x30>)
 8023108:	2200      	movs	r2, #0
 802310a:	711a      	strb	r2, [r3, #4]
       timer_r2 = 0;
 802310c:	4b05      	ldr	r3, [pc, #20]	; (8023124 <ams_error_error_detected_function+0x34>)
 802310e:	f04f 0200 	mov.w	r2, #0
 8023112:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_RELAYS_OPENED;
 8023114:	2305      	movs	r3, #5
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_ERROR_ERROR_DETECTED;
}
 8023116:	4618      	mov	r0, r3
 8023118:	46bd      	mov	sp, r7
 802311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802311e:	4770      	bx	lr
 8023120:	2001c160 	.word	0x2001c160
 8023124:	20001a38 	.word	0x20001a38

08023128 <ams_error_relays_opened_function>:

ams_state_t ams_error_relays_opened_function() {
 8023128:	b480      	push	{r7}
 802312a:	af00      	add	r7, sp, #0
   if((timer_r2 > 5)) {
 802312c:	4b11      	ldr	r3, [pc, #68]	; (8023174 <ams_error_relays_opened_function+0x4c>)
 802312e:	edd3 7a00 	vldr	s15, [r3]
 8023132:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8023136:	eef4 7ac7 	vcmpe.f32	s15, s14
 802313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802313e:	dd08      	ble.n	8023152 <ams_error_relays_opened_function+0x2a>
       ams_outputs.error=0;
 8023140:	4b0d      	ldr	r3, [pc, #52]	; (8023178 <ams_error_relays_opened_function+0x50>)
 8023142:	2200      	movs	r2, #0
 8023144:	721a      	strb	r2, [r3, #8]
       timer_r2 = 0;
 8023146:	4b0b      	ldr	r3, [pc, #44]	; (8023174 <ams_error_relays_opened_function+0x4c>)
 8023148:	f04f 0200 	mov.w	r2, #0
 802314c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION;
 802314e:	2306      	movs	r3, #6
 8023150:	e00b      	b.n	802316a <ams_error_relays_opened_function+0x42>
   }

   timer_r2 += ams_inputs.Ts;
 8023152:	4b0a      	ldr	r3, [pc, #40]	; (802317c <ams_error_relays_opened_function+0x54>)
 8023154:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023158:	4b06      	ldr	r3, [pc, #24]	; (8023174 <ams_error_relays_opened_function+0x4c>)
 802315a:	edd3 7a00 	vldr	s15, [r3]
 802315e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023162:	4b04      	ldr	r3, [pc, #16]	; (8023174 <ams_error_relays_opened_function+0x4c>)
 8023164:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR_RELAYS_OPENED;
 8023168:	2305      	movs	r3, #5
}
 802316a:	4618      	mov	r0, r3
 802316c:	46bd      	mov	sp, r7
 802316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023172:	4770      	bx	lr
 8023174:	20001a38 	.word	0x20001a38
 8023178:	2001c160 	.word	0x2001c160
 802317c:	2001c100 	.word	0x2001c100

08023180 <ams_error_awaiting_error_resolution_function>:

ams_state_t ams_error_awaiting_error_resolution_function() {
 8023180:	b480      	push	{r7}
 8023182:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 8023184:	4b08      	ldr	r3, [pc, #32]	; (80231a8 <ams_error_awaiting_error_resolution_function+0x28>)
 8023186:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 802318a:	4b08      	ldr	r3, [pc, #32]	; (80231ac <ams_error_awaiting_error_resolution_function+0x2c>)
 802318c:	edd3 7a00 	vldr	s15, [r3]
 8023190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023194:	4b05      	ldr	r3, [pc, #20]	; (80231ac <ams_error_awaiting_error_resolution_function+0x2c>)
 8023196:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION;
 802319a:	2306      	movs	r3, #6
}
 802319c:	4618      	mov	r0, r3
 802319e:	46bd      	mov	sp, r7
 80231a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231a4:	4770      	bx	lr
 80231a6:	bf00      	nop
 80231a8:	2001c100 	.word	0x2001c100
 80231ac:	20001a38 	.word	0x20001a38

080231b0 <ams_error_function>:

ams_state_t ams_error_function() {
 80231b0:	b5b0      	push	{r4, r5, r7, lr}
 80231b2:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 80231b4:	4b3a      	ldr	r3, [pc, #232]	; (80232a0 <ams_error_function+0xf0>)
 80231b6:	681b      	ldr	r3, [r3, #0]
 80231b8:	4618      	mov	r0, r3
 80231ba:	f7dd f9b7 	bl	800052c <__aeabi_f2d>
 80231be:	4604      	mov	r4, r0
 80231c0:	460d      	mov	r5, r1
 80231c2:	4b38      	ldr	r3, [pc, #224]	; (80232a4 <ams_error_function+0xf4>)
 80231c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80231c6:	4618      	mov	r0, r3
 80231c8:	f7dd f9b0 	bl	800052c <__aeabi_f2d>
 80231cc:	a332      	add	r3, pc, #200	; (adr r3, 8023298 <ams_error_function+0xe8>)
 80231ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231d2:	f7dd fa03 	bl	80005dc <__aeabi_dmul>
 80231d6:	4602      	mov	r2, r0
 80231d8:	460b      	mov	r3, r1
 80231da:	4620      	mov	r0, r4
 80231dc:	4629      	mov	r1, r5
 80231de:	f7dd fc6f 	bl	8000ac0 <__aeabi_dcmplt>
 80231e2:	4603      	mov	r3, r0
 80231e4:	2b00      	cmp	r3, #0
 80231e6:	d002      	beq.n	80231ee <ams_error_function+0x3e>
       state_r2 = STATE_AMS_ERROR_0;
 80231e8:	4b2f      	ldr	r3, [pc, #188]	; (80232a8 <ams_error_function+0xf8>)
 80231ea:	2203      	movs	r2, #3
 80231ec:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 80231ee:	4b2e      	ldr	r3, [pc, #184]	; (80232a8 <ams_error_function+0xf8>)
 80231f0:	781b      	ldrb	r3, [r3, #0]
 80231f2:	3b03      	subs	r3, #3
 80231f4:	2b03      	cmp	r3, #3
 80231f6:	d827      	bhi.n	8023248 <ams_error_function+0x98>
 80231f8:	a201      	add	r2, pc, #4	; (adr r2, 8023200 <ams_error_function+0x50>)
 80231fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80231fe:	bf00      	nop
 8023200:	08023211 	.word	0x08023211
 8023204:	0802321f 	.word	0x0802321f
 8023208:	0802322d 	.word	0x0802322d
 802320c:	0802323b 	.word	0x0802323b
       case STATE_AMS_ERROR_0:
           state_r2 = ams_error_0_function();
 8023210:	f7ff ff60 	bl	80230d4 <ams_error_0_function>
 8023214:	4603      	mov	r3, r0
 8023216:	461a      	mov	r2, r3
 8023218:	4b23      	ldr	r3, [pc, #140]	; (80232a8 <ams_error_function+0xf8>)
 802321a:	701a      	strb	r2, [r3, #0]
           break;
 802321c:	e017      	b.n	802324e <ams_error_function+0x9e>
       case STATE_AMS_ERROR_ERROR_DETECTED:
           state_r2 = ams_error_error_detected_function();
 802321e:	f7ff ff67 	bl	80230f0 <ams_error_error_detected_function>
 8023222:	4603      	mov	r3, r0
 8023224:	461a      	mov	r2, r3
 8023226:	4b20      	ldr	r3, [pc, #128]	; (80232a8 <ams_error_function+0xf8>)
 8023228:	701a      	strb	r2, [r3, #0]
           break;
 802322a:	e010      	b.n	802324e <ams_error_function+0x9e>
       case STATE_AMS_ERROR_RELAYS_OPENED:
           state_r2 = ams_error_relays_opened_function();
 802322c:	f7ff ff7c 	bl	8023128 <ams_error_relays_opened_function>
 8023230:	4603      	mov	r3, r0
 8023232:	461a      	mov	r2, r3
 8023234:	4b1c      	ldr	r3, [pc, #112]	; (80232a8 <ams_error_function+0xf8>)
 8023236:	701a      	strb	r2, [r3, #0]
           break;
 8023238:	e009      	b.n	802324e <ams_error_function+0x9e>
       case STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION:
           state_r2 = ams_error_awaiting_error_resolution_function();
 802323a:	f7ff ffa1 	bl	8023180 <ams_error_awaiting_error_resolution_function>
 802323e:	4603      	mov	r3, r0
 8023240:	461a      	mov	r2, r3
 8023242:	4b19      	ldr	r3, [pc, #100]	; (80232a8 <ams_error_function+0xf8>)
 8023244:	701a      	strb	r2, [r3, #0]
           break;
 8023246:	e002      	b.n	802324e <ams_error_function+0x9e>
       default:
           ams_error();
 8023248:	f7ff ff3d 	bl	80230c6 <ams_error>
           break;
 802324c:	bf00      	nop
   }

   if(!(ams_outputs.error||ams_inputs.ams_error||ams_inputs.imd_error)) {
 802324e:	4b17      	ldr	r3, [pc, #92]	; (80232ac <ams_error_function+0xfc>)
 8023250:	7a1b      	ldrb	r3, [r3, #8]
 8023252:	2b00      	cmp	r3, #0
 8023254:	d10f      	bne.n	8023276 <ams_error_function+0xc6>
 8023256:	4b13      	ldr	r3, [pc, #76]	; (80232a4 <ams_error_function+0xf4>)
 8023258:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 802325c:	2b00      	cmp	r3, #0
 802325e:	d10a      	bne.n	8023276 <ams_error_function+0xc6>
 8023260:	4b10      	ldr	r3, [pc, #64]	; (80232a4 <ams_error_function+0xf4>)
 8023262:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8023266:	2b00      	cmp	r3, #0
 8023268:	d105      	bne.n	8023276 <ams_error_function+0xc6>
       timer_r1 = 0;
 802326a:	4b0d      	ldr	r3, [pc, #52]	; (80232a0 <ams_error_function+0xf0>)
 802326c:	f04f 0200 	mov.w	r2, #0
 8023270:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN;
 8023272:	2307      	movs	r3, #7
 8023274:	e00b      	b.n	802328e <ams_error_function+0xde>
   }


   timer_r1 += ams_inputs.Ts;
 8023276:	4b0b      	ldr	r3, [pc, #44]	; (80232a4 <ams_error_function+0xf4>)
 8023278:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 802327c:	4b08      	ldr	r3, [pc, #32]	; (80232a0 <ams_error_function+0xf0>)
 802327e:	edd3 7a00 	vldr	s15, [r3]
 8023282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023286:	4b06      	ldr	r3, [pc, #24]	; (80232a0 <ams_error_function+0xf0>)
 8023288:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR;
 802328c:	2302      	movs	r3, #2
}
 802328e:	4618      	mov	r0, r3
 8023290:	bdb0      	pop	{r4, r5, r7, pc}
 8023292:	bf00      	nop
 8023294:	f3af 8000 	nop.w
 8023298:	d2f1a9fc 	.word	0xd2f1a9fc
 802329c:	3f50624d 	.word	0x3f50624d
 80232a0:	20001a34 	.word	0x20001a34
 80232a4:	2001c100 	.word	0x2001c100
 80232a8:	20001a2d 	.word	0x20001a2d
 80232ac:	2001c160 	.word	0x2001c160

080232b0 <ams_main_precharge_drive_close_air_minus_function>:

ams_state_t ams_main_precharge_drive_close_air_minus_function() {
 80232b0:	b480      	push	{r7}
 80232b2:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.air_minus_closed) {
 80232b4:	4b1d      	ldr	r3, [pc, #116]	; (802332c <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 80232b6:	edd3 7a00 	vldr	s15, [r3]
 80232ba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80232be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80232c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232c6:	d50c      	bpl.n	80232e2 <ams_main_precharge_drive_close_air_minus_function+0x32>
 80232c8:	4b19      	ldr	r3, [pc, #100]	; (8023330 <ams_main_precharge_drive_close_air_minus_function+0x80>)
 80232ca:	7a1b      	ldrb	r3, [r3, #8]
 80232cc:	2b00      	cmp	r3, #0
 80232ce:	d008      	beq.n	80232e2 <ams_main_precharge_drive_close_air_minus_function+0x32>
       ams_outputs.close_precharge=1;
 80232d0:	4b18      	ldr	r3, [pc, #96]	; (8023334 <ams_main_precharge_drive_close_air_minus_function+0x84>)
 80232d2:	2201      	movs	r2, #1
 80232d4:	71da      	strb	r2, [r3, #7]
       timer_r3 = 0;
 80232d6:	4b15      	ldr	r3, [pc, #84]	; (802332c <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 80232d8:	f04f 0200 	mov.w	r2, #0
 80232dc:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_PRECHARGE;
 80232de:	230a      	movs	r3, #10
 80232e0:	e01e      	b.n	8023320 <ams_main_precharge_drive_close_air_minus_function+0x70>
   }

   if((timer_r3 > 2)) {
 80232e2:	4b12      	ldr	r3, [pc, #72]	; (802332c <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 80232e4:	edd3 7a00 	vldr	s15, [r3]
 80232e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80232ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80232f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232f4:	dd08      	ble.n	8023308 <ams_main_precharge_drive_close_air_minus_function+0x58>
       ams_outputs.error=111;
 80232f6:	4b0f      	ldr	r3, [pc, #60]	; (8023334 <ams_main_precharge_drive_close_air_minus_function+0x84>)
 80232f8:	226f      	movs	r2, #111	; 0x6f
 80232fa:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 80232fc:	4b0b      	ldr	r3, [pc, #44]	; (802332c <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 80232fe:	f04f 0200 	mov.w	r2, #0
 8023302:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 8023304:	230b      	movs	r3, #11
 8023306:	e00b      	b.n	8023320 <ams_main_precharge_drive_close_air_minus_function+0x70>
   }

   timer_r3 += ams_inputs.Ts;
 8023308:	4b09      	ldr	r3, [pc, #36]	; (8023330 <ams_main_precharge_drive_close_air_minus_function+0x80>)
 802330a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 802330e:	4b07      	ldr	r3, [pc, #28]	; (802332c <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 8023310:	edd3 7a00 	vldr	s15, [r3]
 8023314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023318:	4b04      	ldr	r3, [pc, #16]	; (802332c <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 802331a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_MINUS;
 802331e:	2309      	movs	r3, #9
}
 8023320:	4618      	mov	r0, r3
 8023322:	46bd      	mov	sp, r7
 8023324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023328:	4770      	bx	lr
 802332a:	bf00      	nop
 802332c:	20001a3c 	.word	0x20001a3c
 8023330:	2001c100 	.word	0x2001c100
 8023334:	2001c160 	.word	0x2001c160

08023338 <ams_main_precharge_drive_close_precharge_function>:

ams_state_t ams_main_precharge_drive_close_precharge_function() {
 8023338:	b480      	push	{r7}
 802333a:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.precharge_closed) {
 802333c:	4b1c      	ldr	r3, [pc, #112]	; (80233b0 <ams_main_precharge_drive_close_precharge_function+0x78>)
 802333e:	edd3 7a00 	vldr	s15, [r3]
 8023342:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023346:	eef4 7ac7 	vcmpe.f32	s15, s14
 802334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802334e:	d50a      	bpl.n	8023366 <ams_main_precharge_drive_close_precharge_function+0x2e>
 8023350:	4b18      	ldr	r3, [pc, #96]	; (80233b4 <ams_main_precharge_drive_close_precharge_function+0x7c>)
 8023352:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8023356:	2b00      	cmp	r3, #0
 8023358:	d005      	beq.n	8023366 <ams_main_precharge_drive_close_precharge_function+0x2e>
       timer_r3 = 0;
 802335a:	4b15      	ldr	r3, [pc, #84]	; (80233b0 <ams_main_precharge_drive_close_precharge_function+0x78>)
 802335c:	f04f 0200 	mov.w	r2, #0
 8023360:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_WAIT;
 8023362:	230c      	movs	r3, #12
 8023364:	e01e      	b.n	80233a4 <ams_main_precharge_drive_close_precharge_function+0x6c>
   }

   if((timer_r3 > 2)) {
 8023366:	4b12      	ldr	r3, [pc, #72]	; (80233b0 <ams_main_precharge_drive_close_precharge_function+0x78>)
 8023368:	edd3 7a00 	vldr	s15, [r3]
 802336c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023378:	dd08      	ble.n	802338c <ams_main_precharge_drive_close_precharge_function+0x54>
       ams_outputs.error=112;
 802337a:	4b0f      	ldr	r3, [pc, #60]	; (80233b8 <ams_main_precharge_drive_close_precharge_function+0x80>)
 802337c:	2270      	movs	r2, #112	; 0x70
 802337e:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023380:	4b0b      	ldr	r3, [pc, #44]	; (80233b0 <ams_main_precharge_drive_close_precharge_function+0x78>)
 8023382:	f04f 0200 	mov.w	r2, #0
 8023386:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 8023388:	230b      	movs	r3, #11
 802338a:	e00b      	b.n	80233a4 <ams_main_precharge_drive_close_precharge_function+0x6c>
   }

   timer_r3 += ams_inputs.Ts;
 802338c:	4b09      	ldr	r3, [pc, #36]	; (80233b4 <ams_main_precharge_drive_close_precharge_function+0x7c>)
 802338e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023392:	4b07      	ldr	r3, [pc, #28]	; (80233b0 <ams_main_precharge_drive_close_precharge_function+0x78>)
 8023394:	edd3 7a00 	vldr	s15, [r3]
 8023398:	ee77 7a27 	vadd.f32	s15, s14, s15
 802339c:	4b04      	ldr	r3, [pc, #16]	; (80233b0 <ams_main_precharge_drive_close_precharge_function+0x78>)
 802339e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_PRECHARGE;
 80233a2:	230a      	movs	r3, #10
}
 80233a4:	4618      	mov	r0, r3
 80233a6:	46bd      	mov	sp, r7
 80233a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233ac:	4770      	bx	lr
 80233ae:	bf00      	nop
 80233b0:	20001a3c 	.word	0x20001a3c
 80233b4:	2001c100 	.word	0x2001c100
 80233b8:	2001c160 	.word	0x2001c160

080233bc <ams_main_precharge_drive_error_function>:

ams_state_t ams_main_precharge_drive_error_function() {
 80233bc:	b480      	push	{r7}
 80233be:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 80233c0:	4b08      	ldr	r3, [pc, #32]	; (80233e4 <ams_main_precharge_drive_error_function+0x28>)
 80233c2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80233c6:	4b08      	ldr	r3, [pc, #32]	; (80233e8 <ams_main_precharge_drive_error_function+0x2c>)
 80233c8:	edd3 7a00 	vldr	s15, [r3]
 80233cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80233d0:	4b05      	ldr	r3, [pc, #20]	; (80233e8 <ams_main_precharge_drive_error_function+0x2c>)
 80233d2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 80233d6:	230b      	movs	r3, #11
}
 80233d8:	4618      	mov	r0, r3
 80233da:	46bd      	mov	sp, r7
 80233dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233e0:	4770      	bx	lr
 80233e2:	bf00      	nop
 80233e4:	2001c100 	.word	0x2001c100
 80233e8:	20001a3c 	.word	0x20001a3c
 80233ec:	00000000 	.word	0x00000000

080233f0 <ams_main_precharge_drive_wait_function>:

ams_state_t ams_main_precharge_drive_wait_function() {
 80233f0:	b580      	push	{r7, lr}
 80233f2:	af00      	add	r7, sp, #0
   if((timer_r3 > 5)&&(timer_r3 < 30)&&(ams_inputs.accumulator_voltage*0.95<ams_inputs.vehicle_voltage)) {
 80233f4:	4b2a      	ldr	r3, [pc, #168]	; (80234a0 <ams_main_precharge_drive_wait_function+0xb0>)
 80233f6:	edd3 7a00 	vldr	s15, [r3]
 80233fa:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80233fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023406:	dd26      	ble.n	8023456 <ams_main_precharge_drive_wait_function+0x66>
 8023408:	4b25      	ldr	r3, [pc, #148]	; (80234a0 <ams_main_precharge_drive_wait_function+0xb0>)
 802340a:	edd3 7a00 	vldr	s15, [r3]
 802340e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8023412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802341a:	d51c      	bpl.n	8023456 <ams_main_precharge_drive_wait_function+0x66>
 802341c:	4b21      	ldr	r3, [pc, #132]	; (80234a4 <ams_main_precharge_drive_wait_function+0xb4>)
 802341e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023422:	a31d      	add	r3, pc, #116	; (adr r3, 8023498 <ams_main_precharge_drive_wait_function+0xa8>)
 8023424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023428:	f7dd f8d8 	bl	80005dc <__aeabi_dmul>
 802342c:	4602      	mov	r2, r0
 802342e:	460b      	mov	r3, r1
 8023430:	4610      	mov	r0, r2
 8023432:	4619      	mov	r1, r3
 8023434:	4b1b      	ldr	r3, [pc, #108]	; (80234a4 <ams_main_precharge_drive_wait_function+0xb4>)
 8023436:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802343a:	f7dd fb41 	bl	8000ac0 <__aeabi_dcmplt>
 802343e:	4603      	mov	r3, r0
 8023440:	2b00      	cmp	r3, #0
 8023442:	d008      	beq.n	8023456 <ams_main_precharge_drive_wait_function+0x66>
       ams_outputs.close_air_plus=1;
 8023444:	4b18      	ldr	r3, [pc, #96]	; (80234a8 <ams_main_precharge_drive_wait_function+0xb8>)
 8023446:	2201      	movs	r2, #1
 8023448:	70da      	strb	r2, [r3, #3]
       timer_r3 = 0;
 802344a:	4b15      	ldr	r3, [pc, #84]	; (80234a0 <ams_main_precharge_drive_wait_function+0xb0>)
 802344c:	f04f 0200 	mov.w	r2, #0
 8023450:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_PLUS;
 8023452:	230d      	movs	r3, #13
 8023454:	e01e      	b.n	8023494 <ams_main_precharge_drive_wait_function+0xa4>
   }

   if((timer_r3 > 30)) {
 8023456:	4b12      	ldr	r3, [pc, #72]	; (80234a0 <ams_main_precharge_drive_wait_function+0xb0>)
 8023458:	edd3 7a00 	vldr	s15, [r3]
 802345c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8023460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023468:	dd08      	ble.n	802347c <ams_main_precharge_drive_wait_function+0x8c>
       ams_outputs.error=113;
 802346a:	4b0f      	ldr	r3, [pc, #60]	; (80234a8 <ams_main_precharge_drive_wait_function+0xb8>)
 802346c:	2271      	movs	r2, #113	; 0x71
 802346e:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023470:	4b0b      	ldr	r3, [pc, #44]	; (80234a0 <ams_main_precharge_drive_wait_function+0xb0>)
 8023472:	f04f 0200 	mov.w	r2, #0
 8023476:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 8023478:	230b      	movs	r3, #11
 802347a:	e00b      	b.n	8023494 <ams_main_precharge_drive_wait_function+0xa4>
   }

   timer_r3 += ams_inputs.Ts;
 802347c:	4b09      	ldr	r3, [pc, #36]	; (80234a4 <ams_main_precharge_drive_wait_function+0xb4>)
 802347e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023482:	4b07      	ldr	r3, [pc, #28]	; (80234a0 <ams_main_precharge_drive_wait_function+0xb0>)
 8023484:	edd3 7a00 	vldr	s15, [r3]
 8023488:	ee77 7a27 	vadd.f32	s15, s14, s15
 802348c:	4b04      	ldr	r3, [pc, #16]	; (80234a0 <ams_main_precharge_drive_wait_function+0xb0>)
 802348e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_WAIT;
 8023492:	230c      	movs	r3, #12
}
 8023494:	4618      	mov	r0, r3
 8023496:	bd80      	pop	{r7, pc}
 8023498:	66666666 	.word	0x66666666
 802349c:	3fee6666 	.word	0x3fee6666
 80234a0:	20001a3c 	.word	0x20001a3c
 80234a4:	2001c100 	.word	0x2001c100
 80234a8:	2001c160 	.word	0x2001c160

080234ac <ams_main_precharge_drive_close_air_plus_function>:

ams_state_t ams_main_precharge_drive_close_air_plus_function() {
 80234ac:	b480      	push	{r7}
 80234ae:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.air_plus_closed) {
 80234b0:	4b1d      	ldr	r3, [pc, #116]	; (8023528 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 80234b2:	edd3 7a00 	vldr	s15, [r3]
 80234b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80234ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80234be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234c2:	d50d      	bpl.n	80234e0 <ams_main_precharge_drive_close_air_plus_function+0x34>
 80234c4:	4b19      	ldr	r3, [pc, #100]	; (802352c <ams_main_precharge_drive_close_air_plus_function+0x80>)
 80234c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80234ca:	2b00      	cmp	r3, #0
 80234cc:	d008      	beq.n	80234e0 <ams_main_precharge_drive_close_air_plus_function+0x34>
       ams_outputs.close_precharge=0;
 80234ce:	4b18      	ldr	r3, [pc, #96]	; (8023530 <ams_main_precharge_drive_close_air_plus_function+0x84>)
 80234d0:	2200      	movs	r2, #0
 80234d2:	71da      	strb	r2, [r3, #7]
       timer_r3 = 0;
 80234d4:	4b14      	ldr	r3, [pc, #80]	; (8023528 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 80234d6:	f04f 0200 	mov.w	r2, #0
 80234da:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_OPEN_PRECHARGE;
 80234dc:	230e      	movs	r3, #14
 80234de:	e01e      	b.n	802351e <ams_main_precharge_drive_close_air_plus_function+0x72>
   }

   if((timer_r3 > 2)) {
 80234e0:	4b11      	ldr	r3, [pc, #68]	; (8023528 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 80234e2:	edd3 7a00 	vldr	s15, [r3]
 80234e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80234ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80234ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234f2:	dd08      	ble.n	8023506 <ams_main_precharge_drive_close_air_plus_function+0x5a>
       ams_outputs.error=114;
 80234f4:	4b0e      	ldr	r3, [pc, #56]	; (8023530 <ams_main_precharge_drive_close_air_plus_function+0x84>)
 80234f6:	2272      	movs	r2, #114	; 0x72
 80234f8:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 80234fa:	4b0b      	ldr	r3, [pc, #44]	; (8023528 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 80234fc:	f04f 0200 	mov.w	r2, #0
 8023500:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 8023502:	230b      	movs	r3, #11
 8023504:	e00b      	b.n	802351e <ams_main_precharge_drive_close_air_plus_function+0x72>
   }

   timer_r3 += ams_inputs.Ts;
 8023506:	4b09      	ldr	r3, [pc, #36]	; (802352c <ams_main_precharge_drive_close_air_plus_function+0x80>)
 8023508:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 802350c:	4b06      	ldr	r3, [pc, #24]	; (8023528 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 802350e:	edd3 7a00 	vldr	s15, [r3]
 8023512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023516:	4b04      	ldr	r3, [pc, #16]	; (8023528 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 8023518:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_PLUS;
 802351c:	230d      	movs	r3, #13
}
 802351e:	4618      	mov	r0, r3
 8023520:	46bd      	mov	sp, r7
 8023522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023526:	4770      	bx	lr
 8023528:	20001a3c 	.word	0x20001a3c
 802352c:	2001c100 	.word	0x2001c100
 8023530:	2001c160 	.word	0x2001c160

08023534 <ams_main_precharge_drive_open_precharge_function>:

ams_state_t ams_main_precharge_drive_open_precharge_function() {
 8023534:	b480      	push	{r7}
 8023536:	af00      	add	r7, sp, #0
   if((timer_r3 > 2)) {
 8023538:	4b1d      	ldr	r3, [pc, #116]	; (80235b0 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 802353a:	edd3 7a00 	vldr	s15, [r3]
 802353e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802354a:	dd08      	ble.n	802355e <ams_main_precharge_drive_open_precharge_function+0x2a>
       ams_outputs.error=115;
 802354c:	4b19      	ldr	r3, [pc, #100]	; (80235b4 <ams_main_precharge_drive_open_precharge_function+0x80>)
 802354e:	2273      	movs	r2, #115	; 0x73
 8023550:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023552:	4b17      	ldr	r3, [pc, #92]	; (80235b0 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 8023554:	f04f 0200 	mov.w	r2, #0
 8023558:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 802355a:	230b      	movs	r3, #11
 802355c:	e023      	b.n	80235a6 <ams_main_precharge_drive_open_precharge_function+0x72>
   }

   if((timer_r3 < 2)&&!ams_inputs.precharge_closed) {
 802355e:	4b14      	ldr	r3, [pc, #80]	; (80235b0 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 8023560:	edd3 7a00 	vldr	s15, [r3]
 8023564:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023568:	eef4 7ac7 	vcmpe.f32	s15, s14
 802356c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023570:	d50d      	bpl.n	802358e <ams_main_precharge_drive_open_precharge_function+0x5a>
 8023572:	4b11      	ldr	r3, [pc, #68]	; (80235b8 <ams_main_precharge_drive_open_precharge_function+0x84>)
 8023574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8023578:	2b00      	cmp	r3, #0
 802357a:	d108      	bne.n	802358e <ams_main_precharge_drive_open_precharge_function+0x5a>
       ams_outputs.precharge_drive_complete=1;
 802357c:	4b0d      	ldr	r3, [pc, #52]	; (80235b4 <ams_main_precharge_drive_open_precharge_function+0x80>)
 802357e:	2201      	movs	r2, #1
 8023580:	701a      	strb	r2, [r3, #0]
       timer_r3 = 0;
 8023582:	4b0b      	ldr	r3, [pc, #44]	; (80235b0 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 8023584:	f04f 0200 	mov.w	r2, #0
 8023588:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_EXIT;
 802358a:	230f      	movs	r3, #15
 802358c:	e00b      	b.n	80235a6 <ams_main_precharge_drive_open_precharge_function+0x72>
   }

   timer_r3 += ams_inputs.Ts;
 802358e:	4b0a      	ldr	r3, [pc, #40]	; (80235b8 <ams_main_precharge_drive_open_precharge_function+0x84>)
 8023590:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023594:	4b06      	ldr	r3, [pc, #24]	; (80235b0 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 8023596:	edd3 7a00 	vldr	s15, [r3]
 802359a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802359e:	4b04      	ldr	r3, [pc, #16]	; (80235b0 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 80235a0:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_OPEN_PRECHARGE;
 80235a4:	230e      	movs	r3, #14
}
 80235a6:	4618      	mov	r0, r3
 80235a8:	46bd      	mov	sp, r7
 80235aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235ae:	4770      	bx	lr
 80235b0:	20001a3c 	.word	0x20001a3c
 80235b4:	2001c160 	.word	0x2001c160
 80235b8:	2001c100 	.word	0x2001c100

080235bc <ams_main_precharge_drive_exit_function>:

ams_state_t ams_main_precharge_drive_exit_function() {
 80235bc:	b480      	push	{r7}
 80235be:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 80235c0:	4b08      	ldr	r3, [pc, #32]	; (80235e4 <ams_main_precharge_drive_exit_function+0x28>)
 80235c2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80235c6:	4b08      	ldr	r3, [pc, #32]	; (80235e8 <ams_main_precharge_drive_exit_function+0x2c>)
 80235c8:	edd3 7a00 	vldr	s15, [r3]
 80235cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80235d0:	4b05      	ldr	r3, [pc, #20]	; (80235e8 <ams_main_precharge_drive_exit_function+0x2c>)
 80235d2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_EXIT;
 80235d6:	230f      	movs	r3, #15
}
 80235d8:	4618      	mov	r0, r3
 80235da:	46bd      	mov	sp, r7
 80235dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235e0:	4770      	bx	lr
 80235e2:	bf00      	nop
 80235e4:	2001c100 	.word	0x2001c100
 80235e8:	20001a3c 	.word	0x20001a3c

080235ec <ams_main_precharge_drive_0_function>:

ams_state_t ams_main_precharge_drive_0_function() {
 80235ec:	b480      	push	{r7}
 80235ee:	af00      	add	r7, sp, #0
   if(1) {
       timer_r3 = 0;
 80235f0:	4b04      	ldr	r3, [pc, #16]	; (8023604 <ams_main_precharge_drive_0_function+0x18>)
 80235f2:	f04f 0200 	mov.w	r2, #0
 80235f6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ENTRY;
 80235f8:	2311      	movs	r3, #17
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_0;
}
 80235fa:	4618      	mov	r0, r3
 80235fc:	46bd      	mov	sp, r7
 80235fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023602:	4770      	bx	lr
 8023604:	20001a3c 	.word	0x20001a3c

08023608 <ams_main_precharge_drive_entry_function>:

ams_state_t ams_main_precharge_drive_entry_function() {
 8023608:	b480      	push	{r7}
 802360a:	af00      	add	r7, sp, #0
   if(1) {
       ams_outputs.close_air_minus=1;
 802360c:	4b06      	ldr	r3, [pc, #24]	; (8023628 <ams_main_precharge_drive_entry_function+0x20>)
 802360e:	2201      	movs	r2, #1
 8023610:	719a      	strb	r2, [r3, #6]
       timer_r3 = 0;
 8023612:	4b06      	ldr	r3, [pc, #24]	; (802362c <ams_main_precharge_drive_entry_function+0x24>)
 8023614:	f04f 0200 	mov.w	r2, #0
 8023618:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_MINUS;
 802361a:	2309      	movs	r3, #9
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_ENTRY;
}
 802361c:	4618      	mov	r0, r3
 802361e:	46bd      	mov	sp, r7
 8023620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023624:	4770      	bx	lr
 8023626:	bf00      	nop
 8023628:	2001c160 	.word	0x2001c160
 802362c:	20001a3c 	.word	0x20001a3c

08023630 <ams_main_precharge_drive_function>:

ams_state_t ams_main_precharge_drive_function() {
 8023630:	b5b0      	push	{r4, r5, r7, lr}
 8023632:	af00      	add	r7, sp, #0
   if(timer_r2 < 0.001*ams_inputs.Ts) {
 8023634:	4b4c      	ldr	r3, [pc, #304]	; (8023768 <ams_main_precharge_drive_function+0x138>)
 8023636:	681b      	ldr	r3, [r3, #0]
 8023638:	4618      	mov	r0, r3
 802363a:	f7dc ff77 	bl	800052c <__aeabi_f2d>
 802363e:	4604      	mov	r4, r0
 8023640:	460d      	mov	r5, r1
 8023642:	4b4a      	ldr	r3, [pc, #296]	; (802376c <ams_main_precharge_drive_function+0x13c>)
 8023644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023646:	4618      	mov	r0, r3
 8023648:	f7dc ff70 	bl	800052c <__aeabi_f2d>
 802364c:	a344      	add	r3, pc, #272	; (adr r3, 8023760 <ams_main_precharge_drive_function+0x130>)
 802364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023652:	f7dc ffc3 	bl	80005dc <__aeabi_dmul>
 8023656:	4602      	mov	r2, r0
 8023658:	460b      	mov	r3, r1
 802365a:	4620      	mov	r0, r4
 802365c:	4629      	mov	r1, r5
 802365e:	f7dd fa2f 	bl	8000ac0 <__aeabi_dcmplt>
 8023662:	4603      	mov	r3, r0
 8023664:	2b00      	cmp	r3, #0
 8023666:	d002      	beq.n	802366e <ams_main_precharge_drive_function+0x3e>
       state_r3 = STATE_AMS_MAIN_PRECHARGE_DRIVE_0;
 8023668:	4b41      	ldr	r3, [pc, #260]	; (8023770 <ams_main_precharge_drive_function+0x140>)
 802366a:	2210      	movs	r2, #16
 802366c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r3) {
 802366e:	4b40      	ldr	r3, [pc, #256]	; (8023770 <ams_main_precharge_drive_function+0x140>)
 8023670:	781b      	ldrb	r3, [r3, #0]
 8023672:	3b09      	subs	r3, #9
 8023674:	2b08      	cmp	r3, #8
 8023676:	d854      	bhi.n	8023722 <ams_main_precharge_drive_function+0xf2>
 8023678:	a201      	add	r2, pc, #4	; (adr r2, 8023680 <ams_main_precharge_drive_function+0x50>)
 802367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802367e:	bf00      	nop
 8023680:	080236a5 	.word	0x080236a5
 8023684:	080236b3 	.word	0x080236b3
 8023688:	080236c1 	.word	0x080236c1
 802368c:	080236cf 	.word	0x080236cf
 8023690:	080236dd 	.word	0x080236dd
 8023694:	080236eb 	.word	0x080236eb
 8023698:	080236f9 	.word	0x080236f9
 802369c:	08023707 	.word	0x08023707
 80236a0:	08023715 	.word	0x08023715
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_MINUS:
           state_r3 = ams_main_precharge_drive_close_air_minus_function();
 80236a4:	f7ff fe04 	bl	80232b0 <ams_main_precharge_drive_close_air_minus_function>
 80236a8:	4603      	mov	r3, r0
 80236aa:	461a      	mov	r2, r3
 80236ac:	4b30      	ldr	r3, [pc, #192]	; (8023770 <ams_main_precharge_drive_function+0x140>)
 80236ae:	701a      	strb	r2, [r3, #0]
           break;
 80236b0:	e03a      	b.n	8023728 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_PRECHARGE:
           state_r3 = ams_main_precharge_drive_close_precharge_function();
 80236b2:	f7ff fe41 	bl	8023338 <ams_main_precharge_drive_close_precharge_function>
 80236b6:	4603      	mov	r3, r0
 80236b8:	461a      	mov	r2, r3
 80236ba:	4b2d      	ldr	r3, [pc, #180]	; (8023770 <ams_main_precharge_drive_function+0x140>)
 80236bc:	701a      	strb	r2, [r3, #0]
           break;
 80236be:	e033      	b.n	8023728 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR:
           state_r3 = ams_main_precharge_drive_error_function();
 80236c0:	f7ff fe7c 	bl	80233bc <ams_main_precharge_drive_error_function>
 80236c4:	4603      	mov	r3, r0
 80236c6:	461a      	mov	r2, r3
 80236c8:	4b29      	ldr	r3, [pc, #164]	; (8023770 <ams_main_precharge_drive_function+0x140>)
 80236ca:	701a      	strb	r2, [r3, #0]
           break;
 80236cc:	e02c      	b.n	8023728 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_WAIT:
           state_r3 = ams_main_precharge_drive_wait_function();
 80236ce:	f7ff fe8f 	bl	80233f0 <ams_main_precharge_drive_wait_function>
 80236d2:	4603      	mov	r3, r0
 80236d4:	461a      	mov	r2, r3
 80236d6:	4b26      	ldr	r3, [pc, #152]	; (8023770 <ams_main_precharge_drive_function+0x140>)
 80236d8:	701a      	strb	r2, [r3, #0]
           break;
 80236da:	e025      	b.n	8023728 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_PLUS:
           state_r3 = ams_main_precharge_drive_close_air_plus_function();
 80236dc:	f7ff fee6 	bl	80234ac <ams_main_precharge_drive_close_air_plus_function>
 80236e0:	4603      	mov	r3, r0
 80236e2:	461a      	mov	r2, r3
 80236e4:	4b22      	ldr	r3, [pc, #136]	; (8023770 <ams_main_precharge_drive_function+0x140>)
 80236e6:	701a      	strb	r2, [r3, #0]
           break;
 80236e8:	e01e      	b.n	8023728 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_OPEN_PRECHARGE:
           state_r3 = ams_main_precharge_drive_open_precharge_function();
 80236ea:	f7ff ff23 	bl	8023534 <ams_main_precharge_drive_open_precharge_function>
 80236ee:	4603      	mov	r3, r0
 80236f0:	461a      	mov	r2, r3
 80236f2:	4b1f      	ldr	r3, [pc, #124]	; (8023770 <ams_main_precharge_drive_function+0x140>)
 80236f4:	701a      	strb	r2, [r3, #0]
           break;
 80236f6:	e017      	b.n	8023728 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_EXIT:
           state_r3 = ams_main_precharge_drive_exit_function();
 80236f8:	f7ff ff60 	bl	80235bc <ams_main_precharge_drive_exit_function>
 80236fc:	4603      	mov	r3, r0
 80236fe:	461a      	mov	r2, r3
 8023700:	4b1b      	ldr	r3, [pc, #108]	; (8023770 <ams_main_precharge_drive_function+0x140>)
 8023702:	701a      	strb	r2, [r3, #0]
           break;
 8023704:	e010      	b.n	8023728 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_0:
           state_r3 = ams_main_precharge_drive_0_function();
 8023706:	f7ff ff71 	bl	80235ec <ams_main_precharge_drive_0_function>
 802370a:	4603      	mov	r3, r0
 802370c:	461a      	mov	r2, r3
 802370e:	4b18      	ldr	r3, [pc, #96]	; (8023770 <ams_main_precharge_drive_function+0x140>)
 8023710:	701a      	strb	r2, [r3, #0]
           break;
 8023712:	e009      	b.n	8023728 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_ENTRY:
           state_r3 = ams_main_precharge_drive_entry_function();
 8023714:	f7ff ff78 	bl	8023608 <ams_main_precharge_drive_entry_function>
 8023718:	4603      	mov	r3, r0
 802371a:	461a      	mov	r2, r3
 802371c:	4b14      	ldr	r3, [pc, #80]	; (8023770 <ams_main_precharge_drive_function+0x140>)
 802371e:	701a      	strb	r2, [r3, #0]
           break;
 8023720:	e002      	b.n	8023728 <ams_main_precharge_drive_function+0xf8>
       default:
           ams_error();
 8023722:	f7ff fcd0 	bl	80230c6 <ams_error>
           break;
 8023726:	bf00      	nop
   }

   if(ams_outputs.precharge_drive_complete) {
 8023728:	4b12      	ldr	r3, [pc, #72]	; (8023774 <ams_main_precharge_drive_function+0x144>)
 802372a:	781b      	ldrb	r3, [r3, #0]
 802372c:	2b00      	cmp	r3, #0
 802372e:	d008      	beq.n	8023742 <ams_main_precharge_drive_function+0x112>
       ams_outputs.precharge_drive_complete=0;
 8023730:	4b10      	ldr	r3, [pc, #64]	; (8023774 <ams_main_precharge_drive_function+0x144>)
 8023732:	2200      	movs	r2, #0
 8023734:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 8023736:	4b0c      	ldr	r3, [pc, #48]	; (8023768 <ams_main_precharge_drive_function+0x138>)
 8023738:	f04f 0200 	mov.w	r2, #0
 802373c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_DRIVE;
 802373e:	2312      	movs	r3, #18
 8023740:	e00b      	b.n	802375a <ams_main_precharge_drive_function+0x12a>
   }


   timer_r2 += ams_inputs.Ts;
 8023742:	4b0a      	ldr	r3, [pc, #40]	; (802376c <ams_main_precharge_drive_function+0x13c>)
 8023744:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023748:	4b07      	ldr	r3, [pc, #28]	; (8023768 <ams_main_precharge_drive_function+0x138>)
 802374a:	edd3 7a00 	vldr	s15, [r3]
 802374e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023752:	4b05      	ldr	r3, [pc, #20]	; (8023768 <ams_main_precharge_drive_function+0x138>)
 8023754:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE;
 8023758:	2308      	movs	r3, #8
}
 802375a:	4618      	mov	r0, r3
 802375c:	bdb0      	pop	{r4, r5, r7, pc}
 802375e:	bf00      	nop
 8023760:	d2f1a9fc 	.word	0xd2f1a9fc
 8023764:	3f50624d 	.word	0x3f50624d
 8023768:	20001a38 	.word	0x20001a38
 802376c:	2001c100 	.word	0x2001c100
 8023770:	20001a2e 	.word	0x20001a2e
 8023774:	2001c160 	.word	0x2001c160

08023778 <ams_main_drive_0_function>:

ams_state_t ams_main_drive_0_function() {
 8023778:	b480      	push	{r7}
 802377a:	af00      	add	r7, sp, #0
   if(1) {
       timer_r3 = 0;
 802377c:	4b04      	ldr	r3, [pc, #16]	; (8023790 <ams_main_drive_0_function+0x18>)
 802377e:	f04f 0200 	mov.w	r2, #0
 8023782:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_DRIVE_DRIVE;
 8023784:	2314      	movs	r3, #20
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_DRIVE_0;
}
 8023786:	4618      	mov	r0, r3
 8023788:	46bd      	mov	sp, r7
 802378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802378e:	4770      	bx	lr
 8023790:	20001a3c 	.word	0x20001a3c
 8023794:	00000000 	.word	0x00000000

08023798 <ams_main_drive_drive_function>:

ams_state_t ams_main_drive_drive_function() {
 8023798:	b580      	push	{r7, lr}
 802379a:	af00      	add	r7, sp, #0
   if((ams_inputs.minimum_cell_voltage<2.85)||!ams_inputs.drive) {
 802379c:	4b14      	ldr	r3, [pc, #80]	; (80237f0 <ams_main_drive_drive_function+0x58>)
 802379e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80237a2:	a311      	add	r3, pc, #68	; (adr r3, 80237e8 <ams_main_drive_drive_function+0x50>)
 80237a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237a8:	f7dd f98a 	bl	8000ac0 <__aeabi_dcmplt>
 80237ac:	4603      	mov	r3, r0
 80237ae:	2b00      	cmp	r3, #0
 80237b0:	d104      	bne.n	80237bc <ams_main_drive_drive_function+0x24>
 80237b2:	4b0f      	ldr	r3, [pc, #60]	; (80237f0 <ams_main_drive_drive_function+0x58>)
 80237b4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80237b8:	2b00      	cmp	r3, #0
 80237ba:	d105      	bne.n	80237c8 <ams_main_drive_drive_function+0x30>
       timer_r3 = 0;
 80237bc:	4b0d      	ldr	r3, [pc, #52]	; (80237f4 <ams_main_drive_drive_function+0x5c>)
 80237be:	f04f 0200 	mov.w	r2, #0
 80237c2:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_DRIVE_END_DRIVE;
 80237c4:	2315      	movs	r3, #21
 80237c6:	e00b      	b.n	80237e0 <ams_main_drive_drive_function+0x48>
   }

   timer_r3 += ams_inputs.Ts;
 80237c8:	4b09      	ldr	r3, [pc, #36]	; (80237f0 <ams_main_drive_drive_function+0x58>)
 80237ca:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80237ce:	4b09      	ldr	r3, [pc, #36]	; (80237f4 <ams_main_drive_drive_function+0x5c>)
 80237d0:	edd3 7a00 	vldr	s15, [r3]
 80237d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80237d8:	4b06      	ldr	r3, [pc, #24]	; (80237f4 <ams_main_drive_drive_function+0x5c>)
 80237da:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_DRIVE_DRIVE;
 80237de:	2314      	movs	r3, #20
}
 80237e0:	4618      	mov	r0, r3
 80237e2:	bd80      	pop	{r7, pc}
 80237e4:	f3af 8000 	nop.w
 80237e8:	cccccccd 	.word	0xcccccccd
 80237ec:	4006cccc 	.word	0x4006cccc
 80237f0:	2001c100 	.word	0x2001c100
 80237f4:	20001a3c 	.word	0x20001a3c

080237f8 <ams_main_drive_end_drive_function>:

ams_state_t ams_main_drive_end_drive_function() {
 80237f8:	b580      	push	{r7, lr}
 80237fa:	af00      	add	r7, sp, #0
   if((timer_r3 < 7)&&(fabsf(ams_inputs.accumulator_current)<0.001)) {
 80237fc:	4b30      	ldr	r3, [pc, #192]	; (80238c0 <ams_main_drive_end_drive_function+0xc8>)
 80237fe:	edd3 7a00 	vldr	s15, [r3]
 8023802:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8023806:	eef4 7ac7 	vcmpe.f32	s15, s14
 802380a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802380e:	d528      	bpl.n	8023862 <ams_main_drive_end_drive_function+0x6a>
 8023810:	4b2c      	ldr	r3, [pc, #176]	; (80238c4 <ams_main_drive_end_drive_function+0xcc>)
 8023812:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8023816:	4610      	mov	r0, r2
 8023818:	4619      	mov	r1, r3
 802381a:	f7dd f9d7 	bl	8000bcc <__aeabi_d2f>
 802381e:	ee07 0a90 	vmov	s15, r0
 8023822:	eef0 7ae7 	vabs.f32	s15, s15
 8023826:	ee17 0a90 	vmov	r0, s15
 802382a:	f7dc fe7f 	bl	800052c <__aeabi_f2d>
 802382e:	a322      	add	r3, pc, #136	; (adr r3, 80238b8 <ams_main_drive_end_drive_function+0xc0>)
 8023830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023834:	f7dd f944 	bl	8000ac0 <__aeabi_dcmplt>
 8023838:	4603      	mov	r3, r0
 802383a:	2b00      	cmp	r3, #0
 802383c:	d011      	beq.n	8023862 <ams_main_drive_end_drive_function+0x6a>
       ams_outputs.close_air_plus=0;
 802383e:	4b22      	ldr	r3, [pc, #136]	; (80238c8 <ams_main_drive_end_drive_function+0xd0>)
 8023840:	2200      	movs	r2, #0
 8023842:	70da      	strb	r2, [r3, #3]
       ams_outputs.close_air_minus=0;
 8023844:	4b20      	ldr	r3, [pc, #128]	; (80238c8 <ams_main_drive_end_drive_function+0xd0>)
 8023846:	2200      	movs	r2, #0
 8023848:	719a      	strb	r2, [r3, #6]
       ams_outputs.close_precharge=0;
 802384a:	4b1f      	ldr	r3, [pc, #124]	; (80238c8 <ams_main_drive_end_drive_function+0xd0>)
 802384c:	2200      	movs	r2, #0
 802384e:	71da      	strb	r2, [r3, #7]
       ams_outputs.drive_complete=1;
 8023850:	4b1d      	ldr	r3, [pc, #116]	; (80238c8 <ams_main_drive_end_drive_function+0xd0>)
 8023852:	2201      	movs	r2, #1
 8023854:	709a      	strb	r2, [r3, #2]
       timer_r3 = 0;
 8023856:	4b1a      	ldr	r3, [pc, #104]	; (80238c0 <ams_main_drive_end_drive_function+0xc8>)
 8023858:	f04f 0200 	mov.w	r2, #0
 802385c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_DRIVE_EXIT;
 802385e:	2316      	movs	r3, #22
 8023860:	e027      	b.n	80238b2 <ams_main_drive_end_drive_function+0xba>
   }

   if((timer_r3 > 7)) {
 8023862:	4b17      	ldr	r3, [pc, #92]	; (80238c0 <ams_main_drive_end_drive_function+0xc8>)
 8023864:	edd3 7a00 	vldr	s15, [r3]
 8023868:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 802386c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023874:	dd11      	ble.n	802389a <ams_main_drive_end_drive_function+0xa2>
       ams_outputs.close_air_plus=0;
 8023876:	4b14      	ldr	r3, [pc, #80]	; (80238c8 <ams_main_drive_end_drive_function+0xd0>)
 8023878:	2200      	movs	r2, #0
 802387a:	70da      	strb	r2, [r3, #3]
       ams_outputs.close_air_minus=0;
 802387c:	4b12      	ldr	r3, [pc, #72]	; (80238c8 <ams_main_drive_end_drive_function+0xd0>)
 802387e:	2200      	movs	r2, #0
 8023880:	719a      	strb	r2, [r3, #6]
       ams_outputs.close_precharge=0;
 8023882:	4b11      	ldr	r3, [pc, #68]	; (80238c8 <ams_main_drive_end_drive_function+0xd0>)
 8023884:	2200      	movs	r2, #0
 8023886:	71da      	strb	r2, [r3, #7]
       ams_outputs.error=131;
 8023888:	4b0f      	ldr	r3, [pc, #60]	; (80238c8 <ams_main_drive_end_drive_function+0xd0>)
 802388a:	2283      	movs	r2, #131	; 0x83
 802388c:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 802388e:	4b0c      	ldr	r3, [pc, #48]	; (80238c0 <ams_main_drive_end_drive_function+0xc8>)
 8023890:	f04f 0200 	mov.w	r2, #0
 8023894:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_DRIVE_FORCE_QUIT;
 8023896:	2317      	movs	r3, #23
 8023898:	e00b      	b.n	80238b2 <ams_main_drive_end_drive_function+0xba>
   }

   timer_r3 += ams_inputs.Ts;
 802389a:	4b0a      	ldr	r3, [pc, #40]	; (80238c4 <ams_main_drive_end_drive_function+0xcc>)
 802389c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80238a0:	4b07      	ldr	r3, [pc, #28]	; (80238c0 <ams_main_drive_end_drive_function+0xc8>)
 80238a2:	edd3 7a00 	vldr	s15, [r3]
 80238a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80238aa:	4b05      	ldr	r3, [pc, #20]	; (80238c0 <ams_main_drive_end_drive_function+0xc8>)
 80238ac:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_DRIVE_END_DRIVE;
 80238b0:	2315      	movs	r3, #21
}
 80238b2:	4618      	mov	r0, r3
 80238b4:	bd80      	pop	{r7, pc}
 80238b6:	bf00      	nop
 80238b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80238bc:	3f50624d 	.word	0x3f50624d
 80238c0:	20001a3c 	.word	0x20001a3c
 80238c4:	2001c100 	.word	0x2001c100
 80238c8:	2001c160 	.word	0x2001c160

080238cc <ams_main_drive_exit_function>:

ams_state_t ams_main_drive_exit_function() {
 80238cc:	b480      	push	{r7}
 80238ce:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 80238d0:	4b08      	ldr	r3, [pc, #32]	; (80238f4 <ams_main_drive_exit_function+0x28>)
 80238d2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80238d6:	4b08      	ldr	r3, [pc, #32]	; (80238f8 <ams_main_drive_exit_function+0x2c>)
 80238d8:	edd3 7a00 	vldr	s15, [r3]
 80238dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80238e0:	4b05      	ldr	r3, [pc, #20]	; (80238f8 <ams_main_drive_exit_function+0x2c>)
 80238e2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_DRIVE_EXIT;
 80238e6:	2316      	movs	r3, #22
}
 80238e8:	4618      	mov	r0, r3
 80238ea:	46bd      	mov	sp, r7
 80238ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238f0:	4770      	bx	lr
 80238f2:	bf00      	nop
 80238f4:	2001c100 	.word	0x2001c100
 80238f8:	20001a3c 	.word	0x20001a3c

080238fc <ams_main_drive_force_quit_function>:

ams_state_t ams_main_drive_force_quit_function() {
 80238fc:	b480      	push	{r7}
 80238fe:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8023900:	4b08      	ldr	r3, [pc, #32]	; (8023924 <ams_main_drive_force_quit_function+0x28>)
 8023902:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023906:	4b08      	ldr	r3, [pc, #32]	; (8023928 <ams_main_drive_force_quit_function+0x2c>)
 8023908:	edd3 7a00 	vldr	s15, [r3]
 802390c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023910:	4b05      	ldr	r3, [pc, #20]	; (8023928 <ams_main_drive_force_quit_function+0x2c>)
 8023912:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_DRIVE_FORCE_QUIT;
 8023916:	2317      	movs	r3, #23
}
 8023918:	4618      	mov	r0, r3
 802391a:	46bd      	mov	sp, r7
 802391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023920:	4770      	bx	lr
 8023922:	bf00      	nop
 8023924:	2001c100 	.word	0x2001c100
 8023928:	20001a3c 	.word	0x20001a3c
 802392c:	00000000 	.word	0x00000000

08023930 <ams_main_drive_function>:

ams_state_t ams_main_drive_function() {
 8023930:	b5b0      	push	{r4, r5, r7, lr}
 8023932:	af00      	add	r7, sp, #0
   if(timer_r2 < 0.001*ams_inputs.Ts) {
 8023934:	4b3a      	ldr	r3, [pc, #232]	; (8023a20 <ams_main_drive_function+0xf0>)
 8023936:	681b      	ldr	r3, [r3, #0]
 8023938:	4618      	mov	r0, r3
 802393a:	f7dc fdf7 	bl	800052c <__aeabi_f2d>
 802393e:	4604      	mov	r4, r0
 8023940:	460d      	mov	r5, r1
 8023942:	4b38      	ldr	r3, [pc, #224]	; (8023a24 <ams_main_drive_function+0xf4>)
 8023944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023946:	4618      	mov	r0, r3
 8023948:	f7dc fdf0 	bl	800052c <__aeabi_f2d>
 802394c:	a332      	add	r3, pc, #200	; (adr r3, 8023a18 <ams_main_drive_function+0xe8>)
 802394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023952:	f7dc fe43 	bl	80005dc <__aeabi_dmul>
 8023956:	4602      	mov	r2, r0
 8023958:	460b      	mov	r3, r1
 802395a:	4620      	mov	r0, r4
 802395c:	4629      	mov	r1, r5
 802395e:	f7dd f8af 	bl	8000ac0 <__aeabi_dcmplt>
 8023962:	4603      	mov	r3, r0
 8023964:	2b00      	cmp	r3, #0
 8023966:	d002      	beq.n	802396e <ams_main_drive_function+0x3e>
       state_r3 = STATE_AMS_MAIN_DRIVE_0;
 8023968:	4b2f      	ldr	r3, [pc, #188]	; (8023a28 <ams_main_drive_function+0xf8>)
 802396a:	2213      	movs	r2, #19
 802396c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r3) {
 802396e:	4b2e      	ldr	r3, [pc, #184]	; (8023a28 <ams_main_drive_function+0xf8>)
 8023970:	781b      	ldrb	r3, [r3, #0]
 8023972:	3b13      	subs	r3, #19
 8023974:	2b04      	cmp	r3, #4
 8023976:	d830      	bhi.n	80239da <ams_main_drive_function+0xaa>
 8023978:	a201      	add	r2, pc, #4	; (adr r2, 8023980 <ams_main_drive_function+0x50>)
 802397a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802397e:	bf00      	nop
 8023980:	08023995 	.word	0x08023995
 8023984:	080239a3 	.word	0x080239a3
 8023988:	080239b1 	.word	0x080239b1
 802398c:	080239bf 	.word	0x080239bf
 8023990:	080239cd 	.word	0x080239cd
       case STATE_AMS_MAIN_DRIVE_0:
           state_r3 = ams_main_drive_0_function();
 8023994:	f7ff fef0 	bl	8023778 <ams_main_drive_0_function>
 8023998:	4603      	mov	r3, r0
 802399a:	461a      	mov	r2, r3
 802399c:	4b22      	ldr	r3, [pc, #136]	; (8023a28 <ams_main_drive_function+0xf8>)
 802399e:	701a      	strb	r2, [r3, #0]
           break;
 80239a0:	e01e      	b.n	80239e0 <ams_main_drive_function+0xb0>
       case STATE_AMS_MAIN_DRIVE_DRIVE:
           state_r3 = ams_main_drive_drive_function();
 80239a2:	f7ff fef9 	bl	8023798 <ams_main_drive_drive_function>
 80239a6:	4603      	mov	r3, r0
 80239a8:	461a      	mov	r2, r3
 80239aa:	4b1f      	ldr	r3, [pc, #124]	; (8023a28 <ams_main_drive_function+0xf8>)
 80239ac:	701a      	strb	r2, [r3, #0]
           break;
 80239ae:	e017      	b.n	80239e0 <ams_main_drive_function+0xb0>
       case STATE_AMS_MAIN_DRIVE_END_DRIVE:
           state_r3 = ams_main_drive_end_drive_function();
 80239b0:	f7ff ff22 	bl	80237f8 <ams_main_drive_end_drive_function>
 80239b4:	4603      	mov	r3, r0
 80239b6:	461a      	mov	r2, r3
 80239b8:	4b1b      	ldr	r3, [pc, #108]	; (8023a28 <ams_main_drive_function+0xf8>)
 80239ba:	701a      	strb	r2, [r3, #0]
           break;
 80239bc:	e010      	b.n	80239e0 <ams_main_drive_function+0xb0>
       case STATE_AMS_MAIN_DRIVE_EXIT:
           state_r3 = ams_main_drive_exit_function();
 80239be:	f7ff ff85 	bl	80238cc <ams_main_drive_exit_function>
 80239c2:	4603      	mov	r3, r0
 80239c4:	461a      	mov	r2, r3
 80239c6:	4b18      	ldr	r3, [pc, #96]	; (8023a28 <ams_main_drive_function+0xf8>)
 80239c8:	701a      	strb	r2, [r3, #0]
           break;
 80239ca:	e009      	b.n	80239e0 <ams_main_drive_function+0xb0>
       case STATE_AMS_MAIN_DRIVE_FORCE_QUIT:
           state_r3 = ams_main_drive_force_quit_function();
 80239cc:	f7ff ff96 	bl	80238fc <ams_main_drive_force_quit_function>
 80239d0:	4603      	mov	r3, r0
 80239d2:	461a      	mov	r2, r3
 80239d4:	4b14      	ldr	r3, [pc, #80]	; (8023a28 <ams_main_drive_function+0xf8>)
 80239d6:	701a      	strb	r2, [r3, #0]
           break;
 80239d8:	e002      	b.n	80239e0 <ams_main_drive_function+0xb0>
       default:
           ams_error();
 80239da:	f7ff fb74 	bl	80230c6 <ams_error>
           break;
 80239de:	bf00      	nop
   }

   if(ams_outputs.drive_complete) {
 80239e0:	4b12      	ldr	r3, [pc, #72]	; (8023a2c <ams_main_drive_function+0xfc>)
 80239e2:	789b      	ldrb	r3, [r3, #2]
 80239e4:	2b00      	cmp	r3, #0
 80239e6:	d008      	beq.n	80239fa <ams_main_drive_function+0xca>
       ams_outputs.drive_complete=0;
 80239e8:	4b10      	ldr	r3, [pc, #64]	; (8023a2c <ams_main_drive_function+0xfc>)
 80239ea:	2200      	movs	r2, #0
 80239ec:	709a      	strb	r2, [r3, #2]
       timer_r2 = 0;
 80239ee:	4b0c      	ldr	r3, [pc, #48]	; (8023a20 <ams_main_drive_function+0xf0>)
 80239f0:	f04f 0200 	mov.w	r2, #0
 80239f4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_IDLE;
 80239f6:	2328      	movs	r3, #40	; 0x28
 80239f8:	e00b      	b.n	8023a12 <ams_main_drive_function+0xe2>
   }


   timer_r2 += ams_inputs.Ts;
 80239fa:	4b0a      	ldr	r3, [pc, #40]	; (8023a24 <ams_main_drive_function+0xf4>)
 80239fc:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023a00:	4b07      	ldr	r3, [pc, #28]	; (8023a20 <ams_main_drive_function+0xf0>)
 8023a02:	edd3 7a00 	vldr	s15, [r3]
 8023a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023a0a:	4b05      	ldr	r3, [pc, #20]	; (8023a20 <ams_main_drive_function+0xf0>)
 8023a0c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_DRIVE;
 8023a10:	2312      	movs	r3, #18
}
 8023a12:	4618      	mov	r0, r3
 8023a14:	bdb0      	pop	{r4, r5, r7, pc}
 8023a16:	bf00      	nop
 8023a18:	d2f1a9fc 	.word	0xd2f1a9fc
 8023a1c:	3f50624d 	.word	0x3f50624d
 8023a20:	20001a38 	.word	0x20001a38
 8023a24:	2001c100 	.word	0x2001c100
 8023a28:	20001a2e 	.word	0x20001a2e
 8023a2c:	2001c160 	.word	0x2001c160

08023a30 <ams_main_precharge_charge_close_air_minus_function>:

ams_state_t ams_main_precharge_charge_close_air_minus_function() {
 8023a30:	b480      	push	{r7}
 8023a32:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.air_minus_closed) {
 8023a34:	4b1d      	ldr	r3, [pc, #116]	; (8023aac <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 8023a36:	edd3 7a00 	vldr	s15, [r3]
 8023a3a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a46:	d50c      	bpl.n	8023a62 <ams_main_precharge_charge_close_air_minus_function+0x32>
 8023a48:	4b19      	ldr	r3, [pc, #100]	; (8023ab0 <ams_main_precharge_charge_close_air_minus_function+0x80>)
 8023a4a:	7a1b      	ldrb	r3, [r3, #8]
 8023a4c:	2b00      	cmp	r3, #0
 8023a4e:	d008      	beq.n	8023a62 <ams_main_precharge_charge_close_air_minus_function+0x32>
       ams_outputs.close_precharge=1;
 8023a50:	4b18      	ldr	r3, [pc, #96]	; (8023ab4 <ams_main_precharge_charge_close_air_minus_function+0x84>)
 8023a52:	2201      	movs	r2, #1
 8023a54:	71da      	strb	r2, [r3, #7]
       timer_r3 = 0;
 8023a56:	4b15      	ldr	r3, [pc, #84]	; (8023aac <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 8023a58:	f04f 0200 	mov.w	r2, #0
 8023a5c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_PRECHARGE;
 8023a5e:	231a      	movs	r3, #26
 8023a60:	e01e      	b.n	8023aa0 <ams_main_precharge_charge_close_air_minus_function+0x70>
   }

   if((timer_r3 > 2)) {
 8023a62:	4b12      	ldr	r3, [pc, #72]	; (8023aac <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 8023a64:	edd3 7a00 	vldr	s15, [r3]
 8023a68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a74:	dd08      	ble.n	8023a88 <ams_main_precharge_charge_close_air_minus_function+0x58>
       ams_outputs.error=122;
 8023a76:	4b0f      	ldr	r3, [pc, #60]	; (8023ab4 <ams_main_precharge_charge_close_air_minus_function+0x84>)
 8023a78:	227a      	movs	r2, #122	; 0x7a
 8023a7a:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023a7c:	4b0b      	ldr	r3, [pc, #44]	; (8023aac <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 8023a7e:	f04f 0200 	mov.w	r2, #0
 8023a82:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 8023a84:	231b      	movs	r3, #27
 8023a86:	e00b      	b.n	8023aa0 <ams_main_precharge_charge_close_air_minus_function+0x70>
   }

   timer_r3 += ams_inputs.Ts;
 8023a88:	4b09      	ldr	r3, [pc, #36]	; (8023ab0 <ams_main_precharge_charge_close_air_minus_function+0x80>)
 8023a8a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023a8e:	4b07      	ldr	r3, [pc, #28]	; (8023aac <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 8023a90:	edd3 7a00 	vldr	s15, [r3]
 8023a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023a98:	4b04      	ldr	r3, [pc, #16]	; (8023aac <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 8023a9a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_MINUS;
 8023a9e:	2319      	movs	r3, #25
}
 8023aa0:	4618      	mov	r0, r3
 8023aa2:	46bd      	mov	sp, r7
 8023aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023aa8:	4770      	bx	lr
 8023aaa:	bf00      	nop
 8023aac:	20001a3c 	.word	0x20001a3c
 8023ab0:	2001c100 	.word	0x2001c100
 8023ab4:	2001c160 	.word	0x2001c160

08023ab8 <ams_main_precharge_charge_close_precharge_function>:

ams_state_t ams_main_precharge_charge_close_precharge_function() {
 8023ab8:	b480      	push	{r7}
 8023aba:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.precharge_closed) {
 8023abc:	4b1c      	ldr	r3, [pc, #112]	; (8023b30 <ams_main_precharge_charge_close_precharge_function+0x78>)
 8023abe:	edd3 7a00 	vldr	s15, [r3]
 8023ac2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ace:	d50a      	bpl.n	8023ae6 <ams_main_precharge_charge_close_precharge_function+0x2e>
 8023ad0:	4b18      	ldr	r3, [pc, #96]	; (8023b34 <ams_main_precharge_charge_close_precharge_function+0x7c>)
 8023ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8023ad6:	2b00      	cmp	r3, #0
 8023ad8:	d005      	beq.n	8023ae6 <ams_main_precharge_charge_close_precharge_function+0x2e>
       timer_r3 = 0;
 8023ada:	4b15      	ldr	r3, [pc, #84]	; (8023b30 <ams_main_precharge_charge_close_precharge_function+0x78>)
 8023adc:	f04f 0200 	mov.w	r2, #0
 8023ae0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_WAIT;
 8023ae2:	231c      	movs	r3, #28
 8023ae4:	e01e      	b.n	8023b24 <ams_main_precharge_charge_close_precharge_function+0x6c>
   }

   if((timer_r3 > 2)) {
 8023ae6:	4b12      	ldr	r3, [pc, #72]	; (8023b30 <ams_main_precharge_charge_close_precharge_function+0x78>)
 8023ae8:	edd3 7a00 	vldr	s15, [r3]
 8023aec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023af0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023af8:	dd08      	ble.n	8023b0c <ams_main_precharge_charge_close_precharge_function+0x54>
       ams_outputs.error=123;
 8023afa:	4b0f      	ldr	r3, [pc, #60]	; (8023b38 <ams_main_precharge_charge_close_precharge_function+0x80>)
 8023afc:	227b      	movs	r2, #123	; 0x7b
 8023afe:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023b00:	4b0b      	ldr	r3, [pc, #44]	; (8023b30 <ams_main_precharge_charge_close_precharge_function+0x78>)
 8023b02:	f04f 0200 	mov.w	r2, #0
 8023b06:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 8023b08:	231b      	movs	r3, #27
 8023b0a:	e00b      	b.n	8023b24 <ams_main_precharge_charge_close_precharge_function+0x6c>
   }

   timer_r3 += ams_inputs.Ts;
 8023b0c:	4b09      	ldr	r3, [pc, #36]	; (8023b34 <ams_main_precharge_charge_close_precharge_function+0x7c>)
 8023b0e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023b12:	4b07      	ldr	r3, [pc, #28]	; (8023b30 <ams_main_precharge_charge_close_precharge_function+0x78>)
 8023b14:	edd3 7a00 	vldr	s15, [r3]
 8023b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023b1c:	4b04      	ldr	r3, [pc, #16]	; (8023b30 <ams_main_precharge_charge_close_precharge_function+0x78>)
 8023b1e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_PRECHARGE;
 8023b22:	231a      	movs	r3, #26
}
 8023b24:	4618      	mov	r0, r3
 8023b26:	46bd      	mov	sp, r7
 8023b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b2c:	4770      	bx	lr
 8023b2e:	bf00      	nop
 8023b30:	20001a3c 	.word	0x20001a3c
 8023b34:	2001c100 	.word	0x2001c100
 8023b38:	2001c160 	.word	0x2001c160

08023b3c <ams_main_precharge_charge_error_function>:

ams_state_t ams_main_precharge_charge_error_function() {
 8023b3c:	b480      	push	{r7}
 8023b3e:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8023b40:	4b08      	ldr	r3, [pc, #32]	; (8023b64 <ams_main_precharge_charge_error_function+0x28>)
 8023b42:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023b46:	4b08      	ldr	r3, [pc, #32]	; (8023b68 <ams_main_precharge_charge_error_function+0x2c>)
 8023b48:	edd3 7a00 	vldr	s15, [r3]
 8023b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023b50:	4b05      	ldr	r3, [pc, #20]	; (8023b68 <ams_main_precharge_charge_error_function+0x2c>)
 8023b52:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 8023b56:	231b      	movs	r3, #27
}
 8023b58:	4618      	mov	r0, r3
 8023b5a:	46bd      	mov	sp, r7
 8023b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b60:	4770      	bx	lr
 8023b62:	bf00      	nop
 8023b64:	2001c100 	.word	0x2001c100
 8023b68:	20001a3c 	.word	0x20001a3c
 8023b6c:	00000000 	.word	0x00000000

08023b70 <ams_main_precharge_charge_wait_function>:

ams_state_t ams_main_precharge_charge_wait_function() {
 8023b70:	b580      	push	{r7, lr}
 8023b72:	af00      	add	r7, sp, #0
   if((timer_r3 > 5)&&(timer_r3 < 30)&&(ams_inputs.accumulator_voltage*0.95<ams_inputs.vehicle_voltage)) {
 8023b74:	4b2a      	ldr	r3, [pc, #168]	; (8023c20 <ams_main_precharge_charge_wait_function+0xb0>)
 8023b76:	edd3 7a00 	vldr	s15, [r3]
 8023b7a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8023b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b86:	dd26      	ble.n	8023bd6 <ams_main_precharge_charge_wait_function+0x66>
 8023b88:	4b25      	ldr	r3, [pc, #148]	; (8023c20 <ams_main_precharge_charge_wait_function+0xb0>)
 8023b8a:	edd3 7a00 	vldr	s15, [r3]
 8023b8e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8023b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b9a:	d51c      	bpl.n	8023bd6 <ams_main_precharge_charge_wait_function+0x66>
 8023b9c:	4b21      	ldr	r3, [pc, #132]	; (8023c24 <ams_main_precharge_charge_wait_function+0xb4>)
 8023b9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023ba2:	a31d      	add	r3, pc, #116	; (adr r3, 8023c18 <ams_main_precharge_charge_wait_function+0xa8>)
 8023ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ba8:	f7dc fd18 	bl	80005dc <__aeabi_dmul>
 8023bac:	4602      	mov	r2, r0
 8023bae:	460b      	mov	r3, r1
 8023bb0:	4610      	mov	r0, r2
 8023bb2:	4619      	mov	r1, r3
 8023bb4:	4b1b      	ldr	r3, [pc, #108]	; (8023c24 <ams_main_precharge_charge_wait_function+0xb4>)
 8023bb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8023bba:	f7dc ff81 	bl	8000ac0 <__aeabi_dcmplt>
 8023bbe:	4603      	mov	r3, r0
 8023bc0:	2b00      	cmp	r3, #0
 8023bc2:	d008      	beq.n	8023bd6 <ams_main_precharge_charge_wait_function+0x66>
       ams_outputs.close_air_plus=1;
 8023bc4:	4b18      	ldr	r3, [pc, #96]	; (8023c28 <ams_main_precharge_charge_wait_function+0xb8>)
 8023bc6:	2201      	movs	r2, #1
 8023bc8:	70da      	strb	r2, [r3, #3]
       timer_r3 = 0;
 8023bca:	4b15      	ldr	r3, [pc, #84]	; (8023c20 <ams_main_precharge_charge_wait_function+0xb0>)
 8023bcc:	f04f 0200 	mov.w	r2, #0
 8023bd0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_PLUS;
 8023bd2:	231d      	movs	r3, #29
 8023bd4:	e01e      	b.n	8023c14 <ams_main_precharge_charge_wait_function+0xa4>
   }

   if((timer_r3 > 30)) {
 8023bd6:	4b12      	ldr	r3, [pc, #72]	; (8023c20 <ams_main_precharge_charge_wait_function+0xb0>)
 8023bd8:	edd3 7a00 	vldr	s15, [r3]
 8023bdc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8023be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023be8:	dd08      	ble.n	8023bfc <ams_main_precharge_charge_wait_function+0x8c>
       ams_outputs.error=124;
 8023bea:	4b0f      	ldr	r3, [pc, #60]	; (8023c28 <ams_main_precharge_charge_wait_function+0xb8>)
 8023bec:	227c      	movs	r2, #124	; 0x7c
 8023bee:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023bf0:	4b0b      	ldr	r3, [pc, #44]	; (8023c20 <ams_main_precharge_charge_wait_function+0xb0>)
 8023bf2:	f04f 0200 	mov.w	r2, #0
 8023bf6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 8023bf8:	231b      	movs	r3, #27
 8023bfa:	e00b      	b.n	8023c14 <ams_main_precharge_charge_wait_function+0xa4>
   }

   timer_r3 += ams_inputs.Ts;
 8023bfc:	4b09      	ldr	r3, [pc, #36]	; (8023c24 <ams_main_precharge_charge_wait_function+0xb4>)
 8023bfe:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023c02:	4b07      	ldr	r3, [pc, #28]	; (8023c20 <ams_main_precharge_charge_wait_function+0xb0>)
 8023c04:	edd3 7a00 	vldr	s15, [r3]
 8023c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023c0c:	4b04      	ldr	r3, [pc, #16]	; (8023c20 <ams_main_precharge_charge_wait_function+0xb0>)
 8023c0e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_WAIT;
 8023c12:	231c      	movs	r3, #28
}
 8023c14:	4618      	mov	r0, r3
 8023c16:	bd80      	pop	{r7, pc}
 8023c18:	66666666 	.word	0x66666666
 8023c1c:	3fee6666 	.word	0x3fee6666
 8023c20:	20001a3c 	.word	0x20001a3c
 8023c24:	2001c100 	.word	0x2001c100
 8023c28:	2001c160 	.word	0x2001c160

08023c2c <ams_main_precharge_charge_close_air_plus_function>:

ams_state_t ams_main_precharge_charge_close_air_plus_function() {
 8023c2c:	b480      	push	{r7}
 8023c2e:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.air_plus_closed) {
 8023c30:	4b1d      	ldr	r3, [pc, #116]	; (8023ca8 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 8023c32:	edd3 7a00 	vldr	s15, [r3]
 8023c36:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c42:	d50d      	bpl.n	8023c60 <ams_main_precharge_charge_close_air_plus_function+0x34>
 8023c44:	4b19      	ldr	r3, [pc, #100]	; (8023cac <ams_main_precharge_charge_close_air_plus_function+0x80>)
 8023c46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023c4a:	2b00      	cmp	r3, #0
 8023c4c:	d008      	beq.n	8023c60 <ams_main_precharge_charge_close_air_plus_function+0x34>
       ams_outputs.close_precharge=0;
 8023c4e:	4b18      	ldr	r3, [pc, #96]	; (8023cb0 <ams_main_precharge_charge_close_air_plus_function+0x84>)
 8023c50:	2200      	movs	r2, #0
 8023c52:	71da      	strb	r2, [r3, #7]
       timer_r3 = 0;
 8023c54:	4b14      	ldr	r3, [pc, #80]	; (8023ca8 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 8023c56:	f04f 0200 	mov.w	r2, #0
 8023c5a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_OPEN_PRECHARGE;
 8023c5c:	231e      	movs	r3, #30
 8023c5e:	e01e      	b.n	8023c9e <ams_main_precharge_charge_close_air_plus_function+0x72>
   }

   if((timer_r3 > 2)) {
 8023c60:	4b11      	ldr	r3, [pc, #68]	; (8023ca8 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 8023c62:	edd3 7a00 	vldr	s15, [r3]
 8023c66:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c72:	dd08      	ble.n	8023c86 <ams_main_precharge_charge_close_air_plus_function+0x5a>
       ams_outputs.error=125;
 8023c74:	4b0e      	ldr	r3, [pc, #56]	; (8023cb0 <ams_main_precharge_charge_close_air_plus_function+0x84>)
 8023c76:	227d      	movs	r2, #125	; 0x7d
 8023c78:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023c7a:	4b0b      	ldr	r3, [pc, #44]	; (8023ca8 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 8023c7c:	f04f 0200 	mov.w	r2, #0
 8023c80:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 8023c82:	231b      	movs	r3, #27
 8023c84:	e00b      	b.n	8023c9e <ams_main_precharge_charge_close_air_plus_function+0x72>
   }

   timer_r3 += ams_inputs.Ts;
 8023c86:	4b09      	ldr	r3, [pc, #36]	; (8023cac <ams_main_precharge_charge_close_air_plus_function+0x80>)
 8023c88:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023c8c:	4b06      	ldr	r3, [pc, #24]	; (8023ca8 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 8023c8e:	edd3 7a00 	vldr	s15, [r3]
 8023c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023c96:	4b04      	ldr	r3, [pc, #16]	; (8023ca8 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 8023c98:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_PLUS;
 8023c9c:	231d      	movs	r3, #29
}
 8023c9e:	4618      	mov	r0, r3
 8023ca0:	46bd      	mov	sp, r7
 8023ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ca6:	4770      	bx	lr
 8023ca8:	20001a3c 	.word	0x20001a3c
 8023cac:	2001c100 	.word	0x2001c100
 8023cb0:	2001c160 	.word	0x2001c160

08023cb4 <ams_main_precharge_charge_open_precharge_function>:

ams_state_t ams_main_precharge_charge_open_precharge_function() {
 8023cb4:	b480      	push	{r7}
 8023cb6:	af00      	add	r7, sp, #0
   if((timer_r3 > 2)) {
 8023cb8:	4b1d      	ldr	r3, [pc, #116]	; (8023d30 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 8023cba:	edd3 7a00 	vldr	s15, [r3]
 8023cbe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023cca:	dd08      	ble.n	8023cde <ams_main_precharge_charge_open_precharge_function+0x2a>
       ams_outputs.error=126;
 8023ccc:	4b19      	ldr	r3, [pc, #100]	; (8023d34 <ams_main_precharge_charge_open_precharge_function+0x80>)
 8023cce:	227e      	movs	r2, #126	; 0x7e
 8023cd0:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023cd2:	4b17      	ldr	r3, [pc, #92]	; (8023d30 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 8023cd4:	f04f 0200 	mov.w	r2, #0
 8023cd8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 8023cda:	231b      	movs	r3, #27
 8023cdc:	e023      	b.n	8023d26 <ams_main_precharge_charge_open_precharge_function+0x72>
   }

   if((timer_r3 < 2)&&!ams_inputs.precharge_closed) {
 8023cde:	4b14      	ldr	r3, [pc, #80]	; (8023d30 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 8023ce0:	edd3 7a00 	vldr	s15, [r3]
 8023ce4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023cf0:	d50d      	bpl.n	8023d0e <ams_main_precharge_charge_open_precharge_function+0x5a>
 8023cf2:	4b11      	ldr	r3, [pc, #68]	; (8023d38 <ams_main_precharge_charge_open_precharge_function+0x84>)
 8023cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8023cf8:	2b00      	cmp	r3, #0
 8023cfa:	d108      	bne.n	8023d0e <ams_main_precharge_charge_open_precharge_function+0x5a>
       ams_outputs.precharge_charge_complete=1;
 8023cfc:	4b0d      	ldr	r3, [pc, #52]	; (8023d34 <ams_main_precharge_charge_open_precharge_function+0x80>)
 8023cfe:	2201      	movs	r2, #1
 8023d00:	715a      	strb	r2, [r3, #5]
       timer_r3 = 0;
 8023d02:	4b0b      	ldr	r3, [pc, #44]	; (8023d30 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 8023d04:	f04f 0200 	mov.w	r2, #0
 8023d08:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_EXIT;
 8023d0a:	231f      	movs	r3, #31
 8023d0c:	e00b      	b.n	8023d26 <ams_main_precharge_charge_open_precharge_function+0x72>
   }

   timer_r3 += ams_inputs.Ts;
 8023d0e:	4b0a      	ldr	r3, [pc, #40]	; (8023d38 <ams_main_precharge_charge_open_precharge_function+0x84>)
 8023d10:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023d14:	4b06      	ldr	r3, [pc, #24]	; (8023d30 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 8023d16:	edd3 7a00 	vldr	s15, [r3]
 8023d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023d1e:	4b04      	ldr	r3, [pc, #16]	; (8023d30 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 8023d20:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_OPEN_PRECHARGE;
 8023d24:	231e      	movs	r3, #30
}
 8023d26:	4618      	mov	r0, r3
 8023d28:	46bd      	mov	sp, r7
 8023d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d2e:	4770      	bx	lr
 8023d30:	20001a3c 	.word	0x20001a3c
 8023d34:	2001c160 	.word	0x2001c160
 8023d38:	2001c100 	.word	0x2001c100

08023d3c <ams_main_precharge_charge_exit_function>:

ams_state_t ams_main_precharge_charge_exit_function() {
 8023d3c:	b480      	push	{r7}
 8023d3e:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8023d40:	4b08      	ldr	r3, [pc, #32]	; (8023d64 <ams_main_precharge_charge_exit_function+0x28>)
 8023d42:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023d46:	4b08      	ldr	r3, [pc, #32]	; (8023d68 <ams_main_precharge_charge_exit_function+0x2c>)
 8023d48:	edd3 7a00 	vldr	s15, [r3]
 8023d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023d50:	4b05      	ldr	r3, [pc, #20]	; (8023d68 <ams_main_precharge_charge_exit_function+0x2c>)
 8023d52:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_EXIT;
 8023d56:	231f      	movs	r3, #31
}
 8023d58:	4618      	mov	r0, r3
 8023d5a:	46bd      	mov	sp, r7
 8023d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d60:	4770      	bx	lr
 8023d62:	bf00      	nop
 8023d64:	2001c100 	.word	0x2001c100
 8023d68:	20001a3c 	.word	0x20001a3c

08023d6c <ams_main_precharge_charge_0_function>:

ams_state_t ams_main_precharge_charge_0_function() {
 8023d6c:	b480      	push	{r7}
 8023d6e:	af00      	add	r7, sp, #0
   if(1) {
       timer_r3 = 0;
 8023d70:	4b04      	ldr	r3, [pc, #16]	; (8023d84 <ams_main_precharge_charge_0_function+0x18>)
 8023d72:	f04f 0200 	mov.w	r2, #0
 8023d76:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_WAKE_CHARGER;
 8023d78:	2321      	movs	r3, #33	; 0x21
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_0;
}
 8023d7a:	4618      	mov	r0, r3
 8023d7c:	46bd      	mov	sp, r7
 8023d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d82:	4770      	bx	lr
 8023d84:	20001a3c 	.word	0x20001a3c

08023d88 <ams_main_precharge_charge_wake_charger_function>:

ams_state_t ams_main_precharge_charge_wake_charger_function() {
 8023d88:	b480      	push	{r7}
 8023d8a:	af00      	add	r7, sp, #0
   if((timer_r3 < 10)&&ams_inputs.charger_is_awake) {
 8023d8c:	4b1d      	ldr	r3, [pc, #116]	; (8023e04 <ams_main_precharge_charge_wake_charger_function+0x7c>)
 8023d8e:	edd3 7a00 	vldr	s15, [r3]
 8023d92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8023d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d9e:	d50d      	bpl.n	8023dbc <ams_main_precharge_charge_wake_charger_function+0x34>
 8023da0:	4b19      	ldr	r3, [pc, #100]	; (8023e08 <ams_main_precharge_charge_wake_charger_function+0x80>)
 8023da2:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8023da6:	2b00      	cmp	r3, #0
 8023da8:	d008      	beq.n	8023dbc <ams_main_precharge_charge_wake_charger_function+0x34>
       ams_outputs.close_air_minus=1;
 8023daa:	4b18      	ldr	r3, [pc, #96]	; (8023e0c <ams_main_precharge_charge_wake_charger_function+0x84>)
 8023dac:	2201      	movs	r2, #1
 8023dae:	719a      	strb	r2, [r3, #6]
       timer_r3 = 0;
 8023db0:	4b14      	ldr	r3, [pc, #80]	; (8023e04 <ams_main_precharge_charge_wake_charger_function+0x7c>)
 8023db2:	f04f 0200 	mov.w	r2, #0
 8023db6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_MINUS;
 8023db8:	2319      	movs	r3, #25
 8023dba:	e01e      	b.n	8023dfa <ams_main_precharge_charge_wake_charger_function+0x72>
   }

   if((timer_r3 > 10)) {
 8023dbc:	4b11      	ldr	r3, [pc, #68]	; (8023e04 <ams_main_precharge_charge_wake_charger_function+0x7c>)
 8023dbe:	edd3 7a00 	vldr	s15, [r3]
 8023dc2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8023dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023dce:	dd08      	ble.n	8023de2 <ams_main_precharge_charge_wake_charger_function+0x5a>
       ams_outputs.error=121;
 8023dd0:	4b0e      	ldr	r3, [pc, #56]	; (8023e0c <ams_main_precharge_charge_wake_charger_function+0x84>)
 8023dd2:	2279      	movs	r2, #121	; 0x79
 8023dd4:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023dd6:	4b0b      	ldr	r3, [pc, #44]	; (8023e04 <ams_main_precharge_charge_wake_charger_function+0x7c>)
 8023dd8:	f04f 0200 	mov.w	r2, #0
 8023ddc:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 8023dde:	231b      	movs	r3, #27
 8023de0:	e00b      	b.n	8023dfa <ams_main_precharge_charge_wake_charger_function+0x72>
   }

   timer_r3 += ams_inputs.Ts;
 8023de2:	4b09      	ldr	r3, [pc, #36]	; (8023e08 <ams_main_precharge_charge_wake_charger_function+0x80>)
 8023de4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023de8:	4b06      	ldr	r3, [pc, #24]	; (8023e04 <ams_main_precharge_charge_wake_charger_function+0x7c>)
 8023dea:	edd3 7a00 	vldr	s15, [r3]
 8023dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023df2:	4b04      	ldr	r3, [pc, #16]	; (8023e04 <ams_main_precharge_charge_wake_charger_function+0x7c>)
 8023df4:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_WAKE_CHARGER;
 8023df8:	2321      	movs	r3, #33	; 0x21
}
 8023dfa:	4618      	mov	r0, r3
 8023dfc:	46bd      	mov	sp, r7
 8023dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e02:	4770      	bx	lr
 8023e04:	20001a3c 	.word	0x20001a3c
 8023e08:	2001c100 	.word	0x2001c100
 8023e0c:	2001c160 	.word	0x2001c160

08023e10 <ams_main_precharge_charge_function>:

ams_state_t ams_main_precharge_charge_function() {
 8023e10:	b5b0      	push	{r4, r5, r7, lr}
 8023e12:	af00      	add	r7, sp, #0
   if(timer_r2 < 0.001*ams_inputs.Ts) {
 8023e14:	4b4c      	ldr	r3, [pc, #304]	; (8023f48 <ams_main_precharge_charge_function+0x138>)
 8023e16:	681b      	ldr	r3, [r3, #0]
 8023e18:	4618      	mov	r0, r3
 8023e1a:	f7dc fb87 	bl	800052c <__aeabi_f2d>
 8023e1e:	4604      	mov	r4, r0
 8023e20:	460d      	mov	r5, r1
 8023e22:	4b4a      	ldr	r3, [pc, #296]	; (8023f4c <ams_main_precharge_charge_function+0x13c>)
 8023e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023e26:	4618      	mov	r0, r3
 8023e28:	f7dc fb80 	bl	800052c <__aeabi_f2d>
 8023e2c:	a344      	add	r3, pc, #272	; (adr r3, 8023f40 <ams_main_precharge_charge_function+0x130>)
 8023e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e32:	f7dc fbd3 	bl	80005dc <__aeabi_dmul>
 8023e36:	4602      	mov	r2, r0
 8023e38:	460b      	mov	r3, r1
 8023e3a:	4620      	mov	r0, r4
 8023e3c:	4629      	mov	r1, r5
 8023e3e:	f7dc fe3f 	bl	8000ac0 <__aeabi_dcmplt>
 8023e42:	4603      	mov	r3, r0
 8023e44:	2b00      	cmp	r3, #0
 8023e46:	d002      	beq.n	8023e4e <ams_main_precharge_charge_function+0x3e>
       state_r3 = STATE_AMS_MAIN_PRECHARGE_CHARGE_0;
 8023e48:	4b41      	ldr	r3, [pc, #260]	; (8023f50 <ams_main_precharge_charge_function+0x140>)
 8023e4a:	2220      	movs	r2, #32
 8023e4c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r3) {
 8023e4e:	4b40      	ldr	r3, [pc, #256]	; (8023f50 <ams_main_precharge_charge_function+0x140>)
 8023e50:	781b      	ldrb	r3, [r3, #0]
 8023e52:	3b19      	subs	r3, #25
 8023e54:	2b08      	cmp	r3, #8
 8023e56:	d854      	bhi.n	8023f02 <ams_main_precharge_charge_function+0xf2>
 8023e58:	a201      	add	r2, pc, #4	; (adr r2, 8023e60 <ams_main_precharge_charge_function+0x50>)
 8023e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023e5e:	bf00      	nop
 8023e60:	08023e85 	.word	0x08023e85
 8023e64:	08023e93 	.word	0x08023e93
 8023e68:	08023ea1 	.word	0x08023ea1
 8023e6c:	08023eaf 	.word	0x08023eaf
 8023e70:	08023ebd 	.word	0x08023ebd
 8023e74:	08023ecb 	.word	0x08023ecb
 8023e78:	08023ed9 	.word	0x08023ed9
 8023e7c:	08023ee7 	.word	0x08023ee7
 8023e80:	08023ef5 	.word	0x08023ef5
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_MINUS:
           state_r3 = ams_main_precharge_charge_close_air_minus_function();
 8023e84:	f7ff fdd4 	bl	8023a30 <ams_main_precharge_charge_close_air_minus_function>
 8023e88:	4603      	mov	r3, r0
 8023e8a:	461a      	mov	r2, r3
 8023e8c:	4b30      	ldr	r3, [pc, #192]	; (8023f50 <ams_main_precharge_charge_function+0x140>)
 8023e8e:	701a      	strb	r2, [r3, #0]
           break;
 8023e90:	e03a      	b.n	8023f08 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_PRECHARGE:
           state_r3 = ams_main_precharge_charge_close_precharge_function();
 8023e92:	f7ff fe11 	bl	8023ab8 <ams_main_precharge_charge_close_precharge_function>
 8023e96:	4603      	mov	r3, r0
 8023e98:	461a      	mov	r2, r3
 8023e9a:	4b2d      	ldr	r3, [pc, #180]	; (8023f50 <ams_main_precharge_charge_function+0x140>)
 8023e9c:	701a      	strb	r2, [r3, #0]
           break;
 8023e9e:	e033      	b.n	8023f08 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR:
           state_r3 = ams_main_precharge_charge_error_function();
 8023ea0:	f7ff fe4c 	bl	8023b3c <ams_main_precharge_charge_error_function>
 8023ea4:	4603      	mov	r3, r0
 8023ea6:	461a      	mov	r2, r3
 8023ea8:	4b29      	ldr	r3, [pc, #164]	; (8023f50 <ams_main_precharge_charge_function+0x140>)
 8023eaa:	701a      	strb	r2, [r3, #0]
           break;
 8023eac:	e02c      	b.n	8023f08 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_WAIT:
           state_r3 = ams_main_precharge_charge_wait_function();
 8023eae:	f7ff fe5f 	bl	8023b70 <ams_main_precharge_charge_wait_function>
 8023eb2:	4603      	mov	r3, r0
 8023eb4:	461a      	mov	r2, r3
 8023eb6:	4b26      	ldr	r3, [pc, #152]	; (8023f50 <ams_main_precharge_charge_function+0x140>)
 8023eb8:	701a      	strb	r2, [r3, #0]
           break;
 8023eba:	e025      	b.n	8023f08 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_PLUS:
           state_r3 = ams_main_precharge_charge_close_air_plus_function();
 8023ebc:	f7ff feb6 	bl	8023c2c <ams_main_precharge_charge_close_air_plus_function>
 8023ec0:	4603      	mov	r3, r0
 8023ec2:	461a      	mov	r2, r3
 8023ec4:	4b22      	ldr	r3, [pc, #136]	; (8023f50 <ams_main_precharge_charge_function+0x140>)
 8023ec6:	701a      	strb	r2, [r3, #0]
           break;
 8023ec8:	e01e      	b.n	8023f08 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_OPEN_PRECHARGE:
           state_r3 = ams_main_precharge_charge_open_precharge_function();
 8023eca:	f7ff fef3 	bl	8023cb4 <ams_main_precharge_charge_open_precharge_function>
 8023ece:	4603      	mov	r3, r0
 8023ed0:	461a      	mov	r2, r3
 8023ed2:	4b1f      	ldr	r3, [pc, #124]	; (8023f50 <ams_main_precharge_charge_function+0x140>)
 8023ed4:	701a      	strb	r2, [r3, #0]
           break;
 8023ed6:	e017      	b.n	8023f08 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_EXIT:
           state_r3 = ams_main_precharge_charge_exit_function();
 8023ed8:	f7ff ff30 	bl	8023d3c <ams_main_precharge_charge_exit_function>
 8023edc:	4603      	mov	r3, r0
 8023ede:	461a      	mov	r2, r3
 8023ee0:	4b1b      	ldr	r3, [pc, #108]	; (8023f50 <ams_main_precharge_charge_function+0x140>)
 8023ee2:	701a      	strb	r2, [r3, #0]
           break;
 8023ee4:	e010      	b.n	8023f08 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_0:
           state_r3 = ams_main_precharge_charge_0_function();
 8023ee6:	f7ff ff41 	bl	8023d6c <ams_main_precharge_charge_0_function>
 8023eea:	4603      	mov	r3, r0
 8023eec:	461a      	mov	r2, r3
 8023eee:	4b18      	ldr	r3, [pc, #96]	; (8023f50 <ams_main_precharge_charge_function+0x140>)
 8023ef0:	701a      	strb	r2, [r3, #0]
           break;
 8023ef2:	e009      	b.n	8023f08 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_WAKE_CHARGER:
           state_r3 = ams_main_precharge_charge_wake_charger_function();
 8023ef4:	f7ff ff48 	bl	8023d88 <ams_main_precharge_charge_wake_charger_function>
 8023ef8:	4603      	mov	r3, r0
 8023efa:	461a      	mov	r2, r3
 8023efc:	4b14      	ldr	r3, [pc, #80]	; (8023f50 <ams_main_precharge_charge_function+0x140>)
 8023efe:	701a      	strb	r2, [r3, #0]
           break;
 8023f00:	e002      	b.n	8023f08 <ams_main_precharge_charge_function+0xf8>
       default:
           ams_error();
 8023f02:	f7ff f8e0 	bl	80230c6 <ams_error>
           break;
 8023f06:	bf00      	nop
   }

   if(ams_outputs.precharge_charge_complete) {
 8023f08:	4b12      	ldr	r3, [pc, #72]	; (8023f54 <ams_main_precharge_charge_function+0x144>)
 8023f0a:	795b      	ldrb	r3, [r3, #5]
 8023f0c:	2b00      	cmp	r3, #0
 8023f0e:	d008      	beq.n	8023f22 <ams_main_precharge_charge_function+0x112>
       ams_outputs.precharge_charge_complete=0;
 8023f10:	4b10      	ldr	r3, [pc, #64]	; (8023f54 <ams_main_precharge_charge_function+0x144>)
 8023f12:	2200      	movs	r2, #0
 8023f14:	715a      	strb	r2, [r3, #5]
       timer_r2 = 0;
 8023f16:	4b0c      	ldr	r3, [pc, #48]	; (8023f48 <ams_main_precharge_charge_function+0x138>)
 8023f18:	f04f 0200 	mov.w	r2, #0
 8023f1c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_CHARGE;
 8023f1e:	2322      	movs	r3, #34	; 0x22
 8023f20:	e00b      	b.n	8023f3a <ams_main_precharge_charge_function+0x12a>
   }


   timer_r2 += ams_inputs.Ts;
 8023f22:	4b0a      	ldr	r3, [pc, #40]	; (8023f4c <ams_main_precharge_charge_function+0x13c>)
 8023f24:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023f28:	4b07      	ldr	r3, [pc, #28]	; (8023f48 <ams_main_precharge_charge_function+0x138>)
 8023f2a:	edd3 7a00 	vldr	s15, [r3]
 8023f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023f32:	4b05      	ldr	r3, [pc, #20]	; (8023f48 <ams_main_precharge_charge_function+0x138>)
 8023f34:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE;
 8023f38:	2318      	movs	r3, #24
}
 8023f3a:	4618      	mov	r0, r3
 8023f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8023f3e:	bf00      	nop
 8023f40:	d2f1a9fc 	.word	0xd2f1a9fc
 8023f44:	3f50624d 	.word	0x3f50624d
 8023f48:	20001a38 	.word	0x20001a38
 8023f4c:	2001c100 	.word	0x2001c100
 8023f50:	20001a2e 	.word	0x20001a2e
 8023f54:	2001c160 	.word	0x2001c160

08023f58 <ams_main_charge_0_function>:

ams_state_t ams_main_charge_0_function() {
 8023f58:	b480      	push	{r7}
 8023f5a:	af00      	add	r7, sp, #0
   if(1) {
       timer_r3 = 0;
 8023f5c:	4b04      	ldr	r3, [pc, #16]	; (8023f70 <ams_main_charge_0_function+0x18>)
 8023f5e:	f04f 0200 	mov.w	r2, #0
 8023f62:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_CHARGE_CHARGE;
 8023f64:	2324      	movs	r3, #36	; 0x24
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_CHARGE_0;
}
 8023f66:	4618      	mov	r0, r3
 8023f68:	46bd      	mov	sp, r7
 8023f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f6e:	4770      	bx	lr
 8023f70:	20001a3c 	.word	0x20001a3c
 8023f74:	00000000 	.word	0x00000000

08023f78 <ams_main_charge_charge_function>:

ams_state_t ams_main_charge_charge_function() {
 8023f78:	b580      	push	{r7, lr}
 8023f7a:	af00      	add	r7, sp, #0
   if((ams_inputs.maximum_cell_voltage>4.15)||!ams_inputs.charge) {
 8023f7c:	4b16      	ldr	r3, [pc, #88]	; (8023fd8 <ams_main_charge_charge_function+0x60>)
 8023f7e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8023f82:	a313      	add	r3, pc, #76	; (adr r3, 8023fd0 <ams_main_charge_charge_function+0x58>)
 8023f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f88:	f7dc fdb8 	bl	8000afc <__aeabi_dcmpgt>
 8023f8c:	4603      	mov	r3, r0
 8023f8e:	2b00      	cmp	r3, #0
 8023f90:	d104      	bne.n	8023f9c <ams_main_charge_charge_function+0x24>
 8023f92:	4b11      	ldr	r3, [pc, #68]	; (8023fd8 <ams_main_charge_charge_function+0x60>)
 8023f94:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8023f98:	2b00      	cmp	r3, #0
 8023f9a:	d108      	bne.n	8023fae <ams_main_charge_charge_function+0x36>
       ams_outputs.enable_charger=0;
 8023f9c:	4b0f      	ldr	r3, [pc, #60]	; (8023fdc <ams_main_charge_charge_function+0x64>)
 8023f9e:	2200      	movs	r2, #0
 8023fa0:	711a      	strb	r2, [r3, #4]
       timer_r3 = 0;
 8023fa2:	4b0f      	ldr	r3, [pc, #60]	; (8023fe0 <ams_main_charge_charge_function+0x68>)
 8023fa4:	f04f 0200 	mov.w	r2, #0
 8023fa8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_CHARGE_END_CHARGE;
 8023faa:	2325      	movs	r3, #37	; 0x25
 8023fac:	e00b      	b.n	8023fc6 <ams_main_charge_charge_function+0x4e>
   }

   timer_r3 += ams_inputs.Ts;
 8023fae:	4b0a      	ldr	r3, [pc, #40]	; (8023fd8 <ams_main_charge_charge_function+0x60>)
 8023fb0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023fb4:	4b0a      	ldr	r3, [pc, #40]	; (8023fe0 <ams_main_charge_charge_function+0x68>)
 8023fb6:	edd3 7a00 	vldr	s15, [r3]
 8023fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023fbe:	4b08      	ldr	r3, [pc, #32]	; (8023fe0 <ams_main_charge_charge_function+0x68>)
 8023fc0:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_CHARGE_CHARGE;
 8023fc4:	2324      	movs	r3, #36	; 0x24
}
 8023fc6:	4618      	mov	r0, r3
 8023fc8:	bd80      	pop	{r7, pc}
 8023fca:	bf00      	nop
 8023fcc:	f3af 8000 	nop.w
 8023fd0:	9999999a 	.word	0x9999999a
 8023fd4:	40109999 	.word	0x40109999
 8023fd8:	2001c100 	.word	0x2001c100
 8023fdc:	2001c160 	.word	0x2001c160
 8023fe0:	20001a3c 	.word	0x20001a3c
 8023fe4:	00000000 	.word	0x00000000

08023fe8 <ams_main_charge_end_charge_function>:

ams_state_t ams_main_charge_end_charge_function() {
 8023fe8:	b580      	push	{r7, lr}
 8023fea:	af00      	add	r7, sp, #0
   if((timer_r3 < 7)&&(fabsf(ams_inputs.accumulator_current)<0.001)) {
 8023fec:	4b30      	ldr	r3, [pc, #192]	; (80240b0 <ams_main_charge_end_charge_function+0xc8>)
 8023fee:	edd3 7a00 	vldr	s15, [r3]
 8023ff2:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8023ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ffe:	d528      	bpl.n	8024052 <ams_main_charge_end_charge_function+0x6a>
 8024000:	4b2c      	ldr	r3, [pc, #176]	; (80240b4 <ams_main_charge_end_charge_function+0xcc>)
 8024002:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8024006:	4610      	mov	r0, r2
 8024008:	4619      	mov	r1, r3
 802400a:	f7dc fddf 	bl	8000bcc <__aeabi_d2f>
 802400e:	ee07 0a90 	vmov	s15, r0
 8024012:	eef0 7ae7 	vabs.f32	s15, s15
 8024016:	ee17 0a90 	vmov	r0, s15
 802401a:	f7dc fa87 	bl	800052c <__aeabi_f2d>
 802401e:	a322      	add	r3, pc, #136	; (adr r3, 80240a8 <ams_main_charge_end_charge_function+0xc0>)
 8024020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024024:	f7dc fd4c 	bl	8000ac0 <__aeabi_dcmplt>
 8024028:	4603      	mov	r3, r0
 802402a:	2b00      	cmp	r3, #0
 802402c:	d011      	beq.n	8024052 <ams_main_charge_end_charge_function+0x6a>
       ams_outputs.close_air_plus=0;
 802402e:	4b22      	ldr	r3, [pc, #136]	; (80240b8 <ams_main_charge_end_charge_function+0xd0>)
 8024030:	2200      	movs	r2, #0
 8024032:	70da      	strb	r2, [r3, #3]
       ams_outputs.close_air_minus=0;
 8024034:	4b20      	ldr	r3, [pc, #128]	; (80240b8 <ams_main_charge_end_charge_function+0xd0>)
 8024036:	2200      	movs	r2, #0
 8024038:	719a      	strb	r2, [r3, #6]
       ams_outputs.close_precharge=0;
 802403a:	4b1f      	ldr	r3, [pc, #124]	; (80240b8 <ams_main_charge_end_charge_function+0xd0>)
 802403c:	2200      	movs	r2, #0
 802403e:	71da      	strb	r2, [r3, #7]
       ams_outputs.charge_complete=1;
 8024040:	4b1d      	ldr	r3, [pc, #116]	; (80240b8 <ams_main_charge_end_charge_function+0xd0>)
 8024042:	2201      	movs	r2, #1
 8024044:	705a      	strb	r2, [r3, #1]
       timer_r3 = 0;
 8024046:	4b1a      	ldr	r3, [pc, #104]	; (80240b0 <ams_main_charge_end_charge_function+0xc8>)
 8024048:	f04f 0200 	mov.w	r2, #0
 802404c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_CHARGE_EXIT;
 802404e:	2326      	movs	r3, #38	; 0x26
 8024050:	e027      	b.n	80240a2 <ams_main_charge_end_charge_function+0xba>
   }

   if((timer_r3 > 7)) {
 8024052:	4b17      	ldr	r3, [pc, #92]	; (80240b0 <ams_main_charge_end_charge_function+0xc8>)
 8024054:	edd3 7a00 	vldr	s15, [r3]
 8024058:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 802405c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8024060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024064:	dd11      	ble.n	802408a <ams_main_charge_end_charge_function+0xa2>
       ams_outputs.close_air_plus=0;
 8024066:	4b14      	ldr	r3, [pc, #80]	; (80240b8 <ams_main_charge_end_charge_function+0xd0>)
 8024068:	2200      	movs	r2, #0
 802406a:	70da      	strb	r2, [r3, #3]
       ams_outputs.close_air_minus=0;
 802406c:	4b12      	ldr	r3, [pc, #72]	; (80240b8 <ams_main_charge_end_charge_function+0xd0>)
 802406e:	2200      	movs	r2, #0
 8024070:	719a      	strb	r2, [r3, #6]
       ams_outputs.close_precharge=0;
 8024072:	4b11      	ldr	r3, [pc, #68]	; (80240b8 <ams_main_charge_end_charge_function+0xd0>)
 8024074:	2200      	movs	r2, #0
 8024076:	71da      	strb	r2, [r3, #7]
       ams_outputs.error=141;
 8024078:	4b0f      	ldr	r3, [pc, #60]	; (80240b8 <ams_main_charge_end_charge_function+0xd0>)
 802407a:	228d      	movs	r2, #141	; 0x8d
 802407c:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 802407e:	4b0c      	ldr	r3, [pc, #48]	; (80240b0 <ams_main_charge_end_charge_function+0xc8>)
 8024080:	f04f 0200 	mov.w	r2, #0
 8024084:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_CHARGE_FORCE_QUIT;
 8024086:	2327      	movs	r3, #39	; 0x27
 8024088:	e00b      	b.n	80240a2 <ams_main_charge_end_charge_function+0xba>
   }

   timer_r3 += ams_inputs.Ts;
 802408a:	4b0a      	ldr	r3, [pc, #40]	; (80240b4 <ams_main_charge_end_charge_function+0xcc>)
 802408c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8024090:	4b07      	ldr	r3, [pc, #28]	; (80240b0 <ams_main_charge_end_charge_function+0xc8>)
 8024092:	edd3 7a00 	vldr	s15, [r3]
 8024096:	ee77 7a27 	vadd.f32	s15, s14, s15
 802409a:	4b05      	ldr	r3, [pc, #20]	; (80240b0 <ams_main_charge_end_charge_function+0xc8>)
 802409c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_CHARGE_END_CHARGE;
 80240a0:	2325      	movs	r3, #37	; 0x25
}
 80240a2:	4618      	mov	r0, r3
 80240a4:	bd80      	pop	{r7, pc}
 80240a6:	bf00      	nop
 80240a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80240ac:	3f50624d 	.word	0x3f50624d
 80240b0:	20001a3c 	.word	0x20001a3c
 80240b4:	2001c100 	.word	0x2001c100
 80240b8:	2001c160 	.word	0x2001c160

080240bc <ams_main_charge_exit_function>:

ams_state_t ams_main_charge_exit_function() {
 80240bc:	b480      	push	{r7}
 80240be:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 80240c0:	4b08      	ldr	r3, [pc, #32]	; (80240e4 <ams_main_charge_exit_function+0x28>)
 80240c2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80240c6:	4b08      	ldr	r3, [pc, #32]	; (80240e8 <ams_main_charge_exit_function+0x2c>)
 80240c8:	edd3 7a00 	vldr	s15, [r3]
 80240cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80240d0:	4b05      	ldr	r3, [pc, #20]	; (80240e8 <ams_main_charge_exit_function+0x2c>)
 80240d2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_CHARGE_EXIT;
 80240d6:	2326      	movs	r3, #38	; 0x26
}
 80240d8:	4618      	mov	r0, r3
 80240da:	46bd      	mov	sp, r7
 80240dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240e0:	4770      	bx	lr
 80240e2:	bf00      	nop
 80240e4:	2001c100 	.word	0x2001c100
 80240e8:	20001a3c 	.word	0x20001a3c

080240ec <ams_main_charge_force_quit_function>:

ams_state_t ams_main_charge_force_quit_function() {
 80240ec:	b480      	push	{r7}
 80240ee:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 80240f0:	4b08      	ldr	r3, [pc, #32]	; (8024114 <ams_main_charge_force_quit_function+0x28>)
 80240f2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80240f6:	4b08      	ldr	r3, [pc, #32]	; (8024118 <ams_main_charge_force_quit_function+0x2c>)
 80240f8:	edd3 7a00 	vldr	s15, [r3]
 80240fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024100:	4b05      	ldr	r3, [pc, #20]	; (8024118 <ams_main_charge_force_quit_function+0x2c>)
 8024102:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_CHARGE_FORCE_QUIT;
 8024106:	2327      	movs	r3, #39	; 0x27
}
 8024108:	4618      	mov	r0, r3
 802410a:	46bd      	mov	sp, r7
 802410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024110:	4770      	bx	lr
 8024112:	bf00      	nop
 8024114:	2001c100 	.word	0x2001c100
 8024118:	20001a3c 	.word	0x20001a3c
 802411c:	00000000 	.word	0x00000000

08024120 <ams_main_charge_function>:

ams_state_t ams_main_charge_function() {
 8024120:	b5b0      	push	{r4, r5, r7, lr}
 8024122:	af00      	add	r7, sp, #0
   if(timer_r2 < 0.001*ams_inputs.Ts) {
 8024124:	4b3a      	ldr	r3, [pc, #232]	; (8024210 <ams_main_charge_function+0xf0>)
 8024126:	681b      	ldr	r3, [r3, #0]
 8024128:	4618      	mov	r0, r3
 802412a:	f7dc f9ff 	bl	800052c <__aeabi_f2d>
 802412e:	4604      	mov	r4, r0
 8024130:	460d      	mov	r5, r1
 8024132:	4b38      	ldr	r3, [pc, #224]	; (8024214 <ams_main_charge_function+0xf4>)
 8024134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024136:	4618      	mov	r0, r3
 8024138:	f7dc f9f8 	bl	800052c <__aeabi_f2d>
 802413c:	a332      	add	r3, pc, #200	; (adr r3, 8024208 <ams_main_charge_function+0xe8>)
 802413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024142:	f7dc fa4b 	bl	80005dc <__aeabi_dmul>
 8024146:	4602      	mov	r2, r0
 8024148:	460b      	mov	r3, r1
 802414a:	4620      	mov	r0, r4
 802414c:	4629      	mov	r1, r5
 802414e:	f7dc fcb7 	bl	8000ac0 <__aeabi_dcmplt>
 8024152:	4603      	mov	r3, r0
 8024154:	2b00      	cmp	r3, #0
 8024156:	d002      	beq.n	802415e <ams_main_charge_function+0x3e>
       state_r3 = STATE_AMS_MAIN_CHARGE_0;
 8024158:	4b2f      	ldr	r3, [pc, #188]	; (8024218 <ams_main_charge_function+0xf8>)
 802415a:	2223      	movs	r2, #35	; 0x23
 802415c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r3) {
 802415e:	4b2e      	ldr	r3, [pc, #184]	; (8024218 <ams_main_charge_function+0xf8>)
 8024160:	781b      	ldrb	r3, [r3, #0]
 8024162:	3b23      	subs	r3, #35	; 0x23
 8024164:	2b04      	cmp	r3, #4
 8024166:	d830      	bhi.n	80241ca <ams_main_charge_function+0xaa>
 8024168:	a201      	add	r2, pc, #4	; (adr r2, 8024170 <ams_main_charge_function+0x50>)
 802416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802416e:	bf00      	nop
 8024170:	08024185 	.word	0x08024185
 8024174:	08024193 	.word	0x08024193
 8024178:	080241a1 	.word	0x080241a1
 802417c:	080241af 	.word	0x080241af
 8024180:	080241bd 	.word	0x080241bd
       case STATE_AMS_MAIN_CHARGE_0:
           state_r3 = ams_main_charge_0_function();
 8024184:	f7ff fee8 	bl	8023f58 <ams_main_charge_0_function>
 8024188:	4603      	mov	r3, r0
 802418a:	461a      	mov	r2, r3
 802418c:	4b22      	ldr	r3, [pc, #136]	; (8024218 <ams_main_charge_function+0xf8>)
 802418e:	701a      	strb	r2, [r3, #0]
           break;
 8024190:	e01e      	b.n	80241d0 <ams_main_charge_function+0xb0>
       case STATE_AMS_MAIN_CHARGE_CHARGE:
           state_r3 = ams_main_charge_charge_function();
 8024192:	f7ff fef1 	bl	8023f78 <ams_main_charge_charge_function>
 8024196:	4603      	mov	r3, r0
 8024198:	461a      	mov	r2, r3
 802419a:	4b1f      	ldr	r3, [pc, #124]	; (8024218 <ams_main_charge_function+0xf8>)
 802419c:	701a      	strb	r2, [r3, #0]
           break;
 802419e:	e017      	b.n	80241d0 <ams_main_charge_function+0xb0>
       case STATE_AMS_MAIN_CHARGE_END_CHARGE:
           state_r3 = ams_main_charge_end_charge_function();
 80241a0:	f7ff ff22 	bl	8023fe8 <ams_main_charge_end_charge_function>
 80241a4:	4603      	mov	r3, r0
 80241a6:	461a      	mov	r2, r3
 80241a8:	4b1b      	ldr	r3, [pc, #108]	; (8024218 <ams_main_charge_function+0xf8>)
 80241aa:	701a      	strb	r2, [r3, #0]
           break;
 80241ac:	e010      	b.n	80241d0 <ams_main_charge_function+0xb0>
       case STATE_AMS_MAIN_CHARGE_EXIT:
           state_r3 = ams_main_charge_exit_function();
 80241ae:	f7ff ff85 	bl	80240bc <ams_main_charge_exit_function>
 80241b2:	4603      	mov	r3, r0
 80241b4:	461a      	mov	r2, r3
 80241b6:	4b18      	ldr	r3, [pc, #96]	; (8024218 <ams_main_charge_function+0xf8>)
 80241b8:	701a      	strb	r2, [r3, #0]
           break;
 80241ba:	e009      	b.n	80241d0 <ams_main_charge_function+0xb0>
       case STATE_AMS_MAIN_CHARGE_FORCE_QUIT:
           state_r3 = ams_main_charge_force_quit_function();
 80241bc:	f7ff ff96 	bl	80240ec <ams_main_charge_force_quit_function>
 80241c0:	4603      	mov	r3, r0
 80241c2:	461a      	mov	r2, r3
 80241c4:	4b14      	ldr	r3, [pc, #80]	; (8024218 <ams_main_charge_function+0xf8>)
 80241c6:	701a      	strb	r2, [r3, #0]
           break;
 80241c8:	e002      	b.n	80241d0 <ams_main_charge_function+0xb0>
       default:
           ams_error();
 80241ca:	f7fe ff7c 	bl	80230c6 <ams_error>
           break;
 80241ce:	bf00      	nop
   }

   if(ams_outputs.charge_complete) {
 80241d0:	4b12      	ldr	r3, [pc, #72]	; (802421c <ams_main_charge_function+0xfc>)
 80241d2:	785b      	ldrb	r3, [r3, #1]
 80241d4:	2b00      	cmp	r3, #0
 80241d6:	d008      	beq.n	80241ea <ams_main_charge_function+0xca>
       ams_outputs.charge_complete=0;
 80241d8:	4b10      	ldr	r3, [pc, #64]	; (802421c <ams_main_charge_function+0xfc>)
 80241da:	2200      	movs	r2, #0
 80241dc:	705a      	strb	r2, [r3, #1]
       timer_r2 = 0;
 80241de:	4b0c      	ldr	r3, [pc, #48]	; (8024210 <ams_main_charge_function+0xf0>)
 80241e0:	f04f 0200 	mov.w	r2, #0
 80241e4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_IDLE;
 80241e6:	2328      	movs	r3, #40	; 0x28
 80241e8:	e00b      	b.n	8024202 <ams_main_charge_function+0xe2>
   }


   timer_r2 += ams_inputs.Ts;
 80241ea:	4b0a      	ldr	r3, [pc, #40]	; (8024214 <ams_main_charge_function+0xf4>)
 80241ec:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80241f0:	4b07      	ldr	r3, [pc, #28]	; (8024210 <ams_main_charge_function+0xf0>)
 80241f2:	edd3 7a00 	vldr	s15, [r3]
 80241f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80241fa:	4b05      	ldr	r3, [pc, #20]	; (8024210 <ams_main_charge_function+0xf0>)
 80241fc:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_CHARGE;
 8024200:	2322      	movs	r3, #34	; 0x22
}
 8024202:	4618      	mov	r0, r3
 8024204:	bdb0      	pop	{r4, r5, r7, pc}
 8024206:	bf00      	nop
 8024208:	d2f1a9fc 	.word	0xd2f1a9fc
 802420c:	3f50624d 	.word	0x3f50624d
 8024210:	20001a38 	.word	0x20001a38
 8024214:	2001c100 	.word	0x2001c100
 8024218:	20001a2e 	.word	0x20001a2e
 802421c:	2001c160 	.word	0x2001c160

08024220 <ams_main_idle_function>:

ams_state_t ams_main_idle_function() {
 8024220:	b580      	push	{r7, lr}
 8024222:	af00      	add	r7, sp, #0
   if(ams_inputs.SC&&ams_inputs.drive) {
 8024224:	4b26      	ldr	r3, [pc, #152]	; (80242c0 <ams_main_idle_function+0xa0>)
 8024226:	7e1b      	ldrb	r3, [r3, #24]
 8024228:	2b00      	cmp	r3, #0
 802422a:	d00a      	beq.n	8024242 <ams_main_idle_function+0x22>
 802422c:	4b24      	ldr	r3, [pc, #144]	; (80242c0 <ams_main_idle_function+0xa0>)
 802422e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8024232:	2b00      	cmp	r3, #0
 8024234:	d005      	beq.n	8024242 <ams_main_idle_function+0x22>
       timer_r2 = 0;
 8024236:	4b23      	ldr	r3, [pc, #140]	; (80242c4 <ams_main_idle_function+0xa4>)
 8024238:	f04f 0200 	mov.w	r2, #0
 802423c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE;
 802423e:	2308      	movs	r3, #8
 8024240:	e037      	b.n	80242b2 <ams_main_idle_function+0x92>
   }

   if(ams_inputs.SC&&ams_inputs.charge) {
 8024242:	4b1f      	ldr	r3, [pc, #124]	; (80242c0 <ams_main_idle_function+0xa0>)
 8024244:	7e1b      	ldrb	r3, [r3, #24]
 8024246:	2b00      	cmp	r3, #0
 8024248:	d00d      	beq.n	8024266 <ams_main_idle_function+0x46>
 802424a:	4b1d      	ldr	r3, [pc, #116]	; (80242c0 <ams_main_idle_function+0xa0>)
 802424c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8024250:	2b00      	cmp	r3, #0
 8024252:	d008      	beq.n	8024266 <ams_main_idle_function+0x46>
       ams_outputs.enable_charger=1;
 8024254:	4b1c      	ldr	r3, [pc, #112]	; (80242c8 <ams_main_idle_function+0xa8>)
 8024256:	2201      	movs	r2, #1
 8024258:	711a      	strb	r2, [r3, #4]
       timer_r2 = 0;
 802425a:	4b1a      	ldr	r3, [pc, #104]	; (80242c4 <ams_main_idle_function+0xa4>)
 802425c:	f04f 0200 	mov.w	r2, #0
 8024260:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE;
 8024262:	2318      	movs	r3, #24
 8024264:	e025      	b.n	80242b2 <ams_main_idle_function+0x92>
   }

   if(!ams_inputs.SC&&ams_inputs.balance&&(ams_inputs.cell_voltages_variance>0.01)) {
 8024266:	4b16      	ldr	r3, [pc, #88]	; (80242c0 <ams_main_idle_function+0xa0>)
 8024268:	7e1b      	ldrb	r3, [r3, #24]
 802426a:	2b00      	cmp	r3, #0
 802426c:	d115      	bne.n	802429a <ams_main_idle_function+0x7a>
 802426e:	4b14      	ldr	r3, [pc, #80]	; (80242c0 <ams_main_idle_function+0xa0>)
 8024270:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8024274:	2b00      	cmp	r3, #0
 8024276:	d010      	beq.n	802429a <ams_main_idle_function+0x7a>
 8024278:	4b11      	ldr	r3, [pc, #68]	; (80242c0 <ams_main_idle_function+0xa0>)
 802427a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 802427e:	a30e      	add	r3, pc, #56	; (adr r3, 80242b8 <ams_main_idle_function+0x98>)
 8024280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024284:	f7dc fc3a 	bl	8000afc <__aeabi_dcmpgt>
 8024288:	4603      	mov	r3, r0
 802428a:	2b00      	cmp	r3, #0
 802428c:	d005      	beq.n	802429a <ams_main_idle_function+0x7a>
       timer_r2 = 0;
 802428e:	4b0d      	ldr	r3, [pc, #52]	; (80242c4 <ams_main_idle_function+0xa4>)
 8024290:	f04f 0200 	mov.w	r2, #0
 8024294:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_BALANCE;
 8024296:	2329      	movs	r3, #41	; 0x29
 8024298:	e00b      	b.n	80242b2 <ams_main_idle_function+0x92>
   }

   timer_r2 += ams_inputs.Ts;
 802429a:	4b09      	ldr	r3, [pc, #36]	; (80242c0 <ams_main_idle_function+0xa0>)
 802429c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80242a0:	4b08      	ldr	r3, [pc, #32]	; (80242c4 <ams_main_idle_function+0xa4>)
 80242a2:	edd3 7a00 	vldr	s15, [r3]
 80242a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80242aa:	4b06      	ldr	r3, [pc, #24]	; (80242c4 <ams_main_idle_function+0xa4>)
 80242ac:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_IDLE;
 80242b0:	2328      	movs	r3, #40	; 0x28
}
 80242b2:	4618      	mov	r0, r3
 80242b4:	bd80      	pop	{r7, pc}
 80242b6:	bf00      	nop
 80242b8:	47ae147b 	.word	0x47ae147b
 80242bc:	3f847ae1 	.word	0x3f847ae1
 80242c0:	2001c100 	.word	0x2001c100
 80242c4:	20001a38 	.word	0x20001a38
 80242c8:	2001c160 	.word	0x2001c160

080242cc <ams_main_balance_0_function>:

ams_state_t ams_main_balance_0_function() {
 80242cc:	b480      	push	{r7}
 80242ce:	af00      	add	r7, sp, #0
   if(1) {
       timer_r3 = 0;
 80242d0:	4b04      	ldr	r3, [pc, #16]	; (80242e4 <ams_main_balance_0_function+0x18>)
 80242d2:	f04f 0200 	mov.w	r2, #0
 80242d6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_BALANCE_BALANCE;
 80242d8:	232b      	movs	r3, #43	; 0x2b
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_BALANCE_0;
}
 80242da:	4618      	mov	r0, r3
 80242dc:	46bd      	mov	sp, r7
 80242de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242e2:	4770      	bx	lr
 80242e4:	20001a3c 	.word	0x20001a3c

080242e8 <ams_main_balance_balance_function>:

ams_state_t ams_main_balance_balance_function() {
 80242e8:	b580      	push	{r7, lr}
 80242ea:	af00      	add	r7, sp, #0
   if(1) {
       do_cell_balancing();
 80242ec:	f7f1 fe80 	bl	8015ff0 <do_cell_balancing>
       timer_r3 = 0;
 80242f0:	4b03      	ldr	r3, [pc, #12]	; (8024300 <ams_main_balance_balance_function+0x18>)
 80242f2:	f04f 0200 	mov.w	r2, #0
 80242f6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_BALANCE_WAIT;
 80242f8:	232c      	movs	r3, #44	; 0x2c
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_BALANCE_BALANCE;
}
 80242fa:	4618      	mov	r0, r3
 80242fc:	bd80      	pop	{r7, pc}
 80242fe:	bf00      	nop
 8024300:	20001a3c 	.word	0x20001a3c

08024304 <ams_main_balance_wait_function>:

ams_state_t ams_main_balance_wait_function() {
 8024304:	b480      	push	{r7}
 8024306:	af00      	add	r7, sp, #0
   if((timer_r3 > 60)) {
 8024308:	4b10      	ldr	r3, [pc, #64]	; (802434c <ams_main_balance_wait_function+0x48>)
 802430a:	edd3 7a00 	vldr	s15, [r3]
 802430e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8024350 <ams_main_balance_wait_function+0x4c>
 8024312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8024316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802431a:	dd05      	ble.n	8024328 <ams_main_balance_wait_function+0x24>
       timer_r3 = 0;
 802431c:	4b0b      	ldr	r3, [pc, #44]	; (802434c <ams_main_balance_wait_function+0x48>)
 802431e:	f04f 0200 	mov.w	r2, #0
 8024322:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_BALANCE_BALANCE;
 8024324:	232b      	movs	r3, #43	; 0x2b
 8024326:	e00b      	b.n	8024340 <ams_main_balance_wait_function+0x3c>
   }

   timer_r3 += ams_inputs.Ts;
 8024328:	4b0a      	ldr	r3, [pc, #40]	; (8024354 <ams_main_balance_wait_function+0x50>)
 802432a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 802432e:	4b07      	ldr	r3, [pc, #28]	; (802434c <ams_main_balance_wait_function+0x48>)
 8024330:	edd3 7a00 	vldr	s15, [r3]
 8024334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024338:	4b04      	ldr	r3, [pc, #16]	; (802434c <ams_main_balance_wait_function+0x48>)
 802433a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_BALANCE_WAIT;
 802433e:	232c      	movs	r3, #44	; 0x2c
}
 8024340:	4618      	mov	r0, r3
 8024342:	46bd      	mov	sp, r7
 8024344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024348:	4770      	bx	lr
 802434a:	bf00      	nop
 802434c:	20001a3c 	.word	0x20001a3c
 8024350:	42700000 	.word	0x42700000
 8024354:	2001c100 	.word	0x2001c100

08024358 <ams_main_balance_function>:

ams_state_t ams_main_balance_function() {
 8024358:	b5b0      	push	{r4, r5, r7, lr}
 802435a:	af00      	add	r7, sp, #0
   if(timer_r2 < 0.001*ams_inputs.Ts) {
 802435c:	4b38      	ldr	r3, [pc, #224]	; (8024440 <ams_main_balance_function+0xe8>)
 802435e:	681b      	ldr	r3, [r3, #0]
 8024360:	4618      	mov	r0, r3
 8024362:	f7dc f8e3 	bl	800052c <__aeabi_f2d>
 8024366:	4604      	mov	r4, r0
 8024368:	460d      	mov	r5, r1
 802436a:	4b36      	ldr	r3, [pc, #216]	; (8024444 <ams_main_balance_function+0xec>)
 802436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802436e:	4618      	mov	r0, r3
 8024370:	f7dc f8dc 	bl	800052c <__aeabi_f2d>
 8024374:	a32e      	add	r3, pc, #184	; (adr r3, 8024430 <ams_main_balance_function+0xd8>)
 8024376:	e9d3 2300 	ldrd	r2, r3, [r3]
 802437a:	f7dc f92f 	bl	80005dc <__aeabi_dmul>
 802437e:	4602      	mov	r2, r0
 8024380:	460b      	mov	r3, r1
 8024382:	4620      	mov	r0, r4
 8024384:	4629      	mov	r1, r5
 8024386:	f7dc fb9b 	bl	8000ac0 <__aeabi_dcmplt>
 802438a:	4603      	mov	r3, r0
 802438c:	2b00      	cmp	r3, #0
 802438e:	d002      	beq.n	8024396 <ams_main_balance_function+0x3e>
       state_r3 = STATE_AMS_MAIN_BALANCE_0;
 8024390:	4b2d      	ldr	r3, [pc, #180]	; (8024448 <ams_main_balance_function+0xf0>)
 8024392:	222a      	movs	r2, #42	; 0x2a
 8024394:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r3) {
 8024396:	4b2c      	ldr	r3, [pc, #176]	; (8024448 <ams_main_balance_function+0xf0>)
 8024398:	781b      	ldrb	r3, [r3, #0]
 802439a:	2b2c      	cmp	r3, #44	; 0x2c
 802439c:	d014      	beq.n	80243c8 <ams_main_balance_function+0x70>
 802439e:	2b2c      	cmp	r3, #44	; 0x2c
 80243a0:	dc19      	bgt.n	80243d6 <ams_main_balance_function+0x7e>
 80243a2:	2b2a      	cmp	r3, #42	; 0x2a
 80243a4:	d002      	beq.n	80243ac <ams_main_balance_function+0x54>
 80243a6:	2b2b      	cmp	r3, #43	; 0x2b
 80243a8:	d007      	beq.n	80243ba <ams_main_balance_function+0x62>
 80243aa:	e014      	b.n	80243d6 <ams_main_balance_function+0x7e>
       case STATE_AMS_MAIN_BALANCE_0:
           state_r3 = ams_main_balance_0_function();
 80243ac:	f7ff ff8e 	bl	80242cc <ams_main_balance_0_function>
 80243b0:	4603      	mov	r3, r0
 80243b2:	461a      	mov	r2, r3
 80243b4:	4b24      	ldr	r3, [pc, #144]	; (8024448 <ams_main_balance_function+0xf0>)
 80243b6:	701a      	strb	r2, [r3, #0]
           break;
 80243b8:	e010      	b.n	80243dc <ams_main_balance_function+0x84>
       case STATE_AMS_MAIN_BALANCE_BALANCE:
           state_r3 = ams_main_balance_balance_function();
 80243ba:	f7ff ff95 	bl	80242e8 <ams_main_balance_balance_function>
 80243be:	4603      	mov	r3, r0
 80243c0:	461a      	mov	r2, r3
 80243c2:	4b21      	ldr	r3, [pc, #132]	; (8024448 <ams_main_balance_function+0xf0>)
 80243c4:	701a      	strb	r2, [r3, #0]
           break;
 80243c6:	e009      	b.n	80243dc <ams_main_balance_function+0x84>
       case STATE_AMS_MAIN_BALANCE_WAIT:
           state_r3 = ams_main_balance_wait_function();
 80243c8:	f7ff ff9c 	bl	8024304 <ams_main_balance_wait_function>
 80243cc:	4603      	mov	r3, r0
 80243ce:	461a      	mov	r2, r3
 80243d0:	4b1d      	ldr	r3, [pc, #116]	; (8024448 <ams_main_balance_function+0xf0>)
 80243d2:	701a      	strb	r2, [r3, #0]
           break;
 80243d4:	e002      	b.n	80243dc <ams_main_balance_function+0x84>
       default:
           ams_error();
 80243d6:	f7fe fe76 	bl	80230c6 <ams_error>
           break;
 80243da:	bf00      	nop
   }

   if(ams_inputs.SC||(!ams_inputs.balance)||(ams_inputs.cell_voltages_variance<0.005)) {
 80243dc:	4b19      	ldr	r3, [pc, #100]	; (8024444 <ams_main_balance_function+0xec>)
 80243de:	7e1b      	ldrb	r3, [r3, #24]
 80243e0:	2b00      	cmp	r3, #0
 80243e2:	d10f      	bne.n	8024404 <ams_main_balance_function+0xac>
 80243e4:	4b17      	ldr	r3, [pc, #92]	; (8024444 <ams_main_balance_function+0xec>)
 80243e6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80243ea:	2b00      	cmp	r3, #0
 80243ec:	d00a      	beq.n	8024404 <ams_main_balance_function+0xac>
 80243ee:	4b15      	ldr	r3, [pc, #84]	; (8024444 <ams_main_balance_function+0xec>)
 80243f0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80243f4:	a310      	add	r3, pc, #64	; (adr r3, 8024438 <ams_main_balance_function+0xe0>)
 80243f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243fa:	f7dc fb61 	bl	8000ac0 <__aeabi_dcmplt>
 80243fe:	4603      	mov	r3, r0
 8024400:	2b00      	cmp	r3, #0
 8024402:	d007      	beq.n	8024414 <ams_main_balance_function+0xbc>
       end_cell_balancing();
 8024404:	f7f1 fe30 	bl	8016068 <end_cell_balancing>
       timer_r2 = 0;
 8024408:	4b0d      	ldr	r3, [pc, #52]	; (8024440 <ams_main_balance_function+0xe8>)
 802440a:	f04f 0200 	mov.w	r2, #0
 802440e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_IDLE;
 8024410:	2328      	movs	r3, #40	; 0x28
 8024412:	e00b      	b.n	802442c <ams_main_balance_function+0xd4>
   }


   timer_r2 += ams_inputs.Ts;
 8024414:	4b0b      	ldr	r3, [pc, #44]	; (8024444 <ams_main_balance_function+0xec>)
 8024416:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 802441a:	4b09      	ldr	r3, [pc, #36]	; (8024440 <ams_main_balance_function+0xe8>)
 802441c:	edd3 7a00 	vldr	s15, [r3]
 8024420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024424:	4b06      	ldr	r3, [pc, #24]	; (8024440 <ams_main_balance_function+0xe8>)
 8024426:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_BALANCE;
 802442a:	2329      	movs	r3, #41	; 0x29
}
 802442c:	4618      	mov	r0, r3
 802442e:	bdb0      	pop	{r4, r5, r7, pc}
 8024430:	d2f1a9fc 	.word	0xd2f1a9fc
 8024434:	3f50624d 	.word	0x3f50624d
 8024438:	47ae147b 	.word	0x47ae147b
 802443c:	3f747ae1 	.word	0x3f747ae1
 8024440:	20001a38 	.word	0x20001a38
 8024444:	2001c100 	.word	0x2001c100
 8024448:	20001a2e 	.word	0x20001a2e

0802444c <ams_main_0_function>:

ams_state_t ams_main_0_function() {
 802444c:	b480      	push	{r7}
 802444e:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8024450:	4b04      	ldr	r3, [pc, #16]	; (8024464 <ams_main_0_function+0x18>)
 8024452:	f04f 0200 	mov.w	r2, #0
 8024456:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_IDLE;
 8024458:	2328      	movs	r3, #40	; 0x28
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_MAIN_0;
}
 802445a:	4618      	mov	r0, r3
 802445c:	46bd      	mov	sp, r7
 802445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024462:	4770      	bx	lr
 8024464:	20001a38 	.word	0x20001a38

08024468 <ams_main_function>:

ams_state_t ams_main_function() {
 8024468:	b5b0      	push	{r4, r5, r7, lr}
 802446a:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 802446c:	4b66      	ldr	r3, [pc, #408]	; (8024608 <ams_main_function+0x1a0>)
 802446e:	681b      	ldr	r3, [r3, #0]
 8024470:	4618      	mov	r0, r3
 8024472:	f7dc f85b 	bl	800052c <__aeabi_f2d>
 8024476:	4604      	mov	r4, r0
 8024478:	460d      	mov	r5, r1
 802447a:	4b64      	ldr	r3, [pc, #400]	; (802460c <ams_main_function+0x1a4>)
 802447c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802447e:	4618      	mov	r0, r3
 8024480:	f7dc f854 	bl	800052c <__aeabi_f2d>
 8024484:	a35e      	add	r3, pc, #376	; (adr r3, 8024600 <ams_main_function+0x198>)
 8024486:	e9d3 2300 	ldrd	r2, r3, [r3]
 802448a:	f7dc f8a7 	bl	80005dc <__aeabi_dmul>
 802448e:	4602      	mov	r2, r0
 8024490:	460b      	mov	r3, r1
 8024492:	4620      	mov	r0, r4
 8024494:	4629      	mov	r1, r5
 8024496:	f7dc fb13 	bl	8000ac0 <__aeabi_dcmplt>
 802449a:	4603      	mov	r3, r0
 802449c:	2b00      	cmp	r3, #0
 802449e:	d002      	beq.n	80244a6 <ams_main_function+0x3e>
       state_r2 = STATE_AMS_MAIN_0;
 80244a0:	4b5b      	ldr	r3, [pc, #364]	; (8024610 <ams_main_function+0x1a8>)
 80244a2:	222d      	movs	r2, #45	; 0x2d
 80244a4:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 80244a6:	4b5a      	ldr	r3, [pc, #360]	; (8024610 <ams_main_function+0x1a8>)
 80244a8:	781b      	ldrb	r3, [r3, #0]
 80244aa:	3b08      	subs	r3, #8
 80244ac:	2b25      	cmp	r3, #37	; 0x25
 80244ae:	f200 8080 	bhi.w	80245b2 <ams_main_function+0x14a>
 80244b2:	a201      	add	r2, pc, #4	; (adr r2, 80244b8 <ams_main_function+0x50>)
 80244b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80244b8:	08024551 	.word	0x08024551
 80244bc:	080245b3 	.word	0x080245b3
 80244c0:	080245b3 	.word	0x080245b3
 80244c4:	080245b3 	.word	0x080245b3
 80244c8:	080245b3 	.word	0x080245b3
 80244cc:	080245b3 	.word	0x080245b3
 80244d0:	080245b3 	.word	0x080245b3
 80244d4:	080245b3 	.word	0x080245b3
 80244d8:	080245b3 	.word	0x080245b3
 80244dc:	080245b3 	.word	0x080245b3
 80244e0:	0802455f 	.word	0x0802455f
 80244e4:	080245b3 	.word	0x080245b3
 80244e8:	080245b3 	.word	0x080245b3
 80244ec:	080245b3 	.word	0x080245b3
 80244f0:	080245b3 	.word	0x080245b3
 80244f4:	080245b3 	.word	0x080245b3
 80244f8:	0802456d 	.word	0x0802456d
 80244fc:	080245b3 	.word	0x080245b3
 8024500:	080245b3 	.word	0x080245b3
 8024504:	080245b3 	.word	0x080245b3
 8024508:	080245b3 	.word	0x080245b3
 802450c:	080245b3 	.word	0x080245b3
 8024510:	080245b3 	.word	0x080245b3
 8024514:	080245b3 	.word	0x080245b3
 8024518:	080245b3 	.word	0x080245b3
 802451c:	080245b3 	.word	0x080245b3
 8024520:	0802457b 	.word	0x0802457b
 8024524:	080245b3 	.word	0x080245b3
 8024528:	080245b3 	.word	0x080245b3
 802452c:	080245b3 	.word	0x080245b3
 8024530:	080245b3 	.word	0x080245b3
 8024534:	080245b3 	.word	0x080245b3
 8024538:	08024589 	.word	0x08024589
 802453c:	08024597 	.word	0x08024597
 8024540:	080245b3 	.word	0x080245b3
 8024544:	080245b3 	.word	0x080245b3
 8024548:	080245b3 	.word	0x080245b3
 802454c:	080245a5 	.word	0x080245a5
       case STATE_AMS_MAIN_PRECHARGE_DRIVE:
           state_r2 = ams_main_precharge_drive_function();
 8024550:	f7ff f86e 	bl	8023630 <ams_main_precharge_drive_function>
 8024554:	4603      	mov	r3, r0
 8024556:	461a      	mov	r2, r3
 8024558:	4b2d      	ldr	r3, [pc, #180]	; (8024610 <ams_main_function+0x1a8>)
 802455a:	701a      	strb	r2, [r3, #0]
           break;
 802455c:	e02c      	b.n	80245b8 <ams_main_function+0x150>
       case STATE_AMS_MAIN_DRIVE:
           state_r2 = ams_main_drive_function();
 802455e:	f7ff f9e7 	bl	8023930 <ams_main_drive_function>
 8024562:	4603      	mov	r3, r0
 8024564:	461a      	mov	r2, r3
 8024566:	4b2a      	ldr	r3, [pc, #168]	; (8024610 <ams_main_function+0x1a8>)
 8024568:	701a      	strb	r2, [r3, #0]
           break;
 802456a:	e025      	b.n	80245b8 <ams_main_function+0x150>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE:
           state_r2 = ams_main_precharge_charge_function();
 802456c:	f7ff fc50 	bl	8023e10 <ams_main_precharge_charge_function>
 8024570:	4603      	mov	r3, r0
 8024572:	461a      	mov	r2, r3
 8024574:	4b26      	ldr	r3, [pc, #152]	; (8024610 <ams_main_function+0x1a8>)
 8024576:	701a      	strb	r2, [r3, #0]
           break;
 8024578:	e01e      	b.n	80245b8 <ams_main_function+0x150>
       case STATE_AMS_MAIN_CHARGE:
           state_r2 = ams_main_charge_function();
 802457a:	f7ff fdd1 	bl	8024120 <ams_main_charge_function>
 802457e:	4603      	mov	r3, r0
 8024580:	461a      	mov	r2, r3
 8024582:	4b23      	ldr	r3, [pc, #140]	; (8024610 <ams_main_function+0x1a8>)
 8024584:	701a      	strb	r2, [r3, #0]
           break;
 8024586:	e017      	b.n	80245b8 <ams_main_function+0x150>
       case STATE_AMS_MAIN_IDLE:
           state_r2 = ams_main_idle_function();
 8024588:	f7ff fe4a 	bl	8024220 <ams_main_idle_function>
 802458c:	4603      	mov	r3, r0
 802458e:	461a      	mov	r2, r3
 8024590:	4b1f      	ldr	r3, [pc, #124]	; (8024610 <ams_main_function+0x1a8>)
 8024592:	701a      	strb	r2, [r3, #0]
           break;
 8024594:	e010      	b.n	80245b8 <ams_main_function+0x150>
       case STATE_AMS_MAIN_BALANCE:
           state_r2 = ams_main_balance_function();
 8024596:	f7ff fedf 	bl	8024358 <ams_main_balance_function>
 802459a:	4603      	mov	r3, r0
 802459c:	461a      	mov	r2, r3
 802459e:	4b1c      	ldr	r3, [pc, #112]	; (8024610 <ams_main_function+0x1a8>)
 80245a0:	701a      	strb	r2, [r3, #0]
           break;
 80245a2:	e009      	b.n	80245b8 <ams_main_function+0x150>
       case STATE_AMS_MAIN_0:
           state_r2 = ams_main_0_function();
 80245a4:	f7ff ff52 	bl	802444c <ams_main_0_function>
 80245a8:	4603      	mov	r3, r0
 80245aa:	461a      	mov	r2, r3
 80245ac:	4b18      	ldr	r3, [pc, #96]	; (8024610 <ams_main_function+0x1a8>)
 80245ae:	701a      	strb	r2, [r3, #0]
           break;
 80245b0:	e002      	b.n	80245b8 <ams_main_function+0x150>
       default:
           ams_error();
 80245b2:	f7fe fd88 	bl	80230c6 <ams_error>
           break;
 80245b6:	bf00      	nop
   }

   if(ams_outputs.error||ams_inputs.ams_error||ams_inputs.imd_error) {
 80245b8:	4b16      	ldr	r3, [pc, #88]	; (8024614 <ams_main_function+0x1ac>)
 80245ba:	7a1b      	ldrb	r3, [r3, #8]
 80245bc:	2b00      	cmp	r3, #0
 80245be:	d109      	bne.n	80245d4 <ams_main_function+0x16c>
 80245c0:	4b12      	ldr	r3, [pc, #72]	; (802460c <ams_main_function+0x1a4>)
 80245c2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80245c6:	2b00      	cmp	r3, #0
 80245c8:	d104      	bne.n	80245d4 <ams_main_function+0x16c>
 80245ca:	4b10      	ldr	r3, [pc, #64]	; (802460c <ams_main_function+0x1a4>)
 80245cc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80245d0:	2b00      	cmp	r3, #0
 80245d2:	d005      	beq.n	80245e0 <ams_main_function+0x178>
       timer_r1 = 0;
 80245d4:	4b0c      	ldr	r3, [pc, #48]	; (8024608 <ams_main_function+0x1a0>)
 80245d6:	f04f 0200 	mov.w	r2, #0
 80245da:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR;
 80245dc:	2302      	movs	r3, #2
 80245de:	e00b      	b.n	80245f8 <ams_main_function+0x190>
   }


   timer_r1 += ams_inputs.Ts;
 80245e0:	4b0a      	ldr	r3, [pc, #40]	; (802460c <ams_main_function+0x1a4>)
 80245e2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80245e6:	4b08      	ldr	r3, [pc, #32]	; (8024608 <ams_main_function+0x1a0>)
 80245e8:	edd3 7a00 	vldr	s15, [r3]
 80245ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80245f0:	4b05      	ldr	r3, [pc, #20]	; (8024608 <ams_main_function+0x1a0>)
 80245f2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN;
 80245f6:	2307      	movs	r3, #7
}
 80245f8:	4618      	mov	r0, r3
 80245fa:	bdb0      	pop	{r4, r5, r7, pc}
 80245fc:	f3af 8000 	nop.w
 8024600:	d2f1a9fc 	.word	0xd2f1a9fc
 8024604:	3f50624d 	.word	0x3f50624d
 8024608:	20001a34 	.word	0x20001a34
 802460c:	2001c100 	.word	0x2001c100
 8024610:	20001a2d 	.word	0x20001a2d
 8024614:	2001c160 	.word	0x2001c160

08024618 <ams_0_function>:

ams_state_t ams_0_function() {
 8024618:	b480      	push	{r7}
 802461a:	af00      	add	r7, sp, #0
   if(1) {
       timer_r1 = 0;
 802461c:	4b04      	ldr	r3, [pc, #16]	; (8024630 <ams_0_function+0x18>)
 802461e:	f04f 0200 	mov.w	r2, #0
 8024622:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN;
 8024624:	2307      	movs	r3, #7
   }

   timer_r1 += ams_inputs.Ts;
   return STATE_AMS_0;
}
 8024626:	4618      	mov	r0, r3
 8024628:	46bd      	mov	sp, r7
 802462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802462e:	4770      	bx	lr
 8024630:	20001a34 	.word	0x20001a34
 8024634:	00000000 	.word	0x00000000

08024638 <ams_function>:

ams_state_t ams_function() {
 8024638:	b5b0      	push	{r4, r5, r7, lr}
 802463a:	af00      	add	r7, sp, #0
   if(timer_r0 < 0.001*ams_inputs.Ts) {
 802463c:	4b28      	ldr	r3, [pc, #160]	; (80246e0 <ams_function+0xa8>)
 802463e:	681b      	ldr	r3, [r3, #0]
 8024640:	4618      	mov	r0, r3
 8024642:	f7db ff73 	bl	800052c <__aeabi_f2d>
 8024646:	4604      	mov	r4, r0
 8024648:	460d      	mov	r5, r1
 802464a:	4b26      	ldr	r3, [pc, #152]	; (80246e4 <ams_function+0xac>)
 802464c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802464e:	4618      	mov	r0, r3
 8024650:	f7db ff6c 	bl	800052c <__aeabi_f2d>
 8024654:	a320      	add	r3, pc, #128	; (adr r3, 80246d8 <ams_function+0xa0>)
 8024656:	e9d3 2300 	ldrd	r2, r3, [r3]
 802465a:	f7db ffbf 	bl	80005dc <__aeabi_dmul>
 802465e:	4602      	mov	r2, r0
 8024660:	460b      	mov	r3, r1
 8024662:	4620      	mov	r0, r4
 8024664:	4629      	mov	r1, r5
 8024666:	f7dc fa2b 	bl	8000ac0 <__aeabi_dcmplt>
 802466a:	4603      	mov	r3, r0
 802466c:	2b00      	cmp	r3, #0
 802466e:	d002      	beq.n	8024676 <ams_function+0x3e>
       state_r1 = STATE_AMS_0;
 8024670:	4b1d      	ldr	r3, [pc, #116]	; (80246e8 <ams_function+0xb0>)
 8024672:	222e      	movs	r2, #46	; 0x2e
 8024674:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r1) {
 8024676:	4b1c      	ldr	r3, [pc, #112]	; (80246e8 <ams_function+0xb0>)
 8024678:	781b      	ldrb	r3, [r3, #0]
 802467a:	2b2e      	cmp	r3, #46	; 0x2e
 802467c:	d014      	beq.n	80246a8 <ams_function+0x70>
 802467e:	2b2e      	cmp	r3, #46	; 0x2e
 8024680:	dc19      	bgt.n	80246b6 <ams_function+0x7e>
 8024682:	2b02      	cmp	r3, #2
 8024684:	d002      	beq.n	802468c <ams_function+0x54>
 8024686:	2b07      	cmp	r3, #7
 8024688:	d007      	beq.n	802469a <ams_function+0x62>
 802468a:	e014      	b.n	80246b6 <ams_function+0x7e>
       case STATE_AMS_ERROR:
           state_r1 = ams_error_function();
 802468c:	f7fe fd90 	bl	80231b0 <ams_error_function>
 8024690:	4603      	mov	r3, r0
 8024692:	461a      	mov	r2, r3
 8024694:	4b14      	ldr	r3, [pc, #80]	; (80246e8 <ams_function+0xb0>)
 8024696:	701a      	strb	r2, [r3, #0]
           break;
 8024698:	e010      	b.n	80246bc <ams_function+0x84>
       case STATE_AMS_MAIN:
           state_r1 = ams_main_function();
 802469a:	f7ff fee5 	bl	8024468 <ams_main_function>
 802469e:	4603      	mov	r3, r0
 80246a0:	461a      	mov	r2, r3
 80246a2:	4b11      	ldr	r3, [pc, #68]	; (80246e8 <ams_function+0xb0>)
 80246a4:	701a      	strb	r2, [r3, #0]
           break;
 80246a6:	e009      	b.n	80246bc <ams_function+0x84>
       case STATE_AMS_0:
           state_r1 = ams_0_function();
 80246a8:	f7ff ffb6 	bl	8024618 <ams_0_function>
 80246ac:	4603      	mov	r3, r0
 80246ae:	461a      	mov	r2, r3
 80246b0:	4b0d      	ldr	r3, [pc, #52]	; (80246e8 <ams_function+0xb0>)
 80246b2:	701a      	strb	r2, [r3, #0]
           break;
 80246b4:	e002      	b.n	80246bc <ams_function+0x84>
       default:
           ams_error();
 80246b6:	f7fe fd06 	bl	80230c6 <ams_error>
           break;
 80246ba:	bf00      	nop
   }

   timer_r0 += ams_inputs.Ts;
 80246bc:	4b09      	ldr	r3, [pc, #36]	; (80246e4 <ams_function+0xac>)
 80246be:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80246c2:	4b07      	ldr	r3, [pc, #28]	; (80246e0 <ams_function+0xa8>)
 80246c4:	edd3 7a00 	vldr	s15, [r3]
 80246c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80246cc:	4b04      	ldr	r3, [pc, #16]	; (80246e0 <ams_function+0xa8>)
 80246ce:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS;
 80246d2:	2301      	movs	r3, #1
}
 80246d4:	4618      	mov	r0, r3
 80246d6:	bdb0      	pop	{r4, r5, r7, pc}
 80246d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80246dc:	3f50624d 	.word	0x3f50624d
 80246e0:	20001a30 	.word	0x20001a30
 80246e4:	2001c100 	.word	0x2001c100
 80246e8:	20001a2c 	.word	0x20001a2c

080246ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80246ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8024724 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80246f0:	480d      	ldr	r0, [pc, #52]	; (8024728 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80246f2:	490e      	ldr	r1, [pc, #56]	; (802472c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80246f4:	4a0e      	ldr	r2, [pc, #56]	; (8024730 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80246f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80246f8:	e002      	b.n	8024700 <LoopCopyDataInit>

080246fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80246fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80246fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80246fe:	3304      	adds	r3, #4

08024700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8024700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8024702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8024704:	d3f9      	bcc.n	80246fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8024706:	4a0b      	ldr	r2, [pc, #44]	; (8024734 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8024708:	4c0b      	ldr	r4, [pc, #44]	; (8024738 <LoopFillZerobss+0x26>)
  movs r3, #0
 802470a:	2300      	movs	r3, #0
  b LoopFillZerobss
 802470c:	e001      	b.n	8024712 <LoopFillZerobss>

0802470e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802470e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8024710:	3204      	adds	r2, #4

08024712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8024712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8024714:	d3fb      	bcc.n	802470e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8024716:	f7f3 fa65 	bl	8017be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802471a:	f009 ff9f 	bl	802e65c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802471e:	f7f1 fded 	bl	80162fc <main>
  bx  lr    
 8024722:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8024724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8024728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 802472c:	200014ac 	.word	0x200014ac
  ldr r2, =_sidata
 8024730:	08030d00 	.word	0x08030d00
  ldr r2, =_sbss
 8024734:	200014b0 	.word	0x200014b0
  ldr r4, =_ebss
 8024738:	2001ef74 	.word	0x2001ef74

0802473c <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802473c:	e7fe      	b.n	802473c <CAN1_SCE_IRQHandler>
	...

08024740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8024740:	b580      	push	{r7, lr}
 8024742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8024744:	4b0e      	ldr	r3, [pc, #56]	; (8024780 <HAL_Init+0x40>)
 8024746:	681b      	ldr	r3, [r3, #0]
 8024748:	4a0d      	ldr	r2, [pc, #52]	; (8024780 <HAL_Init+0x40>)
 802474a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802474e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8024750:	4b0b      	ldr	r3, [pc, #44]	; (8024780 <HAL_Init+0x40>)
 8024752:	681b      	ldr	r3, [r3, #0]
 8024754:	4a0a      	ldr	r2, [pc, #40]	; (8024780 <HAL_Init+0x40>)
 8024756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802475a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 802475c:	4b08      	ldr	r3, [pc, #32]	; (8024780 <HAL_Init+0x40>)
 802475e:	681b      	ldr	r3, [r3, #0]
 8024760:	4a07      	ldr	r2, [pc, #28]	; (8024780 <HAL_Init+0x40>)
 8024762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8024766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8024768:	2003      	movs	r0, #3
 802476a:	f001 fd1e 	bl	80261aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802476e:	200f      	movs	r0, #15
 8024770:	f7f3 f948 	bl	8017a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8024774:	f7f3 f91a 	bl	80179ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8024778:	2300      	movs	r3, #0
}
 802477a:	4618      	mov	r0, r3
 802477c:	bd80      	pop	{r7, pc}
 802477e:	bf00      	nop
 8024780:	40023c00 	.word	0x40023c00

08024784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8024784:	b480      	push	{r7}
 8024786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8024788:	4b06      	ldr	r3, [pc, #24]	; (80247a4 <HAL_IncTick+0x20>)
 802478a:	781b      	ldrb	r3, [r3, #0]
 802478c:	461a      	mov	r2, r3
 802478e:	4b06      	ldr	r3, [pc, #24]	; (80247a8 <HAL_IncTick+0x24>)
 8024790:	681b      	ldr	r3, [r3, #0]
 8024792:	4413      	add	r3, r2
 8024794:	4a04      	ldr	r2, [pc, #16]	; (80247a8 <HAL_IncTick+0x24>)
 8024796:	6013      	str	r3, [r2, #0]
}
 8024798:	bf00      	nop
 802479a:	46bd      	mov	sp, r7
 802479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247a0:	4770      	bx	lr
 80247a2:	bf00      	nop
 80247a4:	2000143c 	.word	0x2000143c
 80247a8:	2001ee7c 	.word	0x2001ee7c

080247ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80247ac:	b480      	push	{r7}
 80247ae:	af00      	add	r7, sp, #0
  return uwTick;
 80247b0:	4b03      	ldr	r3, [pc, #12]	; (80247c0 <HAL_GetTick+0x14>)
 80247b2:	681b      	ldr	r3, [r3, #0]
}
 80247b4:	4618      	mov	r0, r3
 80247b6:	46bd      	mov	sp, r7
 80247b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247bc:	4770      	bx	lr
 80247be:	bf00      	nop
 80247c0:	2001ee7c 	.word	0x2001ee7c

080247c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80247c4:	b580      	push	{r7, lr}
 80247c6:	b084      	sub	sp, #16
 80247c8:	af00      	add	r7, sp, #0
 80247ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80247cc:	f7ff ffee 	bl	80247ac <HAL_GetTick>
 80247d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80247d2:	687b      	ldr	r3, [r7, #4]
 80247d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80247d6:	68fb      	ldr	r3, [r7, #12]
 80247d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80247dc:	d005      	beq.n	80247ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80247de:	4b0a      	ldr	r3, [pc, #40]	; (8024808 <HAL_Delay+0x44>)
 80247e0:	781b      	ldrb	r3, [r3, #0]
 80247e2:	461a      	mov	r2, r3
 80247e4:	68fb      	ldr	r3, [r7, #12]
 80247e6:	4413      	add	r3, r2
 80247e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80247ea:	bf00      	nop
 80247ec:	f7ff ffde 	bl	80247ac <HAL_GetTick>
 80247f0:	4602      	mov	r2, r0
 80247f2:	68bb      	ldr	r3, [r7, #8]
 80247f4:	1ad3      	subs	r3, r2, r3
 80247f6:	68fa      	ldr	r2, [r7, #12]
 80247f8:	429a      	cmp	r2, r3
 80247fa:	d8f7      	bhi.n	80247ec <HAL_Delay+0x28>
  {
  }
}
 80247fc:	bf00      	nop
 80247fe:	bf00      	nop
 8024800:	3710      	adds	r7, #16
 8024802:	46bd      	mov	sp, r7
 8024804:	bd80      	pop	{r7, pc}
 8024806:	bf00      	nop
 8024808:	2000143c 	.word	0x2000143c

0802480c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 802480c:	b580      	push	{r7, lr}
 802480e:	b084      	sub	sp, #16
 8024810:	af00      	add	r7, sp, #0
 8024812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8024814:	2300      	movs	r3, #0
 8024816:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8024818:	687b      	ldr	r3, [r7, #4]
 802481a:	2b00      	cmp	r3, #0
 802481c:	d101      	bne.n	8024822 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 802481e:	2301      	movs	r3, #1
 8024820:	e033      	b.n	802488a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8024822:	687b      	ldr	r3, [r7, #4]
 8024824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024826:	2b00      	cmp	r3, #0
 8024828:	d109      	bne.n	802483e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 802482a:	6878      	ldr	r0, [r7, #4]
 802482c:	f7f0 fca0 	bl	8015170 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8024830:	687b      	ldr	r3, [r7, #4]
 8024832:	2200      	movs	r2, #0
 8024834:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8024836:	687b      	ldr	r3, [r7, #4]
 8024838:	2200      	movs	r2, #0
 802483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 802483e:	687b      	ldr	r3, [r7, #4]
 8024840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024842:	f003 0310 	and.w	r3, r3, #16
 8024846:	2b00      	cmp	r3, #0
 8024848:	d118      	bne.n	802487c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 802484a:	687b      	ldr	r3, [r7, #4]
 802484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802484e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8024852:	f023 0302 	bic.w	r3, r3, #2
 8024856:	f043 0202 	orr.w	r2, r3, #2
 802485a:	687b      	ldr	r3, [r7, #4]
 802485c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 802485e:	6878      	ldr	r0, [r7, #4]
 8024860:	f000 fb9e 	bl	8024fa0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8024864:	687b      	ldr	r3, [r7, #4]
 8024866:	2200      	movs	r2, #0
 8024868:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 802486a:	687b      	ldr	r3, [r7, #4]
 802486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802486e:	f023 0303 	bic.w	r3, r3, #3
 8024872:	f043 0201 	orr.w	r2, r3, #1
 8024876:	687b      	ldr	r3, [r7, #4]
 8024878:	641a      	str	r2, [r3, #64]	; 0x40
 802487a:	e001      	b.n	8024880 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 802487c:	2301      	movs	r3, #1
 802487e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8024880:	687b      	ldr	r3, [r7, #4]
 8024882:	2200      	movs	r2, #0
 8024884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8024888:	7bfb      	ldrb	r3, [r7, #15]
}
 802488a:	4618      	mov	r0, r3
 802488c:	3710      	adds	r7, #16
 802488e:	46bd      	mov	sp, r7
 8024890:	bd80      	pop	{r7, pc}

08024892 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8024892:	b580      	push	{r7, lr}
 8024894:	b084      	sub	sp, #16
 8024896:	af00      	add	r7, sp, #0
 8024898:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 802489a:	2300      	movs	r3, #0
 802489c:	60fb      	str	r3, [r7, #12]
 802489e:	2300      	movs	r3, #0
 80248a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80248a2:	687b      	ldr	r3, [r7, #4]
 80248a4:	681b      	ldr	r3, [r3, #0]
 80248a6:	681b      	ldr	r3, [r3, #0]
 80248a8:	f003 0302 	and.w	r3, r3, #2
 80248ac:	2b02      	cmp	r3, #2
 80248ae:	bf0c      	ite	eq
 80248b0:	2301      	moveq	r3, #1
 80248b2:	2300      	movne	r3, #0
 80248b4:	b2db      	uxtb	r3, r3
 80248b6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80248b8:	687b      	ldr	r3, [r7, #4]
 80248ba:	681b      	ldr	r3, [r3, #0]
 80248bc:	685b      	ldr	r3, [r3, #4]
 80248be:	f003 0320 	and.w	r3, r3, #32
 80248c2:	2b20      	cmp	r3, #32
 80248c4:	bf0c      	ite	eq
 80248c6:	2301      	moveq	r3, #1
 80248c8:	2300      	movne	r3, #0
 80248ca:	b2db      	uxtb	r3, r3
 80248cc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80248ce:	68fb      	ldr	r3, [r7, #12]
 80248d0:	2b00      	cmp	r3, #0
 80248d2:	d049      	beq.n	8024968 <HAL_ADC_IRQHandler+0xd6>
 80248d4:	68bb      	ldr	r3, [r7, #8]
 80248d6:	2b00      	cmp	r3, #0
 80248d8:	d046      	beq.n	8024968 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80248da:	687b      	ldr	r3, [r7, #4]
 80248dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80248de:	f003 0310 	and.w	r3, r3, #16
 80248e2:	2b00      	cmp	r3, #0
 80248e4:	d105      	bne.n	80248f2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80248e6:	687b      	ldr	r3, [r7, #4]
 80248e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80248ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80248ee:	687b      	ldr	r3, [r7, #4]
 80248f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80248f2:	687b      	ldr	r3, [r7, #4]
 80248f4:	681b      	ldr	r3, [r3, #0]
 80248f6:	689b      	ldr	r3, [r3, #8]
 80248f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80248fc:	2b00      	cmp	r3, #0
 80248fe:	d12b      	bne.n	8024958 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8024900:	687b      	ldr	r3, [r7, #4]
 8024902:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8024904:	2b00      	cmp	r3, #0
 8024906:	d127      	bne.n	8024958 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8024908:	687b      	ldr	r3, [r7, #4]
 802490a:	681b      	ldr	r3, [r3, #0]
 802490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802490e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8024912:	2b00      	cmp	r3, #0
 8024914:	d006      	beq.n	8024924 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8024916:	687b      	ldr	r3, [r7, #4]
 8024918:	681b      	ldr	r3, [r3, #0]
 802491a:	689b      	ldr	r3, [r3, #8]
 802491c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8024920:	2b00      	cmp	r3, #0
 8024922:	d119      	bne.n	8024958 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8024924:	687b      	ldr	r3, [r7, #4]
 8024926:	681b      	ldr	r3, [r3, #0]
 8024928:	685a      	ldr	r2, [r3, #4]
 802492a:	687b      	ldr	r3, [r7, #4]
 802492c:	681b      	ldr	r3, [r3, #0]
 802492e:	f022 0220 	bic.w	r2, r2, #32
 8024932:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8024934:	687b      	ldr	r3, [r7, #4]
 8024936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024938:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802493c:	687b      	ldr	r3, [r7, #4]
 802493e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8024940:	687b      	ldr	r3, [r7, #4]
 8024942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8024948:	2b00      	cmp	r3, #0
 802494a:	d105      	bne.n	8024958 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 802494c:	687b      	ldr	r3, [r7, #4]
 802494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024950:	f043 0201 	orr.w	r2, r3, #1
 8024954:	687b      	ldr	r3, [r7, #4]
 8024956:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8024958:	6878      	ldr	r0, [r7, #4]
 802495a:	f7f0 fea9 	bl	80156b0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 802495e:	687b      	ldr	r3, [r7, #4]
 8024960:	681b      	ldr	r3, [r3, #0]
 8024962:	f06f 0212 	mvn.w	r2, #18
 8024966:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8024968:	687b      	ldr	r3, [r7, #4]
 802496a:	681b      	ldr	r3, [r3, #0]
 802496c:	681b      	ldr	r3, [r3, #0]
 802496e:	f003 0304 	and.w	r3, r3, #4
 8024972:	2b04      	cmp	r3, #4
 8024974:	bf0c      	ite	eq
 8024976:	2301      	moveq	r3, #1
 8024978:	2300      	movne	r3, #0
 802497a:	b2db      	uxtb	r3, r3
 802497c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 802497e:	687b      	ldr	r3, [r7, #4]
 8024980:	681b      	ldr	r3, [r3, #0]
 8024982:	685b      	ldr	r3, [r3, #4]
 8024984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024988:	2b80      	cmp	r3, #128	; 0x80
 802498a:	bf0c      	ite	eq
 802498c:	2301      	moveq	r3, #1
 802498e:	2300      	movne	r3, #0
 8024990:	b2db      	uxtb	r3, r3
 8024992:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8024994:	68fb      	ldr	r3, [r7, #12]
 8024996:	2b00      	cmp	r3, #0
 8024998:	d057      	beq.n	8024a4a <HAL_ADC_IRQHandler+0x1b8>
 802499a:	68bb      	ldr	r3, [r7, #8]
 802499c:	2b00      	cmp	r3, #0
 802499e:	d054      	beq.n	8024a4a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80249a0:	687b      	ldr	r3, [r7, #4]
 80249a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249a4:	f003 0310 	and.w	r3, r3, #16
 80249a8:	2b00      	cmp	r3, #0
 80249aa:	d105      	bne.n	80249b8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80249ac:	687b      	ldr	r3, [r7, #4]
 80249ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249b0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80249b4:	687b      	ldr	r3, [r7, #4]
 80249b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80249b8:	687b      	ldr	r3, [r7, #4]
 80249ba:	681b      	ldr	r3, [r3, #0]
 80249bc:	689b      	ldr	r3, [r3, #8]
 80249be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80249c2:	2b00      	cmp	r3, #0
 80249c4:	d139      	bne.n	8024a3a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80249c6:	687b      	ldr	r3, [r7, #4]
 80249c8:	681b      	ldr	r3, [r3, #0]
 80249ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80249cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80249d0:	2b00      	cmp	r3, #0
 80249d2:	d006      	beq.n	80249e2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80249d4:	687b      	ldr	r3, [r7, #4]
 80249d6:	681b      	ldr	r3, [r3, #0]
 80249d8:	689b      	ldr	r3, [r3, #8]
 80249da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80249de:	2b00      	cmp	r3, #0
 80249e0:	d12b      	bne.n	8024a3a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80249e2:	687b      	ldr	r3, [r7, #4]
 80249e4:	681b      	ldr	r3, [r3, #0]
 80249e6:	685b      	ldr	r3, [r3, #4]
 80249e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80249ec:	2b00      	cmp	r3, #0
 80249ee:	d124      	bne.n	8024a3a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80249f0:	687b      	ldr	r3, [r7, #4]
 80249f2:	681b      	ldr	r3, [r3, #0]
 80249f4:	689b      	ldr	r3, [r3, #8]
 80249f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80249fa:	2b00      	cmp	r3, #0
 80249fc:	d11d      	bne.n	8024a3a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80249fe:	687b      	ldr	r3, [r7, #4]
 8024a00:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8024a02:	2b00      	cmp	r3, #0
 8024a04:	d119      	bne.n	8024a3a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8024a06:	687b      	ldr	r3, [r7, #4]
 8024a08:	681b      	ldr	r3, [r3, #0]
 8024a0a:	685a      	ldr	r2, [r3, #4]
 8024a0c:	687b      	ldr	r3, [r7, #4]
 8024a0e:	681b      	ldr	r3, [r3, #0]
 8024a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8024a14:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8024a16:	687b      	ldr	r3, [r7, #4]
 8024a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8024a1e:	687b      	ldr	r3, [r7, #4]
 8024a20:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8024a22:	687b      	ldr	r3, [r7, #4]
 8024a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024a2a:	2b00      	cmp	r3, #0
 8024a2c:	d105      	bne.n	8024a3a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8024a2e:	687b      	ldr	r3, [r7, #4]
 8024a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a32:	f043 0201 	orr.w	r2, r3, #1
 8024a36:	687b      	ldr	r3, [r7, #4]
 8024a38:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8024a3a:	6878      	ldr	r0, [r7, #4]
 8024a3c:	f000 fc2e 	bl	802529c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8024a40:	687b      	ldr	r3, [r7, #4]
 8024a42:	681b      	ldr	r3, [r3, #0]
 8024a44:	f06f 020c 	mvn.w	r2, #12
 8024a48:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8024a4a:	687b      	ldr	r3, [r7, #4]
 8024a4c:	681b      	ldr	r3, [r3, #0]
 8024a4e:	681b      	ldr	r3, [r3, #0]
 8024a50:	f003 0301 	and.w	r3, r3, #1
 8024a54:	2b01      	cmp	r3, #1
 8024a56:	bf0c      	ite	eq
 8024a58:	2301      	moveq	r3, #1
 8024a5a:	2300      	movne	r3, #0
 8024a5c:	b2db      	uxtb	r3, r3
 8024a5e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8024a60:	687b      	ldr	r3, [r7, #4]
 8024a62:	681b      	ldr	r3, [r3, #0]
 8024a64:	685b      	ldr	r3, [r3, #4]
 8024a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024a6a:	2b40      	cmp	r3, #64	; 0x40
 8024a6c:	bf0c      	ite	eq
 8024a6e:	2301      	moveq	r3, #1
 8024a70:	2300      	movne	r3, #0
 8024a72:	b2db      	uxtb	r3, r3
 8024a74:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8024a76:	68fb      	ldr	r3, [r7, #12]
 8024a78:	2b00      	cmp	r3, #0
 8024a7a:	d017      	beq.n	8024aac <HAL_ADC_IRQHandler+0x21a>
 8024a7c:	68bb      	ldr	r3, [r7, #8]
 8024a7e:	2b00      	cmp	r3, #0
 8024a80:	d014      	beq.n	8024aac <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8024a82:	687b      	ldr	r3, [r7, #4]
 8024a84:	681b      	ldr	r3, [r3, #0]
 8024a86:	681b      	ldr	r3, [r3, #0]
 8024a88:	f003 0301 	and.w	r3, r3, #1
 8024a8c:	2b01      	cmp	r3, #1
 8024a8e:	d10d      	bne.n	8024aac <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8024a90:	687b      	ldr	r3, [r7, #4]
 8024a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8024a98:	687b      	ldr	r3, [r7, #4]
 8024a9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8024a9c:	6878      	ldr	r0, [r7, #4]
 8024a9e:	f000 f949 	bl	8024d34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8024aa2:	687b      	ldr	r3, [r7, #4]
 8024aa4:	681b      	ldr	r3, [r3, #0]
 8024aa6:	f06f 0201 	mvn.w	r2, #1
 8024aaa:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8024aac:	687b      	ldr	r3, [r7, #4]
 8024aae:	681b      	ldr	r3, [r3, #0]
 8024ab0:	681b      	ldr	r3, [r3, #0]
 8024ab2:	f003 0320 	and.w	r3, r3, #32
 8024ab6:	2b20      	cmp	r3, #32
 8024ab8:	bf0c      	ite	eq
 8024aba:	2301      	moveq	r3, #1
 8024abc:	2300      	movne	r3, #0
 8024abe:	b2db      	uxtb	r3, r3
 8024ac0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8024ac2:	687b      	ldr	r3, [r7, #4]
 8024ac4:	681b      	ldr	r3, [r3, #0]
 8024ac6:	685b      	ldr	r3, [r3, #4]
 8024ac8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8024acc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8024ad0:	bf0c      	ite	eq
 8024ad2:	2301      	moveq	r3, #1
 8024ad4:	2300      	movne	r3, #0
 8024ad6:	b2db      	uxtb	r3, r3
 8024ad8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8024ada:	68fb      	ldr	r3, [r7, #12]
 8024adc:	2b00      	cmp	r3, #0
 8024ade:	d015      	beq.n	8024b0c <HAL_ADC_IRQHandler+0x27a>
 8024ae0:	68bb      	ldr	r3, [r7, #8]
 8024ae2:	2b00      	cmp	r3, #0
 8024ae4:	d012      	beq.n	8024b0c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8024ae6:	687b      	ldr	r3, [r7, #4]
 8024ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024aea:	f043 0202 	orr.w	r2, r3, #2
 8024aee:	687b      	ldr	r3, [r7, #4]
 8024af0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8024af2:	687b      	ldr	r3, [r7, #4]
 8024af4:	681b      	ldr	r3, [r3, #0]
 8024af6:	f06f 0220 	mvn.w	r2, #32
 8024afa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8024afc:	6878      	ldr	r0, [r7, #4]
 8024afe:	f000 f923 	bl	8024d48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8024b02:	687b      	ldr	r3, [r7, #4]
 8024b04:	681b      	ldr	r3, [r3, #0]
 8024b06:	f06f 0220 	mvn.w	r2, #32
 8024b0a:	601a      	str	r2, [r3, #0]
  }
}
 8024b0c:	bf00      	nop
 8024b0e:	3710      	adds	r7, #16
 8024b10:	46bd      	mov	sp, r7
 8024b12:	bd80      	pop	{r7, pc}

08024b14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8024b14:	b580      	push	{r7, lr}
 8024b16:	b086      	sub	sp, #24
 8024b18:	af00      	add	r7, sp, #0
 8024b1a:	60f8      	str	r0, [r7, #12]
 8024b1c:	60b9      	str	r1, [r7, #8]
 8024b1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8024b20:	2300      	movs	r3, #0
 8024b22:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8024b24:	68fb      	ldr	r3, [r7, #12]
 8024b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8024b2a:	2b01      	cmp	r3, #1
 8024b2c:	d101      	bne.n	8024b32 <HAL_ADC_Start_DMA+0x1e>
 8024b2e:	2302      	movs	r3, #2
 8024b30:	e0e9      	b.n	8024d06 <HAL_ADC_Start_DMA+0x1f2>
 8024b32:	68fb      	ldr	r3, [r7, #12]
 8024b34:	2201      	movs	r2, #1
 8024b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8024b3a:	68fb      	ldr	r3, [r7, #12]
 8024b3c:	681b      	ldr	r3, [r3, #0]
 8024b3e:	689b      	ldr	r3, [r3, #8]
 8024b40:	f003 0301 	and.w	r3, r3, #1
 8024b44:	2b01      	cmp	r3, #1
 8024b46:	d018      	beq.n	8024b7a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8024b48:	68fb      	ldr	r3, [r7, #12]
 8024b4a:	681b      	ldr	r3, [r3, #0]
 8024b4c:	689a      	ldr	r2, [r3, #8]
 8024b4e:	68fb      	ldr	r3, [r7, #12]
 8024b50:	681b      	ldr	r3, [r3, #0]
 8024b52:	f042 0201 	orr.w	r2, r2, #1
 8024b56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8024b58:	4b6d      	ldr	r3, [pc, #436]	; (8024d10 <HAL_ADC_Start_DMA+0x1fc>)
 8024b5a:	681b      	ldr	r3, [r3, #0]
 8024b5c:	4a6d      	ldr	r2, [pc, #436]	; (8024d14 <HAL_ADC_Start_DMA+0x200>)
 8024b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8024b62:	0c9a      	lsrs	r2, r3, #18
 8024b64:	4613      	mov	r3, r2
 8024b66:	005b      	lsls	r3, r3, #1
 8024b68:	4413      	add	r3, r2
 8024b6a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8024b6c:	e002      	b.n	8024b74 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8024b6e:	693b      	ldr	r3, [r7, #16]
 8024b70:	3b01      	subs	r3, #1
 8024b72:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8024b74:	693b      	ldr	r3, [r7, #16]
 8024b76:	2b00      	cmp	r3, #0
 8024b78:	d1f9      	bne.n	8024b6e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8024b7a:	68fb      	ldr	r3, [r7, #12]
 8024b7c:	681b      	ldr	r3, [r3, #0]
 8024b7e:	689b      	ldr	r3, [r3, #8]
 8024b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024b88:	d107      	bne.n	8024b9a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8024b8a:	68fb      	ldr	r3, [r7, #12]
 8024b8c:	681b      	ldr	r3, [r3, #0]
 8024b8e:	689a      	ldr	r2, [r3, #8]
 8024b90:	68fb      	ldr	r3, [r7, #12]
 8024b92:	681b      	ldr	r3, [r3, #0]
 8024b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024b98:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8024b9a:	68fb      	ldr	r3, [r7, #12]
 8024b9c:	681b      	ldr	r3, [r3, #0]
 8024b9e:	689b      	ldr	r3, [r3, #8]
 8024ba0:	f003 0301 	and.w	r3, r3, #1
 8024ba4:	2b01      	cmp	r3, #1
 8024ba6:	f040 80a1 	bne.w	8024cec <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8024baa:	68fb      	ldr	r3, [r7, #12]
 8024bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024bae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8024bb2:	f023 0301 	bic.w	r3, r3, #1
 8024bb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8024bba:	68fb      	ldr	r3, [r7, #12]
 8024bbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8024bbe:	68fb      	ldr	r3, [r7, #12]
 8024bc0:	681b      	ldr	r3, [r3, #0]
 8024bc2:	685b      	ldr	r3, [r3, #4]
 8024bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024bc8:	2b00      	cmp	r3, #0
 8024bca:	d007      	beq.n	8024bdc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8024bcc:	68fb      	ldr	r3, [r7, #12]
 8024bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024bd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8024bd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8024bd8:	68fb      	ldr	r3, [r7, #12]
 8024bda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8024bdc:	68fb      	ldr	r3, [r7, #12]
 8024bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8024be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024be8:	d106      	bne.n	8024bf8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8024bea:	68fb      	ldr	r3, [r7, #12]
 8024bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024bee:	f023 0206 	bic.w	r2, r3, #6
 8024bf2:	68fb      	ldr	r3, [r7, #12]
 8024bf4:	645a      	str	r2, [r3, #68]	; 0x44
 8024bf6:	e002      	b.n	8024bfe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8024bf8:	68fb      	ldr	r3, [r7, #12]
 8024bfa:	2200      	movs	r2, #0
 8024bfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8024bfe:	68fb      	ldr	r3, [r7, #12]
 8024c00:	2200      	movs	r2, #0
 8024c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8024c06:	4b44      	ldr	r3, [pc, #272]	; (8024d18 <HAL_ADC_Start_DMA+0x204>)
 8024c08:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8024c0a:	68fb      	ldr	r3, [r7, #12]
 8024c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024c0e:	4a43      	ldr	r2, [pc, #268]	; (8024d1c <HAL_ADC_Start_DMA+0x208>)
 8024c10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8024c12:	68fb      	ldr	r3, [r7, #12]
 8024c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024c16:	4a42      	ldr	r2, [pc, #264]	; (8024d20 <HAL_ADC_Start_DMA+0x20c>)
 8024c18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8024c1a:	68fb      	ldr	r3, [r7, #12]
 8024c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024c1e:	4a41      	ldr	r2, [pc, #260]	; (8024d24 <HAL_ADC_Start_DMA+0x210>)
 8024c20:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8024c22:	68fb      	ldr	r3, [r7, #12]
 8024c24:	681b      	ldr	r3, [r3, #0]
 8024c26:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8024c2a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8024c2c:	68fb      	ldr	r3, [r7, #12]
 8024c2e:	681b      	ldr	r3, [r3, #0]
 8024c30:	685a      	ldr	r2, [r3, #4]
 8024c32:	68fb      	ldr	r3, [r7, #12]
 8024c34:	681b      	ldr	r3, [r3, #0]
 8024c36:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8024c3a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8024c3c:	68fb      	ldr	r3, [r7, #12]
 8024c3e:	681b      	ldr	r3, [r3, #0]
 8024c40:	689a      	ldr	r2, [r3, #8]
 8024c42:	68fb      	ldr	r3, [r7, #12]
 8024c44:	681b      	ldr	r3, [r3, #0]
 8024c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024c4a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8024c4c:	68fb      	ldr	r3, [r7, #12]
 8024c4e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8024c50:	68fb      	ldr	r3, [r7, #12]
 8024c52:	681b      	ldr	r3, [r3, #0]
 8024c54:	334c      	adds	r3, #76	; 0x4c
 8024c56:	4619      	mov	r1, r3
 8024c58:	68ba      	ldr	r2, [r7, #8]
 8024c5a:	687b      	ldr	r3, [r7, #4]
 8024c5c:	f001 fb88 	bl	8026370 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8024c60:	697b      	ldr	r3, [r7, #20]
 8024c62:	685b      	ldr	r3, [r3, #4]
 8024c64:	f003 031f 	and.w	r3, r3, #31
 8024c68:	2b00      	cmp	r3, #0
 8024c6a:	d12a      	bne.n	8024cc2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8024c6c:	68fb      	ldr	r3, [r7, #12]
 8024c6e:	681b      	ldr	r3, [r3, #0]
 8024c70:	4a2d      	ldr	r2, [pc, #180]	; (8024d28 <HAL_ADC_Start_DMA+0x214>)
 8024c72:	4293      	cmp	r3, r2
 8024c74:	d015      	beq.n	8024ca2 <HAL_ADC_Start_DMA+0x18e>
 8024c76:	68fb      	ldr	r3, [r7, #12]
 8024c78:	681b      	ldr	r3, [r3, #0]
 8024c7a:	4a2c      	ldr	r2, [pc, #176]	; (8024d2c <HAL_ADC_Start_DMA+0x218>)
 8024c7c:	4293      	cmp	r3, r2
 8024c7e:	d105      	bne.n	8024c8c <HAL_ADC_Start_DMA+0x178>
 8024c80:	4b25      	ldr	r3, [pc, #148]	; (8024d18 <HAL_ADC_Start_DMA+0x204>)
 8024c82:	685b      	ldr	r3, [r3, #4]
 8024c84:	f003 031f 	and.w	r3, r3, #31
 8024c88:	2b00      	cmp	r3, #0
 8024c8a:	d00a      	beq.n	8024ca2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8024c8c:	68fb      	ldr	r3, [r7, #12]
 8024c8e:	681b      	ldr	r3, [r3, #0]
 8024c90:	4a27      	ldr	r2, [pc, #156]	; (8024d30 <HAL_ADC_Start_DMA+0x21c>)
 8024c92:	4293      	cmp	r3, r2
 8024c94:	d136      	bne.n	8024d04 <HAL_ADC_Start_DMA+0x1f0>
 8024c96:	4b20      	ldr	r3, [pc, #128]	; (8024d18 <HAL_ADC_Start_DMA+0x204>)
 8024c98:	685b      	ldr	r3, [r3, #4]
 8024c9a:	f003 0310 	and.w	r3, r3, #16
 8024c9e:	2b00      	cmp	r3, #0
 8024ca0:	d130      	bne.n	8024d04 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8024ca2:	68fb      	ldr	r3, [r7, #12]
 8024ca4:	681b      	ldr	r3, [r3, #0]
 8024ca6:	689b      	ldr	r3, [r3, #8]
 8024ca8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8024cac:	2b00      	cmp	r3, #0
 8024cae:	d129      	bne.n	8024d04 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8024cb0:	68fb      	ldr	r3, [r7, #12]
 8024cb2:	681b      	ldr	r3, [r3, #0]
 8024cb4:	689a      	ldr	r2, [r3, #8]
 8024cb6:	68fb      	ldr	r3, [r7, #12]
 8024cb8:	681b      	ldr	r3, [r3, #0]
 8024cba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8024cbe:	609a      	str	r2, [r3, #8]
 8024cc0:	e020      	b.n	8024d04 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8024cc2:	68fb      	ldr	r3, [r7, #12]
 8024cc4:	681b      	ldr	r3, [r3, #0]
 8024cc6:	4a18      	ldr	r2, [pc, #96]	; (8024d28 <HAL_ADC_Start_DMA+0x214>)
 8024cc8:	4293      	cmp	r3, r2
 8024cca:	d11b      	bne.n	8024d04 <HAL_ADC_Start_DMA+0x1f0>
 8024ccc:	68fb      	ldr	r3, [r7, #12]
 8024cce:	681b      	ldr	r3, [r3, #0]
 8024cd0:	689b      	ldr	r3, [r3, #8]
 8024cd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8024cd6:	2b00      	cmp	r3, #0
 8024cd8:	d114      	bne.n	8024d04 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8024cda:	68fb      	ldr	r3, [r7, #12]
 8024cdc:	681b      	ldr	r3, [r3, #0]
 8024cde:	689a      	ldr	r2, [r3, #8]
 8024ce0:	68fb      	ldr	r3, [r7, #12]
 8024ce2:	681b      	ldr	r3, [r3, #0]
 8024ce4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8024ce8:	609a      	str	r2, [r3, #8]
 8024cea:	e00b      	b.n	8024d04 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8024cec:	68fb      	ldr	r3, [r7, #12]
 8024cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024cf0:	f043 0210 	orr.w	r2, r3, #16
 8024cf4:	68fb      	ldr	r3, [r7, #12]
 8024cf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8024cf8:	68fb      	ldr	r3, [r7, #12]
 8024cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024cfc:	f043 0201 	orr.w	r2, r3, #1
 8024d00:	68fb      	ldr	r3, [r7, #12]
 8024d02:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8024d04:	2300      	movs	r3, #0
}
 8024d06:	4618      	mov	r0, r3
 8024d08:	3718      	adds	r7, #24
 8024d0a:	46bd      	mov	sp, r7
 8024d0c:	bd80      	pop	{r7, pc}
 8024d0e:	bf00      	nop
 8024d10:	20000080 	.word	0x20000080
 8024d14:	431bde83 	.word	0x431bde83
 8024d18:	40012300 	.word	0x40012300
 8024d1c:	08025199 	.word	0x08025199
 8024d20:	08025253 	.word	0x08025253
 8024d24:	0802526f 	.word	0x0802526f
 8024d28:	40012000 	.word	0x40012000
 8024d2c:	40012100 	.word	0x40012100
 8024d30:	40012200 	.word	0x40012200

08024d34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8024d34:	b480      	push	{r7}
 8024d36:	b083      	sub	sp, #12
 8024d38:	af00      	add	r7, sp, #0
 8024d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8024d3c:	bf00      	nop
 8024d3e:	370c      	adds	r7, #12
 8024d40:	46bd      	mov	sp, r7
 8024d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d46:	4770      	bx	lr

08024d48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8024d48:	b480      	push	{r7}
 8024d4a:	b083      	sub	sp, #12
 8024d4c:	af00      	add	r7, sp, #0
 8024d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8024d50:	bf00      	nop
 8024d52:	370c      	adds	r7, #12
 8024d54:	46bd      	mov	sp, r7
 8024d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d5a:	4770      	bx	lr

08024d5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8024d5c:	b480      	push	{r7}
 8024d5e:	b085      	sub	sp, #20
 8024d60:	af00      	add	r7, sp, #0
 8024d62:	6078      	str	r0, [r7, #4]
 8024d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8024d66:	2300      	movs	r3, #0
 8024d68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8024d6a:	687b      	ldr	r3, [r7, #4]
 8024d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8024d70:	2b01      	cmp	r3, #1
 8024d72:	d101      	bne.n	8024d78 <HAL_ADC_ConfigChannel+0x1c>
 8024d74:	2302      	movs	r3, #2
 8024d76:	e105      	b.n	8024f84 <HAL_ADC_ConfigChannel+0x228>
 8024d78:	687b      	ldr	r3, [r7, #4]
 8024d7a:	2201      	movs	r2, #1
 8024d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8024d80:	683b      	ldr	r3, [r7, #0]
 8024d82:	681b      	ldr	r3, [r3, #0]
 8024d84:	2b09      	cmp	r3, #9
 8024d86:	d925      	bls.n	8024dd4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8024d88:	687b      	ldr	r3, [r7, #4]
 8024d8a:	681b      	ldr	r3, [r3, #0]
 8024d8c:	68d9      	ldr	r1, [r3, #12]
 8024d8e:	683b      	ldr	r3, [r7, #0]
 8024d90:	681b      	ldr	r3, [r3, #0]
 8024d92:	b29b      	uxth	r3, r3
 8024d94:	461a      	mov	r2, r3
 8024d96:	4613      	mov	r3, r2
 8024d98:	005b      	lsls	r3, r3, #1
 8024d9a:	4413      	add	r3, r2
 8024d9c:	3b1e      	subs	r3, #30
 8024d9e:	2207      	movs	r2, #7
 8024da0:	fa02 f303 	lsl.w	r3, r2, r3
 8024da4:	43da      	mvns	r2, r3
 8024da6:	687b      	ldr	r3, [r7, #4]
 8024da8:	681b      	ldr	r3, [r3, #0]
 8024daa:	400a      	ands	r2, r1
 8024dac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8024dae:	687b      	ldr	r3, [r7, #4]
 8024db0:	681b      	ldr	r3, [r3, #0]
 8024db2:	68d9      	ldr	r1, [r3, #12]
 8024db4:	683b      	ldr	r3, [r7, #0]
 8024db6:	689a      	ldr	r2, [r3, #8]
 8024db8:	683b      	ldr	r3, [r7, #0]
 8024dba:	681b      	ldr	r3, [r3, #0]
 8024dbc:	b29b      	uxth	r3, r3
 8024dbe:	4618      	mov	r0, r3
 8024dc0:	4603      	mov	r3, r0
 8024dc2:	005b      	lsls	r3, r3, #1
 8024dc4:	4403      	add	r3, r0
 8024dc6:	3b1e      	subs	r3, #30
 8024dc8:	409a      	lsls	r2, r3
 8024dca:	687b      	ldr	r3, [r7, #4]
 8024dcc:	681b      	ldr	r3, [r3, #0]
 8024dce:	430a      	orrs	r2, r1
 8024dd0:	60da      	str	r2, [r3, #12]
 8024dd2:	e022      	b.n	8024e1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8024dd4:	687b      	ldr	r3, [r7, #4]
 8024dd6:	681b      	ldr	r3, [r3, #0]
 8024dd8:	6919      	ldr	r1, [r3, #16]
 8024dda:	683b      	ldr	r3, [r7, #0]
 8024ddc:	681b      	ldr	r3, [r3, #0]
 8024dde:	b29b      	uxth	r3, r3
 8024de0:	461a      	mov	r2, r3
 8024de2:	4613      	mov	r3, r2
 8024de4:	005b      	lsls	r3, r3, #1
 8024de6:	4413      	add	r3, r2
 8024de8:	2207      	movs	r2, #7
 8024dea:	fa02 f303 	lsl.w	r3, r2, r3
 8024dee:	43da      	mvns	r2, r3
 8024df0:	687b      	ldr	r3, [r7, #4]
 8024df2:	681b      	ldr	r3, [r3, #0]
 8024df4:	400a      	ands	r2, r1
 8024df6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8024df8:	687b      	ldr	r3, [r7, #4]
 8024dfa:	681b      	ldr	r3, [r3, #0]
 8024dfc:	6919      	ldr	r1, [r3, #16]
 8024dfe:	683b      	ldr	r3, [r7, #0]
 8024e00:	689a      	ldr	r2, [r3, #8]
 8024e02:	683b      	ldr	r3, [r7, #0]
 8024e04:	681b      	ldr	r3, [r3, #0]
 8024e06:	b29b      	uxth	r3, r3
 8024e08:	4618      	mov	r0, r3
 8024e0a:	4603      	mov	r3, r0
 8024e0c:	005b      	lsls	r3, r3, #1
 8024e0e:	4403      	add	r3, r0
 8024e10:	409a      	lsls	r2, r3
 8024e12:	687b      	ldr	r3, [r7, #4]
 8024e14:	681b      	ldr	r3, [r3, #0]
 8024e16:	430a      	orrs	r2, r1
 8024e18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8024e1a:	683b      	ldr	r3, [r7, #0]
 8024e1c:	685b      	ldr	r3, [r3, #4]
 8024e1e:	2b06      	cmp	r3, #6
 8024e20:	d824      	bhi.n	8024e6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8024e22:	687b      	ldr	r3, [r7, #4]
 8024e24:	681b      	ldr	r3, [r3, #0]
 8024e26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8024e28:	683b      	ldr	r3, [r7, #0]
 8024e2a:	685a      	ldr	r2, [r3, #4]
 8024e2c:	4613      	mov	r3, r2
 8024e2e:	009b      	lsls	r3, r3, #2
 8024e30:	4413      	add	r3, r2
 8024e32:	3b05      	subs	r3, #5
 8024e34:	221f      	movs	r2, #31
 8024e36:	fa02 f303 	lsl.w	r3, r2, r3
 8024e3a:	43da      	mvns	r2, r3
 8024e3c:	687b      	ldr	r3, [r7, #4]
 8024e3e:	681b      	ldr	r3, [r3, #0]
 8024e40:	400a      	ands	r2, r1
 8024e42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8024e44:	687b      	ldr	r3, [r7, #4]
 8024e46:	681b      	ldr	r3, [r3, #0]
 8024e48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8024e4a:	683b      	ldr	r3, [r7, #0]
 8024e4c:	681b      	ldr	r3, [r3, #0]
 8024e4e:	b29b      	uxth	r3, r3
 8024e50:	4618      	mov	r0, r3
 8024e52:	683b      	ldr	r3, [r7, #0]
 8024e54:	685a      	ldr	r2, [r3, #4]
 8024e56:	4613      	mov	r3, r2
 8024e58:	009b      	lsls	r3, r3, #2
 8024e5a:	4413      	add	r3, r2
 8024e5c:	3b05      	subs	r3, #5
 8024e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8024e62:	687b      	ldr	r3, [r7, #4]
 8024e64:	681b      	ldr	r3, [r3, #0]
 8024e66:	430a      	orrs	r2, r1
 8024e68:	635a      	str	r2, [r3, #52]	; 0x34
 8024e6a:	e04c      	b.n	8024f06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8024e6c:	683b      	ldr	r3, [r7, #0]
 8024e6e:	685b      	ldr	r3, [r3, #4]
 8024e70:	2b0c      	cmp	r3, #12
 8024e72:	d824      	bhi.n	8024ebe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8024e74:	687b      	ldr	r3, [r7, #4]
 8024e76:	681b      	ldr	r3, [r3, #0]
 8024e78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8024e7a:	683b      	ldr	r3, [r7, #0]
 8024e7c:	685a      	ldr	r2, [r3, #4]
 8024e7e:	4613      	mov	r3, r2
 8024e80:	009b      	lsls	r3, r3, #2
 8024e82:	4413      	add	r3, r2
 8024e84:	3b23      	subs	r3, #35	; 0x23
 8024e86:	221f      	movs	r2, #31
 8024e88:	fa02 f303 	lsl.w	r3, r2, r3
 8024e8c:	43da      	mvns	r2, r3
 8024e8e:	687b      	ldr	r3, [r7, #4]
 8024e90:	681b      	ldr	r3, [r3, #0]
 8024e92:	400a      	ands	r2, r1
 8024e94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8024e96:	687b      	ldr	r3, [r7, #4]
 8024e98:	681b      	ldr	r3, [r3, #0]
 8024e9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8024e9c:	683b      	ldr	r3, [r7, #0]
 8024e9e:	681b      	ldr	r3, [r3, #0]
 8024ea0:	b29b      	uxth	r3, r3
 8024ea2:	4618      	mov	r0, r3
 8024ea4:	683b      	ldr	r3, [r7, #0]
 8024ea6:	685a      	ldr	r2, [r3, #4]
 8024ea8:	4613      	mov	r3, r2
 8024eaa:	009b      	lsls	r3, r3, #2
 8024eac:	4413      	add	r3, r2
 8024eae:	3b23      	subs	r3, #35	; 0x23
 8024eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8024eb4:	687b      	ldr	r3, [r7, #4]
 8024eb6:	681b      	ldr	r3, [r3, #0]
 8024eb8:	430a      	orrs	r2, r1
 8024eba:	631a      	str	r2, [r3, #48]	; 0x30
 8024ebc:	e023      	b.n	8024f06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8024ebe:	687b      	ldr	r3, [r7, #4]
 8024ec0:	681b      	ldr	r3, [r3, #0]
 8024ec2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8024ec4:	683b      	ldr	r3, [r7, #0]
 8024ec6:	685a      	ldr	r2, [r3, #4]
 8024ec8:	4613      	mov	r3, r2
 8024eca:	009b      	lsls	r3, r3, #2
 8024ecc:	4413      	add	r3, r2
 8024ece:	3b41      	subs	r3, #65	; 0x41
 8024ed0:	221f      	movs	r2, #31
 8024ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8024ed6:	43da      	mvns	r2, r3
 8024ed8:	687b      	ldr	r3, [r7, #4]
 8024eda:	681b      	ldr	r3, [r3, #0]
 8024edc:	400a      	ands	r2, r1
 8024ede:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8024ee0:	687b      	ldr	r3, [r7, #4]
 8024ee2:	681b      	ldr	r3, [r3, #0]
 8024ee4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8024ee6:	683b      	ldr	r3, [r7, #0]
 8024ee8:	681b      	ldr	r3, [r3, #0]
 8024eea:	b29b      	uxth	r3, r3
 8024eec:	4618      	mov	r0, r3
 8024eee:	683b      	ldr	r3, [r7, #0]
 8024ef0:	685a      	ldr	r2, [r3, #4]
 8024ef2:	4613      	mov	r3, r2
 8024ef4:	009b      	lsls	r3, r3, #2
 8024ef6:	4413      	add	r3, r2
 8024ef8:	3b41      	subs	r3, #65	; 0x41
 8024efa:	fa00 f203 	lsl.w	r2, r0, r3
 8024efe:	687b      	ldr	r3, [r7, #4]
 8024f00:	681b      	ldr	r3, [r3, #0]
 8024f02:	430a      	orrs	r2, r1
 8024f04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8024f06:	4b22      	ldr	r3, [pc, #136]	; (8024f90 <HAL_ADC_ConfigChannel+0x234>)
 8024f08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8024f0a:	687b      	ldr	r3, [r7, #4]
 8024f0c:	681b      	ldr	r3, [r3, #0]
 8024f0e:	4a21      	ldr	r2, [pc, #132]	; (8024f94 <HAL_ADC_ConfigChannel+0x238>)
 8024f10:	4293      	cmp	r3, r2
 8024f12:	d109      	bne.n	8024f28 <HAL_ADC_ConfigChannel+0x1cc>
 8024f14:	683b      	ldr	r3, [r7, #0]
 8024f16:	681b      	ldr	r3, [r3, #0]
 8024f18:	2b12      	cmp	r3, #18
 8024f1a:	d105      	bne.n	8024f28 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8024f1c:	68fb      	ldr	r3, [r7, #12]
 8024f1e:	685b      	ldr	r3, [r3, #4]
 8024f20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8024f24:	68fb      	ldr	r3, [r7, #12]
 8024f26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8024f28:	687b      	ldr	r3, [r7, #4]
 8024f2a:	681b      	ldr	r3, [r3, #0]
 8024f2c:	4a19      	ldr	r2, [pc, #100]	; (8024f94 <HAL_ADC_ConfigChannel+0x238>)
 8024f2e:	4293      	cmp	r3, r2
 8024f30:	d123      	bne.n	8024f7a <HAL_ADC_ConfigChannel+0x21e>
 8024f32:	683b      	ldr	r3, [r7, #0]
 8024f34:	681b      	ldr	r3, [r3, #0]
 8024f36:	2b10      	cmp	r3, #16
 8024f38:	d003      	beq.n	8024f42 <HAL_ADC_ConfigChannel+0x1e6>
 8024f3a:	683b      	ldr	r3, [r7, #0]
 8024f3c:	681b      	ldr	r3, [r3, #0]
 8024f3e:	2b11      	cmp	r3, #17
 8024f40:	d11b      	bne.n	8024f7a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8024f42:	68fb      	ldr	r3, [r7, #12]
 8024f44:	685b      	ldr	r3, [r3, #4]
 8024f46:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8024f4a:	68fb      	ldr	r3, [r7, #12]
 8024f4c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8024f4e:	683b      	ldr	r3, [r7, #0]
 8024f50:	681b      	ldr	r3, [r3, #0]
 8024f52:	2b10      	cmp	r3, #16
 8024f54:	d111      	bne.n	8024f7a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8024f56:	4b10      	ldr	r3, [pc, #64]	; (8024f98 <HAL_ADC_ConfigChannel+0x23c>)
 8024f58:	681b      	ldr	r3, [r3, #0]
 8024f5a:	4a10      	ldr	r2, [pc, #64]	; (8024f9c <HAL_ADC_ConfigChannel+0x240>)
 8024f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8024f60:	0c9a      	lsrs	r2, r3, #18
 8024f62:	4613      	mov	r3, r2
 8024f64:	009b      	lsls	r3, r3, #2
 8024f66:	4413      	add	r3, r2
 8024f68:	005b      	lsls	r3, r3, #1
 8024f6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8024f6c:	e002      	b.n	8024f74 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8024f6e:	68bb      	ldr	r3, [r7, #8]
 8024f70:	3b01      	subs	r3, #1
 8024f72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8024f74:	68bb      	ldr	r3, [r7, #8]
 8024f76:	2b00      	cmp	r3, #0
 8024f78:	d1f9      	bne.n	8024f6e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8024f7a:	687b      	ldr	r3, [r7, #4]
 8024f7c:	2200      	movs	r2, #0
 8024f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8024f82:	2300      	movs	r3, #0
}
 8024f84:	4618      	mov	r0, r3
 8024f86:	3714      	adds	r7, #20
 8024f88:	46bd      	mov	sp, r7
 8024f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f8e:	4770      	bx	lr
 8024f90:	40012300 	.word	0x40012300
 8024f94:	40012000 	.word	0x40012000
 8024f98:	20000080 	.word	0x20000080
 8024f9c:	431bde83 	.word	0x431bde83

08024fa0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8024fa0:	b480      	push	{r7}
 8024fa2:	b085      	sub	sp, #20
 8024fa4:	af00      	add	r7, sp, #0
 8024fa6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8024fa8:	4b79      	ldr	r3, [pc, #484]	; (8025190 <ADC_Init+0x1f0>)
 8024faa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8024fac:	68fb      	ldr	r3, [r7, #12]
 8024fae:	685b      	ldr	r3, [r3, #4]
 8024fb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8024fb4:	68fb      	ldr	r3, [r7, #12]
 8024fb6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8024fb8:	68fb      	ldr	r3, [r7, #12]
 8024fba:	685a      	ldr	r2, [r3, #4]
 8024fbc:	687b      	ldr	r3, [r7, #4]
 8024fbe:	685b      	ldr	r3, [r3, #4]
 8024fc0:	431a      	orrs	r2, r3
 8024fc2:	68fb      	ldr	r3, [r7, #12]
 8024fc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8024fc6:	687b      	ldr	r3, [r7, #4]
 8024fc8:	681b      	ldr	r3, [r3, #0]
 8024fca:	685a      	ldr	r2, [r3, #4]
 8024fcc:	687b      	ldr	r3, [r7, #4]
 8024fce:	681b      	ldr	r3, [r3, #0]
 8024fd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024fd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8024fd6:	687b      	ldr	r3, [r7, #4]
 8024fd8:	681b      	ldr	r3, [r3, #0]
 8024fda:	6859      	ldr	r1, [r3, #4]
 8024fdc:	687b      	ldr	r3, [r7, #4]
 8024fde:	691b      	ldr	r3, [r3, #16]
 8024fe0:	021a      	lsls	r2, r3, #8
 8024fe2:	687b      	ldr	r3, [r7, #4]
 8024fe4:	681b      	ldr	r3, [r3, #0]
 8024fe6:	430a      	orrs	r2, r1
 8024fe8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8024fea:	687b      	ldr	r3, [r7, #4]
 8024fec:	681b      	ldr	r3, [r3, #0]
 8024fee:	685a      	ldr	r2, [r3, #4]
 8024ff0:	687b      	ldr	r3, [r7, #4]
 8024ff2:	681b      	ldr	r3, [r3, #0]
 8024ff4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8024ff8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8024ffa:	687b      	ldr	r3, [r7, #4]
 8024ffc:	681b      	ldr	r3, [r3, #0]
 8024ffe:	6859      	ldr	r1, [r3, #4]
 8025000:	687b      	ldr	r3, [r7, #4]
 8025002:	689a      	ldr	r2, [r3, #8]
 8025004:	687b      	ldr	r3, [r7, #4]
 8025006:	681b      	ldr	r3, [r3, #0]
 8025008:	430a      	orrs	r2, r1
 802500a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 802500c:	687b      	ldr	r3, [r7, #4]
 802500e:	681b      	ldr	r3, [r3, #0]
 8025010:	689a      	ldr	r2, [r3, #8]
 8025012:	687b      	ldr	r3, [r7, #4]
 8025014:	681b      	ldr	r3, [r3, #0]
 8025016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802501a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 802501c:	687b      	ldr	r3, [r7, #4]
 802501e:	681b      	ldr	r3, [r3, #0]
 8025020:	6899      	ldr	r1, [r3, #8]
 8025022:	687b      	ldr	r3, [r7, #4]
 8025024:	68da      	ldr	r2, [r3, #12]
 8025026:	687b      	ldr	r3, [r7, #4]
 8025028:	681b      	ldr	r3, [r3, #0]
 802502a:	430a      	orrs	r2, r1
 802502c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 802502e:	687b      	ldr	r3, [r7, #4]
 8025030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025032:	4a58      	ldr	r2, [pc, #352]	; (8025194 <ADC_Init+0x1f4>)
 8025034:	4293      	cmp	r3, r2
 8025036:	d022      	beq.n	802507e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8025038:	687b      	ldr	r3, [r7, #4]
 802503a:	681b      	ldr	r3, [r3, #0]
 802503c:	689a      	ldr	r2, [r3, #8]
 802503e:	687b      	ldr	r3, [r7, #4]
 8025040:	681b      	ldr	r3, [r3, #0]
 8025042:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8025046:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8025048:	687b      	ldr	r3, [r7, #4]
 802504a:	681b      	ldr	r3, [r3, #0]
 802504c:	6899      	ldr	r1, [r3, #8]
 802504e:	687b      	ldr	r3, [r7, #4]
 8025050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8025052:	687b      	ldr	r3, [r7, #4]
 8025054:	681b      	ldr	r3, [r3, #0]
 8025056:	430a      	orrs	r2, r1
 8025058:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 802505a:	687b      	ldr	r3, [r7, #4]
 802505c:	681b      	ldr	r3, [r3, #0]
 802505e:	689a      	ldr	r2, [r3, #8]
 8025060:	687b      	ldr	r3, [r7, #4]
 8025062:	681b      	ldr	r3, [r3, #0]
 8025064:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8025068:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 802506a:	687b      	ldr	r3, [r7, #4]
 802506c:	681b      	ldr	r3, [r3, #0]
 802506e:	6899      	ldr	r1, [r3, #8]
 8025070:	687b      	ldr	r3, [r7, #4]
 8025072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8025074:	687b      	ldr	r3, [r7, #4]
 8025076:	681b      	ldr	r3, [r3, #0]
 8025078:	430a      	orrs	r2, r1
 802507a:	609a      	str	r2, [r3, #8]
 802507c:	e00f      	b.n	802509e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 802507e:	687b      	ldr	r3, [r7, #4]
 8025080:	681b      	ldr	r3, [r3, #0]
 8025082:	689a      	ldr	r2, [r3, #8]
 8025084:	687b      	ldr	r3, [r7, #4]
 8025086:	681b      	ldr	r3, [r3, #0]
 8025088:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802508c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 802508e:	687b      	ldr	r3, [r7, #4]
 8025090:	681b      	ldr	r3, [r3, #0]
 8025092:	689a      	ldr	r2, [r3, #8]
 8025094:	687b      	ldr	r3, [r7, #4]
 8025096:	681b      	ldr	r3, [r3, #0]
 8025098:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 802509c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 802509e:	687b      	ldr	r3, [r7, #4]
 80250a0:	681b      	ldr	r3, [r3, #0]
 80250a2:	689a      	ldr	r2, [r3, #8]
 80250a4:	687b      	ldr	r3, [r7, #4]
 80250a6:	681b      	ldr	r3, [r3, #0]
 80250a8:	f022 0202 	bic.w	r2, r2, #2
 80250ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80250ae:	687b      	ldr	r3, [r7, #4]
 80250b0:	681b      	ldr	r3, [r3, #0]
 80250b2:	6899      	ldr	r1, [r3, #8]
 80250b4:	687b      	ldr	r3, [r7, #4]
 80250b6:	7e1b      	ldrb	r3, [r3, #24]
 80250b8:	005a      	lsls	r2, r3, #1
 80250ba:	687b      	ldr	r3, [r7, #4]
 80250bc:	681b      	ldr	r3, [r3, #0]
 80250be:	430a      	orrs	r2, r1
 80250c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80250c2:	687b      	ldr	r3, [r7, #4]
 80250c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80250c8:	2b00      	cmp	r3, #0
 80250ca:	d01b      	beq.n	8025104 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80250cc:	687b      	ldr	r3, [r7, #4]
 80250ce:	681b      	ldr	r3, [r3, #0]
 80250d0:	685a      	ldr	r2, [r3, #4]
 80250d2:	687b      	ldr	r3, [r7, #4]
 80250d4:	681b      	ldr	r3, [r3, #0]
 80250d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80250da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80250dc:	687b      	ldr	r3, [r7, #4]
 80250de:	681b      	ldr	r3, [r3, #0]
 80250e0:	685a      	ldr	r2, [r3, #4]
 80250e2:	687b      	ldr	r3, [r7, #4]
 80250e4:	681b      	ldr	r3, [r3, #0]
 80250e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80250ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80250ec:	687b      	ldr	r3, [r7, #4]
 80250ee:	681b      	ldr	r3, [r3, #0]
 80250f0:	6859      	ldr	r1, [r3, #4]
 80250f2:	687b      	ldr	r3, [r7, #4]
 80250f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80250f6:	3b01      	subs	r3, #1
 80250f8:	035a      	lsls	r2, r3, #13
 80250fa:	687b      	ldr	r3, [r7, #4]
 80250fc:	681b      	ldr	r3, [r3, #0]
 80250fe:	430a      	orrs	r2, r1
 8025100:	605a      	str	r2, [r3, #4]
 8025102:	e007      	b.n	8025114 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8025104:	687b      	ldr	r3, [r7, #4]
 8025106:	681b      	ldr	r3, [r3, #0]
 8025108:	685a      	ldr	r2, [r3, #4]
 802510a:	687b      	ldr	r3, [r7, #4]
 802510c:	681b      	ldr	r3, [r3, #0]
 802510e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8025112:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8025114:	687b      	ldr	r3, [r7, #4]
 8025116:	681b      	ldr	r3, [r3, #0]
 8025118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802511a:	687b      	ldr	r3, [r7, #4]
 802511c:	681b      	ldr	r3, [r3, #0]
 802511e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8025122:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8025124:	687b      	ldr	r3, [r7, #4]
 8025126:	681b      	ldr	r3, [r3, #0]
 8025128:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802512a:	687b      	ldr	r3, [r7, #4]
 802512c:	69db      	ldr	r3, [r3, #28]
 802512e:	3b01      	subs	r3, #1
 8025130:	051a      	lsls	r2, r3, #20
 8025132:	687b      	ldr	r3, [r7, #4]
 8025134:	681b      	ldr	r3, [r3, #0]
 8025136:	430a      	orrs	r2, r1
 8025138:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 802513a:	687b      	ldr	r3, [r7, #4]
 802513c:	681b      	ldr	r3, [r3, #0]
 802513e:	689a      	ldr	r2, [r3, #8]
 8025140:	687b      	ldr	r3, [r7, #4]
 8025142:	681b      	ldr	r3, [r3, #0]
 8025144:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8025148:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 802514a:	687b      	ldr	r3, [r7, #4]
 802514c:	681b      	ldr	r3, [r3, #0]
 802514e:	6899      	ldr	r1, [r3, #8]
 8025150:	687b      	ldr	r3, [r7, #4]
 8025152:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8025156:	025a      	lsls	r2, r3, #9
 8025158:	687b      	ldr	r3, [r7, #4]
 802515a:	681b      	ldr	r3, [r3, #0]
 802515c:	430a      	orrs	r2, r1
 802515e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8025160:	687b      	ldr	r3, [r7, #4]
 8025162:	681b      	ldr	r3, [r3, #0]
 8025164:	689a      	ldr	r2, [r3, #8]
 8025166:	687b      	ldr	r3, [r7, #4]
 8025168:	681b      	ldr	r3, [r3, #0]
 802516a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802516e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8025170:	687b      	ldr	r3, [r7, #4]
 8025172:	681b      	ldr	r3, [r3, #0]
 8025174:	6899      	ldr	r1, [r3, #8]
 8025176:	687b      	ldr	r3, [r7, #4]
 8025178:	695b      	ldr	r3, [r3, #20]
 802517a:	029a      	lsls	r2, r3, #10
 802517c:	687b      	ldr	r3, [r7, #4]
 802517e:	681b      	ldr	r3, [r3, #0]
 8025180:	430a      	orrs	r2, r1
 8025182:	609a      	str	r2, [r3, #8]
}
 8025184:	bf00      	nop
 8025186:	3714      	adds	r7, #20
 8025188:	46bd      	mov	sp, r7
 802518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802518e:	4770      	bx	lr
 8025190:	40012300 	.word	0x40012300
 8025194:	0f000001 	.word	0x0f000001

08025198 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8025198:	b580      	push	{r7, lr}
 802519a:	b084      	sub	sp, #16
 802519c:	af00      	add	r7, sp, #0
 802519e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80251a0:	687b      	ldr	r3, [r7, #4]
 80251a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80251a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80251a6:	68fb      	ldr	r3, [r7, #12]
 80251a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80251aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80251ae:	2b00      	cmp	r3, #0
 80251b0:	d13c      	bne.n	802522c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80251b2:	68fb      	ldr	r3, [r7, #12]
 80251b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80251b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80251ba:	68fb      	ldr	r3, [r7, #12]
 80251bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80251be:	68fb      	ldr	r3, [r7, #12]
 80251c0:	681b      	ldr	r3, [r3, #0]
 80251c2:	689b      	ldr	r3, [r3, #8]
 80251c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80251c8:	2b00      	cmp	r3, #0
 80251ca:	d12b      	bne.n	8025224 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80251cc:	68fb      	ldr	r3, [r7, #12]
 80251ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80251d0:	2b00      	cmp	r3, #0
 80251d2:	d127      	bne.n	8025224 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80251d4:	68fb      	ldr	r3, [r7, #12]
 80251d6:	681b      	ldr	r3, [r3, #0]
 80251d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80251da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80251de:	2b00      	cmp	r3, #0
 80251e0:	d006      	beq.n	80251f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80251e2:	68fb      	ldr	r3, [r7, #12]
 80251e4:	681b      	ldr	r3, [r3, #0]
 80251e6:	689b      	ldr	r3, [r3, #8]
 80251e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80251ec:	2b00      	cmp	r3, #0
 80251ee:	d119      	bne.n	8025224 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80251f0:	68fb      	ldr	r3, [r7, #12]
 80251f2:	681b      	ldr	r3, [r3, #0]
 80251f4:	685a      	ldr	r2, [r3, #4]
 80251f6:	68fb      	ldr	r3, [r7, #12]
 80251f8:	681b      	ldr	r3, [r3, #0]
 80251fa:	f022 0220 	bic.w	r2, r2, #32
 80251fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8025200:	68fb      	ldr	r3, [r7, #12]
 8025202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025204:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8025208:	68fb      	ldr	r3, [r7, #12]
 802520a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 802520c:	68fb      	ldr	r3, [r7, #12]
 802520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8025214:	2b00      	cmp	r3, #0
 8025216:	d105      	bne.n	8025224 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8025218:	68fb      	ldr	r3, [r7, #12]
 802521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802521c:	f043 0201 	orr.w	r2, r3, #1
 8025220:	68fb      	ldr	r3, [r7, #12]
 8025222:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8025224:	68f8      	ldr	r0, [r7, #12]
 8025226:	f7f0 fa43 	bl	80156b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 802522a:	e00e      	b.n	802524a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 802522c:	68fb      	ldr	r3, [r7, #12]
 802522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025230:	f003 0310 	and.w	r3, r3, #16
 8025234:	2b00      	cmp	r3, #0
 8025236:	d003      	beq.n	8025240 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8025238:	68f8      	ldr	r0, [r7, #12]
 802523a:	f7ff fd85 	bl	8024d48 <HAL_ADC_ErrorCallback>
}
 802523e:	e004      	b.n	802524a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8025240:	68fb      	ldr	r3, [r7, #12]
 8025242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8025246:	6878      	ldr	r0, [r7, #4]
 8025248:	4798      	blx	r3
}
 802524a:	bf00      	nop
 802524c:	3710      	adds	r7, #16
 802524e:	46bd      	mov	sp, r7
 8025250:	bd80      	pop	{r7, pc}

08025252 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8025252:	b580      	push	{r7, lr}
 8025254:	b084      	sub	sp, #16
 8025256:	af00      	add	r7, sp, #0
 8025258:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802525a:	687b      	ldr	r3, [r7, #4]
 802525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802525e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8025260:	68f8      	ldr	r0, [r7, #12]
 8025262:	f7f0 f9fb 	bl	801565c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8025266:	bf00      	nop
 8025268:	3710      	adds	r7, #16
 802526a:	46bd      	mov	sp, r7
 802526c:	bd80      	pop	{r7, pc}

0802526e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 802526e:	b580      	push	{r7, lr}
 8025270:	b084      	sub	sp, #16
 8025272:	af00      	add	r7, sp, #0
 8025274:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8025276:	687b      	ldr	r3, [r7, #4]
 8025278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802527a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 802527c:	68fb      	ldr	r3, [r7, #12]
 802527e:	2240      	movs	r2, #64	; 0x40
 8025280:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8025282:	68fb      	ldr	r3, [r7, #12]
 8025284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025286:	f043 0204 	orr.w	r2, r3, #4
 802528a:	68fb      	ldr	r3, [r7, #12]
 802528c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 802528e:	68f8      	ldr	r0, [r7, #12]
 8025290:	f7ff fd5a 	bl	8024d48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8025294:	bf00      	nop
 8025296:	3710      	adds	r7, #16
 8025298:	46bd      	mov	sp, r7
 802529a:	bd80      	pop	{r7, pc}

0802529c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 802529c:	b480      	push	{r7}
 802529e:	b083      	sub	sp, #12
 80252a0:	af00      	add	r7, sp, #0
 80252a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80252a4:	bf00      	nop
 80252a6:	370c      	adds	r7, #12
 80252a8:	46bd      	mov	sp, r7
 80252aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252ae:	4770      	bx	lr

080252b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80252b0:	b580      	push	{r7, lr}
 80252b2:	b084      	sub	sp, #16
 80252b4:	af00      	add	r7, sp, #0
 80252b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80252b8:	687b      	ldr	r3, [r7, #4]
 80252ba:	2b00      	cmp	r3, #0
 80252bc:	d101      	bne.n	80252c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80252be:	2301      	movs	r3, #1
 80252c0:	e0ed      	b.n	802549e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80252c2:	687b      	ldr	r3, [r7, #4]
 80252c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80252c8:	b2db      	uxtb	r3, r3
 80252ca:	2b00      	cmp	r3, #0
 80252cc:	d102      	bne.n	80252d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80252ce:	6878      	ldr	r0, [r7, #4]
 80252d0:	f7f0 fa88 	bl	80157e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80252d4:	687b      	ldr	r3, [r7, #4]
 80252d6:	681b      	ldr	r3, [r3, #0]
 80252d8:	681a      	ldr	r2, [r3, #0]
 80252da:	687b      	ldr	r3, [r7, #4]
 80252dc:	681b      	ldr	r3, [r3, #0]
 80252de:	f042 0201 	orr.w	r2, r2, #1
 80252e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80252e4:	f7ff fa62 	bl	80247ac <HAL_GetTick>
 80252e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80252ea:	e012      	b.n	8025312 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80252ec:	f7ff fa5e 	bl	80247ac <HAL_GetTick>
 80252f0:	4602      	mov	r2, r0
 80252f2:	68fb      	ldr	r3, [r7, #12]
 80252f4:	1ad3      	subs	r3, r2, r3
 80252f6:	2b0a      	cmp	r3, #10
 80252f8:	d90b      	bls.n	8025312 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80252fa:	687b      	ldr	r3, [r7, #4]
 80252fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80252fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8025302:	687b      	ldr	r3, [r7, #4]
 8025304:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8025306:	687b      	ldr	r3, [r7, #4]
 8025308:	2205      	movs	r2, #5
 802530a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 802530e:	2301      	movs	r3, #1
 8025310:	e0c5      	b.n	802549e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8025312:	687b      	ldr	r3, [r7, #4]
 8025314:	681b      	ldr	r3, [r3, #0]
 8025316:	685b      	ldr	r3, [r3, #4]
 8025318:	f003 0301 	and.w	r3, r3, #1
 802531c:	2b00      	cmp	r3, #0
 802531e:	d0e5      	beq.n	80252ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8025320:	687b      	ldr	r3, [r7, #4]
 8025322:	681b      	ldr	r3, [r3, #0]
 8025324:	681a      	ldr	r2, [r3, #0]
 8025326:	687b      	ldr	r3, [r7, #4]
 8025328:	681b      	ldr	r3, [r3, #0]
 802532a:	f022 0202 	bic.w	r2, r2, #2
 802532e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8025330:	f7ff fa3c 	bl	80247ac <HAL_GetTick>
 8025334:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8025336:	e012      	b.n	802535e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8025338:	f7ff fa38 	bl	80247ac <HAL_GetTick>
 802533c:	4602      	mov	r2, r0
 802533e:	68fb      	ldr	r3, [r7, #12]
 8025340:	1ad3      	subs	r3, r2, r3
 8025342:	2b0a      	cmp	r3, #10
 8025344:	d90b      	bls.n	802535e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8025346:	687b      	ldr	r3, [r7, #4]
 8025348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802534a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 802534e:	687b      	ldr	r3, [r7, #4]
 8025350:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8025352:	687b      	ldr	r3, [r7, #4]
 8025354:	2205      	movs	r2, #5
 8025356:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 802535a:	2301      	movs	r3, #1
 802535c:	e09f      	b.n	802549e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 802535e:	687b      	ldr	r3, [r7, #4]
 8025360:	681b      	ldr	r3, [r3, #0]
 8025362:	685b      	ldr	r3, [r3, #4]
 8025364:	f003 0302 	and.w	r3, r3, #2
 8025368:	2b00      	cmp	r3, #0
 802536a:	d1e5      	bne.n	8025338 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 802536c:	687b      	ldr	r3, [r7, #4]
 802536e:	7e1b      	ldrb	r3, [r3, #24]
 8025370:	2b01      	cmp	r3, #1
 8025372:	d108      	bne.n	8025386 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8025374:	687b      	ldr	r3, [r7, #4]
 8025376:	681b      	ldr	r3, [r3, #0]
 8025378:	681a      	ldr	r2, [r3, #0]
 802537a:	687b      	ldr	r3, [r7, #4]
 802537c:	681b      	ldr	r3, [r3, #0]
 802537e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8025382:	601a      	str	r2, [r3, #0]
 8025384:	e007      	b.n	8025396 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8025386:	687b      	ldr	r3, [r7, #4]
 8025388:	681b      	ldr	r3, [r3, #0]
 802538a:	681a      	ldr	r2, [r3, #0]
 802538c:	687b      	ldr	r3, [r7, #4]
 802538e:	681b      	ldr	r3, [r3, #0]
 8025390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8025394:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8025396:	687b      	ldr	r3, [r7, #4]
 8025398:	7e5b      	ldrb	r3, [r3, #25]
 802539a:	2b01      	cmp	r3, #1
 802539c:	d108      	bne.n	80253b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 802539e:	687b      	ldr	r3, [r7, #4]
 80253a0:	681b      	ldr	r3, [r3, #0]
 80253a2:	681a      	ldr	r2, [r3, #0]
 80253a4:	687b      	ldr	r3, [r7, #4]
 80253a6:	681b      	ldr	r3, [r3, #0]
 80253a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80253ac:	601a      	str	r2, [r3, #0]
 80253ae:	e007      	b.n	80253c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80253b0:	687b      	ldr	r3, [r7, #4]
 80253b2:	681b      	ldr	r3, [r3, #0]
 80253b4:	681a      	ldr	r2, [r3, #0]
 80253b6:	687b      	ldr	r3, [r7, #4]
 80253b8:	681b      	ldr	r3, [r3, #0]
 80253ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80253be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80253c0:	687b      	ldr	r3, [r7, #4]
 80253c2:	7e9b      	ldrb	r3, [r3, #26]
 80253c4:	2b01      	cmp	r3, #1
 80253c6:	d108      	bne.n	80253da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80253c8:	687b      	ldr	r3, [r7, #4]
 80253ca:	681b      	ldr	r3, [r3, #0]
 80253cc:	681a      	ldr	r2, [r3, #0]
 80253ce:	687b      	ldr	r3, [r7, #4]
 80253d0:	681b      	ldr	r3, [r3, #0]
 80253d2:	f042 0220 	orr.w	r2, r2, #32
 80253d6:	601a      	str	r2, [r3, #0]
 80253d8:	e007      	b.n	80253ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80253da:	687b      	ldr	r3, [r7, #4]
 80253dc:	681b      	ldr	r3, [r3, #0]
 80253de:	681a      	ldr	r2, [r3, #0]
 80253e0:	687b      	ldr	r3, [r7, #4]
 80253e2:	681b      	ldr	r3, [r3, #0]
 80253e4:	f022 0220 	bic.w	r2, r2, #32
 80253e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80253ea:	687b      	ldr	r3, [r7, #4]
 80253ec:	7edb      	ldrb	r3, [r3, #27]
 80253ee:	2b01      	cmp	r3, #1
 80253f0:	d108      	bne.n	8025404 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80253f2:	687b      	ldr	r3, [r7, #4]
 80253f4:	681b      	ldr	r3, [r3, #0]
 80253f6:	681a      	ldr	r2, [r3, #0]
 80253f8:	687b      	ldr	r3, [r7, #4]
 80253fa:	681b      	ldr	r3, [r3, #0]
 80253fc:	f022 0210 	bic.w	r2, r2, #16
 8025400:	601a      	str	r2, [r3, #0]
 8025402:	e007      	b.n	8025414 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8025404:	687b      	ldr	r3, [r7, #4]
 8025406:	681b      	ldr	r3, [r3, #0]
 8025408:	681a      	ldr	r2, [r3, #0]
 802540a:	687b      	ldr	r3, [r7, #4]
 802540c:	681b      	ldr	r3, [r3, #0]
 802540e:	f042 0210 	orr.w	r2, r2, #16
 8025412:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8025414:	687b      	ldr	r3, [r7, #4]
 8025416:	7f1b      	ldrb	r3, [r3, #28]
 8025418:	2b01      	cmp	r3, #1
 802541a:	d108      	bne.n	802542e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 802541c:	687b      	ldr	r3, [r7, #4]
 802541e:	681b      	ldr	r3, [r3, #0]
 8025420:	681a      	ldr	r2, [r3, #0]
 8025422:	687b      	ldr	r3, [r7, #4]
 8025424:	681b      	ldr	r3, [r3, #0]
 8025426:	f042 0208 	orr.w	r2, r2, #8
 802542a:	601a      	str	r2, [r3, #0]
 802542c:	e007      	b.n	802543e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 802542e:	687b      	ldr	r3, [r7, #4]
 8025430:	681b      	ldr	r3, [r3, #0]
 8025432:	681a      	ldr	r2, [r3, #0]
 8025434:	687b      	ldr	r3, [r7, #4]
 8025436:	681b      	ldr	r3, [r3, #0]
 8025438:	f022 0208 	bic.w	r2, r2, #8
 802543c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 802543e:	687b      	ldr	r3, [r7, #4]
 8025440:	7f5b      	ldrb	r3, [r3, #29]
 8025442:	2b01      	cmp	r3, #1
 8025444:	d108      	bne.n	8025458 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8025446:	687b      	ldr	r3, [r7, #4]
 8025448:	681b      	ldr	r3, [r3, #0]
 802544a:	681a      	ldr	r2, [r3, #0]
 802544c:	687b      	ldr	r3, [r7, #4]
 802544e:	681b      	ldr	r3, [r3, #0]
 8025450:	f042 0204 	orr.w	r2, r2, #4
 8025454:	601a      	str	r2, [r3, #0]
 8025456:	e007      	b.n	8025468 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8025458:	687b      	ldr	r3, [r7, #4]
 802545a:	681b      	ldr	r3, [r3, #0]
 802545c:	681a      	ldr	r2, [r3, #0]
 802545e:	687b      	ldr	r3, [r7, #4]
 8025460:	681b      	ldr	r3, [r3, #0]
 8025462:	f022 0204 	bic.w	r2, r2, #4
 8025466:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8025468:	687b      	ldr	r3, [r7, #4]
 802546a:	689a      	ldr	r2, [r3, #8]
 802546c:	687b      	ldr	r3, [r7, #4]
 802546e:	68db      	ldr	r3, [r3, #12]
 8025470:	431a      	orrs	r2, r3
 8025472:	687b      	ldr	r3, [r7, #4]
 8025474:	691b      	ldr	r3, [r3, #16]
 8025476:	431a      	orrs	r2, r3
 8025478:	687b      	ldr	r3, [r7, #4]
 802547a:	695b      	ldr	r3, [r3, #20]
 802547c:	ea42 0103 	orr.w	r1, r2, r3
 8025480:	687b      	ldr	r3, [r7, #4]
 8025482:	685b      	ldr	r3, [r3, #4]
 8025484:	1e5a      	subs	r2, r3, #1
 8025486:	687b      	ldr	r3, [r7, #4]
 8025488:	681b      	ldr	r3, [r3, #0]
 802548a:	430a      	orrs	r2, r1
 802548c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 802548e:	687b      	ldr	r3, [r7, #4]
 8025490:	2200      	movs	r2, #0
 8025492:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8025494:	687b      	ldr	r3, [r7, #4]
 8025496:	2201      	movs	r2, #1
 8025498:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 802549c:	2300      	movs	r3, #0
}
 802549e:	4618      	mov	r0, r3
 80254a0:	3710      	adds	r7, #16
 80254a2:	46bd      	mov	sp, r7
 80254a4:	bd80      	pop	{r7, pc}
	...

080254a8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80254a8:	b480      	push	{r7}
 80254aa:	b087      	sub	sp, #28
 80254ac:	af00      	add	r7, sp, #0
 80254ae:	6078      	str	r0, [r7, #4]
 80254b0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80254b2:	687b      	ldr	r3, [r7, #4]
 80254b4:	681b      	ldr	r3, [r3, #0]
 80254b6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80254b8:	687b      	ldr	r3, [r7, #4]
 80254ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80254be:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80254c0:	7cfb      	ldrb	r3, [r7, #19]
 80254c2:	2b01      	cmp	r3, #1
 80254c4:	d003      	beq.n	80254ce <HAL_CAN_ConfigFilter+0x26>
 80254c6:	7cfb      	ldrb	r3, [r7, #19]
 80254c8:	2b02      	cmp	r3, #2
 80254ca:	f040 80be 	bne.w	802564a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80254ce:	4b65      	ldr	r3, [pc, #404]	; (8025664 <HAL_CAN_ConfigFilter+0x1bc>)
 80254d0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80254d2:	697b      	ldr	r3, [r7, #20]
 80254d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80254d8:	f043 0201 	orr.w	r2, r3, #1
 80254dc:	697b      	ldr	r3, [r7, #20]
 80254de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80254e2:	697b      	ldr	r3, [r7, #20]
 80254e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80254e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80254ec:	697b      	ldr	r3, [r7, #20]
 80254ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80254f2:	697b      	ldr	r3, [r7, #20]
 80254f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80254f8:	683b      	ldr	r3, [r7, #0]
 80254fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80254fc:	021b      	lsls	r3, r3, #8
 80254fe:	431a      	orrs	r2, r3
 8025500:	697b      	ldr	r3, [r7, #20]
 8025502:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8025506:	683b      	ldr	r3, [r7, #0]
 8025508:	695b      	ldr	r3, [r3, #20]
 802550a:	f003 031f 	and.w	r3, r3, #31
 802550e:	2201      	movs	r2, #1
 8025510:	fa02 f303 	lsl.w	r3, r2, r3
 8025514:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8025516:	697b      	ldr	r3, [r7, #20]
 8025518:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 802551c:	68fb      	ldr	r3, [r7, #12]
 802551e:	43db      	mvns	r3, r3
 8025520:	401a      	ands	r2, r3
 8025522:	697b      	ldr	r3, [r7, #20]
 8025524:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8025528:	683b      	ldr	r3, [r7, #0]
 802552a:	69db      	ldr	r3, [r3, #28]
 802552c:	2b00      	cmp	r3, #0
 802552e:	d123      	bne.n	8025578 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8025530:	697b      	ldr	r3, [r7, #20]
 8025532:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8025536:	68fb      	ldr	r3, [r7, #12]
 8025538:	43db      	mvns	r3, r3
 802553a:	401a      	ands	r2, r3
 802553c:	697b      	ldr	r3, [r7, #20]
 802553e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8025542:	683b      	ldr	r3, [r7, #0]
 8025544:	68db      	ldr	r3, [r3, #12]
 8025546:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8025548:	683b      	ldr	r3, [r7, #0]
 802554a:	685b      	ldr	r3, [r3, #4]
 802554c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 802554e:	683a      	ldr	r2, [r7, #0]
 8025550:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8025552:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8025554:	697b      	ldr	r3, [r7, #20]
 8025556:	3248      	adds	r2, #72	; 0x48
 8025558:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 802555c:	683b      	ldr	r3, [r7, #0]
 802555e:	689b      	ldr	r3, [r3, #8]
 8025560:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8025562:	683b      	ldr	r3, [r7, #0]
 8025564:	681b      	ldr	r3, [r3, #0]
 8025566:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8025568:	683b      	ldr	r3, [r7, #0]
 802556a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 802556c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 802556e:	6979      	ldr	r1, [r7, #20]
 8025570:	3348      	adds	r3, #72	; 0x48
 8025572:	00db      	lsls	r3, r3, #3
 8025574:	440b      	add	r3, r1
 8025576:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8025578:	683b      	ldr	r3, [r7, #0]
 802557a:	69db      	ldr	r3, [r3, #28]
 802557c:	2b01      	cmp	r3, #1
 802557e:	d122      	bne.n	80255c6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8025580:	697b      	ldr	r3, [r7, #20]
 8025582:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8025586:	68fb      	ldr	r3, [r7, #12]
 8025588:	431a      	orrs	r2, r3
 802558a:	697b      	ldr	r3, [r7, #20]
 802558c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8025590:	683b      	ldr	r3, [r7, #0]
 8025592:	681b      	ldr	r3, [r3, #0]
 8025594:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8025596:	683b      	ldr	r3, [r7, #0]
 8025598:	685b      	ldr	r3, [r3, #4]
 802559a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 802559c:	683a      	ldr	r2, [r7, #0]
 802559e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80255a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80255a2:	697b      	ldr	r3, [r7, #20]
 80255a4:	3248      	adds	r2, #72	; 0x48
 80255a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80255aa:	683b      	ldr	r3, [r7, #0]
 80255ac:	689b      	ldr	r3, [r3, #8]
 80255ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80255b0:	683b      	ldr	r3, [r7, #0]
 80255b2:	68db      	ldr	r3, [r3, #12]
 80255b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80255b6:	683b      	ldr	r3, [r7, #0]
 80255b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80255ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80255bc:	6979      	ldr	r1, [r7, #20]
 80255be:	3348      	adds	r3, #72	; 0x48
 80255c0:	00db      	lsls	r3, r3, #3
 80255c2:	440b      	add	r3, r1
 80255c4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80255c6:	683b      	ldr	r3, [r7, #0]
 80255c8:	699b      	ldr	r3, [r3, #24]
 80255ca:	2b00      	cmp	r3, #0
 80255cc:	d109      	bne.n	80255e2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80255ce:	697b      	ldr	r3, [r7, #20]
 80255d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80255d4:	68fb      	ldr	r3, [r7, #12]
 80255d6:	43db      	mvns	r3, r3
 80255d8:	401a      	ands	r2, r3
 80255da:	697b      	ldr	r3, [r7, #20]
 80255dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80255e0:	e007      	b.n	80255f2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80255e2:	697b      	ldr	r3, [r7, #20]
 80255e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80255e8:	68fb      	ldr	r3, [r7, #12]
 80255ea:	431a      	orrs	r2, r3
 80255ec:	697b      	ldr	r3, [r7, #20]
 80255ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80255f2:	683b      	ldr	r3, [r7, #0]
 80255f4:	691b      	ldr	r3, [r3, #16]
 80255f6:	2b00      	cmp	r3, #0
 80255f8:	d109      	bne.n	802560e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80255fa:	697b      	ldr	r3, [r7, #20]
 80255fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8025600:	68fb      	ldr	r3, [r7, #12]
 8025602:	43db      	mvns	r3, r3
 8025604:	401a      	ands	r2, r3
 8025606:	697b      	ldr	r3, [r7, #20]
 8025608:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 802560c:	e007      	b.n	802561e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 802560e:	697b      	ldr	r3, [r7, #20]
 8025610:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8025614:	68fb      	ldr	r3, [r7, #12]
 8025616:	431a      	orrs	r2, r3
 8025618:	697b      	ldr	r3, [r7, #20]
 802561a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 802561e:	683b      	ldr	r3, [r7, #0]
 8025620:	6a1b      	ldr	r3, [r3, #32]
 8025622:	2b01      	cmp	r3, #1
 8025624:	d107      	bne.n	8025636 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8025626:	697b      	ldr	r3, [r7, #20]
 8025628:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 802562c:	68fb      	ldr	r3, [r7, #12]
 802562e:	431a      	orrs	r2, r3
 8025630:	697b      	ldr	r3, [r7, #20]
 8025632:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8025636:	697b      	ldr	r3, [r7, #20]
 8025638:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 802563c:	f023 0201 	bic.w	r2, r3, #1
 8025640:	697b      	ldr	r3, [r7, #20]
 8025642:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8025646:	2300      	movs	r3, #0
 8025648:	e006      	b.n	8025658 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 802564a:	687b      	ldr	r3, [r7, #4]
 802564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802564e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8025652:	687b      	ldr	r3, [r7, #4]
 8025654:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8025656:	2301      	movs	r3, #1
  }
}
 8025658:	4618      	mov	r0, r3
 802565a:	371c      	adds	r7, #28
 802565c:	46bd      	mov	sp, r7
 802565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025662:	4770      	bx	lr
 8025664:	40006400 	.word	0x40006400

08025668 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8025668:	b580      	push	{r7, lr}
 802566a:	b084      	sub	sp, #16
 802566c:	af00      	add	r7, sp, #0
 802566e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8025670:	687b      	ldr	r3, [r7, #4]
 8025672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8025676:	b2db      	uxtb	r3, r3
 8025678:	2b01      	cmp	r3, #1
 802567a:	d12e      	bne.n	80256da <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 802567c:	687b      	ldr	r3, [r7, #4]
 802567e:	2202      	movs	r2, #2
 8025680:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8025684:	687b      	ldr	r3, [r7, #4]
 8025686:	681b      	ldr	r3, [r3, #0]
 8025688:	681a      	ldr	r2, [r3, #0]
 802568a:	687b      	ldr	r3, [r7, #4]
 802568c:	681b      	ldr	r3, [r3, #0]
 802568e:	f022 0201 	bic.w	r2, r2, #1
 8025692:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8025694:	f7ff f88a 	bl	80247ac <HAL_GetTick>
 8025698:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 802569a:	e012      	b.n	80256c2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 802569c:	f7ff f886 	bl	80247ac <HAL_GetTick>
 80256a0:	4602      	mov	r2, r0
 80256a2:	68fb      	ldr	r3, [r7, #12]
 80256a4:	1ad3      	subs	r3, r2, r3
 80256a6:	2b0a      	cmp	r3, #10
 80256a8:	d90b      	bls.n	80256c2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80256aa:	687b      	ldr	r3, [r7, #4]
 80256ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80256ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80256b2:	687b      	ldr	r3, [r7, #4]
 80256b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80256b6:	687b      	ldr	r3, [r7, #4]
 80256b8:	2205      	movs	r2, #5
 80256ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80256be:	2301      	movs	r3, #1
 80256c0:	e012      	b.n	80256e8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80256c2:	687b      	ldr	r3, [r7, #4]
 80256c4:	681b      	ldr	r3, [r3, #0]
 80256c6:	685b      	ldr	r3, [r3, #4]
 80256c8:	f003 0301 	and.w	r3, r3, #1
 80256cc:	2b00      	cmp	r3, #0
 80256ce:	d1e5      	bne.n	802569c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80256d0:	687b      	ldr	r3, [r7, #4]
 80256d2:	2200      	movs	r2, #0
 80256d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80256d6:	2300      	movs	r3, #0
 80256d8:	e006      	b.n	80256e8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80256da:	687b      	ldr	r3, [r7, #4]
 80256dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80256de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80256e2:	687b      	ldr	r3, [r7, #4]
 80256e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80256e6:	2301      	movs	r3, #1
  }
}
 80256e8:	4618      	mov	r0, r3
 80256ea:	3710      	adds	r7, #16
 80256ec:	46bd      	mov	sp, r7
 80256ee:	bd80      	pop	{r7, pc}

080256f0 <HAL_CAN_WakeUp>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
{
 80256f0:	b480      	push	{r7}
 80256f2:	b087      	sub	sp, #28
 80256f4:	af00      	add	r7, sp, #0
 80256f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80256f8:	2300      	movs	r3, #0
 80256fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 1000000U;
 80256fc:	4b1c      	ldr	r3, [pc, #112]	; (8025770 <HAL_CAN_WakeUp+0x80>)
 80256fe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8025700:	687b      	ldr	r3, [r7, #4]
 8025702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8025706:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8025708:	7cfb      	ldrb	r3, [r7, #19]
 802570a:	2b01      	cmp	r3, #1
 802570c:	d002      	beq.n	8025714 <HAL_CAN_WakeUp+0x24>
 802570e:	7cfb      	ldrb	r3, [r7, #19]
 8025710:	2b02      	cmp	r3, #2
 8025712:	d11f      	bne.n	8025754 <HAL_CAN_WakeUp+0x64>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Wake up request */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8025714:	687b      	ldr	r3, [r7, #4]
 8025716:	681b      	ldr	r3, [r3, #0]
 8025718:	681a      	ldr	r2, [r3, #0]
 802571a:	687b      	ldr	r3, [r7, #4]
 802571c:	681b      	ldr	r3, [r3, #0]
 802571e:	f022 0202 	bic.w	r2, r2, #2
 8025722:	601a      	str	r2, [r3, #0]

    /* Wait sleep mode is exited */
    do
    {
      /* Increment counter */
      count++;
 8025724:	68fb      	ldr	r3, [r7, #12]
 8025726:	3301      	adds	r3, #1
 8025728:	60fb      	str	r3, [r7, #12]

      /* Check if timeout is reached */
      if (count > timeout)
 802572a:	68fb      	ldr	r3, [r7, #12]
 802572c:	697a      	ldr	r2, [r7, #20]
 802572e:	429a      	cmp	r2, r3
 8025730:	d207      	bcs.n	8025742 <HAL_CAN_WakeUp+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8025732:	687b      	ldr	r3, [r7, #4]
 8025734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025736:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 802573a:	687b      	ldr	r3, [r7, #4]
 802573c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 802573e:	2301      	movs	r3, #1
 8025740:	e00f      	b.n	8025762 <HAL_CAN_WakeUp+0x72>
      }
    }
    while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 8025742:	687b      	ldr	r3, [r7, #4]
 8025744:	681b      	ldr	r3, [r3, #0]
 8025746:	685b      	ldr	r3, [r3, #4]
 8025748:	f003 0302 	and.w	r3, r3, #2
 802574c:	2b00      	cmp	r3, #0
 802574e:	d1e9      	bne.n	8025724 <HAL_CAN_WakeUp+0x34>

    /* Return function status */
    return HAL_OK;
 8025750:	2300      	movs	r3, #0
 8025752:	e006      	b.n	8025762 <HAL_CAN_WakeUp+0x72>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8025754:	687b      	ldr	r3, [r7, #4]
 8025756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025758:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 802575c:	687b      	ldr	r3, [r7, #4]
 802575e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8025760:	2301      	movs	r3, #1
  }
}
 8025762:	4618      	mov	r0, r3
 8025764:	371c      	adds	r7, #28
 8025766:	46bd      	mov	sp, r7
 8025768:	f85d 7b04 	ldr.w	r7, [sp], #4
 802576c:	4770      	bx	lr
 802576e:	bf00      	nop
 8025770:	000f4240 	.word	0x000f4240

08025774 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8025774:	b480      	push	{r7}
 8025776:	b089      	sub	sp, #36	; 0x24
 8025778:	af00      	add	r7, sp, #0
 802577a:	60f8      	str	r0, [r7, #12]
 802577c:	60b9      	str	r1, [r7, #8]
 802577e:	607a      	str	r2, [r7, #4]
 8025780:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8025782:	68fb      	ldr	r3, [r7, #12]
 8025784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8025788:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 802578a:	68fb      	ldr	r3, [r7, #12]
 802578c:	681b      	ldr	r3, [r3, #0]
 802578e:	689b      	ldr	r3, [r3, #8]
 8025790:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8025792:	7ffb      	ldrb	r3, [r7, #31]
 8025794:	2b01      	cmp	r3, #1
 8025796:	d003      	beq.n	80257a0 <HAL_CAN_AddTxMessage+0x2c>
 8025798:	7ffb      	ldrb	r3, [r7, #31]
 802579a:	2b02      	cmp	r3, #2
 802579c:	f040 80b8 	bne.w	8025910 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80257a0:	69bb      	ldr	r3, [r7, #24]
 80257a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80257a6:	2b00      	cmp	r3, #0
 80257a8:	d10a      	bne.n	80257c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80257aa:	69bb      	ldr	r3, [r7, #24]
 80257ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80257b0:	2b00      	cmp	r3, #0
 80257b2:	d105      	bne.n	80257c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80257b4:	69bb      	ldr	r3, [r7, #24]
 80257b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80257ba:	2b00      	cmp	r3, #0
 80257bc:	f000 80a0 	beq.w	8025900 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80257c0:	69bb      	ldr	r3, [r7, #24]
 80257c2:	0e1b      	lsrs	r3, r3, #24
 80257c4:	f003 0303 	and.w	r3, r3, #3
 80257c8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80257ca:	697b      	ldr	r3, [r7, #20]
 80257cc:	2b02      	cmp	r3, #2
 80257ce:	d907      	bls.n	80257e0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80257d0:	68fb      	ldr	r3, [r7, #12]
 80257d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80257d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80257d8:	68fb      	ldr	r3, [r7, #12]
 80257da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80257dc:	2301      	movs	r3, #1
 80257de:	e09e      	b.n	802591e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80257e0:	2201      	movs	r2, #1
 80257e2:	697b      	ldr	r3, [r7, #20]
 80257e4:	409a      	lsls	r2, r3
 80257e6:	683b      	ldr	r3, [r7, #0]
 80257e8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80257ea:	68bb      	ldr	r3, [r7, #8]
 80257ec:	689b      	ldr	r3, [r3, #8]
 80257ee:	2b00      	cmp	r3, #0
 80257f0:	d10d      	bne.n	802580e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80257f2:	68bb      	ldr	r3, [r7, #8]
 80257f4:	681b      	ldr	r3, [r3, #0]
 80257f6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80257f8:	68bb      	ldr	r3, [r7, #8]
 80257fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80257fc:	68f9      	ldr	r1, [r7, #12]
 80257fe:	6809      	ldr	r1, [r1, #0]
 8025800:	431a      	orrs	r2, r3
 8025802:	697b      	ldr	r3, [r7, #20]
 8025804:	3318      	adds	r3, #24
 8025806:	011b      	lsls	r3, r3, #4
 8025808:	440b      	add	r3, r1
 802580a:	601a      	str	r2, [r3, #0]
 802580c:	e00f      	b.n	802582e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 802580e:	68bb      	ldr	r3, [r7, #8]
 8025810:	685b      	ldr	r3, [r3, #4]
 8025812:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8025814:	68bb      	ldr	r3, [r7, #8]
 8025816:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8025818:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 802581a:	68bb      	ldr	r3, [r7, #8]
 802581c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 802581e:	68f9      	ldr	r1, [r7, #12]
 8025820:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8025822:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8025824:	697b      	ldr	r3, [r7, #20]
 8025826:	3318      	adds	r3, #24
 8025828:	011b      	lsls	r3, r3, #4
 802582a:	440b      	add	r3, r1
 802582c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 802582e:	68fb      	ldr	r3, [r7, #12]
 8025830:	6819      	ldr	r1, [r3, #0]
 8025832:	68bb      	ldr	r3, [r7, #8]
 8025834:	691a      	ldr	r2, [r3, #16]
 8025836:	697b      	ldr	r3, [r7, #20]
 8025838:	3318      	adds	r3, #24
 802583a:	011b      	lsls	r3, r3, #4
 802583c:	440b      	add	r3, r1
 802583e:	3304      	adds	r3, #4
 8025840:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8025842:	68bb      	ldr	r3, [r7, #8]
 8025844:	7d1b      	ldrb	r3, [r3, #20]
 8025846:	2b01      	cmp	r3, #1
 8025848:	d111      	bne.n	802586e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 802584a:	68fb      	ldr	r3, [r7, #12]
 802584c:	681a      	ldr	r2, [r3, #0]
 802584e:	697b      	ldr	r3, [r7, #20]
 8025850:	3318      	adds	r3, #24
 8025852:	011b      	lsls	r3, r3, #4
 8025854:	4413      	add	r3, r2
 8025856:	3304      	adds	r3, #4
 8025858:	681b      	ldr	r3, [r3, #0]
 802585a:	68fa      	ldr	r2, [r7, #12]
 802585c:	6811      	ldr	r1, [r2, #0]
 802585e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8025862:	697b      	ldr	r3, [r7, #20]
 8025864:	3318      	adds	r3, #24
 8025866:	011b      	lsls	r3, r3, #4
 8025868:	440b      	add	r3, r1
 802586a:	3304      	adds	r3, #4
 802586c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 802586e:	687b      	ldr	r3, [r7, #4]
 8025870:	3307      	adds	r3, #7
 8025872:	781b      	ldrb	r3, [r3, #0]
 8025874:	061a      	lsls	r2, r3, #24
 8025876:	687b      	ldr	r3, [r7, #4]
 8025878:	3306      	adds	r3, #6
 802587a:	781b      	ldrb	r3, [r3, #0]
 802587c:	041b      	lsls	r3, r3, #16
 802587e:	431a      	orrs	r2, r3
 8025880:	687b      	ldr	r3, [r7, #4]
 8025882:	3305      	adds	r3, #5
 8025884:	781b      	ldrb	r3, [r3, #0]
 8025886:	021b      	lsls	r3, r3, #8
 8025888:	4313      	orrs	r3, r2
 802588a:	687a      	ldr	r2, [r7, #4]
 802588c:	3204      	adds	r2, #4
 802588e:	7812      	ldrb	r2, [r2, #0]
 8025890:	4610      	mov	r0, r2
 8025892:	68fa      	ldr	r2, [r7, #12]
 8025894:	6811      	ldr	r1, [r2, #0]
 8025896:	ea43 0200 	orr.w	r2, r3, r0
 802589a:	697b      	ldr	r3, [r7, #20]
 802589c:	011b      	lsls	r3, r3, #4
 802589e:	440b      	add	r3, r1
 80258a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80258a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80258a6:	687b      	ldr	r3, [r7, #4]
 80258a8:	3303      	adds	r3, #3
 80258aa:	781b      	ldrb	r3, [r3, #0]
 80258ac:	061a      	lsls	r2, r3, #24
 80258ae:	687b      	ldr	r3, [r7, #4]
 80258b0:	3302      	adds	r3, #2
 80258b2:	781b      	ldrb	r3, [r3, #0]
 80258b4:	041b      	lsls	r3, r3, #16
 80258b6:	431a      	orrs	r2, r3
 80258b8:	687b      	ldr	r3, [r7, #4]
 80258ba:	3301      	adds	r3, #1
 80258bc:	781b      	ldrb	r3, [r3, #0]
 80258be:	021b      	lsls	r3, r3, #8
 80258c0:	4313      	orrs	r3, r2
 80258c2:	687a      	ldr	r2, [r7, #4]
 80258c4:	7812      	ldrb	r2, [r2, #0]
 80258c6:	4610      	mov	r0, r2
 80258c8:	68fa      	ldr	r2, [r7, #12]
 80258ca:	6811      	ldr	r1, [r2, #0]
 80258cc:	ea43 0200 	orr.w	r2, r3, r0
 80258d0:	697b      	ldr	r3, [r7, #20]
 80258d2:	011b      	lsls	r3, r3, #4
 80258d4:	440b      	add	r3, r1
 80258d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80258da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80258dc:	68fb      	ldr	r3, [r7, #12]
 80258de:	681a      	ldr	r2, [r3, #0]
 80258e0:	697b      	ldr	r3, [r7, #20]
 80258e2:	3318      	adds	r3, #24
 80258e4:	011b      	lsls	r3, r3, #4
 80258e6:	4413      	add	r3, r2
 80258e8:	681b      	ldr	r3, [r3, #0]
 80258ea:	68fa      	ldr	r2, [r7, #12]
 80258ec:	6811      	ldr	r1, [r2, #0]
 80258ee:	f043 0201 	orr.w	r2, r3, #1
 80258f2:	697b      	ldr	r3, [r7, #20]
 80258f4:	3318      	adds	r3, #24
 80258f6:	011b      	lsls	r3, r3, #4
 80258f8:	440b      	add	r3, r1
 80258fa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80258fc:	2300      	movs	r3, #0
 80258fe:	e00e      	b.n	802591e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8025900:	68fb      	ldr	r3, [r7, #12]
 8025902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025904:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8025908:	68fb      	ldr	r3, [r7, #12]
 802590a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 802590c:	2301      	movs	r3, #1
 802590e:	e006      	b.n	802591e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8025910:	68fb      	ldr	r3, [r7, #12]
 8025912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025914:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8025918:	68fb      	ldr	r3, [r7, #12]
 802591a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 802591c:	2301      	movs	r3, #1
  }
}
 802591e:	4618      	mov	r0, r3
 8025920:	3724      	adds	r7, #36	; 0x24
 8025922:	46bd      	mov	sp, r7
 8025924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025928:	4770      	bx	lr

0802592a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 802592a:	b480      	push	{r7}
 802592c:	b085      	sub	sp, #20
 802592e:	af00      	add	r7, sp, #0
 8025930:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8025932:	2300      	movs	r3, #0
 8025934:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8025936:	687b      	ldr	r3, [r7, #4]
 8025938:	f893 3020 	ldrb.w	r3, [r3, #32]
 802593c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 802593e:	7afb      	ldrb	r3, [r7, #11]
 8025940:	2b01      	cmp	r3, #1
 8025942:	d002      	beq.n	802594a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8025944:	7afb      	ldrb	r3, [r7, #11]
 8025946:	2b02      	cmp	r3, #2
 8025948:	d11d      	bne.n	8025986 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 802594a:	687b      	ldr	r3, [r7, #4]
 802594c:	681b      	ldr	r3, [r3, #0]
 802594e:	689b      	ldr	r3, [r3, #8]
 8025950:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8025954:	2b00      	cmp	r3, #0
 8025956:	d002      	beq.n	802595e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8025958:	68fb      	ldr	r3, [r7, #12]
 802595a:	3301      	adds	r3, #1
 802595c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 802595e:	687b      	ldr	r3, [r7, #4]
 8025960:	681b      	ldr	r3, [r3, #0]
 8025962:	689b      	ldr	r3, [r3, #8]
 8025964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8025968:	2b00      	cmp	r3, #0
 802596a:	d002      	beq.n	8025972 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 802596c:	68fb      	ldr	r3, [r7, #12]
 802596e:	3301      	adds	r3, #1
 8025970:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8025972:	687b      	ldr	r3, [r7, #4]
 8025974:	681b      	ldr	r3, [r3, #0]
 8025976:	689b      	ldr	r3, [r3, #8]
 8025978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802597c:	2b00      	cmp	r3, #0
 802597e:	d002      	beq.n	8025986 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8025980:	68fb      	ldr	r3, [r7, #12]
 8025982:	3301      	adds	r3, #1
 8025984:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8025986:	68fb      	ldr	r3, [r7, #12]
}
 8025988:	4618      	mov	r0, r3
 802598a:	3714      	adds	r7, #20
 802598c:	46bd      	mov	sp, r7
 802598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025992:	4770      	bx	lr

08025994 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8025994:	b480      	push	{r7}
 8025996:	b087      	sub	sp, #28
 8025998:	af00      	add	r7, sp, #0
 802599a:	60f8      	str	r0, [r7, #12]
 802599c:	60b9      	str	r1, [r7, #8]
 802599e:	607a      	str	r2, [r7, #4]
 80259a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80259a2:	68fb      	ldr	r3, [r7, #12]
 80259a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80259a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80259aa:	7dfb      	ldrb	r3, [r7, #23]
 80259ac:	2b01      	cmp	r3, #1
 80259ae:	d003      	beq.n	80259b8 <HAL_CAN_GetRxMessage+0x24>
 80259b0:	7dfb      	ldrb	r3, [r7, #23]
 80259b2:	2b02      	cmp	r3, #2
 80259b4:	f040 80f3 	bne.w	8025b9e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80259b8:	68bb      	ldr	r3, [r7, #8]
 80259ba:	2b00      	cmp	r3, #0
 80259bc:	d10e      	bne.n	80259dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80259be:	68fb      	ldr	r3, [r7, #12]
 80259c0:	681b      	ldr	r3, [r3, #0]
 80259c2:	68db      	ldr	r3, [r3, #12]
 80259c4:	f003 0303 	and.w	r3, r3, #3
 80259c8:	2b00      	cmp	r3, #0
 80259ca:	d116      	bne.n	80259fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80259cc:	68fb      	ldr	r3, [r7, #12]
 80259ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80259d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80259d4:	68fb      	ldr	r3, [r7, #12]
 80259d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80259d8:	2301      	movs	r3, #1
 80259da:	e0e7      	b.n	8025bac <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80259dc:	68fb      	ldr	r3, [r7, #12]
 80259de:	681b      	ldr	r3, [r3, #0]
 80259e0:	691b      	ldr	r3, [r3, #16]
 80259e2:	f003 0303 	and.w	r3, r3, #3
 80259e6:	2b00      	cmp	r3, #0
 80259e8:	d107      	bne.n	80259fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80259ea:	68fb      	ldr	r3, [r7, #12]
 80259ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80259ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80259f2:	68fb      	ldr	r3, [r7, #12]
 80259f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80259f6:	2301      	movs	r3, #1
 80259f8:	e0d8      	b.n	8025bac <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80259fa:	68fb      	ldr	r3, [r7, #12]
 80259fc:	681a      	ldr	r2, [r3, #0]
 80259fe:	68bb      	ldr	r3, [r7, #8]
 8025a00:	331b      	adds	r3, #27
 8025a02:	011b      	lsls	r3, r3, #4
 8025a04:	4413      	add	r3, r2
 8025a06:	681b      	ldr	r3, [r3, #0]
 8025a08:	f003 0204 	and.w	r2, r3, #4
 8025a0c:	687b      	ldr	r3, [r7, #4]
 8025a0e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8025a10:	687b      	ldr	r3, [r7, #4]
 8025a12:	689b      	ldr	r3, [r3, #8]
 8025a14:	2b00      	cmp	r3, #0
 8025a16:	d10c      	bne.n	8025a32 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8025a18:	68fb      	ldr	r3, [r7, #12]
 8025a1a:	681a      	ldr	r2, [r3, #0]
 8025a1c:	68bb      	ldr	r3, [r7, #8]
 8025a1e:	331b      	adds	r3, #27
 8025a20:	011b      	lsls	r3, r3, #4
 8025a22:	4413      	add	r3, r2
 8025a24:	681b      	ldr	r3, [r3, #0]
 8025a26:	0d5b      	lsrs	r3, r3, #21
 8025a28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8025a2c:	687b      	ldr	r3, [r7, #4]
 8025a2e:	601a      	str	r2, [r3, #0]
 8025a30:	e00b      	b.n	8025a4a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8025a32:	68fb      	ldr	r3, [r7, #12]
 8025a34:	681a      	ldr	r2, [r3, #0]
 8025a36:	68bb      	ldr	r3, [r7, #8]
 8025a38:	331b      	adds	r3, #27
 8025a3a:	011b      	lsls	r3, r3, #4
 8025a3c:	4413      	add	r3, r2
 8025a3e:	681b      	ldr	r3, [r3, #0]
 8025a40:	08db      	lsrs	r3, r3, #3
 8025a42:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8025a46:	687b      	ldr	r3, [r7, #4]
 8025a48:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8025a4a:	68fb      	ldr	r3, [r7, #12]
 8025a4c:	681a      	ldr	r2, [r3, #0]
 8025a4e:	68bb      	ldr	r3, [r7, #8]
 8025a50:	331b      	adds	r3, #27
 8025a52:	011b      	lsls	r3, r3, #4
 8025a54:	4413      	add	r3, r2
 8025a56:	681b      	ldr	r3, [r3, #0]
 8025a58:	f003 0202 	and.w	r2, r3, #2
 8025a5c:	687b      	ldr	r3, [r7, #4]
 8025a5e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8025a60:	68fb      	ldr	r3, [r7, #12]
 8025a62:	681a      	ldr	r2, [r3, #0]
 8025a64:	68bb      	ldr	r3, [r7, #8]
 8025a66:	331b      	adds	r3, #27
 8025a68:	011b      	lsls	r3, r3, #4
 8025a6a:	4413      	add	r3, r2
 8025a6c:	3304      	adds	r3, #4
 8025a6e:	681b      	ldr	r3, [r3, #0]
 8025a70:	f003 020f 	and.w	r2, r3, #15
 8025a74:	687b      	ldr	r3, [r7, #4]
 8025a76:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8025a78:	68fb      	ldr	r3, [r7, #12]
 8025a7a:	681a      	ldr	r2, [r3, #0]
 8025a7c:	68bb      	ldr	r3, [r7, #8]
 8025a7e:	331b      	adds	r3, #27
 8025a80:	011b      	lsls	r3, r3, #4
 8025a82:	4413      	add	r3, r2
 8025a84:	3304      	adds	r3, #4
 8025a86:	681b      	ldr	r3, [r3, #0]
 8025a88:	0a1b      	lsrs	r3, r3, #8
 8025a8a:	b2da      	uxtb	r2, r3
 8025a8c:	687b      	ldr	r3, [r7, #4]
 8025a8e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8025a90:	68fb      	ldr	r3, [r7, #12]
 8025a92:	681a      	ldr	r2, [r3, #0]
 8025a94:	68bb      	ldr	r3, [r7, #8]
 8025a96:	331b      	adds	r3, #27
 8025a98:	011b      	lsls	r3, r3, #4
 8025a9a:	4413      	add	r3, r2
 8025a9c:	3304      	adds	r3, #4
 8025a9e:	681b      	ldr	r3, [r3, #0]
 8025aa0:	0c1b      	lsrs	r3, r3, #16
 8025aa2:	b29a      	uxth	r2, r3
 8025aa4:	687b      	ldr	r3, [r7, #4]
 8025aa6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8025aa8:	68fb      	ldr	r3, [r7, #12]
 8025aaa:	681a      	ldr	r2, [r3, #0]
 8025aac:	68bb      	ldr	r3, [r7, #8]
 8025aae:	011b      	lsls	r3, r3, #4
 8025ab0:	4413      	add	r3, r2
 8025ab2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8025ab6:	681b      	ldr	r3, [r3, #0]
 8025ab8:	b2da      	uxtb	r2, r3
 8025aba:	683b      	ldr	r3, [r7, #0]
 8025abc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8025abe:	68fb      	ldr	r3, [r7, #12]
 8025ac0:	681a      	ldr	r2, [r3, #0]
 8025ac2:	68bb      	ldr	r3, [r7, #8]
 8025ac4:	011b      	lsls	r3, r3, #4
 8025ac6:	4413      	add	r3, r2
 8025ac8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8025acc:	681b      	ldr	r3, [r3, #0]
 8025ace:	0a1a      	lsrs	r2, r3, #8
 8025ad0:	683b      	ldr	r3, [r7, #0]
 8025ad2:	3301      	adds	r3, #1
 8025ad4:	b2d2      	uxtb	r2, r2
 8025ad6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8025ad8:	68fb      	ldr	r3, [r7, #12]
 8025ada:	681a      	ldr	r2, [r3, #0]
 8025adc:	68bb      	ldr	r3, [r7, #8]
 8025ade:	011b      	lsls	r3, r3, #4
 8025ae0:	4413      	add	r3, r2
 8025ae2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8025ae6:	681b      	ldr	r3, [r3, #0]
 8025ae8:	0c1a      	lsrs	r2, r3, #16
 8025aea:	683b      	ldr	r3, [r7, #0]
 8025aec:	3302      	adds	r3, #2
 8025aee:	b2d2      	uxtb	r2, r2
 8025af0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8025af2:	68fb      	ldr	r3, [r7, #12]
 8025af4:	681a      	ldr	r2, [r3, #0]
 8025af6:	68bb      	ldr	r3, [r7, #8]
 8025af8:	011b      	lsls	r3, r3, #4
 8025afa:	4413      	add	r3, r2
 8025afc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8025b00:	681b      	ldr	r3, [r3, #0]
 8025b02:	0e1a      	lsrs	r2, r3, #24
 8025b04:	683b      	ldr	r3, [r7, #0]
 8025b06:	3303      	adds	r3, #3
 8025b08:	b2d2      	uxtb	r2, r2
 8025b0a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8025b0c:	68fb      	ldr	r3, [r7, #12]
 8025b0e:	681a      	ldr	r2, [r3, #0]
 8025b10:	68bb      	ldr	r3, [r7, #8]
 8025b12:	011b      	lsls	r3, r3, #4
 8025b14:	4413      	add	r3, r2
 8025b16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8025b1a:	681a      	ldr	r2, [r3, #0]
 8025b1c:	683b      	ldr	r3, [r7, #0]
 8025b1e:	3304      	adds	r3, #4
 8025b20:	b2d2      	uxtb	r2, r2
 8025b22:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8025b24:	68fb      	ldr	r3, [r7, #12]
 8025b26:	681a      	ldr	r2, [r3, #0]
 8025b28:	68bb      	ldr	r3, [r7, #8]
 8025b2a:	011b      	lsls	r3, r3, #4
 8025b2c:	4413      	add	r3, r2
 8025b2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8025b32:	681b      	ldr	r3, [r3, #0]
 8025b34:	0a1a      	lsrs	r2, r3, #8
 8025b36:	683b      	ldr	r3, [r7, #0]
 8025b38:	3305      	adds	r3, #5
 8025b3a:	b2d2      	uxtb	r2, r2
 8025b3c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8025b3e:	68fb      	ldr	r3, [r7, #12]
 8025b40:	681a      	ldr	r2, [r3, #0]
 8025b42:	68bb      	ldr	r3, [r7, #8]
 8025b44:	011b      	lsls	r3, r3, #4
 8025b46:	4413      	add	r3, r2
 8025b48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8025b4c:	681b      	ldr	r3, [r3, #0]
 8025b4e:	0c1a      	lsrs	r2, r3, #16
 8025b50:	683b      	ldr	r3, [r7, #0]
 8025b52:	3306      	adds	r3, #6
 8025b54:	b2d2      	uxtb	r2, r2
 8025b56:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8025b58:	68fb      	ldr	r3, [r7, #12]
 8025b5a:	681a      	ldr	r2, [r3, #0]
 8025b5c:	68bb      	ldr	r3, [r7, #8]
 8025b5e:	011b      	lsls	r3, r3, #4
 8025b60:	4413      	add	r3, r2
 8025b62:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8025b66:	681b      	ldr	r3, [r3, #0]
 8025b68:	0e1a      	lsrs	r2, r3, #24
 8025b6a:	683b      	ldr	r3, [r7, #0]
 8025b6c:	3307      	adds	r3, #7
 8025b6e:	b2d2      	uxtb	r2, r2
 8025b70:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8025b72:	68bb      	ldr	r3, [r7, #8]
 8025b74:	2b00      	cmp	r3, #0
 8025b76:	d108      	bne.n	8025b8a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8025b78:	68fb      	ldr	r3, [r7, #12]
 8025b7a:	681b      	ldr	r3, [r3, #0]
 8025b7c:	68da      	ldr	r2, [r3, #12]
 8025b7e:	68fb      	ldr	r3, [r7, #12]
 8025b80:	681b      	ldr	r3, [r3, #0]
 8025b82:	f042 0220 	orr.w	r2, r2, #32
 8025b86:	60da      	str	r2, [r3, #12]
 8025b88:	e007      	b.n	8025b9a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8025b8a:	68fb      	ldr	r3, [r7, #12]
 8025b8c:	681b      	ldr	r3, [r3, #0]
 8025b8e:	691a      	ldr	r2, [r3, #16]
 8025b90:	68fb      	ldr	r3, [r7, #12]
 8025b92:	681b      	ldr	r3, [r3, #0]
 8025b94:	f042 0220 	orr.w	r2, r2, #32
 8025b98:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8025b9a:	2300      	movs	r3, #0
 8025b9c:	e006      	b.n	8025bac <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8025b9e:	68fb      	ldr	r3, [r7, #12]
 8025ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025ba2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8025ba6:	68fb      	ldr	r3, [r7, #12]
 8025ba8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8025baa:	2301      	movs	r3, #1
  }
}
 8025bac:	4618      	mov	r0, r3
 8025bae:	371c      	adds	r7, #28
 8025bb0:	46bd      	mov	sp, r7
 8025bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bb6:	4770      	bx	lr

08025bb8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8025bb8:	b480      	push	{r7}
 8025bba:	b085      	sub	sp, #20
 8025bbc:	af00      	add	r7, sp, #0
 8025bbe:	6078      	str	r0, [r7, #4]
 8025bc0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8025bc2:	687b      	ldr	r3, [r7, #4]
 8025bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8025bc8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8025bca:	7bfb      	ldrb	r3, [r7, #15]
 8025bcc:	2b01      	cmp	r3, #1
 8025bce:	d002      	beq.n	8025bd6 <HAL_CAN_ActivateNotification+0x1e>
 8025bd0:	7bfb      	ldrb	r3, [r7, #15]
 8025bd2:	2b02      	cmp	r3, #2
 8025bd4:	d109      	bne.n	8025bea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8025bd6:	687b      	ldr	r3, [r7, #4]
 8025bd8:	681b      	ldr	r3, [r3, #0]
 8025bda:	6959      	ldr	r1, [r3, #20]
 8025bdc:	687b      	ldr	r3, [r7, #4]
 8025bde:	681b      	ldr	r3, [r3, #0]
 8025be0:	683a      	ldr	r2, [r7, #0]
 8025be2:	430a      	orrs	r2, r1
 8025be4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8025be6:	2300      	movs	r3, #0
 8025be8:	e006      	b.n	8025bf8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8025bea:	687b      	ldr	r3, [r7, #4]
 8025bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025bee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8025bf2:	687b      	ldr	r3, [r7, #4]
 8025bf4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8025bf6:	2301      	movs	r3, #1
  }
}
 8025bf8:	4618      	mov	r0, r3
 8025bfa:	3714      	adds	r7, #20
 8025bfc:	46bd      	mov	sp, r7
 8025bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c02:	4770      	bx	lr

08025c04 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8025c04:	b580      	push	{r7, lr}
 8025c06:	b08a      	sub	sp, #40	; 0x28
 8025c08:	af00      	add	r7, sp, #0
 8025c0a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8025c0c:	2300      	movs	r3, #0
 8025c0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8025c10:	687b      	ldr	r3, [r7, #4]
 8025c12:	681b      	ldr	r3, [r3, #0]
 8025c14:	695b      	ldr	r3, [r3, #20]
 8025c16:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8025c18:	687b      	ldr	r3, [r7, #4]
 8025c1a:	681b      	ldr	r3, [r3, #0]
 8025c1c:	685b      	ldr	r3, [r3, #4]
 8025c1e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8025c20:	687b      	ldr	r3, [r7, #4]
 8025c22:	681b      	ldr	r3, [r3, #0]
 8025c24:	689b      	ldr	r3, [r3, #8]
 8025c26:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8025c28:	687b      	ldr	r3, [r7, #4]
 8025c2a:	681b      	ldr	r3, [r3, #0]
 8025c2c:	68db      	ldr	r3, [r3, #12]
 8025c2e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8025c30:	687b      	ldr	r3, [r7, #4]
 8025c32:	681b      	ldr	r3, [r3, #0]
 8025c34:	691b      	ldr	r3, [r3, #16]
 8025c36:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8025c38:	687b      	ldr	r3, [r7, #4]
 8025c3a:	681b      	ldr	r3, [r3, #0]
 8025c3c:	699b      	ldr	r3, [r3, #24]
 8025c3e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8025c40:	6a3b      	ldr	r3, [r7, #32]
 8025c42:	f003 0301 	and.w	r3, r3, #1
 8025c46:	2b00      	cmp	r3, #0
 8025c48:	d07c      	beq.n	8025d44 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8025c4a:	69bb      	ldr	r3, [r7, #24]
 8025c4c:	f003 0301 	and.w	r3, r3, #1
 8025c50:	2b00      	cmp	r3, #0
 8025c52:	d023      	beq.n	8025c9c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8025c54:	687b      	ldr	r3, [r7, #4]
 8025c56:	681b      	ldr	r3, [r3, #0]
 8025c58:	2201      	movs	r2, #1
 8025c5a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8025c5c:	69bb      	ldr	r3, [r7, #24]
 8025c5e:	f003 0302 	and.w	r3, r3, #2
 8025c62:	2b00      	cmp	r3, #0
 8025c64:	d003      	beq.n	8025c6e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8025c66:	6878      	ldr	r0, [r7, #4]
 8025c68:	f000 f983 	bl	8025f72 <HAL_CAN_TxMailbox0CompleteCallback>
 8025c6c:	e016      	b.n	8025c9c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8025c6e:	69bb      	ldr	r3, [r7, #24]
 8025c70:	f003 0304 	and.w	r3, r3, #4
 8025c74:	2b00      	cmp	r3, #0
 8025c76:	d004      	beq.n	8025c82 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8025c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8025c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8025c80:	e00c      	b.n	8025c9c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8025c82:	69bb      	ldr	r3, [r7, #24]
 8025c84:	f003 0308 	and.w	r3, r3, #8
 8025c88:	2b00      	cmp	r3, #0
 8025c8a:	d004      	beq.n	8025c96 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8025c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8025c92:	627b      	str	r3, [r7, #36]	; 0x24
 8025c94:	e002      	b.n	8025c9c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8025c96:	6878      	ldr	r0, [r7, #4]
 8025c98:	f000 f989 	bl	8025fae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8025c9c:	69bb      	ldr	r3, [r7, #24]
 8025c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025ca2:	2b00      	cmp	r3, #0
 8025ca4:	d024      	beq.n	8025cf0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8025ca6:	687b      	ldr	r3, [r7, #4]
 8025ca8:	681b      	ldr	r3, [r3, #0]
 8025caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8025cae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8025cb0:	69bb      	ldr	r3, [r7, #24]
 8025cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025cb6:	2b00      	cmp	r3, #0
 8025cb8:	d003      	beq.n	8025cc2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8025cba:	6878      	ldr	r0, [r7, #4]
 8025cbc:	f000 f963 	bl	8025f86 <HAL_CAN_TxMailbox1CompleteCallback>
 8025cc0:	e016      	b.n	8025cf0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8025cc2:	69bb      	ldr	r3, [r7, #24]
 8025cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8025cc8:	2b00      	cmp	r3, #0
 8025cca:	d004      	beq.n	8025cd6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8025ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025cce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8025cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8025cd4:	e00c      	b.n	8025cf0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8025cd6:	69bb      	ldr	r3, [r7, #24]
 8025cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8025cdc:	2b00      	cmp	r3, #0
 8025cde:	d004      	beq.n	8025cea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8025ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8025ce8:	e002      	b.n	8025cf0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8025cea:	6878      	ldr	r0, [r7, #4]
 8025cec:	f000 f969 	bl	8025fc2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8025cf0:	69bb      	ldr	r3, [r7, #24]
 8025cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8025cf6:	2b00      	cmp	r3, #0
 8025cf8:	d024      	beq.n	8025d44 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8025cfa:	687b      	ldr	r3, [r7, #4]
 8025cfc:	681b      	ldr	r3, [r3, #0]
 8025cfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8025d02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8025d04:	69bb      	ldr	r3, [r7, #24]
 8025d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025d0a:	2b00      	cmp	r3, #0
 8025d0c:	d003      	beq.n	8025d16 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8025d0e:	6878      	ldr	r0, [r7, #4]
 8025d10:	f000 f943 	bl	8025f9a <HAL_CAN_TxMailbox2CompleteCallback>
 8025d14:	e016      	b.n	8025d44 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8025d16:	69bb      	ldr	r3, [r7, #24]
 8025d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8025d1c:	2b00      	cmp	r3, #0
 8025d1e:	d004      	beq.n	8025d2a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8025d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8025d26:	627b      	str	r3, [r7, #36]	; 0x24
 8025d28:	e00c      	b.n	8025d44 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8025d2a:	69bb      	ldr	r3, [r7, #24]
 8025d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8025d30:	2b00      	cmp	r3, #0
 8025d32:	d004      	beq.n	8025d3e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8025d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8025d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8025d3c:	e002      	b.n	8025d44 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8025d3e:	6878      	ldr	r0, [r7, #4]
 8025d40:	f000 f949 	bl	8025fd6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8025d44:	6a3b      	ldr	r3, [r7, #32]
 8025d46:	f003 0308 	and.w	r3, r3, #8
 8025d4a:	2b00      	cmp	r3, #0
 8025d4c:	d00c      	beq.n	8025d68 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8025d4e:	697b      	ldr	r3, [r7, #20]
 8025d50:	f003 0310 	and.w	r3, r3, #16
 8025d54:	2b00      	cmp	r3, #0
 8025d56:	d007      	beq.n	8025d68 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8025d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8025d5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8025d60:	687b      	ldr	r3, [r7, #4]
 8025d62:	681b      	ldr	r3, [r3, #0]
 8025d64:	2210      	movs	r2, #16
 8025d66:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8025d68:	6a3b      	ldr	r3, [r7, #32]
 8025d6a:	f003 0304 	and.w	r3, r3, #4
 8025d6e:	2b00      	cmp	r3, #0
 8025d70:	d00b      	beq.n	8025d8a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8025d72:	697b      	ldr	r3, [r7, #20]
 8025d74:	f003 0308 	and.w	r3, r3, #8
 8025d78:	2b00      	cmp	r3, #0
 8025d7a:	d006      	beq.n	8025d8a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8025d7c:	687b      	ldr	r3, [r7, #4]
 8025d7e:	681b      	ldr	r3, [r3, #0]
 8025d80:	2208      	movs	r2, #8
 8025d82:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8025d84:	6878      	ldr	r0, [r7, #4]
 8025d86:	f000 f930 	bl	8025fea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8025d8a:	6a3b      	ldr	r3, [r7, #32]
 8025d8c:	f003 0302 	and.w	r3, r3, #2
 8025d90:	2b00      	cmp	r3, #0
 8025d92:	d009      	beq.n	8025da8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8025d94:	687b      	ldr	r3, [r7, #4]
 8025d96:	681b      	ldr	r3, [r3, #0]
 8025d98:	68db      	ldr	r3, [r3, #12]
 8025d9a:	f003 0303 	and.w	r3, r3, #3
 8025d9e:	2b00      	cmp	r3, #0
 8025da0:	d002      	beq.n	8025da8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8025da2:	6878      	ldr	r0, [r7, #4]
 8025da4:	f7ee f82c 	bl	8013e00 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8025da8:	6a3b      	ldr	r3, [r7, #32]
 8025daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025dae:	2b00      	cmp	r3, #0
 8025db0:	d00c      	beq.n	8025dcc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8025db2:	693b      	ldr	r3, [r7, #16]
 8025db4:	f003 0310 	and.w	r3, r3, #16
 8025db8:	2b00      	cmp	r3, #0
 8025dba:	d007      	beq.n	8025dcc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8025dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8025dc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8025dc4:	687b      	ldr	r3, [r7, #4]
 8025dc6:	681b      	ldr	r3, [r3, #0]
 8025dc8:	2210      	movs	r2, #16
 8025dca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8025dcc:	6a3b      	ldr	r3, [r7, #32]
 8025dce:	f003 0320 	and.w	r3, r3, #32
 8025dd2:	2b00      	cmp	r3, #0
 8025dd4:	d00b      	beq.n	8025dee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8025dd6:	693b      	ldr	r3, [r7, #16]
 8025dd8:	f003 0308 	and.w	r3, r3, #8
 8025ddc:	2b00      	cmp	r3, #0
 8025dde:	d006      	beq.n	8025dee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8025de0:	687b      	ldr	r3, [r7, #4]
 8025de2:	681b      	ldr	r3, [r3, #0]
 8025de4:	2208      	movs	r2, #8
 8025de6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8025de8:	6878      	ldr	r0, [r7, #4]
 8025dea:	f000 f908 	bl	8025ffe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8025dee:	6a3b      	ldr	r3, [r7, #32]
 8025df0:	f003 0310 	and.w	r3, r3, #16
 8025df4:	2b00      	cmp	r3, #0
 8025df6:	d009      	beq.n	8025e0c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8025df8:	687b      	ldr	r3, [r7, #4]
 8025dfa:	681b      	ldr	r3, [r3, #0]
 8025dfc:	691b      	ldr	r3, [r3, #16]
 8025dfe:	f003 0303 	and.w	r3, r3, #3
 8025e02:	2b00      	cmp	r3, #0
 8025e04:	d002      	beq.n	8025e0c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8025e06:	6878      	ldr	r0, [r7, #4]
 8025e08:	f7ee f8aa 	bl	8013f60 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8025e0c:	6a3b      	ldr	r3, [r7, #32]
 8025e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025e12:	2b00      	cmp	r3, #0
 8025e14:	d00b      	beq.n	8025e2e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8025e16:	69fb      	ldr	r3, [r7, #28]
 8025e18:	f003 0310 	and.w	r3, r3, #16
 8025e1c:	2b00      	cmp	r3, #0
 8025e1e:	d006      	beq.n	8025e2e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8025e20:	687b      	ldr	r3, [r7, #4]
 8025e22:	681b      	ldr	r3, [r3, #0]
 8025e24:	2210      	movs	r2, #16
 8025e26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8025e28:	6878      	ldr	r0, [r7, #4]
 8025e2a:	f000 f8f2 	bl	8026012 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8025e2e:	6a3b      	ldr	r3, [r7, #32]
 8025e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8025e34:	2b00      	cmp	r3, #0
 8025e36:	d00b      	beq.n	8025e50 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8025e38:	69fb      	ldr	r3, [r7, #28]
 8025e3a:	f003 0308 	and.w	r3, r3, #8
 8025e3e:	2b00      	cmp	r3, #0
 8025e40:	d006      	beq.n	8025e50 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8025e42:	687b      	ldr	r3, [r7, #4]
 8025e44:	681b      	ldr	r3, [r3, #0]
 8025e46:	2208      	movs	r2, #8
 8025e48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8025e4a:	6878      	ldr	r0, [r7, #4]
 8025e4c:	f000 f8eb 	bl	8026026 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8025e50:	6a3b      	ldr	r3, [r7, #32]
 8025e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8025e56:	2b00      	cmp	r3, #0
 8025e58:	d07b      	beq.n	8025f52 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8025e5a:	69fb      	ldr	r3, [r7, #28]
 8025e5c:	f003 0304 	and.w	r3, r3, #4
 8025e60:	2b00      	cmp	r3, #0
 8025e62:	d072      	beq.n	8025f4a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8025e64:	6a3b      	ldr	r3, [r7, #32]
 8025e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025e6a:	2b00      	cmp	r3, #0
 8025e6c:	d008      	beq.n	8025e80 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8025e6e:	68fb      	ldr	r3, [r7, #12]
 8025e70:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8025e74:	2b00      	cmp	r3, #0
 8025e76:	d003      	beq.n	8025e80 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8025e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e7a:	f043 0301 	orr.w	r3, r3, #1
 8025e7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8025e80:	6a3b      	ldr	r3, [r7, #32]
 8025e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025e86:	2b00      	cmp	r3, #0
 8025e88:	d008      	beq.n	8025e9c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8025e8a:	68fb      	ldr	r3, [r7, #12]
 8025e8c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8025e90:	2b00      	cmp	r3, #0
 8025e92:	d003      	beq.n	8025e9c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8025e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e96:	f043 0302 	orr.w	r3, r3, #2
 8025e9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8025e9c:	6a3b      	ldr	r3, [r7, #32]
 8025e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8025ea2:	2b00      	cmp	r3, #0
 8025ea4:	d008      	beq.n	8025eb8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8025ea6:	68fb      	ldr	r3, [r7, #12]
 8025ea8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8025eac:	2b00      	cmp	r3, #0
 8025eae:	d003      	beq.n	8025eb8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8025eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025eb2:	f043 0304 	orr.w	r3, r3, #4
 8025eb6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8025eb8:	6a3b      	ldr	r3, [r7, #32]
 8025eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8025ebe:	2b00      	cmp	r3, #0
 8025ec0:	d043      	beq.n	8025f4a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8025ec2:	68fb      	ldr	r3, [r7, #12]
 8025ec4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8025ec8:	2b00      	cmp	r3, #0
 8025eca:	d03e      	beq.n	8025f4a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8025ecc:	68fb      	ldr	r3, [r7, #12]
 8025ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8025ed2:	2b60      	cmp	r3, #96	; 0x60
 8025ed4:	d02b      	beq.n	8025f2e <HAL_CAN_IRQHandler+0x32a>
 8025ed6:	2b60      	cmp	r3, #96	; 0x60
 8025ed8:	d82e      	bhi.n	8025f38 <HAL_CAN_IRQHandler+0x334>
 8025eda:	2b50      	cmp	r3, #80	; 0x50
 8025edc:	d022      	beq.n	8025f24 <HAL_CAN_IRQHandler+0x320>
 8025ede:	2b50      	cmp	r3, #80	; 0x50
 8025ee0:	d82a      	bhi.n	8025f38 <HAL_CAN_IRQHandler+0x334>
 8025ee2:	2b40      	cmp	r3, #64	; 0x40
 8025ee4:	d019      	beq.n	8025f1a <HAL_CAN_IRQHandler+0x316>
 8025ee6:	2b40      	cmp	r3, #64	; 0x40
 8025ee8:	d826      	bhi.n	8025f38 <HAL_CAN_IRQHandler+0x334>
 8025eea:	2b30      	cmp	r3, #48	; 0x30
 8025eec:	d010      	beq.n	8025f10 <HAL_CAN_IRQHandler+0x30c>
 8025eee:	2b30      	cmp	r3, #48	; 0x30
 8025ef0:	d822      	bhi.n	8025f38 <HAL_CAN_IRQHandler+0x334>
 8025ef2:	2b10      	cmp	r3, #16
 8025ef4:	d002      	beq.n	8025efc <HAL_CAN_IRQHandler+0x2f8>
 8025ef6:	2b20      	cmp	r3, #32
 8025ef8:	d005      	beq.n	8025f06 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8025efa:	e01d      	b.n	8025f38 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8025efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025efe:	f043 0308 	orr.w	r3, r3, #8
 8025f02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8025f04:	e019      	b.n	8025f3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8025f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f08:	f043 0310 	orr.w	r3, r3, #16
 8025f0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8025f0e:	e014      	b.n	8025f3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8025f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f12:	f043 0320 	orr.w	r3, r3, #32
 8025f16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8025f18:	e00f      	b.n	8025f3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8025f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025f20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8025f22:	e00a      	b.n	8025f3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8025f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025f2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8025f2c:	e005      	b.n	8025f3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8025f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8025f34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8025f36:	e000      	b.n	8025f3a <HAL_CAN_IRQHandler+0x336>
            break;
 8025f38:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8025f3a:	687b      	ldr	r3, [r7, #4]
 8025f3c:	681b      	ldr	r3, [r3, #0]
 8025f3e:	699a      	ldr	r2, [r3, #24]
 8025f40:	687b      	ldr	r3, [r7, #4]
 8025f42:	681b      	ldr	r3, [r3, #0]
 8025f44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8025f48:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8025f4a:	687b      	ldr	r3, [r7, #4]
 8025f4c:	681b      	ldr	r3, [r3, #0]
 8025f4e:	2204      	movs	r2, #4
 8025f50:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8025f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f54:	2b00      	cmp	r3, #0
 8025f56:	d008      	beq.n	8025f6a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8025f58:	687b      	ldr	r3, [r7, #4]
 8025f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f5e:	431a      	orrs	r2, r3
 8025f60:	687b      	ldr	r3, [r7, #4]
 8025f62:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8025f64:	6878      	ldr	r0, [r7, #4]
 8025f66:	f000 f868 	bl	802603a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8025f6a:	bf00      	nop
 8025f6c:	3728      	adds	r7, #40	; 0x28
 8025f6e:	46bd      	mov	sp, r7
 8025f70:	bd80      	pop	{r7, pc}

08025f72 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8025f72:	b480      	push	{r7}
 8025f74:	b083      	sub	sp, #12
 8025f76:	af00      	add	r7, sp, #0
 8025f78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8025f7a:	bf00      	nop
 8025f7c:	370c      	adds	r7, #12
 8025f7e:	46bd      	mov	sp, r7
 8025f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f84:	4770      	bx	lr

08025f86 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8025f86:	b480      	push	{r7}
 8025f88:	b083      	sub	sp, #12
 8025f8a:	af00      	add	r7, sp, #0
 8025f8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8025f8e:	bf00      	nop
 8025f90:	370c      	adds	r7, #12
 8025f92:	46bd      	mov	sp, r7
 8025f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f98:	4770      	bx	lr

08025f9a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8025f9a:	b480      	push	{r7}
 8025f9c:	b083      	sub	sp, #12
 8025f9e:	af00      	add	r7, sp, #0
 8025fa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8025fa2:	bf00      	nop
 8025fa4:	370c      	adds	r7, #12
 8025fa6:	46bd      	mov	sp, r7
 8025fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fac:	4770      	bx	lr

08025fae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8025fae:	b480      	push	{r7}
 8025fb0:	b083      	sub	sp, #12
 8025fb2:	af00      	add	r7, sp, #0
 8025fb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8025fb6:	bf00      	nop
 8025fb8:	370c      	adds	r7, #12
 8025fba:	46bd      	mov	sp, r7
 8025fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fc0:	4770      	bx	lr

08025fc2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8025fc2:	b480      	push	{r7}
 8025fc4:	b083      	sub	sp, #12
 8025fc6:	af00      	add	r7, sp, #0
 8025fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8025fca:	bf00      	nop
 8025fcc:	370c      	adds	r7, #12
 8025fce:	46bd      	mov	sp, r7
 8025fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fd4:	4770      	bx	lr

08025fd6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8025fd6:	b480      	push	{r7}
 8025fd8:	b083      	sub	sp, #12
 8025fda:	af00      	add	r7, sp, #0
 8025fdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8025fde:	bf00      	nop
 8025fe0:	370c      	adds	r7, #12
 8025fe2:	46bd      	mov	sp, r7
 8025fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fe8:	4770      	bx	lr

08025fea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8025fea:	b480      	push	{r7}
 8025fec:	b083      	sub	sp, #12
 8025fee:	af00      	add	r7, sp, #0
 8025ff0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8025ff2:	bf00      	nop
 8025ff4:	370c      	adds	r7, #12
 8025ff6:	46bd      	mov	sp, r7
 8025ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ffc:	4770      	bx	lr

08025ffe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8025ffe:	b480      	push	{r7}
 8026000:	b083      	sub	sp, #12
 8026002:	af00      	add	r7, sp, #0
 8026004:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8026006:	bf00      	nop
 8026008:	370c      	adds	r7, #12
 802600a:	46bd      	mov	sp, r7
 802600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026010:	4770      	bx	lr

08026012 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8026012:	b480      	push	{r7}
 8026014:	b083      	sub	sp, #12
 8026016:	af00      	add	r7, sp, #0
 8026018:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 802601a:	bf00      	nop
 802601c:	370c      	adds	r7, #12
 802601e:	46bd      	mov	sp, r7
 8026020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026024:	4770      	bx	lr

08026026 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8026026:	b480      	push	{r7}
 8026028:	b083      	sub	sp, #12
 802602a:	af00      	add	r7, sp, #0
 802602c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 802602e:	bf00      	nop
 8026030:	370c      	adds	r7, #12
 8026032:	46bd      	mov	sp, r7
 8026034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026038:	4770      	bx	lr

0802603a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 802603a:	b480      	push	{r7}
 802603c:	b083      	sub	sp, #12
 802603e:	af00      	add	r7, sp, #0
 8026040:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8026042:	bf00      	nop
 8026044:	370c      	adds	r7, #12
 8026046:	46bd      	mov	sp, r7
 8026048:	f85d 7b04 	ldr.w	r7, [sp], #4
 802604c:	4770      	bx	lr
	...

08026050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026050:	b480      	push	{r7}
 8026052:	b085      	sub	sp, #20
 8026054:	af00      	add	r7, sp, #0
 8026056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8026058:	687b      	ldr	r3, [r7, #4]
 802605a:	f003 0307 	and.w	r3, r3, #7
 802605e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8026060:	4b0c      	ldr	r3, [pc, #48]	; (8026094 <__NVIC_SetPriorityGrouping+0x44>)
 8026062:	68db      	ldr	r3, [r3, #12]
 8026064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8026066:	68ba      	ldr	r2, [r7, #8]
 8026068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802606c:	4013      	ands	r3, r2
 802606e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8026070:	68fb      	ldr	r3, [r7, #12]
 8026072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8026074:	68bb      	ldr	r3, [r7, #8]
 8026076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8026078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 802607c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8026080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8026082:	4a04      	ldr	r2, [pc, #16]	; (8026094 <__NVIC_SetPriorityGrouping+0x44>)
 8026084:	68bb      	ldr	r3, [r7, #8]
 8026086:	60d3      	str	r3, [r2, #12]
}
 8026088:	bf00      	nop
 802608a:	3714      	adds	r7, #20
 802608c:	46bd      	mov	sp, r7
 802608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026092:	4770      	bx	lr
 8026094:	e000ed00 	.word	0xe000ed00

08026098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8026098:	b480      	push	{r7}
 802609a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802609c:	4b04      	ldr	r3, [pc, #16]	; (80260b0 <__NVIC_GetPriorityGrouping+0x18>)
 802609e:	68db      	ldr	r3, [r3, #12]
 80260a0:	0a1b      	lsrs	r3, r3, #8
 80260a2:	f003 0307 	and.w	r3, r3, #7
}
 80260a6:	4618      	mov	r0, r3
 80260a8:	46bd      	mov	sp, r7
 80260aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80260ae:	4770      	bx	lr
 80260b0:	e000ed00 	.word	0xe000ed00

080260b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80260b4:	b480      	push	{r7}
 80260b6:	b083      	sub	sp, #12
 80260b8:	af00      	add	r7, sp, #0
 80260ba:	4603      	mov	r3, r0
 80260bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80260be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80260c2:	2b00      	cmp	r3, #0
 80260c4:	db0b      	blt.n	80260de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80260c6:	79fb      	ldrb	r3, [r7, #7]
 80260c8:	f003 021f 	and.w	r2, r3, #31
 80260cc:	4907      	ldr	r1, [pc, #28]	; (80260ec <__NVIC_EnableIRQ+0x38>)
 80260ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80260d2:	095b      	lsrs	r3, r3, #5
 80260d4:	2001      	movs	r0, #1
 80260d6:	fa00 f202 	lsl.w	r2, r0, r2
 80260da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80260de:	bf00      	nop
 80260e0:	370c      	adds	r7, #12
 80260e2:	46bd      	mov	sp, r7
 80260e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80260e8:	4770      	bx	lr
 80260ea:	bf00      	nop
 80260ec:	e000e100 	.word	0xe000e100

080260f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80260f0:	b480      	push	{r7}
 80260f2:	b083      	sub	sp, #12
 80260f4:	af00      	add	r7, sp, #0
 80260f6:	4603      	mov	r3, r0
 80260f8:	6039      	str	r1, [r7, #0]
 80260fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80260fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026100:	2b00      	cmp	r3, #0
 8026102:	db0a      	blt.n	802611a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026104:	683b      	ldr	r3, [r7, #0]
 8026106:	b2da      	uxtb	r2, r3
 8026108:	490c      	ldr	r1, [pc, #48]	; (802613c <__NVIC_SetPriority+0x4c>)
 802610a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802610e:	0112      	lsls	r2, r2, #4
 8026110:	b2d2      	uxtb	r2, r2
 8026112:	440b      	add	r3, r1
 8026114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8026118:	e00a      	b.n	8026130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802611a:	683b      	ldr	r3, [r7, #0]
 802611c:	b2da      	uxtb	r2, r3
 802611e:	4908      	ldr	r1, [pc, #32]	; (8026140 <__NVIC_SetPriority+0x50>)
 8026120:	79fb      	ldrb	r3, [r7, #7]
 8026122:	f003 030f 	and.w	r3, r3, #15
 8026126:	3b04      	subs	r3, #4
 8026128:	0112      	lsls	r2, r2, #4
 802612a:	b2d2      	uxtb	r2, r2
 802612c:	440b      	add	r3, r1
 802612e:	761a      	strb	r2, [r3, #24]
}
 8026130:	bf00      	nop
 8026132:	370c      	adds	r7, #12
 8026134:	46bd      	mov	sp, r7
 8026136:	f85d 7b04 	ldr.w	r7, [sp], #4
 802613a:	4770      	bx	lr
 802613c:	e000e100 	.word	0xe000e100
 8026140:	e000ed00 	.word	0xe000ed00

08026144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8026144:	b480      	push	{r7}
 8026146:	b089      	sub	sp, #36	; 0x24
 8026148:	af00      	add	r7, sp, #0
 802614a:	60f8      	str	r0, [r7, #12]
 802614c:	60b9      	str	r1, [r7, #8]
 802614e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8026150:	68fb      	ldr	r3, [r7, #12]
 8026152:	f003 0307 	and.w	r3, r3, #7
 8026156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8026158:	69fb      	ldr	r3, [r7, #28]
 802615a:	f1c3 0307 	rsb	r3, r3, #7
 802615e:	2b04      	cmp	r3, #4
 8026160:	bf28      	it	cs
 8026162:	2304      	movcs	r3, #4
 8026164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8026166:	69fb      	ldr	r3, [r7, #28]
 8026168:	3304      	adds	r3, #4
 802616a:	2b06      	cmp	r3, #6
 802616c:	d902      	bls.n	8026174 <NVIC_EncodePriority+0x30>
 802616e:	69fb      	ldr	r3, [r7, #28]
 8026170:	3b03      	subs	r3, #3
 8026172:	e000      	b.n	8026176 <NVIC_EncodePriority+0x32>
 8026174:	2300      	movs	r3, #0
 8026176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026178:	f04f 32ff 	mov.w	r2, #4294967295
 802617c:	69bb      	ldr	r3, [r7, #24]
 802617e:	fa02 f303 	lsl.w	r3, r2, r3
 8026182:	43da      	mvns	r2, r3
 8026184:	68bb      	ldr	r3, [r7, #8]
 8026186:	401a      	ands	r2, r3
 8026188:	697b      	ldr	r3, [r7, #20]
 802618a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802618c:	f04f 31ff 	mov.w	r1, #4294967295
 8026190:	697b      	ldr	r3, [r7, #20]
 8026192:	fa01 f303 	lsl.w	r3, r1, r3
 8026196:	43d9      	mvns	r1, r3
 8026198:	687b      	ldr	r3, [r7, #4]
 802619a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802619c:	4313      	orrs	r3, r2
         );
}
 802619e:	4618      	mov	r0, r3
 80261a0:	3724      	adds	r7, #36	; 0x24
 80261a2:	46bd      	mov	sp, r7
 80261a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261a8:	4770      	bx	lr

080261aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80261aa:	b580      	push	{r7, lr}
 80261ac:	b082      	sub	sp, #8
 80261ae:	af00      	add	r7, sp, #0
 80261b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80261b2:	6878      	ldr	r0, [r7, #4]
 80261b4:	f7ff ff4c 	bl	8026050 <__NVIC_SetPriorityGrouping>
}
 80261b8:	bf00      	nop
 80261ba:	3708      	adds	r7, #8
 80261bc:	46bd      	mov	sp, r7
 80261be:	bd80      	pop	{r7, pc}

080261c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80261c0:	b580      	push	{r7, lr}
 80261c2:	b086      	sub	sp, #24
 80261c4:	af00      	add	r7, sp, #0
 80261c6:	4603      	mov	r3, r0
 80261c8:	60b9      	str	r1, [r7, #8]
 80261ca:	607a      	str	r2, [r7, #4]
 80261cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80261ce:	2300      	movs	r3, #0
 80261d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80261d2:	f7ff ff61 	bl	8026098 <__NVIC_GetPriorityGrouping>
 80261d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80261d8:	687a      	ldr	r2, [r7, #4]
 80261da:	68b9      	ldr	r1, [r7, #8]
 80261dc:	6978      	ldr	r0, [r7, #20]
 80261de:	f7ff ffb1 	bl	8026144 <NVIC_EncodePriority>
 80261e2:	4602      	mov	r2, r0
 80261e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80261e8:	4611      	mov	r1, r2
 80261ea:	4618      	mov	r0, r3
 80261ec:	f7ff ff80 	bl	80260f0 <__NVIC_SetPriority>
}
 80261f0:	bf00      	nop
 80261f2:	3718      	adds	r7, #24
 80261f4:	46bd      	mov	sp, r7
 80261f6:	bd80      	pop	{r7, pc}

080261f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80261f8:	b580      	push	{r7, lr}
 80261fa:	b082      	sub	sp, #8
 80261fc:	af00      	add	r7, sp, #0
 80261fe:	4603      	mov	r3, r0
 8026200:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8026202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026206:	4618      	mov	r0, r3
 8026208:	f7ff ff54 	bl	80260b4 <__NVIC_EnableIRQ>
}
 802620c:	bf00      	nop
 802620e:	3708      	adds	r7, #8
 8026210:	46bd      	mov	sp, r7
 8026212:	bd80      	pop	{r7, pc}

08026214 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8026214:	b580      	push	{r7, lr}
 8026216:	b086      	sub	sp, #24
 8026218:	af00      	add	r7, sp, #0
 802621a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 802621c:	2300      	movs	r3, #0
 802621e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8026220:	f7fe fac4 	bl	80247ac <HAL_GetTick>
 8026224:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8026226:	687b      	ldr	r3, [r7, #4]
 8026228:	2b00      	cmp	r3, #0
 802622a:	d101      	bne.n	8026230 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 802622c:	2301      	movs	r3, #1
 802622e:	e099      	b.n	8026364 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8026230:	687b      	ldr	r3, [r7, #4]
 8026232:	2202      	movs	r2, #2
 8026234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8026238:	687b      	ldr	r3, [r7, #4]
 802623a:	2200      	movs	r2, #0
 802623c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8026240:	687b      	ldr	r3, [r7, #4]
 8026242:	681b      	ldr	r3, [r3, #0]
 8026244:	681a      	ldr	r2, [r3, #0]
 8026246:	687b      	ldr	r3, [r7, #4]
 8026248:	681b      	ldr	r3, [r3, #0]
 802624a:	f022 0201 	bic.w	r2, r2, #1
 802624e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026250:	e00f      	b.n	8026272 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8026252:	f7fe faab 	bl	80247ac <HAL_GetTick>
 8026256:	4602      	mov	r2, r0
 8026258:	693b      	ldr	r3, [r7, #16]
 802625a:	1ad3      	subs	r3, r2, r3
 802625c:	2b05      	cmp	r3, #5
 802625e:	d908      	bls.n	8026272 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8026260:	687b      	ldr	r3, [r7, #4]
 8026262:	2220      	movs	r2, #32
 8026264:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8026266:	687b      	ldr	r3, [r7, #4]
 8026268:	2203      	movs	r2, #3
 802626a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 802626e:	2303      	movs	r3, #3
 8026270:	e078      	b.n	8026364 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026272:	687b      	ldr	r3, [r7, #4]
 8026274:	681b      	ldr	r3, [r3, #0]
 8026276:	681b      	ldr	r3, [r3, #0]
 8026278:	f003 0301 	and.w	r3, r3, #1
 802627c:	2b00      	cmp	r3, #0
 802627e:	d1e8      	bne.n	8026252 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8026280:	687b      	ldr	r3, [r7, #4]
 8026282:	681b      	ldr	r3, [r3, #0]
 8026284:	681b      	ldr	r3, [r3, #0]
 8026286:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8026288:	697a      	ldr	r2, [r7, #20]
 802628a:	4b38      	ldr	r3, [pc, #224]	; (802636c <HAL_DMA_Init+0x158>)
 802628c:	4013      	ands	r3, r2
 802628e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026290:	687b      	ldr	r3, [r7, #4]
 8026292:	685a      	ldr	r2, [r3, #4]
 8026294:	687b      	ldr	r3, [r7, #4]
 8026296:	689b      	ldr	r3, [r3, #8]
 8026298:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802629a:	687b      	ldr	r3, [r7, #4]
 802629c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802629e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80262a0:	687b      	ldr	r3, [r7, #4]
 80262a2:	691b      	ldr	r3, [r3, #16]
 80262a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80262a6:	687b      	ldr	r3, [r7, #4]
 80262a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80262aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80262ac:	687b      	ldr	r3, [r7, #4]
 80262ae:	699b      	ldr	r3, [r3, #24]
 80262b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80262b2:	687b      	ldr	r3, [r7, #4]
 80262b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80262b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80262b8:	687b      	ldr	r3, [r7, #4]
 80262ba:	6a1b      	ldr	r3, [r3, #32]
 80262bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80262be:	697a      	ldr	r2, [r7, #20]
 80262c0:	4313      	orrs	r3, r2
 80262c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80262c4:	687b      	ldr	r3, [r7, #4]
 80262c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80262c8:	2b04      	cmp	r3, #4
 80262ca:	d107      	bne.n	80262dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80262cc:	687b      	ldr	r3, [r7, #4]
 80262ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80262d0:	687b      	ldr	r3, [r7, #4]
 80262d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80262d4:	4313      	orrs	r3, r2
 80262d6:	697a      	ldr	r2, [r7, #20]
 80262d8:	4313      	orrs	r3, r2
 80262da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80262dc:	687b      	ldr	r3, [r7, #4]
 80262de:	681b      	ldr	r3, [r3, #0]
 80262e0:	697a      	ldr	r2, [r7, #20]
 80262e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80262e4:	687b      	ldr	r3, [r7, #4]
 80262e6:	681b      	ldr	r3, [r3, #0]
 80262e8:	695b      	ldr	r3, [r3, #20]
 80262ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80262ec:	697b      	ldr	r3, [r7, #20]
 80262ee:	f023 0307 	bic.w	r3, r3, #7
 80262f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80262f4:	687b      	ldr	r3, [r7, #4]
 80262f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80262f8:	697a      	ldr	r2, [r7, #20]
 80262fa:	4313      	orrs	r3, r2
 80262fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80262fe:	687b      	ldr	r3, [r7, #4]
 8026300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026302:	2b04      	cmp	r3, #4
 8026304:	d117      	bne.n	8026336 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8026306:	687b      	ldr	r3, [r7, #4]
 8026308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802630a:	697a      	ldr	r2, [r7, #20]
 802630c:	4313      	orrs	r3, r2
 802630e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8026310:	687b      	ldr	r3, [r7, #4]
 8026312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026314:	2b00      	cmp	r3, #0
 8026316:	d00e      	beq.n	8026336 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8026318:	6878      	ldr	r0, [r7, #4]
 802631a:	f000 fa6f 	bl	80267fc <DMA_CheckFifoParam>
 802631e:	4603      	mov	r3, r0
 8026320:	2b00      	cmp	r3, #0
 8026322:	d008      	beq.n	8026336 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8026324:	687b      	ldr	r3, [r7, #4]
 8026326:	2240      	movs	r2, #64	; 0x40
 8026328:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802632a:	687b      	ldr	r3, [r7, #4]
 802632c:	2201      	movs	r2, #1
 802632e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8026332:	2301      	movs	r3, #1
 8026334:	e016      	b.n	8026364 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8026336:	687b      	ldr	r3, [r7, #4]
 8026338:	681b      	ldr	r3, [r3, #0]
 802633a:	697a      	ldr	r2, [r7, #20]
 802633c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802633e:	6878      	ldr	r0, [r7, #4]
 8026340:	f000 fa26 	bl	8026790 <DMA_CalcBaseAndBitshift>
 8026344:	4603      	mov	r3, r0
 8026346:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026348:	687b      	ldr	r3, [r7, #4]
 802634a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802634c:	223f      	movs	r2, #63	; 0x3f
 802634e:	409a      	lsls	r2, r3
 8026350:	68fb      	ldr	r3, [r7, #12]
 8026352:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8026354:	687b      	ldr	r3, [r7, #4]
 8026356:	2200      	movs	r2, #0
 8026358:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802635a:	687b      	ldr	r3, [r7, #4]
 802635c:	2201      	movs	r2, #1
 802635e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8026362:	2300      	movs	r3, #0
}
 8026364:	4618      	mov	r0, r3
 8026366:	3718      	adds	r7, #24
 8026368:	46bd      	mov	sp, r7
 802636a:	bd80      	pop	{r7, pc}
 802636c:	f010803f 	.word	0xf010803f

08026370 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8026370:	b580      	push	{r7, lr}
 8026372:	b086      	sub	sp, #24
 8026374:	af00      	add	r7, sp, #0
 8026376:	60f8      	str	r0, [r7, #12]
 8026378:	60b9      	str	r1, [r7, #8]
 802637a:	607a      	str	r2, [r7, #4]
 802637c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802637e:	2300      	movs	r3, #0
 8026380:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8026382:	68fb      	ldr	r3, [r7, #12]
 8026384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8026386:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8026388:	68fb      	ldr	r3, [r7, #12]
 802638a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802638e:	2b01      	cmp	r3, #1
 8026390:	d101      	bne.n	8026396 <HAL_DMA_Start_IT+0x26>
 8026392:	2302      	movs	r3, #2
 8026394:	e040      	b.n	8026418 <HAL_DMA_Start_IT+0xa8>
 8026396:	68fb      	ldr	r3, [r7, #12]
 8026398:	2201      	movs	r2, #1
 802639a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 802639e:	68fb      	ldr	r3, [r7, #12]
 80263a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80263a4:	b2db      	uxtb	r3, r3
 80263a6:	2b01      	cmp	r3, #1
 80263a8:	d12f      	bne.n	802640a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80263aa:	68fb      	ldr	r3, [r7, #12]
 80263ac:	2202      	movs	r2, #2
 80263ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80263b2:	68fb      	ldr	r3, [r7, #12]
 80263b4:	2200      	movs	r2, #0
 80263b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80263b8:	683b      	ldr	r3, [r7, #0]
 80263ba:	687a      	ldr	r2, [r7, #4]
 80263bc:	68b9      	ldr	r1, [r7, #8]
 80263be:	68f8      	ldr	r0, [r7, #12]
 80263c0:	f000 f9b8 	bl	8026734 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80263c4:	68fb      	ldr	r3, [r7, #12]
 80263c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80263c8:	223f      	movs	r2, #63	; 0x3f
 80263ca:	409a      	lsls	r2, r3
 80263cc:	693b      	ldr	r3, [r7, #16]
 80263ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80263d0:	68fb      	ldr	r3, [r7, #12]
 80263d2:	681b      	ldr	r3, [r3, #0]
 80263d4:	681a      	ldr	r2, [r3, #0]
 80263d6:	68fb      	ldr	r3, [r7, #12]
 80263d8:	681b      	ldr	r3, [r3, #0]
 80263da:	f042 0216 	orr.w	r2, r2, #22
 80263de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80263e0:	68fb      	ldr	r3, [r7, #12]
 80263e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80263e4:	2b00      	cmp	r3, #0
 80263e6:	d007      	beq.n	80263f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80263e8:	68fb      	ldr	r3, [r7, #12]
 80263ea:	681b      	ldr	r3, [r3, #0]
 80263ec:	681a      	ldr	r2, [r3, #0]
 80263ee:	68fb      	ldr	r3, [r7, #12]
 80263f0:	681b      	ldr	r3, [r3, #0]
 80263f2:	f042 0208 	orr.w	r2, r2, #8
 80263f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80263f8:	68fb      	ldr	r3, [r7, #12]
 80263fa:	681b      	ldr	r3, [r3, #0]
 80263fc:	681a      	ldr	r2, [r3, #0]
 80263fe:	68fb      	ldr	r3, [r7, #12]
 8026400:	681b      	ldr	r3, [r3, #0]
 8026402:	f042 0201 	orr.w	r2, r2, #1
 8026406:	601a      	str	r2, [r3, #0]
 8026408:	e005      	b.n	8026416 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 802640a:	68fb      	ldr	r3, [r7, #12]
 802640c:	2200      	movs	r2, #0
 802640e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8026412:	2302      	movs	r3, #2
 8026414:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8026416:	7dfb      	ldrb	r3, [r7, #23]
}
 8026418:	4618      	mov	r0, r3
 802641a:	3718      	adds	r7, #24
 802641c:	46bd      	mov	sp, r7
 802641e:	bd80      	pop	{r7, pc}

08026420 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8026420:	b580      	push	{r7, lr}
 8026422:	b086      	sub	sp, #24
 8026424:	af00      	add	r7, sp, #0
 8026426:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8026428:	2300      	movs	r3, #0
 802642a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 802642c:	4b92      	ldr	r3, [pc, #584]	; (8026678 <HAL_DMA_IRQHandler+0x258>)
 802642e:	681b      	ldr	r3, [r3, #0]
 8026430:	4a92      	ldr	r2, [pc, #584]	; (802667c <HAL_DMA_IRQHandler+0x25c>)
 8026432:	fba2 2303 	umull	r2, r3, r2, r3
 8026436:	0a9b      	lsrs	r3, r3, #10
 8026438:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802643a:	687b      	ldr	r3, [r7, #4]
 802643c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802643e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8026440:	693b      	ldr	r3, [r7, #16]
 8026442:	681b      	ldr	r3, [r3, #0]
 8026444:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8026446:	687b      	ldr	r3, [r7, #4]
 8026448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802644a:	2208      	movs	r2, #8
 802644c:	409a      	lsls	r2, r3
 802644e:	68fb      	ldr	r3, [r7, #12]
 8026450:	4013      	ands	r3, r2
 8026452:	2b00      	cmp	r3, #0
 8026454:	d01a      	beq.n	802648c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8026456:	687b      	ldr	r3, [r7, #4]
 8026458:	681b      	ldr	r3, [r3, #0]
 802645a:	681b      	ldr	r3, [r3, #0]
 802645c:	f003 0304 	and.w	r3, r3, #4
 8026460:	2b00      	cmp	r3, #0
 8026462:	d013      	beq.n	802648c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8026464:	687b      	ldr	r3, [r7, #4]
 8026466:	681b      	ldr	r3, [r3, #0]
 8026468:	681a      	ldr	r2, [r3, #0]
 802646a:	687b      	ldr	r3, [r7, #4]
 802646c:	681b      	ldr	r3, [r3, #0]
 802646e:	f022 0204 	bic.w	r2, r2, #4
 8026472:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8026474:	687b      	ldr	r3, [r7, #4]
 8026476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026478:	2208      	movs	r2, #8
 802647a:	409a      	lsls	r2, r3
 802647c:	693b      	ldr	r3, [r7, #16]
 802647e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8026480:	687b      	ldr	r3, [r7, #4]
 8026482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026484:	f043 0201 	orr.w	r2, r3, #1
 8026488:	687b      	ldr	r3, [r7, #4]
 802648a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 802648c:	687b      	ldr	r3, [r7, #4]
 802648e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026490:	2201      	movs	r2, #1
 8026492:	409a      	lsls	r2, r3
 8026494:	68fb      	ldr	r3, [r7, #12]
 8026496:	4013      	ands	r3, r2
 8026498:	2b00      	cmp	r3, #0
 802649a:	d012      	beq.n	80264c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 802649c:	687b      	ldr	r3, [r7, #4]
 802649e:	681b      	ldr	r3, [r3, #0]
 80264a0:	695b      	ldr	r3, [r3, #20]
 80264a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80264a6:	2b00      	cmp	r3, #0
 80264a8:	d00b      	beq.n	80264c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80264aa:	687b      	ldr	r3, [r7, #4]
 80264ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80264ae:	2201      	movs	r2, #1
 80264b0:	409a      	lsls	r2, r3
 80264b2:	693b      	ldr	r3, [r7, #16]
 80264b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80264b6:	687b      	ldr	r3, [r7, #4]
 80264b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80264ba:	f043 0202 	orr.w	r2, r3, #2
 80264be:	687b      	ldr	r3, [r7, #4]
 80264c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80264c2:	687b      	ldr	r3, [r7, #4]
 80264c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80264c6:	2204      	movs	r2, #4
 80264c8:	409a      	lsls	r2, r3
 80264ca:	68fb      	ldr	r3, [r7, #12]
 80264cc:	4013      	ands	r3, r2
 80264ce:	2b00      	cmp	r3, #0
 80264d0:	d012      	beq.n	80264f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80264d2:	687b      	ldr	r3, [r7, #4]
 80264d4:	681b      	ldr	r3, [r3, #0]
 80264d6:	681b      	ldr	r3, [r3, #0]
 80264d8:	f003 0302 	and.w	r3, r3, #2
 80264dc:	2b00      	cmp	r3, #0
 80264de:	d00b      	beq.n	80264f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80264e0:	687b      	ldr	r3, [r7, #4]
 80264e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80264e4:	2204      	movs	r2, #4
 80264e6:	409a      	lsls	r2, r3
 80264e8:	693b      	ldr	r3, [r7, #16]
 80264ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80264ec:	687b      	ldr	r3, [r7, #4]
 80264ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80264f0:	f043 0204 	orr.w	r2, r3, #4
 80264f4:	687b      	ldr	r3, [r7, #4]
 80264f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80264f8:	687b      	ldr	r3, [r7, #4]
 80264fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80264fc:	2210      	movs	r2, #16
 80264fe:	409a      	lsls	r2, r3
 8026500:	68fb      	ldr	r3, [r7, #12]
 8026502:	4013      	ands	r3, r2
 8026504:	2b00      	cmp	r3, #0
 8026506:	d043      	beq.n	8026590 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8026508:	687b      	ldr	r3, [r7, #4]
 802650a:	681b      	ldr	r3, [r3, #0]
 802650c:	681b      	ldr	r3, [r3, #0]
 802650e:	f003 0308 	and.w	r3, r3, #8
 8026512:	2b00      	cmp	r3, #0
 8026514:	d03c      	beq.n	8026590 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8026516:	687b      	ldr	r3, [r7, #4]
 8026518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802651a:	2210      	movs	r2, #16
 802651c:	409a      	lsls	r2, r3
 802651e:	693b      	ldr	r3, [r7, #16]
 8026520:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8026522:	687b      	ldr	r3, [r7, #4]
 8026524:	681b      	ldr	r3, [r3, #0]
 8026526:	681b      	ldr	r3, [r3, #0]
 8026528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802652c:	2b00      	cmp	r3, #0
 802652e:	d018      	beq.n	8026562 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8026530:	687b      	ldr	r3, [r7, #4]
 8026532:	681b      	ldr	r3, [r3, #0]
 8026534:	681b      	ldr	r3, [r3, #0]
 8026536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802653a:	2b00      	cmp	r3, #0
 802653c:	d108      	bne.n	8026550 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802653e:	687b      	ldr	r3, [r7, #4]
 8026540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026542:	2b00      	cmp	r3, #0
 8026544:	d024      	beq.n	8026590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8026546:	687b      	ldr	r3, [r7, #4]
 8026548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802654a:	6878      	ldr	r0, [r7, #4]
 802654c:	4798      	blx	r3
 802654e:	e01f      	b.n	8026590 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8026550:	687b      	ldr	r3, [r7, #4]
 8026552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026554:	2b00      	cmp	r3, #0
 8026556:	d01b      	beq.n	8026590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8026558:	687b      	ldr	r3, [r7, #4]
 802655a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802655c:	6878      	ldr	r0, [r7, #4]
 802655e:	4798      	blx	r3
 8026560:	e016      	b.n	8026590 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8026562:	687b      	ldr	r3, [r7, #4]
 8026564:	681b      	ldr	r3, [r3, #0]
 8026566:	681b      	ldr	r3, [r3, #0]
 8026568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802656c:	2b00      	cmp	r3, #0
 802656e:	d107      	bne.n	8026580 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8026570:	687b      	ldr	r3, [r7, #4]
 8026572:	681b      	ldr	r3, [r3, #0]
 8026574:	681a      	ldr	r2, [r3, #0]
 8026576:	687b      	ldr	r3, [r7, #4]
 8026578:	681b      	ldr	r3, [r3, #0]
 802657a:	f022 0208 	bic.w	r2, r2, #8
 802657e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8026580:	687b      	ldr	r3, [r7, #4]
 8026582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026584:	2b00      	cmp	r3, #0
 8026586:	d003      	beq.n	8026590 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8026588:	687b      	ldr	r3, [r7, #4]
 802658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802658c:	6878      	ldr	r0, [r7, #4]
 802658e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8026590:	687b      	ldr	r3, [r7, #4]
 8026592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026594:	2220      	movs	r2, #32
 8026596:	409a      	lsls	r2, r3
 8026598:	68fb      	ldr	r3, [r7, #12]
 802659a:	4013      	ands	r3, r2
 802659c:	2b00      	cmp	r3, #0
 802659e:	f000 808e 	beq.w	80266be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80265a2:	687b      	ldr	r3, [r7, #4]
 80265a4:	681b      	ldr	r3, [r3, #0]
 80265a6:	681b      	ldr	r3, [r3, #0]
 80265a8:	f003 0310 	and.w	r3, r3, #16
 80265ac:	2b00      	cmp	r3, #0
 80265ae:	f000 8086 	beq.w	80266be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80265b2:	687b      	ldr	r3, [r7, #4]
 80265b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80265b6:	2220      	movs	r2, #32
 80265b8:	409a      	lsls	r2, r3
 80265ba:	693b      	ldr	r3, [r7, #16]
 80265bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80265be:	687b      	ldr	r3, [r7, #4]
 80265c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80265c4:	b2db      	uxtb	r3, r3
 80265c6:	2b05      	cmp	r3, #5
 80265c8:	d136      	bne.n	8026638 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80265ca:	687b      	ldr	r3, [r7, #4]
 80265cc:	681b      	ldr	r3, [r3, #0]
 80265ce:	681a      	ldr	r2, [r3, #0]
 80265d0:	687b      	ldr	r3, [r7, #4]
 80265d2:	681b      	ldr	r3, [r3, #0]
 80265d4:	f022 0216 	bic.w	r2, r2, #22
 80265d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80265da:	687b      	ldr	r3, [r7, #4]
 80265dc:	681b      	ldr	r3, [r3, #0]
 80265de:	695a      	ldr	r2, [r3, #20]
 80265e0:	687b      	ldr	r3, [r7, #4]
 80265e2:	681b      	ldr	r3, [r3, #0]
 80265e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80265e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80265ea:	687b      	ldr	r3, [r7, #4]
 80265ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80265ee:	2b00      	cmp	r3, #0
 80265f0:	d103      	bne.n	80265fa <HAL_DMA_IRQHandler+0x1da>
 80265f2:	687b      	ldr	r3, [r7, #4]
 80265f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80265f6:	2b00      	cmp	r3, #0
 80265f8:	d007      	beq.n	802660a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80265fa:	687b      	ldr	r3, [r7, #4]
 80265fc:	681b      	ldr	r3, [r3, #0]
 80265fe:	681a      	ldr	r2, [r3, #0]
 8026600:	687b      	ldr	r3, [r7, #4]
 8026602:	681b      	ldr	r3, [r3, #0]
 8026604:	f022 0208 	bic.w	r2, r2, #8
 8026608:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 802660a:	687b      	ldr	r3, [r7, #4]
 802660c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802660e:	223f      	movs	r2, #63	; 0x3f
 8026610:	409a      	lsls	r2, r3
 8026612:	693b      	ldr	r3, [r7, #16]
 8026614:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8026616:	687b      	ldr	r3, [r7, #4]
 8026618:	2201      	movs	r2, #1
 802661a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802661e:	687b      	ldr	r3, [r7, #4]
 8026620:	2200      	movs	r2, #0
 8026622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8026626:	687b      	ldr	r3, [r7, #4]
 8026628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802662a:	2b00      	cmp	r3, #0
 802662c:	d07d      	beq.n	802672a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 802662e:	687b      	ldr	r3, [r7, #4]
 8026630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8026632:	6878      	ldr	r0, [r7, #4]
 8026634:	4798      	blx	r3
        }
        return;
 8026636:	e078      	b.n	802672a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8026638:	687b      	ldr	r3, [r7, #4]
 802663a:	681b      	ldr	r3, [r3, #0]
 802663c:	681b      	ldr	r3, [r3, #0]
 802663e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8026642:	2b00      	cmp	r3, #0
 8026644:	d01c      	beq.n	8026680 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8026646:	687b      	ldr	r3, [r7, #4]
 8026648:	681b      	ldr	r3, [r3, #0]
 802664a:	681b      	ldr	r3, [r3, #0]
 802664c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8026650:	2b00      	cmp	r3, #0
 8026652:	d108      	bne.n	8026666 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8026654:	687b      	ldr	r3, [r7, #4]
 8026656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026658:	2b00      	cmp	r3, #0
 802665a:	d030      	beq.n	80266be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 802665c:	687b      	ldr	r3, [r7, #4]
 802665e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026660:	6878      	ldr	r0, [r7, #4]
 8026662:	4798      	blx	r3
 8026664:	e02b      	b.n	80266be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8026666:	687b      	ldr	r3, [r7, #4]
 8026668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802666a:	2b00      	cmp	r3, #0
 802666c:	d027      	beq.n	80266be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 802666e:	687b      	ldr	r3, [r7, #4]
 8026670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026672:	6878      	ldr	r0, [r7, #4]
 8026674:	4798      	blx	r3
 8026676:	e022      	b.n	80266be <HAL_DMA_IRQHandler+0x29e>
 8026678:	20000080 	.word	0x20000080
 802667c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8026680:	687b      	ldr	r3, [r7, #4]
 8026682:	681b      	ldr	r3, [r3, #0]
 8026684:	681b      	ldr	r3, [r3, #0]
 8026686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802668a:	2b00      	cmp	r3, #0
 802668c:	d10f      	bne.n	80266ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 802668e:	687b      	ldr	r3, [r7, #4]
 8026690:	681b      	ldr	r3, [r3, #0]
 8026692:	681a      	ldr	r2, [r3, #0]
 8026694:	687b      	ldr	r3, [r7, #4]
 8026696:	681b      	ldr	r3, [r3, #0]
 8026698:	f022 0210 	bic.w	r2, r2, #16
 802669c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802669e:	687b      	ldr	r3, [r7, #4]
 80266a0:	2201      	movs	r2, #1
 80266a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80266a6:	687b      	ldr	r3, [r7, #4]
 80266a8:	2200      	movs	r2, #0
 80266aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80266ae:	687b      	ldr	r3, [r7, #4]
 80266b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80266b2:	2b00      	cmp	r3, #0
 80266b4:	d003      	beq.n	80266be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80266b6:	687b      	ldr	r3, [r7, #4]
 80266b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80266ba:	6878      	ldr	r0, [r7, #4]
 80266bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80266be:	687b      	ldr	r3, [r7, #4]
 80266c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80266c2:	2b00      	cmp	r3, #0
 80266c4:	d032      	beq.n	802672c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80266c6:	687b      	ldr	r3, [r7, #4]
 80266c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80266ca:	f003 0301 	and.w	r3, r3, #1
 80266ce:	2b00      	cmp	r3, #0
 80266d0:	d022      	beq.n	8026718 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80266d2:	687b      	ldr	r3, [r7, #4]
 80266d4:	2205      	movs	r2, #5
 80266d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80266da:	687b      	ldr	r3, [r7, #4]
 80266dc:	681b      	ldr	r3, [r3, #0]
 80266de:	681a      	ldr	r2, [r3, #0]
 80266e0:	687b      	ldr	r3, [r7, #4]
 80266e2:	681b      	ldr	r3, [r3, #0]
 80266e4:	f022 0201 	bic.w	r2, r2, #1
 80266e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80266ea:	68bb      	ldr	r3, [r7, #8]
 80266ec:	3301      	adds	r3, #1
 80266ee:	60bb      	str	r3, [r7, #8]
 80266f0:	697a      	ldr	r2, [r7, #20]
 80266f2:	429a      	cmp	r2, r3
 80266f4:	d307      	bcc.n	8026706 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80266f6:	687b      	ldr	r3, [r7, #4]
 80266f8:	681b      	ldr	r3, [r3, #0]
 80266fa:	681b      	ldr	r3, [r3, #0]
 80266fc:	f003 0301 	and.w	r3, r3, #1
 8026700:	2b00      	cmp	r3, #0
 8026702:	d1f2      	bne.n	80266ea <HAL_DMA_IRQHandler+0x2ca>
 8026704:	e000      	b.n	8026708 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8026706:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8026708:	687b      	ldr	r3, [r7, #4]
 802670a:	2201      	movs	r2, #1
 802670c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8026710:	687b      	ldr	r3, [r7, #4]
 8026712:	2200      	movs	r2, #0
 8026714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8026718:	687b      	ldr	r3, [r7, #4]
 802671a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802671c:	2b00      	cmp	r3, #0
 802671e:	d005      	beq.n	802672c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8026720:	687b      	ldr	r3, [r7, #4]
 8026722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8026724:	6878      	ldr	r0, [r7, #4]
 8026726:	4798      	blx	r3
 8026728:	e000      	b.n	802672c <HAL_DMA_IRQHandler+0x30c>
        return;
 802672a:	bf00      	nop
    }
  }
}
 802672c:	3718      	adds	r7, #24
 802672e:	46bd      	mov	sp, r7
 8026730:	bd80      	pop	{r7, pc}
 8026732:	bf00      	nop

08026734 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8026734:	b480      	push	{r7}
 8026736:	b085      	sub	sp, #20
 8026738:	af00      	add	r7, sp, #0
 802673a:	60f8      	str	r0, [r7, #12]
 802673c:	60b9      	str	r1, [r7, #8]
 802673e:	607a      	str	r2, [r7, #4]
 8026740:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8026742:	68fb      	ldr	r3, [r7, #12]
 8026744:	681b      	ldr	r3, [r3, #0]
 8026746:	681a      	ldr	r2, [r3, #0]
 8026748:	68fb      	ldr	r3, [r7, #12]
 802674a:	681b      	ldr	r3, [r3, #0]
 802674c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8026750:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8026752:	68fb      	ldr	r3, [r7, #12]
 8026754:	681b      	ldr	r3, [r3, #0]
 8026756:	683a      	ldr	r2, [r7, #0]
 8026758:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802675a:	68fb      	ldr	r3, [r7, #12]
 802675c:	689b      	ldr	r3, [r3, #8]
 802675e:	2b40      	cmp	r3, #64	; 0x40
 8026760:	d108      	bne.n	8026774 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8026762:	68fb      	ldr	r3, [r7, #12]
 8026764:	681b      	ldr	r3, [r3, #0]
 8026766:	687a      	ldr	r2, [r7, #4]
 8026768:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 802676a:	68fb      	ldr	r3, [r7, #12]
 802676c:	681b      	ldr	r3, [r3, #0]
 802676e:	68ba      	ldr	r2, [r7, #8]
 8026770:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8026772:	e007      	b.n	8026784 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8026774:	68fb      	ldr	r3, [r7, #12]
 8026776:	681b      	ldr	r3, [r3, #0]
 8026778:	68ba      	ldr	r2, [r7, #8]
 802677a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 802677c:	68fb      	ldr	r3, [r7, #12]
 802677e:	681b      	ldr	r3, [r3, #0]
 8026780:	687a      	ldr	r2, [r7, #4]
 8026782:	60da      	str	r2, [r3, #12]
}
 8026784:	bf00      	nop
 8026786:	3714      	adds	r7, #20
 8026788:	46bd      	mov	sp, r7
 802678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802678e:	4770      	bx	lr

08026790 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8026790:	b480      	push	{r7}
 8026792:	b085      	sub	sp, #20
 8026794:	af00      	add	r7, sp, #0
 8026796:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8026798:	687b      	ldr	r3, [r7, #4]
 802679a:	681b      	ldr	r3, [r3, #0]
 802679c:	b2db      	uxtb	r3, r3
 802679e:	3b10      	subs	r3, #16
 80267a0:	4a14      	ldr	r2, [pc, #80]	; (80267f4 <DMA_CalcBaseAndBitshift+0x64>)
 80267a2:	fba2 2303 	umull	r2, r3, r2, r3
 80267a6:	091b      	lsrs	r3, r3, #4
 80267a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80267aa:	4a13      	ldr	r2, [pc, #76]	; (80267f8 <DMA_CalcBaseAndBitshift+0x68>)
 80267ac:	68fb      	ldr	r3, [r7, #12]
 80267ae:	4413      	add	r3, r2
 80267b0:	781b      	ldrb	r3, [r3, #0]
 80267b2:	461a      	mov	r2, r3
 80267b4:	687b      	ldr	r3, [r7, #4]
 80267b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80267b8:	68fb      	ldr	r3, [r7, #12]
 80267ba:	2b03      	cmp	r3, #3
 80267bc:	d909      	bls.n	80267d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80267be:	687b      	ldr	r3, [r7, #4]
 80267c0:	681b      	ldr	r3, [r3, #0]
 80267c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80267c6:	f023 0303 	bic.w	r3, r3, #3
 80267ca:	1d1a      	adds	r2, r3, #4
 80267cc:	687b      	ldr	r3, [r7, #4]
 80267ce:	659a      	str	r2, [r3, #88]	; 0x58
 80267d0:	e007      	b.n	80267e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80267d2:	687b      	ldr	r3, [r7, #4]
 80267d4:	681b      	ldr	r3, [r3, #0]
 80267d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80267da:	f023 0303 	bic.w	r3, r3, #3
 80267de:	687a      	ldr	r2, [r7, #4]
 80267e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80267e2:	687b      	ldr	r3, [r7, #4]
 80267e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80267e6:	4618      	mov	r0, r3
 80267e8:	3714      	adds	r7, #20
 80267ea:	46bd      	mov	sp, r7
 80267ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267f0:	4770      	bx	lr
 80267f2:	bf00      	nop
 80267f4:	aaaaaaab 	.word	0xaaaaaaab
 80267f8:	08030a70 	.word	0x08030a70

080267fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80267fc:	b480      	push	{r7}
 80267fe:	b085      	sub	sp, #20
 8026800:	af00      	add	r7, sp, #0
 8026802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8026804:	2300      	movs	r3, #0
 8026806:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8026808:	687b      	ldr	r3, [r7, #4]
 802680a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802680c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802680e:	687b      	ldr	r3, [r7, #4]
 8026810:	699b      	ldr	r3, [r3, #24]
 8026812:	2b00      	cmp	r3, #0
 8026814:	d11f      	bne.n	8026856 <DMA_CheckFifoParam+0x5a>
 8026816:	68bb      	ldr	r3, [r7, #8]
 8026818:	2b03      	cmp	r3, #3
 802681a:	d856      	bhi.n	80268ca <DMA_CheckFifoParam+0xce>
 802681c:	a201      	add	r2, pc, #4	; (adr r2, 8026824 <DMA_CheckFifoParam+0x28>)
 802681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026822:	bf00      	nop
 8026824:	08026835 	.word	0x08026835
 8026828:	08026847 	.word	0x08026847
 802682c:	08026835 	.word	0x08026835
 8026830:	080268cb 	.word	0x080268cb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8026834:	687b      	ldr	r3, [r7, #4]
 8026836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802683c:	2b00      	cmp	r3, #0
 802683e:	d046      	beq.n	80268ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8026840:	2301      	movs	r3, #1
 8026842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8026844:	e043      	b.n	80268ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8026846:	687b      	ldr	r3, [r7, #4]
 8026848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802684a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802684e:	d140      	bne.n	80268d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8026850:	2301      	movs	r3, #1
 8026852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8026854:	e03d      	b.n	80268d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8026856:	687b      	ldr	r3, [r7, #4]
 8026858:	699b      	ldr	r3, [r3, #24]
 802685a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802685e:	d121      	bne.n	80268a4 <DMA_CheckFifoParam+0xa8>
 8026860:	68bb      	ldr	r3, [r7, #8]
 8026862:	2b03      	cmp	r3, #3
 8026864:	d837      	bhi.n	80268d6 <DMA_CheckFifoParam+0xda>
 8026866:	a201      	add	r2, pc, #4	; (adr r2, 802686c <DMA_CheckFifoParam+0x70>)
 8026868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802686c:	0802687d 	.word	0x0802687d
 8026870:	08026883 	.word	0x08026883
 8026874:	0802687d 	.word	0x0802687d
 8026878:	08026895 	.word	0x08026895
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 802687c:	2301      	movs	r3, #1
 802687e:	73fb      	strb	r3, [r7, #15]
      break;
 8026880:	e030      	b.n	80268e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8026882:	687b      	ldr	r3, [r7, #4]
 8026884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802688a:	2b00      	cmp	r3, #0
 802688c:	d025      	beq.n	80268da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 802688e:	2301      	movs	r3, #1
 8026890:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8026892:	e022      	b.n	80268da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8026894:	687b      	ldr	r3, [r7, #4]
 8026896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026898:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802689c:	d11f      	bne.n	80268de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 802689e:	2301      	movs	r3, #1
 80268a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80268a2:	e01c      	b.n	80268de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80268a4:	68bb      	ldr	r3, [r7, #8]
 80268a6:	2b02      	cmp	r3, #2
 80268a8:	d903      	bls.n	80268b2 <DMA_CheckFifoParam+0xb6>
 80268aa:	68bb      	ldr	r3, [r7, #8]
 80268ac:	2b03      	cmp	r3, #3
 80268ae:	d003      	beq.n	80268b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80268b0:	e018      	b.n	80268e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80268b2:	2301      	movs	r3, #1
 80268b4:	73fb      	strb	r3, [r7, #15]
      break;
 80268b6:	e015      	b.n	80268e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80268b8:	687b      	ldr	r3, [r7, #4]
 80268ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80268bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80268c0:	2b00      	cmp	r3, #0
 80268c2:	d00e      	beq.n	80268e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80268c4:	2301      	movs	r3, #1
 80268c6:	73fb      	strb	r3, [r7, #15]
      break;
 80268c8:	e00b      	b.n	80268e2 <DMA_CheckFifoParam+0xe6>
      break;
 80268ca:	bf00      	nop
 80268cc:	e00a      	b.n	80268e4 <DMA_CheckFifoParam+0xe8>
      break;
 80268ce:	bf00      	nop
 80268d0:	e008      	b.n	80268e4 <DMA_CheckFifoParam+0xe8>
      break;
 80268d2:	bf00      	nop
 80268d4:	e006      	b.n	80268e4 <DMA_CheckFifoParam+0xe8>
      break;
 80268d6:	bf00      	nop
 80268d8:	e004      	b.n	80268e4 <DMA_CheckFifoParam+0xe8>
      break;
 80268da:	bf00      	nop
 80268dc:	e002      	b.n	80268e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80268de:	bf00      	nop
 80268e0:	e000      	b.n	80268e4 <DMA_CheckFifoParam+0xe8>
      break;
 80268e2:	bf00      	nop
    }
  } 
  
  return status; 
 80268e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80268e6:	4618      	mov	r0, r3
 80268e8:	3714      	adds	r7, #20
 80268ea:	46bd      	mov	sp, r7
 80268ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268f0:	4770      	bx	lr
 80268f2:	bf00      	nop

080268f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80268f4:	b480      	push	{r7}
 80268f6:	b089      	sub	sp, #36	; 0x24
 80268f8:	af00      	add	r7, sp, #0
 80268fa:	6078      	str	r0, [r7, #4]
 80268fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80268fe:	2300      	movs	r3, #0
 8026900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8026902:	2300      	movs	r3, #0
 8026904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8026906:	2300      	movs	r3, #0
 8026908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802690a:	2300      	movs	r3, #0
 802690c:	61fb      	str	r3, [r7, #28]
 802690e:	e16b      	b.n	8026be8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8026910:	2201      	movs	r2, #1
 8026912:	69fb      	ldr	r3, [r7, #28]
 8026914:	fa02 f303 	lsl.w	r3, r2, r3
 8026918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802691a:	683b      	ldr	r3, [r7, #0]
 802691c:	681b      	ldr	r3, [r3, #0]
 802691e:	697a      	ldr	r2, [r7, #20]
 8026920:	4013      	ands	r3, r2
 8026922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8026924:	693a      	ldr	r2, [r7, #16]
 8026926:	697b      	ldr	r3, [r7, #20]
 8026928:	429a      	cmp	r2, r3
 802692a:	f040 815a 	bne.w	8026be2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 802692e:	683b      	ldr	r3, [r7, #0]
 8026930:	685b      	ldr	r3, [r3, #4]
 8026932:	f003 0303 	and.w	r3, r3, #3
 8026936:	2b01      	cmp	r3, #1
 8026938:	d005      	beq.n	8026946 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802693a:	683b      	ldr	r3, [r7, #0]
 802693c:	685b      	ldr	r3, [r3, #4]
 802693e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8026942:	2b02      	cmp	r3, #2
 8026944:	d130      	bne.n	80269a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8026946:	687b      	ldr	r3, [r7, #4]
 8026948:	689b      	ldr	r3, [r3, #8]
 802694a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802694c:	69fb      	ldr	r3, [r7, #28]
 802694e:	005b      	lsls	r3, r3, #1
 8026950:	2203      	movs	r2, #3
 8026952:	fa02 f303 	lsl.w	r3, r2, r3
 8026956:	43db      	mvns	r3, r3
 8026958:	69ba      	ldr	r2, [r7, #24]
 802695a:	4013      	ands	r3, r2
 802695c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802695e:	683b      	ldr	r3, [r7, #0]
 8026960:	68da      	ldr	r2, [r3, #12]
 8026962:	69fb      	ldr	r3, [r7, #28]
 8026964:	005b      	lsls	r3, r3, #1
 8026966:	fa02 f303 	lsl.w	r3, r2, r3
 802696a:	69ba      	ldr	r2, [r7, #24]
 802696c:	4313      	orrs	r3, r2
 802696e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8026970:	687b      	ldr	r3, [r7, #4]
 8026972:	69ba      	ldr	r2, [r7, #24]
 8026974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8026976:	687b      	ldr	r3, [r7, #4]
 8026978:	685b      	ldr	r3, [r3, #4]
 802697a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802697c:	2201      	movs	r2, #1
 802697e:	69fb      	ldr	r3, [r7, #28]
 8026980:	fa02 f303 	lsl.w	r3, r2, r3
 8026984:	43db      	mvns	r3, r3
 8026986:	69ba      	ldr	r2, [r7, #24]
 8026988:	4013      	ands	r3, r2
 802698a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802698c:	683b      	ldr	r3, [r7, #0]
 802698e:	685b      	ldr	r3, [r3, #4]
 8026990:	091b      	lsrs	r3, r3, #4
 8026992:	f003 0201 	and.w	r2, r3, #1
 8026996:	69fb      	ldr	r3, [r7, #28]
 8026998:	fa02 f303 	lsl.w	r3, r2, r3
 802699c:	69ba      	ldr	r2, [r7, #24]
 802699e:	4313      	orrs	r3, r2
 80269a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80269a2:	687b      	ldr	r3, [r7, #4]
 80269a4:	69ba      	ldr	r2, [r7, #24]
 80269a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80269a8:	683b      	ldr	r3, [r7, #0]
 80269aa:	685b      	ldr	r3, [r3, #4]
 80269ac:	f003 0303 	and.w	r3, r3, #3
 80269b0:	2b03      	cmp	r3, #3
 80269b2:	d017      	beq.n	80269e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80269b4:	687b      	ldr	r3, [r7, #4]
 80269b6:	68db      	ldr	r3, [r3, #12]
 80269b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80269ba:	69fb      	ldr	r3, [r7, #28]
 80269bc:	005b      	lsls	r3, r3, #1
 80269be:	2203      	movs	r2, #3
 80269c0:	fa02 f303 	lsl.w	r3, r2, r3
 80269c4:	43db      	mvns	r3, r3
 80269c6:	69ba      	ldr	r2, [r7, #24]
 80269c8:	4013      	ands	r3, r2
 80269ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80269cc:	683b      	ldr	r3, [r7, #0]
 80269ce:	689a      	ldr	r2, [r3, #8]
 80269d0:	69fb      	ldr	r3, [r7, #28]
 80269d2:	005b      	lsls	r3, r3, #1
 80269d4:	fa02 f303 	lsl.w	r3, r2, r3
 80269d8:	69ba      	ldr	r2, [r7, #24]
 80269da:	4313      	orrs	r3, r2
 80269dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80269de:	687b      	ldr	r3, [r7, #4]
 80269e0:	69ba      	ldr	r2, [r7, #24]
 80269e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80269e4:	683b      	ldr	r3, [r7, #0]
 80269e6:	685b      	ldr	r3, [r3, #4]
 80269e8:	f003 0303 	and.w	r3, r3, #3
 80269ec:	2b02      	cmp	r3, #2
 80269ee:	d123      	bne.n	8026a38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80269f0:	69fb      	ldr	r3, [r7, #28]
 80269f2:	08da      	lsrs	r2, r3, #3
 80269f4:	687b      	ldr	r3, [r7, #4]
 80269f6:	3208      	adds	r2, #8
 80269f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80269fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80269fe:	69fb      	ldr	r3, [r7, #28]
 8026a00:	f003 0307 	and.w	r3, r3, #7
 8026a04:	009b      	lsls	r3, r3, #2
 8026a06:	220f      	movs	r2, #15
 8026a08:	fa02 f303 	lsl.w	r3, r2, r3
 8026a0c:	43db      	mvns	r3, r3
 8026a0e:	69ba      	ldr	r2, [r7, #24]
 8026a10:	4013      	ands	r3, r2
 8026a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8026a14:	683b      	ldr	r3, [r7, #0]
 8026a16:	691a      	ldr	r2, [r3, #16]
 8026a18:	69fb      	ldr	r3, [r7, #28]
 8026a1a:	f003 0307 	and.w	r3, r3, #7
 8026a1e:	009b      	lsls	r3, r3, #2
 8026a20:	fa02 f303 	lsl.w	r3, r2, r3
 8026a24:	69ba      	ldr	r2, [r7, #24]
 8026a26:	4313      	orrs	r3, r2
 8026a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8026a2a:	69fb      	ldr	r3, [r7, #28]
 8026a2c:	08da      	lsrs	r2, r3, #3
 8026a2e:	687b      	ldr	r3, [r7, #4]
 8026a30:	3208      	adds	r2, #8
 8026a32:	69b9      	ldr	r1, [r7, #24]
 8026a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8026a38:	687b      	ldr	r3, [r7, #4]
 8026a3a:	681b      	ldr	r3, [r3, #0]
 8026a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8026a3e:	69fb      	ldr	r3, [r7, #28]
 8026a40:	005b      	lsls	r3, r3, #1
 8026a42:	2203      	movs	r2, #3
 8026a44:	fa02 f303 	lsl.w	r3, r2, r3
 8026a48:	43db      	mvns	r3, r3
 8026a4a:	69ba      	ldr	r2, [r7, #24]
 8026a4c:	4013      	ands	r3, r2
 8026a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8026a50:	683b      	ldr	r3, [r7, #0]
 8026a52:	685b      	ldr	r3, [r3, #4]
 8026a54:	f003 0203 	and.w	r2, r3, #3
 8026a58:	69fb      	ldr	r3, [r7, #28]
 8026a5a:	005b      	lsls	r3, r3, #1
 8026a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8026a60:	69ba      	ldr	r2, [r7, #24]
 8026a62:	4313      	orrs	r3, r2
 8026a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8026a66:	687b      	ldr	r3, [r7, #4]
 8026a68:	69ba      	ldr	r2, [r7, #24]
 8026a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8026a6c:	683b      	ldr	r3, [r7, #0]
 8026a6e:	685b      	ldr	r3, [r3, #4]
 8026a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8026a74:	2b00      	cmp	r3, #0
 8026a76:	f000 80b4 	beq.w	8026be2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8026a7a:	2300      	movs	r3, #0
 8026a7c:	60fb      	str	r3, [r7, #12]
 8026a7e:	4b60      	ldr	r3, [pc, #384]	; (8026c00 <HAL_GPIO_Init+0x30c>)
 8026a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026a82:	4a5f      	ldr	r2, [pc, #380]	; (8026c00 <HAL_GPIO_Init+0x30c>)
 8026a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8026a88:	6453      	str	r3, [r2, #68]	; 0x44
 8026a8a:	4b5d      	ldr	r3, [pc, #372]	; (8026c00 <HAL_GPIO_Init+0x30c>)
 8026a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8026a92:	60fb      	str	r3, [r7, #12]
 8026a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8026a96:	4a5b      	ldr	r2, [pc, #364]	; (8026c04 <HAL_GPIO_Init+0x310>)
 8026a98:	69fb      	ldr	r3, [r7, #28]
 8026a9a:	089b      	lsrs	r3, r3, #2
 8026a9c:	3302      	adds	r3, #2
 8026a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8026aa4:	69fb      	ldr	r3, [r7, #28]
 8026aa6:	f003 0303 	and.w	r3, r3, #3
 8026aaa:	009b      	lsls	r3, r3, #2
 8026aac:	220f      	movs	r2, #15
 8026aae:	fa02 f303 	lsl.w	r3, r2, r3
 8026ab2:	43db      	mvns	r3, r3
 8026ab4:	69ba      	ldr	r2, [r7, #24]
 8026ab6:	4013      	ands	r3, r2
 8026ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8026aba:	687b      	ldr	r3, [r7, #4]
 8026abc:	4a52      	ldr	r2, [pc, #328]	; (8026c08 <HAL_GPIO_Init+0x314>)
 8026abe:	4293      	cmp	r3, r2
 8026ac0:	d02b      	beq.n	8026b1a <HAL_GPIO_Init+0x226>
 8026ac2:	687b      	ldr	r3, [r7, #4]
 8026ac4:	4a51      	ldr	r2, [pc, #324]	; (8026c0c <HAL_GPIO_Init+0x318>)
 8026ac6:	4293      	cmp	r3, r2
 8026ac8:	d025      	beq.n	8026b16 <HAL_GPIO_Init+0x222>
 8026aca:	687b      	ldr	r3, [r7, #4]
 8026acc:	4a50      	ldr	r2, [pc, #320]	; (8026c10 <HAL_GPIO_Init+0x31c>)
 8026ace:	4293      	cmp	r3, r2
 8026ad0:	d01f      	beq.n	8026b12 <HAL_GPIO_Init+0x21e>
 8026ad2:	687b      	ldr	r3, [r7, #4]
 8026ad4:	4a4f      	ldr	r2, [pc, #316]	; (8026c14 <HAL_GPIO_Init+0x320>)
 8026ad6:	4293      	cmp	r3, r2
 8026ad8:	d019      	beq.n	8026b0e <HAL_GPIO_Init+0x21a>
 8026ada:	687b      	ldr	r3, [r7, #4]
 8026adc:	4a4e      	ldr	r2, [pc, #312]	; (8026c18 <HAL_GPIO_Init+0x324>)
 8026ade:	4293      	cmp	r3, r2
 8026ae0:	d013      	beq.n	8026b0a <HAL_GPIO_Init+0x216>
 8026ae2:	687b      	ldr	r3, [r7, #4]
 8026ae4:	4a4d      	ldr	r2, [pc, #308]	; (8026c1c <HAL_GPIO_Init+0x328>)
 8026ae6:	4293      	cmp	r3, r2
 8026ae8:	d00d      	beq.n	8026b06 <HAL_GPIO_Init+0x212>
 8026aea:	687b      	ldr	r3, [r7, #4]
 8026aec:	4a4c      	ldr	r2, [pc, #304]	; (8026c20 <HAL_GPIO_Init+0x32c>)
 8026aee:	4293      	cmp	r3, r2
 8026af0:	d007      	beq.n	8026b02 <HAL_GPIO_Init+0x20e>
 8026af2:	687b      	ldr	r3, [r7, #4]
 8026af4:	4a4b      	ldr	r2, [pc, #300]	; (8026c24 <HAL_GPIO_Init+0x330>)
 8026af6:	4293      	cmp	r3, r2
 8026af8:	d101      	bne.n	8026afe <HAL_GPIO_Init+0x20a>
 8026afa:	2307      	movs	r3, #7
 8026afc:	e00e      	b.n	8026b1c <HAL_GPIO_Init+0x228>
 8026afe:	2308      	movs	r3, #8
 8026b00:	e00c      	b.n	8026b1c <HAL_GPIO_Init+0x228>
 8026b02:	2306      	movs	r3, #6
 8026b04:	e00a      	b.n	8026b1c <HAL_GPIO_Init+0x228>
 8026b06:	2305      	movs	r3, #5
 8026b08:	e008      	b.n	8026b1c <HAL_GPIO_Init+0x228>
 8026b0a:	2304      	movs	r3, #4
 8026b0c:	e006      	b.n	8026b1c <HAL_GPIO_Init+0x228>
 8026b0e:	2303      	movs	r3, #3
 8026b10:	e004      	b.n	8026b1c <HAL_GPIO_Init+0x228>
 8026b12:	2302      	movs	r3, #2
 8026b14:	e002      	b.n	8026b1c <HAL_GPIO_Init+0x228>
 8026b16:	2301      	movs	r3, #1
 8026b18:	e000      	b.n	8026b1c <HAL_GPIO_Init+0x228>
 8026b1a:	2300      	movs	r3, #0
 8026b1c:	69fa      	ldr	r2, [r7, #28]
 8026b1e:	f002 0203 	and.w	r2, r2, #3
 8026b22:	0092      	lsls	r2, r2, #2
 8026b24:	4093      	lsls	r3, r2
 8026b26:	69ba      	ldr	r2, [r7, #24]
 8026b28:	4313      	orrs	r3, r2
 8026b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8026b2c:	4935      	ldr	r1, [pc, #212]	; (8026c04 <HAL_GPIO_Init+0x310>)
 8026b2e:	69fb      	ldr	r3, [r7, #28]
 8026b30:	089b      	lsrs	r3, r3, #2
 8026b32:	3302      	adds	r3, #2
 8026b34:	69ba      	ldr	r2, [r7, #24]
 8026b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8026b3a:	4b3b      	ldr	r3, [pc, #236]	; (8026c28 <HAL_GPIO_Init+0x334>)
 8026b3c:	681b      	ldr	r3, [r3, #0]
 8026b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026b40:	693b      	ldr	r3, [r7, #16]
 8026b42:	43db      	mvns	r3, r3
 8026b44:	69ba      	ldr	r2, [r7, #24]
 8026b46:	4013      	ands	r3, r2
 8026b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8026b4a:	683b      	ldr	r3, [r7, #0]
 8026b4c:	685b      	ldr	r3, [r3, #4]
 8026b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8026b52:	2b00      	cmp	r3, #0
 8026b54:	d003      	beq.n	8026b5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8026b56:	69ba      	ldr	r2, [r7, #24]
 8026b58:	693b      	ldr	r3, [r7, #16]
 8026b5a:	4313      	orrs	r3, r2
 8026b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8026b5e:	4a32      	ldr	r2, [pc, #200]	; (8026c28 <HAL_GPIO_Init+0x334>)
 8026b60:	69bb      	ldr	r3, [r7, #24]
 8026b62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8026b64:	4b30      	ldr	r3, [pc, #192]	; (8026c28 <HAL_GPIO_Init+0x334>)
 8026b66:	685b      	ldr	r3, [r3, #4]
 8026b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026b6a:	693b      	ldr	r3, [r7, #16]
 8026b6c:	43db      	mvns	r3, r3
 8026b6e:	69ba      	ldr	r2, [r7, #24]
 8026b70:	4013      	ands	r3, r2
 8026b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8026b74:	683b      	ldr	r3, [r7, #0]
 8026b76:	685b      	ldr	r3, [r3, #4]
 8026b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026b7c:	2b00      	cmp	r3, #0
 8026b7e:	d003      	beq.n	8026b88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8026b80:	69ba      	ldr	r2, [r7, #24]
 8026b82:	693b      	ldr	r3, [r7, #16]
 8026b84:	4313      	orrs	r3, r2
 8026b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8026b88:	4a27      	ldr	r2, [pc, #156]	; (8026c28 <HAL_GPIO_Init+0x334>)
 8026b8a:	69bb      	ldr	r3, [r7, #24]
 8026b8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8026b8e:	4b26      	ldr	r3, [pc, #152]	; (8026c28 <HAL_GPIO_Init+0x334>)
 8026b90:	689b      	ldr	r3, [r3, #8]
 8026b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026b94:	693b      	ldr	r3, [r7, #16]
 8026b96:	43db      	mvns	r3, r3
 8026b98:	69ba      	ldr	r2, [r7, #24]
 8026b9a:	4013      	ands	r3, r2
 8026b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8026b9e:	683b      	ldr	r3, [r7, #0]
 8026ba0:	685b      	ldr	r3, [r3, #4]
 8026ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8026ba6:	2b00      	cmp	r3, #0
 8026ba8:	d003      	beq.n	8026bb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8026baa:	69ba      	ldr	r2, [r7, #24]
 8026bac:	693b      	ldr	r3, [r7, #16]
 8026bae:	4313      	orrs	r3, r2
 8026bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8026bb2:	4a1d      	ldr	r2, [pc, #116]	; (8026c28 <HAL_GPIO_Init+0x334>)
 8026bb4:	69bb      	ldr	r3, [r7, #24]
 8026bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8026bb8:	4b1b      	ldr	r3, [pc, #108]	; (8026c28 <HAL_GPIO_Init+0x334>)
 8026bba:	68db      	ldr	r3, [r3, #12]
 8026bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026bbe:	693b      	ldr	r3, [r7, #16]
 8026bc0:	43db      	mvns	r3, r3
 8026bc2:	69ba      	ldr	r2, [r7, #24]
 8026bc4:	4013      	ands	r3, r2
 8026bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8026bc8:	683b      	ldr	r3, [r7, #0]
 8026bca:	685b      	ldr	r3, [r3, #4]
 8026bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8026bd0:	2b00      	cmp	r3, #0
 8026bd2:	d003      	beq.n	8026bdc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8026bd4:	69ba      	ldr	r2, [r7, #24]
 8026bd6:	693b      	ldr	r3, [r7, #16]
 8026bd8:	4313      	orrs	r3, r2
 8026bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8026bdc:	4a12      	ldr	r2, [pc, #72]	; (8026c28 <HAL_GPIO_Init+0x334>)
 8026bde:	69bb      	ldr	r3, [r7, #24]
 8026be0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8026be2:	69fb      	ldr	r3, [r7, #28]
 8026be4:	3301      	adds	r3, #1
 8026be6:	61fb      	str	r3, [r7, #28]
 8026be8:	69fb      	ldr	r3, [r7, #28]
 8026bea:	2b0f      	cmp	r3, #15
 8026bec:	f67f ae90 	bls.w	8026910 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8026bf0:	bf00      	nop
 8026bf2:	bf00      	nop
 8026bf4:	3724      	adds	r7, #36	; 0x24
 8026bf6:	46bd      	mov	sp, r7
 8026bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bfc:	4770      	bx	lr
 8026bfe:	bf00      	nop
 8026c00:	40023800 	.word	0x40023800
 8026c04:	40013800 	.word	0x40013800
 8026c08:	40020000 	.word	0x40020000
 8026c0c:	40020400 	.word	0x40020400
 8026c10:	40020800 	.word	0x40020800
 8026c14:	40020c00 	.word	0x40020c00
 8026c18:	40021000 	.word	0x40021000
 8026c1c:	40021400 	.word	0x40021400
 8026c20:	40021800 	.word	0x40021800
 8026c24:	40021c00 	.word	0x40021c00
 8026c28:	40013c00 	.word	0x40013c00

08026c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8026c2c:	b480      	push	{r7}
 8026c2e:	b083      	sub	sp, #12
 8026c30:	af00      	add	r7, sp, #0
 8026c32:	6078      	str	r0, [r7, #4]
 8026c34:	460b      	mov	r3, r1
 8026c36:	807b      	strh	r3, [r7, #2]
 8026c38:	4613      	mov	r3, r2
 8026c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8026c3c:	787b      	ldrb	r3, [r7, #1]
 8026c3e:	2b00      	cmp	r3, #0
 8026c40:	d003      	beq.n	8026c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8026c42:	887a      	ldrh	r2, [r7, #2]
 8026c44:	687b      	ldr	r3, [r7, #4]
 8026c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8026c48:	e003      	b.n	8026c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8026c4a:	887b      	ldrh	r3, [r7, #2]
 8026c4c:	041a      	lsls	r2, r3, #16
 8026c4e:	687b      	ldr	r3, [r7, #4]
 8026c50:	619a      	str	r2, [r3, #24]
}
 8026c52:	bf00      	nop
 8026c54:	370c      	adds	r7, #12
 8026c56:	46bd      	mov	sp, r7
 8026c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c5c:	4770      	bx	lr
	...

08026c60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8026c60:	b580      	push	{r7, lr}
 8026c62:	b082      	sub	sp, #8
 8026c64:	af00      	add	r7, sp, #0
 8026c66:	4603      	mov	r3, r0
 8026c68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8026c6a:	4b08      	ldr	r3, [pc, #32]	; (8026c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8026c6c:	695a      	ldr	r2, [r3, #20]
 8026c6e:	88fb      	ldrh	r3, [r7, #6]
 8026c70:	4013      	ands	r3, r2
 8026c72:	2b00      	cmp	r3, #0
 8026c74:	d006      	beq.n	8026c84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8026c76:	4a05      	ldr	r2, [pc, #20]	; (8026c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8026c78:	88fb      	ldrh	r3, [r7, #6]
 8026c7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8026c7c:	88fb      	ldrh	r3, [r7, #6]
 8026c7e:	4618      	mov	r0, r3
 8026c80:	f7ef fafa 	bl	8016278 <HAL_GPIO_EXTI_Callback>
  }
}
 8026c84:	bf00      	nop
 8026c86:	3708      	adds	r7, #8
 8026c88:	46bd      	mov	sp, r7
 8026c8a:	bd80      	pop	{r7, pc}
 8026c8c:	40013c00 	.word	0x40013c00

08026c90 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8026c90:	b480      	push	{r7}
 8026c92:	b083      	sub	sp, #12
 8026c94:	af00      	add	r7, sp, #0
 8026c96:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8026c98:	687b      	ldr	r3, [r7, #4]
 8026c9a:	681b      	ldr	r3, [r3, #0]
 8026c9c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8026ca0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8026ca2:	2300      	movs	r3, #0
}
 8026ca4:	4618      	mov	r0, r3
 8026ca6:	370c      	adds	r7, #12
 8026ca8:	46bd      	mov	sp, r7
 8026caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cae:	4770      	bx	lr

08026cb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8026cb0:	b580      	push	{r7, lr}
 8026cb2:	b086      	sub	sp, #24
 8026cb4:	af00      	add	r7, sp, #0
 8026cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8026cb8:	687b      	ldr	r3, [r7, #4]
 8026cba:	2b00      	cmp	r3, #0
 8026cbc:	d101      	bne.n	8026cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8026cbe:	2301      	movs	r3, #1
 8026cc0:	e264      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8026cc2:	687b      	ldr	r3, [r7, #4]
 8026cc4:	681b      	ldr	r3, [r3, #0]
 8026cc6:	f003 0301 	and.w	r3, r3, #1
 8026cca:	2b00      	cmp	r3, #0
 8026ccc:	d075      	beq.n	8026dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8026cce:	4ba3      	ldr	r3, [pc, #652]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026cd0:	689b      	ldr	r3, [r3, #8]
 8026cd2:	f003 030c 	and.w	r3, r3, #12
 8026cd6:	2b04      	cmp	r3, #4
 8026cd8:	d00c      	beq.n	8026cf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026cda:	4ba0      	ldr	r3, [pc, #640]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026cdc:	689b      	ldr	r3, [r3, #8]
 8026cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8026ce2:	2b08      	cmp	r3, #8
 8026ce4:	d112      	bne.n	8026d0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026ce6:	4b9d      	ldr	r3, [pc, #628]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026ce8:	685b      	ldr	r3, [r3, #4]
 8026cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8026cf2:	d10b      	bne.n	8026d0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026cf4:	4b99      	ldr	r3, [pc, #612]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026cf6:	681b      	ldr	r3, [r3, #0]
 8026cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026cfc:	2b00      	cmp	r3, #0
 8026cfe:	d05b      	beq.n	8026db8 <HAL_RCC_OscConfig+0x108>
 8026d00:	687b      	ldr	r3, [r7, #4]
 8026d02:	685b      	ldr	r3, [r3, #4]
 8026d04:	2b00      	cmp	r3, #0
 8026d06:	d157      	bne.n	8026db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8026d08:	2301      	movs	r3, #1
 8026d0a:	e23f      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8026d0c:	687b      	ldr	r3, [r7, #4]
 8026d0e:	685b      	ldr	r3, [r3, #4]
 8026d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026d14:	d106      	bne.n	8026d24 <HAL_RCC_OscConfig+0x74>
 8026d16:	4b91      	ldr	r3, [pc, #580]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026d18:	681b      	ldr	r3, [r3, #0]
 8026d1a:	4a90      	ldr	r2, [pc, #576]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026d20:	6013      	str	r3, [r2, #0]
 8026d22:	e01d      	b.n	8026d60 <HAL_RCC_OscConfig+0xb0>
 8026d24:	687b      	ldr	r3, [r7, #4]
 8026d26:	685b      	ldr	r3, [r3, #4]
 8026d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8026d2c:	d10c      	bne.n	8026d48 <HAL_RCC_OscConfig+0x98>
 8026d2e:	4b8b      	ldr	r3, [pc, #556]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026d30:	681b      	ldr	r3, [r3, #0]
 8026d32:	4a8a      	ldr	r2, [pc, #552]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026d38:	6013      	str	r3, [r2, #0]
 8026d3a:	4b88      	ldr	r3, [pc, #544]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026d3c:	681b      	ldr	r3, [r3, #0]
 8026d3e:	4a87      	ldr	r2, [pc, #540]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026d44:	6013      	str	r3, [r2, #0]
 8026d46:	e00b      	b.n	8026d60 <HAL_RCC_OscConfig+0xb0>
 8026d48:	4b84      	ldr	r3, [pc, #528]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026d4a:	681b      	ldr	r3, [r3, #0]
 8026d4c:	4a83      	ldr	r2, [pc, #524]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026d52:	6013      	str	r3, [r2, #0]
 8026d54:	4b81      	ldr	r3, [pc, #516]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026d56:	681b      	ldr	r3, [r3, #0]
 8026d58:	4a80      	ldr	r2, [pc, #512]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8026d60:	687b      	ldr	r3, [r7, #4]
 8026d62:	685b      	ldr	r3, [r3, #4]
 8026d64:	2b00      	cmp	r3, #0
 8026d66:	d013      	beq.n	8026d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026d68:	f7fd fd20 	bl	80247ac <HAL_GetTick>
 8026d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026d6e:	e008      	b.n	8026d82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026d70:	f7fd fd1c 	bl	80247ac <HAL_GetTick>
 8026d74:	4602      	mov	r2, r0
 8026d76:	693b      	ldr	r3, [r7, #16]
 8026d78:	1ad3      	subs	r3, r2, r3
 8026d7a:	2b64      	cmp	r3, #100	; 0x64
 8026d7c:	d901      	bls.n	8026d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8026d7e:	2303      	movs	r3, #3
 8026d80:	e204      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026d82:	4b76      	ldr	r3, [pc, #472]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026d84:	681b      	ldr	r3, [r3, #0]
 8026d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026d8a:	2b00      	cmp	r3, #0
 8026d8c:	d0f0      	beq.n	8026d70 <HAL_RCC_OscConfig+0xc0>
 8026d8e:	e014      	b.n	8026dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026d90:	f7fd fd0c 	bl	80247ac <HAL_GetTick>
 8026d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026d96:	e008      	b.n	8026daa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026d98:	f7fd fd08 	bl	80247ac <HAL_GetTick>
 8026d9c:	4602      	mov	r2, r0
 8026d9e:	693b      	ldr	r3, [r7, #16]
 8026da0:	1ad3      	subs	r3, r2, r3
 8026da2:	2b64      	cmp	r3, #100	; 0x64
 8026da4:	d901      	bls.n	8026daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8026da6:	2303      	movs	r3, #3
 8026da8:	e1f0      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026daa:	4b6c      	ldr	r3, [pc, #432]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026dac:	681b      	ldr	r3, [r3, #0]
 8026dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026db2:	2b00      	cmp	r3, #0
 8026db4:	d1f0      	bne.n	8026d98 <HAL_RCC_OscConfig+0xe8>
 8026db6:	e000      	b.n	8026dba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8026dba:	687b      	ldr	r3, [r7, #4]
 8026dbc:	681b      	ldr	r3, [r3, #0]
 8026dbe:	f003 0302 	and.w	r3, r3, #2
 8026dc2:	2b00      	cmp	r3, #0
 8026dc4:	d063      	beq.n	8026e8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8026dc6:	4b65      	ldr	r3, [pc, #404]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026dc8:	689b      	ldr	r3, [r3, #8]
 8026dca:	f003 030c 	and.w	r3, r3, #12
 8026dce:	2b00      	cmp	r3, #0
 8026dd0:	d00b      	beq.n	8026dea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8026dd2:	4b62      	ldr	r3, [pc, #392]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026dd4:	689b      	ldr	r3, [r3, #8]
 8026dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8026dda:	2b08      	cmp	r3, #8
 8026ddc:	d11c      	bne.n	8026e18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8026dde:	4b5f      	ldr	r3, [pc, #380]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026de0:	685b      	ldr	r3, [r3, #4]
 8026de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026de6:	2b00      	cmp	r3, #0
 8026de8:	d116      	bne.n	8026e18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026dea:	4b5c      	ldr	r3, [pc, #368]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026dec:	681b      	ldr	r3, [r3, #0]
 8026dee:	f003 0302 	and.w	r3, r3, #2
 8026df2:	2b00      	cmp	r3, #0
 8026df4:	d005      	beq.n	8026e02 <HAL_RCC_OscConfig+0x152>
 8026df6:	687b      	ldr	r3, [r7, #4]
 8026df8:	68db      	ldr	r3, [r3, #12]
 8026dfa:	2b01      	cmp	r3, #1
 8026dfc:	d001      	beq.n	8026e02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8026dfe:	2301      	movs	r3, #1
 8026e00:	e1c4      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026e02:	4b56      	ldr	r3, [pc, #344]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026e04:	681b      	ldr	r3, [r3, #0]
 8026e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026e0a:	687b      	ldr	r3, [r7, #4]
 8026e0c:	691b      	ldr	r3, [r3, #16]
 8026e0e:	00db      	lsls	r3, r3, #3
 8026e10:	4952      	ldr	r1, [pc, #328]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026e12:	4313      	orrs	r3, r2
 8026e14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026e16:	e03a      	b.n	8026e8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8026e18:	687b      	ldr	r3, [r7, #4]
 8026e1a:	68db      	ldr	r3, [r3, #12]
 8026e1c:	2b00      	cmp	r3, #0
 8026e1e:	d020      	beq.n	8026e62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8026e20:	4b4f      	ldr	r3, [pc, #316]	; (8026f60 <HAL_RCC_OscConfig+0x2b0>)
 8026e22:	2201      	movs	r2, #1
 8026e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026e26:	f7fd fcc1 	bl	80247ac <HAL_GetTick>
 8026e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026e2c:	e008      	b.n	8026e40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026e2e:	f7fd fcbd 	bl	80247ac <HAL_GetTick>
 8026e32:	4602      	mov	r2, r0
 8026e34:	693b      	ldr	r3, [r7, #16]
 8026e36:	1ad3      	subs	r3, r2, r3
 8026e38:	2b02      	cmp	r3, #2
 8026e3a:	d901      	bls.n	8026e40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8026e3c:	2303      	movs	r3, #3
 8026e3e:	e1a5      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026e40:	4b46      	ldr	r3, [pc, #280]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026e42:	681b      	ldr	r3, [r3, #0]
 8026e44:	f003 0302 	and.w	r3, r3, #2
 8026e48:	2b00      	cmp	r3, #0
 8026e4a:	d0f0      	beq.n	8026e2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026e4c:	4b43      	ldr	r3, [pc, #268]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026e4e:	681b      	ldr	r3, [r3, #0]
 8026e50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026e54:	687b      	ldr	r3, [r7, #4]
 8026e56:	691b      	ldr	r3, [r3, #16]
 8026e58:	00db      	lsls	r3, r3, #3
 8026e5a:	4940      	ldr	r1, [pc, #256]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026e5c:	4313      	orrs	r3, r2
 8026e5e:	600b      	str	r3, [r1, #0]
 8026e60:	e015      	b.n	8026e8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8026e62:	4b3f      	ldr	r3, [pc, #252]	; (8026f60 <HAL_RCC_OscConfig+0x2b0>)
 8026e64:	2200      	movs	r2, #0
 8026e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026e68:	f7fd fca0 	bl	80247ac <HAL_GetTick>
 8026e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026e6e:	e008      	b.n	8026e82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026e70:	f7fd fc9c 	bl	80247ac <HAL_GetTick>
 8026e74:	4602      	mov	r2, r0
 8026e76:	693b      	ldr	r3, [r7, #16]
 8026e78:	1ad3      	subs	r3, r2, r3
 8026e7a:	2b02      	cmp	r3, #2
 8026e7c:	d901      	bls.n	8026e82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8026e7e:	2303      	movs	r3, #3
 8026e80:	e184      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026e82:	4b36      	ldr	r3, [pc, #216]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026e84:	681b      	ldr	r3, [r3, #0]
 8026e86:	f003 0302 	and.w	r3, r3, #2
 8026e8a:	2b00      	cmp	r3, #0
 8026e8c:	d1f0      	bne.n	8026e70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8026e8e:	687b      	ldr	r3, [r7, #4]
 8026e90:	681b      	ldr	r3, [r3, #0]
 8026e92:	f003 0308 	and.w	r3, r3, #8
 8026e96:	2b00      	cmp	r3, #0
 8026e98:	d030      	beq.n	8026efc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8026e9a:	687b      	ldr	r3, [r7, #4]
 8026e9c:	695b      	ldr	r3, [r3, #20]
 8026e9e:	2b00      	cmp	r3, #0
 8026ea0:	d016      	beq.n	8026ed0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8026ea2:	4b30      	ldr	r3, [pc, #192]	; (8026f64 <HAL_RCC_OscConfig+0x2b4>)
 8026ea4:	2201      	movs	r2, #1
 8026ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026ea8:	f7fd fc80 	bl	80247ac <HAL_GetTick>
 8026eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026eae:	e008      	b.n	8026ec2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026eb0:	f7fd fc7c 	bl	80247ac <HAL_GetTick>
 8026eb4:	4602      	mov	r2, r0
 8026eb6:	693b      	ldr	r3, [r7, #16]
 8026eb8:	1ad3      	subs	r3, r2, r3
 8026eba:	2b02      	cmp	r3, #2
 8026ebc:	d901      	bls.n	8026ec2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8026ebe:	2303      	movs	r3, #3
 8026ec0:	e164      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026ec2:	4b26      	ldr	r3, [pc, #152]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026ec6:	f003 0302 	and.w	r3, r3, #2
 8026eca:	2b00      	cmp	r3, #0
 8026ecc:	d0f0      	beq.n	8026eb0 <HAL_RCC_OscConfig+0x200>
 8026ece:	e015      	b.n	8026efc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8026ed0:	4b24      	ldr	r3, [pc, #144]	; (8026f64 <HAL_RCC_OscConfig+0x2b4>)
 8026ed2:	2200      	movs	r2, #0
 8026ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8026ed6:	f7fd fc69 	bl	80247ac <HAL_GetTick>
 8026eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026edc:	e008      	b.n	8026ef0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026ede:	f7fd fc65 	bl	80247ac <HAL_GetTick>
 8026ee2:	4602      	mov	r2, r0
 8026ee4:	693b      	ldr	r3, [r7, #16]
 8026ee6:	1ad3      	subs	r3, r2, r3
 8026ee8:	2b02      	cmp	r3, #2
 8026eea:	d901      	bls.n	8026ef0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8026eec:	2303      	movs	r3, #3
 8026eee:	e14d      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026ef0:	4b1a      	ldr	r3, [pc, #104]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026ef4:	f003 0302 	and.w	r3, r3, #2
 8026ef8:	2b00      	cmp	r3, #0
 8026efa:	d1f0      	bne.n	8026ede <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8026efc:	687b      	ldr	r3, [r7, #4]
 8026efe:	681b      	ldr	r3, [r3, #0]
 8026f00:	f003 0304 	and.w	r3, r3, #4
 8026f04:	2b00      	cmp	r3, #0
 8026f06:	f000 80a0 	beq.w	802704a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8026f0a:	2300      	movs	r3, #0
 8026f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8026f0e:	4b13      	ldr	r3, [pc, #76]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026f16:	2b00      	cmp	r3, #0
 8026f18:	d10f      	bne.n	8026f3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8026f1a:	2300      	movs	r3, #0
 8026f1c:	60bb      	str	r3, [r7, #8]
 8026f1e:	4b0f      	ldr	r3, [pc, #60]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026f22:	4a0e      	ldr	r2, [pc, #56]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8026f28:	6413      	str	r3, [r2, #64]	; 0x40
 8026f2a:	4b0c      	ldr	r3, [pc, #48]	; (8026f5c <HAL_RCC_OscConfig+0x2ac>)
 8026f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026f32:	60bb      	str	r3, [r7, #8]
 8026f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8026f36:	2301      	movs	r3, #1
 8026f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026f3a:	4b0b      	ldr	r3, [pc, #44]	; (8026f68 <HAL_RCC_OscConfig+0x2b8>)
 8026f3c:	681b      	ldr	r3, [r3, #0]
 8026f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026f42:	2b00      	cmp	r3, #0
 8026f44:	d121      	bne.n	8026f8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8026f46:	4b08      	ldr	r3, [pc, #32]	; (8026f68 <HAL_RCC_OscConfig+0x2b8>)
 8026f48:	681b      	ldr	r3, [r3, #0]
 8026f4a:	4a07      	ldr	r2, [pc, #28]	; (8026f68 <HAL_RCC_OscConfig+0x2b8>)
 8026f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8026f52:	f7fd fc2b 	bl	80247ac <HAL_GetTick>
 8026f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026f58:	e011      	b.n	8026f7e <HAL_RCC_OscConfig+0x2ce>
 8026f5a:	bf00      	nop
 8026f5c:	40023800 	.word	0x40023800
 8026f60:	42470000 	.word	0x42470000
 8026f64:	42470e80 	.word	0x42470e80
 8026f68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8026f6c:	f7fd fc1e 	bl	80247ac <HAL_GetTick>
 8026f70:	4602      	mov	r2, r0
 8026f72:	693b      	ldr	r3, [r7, #16]
 8026f74:	1ad3      	subs	r3, r2, r3
 8026f76:	2b02      	cmp	r3, #2
 8026f78:	d901      	bls.n	8026f7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8026f7a:	2303      	movs	r3, #3
 8026f7c:	e106      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026f7e:	4b85      	ldr	r3, [pc, #532]	; (8027194 <HAL_RCC_OscConfig+0x4e4>)
 8026f80:	681b      	ldr	r3, [r3, #0]
 8026f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026f86:	2b00      	cmp	r3, #0
 8026f88:	d0f0      	beq.n	8026f6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8026f8a:	687b      	ldr	r3, [r7, #4]
 8026f8c:	689b      	ldr	r3, [r3, #8]
 8026f8e:	2b01      	cmp	r3, #1
 8026f90:	d106      	bne.n	8026fa0 <HAL_RCC_OscConfig+0x2f0>
 8026f92:	4b81      	ldr	r3, [pc, #516]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 8026f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f96:	4a80      	ldr	r2, [pc, #512]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 8026f98:	f043 0301 	orr.w	r3, r3, #1
 8026f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8026f9e:	e01c      	b.n	8026fda <HAL_RCC_OscConfig+0x32a>
 8026fa0:	687b      	ldr	r3, [r7, #4]
 8026fa2:	689b      	ldr	r3, [r3, #8]
 8026fa4:	2b05      	cmp	r3, #5
 8026fa6:	d10c      	bne.n	8026fc2 <HAL_RCC_OscConfig+0x312>
 8026fa8:	4b7b      	ldr	r3, [pc, #492]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 8026faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026fac:	4a7a      	ldr	r2, [pc, #488]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 8026fae:	f043 0304 	orr.w	r3, r3, #4
 8026fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8026fb4:	4b78      	ldr	r3, [pc, #480]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 8026fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026fb8:	4a77      	ldr	r2, [pc, #476]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 8026fba:	f043 0301 	orr.w	r3, r3, #1
 8026fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8026fc0:	e00b      	b.n	8026fda <HAL_RCC_OscConfig+0x32a>
 8026fc2:	4b75      	ldr	r3, [pc, #468]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 8026fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026fc6:	4a74      	ldr	r2, [pc, #464]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 8026fc8:	f023 0301 	bic.w	r3, r3, #1
 8026fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8026fce:	4b72      	ldr	r3, [pc, #456]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 8026fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026fd2:	4a71      	ldr	r2, [pc, #452]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 8026fd4:	f023 0304 	bic.w	r3, r3, #4
 8026fd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8026fda:	687b      	ldr	r3, [r7, #4]
 8026fdc:	689b      	ldr	r3, [r3, #8]
 8026fde:	2b00      	cmp	r3, #0
 8026fe0:	d015      	beq.n	802700e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026fe2:	f7fd fbe3 	bl	80247ac <HAL_GetTick>
 8026fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026fe8:	e00a      	b.n	8027000 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026fea:	f7fd fbdf 	bl	80247ac <HAL_GetTick>
 8026fee:	4602      	mov	r2, r0
 8026ff0:	693b      	ldr	r3, [r7, #16]
 8026ff2:	1ad3      	subs	r3, r2, r3
 8026ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8026ff8:	4293      	cmp	r3, r2
 8026ffa:	d901      	bls.n	8027000 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8026ffc:	2303      	movs	r3, #3
 8026ffe:	e0c5      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027000:	4b65      	ldr	r3, [pc, #404]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 8027002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027004:	f003 0302 	and.w	r3, r3, #2
 8027008:	2b00      	cmp	r3, #0
 802700a:	d0ee      	beq.n	8026fea <HAL_RCC_OscConfig+0x33a>
 802700c:	e014      	b.n	8027038 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802700e:	f7fd fbcd 	bl	80247ac <HAL_GetTick>
 8027012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8027014:	e00a      	b.n	802702c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8027016:	f7fd fbc9 	bl	80247ac <HAL_GetTick>
 802701a:	4602      	mov	r2, r0
 802701c:	693b      	ldr	r3, [r7, #16]
 802701e:	1ad3      	subs	r3, r2, r3
 8027020:	f241 3288 	movw	r2, #5000	; 0x1388
 8027024:	4293      	cmp	r3, r2
 8027026:	d901      	bls.n	802702c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8027028:	2303      	movs	r3, #3
 802702a:	e0af      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802702c:	4b5a      	ldr	r3, [pc, #360]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 802702e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027030:	f003 0302 	and.w	r3, r3, #2
 8027034:	2b00      	cmp	r3, #0
 8027036:	d1ee      	bne.n	8027016 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8027038:	7dfb      	ldrb	r3, [r7, #23]
 802703a:	2b01      	cmp	r3, #1
 802703c:	d105      	bne.n	802704a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802703e:	4b56      	ldr	r3, [pc, #344]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 8027040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027042:	4a55      	ldr	r2, [pc, #340]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 8027044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8027048:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802704a:	687b      	ldr	r3, [r7, #4]
 802704c:	699b      	ldr	r3, [r3, #24]
 802704e:	2b00      	cmp	r3, #0
 8027050:	f000 809b 	beq.w	802718a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8027054:	4b50      	ldr	r3, [pc, #320]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 8027056:	689b      	ldr	r3, [r3, #8]
 8027058:	f003 030c 	and.w	r3, r3, #12
 802705c:	2b08      	cmp	r3, #8
 802705e:	d05c      	beq.n	802711a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8027060:	687b      	ldr	r3, [r7, #4]
 8027062:	699b      	ldr	r3, [r3, #24]
 8027064:	2b02      	cmp	r3, #2
 8027066:	d141      	bne.n	80270ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8027068:	4b4c      	ldr	r3, [pc, #304]	; (802719c <HAL_RCC_OscConfig+0x4ec>)
 802706a:	2200      	movs	r2, #0
 802706c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802706e:	f7fd fb9d 	bl	80247ac <HAL_GetTick>
 8027072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027074:	e008      	b.n	8027088 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027076:	f7fd fb99 	bl	80247ac <HAL_GetTick>
 802707a:	4602      	mov	r2, r0
 802707c:	693b      	ldr	r3, [r7, #16]
 802707e:	1ad3      	subs	r3, r2, r3
 8027080:	2b02      	cmp	r3, #2
 8027082:	d901      	bls.n	8027088 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8027084:	2303      	movs	r3, #3
 8027086:	e081      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027088:	4b43      	ldr	r3, [pc, #268]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 802708a:	681b      	ldr	r3, [r3, #0]
 802708c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027090:	2b00      	cmp	r3, #0
 8027092:	d1f0      	bne.n	8027076 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8027094:	687b      	ldr	r3, [r7, #4]
 8027096:	69da      	ldr	r2, [r3, #28]
 8027098:	687b      	ldr	r3, [r7, #4]
 802709a:	6a1b      	ldr	r3, [r3, #32]
 802709c:	431a      	orrs	r2, r3
 802709e:	687b      	ldr	r3, [r7, #4]
 80270a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80270a2:	019b      	lsls	r3, r3, #6
 80270a4:	431a      	orrs	r2, r3
 80270a6:	687b      	ldr	r3, [r7, #4]
 80270a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80270aa:	085b      	lsrs	r3, r3, #1
 80270ac:	3b01      	subs	r3, #1
 80270ae:	041b      	lsls	r3, r3, #16
 80270b0:	431a      	orrs	r2, r3
 80270b2:	687b      	ldr	r3, [r7, #4]
 80270b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80270b6:	061b      	lsls	r3, r3, #24
 80270b8:	4937      	ldr	r1, [pc, #220]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 80270ba:	4313      	orrs	r3, r2
 80270bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80270be:	4b37      	ldr	r3, [pc, #220]	; (802719c <HAL_RCC_OscConfig+0x4ec>)
 80270c0:	2201      	movs	r2, #1
 80270c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80270c4:	f7fd fb72 	bl	80247ac <HAL_GetTick>
 80270c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80270ca:	e008      	b.n	80270de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80270cc:	f7fd fb6e 	bl	80247ac <HAL_GetTick>
 80270d0:	4602      	mov	r2, r0
 80270d2:	693b      	ldr	r3, [r7, #16]
 80270d4:	1ad3      	subs	r3, r2, r3
 80270d6:	2b02      	cmp	r3, #2
 80270d8:	d901      	bls.n	80270de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80270da:	2303      	movs	r3, #3
 80270dc:	e056      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80270de:	4b2e      	ldr	r3, [pc, #184]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 80270e0:	681b      	ldr	r3, [r3, #0]
 80270e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80270e6:	2b00      	cmp	r3, #0
 80270e8:	d0f0      	beq.n	80270cc <HAL_RCC_OscConfig+0x41c>
 80270ea:	e04e      	b.n	802718a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80270ec:	4b2b      	ldr	r3, [pc, #172]	; (802719c <HAL_RCC_OscConfig+0x4ec>)
 80270ee:	2200      	movs	r2, #0
 80270f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80270f2:	f7fd fb5b 	bl	80247ac <HAL_GetTick>
 80270f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80270f8:	e008      	b.n	802710c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80270fa:	f7fd fb57 	bl	80247ac <HAL_GetTick>
 80270fe:	4602      	mov	r2, r0
 8027100:	693b      	ldr	r3, [r7, #16]
 8027102:	1ad3      	subs	r3, r2, r3
 8027104:	2b02      	cmp	r3, #2
 8027106:	d901      	bls.n	802710c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8027108:	2303      	movs	r3, #3
 802710a:	e03f      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802710c:	4b22      	ldr	r3, [pc, #136]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 802710e:	681b      	ldr	r3, [r3, #0]
 8027110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027114:	2b00      	cmp	r3, #0
 8027116:	d1f0      	bne.n	80270fa <HAL_RCC_OscConfig+0x44a>
 8027118:	e037      	b.n	802718a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802711a:	687b      	ldr	r3, [r7, #4]
 802711c:	699b      	ldr	r3, [r3, #24]
 802711e:	2b01      	cmp	r3, #1
 8027120:	d101      	bne.n	8027126 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8027122:	2301      	movs	r3, #1
 8027124:	e032      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8027126:	4b1c      	ldr	r3, [pc, #112]	; (8027198 <HAL_RCC_OscConfig+0x4e8>)
 8027128:	685b      	ldr	r3, [r3, #4]
 802712a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802712c:	687b      	ldr	r3, [r7, #4]
 802712e:	699b      	ldr	r3, [r3, #24]
 8027130:	2b01      	cmp	r3, #1
 8027132:	d028      	beq.n	8027186 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8027134:	68fb      	ldr	r3, [r7, #12]
 8027136:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 802713a:	687b      	ldr	r3, [r7, #4]
 802713c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802713e:	429a      	cmp	r2, r3
 8027140:	d121      	bne.n	8027186 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8027142:	68fb      	ldr	r3, [r7, #12]
 8027144:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8027148:	687b      	ldr	r3, [r7, #4]
 802714a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802714c:	429a      	cmp	r2, r3
 802714e:	d11a      	bne.n	8027186 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8027150:	68fa      	ldr	r2, [r7, #12]
 8027152:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8027156:	4013      	ands	r3, r2
 8027158:	687a      	ldr	r2, [r7, #4]
 802715a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802715c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802715e:	4293      	cmp	r3, r2
 8027160:	d111      	bne.n	8027186 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8027162:	68fb      	ldr	r3, [r7, #12]
 8027164:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8027168:	687b      	ldr	r3, [r7, #4]
 802716a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802716c:	085b      	lsrs	r3, r3, #1
 802716e:	3b01      	subs	r3, #1
 8027170:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8027172:	429a      	cmp	r2, r3
 8027174:	d107      	bne.n	8027186 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8027176:	68fb      	ldr	r3, [r7, #12]
 8027178:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 802717c:	687b      	ldr	r3, [r7, #4]
 802717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027180:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8027182:	429a      	cmp	r2, r3
 8027184:	d001      	beq.n	802718a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8027186:	2301      	movs	r3, #1
 8027188:	e000      	b.n	802718c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 802718a:	2300      	movs	r3, #0
}
 802718c:	4618      	mov	r0, r3
 802718e:	3718      	adds	r7, #24
 8027190:	46bd      	mov	sp, r7
 8027192:	bd80      	pop	{r7, pc}
 8027194:	40007000 	.word	0x40007000
 8027198:	40023800 	.word	0x40023800
 802719c:	42470060 	.word	0x42470060

080271a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80271a0:	b580      	push	{r7, lr}
 80271a2:	b084      	sub	sp, #16
 80271a4:	af00      	add	r7, sp, #0
 80271a6:	6078      	str	r0, [r7, #4]
 80271a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80271aa:	687b      	ldr	r3, [r7, #4]
 80271ac:	2b00      	cmp	r3, #0
 80271ae:	d101      	bne.n	80271b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80271b0:	2301      	movs	r3, #1
 80271b2:	e0cc      	b.n	802734e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80271b4:	4b68      	ldr	r3, [pc, #416]	; (8027358 <HAL_RCC_ClockConfig+0x1b8>)
 80271b6:	681b      	ldr	r3, [r3, #0]
 80271b8:	f003 0307 	and.w	r3, r3, #7
 80271bc:	683a      	ldr	r2, [r7, #0]
 80271be:	429a      	cmp	r2, r3
 80271c0:	d90c      	bls.n	80271dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80271c2:	4b65      	ldr	r3, [pc, #404]	; (8027358 <HAL_RCC_ClockConfig+0x1b8>)
 80271c4:	683a      	ldr	r2, [r7, #0]
 80271c6:	b2d2      	uxtb	r2, r2
 80271c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80271ca:	4b63      	ldr	r3, [pc, #396]	; (8027358 <HAL_RCC_ClockConfig+0x1b8>)
 80271cc:	681b      	ldr	r3, [r3, #0]
 80271ce:	f003 0307 	and.w	r3, r3, #7
 80271d2:	683a      	ldr	r2, [r7, #0]
 80271d4:	429a      	cmp	r2, r3
 80271d6:	d001      	beq.n	80271dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80271d8:	2301      	movs	r3, #1
 80271da:	e0b8      	b.n	802734e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80271dc:	687b      	ldr	r3, [r7, #4]
 80271de:	681b      	ldr	r3, [r3, #0]
 80271e0:	f003 0302 	and.w	r3, r3, #2
 80271e4:	2b00      	cmp	r3, #0
 80271e6:	d020      	beq.n	802722a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80271e8:	687b      	ldr	r3, [r7, #4]
 80271ea:	681b      	ldr	r3, [r3, #0]
 80271ec:	f003 0304 	and.w	r3, r3, #4
 80271f0:	2b00      	cmp	r3, #0
 80271f2:	d005      	beq.n	8027200 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80271f4:	4b59      	ldr	r3, [pc, #356]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 80271f6:	689b      	ldr	r3, [r3, #8]
 80271f8:	4a58      	ldr	r2, [pc, #352]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 80271fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80271fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027200:	687b      	ldr	r3, [r7, #4]
 8027202:	681b      	ldr	r3, [r3, #0]
 8027204:	f003 0308 	and.w	r3, r3, #8
 8027208:	2b00      	cmp	r3, #0
 802720a:	d005      	beq.n	8027218 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802720c:	4b53      	ldr	r3, [pc, #332]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 802720e:	689b      	ldr	r3, [r3, #8]
 8027210:	4a52      	ldr	r2, [pc, #328]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 8027212:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8027216:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8027218:	4b50      	ldr	r3, [pc, #320]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 802721a:	689b      	ldr	r3, [r3, #8]
 802721c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8027220:	687b      	ldr	r3, [r7, #4]
 8027222:	689b      	ldr	r3, [r3, #8]
 8027224:	494d      	ldr	r1, [pc, #308]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 8027226:	4313      	orrs	r3, r2
 8027228:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802722a:	687b      	ldr	r3, [r7, #4]
 802722c:	681b      	ldr	r3, [r3, #0]
 802722e:	f003 0301 	and.w	r3, r3, #1
 8027232:	2b00      	cmp	r3, #0
 8027234:	d044      	beq.n	80272c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8027236:	687b      	ldr	r3, [r7, #4]
 8027238:	685b      	ldr	r3, [r3, #4]
 802723a:	2b01      	cmp	r3, #1
 802723c:	d107      	bne.n	802724e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802723e:	4b47      	ldr	r3, [pc, #284]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 8027240:	681b      	ldr	r3, [r3, #0]
 8027242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027246:	2b00      	cmp	r3, #0
 8027248:	d119      	bne.n	802727e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802724a:	2301      	movs	r3, #1
 802724c:	e07f      	b.n	802734e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802724e:	687b      	ldr	r3, [r7, #4]
 8027250:	685b      	ldr	r3, [r3, #4]
 8027252:	2b02      	cmp	r3, #2
 8027254:	d003      	beq.n	802725e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8027256:	687b      	ldr	r3, [r7, #4]
 8027258:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802725a:	2b03      	cmp	r3, #3
 802725c:	d107      	bne.n	802726e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802725e:	4b3f      	ldr	r3, [pc, #252]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 8027260:	681b      	ldr	r3, [r3, #0]
 8027262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027266:	2b00      	cmp	r3, #0
 8027268:	d109      	bne.n	802727e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802726a:	2301      	movs	r3, #1
 802726c:	e06f      	b.n	802734e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802726e:	4b3b      	ldr	r3, [pc, #236]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 8027270:	681b      	ldr	r3, [r3, #0]
 8027272:	f003 0302 	and.w	r3, r3, #2
 8027276:	2b00      	cmp	r3, #0
 8027278:	d101      	bne.n	802727e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802727a:	2301      	movs	r3, #1
 802727c:	e067      	b.n	802734e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802727e:	4b37      	ldr	r3, [pc, #220]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 8027280:	689b      	ldr	r3, [r3, #8]
 8027282:	f023 0203 	bic.w	r2, r3, #3
 8027286:	687b      	ldr	r3, [r7, #4]
 8027288:	685b      	ldr	r3, [r3, #4]
 802728a:	4934      	ldr	r1, [pc, #208]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 802728c:	4313      	orrs	r3, r2
 802728e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8027290:	f7fd fa8c 	bl	80247ac <HAL_GetTick>
 8027294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027296:	e00a      	b.n	80272ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8027298:	f7fd fa88 	bl	80247ac <HAL_GetTick>
 802729c:	4602      	mov	r2, r0
 802729e:	68fb      	ldr	r3, [r7, #12]
 80272a0:	1ad3      	subs	r3, r2, r3
 80272a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80272a6:	4293      	cmp	r3, r2
 80272a8:	d901      	bls.n	80272ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80272aa:	2303      	movs	r3, #3
 80272ac:	e04f      	b.n	802734e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80272ae:	4b2b      	ldr	r3, [pc, #172]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 80272b0:	689b      	ldr	r3, [r3, #8]
 80272b2:	f003 020c 	and.w	r2, r3, #12
 80272b6:	687b      	ldr	r3, [r7, #4]
 80272b8:	685b      	ldr	r3, [r3, #4]
 80272ba:	009b      	lsls	r3, r3, #2
 80272bc:	429a      	cmp	r2, r3
 80272be:	d1eb      	bne.n	8027298 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80272c0:	4b25      	ldr	r3, [pc, #148]	; (8027358 <HAL_RCC_ClockConfig+0x1b8>)
 80272c2:	681b      	ldr	r3, [r3, #0]
 80272c4:	f003 0307 	and.w	r3, r3, #7
 80272c8:	683a      	ldr	r2, [r7, #0]
 80272ca:	429a      	cmp	r2, r3
 80272cc:	d20c      	bcs.n	80272e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80272ce:	4b22      	ldr	r3, [pc, #136]	; (8027358 <HAL_RCC_ClockConfig+0x1b8>)
 80272d0:	683a      	ldr	r2, [r7, #0]
 80272d2:	b2d2      	uxtb	r2, r2
 80272d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80272d6:	4b20      	ldr	r3, [pc, #128]	; (8027358 <HAL_RCC_ClockConfig+0x1b8>)
 80272d8:	681b      	ldr	r3, [r3, #0]
 80272da:	f003 0307 	and.w	r3, r3, #7
 80272de:	683a      	ldr	r2, [r7, #0]
 80272e0:	429a      	cmp	r2, r3
 80272e2:	d001      	beq.n	80272e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80272e4:	2301      	movs	r3, #1
 80272e6:	e032      	b.n	802734e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80272e8:	687b      	ldr	r3, [r7, #4]
 80272ea:	681b      	ldr	r3, [r3, #0]
 80272ec:	f003 0304 	and.w	r3, r3, #4
 80272f0:	2b00      	cmp	r3, #0
 80272f2:	d008      	beq.n	8027306 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80272f4:	4b19      	ldr	r3, [pc, #100]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 80272f6:	689b      	ldr	r3, [r3, #8]
 80272f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80272fc:	687b      	ldr	r3, [r7, #4]
 80272fe:	68db      	ldr	r3, [r3, #12]
 8027300:	4916      	ldr	r1, [pc, #88]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 8027302:	4313      	orrs	r3, r2
 8027304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027306:	687b      	ldr	r3, [r7, #4]
 8027308:	681b      	ldr	r3, [r3, #0]
 802730a:	f003 0308 	and.w	r3, r3, #8
 802730e:	2b00      	cmp	r3, #0
 8027310:	d009      	beq.n	8027326 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8027312:	4b12      	ldr	r3, [pc, #72]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 8027314:	689b      	ldr	r3, [r3, #8]
 8027316:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802731a:	687b      	ldr	r3, [r7, #4]
 802731c:	691b      	ldr	r3, [r3, #16]
 802731e:	00db      	lsls	r3, r3, #3
 8027320:	490e      	ldr	r1, [pc, #56]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 8027322:	4313      	orrs	r3, r2
 8027324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8027326:	f000 f821 	bl	802736c <HAL_RCC_GetSysClockFreq>
 802732a:	4602      	mov	r2, r0
 802732c:	4b0b      	ldr	r3, [pc, #44]	; (802735c <HAL_RCC_ClockConfig+0x1bc>)
 802732e:	689b      	ldr	r3, [r3, #8]
 8027330:	091b      	lsrs	r3, r3, #4
 8027332:	f003 030f 	and.w	r3, r3, #15
 8027336:	490a      	ldr	r1, [pc, #40]	; (8027360 <HAL_RCC_ClockConfig+0x1c0>)
 8027338:	5ccb      	ldrb	r3, [r1, r3]
 802733a:	fa22 f303 	lsr.w	r3, r2, r3
 802733e:	4a09      	ldr	r2, [pc, #36]	; (8027364 <HAL_RCC_ClockConfig+0x1c4>)
 8027340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8027342:	4b09      	ldr	r3, [pc, #36]	; (8027368 <HAL_RCC_ClockConfig+0x1c8>)
 8027344:	681b      	ldr	r3, [r3, #0]
 8027346:	4618      	mov	r0, r3
 8027348:	f7f0 fb5c 	bl	8017a04 <HAL_InitTick>

  return HAL_OK;
 802734c:	2300      	movs	r3, #0
}
 802734e:	4618      	mov	r0, r3
 8027350:	3710      	adds	r7, #16
 8027352:	46bd      	mov	sp, r7
 8027354:	bd80      	pop	{r7, pc}
 8027356:	bf00      	nop
 8027358:	40023c00 	.word	0x40023c00
 802735c:	40023800 	.word	0x40023800
 8027360:	08030a38 	.word	0x08030a38
 8027364:	20000080 	.word	0x20000080
 8027368:	20001438 	.word	0x20001438

0802736c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802736c:	b5b0      	push	{r4, r5, r7, lr}
 802736e:	b084      	sub	sp, #16
 8027370:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8027372:	2100      	movs	r1, #0
 8027374:	6079      	str	r1, [r7, #4]
 8027376:	2100      	movs	r1, #0
 8027378:	60f9      	str	r1, [r7, #12]
 802737a:	2100      	movs	r1, #0
 802737c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 802737e:	2100      	movs	r1, #0
 8027380:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8027382:	4952      	ldr	r1, [pc, #328]	; (80274cc <HAL_RCC_GetSysClockFreq+0x160>)
 8027384:	6889      	ldr	r1, [r1, #8]
 8027386:	f001 010c 	and.w	r1, r1, #12
 802738a:	2908      	cmp	r1, #8
 802738c:	d00d      	beq.n	80273aa <HAL_RCC_GetSysClockFreq+0x3e>
 802738e:	2908      	cmp	r1, #8
 8027390:	f200 8094 	bhi.w	80274bc <HAL_RCC_GetSysClockFreq+0x150>
 8027394:	2900      	cmp	r1, #0
 8027396:	d002      	beq.n	802739e <HAL_RCC_GetSysClockFreq+0x32>
 8027398:	2904      	cmp	r1, #4
 802739a:	d003      	beq.n	80273a4 <HAL_RCC_GetSysClockFreq+0x38>
 802739c:	e08e      	b.n	80274bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802739e:	4b4c      	ldr	r3, [pc, #304]	; (80274d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80273a0:	60bb      	str	r3, [r7, #8]
       break;
 80273a2:	e08e      	b.n	80274c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80273a4:	4b4b      	ldr	r3, [pc, #300]	; (80274d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80273a6:	60bb      	str	r3, [r7, #8]
      break;
 80273a8:	e08b      	b.n	80274c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80273aa:	4948      	ldr	r1, [pc, #288]	; (80274cc <HAL_RCC_GetSysClockFreq+0x160>)
 80273ac:	6849      	ldr	r1, [r1, #4]
 80273ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80273b2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80273b4:	4945      	ldr	r1, [pc, #276]	; (80274cc <HAL_RCC_GetSysClockFreq+0x160>)
 80273b6:	6849      	ldr	r1, [r1, #4]
 80273b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80273bc:	2900      	cmp	r1, #0
 80273be:	d024      	beq.n	802740a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80273c0:	4942      	ldr	r1, [pc, #264]	; (80274cc <HAL_RCC_GetSysClockFreq+0x160>)
 80273c2:	6849      	ldr	r1, [r1, #4]
 80273c4:	0989      	lsrs	r1, r1, #6
 80273c6:	4608      	mov	r0, r1
 80273c8:	f04f 0100 	mov.w	r1, #0
 80273cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80273d0:	f04f 0500 	mov.w	r5, #0
 80273d4:	ea00 0204 	and.w	r2, r0, r4
 80273d8:	ea01 0305 	and.w	r3, r1, r5
 80273dc:	493d      	ldr	r1, [pc, #244]	; (80274d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80273de:	fb01 f003 	mul.w	r0, r1, r3
 80273e2:	2100      	movs	r1, #0
 80273e4:	fb01 f102 	mul.w	r1, r1, r2
 80273e8:	1844      	adds	r4, r0, r1
 80273ea:	493a      	ldr	r1, [pc, #232]	; (80274d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80273ec:	fba2 0101 	umull	r0, r1, r2, r1
 80273f0:	1863      	adds	r3, r4, r1
 80273f2:	4619      	mov	r1, r3
 80273f4:	687b      	ldr	r3, [r7, #4]
 80273f6:	461a      	mov	r2, r3
 80273f8:	f04f 0300 	mov.w	r3, #0
 80273fc:	f7d9 fc36 	bl	8000c6c <__aeabi_uldivmod>
 8027400:	4602      	mov	r2, r0
 8027402:	460b      	mov	r3, r1
 8027404:	4613      	mov	r3, r2
 8027406:	60fb      	str	r3, [r7, #12]
 8027408:	e04a      	b.n	80274a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802740a:	4b30      	ldr	r3, [pc, #192]	; (80274cc <HAL_RCC_GetSysClockFreq+0x160>)
 802740c:	685b      	ldr	r3, [r3, #4]
 802740e:	099b      	lsrs	r3, r3, #6
 8027410:	461a      	mov	r2, r3
 8027412:	f04f 0300 	mov.w	r3, #0
 8027416:	f240 10ff 	movw	r0, #511	; 0x1ff
 802741a:	f04f 0100 	mov.w	r1, #0
 802741e:	ea02 0400 	and.w	r4, r2, r0
 8027422:	ea03 0501 	and.w	r5, r3, r1
 8027426:	4620      	mov	r0, r4
 8027428:	4629      	mov	r1, r5
 802742a:	f04f 0200 	mov.w	r2, #0
 802742e:	f04f 0300 	mov.w	r3, #0
 8027432:	014b      	lsls	r3, r1, #5
 8027434:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8027438:	0142      	lsls	r2, r0, #5
 802743a:	4610      	mov	r0, r2
 802743c:	4619      	mov	r1, r3
 802743e:	1b00      	subs	r0, r0, r4
 8027440:	eb61 0105 	sbc.w	r1, r1, r5
 8027444:	f04f 0200 	mov.w	r2, #0
 8027448:	f04f 0300 	mov.w	r3, #0
 802744c:	018b      	lsls	r3, r1, #6
 802744e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8027452:	0182      	lsls	r2, r0, #6
 8027454:	1a12      	subs	r2, r2, r0
 8027456:	eb63 0301 	sbc.w	r3, r3, r1
 802745a:	f04f 0000 	mov.w	r0, #0
 802745e:	f04f 0100 	mov.w	r1, #0
 8027462:	00d9      	lsls	r1, r3, #3
 8027464:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8027468:	00d0      	lsls	r0, r2, #3
 802746a:	4602      	mov	r2, r0
 802746c:	460b      	mov	r3, r1
 802746e:	1912      	adds	r2, r2, r4
 8027470:	eb45 0303 	adc.w	r3, r5, r3
 8027474:	f04f 0000 	mov.w	r0, #0
 8027478:	f04f 0100 	mov.w	r1, #0
 802747c:	0299      	lsls	r1, r3, #10
 802747e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8027482:	0290      	lsls	r0, r2, #10
 8027484:	4602      	mov	r2, r0
 8027486:	460b      	mov	r3, r1
 8027488:	4610      	mov	r0, r2
 802748a:	4619      	mov	r1, r3
 802748c:	687b      	ldr	r3, [r7, #4]
 802748e:	461a      	mov	r2, r3
 8027490:	f04f 0300 	mov.w	r3, #0
 8027494:	f7d9 fbea 	bl	8000c6c <__aeabi_uldivmod>
 8027498:	4602      	mov	r2, r0
 802749a:	460b      	mov	r3, r1
 802749c:	4613      	mov	r3, r2
 802749e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80274a0:	4b0a      	ldr	r3, [pc, #40]	; (80274cc <HAL_RCC_GetSysClockFreq+0x160>)
 80274a2:	685b      	ldr	r3, [r3, #4]
 80274a4:	0c1b      	lsrs	r3, r3, #16
 80274a6:	f003 0303 	and.w	r3, r3, #3
 80274aa:	3301      	adds	r3, #1
 80274ac:	005b      	lsls	r3, r3, #1
 80274ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80274b0:	68fa      	ldr	r2, [r7, #12]
 80274b2:	683b      	ldr	r3, [r7, #0]
 80274b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80274b8:	60bb      	str	r3, [r7, #8]
      break;
 80274ba:	e002      	b.n	80274c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80274bc:	4b04      	ldr	r3, [pc, #16]	; (80274d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80274be:	60bb      	str	r3, [r7, #8]
      break;
 80274c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80274c2:	68bb      	ldr	r3, [r7, #8]
}
 80274c4:	4618      	mov	r0, r3
 80274c6:	3710      	adds	r7, #16
 80274c8:	46bd      	mov	sp, r7
 80274ca:	bdb0      	pop	{r4, r5, r7, pc}
 80274cc:	40023800 	.word	0x40023800
 80274d0:	00f42400 	.word	0x00f42400
 80274d4:	017d7840 	.word	0x017d7840

080274d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80274d8:	b480      	push	{r7}
 80274da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80274dc:	4b03      	ldr	r3, [pc, #12]	; (80274ec <HAL_RCC_GetHCLKFreq+0x14>)
 80274de:	681b      	ldr	r3, [r3, #0]
}
 80274e0:	4618      	mov	r0, r3
 80274e2:	46bd      	mov	sp, r7
 80274e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274e8:	4770      	bx	lr
 80274ea:	bf00      	nop
 80274ec:	20000080 	.word	0x20000080

080274f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80274f0:	b580      	push	{r7, lr}
 80274f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80274f4:	f7ff fff0 	bl	80274d8 <HAL_RCC_GetHCLKFreq>
 80274f8:	4602      	mov	r2, r0
 80274fa:	4b05      	ldr	r3, [pc, #20]	; (8027510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80274fc:	689b      	ldr	r3, [r3, #8]
 80274fe:	0a9b      	lsrs	r3, r3, #10
 8027500:	f003 0307 	and.w	r3, r3, #7
 8027504:	4903      	ldr	r1, [pc, #12]	; (8027514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8027506:	5ccb      	ldrb	r3, [r1, r3]
 8027508:	fa22 f303 	lsr.w	r3, r2, r3
}
 802750c:	4618      	mov	r0, r3
 802750e:	bd80      	pop	{r7, pc}
 8027510:	40023800 	.word	0x40023800
 8027514:	08030a48 	.word	0x08030a48

08027518 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8027518:	b480      	push	{r7}
 802751a:	b083      	sub	sp, #12
 802751c:	af00      	add	r7, sp, #0
 802751e:	6078      	str	r0, [r7, #4]
 8027520:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8027522:	687b      	ldr	r3, [r7, #4]
 8027524:	220f      	movs	r2, #15
 8027526:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8027528:	4b12      	ldr	r3, [pc, #72]	; (8027574 <HAL_RCC_GetClockConfig+0x5c>)
 802752a:	689b      	ldr	r3, [r3, #8]
 802752c:	f003 0203 	and.w	r2, r3, #3
 8027530:	687b      	ldr	r3, [r7, #4]
 8027532:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8027534:	4b0f      	ldr	r3, [pc, #60]	; (8027574 <HAL_RCC_GetClockConfig+0x5c>)
 8027536:	689b      	ldr	r3, [r3, #8]
 8027538:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 802753c:	687b      	ldr	r3, [r7, #4]
 802753e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8027540:	4b0c      	ldr	r3, [pc, #48]	; (8027574 <HAL_RCC_GetClockConfig+0x5c>)
 8027542:	689b      	ldr	r3, [r3, #8]
 8027544:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027548:	687b      	ldr	r3, [r7, #4]
 802754a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 802754c:	4b09      	ldr	r3, [pc, #36]	; (8027574 <HAL_RCC_GetClockConfig+0x5c>)
 802754e:	689b      	ldr	r3, [r3, #8]
 8027550:	08db      	lsrs	r3, r3, #3
 8027552:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027556:	687b      	ldr	r3, [r7, #4]
 8027558:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 802755a:	4b07      	ldr	r3, [pc, #28]	; (8027578 <HAL_RCC_GetClockConfig+0x60>)
 802755c:	681b      	ldr	r3, [r3, #0]
 802755e:	f003 0207 	and.w	r2, r3, #7
 8027562:	683b      	ldr	r3, [r7, #0]
 8027564:	601a      	str	r2, [r3, #0]
}
 8027566:	bf00      	nop
 8027568:	370c      	adds	r7, #12
 802756a:	46bd      	mov	sp, r7
 802756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027570:	4770      	bx	lr
 8027572:	bf00      	nop
 8027574:	40023800 	.word	0x40023800
 8027578:	40023c00 	.word	0x40023c00

0802757c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 802757c:	b580      	push	{r7, lr}
 802757e:	b082      	sub	sp, #8
 8027580:	af00      	add	r7, sp, #0
 8027582:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8027584:	687b      	ldr	r3, [r7, #4]
 8027586:	2b00      	cmp	r3, #0
 8027588:	d101      	bne.n	802758e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802758a:	2301      	movs	r3, #1
 802758c:	e07b      	b.n	8027686 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 802758e:	687b      	ldr	r3, [r7, #4]
 8027590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027592:	2b00      	cmp	r3, #0
 8027594:	d108      	bne.n	80275a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8027596:	687b      	ldr	r3, [r7, #4]
 8027598:	685b      	ldr	r3, [r3, #4]
 802759a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802759e:	d009      	beq.n	80275b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80275a0:	687b      	ldr	r3, [r7, #4]
 80275a2:	2200      	movs	r2, #0
 80275a4:	61da      	str	r2, [r3, #28]
 80275a6:	e005      	b.n	80275b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80275a8:	687b      	ldr	r3, [r7, #4]
 80275aa:	2200      	movs	r2, #0
 80275ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80275ae:	687b      	ldr	r3, [r7, #4]
 80275b0:	2200      	movs	r2, #0
 80275b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80275b4:	687b      	ldr	r3, [r7, #4]
 80275b6:	2200      	movs	r2, #0
 80275b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80275ba:	687b      	ldr	r3, [r7, #4]
 80275bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80275c0:	b2db      	uxtb	r3, r3
 80275c2:	2b00      	cmp	r3, #0
 80275c4:	d106      	bne.n	80275d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80275c6:	687b      	ldr	r3, [r7, #4]
 80275c8:	2200      	movs	r2, #0
 80275ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80275ce:	6878      	ldr	r0, [r7, #4]
 80275d0:	f7f0 f984 	bl	80178dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80275d4:	687b      	ldr	r3, [r7, #4]
 80275d6:	2202      	movs	r2, #2
 80275d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80275dc:	687b      	ldr	r3, [r7, #4]
 80275de:	681b      	ldr	r3, [r3, #0]
 80275e0:	681a      	ldr	r2, [r3, #0]
 80275e2:	687b      	ldr	r3, [r7, #4]
 80275e4:	681b      	ldr	r3, [r3, #0]
 80275e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80275ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80275ec:	687b      	ldr	r3, [r7, #4]
 80275ee:	685b      	ldr	r3, [r3, #4]
 80275f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80275f4:	687b      	ldr	r3, [r7, #4]
 80275f6:	689b      	ldr	r3, [r3, #8]
 80275f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80275fc:	431a      	orrs	r2, r3
 80275fe:	687b      	ldr	r3, [r7, #4]
 8027600:	68db      	ldr	r3, [r3, #12]
 8027602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8027606:	431a      	orrs	r2, r3
 8027608:	687b      	ldr	r3, [r7, #4]
 802760a:	691b      	ldr	r3, [r3, #16]
 802760c:	f003 0302 	and.w	r3, r3, #2
 8027610:	431a      	orrs	r2, r3
 8027612:	687b      	ldr	r3, [r7, #4]
 8027614:	695b      	ldr	r3, [r3, #20]
 8027616:	f003 0301 	and.w	r3, r3, #1
 802761a:	431a      	orrs	r2, r3
 802761c:	687b      	ldr	r3, [r7, #4]
 802761e:	699b      	ldr	r3, [r3, #24]
 8027620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027624:	431a      	orrs	r2, r3
 8027626:	687b      	ldr	r3, [r7, #4]
 8027628:	69db      	ldr	r3, [r3, #28]
 802762a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802762e:	431a      	orrs	r2, r3
 8027630:	687b      	ldr	r3, [r7, #4]
 8027632:	6a1b      	ldr	r3, [r3, #32]
 8027634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027638:	ea42 0103 	orr.w	r1, r2, r3
 802763c:	687b      	ldr	r3, [r7, #4]
 802763e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027640:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8027644:	687b      	ldr	r3, [r7, #4]
 8027646:	681b      	ldr	r3, [r3, #0]
 8027648:	430a      	orrs	r2, r1
 802764a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 802764c:	687b      	ldr	r3, [r7, #4]
 802764e:	699b      	ldr	r3, [r3, #24]
 8027650:	0c1b      	lsrs	r3, r3, #16
 8027652:	f003 0104 	and.w	r1, r3, #4
 8027656:	687b      	ldr	r3, [r7, #4]
 8027658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802765a:	f003 0210 	and.w	r2, r3, #16
 802765e:	687b      	ldr	r3, [r7, #4]
 8027660:	681b      	ldr	r3, [r3, #0]
 8027662:	430a      	orrs	r2, r1
 8027664:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8027666:	687b      	ldr	r3, [r7, #4]
 8027668:	681b      	ldr	r3, [r3, #0]
 802766a:	69da      	ldr	r2, [r3, #28]
 802766c:	687b      	ldr	r3, [r7, #4]
 802766e:	681b      	ldr	r3, [r3, #0]
 8027670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8027674:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8027676:	687b      	ldr	r3, [r7, #4]
 8027678:	2200      	movs	r2, #0
 802767a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802767c:	687b      	ldr	r3, [r7, #4]
 802767e:	2201      	movs	r2, #1
 8027680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8027684:	2300      	movs	r3, #0
}
 8027686:	4618      	mov	r0, r3
 8027688:	3708      	adds	r7, #8
 802768a:	46bd      	mov	sp, r7
 802768c:	bd80      	pop	{r7, pc}

0802768e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802768e:	b580      	push	{r7, lr}
 8027690:	b088      	sub	sp, #32
 8027692:	af00      	add	r7, sp, #0
 8027694:	60f8      	str	r0, [r7, #12]
 8027696:	60b9      	str	r1, [r7, #8]
 8027698:	603b      	str	r3, [r7, #0]
 802769a:	4613      	mov	r3, r2
 802769c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 802769e:	2300      	movs	r3, #0
 80276a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80276a2:	68fb      	ldr	r3, [r7, #12]
 80276a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80276a8:	2b01      	cmp	r3, #1
 80276aa:	d101      	bne.n	80276b0 <HAL_SPI_Transmit+0x22>
 80276ac:	2302      	movs	r3, #2
 80276ae:	e126      	b.n	80278fe <HAL_SPI_Transmit+0x270>
 80276b0:	68fb      	ldr	r3, [r7, #12]
 80276b2:	2201      	movs	r2, #1
 80276b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80276b8:	f7fd f878 	bl	80247ac <HAL_GetTick>
 80276bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80276be:	88fb      	ldrh	r3, [r7, #6]
 80276c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80276c2:	68fb      	ldr	r3, [r7, #12]
 80276c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80276c8:	b2db      	uxtb	r3, r3
 80276ca:	2b01      	cmp	r3, #1
 80276cc:	d002      	beq.n	80276d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80276ce:	2302      	movs	r3, #2
 80276d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80276d2:	e10b      	b.n	80278ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80276d4:	68bb      	ldr	r3, [r7, #8]
 80276d6:	2b00      	cmp	r3, #0
 80276d8:	d002      	beq.n	80276e0 <HAL_SPI_Transmit+0x52>
 80276da:	88fb      	ldrh	r3, [r7, #6]
 80276dc:	2b00      	cmp	r3, #0
 80276de:	d102      	bne.n	80276e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80276e0:	2301      	movs	r3, #1
 80276e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80276e4:	e102      	b.n	80278ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80276e6:	68fb      	ldr	r3, [r7, #12]
 80276e8:	2203      	movs	r2, #3
 80276ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80276ee:	68fb      	ldr	r3, [r7, #12]
 80276f0:	2200      	movs	r2, #0
 80276f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80276f4:	68fb      	ldr	r3, [r7, #12]
 80276f6:	68ba      	ldr	r2, [r7, #8]
 80276f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80276fa:	68fb      	ldr	r3, [r7, #12]
 80276fc:	88fa      	ldrh	r2, [r7, #6]
 80276fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8027700:	68fb      	ldr	r3, [r7, #12]
 8027702:	88fa      	ldrh	r2, [r7, #6]
 8027704:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8027706:	68fb      	ldr	r3, [r7, #12]
 8027708:	2200      	movs	r2, #0
 802770a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 802770c:	68fb      	ldr	r3, [r7, #12]
 802770e:	2200      	movs	r2, #0
 8027710:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8027712:	68fb      	ldr	r3, [r7, #12]
 8027714:	2200      	movs	r2, #0
 8027716:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8027718:	68fb      	ldr	r3, [r7, #12]
 802771a:	2200      	movs	r2, #0
 802771c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 802771e:	68fb      	ldr	r3, [r7, #12]
 8027720:	2200      	movs	r2, #0
 8027722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027724:	68fb      	ldr	r3, [r7, #12]
 8027726:	689b      	ldr	r3, [r3, #8]
 8027728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802772c:	d10f      	bne.n	802774e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 802772e:	68fb      	ldr	r3, [r7, #12]
 8027730:	681b      	ldr	r3, [r3, #0]
 8027732:	681a      	ldr	r2, [r3, #0]
 8027734:	68fb      	ldr	r3, [r7, #12]
 8027736:	681b      	ldr	r3, [r3, #0]
 8027738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802773c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 802773e:	68fb      	ldr	r3, [r7, #12]
 8027740:	681b      	ldr	r3, [r3, #0]
 8027742:	681a      	ldr	r2, [r3, #0]
 8027744:	68fb      	ldr	r3, [r7, #12]
 8027746:	681b      	ldr	r3, [r3, #0]
 8027748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802774c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802774e:	68fb      	ldr	r3, [r7, #12]
 8027750:	681b      	ldr	r3, [r3, #0]
 8027752:	681b      	ldr	r3, [r3, #0]
 8027754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027758:	2b40      	cmp	r3, #64	; 0x40
 802775a:	d007      	beq.n	802776c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802775c:	68fb      	ldr	r3, [r7, #12]
 802775e:	681b      	ldr	r3, [r3, #0]
 8027760:	681a      	ldr	r2, [r3, #0]
 8027762:	68fb      	ldr	r3, [r7, #12]
 8027764:	681b      	ldr	r3, [r3, #0]
 8027766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802776a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802776c:	68fb      	ldr	r3, [r7, #12]
 802776e:	68db      	ldr	r3, [r3, #12]
 8027770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8027774:	d14b      	bne.n	802780e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027776:	68fb      	ldr	r3, [r7, #12]
 8027778:	685b      	ldr	r3, [r3, #4]
 802777a:	2b00      	cmp	r3, #0
 802777c:	d002      	beq.n	8027784 <HAL_SPI_Transmit+0xf6>
 802777e:	8afb      	ldrh	r3, [r7, #22]
 8027780:	2b01      	cmp	r3, #1
 8027782:	d13e      	bne.n	8027802 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027784:	68fb      	ldr	r3, [r7, #12]
 8027786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027788:	881a      	ldrh	r2, [r3, #0]
 802778a:	68fb      	ldr	r3, [r7, #12]
 802778c:	681b      	ldr	r3, [r3, #0]
 802778e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8027790:	68fb      	ldr	r3, [r7, #12]
 8027792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027794:	1c9a      	adds	r2, r3, #2
 8027796:	68fb      	ldr	r3, [r7, #12]
 8027798:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802779a:	68fb      	ldr	r3, [r7, #12]
 802779c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802779e:	b29b      	uxth	r3, r3
 80277a0:	3b01      	subs	r3, #1
 80277a2:	b29a      	uxth	r2, r3
 80277a4:	68fb      	ldr	r3, [r7, #12]
 80277a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80277a8:	e02b      	b.n	8027802 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80277aa:	68fb      	ldr	r3, [r7, #12]
 80277ac:	681b      	ldr	r3, [r3, #0]
 80277ae:	689b      	ldr	r3, [r3, #8]
 80277b0:	f003 0302 	and.w	r3, r3, #2
 80277b4:	2b02      	cmp	r3, #2
 80277b6:	d112      	bne.n	80277de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80277b8:	68fb      	ldr	r3, [r7, #12]
 80277ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80277bc:	881a      	ldrh	r2, [r3, #0]
 80277be:	68fb      	ldr	r3, [r7, #12]
 80277c0:	681b      	ldr	r3, [r3, #0]
 80277c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80277c4:	68fb      	ldr	r3, [r7, #12]
 80277c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80277c8:	1c9a      	adds	r2, r3, #2
 80277ca:	68fb      	ldr	r3, [r7, #12]
 80277cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80277ce:	68fb      	ldr	r3, [r7, #12]
 80277d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80277d2:	b29b      	uxth	r3, r3
 80277d4:	3b01      	subs	r3, #1
 80277d6:	b29a      	uxth	r2, r3
 80277d8:	68fb      	ldr	r3, [r7, #12]
 80277da:	86da      	strh	r2, [r3, #54]	; 0x36
 80277dc:	e011      	b.n	8027802 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80277de:	f7fc ffe5 	bl	80247ac <HAL_GetTick>
 80277e2:	4602      	mov	r2, r0
 80277e4:	69bb      	ldr	r3, [r7, #24]
 80277e6:	1ad3      	subs	r3, r2, r3
 80277e8:	683a      	ldr	r2, [r7, #0]
 80277ea:	429a      	cmp	r2, r3
 80277ec:	d803      	bhi.n	80277f6 <HAL_SPI_Transmit+0x168>
 80277ee:	683b      	ldr	r3, [r7, #0]
 80277f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80277f4:	d102      	bne.n	80277fc <HAL_SPI_Transmit+0x16e>
 80277f6:	683b      	ldr	r3, [r7, #0]
 80277f8:	2b00      	cmp	r3, #0
 80277fa:	d102      	bne.n	8027802 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80277fc:	2303      	movs	r3, #3
 80277fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8027800:	e074      	b.n	80278ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8027802:	68fb      	ldr	r3, [r7, #12]
 8027804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027806:	b29b      	uxth	r3, r3
 8027808:	2b00      	cmp	r3, #0
 802780a:	d1ce      	bne.n	80277aa <HAL_SPI_Transmit+0x11c>
 802780c:	e04c      	b.n	80278a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802780e:	68fb      	ldr	r3, [r7, #12]
 8027810:	685b      	ldr	r3, [r3, #4]
 8027812:	2b00      	cmp	r3, #0
 8027814:	d002      	beq.n	802781c <HAL_SPI_Transmit+0x18e>
 8027816:	8afb      	ldrh	r3, [r7, #22]
 8027818:	2b01      	cmp	r3, #1
 802781a:	d140      	bne.n	802789e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802781c:	68fb      	ldr	r3, [r7, #12]
 802781e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027820:	68fb      	ldr	r3, [r7, #12]
 8027822:	681b      	ldr	r3, [r3, #0]
 8027824:	330c      	adds	r3, #12
 8027826:	7812      	ldrb	r2, [r2, #0]
 8027828:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 802782a:	68fb      	ldr	r3, [r7, #12]
 802782c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802782e:	1c5a      	adds	r2, r3, #1
 8027830:	68fb      	ldr	r3, [r7, #12]
 8027832:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027834:	68fb      	ldr	r3, [r7, #12]
 8027836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027838:	b29b      	uxth	r3, r3
 802783a:	3b01      	subs	r3, #1
 802783c:	b29a      	uxth	r2, r3
 802783e:	68fb      	ldr	r3, [r7, #12]
 8027840:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8027842:	e02c      	b.n	802789e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8027844:	68fb      	ldr	r3, [r7, #12]
 8027846:	681b      	ldr	r3, [r3, #0]
 8027848:	689b      	ldr	r3, [r3, #8]
 802784a:	f003 0302 	and.w	r3, r3, #2
 802784e:	2b02      	cmp	r3, #2
 8027850:	d113      	bne.n	802787a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027852:	68fb      	ldr	r3, [r7, #12]
 8027854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027856:	68fb      	ldr	r3, [r7, #12]
 8027858:	681b      	ldr	r3, [r3, #0]
 802785a:	330c      	adds	r3, #12
 802785c:	7812      	ldrb	r2, [r2, #0]
 802785e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8027860:	68fb      	ldr	r3, [r7, #12]
 8027862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027864:	1c5a      	adds	r2, r3, #1
 8027866:	68fb      	ldr	r3, [r7, #12]
 8027868:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802786a:	68fb      	ldr	r3, [r7, #12]
 802786c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802786e:	b29b      	uxth	r3, r3
 8027870:	3b01      	subs	r3, #1
 8027872:	b29a      	uxth	r2, r3
 8027874:	68fb      	ldr	r3, [r7, #12]
 8027876:	86da      	strh	r2, [r3, #54]	; 0x36
 8027878:	e011      	b.n	802789e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802787a:	f7fc ff97 	bl	80247ac <HAL_GetTick>
 802787e:	4602      	mov	r2, r0
 8027880:	69bb      	ldr	r3, [r7, #24]
 8027882:	1ad3      	subs	r3, r2, r3
 8027884:	683a      	ldr	r2, [r7, #0]
 8027886:	429a      	cmp	r2, r3
 8027888:	d803      	bhi.n	8027892 <HAL_SPI_Transmit+0x204>
 802788a:	683b      	ldr	r3, [r7, #0]
 802788c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027890:	d102      	bne.n	8027898 <HAL_SPI_Transmit+0x20a>
 8027892:	683b      	ldr	r3, [r7, #0]
 8027894:	2b00      	cmp	r3, #0
 8027896:	d102      	bne.n	802789e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8027898:	2303      	movs	r3, #3
 802789a:	77fb      	strb	r3, [r7, #31]
          goto error;
 802789c:	e026      	b.n	80278ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 802789e:	68fb      	ldr	r3, [r7, #12]
 80278a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80278a2:	b29b      	uxth	r3, r3
 80278a4:	2b00      	cmp	r3, #0
 80278a6:	d1cd      	bne.n	8027844 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80278a8:	69ba      	ldr	r2, [r7, #24]
 80278aa:	6839      	ldr	r1, [r7, #0]
 80278ac:	68f8      	ldr	r0, [r7, #12]
 80278ae:	f000 fbcb 	bl	8028048 <SPI_EndRxTxTransaction>
 80278b2:	4603      	mov	r3, r0
 80278b4:	2b00      	cmp	r3, #0
 80278b6:	d002      	beq.n	80278be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80278b8:	68fb      	ldr	r3, [r7, #12]
 80278ba:	2220      	movs	r2, #32
 80278bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80278be:	68fb      	ldr	r3, [r7, #12]
 80278c0:	689b      	ldr	r3, [r3, #8]
 80278c2:	2b00      	cmp	r3, #0
 80278c4:	d10a      	bne.n	80278dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80278c6:	2300      	movs	r3, #0
 80278c8:	613b      	str	r3, [r7, #16]
 80278ca:	68fb      	ldr	r3, [r7, #12]
 80278cc:	681b      	ldr	r3, [r3, #0]
 80278ce:	68db      	ldr	r3, [r3, #12]
 80278d0:	613b      	str	r3, [r7, #16]
 80278d2:	68fb      	ldr	r3, [r7, #12]
 80278d4:	681b      	ldr	r3, [r3, #0]
 80278d6:	689b      	ldr	r3, [r3, #8]
 80278d8:	613b      	str	r3, [r7, #16]
 80278da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80278dc:	68fb      	ldr	r3, [r7, #12]
 80278de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80278e0:	2b00      	cmp	r3, #0
 80278e2:	d002      	beq.n	80278ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80278e4:	2301      	movs	r3, #1
 80278e6:	77fb      	strb	r3, [r7, #31]
 80278e8:	e000      	b.n	80278ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80278ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80278ec:	68fb      	ldr	r3, [r7, #12]
 80278ee:	2201      	movs	r2, #1
 80278f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80278f4:	68fb      	ldr	r3, [r7, #12]
 80278f6:	2200      	movs	r2, #0
 80278f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80278fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80278fe:	4618      	mov	r0, r3
 8027900:	3720      	adds	r7, #32
 8027902:	46bd      	mov	sp, r7
 8027904:	bd80      	pop	{r7, pc}

08027906 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8027906:	b580      	push	{r7, lr}
 8027908:	b088      	sub	sp, #32
 802790a:	af02      	add	r7, sp, #8
 802790c:	60f8      	str	r0, [r7, #12]
 802790e:	60b9      	str	r1, [r7, #8]
 8027910:	603b      	str	r3, [r7, #0]
 8027912:	4613      	mov	r3, r2
 8027914:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8027916:	2300      	movs	r3, #0
 8027918:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 802791a:	68fb      	ldr	r3, [r7, #12]
 802791c:	685b      	ldr	r3, [r3, #4]
 802791e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027922:	d112      	bne.n	802794a <HAL_SPI_Receive+0x44>
 8027924:	68fb      	ldr	r3, [r7, #12]
 8027926:	689b      	ldr	r3, [r3, #8]
 8027928:	2b00      	cmp	r3, #0
 802792a:	d10e      	bne.n	802794a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 802792c:	68fb      	ldr	r3, [r7, #12]
 802792e:	2204      	movs	r2, #4
 8027930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8027934:	88fa      	ldrh	r2, [r7, #6]
 8027936:	683b      	ldr	r3, [r7, #0]
 8027938:	9300      	str	r3, [sp, #0]
 802793a:	4613      	mov	r3, r2
 802793c:	68ba      	ldr	r2, [r7, #8]
 802793e:	68b9      	ldr	r1, [r7, #8]
 8027940:	68f8      	ldr	r0, [r7, #12]
 8027942:	f000 f8f1 	bl	8027b28 <HAL_SPI_TransmitReceive>
 8027946:	4603      	mov	r3, r0
 8027948:	e0ea      	b.n	8027b20 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 802794a:	68fb      	ldr	r3, [r7, #12]
 802794c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027950:	2b01      	cmp	r3, #1
 8027952:	d101      	bne.n	8027958 <HAL_SPI_Receive+0x52>
 8027954:	2302      	movs	r3, #2
 8027956:	e0e3      	b.n	8027b20 <HAL_SPI_Receive+0x21a>
 8027958:	68fb      	ldr	r3, [r7, #12]
 802795a:	2201      	movs	r2, #1
 802795c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027960:	f7fc ff24 	bl	80247ac <HAL_GetTick>
 8027964:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8027966:	68fb      	ldr	r3, [r7, #12]
 8027968:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802796c:	b2db      	uxtb	r3, r3
 802796e:	2b01      	cmp	r3, #1
 8027970:	d002      	beq.n	8027978 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8027972:	2302      	movs	r3, #2
 8027974:	75fb      	strb	r3, [r7, #23]
    goto error;
 8027976:	e0ca      	b.n	8027b0e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8027978:	68bb      	ldr	r3, [r7, #8]
 802797a:	2b00      	cmp	r3, #0
 802797c:	d002      	beq.n	8027984 <HAL_SPI_Receive+0x7e>
 802797e:	88fb      	ldrh	r3, [r7, #6]
 8027980:	2b00      	cmp	r3, #0
 8027982:	d102      	bne.n	802798a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8027984:	2301      	movs	r3, #1
 8027986:	75fb      	strb	r3, [r7, #23]
    goto error;
 8027988:	e0c1      	b.n	8027b0e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 802798a:	68fb      	ldr	r3, [r7, #12]
 802798c:	2204      	movs	r2, #4
 802798e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027992:	68fb      	ldr	r3, [r7, #12]
 8027994:	2200      	movs	r2, #0
 8027996:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8027998:	68fb      	ldr	r3, [r7, #12]
 802799a:	68ba      	ldr	r2, [r7, #8]
 802799c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 802799e:	68fb      	ldr	r3, [r7, #12]
 80279a0:	88fa      	ldrh	r2, [r7, #6]
 80279a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80279a4:	68fb      	ldr	r3, [r7, #12]
 80279a6:	88fa      	ldrh	r2, [r7, #6]
 80279a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80279aa:	68fb      	ldr	r3, [r7, #12]
 80279ac:	2200      	movs	r2, #0
 80279ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80279b0:	68fb      	ldr	r3, [r7, #12]
 80279b2:	2200      	movs	r2, #0
 80279b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80279b6:	68fb      	ldr	r3, [r7, #12]
 80279b8:	2200      	movs	r2, #0
 80279ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80279bc:	68fb      	ldr	r3, [r7, #12]
 80279be:	2200      	movs	r2, #0
 80279c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80279c2:	68fb      	ldr	r3, [r7, #12]
 80279c4:	2200      	movs	r2, #0
 80279c6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80279c8:	68fb      	ldr	r3, [r7, #12]
 80279ca:	689b      	ldr	r3, [r3, #8]
 80279cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80279d0:	d10f      	bne.n	80279f2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80279d2:	68fb      	ldr	r3, [r7, #12]
 80279d4:	681b      	ldr	r3, [r3, #0]
 80279d6:	681a      	ldr	r2, [r3, #0]
 80279d8:	68fb      	ldr	r3, [r7, #12]
 80279da:	681b      	ldr	r3, [r3, #0]
 80279dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80279e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80279e2:	68fb      	ldr	r3, [r7, #12]
 80279e4:	681b      	ldr	r3, [r3, #0]
 80279e6:	681a      	ldr	r2, [r3, #0]
 80279e8:	68fb      	ldr	r3, [r7, #12]
 80279ea:	681b      	ldr	r3, [r3, #0]
 80279ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80279f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80279f2:	68fb      	ldr	r3, [r7, #12]
 80279f4:	681b      	ldr	r3, [r3, #0]
 80279f6:	681b      	ldr	r3, [r3, #0]
 80279f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80279fc:	2b40      	cmp	r3, #64	; 0x40
 80279fe:	d007      	beq.n	8027a10 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8027a00:	68fb      	ldr	r3, [r7, #12]
 8027a02:	681b      	ldr	r3, [r3, #0]
 8027a04:	681a      	ldr	r2, [r3, #0]
 8027a06:	68fb      	ldr	r3, [r7, #12]
 8027a08:	681b      	ldr	r3, [r3, #0]
 8027a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027a0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8027a10:	68fb      	ldr	r3, [r7, #12]
 8027a12:	68db      	ldr	r3, [r3, #12]
 8027a14:	2b00      	cmp	r3, #0
 8027a16:	d162      	bne.n	8027ade <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8027a18:	e02e      	b.n	8027a78 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8027a1a:	68fb      	ldr	r3, [r7, #12]
 8027a1c:	681b      	ldr	r3, [r3, #0]
 8027a1e:	689b      	ldr	r3, [r3, #8]
 8027a20:	f003 0301 	and.w	r3, r3, #1
 8027a24:	2b01      	cmp	r3, #1
 8027a26:	d115      	bne.n	8027a54 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8027a28:	68fb      	ldr	r3, [r7, #12]
 8027a2a:	681b      	ldr	r3, [r3, #0]
 8027a2c:	f103 020c 	add.w	r2, r3, #12
 8027a30:	68fb      	ldr	r3, [r7, #12]
 8027a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027a34:	7812      	ldrb	r2, [r2, #0]
 8027a36:	b2d2      	uxtb	r2, r2
 8027a38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8027a3a:	68fb      	ldr	r3, [r7, #12]
 8027a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027a3e:	1c5a      	adds	r2, r3, #1
 8027a40:	68fb      	ldr	r3, [r7, #12]
 8027a42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027a44:	68fb      	ldr	r3, [r7, #12]
 8027a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027a48:	b29b      	uxth	r3, r3
 8027a4a:	3b01      	subs	r3, #1
 8027a4c:	b29a      	uxth	r2, r3
 8027a4e:	68fb      	ldr	r3, [r7, #12]
 8027a50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8027a52:	e011      	b.n	8027a78 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027a54:	f7fc feaa 	bl	80247ac <HAL_GetTick>
 8027a58:	4602      	mov	r2, r0
 8027a5a:	693b      	ldr	r3, [r7, #16]
 8027a5c:	1ad3      	subs	r3, r2, r3
 8027a5e:	683a      	ldr	r2, [r7, #0]
 8027a60:	429a      	cmp	r2, r3
 8027a62:	d803      	bhi.n	8027a6c <HAL_SPI_Receive+0x166>
 8027a64:	683b      	ldr	r3, [r7, #0]
 8027a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027a6a:	d102      	bne.n	8027a72 <HAL_SPI_Receive+0x16c>
 8027a6c:	683b      	ldr	r3, [r7, #0]
 8027a6e:	2b00      	cmp	r3, #0
 8027a70:	d102      	bne.n	8027a78 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8027a72:	2303      	movs	r3, #3
 8027a74:	75fb      	strb	r3, [r7, #23]
          goto error;
 8027a76:	e04a      	b.n	8027b0e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8027a78:	68fb      	ldr	r3, [r7, #12]
 8027a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027a7c:	b29b      	uxth	r3, r3
 8027a7e:	2b00      	cmp	r3, #0
 8027a80:	d1cb      	bne.n	8027a1a <HAL_SPI_Receive+0x114>
 8027a82:	e031      	b.n	8027ae8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8027a84:	68fb      	ldr	r3, [r7, #12]
 8027a86:	681b      	ldr	r3, [r3, #0]
 8027a88:	689b      	ldr	r3, [r3, #8]
 8027a8a:	f003 0301 	and.w	r3, r3, #1
 8027a8e:	2b01      	cmp	r3, #1
 8027a90:	d113      	bne.n	8027aba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8027a92:	68fb      	ldr	r3, [r7, #12]
 8027a94:	681b      	ldr	r3, [r3, #0]
 8027a96:	68da      	ldr	r2, [r3, #12]
 8027a98:	68fb      	ldr	r3, [r7, #12]
 8027a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027a9c:	b292      	uxth	r2, r2
 8027a9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027aa0:	68fb      	ldr	r3, [r7, #12]
 8027aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027aa4:	1c9a      	adds	r2, r3, #2
 8027aa6:	68fb      	ldr	r3, [r7, #12]
 8027aa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027aaa:	68fb      	ldr	r3, [r7, #12]
 8027aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027aae:	b29b      	uxth	r3, r3
 8027ab0:	3b01      	subs	r3, #1
 8027ab2:	b29a      	uxth	r2, r3
 8027ab4:	68fb      	ldr	r3, [r7, #12]
 8027ab6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8027ab8:	e011      	b.n	8027ade <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027aba:	f7fc fe77 	bl	80247ac <HAL_GetTick>
 8027abe:	4602      	mov	r2, r0
 8027ac0:	693b      	ldr	r3, [r7, #16]
 8027ac2:	1ad3      	subs	r3, r2, r3
 8027ac4:	683a      	ldr	r2, [r7, #0]
 8027ac6:	429a      	cmp	r2, r3
 8027ac8:	d803      	bhi.n	8027ad2 <HAL_SPI_Receive+0x1cc>
 8027aca:	683b      	ldr	r3, [r7, #0]
 8027acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027ad0:	d102      	bne.n	8027ad8 <HAL_SPI_Receive+0x1d2>
 8027ad2:	683b      	ldr	r3, [r7, #0]
 8027ad4:	2b00      	cmp	r3, #0
 8027ad6:	d102      	bne.n	8027ade <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8027ad8:	2303      	movs	r3, #3
 8027ada:	75fb      	strb	r3, [r7, #23]
          goto error;
 8027adc:	e017      	b.n	8027b0e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8027ade:	68fb      	ldr	r3, [r7, #12]
 8027ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027ae2:	b29b      	uxth	r3, r3
 8027ae4:	2b00      	cmp	r3, #0
 8027ae6:	d1cd      	bne.n	8027a84 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027ae8:	693a      	ldr	r2, [r7, #16]
 8027aea:	6839      	ldr	r1, [r7, #0]
 8027aec:	68f8      	ldr	r0, [r7, #12]
 8027aee:	f000 fa45 	bl	8027f7c <SPI_EndRxTransaction>
 8027af2:	4603      	mov	r3, r0
 8027af4:	2b00      	cmp	r3, #0
 8027af6:	d002      	beq.n	8027afe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027af8:	68fb      	ldr	r3, [r7, #12]
 8027afa:	2220      	movs	r2, #32
 8027afc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8027afe:	68fb      	ldr	r3, [r7, #12]
 8027b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027b02:	2b00      	cmp	r3, #0
 8027b04:	d002      	beq.n	8027b0c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8027b06:	2301      	movs	r3, #1
 8027b08:	75fb      	strb	r3, [r7, #23]
 8027b0a:	e000      	b.n	8027b0e <HAL_SPI_Receive+0x208>
  }

error :
 8027b0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027b0e:	68fb      	ldr	r3, [r7, #12]
 8027b10:	2201      	movs	r2, #1
 8027b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8027b16:	68fb      	ldr	r3, [r7, #12]
 8027b18:	2200      	movs	r2, #0
 8027b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8027b20:	4618      	mov	r0, r3
 8027b22:	3718      	adds	r7, #24
 8027b24:	46bd      	mov	sp, r7
 8027b26:	bd80      	pop	{r7, pc}

08027b28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8027b28:	b580      	push	{r7, lr}
 8027b2a:	b08c      	sub	sp, #48	; 0x30
 8027b2c:	af00      	add	r7, sp, #0
 8027b2e:	60f8      	str	r0, [r7, #12]
 8027b30:	60b9      	str	r1, [r7, #8]
 8027b32:	607a      	str	r2, [r7, #4]
 8027b34:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8027b36:	2301      	movs	r3, #1
 8027b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8027b3a:	2300      	movs	r3, #0
 8027b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8027b40:	68fb      	ldr	r3, [r7, #12]
 8027b42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027b46:	2b01      	cmp	r3, #1
 8027b48:	d101      	bne.n	8027b4e <HAL_SPI_TransmitReceive+0x26>
 8027b4a:	2302      	movs	r3, #2
 8027b4c:	e18a      	b.n	8027e64 <HAL_SPI_TransmitReceive+0x33c>
 8027b4e:	68fb      	ldr	r3, [r7, #12]
 8027b50:	2201      	movs	r2, #1
 8027b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027b56:	f7fc fe29 	bl	80247ac <HAL_GetTick>
 8027b5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8027b5c:	68fb      	ldr	r3, [r7, #12]
 8027b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8027b66:	68fb      	ldr	r3, [r7, #12]
 8027b68:	685b      	ldr	r3, [r3, #4]
 8027b6a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8027b6c:	887b      	ldrh	r3, [r7, #2]
 8027b6e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8027b70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027b74:	2b01      	cmp	r3, #1
 8027b76:	d00f      	beq.n	8027b98 <HAL_SPI_TransmitReceive+0x70>
 8027b78:	69fb      	ldr	r3, [r7, #28]
 8027b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027b7e:	d107      	bne.n	8027b90 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8027b80:	68fb      	ldr	r3, [r7, #12]
 8027b82:	689b      	ldr	r3, [r3, #8]
 8027b84:	2b00      	cmp	r3, #0
 8027b86:	d103      	bne.n	8027b90 <HAL_SPI_TransmitReceive+0x68>
 8027b88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027b8c:	2b04      	cmp	r3, #4
 8027b8e:	d003      	beq.n	8027b98 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8027b90:	2302      	movs	r3, #2
 8027b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027b96:	e15b      	b.n	8027e50 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8027b98:	68bb      	ldr	r3, [r7, #8]
 8027b9a:	2b00      	cmp	r3, #0
 8027b9c:	d005      	beq.n	8027baa <HAL_SPI_TransmitReceive+0x82>
 8027b9e:	687b      	ldr	r3, [r7, #4]
 8027ba0:	2b00      	cmp	r3, #0
 8027ba2:	d002      	beq.n	8027baa <HAL_SPI_TransmitReceive+0x82>
 8027ba4:	887b      	ldrh	r3, [r7, #2]
 8027ba6:	2b00      	cmp	r3, #0
 8027ba8:	d103      	bne.n	8027bb2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8027baa:	2301      	movs	r3, #1
 8027bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027bb0:	e14e      	b.n	8027e50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8027bb2:	68fb      	ldr	r3, [r7, #12]
 8027bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027bb8:	b2db      	uxtb	r3, r3
 8027bba:	2b04      	cmp	r3, #4
 8027bbc:	d003      	beq.n	8027bc6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8027bbe:	68fb      	ldr	r3, [r7, #12]
 8027bc0:	2205      	movs	r2, #5
 8027bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027bc6:	68fb      	ldr	r3, [r7, #12]
 8027bc8:	2200      	movs	r2, #0
 8027bca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8027bcc:	68fb      	ldr	r3, [r7, #12]
 8027bce:	687a      	ldr	r2, [r7, #4]
 8027bd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8027bd2:	68fb      	ldr	r3, [r7, #12]
 8027bd4:	887a      	ldrh	r2, [r7, #2]
 8027bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8027bd8:	68fb      	ldr	r3, [r7, #12]
 8027bda:	887a      	ldrh	r2, [r7, #2]
 8027bdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8027bde:	68fb      	ldr	r3, [r7, #12]
 8027be0:	68ba      	ldr	r2, [r7, #8]
 8027be2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8027be4:	68fb      	ldr	r3, [r7, #12]
 8027be6:	887a      	ldrh	r2, [r7, #2]
 8027be8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8027bea:	68fb      	ldr	r3, [r7, #12]
 8027bec:	887a      	ldrh	r2, [r7, #2]
 8027bee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8027bf0:	68fb      	ldr	r3, [r7, #12]
 8027bf2:	2200      	movs	r2, #0
 8027bf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8027bf6:	68fb      	ldr	r3, [r7, #12]
 8027bf8:	2200      	movs	r2, #0
 8027bfa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027bfc:	68fb      	ldr	r3, [r7, #12]
 8027bfe:	681b      	ldr	r3, [r3, #0]
 8027c00:	681b      	ldr	r3, [r3, #0]
 8027c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027c06:	2b40      	cmp	r3, #64	; 0x40
 8027c08:	d007      	beq.n	8027c1a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8027c0a:	68fb      	ldr	r3, [r7, #12]
 8027c0c:	681b      	ldr	r3, [r3, #0]
 8027c0e:	681a      	ldr	r2, [r3, #0]
 8027c10:	68fb      	ldr	r3, [r7, #12]
 8027c12:	681b      	ldr	r3, [r3, #0]
 8027c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027c18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8027c1a:	68fb      	ldr	r3, [r7, #12]
 8027c1c:	68db      	ldr	r3, [r3, #12]
 8027c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8027c22:	d178      	bne.n	8027d16 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027c24:	68fb      	ldr	r3, [r7, #12]
 8027c26:	685b      	ldr	r3, [r3, #4]
 8027c28:	2b00      	cmp	r3, #0
 8027c2a:	d002      	beq.n	8027c32 <HAL_SPI_TransmitReceive+0x10a>
 8027c2c:	8b7b      	ldrh	r3, [r7, #26]
 8027c2e:	2b01      	cmp	r3, #1
 8027c30:	d166      	bne.n	8027d00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027c32:	68fb      	ldr	r3, [r7, #12]
 8027c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c36:	881a      	ldrh	r2, [r3, #0]
 8027c38:	68fb      	ldr	r3, [r7, #12]
 8027c3a:	681b      	ldr	r3, [r3, #0]
 8027c3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8027c3e:	68fb      	ldr	r3, [r7, #12]
 8027c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c42:	1c9a      	adds	r2, r3, #2
 8027c44:	68fb      	ldr	r3, [r7, #12]
 8027c46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027c48:	68fb      	ldr	r3, [r7, #12]
 8027c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027c4c:	b29b      	uxth	r3, r3
 8027c4e:	3b01      	subs	r3, #1
 8027c50:	b29a      	uxth	r2, r3
 8027c52:	68fb      	ldr	r3, [r7, #12]
 8027c54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027c56:	e053      	b.n	8027d00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027c58:	68fb      	ldr	r3, [r7, #12]
 8027c5a:	681b      	ldr	r3, [r3, #0]
 8027c5c:	689b      	ldr	r3, [r3, #8]
 8027c5e:	f003 0302 	and.w	r3, r3, #2
 8027c62:	2b02      	cmp	r3, #2
 8027c64:	d11b      	bne.n	8027c9e <HAL_SPI_TransmitReceive+0x176>
 8027c66:	68fb      	ldr	r3, [r7, #12]
 8027c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027c6a:	b29b      	uxth	r3, r3
 8027c6c:	2b00      	cmp	r3, #0
 8027c6e:	d016      	beq.n	8027c9e <HAL_SPI_TransmitReceive+0x176>
 8027c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027c72:	2b01      	cmp	r3, #1
 8027c74:	d113      	bne.n	8027c9e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027c76:	68fb      	ldr	r3, [r7, #12]
 8027c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c7a:	881a      	ldrh	r2, [r3, #0]
 8027c7c:	68fb      	ldr	r3, [r7, #12]
 8027c7e:	681b      	ldr	r3, [r3, #0]
 8027c80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8027c82:	68fb      	ldr	r3, [r7, #12]
 8027c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c86:	1c9a      	adds	r2, r3, #2
 8027c88:	68fb      	ldr	r3, [r7, #12]
 8027c8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027c8c:	68fb      	ldr	r3, [r7, #12]
 8027c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027c90:	b29b      	uxth	r3, r3
 8027c92:	3b01      	subs	r3, #1
 8027c94:	b29a      	uxth	r2, r3
 8027c96:	68fb      	ldr	r3, [r7, #12]
 8027c98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027c9a:	2300      	movs	r3, #0
 8027c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027c9e:	68fb      	ldr	r3, [r7, #12]
 8027ca0:	681b      	ldr	r3, [r3, #0]
 8027ca2:	689b      	ldr	r3, [r3, #8]
 8027ca4:	f003 0301 	and.w	r3, r3, #1
 8027ca8:	2b01      	cmp	r3, #1
 8027caa:	d119      	bne.n	8027ce0 <HAL_SPI_TransmitReceive+0x1b8>
 8027cac:	68fb      	ldr	r3, [r7, #12]
 8027cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027cb0:	b29b      	uxth	r3, r3
 8027cb2:	2b00      	cmp	r3, #0
 8027cb4:	d014      	beq.n	8027ce0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8027cb6:	68fb      	ldr	r3, [r7, #12]
 8027cb8:	681b      	ldr	r3, [r3, #0]
 8027cba:	68da      	ldr	r2, [r3, #12]
 8027cbc:	68fb      	ldr	r3, [r7, #12]
 8027cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027cc0:	b292      	uxth	r2, r2
 8027cc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027cc4:	68fb      	ldr	r3, [r7, #12]
 8027cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027cc8:	1c9a      	adds	r2, r3, #2
 8027cca:	68fb      	ldr	r3, [r7, #12]
 8027ccc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027cce:	68fb      	ldr	r3, [r7, #12]
 8027cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027cd2:	b29b      	uxth	r3, r3
 8027cd4:	3b01      	subs	r3, #1
 8027cd6:	b29a      	uxth	r2, r3
 8027cd8:	68fb      	ldr	r3, [r7, #12]
 8027cda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027cdc:	2301      	movs	r3, #1
 8027cde:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8027ce0:	f7fc fd64 	bl	80247ac <HAL_GetTick>
 8027ce4:	4602      	mov	r2, r0
 8027ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027ce8:	1ad3      	subs	r3, r2, r3
 8027cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027cec:	429a      	cmp	r2, r3
 8027cee:	d807      	bhi.n	8027d00 <HAL_SPI_TransmitReceive+0x1d8>
 8027cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027cf6:	d003      	beq.n	8027d00 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8027cf8:	2303      	movs	r3, #3
 8027cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027cfe:	e0a7      	b.n	8027e50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027d00:	68fb      	ldr	r3, [r7, #12]
 8027d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027d04:	b29b      	uxth	r3, r3
 8027d06:	2b00      	cmp	r3, #0
 8027d08:	d1a6      	bne.n	8027c58 <HAL_SPI_TransmitReceive+0x130>
 8027d0a:	68fb      	ldr	r3, [r7, #12]
 8027d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027d0e:	b29b      	uxth	r3, r3
 8027d10:	2b00      	cmp	r3, #0
 8027d12:	d1a1      	bne.n	8027c58 <HAL_SPI_TransmitReceive+0x130>
 8027d14:	e07c      	b.n	8027e10 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027d16:	68fb      	ldr	r3, [r7, #12]
 8027d18:	685b      	ldr	r3, [r3, #4]
 8027d1a:	2b00      	cmp	r3, #0
 8027d1c:	d002      	beq.n	8027d24 <HAL_SPI_TransmitReceive+0x1fc>
 8027d1e:	8b7b      	ldrh	r3, [r7, #26]
 8027d20:	2b01      	cmp	r3, #1
 8027d22:	d16b      	bne.n	8027dfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027d24:	68fb      	ldr	r3, [r7, #12]
 8027d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027d28:	68fb      	ldr	r3, [r7, #12]
 8027d2a:	681b      	ldr	r3, [r3, #0]
 8027d2c:	330c      	adds	r3, #12
 8027d2e:	7812      	ldrb	r2, [r2, #0]
 8027d30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8027d32:	68fb      	ldr	r3, [r7, #12]
 8027d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027d36:	1c5a      	adds	r2, r3, #1
 8027d38:	68fb      	ldr	r3, [r7, #12]
 8027d3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027d3c:	68fb      	ldr	r3, [r7, #12]
 8027d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027d40:	b29b      	uxth	r3, r3
 8027d42:	3b01      	subs	r3, #1
 8027d44:	b29a      	uxth	r2, r3
 8027d46:	68fb      	ldr	r3, [r7, #12]
 8027d48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027d4a:	e057      	b.n	8027dfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027d4c:	68fb      	ldr	r3, [r7, #12]
 8027d4e:	681b      	ldr	r3, [r3, #0]
 8027d50:	689b      	ldr	r3, [r3, #8]
 8027d52:	f003 0302 	and.w	r3, r3, #2
 8027d56:	2b02      	cmp	r3, #2
 8027d58:	d11c      	bne.n	8027d94 <HAL_SPI_TransmitReceive+0x26c>
 8027d5a:	68fb      	ldr	r3, [r7, #12]
 8027d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027d5e:	b29b      	uxth	r3, r3
 8027d60:	2b00      	cmp	r3, #0
 8027d62:	d017      	beq.n	8027d94 <HAL_SPI_TransmitReceive+0x26c>
 8027d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027d66:	2b01      	cmp	r3, #1
 8027d68:	d114      	bne.n	8027d94 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8027d6a:	68fb      	ldr	r3, [r7, #12]
 8027d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027d6e:	68fb      	ldr	r3, [r7, #12]
 8027d70:	681b      	ldr	r3, [r3, #0]
 8027d72:	330c      	adds	r3, #12
 8027d74:	7812      	ldrb	r2, [r2, #0]
 8027d76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8027d78:	68fb      	ldr	r3, [r7, #12]
 8027d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027d7c:	1c5a      	adds	r2, r3, #1
 8027d7e:	68fb      	ldr	r3, [r7, #12]
 8027d80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027d82:	68fb      	ldr	r3, [r7, #12]
 8027d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027d86:	b29b      	uxth	r3, r3
 8027d88:	3b01      	subs	r3, #1
 8027d8a:	b29a      	uxth	r2, r3
 8027d8c:	68fb      	ldr	r3, [r7, #12]
 8027d8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027d90:	2300      	movs	r3, #0
 8027d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027d94:	68fb      	ldr	r3, [r7, #12]
 8027d96:	681b      	ldr	r3, [r3, #0]
 8027d98:	689b      	ldr	r3, [r3, #8]
 8027d9a:	f003 0301 	and.w	r3, r3, #1
 8027d9e:	2b01      	cmp	r3, #1
 8027da0:	d119      	bne.n	8027dd6 <HAL_SPI_TransmitReceive+0x2ae>
 8027da2:	68fb      	ldr	r3, [r7, #12]
 8027da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027da6:	b29b      	uxth	r3, r3
 8027da8:	2b00      	cmp	r3, #0
 8027daa:	d014      	beq.n	8027dd6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8027dac:	68fb      	ldr	r3, [r7, #12]
 8027dae:	681b      	ldr	r3, [r3, #0]
 8027db0:	68da      	ldr	r2, [r3, #12]
 8027db2:	68fb      	ldr	r3, [r7, #12]
 8027db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027db6:	b2d2      	uxtb	r2, r2
 8027db8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8027dba:	68fb      	ldr	r3, [r7, #12]
 8027dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027dbe:	1c5a      	adds	r2, r3, #1
 8027dc0:	68fb      	ldr	r3, [r7, #12]
 8027dc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027dc4:	68fb      	ldr	r3, [r7, #12]
 8027dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027dc8:	b29b      	uxth	r3, r3
 8027dca:	3b01      	subs	r3, #1
 8027dcc:	b29a      	uxth	r2, r3
 8027dce:	68fb      	ldr	r3, [r7, #12]
 8027dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027dd2:	2301      	movs	r3, #1
 8027dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8027dd6:	f7fc fce9 	bl	80247ac <HAL_GetTick>
 8027dda:	4602      	mov	r2, r0
 8027ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027dde:	1ad3      	subs	r3, r2, r3
 8027de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027de2:	429a      	cmp	r2, r3
 8027de4:	d803      	bhi.n	8027dee <HAL_SPI_TransmitReceive+0x2c6>
 8027de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027dec:	d102      	bne.n	8027df4 <HAL_SPI_TransmitReceive+0x2cc>
 8027dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027df0:	2b00      	cmp	r3, #0
 8027df2:	d103      	bne.n	8027dfc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8027df4:	2303      	movs	r3, #3
 8027df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027dfa:	e029      	b.n	8027e50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027dfc:	68fb      	ldr	r3, [r7, #12]
 8027dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027e00:	b29b      	uxth	r3, r3
 8027e02:	2b00      	cmp	r3, #0
 8027e04:	d1a2      	bne.n	8027d4c <HAL_SPI_TransmitReceive+0x224>
 8027e06:	68fb      	ldr	r3, [r7, #12]
 8027e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027e0a:	b29b      	uxth	r3, r3
 8027e0c:	2b00      	cmp	r3, #0
 8027e0e:	d19d      	bne.n	8027d4c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027e12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8027e14:	68f8      	ldr	r0, [r7, #12]
 8027e16:	f000 f917 	bl	8028048 <SPI_EndRxTxTransaction>
 8027e1a:	4603      	mov	r3, r0
 8027e1c:	2b00      	cmp	r3, #0
 8027e1e:	d006      	beq.n	8027e2e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8027e20:	2301      	movs	r3, #1
 8027e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027e26:	68fb      	ldr	r3, [r7, #12]
 8027e28:	2220      	movs	r2, #32
 8027e2a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8027e2c:	e010      	b.n	8027e50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8027e2e:	68fb      	ldr	r3, [r7, #12]
 8027e30:	689b      	ldr	r3, [r3, #8]
 8027e32:	2b00      	cmp	r3, #0
 8027e34:	d10b      	bne.n	8027e4e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8027e36:	2300      	movs	r3, #0
 8027e38:	617b      	str	r3, [r7, #20]
 8027e3a:	68fb      	ldr	r3, [r7, #12]
 8027e3c:	681b      	ldr	r3, [r3, #0]
 8027e3e:	68db      	ldr	r3, [r3, #12]
 8027e40:	617b      	str	r3, [r7, #20]
 8027e42:	68fb      	ldr	r3, [r7, #12]
 8027e44:	681b      	ldr	r3, [r3, #0]
 8027e46:	689b      	ldr	r3, [r3, #8]
 8027e48:	617b      	str	r3, [r7, #20]
 8027e4a:	697b      	ldr	r3, [r7, #20]
 8027e4c:	e000      	b.n	8027e50 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8027e4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027e50:	68fb      	ldr	r3, [r7, #12]
 8027e52:	2201      	movs	r2, #1
 8027e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8027e58:	68fb      	ldr	r3, [r7, #12]
 8027e5a:	2200      	movs	r2, #0
 8027e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027e60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8027e64:	4618      	mov	r0, r3
 8027e66:	3730      	adds	r7, #48	; 0x30
 8027e68:	46bd      	mov	sp, r7
 8027e6a:	bd80      	pop	{r7, pc}

08027e6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8027e6c:	b580      	push	{r7, lr}
 8027e6e:	b088      	sub	sp, #32
 8027e70:	af00      	add	r7, sp, #0
 8027e72:	60f8      	str	r0, [r7, #12]
 8027e74:	60b9      	str	r1, [r7, #8]
 8027e76:	603b      	str	r3, [r7, #0]
 8027e78:	4613      	mov	r3, r2
 8027e7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8027e7c:	f7fc fc96 	bl	80247ac <HAL_GetTick>
 8027e80:	4602      	mov	r2, r0
 8027e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027e84:	1a9b      	subs	r3, r3, r2
 8027e86:	683a      	ldr	r2, [r7, #0]
 8027e88:	4413      	add	r3, r2
 8027e8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8027e8c:	f7fc fc8e 	bl	80247ac <HAL_GetTick>
 8027e90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8027e92:	4b39      	ldr	r3, [pc, #228]	; (8027f78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8027e94:	681b      	ldr	r3, [r3, #0]
 8027e96:	015b      	lsls	r3, r3, #5
 8027e98:	0d1b      	lsrs	r3, r3, #20
 8027e9a:	69fa      	ldr	r2, [r7, #28]
 8027e9c:	fb02 f303 	mul.w	r3, r2, r3
 8027ea0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8027ea2:	e054      	b.n	8027f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8027ea4:	683b      	ldr	r3, [r7, #0]
 8027ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027eaa:	d050      	beq.n	8027f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8027eac:	f7fc fc7e 	bl	80247ac <HAL_GetTick>
 8027eb0:	4602      	mov	r2, r0
 8027eb2:	69bb      	ldr	r3, [r7, #24]
 8027eb4:	1ad3      	subs	r3, r2, r3
 8027eb6:	69fa      	ldr	r2, [r7, #28]
 8027eb8:	429a      	cmp	r2, r3
 8027eba:	d902      	bls.n	8027ec2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8027ebc:	69fb      	ldr	r3, [r7, #28]
 8027ebe:	2b00      	cmp	r3, #0
 8027ec0:	d13d      	bne.n	8027f3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8027ec2:	68fb      	ldr	r3, [r7, #12]
 8027ec4:	681b      	ldr	r3, [r3, #0]
 8027ec6:	685a      	ldr	r2, [r3, #4]
 8027ec8:	68fb      	ldr	r3, [r7, #12]
 8027eca:	681b      	ldr	r3, [r3, #0]
 8027ecc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8027ed0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027ed2:	68fb      	ldr	r3, [r7, #12]
 8027ed4:	685b      	ldr	r3, [r3, #4]
 8027ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027eda:	d111      	bne.n	8027f00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8027edc:	68fb      	ldr	r3, [r7, #12]
 8027ede:	689b      	ldr	r3, [r3, #8]
 8027ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027ee4:	d004      	beq.n	8027ef0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8027ee6:	68fb      	ldr	r3, [r7, #12]
 8027ee8:	689b      	ldr	r3, [r3, #8]
 8027eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027eee:	d107      	bne.n	8027f00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8027ef0:	68fb      	ldr	r3, [r7, #12]
 8027ef2:	681b      	ldr	r3, [r3, #0]
 8027ef4:	681a      	ldr	r2, [r3, #0]
 8027ef6:	68fb      	ldr	r3, [r7, #12]
 8027ef8:	681b      	ldr	r3, [r3, #0]
 8027efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027efe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8027f00:	68fb      	ldr	r3, [r7, #12]
 8027f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027f08:	d10f      	bne.n	8027f2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8027f0a:	68fb      	ldr	r3, [r7, #12]
 8027f0c:	681b      	ldr	r3, [r3, #0]
 8027f0e:	681a      	ldr	r2, [r3, #0]
 8027f10:	68fb      	ldr	r3, [r7, #12]
 8027f12:	681b      	ldr	r3, [r3, #0]
 8027f14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8027f18:	601a      	str	r2, [r3, #0]
 8027f1a:	68fb      	ldr	r3, [r7, #12]
 8027f1c:	681b      	ldr	r3, [r3, #0]
 8027f1e:	681a      	ldr	r2, [r3, #0]
 8027f20:	68fb      	ldr	r3, [r7, #12]
 8027f22:	681b      	ldr	r3, [r3, #0]
 8027f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8027f28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8027f2a:	68fb      	ldr	r3, [r7, #12]
 8027f2c:	2201      	movs	r2, #1
 8027f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8027f32:	68fb      	ldr	r3, [r7, #12]
 8027f34:	2200      	movs	r2, #0
 8027f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8027f3a:	2303      	movs	r3, #3
 8027f3c:	e017      	b.n	8027f6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8027f3e:	697b      	ldr	r3, [r7, #20]
 8027f40:	2b00      	cmp	r3, #0
 8027f42:	d101      	bne.n	8027f48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8027f44:	2300      	movs	r3, #0
 8027f46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8027f48:	697b      	ldr	r3, [r7, #20]
 8027f4a:	3b01      	subs	r3, #1
 8027f4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8027f4e:	68fb      	ldr	r3, [r7, #12]
 8027f50:	681b      	ldr	r3, [r3, #0]
 8027f52:	689a      	ldr	r2, [r3, #8]
 8027f54:	68bb      	ldr	r3, [r7, #8]
 8027f56:	4013      	ands	r3, r2
 8027f58:	68ba      	ldr	r2, [r7, #8]
 8027f5a:	429a      	cmp	r2, r3
 8027f5c:	bf0c      	ite	eq
 8027f5e:	2301      	moveq	r3, #1
 8027f60:	2300      	movne	r3, #0
 8027f62:	b2db      	uxtb	r3, r3
 8027f64:	461a      	mov	r2, r3
 8027f66:	79fb      	ldrb	r3, [r7, #7]
 8027f68:	429a      	cmp	r2, r3
 8027f6a:	d19b      	bne.n	8027ea4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8027f6c:	2300      	movs	r3, #0
}
 8027f6e:	4618      	mov	r0, r3
 8027f70:	3720      	adds	r7, #32
 8027f72:	46bd      	mov	sp, r7
 8027f74:	bd80      	pop	{r7, pc}
 8027f76:	bf00      	nop
 8027f78:	20000080 	.word	0x20000080

08027f7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8027f7c:	b580      	push	{r7, lr}
 8027f7e:	b086      	sub	sp, #24
 8027f80:	af02      	add	r7, sp, #8
 8027f82:	60f8      	str	r0, [r7, #12]
 8027f84:	60b9      	str	r1, [r7, #8]
 8027f86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027f88:	68fb      	ldr	r3, [r7, #12]
 8027f8a:	685b      	ldr	r3, [r3, #4]
 8027f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027f90:	d111      	bne.n	8027fb6 <SPI_EndRxTransaction+0x3a>
 8027f92:	68fb      	ldr	r3, [r7, #12]
 8027f94:	689b      	ldr	r3, [r3, #8]
 8027f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027f9a:	d004      	beq.n	8027fa6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8027f9c:	68fb      	ldr	r3, [r7, #12]
 8027f9e:	689b      	ldr	r3, [r3, #8]
 8027fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027fa4:	d107      	bne.n	8027fb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8027fa6:	68fb      	ldr	r3, [r7, #12]
 8027fa8:	681b      	ldr	r3, [r3, #0]
 8027faa:	681a      	ldr	r2, [r3, #0]
 8027fac:	68fb      	ldr	r3, [r7, #12]
 8027fae:	681b      	ldr	r3, [r3, #0]
 8027fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027fb4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8027fb6:	68fb      	ldr	r3, [r7, #12]
 8027fb8:	685b      	ldr	r3, [r3, #4]
 8027fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027fbe:	d12a      	bne.n	8028016 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8027fc0:	68fb      	ldr	r3, [r7, #12]
 8027fc2:	689b      	ldr	r3, [r3, #8]
 8027fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027fc8:	d012      	beq.n	8027ff0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8027fca:	687b      	ldr	r3, [r7, #4]
 8027fcc:	9300      	str	r3, [sp, #0]
 8027fce:	68bb      	ldr	r3, [r7, #8]
 8027fd0:	2200      	movs	r2, #0
 8027fd2:	2180      	movs	r1, #128	; 0x80
 8027fd4:	68f8      	ldr	r0, [r7, #12]
 8027fd6:	f7ff ff49 	bl	8027e6c <SPI_WaitFlagStateUntilTimeout>
 8027fda:	4603      	mov	r3, r0
 8027fdc:	2b00      	cmp	r3, #0
 8027fde:	d02d      	beq.n	802803c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8027fe0:	68fb      	ldr	r3, [r7, #12]
 8027fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027fe4:	f043 0220 	orr.w	r2, r3, #32
 8027fe8:	68fb      	ldr	r3, [r7, #12]
 8027fea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8027fec:	2303      	movs	r3, #3
 8027fee:	e026      	b.n	802803e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8027ff0:	687b      	ldr	r3, [r7, #4]
 8027ff2:	9300      	str	r3, [sp, #0]
 8027ff4:	68bb      	ldr	r3, [r7, #8]
 8027ff6:	2200      	movs	r2, #0
 8027ff8:	2101      	movs	r1, #1
 8027ffa:	68f8      	ldr	r0, [r7, #12]
 8027ffc:	f7ff ff36 	bl	8027e6c <SPI_WaitFlagStateUntilTimeout>
 8028000:	4603      	mov	r3, r0
 8028002:	2b00      	cmp	r3, #0
 8028004:	d01a      	beq.n	802803c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028006:	68fb      	ldr	r3, [r7, #12]
 8028008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802800a:	f043 0220 	orr.w	r2, r3, #32
 802800e:	68fb      	ldr	r3, [r7, #12]
 8028010:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8028012:	2303      	movs	r3, #3
 8028014:	e013      	b.n	802803e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028016:	687b      	ldr	r3, [r7, #4]
 8028018:	9300      	str	r3, [sp, #0]
 802801a:	68bb      	ldr	r3, [r7, #8]
 802801c:	2200      	movs	r2, #0
 802801e:	2101      	movs	r1, #1
 8028020:	68f8      	ldr	r0, [r7, #12]
 8028022:	f7ff ff23 	bl	8027e6c <SPI_WaitFlagStateUntilTimeout>
 8028026:	4603      	mov	r3, r0
 8028028:	2b00      	cmp	r3, #0
 802802a:	d007      	beq.n	802803c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802802c:	68fb      	ldr	r3, [r7, #12]
 802802e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028030:	f043 0220 	orr.w	r2, r3, #32
 8028034:	68fb      	ldr	r3, [r7, #12]
 8028036:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028038:	2303      	movs	r3, #3
 802803a:	e000      	b.n	802803e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 802803c:	2300      	movs	r3, #0
}
 802803e:	4618      	mov	r0, r3
 8028040:	3710      	adds	r7, #16
 8028042:	46bd      	mov	sp, r7
 8028044:	bd80      	pop	{r7, pc}
	...

08028048 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8028048:	b580      	push	{r7, lr}
 802804a:	b088      	sub	sp, #32
 802804c:	af02      	add	r7, sp, #8
 802804e:	60f8      	str	r0, [r7, #12]
 8028050:	60b9      	str	r1, [r7, #8]
 8028052:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8028054:	4b1b      	ldr	r3, [pc, #108]	; (80280c4 <SPI_EndRxTxTransaction+0x7c>)
 8028056:	681b      	ldr	r3, [r3, #0]
 8028058:	4a1b      	ldr	r2, [pc, #108]	; (80280c8 <SPI_EndRxTxTransaction+0x80>)
 802805a:	fba2 2303 	umull	r2, r3, r2, r3
 802805e:	0d5b      	lsrs	r3, r3, #21
 8028060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8028064:	fb02 f303 	mul.w	r3, r2, r3
 8028068:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802806a:	68fb      	ldr	r3, [r7, #12]
 802806c:	685b      	ldr	r3, [r3, #4]
 802806e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028072:	d112      	bne.n	802809a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028074:	687b      	ldr	r3, [r7, #4]
 8028076:	9300      	str	r3, [sp, #0]
 8028078:	68bb      	ldr	r3, [r7, #8]
 802807a:	2200      	movs	r2, #0
 802807c:	2180      	movs	r1, #128	; 0x80
 802807e:	68f8      	ldr	r0, [r7, #12]
 8028080:	f7ff fef4 	bl	8027e6c <SPI_WaitFlagStateUntilTimeout>
 8028084:	4603      	mov	r3, r0
 8028086:	2b00      	cmp	r3, #0
 8028088:	d016      	beq.n	80280b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802808a:	68fb      	ldr	r3, [r7, #12]
 802808c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802808e:	f043 0220 	orr.w	r2, r3, #32
 8028092:	68fb      	ldr	r3, [r7, #12]
 8028094:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028096:	2303      	movs	r3, #3
 8028098:	e00f      	b.n	80280ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 802809a:	697b      	ldr	r3, [r7, #20]
 802809c:	2b00      	cmp	r3, #0
 802809e:	d00a      	beq.n	80280b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80280a0:	697b      	ldr	r3, [r7, #20]
 80280a2:	3b01      	subs	r3, #1
 80280a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80280a6:	68fb      	ldr	r3, [r7, #12]
 80280a8:	681b      	ldr	r3, [r3, #0]
 80280aa:	689b      	ldr	r3, [r3, #8]
 80280ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80280b0:	2b80      	cmp	r3, #128	; 0x80
 80280b2:	d0f2      	beq.n	802809a <SPI_EndRxTxTransaction+0x52>
 80280b4:	e000      	b.n	80280b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80280b6:	bf00      	nop
  }

  return HAL_OK;
 80280b8:	2300      	movs	r3, #0
}
 80280ba:	4618      	mov	r0, r3
 80280bc:	3718      	adds	r7, #24
 80280be:	46bd      	mov	sp, r7
 80280c0:	bd80      	pop	{r7, pc}
 80280c2:	bf00      	nop
 80280c4:	20000080 	.word	0x20000080
 80280c8:	165e9f81 	.word	0x165e9f81

080280cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80280cc:	b580      	push	{r7, lr}
 80280ce:	b082      	sub	sp, #8
 80280d0:	af00      	add	r7, sp, #0
 80280d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80280d4:	687b      	ldr	r3, [r7, #4]
 80280d6:	2b00      	cmp	r3, #0
 80280d8:	d101      	bne.n	80280de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80280da:	2301      	movs	r3, #1
 80280dc:	e041      	b.n	8028162 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80280de:	687b      	ldr	r3, [r7, #4]
 80280e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80280e4:	b2db      	uxtb	r3, r3
 80280e6:	2b00      	cmp	r3, #0
 80280e8:	d106      	bne.n	80280f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80280ea:	687b      	ldr	r3, [r7, #4]
 80280ec:	2200      	movs	r2, #0
 80280ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80280f2:	6878      	ldr	r0, [r7, #4]
 80280f4:	f7ef ff12 	bl	8017f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80280f8:	687b      	ldr	r3, [r7, #4]
 80280fa:	2202      	movs	r2, #2
 80280fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8028100:	687b      	ldr	r3, [r7, #4]
 8028102:	681a      	ldr	r2, [r3, #0]
 8028104:	687b      	ldr	r3, [r7, #4]
 8028106:	3304      	adds	r3, #4
 8028108:	4619      	mov	r1, r3
 802810a:	4610      	mov	r0, r2
 802810c:	f001 f858 	bl	80291c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8028110:	687b      	ldr	r3, [r7, #4]
 8028112:	2201      	movs	r2, #1
 8028114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028118:	687b      	ldr	r3, [r7, #4]
 802811a:	2201      	movs	r2, #1
 802811c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8028120:	687b      	ldr	r3, [r7, #4]
 8028122:	2201      	movs	r2, #1
 8028124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028128:	687b      	ldr	r3, [r7, #4]
 802812a:	2201      	movs	r2, #1
 802812c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8028130:	687b      	ldr	r3, [r7, #4]
 8028132:	2201      	movs	r2, #1
 8028134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028138:	687b      	ldr	r3, [r7, #4]
 802813a:	2201      	movs	r2, #1
 802813c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8028140:	687b      	ldr	r3, [r7, #4]
 8028142:	2201      	movs	r2, #1
 8028144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028148:	687b      	ldr	r3, [r7, #4]
 802814a:	2201      	movs	r2, #1
 802814c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028150:	687b      	ldr	r3, [r7, #4]
 8028152:	2201      	movs	r2, #1
 8028154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8028158:	687b      	ldr	r3, [r7, #4]
 802815a:	2201      	movs	r2, #1
 802815c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8028160:	2300      	movs	r3, #0
}
 8028162:	4618      	mov	r0, r3
 8028164:	3708      	adds	r7, #8
 8028166:	46bd      	mov	sp, r7
 8028168:	bd80      	pop	{r7, pc}
	...

0802816c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 802816c:	b480      	push	{r7}
 802816e:	b085      	sub	sp, #20
 8028170:	af00      	add	r7, sp, #0
 8028172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8028174:	687b      	ldr	r3, [r7, #4]
 8028176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802817a:	b2db      	uxtb	r3, r3
 802817c:	2b01      	cmp	r3, #1
 802817e:	d001      	beq.n	8028184 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8028180:	2301      	movs	r3, #1
 8028182:	e046      	b.n	8028212 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028184:	687b      	ldr	r3, [r7, #4]
 8028186:	2202      	movs	r2, #2
 8028188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802818c:	687b      	ldr	r3, [r7, #4]
 802818e:	681b      	ldr	r3, [r3, #0]
 8028190:	4a23      	ldr	r2, [pc, #140]	; (8028220 <HAL_TIM_Base_Start+0xb4>)
 8028192:	4293      	cmp	r3, r2
 8028194:	d022      	beq.n	80281dc <HAL_TIM_Base_Start+0x70>
 8028196:	687b      	ldr	r3, [r7, #4]
 8028198:	681b      	ldr	r3, [r3, #0]
 802819a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802819e:	d01d      	beq.n	80281dc <HAL_TIM_Base_Start+0x70>
 80281a0:	687b      	ldr	r3, [r7, #4]
 80281a2:	681b      	ldr	r3, [r3, #0]
 80281a4:	4a1f      	ldr	r2, [pc, #124]	; (8028224 <HAL_TIM_Base_Start+0xb8>)
 80281a6:	4293      	cmp	r3, r2
 80281a8:	d018      	beq.n	80281dc <HAL_TIM_Base_Start+0x70>
 80281aa:	687b      	ldr	r3, [r7, #4]
 80281ac:	681b      	ldr	r3, [r3, #0]
 80281ae:	4a1e      	ldr	r2, [pc, #120]	; (8028228 <HAL_TIM_Base_Start+0xbc>)
 80281b0:	4293      	cmp	r3, r2
 80281b2:	d013      	beq.n	80281dc <HAL_TIM_Base_Start+0x70>
 80281b4:	687b      	ldr	r3, [r7, #4]
 80281b6:	681b      	ldr	r3, [r3, #0]
 80281b8:	4a1c      	ldr	r2, [pc, #112]	; (802822c <HAL_TIM_Base_Start+0xc0>)
 80281ba:	4293      	cmp	r3, r2
 80281bc:	d00e      	beq.n	80281dc <HAL_TIM_Base_Start+0x70>
 80281be:	687b      	ldr	r3, [r7, #4]
 80281c0:	681b      	ldr	r3, [r3, #0]
 80281c2:	4a1b      	ldr	r2, [pc, #108]	; (8028230 <HAL_TIM_Base_Start+0xc4>)
 80281c4:	4293      	cmp	r3, r2
 80281c6:	d009      	beq.n	80281dc <HAL_TIM_Base_Start+0x70>
 80281c8:	687b      	ldr	r3, [r7, #4]
 80281ca:	681b      	ldr	r3, [r3, #0]
 80281cc:	4a19      	ldr	r2, [pc, #100]	; (8028234 <HAL_TIM_Base_Start+0xc8>)
 80281ce:	4293      	cmp	r3, r2
 80281d0:	d004      	beq.n	80281dc <HAL_TIM_Base_Start+0x70>
 80281d2:	687b      	ldr	r3, [r7, #4]
 80281d4:	681b      	ldr	r3, [r3, #0]
 80281d6:	4a18      	ldr	r2, [pc, #96]	; (8028238 <HAL_TIM_Base_Start+0xcc>)
 80281d8:	4293      	cmp	r3, r2
 80281da:	d111      	bne.n	8028200 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80281dc:	687b      	ldr	r3, [r7, #4]
 80281de:	681b      	ldr	r3, [r3, #0]
 80281e0:	689b      	ldr	r3, [r3, #8]
 80281e2:	f003 0307 	and.w	r3, r3, #7
 80281e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80281e8:	68fb      	ldr	r3, [r7, #12]
 80281ea:	2b06      	cmp	r3, #6
 80281ec:	d010      	beq.n	8028210 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80281ee:	687b      	ldr	r3, [r7, #4]
 80281f0:	681b      	ldr	r3, [r3, #0]
 80281f2:	681a      	ldr	r2, [r3, #0]
 80281f4:	687b      	ldr	r3, [r7, #4]
 80281f6:	681b      	ldr	r3, [r3, #0]
 80281f8:	f042 0201 	orr.w	r2, r2, #1
 80281fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80281fe:	e007      	b.n	8028210 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8028200:	687b      	ldr	r3, [r7, #4]
 8028202:	681b      	ldr	r3, [r3, #0]
 8028204:	681a      	ldr	r2, [r3, #0]
 8028206:	687b      	ldr	r3, [r7, #4]
 8028208:	681b      	ldr	r3, [r3, #0]
 802820a:	f042 0201 	orr.w	r2, r2, #1
 802820e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8028210:	2300      	movs	r3, #0
}
 8028212:	4618      	mov	r0, r3
 8028214:	3714      	adds	r7, #20
 8028216:	46bd      	mov	sp, r7
 8028218:	f85d 7b04 	ldr.w	r7, [sp], #4
 802821c:	4770      	bx	lr
 802821e:	bf00      	nop
 8028220:	40010000 	.word	0x40010000
 8028224:	40000400 	.word	0x40000400
 8028228:	40000800 	.word	0x40000800
 802822c:	40000c00 	.word	0x40000c00
 8028230:	40010400 	.word	0x40010400
 8028234:	40014000 	.word	0x40014000
 8028238:	40001800 	.word	0x40001800

0802823c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 802823c:	b480      	push	{r7}
 802823e:	b085      	sub	sp, #20
 8028240:	af00      	add	r7, sp, #0
 8028242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8028244:	687b      	ldr	r3, [r7, #4]
 8028246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802824a:	b2db      	uxtb	r3, r3
 802824c:	2b01      	cmp	r3, #1
 802824e:	d001      	beq.n	8028254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8028250:	2301      	movs	r3, #1
 8028252:	e04e      	b.n	80282f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028254:	687b      	ldr	r3, [r7, #4]
 8028256:	2202      	movs	r2, #2
 8028258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 802825c:	687b      	ldr	r3, [r7, #4]
 802825e:	681b      	ldr	r3, [r3, #0]
 8028260:	68da      	ldr	r2, [r3, #12]
 8028262:	687b      	ldr	r3, [r7, #4]
 8028264:	681b      	ldr	r3, [r3, #0]
 8028266:	f042 0201 	orr.w	r2, r2, #1
 802826a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802826c:	687b      	ldr	r3, [r7, #4]
 802826e:	681b      	ldr	r3, [r3, #0]
 8028270:	4a23      	ldr	r2, [pc, #140]	; (8028300 <HAL_TIM_Base_Start_IT+0xc4>)
 8028272:	4293      	cmp	r3, r2
 8028274:	d022      	beq.n	80282bc <HAL_TIM_Base_Start_IT+0x80>
 8028276:	687b      	ldr	r3, [r7, #4]
 8028278:	681b      	ldr	r3, [r3, #0]
 802827a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802827e:	d01d      	beq.n	80282bc <HAL_TIM_Base_Start_IT+0x80>
 8028280:	687b      	ldr	r3, [r7, #4]
 8028282:	681b      	ldr	r3, [r3, #0]
 8028284:	4a1f      	ldr	r2, [pc, #124]	; (8028304 <HAL_TIM_Base_Start_IT+0xc8>)
 8028286:	4293      	cmp	r3, r2
 8028288:	d018      	beq.n	80282bc <HAL_TIM_Base_Start_IT+0x80>
 802828a:	687b      	ldr	r3, [r7, #4]
 802828c:	681b      	ldr	r3, [r3, #0]
 802828e:	4a1e      	ldr	r2, [pc, #120]	; (8028308 <HAL_TIM_Base_Start_IT+0xcc>)
 8028290:	4293      	cmp	r3, r2
 8028292:	d013      	beq.n	80282bc <HAL_TIM_Base_Start_IT+0x80>
 8028294:	687b      	ldr	r3, [r7, #4]
 8028296:	681b      	ldr	r3, [r3, #0]
 8028298:	4a1c      	ldr	r2, [pc, #112]	; (802830c <HAL_TIM_Base_Start_IT+0xd0>)
 802829a:	4293      	cmp	r3, r2
 802829c:	d00e      	beq.n	80282bc <HAL_TIM_Base_Start_IT+0x80>
 802829e:	687b      	ldr	r3, [r7, #4]
 80282a0:	681b      	ldr	r3, [r3, #0]
 80282a2:	4a1b      	ldr	r2, [pc, #108]	; (8028310 <HAL_TIM_Base_Start_IT+0xd4>)
 80282a4:	4293      	cmp	r3, r2
 80282a6:	d009      	beq.n	80282bc <HAL_TIM_Base_Start_IT+0x80>
 80282a8:	687b      	ldr	r3, [r7, #4]
 80282aa:	681b      	ldr	r3, [r3, #0]
 80282ac:	4a19      	ldr	r2, [pc, #100]	; (8028314 <HAL_TIM_Base_Start_IT+0xd8>)
 80282ae:	4293      	cmp	r3, r2
 80282b0:	d004      	beq.n	80282bc <HAL_TIM_Base_Start_IT+0x80>
 80282b2:	687b      	ldr	r3, [r7, #4]
 80282b4:	681b      	ldr	r3, [r3, #0]
 80282b6:	4a18      	ldr	r2, [pc, #96]	; (8028318 <HAL_TIM_Base_Start_IT+0xdc>)
 80282b8:	4293      	cmp	r3, r2
 80282ba:	d111      	bne.n	80282e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80282bc:	687b      	ldr	r3, [r7, #4]
 80282be:	681b      	ldr	r3, [r3, #0]
 80282c0:	689b      	ldr	r3, [r3, #8]
 80282c2:	f003 0307 	and.w	r3, r3, #7
 80282c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80282c8:	68fb      	ldr	r3, [r7, #12]
 80282ca:	2b06      	cmp	r3, #6
 80282cc:	d010      	beq.n	80282f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80282ce:	687b      	ldr	r3, [r7, #4]
 80282d0:	681b      	ldr	r3, [r3, #0]
 80282d2:	681a      	ldr	r2, [r3, #0]
 80282d4:	687b      	ldr	r3, [r7, #4]
 80282d6:	681b      	ldr	r3, [r3, #0]
 80282d8:	f042 0201 	orr.w	r2, r2, #1
 80282dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80282de:	e007      	b.n	80282f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80282e0:	687b      	ldr	r3, [r7, #4]
 80282e2:	681b      	ldr	r3, [r3, #0]
 80282e4:	681a      	ldr	r2, [r3, #0]
 80282e6:	687b      	ldr	r3, [r7, #4]
 80282e8:	681b      	ldr	r3, [r3, #0]
 80282ea:	f042 0201 	orr.w	r2, r2, #1
 80282ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80282f0:	2300      	movs	r3, #0
}
 80282f2:	4618      	mov	r0, r3
 80282f4:	3714      	adds	r7, #20
 80282f6:	46bd      	mov	sp, r7
 80282f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282fc:	4770      	bx	lr
 80282fe:	bf00      	nop
 8028300:	40010000 	.word	0x40010000
 8028304:	40000400 	.word	0x40000400
 8028308:	40000800 	.word	0x40000800
 802830c:	40000c00 	.word	0x40000c00
 8028310:	40010400 	.word	0x40010400
 8028314:	40014000 	.word	0x40014000
 8028318:	40001800 	.word	0x40001800

0802831c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 802831c:	b580      	push	{r7, lr}
 802831e:	b082      	sub	sp, #8
 8028320:	af00      	add	r7, sp, #0
 8028322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8028324:	687b      	ldr	r3, [r7, #4]
 8028326:	2b00      	cmp	r3, #0
 8028328:	d101      	bne.n	802832e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 802832a:	2301      	movs	r3, #1
 802832c:	e041      	b.n	80283b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802832e:	687b      	ldr	r3, [r7, #4]
 8028330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028334:	b2db      	uxtb	r3, r3
 8028336:	2b00      	cmp	r3, #0
 8028338:	d106      	bne.n	8028348 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802833a:	687b      	ldr	r3, [r7, #4]
 802833c:	2200      	movs	r2, #0
 802833e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8028342:	6878      	ldr	r0, [r7, #4]
 8028344:	f000 f839 	bl	80283ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028348:	687b      	ldr	r3, [r7, #4]
 802834a:	2202      	movs	r2, #2
 802834c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8028350:	687b      	ldr	r3, [r7, #4]
 8028352:	681a      	ldr	r2, [r3, #0]
 8028354:	687b      	ldr	r3, [r7, #4]
 8028356:	3304      	adds	r3, #4
 8028358:	4619      	mov	r1, r3
 802835a:	4610      	mov	r0, r2
 802835c:	f000 ff30 	bl	80291c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8028360:	687b      	ldr	r3, [r7, #4]
 8028362:	2201      	movs	r2, #1
 8028364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028368:	687b      	ldr	r3, [r7, #4]
 802836a:	2201      	movs	r2, #1
 802836c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8028370:	687b      	ldr	r3, [r7, #4]
 8028372:	2201      	movs	r2, #1
 8028374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028378:	687b      	ldr	r3, [r7, #4]
 802837a:	2201      	movs	r2, #1
 802837c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8028380:	687b      	ldr	r3, [r7, #4]
 8028382:	2201      	movs	r2, #1
 8028384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028388:	687b      	ldr	r3, [r7, #4]
 802838a:	2201      	movs	r2, #1
 802838c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8028390:	687b      	ldr	r3, [r7, #4]
 8028392:	2201      	movs	r2, #1
 8028394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028398:	687b      	ldr	r3, [r7, #4]
 802839a:	2201      	movs	r2, #1
 802839c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80283a0:	687b      	ldr	r3, [r7, #4]
 80283a2:	2201      	movs	r2, #1
 80283a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80283a8:	687b      	ldr	r3, [r7, #4]
 80283aa:	2201      	movs	r2, #1
 80283ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80283b0:	2300      	movs	r3, #0
}
 80283b2:	4618      	mov	r0, r3
 80283b4:	3708      	adds	r7, #8
 80283b6:	46bd      	mov	sp, r7
 80283b8:	bd80      	pop	{r7, pc}

080283ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80283ba:	b480      	push	{r7}
 80283bc:	b083      	sub	sp, #12
 80283be:	af00      	add	r7, sp, #0
 80283c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80283c2:	bf00      	nop
 80283c4:	370c      	adds	r7, #12
 80283c6:	46bd      	mov	sp, r7
 80283c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283cc:	4770      	bx	lr
	...

080283d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80283d0:	b580      	push	{r7, lr}
 80283d2:	b084      	sub	sp, #16
 80283d4:	af00      	add	r7, sp, #0
 80283d6:	6078      	str	r0, [r7, #4]
 80283d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80283da:	683b      	ldr	r3, [r7, #0]
 80283dc:	2b00      	cmp	r3, #0
 80283de:	d109      	bne.n	80283f4 <HAL_TIM_PWM_Start+0x24>
 80283e0:	687b      	ldr	r3, [r7, #4]
 80283e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80283e6:	b2db      	uxtb	r3, r3
 80283e8:	2b01      	cmp	r3, #1
 80283ea:	bf14      	ite	ne
 80283ec:	2301      	movne	r3, #1
 80283ee:	2300      	moveq	r3, #0
 80283f0:	b2db      	uxtb	r3, r3
 80283f2:	e022      	b.n	802843a <HAL_TIM_PWM_Start+0x6a>
 80283f4:	683b      	ldr	r3, [r7, #0]
 80283f6:	2b04      	cmp	r3, #4
 80283f8:	d109      	bne.n	802840e <HAL_TIM_PWM_Start+0x3e>
 80283fa:	687b      	ldr	r3, [r7, #4]
 80283fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8028400:	b2db      	uxtb	r3, r3
 8028402:	2b01      	cmp	r3, #1
 8028404:	bf14      	ite	ne
 8028406:	2301      	movne	r3, #1
 8028408:	2300      	moveq	r3, #0
 802840a:	b2db      	uxtb	r3, r3
 802840c:	e015      	b.n	802843a <HAL_TIM_PWM_Start+0x6a>
 802840e:	683b      	ldr	r3, [r7, #0]
 8028410:	2b08      	cmp	r3, #8
 8028412:	d109      	bne.n	8028428 <HAL_TIM_PWM_Start+0x58>
 8028414:	687b      	ldr	r3, [r7, #4]
 8028416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802841a:	b2db      	uxtb	r3, r3
 802841c:	2b01      	cmp	r3, #1
 802841e:	bf14      	ite	ne
 8028420:	2301      	movne	r3, #1
 8028422:	2300      	moveq	r3, #0
 8028424:	b2db      	uxtb	r3, r3
 8028426:	e008      	b.n	802843a <HAL_TIM_PWM_Start+0x6a>
 8028428:	687b      	ldr	r3, [r7, #4]
 802842a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802842e:	b2db      	uxtb	r3, r3
 8028430:	2b01      	cmp	r3, #1
 8028432:	bf14      	ite	ne
 8028434:	2301      	movne	r3, #1
 8028436:	2300      	moveq	r3, #0
 8028438:	b2db      	uxtb	r3, r3
 802843a:	2b00      	cmp	r3, #0
 802843c:	d001      	beq.n	8028442 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 802843e:	2301      	movs	r3, #1
 8028440:	e07c      	b.n	802853c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8028442:	683b      	ldr	r3, [r7, #0]
 8028444:	2b00      	cmp	r3, #0
 8028446:	d104      	bne.n	8028452 <HAL_TIM_PWM_Start+0x82>
 8028448:	687b      	ldr	r3, [r7, #4]
 802844a:	2202      	movs	r2, #2
 802844c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8028450:	e013      	b.n	802847a <HAL_TIM_PWM_Start+0xaa>
 8028452:	683b      	ldr	r3, [r7, #0]
 8028454:	2b04      	cmp	r3, #4
 8028456:	d104      	bne.n	8028462 <HAL_TIM_PWM_Start+0x92>
 8028458:	687b      	ldr	r3, [r7, #4]
 802845a:	2202      	movs	r2, #2
 802845c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028460:	e00b      	b.n	802847a <HAL_TIM_PWM_Start+0xaa>
 8028462:	683b      	ldr	r3, [r7, #0]
 8028464:	2b08      	cmp	r3, #8
 8028466:	d104      	bne.n	8028472 <HAL_TIM_PWM_Start+0xa2>
 8028468:	687b      	ldr	r3, [r7, #4]
 802846a:	2202      	movs	r2, #2
 802846c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8028470:	e003      	b.n	802847a <HAL_TIM_PWM_Start+0xaa>
 8028472:	687b      	ldr	r3, [r7, #4]
 8028474:	2202      	movs	r2, #2
 8028476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 802847a:	687b      	ldr	r3, [r7, #4]
 802847c:	681b      	ldr	r3, [r3, #0]
 802847e:	2201      	movs	r2, #1
 8028480:	6839      	ldr	r1, [r7, #0]
 8028482:	4618      	mov	r0, r3
 8028484:	f001 fb42 	bl	8029b0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8028488:	687b      	ldr	r3, [r7, #4]
 802848a:	681b      	ldr	r3, [r3, #0]
 802848c:	4a2d      	ldr	r2, [pc, #180]	; (8028544 <HAL_TIM_PWM_Start+0x174>)
 802848e:	4293      	cmp	r3, r2
 8028490:	d004      	beq.n	802849c <HAL_TIM_PWM_Start+0xcc>
 8028492:	687b      	ldr	r3, [r7, #4]
 8028494:	681b      	ldr	r3, [r3, #0]
 8028496:	4a2c      	ldr	r2, [pc, #176]	; (8028548 <HAL_TIM_PWM_Start+0x178>)
 8028498:	4293      	cmp	r3, r2
 802849a:	d101      	bne.n	80284a0 <HAL_TIM_PWM_Start+0xd0>
 802849c:	2301      	movs	r3, #1
 802849e:	e000      	b.n	80284a2 <HAL_TIM_PWM_Start+0xd2>
 80284a0:	2300      	movs	r3, #0
 80284a2:	2b00      	cmp	r3, #0
 80284a4:	d007      	beq.n	80284b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80284a6:	687b      	ldr	r3, [r7, #4]
 80284a8:	681b      	ldr	r3, [r3, #0]
 80284aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80284ac:	687b      	ldr	r3, [r7, #4]
 80284ae:	681b      	ldr	r3, [r3, #0]
 80284b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80284b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80284b6:	687b      	ldr	r3, [r7, #4]
 80284b8:	681b      	ldr	r3, [r3, #0]
 80284ba:	4a22      	ldr	r2, [pc, #136]	; (8028544 <HAL_TIM_PWM_Start+0x174>)
 80284bc:	4293      	cmp	r3, r2
 80284be:	d022      	beq.n	8028506 <HAL_TIM_PWM_Start+0x136>
 80284c0:	687b      	ldr	r3, [r7, #4]
 80284c2:	681b      	ldr	r3, [r3, #0]
 80284c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80284c8:	d01d      	beq.n	8028506 <HAL_TIM_PWM_Start+0x136>
 80284ca:	687b      	ldr	r3, [r7, #4]
 80284cc:	681b      	ldr	r3, [r3, #0]
 80284ce:	4a1f      	ldr	r2, [pc, #124]	; (802854c <HAL_TIM_PWM_Start+0x17c>)
 80284d0:	4293      	cmp	r3, r2
 80284d2:	d018      	beq.n	8028506 <HAL_TIM_PWM_Start+0x136>
 80284d4:	687b      	ldr	r3, [r7, #4]
 80284d6:	681b      	ldr	r3, [r3, #0]
 80284d8:	4a1d      	ldr	r2, [pc, #116]	; (8028550 <HAL_TIM_PWM_Start+0x180>)
 80284da:	4293      	cmp	r3, r2
 80284dc:	d013      	beq.n	8028506 <HAL_TIM_PWM_Start+0x136>
 80284de:	687b      	ldr	r3, [r7, #4]
 80284e0:	681b      	ldr	r3, [r3, #0]
 80284e2:	4a1c      	ldr	r2, [pc, #112]	; (8028554 <HAL_TIM_PWM_Start+0x184>)
 80284e4:	4293      	cmp	r3, r2
 80284e6:	d00e      	beq.n	8028506 <HAL_TIM_PWM_Start+0x136>
 80284e8:	687b      	ldr	r3, [r7, #4]
 80284ea:	681b      	ldr	r3, [r3, #0]
 80284ec:	4a16      	ldr	r2, [pc, #88]	; (8028548 <HAL_TIM_PWM_Start+0x178>)
 80284ee:	4293      	cmp	r3, r2
 80284f0:	d009      	beq.n	8028506 <HAL_TIM_PWM_Start+0x136>
 80284f2:	687b      	ldr	r3, [r7, #4]
 80284f4:	681b      	ldr	r3, [r3, #0]
 80284f6:	4a18      	ldr	r2, [pc, #96]	; (8028558 <HAL_TIM_PWM_Start+0x188>)
 80284f8:	4293      	cmp	r3, r2
 80284fa:	d004      	beq.n	8028506 <HAL_TIM_PWM_Start+0x136>
 80284fc:	687b      	ldr	r3, [r7, #4]
 80284fe:	681b      	ldr	r3, [r3, #0]
 8028500:	4a16      	ldr	r2, [pc, #88]	; (802855c <HAL_TIM_PWM_Start+0x18c>)
 8028502:	4293      	cmp	r3, r2
 8028504:	d111      	bne.n	802852a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028506:	687b      	ldr	r3, [r7, #4]
 8028508:	681b      	ldr	r3, [r3, #0]
 802850a:	689b      	ldr	r3, [r3, #8]
 802850c:	f003 0307 	and.w	r3, r3, #7
 8028510:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028512:	68fb      	ldr	r3, [r7, #12]
 8028514:	2b06      	cmp	r3, #6
 8028516:	d010      	beq.n	802853a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8028518:	687b      	ldr	r3, [r7, #4]
 802851a:	681b      	ldr	r3, [r3, #0]
 802851c:	681a      	ldr	r2, [r3, #0]
 802851e:	687b      	ldr	r3, [r7, #4]
 8028520:	681b      	ldr	r3, [r3, #0]
 8028522:	f042 0201 	orr.w	r2, r2, #1
 8028526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028528:	e007      	b.n	802853a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 802852a:	687b      	ldr	r3, [r7, #4]
 802852c:	681b      	ldr	r3, [r3, #0]
 802852e:	681a      	ldr	r2, [r3, #0]
 8028530:	687b      	ldr	r3, [r7, #4]
 8028532:	681b      	ldr	r3, [r3, #0]
 8028534:	f042 0201 	orr.w	r2, r2, #1
 8028538:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802853a:	2300      	movs	r3, #0
}
 802853c:	4618      	mov	r0, r3
 802853e:	3710      	adds	r7, #16
 8028540:	46bd      	mov	sp, r7
 8028542:	bd80      	pop	{r7, pc}
 8028544:	40010000 	.word	0x40010000
 8028548:	40010400 	.word	0x40010400
 802854c:	40000400 	.word	0x40000400
 8028550:	40000800 	.word	0x40000800
 8028554:	40000c00 	.word	0x40000c00
 8028558:	40014000 	.word	0x40014000
 802855c:	40001800 	.word	0x40001800

08028560 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8028560:	b580      	push	{r7, lr}
 8028562:	b082      	sub	sp, #8
 8028564:	af00      	add	r7, sp, #0
 8028566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8028568:	687b      	ldr	r3, [r7, #4]
 802856a:	2b00      	cmp	r3, #0
 802856c:	d101      	bne.n	8028572 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 802856e:	2301      	movs	r3, #1
 8028570:	e041      	b.n	80285f6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8028572:	687b      	ldr	r3, [r7, #4]
 8028574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028578:	b2db      	uxtb	r3, r3
 802857a:	2b00      	cmp	r3, #0
 802857c:	d106      	bne.n	802858c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802857e:	687b      	ldr	r3, [r7, #4]
 8028580:	2200      	movs	r2, #0
 8028582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8028586:	6878      	ldr	r0, [r7, #4]
 8028588:	f000 f839 	bl	80285fe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802858c:	687b      	ldr	r3, [r7, #4]
 802858e:	2202      	movs	r2, #2
 8028590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8028594:	687b      	ldr	r3, [r7, #4]
 8028596:	681a      	ldr	r2, [r3, #0]
 8028598:	687b      	ldr	r3, [r7, #4]
 802859a:	3304      	adds	r3, #4
 802859c:	4619      	mov	r1, r3
 802859e:	4610      	mov	r0, r2
 80285a0:	f000 fe0e 	bl	80291c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80285a4:	687b      	ldr	r3, [r7, #4]
 80285a6:	2201      	movs	r2, #1
 80285a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80285ac:	687b      	ldr	r3, [r7, #4]
 80285ae:	2201      	movs	r2, #1
 80285b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80285b4:	687b      	ldr	r3, [r7, #4]
 80285b6:	2201      	movs	r2, #1
 80285b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80285bc:	687b      	ldr	r3, [r7, #4]
 80285be:	2201      	movs	r2, #1
 80285c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80285c4:	687b      	ldr	r3, [r7, #4]
 80285c6:	2201      	movs	r2, #1
 80285c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80285cc:	687b      	ldr	r3, [r7, #4]
 80285ce:	2201      	movs	r2, #1
 80285d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80285d4:	687b      	ldr	r3, [r7, #4]
 80285d6:	2201      	movs	r2, #1
 80285d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80285dc:	687b      	ldr	r3, [r7, #4]
 80285de:	2201      	movs	r2, #1
 80285e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80285e4:	687b      	ldr	r3, [r7, #4]
 80285e6:	2201      	movs	r2, #1
 80285e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80285ec:	687b      	ldr	r3, [r7, #4]
 80285ee:	2201      	movs	r2, #1
 80285f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80285f4:	2300      	movs	r3, #0
}
 80285f6:	4618      	mov	r0, r3
 80285f8:	3708      	adds	r7, #8
 80285fa:	46bd      	mov	sp, r7
 80285fc:	bd80      	pop	{r7, pc}

080285fe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80285fe:	b480      	push	{r7}
 8028600:	b083      	sub	sp, #12
 8028602:	af00      	add	r7, sp, #0
 8028604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8028606:	bf00      	nop
 8028608:	370c      	adds	r7, #12
 802860a:	46bd      	mov	sp, r7
 802860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028610:	4770      	bx	lr
	...

08028614 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8028614:	b580      	push	{r7, lr}
 8028616:	b084      	sub	sp, #16
 8028618:	af00      	add	r7, sp, #0
 802861a:	6078      	str	r0, [r7, #4]
 802861c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 802861e:	683b      	ldr	r3, [r7, #0]
 8028620:	2b00      	cmp	r3, #0
 8028622:	d104      	bne.n	802862e <HAL_TIM_IC_Start+0x1a>
 8028624:	687b      	ldr	r3, [r7, #4]
 8028626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802862a:	b2db      	uxtb	r3, r3
 802862c:	e013      	b.n	8028656 <HAL_TIM_IC_Start+0x42>
 802862e:	683b      	ldr	r3, [r7, #0]
 8028630:	2b04      	cmp	r3, #4
 8028632:	d104      	bne.n	802863e <HAL_TIM_IC_Start+0x2a>
 8028634:	687b      	ldr	r3, [r7, #4]
 8028636:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 802863a:	b2db      	uxtb	r3, r3
 802863c:	e00b      	b.n	8028656 <HAL_TIM_IC_Start+0x42>
 802863e:	683b      	ldr	r3, [r7, #0]
 8028640:	2b08      	cmp	r3, #8
 8028642:	d104      	bne.n	802864e <HAL_TIM_IC_Start+0x3a>
 8028644:	687b      	ldr	r3, [r7, #4]
 8028646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802864a:	b2db      	uxtb	r3, r3
 802864c:	e003      	b.n	8028656 <HAL_TIM_IC_Start+0x42>
 802864e:	687b      	ldr	r3, [r7, #4]
 8028650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8028654:	b2db      	uxtb	r3, r3
 8028656:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8028658:	683b      	ldr	r3, [r7, #0]
 802865a:	2b00      	cmp	r3, #0
 802865c:	d104      	bne.n	8028668 <HAL_TIM_IC_Start+0x54>
 802865e:	687b      	ldr	r3, [r7, #4]
 8028660:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8028664:	b2db      	uxtb	r3, r3
 8028666:	e013      	b.n	8028690 <HAL_TIM_IC_Start+0x7c>
 8028668:	683b      	ldr	r3, [r7, #0]
 802866a:	2b04      	cmp	r3, #4
 802866c:	d104      	bne.n	8028678 <HAL_TIM_IC_Start+0x64>
 802866e:	687b      	ldr	r3, [r7, #4]
 8028670:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8028674:	b2db      	uxtb	r3, r3
 8028676:	e00b      	b.n	8028690 <HAL_TIM_IC_Start+0x7c>
 8028678:	683b      	ldr	r3, [r7, #0]
 802867a:	2b08      	cmp	r3, #8
 802867c:	d104      	bne.n	8028688 <HAL_TIM_IC_Start+0x74>
 802867e:	687b      	ldr	r3, [r7, #4]
 8028680:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8028684:	b2db      	uxtb	r3, r3
 8028686:	e003      	b.n	8028690 <HAL_TIM_IC_Start+0x7c>
 8028688:	687b      	ldr	r3, [r7, #4]
 802868a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802868e:	b2db      	uxtb	r3, r3
 8028690:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8028692:	7bfb      	ldrb	r3, [r7, #15]
 8028694:	2b01      	cmp	r3, #1
 8028696:	d102      	bne.n	802869e <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8028698:	7bbb      	ldrb	r3, [r7, #14]
 802869a:	2b01      	cmp	r3, #1
 802869c:	d001      	beq.n	80286a2 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 802869e:	2301      	movs	r3, #1
 80286a0:	e081      	b.n	80287a6 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80286a2:	683b      	ldr	r3, [r7, #0]
 80286a4:	2b00      	cmp	r3, #0
 80286a6:	d104      	bne.n	80286b2 <HAL_TIM_IC_Start+0x9e>
 80286a8:	687b      	ldr	r3, [r7, #4]
 80286aa:	2202      	movs	r2, #2
 80286ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80286b0:	e013      	b.n	80286da <HAL_TIM_IC_Start+0xc6>
 80286b2:	683b      	ldr	r3, [r7, #0]
 80286b4:	2b04      	cmp	r3, #4
 80286b6:	d104      	bne.n	80286c2 <HAL_TIM_IC_Start+0xae>
 80286b8:	687b      	ldr	r3, [r7, #4]
 80286ba:	2202      	movs	r2, #2
 80286bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80286c0:	e00b      	b.n	80286da <HAL_TIM_IC_Start+0xc6>
 80286c2:	683b      	ldr	r3, [r7, #0]
 80286c4:	2b08      	cmp	r3, #8
 80286c6:	d104      	bne.n	80286d2 <HAL_TIM_IC_Start+0xbe>
 80286c8:	687b      	ldr	r3, [r7, #4]
 80286ca:	2202      	movs	r2, #2
 80286cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80286d0:	e003      	b.n	80286da <HAL_TIM_IC_Start+0xc6>
 80286d2:	687b      	ldr	r3, [r7, #4]
 80286d4:	2202      	movs	r2, #2
 80286d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80286da:	683b      	ldr	r3, [r7, #0]
 80286dc:	2b00      	cmp	r3, #0
 80286de:	d104      	bne.n	80286ea <HAL_TIM_IC_Start+0xd6>
 80286e0:	687b      	ldr	r3, [r7, #4]
 80286e2:	2202      	movs	r2, #2
 80286e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80286e8:	e013      	b.n	8028712 <HAL_TIM_IC_Start+0xfe>
 80286ea:	683b      	ldr	r3, [r7, #0]
 80286ec:	2b04      	cmp	r3, #4
 80286ee:	d104      	bne.n	80286fa <HAL_TIM_IC_Start+0xe6>
 80286f0:	687b      	ldr	r3, [r7, #4]
 80286f2:	2202      	movs	r2, #2
 80286f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80286f8:	e00b      	b.n	8028712 <HAL_TIM_IC_Start+0xfe>
 80286fa:	683b      	ldr	r3, [r7, #0]
 80286fc:	2b08      	cmp	r3, #8
 80286fe:	d104      	bne.n	802870a <HAL_TIM_IC_Start+0xf6>
 8028700:	687b      	ldr	r3, [r7, #4]
 8028702:	2202      	movs	r2, #2
 8028704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028708:	e003      	b.n	8028712 <HAL_TIM_IC_Start+0xfe>
 802870a:	687b      	ldr	r3, [r7, #4]
 802870c:	2202      	movs	r2, #2
 802870e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8028712:	687b      	ldr	r3, [r7, #4]
 8028714:	681b      	ldr	r3, [r3, #0]
 8028716:	2201      	movs	r2, #1
 8028718:	6839      	ldr	r1, [r7, #0]
 802871a:	4618      	mov	r0, r3
 802871c:	f001 f9f6 	bl	8029b0c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028720:	687b      	ldr	r3, [r7, #4]
 8028722:	681b      	ldr	r3, [r3, #0]
 8028724:	4a22      	ldr	r2, [pc, #136]	; (80287b0 <HAL_TIM_IC_Start+0x19c>)
 8028726:	4293      	cmp	r3, r2
 8028728:	d022      	beq.n	8028770 <HAL_TIM_IC_Start+0x15c>
 802872a:	687b      	ldr	r3, [r7, #4]
 802872c:	681b      	ldr	r3, [r3, #0]
 802872e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028732:	d01d      	beq.n	8028770 <HAL_TIM_IC_Start+0x15c>
 8028734:	687b      	ldr	r3, [r7, #4]
 8028736:	681b      	ldr	r3, [r3, #0]
 8028738:	4a1e      	ldr	r2, [pc, #120]	; (80287b4 <HAL_TIM_IC_Start+0x1a0>)
 802873a:	4293      	cmp	r3, r2
 802873c:	d018      	beq.n	8028770 <HAL_TIM_IC_Start+0x15c>
 802873e:	687b      	ldr	r3, [r7, #4]
 8028740:	681b      	ldr	r3, [r3, #0]
 8028742:	4a1d      	ldr	r2, [pc, #116]	; (80287b8 <HAL_TIM_IC_Start+0x1a4>)
 8028744:	4293      	cmp	r3, r2
 8028746:	d013      	beq.n	8028770 <HAL_TIM_IC_Start+0x15c>
 8028748:	687b      	ldr	r3, [r7, #4]
 802874a:	681b      	ldr	r3, [r3, #0]
 802874c:	4a1b      	ldr	r2, [pc, #108]	; (80287bc <HAL_TIM_IC_Start+0x1a8>)
 802874e:	4293      	cmp	r3, r2
 8028750:	d00e      	beq.n	8028770 <HAL_TIM_IC_Start+0x15c>
 8028752:	687b      	ldr	r3, [r7, #4]
 8028754:	681b      	ldr	r3, [r3, #0]
 8028756:	4a1a      	ldr	r2, [pc, #104]	; (80287c0 <HAL_TIM_IC_Start+0x1ac>)
 8028758:	4293      	cmp	r3, r2
 802875a:	d009      	beq.n	8028770 <HAL_TIM_IC_Start+0x15c>
 802875c:	687b      	ldr	r3, [r7, #4]
 802875e:	681b      	ldr	r3, [r3, #0]
 8028760:	4a18      	ldr	r2, [pc, #96]	; (80287c4 <HAL_TIM_IC_Start+0x1b0>)
 8028762:	4293      	cmp	r3, r2
 8028764:	d004      	beq.n	8028770 <HAL_TIM_IC_Start+0x15c>
 8028766:	687b      	ldr	r3, [r7, #4]
 8028768:	681b      	ldr	r3, [r3, #0]
 802876a:	4a17      	ldr	r2, [pc, #92]	; (80287c8 <HAL_TIM_IC_Start+0x1b4>)
 802876c:	4293      	cmp	r3, r2
 802876e:	d111      	bne.n	8028794 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028770:	687b      	ldr	r3, [r7, #4]
 8028772:	681b      	ldr	r3, [r3, #0]
 8028774:	689b      	ldr	r3, [r3, #8]
 8028776:	f003 0307 	and.w	r3, r3, #7
 802877a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802877c:	68bb      	ldr	r3, [r7, #8]
 802877e:	2b06      	cmp	r3, #6
 8028780:	d010      	beq.n	80287a4 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8028782:	687b      	ldr	r3, [r7, #4]
 8028784:	681b      	ldr	r3, [r3, #0]
 8028786:	681a      	ldr	r2, [r3, #0]
 8028788:	687b      	ldr	r3, [r7, #4]
 802878a:	681b      	ldr	r3, [r3, #0]
 802878c:	f042 0201 	orr.w	r2, r2, #1
 8028790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028792:	e007      	b.n	80287a4 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8028794:	687b      	ldr	r3, [r7, #4]
 8028796:	681b      	ldr	r3, [r3, #0]
 8028798:	681a      	ldr	r2, [r3, #0]
 802879a:	687b      	ldr	r3, [r7, #4]
 802879c:	681b      	ldr	r3, [r3, #0]
 802879e:	f042 0201 	orr.w	r2, r2, #1
 80287a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80287a4:	2300      	movs	r3, #0
}
 80287a6:	4618      	mov	r0, r3
 80287a8:	3710      	adds	r7, #16
 80287aa:	46bd      	mov	sp, r7
 80287ac:	bd80      	pop	{r7, pc}
 80287ae:	bf00      	nop
 80287b0:	40010000 	.word	0x40010000
 80287b4:	40000400 	.word	0x40000400
 80287b8:	40000800 	.word	0x40000800
 80287bc:	40000c00 	.word	0x40000c00
 80287c0:	40010400 	.word	0x40010400
 80287c4:	40014000 	.word	0x40014000
 80287c8:	40001800 	.word	0x40001800

080287cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80287cc:	b580      	push	{r7, lr}
 80287ce:	b084      	sub	sp, #16
 80287d0:	af00      	add	r7, sp, #0
 80287d2:	6078      	str	r0, [r7, #4]
 80287d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80287d6:	2300      	movs	r3, #0
 80287d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80287da:	683b      	ldr	r3, [r7, #0]
 80287dc:	2b00      	cmp	r3, #0
 80287de:	d104      	bne.n	80287ea <HAL_TIM_IC_Start_IT+0x1e>
 80287e0:	687b      	ldr	r3, [r7, #4]
 80287e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80287e6:	b2db      	uxtb	r3, r3
 80287e8:	e013      	b.n	8028812 <HAL_TIM_IC_Start_IT+0x46>
 80287ea:	683b      	ldr	r3, [r7, #0]
 80287ec:	2b04      	cmp	r3, #4
 80287ee:	d104      	bne.n	80287fa <HAL_TIM_IC_Start_IT+0x2e>
 80287f0:	687b      	ldr	r3, [r7, #4]
 80287f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80287f6:	b2db      	uxtb	r3, r3
 80287f8:	e00b      	b.n	8028812 <HAL_TIM_IC_Start_IT+0x46>
 80287fa:	683b      	ldr	r3, [r7, #0]
 80287fc:	2b08      	cmp	r3, #8
 80287fe:	d104      	bne.n	802880a <HAL_TIM_IC_Start_IT+0x3e>
 8028800:	687b      	ldr	r3, [r7, #4]
 8028802:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8028806:	b2db      	uxtb	r3, r3
 8028808:	e003      	b.n	8028812 <HAL_TIM_IC_Start_IT+0x46>
 802880a:	687b      	ldr	r3, [r7, #4]
 802880c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8028810:	b2db      	uxtb	r3, r3
 8028812:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8028814:	683b      	ldr	r3, [r7, #0]
 8028816:	2b00      	cmp	r3, #0
 8028818:	d104      	bne.n	8028824 <HAL_TIM_IC_Start_IT+0x58>
 802881a:	687b      	ldr	r3, [r7, #4]
 802881c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8028820:	b2db      	uxtb	r3, r3
 8028822:	e013      	b.n	802884c <HAL_TIM_IC_Start_IT+0x80>
 8028824:	683b      	ldr	r3, [r7, #0]
 8028826:	2b04      	cmp	r3, #4
 8028828:	d104      	bne.n	8028834 <HAL_TIM_IC_Start_IT+0x68>
 802882a:	687b      	ldr	r3, [r7, #4]
 802882c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8028830:	b2db      	uxtb	r3, r3
 8028832:	e00b      	b.n	802884c <HAL_TIM_IC_Start_IT+0x80>
 8028834:	683b      	ldr	r3, [r7, #0]
 8028836:	2b08      	cmp	r3, #8
 8028838:	d104      	bne.n	8028844 <HAL_TIM_IC_Start_IT+0x78>
 802883a:	687b      	ldr	r3, [r7, #4]
 802883c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8028840:	b2db      	uxtb	r3, r3
 8028842:	e003      	b.n	802884c <HAL_TIM_IC_Start_IT+0x80>
 8028844:	687b      	ldr	r3, [r7, #4]
 8028846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802884a:	b2db      	uxtb	r3, r3
 802884c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 802884e:	7bbb      	ldrb	r3, [r7, #14]
 8028850:	2b01      	cmp	r3, #1
 8028852:	d102      	bne.n	802885a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8028854:	7b7b      	ldrb	r3, [r7, #13]
 8028856:	2b01      	cmp	r3, #1
 8028858:	d001      	beq.n	802885e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 802885a:	2301      	movs	r3, #1
 802885c:	e0cc      	b.n	80289f8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 802885e:	683b      	ldr	r3, [r7, #0]
 8028860:	2b00      	cmp	r3, #0
 8028862:	d104      	bne.n	802886e <HAL_TIM_IC_Start_IT+0xa2>
 8028864:	687b      	ldr	r3, [r7, #4]
 8028866:	2202      	movs	r2, #2
 8028868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802886c:	e013      	b.n	8028896 <HAL_TIM_IC_Start_IT+0xca>
 802886e:	683b      	ldr	r3, [r7, #0]
 8028870:	2b04      	cmp	r3, #4
 8028872:	d104      	bne.n	802887e <HAL_TIM_IC_Start_IT+0xb2>
 8028874:	687b      	ldr	r3, [r7, #4]
 8028876:	2202      	movs	r2, #2
 8028878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 802887c:	e00b      	b.n	8028896 <HAL_TIM_IC_Start_IT+0xca>
 802887e:	683b      	ldr	r3, [r7, #0]
 8028880:	2b08      	cmp	r3, #8
 8028882:	d104      	bne.n	802888e <HAL_TIM_IC_Start_IT+0xc2>
 8028884:	687b      	ldr	r3, [r7, #4]
 8028886:	2202      	movs	r2, #2
 8028888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802888c:	e003      	b.n	8028896 <HAL_TIM_IC_Start_IT+0xca>
 802888e:	687b      	ldr	r3, [r7, #4]
 8028890:	2202      	movs	r2, #2
 8028892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8028896:	683b      	ldr	r3, [r7, #0]
 8028898:	2b00      	cmp	r3, #0
 802889a:	d104      	bne.n	80288a6 <HAL_TIM_IC_Start_IT+0xda>
 802889c:	687b      	ldr	r3, [r7, #4]
 802889e:	2202      	movs	r2, #2
 80288a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80288a4:	e013      	b.n	80288ce <HAL_TIM_IC_Start_IT+0x102>
 80288a6:	683b      	ldr	r3, [r7, #0]
 80288a8:	2b04      	cmp	r3, #4
 80288aa:	d104      	bne.n	80288b6 <HAL_TIM_IC_Start_IT+0xea>
 80288ac:	687b      	ldr	r3, [r7, #4]
 80288ae:	2202      	movs	r2, #2
 80288b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80288b4:	e00b      	b.n	80288ce <HAL_TIM_IC_Start_IT+0x102>
 80288b6:	683b      	ldr	r3, [r7, #0]
 80288b8:	2b08      	cmp	r3, #8
 80288ba:	d104      	bne.n	80288c6 <HAL_TIM_IC_Start_IT+0xfa>
 80288bc:	687b      	ldr	r3, [r7, #4]
 80288be:	2202      	movs	r2, #2
 80288c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80288c4:	e003      	b.n	80288ce <HAL_TIM_IC_Start_IT+0x102>
 80288c6:	687b      	ldr	r3, [r7, #4]
 80288c8:	2202      	movs	r2, #2
 80288ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80288ce:	683b      	ldr	r3, [r7, #0]
 80288d0:	2b0c      	cmp	r3, #12
 80288d2:	d841      	bhi.n	8028958 <HAL_TIM_IC_Start_IT+0x18c>
 80288d4:	a201      	add	r2, pc, #4	; (adr r2, 80288dc <HAL_TIM_IC_Start_IT+0x110>)
 80288d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80288da:	bf00      	nop
 80288dc:	08028911 	.word	0x08028911
 80288e0:	08028959 	.word	0x08028959
 80288e4:	08028959 	.word	0x08028959
 80288e8:	08028959 	.word	0x08028959
 80288ec:	08028923 	.word	0x08028923
 80288f0:	08028959 	.word	0x08028959
 80288f4:	08028959 	.word	0x08028959
 80288f8:	08028959 	.word	0x08028959
 80288fc:	08028935 	.word	0x08028935
 8028900:	08028959 	.word	0x08028959
 8028904:	08028959 	.word	0x08028959
 8028908:	08028959 	.word	0x08028959
 802890c:	08028947 	.word	0x08028947
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8028910:	687b      	ldr	r3, [r7, #4]
 8028912:	681b      	ldr	r3, [r3, #0]
 8028914:	68da      	ldr	r2, [r3, #12]
 8028916:	687b      	ldr	r3, [r7, #4]
 8028918:	681b      	ldr	r3, [r3, #0]
 802891a:	f042 0202 	orr.w	r2, r2, #2
 802891e:	60da      	str	r2, [r3, #12]
      break;
 8028920:	e01d      	b.n	802895e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8028922:	687b      	ldr	r3, [r7, #4]
 8028924:	681b      	ldr	r3, [r3, #0]
 8028926:	68da      	ldr	r2, [r3, #12]
 8028928:	687b      	ldr	r3, [r7, #4]
 802892a:	681b      	ldr	r3, [r3, #0]
 802892c:	f042 0204 	orr.w	r2, r2, #4
 8028930:	60da      	str	r2, [r3, #12]
      break;
 8028932:	e014      	b.n	802895e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8028934:	687b      	ldr	r3, [r7, #4]
 8028936:	681b      	ldr	r3, [r3, #0]
 8028938:	68da      	ldr	r2, [r3, #12]
 802893a:	687b      	ldr	r3, [r7, #4]
 802893c:	681b      	ldr	r3, [r3, #0]
 802893e:	f042 0208 	orr.w	r2, r2, #8
 8028942:	60da      	str	r2, [r3, #12]
      break;
 8028944:	e00b      	b.n	802895e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8028946:	687b      	ldr	r3, [r7, #4]
 8028948:	681b      	ldr	r3, [r3, #0]
 802894a:	68da      	ldr	r2, [r3, #12]
 802894c:	687b      	ldr	r3, [r7, #4]
 802894e:	681b      	ldr	r3, [r3, #0]
 8028950:	f042 0210 	orr.w	r2, r2, #16
 8028954:	60da      	str	r2, [r3, #12]
      break;
 8028956:	e002      	b.n	802895e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8028958:	2301      	movs	r3, #1
 802895a:	73fb      	strb	r3, [r7, #15]
      break;
 802895c:	bf00      	nop
  }

  if (status == HAL_OK)
 802895e:	7bfb      	ldrb	r3, [r7, #15]
 8028960:	2b00      	cmp	r3, #0
 8028962:	d148      	bne.n	80289f6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8028964:	687b      	ldr	r3, [r7, #4]
 8028966:	681b      	ldr	r3, [r3, #0]
 8028968:	2201      	movs	r2, #1
 802896a:	6839      	ldr	r1, [r7, #0]
 802896c:	4618      	mov	r0, r3
 802896e:	f001 f8cd 	bl	8029b0c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028972:	687b      	ldr	r3, [r7, #4]
 8028974:	681b      	ldr	r3, [r3, #0]
 8028976:	4a22      	ldr	r2, [pc, #136]	; (8028a00 <HAL_TIM_IC_Start_IT+0x234>)
 8028978:	4293      	cmp	r3, r2
 802897a:	d022      	beq.n	80289c2 <HAL_TIM_IC_Start_IT+0x1f6>
 802897c:	687b      	ldr	r3, [r7, #4]
 802897e:	681b      	ldr	r3, [r3, #0]
 8028980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028984:	d01d      	beq.n	80289c2 <HAL_TIM_IC_Start_IT+0x1f6>
 8028986:	687b      	ldr	r3, [r7, #4]
 8028988:	681b      	ldr	r3, [r3, #0]
 802898a:	4a1e      	ldr	r2, [pc, #120]	; (8028a04 <HAL_TIM_IC_Start_IT+0x238>)
 802898c:	4293      	cmp	r3, r2
 802898e:	d018      	beq.n	80289c2 <HAL_TIM_IC_Start_IT+0x1f6>
 8028990:	687b      	ldr	r3, [r7, #4]
 8028992:	681b      	ldr	r3, [r3, #0]
 8028994:	4a1c      	ldr	r2, [pc, #112]	; (8028a08 <HAL_TIM_IC_Start_IT+0x23c>)
 8028996:	4293      	cmp	r3, r2
 8028998:	d013      	beq.n	80289c2 <HAL_TIM_IC_Start_IT+0x1f6>
 802899a:	687b      	ldr	r3, [r7, #4]
 802899c:	681b      	ldr	r3, [r3, #0]
 802899e:	4a1b      	ldr	r2, [pc, #108]	; (8028a0c <HAL_TIM_IC_Start_IT+0x240>)
 80289a0:	4293      	cmp	r3, r2
 80289a2:	d00e      	beq.n	80289c2 <HAL_TIM_IC_Start_IT+0x1f6>
 80289a4:	687b      	ldr	r3, [r7, #4]
 80289a6:	681b      	ldr	r3, [r3, #0]
 80289a8:	4a19      	ldr	r2, [pc, #100]	; (8028a10 <HAL_TIM_IC_Start_IT+0x244>)
 80289aa:	4293      	cmp	r3, r2
 80289ac:	d009      	beq.n	80289c2 <HAL_TIM_IC_Start_IT+0x1f6>
 80289ae:	687b      	ldr	r3, [r7, #4]
 80289b0:	681b      	ldr	r3, [r3, #0]
 80289b2:	4a18      	ldr	r2, [pc, #96]	; (8028a14 <HAL_TIM_IC_Start_IT+0x248>)
 80289b4:	4293      	cmp	r3, r2
 80289b6:	d004      	beq.n	80289c2 <HAL_TIM_IC_Start_IT+0x1f6>
 80289b8:	687b      	ldr	r3, [r7, #4]
 80289ba:	681b      	ldr	r3, [r3, #0]
 80289bc:	4a16      	ldr	r2, [pc, #88]	; (8028a18 <HAL_TIM_IC_Start_IT+0x24c>)
 80289be:	4293      	cmp	r3, r2
 80289c0:	d111      	bne.n	80289e6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80289c2:	687b      	ldr	r3, [r7, #4]
 80289c4:	681b      	ldr	r3, [r3, #0]
 80289c6:	689b      	ldr	r3, [r3, #8]
 80289c8:	f003 0307 	and.w	r3, r3, #7
 80289cc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80289ce:	68bb      	ldr	r3, [r7, #8]
 80289d0:	2b06      	cmp	r3, #6
 80289d2:	d010      	beq.n	80289f6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80289d4:	687b      	ldr	r3, [r7, #4]
 80289d6:	681b      	ldr	r3, [r3, #0]
 80289d8:	681a      	ldr	r2, [r3, #0]
 80289da:	687b      	ldr	r3, [r7, #4]
 80289dc:	681b      	ldr	r3, [r3, #0]
 80289de:	f042 0201 	orr.w	r2, r2, #1
 80289e2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80289e4:	e007      	b.n	80289f6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80289e6:	687b      	ldr	r3, [r7, #4]
 80289e8:	681b      	ldr	r3, [r3, #0]
 80289ea:	681a      	ldr	r2, [r3, #0]
 80289ec:	687b      	ldr	r3, [r7, #4]
 80289ee:	681b      	ldr	r3, [r3, #0]
 80289f0:	f042 0201 	orr.w	r2, r2, #1
 80289f4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80289f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80289f8:	4618      	mov	r0, r3
 80289fa:	3710      	adds	r7, #16
 80289fc:	46bd      	mov	sp, r7
 80289fe:	bd80      	pop	{r7, pc}
 8028a00:	40010000 	.word	0x40010000
 8028a04:	40000400 	.word	0x40000400
 8028a08:	40000800 	.word	0x40000800
 8028a0c:	40000c00 	.word	0x40000c00
 8028a10:	40010400 	.word	0x40010400
 8028a14:	40014000 	.word	0x40014000
 8028a18:	40001800 	.word	0x40001800

08028a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8028a1c:	b580      	push	{r7, lr}
 8028a1e:	b082      	sub	sp, #8
 8028a20:	af00      	add	r7, sp, #0
 8028a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8028a24:	687b      	ldr	r3, [r7, #4]
 8028a26:	681b      	ldr	r3, [r3, #0]
 8028a28:	691b      	ldr	r3, [r3, #16]
 8028a2a:	f003 0302 	and.w	r3, r3, #2
 8028a2e:	2b02      	cmp	r3, #2
 8028a30:	d122      	bne.n	8028a78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8028a32:	687b      	ldr	r3, [r7, #4]
 8028a34:	681b      	ldr	r3, [r3, #0]
 8028a36:	68db      	ldr	r3, [r3, #12]
 8028a38:	f003 0302 	and.w	r3, r3, #2
 8028a3c:	2b02      	cmp	r3, #2
 8028a3e:	d11b      	bne.n	8028a78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8028a40:	687b      	ldr	r3, [r7, #4]
 8028a42:	681b      	ldr	r3, [r3, #0]
 8028a44:	f06f 0202 	mvn.w	r2, #2
 8028a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8028a4a:	687b      	ldr	r3, [r7, #4]
 8028a4c:	2201      	movs	r2, #1
 8028a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8028a50:	687b      	ldr	r3, [r7, #4]
 8028a52:	681b      	ldr	r3, [r3, #0]
 8028a54:	699b      	ldr	r3, [r3, #24]
 8028a56:	f003 0303 	and.w	r3, r3, #3
 8028a5a:	2b00      	cmp	r3, #0
 8028a5c:	d003      	beq.n	8028a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8028a5e:	6878      	ldr	r0, [r7, #4]
 8028a60:	f7eb fdb6 	bl	80145d0 <HAL_TIM_IC_CaptureCallback>
 8028a64:	e005      	b.n	8028a72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8028a66:	6878      	ldr	r0, [r7, #4]
 8028a68:	f000 fb8c 	bl	8029184 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028a6c:	6878      	ldr	r0, [r7, #4]
 8028a6e:	f000 fb93 	bl	8029198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028a72:	687b      	ldr	r3, [r7, #4]
 8028a74:	2200      	movs	r2, #0
 8028a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8028a78:	687b      	ldr	r3, [r7, #4]
 8028a7a:	681b      	ldr	r3, [r3, #0]
 8028a7c:	691b      	ldr	r3, [r3, #16]
 8028a7e:	f003 0304 	and.w	r3, r3, #4
 8028a82:	2b04      	cmp	r3, #4
 8028a84:	d122      	bne.n	8028acc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8028a86:	687b      	ldr	r3, [r7, #4]
 8028a88:	681b      	ldr	r3, [r3, #0]
 8028a8a:	68db      	ldr	r3, [r3, #12]
 8028a8c:	f003 0304 	and.w	r3, r3, #4
 8028a90:	2b04      	cmp	r3, #4
 8028a92:	d11b      	bne.n	8028acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8028a94:	687b      	ldr	r3, [r7, #4]
 8028a96:	681b      	ldr	r3, [r3, #0]
 8028a98:	f06f 0204 	mvn.w	r2, #4
 8028a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8028a9e:	687b      	ldr	r3, [r7, #4]
 8028aa0:	2202      	movs	r2, #2
 8028aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8028aa4:	687b      	ldr	r3, [r7, #4]
 8028aa6:	681b      	ldr	r3, [r3, #0]
 8028aa8:	699b      	ldr	r3, [r3, #24]
 8028aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028aae:	2b00      	cmp	r3, #0
 8028ab0:	d003      	beq.n	8028aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028ab2:	6878      	ldr	r0, [r7, #4]
 8028ab4:	f7eb fd8c 	bl	80145d0 <HAL_TIM_IC_CaptureCallback>
 8028ab8:	e005      	b.n	8028ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028aba:	6878      	ldr	r0, [r7, #4]
 8028abc:	f000 fb62 	bl	8029184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028ac0:	6878      	ldr	r0, [r7, #4]
 8028ac2:	f000 fb69 	bl	8029198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028ac6:	687b      	ldr	r3, [r7, #4]
 8028ac8:	2200      	movs	r2, #0
 8028aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8028acc:	687b      	ldr	r3, [r7, #4]
 8028ace:	681b      	ldr	r3, [r3, #0]
 8028ad0:	691b      	ldr	r3, [r3, #16]
 8028ad2:	f003 0308 	and.w	r3, r3, #8
 8028ad6:	2b08      	cmp	r3, #8
 8028ad8:	d122      	bne.n	8028b20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8028ada:	687b      	ldr	r3, [r7, #4]
 8028adc:	681b      	ldr	r3, [r3, #0]
 8028ade:	68db      	ldr	r3, [r3, #12]
 8028ae0:	f003 0308 	and.w	r3, r3, #8
 8028ae4:	2b08      	cmp	r3, #8
 8028ae6:	d11b      	bne.n	8028b20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8028ae8:	687b      	ldr	r3, [r7, #4]
 8028aea:	681b      	ldr	r3, [r3, #0]
 8028aec:	f06f 0208 	mvn.w	r2, #8
 8028af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8028af2:	687b      	ldr	r3, [r7, #4]
 8028af4:	2204      	movs	r2, #4
 8028af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8028af8:	687b      	ldr	r3, [r7, #4]
 8028afa:	681b      	ldr	r3, [r3, #0]
 8028afc:	69db      	ldr	r3, [r3, #28]
 8028afe:	f003 0303 	and.w	r3, r3, #3
 8028b02:	2b00      	cmp	r3, #0
 8028b04:	d003      	beq.n	8028b0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028b06:	6878      	ldr	r0, [r7, #4]
 8028b08:	f7eb fd62 	bl	80145d0 <HAL_TIM_IC_CaptureCallback>
 8028b0c:	e005      	b.n	8028b1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028b0e:	6878      	ldr	r0, [r7, #4]
 8028b10:	f000 fb38 	bl	8029184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028b14:	6878      	ldr	r0, [r7, #4]
 8028b16:	f000 fb3f 	bl	8029198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028b1a:	687b      	ldr	r3, [r7, #4]
 8028b1c:	2200      	movs	r2, #0
 8028b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8028b20:	687b      	ldr	r3, [r7, #4]
 8028b22:	681b      	ldr	r3, [r3, #0]
 8028b24:	691b      	ldr	r3, [r3, #16]
 8028b26:	f003 0310 	and.w	r3, r3, #16
 8028b2a:	2b10      	cmp	r3, #16
 8028b2c:	d122      	bne.n	8028b74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8028b2e:	687b      	ldr	r3, [r7, #4]
 8028b30:	681b      	ldr	r3, [r3, #0]
 8028b32:	68db      	ldr	r3, [r3, #12]
 8028b34:	f003 0310 	and.w	r3, r3, #16
 8028b38:	2b10      	cmp	r3, #16
 8028b3a:	d11b      	bne.n	8028b74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8028b3c:	687b      	ldr	r3, [r7, #4]
 8028b3e:	681b      	ldr	r3, [r3, #0]
 8028b40:	f06f 0210 	mvn.w	r2, #16
 8028b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8028b46:	687b      	ldr	r3, [r7, #4]
 8028b48:	2208      	movs	r2, #8
 8028b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8028b4c:	687b      	ldr	r3, [r7, #4]
 8028b4e:	681b      	ldr	r3, [r3, #0]
 8028b50:	69db      	ldr	r3, [r3, #28]
 8028b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028b56:	2b00      	cmp	r3, #0
 8028b58:	d003      	beq.n	8028b62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028b5a:	6878      	ldr	r0, [r7, #4]
 8028b5c:	f7eb fd38 	bl	80145d0 <HAL_TIM_IC_CaptureCallback>
 8028b60:	e005      	b.n	8028b6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028b62:	6878      	ldr	r0, [r7, #4]
 8028b64:	f000 fb0e 	bl	8029184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028b68:	6878      	ldr	r0, [r7, #4]
 8028b6a:	f000 fb15 	bl	8029198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028b6e:	687b      	ldr	r3, [r7, #4]
 8028b70:	2200      	movs	r2, #0
 8028b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8028b74:	687b      	ldr	r3, [r7, #4]
 8028b76:	681b      	ldr	r3, [r3, #0]
 8028b78:	691b      	ldr	r3, [r3, #16]
 8028b7a:	f003 0301 	and.w	r3, r3, #1
 8028b7e:	2b01      	cmp	r3, #1
 8028b80:	d10e      	bne.n	8028ba0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8028b82:	687b      	ldr	r3, [r7, #4]
 8028b84:	681b      	ldr	r3, [r3, #0]
 8028b86:	68db      	ldr	r3, [r3, #12]
 8028b88:	f003 0301 	and.w	r3, r3, #1
 8028b8c:	2b01      	cmp	r3, #1
 8028b8e:	d107      	bne.n	8028ba0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8028b90:	687b      	ldr	r3, [r7, #4]
 8028b92:	681b      	ldr	r3, [r3, #0]
 8028b94:	f06f 0201 	mvn.w	r2, #1
 8028b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8028b9a:	6878      	ldr	r0, [r7, #4]
 8028b9c:	f7ee fd48 	bl	8017630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8028ba0:	687b      	ldr	r3, [r7, #4]
 8028ba2:	681b      	ldr	r3, [r3, #0]
 8028ba4:	691b      	ldr	r3, [r3, #16]
 8028ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028baa:	2b80      	cmp	r3, #128	; 0x80
 8028bac:	d10e      	bne.n	8028bcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8028bae:	687b      	ldr	r3, [r7, #4]
 8028bb0:	681b      	ldr	r3, [r3, #0]
 8028bb2:	68db      	ldr	r3, [r3, #12]
 8028bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028bb8:	2b80      	cmp	r3, #128	; 0x80
 8028bba:	d107      	bne.n	8028bcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8028bbc:	687b      	ldr	r3, [r7, #4]
 8028bbe:	681b      	ldr	r3, [r3, #0]
 8028bc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8028bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8028bc6:	6878      	ldr	r0, [r7, #4]
 8028bc8:	f001 f89e 	bl	8029d08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8028bcc:	687b      	ldr	r3, [r7, #4]
 8028bce:	681b      	ldr	r3, [r3, #0]
 8028bd0:	691b      	ldr	r3, [r3, #16]
 8028bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028bd6:	2b40      	cmp	r3, #64	; 0x40
 8028bd8:	d10e      	bne.n	8028bf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8028bda:	687b      	ldr	r3, [r7, #4]
 8028bdc:	681b      	ldr	r3, [r3, #0]
 8028bde:	68db      	ldr	r3, [r3, #12]
 8028be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028be4:	2b40      	cmp	r3, #64	; 0x40
 8028be6:	d107      	bne.n	8028bf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8028be8:	687b      	ldr	r3, [r7, #4]
 8028bea:	681b      	ldr	r3, [r3, #0]
 8028bec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8028bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8028bf2:	6878      	ldr	r0, [r7, #4]
 8028bf4:	f000 fada 	bl	80291ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8028bf8:	687b      	ldr	r3, [r7, #4]
 8028bfa:	681b      	ldr	r3, [r3, #0]
 8028bfc:	691b      	ldr	r3, [r3, #16]
 8028bfe:	f003 0320 	and.w	r3, r3, #32
 8028c02:	2b20      	cmp	r3, #32
 8028c04:	d10e      	bne.n	8028c24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8028c06:	687b      	ldr	r3, [r7, #4]
 8028c08:	681b      	ldr	r3, [r3, #0]
 8028c0a:	68db      	ldr	r3, [r3, #12]
 8028c0c:	f003 0320 	and.w	r3, r3, #32
 8028c10:	2b20      	cmp	r3, #32
 8028c12:	d107      	bne.n	8028c24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8028c14:	687b      	ldr	r3, [r7, #4]
 8028c16:	681b      	ldr	r3, [r3, #0]
 8028c18:	f06f 0220 	mvn.w	r2, #32
 8028c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8028c1e:	6878      	ldr	r0, [r7, #4]
 8028c20:	f001 f868 	bl	8029cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8028c24:	bf00      	nop
 8028c26:	3708      	adds	r7, #8
 8028c28:	46bd      	mov	sp, r7
 8028c2a:	bd80      	pop	{r7, pc}

08028c2c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8028c2c:	b580      	push	{r7, lr}
 8028c2e:	b086      	sub	sp, #24
 8028c30:	af00      	add	r7, sp, #0
 8028c32:	60f8      	str	r0, [r7, #12]
 8028c34:	60b9      	str	r1, [r7, #8]
 8028c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8028c38:	2300      	movs	r3, #0
 8028c3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8028c3c:	68fb      	ldr	r3, [r7, #12]
 8028c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028c42:	2b01      	cmp	r3, #1
 8028c44:	d101      	bne.n	8028c4a <HAL_TIM_IC_ConfigChannel+0x1e>
 8028c46:	2302      	movs	r3, #2
 8028c48:	e088      	b.n	8028d5c <HAL_TIM_IC_ConfigChannel+0x130>
 8028c4a:	68fb      	ldr	r3, [r7, #12]
 8028c4c:	2201      	movs	r2, #1
 8028c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8028c52:	687b      	ldr	r3, [r7, #4]
 8028c54:	2b00      	cmp	r3, #0
 8028c56:	d11b      	bne.n	8028c90 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8028c58:	68fb      	ldr	r3, [r7, #12]
 8028c5a:	6818      	ldr	r0, [r3, #0]
 8028c5c:	68bb      	ldr	r3, [r7, #8]
 8028c5e:	6819      	ldr	r1, [r3, #0]
 8028c60:	68bb      	ldr	r3, [r7, #8]
 8028c62:	685a      	ldr	r2, [r3, #4]
 8028c64:	68bb      	ldr	r3, [r7, #8]
 8028c66:	68db      	ldr	r3, [r3, #12]
 8028c68:	f000 fd8c 	bl	8029784 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8028c6c:	68fb      	ldr	r3, [r7, #12]
 8028c6e:	681b      	ldr	r3, [r3, #0]
 8028c70:	699a      	ldr	r2, [r3, #24]
 8028c72:	68fb      	ldr	r3, [r7, #12]
 8028c74:	681b      	ldr	r3, [r3, #0]
 8028c76:	f022 020c 	bic.w	r2, r2, #12
 8028c7a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8028c7c:	68fb      	ldr	r3, [r7, #12]
 8028c7e:	681b      	ldr	r3, [r3, #0]
 8028c80:	6999      	ldr	r1, [r3, #24]
 8028c82:	68bb      	ldr	r3, [r7, #8]
 8028c84:	689a      	ldr	r2, [r3, #8]
 8028c86:	68fb      	ldr	r3, [r7, #12]
 8028c88:	681b      	ldr	r3, [r3, #0]
 8028c8a:	430a      	orrs	r2, r1
 8028c8c:	619a      	str	r2, [r3, #24]
 8028c8e:	e060      	b.n	8028d52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8028c90:	687b      	ldr	r3, [r7, #4]
 8028c92:	2b04      	cmp	r3, #4
 8028c94:	d11c      	bne.n	8028cd0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8028c96:	68fb      	ldr	r3, [r7, #12]
 8028c98:	6818      	ldr	r0, [r3, #0]
 8028c9a:	68bb      	ldr	r3, [r7, #8]
 8028c9c:	6819      	ldr	r1, [r3, #0]
 8028c9e:	68bb      	ldr	r3, [r7, #8]
 8028ca0:	685a      	ldr	r2, [r3, #4]
 8028ca2:	68bb      	ldr	r3, [r7, #8]
 8028ca4:	68db      	ldr	r3, [r3, #12]
 8028ca6:	f000 fe10 	bl	80298ca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8028caa:	68fb      	ldr	r3, [r7, #12]
 8028cac:	681b      	ldr	r3, [r3, #0]
 8028cae:	699a      	ldr	r2, [r3, #24]
 8028cb0:	68fb      	ldr	r3, [r7, #12]
 8028cb2:	681b      	ldr	r3, [r3, #0]
 8028cb4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8028cb8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8028cba:	68fb      	ldr	r3, [r7, #12]
 8028cbc:	681b      	ldr	r3, [r3, #0]
 8028cbe:	6999      	ldr	r1, [r3, #24]
 8028cc0:	68bb      	ldr	r3, [r7, #8]
 8028cc2:	689b      	ldr	r3, [r3, #8]
 8028cc4:	021a      	lsls	r2, r3, #8
 8028cc6:	68fb      	ldr	r3, [r7, #12]
 8028cc8:	681b      	ldr	r3, [r3, #0]
 8028cca:	430a      	orrs	r2, r1
 8028ccc:	619a      	str	r2, [r3, #24]
 8028cce:	e040      	b.n	8028d52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8028cd0:	687b      	ldr	r3, [r7, #4]
 8028cd2:	2b08      	cmp	r3, #8
 8028cd4:	d11b      	bne.n	8028d0e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8028cd6:	68fb      	ldr	r3, [r7, #12]
 8028cd8:	6818      	ldr	r0, [r3, #0]
 8028cda:	68bb      	ldr	r3, [r7, #8]
 8028cdc:	6819      	ldr	r1, [r3, #0]
 8028cde:	68bb      	ldr	r3, [r7, #8]
 8028ce0:	685a      	ldr	r2, [r3, #4]
 8028ce2:	68bb      	ldr	r3, [r7, #8]
 8028ce4:	68db      	ldr	r3, [r3, #12]
 8028ce6:	f000 fe5d 	bl	80299a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8028cea:	68fb      	ldr	r3, [r7, #12]
 8028cec:	681b      	ldr	r3, [r3, #0]
 8028cee:	69da      	ldr	r2, [r3, #28]
 8028cf0:	68fb      	ldr	r3, [r7, #12]
 8028cf2:	681b      	ldr	r3, [r3, #0]
 8028cf4:	f022 020c 	bic.w	r2, r2, #12
 8028cf8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8028cfa:	68fb      	ldr	r3, [r7, #12]
 8028cfc:	681b      	ldr	r3, [r3, #0]
 8028cfe:	69d9      	ldr	r1, [r3, #28]
 8028d00:	68bb      	ldr	r3, [r7, #8]
 8028d02:	689a      	ldr	r2, [r3, #8]
 8028d04:	68fb      	ldr	r3, [r7, #12]
 8028d06:	681b      	ldr	r3, [r3, #0]
 8028d08:	430a      	orrs	r2, r1
 8028d0a:	61da      	str	r2, [r3, #28]
 8028d0c:	e021      	b.n	8028d52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8028d0e:	687b      	ldr	r3, [r7, #4]
 8028d10:	2b0c      	cmp	r3, #12
 8028d12:	d11c      	bne.n	8028d4e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8028d14:	68fb      	ldr	r3, [r7, #12]
 8028d16:	6818      	ldr	r0, [r3, #0]
 8028d18:	68bb      	ldr	r3, [r7, #8]
 8028d1a:	6819      	ldr	r1, [r3, #0]
 8028d1c:	68bb      	ldr	r3, [r7, #8]
 8028d1e:	685a      	ldr	r2, [r3, #4]
 8028d20:	68bb      	ldr	r3, [r7, #8]
 8028d22:	68db      	ldr	r3, [r3, #12]
 8028d24:	f000 fe7a 	bl	8029a1c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8028d28:	68fb      	ldr	r3, [r7, #12]
 8028d2a:	681b      	ldr	r3, [r3, #0]
 8028d2c:	69da      	ldr	r2, [r3, #28]
 8028d2e:	68fb      	ldr	r3, [r7, #12]
 8028d30:	681b      	ldr	r3, [r3, #0]
 8028d32:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8028d36:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8028d38:	68fb      	ldr	r3, [r7, #12]
 8028d3a:	681b      	ldr	r3, [r3, #0]
 8028d3c:	69d9      	ldr	r1, [r3, #28]
 8028d3e:	68bb      	ldr	r3, [r7, #8]
 8028d40:	689b      	ldr	r3, [r3, #8]
 8028d42:	021a      	lsls	r2, r3, #8
 8028d44:	68fb      	ldr	r3, [r7, #12]
 8028d46:	681b      	ldr	r3, [r3, #0]
 8028d48:	430a      	orrs	r2, r1
 8028d4a:	61da      	str	r2, [r3, #28]
 8028d4c:	e001      	b.n	8028d52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8028d4e:	2301      	movs	r3, #1
 8028d50:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8028d52:	68fb      	ldr	r3, [r7, #12]
 8028d54:	2200      	movs	r2, #0
 8028d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8028d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8028d5c:	4618      	mov	r0, r3
 8028d5e:	3718      	adds	r7, #24
 8028d60:	46bd      	mov	sp, r7
 8028d62:	bd80      	pop	{r7, pc}

08028d64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8028d64:	b580      	push	{r7, lr}
 8028d66:	b086      	sub	sp, #24
 8028d68:	af00      	add	r7, sp, #0
 8028d6a:	60f8      	str	r0, [r7, #12]
 8028d6c:	60b9      	str	r1, [r7, #8]
 8028d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8028d70:	2300      	movs	r3, #0
 8028d72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8028d74:	68fb      	ldr	r3, [r7, #12]
 8028d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028d7a:	2b01      	cmp	r3, #1
 8028d7c:	d101      	bne.n	8028d82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8028d7e:	2302      	movs	r3, #2
 8028d80:	e0ae      	b.n	8028ee0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8028d82:	68fb      	ldr	r3, [r7, #12]
 8028d84:	2201      	movs	r2, #1
 8028d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8028d8a:	687b      	ldr	r3, [r7, #4]
 8028d8c:	2b0c      	cmp	r3, #12
 8028d8e:	f200 809f 	bhi.w	8028ed0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8028d92:	a201      	add	r2, pc, #4	; (adr r2, 8028d98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8028d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028d98:	08028dcd 	.word	0x08028dcd
 8028d9c:	08028ed1 	.word	0x08028ed1
 8028da0:	08028ed1 	.word	0x08028ed1
 8028da4:	08028ed1 	.word	0x08028ed1
 8028da8:	08028e0d 	.word	0x08028e0d
 8028dac:	08028ed1 	.word	0x08028ed1
 8028db0:	08028ed1 	.word	0x08028ed1
 8028db4:	08028ed1 	.word	0x08028ed1
 8028db8:	08028e4f 	.word	0x08028e4f
 8028dbc:	08028ed1 	.word	0x08028ed1
 8028dc0:	08028ed1 	.word	0x08028ed1
 8028dc4:	08028ed1 	.word	0x08028ed1
 8028dc8:	08028e8f 	.word	0x08028e8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8028dcc:	68fb      	ldr	r3, [r7, #12]
 8028dce:	681b      	ldr	r3, [r3, #0]
 8028dd0:	68b9      	ldr	r1, [r7, #8]
 8028dd2:	4618      	mov	r0, r3
 8028dd4:	f000 fa94 	bl	8029300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8028dd8:	68fb      	ldr	r3, [r7, #12]
 8028dda:	681b      	ldr	r3, [r3, #0]
 8028ddc:	699a      	ldr	r2, [r3, #24]
 8028dde:	68fb      	ldr	r3, [r7, #12]
 8028de0:	681b      	ldr	r3, [r3, #0]
 8028de2:	f042 0208 	orr.w	r2, r2, #8
 8028de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8028de8:	68fb      	ldr	r3, [r7, #12]
 8028dea:	681b      	ldr	r3, [r3, #0]
 8028dec:	699a      	ldr	r2, [r3, #24]
 8028dee:	68fb      	ldr	r3, [r7, #12]
 8028df0:	681b      	ldr	r3, [r3, #0]
 8028df2:	f022 0204 	bic.w	r2, r2, #4
 8028df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8028df8:	68fb      	ldr	r3, [r7, #12]
 8028dfa:	681b      	ldr	r3, [r3, #0]
 8028dfc:	6999      	ldr	r1, [r3, #24]
 8028dfe:	68bb      	ldr	r3, [r7, #8]
 8028e00:	691a      	ldr	r2, [r3, #16]
 8028e02:	68fb      	ldr	r3, [r7, #12]
 8028e04:	681b      	ldr	r3, [r3, #0]
 8028e06:	430a      	orrs	r2, r1
 8028e08:	619a      	str	r2, [r3, #24]
      break;
 8028e0a:	e064      	b.n	8028ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8028e0c:	68fb      	ldr	r3, [r7, #12]
 8028e0e:	681b      	ldr	r3, [r3, #0]
 8028e10:	68b9      	ldr	r1, [r7, #8]
 8028e12:	4618      	mov	r0, r3
 8028e14:	f000 fae4 	bl	80293e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8028e18:	68fb      	ldr	r3, [r7, #12]
 8028e1a:	681b      	ldr	r3, [r3, #0]
 8028e1c:	699a      	ldr	r2, [r3, #24]
 8028e1e:	68fb      	ldr	r3, [r7, #12]
 8028e20:	681b      	ldr	r3, [r3, #0]
 8028e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8028e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8028e28:	68fb      	ldr	r3, [r7, #12]
 8028e2a:	681b      	ldr	r3, [r3, #0]
 8028e2c:	699a      	ldr	r2, [r3, #24]
 8028e2e:	68fb      	ldr	r3, [r7, #12]
 8028e30:	681b      	ldr	r3, [r3, #0]
 8028e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8028e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8028e38:	68fb      	ldr	r3, [r7, #12]
 8028e3a:	681b      	ldr	r3, [r3, #0]
 8028e3c:	6999      	ldr	r1, [r3, #24]
 8028e3e:	68bb      	ldr	r3, [r7, #8]
 8028e40:	691b      	ldr	r3, [r3, #16]
 8028e42:	021a      	lsls	r2, r3, #8
 8028e44:	68fb      	ldr	r3, [r7, #12]
 8028e46:	681b      	ldr	r3, [r3, #0]
 8028e48:	430a      	orrs	r2, r1
 8028e4a:	619a      	str	r2, [r3, #24]
      break;
 8028e4c:	e043      	b.n	8028ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8028e4e:	68fb      	ldr	r3, [r7, #12]
 8028e50:	681b      	ldr	r3, [r3, #0]
 8028e52:	68b9      	ldr	r1, [r7, #8]
 8028e54:	4618      	mov	r0, r3
 8028e56:	f000 fb39 	bl	80294cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8028e5a:	68fb      	ldr	r3, [r7, #12]
 8028e5c:	681b      	ldr	r3, [r3, #0]
 8028e5e:	69da      	ldr	r2, [r3, #28]
 8028e60:	68fb      	ldr	r3, [r7, #12]
 8028e62:	681b      	ldr	r3, [r3, #0]
 8028e64:	f042 0208 	orr.w	r2, r2, #8
 8028e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8028e6a:	68fb      	ldr	r3, [r7, #12]
 8028e6c:	681b      	ldr	r3, [r3, #0]
 8028e6e:	69da      	ldr	r2, [r3, #28]
 8028e70:	68fb      	ldr	r3, [r7, #12]
 8028e72:	681b      	ldr	r3, [r3, #0]
 8028e74:	f022 0204 	bic.w	r2, r2, #4
 8028e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8028e7a:	68fb      	ldr	r3, [r7, #12]
 8028e7c:	681b      	ldr	r3, [r3, #0]
 8028e7e:	69d9      	ldr	r1, [r3, #28]
 8028e80:	68bb      	ldr	r3, [r7, #8]
 8028e82:	691a      	ldr	r2, [r3, #16]
 8028e84:	68fb      	ldr	r3, [r7, #12]
 8028e86:	681b      	ldr	r3, [r3, #0]
 8028e88:	430a      	orrs	r2, r1
 8028e8a:	61da      	str	r2, [r3, #28]
      break;
 8028e8c:	e023      	b.n	8028ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8028e8e:	68fb      	ldr	r3, [r7, #12]
 8028e90:	681b      	ldr	r3, [r3, #0]
 8028e92:	68b9      	ldr	r1, [r7, #8]
 8028e94:	4618      	mov	r0, r3
 8028e96:	f000 fb8d 	bl	80295b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8028e9a:	68fb      	ldr	r3, [r7, #12]
 8028e9c:	681b      	ldr	r3, [r3, #0]
 8028e9e:	69da      	ldr	r2, [r3, #28]
 8028ea0:	68fb      	ldr	r3, [r7, #12]
 8028ea2:	681b      	ldr	r3, [r3, #0]
 8028ea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8028ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8028eaa:	68fb      	ldr	r3, [r7, #12]
 8028eac:	681b      	ldr	r3, [r3, #0]
 8028eae:	69da      	ldr	r2, [r3, #28]
 8028eb0:	68fb      	ldr	r3, [r7, #12]
 8028eb2:	681b      	ldr	r3, [r3, #0]
 8028eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8028eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8028eba:	68fb      	ldr	r3, [r7, #12]
 8028ebc:	681b      	ldr	r3, [r3, #0]
 8028ebe:	69d9      	ldr	r1, [r3, #28]
 8028ec0:	68bb      	ldr	r3, [r7, #8]
 8028ec2:	691b      	ldr	r3, [r3, #16]
 8028ec4:	021a      	lsls	r2, r3, #8
 8028ec6:	68fb      	ldr	r3, [r7, #12]
 8028ec8:	681b      	ldr	r3, [r3, #0]
 8028eca:	430a      	orrs	r2, r1
 8028ecc:	61da      	str	r2, [r3, #28]
      break;
 8028ece:	e002      	b.n	8028ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8028ed0:	2301      	movs	r3, #1
 8028ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8028ed4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8028ed6:	68fb      	ldr	r3, [r7, #12]
 8028ed8:	2200      	movs	r2, #0
 8028eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8028ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8028ee0:	4618      	mov	r0, r3
 8028ee2:	3718      	adds	r7, #24
 8028ee4:	46bd      	mov	sp, r7
 8028ee6:	bd80      	pop	{r7, pc}

08028ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8028ee8:	b580      	push	{r7, lr}
 8028eea:	b084      	sub	sp, #16
 8028eec:	af00      	add	r7, sp, #0
 8028eee:	6078      	str	r0, [r7, #4]
 8028ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8028ef2:	2300      	movs	r3, #0
 8028ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8028ef6:	687b      	ldr	r3, [r7, #4]
 8028ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028efc:	2b01      	cmp	r3, #1
 8028efe:	d101      	bne.n	8028f04 <HAL_TIM_ConfigClockSource+0x1c>
 8028f00:	2302      	movs	r3, #2
 8028f02:	e0b4      	b.n	802906e <HAL_TIM_ConfigClockSource+0x186>
 8028f04:	687b      	ldr	r3, [r7, #4]
 8028f06:	2201      	movs	r2, #1
 8028f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8028f0c:	687b      	ldr	r3, [r7, #4]
 8028f0e:	2202      	movs	r2, #2
 8028f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8028f14:	687b      	ldr	r3, [r7, #4]
 8028f16:	681b      	ldr	r3, [r3, #0]
 8028f18:	689b      	ldr	r3, [r3, #8]
 8028f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8028f1c:	68bb      	ldr	r3, [r7, #8]
 8028f1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8028f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8028f24:	68bb      	ldr	r3, [r7, #8]
 8028f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8028f2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8028f2c:	687b      	ldr	r3, [r7, #4]
 8028f2e:	681b      	ldr	r3, [r3, #0]
 8028f30:	68ba      	ldr	r2, [r7, #8]
 8028f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8028f34:	683b      	ldr	r3, [r7, #0]
 8028f36:	681b      	ldr	r3, [r3, #0]
 8028f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028f3c:	d03e      	beq.n	8028fbc <HAL_TIM_ConfigClockSource+0xd4>
 8028f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028f42:	f200 8087 	bhi.w	8029054 <HAL_TIM_ConfigClockSource+0x16c>
 8028f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028f4a:	f000 8086 	beq.w	802905a <HAL_TIM_ConfigClockSource+0x172>
 8028f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028f52:	d87f      	bhi.n	8029054 <HAL_TIM_ConfigClockSource+0x16c>
 8028f54:	2b70      	cmp	r3, #112	; 0x70
 8028f56:	d01a      	beq.n	8028f8e <HAL_TIM_ConfigClockSource+0xa6>
 8028f58:	2b70      	cmp	r3, #112	; 0x70
 8028f5a:	d87b      	bhi.n	8029054 <HAL_TIM_ConfigClockSource+0x16c>
 8028f5c:	2b60      	cmp	r3, #96	; 0x60
 8028f5e:	d050      	beq.n	8029002 <HAL_TIM_ConfigClockSource+0x11a>
 8028f60:	2b60      	cmp	r3, #96	; 0x60
 8028f62:	d877      	bhi.n	8029054 <HAL_TIM_ConfigClockSource+0x16c>
 8028f64:	2b50      	cmp	r3, #80	; 0x50
 8028f66:	d03c      	beq.n	8028fe2 <HAL_TIM_ConfigClockSource+0xfa>
 8028f68:	2b50      	cmp	r3, #80	; 0x50
 8028f6a:	d873      	bhi.n	8029054 <HAL_TIM_ConfigClockSource+0x16c>
 8028f6c:	2b40      	cmp	r3, #64	; 0x40
 8028f6e:	d058      	beq.n	8029022 <HAL_TIM_ConfigClockSource+0x13a>
 8028f70:	2b40      	cmp	r3, #64	; 0x40
 8028f72:	d86f      	bhi.n	8029054 <HAL_TIM_ConfigClockSource+0x16c>
 8028f74:	2b30      	cmp	r3, #48	; 0x30
 8028f76:	d064      	beq.n	8029042 <HAL_TIM_ConfigClockSource+0x15a>
 8028f78:	2b30      	cmp	r3, #48	; 0x30
 8028f7a:	d86b      	bhi.n	8029054 <HAL_TIM_ConfigClockSource+0x16c>
 8028f7c:	2b20      	cmp	r3, #32
 8028f7e:	d060      	beq.n	8029042 <HAL_TIM_ConfigClockSource+0x15a>
 8028f80:	2b20      	cmp	r3, #32
 8028f82:	d867      	bhi.n	8029054 <HAL_TIM_ConfigClockSource+0x16c>
 8028f84:	2b00      	cmp	r3, #0
 8028f86:	d05c      	beq.n	8029042 <HAL_TIM_ConfigClockSource+0x15a>
 8028f88:	2b10      	cmp	r3, #16
 8028f8a:	d05a      	beq.n	8029042 <HAL_TIM_ConfigClockSource+0x15a>
 8028f8c:	e062      	b.n	8029054 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8028f8e:	687b      	ldr	r3, [r7, #4]
 8028f90:	6818      	ldr	r0, [r3, #0]
 8028f92:	683b      	ldr	r3, [r7, #0]
 8028f94:	6899      	ldr	r1, [r3, #8]
 8028f96:	683b      	ldr	r3, [r7, #0]
 8028f98:	685a      	ldr	r2, [r3, #4]
 8028f9a:	683b      	ldr	r3, [r7, #0]
 8028f9c:	68db      	ldr	r3, [r3, #12]
 8028f9e:	f000 fd95 	bl	8029acc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8028fa2:	687b      	ldr	r3, [r7, #4]
 8028fa4:	681b      	ldr	r3, [r3, #0]
 8028fa6:	689b      	ldr	r3, [r3, #8]
 8028fa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8028faa:	68bb      	ldr	r3, [r7, #8]
 8028fac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8028fb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8028fb2:	687b      	ldr	r3, [r7, #4]
 8028fb4:	681b      	ldr	r3, [r3, #0]
 8028fb6:	68ba      	ldr	r2, [r7, #8]
 8028fb8:	609a      	str	r2, [r3, #8]
      break;
 8028fba:	e04f      	b.n	802905c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8028fbc:	687b      	ldr	r3, [r7, #4]
 8028fbe:	6818      	ldr	r0, [r3, #0]
 8028fc0:	683b      	ldr	r3, [r7, #0]
 8028fc2:	6899      	ldr	r1, [r3, #8]
 8028fc4:	683b      	ldr	r3, [r7, #0]
 8028fc6:	685a      	ldr	r2, [r3, #4]
 8028fc8:	683b      	ldr	r3, [r7, #0]
 8028fca:	68db      	ldr	r3, [r3, #12]
 8028fcc:	f000 fd7e 	bl	8029acc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8028fd0:	687b      	ldr	r3, [r7, #4]
 8028fd2:	681b      	ldr	r3, [r3, #0]
 8028fd4:	689a      	ldr	r2, [r3, #8]
 8028fd6:	687b      	ldr	r3, [r7, #4]
 8028fd8:	681b      	ldr	r3, [r3, #0]
 8028fda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8028fde:	609a      	str	r2, [r3, #8]
      break;
 8028fe0:	e03c      	b.n	802905c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8028fe2:	687b      	ldr	r3, [r7, #4]
 8028fe4:	6818      	ldr	r0, [r3, #0]
 8028fe6:	683b      	ldr	r3, [r7, #0]
 8028fe8:	6859      	ldr	r1, [r3, #4]
 8028fea:	683b      	ldr	r3, [r7, #0]
 8028fec:	68db      	ldr	r3, [r3, #12]
 8028fee:	461a      	mov	r2, r3
 8028ff0:	f000 fc3c 	bl	802986c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8028ff4:	687b      	ldr	r3, [r7, #4]
 8028ff6:	681b      	ldr	r3, [r3, #0]
 8028ff8:	2150      	movs	r1, #80	; 0x50
 8028ffa:	4618      	mov	r0, r3
 8028ffc:	f000 fd4b 	bl	8029a96 <TIM_ITRx_SetConfig>
      break;
 8029000:	e02c      	b.n	802905c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8029002:	687b      	ldr	r3, [r7, #4]
 8029004:	6818      	ldr	r0, [r3, #0]
 8029006:	683b      	ldr	r3, [r7, #0]
 8029008:	6859      	ldr	r1, [r3, #4]
 802900a:	683b      	ldr	r3, [r7, #0]
 802900c:	68db      	ldr	r3, [r3, #12]
 802900e:	461a      	mov	r2, r3
 8029010:	f000 fc98 	bl	8029944 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8029014:	687b      	ldr	r3, [r7, #4]
 8029016:	681b      	ldr	r3, [r3, #0]
 8029018:	2160      	movs	r1, #96	; 0x60
 802901a:	4618      	mov	r0, r3
 802901c:	f000 fd3b 	bl	8029a96 <TIM_ITRx_SetConfig>
      break;
 8029020:	e01c      	b.n	802905c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8029022:	687b      	ldr	r3, [r7, #4]
 8029024:	6818      	ldr	r0, [r3, #0]
 8029026:	683b      	ldr	r3, [r7, #0]
 8029028:	6859      	ldr	r1, [r3, #4]
 802902a:	683b      	ldr	r3, [r7, #0]
 802902c:	68db      	ldr	r3, [r3, #12]
 802902e:	461a      	mov	r2, r3
 8029030:	f000 fc1c 	bl	802986c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8029034:	687b      	ldr	r3, [r7, #4]
 8029036:	681b      	ldr	r3, [r3, #0]
 8029038:	2140      	movs	r1, #64	; 0x40
 802903a:	4618      	mov	r0, r3
 802903c:	f000 fd2b 	bl	8029a96 <TIM_ITRx_SetConfig>
      break;
 8029040:	e00c      	b.n	802905c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8029042:	687b      	ldr	r3, [r7, #4]
 8029044:	681a      	ldr	r2, [r3, #0]
 8029046:	683b      	ldr	r3, [r7, #0]
 8029048:	681b      	ldr	r3, [r3, #0]
 802904a:	4619      	mov	r1, r3
 802904c:	4610      	mov	r0, r2
 802904e:	f000 fd22 	bl	8029a96 <TIM_ITRx_SetConfig>
      break;
 8029052:	e003      	b.n	802905c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8029054:	2301      	movs	r3, #1
 8029056:	73fb      	strb	r3, [r7, #15]
      break;
 8029058:	e000      	b.n	802905c <HAL_TIM_ConfigClockSource+0x174>
      break;
 802905a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802905c:	687b      	ldr	r3, [r7, #4]
 802905e:	2201      	movs	r2, #1
 8029060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029064:	687b      	ldr	r3, [r7, #4]
 8029066:	2200      	movs	r2, #0
 8029068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 802906c:	7bfb      	ldrb	r3, [r7, #15]
}
 802906e:	4618      	mov	r0, r3
 8029070:	3710      	adds	r7, #16
 8029072:	46bd      	mov	sp, r7
 8029074:	bd80      	pop	{r7, pc}

08029076 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8029076:	b580      	push	{r7, lr}
 8029078:	b082      	sub	sp, #8
 802907a:	af00      	add	r7, sp, #0
 802907c:	6078      	str	r0, [r7, #4]
 802907e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8029080:	687b      	ldr	r3, [r7, #4]
 8029082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029086:	2b01      	cmp	r3, #1
 8029088:	d101      	bne.n	802908e <HAL_TIM_SlaveConfigSynchro+0x18>
 802908a:	2302      	movs	r3, #2
 802908c:	e031      	b.n	80290f2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 802908e:	687b      	ldr	r3, [r7, #4]
 8029090:	2201      	movs	r2, #1
 8029092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029096:	687b      	ldr	r3, [r7, #4]
 8029098:	2202      	movs	r2, #2
 802909a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 802909e:	6839      	ldr	r1, [r7, #0]
 80290a0:	6878      	ldr	r0, [r7, #4]
 80290a2:	f000 fadd 	bl	8029660 <TIM_SlaveTimer_SetConfig>
 80290a6:	4603      	mov	r3, r0
 80290a8:	2b00      	cmp	r3, #0
 80290aa:	d009      	beq.n	80290c0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80290ac:	687b      	ldr	r3, [r7, #4]
 80290ae:	2201      	movs	r2, #1
 80290b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80290b4:	687b      	ldr	r3, [r7, #4]
 80290b6:	2200      	movs	r2, #0
 80290b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80290bc:	2301      	movs	r3, #1
 80290be:	e018      	b.n	80290f2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80290c0:	687b      	ldr	r3, [r7, #4]
 80290c2:	681b      	ldr	r3, [r3, #0]
 80290c4:	68da      	ldr	r2, [r3, #12]
 80290c6:	687b      	ldr	r3, [r7, #4]
 80290c8:	681b      	ldr	r3, [r3, #0]
 80290ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80290ce:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80290d0:	687b      	ldr	r3, [r7, #4]
 80290d2:	681b      	ldr	r3, [r3, #0]
 80290d4:	68da      	ldr	r2, [r3, #12]
 80290d6:	687b      	ldr	r3, [r7, #4]
 80290d8:	681b      	ldr	r3, [r3, #0]
 80290da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80290de:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80290e0:	687b      	ldr	r3, [r7, #4]
 80290e2:	2201      	movs	r2, #1
 80290e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80290e8:	687b      	ldr	r3, [r7, #4]
 80290ea:	2200      	movs	r2, #0
 80290ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80290f0:	2300      	movs	r3, #0
}
 80290f2:	4618      	mov	r0, r3
 80290f4:	3708      	adds	r7, #8
 80290f6:	46bd      	mov	sp, r7
 80290f8:	bd80      	pop	{r7, pc}
	...

080290fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80290fc:	b480      	push	{r7}
 80290fe:	b085      	sub	sp, #20
 8029100:	af00      	add	r7, sp, #0
 8029102:	6078      	str	r0, [r7, #4]
 8029104:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8029106:	2300      	movs	r3, #0
 8029108:	60fb      	str	r3, [r7, #12]
 802910a:	683b      	ldr	r3, [r7, #0]
 802910c:	2b0c      	cmp	r3, #12
 802910e:	d831      	bhi.n	8029174 <HAL_TIM_ReadCapturedValue+0x78>
 8029110:	a201      	add	r2, pc, #4	; (adr r2, 8029118 <HAL_TIM_ReadCapturedValue+0x1c>)
 8029112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029116:	bf00      	nop
 8029118:	0802914d 	.word	0x0802914d
 802911c:	08029175 	.word	0x08029175
 8029120:	08029175 	.word	0x08029175
 8029124:	08029175 	.word	0x08029175
 8029128:	08029157 	.word	0x08029157
 802912c:	08029175 	.word	0x08029175
 8029130:	08029175 	.word	0x08029175
 8029134:	08029175 	.word	0x08029175
 8029138:	08029161 	.word	0x08029161
 802913c:	08029175 	.word	0x08029175
 8029140:	08029175 	.word	0x08029175
 8029144:	08029175 	.word	0x08029175
 8029148:	0802916b 	.word	0x0802916b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 802914c:	687b      	ldr	r3, [r7, #4]
 802914e:	681b      	ldr	r3, [r3, #0]
 8029150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029152:	60fb      	str	r3, [r7, #12]

      break;
 8029154:	e00f      	b.n	8029176 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8029156:	687b      	ldr	r3, [r7, #4]
 8029158:	681b      	ldr	r3, [r3, #0]
 802915a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802915c:	60fb      	str	r3, [r7, #12]

      break;
 802915e:	e00a      	b.n	8029176 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8029160:	687b      	ldr	r3, [r7, #4]
 8029162:	681b      	ldr	r3, [r3, #0]
 8029164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029166:	60fb      	str	r3, [r7, #12]

      break;
 8029168:	e005      	b.n	8029176 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 802916a:	687b      	ldr	r3, [r7, #4]
 802916c:	681b      	ldr	r3, [r3, #0]
 802916e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029170:	60fb      	str	r3, [r7, #12]

      break;
 8029172:	e000      	b.n	8029176 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8029174:	bf00      	nop
  }

  return tmpreg;
 8029176:	68fb      	ldr	r3, [r7, #12]
}
 8029178:	4618      	mov	r0, r3
 802917a:	3714      	adds	r7, #20
 802917c:	46bd      	mov	sp, r7
 802917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029182:	4770      	bx	lr

08029184 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8029184:	b480      	push	{r7}
 8029186:	b083      	sub	sp, #12
 8029188:	af00      	add	r7, sp, #0
 802918a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802918c:	bf00      	nop
 802918e:	370c      	adds	r7, #12
 8029190:	46bd      	mov	sp, r7
 8029192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029196:	4770      	bx	lr

08029198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8029198:	b480      	push	{r7}
 802919a:	b083      	sub	sp, #12
 802919c:	af00      	add	r7, sp, #0
 802919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80291a0:	bf00      	nop
 80291a2:	370c      	adds	r7, #12
 80291a4:	46bd      	mov	sp, r7
 80291a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291aa:	4770      	bx	lr

080291ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80291ac:	b480      	push	{r7}
 80291ae:	b083      	sub	sp, #12
 80291b0:	af00      	add	r7, sp, #0
 80291b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80291b4:	bf00      	nop
 80291b6:	370c      	adds	r7, #12
 80291b8:	46bd      	mov	sp, r7
 80291ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291be:	4770      	bx	lr

080291c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80291c0:	b480      	push	{r7}
 80291c2:	b085      	sub	sp, #20
 80291c4:	af00      	add	r7, sp, #0
 80291c6:	6078      	str	r0, [r7, #4]
 80291c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80291ca:	687b      	ldr	r3, [r7, #4]
 80291cc:	681b      	ldr	r3, [r3, #0]
 80291ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80291d0:	687b      	ldr	r3, [r7, #4]
 80291d2:	4a40      	ldr	r2, [pc, #256]	; (80292d4 <TIM_Base_SetConfig+0x114>)
 80291d4:	4293      	cmp	r3, r2
 80291d6:	d013      	beq.n	8029200 <TIM_Base_SetConfig+0x40>
 80291d8:	687b      	ldr	r3, [r7, #4]
 80291da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80291de:	d00f      	beq.n	8029200 <TIM_Base_SetConfig+0x40>
 80291e0:	687b      	ldr	r3, [r7, #4]
 80291e2:	4a3d      	ldr	r2, [pc, #244]	; (80292d8 <TIM_Base_SetConfig+0x118>)
 80291e4:	4293      	cmp	r3, r2
 80291e6:	d00b      	beq.n	8029200 <TIM_Base_SetConfig+0x40>
 80291e8:	687b      	ldr	r3, [r7, #4]
 80291ea:	4a3c      	ldr	r2, [pc, #240]	; (80292dc <TIM_Base_SetConfig+0x11c>)
 80291ec:	4293      	cmp	r3, r2
 80291ee:	d007      	beq.n	8029200 <TIM_Base_SetConfig+0x40>
 80291f0:	687b      	ldr	r3, [r7, #4]
 80291f2:	4a3b      	ldr	r2, [pc, #236]	; (80292e0 <TIM_Base_SetConfig+0x120>)
 80291f4:	4293      	cmp	r3, r2
 80291f6:	d003      	beq.n	8029200 <TIM_Base_SetConfig+0x40>
 80291f8:	687b      	ldr	r3, [r7, #4]
 80291fa:	4a3a      	ldr	r2, [pc, #232]	; (80292e4 <TIM_Base_SetConfig+0x124>)
 80291fc:	4293      	cmp	r3, r2
 80291fe:	d108      	bne.n	8029212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8029200:	68fb      	ldr	r3, [r7, #12]
 8029202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8029208:	683b      	ldr	r3, [r7, #0]
 802920a:	685b      	ldr	r3, [r3, #4]
 802920c:	68fa      	ldr	r2, [r7, #12]
 802920e:	4313      	orrs	r3, r2
 8029210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8029212:	687b      	ldr	r3, [r7, #4]
 8029214:	4a2f      	ldr	r2, [pc, #188]	; (80292d4 <TIM_Base_SetConfig+0x114>)
 8029216:	4293      	cmp	r3, r2
 8029218:	d02b      	beq.n	8029272 <TIM_Base_SetConfig+0xb2>
 802921a:	687b      	ldr	r3, [r7, #4]
 802921c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029220:	d027      	beq.n	8029272 <TIM_Base_SetConfig+0xb2>
 8029222:	687b      	ldr	r3, [r7, #4]
 8029224:	4a2c      	ldr	r2, [pc, #176]	; (80292d8 <TIM_Base_SetConfig+0x118>)
 8029226:	4293      	cmp	r3, r2
 8029228:	d023      	beq.n	8029272 <TIM_Base_SetConfig+0xb2>
 802922a:	687b      	ldr	r3, [r7, #4]
 802922c:	4a2b      	ldr	r2, [pc, #172]	; (80292dc <TIM_Base_SetConfig+0x11c>)
 802922e:	4293      	cmp	r3, r2
 8029230:	d01f      	beq.n	8029272 <TIM_Base_SetConfig+0xb2>
 8029232:	687b      	ldr	r3, [r7, #4]
 8029234:	4a2a      	ldr	r2, [pc, #168]	; (80292e0 <TIM_Base_SetConfig+0x120>)
 8029236:	4293      	cmp	r3, r2
 8029238:	d01b      	beq.n	8029272 <TIM_Base_SetConfig+0xb2>
 802923a:	687b      	ldr	r3, [r7, #4]
 802923c:	4a29      	ldr	r2, [pc, #164]	; (80292e4 <TIM_Base_SetConfig+0x124>)
 802923e:	4293      	cmp	r3, r2
 8029240:	d017      	beq.n	8029272 <TIM_Base_SetConfig+0xb2>
 8029242:	687b      	ldr	r3, [r7, #4]
 8029244:	4a28      	ldr	r2, [pc, #160]	; (80292e8 <TIM_Base_SetConfig+0x128>)
 8029246:	4293      	cmp	r3, r2
 8029248:	d013      	beq.n	8029272 <TIM_Base_SetConfig+0xb2>
 802924a:	687b      	ldr	r3, [r7, #4]
 802924c:	4a27      	ldr	r2, [pc, #156]	; (80292ec <TIM_Base_SetConfig+0x12c>)
 802924e:	4293      	cmp	r3, r2
 8029250:	d00f      	beq.n	8029272 <TIM_Base_SetConfig+0xb2>
 8029252:	687b      	ldr	r3, [r7, #4]
 8029254:	4a26      	ldr	r2, [pc, #152]	; (80292f0 <TIM_Base_SetConfig+0x130>)
 8029256:	4293      	cmp	r3, r2
 8029258:	d00b      	beq.n	8029272 <TIM_Base_SetConfig+0xb2>
 802925a:	687b      	ldr	r3, [r7, #4]
 802925c:	4a25      	ldr	r2, [pc, #148]	; (80292f4 <TIM_Base_SetConfig+0x134>)
 802925e:	4293      	cmp	r3, r2
 8029260:	d007      	beq.n	8029272 <TIM_Base_SetConfig+0xb2>
 8029262:	687b      	ldr	r3, [r7, #4]
 8029264:	4a24      	ldr	r2, [pc, #144]	; (80292f8 <TIM_Base_SetConfig+0x138>)
 8029266:	4293      	cmp	r3, r2
 8029268:	d003      	beq.n	8029272 <TIM_Base_SetConfig+0xb2>
 802926a:	687b      	ldr	r3, [r7, #4]
 802926c:	4a23      	ldr	r2, [pc, #140]	; (80292fc <TIM_Base_SetConfig+0x13c>)
 802926e:	4293      	cmp	r3, r2
 8029270:	d108      	bne.n	8029284 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8029272:	68fb      	ldr	r3, [r7, #12]
 8029274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802927a:	683b      	ldr	r3, [r7, #0]
 802927c:	68db      	ldr	r3, [r3, #12]
 802927e:	68fa      	ldr	r2, [r7, #12]
 8029280:	4313      	orrs	r3, r2
 8029282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8029284:	68fb      	ldr	r3, [r7, #12]
 8029286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802928a:	683b      	ldr	r3, [r7, #0]
 802928c:	695b      	ldr	r3, [r3, #20]
 802928e:	4313      	orrs	r3, r2
 8029290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8029292:	687b      	ldr	r3, [r7, #4]
 8029294:	68fa      	ldr	r2, [r7, #12]
 8029296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8029298:	683b      	ldr	r3, [r7, #0]
 802929a:	689a      	ldr	r2, [r3, #8]
 802929c:	687b      	ldr	r3, [r7, #4]
 802929e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80292a0:	683b      	ldr	r3, [r7, #0]
 80292a2:	681a      	ldr	r2, [r3, #0]
 80292a4:	687b      	ldr	r3, [r7, #4]
 80292a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80292a8:	687b      	ldr	r3, [r7, #4]
 80292aa:	4a0a      	ldr	r2, [pc, #40]	; (80292d4 <TIM_Base_SetConfig+0x114>)
 80292ac:	4293      	cmp	r3, r2
 80292ae:	d003      	beq.n	80292b8 <TIM_Base_SetConfig+0xf8>
 80292b0:	687b      	ldr	r3, [r7, #4]
 80292b2:	4a0c      	ldr	r2, [pc, #48]	; (80292e4 <TIM_Base_SetConfig+0x124>)
 80292b4:	4293      	cmp	r3, r2
 80292b6:	d103      	bne.n	80292c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80292b8:	683b      	ldr	r3, [r7, #0]
 80292ba:	691a      	ldr	r2, [r3, #16]
 80292bc:	687b      	ldr	r3, [r7, #4]
 80292be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80292c0:	687b      	ldr	r3, [r7, #4]
 80292c2:	2201      	movs	r2, #1
 80292c4:	615a      	str	r2, [r3, #20]
}
 80292c6:	bf00      	nop
 80292c8:	3714      	adds	r7, #20
 80292ca:	46bd      	mov	sp, r7
 80292cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292d0:	4770      	bx	lr
 80292d2:	bf00      	nop
 80292d4:	40010000 	.word	0x40010000
 80292d8:	40000400 	.word	0x40000400
 80292dc:	40000800 	.word	0x40000800
 80292e0:	40000c00 	.word	0x40000c00
 80292e4:	40010400 	.word	0x40010400
 80292e8:	40014000 	.word	0x40014000
 80292ec:	40014400 	.word	0x40014400
 80292f0:	40014800 	.word	0x40014800
 80292f4:	40001800 	.word	0x40001800
 80292f8:	40001c00 	.word	0x40001c00
 80292fc:	40002000 	.word	0x40002000

08029300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029300:	b480      	push	{r7}
 8029302:	b087      	sub	sp, #28
 8029304:	af00      	add	r7, sp, #0
 8029306:	6078      	str	r0, [r7, #4]
 8029308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802930a:	687b      	ldr	r3, [r7, #4]
 802930c:	6a1b      	ldr	r3, [r3, #32]
 802930e:	f023 0201 	bic.w	r2, r3, #1
 8029312:	687b      	ldr	r3, [r7, #4]
 8029314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029316:	687b      	ldr	r3, [r7, #4]
 8029318:	6a1b      	ldr	r3, [r3, #32]
 802931a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802931c:	687b      	ldr	r3, [r7, #4]
 802931e:	685b      	ldr	r3, [r3, #4]
 8029320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029322:	687b      	ldr	r3, [r7, #4]
 8029324:	699b      	ldr	r3, [r3, #24]
 8029326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8029328:	68fb      	ldr	r3, [r7, #12]
 802932a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802932e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8029330:	68fb      	ldr	r3, [r7, #12]
 8029332:	f023 0303 	bic.w	r3, r3, #3
 8029336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029338:	683b      	ldr	r3, [r7, #0]
 802933a:	681b      	ldr	r3, [r3, #0]
 802933c:	68fa      	ldr	r2, [r7, #12]
 802933e:	4313      	orrs	r3, r2
 8029340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8029342:	697b      	ldr	r3, [r7, #20]
 8029344:	f023 0302 	bic.w	r3, r3, #2
 8029348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802934a:	683b      	ldr	r3, [r7, #0]
 802934c:	689b      	ldr	r3, [r3, #8]
 802934e:	697a      	ldr	r2, [r7, #20]
 8029350:	4313      	orrs	r3, r2
 8029352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8029354:	687b      	ldr	r3, [r7, #4]
 8029356:	4a20      	ldr	r2, [pc, #128]	; (80293d8 <TIM_OC1_SetConfig+0xd8>)
 8029358:	4293      	cmp	r3, r2
 802935a:	d003      	beq.n	8029364 <TIM_OC1_SetConfig+0x64>
 802935c:	687b      	ldr	r3, [r7, #4]
 802935e:	4a1f      	ldr	r2, [pc, #124]	; (80293dc <TIM_OC1_SetConfig+0xdc>)
 8029360:	4293      	cmp	r3, r2
 8029362:	d10c      	bne.n	802937e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8029364:	697b      	ldr	r3, [r7, #20]
 8029366:	f023 0308 	bic.w	r3, r3, #8
 802936a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 802936c:	683b      	ldr	r3, [r7, #0]
 802936e:	68db      	ldr	r3, [r3, #12]
 8029370:	697a      	ldr	r2, [r7, #20]
 8029372:	4313      	orrs	r3, r2
 8029374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8029376:	697b      	ldr	r3, [r7, #20]
 8029378:	f023 0304 	bic.w	r3, r3, #4
 802937c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802937e:	687b      	ldr	r3, [r7, #4]
 8029380:	4a15      	ldr	r2, [pc, #84]	; (80293d8 <TIM_OC1_SetConfig+0xd8>)
 8029382:	4293      	cmp	r3, r2
 8029384:	d003      	beq.n	802938e <TIM_OC1_SetConfig+0x8e>
 8029386:	687b      	ldr	r3, [r7, #4]
 8029388:	4a14      	ldr	r2, [pc, #80]	; (80293dc <TIM_OC1_SetConfig+0xdc>)
 802938a:	4293      	cmp	r3, r2
 802938c:	d111      	bne.n	80293b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 802938e:	693b      	ldr	r3, [r7, #16]
 8029390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8029396:	693b      	ldr	r3, [r7, #16]
 8029398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802939c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 802939e:	683b      	ldr	r3, [r7, #0]
 80293a0:	695b      	ldr	r3, [r3, #20]
 80293a2:	693a      	ldr	r2, [r7, #16]
 80293a4:	4313      	orrs	r3, r2
 80293a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80293a8:	683b      	ldr	r3, [r7, #0]
 80293aa:	699b      	ldr	r3, [r3, #24]
 80293ac:	693a      	ldr	r2, [r7, #16]
 80293ae:	4313      	orrs	r3, r2
 80293b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80293b2:	687b      	ldr	r3, [r7, #4]
 80293b4:	693a      	ldr	r2, [r7, #16]
 80293b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80293b8:	687b      	ldr	r3, [r7, #4]
 80293ba:	68fa      	ldr	r2, [r7, #12]
 80293bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80293be:	683b      	ldr	r3, [r7, #0]
 80293c0:	685a      	ldr	r2, [r3, #4]
 80293c2:	687b      	ldr	r3, [r7, #4]
 80293c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80293c6:	687b      	ldr	r3, [r7, #4]
 80293c8:	697a      	ldr	r2, [r7, #20]
 80293ca:	621a      	str	r2, [r3, #32]
}
 80293cc:	bf00      	nop
 80293ce:	371c      	adds	r7, #28
 80293d0:	46bd      	mov	sp, r7
 80293d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293d6:	4770      	bx	lr
 80293d8:	40010000 	.word	0x40010000
 80293dc:	40010400 	.word	0x40010400

080293e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80293e0:	b480      	push	{r7}
 80293e2:	b087      	sub	sp, #28
 80293e4:	af00      	add	r7, sp, #0
 80293e6:	6078      	str	r0, [r7, #4]
 80293e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80293ea:	687b      	ldr	r3, [r7, #4]
 80293ec:	6a1b      	ldr	r3, [r3, #32]
 80293ee:	f023 0210 	bic.w	r2, r3, #16
 80293f2:	687b      	ldr	r3, [r7, #4]
 80293f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80293f6:	687b      	ldr	r3, [r7, #4]
 80293f8:	6a1b      	ldr	r3, [r3, #32]
 80293fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80293fc:	687b      	ldr	r3, [r7, #4]
 80293fe:	685b      	ldr	r3, [r3, #4]
 8029400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029402:	687b      	ldr	r3, [r7, #4]
 8029404:	699b      	ldr	r3, [r3, #24]
 8029406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8029408:	68fb      	ldr	r3, [r7, #12]
 802940a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802940e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8029410:	68fb      	ldr	r3, [r7, #12]
 8029412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029418:	683b      	ldr	r3, [r7, #0]
 802941a:	681b      	ldr	r3, [r3, #0]
 802941c:	021b      	lsls	r3, r3, #8
 802941e:	68fa      	ldr	r2, [r7, #12]
 8029420:	4313      	orrs	r3, r2
 8029422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8029424:	697b      	ldr	r3, [r7, #20]
 8029426:	f023 0320 	bic.w	r3, r3, #32
 802942a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 802942c:	683b      	ldr	r3, [r7, #0]
 802942e:	689b      	ldr	r3, [r3, #8]
 8029430:	011b      	lsls	r3, r3, #4
 8029432:	697a      	ldr	r2, [r7, #20]
 8029434:	4313      	orrs	r3, r2
 8029436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8029438:	687b      	ldr	r3, [r7, #4]
 802943a:	4a22      	ldr	r2, [pc, #136]	; (80294c4 <TIM_OC2_SetConfig+0xe4>)
 802943c:	4293      	cmp	r3, r2
 802943e:	d003      	beq.n	8029448 <TIM_OC2_SetConfig+0x68>
 8029440:	687b      	ldr	r3, [r7, #4]
 8029442:	4a21      	ldr	r2, [pc, #132]	; (80294c8 <TIM_OC2_SetConfig+0xe8>)
 8029444:	4293      	cmp	r3, r2
 8029446:	d10d      	bne.n	8029464 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8029448:	697b      	ldr	r3, [r7, #20]
 802944a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802944e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8029450:	683b      	ldr	r3, [r7, #0]
 8029452:	68db      	ldr	r3, [r3, #12]
 8029454:	011b      	lsls	r3, r3, #4
 8029456:	697a      	ldr	r2, [r7, #20]
 8029458:	4313      	orrs	r3, r2
 802945a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 802945c:	697b      	ldr	r3, [r7, #20]
 802945e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029462:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029464:	687b      	ldr	r3, [r7, #4]
 8029466:	4a17      	ldr	r2, [pc, #92]	; (80294c4 <TIM_OC2_SetConfig+0xe4>)
 8029468:	4293      	cmp	r3, r2
 802946a:	d003      	beq.n	8029474 <TIM_OC2_SetConfig+0x94>
 802946c:	687b      	ldr	r3, [r7, #4]
 802946e:	4a16      	ldr	r2, [pc, #88]	; (80294c8 <TIM_OC2_SetConfig+0xe8>)
 8029470:	4293      	cmp	r3, r2
 8029472:	d113      	bne.n	802949c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8029474:	693b      	ldr	r3, [r7, #16]
 8029476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802947a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 802947c:	693b      	ldr	r3, [r7, #16]
 802947e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8029484:	683b      	ldr	r3, [r7, #0]
 8029486:	695b      	ldr	r3, [r3, #20]
 8029488:	009b      	lsls	r3, r3, #2
 802948a:	693a      	ldr	r2, [r7, #16]
 802948c:	4313      	orrs	r3, r2
 802948e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8029490:	683b      	ldr	r3, [r7, #0]
 8029492:	699b      	ldr	r3, [r3, #24]
 8029494:	009b      	lsls	r3, r3, #2
 8029496:	693a      	ldr	r2, [r7, #16]
 8029498:	4313      	orrs	r3, r2
 802949a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802949c:	687b      	ldr	r3, [r7, #4]
 802949e:	693a      	ldr	r2, [r7, #16]
 80294a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80294a2:	687b      	ldr	r3, [r7, #4]
 80294a4:	68fa      	ldr	r2, [r7, #12]
 80294a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80294a8:	683b      	ldr	r3, [r7, #0]
 80294aa:	685a      	ldr	r2, [r3, #4]
 80294ac:	687b      	ldr	r3, [r7, #4]
 80294ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80294b0:	687b      	ldr	r3, [r7, #4]
 80294b2:	697a      	ldr	r2, [r7, #20]
 80294b4:	621a      	str	r2, [r3, #32]
}
 80294b6:	bf00      	nop
 80294b8:	371c      	adds	r7, #28
 80294ba:	46bd      	mov	sp, r7
 80294bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294c0:	4770      	bx	lr
 80294c2:	bf00      	nop
 80294c4:	40010000 	.word	0x40010000
 80294c8:	40010400 	.word	0x40010400

080294cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80294cc:	b480      	push	{r7}
 80294ce:	b087      	sub	sp, #28
 80294d0:	af00      	add	r7, sp, #0
 80294d2:	6078      	str	r0, [r7, #4]
 80294d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80294d6:	687b      	ldr	r3, [r7, #4]
 80294d8:	6a1b      	ldr	r3, [r3, #32]
 80294da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80294de:	687b      	ldr	r3, [r7, #4]
 80294e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80294e2:	687b      	ldr	r3, [r7, #4]
 80294e4:	6a1b      	ldr	r3, [r3, #32]
 80294e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80294e8:	687b      	ldr	r3, [r7, #4]
 80294ea:	685b      	ldr	r3, [r3, #4]
 80294ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80294ee:	687b      	ldr	r3, [r7, #4]
 80294f0:	69db      	ldr	r3, [r3, #28]
 80294f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80294f4:	68fb      	ldr	r3, [r7, #12]
 80294f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80294fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80294fc:	68fb      	ldr	r3, [r7, #12]
 80294fe:	f023 0303 	bic.w	r3, r3, #3
 8029502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029504:	683b      	ldr	r3, [r7, #0]
 8029506:	681b      	ldr	r3, [r3, #0]
 8029508:	68fa      	ldr	r2, [r7, #12]
 802950a:	4313      	orrs	r3, r2
 802950c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 802950e:	697b      	ldr	r3, [r7, #20]
 8029510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8029516:	683b      	ldr	r3, [r7, #0]
 8029518:	689b      	ldr	r3, [r3, #8]
 802951a:	021b      	lsls	r3, r3, #8
 802951c:	697a      	ldr	r2, [r7, #20]
 802951e:	4313      	orrs	r3, r2
 8029520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8029522:	687b      	ldr	r3, [r7, #4]
 8029524:	4a21      	ldr	r2, [pc, #132]	; (80295ac <TIM_OC3_SetConfig+0xe0>)
 8029526:	4293      	cmp	r3, r2
 8029528:	d003      	beq.n	8029532 <TIM_OC3_SetConfig+0x66>
 802952a:	687b      	ldr	r3, [r7, #4]
 802952c:	4a20      	ldr	r2, [pc, #128]	; (80295b0 <TIM_OC3_SetConfig+0xe4>)
 802952e:	4293      	cmp	r3, r2
 8029530:	d10d      	bne.n	802954e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8029532:	697b      	ldr	r3, [r7, #20]
 8029534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 802953a:	683b      	ldr	r3, [r7, #0]
 802953c:	68db      	ldr	r3, [r3, #12]
 802953e:	021b      	lsls	r3, r3, #8
 8029540:	697a      	ldr	r2, [r7, #20]
 8029542:	4313      	orrs	r3, r2
 8029544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8029546:	697b      	ldr	r3, [r7, #20]
 8029548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802954c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802954e:	687b      	ldr	r3, [r7, #4]
 8029550:	4a16      	ldr	r2, [pc, #88]	; (80295ac <TIM_OC3_SetConfig+0xe0>)
 8029552:	4293      	cmp	r3, r2
 8029554:	d003      	beq.n	802955e <TIM_OC3_SetConfig+0x92>
 8029556:	687b      	ldr	r3, [r7, #4]
 8029558:	4a15      	ldr	r2, [pc, #84]	; (80295b0 <TIM_OC3_SetConfig+0xe4>)
 802955a:	4293      	cmp	r3, r2
 802955c:	d113      	bne.n	8029586 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 802955e:	693b      	ldr	r3, [r7, #16]
 8029560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8029566:	693b      	ldr	r3, [r7, #16]
 8029568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802956c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802956e:	683b      	ldr	r3, [r7, #0]
 8029570:	695b      	ldr	r3, [r3, #20]
 8029572:	011b      	lsls	r3, r3, #4
 8029574:	693a      	ldr	r2, [r7, #16]
 8029576:	4313      	orrs	r3, r2
 8029578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802957a:	683b      	ldr	r3, [r7, #0]
 802957c:	699b      	ldr	r3, [r3, #24]
 802957e:	011b      	lsls	r3, r3, #4
 8029580:	693a      	ldr	r2, [r7, #16]
 8029582:	4313      	orrs	r3, r2
 8029584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029586:	687b      	ldr	r3, [r7, #4]
 8029588:	693a      	ldr	r2, [r7, #16]
 802958a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802958c:	687b      	ldr	r3, [r7, #4]
 802958e:	68fa      	ldr	r2, [r7, #12]
 8029590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8029592:	683b      	ldr	r3, [r7, #0]
 8029594:	685a      	ldr	r2, [r3, #4]
 8029596:	687b      	ldr	r3, [r7, #4]
 8029598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802959a:	687b      	ldr	r3, [r7, #4]
 802959c:	697a      	ldr	r2, [r7, #20]
 802959e:	621a      	str	r2, [r3, #32]
}
 80295a0:	bf00      	nop
 80295a2:	371c      	adds	r7, #28
 80295a4:	46bd      	mov	sp, r7
 80295a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295aa:	4770      	bx	lr
 80295ac:	40010000 	.word	0x40010000
 80295b0:	40010400 	.word	0x40010400

080295b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80295b4:	b480      	push	{r7}
 80295b6:	b087      	sub	sp, #28
 80295b8:	af00      	add	r7, sp, #0
 80295ba:	6078      	str	r0, [r7, #4]
 80295bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80295be:	687b      	ldr	r3, [r7, #4]
 80295c0:	6a1b      	ldr	r3, [r3, #32]
 80295c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80295c6:	687b      	ldr	r3, [r7, #4]
 80295c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80295ca:	687b      	ldr	r3, [r7, #4]
 80295cc:	6a1b      	ldr	r3, [r3, #32]
 80295ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80295d0:	687b      	ldr	r3, [r7, #4]
 80295d2:	685b      	ldr	r3, [r3, #4]
 80295d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80295d6:	687b      	ldr	r3, [r7, #4]
 80295d8:	69db      	ldr	r3, [r3, #28]
 80295da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80295dc:	68fb      	ldr	r3, [r7, #12]
 80295de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80295e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80295e4:	68fb      	ldr	r3, [r7, #12]
 80295e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80295ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80295ec:	683b      	ldr	r3, [r7, #0]
 80295ee:	681b      	ldr	r3, [r3, #0]
 80295f0:	021b      	lsls	r3, r3, #8
 80295f2:	68fa      	ldr	r2, [r7, #12]
 80295f4:	4313      	orrs	r3, r2
 80295f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80295f8:	693b      	ldr	r3, [r7, #16]
 80295fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80295fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8029600:	683b      	ldr	r3, [r7, #0]
 8029602:	689b      	ldr	r3, [r3, #8]
 8029604:	031b      	lsls	r3, r3, #12
 8029606:	693a      	ldr	r2, [r7, #16]
 8029608:	4313      	orrs	r3, r2
 802960a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802960c:	687b      	ldr	r3, [r7, #4]
 802960e:	4a12      	ldr	r2, [pc, #72]	; (8029658 <TIM_OC4_SetConfig+0xa4>)
 8029610:	4293      	cmp	r3, r2
 8029612:	d003      	beq.n	802961c <TIM_OC4_SetConfig+0x68>
 8029614:	687b      	ldr	r3, [r7, #4]
 8029616:	4a11      	ldr	r2, [pc, #68]	; (802965c <TIM_OC4_SetConfig+0xa8>)
 8029618:	4293      	cmp	r3, r2
 802961a:	d109      	bne.n	8029630 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 802961c:	697b      	ldr	r3, [r7, #20]
 802961e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8029624:	683b      	ldr	r3, [r7, #0]
 8029626:	695b      	ldr	r3, [r3, #20]
 8029628:	019b      	lsls	r3, r3, #6
 802962a:	697a      	ldr	r2, [r7, #20]
 802962c:	4313      	orrs	r3, r2
 802962e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029630:	687b      	ldr	r3, [r7, #4]
 8029632:	697a      	ldr	r2, [r7, #20]
 8029634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8029636:	687b      	ldr	r3, [r7, #4]
 8029638:	68fa      	ldr	r2, [r7, #12]
 802963a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 802963c:	683b      	ldr	r3, [r7, #0]
 802963e:	685a      	ldr	r2, [r3, #4]
 8029640:	687b      	ldr	r3, [r7, #4]
 8029642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029644:	687b      	ldr	r3, [r7, #4]
 8029646:	693a      	ldr	r2, [r7, #16]
 8029648:	621a      	str	r2, [r3, #32]
}
 802964a:	bf00      	nop
 802964c:	371c      	adds	r7, #28
 802964e:	46bd      	mov	sp, r7
 8029650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029654:	4770      	bx	lr
 8029656:	bf00      	nop
 8029658:	40010000 	.word	0x40010000
 802965c:	40010400 	.word	0x40010400

08029660 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8029660:	b580      	push	{r7, lr}
 8029662:	b086      	sub	sp, #24
 8029664:	af00      	add	r7, sp, #0
 8029666:	6078      	str	r0, [r7, #4]
 8029668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802966a:	2300      	movs	r3, #0
 802966c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802966e:	687b      	ldr	r3, [r7, #4]
 8029670:	681b      	ldr	r3, [r3, #0]
 8029672:	689b      	ldr	r3, [r3, #8]
 8029674:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8029676:	693b      	ldr	r3, [r7, #16]
 8029678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802967c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 802967e:	683b      	ldr	r3, [r7, #0]
 8029680:	685b      	ldr	r3, [r3, #4]
 8029682:	693a      	ldr	r2, [r7, #16]
 8029684:	4313      	orrs	r3, r2
 8029686:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8029688:	693b      	ldr	r3, [r7, #16]
 802968a:	f023 0307 	bic.w	r3, r3, #7
 802968e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8029690:	683b      	ldr	r3, [r7, #0]
 8029692:	681b      	ldr	r3, [r3, #0]
 8029694:	693a      	ldr	r2, [r7, #16]
 8029696:	4313      	orrs	r3, r2
 8029698:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 802969a:	687b      	ldr	r3, [r7, #4]
 802969c:	681b      	ldr	r3, [r3, #0]
 802969e:	693a      	ldr	r2, [r7, #16]
 80296a0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80296a2:	683b      	ldr	r3, [r7, #0]
 80296a4:	685b      	ldr	r3, [r3, #4]
 80296a6:	2b70      	cmp	r3, #112	; 0x70
 80296a8:	d01a      	beq.n	80296e0 <TIM_SlaveTimer_SetConfig+0x80>
 80296aa:	2b70      	cmp	r3, #112	; 0x70
 80296ac:	d860      	bhi.n	8029770 <TIM_SlaveTimer_SetConfig+0x110>
 80296ae:	2b60      	cmp	r3, #96	; 0x60
 80296b0:	d054      	beq.n	802975c <TIM_SlaveTimer_SetConfig+0xfc>
 80296b2:	2b60      	cmp	r3, #96	; 0x60
 80296b4:	d85c      	bhi.n	8029770 <TIM_SlaveTimer_SetConfig+0x110>
 80296b6:	2b50      	cmp	r3, #80	; 0x50
 80296b8:	d046      	beq.n	8029748 <TIM_SlaveTimer_SetConfig+0xe8>
 80296ba:	2b50      	cmp	r3, #80	; 0x50
 80296bc:	d858      	bhi.n	8029770 <TIM_SlaveTimer_SetConfig+0x110>
 80296be:	2b40      	cmp	r3, #64	; 0x40
 80296c0:	d019      	beq.n	80296f6 <TIM_SlaveTimer_SetConfig+0x96>
 80296c2:	2b40      	cmp	r3, #64	; 0x40
 80296c4:	d854      	bhi.n	8029770 <TIM_SlaveTimer_SetConfig+0x110>
 80296c6:	2b30      	cmp	r3, #48	; 0x30
 80296c8:	d055      	beq.n	8029776 <TIM_SlaveTimer_SetConfig+0x116>
 80296ca:	2b30      	cmp	r3, #48	; 0x30
 80296cc:	d850      	bhi.n	8029770 <TIM_SlaveTimer_SetConfig+0x110>
 80296ce:	2b20      	cmp	r3, #32
 80296d0:	d051      	beq.n	8029776 <TIM_SlaveTimer_SetConfig+0x116>
 80296d2:	2b20      	cmp	r3, #32
 80296d4:	d84c      	bhi.n	8029770 <TIM_SlaveTimer_SetConfig+0x110>
 80296d6:	2b00      	cmp	r3, #0
 80296d8:	d04d      	beq.n	8029776 <TIM_SlaveTimer_SetConfig+0x116>
 80296da:	2b10      	cmp	r3, #16
 80296dc:	d04b      	beq.n	8029776 <TIM_SlaveTimer_SetConfig+0x116>
 80296de:	e047      	b.n	8029770 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80296e0:	687b      	ldr	r3, [r7, #4]
 80296e2:	6818      	ldr	r0, [r3, #0]
 80296e4:	683b      	ldr	r3, [r7, #0]
 80296e6:	68d9      	ldr	r1, [r3, #12]
 80296e8:	683b      	ldr	r3, [r7, #0]
 80296ea:	689a      	ldr	r2, [r3, #8]
 80296ec:	683b      	ldr	r3, [r7, #0]
 80296ee:	691b      	ldr	r3, [r3, #16]
 80296f0:	f000 f9ec 	bl	8029acc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80296f4:	e040      	b.n	8029778 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80296f6:	683b      	ldr	r3, [r7, #0]
 80296f8:	681b      	ldr	r3, [r3, #0]
 80296fa:	2b05      	cmp	r3, #5
 80296fc:	d101      	bne.n	8029702 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80296fe:	2301      	movs	r3, #1
 8029700:	e03b      	b.n	802977a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8029702:	687b      	ldr	r3, [r7, #4]
 8029704:	681b      	ldr	r3, [r3, #0]
 8029706:	6a1b      	ldr	r3, [r3, #32]
 8029708:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 802970a:	687b      	ldr	r3, [r7, #4]
 802970c:	681b      	ldr	r3, [r3, #0]
 802970e:	6a1a      	ldr	r2, [r3, #32]
 8029710:	687b      	ldr	r3, [r7, #4]
 8029712:	681b      	ldr	r3, [r3, #0]
 8029714:	f022 0201 	bic.w	r2, r2, #1
 8029718:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 802971a:	687b      	ldr	r3, [r7, #4]
 802971c:	681b      	ldr	r3, [r3, #0]
 802971e:	699b      	ldr	r3, [r3, #24]
 8029720:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8029722:	68bb      	ldr	r3, [r7, #8]
 8029724:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029728:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 802972a:	683b      	ldr	r3, [r7, #0]
 802972c:	691b      	ldr	r3, [r3, #16]
 802972e:	011b      	lsls	r3, r3, #4
 8029730:	68ba      	ldr	r2, [r7, #8]
 8029732:	4313      	orrs	r3, r2
 8029734:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8029736:	687b      	ldr	r3, [r7, #4]
 8029738:	681b      	ldr	r3, [r3, #0]
 802973a:	68ba      	ldr	r2, [r7, #8]
 802973c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 802973e:	687b      	ldr	r3, [r7, #4]
 8029740:	681b      	ldr	r3, [r3, #0]
 8029742:	68fa      	ldr	r2, [r7, #12]
 8029744:	621a      	str	r2, [r3, #32]
      break;
 8029746:	e017      	b.n	8029778 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8029748:	687b      	ldr	r3, [r7, #4]
 802974a:	6818      	ldr	r0, [r3, #0]
 802974c:	683b      	ldr	r3, [r7, #0]
 802974e:	6899      	ldr	r1, [r3, #8]
 8029750:	683b      	ldr	r3, [r7, #0]
 8029752:	691b      	ldr	r3, [r3, #16]
 8029754:	461a      	mov	r2, r3
 8029756:	f000 f889 	bl	802986c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 802975a:	e00d      	b.n	8029778 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 802975c:	687b      	ldr	r3, [r7, #4]
 802975e:	6818      	ldr	r0, [r3, #0]
 8029760:	683b      	ldr	r3, [r7, #0]
 8029762:	6899      	ldr	r1, [r3, #8]
 8029764:	683b      	ldr	r3, [r7, #0]
 8029766:	691b      	ldr	r3, [r3, #16]
 8029768:	461a      	mov	r2, r3
 802976a:	f000 f8eb 	bl	8029944 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 802976e:	e003      	b.n	8029778 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8029770:	2301      	movs	r3, #1
 8029772:	75fb      	strb	r3, [r7, #23]
      break;
 8029774:	e000      	b.n	8029778 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8029776:	bf00      	nop
  }

  return status;
 8029778:	7dfb      	ldrb	r3, [r7, #23]
}
 802977a:	4618      	mov	r0, r3
 802977c:	3718      	adds	r7, #24
 802977e:	46bd      	mov	sp, r7
 8029780:	bd80      	pop	{r7, pc}
	...

08029784 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8029784:	b480      	push	{r7}
 8029786:	b087      	sub	sp, #28
 8029788:	af00      	add	r7, sp, #0
 802978a:	60f8      	str	r0, [r7, #12]
 802978c:	60b9      	str	r1, [r7, #8]
 802978e:	607a      	str	r2, [r7, #4]
 8029790:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029792:	68fb      	ldr	r3, [r7, #12]
 8029794:	6a1b      	ldr	r3, [r3, #32]
 8029796:	f023 0201 	bic.w	r2, r3, #1
 802979a:	68fb      	ldr	r3, [r7, #12]
 802979c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802979e:	68fb      	ldr	r3, [r7, #12]
 80297a0:	699b      	ldr	r3, [r3, #24]
 80297a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80297a4:	68fb      	ldr	r3, [r7, #12]
 80297a6:	6a1b      	ldr	r3, [r3, #32]
 80297a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80297aa:	68fb      	ldr	r3, [r7, #12]
 80297ac:	4a28      	ldr	r2, [pc, #160]	; (8029850 <TIM_TI1_SetConfig+0xcc>)
 80297ae:	4293      	cmp	r3, r2
 80297b0:	d01b      	beq.n	80297ea <TIM_TI1_SetConfig+0x66>
 80297b2:	68fb      	ldr	r3, [r7, #12]
 80297b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80297b8:	d017      	beq.n	80297ea <TIM_TI1_SetConfig+0x66>
 80297ba:	68fb      	ldr	r3, [r7, #12]
 80297bc:	4a25      	ldr	r2, [pc, #148]	; (8029854 <TIM_TI1_SetConfig+0xd0>)
 80297be:	4293      	cmp	r3, r2
 80297c0:	d013      	beq.n	80297ea <TIM_TI1_SetConfig+0x66>
 80297c2:	68fb      	ldr	r3, [r7, #12]
 80297c4:	4a24      	ldr	r2, [pc, #144]	; (8029858 <TIM_TI1_SetConfig+0xd4>)
 80297c6:	4293      	cmp	r3, r2
 80297c8:	d00f      	beq.n	80297ea <TIM_TI1_SetConfig+0x66>
 80297ca:	68fb      	ldr	r3, [r7, #12]
 80297cc:	4a23      	ldr	r2, [pc, #140]	; (802985c <TIM_TI1_SetConfig+0xd8>)
 80297ce:	4293      	cmp	r3, r2
 80297d0:	d00b      	beq.n	80297ea <TIM_TI1_SetConfig+0x66>
 80297d2:	68fb      	ldr	r3, [r7, #12]
 80297d4:	4a22      	ldr	r2, [pc, #136]	; (8029860 <TIM_TI1_SetConfig+0xdc>)
 80297d6:	4293      	cmp	r3, r2
 80297d8:	d007      	beq.n	80297ea <TIM_TI1_SetConfig+0x66>
 80297da:	68fb      	ldr	r3, [r7, #12]
 80297dc:	4a21      	ldr	r2, [pc, #132]	; (8029864 <TIM_TI1_SetConfig+0xe0>)
 80297de:	4293      	cmp	r3, r2
 80297e0:	d003      	beq.n	80297ea <TIM_TI1_SetConfig+0x66>
 80297e2:	68fb      	ldr	r3, [r7, #12]
 80297e4:	4a20      	ldr	r2, [pc, #128]	; (8029868 <TIM_TI1_SetConfig+0xe4>)
 80297e6:	4293      	cmp	r3, r2
 80297e8:	d101      	bne.n	80297ee <TIM_TI1_SetConfig+0x6a>
 80297ea:	2301      	movs	r3, #1
 80297ec:	e000      	b.n	80297f0 <TIM_TI1_SetConfig+0x6c>
 80297ee:	2300      	movs	r3, #0
 80297f0:	2b00      	cmp	r3, #0
 80297f2:	d008      	beq.n	8029806 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80297f4:	697b      	ldr	r3, [r7, #20]
 80297f6:	f023 0303 	bic.w	r3, r3, #3
 80297fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80297fc:	697a      	ldr	r2, [r7, #20]
 80297fe:	687b      	ldr	r3, [r7, #4]
 8029800:	4313      	orrs	r3, r2
 8029802:	617b      	str	r3, [r7, #20]
 8029804:	e003      	b.n	802980e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8029806:	697b      	ldr	r3, [r7, #20]
 8029808:	f043 0301 	orr.w	r3, r3, #1
 802980c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802980e:	697b      	ldr	r3, [r7, #20]
 8029810:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029814:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8029816:	683b      	ldr	r3, [r7, #0]
 8029818:	011b      	lsls	r3, r3, #4
 802981a:	b2db      	uxtb	r3, r3
 802981c:	697a      	ldr	r2, [r7, #20]
 802981e:	4313      	orrs	r3, r2
 8029820:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8029822:	693b      	ldr	r3, [r7, #16]
 8029824:	f023 030a 	bic.w	r3, r3, #10
 8029828:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 802982a:	68bb      	ldr	r3, [r7, #8]
 802982c:	f003 030a 	and.w	r3, r3, #10
 8029830:	693a      	ldr	r2, [r7, #16]
 8029832:	4313      	orrs	r3, r2
 8029834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8029836:	68fb      	ldr	r3, [r7, #12]
 8029838:	697a      	ldr	r2, [r7, #20]
 802983a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802983c:	68fb      	ldr	r3, [r7, #12]
 802983e:	693a      	ldr	r2, [r7, #16]
 8029840:	621a      	str	r2, [r3, #32]
}
 8029842:	bf00      	nop
 8029844:	371c      	adds	r7, #28
 8029846:	46bd      	mov	sp, r7
 8029848:	f85d 7b04 	ldr.w	r7, [sp], #4
 802984c:	4770      	bx	lr
 802984e:	bf00      	nop
 8029850:	40010000 	.word	0x40010000
 8029854:	40000400 	.word	0x40000400
 8029858:	40000800 	.word	0x40000800
 802985c:	40000c00 	.word	0x40000c00
 8029860:	40010400 	.word	0x40010400
 8029864:	40014000 	.word	0x40014000
 8029868:	40001800 	.word	0x40001800

0802986c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802986c:	b480      	push	{r7}
 802986e:	b087      	sub	sp, #28
 8029870:	af00      	add	r7, sp, #0
 8029872:	60f8      	str	r0, [r7, #12]
 8029874:	60b9      	str	r1, [r7, #8]
 8029876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8029878:	68fb      	ldr	r3, [r7, #12]
 802987a:	6a1b      	ldr	r3, [r3, #32]
 802987c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802987e:	68fb      	ldr	r3, [r7, #12]
 8029880:	6a1b      	ldr	r3, [r3, #32]
 8029882:	f023 0201 	bic.w	r2, r3, #1
 8029886:	68fb      	ldr	r3, [r7, #12]
 8029888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802988a:	68fb      	ldr	r3, [r7, #12]
 802988c:	699b      	ldr	r3, [r3, #24]
 802988e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8029890:	693b      	ldr	r3, [r7, #16]
 8029892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8029898:	687b      	ldr	r3, [r7, #4]
 802989a:	011b      	lsls	r3, r3, #4
 802989c:	693a      	ldr	r2, [r7, #16]
 802989e:	4313      	orrs	r3, r2
 80298a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80298a2:	697b      	ldr	r3, [r7, #20]
 80298a4:	f023 030a 	bic.w	r3, r3, #10
 80298a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80298aa:	697a      	ldr	r2, [r7, #20]
 80298ac:	68bb      	ldr	r3, [r7, #8]
 80298ae:	4313      	orrs	r3, r2
 80298b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80298b2:	68fb      	ldr	r3, [r7, #12]
 80298b4:	693a      	ldr	r2, [r7, #16]
 80298b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80298b8:	68fb      	ldr	r3, [r7, #12]
 80298ba:	697a      	ldr	r2, [r7, #20]
 80298bc:	621a      	str	r2, [r3, #32]
}
 80298be:	bf00      	nop
 80298c0:	371c      	adds	r7, #28
 80298c2:	46bd      	mov	sp, r7
 80298c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298c8:	4770      	bx	lr

080298ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80298ca:	b480      	push	{r7}
 80298cc:	b087      	sub	sp, #28
 80298ce:	af00      	add	r7, sp, #0
 80298d0:	60f8      	str	r0, [r7, #12]
 80298d2:	60b9      	str	r1, [r7, #8]
 80298d4:	607a      	str	r2, [r7, #4]
 80298d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80298d8:	68fb      	ldr	r3, [r7, #12]
 80298da:	6a1b      	ldr	r3, [r3, #32]
 80298dc:	f023 0210 	bic.w	r2, r3, #16
 80298e0:	68fb      	ldr	r3, [r7, #12]
 80298e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80298e4:	68fb      	ldr	r3, [r7, #12]
 80298e6:	699b      	ldr	r3, [r3, #24]
 80298e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80298ea:	68fb      	ldr	r3, [r7, #12]
 80298ec:	6a1b      	ldr	r3, [r3, #32]
 80298ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80298f0:	697b      	ldr	r3, [r7, #20]
 80298f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80298f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80298f8:	687b      	ldr	r3, [r7, #4]
 80298fa:	021b      	lsls	r3, r3, #8
 80298fc:	697a      	ldr	r2, [r7, #20]
 80298fe:	4313      	orrs	r3, r2
 8029900:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8029902:	697b      	ldr	r3, [r7, #20]
 8029904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 802990a:	683b      	ldr	r3, [r7, #0]
 802990c:	031b      	lsls	r3, r3, #12
 802990e:	b29b      	uxth	r3, r3
 8029910:	697a      	ldr	r2, [r7, #20]
 8029912:	4313      	orrs	r3, r2
 8029914:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8029916:	693b      	ldr	r3, [r7, #16]
 8029918:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802991c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 802991e:	68bb      	ldr	r3, [r7, #8]
 8029920:	011b      	lsls	r3, r3, #4
 8029922:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8029926:	693a      	ldr	r2, [r7, #16]
 8029928:	4313      	orrs	r3, r2
 802992a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802992c:	68fb      	ldr	r3, [r7, #12]
 802992e:	697a      	ldr	r2, [r7, #20]
 8029930:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029932:	68fb      	ldr	r3, [r7, #12]
 8029934:	693a      	ldr	r2, [r7, #16]
 8029936:	621a      	str	r2, [r3, #32]
}
 8029938:	bf00      	nop
 802993a:	371c      	adds	r7, #28
 802993c:	46bd      	mov	sp, r7
 802993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029942:	4770      	bx	lr

08029944 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029944:	b480      	push	{r7}
 8029946:	b087      	sub	sp, #28
 8029948:	af00      	add	r7, sp, #0
 802994a:	60f8      	str	r0, [r7, #12]
 802994c:	60b9      	str	r1, [r7, #8]
 802994e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029950:	68fb      	ldr	r3, [r7, #12]
 8029952:	6a1b      	ldr	r3, [r3, #32]
 8029954:	f023 0210 	bic.w	r2, r3, #16
 8029958:	68fb      	ldr	r3, [r7, #12]
 802995a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802995c:	68fb      	ldr	r3, [r7, #12]
 802995e:	699b      	ldr	r3, [r3, #24]
 8029960:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029962:	68fb      	ldr	r3, [r7, #12]
 8029964:	6a1b      	ldr	r3, [r3, #32]
 8029966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8029968:	697b      	ldr	r3, [r7, #20]
 802996a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802996e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8029970:	687b      	ldr	r3, [r7, #4]
 8029972:	031b      	lsls	r3, r3, #12
 8029974:	697a      	ldr	r2, [r7, #20]
 8029976:	4313      	orrs	r3, r2
 8029978:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802997a:	693b      	ldr	r3, [r7, #16]
 802997c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8029980:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8029982:	68bb      	ldr	r3, [r7, #8]
 8029984:	011b      	lsls	r3, r3, #4
 8029986:	693a      	ldr	r2, [r7, #16]
 8029988:	4313      	orrs	r3, r2
 802998a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802998c:	68fb      	ldr	r3, [r7, #12]
 802998e:	697a      	ldr	r2, [r7, #20]
 8029990:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029992:	68fb      	ldr	r3, [r7, #12]
 8029994:	693a      	ldr	r2, [r7, #16]
 8029996:	621a      	str	r2, [r3, #32]
}
 8029998:	bf00      	nop
 802999a:	371c      	adds	r7, #28
 802999c:	46bd      	mov	sp, r7
 802999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80299a2:	4770      	bx	lr

080299a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80299a4:	b480      	push	{r7}
 80299a6:	b087      	sub	sp, #28
 80299a8:	af00      	add	r7, sp, #0
 80299aa:	60f8      	str	r0, [r7, #12]
 80299ac:	60b9      	str	r1, [r7, #8]
 80299ae:	607a      	str	r2, [r7, #4]
 80299b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80299b2:	68fb      	ldr	r3, [r7, #12]
 80299b4:	6a1b      	ldr	r3, [r3, #32]
 80299b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80299ba:	68fb      	ldr	r3, [r7, #12]
 80299bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80299be:	68fb      	ldr	r3, [r7, #12]
 80299c0:	69db      	ldr	r3, [r3, #28]
 80299c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80299c4:	68fb      	ldr	r3, [r7, #12]
 80299c6:	6a1b      	ldr	r3, [r3, #32]
 80299c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80299ca:	697b      	ldr	r3, [r7, #20]
 80299cc:	f023 0303 	bic.w	r3, r3, #3
 80299d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80299d2:	697a      	ldr	r2, [r7, #20]
 80299d4:	687b      	ldr	r3, [r7, #4]
 80299d6:	4313      	orrs	r3, r2
 80299d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80299da:	697b      	ldr	r3, [r7, #20]
 80299dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80299e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80299e2:	683b      	ldr	r3, [r7, #0]
 80299e4:	011b      	lsls	r3, r3, #4
 80299e6:	b2db      	uxtb	r3, r3
 80299e8:	697a      	ldr	r2, [r7, #20]
 80299ea:	4313      	orrs	r3, r2
 80299ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80299ee:	693b      	ldr	r3, [r7, #16]
 80299f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80299f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80299f6:	68bb      	ldr	r3, [r7, #8]
 80299f8:	021b      	lsls	r3, r3, #8
 80299fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80299fe:	693a      	ldr	r2, [r7, #16]
 8029a00:	4313      	orrs	r3, r2
 8029a02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8029a04:	68fb      	ldr	r3, [r7, #12]
 8029a06:	697a      	ldr	r2, [r7, #20]
 8029a08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8029a0a:	68fb      	ldr	r3, [r7, #12]
 8029a0c:	693a      	ldr	r2, [r7, #16]
 8029a0e:	621a      	str	r2, [r3, #32]
}
 8029a10:	bf00      	nop
 8029a12:	371c      	adds	r7, #28
 8029a14:	46bd      	mov	sp, r7
 8029a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a1a:	4770      	bx	lr

08029a1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8029a1c:	b480      	push	{r7}
 8029a1e:	b087      	sub	sp, #28
 8029a20:	af00      	add	r7, sp, #0
 8029a22:	60f8      	str	r0, [r7, #12]
 8029a24:	60b9      	str	r1, [r7, #8]
 8029a26:	607a      	str	r2, [r7, #4]
 8029a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8029a2a:	68fb      	ldr	r3, [r7, #12]
 8029a2c:	6a1b      	ldr	r3, [r3, #32]
 8029a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8029a32:	68fb      	ldr	r3, [r7, #12]
 8029a34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8029a36:	68fb      	ldr	r3, [r7, #12]
 8029a38:	69db      	ldr	r3, [r3, #28]
 8029a3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029a3c:	68fb      	ldr	r3, [r7, #12]
 8029a3e:	6a1b      	ldr	r3, [r3, #32]
 8029a40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8029a42:	697b      	ldr	r3, [r7, #20]
 8029a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029a48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8029a4a:	687b      	ldr	r3, [r7, #4]
 8029a4c:	021b      	lsls	r3, r3, #8
 8029a4e:	697a      	ldr	r2, [r7, #20]
 8029a50:	4313      	orrs	r3, r2
 8029a52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8029a54:	697b      	ldr	r3, [r7, #20]
 8029a56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029a5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8029a5c:	683b      	ldr	r3, [r7, #0]
 8029a5e:	031b      	lsls	r3, r3, #12
 8029a60:	b29b      	uxth	r3, r3
 8029a62:	697a      	ldr	r2, [r7, #20]
 8029a64:	4313      	orrs	r3, r2
 8029a66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8029a68:	693b      	ldr	r3, [r7, #16]
 8029a6a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8029a6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8029a70:	68bb      	ldr	r3, [r7, #8]
 8029a72:	031b      	lsls	r3, r3, #12
 8029a74:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8029a78:	693a      	ldr	r2, [r7, #16]
 8029a7a:	4313      	orrs	r3, r2
 8029a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8029a7e:	68fb      	ldr	r3, [r7, #12]
 8029a80:	697a      	ldr	r2, [r7, #20]
 8029a82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8029a84:	68fb      	ldr	r3, [r7, #12]
 8029a86:	693a      	ldr	r2, [r7, #16]
 8029a88:	621a      	str	r2, [r3, #32]
}
 8029a8a:	bf00      	nop
 8029a8c:	371c      	adds	r7, #28
 8029a8e:	46bd      	mov	sp, r7
 8029a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a94:	4770      	bx	lr

08029a96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8029a96:	b480      	push	{r7}
 8029a98:	b085      	sub	sp, #20
 8029a9a:	af00      	add	r7, sp, #0
 8029a9c:	6078      	str	r0, [r7, #4]
 8029a9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8029aa0:	687b      	ldr	r3, [r7, #4]
 8029aa2:	689b      	ldr	r3, [r3, #8]
 8029aa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8029aa6:	68fb      	ldr	r3, [r7, #12]
 8029aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8029aae:	683a      	ldr	r2, [r7, #0]
 8029ab0:	68fb      	ldr	r3, [r7, #12]
 8029ab2:	4313      	orrs	r3, r2
 8029ab4:	f043 0307 	orr.w	r3, r3, #7
 8029ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8029aba:	687b      	ldr	r3, [r7, #4]
 8029abc:	68fa      	ldr	r2, [r7, #12]
 8029abe:	609a      	str	r2, [r3, #8]
}
 8029ac0:	bf00      	nop
 8029ac2:	3714      	adds	r7, #20
 8029ac4:	46bd      	mov	sp, r7
 8029ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029aca:	4770      	bx	lr

08029acc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8029acc:	b480      	push	{r7}
 8029ace:	b087      	sub	sp, #28
 8029ad0:	af00      	add	r7, sp, #0
 8029ad2:	60f8      	str	r0, [r7, #12]
 8029ad4:	60b9      	str	r1, [r7, #8]
 8029ad6:	607a      	str	r2, [r7, #4]
 8029ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8029ada:	68fb      	ldr	r3, [r7, #12]
 8029adc:	689b      	ldr	r3, [r3, #8]
 8029ade:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029ae0:	697b      	ldr	r3, [r7, #20]
 8029ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029ae6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8029ae8:	683b      	ldr	r3, [r7, #0]
 8029aea:	021a      	lsls	r2, r3, #8
 8029aec:	687b      	ldr	r3, [r7, #4]
 8029aee:	431a      	orrs	r2, r3
 8029af0:	68bb      	ldr	r3, [r7, #8]
 8029af2:	4313      	orrs	r3, r2
 8029af4:	697a      	ldr	r2, [r7, #20]
 8029af6:	4313      	orrs	r3, r2
 8029af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8029afa:	68fb      	ldr	r3, [r7, #12]
 8029afc:	697a      	ldr	r2, [r7, #20]
 8029afe:	609a      	str	r2, [r3, #8]
}
 8029b00:	bf00      	nop
 8029b02:	371c      	adds	r7, #28
 8029b04:	46bd      	mov	sp, r7
 8029b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b0a:	4770      	bx	lr

08029b0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8029b0c:	b480      	push	{r7}
 8029b0e:	b087      	sub	sp, #28
 8029b10:	af00      	add	r7, sp, #0
 8029b12:	60f8      	str	r0, [r7, #12]
 8029b14:	60b9      	str	r1, [r7, #8]
 8029b16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8029b18:	68bb      	ldr	r3, [r7, #8]
 8029b1a:	f003 031f 	and.w	r3, r3, #31
 8029b1e:	2201      	movs	r2, #1
 8029b20:	fa02 f303 	lsl.w	r3, r2, r3
 8029b24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8029b26:	68fb      	ldr	r3, [r7, #12]
 8029b28:	6a1a      	ldr	r2, [r3, #32]
 8029b2a:	697b      	ldr	r3, [r7, #20]
 8029b2c:	43db      	mvns	r3, r3
 8029b2e:	401a      	ands	r2, r3
 8029b30:	68fb      	ldr	r3, [r7, #12]
 8029b32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8029b34:	68fb      	ldr	r3, [r7, #12]
 8029b36:	6a1a      	ldr	r2, [r3, #32]
 8029b38:	68bb      	ldr	r3, [r7, #8]
 8029b3a:	f003 031f 	and.w	r3, r3, #31
 8029b3e:	6879      	ldr	r1, [r7, #4]
 8029b40:	fa01 f303 	lsl.w	r3, r1, r3
 8029b44:	431a      	orrs	r2, r3
 8029b46:	68fb      	ldr	r3, [r7, #12]
 8029b48:	621a      	str	r2, [r3, #32]
}
 8029b4a:	bf00      	nop
 8029b4c:	371c      	adds	r7, #28
 8029b4e:	46bd      	mov	sp, r7
 8029b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b54:	4770      	bx	lr
	...

08029b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8029b58:	b480      	push	{r7}
 8029b5a:	b085      	sub	sp, #20
 8029b5c:	af00      	add	r7, sp, #0
 8029b5e:	6078      	str	r0, [r7, #4]
 8029b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8029b62:	687b      	ldr	r3, [r7, #4]
 8029b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029b68:	2b01      	cmp	r3, #1
 8029b6a:	d101      	bne.n	8029b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8029b6c:	2302      	movs	r3, #2
 8029b6e:	e05a      	b.n	8029c26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8029b70:	687b      	ldr	r3, [r7, #4]
 8029b72:	2201      	movs	r2, #1
 8029b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029b78:	687b      	ldr	r3, [r7, #4]
 8029b7a:	2202      	movs	r2, #2
 8029b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8029b80:	687b      	ldr	r3, [r7, #4]
 8029b82:	681b      	ldr	r3, [r3, #0]
 8029b84:	685b      	ldr	r3, [r3, #4]
 8029b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8029b88:	687b      	ldr	r3, [r7, #4]
 8029b8a:	681b      	ldr	r3, [r3, #0]
 8029b8c:	689b      	ldr	r3, [r3, #8]
 8029b8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8029b90:	68fb      	ldr	r3, [r7, #12]
 8029b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029b96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8029b98:	683b      	ldr	r3, [r7, #0]
 8029b9a:	681b      	ldr	r3, [r3, #0]
 8029b9c:	68fa      	ldr	r2, [r7, #12]
 8029b9e:	4313      	orrs	r3, r2
 8029ba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8029ba2:	687b      	ldr	r3, [r7, #4]
 8029ba4:	681b      	ldr	r3, [r3, #0]
 8029ba6:	68fa      	ldr	r2, [r7, #12]
 8029ba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8029baa:	687b      	ldr	r3, [r7, #4]
 8029bac:	681b      	ldr	r3, [r3, #0]
 8029bae:	4a21      	ldr	r2, [pc, #132]	; (8029c34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8029bb0:	4293      	cmp	r3, r2
 8029bb2:	d022      	beq.n	8029bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029bb4:	687b      	ldr	r3, [r7, #4]
 8029bb6:	681b      	ldr	r3, [r3, #0]
 8029bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029bbc:	d01d      	beq.n	8029bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029bbe:	687b      	ldr	r3, [r7, #4]
 8029bc0:	681b      	ldr	r3, [r3, #0]
 8029bc2:	4a1d      	ldr	r2, [pc, #116]	; (8029c38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8029bc4:	4293      	cmp	r3, r2
 8029bc6:	d018      	beq.n	8029bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029bc8:	687b      	ldr	r3, [r7, #4]
 8029bca:	681b      	ldr	r3, [r3, #0]
 8029bcc:	4a1b      	ldr	r2, [pc, #108]	; (8029c3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8029bce:	4293      	cmp	r3, r2
 8029bd0:	d013      	beq.n	8029bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029bd2:	687b      	ldr	r3, [r7, #4]
 8029bd4:	681b      	ldr	r3, [r3, #0]
 8029bd6:	4a1a      	ldr	r2, [pc, #104]	; (8029c40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8029bd8:	4293      	cmp	r3, r2
 8029bda:	d00e      	beq.n	8029bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029bdc:	687b      	ldr	r3, [r7, #4]
 8029bde:	681b      	ldr	r3, [r3, #0]
 8029be0:	4a18      	ldr	r2, [pc, #96]	; (8029c44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8029be2:	4293      	cmp	r3, r2
 8029be4:	d009      	beq.n	8029bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029be6:	687b      	ldr	r3, [r7, #4]
 8029be8:	681b      	ldr	r3, [r3, #0]
 8029bea:	4a17      	ldr	r2, [pc, #92]	; (8029c48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8029bec:	4293      	cmp	r3, r2
 8029bee:	d004      	beq.n	8029bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029bf0:	687b      	ldr	r3, [r7, #4]
 8029bf2:	681b      	ldr	r3, [r3, #0]
 8029bf4:	4a15      	ldr	r2, [pc, #84]	; (8029c4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8029bf6:	4293      	cmp	r3, r2
 8029bf8:	d10c      	bne.n	8029c14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8029bfa:	68bb      	ldr	r3, [r7, #8]
 8029bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8029c00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8029c02:	683b      	ldr	r3, [r7, #0]
 8029c04:	685b      	ldr	r3, [r3, #4]
 8029c06:	68ba      	ldr	r2, [r7, #8]
 8029c08:	4313      	orrs	r3, r2
 8029c0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8029c0c:	687b      	ldr	r3, [r7, #4]
 8029c0e:	681b      	ldr	r3, [r3, #0]
 8029c10:	68ba      	ldr	r2, [r7, #8]
 8029c12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8029c14:	687b      	ldr	r3, [r7, #4]
 8029c16:	2201      	movs	r2, #1
 8029c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029c1c:	687b      	ldr	r3, [r7, #4]
 8029c1e:	2200      	movs	r2, #0
 8029c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029c24:	2300      	movs	r3, #0
}
 8029c26:	4618      	mov	r0, r3
 8029c28:	3714      	adds	r7, #20
 8029c2a:	46bd      	mov	sp, r7
 8029c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c30:	4770      	bx	lr
 8029c32:	bf00      	nop
 8029c34:	40010000 	.word	0x40010000
 8029c38:	40000400 	.word	0x40000400
 8029c3c:	40000800 	.word	0x40000800
 8029c40:	40000c00 	.word	0x40000c00
 8029c44:	40010400 	.word	0x40010400
 8029c48:	40014000 	.word	0x40014000
 8029c4c:	40001800 	.word	0x40001800

08029c50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8029c50:	b480      	push	{r7}
 8029c52:	b085      	sub	sp, #20
 8029c54:	af00      	add	r7, sp, #0
 8029c56:	6078      	str	r0, [r7, #4]
 8029c58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8029c5a:	2300      	movs	r3, #0
 8029c5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8029c5e:	687b      	ldr	r3, [r7, #4]
 8029c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029c64:	2b01      	cmp	r3, #1
 8029c66:	d101      	bne.n	8029c6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8029c68:	2302      	movs	r3, #2
 8029c6a:	e03d      	b.n	8029ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8029c6c:	687b      	ldr	r3, [r7, #4]
 8029c6e:	2201      	movs	r2, #1
 8029c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8029c74:	68fb      	ldr	r3, [r7, #12]
 8029c76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8029c7a:	683b      	ldr	r3, [r7, #0]
 8029c7c:	68db      	ldr	r3, [r3, #12]
 8029c7e:	4313      	orrs	r3, r2
 8029c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8029c82:	68fb      	ldr	r3, [r7, #12]
 8029c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8029c88:	683b      	ldr	r3, [r7, #0]
 8029c8a:	689b      	ldr	r3, [r3, #8]
 8029c8c:	4313      	orrs	r3, r2
 8029c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8029c90:	68fb      	ldr	r3, [r7, #12]
 8029c92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8029c96:	683b      	ldr	r3, [r7, #0]
 8029c98:	685b      	ldr	r3, [r3, #4]
 8029c9a:	4313      	orrs	r3, r2
 8029c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8029c9e:	68fb      	ldr	r3, [r7, #12]
 8029ca0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8029ca4:	683b      	ldr	r3, [r7, #0]
 8029ca6:	681b      	ldr	r3, [r3, #0]
 8029ca8:	4313      	orrs	r3, r2
 8029caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8029cac:	68fb      	ldr	r3, [r7, #12]
 8029cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8029cb2:	683b      	ldr	r3, [r7, #0]
 8029cb4:	691b      	ldr	r3, [r3, #16]
 8029cb6:	4313      	orrs	r3, r2
 8029cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8029cba:	68fb      	ldr	r3, [r7, #12]
 8029cbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8029cc0:	683b      	ldr	r3, [r7, #0]
 8029cc2:	695b      	ldr	r3, [r3, #20]
 8029cc4:	4313      	orrs	r3, r2
 8029cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8029cc8:	68fb      	ldr	r3, [r7, #12]
 8029cca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8029cce:	683b      	ldr	r3, [r7, #0]
 8029cd0:	69db      	ldr	r3, [r3, #28]
 8029cd2:	4313      	orrs	r3, r2
 8029cd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8029cd6:	687b      	ldr	r3, [r7, #4]
 8029cd8:	681b      	ldr	r3, [r3, #0]
 8029cda:	68fa      	ldr	r2, [r7, #12]
 8029cdc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8029cde:	687b      	ldr	r3, [r7, #4]
 8029ce0:	2200      	movs	r2, #0
 8029ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029ce6:	2300      	movs	r3, #0
}
 8029ce8:	4618      	mov	r0, r3
 8029cea:	3714      	adds	r7, #20
 8029cec:	46bd      	mov	sp, r7
 8029cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cf2:	4770      	bx	lr

08029cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8029cf4:	b480      	push	{r7}
 8029cf6:	b083      	sub	sp, #12
 8029cf8:	af00      	add	r7, sp, #0
 8029cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8029cfc:	bf00      	nop
 8029cfe:	370c      	adds	r7, #12
 8029d00:	46bd      	mov	sp, r7
 8029d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d06:	4770      	bx	lr

08029d08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8029d08:	b480      	push	{r7}
 8029d0a:	b083      	sub	sp, #12
 8029d0c:	af00      	add	r7, sp, #0
 8029d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8029d10:	bf00      	nop
 8029d12:	370c      	adds	r7, #12
 8029d14:	46bd      	mov	sp, r7
 8029d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d1a:	4770      	bx	lr

08029d1c <__NVIC_SetPriority>:
{
 8029d1c:	b480      	push	{r7}
 8029d1e:	b083      	sub	sp, #12
 8029d20:	af00      	add	r7, sp, #0
 8029d22:	4603      	mov	r3, r0
 8029d24:	6039      	str	r1, [r7, #0]
 8029d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8029d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029d2c:	2b00      	cmp	r3, #0
 8029d2e:	db0a      	blt.n	8029d46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8029d30:	683b      	ldr	r3, [r7, #0]
 8029d32:	b2da      	uxtb	r2, r3
 8029d34:	490c      	ldr	r1, [pc, #48]	; (8029d68 <__NVIC_SetPriority+0x4c>)
 8029d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029d3a:	0112      	lsls	r2, r2, #4
 8029d3c:	b2d2      	uxtb	r2, r2
 8029d3e:	440b      	add	r3, r1
 8029d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8029d44:	e00a      	b.n	8029d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8029d46:	683b      	ldr	r3, [r7, #0]
 8029d48:	b2da      	uxtb	r2, r3
 8029d4a:	4908      	ldr	r1, [pc, #32]	; (8029d6c <__NVIC_SetPriority+0x50>)
 8029d4c:	79fb      	ldrb	r3, [r7, #7]
 8029d4e:	f003 030f 	and.w	r3, r3, #15
 8029d52:	3b04      	subs	r3, #4
 8029d54:	0112      	lsls	r2, r2, #4
 8029d56:	b2d2      	uxtb	r2, r2
 8029d58:	440b      	add	r3, r1
 8029d5a:	761a      	strb	r2, [r3, #24]
}
 8029d5c:	bf00      	nop
 8029d5e:	370c      	adds	r7, #12
 8029d60:	46bd      	mov	sp, r7
 8029d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d66:	4770      	bx	lr
 8029d68:	e000e100 	.word	0xe000e100
 8029d6c:	e000ed00 	.word	0xe000ed00

08029d70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8029d70:	b580      	push	{r7, lr}
 8029d72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8029d74:	4b05      	ldr	r3, [pc, #20]	; (8029d8c <SysTick_Handler+0x1c>)
 8029d76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8029d78:	f002 f832 	bl	802bde0 <xTaskGetSchedulerState>
 8029d7c:	4603      	mov	r3, r0
 8029d7e:	2b01      	cmp	r3, #1
 8029d80:	d001      	beq.n	8029d86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8029d82:	f002 fe21 	bl	802c9c8 <xPortSysTickHandler>
  }
}
 8029d86:	bf00      	nop
 8029d88:	bd80      	pop	{r7, pc}
 8029d8a:	bf00      	nop
 8029d8c:	e000e010 	.word	0xe000e010

08029d90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8029d90:	b580      	push	{r7, lr}
 8029d92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8029d94:	2100      	movs	r1, #0
 8029d96:	f06f 0004 	mvn.w	r0, #4
 8029d9a:	f7ff ffbf 	bl	8029d1c <__NVIC_SetPriority>
#endif
}
 8029d9e:	bf00      	nop
 8029da0:	bd80      	pop	{r7, pc}
	...

08029da4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8029da4:	b480      	push	{r7}
 8029da6:	b083      	sub	sp, #12
 8029da8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8029daa:	f3ef 8305 	mrs	r3, IPSR
 8029dae:	603b      	str	r3, [r7, #0]
  return(result);
 8029db0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8029db2:	2b00      	cmp	r3, #0
 8029db4:	d003      	beq.n	8029dbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8029db6:	f06f 0305 	mvn.w	r3, #5
 8029dba:	607b      	str	r3, [r7, #4]
 8029dbc:	e00c      	b.n	8029dd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8029dbe:	4b0a      	ldr	r3, [pc, #40]	; (8029de8 <osKernelInitialize+0x44>)
 8029dc0:	681b      	ldr	r3, [r3, #0]
 8029dc2:	2b00      	cmp	r3, #0
 8029dc4:	d105      	bne.n	8029dd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8029dc6:	4b08      	ldr	r3, [pc, #32]	; (8029de8 <osKernelInitialize+0x44>)
 8029dc8:	2201      	movs	r2, #1
 8029dca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8029dcc:	2300      	movs	r3, #0
 8029dce:	607b      	str	r3, [r7, #4]
 8029dd0:	e002      	b.n	8029dd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8029dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8029dd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8029dd8:	687b      	ldr	r3, [r7, #4]
}
 8029dda:	4618      	mov	r0, r3
 8029ddc:	370c      	adds	r7, #12
 8029dde:	46bd      	mov	sp, r7
 8029de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029de4:	4770      	bx	lr
 8029de6:	bf00      	nop
 8029de8:	20001a40 	.word	0x20001a40

08029dec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8029dec:	b580      	push	{r7, lr}
 8029dee:	b082      	sub	sp, #8
 8029df0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8029df2:	f3ef 8305 	mrs	r3, IPSR
 8029df6:	603b      	str	r3, [r7, #0]
  return(result);
 8029df8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8029dfa:	2b00      	cmp	r3, #0
 8029dfc:	d003      	beq.n	8029e06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8029dfe:	f06f 0305 	mvn.w	r3, #5
 8029e02:	607b      	str	r3, [r7, #4]
 8029e04:	e010      	b.n	8029e28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8029e06:	4b0b      	ldr	r3, [pc, #44]	; (8029e34 <osKernelStart+0x48>)
 8029e08:	681b      	ldr	r3, [r3, #0]
 8029e0a:	2b01      	cmp	r3, #1
 8029e0c:	d109      	bne.n	8029e22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8029e0e:	f7ff ffbf 	bl	8029d90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8029e12:	4b08      	ldr	r3, [pc, #32]	; (8029e34 <osKernelStart+0x48>)
 8029e14:	2202      	movs	r2, #2
 8029e16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8029e18:	f001 fb08 	bl	802b42c <vTaskStartScheduler>
      stat = osOK;
 8029e1c:	2300      	movs	r3, #0
 8029e1e:	607b      	str	r3, [r7, #4]
 8029e20:	e002      	b.n	8029e28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8029e22:	f04f 33ff 	mov.w	r3, #4294967295
 8029e26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8029e28:	687b      	ldr	r3, [r7, #4]
}
 8029e2a:	4618      	mov	r0, r3
 8029e2c:	3708      	adds	r7, #8
 8029e2e:	46bd      	mov	sp, r7
 8029e30:	bd80      	pop	{r7, pc}
 8029e32:	bf00      	nop
 8029e34:	20001a40 	.word	0x20001a40

08029e38 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8029e38:	b580      	push	{r7, lr}
 8029e3a:	b082      	sub	sp, #8
 8029e3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8029e3e:	f3ef 8305 	mrs	r3, IPSR
 8029e42:	603b      	str	r3, [r7, #0]
  return(result);
 8029e44:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8029e46:	2b00      	cmp	r3, #0
 8029e48:	d003      	beq.n	8029e52 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8029e4a:	f001 fc31 	bl	802b6b0 <xTaskGetTickCountFromISR>
 8029e4e:	6078      	str	r0, [r7, #4]
 8029e50:	e002      	b.n	8029e58 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8029e52:	f001 fc1d 	bl	802b690 <xTaskGetTickCount>
 8029e56:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8029e58:	687b      	ldr	r3, [r7, #4]
}
 8029e5a:	4618      	mov	r0, r3
 8029e5c:	3708      	adds	r7, #8
 8029e5e:	46bd      	mov	sp, r7
 8029e60:	bd80      	pop	{r7, pc}

08029e62 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8029e62:	b580      	push	{r7, lr}
 8029e64:	b08e      	sub	sp, #56	; 0x38
 8029e66:	af04      	add	r7, sp, #16
 8029e68:	60f8      	str	r0, [r7, #12]
 8029e6a:	60b9      	str	r1, [r7, #8]
 8029e6c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8029e6e:	2300      	movs	r3, #0
 8029e70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8029e72:	f3ef 8305 	mrs	r3, IPSR
 8029e76:	617b      	str	r3, [r7, #20]
  return(result);
 8029e78:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8029e7a:	2b00      	cmp	r3, #0
 8029e7c:	d17e      	bne.n	8029f7c <osThreadNew+0x11a>
 8029e7e:	68fb      	ldr	r3, [r7, #12]
 8029e80:	2b00      	cmp	r3, #0
 8029e82:	d07b      	beq.n	8029f7c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8029e84:	2380      	movs	r3, #128	; 0x80
 8029e86:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8029e88:	2318      	movs	r3, #24
 8029e8a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8029e8c:	2300      	movs	r3, #0
 8029e8e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8029e90:	f04f 33ff 	mov.w	r3, #4294967295
 8029e94:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8029e96:	687b      	ldr	r3, [r7, #4]
 8029e98:	2b00      	cmp	r3, #0
 8029e9a:	d045      	beq.n	8029f28 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8029e9c:	687b      	ldr	r3, [r7, #4]
 8029e9e:	681b      	ldr	r3, [r3, #0]
 8029ea0:	2b00      	cmp	r3, #0
 8029ea2:	d002      	beq.n	8029eaa <osThreadNew+0x48>
        name = attr->name;
 8029ea4:	687b      	ldr	r3, [r7, #4]
 8029ea6:	681b      	ldr	r3, [r3, #0]
 8029ea8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8029eaa:	687b      	ldr	r3, [r7, #4]
 8029eac:	699b      	ldr	r3, [r3, #24]
 8029eae:	2b00      	cmp	r3, #0
 8029eb0:	d002      	beq.n	8029eb8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8029eb2:	687b      	ldr	r3, [r7, #4]
 8029eb4:	699b      	ldr	r3, [r3, #24]
 8029eb6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8029eb8:	69fb      	ldr	r3, [r7, #28]
 8029eba:	2b00      	cmp	r3, #0
 8029ebc:	d008      	beq.n	8029ed0 <osThreadNew+0x6e>
 8029ebe:	69fb      	ldr	r3, [r7, #28]
 8029ec0:	2b38      	cmp	r3, #56	; 0x38
 8029ec2:	d805      	bhi.n	8029ed0 <osThreadNew+0x6e>
 8029ec4:	687b      	ldr	r3, [r7, #4]
 8029ec6:	685b      	ldr	r3, [r3, #4]
 8029ec8:	f003 0301 	and.w	r3, r3, #1
 8029ecc:	2b00      	cmp	r3, #0
 8029ece:	d001      	beq.n	8029ed4 <osThreadNew+0x72>
        return (NULL);
 8029ed0:	2300      	movs	r3, #0
 8029ed2:	e054      	b.n	8029f7e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8029ed4:	687b      	ldr	r3, [r7, #4]
 8029ed6:	695b      	ldr	r3, [r3, #20]
 8029ed8:	2b00      	cmp	r3, #0
 8029eda:	d003      	beq.n	8029ee4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8029edc:	687b      	ldr	r3, [r7, #4]
 8029ede:	695b      	ldr	r3, [r3, #20]
 8029ee0:	089b      	lsrs	r3, r3, #2
 8029ee2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8029ee4:	687b      	ldr	r3, [r7, #4]
 8029ee6:	689b      	ldr	r3, [r3, #8]
 8029ee8:	2b00      	cmp	r3, #0
 8029eea:	d00e      	beq.n	8029f0a <osThreadNew+0xa8>
 8029eec:	687b      	ldr	r3, [r7, #4]
 8029eee:	68db      	ldr	r3, [r3, #12]
 8029ef0:	2bcb      	cmp	r3, #203	; 0xcb
 8029ef2:	d90a      	bls.n	8029f0a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8029ef4:	687b      	ldr	r3, [r7, #4]
 8029ef6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8029ef8:	2b00      	cmp	r3, #0
 8029efa:	d006      	beq.n	8029f0a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8029efc:	687b      	ldr	r3, [r7, #4]
 8029efe:	695b      	ldr	r3, [r3, #20]
 8029f00:	2b00      	cmp	r3, #0
 8029f02:	d002      	beq.n	8029f0a <osThreadNew+0xa8>
        mem = 1;
 8029f04:	2301      	movs	r3, #1
 8029f06:	61bb      	str	r3, [r7, #24]
 8029f08:	e010      	b.n	8029f2c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8029f0a:	687b      	ldr	r3, [r7, #4]
 8029f0c:	689b      	ldr	r3, [r3, #8]
 8029f0e:	2b00      	cmp	r3, #0
 8029f10:	d10c      	bne.n	8029f2c <osThreadNew+0xca>
 8029f12:	687b      	ldr	r3, [r7, #4]
 8029f14:	68db      	ldr	r3, [r3, #12]
 8029f16:	2b00      	cmp	r3, #0
 8029f18:	d108      	bne.n	8029f2c <osThreadNew+0xca>
 8029f1a:	687b      	ldr	r3, [r7, #4]
 8029f1c:	691b      	ldr	r3, [r3, #16]
 8029f1e:	2b00      	cmp	r3, #0
 8029f20:	d104      	bne.n	8029f2c <osThreadNew+0xca>
          mem = 0;
 8029f22:	2300      	movs	r3, #0
 8029f24:	61bb      	str	r3, [r7, #24]
 8029f26:	e001      	b.n	8029f2c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8029f28:	2300      	movs	r3, #0
 8029f2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8029f2c:	69bb      	ldr	r3, [r7, #24]
 8029f2e:	2b01      	cmp	r3, #1
 8029f30:	d110      	bne.n	8029f54 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8029f32:	687b      	ldr	r3, [r7, #4]
 8029f34:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8029f36:	687a      	ldr	r2, [r7, #4]
 8029f38:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8029f3a:	9202      	str	r2, [sp, #8]
 8029f3c:	9301      	str	r3, [sp, #4]
 8029f3e:	69fb      	ldr	r3, [r7, #28]
 8029f40:	9300      	str	r3, [sp, #0]
 8029f42:	68bb      	ldr	r3, [r7, #8]
 8029f44:	6a3a      	ldr	r2, [r7, #32]
 8029f46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8029f48:	68f8      	ldr	r0, [r7, #12]
 8029f4a:	f000 ffe1 	bl	802af10 <xTaskCreateStatic>
 8029f4e:	4603      	mov	r3, r0
 8029f50:	613b      	str	r3, [r7, #16]
 8029f52:	e013      	b.n	8029f7c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8029f54:	69bb      	ldr	r3, [r7, #24]
 8029f56:	2b00      	cmp	r3, #0
 8029f58:	d110      	bne.n	8029f7c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8029f5a:	6a3b      	ldr	r3, [r7, #32]
 8029f5c:	b29a      	uxth	r2, r3
 8029f5e:	f107 0310 	add.w	r3, r7, #16
 8029f62:	9301      	str	r3, [sp, #4]
 8029f64:	69fb      	ldr	r3, [r7, #28]
 8029f66:	9300      	str	r3, [sp, #0]
 8029f68:	68bb      	ldr	r3, [r7, #8]
 8029f6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8029f6c:	68f8      	ldr	r0, [r7, #12]
 8029f6e:	f001 f82c 	bl	802afca <xTaskCreate>
 8029f72:	4603      	mov	r3, r0
 8029f74:	2b01      	cmp	r3, #1
 8029f76:	d001      	beq.n	8029f7c <osThreadNew+0x11a>
            hTask = NULL;
 8029f78:	2300      	movs	r3, #0
 8029f7a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8029f7c:	693b      	ldr	r3, [r7, #16]
}
 8029f7e:	4618      	mov	r0, r3
 8029f80:	3728      	adds	r7, #40	; 0x28
 8029f82:	46bd      	mov	sp, r7
 8029f84:	bd80      	pop	{r7, pc}

08029f86 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8029f86:	b580      	push	{r7, lr}
 8029f88:	b084      	sub	sp, #16
 8029f8a:	af00      	add	r7, sp, #0
 8029f8c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8029f8e:	f3ef 8305 	mrs	r3, IPSR
 8029f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8029f94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8029f96:	2b00      	cmp	r3, #0
 8029f98:	d003      	beq.n	8029fa2 <osDelay+0x1c>
    stat = osErrorISR;
 8029f9a:	f06f 0305 	mvn.w	r3, #5
 8029f9e:	60fb      	str	r3, [r7, #12]
 8029fa0:	e007      	b.n	8029fb2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8029fa2:	2300      	movs	r3, #0
 8029fa4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8029fa6:	687b      	ldr	r3, [r7, #4]
 8029fa8:	2b00      	cmp	r3, #0
 8029faa:	d002      	beq.n	8029fb2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8029fac:	6878      	ldr	r0, [r7, #4]
 8029fae:	f001 fa05 	bl	802b3bc <vTaskDelay>
    }
  }

  return (stat);
 8029fb2:	68fb      	ldr	r3, [r7, #12]
}
 8029fb4:	4618      	mov	r0, r3
 8029fb6:	3710      	adds	r7, #16
 8029fb8:	46bd      	mov	sp, r7
 8029fba:	bd80      	pop	{r7, pc}

08029fbc <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8029fbc:	b580      	push	{r7, lr}
 8029fbe:	b086      	sub	sp, #24
 8029fc0:	af00      	add	r7, sp, #0
 8029fc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8029fc4:	f3ef 8305 	mrs	r3, IPSR
 8029fc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8029fca:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8029fcc:	2b00      	cmp	r3, #0
 8029fce:	d003      	beq.n	8029fd8 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8029fd0:	f06f 0305 	mvn.w	r3, #5
 8029fd4:	617b      	str	r3, [r7, #20]
 8029fd6:	e019      	b.n	802a00c <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8029fd8:	2300      	movs	r3, #0
 8029fda:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8029fdc:	f001 fb58 	bl	802b690 <xTaskGetTickCount>
 8029fe0:	4603      	mov	r3, r0
 8029fe2:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8029fe4:	68bb      	ldr	r3, [r7, #8]
 8029fe6:	687a      	ldr	r2, [r7, #4]
 8029fe8:	1ad3      	subs	r3, r2, r3
 8029fea:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8029fec:	693b      	ldr	r3, [r7, #16]
 8029fee:	2b00      	cmp	r3, #0
 8029ff0:	d009      	beq.n	802a006 <osDelayUntil+0x4a>
 8029ff2:	693b      	ldr	r3, [r7, #16]
 8029ff4:	2b00      	cmp	r3, #0
 8029ff6:	db06      	blt.n	802a006 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8029ff8:	f107 0308 	add.w	r3, r7, #8
 8029ffc:	6939      	ldr	r1, [r7, #16]
 8029ffe:	4618      	mov	r0, r3
 802a000:	f001 f95c 	bl	802b2bc <vTaskDelayUntil>
 802a004:	e002      	b.n	802a00c <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 802a006:	f06f 0303 	mvn.w	r3, #3
 802a00a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 802a00c:	697b      	ldr	r3, [r7, #20]
}
 802a00e:	4618      	mov	r0, r3
 802a010:	3718      	adds	r7, #24
 802a012:	46bd      	mov	sp, r7
 802a014:	bd80      	pop	{r7, pc}
	...

0802a018 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 802a018:	b480      	push	{r7}
 802a01a:	b085      	sub	sp, #20
 802a01c:	af00      	add	r7, sp, #0
 802a01e:	60f8      	str	r0, [r7, #12]
 802a020:	60b9      	str	r1, [r7, #8]
 802a022:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 802a024:	68fb      	ldr	r3, [r7, #12]
 802a026:	4a07      	ldr	r2, [pc, #28]	; (802a044 <vApplicationGetIdleTaskMemory+0x2c>)
 802a028:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 802a02a:	68bb      	ldr	r3, [r7, #8]
 802a02c:	4a06      	ldr	r2, [pc, #24]	; (802a048 <vApplicationGetIdleTaskMemory+0x30>)
 802a02e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 802a030:	687b      	ldr	r3, [r7, #4]
 802a032:	2280      	movs	r2, #128	; 0x80
 802a034:	601a      	str	r2, [r3, #0]
}
 802a036:	bf00      	nop
 802a038:	3714      	adds	r7, #20
 802a03a:	46bd      	mov	sp, r7
 802a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a040:	4770      	bx	lr
 802a042:	bf00      	nop
 802a044:	20001a44 	.word	0x20001a44
 802a048:	20001b10 	.word	0x20001b10

0802a04c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 802a04c:	b480      	push	{r7}
 802a04e:	b085      	sub	sp, #20
 802a050:	af00      	add	r7, sp, #0
 802a052:	60f8      	str	r0, [r7, #12]
 802a054:	60b9      	str	r1, [r7, #8]
 802a056:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 802a058:	68fb      	ldr	r3, [r7, #12]
 802a05a:	4a07      	ldr	r2, [pc, #28]	; (802a078 <vApplicationGetTimerTaskMemory+0x2c>)
 802a05c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 802a05e:	68bb      	ldr	r3, [r7, #8]
 802a060:	4a06      	ldr	r2, [pc, #24]	; (802a07c <vApplicationGetTimerTaskMemory+0x30>)
 802a062:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 802a064:	687b      	ldr	r3, [r7, #4]
 802a066:	f44f 7280 	mov.w	r2, #256	; 0x100
 802a06a:	601a      	str	r2, [r3, #0]
}
 802a06c:	bf00      	nop
 802a06e:	3714      	adds	r7, #20
 802a070:	46bd      	mov	sp, r7
 802a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a076:	4770      	bx	lr
 802a078:	20001d10 	.word	0x20001d10
 802a07c:	20001ddc 	.word	0x20001ddc

0802a080 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 802a080:	b480      	push	{r7}
 802a082:	b083      	sub	sp, #12
 802a084:	af00      	add	r7, sp, #0
 802a086:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802a088:	687b      	ldr	r3, [r7, #4]
 802a08a:	f103 0208 	add.w	r2, r3, #8
 802a08e:	687b      	ldr	r3, [r7, #4]
 802a090:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 802a092:	687b      	ldr	r3, [r7, #4]
 802a094:	f04f 32ff 	mov.w	r2, #4294967295
 802a098:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802a09a:	687b      	ldr	r3, [r7, #4]
 802a09c:	f103 0208 	add.w	r2, r3, #8
 802a0a0:	687b      	ldr	r3, [r7, #4]
 802a0a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802a0a4:	687b      	ldr	r3, [r7, #4]
 802a0a6:	f103 0208 	add.w	r2, r3, #8
 802a0aa:	687b      	ldr	r3, [r7, #4]
 802a0ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 802a0ae:	687b      	ldr	r3, [r7, #4]
 802a0b0:	2200      	movs	r2, #0
 802a0b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 802a0b4:	bf00      	nop
 802a0b6:	370c      	adds	r7, #12
 802a0b8:	46bd      	mov	sp, r7
 802a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0be:	4770      	bx	lr

0802a0c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 802a0c0:	b480      	push	{r7}
 802a0c2:	b083      	sub	sp, #12
 802a0c4:	af00      	add	r7, sp, #0
 802a0c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 802a0c8:	687b      	ldr	r3, [r7, #4]
 802a0ca:	2200      	movs	r2, #0
 802a0cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 802a0ce:	bf00      	nop
 802a0d0:	370c      	adds	r7, #12
 802a0d2:	46bd      	mov	sp, r7
 802a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0d8:	4770      	bx	lr

0802a0da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802a0da:	b480      	push	{r7}
 802a0dc:	b085      	sub	sp, #20
 802a0de:	af00      	add	r7, sp, #0
 802a0e0:	6078      	str	r0, [r7, #4]
 802a0e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 802a0e4:	687b      	ldr	r3, [r7, #4]
 802a0e6:	685b      	ldr	r3, [r3, #4]
 802a0e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 802a0ea:	683b      	ldr	r3, [r7, #0]
 802a0ec:	68fa      	ldr	r2, [r7, #12]
 802a0ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 802a0f0:	68fb      	ldr	r3, [r7, #12]
 802a0f2:	689a      	ldr	r2, [r3, #8]
 802a0f4:	683b      	ldr	r3, [r7, #0]
 802a0f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 802a0f8:	68fb      	ldr	r3, [r7, #12]
 802a0fa:	689b      	ldr	r3, [r3, #8]
 802a0fc:	683a      	ldr	r2, [r7, #0]
 802a0fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 802a100:	68fb      	ldr	r3, [r7, #12]
 802a102:	683a      	ldr	r2, [r7, #0]
 802a104:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 802a106:	683b      	ldr	r3, [r7, #0]
 802a108:	687a      	ldr	r2, [r7, #4]
 802a10a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 802a10c:	687b      	ldr	r3, [r7, #4]
 802a10e:	681b      	ldr	r3, [r3, #0]
 802a110:	1c5a      	adds	r2, r3, #1
 802a112:	687b      	ldr	r3, [r7, #4]
 802a114:	601a      	str	r2, [r3, #0]
}
 802a116:	bf00      	nop
 802a118:	3714      	adds	r7, #20
 802a11a:	46bd      	mov	sp, r7
 802a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a120:	4770      	bx	lr

0802a122 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802a122:	b480      	push	{r7}
 802a124:	b085      	sub	sp, #20
 802a126:	af00      	add	r7, sp, #0
 802a128:	6078      	str	r0, [r7, #4]
 802a12a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 802a12c:	683b      	ldr	r3, [r7, #0]
 802a12e:	681b      	ldr	r3, [r3, #0]
 802a130:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 802a132:	68bb      	ldr	r3, [r7, #8]
 802a134:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a138:	d103      	bne.n	802a142 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 802a13a:	687b      	ldr	r3, [r7, #4]
 802a13c:	691b      	ldr	r3, [r3, #16]
 802a13e:	60fb      	str	r3, [r7, #12]
 802a140:	e00c      	b.n	802a15c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 802a142:	687b      	ldr	r3, [r7, #4]
 802a144:	3308      	adds	r3, #8
 802a146:	60fb      	str	r3, [r7, #12]
 802a148:	e002      	b.n	802a150 <vListInsert+0x2e>
 802a14a:	68fb      	ldr	r3, [r7, #12]
 802a14c:	685b      	ldr	r3, [r3, #4]
 802a14e:	60fb      	str	r3, [r7, #12]
 802a150:	68fb      	ldr	r3, [r7, #12]
 802a152:	685b      	ldr	r3, [r3, #4]
 802a154:	681b      	ldr	r3, [r3, #0]
 802a156:	68ba      	ldr	r2, [r7, #8]
 802a158:	429a      	cmp	r2, r3
 802a15a:	d2f6      	bcs.n	802a14a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 802a15c:	68fb      	ldr	r3, [r7, #12]
 802a15e:	685a      	ldr	r2, [r3, #4]
 802a160:	683b      	ldr	r3, [r7, #0]
 802a162:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 802a164:	683b      	ldr	r3, [r7, #0]
 802a166:	685b      	ldr	r3, [r3, #4]
 802a168:	683a      	ldr	r2, [r7, #0]
 802a16a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 802a16c:	683b      	ldr	r3, [r7, #0]
 802a16e:	68fa      	ldr	r2, [r7, #12]
 802a170:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 802a172:	68fb      	ldr	r3, [r7, #12]
 802a174:	683a      	ldr	r2, [r7, #0]
 802a176:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 802a178:	683b      	ldr	r3, [r7, #0]
 802a17a:	687a      	ldr	r2, [r7, #4]
 802a17c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 802a17e:	687b      	ldr	r3, [r7, #4]
 802a180:	681b      	ldr	r3, [r3, #0]
 802a182:	1c5a      	adds	r2, r3, #1
 802a184:	687b      	ldr	r3, [r7, #4]
 802a186:	601a      	str	r2, [r3, #0]
}
 802a188:	bf00      	nop
 802a18a:	3714      	adds	r7, #20
 802a18c:	46bd      	mov	sp, r7
 802a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a192:	4770      	bx	lr

0802a194 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 802a194:	b480      	push	{r7}
 802a196:	b085      	sub	sp, #20
 802a198:	af00      	add	r7, sp, #0
 802a19a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 802a19c:	687b      	ldr	r3, [r7, #4]
 802a19e:	691b      	ldr	r3, [r3, #16]
 802a1a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 802a1a2:	687b      	ldr	r3, [r7, #4]
 802a1a4:	685b      	ldr	r3, [r3, #4]
 802a1a6:	687a      	ldr	r2, [r7, #4]
 802a1a8:	6892      	ldr	r2, [r2, #8]
 802a1aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 802a1ac:	687b      	ldr	r3, [r7, #4]
 802a1ae:	689b      	ldr	r3, [r3, #8]
 802a1b0:	687a      	ldr	r2, [r7, #4]
 802a1b2:	6852      	ldr	r2, [r2, #4]
 802a1b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 802a1b6:	68fb      	ldr	r3, [r7, #12]
 802a1b8:	685b      	ldr	r3, [r3, #4]
 802a1ba:	687a      	ldr	r2, [r7, #4]
 802a1bc:	429a      	cmp	r2, r3
 802a1be:	d103      	bne.n	802a1c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 802a1c0:	687b      	ldr	r3, [r7, #4]
 802a1c2:	689a      	ldr	r2, [r3, #8]
 802a1c4:	68fb      	ldr	r3, [r7, #12]
 802a1c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 802a1c8:	687b      	ldr	r3, [r7, #4]
 802a1ca:	2200      	movs	r2, #0
 802a1cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 802a1ce:	68fb      	ldr	r3, [r7, #12]
 802a1d0:	681b      	ldr	r3, [r3, #0]
 802a1d2:	1e5a      	subs	r2, r3, #1
 802a1d4:	68fb      	ldr	r3, [r7, #12]
 802a1d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 802a1d8:	68fb      	ldr	r3, [r7, #12]
 802a1da:	681b      	ldr	r3, [r3, #0]
}
 802a1dc:	4618      	mov	r0, r3
 802a1de:	3714      	adds	r7, #20
 802a1e0:	46bd      	mov	sp, r7
 802a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1e6:	4770      	bx	lr

0802a1e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 802a1e8:	b580      	push	{r7, lr}
 802a1ea:	b084      	sub	sp, #16
 802a1ec:	af00      	add	r7, sp, #0
 802a1ee:	6078      	str	r0, [r7, #4]
 802a1f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 802a1f2:	687b      	ldr	r3, [r7, #4]
 802a1f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 802a1f6:	68fb      	ldr	r3, [r7, #12]
 802a1f8:	2b00      	cmp	r3, #0
 802a1fa:	d10a      	bne.n	802a212 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 802a1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a200:	f383 8811 	msr	BASEPRI, r3
 802a204:	f3bf 8f6f 	isb	sy
 802a208:	f3bf 8f4f 	dsb	sy
 802a20c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 802a20e:	bf00      	nop
 802a210:	e7fe      	b.n	802a210 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 802a212:	f002 fb47 	bl	802c8a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802a216:	68fb      	ldr	r3, [r7, #12]
 802a218:	681a      	ldr	r2, [r3, #0]
 802a21a:	68fb      	ldr	r3, [r7, #12]
 802a21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a21e:	68f9      	ldr	r1, [r7, #12]
 802a220:	6c09      	ldr	r1, [r1, #64]	; 0x40
 802a222:	fb01 f303 	mul.w	r3, r1, r3
 802a226:	441a      	add	r2, r3
 802a228:	68fb      	ldr	r3, [r7, #12]
 802a22a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 802a22c:	68fb      	ldr	r3, [r7, #12]
 802a22e:	2200      	movs	r2, #0
 802a230:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 802a232:	68fb      	ldr	r3, [r7, #12]
 802a234:	681a      	ldr	r2, [r3, #0]
 802a236:	68fb      	ldr	r3, [r7, #12]
 802a238:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802a23a:	68fb      	ldr	r3, [r7, #12]
 802a23c:	681a      	ldr	r2, [r3, #0]
 802a23e:	68fb      	ldr	r3, [r7, #12]
 802a240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a242:	3b01      	subs	r3, #1
 802a244:	68f9      	ldr	r1, [r7, #12]
 802a246:	6c09      	ldr	r1, [r1, #64]	; 0x40
 802a248:	fb01 f303 	mul.w	r3, r1, r3
 802a24c:	441a      	add	r2, r3
 802a24e:	68fb      	ldr	r3, [r7, #12]
 802a250:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 802a252:	68fb      	ldr	r3, [r7, #12]
 802a254:	22ff      	movs	r2, #255	; 0xff
 802a256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 802a25a:	68fb      	ldr	r3, [r7, #12]
 802a25c:	22ff      	movs	r2, #255	; 0xff
 802a25e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 802a262:	683b      	ldr	r3, [r7, #0]
 802a264:	2b00      	cmp	r3, #0
 802a266:	d114      	bne.n	802a292 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802a268:	68fb      	ldr	r3, [r7, #12]
 802a26a:	691b      	ldr	r3, [r3, #16]
 802a26c:	2b00      	cmp	r3, #0
 802a26e:	d01a      	beq.n	802a2a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802a270:	68fb      	ldr	r3, [r7, #12]
 802a272:	3310      	adds	r3, #16
 802a274:	4618      	mov	r0, r3
 802a276:	f001 fbb5 	bl	802b9e4 <xTaskRemoveFromEventList>
 802a27a:	4603      	mov	r3, r0
 802a27c:	2b00      	cmp	r3, #0
 802a27e:	d012      	beq.n	802a2a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 802a280:	4b0c      	ldr	r3, [pc, #48]	; (802a2b4 <xQueueGenericReset+0xcc>)
 802a282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a286:	601a      	str	r2, [r3, #0]
 802a288:	f3bf 8f4f 	dsb	sy
 802a28c:	f3bf 8f6f 	isb	sy
 802a290:	e009      	b.n	802a2a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 802a292:	68fb      	ldr	r3, [r7, #12]
 802a294:	3310      	adds	r3, #16
 802a296:	4618      	mov	r0, r3
 802a298:	f7ff fef2 	bl	802a080 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 802a29c:	68fb      	ldr	r3, [r7, #12]
 802a29e:	3324      	adds	r3, #36	; 0x24
 802a2a0:	4618      	mov	r0, r3
 802a2a2:	f7ff feed 	bl	802a080 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 802a2a6:	f002 fb2d 	bl	802c904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 802a2aa:	2301      	movs	r3, #1
}
 802a2ac:	4618      	mov	r0, r3
 802a2ae:	3710      	adds	r7, #16
 802a2b0:	46bd      	mov	sp, r7
 802a2b2:	bd80      	pop	{r7, pc}
 802a2b4:	e000ed04 	.word	0xe000ed04

0802a2b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 802a2b8:	b580      	push	{r7, lr}
 802a2ba:	b08e      	sub	sp, #56	; 0x38
 802a2bc:	af02      	add	r7, sp, #8
 802a2be:	60f8      	str	r0, [r7, #12]
 802a2c0:	60b9      	str	r1, [r7, #8]
 802a2c2:	607a      	str	r2, [r7, #4]
 802a2c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802a2c6:	68fb      	ldr	r3, [r7, #12]
 802a2c8:	2b00      	cmp	r3, #0
 802a2ca:	d10a      	bne.n	802a2e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 802a2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a2d0:	f383 8811 	msr	BASEPRI, r3
 802a2d4:	f3bf 8f6f 	isb	sy
 802a2d8:	f3bf 8f4f 	dsb	sy
 802a2dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802a2de:	bf00      	nop
 802a2e0:	e7fe      	b.n	802a2e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 802a2e2:	683b      	ldr	r3, [r7, #0]
 802a2e4:	2b00      	cmp	r3, #0
 802a2e6:	d10a      	bne.n	802a2fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 802a2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a2ec:	f383 8811 	msr	BASEPRI, r3
 802a2f0:	f3bf 8f6f 	isb	sy
 802a2f4:	f3bf 8f4f 	dsb	sy
 802a2f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 802a2fa:	bf00      	nop
 802a2fc:	e7fe      	b.n	802a2fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 802a2fe:	687b      	ldr	r3, [r7, #4]
 802a300:	2b00      	cmp	r3, #0
 802a302:	d002      	beq.n	802a30a <xQueueGenericCreateStatic+0x52>
 802a304:	68bb      	ldr	r3, [r7, #8]
 802a306:	2b00      	cmp	r3, #0
 802a308:	d001      	beq.n	802a30e <xQueueGenericCreateStatic+0x56>
 802a30a:	2301      	movs	r3, #1
 802a30c:	e000      	b.n	802a310 <xQueueGenericCreateStatic+0x58>
 802a30e:	2300      	movs	r3, #0
 802a310:	2b00      	cmp	r3, #0
 802a312:	d10a      	bne.n	802a32a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 802a314:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a318:	f383 8811 	msr	BASEPRI, r3
 802a31c:	f3bf 8f6f 	isb	sy
 802a320:	f3bf 8f4f 	dsb	sy
 802a324:	623b      	str	r3, [r7, #32]
}
 802a326:	bf00      	nop
 802a328:	e7fe      	b.n	802a328 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 802a32a:	687b      	ldr	r3, [r7, #4]
 802a32c:	2b00      	cmp	r3, #0
 802a32e:	d102      	bne.n	802a336 <xQueueGenericCreateStatic+0x7e>
 802a330:	68bb      	ldr	r3, [r7, #8]
 802a332:	2b00      	cmp	r3, #0
 802a334:	d101      	bne.n	802a33a <xQueueGenericCreateStatic+0x82>
 802a336:	2301      	movs	r3, #1
 802a338:	e000      	b.n	802a33c <xQueueGenericCreateStatic+0x84>
 802a33a:	2300      	movs	r3, #0
 802a33c:	2b00      	cmp	r3, #0
 802a33e:	d10a      	bne.n	802a356 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 802a340:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a344:	f383 8811 	msr	BASEPRI, r3
 802a348:	f3bf 8f6f 	isb	sy
 802a34c:	f3bf 8f4f 	dsb	sy
 802a350:	61fb      	str	r3, [r7, #28]
}
 802a352:	bf00      	nop
 802a354:	e7fe      	b.n	802a354 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 802a356:	2350      	movs	r3, #80	; 0x50
 802a358:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 802a35a:	697b      	ldr	r3, [r7, #20]
 802a35c:	2b50      	cmp	r3, #80	; 0x50
 802a35e:	d00a      	beq.n	802a376 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 802a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a364:	f383 8811 	msr	BASEPRI, r3
 802a368:	f3bf 8f6f 	isb	sy
 802a36c:	f3bf 8f4f 	dsb	sy
 802a370:	61bb      	str	r3, [r7, #24]
}
 802a372:	bf00      	nop
 802a374:	e7fe      	b.n	802a374 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 802a376:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 802a378:	683b      	ldr	r3, [r7, #0]
 802a37a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 802a37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a37e:	2b00      	cmp	r3, #0
 802a380:	d00d      	beq.n	802a39e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 802a382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a384:	2201      	movs	r2, #1
 802a386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 802a38a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 802a38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a390:	9300      	str	r3, [sp, #0]
 802a392:	4613      	mov	r3, r2
 802a394:	687a      	ldr	r2, [r7, #4]
 802a396:	68b9      	ldr	r1, [r7, #8]
 802a398:	68f8      	ldr	r0, [r7, #12]
 802a39a:	f000 f83f 	bl	802a41c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 802a39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 802a3a0:	4618      	mov	r0, r3
 802a3a2:	3730      	adds	r7, #48	; 0x30
 802a3a4:	46bd      	mov	sp, r7
 802a3a6:	bd80      	pop	{r7, pc}

0802a3a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 802a3a8:	b580      	push	{r7, lr}
 802a3aa:	b08a      	sub	sp, #40	; 0x28
 802a3ac:	af02      	add	r7, sp, #8
 802a3ae:	60f8      	str	r0, [r7, #12]
 802a3b0:	60b9      	str	r1, [r7, #8]
 802a3b2:	4613      	mov	r3, r2
 802a3b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802a3b6:	68fb      	ldr	r3, [r7, #12]
 802a3b8:	2b00      	cmp	r3, #0
 802a3ba:	d10a      	bne.n	802a3d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 802a3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a3c0:	f383 8811 	msr	BASEPRI, r3
 802a3c4:	f3bf 8f6f 	isb	sy
 802a3c8:	f3bf 8f4f 	dsb	sy
 802a3cc:	613b      	str	r3, [r7, #16]
}
 802a3ce:	bf00      	nop
 802a3d0:	e7fe      	b.n	802a3d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802a3d2:	68fb      	ldr	r3, [r7, #12]
 802a3d4:	68ba      	ldr	r2, [r7, #8]
 802a3d6:	fb02 f303 	mul.w	r3, r2, r3
 802a3da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 802a3dc:	69fb      	ldr	r3, [r7, #28]
 802a3de:	3350      	adds	r3, #80	; 0x50
 802a3e0:	4618      	mov	r0, r3
 802a3e2:	f002 fb81 	bl	802cae8 <pvPortMalloc>
 802a3e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 802a3e8:	69bb      	ldr	r3, [r7, #24]
 802a3ea:	2b00      	cmp	r3, #0
 802a3ec:	d011      	beq.n	802a412 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 802a3ee:	69bb      	ldr	r3, [r7, #24]
 802a3f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802a3f2:	697b      	ldr	r3, [r7, #20]
 802a3f4:	3350      	adds	r3, #80	; 0x50
 802a3f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 802a3f8:	69bb      	ldr	r3, [r7, #24]
 802a3fa:	2200      	movs	r2, #0
 802a3fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 802a400:	79fa      	ldrb	r2, [r7, #7]
 802a402:	69bb      	ldr	r3, [r7, #24]
 802a404:	9300      	str	r3, [sp, #0]
 802a406:	4613      	mov	r3, r2
 802a408:	697a      	ldr	r2, [r7, #20]
 802a40a:	68b9      	ldr	r1, [r7, #8]
 802a40c:	68f8      	ldr	r0, [r7, #12]
 802a40e:	f000 f805 	bl	802a41c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 802a412:	69bb      	ldr	r3, [r7, #24]
	}
 802a414:	4618      	mov	r0, r3
 802a416:	3720      	adds	r7, #32
 802a418:	46bd      	mov	sp, r7
 802a41a:	bd80      	pop	{r7, pc}

0802a41c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 802a41c:	b580      	push	{r7, lr}
 802a41e:	b084      	sub	sp, #16
 802a420:	af00      	add	r7, sp, #0
 802a422:	60f8      	str	r0, [r7, #12]
 802a424:	60b9      	str	r1, [r7, #8]
 802a426:	607a      	str	r2, [r7, #4]
 802a428:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 802a42a:	68bb      	ldr	r3, [r7, #8]
 802a42c:	2b00      	cmp	r3, #0
 802a42e:	d103      	bne.n	802a438 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 802a430:	69bb      	ldr	r3, [r7, #24]
 802a432:	69ba      	ldr	r2, [r7, #24]
 802a434:	601a      	str	r2, [r3, #0]
 802a436:	e002      	b.n	802a43e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 802a438:	69bb      	ldr	r3, [r7, #24]
 802a43a:	687a      	ldr	r2, [r7, #4]
 802a43c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 802a43e:	69bb      	ldr	r3, [r7, #24]
 802a440:	68fa      	ldr	r2, [r7, #12]
 802a442:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 802a444:	69bb      	ldr	r3, [r7, #24]
 802a446:	68ba      	ldr	r2, [r7, #8]
 802a448:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 802a44a:	2101      	movs	r1, #1
 802a44c:	69b8      	ldr	r0, [r7, #24]
 802a44e:	f7ff fecb 	bl	802a1e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 802a452:	69bb      	ldr	r3, [r7, #24]
 802a454:	78fa      	ldrb	r2, [r7, #3]
 802a456:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 802a45a:	78fb      	ldrb	r3, [r7, #3]
 802a45c:	68ba      	ldr	r2, [r7, #8]
 802a45e:	68f9      	ldr	r1, [r7, #12]
 802a460:	2073      	movs	r0, #115	; 0x73
 802a462:	f003 fac9 	bl	802d9f8 <SEGGER_SYSVIEW_RecordU32x3>
}
 802a466:	bf00      	nop
 802a468:	3710      	adds	r7, #16
 802a46a:	46bd      	mov	sp, r7
 802a46c:	bd80      	pop	{r7, pc}
	...

0802a470 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 802a470:	b580      	push	{r7, lr}
 802a472:	b090      	sub	sp, #64	; 0x40
 802a474:	af02      	add	r7, sp, #8
 802a476:	60f8      	str	r0, [r7, #12]
 802a478:	60b9      	str	r1, [r7, #8]
 802a47a:	607a      	str	r2, [r7, #4]
 802a47c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 802a47e:	2300      	movs	r3, #0
 802a480:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 802a482:	68fb      	ldr	r3, [r7, #12]
 802a484:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 802a486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a488:	2b00      	cmp	r3, #0
 802a48a:	d10a      	bne.n	802a4a2 <xQueueGenericSend+0x32>
	__asm volatile
 802a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a490:	f383 8811 	msr	BASEPRI, r3
 802a494:	f3bf 8f6f 	isb	sy
 802a498:	f3bf 8f4f 	dsb	sy
 802a49c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802a49e:	bf00      	nop
 802a4a0:	e7fe      	b.n	802a4a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802a4a2:	68bb      	ldr	r3, [r7, #8]
 802a4a4:	2b00      	cmp	r3, #0
 802a4a6:	d103      	bne.n	802a4b0 <xQueueGenericSend+0x40>
 802a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a4ac:	2b00      	cmp	r3, #0
 802a4ae:	d101      	bne.n	802a4b4 <xQueueGenericSend+0x44>
 802a4b0:	2301      	movs	r3, #1
 802a4b2:	e000      	b.n	802a4b6 <xQueueGenericSend+0x46>
 802a4b4:	2300      	movs	r3, #0
 802a4b6:	2b00      	cmp	r3, #0
 802a4b8:	d10a      	bne.n	802a4d0 <xQueueGenericSend+0x60>
	__asm volatile
 802a4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a4be:	f383 8811 	msr	BASEPRI, r3
 802a4c2:	f3bf 8f6f 	isb	sy
 802a4c6:	f3bf 8f4f 	dsb	sy
 802a4ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 802a4cc:	bf00      	nop
 802a4ce:	e7fe      	b.n	802a4ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 802a4d0:	683b      	ldr	r3, [r7, #0]
 802a4d2:	2b02      	cmp	r3, #2
 802a4d4:	d103      	bne.n	802a4de <xQueueGenericSend+0x6e>
 802a4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a4da:	2b01      	cmp	r3, #1
 802a4dc:	d101      	bne.n	802a4e2 <xQueueGenericSend+0x72>
 802a4de:	2301      	movs	r3, #1
 802a4e0:	e000      	b.n	802a4e4 <xQueueGenericSend+0x74>
 802a4e2:	2300      	movs	r3, #0
 802a4e4:	2b00      	cmp	r3, #0
 802a4e6:	d10a      	bne.n	802a4fe <xQueueGenericSend+0x8e>
	__asm volatile
 802a4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a4ec:	f383 8811 	msr	BASEPRI, r3
 802a4f0:	f3bf 8f6f 	isb	sy
 802a4f4:	f3bf 8f4f 	dsb	sy
 802a4f8:	623b      	str	r3, [r7, #32]
}
 802a4fa:	bf00      	nop
 802a4fc:	e7fe      	b.n	802a4fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802a4fe:	f001 fc6f 	bl	802bde0 <xTaskGetSchedulerState>
 802a502:	4603      	mov	r3, r0
 802a504:	2b00      	cmp	r3, #0
 802a506:	d102      	bne.n	802a50e <xQueueGenericSend+0x9e>
 802a508:	687b      	ldr	r3, [r7, #4]
 802a50a:	2b00      	cmp	r3, #0
 802a50c:	d101      	bne.n	802a512 <xQueueGenericSend+0xa2>
 802a50e:	2301      	movs	r3, #1
 802a510:	e000      	b.n	802a514 <xQueueGenericSend+0xa4>
 802a512:	2300      	movs	r3, #0
 802a514:	2b00      	cmp	r3, #0
 802a516:	d10a      	bne.n	802a52e <xQueueGenericSend+0xbe>
	__asm volatile
 802a518:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a51c:	f383 8811 	msr	BASEPRI, r3
 802a520:	f3bf 8f6f 	isb	sy
 802a524:	f3bf 8f4f 	dsb	sy
 802a528:	61fb      	str	r3, [r7, #28]
}
 802a52a:	bf00      	nop
 802a52c:	e7fe      	b.n	802a52c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802a52e:	f002 f9b9 	bl	802c8a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a53a:	429a      	cmp	r2, r3
 802a53c:	d302      	bcc.n	802a544 <xQueueGenericSend+0xd4>
 802a53e:	683b      	ldr	r3, [r7, #0]
 802a540:	2b02      	cmp	r3, #2
 802a542:	d136      	bne.n	802a5b2 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 802a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a546:	4618      	mov	r0, r3
 802a548:	f003 ff08 	bl	802e35c <SEGGER_SYSVIEW_ShrinkId>
 802a54c:	68ba      	ldr	r2, [r7, #8]
 802a54e:	6879      	ldr	r1, [r7, #4]
 802a550:	683b      	ldr	r3, [r7, #0]
 802a552:	9300      	str	r3, [sp, #0]
 802a554:	460b      	mov	r3, r1
 802a556:	4601      	mov	r1, r0
 802a558:	205a      	movs	r0, #90	; 0x5a
 802a55a:	f003 fac3 	bl	802dae4 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 802a55e:	683a      	ldr	r2, [r7, #0]
 802a560:	68b9      	ldr	r1, [r7, #8]
 802a562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802a564:	f000 fb5e 	bl	802ac24 <prvCopyDataToQueue>
 802a568:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a56e:	2b00      	cmp	r3, #0
 802a570:	d010      	beq.n	802a594 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802a572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a574:	3324      	adds	r3, #36	; 0x24
 802a576:	4618      	mov	r0, r3
 802a578:	f001 fa34 	bl	802b9e4 <xTaskRemoveFromEventList>
 802a57c:	4603      	mov	r3, r0
 802a57e:	2b00      	cmp	r3, #0
 802a580:	d013      	beq.n	802a5aa <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 802a582:	4b4d      	ldr	r3, [pc, #308]	; (802a6b8 <xQueueGenericSend+0x248>)
 802a584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a588:	601a      	str	r2, [r3, #0]
 802a58a:	f3bf 8f4f 	dsb	sy
 802a58e:	f3bf 8f6f 	isb	sy
 802a592:	e00a      	b.n	802a5aa <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 802a594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a596:	2b00      	cmp	r3, #0
 802a598:	d007      	beq.n	802a5aa <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 802a59a:	4b47      	ldr	r3, [pc, #284]	; (802a6b8 <xQueueGenericSend+0x248>)
 802a59c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a5a0:	601a      	str	r2, [r3, #0]
 802a5a2:	f3bf 8f4f 	dsb	sy
 802a5a6:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 802a5aa:	f002 f9ab 	bl	802c904 <vPortExitCritical>
				return pdPASS;
 802a5ae:	2301      	movs	r3, #1
 802a5b0:	e07d      	b.n	802a6ae <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802a5b2:	687b      	ldr	r3, [r7, #4]
 802a5b4:	2b00      	cmp	r3, #0
 802a5b6:	d110      	bne.n	802a5da <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802a5b8:	f002 f9a4 	bl	802c904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 802a5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a5be:	4618      	mov	r0, r3
 802a5c0:	f003 fecc 	bl	802e35c <SEGGER_SYSVIEW_ShrinkId>
 802a5c4:	68ba      	ldr	r2, [r7, #8]
 802a5c6:	6879      	ldr	r1, [r7, #4]
 802a5c8:	683b      	ldr	r3, [r7, #0]
 802a5ca:	9300      	str	r3, [sp, #0]
 802a5cc:	460b      	mov	r3, r1
 802a5ce:	4601      	mov	r1, r0
 802a5d0:	205a      	movs	r0, #90	; 0x5a
 802a5d2:	f003 fa87 	bl	802dae4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 802a5d6:	2300      	movs	r3, #0
 802a5d8:	e069      	b.n	802a6ae <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 802a5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a5dc:	2b00      	cmp	r3, #0
 802a5de:	d106      	bne.n	802a5ee <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802a5e0:	f107 0314 	add.w	r3, r7, #20
 802a5e4:	4618      	mov	r0, r3
 802a5e6:	f001 fa65 	bl	802bab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802a5ea:	2301      	movs	r3, #1
 802a5ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802a5ee:	f002 f989 	bl	802c904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802a5f2:	f000 ff9d 	bl	802b530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802a5f6:	f002 f955 	bl	802c8a4 <vPortEnterCritical>
 802a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a5fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802a600:	b25b      	sxtb	r3, r3
 802a602:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a606:	d103      	bne.n	802a610 <xQueueGenericSend+0x1a0>
 802a608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a60a:	2200      	movs	r2, #0
 802a60c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802a610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802a616:	b25b      	sxtb	r3, r3
 802a618:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a61c:	d103      	bne.n	802a626 <xQueueGenericSend+0x1b6>
 802a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a620:	2200      	movs	r2, #0
 802a622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802a626:	f002 f96d 	bl	802c904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802a62a:	1d3a      	adds	r2, r7, #4
 802a62c:	f107 0314 	add.w	r3, r7, #20
 802a630:	4611      	mov	r1, r2
 802a632:	4618      	mov	r0, r3
 802a634:	f001 fa54 	bl	802bae0 <xTaskCheckForTimeOut>
 802a638:	4603      	mov	r3, r0
 802a63a:	2b00      	cmp	r3, #0
 802a63c:	d124      	bne.n	802a688 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 802a63e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802a640:	f000 fbe8 	bl	802ae14 <prvIsQueueFull>
 802a644:	4603      	mov	r3, r0
 802a646:	2b00      	cmp	r3, #0
 802a648:	d018      	beq.n	802a67c <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 802a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a64c:	3310      	adds	r3, #16
 802a64e:	687a      	ldr	r2, [r7, #4]
 802a650:	4611      	mov	r1, r2
 802a652:	4618      	mov	r0, r3
 802a654:	f001 f974 	bl	802b940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 802a658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802a65a:	f000 fb73 	bl	802ad44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 802a65e:	f000 ff75 	bl	802b54c <xTaskResumeAll>
 802a662:	4603      	mov	r3, r0
 802a664:	2b00      	cmp	r3, #0
 802a666:	f47f af62 	bne.w	802a52e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 802a66a:	4b13      	ldr	r3, [pc, #76]	; (802a6b8 <xQueueGenericSend+0x248>)
 802a66c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a670:	601a      	str	r2, [r3, #0]
 802a672:	f3bf 8f4f 	dsb	sy
 802a676:	f3bf 8f6f 	isb	sy
 802a67a:	e758      	b.n	802a52e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 802a67c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802a67e:	f000 fb61 	bl	802ad44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802a682:	f000 ff63 	bl	802b54c <xTaskResumeAll>
 802a686:	e752      	b.n	802a52e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 802a688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802a68a:	f000 fb5b 	bl	802ad44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802a68e:	f000 ff5d 	bl	802b54c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 802a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a694:	4618      	mov	r0, r3
 802a696:	f003 fe61 	bl	802e35c <SEGGER_SYSVIEW_ShrinkId>
 802a69a:	68ba      	ldr	r2, [r7, #8]
 802a69c:	6879      	ldr	r1, [r7, #4]
 802a69e:	683b      	ldr	r3, [r7, #0]
 802a6a0:	9300      	str	r3, [sp, #0]
 802a6a2:	460b      	mov	r3, r1
 802a6a4:	4601      	mov	r1, r0
 802a6a6:	205a      	movs	r0, #90	; 0x5a
 802a6a8:	f003 fa1c 	bl	802dae4 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 802a6ac:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 802a6ae:	4618      	mov	r0, r3
 802a6b0:	3738      	adds	r7, #56	; 0x38
 802a6b2:	46bd      	mov	sp, r7
 802a6b4:	bd80      	pop	{r7, pc}
 802a6b6:	bf00      	nop
 802a6b8:	e000ed04 	.word	0xe000ed04

0802a6bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 802a6bc:	b580      	push	{r7, lr}
 802a6be:	b090      	sub	sp, #64	; 0x40
 802a6c0:	af00      	add	r7, sp, #0
 802a6c2:	60f8      	str	r0, [r7, #12]
 802a6c4:	60b9      	str	r1, [r7, #8]
 802a6c6:	607a      	str	r2, [r7, #4]
 802a6c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 802a6ca:	68fb      	ldr	r3, [r7, #12]
 802a6cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 802a6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a6d0:	2b00      	cmp	r3, #0
 802a6d2:	d10a      	bne.n	802a6ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 802a6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a6d8:	f383 8811 	msr	BASEPRI, r3
 802a6dc:	f3bf 8f6f 	isb	sy
 802a6e0:	f3bf 8f4f 	dsb	sy
 802a6e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802a6e6:	bf00      	nop
 802a6e8:	e7fe      	b.n	802a6e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802a6ea:	68bb      	ldr	r3, [r7, #8]
 802a6ec:	2b00      	cmp	r3, #0
 802a6ee:	d103      	bne.n	802a6f8 <xQueueGenericSendFromISR+0x3c>
 802a6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a6f4:	2b00      	cmp	r3, #0
 802a6f6:	d101      	bne.n	802a6fc <xQueueGenericSendFromISR+0x40>
 802a6f8:	2301      	movs	r3, #1
 802a6fa:	e000      	b.n	802a6fe <xQueueGenericSendFromISR+0x42>
 802a6fc:	2300      	movs	r3, #0
 802a6fe:	2b00      	cmp	r3, #0
 802a700:	d10a      	bne.n	802a718 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 802a702:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a706:	f383 8811 	msr	BASEPRI, r3
 802a70a:	f3bf 8f6f 	isb	sy
 802a70e:	f3bf 8f4f 	dsb	sy
 802a712:	627b      	str	r3, [r7, #36]	; 0x24
}
 802a714:	bf00      	nop
 802a716:	e7fe      	b.n	802a716 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 802a718:	683b      	ldr	r3, [r7, #0]
 802a71a:	2b02      	cmp	r3, #2
 802a71c:	d103      	bne.n	802a726 <xQueueGenericSendFromISR+0x6a>
 802a71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a722:	2b01      	cmp	r3, #1
 802a724:	d101      	bne.n	802a72a <xQueueGenericSendFromISR+0x6e>
 802a726:	2301      	movs	r3, #1
 802a728:	e000      	b.n	802a72c <xQueueGenericSendFromISR+0x70>
 802a72a:	2300      	movs	r3, #0
 802a72c:	2b00      	cmp	r3, #0
 802a72e:	d10a      	bne.n	802a746 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 802a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a734:	f383 8811 	msr	BASEPRI, r3
 802a738:	f3bf 8f6f 	isb	sy
 802a73c:	f3bf 8f4f 	dsb	sy
 802a740:	623b      	str	r3, [r7, #32]
}
 802a742:	bf00      	nop
 802a744:	e7fe      	b.n	802a744 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802a746:	f002 f98f 	bl	802ca68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 802a74a:	f3ef 8211 	mrs	r2, BASEPRI
 802a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a752:	f383 8811 	msr	BASEPRI, r3
 802a756:	f3bf 8f6f 	isb	sy
 802a75a:	f3bf 8f4f 	dsb	sy
 802a75e:	61fa      	str	r2, [r7, #28]
 802a760:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 802a762:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 802a764:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802a766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802a76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a76c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a76e:	429a      	cmp	r2, r3
 802a770:	d302      	bcc.n	802a778 <xQueueGenericSendFromISR+0xbc>
 802a772:	683b      	ldr	r3, [r7, #0]
 802a774:	2b02      	cmp	r3, #2
 802a776:	d139      	bne.n	802a7ec <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 802a778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a77a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802a77e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 802a782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a786:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 802a788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a78a:	4618      	mov	r0, r3
 802a78c:	f003 fde6 	bl	802e35c <SEGGER_SYSVIEW_ShrinkId>
 802a790:	4601      	mov	r1, r0
 802a792:	687b      	ldr	r3, [r7, #4]
 802a794:	461a      	mov	r2, r3
 802a796:	2060      	movs	r0, #96	; 0x60
 802a798:	f003 f8d4 	bl	802d944 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 802a79c:	683a      	ldr	r2, [r7, #0]
 802a79e:	68b9      	ldr	r1, [r7, #8]
 802a7a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802a7a2:	f000 fa3f 	bl	802ac24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 802a7a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 802a7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a7ae:	d112      	bne.n	802a7d6 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802a7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a7b4:	2b00      	cmp	r3, #0
 802a7b6:	d016      	beq.n	802a7e6 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802a7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a7ba:	3324      	adds	r3, #36	; 0x24
 802a7bc:	4618      	mov	r0, r3
 802a7be:	f001 f911 	bl	802b9e4 <xTaskRemoveFromEventList>
 802a7c2:	4603      	mov	r3, r0
 802a7c4:	2b00      	cmp	r3, #0
 802a7c6:	d00e      	beq.n	802a7e6 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 802a7c8:	687b      	ldr	r3, [r7, #4]
 802a7ca:	2b00      	cmp	r3, #0
 802a7cc:	d00b      	beq.n	802a7e6 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 802a7ce:	687b      	ldr	r3, [r7, #4]
 802a7d0:	2201      	movs	r2, #1
 802a7d2:	601a      	str	r2, [r3, #0]
 802a7d4:	e007      	b.n	802a7e6 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 802a7d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 802a7da:	3301      	adds	r3, #1
 802a7dc:	b2db      	uxtb	r3, r3
 802a7de:	b25a      	sxtb	r2, r3
 802a7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a7e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 802a7e6:	2301      	movs	r3, #1
 802a7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 802a7ea:	e00b      	b.n	802a804 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 802a7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a7ee:	4618      	mov	r0, r3
 802a7f0:	f003 fdb4 	bl	802e35c <SEGGER_SYSVIEW_ShrinkId>
 802a7f4:	4601      	mov	r1, r0
 802a7f6:	687b      	ldr	r3, [r7, #4]
 802a7f8:	461a      	mov	r2, r3
 802a7fa:	2060      	movs	r0, #96	; 0x60
 802a7fc:	f003 f8a2 	bl	802d944 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 802a800:	2300      	movs	r3, #0
 802a802:	63fb      	str	r3, [r7, #60]	; 0x3c
 802a804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a806:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 802a808:	697b      	ldr	r3, [r7, #20]
 802a80a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 802a80e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 802a810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 802a812:	4618      	mov	r0, r3
 802a814:	3740      	adds	r7, #64	; 0x40
 802a816:	46bd      	mov	sp, r7
 802a818:	bd80      	pop	{r7, pc}
	...

0802a81c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 802a81c:	b590      	push	{r4, r7, lr}
 802a81e:	b08f      	sub	sp, #60	; 0x3c
 802a820:	af02      	add	r7, sp, #8
 802a822:	60f8      	str	r0, [r7, #12]
 802a824:	60b9      	str	r1, [r7, #8]
 802a826:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 802a828:	2300      	movs	r3, #0
 802a82a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 802a82c:	68fb      	ldr	r3, [r7, #12]
 802a82e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 802a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a832:	2b00      	cmp	r3, #0
 802a834:	d10a      	bne.n	802a84c <xQueueReceive+0x30>
	__asm volatile
 802a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a83a:	f383 8811 	msr	BASEPRI, r3
 802a83e:	f3bf 8f6f 	isb	sy
 802a842:	f3bf 8f4f 	dsb	sy
 802a846:	623b      	str	r3, [r7, #32]
}
 802a848:	bf00      	nop
 802a84a:	e7fe      	b.n	802a84a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802a84c:	68bb      	ldr	r3, [r7, #8]
 802a84e:	2b00      	cmp	r3, #0
 802a850:	d103      	bne.n	802a85a <xQueueReceive+0x3e>
 802a852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a856:	2b00      	cmp	r3, #0
 802a858:	d101      	bne.n	802a85e <xQueueReceive+0x42>
 802a85a:	2301      	movs	r3, #1
 802a85c:	e000      	b.n	802a860 <xQueueReceive+0x44>
 802a85e:	2300      	movs	r3, #0
 802a860:	2b00      	cmp	r3, #0
 802a862:	d10a      	bne.n	802a87a <xQueueReceive+0x5e>
	__asm volatile
 802a864:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a868:	f383 8811 	msr	BASEPRI, r3
 802a86c:	f3bf 8f6f 	isb	sy
 802a870:	f3bf 8f4f 	dsb	sy
 802a874:	61fb      	str	r3, [r7, #28]
}
 802a876:	bf00      	nop
 802a878:	e7fe      	b.n	802a878 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802a87a:	f001 fab1 	bl	802bde0 <xTaskGetSchedulerState>
 802a87e:	4603      	mov	r3, r0
 802a880:	2b00      	cmp	r3, #0
 802a882:	d102      	bne.n	802a88a <xQueueReceive+0x6e>
 802a884:	687b      	ldr	r3, [r7, #4]
 802a886:	2b00      	cmp	r3, #0
 802a888:	d101      	bne.n	802a88e <xQueueReceive+0x72>
 802a88a:	2301      	movs	r3, #1
 802a88c:	e000      	b.n	802a890 <xQueueReceive+0x74>
 802a88e:	2300      	movs	r3, #0
 802a890:	2b00      	cmp	r3, #0
 802a892:	d10a      	bne.n	802a8aa <xQueueReceive+0x8e>
	__asm volatile
 802a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a898:	f383 8811 	msr	BASEPRI, r3
 802a89c:	f3bf 8f6f 	isb	sy
 802a8a0:	f3bf 8f4f 	dsb	sy
 802a8a4:	61bb      	str	r3, [r7, #24]
}
 802a8a6:	bf00      	nop
 802a8a8:	e7fe      	b.n	802a8a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802a8aa:	f001 fffb 	bl	802c8a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802a8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a8b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a8b6:	2b00      	cmp	r3, #0
 802a8b8:	d02f      	beq.n	802a91a <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 802a8ba:	68b9      	ldr	r1, [r7, #8]
 802a8bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a8be:	f000 fa1b 	bl	802acf8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 802a8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8c4:	4618      	mov	r0, r3
 802a8c6:	f003 fd49 	bl	802e35c <SEGGER_SYSVIEW_ShrinkId>
 802a8ca:	4604      	mov	r4, r0
 802a8cc:	2000      	movs	r0, #0
 802a8ce:	f003 fd45 	bl	802e35c <SEGGER_SYSVIEW_ShrinkId>
 802a8d2:	4602      	mov	r2, r0
 802a8d4:	687b      	ldr	r3, [r7, #4]
 802a8d6:	2101      	movs	r1, #1
 802a8d8:	9100      	str	r1, [sp, #0]
 802a8da:	4621      	mov	r1, r4
 802a8dc:	205c      	movs	r0, #92	; 0x5c
 802a8de:	f003 f901 	bl	802dae4 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 802a8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a8e4:	1e5a      	subs	r2, r3, #1
 802a8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8ec:	691b      	ldr	r3, [r3, #16]
 802a8ee:	2b00      	cmp	r3, #0
 802a8f0:	d00f      	beq.n	802a912 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802a8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8f4:	3310      	adds	r3, #16
 802a8f6:	4618      	mov	r0, r3
 802a8f8:	f001 f874 	bl	802b9e4 <xTaskRemoveFromEventList>
 802a8fc:	4603      	mov	r3, r0
 802a8fe:	2b00      	cmp	r3, #0
 802a900:	d007      	beq.n	802a912 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 802a902:	4b4d      	ldr	r3, [pc, #308]	; (802aa38 <xQueueReceive+0x21c>)
 802a904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a908:	601a      	str	r2, [r3, #0]
 802a90a:	f3bf 8f4f 	dsb	sy
 802a90e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 802a912:	f001 fff7 	bl	802c904 <vPortExitCritical>
				return pdPASS;
 802a916:	2301      	movs	r3, #1
 802a918:	e08a      	b.n	802aa30 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802a91a:	687b      	ldr	r3, [r7, #4]
 802a91c:	2b00      	cmp	r3, #0
 802a91e:	d113      	bne.n	802a948 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802a920:	f001 fff0 	bl	802c904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 802a924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a926:	4618      	mov	r0, r3
 802a928:	f003 fd18 	bl	802e35c <SEGGER_SYSVIEW_ShrinkId>
 802a92c:	4604      	mov	r4, r0
 802a92e:	2000      	movs	r0, #0
 802a930:	f003 fd14 	bl	802e35c <SEGGER_SYSVIEW_ShrinkId>
 802a934:	4602      	mov	r2, r0
 802a936:	687b      	ldr	r3, [r7, #4]
 802a938:	2101      	movs	r1, #1
 802a93a:	9100      	str	r1, [sp, #0]
 802a93c:	4621      	mov	r1, r4
 802a93e:	205c      	movs	r0, #92	; 0x5c
 802a940:	f003 f8d0 	bl	802dae4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 802a944:	2300      	movs	r3, #0
 802a946:	e073      	b.n	802aa30 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 802a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a94a:	2b00      	cmp	r3, #0
 802a94c:	d106      	bne.n	802a95c <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802a94e:	f107 0310 	add.w	r3, r7, #16
 802a952:	4618      	mov	r0, r3
 802a954:	f001 f8ae 	bl	802bab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802a958:	2301      	movs	r3, #1
 802a95a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802a95c:	f001 ffd2 	bl	802c904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802a960:	f000 fde6 	bl	802b530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802a964:	f001 ff9e 	bl	802c8a4 <vPortEnterCritical>
 802a968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a96a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802a96e:	b25b      	sxtb	r3, r3
 802a970:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a974:	d103      	bne.n	802a97e <xQueueReceive+0x162>
 802a976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a978:	2200      	movs	r2, #0
 802a97a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802a97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802a984:	b25b      	sxtb	r3, r3
 802a986:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a98a:	d103      	bne.n	802a994 <xQueueReceive+0x178>
 802a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a98e:	2200      	movs	r2, #0
 802a990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802a994:	f001 ffb6 	bl	802c904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802a998:	1d3a      	adds	r2, r7, #4
 802a99a:	f107 0310 	add.w	r3, r7, #16
 802a99e:	4611      	mov	r1, r2
 802a9a0:	4618      	mov	r0, r3
 802a9a2:	f001 f89d 	bl	802bae0 <xTaskCheckForTimeOut>
 802a9a6:	4603      	mov	r3, r0
 802a9a8:	2b00      	cmp	r3, #0
 802a9aa:	d124      	bne.n	802a9f6 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802a9ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a9ae:	f000 fa1b 	bl	802ade8 <prvIsQueueEmpty>
 802a9b2:	4603      	mov	r3, r0
 802a9b4:	2b00      	cmp	r3, #0
 802a9b6:	d018      	beq.n	802a9ea <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 802a9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a9ba:	3324      	adds	r3, #36	; 0x24
 802a9bc:	687a      	ldr	r2, [r7, #4]
 802a9be:	4611      	mov	r1, r2
 802a9c0:	4618      	mov	r0, r3
 802a9c2:	f000 ffbd 	bl	802b940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802a9c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a9c8:	f000 f9bc 	bl	802ad44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802a9cc:	f000 fdbe 	bl	802b54c <xTaskResumeAll>
 802a9d0:	4603      	mov	r3, r0
 802a9d2:	2b00      	cmp	r3, #0
 802a9d4:	f47f af69 	bne.w	802a8aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 802a9d8:	4b17      	ldr	r3, [pc, #92]	; (802aa38 <xQueueReceive+0x21c>)
 802a9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a9de:	601a      	str	r2, [r3, #0]
 802a9e0:	f3bf 8f4f 	dsb	sy
 802a9e4:	f3bf 8f6f 	isb	sy
 802a9e8:	e75f      	b.n	802a8aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 802a9ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a9ec:	f000 f9aa 	bl	802ad44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802a9f0:	f000 fdac 	bl	802b54c <xTaskResumeAll>
 802a9f4:	e759      	b.n	802a8aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 802a9f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a9f8:	f000 f9a4 	bl	802ad44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802a9fc:	f000 fda6 	bl	802b54c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802aa00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802aa02:	f000 f9f1 	bl	802ade8 <prvIsQueueEmpty>
 802aa06:	4603      	mov	r3, r0
 802aa08:	2b00      	cmp	r3, #0
 802aa0a:	f43f af4e 	beq.w	802a8aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 802aa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aa10:	4618      	mov	r0, r3
 802aa12:	f003 fca3 	bl	802e35c <SEGGER_SYSVIEW_ShrinkId>
 802aa16:	4604      	mov	r4, r0
 802aa18:	2000      	movs	r0, #0
 802aa1a:	f003 fc9f 	bl	802e35c <SEGGER_SYSVIEW_ShrinkId>
 802aa1e:	4602      	mov	r2, r0
 802aa20:	687b      	ldr	r3, [r7, #4]
 802aa22:	2101      	movs	r1, #1
 802aa24:	9100      	str	r1, [sp, #0]
 802aa26:	4621      	mov	r1, r4
 802aa28:	205c      	movs	r0, #92	; 0x5c
 802aa2a:	f003 f85b 	bl	802dae4 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 802aa2e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 802aa30:	4618      	mov	r0, r3
 802aa32:	3734      	adds	r7, #52	; 0x34
 802aa34:	46bd      	mov	sp, r7
 802aa36:	bd90      	pop	{r4, r7, pc}
 802aa38:	e000ed04 	.word	0xe000ed04

0802aa3c <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 802aa3c:	b590      	push	{r4, r7, lr}
 802aa3e:	b091      	sub	sp, #68	; 0x44
 802aa40:	af02      	add	r7, sp, #8
 802aa42:	60f8      	str	r0, [r7, #12]
 802aa44:	60b9      	str	r1, [r7, #8]
 802aa46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 802aa48:	2300      	movs	r3, #0
 802aa4a:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 802aa4c:	68fb      	ldr	r3, [r7, #12]
 802aa4e:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 802aa50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aa52:	2b00      	cmp	r3, #0
 802aa54:	d10a      	bne.n	802aa6c <xQueuePeek+0x30>
	__asm volatile
 802aa56:	f04f 0350 	mov.w	r3, #80	; 0x50
 802aa5a:	f383 8811 	msr	BASEPRI, r3
 802aa5e:	f3bf 8f6f 	isb	sy
 802aa62:	f3bf 8f4f 	dsb	sy
 802aa66:	627b      	str	r3, [r7, #36]	; 0x24
}
 802aa68:	bf00      	nop
 802aa6a:	e7fe      	b.n	802aa6a <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802aa6c:	68bb      	ldr	r3, [r7, #8]
 802aa6e:	2b00      	cmp	r3, #0
 802aa70:	d103      	bne.n	802aa7a <xQueuePeek+0x3e>
 802aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802aa76:	2b00      	cmp	r3, #0
 802aa78:	d101      	bne.n	802aa7e <xQueuePeek+0x42>
 802aa7a:	2301      	movs	r3, #1
 802aa7c:	e000      	b.n	802aa80 <xQueuePeek+0x44>
 802aa7e:	2300      	movs	r3, #0
 802aa80:	2b00      	cmp	r3, #0
 802aa82:	d10a      	bne.n	802aa9a <xQueuePeek+0x5e>
	__asm volatile
 802aa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 802aa88:	f383 8811 	msr	BASEPRI, r3
 802aa8c:	f3bf 8f6f 	isb	sy
 802aa90:	f3bf 8f4f 	dsb	sy
 802aa94:	623b      	str	r3, [r7, #32]
}
 802aa96:	bf00      	nop
 802aa98:	e7fe      	b.n	802aa98 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802aa9a:	f001 f9a1 	bl	802bde0 <xTaskGetSchedulerState>
 802aa9e:	4603      	mov	r3, r0
 802aaa0:	2b00      	cmp	r3, #0
 802aaa2:	d102      	bne.n	802aaaa <xQueuePeek+0x6e>
 802aaa4:	687b      	ldr	r3, [r7, #4]
 802aaa6:	2b00      	cmp	r3, #0
 802aaa8:	d101      	bne.n	802aaae <xQueuePeek+0x72>
 802aaaa:	2301      	movs	r3, #1
 802aaac:	e000      	b.n	802aab0 <xQueuePeek+0x74>
 802aaae:	2300      	movs	r3, #0
 802aab0:	2b00      	cmp	r3, #0
 802aab2:	d10a      	bne.n	802aaca <xQueuePeek+0x8e>
	__asm volatile
 802aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 802aab8:	f383 8811 	msr	BASEPRI, r3
 802aabc:	f3bf 8f6f 	isb	sy
 802aac0:	f3bf 8f4f 	dsb	sy
 802aac4:	61fb      	str	r3, [r7, #28]
}
 802aac6:	bf00      	nop
 802aac8:	e7fe      	b.n	802aac8 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802aaca:	f001 feeb 	bl	802c8a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802aad2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802aad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802aad6:	2b00      	cmp	r3, #0
 802aad8:	d032      	beq.n	802ab40 <xQueuePeek+0x104>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 802aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aadc:	68db      	ldr	r3, [r3, #12]
 802aade:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 802aae0:	68b9      	ldr	r1, [r7, #8]
 802aae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802aae4:	f000 f908 	bl	802acf8 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );
 802aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aaea:	4618      	mov	r0, r3
 802aaec:	f003 fc36 	bl	802e35c <SEGGER_SYSVIEW_ShrinkId>
 802aaf0:	4604      	mov	r4, r0
 802aaf2:	68bb      	ldr	r3, [r7, #8]
 802aaf4:	4618      	mov	r0, r3
 802aaf6:	f003 fc31 	bl	802e35c <SEGGER_SYSVIEW_ShrinkId>
 802aafa:	4602      	mov	r2, r0
 802aafc:	687b      	ldr	r3, [r7, #4]
 802aafe:	2101      	movs	r1, #1
 802ab00:	9100      	str	r1, [sp, #0]
 802ab02:	4621      	mov	r1, r4
 802ab04:	205c      	movs	r0, #92	; 0x5c
 802ab06:	f002 ffed 	bl	802dae4 <SEGGER_SYSVIEW_RecordU32x4>

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 802ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ab0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802ab0e:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802ab10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ab12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ab14:	2b00      	cmp	r3, #0
 802ab16:	d00f      	beq.n	802ab38 <xQueuePeek+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802ab18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ab1a:	3324      	adds	r3, #36	; 0x24
 802ab1c:	4618      	mov	r0, r3
 802ab1e:	f000 ff61 	bl	802b9e4 <xTaskRemoveFromEventList>
 802ab22:	4603      	mov	r3, r0
 802ab24:	2b00      	cmp	r3, #0
 802ab26:	d007      	beq.n	802ab38 <xQueuePeek+0xfc>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 802ab28:	4b3d      	ldr	r3, [pc, #244]	; (802ac20 <xQueuePeek+0x1e4>)
 802ab2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802ab2e:	601a      	str	r2, [r3, #0]
 802ab30:	f3bf 8f4f 	dsb	sy
 802ab34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 802ab38:	f001 fee4 	bl	802c904 <vPortExitCritical>
				return pdPASS;
 802ab3c:	2301      	movs	r3, #1
 802ab3e:	e06a      	b.n	802ac16 <xQueuePeek+0x1da>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802ab40:	687b      	ldr	r3, [r7, #4]
 802ab42:	2b00      	cmp	r3, #0
 802ab44:	d103      	bne.n	802ab4e <xQueuePeek+0x112>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802ab46:	f001 fedd 	bl	802c904 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 802ab4a:	2300      	movs	r3, #0
 802ab4c:	e063      	b.n	802ac16 <xQueuePeek+0x1da>
				}
				else if( xEntryTimeSet == pdFALSE )
 802ab4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ab50:	2b00      	cmp	r3, #0
 802ab52:	d106      	bne.n	802ab62 <xQueuePeek+0x126>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802ab54:	f107 0314 	add.w	r3, r7, #20
 802ab58:	4618      	mov	r0, r3
 802ab5a:	f000 ffab 	bl	802bab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802ab5e:	2301      	movs	r3, #1
 802ab60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802ab62:	f001 fecf 	bl	802c904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802ab66:	f000 fce3 	bl	802b530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802ab6a:	f001 fe9b 	bl	802c8a4 <vPortEnterCritical>
 802ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ab70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802ab74:	b25b      	sxtb	r3, r3
 802ab76:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ab7a:	d103      	bne.n	802ab84 <xQueuePeek+0x148>
 802ab7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ab7e:	2200      	movs	r2, #0
 802ab80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ab86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802ab8a:	b25b      	sxtb	r3, r3
 802ab8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ab90:	d103      	bne.n	802ab9a <xQueuePeek+0x15e>
 802ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ab94:	2200      	movs	r2, #0
 802ab96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802ab9a:	f001 feb3 	bl	802c904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802ab9e:	1d3a      	adds	r2, r7, #4
 802aba0:	f107 0314 	add.w	r3, r7, #20
 802aba4:	4611      	mov	r1, r2
 802aba6:	4618      	mov	r0, r3
 802aba8:	f000 ff9a 	bl	802bae0 <xTaskCheckForTimeOut>
 802abac:	4603      	mov	r3, r0
 802abae:	2b00      	cmp	r3, #0
 802abb0:	d124      	bne.n	802abfc <xQueuePeek+0x1c0>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802abb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802abb4:	f000 f918 	bl	802ade8 <prvIsQueueEmpty>
 802abb8:	4603      	mov	r3, r0
 802abba:	2b00      	cmp	r3, #0
 802abbc:	d018      	beq.n	802abf0 <xQueuePeek+0x1b4>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 802abbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802abc0:	3324      	adds	r3, #36	; 0x24
 802abc2:	687a      	ldr	r2, [r7, #4]
 802abc4:	4611      	mov	r1, r2
 802abc6:	4618      	mov	r0, r3
 802abc8:	f000 feba 	bl	802b940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802abcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802abce:	f000 f8b9 	bl	802ad44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802abd2:	f000 fcbb 	bl	802b54c <xTaskResumeAll>
 802abd6:	4603      	mov	r3, r0
 802abd8:	2b00      	cmp	r3, #0
 802abda:	f47f af76 	bne.w	802aaca <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 802abde:	4b10      	ldr	r3, [pc, #64]	; (802ac20 <xQueuePeek+0x1e4>)
 802abe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802abe4:	601a      	str	r2, [r3, #0]
 802abe6:	f3bf 8f4f 	dsb	sy
 802abea:	f3bf 8f6f 	isb	sy
 802abee:	e76c      	b.n	802aaca <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 802abf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802abf2:	f000 f8a7 	bl	802ad44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802abf6:	f000 fca9 	bl	802b54c <xTaskResumeAll>
 802abfa:	e766      	b.n	802aaca <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 802abfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802abfe:	f000 f8a1 	bl	802ad44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802ac02:	f000 fca3 	bl	802b54c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802ac06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802ac08:	f000 f8ee 	bl	802ade8 <prvIsQueueEmpty>
 802ac0c:	4603      	mov	r3, r0
 802ac0e:	2b00      	cmp	r3, #0
 802ac10:	f43f af5b 	beq.w	802aaca <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 802ac14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 802ac16:	4618      	mov	r0, r3
 802ac18:	373c      	adds	r7, #60	; 0x3c
 802ac1a:	46bd      	mov	sp, r7
 802ac1c:	bd90      	pop	{r4, r7, pc}
 802ac1e:	bf00      	nop
 802ac20:	e000ed04 	.word	0xe000ed04

0802ac24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 802ac24:	b580      	push	{r7, lr}
 802ac26:	b086      	sub	sp, #24
 802ac28:	af00      	add	r7, sp, #0
 802ac2a:	60f8      	str	r0, [r7, #12]
 802ac2c:	60b9      	str	r1, [r7, #8]
 802ac2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 802ac30:	2300      	movs	r3, #0
 802ac32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802ac34:	68fb      	ldr	r3, [r7, #12]
 802ac36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ac38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 802ac3a:	68fb      	ldr	r3, [r7, #12]
 802ac3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ac3e:	2b00      	cmp	r3, #0
 802ac40:	d10d      	bne.n	802ac5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802ac42:	68fb      	ldr	r3, [r7, #12]
 802ac44:	681b      	ldr	r3, [r3, #0]
 802ac46:	2b00      	cmp	r3, #0
 802ac48:	d14d      	bne.n	802ace6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 802ac4a:	68fb      	ldr	r3, [r7, #12]
 802ac4c:	689b      	ldr	r3, [r3, #8]
 802ac4e:	4618      	mov	r0, r3
 802ac50:	f001 f8e4 	bl	802be1c <xTaskPriorityDisinherit>
 802ac54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 802ac56:	68fb      	ldr	r3, [r7, #12]
 802ac58:	2200      	movs	r2, #0
 802ac5a:	609a      	str	r2, [r3, #8]
 802ac5c:	e043      	b.n	802ace6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 802ac5e:	687b      	ldr	r3, [r7, #4]
 802ac60:	2b00      	cmp	r3, #0
 802ac62:	d119      	bne.n	802ac98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 802ac64:	68fb      	ldr	r3, [r7, #12]
 802ac66:	6858      	ldr	r0, [r3, #4]
 802ac68:	68fb      	ldr	r3, [r7, #12]
 802ac6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ac6c:	461a      	mov	r2, r3
 802ac6e:	68b9      	ldr	r1, [r7, #8]
 802ac70:	f003 fd28 	bl	802e6c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 802ac74:	68fb      	ldr	r3, [r7, #12]
 802ac76:	685a      	ldr	r2, [r3, #4]
 802ac78:	68fb      	ldr	r3, [r7, #12]
 802ac7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ac7c:	441a      	add	r2, r3
 802ac7e:	68fb      	ldr	r3, [r7, #12]
 802ac80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802ac82:	68fb      	ldr	r3, [r7, #12]
 802ac84:	685a      	ldr	r2, [r3, #4]
 802ac86:	68fb      	ldr	r3, [r7, #12]
 802ac88:	689b      	ldr	r3, [r3, #8]
 802ac8a:	429a      	cmp	r2, r3
 802ac8c:	d32b      	bcc.n	802ace6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 802ac8e:	68fb      	ldr	r3, [r7, #12]
 802ac90:	681a      	ldr	r2, [r3, #0]
 802ac92:	68fb      	ldr	r3, [r7, #12]
 802ac94:	605a      	str	r2, [r3, #4]
 802ac96:	e026      	b.n	802ace6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 802ac98:	68fb      	ldr	r3, [r7, #12]
 802ac9a:	68d8      	ldr	r0, [r3, #12]
 802ac9c:	68fb      	ldr	r3, [r7, #12]
 802ac9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802aca0:	461a      	mov	r2, r3
 802aca2:	68b9      	ldr	r1, [r7, #8]
 802aca4:	f003 fd0e 	bl	802e6c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 802aca8:	68fb      	ldr	r3, [r7, #12]
 802acaa:	68da      	ldr	r2, [r3, #12]
 802acac:	68fb      	ldr	r3, [r7, #12]
 802acae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802acb0:	425b      	negs	r3, r3
 802acb2:	441a      	add	r2, r3
 802acb4:	68fb      	ldr	r3, [r7, #12]
 802acb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802acb8:	68fb      	ldr	r3, [r7, #12]
 802acba:	68da      	ldr	r2, [r3, #12]
 802acbc:	68fb      	ldr	r3, [r7, #12]
 802acbe:	681b      	ldr	r3, [r3, #0]
 802acc0:	429a      	cmp	r2, r3
 802acc2:	d207      	bcs.n	802acd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 802acc4:	68fb      	ldr	r3, [r7, #12]
 802acc6:	689a      	ldr	r2, [r3, #8]
 802acc8:	68fb      	ldr	r3, [r7, #12]
 802acca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802accc:	425b      	negs	r3, r3
 802acce:	441a      	add	r2, r3
 802acd0:	68fb      	ldr	r3, [r7, #12]
 802acd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 802acd4:	687b      	ldr	r3, [r7, #4]
 802acd6:	2b02      	cmp	r3, #2
 802acd8:	d105      	bne.n	802ace6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802acda:	693b      	ldr	r3, [r7, #16]
 802acdc:	2b00      	cmp	r3, #0
 802acde:	d002      	beq.n	802ace6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 802ace0:	693b      	ldr	r3, [r7, #16]
 802ace2:	3b01      	subs	r3, #1
 802ace4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 802ace6:	693b      	ldr	r3, [r7, #16]
 802ace8:	1c5a      	adds	r2, r3, #1
 802acea:	68fb      	ldr	r3, [r7, #12]
 802acec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 802acee:	697b      	ldr	r3, [r7, #20]
}
 802acf0:	4618      	mov	r0, r3
 802acf2:	3718      	adds	r7, #24
 802acf4:	46bd      	mov	sp, r7
 802acf6:	bd80      	pop	{r7, pc}

0802acf8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 802acf8:	b580      	push	{r7, lr}
 802acfa:	b082      	sub	sp, #8
 802acfc:	af00      	add	r7, sp, #0
 802acfe:	6078      	str	r0, [r7, #4]
 802ad00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 802ad02:	687b      	ldr	r3, [r7, #4]
 802ad04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ad06:	2b00      	cmp	r3, #0
 802ad08:	d018      	beq.n	802ad3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 802ad0a:	687b      	ldr	r3, [r7, #4]
 802ad0c:	68da      	ldr	r2, [r3, #12]
 802ad0e:	687b      	ldr	r3, [r7, #4]
 802ad10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ad12:	441a      	add	r2, r3
 802ad14:	687b      	ldr	r3, [r7, #4]
 802ad16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 802ad18:	687b      	ldr	r3, [r7, #4]
 802ad1a:	68da      	ldr	r2, [r3, #12]
 802ad1c:	687b      	ldr	r3, [r7, #4]
 802ad1e:	689b      	ldr	r3, [r3, #8]
 802ad20:	429a      	cmp	r2, r3
 802ad22:	d303      	bcc.n	802ad2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 802ad24:	687b      	ldr	r3, [r7, #4]
 802ad26:	681a      	ldr	r2, [r3, #0]
 802ad28:	687b      	ldr	r3, [r7, #4]
 802ad2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 802ad2c:	687b      	ldr	r3, [r7, #4]
 802ad2e:	68d9      	ldr	r1, [r3, #12]
 802ad30:	687b      	ldr	r3, [r7, #4]
 802ad32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ad34:	461a      	mov	r2, r3
 802ad36:	6838      	ldr	r0, [r7, #0]
 802ad38:	f003 fcc4 	bl	802e6c4 <memcpy>
	}
}
 802ad3c:	bf00      	nop
 802ad3e:	3708      	adds	r7, #8
 802ad40:	46bd      	mov	sp, r7
 802ad42:	bd80      	pop	{r7, pc}

0802ad44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 802ad44:	b580      	push	{r7, lr}
 802ad46:	b084      	sub	sp, #16
 802ad48:	af00      	add	r7, sp, #0
 802ad4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 802ad4c:	f001 fdaa 	bl	802c8a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 802ad50:	687b      	ldr	r3, [r7, #4]
 802ad52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802ad56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802ad58:	e011      	b.n	802ad7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802ad5a:	687b      	ldr	r3, [r7, #4]
 802ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ad5e:	2b00      	cmp	r3, #0
 802ad60:	d012      	beq.n	802ad88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802ad62:	687b      	ldr	r3, [r7, #4]
 802ad64:	3324      	adds	r3, #36	; 0x24
 802ad66:	4618      	mov	r0, r3
 802ad68:	f000 fe3c 	bl	802b9e4 <xTaskRemoveFromEventList>
 802ad6c:	4603      	mov	r3, r0
 802ad6e:	2b00      	cmp	r3, #0
 802ad70:	d001      	beq.n	802ad76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 802ad72:	f000 ff17 	bl	802bba4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 802ad76:	7bfb      	ldrb	r3, [r7, #15]
 802ad78:	3b01      	subs	r3, #1
 802ad7a:	b2db      	uxtb	r3, r3
 802ad7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802ad7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802ad82:	2b00      	cmp	r3, #0
 802ad84:	dce9      	bgt.n	802ad5a <prvUnlockQueue+0x16>
 802ad86:	e000      	b.n	802ad8a <prvUnlockQueue+0x46>
					break;
 802ad88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 802ad8a:	687b      	ldr	r3, [r7, #4]
 802ad8c:	22ff      	movs	r2, #255	; 0xff
 802ad8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 802ad92:	f001 fdb7 	bl	802c904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 802ad96:	f001 fd85 	bl	802c8a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 802ad9a:	687b      	ldr	r3, [r7, #4]
 802ad9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802ada0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 802ada2:	e011      	b.n	802adc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802ada4:	687b      	ldr	r3, [r7, #4]
 802ada6:	691b      	ldr	r3, [r3, #16]
 802ada8:	2b00      	cmp	r3, #0
 802adaa:	d012      	beq.n	802add2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802adac:	687b      	ldr	r3, [r7, #4]
 802adae:	3310      	adds	r3, #16
 802adb0:	4618      	mov	r0, r3
 802adb2:	f000 fe17 	bl	802b9e4 <xTaskRemoveFromEventList>
 802adb6:	4603      	mov	r3, r0
 802adb8:	2b00      	cmp	r3, #0
 802adba:	d001      	beq.n	802adc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 802adbc:	f000 fef2 	bl	802bba4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 802adc0:	7bbb      	ldrb	r3, [r7, #14]
 802adc2:	3b01      	subs	r3, #1
 802adc4:	b2db      	uxtb	r3, r3
 802adc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 802adc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802adcc:	2b00      	cmp	r3, #0
 802adce:	dce9      	bgt.n	802ada4 <prvUnlockQueue+0x60>
 802add0:	e000      	b.n	802add4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 802add2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 802add4:	687b      	ldr	r3, [r7, #4]
 802add6:	22ff      	movs	r2, #255	; 0xff
 802add8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 802addc:	f001 fd92 	bl	802c904 <vPortExitCritical>
}
 802ade0:	bf00      	nop
 802ade2:	3710      	adds	r7, #16
 802ade4:	46bd      	mov	sp, r7
 802ade6:	bd80      	pop	{r7, pc}

0802ade8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 802ade8:	b580      	push	{r7, lr}
 802adea:	b084      	sub	sp, #16
 802adec:	af00      	add	r7, sp, #0
 802adee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 802adf0:	f001 fd58 	bl	802c8a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 802adf4:	687b      	ldr	r3, [r7, #4]
 802adf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802adf8:	2b00      	cmp	r3, #0
 802adfa:	d102      	bne.n	802ae02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 802adfc:	2301      	movs	r3, #1
 802adfe:	60fb      	str	r3, [r7, #12]
 802ae00:	e001      	b.n	802ae06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 802ae02:	2300      	movs	r3, #0
 802ae04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 802ae06:	f001 fd7d 	bl	802c904 <vPortExitCritical>

	return xReturn;
 802ae0a:	68fb      	ldr	r3, [r7, #12]
}
 802ae0c:	4618      	mov	r0, r3
 802ae0e:	3710      	adds	r7, #16
 802ae10:	46bd      	mov	sp, r7
 802ae12:	bd80      	pop	{r7, pc}

0802ae14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 802ae14:	b580      	push	{r7, lr}
 802ae16:	b084      	sub	sp, #16
 802ae18:	af00      	add	r7, sp, #0
 802ae1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 802ae1c:	f001 fd42 	bl	802c8a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 802ae20:	687b      	ldr	r3, [r7, #4]
 802ae22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802ae24:	687b      	ldr	r3, [r7, #4]
 802ae26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ae28:	429a      	cmp	r2, r3
 802ae2a:	d102      	bne.n	802ae32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 802ae2c:	2301      	movs	r3, #1
 802ae2e:	60fb      	str	r3, [r7, #12]
 802ae30:	e001      	b.n	802ae36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 802ae32:	2300      	movs	r3, #0
 802ae34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 802ae36:	f001 fd65 	bl	802c904 <vPortExitCritical>

	return xReturn;
 802ae3a:	68fb      	ldr	r3, [r7, #12]
}
 802ae3c:	4618      	mov	r0, r3
 802ae3e:	3710      	adds	r7, #16
 802ae40:	46bd      	mov	sp, r7
 802ae42:	bd80      	pop	{r7, pc}

0802ae44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 802ae44:	b580      	push	{r7, lr}
 802ae46:	b084      	sub	sp, #16
 802ae48:	af00      	add	r7, sp, #0
 802ae4a:	6078      	str	r0, [r7, #4]
 802ae4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802ae4e:	2300      	movs	r3, #0
 802ae50:	60fb      	str	r3, [r7, #12]
 802ae52:	e01e      	b.n	802ae92 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 802ae54:	4a13      	ldr	r2, [pc, #76]	; (802aea4 <vQueueAddToRegistry+0x60>)
 802ae56:	68fb      	ldr	r3, [r7, #12]
 802ae58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802ae5c:	2b00      	cmp	r3, #0
 802ae5e:	d115      	bne.n	802ae8c <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 802ae60:	4910      	ldr	r1, [pc, #64]	; (802aea4 <vQueueAddToRegistry+0x60>)
 802ae62:	68fb      	ldr	r3, [r7, #12]
 802ae64:	683a      	ldr	r2, [r7, #0]
 802ae66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 802ae6a:	4a0e      	ldr	r2, [pc, #56]	; (802aea4 <vQueueAddToRegistry+0x60>)
 802ae6c:	68fb      	ldr	r3, [r7, #12]
 802ae6e:	00db      	lsls	r3, r3, #3
 802ae70:	4413      	add	r3, r2
 802ae72:	687a      	ldr	r2, [r7, #4]
 802ae74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 802ae76:	687b      	ldr	r3, [r7, #4]
 802ae78:	4618      	mov	r0, r3
 802ae7a:	f003 fa6f 	bl	802e35c <SEGGER_SYSVIEW_ShrinkId>
 802ae7e:	4601      	mov	r1, r0
 802ae80:	683b      	ldr	r3, [r7, #0]
 802ae82:	461a      	mov	r2, r3
 802ae84:	2071      	movs	r0, #113	; 0x71
 802ae86:	f002 fd5d 	bl	802d944 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 802ae8a:	e006      	b.n	802ae9a <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802ae8c:	68fb      	ldr	r3, [r7, #12]
 802ae8e:	3301      	adds	r3, #1
 802ae90:	60fb      	str	r3, [r7, #12]
 802ae92:	68fb      	ldr	r3, [r7, #12]
 802ae94:	2b07      	cmp	r3, #7
 802ae96:	d9dd      	bls.n	802ae54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 802ae98:	bf00      	nop
 802ae9a:	bf00      	nop
 802ae9c:	3710      	adds	r7, #16
 802ae9e:	46bd      	mov	sp, r7
 802aea0:	bd80      	pop	{r7, pc}
 802aea2:	bf00      	nop
 802aea4:	2001ee80 	.word	0x2001ee80

0802aea8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 802aea8:	b580      	push	{r7, lr}
 802aeaa:	b086      	sub	sp, #24
 802aeac:	af00      	add	r7, sp, #0
 802aeae:	60f8      	str	r0, [r7, #12]
 802aeb0:	60b9      	str	r1, [r7, #8]
 802aeb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 802aeb4:	68fb      	ldr	r3, [r7, #12]
 802aeb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 802aeb8:	f001 fcf4 	bl	802c8a4 <vPortEnterCritical>
 802aebc:	697b      	ldr	r3, [r7, #20]
 802aebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802aec2:	b25b      	sxtb	r3, r3
 802aec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 802aec8:	d103      	bne.n	802aed2 <vQueueWaitForMessageRestricted+0x2a>
 802aeca:	697b      	ldr	r3, [r7, #20]
 802aecc:	2200      	movs	r2, #0
 802aece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802aed2:	697b      	ldr	r3, [r7, #20]
 802aed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802aed8:	b25b      	sxtb	r3, r3
 802aeda:	f1b3 3fff 	cmp.w	r3, #4294967295
 802aede:	d103      	bne.n	802aee8 <vQueueWaitForMessageRestricted+0x40>
 802aee0:	697b      	ldr	r3, [r7, #20]
 802aee2:	2200      	movs	r2, #0
 802aee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802aee8:	f001 fd0c 	bl	802c904 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 802aeec:	697b      	ldr	r3, [r7, #20]
 802aeee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802aef0:	2b00      	cmp	r3, #0
 802aef2:	d106      	bne.n	802af02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 802aef4:	697b      	ldr	r3, [r7, #20]
 802aef6:	3324      	adds	r3, #36	; 0x24
 802aef8:	687a      	ldr	r2, [r7, #4]
 802aefa:	68b9      	ldr	r1, [r7, #8]
 802aefc:	4618      	mov	r0, r3
 802aefe:	f000 fd43 	bl	802b988 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 802af02:	6978      	ldr	r0, [r7, #20]
 802af04:	f7ff ff1e 	bl	802ad44 <prvUnlockQueue>
	}
 802af08:	bf00      	nop
 802af0a:	3718      	adds	r7, #24
 802af0c:	46bd      	mov	sp, r7
 802af0e:	bd80      	pop	{r7, pc}

0802af10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 802af10:	b580      	push	{r7, lr}
 802af12:	b08e      	sub	sp, #56	; 0x38
 802af14:	af04      	add	r7, sp, #16
 802af16:	60f8      	str	r0, [r7, #12]
 802af18:	60b9      	str	r1, [r7, #8]
 802af1a:	607a      	str	r2, [r7, #4]
 802af1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 802af1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802af20:	2b00      	cmp	r3, #0
 802af22:	d10a      	bne.n	802af3a <xTaskCreateStatic+0x2a>
	__asm volatile
 802af24:	f04f 0350 	mov.w	r3, #80	; 0x50
 802af28:	f383 8811 	msr	BASEPRI, r3
 802af2c:	f3bf 8f6f 	isb	sy
 802af30:	f3bf 8f4f 	dsb	sy
 802af34:	623b      	str	r3, [r7, #32]
}
 802af36:	bf00      	nop
 802af38:	e7fe      	b.n	802af38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 802af3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802af3c:	2b00      	cmp	r3, #0
 802af3e:	d10a      	bne.n	802af56 <xTaskCreateStatic+0x46>
	__asm volatile
 802af40:	f04f 0350 	mov.w	r3, #80	; 0x50
 802af44:	f383 8811 	msr	BASEPRI, r3
 802af48:	f3bf 8f6f 	isb	sy
 802af4c:	f3bf 8f4f 	dsb	sy
 802af50:	61fb      	str	r3, [r7, #28]
}
 802af52:	bf00      	nop
 802af54:	e7fe      	b.n	802af54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 802af56:	23cc      	movs	r3, #204	; 0xcc
 802af58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 802af5a:	693b      	ldr	r3, [r7, #16]
 802af5c:	2bcc      	cmp	r3, #204	; 0xcc
 802af5e:	d00a      	beq.n	802af76 <xTaskCreateStatic+0x66>
	__asm volatile
 802af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 802af64:	f383 8811 	msr	BASEPRI, r3
 802af68:	f3bf 8f6f 	isb	sy
 802af6c:	f3bf 8f4f 	dsb	sy
 802af70:	61bb      	str	r3, [r7, #24]
}
 802af72:	bf00      	nop
 802af74:	e7fe      	b.n	802af74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 802af76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 802af78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802af7a:	2b00      	cmp	r3, #0
 802af7c:	d01e      	beq.n	802afbc <xTaskCreateStatic+0xac>
 802af7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802af80:	2b00      	cmp	r3, #0
 802af82:	d01b      	beq.n	802afbc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 802af84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802af86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 802af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802af8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802af8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 802af8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802af90:	2202      	movs	r2, #2
 802af92:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 802af96:	2300      	movs	r3, #0
 802af98:	9303      	str	r3, [sp, #12]
 802af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802af9c:	9302      	str	r3, [sp, #8]
 802af9e:	f107 0314 	add.w	r3, r7, #20
 802afa2:	9301      	str	r3, [sp, #4]
 802afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802afa6:	9300      	str	r3, [sp, #0]
 802afa8:	683b      	ldr	r3, [r7, #0]
 802afaa:	687a      	ldr	r2, [r7, #4]
 802afac:	68b9      	ldr	r1, [r7, #8]
 802afae:	68f8      	ldr	r0, [r7, #12]
 802afb0:	f000 f850 	bl	802b054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 802afb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802afb6:	f000 f8f3 	bl	802b1a0 <prvAddNewTaskToReadyList>
 802afba:	e001      	b.n	802afc0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 802afbc:	2300      	movs	r3, #0
 802afbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 802afc0:	697b      	ldr	r3, [r7, #20]
	}
 802afc2:	4618      	mov	r0, r3
 802afc4:	3728      	adds	r7, #40	; 0x28
 802afc6:	46bd      	mov	sp, r7
 802afc8:	bd80      	pop	{r7, pc}

0802afca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 802afca:	b580      	push	{r7, lr}
 802afcc:	b08c      	sub	sp, #48	; 0x30
 802afce:	af04      	add	r7, sp, #16
 802afd0:	60f8      	str	r0, [r7, #12]
 802afd2:	60b9      	str	r1, [r7, #8]
 802afd4:	603b      	str	r3, [r7, #0]
 802afd6:	4613      	mov	r3, r2
 802afd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 802afda:	88fb      	ldrh	r3, [r7, #6]
 802afdc:	009b      	lsls	r3, r3, #2
 802afde:	4618      	mov	r0, r3
 802afe0:	f001 fd82 	bl	802cae8 <pvPortMalloc>
 802afe4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 802afe6:	697b      	ldr	r3, [r7, #20]
 802afe8:	2b00      	cmp	r3, #0
 802afea:	d00e      	beq.n	802b00a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 802afec:	20cc      	movs	r0, #204	; 0xcc
 802afee:	f001 fd7b 	bl	802cae8 <pvPortMalloc>
 802aff2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 802aff4:	69fb      	ldr	r3, [r7, #28]
 802aff6:	2b00      	cmp	r3, #0
 802aff8:	d003      	beq.n	802b002 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 802affa:	69fb      	ldr	r3, [r7, #28]
 802affc:	697a      	ldr	r2, [r7, #20]
 802affe:	631a      	str	r2, [r3, #48]	; 0x30
 802b000:	e005      	b.n	802b00e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 802b002:	6978      	ldr	r0, [r7, #20]
 802b004:	f001 fe3c 	bl	802cc80 <vPortFree>
 802b008:	e001      	b.n	802b00e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 802b00a:	2300      	movs	r3, #0
 802b00c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 802b00e:	69fb      	ldr	r3, [r7, #28]
 802b010:	2b00      	cmp	r3, #0
 802b012:	d017      	beq.n	802b044 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 802b014:	69fb      	ldr	r3, [r7, #28]
 802b016:	2200      	movs	r2, #0
 802b018:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 802b01c:	88fa      	ldrh	r2, [r7, #6]
 802b01e:	2300      	movs	r3, #0
 802b020:	9303      	str	r3, [sp, #12]
 802b022:	69fb      	ldr	r3, [r7, #28]
 802b024:	9302      	str	r3, [sp, #8]
 802b026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b028:	9301      	str	r3, [sp, #4]
 802b02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b02c:	9300      	str	r3, [sp, #0]
 802b02e:	683b      	ldr	r3, [r7, #0]
 802b030:	68b9      	ldr	r1, [r7, #8]
 802b032:	68f8      	ldr	r0, [r7, #12]
 802b034:	f000 f80e 	bl	802b054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 802b038:	69f8      	ldr	r0, [r7, #28]
 802b03a:	f000 f8b1 	bl	802b1a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 802b03e:	2301      	movs	r3, #1
 802b040:	61bb      	str	r3, [r7, #24]
 802b042:	e002      	b.n	802b04a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 802b044:	f04f 33ff 	mov.w	r3, #4294967295
 802b048:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 802b04a:	69bb      	ldr	r3, [r7, #24]
	}
 802b04c:	4618      	mov	r0, r3
 802b04e:	3720      	adds	r7, #32
 802b050:	46bd      	mov	sp, r7
 802b052:	bd80      	pop	{r7, pc}

0802b054 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 802b054:	b580      	push	{r7, lr}
 802b056:	b088      	sub	sp, #32
 802b058:	af00      	add	r7, sp, #0
 802b05a:	60f8      	str	r0, [r7, #12]
 802b05c:	60b9      	str	r1, [r7, #8]
 802b05e:	607a      	str	r2, [r7, #4]
 802b060:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 802b062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b064:	6b18      	ldr	r0, [r3, #48]	; 0x30
 802b066:	687b      	ldr	r3, [r7, #4]
 802b068:	009b      	lsls	r3, r3, #2
 802b06a:	461a      	mov	r2, r3
 802b06c:	21a5      	movs	r1, #165	; 0xa5
 802b06e:	f003 fb37 	bl	802e6e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 802b072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b076:	687b      	ldr	r3, [r7, #4]
 802b078:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802b07c:	3b01      	subs	r3, #1
 802b07e:	009b      	lsls	r3, r3, #2
 802b080:	4413      	add	r3, r2
 802b082:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 802b084:	69bb      	ldr	r3, [r7, #24]
 802b086:	f023 0307 	bic.w	r3, r3, #7
 802b08a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 802b08c:	69bb      	ldr	r3, [r7, #24]
 802b08e:	f003 0307 	and.w	r3, r3, #7
 802b092:	2b00      	cmp	r3, #0
 802b094:	d00a      	beq.n	802b0ac <prvInitialiseNewTask+0x58>
	__asm volatile
 802b096:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b09a:	f383 8811 	msr	BASEPRI, r3
 802b09e:	f3bf 8f6f 	isb	sy
 802b0a2:	f3bf 8f4f 	dsb	sy
 802b0a6:	617b      	str	r3, [r7, #20]
}
 802b0a8:	bf00      	nop
 802b0aa:	e7fe      	b.n	802b0aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 802b0ac:	68bb      	ldr	r3, [r7, #8]
 802b0ae:	2b00      	cmp	r3, #0
 802b0b0:	d01f      	beq.n	802b0f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802b0b2:	2300      	movs	r3, #0
 802b0b4:	61fb      	str	r3, [r7, #28]
 802b0b6:	e012      	b.n	802b0de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 802b0b8:	68ba      	ldr	r2, [r7, #8]
 802b0ba:	69fb      	ldr	r3, [r7, #28]
 802b0bc:	4413      	add	r3, r2
 802b0be:	7819      	ldrb	r1, [r3, #0]
 802b0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b0c2:	69fb      	ldr	r3, [r7, #28]
 802b0c4:	4413      	add	r3, r2
 802b0c6:	3334      	adds	r3, #52	; 0x34
 802b0c8:	460a      	mov	r2, r1
 802b0ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 802b0cc:	68ba      	ldr	r2, [r7, #8]
 802b0ce:	69fb      	ldr	r3, [r7, #28]
 802b0d0:	4413      	add	r3, r2
 802b0d2:	781b      	ldrb	r3, [r3, #0]
 802b0d4:	2b00      	cmp	r3, #0
 802b0d6:	d006      	beq.n	802b0e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802b0d8:	69fb      	ldr	r3, [r7, #28]
 802b0da:	3301      	adds	r3, #1
 802b0dc:	61fb      	str	r3, [r7, #28]
 802b0de:	69fb      	ldr	r3, [r7, #28]
 802b0e0:	2b1f      	cmp	r3, #31
 802b0e2:	d9e9      	bls.n	802b0b8 <prvInitialiseNewTask+0x64>
 802b0e4:	e000      	b.n	802b0e8 <prvInitialiseNewTask+0x94>
			{
				break;
 802b0e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 802b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0ea:	2200      	movs	r2, #0
 802b0ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 802b0f0:	e003      	b.n	802b0fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 802b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0f4:	2200      	movs	r2, #0
 802b0f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 802b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b0fc:	2b37      	cmp	r3, #55	; 0x37
 802b0fe:	d901      	bls.n	802b104 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 802b100:	2337      	movs	r3, #55	; 0x37
 802b102:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 802b104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b108:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 802b10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b10c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b10e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 802b110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b112:	2200      	movs	r2, #0
 802b114:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 802b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b118:	3304      	adds	r3, #4
 802b11a:	4618      	mov	r0, r3
 802b11c:	f7fe ffd0 	bl	802a0c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 802b120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b122:	3318      	adds	r3, #24
 802b124:	4618      	mov	r0, r3
 802b126:	f7fe ffcb 	bl	802a0c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 802b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b12c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b12e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802b130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b132:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802b136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b138:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 802b13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b13c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b13e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 802b140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b142:	2200      	movs	r2, #0
 802b144:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 802b148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b14a:	2200      	movs	r2, #0
 802b14c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 802b150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b152:	3364      	adds	r3, #100	; 0x64
 802b154:	2260      	movs	r2, #96	; 0x60
 802b156:	2100      	movs	r1, #0
 802b158:	4618      	mov	r0, r3
 802b15a:	f003 fac1 	bl	802e6e0 <memset>
 802b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b160:	4a0c      	ldr	r2, [pc, #48]	; (802b194 <prvInitialiseNewTask+0x140>)
 802b162:	669a      	str	r2, [r3, #104]	; 0x68
 802b164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b166:	4a0c      	ldr	r2, [pc, #48]	; (802b198 <prvInitialiseNewTask+0x144>)
 802b168:	66da      	str	r2, [r3, #108]	; 0x6c
 802b16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b16c:	4a0b      	ldr	r2, [pc, #44]	; (802b19c <prvInitialiseNewTask+0x148>)
 802b16e:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 802b170:	683a      	ldr	r2, [r7, #0]
 802b172:	68f9      	ldr	r1, [r7, #12]
 802b174:	69b8      	ldr	r0, [r7, #24]
 802b176:	f001 fa69 	bl	802c64c <pxPortInitialiseStack>
 802b17a:	4602      	mov	r2, r0
 802b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b17e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 802b180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b182:	2b00      	cmp	r3, #0
 802b184:	d002      	beq.n	802b18c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 802b186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b18a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802b18c:	bf00      	nop
 802b18e:	3720      	adds	r7, #32
 802b190:	46bd      	mov	sp, r7
 802b192:	bd80      	pop	{r7, pc}
 802b194:	08030aa4 	.word	0x08030aa4
 802b198:	08030ac4 	.word	0x08030ac4
 802b19c:	08030a84 	.word	0x08030a84

0802b1a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 802b1a0:	b5b0      	push	{r4, r5, r7, lr}
 802b1a2:	b084      	sub	sp, #16
 802b1a4:	af02      	add	r7, sp, #8
 802b1a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 802b1a8:	f001 fb7c 	bl	802c8a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 802b1ac:	4b3c      	ldr	r3, [pc, #240]	; (802b2a0 <prvAddNewTaskToReadyList+0x100>)
 802b1ae:	681b      	ldr	r3, [r3, #0]
 802b1b0:	3301      	adds	r3, #1
 802b1b2:	4a3b      	ldr	r2, [pc, #236]	; (802b2a0 <prvAddNewTaskToReadyList+0x100>)
 802b1b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 802b1b6:	4b3b      	ldr	r3, [pc, #236]	; (802b2a4 <prvAddNewTaskToReadyList+0x104>)
 802b1b8:	681b      	ldr	r3, [r3, #0]
 802b1ba:	2b00      	cmp	r3, #0
 802b1bc:	d109      	bne.n	802b1d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 802b1be:	4a39      	ldr	r2, [pc, #228]	; (802b2a4 <prvAddNewTaskToReadyList+0x104>)
 802b1c0:	687b      	ldr	r3, [r7, #4]
 802b1c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 802b1c4:	4b36      	ldr	r3, [pc, #216]	; (802b2a0 <prvAddNewTaskToReadyList+0x100>)
 802b1c6:	681b      	ldr	r3, [r3, #0]
 802b1c8:	2b01      	cmp	r3, #1
 802b1ca:	d110      	bne.n	802b1ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 802b1cc:	f000 fd0e 	bl	802bbec <prvInitialiseTaskLists>
 802b1d0:	e00d      	b.n	802b1ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 802b1d2:	4b35      	ldr	r3, [pc, #212]	; (802b2a8 <prvAddNewTaskToReadyList+0x108>)
 802b1d4:	681b      	ldr	r3, [r3, #0]
 802b1d6:	2b00      	cmp	r3, #0
 802b1d8:	d109      	bne.n	802b1ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 802b1da:	4b32      	ldr	r3, [pc, #200]	; (802b2a4 <prvAddNewTaskToReadyList+0x104>)
 802b1dc:	681b      	ldr	r3, [r3, #0]
 802b1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b1e0:	687b      	ldr	r3, [r7, #4]
 802b1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b1e4:	429a      	cmp	r2, r3
 802b1e6:	d802      	bhi.n	802b1ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 802b1e8:	4a2e      	ldr	r2, [pc, #184]	; (802b2a4 <prvAddNewTaskToReadyList+0x104>)
 802b1ea:	687b      	ldr	r3, [r7, #4]
 802b1ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 802b1ee:	4b2f      	ldr	r3, [pc, #188]	; (802b2ac <prvAddNewTaskToReadyList+0x10c>)
 802b1f0:	681b      	ldr	r3, [r3, #0]
 802b1f2:	3301      	adds	r3, #1
 802b1f4:	4a2d      	ldr	r2, [pc, #180]	; (802b2ac <prvAddNewTaskToReadyList+0x10c>)
 802b1f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 802b1f8:	4b2c      	ldr	r3, [pc, #176]	; (802b2ac <prvAddNewTaskToReadyList+0x10c>)
 802b1fa:	681a      	ldr	r2, [r3, #0]
 802b1fc:	687b      	ldr	r3, [r7, #4]
 802b1fe:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 802b200:	687b      	ldr	r3, [r7, #4]
 802b202:	2b00      	cmp	r3, #0
 802b204:	d016      	beq.n	802b234 <prvAddNewTaskToReadyList+0x94>
 802b206:	687b      	ldr	r3, [r7, #4]
 802b208:	4618      	mov	r0, r3
 802b20a:	f002 ffe1 	bl	802e1d0 <SEGGER_SYSVIEW_OnTaskCreate>
 802b20e:	6878      	ldr	r0, [r7, #4]
 802b210:	687b      	ldr	r3, [r7, #4]
 802b212:	f103 0134 	add.w	r1, r3, #52	; 0x34
 802b216:	687b      	ldr	r3, [r7, #4]
 802b218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b21a:	687b      	ldr	r3, [r7, #4]
 802b21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b21e:	461d      	mov	r5, r3
 802b220:	687b      	ldr	r3, [r7, #4]
 802b222:	681b      	ldr	r3, [r3, #0]
 802b224:	461c      	mov	r4, r3
 802b226:	687b      	ldr	r3, [r7, #4]
 802b228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b22a:	1ae3      	subs	r3, r4, r3
 802b22c:	9300      	str	r3, [sp, #0]
 802b22e:	462b      	mov	r3, r5
 802b230:	f7e9 fe98 	bl	8014f64 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 802b234:	687b      	ldr	r3, [r7, #4]
 802b236:	4618      	mov	r0, r3
 802b238:	f003 f84e 	bl	802e2d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 802b23c:	687b      	ldr	r3, [r7, #4]
 802b23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b240:	4b1b      	ldr	r3, [pc, #108]	; (802b2b0 <prvAddNewTaskToReadyList+0x110>)
 802b242:	681b      	ldr	r3, [r3, #0]
 802b244:	429a      	cmp	r2, r3
 802b246:	d903      	bls.n	802b250 <prvAddNewTaskToReadyList+0xb0>
 802b248:	687b      	ldr	r3, [r7, #4]
 802b24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b24c:	4a18      	ldr	r2, [pc, #96]	; (802b2b0 <prvAddNewTaskToReadyList+0x110>)
 802b24e:	6013      	str	r3, [r2, #0]
 802b250:	687b      	ldr	r3, [r7, #4]
 802b252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b254:	4613      	mov	r3, r2
 802b256:	009b      	lsls	r3, r3, #2
 802b258:	4413      	add	r3, r2
 802b25a:	009b      	lsls	r3, r3, #2
 802b25c:	4a15      	ldr	r2, [pc, #84]	; (802b2b4 <prvAddNewTaskToReadyList+0x114>)
 802b25e:	441a      	add	r2, r3
 802b260:	687b      	ldr	r3, [r7, #4]
 802b262:	3304      	adds	r3, #4
 802b264:	4619      	mov	r1, r3
 802b266:	4610      	mov	r0, r2
 802b268:	f7fe ff37 	bl	802a0da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 802b26c:	f001 fb4a 	bl	802c904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 802b270:	4b0d      	ldr	r3, [pc, #52]	; (802b2a8 <prvAddNewTaskToReadyList+0x108>)
 802b272:	681b      	ldr	r3, [r3, #0]
 802b274:	2b00      	cmp	r3, #0
 802b276:	d00e      	beq.n	802b296 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 802b278:	4b0a      	ldr	r3, [pc, #40]	; (802b2a4 <prvAddNewTaskToReadyList+0x104>)
 802b27a:	681b      	ldr	r3, [r3, #0]
 802b27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b27e:	687b      	ldr	r3, [r7, #4]
 802b280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b282:	429a      	cmp	r2, r3
 802b284:	d207      	bcs.n	802b296 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 802b286:	4b0c      	ldr	r3, [pc, #48]	; (802b2b8 <prvAddNewTaskToReadyList+0x118>)
 802b288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802b28c:	601a      	str	r2, [r3, #0]
 802b28e:	f3bf 8f4f 	dsb	sy
 802b292:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802b296:	bf00      	nop
 802b298:	3708      	adds	r7, #8
 802b29a:	46bd      	mov	sp, r7
 802b29c:	bdb0      	pop	{r4, r5, r7, pc}
 802b29e:	bf00      	nop
 802b2a0:	200026b0 	.word	0x200026b0
 802b2a4:	200021dc 	.word	0x200021dc
 802b2a8:	200026bc 	.word	0x200026bc
 802b2ac:	200026cc 	.word	0x200026cc
 802b2b0:	200026b8 	.word	0x200026b8
 802b2b4:	200021e0 	.word	0x200021e0
 802b2b8:	e000ed04 	.word	0xe000ed04

0802b2bc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 802b2bc:	b580      	push	{r7, lr}
 802b2be:	b08a      	sub	sp, #40	; 0x28
 802b2c0:	af00      	add	r7, sp, #0
 802b2c2:	6078      	str	r0, [r7, #4]
 802b2c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 802b2c6:	2300      	movs	r3, #0
 802b2c8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 802b2ca:	687b      	ldr	r3, [r7, #4]
 802b2cc:	2b00      	cmp	r3, #0
 802b2ce:	d10a      	bne.n	802b2e6 <vTaskDelayUntil+0x2a>
	__asm volatile
 802b2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b2d4:	f383 8811 	msr	BASEPRI, r3
 802b2d8:	f3bf 8f6f 	isb	sy
 802b2dc:	f3bf 8f4f 	dsb	sy
 802b2e0:	617b      	str	r3, [r7, #20]
}
 802b2e2:	bf00      	nop
 802b2e4:	e7fe      	b.n	802b2e4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 802b2e6:	683b      	ldr	r3, [r7, #0]
 802b2e8:	2b00      	cmp	r3, #0
 802b2ea:	d10a      	bne.n	802b302 <vTaskDelayUntil+0x46>
	__asm volatile
 802b2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b2f0:	f383 8811 	msr	BASEPRI, r3
 802b2f4:	f3bf 8f6f 	isb	sy
 802b2f8:	f3bf 8f4f 	dsb	sy
 802b2fc:	613b      	str	r3, [r7, #16]
}
 802b2fe:	bf00      	nop
 802b300:	e7fe      	b.n	802b300 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 802b302:	4b2b      	ldr	r3, [pc, #172]	; (802b3b0 <vTaskDelayUntil+0xf4>)
 802b304:	681b      	ldr	r3, [r3, #0]
 802b306:	2b00      	cmp	r3, #0
 802b308:	d00a      	beq.n	802b320 <vTaskDelayUntil+0x64>
	__asm volatile
 802b30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b30e:	f383 8811 	msr	BASEPRI, r3
 802b312:	f3bf 8f6f 	isb	sy
 802b316:	f3bf 8f4f 	dsb	sy
 802b31a:	60fb      	str	r3, [r7, #12]
}
 802b31c:	bf00      	nop
 802b31e:	e7fe      	b.n	802b31e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 802b320:	f000 f906 	bl	802b530 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 802b324:	4b23      	ldr	r3, [pc, #140]	; (802b3b4 <vTaskDelayUntil+0xf8>)
 802b326:	681b      	ldr	r3, [r3, #0]
 802b328:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 802b32a:	687b      	ldr	r3, [r7, #4]
 802b32c:	681b      	ldr	r3, [r3, #0]
 802b32e:	683a      	ldr	r2, [r7, #0]
 802b330:	4413      	add	r3, r2
 802b332:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 802b334:	687b      	ldr	r3, [r7, #4]
 802b336:	681b      	ldr	r3, [r3, #0]
 802b338:	6a3a      	ldr	r2, [r7, #32]
 802b33a:	429a      	cmp	r2, r3
 802b33c:	d20b      	bcs.n	802b356 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 802b33e:	687b      	ldr	r3, [r7, #4]
 802b340:	681b      	ldr	r3, [r3, #0]
 802b342:	69fa      	ldr	r2, [r7, #28]
 802b344:	429a      	cmp	r2, r3
 802b346:	d211      	bcs.n	802b36c <vTaskDelayUntil+0xb0>
 802b348:	69fa      	ldr	r2, [r7, #28]
 802b34a:	6a3b      	ldr	r3, [r7, #32]
 802b34c:	429a      	cmp	r2, r3
 802b34e:	d90d      	bls.n	802b36c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 802b350:	2301      	movs	r3, #1
 802b352:	627b      	str	r3, [r7, #36]	; 0x24
 802b354:	e00a      	b.n	802b36c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 802b356:	687b      	ldr	r3, [r7, #4]
 802b358:	681b      	ldr	r3, [r3, #0]
 802b35a:	69fa      	ldr	r2, [r7, #28]
 802b35c:	429a      	cmp	r2, r3
 802b35e:	d303      	bcc.n	802b368 <vTaskDelayUntil+0xac>
 802b360:	69fa      	ldr	r2, [r7, #28]
 802b362:	6a3b      	ldr	r3, [r7, #32]
 802b364:	429a      	cmp	r2, r3
 802b366:	d901      	bls.n	802b36c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 802b368:	2301      	movs	r3, #1
 802b36a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 802b36c:	687b      	ldr	r3, [r7, #4]
 802b36e:	69fa      	ldr	r2, [r7, #28]
 802b370:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 802b372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b374:	2b00      	cmp	r3, #0
 802b376:	d009      	beq.n	802b38c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 802b378:	2024      	movs	r0, #36	; 0x24
 802b37a:	f002 fa89 	bl	802d890 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 802b37e:	69fa      	ldr	r2, [r7, #28]
 802b380:	6a3b      	ldr	r3, [r7, #32]
 802b382:	1ad3      	subs	r3, r2, r3
 802b384:	2100      	movs	r1, #0
 802b386:	4618      	mov	r0, r3
 802b388:	f000 fdbe 	bl	802bf08 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 802b38c:	f000 f8de 	bl	802b54c <xTaskResumeAll>
 802b390:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 802b392:	69bb      	ldr	r3, [r7, #24]
 802b394:	2b00      	cmp	r3, #0
 802b396:	d107      	bne.n	802b3a8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 802b398:	4b07      	ldr	r3, [pc, #28]	; (802b3b8 <vTaskDelayUntil+0xfc>)
 802b39a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802b39e:	601a      	str	r2, [r3, #0]
 802b3a0:	f3bf 8f4f 	dsb	sy
 802b3a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 802b3a8:	bf00      	nop
 802b3aa:	3728      	adds	r7, #40	; 0x28
 802b3ac:	46bd      	mov	sp, r7
 802b3ae:	bd80      	pop	{r7, pc}
 802b3b0:	200026d8 	.word	0x200026d8
 802b3b4:	200026b4 	.word	0x200026b4
 802b3b8:	e000ed04 	.word	0xe000ed04

0802b3bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 802b3bc:	b580      	push	{r7, lr}
 802b3be:	b084      	sub	sp, #16
 802b3c0:	af00      	add	r7, sp, #0
 802b3c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 802b3c4:	2300      	movs	r3, #0
 802b3c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 802b3c8:	687b      	ldr	r3, [r7, #4]
 802b3ca:	2b00      	cmp	r3, #0
 802b3cc:	d01b      	beq.n	802b406 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 802b3ce:	4b15      	ldr	r3, [pc, #84]	; (802b424 <vTaskDelay+0x68>)
 802b3d0:	681b      	ldr	r3, [r3, #0]
 802b3d2:	2b00      	cmp	r3, #0
 802b3d4:	d00a      	beq.n	802b3ec <vTaskDelay+0x30>
	__asm volatile
 802b3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b3da:	f383 8811 	msr	BASEPRI, r3
 802b3de:	f3bf 8f6f 	isb	sy
 802b3e2:	f3bf 8f4f 	dsb	sy
 802b3e6:	60bb      	str	r3, [r7, #8]
}
 802b3e8:	bf00      	nop
 802b3ea:	e7fe      	b.n	802b3ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 802b3ec:	f000 f8a0 	bl	802b530 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 802b3f0:	6879      	ldr	r1, [r7, #4]
 802b3f2:	2023      	movs	r0, #35	; 0x23
 802b3f4:	f002 fa6a 	bl	802d8cc <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 802b3f8:	2100      	movs	r1, #0
 802b3fa:	6878      	ldr	r0, [r7, #4]
 802b3fc:	f000 fd84 	bl	802bf08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 802b400:	f000 f8a4 	bl	802b54c <xTaskResumeAll>
 802b404:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 802b406:	68fb      	ldr	r3, [r7, #12]
 802b408:	2b00      	cmp	r3, #0
 802b40a:	d107      	bne.n	802b41c <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 802b40c:	4b06      	ldr	r3, [pc, #24]	; (802b428 <vTaskDelay+0x6c>)
 802b40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802b412:	601a      	str	r2, [r3, #0]
 802b414:	f3bf 8f4f 	dsb	sy
 802b418:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 802b41c:	bf00      	nop
 802b41e:	3710      	adds	r7, #16
 802b420:	46bd      	mov	sp, r7
 802b422:	bd80      	pop	{r7, pc}
 802b424:	200026d8 	.word	0x200026d8
 802b428:	e000ed04 	.word	0xe000ed04

0802b42c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 802b42c:	b580      	push	{r7, lr}
 802b42e:	b08a      	sub	sp, #40	; 0x28
 802b430:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 802b432:	2300      	movs	r3, #0
 802b434:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 802b436:	2300      	movs	r3, #0
 802b438:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 802b43a:	463a      	mov	r2, r7
 802b43c:	1d39      	adds	r1, r7, #4
 802b43e:	f107 0308 	add.w	r3, r7, #8
 802b442:	4618      	mov	r0, r3
 802b444:	f7fe fde8 	bl	802a018 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 802b448:	6839      	ldr	r1, [r7, #0]
 802b44a:	687b      	ldr	r3, [r7, #4]
 802b44c:	68ba      	ldr	r2, [r7, #8]
 802b44e:	9202      	str	r2, [sp, #8]
 802b450:	9301      	str	r3, [sp, #4]
 802b452:	2300      	movs	r3, #0
 802b454:	9300      	str	r3, [sp, #0]
 802b456:	2300      	movs	r3, #0
 802b458:	460a      	mov	r2, r1
 802b45a:	492d      	ldr	r1, [pc, #180]	; (802b510 <vTaskStartScheduler+0xe4>)
 802b45c:	482d      	ldr	r0, [pc, #180]	; (802b514 <vTaskStartScheduler+0xe8>)
 802b45e:	f7ff fd57 	bl	802af10 <xTaskCreateStatic>
 802b462:	4603      	mov	r3, r0
 802b464:	4a2c      	ldr	r2, [pc, #176]	; (802b518 <vTaskStartScheduler+0xec>)
 802b466:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 802b468:	4b2b      	ldr	r3, [pc, #172]	; (802b518 <vTaskStartScheduler+0xec>)
 802b46a:	681b      	ldr	r3, [r3, #0]
 802b46c:	2b00      	cmp	r3, #0
 802b46e:	d002      	beq.n	802b476 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 802b470:	2301      	movs	r3, #1
 802b472:	617b      	str	r3, [r7, #20]
 802b474:	e001      	b.n	802b47a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 802b476:	2300      	movs	r3, #0
 802b478:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 802b47a:	697b      	ldr	r3, [r7, #20]
 802b47c:	2b01      	cmp	r3, #1
 802b47e:	d102      	bne.n	802b486 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 802b480:	f000 fd96 	bl	802bfb0 <xTimerCreateTimerTask>
 802b484:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 802b486:	697b      	ldr	r3, [r7, #20]
 802b488:	2b01      	cmp	r3, #1
 802b48a:	d12e      	bne.n	802b4ea <vTaskStartScheduler+0xbe>
	__asm volatile
 802b48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b490:	f383 8811 	msr	BASEPRI, r3
 802b494:	f3bf 8f6f 	isb	sy
 802b498:	f3bf 8f4f 	dsb	sy
 802b49c:	613b      	str	r3, [r7, #16]
}
 802b49e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 802b4a0:	4b1e      	ldr	r3, [pc, #120]	; (802b51c <vTaskStartScheduler+0xf0>)
 802b4a2:	681b      	ldr	r3, [r3, #0]
 802b4a4:	3364      	adds	r3, #100	; 0x64
 802b4a6:	4a1e      	ldr	r2, [pc, #120]	; (802b520 <vTaskStartScheduler+0xf4>)
 802b4a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 802b4aa:	4b1e      	ldr	r3, [pc, #120]	; (802b524 <vTaskStartScheduler+0xf8>)
 802b4ac:	f04f 32ff 	mov.w	r2, #4294967295
 802b4b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 802b4b2:	4b1d      	ldr	r3, [pc, #116]	; (802b528 <vTaskStartScheduler+0xfc>)
 802b4b4:	2201      	movs	r2, #1
 802b4b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 802b4b8:	4b1c      	ldr	r3, [pc, #112]	; (802b52c <vTaskStartScheduler+0x100>)
 802b4ba:	2200      	movs	r2, #0
 802b4bc:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 802b4be:	4b17      	ldr	r3, [pc, #92]	; (802b51c <vTaskStartScheduler+0xf0>)
 802b4c0:	681b      	ldr	r3, [r3, #0]
 802b4c2:	3334      	adds	r3, #52	; 0x34
 802b4c4:	2205      	movs	r2, #5
 802b4c6:	4912      	ldr	r1, [pc, #72]	; (802b510 <vTaskStartScheduler+0xe4>)
 802b4c8:	4618      	mov	r0, r3
 802b4ca:	f003 f8ed 	bl	802e6a8 <memcmp>
 802b4ce:	4603      	mov	r3, r0
 802b4d0:	2b00      	cmp	r3, #0
 802b4d2:	d005      	beq.n	802b4e0 <vTaskStartScheduler+0xb4>
 802b4d4:	4b11      	ldr	r3, [pc, #68]	; (802b51c <vTaskStartScheduler+0xf0>)
 802b4d6:	681b      	ldr	r3, [r3, #0]
 802b4d8:	4618      	mov	r0, r3
 802b4da:	f002 febb 	bl	802e254 <SEGGER_SYSVIEW_OnTaskStartExec>
 802b4de:	e001      	b.n	802b4e4 <vTaskStartScheduler+0xb8>
 802b4e0:	f002 fe5a 	bl	802e198 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 802b4e4:	f001 f93c 	bl	802c760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 802b4e8:	e00e      	b.n	802b508 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 802b4ea:	697b      	ldr	r3, [r7, #20]
 802b4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b4f0:	d10a      	bne.n	802b508 <vTaskStartScheduler+0xdc>
	__asm volatile
 802b4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b4f6:	f383 8811 	msr	BASEPRI, r3
 802b4fa:	f3bf 8f6f 	isb	sy
 802b4fe:	f3bf 8f4f 	dsb	sy
 802b502:	60fb      	str	r3, [r7, #12]
}
 802b504:	bf00      	nop
 802b506:	e7fe      	b.n	802b506 <vTaskStartScheduler+0xda>
}
 802b508:	bf00      	nop
 802b50a:	3718      	adds	r7, #24
 802b50c:	46bd      	mov	sp, r7
 802b50e:	bd80      	pop	{r7, pc}
 802b510:	08030478 	.word	0x08030478
 802b514:	0802bbbd 	.word	0x0802bbbd
 802b518:	200026d4 	.word	0x200026d4
 802b51c:	200021dc 	.word	0x200021dc
 802b520:	20001444 	.word	0x20001444
 802b524:	200026d0 	.word	0x200026d0
 802b528:	200026bc 	.word	0x200026bc
 802b52c:	200026b4 	.word	0x200026b4

0802b530 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 802b530:	b480      	push	{r7}
 802b532:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 802b534:	4b04      	ldr	r3, [pc, #16]	; (802b548 <vTaskSuspendAll+0x18>)
 802b536:	681b      	ldr	r3, [r3, #0]
 802b538:	3301      	adds	r3, #1
 802b53a:	4a03      	ldr	r2, [pc, #12]	; (802b548 <vTaskSuspendAll+0x18>)
 802b53c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 802b53e:	bf00      	nop
 802b540:	46bd      	mov	sp, r7
 802b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b546:	4770      	bx	lr
 802b548:	200026d8 	.word	0x200026d8

0802b54c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 802b54c:	b580      	push	{r7, lr}
 802b54e:	b084      	sub	sp, #16
 802b550:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 802b552:	2300      	movs	r3, #0
 802b554:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 802b556:	2300      	movs	r3, #0
 802b558:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 802b55a:	4b44      	ldr	r3, [pc, #272]	; (802b66c <xTaskResumeAll+0x120>)
 802b55c:	681b      	ldr	r3, [r3, #0]
 802b55e:	2b00      	cmp	r3, #0
 802b560:	d10a      	bne.n	802b578 <xTaskResumeAll+0x2c>
	__asm volatile
 802b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b566:	f383 8811 	msr	BASEPRI, r3
 802b56a:	f3bf 8f6f 	isb	sy
 802b56e:	f3bf 8f4f 	dsb	sy
 802b572:	603b      	str	r3, [r7, #0]
}
 802b574:	bf00      	nop
 802b576:	e7fe      	b.n	802b576 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 802b578:	f001 f994 	bl	802c8a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 802b57c:	4b3b      	ldr	r3, [pc, #236]	; (802b66c <xTaskResumeAll+0x120>)
 802b57e:	681b      	ldr	r3, [r3, #0]
 802b580:	3b01      	subs	r3, #1
 802b582:	4a3a      	ldr	r2, [pc, #232]	; (802b66c <xTaskResumeAll+0x120>)
 802b584:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802b586:	4b39      	ldr	r3, [pc, #228]	; (802b66c <xTaskResumeAll+0x120>)
 802b588:	681b      	ldr	r3, [r3, #0]
 802b58a:	2b00      	cmp	r3, #0
 802b58c:	d166      	bne.n	802b65c <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 802b58e:	4b38      	ldr	r3, [pc, #224]	; (802b670 <xTaskResumeAll+0x124>)
 802b590:	681b      	ldr	r3, [r3, #0]
 802b592:	2b00      	cmp	r3, #0
 802b594:	d062      	beq.n	802b65c <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 802b596:	e033      	b.n	802b600 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802b598:	4b36      	ldr	r3, [pc, #216]	; (802b674 <xTaskResumeAll+0x128>)
 802b59a:	68db      	ldr	r3, [r3, #12]
 802b59c:	68db      	ldr	r3, [r3, #12]
 802b59e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802b5a0:	68fb      	ldr	r3, [r7, #12]
 802b5a2:	3318      	adds	r3, #24
 802b5a4:	4618      	mov	r0, r3
 802b5a6:	f7fe fdf5 	bl	802a194 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802b5aa:	68fb      	ldr	r3, [r7, #12]
 802b5ac:	3304      	adds	r3, #4
 802b5ae:	4618      	mov	r0, r3
 802b5b0:	f7fe fdf0 	bl	802a194 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 802b5b4:	68fb      	ldr	r3, [r7, #12]
 802b5b6:	4618      	mov	r0, r3
 802b5b8:	f002 fe8e 	bl	802e2d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 802b5bc:	68fb      	ldr	r3, [r7, #12]
 802b5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b5c0:	4b2d      	ldr	r3, [pc, #180]	; (802b678 <xTaskResumeAll+0x12c>)
 802b5c2:	681b      	ldr	r3, [r3, #0]
 802b5c4:	429a      	cmp	r2, r3
 802b5c6:	d903      	bls.n	802b5d0 <xTaskResumeAll+0x84>
 802b5c8:	68fb      	ldr	r3, [r7, #12]
 802b5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b5cc:	4a2a      	ldr	r2, [pc, #168]	; (802b678 <xTaskResumeAll+0x12c>)
 802b5ce:	6013      	str	r3, [r2, #0]
 802b5d0:	68fb      	ldr	r3, [r7, #12]
 802b5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b5d4:	4613      	mov	r3, r2
 802b5d6:	009b      	lsls	r3, r3, #2
 802b5d8:	4413      	add	r3, r2
 802b5da:	009b      	lsls	r3, r3, #2
 802b5dc:	4a27      	ldr	r2, [pc, #156]	; (802b67c <xTaskResumeAll+0x130>)
 802b5de:	441a      	add	r2, r3
 802b5e0:	68fb      	ldr	r3, [r7, #12]
 802b5e2:	3304      	adds	r3, #4
 802b5e4:	4619      	mov	r1, r3
 802b5e6:	4610      	mov	r0, r2
 802b5e8:	f7fe fd77 	bl	802a0da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802b5ec:	68fb      	ldr	r3, [r7, #12]
 802b5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b5f0:	4b23      	ldr	r3, [pc, #140]	; (802b680 <xTaskResumeAll+0x134>)
 802b5f2:	681b      	ldr	r3, [r3, #0]
 802b5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b5f6:	429a      	cmp	r2, r3
 802b5f8:	d302      	bcc.n	802b600 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 802b5fa:	4b22      	ldr	r3, [pc, #136]	; (802b684 <xTaskResumeAll+0x138>)
 802b5fc:	2201      	movs	r2, #1
 802b5fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 802b600:	4b1c      	ldr	r3, [pc, #112]	; (802b674 <xTaskResumeAll+0x128>)
 802b602:	681b      	ldr	r3, [r3, #0]
 802b604:	2b00      	cmp	r3, #0
 802b606:	d1c7      	bne.n	802b598 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 802b608:	68fb      	ldr	r3, [r7, #12]
 802b60a:	2b00      	cmp	r3, #0
 802b60c:	d001      	beq.n	802b612 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 802b60e:	f000 fbc7 	bl	802bda0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 802b612:	4b1d      	ldr	r3, [pc, #116]	; (802b688 <xTaskResumeAll+0x13c>)
 802b614:	681b      	ldr	r3, [r3, #0]
 802b616:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 802b618:	687b      	ldr	r3, [r7, #4]
 802b61a:	2b00      	cmp	r3, #0
 802b61c:	d010      	beq.n	802b640 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 802b61e:	f000 f859 	bl	802b6d4 <xTaskIncrementTick>
 802b622:	4603      	mov	r3, r0
 802b624:	2b00      	cmp	r3, #0
 802b626:	d002      	beq.n	802b62e <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 802b628:	4b16      	ldr	r3, [pc, #88]	; (802b684 <xTaskResumeAll+0x138>)
 802b62a:	2201      	movs	r2, #1
 802b62c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 802b62e:	687b      	ldr	r3, [r7, #4]
 802b630:	3b01      	subs	r3, #1
 802b632:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 802b634:	687b      	ldr	r3, [r7, #4]
 802b636:	2b00      	cmp	r3, #0
 802b638:	d1f1      	bne.n	802b61e <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 802b63a:	4b13      	ldr	r3, [pc, #76]	; (802b688 <xTaskResumeAll+0x13c>)
 802b63c:	2200      	movs	r2, #0
 802b63e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 802b640:	4b10      	ldr	r3, [pc, #64]	; (802b684 <xTaskResumeAll+0x138>)
 802b642:	681b      	ldr	r3, [r3, #0]
 802b644:	2b00      	cmp	r3, #0
 802b646:	d009      	beq.n	802b65c <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 802b648:	2301      	movs	r3, #1
 802b64a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 802b64c:	4b0f      	ldr	r3, [pc, #60]	; (802b68c <xTaskResumeAll+0x140>)
 802b64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802b652:	601a      	str	r2, [r3, #0]
 802b654:	f3bf 8f4f 	dsb	sy
 802b658:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802b65c:	f001 f952 	bl	802c904 <vPortExitCritical>

	return xAlreadyYielded;
 802b660:	68bb      	ldr	r3, [r7, #8]
}
 802b662:	4618      	mov	r0, r3
 802b664:	3710      	adds	r7, #16
 802b666:	46bd      	mov	sp, r7
 802b668:	bd80      	pop	{r7, pc}
 802b66a:	bf00      	nop
 802b66c:	200026d8 	.word	0x200026d8
 802b670:	200026b0 	.word	0x200026b0
 802b674:	20002670 	.word	0x20002670
 802b678:	200026b8 	.word	0x200026b8
 802b67c:	200021e0 	.word	0x200021e0
 802b680:	200021dc 	.word	0x200021dc
 802b684:	200026c4 	.word	0x200026c4
 802b688:	200026c0 	.word	0x200026c0
 802b68c:	e000ed04 	.word	0xe000ed04

0802b690 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 802b690:	b480      	push	{r7}
 802b692:	b083      	sub	sp, #12
 802b694:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 802b696:	4b05      	ldr	r3, [pc, #20]	; (802b6ac <xTaskGetTickCount+0x1c>)
 802b698:	681b      	ldr	r3, [r3, #0]
 802b69a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 802b69c:	687b      	ldr	r3, [r7, #4]
}
 802b69e:	4618      	mov	r0, r3
 802b6a0:	370c      	adds	r7, #12
 802b6a2:	46bd      	mov	sp, r7
 802b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b6a8:	4770      	bx	lr
 802b6aa:	bf00      	nop
 802b6ac:	200026b4 	.word	0x200026b4

0802b6b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 802b6b0:	b580      	push	{r7, lr}
 802b6b2:	b082      	sub	sp, #8
 802b6b4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802b6b6:	f001 f9d7 	bl	802ca68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 802b6ba:	2300      	movs	r3, #0
 802b6bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 802b6be:	4b04      	ldr	r3, [pc, #16]	; (802b6d0 <xTaskGetTickCountFromISR+0x20>)
 802b6c0:	681b      	ldr	r3, [r3, #0]
 802b6c2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 802b6c4:	683b      	ldr	r3, [r7, #0]
}
 802b6c6:	4618      	mov	r0, r3
 802b6c8:	3708      	adds	r7, #8
 802b6ca:	46bd      	mov	sp, r7
 802b6cc:	bd80      	pop	{r7, pc}
 802b6ce:	bf00      	nop
 802b6d0:	200026b4 	.word	0x200026b4

0802b6d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 802b6d4:	b580      	push	{r7, lr}
 802b6d6:	b086      	sub	sp, #24
 802b6d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 802b6da:	2300      	movs	r3, #0
 802b6dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802b6de:	4b51      	ldr	r3, [pc, #324]	; (802b824 <xTaskIncrementTick+0x150>)
 802b6e0:	681b      	ldr	r3, [r3, #0]
 802b6e2:	2b00      	cmp	r3, #0
 802b6e4:	f040 8093 	bne.w	802b80e <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 802b6e8:	4b4f      	ldr	r3, [pc, #316]	; (802b828 <xTaskIncrementTick+0x154>)
 802b6ea:	681b      	ldr	r3, [r3, #0]
 802b6ec:	3301      	adds	r3, #1
 802b6ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 802b6f0:	4a4d      	ldr	r2, [pc, #308]	; (802b828 <xTaskIncrementTick+0x154>)
 802b6f2:	693b      	ldr	r3, [r7, #16]
 802b6f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 802b6f6:	693b      	ldr	r3, [r7, #16]
 802b6f8:	2b00      	cmp	r3, #0
 802b6fa:	d120      	bne.n	802b73e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 802b6fc:	4b4b      	ldr	r3, [pc, #300]	; (802b82c <xTaskIncrementTick+0x158>)
 802b6fe:	681b      	ldr	r3, [r3, #0]
 802b700:	681b      	ldr	r3, [r3, #0]
 802b702:	2b00      	cmp	r3, #0
 802b704:	d00a      	beq.n	802b71c <xTaskIncrementTick+0x48>
	__asm volatile
 802b706:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b70a:	f383 8811 	msr	BASEPRI, r3
 802b70e:	f3bf 8f6f 	isb	sy
 802b712:	f3bf 8f4f 	dsb	sy
 802b716:	603b      	str	r3, [r7, #0]
}
 802b718:	bf00      	nop
 802b71a:	e7fe      	b.n	802b71a <xTaskIncrementTick+0x46>
 802b71c:	4b43      	ldr	r3, [pc, #268]	; (802b82c <xTaskIncrementTick+0x158>)
 802b71e:	681b      	ldr	r3, [r3, #0]
 802b720:	60fb      	str	r3, [r7, #12]
 802b722:	4b43      	ldr	r3, [pc, #268]	; (802b830 <xTaskIncrementTick+0x15c>)
 802b724:	681b      	ldr	r3, [r3, #0]
 802b726:	4a41      	ldr	r2, [pc, #260]	; (802b82c <xTaskIncrementTick+0x158>)
 802b728:	6013      	str	r3, [r2, #0]
 802b72a:	4a41      	ldr	r2, [pc, #260]	; (802b830 <xTaskIncrementTick+0x15c>)
 802b72c:	68fb      	ldr	r3, [r7, #12]
 802b72e:	6013      	str	r3, [r2, #0]
 802b730:	4b40      	ldr	r3, [pc, #256]	; (802b834 <xTaskIncrementTick+0x160>)
 802b732:	681b      	ldr	r3, [r3, #0]
 802b734:	3301      	adds	r3, #1
 802b736:	4a3f      	ldr	r2, [pc, #252]	; (802b834 <xTaskIncrementTick+0x160>)
 802b738:	6013      	str	r3, [r2, #0]
 802b73a:	f000 fb31 	bl	802bda0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 802b73e:	4b3e      	ldr	r3, [pc, #248]	; (802b838 <xTaskIncrementTick+0x164>)
 802b740:	681b      	ldr	r3, [r3, #0]
 802b742:	693a      	ldr	r2, [r7, #16]
 802b744:	429a      	cmp	r2, r3
 802b746:	d34d      	bcc.n	802b7e4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802b748:	4b38      	ldr	r3, [pc, #224]	; (802b82c <xTaskIncrementTick+0x158>)
 802b74a:	681b      	ldr	r3, [r3, #0]
 802b74c:	681b      	ldr	r3, [r3, #0]
 802b74e:	2b00      	cmp	r3, #0
 802b750:	d104      	bne.n	802b75c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802b752:	4b39      	ldr	r3, [pc, #228]	; (802b838 <xTaskIncrementTick+0x164>)
 802b754:	f04f 32ff 	mov.w	r2, #4294967295
 802b758:	601a      	str	r2, [r3, #0]
					break;
 802b75a:	e043      	b.n	802b7e4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802b75c:	4b33      	ldr	r3, [pc, #204]	; (802b82c <xTaskIncrementTick+0x158>)
 802b75e:	681b      	ldr	r3, [r3, #0]
 802b760:	68db      	ldr	r3, [r3, #12]
 802b762:	68db      	ldr	r3, [r3, #12]
 802b764:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 802b766:	68bb      	ldr	r3, [r7, #8]
 802b768:	685b      	ldr	r3, [r3, #4]
 802b76a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 802b76c:	693a      	ldr	r2, [r7, #16]
 802b76e:	687b      	ldr	r3, [r7, #4]
 802b770:	429a      	cmp	r2, r3
 802b772:	d203      	bcs.n	802b77c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 802b774:	4a30      	ldr	r2, [pc, #192]	; (802b838 <xTaskIncrementTick+0x164>)
 802b776:	687b      	ldr	r3, [r7, #4]
 802b778:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 802b77a:	e033      	b.n	802b7e4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802b77c:	68bb      	ldr	r3, [r7, #8]
 802b77e:	3304      	adds	r3, #4
 802b780:	4618      	mov	r0, r3
 802b782:	f7fe fd07 	bl	802a194 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 802b786:	68bb      	ldr	r3, [r7, #8]
 802b788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b78a:	2b00      	cmp	r3, #0
 802b78c:	d004      	beq.n	802b798 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802b78e:	68bb      	ldr	r3, [r7, #8]
 802b790:	3318      	adds	r3, #24
 802b792:	4618      	mov	r0, r3
 802b794:	f7fe fcfe 	bl	802a194 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 802b798:	68bb      	ldr	r3, [r7, #8]
 802b79a:	4618      	mov	r0, r3
 802b79c:	f002 fd9c 	bl	802e2d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 802b7a0:	68bb      	ldr	r3, [r7, #8]
 802b7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b7a4:	4b25      	ldr	r3, [pc, #148]	; (802b83c <xTaskIncrementTick+0x168>)
 802b7a6:	681b      	ldr	r3, [r3, #0]
 802b7a8:	429a      	cmp	r2, r3
 802b7aa:	d903      	bls.n	802b7b4 <xTaskIncrementTick+0xe0>
 802b7ac:	68bb      	ldr	r3, [r7, #8]
 802b7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b7b0:	4a22      	ldr	r2, [pc, #136]	; (802b83c <xTaskIncrementTick+0x168>)
 802b7b2:	6013      	str	r3, [r2, #0]
 802b7b4:	68bb      	ldr	r3, [r7, #8]
 802b7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b7b8:	4613      	mov	r3, r2
 802b7ba:	009b      	lsls	r3, r3, #2
 802b7bc:	4413      	add	r3, r2
 802b7be:	009b      	lsls	r3, r3, #2
 802b7c0:	4a1f      	ldr	r2, [pc, #124]	; (802b840 <xTaskIncrementTick+0x16c>)
 802b7c2:	441a      	add	r2, r3
 802b7c4:	68bb      	ldr	r3, [r7, #8]
 802b7c6:	3304      	adds	r3, #4
 802b7c8:	4619      	mov	r1, r3
 802b7ca:	4610      	mov	r0, r2
 802b7cc:	f7fe fc85 	bl	802a0da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802b7d0:	68bb      	ldr	r3, [r7, #8]
 802b7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b7d4:	4b1b      	ldr	r3, [pc, #108]	; (802b844 <xTaskIncrementTick+0x170>)
 802b7d6:	681b      	ldr	r3, [r3, #0]
 802b7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b7da:	429a      	cmp	r2, r3
 802b7dc:	d3b4      	bcc.n	802b748 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 802b7de:	2301      	movs	r3, #1
 802b7e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802b7e2:	e7b1      	b.n	802b748 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 802b7e4:	4b17      	ldr	r3, [pc, #92]	; (802b844 <xTaskIncrementTick+0x170>)
 802b7e6:	681b      	ldr	r3, [r3, #0]
 802b7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b7ea:	4915      	ldr	r1, [pc, #84]	; (802b840 <xTaskIncrementTick+0x16c>)
 802b7ec:	4613      	mov	r3, r2
 802b7ee:	009b      	lsls	r3, r3, #2
 802b7f0:	4413      	add	r3, r2
 802b7f2:	009b      	lsls	r3, r3, #2
 802b7f4:	440b      	add	r3, r1
 802b7f6:	681b      	ldr	r3, [r3, #0]
 802b7f8:	2b01      	cmp	r3, #1
 802b7fa:	d901      	bls.n	802b800 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 802b7fc:	2301      	movs	r3, #1
 802b7fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 802b800:	4b11      	ldr	r3, [pc, #68]	; (802b848 <xTaskIncrementTick+0x174>)
 802b802:	681b      	ldr	r3, [r3, #0]
 802b804:	2b00      	cmp	r3, #0
 802b806:	d007      	beq.n	802b818 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 802b808:	2301      	movs	r3, #1
 802b80a:	617b      	str	r3, [r7, #20]
 802b80c:	e004      	b.n	802b818 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 802b80e:	4b0f      	ldr	r3, [pc, #60]	; (802b84c <xTaskIncrementTick+0x178>)
 802b810:	681b      	ldr	r3, [r3, #0]
 802b812:	3301      	adds	r3, #1
 802b814:	4a0d      	ldr	r2, [pc, #52]	; (802b84c <xTaskIncrementTick+0x178>)
 802b816:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 802b818:	697b      	ldr	r3, [r7, #20]
}
 802b81a:	4618      	mov	r0, r3
 802b81c:	3718      	adds	r7, #24
 802b81e:	46bd      	mov	sp, r7
 802b820:	bd80      	pop	{r7, pc}
 802b822:	bf00      	nop
 802b824:	200026d8 	.word	0x200026d8
 802b828:	200026b4 	.word	0x200026b4
 802b82c:	20002668 	.word	0x20002668
 802b830:	2000266c 	.word	0x2000266c
 802b834:	200026c8 	.word	0x200026c8
 802b838:	200026d0 	.word	0x200026d0
 802b83c:	200026b8 	.word	0x200026b8
 802b840:	200021e0 	.word	0x200021e0
 802b844:	200021dc 	.word	0x200021dc
 802b848:	200026c4 	.word	0x200026c4
 802b84c:	200026c0 	.word	0x200026c0

0802b850 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 802b850:	b580      	push	{r7, lr}
 802b852:	b084      	sub	sp, #16
 802b854:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 802b856:	4b33      	ldr	r3, [pc, #204]	; (802b924 <vTaskSwitchContext+0xd4>)
 802b858:	681b      	ldr	r3, [r3, #0]
 802b85a:	2b00      	cmp	r3, #0
 802b85c:	d003      	beq.n	802b866 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 802b85e:	4b32      	ldr	r3, [pc, #200]	; (802b928 <vTaskSwitchContext+0xd8>)
 802b860:	2201      	movs	r2, #1
 802b862:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 802b864:	e059      	b.n	802b91a <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 802b866:	4b30      	ldr	r3, [pc, #192]	; (802b928 <vTaskSwitchContext+0xd8>)
 802b868:	2200      	movs	r2, #0
 802b86a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802b86c:	4b2f      	ldr	r3, [pc, #188]	; (802b92c <vTaskSwitchContext+0xdc>)
 802b86e:	681b      	ldr	r3, [r3, #0]
 802b870:	60fb      	str	r3, [r7, #12]
 802b872:	e010      	b.n	802b896 <vTaskSwitchContext+0x46>
 802b874:	68fb      	ldr	r3, [r7, #12]
 802b876:	2b00      	cmp	r3, #0
 802b878:	d10a      	bne.n	802b890 <vTaskSwitchContext+0x40>
	__asm volatile
 802b87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b87e:	f383 8811 	msr	BASEPRI, r3
 802b882:	f3bf 8f6f 	isb	sy
 802b886:	f3bf 8f4f 	dsb	sy
 802b88a:	607b      	str	r3, [r7, #4]
}
 802b88c:	bf00      	nop
 802b88e:	e7fe      	b.n	802b88e <vTaskSwitchContext+0x3e>
 802b890:	68fb      	ldr	r3, [r7, #12]
 802b892:	3b01      	subs	r3, #1
 802b894:	60fb      	str	r3, [r7, #12]
 802b896:	4926      	ldr	r1, [pc, #152]	; (802b930 <vTaskSwitchContext+0xe0>)
 802b898:	68fa      	ldr	r2, [r7, #12]
 802b89a:	4613      	mov	r3, r2
 802b89c:	009b      	lsls	r3, r3, #2
 802b89e:	4413      	add	r3, r2
 802b8a0:	009b      	lsls	r3, r3, #2
 802b8a2:	440b      	add	r3, r1
 802b8a4:	681b      	ldr	r3, [r3, #0]
 802b8a6:	2b00      	cmp	r3, #0
 802b8a8:	d0e4      	beq.n	802b874 <vTaskSwitchContext+0x24>
 802b8aa:	68fa      	ldr	r2, [r7, #12]
 802b8ac:	4613      	mov	r3, r2
 802b8ae:	009b      	lsls	r3, r3, #2
 802b8b0:	4413      	add	r3, r2
 802b8b2:	009b      	lsls	r3, r3, #2
 802b8b4:	4a1e      	ldr	r2, [pc, #120]	; (802b930 <vTaskSwitchContext+0xe0>)
 802b8b6:	4413      	add	r3, r2
 802b8b8:	60bb      	str	r3, [r7, #8]
 802b8ba:	68bb      	ldr	r3, [r7, #8]
 802b8bc:	685b      	ldr	r3, [r3, #4]
 802b8be:	685a      	ldr	r2, [r3, #4]
 802b8c0:	68bb      	ldr	r3, [r7, #8]
 802b8c2:	605a      	str	r2, [r3, #4]
 802b8c4:	68bb      	ldr	r3, [r7, #8]
 802b8c6:	685a      	ldr	r2, [r3, #4]
 802b8c8:	68bb      	ldr	r3, [r7, #8]
 802b8ca:	3308      	adds	r3, #8
 802b8cc:	429a      	cmp	r2, r3
 802b8ce:	d104      	bne.n	802b8da <vTaskSwitchContext+0x8a>
 802b8d0:	68bb      	ldr	r3, [r7, #8]
 802b8d2:	685b      	ldr	r3, [r3, #4]
 802b8d4:	685a      	ldr	r2, [r3, #4]
 802b8d6:	68bb      	ldr	r3, [r7, #8]
 802b8d8:	605a      	str	r2, [r3, #4]
 802b8da:	68bb      	ldr	r3, [r7, #8]
 802b8dc:	685b      	ldr	r3, [r3, #4]
 802b8de:	68db      	ldr	r3, [r3, #12]
 802b8e0:	4a14      	ldr	r2, [pc, #80]	; (802b934 <vTaskSwitchContext+0xe4>)
 802b8e2:	6013      	str	r3, [r2, #0]
 802b8e4:	4a11      	ldr	r2, [pc, #68]	; (802b92c <vTaskSwitchContext+0xdc>)
 802b8e6:	68fb      	ldr	r3, [r7, #12]
 802b8e8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 802b8ea:	4b12      	ldr	r3, [pc, #72]	; (802b934 <vTaskSwitchContext+0xe4>)
 802b8ec:	681b      	ldr	r3, [r3, #0]
 802b8ee:	3334      	adds	r3, #52	; 0x34
 802b8f0:	2205      	movs	r2, #5
 802b8f2:	4911      	ldr	r1, [pc, #68]	; (802b938 <vTaskSwitchContext+0xe8>)
 802b8f4:	4618      	mov	r0, r3
 802b8f6:	f002 fed7 	bl	802e6a8 <memcmp>
 802b8fa:	4603      	mov	r3, r0
 802b8fc:	2b00      	cmp	r3, #0
 802b8fe:	d005      	beq.n	802b90c <vTaskSwitchContext+0xbc>
 802b900:	4b0c      	ldr	r3, [pc, #48]	; (802b934 <vTaskSwitchContext+0xe4>)
 802b902:	681b      	ldr	r3, [r3, #0]
 802b904:	4618      	mov	r0, r3
 802b906:	f002 fca5 	bl	802e254 <SEGGER_SYSVIEW_OnTaskStartExec>
 802b90a:	e001      	b.n	802b910 <vTaskSwitchContext+0xc0>
 802b90c:	f002 fc44 	bl	802e198 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 802b910:	4b08      	ldr	r3, [pc, #32]	; (802b934 <vTaskSwitchContext+0xe4>)
 802b912:	681b      	ldr	r3, [r3, #0]
 802b914:	3364      	adds	r3, #100	; 0x64
 802b916:	4a09      	ldr	r2, [pc, #36]	; (802b93c <vTaskSwitchContext+0xec>)
 802b918:	6013      	str	r3, [r2, #0]
}
 802b91a:	bf00      	nop
 802b91c:	3710      	adds	r7, #16
 802b91e:	46bd      	mov	sp, r7
 802b920:	bd80      	pop	{r7, pc}
 802b922:	bf00      	nop
 802b924:	200026d8 	.word	0x200026d8
 802b928:	200026c4 	.word	0x200026c4
 802b92c:	200026b8 	.word	0x200026b8
 802b930:	200021e0 	.word	0x200021e0
 802b934:	200021dc 	.word	0x200021dc
 802b938:	08030478 	.word	0x08030478
 802b93c:	20001444 	.word	0x20001444

0802b940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 802b940:	b580      	push	{r7, lr}
 802b942:	b084      	sub	sp, #16
 802b944:	af00      	add	r7, sp, #0
 802b946:	6078      	str	r0, [r7, #4]
 802b948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 802b94a:	687b      	ldr	r3, [r7, #4]
 802b94c:	2b00      	cmp	r3, #0
 802b94e:	d10a      	bne.n	802b966 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 802b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b954:	f383 8811 	msr	BASEPRI, r3
 802b958:	f3bf 8f6f 	isb	sy
 802b95c:	f3bf 8f4f 	dsb	sy
 802b960:	60fb      	str	r3, [r7, #12]
}
 802b962:	bf00      	nop
 802b964:	e7fe      	b.n	802b964 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802b966:	4b07      	ldr	r3, [pc, #28]	; (802b984 <vTaskPlaceOnEventList+0x44>)
 802b968:	681b      	ldr	r3, [r3, #0]
 802b96a:	3318      	adds	r3, #24
 802b96c:	4619      	mov	r1, r3
 802b96e:	6878      	ldr	r0, [r7, #4]
 802b970:	f7fe fbd7 	bl	802a122 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 802b974:	2101      	movs	r1, #1
 802b976:	6838      	ldr	r0, [r7, #0]
 802b978:	f000 fac6 	bl	802bf08 <prvAddCurrentTaskToDelayedList>
}
 802b97c:	bf00      	nop
 802b97e:	3710      	adds	r7, #16
 802b980:	46bd      	mov	sp, r7
 802b982:	bd80      	pop	{r7, pc}
 802b984:	200021dc 	.word	0x200021dc

0802b988 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 802b988:	b580      	push	{r7, lr}
 802b98a:	b086      	sub	sp, #24
 802b98c:	af00      	add	r7, sp, #0
 802b98e:	60f8      	str	r0, [r7, #12]
 802b990:	60b9      	str	r1, [r7, #8]
 802b992:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 802b994:	68fb      	ldr	r3, [r7, #12]
 802b996:	2b00      	cmp	r3, #0
 802b998:	d10a      	bne.n	802b9b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 802b99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b99e:	f383 8811 	msr	BASEPRI, r3
 802b9a2:	f3bf 8f6f 	isb	sy
 802b9a6:	f3bf 8f4f 	dsb	sy
 802b9aa:	617b      	str	r3, [r7, #20]
}
 802b9ac:	bf00      	nop
 802b9ae:	e7fe      	b.n	802b9ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802b9b0:	4b0b      	ldr	r3, [pc, #44]	; (802b9e0 <vTaskPlaceOnEventListRestricted+0x58>)
 802b9b2:	681b      	ldr	r3, [r3, #0]
 802b9b4:	3318      	adds	r3, #24
 802b9b6:	4619      	mov	r1, r3
 802b9b8:	68f8      	ldr	r0, [r7, #12]
 802b9ba:	f7fe fb8e 	bl	802a0da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 802b9be:	687b      	ldr	r3, [r7, #4]
 802b9c0:	2b00      	cmp	r3, #0
 802b9c2:	d002      	beq.n	802b9ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 802b9c4:	f04f 33ff 	mov.w	r3, #4294967295
 802b9c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 802b9ca:	2024      	movs	r0, #36	; 0x24
 802b9cc:	f001 ff60 	bl	802d890 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 802b9d0:	6879      	ldr	r1, [r7, #4]
 802b9d2:	68b8      	ldr	r0, [r7, #8]
 802b9d4:	f000 fa98 	bl	802bf08 <prvAddCurrentTaskToDelayedList>
	}
 802b9d8:	bf00      	nop
 802b9da:	3718      	adds	r7, #24
 802b9dc:	46bd      	mov	sp, r7
 802b9de:	bd80      	pop	{r7, pc}
 802b9e0:	200021dc 	.word	0x200021dc

0802b9e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 802b9e4:	b580      	push	{r7, lr}
 802b9e6:	b086      	sub	sp, #24
 802b9e8:	af00      	add	r7, sp, #0
 802b9ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802b9ec:	687b      	ldr	r3, [r7, #4]
 802b9ee:	68db      	ldr	r3, [r3, #12]
 802b9f0:	68db      	ldr	r3, [r3, #12]
 802b9f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 802b9f4:	693b      	ldr	r3, [r7, #16]
 802b9f6:	2b00      	cmp	r3, #0
 802b9f8:	d10a      	bne.n	802ba10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 802b9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b9fe:	f383 8811 	msr	BASEPRI, r3
 802ba02:	f3bf 8f6f 	isb	sy
 802ba06:	f3bf 8f4f 	dsb	sy
 802ba0a:	60fb      	str	r3, [r7, #12]
}
 802ba0c:	bf00      	nop
 802ba0e:	e7fe      	b.n	802ba0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 802ba10:	693b      	ldr	r3, [r7, #16]
 802ba12:	3318      	adds	r3, #24
 802ba14:	4618      	mov	r0, r3
 802ba16:	f7fe fbbd 	bl	802a194 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802ba1a:	4b20      	ldr	r3, [pc, #128]	; (802ba9c <xTaskRemoveFromEventList+0xb8>)
 802ba1c:	681b      	ldr	r3, [r3, #0]
 802ba1e:	2b00      	cmp	r3, #0
 802ba20:	d121      	bne.n	802ba66 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 802ba22:	693b      	ldr	r3, [r7, #16]
 802ba24:	3304      	adds	r3, #4
 802ba26:	4618      	mov	r0, r3
 802ba28:	f7fe fbb4 	bl	802a194 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 802ba2c:	693b      	ldr	r3, [r7, #16]
 802ba2e:	4618      	mov	r0, r3
 802ba30:	f002 fc52 	bl	802e2d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 802ba34:	693b      	ldr	r3, [r7, #16]
 802ba36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802ba38:	4b19      	ldr	r3, [pc, #100]	; (802baa0 <xTaskRemoveFromEventList+0xbc>)
 802ba3a:	681b      	ldr	r3, [r3, #0]
 802ba3c:	429a      	cmp	r2, r3
 802ba3e:	d903      	bls.n	802ba48 <xTaskRemoveFromEventList+0x64>
 802ba40:	693b      	ldr	r3, [r7, #16]
 802ba42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ba44:	4a16      	ldr	r2, [pc, #88]	; (802baa0 <xTaskRemoveFromEventList+0xbc>)
 802ba46:	6013      	str	r3, [r2, #0]
 802ba48:	693b      	ldr	r3, [r7, #16]
 802ba4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802ba4c:	4613      	mov	r3, r2
 802ba4e:	009b      	lsls	r3, r3, #2
 802ba50:	4413      	add	r3, r2
 802ba52:	009b      	lsls	r3, r3, #2
 802ba54:	4a13      	ldr	r2, [pc, #76]	; (802baa4 <xTaskRemoveFromEventList+0xc0>)
 802ba56:	441a      	add	r2, r3
 802ba58:	693b      	ldr	r3, [r7, #16]
 802ba5a:	3304      	adds	r3, #4
 802ba5c:	4619      	mov	r1, r3
 802ba5e:	4610      	mov	r0, r2
 802ba60:	f7fe fb3b 	bl	802a0da <vListInsertEnd>
 802ba64:	e005      	b.n	802ba72 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 802ba66:	693b      	ldr	r3, [r7, #16]
 802ba68:	3318      	adds	r3, #24
 802ba6a:	4619      	mov	r1, r3
 802ba6c:	480e      	ldr	r0, [pc, #56]	; (802baa8 <xTaskRemoveFromEventList+0xc4>)
 802ba6e:	f7fe fb34 	bl	802a0da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 802ba72:	693b      	ldr	r3, [r7, #16]
 802ba74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802ba76:	4b0d      	ldr	r3, [pc, #52]	; (802baac <xTaskRemoveFromEventList+0xc8>)
 802ba78:	681b      	ldr	r3, [r3, #0]
 802ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ba7c:	429a      	cmp	r2, r3
 802ba7e:	d905      	bls.n	802ba8c <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 802ba80:	2301      	movs	r3, #1
 802ba82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 802ba84:	4b0a      	ldr	r3, [pc, #40]	; (802bab0 <xTaskRemoveFromEventList+0xcc>)
 802ba86:	2201      	movs	r2, #1
 802ba88:	601a      	str	r2, [r3, #0]
 802ba8a:	e001      	b.n	802ba90 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 802ba8c:	2300      	movs	r3, #0
 802ba8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 802ba90:	697b      	ldr	r3, [r7, #20]
}
 802ba92:	4618      	mov	r0, r3
 802ba94:	3718      	adds	r7, #24
 802ba96:	46bd      	mov	sp, r7
 802ba98:	bd80      	pop	{r7, pc}
 802ba9a:	bf00      	nop
 802ba9c:	200026d8 	.word	0x200026d8
 802baa0:	200026b8 	.word	0x200026b8
 802baa4:	200021e0 	.word	0x200021e0
 802baa8:	20002670 	.word	0x20002670
 802baac:	200021dc 	.word	0x200021dc
 802bab0:	200026c4 	.word	0x200026c4

0802bab4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 802bab4:	b480      	push	{r7}
 802bab6:	b083      	sub	sp, #12
 802bab8:	af00      	add	r7, sp, #0
 802baba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 802babc:	4b06      	ldr	r3, [pc, #24]	; (802bad8 <vTaskInternalSetTimeOutState+0x24>)
 802babe:	681a      	ldr	r2, [r3, #0]
 802bac0:	687b      	ldr	r3, [r7, #4]
 802bac2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 802bac4:	4b05      	ldr	r3, [pc, #20]	; (802badc <vTaskInternalSetTimeOutState+0x28>)
 802bac6:	681a      	ldr	r2, [r3, #0]
 802bac8:	687b      	ldr	r3, [r7, #4]
 802baca:	605a      	str	r2, [r3, #4]
}
 802bacc:	bf00      	nop
 802bace:	370c      	adds	r7, #12
 802bad0:	46bd      	mov	sp, r7
 802bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bad6:	4770      	bx	lr
 802bad8:	200026c8 	.word	0x200026c8
 802badc:	200026b4 	.word	0x200026b4

0802bae0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 802bae0:	b580      	push	{r7, lr}
 802bae2:	b088      	sub	sp, #32
 802bae4:	af00      	add	r7, sp, #0
 802bae6:	6078      	str	r0, [r7, #4]
 802bae8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 802baea:	687b      	ldr	r3, [r7, #4]
 802baec:	2b00      	cmp	r3, #0
 802baee:	d10a      	bne.n	802bb06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 802baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 802baf4:	f383 8811 	msr	BASEPRI, r3
 802baf8:	f3bf 8f6f 	isb	sy
 802bafc:	f3bf 8f4f 	dsb	sy
 802bb00:	613b      	str	r3, [r7, #16]
}
 802bb02:	bf00      	nop
 802bb04:	e7fe      	b.n	802bb04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 802bb06:	683b      	ldr	r3, [r7, #0]
 802bb08:	2b00      	cmp	r3, #0
 802bb0a:	d10a      	bne.n	802bb22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 802bb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802bb10:	f383 8811 	msr	BASEPRI, r3
 802bb14:	f3bf 8f6f 	isb	sy
 802bb18:	f3bf 8f4f 	dsb	sy
 802bb1c:	60fb      	str	r3, [r7, #12]
}
 802bb1e:	bf00      	nop
 802bb20:	e7fe      	b.n	802bb20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 802bb22:	f000 febf 	bl	802c8a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 802bb26:	4b1d      	ldr	r3, [pc, #116]	; (802bb9c <xTaskCheckForTimeOut+0xbc>)
 802bb28:	681b      	ldr	r3, [r3, #0]
 802bb2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 802bb2c:	687b      	ldr	r3, [r7, #4]
 802bb2e:	685b      	ldr	r3, [r3, #4]
 802bb30:	69ba      	ldr	r2, [r7, #24]
 802bb32:	1ad3      	subs	r3, r2, r3
 802bb34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 802bb36:	683b      	ldr	r3, [r7, #0]
 802bb38:	681b      	ldr	r3, [r3, #0]
 802bb3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802bb3e:	d102      	bne.n	802bb46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 802bb40:	2300      	movs	r3, #0
 802bb42:	61fb      	str	r3, [r7, #28]
 802bb44:	e023      	b.n	802bb8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 802bb46:	687b      	ldr	r3, [r7, #4]
 802bb48:	681a      	ldr	r2, [r3, #0]
 802bb4a:	4b15      	ldr	r3, [pc, #84]	; (802bba0 <xTaskCheckForTimeOut+0xc0>)
 802bb4c:	681b      	ldr	r3, [r3, #0]
 802bb4e:	429a      	cmp	r2, r3
 802bb50:	d007      	beq.n	802bb62 <xTaskCheckForTimeOut+0x82>
 802bb52:	687b      	ldr	r3, [r7, #4]
 802bb54:	685b      	ldr	r3, [r3, #4]
 802bb56:	69ba      	ldr	r2, [r7, #24]
 802bb58:	429a      	cmp	r2, r3
 802bb5a:	d302      	bcc.n	802bb62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 802bb5c:	2301      	movs	r3, #1
 802bb5e:	61fb      	str	r3, [r7, #28]
 802bb60:	e015      	b.n	802bb8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 802bb62:	683b      	ldr	r3, [r7, #0]
 802bb64:	681b      	ldr	r3, [r3, #0]
 802bb66:	697a      	ldr	r2, [r7, #20]
 802bb68:	429a      	cmp	r2, r3
 802bb6a:	d20b      	bcs.n	802bb84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 802bb6c:	683b      	ldr	r3, [r7, #0]
 802bb6e:	681a      	ldr	r2, [r3, #0]
 802bb70:	697b      	ldr	r3, [r7, #20]
 802bb72:	1ad2      	subs	r2, r2, r3
 802bb74:	683b      	ldr	r3, [r7, #0]
 802bb76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 802bb78:	6878      	ldr	r0, [r7, #4]
 802bb7a:	f7ff ff9b 	bl	802bab4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 802bb7e:	2300      	movs	r3, #0
 802bb80:	61fb      	str	r3, [r7, #28]
 802bb82:	e004      	b.n	802bb8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 802bb84:	683b      	ldr	r3, [r7, #0]
 802bb86:	2200      	movs	r2, #0
 802bb88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 802bb8a:	2301      	movs	r3, #1
 802bb8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 802bb8e:	f000 feb9 	bl	802c904 <vPortExitCritical>

	return xReturn;
 802bb92:	69fb      	ldr	r3, [r7, #28]
}
 802bb94:	4618      	mov	r0, r3
 802bb96:	3720      	adds	r7, #32
 802bb98:	46bd      	mov	sp, r7
 802bb9a:	bd80      	pop	{r7, pc}
 802bb9c:	200026b4 	.word	0x200026b4
 802bba0:	200026c8 	.word	0x200026c8

0802bba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 802bba4:	b480      	push	{r7}
 802bba6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 802bba8:	4b03      	ldr	r3, [pc, #12]	; (802bbb8 <vTaskMissedYield+0x14>)
 802bbaa:	2201      	movs	r2, #1
 802bbac:	601a      	str	r2, [r3, #0]
}
 802bbae:	bf00      	nop
 802bbb0:	46bd      	mov	sp, r7
 802bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bbb6:	4770      	bx	lr
 802bbb8:	200026c4 	.word	0x200026c4

0802bbbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 802bbbc:	b580      	push	{r7, lr}
 802bbbe:	b082      	sub	sp, #8
 802bbc0:	af00      	add	r7, sp, #0
 802bbc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 802bbc4:	f000 f852 	bl	802bc6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 802bbc8:	4b06      	ldr	r3, [pc, #24]	; (802bbe4 <prvIdleTask+0x28>)
 802bbca:	681b      	ldr	r3, [r3, #0]
 802bbcc:	2b01      	cmp	r3, #1
 802bbce:	d9f9      	bls.n	802bbc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 802bbd0:	4b05      	ldr	r3, [pc, #20]	; (802bbe8 <prvIdleTask+0x2c>)
 802bbd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802bbd6:	601a      	str	r2, [r3, #0]
 802bbd8:	f3bf 8f4f 	dsb	sy
 802bbdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 802bbe0:	e7f0      	b.n	802bbc4 <prvIdleTask+0x8>
 802bbe2:	bf00      	nop
 802bbe4:	200021e0 	.word	0x200021e0
 802bbe8:	e000ed04 	.word	0xe000ed04

0802bbec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 802bbec:	b580      	push	{r7, lr}
 802bbee:	b082      	sub	sp, #8
 802bbf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802bbf2:	2300      	movs	r3, #0
 802bbf4:	607b      	str	r3, [r7, #4]
 802bbf6:	e00c      	b.n	802bc12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 802bbf8:	687a      	ldr	r2, [r7, #4]
 802bbfa:	4613      	mov	r3, r2
 802bbfc:	009b      	lsls	r3, r3, #2
 802bbfe:	4413      	add	r3, r2
 802bc00:	009b      	lsls	r3, r3, #2
 802bc02:	4a12      	ldr	r2, [pc, #72]	; (802bc4c <prvInitialiseTaskLists+0x60>)
 802bc04:	4413      	add	r3, r2
 802bc06:	4618      	mov	r0, r3
 802bc08:	f7fe fa3a 	bl	802a080 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802bc0c:	687b      	ldr	r3, [r7, #4]
 802bc0e:	3301      	adds	r3, #1
 802bc10:	607b      	str	r3, [r7, #4]
 802bc12:	687b      	ldr	r3, [r7, #4]
 802bc14:	2b37      	cmp	r3, #55	; 0x37
 802bc16:	d9ef      	bls.n	802bbf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 802bc18:	480d      	ldr	r0, [pc, #52]	; (802bc50 <prvInitialiseTaskLists+0x64>)
 802bc1a:	f7fe fa31 	bl	802a080 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 802bc1e:	480d      	ldr	r0, [pc, #52]	; (802bc54 <prvInitialiseTaskLists+0x68>)
 802bc20:	f7fe fa2e 	bl	802a080 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 802bc24:	480c      	ldr	r0, [pc, #48]	; (802bc58 <prvInitialiseTaskLists+0x6c>)
 802bc26:	f7fe fa2b 	bl	802a080 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 802bc2a:	480c      	ldr	r0, [pc, #48]	; (802bc5c <prvInitialiseTaskLists+0x70>)
 802bc2c:	f7fe fa28 	bl	802a080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 802bc30:	480b      	ldr	r0, [pc, #44]	; (802bc60 <prvInitialiseTaskLists+0x74>)
 802bc32:	f7fe fa25 	bl	802a080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 802bc36:	4b0b      	ldr	r3, [pc, #44]	; (802bc64 <prvInitialiseTaskLists+0x78>)
 802bc38:	4a05      	ldr	r2, [pc, #20]	; (802bc50 <prvInitialiseTaskLists+0x64>)
 802bc3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 802bc3c:	4b0a      	ldr	r3, [pc, #40]	; (802bc68 <prvInitialiseTaskLists+0x7c>)
 802bc3e:	4a05      	ldr	r2, [pc, #20]	; (802bc54 <prvInitialiseTaskLists+0x68>)
 802bc40:	601a      	str	r2, [r3, #0]
}
 802bc42:	bf00      	nop
 802bc44:	3708      	adds	r7, #8
 802bc46:	46bd      	mov	sp, r7
 802bc48:	bd80      	pop	{r7, pc}
 802bc4a:	bf00      	nop
 802bc4c:	200021e0 	.word	0x200021e0
 802bc50:	20002640 	.word	0x20002640
 802bc54:	20002654 	.word	0x20002654
 802bc58:	20002670 	.word	0x20002670
 802bc5c:	20002684 	.word	0x20002684
 802bc60:	2000269c 	.word	0x2000269c
 802bc64:	20002668 	.word	0x20002668
 802bc68:	2000266c 	.word	0x2000266c

0802bc6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 802bc6c:	b580      	push	{r7, lr}
 802bc6e:	b082      	sub	sp, #8
 802bc70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802bc72:	e019      	b.n	802bca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 802bc74:	f000 fe16 	bl	802c8a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802bc78:	4b10      	ldr	r3, [pc, #64]	; (802bcbc <prvCheckTasksWaitingTermination+0x50>)
 802bc7a:	68db      	ldr	r3, [r3, #12]
 802bc7c:	68db      	ldr	r3, [r3, #12]
 802bc7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802bc80:	687b      	ldr	r3, [r7, #4]
 802bc82:	3304      	adds	r3, #4
 802bc84:	4618      	mov	r0, r3
 802bc86:	f7fe fa85 	bl	802a194 <uxListRemove>
				--uxCurrentNumberOfTasks;
 802bc8a:	4b0d      	ldr	r3, [pc, #52]	; (802bcc0 <prvCheckTasksWaitingTermination+0x54>)
 802bc8c:	681b      	ldr	r3, [r3, #0]
 802bc8e:	3b01      	subs	r3, #1
 802bc90:	4a0b      	ldr	r2, [pc, #44]	; (802bcc0 <prvCheckTasksWaitingTermination+0x54>)
 802bc92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 802bc94:	4b0b      	ldr	r3, [pc, #44]	; (802bcc4 <prvCheckTasksWaitingTermination+0x58>)
 802bc96:	681b      	ldr	r3, [r3, #0]
 802bc98:	3b01      	subs	r3, #1
 802bc9a:	4a0a      	ldr	r2, [pc, #40]	; (802bcc4 <prvCheckTasksWaitingTermination+0x58>)
 802bc9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 802bc9e:	f000 fe31 	bl	802c904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 802bca2:	6878      	ldr	r0, [r7, #4]
 802bca4:	f000 f848 	bl	802bd38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802bca8:	4b06      	ldr	r3, [pc, #24]	; (802bcc4 <prvCheckTasksWaitingTermination+0x58>)
 802bcaa:	681b      	ldr	r3, [r3, #0]
 802bcac:	2b00      	cmp	r3, #0
 802bcae:	d1e1      	bne.n	802bc74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 802bcb0:	bf00      	nop
 802bcb2:	bf00      	nop
 802bcb4:	3708      	adds	r7, #8
 802bcb6:	46bd      	mov	sp, r7
 802bcb8:	bd80      	pop	{r7, pc}
 802bcba:	bf00      	nop
 802bcbc:	20002684 	.word	0x20002684
 802bcc0:	200026b0 	.word	0x200026b0
 802bcc4:	20002698 	.word	0x20002698

0802bcc8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 802bcc8:	b480      	push	{r7}
 802bcca:	b085      	sub	sp, #20
 802bccc:	af00      	add	r7, sp, #0
 802bcce:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 802bcd0:	2300      	movs	r3, #0
 802bcd2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802bcd4:	e005      	b.n	802bce2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 802bcd6:	687b      	ldr	r3, [r7, #4]
 802bcd8:	3301      	adds	r3, #1
 802bcda:	607b      	str	r3, [r7, #4]
			ulCount++;
 802bcdc:	68fb      	ldr	r3, [r7, #12]
 802bcde:	3301      	adds	r3, #1
 802bce0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802bce2:	687b      	ldr	r3, [r7, #4]
 802bce4:	781b      	ldrb	r3, [r3, #0]
 802bce6:	2ba5      	cmp	r3, #165	; 0xa5
 802bce8:	d0f5      	beq.n	802bcd6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 802bcea:	68fb      	ldr	r3, [r7, #12]
 802bcec:	089b      	lsrs	r3, r3, #2
 802bcee:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 802bcf0:	68fb      	ldr	r3, [r7, #12]
 802bcf2:	b29b      	uxth	r3, r3
	}
 802bcf4:	4618      	mov	r0, r3
 802bcf6:	3714      	adds	r7, #20
 802bcf8:	46bd      	mov	sp, r7
 802bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bcfe:	4770      	bx	lr

0802bd00 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 802bd00:	b580      	push	{r7, lr}
 802bd02:	b086      	sub	sp, #24
 802bd04:	af00      	add	r7, sp, #0
 802bd06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 802bd08:	687b      	ldr	r3, [r7, #4]
 802bd0a:	2b00      	cmp	r3, #0
 802bd0c:	d102      	bne.n	802bd14 <uxTaskGetStackHighWaterMark+0x14>
 802bd0e:	4b09      	ldr	r3, [pc, #36]	; (802bd34 <uxTaskGetStackHighWaterMark+0x34>)
 802bd10:	681b      	ldr	r3, [r3, #0]
 802bd12:	e000      	b.n	802bd16 <uxTaskGetStackHighWaterMark+0x16>
 802bd14:	687b      	ldr	r3, [r7, #4]
 802bd16:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 802bd18:	697b      	ldr	r3, [r7, #20]
 802bd1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bd1c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 802bd1e:	6938      	ldr	r0, [r7, #16]
 802bd20:	f7ff ffd2 	bl	802bcc8 <prvTaskCheckFreeStackSpace>
 802bd24:	4603      	mov	r3, r0
 802bd26:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 802bd28:	68fb      	ldr	r3, [r7, #12]
	}
 802bd2a:	4618      	mov	r0, r3
 802bd2c:	3718      	adds	r7, #24
 802bd2e:	46bd      	mov	sp, r7
 802bd30:	bd80      	pop	{r7, pc}
 802bd32:	bf00      	nop
 802bd34:	200021dc 	.word	0x200021dc

0802bd38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 802bd38:	b580      	push	{r7, lr}
 802bd3a:	b084      	sub	sp, #16
 802bd3c:	af00      	add	r7, sp, #0
 802bd3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 802bd40:	687b      	ldr	r3, [r7, #4]
 802bd42:	3364      	adds	r3, #100	; 0x64
 802bd44:	4618      	mov	r0, r3
 802bd46:	f002 fce1 	bl	802e70c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 802bd4a:	687b      	ldr	r3, [r7, #4]
 802bd4c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 802bd50:	2b00      	cmp	r3, #0
 802bd52:	d108      	bne.n	802bd66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 802bd54:	687b      	ldr	r3, [r7, #4]
 802bd56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bd58:	4618      	mov	r0, r3
 802bd5a:	f000 ff91 	bl	802cc80 <vPortFree>
				vPortFree( pxTCB );
 802bd5e:	6878      	ldr	r0, [r7, #4]
 802bd60:	f000 ff8e 	bl	802cc80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 802bd64:	e018      	b.n	802bd98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 802bd66:	687b      	ldr	r3, [r7, #4]
 802bd68:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 802bd6c:	2b01      	cmp	r3, #1
 802bd6e:	d103      	bne.n	802bd78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 802bd70:	6878      	ldr	r0, [r7, #4]
 802bd72:	f000 ff85 	bl	802cc80 <vPortFree>
	}
 802bd76:	e00f      	b.n	802bd98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 802bd78:	687b      	ldr	r3, [r7, #4]
 802bd7a:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 802bd7e:	2b02      	cmp	r3, #2
 802bd80:	d00a      	beq.n	802bd98 <prvDeleteTCB+0x60>
	__asm volatile
 802bd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 802bd86:	f383 8811 	msr	BASEPRI, r3
 802bd8a:	f3bf 8f6f 	isb	sy
 802bd8e:	f3bf 8f4f 	dsb	sy
 802bd92:	60fb      	str	r3, [r7, #12]
}
 802bd94:	bf00      	nop
 802bd96:	e7fe      	b.n	802bd96 <prvDeleteTCB+0x5e>
	}
 802bd98:	bf00      	nop
 802bd9a:	3710      	adds	r7, #16
 802bd9c:	46bd      	mov	sp, r7
 802bd9e:	bd80      	pop	{r7, pc}

0802bda0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 802bda0:	b480      	push	{r7}
 802bda2:	b083      	sub	sp, #12
 802bda4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802bda6:	4b0c      	ldr	r3, [pc, #48]	; (802bdd8 <prvResetNextTaskUnblockTime+0x38>)
 802bda8:	681b      	ldr	r3, [r3, #0]
 802bdaa:	681b      	ldr	r3, [r3, #0]
 802bdac:	2b00      	cmp	r3, #0
 802bdae:	d104      	bne.n	802bdba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 802bdb0:	4b0a      	ldr	r3, [pc, #40]	; (802bddc <prvResetNextTaskUnblockTime+0x3c>)
 802bdb2:	f04f 32ff 	mov.w	r2, #4294967295
 802bdb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 802bdb8:	e008      	b.n	802bdcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802bdba:	4b07      	ldr	r3, [pc, #28]	; (802bdd8 <prvResetNextTaskUnblockTime+0x38>)
 802bdbc:	681b      	ldr	r3, [r3, #0]
 802bdbe:	68db      	ldr	r3, [r3, #12]
 802bdc0:	68db      	ldr	r3, [r3, #12]
 802bdc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 802bdc4:	687b      	ldr	r3, [r7, #4]
 802bdc6:	685b      	ldr	r3, [r3, #4]
 802bdc8:	4a04      	ldr	r2, [pc, #16]	; (802bddc <prvResetNextTaskUnblockTime+0x3c>)
 802bdca:	6013      	str	r3, [r2, #0]
}
 802bdcc:	bf00      	nop
 802bdce:	370c      	adds	r7, #12
 802bdd0:	46bd      	mov	sp, r7
 802bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bdd6:	4770      	bx	lr
 802bdd8:	20002668 	.word	0x20002668
 802bddc:	200026d0 	.word	0x200026d0

0802bde0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 802bde0:	b480      	push	{r7}
 802bde2:	b083      	sub	sp, #12
 802bde4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 802bde6:	4b0b      	ldr	r3, [pc, #44]	; (802be14 <xTaskGetSchedulerState+0x34>)
 802bde8:	681b      	ldr	r3, [r3, #0]
 802bdea:	2b00      	cmp	r3, #0
 802bdec:	d102      	bne.n	802bdf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 802bdee:	2301      	movs	r3, #1
 802bdf0:	607b      	str	r3, [r7, #4]
 802bdf2:	e008      	b.n	802be06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802bdf4:	4b08      	ldr	r3, [pc, #32]	; (802be18 <xTaskGetSchedulerState+0x38>)
 802bdf6:	681b      	ldr	r3, [r3, #0]
 802bdf8:	2b00      	cmp	r3, #0
 802bdfa:	d102      	bne.n	802be02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 802bdfc:	2302      	movs	r3, #2
 802bdfe:	607b      	str	r3, [r7, #4]
 802be00:	e001      	b.n	802be06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 802be02:	2300      	movs	r3, #0
 802be04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 802be06:	687b      	ldr	r3, [r7, #4]
	}
 802be08:	4618      	mov	r0, r3
 802be0a:	370c      	adds	r7, #12
 802be0c:	46bd      	mov	sp, r7
 802be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802be12:	4770      	bx	lr
 802be14:	200026bc 	.word	0x200026bc
 802be18:	200026d8 	.word	0x200026d8

0802be1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 802be1c:	b580      	push	{r7, lr}
 802be1e:	b086      	sub	sp, #24
 802be20:	af00      	add	r7, sp, #0
 802be22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 802be24:	687b      	ldr	r3, [r7, #4]
 802be26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 802be28:	2300      	movs	r3, #0
 802be2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 802be2c:	687b      	ldr	r3, [r7, #4]
 802be2e:	2b00      	cmp	r3, #0
 802be30:	d05f      	beq.n	802bef2 <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 802be32:	4b32      	ldr	r3, [pc, #200]	; (802befc <xTaskPriorityDisinherit+0xe0>)
 802be34:	681b      	ldr	r3, [r3, #0]
 802be36:	693a      	ldr	r2, [r7, #16]
 802be38:	429a      	cmp	r2, r3
 802be3a:	d00a      	beq.n	802be52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 802be3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802be40:	f383 8811 	msr	BASEPRI, r3
 802be44:	f3bf 8f6f 	isb	sy
 802be48:	f3bf 8f4f 	dsb	sy
 802be4c:	60fb      	str	r3, [r7, #12]
}
 802be4e:	bf00      	nop
 802be50:	e7fe      	b.n	802be50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 802be52:	693b      	ldr	r3, [r7, #16]
 802be54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802be56:	2b00      	cmp	r3, #0
 802be58:	d10a      	bne.n	802be70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 802be5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802be5e:	f383 8811 	msr	BASEPRI, r3
 802be62:	f3bf 8f6f 	isb	sy
 802be66:	f3bf 8f4f 	dsb	sy
 802be6a:	60bb      	str	r3, [r7, #8]
}
 802be6c:	bf00      	nop
 802be6e:	e7fe      	b.n	802be6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 802be70:	693b      	ldr	r3, [r7, #16]
 802be72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802be74:	1e5a      	subs	r2, r3, #1
 802be76:	693b      	ldr	r3, [r7, #16]
 802be78:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 802be7a:	693b      	ldr	r3, [r7, #16]
 802be7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802be7e:	693b      	ldr	r3, [r7, #16]
 802be80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802be82:	429a      	cmp	r2, r3
 802be84:	d035      	beq.n	802bef2 <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 802be86:	693b      	ldr	r3, [r7, #16]
 802be88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802be8a:	2b00      	cmp	r3, #0
 802be8c:	d131      	bne.n	802bef2 <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802be8e:	693b      	ldr	r3, [r7, #16]
 802be90:	3304      	adds	r3, #4
 802be92:	4618      	mov	r0, r3
 802be94:	f7fe f97e 	bl	802a194 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 802be98:	687b      	ldr	r3, [r7, #4]
 802be9a:	4619      	mov	r1, r3
 802be9c:	204a      	movs	r0, #74	; 0x4a
 802be9e:	f001 fd15 	bl	802d8cc <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 802bea2:	693b      	ldr	r3, [r7, #16]
 802bea4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802bea6:	693b      	ldr	r3, [r7, #16]
 802bea8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802beaa:	693b      	ldr	r3, [r7, #16]
 802beac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802beae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802beb2:	693b      	ldr	r3, [r7, #16]
 802beb4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 802beb6:	693b      	ldr	r3, [r7, #16]
 802beb8:	4618      	mov	r0, r3
 802beba:	f002 fa0d 	bl	802e2d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 802bebe:	693b      	ldr	r3, [r7, #16]
 802bec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802bec2:	4b0f      	ldr	r3, [pc, #60]	; (802bf00 <xTaskPriorityDisinherit+0xe4>)
 802bec4:	681b      	ldr	r3, [r3, #0]
 802bec6:	429a      	cmp	r2, r3
 802bec8:	d903      	bls.n	802bed2 <xTaskPriorityDisinherit+0xb6>
 802beca:	693b      	ldr	r3, [r7, #16]
 802becc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bece:	4a0c      	ldr	r2, [pc, #48]	; (802bf00 <xTaskPriorityDisinherit+0xe4>)
 802bed0:	6013      	str	r3, [r2, #0]
 802bed2:	693b      	ldr	r3, [r7, #16]
 802bed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802bed6:	4613      	mov	r3, r2
 802bed8:	009b      	lsls	r3, r3, #2
 802beda:	4413      	add	r3, r2
 802bedc:	009b      	lsls	r3, r3, #2
 802bede:	4a09      	ldr	r2, [pc, #36]	; (802bf04 <xTaskPriorityDisinherit+0xe8>)
 802bee0:	441a      	add	r2, r3
 802bee2:	693b      	ldr	r3, [r7, #16]
 802bee4:	3304      	adds	r3, #4
 802bee6:	4619      	mov	r1, r3
 802bee8:	4610      	mov	r0, r2
 802beea:	f7fe f8f6 	bl	802a0da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 802beee:	2301      	movs	r3, #1
 802bef0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 802bef2:	697b      	ldr	r3, [r7, #20]
	}
 802bef4:	4618      	mov	r0, r3
 802bef6:	3718      	adds	r7, #24
 802bef8:	46bd      	mov	sp, r7
 802befa:	bd80      	pop	{r7, pc}
 802befc:	200021dc 	.word	0x200021dc
 802bf00:	200026b8 	.word	0x200026b8
 802bf04:	200021e0 	.word	0x200021e0

0802bf08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 802bf08:	b580      	push	{r7, lr}
 802bf0a:	b084      	sub	sp, #16
 802bf0c:	af00      	add	r7, sp, #0
 802bf0e:	6078      	str	r0, [r7, #4]
 802bf10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 802bf12:	4b21      	ldr	r3, [pc, #132]	; (802bf98 <prvAddCurrentTaskToDelayedList+0x90>)
 802bf14:	681b      	ldr	r3, [r3, #0]
 802bf16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802bf18:	4b20      	ldr	r3, [pc, #128]	; (802bf9c <prvAddCurrentTaskToDelayedList+0x94>)
 802bf1a:	681b      	ldr	r3, [r3, #0]
 802bf1c:	3304      	adds	r3, #4
 802bf1e:	4618      	mov	r0, r3
 802bf20:	f7fe f938 	bl	802a194 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 802bf24:	687b      	ldr	r3, [r7, #4]
 802bf26:	f1b3 3fff 	cmp.w	r3, #4294967295
 802bf2a:	d10a      	bne.n	802bf42 <prvAddCurrentTaskToDelayedList+0x3a>
 802bf2c:	683b      	ldr	r3, [r7, #0]
 802bf2e:	2b00      	cmp	r3, #0
 802bf30:	d007      	beq.n	802bf42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802bf32:	4b1a      	ldr	r3, [pc, #104]	; (802bf9c <prvAddCurrentTaskToDelayedList+0x94>)
 802bf34:	681b      	ldr	r3, [r3, #0]
 802bf36:	3304      	adds	r3, #4
 802bf38:	4619      	mov	r1, r3
 802bf3a:	4819      	ldr	r0, [pc, #100]	; (802bfa0 <prvAddCurrentTaskToDelayedList+0x98>)
 802bf3c:	f7fe f8cd 	bl	802a0da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 802bf40:	e026      	b.n	802bf90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 802bf42:	68fa      	ldr	r2, [r7, #12]
 802bf44:	687b      	ldr	r3, [r7, #4]
 802bf46:	4413      	add	r3, r2
 802bf48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 802bf4a:	4b14      	ldr	r3, [pc, #80]	; (802bf9c <prvAddCurrentTaskToDelayedList+0x94>)
 802bf4c:	681b      	ldr	r3, [r3, #0]
 802bf4e:	68ba      	ldr	r2, [r7, #8]
 802bf50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 802bf52:	68ba      	ldr	r2, [r7, #8]
 802bf54:	68fb      	ldr	r3, [r7, #12]
 802bf56:	429a      	cmp	r2, r3
 802bf58:	d209      	bcs.n	802bf6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802bf5a:	4b12      	ldr	r3, [pc, #72]	; (802bfa4 <prvAddCurrentTaskToDelayedList+0x9c>)
 802bf5c:	681a      	ldr	r2, [r3, #0]
 802bf5e:	4b0f      	ldr	r3, [pc, #60]	; (802bf9c <prvAddCurrentTaskToDelayedList+0x94>)
 802bf60:	681b      	ldr	r3, [r3, #0]
 802bf62:	3304      	adds	r3, #4
 802bf64:	4619      	mov	r1, r3
 802bf66:	4610      	mov	r0, r2
 802bf68:	f7fe f8db 	bl	802a122 <vListInsert>
}
 802bf6c:	e010      	b.n	802bf90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802bf6e:	4b0e      	ldr	r3, [pc, #56]	; (802bfa8 <prvAddCurrentTaskToDelayedList+0xa0>)
 802bf70:	681a      	ldr	r2, [r3, #0]
 802bf72:	4b0a      	ldr	r3, [pc, #40]	; (802bf9c <prvAddCurrentTaskToDelayedList+0x94>)
 802bf74:	681b      	ldr	r3, [r3, #0]
 802bf76:	3304      	adds	r3, #4
 802bf78:	4619      	mov	r1, r3
 802bf7a:	4610      	mov	r0, r2
 802bf7c:	f7fe f8d1 	bl	802a122 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 802bf80:	4b0a      	ldr	r3, [pc, #40]	; (802bfac <prvAddCurrentTaskToDelayedList+0xa4>)
 802bf82:	681b      	ldr	r3, [r3, #0]
 802bf84:	68ba      	ldr	r2, [r7, #8]
 802bf86:	429a      	cmp	r2, r3
 802bf88:	d202      	bcs.n	802bf90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 802bf8a:	4a08      	ldr	r2, [pc, #32]	; (802bfac <prvAddCurrentTaskToDelayedList+0xa4>)
 802bf8c:	68bb      	ldr	r3, [r7, #8]
 802bf8e:	6013      	str	r3, [r2, #0]
}
 802bf90:	bf00      	nop
 802bf92:	3710      	adds	r7, #16
 802bf94:	46bd      	mov	sp, r7
 802bf96:	bd80      	pop	{r7, pc}
 802bf98:	200026b4 	.word	0x200026b4
 802bf9c:	200021dc 	.word	0x200021dc
 802bfa0:	2000269c 	.word	0x2000269c
 802bfa4:	2000266c 	.word	0x2000266c
 802bfa8:	20002668 	.word	0x20002668
 802bfac:	200026d0 	.word	0x200026d0

0802bfb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 802bfb0:	b580      	push	{r7, lr}
 802bfb2:	b08a      	sub	sp, #40	; 0x28
 802bfb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 802bfb6:	2300      	movs	r3, #0
 802bfb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 802bfba:	f000 fb07 	bl	802c5cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 802bfbe:	4b1c      	ldr	r3, [pc, #112]	; (802c030 <xTimerCreateTimerTask+0x80>)
 802bfc0:	681b      	ldr	r3, [r3, #0]
 802bfc2:	2b00      	cmp	r3, #0
 802bfc4:	d021      	beq.n	802c00a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 802bfc6:	2300      	movs	r3, #0
 802bfc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 802bfca:	2300      	movs	r3, #0
 802bfcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 802bfce:	1d3a      	adds	r2, r7, #4
 802bfd0:	f107 0108 	add.w	r1, r7, #8
 802bfd4:	f107 030c 	add.w	r3, r7, #12
 802bfd8:	4618      	mov	r0, r3
 802bfda:	f7fe f837 	bl	802a04c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 802bfde:	6879      	ldr	r1, [r7, #4]
 802bfe0:	68bb      	ldr	r3, [r7, #8]
 802bfe2:	68fa      	ldr	r2, [r7, #12]
 802bfe4:	9202      	str	r2, [sp, #8]
 802bfe6:	9301      	str	r3, [sp, #4]
 802bfe8:	2302      	movs	r3, #2
 802bfea:	9300      	str	r3, [sp, #0]
 802bfec:	2300      	movs	r3, #0
 802bfee:	460a      	mov	r2, r1
 802bff0:	4910      	ldr	r1, [pc, #64]	; (802c034 <xTimerCreateTimerTask+0x84>)
 802bff2:	4811      	ldr	r0, [pc, #68]	; (802c038 <xTimerCreateTimerTask+0x88>)
 802bff4:	f7fe ff8c 	bl	802af10 <xTaskCreateStatic>
 802bff8:	4603      	mov	r3, r0
 802bffa:	4a10      	ldr	r2, [pc, #64]	; (802c03c <xTimerCreateTimerTask+0x8c>)
 802bffc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 802bffe:	4b0f      	ldr	r3, [pc, #60]	; (802c03c <xTimerCreateTimerTask+0x8c>)
 802c000:	681b      	ldr	r3, [r3, #0]
 802c002:	2b00      	cmp	r3, #0
 802c004:	d001      	beq.n	802c00a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 802c006:	2301      	movs	r3, #1
 802c008:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 802c00a:	697b      	ldr	r3, [r7, #20]
 802c00c:	2b00      	cmp	r3, #0
 802c00e:	d10a      	bne.n	802c026 <xTimerCreateTimerTask+0x76>
	__asm volatile
 802c010:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c014:	f383 8811 	msr	BASEPRI, r3
 802c018:	f3bf 8f6f 	isb	sy
 802c01c:	f3bf 8f4f 	dsb	sy
 802c020:	613b      	str	r3, [r7, #16]
}
 802c022:	bf00      	nop
 802c024:	e7fe      	b.n	802c024 <xTimerCreateTimerTask+0x74>
	return xReturn;
 802c026:	697b      	ldr	r3, [r7, #20]
}
 802c028:	4618      	mov	r0, r3
 802c02a:	3718      	adds	r7, #24
 802c02c:	46bd      	mov	sp, r7
 802c02e:	bd80      	pop	{r7, pc}
 802c030:	2000270c 	.word	0x2000270c
 802c034:	08030480 	.word	0x08030480
 802c038:	0802c175 	.word	0x0802c175
 802c03c:	20002710 	.word	0x20002710

0802c040 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 802c040:	b580      	push	{r7, lr}
 802c042:	b08a      	sub	sp, #40	; 0x28
 802c044:	af00      	add	r7, sp, #0
 802c046:	60f8      	str	r0, [r7, #12]
 802c048:	60b9      	str	r1, [r7, #8]
 802c04a:	607a      	str	r2, [r7, #4]
 802c04c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 802c04e:	2300      	movs	r3, #0
 802c050:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 802c052:	68fb      	ldr	r3, [r7, #12]
 802c054:	2b00      	cmp	r3, #0
 802c056:	d10a      	bne.n	802c06e <xTimerGenericCommand+0x2e>
	__asm volatile
 802c058:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c05c:	f383 8811 	msr	BASEPRI, r3
 802c060:	f3bf 8f6f 	isb	sy
 802c064:	f3bf 8f4f 	dsb	sy
 802c068:	623b      	str	r3, [r7, #32]
}
 802c06a:	bf00      	nop
 802c06c:	e7fe      	b.n	802c06c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 802c06e:	4b1a      	ldr	r3, [pc, #104]	; (802c0d8 <xTimerGenericCommand+0x98>)
 802c070:	681b      	ldr	r3, [r3, #0]
 802c072:	2b00      	cmp	r3, #0
 802c074:	d02a      	beq.n	802c0cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 802c076:	68bb      	ldr	r3, [r7, #8]
 802c078:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 802c07a:	687b      	ldr	r3, [r7, #4]
 802c07c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 802c07e:	68fb      	ldr	r3, [r7, #12]
 802c080:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 802c082:	68bb      	ldr	r3, [r7, #8]
 802c084:	2b05      	cmp	r3, #5
 802c086:	dc18      	bgt.n	802c0ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 802c088:	f7ff feaa 	bl	802bde0 <xTaskGetSchedulerState>
 802c08c:	4603      	mov	r3, r0
 802c08e:	2b02      	cmp	r3, #2
 802c090:	d109      	bne.n	802c0a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 802c092:	4b11      	ldr	r3, [pc, #68]	; (802c0d8 <xTimerGenericCommand+0x98>)
 802c094:	6818      	ldr	r0, [r3, #0]
 802c096:	f107 0110 	add.w	r1, r7, #16
 802c09a:	2300      	movs	r3, #0
 802c09c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802c09e:	f7fe f9e7 	bl	802a470 <xQueueGenericSend>
 802c0a2:	6278      	str	r0, [r7, #36]	; 0x24
 802c0a4:	e012      	b.n	802c0cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 802c0a6:	4b0c      	ldr	r3, [pc, #48]	; (802c0d8 <xTimerGenericCommand+0x98>)
 802c0a8:	6818      	ldr	r0, [r3, #0]
 802c0aa:	f107 0110 	add.w	r1, r7, #16
 802c0ae:	2300      	movs	r3, #0
 802c0b0:	2200      	movs	r2, #0
 802c0b2:	f7fe f9dd 	bl	802a470 <xQueueGenericSend>
 802c0b6:	6278      	str	r0, [r7, #36]	; 0x24
 802c0b8:	e008      	b.n	802c0cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 802c0ba:	4b07      	ldr	r3, [pc, #28]	; (802c0d8 <xTimerGenericCommand+0x98>)
 802c0bc:	6818      	ldr	r0, [r3, #0]
 802c0be:	f107 0110 	add.w	r1, r7, #16
 802c0c2:	2300      	movs	r3, #0
 802c0c4:	683a      	ldr	r2, [r7, #0]
 802c0c6:	f7fe faf9 	bl	802a6bc <xQueueGenericSendFromISR>
 802c0ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 802c0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802c0ce:	4618      	mov	r0, r3
 802c0d0:	3728      	adds	r7, #40	; 0x28
 802c0d2:	46bd      	mov	sp, r7
 802c0d4:	bd80      	pop	{r7, pc}
 802c0d6:	bf00      	nop
 802c0d8:	2000270c 	.word	0x2000270c

0802c0dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 802c0dc:	b580      	push	{r7, lr}
 802c0de:	b088      	sub	sp, #32
 802c0e0:	af02      	add	r7, sp, #8
 802c0e2:	6078      	str	r0, [r7, #4]
 802c0e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802c0e6:	4b22      	ldr	r3, [pc, #136]	; (802c170 <prvProcessExpiredTimer+0x94>)
 802c0e8:	681b      	ldr	r3, [r3, #0]
 802c0ea:	68db      	ldr	r3, [r3, #12]
 802c0ec:	68db      	ldr	r3, [r3, #12]
 802c0ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802c0f0:	697b      	ldr	r3, [r7, #20]
 802c0f2:	3304      	adds	r3, #4
 802c0f4:	4618      	mov	r0, r3
 802c0f6:	f7fe f84d 	bl	802a194 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802c0fa:	697b      	ldr	r3, [r7, #20]
 802c0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c100:	f003 0304 	and.w	r3, r3, #4
 802c104:	2b00      	cmp	r3, #0
 802c106:	d022      	beq.n	802c14e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 802c108:	697b      	ldr	r3, [r7, #20]
 802c10a:	699a      	ldr	r2, [r3, #24]
 802c10c:	687b      	ldr	r3, [r7, #4]
 802c10e:	18d1      	adds	r1, r2, r3
 802c110:	687b      	ldr	r3, [r7, #4]
 802c112:	683a      	ldr	r2, [r7, #0]
 802c114:	6978      	ldr	r0, [r7, #20]
 802c116:	f000 f8d1 	bl	802c2bc <prvInsertTimerInActiveList>
 802c11a:	4603      	mov	r3, r0
 802c11c:	2b00      	cmp	r3, #0
 802c11e:	d01f      	beq.n	802c160 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802c120:	2300      	movs	r3, #0
 802c122:	9300      	str	r3, [sp, #0]
 802c124:	2300      	movs	r3, #0
 802c126:	687a      	ldr	r2, [r7, #4]
 802c128:	2100      	movs	r1, #0
 802c12a:	6978      	ldr	r0, [r7, #20]
 802c12c:	f7ff ff88 	bl	802c040 <xTimerGenericCommand>
 802c130:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 802c132:	693b      	ldr	r3, [r7, #16]
 802c134:	2b00      	cmp	r3, #0
 802c136:	d113      	bne.n	802c160 <prvProcessExpiredTimer+0x84>
	__asm volatile
 802c138:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c13c:	f383 8811 	msr	BASEPRI, r3
 802c140:	f3bf 8f6f 	isb	sy
 802c144:	f3bf 8f4f 	dsb	sy
 802c148:	60fb      	str	r3, [r7, #12]
}
 802c14a:	bf00      	nop
 802c14c:	e7fe      	b.n	802c14c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802c14e:	697b      	ldr	r3, [r7, #20]
 802c150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c154:	f023 0301 	bic.w	r3, r3, #1
 802c158:	b2da      	uxtb	r2, r3
 802c15a:	697b      	ldr	r3, [r7, #20]
 802c15c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802c160:	697b      	ldr	r3, [r7, #20]
 802c162:	6a1b      	ldr	r3, [r3, #32]
 802c164:	6978      	ldr	r0, [r7, #20]
 802c166:	4798      	blx	r3
}
 802c168:	bf00      	nop
 802c16a:	3718      	adds	r7, #24
 802c16c:	46bd      	mov	sp, r7
 802c16e:	bd80      	pop	{r7, pc}
 802c170:	20002704 	.word	0x20002704

0802c174 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 802c174:	b580      	push	{r7, lr}
 802c176:	b084      	sub	sp, #16
 802c178:	af00      	add	r7, sp, #0
 802c17a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 802c17c:	f107 0308 	add.w	r3, r7, #8
 802c180:	4618      	mov	r0, r3
 802c182:	f000 f857 	bl	802c234 <prvGetNextExpireTime>
 802c186:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 802c188:	68bb      	ldr	r3, [r7, #8]
 802c18a:	4619      	mov	r1, r3
 802c18c:	68f8      	ldr	r0, [r7, #12]
 802c18e:	f000 f803 	bl	802c198 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 802c192:	f000 f8d5 	bl	802c340 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 802c196:	e7f1      	b.n	802c17c <prvTimerTask+0x8>

0802c198 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 802c198:	b580      	push	{r7, lr}
 802c19a:	b084      	sub	sp, #16
 802c19c:	af00      	add	r7, sp, #0
 802c19e:	6078      	str	r0, [r7, #4]
 802c1a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 802c1a2:	f7ff f9c5 	bl	802b530 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802c1a6:	f107 0308 	add.w	r3, r7, #8
 802c1aa:	4618      	mov	r0, r3
 802c1ac:	f000 f866 	bl	802c27c <prvSampleTimeNow>
 802c1b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 802c1b2:	68bb      	ldr	r3, [r7, #8]
 802c1b4:	2b00      	cmp	r3, #0
 802c1b6:	d130      	bne.n	802c21a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 802c1b8:	683b      	ldr	r3, [r7, #0]
 802c1ba:	2b00      	cmp	r3, #0
 802c1bc:	d10a      	bne.n	802c1d4 <prvProcessTimerOrBlockTask+0x3c>
 802c1be:	687a      	ldr	r2, [r7, #4]
 802c1c0:	68fb      	ldr	r3, [r7, #12]
 802c1c2:	429a      	cmp	r2, r3
 802c1c4:	d806      	bhi.n	802c1d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 802c1c6:	f7ff f9c1 	bl	802b54c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 802c1ca:	68f9      	ldr	r1, [r7, #12]
 802c1cc:	6878      	ldr	r0, [r7, #4]
 802c1ce:	f7ff ff85 	bl	802c0dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 802c1d2:	e024      	b.n	802c21e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 802c1d4:	683b      	ldr	r3, [r7, #0]
 802c1d6:	2b00      	cmp	r3, #0
 802c1d8:	d008      	beq.n	802c1ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 802c1da:	4b13      	ldr	r3, [pc, #76]	; (802c228 <prvProcessTimerOrBlockTask+0x90>)
 802c1dc:	681b      	ldr	r3, [r3, #0]
 802c1de:	681b      	ldr	r3, [r3, #0]
 802c1e0:	2b00      	cmp	r3, #0
 802c1e2:	d101      	bne.n	802c1e8 <prvProcessTimerOrBlockTask+0x50>
 802c1e4:	2301      	movs	r3, #1
 802c1e6:	e000      	b.n	802c1ea <prvProcessTimerOrBlockTask+0x52>
 802c1e8:	2300      	movs	r3, #0
 802c1ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 802c1ec:	4b0f      	ldr	r3, [pc, #60]	; (802c22c <prvProcessTimerOrBlockTask+0x94>)
 802c1ee:	6818      	ldr	r0, [r3, #0]
 802c1f0:	687a      	ldr	r2, [r7, #4]
 802c1f2:	68fb      	ldr	r3, [r7, #12]
 802c1f4:	1ad3      	subs	r3, r2, r3
 802c1f6:	683a      	ldr	r2, [r7, #0]
 802c1f8:	4619      	mov	r1, r3
 802c1fa:	f7fe fe55 	bl	802aea8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 802c1fe:	f7ff f9a5 	bl	802b54c <xTaskResumeAll>
 802c202:	4603      	mov	r3, r0
 802c204:	2b00      	cmp	r3, #0
 802c206:	d10a      	bne.n	802c21e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 802c208:	4b09      	ldr	r3, [pc, #36]	; (802c230 <prvProcessTimerOrBlockTask+0x98>)
 802c20a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802c20e:	601a      	str	r2, [r3, #0]
 802c210:	f3bf 8f4f 	dsb	sy
 802c214:	f3bf 8f6f 	isb	sy
}
 802c218:	e001      	b.n	802c21e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 802c21a:	f7ff f997 	bl	802b54c <xTaskResumeAll>
}
 802c21e:	bf00      	nop
 802c220:	3710      	adds	r7, #16
 802c222:	46bd      	mov	sp, r7
 802c224:	bd80      	pop	{r7, pc}
 802c226:	bf00      	nop
 802c228:	20002708 	.word	0x20002708
 802c22c:	2000270c 	.word	0x2000270c
 802c230:	e000ed04 	.word	0xe000ed04

0802c234 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 802c234:	b480      	push	{r7}
 802c236:	b085      	sub	sp, #20
 802c238:	af00      	add	r7, sp, #0
 802c23a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 802c23c:	4b0e      	ldr	r3, [pc, #56]	; (802c278 <prvGetNextExpireTime+0x44>)
 802c23e:	681b      	ldr	r3, [r3, #0]
 802c240:	681b      	ldr	r3, [r3, #0]
 802c242:	2b00      	cmp	r3, #0
 802c244:	d101      	bne.n	802c24a <prvGetNextExpireTime+0x16>
 802c246:	2201      	movs	r2, #1
 802c248:	e000      	b.n	802c24c <prvGetNextExpireTime+0x18>
 802c24a:	2200      	movs	r2, #0
 802c24c:	687b      	ldr	r3, [r7, #4]
 802c24e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 802c250:	687b      	ldr	r3, [r7, #4]
 802c252:	681b      	ldr	r3, [r3, #0]
 802c254:	2b00      	cmp	r3, #0
 802c256:	d105      	bne.n	802c264 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802c258:	4b07      	ldr	r3, [pc, #28]	; (802c278 <prvGetNextExpireTime+0x44>)
 802c25a:	681b      	ldr	r3, [r3, #0]
 802c25c:	68db      	ldr	r3, [r3, #12]
 802c25e:	681b      	ldr	r3, [r3, #0]
 802c260:	60fb      	str	r3, [r7, #12]
 802c262:	e001      	b.n	802c268 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 802c264:	2300      	movs	r3, #0
 802c266:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 802c268:	68fb      	ldr	r3, [r7, #12]
}
 802c26a:	4618      	mov	r0, r3
 802c26c:	3714      	adds	r7, #20
 802c26e:	46bd      	mov	sp, r7
 802c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c274:	4770      	bx	lr
 802c276:	bf00      	nop
 802c278:	20002704 	.word	0x20002704

0802c27c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 802c27c:	b580      	push	{r7, lr}
 802c27e:	b084      	sub	sp, #16
 802c280:	af00      	add	r7, sp, #0
 802c282:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 802c284:	f7ff fa04 	bl	802b690 <xTaskGetTickCount>
 802c288:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 802c28a:	4b0b      	ldr	r3, [pc, #44]	; (802c2b8 <prvSampleTimeNow+0x3c>)
 802c28c:	681b      	ldr	r3, [r3, #0]
 802c28e:	68fa      	ldr	r2, [r7, #12]
 802c290:	429a      	cmp	r2, r3
 802c292:	d205      	bcs.n	802c2a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 802c294:	f000 f936 	bl	802c504 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 802c298:	687b      	ldr	r3, [r7, #4]
 802c29a:	2201      	movs	r2, #1
 802c29c:	601a      	str	r2, [r3, #0]
 802c29e:	e002      	b.n	802c2a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 802c2a0:	687b      	ldr	r3, [r7, #4]
 802c2a2:	2200      	movs	r2, #0
 802c2a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 802c2a6:	4a04      	ldr	r2, [pc, #16]	; (802c2b8 <prvSampleTimeNow+0x3c>)
 802c2a8:	68fb      	ldr	r3, [r7, #12]
 802c2aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 802c2ac:	68fb      	ldr	r3, [r7, #12]
}
 802c2ae:	4618      	mov	r0, r3
 802c2b0:	3710      	adds	r7, #16
 802c2b2:	46bd      	mov	sp, r7
 802c2b4:	bd80      	pop	{r7, pc}
 802c2b6:	bf00      	nop
 802c2b8:	20002714 	.word	0x20002714

0802c2bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 802c2bc:	b580      	push	{r7, lr}
 802c2be:	b086      	sub	sp, #24
 802c2c0:	af00      	add	r7, sp, #0
 802c2c2:	60f8      	str	r0, [r7, #12]
 802c2c4:	60b9      	str	r1, [r7, #8]
 802c2c6:	607a      	str	r2, [r7, #4]
 802c2c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 802c2ca:	2300      	movs	r3, #0
 802c2cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 802c2ce:	68fb      	ldr	r3, [r7, #12]
 802c2d0:	68ba      	ldr	r2, [r7, #8]
 802c2d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802c2d4:	68fb      	ldr	r3, [r7, #12]
 802c2d6:	68fa      	ldr	r2, [r7, #12]
 802c2d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 802c2da:	68ba      	ldr	r2, [r7, #8]
 802c2dc:	687b      	ldr	r3, [r7, #4]
 802c2de:	429a      	cmp	r2, r3
 802c2e0:	d812      	bhi.n	802c308 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802c2e2:	687a      	ldr	r2, [r7, #4]
 802c2e4:	683b      	ldr	r3, [r7, #0]
 802c2e6:	1ad2      	subs	r2, r2, r3
 802c2e8:	68fb      	ldr	r3, [r7, #12]
 802c2ea:	699b      	ldr	r3, [r3, #24]
 802c2ec:	429a      	cmp	r2, r3
 802c2ee:	d302      	bcc.n	802c2f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 802c2f0:	2301      	movs	r3, #1
 802c2f2:	617b      	str	r3, [r7, #20]
 802c2f4:	e01b      	b.n	802c32e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 802c2f6:	4b10      	ldr	r3, [pc, #64]	; (802c338 <prvInsertTimerInActiveList+0x7c>)
 802c2f8:	681a      	ldr	r2, [r3, #0]
 802c2fa:	68fb      	ldr	r3, [r7, #12]
 802c2fc:	3304      	adds	r3, #4
 802c2fe:	4619      	mov	r1, r3
 802c300:	4610      	mov	r0, r2
 802c302:	f7fd ff0e 	bl	802a122 <vListInsert>
 802c306:	e012      	b.n	802c32e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 802c308:	687a      	ldr	r2, [r7, #4]
 802c30a:	683b      	ldr	r3, [r7, #0]
 802c30c:	429a      	cmp	r2, r3
 802c30e:	d206      	bcs.n	802c31e <prvInsertTimerInActiveList+0x62>
 802c310:	68ba      	ldr	r2, [r7, #8]
 802c312:	683b      	ldr	r3, [r7, #0]
 802c314:	429a      	cmp	r2, r3
 802c316:	d302      	bcc.n	802c31e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 802c318:	2301      	movs	r3, #1
 802c31a:	617b      	str	r3, [r7, #20]
 802c31c:	e007      	b.n	802c32e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802c31e:	4b07      	ldr	r3, [pc, #28]	; (802c33c <prvInsertTimerInActiveList+0x80>)
 802c320:	681a      	ldr	r2, [r3, #0]
 802c322:	68fb      	ldr	r3, [r7, #12]
 802c324:	3304      	adds	r3, #4
 802c326:	4619      	mov	r1, r3
 802c328:	4610      	mov	r0, r2
 802c32a:	f7fd fefa 	bl	802a122 <vListInsert>
		}
	}

	return xProcessTimerNow;
 802c32e:	697b      	ldr	r3, [r7, #20]
}
 802c330:	4618      	mov	r0, r3
 802c332:	3718      	adds	r7, #24
 802c334:	46bd      	mov	sp, r7
 802c336:	bd80      	pop	{r7, pc}
 802c338:	20002708 	.word	0x20002708
 802c33c:	20002704 	.word	0x20002704

0802c340 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 802c340:	b580      	push	{r7, lr}
 802c342:	b08e      	sub	sp, #56	; 0x38
 802c344:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802c346:	e0ca      	b.n	802c4de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 802c348:	687b      	ldr	r3, [r7, #4]
 802c34a:	2b00      	cmp	r3, #0
 802c34c:	da18      	bge.n	802c380 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 802c34e:	1d3b      	adds	r3, r7, #4
 802c350:	3304      	adds	r3, #4
 802c352:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 802c354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c356:	2b00      	cmp	r3, #0
 802c358:	d10a      	bne.n	802c370 <prvProcessReceivedCommands+0x30>
	__asm volatile
 802c35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c35e:	f383 8811 	msr	BASEPRI, r3
 802c362:	f3bf 8f6f 	isb	sy
 802c366:	f3bf 8f4f 	dsb	sy
 802c36a:	61fb      	str	r3, [r7, #28]
}
 802c36c:	bf00      	nop
 802c36e:	e7fe      	b.n	802c36e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 802c370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c372:	681b      	ldr	r3, [r3, #0]
 802c374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802c376:	6850      	ldr	r0, [r2, #4]
 802c378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802c37a:	6892      	ldr	r2, [r2, #8]
 802c37c:	4611      	mov	r1, r2
 802c37e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 802c380:	687b      	ldr	r3, [r7, #4]
 802c382:	2b00      	cmp	r3, #0
 802c384:	f2c0 80aa 	blt.w	802c4dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 802c388:	68fb      	ldr	r3, [r7, #12]
 802c38a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 802c38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c38e:	695b      	ldr	r3, [r3, #20]
 802c390:	2b00      	cmp	r3, #0
 802c392:	d004      	beq.n	802c39e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802c394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c396:	3304      	adds	r3, #4
 802c398:	4618      	mov	r0, r3
 802c39a:	f7fd fefb 	bl	802a194 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802c39e:	463b      	mov	r3, r7
 802c3a0:	4618      	mov	r0, r3
 802c3a2:	f7ff ff6b 	bl	802c27c <prvSampleTimeNow>
 802c3a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 802c3a8:	687b      	ldr	r3, [r7, #4]
 802c3aa:	2b09      	cmp	r3, #9
 802c3ac:	f200 8097 	bhi.w	802c4de <prvProcessReceivedCommands+0x19e>
 802c3b0:	a201      	add	r2, pc, #4	; (adr r2, 802c3b8 <prvProcessReceivedCommands+0x78>)
 802c3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c3b6:	bf00      	nop
 802c3b8:	0802c3e1 	.word	0x0802c3e1
 802c3bc:	0802c3e1 	.word	0x0802c3e1
 802c3c0:	0802c3e1 	.word	0x0802c3e1
 802c3c4:	0802c455 	.word	0x0802c455
 802c3c8:	0802c469 	.word	0x0802c469
 802c3cc:	0802c4b3 	.word	0x0802c4b3
 802c3d0:	0802c3e1 	.word	0x0802c3e1
 802c3d4:	0802c3e1 	.word	0x0802c3e1
 802c3d8:	0802c455 	.word	0x0802c455
 802c3dc:	0802c469 	.word	0x0802c469
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802c3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c3e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c3e6:	f043 0301 	orr.w	r3, r3, #1
 802c3ea:	b2da      	uxtb	r2, r3
 802c3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c3ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 802c3f2:	68ba      	ldr	r2, [r7, #8]
 802c3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c3f6:	699b      	ldr	r3, [r3, #24]
 802c3f8:	18d1      	adds	r1, r2, r3
 802c3fa:	68bb      	ldr	r3, [r7, #8]
 802c3fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c3fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c400:	f7ff ff5c 	bl	802c2bc <prvInsertTimerInActiveList>
 802c404:	4603      	mov	r3, r0
 802c406:	2b00      	cmp	r3, #0
 802c408:	d069      	beq.n	802c4de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802c40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c40c:	6a1b      	ldr	r3, [r3, #32]
 802c40e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c410:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802c412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c418:	f003 0304 	and.w	r3, r3, #4
 802c41c:	2b00      	cmp	r3, #0
 802c41e:	d05e      	beq.n	802c4de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 802c420:	68ba      	ldr	r2, [r7, #8]
 802c422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c424:	699b      	ldr	r3, [r3, #24]
 802c426:	441a      	add	r2, r3
 802c428:	2300      	movs	r3, #0
 802c42a:	9300      	str	r3, [sp, #0]
 802c42c:	2300      	movs	r3, #0
 802c42e:	2100      	movs	r1, #0
 802c430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c432:	f7ff fe05 	bl	802c040 <xTimerGenericCommand>
 802c436:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 802c438:	6a3b      	ldr	r3, [r7, #32]
 802c43a:	2b00      	cmp	r3, #0
 802c43c:	d14f      	bne.n	802c4de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 802c43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c442:	f383 8811 	msr	BASEPRI, r3
 802c446:	f3bf 8f6f 	isb	sy
 802c44a:	f3bf 8f4f 	dsb	sy
 802c44e:	61bb      	str	r3, [r7, #24]
}
 802c450:	bf00      	nop
 802c452:	e7fe      	b.n	802c452 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802c454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c45a:	f023 0301 	bic.w	r3, r3, #1
 802c45e:	b2da      	uxtb	r2, r3
 802c460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c462:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 802c466:	e03a      	b.n	802c4de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802c468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c46a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c46e:	f043 0301 	orr.w	r3, r3, #1
 802c472:	b2da      	uxtb	r2, r3
 802c474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 802c47a:	68ba      	ldr	r2, [r7, #8]
 802c47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c47e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 802c480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c482:	699b      	ldr	r3, [r3, #24]
 802c484:	2b00      	cmp	r3, #0
 802c486:	d10a      	bne.n	802c49e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 802c488:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c48c:	f383 8811 	msr	BASEPRI, r3
 802c490:	f3bf 8f6f 	isb	sy
 802c494:	f3bf 8f4f 	dsb	sy
 802c498:	617b      	str	r3, [r7, #20]
}
 802c49a:	bf00      	nop
 802c49c:	e7fe      	b.n	802c49c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 802c49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c4a0:	699a      	ldr	r2, [r3, #24]
 802c4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c4a4:	18d1      	adds	r1, r2, r3
 802c4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c4aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c4ac:	f7ff ff06 	bl	802c2bc <prvInsertTimerInActiveList>
					break;
 802c4b0:	e015      	b.n	802c4de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 802c4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c4b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c4b8:	f003 0302 	and.w	r3, r3, #2
 802c4bc:	2b00      	cmp	r3, #0
 802c4be:	d103      	bne.n	802c4c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 802c4c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c4c2:	f000 fbdd 	bl	802cc80 <vPortFree>
 802c4c6:	e00a      	b.n	802c4de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802c4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c4ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c4ce:	f023 0301 	bic.w	r3, r3, #1
 802c4d2:	b2da      	uxtb	r2, r3
 802c4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c4d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 802c4da:	e000      	b.n	802c4de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 802c4dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802c4de:	4b08      	ldr	r3, [pc, #32]	; (802c500 <prvProcessReceivedCommands+0x1c0>)
 802c4e0:	681b      	ldr	r3, [r3, #0]
 802c4e2:	1d39      	adds	r1, r7, #4
 802c4e4:	2200      	movs	r2, #0
 802c4e6:	4618      	mov	r0, r3
 802c4e8:	f7fe f998 	bl	802a81c <xQueueReceive>
 802c4ec:	4603      	mov	r3, r0
 802c4ee:	2b00      	cmp	r3, #0
 802c4f0:	f47f af2a 	bne.w	802c348 <prvProcessReceivedCommands+0x8>
	}
}
 802c4f4:	bf00      	nop
 802c4f6:	bf00      	nop
 802c4f8:	3730      	adds	r7, #48	; 0x30
 802c4fa:	46bd      	mov	sp, r7
 802c4fc:	bd80      	pop	{r7, pc}
 802c4fe:	bf00      	nop
 802c500:	2000270c 	.word	0x2000270c

0802c504 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 802c504:	b580      	push	{r7, lr}
 802c506:	b088      	sub	sp, #32
 802c508:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802c50a:	e048      	b.n	802c59e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802c50c:	4b2d      	ldr	r3, [pc, #180]	; (802c5c4 <prvSwitchTimerLists+0xc0>)
 802c50e:	681b      	ldr	r3, [r3, #0]
 802c510:	68db      	ldr	r3, [r3, #12]
 802c512:	681b      	ldr	r3, [r3, #0]
 802c514:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802c516:	4b2b      	ldr	r3, [pc, #172]	; (802c5c4 <prvSwitchTimerLists+0xc0>)
 802c518:	681b      	ldr	r3, [r3, #0]
 802c51a:	68db      	ldr	r3, [r3, #12]
 802c51c:	68db      	ldr	r3, [r3, #12]
 802c51e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802c520:	68fb      	ldr	r3, [r7, #12]
 802c522:	3304      	adds	r3, #4
 802c524:	4618      	mov	r0, r3
 802c526:	f7fd fe35 	bl	802a194 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802c52a:	68fb      	ldr	r3, [r7, #12]
 802c52c:	6a1b      	ldr	r3, [r3, #32]
 802c52e:	68f8      	ldr	r0, [r7, #12]
 802c530:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802c532:	68fb      	ldr	r3, [r7, #12]
 802c534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c538:	f003 0304 	and.w	r3, r3, #4
 802c53c:	2b00      	cmp	r3, #0
 802c53e:	d02e      	beq.n	802c59e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 802c540:	68fb      	ldr	r3, [r7, #12]
 802c542:	699b      	ldr	r3, [r3, #24]
 802c544:	693a      	ldr	r2, [r7, #16]
 802c546:	4413      	add	r3, r2
 802c548:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 802c54a:	68ba      	ldr	r2, [r7, #8]
 802c54c:	693b      	ldr	r3, [r7, #16]
 802c54e:	429a      	cmp	r2, r3
 802c550:	d90e      	bls.n	802c570 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 802c552:	68fb      	ldr	r3, [r7, #12]
 802c554:	68ba      	ldr	r2, [r7, #8]
 802c556:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802c558:	68fb      	ldr	r3, [r7, #12]
 802c55a:	68fa      	ldr	r2, [r7, #12]
 802c55c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802c55e:	4b19      	ldr	r3, [pc, #100]	; (802c5c4 <prvSwitchTimerLists+0xc0>)
 802c560:	681a      	ldr	r2, [r3, #0]
 802c562:	68fb      	ldr	r3, [r7, #12]
 802c564:	3304      	adds	r3, #4
 802c566:	4619      	mov	r1, r3
 802c568:	4610      	mov	r0, r2
 802c56a:	f7fd fdda 	bl	802a122 <vListInsert>
 802c56e:	e016      	b.n	802c59e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802c570:	2300      	movs	r3, #0
 802c572:	9300      	str	r3, [sp, #0]
 802c574:	2300      	movs	r3, #0
 802c576:	693a      	ldr	r2, [r7, #16]
 802c578:	2100      	movs	r1, #0
 802c57a:	68f8      	ldr	r0, [r7, #12]
 802c57c:	f7ff fd60 	bl	802c040 <xTimerGenericCommand>
 802c580:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 802c582:	687b      	ldr	r3, [r7, #4]
 802c584:	2b00      	cmp	r3, #0
 802c586:	d10a      	bne.n	802c59e <prvSwitchTimerLists+0x9a>
	__asm volatile
 802c588:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c58c:	f383 8811 	msr	BASEPRI, r3
 802c590:	f3bf 8f6f 	isb	sy
 802c594:	f3bf 8f4f 	dsb	sy
 802c598:	603b      	str	r3, [r7, #0]
}
 802c59a:	bf00      	nop
 802c59c:	e7fe      	b.n	802c59c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802c59e:	4b09      	ldr	r3, [pc, #36]	; (802c5c4 <prvSwitchTimerLists+0xc0>)
 802c5a0:	681b      	ldr	r3, [r3, #0]
 802c5a2:	681b      	ldr	r3, [r3, #0]
 802c5a4:	2b00      	cmp	r3, #0
 802c5a6:	d1b1      	bne.n	802c50c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 802c5a8:	4b06      	ldr	r3, [pc, #24]	; (802c5c4 <prvSwitchTimerLists+0xc0>)
 802c5aa:	681b      	ldr	r3, [r3, #0]
 802c5ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 802c5ae:	4b06      	ldr	r3, [pc, #24]	; (802c5c8 <prvSwitchTimerLists+0xc4>)
 802c5b0:	681b      	ldr	r3, [r3, #0]
 802c5b2:	4a04      	ldr	r2, [pc, #16]	; (802c5c4 <prvSwitchTimerLists+0xc0>)
 802c5b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 802c5b6:	4a04      	ldr	r2, [pc, #16]	; (802c5c8 <prvSwitchTimerLists+0xc4>)
 802c5b8:	697b      	ldr	r3, [r7, #20]
 802c5ba:	6013      	str	r3, [r2, #0]
}
 802c5bc:	bf00      	nop
 802c5be:	3718      	adds	r7, #24
 802c5c0:	46bd      	mov	sp, r7
 802c5c2:	bd80      	pop	{r7, pc}
 802c5c4:	20002704 	.word	0x20002704
 802c5c8:	20002708 	.word	0x20002708

0802c5cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 802c5cc:	b580      	push	{r7, lr}
 802c5ce:	b082      	sub	sp, #8
 802c5d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 802c5d2:	f000 f967 	bl	802c8a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 802c5d6:	4b15      	ldr	r3, [pc, #84]	; (802c62c <prvCheckForValidListAndQueue+0x60>)
 802c5d8:	681b      	ldr	r3, [r3, #0]
 802c5da:	2b00      	cmp	r3, #0
 802c5dc:	d120      	bne.n	802c620 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 802c5de:	4814      	ldr	r0, [pc, #80]	; (802c630 <prvCheckForValidListAndQueue+0x64>)
 802c5e0:	f7fd fd4e 	bl	802a080 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 802c5e4:	4813      	ldr	r0, [pc, #76]	; (802c634 <prvCheckForValidListAndQueue+0x68>)
 802c5e6:	f7fd fd4b 	bl	802a080 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 802c5ea:	4b13      	ldr	r3, [pc, #76]	; (802c638 <prvCheckForValidListAndQueue+0x6c>)
 802c5ec:	4a10      	ldr	r2, [pc, #64]	; (802c630 <prvCheckForValidListAndQueue+0x64>)
 802c5ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 802c5f0:	4b12      	ldr	r3, [pc, #72]	; (802c63c <prvCheckForValidListAndQueue+0x70>)
 802c5f2:	4a10      	ldr	r2, [pc, #64]	; (802c634 <prvCheckForValidListAndQueue+0x68>)
 802c5f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 802c5f6:	2300      	movs	r3, #0
 802c5f8:	9300      	str	r3, [sp, #0]
 802c5fa:	4b11      	ldr	r3, [pc, #68]	; (802c640 <prvCheckForValidListAndQueue+0x74>)
 802c5fc:	4a11      	ldr	r2, [pc, #68]	; (802c644 <prvCheckForValidListAndQueue+0x78>)
 802c5fe:	2110      	movs	r1, #16
 802c600:	200a      	movs	r0, #10
 802c602:	f7fd fe59 	bl	802a2b8 <xQueueGenericCreateStatic>
 802c606:	4603      	mov	r3, r0
 802c608:	4a08      	ldr	r2, [pc, #32]	; (802c62c <prvCheckForValidListAndQueue+0x60>)
 802c60a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 802c60c:	4b07      	ldr	r3, [pc, #28]	; (802c62c <prvCheckForValidListAndQueue+0x60>)
 802c60e:	681b      	ldr	r3, [r3, #0]
 802c610:	2b00      	cmp	r3, #0
 802c612:	d005      	beq.n	802c620 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 802c614:	4b05      	ldr	r3, [pc, #20]	; (802c62c <prvCheckForValidListAndQueue+0x60>)
 802c616:	681b      	ldr	r3, [r3, #0]
 802c618:	490b      	ldr	r1, [pc, #44]	; (802c648 <prvCheckForValidListAndQueue+0x7c>)
 802c61a:	4618      	mov	r0, r3
 802c61c:	f7fe fc12 	bl	802ae44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802c620:	f000 f970 	bl	802c904 <vPortExitCritical>
}
 802c624:	bf00      	nop
 802c626:	46bd      	mov	sp, r7
 802c628:	bd80      	pop	{r7, pc}
 802c62a:	bf00      	nop
 802c62c:	2000270c 	.word	0x2000270c
 802c630:	200026dc 	.word	0x200026dc
 802c634:	200026f0 	.word	0x200026f0
 802c638:	20002704 	.word	0x20002704
 802c63c:	20002708 	.word	0x20002708
 802c640:	200027b8 	.word	0x200027b8
 802c644:	20002718 	.word	0x20002718
 802c648:	08030488 	.word	0x08030488

0802c64c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 802c64c:	b480      	push	{r7}
 802c64e:	b085      	sub	sp, #20
 802c650:	af00      	add	r7, sp, #0
 802c652:	60f8      	str	r0, [r7, #12]
 802c654:	60b9      	str	r1, [r7, #8]
 802c656:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 802c658:	68fb      	ldr	r3, [r7, #12]
 802c65a:	3b04      	subs	r3, #4
 802c65c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 802c65e:	68fb      	ldr	r3, [r7, #12]
 802c660:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802c664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802c666:	68fb      	ldr	r3, [r7, #12]
 802c668:	3b04      	subs	r3, #4
 802c66a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 802c66c:	68bb      	ldr	r3, [r7, #8]
 802c66e:	f023 0201 	bic.w	r2, r3, #1
 802c672:	68fb      	ldr	r3, [r7, #12]
 802c674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802c676:	68fb      	ldr	r3, [r7, #12]
 802c678:	3b04      	subs	r3, #4
 802c67a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 802c67c:	4a0c      	ldr	r2, [pc, #48]	; (802c6b0 <pxPortInitialiseStack+0x64>)
 802c67e:	68fb      	ldr	r3, [r7, #12]
 802c680:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 802c682:	68fb      	ldr	r3, [r7, #12]
 802c684:	3b14      	subs	r3, #20
 802c686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 802c688:	687a      	ldr	r2, [r7, #4]
 802c68a:	68fb      	ldr	r3, [r7, #12]
 802c68c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 802c68e:	68fb      	ldr	r3, [r7, #12]
 802c690:	3b04      	subs	r3, #4
 802c692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 802c694:	68fb      	ldr	r3, [r7, #12]
 802c696:	f06f 0202 	mvn.w	r2, #2
 802c69a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 802c69c:	68fb      	ldr	r3, [r7, #12]
 802c69e:	3b20      	subs	r3, #32
 802c6a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 802c6a2:	68fb      	ldr	r3, [r7, #12]
}
 802c6a4:	4618      	mov	r0, r3
 802c6a6:	3714      	adds	r7, #20
 802c6a8:	46bd      	mov	sp, r7
 802c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c6ae:	4770      	bx	lr
 802c6b0:	0802c6b5 	.word	0x0802c6b5

0802c6b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 802c6b4:	b480      	push	{r7}
 802c6b6:	b085      	sub	sp, #20
 802c6b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 802c6ba:	2300      	movs	r3, #0
 802c6bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 802c6be:	4b12      	ldr	r3, [pc, #72]	; (802c708 <prvTaskExitError+0x54>)
 802c6c0:	681b      	ldr	r3, [r3, #0]
 802c6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 802c6c6:	d00a      	beq.n	802c6de <prvTaskExitError+0x2a>
	__asm volatile
 802c6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c6cc:	f383 8811 	msr	BASEPRI, r3
 802c6d0:	f3bf 8f6f 	isb	sy
 802c6d4:	f3bf 8f4f 	dsb	sy
 802c6d8:	60fb      	str	r3, [r7, #12]
}
 802c6da:	bf00      	nop
 802c6dc:	e7fe      	b.n	802c6dc <prvTaskExitError+0x28>
	__asm volatile
 802c6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c6e2:	f383 8811 	msr	BASEPRI, r3
 802c6e6:	f3bf 8f6f 	isb	sy
 802c6ea:	f3bf 8f4f 	dsb	sy
 802c6ee:	60bb      	str	r3, [r7, #8]
}
 802c6f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 802c6f2:	bf00      	nop
 802c6f4:	687b      	ldr	r3, [r7, #4]
 802c6f6:	2b00      	cmp	r3, #0
 802c6f8:	d0fc      	beq.n	802c6f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 802c6fa:	bf00      	nop
 802c6fc:	bf00      	nop
 802c6fe:	3714      	adds	r7, #20
 802c700:	46bd      	mov	sp, r7
 802c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c706:	4770      	bx	lr
 802c708:	20001440 	.word	0x20001440
 802c70c:	00000000 	.word	0x00000000

0802c710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 802c710:	4b07      	ldr	r3, [pc, #28]	; (802c730 <pxCurrentTCBConst2>)
 802c712:	6819      	ldr	r1, [r3, #0]
 802c714:	6808      	ldr	r0, [r1, #0]
 802c716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c71a:	f380 8809 	msr	PSP, r0
 802c71e:	f3bf 8f6f 	isb	sy
 802c722:	f04f 0000 	mov.w	r0, #0
 802c726:	f380 8811 	msr	BASEPRI, r0
 802c72a:	4770      	bx	lr
 802c72c:	f3af 8000 	nop.w

0802c730 <pxCurrentTCBConst2>:
 802c730:	200021dc 	.word	0x200021dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 802c734:	bf00      	nop
 802c736:	bf00      	nop

0802c738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 802c738:	4808      	ldr	r0, [pc, #32]	; (802c75c <prvPortStartFirstTask+0x24>)
 802c73a:	6800      	ldr	r0, [r0, #0]
 802c73c:	6800      	ldr	r0, [r0, #0]
 802c73e:	f380 8808 	msr	MSP, r0
 802c742:	f04f 0000 	mov.w	r0, #0
 802c746:	f380 8814 	msr	CONTROL, r0
 802c74a:	b662      	cpsie	i
 802c74c:	b661      	cpsie	f
 802c74e:	f3bf 8f4f 	dsb	sy
 802c752:	f3bf 8f6f 	isb	sy
 802c756:	df00      	svc	0
 802c758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802c75a:	bf00      	nop
 802c75c:	e000ed08 	.word	0xe000ed08

0802c760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 802c760:	b580      	push	{r7, lr}
 802c762:	b086      	sub	sp, #24
 802c764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 802c766:	4b46      	ldr	r3, [pc, #280]	; (802c880 <xPortStartScheduler+0x120>)
 802c768:	681b      	ldr	r3, [r3, #0]
 802c76a:	4a46      	ldr	r2, [pc, #280]	; (802c884 <xPortStartScheduler+0x124>)
 802c76c:	4293      	cmp	r3, r2
 802c76e:	d10a      	bne.n	802c786 <xPortStartScheduler+0x26>
	__asm volatile
 802c770:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c774:	f383 8811 	msr	BASEPRI, r3
 802c778:	f3bf 8f6f 	isb	sy
 802c77c:	f3bf 8f4f 	dsb	sy
 802c780:	613b      	str	r3, [r7, #16]
}
 802c782:	bf00      	nop
 802c784:	e7fe      	b.n	802c784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 802c786:	4b3e      	ldr	r3, [pc, #248]	; (802c880 <xPortStartScheduler+0x120>)
 802c788:	681b      	ldr	r3, [r3, #0]
 802c78a:	4a3f      	ldr	r2, [pc, #252]	; (802c888 <xPortStartScheduler+0x128>)
 802c78c:	4293      	cmp	r3, r2
 802c78e:	d10a      	bne.n	802c7a6 <xPortStartScheduler+0x46>
	__asm volatile
 802c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c794:	f383 8811 	msr	BASEPRI, r3
 802c798:	f3bf 8f6f 	isb	sy
 802c79c:	f3bf 8f4f 	dsb	sy
 802c7a0:	60fb      	str	r3, [r7, #12]
}
 802c7a2:	bf00      	nop
 802c7a4:	e7fe      	b.n	802c7a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 802c7a6:	4b39      	ldr	r3, [pc, #228]	; (802c88c <xPortStartScheduler+0x12c>)
 802c7a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 802c7aa:	697b      	ldr	r3, [r7, #20]
 802c7ac:	781b      	ldrb	r3, [r3, #0]
 802c7ae:	b2db      	uxtb	r3, r3
 802c7b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 802c7b2:	697b      	ldr	r3, [r7, #20]
 802c7b4:	22ff      	movs	r2, #255	; 0xff
 802c7b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 802c7b8:	697b      	ldr	r3, [r7, #20]
 802c7ba:	781b      	ldrb	r3, [r3, #0]
 802c7bc:	b2db      	uxtb	r3, r3
 802c7be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 802c7c0:	78fb      	ldrb	r3, [r7, #3]
 802c7c2:	b2db      	uxtb	r3, r3
 802c7c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 802c7c8:	b2da      	uxtb	r2, r3
 802c7ca:	4b31      	ldr	r3, [pc, #196]	; (802c890 <xPortStartScheduler+0x130>)
 802c7cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 802c7ce:	4b31      	ldr	r3, [pc, #196]	; (802c894 <xPortStartScheduler+0x134>)
 802c7d0:	2207      	movs	r2, #7
 802c7d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802c7d4:	e009      	b.n	802c7ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 802c7d6:	4b2f      	ldr	r3, [pc, #188]	; (802c894 <xPortStartScheduler+0x134>)
 802c7d8:	681b      	ldr	r3, [r3, #0]
 802c7da:	3b01      	subs	r3, #1
 802c7dc:	4a2d      	ldr	r2, [pc, #180]	; (802c894 <xPortStartScheduler+0x134>)
 802c7de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 802c7e0:	78fb      	ldrb	r3, [r7, #3]
 802c7e2:	b2db      	uxtb	r3, r3
 802c7e4:	005b      	lsls	r3, r3, #1
 802c7e6:	b2db      	uxtb	r3, r3
 802c7e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802c7ea:	78fb      	ldrb	r3, [r7, #3]
 802c7ec:	b2db      	uxtb	r3, r3
 802c7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802c7f2:	2b80      	cmp	r3, #128	; 0x80
 802c7f4:	d0ef      	beq.n	802c7d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 802c7f6:	4b27      	ldr	r3, [pc, #156]	; (802c894 <xPortStartScheduler+0x134>)
 802c7f8:	681b      	ldr	r3, [r3, #0]
 802c7fa:	f1c3 0307 	rsb	r3, r3, #7
 802c7fe:	2b04      	cmp	r3, #4
 802c800:	d00a      	beq.n	802c818 <xPortStartScheduler+0xb8>
	__asm volatile
 802c802:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c806:	f383 8811 	msr	BASEPRI, r3
 802c80a:	f3bf 8f6f 	isb	sy
 802c80e:	f3bf 8f4f 	dsb	sy
 802c812:	60bb      	str	r3, [r7, #8]
}
 802c814:	bf00      	nop
 802c816:	e7fe      	b.n	802c816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 802c818:	4b1e      	ldr	r3, [pc, #120]	; (802c894 <xPortStartScheduler+0x134>)
 802c81a:	681b      	ldr	r3, [r3, #0]
 802c81c:	021b      	lsls	r3, r3, #8
 802c81e:	4a1d      	ldr	r2, [pc, #116]	; (802c894 <xPortStartScheduler+0x134>)
 802c820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 802c822:	4b1c      	ldr	r3, [pc, #112]	; (802c894 <xPortStartScheduler+0x134>)
 802c824:	681b      	ldr	r3, [r3, #0]
 802c826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802c82a:	4a1a      	ldr	r2, [pc, #104]	; (802c894 <xPortStartScheduler+0x134>)
 802c82c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 802c82e:	687b      	ldr	r3, [r7, #4]
 802c830:	b2da      	uxtb	r2, r3
 802c832:	697b      	ldr	r3, [r7, #20]
 802c834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 802c836:	4b18      	ldr	r3, [pc, #96]	; (802c898 <xPortStartScheduler+0x138>)
 802c838:	681b      	ldr	r3, [r3, #0]
 802c83a:	4a17      	ldr	r2, [pc, #92]	; (802c898 <xPortStartScheduler+0x138>)
 802c83c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802c840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 802c842:	4b15      	ldr	r3, [pc, #84]	; (802c898 <xPortStartScheduler+0x138>)
 802c844:	681b      	ldr	r3, [r3, #0]
 802c846:	4a14      	ldr	r2, [pc, #80]	; (802c898 <xPortStartScheduler+0x138>)
 802c848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 802c84c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 802c84e:	f000 f8dd 	bl	802ca0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 802c852:	4b12      	ldr	r3, [pc, #72]	; (802c89c <xPortStartScheduler+0x13c>)
 802c854:	2200      	movs	r2, #0
 802c856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 802c858:	f000 f8fc 	bl	802ca54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 802c85c:	4b10      	ldr	r3, [pc, #64]	; (802c8a0 <xPortStartScheduler+0x140>)
 802c85e:	681b      	ldr	r3, [r3, #0]
 802c860:	4a0f      	ldr	r2, [pc, #60]	; (802c8a0 <xPortStartScheduler+0x140>)
 802c862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 802c866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 802c868:	f7ff ff66 	bl	802c738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 802c86c:	f7fe fff0 	bl	802b850 <vTaskSwitchContext>
	prvTaskExitError();
 802c870:	f7ff ff20 	bl	802c6b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 802c874:	2300      	movs	r3, #0
}
 802c876:	4618      	mov	r0, r3
 802c878:	3718      	adds	r7, #24
 802c87a:	46bd      	mov	sp, r7
 802c87c:	bd80      	pop	{r7, pc}
 802c87e:	bf00      	nop
 802c880:	e000ed00 	.word	0xe000ed00
 802c884:	410fc271 	.word	0x410fc271
 802c888:	410fc270 	.word	0x410fc270
 802c88c:	e000e400 	.word	0xe000e400
 802c890:	20002808 	.word	0x20002808
 802c894:	2000280c 	.word	0x2000280c
 802c898:	e000ed20 	.word	0xe000ed20
 802c89c:	20001440 	.word	0x20001440
 802c8a0:	e000ef34 	.word	0xe000ef34

0802c8a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 802c8a4:	b480      	push	{r7}
 802c8a6:	b083      	sub	sp, #12
 802c8a8:	af00      	add	r7, sp, #0
	__asm volatile
 802c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c8ae:	f383 8811 	msr	BASEPRI, r3
 802c8b2:	f3bf 8f6f 	isb	sy
 802c8b6:	f3bf 8f4f 	dsb	sy
 802c8ba:	607b      	str	r3, [r7, #4]
}
 802c8bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 802c8be:	4b0f      	ldr	r3, [pc, #60]	; (802c8fc <vPortEnterCritical+0x58>)
 802c8c0:	681b      	ldr	r3, [r3, #0]
 802c8c2:	3301      	adds	r3, #1
 802c8c4:	4a0d      	ldr	r2, [pc, #52]	; (802c8fc <vPortEnterCritical+0x58>)
 802c8c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 802c8c8:	4b0c      	ldr	r3, [pc, #48]	; (802c8fc <vPortEnterCritical+0x58>)
 802c8ca:	681b      	ldr	r3, [r3, #0]
 802c8cc:	2b01      	cmp	r3, #1
 802c8ce:	d10f      	bne.n	802c8f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 802c8d0:	4b0b      	ldr	r3, [pc, #44]	; (802c900 <vPortEnterCritical+0x5c>)
 802c8d2:	681b      	ldr	r3, [r3, #0]
 802c8d4:	b2db      	uxtb	r3, r3
 802c8d6:	2b00      	cmp	r3, #0
 802c8d8:	d00a      	beq.n	802c8f0 <vPortEnterCritical+0x4c>
	__asm volatile
 802c8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c8de:	f383 8811 	msr	BASEPRI, r3
 802c8e2:	f3bf 8f6f 	isb	sy
 802c8e6:	f3bf 8f4f 	dsb	sy
 802c8ea:	603b      	str	r3, [r7, #0]
}
 802c8ec:	bf00      	nop
 802c8ee:	e7fe      	b.n	802c8ee <vPortEnterCritical+0x4a>
	}
}
 802c8f0:	bf00      	nop
 802c8f2:	370c      	adds	r7, #12
 802c8f4:	46bd      	mov	sp, r7
 802c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c8fa:	4770      	bx	lr
 802c8fc:	20001440 	.word	0x20001440
 802c900:	e000ed04 	.word	0xe000ed04

0802c904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 802c904:	b480      	push	{r7}
 802c906:	b083      	sub	sp, #12
 802c908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 802c90a:	4b12      	ldr	r3, [pc, #72]	; (802c954 <vPortExitCritical+0x50>)
 802c90c:	681b      	ldr	r3, [r3, #0]
 802c90e:	2b00      	cmp	r3, #0
 802c910:	d10a      	bne.n	802c928 <vPortExitCritical+0x24>
	__asm volatile
 802c912:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c916:	f383 8811 	msr	BASEPRI, r3
 802c91a:	f3bf 8f6f 	isb	sy
 802c91e:	f3bf 8f4f 	dsb	sy
 802c922:	607b      	str	r3, [r7, #4]
}
 802c924:	bf00      	nop
 802c926:	e7fe      	b.n	802c926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 802c928:	4b0a      	ldr	r3, [pc, #40]	; (802c954 <vPortExitCritical+0x50>)
 802c92a:	681b      	ldr	r3, [r3, #0]
 802c92c:	3b01      	subs	r3, #1
 802c92e:	4a09      	ldr	r2, [pc, #36]	; (802c954 <vPortExitCritical+0x50>)
 802c930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 802c932:	4b08      	ldr	r3, [pc, #32]	; (802c954 <vPortExitCritical+0x50>)
 802c934:	681b      	ldr	r3, [r3, #0]
 802c936:	2b00      	cmp	r3, #0
 802c938:	d105      	bne.n	802c946 <vPortExitCritical+0x42>
 802c93a:	2300      	movs	r3, #0
 802c93c:	603b      	str	r3, [r7, #0]
	__asm volatile
 802c93e:	683b      	ldr	r3, [r7, #0]
 802c940:	f383 8811 	msr	BASEPRI, r3
}
 802c944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 802c946:	bf00      	nop
 802c948:	370c      	adds	r7, #12
 802c94a:	46bd      	mov	sp, r7
 802c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c950:	4770      	bx	lr
 802c952:	bf00      	nop
 802c954:	20001440 	.word	0x20001440
	...

0802c960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 802c960:	f3ef 8009 	mrs	r0, PSP
 802c964:	f3bf 8f6f 	isb	sy
 802c968:	4b15      	ldr	r3, [pc, #84]	; (802c9c0 <pxCurrentTCBConst>)
 802c96a:	681a      	ldr	r2, [r3, #0]
 802c96c:	f01e 0f10 	tst.w	lr, #16
 802c970:	bf08      	it	eq
 802c972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 802c976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c97a:	6010      	str	r0, [r2, #0]
 802c97c:	e92d 0009 	stmdb	sp!, {r0, r3}
 802c980:	f04f 0050 	mov.w	r0, #80	; 0x50
 802c984:	f380 8811 	msr	BASEPRI, r0
 802c988:	f3bf 8f4f 	dsb	sy
 802c98c:	f3bf 8f6f 	isb	sy
 802c990:	f7fe ff5e 	bl	802b850 <vTaskSwitchContext>
 802c994:	f04f 0000 	mov.w	r0, #0
 802c998:	f380 8811 	msr	BASEPRI, r0
 802c99c:	bc09      	pop	{r0, r3}
 802c99e:	6819      	ldr	r1, [r3, #0]
 802c9a0:	6808      	ldr	r0, [r1, #0]
 802c9a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c9a6:	f01e 0f10 	tst.w	lr, #16
 802c9aa:	bf08      	it	eq
 802c9ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 802c9b0:	f380 8809 	msr	PSP, r0
 802c9b4:	f3bf 8f6f 	isb	sy
 802c9b8:	4770      	bx	lr
 802c9ba:	bf00      	nop
 802c9bc:	f3af 8000 	nop.w

0802c9c0 <pxCurrentTCBConst>:
 802c9c0:	200021dc 	.word	0x200021dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 802c9c4:	bf00      	nop
 802c9c6:	bf00      	nop

0802c9c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 802c9c8:	b580      	push	{r7, lr}
 802c9ca:	b082      	sub	sp, #8
 802c9cc:	af00      	add	r7, sp, #0
	__asm volatile
 802c9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c9d2:	f383 8811 	msr	BASEPRI, r3
 802c9d6:	f3bf 8f6f 	isb	sy
 802c9da:	f3bf 8f4f 	dsb	sy
 802c9de:	607b      	str	r3, [r7, #4]
}
 802c9e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 802c9e2:	f7fe fe77 	bl	802b6d4 <xTaskIncrementTick>
 802c9e6:	4603      	mov	r3, r0
 802c9e8:	2b00      	cmp	r3, #0
 802c9ea:	d003      	beq.n	802c9f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 802c9ec:	4b06      	ldr	r3, [pc, #24]	; (802ca08 <xPortSysTickHandler+0x40>)
 802c9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802c9f2:	601a      	str	r2, [r3, #0]
 802c9f4:	2300      	movs	r3, #0
 802c9f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 802c9f8:	683b      	ldr	r3, [r7, #0]
 802c9fa:	f383 8811 	msr	BASEPRI, r3
}
 802c9fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 802ca00:	bf00      	nop
 802ca02:	3708      	adds	r7, #8
 802ca04:	46bd      	mov	sp, r7
 802ca06:	bd80      	pop	{r7, pc}
 802ca08:	e000ed04 	.word	0xe000ed04

0802ca0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 802ca0c:	b480      	push	{r7}
 802ca0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 802ca10:	4b0b      	ldr	r3, [pc, #44]	; (802ca40 <vPortSetupTimerInterrupt+0x34>)
 802ca12:	2200      	movs	r2, #0
 802ca14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 802ca16:	4b0b      	ldr	r3, [pc, #44]	; (802ca44 <vPortSetupTimerInterrupt+0x38>)
 802ca18:	2200      	movs	r2, #0
 802ca1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 802ca1c:	4b0a      	ldr	r3, [pc, #40]	; (802ca48 <vPortSetupTimerInterrupt+0x3c>)
 802ca1e:	681b      	ldr	r3, [r3, #0]
 802ca20:	4a0a      	ldr	r2, [pc, #40]	; (802ca4c <vPortSetupTimerInterrupt+0x40>)
 802ca22:	fba2 2303 	umull	r2, r3, r2, r3
 802ca26:	099b      	lsrs	r3, r3, #6
 802ca28:	4a09      	ldr	r2, [pc, #36]	; (802ca50 <vPortSetupTimerInterrupt+0x44>)
 802ca2a:	3b01      	subs	r3, #1
 802ca2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802ca2e:	4b04      	ldr	r3, [pc, #16]	; (802ca40 <vPortSetupTimerInterrupt+0x34>)
 802ca30:	2207      	movs	r2, #7
 802ca32:	601a      	str	r2, [r3, #0]
}
 802ca34:	bf00      	nop
 802ca36:	46bd      	mov	sp, r7
 802ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ca3c:	4770      	bx	lr
 802ca3e:	bf00      	nop
 802ca40:	e000e010 	.word	0xe000e010
 802ca44:	e000e018 	.word	0xe000e018
 802ca48:	20000080 	.word	0x20000080
 802ca4c:	10624dd3 	.word	0x10624dd3
 802ca50:	e000e014 	.word	0xe000e014

0802ca54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 802ca54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 802ca64 <vPortEnableVFP+0x10>
 802ca58:	6801      	ldr	r1, [r0, #0]
 802ca5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802ca5e:	6001      	str	r1, [r0, #0]
 802ca60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 802ca62:	bf00      	nop
 802ca64:	e000ed88 	.word	0xe000ed88

0802ca68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 802ca68:	b480      	push	{r7}
 802ca6a:	b085      	sub	sp, #20
 802ca6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802ca6e:	f3ef 8305 	mrs	r3, IPSR
 802ca72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 802ca74:	68fb      	ldr	r3, [r7, #12]
 802ca76:	2b0f      	cmp	r3, #15
 802ca78:	d914      	bls.n	802caa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802ca7a:	4a17      	ldr	r2, [pc, #92]	; (802cad8 <vPortValidateInterruptPriority+0x70>)
 802ca7c:	68fb      	ldr	r3, [r7, #12]
 802ca7e:	4413      	add	r3, r2
 802ca80:	781b      	ldrb	r3, [r3, #0]
 802ca82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 802ca84:	4b15      	ldr	r3, [pc, #84]	; (802cadc <vPortValidateInterruptPriority+0x74>)
 802ca86:	781b      	ldrb	r3, [r3, #0]
 802ca88:	7afa      	ldrb	r2, [r7, #11]
 802ca8a:	429a      	cmp	r2, r3
 802ca8c:	d20a      	bcs.n	802caa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 802ca8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ca92:	f383 8811 	msr	BASEPRI, r3
 802ca96:	f3bf 8f6f 	isb	sy
 802ca9a:	f3bf 8f4f 	dsb	sy
 802ca9e:	607b      	str	r3, [r7, #4]
}
 802caa0:	bf00      	nop
 802caa2:	e7fe      	b.n	802caa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 802caa4:	4b0e      	ldr	r3, [pc, #56]	; (802cae0 <vPortValidateInterruptPriority+0x78>)
 802caa6:	681b      	ldr	r3, [r3, #0]
 802caa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 802caac:	4b0d      	ldr	r3, [pc, #52]	; (802cae4 <vPortValidateInterruptPriority+0x7c>)
 802caae:	681b      	ldr	r3, [r3, #0]
 802cab0:	429a      	cmp	r2, r3
 802cab2:	d90a      	bls.n	802caca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 802cab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cab8:	f383 8811 	msr	BASEPRI, r3
 802cabc:	f3bf 8f6f 	isb	sy
 802cac0:	f3bf 8f4f 	dsb	sy
 802cac4:	603b      	str	r3, [r7, #0]
}
 802cac6:	bf00      	nop
 802cac8:	e7fe      	b.n	802cac8 <vPortValidateInterruptPriority+0x60>
	}
 802caca:	bf00      	nop
 802cacc:	3714      	adds	r7, #20
 802cace:	46bd      	mov	sp, r7
 802cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cad4:	4770      	bx	lr
 802cad6:	bf00      	nop
 802cad8:	e000e3f0 	.word	0xe000e3f0
 802cadc:	20002808 	.word	0x20002808
 802cae0:	e000ed0c 	.word	0xe000ed0c
 802cae4:	2000280c 	.word	0x2000280c

0802cae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 802cae8:	b580      	push	{r7, lr}
 802caea:	b08a      	sub	sp, #40	; 0x28
 802caec:	af00      	add	r7, sp, #0
 802caee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 802caf0:	2300      	movs	r3, #0
 802caf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 802caf4:	f7fe fd1c 	bl	802b530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 802caf8:	4b5b      	ldr	r3, [pc, #364]	; (802cc68 <pvPortMalloc+0x180>)
 802cafa:	681b      	ldr	r3, [r3, #0]
 802cafc:	2b00      	cmp	r3, #0
 802cafe:	d101      	bne.n	802cb04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 802cb00:	f000 f920 	bl	802cd44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 802cb04:	4b59      	ldr	r3, [pc, #356]	; (802cc6c <pvPortMalloc+0x184>)
 802cb06:	681a      	ldr	r2, [r3, #0]
 802cb08:	687b      	ldr	r3, [r7, #4]
 802cb0a:	4013      	ands	r3, r2
 802cb0c:	2b00      	cmp	r3, #0
 802cb0e:	f040 8093 	bne.w	802cc38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 802cb12:	687b      	ldr	r3, [r7, #4]
 802cb14:	2b00      	cmp	r3, #0
 802cb16:	d01d      	beq.n	802cb54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 802cb18:	2208      	movs	r2, #8
 802cb1a:	687b      	ldr	r3, [r7, #4]
 802cb1c:	4413      	add	r3, r2
 802cb1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 802cb20:	687b      	ldr	r3, [r7, #4]
 802cb22:	f003 0307 	and.w	r3, r3, #7
 802cb26:	2b00      	cmp	r3, #0
 802cb28:	d014      	beq.n	802cb54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 802cb2a:	687b      	ldr	r3, [r7, #4]
 802cb2c:	f023 0307 	bic.w	r3, r3, #7
 802cb30:	3308      	adds	r3, #8
 802cb32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 802cb34:	687b      	ldr	r3, [r7, #4]
 802cb36:	f003 0307 	and.w	r3, r3, #7
 802cb3a:	2b00      	cmp	r3, #0
 802cb3c:	d00a      	beq.n	802cb54 <pvPortMalloc+0x6c>
	__asm volatile
 802cb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cb42:	f383 8811 	msr	BASEPRI, r3
 802cb46:	f3bf 8f6f 	isb	sy
 802cb4a:	f3bf 8f4f 	dsb	sy
 802cb4e:	617b      	str	r3, [r7, #20]
}
 802cb50:	bf00      	nop
 802cb52:	e7fe      	b.n	802cb52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 802cb54:	687b      	ldr	r3, [r7, #4]
 802cb56:	2b00      	cmp	r3, #0
 802cb58:	d06e      	beq.n	802cc38 <pvPortMalloc+0x150>
 802cb5a:	4b45      	ldr	r3, [pc, #276]	; (802cc70 <pvPortMalloc+0x188>)
 802cb5c:	681b      	ldr	r3, [r3, #0]
 802cb5e:	687a      	ldr	r2, [r7, #4]
 802cb60:	429a      	cmp	r2, r3
 802cb62:	d869      	bhi.n	802cc38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 802cb64:	4b43      	ldr	r3, [pc, #268]	; (802cc74 <pvPortMalloc+0x18c>)
 802cb66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 802cb68:	4b42      	ldr	r3, [pc, #264]	; (802cc74 <pvPortMalloc+0x18c>)
 802cb6a:	681b      	ldr	r3, [r3, #0]
 802cb6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802cb6e:	e004      	b.n	802cb7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 802cb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cb72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 802cb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cb76:	681b      	ldr	r3, [r3, #0]
 802cb78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cb7c:	685b      	ldr	r3, [r3, #4]
 802cb7e:	687a      	ldr	r2, [r7, #4]
 802cb80:	429a      	cmp	r2, r3
 802cb82:	d903      	bls.n	802cb8c <pvPortMalloc+0xa4>
 802cb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cb86:	681b      	ldr	r3, [r3, #0]
 802cb88:	2b00      	cmp	r3, #0
 802cb8a:	d1f1      	bne.n	802cb70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 802cb8c:	4b36      	ldr	r3, [pc, #216]	; (802cc68 <pvPortMalloc+0x180>)
 802cb8e:	681b      	ldr	r3, [r3, #0]
 802cb90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802cb92:	429a      	cmp	r2, r3
 802cb94:	d050      	beq.n	802cc38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 802cb96:	6a3b      	ldr	r3, [r7, #32]
 802cb98:	681b      	ldr	r3, [r3, #0]
 802cb9a:	2208      	movs	r2, #8
 802cb9c:	4413      	add	r3, r2
 802cb9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 802cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cba2:	681a      	ldr	r2, [r3, #0]
 802cba4:	6a3b      	ldr	r3, [r7, #32]
 802cba6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 802cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cbaa:	685a      	ldr	r2, [r3, #4]
 802cbac:	687b      	ldr	r3, [r7, #4]
 802cbae:	1ad2      	subs	r2, r2, r3
 802cbb0:	2308      	movs	r3, #8
 802cbb2:	005b      	lsls	r3, r3, #1
 802cbb4:	429a      	cmp	r2, r3
 802cbb6:	d91f      	bls.n	802cbf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 802cbb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802cbba:	687b      	ldr	r3, [r7, #4]
 802cbbc:	4413      	add	r3, r2
 802cbbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 802cbc0:	69bb      	ldr	r3, [r7, #24]
 802cbc2:	f003 0307 	and.w	r3, r3, #7
 802cbc6:	2b00      	cmp	r3, #0
 802cbc8:	d00a      	beq.n	802cbe0 <pvPortMalloc+0xf8>
	__asm volatile
 802cbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cbce:	f383 8811 	msr	BASEPRI, r3
 802cbd2:	f3bf 8f6f 	isb	sy
 802cbd6:	f3bf 8f4f 	dsb	sy
 802cbda:	613b      	str	r3, [r7, #16]
}
 802cbdc:	bf00      	nop
 802cbde:	e7fe      	b.n	802cbde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 802cbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cbe2:	685a      	ldr	r2, [r3, #4]
 802cbe4:	687b      	ldr	r3, [r7, #4]
 802cbe6:	1ad2      	subs	r2, r2, r3
 802cbe8:	69bb      	ldr	r3, [r7, #24]
 802cbea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 802cbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cbee:	687a      	ldr	r2, [r7, #4]
 802cbf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 802cbf2:	69b8      	ldr	r0, [r7, #24]
 802cbf4:	f000 f90a 	bl	802ce0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 802cbf8:	4b1d      	ldr	r3, [pc, #116]	; (802cc70 <pvPortMalloc+0x188>)
 802cbfa:	681a      	ldr	r2, [r3, #0]
 802cbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cbfe:	685b      	ldr	r3, [r3, #4]
 802cc00:	1ad3      	subs	r3, r2, r3
 802cc02:	4a1b      	ldr	r2, [pc, #108]	; (802cc70 <pvPortMalloc+0x188>)
 802cc04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 802cc06:	4b1a      	ldr	r3, [pc, #104]	; (802cc70 <pvPortMalloc+0x188>)
 802cc08:	681a      	ldr	r2, [r3, #0]
 802cc0a:	4b1b      	ldr	r3, [pc, #108]	; (802cc78 <pvPortMalloc+0x190>)
 802cc0c:	681b      	ldr	r3, [r3, #0]
 802cc0e:	429a      	cmp	r2, r3
 802cc10:	d203      	bcs.n	802cc1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 802cc12:	4b17      	ldr	r3, [pc, #92]	; (802cc70 <pvPortMalloc+0x188>)
 802cc14:	681b      	ldr	r3, [r3, #0]
 802cc16:	4a18      	ldr	r2, [pc, #96]	; (802cc78 <pvPortMalloc+0x190>)
 802cc18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 802cc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cc1c:	685a      	ldr	r2, [r3, #4]
 802cc1e:	4b13      	ldr	r3, [pc, #76]	; (802cc6c <pvPortMalloc+0x184>)
 802cc20:	681b      	ldr	r3, [r3, #0]
 802cc22:	431a      	orrs	r2, r3
 802cc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cc26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 802cc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cc2a:	2200      	movs	r2, #0
 802cc2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 802cc2e:	4b13      	ldr	r3, [pc, #76]	; (802cc7c <pvPortMalloc+0x194>)
 802cc30:	681b      	ldr	r3, [r3, #0]
 802cc32:	3301      	adds	r3, #1
 802cc34:	4a11      	ldr	r2, [pc, #68]	; (802cc7c <pvPortMalloc+0x194>)
 802cc36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 802cc38:	f7fe fc88 	bl	802b54c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 802cc3c:	69fb      	ldr	r3, [r7, #28]
 802cc3e:	f003 0307 	and.w	r3, r3, #7
 802cc42:	2b00      	cmp	r3, #0
 802cc44:	d00a      	beq.n	802cc5c <pvPortMalloc+0x174>
	__asm volatile
 802cc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cc4a:	f383 8811 	msr	BASEPRI, r3
 802cc4e:	f3bf 8f6f 	isb	sy
 802cc52:	f3bf 8f4f 	dsb	sy
 802cc56:	60fb      	str	r3, [r7, #12]
}
 802cc58:	bf00      	nop
 802cc5a:	e7fe      	b.n	802cc5a <pvPortMalloc+0x172>
	return pvReturn;
 802cc5c:	69fb      	ldr	r3, [r7, #28]
}
 802cc5e:	4618      	mov	r0, r3
 802cc60:	3728      	adds	r7, #40	; 0x28
 802cc62:	46bd      	mov	sp, r7
 802cc64:	bd80      	pop	{r7, pc}
 802cc66:	bf00      	nop
 802cc68:	2001aeb8 	.word	0x2001aeb8
 802cc6c:	2001aecc 	.word	0x2001aecc
 802cc70:	2001aebc 	.word	0x2001aebc
 802cc74:	2001aeb0 	.word	0x2001aeb0
 802cc78:	2001aec0 	.word	0x2001aec0
 802cc7c:	2001aec4 	.word	0x2001aec4

0802cc80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 802cc80:	b580      	push	{r7, lr}
 802cc82:	b086      	sub	sp, #24
 802cc84:	af00      	add	r7, sp, #0
 802cc86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 802cc88:	687b      	ldr	r3, [r7, #4]
 802cc8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 802cc8c:	687b      	ldr	r3, [r7, #4]
 802cc8e:	2b00      	cmp	r3, #0
 802cc90:	d04d      	beq.n	802cd2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 802cc92:	2308      	movs	r3, #8
 802cc94:	425b      	negs	r3, r3
 802cc96:	697a      	ldr	r2, [r7, #20]
 802cc98:	4413      	add	r3, r2
 802cc9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 802cc9c:	697b      	ldr	r3, [r7, #20]
 802cc9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 802cca0:	693b      	ldr	r3, [r7, #16]
 802cca2:	685a      	ldr	r2, [r3, #4]
 802cca4:	4b24      	ldr	r3, [pc, #144]	; (802cd38 <vPortFree+0xb8>)
 802cca6:	681b      	ldr	r3, [r3, #0]
 802cca8:	4013      	ands	r3, r2
 802ccaa:	2b00      	cmp	r3, #0
 802ccac:	d10a      	bne.n	802ccc4 <vPortFree+0x44>
	__asm volatile
 802ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ccb2:	f383 8811 	msr	BASEPRI, r3
 802ccb6:	f3bf 8f6f 	isb	sy
 802ccba:	f3bf 8f4f 	dsb	sy
 802ccbe:	60fb      	str	r3, [r7, #12]
}
 802ccc0:	bf00      	nop
 802ccc2:	e7fe      	b.n	802ccc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 802ccc4:	693b      	ldr	r3, [r7, #16]
 802ccc6:	681b      	ldr	r3, [r3, #0]
 802ccc8:	2b00      	cmp	r3, #0
 802ccca:	d00a      	beq.n	802cce2 <vPortFree+0x62>
	__asm volatile
 802cccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ccd0:	f383 8811 	msr	BASEPRI, r3
 802ccd4:	f3bf 8f6f 	isb	sy
 802ccd8:	f3bf 8f4f 	dsb	sy
 802ccdc:	60bb      	str	r3, [r7, #8]
}
 802ccde:	bf00      	nop
 802cce0:	e7fe      	b.n	802cce0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 802cce2:	693b      	ldr	r3, [r7, #16]
 802cce4:	685a      	ldr	r2, [r3, #4]
 802cce6:	4b14      	ldr	r3, [pc, #80]	; (802cd38 <vPortFree+0xb8>)
 802cce8:	681b      	ldr	r3, [r3, #0]
 802ccea:	4013      	ands	r3, r2
 802ccec:	2b00      	cmp	r3, #0
 802ccee:	d01e      	beq.n	802cd2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 802ccf0:	693b      	ldr	r3, [r7, #16]
 802ccf2:	681b      	ldr	r3, [r3, #0]
 802ccf4:	2b00      	cmp	r3, #0
 802ccf6:	d11a      	bne.n	802cd2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 802ccf8:	693b      	ldr	r3, [r7, #16]
 802ccfa:	685a      	ldr	r2, [r3, #4]
 802ccfc:	4b0e      	ldr	r3, [pc, #56]	; (802cd38 <vPortFree+0xb8>)
 802ccfe:	681b      	ldr	r3, [r3, #0]
 802cd00:	43db      	mvns	r3, r3
 802cd02:	401a      	ands	r2, r3
 802cd04:	693b      	ldr	r3, [r7, #16]
 802cd06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 802cd08:	f7fe fc12 	bl	802b530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 802cd0c:	693b      	ldr	r3, [r7, #16]
 802cd0e:	685a      	ldr	r2, [r3, #4]
 802cd10:	4b0a      	ldr	r3, [pc, #40]	; (802cd3c <vPortFree+0xbc>)
 802cd12:	681b      	ldr	r3, [r3, #0]
 802cd14:	4413      	add	r3, r2
 802cd16:	4a09      	ldr	r2, [pc, #36]	; (802cd3c <vPortFree+0xbc>)
 802cd18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 802cd1a:	6938      	ldr	r0, [r7, #16]
 802cd1c:	f000 f876 	bl	802ce0c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 802cd20:	4b07      	ldr	r3, [pc, #28]	; (802cd40 <vPortFree+0xc0>)
 802cd22:	681b      	ldr	r3, [r3, #0]
 802cd24:	3301      	adds	r3, #1
 802cd26:	4a06      	ldr	r2, [pc, #24]	; (802cd40 <vPortFree+0xc0>)
 802cd28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 802cd2a:	f7fe fc0f 	bl	802b54c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 802cd2e:	bf00      	nop
 802cd30:	3718      	adds	r7, #24
 802cd32:	46bd      	mov	sp, r7
 802cd34:	bd80      	pop	{r7, pc}
 802cd36:	bf00      	nop
 802cd38:	2001aecc 	.word	0x2001aecc
 802cd3c:	2001aebc 	.word	0x2001aebc
 802cd40:	2001aec8 	.word	0x2001aec8

0802cd44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 802cd44:	b480      	push	{r7}
 802cd46:	b085      	sub	sp, #20
 802cd48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 802cd4a:	4b29      	ldr	r3, [pc, #164]	; (802cdf0 <prvHeapInit+0xac>)
 802cd4c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 802cd4e:	4b29      	ldr	r3, [pc, #164]	; (802cdf4 <prvHeapInit+0xb0>)
 802cd50:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 802cd52:	68fb      	ldr	r3, [r7, #12]
 802cd54:	f003 0307 	and.w	r3, r3, #7
 802cd58:	2b00      	cmp	r3, #0
 802cd5a:	d00c      	beq.n	802cd76 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802cd5c:	68fb      	ldr	r3, [r7, #12]
 802cd5e:	3307      	adds	r3, #7
 802cd60:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802cd62:	68fb      	ldr	r3, [r7, #12]
 802cd64:	f023 0307 	bic.w	r3, r3, #7
 802cd68:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 802cd6a:	68ba      	ldr	r2, [r7, #8]
 802cd6c:	68fb      	ldr	r3, [r7, #12]
 802cd6e:	1ad3      	subs	r3, r2, r3
 802cd70:	4a20      	ldr	r2, [pc, #128]	; (802cdf4 <prvHeapInit+0xb0>)
 802cd72:	4413      	add	r3, r2
 802cd74:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 802cd76:	68fb      	ldr	r3, [r7, #12]
 802cd78:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802cd7a:	4a1f      	ldr	r2, [pc, #124]	; (802cdf8 <prvHeapInit+0xb4>)
 802cd7c:	687b      	ldr	r3, [r7, #4]
 802cd7e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 802cd80:	4b1d      	ldr	r3, [pc, #116]	; (802cdf8 <prvHeapInit+0xb4>)
 802cd82:	2200      	movs	r2, #0
 802cd84:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 802cd86:	687b      	ldr	r3, [r7, #4]
 802cd88:	68ba      	ldr	r2, [r7, #8]
 802cd8a:	4413      	add	r3, r2
 802cd8c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 802cd8e:	2208      	movs	r2, #8
 802cd90:	68fb      	ldr	r3, [r7, #12]
 802cd92:	1a9b      	subs	r3, r3, r2
 802cd94:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802cd96:	68fb      	ldr	r3, [r7, #12]
 802cd98:	f023 0307 	bic.w	r3, r3, #7
 802cd9c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 802cd9e:	68fb      	ldr	r3, [r7, #12]
 802cda0:	4a16      	ldr	r2, [pc, #88]	; (802cdfc <prvHeapInit+0xb8>)
 802cda2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 802cda4:	4b15      	ldr	r3, [pc, #84]	; (802cdfc <prvHeapInit+0xb8>)
 802cda6:	681b      	ldr	r3, [r3, #0]
 802cda8:	2200      	movs	r2, #0
 802cdaa:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 802cdac:	4b13      	ldr	r3, [pc, #76]	; (802cdfc <prvHeapInit+0xb8>)
 802cdae:	681b      	ldr	r3, [r3, #0]
 802cdb0:	2200      	movs	r2, #0
 802cdb2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 802cdb4:	687b      	ldr	r3, [r7, #4]
 802cdb6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 802cdb8:	683b      	ldr	r3, [r7, #0]
 802cdba:	68fa      	ldr	r2, [r7, #12]
 802cdbc:	1ad2      	subs	r2, r2, r3
 802cdbe:	683b      	ldr	r3, [r7, #0]
 802cdc0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 802cdc2:	4b0e      	ldr	r3, [pc, #56]	; (802cdfc <prvHeapInit+0xb8>)
 802cdc4:	681a      	ldr	r2, [r3, #0]
 802cdc6:	683b      	ldr	r3, [r7, #0]
 802cdc8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802cdca:	683b      	ldr	r3, [r7, #0]
 802cdcc:	685b      	ldr	r3, [r3, #4]
 802cdce:	4a0c      	ldr	r2, [pc, #48]	; (802ce00 <prvHeapInit+0xbc>)
 802cdd0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802cdd2:	683b      	ldr	r3, [r7, #0]
 802cdd4:	685b      	ldr	r3, [r3, #4]
 802cdd6:	4a0b      	ldr	r2, [pc, #44]	; (802ce04 <prvHeapInit+0xc0>)
 802cdd8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 802cdda:	4b0b      	ldr	r3, [pc, #44]	; (802ce08 <prvHeapInit+0xc4>)
 802cddc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 802cde0:	601a      	str	r2, [r3, #0]
}
 802cde2:	bf00      	nop
 802cde4:	3714      	adds	r7, #20
 802cde6:	46bd      	mov	sp, r7
 802cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cdec:	4770      	bx	lr
 802cdee:	bf00      	nop
 802cdf0:	000186a0 	.word	0x000186a0
 802cdf4:	20002810 	.word	0x20002810
 802cdf8:	2001aeb0 	.word	0x2001aeb0
 802cdfc:	2001aeb8 	.word	0x2001aeb8
 802ce00:	2001aec0 	.word	0x2001aec0
 802ce04:	2001aebc 	.word	0x2001aebc
 802ce08:	2001aecc 	.word	0x2001aecc

0802ce0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 802ce0c:	b480      	push	{r7}
 802ce0e:	b085      	sub	sp, #20
 802ce10:	af00      	add	r7, sp, #0
 802ce12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 802ce14:	4b28      	ldr	r3, [pc, #160]	; (802ceb8 <prvInsertBlockIntoFreeList+0xac>)
 802ce16:	60fb      	str	r3, [r7, #12]
 802ce18:	e002      	b.n	802ce20 <prvInsertBlockIntoFreeList+0x14>
 802ce1a:	68fb      	ldr	r3, [r7, #12]
 802ce1c:	681b      	ldr	r3, [r3, #0]
 802ce1e:	60fb      	str	r3, [r7, #12]
 802ce20:	68fb      	ldr	r3, [r7, #12]
 802ce22:	681b      	ldr	r3, [r3, #0]
 802ce24:	687a      	ldr	r2, [r7, #4]
 802ce26:	429a      	cmp	r2, r3
 802ce28:	d8f7      	bhi.n	802ce1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 802ce2a:	68fb      	ldr	r3, [r7, #12]
 802ce2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 802ce2e:	68fb      	ldr	r3, [r7, #12]
 802ce30:	685b      	ldr	r3, [r3, #4]
 802ce32:	68ba      	ldr	r2, [r7, #8]
 802ce34:	4413      	add	r3, r2
 802ce36:	687a      	ldr	r2, [r7, #4]
 802ce38:	429a      	cmp	r2, r3
 802ce3a:	d108      	bne.n	802ce4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 802ce3c:	68fb      	ldr	r3, [r7, #12]
 802ce3e:	685a      	ldr	r2, [r3, #4]
 802ce40:	687b      	ldr	r3, [r7, #4]
 802ce42:	685b      	ldr	r3, [r3, #4]
 802ce44:	441a      	add	r2, r3
 802ce46:	68fb      	ldr	r3, [r7, #12]
 802ce48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 802ce4a:	68fb      	ldr	r3, [r7, #12]
 802ce4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 802ce4e:	687b      	ldr	r3, [r7, #4]
 802ce50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802ce52:	687b      	ldr	r3, [r7, #4]
 802ce54:	685b      	ldr	r3, [r3, #4]
 802ce56:	68ba      	ldr	r2, [r7, #8]
 802ce58:	441a      	add	r2, r3
 802ce5a:	68fb      	ldr	r3, [r7, #12]
 802ce5c:	681b      	ldr	r3, [r3, #0]
 802ce5e:	429a      	cmp	r2, r3
 802ce60:	d118      	bne.n	802ce94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802ce62:	68fb      	ldr	r3, [r7, #12]
 802ce64:	681a      	ldr	r2, [r3, #0]
 802ce66:	4b15      	ldr	r3, [pc, #84]	; (802cebc <prvInsertBlockIntoFreeList+0xb0>)
 802ce68:	681b      	ldr	r3, [r3, #0]
 802ce6a:	429a      	cmp	r2, r3
 802ce6c:	d00d      	beq.n	802ce8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 802ce6e:	687b      	ldr	r3, [r7, #4]
 802ce70:	685a      	ldr	r2, [r3, #4]
 802ce72:	68fb      	ldr	r3, [r7, #12]
 802ce74:	681b      	ldr	r3, [r3, #0]
 802ce76:	685b      	ldr	r3, [r3, #4]
 802ce78:	441a      	add	r2, r3
 802ce7a:	687b      	ldr	r3, [r7, #4]
 802ce7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 802ce7e:	68fb      	ldr	r3, [r7, #12]
 802ce80:	681b      	ldr	r3, [r3, #0]
 802ce82:	681a      	ldr	r2, [r3, #0]
 802ce84:	687b      	ldr	r3, [r7, #4]
 802ce86:	601a      	str	r2, [r3, #0]
 802ce88:	e008      	b.n	802ce9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 802ce8a:	4b0c      	ldr	r3, [pc, #48]	; (802cebc <prvInsertBlockIntoFreeList+0xb0>)
 802ce8c:	681a      	ldr	r2, [r3, #0]
 802ce8e:	687b      	ldr	r3, [r7, #4]
 802ce90:	601a      	str	r2, [r3, #0]
 802ce92:	e003      	b.n	802ce9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 802ce94:	68fb      	ldr	r3, [r7, #12]
 802ce96:	681a      	ldr	r2, [r3, #0]
 802ce98:	687b      	ldr	r3, [r7, #4]
 802ce9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 802ce9c:	68fa      	ldr	r2, [r7, #12]
 802ce9e:	687b      	ldr	r3, [r7, #4]
 802cea0:	429a      	cmp	r2, r3
 802cea2:	d002      	beq.n	802ceaa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 802cea4:	68fb      	ldr	r3, [r7, #12]
 802cea6:	687a      	ldr	r2, [r7, #4]
 802cea8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802ceaa:	bf00      	nop
 802ceac:	3714      	adds	r7, #20
 802ceae:	46bd      	mov	sp, r7
 802ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ceb4:	4770      	bx	lr
 802ceb6:	bf00      	nop
 802ceb8:	2001aeb0 	.word	0x2001aeb0
 802cebc:	2001aeb8 	.word	0x2001aeb8

0802cec0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 802cec0:	b480      	push	{r7}
 802cec2:	b083      	sub	sp, #12
 802cec4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 802cec6:	4b24      	ldr	r3, [pc, #144]	; (802cf58 <_DoInit+0x98>)
 802cec8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 802ceca:	687b      	ldr	r3, [r7, #4]
 802cecc:	2203      	movs	r2, #3
 802cece:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 802ced0:	687b      	ldr	r3, [r7, #4]
 802ced2:	2203      	movs	r2, #3
 802ced4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 802ced6:	687b      	ldr	r3, [r7, #4]
 802ced8:	4a20      	ldr	r2, [pc, #128]	; (802cf5c <_DoInit+0x9c>)
 802ceda:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 802cedc:	687b      	ldr	r3, [r7, #4]
 802cede:	4a20      	ldr	r2, [pc, #128]	; (802cf60 <_DoInit+0xa0>)
 802cee0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 802cee2:	687b      	ldr	r3, [r7, #4]
 802cee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802cee8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 802ceea:	687b      	ldr	r3, [r7, #4]
 802ceec:	2200      	movs	r2, #0
 802ceee:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 802cef0:	687b      	ldr	r3, [r7, #4]
 802cef2:	2200      	movs	r2, #0
 802cef4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 802cef6:	687b      	ldr	r3, [r7, #4]
 802cef8:	2200      	movs	r2, #0
 802cefa:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 802cefc:	687b      	ldr	r3, [r7, #4]
 802cefe:	4a17      	ldr	r2, [pc, #92]	; (802cf5c <_DoInit+0x9c>)
 802cf00:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 802cf02:	687b      	ldr	r3, [r7, #4]
 802cf04:	4a17      	ldr	r2, [pc, #92]	; (802cf64 <_DoInit+0xa4>)
 802cf06:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 802cf08:	687b      	ldr	r3, [r7, #4]
 802cf0a:	2210      	movs	r2, #16
 802cf0c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 802cf0e:	687b      	ldr	r3, [r7, #4]
 802cf10:	2200      	movs	r2, #0
 802cf12:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 802cf14:	687b      	ldr	r3, [r7, #4]
 802cf16:	2200      	movs	r2, #0
 802cf18:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 802cf1a:	687b      	ldr	r3, [r7, #4]
 802cf1c:	2200      	movs	r2, #0
 802cf1e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 802cf20:	687b      	ldr	r3, [r7, #4]
 802cf22:	3307      	adds	r3, #7
 802cf24:	4a10      	ldr	r2, [pc, #64]	; (802cf68 <_DoInit+0xa8>)
 802cf26:	6810      	ldr	r0, [r2, #0]
 802cf28:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 802cf2a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 802cf2e:	687b      	ldr	r3, [r7, #4]
 802cf30:	4a0e      	ldr	r2, [pc, #56]	; (802cf6c <_DoInit+0xac>)
 802cf32:	6810      	ldr	r0, [r2, #0]
 802cf34:	6018      	str	r0, [r3, #0]
 802cf36:	8891      	ldrh	r1, [r2, #4]
 802cf38:	7992      	ldrb	r2, [r2, #6]
 802cf3a:	8099      	strh	r1, [r3, #4]
 802cf3c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 802cf3e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 802cf42:	687b      	ldr	r3, [r7, #4]
 802cf44:	2220      	movs	r2, #32
 802cf46:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 802cf48:	f3bf 8f5f 	dmb	sy
}
 802cf4c:	bf00      	nop
 802cf4e:	370c      	adds	r7, #12
 802cf50:	46bd      	mov	sp, r7
 802cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cf56:	4770      	bx	lr
 802cf58:	2001eec0 	.word	0x2001eec0
 802cf5c:	08030490 	.word	0x08030490
 802cf60:	2001aed0 	.word	0x2001aed0
 802cf64:	2001b2d0 	.word	0x2001b2d0
 802cf68:	0803049c 	.word	0x0803049c
 802cf6c:	080304a0 	.word	0x080304a0

0802cf70 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 802cf70:	b580      	push	{r7, lr}
 802cf72:	b08c      	sub	sp, #48	; 0x30
 802cf74:	af00      	add	r7, sp, #0
 802cf76:	60f8      	str	r0, [r7, #12]
 802cf78:	60b9      	str	r1, [r7, #8]
 802cf7a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 802cf7c:	4b3e      	ldr	r3, [pc, #248]	; (802d078 <SEGGER_RTT_ReadNoLock+0x108>)
 802cf7e:	623b      	str	r3, [r7, #32]
 802cf80:	6a3b      	ldr	r3, [r7, #32]
 802cf82:	781b      	ldrb	r3, [r3, #0]
 802cf84:	b2db      	uxtb	r3, r3
 802cf86:	2b00      	cmp	r3, #0
 802cf88:	d101      	bne.n	802cf8e <SEGGER_RTT_ReadNoLock+0x1e>
 802cf8a:	f7ff ff99 	bl	802cec0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 802cf8e:	68fa      	ldr	r2, [r7, #12]
 802cf90:	4613      	mov	r3, r2
 802cf92:	005b      	lsls	r3, r3, #1
 802cf94:	4413      	add	r3, r2
 802cf96:	00db      	lsls	r3, r3, #3
 802cf98:	3360      	adds	r3, #96	; 0x60
 802cf9a:	4a37      	ldr	r2, [pc, #220]	; (802d078 <SEGGER_RTT_ReadNoLock+0x108>)
 802cf9c:	4413      	add	r3, r2
 802cf9e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 802cfa0:	68bb      	ldr	r3, [r7, #8]
 802cfa2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 802cfa4:	69fb      	ldr	r3, [r7, #28]
 802cfa6:	691b      	ldr	r3, [r3, #16]
 802cfa8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 802cfaa:	69fb      	ldr	r3, [r7, #28]
 802cfac:	68db      	ldr	r3, [r3, #12]
 802cfae:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 802cfb0:	2300      	movs	r3, #0
 802cfb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 802cfb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802cfb6:	69bb      	ldr	r3, [r7, #24]
 802cfb8:	429a      	cmp	r2, r3
 802cfba:	d92b      	bls.n	802d014 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 802cfbc:	69fb      	ldr	r3, [r7, #28]
 802cfbe:	689a      	ldr	r2, [r3, #8]
 802cfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cfc2:	1ad3      	subs	r3, r2, r3
 802cfc4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 802cfc6:	697a      	ldr	r2, [r7, #20]
 802cfc8:	687b      	ldr	r3, [r7, #4]
 802cfca:	4293      	cmp	r3, r2
 802cfcc:	bf28      	it	cs
 802cfce:	4613      	movcs	r3, r2
 802cfd0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 802cfd2:	69fb      	ldr	r3, [r7, #28]
 802cfd4:	685a      	ldr	r2, [r3, #4]
 802cfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cfd8:	4413      	add	r3, r2
 802cfda:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 802cfdc:	697a      	ldr	r2, [r7, #20]
 802cfde:	6939      	ldr	r1, [r7, #16]
 802cfe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802cfe2:	f001 fb6f 	bl	802e6c4 <memcpy>
    NumBytesRead += NumBytesRem;
 802cfe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802cfe8:	697b      	ldr	r3, [r7, #20]
 802cfea:	4413      	add	r3, r2
 802cfec:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 802cfee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802cff0:	697b      	ldr	r3, [r7, #20]
 802cff2:	4413      	add	r3, r2
 802cff4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 802cff6:	687a      	ldr	r2, [r7, #4]
 802cff8:	697b      	ldr	r3, [r7, #20]
 802cffa:	1ad3      	subs	r3, r2, r3
 802cffc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 802cffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d000:	697b      	ldr	r3, [r7, #20]
 802d002:	4413      	add	r3, r2
 802d004:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 802d006:	69fb      	ldr	r3, [r7, #28]
 802d008:	689b      	ldr	r3, [r3, #8]
 802d00a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d00c:	429a      	cmp	r2, r3
 802d00e:	d101      	bne.n	802d014 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 802d010:	2300      	movs	r3, #0
 802d012:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 802d014:	69ba      	ldr	r2, [r7, #24]
 802d016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d018:	1ad3      	subs	r3, r2, r3
 802d01a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 802d01c:	697a      	ldr	r2, [r7, #20]
 802d01e:	687b      	ldr	r3, [r7, #4]
 802d020:	4293      	cmp	r3, r2
 802d022:	bf28      	it	cs
 802d024:	4613      	movcs	r3, r2
 802d026:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 802d028:	697b      	ldr	r3, [r7, #20]
 802d02a:	2b00      	cmp	r3, #0
 802d02c:	d019      	beq.n	802d062 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 802d02e:	69fb      	ldr	r3, [r7, #28]
 802d030:	685a      	ldr	r2, [r3, #4]
 802d032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d034:	4413      	add	r3, r2
 802d036:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 802d038:	697a      	ldr	r2, [r7, #20]
 802d03a:	6939      	ldr	r1, [r7, #16]
 802d03c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802d03e:	f001 fb41 	bl	802e6c4 <memcpy>
    NumBytesRead += NumBytesRem;
 802d042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802d044:	697b      	ldr	r3, [r7, #20]
 802d046:	4413      	add	r3, r2
 802d048:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 802d04a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802d04c:	697b      	ldr	r3, [r7, #20]
 802d04e:	4413      	add	r3, r2
 802d050:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 802d052:	687a      	ldr	r2, [r7, #4]
 802d054:	697b      	ldr	r3, [r7, #20]
 802d056:	1ad3      	subs	r3, r2, r3
 802d058:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 802d05a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d05c:	697b      	ldr	r3, [r7, #20]
 802d05e:	4413      	add	r3, r2
 802d060:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 802d062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d064:	2b00      	cmp	r3, #0
 802d066:	d002      	beq.n	802d06e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 802d068:	69fb      	ldr	r3, [r7, #28]
 802d06a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d06c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 802d06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802d070:	4618      	mov	r0, r3
 802d072:	3730      	adds	r7, #48	; 0x30
 802d074:	46bd      	mov	sp, r7
 802d076:	bd80      	pop	{r7, pc}
 802d078:	2001eec0 	.word	0x2001eec0

0802d07c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 802d07c:	b580      	push	{r7, lr}
 802d07e:	b088      	sub	sp, #32
 802d080:	af00      	add	r7, sp, #0
 802d082:	60f8      	str	r0, [r7, #12]
 802d084:	60b9      	str	r1, [r7, #8]
 802d086:	607a      	str	r2, [r7, #4]
 802d088:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 802d08a:	4b3d      	ldr	r3, [pc, #244]	; (802d180 <SEGGER_RTT_AllocUpBuffer+0x104>)
 802d08c:	61bb      	str	r3, [r7, #24]
 802d08e:	69bb      	ldr	r3, [r7, #24]
 802d090:	781b      	ldrb	r3, [r3, #0]
 802d092:	b2db      	uxtb	r3, r3
 802d094:	2b00      	cmp	r3, #0
 802d096:	d101      	bne.n	802d09c <SEGGER_RTT_AllocUpBuffer+0x20>
 802d098:	f7ff ff12 	bl	802cec0 <_DoInit>
  SEGGER_RTT_LOCK();
 802d09c:	f3ef 8311 	mrs	r3, BASEPRI
 802d0a0:	f04f 0120 	mov.w	r1, #32
 802d0a4:	f381 8811 	msr	BASEPRI, r1
 802d0a8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 802d0aa:	4b35      	ldr	r3, [pc, #212]	; (802d180 <SEGGER_RTT_AllocUpBuffer+0x104>)
 802d0ac:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 802d0ae:	2300      	movs	r3, #0
 802d0b0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 802d0b2:	6939      	ldr	r1, [r7, #16]
 802d0b4:	69fb      	ldr	r3, [r7, #28]
 802d0b6:	1c5a      	adds	r2, r3, #1
 802d0b8:	4613      	mov	r3, r2
 802d0ba:	005b      	lsls	r3, r3, #1
 802d0bc:	4413      	add	r3, r2
 802d0be:	00db      	lsls	r3, r3, #3
 802d0c0:	440b      	add	r3, r1
 802d0c2:	3304      	adds	r3, #4
 802d0c4:	681b      	ldr	r3, [r3, #0]
 802d0c6:	2b00      	cmp	r3, #0
 802d0c8:	d008      	beq.n	802d0dc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 802d0ca:	69fb      	ldr	r3, [r7, #28]
 802d0cc:	3301      	adds	r3, #1
 802d0ce:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 802d0d0:	693b      	ldr	r3, [r7, #16]
 802d0d2:	691b      	ldr	r3, [r3, #16]
 802d0d4:	69fa      	ldr	r2, [r7, #28]
 802d0d6:	429a      	cmp	r2, r3
 802d0d8:	dbeb      	blt.n	802d0b2 <SEGGER_RTT_AllocUpBuffer+0x36>
 802d0da:	e000      	b.n	802d0de <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 802d0dc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 802d0de:	693b      	ldr	r3, [r7, #16]
 802d0e0:	691b      	ldr	r3, [r3, #16]
 802d0e2:	69fa      	ldr	r2, [r7, #28]
 802d0e4:	429a      	cmp	r2, r3
 802d0e6:	da3f      	bge.n	802d168 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 802d0e8:	6939      	ldr	r1, [r7, #16]
 802d0ea:	69fb      	ldr	r3, [r7, #28]
 802d0ec:	1c5a      	adds	r2, r3, #1
 802d0ee:	4613      	mov	r3, r2
 802d0f0:	005b      	lsls	r3, r3, #1
 802d0f2:	4413      	add	r3, r2
 802d0f4:	00db      	lsls	r3, r3, #3
 802d0f6:	440b      	add	r3, r1
 802d0f8:	68fa      	ldr	r2, [r7, #12]
 802d0fa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 802d0fc:	6939      	ldr	r1, [r7, #16]
 802d0fe:	69fb      	ldr	r3, [r7, #28]
 802d100:	1c5a      	adds	r2, r3, #1
 802d102:	4613      	mov	r3, r2
 802d104:	005b      	lsls	r3, r3, #1
 802d106:	4413      	add	r3, r2
 802d108:	00db      	lsls	r3, r3, #3
 802d10a:	440b      	add	r3, r1
 802d10c:	3304      	adds	r3, #4
 802d10e:	68ba      	ldr	r2, [r7, #8]
 802d110:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 802d112:	6939      	ldr	r1, [r7, #16]
 802d114:	69fa      	ldr	r2, [r7, #28]
 802d116:	4613      	mov	r3, r2
 802d118:	005b      	lsls	r3, r3, #1
 802d11a:	4413      	add	r3, r2
 802d11c:	00db      	lsls	r3, r3, #3
 802d11e:	440b      	add	r3, r1
 802d120:	3320      	adds	r3, #32
 802d122:	687a      	ldr	r2, [r7, #4]
 802d124:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 802d126:	6939      	ldr	r1, [r7, #16]
 802d128:	69fa      	ldr	r2, [r7, #28]
 802d12a:	4613      	mov	r3, r2
 802d12c:	005b      	lsls	r3, r3, #1
 802d12e:	4413      	add	r3, r2
 802d130:	00db      	lsls	r3, r3, #3
 802d132:	440b      	add	r3, r1
 802d134:	3328      	adds	r3, #40	; 0x28
 802d136:	2200      	movs	r2, #0
 802d138:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 802d13a:	6939      	ldr	r1, [r7, #16]
 802d13c:	69fa      	ldr	r2, [r7, #28]
 802d13e:	4613      	mov	r3, r2
 802d140:	005b      	lsls	r3, r3, #1
 802d142:	4413      	add	r3, r2
 802d144:	00db      	lsls	r3, r3, #3
 802d146:	440b      	add	r3, r1
 802d148:	3324      	adds	r3, #36	; 0x24
 802d14a:	2200      	movs	r2, #0
 802d14c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 802d14e:	6939      	ldr	r1, [r7, #16]
 802d150:	69fa      	ldr	r2, [r7, #28]
 802d152:	4613      	mov	r3, r2
 802d154:	005b      	lsls	r3, r3, #1
 802d156:	4413      	add	r3, r2
 802d158:	00db      	lsls	r3, r3, #3
 802d15a:	440b      	add	r3, r1
 802d15c:	332c      	adds	r3, #44	; 0x2c
 802d15e:	683a      	ldr	r2, [r7, #0]
 802d160:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 802d162:	f3bf 8f5f 	dmb	sy
 802d166:	e002      	b.n	802d16e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 802d168:	f04f 33ff 	mov.w	r3, #4294967295
 802d16c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 802d16e:	697b      	ldr	r3, [r7, #20]
 802d170:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 802d174:	69fb      	ldr	r3, [r7, #28]
}
 802d176:	4618      	mov	r0, r3
 802d178:	3720      	adds	r7, #32
 802d17a:	46bd      	mov	sp, r7
 802d17c:	bd80      	pop	{r7, pc}
 802d17e:	bf00      	nop
 802d180:	2001eec0 	.word	0x2001eec0

0802d184 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 802d184:	b580      	push	{r7, lr}
 802d186:	b08a      	sub	sp, #40	; 0x28
 802d188:	af00      	add	r7, sp, #0
 802d18a:	60f8      	str	r0, [r7, #12]
 802d18c:	60b9      	str	r1, [r7, #8]
 802d18e:	607a      	str	r2, [r7, #4]
 802d190:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 802d192:	4b21      	ldr	r3, [pc, #132]	; (802d218 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 802d194:	623b      	str	r3, [r7, #32]
 802d196:	6a3b      	ldr	r3, [r7, #32]
 802d198:	781b      	ldrb	r3, [r3, #0]
 802d19a:	b2db      	uxtb	r3, r3
 802d19c:	2b00      	cmp	r3, #0
 802d19e:	d101      	bne.n	802d1a4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 802d1a0:	f7ff fe8e 	bl	802cec0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 802d1a4:	4b1c      	ldr	r3, [pc, #112]	; (802d218 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 802d1a6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 802d1a8:	68fb      	ldr	r3, [r7, #12]
 802d1aa:	2b02      	cmp	r3, #2
 802d1ac:	d82c      	bhi.n	802d208 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 802d1ae:	f3ef 8311 	mrs	r3, BASEPRI
 802d1b2:	f04f 0120 	mov.w	r1, #32
 802d1b6:	f381 8811 	msr	BASEPRI, r1
 802d1ba:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 802d1bc:	68fa      	ldr	r2, [r7, #12]
 802d1be:	4613      	mov	r3, r2
 802d1c0:	005b      	lsls	r3, r3, #1
 802d1c2:	4413      	add	r3, r2
 802d1c4:	00db      	lsls	r3, r3, #3
 802d1c6:	3360      	adds	r3, #96	; 0x60
 802d1c8:	69fa      	ldr	r2, [r7, #28]
 802d1ca:	4413      	add	r3, r2
 802d1cc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 802d1ce:	68fb      	ldr	r3, [r7, #12]
 802d1d0:	2b00      	cmp	r3, #0
 802d1d2:	d00e      	beq.n	802d1f2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 802d1d4:	697b      	ldr	r3, [r7, #20]
 802d1d6:	68ba      	ldr	r2, [r7, #8]
 802d1d8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 802d1da:	697b      	ldr	r3, [r7, #20]
 802d1dc:	687a      	ldr	r2, [r7, #4]
 802d1de:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 802d1e0:	697b      	ldr	r3, [r7, #20]
 802d1e2:	683a      	ldr	r2, [r7, #0]
 802d1e4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 802d1e6:	697b      	ldr	r3, [r7, #20]
 802d1e8:	2200      	movs	r2, #0
 802d1ea:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 802d1ec:	697b      	ldr	r3, [r7, #20]
 802d1ee:	2200      	movs	r2, #0
 802d1f0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 802d1f2:	697b      	ldr	r3, [r7, #20]
 802d1f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802d1f6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 802d1f8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 802d1fc:	69bb      	ldr	r3, [r7, #24]
 802d1fe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 802d202:	2300      	movs	r3, #0
 802d204:	627b      	str	r3, [r7, #36]	; 0x24
 802d206:	e002      	b.n	802d20e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 802d208:	f04f 33ff 	mov.w	r3, #4294967295
 802d20c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 802d20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802d210:	4618      	mov	r0, r3
 802d212:	3728      	adds	r7, #40	; 0x28
 802d214:	46bd      	mov	sp, r7
 802d216:	bd80      	pop	{r7, pc}
 802d218:	2001eec0 	.word	0x2001eec0

0802d21c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 802d21c:	b480      	push	{r7}
 802d21e:	b087      	sub	sp, #28
 802d220:	af00      	add	r7, sp, #0
 802d222:	60f8      	str	r0, [r7, #12]
 802d224:	60b9      	str	r1, [r7, #8]
 802d226:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 802d228:	2300      	movs	r3, #0
 802d22a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 802d22c:	68bb      	ldr	r3, [r7, #8]
 802d22e:	2b00      	cmp	r3, #0
 802d230:	d00f      	beq.n	802d252 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 802d232:	e002      	b.n	802d23a <_EncodeStr+0x1e>
      Len++;
 802d234:	693b      	ldr	r3, [r7, #16]
 802d236:	3301      	adds	r3, #1
 802d238:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 802d23a:	68ba      	ldr	r2, [r7, #8]
 802d23c:	693b      	ldr	r3, [r7, #16]
 802d23e:	4413      	add	r3, r2
 802d240:	781b      	ldrb	r3, [r3, #0]
 802d242:	2b00      	cmp	r3, #0
 802d244:	d1f6      	bne.n	802d234 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 802d246:	693a      	ldr	r2, [r7, #16]
 802d248:	687b      	ldr	r3, [r7, #4]
 802d24a:	429a      	cmp	r2, r3
 802d24c:	d901      	bls.n	802d252 <_EncodeStr+0x36>
      Len = Limit;
 802d24e:	687b      	ldr	r3, [r7, #4]
 802d250:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 802d252:	693b      	ldr	r3, [r7, #16]
 802d254:	2bfe      	cmp	r3, #254	; 0xfe
 802d256:	d806      	bhi.n	802d266 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 802d258:	68fb      	ldr	r3, [r7, #12]
 802d25a:	1c5a      	adds	r2, r3, #1
 802d25c:	60fa      	str	r2, [r7, #12]
 802d25e:	693a      	ldr	r2, [r7, #16]
 802d260:	b2d2      	uxtb	r2, r2
 802d262:	701a      	strb	r2, [r3, #0]
 802d264:	e011      	b.n	802d28a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 802d266:	68fb      	ldr	r3, [r7, #12]
 802d268:	1c5a      	adds	r2, r3, #1
 802d26a:	60fa      	str	r2, [r7, #12]
 802d26c:	22ff      	movs	r2, #255	; 0xff
 802d26e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 802d270:	68fb      	ldr	r3, [r7, #12]
 802d272:	1c5a      	adds	r2, r3, #1
 802d274:	60fa      	str	r2, [r7, #12]
 802d276:	693a      	ldr	r2, [r7, #16]
 802d278:	b2d2      	uxtb	r2, r2
 802d27a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 802d27c:	693b      	ldr	r3, [r7, #16]
 802d27e:	0a19      	lsrs	r1, r3, #8
 802d280:	68fb      	ldr	r3, [r7, #12]
 802d282:	1c5a      	adds	r2, r3, #1
 802d284:	60fa      	str	r2, [r7, #12]
 802d286:	b2ca      	uxtb	r2, r1
 802d288:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 802d28a:	2300      	movs	r3, #0
 802d28c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 802d28e:	e00a      	b.n	802d2a6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 802d290:	68ba      	ldr	r2, [r7, #8]
 802d292:	1c53      	adds	r3, r2, #1
 802d294:	60bb      	str	r3, [r7, #8]
 802d296:	68fb      	ldr	r3, [r7, #12]
 802d298:	1c59      	adds	r1, r3, #1
 802d29a:	60f9      	str	r1, [r7, #12]
 802d29c:	7812      	ldrb	r2, [r2, #0]
 802d29e:	701a      	strb	r2, [r3, #0]
    n++;
 802d2a0:	697b      	ldr	r3, [r7, #20]
 802d2a2:	3301      	adds	r3, #1
 802d2a4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 802d2a6:	697a      	ldr	r2, [r7, #20]
 802d2a8:	693b      	ldr	r3, [r7, #16]
 802d2aa:	429a      	cmp	r2, r3
 802d2ac:	d3f0      	bcc.n	802d290 <_EncodeStr+0x74>
  }
  return pPayload;
 802d2ae:	68fb      	ldr	r3, [r7, #12]
}
 802d2b0:	4618      	mov	r0, r3
 802d2b2:	371c      	adds	r7, #28
 802d2b4:	46bd      	mov	sp, r7
 802d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d2ba:	4770      	bx	lr

0802d2bc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 802d2bc:	b480      	push	{r7}
 802d2be:	b083      	sub	sp, #12
 802d2c0:	af00      	add	r7, sp, #0
 802d2c2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 802d2c4:	687b      	ldr	r3, [r7, #4]
 802d2c6:	3304      	adds	r3, #4
}
 802d2c8:	4618      	mov	r0, r3
 802d2ca:	370c      	adds	r7, #12
 802d2cc:	46bd      	mov	sp, r7
 802d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d2d2:	4770      	bx	lr

0802d2d4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 802d2d4:	b580      	push	{r7, lr}
 802d2d6:	b082      	sub	sp, #8
 802d2d8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 802d2da:	4b36      	ldr	r3, [pc, #216]	; (802d3b4 <_HandleIncomingPacket+0xe0>)
 802d2dc:	7e1b      	ldrb	r3, [r3, #24]
 802d2de:	4618      	mov	r0, r3
 802d2e0:	1cfb      	adds	r3, r7, #3
 802d2e2:	2201      	movs	r2, #1
 802d2e4:	4619      	mov	r1, r3
 802d2e6:	f7ff fe43 	bl	802cf70 <SEGGER_RTT_ReadNoLock>
 802d2ea:	4603      	mov	r3, r0
 802d2ec:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 802d2ee:	687b      	ldr	r3, [r7, #4]
 802d2f0:	2b00      	cmp	r3, #0
 802d2f2:	dd54      	ble.n	802d39e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 802d2f4:	78fb      	ldrb	r3, [r7, #3]
 802d2f6:	2b80      	cmp	r3, #128	; 0x80
 802d2f8:	d032      	beq.n	802d360 <_HandleIncomingPacket+0x8c>
 802d2fa:	2b80      	cmp	r3, #128	; 0x80
 802d2fc:	dc42      	bgt.n	802d384 <_HandleIncomingPacket+0xb0>
 802d2fe:	2b07      	cmp	r3, #7
 802d300:	dc16      	bgt.n	802d330 <_HandleIncomingPacket+0x5c>
 802d302:	2b00      	cmp	r3, #0
 802d304:	dd3e      	ble.n	802d384 <_HandleIncomingPacket+0xb0>
 802d306:	3b01      	subs	r3, #1
 802d308:	2b06      	cmp	r3, #6
 802d30a:	d83b      	bhi.n	802d384 <_HandleIncomingPacket+0xb0>
 802d30c:	a201      	add	r2, pc, #4	; (adr r2, 802d314 <_HandleIncomingPacket+0x40>)
 802d30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d312:	bf00      	nop
 802d314:	0802d337 	.word	0x0802d337
 802d318:	0802d33d 	.word	0x0802d33d
 802d31c:	0802d343 	.word	0x0802d343
 802d320:	0802d349 	.word	0x0802d349
 802d324:	0802d34f 	.word	0x0802d34f
 802d328:	0802d355 	.word	0x0802d355
 802d32c:	0802d35b 	.word	0x0802d35b
 802d330:	2b7f      	cmp	r3, #127	; 0x7f
 802d332:	d036      	beq.n	802d3a2 <_HandleIncomingPacket+0xce>
 802d334:	e026      	b.n	802d384 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 802d336:	f000 fc67 	bl	802dc08 <SEGGER_SYSVIEW_Start>
      break;
 802d33a:	e037      	b.n	802d3ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 802d33c:	f000 fd1e 	bl	802dd7c <SEGGER_SYSVIEW_Stop>
      break;
 802d340:	e034      	b.n	802d3ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 802d342:	f000 fef7 	bl	802e134 <SEGGER_SYSVIEW_RecordSystime>
      break;
 802d346:	e031      	b.n	802d3ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 802d348:	f000 febc 	bl	802e0c4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 802d34c:	e02e      	b.n	802d3ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 802d34e:	f000 fd3b 	bl	802ddc8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 802d352:	e02b      	b.n	802d3ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 802d354:	f001 f8b0 	bl	802e4b8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 802d358:	e028      	b.n	802d3ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 802d35a:	f001 f88f 	bl	802e47c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 802d35e:	e025      	b.n	802d3ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 802d360:	4b14      	ldr	r3, [pc, #80]	; (802d3b4 <_HandleIncomingPacket+0xe0>)
 802d362:	7e1b      	ldrb	r3, [r3, #24]
 802d364:	4618      	mov	r0, r3
 802d366:	1cfb      	adds	r3, r7, #3
 802d368:	2201      	movs	r2, #1
 802d36a:	4619      	mov	r1, r3
 802d36c:	f7ff fe00 	bl	802cf70 <SEGGER_RTT_ReadNoLock>
 802d370:	4603      	mov	r3, r0
 802d372:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 802d374:	687b      	ldr	r3, [r7, #4]
 802d376:	2b00      	cmp	r3, #0
 802d378:	dd15      	ble.n	802d3a6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 802d37a:	78fb      	ldrb	r3, [r7, #3]
 802d37c:	4618      	mov	r0, r3
 802d37e:	f000 fffd 	bl	802e37c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 802d382:	e010      	b.n	802d3a6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 802d384:	78fb      	ldrb	r3, [r7, #3]
 802d386:	b25b      	sxtb	r3, r3
 802d388:	2b00      	cmp	r3, #0
 802d38a:	da0e      	bge.n	802d3aa <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 802d38c:	4b09      	ldr	r3, [pc, #36]	; (802d3b4 <_HandleIncomingPacket+0xe0>)
 802d38e:	7e1b      	ldrb	r3, [r3, #24]
 802d390:	4618      	mov	r0, r3
 802d392:	1cfb      	adds	r3, r7, #3
 802d394:	2201      	movs	r2, #1
 802d396:	4619      	mov	r1, r3
 802d398:	f7ff fdea 	bl	802cf70 <SEGGER_RTT_ReadNoLock>
      }
      break;
 802d39c:	e005      	b.n	802d3aa <_HandleIncomingPacket+0xd6>
    }
  }
 802d39e:	bf00      	nop
 802d3a0:	e004      	b.n	802d3ac <_HandleIncomingPacket+0xd8>
      break;
 802d3a2:	bf00      	nop
 802d3a4:	e002      	b.n	802d3ac <_HandleIncomingPacket+0xd8>
      break;
 802d3a6:	bf00      	nop
 802d3a8:	e000      	b.n	802d3ac <_HandleIncomingPacket+0xd8>
      break;
 802d3aa:	bf00      	nop
}
 802d3ac:	bf00      	nop
 802d3ae:	3708      	adds	r7, #8
 802d3b0:	46bd      	mov	sp, r7
 802d3b2:	bd80      	pop	{r7, pc}
 802d3b4:	2001b6e8 	.word	0x2001b6e8

0802d3b8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 802d3b8:	b580      	push	{r7, lr}
 802d3ba:	b08c      	sub	sp, #48	; 0x30
 802d3bc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 802d3be:	2301      	movs	r3, #1
 802d3c0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 802d3c2:	1d3b      	adds	r3, r7, #4
 802d3c4:	3301      	adds	r3, #1
 802d3c6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 802d3c8:	69fb      	ldr	r3, [r7, #28]
 802d3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 802d3cc:	4b31      	ldr	r3, [pc, #196]	; (802d494 <_TrySendOverflowPacket+0xdc>)
 802d3ce:	695b      	ldr	r3, [r3, #20]
 802d3d0:	62bb      	str	r3, [r7, #40]	; 0x28
 802d3d2:	e00b      	b.n	802d3ec <_TrySendOverflowPacket+0x34>
 802d3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d3d6:	b2da      	uxtb	r2, r3
 802d3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d3da:	1c59      	adds	r1, r3, #1
 802d3dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 802d3de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d3e2:	b2d2      	uxtb	r2, r2
 802d3e4:	701a      	strb	r2, [r3, #0]
 802d3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d3e8:	09db      	lsrs	r3, r3, #7
 802d3ea:	62bb      	str	r3, [r7, #40]	; 0x28
 802d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d3ee:	2b7f      	cmp	r3, #127	; 0x7f
 802d3f0:	d8f0      	bhi.n	802d3d4 <_TrySendOverflowPacket+0x1c>
 802d3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d3f4:	1c5a      	adds	r2, r3, #1
 802d3f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 802d3f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d3fa:	b2d2      	uxtb	r2, r2
 802d3fc:	701a      	strb	r2, [r3, #0]
 802d3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d400:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 802d402:	4b25      	ldr	r3, [pc, #148]	; (802d498 <_TrySendOverflowPacket+0xe0>)
 802d404:	681b      	ldr	r3, [r3, #0]
 802d406:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 802d408:	4b22      	ldr	r3, [pc, #136]	; (802d494 <_TrySendOverflowPacket+0xdc>)
 802d40a:	68db      	ldr	r3, [r3, #12]
 802d40c:	69ba      	ldr	r2, [r7, #24]
 802d40e:	1ad3      	subs	r3, r2, r3
 802d410:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 802d412:	69fb      	ldr	r3, [r7, #28]
 802d414:	627b      	str	r3, [r7, #36]	; 0x24
 802d416:	697b      	ldr	r3, [r7, #20]
 802d418:	623b      	str	r3, [r7, #32]
 802d41a:	e00b      	b.n	802d434 <_TrySendOverflowPacket+0x7c>
 802d41c:	6a3b      	ldr	r3, [r7, #32]
 802d41e:	b2da      	uxtb	r2, r3
 802d420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d422:	1c59      	adds	r1, r3, #1
 802d424:	6279      	str	r1, [r7, #36]	; 0x24
 802d426:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d42a:	b2d2      	uxtb	r2, r2
 802d42c:	701a      	strb	r2, [r3, #0]
 802d42e:	6a3b      	ldr	r3, [r7, #32]
 802d430:	09db      	lsrs	r3, r3, #7
 802d432:	623b      	str	r3, [r7, #32]
 802d434:	6a3b      	ldr	r3, [r7, #32]
 802d436:	2b7f      	cmp	r3, #127	; 0x7f
 802d438:	d8f0      	bhi.n	802d41c <_TrySendOverflowPacket+0x64>
 802d43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d43c:	1c5a      	adds	r2, r3, #1
 802d43e:	627a      	str	r2, [r7, #36]	; 0x24
 802d440:	6a3a      	ldr	r2, [r7, #32]
 802d442:	b2d2      	uxtb	r2, r2
 802d444:	701a      	strb	r2, [r3, #0]
 802d446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d448:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 802d44a:	4b12      	ldr	r3, [pc, #72]	; (802d494 <_TrySendOverflowPacket+0xdc>)
 802d44c:	785b      	ldrb	r3, [r3, #1]
 802d44e:	4618      	mov	r0, r3
 802d450:	1d3b      	adds	r3, r7, #4
 802d452:	69fa      	ldr	r2, [r7, #28]
 802d454:	1ad3      	subs	r3, r2, r3
 802d456:	461a      	mov	r2, r3
 802d458:	1d3b      	adds	r3, r7, #4
 802d45a:	4619      	mov	r1, r3
 802d45c:	f7d2 feb8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 802d460:	4603      	mov	r3, r0
 802d462:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 802d464:	693b      	ldr	r3, [r7, #16]
 802d466:	2b00      	cmp	r3, #0
 802d468:	d009      	beq.n	802d47e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 802d46a:	4a0a      	ldr	r2, [pc, #40]	; (802d494 <_TrySendOverflowPacket+0xdc>)
 802d46c:	69bb      	ldr	r3, [r7, #24]
 802d46e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 802d470:	4b08      	ldr	r3, [pc, #32]	; (802d494 <_TrySendOverflowPacket+0xdc>)
 802d472:	781b      	ldrb	r3, [r3, #0]
 802d474:	3b01      	subs	r3, #1
 802d476:	b2da      	uxtb	r2, r3
 802d478:	4b06      	ldr	r3, [pc, #24]	; (802d494 <_TrySendOverflowPacket+0xdc>)
 802d47a:	701a      	strb	r2, [r3, #0]
 802d47c:	e004      	b.n	802d488 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 802d47e:	4b05      	ldr	r3, [pc, #20]	; (802d494 <_TrySendOverflowPacket+0xdc>)
 802d480:	695b      	ldr	r3, [r3, #20]
 802d482:	3301      	adds	r3, #1
 802d484:	4a03      	ldr	r2, [pc, #12]	; (802d494 <_TrySendOverflowPacket+0xdc>)
 802d486:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 802d488:	693b      	ldr	r3, [r7, #16]
}
 802d48a:	4618      	mov	r0, r3
 802d48c:	3730      	adds	r7, #48	; 0x30
 802d48e:	46bd      	mov	sp, r7
 802d490:	bd80      	pop	{r7, pc}
 802d492:	bf00      	nop
 802d494:	2001b6e8 	.word	0x2001b6e8
 802d498:	e0001004 	.word	0xe0001004

0802d49c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 802d49c:	b580      	push	{r7, lr}
 802d49e:	b08a      	sub	sp, #40	; 0x28
 802d4a0:	af00      	add	r7, sp, #0
 802d4a2:	60f8      	str	r0, [r7, #12]
 802d4a4:	60b9      	str	r1, [r7, #8]
 802d4a6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 802d4a8:	4b6c      	ldr	r3, [pc, #432]	; (802d65c <_SendPacket+0x1c0>)
 802d4aa:	781b      	ldrb	r3, [r3, #0]
 802d4ac:	2b01      	cmp	r3, #1
 802d4ae:	d010      	beq.n	802d4d2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 802d4b0:	4b6a      	ldr	r3, [pc, #424]	; (802d65c <_SendPacket+0x1c0>)
 802d4b2:	781b      	ldrb	r3, [r3, #0]
 802d4b4:	2b00      	cmp	r3, #0
 802d4b6:	f000 80a3 	beq.w	802d600 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 802d4ba:	4b68      	ldr	r3, [pc, #416]	; (802d65c <_SendPacket+0x1c0>)
 802d4bc:	781b      	ldrb	r3, [r3, #0]
 802d4be:	2b02      	cmp	r3, #2
 802d4c0:	d109      	bne.n	802d4d6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 802d4c2:	f7ff ff79 	bl	802d3b8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 802d4c6:	4b65      	ldr	r3, [pc, #404]	; (802d65c <_SendPacket+0x1c0>)
 802d4c8:	781b      	ldrb	r3, [r3, #0]
 802d4ca:	2b01      	cmp	r3, #1
 802d4cc:	f040 809a 	bne.w	802d604 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 802d4d0:	e001      	b.n	802d4d6 <_SendPacket+0x3a>
    goto Send;
 802d4d2:	bf00      	nop
 802d4d4:	e000      	b.n	802d4d8 <_SendPacket+0x3c>
Send:
 802d4d6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 802d4d8:	687b      	ldr	r3, [r7, #4]
 802d4da:	2b1f      	cmp	r3, #31
 802d4dc:	d809      	bhi.n	802d4f2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 802d4de:	4b5f      	ldr	r3, [pc, #380]	; (802d65c <_SendPacket+0x1c0>)
 802d4e0:	69da      	ldr	r2, [r3, #28]
 802d4e2:	687b      	ldr	r3, [r7, #4]
 802d4e4:	fa22 f303 	lsr.w	r3, r2, r3
 802d4e8:	f003 0301 	and.w	r3, r3, #1
 802d4ec:	2b00      	cmp	r3, #0
 802d4ee:	f040 808b 	bne.w	802d608 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 802d4f2:	687b      	ldr	r3, [r7, #4]
 802d4f4:	2b17      	cmp	r3, #23
 802d4f6:	d807      	bhi.n	802d508 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 802d4f8:	68fb      	ldr	r3, [r7, #12]
 802d4fa:	3b01      	subs	r3, #1
 802d4fc:	60fb      	str	r3, [r7, #12]
 802d4fe:	687b      	ldr	r3, [r7, #4]
 802d500:	b2da      	uxtb	r2, r3
 802d502:	68fb      	ldr	r3, [r7, #12]
 802d504:	701a      	strb	r2, [r3, #0]
 802d506:	e03d      	b.n	802d584 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 802d508:	68ba      	ldr	r2, [r7, #8]
 802d50a:	68fb      	ldr	r3, [r7, #12]
 802d50c:	1ad3      	subs	r3, r2, r3
 802d50e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 802d510:	69fb      	ldr	r3, [r7, #28]
 802d512:	2b7f      	cmp	r3, #127	; 0x7f
 802d514:	d912      	bls.n	802d53c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 802d516:	69fb      	ldr	r3, [r7, #28]
 802d518:	09da      	lsrs	r2, r3, #7
 802d51a:	68fb      	ldr	r3, [r7, #12]
 802d51c:	3b01      	subs	r3, #1
 802d51e:	60fb      	str	r3, [r7, #12]
 802d520:	b2d2      	uxtb	r2, r2
 802d522:	68fb      	ldr	r3, [r7, #12]
 802d524:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 802d526:	69fb      	ldr	r3, [r7, #28]
 802d528:	b2db      	uxtb	r3, r3
 802d52a:	68fa      	ldr	r2, [r7, #12]
 802d52c:	3a01      	subs	r2, #1
 802d52e:	60fa      	str	r2, [r7, #12]
 802d530:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802d534:	b2da      	uxtb	r2, r3
 802d536:	68fb      	ldr	r3, [r7, #12]
 802d538:	701a      	strb	r2, [r3, #0]
 802d53a:	e006      	b.n	802d54a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 802d53c:	68fb      	ldr	r3, [r7, #12]
 802d53e:	3b01      	subs	r3, #1
 802d540:	60fb      	str	r3, [r7, #12]
 802d542:	69fb      	ldr	r3, [r7, #28]
 802d544:	b2da      	uxtb	r2, r3
 802d546:	68fb      	ldr	r3, [r7, #12]
 802d548:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 802d54a:	687b      	ldr	r3, [r7, #4]
 802d54c:	2b7f      	cmp	r3, #127	; 0x7f
 802d54e:	d912      	bls.n	802d576 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 802d550:	687b      	ldr	r3, [r7, #4]
 802d552:	09da      	lsrs	r2, r3, #7
 802d554:	68fb      	ldr	r3, [r7, #12]
 802d556:	3b01      	subs	r3, #1
 802d558:	60fb      	str	r3, [r7, #12]
 802d55a:	b2d2      	uxtb	r2, r2
 802d55c:	68fb      	ldr	r3, [r7, #12]
 802d55e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 802d560:	687b      	ldr	r3, [r7, #4]
 802d562:	b2db      	uxtb	r3, r3
 802d564:	68fa      	ldr	r2, [r7, #12]
 802d566:	3a01      	subs	r2, #1
 802d568:	60fa      	str	r2, [r7, #12]
 802d56a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802d56e:	b2da      	uxtb	r2, r3
 802d570:	68fb      	ldr	r3, [r7, #12]
 802d572:	701a      	strb	r2, [r3, #0]
 802d574:	e006      	b.n	802d584 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 802d576:	68fb      	ldr	r3, [r7, #12]
 802d578:	3b01      	subs	r3, #1
 802d57a:	60fb      	str	r3, [r7, #12]
 802d57c:	687b      	ldr	r3, [r7, #4]
 802d57e:	b2da      	uxtb	r2, r3
 802d580:	68fb      	ldr	r3, [r7, #12]
 802d582:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 802d584:	4b36      	ldr	r3, [pc, #216]	; (802d660 <_SendPacket+0x1c4>)
 802d586:	681b      	ldr	r3, [r3, #0]
 802d588:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 802d58a:	4b34      	ldr	r3, [pc, #208]	; (802d65c <_SendPacket+0x1c0>)
 802d58c:	68db      	ldr	r3, [r3, #12]
 802d58e:	69ba      	ldr	r2, [r7, #24]
 802d590:	1ad3      	subs	r3, r2, r3
 802d592:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 802d594:	68bb      	ldr	r3, [r7, #8]
 802d596:	627b      	str	r3, [r7, #36]	; 0x24
 802d598:	697b      	ldr	r3, [r7, #20]
 802d59a:	623b      	str	r3, [r7, #32]
 802d59c:	e00b      	b.n	802d5b6 <_SendPacket+0x11a>
 802d59e:	6a3b      	ldr	r3, [r7, #32]
 802d5a0:	b2da      	uxtb	r2, r3
 802d5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d5a4:	1c59      	adds	r1, r3, #1
 802d5a6:	6279      	str	r1, [r7, #36]	; 0x24
 802d5a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d5ac:	b2d2      	uxtb	r2, r2
 802d5ae:	701a      	strb	r2, [r3, #0]
 802d5b0:	6a3b      	ldr	r3, [r7, #32]
 802d5b2:	09db      	lsrs	r3, r3, #7
 802d5b4:	623b      	str	r3, [r7, #32]
 802d5b6:	6a3b      	ldr	r3, [r7, #32]
 802d5b8:	2b7f      	cmp	r3, #127	; 0x7f
 802d5ba:	d8f0      	bhi.n	802d59e <_SendPacket+0x102>
 802d5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d5be:	1c5a      	adds	r2, r3, #1
 802d5c0:	627a      	str	r2, [r7, #36]	; 0x24
 802d5c2:	6a3a      	ldr	r2, [r7, #32]
 802d5c4:	b2d2      	uxtb	r2, r2
 802d5c6:	701a      	strb	r2, [r3, #0]
 802d5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d5ca:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 802d5cc:	4b23      	ldr	r3, [pc, #140]	; (802d65c <_SendPacket+0x1c0>)
 802d5ce:	785b      	ldrb	r3, [r3, #1]
 802d5d0:	4618      	mov	r0, r3
 802d5d2:	68ba      	ldr	r2, [r7, #8]
 802d5d4:	68fb      	ldr	r3, [r7, #12]
 802d5d6:	1ad3      	subs	r3, r2, r3
 802d5d8:	461a      	mov	r2, r3
 802d5da:	68f9      	ldr	r1, [r7, #12]
 802d5dc:	f7d2 fdf8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 802d5e0:	4603      	mov	r3, r0
 802d5e2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 802d5e4:	693b      	ldr	r3, [r7, #16]
 802d5e6:	2b00      	cmp	r3, #0
 802d5e8:	d003      	beq.n	802d5f2 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 802d5ea:	4a1c      	ldr	r2, [pc, #112]	; (802d65c <_SendPacket+0x1c0>)
 802d5ec:	69bb      	ldr	r3, [r7, #24]
 802d5ee:	60d3      	str	r3, [r2, #12]
 802d5f0:	e00b      	b.n	802d60a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 802d5f2:	4b1a      	ldr	r3, [pc, #104]	; (802d65c <_SendPacket+0x1c0>)
 802d5f4:	781b      	ldrb	r3, [r3, #0]
 802d5f6:	3301      	adds	r3, #1
 802d5f8:	b2da      	uxtb	r2, r3
 802d5fa:	4b18      	ldr	r3, [pc, #96]	; (802d65c <_SendPacket+0x1c0>)
 802d5fc:	701a      	strb	r2, [r3, #0]
 802d5fe:	e004      	b.n	802d60a <_SendPacket+0x16e>
    goto SendDone;
 802d600:	bf00      	nop
 802d602:	e002      	b.n	802d60a <_SendPacket+0x16e>
      goto SendDone;
 802d604:	bf00      	nop
 802d606:	e000      	b.n	802d60a <_SendPacket+0x16e>
      goto SendDone;
 802d608:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 802d60a:	4b14      	ldr	r3, [pc, #80]	; (802d65c <_SendPacket+0x1c0>)
 802d60c:	7e1b      	ldrb	r3, [r3, #24]
 802d60e:	4619      	mov	r1, r3
 802d610:	4a14      	ldr	r2, [pc, #80]	; (802d664 <_SendPacket+0x1c8>)
 802d612:	460b      	mov	r3, r1
 802d614:	005b      	lsls	r3, r3, #1
 802d616:	440b      	add	r3, r1
 802d618:	00db      	lsls	r3, r3, #3
 802d61a:	4413      	add	r3, r2
 802d61c:	336c      	adds	r3, #108	; 0x6c
 802d61e:	681a      	ldr	r2, [r3, #0]
 802d620:	4b0e      	ldr	r3, [pc, #56]	; (802d65c <_SendPacket+0x1c0>)
 802d622:	7e1b      	ldrb	r3, [r3, #24]
 802d624:	4618      	mov	r0, r3
 802d626:	490f      	ldr	r1, [pc, #60]	; (802d664 <_SendPacket+0x1c8>)
 802d628:	4603      	mov	r3, r0
 802d62a:	005b      	lsls	r3, r3, #1
 802d62c:	4403      	add	r3, r0
 802d62e:	00db      	lsls	r3, r3, #3
 802d630:	440b      	add	r3, r1
 802d632:	3370      	adds	r3, #112	; 0x70
 802d634:	681b      	ldr	r3, [r3, #0]
 802d636:	429a      	cmp	r2, r3
 802d638:	d00b      	beq.n	802d652 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 802d63a:	4b08      	ldr	r3, [pc, #32]	; (802d65c <_SendPacket+0x1c0>)
 802d63c:	789b      	ldrb	r3, [r3, #2]
 802d63e:	2b00      	cmp	r3, #0
 802d640:	d107      	bne.n	802d652 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 802d642:	4b06      	ldr	r3, [pc, #24]	; (802d65c <_SendPacket+0x1c0>)
 802d644:	2201      	movs	r2, #1
 802d646:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 802d648:	f7ff fe44 	bl	802d2d4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 802d64c:	4b03      	ldr	r3, [pc, #12]	; (802d65c <_SendPacket+0x1c0>)
 802d64e:	2200      	movs	r2, #0
 802d650:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 802d652:	bf00      	nop
 802d654:	3728      	adds	r7, #40	; 0x28
 802d656:	46bd      	mov	sp, r7
 802d658:	bd80      	pop	{r7, pc}
 802d65a:	bf00      	nop
 802d65c:	2001b6e8 	.word	0x2001b6e8
 802d660:	e0001004 	.word	0xe0001004
 802d664:	2001eec0 	.word	0x2001eec0

0802d668 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 802d668:	b580      	push	{r7, lr}
 802d66a:	b0a2      	sub	sp, #136	; 0x88
 802d66c:	af00      	add	r7, sp, #0
 802d66e:	60f8      	str	r0, [r7, #12]
 802d670:	60b9      	str	r1, [r7, #8]
 802d672:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 802d674:	68fb      	ldr	r3, [r7, #12]
 802d676:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 802d678:	2300      	movs	r3, #0
 802d67a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 802d67e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802d680:	1c5a      	adds	r2, r3, #1
 802d682:	67fa      	str	r2, [r7, #124]	; 0x7c
 802d684:	781b      	ldrb	r3, [r3, #0]
 802d686:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 802d68a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802d68e:	2b00      	cmp	r3, #0
 802d690:	d01e      	beq.n	802d6d0 <_VPrintHost+0x68>
      break;
    }
    if (c == '%') {
 802d692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802d696:	2b25      	cmp	r3, #37	; 0x25
 802d698:	d1f1      	bne.n	802d67e <_VPrintHost+0x16>
      c = *p;
 802d69a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802d69c:	781b      	ldrb	r3, [r3, #0]
 802d69e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 802d6a2:	687b      	ldr	r3, [r7, #4]
 802d6a4:	681b      	ldr	r3, [r3, #0]
 802d6a6:	1d19      	adds	r1, r3, #4
 802d6a8:	687a      	ldr	r2, [r7, #4]
 802d6aa:	6011      	str	r1, [r2, #0]
 802d6ac:	6819      	ldr	r1, [r3, #0]
 802d6ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802d6b2:	1c5a      	adds	r2, r3, #1
 802d6b4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802d6b8:	460a      	mov	r2, r1
 802d6ba:	009b      	lsls	r3, r3, #2
 802d6bc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 802d6c0:	440b      	add	r3, r1
 802d6c2:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 802d6c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802d6ca:	2b10      	cmp	r3, #16
 802d6cc:	d002      	beq.n	802d6d4 <_VPrintHost+0x6c>
    c = *p++;
 802d6ce:	e7d6      	b.n	802d67e <_VPrintHost+0x16>
      break;
 802d6d0:	bf00      	nop
 802d6d2:	e000      	b.n	802d6d6 <_VPrintHost+0x6e>
        break;
 802d6d4:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 802d6d6:	f3ef 8311 	mrs	r3, BASEPRI
 802d6da:	f04f 0120 	mov.w	r1, #32
 802d6de:	f381 8811 	msr	BASEPRI, r1
 802d6e2:	65bb      	str	r3, [r7, #88]	; 0x58
 802d6e4:	483f      	ldr	r0, [pc, #252]	; (802d7e4 <_VPrintHost+0x17c>)
 802d6e6:	f7ff fde9 	bl	802d2bc <_PreparePacket>
 802d6ea:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802d6ec:	2280      	movs	r2, #128	; 0x80
 802d6ee:	68f9      	ldr	r1, [r7, #12]
 802d6f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802d6f2:	f7ff fd93 	bl	802d21c <_EncodeStr>
 802d6f6:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 802d6f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802d6fa:	677b      	str	r3, [r7, #116]	; 0x74
 802d6fc:	68bb      	ldr	r3, [r7, #8]
 802d6fe:	673b      	str	r3, [r7, #112]	; 0x70
 802d700:	e00b      	b.n	802d71a <_VPrintHost+0xb2>
 802d702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802d704:	b2da      	uxtb	r2, r3
 802d706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d708:	1c59      	adds	r1, r3, #1
 802d70a:	6779      	str	r1, [r7, #116]	; 0x74
 802d70c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d710:	b2d2      	uxtb	r2, r2
 802d712:	701a      	strb	r2, [r3, #0]
 802d714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802d716:	09db      	lsrs	r3, r3, #7
 802d718:	673b      	str	r3, [r7, #112]	; 0x70
 802d71a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802d71c:	2b7f      	cmp	r3, #127	; 0x7f
 802d71e:	d8f0      	bhi.n	802d702 <_VPrintHost+0x9a>
 802d720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d722:	1c5a      	adds	r2, r3, #1
 802d724:	677a      	str	r2, [r7, #116]	; 0x74
 802d726:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802d728:	b2d2      	uxtb	r2, r2
 802d72a:	701a      	strb	r2, [r3, #0]
 802d72c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d72e:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 802d730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802d732:	66fb      	str	r3, [r7, #108]	; 0x6c
 802d734:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802d738:	66bb      	str	r3, [r7, #104]	; 0x68
 802d73a:	e00b      	b.n	802d754 <_VPrintHost+0xec>
 802d73c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802d73e:	b2da      	uxtb	r2, r3
 802d740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802d742:	1c59      	adds	r1, r3, #1
 802d744:	66f9      	str	r1, [r7, #108]	; 0x6c
 802d746:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d74a:	b2d2      	uxtb	r2, r2
 802d74c:	701a      	strb	r2, [r3, #0]
 802d74e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802d750:	09db      	lsrs	r3, r3, #7
 802d752:	66bb      	str	r3, [r7, #104]	; 0x68
 802d754:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802d756:	2b7f      	cmp	r3, #127	; 0x7f
 802d758:	d8f0      	bhi.n	802d73c <_VPrintHost+0xd4>
 802d75a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802d75c:	1c5a      	adds	r2, r3, #1
 802d75e:	66fa      	str	r2, [r7, #108]	; 0x6c
 802d760:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802d762:	b2d2      	uxtb	r2, r2
 802d764:	701a      	strb	r2, [r3, #0]
 802d766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802d768:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 802d76a:	f107 0314 	add.w	r3, r7, #20
 802d76e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 802d772:	e022      	b.n	802d7ba <_VPrintHost+0x152>
      ENCODE_U32(pPayload, (*pParas));
 802d774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802d776:	667b      	str	r3, [r7, #100]	; 0x64
 802d778:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802d77c:	681b      	ldr	r3, [r3, #0]
 802d77e:	663b      	str	r3, [r7, #96]	; 0x60
 802d780:	e00b      	b.n	802d79a <_VPrintHost+0x132>
 802d782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802d784:	b2da      	uxtb	r2, r3
 802d786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802d788:	1c59      	adds	r1, r3, #1
 802d78a:	6679      	str	r1, [r7, #100]	; 0x64
 802d78c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d790:	b2d2      	uxtb	r2, r2
 802d792:	701a      	strb	r2, [r3, #0]
 802d794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802d796:	09db      	lsrs	r3, r3, #7
 802d798:	663b      	str	r3, [r7, #96]	; 0x60
 802d79a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802d79c:	2b7f      	cmp	r3, #127	; 0x7f
 802d79e:	d8f0      	bhi.n	802d782 <_VPrintHost+0x11a>
 802d7a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802d7a2:	1c5a      	adds	r2, r3, #1
 802d7a4:	667a      	str	r2, [r7, #100]	; 0x64
 802d7a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802d7a8:	b2d2      	uxtb	r2, r2
 802d7aa:	701a      	strb	r2, [r3, #0]
 802d7ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802d7ae:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 802d7b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802d7b4:	3304      	adds	r3, #4
 802d7b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 802d7ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802d7be:	1e5a      	subs	r2, r3, #1
 802d7c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802d7c4:	2b00      	cmp	r3, #0
 802d7c6:	d1d5      	bne.n	802d774 <_VPrintHost+0x10c>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 802d7c8:	221a      	movs	r2, #26
 802d7ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 802d7cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802d7ce:	f7ff fe65 	bl	802d49c <_SendPacket>
    RECORD_END();
 802d7d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802d7d4:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 802d7d8:	2300      	movs	r3, #0
}
 802d7da:	4618      	mov	r0, r3
 802d7dc:	3788      	adds	r7, #136	; 0x88
 802d7de:	46bd      	mov	sp, r7
 802d7e0:	bd80      	pop	{r7, pc}
 802d7e2:	bf00      	nop
 802d7e4:	2001b718 	.word	0x2001b718

0802d7e8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 802d7e8:	b580      	push	{r7, lr}
 802d7ea:	b086      	sub	sp, #24
 802d7ec:	af02      	add	r7, sp, #8
 802d7ee:	60f8      	str	r0, [r7, #12]
 802d7f0:	60b9      	str	r1, [r7, #8]
 802d7f2:	607a      	str	r2, [r7, #4]
 802d7f4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 802d7f6:	2300      	movs	r3, #0
 802d7f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802d7fc:	4917      	ldr	r1, [pc, #92]	; (802d85c <SEGGER_SYSVIEW_Init+0x74>)
 802d7fe:	4818      	ldr	r0, [pc, #96]	; (802d860 <SEGGER_SYSVIEW_Init+0x78>)
 802d800:	f7ff fc3c 	bl	802d07c <SEGGER_RTT_AllocUpBuffer>
 802d804:	4603      	mov	r3, r0
 802d806:	b2da      	uxtb	r2, r3
 802d808:	4b16      	ldr	r3, [pc, #88]	; (802d864 <SEGGER_SYSVIEW_Init+0x7c>)
 802d80a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 802d80c:	4b15      	ldr	r3, [pc, #84]	; (802d864 <SEGGER_SYSVIEW_Init+0x7c>)
 802d80e:	785a      	ldrb	r2, [r3, #1]
 802d810:	4b14      	ldr	r3, [pc, #80]	; (802d864 <SEGGER_SYSVIEW_Init+0x7c>)
 802d812:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 802d814:	4b13      	ldr	r3, [pc, #76]	; (802d864 <SEGGER_SYSVIEW_Init+0x7c>)
 802d816:	7e1b      	ldrb	r3, [r3, #24]
 802d818:	4618      	mov	r0, r3
 802d81a:	2300      	movs	r3, #0
 802d81c:	9300      	str	r3, [sp, #0]
 802d81e:	2308      	movs	r3, #8
 802d820:	4a11      	ldr	r2, [pc, #68]	; (802d868 <SEGGER_SYSVIEW_Init+0x80>)
 802d822:	490f      	ldr	r1, [pc, #60]	; (802d860 <SEGGER_SYSVIEW_Init+0x78>)
 802d824:	f7ff fcae 	bl	802d184 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 802d828:	4b0e      	ldr	r3, [pc, #56]	; (802d864 <SEGGER_SYSVIEW_Init+0x7c>)
 802d82a:	2200      	movs	r2, #0
 802d82c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 802d82e:	4b0f      	ldr	r3, [pc, #60]	; (802d86c <SEGGER_SYSVIEW_Init+0x84>)
 802d830:	681b      	ldr	r3, [r3, #0]
 802d832:	4a0c      	ldr	r2, [pc, #48]	; (802d864 <SEGGER_SYSVIEW_Init+0x7c>)
 802d834:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 802d836:	4a0b      	ldr	r2, [pc, #44]	; (802d864 <SEGGER_SYSVIEW_Init+0x7c>)
 802d838:	687b      	ldr	r3, [r7, #4]
 802d83a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 802d83c:	4a09      	ldr	r2, [pc, #36]	; (802d864 <SEGGER_SYSVIEW_Init+0x7c>)
 802d83e:	68fb      	ldr	r3, [r7, #12]
 802d840:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 802d842:	4a08      	ldr	r2, [pc, #32]	; (802d864 <SEGGER_SYSVIEW_Init+0x7c>)
 802d844:	68bb      	ldr	r3, [r7, #8]
 802d846:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 802d848:	4a06      	ldr	r2, [pc, #24]	; (802d864 <SEGGER_SYSVIEW_Init+0x7c>)
 802d84a:	683b      	ldr	r3, [r7, #0]
 802d84c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 802d84e:	4b05      	ldr	r3, [pc, #20]	; (802d864 <SEGGER_SYSVIEW_Init+0x7c>)
 802d850:	2200      	movs	r2, #0
 802d852:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 802d854:	bf00      	nop
 802d856:	3710      	adds	r7, #16
 802d858:	46bd      	mov	sp, r7
 802d85a:	bd80      	pop	{r7, pc}
 802d85c:	2001b2e0 	.word	0x2001b2e0
 802d860:	080304a8 	.word	0x080304a8
 802d864:	2001b6e8 	.word	0x2001b6e8
 802d868:	2001b6e0 	.word	0x2001b6e0
 802d86c:	e0001004 	.word	0xe0001004

0802d870 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 802d870:	b480      	push	{r7}
 802d872:	b083      	sub	sp, #12
 802d874:	af00      	add	r7, sp, #0
 802d876:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 802d878:	4a04      	ldr	r2, [pc, #16]	; (802d88c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 802d87a:	687b      	ldr	r3, [r7, #4]
 802d87c:	6113      	str	r3, [r2, #16]
}
 802d87e:	bf00      	nop
 802d880:	370c      	adds	r7, #12
 802d882:	46bd      	mov	sp, r7
 802d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d888:	4770      	bx	lr
 802d88a:	bf00      	nop
 802d88c:	2001b6e8 	.word	0x2001b6e8

0802d890 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 802d890:	b580      	push	{r7, lr}
 802d892:	b084      	sub	sp, #16
 802d894:	af00      	add	r7, sp, #0
 802d896:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 802d898:	f3ef 8311 	mrs	r3, BASEPRI
 802d89c:	f04f 0120 	mov.w	r1, #32
 802d8a0:	f381 8811 	msr	BASEPRI, r1
 802d8a4:	60fb      	str	r3, [r7, #12]
 802d8a6:	4808      	ldr	r0, [pc, #32]	; (802d8c8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 802d8a8:	f7ff fd08 	bl	802d2bc <_PreparePacket>
 802d8ac:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 802d8ae:	687a      	ldr	r2, [r7, #4]
 802d8b0:	68b9      	ldr	r1, [r7, #8]
 802d8b2:	68b8      	ldr	r0, [r7, #8]
 802d8b4:	f7ff fdf2 	bl	802d49c <_SendPacket>
  RECORD_END();
 802d8b8:	68fb      	ldr	r3, [r7, #12]
 802d8ba:	f383 8811 	msr	BASEPRI, r3
}
 802d8be:	bf00      	nop
 802d8c0:	3710      	adds	r7, #16
 802d8c2:	46bd      	mov	sp, r7
 802d8c4:	bd80      	pop	{r7, pc}
 802d8c6:	bf00      	nop
 802d8c8:	2001b718 	.word	0x2001b718

0802d8cc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 802d8cc:	b580      	push	{r7, lr}
 802d8ce:	b088      	sub	sp, #32
 802d8d0:	af00      	add	r7, sp, #0
 802d8d2:	6078      	str	r0, [r7, #4]
 802d8d4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802d8d6:	f3ef 8311 	mrs	r3, BASEPRI
 802d8da:	f04f 0120 	mov.w	r1, #32
 802d8de:	f381 8811 	msr	BASEPRI, r1
 802d8e2:	617b      	str	r3, [r7, #20]
 802d8e4:	4816      	ldr	r0, [pc, #88]	; (802d940 <SEGGER_SYSVIEW_RecordU32+0x74>)
 802d8e6:	f7ff fce9 	bl	802d2bc <_PreparePacket>
 802d8ea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802d8ec:	693b      	ldr	r3, [r7, #16]
 802d8ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 802d8f0:	68fb      	ldr	r3, [r7, #12]
 802d8f2:	61fb      	str	r3, [r7, #28]
 802d8f4:	683b      	ldr	r3, [r7, #0]
 802d8f6:	61bb      	str	r3, [r7, #24]
 802d8f8:	e00b      	b.n	802d912 <SEGGER_SYSVIEW_RecordU32+0x46>
 802d8fa:	69bb      	ldr	r3, [r7, #24]
 802d8fc:	b2da      	uxtb	r2, r3
 802d8fe:	69fb      	ldr	r3, [r7, #28]
 802d900:	1c59      	adds	r1, r3, #1
 802d902:	61f9      	str	r1, [r7, #28]
 802d904:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d908:	b2d2      	uxtb	r2, r2
 802d90a:	701a      	strb	r2, [r3, #0]
 802d90c:	69bb      	ldr	r3, [r7, #24]
 802d90e:	09db      	lsrs	r3, r3, #7
 802d910:	61bb      	str	r3, [r7, #24]
 802d912:	69bb      	ldr	r3, [r7, #24]
 802d914:	2b7f      	cmp	r3, #127	; 0x7f
 802d916:	d8f0      	bhi.n	802d8fa <SEGGER_SYSVIEW_RecordU32+0x2e>
 802d918:	69fb      	ldr	r3, [r7, #28]
 802d91a:	1c5a      	adds	r2, r3, #1
 802d91c:	61fa      	str	r2, [r7, #28]
 802d91e:	69ba      	ldr	r2, [r7, #24]
 802d920:	b2d2      	uxtb	r2, r2
 802d922:	701a      	strb	r2, [r3, #0]
 802d924:	69fb      	ldr	r3, [r7, #28]
 802d926:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802d928:	687a      	ldr	r2, [r7, #4]
 802d92a:	68f9      	ldr	r1, [r7, #12]
 802d92c:	6938      	ldr	r0, [r7, #16]
 802d92e:	f7ff fdb5 	bl	802d49c <_SendPacket>
  RECORD_END();
 802d932:	697b      	ldr	r3, [r7, #20]
 802d934:	f383 8811 	msr	BASEPRI, r3
}
 802d938:	bf00      	nop
 802d93a:	3720      	adds	r7, #32
 802d93c:	46bd      	mov	sp, r7
 802d93e:	bd80      	pop	{r7, pc}
 802d940:	2001b718 	.word	0x2001b718

0802d944 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 802d944:	b580      	push	{r7, lr}
 802d946:	b08c      	sub	sp, #48	; 0x30
 802d948:	af00      	add	r7, sp, #0
 802d94a:	60f8      	str	r0, [r7, #12]
 802d94c:	60b9      	str	r1, [r7, #8]
 802d94e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 802d950:	f3ef 8311 	mrs	r3, BASEPRI
 802d954:	f04f 0120 	mov.w	r1, #32
 802d958:	f381 8811 	msr	BASEPRI, r1
 802d95c:	61fb      	str	r3, [r7, #28]
 802d95e:	4825      	ldr	r0, [pc, #148]	; (802d9f4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 802d960:	f7ff fcac 	bl	802d2bc <_PreparePacket>
 802d964:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 802d966:	69bb      	ldr	r3, [r7, #24]
 802d968:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 802d96a:	697b      	ldr	r3, [r7, #20]
 802d96c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802d96e:	68bb      	ldr	r3, [r7, #8]
 802d970:	62bb      	str	r3, [r7, #40]	; 0x28
 802d972:	e00b      	b.n	802d98c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 802d974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d976:	b2da      	uxtb	r2, r3
 802d978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d97a:	1c59      	adds	r1, r3, #1
 802d97c:	62f9      	str	r1, [r7, #44]	; 0x2c
 802d97e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d982:	b2d2      	uxtb	r2, r2
 802d984:	701a      	strb	r2, [r3, #0]
 802d986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d988:	09db      	lsrs	r3, r3, #7
 802d98a:	62bb      	str	r3, [r7, #40]	; 0x28
 802d98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d98e:	2b7f      	cmp	r3, #127	; 0x7f
 802d990:	d8f0      	bhi.n	802d974 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 802d992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d994:	1c5a      	adds	r2, r3, #1
 802d996:	62fa      	str	r2, [r7, #44]	; 0x2c
 802d998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d99a:	b2d2      	uxtb	r2, r2
 802d99c:	701a      	strb	r2, [r3, #0]
 802d99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d9a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 802d9a2:	697b      	ldr	r3, [r7, #20]
 802d9a4:	627b      	str	r3, [r7, #36]	; 0x24
 802d9a6:	687b      	ldr	r3, [r7, #4]
 802d9a8:	623b      	str	r3, [r7, #32]
 802d9aa:	e00b      	b.n	802d9c4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 802d9ac:	6a3b      	ldr	r3, [r7, #32]
 802d9ae:	b2da      	uxtb	r2, r3
 802d9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d9b2:	1c59      	adds	r1, r3, #1
 802d9b4:	6279      	str	r1, [r7, #36]	; 0x24
 802d9b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d9ba:	b2d2      	uxtb	r2, r2
 802d9bc:	701a      	strb	r2, [r3, #0]
 802d9be:	6a3b      	ldr	r3, [r7, #32]
 802d9c0:	09db      	lsrs	r3, r3, #7
 802d9c2:	623b      	str	r3, [r7, #32]
 802d9c4:	6a3b      	ldr	r3, [r7, #32]
 802d9c6:	2b7f      	cmp	r3, #127	; 0x7f
 802d9c8:	d8f0      	bhi.n	802d9ac <SEGGER_SYSVIEW_RecordU32x2+0x68>
 802d9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d9cc:	1c5a      	adds	r2, r3, #1
 802d9ce:	627a      	str	r2, [r7, #36]	; 0x24
 802d9d0:	6a3a      	ldr	r2, [r7, #32]
 802d9d2:	b2d2      	uxtb	r2, r2
 802d9d4:	701a      	strb	r2, [r3, #0]
 802d9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d9d8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802d9da:	68fa      	ldr	r2, [r7, #12]
 802d9dc:	6979      	ldr	r1, [r7, #20]
 802d9de:	69b8      	ldr	r0, [r7, #24]
 802d9e0:	f7ff fd5c 	bl	802d49c <_SendPacket>
  RECORD_END();
 802d9e4:	69fb      	ldr	r3, [r7, #28]
 802d9e6:	f383 8811 	msr	BASEPRI, r3
}
 802d9ea:	bf00      	nop
 802d9ec:	3730      	adds	r7, #48	; 0x30
 802d9ee:	46bd      	mov	sp, r7
 802d9f0:	bd80      	pop	{r7, pc}
 802d9f2:	bf00      	nop
 802d9f4:	2001b718 	.word	0x2001b718

0802d9f8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 802d9f8:	b580      	push	{r7, lr}
 802d9fa:	b08e      	sub	sp, #56	; 0x38
 802d9fc:	af00      	add	r7, sp, #0
 802d9fe:	60f8      	str	r0, [r7, #12]
 802da00:	60b9      	str	r1, [r7, #8]
 802da02:	607a      	str	r2, [r7, #4]
 802da04:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 802da06:	f3ef 8311 	mrs	r3, BASEPRI
 802da0a:	f04f 0120 	mov.w	r1, #32
 802da0e:	f381 8811 	msr	BASEPRI, r1
 802da12:	61fb      	str	r3, [r7, #28]
 802da14:	4832      	ldr	r0, [pc, #200]	; (802dae0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 802da16:	f7ff fc51 	bl	802d2bc <_PreparePacket>
 802da1a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 802da1c:	69bb      	ldr	r3, [r7, #24]
 802da1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 802da20:	697b      	ldr	r3, [r7, #20]
 802da22:	637b      	str	r3, [r7, #52]	; 0x34
 802da24:	68bb      	ldr	r3, [r7, #8]
 802da26:	633b      	str	r3, [r7, #48]	; 0x30
 802da28:	e00b      	b.n	802da42 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 802da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802da2c:	b2da      	uxtb	r2, r3
 802da2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802da30:	1c59      	adds	r1, r3, #1
 802da32:	6379      	str	r1, [r7, #52]	; 0x34
 802da34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802da38:	b2d2      	uxtb	r2, r2
 802da3a:	701a      	strb	r2, [r3, #0]
 802da3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802da3e:	09db      	lsrs	r3, r3, #7
 802da40:	633b      	str	r3, [r7, #48]	; 0x30
 802da42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802da44:	2b7f      	cmp	r3, #127	; 0x7f
 802da46:	d8f0      	bhi.n	802da2a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 802da48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802da4a:	1c5a      	adds	r2, r3, #1
 802da4c:	637a      	str	r2, [r7, #52]	; 0x34
 802da4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802da50:	b2d2      	uxtb	r2, r2
 802da52:	701a      	strb	r2, [r3, #0]
 802da54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802da56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 802da58:	697b      	ldr	r3, [r7, #20]
 802da5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802da5c:	687b      	ldr	r3, [r7, #4]
 802da5e:	62bb      	str	r3, [r7, #40]	; 0x28
 802da60:	e00b      	b.n	802da7a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 802da62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802da64:	b2da      	uxtb	r2, r3
 802da66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802da68:	1c59      	adds	r1, r3, #1
 802da6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 802da6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802da70:	b2d2      	uxtb	r2, r2
 802da72:	701a      	strb	r2, [r3, #0]
 802da74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802da76:	09db      	lsrs	r3, r3, #7
 802da78:	62bb      	str	r3, [r7, #40]	; 0x28
 802da7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802da7c:	2b7f      	cmp	r3, #127	; 0x7f
 802da7e:	d8f0      	bhi.n	802da62 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 802da80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802da82:	1c5a      	adds	r2, r3, #1
 802da84:	62fa      	str	r2, [r7, #44]	; 0x2c
 802da86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802da88:	b2d2      	uxtb	r2, r2
 802da8a:	701a      	strb	r2, [r3, #0]
 802da8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802da8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 802da90:	697b      	ldr	r3, [r7, #20]
 802da92:	627b      	str	r3, [r7, #36]	; 0x24
 802da94:	683b      	ldr	r3, [r7, #0]
 802da96:	623b      	str	r3, [r7, #32]
 802da98:	e00b      	b.n	802dab2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 802da9a:	6a3b      	ldr	r3, [r7, #32]
 802da9c:	b2da      	uxtb	r2, r3
 802da9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802daa0:	1c59      	adds	r1, r3, #1
 802daa2:	6279      	str	r1, [r7, #36]	; 0x24
 802daa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802daa8:	b2d2      	uxtb	r2, r2
 802daaa:	701a      	strb	r2, [r3, #0]
 802daac:	6a3b      	ldr	r3, [r7, #32]
 802daae:	09db      	lsrs	r3, r3, #7
 802dab0:	623b      	str	r3, [r7, #32]
 802dab2:	6a3b      	ldr	r3, [r7, #32]
 802dab4:	2b7f      	cmp	r3, #127	; 0x7f
 802dab6:	d8f0      	bhi.n	802da9a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 802dab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802daba:	1c5a      	adds	r2, r3, #1
 802dabc:	627a      	str	r2, [r7, #36]	; 0x24
 802dabe:	6a3a      	ldr	r2, [r7, #32]
 802dac0:	b2d2      	uxtb	r2, r2
 802dac2:	701a      	strb	r2, [r3, #0]
 802dac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dac6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802dac8:	68fa      	ldr	r2, [r7, #12]
 802daca:	6979      	ldr	r1, [r7, #20]
 802dacc:	69b8      	ldr	r0, [r7, #24]
 802dace:	f7ff fce5 	bl	802d49c <_SendPacket>
  RECORD_END();
 802dad2:	69fb      	ldr	r3, [r7, #28]
 802dad4:	f383 8811 	msr	BASEPRI, r3
}
 802dad8:	bf00      	nop
 802dada:	3738      	adds	r7, #56	; 0x38
 802dadc:	46bd      	mov	sp, r7
 802dade:	bd80      	pop	{r7, pc}
 802dae0:	2001b718 	.word	0x2001b718

0802dae4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 802dae4:	b580      	push	{r7, lr}
 802dae6:	b090      	sub	sp, #64	; 0x40
 802dae8:	af00      	add	r7, sp, #0
 802daea:	60f8      	str	r0, [r7, #12]
 802daec:	60b9      	str	r1, [r7, #8]
 802daee:	607a      	str	r2, [r7, #4]
 802daf0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 802daf2:	f3ef 8311 	mrs	r3, BASEPRI
 802daf6:	f04f 0120 	mov.w	r1, #32
 802dafa:	f381 8811 	msr	BASEPRI, r1
 802dafe:	61fb      	str	r3, [r7, #28]
 802db00:	4840      	ldr	r0, [pc, #256]	; (802dc04 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 802db02:	f7ff fbdb 	bl	802d2bc <_PreparePacket>
 802db06:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 802db08:	69bb      	ldr	r3, [r7, #24]
 802db0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 802db0c:	697b      	ldr	r3, [r7, #20]
 802db0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 802db10:	68bb      	ldr	r3, [r7, #8]
 802db12:	63bb      	str	r3, [r7, #56]	; 0x38
 802db14:	e00b      	b.n	802db2e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 802db16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802db18:	b2da      	uxtb	r2, r3
 802db1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802db1c:	1c59      	adds	r1, r3, #1
 802db1e:	63f9      	str	r1, [r7, #60]	; 0x3c
 802db20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802db24:	b2d2      	uxtb	r2, r2
 802db26:	701a      	strb	r2, [r3, #0]
 802db28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802db2a:	09db      	lsrs	r3, r3, #7
 802db2c:	63bb      	str	r3, [r7, #56]	; 0x38
 802db2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802db30:	2b7f      	cmp	r3, #127	; 0x7f
 802db32:	d8f0      	bhi.n	802db16 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 802db34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802db36:	1c5a      	adds	r2, r3, #1
 802db38:	63fa      	str	r2, [r7, #60]	; 0x3c
 802db3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802db3c:	b2d2      	uxtb	r2, r2
 802db3e:	701a      	strb	r2, [r3, #0]
 802db40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802db42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 802db44:	697b      	ldr	r3, [r7, #20]
 802db46:	637b      	str	r3, [r7, #52]	; 0x34
 802db48:	687b      	ldr	r3, [r7, #4]
 802db4a:	633b      	str	r3, [r7, #48]	; 0x30
 802db4c:	e00b      	b.n	802db66 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 802db4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802db50:	b2da      	uxtb	r2, r3
 802db52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802db54:	1c59      	adds	r1, r3, #1
 802db56:	6379      	str	r1, [r7, #52]	; 0x34
 802db58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802db5c:	b2d2      	uxtb	r2, r2
 802db5e:	701a      	strb	r2, [r3, #0]
 802db60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802db62:	09db      	lsrs	r3, r3, #7
 802db64:	633b      	str	r3, [r7, #48]	; 0x30
 802db66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802db68:	2b7f      	cmp	r3, #127	; 0x7f
 802db6a:	d8f0      	bhi.n	802db4e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 802db6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802db6e:	1c5a      	adds	r2, r3, #1
 802db70:	637a      	str	r2, [r7, #52]	; 0x34
 802db72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802db74:	b2d2      	uxtb	r2, r2
 802db76:	701a      	strb	r2, [r3, #0]
 802db78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802db7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 802db7c:	697b      	ldr	r3, [r7, #20]
 802db7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 802db80:	683b      	ldr	r3, [r7, #0]
 802db82:	62bb      	str	r3, [r7, #40]	; 0x28
 802db84:	e00b      	b.n	802db9e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 802db86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802db88:	b2da      	uxtb	r2, r3
 802db8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802db8c:	1c59      	adds	r1, r3, #1
 802db8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 802db90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802db94:	b2d2      	uxtb	r2, r2
 802db96:	701a      	strb	r2, [r3, #0]
 802db98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802db9a:	09db      	lsrs	r3, r3, #7
 802db9c:	62bb      	str	r3, [r7, #40]	; 0x28
 802db9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dba0:	2b7f      	cmp	r3, #127	; 0x7f
 802dba2:	d8f0      	bhi.n	802db86 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 802dba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dba6:	1c5a      	adds	r2, r3, #1
 802dba8:	62fa      	str	r2, [r7, #44]	; 0x2c
 802dbaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802dbac:	b2d2      	uxtb	r2, r2
 802dbae:	701a      	strb	r2, [r3, #0]
 802dbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dbb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 802dbb4:	697b      	ldr	r3, [r7, #20]
 802dbb6:	627b      	str	r3, [r7, #36]	; 0x24
 802dbb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802dbba:	623b      	str	r3, [r7, #32]
 802dbbc:	e00b      	b.n	802dbd6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 802dbbe:	6a3b      	ldr	r3, [r7, #32]
 802dbc0:	b2da      	uxtb	r2, r3
 802dbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dbc4:	1c59      	adds	r1, r3, #1
 802dbc6:	6279      	str	r1, [r7, #36]	; 0x24
 802dbc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dbcc:	b2d2      	uxtb	r2, r2
 802dbce:	701a      	strb	r2, [r3, #0]
 802dbd0:	6a3b      	ldr	r3, [r7, #32]
 802dbd2:	09db      	lsrs	r3, r3, #7
 802dbd4:	623b      	str	r3, [r7, #32]
 802dbd6:	6a3b      	ldr	r3, [r7, #32]
 802dbd8:	2b7f      	cmp	r3, #127	; 0x7f
 802dbda:	d8f0      	bhi.n	802dbbe <SEGGER_SYSVIEW_RecordU32x4+0xda>
 802dbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dbde:	1c5a      	adds	r2, r3, #1
 802dbe0:	627a      	str	r2, [r7, #36]	; 0x24
 802dbe2:	6a3a      	ldr	r2, [r7, #32]
 802dbe4:	b2d2      	uxtb	r2, r2
 802dbe6:	701a      	strb	r2, [r3, #0]
 802dbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dbea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802dbec:	68fa      	ldr	r2, [r7, #12]
 802dbee:	6979      	ldr	r1, [r7, #20]
 802dbf0:	69b8      	ldr	r0, [r7, #24]
 802dbf2:	f7ff fc53 	bl	802d49c <_SendPacket>
  RECORD_END();
 802dbf6:	69fb      	ldr	r3, [r7, #28]
 802dbf8:	f383 8811 	msr	BASEPRI, r3
}
 802dbfc:	bf00      	nop
 802dbfe:	3740      	adds	r7, #64	; 0x40
 802dc00:	46bd      	mov	sp, r7
 802dc02:	bd80      	pop	{r7, pc}
 802dc04:	2001b718 	.word	0x2001b718

0802dc08 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 802dc08:	b580      	push	{r7, lr}
 802dc0a:	b08c      	sub	sp, #48	; 0x30
 802dc0c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 802dc0e:	4b58      	ldr	r3, [pc, #352]	; (802dd70 <SEGGER_SYSVIEW_Start+0x168>)
 802dc10:	2201      	movs	r2, #1
 802dc12:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 802dc14:	f3ef 8311 	mrs	r3, BASEPRI
 802dc18:	f04f 0120 	mov.w	r1, #32
 802dc1c:	f381 8811 	msr	BASEPRI, r1
 802dc20:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 802dc22:	4b53      	ldr	r3, [pc, #332]	; (802dd70 <SEGGER_SYSVIEW_Start+0x168>)
 802dc24:	785b      	ldrb	r3, [r3, #1]
 802dc26:	220a      	movs	r2, #10
 802dc28:	4952      	ldr	r1, [pc, #328]	; (802dd74 <SEGGER_SYSVIEW_Start+0x16c>)
 802dc2a:	4618      	mov	r0, r3
 802dc2c:	f7d2 fad0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 802dc30:	68fb      	ldr	r3, [r7, #12]
 802dc32:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 802dc36:	200a      	movs	r0, #10
 802dc38:	f7ff fe2a 	bl	802d890 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 802dc3c:	f3ef 8311 	mrs	r3, BASEPRI
 802dc40:	f04f 0120 	mov.w	r1, #32
 802dc44:	f381 8811 	msr	BASEPRI, r1
 802dc48:	60bb      	str	r3, [r7, #8]
 802dc4a:	484b      	ldr	r0, [pc, #300]	; (802dd78 <SEGGER_SYSVIEW_Start+0x170>)
 802dc4c:	f7ff fb36 	bl	802d2bc <_PreparePacket>
 802dc50:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 802dc52:	687b      	ldr	r3, [r7, #4]
 802dc54:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 802dc56:	683b      	ldr	r3, [r7, #0]
 802dc58:	62fb      	str	r3, [r7, #44]	; 0x2c
 802dc5a:	4b45      	ldr	r3, [pc, #276]	; (802dd70 <SEGGER_SYSVIEW_Start+0x168>)
 802dc5c:	685b      	ldr	r3, [r3, #4]
 802dc5e:	62bb      	str	r3, [r7, #40]	; 0x28
 802dc60:	e00b      	b.n	802dc7a <SEGGER_SYSVIEW_Start+0x72>
 802dc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dc64:	b2da      	uxtb	r2, r3
 802dc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dc68:	1c59      	adds	r1, r3, #1
 802dc6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 802dc6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dc70:	b2d2      	uxtb	r2, r2
 802dc72:	701a      	strb	r2, [r3, #0]
 802dc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dc76:	09db      	lsrs	r3, r3, #7
 802dc78:	62bb      	str	r3, [r7, #40]	; 0x28
 802dc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dc7c:	2b7f      	cmp	r3, #127	; 0x7f
 802dc7e:	d8f0      	bhi.n	802dc62 <SEGGER_SYSVIEW_Start+0x5a>
 802dc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dc82:	1c5a      	adds	r2, r3, #1
 802dc84:	62fa      	str	r2, [r7, #44]	; 0x2c
 802dc86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802dc88:	b2d2      	uxtb	r2, r2
 802dc8a:	701a      	strb	r2, [r3, #0]
 802dc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dc8e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 802dc90:	683b      	ldr	r3, [r7, #0]
 802dc92:	627b      	str	r3, [r7, #36]	; 0x24
 802dc94:	4b36      	ldr	r3, [pc, #216]	; (802dd70 <SEGGER_SYSVIEW_Start+0x168>)
 802dc96:	689b      	ldr	r3, [r3, #8]
 802dc98:	623b      	str	r3, [r7, #32]
 802dc9a:	e00b      	b.n	802dcb4 <SEGGER_SYSVIEW_Start+0xac>
 802dc9c:	6a3b      	ldr	r3, [r7, #32]
 802dc9e:	b2da      	uxtb	r2, r3
 802dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dca2:	1c59      	adds	r1, r3, #1
 802dca4:	6279      	str	r1, [r7, #36]	; 0x24
 802dca6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dcaa:	b2d2      	uxtb	r2, r2
 802dcac:	701a      	strb	r2, [r3, #0]
 802dcae:	6a3b      	ldr	r3, [r7, #32]
 802dcb0:	09db      	lsrs	r3, r3, #7
 802dcb2:	623b      	str	r3, [r7, #32]
 802dcb4:	6a3b      	ldr	r3, [r7, #32]
 802dcb6:	2b7f      	cmp	r3, #127	; 0x7f
 802dcb8:	d8f0      	bhi.n	802dc9c <SEGGER_SYSVIEW_Start+0x94>
 802dcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dcbc:	1c5a      	adds	r2, r3, #1
 802dcbe:	627a      	str	r2, [r7, #36]	; 0x24
 802dcc0:	6a3a      	ldr	r2, [r7, #32]
 802dcc2:	b2d2      	uxtb	r2, r2
 802dcc4:	701a      	strb	r2, [r3, #0]
 802dcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dcc8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 802dcca:	683b      	ldr	r3, [r7, #0]
 802dccc:	61fb      	str	r3, [r7, #28]
 802dcce:	4b28      	ldr	r3, [pc, #160]	; (802dd70 <SEGGER_SYSVIEW_Start+0x168>)
 802dcd0:	691b      	ldr	r3, [r3, #16]
 802dcd2:	61bb      	str	r3, [r7, #24]
 802dcd4:	e00b      	b.n	802dcee <SEGGER_SYSVIEW_Start+0xe6>
 802dcd6:	69bb      	ldr	r3, [r7, #24]
 802dcd8:	b2da      	uxtb	r2, r3
 802dcda:	69fb      	ldr	r3, [r7, #28]
 802dcdc:	1c59      	adds	r1, r3, #1
 802dcde:	61f9      	str	r1, [r7, #28]
 802dce0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dce4:	b2d2      	uxtb	r2, r2
 802dce6:	701a      	strb	r2, [r3, #0]
 802dce8:	69bb      	ldr	r3, [r7, #24]
 802dcea:	09db      	lsrs	r3, r3, #7
 802dcec:	61bb      	str	r3, [r7, #24]
 802dcee:	69bb      	ldr	r3, [r7, #24]
 802dcf0:	2b7f      	cmp	r3, #127	; 0x7f
 802dcf2:	d8f0      	bhi.n	802dcd6 <SEGGER_SYSVIEW_Start+0xce>
 802dcf4:	69fb      	ldr	r3, [r7, #28]
 802dcf6:	1c5a      	adds	r2, r3, #1
 802dcf8:	61fa      	str	r2, [r7, #28]
 802dcfa:	69ba      	ldr	r2, [r7, #24]
 802dcfc:	b2d2      	uxtb	r2, r2
 802dcfe:	701a      	strb	r2, [r3, #0]
 802dd00:	69fb      	ldr	r3, [r7, #28]
 802dd02:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 802dd04:	683b      	ldr	r3, [r7, #0]
 802dd06:	617b      	str	r3, [r7, #20]
 802dd08:	2300      	movs	r3, #0
 802dd0a:	613b      	str	r3, [r7, #16]
 802dd0c:	e00b      	b.n	802dd26 <SEGGER_SYSVIEW_Start+0x11e>
 802dd0e:	693b      	ldr	r3, [r7, #16]
 802dd10:	b2da      	uxtb	r2, r3
 802dd12:	697b      	ldr	r3, [r7, #20]
 802dd14:	1c59      	adds	r1, r3, #1
 802dd16:	6179      	str	r1, [r7, #20]
 802dd18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dd1c:	b2d2      	uxtb	r2, r2
 802dd1e:	701a      	strb	r2, [r3, #0]
 802dd20:	693b      	ldr	r3, [r7, #16]
 802dd22:	09db      	lsrs	r3, r3, #7
 802dd24:	613b      	str	r3, [r7, #16]
 802dd26:	693b      	ldr	r3, [r7, #16]
 802dd28:	2b7f      	cmp	r3, #127	; 0x7f
 802dd2a:	d8f0      	bhi.n	802dd0e <SEGGER_SYSVIEW_Start+0x106>
 802dd2c:	697b      	ldr	r3, [r7, #20]
 802dd2e:	1c5a      	adds	r2, r3, #1
 802dd30:	617a      	str	r2, [r7, #20]
 802dd32:	693a      	ldr	r2, [r7, #16]
 802dd34:	b2d2      	uxtb	r2, r2
 802dd36:	701a      	strb	r2, [r3, #0]
 802dd38:	697b      	ldr	r3, [r7, #20]
 802dd3a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 802dd3c:	2218      	movs	r2, #24
 802dd3e:	6839      	ldr	r1, [r7, #0]
 802dd40:	6878      	ldr	r0, [r7, #4]
 802dd42:	f7ff fbab 	bl	802d49c <_SendPacket>
      RECORD_END();
 802dd46:	68bb      	ldr	r3, [r7, #8]
 802dd48:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 802dd4c:	4b08      	ldr	r3, [pc, #32]	; (802dd70 <SEGGER_SYSVIEW_Start+0x168>)
 802dd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802dd50:	2b00      	cmp	r3, #0
 802dd52:	d002      	beq.n	802dd5a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 802dd54:	4b06      	ldr	r3, [pc, #24]	; (802dd70 <SEGGER_SYSVIEW_Start+0x168>)
 802dd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802dd58:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 802dd5a:	f000 f9eb 	bl	802e134 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 802dd5e:	f000 f9b1 	bl	802e0c4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 802dd62:	f000 fba9 	bl	802e4b8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 802dd66:	bf00      	nop
 802dd68:	3730      	adds	r7, #48	; 0x30
 802dd6a:	46bd      	mov	sp, r7
 802dd6c:	bd80      	pop	{r7, pc}
 802dd6e:	bf00      	nop
 802dd70:	2001b6e8 	.word	0x2001b6e8
 802dd74:	08030a78 	.word	0x08030a78
 802dd78:	2001b718 	.word	0x2001b718

0802dd7c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 802dd7c:	b580      	push	{r7, lr}
 802dd7e:	b082      	sub	sp, #8
 802dd80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 802dd82:	f3ef 8311 	mrs	r3, BASEPRI
 802dd86:	f04f 0120 	mov.w	r1, #32
 802dd8a:	f381 8811 	msr	BASEPRI, r1
 802dd8e:	607b      	str	r3, [r7, #4]
 802dd90:	480b      	ldr	r0, [pc, #44]	; (802ddc0 <SEGGER_SYSVIEW_Stop+0x44>)
 802dd92:	f7ff fa93 	bl	802d2bc <_PreparePacket>
 802dd96:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 802dd98:	4b0a      	ldr	r3, [pc, #40]	; (802ddc4 <SEGGER_SYSVIEW_Stop+0x48>)
 802dd9a:	781b      	ldrb	r3, [r3, #0]
 802dd9c:	2b00      	cmp	r3, #0
 802dd9e:	d007      	beq.n	802ddb0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 802dda0:	220b      	movs	r2, #11
 802dda2:	6839      	ldr	r1, [r7, #0]
 802dda4:	6838      	ldr	r0, [r7, #0]
 802dda6:	f7ff fb79 	bl	802d49c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 802ddaa:	4b06      	ldr	r3, [pc, #24]	; (802ddc4 <SEGGER_SYSVIEW_Stop+0x48>)
 802ddac:	2200      	movs	r2, #0
 802ddae:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 802ddb0:	687b      	ldr	r3, [r7, #4]
 802ddb2:	f383 8811 	msr	BASEPRI, r3
}
 802ddb6:	bf00      	nop
 802ddb8:	3708      	adds	r7, #8
 802ddba:	46bd      	mov	sp, r7
 802ddbc:	bd80      	pop	{r7, pc}
 802ddbe:	bf00      	nop
 802ddc0:	2001b718 	.word	0x2001b718
 802ddc4:	2001b6e8 	.word	0x2001b6e8

0802ddc8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 802ddc8:	b580      	push	{r7, lr}
 802ddca:	b08c      	sub	sp, #48	; 0x30
 802ddcc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 802ddce:	f3ef 8311 	mrs	r3, BASEPRI
 802ddd2:	f04f 0120 	mov.w	r1, #32
 802ddd6:	f381 8811 	msr	BASEPRI, r1
 802ddda:	60fb      	str	r3, [r7, #12]
 802dddc:	4845      	ldr	r0, [pc, #276]	; (802def4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 802ddde:	f7ff fa6d 	bl	802d2bc <_PreparePacket>
 802dde2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 802dde4:	68bb      	ldr	r3, [r7, #8]
 802dde6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 802dde8:	687b      	ldr	r3, [r7, #4]
 802ddea:	62fb      	str	r3, [r7, #44]	; 0x2c
 802ddec:	4b42      	ldr	r3, [pc, #264]	; (802def8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802ddee:	685b      	ldr	r3, [r3, #4]
 802ddf0:	62bb      	str	r3, [r7, #40]	; 0x28
 802ddf2:	e00b      	b.n	802de0c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 802ddf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ddf6:	b2da      	uxtb	r2, r3
 802ddf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ddfa:	1c59      	adds	r1, r3, #1
 802ddfc:	62f9      	str	r1, [r7, #44]	; 0x2c
 802ddfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802de02:	b2d2      	uxtb	r2, r2
 802de04:	701a      	strb	r2, [r3, #0]
 802de06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802de08:	09db      	lsrs	r3, r3, #7
 802de0a:	62bb      	str	r3, [r7, #40]	; 0x28
 802de0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802de0e:	2b7f      	cmp	r3, #127	; 0x7f
 802de10:	d8f0      	bhi.n	802ddf4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 802de12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802de14:	1c5a      	adds	r2, r3, #1
 802de16:	62fa      	str	r2, [r7, #44]	; 0x2c
 802de18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802de1a:	b2d2      	uxtb	r2, r2
 802de1c:	701a      	strb	r2, [r3, #0]
 802de1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802de20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 802de22:	687b      	ldr	r3, [r7, #4]
 802de24:	627b      	str	r3, [r7, #36]	; 0x24
 802de26:	4b34      	ldr	r3, [pc, #208]	; (802def8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802de28:	689b      	ldr	r3, [r3, #8]
 802de2a:	623b      	str	r3, [r7, #32]
 802de2c:	e00b      	b.n	802de46 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 802de2e:	6a3b      	ldr	r3, [r7, #32]
 802de30:	b2da      	uxtb	r2, r3
 802de32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802de34:	1c59      	adds	r1, r3, #1
 802de36:	6279      	str	r1, [r7, #36]	; 0x24
 802de38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802de3c:	b2d2      	uxtb	r2, r2
 802de3e:	701a      	strb	r2, [r3, #0]
 802de40:	6a3b      	ldr	r3, [r7, #32]
 802de42:	09db      	lsrs	r3, r3, #7
 802de44:	623b      	str	r3, [r7, #32]
 802de46:	6a3b      	ldr	r3, [r7, #32]
 802de48:	2b7f      	cmp	r3, #127	; 0x7f
 802de4a:	d8f0      	bhi.n	802de2e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 802de4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802de4e:	1c5a      	adds	r2, r3, #1
 802de50:	627a      	str	r2, [r7, #36]	; 0x24
 802de52:	6a3a      	ldr	r2, [r7, #32]
 802de54:	b2d2      	uxtb	r2, r2
 802de56:	701a      	strb	r2, [r3, #0]
 802de58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802de5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 802de5c:	687b      	ldr	r3, [r7, #4]
 802de5e:	61fb      	str	r3, [r7, #28]
 802de60:	4b25      	ldr	r3, [pc, #148]	; (802def8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802de62:	691b      	ldr	r3, [r3, #16]
 802de64:	61bb      	str	r3, [r7, #24]
 802de66:	e00b      	b.n	802de80 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 802de68:	69bb      	ldr	r3, [r7, #24]
 802de6a:	b2da      	uxtb	r2, r3
 802de6c:	69fb      	ldr	r3, [r7, #28]
 802de6e:	1c59      	adds	r1, r3, #1
 802de70:	61f9      	str	r1, [r7, #28]
 802de72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802de76:	b2d2      	uxtb	r2, r2
 802de78:	701a      	strb	r2, [r3, #0]
 802de7a:	69bb      	ldr	r3, [r7, #24]
 802de7c:	09db      	lsrs	r3, r3, #7
 802de7e:	61bb      	str	r3, [r7, #24]
 802de80:	69bb      	ldr	r3, [r7, #24]
 802de82:	2b7f      	cmp	r3, #127	; 0x7f
 802de84:	d8f0      	bhi.n	802de68 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 802de86:	69fb      	ldr	r3, [r7, #28]
 802de88:	1c5a      	adds	r2, r3, #1
 802de8a:	61fa      	str	r2, [r7, #28]
 802de8c:	69ba      	ldr	r2, [r7, #24]
 802de8e:	b2d2      	uxtb	r2, r2
 802de90:	701a      	strb	r2, [r3, #0]
 802de92:	69fb      	ldr	r3, [r7, #28]
 802de94:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 802de96:	687b      	ldr	r3, [r7, #4]
 802de98:	617b      	str	r3, [r7, #20]
 802de9a:	2300      	movs	r3, #0
 802de9c:	613b      	str	r3, [r7, #16]
 802de9e:	e00b      	b.n	802deb8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 802dea0:	693b      	ldr	r3, [r7, #16]
 802dea2:	b2da      	uxtb	r2, r3
 802dea4:	697b      	ldr	r3, [r7, #20]
 802dea6:	1c59      	adds	r1, r3, #1
 802dea8:	6179      	str	r1, [r7, #20]
 802deaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802deae:	b2d2      	uxtb	r2, r2
 802deb0:	701a      	strb	r2, [r3, #0]
 802deb2:	693b      	ldr	r3, [r7, #16]
 802deb4:	09db      	lsrs	r3, r3, #7
 802deb6:	613b      	str	r3, [r7, #16]
 802deb8:	693b      	ldr	r3, [r7, #16]
 802deba:	2b7f      	cmp	r3, #127	; 0x7f
 802debc:	d8f0      	bhi.n	802dea0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 802debe:	697b      	ldr	r3, [r7, #20]
 802dec0:	1c5a      	adds	r2, r3, #1
 802dec2:	617a      	str	r2, [r7, #20]
 802dec4:	693a      	ldr	r2, [r7, #16]
 802dec6:	b2d2      	uxtb	r2, r2
 802dec8:	701a      	strb	r2, [r3, #0]
 802deca:	697b      	ldr	r3, [r7, #20]
 802decc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 802dece:	2218      	movs	r2, #24
 802ded0:	6879      	ldr	r1, [r7, #4]
 802ded2:	68b8      	ldr	r0, [r7, #8]
 802ded4:	f7ff fae2 	bl	802d49c <_SendPacket>
  RECORD_END();
 802ded8:	68fb      	ldr	r3, [r7, #12]
 802deda:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 802dede:	4b06      	ldr	r3, [pc, #24]	; (802def8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802dee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802dee2:	2b00      	cmp	r3, #0
 802dee4:	d002      	beq.n	802deec <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 802dee6:	4b04      	ldr	r3, [pc, #16]	; (802def8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802dee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802deea:	4798      	blx	r3
  }
}
 802deec:	bf00      	nop
 802deee:	3730      	adds	r7, #48	; 0x30
 802def0:	46bd      	mov	sp, r7
 802def2:	bd80      	pop	{r7, pc}
 802def4:	2001b718 	.word	0x2001b718
 802def8:	2001b6e8 	.word	0x2001b6e8

0802defc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 802defc:	b580      	push	{r7, lr}
 802defe:	b092      	sub	sp, #72	; 0x48
 802df00:	af00      	add	r7, sp, #0
 802df02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 802df04:	f3ef 8311 	mrs	r3, BASEPRI
 802df08:	f04f 0120 	mov.w	r1, #32
 802df0c:	f381 8811 	msr	BASEPRI, r1
 802df10:	617b      	str	r3, [r7, #20]
 802df12:	486a      	ldr	r0, [pc, #424]	; (802e0bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 802df14:	f7ff f9d2 	bl	802d2bc <_PreparePacket>
 802df18:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802df1a:	693b      	ldr	r3, [r7, #16]
 802df1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 802df1e:	68fb      	ldr	r3, [r7, #12]
 802df20:	647b      	str	r3, [r7, #68]	; 0x44
 802df22:	687b      	ldr	r3, [r7, #4]
 802df24:	681a      	ldr	r2, [r3, #0]
 802df26:	4b66      	ldr	r3, [pc, #408]	; (802e0c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 802df28:	691b      	ldr	r3, [r3, #16]
 802df2a:	1ad3      	subs	r3, r2, r3
 802df2c:	643b      	str	r3, [r7, #64]	; 0x40
 802df2e:	e00b      	b.n	802df48 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 802df30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802df32:	b2da      	uxtb	r2, r3
 802df34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802df36:	1c59      	adds	r1, r3, #1
 802df38:	6479      	str	r1, [r7, #68]	; 0x44
 802df3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802df3e:	b2d2      	uxtb	r2, r2
 802df40:	701a      	strb	r2, [r3, #0]
 802df42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802df44:	09db      	lsrs	r3, r3, #7
 802df46:	643b      	str	r3, [r7, #64]	; 0x40
 802df48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802df4a:	2b7f      	cmp	r3, #127	; 0x7f
 802df4c:	d8f0      	bhi.n	802df30 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 802df4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802df50:	1c5a      	adds	r2, r3, #1
 802df52:	647a      	str	r2, [r7, #68]	; 0x44
 802df54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802df56:	b2d2      	uxtb	r2, r2
 802df58:	701a      	strb	r2, [r3, #0]
 802df5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802df5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 802df5e:	68fb      	ldr	r3, [r7, #12]
 802df60:	63fb      	str	r3, [r7, #60]	; 0x3c
 802df62:	687b      	ldr	r3, [r7, #4]
 802df64:	689b      	ldr	r3, [r3, #8]
 802df66:	63bb      	str	r3, [r7, #56]	; 0x38
 802df68:	e00b      	b.n	802df82 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 802df6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802df6c:	b2da      	uxtb	r2, r3
 802df6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802df70:	1c59      	adds	r1, r3, #1
 802df72:	63f9      	str	r1, [r7, #60]	; 0x3c
 802df74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802df78:	b2d2      	uxtb	r2, r2
 802df7a:	701a      	strb	r2, [r3, #0]
 802df7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802df7e:	09db      	lsrs	r3, r3, #7
 802df80:	63bb      	str	r3, [r7, #56]	; 0x38
 802df82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802df84:	2b7f      	cmp	r3, #127	; 0x7f
 802df86:	d8f0      	bhi.n	802df6a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 802df88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802df8a:	1c5a      	adds	r2, r3, #1
 802df8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 802df8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802df90:	b2d2      	uxtb	r2, r2
 802df92:	701a      	strb	r2, [r3, #0]
 802df94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802df96:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 802df98:	687b      	ldr	r3, [r7, #4]
 802df9a:	685b      	ldr	r3, [r3, #4]
 802df9c:	2220      	movs	r2, #32
 802df9e:	4619      	mov	r1, r3
 802dfa0:	68f8      	ldr	r0, [r7, #12]
 802dfa2:	f7ff f93b 	bl	802d21c <_EncodeStr>
 802dfa6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 802dfa8:	2209      	movs	r2, #9
 802dfaa:	68f9      	ldr	r1, [r7, #12]
 802dfac:	6938      	ldr	r0, [r7, #16]
 802dfae:	f7ff fa75 	bl	802d49c <_SendPacket>
  //
  pPayload = pPayloadStart;
 802dfb2:	693b      	ldr	r3, [r7, #16]
 802dfb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 802dfb6:	68fb      	ldr	r3, [r7, #12]
 802dfb8:	637b      	str	r3, [r7, #52]	; 0x34
 802dfba:	687b      	ldr	r3, [r7, #4]
 802dfbc:	681a      	ldr	r2, [r3, #0]
 802dfbe:	4b40      	ldr	r3, [pc, #256]	; (802e0c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 802dfc0:	691b      	ldr	r3, [r3, #16]
 802dfc2:	1ad3      	subs	r3, r2, r3
 802dfc4:	633b      	str	r3, [r7, #48]	; 0x30
 802dfc6:	e00b      	b.n	802dfe0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 802dfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802dfca:	b2da      	uxtb	r2, r3
 802dfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802dfce:	1c59      	adds	r1, r3, #1
 802dfd0:	6379      	str	r1, [r7, #52]	; 0x34
 802dfd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dfd6:	b2d2      	uxtb	r2, r2
 802dfd8:	701a      	strb	r2, [r3, #0]
 802dfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802dfdc:	09db      	lsrs	r3, r3, #7
 802dfde:	633b      	str	r3, [r7, #48]	; 0x30
 802dfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802dfe2:	2b7f      	cmp	r3, #127	; 0x7f
 802dfe4:	d8f0      	bhi.n	802dfc8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 802dfe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802dfe8:	1c5a      	adds	r2, r3, #1
 802dfea:	637a      	str	r2, [r7, #52]	; 0x34
 802dfec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802dfee:	b2d2      	uxtb	r2, r2
 802dff0:	701a      	strb	r2, [r3, #0]
 802dff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802dff4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 802dff6:	68fb      	ldr	r3, [r7, #12]
 802dff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 802dffa:	687b      	ldr	r3, [r7, #4]
 802dffc:	68db      	ldr	r3, [r3, #12]
 802dffe:	62bb      	str	r3, [r7, #40]	; 0x28
 802e000:	e00b      	b.n	802e01a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 802e002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e004:	b2da      	uxtb	r2, r3
 802e006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e008:	1c59      	adds	r1, r3, #1
 802e00a:	62f9      	str	r1, [r7, #44]	; 0x2c
 802e00c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e010:	b2d2      	uxtb	r2, r2
 802e012:	701a      	strb	r2, [r3, #0]
 802e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e016:	09db      	lsrs	r3, r3, #7
 802e018:	62bb      	str	r3, [r7, #40]	; 0x28
 802e01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e01c:	2b7f      	cmp	r3, #127	; 0x7f
 802e01e:	d8f0      	bhi.n	802e002 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 802e020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e022:	1c5a      	adds	r2, r3, #1
 802e024:	62fa      	str	r2, [r7, #44]	; 0x2c
 802e026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802e028:	b2d2      	uxtb	r2, r2
 802e02a:	701a      	strb	r2, [r3, #0]
 802e02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e02e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 802e030:	68fb      	ldr	r3, [r7, #12]
 802e032:	627b      	str	r3, [r7, #36]	; 0x24
 802e034:	687b      	ldr	r3, [r7, #4]
 802e036:	691b      	ldr	r3, [r3, #16]
 802e038:	623b      	str	r3, [r7, #32]
 802e03a:	e00b      	b.n	802e054 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 802e03c:	6a3b      	ldr	r3, [r7, #32]
 802e03e:	b2da      	uxtb	r2, r3
 802e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e042:	1c59      	adds	r1, r3, #1
 802e044:	6279      	str	r1, [r7, #36]	; 0x24
 802e046:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e04a:	b2d2      	uxtb	r2, r2
 802e04c:	701a      	strb	r2, [r3, #0]
 802e04e:	6a3b      	ldr	r3, [r7, #32]
 802e050:	09db      	lsrs	r3, r3, #7
 802e052:	623b      	str	r3, [r7, #32]
 802e054:	6a3b      	ldr	r3, [r7, #32]
 802e056:	2b7f      	cmp	r3, #127	; 0x7f
 802e058:	d8f0      	bhi.n	802e03c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 802e05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e05c:	1c5a      	adds	r2, r3, #1
 802e05e:	627a      	str	r2, [r7, #36]	; 0x24
 802e060:	6a3a      	ldr	r2, [r7, #32]
 802e062:	b2d2      	uxtb	r2, r2
 802e064:	701a      	strb	r2, [r3, #0]
 802e066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e068:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 802e06a:	68fb      	ldr	r3, [r7, #12]
 802e06c:	61fb      	str	r3, [r7, #28]
 802e06e:	2300      	movs	r3, #0
 802e070:	61bb      	str	r3, [r7, #24]
 802e072:	e00b      	b.n	802e08c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 802e074:	69bb      	ldr	r3, [r7, #24]
 802e076:	b2da      	uxtb	r2, r3
 802e078:	69fb      	ldr	r3, [r7, #28]
 802e07a:	1c59      	adds	r1, r3, #1
 802e07c:	61f9      	str	r1, [r7, #28]
 802e07e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e082:	b2d2      	uxtb	r2, r2
 802e084:	701a      	strb	r2, [r3, #0]
 802e086:	69bb      	ldr	r3, [r7, #24]
 802e088:	09db      	lsrs	r3, r3, #7
 802e08a:	61bb      	str	r3, [r7, #24]
 802e08c:	69bb      	ldr	r3, [r7, #24]
 802e08e:	2b7f      	cmp	r3, #127	; 0x7f
 802e090:	d8f0      	bhi.n	802e074 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 802e092:	69fb      	ldr	r3, [r7, #28]
 802e094:	1c5a      	adds	r2, r3, #1
 802e096:	61fa      	str	r2, [r7, #28]
 802e098:	69ba      	ldr	r2, [r7, #24]
 802e09a:	b2d2      	uxtb	r2, r2
 802e09c:	701a      	strb	r2, [r3, #0]
 802e09e:	69fb      	ldr	r3, [r7, #28]
 802e0a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 802e0a2:	2215      	movs	r2, #21
 802e0a4:	68f9      	ldr	r1, [r7, #12]
 802e0a6:	6938      	ldr	r0, [r7, #16]
 802e0a8:	f7ff f9f8 	bl	802d49c <_SendPacket>
  RECORD_END();
 802e0ac:	697b      	ldr	r3, [r7, #20]
 802e0ae:	f383 8811 	msr	BASEPRI, r3
}
 802e0b2:	bf00      	nop
 802e0b4:	3748      	adds	r7, #72	; 0x48
 802e0b6:	46bd      	mov	sp, r7
 802e0b8:	bd80      	pop	{r7, pc}
 802e0ba:	bf00      	nop
 802e0bc:	2001b718 	.word	0x2001b718
 802e0c0:	2001b6e8 	.word	0x2001b6e8

0802e0c4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 802e0c4:	b580      	push	{r7, lr}
 802e0c6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 802e0c8:	4b07      	ldr	r3, [pc, #28]	; (802e0e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 802e0ca:	6a1b      	ldr	r3, [r3, #32]
 802e0cc:	2b00      	cmp	r3, #0
 802e0ce:	d008      	beq.n	802e0e2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 802e0d0:	4b05      	ldr	r3, [pc, #20]	; (802e0e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 802e0d2:	6a1b      	ldr	r3, [r3, #32]
 802e0d4:	685b      	ldr	r3, [r3, #4]
 802e0d6:	2b00      	cmp	r3, #0
 802e0d8:	d003      	beq.n	802e0e2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 802e0da:	4b03      	ldr	r3, [pc, #12]	; (802e0e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 802e0dc:	6a1b      	ldr	r3, [r3, #32]
 802e0de:	685b      	ldr	r3, [r3, #4]
 802e0e0:	4798      	blx	r3
  }
}
 802e0e2:	bf00      	nop
 802e0e4:	bd80      	pop	{r7, pc}
 802e0e6:	bf00      	nop
 802e0e8:	2001b6e8 	.word	0x2001b6e8

0802e0ec <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 802e0ec:	b580      	push	{r7, lr}
 802e0ee:	b086      	sub	sp, #24
 802e0f0:	af00      	add	r7, sp, #0
 802e0f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e0f4:	f3ef 8311 	mrs	r3, BASEPRI
 802e0f8:	f04f 0120 	mov.w	r1, #32
 802e0fc:	f381 8811 	msr	BASEPRI, r1
 802e100:	617b      	str	r3, [r7, #20]
 802e102:	480b      	ldr	r0, [pc, #44]	; (802e130 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 802e104:	f7ff f8da 	bl	802d2bc <_PreparePacket>
 802e108:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e10a:	2280      	movs	r2, #128	; 0x80
 802e10c:	6879      	ldr	r1, [r7, #4]
 802e10e:	6938      	ldr	r0, [r7, #16]
 802e110:	f7ff f884 	bl	802d21c <_EncodeStr>
 802e114:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 802e116:	220e      	movs	r2, #14
 802e118:	68f9      	ldr	r1, [r7, #12]
 802e11a:	6938      	ldr	r0, [r7, #16]
 802e11c:	f7ff f9be 	bl	802d49c <_SendPacket>
  RECORD_END();
 802e120:	697b      	ldr	r3, [r7, #20]
 802e122:	f383 8811 	msr	BASEPRI, r3
}
 802e126:	bf00      	nop
 802e128:	3718      	adds	r7, #24
 802e12a:	46bd      	mov	sp, r7
 802e12c:	bd80      	pop	{r7, pc}
 802e12e:	bf00      	nop
 802e130:	2001b718 	.word	0x2001b718

0802e134 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 802e134:	b590      	push	{r4, r7, lr}
 802e136:	b083      	sub	sp, #12
 802e138:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 802e13a:	4b15      	ldr	r3, [pc, #84]	; (802e190 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 802e13c:	6a1b      	ldr	r3, [r3, #32]
 802e13e:	2b00      	cmp	r3, #0
 802e140:	d01a      	beq.n	802e178 <SEGGER_SYSVIEW_RecordSystime+0x44>
 802e142:	4b13      	ldr	r3, [pc, #76]	; (802e190 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 802e144:	6a1b      	ldr	r3, [r3, #32]
 802e146:	681b      	ldr	r3, [r3, #0]
 802e148:	2b00      	cmp	r3, #0
 802e14a:	d015      	beq.n	802e178 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 802e14c:	4b10      	ldr	r3, [pc, #64]	; (802e190 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 802e14e:	6a1b      	ldr	r3, [r3, #32]
 802e150:	681b      	ldr	r3, [r3, #0]
 802e152:	4798      	blx	r3
 802e154:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 802e158:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 802e15a:	e9d7 0100 	ldrd	r0, r1, [r7]
 802e15e:	f04f 0200 	mov.w	r2, #0
 802e162:	f04f 0300 	mov.w	r3, #0
 802e166:	000a      	movs	r2, r1
 802e168:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 802e16a:	4613      	mov	r3, r2
 802e16c:	461a      	mov	r2, r3
 802e16e:	4621      	mov	r1, r4
 802e170:	200d      	movs	r0, #13
 802e172:	f7ff fbe7 	bl	802d944 <SEGGER_SYSVIEW_RecordU32x2>
 802e176:	e006      	b.n	802e186 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 802e178:	4b06      	ldr	r3, [pc, #24]	; (802e194 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 802e17a:	681b      	ldr	r3, [r3, #0]
 802e17c:	4619      	mov	r1, r3
 802e17e:	200c      	movs	r0, #12
 802e180:	f7ff fba4 	bl	802d8cc <SEGGER_SYSVIEW_RecordU32>
  }
}
 802e184:	bf00      	nop
 802e186:	bf00      	nop
 802e188:	370c      	adds	r7, #12
 802e18a:	46bd      	mov	sp, r7
 802e18c:	bd90      	pop	{r4, r7, pc}
 802e18e:	bf00      	nop
 802e190:	2001b6e8 	.word	0x2001b6e8
 802e194:	e0001004 	.word	0xe0001004

0802e198 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 802e198:	b580      	push	{r7, lr}
 802e19a:	b082      	sub	sp, #8
 802e19c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 802e19e:	f3ef 8311 	mrs	r3, BASEPRI
 802e1a2:	f04f 0120 	mov.w	r1, #32
 802e1a6:	f381 8811 	msr	BASEPRI, r1
 802e1aa:	607b      	str	r3, [r7, #4]
 802e1ac:	4807      	ldr	r0, [pc, #28]	; (802e1cc <SEGGER_SYSVIEW_OnIdle+0x34>)
 802e1ae:	f7ff f885 	bl	802d2bc <_PreparePacket>
 802e1b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 802e1b4:	2211      	movs	r2, #17
 802e1b6:	6839      	ldr	r1, [r7, #0]
 802e1b8:	6838      	ldr	r0, [r7, #0]
 802e1ba:	f7ff f96f 	bl	802d49c <_SendPacket>
  RECORD_END();
 802e1be:	687b      	ldr	r3, [r7, #4]
 802e1c0:	f383 8811 	msr	BASEPRI, r3
}
 802e1c4:	bf00      	nop
 802e1c6:	3708      	adds	r7, #8
 802e1c8:	46bd      	mov	sp, r7
 802e1ca:	bd80      	pop	{r7, pc}
 802e1cc:	2001b718 	.word	0x2001b718

0802e1d0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 802e1d0:	b580      	push	{r7, lr}
 802e1d2:	b088      	sub	sp, #32
 802e1d4:	af00      	add	r7, sp, #0
 802e1d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802e1d8:	f3ef 8311 	mrs	r3, BASEPRI
 802e1dc:	f04f 0120 	mov.w	r1, #32
 802e1e0:	f381 8811 	msr	BASEPRI, r1
 802e1e4:	617b      	str	r3, [r7, #20]
 802e1e6:	4819      	ldr	r0, [pc, #100]	; (802e24c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 802e1e8:	f7ff f868 	bl	802d2bc <_PreparePacket>
 802e1ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802e1ee:	693b      	ldr	r3, [r7, #16]
 802e1f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 802e1f2:	4b17      	ldr	r3, [pc, #92]	; (802e250 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 802e1f4:	691b      	ldr	r3, [r3, #16]
 802e1f6:	687a      	ldr	r2, [r7, #4]
 802e1f8:	1ad3      	subs	r3, r2, r3
 802e1fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 802e1fc:	68fb      	ldr	r3, [r7, #12]
 802e1fe:	61fb      	str	r3, [r7, #28]
 802e200:	687b      	ldr	r3, [r7, #4]
 802e202:	61bb      	str	r3, [r7, #24]
 802e204:	e00b      	b.n	802e21e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 802e206:	69bb      	ldr	r3, [r7, #24]
 802e208:	b2da      	uxtb	r2, r3
 802e20a:	69fb      	ldr	r3, [r7, #28]
 802e20c:	1c59      	adds	r1, r3, #1
 802e20e:	61f9      	str	r1, [r7, #28]
 802e210:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e214:	b2d2      	uxtb	r2, r2
 802e216:	701a      	strb	r2, [r3, #0]
 802e218:	69bb      	ldr	r3, [r7, #24]
 802e21a:	09db      	lsrs	r3, r3, #7
 802e21c:	61bb      	str	r3, [r7, #24]
 802e21e:	69bb      	ldr	r3, [r7, #24]
 802e220:	2b7f      	cmp	r3, #127	; 0x7f
 802e222:	d8f0      	bhi.n	802e206 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 802e224:	69fb      	ldr	r3, [r7, #28]
 802e226:	1c5a      	adds	r2, r3, #1
 802e228:	61fa      	str	r2, [r7, #28]
 802e22a:	69ba      	ldr	r2, [r7, #24]
 802e22c:	b2d2      	uxtb	r2, r2
 802e22e:	701a      	strb	r2, [r3, #0]
 802e230:	69fb      	ldr	r3, [r7, #28]
 802e232:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 802e234:	2208      	movs	r2, #8
 802e236:	68f9      	ldr	r1, [r7, #12]
 802e238:	6938      	ldr	r0, [r7, #16]
 802e23a:	f7ff f92f 	bl	802d49c <_SendPacket>
  RECORD_END();
 802e23e:	697b      	ldr	r3, [r7, #20]
 802e240:	f383 8811 	msr	BASEPRI, r3
}
 802e244:	bf00      	nop
 802e246:	3720      	adds	r7, #32
 802e248:	46bd      	mov	sp, r7
 802e24a:	bd80      	pop	{r7, pc}
 802e24c:	2001b718 	.word	0x2001b718
 802e250:	2001b6e8 	.word	0x2001b6e8

0802e254 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 802e254:	b580      	push	{r7, lr}
 802e256:	b088      	sub	sp, #32
 802e258:	af00      	add	r7, sp, #0
 802e25a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802e25c:	f3ef 8311 	mrs	r3, BASEPRI
 802e260:	f04f 0120 	mov.w	r1, #32
 802e264:	f381 8811 	msr	BASEPRI, r1
 802e268:	617b      	str	r3, [r7, #20]
 802e26a:	4819      	ldr	r0, [pc, #100]	; (802e2d0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 802e26c:	f7ff f826 	bl	802d2bc <_PreparePacket>
 802e270:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802e272:	693b      	ldr	r3, [r7, #16]
 802e274:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 802e276:	4b17      	ldr	r3, [pc, #92]	; (802e2d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 802e278:	691b      	ldr	r3, [r3, #16]
 802e27a:	687a      	ldr	r2, [r7, #4]
 802e27c:	1ad3      	subs	r3, r2, r3
 802e27e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 802e280:	68fb      	ldr	r3, [r7, #12]
 802e282:	61fb      	str	r3, [r7, #28]
 802e284:	687b      	ldr	r3, [r7, #4]
 802e286:	61bb      	str	r3, [r7, #24]
 802e288:	e00b      	b.n	802e2a2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 802e28a:	69bb      	ldr	r3, [r7, #24]
 802e28c:	b2da      	uxtb	r2, r3
 802e28e:	69fb      	ldr	r3, [r7, #28]
 802e290:	1c59      	adds	r1, r3, #1
 802e292:	61f9      	str	r1, [r7, #28]
 802e294:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e298:	b2d2      	uxtb	r2, r2
 802e29a:	701a      	strb	r2, [r3, #0]
 802e29c:	69bb      	ldr	r3, [r7, #24]
 802e29e:	09db      	lsrs	r3, r3, #7
 802e2a0:	61bb      	str	r3, [r7, #24]
 802e2a2:	69bb      	ldr	r3, [r7, #24]
 802e2a4:	2b7f      	cmp	r3, #127	; 0x7f
 802e2a6:	d8f0      	bhi.n	802e28a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 802e2a8:	69fb      	ldr	r3, [r7, #28]
 802e2aa:	1c5a      	adds	r2, r3, #1
 802e2ac:	61fa      	str	r2, [r7, #28]
 802e2ae:	69ba      	ldr	r2, [r7, #24]
 802e2b0:	b2d2      	uxtb	r2, r2
 802e2b2:	701a      	strb	r2, [r3, #0]
 802e2b4:	69fb      	ldr	r3, [r7, #28]
 802e2b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 802e2b8:	2204      	movs	r2, #4
 802e2ba:	68f9      	ldr	r1, [r7, #12]
 802e2bc:	6938      	ldr	r0, [r7, #16]
 802e2be:	f7ff f8ed 	bl	802d49c <_SendPacket>
  RECORD_END();
 802e2c2:	697b      	ldr	r3, [r7, #20]
 802e2c4:	f383 8811 	msr	BASEPRI, r3
}
 802e2c8:	bf00      	nop
 802e2ca:	3720      	adds	r7, #32
 802e2cc:	46bd      	mov	sp, r7
 802e2ce:	bd80      	pop	{r7, pc}
 802e2d0:	2001b718 	.word	0x2001b718
 802e2d4:	2001b6e8 	.word	0x2001b6e8

0802e2d8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 802e2d8:	b580      	push	{r7, lr}
 802e2da:	b088      	sub	sp, #32
 802e2dc:	af00      	add	r7, sp, #0
 802e2de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802e2e0:	f3ef 8311 	mrs	r3, BASEPRI
 802e2e4:	f04f 0120 	mov.w	r1, #32
 802e2e8:	f381 8811 	msr	BASEPRI, r1
 802e2ec:	617b      	str	r3, [r7, #20]
 802e2ee:	4819      	ldr	r0, [pc, #100]	; (802e354 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 802e2f0:	f7fe ffe4 	bl	802d2bc <_PreparePacket>
 802e2f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802e2f6:	693b      	ldr	r3, [r7, #16]
 802e2f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 802e2fa:	4b17      	ldr	r3, [pc, #92]	; (802e358 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 802e2fc:	691b      	ldr	r3, [r3, #16]
 802e2fe:	687a      	ldr	r2, [r7, #4]
 802e300:	1ad3      	subs	r3, r2, r3
 802e302:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 802e304:	68fb      	ldr	r3, [r7, #12]
 802e306:	61fb      	str	r3, [r7, #28]
 802e308:	687b      	ldr	r3, [r7, #4]
 802e30a:	61bb      	str	r3, [r7, #24]
 802e30c:	e00b      	b.n	802e326 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 802e30e:	69bb      	ldr	r3, [r7, #24]
 802e310:	b2da      	uxtb	r2, r3
 802e312:	69fb      	ldr	r3, [r7, #28]
 802e314:	1c59      	adds	r1, r3, #1
 802e316:	61f9      	str	r1, [r7, #28]
 802e318:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e31c:	b2d2      	uxtb	r2, r2
 802e31e:	701a      	strb	r2, [r3, #0]
 802e320:	69bb      	ldr	r3, [r7, #24]
 802e322:	09db      	lsrs	r3, r3, #7
 802e324:	61bb      	str	r3, [r7, #24]
 802e326:	69bb      	ldr	r3, [r7, #24]
 802e328:	2b7f      	cmp	r3, #127	; 0x7f
 802e32a:	d8f0      	bhi.n	802e30e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 802e32c:	69fb      	ldr	r3, [r7, #28]
 802e32e:	1c5a      	adds	r2, r3, #1
 802e330:	61fa      	str	r2, [r7, #28]
 802e332:	69ba      	ldr	r2, [r7, #24]
 802e334:	b2d2      	uxtb	r2, r2
 802e336:	701a      	strb	r2, [r3, #0]
 802e338:	69fb      	ldr	r3, [r7, #28]
 802e33a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 802e33c:	2206      	movs	r2, #6
 802e33e:	68f9      	ldr	r1, [r7, #12]
 802e340:	6938      	ldr	r0, [r7, #16]
 802e342:	f7ff f8ab 	bl	802d49c <_SendPacket>
  RECORD_END();
 802e346:	697b      	ldr	r3, [r7, #20]
 802e348:	f383 8811 	msr	BASEPRI, r3
}
 802e34c:	bf00      	nop
 802e34e:	3720      	adds	r7, #32
 802e350:	46bd      	mov	sp, r7
 802e352:	bd80      	pop	{r7, pc}
 802e354:	2001b718 	.word	0x2001b718
 802e358:	2001b6e8 	.word	0x2001b6e8

0802e35c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 802e35c:	b480      	push	{r7}
 802e35e:	b083      	sub	sp, #12
 802e360:	af00      	add	r7, sp, #0
 802e362:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 802e364:	4b04      	ldr	r3, [pc, #16]	; (802e378 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 802e366:	691b      	ldr	r3, [r3, #16]
 802e368:	687a      	ldr	r2, [r7, #4]
 802e36a:	1ad3      	subs	r3, r2, r3
}
 802e36c:	4618      	mov	r0, r3
 802e36e:	370c      	adds	r7, #12
 802e370:	46bd      	mov	sp, r7
 802e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e376:	4770      	bx	lr
 802e378:	2001b6e8 	.word	0x2001b6e8

0802e37c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 802e37c:	b580      	push	{r7, lr}
 802e37e:	b08c      	sub	sp, #48	; 0x30
 802e380:	af00      	add	r7, sp, #0
 802e382:	4603      	mov	r3, r0
 802e384:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 802e386:	4b3b      	ldr	r3, [pc, #236]	; (802e474 <SEGGER_SYSVIEW_SendModule+0xf8>)
 802e388:	681b      	ldr	r3, [r3, #0]
 802e38a:	2b00      	cmp	r3, #0
 802e38c:	d06d      	beq.n	802e46a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 802e38e:	4b39      	ldr	r3, [pc, #228]	; (802e474 <SEGGER_SYSVIEW_SendModule+0xf8>)
 802e390:	681b      	ldr	r3, [r3, #0]
 802e392:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 802e394:	2300      	movs	r3, #0
 802e396:	62bb      	str	r3, [r7, #40]	; 0x28
 802e398:	e008      	b.n	802e3ac <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 802e39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e39c:	691b      	ldr	r3, [r3, #16]
 802e39e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 802e3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e3a2:	2b00      	cmp	r3, #0
 802e3a4:	d007      	beq.n	802e3b6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 802e3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e3a8:	3301      	adds	r3, #1
 802e3aa:	62bb      	str	r3, [r7, #40]	; 0x28
 802e3ac:	79fb      	ldrb	r3, [r7, #7]
 802e3ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802e3b0:	429a      	cmp	r2, r3
 802e3b2:	d3f2      	bcc.n	802e39a <SEGGER_SYSVIEW_SendModule+0x1e>
 802e3b4:	e000      	b.n	802e3b8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 802e3b6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 802e3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e3ba:	2b00      	cmp	r3, #0
 802e3bc:	d055      	beq.n	802e46a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e3be:	f3ef 8311 	mrs	r3, BASEPRI
 802e3c2:	f04f 0120 	mov.w	r1, #32
 802e3c6:	f381 8811 	msr	BASEPRI, r1
 802e3ca:	617b      	str	r3, [r7, #20]
 802e3cc:	482a      	ldr	r0, [pc, #168]	; (802e478 <SEGGER_SYSVIEW_SendModule+0xfc>)
 802e3ce:	f7fe ff75 	bl	802d2bc <_PreparePacket>
 802e3d2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 802e3d4:	693b      	ldr	r3, [r7, #16]
 802e3d6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 802e3d8:	68fb      	ldr	r3, [r7, #12]
 802e3da:	627b      	str	r3, [r7, #36]	; 0x24
 802e3dc:	79fb      	ldrb	r3, [r7, #7]
 802e3de:	623b      	str	r3, [r7, #32]
 802e3e0:	e00b      	b.n	802e3fa <SEGGER_SYSVIEW_SendModule+0x7e>
 802e3e2:	6a3b      	ldr	r3, [r7, #32]
 802e3e4:	b2da      	uxtb	r2, r3
 802e3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e3e8:	1c59      	adds	r1, r3, #1
 802e3ea:	6279      	str	r1, [r7, #36]	; 0x24
 802e3ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e3f0:	b2d2      	uxtb	r2, r2
 802e3f2:	701a      	strb	r2, [r3, #0]
 802e3f4:	6a3b      	ldr	r3, [r7, #32]
 802e3f6:	09db      	lsrs	r3, r3, #7
 802e3f8:	623b      	str	r3, [r7, #32]
 802e3fa:	6a3b      	ldr	r3, [r7, #32]
 802e3fc:	2b7f      	cmp	r3, #127	; 0x7f
 802e3fe:	d8f0      	bhi.n	802e3e2 <SEGGER_SYSVIEW_SendModule+0x66>
 802e400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e402:	1c5a      	adds	r2, r3, #1
 802e404:	627a      	str	r2, [r7, #36]	; 0x24
 802e406:	6a3a      	ldr	r2, [r7, #32]
 802e408:	b2d2      	uxtb	r2, r2
 802e40a:	701a      	strb	r2, [r3, #0]
 802e40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e40e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 802e410:	68fb      	ldr	r3, [r7, #12]
 802e412:	61fb      	str	r3, [r7, #28]
 802e414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e416:	689b      	ldr	r3, [r3, #8]
 802e418:	61bb      	str	r3, [r7, #24]
 802e41a:	e00b      	b.n	802e434 <SEGGER_SYSVIEW_SendModule+0xb8>
 802e41c:	69bb      	ldr	r3, [r7, #24]
 802e41e:	b2da      	uxtb	r2, r3
 802e420:	69fb      	ldr	r3, [r7, #28]
 802e422:	1c59      	adds	r1, r3, #1
 802e424:	61f9      	str	r1, [r7, #28]
 802e426:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e42a:	b2d2      	uxtb	r2, r2
 802e42c:	701a      	strb	r2, [r3, #0]
 802e42e:	69bb      	ldr	r3, [r7, #24]
 802e430:	09db      	lsrs	r3, r3, #7
 802e432:	61bb      	str	r3, [r7, #24]
 802e434:	69bb      	ldr	r3, [r7, #24]
 802e436:	2b7f      	cmp	r3, #127	; 0x7f
 802e438:	d8f0      	bhi.n	802e41c <SEGGER_SYSVIEW_SendModule+0xa0>
 802e43a:	69fb      	ldr	r3, [r7, #28]
 802e43c:	1c5a      	adds	r2, r3, #1
 802e43e:	61fa      	str	r2, [r7, #28]
 802e440:	69ba      	ldr	r2, [r7, #24]
 802e442:	b2d2      	uxtb	r2, r2
 802e444:	701a      	strb	r2, [r3, #0]
 802e446:	69fb      	ldr	r3, [r7, #28]
 802e448:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e44c:	681b      	ldr	r3, [r3, #0]
 802e44e:	2280      	movs	r2, #128	; 0x80
 802e450:	4619      	mov	r1, r3
 802e452:	68f8      	ldr	r0, [r7, #12]
 802e454:	f7fe fee2 	bl	802d21c <_EncodeStr>
 802e458:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 802e45a:	2216      	movs	r2, #22
 802e45c:	68f9      	ldr	r1, [r7, #12]
 802e45e:	6938      	ldr	r0, [r7, #16]
 802e460:	f7ff f81c 	bl	802d49c <_SendPacket>
      RECORD_END();
 802e464:	697b      	ldr	r3, [r7, #20]
 802e466:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 802e46a:	bf00      	nop
 802e46c:	3730      	adds	r7, #48	; 0x30
 802e46e:	46bd      	mov	sp, r7
 802e470:	bd80      	pop	{r7, pc}
 802e472:	bf00      	nop
 802e474:	2001b710 	.word	0x2001b710
 802e478:	2001b718 	.word	0x2001b718

0802e47c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 802e47c:	b580      	push	{r7, lr}
 802e47e:	b082      	sub	sp, #8
 802e480:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 802e482:	4b0c      	ldr	r3, [pc, #48]	; (802e4b4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 802e484:	681b      	ldr	r3, [r3, #0]
 802e486:	2b00      	cmp	r3, #0
 802e488:	d00f      	beq.n	802e4aa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 802e48a:	4b0a      	ldr	r3, [pc, #40]	; (802e4b4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 802e48c:	681b      	ldr	r3, [r3, #0]
 802e48e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 802e490:	687b      	ldr	r3, [r7, #4]
 802e492:	68db      	ldr	r3, [r3, #12]
 802e494:	2b00      	cmp	r3, #0
 802e496:	d002      	beq.n	802e49e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 802e498:	687b      	ldr	r3, [r7, #4]
 802e49a:	68db      	ldr	r3, [r3, #12]
 802e49c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 802e49e:	687b      	ldr	r3, [r7, #4]
 802e4a0:	691b      	ldr	r3, [r3, #16]
 802e4a2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 802e4a4:	687b      	ldr	r3, [r7, #4]
 802e4a6:	2b00      	cmp	r3, #0
 802e4a8:	d1f2      	bne.n	802e490 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 802e4aa:	bf00      	nop
 802e4ac:	3708      	adds	r7, #8
 802e4ae:	46bd      	mov	sp, r7
 802e4b0:	bd80      	pop	{r7, pc}
 802e4b2:	bf00      	nop
 802e4b4:	2001b710 	.word	0x2001b710

0802e4b8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 802e4b8:	b580      	push	{r7, lr}
 802e4ba:	b086      	sub	sp, #24
 802e4bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 802e4be:	f3ef 8311 	mrs	r3, BASEPRI
 802e4c2:	f04f 0120 	mov.w	r1, #32
 802e4c6:	f381 8811 	msr	BASEPRI, r1
 802e4ca:	60fb      	str	r3, [r7, #12]
 802e4cc:	4817      	ldr	r0, [pc, #92]	; (802e52c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 802e4ce:	f7fe fef5 	bl	802d2bc <_PreparePacket>
 802e4d2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 802e4d4:	68bb      	ldr	r3, [r7, #8]
 802e4d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 802e4d8:	687b      	ldr	r3, [r7, #4]
 802e4da:	617b      	str	r3, [r7, #20]
 802e4dc:	4b14      	ldr	r3, [pc, #80]	; (802e530 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 802e4de:	781b      	ldrb	r3, [r3, #0]
 802e4e0:	613b      	str	r3, [r7, #16]
 802e4e2:	e00b      	b.n	802e4fc <SEGGER_SYSVIEW_SendNumModules+0x44>
 802e4e4:	693b      	ldr	r3, [r7, #16]
 802e4e6:	b2da      	uxtb	r2, r3
 802e4e8:	697b      	ldr	r3, [r7, #20]
 802e4ea:	1c59      	adds	r1, r3, #1
 802e4ec:	6179      	str	r1, [r7, #20]
 802e4ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e4f2:	b2d2      	uxtb	r2, r2
 802e4f4:	701a      	strb	r2, [r3, #0]
 802e4f6:	693b      	ldr	r3, [r7, #16]
 802e4f8:	09db      	lsrs	r3, r3, #7
 802e4fa:	613b      	str	r3, [r7, #16]
 802e4fc:	693b      	ldr	r3, [r7, #16]
 802e4fe:	2b7f      	cmp	r3, #127	; 0x7f
 802e500:	d8f0      	bhi.n	802e4e4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 802e502:	697b      	ldr	r3, [r7, #20]
 802e504:	1c5a      	adds	r2, r3, #1
 802e506:	617a      	str	r2, [r7, #20]
 802e508:	693a      	ldr	r2, [r7, #16]
 802e50a:	b2d2      	uxtb	r2, r2
 802e50c:	701a      	strb	r2, [r3, #0]
 802e50e:	697b      	ldr	r3, [r7, #20]
 802e510:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 802e512:	221b      	movs	r2, #27
 802e514:	6879      	ldr	r1, [r7, #4]
 802e516:	68b8      	ldr	r0, [r7, #8]
 802e518:	f7fe ffc0 	bl	802d49c <_SendPacket>
  RECORD_END();
 802e51c:	68fb      	ldr	r3, [r7, #12]
 802e51e:	f383 8811 	msr	BASEPRI, r3
}
 802e522:	bf00      	nop
 802e524:	3718      	adds	r7, #24
 802e526:	46bd      	mov	sp, r7
 802e528:	bd80      	pop	{r7, pc}
 802e52a:	bf00      	nop
 802e52c:	2001b718 	.word	0x2001b718
 802e530:	2001b714 	.word	0x2001b714

0802e534 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 802e534:	b40f      	push	{r0, r1, r2, r3}
 802e536:	b580      	push	{r7, lr}
 802e538:	b082      	sub	sp, #8
 802e53a:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 802e53c:	f107 0314 	add.w	r3, r7, #20
 802e540:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 802e542:	1d3b      	adds	r3, r7, #4
 802e544:	461a      	mov	r2, r3
 802e546:	2100      	movs	r1, #0
 802e548:	6938      	ldr	r0, [r7, #16]
 802e54a:	f7ff f88d 	bl	802d668 <_VPrintHost>
  va_end(ParamList);
#endif
}
 802e54e:	bf00      	nop
 802e550:	3708      	adds	r7, #8
 802e552:	46bd      	mov	sp, r7
 802e554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802e558:	b004      	add	sp, #16
 802e55a:	4770      	bx	lr

0802e55c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 802e55c:	b580      	push	{r7, lr}
 802e55e:	b08a      	sub	sp, #40	; 0x28
 802e560:	af00      	add	r7, sp, #0
 802e562:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e564:	f3ef 8311 	mrs	r3, BASEPRI
 802e568:	f04f 0120 	mov.w	r1, #32
 802e56c:	f381 8811 	msr	BASEPRI, r1
 802e570:	617b      	str	r3, [r7, #20]
 802e572:	4827      	ldr	r0, [pc, #156]	; (802e610 <SEGGER_SYSVIEW_Warn+0xb4>)
 802e574:	f7fe fea2 	bl	802d2bc <_PreparePacket>
 802e578:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e57a:	2280      	movs	r2, #128	; 0x80
 802e57c:	6879      	ldr	r1, [r7, #4]
 802e57e:	6938      	ldr	r0, [r7, #16]
 802e580:	f7fe fe4c 	bl	802d21c <_EncodeStr>
 802e584:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 802e586:	68fb      	ldr	r3, [r7, #12]
 802e588:	627b      	str	r3, [r7, #36]	; 0x24
 802e58a:	2301      	movs	r3, #1
 802e58c:	623b      	str	r3, [r7, #32]
 802e58e:	e00b      	b.n	802e5a8 <SEGGER_SYSVIEW_Warn+0x4c>
 802e590:	6a3b      	ldr	r3, [r7, #32]
 802e592:	b2da      	uxtb	r2, r3
 802e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e596:	1c59      	adds	r1, r3, #1
 802e598:	6279      	str	r1, [r7, #36]	; 0x24
 802e59a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e59e:	b2d2      	uxtb	r2, r2
 802e5a0:	701a      	strb	r2, [r3, #0]
 802e5a2:	6a3b      	ldr	r3, [r7, #32]
 802e5a4:	09db      	lsrs	r3, r3, #7
 802e5a6:	623b      	str	r3, [r7, #32]
 802e5a8:	6a3b      	ldr	r3, [r7, #32]
 802e5aa:	2b7f      	cmp	r3, #127	; 0x7f
 802e5ac:	d8f0      	bhi.n	802e590 <SEGGER_SYSVIEW_Warn+0x34>
 802e5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e5b0:	1c5a      	adds	r2, r3, #1
 802e5b2:	627a      	str	r2, [r7, #36]	; 0x24
 802e5b4:	6a3a      	ldr	r2, [r7, #32]
 802e5b6:	b2d2      	uxtb	r2, r2
 802e5b8:	701a      	strb	r2, [r3, #0]
 802e5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e5bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 802e5be:	68fb      	ldr	r3, [r7, #12]
 802e5c0:	61fb      	str	r3, [r7, #28]
 802e5c2:	2300      	movs	r3, #0
 802e5c4:	61bb      	str	r3, [r7, #24]
 802e5c6:	e00b      	b.n	802e5e0 <SEGGER_SYSVIEW_Warn+0x84>
 802e5c8:	69bb      	ldr	r3, [r7, #24]
 802e5ca:	b2da      	uxtb	r2, r3
 802e5cc:	69fb      	ldr	r3, [r7, #28]
 802e5ce:	1c59      	adds	r1, r3, #1
 802e5d0:	61f9      	str	r1, [r7, #28]
 802e5d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e5d6:	b2d2      	uxtb	r2, r2
 802e5d8:	701a      	strb	r2, [r3, #0]
 802e5da:	69bb      	ldr	r3, [r7, #24]
 802e5dc:	09db      	lsrs	r3, r3, #7
 802e5de:	61bb      	str	r3, [r7, #24]
 802e5e0:	69bb      	ldr	r3, [r7, #24]
 802e5e2:	2b7f      	cmp	r3, #127	; 0x7f
 802e5e4:	d8f0      	bhi.n	802e5c8 <SEGGER_SYSVIEW_Warn+0x6c>
 802e5e6:	69fb      	ldr	r3, [r7, #28]
 802e5e8:	1c5a      	adds	r2, r3, #1
 802e5ea:	61fa      	str	r2, [r7, #28]
 802e5ec:	69ba      	ldr	r2, [r7, #24]
 802e5ee:	b2d2      	uxtb	r2, r2
 802e5f0:	701a      	strb	r2, [r3, #0]
 802e5f2:	69fb      	ldr	r3, [r7, #28]
 802e5f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 802e5f6:	221a      	movs	r2, #26
 802e5f8:	68f9      	ldr	r1, [r7, #12]
 802e5fa:	6938      	ldr	r0, [r7, #16]
 802e5fc:	f7fe ff4e 	bl	802d49c <_SendPacket>
  RECORD_END();
 802e600:	697b      	ldr	r3, [r7, #20]
 802e602:	f383 8811 	msr	BASEPRI, r3
}
 802e606:	bf00      	nop
 802e608:	3728      	adds	r7, #40	; 0x28
 802e60a:	46bd      	mov	sp, r7
 802e60c:	bd80      	pop	{r7, pc}
 802e60e:	bf00      	nop
 802e610:	2001b718 	.word	0x2001b718

0802e614 <arm_pid_init_f32>:
 802e614:	edd0 6a08 	vldr	s13, [r0, #32]
 802e618:	edd0 7a06 	vldr	s15, [r0, #24]
 802e61c:	ed90 7a07 	vldr	s14, [r0, #28]
 802e620:	edc0 6a02 	vstr	s13, [r0, #8]
 802e624:	ee37 7a87 	vadd.f32	s14, s15, s14
 802e628:	ee36 6aa6 	vadd.f32	s12, s13, s13
 802e62c:	eef1 7a67 	vneg.f32	s15, s15
 802e630:	ee37 7a26 	vadd.f32	s14, s14, s13
 802e634:	ee77 7ac6 	vsub.f32	s15, s15, s12
 802e638:	ed80 7a00 	vstr	s14, [r0]
 802e63c:	edc0 7a01 	vstr	s15, [r0, #4]
 802e640:	b901      	cbnz	r1, 802e644 <arm_pid_init_f32+0x30>
 802e642:	4770      	bx	lr
 802e644:	2300      	movs	r3, #0
 802e646:	60c3      	str	r3, [r0, #12]
 802e648:	6103      	str	r3, [r0, #16]
 802e64a:	6143      	str	r3, [r0, #20]
 802e64c:	4770      	bx	lr
 802e64e:	bf00      	nop

0802e650 <__errno>:
 802e650:	4b01      	ldr	r3, [pc, #4]	; (802e658 <__errno+0x8>)
 802e652:	6818      	ldr	r0, [r3, #0]
 802e654:	4770      	bx	lr
 802e656:	bf00      	nop
 802e658:	20001444 	.word	0x20001444

0802e65c <__libc_init_array>:
 802e65c:	b570      	push	{r4, r5, r6, lr}
 802e65e:	4d0d      	ldr	r5, [pc, #52]	; (802e694 <__libc_init_array+0x38>)
 802e660:	4c0d      	ldr	r4, [pc, #52]	; (802e698 <__libc_init_array+0x3c>)
 802e662:	1b64      	subs	r4, r4, r5
 802e664:	10a4      	asrs	r4, r4, #2
 802e666:	2600      	movs	r6, #0
 802e668:	42a6      	cmp	r6, r4
 802e66a:	d109      	bne.n	802e680 <__libc_init_array+0x24>
 802e66c:	4d0b      	ldr	r5, [pc, #44]	; (802e69c <__libc_init_array+0x40>)
 802e66e:	4c0c      	ldr	r4, [pc, #48]	; (802e6a0 <__libc_init_array+0x44>)
 802e670:	f001 fe58 	bl	8030324 <_init>
 802e674:	1b64      	subs	r4, r4, r5
 802e676:	10a4      	asrs	r4, r4, #2
 802e678:	2600      	movs	r6, #0
 802e67a:	42a6      	cmp	r6, r4
 802e67c:	d105      	bne.n	802e68a <__libc_init_array+0x2e>
 802e67e:	bd70      	pop	{r4, r5, r6, pc}
 802e680:	f855 3b04 	ldr.w	r3, [r5], #4
 802e684:	4798      	blx	r3
 802e686:	3601      	adds	r6, #1
 802e688:	e7ee      	b.n	802e668 <__libc_init_array+0xc>
 802e68a:	f855 3b04 	ldr.w	r3, [r5], #4
 802e68e:	4798      	blx	r3
 802e690:	3601      	adds	r6, #1
 802e692:	e7f2      	b.n	802e67a <__libc_init_array+0x1e>
 802e694:	08030cf8 	.word	0x08030cf8
 802e698:	08030cf8 	.word	0x08030cf8
 802e69c:	08030cf8 	.word	0x08030cf8
 802e6a0:	08030cfc 	.word	0x08030cfc

0802e6a4 <__retarget_lock_acquire_recursive>:
 802e6a4:	4770      	bx	lr

0802e6a6 <__retarget_lock_release_recursive>:
 802e6a6:	4770      	bx	lr

0802e6a8 <memcmp>:
 802e6a8:	b530      	push	{r4, r5, lr}
 802e6aa:	3901      	subs	r1, #1
 802e6ac:	2400      	movs	r4, #0
 802e6ae:	42a2      	cmp	r2, r4
 802e6b0:	d101      	bne.n	802e6b6 <memcmp+0xe>
 802e6b2:	2000      	movs	r0, #0
 802e6b4:	e005      	b.n	802e6c2 <memcmp+0x1a>
 802e6b6:	5d03      	ldrb	r3, [r0, r4]
 802e6b8:	3401      	adds	r4, #1
 802e6ba:	5d0d      	ldrb	r5, [r1, r4]
 802e6bc:	42ab      	cmp	r3, r5
 802e6be:	d0f6      	beq.n	802e6ae <memcmp+0x6>
 802e6c0:	1b58      	subs	r0, r3, r5
 802e6c2:	bd30      	pop	{r4, r5, pc}

0802e6c4 <memcpy>:
 802e6c4:	440a      	add	r2, r1
 802e6c6:	4291      	cmp	r1, r2
 802e6c8:	f100 33ff 	add.w	r3, r0, #4294967295
 802e6cc:	d100      	bne.n	802e6d0 <memcpy+0xc>
 802e6ce:	4770      	bx	lr
 802e6d0:	b510      	push	{r4, lr}
 802e6d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e6d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e6da:	4291      	cmp	r1, r2
 802e6dc:	d1f9      	bne.n	802e6d2 <memcpy+0xe>
 802e6de:	bd10      	pop	{r4, pc}

0802e6e0 <memset>:
 802e6e0:	4402      	add	r2, r0
 802e6e2:	4603      	mov	r3, r0
 802e6e4:	4293      	cmp	r3, r2
 802e6e6:	d100      	bne.n	802e6ea <memset+0xa>
 802e6e8:	4770      	bx	lr
 802e6ea:	f803 1b01 	strb.w	r1, [r3], #1
 802e6ee:	e7f9      	b.n	802e6e4 <memset+0x4>

0802e6f0 <cleanup_glue>:
 802e6f0:	b538      	push	{r3, r4, r5, lr}
 802e6f2:	460c      	mov	r4, r1
 802e6f4:	6809      	ldr	r1, [r1, #0]
 802e6f6:	4605      	mov	r5, r0
 802e6f8:	b109      	cbz	r1, 802e6fe <cleanup_glue+0xe>
 802e6fa:	f7ff fff9 	bl	802e6f0 <cleanup_glue>
 802e6fe:	4621      	mov	r1, r4
 802e700:	4628      	mov	r0, r5
 802e702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e706:	f000 b869 	b.w	802e7dc <_free_r>
	...

0802e70c <_reclaim_reent>:
 802e70c:	4b2c      	ldr	r3, [pc, #176]	; (802e7c0 <_reclaim_reent+0xb4>)
 802e70e:	681b      	ldr	r3, [r3, #0]
 802e710:	4283      	cmp	r3, r0
 802e712:	b570      	push	{r4, r5, r6, lr}
 802e714:	4604      	mov	r4, r0
 802e716:	d051      	beq.n	802e7bc <_reclaim_reent+0xb0>
 802e718:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802e71a:	b143      	cbz	r3, 802e72e <_reclaim_reent+0x22>
 802e71c:	68db      	ldr	r3, [r3, #12]
 802e71e:	2b00      	cmp	r3, #0
 802e720:	d14a      	bne.n	802e7b8 <_reclaim_reent+0xac>
 802e722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e724:	6819      	ldr	r1, [r3, #0]
 802e726:	b111      	cbz	r1, 802e72e <_reclaim_reent+0x22>
 802e728:	4620      	mov	r0, r4
 802e72a:	f000 f857 	bl	802e7dc <_free_r>
 802e72e:	6961      	ldr	r1, [r4, #20]
 802e730:	b111      	cbz	r1, 802e738 <_reclaim_reent+0x2c>
 802e732:	4620      	mov	r0, r4
 802e734:	f000 f852 	bl	802e7dc <_free_r>
 802e738:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802e73a:	b111      	cbz	r1, 802e742 <_reclaim_reent+0x36>
 802e73c:	4620      	mov	r0, r4
 802e73e:	f000 f84d 	bl	802e7dc <_free_r>
 802e742:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802e744:	b111      	cbz	r1, 802e74c <_reclaim_reent+0x40>
 802e746:	4620      	mov	r0, r4
 802e748:	f000 f848 	bl	802e7dc <_free_r>
 802e74c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802e74e:	b111      	cbz	r1, 802e756 <_reclaim_reent+0x4a>
 802e750:	4620      	mov	r0, r4
 802e752:	f000 f843 	bl	802e7dc <_free_r>
 802e756:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802e758:	b111      	cbz	r1, 802e760 <_reclaim_reent+0x54>
 802e75a:	4620      	mov	r0, r4
 802e75c:	f000 f83e 	bl	802e7dc <_free_r>
 802e760:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802e762:	b111      	cbz	r1, 802e76a <_reclaim_reent+0x5e>
 802e764:	4620      	mov	r0, r4
 802e766:	f000 f839 	bl	802e7dc <_free_r>
 802e76a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802e76c:	b111      	cbz	r1, 802e774 <_reclaim_reent+0x68>
 802e76e:	4620      	mov	r0, r4
 802e770:	f000 f834 	bl	802e7dc <_free_r>
 802e774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e776:	b111      	cbz	r1, 802e77e <_reclaim_reent+0x72>
 802e778:	4620      	mov	r0, r4
 802e77a:	f000 f82f 	bl	802e7dc <_free_r>
 802e77e:	69a3      	ldr	r3, [r4, #24]
 802e780:	b1e3      	cbz	r3, 802e7bc <_reclaim_reent+0xb0>
 802e782:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802e784:	4620      	mov	r0, r4
 802e786:	4798      	blx	r3
 802e788:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802e78a:	b1b9      	cbz	r1, 802e7bc <_reclaim_reent+0xb0>
 802e78c:	4620      	mov	r0, r4
 802e78e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802e792:	f7ff bfad 	b.w	802e6f0 <cleanup_glue>
 802e796:	5949      	ldr	r1, [r1, r5]
 802e798:	b941      	cbnz	r1, 802e7ac <_reclaim_reent+0xa0>
 802e79a:	3504      	adds	r5, #4
 802e79c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e79e:	2d80      	cmp	r5, #128	; 0x80
 802e7a0:	68d9      	ldr	r1, [r3, #12]
 802e7a2:	d1f8      	bne.n	802e796 <_reclaim_reent+0x8a>
 802e7a4:	4620      	mov	r0, r4
 802e7a6:	f000 f819 	bl	802e7dc <_free_r>
 802e7aa:	e7ba      	b.n	802e722 <_reclaim_reent+0x16>
 802e7ac:	680e      	ldr	r6, [r1, #0]
 802e7ae:	4620      	mov	r0, r4
 802e7b0:	f000 f814 	bl	802e7dc <_free_r>
 802e7b4:	4631      	mov	r1, r6
 802e7b6:	e7ef      	b.n	802e798 <_reclaim_reent+0x8c>
 802e7b8:	2500      	movs	r5, #0
 802e7ba:	e7ef      	b.n	802e79c <_reclaim_reent+0x90>
 802e7bc:	bd70      	pop	{r4, r5, r6, pc}
 802e7be:	bf00      	nop
 802e7c0:	20001444 	.word	0x20001444

0802e7c4 <__malloc_lock>:
 802e7c4:	4801      	ldr	r0, [pc, #4]	; (802e7cc <__malloc_lock+0x8>)
 802e7c6:	f7ff bf6d 	b.w	802e6a4 <__retarget_lock_acquire_recursive>
 802e7ca:	bf00      	nop
 802e7cc:	2001ef6c 	.word	0x2001ef6c

0802e7d0 <__malloc_unlock>:
 802e7d0:	4801      	ldr	r0, [pc, #4]	; (802e7d8 <__malloc_unlock+0x8>)
 802e7d2:	f7ff bf68 	b.w	802e6a6 <__retarget_lock_release_recursive>
 802e7d6:	bf00      	nop
 802e7d8:	2001ef6c 	.word	0x2001ef6c

0802e7dc <_free_r>:
 802e7dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802e7de:	2900      	cmp	r1, #0
 802e7e0:	d048      	beq.n	802e874 <_free_r+0x98>
 802e7e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e7e6:	9001      	str	r0, [sp, #4]
 802e7e8:	2b00      	cmp	r3, #0
 802e7ea:	f1a1 0404 	sub.w	r4, r1, #4
 802e7ee:	bfb8      	it	lt
 802e7f0:	18e4      	addlt	r4, r4, r3
 802e7f2:	f7ff ffe7 	bl	802e7c4 <__malloc_lock>
 802e7f6:	4a20      	ldr	r2, [pc, #128]	; (802e878 <_free_r+0x9c>)
 802e7f8:	9801      	ldr	r0, [sp, #4]
 802e7fa:	6813      	ldr	r3, [r2, #0]
 802e7fc:	4615      	mov	r5, r2
 802e7fe:	b933      	cbnz	r3, 802e80e <_free_r+0x32>
 802e800:	6063      	str	r3, [r4, #4]
 802e802:	6014      	str	r4, [r2, #0]
 802e804:	b003      	add	sp, #12
 802e806:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e80a:	f7ff bfe1 	b.w	802e7d0 <__malloc_unlock>
 802e80e:	42a3      	cmp	r3, r4
 802e810:	d90b      	bls.n	802e82a <_free_r+0x4e>
 802e812:	6821      	ldr	r1, [r4, #0]
 802e814:	1862      	adds	r2, r4, r1
 802e816:	4293      	cmp	r3, r2
 802e818:	bf04      	itt	eq
 802e81a:	681a      	ldreq	r2, [r3, #0]
 802e81c:	685b      	ldreq	r3, [r3, #4]
 802e81e:	6063      	str	r3, [r4, #4]
 802e820:	bf04      	itt	eq
 802e822:	1852      	addeq	r2, r2, r1
 802e824:	6022      	streq	r2, [r4, #0]
 802e826:	602c      	str	r4, [r5, #0]
 802e828:	e7ec      	b.n	802e804 <_free_r+0x28>
 802e82a:	461a      	mov	r2, r3
 802e82c:	685b      	ldr	r3, [r3, #4]
 802e82e:	b10b      	cbz	r3, 802e834 <_free_r+0x58>
 802e830:	42a3      	cmp	r3, r4
 802e832:	d9fa      	bls.n	802e82a <_free_r+0x4e>
 802e834:	6811      	ldr	r1, [r2, #0]
 802e836:	1855      	adds	r5, r2, r1
 802e838:	42a5      	cmp	r5, r4
 802e83a:	d10b      	bne.n	802e854 <_free_r+0x78>
 802e83c:	6824      	ldr	r4, [r4, #0]
 802e83e:	4421      	add	r1, r4
 802e840:	1854      	adds	r4, r2, r1
 802e842:	42a3      	cmp	r3, r4
 802e844:	6011      	str	r1, [r2, #0]
 802e846:	d1dd      	bne.n	802e804 <_free_r+0x28>
 802e848:	681c      	ldr	r4, [r3, #0]
 802e84a:	685b      	ldr	r3, [r3, #4]
 802e84c:	6053      	str	r3, [r2, #4]
 802e84e:	4421      	add	r1, r4
 802e850:	6011      	str	r1, [r2, #0]
 802e852:	e7d7      	b.n	802e804 <_free_r+0x28>
 802e854:	d902      	bls.n	802e85c <_free_r+0x80>
 802e856:	230c      	movs	r3, #12
 802e858:	6003      	str	r3, [r0, #0]
 802e85a:	e7d3      	b.n	802e804 <_free_r+0x28>
 802e85c:	6825      	ldr	r5, [r4, #0]
 802e85e:	1961      	adds	r1, r4, r5
 802e860:	428b      	cmp	r3, r1
 802e862:	bf04      	itt	eq
 802e864:	6819      	ldreq	r1, [r3, #0]
 802e866:	685b      	ldreq	r3, [r3, #4]
 802e868:	6063      	str	r3, [r4, #4]
 802e86a:	bf04      	itt	eq
 802e86c:	1949      	addeq	r1, r1, r5
 802e86e:	6021      	streq	r1, [r4, #0]
 802e870:	6054      	str	r4, [r2, #4]
 802e872:	e7c7      	b.n	802e804 <_free_r+0x28>
 802e874:	b003      	add	sp, #12
 802e876:	bd30      	pop	{r4, r5, pc}
 802e878:	2001b7fc 	.word	0x2001b7fc
 802e87c:	00000000 	.word	0x00000000

0802e880 <cos>:
 802e880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802e882:	ec53 2b10 	vmov	r2, r3, d0
 802e886:	4824      	ldr	r0, [pc, #144]	; (802e918 <cos+0x98>)
 802e888:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802e88c:	4281      	cmp	r1, r0
 802e88e:	dc06      	bgt.n	802e89e <cos+0x1e>
 802e890:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 802e910 <cos+0x90>
 802e894:	f000 ff5c 	bl	802f750 <__kernel_cos>
 802e898:	ec51 0b10 	vmov	r0, r1, d0
 802e89c:	e007      	b.n	802e8ae <cos+0x2e>
 802e89e:	481f      	ldr	r0, [pc, #124]	; (802e91c <cos+0x9c>)
 802e8a0:	4281      	cmp	r1, r0
 802e8a2:	dd09      	ble.n	802e8b8 <cos+0x38>
 802e8a4:	ee10 0a10 	vmov	r0, s0
 802e8a8:	4619      	mov	r1, r3
 802e8aa:	f7d1 fcdf 	bl	800026c <__aeabi_dsub>
 802e8ae:	ec41 0b10 	vmov	d0, r0, r1
 802e8b2:	b005      	add	sp, #20
 802e8b4:	f85d fb04 	ldr.w	pc, [sp], #4
 802e8b8:	4668      	mov	r0, sp
 802e8ba:	f000 fc89 	bl	802f1d0 <__ieee754_rem_pio2>
 802e8be:	f000 0003 	and.w	r0, r0, #3
 802e8c2:	2801      	cmp	r0, #1
 802e8c4:	d007      	beq.n	802e8d6 <cos+0x56>
 802e8c6:	2802      	cmp	r0, #2
 802e8c8:	d012      	beq.n	802e8f0 <cos+0x70>
 802e8ca:	b9c0      	cbnz	r0, 802e8fe <cos+0x7e>
 802e8cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 802e8d0:	ed9d 0b00 	vldr	d0, [sp]
 802e8d4:	e7de      	b.n	802e894 <cos+0x14>
 802e8d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 802e8da:	ed9d 0b00 	vldr	d0, [sp]
 802e8de:	f001 fb3f 	bl	802ff60 <__kernel_sin>
 802e8e2:	ec53 2b10 	vmov	r2, r3, d0
 802e8e6:	ee10 0a10 	vmov	r0, s0
 802e8ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802e8ee:	e7de      	b.n	802e8ae <cos+0x2e>
 802e8f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 802e8f4:	ed9d 0b00 	vldr	d0, [sp]
 802e8f8:	f000 ff2a 	bl	802f750 <__kernel_cos>
 802e8fc:	e7f1      	b.n	802e8e2 <cos+0x62>
 802e8fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 802e902:	ed9d 0b00 	vldr	d0, [sp]
 802e906:	2001      	movs	r0, #1
 802e908:	f001 fb2a 	bl	802ff60 <__kernel_sin>
 802e90c:	e7c4      	b.n	802e898 <cos+0x18>
 802e90e:	bf00      	nop
	...
 802e918:	3fe921fb 	.word	0x3fe921fb
 802e91c:	7fefffff 	.word	0x7fefffff

0802e920 <fmax>:
 802e920:	b508      	push	{r3, lr}
 802e922:	ed2d 8b04 	vpush	{d8-d9}
 802e926:	eeb0 8a40 	vmov.f32	s16, s0
 802e92a:	eef0 8a60 	vmov.f32	s17, s1
 802e92e:	eeb0 9a41 	vmov.f32	s18, s2
 802e932:	eef0 9a61 	vmov.f32	s19, s3
 802e936:	f000 f81b 	bl	802e970 <__fpclassifyd>
 802e93a:	b168      	cbz	r0, 802e958 <fmax+0x38>
 802e93c:	eeb0 0a49 	vmov.f32	s0, s18
 802e940:	eef0 0a69 	vmov.f32	s1, s19
 802e944:	f000 f814 	bl	802e970 <__fpclassifyd>
 802e948:	b150      	cbz	r0, 802e960 <fmax+0x40>
 802e94a:	ec53 2b19 	vmov	r2, r3, d9
 802e94e:	ec51 0b18 	vmov	r0, r1, d8
 802e952:	f7d2 f8d3 	bl	8000afc <__aeabi_dcmpgt>
 802e956:	b918      	cbnz	r0, 802e960 <fmax+0x40>
 802e958:	eeb0 8a49 	vmov.f32	s16, s18
 802e95c:	eef0 8a69 	vmov.f32	s17, s19
 802e960:	eeb0 0a48 	vmov.f32	s0, s16
 802e964:	eef0 0a68 	vmov.f32	s1, s17
 802e968:	ecbd 8b04 	vpop	{d8-d9}
 802e96c:	bd08      	pop	{r3, pc}
	...

0802e970 <__fpclassifyd>:
 802e970:	ec51 0b10 	vmov	r0, r1, d0
 802e974:	b510      	push	{r4, lr}
 802e976:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 802e97a:	460b      	mov	r3, r1
 802e97c:	d019      	beq.n	802e9b2 <__fpclassifyd+0x42>
 802e97e:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 802e982:	490e      	ldr	r1, [pc, #56]	; (802e9bc <__fpclassifyd+0x4c>)
 802e984:	428a      	cmp	r2, r1
 802e986:	d90e      	bls.n	802e9a6 <__fpclassifyd+0x36>
 802e988:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 802e98c:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 802e990:	428a      	cmp	r2, r1
 802e992:	d908      	bls.n	802e9a6 <__fpclassifyd+0x36>
 802e994:	4a0a      	ldr	r2, [pc, #40]	; (802e9c0 <__fpclassifyd+0x50>)
 802e996:	4213      	tst	r3, r2
 802e998:	d007      	beq.n	802e9aa <__fpclassifyd+0x3a>
 802e99a:	4294      	cmp	r4, r2
 802e99c:	d107      	bne.n	802e9ae <__fpclassifyd+0x3e>
 802e99e:	fab0 f080 	clz	r0, r0
 802e9a2:	0940      	lsrs	r0, r0, #5
 802e9a4:	bd10      	pop	{r4, pc}
 802e9a6:	2004      	movs	r0, #4
 802e9a8:	e7fc      	b.n	802e9a4 <__fpclassifyd+0x34>
 802e9aa:	2003      	movs	r0, #3
 802e9ac:	e7fa      	b.n	802e9a4 <__fpclassifyd+0x34>
 802e9ae:	2000      	movs	r0, #0
 802e9b0:	e7f8      	b.n	802e9a4 <__fpclassifyd+0x34>
 802e9b2:	2800      	cmp	r0, #0
 802e9b4:	d1ee      	bne.n	802e994 <__fpclassifyd+0x24>
 802e9b6:	2002      	movs	r0, #2
 802e9b8:	e7f4      	b.n	802e9a4 <__fpclassifyd+0x34>
 802e9ba:	bf00      	nop
 802e9bc:	7fdfffff 	.word	0x7fdfffff
 802e9c0:	7ff00000 	.word	0x7ff00000
 802e9c4:	00000000 	.word	0x00000000

0802e9c8 <exp>:
 802e9c8:	b538      	push	{r3, r4, r5, lr}
 802e9ca:	ed2d 8b02 	vpush	{d8}
 802e9ce:	ec55 4b10 	vmov	r4, r5, d0
 802e9d2:	f000 f8c5 	bl	802eb60 <__ieee754_exp>
 802e9d6:	4b22      	ldr	r3, [pc, #136]	; (802ea60 <exp+0x98>)
 802e9d8:	eeb0 8a40 	vmov.f32	s16, s0
 802e9dc:	eef0 8a60 	vmov.f32	s17, s1
 802e9e0:	f993 3000 	ldrsb.w	r3, [r3]
 802e9e4:	3301      	adds	r3, #1
 802e9e6:	d012      	beq.n	802ea0e <exp+0x46>
 802e9e8:	ec45 4b10 	vmov	d0, r4, r5
 802e9ec:	f001 fb7f 	bl	80300ee <finite>
 802e9f0:	b168      	cbz	r0, 802ea0e <exp+0x46>
 802e9f2:	a313      	add	r3, pc, #76	; (adr r3, 802ea40 <exp+0x78>)
 802e9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e9f8:	4620      	mov	r0, r4
 802e9fa:	4629      	mov	r1, r5
 802e9fc:	f7d2 f87e 	bl	8000afc <__aeabi_dcmpgt>
 802ea00:	b160      	cbz	r0, 802ea1c <exp+0x54>
 802ea02:	f7ff fe25 	bl	802e650 <__errno>
 802ea06:	ed9f 8b10 	vldr	d8, [pc, #64]	; 802ea48 <exp+0x80>
 802ea0a:	2322      	movs	r3, #34	; 0x22
 802ea0c:	6003      	str	r3, [r0, #0]
 802ea0e:	eeb0 0a48 	vmov.f32	s0, s16
 802ea12:	eef0 0a68 	vmov.f32	s1, s17
 802ea16:	ecbd 8b02 	vpop	{d8}
 802ea1a:	bd38      	pop	{r3, r4, r5, pc}
 802ea1c:	a30c      	add	r3, pc, #48	; (adr r3, 802ea50 <exp+0x88>)
 802ea1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ea22:	4620      	mov	r0, r4
 802ea24:	4629      	mov	r1, r5
 802ea26:	f7d2 f84b 	bl	8000ac0 <__aeabi_dcmplt>
 802ea2a:	2800      	cmp	r0, #0
 802ea2c:	d0ef      	beq.n	802ea0e <exp+0x46>
 802ea2e:	f7ff fe0f 	bl	802e650 <__errno>
 802ea32:	2322      	movs	r3, #34	; 0x22
 802ea34:	ed9f 8b08 	vldr	d8, [pc, #32]	; 802ea58 <exp+0x90>
 802ea38:	6003      	str	r3, [r0, #0]
 802ea3a:	e7e8      	b.n	802ea0e <exp+0x46>
 802ea3c:	f3af 8000 	nop.w
 802ea40:	fefa39ef 	.word	0xfefa39ef
 802ea44:	40862e42 	.word	0x40862e42
 802ea48:	00000000 	.word	0x00000000
 802ea4c:	7ff00000 	.word	0x7ff00000
 802ea50:	d52d3051 	.word	0xd52d3051
 802ea54:	c0874910 	.word	0xc0874910
	...
 802ea60:	200014a8 	.word	0x200014a8
 802ea64:	00000000 	.word	0x00000000

0802ea68 <log>:
 802ea68:	b538      	push	{r3, r4, r5, lr}
 802ea6a:	ed2d 8b02 	vpush	{d8}
 802ea6e:	ec55 4b10 	vmov	r4, r5, d0
 802ea72:	f000 f9f1 	bl	802ee58 <__ieee754_log>
 802ea76:	4b1e      	ldr	r3, [pc, #120]	; (802eaf0 <log+0x88>)
 802ea78:	eeb0 8a40 	vmov.f32	s16, s0
 802ea7c:	eef0 8a60 	vmov.f32	s17, s1
 802ea80:	f993 3000 	ldrsb.w	r3, [r3]
 802ea84:	3301      	adds	r3, #1
 802ea86:	d01a      	beq.n	802eabe <log+0x56>
 802ea88:	4622      	mov	r2, r4
 802ea8a:	462b      	mov	r3, r5
 802ea8c:	4620      	mov	r0, r4
 802ea8e:	4629      	mov	r1, r5
 802ea90:	f7d2 f83e 	bl	8000b10 <__aeabi_dcmpun>
 802ea94:	b998      	cbnz	r0, 802eabe <log+0x56>
 802ea96:	2200      	movs	r2, #0
 802ea98:	2300      	movs	r3, #0
 802ea9a:	4620      	mov	r0, r4
 802ea9c:	4629      	mov	r1, r5
 802ea9e:	f7d2 f82d 	bl	8000afc <__aeabi_dcmpgt>
 802eaa2:	b960      	cbnz	r0, 802eabe <log+0x56>
 802eaa4:	2200      	movs	r2, #0
 802eaa6:	2300      	movs	r3, #0
 802eaa8:	4620      	mov	r0, r4
 802eaaa:	4629      	mov	r1, r5
 802eaac:	f7d1 fffe 	bl	8000aac <__aeabi_dcmpeq>
 802eab0:	b160      	cbz	r0, 802eacc <log+0x64>
 802eab2:	f7ff fdcd 	bl	802e650 <__errno>
 802eab6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 802eae8 <log+0x80>
 802eaba:	2322      	movs	r3, #34	; 0x22
 802eabc:	6003      	str	r3, [r0, #0]
 802eabe:	eeb0 0a48 	vmov.f32	s0, s16
 802eac2:	eef0 0a68 	vmov.f32	s1, s17
 802eac6:	ecbd 8b02 	vpop	{d8}
 802eaca:	bd38      	pop	{r3, r4, r5, pc}
 802eacc:	f7ff fdc0 	bl	802e650 <__errno>
 802ead0:	ecbd 8b02 	vpop	{d8}
 802ead4:	2321      	movs	r3, #33	; 0x21
 802ead6:	6003      	str	r3, [r0, #0]
 802ead8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802eadc:	4805      	ldr	r0, [pc, #20]	; (802eaf4 <log+0x8c>)
 802eade:	f001 bb93 	b.w	8030208 <nan>
 802eae2:	bf00      	nop
 802eae4:	f3af 8000 	nop.w
 802eae8:	00000000 	.word	0x00000000
 802eaec:	fff00000 	.word	0xfff00000
 802eaf0:	200014a8 	.word	0x200014a8
 802eaf4:	08030ae4 	.word	0x08030ae4

0802eaf8 <sqrt>:
 802eaf8:	b538      	push	{r3, r4, r5, lr}
 802eafa:	ed2d 8b02 	vpush	{d8}
 802eafe:	ec55 4b10 	vmov	r4, r5, d0
 802eb02:	f000 fd6f 	bl	802f5e4 <__ieee754_sqrt>
 802eb06:	4b15      	ldr	r3, [pc, #84]	; (802eb5c <sqrt+0x64>)
 802eb08:	eeb0 8a40 	vmov.f32	s16, s0
 802eb0c:	eef0 8a60 	vmov.f32	s17, s1
 802eb10:	f993 3000 	ldrsb.w	r3, [r3]
 802eb14:	3301      	adds	r3, #1
 802eb16:	d019      	beq.n	802eb4c <sqrt+0x54>
 802eb18:	4622      	mov	r2, r4
 802eb1a:	462b      	mov	r3, r5
 802eb1c:	4620      	mov	r0, r4
 802eb1e:	4629      	mov	r1, r5
 802eb20:	f7d1 fff6 	bl	8000b10 <__aeabi_dcmpun>
 802eb24:	b990      	cbnz	r0, 802eb4c <sqrt+0x54>
 802eb26:	2200      	movs	r2, #0
 802eb28:	2300      	movs	r3, #0
 802eb2a:	4620      	mov	r0, r4
 802eb2c:	4629      	mov	r1, r5
 802eb2e:	f7d1 ffc7 	bl	8000ac0 <__aeabi_dcmplt>
 802eb32:	b158      	cbz	r0, 802eb4c <sqrt+0x54>
 802eb34:	f7ff fd8c 	bl	802e650 <__errno>
 802eb38:	2321      	movs	r3, #33	; 0x21
 802eb3a:	6003      	str	r3, [r0, #0]
 802eb3c:	2200      	movs	r2, #0
 802eb3e:	2300      	movs	r3, #0
 802eb40:	4610      	mov	r0, r2
 802eb42:	4619      	mov	r1, r3
 802eb44:	f7d1 fe74 	bl	8000830 <__aeabi_ddiv>
 802eb48:	ec41 0b18 	vmov	d8, r0, r1
 802eb4c:	eeb0 0a48 	vmov.f32	s0, s16
 802eb50:	eef0 0a68 	vmov.f32	s1, s17
 802eb54:	ecbd 8b02 	vpop	{d8}
 802eb58:	bd38      	pop	{r3, r4, r5, pc}
 802eb5a:	bf00      	nop
 802eb5c:	200014a8 	.word	0x200014a8

0802eb60 <__ieee754_exp>:
 802eb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802eb64:	ec55 4b10 	vmov	r4, r5, d0
 802eb68:	49b1      	ldr	r1, [pc, #708]	; (802ee30 <__ieee754_exp+0x2d0>)
 802eb6a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802eb6e:	428b      	cmp	r3, r1
 802eb70:	ed2d 8b04 	vpush	{d8-d9}
 802eb74:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 802eb78:	d937      	bls.n	802ebea <__ieee754_exp+0x8a>
 802eb7a:	49ae      	ldr	r1, [pc, #696]	; (802ee34 <__ieee754_exp+0x2d4>)
 802eb7c:	428b      	cmp	r3, r1
 802eb7e:	d916      	bls.n	802ebae <__ieee754_exp+0x4e>
 802eb80:	ee10 3a10 	vmov	r3, s0
 802eb84:	f3c5 0213 	ubfx	r2, r5, #0, #20
 802eb88:	4313      	orrs	r3, r2
 802eb8a:	d009      	beq.n	802eba0 <__ieee754_exp+0x40>
 802eb8c:	ee10 2a10 	vmov	r2, s0
 802eb90:	462b      	mov	r3, r5
 802eb92:	4620      	mov	r0, r4
 802eb94:	4629      	mov	r1, r5
 802eb96:	f7d1 fb6b 	bl	8000270 <__adddf3>
 802eb9a:	4604      	mov	r4, r0
 802eb9c:	460d      	mov	r5, r1
 802eb9e:	e000      	b.n	802eba2 <__ieee754_exp+0x42>
 802eba0:	bb06      	cbnz	r6, 802ebe4 <__ieee754_exp+0x84>
 802eba2:	ecbd 8b04 	vpop	{d8-d9}
 802eba6:	ec45 4b10 	vmov	d0, r4, r5
 802ebaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ebae:	a38a      	add	r3, pc, #552	; (adr r3, 802edd8 <__ieee754_exp+0x278>)
 802ebb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ebb4:	ee10 0a10 	vmov	r0, s0
 802ebb8:	4629      	mov	r1, r5
 802ebba:	f7d1 ff9f 	bl	8000afc <__aeabi_dcmpgt>
 802ebbe:	b138      	cbz	r0, 802ebd0 <__ieee754_exp+0x70>
 802ebc0:	a387      	add	r3, pc, #540	; (adr r3, 802ede0 <__ieee754_exp+0x280>)
 802ebc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ebc6:	4610      	mov	r0, r2
 802ebc8:	4619      	mov	r1, r3
 802ebca:	f7d1 fd07 	bl	80005dc <__aeabi_dmul>
 802ebce:	e7e4      	b.n	802eb9a <__ieee754_exp+0x3a>
 802ebd0:	a385      	add	r3, pc, #532	; (adr r3, 802ede8 <__ieee754_exp+0x288>)
 802ebd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ebd6:	4620      	mov	r0, r4
 802ebd8:	4629      	mov	r1, r5
 802ebda:	f7d1 ff71 	bl	8000ac0 <__aeabi_dcmplt>
 802ebde:	2800      	cmp	r0, #0
 802ebe0:	f000 8087 	beq.w	802ecf2 <__ieee754_exp+0x192>
 802ebe4:	2400      	movs	r4, #0
 802ebe6:	2500      	movs	r5, #0
 802ebe8:	e7db      	b.n	802eba2 <__ieee754_exp+0x42>
 802ebea:	4a93      	ldr	r2, [pc, #588]	; (802ee38 <__ieee754_exp+0x2d8>)
 802ebec:	4293      	cmp	r3, r2
 802ebee:	f240 80ac 	bls.w	802ed4a <__ieee754_exp+0x1ea>
 802ebf2:	4a92      	ldr	r2, [pc, #584]	; (802ee3c <__ieee754_exp+0x2dc>)
 802ebf4:	4293      	cmp	r3, r2
 802ebf6:	d87c      	bhi.n	802ecf2 <__ieee754_exp+0x192>
 802ebf8:	4b91      	ldr	r3, [pc, #580]	; (802ee40 <__ieee754_exp+0x2e0>)
 802ebfa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802ebfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec02:	ee10 0a10 	vmov	r0, s0
 802ec06:	4629      	mov	r1, r5
 802ec08:	f7d1 fb30 	bl	800026c <__aeabi_dsub>
 802ec0c:	4b8d      	ldr	r3, [pc, #564]	; (802ee44 <__ieee754_exp+0x2e4>)
 802ec0e:	00f7      	lsls	r7, r6, #3
 802ec10:	443b      	add	r3, r7
 802ec12:	ed93 7b00 	vldr	d7, [r3]
 802ec16:	f1c6 0a01 	rsb	sl, r6, #1
 802ec1a:	4680      	mov	r8, r0
 802ec1c:	4689      	mov	r9, r1
 802ec1e:	ebaa 0a06 	sub.w	sl, sl, r6
 802ec22:	eeb0 8a47 	vmov.f32	s16, s14
 802ec26:	eef0 8a67 	vmov.f32	s17, s15
 802ec2a:	ec53 2b18 	vmov	r2, r3, d8
 802ec2e:	4640      	mov	r0, r8
 802ec30:	4649      	mov	r1, r9
 802ec32:	f7d1 fb1b 	bl	800026c <__aeabi_dsub>
 802ec36:	4604      	mov	r4, r0
 802ec38:	460d      	mov	r5, r1
 802ec3a:	4622      	mov	r2, r4
 802ec3c:	462b      	mov	r3, r5
 802ec3e:	4620      	mov	r0, r4
 802ec40:	4629      	mov	r1, r5
 802ec42:	f7d1 fccb 	bl	80005dc <__aeabi_dmul>
 802ec46:	a36a      	add	r3, pc, #424	; (adr r3, 802edf0 <__ieee754_exp+0x290>)
 802ec48:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec4c:	4606      	mov	r6, r0
 802ec4e:	460f      	mov	r7, r1
 802ec50:	f7d1 fcc4 	bl	80005dc <__aeabi_dmul>
 802ec54:	a368      	add	r3, pc, #416	; (adr r3, 802edf8 <__ieee754_exp+0x298>)
 802ec56:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec5a:	f7d1 fb07 	bl	800026c <__aeabi_dsub>
 802ec5e:	4632      	mov	r2, r6
 802ec60:	463b      	mov	r3, r7
 802ec62:	f7d1 fcbb 	bl	80005dc <__aeabi_dmul>
 802ec66:	a366      	add	r3, pc, #408	; (adr r3, 802ee00 <__ieee754_exp+0x2a0>)
 802ec68:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec6c:	f7d1 fb00 	bl	8000270 <__adddf3>
 802ec70:	4632      	mov	r2, r6
 802ec72:	463b      	mov	r3, r7
 802ec74:	f7d1 fcb2 	bl	80005dc <__aeabi_dmul>
 802ec78:	a363      	add	r3, pc, #396	; (adr r3, 802ee08 <__ieee754_exp+0x2a8>)
 802ec7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec7e:	f7d1 faf5 	bl	800026c <__aeabi_dsub>
 802ec82:	4632      	mov	r2, r6
 802ec84:	463b      	mov	r3, r7
 802ec86:	f7d1 fca9 	bl	80005dc <__aeabi_dmul>
 802ec8a:	a361      	add	r3, pc, #388	; (adr r3, 802ee10 <__ieee754_exp+0x2b0>)
 802ec8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec90:	f7d1 faee 	bl	8000270 <__adddf3>
 802ec94:	4632      	mov	r2, r6
 802ec96:	463b      	mov	r3, r7
 802ec98:	f7d1 fca0 	bl	80005dc <__aeabi_dmul>
 802ec9c:	4602      	mov	r2, r0
 802ec9e:	460b      	mov	r3, r1
 802eca0:	4620      	mov	r0, r4
 802eca2:	4629      	mov	r1, r5
 802eca4:	f7d1 fae2 	bl	800026c <__aeabi_dsub>
 802eca8:	4602      	mov	r2, r0
 802ecaa:	460b      	mov	r3, r1
 802ecac:	4606      	mov	r6, r0
 802ecae:	460f      	mov	r7, r1
 802ecb0:	4620      	mov	r0, r4
 802ecb2:	4629      	mov	r1, r5
 802ecb4:	f7d1 fc92 	bl	80005dc <__aeabi_dmul>
 802ecb8:	ec41 0b19 	vmov	d9, r0, r1
 802ecbc:	f1ba 0f00 	cmp.w	sl, #0
 802ecc0:	d15d      	bne.n	802ed7e <__ieee754_exp+0x21e>
 802ecc2:	2200      	movs	r2, #0
 802ecc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802ecc8:	4630      	mov	r0, r6
 802ecca:	4639      	mov	r1, r7
 802eccc:	f7d1 face 	bl	800026c <__aeabi_dsub>
 802ecd0:	4602      	mov	r2, r0
 802ecd2:	460b      	mov	r3, r1
 802ecd4:	ec51 0b19 	vmov	r0, r1, d9
 802ecd8:	f7d1 fdaa 	bl	8000830 <__aeabi_ddiv>
 802ecdc:	4622      	mov	r2, r4
 802ecde:	462b      	mov	r3, r5
 802ece0:	f7d1 fac4 	bl	800026c <__aeabi_dsub>
 802ece4:	4602      	mov	r2, r0
 802ece6:	460b      	mov	r3, r1
 802ece8:	2000      	movs	r0, #0
 802ecea:	4957      	ldr	r1, [pc, #348]	; (802ee48 <__ieee754_exp+0x2e8>)
 802ecec:	f7d1 fabe 	bl	800026c <__aeabi_dsub>
 802ecf0:	e753      	b.n	802eb9a <__ieee754_exp+0x3a>
 802ecf2:	4856      	ldr	r0, [pc, #344]	; (802ee4c <__ieee754_exp+0x2ec>)
 802ecf4:	a348      	add	r3, pc, #288	; (adr r3, 802ee18 <__ieee754_exp+0x2b8>)
 802ecf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ecfa:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 802ecfe:	4629      	mov	r1, r5
 802ed00:	4620      	mov	r0, r4
 802ed02:	f7d1 fc6b 	bl	80005dc <__aeabi_dmul>
 802ed06:	e9d6 2300 	ldrd	r2, r3, [r6]
 802ed0a:	f7d1 fab1 	bl	8000270 <__adddf3>
 802ed0e:	f7d1 ff15 	bl	8000b3c <__aeabi_d2iz>
 802ed12:	4682      	mov	sl, r0
 802ed14:	f7d1 fbf8 	bl	8000508 <__aeabi_i2d>
 802ed18:	a341      	add	r3, pc, #260	; (adr r3, 802ee20 <__ieee754_exp+0x2c0>)
 802ed1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ed1e:	4606      	mov	r6, r0
 802ed20:	460f      	mov	r7, r1
 802ed22:	f7d1 fc5b 	bl	80005dc <__aeabi_dmul>
 802ed26:	4602      	mov	r2, r0
 802ed28:	460b      	mov	r3, r1
 802ed2a:	4620      	mov	r0, r4
 802ed2c:	4629      	mov	r1, r5
 802ed2e:	f7d1 fa9d 	bl	800026c <__aeabi_dsub>
 802ed32:	a33d      	add	r3, pc, #244	; (adr r3, 802ee28 <__ieee754_exp+0x2c8>)
 802ed34:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ed38:	4680      	mov	r8, r0
 802ed3a:	4689      	mov	r9, r1
 802ed3c:	4630      	mov	r0, r6
 802ed3e:	4639      	mov	r1, r7
 802ed40:	f7d1 fc4c 	bl	80005dc <__aeabi_dmul>
 802ed44:	ec41 0b18 	vmov	d8, r0, r1
 802ed48:	e76f      	b.n	802ec2a <__ieee754_exp+0xca>
 802ed4a:	4a41      	ldr	r2, [pc, #260]	; (802ee50 <__ieee754_exp+0x2f0>)
 802ed4c:	4293      	cmp	r3, r2
 802ed4e:	d811      	bhi.n	802ed74 <__ieee754_exp+0x214>
 802ed50:	a323      	add	r3, pc, #140	; (adr r3, 802ede0 <__ieee754_exp+0x280>)
 802ed52:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ed56:	ee10 0a10 	vmov	r0, s0
 802ed5a:	4629      	mov	r1, r5
 802ed5c:	f7d1 fa88 	bl	8000270 <__adddf3>
 802ed60:	4b39      	ldr	r3, [pc, #228]	; (802ee48 <__ieee754_exp+0x2e8>)
 802ed62:	2200      	movs	r2, #0
 802ed64:	f7d1 feca 	bl	8000afc <__aeabi_dcmpgt>
 802ed68:	b138      	cbz	r0, 802ed7a <__ieee754_exp+0x21a>
 802ed6a:	4b37      	ldr	r3, [pc, #220]	; (802ee48 <__ieee754_exp+0x2e8>)
 802ed6c:	2200      	movs	r2, #0
 802ed6e:	4620      	mov	r0, r4
 802ed70:	4629      	mov	r1, r5
 802ed72:	e710      	b.n	802eb96 <__ieee754_exp+0x36>
 802ed74:	f04f 0a00 	mov.w	sl, #0
 802ed78:	e75f      	b.n	802ec3a <__ieee754_exp+0xda>
 802ed7a:	4682      	mov	sl, r0
 802ed7c:	e75d      	b.n	802ec3a <__ieee754_exp+0xda>
 802ed7e:	4632      	mov	r2, r6
 802ed80:	463b      	mov	r3, r7
 802ed82:	2000      	movs	r0, #0
 802ed84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 802ed88:	f7d1 fa70 	bl	800026c <__aeabi_dsub>
 802ed8c:	4602      	mov	r2, r0
 802ed8e:	460b      	mov	r3, r1
 802ed90:	ec51 0b19 	vmov	r0, r1, d9
 802ed94:	f7d1 fd4c 	bl	8000830 <__aeabi_ddiv>
 802ed98:	4602      	mov	r2, r0
 802ed9a:	460b      	mov	r3, r1
 802ed9c:	ec51 0b18 	vmov	r0, r1, d8
 802eda0:	f7d1 fa64 	bl	800026c <__aeabi_dsub>
 802eda4:	4642      	mov	r2, r8
 802eda6:	464b      	mov	r3, r9
 802eda8:	f7d1 fa60 	bl	800026c <__aeabi_dsub>
 802edac:	4602      	mov	r2, r0
 802edae:	460b      	mov	r3, r1
 802edb0:	2000      	movs	r0, #0
 802edb2:	4925      	ldr	r1, [pc, #148]	; (802ee48 <__ieee754_exp+0x2e8>)
 802edb4:	f7d1 fa5a 	bl	800026c <__aeabi_dsub>
 802edb8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 802edbc:	4592      	cmp	sl, r2
 802edbe:	db02      	blt.n	802edc6 <__ieee754_exp+0x266>
 802edc0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 802edc4:	e6e9      	b.n	802eb9a <__ieee754_exp+0x3a>
 802edc6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 802edca:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 802edce:	2200      	movs	r2, #0
 802edd0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 802edd4:	e6f9      	b.n	802ebca <__ieee754_exp+0x6a>
 802edd6:	bf00      	nop
 802edd8:	fefa39ef 	.word	0xfefa39ef
 802eddc:	40862e42 	.word	0x40862e42
 802ede0:	8800759c 	.word	0x8800759c
 802ede4:	7e37e43c 	.word	0x7e37e43c
 802ede8:	d52d3051 	.word	0xd52d3051
 802edec:	c0874910 	.word	0xc0874910
 802edf0:	72bea4d0 	.word	0x72bea4d0
 802edf4:	3e663769 	.word	0x3e663769
 802edf8:	c5d26bf1 	.word	0xc5d26bf1
 802edfc:	3ebbbd41 	.word	0x3ebbbd41
 802ee00:	af25de2c 	.word	0xaf25de2c
 802ee04:	3f11566a 	.word	0x3f11566a
 802ee08:	16bebd93 	.word	0x16bebd93
 802ee0c:	3f66c16c 	.word	0x3f66c16c
 802ee10:	5555553e 	.word	0x5555553e
 802ee14:	3fc55555 	.word	0x3fc55555
 802ee18:	652b82fe 	.word	0x652b82fe
 802ee1c:	3ff71547 	.word	0x3ff71547
 802ee20:	fee00000 	.word	0xfee00000
 802ee24:	3fe62e42 	.word	0x3fe62e42
 802ee28:	35793c76 	.word	0x35793c76
 802ee2c:	3dea39ef 	.word	0x3dea39ef
 802ee30:	40862e41 	.word	0x40862e41
 802ee34:	7fefffff 	.word	0x7fefffff
 802ee38:	3fd62e42 	.word	0x3fd62e42
 802ee3c:	3ff0a2b1 	.word	0x3ff0a2b1
 802ee40:	08030af8 	.word	0x08030af8
 802ee44:	08030b08 	.word	0x08030b08
 802ee48:	3ff00000 	.word	0x3ff00000
 802ee4c:	08030ae8 	.word	0x08030ae8
 802ee50:	3e2fffff 	.word	0x3e2fffff
 802ee54:	00000000 	.word	0x00000000

0802ee58 <__ieee754_log>:
 802ee58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ee5c:	ec51 0b10 	vmov	r0, r1, d0
 802ee60:	ed2d 8b04 	vpush	{d8-d9}
 802ee64:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 802ee68:	b083      	sub	sp, #12
 802ee6a:	460d      	mov	r5, r1
 802ee6c:	da29      	bge.n	802eec2 <__ieee754_log+0x6a>
 802ee6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802ee72:	4303      	orrs	r3, r0
 802ee74:	ee10 2a10 	vmov	r2, s0
 802ee78:	d10c      	bne.n	802ee94 <__ieee754_log+0x3c>
 802ee7a:	49cf      	ldr	r1, [pc, #828]	; (802f1b8 <__ieee754_log+0x360>)
 802ee7c:	2200      	movs	r2, #0
 802ee7e:	2300      	movs	r3, #0
 802ee80:	2000      	movs	r0, #0
 802ee82:	f7d1 fcd5 	bl	8000830 <__aeabi_ddiv>
 802ee86:	ec41 0b10 	vmov	d0, r0, r1
 802ee8a:	b003      	add	sp, #12
 802ee8c:	ecbd 8b04 	vpop	{d8-d9}
 802ee90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ee94:	2900      	cmp	r1, #0
 802ee96:	da05      	bge.n	802eea4 <__ieee754_log+0x4c>
 802ee98:	460b      	mov	r3, r1
 802ee9a:	f7d1 f9e7 	bl	800026c <__aeabi_dsub>
 802ee9e:	2200      	movs	r2, #0
 802eea0:	2300      	movs	r3, #0
 802eea2:	e7ee      	b.n	802ee82 <__ieee754_log+0x2a>
 802eea4:	4bc5      	ldr	r3, [pc, #788]	; (802f1bc <__ieee754_log+0x364>)
 802eea6:	2200      	movs	r2, #0
 802eea8:	f7d1 fb98 	bl	80005dc <__aeabi_dmul>
 802eeac:	f06f 0335 	mvn.w	r3, #53	; 0x35
 802eeb0:	460d      	mov	r5, r1
 802eeb2:	4ac3      	ldr	r2, [pc, #780]	; (802f1c0 <__ieee754_log+0x368>)
 802eeb4:	4295      	cmp	r5, r2
 802eeb6:	dd06      	ble.n	802eec6 <__ieee754_log+0x6e>
 802eeb8:	4602      	mov	r2, r0
 802eeba:	460b      	mov	r3, r1
 802eebc:	f7d1 f9d8 	bl	8000270 <__adddf3>
 802eec0:	e7e1      	b.n	802ee86 <__ieee754_log+0x2e>
 802eec2:	2300      	movs	r3, #0
 802eec4:	e7f5      	b.n	802eeb2 <__ieee754_log+0x5a>
 802eec6:	152c      	asrs	r4, r5, #20
 802eec8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 802eecc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 802eed0:	441c      	add	r4, r3
 802eed2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 802eed6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 802eeda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802eede:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 802eee2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 802eee6:	ea42 0105 	orr.w	r1, r2, r5
 802eeea:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 802eeee:	2200      	movs	r2, #0
 802eef0:	4bb4      	ldr	r3, [pc, #720]	; (802f1c4 <__ieee754_log+0x36c>)
 802eef2:	f7d1 f9bb 	bl	800026c <__aeabi_dsub>
 802eef6:	1cab      	adds	r3, r5, #2
 802eef8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802eefc:	2b02      	cmp	r3, #2
 802eefe:	4682      	mov	sl, r0
 802ef00:	468b      	mov	fp, r1
 802ef02:	f04f 0200 	mov.w	r2, #0
 802ef06:	dc53      	bgt.n	802efb0 <__ieee754_log+0x158>
 802ef08:	2300      	movs	r3, #0
 802ef0a:	f7d1 fdcf 	bl	8000aac <__aeabi_dcmpeq>
 802ef0e:	b1d0      	cbz	r0, 802ef46 <__ieee754_log+0xee>
 802ef10:	2c00      	cmp	r4, #0
 802ef12:	f000 8122 	beq.w	802f15a <__ieee754_log+0x302>
 802ef16:	4620      	mov	r0, r4
 802ef18:	f7d1 faf6 	bl	8000508 <__aeabi_i2d>
 802ef1c:	a390      	add	r3, pc, #576	; (adr r3, 802f160 <__ieee754_log+0x308>)
 802ef1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ef22:	4606      	mov	r6, r0
 802ef24:	460f      	mov	r7, r1
 802ef26:	f7d1 fb59 	bl	80005dc <__aeabi_dmul>
 802ef2a:	a38f      	add	r3, pc, #572	; (adr r3, 802f168 <__ieee754_log+0x310>)
 802ef2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ef30:	4604      	mov	r4, r0
 802ef32:	460d      	mov	r5, r1
 802ef34:	4630      	mov	r0, r6
 802ef36:	4639      	mov	r1, r7
 802ef38:	f7d1 fb50 	bl	80005dc <__aeabi_dmul>
 802ef3c:	4602      	mov	r2, r0
 802ef3e:	460b      	mov	r3, r1
 802ef40:	4620      	mov	r0, r4
 802ef42:	4629      	mov	r1, r5
 802ef44:	e7ba      	b.n	802eebc <__ieee754_log+0x64>
 802ef46:	a38a      	add	r3, pc, #552	; (adr r3, 802f170 <__ieee754_log+0x318>)
 802ef48:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ef4c:	4650      	mov	r0, sl
 802ef4e:	4659      	mov	r1, fp
 802ef50:	f7d1 fb44 	bl	80005dc <__aeabi_dmul>
 802ef54:	4602      	mov	r2, r0
 802ef56:	460b      	mov	r3, r1
 802ef58:	2000      	movs	r0, #0
 802ef5a:	499b      	ldr	r1, [pc, #620]	; (802f1c8 <__ieee754_log+0x370>)
 802ef5c:	f7d1 f986 	bl	800026c <__aeabi_dsub>
 802ef60:	4652      	mov	r2, sl
 802ef62:	4606      	mov	r6, r0
 802ef64:	460f      	mov	r7, r1
 802ef66:	465b      	mov	r3, fp
 802ef68:	4650      	mov	r0, sl
 802ef6a:	4659      	mov	r1, fp
 802ef6c:	f7d1 fb36 	bl	80005dc <__aeabi_dmul>
 802ef70:	4602      	mov	r2, r0
 802ef72:	460b      	mov	r3, r1
 802ef74:	4630      	mov	r0, r6
 802ef76:	4639      	mov	r1, r7
 802ef78:	f7d1 fb30 	bl	80005dc <__aeabi_dmul>
 802ef7c:	4606      	mov	r6, r0
 802ef7e:	460f      	mov	r7, r1
 802ef80:	b914      	cbnz	r4, 802ef88 <__ieee754_log+0x130>
 802ef82:	4632      	mov	r2, r6
 802ef84:	463b      	mov	r3, r7
 802ef86:	e0a2      	b.n	802f0ce <__ieee754_log+0x276>
 802ef88:	4620      	mov	r0, r4
 802ef8a:	f7d1 fabd 	bl	8000508 <__aeabi_i2d>
 802ef8e:	a374      	add	r3, pc, #464	; (adr r3, 802f160 <__ieee754_log+0x308>)
 802ef90:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ef94:	4680      	mov	r8, r0
 802ef96:	4689      	mov	r9, r1
 802ef98:	f7d1 fb20 	bl	80005dc <__aeabi_dmul>
 802ef9c:	a372      	add	r3, pc, #456	; (adr r3, 802f168 <__ieee754_log+0x310>)
 802ef9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802efa2:	4604      	mov	r4, r0
 802efa4:	460d      	mov	r5, r1
 802efa6:	4640      	mov	r0, r8
 802efa8:	4649      	mov	r1, r9
 802efaa:	f7d1 fb17 	bl	80005dc <__aeabi_dmul>
 802efae:	e0a7      	b.n	802f100 <__ieee754_log+0x2a8>
 802efb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802efb4:	f7d1 f95c 	bl	8000270 <__adddf3>
 802efb8:	4602      	mov	r2, r0
 802efba:	460b      	mov	r3, r1
 802efbc:	4650      	mov	r0, sl
 802efbe:	4659      	mov	r1, fp
 802efc0:	f7d1 fc36 	bl	8000830 <__aeabi_ddiv>
 802efc4:	ec41 0b18 	vmov	d8, r0, r1
 802efc8:	4620      	mov	r0, r4
 802efca:	f7d1 fa9d 	bl	8000508 <__aeabi_i2d>
 802efce:	ec53 2b18 	vmov	r2, r3, d8
 802efd2:	ec41 0b19 	vmov	d9, r0, r1
 802efd6:	ec51 0b18 	vmov	r0, r1, d8
 802efda:	f7d1 faff 	bl	80005dc <__aeabi_dmul>
 802efde:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 802efe2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 802efe6:	9301      	str	r3, [sp, #4]
 802efe8:	4602      	mov	r2, r0
 802efea:	460b      	mov	r3, r1
 802efec:	4680      	mov	r8, r0
 802efee:	4689      	mov	r9, r1
 802eff0:	f7d1 faf4 	bl	80005dc <__aeabi_dmul>
 802eff4:	a360      	add	r3, pc, #384	; (adr r3, 802f178 <__ieee754_log+0x320>)
 802eff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802effa:	4606      	mov	r6, r0
 802effc:	460f      	mov	r7, r1
 802effe:	f7d1 faed 	bl	80005dc <__aeabi_dmul>
 802f002:	a35f      	add	r3, pc, #380	; (adr r3, 802f180 <__ieee754_log+0x328>)
 802f004:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f008:	f7d1 f932 	bl	8000270 <__adddf3>
 802f00c:	4632      	mov	r2, r6
 802f00e:	463b      	mov	r3, r7
 802f010:	f7d1 fae4 	bl	80005dc <__aeabi_dmul>
 802f014:	a35c      	add	r3, pc, #368	; (adr r3, 802f188 <__ieee754_log+0x330>)
 802f016:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f01a:	f7d1 f929 	bl	8000270 <__adddf3>
 802f01e:	4632      	mov	r2, r6
 802f020:	463b      	mov	r3, r7
 802f022:	f7d1 fadb 	bl	80005dc <__aeabi_dmul>
 802f026:	a35a      	add	r3, pc, #360	; (adr r3, 802f190 <__ieee754_log+0x338>)
 802f028:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f02c:	f7d1 f920 	bl	8000270 <__adddf3>
 802f030:	4642      	mov	r2, r8
 802f032:	464b      	mov	r3, r9
 802f034:	f7d1 fad2 	bl	80005dc <__aeabi_dmul>
 802f038:	a357      	add	r3, pc, #348	; (adr r3, 802f198 <__ieee754_log+0x340>)
 802f03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f03e:	4680      	mov	r8, r0
 802f040:	4689      	mov	r9, r1
 802f042:	4630      	mov	r0, r6
 802f044:	4639      	mov	r1, r7
 802f046:	f7d1 fac9 	bl	80005dc <__aeabi_dmul>
 802f04a:	a355      	add	r3, pc, #340	; (adr r3, 802f1a0 <__ieee754_log+0x348>)
 802f04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f050:	f7d1 f90e 	bl	8000270 <__adddf3>
 802f054:	4632      	mov	r2, r6
 802f056:	463b      	mov	r3, r7
 802f058:	f7d1 fac0 	bl	80005dc <__aeabi_dmul>
 802f05c:	a352      	add	r3, pc, #328	; (adr r3, 802f1a8 <__ieee754_log+0x350>)
 802f05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f062:	f7d1 f905 	bl	8000270 <__adddf3>
 802f066:	4632      	mov	r2, r6
 802f068:	463b      	mov	r3, r7
 802f06a:	f7d1 fab7 	bl	80005dc <__aeabi_dmul>
 802f06e:	460b      	mov	r3, r1
 802f070:	4602      	mov	r2, r0
 802f072:	4649      	mov	r1, r9
 802f074:	4640      	mov	r0, r8
 802f076:	f7d1 f8fb 	bl	8000270 <__adddf3>
 802f07a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 802f07e:	9b01      	ldr	r3, [sp, #4]
 802f080:	3551      	adds	r5, #81	; 0x51
 802f082:	431d      	orrs	r5, r3
 802f084:	2d00      	cmp	r5, #0
 802f086:	4680      	mov	r8, r0
 802f088:	4689      	mov	r9, r1
 802f08a:	dd48      	ble.n	802f11e <__ieee754_log+0x2c6>
 802f08c:	4b4e      	ldr	r3, [pc, #312]	; (802f1c8 <__ieee754_log+0x370>)
 802f08e:	2200      	movs	r2, #0
 802f090:	4650      	mov	r0, sl
 802f092:	4659      	mov	r1, fp
 802f094:	f7d1 faa2 	bl	80005dc <__aeabi_dmul>
 802f098:	4652      	mov	r2, sl
 802f09a:	465b      	mov	r3, fp
 802f09c:	f7d1 fa9e 	bl	80005dc <__aeabi_dmul>
 802f0a0:	4602      	mov	r2, r0
 802f0a2:	460b      	mov	r3, r1
 802f0a4:	4606      	mov	r6, r0
 802f0a6:	460f      	mov	r7, r1
 802f0a8:	4640      	mov	r0, r8
 802f0aa:	4649      	mov	r1, r9
 802f0ac:	f7d1 f8e0 	bl	8000270 <__adddf3>
 802f0b0:	ec53 2b18 	vmov	r2, r3, d8
 802f0b4:	f7d1 fa92 	bl	80005dc <__aeabi_dmul>
 802f0b8:	4680      	mov	r8, r0
 802f0ba:	4689      	mov	r9, r1
 802f0bc:	b964      	cbnz	r4, 802f0d8 <__ieee754_log+0x280>
 802f0be:	4602      	mov	r2, r0
 802f0c0:	460b      	mov	r3, r1
 802f0c2:	4630      	mov	r0, r6
 802f0c4:	4639      	mov	r1, r7
 802f0c6:	f7d1 f8d1 	bl	800026c <__aeabi_dsub>
 802f0ca:	4602      	mov	r2, r0
 802f0cc:	460b      	mov	r3, r1
 802f0ce:	4650      	mov	r0, sl
 802f0d0:	4659      	mov	r1, fp
 802f0d2:	f7d1 f8cb 	bl	800026c <__aeabi_dsub>
 802f0d6:	e6d6      	b.n	802ee86 <__ieee754_log+0x2e>
 802f0d8:	a321      	add	r3, pc, #132	; (adr r3, 802f160 <__ieee754_log+0x308>)
 802f0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f0de:	ec51 0b19 	vmov	r0, r1, d9
 802f0e2:	f7d1 fa7b 	bl	80005dc <__aeabi_dmul>
 802f0e6:	a320      	add	r3, pc, #128	; (adr r3, 802f168 <__ieee754_log+0x310>)
 802f0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f0ec:	4604      	mov	r4, r0
 802f0ee:	460d      	mov	r5, r1
 802f0f0:	ec51 0b19 	vmov	r0, r1, d9
 802f0f4:	f7d1 fa72 	bl	80005dc <__aeabi_dmul>
 802f0f8:	4642      	mov	r2, r8
 802f0fa:	464b      	mov	r3, r9
 802f0fc:	f7d1 f8b8 	bl	8000270 <__adddf3>
 802f100:	4602      	mov	r2, r0
 802f102:	460b      	mov	r3, r1
 802f104:	4630      	mov	r0, r6
 802f106:	4639      	mov	r1, r7
 802f108:	f7d1 f8b0 	bl	800026c <__aeabi_dsub>
 802f10c:	4652      	mov	r2, sl
 802f10e:	465b      	mov	r3, fp
 802f110:	f7d1 f8ac 	bl	800026c <__aeabi_dsub>
 802f114:	4602      	mov	r2, r0
 802f116:	460b      	mov	r3, r1
 802f118:	4620      	mov	r0, r4
 802f11a:	4629      	mov	r1, r5
 802f11c:	e7d9      	b.n	802f0d2 <__ieee754_log+0x27a>
 802f11e:	4602      	mov	r2, r0
 802f120:	460b      	mov	r3, r1
 802f122:	4650      	mov	r0, sl
 802f124:	4659      	mov	r1, fp
 802f126:	f7d1 f8a1 	bl	800026c <__aeabi_dsub>
 802f12a:	ec53 2b18 	vmov	r2, r3, d8
 802f12e:	f7d1 fa55 	bl	80005dc <__aeabi_dmul>
 802f132:	4606      	mov	r6, r0
 802f134:	460f      	mov	r7, r1
 802f136:	2c00      	cmp	r4, #0
 802f138:	f43f af23 	beq.w	802ef82 <__ieee754_log+0x12a>
 802f13c:	a308      	add	r3, pc, #32	; (adr r3, 802f160 <__ieee754_log+0x308>)
 802f13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f142:	ec51 0b19 	vmov	r0, r1, d9
 802f146:	f7d1 fa49 	bl	80005dc <__aeabi_dmul>
 802f14a:	a307      	add	r3, pc, #28	; (adr r3, 802f168 <__ieee754_log+0x310>)
 802f14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f150:	4604      	mov	r4, r0
 802f152:	460d      	mov	r5, r1
 802f154:	ec51 0b19 	vmov	r0, r1, d9
 802f158:	e727      	b.n	802efaa <__ieee754_log+0x152>
 802f15a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 802f1b0 <__ieee754_log+0x358>
 802f15e:	e694      	b.n	802ee8a <__ieee754_log+0x32>
 802f160:	fee00000 	.word	0xfee00000
 802f164:	3fe62e42 	.word	0x3fe62e42
 802f168:	35793c76 	.word	0x35793c76
 802f16c:	3dea39ef 	.word	0x3dea39ef
 802f170:	55555555 	.word	0x55555555
 802f174:	3fd55555 	.word	0x3fd55555
 802f178:	df3e5244 	.word	0xdf3e5244
 802f17c:	3fc2f112 	.word	0x3fc2f112
 802f180:	96cb03de 	.word	0x96cb03de
 802f184:	3fc74664 	.word	0x3fc74664
 802f188:	94229359 	.word	0x94229359
 802f18c:	3fd24924 	.word	0x3fd24924
 802f190:	55555593 	.word	0x55555593
 802f194:	3fe55555 	.word	0x3fe55555
 802f198:	d078c69f 	.word	0xd078c69f
 802f19c:	3fc39a09 	.word	0x3fc39a09
 802f1a0:	1d8e78af 	.word	0x1d8e78af
 802f1a4:	3fcc71c5 	.word	0x3fcc71c5
 802f1a8:	9997fa04 	.word	0x9997fa04
 802f1ac:	3fd99999 	.word	0x3fd99999
	...
 802f1b8:	c3500000 	.word	0xc3500000
 802f1bc:	43500000 	.word	0x43500000
 802f1c0:	7fefffff 	.word	0x7fefffff
 802f1c4:	3ff00000 	.word	0x3ff00000
 802f1c8:	3fe00000 	.word	0x3fe00000
 802f1cc:	00000000 	.word	0x00000000

0802f1d0 <__ieee754_rem_pio2>:
 802f1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f1d4:	ed2d 8b02 	vpush	{d8}
 802f1d8:	ec55 4b10 	vmov	r4, r5, d0
 802f1dc:	4bca      	ldr	r3, [pc, #808]	; (802f508 <__ieee754_rem_pio2+0x338>)
 802f1de:	b08b      	sub	sp, #44	; 0x2c
 802f1e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 802f1e4:	4598      	cmp	r8, r3
 802f1e6:	4682      	mov	sl, r0
 802f1e8:	9502      	str	r5, [sp, #8]
 802f1ea:	dc08      	bgt.n	802f1fe <__ieee754_rem_pio2+0x2e>
 802f1ec:	2200      	movs	r2, #0
 802f1ee:	2300      	movs	r3, #0
 802f1f0:	ed80 0b00 	vstr	d0, [r0]
 802f1f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 802f1f8:	f04f 0b00 	mov.w	fp, #0
 802f1fc:	e028      	b.n	802f250 <__ieee754_rem_pio2+0x80>
 802f1fe:	4bc3      	ldr	r3, [pc, #780]	; (802f50c <__ieee754_rem_pio2+0x33c>)
 802f200:	4598      	cmp	r8, r3
 802f202:	dc78      	bgt.n	802f2f6 <__ieee754_rem_pio2+0x126>
 802f204:	9b02      	ldr	r3, [sp, #8]
 802f206:	4ec2      	ldr	r6, [pc, #776]	; (802f510 <__ieee754_rem_pio2+0x340>)
 802f208:	2b00      	cmp	r3, #0
 802f20a:	ee10 0a10 	vmov	r0, s0
 802f20e:	a3b0      	add	r3, pc, #704	; (adr r3, 802f4d0 <__ieee754_rem_pio2+0x300>)
 802f210:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f214:	4629      	mov	r1, r5
 802f216:	dd39      	ble.n	802f28c <__ieee754_rem_pio2+0xbc>
 802f218:	f7d1 f828 	bl	800026c <__aeabi_dsub>
 802f21c:	45b0      	cmp	r8, r6
 802f21e:	4604      	mov	r4, r0
 802f220:	460d      	mov	r5, r1
 802f222:	d01b      	beq.n	802f25c <__ieee754_rem_pio2+0x8c>
 802f224:	a3ac      	add	r3, pc, #688	; (adr r3, 802f4d8 <__ieee754_rem_pio2+0x308>)
 802f226:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f22a:	f7d1 f81f 	bl	800026c <__aeabi_dsub>
 802f22e:	4602      	mov	r2, r0
 802f230:	460b      	mov	r3, r1
 802f232:	e9ca 2300 	strd	r2, r3, [sl]
 802f236:	4620      	mov	r0, r4
 802f238:	4629      	mov	r1, r5
 802f23a:	f7d1 f817 	bl	800026c <__aeabi_dsub>
 802f23e:	a3a6      	add	r3, pc, #664	; (adr r3, 802f4d8 <__ieee754_rem_pio2+0x308>)
 802f240:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f244:	f7d1 f812 	bl	800026c <__aeabi_dsub>
 802f248:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802f24c:	f04f 0b01 	mov.w	fp, #1
 802f250:	4658      	mov	r0, fp
 802f252:	b00b      	add	sp, #44	; 0x2c
 802f254:	ecbd 8b02 	vpop	{d8}
 802f258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f25c:	a3a0      	add	r3, pc, #640	; (adr r3, 802f4e0 <__ieee754_rem_pio2+0x310>)
 802f25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f262:	f7d1 f803 	bl	800026c <__aeabi_dsub>
 802f266:	a3a0      	add	r3, pc, #640	; (adr r3, 802f4e8 <__ieee754_rem_pio2+0x318>)
 802f268:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f26c:	4604      	mov	r4, r0
 802f26e:	460d      	mov	r5, r1
 802f270:	f7d0 fffc 	bl	800026c <__aeabi_dsub>
 802f274:	4602      	mov	r2, r0
 802f276:	460b      	mov	r3, r1
 802f278:	e9ca 2300 	strd	r2, r3, [sl]
 802f27c:	4620      	mov	r0, r4
 802f27e:	4629      	mov	r1, r5
 802f280:	f7d0 fff4 	bl	800026c <__aeabi_dsub>
 802f284:	a398      	add	r3, pc, #608	; (adr r3, 802f4e8 <__ieee754_rem_pio2+0x318>)
 802f286:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f28a:	e7db      	b.n	802f244 <__ieee754_rem_pio2+0x74>
 802f28c:	f7d0 fff0 	bl	8000270 <__adddf3>
 802f290:	45b0      	cmp	r8, r6
 802f292:	4604      	mov	r4, r0
 802f294:	460d      	mov	r5, r1
 802f296:	d016      	beq.n	802f2c6 <__ieee754_rem_pio2+0xf6>
 802f298:	a38f      	add	r3, pc, #572	; (adr r3, 802f4d8 <__ieee754_rem_pio2+0x308>)
 802f29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f29e:	f7d0 ffe7 	bl	8000270 <__adddf3>
 802f2a2:	4602      	mov	r2, r0
 802f2a4:	460b      	mov	r3, r1
 802f2a6:	e9ca 2300 	strd	r2, r3, [sl]
 802f2aa:	4620      	mov	r0, r4
 802f2ac:	4629      	mov	r1, r5
 802f2ae:	f7d0 ffdd 	bl	800026c <__aeabi_dsub>
 802f2b2:	a389      	add	r3, pc, #548	; (adr r3, 802f4d8 <__ieee754_rem_pio2+0x308>)
 802f2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f2b8:	f7d0 ffda 	bl	8000270 <__adddf3>
 802f2bc:	f04f 3bff 	mov.w	fp, #4294967295
 802f2c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802f2c4:	e7c4      	b.n	802f250 <__ieee754_rem_pio2+0x80>
 802f2c6:	a386      	add	r3, pc, #536	; (adr r3, 802f4e0 <__ieee754_rem_pio2+0x310>)
 802f2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f2cc:	f7d0 ffd0 	bl	8000270 <__adddf3>
 802f2d0:	a385      	add	r3, pc, #532	; (adr r3, 802f4e8 <__ieee754_rem_pio2+0x318>)
 802f2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f2d6:	4604      	mov	r4, r0
 802f2d8:	460d      	mov	r5, r1
 802f2da:	f7d0 ffc9 	bl	8000270 <__adddf3>
 802f2de:	4602      	mov	r2, r0
 802f2e0:	460b      	mov	r3, r1
 802f2e2:	e9ca 2300 	strd	r2, r3, [sl]
 802f2e6:	4620      	mov	r0, r4
 802f2e8:	4629      	mov	r1, r5
 802f2ea:	f7d0 ffbf 	bl	800026c <__aeabi_dsub>
 802f2ee:	a37e      	add	r3, pc, #504	; (adr r3, 802f4e8 <__ieee754_rem_pio2+0x318>)
 802f2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f2f4:	e7e0      	b.n	802f2b8 <__ieee754_rem_pio2+0xe8>
 802f2f6:	4b87      	ldr	r3, [pc, #540]	; (802f514 <__ieee754_rem_pio2+0x344>)
 802f2f8:	4598      	cmp	r8, r3
 802f2fa:	f300 80d9 	bgt.w	802f4b0 <__ieee754_rem_pio2+0x2e0>
 802f2fe:	f000 feed 	bl	80300dc <fabs>
 802f302:	ec55 4b10 	vmov	r4, r5, d0
 802f306:	ee10 0a10 	vmov	r0, s0
 802f30a:	a379      	add	r3, pc, #484	; (adr r3, 802f4f0 <__ieee754_rem_pio2+0x320>)
 802f30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f310:	4629      	mov	r1, r5
 802f312:	f7d1 f963 	bl	80005dc <__aeabi_dmul>
 802f316:	4b80      	ldr	r3, [pc, #512]	; (802f518 <__ieee754_rem_pio2+0x348>)
 802f318:	2200      	movs	r2, #0
 802f31a:	f7d0 ffa9 	bl	8000270 <__adddf3>
 802f31e:	f7d1 fc0d 	bl	8000b3c <__aeabi_d2iz>
 802f322:	4683      	mov	fp, r0
 802f324:	f7d1 f8f0 	bl	8000508 <__aeabi_i2d>
 802f328:	4602      	mov	r2, r0
 802f32a:	460b      	mov	r3, r1
 802f32c:	ec43 2b18 	vmov	d8, r2, r3
 802f330:	a367      	add	r3, pc, #412	; (adr r3, 802f4d0 <__ieee754_rem_pio2+0x300>)
 802f332:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f336:	f7d1 f951 	bl	80005dc <__aeabi_dmul>
 802f33a:	4602      	mov	r2, r0
 802f33c:	460b      	mov	r3, r1
 802f33e:	4620      	mov	r0, r4
 802f340:	4629      	mov	r1, r5
 802f342:	f7d0 ff93 	bl	800026c <__aeabi_dsub>
 802f346:	a364      	add	r3, pc, #400	; (adr r3, 802f4d8 <__ieee754_rem_pio2+0x308>)
 802f348:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f34c:	4606      	mov	r6, r0
 802f34e:	460f      	mov	r7, r1
 802f350:	ec51 0b18 	vmov	r0, r1, d8
 802f354:	f7d1 f942 	bl	80005dc <__aeabi_dmul>
 802f358:	f1bb 0f1f 	cmp.w	fp, #31
 802f35c:	4604      	mov	r4, r0
 802f35e:	460d      	mov	r5, r1
 802f360:	dc0d      	bgt.n	802f37e <__ieee754_rem_pio2+0x1ae>
 802f362:	4b6e      	ldr	r3, [pc, #440]	; (802f51c <__ieee754_rem_pio2+0x34c>)
 802f364:	f10b 32ff 	add.w	r2, fp, #4294967295
 802f368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f36c:	4543      	cmp	r3, r8
 802f36e:	d006      	beq.n	802f37e <__ieee754_rem_pio2+0x1ae>
 802f370:	4622      	mov	r2, r4
 802f372:	462b      	mov	r3, r5
 802f374:	4630      	mov	r0, r6
 802f376:	4639      	mov	r1, r7
 802f378:	f7d0 ff78 	bl	800026c <__aeabi_dsub>
 802f37c:	e00f      	b.n	802f39e <__ieee754_rem_pio2+0x1ce>
 802f37e:	462b      	mov	r3, r5
 802f380:	4622      	mov	r2, r4
 802f382:	4630      	mov	r0, r6
 802f384:	4639      	mov	r1, r7
 802f386:	f7d0 ff71 	bl	800026c <__aeabi_dsub>
 802f38a:	ea4f 5328 	mov.w	r3, r8, asr #20
 802f38e:	9303      	str	r3, [sp, #12]
 802f390:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802f394:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 802f398:	f1b8 0f10 	cmp.w	r8, #16
 802f39c:	dc02      	bgt.n	802f3a4 <__ieee754_rem_pio2+0x1d4>
 802f39e:	e9ca 0100 	strd	r0, r1, [sl]
 802f3a2:	e039      	b.n	802f418 <__ieee754_rem_pio2+0x248>
 802f3a4:	a34e      	add	r3, pc, #312	; (adr r3, 802f4e0 <__ieee754_rem_pio2+0x310>)
 802f3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f3aa:	ec51 0b18 	vmov	r0, r1, d8
 802f3ae:	f7d1 f915 	bl	80005dc <__aeabi_dmul>
 802f3b2:	4604      	mov	r4, r0
 802f3b4:	460d      	mov	r5, r1
 802f3b6:	4602      	mov	r2, r0
 802f3b8:	460b      	mov	r3, r1
 802f3ba:	4630      	mov	r0, r6
 802f3bc:	4639      	mov	r1, r7
 802f3be:	f7d0 ff55 	bl	800026c <__aeabi_dsub>
 802f3c2:	4602      	mov	r2, r0
 802f3c4:	460b      	mov	r3, r1
 802f3c6:	4680      	mov	r8, r0
 802f3c8:	4689      	mov	r9, r1
 802f3ca:	4630      	mov	r0, r6
 802f3cc:	4639      	mov	r1, r7
 802f3ce:	f7d0 ff4d 	bl	800026c <__aeabi_dsub>
 802f3d2:	4622      	mov	r2, r4
 802f3d4:	462b      	mov	r3, r5
 802f3d6:	f7d0 ff49 	bl	800026c <__aeabi_dsub>
 802f3da:	a343      	add	r3, pc, #268	; (adr r3, 802f4e8 <__ieee754_rem_pio2+0x318>)
 802f3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f3e0:	4604      	mov	r4, r0
 802f3e2:	460d      	mov	r5, r1
 802f3e4:	ec51 0b18 	vmov	r0, r1, d8
 802f3e8:	f7d1 f8f8 	bl	80005dc <__aeabi_dmul>
 802f3ec:	4622      	mov	r2, r4
 802f3ee:	462b      	mov	r3, r5
 802f3f0:	f7d0 ff3c 	bl	800026c <__aeabi_dsub>
 802f3f4:	4602      	mov	r2, r0
 802f3f6:	460b      	mov	r3, r1
 802f3f8:	4604      	mov	r4, r0
 802f3fa:	460d      	mov	r5, r1
 802f3fc:	4640      	mov	r0, r8
 802f3fe:	4649      	mov	r1, r9
 802f400:	f7d0 ff34 	bl	800026c <__aeabi_dsub>
 802f404:	9a03      	ldr	r2, [sp, #12]
 802f406:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802f40a:	1ad3      	subs	r3, r2, r3
 802f40c:	2b31      	cmp	r3, #49	; 0x31
 802f40e:	dc24      	bgt.n	802f45a <__ieee754_rem_pio2+0x28a>
 802f410:	e9ca 0100 	strd	r0, r1, [sl]
 802f414:	4646      	mov	r6, r8
 802f416:	464f      	mov	r7, r9
 802f418:	e9da 8900 	ldrd	r8, r9, [sl]
 802f41c:	4630      	mov	r0, r6
 802f41e:	4642      	mov	r2, r8
 802f420:	464b      	mov	r3, r9
 802f422:	4639      	mov	r1, r7
 802f424:	f7d0 ff22 	bl	800026c <__aeabi_dsub>
 802f428:	462b      	mov	r3, r5
 802f42a:	4622      	mov	r2, r4
 802f42c:	f7d0 ff1e 	bl	800026c <__aeabi_dsub>
 802f430:	9b02      	ldr	r3, [sp, #8]
 802f432:	2b00      	cmp	r3, #0
 802f434:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802f438:	f6bf af0a 	bge.w	802f250 <__ieee754_rem_pio2+0x80>
 802f43c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802f440:	f8ca 3004 	str.w	r3, [sl, #4]
 802f444:	f8ca 8000 	str.w	r8, [sl]
 802f448:	f8ca 0008 	str.w	r0, [sl, #8]
 802f44c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802f450:	f8ca 300c 	str.w	r3, [sl, #12]
 802f454:	f1cb 0b00 	rsb	fp, fp, #0
 802f458:	e6fa      	b.n	802f250 <__ieee754_rem_pio2+0x80>
 802f45a:	a327      	add	r3, pc, #156	; (adr r3, 802f4f8 <__ieee754_rem_pio2+0x328>)
 802f45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f460:	ec51 0b18 	vmov	r0, r1, d8
 802f464:	f7d1 f8ba 	bl	80005dc <__aeabi_dmul>
 802f468:	4604      	mov	r4, r0
 802f46a:	460d      	mov	r5, r1
 802f46c:	4602      	mov	r2, r0
 802f46e:	460b      	mov	r3, r1
 802f470:	4640      	mov	r0, r8
 802f472:	4649      	mov	r1, r9
 802f474:	f7d0 fefa 	bl	800026c <__aeabi_dsub>
 802f478:	4602      	mov	r2, r0
 802f47a:	460b      	mov	r3, r1
 802f47c:	4606      	mov	r6, r0
 802f47e:	460f      	mov	r7, r1
 802f480:	4640      	mov	r0, r8
 802f482:	4649      	mov	r1, r9
 802f484:	f7d0 fef2 	bl	800026c <__aeabi_dsub>
 802f488:	4622      	mov	r2, r4
 802f48a:	462b      	mov	r3, r5
 802f48c:	f7d0 feee 	bl	800026c <__aeabi_dsub>
 802f490:	a31b      	add	r3, pc, #108	; (adr r3, 802f500 <__ieee754_rem_pio2+0x330>)
 802f492:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f496:	4604      	mov	r4, r0
 802f498:	460d      	mov	r5, r1
 802f49a:	ec51 0b18 	vmov	r0, r1, d8
 802f49e:	f7d1 f89d 	bl	80005dc <__aeabi_dmul>
 802f4a2:	4622      	mov	r2, r4
 802f4a4:	462b      	mov	r3, r5
 802f4a6:	f7d0 fee1 	bl	800026c <__aeabi_dsub>
 802f4aa:	4604      	mov	r4, r0
 802f4ac:	460d      	mov	r5, r1
 802f4ae:	e75f      	b.n	802f370 <__ieee754_rem_pio2+0x1a0>
 802f4b0:	4b1b      	ldr	r3, [pc, #108]	; (802f520 <__ieee754_rem_pio2+0x350>)
 802f4b2:	4598      	cmp	r8, r3
 802f4b4:	dd36      	ble.n	802f524 <__ieee754_rem_pio2+0x354>
 802f4b6:	ee10 2a10 	vmov	r2, s0
 802f4ba:	462b      	mov	r3, r5
 802f4bc:	4620      	mov	r0, r4
 802f4be:	4629      	mov	r1, r5
 802f4c0:	f7d0 fed4 	bl	800026c <__aeabi_dsub>
 802f4c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802f4c8:	e9ca 0100 	strd	r0, r1, [sl]
 802f4cc:	e694      	b.n	802f1f8 <__ieee754_rem_pio2+0x28>
 802f4ce:	bf00      	nop
 802f4d0:	54400000 	.word	0x54400000
 802f4d4:	3ff921fb 	.word	0x3ff921fb
 802f4d8:	1a626331 	.word	0x1a626331
 802f4dc:	3dd0b461 	.word	0x3dd0b461
 802f4e0:	1a600000 	.word	0x1a600000
 802f4e4:	3dd0b461 	.word	0x3dd0b461
 802f4e8:	2e037073 	.word	0x2e037073
 802f4ec:	3ba3198a 	.word	0x3ba3198a
 802f4f0:	6dc9c883 	.word	0x6dc9c883
 802f4f4:	3fe45f30 	.word	0x3fe45f30
 802f4f8:	2e000000 	.word	0x2e000000
 802f4fc:	3ba3198a 	.word	0x3ba3198a
 802f500:	252049c1 	.word	0x252049c1
 802f504:	397b839a 	.word	0x397b839a
 802f508:	3fe921fb 	.word	0x3fe921fb
 802f50c:	4002d97b 	.word	0x4002d97b
 802f510:	3ff921fb 	.word	0x3ff921fb
 802f514:	413921fb 	.word	0x413921fb
 802f518:	3fe00000 	.word	0x3fe00000
 802f51c:	08030b18 	.word	0x08030b18
 802f520:	7fefffff 	.word	0x7fefffff
 802f524:	ea4f 5428 	mov.w	r4, r8, asr #20
 802f528:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 802f52c:	ee10 0a10 	vmov	r0, s0
 802f530:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 802f534:	ee10 6a10 	vmov	r6, s0
 802f538:	460f      	mov	r7, r1
 802f53a:	f7d1 faff 	bl	8000b3c <__aeabi_d2iz>
 802f53e:	f7d0 ffe3 	bl	8000508 <__aeabi_i2d>
 802f542:	4602      	mov	r2, r0
 802f544:	460b      	mov	r3, r1
 802f546:	4630      	mov	r0, r6
 802f548:	4639      	mov	r1, r7
 802f54a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802f54e:	f7d0 fe8d 	bl	800026c <__aeabi_dsub>
 802f552:	4b22      	ldr	r3, [pc, #136]	; (802f5dc <__ieee754_rem_pio2+0x40c>)
 802f554:	2200      	movs	r2, #0
 802f556:	f7d1 f841 	bl	80005dc <__aeabi_dmul>
 802f55a:	460f      	mov	r7, r1
 802f55c:	4606      	mov	r6, r0
 802f55e:	f7d1 faed 	bl	8000b3c <__aeabi_d2iz>
 802f562:	f7d0 ffd1 	bl	8000508 <__aeabi_i2d>
 802f566:	4602      	mov	r2, r0
 802f568:	460b      	mov	r3, r1
 802f56a:	4630      	mov	r0, r6
 802f56c:	4639      	mov	r1, r7
 802f56e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802f572:	f7d0 fe7b 	bl	800026c <__aeabi_dsub>
 802f576:	4b19      	ldr	r3, [pc, #100]	; (802f5dc <__ieee754_rem_pio2+0x40c>)
 802f578:	2200      	movs	r2, #0
 802f57a:	f7d1 f82f 	bl	80005dc <__aeabi_dmul>
 802f57e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802f582:	ad04      	add	r5, sp, #16
 802f584:	f04f 0803 	mov.w	r8, #3
 802f588:	46a9      	mov	r9, r5
 802f58a:	2600      	movs	r6, #0
 802f58c:	2700      	movs	r7, #0
 802f58e:	4632      	mov	r2, r6
 802f590:	463b      	mov	r3, r7
 802f592:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 802f596:	46c3      	mov	fp, r8
 802f598:	3d08      	subs	r5, #8
 802f59a:	f108 38ff 	add.w	r8, r8, #4294967295
 802f59e:	f7d1 fa85 	bl	8000aac <__aeabi_dcmpeq>
 802f5a2:	2800      	cmp	r0, #0
 802f5a4:	d1f3      	bne.n	802f58e <__ieee754_rem_pio2+0x3be>
 802f5a6:	4b0e      	ldr	r3, [pc, #56]	; (802f5e0 <__ieee754_rem_pio2+0x410>)
 802f5a8:	9301      	str	r3, [sp, #4]
 802f5aa:	2302      	movs	r3, #2
 802f5ac:	9300      	str	r3, [sp, #0]
 802f5ae:	4622      	mov	r2, r4
 802f5b0:	465b      	mov	r3, fp
 802f5b2:	4651      	mov	r1, sl
 802f5b4:	4648      	mov	r0, r9
 802f5b6:	f000 f993 	bl	802f8e0 <__kernel_rem_pio2>
 802f5ba:	9b02      	ldr	r3, [sp, #8]
 802f5bc:	2b00      	cmp	r3, #0
 802f5be:	4683      	mov	fp, r0
 802f5c0:	f6bf ae46 	bge.w	802f250 <__ieee754_rem_pio2+0x80>
 802f5c4:	f8da 3004 	ldr.w	r3, [sl, #4]
 802f5c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802f5cc:	f8ca 3004 	str.w	r3, [sl, #4]
 802f5d0:	f8da 300c 	ldr.w	r3, [sl, #12]
 802f5d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802f5d8:	e73a      	b.n	802f450 <__ieee754_rem_pio2+0x280>
 802f5da:	bf00      	nop
 802f5dc:	41700000 	.word	0x41700000
 802f5e0:	08030b98 	.word	0x08030b98

0802f5e4 <__ieee754_sqrt>:
 802f5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f5e8:	ec55 4b10 	vmov	r4, r5, d0
 802f5ec:	4e56      	ldr	r6, [pc, #344]	; (802f748 <__ieee754_sqrt+0x164>)
 802f5ee:	43ae      	bics	r6, r5
 802f5f0:	ee10 0a10 	vmov	r0, s0
 802f5f4:	ee10 3a10 	vmov	r3, s0
 802f5f8:	4629      	mov	r1, r5
 802f5fa:	462a      	mov	r2, r5
 802f5fc:	d110      	bne.n	802f620 <__ieee754_sqrt+0x3c>
 802f5fe:	ee10 2a10 	vmov	r2, s0
 802f602:	462b      	mov	r3, r5
 802f604:	f7d0 ffea 	bl	80005dc <__aeabi_dmul>
 802f608:	4602      	mov	r2, r0
 802f60a:	460b      	mov	r3, r1
 802f60c:	4620      	mov	r0, r4
 802f60e:	4629      	mov	r1, r5
 802f610:	f7d0 fe2e 	bl	8000270 <__adddf3>
 802f614:	4604      	mov	r4, r0
 802f616:	460d      	mov	r5, r1
 802f618:	ec45 4b10 	vmov	d0, r4, r5
 802f61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f620:	2d00      	cmp	r5, #0
 802f622:	dc10      	bgt.n	802f646 <__ieee754_sqrt+0x62>
 802f624:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802f628:	4330      	orrs	r0, r6
 802f62a:	d0f5      	beq.n	802f618 <__ieee754_sqrt+0x34>
 802f62c:	b15d      	cbz	r5, 802f646 <__ieee754_sqrt+0x62>
 802f62e:	ee10 2a10 	vmov	r2, s0
 802f632:	462b      	mov	r3, r5
 802f634:	ee10 0a10 	vmov	r0, s0
 802f638:	f7d0 fe18 	bl	800026c <__aeabi_dsub>
 802f63c:	4602      	mov	r2, r0
 802f63e:	460b      	mov	r3, r1
 802f640:	f7d1 f8f6 	bl	8000830 <__aeabi_ddiv>
 802f644:	e7e6      	b.n	802f614 <__ieee754_sqrt+0x30>
 802f646:	1509      	asrs	r1, r1, #20
 802f648:	d076      	beq.n	802f738 <__ieee754_sqrt+0x154>
 802f64a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 802f64e:	07ce      	lsls	r6, r1, #31
 802f650:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 802f654:	bf5e      	ittt	pl
 802f656:	0fda      	lsrpl	r2, r3, #31
 802f658:	005b      	lslpl	r3, r3, #1
 802f65a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 802f65e:	0fda      	lsrs	r2, r3, #31
 802f660:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 802f664:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 802f668:	2000      	movs	r0, #0
 802f66a:	106d      	asrs	r5, r5, #1
 802f66c:	005b      	lsls	r3, r3, #1
 802f66e:	f04f 0e16 	mov.w	lr, #22
 802f672:	4684      	mov	ip, r0
 802f674:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802f678:	eb0c 0401 	add.w	r4, ip, r1
 802f67c:	4294      	cmp	r4, r2
 802f67e:	bfde      	ittt	le
 802f680:	1b12      	suble	r2, r2, r4
 802f682:	eb04 0c01 	addle.w	ip, r4, r1
 802f686:	1840      	addle	r0, r0, r1
 802f688:	0052      	lsls	r2, r2, #1
 802f68a:	f1be 0e01 	subs.w	lr, lr, #1
 802f68e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802f692:	ea4f 0151 	mov.w	r1, r1, lsr #1
 802f696:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802f69a:	d1ed      	bne.n	802f678 <__ieee754_sqrt+0x94>
 802f69c:	4671      	mov	r1, lr
 802f69e:	2720      	movs	r7, #32
 802f6a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 802f6a4:	4562      	cmp	r2, ip
 802f6a6:	eb04 060e 	add.w	r6, r4, lr
 802f6aa:	dc02      	bgt.n	802f6b2 <__ieee754_sqrt+0xce>
 802f6ac:	d113      	bne.n	802f6d6 <__ieee754_sqrt+0xf2>
 802f6ae:	429e      	cmp	r6, r3
 802f6b0:	d811      	bhi.n	802f6d6 <__ieee754_sqrt+0xf2>
 802f6b2:	2e00      	cmp	r6, #0
 802f6b4:	eb06 0e04 	add.w	lr, r6, r4
 802f6b8:	da43      	bge.n	802f742 <__ieee754_sqrt+0x15e>
 802f6ba:	f1be 0f00 	cmp.w	lr, #0
 802f6be:	db40      	blt.n	802f742 <__ieee754_sqrt+0x15e>
 802f6c0:	f10c 0801 	add.w	r8, ip, #1
 802f6c4:	eba2 020c 	sub.w	r2, r2, ip
 802f6c8:	429e      	cmp	r6, r3
 802f6ca:	bf88      	it	hi
 802f6cc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 802f6d0:	1b9b      	subs	r3, r3, r6
 802f6d2:	4421      	add	r1, r4
 802f6d4:	46c4      	mov	ip, r8
 802f6d6:	0052      	lsls	r2, r2, #1
 802f6d8:	3f01      	subs	r7, #1
 802f6da:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802f6de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 802f6e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802f6e6:	d1dd      	bne.n	802f6a4 <__ieee754_sqrt+0xc0>
 802f6e8:	4313      	orrs	r3, r2
 802f6ea:	d006      	beq.n	802f6fa <__ieee754_sqrt+0x116>
 802f6ec:	1c4c      	adds	r4, r1, #1
 802f6ee:	bf13      	iteet	ne
 802f6f0:	3101      	addne	r1, #1
 802f6f2:	3001      	addeq	r0, #1
 802f6f4:	4639      	moveq	r1, r7
 802f6f6:	f021 0101 	bicne.w	r1, r1, #1
 802f6fa:	1043      	asrs	r3, r0, #1
 802f6fc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 802f700:	0849      	lsrs	r1, r1, #1
 802f702:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 802f706:	07c2      	lsls	r2, r0, #31
 802f708:	bf48      	it	mi
 802f70a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 802f70e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 802f712:	460c      	mov	r4, r1
 802f714:	463d      	mov	r5, r7
 802f716:	e77f      	b.n	802f618 <__ieee754_sqrt+0x34>
 802f718:	0ada      	lsrs	r2, r3, #11
 802f71a:	3815      	subs	r0, #21
 802f71c:	055b      	lsls	r3, r3, #21
 802f71e:	2a00      	cmp	r2, #0
 802f720:	d0fa      	beq.n	802f718 <__ieee754_sqrt+0x134>
 802f722:	02d7      	lsls	r7, r2, #11
 802f724:	d50a      	bpl.n	802f73c <__ieee754_sqrt+0x158>
 802f726:	f1c1 0420 	rsb	r4, r1, #32
 802f72a:	fa23 f404 	lsr.w	r4, r3, r4
 802f72e:	1e4d      	subs	r5, r1, #1
 802f730:	408b      	lsls	r3, r1
 802f732:	4322      	orrs	r2, r4
 802f734:	1b41      	subs	r1, r0, r5
 802f736:	e788      	b.n	802f64a <__ieee754_sqrt+0x66>
 802f738:	4608      	mov	r0, r1
 802f73a:	e7f0      	b.n	802f71e <__ieee754_sqrt+0x13a>
 802f73c:	0052      	lsls	r2, r2, #1
 802f73e:	3101      	adds	r1, #1
 802f740:	e7ef      	b.n	802f722 <__ieee754_sqrt+0x13e>
 802f742:	46e0      	mov	r8, ip
 802f744:	e7be      	b.n	802f6c4 <__ieee754_sqrt+0xe0>
 802f746:	bf00      	nop
 802f748:	7ff00000 	.word	0x7ff00000
 802f74c:	00000000 	.word	0x00000000

0802f750 <__kernel_cos>:
 802f750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f754:	ec57 6b10 	vmov	r6, r7, d0
 802f758:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 802f75c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 802f760:	ed8d 1b00 	vstr	d1, [sp]
 802f764:	da07      	bge.n	802f776 <__kernel_cos+0x26>
 802f766:	ee10 0a10 	vmov	r0, s0
 802f76a:	4639      	mov	r1, r7
 802f76c:	f7d1 f9e6 	bl	8000b3c <__aeabi_d2iz>
 802f770:	2800      	cmp	r0, #0
 802f772:	f000 8088 	beq.w	802f886 <__kernel_cos+0x136>
 802f776:	4632      	mov	r2, r6
 802f778:	463b      	mov	r3, r7
 802f77a:	4630      	mov	r0, r6
 802f77c:	4639      	mov	r1, r7
 802f77e:	f7d0 ff2d 	bl	80005dc <__aeabi_dmul>
 802f782:	4b51      	ldr	r3, [pc, #324]	; (802f8c8 <__kernel_cos+0x178>)
 802f784:	2200      	movs	r2, #0
 802f786:	4604      	mov	r4, r0
 802f788:	460d      	mov	r5, r1
 802f78a:	f7d0 ff27 	bl	80005dc <__aeabi_dmul>
 802f78e:	a340      	add	r3, pc, #256	; (adr r3, 802f890 <__kernel_cos+0x140>)
 802f790:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f794:	4682      	mov	sl, r0
 802f796:	468b      	mov	fp, r1
 802f798:	4620      	mov	r0, r4
 802f79a:	4629      	mov	r1, r5
 802f79c:	f7d0 ff1e 	bl	80005dc <__aeabi_dmul>
 802f7a0:	a33d      	add	r3, pc, #244	; (adr r3, 802f898 <__kernel_cos+0x148>)
 802f7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f7a6:	f7d0 fd63 	bl	8000270 <__adddf3>
 802f7aa:	4622      	mov	r2, r4
 802f7ac:	462b      	mov	r3, r5
 802f7ae:	f7d0 ff15 	bl	80005dc <__aeabi_dmul>
 802f7b2:	a33b      	add	r3, pc, #236	; (adr r3, 802f8a0 <__kernel_cos+0x150>)
 802f7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f7b8:	f7d0 fd58 	bl	800026c <__aeabi_dsub>
 802f7bc:	4622      	mov	r2, r4
 802f7be:	462b      	mov	r3, r5
 802f7c0:	f7d0 ff0c 	bl	80005dc <__aeabi_dmul>
 802f7c4:	a338      	add	r3, pc, #224	; (adr r3, 802f8a8 <__kernel_cos+0x158>)
 802f7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f7ca:	f7d0 fd51 	bl	8000270 <__adddf3>
 802f7ce:	4622      	mov	r2, r4
 802f7d0:	462b      	mov	r3, r5
 802f7d2:	f7d0 ff03 	bl	80005dc <__aeabi_dmul>
 802f7d6:	a336      	add	r3, pc, #216	; (adr r3, 802f8b0 <__kernel_cos+0x160>)
 802f7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f7dc:	f7d0 fd46 	bl	800026c <__aeabi_dsub>
 802f7e0:	4622      	mov	r2, r4
 802f7e2:	462b      	mov	r3, r5
 802f7e4:	f7d0 fefa 	bl	80005dc <__aeabi_dmul>
 802f7e8:	a333      	add	r3, pc, #204	; (adr r3, 802f8b8 <__kernel_cos+0x168>)
 802f7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f7ee:	f7d0 fd3f 	bl	8000270 <__adddf3>
 802f7f2:	4622      	mov	r2, r4
 802f7f4:	462b      	mov	r3, r5
 802f7f6:	f7d0 fef1 	bl	80005dc <__aeabi_dmul>
 802f7fa:	4622      	mov	r2, r4
 802f7fc:	462b      	mov	r3, r5
 802f7fe:	f7d0 feed 	bl	80005dc <__aeabi_dmul>
 802f802:	e9dd 2300 	ldrd	r2, r3, [sp]
 802f806:	4604      	mov	r4, r0
 802f808:	460d      	mov	r5, r1
 802f80a:	4630      	mov	r0, r6
 802f80c:	4639      	mov	r1, r7
 802f80e:	f7d0 fee5 	bl	80005dc <__aeabi_dmul>
 802f812:	460b      	mov	r3, r1
 802f814:	4602      	mov	r2, r0
 802f816:	4629      	mov	r1, r5
 802f818:	4620      	mov	r0, r4
 802f81a:	f7d0 fd27 	bl	800026c <__aeabi_dsub>
 802f81e:	4b2b      	ldr	r3, [pc, #172]	; (802f8cc <__kernel_cos+0x17c>)
 802f820:	4598      	cmp	r8, r3
 802f822:	4606      	mov	r6, r0
 802f824:	460f      	mov	r7, r1
 802f826:	dc10      	bgt.n	802f84a <__kernel_cos+0xfa>
 802f828:	4602      	mov	r2, r0
 802f82a:	460b      	mov	r3, r1
 802f82c:	4650      	mov	r0, sl
 802f82e:	4659      	mov	r1, fp
 802f830:	f7d0 fd1c 	bl	800026c <__aeabi_dsub>
 802f834:	460b      	mov	r3, r1
 802f836:	4926      	ldr	r1, [pc, #152]	; (802f8d0 <__kernel_cos+0x180>)
 802f838:	4602      	mov	r2, r0
 802f83a:	2000      	movs	r0, #0
 802f83c:	f7d0 fd16 	bl	800026c <__aeabi_dsub>
 802f840:	ec41 0b10 	vmov	d0, r0, r1
 802f844:	b003      	add	sp, #12
 802f846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f84a:	4b22      	ldr	r3, [pc, #136]	; (802f8d4 <__kernel_cos+0x184>)
 802f84c:	4920      	ldr	r1, [pc, #128]	; (802f8d0 <__kernel_cos+0x180>)
 802f84e:	4598      	cmp	r8, r3
 802f850:	bfcc      	ite	gt
 802f852:	4d21      	ldrgt	r5, [pc, #132]	; (802f8d8 <__kernel_cos+0x188>)
 802f854:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 802f858:	2400      	movs	r4, #0
 802f85a:	4622      	mov	r2, r4
 802f85c:	462b      	mov	r3, r5
 802f85e:	2000      	movs	r0, #0
 802f860:	f7d0 fd04 	bl	800026c <__aeabi_dsub>
 802f864:	4622      	mov	r2, r4
 802f866:	4680      	mov	r8, r0
 802f868:	4689      	mov	r9, r1
 802f86a:	462b      	mov	r3, r5
 802f86c:	4650      	mov	r0, sl
 802f86e:	4659      	mov	r1, fp
 802f870:	f7d0 fcfc 	bl	800026c <__aeabi_dsub>
 802f874:	4632      	mov	r2, r6
 802f876:	463b      	mov	r3, r7
 802f878:	f7d0 fcf8 	bl	800026c <__aeabi_dsub>
 802f87c:	4602      	mov	r2, r0
 802f87e:	460b      	mov	r3, r1
 802f880:	4640      	mov	r0, r8
 802f882:	4649      	mov	r1, r9
 802f884:	e7da      	b.n	802f83c <__kernel_cos+0xec>
 802f886:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 802f8c0 <__kernel_cos+0x170>
 802f88a:	e7db      	b.n	802f844 <__kernel_cos+0xf4>
 802f88c:	f3af 8000 	nop.w
 802f890:	be8838d4 	.word	0xbe8838d4
 802f894:	bda8fae9 	.word	0xbda8fae9
 802f898:	bdb4b1c4 	.word	0xbdb4b1c4
 802f89c:	3e21ee9e 	.word	0x3e21ee9e
 802f8a0:	809c52ad 	.word	0x809c52ad
 802f8a4:	3e927e4f 	.word	0x3e927e4f
 802f8a8:	19cb1590 	.word	0x19cb1590
 802f8ac:	3efa01a0 	.word	0x3efa01a0
 802f8b0:	16c15177 	.word	0x16c15177
 802f8b4:	3f56c16c 	.word	0x3f56c16c
 802f8b8:	5555554c 	.word	0x5555554c
 802f8bc:	3fa55555 	.word	0x3fa55555
 802f8c0:	00000000 	.word	0x00000000
 802f8c4:	3ff00000 	.word	0x3ff00000
 802f8c8:	3fe00000 	.word	0x3fe00000
 802f8cc:	3fd33332 	.word	0x3fd33332
 802f8d0:	3ff00000 	.word	0x3ff00000
 802f8d4:	3fe90000 	.word	0x3fe90000
 802f8d8:	3fd20000 	.word	0x3fd20000
 802f8dc:	00000000 	.word	0x00000000

0802f8e0 <__kernel_rem_pio2>:
 802f8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f8e4:	ed2d 8b02 	vpush	{d8}
 802f8e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 802f8ec:	f112 0f14 	cmn.w	r2, #20
 802f8f0:	9308      	str	r3, [sp, #32]
 802f8f2:	9101      	str	r1, [sp, #4]
 802f8f4:	4bc6      	ldr	r3, [pc, #792]	; (802fc10 <__kernel_rem_pio2+0x330>)
 802f8f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 802f8f8:	9009      	str	r0, [sp, #36]	; 0x24
 802f8fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802f8fe:	9304      	str	r3, [sp, #16]
 802f900:	9b08      	ldr	r3, [sp, #32]
 802f902:	f103 33ff 	add.w	r3, r3, #4294967295
 802f906:	bfa8      	it	ge
 802f908:	1ed4      	subge	r4, r2, #3
 802f90a:	9306      	str	r3, [sp, #24]
 802f90c:	bfb2      	itee	lt
 802f90e:	2400      	movlt	r4, #0
 802f910:	2318      	movge	r3, #24
 802f912:	fb94 f4f3 	sdivge	r4, r4, r3
 802f916:	f06f 0317 	mvn.w	r3, #23
 802f91a:	fb04 3303 	mla	r3, r4, r3, r3
 802f91e:	eb03 0a02 	add.w	sl, r3, r2
 802f922:	9b04      	ldr	r3, [sp, #16]
 802f924:	9a06      	ldr	r2, [sp, #24]
 802f926:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 802fc00 <__kernel_rem_pio2+0x320>
 802f92a:	eb03 0802 	add.w	r8, r3, r2
 802f92e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 802f930:	1aa7      	subs	r7, r4, r2
 802f932:	ae20      	add	r6, sp, #128	; 0x80
 802f934:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 802f938:	2500      	movs	r5, #0
 802f93a:	4545      	cmp	r5, r8
 802f93c:	dd18      	ble.n	802f970 <__kernel_rem_pio2+0x90>
 802f93e:	9b08      	ldr	r3, [sp, #32]
 802f940:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802f944:	aa20      	add	r2, sp, #128	; 0x80
 802f946:	ed9f 8bae 	vldr	d8, [pc, #696]	; 802fc00 <__kernel_rem_pio2+0x320>
 802f94a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 802f94e:	f1c3 0301 	rsb	r3, r3, #1
 802f952:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 802f956:	9307      	str	r3, [sp, #28]
 802f958:	9b07      	ldr	r3, [sp, #28]
 802f95a:	9a04      	ldr	r2, [sp, #16]
 802f95c:	4443      	add	r3, r8
 802f95e:	429a      	cmp	r2, r3
 802f960:	db2f      	blt.n	802f9c2 <__kernel_rem_pio2+0xe2>
 802f962:	ed8d 8b02 	vstr	d8, [sp, #8]
 802f966:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802f96a:	462f      	mov	r7, r5
 802f96c:	2600      	movs	r6, #0
 802f96e:	e01b      	b.n	802f9a8 <__kernel_rem_pio2+0xc8>
 802f970:	42ef      	cmn	r7, r5
 802f972:	d407      	bmi.n	802f984 <__kernel_rem_pio2+0xa4>
 802f974:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 802f978:	f7d0 fdc6 	bl	8000508 <__aeabi_i2d>
 802f97c:	e8e6 0102 	strd	r0, r1, [r6], #8
 802f980:	3501      	adds	r5, #1
 802f982:	e7da      	b.n	802f93a <__kernel_rem_pio2+0x5a>
 802f984:	ec51 0b18 	vmov	r0, r1, d8
 802f988:	e7f8      	b.n	802f97c <__kernel_rem_pio2+0x9c>
 802f98a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802f98e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 802f992:	f7d0 fe23 	bl	80005dc <__aeabi_dmul>
 802f996:	4602      	mov	r2, r0
 802f998:	460b      	mov	r3, r1
 802f99a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802f99e:	f7d0 fc67 	bl	8000270 <__adddf3>
 802f9a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802f9a6:	3601      	adds	r6, #1
 802f9a8:	9b06      	ldr	r3, [sp, #24]
 802f9aa:	429e      	cmp	r6, r3
 802f9ac:	f1a7 0708 	sub.w	r7, r7, #8
 802f9b0:	ddeb      	ble.n	802f98a <__kernel_rem_pio2+0xaa>
 802f9b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 802f9b6:	3508      	adds	r5, #8
 802f9b8:	ecab 7b02 	vstmia	fp!, {d7}
 802f9bc:	f108 0801 	add.w	r8, r8, #1
 802f9c0:	e7ca      	b.n	802f958 <__kernel_rem_pio2+0x78>
 802f9c2:	9b04      	ldr	r3, [sp, #16]
 802f9c4:	aa0c      	add	r2, sp, #48	; 0x30
 802f9c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802f9ca:	930b      	str	r3, [sp, #44]	; 0x2c
 802f9cc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 802f9ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802f9d2:	9c04      	ldr	r4, [sp, #16]
 802f9d4:	930a      	str	r3, [sp, #40]	; 0x28
 802f9d6:	ab98      	add	r3, sp, #608	; 0x260
 802f9d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802f9dc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 802f9e0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 802f9e4:	f8cd b008 	str.w	fp, [sp, #8]
 802f9e8:	4625      	mov	r5, r4
 802f9ea:	2d00      	cmp	r5, #0
 802f9ec:	dc78      	bgt.n	802fae0 <__kernel_rem_pio2+0x200>
 802f9ee:	ec47 6b10 	vmov	d0, r6, r7
 802f9f2:	4650      	mov	r0, sl
 802f9f4:	f000 fc10 	bl	8030218 <scalbn>
 802f9f8:	ec57 6b10 	vmov	r6, r7, d0
 802f9fc:	2200      	movs	r2, #0
 802f9fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 802fa02:	ee10 0a10 	vmov	r0, s0
 802fa06:	4639      	mov	r1, r7
 802fa08:	f7d0 fde8 	bl	80005dc <__aeabi_dmul>
 802fa0c:	ec41 0b10 	vmov	d0, r0, r1
 802fa10:	f000 fb7a 	bl	8030108 <floor>
 802fa14:	4b7f      	ldr	r3, [pc, #508]	; (802fc14 <__kernel_rem_pio2+0x334>)
 802fa16:	ec51 0b10 	vmov	r0, r1, d0
 802fa1a:	2200      	movs	r2, #0
 802fa1c:	f7d0 fdde 	bl	80005dc <__aeabi_dmul>
 802fa20:	4602      	mov	r2, r0
 802fa22:	460b      	mov	r3, r1
 802fa24:	4630      	mov	r0, r6
 802fa26:	4639      	mov	r1, r7
 802fa28:	f7d0 fc20 	bl	800026c <__aeabi_dsub>
 802fa2c:	460f      	mov	r7, r1
 802fa2e:	4606      	mov	r6, r0
 802fa30:	f7d1 f884 	bl	8000b3c <__aeabi_d2iz>
 802fa34:	9007      	str	r0, [sp, #28]
 802fa36:	f7d0 fd67 	bl	8000508 <__aeabi_i2d>
 802fa3a:	4602      	mov	r2, r0
 802fa3c:	460b      	mov	r3, r1
 802fa3e:	4630      	mov	r0, r6
 802fa40:	4639      	mov	r1, r7
 802fa42:	f7d0 fc13 	bl	800026c <__aeabi_dsub>
 802fa46:	f1ba 0f00 	cmp.w	sl, #0
 802fa4a:	4606      	mov	r6, r0
 802fa4c:	460f      	mov	r7, r1
 802fa4e:	dd70      	ble.n	802fb32 <__kernel_rem_pio2+0x252>
 802fa50:	1e62      	subs	r2, r4, #1
 802fa52:	ab0c      	add	r3, sp, #48	; 0x30
 802fa54:	9d07      	ldr	r5, [sp, #28]
 802fa56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802fa5a:	f1ca 0118 	rsb	r1, sl, #24
 802fa5e:	fa40 f301 	asr.w	r3, r0, r1
 802fa62:	441d      	add	r5, r3
 802fa64:	408b      	lsls	r3, r1
 802fa66:	1ac0      	subs	r0, r0, r3
 802fa68:	ab0c      	add	r3, sp, #48	; 0x30
 802fa6a:	9507      	str	r5, [sp, #28]
 802fa6c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 802fa70:	f1ca 0317 	rsb	r3, sl, #23
 802fa74:	fa40 f303 	asr.w	r3, r0, r3
 802fa78:	9302      	str	r3, [sp, #8]
 802fa7a:	9b02      	ldr	r3, [sp, #8]
 802fa7c:	2b00      	cmp	r3, #0
 802fa7e:	dd66      	ble.n	802fb4e <__kernel_rem_pio2+0x26e>
 802fa80:	9b07      	ldr	r3, [sp, #28]
 802fa82:	2200      	movs	r2, #0
 802fa84:	3301      	adds	r3, #1
 802fa86:	9307      	str	r3, [sp, #28]
 802fa88:	4615      	mov	r5, r2
 802fa8a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 802fa8e:	4294      	cmp	r4, r2
 802fa90:	f300 8099 	bgt.w	802fbc6 <__kernel_rem_pio2+0x2e6>
 802fa94:	f1ba 0f00 	cmp.w	sl, #0
 802fa98:	dd07      	ble.n	802faaa <__kernel_rem_pio2+0x1ca>
 802fa9a:	f1ba 0f01 	cmp.w	sl, #1
 802fa9e:	f000 80a5 	beq.w	802fbec <__kernel_rem_pio2+0x30c>
 802faa2:	f1ba 0f02 	cmp.w	sl, #2
 802faa6:	f000 80c1 	beq.w	802fc2c <__kernel_rem_pio2+0x34c>
 802faaa:	9b02      	ldr	r3, [sp, #8]
 802faac:	2b02      	cmp	r3, #2
 802faae:	d14e      	bne.n	802fb4e <__kernel_rem_pio2+0x26e>
 802fab0:	4632      	mov	r2, r6
 802fab2:	463b      	mov	r3, r7
 802fab4:	4958      	ldr	r1, [pc, #352]	; (802fc18 <__kernel_rem_pio2+0x338>)
 802fab6:	2000      	movs	r0, #0
 802fab8:	f7d0 fbd8 	bl	800026c <__aeabi_dsub>
 802fabc:	4606      	mov	r6, r0
 802fabe:	460f      	mov	r7, r1
 802fac0:	2d00      	cmp	r5, #0
 802fac2:	d044      	beq.n	802fb4e <__kernel_rem_pio2+0x26e>
 802fac4:	4650      	mov	r0, sl
 802fac6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 802fc08 <__kernel_rem_pio2+0x328>
 802faca:	f000 fba5 	bl	8030218 <scalbn>
 802face:	4630      	mov	r0, r6
 802fad0:	4639      	mov	r1, r7
 802fad2:	ec53 2b10 	vmov	r2, r3, d0
 802fad6:	f7d0 fbc9 	bl	800026c <__aeabi_dsub>
 802fada:	4606      	mov	r6, r0
 802fadc:	460f      	mov	r7, r1
 802fade:	e036      	b.n	802fb4e <__kernel_rem_pio2+0x26e>
 802fae0:	4b4e      	ldr	r3, [pc, #312]	; (802fc1c <__kernel_rem_pio2+0x33c>)
 802fae2:	2200      	movs	r2, #0
 802fae4:	4630      	mov	r0, r6
 802fae6:	4639      	mov	r1, r7
 802fae8:	f7d0 fd78 	bl	80005dc <__aeabi_dmul>
 802faec:	f7d1 f826 	bl	8000b3c <__aeabi_d2iz>
 802faf0:	f7d0 fd0a 	bl	8000508 <__aeabi_i2d>
 802faf4:	4b4a      	ldr	r3, [pc, #296]	; (802fc20 <__kernel_rem_pio2+0x340>)
 802faf6:	2200      	movs	r2, #0
 802faf8:	4680      	mov	r8, r0
 802fafa:	4689      	mov	r9, r1
 802fafc:	f7d0 fd6e 	bl	80005dc <__aeabi_dmul>
 802fb00:	4602      	mov	r2, r0
 802fb02:	460b      	mov	r3, r1
 802fb04:	4630      	mov	r0, r6
 802fb06:	4639      	mov	r1, r7
 802fb08:	f7d0 fbb0 	bl	800026c <__aeabi_dsub>
 802fb0c:	f7d1 f816 	bl	8000b3c <__aeabi_d2iz>
 802fb10:	9b02      	ldr	r3, [sp, #8]
 802fb12:	f843 0b04 	str.w	r0, [r3], #4
 802fb16:	3d01      	subs	r5, #1
 802fb18:	9302      	str	r3, [sp, #8]
 802fb1a:	ab70      	add	r3, sp, #448	; 0x1c0
 802fb1c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802fb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fb24:	4640      	mov	r0, r8
 802fb26:	4649      	mov	r1, r9
 802fb28:	f7d0 fba2 	bl	8000270 <__adddf3>
 802fb2c:	4606      	mov	r6, r0
 802fb2e:	460f      	mov	r7, r1
 802fb30:	e75b      	b.n	802f9ea <__kernel_rem_pio2+0x10a>
 802fb32:	d105      	bne.n	802fb40 <__kernel_rem_pio2+0x260>
 802fb34:	1e63      	subs	r3, r4, #1
 802fb36:	aa0c      	add	r2, sp, #48	; 0x30
 802fb38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 802fb3c:	15c3      	asrs	r3, r0, #23
 802fb3e:	e79b      	b.n	802fa78 <__kernel_rem_pio2+0x198>
 802fb40:	4b38      	ldr	r3, [pc, #224]	; (802fc24 <__kernel_rem_pio2+0x344>)
 802fb42:	2200      	movs	r2, #0
 802fb44:	f7d0 ffd0 	bl	8000ae8 <__aeabi_dcmpge>
 802fb48:	2800      	cmp	r0, #0
 802fb4a:	d139      	bne.n	802fbc0 <__kernel_rem_pio2+0x2e0>
 802fb4c:	9002      	str	r0, [sp, #8]
 802fb4e:	2200      	movs	r2, #0
 802fb50:	2300      	movs	r3, #0
 802fb52:	4630      	mov	r0, r6
 802fb54:	4639      	mov	r1, r7
 802fb56:	f7d0 ffa9 	bl	8000aac <__aeabi_dcmpeq>
 802fb5a:	2800      	cmp	r0, #0
 802fb5c:	f000 80b4 	beq.w	802fcc8 <__kernel_rem_pio2+0x3e8>
 802fb60:	f104 3bff 	add.w	fp, r4, #4294967295
 802fb64:	465b      	mov	r3, fp
 802fb66:	2200      	movs	r2, #0
 802fb68:	9904      	ldr	r1, [sp, #16]
 802fb6a:	428b      	cmp	r3, r1
 802fb6c:	da65      	bge.n	802fc3a <__kernel_rem_pio2+0x35a>
 802fb6e:	2a00      	cmp	r2, #0
 802fb70:	d07b      	beq.n	802fc6a <__kernel_rem_pio2+0x38a>
 802fb72:	ab0c      	add	r3, sp, #48	; 0x30
 802fb74:	f1aa 0a18 	sub.w	sl, sl, #24
 802fb78:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 802fb7c:	2b00      	cmp	r3, #0
 802fb7e:	f000 80a0 	beq.w	802fcc2 <__kernel_rem_pio2+0x3e2>
 802fb82:	ed9f 0b21 	vldr	d0, [pc, #132]	; 802fc08 <__kernel_rem_pio2+0x328>
 802fb86:	4650      	mov	r0, sl
 802fb88:	f000 fb46 	bl	8030218 <scalbn>
 802fb8c:	4f23      	ldr	r7, [pc, #140]	; (802fc1c <__kernel_rem_pio2+0x33c>)
 802fb8e:	ec55 4b10 	vmov	r4, r5, d0
 802fb92:	46d8      	mov	r8, fp
 802fb94:	2600      	movs	r6, #0
 802fb96:	f1b8 0f00 	cmp.w	r8, #0
 802fb9a:	f280 80cf 	bge.w	802fd3c <__kernel_rem_pio2+0x45c>
 802fb9e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 802fc00 <__kernel_rem_pio2+0x320>
 802fba2:	465f      	mov	r7, fp
 802fba4:	f04f 0800 	mov.w	r8, #0
 802fba8:	2f00      	cmp	r7, #0
 802fbaa:	f2c0 80fd 	blt.w	802fda8 <__kernel_rem_pio2+0x4c8>
 802fbae:	ab70      	add	r3, sp, #448	; 0x1c0
 802fbb0:	f8df a074 	ldr.w	sl, [pc, #116]	; 802fc28 <__kernel_rem_pio2+0x348>
 802fbb4:	ec55 4b18 	vmov	r4, r5, d8
 802fbb8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 802fbbc:	2600      	movs	r6, #0
 802fbbe:	e0e5      	b.n	802fd8c <__kernel_rem_pio2+0x4ac>
 802fbc0:	2302      	movs	r3, #2
 802fbc2:	9302      	str	r3, [sp, #8]
 802fbc4:	e75c      	b.n	802fa80 <__kernel_rem_pio2+0x1a0>
 802fbc6:	f8db 3000 	ldr.w	r3, [fp]
 802fbca:	b955      	cbnz	r5, 802fbe2 <__kernel_rem_pio2+0x302>
 802fbcc:	b123      	cbz	r3, 802fbd8 <__kernel_rem_pio2+0x2f8>
 802fbce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 802fbd2:	f8cb 3000 	str.w	r3, [fp]
 802fbd6:	2301      	movs	r3, #1
 802fbd8:	3201      	adds	r2, #1
 802fbda:	f10b 0b04 	add.w	fp, fp, #4
 802fbde:	461d      	mov	r5, r3
 802fbe0:	e755      	b.n	802fa8e <__kernel_rem_pio2+0x1ae>
 802fbe2:	1acb      	subs	r3, r1, r3
 802fbe4:	f8cb 3000 	str.w	r3, [fp]
 802fbe8:	462b      	mov	r3, r5
 802fbea:	e7f5      	b.n	802fbd8 <__kernel_rem_pio2+0x2f8>
 802fbec:	1e62      	subs	r2, r4, #1
 802fbee:	ab0c      	add	r3, sp, #48	; 0x30
 802fbf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fbf4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 802fbf8:	a90c      	add	r1, sp, #48	; 0x30
 802fbfa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 802fbfe:	e754      	b.n	802faaa <__kernel_rem_pio2+0x1ca>
	...
 802fc0c:	3ff00000 	.word	0x3ff00000
 802fc10:	08030ce0 	.word	0x08030ce0
 802fc14:	40200000 	.word	0x40200000
 802fc18:	3ff00000 	.word	0x3ff00000
 802fc1c:	3e700000 	.word	0x3e700000
 802fc20:	41700000 	.word	0x41700000
 802fc24:	3fe00000 	.word	0x3fe00000
 802fc28:	08030ca0 	.word	0x08030ca0
 802fc2c:	1e62      	subs	r2, r4, #1
 802fc2e:	ab0c      	add	r3, sp, #48	; 0x30
 802fc30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fc34:	f3c3 0315 	ubfx	r3, r3, #0, #22
 802fc38:	e7de      	b.n	802fbf8 <__kernel_rem_pio2+0x318>
 802fc3a:	a90c      	add	r1, sp, #48	; 0x30
 802fc3c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 802fc40:	3b01      	subs	r3, #1
 802fc42:	430a      	orrs	r2, r1
 802fc44:	e790      	b.n	802fb68 <__kernel_rem_pio2+0x288>
 802fc46:	3301      	adds	r3, #1
 802fc48:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 802fc4c:	2900      	cmp	r1, #0
 802fc4e:	d0fa      	beq.n	802fc46 <__kernel_rem_pio2+0x366>
 802fc50:	9a08      	ldr	r2, [sp, #32]
 802fc52:	18e3      	adds	r3, r4, r3
 802fc54:	18a6      	adds	r6, r4, r2
 802fc56:	aa20      	add	r2, sp, #128	; 0x80
 802fc58:	1c65      	adds	r5, r4, #1
 802fc5a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 802fc5e:	9302      	str	r3, [sp, #8]
 802fc60:	9b02      	ldr	r3, [sp, #8]
 802fc62:	42ab      	cmp	r3, r5
 802fc64:	da04      	bge.n	802fc70 <__kernel_rem_pio2+0x390>
 802fc66:	461c      	mov	r4, r3
 802fc68:	e6b5      	b.n	802f9d6 <__kernel_rem_pio2+0xf6>
 802fc6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802fc6c:	2301      	movs	r3, #1
 802fc6e:	e7eb      	b.n	802fc48 <__kernel_rem_pio2+0x368>
 802fc70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802fc72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802fc76:	f7d0 fc47 	bl	8000508 <__aeabi_i2d>
 802fc7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 802fc7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802fc80:	46b3      	mov	fp, r6
 802fc82:	461c      	mov	r4, r3
 802fc84:	2700      	movs	r7, #0
 802fc86:	f04f 0800 	mov.w	r8, #0
 802fc8a:	f04f 0900 	mov.w	r9, #0
 802fc8e:	9b06      	ldr	r3, [sp, #24]
 802fc90:	429f      	cmp	r7, r3
 802fc92:	dd06      	ble.n	802fca2 <__kernel_rem_pio2+0x3c2>
 802fc94:	ab70      	add	r3, sp, #448	; 0x1c0
 802fc96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802fc9a:	e9c3 8900 	strd	r8, r9, [r3]
 802fc9e:	3501      	adds	r5, #1
 802fca0:	e7de      	b.n	802fc60 <__kernel_rem_pio2+0x380>
 802fca2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 802fca6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 802fcaa:	f7d0 fc97 	bl	80005dc <__aeabi_dmul>
 802fcae:	4602      	mov	r2, r0
 802fcb0:	460b      	mov	r3, r1
 802fcb2:	4640      	mov	r0, r8
 802fcb4:	4649      	mov	r1, r9
 802fcb6:	f7d0 fadb 	bl	8000270 <__adddf3>
 802fcba:	3701      	adds	r7, #1
 802fcbc:	4680      	mov	r8, r0
 802fcbe:	4689      	mov	r9, r1
 802fcc0:	e7e5      	b.n	802fc8e <__kernel_rem_pio2+0x3ae>
 802fcc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 802fcc6:	e754      	b.n	802fb72 <__kernel_rem_pio2+0x292>
 802fcc8:	ec47 6b10 	vmov	d0, r6, r7
 802fccc:	f1ca 0000 	rsb	r0, sl, #0
 802fcd0:	f000 faa2 	bl	8030218 <scalbn>
 802fcd4:	ec57 6b10 	vmov	r6, r7, d0
 802fcd8:	4b9f      	ldr	r3, [pc, #636]	; (802ff58 <__kernel_rem_pio2+0x678>)
 802fcda:	ee10 0a10 	vmov	r0, s0
 802fcde:	2200      	movs	r2, #0
 802fce0:	4639      	mov	r1, r7
 802fce2:	f7d0 ff01 	bl	8000ae8 <__aeabi_dcmpge>
 802fce6:	b300      	cbz	r0, 802fd2a <__kernel_rem_pio2+0x44a>
 802fce8:	4b9c      	ldr	r3, [pc, #624]	; (802ff5c <__kernel_rem_pio2+0x67c>)
 802fcea:	2200      	movs	r2, #0
 802fcec:	4630      	mov	r0, r6
 802fcee:	4639      	mov	r1, r7
 802fcf0:	f7d0 fc74 	bl	80005dc <__aeabi_dmul>
 802fcf4:	f7d0 ff22 	bl	8000b3c <__aeabi_d2iz>
 802fcf8:	4605      	mov	r5, r0
 802fcfa:	f7d0 fc05 	bl	8000508 <__aeabi_i2d>
 802fcfe:	4b96      	ldr	r3, [pc, #600]	; (802ff58 <__kernel_rem_pio2+0x678>)
 802fd00:	2200      	movs	r2, #0
 802fd02:	f7d0 fc6b 	bl	80005dc <__aeabi_dmul>
 802fd06:	460b      	mov	r3, r1
 802fd08:	4602      	mov	r2, r0
 802fd0a:	4639      	mov	r1, r7
 802fd0c:	4630      	mov	r0, r6
 802fd0e:	f7d0 faad 	bl	800026c <__aeabi_dsub>
 802fd12:	f7d0 ff13 	bl	8000b3c <__aeabi_d2iz>
 802fd16:	f104 0b01 	add.w	fp, r4, #1
 802fd1a:	ab0c      	add	r3, sp, #48	; 0x30
 802fd1c:	f10a 0a18 	add.w	sl, sl, #24
 802fd20:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 802fd24:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 802fd28:	e72b      	b.n	802fb82 <__kernel_rem_pio2+0x2a2>
 802fd2a:	4630      	mov	r0, r6
 802fd2c:	4639      	mov	r1, r7
 802fd2e:	f7d0 ff05 	bl	8000b3c <__aeabi_d2iz>
 802fd32:	ab0c      	add	r3, sp, #48	; 0x30
 802fd34:	46a3      	mov	fp, r4
 802fd36:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 802fd3a:	e722      	b.n	802fb82 <__kernel_rem_pio2+0x2a2>
 802fd3c:	ab70      	add	r3, sp, #448	; 0x1c0
 802fd3e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 802fd42:	ab0c      	add	r3, sp, #48	; 0x30
 802fd44:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 802fd48:	f7d0 fbde 	bl	8000508 <__aeabi_i2d>
 802fd4c:	4622      	mov	r2, r4
 802fd4e:	462b      	mov	r3, r5
 802fd50:	f7d0 fc44 	bl	80005dc <__aeabi_dmul>
 802fd54:	4632      	mov	r2, r6
 802fd56:	e9c9 0100 	strd	r0, r1, [r9]
 802fd5a:	463b      	mov	r3, r7
 802fd5c:	4620      	mov	r0, r4
 802fd5e:	4629      	mov	r1, r5
 802fd60:	f7d0 fc3c 	bl	80005dc <__aeabi_dmul>
 802fd64:	f108 38ff 	add.w	r8, r8, #4294967295
 802fd68:	4604      	mov	r4, r0
 802fd6a:	460d      	mov	r5, r1
 802fd6c:	e713      	b.n	802fb96 <__kernel_rem_pio2+0x2b6>
 802fd6e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 802fd72:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 802fd76:	f7d0 fc31 	bl	80005dc <__aeabi_dmul>
 802fd7a:	4602      	mov	r2, r0
 802fd7c:	460b      	mov	r3, r1
 802fd7e:	4620      	mov	r0, r4
 802fd80:	4629      	mov	r1, r5
 802fd82:	f7d0 fa75 	bl	8000270 <__adddf3>
 802fd86:	3601      	adds	r6, #1
 802fd88:	4604      	mov	r4, r0
 802fd8a:	460d      	mov	r5, r1
 802fd8c:	9b04      	ldr	r3, [sp, #16]
 802fd8e:	429e      	cmp	r6, r3
 802fd90:	dc01      	bgt.n	802fd96 <__kernel_rem_pio2+0x4b6>
 802fd92:	45b0      	cmp	r8, r6
 802fd94:	daeb      	bge.n	802fd6e <__kernel_rem_pio2+0x48e>
 802fd96:	ab48      	add	r3, sp, #288	; 0x120
 802fd98:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802fd9c:	e9c3 4500 	strd	r4, r5, [r3]
 802fda0:	3f01      	subs	r7, #1
 802fda2:	f108 0801 	add.w	r8, r8, #1
 802fda6:	e6ff      	b.n	802fba8 <__kernel_rem_pio2+0x2c8>
 802fda8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 802fdaa:	2b02      	cmp	r3, #2
 802fdac:	dc0b      	bgt.n	802fdc6 <__kernel_rem_pio2+0x4e6>
 802fdae:	2b00      	cmp	r3, #0
 802fdb0:	dc6e      	bgt.n	802fe90 <__kernel_rem_pio2+0x5b0>
 802fdb2:	d045      	beq.n	802fe40 <__kernel_rem_pio2+0x560>
 802fdb4:	9b07      	ldr	r3, [sp, #28]
 802fdb6:	f003 0007 	and.w	r0, r3, #7
 802fdba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 802fdbe:	ecbd 8b02 	vpop	{d8}
 802fdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802fdc6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 802fdc8:	2b03      	cmp	r3, #3
 802fdca:	d1f3      	bne.n	802fdb4 <__kernel_rem_pio2+0x4d4>
 802fdcc:	ab48      	add	r3, sp, #288	; 0x120
 802fdce:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 802fdd2:	46d0      	mov	r8, sl
 802fdd4:	46d9      	mov	r9, fp
 802fdd6:	f1b9 0f00 	cmp.w	r9, #0
 802fdda:	f1a8 0808 	sub.w	r8, r8, #8
 802fdde:	dc64      	bgt.n	802feaa <__kernel_rem_pio2+0x5ca>
 802fde0:	465c      	mov	r4, fp
 802fde2:	2c01      	cmp	r4, #1
 802fde4:	f1aa 0a08 	sub.w	sl, sl, #8
 802fde8:	dc7e      	bgt.n	802fee8 <__kernel_rem_pio2+0x608>
 802fdea:	2000      	movs	r0, #0
 802fdec:	2100      	movs	r1, #0
 802fdee:	f1bb 0f01 	cmp.w	fp, #1
 802fdf2:	f300 8097 	bgt.w	802ff24 <__kernel_rem_pio2+0x644>
 802fdf6:	9b02      	ldr	r3, [sp, #8]
 802fdf8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 802fdfc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 802fe00:	2b00      	cmp	r3, #0
 802fe02:	f040 8099 	bne.w	802ff38 <__kernel_rem_pio2+0x658>
 802fe06:	9b01      	ldr	r3, [sp, #4]
 802fe08:	e9c3 5600 	strd	r5, r6, [r3]
 802fe0c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 802fe10:	e9c3 0104 	strd	r0, r1, [r3, #16]
 802fe14:	e7ce      	b.n	802fdb4 <__kernel_rem_pio2+0x4d4>
 802fe16:	ab48      	add	r3, sp, #288	; 0x120
 802fe18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802fe1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fe20:	f7d0 fa26 	bl	8000270 <__adddf3>
 802fe24:	f10b 3bff 	add.w	fp, fp, #4294967295
 802fe28:	f1bb 0f00 	cmp.w	fp, #0
 802fe2c:	daf3      	bge.n	802fe16 <__kernel_rem_pio2+0x536>
 802fe2e:	9b02      	ldr	r3, [sp, #8]
 802fe30:	b113      	cbz	r3, 802fe38 <__kernel_rem_pio2+0x558>
 802fe32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802fe36:	4619      	mov	r1, r3
 802fe38:	9b01      	ldr	r3, [sp, #4]
 802fe3a:	e9c3 0100 	strd	r0, r1, [r3]
 802fe3e:	e7b9      	b.n	802fdb4 <__kernel_rem_pio2+0x4d4>
 802fe40:	2000      	movs	r0, #0
 802fe42:	2100      	movs	r1, #0
 802fe44:	e7f0      	b.n	802fe28 <__kernel_rem_pio2+0x548>
 802fe46:	ab48      	add	r3, sp, #288	; 0x120
 802fe48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802fe4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fe50:	f7d0 fa0e 	bl	8000270 <__adddf3>
 802fe54:	3c01      	subs	r4, #1
 802fe56:	2c00      	cmp	r4, #0
 802fe58:	daf5      	bge.n	802fe46 <__kernel_rem_pio2+0x566>
 802fe5a:	9b02      	ldr	r3, [sp, #8]
 802fe5c:	b1e3      	cbz	r3, 802fe98 <__kernel_rem_pio2+0x5b8>
 802fe5e:	4602      	mov	r2, r0
 802fe60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802fe64:	9c01      	ldr	r4, [sp, #4]
 802fe66:	e9c4 2300 	strd	r2, r3, [r4]
 802fe6a:	4602      	mov	r2, r0
 802fe6c:	460b      	mov	r3, r1
 802fe6e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 802fe72:	f7d0 f9fb 	bl	800026c <__aeabi_dsub>
 802fe76:	ad4a      	add	r5, sp, #296	; 0x128
 802fe78:	2401      	movs	r4, #1
 802fe7a:	45a3      	cmp	fp, r4
 802fe7c:	da0f      	bge.n	802fe9e <__kernel_rem_pio2+0x5be>
 802fe7e:	9b02      	ldr	r3, [sp, #8]
 802fe80:	b113      	cbz	r3, 802fe88 <__kernel_rem_pio2+0x5a8>
 802fe82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802fe86:	4619      	mov	r1, r3
 802fe88:	9b01      	ldr	r3, [sp, #4]
 802fe8a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802fe8e:	e791      	b.n	802fdb4 <__kernel_rem_pio2+0x4d4>
 802fe90:	465c      	mov	r4, fp
 802fe92:	2000      	movs	r0, #0
 802fe94:	2100      	movs	r1, #0
 802fe96:	e7de      	b.n	802fe56 <__kernel_rem_pio2+0x576>
 802fe98:	4602      	mov	r2, r0
 802fe9a:	460b      	mov	r3, r1
 802fe9c:	e7e2      	b.n	802fe64 <__kernel_rem_pio2+0x584>
 802fe9e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 802fea2:	f7d0 f9e5 	bl	8000270 <__adddf3>
 802fea6:	3401      	adds	r4, #1
 802fea8:	e7e7      	b.n	802fe7a <__kernel_rem_pio2+0x59a>
 802feaa:	e9d8 4500 	ldrd	r4, r5, [r8]
 802feae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 802feb2:	4620      	mov	r0, r4
 802feb4:	4632      	mov	r2, r6
 802feb6:	463b      	mov	r3, r7
 802feb8:	4629      	mov	r1, r5
 802feba:	f7d0 f9d9 	bl	8000270 <__adddf3>
 802febe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802fec2:	4602      	mov	r2, r0
 802fec4:	460b      	mov	r3, r1
 802fec6:	4620      	mov	r0, r4
 802fec8:	4629      	mov	r1, r5
 802feca:	f7d0 f9cf 	bl	800026c <__aeabi_dsub>
 802fece:	4632      	mov	r2, r6
 802fed0:	463b      	mov	r3, r7
 802fed2:	f7d0 f9cd 	bl	8000270 <__adddf3>
 802fed6:	ed9d 7b04 	vldr	d7, [sp, #16]
 802feda:	e9c8 0102 	strd	r0, r1, [r8, #8]
 802fede:	ed88 7b00 	vstr	d7, [r8]
 802fee2:	f109 39ff 	add.w	r9, r9, #4294967295
 802fee6:	e776      	b.n	802fdd6 <__kernel_rem_pio2+0x4f6>
 802fee8:	e9da 8900 	ldrd	r8, r9, [sl]
 802feec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 802fef0:	4640      	mov	r0, r8
 802fef2:	4632      	mov	r2, r6
 802fef4:	463b      	mov	r3, r7
 802fef6:	4649      	mov	r1, r9
 802fef8:	f7d0 f9ba 	bl	8000270 <__adddf3>
 802fefc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802ff00:	4602      	mov	r2, r0
 802ff02:	460b      	mov	r3, r1
 802ff04:	4640      	mov	r0, r8
 802ff06:	4649      	mov	r1, r9
 802ff08:	f7d0 f9b0 	bl	800026c <__aeabi_dsub>
 802ff0c:	4632      	mov	r2, r6
 802ff0e:	463b      	mov	r3, r7
 802ff10:	f7d0 f9ae 	bl	8000270 <__adddf3>
 802ff14:	ed9d 7b04 	vldr	d7, [sp, #16]
 802ff18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802ff1c:	ed8a 7b00 	vstr	d7, [sl]
 802ff20:	3c01      	subs	r4, #1
 802ff22:	e75e      	b.n	802fde2 <__kernel_rem_pio2+0x502>
 802ff24:	ab48      	add	r3, sp, #288	; 0x120
 802ff26:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802ff2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ff2e:	f7d0 f99f 	bl	8000270 <__adddf3>
 802ff32:	f10b 3bff 	add.w	fp, fp, #4294967295
 802ff36:	e75a      	b.n	802fdee <__kernel_rem_pio2+0x50e>
 802ff38:	9b01      	ldr	r3, [sp, #4]
 802ff3a:	9a01      	ldr	r2, [sp, #4]
 802ff3c:	601d      	str	r5, [r3, #0]
 802ff3e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 802ff42:	605c      	str	r4, [r3, #4]
 802ff44:	609f      	str	r7, [r3, #8]
 802ff46:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 802ff4a:	60d3      	str	r3, [r2, #12]
 802ff4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802ff50:	6110      	str	r0, [r2, #16]
 802ff52:	6153      	str	r3, [r2, #20]
 802ff54:	e72e      	b.n	802fdb4 <__kernel_rem_pio2+0x4d4>
 802ff56:	bf00      	nop
 802ff58:	41700000 	.word	0x41700000
 802ff5c:	3e700000 	.word	0x3e700000

0802ff60 <__kernel_sin>:
 802ff60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ff64:	ed2d 8b04 	vpush	{d8-d9}
 802ff68:	eeb0 8a41 	vmov.f32	s16, s2
 802ff6c:	eef0 8a61 	vmov.f32	s17, s3
 802ff70:	ec55 4b10 	vmov	r4, r5, d0
 802ff74:	b083      	sub	sp, #12
 802ff76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802ff7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 802ff7e:	9001      	str	r0, [sp, #4]
 802ff80:	da06      	bge.n	802ff90 <__kernel_sin+0x30>
 802ff82:	ee10 0a10 	vmov	r0, s0
 802ff86:	4629      	mov	r1, r5
 802ff88:	f7d0 fdd8 	bl	8000b3c <__aeabi_d2iz>
 802ff8c:	2800      	cmp	r0, #0
 802ff8e:	d051      	beq.n	8030034 <__kernel_sin+0xd4>
 802ff90:	4622      	mov	r2, r4
 802ff92:	462b      	mov	r3, r5
 802ff94:	4620      	mov	r0, r4
 802ff96:	4629      	mov	r1, r5
 802ff98:	f7d0 fb20 	bl	80005dc <__aeabi_dmul>
 802ff9c:	4682      	mov	sl, r0
 802ff9e:	468b      	mov	fp, r1
 802ffa0:	4602      	mov	r2, r0
 802ffa2:	460b      	mov	r3, r1
 802ffa4:	4620      	mov	r0, r4
 802ffa6:	4629      	mov	r1, r5
 802ffa8:	f7d0 fb18 	bl	80005dc <__aeabi_dmul>
 802ffac:	a341      	add	r3, pc, #260	; (adr r3, 80300b4 <__kernel_sin+0x154>)
 802ffae:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ffb2:	4680      	mov	r8, r0
 802ffb4:	4689      	mov	r9, r1
 802ffb6:	4650      	mov	r0, sl
 802ffb8:	4659      	mov	r1, fp
 802ffba:	f7d0 fb0f 	bl	80005dc <__aeabi_dmul>
 802ffbe:	a33f      	add	r3, pc, #252	; (adr r3, 80300bc <__kernel_sin+0x15c>)
 802ffc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ffc4:	f7d0 f952 	bl	800026c <__aeabi_dsub>
 802ffc8:	4652      	mov	r2, sl
 802ffca:	465b      	mov	r3, fp
 802ffcc:	f7d0 fb06 	bl	80005dc <__aeabi_dmul>
 802ffd0:	a33c      	add	r3, pc, #240	; (adr r3, 80300c4 <__kernel_sin+0x164>)
 802ffd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ffd6:	f7d0 f94b 	bl	8000270 <__adddf3>
 802ffda:	4652      	mov	r2, sl
 802ffdc:	465b      	mov	r3, fp
 802ffde:	f7d0 fafd 	bl	80005dc <__aeabi_dmul>
 802ffe2:	a33a      	add	r3, pc, #232	; (adr r3, 80300cc <__kernel_sin+0x16c>)
 802ffe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ffe8:	f7d0 f940 	bl	800026c <__aeabi_dsub>
 802ffec:	4652      	mov	r2, sl
 802ffee:	465b      	mov	r3, fp
 802fff0:	f7d0 faf4 	bl	80005dc <__aeabi_dmul>
 802fff4:	a337      	add	r3, pc, #220	; (adr r3, 80300d4 <__kernel_sin+0x174>)
 802fff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fffa:	f7d0 f939 	bl	8000270 <__adddf3>
 802fffe:	9b01      	ldr	r3, [sp, #4]
 8030000:	4606      	mov	r6, r0
 8030002:	460f      	mov	r7, r1
 8030004:	b9eb      	cbnz	r3, 8030042 <__kernel_sin+0xe2>
 8030006:	4602      	mov	r2, r0
 8030008:	460b      	mov	r3, r1
 803000a:	4650      	mov	r0, sl
 803000c:	4659      	mov	r1, fp
 803000e:	f7d0 fae5 	bl	80005dc <__aeabi_dmul>
 8030012:	a325      	add	r3, pc, #148	; (adr r3, 80300a8 <__kernel_sin+0x148>)
 8030014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030018:	f7d0 f928 	bl	800026c <__aeabi_dsub>
 803001c:	4642      	mov	r2, r8
 803001e:	464b      	mov	r3, r9
 8030020:	f7d0 fadc 	bl	80005dc <__aeabi_dmul>
 8030024:	4602      	mov	r2, r0
 8030026:	460b      	mov	r3, r1
 8030028:	4620      	mov	r0, r4
 803002a:	4629      	mov	r1, r5
 803002c:	f7d0 f920 	bl	8000270 <__adddf3>
 8030030:	4604      	mov	r4, r0
 8030032:	460d      	mov	r5, r1
 8030034:	ec45 4b10 	vmov	d0, r4, r5
 8030038:	b003      	add	sp, #12
 803003a:	ecbd 8b04 	vpop	{d8-d9}
 803003e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030042:	4b1b      	ldr	r3, [pc, #108]	; (80300b0 <__kernel_sin+0x150>)
 8030044:	ec51 0b18 	vmov	r0, r1, d8
 8030048:	2200      	movs	r2, #0
 803004a:	f7d0 fac7 	bl	80005dc <__aeabi_dmul>
 803004e:	4632      	mov	r2, r6
 8030050:	ec41 0b19 	vmov	d9, r0, r1
 8030054:	463b      	mov	r3, r7
 8030056:	4640      	mov	r0, r8
 8030058:	4649      	mov	r1, r9
 803005a:	f7d0 fabf 	bl	80005dc <__aeabi_dmul>
 803005e:	4602      	mov	r2, r0
 8030060:	460b      	mov	r3, r1
 8030062:	ec51 0b19 	vmov	r0, r1, d9
 8030066:	f7d0 f901 	bl	800026c <__aeabi_dsub>
 803006a:	4652      	mov	r2, sl
 803006c:	465b      	mov	r3, fp
 803006e:	f7d0 fab5 	bl	80005dc <__aeabi_dmul>
 8030072:	ec53 2b18 	vmov	r2, r3, d8
 8030076:	f7d0 f8f9 	bl	800026c <__aeabi_dsub>
 803007a:	a30b      	add	r3, pc, #44	; (adr r3, 80300a8 <__kernel_sin+0x148>)
 803007c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030080:	4606      	mov	r6, r0
 8030082:	460f      	mov	r7, r1
 8030084:	4640      	mov	r0, r8
 8030086:	4649      	mov	r1, r9
 8030088:	f7d0 faa8 	bl	80005dc <__aeabi_dmul>
 803008c:	4602      	mov	r2, r0
 803008e:	460b      	mov	r3, r1
 8030090:	4630      	mov	r0, r6
 8030092:	4639      	mov	r1, r7
 8030094:	f7d0 f8ec 	bl	8000270 <__adddf3>
 8030098:	4602      	mov	r2, r0
 803009a:	460b      	mov	r3, r1
 803009c:	4620      	mov	r0, r4
 803009e:	4629      	mov	r1, r5
 80300a0:	f7d0 f8e4 	bl	800026c <__aeabi_dsub>
 80300a4:	e7c4      	b.n	8030030 <__kernel_sin+0xd0>
 80300a6:	bf00      	nop
 80300a8:	55555549 	.word	0x55555549
 80300ac:	3fc55555 	.word	0x3fc55555
 80300b0:	3fe00000 	.word	0x3fe00000
 80300b4:	5acfd57c 	.word	0x5acfd57c
 80300b8:	3de5d93a 	.word	0x3de5d93a
 80300bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80300c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80300c4:	57b1fe7d 	.word	0x57b1fe7d
 80300c8:	3ec71de3 	.word	0x3ec71de3
 80300cc:	19c161d5 	.word	0x19c161d5
 80300d0:	3f2a01a0 	.word	0x3f2a01a0
 80300d4:	1110f8a6 	.word	0x1110f8a6
 80300d8:	3f811111 	.word	0x3f811111

080300dc <fabs>:
 80300dc:	ec51 0b10 	vmov	r0, r1, d0
 80300e0:	ee10 2a10 	vmov	r2, s0
 80300e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80300e8:	ec43 2b10 	vmov	d0, r2, r3
 80300ec:	4770      	bx	lr

080300ee <finite>:
 80300ee:	b082      	sub	sp, #8
 80300f0:	ed8d 0b00 	vstr	d0, [sp]
 80300f4:	9801      	ldr	r0, [sp, #4]
 80300f6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80300fa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80300fe:	0fc0      	lsrs	r0, r0, #31
 8030100:	b002      	add	sp, #8
 8030102:	4770      	bx	lr
 8030104:	0000      	movs	r0, r0
	...

08030108 <floor>:
 8030108:	ec51 0b10 	vmov	r0, r1, d0
 803010c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030110:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8030114:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8030118:	2e13      	cmp	r6, #19
 803011a:	ee10 5a10 	vmov	r5, s0
 803011e:	ee10 8a10 	vmov	r8, s0
 8030122:	460c      	mov	r4, r1
 8030124:	dc32      	bgt.n	803018c <floor+0x84>
 8030126:	2e00      	cmp	r6, #0
 8030128:	da14      	bge.n	8030154 <floor+0x4c>
 803012a:	a333      	add	r3, pc, #204	; (adr r3, 80301f8 <floor+0xf0>)
 803012c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030130:	f7d0 f89e 	bl	8000270 <__adddf3>
 8030134:	2200      	movs	r2, #0
 8030136:	2300      	movs	r3, #0
 8030138:	f7d0 fce0 	bl	8000afc <__aeabi_dcmpgt>
 803013c:	b138      	cbz	r0, 803014e <floor+0x46>
 803013e:	2c00      	cmp	r4, #0
 8030140:	da57      	bge.n	80301f2 <floor+0xea>
 8030142:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8030146:	431d      	orrs	r5, r3
 8030148:	d001      	beq.n	803014e <floor+0x46>
 803014a:	4c2d      	ldr	r4, [pc, #180]	; (8030200 <floor+0xf8>)
 803014c:	2500      	movs	r5, #0
 803014e:	4621      	mov	r1, r4
 8030150:	4628      	mov	r0, r5
 8030152:	e025      	b.n	80301a0 <floor+0x98>
 8030154:	4f2b      	ldr	r7, [pc, #172]	; (8030204 <floor+0xfc>)
 8030156:	4137      	asrs	r7, r6
 8030158:	ea01 0307 	and.w	r3, r1, r7
 803015c:	4303      	orrs	r3, r0
 803015e:	d01f      	beq.n	80301a0 <floor+0x98>
 8030160:	a325      	add	r3, pc, #148	; (adr r3, 80301f8 <floor+0xf0>)
 8030162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030166:	f7d0 f883 	bl	8000270 <__adddf3>
 803016a:	2200      	movs	r2, #0
 803016c:	2300      	movs	r3, #0
 803016e:	f7d0 fcc5 	bl	8000afc <__aeabi_dcmpgt>
 8030172:	2800      	cmp	r0, #0
 8030174:	d0eb      	beq.n	803014e <floor+0x46>
 8030176:	2c00      	cmp	r4, #0
 8030178:	bfbe      	ittt	lt
 803017a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 803017e:	fa43 f606 	asrlt.w	r6, r3, r6
 8030182:	19a4      	addlt	r4, r4, r6
 8030184:	ea24 0407 	bic.w	r4, r4, r7
 8030188:	2500      	movs	r5, #0
 803018a:	e7e0      	b.n	803014e <floor+0x46>
 803018c:	2e33      	cmp	r6, #51	; 0x33
 803018e:	dd0b      	ble.n	80301a8 <floor+0xa0>
 8030190:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8030194:	d104      	bne.n	80301a0 <floor+0x98>
 8030196:	ee10 2a10 	vmov	r2, s0
 803019a:	460b      	mov	r3, r1
 803019c:	f7d0 f868 	bl	8000270 <__adddf3>
 80301a0:	ec41 0b10 	vmov	d0, r0, r1
 80301a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80301a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80301ac:	f04f 33ff 	mov.w	r3, #4294967295
 80301b0:	fa23 f707 	lsr.w	r7, r3, r7
 80301b4:	4207      	tst	r7, r0
 80301b6:	d0f3      	beq.n	80301a0 <floor+0x98>
 80301b8:	a30f      	add	r3, pc, #60	; (adr r3, 80301f8 <floor+0xf0>)
 80301ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80301be:	f7d0 f857 	bl	8000270 <__adddf3>
 80301c2:	2200      	movs	r2, #0
 80301c4:	2300      	movs	r3, #0
 80301c6:	f7d0 fc99 	bl	8000afc <__aeabi_dcmpgt>
 80301ca:	2800      	cmp	r0, #0
 80301cc:	d0bf      	beq.n	803014e <floor+0x46>
 80301ce:	2c00      	cmp	r4, #0
 80301d0:	da02      	bge.n	80301d8 <floor+0xd0>
 80301d2:	2e14      	cmp	r6, #20
 80301d4:	d103      	bne.n	80301de <floor+0xd6>
 80301d6:	3401      	adds	r4, #1
 80301d8:	ea25 0507 	bic.w	r5, r5, r7
 80301dc:	e7b7      	b.n	803014e <floor+0x46>
 80301de:	2301      	movs	r3, #1
 80301e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80301e4:	fa03 f606 	lsl.w	r6, r3, r6
 80301e8:	4435      	add	r5, r6
 80301ea:	4545      	cmp	r5, r8
 80301ec:	bf38      	it	cc
 80301ee:	18e4      	addcc	r4, r4, r3
 80301f0:	e7f2      	b.n	80301d8 <floor+0xd0>
 80301f2:	2500      	movs	r5, #0
 80301f4:	462c      	mov	r4, r5
 80301f6:	e7aa      	b.n	803014e <floor+0x46>
 80301f8:	8800759c 	.word	0x8800759c
 80301fc:	7e37e43c 	.word	0x7e37e43c
 8030200:	bff00000 	.word	0xbff00000
 8030204:	000fffff 	.word	0x000fffff

08030208 <nan>:
 8030208:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8030210 <nan+0x8>
 803020c:	4770      	bx	lr
 803020e:	bf00      	nop
 8030210:	00000000 	.word	0x00000000
 8030214:	7ff80000 	.word	0x7ff80000

08030218 <scalbn>:
 8030218:	b570      	push	{r4, r5, r6, lr}
 803021a:	ec55 4b10 	vmov	r4, r5, d0
 803021e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8030222:	4606      	mov	r6, r0
 8030224:	462b      	mov	r3, r5
 8030226:	b99a      	cbnz	r2, 8030250 <scalbn+0x38>
 8030228:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 803022c:	4323      	orrs	r3, r4
 803022e:	d036      	beq.n	803029e <scalbn+0x86>
 8030230:	4b39      	ldr	r3, [pc, #228]	; (8030318 <scalbn+0x100>)
 8030232:	4629      	mov	r1, r5
 8030234:	ee10 0a10 	vmov	r0, s0
 8030238:	2200      	movs	r2, #0
 803023a:	f7d0 f9cf 	bl	80005dc <__aeabi_dmul>
 803023e:	4b37      	ldr	r3, [pc, #220]	; (803031c <scalbn+0x104>)
 8030240:	429e      	cmp	r6, r3
 8030242:	4604      	mov	r4, r0
 8030244:	460d      	mov	r5, r1
 8030246:	da10      	bge.n	803026a <scalbn+0x52>
 8030248:	a32b      	add	r3, pc, #172	; (adr r3, 80302f8 <scalbn+0xe0>)
 803024a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803024e:	e03a      	b.n	80302c6 <scalbn+0xae>
 8030250:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8030254:	428a      	cmp	r2, r1
 8030256:	d10c      	bne.n	8030272 <scalbn+0x5a>
 8030258:	ee10 2a10 	vmov	r2, s0
 803025c:	4620      	mov	r0, r4
 803025e:	4629      	mov	r1, r5
 8030260:	f7d0 f806 	bl	8000270 <__adddf3>
 8030264:	4604      	mov	r4, r0
 8030266:	460d      	mov	r5, r1
 8030268:	e019      	b.n	803029e <scalbn+0x86>
 803026a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 803026e:	460b      	mov	r3, r1
 8030270:	3a36      	subs	r2, #54	; 0x36
 8030272:	4432      	add	r2, r6
 8030274:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8030278:	428a      	cmp	r2, r1
 803027a:	dd08      	ble.n	803028e <scalbn+0x76>
 803027c:	2d00      	cmp	r5, #0
 803027e:	a120      	add	r1, pc, #128	; (adr r1, 8030300 <scalbn+0xe8>)
 8030280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8030284:	da1c      	bge.n	80302c0 <scalbn+0xa8>
 8030286:	a120      	add	r1, pc, #128	; (adr r1, 8030308 <scalbn+0xf0>)
 8030288:	e9d1 0100 	ldrd	r0, r1, [r1]
 803028c:	e018      	b.n	80302c0 <scalbn+0xa8>
 803028e:	2a00      	cmp	r2, #0
 8030290:	dd08      	ble.n	80302a4 <scalbn+0x8c>
 8030292:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8030296:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 803029a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 803029e:	ec45 4b10 	vmov	d0, r4, r5
 80302a2:	bd70      	pop	{r4, r5, r6, pc}
 80302a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80302a8:	da19      	bge.n	80302de <scalbn+0xc6>
 80302aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80302ae:	429e      	cmp	r6, r3
 80302b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80302b4:	dd0a      	ble.n	80302cc <scalbn+0xb4>
 80302b6:	a112      	add	r1, pc, #72	; (adr r1, 8030300 <scalbn+0xe8>)
 80302b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80302bc:	2b00      	cmp	r3, #0
 80302be:	d1e2      	bne.n	8030286 <scalbn+0x6e>
 80302c0:	a30f      	add	r3, pc, #60	; (adr r3, 8030300 <scalbn+0xe8>)
 80302c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80302c6:	f7d0 f989 	bl	80005dc <__aeabi_dmul>
 80302ca:	e7cb      	b.n	8030264 <scalbn+0x4c>
 80302cc:	a10a      	add	r1, pc, #40	; (adr r1, 80302f8 <scalbn+0xe0>)
 80302ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80302d2:	2b00      	cmp	r3, #0
 80302d4:	d0b8      	beq.n	8030248 <scalbn+0x30>
 80302d6:	a10e      	add	r1, pc, #56	; (adr r1, 8030310 <scalbn+0xf8>)
 80302d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80302dc:	e7b4      	b.n	8030248 <scalbn+0x30>
 80302de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80302e2:	3236      	adds	r2, #54	; 0x36
 80302e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80302e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80302ec:	4620      	mov	r0, r4
 80302ee:	4b0c      	ldr	r3, [pc, #48]	; (8030320 <scalbn+0x108>)
 80302f0:	2200      	movs	r2, #0
 80302f2:	e7e8      	b.n	80302c6 <scalbn+0xae>
 80302f4:	f3af 8000 	nop.w
 80302f8:	c2f8f359 	.word	0xc2f8f359
 80302fc:	01a56e1f 	.word	0x01a56e1f
 8030300:	8800759c 	.word	0x8800759c
 8030304:	7e37e43c 	.word	0x7e37e43c
 8030308:	8800759c 	.word	0x8800759c
 803030c:	fe37e43c 	.word	0xfe37e43c
 8030310:	c2f8f359 	.word	0xc2f8f359
 8030314:	81a56e1f 	.word	0x81a56e1f
 8030318:	43500000 	.word	0x43500000
 803031c:	ffff3cb0 	.word	0xffff3cb0
 8030320:	3c900000 	.word	0x3c900000

08030324 <_init>:
 8030324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030326:	bf00      	nop
 8030328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803032a:	bc08      	pop	{r3}
 803032c:	469e      	mov	lr, r3
 803032e:	4770      	bx	lr

08030330 <_fini>:
 8030330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030332:	bf00      	nop
 8030334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8030336:	bc08      	pop	{r3}
 8030338:	469e      	mov	lr, r3
 803033a:	4770      	bx	lr
