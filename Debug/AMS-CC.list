
AMS-CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016224  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  080163b8  080163b8  000263b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080167b0  080167b0  0003135c  2**0
                  CONTENTS
  4 .ARM          00000008  080167b0  080167b0  000267b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080167b8  080167b8  0003135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080167b8  080167b8  000267b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080167bc  080167bc  000267bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000135c  20000000  080167c0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003135c  2**0
                  CONTENTS
 10 .bss          0000cbac  20001360  20001360  00031360  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000df0c  2000df0c  00031360  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003135c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003b033  00000000  00000000  0003138c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000845f  00000000  00000000  0006c3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002300  00000000  00000000  00074820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e48  00000000  00000000  00076b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002835c  00000000  00000000  00078968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002dd9e  00000000  00000000  000a0cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efb1c  00000000  00000000  000cea62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001be57e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008e94  00000000  00000000  001be5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001360 	.word	0x20001360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801639c 	.word	0x0801639c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001364 	.word	0x20001364
 80001cc:	0801639c 	.word	0x0801639c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2000de58 	.word	0x2000de58

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b96e 	b.w	8000f60 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8083 	bne.w	8000db2 <__udivmoddi4+0x116>
 8000cac:	428a      	cmp	r2, r1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	d947      	bls.n	8000d42 <__udivmoddi4+0xa6>
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	b142      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb8:	f1c2 0020 	rsb	r0, r2, #32
 8000cbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	4097      	lsls	r7, r2
 8000cc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cce:	0c23      	lsrs	r3, r4, #16
 8000cd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd4:	fa1f fe87 	uxth.w	lr, r7
 8000cd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x60>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 8119 	bcs.w	8000f24 <__udivmoddi4+0x288>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 8116 	bls.w	8000f24 <__udivmoddi4+0x288>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x8c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	f080 8105 	bcs.w	8000f28 <__udivmoddi4+0x28c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8102 	bls.w	8000f28 <__udivmoddi4+0x28c>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2c:	eba4 040e 	sub.w	r4, r4, lr
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa0>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	b902      	cbnz	r2, 8000d46 <__udivmoddi4+0xaa>
 8000d44:	deff      	udf	#255	; 0xff
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d150      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d4e:	1bcb      	subs	r3, r1, r7
 8000d50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	2601      	movs	r6, #1
 8000d5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5e:	0c21      	lsrs	r1, r4, #16
 8000d60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb08 f30c 	mul.w	r3, r8, ip
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0xe4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0xe2>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	f200 80e9 	bhi.w	8000f50 <__udivmoddi4+0x2b4>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1ac9      	subs	r1, r1, r3
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x10c>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x10a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80d9 	bhi.w	8000f58 <__udivmoddi4+0x2bc>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e7bf      	b.n	8000d32 <__udivmoddi4+0x96>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80b1 	beq.w	8000f1e <__udivmoddi4+0x282>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x1cc>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b8 	bhi.w	8000f4c <__udivmoddi4+0x2b0>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0103 	sbc.w	r1, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	468c      	mov	ip, r1
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0a8      	beq.n	8000d3c <__udivmoddi4+0xa0>
 8000dea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dee:	e7a5      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f603 	lsr.w	r6, r0, r3
 8000df8:	4097      	lsls	r7, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	4330      	orrs	r0, r6
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb06 f108 	mul.w	r1, r6, r8
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x19c>
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e2a:	f080 808d 	bcs.w	8000f48 <__udivmoddi4+0x2ac>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 808a 	bls.w	8000f48 <__udivmoddi4+0x2ac>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	443b      	add	r3, r7
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b281      	uxth	r1, r0
 8000e3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb00 f308 	mul.w	r3, r0, r8
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	1879      	adds	r1, r7, r1
 8000e52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e56:	d273      	bcs.n	8000f40 <__udivmoddi4+0x2a4>
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d971      	bls.n	8000f40 <__udivmoddi4+0x2a4>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4439      	add	r1, r7
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e66:	e778      	b.n	8000d5a <__udivmoddi4+0xbe>
 8000e68:	f1c6 0c20 	rsb	ip, r6, #32
 8000e6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e74:	431c      	orrs	r4, r3
 8000e76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c3b      	lsrs	r3, r7, #16
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fa1f f884 	uxth.w	r8, r4
 8000e92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x220>
 8000eaa:	1861      	adds	r1, r4, r1
 8000eac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb0:	d248      	bcs.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb2:	458a      	cmp	sl, r1
 8000eb4:	d946      	bls.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4421      	add	r1, r4
 8000ebc:	eba1 010a 	sub.w	r1, r1, sl
 8000ec0:	b2bf      	uxth	r7, r7
 8000ec2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ece:	fb00 f808 	mul.w	r8, r0, r8
 8000ed2:	45b8      	cmp	r8, r7
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x24a>
 8000ed6:	19e7      	adds	r7, r4, r7
 8000ed8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000edc:	d22e      	bcs.n	8000f3c <__udivmoddi4+0x2a0>
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d92c      	bls.n	8000f3c <__udivmoddi4+0x2a0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4427      	add	r7, r4
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	eba7 0708 	sub.w	r7, r7, r8
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	454f      	cmp	r7, r9
 8000ef4:	46c6      	mov	lr, r8
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	d31a      	bcc.n	8000f30 <__udivmoddi4+0x294>
 8000efa:	d017      	beq.n	8000f2c <__udivmoddi4+0x290>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x27a>
 8000efe:	ebb3 020e 	subs.w	r2, r3, lr
 8000f02:	eb67 0701 	sbc.w	r7, r7, r1
 8000f06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f0a:	40f2      	lsrs	r2, r6
 8000f0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f10:	40f7      	lsrs	r7, r6
 8000f12:	e9c5 2700 	strd	r2, r7, [r5]
 8000f16:	2600      	movs	r6, #0
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e70b      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fd      	b.n	8000d28 <__udivmoddi4+0x8c>
 8000f2c:	4543      	cmp	r3, r8
 8000f2e:	d2e5      	bcs.n	8000efc <__udivmoddi4+0x260>
 8000f30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f34:	eb69 0104 	sbc.w	r1, r9, r4
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7df      	b.n	8000efc <__udivmoddi4+0x260>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e7d2      	b.n	8000ee6 <__udivmoddi4+0x24a>
 8000f40:	4660      	mov	r0, ip
 8000f42:	e78d      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f44:	4681      	mov	r9, r0
 8000f46:	e7b9      	b.n	8000ebc <__udivmoddi4+0x220>
 8000f48:	4666      	mov	r6, ip
 8000f4a:	e775      	b.n	8000e38 <__udivmoddi4+0x19c>
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	e74a      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f54:	4439      	add	r1, r7
 8000f56:	e713      	b.n	8000d80 <__udivmoddi4+0xe4>
 8000f58:	3802      	subs	r0, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e724      	b.n	8000da8 <__udivmoddi4+0x10c>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <inc_res>:
 * @Brief	Increments if true, resets (to zero) otherwise
 * @Param	A conditional statement which evaluates to true or false
 * @Param	A pointer to an integer which may be incremented or reset
 * @Retval	Void
 */
static void inc_res(uint8_t cnd, uint8_t *ptr) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
	if (cnd) {
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <inc_res+0x20>
		ptr[0]++;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	701a      	strb	r2, [r3, #0]
	} else {
		ptr[0] = 0;
	}
}
 8000f82:	e002      	b.n	8000f8a <inc_res+0x26>
		ptr[0] = 0;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <COM_voltages_ok_d>:
 * @Param	A flag which says whether the values are valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_voltages_ok_d(double *voltages, uint8_t valid,
		uint16_t sample_constraint) {
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 4.19;
 8000fa8:	4b30      	ldr	r3, [pc, #192]	; (800106c <COM_voltages_ok_d+0xd4>)
 8000faa:	613b      	str	r3, [r7, #16]
	const float lower_boundary = 2.81;
 8000fac:	4b30      	ldr	r3, [pc, #192]	; (8001070 <COM_voltages_ok_d+0xd8>)
 8000fae:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 126; p++) {
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e052      	b.n	800105c <COM_voltages_ok_d+0xc4>
		inc_res(valid && (voltages[p] > upper_boundary), &over_voltages[p]);
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <COM_voltages_ok_d+0x4c>
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000fc8:	6938      	ldr	r0, [r7, #16]
 8000fca:	f7ff faaf 	bl	800052c <__aeabi_f2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	f7ff fd91 	bl	8000afc <__aeabi_dcmpgt>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <COM_voltages_ok_d+0x4c>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <COM_voltages_ok_d+0x4e>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	4922      	ldr	r1, [pc, #136]	; (8001074 <COM_voltages_ok_d+0xdc>)
 8000fec:	440b      	add	r3, r1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	f7ff ffb7 	bl	8000f64 <inc_res>
		inc_res(valid && (lower_boundary > voltages[p]), &under_voltages[p]);
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00f      	beq.n	800101c <COM_voltages_ok_d+0x84>
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f7ff fa95 	bl	800052c <__aeabi_f2d>
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f7ff fd75 	bl	8000afc <__aeabi_dcmpgt>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <COM_voltages_ok_d+0x84>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <COM_voltages_ok_d+0x86>
 800101c:	2300      	movs	r3, #0
 800101e:	b2da      	uxtb	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	4915      	ldr	r1, [pc, #84]	; (8001078 <COM_voltages_ok_d+0xe0>)
 8001024:	440b      	add	r3, r1
 8001026:	4619      	mov	r1, r3
 8001028:	4610      	mov	r0, r2
 800102a:	f7ff ff9b 	bl	8000f64 <inc_res>

		if (over_voltages[p] > sample_constraint) {
 800102e:	4a11      	ldr	r2, [pc, #68]	; (8001074 <COM_voltages_ok_d+0xdc>)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b29b      	uxth	r3, r3
 8001038:	883a      	ldrh	r2, [r7, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d201      	bcs.n	8001042 <COM_voltages_ok_d+0xaa>
			return 0;
 800103e:	2300      	movs	r3, #0
 8001040:	e010      	b.n	8001064 <COM_voltages_ok_d+0xcc>
		}
		if (under_voltages[p] > sample_constraint) {
 8001042:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <COM_voltages_ok_d+0xe0>)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	883a      	ldrh	r2, [r7, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d201      	bcs.n	8001056 <COM_voltages_ok_d+0xbe>
			return 0;
 8001052:	2300      	movs	r3, #0
 8001054:	e006      	b.n	8001064 <COM_voltages_ok_d+0xcc>
	for (int p = 0; p < 126; p++) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2b7d      	cmp	r3, #125	; 0x7d
 8001060:	dda9      	ble.n	8000fb6 <COM_voltages_ok_d+0x1e>
		}
	}

	return 1;
 8001062:	2301      	movs	r3, #1

}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bdb0      	pop	{r4, r5, r7, pc}
 800106c:	4086147b 	.word	0x4086147b
 8001070:	4033d70a 	.word	0x4033d70a
 8001074:	2000137c 	.word	0x2000137c
 8001078:	200013fc 	.word	0x200013fc

0800107c <COM_temperatures_ok_d>:
 * @Param	A flag which says whether the values are valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_temperatures_ok_d(double *temperatures, uint8_t valid,
		uint16_t sample_constraint) {
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
 8001088:	4613      	mov	r3, r2
 800108a:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 60;
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <COM_temperatures_ok_d+0xd4>)
 800108e:	613b      	str	r3, [r7, #16]
	const float lower_boundary = -20;
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <COM_temperatures_ok_d+0xd8>)
 8001092:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 60; p++) {
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e052      	b.n	8001140 <COM_temperatures_ok_d+0xc4>
		inc_res(valid && (temperatures[p] > upper_boundary),
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d013      	beq.n	80010c8 <COM_temperatures_ok_d+0x4c>
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	4413      	add	r3, r2
 80010a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80010ac:	6938      	ldr	r0, [r7, #16]
 80010ae:	f7ff fa3d 	bl	800052c <__aeabi_f2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4620      	mov	r0, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	f7ff fd1f 	bl	8000afc <__aeabi_dcmpgt>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <COM_temperatures_ok_d+0x4c>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <COM_temperatures_ok_d+0x4e>
 80010c8:	2300      	movs	r3, #0
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	4922      	ldr	r1, [pc, #136]	; (8001158 <COM_temperatures_ok_d+0xdc>)
 80010d0:	440b      	add	r3, r1
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f7ff ff45 	bl	8000f64 <inc_res>
				&over_temperatures[p]);
		inc_res(valid && (lower_boundary > temperatures[p]),
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00f      	beq.n	8001100 <COM_temperatures_ok_d+0x84>
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff fa23 	bl	800052c <__aeabi_f2d>
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fd03 	bl	8000afc <__aeabi_dcmpgt>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <COM_temperatures_ok_d+0x84>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <COM_temperatures_ok_d+0x86>
 8001100:	2300      	movs	r3, #0
 8001102:	b2da      	uxtb	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	4915      	ldr	r1, [pc, #84]	; (800115c <COM_temperatures_ok_d+0xe0>)
 8001108:	440b      	add	r3, r1
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
 800110e:	f7ff ff29 	bl	8000f64 <inc_res>
				&under_temperatures[p]);

		if (over_temperatures[p] > sample_constraint) {
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <COM_temperatures_ok_d+0xdc>)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	883a      	ldrh	r2, [r7, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d201      	bcs.n	8001126 <COM_temperatures_ok_d+0xaa>
			return 0;
 8001122:	2300      	movs	r3, #0
 8001124:	e010      	b.n	8001148 <COM_temperatures_ok_d+0xcc>
		}
		if (under_temperatures[p] > sample_constraint) {
 8001126:	4a0d      	ldr	r2, [pc, #52]	; (800115c <COM_temperatures_ok_d+0xe0>)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	883a      	ldrh	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d201      	bcs.n	800113a <COM_temperatures_ok_d+0xbe>
			return 0;
 8001136:	2300      	movs	r3, #0
 8001138:	e006      	b.n	8001148 <COM_temperatures_ok_d+0xcc>
	for (int p = 0; p < 60; p++) {
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2b3b      	cmp	r3, #59	; 0x3b
 8001144:	dda9      	ble.n	800109a <COM_temperatures_ok_d+0x1e>
		}
	}

	return 1;
 8001146:	2301      	movs	r3, #1

}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bdb0      	pop	{r4, r5, r7, pc}
 8001150:	42700000 	.word	0x42700000
 8001154:	c1a00000 	.word	0xc1a00000
 8001158:	2000147c 	.word	0x2000147c
 800115c:	200014b8 	.word	0x200014b8

08001160 <COM_current_ok_d>:
 * @Param	A flag which says whether the value is valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_current_ok_d(double *current, uint8_t valid,
		uint16_t sample_constraint) {
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
 800116c:	4613      	mov	r3, r2
 800116e:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 40;
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <COM_current_ok_d+0xa4>)
 8001172:	60fb      	str	r3, [r7, #12]
	const float lower_boundary = -100;
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <COM_current_ok_d+0xa8>)
 8001176:	60bb      	str	r3, [r7, #8]

	inc_res(valid && (current[0] > upper_boundary), &over_current);
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d010      	beq.n	80011a0 <COM_current_ok_d+0x40>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f7ff f9d1 	bl	800052c <__aeabi_f2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4620      	mov	r0, r4
 8001190:	4629      	mov	r1, r5
 8001192:	f7ff fcb3 	bl	8000afc <__aeabi_dcmpgt>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <COM_current_ok_d+0x40>
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <COM_current_ok_d+0x42>
 80011a0:	2300      	movs	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4919      	ldr	r1, [pc, #100]	; (800120c <COM_current_ok_d+0xac>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fedc 	bl	8000f64 <inc_res>
	inc_res(valid && (lower_boundary > current[0]), &under_current);
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00c      	beq.n	80011cc <COM_current_ok_d+0x6c>
 80011b2:	68b8      	ldr	r0, [r7, #8]
 80011b4:	f7ff f9ba 	bl	800052c <__aeabi_f2d>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff fc9d 	bl	8000afc <__aeabi_dcmpgt>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <COM_current_ok_d+0x6c>
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <COM_current_ok_d+0x6e>
 80011cc:	2300      	movs	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	490f      	ldr	r1, [pc, #60]	; (8001210 <COM_current_ok_d+0xb0>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fec6 	bl	8000f64 <inc_res>

	if (over_current > sample_constraint) {
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <COM_current_ok_d+0xac>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	883a      	ldrh	r2, [r7, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d201      	bcs.n	80011e8 <COM_current_ok_d+0x88>
		return 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e008      	b.n	80011fa <COM_current_ok_d+0x9a>
	}
	if (under_current > sample_constraint) {
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <COM_current_ok_d+0xb0>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	883a      	ldrh	r2, [r7, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d201      	bcs.n	80011f8 <COM_current_ok_d+0x98>
		return 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e000      	b.n	80011fa <COM_current_ok_d+0x9a>
	}

	return 1;
 80011f8:	2301      	movs	r3, #1

}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bdb0      	pop	{r4, r5, r7, pc}
 8001202:	bf00      	nop
 8001204:	42200000 	.word	0x42200000
 8001208:	c2c80000 	.word	0xc2c80000
 800120c:	200014f4 	.word	0x200014f4
 8001210:	200014f5 	.word	0x200014f5

08001214 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001218:	4803      	ldr	r0, [pc, #12]	; (8001228 <_cbSendSystemDesc+0x14>)
 800121a:	f014 f995 	bl	8015548 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800121e:	4803      	ldr	r0, [pc, #12]	; (800122c <_cbSendSystemDesc+0x18>)
 8001220:	f014 f992 	bl	8015548 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	080163b8 	.word	0x080163b8
 800122c:	080163e4 	.word	0x080163e4

08001230 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <SEGGER_SYSVIEW_Conf+0x20>)
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <SEGGER_SYSVIEW_Conf+0x20>)
 800123a:	6819      	ldr	r1, [r3, #0]
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <SEGGER_SYSVIEW_Conf+0x24>)
 800123e:	4a06      	ldr	r2, [pc, #24]	; (8001258 <SEGGER_SYSVIEW_Conf+0x28>)
 8001240:	f013 fd00 	bl	8014c44 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001244:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001248:	f013 fd40 	bl	8014ccc <SEGGER_SYSVIEW_SetRAMBase>
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000004 	.word	0x20000004
 8001254:	08001215 	.word	0x08001215
 8001258:	08016518 	.word	0x08016518

0800125c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	b085      	sub	sp, #20
 8001260:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	e048      	b.n	80012fa <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001268:	4929      	ldr	r1, [pc, #164]	; (8001310 <_cbSendTaskList+0xb4>)
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f012 f831 	bl	80132e0 <uxTaskGetStackHighWaterMark>
 800127e:	4601      	mov	r1, r0
 8001280:	4823      	ldr	r0, [pc, #140]	; (8001310 <_cbSendTaskList+0xb4>)
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4403      	add	r3, r0
 800128e:	3310      	adds	r3, #16
 8001290:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001292:	491f      	ldr	r1, [pc, #124]	; (8001310 <_cbSendTaskList+0xb4>)
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	491b      	ldr	r1, [pc, #108]	; (8001310 <_cbSendTaskList+0xb4>)
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	440b      	add	r3, r1
 80012b0:	3304      	adds	r3, #4
 80012b2:	6819      	ldr	r1, [r3, #0]
 80012b4:	4c16      	ldr	r4, [pc, #88]	; (8001310 <_cbSendTaskList+0xb4>)
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4423      	add	r3, r4
 80012c2:	3308      	adds	r3, #8
 80012c4:	681c      	ldr	r4, [r3, #0]
 80012c6:	4d12      	ldr	r5, [pc, #72]	; (8001310 <_cbSendTaskList+0xb4>)
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	442b      	add	r3, r5
 80012d4:	330c      	adds	r3, #12
 80012d6:	681d      	ldr	r5, [r3, #0]
 80012d8:	4e0d      	ldr	r6, [pc, #52]	; (8001310 <_cbSendTaskList+0xb4>)
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4433      	add	r3, r6
 80012e6:	3310      	adds	r3, #16
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	462b      	mov	r3, r5
 80012ee:	4622      	mov	r2, r4
 80012f0:	f000 f8b6 	bl	8001460 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3301      	adds	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <_cbSendTaskList+0xb8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	d3b1      	bcc.n	8001268 <_cbSendTaskList+0xc>
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130e:	bf00      	nop
 8001310:	200014f8 	.word	0x200014f8
 8001314:	20001598 	.word	0x20001598

08001318 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800131e:	f011 fcb7 	bl	8012c90 <xTaskGetTickCountFromISR>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800132e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	f04f 0400 	mov.w	r4, #0
 800133a:	f04f 0500 	mov.w	r5, #0
 800133e:	015d      	lsls	r5, r3, #5
 8001340:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001344:	0154      	lsls	r4, r2, #5
 8001346:	4622      	mov	r2, r4
 8001348:	462b      	mov	r3, r5
 800134a:	1a12      	subs	r2, r2, r0
 800134c:	eb63 0301 	sbc.w	r3, r3, r1
 8001350:	f04f 0400 	mov.w	r4, #0
 8001354:	f04f 0500 	mov.w	r5, #0
 8001358:	009d      	lsls	r5, r3, #2
 800135a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800135e:	0094      	lsls	r4, r2, #2
 8001360:	4622      	mov	r2, r4
 8001362:	462b      	mov	r3, r5
 8001364:	1812      	adds	r2, r2, r0
 8001366:	eb41 0303 	adc.w	r3, r1, r3
 800136a:	f04f 0000 	mov.w	r0, #0
 800136e:	f04f 0100 	mov.w	r1, #0
 8001372:	00d9      	lsls	r1, r3, #3
 8001374:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001378:	00d0      	lsls	r0, r2, #3
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8001382:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bdb0      	pop	{r4, r5, r7, pc}

08001390 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800139e:	2205      	movs	r2, #5
 80013a0:	492b      	ldr	r1, [pc, #172]	; (8001450 <SYSVIEW_AddTask+0xc0>)
 80013a2:	68b8      	ldr	r0, [r7, #8]
 80013a4:	f014 fb7c 	bl	8015aa0 <memcmp>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d04b      	beq.n	8001446 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80013ae:	4b29      	ldr	r3, [pc, #164]	; (8001454 <SYSVIEW_AddTask+0xc4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b07      	cmp	r3, #7
 80013b4:	d903      	bls.n	80013be <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80013b6:	4828      	ldr	r0, [pc, #160]	; (8001458 <SYSVIEW_AddTask+0xc8>)
 80013b8:	f014 faea 	bl	8015990 <SEGGER_SYSVIEW_Warn>
    return;
 80013bc:	e044      	b.n	8001448 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80013be:	4b25      	ldr	r3, [pc, #148]	; (8001454 <SYSVIEW_AddTask+0xc4>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4926      	ldr	r1, [pc, #152]	; (800145c <SYSVIEW_AddTask+0xcc>)
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <SYSVIEW_AddTask+0xc4>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4921      	ldr	r1, [pc, #132]	; (800145c <SYSVIEW_AddTask+0xcc>)
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	3304      	adds	r3, #4
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <SYSVIEW_AddTask+0xc4>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	491b      	ldr	r1, [pc, #108]	; (800145c <SYSVIEW_AddTask+0xcc>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	3308      	adds	r3, #8
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <SYSVIEW_AddTask+0xc4>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4916      	ldr	r1, [pc, #88]	; (800145c <SYSVIEW_AddTask+0xcc>)
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	330c      	adds	r3, #12
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <SYSVIEW_AddTask+0xc4>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4910      	ldr	r1, [pc, #64]	; (800145c <SYSVIEW_AddTask+0xcc>)
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3310      	adds	r3, #16
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <SYSVIEW_AddTask+0xc4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	4a08      	ldr	r2, [pc, #32]	; (8001454 <SYSVIEW_AddTask+0xc4>)
 8001432:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 f80e 	bl	8001460 <SYSVIEW_SendTaskInfo>
 8001444:	e000      	b.n	8001448 <SYSVIEW_AddTask+0xb8>
    return;
 8001446:	bf00      	nop

}
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	080163f4 	.word	0x080163f4
 8001454:	20001598 	.word	0x20001598
 8001458:	080163fc 	.word	0x080163fc
 800145c:	200014f8 	.word	0x200014f8

08001460 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	2214      	movs	r2, #20
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f014 fb2e 	bl	8015ad8 <memset>
  TaskInfo.TaskID     = TaskID;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800148c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4618      	mov	r0, r3
 8001496:	f013 ff5f 	bl	8015358 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	; 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014aa:	463b      	mov	r3, r7
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014b6:	4b37      	ldr	r3, [pc, #220]	; (8001594 <MX_ADC1_Init+0xf0>)
 80014b8:	4a37      	ldr	r2, [pc, #220]	; (8001598 <MX_ADC1_Init+0xf4>)
 80014ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014bc:	4b35      	ldr	r3, [pc, #212]	; (8001594 <MX_ADC1_Init+0xf0>)
 80014be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014c4:	4b33      	ldr	r3, [pc, #204]	; (8001594 <MX_ADC1_Init+0xf0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80014ca:	4b32      	ldr	r3, [pc, #200]	; (8001594 <MX_ADC1_Init+0xf0>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014d0:	4b30      	ldr	r3, [pc, #192]	; (8001594 <MX_ADC1_Init+0xf0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <MX_ADC1_Init+0xf0>)
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014de:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <MX_ADC1_Init+0xf0>)
 80014e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80014e6:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <MX_ADC1_Init+0xf0>)
 80014e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ee:	4b29      	ldr	r3, [pc, #164]	; (8001594 <MX_ADC1_Init+0xf0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <MX_ADC1_Init+0xf0>)
 80014f6:	2204      	movs	r2, #4
 80014f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <MX_ADC1_Init+0xf0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <MX_ADC1_Init+0xf0>)
 8001504:	2201      	movs	r2, #1
 8001506:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001508:	4822      	ldr	r0, [pc, #136]	; (8001594 <MX_ADC1_Init+0xf0>)
 800150a:	f00c f9f5 	bl	800d8f8 <HAL_ADC_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001514:	f001 f828 	bl	8002568 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001518:	2301      	movs	r3, #1
 800151a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800151c:	2301      	movs	r3, #1
 800151e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001520:	2302      	movs	r3, #2
 8001522:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	481a      	ldr	r0, [pc, #104]	; (8001594 <MX_ADC1_Init+0xf0>)
 800152a:	f00c fb7d 	bl	800dc28 <HAL_ADC_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001534:	f001 f818 	bl	8002568 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001538:	2302      	movs	r3, #2
 800153a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800153c:	2302      	movs	r3, #2
 800153e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	4619      	mov	r1, r3
 8001544:	4813      	ldr	r0, [pc, #76]	; (8001594 <MX_ADC1_Init+0xf0>)
 8001546:	f00c fb6f 	bl	800dc28 <HAL_ADC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001550:	f001 f80a 	bl	8002568 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001554:	2303      	movs	r3, #3
 8001556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001558:	2303      	movs	r3, #3
 800155a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	4619      	mov	r1, r3
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <MX_ADC1_Init+0xf0>)
 8001562:	f00c fb61 	bl	800dc28 <HAL_ADC_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 800156c:	f000 fffc 	bl	8002568 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001570:	2304      	movs	r3, #4
 8001572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001574:	2304      	movs	r3, #4
 8001576:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_ADC1_Init+0xf0>)
 800157e:	f00c fb53 	bl	800dc28 <HAL_ADC_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001588:	f000 ffee 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	2000ad5c 	.word	0x2000ad5c
 8001598:	40012000 	.word	0x40012000

0800159c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a33      	ldr	r2, [pc, #204]	; (8001688 <HAL_ADC_MspInit+0xec>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d15f      	bne.n	800167e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b32      	ldr	r3, [pc, #200]	; (800168c <HAL_ADC_MspInit+0xf0>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	4a31      	ldr	r2, [pc, #196]	; (800168c <HAL_ADC_MspInit+0xf0>)
 80015c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015cc:	6453      	str	r3, [r2, #68]	; 0x44
 80015ce:	4b2f      	ldr	r3, [pc, #188]	; (800168c <HAL_ADC_MspInit+0xf0>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b2b      	ldr	r3, [pc, #172]	; (800168c <HAL_ADC_MspInit+0xf0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a2a      	ldr	r2, [pc, #168]	; (800168c <HAL_ADC_MspInit+0xf0>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b28      	ldr	r3, [pc, #160]	; (800168c <HAL_ADC_MspInit+0xf0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = precharge_resistor_temperature_Pin|fuse_resistor_temperature_Pin|aux_temp1_Pin|aux_temp2_Pin;
 80015f6:	231e      	movs	r3, #30
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fa:	2303      	movs	r3, #3
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4821      	ldr	r0, [pc, #132]	; (8001690 <HAL_ADC_MspInit+0xf4>)
 800160a:	f00d fe25 	bl	800f258 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_ADC_MspInit+0xf8>)
 8001610:	4a21      	ldr	r2, [pc, #132]	; (8001698 <HAL_ADC_MspInit+0xfc>)
 8001612:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001614:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <HAL_ADC_MspInit+0xf8>)
 8001616:	2200      	movs	r2, #0
 8001618:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_ADC_MspInit+0xf8>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001620:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <HAL_ADC_MspInit+0xf8>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_ADC_MspInit+0xf8>)
 8001628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800162c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_ADC_MspInit+0xf8>)
 8001630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001634:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_ADC_MspInit+0xf8>)
 8001638:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_ADC_MspInit+0xf8>)
 8001640:	2200      	movs	r2, #0
 8001642:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_ADC_MspInit+0xf8>)
 8001646:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800164a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_ADC_MspInit+0xf8>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001652:	4810      	ldr	r0, [pc, #64]	; (8001694 <HAL_ADC_MspInit+0xf8>)
 8001654:	f00d fb16 	bl	800ec84 <HAL_DMA_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800165e:	f000 ff83 	bl	8002568 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <HAL_ADC_MspInit+0xf8>)
 8001666:	639a      	str	r2, [r3, #56]	; 0x38
 8001668:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <HAL_ADC_MspInit+0xf8>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2105      	movs	r1, #5
 8001672:	2012      	movs	r0, #18
 8001674:	f00d fadc 	bl	800ec30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001678:	2012      	movs	r0, #18
 800167a:	f00d faf5 	bl	800ec68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40012000 	.word	0x40012000
 800168c:	40023800 	.word	0x40023800
 8001690:	40020000 	.word	0x40020000
 8001694:	2000ada4 	.word	0x2000ada4
 8001698:	40026410 	.word	0x40026410

0800169c <HAL_ADC_ConvCpltCallback>:
		ADC_FLAG = 0;
		HAL_ADC_Start_DMA(&hadc1, buf, len);
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	ADC_FLAG = 1;
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	801a      	strh	r2, [r3, #0]

}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000000 	.word	0x20000000

080016bc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MX_CAN1_Init+0x64>)
 80016c2:	4a18      	ldr	r2, [pc, #96]	; (8001724 <MX_CAN1_Init+0x68>)
 80016c4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <MX_CAN1_Init+0x64>)
 80016c8:	2203      	movs	r2, #3
 80016ca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_CAN1_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <MX_CAN1_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_CAN1_Init+0x64>)
 80016da:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80016de:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_CAN1_Init+0x64>)
 80016e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016e6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <MX_CAN1_Init+0x64>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_CAN1_Init+0x64>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <MX_CAN1_Init+0x64>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_CAN1_Init+0x64>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <MX_CAN1_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_CAN1_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <MX_CAN1_Init+0x64>)
 800170e:	f00c fcb3 	bl	800e078 <HAL_CAN_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001718:	f000 ff26 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2000ae68 	.word	0x2000ae68
 8001724:	40006400 	.word	0x40006400

08001728 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <MX_CAN2_Init+0x64>)
 800172e:	4a18      	ldr	r2, [pc, #96]	; (8001790 <MX_CAN2_Init+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <MX_CAN2_Init+0x64>)
 8001734:	2206      	movs	r2, #6
 8001736:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <MX_CAN2_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <MX_CAN2_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_CAN2_Init+0x64>)
 8001746:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800174a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_CAN2_Init+0x64>)
 800174e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001752:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <MX_CAN2_Init+0x64>)
 8001756:	2200      	movs	r2, #0
 8001758:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_CAN2_Init+0x64>)
 800175c:	2200      	movs	r2, #0
 800175e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <MX_CAN2_Init+0x64>)
 8001762:	2200      	movs	r2, #0
 8001764:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_CAN2_Init+0x64>)
 8001768:	2200      	movs	r2, #0
 800176a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <MX_CAN2_Init+0x64>)
 800176e:	2200      	movs	r2, #0
 8001770:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_CAN2_Init+0x64>)
 8001774:	2200      	movs	r2, #0
 8001776:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <MX_CAN2_Init+0x64>)
 800177a:	f00c fc7d 	bl	800e078 <HAL_CAN_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001784:	f000 fef0 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	2000ae40 	.word	0x2000ae40
 8001790:	40006800 	.word	0x40006800

08001794 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	; 0x30
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a4f      	ldr	r2, [pc, #316]	; (80018f0 <HAL_CAN_MspInit+0x15c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d14e      	bne.n	8001854 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80017b6:	4b4f      	ldr	r3, [pc, #316]	; (80018f4 <HAL_CAN_MspInit+0x160>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a4d      	ldr	r2, [pc, #308]	; (80018f4 <HAL_CAN_MspInit+0x160>)
 80017be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80017c0:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <HAL_CAN_MspInit+0x160>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d10d      	bne.n	80017e4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
 80017cc:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <HAL_CAN_MspInit+0x164>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	4a49      	ldr	r2, [pc, #292]	; (80018f8 <HAL_CAN_MspInit+0x164>)
 80017d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017d6:	6413      	str	r3, [r2, #64]	; 0x40
 80017d8:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_CAN_MspInit+0x164>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <HAL_CAN_MspInit+0x164>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a42      	ldr	r2, [pc, #264]	; (80018f8 <HAL_CAN_MspInit+0x164>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <HAL_CAN_MspInit+0x164>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001800:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001812:	2309      	movs	r3, #9
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	4837      	ldr	r0, [pc, #220]	; (80018fc <HAL_CAN_MspInit+0x168>)
 800181e:	f00d fd1b 	bl	800f258 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2105      	movs	r1, #5
 8001826:	2013      	movs	r0, #19
 8001828:	f00d fa02 	bl	800ec30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800182c:	2013      	movs	r0, #19
 800182e:	f00d fa1b 	bl	800ec68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2105      	movs	r1, #5
 8001836:	2014      	movs	r0, #20
 8001838:	f00d f9fa 	bl	800ec30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800183c:	2014      	movs	r0, #20
 800183e:	f00d fa13 	bl	800ec68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2105      	movs	r1, #5
 8001846:	2015      	movs	r0, #21
 8001848:	f00d f9f2 	bl	800ec30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800184c:	2015      	movs	r0, #21
 800184e:	f00d fa0b 	bl	800ec68 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001852:	e048      	b.n	80018e6 <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a29      	ldr	r2, [pc, #164]	; (8001900 <HAL_CAN_MspInit+0x16c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d143      	bne.n	80018e6 <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_CAN_MspInit+0x164>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a24      	ldr	r2, [pc, #144]	; (80018f8 <HAL_CAN_MspInit+0x164>)
 8001868:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_CAN_MspInit+0x164>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_CAN_MspInit+0x160>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <HAL_CAN_MspInit+0x160>)
 8001882:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_CAN_MspInit+0x160>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d10d      	bne.n	80018a8 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_CAN_MspInit+0x164>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <HAL_CAN_MspInit+0x164>)
 8001896:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800189a:	6413      	str	r3, [r2, #64]	; 0x40
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <HAL_CAN_MspInit+0x164>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_CAN_MspInit+0x164>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <HAL_CAN_MspInit+0x164>)
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	6313      	str	r3, [r2, #48]	; 0x30
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_CAN_MspInit+0x164>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80018c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80018d6:	2309      	movs	r3, #9
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	4619      	mov	r1, r3
 80018e0:	4808      	ldr	r0, [pc, #32]	; (8001904 <HAL_CAN_MspInit+0x170>)
 80018e2:	f00d fcb9 	bl	800f258 <HAL_GPIO_Init>
}
 80018e6:	bf00      	nop
 80018e8:	3730      	adds	r7, #48	; 0x30
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40006400 	.word	0x40006400
 80018f4:	2000159c 	.word	0x2000159c
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000
 8001900:	40006800 	.word	0x40006800
 8001904:	40020400 	.word	0x40020400

08001908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_DMA_Init+0x3c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <MX_DMA_Init+0x3c>)
 8001918:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_DMA_Init+0x3c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2105      	movs	r1, #5
 800192e:	2038      	movs	r0, #56	; 0x38
 8001930:	f00d f97e 	bl	800ec30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001934:	2038      	movs	r0, #56	; 0x38
 8001936:	f00d f997 	bl	800ec68 <HAL_NVIC_EnableIRQ>

}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800

08001948 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b4d      	ldr	r3, [pc, #308]	; (8001a98 <MX_GPIO_Init+0x150>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a4c      	ldr	r2, [pc, #304]	; (8001a98 <MX_GPIO_Init+0x150>)
 8001968:	f043 0310 	orr.w	r3, r3, #16
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b4a      	ldr	r3, [pc, #296]	; (8001a98 <MX_GPIO_Init+0x150>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b46      	ldr	r3, [pc, #280]	; (8001a98 <MX_GPIO_Init+0x150>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a45      	ldr	r2, [pc, #276]	; (8001a98 <MX_GPIO_Init+0x150>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b43      	ldr	r3, [pc, #268]	; (8001a98 <MX_GPIO_Init+0x150>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <MX_GPIO_Init+0x150>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a3e      	ldr	r2, [pc, #248]	; (8001a98 <MX_GPIO_Init+0x150>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b3c      	ldr	r3, [pc, #240]	; (8001a98 <MX_GPIO_Init+0x150>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <MX_GPIO_Init+0x150>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a37      	ldr	r2, [pc, #220]	; (8001a98 <MX_GPIO_Init+0x150>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b35      	ldr	r3, [pc, #212]	; (8001a98 <MX_GPIO_Init+0x150>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin, GPIO_PIN_RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	210e      	movs	r1, #14
 80019d2:	4832      	ldr	r0, [pc, #200]	; (8001a9c <MX_GPIO_Init+0x154>)
 80019d4:	f00d fddc 	bl	800f590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	21e0      	movs	r1, #224	; 0xe0
 80019dc:	4830      	ldr	r0, [pc, #192]	; (8001aa0 <MX_GPIO_Init+0x158>)
 80019de:	f00d fdd7 	bl	800f590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 80019e8:	482e      	ldr	r0, [pc, #184]	; (8001aa4 <MX_GPIO_Init+0x15c>)
 80019ea:	f00d fdd1 	bl	800f590 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin;
 80019ee:	230e      	movs	r3, #14
 80019f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	4825      	ldr	r0, [pc, #148]	; (8001a9c <MX_GPIO_Init+0x154>)
 8001a06:	f00d fc27 	bl	800f258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIR_plus_closed_Pin|AIR_minus_closed_Pin|precharge_closed_Pin;
 8001a0a:	2370      	movs	r3, #112	; 0x70
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	481f      	ldr	r0, [pc, #124]	; (8001a9c <MX_GPIO_Init+0x154>)
 8001a1e:	f00d fc1b 	bl	800f258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin;
 8001a22:	23e0      	movs	r3, #224	; 0xe0
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	4819      	ldr	r0, [pc, #100]	; (8001aa0 <MX_GPIO_Init+0x158>)
 8001a3a:	f00d fc0d 	bl	800f258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin;
 8001a3e:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 8001a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	4813      	ldr	r0, [pc, #76]	; (8001aa4 <MX_GPIO_Init+0x15c>)
 8001a58:	f00d fbfe 	bl	800f258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SC_probe_Pin|IMD_ok_Pin;
 8001a5c:	2306      	movs	r3, #6
 8001a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480e      	ldr	r0, [pc, #56]	; (8001aa8 <MX_GPIO_Init+0x160>)
 8001a70:	f00d fbf2 	bl	800f258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AMS_error_latched_Pin|IMD_error_latched_Pin;
 8001a74:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <MX_GPIO_Init+0x15c>)
 8001a8a:	f00d fbe5 	bl	800f258 <HAL_GPIO_Init>

}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	00000000 	.word	0x00000000

08001ab0 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main() {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0

	SEGGER_SYSVIEW_Conf();
 8001ab4:	f7ff fbbc 	bl	8001230 <SEGGER_SYSVIEW_Conf>

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ab8:	f00b fedc 	bl	800d874 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001abc:	f000 f8e0 	bl	8001c80 <SystemClock_Config>

	/* Initialize all configured peripherals  - in the correct order*/
	MX_GPIO_Init();
 8001ac0:	f7ff ff42 	bl	8001948 <MX_GPIO_Init>
	MX_SPI2_Init();
 8001ac4:	f000 fe48 	bl	8002758 <MX_SPI2_Init>
	MX_CAN1_Init();
 8001ac8:	f7ff fdf8 	bl	80016bc <MX_CAN1_Init>
	MX_CAN2_Init();
 8001acc:	f7ff fe2c 	bl	8001728 <MX_CAN2_Init>
	MX_TIM1_Init();
 8001ad0:	f000 ffde 	bl	8002a90 <MX_TIM1_Init>
	MX_DMA_Init();
 8001ad4:	f7ff ff18 	bl	8001908 <MX_DMA_Init>
	MX_TIM3_Init();
 8001ad8:	f001 f916 	bl	8002d08 <MX_TIM3_Init>
	MX_TIM2_Init();
 8001adc:	f001 f878 	bl	8002bd0 <MX_TIM2_Init>
	MX_ADC1_Init();
 8001ae0:	f7ff fce0 	bl	80014a4 <MX_ADC1_Init>

	/* Initialize peripherals */
	//initialize_can(&hcan1, &hcan2);
	initialize_LTC(&hspi2);
 8001ae4:	4840      	ldr	r0, [pc, #256]	; (8001be8 <main+0x138>)
 8001ae6:	f000 fe27 	bl	8002738 <initialize_LTC>
	/* Initialize kernel */
	osKernelInitialize();
 8001aea:	f00f fd2f 	bl	801154c <osKernelInitialize>

	/* Start threads */

	first_tick = 0.25 * TICK2HZ + osKernelGetTickCount(); // Wait for segger, etc
 8001aee:	f00f fd77 	bl	80115e0 <osKernelGetTickCount>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fcf7 	bl	80004e8 <__aeabi_ui2d>
 8001afa:	a339      	add	r3, pc, #228	; (adr r3, 8001be0 <main+0x130>)
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	f7fe fbb6 	bl	8000270 <__adddf3>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7ff f83e 	bl	8000b8c <__aeabi_d2uiz>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4a36      	ldr	r2, [pc, #216]	; (8001bec <main+0x13c>)
 8001b14:	6013      	str	r3, [r2, #0]

	SM_task_handle = osThreadNew(start_SM_task, NULL, &SM_task_attributes);
 8001b16:	4a36      	ldr	r2, [pc, #216]	; (8001bf0 <main+0x140>)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4836      	ldr	r0, [pc, #216]	; (8001bf4 <main+0x144>)
 8001b1c:	f00f fd75 	bl	801160a <osThreadNew>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4a35      	ldr	r2, [pc, #212]	; (8001bf8 <main+0x148>)
 8001b24:	6013      	str	r3, [r2, #0]

	SIM_task_handle = osThreadNew(start_SIM_task, NULL, &SIM_task_attributes);
 8001b26:	4a35      	ldr	r2, [pc, #212]	; (8001bfc <main+0x14c>)
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4835      	ldr	r0, [pc, #212]	; (8001c00 <main+0x150>)
 8001b2c:	f00f fd6d 	bl	801160a <osThreadNew>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4a34      	ldr	r2, [pc, #208]	; (8001c04 <main+0x154>)
 8001b34:	6013      	str	r3, [r2, #0]

	CSE_task_handle = osThreadNew(start_CSE_task, NULL, &CSE_task_attributes);
 8001b36:	4a34      	ldr	r2, [pc, #208]	; (8001c08 <main+0x158>)
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4834      	ldr	r0, [pc, #208]	; (8001c0c <main+0x15c>)
 8001b3c:	f00f fd65 	bl	801160a <osThreadNew>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a33      	ldr	r2, [pc, #204]	; (8001c10 <main+0x160>)
 8001b44:	6013      	str	r3, [r2, #0]

	CAN_rx_task_handle = osThreadNew(start_CAN_rx_task, NULL,
 8001b46:	4a33      	ldr	r2, [pc, #204]	; (8001c14 <main+0x164>)
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4833      	ldr	r0, [pc, #204]	; (8001c18 <main+0x168>)
 8001b4c:	f00f fd5d 	bl	801160a <osThreadNew>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4a32      	ldr	r2, [pc, #200]	; (8001c1c <main+0x16c>)
 8001b54:	6013      	str	r3, [r2, #0]
			&CAN_rx_task_attributes);

	CAN_tx_task_handle = osThreadNew(start_CAN_tx_task, NULL,
 8001b56:	4a32      	ldr	r2, [pc, #200]	; (8001c20 <main+0x170>)
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4832      	ldr	r0, [pc, #200]	; (8001c24 <main+0x174>)
 8001b5c:	f00f fd55 	bl	801160a <osThreadNew>
 8001b60:	4603      	mov	r3, r0
 8001b62:	4a31      	ldr	r2, [pc, #196]	; (8001c28 <main+0x178>)
 8001b64:	6013      	str	r3, [r2, #0]
			&CAN_tx_task_attributes);

	COM_task_handle = osThreadNew(start_COM_task, NULL, &COM_task_attributes);
 8001b66:	4a31      	ldr	r2, [pc, #196]	; (8001c2c <main+0x17c>)
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4831      	ldr	r0, [pc, #196]	; (8001c30 <main+0x180>)
 8001b6c:	f00f fd4d 	bl	801160a <osThreadNew>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4a30      	ldr	r2, [pc, #192]	; (8001c34 <main+0x184>)
 8001b74:	6013      	str	r3, [r2, #0]

	IWDG_task_handle = osThreadNew(start_IWDG_task, NULL,
 8001b76:	4a30      	ldr	r2, [pc, #192]	; (8001c38 <main+0x188>)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4830      	ldr	r0, [pc, #192]	; (8001c3c <main+0x18c>)
 8001b7c:	f00f fd45 	bl	801160a <osThreadNew>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a2f      	ldr	r2, [pc, #188]	; (8001c40 <main+0x190>)
 8001b84:	6013      	str	r3, [r2, #0]
			&IWDG_task_attributes);

	event_handler_task_handle = osThreadNew(start_event_handler_task, NULL,
 8001b86:	4a2f      	ldr	r2, [pc, #188]	; (8001c44 <main+0x194>)
 8001b88:	2100      	movs	r1, #0
 8001b8a:	482f      	ldr	r0, [pc, #188]	; (8001c48 <main+0x198>)
 8001b8c:	f00f fd3d 	bl	801160a <osThreadNew>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4a2e      	ldr	r2, [pc, #184]	; (8001c4c <main+0x19c>)
 8001b94:	6013      	str	r3, [r2, #0]
			&event_handler_task_attributes);

	IMD_task_handle = osThreadNew(start_IMD_task, NULL, &IMD_task_attributes);
 8001b96:	4a2e      	ldr	r2, [pc, #184]	; (8001c50 <main+0x1a0>)
 8001b98:	2100      	movs	r1, #0
 8001b9a:	482e      	ldr	r0, [pc, #184]	; (8001c54 <main+0x1a4>)
 8001b9c:	f00f fd35 	bl	801160a <osThreadNew>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a2d      	ldr	r2, [pc, #180]	; (8001c58 <main+0x1a8>)
 8001ba4:	6013      	str	r3, [r2, #0]

	GPIO_task_handle = osThreadNew(start_GPIO_task, NULL,
 8001ba6:	4a2d      	ldr	r2, [pc, #180]	; (8001c5c <main+0x1ac>)
 8001ba8:	2100      	movs	r1, #0
 8001baa:	482d      	ldr	r0, [pc, #180]	; (8001c60 <main+0x1b0>)
 8001bac:	f00f fd2d 	bl	801160a <osThreadNew>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a2c      	ldr	r2, [pc, #176]	; (8001c64 <main+0x1b4>)
 8001bb4:	6013      	str	r3, [r2, #0]
			&GPIO_task_attributes);

	ADC_task_handle = osThreadNew(start_ADC_task, NULL, &ADC_task_attributes);
 8001bb6:	4a2c      	ldr	r2, [pc, #176]	; (8001c68 <main+0x1b8>)
 8001bb8:	2100      	movs	r1, #0
 8001bba:	482c      	ldr	r0, [pc, #176]	; (8001c6c <main+0x1bc>)
 8001bbc:	f00f fd25 	bl	801160a <osThreadNew>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a2b      	ldr	r2, [pc, #172]	; (8001c70 <main+0x1c0>)
 8001bc4:	6013      	str	r3, [r2, #0]

	COOL_task_handle = osThreadNew(start_COOL_task, NULL,
 8001bc6:	4a2b      	ldr	r2, [pc, #172]	; (8001c74 <main+0x1c4>)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	482b      	ldr	r0, [pc, #172]	; (8001c78 <main+0x1c8>)
 8001bcc:	f00f fd1d 	bl	801160a <osThreadNew>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a2a      	ldr	r2, [pc, #168]	; (8001c7c <main+0x1cc>)
 8001bd4:	6013      	str	r3, [r2, #0]
			&COOL_task_attributes);

	/* Launch RTOS ! */
	osKernelStart();
 8001bd6:	f00f fcdd 	bl	8011594 <osKernelStart>

	for (;;)
 8001bda:	e7fe      	b.n	8001bda <main+0x12a>
 8001bdc:	f3af 8000 	nop.w
 8001be0:	f3cf3cf4 	.word	0xf3cf3cf4
 8001be4:	4047cf3c 	.word	0x4047cf3c
 8001be8:	2000b454 	.word	0x2000b454
 8001bec:	2000af48 	.word	0x2000af48
 8001bf0:	08016520 	.word	0x08016520
 8001bf4:	08001d59 	.word	0x08001d59
 8001bf8:	2000af1c 	.word	0x2000af1c
 8001bfc:	080166ac 	.word	0x080166ac
 8001c00:	08002491 	.word	0x08002491
 8001c04:	2000af24 	.word	0x2000af24
 8001c08:	08016664 	.word	0x08016664
 8001c0c:	08002359 	.word	0x08002359
 8001c10:	2000af3c 	.word	0x2000af3c
 8001c14:	0801661c 	.word	0x0801661c
 8001c18:	08002221 	.word	0x08002221
 8001c1c:	2000af40 	.word	0x2000af40
 8001c20:	08016640 	.word	0x08016640
 8001c24:	080022b9 	.word	0x080022b9
 8001c28:	2000af20 	.word	0x2000af20
 8001c2c:	080165f8 	.word	0x080165f8
 8001c30:	080020e9 	.word	0x080020e9
 8001c34:	2000af14 	.word	0x2000af14
 8001c38:	08016544 	.word	0x08016544
 8001c3c:	08001df1 	.word	0x08001df1
 8001c40:	2000af4c 	.word	0x2000af4c
 8001c44:	08016568 	.word	0x08016568
 8001c48:	08001e89 	.word	0x08001e89
 8001c4c:	2000af10 	.word	0x2000af10
 8001c50:	0801658c 	.word	0x0801658c
 8001c54:	08001f21 	.word	0x08001f21
 8001c58:	2000af50 	.word	0x2000af50
 8001c5c:	080165b0 	.word	0x080165b0
 8001c60:	08001fb9 	.word	0x08001fb9
 8001c64:	2000af18 	.word	0x2000af18
 8001c68:	080165d4 	.word	0x080165d4
 8001c6c:	08002051 	.word	0x08002051
 8001c70:	2000af44 	.word	0x2000af44
 8001c74:	08016688 	.word	0x08016688
 8001c78:	080023f9 	.word	0x080023f9
 8001c7c:	2000af38 	.word	0x2000af38

08001c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b094      	sub	sp, #80	; 0x50
 8001c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c86:	f107 0320 	add.w	r3, r7, #32
 8001c8a:	2230      	movs	r2, #48	; 0x30
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f013 ff22 	bl	8015ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <SystemClock_Config+0xcc>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	4a27      	ldr	r2, [pc, #156]	; (8001d4c <SystemClock_Config+0xcc>)
 8001cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <SystemClock_Config+0xcc>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <SystemClock_Config+0xd0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a21      	ldr	r2, [pc, #132]	; (8001d50 <SystemClock_Config+0xd0>)
 8001cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <SystemClock_Config+0xd0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001cdc:	230a      	movs	r3, #10
 8001cde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ce4:	2310      	movs	r3, #16
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cec:	2302      	movs	r3, #2
 8001cee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cf4:	2308      	movs	r3, #8
 8001cf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001cf8:	2354      	movs	r3, #84	; 0x54
 8001cfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d00:	2304      	movs	r3, #4
 8001d02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d04:	f107 0320 	add.w	r3, r7, #32
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f00d fc5b 	bl	800f5c4 <HAL_RCC_OscConfig>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d14:	f000 fc28 	bl	8002568 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d18:	230f      	movs	r3, #15
 8001d1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	2102      	movs	r1, #2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00d febd 	bl	800fab4 <HAL_RCC_ClockConfig>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d40:	f000 fc12 	bl	8002568 <Error_Handler>
  }
}
 8001d44:	bf00      	nop
 8001d46:	3750      	adds	r7, #80	; 0x50
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40007000 	.word	0x40007000
 8001d54:	00000000 	.word	0x00000000

08001d58 <start_SM_task>:

/* USER CODE BEGIN 4 */

/* ENTER TASKS */

void start_SM_task(void *argument) {
 8001d58:	b5b0      	push	{r4, r5, r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <start_SM_task+0x90>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * SM_task_info.periodicity;
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <start_SM_task+0x94>)
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbdf 	bl	800052c <__aeabi_f2d>
 8001d6e:	a31c      	add	r3, pc, #112	; (adr r3, 8001de0 <start_SM_task+0x88>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fc32 	bl	80005dc <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe ff04 	bl	8000b8c <__aeabi_d2uiz>
 8001d84:	4603      	mov	r3, r0
 8001d86:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */
	SEGGER_SYSVIEW_Start();
 8001d88:	f013 f96c 	bl	8015064 <SEGGER_SYSVIEW_Start>

	/* Wait until offset */
	next_tick += TICK2HZ * SM_task_info.offset;
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7fe fbab 	bl	80004e8 <__aeabi_ui2d>
 8001d92:	4604      	mov	r4, r0
 8001d94:	460d      	mov	r5, r1
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fbc6 	bl	800052c <__aeabi_f2d>
 8001da0:	a30f      	add	r3, pc, #60	; (adr r3, 8001de0 <start_SM_task+0x88>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fc19 	bl	80005dc <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4620      	mov	r0, r4
 8001db0:	4629      	mov	r1, r5
 8001db2:	f7fe fa5d 	bl	8000270 <__adddf3>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7fe fee5 	bl	8000b8c <__aeabi_d2uiz>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f00f fcb1 	bl	801172e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f00f fcaa 	bl	801172e <osDelayUntil>
		next_tick += tick_increment;
 8001dda:	e7f7      	b.n	8001dcc <start_SM_task+0x74>
 8001ddc:	f3af 8000 	nop.w
 8001de0:	f3cf3cf4 	.word	0xf3cf3cf4
 8001de4:	4067cf3c 	.word	0x4067cf3c
 8001de8:	2000af48 	.word	0x2000af48
 8001dec:	3ecccccd 	.word	0x3ecccccd

08001df0 <start_IWDG_task>:
	}
}

void start_IWDG_task(void *argument) {
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8001df8:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <start_IWDG_task+0x88>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <start_IWDG_task+0x8c>)
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fb93 	bl	800052c <__aeabi_f2d>
 8001e06:	a31a      	add	r3, pc, #104	; (adr r3, 8001e70 <start_IWDG_task+0x80>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fbe6 	bl	80005dc <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f7fe feb8 	bl	8000b8c <__aeabi_d2uiz>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7fe fb61 	bl	80004e8 <__aeabi_ui2d>
 8001e26:	4604      	mov	r4, r0
 8001e28:	460d      	mov	r5, r1
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <start_IWDG_task+0x90>)
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb7d 	bl	800052c <__aeabi_f2d>
 8001e32:	a30f      	add	r3, pc, #60	; (adr r3, 8001e70 <start_IWDG_task+0x80>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	f7fe fbd0 	bl	80005dc <__aeabi_dmul>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4620      	mov	r0, r4
 8001e42:	4629      	mov	r1, r5
 8001e44:	f7fe fa14 	bl	8000270 <__adddf3>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f7fe fe9c 	bl	8000b8c <__aeabi_d2uiz>
 8001e54:	4603      	mov	r3, r0
 8001e56:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f00f fc68 	bl	801172e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f00f fc61 	bl	801172e <osDelayUntil>
		next_tick += tick_increment;
 8001e6c:	e7f7      	b.n	8001e5e <start_IWDG_task+0x6e>
 8001e6e:	bf00      	nop
 8001e70:	f3cf3cf4 	.word	0xf3cf3cf4
 8001e74:	4067cf3c 	.word	0x4067cf3c
 8001e78:	2000af48 	.word	0x2000af48
 8001e7c:	3ecccccd 	.word	0x3ecccccd
 8001e80:	3c23d70a 	.word	0x3c23d70a
 8001e84:	00000000 	.word	0x00000000

08001e88 <start_event_handler_task>:
	}
}

void start_event_handler_task(void *argument) {
 8001e88:	b5b0      	push	{r4, r5, r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8001e90:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <start_event_handler_task+0x88>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * event_handler_task_info.periodicity;
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <start_event_handler_task+0x8c>)
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb47 	bl	800052c <__aeabi_f2d>
 8001e9e:	a31a      	add	r3, pc, #104	; (adr r3, 8001f08 <start_event_handler_task+0x80>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	f7fe fb9a 	bl	80005dc <__aeabi_dmul>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f7fe fe6c 	bl	8000b8c <__aeabi_d2uiz>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * event_handler_task_info.offset;
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f7fe fb15 	bl	80004e8 <__aeabi_ui2d>
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	460d      	mov	r5, r1
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <start_event_handler_task+0x90>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fb31 	bl	800052c <__aeabi_f2d>
 8001eca:	a30f      	add	r3, pc, #60	; (adr r3, 8001f08 <start_event_handler_task+0x80>)
 8001ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed0:	f7fe fb84 	bl	80005dc <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4620      	mov	r0, r4
 8001eda:	4629      	mov	r1, r5
 8001edc:	f7fe f9c8 	bl	8000270 <__adddf3>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f7fe fe50 	bl	8000b8c <__aeabi_d2uiz>
 8001eec:	4603      	mov	r3, r0
 8001eee:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f00f fc1c 	bl	801172e <osDelayUntil>

	/* Enter periodic behaviour */
	for (;;) {

		/* Wait until next period */
		next_tick += tick_increment;
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	4413      	add	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f00f fc15 	bl	801172e <osDelayUntil>
		next_tick += tick_increment;
 8001f04:	e7f7      	b.n	8001ef6 <start_event_handler_task+0x6e>
 8001f06:	bf00      	nop
 8001f08:	f3cf3cf4 	.word	0xf3cf3cf4
 8001f0c:	4067cf3c 	.word	0x4067cf3c
 8001f10:	2000af48 	.word	0x2000af48
 8001f14:	3ecccccd 	.word	0x3ecccccd
 8001f18:	3c343958 	.word	0x3c343958
 8001f1c:	00000000 	.word	0x00000000

08001f20 <start_IMD_task>:
	}
}

void start_IMD_task(void *argument) {
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <start_IMD_task+0x88>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * IMD_task_info.periodicity;
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <start_IMD_task+0x8c>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fafb 	bl	800052c <__aeabi_f2d>
 8001f36:	a31a      	add	r3, pc, #104	; (adr r3, 8001fa0 <start_IMD_task+0x80>)
 8001f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3c:	f7fe fb4e 	bl	80005dc <__aeabi_dmul>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	f7fe fe20 	bl	8000b8c <__aeabi_d2uiz>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * IMD_task_info.offset;
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f7fe fac9 	bl	80004e8 <__aeabi_ui2d>
 8001f56:	4604      	mov	r4, r0
 8001f58:	460d      	mov	r5, r1
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <start_IMD_task+0x90>)
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fae5 	bl	800052c <__aeabi_f2d>
 8001f62:	a30f      	add	r3, pc, #60	; (adr r3, 8001fa0 <start_IMD_task+0x80>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	f7fe fb38 	bl	80005dc <__aeabi_dmul>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4620      	mov	r0, r4
 8001f72:	4629      	mov	r1, r5
 8001f74:	f7fe f97c 	bl	8000270 <__adddf3>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7fe fe04 	bl	8000b8c <__aeabi_d2uiz>
 8001f84:	4603      	mov	r3, r0
 8001f86:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f00f fbd0 	bl	801172e <osDelayUntil>

	/* Enter periodic behaviour */
	for (;;) {

		/* Wait until next period */
		next_tick += tick_increment;
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f00f fbc9 	bl	801172e <osDelayUntil>
		next_tick += tick_increment;
 8001f9c:	e7f7      	b.n	8001f8e <start_IMD_task+0x6e>
 8001f9e:	bf00      	nop
 8001fa0:	f3cf3cf4 	.word	0xf3cf3cf4
 8001fa4:	4067cf3c 	.word	0x4067cf3c
 8001fa8:	2000af48 	.word	0x2000af48
 8001fac:	3ecccccd 	.word	0x3ecccccd
 8001fb0:	3c449ba6 	.word	0x3c449ba6
 8001fb4:	00000000 	.word	0x00000000

08001fb8 <start_GPIO_task>:
	}
}

void start_GPIO_task(void *argument) {
 8001fb8:	b5b0      	push	{r4, r5, r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <start_GPIO_task+0x88>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * GPIO_task_info.periodicity;
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <start_GPIO_task+0x8c>)
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe faaf 	bl	800052c <__aeabi_f2d>
 8001fce:	a31a      	add	r3, pc, #104	; (adr r3, 8002038 <start_GPIO_task+0x80>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	f7fe fb02 	bl	80005dc <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f7fe fdd4 	bl	8000b8c <__aeabi_d2uiz>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * GPIO_task_info.offset;
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f7fe fa7d 	bl	80004e8 <__aeabi_ui2d>
 8001fee:	4604      	mov	r4, r0
 8001ff0:	460d      	mov	r5, r1
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <start_GPIO_task+0x90>)
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fa99 	bl	800052c <__aeabi_f2d>
 8001ffa:	a30f      	add	r3, pc, #60	; (adr r3, 8002038 <start_GPIO_task+0x80>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	f7fe faec 	bl	80005dc <__aeabi_dmul>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4620      	mov	r0, r4
 800200a:	4629      	mov	r1, r5
 800200c:	f7fe f930 	bl	8000270 <__adddf3>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	f7fe fdb8 	bl	8000b8c <__aeabi_d2uiz>
 800201c:	4603      	mov	r3, r0
 800201e:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f00f fb84 	bl	801172e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4413      	add	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f00f fb7d 	bl	801172e <osDelayUntil>
		next_tick += tick_increment;
 8002034:	e7f7      	b.n	8002026 <start_GPIO_task+0x6e>
 8002036:	bf00      	nop
 8002038:	f3cf3cf4 	.word	0xf3cf3cf4
 800203c:	4067cf3c 	.word	0x4067cf3c
 8002040:	2000af48 	.word	0x2000af48
 8002044:	3ecccccd 	.word	0x3ecccccd
 8002048:	3c54fdf4 	.word	0x3c54fdf4
 800204c:	00000000 	.word	0x00000000

08002050 <start_ADC_task>:
	}
}

struct ams_temperatures_t ams_temperatures;
uint16_t adcBuffer[4 * ADC_AVERAGING_SIZE];
void start_ADC_task(void *argument) {
 8002050:	b5b0      	push	{r4, r5, r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <start_ADC_task+0x88>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * ADC_task_info.periodicity;
 800205e:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <start_ADC_task+0x8c>)
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa63 	bl	800052c <__aeabi_f2d>
 8002066:	a31a      	add	r3, pc, #104	; (adr r3, 80020d0 <start_ADC_task+0x80>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	f7fe fab6 	bl	80005dc <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	f7fe fd88 	bl	8000b8c <__aeabi_d2uiz>
 800207c:	4603      	mov	r3, r0
 800207e:	60bb      	str	r3, [r7, #8]
	//HAL_TIM_Base_Start(&htim3);
	//ADC_initialize();


	/* Wait until offset */
	next_tick += TICK2HZ * ADC_task_info.offset;
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f7fe fa31 	bl	80004e8 <__aeabi_ui2d>
 8002086:	4604      	mov	r4, r0
 8002088:	460d      	mov	r5, r1
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <start_ADC_task+0x90>)
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa4d 	bl	800052c <__aeabi_f2d>
 8002092:	a30f      	add	r3, pc, #60	; (adr r3, 80020d0 <start_ADC_task+0x80>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	f7fe faa0 	bl	80005dc <__aeabi_dmul>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4620      	mov	r0, r4
 80020a2:	4629      	mov	r1, r5
 80020a4:	f7fe f8e4 	bl	8000270 <__adddf3>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	f7fe fd6c 	bl	8000b8c <__aeabi_d2uiz>
 80020b4:	4603      	mov	r3, r0
 80020b6:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f00f fb38 	bl	801172e <osDelayUntil>
		//ADC_step(&adcBuffer, sizeof(adcBuffer));
		//interpret_ADC_buffer(&ams_temperatures, adcBuffer);


		/* Wait until next period */
		next_tick += tick_increment;
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4413      	add	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f00f fb31 	bl	801172e <osDelayUntil>
		next_tick += tick_increment;
 80020cc:	e7f7      	b.n	80020be <start_ADC_task+0x6e>
 80020ce:	bf00      	nop
 80020d0:	f3cf3cf4 	.word	0xf3cf3cf4
 80020d4:	4067cf3c 	.word	0x4067cf3c
 80020d8:	2000af48 	.word	0x2000af48
 80020dc:	3ecccccd 	.word	0x3ecccccd
 80020e0:	3c656042 	.word	0x3c656042
 80020e4:	00000000 	.word	0x00000000

080020e8 <start_COM_task>:
	}
}

void start_COM_task(void *argument) {
 80020e8:	b5b0      	push	{r4, r5, r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80020f0:	4b43      	ldr	r3, [pc, #268]	; (8002200 <start_COM_task+0x118>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	61fb      	str	r3, [r7, #28]
	uint32_t tick_increment = TICK2HZ * COM_task_info.periodicity;
 80020f6:	4b43      	ldr	r3, [pc, #268]	; (8002204 <start_COM_task+0x11c>)
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fa17 	bl	800052c <__aeabi_f2d>
 80020fe:	a33e      	add	r3, pc, #248	; (adr r3, 80021f8 <start_COM_task+0x110>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	f7fe fa6a 	bl	80005dc <__aeabi_dmul>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	f7fe fd3c 	bl	8000b8c <__aeabi_d2uiz>
 8002114:	4603      	mov	r3, r0
 8002116:	61bb      	str	r3, [r7, #24]

	/* Make task-specific structures */
	const float voltage_time_constraint = 0.5;
 8002118:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800211c:	617b      	str	r3, [r7, #20]
	const float current_time_constraint = 0.5;
 800211e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002122:	613b      	str	r3, [r7, #16]
	const float temperature_time_constraint = 1.0;
 8002124:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002128:	60fb      	str	r3, [r7, #12]

	/* Wait until offset */
	next_tick += TICK2HZ * COM_task_info.offset;
 800212a:	69f8      	ldr	r0, [r7, #28]
 800212c:	f7fe f9dc 	bl	80004e8 <__aeabi_ui2d>
 8002130:	4604      	mov	r4, r0
 8002132:	460d      	mov	r5, r1
 8002134:	4b34      	ldr	r3, [pc, #208]	; (8002208 <start_COM_task+0x120>)
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe f9f8 	bl	800052c <__aeabi_f2d>
 800213c:	a32e      	add	r3, pc, #184	; (adr r3, 80021f8 <start_COM_task+0x110>)
 800213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002142:	f7fe fa4b 	bl	80005dc <__aeabi_dmul>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4620      	mov	r0, r4
 800214c:	4629      	mov	r1, r5
 800214e:	f7fe f88f 	bl	8000270 <__adddf3>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	f7fe fd17 	bl	8000b8c <__aeabi_d2uiz>
 800215e:	4603      	mov	r3, r0
 8002160:	61fb      	str	r3, [r7, #28]
	osDelayUntil(next_tick);
 8002162:	69f8      	ldr	r0, [r7, #28]
 8002164:	f00f fae3 	bl	801172e <osDelayUntil>
	for (;;) {
		/* Enter periodic behaviour */

		//LTC_acquire_data(1);
		COM_voltages_ok_d(Accumulator_Y.Voltages, 1,
				1 + (voltage_time_constraint / COM_task_info.periodicity));
 8002168:	eddf 6a28 	vldr	s13, [pc, #160]	; 800220c <start_COM_task+0x124>
 800216c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002170:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002174:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002178:	ee77 7a87 	vadd.f32	s15, s15, s14
		COM_voltages_ok_d(Accumulator_Y.Voltages, 1,
 800217c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002180:	ee17 3a90 	vmov	r3, s15
 8002184:	b29b      	uxth	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	2101      	movs	r1, #1
 800218a:	4821      	ldr	r0, [pc, #132]	; (8002210 <start_COM_task+0x128>)
 800218c:	f7fe ff04 	bl	8000f98 <COM_voltages_ok_d>
		COM_temperatures_ok_d(Accumulator_Y.Temperature, 1,
				1 + (temperature_time_constraint / COM_task_info.periodicity));
 8002190:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800220c <start_COM_task+0x124>
 8002194:	ed97 7a03 	vldr	s14, [r7, #12]
 8002198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800219c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021a0:	ee77 7a87 	vadd.f32	s15, s15, s14
		COM_temperatures_ok_d(Accumulator_Y.Temperature, 1,
 80021a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021a8:	ee17 3a90 	vmov	r3, s15
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	2101      	movs	r1, #1
 80021b2:	4818      	ldr	r0, [pc, #96]	; (8002214 <start_COM_task+0x12c>)
 80021b4:	f7fe ff62 	bl	800107c <COM_temperatures_ok_d>
		COM_current_ok_d(&Accumulator_Y.Current, 1,
				1 + (current_time_constraint / COM_task_info.periodicity));
 80021b8:	eddf 6a14 	vldr	s13, [pc, #80]	; 800220c <start_COM_task+0x124>
 80021bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80021c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021c8:	ee77 7a87 	vadd.f32	s15, s15, s14
		COM_current_ok_d(&Accumulator_Y.Current, 1,
 80021cc:	ee17 0a90 	vmov	r0, s15
 80021d0:	f7fe f9ac 	bl	800052c <__aeabi_f2d>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	ec43 2b10 	vmov	d0, r2, r3
 80021dc:	2101      	movs	r1, #1
 80021de:	480e      	ldr	r0, [pc, #56]	; (8002218 <start_COM_task+0x130>)
 80021e0:	f7fe ffbe 	bl	8001160 <COM_current_ok_d>

		/* Wait until next period */
		next_tick += tick_increment;
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	4413      	add	r3, r2
 80021ea:	61fb      	str	r3, [r7, #28]
		osDelayUntil(next_tick);
 80021ec:	69f8      	ldr	r0, [r7, #28]
 80021ee:	f00f fa9e 	bl	801172e <osDelayUntil>
	for (;;) {
 80021f2:	e7b9      	b.n	8002168 <start_COM_task+0x80>
 80021f4:	f3af 8000 	nop.w
 80021f8:	f3cf3cf4 	.word	0xf3cf3cf4
 80021fc:	4067cf3c 	.word	0x4067cf3c
 8002200:	2000af48 	.word	0x2000af48
 8002204:	3ecccccd 	.word	0x3ecccccd
 8002208:	3c75c28f 	.word	0x3c75c28f
 800220c:	3ecccccd 	.word	0x3ecccccd
 8002210:	2000b5d0 	.word	0x2000b5d0
 8002214:	2000c1a8 	.word	0x2000c1a8
 8002218:	2000c1a0 	.word	0x2000c1a0
 800221c:	00000000 	.word	0x00000000

08002220 <start_CAN_rx_task>:
	}
}

void start_CAN_rx_task(void *argument) {
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002228:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <start_CAN_rx_task+0x88>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CAN_rx_task_info.periodicity;
 800222e:	4b1f      	ldr	r3, [pc, #124]	; (80022ac <start_CAN_rx_task+0x8c>)
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe f97b 	bl	800052c <__aeabi_f2d>
 8002236:	a31a      	add	r3, pc, #104	; (adr r3, 80022a0 <start_CAN_rx_task+0x80>)
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	f7fe f9ce 	bl	80005dc <__aeabi_dmul>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	f7fe fca0 	bl	8000b8c <__aeabi_d2uiz>
 800224c:	4603      	mov	r3, r0
 800224e:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * CAN_rx_task_info.offset;
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f7fe f949 	bl	80004e8 <__aeabi_ui2d>
 8002256:	4604      	mov	r4, r0
 8002258:	460d      	mov	r5, r1
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <start_CAN_rx_task+0x90>)
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe f965 	bl	800052c <__aeabi_f2d>
 8002262:	a30f      	add	r3, pc, #60	; (adr r3, 80022a0 <start_CAN_rx_task+0x80>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe f9b8 	bl	80005dc <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4620      	mov	r0, r4
 8002272:	4629      	mov	r1, r5
 8002274:	f7fd fffc 	bl	8000270 <__adddf3>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f7fe fc84 	bl	8000b8c <__aeabi_d2uiz>
 8002284:	4603      	mov	r3, r0
 8002286:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f00f fa50 	bl	801172e <osDelayUntil>
		 }
		 }
		 */

		/* Wait until next period */
		next_tick += tick_increment;
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4413      	add	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f00f fa49 	bl	801172e <osDelayUntil>
		next_tick += tick_increment;
 800229c:	e7f7      	b.n	800228e <start_CAN_rx_task+0x6e>
 800229e:	bf00      	nop
 80022a0:	f3cf3cf4 	.word	0xf3cf3cf4
 80022a4:	4067cf3c 	.word	0x4067cf3c
 80022a8:	2000af48 	.word	0x2000af48
 80022ac:	3ecccccd 	.word	0x3ecccccd
 80022b0:	3d6147ae 	.word	0x3d6147ae
 80022b4:	00000000 	.word	0x00000000

080022b8 <start_CAN_tx_task>:
	}
}

void start_CAN_tx_task(void *argument) {
 80022b8:	b5b0      	push	{r4, r5, r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80022c0:	4b21      	ldr	r3, [pc, #132]	; (8002348 <start_CAN_tx_task+0x90>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * CAN_tx_task_info.periodicity;
 80022c6:	4b21      	ldr	r3, [pc, #132]	; (800234c <start_CAN_tx_task+0x94>)
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe f92f 	bl	800052c <__aeabi_f2d>
 80022ce:	a31c      	add	r3, pc, #112	; (adr r3, 8002340 <start_CAN_tx_task+0x88>)
 80022d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d4:	f7fe f982 	bl	80005dc <__aeabi_dmul>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f7fe fc54 	bl	8000b8c <__aeabi_d2uiz>
 80022e4:	4603      	mov	r3, r0
 80022e6:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	uint8_t k = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	73fb      	strb	r3, [r7, #15]

	/* Wait until offset */
	next_tick += TICK2HZ * CAN_tx_task_info.offset;
 80022ec:	6978      	ldr	r0, [r7, #20]
 80022ee:	f7fe f8fb 	bl	80004e8 <__aeabi_ui2d>
 80022f2:	4604      	mov	r4, r0
 80022f4:	460d      	mov	r5, r1
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <start_CAN_tx_task+0x98>)
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe f917 	bl	800052c <__aeabi_f2d>
 80022fe:	a310      	add	r3, pc, #64	; (adr r3, 8002340 <start_CAN_tx_task+0x88>)
 8002300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002304:	f7fe f96a 	bl	80005dc <__aeabi_dmul>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4620      	mov	r0, r4
 800230e:	4629      	mov	r1, r5
 8002310:	f7fd ffae 	bl	8000270 <__adddf3>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	f7fe fc36 	bl	8000b8c <__aeabi_d2uiz>
 8002320:	4603      	mov	r3, r0
 8002322:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8002324:	6978      	ldr	r0, [r7, #20]
 8002326:	f00f fa02 	bl	801172e <osDelayUntil>

		 tx_send_can();
		 */

		/* Wait until next period */
		next_tick += tick_increment;
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f00f f9fb 	bl	801172e <osDelayUntil>
		next_tick += tick_increment;
 8002338:	e7f7      	b.n	800232a <start_CAN_tx_task+0x72>
 800233a:	bf00      	nop
 800233c:	f3af 8000 	nop.w
 8002340:	f3cf3cf4 	.word	0xf3cf3cf4
 8002344:	4067cf3c 	.word	0x4067cf3c
 8002348:	2000af48 	.word	0x2000af48
 800234c:	3ecccccd 	.word	0x3ecccccd
 8002350:	3d99999a 	.word	0x3d99999a
 8002354:	00000000 	.word	0x00000000

08002358 <start_CSE_task>:
	}
}

void start_CSE_task(void *argument) {
 8002358:	b5b0      	push	{r4, r5, r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002360:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <start_CSE_task+0x90>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CSE_task_info.periodicity;
 8002366:	4b21      	ldr	r3, [pc, #132]	; (80023ec <start_CSE_task+0x94>)
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f8df 	bl	800052c <__aeabi_f2d>
 800236e:	a31c      	add	r3, pc, #112	; (adr r3, 80023e0 <start_CSE_task+0x88>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fe f932 	bl	80005dc <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	f7fe fc04 	bl	8000b8c <__aeabi_d2uiz>
 8002384:	4603      	mov	r3, r0
 8002386:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */
	CSE_initialize();
 8002388:	f003 fc2e 	bl	8005be8 <CSE_initialize>

	/* Wait until offset */
	next_tick += TICK2HZ * CSE_task_info.offset;
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f7fe f8ab 	bl	80004e8 <__aeabi_ui2d>
 8002392:	4604      	mov	r4, r0
 8002394:	460d      	mov	r5, r1
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <start_CSE_task+0x98>)
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8c7 	bl	800052c <__aeabi_f2d>
 800239e:	a310      	add	r3, pc, #64	; (adr r3, 80023e0 <start_CSE_task+0x88>)
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	f7fe f91a 	bl	80005dc <__aeabi_dmul>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4620      	mov	r0, r4
 80023ae:	4629      	mov	r1, r5
 80023b0:	f7fd ff5e 	bl	8000270 <__adddf3>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fbe6 	bl	8000b8c <__aeabi_d2uiz>
 80023c0:	4603      	mov	r3, r0
 80023c2:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f00f f9b2 	bl	801172e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		CSE_step();
 80023ca:	f002 f909 	bl	80045e0 <CSE_step>

		/* Wait until next period */
		next_tick += tick_increment;
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f00f f9a9 	bl	801172e <osDelayUntil>
		CSE_step();
 80023dc:	e7f5      	b.n	80023ca <start_CSE_task+0x72>
 80023de:	bf00      	nop
 80023e0:	f3cf3cf4 	.word	0xf3cf3cf4
 80023e4:	4067cf3c 	.word	0x4067cf3c
 80023e8:	2000af48 	.word	0x2000af48
 80023ec:	3ecccccd 	.word	0x3ecccccd
 80023f0:	3dc28f5c 	.word	0x3dc28f5c
 80023f4:	00000000 	.word	0x00000000

080023f8 <start_COOL_task>:
	}
}

void start_COOL_task(void *argument) {
 80023f8:	b5b0      	push	{r4, r5, r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002400:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <start_COOL_task+0x88>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * COOL_task_info.periodicity;
 8002406:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <start_COOL_task+0x8c>)
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f88f 	bl	800052c <__aeabi_f2d>
 800240e:	a31a      	add	r3, pc, #104	; (adr r3, 8002478 <start_COOL_task+0x80>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	f7fe f8e2 	bl	80005dc <__aeabi_dmul>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	f7fe fbb4 	bl	8000b8c <__aeabi_d2uiz>
 8002424:	4603      	mov	r3, r0
 8002426:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * COOL_task_info.offset;
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f7fe f85d 	bl	80004e8 <__aeabi_ui2d>
 800242e:	4604      	mov	r4, r0
 8002430:	460d      	mov	r5, r1
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <start_COOL_task+0x90>)
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f879 	bl	800052c <__aeabi_f2d>
 800243a:	a30f      	add	r3, pc, #60	; (adr r3, 8002478 <start_COOL_task+0x80>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	f7fe f8cc 	bl	80005dc <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4620      	mov	r0, r4
 800244a:	4629      	mov	r1, r5
 800244c:	f7fd ff10 	bl	8000270 <__adddf3>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	f7fe fb98 	bl	8000b8c <__aeabi_d2uiz>
 800245c:	4603      	mov	r3, r0
 800245e:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f00f f964 	bl	801172e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4413      	add	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f00f f95d 	bl	801172e <osDelayUntil>
		next_tick += tick_increment;
 8002474:	e7f7      	b.n	8002466 <start_COOL_task+0x6e>
 8002476:	bf00      	nop
 8002478:	f3cf3cf4 	.word	0xf3cf3cf4
 800247c:	4067cf3c 	.word	0x4067cf3c
 8002480:	2000af48 	.word	0x2000af48
 8002484:	3ecccccd 	.word	0x3ecccccd
 8002488:	3e051eb8 	.word	0x3e051eb8
 800248c:	00000000 	.word	0x00000000

08002490 <start_SIM_task>:
	}
}

void start_SIM_task(void *argument) {
 8002490:	b5b0      	push	{r4, r5, r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002498:	4b25      	ldr	r3, [pc, #148]	; (8002530 <start_SIM_task+0xa0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * SIM_task_info.periodicity;
 800249e:	4b25      	ldr	r3, [pc, #148]	; (8002534 <start_SIM_task+0xa4>)
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f843 	bl	800052c <__aeabi_f2d>
 80024a6:	a320      	add	r3, pc, #128	; (adr r3, 8002528 <start_SIM_task+0x98>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	f7fe f896 	bl	80005dc <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	f7fe fb68 	bl	8000b8c <__aeabi_d2uiz>
 80024bc:	4603      	mov	r3, r0
 80024be:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */
	Accumulator_initialize();
 80024c0:	f001 fbc0 	bl	8003c44 <Accumulator_initialize>

	/* Wait until offset */
	next_tick += TICK2HZ * SIM_task_info.offset;
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7fe f80f 	bl	80004e8 <__aeabi_ui2d>
 80024ca:	4604      	mov	r4, r0
 80024cc:	460d      	mov	r5, r1
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <start_SIM_task+0xa8>)
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe f82b 	bl	800052c <__aeabi_f2d>
 80024d6:	a314      	add	r3, pc, #80	; (adr r3, 8002528 <start_SIM_task+0x98>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f7fe f87e 	bl	80005dc <__aeabi_dmul>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4620      	mov	r0, r4
 80024e6:	4629      	mov	r1, r5
 80024e8:	f7fd fec2 	bl	8000270 <__adddf3>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f7fe fb4a 	bl	8000b8c <__aeabi_d2uiz>
 80024f8:	4603      	mov	r3, r0
 80024fa:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f00f f916 	bl	801172e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		Accumulator_U.SimCurrent = -20;
 8002502:	490e      	ldr	r1, [pc, #56]	; (800253c <start_SIM_task+0xac>)
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <start_SIM_task+0xb0>)
 800250a:	e9c1 2300 	strd	r2, r3, [r1]
		Accumulator_step();
 800250e:	f000 ff77 	bl	8003400 <Accumulator_step>

		/* Wait until next period */
		next_tick += tick_increment;
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f00f f907 	bl	801172e <osDelayUntil>
		Accumulator_U.SimCurrent = -20;
 8002520:	e7ef      	b.n	8002502 <start_SIM_task+0x72>
 8002522:	bf00      	nop
 8002524:	f3af 8000 	nop.w
 8002528:	f3cf3cf4 	.word	0xf3cf3cf4
 800252c:	4067cf3c 	.word	0x4067cf3c
 8002530:	2000af48 	.word	0x2000af48
 8002534:	3ecccccd 	.word	0x3ecccccd
 8002538:	3e0624dd 	.word	0x3e0624dd
 800253c:	2000c388 	.word	0x2000c388
 8002540:	c0340000 	.word	0xc0340000

08002544 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002556:	f00b f9af 	bl	800d8b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40000c00 	.word	0x40000c00

08002568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800256c:	b672      	cpsid	i
}
 800256e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002570:	e7fe      	b.n	8002570 <Error_Handler+0x8>
	...

08002574 <tx_send_can_fromISR>:
			Error_Handler();
		}
	}
}

void tx_send_can_fromISR() {
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
	static struct can_queue_element_t can_queue_element;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]

	while (xQueueReceiveFromISR(can1_tx_queue, &can_queue_element,
 800257e:	e00b      	b.n	8002598 <tx_send_can_fromISR+0x24>
			&xHigherPriorityTaskWoken)
			&& (0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1))) {
		if (HAL_CAN_AddTxMessage(_hcan1, &can_queue_element.tx_header,
 8002580:	4b26      	ldr	r3, [pc, #152]	; (800261c <tx_send_can_fromISR+0xa8>)
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <tx_send_can_fromISR+0xac>)
 8002586:	4a27      	ldr	r2, [pc, #156]	; (8002624 <tx_send_can_fromISR+0xb0>)
 8002588:	4927      	ldr	r1, [pc, #156]	; (8002628 <tx_send_can_fromISR+0xb4>)
 800258a:	f00b fe70 	bl	800e26e <HAL_CAN_AddTxMessage>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <tx_send_can_fromISR+0x24>
				can_queue_element.data, &tx_mailbox) != HAL_OK) {
			Error_Handler();
 8002594:	f7ff ffe8 	bl	8002568 <Error_Handler>
	while (xQueueReceiveFromISR(can1_tx_queue, &can_queue_element,
 8002598:	4b24      	ldr	r3, [pc, #144]	; (800262c <tx_send_can_fromISR+0xb8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	1d3a      	adds	r2, r7, #4
 800259e:	4922      	ldr	r1, [pc, #136]	; (8002628 <tx_send_can_fromISR+0xb4>)
 80025a0:	4618      	mov	r0, r3
 80025a2:	f00f fdc9 	bl	8012138 <xQueueReceiveFromISR>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d014      	beq.n	80025d6 <tx_send_can_fromISR+0x62>
			&& (0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1))) {
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <tx_send_can_fromISR+0xa8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f00b ff37 	bl	800e424 <HAL_CAN_GetTxMailboxesFreeLevel>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1e1      	bne.n	8002580 <tx_send_can_fromISR+0xc>
		}
	}
	while (xQueueReceiveFromISR(can2_tx_queue, &can_queue_element,
 80025bc:	e00b      	b.n	80025d6 <tx_send_can_fromISR+0x62>
			&xHigherPriorityTaskWoken)
			&& (0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2))) {
		if (HAL_CAN_AddTxMessage(_hcan2, &can_queue_element.tx_header,
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <tx_send_can_fromISR+0xbc>)
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <tx_send_can_fromISR+0xac>)
 80025c4:	4a17      	ldr	r2, [pc, #92]	; (8002624 <tx_send_can_fromISR+0xb0>)
 80025c6:	4918      	ldr	r1, [pc, #96]	; (8002628 <tx_send_can_fromISR+0xb4>)
 80025c8:	f00b fe51 	bl	800e26e <HAL_CAN_AddTxMessage>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <tx_send_can_fromISR+0x62>
				can_queue_element.data, &tx_mailbox) != HAL_OK) {
			Error_Handler();
 80025d2:	f7ff ffc9 	bl	8002568 <Error_Handler>
	while (xQueueReceiveFromISR(can2_tx_queue, &can_queue_element,
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <tx_send_can_fromISR+0xc0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	1d3a      	adds	r2, r7, #4
 80025dc:	4912      	ldr	r1, [pc, #72]	; (8002628 <tx_send_can_fromISR+0xb4>)
 80025de:	4618      	mov	r0, r3
 80025e0:	f00f fdaa 	bl	8012138 <xQueueReceiveFromISR>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <tx_send_can_fromISR+0x86>
			&& (0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2))) {
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <tx_send_can_fromISR+0xbc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f00b ff18 	bl	800e424 <HAL_CAN_GetTxMailboxesFreeLevel>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1e1      	bne.n	80025be <tx_send_can_fromISR+0x4a>
		}
	}

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <tx_send_can_fromISR+0x9e>
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <tx_send_can_fromISR+0xc4>)
 8002602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	f3bf 8f6f 	isb	sy
	return;
 8002610:	bf00      	nop
 8002612:	bf00      	nop
}
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200015a0 	.word	0x200015a0
 8002620:	2000af68 	.word	0x2000af68
 8002624:	200015dc 	.word	0x200015dc
 8002628:	200015a8 	.word	0x200015a8
 800262c:	2000af80 	.word	0x2000af80
 8002630:	200015a4 	.word	0x200015a4
 8002634:	2000af94 	.word	0x2000af94
 8002638:	e000ed04 	.word	0xe000ed04

0800263c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	tx_send_can_fromISR();
 8002644:	f7ff ff96 	bl	8002574 <tx_send_can_fromISR>
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	tx_send_can_fromISR();
 8002658:	f7ff ff8c 	bl	8002574 <tx_send_can_fromISR>
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	tx_send_can_fromISR();
 800266c:	f7ff ff82 	bl	8002574 <tx_send_can_fromISR>
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_CAN_RxFifo0MsgPendingCallback>:
/*
 * @brief   Configure the first HAL_CAN callback to place
 * @param   A pointer to the appropriate HAL-type can handle
 * @retval  None
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
	static struct can_queue_element_t can_queue_element;

	if (HAL_OK
			== HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8002686:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8002688:	2100      	movs	r1, #0
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f00b feff 	bl	800e48e <HAL_CAN_GetRxMessage>
 8002690:	4603      	mov	r3, r0
	if (HAL_OK
 8002692:	2b00      	cmp	r3, #0
 8002694:	d112      	bne.n	80026bc <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
					&can_queue_element.rx_header, can_queue_element.data)) {
		xQueueSendFromISR(can_rx_queue, &can_queue_element,
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	f107 020c 	add.w	r2, r7, #12
 800269e:	2300      	movs	r3, #0
 80026a0:	490b      	ldr	r1, [pc, #44]	; (80026d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80026a2:	f00f fb89 	bl	8011db8 <xQueueGenericSendFromISR>
				&xHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80026ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	f3bf 8f4f 	dsb	sy
 80026b8:	f3bf 8f6f 	isb	sy
	}
}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20001618 	.word	0x20001618
 80026c8:	200015fc 	.word	0x200015fc
 80026cc:	2000af8c 	.word	0x2000af8c
 80026d0:	200015e4 	.word	0x200015e4
 80026d4:	e000ed04 	.word	0xe000ed04

080026d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
/*
 * @brief   Configure the second HAL_CAN callback to place
 * @param   A pointer to the appropriate HAL-type can handle
 * @retval  None
 */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
	static struct can_queue_element_t can_queue_element;

	if (HAL_OK
			== HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1,
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 80026e6:	4a10      	ldr	r2, [pc, #64]	; (8002728 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 80026e8:	2101      	movs	r1, #1
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f00b fecf 	bl	800e48e <HAL_CAN_GetRxMessage>
 80026f0:	4603      	mov	r3, r0
	if (HAL_OK
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d112      	bne.n	800271c <HAL_CAN_RxFifo1MsgPendingCallback+0x44>
					&can_queue_element.rx_header, can_queue_element.data)) {
		xQueueSendFromISR(can_rx_queue, &can_queue_element,
 80026f6:	4b0d      	ldr	r3, [pc, #52]	; (800272c <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	f107 020c 	add.w	r2, r7, #12
 80026fe:	2300      	movs	r3, #0
 8002700:	490b      	ldr	r1, [pc, #44]	; (8002730 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 8002702:	f00f fb59 	bl	8011db8 <xQueueGenericSendFromISR>
				&xHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_CAN_RxFifo1MsgPendingCallback+0x44>
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 800270e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	f3bf 8f6f 	isb	sy
	}
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20001654 	.word	0x20001654
 8002728:	20001638 	.word	0x20001638
 800272c:	2000af8c 	.word	0x2000af8c
 8002730:	20001620 	.word	0x20001620
 8002734:	e000ed04 	.word	0xe000ed04

08002738 <initialize_LTC>:
/*
 * @brief	Set the hspi which LTC uses
 * @param	The hspi to be used
 * @retval	None
 */
void initialize_LTC(SPI_HandleTypeDef *hspi) {
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	hltc = hspi;
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <initialize_LTC+0x1c>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6013      	str	r3, [r2, #0]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	2000afa8 	.word	0x2000afa8

08002758 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800275c:	4b17      	ldr	r3, [pc, #92]	; (80027bc <MX_SPI2_Init+0x64>)
 800275e:	4a18      	ldr	r2, [pc, #96]	; (80027c0 <MX_SPI2_Init+0x68>)
 8002760:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <MX_SPI2_Init+0x64>)
 8002764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002768:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <MX_SPI2_Init+0x64>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <MX_SPI2_Init+0x64>)
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <MX_SPI2_Init+0x64>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <MX_SPI2_Init+0x64>)
 800277e:	2200      	movs	r2, #0
 8002780:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <MX_SPI2_Init+0x64>)
 8002784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002788:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <MX_SPI2_Init+0x64>)
 800278c:	2220      	movs	r2, #32
 800278e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <MX_SPI2_Init+0x64>)
 8002792:	2200      	movs	r2, #0
 8002794:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <MX_SPI2_Init+0x64>)
 8002798:	2200      	movs	r2, #0
 800279a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <MX_SPI2_Init+0x64>)
 800279e:	2200      	movs	r2, #0
 80027a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <MX_SPI2_Init+0x64>)
 80027a4:	220a      	movs	r2, #10
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027a8:	4804      	ldr	r0, [pc, #16]	; (80027bc <MX_SPI2_Init+0x64>)
 80027aa:	f00d fb71 	bl	800fe90 <HAL_SPI_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80027b4:	f7ff fed8 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	2000b454 	.word	0x2000b454
 80027c0:	40003800 	.word	0x40003800

080027c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a28      	ldr	r2, [pc, #160]	; (8002884 <HAL_SPI_MspInit+0xc0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d14a      	bne.n	800287c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	4b27      	ldr	r3, [pc, #156]	; (8002888 <HAL_SPI_MspInit+0xc4>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a26      	ldr	r2, [pc, #152]	; (8002888 <HAL_SPI_MspInit+0xc4>)
 80027f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b24      	ldr	r3, [pc, #144]	; (8002888 <HAL_SPI_MspInit+0xc4>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_SPI_MspInit+0xc4>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a1f      	ldr	r2, [pc, #124]	; (8002888 <HAL_SPI_MspInit+0xc4>)
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_SPI_MspInit+0xc4>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_SPI_MspInit+0xc4>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a18      	ldr	r2, [pc, #96]	; (8002888 <HAL_SPI_MspInit+0xc4>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <HAL_SPI_MspInit+0xc4>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800283a:	230c      	movs	r3, #12
 800283c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002846:	2303      	movs	r3, #3
 8002848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800284a:	2305      	movs	r3, #5
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	4619      	mov	r1, r3
 8002854:	480d      	ldr	r0, [pc, #52]	; (800288c <HAL_SPI_MspInit+0xc8>)
 8002856:	f00c fcff 	bl	800f258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800285a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800285e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	2302      	movs	r3, #2
 8002862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002868:	2303      	movs	r3, #3
 800286a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800286c:	2305      	movs	r3, #5
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	4619      	mov	r1, r3
 8002876:	4806      	ldr	r0, [pc, #24]	; (8002890 <HAL_SPI_MspInit+0xcc>)
 8002878:	f00c fcee 	bl	800f258 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800287c:	bf00      	nop
 800287e:	3728      	adds	r7, #40	; 0x28
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40003800 	.word	0x40003800
 8002888:	40023800 	.word	0x40023800
 800288c:	40020800 	.word	0x40020800
 8002890:	40020400 	.word	0x40020400

08002894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_MspInit+0x54>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	4a11      	ldr	r2, [pc, #68]	; (80028e8 <HAL_MspInit+0x54>)
 80028a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a8:	6453      	str	r3, [r2, #68]	; 0x44
 80028aa:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <HAL_MspInit+0x54>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_MspInit+0x54>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_MspInit+0x54>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c4:	6413      	str	r3, [r2, #64]	; 0x40
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <HAL_MspInit+0x54>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028d2:	2200      	movs	r2, #0
 80028d4:	210f      	movs	r1, #15
 80028d6:	f06f 0001 	mvn.w	r0, #1
 80028da:	f00c f9a9 	bl	800ec30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800

080028ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08c      	sub	sp, #48	; 0x30
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80028fc:	2200      	movs	r2, #0
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	2032      	movs	r0, #50	; 0x32
 8002902:	f00c f995 	bl	800ec30 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002906:	2032      	movs	r0, #50	; 0x32
 8002908:	f00c f9ae 	bl	800ec68 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <HAL_InitTick+0xa4>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_InitTick+0xa4>)
 8002916:	f043 0308 	orr.w	r3, r3, #8
 800291a:	6413      	str	r3, [r2, #64]	; 0x40
 800291c:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_InitTick+0xa4>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002928:	f107 0210 	add.w	r2, r7, #16
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f00d fa7a 	bl	800fe2c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002938:	f00d fa64 	bl	800fe04 <HAL_RCC_GetPCLK1Freq>
 800293c:	4603      	mov	r3, r0
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	4a13      	ldr	r2, [pc, #76]	; (8002994 <HAL_InitTick+0xa8>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	0c9b      	lsrs	r3, r3, #18
 800294c:	3b01      	subs	r3, #1
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <HAL_InitTick+0xac>)
 8002952:	4a12      	ldr	r2, [pc, #72]	; (800299c <HAL_InitTick+0xb0>)
 8002954:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <HAL_InitTick+0xac>)
 8002958:	f240 32e7 	movw	r2, #999	; 0x3e7
 800295c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800295e:	4a0e      	ldr	r2, [pc, #56]	; (8002998 <HAL_InitTick+0xac>)
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <HAL_InitTick+0xac>)
 8002966:	2200      	movs	r2, #0
 8002968:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_InitTick+0xac>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002970:	4809      	ldr	r0, [pc, #36]	; (8002998 <HAL_InitTick+0xac>)
 8002972:	f00d fb16 	bl	800ffa2 <HAL_TIM_Base_Init>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d104      	bne.n	8002986 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 800297c:	4806      	ldr	r0, [pc, #24]	; (8002998 <HAL_InitTick+0xac>)
 800297e:	f00d fb5f 	bl	8010040 <HAL_TIM_Base_Start_IT>
 8002982:	4603      	mov	r3, r0
 8002984:	e000      	b.n	8002988 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
}
 8002988:	4618      	mov	r0, r3
 800298a:	3730      	adds	r7, #48	; 0x30
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40023800 	.word	0x40023800
 8002994:	431bde83 	.word	0x431bde83
 8002998:	2000b4ac 	.word	0x2000b4ac
 800299c:	40000c00 	.word	0x40000c00

080029a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029a4:	e7fe      	b.n	80029a4 <NMI_Handler+0x4>

080029a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029aa:	e7fe      	b.n	80029aa <HardFault_Handler+0x4>

080029ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029b0:	e7fe      	b.n	80029b0 <MemManage_Handler+0x4>

080029b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029b6:	e7fe      	b.n	80029b6 <BusFault_Handler+0x4>

080029b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029bc:	e7fe      	b.n	80029bc <UsageFault_Handler+0x4>

080029be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <ADC_IRQHandler+0x10>)
 80029d2:	f00a ffd4 	bl	800d97e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	2000ad5c 	.word	0x2000ad5c

080029e0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <CAN1_TX_IRQHandler+0x10>)
 80029e6:	f00b fe64 	bl	800e6b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000ae68 	.word	0x2000ae68

080029f4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <CAN1_RX0_IRQHandler+0x10>)
 80029fa:	f00b fe5a 	bl	800e6b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	2000ae68 	.word	0x2000ae68

08002a08 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <CAN1_RX1_IRQHandler+0x10>)
 8002a0e:	f00b fe50 	bl	800e6b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000ae68 	.word	0x2000ae68

08002a1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <TIM2_IRQHandler+0x10>)
 8002a22:	f00d fc2f 	bl	8010284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	2000b584 	.word	0x2000b584

08002a30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a34:	4802      	ldr	r0, [pc, #8]	; (8002a40 <TIM3_IRQHandler+0x10>)
 8002a36:	f00d fc25 	bl	8010284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000b4f4 	.word	0x2000b4f4

08002a44 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <TIM5_IRQHandler+0x10>)
 8002a4a:	f00d fc1b 	bl	8010284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	2000b4ac 	.word	0x2000b4ac

08002a58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <DMA2_Stream0_IRQHandler+0x10>)
 8002a5e:	f00c f9bf 	bl	800ede0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	2000ada4 	.word	0x2000ada4

08002a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <SystemInit+0x20>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	4a05      	ldr	r2, [pc, #20]	; (8002a8c <SystemInit+0x20>)
 8002a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b096      	sub	sp, #88	; 0x58
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
 8002ab8:	609a      	str	r2, [r3, #8]
 8002aba:	60da      	str	r2, [r3, #12]
 8002abc:	611a      	str	r2, [r3, #16]
 8002abe:	615a      	str	r2, [r3, #20]
 8002ac0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f013 f805 	bl	8015ad8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ace:	4b3e      	ldr	r3, [pc, #248]	; (8002bc8 <MX_TIM1_Init+0x138>)
 8002ad0:	4a3e      	ldr	r2, [pc, #248]	; (8002bcc <MX_TIM1_Init+0x13c>)
 8002ad2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ad4:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <MX_TIM1_Init+0x138>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ada:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <MX_TIM1_Init+0x138>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ae0:	4b39      	ldr	r3, [pc, #228]	; (8002bc8 <MX_TIM1_Init+0x138>)
 8002ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ae6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae8:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <MX_TIM1_Init+0x138>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002aee:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <MX_TIM1_Init+0x138>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af4:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <MX_TIM1_Init+0x138>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002afa:	4833      	ldr	r0, [pc, #204]	; (8002bc8 <MX_TIM1_Init+0x138>)
 8002afc:	f00d fa51 	bl	800ffa2 <HAL_TIM_Base_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002b06:	f7ff fd2f 	bl	8002568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b14:	4619      	mov	r1, r3
 8002b16:	482c      	ldr	r0, [pc, #176]	; (8002bc8 <MX_TIM1_Init+0x138>)
 8002b18:	f00d fe1a 	bl	8010750 <HAL_TIM_ConfigClockSource>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002b22:	f7ff fd21 	bl	8002568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b26:	4828      	ldr	r0, [pc, #160]	; (8002bc8 <MX_TIM1_Init+0x138>)
 8002b28:	f00d fafa 	bl	8010120 <HAL_TIM_PWM_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002b32:	f7ff fd19 	bl	8002568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b36:	2300      	movs	r3, #0
 8002b38:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b42:	4619      	mov	r1, r3
 8002b44:	4820      	ldr	r0, [pc, #128]	; (8002bc8 <MX_TIM1_Init+0x138>)
 8002b46:	f00e fbdb 	bl	8011300 <HAL_TIMEx_MasterConfigSynchronization>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002b50:	f7ff fd0a 	bl	8002568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b54:	2360      	movs	r3, #96	; 0x60
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b60:	2300      	movs	r3, #0
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b74:	2208      	movs	r2, #8
 8002b76:	4619      	mov	r1, r3
 8002b78:	4813      	ldr	r0, [pc, #76]	; (8002bc8 <MX_TIM1_Init+0x138>)
 8002b7a:	f00d fd27 	bl	80105cc <HAL_TIM_PWM_ConfigChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002b84:	f7ff fcf0 	bl	8002568 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ba0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4807      	ldr	r0, [pc, #28]	; (8002bc8 <MX_TIM1_Init+0x138>)
 8002bac:	f00e fc24 	bl	80113f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002bb6:	f7ff fcd7 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002bba:	4803      	ldr	r0, [pc, #12]	; (8002bc8 <MX_TIM1_Init+0x138>)
 8002bbc:	f000 f974 	bl	8002ea8 <HAL_TIM_MspPostInit>

}
 8002bc0:	bf00      	nop
 8002bc2:	3758      	adds	r7, #88	; 0x58
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	2000b53c 	.word	0x2000b53c
 8002bcc:	40010000 	.word	0x40010000

08002bd0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b090      	sub	sp, #64	; 0x40
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002be4:	f107 031c 	add.w	r3, r7, #28
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002bf4:	f107 030c 	add.w	r3, r7, #12
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c0a:	4b3e      	ldr	r3, [pc, #248]	; (8002d04 <MX_TIM2_Init+0x134>)
 8002c0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c12:	4b3c      	ldr	r3, [pc, #240]	; (8002d04 <MX_TIM2_Init+0x134>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c18:	4b3a      	ldr	r3, [pc, #232]	; (8002d04 <MX_TIM2_Init+0x134>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002c1e:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <MX_TIM2_Init+0x134>)
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295
 8002c24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c26:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <MX_TIM2_Init+0x134>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c2c:	4b35      	ldr	r3, [pc, #212]	; (8002d04 <MX_TIM2_Init+0x134>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c32:	4834      	ldr	r0, [pc, #208]	; (8002d04 <MX_TIM2_Init+0x134>)
 8002c34:	f00d f9b5 	bl	800ffa2 <HAL_TIM_Base_Init>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002c3e:	f7ff fc93 	bl	8002568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	482d      	ldr	r0, [pc, #180]	; (8002d04 <MX_TIM2_Init+0x134>)
 8002c50:	f00d fd7e 	bl	8010750 <HAL_TIM_ConfigClockSource>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002c5a:	f7ff fc85 	bl	8002568 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002c5e:	4829      	ldr	r0, [pc, #164]	; (8002d04 <MX_TIM2_Init+0x134>)
 8002c60:	f00d fab7 	bl	80101d2 <HAL_TIM_IC_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002c6a:	f7ff fc7d 	bl	8002568 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002c6e:	2304      	movs	r3, #4
 8002c70:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002c72:	2350      	movs	r3, #80	; 0x50
 8002c74:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002c82:	f107 031c 	add.w	r3, r7, #28
 8002c86:	4619      	mov	r1, r3
 8002c88:	481e      	ldr	r0, [pc, #120]	; (8002d04 <MX_TIM2_Init+0x134>)
 8002c8a:	f00d fe28 	bl	80108de <HAL_TIM_SlaveConfigSynchro>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8002c94:	f7ff fc68 	bl	8002568 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002ca8:	f107 030c 	add.w	r3, r7, #12
 8002cac:	2200      	movs	r2, #0
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4814      	ldr	r0, [pc, #80]	; (8002d04 <MX_TIM2_Init+0x134>)
 8002cb2:	f00d fbef 	bl	8010494 <HAL_TIM_IC_ConfigChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002cbc:	f7ff fc54 	bl	8002568 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	2204      	movs	r2, #4
 8002cce:	4619      	mov	r1, r3
 8002cd0:	480c      	ldr	r0, [pc, #48]	; (8002d04 <MX_TIM2_Init+0x134>)
 8002cd2:	f00d fbdf 	bl	8010494 <HAL_TIM_IC_ConfigChannel>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8002cdc:	f7ff fc44 	bl	8002568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	4619      	mov	r1, r3
 8002cec:	4805      	ldr	r0, [pc, #20]	; (8002d04 <MX_TIM2_Init+0x134>)
 8002cee:	f00e fb07 	bl	8011300 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8002cf8:	f7ff fc36 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002cfc:	bf00      	nop
 8002cfe:	3740      	adds	r7, #64	; 0x40
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	2000b584 	.word	0x2000b584

08002d08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d0e:	f107 0308 	add.w	r3, r7, #8
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	609a      	str	r2, [r3, #8]
 8002d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d1c:	463b      	mov	r3, r7
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <MX_TIM3_Init+0x94>)
 8002d26:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <MX_TIM3_Init+0x98>)
 8002d28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d2a:	4b1c      	ldr	r3, [pc, #112]	; (8002d9c <MX_TIM3_Init+0x94>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d30:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <MX_TIM3_Init+0x94>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d36:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <MX_TIM3_Init+0x94>)
 8002d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3e:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <MX_TIM3_Init+0x94>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d44:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <MX_TIM3_Init+0x94>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d4a:	4814      	ldr	r0, [pc, #80]	; (8002d9c <MX_TIM3_Init+0x94>)
 8002d4c:	f00d f929 	bl	800ffa2 <HAL_TIM_Base_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002d56:	f7ff fc07 	bl	8002568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d60:	f107 0308 	add.w	r3, r7, #8
 8002d64:	4619      	mov	r1, r3
 8002d66:	480d      	ldr	r0, [pc, #52]	; (8002d9c <MX_TIM3_Init+0x94>)
 8002d68:	f00d fcf2 	bl	8010750 <HAL_TIM_ConfigClockSource>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002d72:	f7ff fbf9 	bl	8002568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002d76:	2320      	movs	r3, #32
 8002d78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d7e:	463b      	mov	r3, r7
 8002d80:	4619      	mov	r1, r3
 8002d82:	4806      	ldr	r0, [pc, #24]	; (8002d9c <MX_TIM3_Init+0x94>)
 8002d84:	f00e fabc 	bl	8011300 <HAL_TIMEx_MasterConfigSynchronization>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002d8e:	f7ff fbeb 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d92:	bf00      	nop
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	2000b4f4 	.word	0x2000b4f4
 8002da0:	40000400 	.word	0x40000400

08002da4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08c      	sub	sp, #48	; 0x30
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 031c 	add.w	r3, r7, #28
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a35      	ldr	r2, [pc, #212]	; (8002e98 <HAL_TIM_Base_MspInit+0xf4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10e      	bne.n	8002de4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <HAL_TIM_Base_MspInit+0xf8>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	4a33      	ldr	r2, [pc, #204]	; (8002e9c <HAL_TIM_Base_MspInit+0xf8>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd6:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_TIM_Base_MspInit+0xf8>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002de2:	e055      	b.n	8002e90 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dec:	d135      	bne.n	8002e5a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <HAL_TIM_Base_MspInit+0xf8>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	4a29      	ldr	r2, [pc, #164]	; (8002e9c <HAL_TIM_Base_MspInit+0xf8>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfe:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <HAL_TIM_Base_MspInit+0xf8>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <HAL_TIM_Base_MspInit+0xf8>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a22      	ldr	r2, [pc, #136]	; (8002e9c <HAL_TIM_Base_MspInit+0xf8>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_TIM_Base_MspInit+0xf8>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMD_data_Pin;
 8002e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMD_data_GPIO_Port, &GPIO_InitStruct);
 8002e3c:	f107 031c 	add.w	r3, r7, #28
 8002e40:	4619      	mov	r1, r3
 8002e42:	4817      	ldr	r0, [pc, #92]	; (8002ea0 <HAL_TIM_Base_MspInit+0xfc>)
 8002e44:	f00c fa08 	bl	800f258 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2105      	movs	r1, #5
 8002e4c:	201c      	movs	r0, #28
 8002e4e:	f00b feef 	bl	800ec30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e52:	201c      	movs	r0, #28
 8002e54:	f00b ff08 	bl	800ec68 <HAL_NVIC_EnableIRQ>
}
 8002e58:	e01a      	b.n	8002e90 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a11      	ldr	r2, [pc, #68]	; (8002ea4 <HAL_TIM_Base_MspInit+0x100>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d115      	bne.n	8002e90 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_TIM_Base_MspInit+0xf8>)
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	4a0b      	ldr	r2, [pc, #44]	; (8002e9c <HAL_TIM_Base_MspInit+0xf8>)
 8002e6e:	f043 0302 	orr.w	r3, r3, #2
 8002e72:	6413      	str	r3, [r2, #64]	; 0x40
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_TIM_Base_MspInit+0xf8>)
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002e80:	2200      	movs	r2, #0
 8002e82:	2105      	movs	r1, #5
 8002e84:	201d      	movs	r0, #29
 8002e86:	f00b fed3 	bl	800ec30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e8a:	201d      	movs	r0, #29
 8002e8c:	f00b feec 	bl	800ec68 <HAL_NVIC_EnableIRQ>
}
 8002e90:	bf00      	nop
 8002e92:	3730      	adds	r7, #48	; 0x30
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40010000 	.word	0x40010000
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	40000400 	.word	0x40000400

08002ea8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 030c 	add.w	r3, r7, #12
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a12      	ldr	r2, [pc, #72]	; (8002f10 <HAL_TIM_MspPostInit+0x68>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d11e      	bne.n	8002f08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <HAL_TIM_MspPostInit+0x6c>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <HAL_TIM_MspPostInit+0x6c>)
 8002ed4:	f043 0310 	orr.w	r3, r3, #16
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <HAL_TIM_MspPostInit+0x6c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = fan_PWM_Pin;
 8002ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eec:	2302      	movs	r3, #2
 8002eee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fan_PWM_GPIO_Port, &GPIO_InitStruct);
 8002efc:	f107 030c 	add.w	r3, r7, #12
 8002f00:	4619      	mov	r1, r3
 8002f02:	4805      	ldr	r0, [pc, #20]	; (8002f18 <HAL_TIM_MspPostInit+0x70>)
 8002f04:	f00c f9a8 	bl	800f258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f08:	bf00      	nop
 8002f0a:	3720      	adds	r7, #32
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40010000 	.word	0x40010000
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40021000 	.word	0x40021000

08002f1c <Accumulator_rand>:
ExtY_Accumulator_T Accumulator_Y;
static RT_MODEL_Accumulator_T Accumulator_M_;
RT_MODEL_Accumulator_T *const Accumulator_M = &Accumulator_M_;
static real_T Accumulator_rand(void);
static real_T Accumulator_rand(void)
{
 8002f1c:	b5b0      	push	{r4, r5, r7, lr}
 8002f1e:	b08e      	sub	sp, #56	; 0x38
 8002f20:	af00      	add	r7, sp, #0
  real_T r;
  int32_T i;
  int32_T kk;
  uint32_T u[2];
  switch (Accumulator_DW.method) {
 8002f22:	4baf      	ldr	r3, [pc, #700]	; (80031e0 <Accumulator_rand+0x2c4>)
 8002f24:	f8d3 3be8 	ldr.w	r3, [r3, #3048]	; 0xbe8
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d002      	beq.n	8002f32 <Accumulator_rand+0x16>
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d040      	beq.n	8002fb2 <Accumulator_rand+0x96>
 8002f30:	e073      	b.n	800301a <Accumulator_rand+0xfe>
   case 4U:
    {
      uint32_T c_r;
      uint32_T y;
      i = (int32_T)(Accumulator_DW.state / 127773U);
 8002f32:	4bab      	ldr	r3, [pc, #684]	; (80031e0 <Accumulator_rand+0x2c4>)
 8002f34:	f8d3 2bec 	ldr.w	r2, [r3, #3052]	; 0xbec
 8002f38:	4baa      	ldr	r3, [pc, #680]	; (80031e4 <Accumulator_rand+0x2c8>)
 8002f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f3e:	1ad2      	subs	r2, r2, r3
 8002f40:	0852      	lsrs	r2, r2, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
      c_r = (Accumulator_DW.state - i * 127773U) * 16807U;
 8002f48:	4ba5      	ldr	r3, [pc, #660]	; (80031e0 <Accumulator_rand+0x2c4>)
 8002f4a:	f8d3 2bec 	ldr.w	r2, [r3, #3052]	; 0xbec
 8002f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f50:	49a5      	ldr	r1, [pc, #660]	; (80031e8 <Accumulator_rand+0x2cc>)
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f244 12a7 	movw	r2, #16807	; 0x41a7
 8002f5c:	fb02 f303 	mul.w	r3, r2, r3
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
      y = 2836U * i;
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	f640 3214 	movw	r2, #2836	; 0xb14
 8002f68:	fb02 f303 	mul.w	r3, r2, r3
 8002f6c:	60fb      	str	r3, [r7, #12]
      if (c_r < y) {
 8002f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d207      	bcs.n	8002f86 <Accumulator_rand+0x6a>
        c_r = ~(y - c_r) & 2147483647U;
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
 8002f84:	e003      	b.n	8002f8e <Accumulator_rand+0x72>
      } else {
        c_r -= y;
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
      }

      r = (real_T)c_r * 4.6566128752457969E-10;
 8002f8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f90:	f7fd faaa 	bl	80004e8 <__aeabi_ui2d>
 8002f94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f98:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8002f9c:	f7fd fb1e 	bl	80005dc <__aeabi_dmul>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      Accumulator_DW.state = c_r;
 8002fa8:	4a8d      	ldr	r2, [pc, #564]	; (80031e0 <Accumulator_rand+0x2c4>)
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	f8c2 3bec 	str.w	r3, [r2, #3052]	; 0xbec
    }
    break;
 8002fb0:	e20c      	b.n	80033cc <Accumulator_rand+0x4b0>

   case 5U:
    {
      uint32_T c_r;
      uint32_T y;
      c_r = 69069U * Accumulator_DW.state_c[0] + 1234567U;
 8002fb2:	4b8b      	ldr	r3, [pc, #556]	; (80031e0 <Accumulator_rand+0x2c4>)
 8002fb4:	f8d3 3bf0 	ldr.w	r3, [r3, #3056]	; 0xbf0
 8002fb8:	4a8c      	ldr	r2, [pc, #560]	; (80031ec <Accumulator_rand+0x2d0>)
 8002fba:	fb02 f203 	mul.w	r2, r2, r3
 8002fbe:	4b8c      	ldr	r3, [pc, #560]	; (80031f0 <Accumulator_rand+0x2d4>)
 8002fc0:	4413      	add	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
      y = Accumulator_DW.state_c[1] << 13 ^ Accumulator_DW.state_c[1];
 8002fc4:	4b86      	ldr	r3, [pc, #536]	; (80031e0 <Accumulator_rand+0x2c4>)
 8002fc6:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8002fca:	035a      	lsls	r2, r3, #13
 8002fcc:	4b84      	ldr	r3, [pc, #528]	; (80031e0 <Accumulator_rand+0x2c4>)
 8002fce:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8002fd2:	4053      	eors	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
      y ^= y >> 17;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	0c5b      	lsrs	r3, r3, #17
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4053      	eors	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
      y ^= y << 5;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	015b      	lsls	r3, r3, #5
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4053      	eors	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
      Accumulator_DW.state_c[0] = c_r;
 8002fea:	4a7d      	ldr	r2, [pc, #500]	; (80031e0 <Accumulator_rand+0x2c4>)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f8c2 3bf0 	str.w	r3, [r2, #3056]	; 0xbf0
      Accumulator_DW.state_c[1] = y;
 8002ff2:	4a7b      	ldr	r2, [pc, #492]	; (80031e0 <Accumulator_rand+0x2c4>)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f8c2 3bf4 	str.w	r3, [r2, #3060]	; 0xbf4
      r = (real_T)(c_r + y) * 2.328306436538696E-10;
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4413      	add	r3, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd fa71 	bl	80004e8 <__aeabi_ui2d>
 8003006:	f04f 32ff 	mov.w	r2, #4294967295
 800300a:	4b7a      	ldr	r3, [pc, #488]	; (80031f4 <Accumulator_rand+0x2d8>)
 800300c:	f7fd fae6 	bl	80005dc <__aeabi_dmul>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }
    break;
 8003018:	e1d8      	b.n	80033cc <Accumulator_rand+0x4b0>

   default:
    {
      uint32_T c_r;
      if (!Accumulator_DW.state_not_empty) {
 800301a:	4b71      	ldr	r3, [pc, #452]	; (80031e0 <Accumulator_rand+0x2c4>)
 800301c:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8003020:	331c      	adds	r3, #28
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d138      	bne.n	800309a <Accumulator_rand+0x17e>
        memset(&Accumulator_DW.state_g[0], 0, 625U * sizeof(uint32_T));
 8003028:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800302c:	2100      	movs	r1, #0
 800302e:	4872      	ldr	r0, [pc, #456]	; (80031f8 <Accumulator_rand+0x2dc>)
 8003030:	f012 fd52 	bl	8015ad8 <memset>
        c_r = 5489U;
 8003034:	f241 5371 	movw	r3, #5489	; 0x1571
 8003038:	623b      	str	r3, [r7, #32]
        Accumulator_DW.state_g[0] = 5489U;
 800303a:	4b69      	ldr	r3, [pc, #420]	; (80031e0 <Accumulator_rand+0x2c4>)
 800303c:	f241 5271 	movw	r2, #5489	; 0x1571
 8003040:	f8c3 2bf8 	str.w	r2, [r3, #3064]	; 0xbf8
        for (i = 0; i < 623; i++) {
 8003044:	2300      	movs	r3, #0
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003048:	e015      	b.n	8003076 <Accumulator_rand+0x15a>
          c_r = ((c_r >> 30U ^ c_r) * 1812433253U + i) + 1U;
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	0f9a      	lsrs	r2, r3, #30
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	4053      	eors	r3, r2
 8003052:	4a6a      	ldr	r2, [pc, #424]	; (80031fc <Accumulator_rand+0x2e0>)
 8003054:	fb02 f203 	mul.w	r2, r2, r3
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305a:	4413      	add	r3, r2
 800305c:	3301      	adds	r3, #1
 800305e:	623b      	str	r3, [r7, #32]
          Accumulator_DW.state_g[i + 1] = c_r;
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	3301      	adds	r3, #1
 8003064:	495e      	ldr	r1, [pc, #376]	; (80031e0 <Accumulator_rand+0x2c4>)
 8003066:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 800306a:	6a3a      	ldr	r2, [r7, #32]
 800306c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (i = 0; i < 623; i++) {
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	3301      	adds	r3, #1
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	f240 226e 	movw	r2, #622	; 0x26e
 800307c:	4293      	cmp	r3, r2
 800307e:	dde4      	ble.n	800304a <Accumulator_rand+0x12e>
        }

        Accumulator_DW.state_g[624] = 624U;
 8003080:	4b57      	ldr	r3, [pc, #348]	; (80031e0 <Accumulator_rand+0x2c4>)
 8003082:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8003086:	3318      	adds	r3, #24
 8003088:	f44f 721c 	mov.w	r2, #624	; 0x270
 800308c:	601a      	str	r2, [r3, #0]
        Accumulator_DW.state_not_empty = true;
 800308e:	4b54      	ldr	r3, [pc, #336]	; (80031e0 <Accumulator_rand+0x2c4>)
 8003090:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8003094:	331c      	adds	r3, #28
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
      /*  OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
      /*                                                                         */
      /* =============================   END   ================================= */
      int32_T exitg1;
      do {
        exitg1 = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 2; i++) {
 800309e:	2300      	movs	r3, #0
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a2:	e0f1      	b.n	8003288 <Accumulator_rand+0x36c>
          uint32_T y;
          c_r = Accumulator_DW.state_g[624] + 1U;
 80030a4:	4b4e      	ldr	r3, [pc, #312]	; (80031e0 <Accumulator_rand+0x2c4>)
 80030a6:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 80030aa:	3318      	adds	r3, #24
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3301      	adds	r3, #1
 80030b0:	623b      	str	r3, [r7, #32]
          if (Accumulator_DW.state_g[624] + 1U >= 625U) {
 80030b2:	4b4b      	ldr	r3, [pc, #300]	; (80031e0 <Accumulator_rand+0x2c4>)
 80030b4:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 80030b8:	3318      	adds	r3, #24
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3301      	adds	r3, #1
 80030be:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80030c2:	f240 80b2 	bls.w	800322a <Accumulator_rand+0x30e>
            for (kk = 0; kk < 227; kk++) {
 80030c6:	2300      	movs	r3, #0
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ca:	e033      	b.n	8003134 <Accumulator_rand+0x218>
              c_r = (Accumulator_DW.state_g[kk + 1] & 2147483647U) |
 80030cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ce:	3301      	adds	r3, #1
 80030d0:	4a43      	ldr	r2, [pc, #268]	; (80031e0 <Accumulator_rand+0x2c4>)
 80030d2:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80030d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
                (Accumulator_DW.state_g[kk] & 2147483648U);
 80030de:	4940      	ldr	r1, [pc, #256]	; (80031e0 <Accumulator_rand+0x2c4>)
 80030e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e2:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80030e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
              c_r = (Accumulator_DW.state_g[kk + 1] & 2147483647U) |
 80030ee:	4313      	orrs	r3, r2
 80030f0:	623b      	str	r3, [r7, #32]
              if ((c_r & 1U) == 0U) {
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d103      	bne.n	8003104 <Accumulator_rand+0x1e8>
                c_r >>= 1U;
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	085b      	lsrs	r3, r3, #1
 8003100:	623b      	str	r3, [r7, #32]
 8003102:	e004      	b.n	800310e <Accumulator_rand+0x1f2>
              } else {
                c_r = c_r >> 1U ^ 2567483615U;
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	085a      	lsrs	r2, r3, #1
 8003108:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <Accumulator_rand+0x2e4>)
 800310a:	4053      	eors	r3, r2
 800310c:	623b      	str	r3, [r7, #32]
              }

              Accumulator_DW.state_g[kk] = Accumulator_DW.state_g[kk + 397] ^
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	f203 138d 	addw	r3, r3, #397	; 0x18d
 8003114:	4a32      	ldr	r2, [pc, #200]	; (80031e0 <Accumulator_rand+0x2c4>)
 8003116:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 800311a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	405a      	eors	r2, r3
 8003122:	492f      	ldr	r1, [pc, #188]	; (80031e0 <Accumulator_rand+0x2c4>)
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (kk = 0; kk < 227; kk++) {
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	3301      	adds	r3, #1
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	2be2      	cmp	r3, #226	; 0xe2
 8003138:	ddc8      	ble.n	80030cc <Accumulator_rand+0x1b0>
                c_r;
            }

            for (kk = 0; kk < 396; kk++) {
 800313a:	2300      	movs	r3, #0
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
 800313e:	e033      	b.n	80031a8 <Accumulator_rand+0x28c>
              c_r = (Accumulator_DW.state_g[kk + 227] & 2147483648U) |
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	33e3      	adds	r3, #227	; 0xe3
 8003144:	4a26      	ldr	r2, [pc, #152]	; (80031e0 <Accumulator_rand+0x2c4>)
 8003146:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 800314a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
                (Accumulator_DW.state_g[kk + 228] & 2147483647U);
 8003152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003154:	33e4      	adds	r3, #228	; 0xe4
 8003156:	4922      	ldr	r1, [pc, #136]	; (80031e0 <Accumulator_rand+0x2c4>)
 8003158:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 800315c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003160:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
              c_r = (Accumulator_DW.state_g[kk + 227] & 2147483648U) |
 8003164:	4313      	orrs	r3, r2
 8003166:	623b      	str	r3, [r7, #32]
              if ((c_r & 1U) == 0U) {
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d103      	bne.n	800317a <Accumulator_rand+0x25e>
                c_r >>= 1U;
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	085b      	lsrs	r3, r3, #1
 8003176:	623b      	str	r3, [r7, #32]
 8003178:	e004      	b.n	8003184 <Accumulator_rand+0x268>
              } else {
                c_r = c_r >> 1U ^ 2567483615U;
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	085a      	lsrs	r2, r3, #1
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <Accumulator_rand+0x2e4>)
 8003180:	4053      	eors	r3, r2
 8003182:	623b      	str	r3, [r7, #32]
              }

              Accumulator_DW.state_g[kk + 227] = Accumulator_DW.state_g[kk] ^
 8003184:	4a16      	ldr	r2, [pc, #88]	; (80031e0 <Accumulator_rand+0x2c4>)
 8003186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003188:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 800318c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	33e3      	adds	r3, #227	; 0xe3
 8003194:	6a3a      	ldr	r2, [r7, #32]
 8003196:	404a      	eors	r2, r1
 8003198:	4911      	ldr	r1, [pc, #68]	; (80031e0 <Accumulator_rand+0x2c4>)
 800319a:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (kk = 0; kk < 396; kk++) {
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	3301      	adds	r3, #1
 80031a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 80031ae:	dbc7      	blt.n	8003140 <Accumulator_rand+0x224>
                c_r;
            }

            c_r = (Accumulator_DW.state_g[623] & 2147483648U) |
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <Accumulator_rand+0x2c4>)
 80031b2:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 80031b6:	3314      	adds	r3, #20
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
              (Accumulator_DW.state_g[0] & 2147483647U);
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <Accumulator_rand+0x2c4>)
 80031c0:	f8d3 3bf8 	ldr.w	r3, [r3, #3064]	; 0xbf8
 80031c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
            c_r = (Accumulator_DW.state_g[623] & 2147483648U) |
 80031c8:	4313      	orrs	r3, r2
 80031ca:	623b      	str	r3, [r7, #32]
            if ((c_r & 1U) == 0U) {
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d116      	bne.n	8003204 <Accumulator_rand+0x2e8>
              c_r >>= 1U;
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	085b      	lsrs	r3, r3, #1
 80031da:	623b      	str	r3, [r7, #32]
 80031dc:	e017      	b.n	800320e <Accumulator_rand+0x2f2>
 80031de:	bf00      	nop
 80031e0:	2000c7b0 	.word	0x2000c7b0
 80031e4:	069c16bd 	.word	0x069c16bd
 80031e8:	0001f31d 	.word	0x0001f31d
 80031ec:	00010dcd 	.word	0x00010dcd
 80031f0:	0012d687 	.word	0x0012d687
 80031f4:	3defffff 	.word	0x3defffff
 80031f8:	2000d3a8 	.word	0x2000d3a8
 80031fc:	6c078965 	.word	0x6c078965
 8003200:	9908b0df 	.word	0x9908b0df
            } else {
              c_r = c_r >> 1U ^ 2567483615U;
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	085a      	lsrs	r2, r3, #1
 8003208:	4b76      	ldr	r3, [pc, #472]	; (80033e4 <Accumulator_rand+0x4c8>)
 800320a:	4053      	eors	r3, r2
 800320c:	623b      	str	r3, [r7, #32]
            }

            Accumulator_DW.state_g[623] = Accumulator_DW.state_g[396] ^ c_r;
 800320e:	4b76      	ldr	r3, [pc, #472]	; (80033e8 <Accumulator_rand+0x4cc>)
 8003210:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8003214:	3308      	adds	r3, #8
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	405a      	eors	r2, r3
 800321c:	4b72      	ldr	r3, [pc, #456]	; (80033e8 <Accumulator_rand+0x4cc>)
 800321e:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8003222:	3314      	adds	r3, #20
 8003224:	601a      	str	r2, [r3, #0]
            c_r = 1U;
 8003226:	2301      	movs	r3, #1
 8003228:	623b      	str	r3, [r7, #32]
          }

          y = Accumulator_DW.state_g[(int32_T)c_r - 1];
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	3b01      	subs	r3, #1
 800322e:	4a6e      	ldr	r2, [pc, #440]	; (80033e8 <Accumulator_rand+0x4cc>)
 8003230:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003238:	60bb      	str	r3, [r7, #8]
          Accumulator_DW.state_g[624] = c_r;
 800323a:	4b6b      	ldr	r3, [pc, #428]	; (80033e8 <Accumulator_rand+0x4cc>)
 800323c:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8003240:	3318      	adds	r3, #24
 8003242:	6a3a      	ldr	r2, [r7, #32]
 8003244:	601a      	str	r2, [r3, #0]
          y ^= y >> 11U;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	0adb      	lsrs	r3, r3, #11
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	4053      	eors	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
          y ^= y << 7U & 2636928640U;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	01da      	lsls	r2, r3, #7
 8003254:	4b65      	ldr	r3, [pc, #404]	; (80033ec <Accumulator_rand+0x4d0>)
 8003256:	4013      	ands	r3, r2
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	4053      	eors	r3, r2
 800325c:	60bb      	str	r3, [r7, #8]
          y ^= y << 15U & 4022730752U;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	03da      	lsls	r2, r3, #15
 8003262:	4b63      	ldr	r3, [pc, #396]	; (80033f0 <Accumulator_rand+0x4d4>)
 8003264:	4013      	ands	r3, r2
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	4053      	eors	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
          u[i] = y >> 18U ^ y;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	0c9a      	lsrs	r2, r3, #18
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	405a      	eors	r2, r3
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800327c:	440b      	add	r3, r1
 800327e:	f843 2c38 	str.w	r2, [r3, #-56]
        for (i = 0; i < 2; i++) {
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	3301      	adds	r3, #1
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	2b01      	cmp	r3, #1
 800328c:	f77f af0a 	ble.w	80030a4 <Accumulator_rand+0x188>
        }

        r = ((real_T)(u[0] >> 5U) * 6.7108864E+7 + (real_T)(u[1] >> 6U)) *
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd f927 	bl	80004e8 <__aeabi_ui2d>
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	4b55      	ldr	r3, [pc, #340]	; (80033f4 <Accumulator_rand+0x4d8>)
 80032a0:	f7fd f99c 	bl	80005dc <__aeabi_dmul>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4614      	mov	r4, r2
 80032aa:	461d      	mov	r5, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	099b      	lsrs	r3, r3, #6
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fd f919 	bl	80004e8 <__aeabi_ui2d>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4620      	mov	r0, r4
 80032bc:	4629      	mov	r1, r5
 80032be:	f7fc ffd7 	bl	8000270 <__adddf3>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4610      	mov	r0, r2
 80032c8:	4619      	mov	r1, r3
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	4b4a      	ldr	r3, [pc, #296]	; (80033f8 <Accumulator_rand+0x4dc>)
 80032d0:	f7fd f984 	bl	80005dc <__aeabi_dmul>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
          1.1102230246251565E-16;
        if (r == 0.0) {
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80032e8:	f7fd fbe0 	bl	8000aac <__aeabi_dcmpeq>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d065      	beq.n	80033be <Accumulator_rand+0x4a2>
          boolean_T b_isvalid;
          b_isvalid = ((Accumulator_DW.state_g[624] >= 1U) &&
 80032f2:	4b3d      	ldr	r3, [pc, #244]	; (80033e8 <Accumulator_rand+0x4cc>)
 80032f4:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 80032f8:	3318      	adds	r3, #24
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d009      	beq.n	8003314 <Accumulator_rand+0x3f8>
                       (Accumulator_DW.state_g[624] < 625U));
 8003300:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <Accumulator_rand+0x4cc>)
 8003302:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8003306:	3318      	adds	r3, #24
 8003308:	681b      	ldr	r3, [r3, #0]
          b_isvalid = ((Accumulator_DW.state_g[624] >= 1U) &&
 800330a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800330e:	d801      	bhi.n	8003314 <Accumulator_rand+0x3f8>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <Accumulator_rand+0x3fa>
 8003314:	2300      	movs	r3, #0
 8003316:	76fb      	strb	r3, [r7, #27]
          if (b_isvalid) {
 8003318:	7efb      	ldrb	r3, [r7, #27]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d01e      	beq.n	800335c <Accumulator_rand+0x440>
            boolean_T exitg2;
            b_isvalid = false;
 800331e:	2300      	movs	r3, #0
 8003320:	76fb      	strb	r3, [r7, #27]
            i = 1;
 8003322:	2301      	movs	r3, #1
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
            exitg2 = false;
 8003326:	2300      	movs	r3, #0
 8003328:	76bb      	strb	r3, [r7, #26]
            while ((!exitg2) && (i < 625)) {
 800332a:	e010      	b.n	800334e <Accumulator_rand+0x432>
              if (Accumulator_DW.state_g[i - 1] == 0U) {
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	3b01      	subs	r3, #1
 8003330:	4a2d      	ldr	r2, [pc, #180]	; (80033e8 <Accumulator_rand+0x4cc>)
 8003332:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d103      	bne.n	8003346 <Accumulator_rand+0x42a>
                i++;
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	3301      	adds	r3, #1
 8003342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003344:	e003      	b.n	800334e <Accumulator_rand+0x432>
              } else {
                b_isvalid = true;
 8003346:	2301      	movs	r3, #1
 8003348:	76fb      	strb	r3, [r7, #27]
                exitg2 = true;
 800334a:	2301      	movs	r3, #1
 800334c:	76bb      	strb	r3, [r7, #26]
            while ((!exitg2) && (i < 625)) {
 800334e:	7ebb      	ldrb	r3, [r7, #26]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d103      	bne.n	800335c <Accumulator_rand+0x440>
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800335a:	dde7      	ble.n	800332c <Accumulator_rand+0x410>
              }
            }
          }

          if (!b_isvalid) {
 800335c:	7efb      	ldrb	r3, [r7, #27]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d12f      	bne.n	80033c2 <Accumulator_rand+0x4a6>
            c_r = 5489U;
 8003362:	f241 5371 	movw	r3, #5489	; 0x1571
 8003366:	623b      	str	r3, [r7, #32]
            Accumulator_DW.state_g[0] = 5489U;
 8003368:	4b1f      	ldr	r3, [pc, #124]	; (80033e8 <Accumulator_rand+0x4cc>)
 800336a:	f241 5271 	movw	r2, #5489	; 0x1571
 800336e:	f8c3 2bf8 	str.w	r2, [r3, #3064]	; 0xbf8
            for (i = 0; i < 623; i++) {
 8003372:	2300      	movs	r3, #0
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003376:	e015      	b.n	80033a4 <Accumulator_rand+0x488>
              c_r = ((c_r >> 30U ^ c_r) * 1812433253U + i) + 1U;
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	0f9a      	lsrs	r2, r3, #30
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	4053      	eors	r3, r2
 8003380:	4a1e      	ldr	r2, [pc, #120]	; (80033fc <Accumulator_rand+0x4e0>)
 8003382:	fb02 f203 	mul.w	r2, r2, r3
 8003386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003388:	4413      	add	r3, r2
 800338a:	3301      	adds	r3, #1
 800338c:	623b      	str	r3, [r7, #32]
              Accumulator_DW.state_g[i + 1] = c_r;
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	3301      	adds	r3, #1
 8003392:	4915      	ldr	r1, [pc, #84]	; (80033e8 <Accumulator_rand+0x4cc>)
 8003394:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (i = 0; i < 623; i++) {
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	3301      	adds	r3, #1
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a6:	f240 226e 	movw	r2, #622	; 0x26e
 80033aa:	4293      	cmp	r3, r2
 80033ac:	dde4      	ble.n	8003378 <Accumulator_rand+0x45c>
            }

            Accumulator_DW.state_g[624] = 624U;
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <Accumulator_rand+0x4cc>)
 80033b0:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 80033b4:	3318      	adds	r3, #24
 80033b6:	f44f 721c 	mov.w	r2, #624	; 0x270
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e001      	b.n	80033c2 <Accumulator_rand+0x4a6>
          }
        } else {
          exitg1 = 1;
 80033be:	2301      	movs	r3, #1
 80033c0:	61fb      	str	r3, [r7, #28]
        }
      } while (exitg1 == 0);
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f43f ae68 	beq.w	800309a <Accumulator_rand+0x17e>
    }
    break;
 80033ca:	bf00      	nop
  }

  return r;
 80033cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80033d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80033d4:	eeb0 0a47 	vmov.f32	s0, s14
 80033d8:	eef0 0a67 	vmov.f32	s1, s15
 80033dc:	3738      	adds	r7, #56	; 0x38
 80033de:	46bd      	mov	sp, r7
 80033e0:	bdb0      	pop	{r4, r5, r7, pc}
 80033e2:	bf00      	nop
 80033e4:	9908b0df 	.word	0x9908b0df
 80033e8:	2000c7b0 	.word	0x2000c7b0
 80033ec:	9d2c5680 	.word	0x9d2c5680
 80033f0:	efc60000 	.word	0xefc60000
 80033f4:	41900000 	.word	0x41900000
 80033f8:	3ca00000 	.word	0x3ca00000
 80033fc:	6c078965 	.word	0x6c078965

08003400 <Accumulator_step>:

void Accumulator_step(void)
{
 8003400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003404:	f6ad 7df4 	subw	sp, sp, #4084	; 0xff4
 8003408:	af00      	add	r7, sp, #0
  real_T rtb_Switch[126];
  real_T rtb_Divide_a;
  real_T rtb_Memory3;
  real_T rtb_tauz;
  int32_T i;
  rtb_Memory3 = Accumulator_DW.Memory3_PreviousInput;
 800340a:	4ba7      	ldr	r3, [pc, #668]	; (80036a8 <Accumulator_step+0x2a8>)
 800340c:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8003410:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 8003414:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8003418:	2300      	movs	r3, #0
 800341a:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 800341e:	e133      	b.n	8003688 <Accumulator_step+0x288>
    real_T a;
    real_T rtb_Rsz_m;
    rtb_Divide_a = Accumulator_DW.Memory_PreviousInput[i] /
 8003420:	4aa1      	ldr	r2, [pc, #644]	; (80036a8 <Accumulator_step+0x2a8>)
 8003422:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003426:	337f      	adds	r3, #127	; 0x7f
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	e9d3 0100 	ldrd	r0, r1, [r3]
      Accumulator_DW.Memory2_PreviousInput[i];
 8003430:	4a9d      	ldr	r2, [pc, #628]	; (80036a8 <Accumulator_step+0x2a8>)
 8003432:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003436:	33fd      	adds	r3, #253	; 0xfd
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
    rtb_Divide_a = Accumulator_DW.Memory_PreviousInput[i] /
 8003440:	f7fd f9f6 	bl	8000830 <__aeabi_ddiv>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	f607 71d8 	addw	r1, r7, #4056	; 0xfd8
 800344c:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz_m = look1_binlxpw(rtb_Divide_a, Accumulator_P.soc, Accumulator_P.Rs,
 8003450:	220c      	movs	r2, #12
 8003452:	4996      	ldr	r1, [pc, #600]	; (80036ac <Accumulator_step+0x2ac>)
 8003454:	4896      	ldr	r0, [pc, #600]	; (80036b0 <Accumulator_step+0x2b0>)
 8003456:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 800345a:	ed93 0b00 	vldr	d0, [r3]
 800345e:	f004 fd2d 	bl	8007ebc <look1_binlxpw>
 8003462:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8003466:	ed83 0b00 	vstr	d0, [r3]
      12U);
    rtb_tauz = look1_binlxpw(rtb_Divide_a, Accumulator_P.soc, Accumulator_P.tau,
 800346a:	220c      	movs	r2, #12
 800346c:	4991      	ldr	r1, [pc, #580]	; (80036b4 <Accumulator_step+0x2b4>)
 800346e:	4890      	ldr	r0, [pc, #576]	; (80036b0 <Accumulator_step+0x2b0>)
 8003470:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8003474:	ed93 0b00 	vldr	d0, [r3]
 8003478:	f004 fd20 	bl	8007ebc <look1_binlxpw>
 800347c:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003480:	ed83 0b00 	vstr	d0, [r3]
      12U);
    a = rtb_Rsz_m * rtb_tauz;
 8003484:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f607 71c8 	addw	r1, r7, #4040	; 0xfc8
 8003490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003494:	f7fd f8a2 	bl	80005dc <__aeabi_dmul>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	f507 617c 	add.w	r1, r7, #4032	; 0xfc0
 80034a0:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz_m = (rtb_Rsz_m + look1_binlxpw(rtb_Divide_a, Accumulator_P.soc,
 80034a4:	220c      	movs	r2, #12
 80034a6:	4984      	ldr	r1, [pc, #528]	; (80036b8 <Accumulator_step+0x2b8>)
 80034a8:	4881      	ldr	r0, [pc, #516]	; (80036b0 <Accumulator_step+0x2b0>)
 80034aa:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80034ae:	ed93 0b00 	vldr	d0, [r3]
 80034b2:	f004 fd03 	bl	8007ebc <look1_binlxpw>
 80034b6:	ec51 0b10 	vmov	r0, r1, d0
 80034ba:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	f7fc fed5 	bl	8000270 <__adddf3>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
      Accumulator_P.Rp, 12U)) * Accumulator_P.Ts_sim;
 80034ce:	4b7b      	ldr	r3, [pc, #492]	; (80036bc <Accumulator_step+0x2bc>)
 80034d0:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
    rtb_Rsz_m = (rtb_Rsz_m + look1_binlxpw(rtb_Divide_a, Accumulator_P.soc,
 80034d4:	f7fd f882 	bl	80005dc <__aeabi_dmul>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	f607 71c8 	addw	r1, r7, #4040	; 0xfc8
 80034e0:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz_m = (((2.0 * a + rtb_Rsz_m) * Accumulator_U.SimCurrent + (rtb_Rsz_m
 80034e4:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 80034e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	f7fc febe 	bl	8000270 <__adddf3>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	f7fc feb4 	bl	8000270 <__adddf3>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	4b6b      	ldr	r3, [pc, #428]	; (80036c0 <Accumulator_step+0x2c0>)
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	f7fd f861 	bl	80005dc <__aeabi_dmul>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4690      	mov	r8, r2
 8003520:	4699      	mov	r9, r3
      - 2.0 * a) * rtb_Memory3) - (Accumulator_P.Ts_sim - 2.0 * rtb_tauz) *
 8003522:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8003526:	e9d3 0100 	ldrd	r0, r1, [r3]
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	f7fc fe9f 	bl	8000270 <__adddf3>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	f607 71c8 	addw	r1, r7, #4040	; 0xfc8
 800353a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800353e:	f7fc fe95 	bl	800026c <__aeabi_dsub>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4610      	mov	r0, r2
 8003548:	4619      	mov	r1, r3
 800354a:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f7fd f843 	bl	80005dc <__aeabi_dmul>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
    rtb_Rsz_m = (((2.0 * a + rtb_Rsz_m) * Accumulator_U.SimCurrent + (rtb_Rsz_m
 800355a:	4640      	mov	r0, r8
 800355c:	4649      	mov	r1, r9
 800355e:	f7fc fe87 	bl	8000270 <__adddf3>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4692      	mov	sl, r2
 8003568:	469b      	mov	fp, r3
      - 2.0 * a) * rtb_Memory3) - (Accumulator_P.Ts_sim - 2.0 * rtb_tauz) *
 800356a:	4b54      	ldr	r3, [pc, #336]	; (80036bc <Accumulator_step+0x2bc>)
 800356c:	e9d3 893a 	ldrd	r8, r9, [r3, #232]	; 0xe8
 8003570:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003574:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	f7fc fe78 	bl	8000270 <__adddf3>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4640      	mov	r0, r8
 8003586:	4649      	mov	r1, r9
 8003588:	f7fc fe70 	bl	800026c <__aeabi_dsub>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4610      	mov	r0, r2
 8003592:	4619      	mov	r1, r3
                 Accumulator_DW.Memory4_PreviousInput[i]) / (2.0 * rtb_tauz +
 8003594:	4a44      	ldr	r2, [pc, #272]	; (80036a8 <Accumulator_step+0x2a8>)
 8003596:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4413      	add	r3, r2
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
      - 2.0 * a) * rtb_Memory3) - (Accumulator_P.Ts_sim - 2.0 * rtb_tauz) *
 80035a2:	f7fd f81b 	bl	80005dc <__aeabi_dmul>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4650      	mov	r0, sl
 80035ac:	4659      	mov	r1, fp
 80035ae:	f7fc fe5d 	bl	800026c <__aeabi_dsub>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4690      	mov	r8, r2
 80035b8:	4699      	mov	r9, r3
                 Accumulator_DW.Memory4_PreviousInput[i]) / (2.0 * rtb_tauz +
 80035ba:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 80035be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	f7fc fe53 	bl	8000270 <__adddf3>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
      Accumulator_P.Ts_sim);
 80035d2:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <Accumulator_step+0x2bc>)
 80035d4:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
                 Accumulator_DW.Memory4_PreviousInput[i]) / (2.0 * rtb_tauz +
 80035d8:	f7fc fe4a 	bl	8000270 <__adddf3>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
    rtb_Rsz_m = (((2.0 * a + rtb_Rsz_m) * Accumulator_U.SimCurrent + (rtb_Rsz_m
 80035e0:	4640      	mov	r0, r8
 80035e2:	4649      	mov	r1, r9
 80035e4:	f7fd f924 	bl	8000830 <__aeabi_ddiv>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	f607 71c8 	addw	r1, r7, #4040	; 0xfc8
 80035f0:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_tauz = rtb_Rsz_m + look1_binlxpw(rtb_Divide_a, Accumulator_P.soc,
 80035f4:	220c      	movs	r2, #12
 80035f6:	4933      	ldr	r1, [pc, #204]	; (80036c4 <Accumulator_step+0x2c4>)
 80035f8:	482d      	ldr	r0, [pc, #180]	; (80036b0 <Accumulator_step+0x2b0>)
 80035fa:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80035fe:	ed93 0b00 	vldr	d0, [r3]
 8003602:	f004 fc5b 	bl	8007ebc <look1_binlxpw>
 8003606:	ec53 2b10 	vmov	r2, r3, d0
 800360a:	f607 71c8 	addw	r1, r7, #4040	; 0xfc8
 800360e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003612:	f7fc fe2d 	bl	8000270 <__adddf3>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	f507 617d 	add.w	r1, r7, #4048	; 0xfd0
 800361e:	e9c1 2300 	strd	r2, r3, [r1]
      Accumulator_P.ocv, 12U);
    Accumulator_Y.Voltages[i] = rtb_tauz;
 8003622:	4a29      	ldr	r2, [pc, #164]	; (80036c8 <Accumulator_step+0x2c8>)
 8003624:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	18d1      	adds	r1, r2, r3
 800362c:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Divide[i] = rtb_Divide_a;
 8003638:	f507 623d 	add.w	r2, r7, #3024	; 0xbd0
 800363c:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	18d1      	adds	r1, r2, r3
 8003644:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz[i] = rtb_Rsz_m;
 8003650:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8003654:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	18d1      	adds	r1, r2, r3
 800365c:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Switch[i] = rtb_tauz;
 8003668:	463a      	mov	r2, r7
 800366a:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	18d1      	adds	r1, r2, r3
 8003672:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 800367e:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003682:	3301      	adds	r3, #1
 8003684:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8003688:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 800368c:	2b7d      	cmp	r3, #125	; 0x7d
 800368e:	f77f aec7 	ble.w	8003420 <Accumulator_step+0x20>
  }

  rtb_Memory3 = rtb_Switch[0];
 8003692:	463b      	mov	r3, r7
 8003694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003698:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 800369c:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 125; i++) {
 80036a0:	2300      	movs	r3, #0
 80036a2:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 80036a6:	e02a      	b.n	80036fe <Accumulator_step+0x2fe>
 80036a8:	2000c7b0 	.word	0x2000c7b0
 80036ac:	20000088 	.word	0x20000088
 80036b0:	20000b28 	.word	0x20000b28
 80036b4:	20000b90 	.word	0x20000b90
 80036b8:	20000020 	.word	0x20000020
 80036bc:	20000008 	.word	0x20000008
 80036c0:	2000c388 	.word	0x2000c388
 80036c4:	20000ac0 	.word	0x20000ac0
 80036c8:	2000b5d0 	.word	0x2000b5d0
    rtb_Memory3 += rtb_Switch[i + 1];
 80036cc:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 80036d0:	3301      	adds	r3, #1
 80036d2:	463a      	mov	r2, r7
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4413      	add	r3, r2
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 80036e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036e4:	f7fc fdc4 	bl	8000270 <__adddf3>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 80036f0:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 125; i++) {
 80036f4:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 80036f8:	3301      	adds	r3, #1
 80036fa:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 80036fe:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003702:	2b7c      	cmp	r3, #124	; 0x7c
 8003704:	dde2      	ble.n	80036cc <Accumulator_step+0x2cc>
  }

  rtb_Memory3 = ((Accumulator_P.cell_count * 0.0034726631697176778 *
 8003706:	4bb2      	ldr	r3, [pc, #712]	; (80039d0 <Accumulator_step+0x5d0>)
 8003708:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 800370c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003710:	a3ab      	add	r3, pc, #684	; (adr r3, 80039c0 <Accumulator_step+0x5c0>)
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	f7fc ff61 	bl	80005dc <__aeabi_dmul>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4610      	mov	r0, r2
 8003720:	4619      	mov	r1, r3
                  Accumulator_U.CV_true * (Accumulator_U.CV_level - rtb_Memory3)
 8003722:	4bac      	ldr	r3, [pc, #688]	; (80039d4 <Accumulator_step+0x5d4>)
 8003724:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
  rtb_Memory3 = ((Accumulator_P.cell_count * 0.0034726631697176778 *
 8003728:	f7fc ff58 	bl	80005dc <__aeabi_dmul>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4690      	mov	r8, r2
 8003732:	4699      	mov	r9, r3
                  Accumulator_U.CV_true * (Accumulator_U.CV_level - rtb_Memory3)
 8003734:	4ba7      	ldr	r3, [pc, #668]	; (80039d4 <Accumulator_step+0x5d4>)
 8003736:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800373a:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f7fc fd93 	bl	800026c <__aeabi_dsub>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4640      	mov	r0, r8
 800374c:	4649      	mov	r1, r9
 800374e:	f7fc ff45 	bl	80005dc <__aeabi_dmul>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4690      	mov	r8, r2
 8003758:	4699      	mov	r9, r3
                  + Accumulator_U.CC_true * Accumulator_U.CC_level) +
 800375a:	4b9e      	ldr	r3, [pc, #632]	; (80039d4 <Accumulator_step+0x5d4>)
 800375c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003760:	4b9c      	ldr	r3, [pc, #624]	; (80039d4 <Accumulator_step+0x5d4>)
 8003762:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003766:	f7fc ff39 	bl	80005dc <__aeabi_dmul>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4640      	mov	r0, r8
 8003770:	4649      	mov	r1, r9
 8003772:	f7fc fd7d 	bl	8000270 <__adddf3>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
                 Accumulator_U.SimCurrent) * Accumulator_P.Ts_sim;
 800377e:	4b95      	ldr	r3, [pc, #596]	; (80039d4 <Accumulator_step+0x5d4>)
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
                  + Accumulator_U.CC_true * Accumulator_U.CC_level) +
 8003784:	f7fc fd74 	bl	8000270 <__adddf3>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4610      	mov	r0, r2
 800378e:	4619      	mov	r1, r3
                 Accumulator_U.SimCurrent) * Accumulator_P.Ts_sim;
 8003790:	4b8f      	ldr	r3, [pc, #572]	; (80039d0 <Accumulator_step+0x5d0>)
 8003792:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
  rtb_Memory3 = ((Accumulator_P.cell_count * 0.0034726631697176778 *
 8003796:	f7fc ff21 	bl	80005dc <__aeabi_dmul>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 80037a2:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 80037a6:	2300      	movs	r3, #0
 80037a8:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 80037ac:	e04a      	b.n	8003844 <Accumulator_step+0x444>
    rtb_Switch[i] = rtb_Switch[i] / Accumulator_P.R_short
 80037ae:	463a      	mov	r2, r7
 80037b0:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4413      	add	r3, r2
 80037b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037bc:	4b84      	ldr	r3, [pc, #528]	; (80039d0 <Accumulator_step+0x5d0>)
 80037be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80037c2:	f7fd f835 	bl	8000830 <__aeabi_ddiv>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4610      	mov	r0, r2
 80037cc:	4619      	mov	r1, r3
      * Accumulator_U.Balances[i] * Accumulator_P.Gain_Gain + (rtb_Memory3 +
 80037ce:	4a81      	ldr	r2, [pc, #516]	; (80039d4 <Accumulator_step+0x5d4>)
 80037d0:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 80037d4:	3305      	adds	r3, #5
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f7fc fefd 	bl	80005dc <__aeabi_dmul>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	4b79      	ldr	r3, [pc, #484]	; (80039d0 <Accumulator_step+0x5d0>)
 80037ec:	f603 73e8 	addw	r3, r3, #4072	; 0xfe8
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f7fc fef2 	bl	80005dc <__aeabi_dmul>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4690      	mov	r8, r2
 80037fe:	4699      	mov	r9, r3
      Accumulator_DW.Memory_PreviousInput[i]);
 8003800:	4a75      	ldr	r2, [pc, #468]	; (80039d8 <Accumulator_step+0x5d8>)
 8003802:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003806:	337f      	adds	r3, #127	; 0x7f
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	e9d3 0100 	ldrd	r0, r1, [r3]
      * Accumulator_U.Balances[i] * Accumulator_P.Gain_Gain + (rtb_Memory3 +
 8003810:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	f7fc fd2a 	bl	8000270 <__adddf3>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4640      	mov	r0, r8
 8003822:	4649      	mov	r1, r9
 8003824:	f7fc fd24 	bl	8000270 <__adddf3>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
    rtb_Switch[i] = rtb_Switch[i] / Accumulator_P.R_short
 800382c:	4638      	mov	r0, r7
 800382e:	f8d7 1fe4 	ldr.w	r1, [r7, #4068]	; 0xfe4
 8003832:	00c9      	lsls	r1, r1, #3
 8003834:	4401      	add	r1, r0
 8003836:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 800383a:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 800383e:	3301      	adds	r3, #1
 8003840:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8003844:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003848:	2b7d      	cmp	r3, #125	; 0x7d
 800384a:	ddb0      	ble.n	80037ae <Accumulator_step+0x3ae>
  }

  rtb_Memory3 = exp(Accumulator_P.Cap_det / (Accumulator_P.C_r * 3600.0) *
 800384c:	4b60      	ldr	r3, [pc, #384]	; (80039d0 <Accumulator_step+0x5d0>)
 800384e:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8003852:	4b5f      	ldr	r3, [pc, #380]	; (80039d0 <Accumulator_step+0x5d0>)
 8003854:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003858:	a35b      	add	r3, pc, #364	; (adr r3, 80039c8 <Accumulator_step+0x5c8>)
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	f7fc febd 	bl	80005dc <__aeabi_dmul>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4640      	mov	r0, r8
 8003868:	4649      	mov	r1, r9
 800386a:	f7fc ffe1 	bl	8000830 <__aeabi_ddiv>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
                    Accumulator_DW.Memory1_PreviousInput);
 8003876:	4b58      	ldr	r3, [pc, #352]	; (80039d8 <Accumulator_step+0x5d8>)
 8003878:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Memory3 = exp(Accumulator_P.Cap_det / (Accumulator_P.C_r * 3600.0) *
 8003880:	f7fc feac 	bl	80005dc <__aeabi_dmul>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	ec43 2b17 	vmov	d7, r2, r3
 800388c:	eeb0 0a47 	vmov.f32	s0, s14
 8003890:	eef0 0a67 	vmov.f32	s1, s15
 8003894:	f012 fac4 	bl	8015e20 <exp>
 8003898:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 800389c:	ed83 0b00 	vstr	d0, [r3]
  for (i = 0; i < 126; i++) {
 80038a0:	2300      	movs	r3, #0
 80038a2:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 80038a6:	e03c      	b.n	8003922 <Accumulator_step+0x522>
    rtb_Rpz[i] = Accumulator_DW.Memory2_PreviousInput[i] * rtb_Memory3;
 80038a8:	4a4b      	ldr	r2, [pc, #300]	; (80039d8 <Accumulator_step+0x5d8>)
 80038aa:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 80038ae:	33fd      	adds	r3, #253	; 0xfd
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038b8:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	f7fc fe8c 	bl	80005dc <__aeabi_dmul>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	f507 60fc 	add.w	r0, r7, #2016	; 0x7e0
 80038cc:	f8d7 1fe4 	ldr.w	r1, [r7, #4068]	; 0xfe4
 80038d0:	00c9      	lsls	r1, r1, #3
 80038d2:	4401      	add	r1, r0
 80038d4:	e9c1 2300 	strd	r2, r3, [r1]
    Accumulator_Y.SOCs[i] = rtb_Divide[i];
 80038d8:	f507 623d 	add.w	r2, r7, #3024	; 0xbd0
 80038dc:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	483c      	ldr	r0, [pc, #240]	; (80039dc <Accumulator_step+0x5dc>)
 80038ea:	f8d7 1fe4 	ldr.w	r1, [r7, #4068]	; 0xfe4
 80038ee:	317e      	adds	r1, #126	; 0x7e
 80038f0:	00c9      	lsls	r1, r1, #3
 80038f2:	4401      	add	r1, r0
 80038f4:	e9c1 2300 	strd	r2, r3, [r1]
    Accumulator_Y.Capacities[i] = Accumulator_DW.Memory2_PreviousInput[i];
 80038f8:	4a37      	ldr	r2, [pc, #220]	; (80039d8 <Accumulator_step+0x5d8>)
 80038fa:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 80038fe:	33fd      	adds	r3, #253	; 0xfd
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4413      	add	r3, r2
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	4834      	ldr	r0, [pc, #208]	; (80039dc <Accumulator_step+0x5dc>)
 800390a:	f8d7 1fe4 	ldr.w	r1, [r7, #4068]	; 0xfe4
 800390e:	31fc      	adds	r1, #252	; 0xfc
 8003910:	00c9      	lsls	r1, r1, #3
 8003912:	4401      	add	r1, r0
 8003914:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8003918:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 800391c:	3301      	adds	r3, #1
 800391e:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8003922:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003926:	2b7d      	cmp	r3, #125	; 0x7d
 8003928:	ddbe      	ble.n	80038a8 <Accumulator_step+0x4a8>
  }

  memcpy(&Accumulator_Y.Temperature[0], &Accumulator_P.cTmp[0], 60U * sizeof
 800392a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800392e:	492c      	ldr	r1, [pc, #176]	; (80039e0 <Accumulator_step+0x5e0>)
 8003930:	482c      	ldr	r0, [pc, #176]	; (80039e4 <Accumulator_step+0x5e4>)
 8003932:	f012 f8c3 	bl	8015abc <memcpy>
         (real_T));
  if (Accumulator_U.Overtemperature != 0.0) {
 8003936:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <Accumulator_step+0x5d4>)
 8003938:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800393c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	f7fd f8b0 	bl	8000aac <__aeabi_dcmpeq>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d14c      	bne.n	80039ec <Accumulator_step+0x5ec>
    Accumulator_Y.Temperature[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1]
      = Accumulator_P.cTmp[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1] +
 8003952:	4b21      	ldr	r3, [pc, #132]	; (80039d8 <Accumulator_step+0x5d8>)
 8003954:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	4610      	mov	r0, r2
 800395e:	4619      	mov	r1, r3
 8003960:	f7fd f8ec 	bl	8000b3c <__aeabi_d2iz>
 8003964:	4603      	mov	r3, r0
 8003966:	3b01      	subs	r3, #1
 8003968:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <Accumulator_step+0x5d0>)
 800396a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	e9d3 8900 	ldrd	r8, r9, [r3]
    Accumulator_Y.Temperature[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1]
 8003976:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <Accumulator_step+0x5d8>)
 8003978:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	4610      	mov	r0, r2
 8003982:	4619      	mov	r1, r3
 8003984:	f7fd f8da 	bl	8000b3c <__aeabi_d2iz>
 8003988:	4603      	mov	r3, r0
 800398a:	1e5e      	subs	r6, r3, #1
      = Accumulator_P.cTmp[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1] +
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <Accumulator_step+0x5e8>)
 8003992:	4640      	mov	r0, r8
 8003994:	4649      	mov	r1, r9
 8003996:	f7fc fc6b 	bl	8000270 <__adddf3>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	480f      	ldr	r0, [pc, #60]	; (80039dc <Accumulator_step+0x5dc>)
 80039a0:	f206 117b 	addw	r1, r6, #379	; 0x17b
 80039a4:	00c9      	lsls	r1, r1, #3
 80039a6:	4401      	add	r1, r0
 80039a8:	e9c1 2300 	strd	r2, r3, [r1]
      45.0;
    rtb_Memory3 = Accumulator_DW.Memory_PreviousInput_b;
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <Accumulator_step+0x5d8>)
 80039ae:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 80039ba:	e9c1 2300 	strd	r2, r3, [r1]
 80039be:	e080      	b.n	8003ac2 <Accumulator_step+0x6c2>
 80039c0:	d7ce878f 	.word	0xd7ce878f
 80039c4:	3f6c72b3 	.word	0x3f6c72b3
 80039c8:	00000000 	.word	0x00000000
 80039cc:	40ac2000 	.word	0x40ac2000
 80039d0:	20000008 	.word	0x20000008
 80039d4:	2000c388 	.word	0x2000c388
 80039d8:	2000c7b0 	.word	0x2000c7b0
 80039dc:	2000b5d0 	.word	0x2000b5d0
 80039e0:	200008d8 	.word	0x200008d8
 80039e4:	2000c1a8 	.word	0x2000c1a8
 80039e8:	40468000 	.word	0x40468000
  } else if (Accumulator_U.Undertemperature != 0.0) {
 80039ec:	4b8e      	ldr	r3, [pc, #568]	; (8003c28 <Accumulator_step+0x828>)
 80039ee:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80039f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	f7fd f855 	bl	8000aac <__aeabi_dcmpeq>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d136      	bne.n	8003a76 <Accumulator_step+0x676>
    Accumulator_Y.Temperature[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1]
      = Accumulator_P.cTmp[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1] -
 8003a08:	4b88      	ldr	r3, [pc, #544]	; (8003c2c <Accumulator_step+0x82c>)
 8003a0a:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8003a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	f7fd f891 	bl	8000b3c <__aeabi_d2iz>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	4a84      	ldr	r2, [pc, #528]	; (8003c30 <Accumulator_step+0x830>)
 8003a20:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4413      	add	r3, r2
 8003a28:	e9d3 8900 	ldrd	r8, r9, [r3]
    Accumulator_Y.Temperature[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1]
 8003a2c:	4b7f      	ldr	r3, [pc, #508]	; (8003c2c <Accumulator_step+0x82c>)
 8003a2e:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8003a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a36:	4610      	mov	r0, r2
 8003a38:	4619      	mov	r1, r3
 8003a3a:	f7fd f87f 	bl	8000b3c <__aeabi_d2iz>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	1e5e      	subs	r6, r3, #1
      = Accumulator_P.cTmp[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1] -
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	4b7b      	ldr	r3, [pc, #492]	; (8003c34 <Accumulator_step+0x834>)
 8003a48:	4640      	mov	r0, r8
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	f7fc fc0e 	bl	800026c <__aeabi_dsub>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4878      	ldr	r0, [pc, #480]	; (8003c38 <Accumulator_step+0x838>)
 8003a56:	f206 117b 	addw	r1, r6, #379	; 0x17b
 8003a5a:	00c9      	lsls	r1, r1, #3
 8003a5c:	4401      	add	r1, r0
 8003a5e:	e9c1 2300 	strd	r2, r3, [r1]
      45.0;
    rtb_Memory3 = Accumulator_DW.Memory_PreviousInput_b;
 8003a62:	4b72      	ldr	r3, [pc, #456]	; (8003c2c <Accumulator_step+0x82c>)
 8003a64:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 8003a70:	e9c1 2300 	strd	r2, r3, [r1]
 8003a74:	e025      	b.n	8003ac2 <Accumulator_step+0x6c2>
  } else {
    rtb_Memory3 = Accumulator_rand();
 8003a76:	f7ff fa51 	bl	8002f1c <Accumulator_rand>
 8003a7a:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8003a7e:	ed83 0b00 	vstr	d0, [r3]
    rtb_Memory3 = floor(rtb_Memory3 * 60.0) + 1.0;
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	4b6d      	ldr	r3, [pc, #436]	; (8003c3c <Accumulator_step+0x83c>)
 8003a88:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 8003a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a90:	f7fc fda4 	bl	80005dc <__aeabi_dmul>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	ec43 2b17 	vmov	d7, r2, r3
 8003a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8003aa0:	eef0 0a67 	vmov.f32	s1, s15
 8003aa4:	f012 f8e8 	bl	8015c78 <floor>
 8003aa8:	ec51 0b10 	vmov	r0, r1, d0
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	4b63      	ldr	r3, [pc, #396]	; (8003c40 <Accumulator_step+0x840>)
 8003ab2:	f7fc fbdd 	bl	8000270 <__adddf3>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 8003abe:	e9c1 2300 	strd	r2, r3, [r1]
  }

  Accumulator_Y.Current = Accumulator_U.SimCurrent;
 8003ac2:	4b59      	ldr	r3, [pc, #356]	; (8003c28 <Accumulator_step+0x828>)
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	495b      	ldr	r1, [pc, #364]	; (8003c38 <Accumulator_step+0x838>)
 8003aca:	f501 613d 	add.w	r1, r1, #3024	; 0xbd0
 8003ace:	e9c1 2300 	strd	r2, r3, [r1]
  Accumulator_DW.Memory3_PreviousInput = Accumulator_U.SimCurrent;
 8003ad2:	4b55      	ldr	r3, [pc, #340]	; (8003c28 <Accumulator_step+0x828>)
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	4954      	ldr	r1, [pc, #336]	; (8003c2c <Accumulator_step+0x82c>)
 8003ada:	e9c1 23fc 	strd	r2, r3, [r1, #1008]	; 0x3f0
  for (i = 0; i < 126; i++) {
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8003ae4:	e078      	b.n	8003bd8 <Accumulator_step+0x7d8>
    rtb_Divide_a = rtb_Rpz[i];
 8003ae6:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003aea:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	f607 71d8 	addw	r1, r7, #4056	; 0xfd8
 8003afa:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_tauz = rtb_Switch[i];
 8003afe:	463a      	mov	r2, r7
 8003b00:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	f507 617d 	add.w	r1, r7, #4048	; 0xfd0
 8003b10:	e9c1 2300 	strd	r2, r3, [r1]
    Accumulator_DW.Memory4_PreviousInput[i] = rtb_Rsz[i];
 8003b14:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8003b18:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	4841      	ldr	r0, [pc, #260]	; (8003c2c <Accumulator_step+0x82c>)
 8003b26:	f8d7 1fe4 	ldr.w	r1, [r7, #4068]	; 0xfe4
 8003b2a:	00c9      	lsls	r1, r1, #3
 8003b2c:	4401      	add	r1, r0
 8003b2e:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_tauz > rtb_Divide_a) {
 8003b32:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f507 617d 	add.w	r1, r7, #4048	; 0xfd0
 8003b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b42:	f7fc ffdb 	bl	8000afc <__aeabi_dcmpgt>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00c      	beq.n	8003b66 <Accumulator_step+0x766>
      Accumulator_DW.Memory_PreviousInput[i] = rtb_Divide_a;
 8003b4c:	4a37      	ldr	r2, [pc, #220]	; (8003c2c <Accumulator_step+0x82c>)
 8003b4e:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003b52:	337f      	adds	r3, #127	; 0x7f
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	18d1      	adds	r1, r2, r3
 8003b58:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	e9c1 2300 	strd	r2, r3, [r1]
 8003b64:	e027      	b.n	8003bb6 <Accumulator_step+0x7b6>
    } else if (rtb_tauz < Accumulator_P.Constant1_Value) {
 8003b66:	4b32      	ldr	r3, [pc, #200]	; (8003c30 <Accumulator_step+0x830>)
 8003b68:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8003b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b70:	f507 617d 	add.w	r1, r7, #4048	; 0xfd0
 8003b74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b78:	f7fc ffa2 	bl	8000ac0 <__aeabi_dcmplt>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00d      	beq.n	8003b9e <Accumulator_step+0x79e>
      Accumulator_DW.Memory_PreviousInput[i] = Accumulator_P.Constant1_Value;
 8003b82:	4b2b      	ldr	r3, [pc, #172]	; (8003c30 <Accumulator_step+0x830>)
 8003b84:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	4827      	ldr	r0, [pc, #156]	; (8003c2c <Accumulator_step+0x82c>)
 8003b8e:	f8d7 1fe4 	ldr.w	r1, [r7, #4068]	; 0xfe4
 8003b92:	317f      	adds	r1, #127	; 0x7f
 8003b94:	00c9      	lsls	r1, r1, #3
 8003b96:	4401      	add	r1, r0
 8003b98:	e9c1 2300 	strd	r2, r3, [r1]
 8003b9c:	e00b      	b.n	8003bb6 <Accumulator_step+0x7b6>
    } else {
      Accumulator_DW.Memory_PreviousInput[i] = rtb_tauz;
 8003b9e:	4a23      	ldr	r2, [pc, #140]	; (8003c2c <Accumulator_step+0x82c>)
 8003ba0:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003ba4:	337f      	adds	r3, #127	; 0x7f
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	18d1      	adds	r1, r2, r3
 8003baa:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb2:	e9c1 2300 	strd	r2, r3, [r1]
    }

    Accumulator_DW.Memory2_PreviousInput[i] = rtb_Divide_a;
 8003bb6:	4a1d      	ldr	r2, [pc, #116]	; (8003c2c <Accumulator_step+0x82c>)
 8003bb8:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003bbc:	33fd      	adds	r3, #253	; 0xfd
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	18d1      	adds	r1, r2, r3
 8003bc2:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8003bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bca:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8003bce:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8003bd8:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003bdc:	2b7d      	cmp	r3, #125	; 0x7d
 8003bde:	dd82      	ble.n	8003ae6 <Accumulator_step+0x6e6>
  }

  Accumulator_DW.Memory1_PreviousInput = fabs(Accumulator_U.SimCurrent +
 8003be0:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <Accumulator_step+0x828>)
 8003be2:	e9d3 0100 	ldrd	r0, r1, [r3]
    Accumulator_DW.Memory1_PreviousInput);
 8003be6:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <Accumulator_step+0x82c>)
 8003be8:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
  Accumulator_DW.Memory1_PreviousInput = fabs(Accumulator_U.SimCurrent +
 8003bf0:	f7fc fb3e 	bl	8000270 <__adddf3>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4614      	mov	r4, r2
 8003bfa:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <Accumulator_step+0x82c>)
 8003c00:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 8003c04:	e9c3 4500 	strd	r4, r5, [r3]
  Accumulator_DW.Memory_PreviousInput_b = rtb_Memory3;
 8003c08:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <Accumulator_step+0x82c>)
 8003c0a:	f503 613e 	add.w	r1, r3, #3040	; 0xbe0
 8003c0e:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003c1a:	bf00      	nop
 8003c1c:	f607 77f4 	addw	r7, r7, #4084	; 0xff4
 8003c20:	46bd      	mov	sp, r7
 8003c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c26:	bf00      	nop
 8003c28:	2000c388 	.word	0x2000c388
 8003c2c:	2000c7b0 	.word	0x2000c7b0
 8003c30:	20000008 	.word	0x20000008
 8003c34:	40468000 	.word	0x40468000
 8003c38:	2000b5d0 	.word	0x2000b5d0
 8003c3c:	404e0000 	.word	0x404e0000
 8003c40:	3ff00000 	.word	0x3ff00000

08003c44 <Accumulator_initialize>:

void Accumulator_initialize(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  Accumulator_DW.Memory3_PreviousInput = Accumulator_P.Memory3_InitialCondition;
 8003c48:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <Accumulator_initialize+0x84>)
 8003c4a:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	491e      	ldr	r1, [pc, #120]	; (8003ccc <Accumulator_initialize+0x88>)
 8003c54:	e9c1 23fc 	strd	r2, r3, [r1, #1008]	; 0x3f0
  memcpy(&Accumulator_DW.Memory4_PreviousInput[0],
 8003c58:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8003c5c:	491c      	ldr	r1, [pc, #112]	; (8003cd0 <Accumulator_initialize+0x8c>)
 8003c5e:	481b      	ldr	r0, [pc, #108]	; (8003ccc <Accumulator_initialize+0x88>)
 8003c60:	f011 ff2c 	bl	8015abc <memcpy>
         &Accumulator_P.Memory4_InitialCondition[0], 126U * sizeof(real_T));
  memcpy(&Accumulator_DW.Memory_PreviousInput[0], &Accumulator_P.cQur[0], 126U *
 8003c64:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8003c68:	491a      	ldr	r1, [pc, #104]	; (8003cd4 <Accumulator_initialize+0x90>)
 8003c6a:	481b      	ldr	r0, [pc, #108]	; (8003cd8 <Accumulator_initialize+0x94>)
 8003c6c:	f011 ff26 	bl	8015abc <memcpy>
         sizeof(real_T));
  memcpy(&Accumulator_DW.Memory2_PreviousInput[0], &Accumulator_P.cCap[0], 126U *
 8003c70:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8003c74:	4919      	ldr	r1, [pc, #100]	; (8003cdc <Accumulator_initialize+0x98>)
 8003c76:	481a      	ldr	r0, [pc, #104]	; (8003ce0 <Accumulator_initialize+0x9c>)
 8003c78:	f011 ff20 	bl	8015abc <memcpy>
         sizeof(real_T));
  Accumulator_DW.Memory1_PreviousInput = Accumulator_P.Memory1_InitialCondition;
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <Accumulator_initialize+0x84>)
 8003c7e:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	4911      	ldr	r1, [pc, #68]	; (8003ccc <Accumulator_initialize+0x88>)
 8003c88:	f601 31d8 	addw	r1, r1, #3032	; 0xbd8
 8003c8c:	e9c1 2300 	strd	r2, r3, [r1]
  Accumulator_DW.Memory_PreviousInput_b = Accumulator_P.Memory_InitialCondition;
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <Accumulator_initialize+0x84>)
 8003c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	490c      	ldr	r1, [pc, #48]	; (8003ccc <Accumulator_initialize+0x88>)
 8003c9c:	f501 613e 	add.w	r1, r1, #3040	; 0xbe0
 8003ca0:	e9c1 2300 	strd	r2, r3, [r1]
  Accumulator_DW.method = 7U;
 8003ca4:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <Accumulator_initialize+0x88>)
 8003ca6:	2207      	movs	r2, #7
 8003ca8:	f8c3 2be8 	str.w	r2, [r3, #3048]	; 0xbe8
  Accumulator_DW.state = 1144108930U;
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <Accumulator_initialize+0x88>)
 8003cae:	4a0d      	ldr	r2, [pc, #52]	; (8003ce4 <Accumulator_initialize+0xa0>)
 8003cb0:	f8c3 2bec 	str.w	r2, [r3, #3052]	; 0xbec
  Accumulator_DW.state_c[0] = 362436069U;
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <Accumulator_initialize+0x88>)
 8003cb6:	4a0c      	ldr	r2, [pc, #48]	; (8003ce8 <Accumulator_initialize+0xa4>)
 8003cb8:	f8c3 2bf0 	str.w	r2, [r3, #3056]	; 0xbf0
  Accumulator_DW.state_c[1] = 521288629U;
 8003cbc:	4b03      	ldr	r3, [pc, #12]	; (8003ccc <Accumulator_initialize+0x88>)
 8003cbe:	4a0b      	ldr	r2, [pc, #44]	; (8003cec <Accumulator_initialize+0xa8>)
 8003cc0:	f8c3 2bf4 	str.w	r2, [r3, #3060]	; 0xbf4
}
 8003cc4:	bf00      	nop
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000008 	.word	0x20000008
 8003ccc:	2000c7b0 	.word	0x2000c7b0
 8003cd0:	20000bf8 	.word	0x20000bf8
 8003cd4:	200004e8 	.word	0x200004e8
 8003cd8:	2000cba8 	.word	0x2000cba8
 8003cdc:	200000f8 	.word	0x200000f8
 8003ce0:	2000cf98 	.word	0x2000cf98
 8003ce4:	4431b782 	.word	0x4431b782
 8003ce8:	159a55e5 	.word	0x159a55e5
 8003cec:	1f123bb5 	.word	0x1f123bb5

08003cf0 <CSE_S_x>:
RT_MODEL_CSE_T *const CSE_M = &CSE_M_;
static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy);
void CSE_S_x(const real_T rtu_x[3], real_T rty_x_next[3])
{
 8003cf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003cf4:	b086      	sub	sp, #24
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  real_T tmp;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3308      	adds	r3, #8
 8003d00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3310      	adds	r3, #16
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f7fc fd90 	bl	8000830 <__aeabi_ddiv>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	e9c7 2304 	strd	r2, r3, [r7, #16]
  tmp = exp(-CSE_P.Ts / look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.tau, 12U));
 8003d18:	4b3e      	ldr	r3, [pc, #248]	; (8003e14 <CSE_S_x+0x124>)
 8003d1a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8003d1e:	4614      	mov	r4, r2
 8003d20:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003d24:	220c      	movs	r2, #12
 8003d26:	493c      	ldr	r1, [pc, #240]	; (8003e18 <CSE_S_x+0x128>)
 8003d28:	483c      	ldr	r0, [pc, #240]	; (8003e1c <CSE_S_x+0x12c>)
 8003d2a:	ed97 0b04 	vldr	d0, [r7, #16]
 8003d2e:	f004 f8c5 	bl	8007ebc <look1_binlxpw>
 8003d32:	ec53 2b10 	vmov	r2, r3, d0
 8003d36:	4620      	mov	r0, r4
 8003d38:	4629      	mov	r1, r5
 8003d3a:	f7fc fd79 	bl	8000830 <__aeabi_ddiv>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	ec43 2b17 	vmov	d7, r2, r3
 8003d46:	eeb0 0a47 	vmov.f32	s0, s14
 8003d4a:	eef0 0a67 	vmov.f32	s1, s15
 8003d4e:	f012 f867 	bl	8015e20 <exp>
 8003d52:	ed87 0b02 	vstr	d0, [r7, #8]
  rty_x_next[0] = (1.0 - tmp) * CSE_U.u * look1_binlxpw(rtb_Divide, CSE_P.soc,
 8003d56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d5a:	f04f 0000 	mov.w	r0, #0
 8003d5e:	4930      	ldr	r1, [pc, #192]	; (8003e20 <CSE_S_x+0x130>)
 8003d60:	f7fc fa84 	bl	800026c <__aeabi_dsub>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4b2d      	ldr	r3, [pc, #180]	; (8003e24 <CSE_S_x+0x134>)
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	f7fc fc33 	bl	80005dc <__aeabi_dmul>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4614      	mov	r4, r2
 8003d7c:	461d      	mov	r5, r3
 8003d7e:	220c      	movs	r2, #12
 8003d80:	4924      	ldr	r1, [pc, #144]	; (8003e14 <CSE_S_x+0x124>)
 8003d82:	4826      	ldr	r0, [pc, #152]	; (8003e1c <CSE_S_x+0x12c>)
 8003d84:	ed97 0b04 	vldr	d0, [r7, #16]
 8003d88:	f004 f898 	bl	8007ebc <look1_binlxpw>
 8003d8c:	ec53 2b10 	vmov	r2, r3, d0
 8003d90:	4620      	mov	r0, r4
 8003d92:	4629      	mov	r1, r5
 8003d94:	f7fc fc22 	bl	80005dc <__aeabi_dmul>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	461d      	mov	r5, r3
    CSE_P.Rp, 12U) + tmp * rtu_x[0];
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003da6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003daa:	f7fc fc17 	bl	80005dc <__aeabi_dmul>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4620      	mov	r0, r4
 8003db4:	4629      	mov	r1, r5
 8003db6:	f7fc fa5b 	bl	8000270 <__adddf3>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
  rty_x_next[0] = (1.0 - tmp) * CSE_U.u * look1_binlxpw(rtb_Divide, CSE_P.soc,
 8003dbe:	6839      	ldr	r1, [r7, #0]
 8003dc0:	e9c1 2300 	strd	r2, r3, [r1]
  rty_x_next[1] = CSE_U.u * CSE_P.Ts + rtu_x[1];
 8003dc4:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <CSE_S_x+0x134>)
 8003dc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <CSE_S_x+0x124>)
 8003dcc:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8003dd0:	f7fc fc04 	bl	80005dc <__aeabi_dmul>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4690      	mov	r8, r2
 8003dda:	4699      	mov	r9, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3308      	adds	r3, #8
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	6839      	ldr	r1, [r7, #0]
 8003de6:	f101 0408 	add.w	r4, r1, #8
 8003dea:	4640      	mov	r0, r8
 8003dec:	4649      	mov	r1, r9
 8003dee:	f7fc fa3f 	bl	8000270 <__adddf3>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	e9c4 2300 	strd	r2, r3, [r4]
  rty_x_next[2] = rtu_x[2];
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	f103 0110 	add.w	r1, r3, #16
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e06:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003e0a:	bf00      	nop
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e14:	20001010 	.word	0x20001010
 8003e18:	200011b8 	.word	0x200011b8
 8003e1c:	20001150 	.word	0x20001150
 8003e20:	3ff00000 	.word	0x3ff00000
 8003e24:	2000dd80 	.word	0x2000dd80

08003e28 <CSE_M_x>:

void CSE_M_x(const real_T rtu_x[3], real_T *rty_y)
{
 8003e28:	b5b0      	push	{r4, r5, r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3308      	adds	r3, #8
 8003e36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3310      	adds	r3, #16
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e42:	f7fc fcf5 	bl	8000830 <__aeabi_ddiv>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  *rty_y = (CSE_U.u * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U) +
 8003e4e:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <CSE_M_x+0x8c>)
 8003e50:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003e54:	220c      	movs	r2, #12
 8003e56:	4918      	ldr	r1, [pc, #96]	; (8003eb8 <CSE_M_x+0x90>)
 8003e58:	4818      	ldr	r0, [pc, #96]	; (8003ebc <CSE_M_x+0x94>)
 8003e5a:	ed97 0b02 	vldr	d0, [r7, #8]
 8003e5e:	f004 f82d 	bl	8007ebc <look1_binlxpw>
 8003e62:	ec53 2b10 	vmov	r2, r3, d0
 8003e66:	4620      	mov	r0, r4
 8003e68:	4629      	mov	r1, r5
 8003e6a:	f7fc fbb7 	bl	80005dc <__aeabi_dmul>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4614      	mov	r4, r2
 8003e74:	461d      	mov	r5, r3
            look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 8003e76:	220c      	movs	r2, #12
 8003e78:	4911      	ldr	r1, [pc, #68]	; (8003ec0 <CSE_M_x+0x98>)
 8003e7a:	4810      	ldr	r0, [pc, #64]	; (8003ebc <CSE_M_x+0x94>)
 8003e7c:	ed97 0b02 	vldr	d0, [r7, #8]
 8003e80:	f004 f81c 	bl	8007ebc <look1_binlxpw>
 8003e84:	ec53 2b10 	vmov	r2, r3, d0
  *rty_y = (CSE_U.u * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U) +
 8003e88:	4620      	mov	r0, r4
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	f7fc f9f0 	bl	8000270 <__adddf3>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
            look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	f7fc f9e7 	bl	8000270 <__adddf3>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
  *rty_y = (CSE_U.u * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U) +
 8003ea6:	6839      	ldr	r1, [r7, #0]
 8003ea8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003eac:	bf00      	nop
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8003eb4:	2000dd80 	.word	0x2000dd80
 8003eb8:	20001078 	.word	0x20001078
 8003ebc:	20001150 	.word	0x20001150
 8003ec0:	200010e8 	.word	0x200010e8

08003ec4 <UKFCorrectorAdditive_getPredict>:

static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy)
{
 8003ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec8:	ed2d 8b02 	vpush	{d8}
 8003ecc:	b0e1      	sub	sp, #388	; 0x184
 8003ece:	af04      	add	r7, sp, #16
 8003ed0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003ed4:	ed84 0b00 	vstr	d0, [r4]
 8003ed8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8003edc:	6020      	str	r0, [r4, #0]
 8003ede:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003ee2:	6001      	str	r1, [r0, #0]
 8003ee4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003ee8:	ed81 1b00 	vstr	d1, [r1]
 8003eec:	f107 0120 	add.w	r1, r7, #32
 8003ef0:	ed81 2b00 	vstr	d2, [r1]
 8003ef4:	f107 0118 	add.w	r1, r7, #24
 8003ef8:	ed81 3b00 	vstr	d3, [r1]
 8003efc:	f107 0114 	add.w	r1, r7, #20
 8003f00:	600a      	str	r2, [r1, #0]
 8003f02:	f107 0210 	add.w	r2, r7, #16
 8003f06:	6013      	str	r3, [r2, #0]
  real_T Wmean[2];
  real_T tempY;
  real_T tempY_tmp;
  int32_T knt;
  int32_T knt_0;
  tempY_tmp = alpha * alpha;
 8003f08:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003f0c:	e9d1 2300 	ldrd	r2, r3, [r1]
 8003f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f14:	f7fc fb62 	bl	80005dc <__aeabi_dmul>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003f20:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = (kappa + 3.0) * tempY_tmp;
 8003f24:	f107 0118 	add.w	r1, r7, #24
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	4b96      	ldr	r3, [pc, #600]	; (8004188 <UKFCorrectorAdditive_getPredict+0x2c4>)
 8003f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f32:	f7fc f99d 	bl	8000270 <__adddf3>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	f7fc fb49 	bl	80005dc <__aeabi_dmul>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003f52:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[0] = 1.0 - 3.0 / tempY;
 8003f56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5e:	f04f 0000 	mov.w	r0, #0
 8003f62:	4989      	ldr	r1, [pc, #548]	; (8004188 <UKFCorrectorAdditive_getPredict+0x2c4>)
 8003f64:	f7fc fc64 	bl	8000830 <__aeabi_ddiv>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	f04f 0000 	mov.w	r0, #0
 8003f70:	4986      	ldr	r1, [pc, #536]	; (800418c <UKFCorrectorAdditive_getPredict+0x2c8>)
 8003f72:	f7fc f97b 	bl	800026c <__aeabi_dsub>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003f7e:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = 1.0 / (2.0 * tempY);
 8003f82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	f7fc f96f 	bl	8000270 <__adddf3>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	f04f 0000 	mov.w	r0, #0
 8003f9a:	497c      	ldr	r1, [pc, #496]	; (800418c <UKFCorrectorAdditive_getPredict+0x2c8>)
 8003f9c:	f7fc fc48 	bl	8000830 <__aeabi_ddiv>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003fa8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  Wcov[0] = ((1.0 - tempY_tmp) + beta) + Wmean[0];
 8003fac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f04f 0000 	mov.w	r0, #0
 8003fb8:	4974      	ldr	r1, [pc, #464]	; (800418c <UKFCorrectorAdditive_getPredict+0x2c8>)
 8003fba:	f7fc f957 	bl	800026c <__aeabi_dsub>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f107 0320 	add.w	r3, r7, #32
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	f7fc f94f 	bl	8000270 <__adddf3>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f7fc f945 	bl	8000270 <__adddf3>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003fee:	e9c1 2300 	strd	r2, r3, [r1]
  Wcov[1] = Wmean[1];
 8003ff2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ff6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003ffa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003ffe:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (Wmean[0] != 0.0) {
 8004002:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004006:	e9d3 0100 	ldrd	r0, r1, [r3]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	f7fc fd4b 	bl	8000aac <__aeabi_dcmpeq>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d154      	bne.n	80040c6 <UKFCorrectorAdditive_getPredict+0x202>
    real_T Wcov_0;
    *Sy = Wmean[0];
 800401c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004028:	e9c1 2300 	strd	r2, r3, [r1]
    tempY_tmp = Wmean[0];
 800402c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004038:	e9c1 2300 	strd	r2, r3, [r1]
    Wmean[0] /= Wmean[0];
 800403c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004040:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004044:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404c:	f7fc fbf0 	bl	8000830 <__aeabi_ddiv>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004058:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov[0] /= *Sy;
 800405c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004064:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	f7fc fbe0 	bl	8000830 <__aeabi_ddiv>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004078:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov_0 = Wmean[1];
 800407c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004080:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004084:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    Wmean[1] /= tempY_tmp;
 8004088:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800408c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004090:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f7fc fbca 	bl	8000830 <__aeabi_ddiv>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80040a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Wcov[1] = Wcov_0 / *Sy;
 80040a8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b0:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80040b4:	f7fc fbbc 	bl	8000830 <__aeabi_ddiv>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80040c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80040c4:	e006      	b.n	80040d4 <UKFCorrectorAdditive_getPredict+0x210>
  } else {
    *Sy = 1.0;
 80040c6:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	4b2f      	ldr	r3, [pc, #188]	; (800418c <UKFCorrectorAdditive_getPredict+0x2c8>)
 80040d0:	e9c1 2300 	strd	r2, r3, [r1]
  }

  tempY = sqrt(tempY);
 80040d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040d8:	ed93 7b00 	vldr	d7, [r3]
 80040dc:	eeb0 0a47 	vmov.f32	s0, s14
 80040e0:	eef0 0a67 	vmov.f32	s1, s15
 80040e4:	f011 feea 	bl	8015ebc <sqrt>
 80040e8:	eeb0 7a40 	vmov.f32	s14, s0
 80040ec:	eef0 7a60 	vmov.f32	s15, s1
 80040f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040f4:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 9; knt++) {
 80040f8:	2300      	movs	r3, #0
 80040fa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80040fe:	e037      	b.n	8004170 <UKFCorrectorAdditive_getPredict+0x2ac>
    tempY_tmp = tempY * S[knt];
 8004100:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	4413      	add	r3, r2
 800410e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004112:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	f7fc fa5f 	bl	80005dc <__aeabi_dmul>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004126:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt] = tempY_tmp;
 800412a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004136:	00c9      	lsls	r1, r1, #3
 8004138:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 800413c:	4401      	add	r1, r0
 800413e:	39a0      	subs	r1, #160	; 0xa0
 8004140:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt + 9] = -tempY_tmp;
 8004144:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004150:	3109      	adds	r1, #9
 8004152:	4690      	mov	r8, r2
 8004154:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004158:	00cb      	lsls	r3, r1, #3
 800415a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800415e:	4413      	add	r3, r2
 8004160:	3ba0      	subs	r3, #160	; 0xa0
 8004162:	e9c3 8900 	strd	r8, r9, [r3]
  for (knt = 0; knt < 9; knt++) {
 8004166:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800416a:	3301      	adds	r3, #1
 800416c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004170:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004174:	2b08      	cmp	r3, #8
 8004176:	ddc3      	ble.n	8004100 <UKFCorrectorAdditive_getPredict+0x23c>
  }

  knt_0 = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 800417e:	2300      	movs	r3, #0
 8004180:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004184:	e065      	b.n	8004252 <UKFCorrectorAdditive_getPredict+0x38e>
 8004186:	bf00      	nop
 8004188:	40080000 	.word	0x40080000
 800418c:	3ff00000 	.word	0x3ff00000
    X2[knt_0] += X1[0];
 8004190:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800419a:	4413      	add	r3, r2
 800419c:	3ba0      	subs	r3, #160	; 0xa0
 800419e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f7fc f860 	bl	8000270 <__adddf3>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 80041b8:	00c9      	lsls	r1, r1, #3
 80041ba:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80041be:	4401      	add	r1, r0
 80041c0:	39a0      	subs	r1, #160	; 0xa0
 80041c2:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 1] += X1[1];
 80041c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80041ca:	3301      	adds	r3, #1
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80041d2:	4413      	add	r3, r2
 80041d4:	3ba0      	subs	r3, #160	; 0xa0
 80041d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3308      	adds	r3, #8
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 80041ea:	3401      	adds	r4, #1
 80041ec:	f7fc f840 	bl	8000270 <__adddf3>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	00e1      	lsls	r1, r4, #3
 80041f6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80041fa:	4401      	add	r1, r0
 80041fc:	39a0      	subs	r1, #160	; 0xa0
 80041fe:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 2] += X1[2];
 8004202:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004206:	3302      	adds	r3, #2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800420e:	4413      	add	r3, r2
 8004210:	3ba0      	subs	r3, #160	; 0xa0
 8004212:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004216:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3310      	adds	r3, #16
 800421e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004222:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8004226:	3402      	adds	r4, #2
 8004228:	f7fc f822 	bl	8000270 <__adddf3>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	00e1      	lsls	r1, r4, #3
 8004232:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004236:	4401      	add	r1, r0
 8004238:	39a0      	subs	r1, #160	; 0xa0
 800423a:	e9c1 2300 	strd	r2, r3, [r1]
    knt_0 += 3;
 800423e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004242:	3303      	adds	r3, #3
 8004244:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004248:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800424c:	3301      	adds	r3, #1
 800424e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004252:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004256:	2b05      	cmp	r3, #5
 8004258:	dd9a      	ble.n	8004190 <UKFCorrectorAdditive_getPredict+0x2cc>
  }

  knt_0 = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004266:	e018      	b.n	800429a <UKFCorrectorAdditive_getPredict+0x3d6>
    CSE_M_x(&X2[knt_0], &Y2[knt]);
 8004268:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800426c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	18d0      	adds	r0, r2, r3
 8004274:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004278:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4413      	add	r3, r2
 8004280:	4619      	mov	r1, r3
 8004282:	f7ff fdd1 	bl	8003e28 <CSE_M_x>
    knt_0 += 3;
 8004286:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800428a:	3303      	adds	r3, #3
 800428c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004290:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004294:	3301      	adds	r3, #1
 8004296:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800429a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800429e:	2b05      	cmp	r3, #5
 80042a0:	dde2      	ble.n	8004268 <UKFCorrectorAdditive_getPredict+0x3a4>
  }

  CSE_M_x(X1, &tempY);
 80042a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80042aa:	4611      	mov	r1, r2
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	f7ff fdbb 	bl	8003e28 <CSE_M_x>
  for (knt = 0; knt < 6; knt++) {
 80042b2:	2300      	movs	r3, #0
 80042b4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80042b8:	e027      	b.n	800430a <UKFCorrectorAdditive_getPredict+0x446>
    Y2_0[knt] = (Y2[knt] - tempY) + tempY;
 80042ba:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80042c4:	4413      	add	r3, r2
 80042c6:	3bd0      	subs	r3, #208	; 0xd0
 80042c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d4:	f7fb ffca 	bl	800026c <__aeabi_dsub>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f7fb ffc2 	bl	8000270 <__adddf3>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80042f4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80042f8:	00c9      	lsls	r1, r1, #3
 80042fa:	4401      	add	r1, r0
 80042fc:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8004300:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004304:	3301      	adds	r3, #1
 8004306:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800430a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800430e:	2b05      	cmp	r3, #5
 8004310:	ddd3      	ble.n	80042ba <UKFCorrectorAdditive_getPredict+0x3f6>
  }

  UTMeanCovSqrt_C6QfB9Td(Wmean, Wcov, *Sy, tempY, Y2_0, X1, X2, Ymean,
 8004312:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004316:	ed93 7b00 	vldr	d7, [r3]
 800431a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800431e:	ed93 6b00 	vldr	d6, [r3]
 8004322:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004326:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800432a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800432e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8004332:	f107 0210 	add.w	r2, r7, #16
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	9203      	str	r2, [sp, #12]
 800433a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800433e:	9202      	str	r2, [sp, #8]
 8004340:	f107 0214 	add.w	r2, r7, #20
 8004344:	6812      	ldr	r2, [r2, #0]
 8004346:	9201      	str	r2, [sp, #4]
 8004348:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800434c:	9200      	str	r2, [sp, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4622      	mov	r2, r4
 8004352:	eeb0 1a46 	vmov.f32	s2, s12
 8004356:	eef0 1a66 	vmov.f32	s3, s13
 800435a:	eeb0 0a47 	vmov.f32	s0, s14
 800435e:	eef0 0a67 	vmov.f32	s1, s15
 8004362:	f003 f951 	bl	8007608 <UTMeanCovSqrt_C6QfB9Td>
    &tempY_tmp, Pxy);
  Wmean[0] = tempY_tmp;
 8004366:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004372:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = Rs;
 8004376:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800437a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	e9c1 2302 	strd	r2, r3, [r1, #8]
  *Sy = tempY_tmp;
 8004386:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004392:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = xnrm2_Mnmxg9YT(1, Wmean, 2);
 8004396:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800439a:	2202      	movs	r2, #2
 800439c:	4619      	mov	r1, r3
 800439e:	2001      	movs	r0, #1
 80043a0:	f008 fc64 	bl	800cc6c <xnrm2_Mnmxg9YT>
 80043a4:	eeb0 7a40 	vmov.f32	s14, s0
 80043a8:	eef0 7a60 	vmov.f32	s15, s1
 80043ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043b0:	ed83 7b00 	vstr	d7, [r3]
  if (tempY != 0.0) {
 80043b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	f7fc fb72 	bl	8000aac <__aeabi_dcmpeq>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d000      	beq.n	80043d0 <UKFCorrectorAdditive_getPredict+0x50c>
      *Sy = tempY;
    } else {
      *Sy = tempY;
    }
  }
}
 80043ce:	e0fa      	b.n	80045c6 <UKFCorrectorAdditive_getPredict+0x702>
    tempY = rt_hypotd_snf(tempY_tmp, tempY);
 80043d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043d4:	ed93 7b00 	vldr	d7, [r3]
 80043d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043dc:	ed93 6b00 	vldr	d6, [r3]
 80043e0:	eeb0 1a46 	vmov.f32	s2, s12
 80043e4:	eef0 1a66 	vmov.f32	s3, s13
 80043e8:	eeb0 0a47 	vmov.f32	s0, s14
 80043ec:	eef0 0a67 	vmov.f32	s1, s15
 80043f0:	f006 f8b2 	bl	800a558 <rt_hypotd_snf>
 80043f4:	eeb0 7a40 	vmov.f32	s14, s0
 80043f8:	eef0 7a60 	vmov.f32	s15, s1
 80043fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004400:	ed83 7b00 	vstr	d7, [r3]
    if (tempY_tmp >= 0.0) {
 8004404:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004408:	e9d3 0100 	ldrd	r0, r1, [r3]
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	f7fc fb68 	bl	8000ae8 <__aeabi_dcmpge>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <UKFCorrectorAdditive_getPredict+0x570>
      tempY = -tempY;
 800441e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	4615      	mov	r5, r2
 8004428:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800442c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004430:	e9c3 5600 	strd	r5, r6, [r3]
    if (fabs(tempY) < 1.0020841800044864E-292) {
 8004434:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	60ba      	str	r2, [r7, #8]
 800443e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800444c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004450:	f7fc fb36 	bl	8000ac0 <__aeabi_dcmplt>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 80ad 	beq.w	80045b6 <UKFCorrectorAdditive_getPredict+0x6f2>
      knt = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        knt++;
 8004462:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004466:	3301      	adds	r3, #1
 8004468:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        Wmean[1] *= 9.9792015476736E+291;
 800446c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004470:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	4b57      	ldr	r3, [pc, #348]	; (80045d8 <UKFCorrectorAdditive_getPredict+0x714>)
 800447a:	f7fc f8af 	bl	80005dc <__aeabi_dmul>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004486:	e9c1 2302 	strd	r2, r3, [r1, #8]
        tempY *= 9.9792015476736E+291;
 800448a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800448e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	4b50      	ldr	r3, [pc, #320]	; (80045d8 <UKFCorrectorAdditive_getPredict+0x714>)
 8004498:	f7fc f8a0 	bl	80005dc <__aeabi_dmul>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80044a4:	e9c1 2300 	strd	r2, r3, [r1]
        *Sy *= 9.9792015476736E+291;
 80044a8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80044ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	4b48      	ldr	r3, [pc, #288]	; (80045d8 <UKFCorrectorAdditive_getPredict+0x714>)
 80044b6:	f7fc f891 	bl	80005dc <__aeabi_dmul>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80044c2:	e9c1 2300 	strd	r2, r3, [r1]
      } while ((fabs(tempY) < 1.0020841800044864E-292) && (knt < 20));
 80044c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	603a      	str	r2, [r7, #0]
 80044d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80044de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044e2:	f7fc faed 	bl	8000ac0 <__aeabi_dcmplt>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <UKFCorrectorAdditive_getPredict+0x630>
 80044ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80044f0:	2b13      	cmp	r3, #19
 80044f2:	ddb6      	ble.n	8004462 <UKFCorrectorAdditive_getPredict+0x59e>
      tempY = rt_hypotd_snf(*Sy, xnrm2_Mnmxg9YT(1, Wmean, 2));
 80044f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80044f8:	ed93 8b00 	vldr	d8, [r3]
 80044fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004500:	2202      	movs	r2, #2
 8004502:	4619      	mov	r1, r3
 8004504:	2001      	movs	r0, #1
 8004506:	f008 fbb1 	bl	800cc6c <xnrm2_Mnmxg9YT>
 800450a:	eeb0 7a40 	vmov.f32	s14, s0
 800450e:	eef0 7a60 	vmov.f32	s15, s1
 8004512:	eeb0 1a47 	vmov.f32	s2, s14
 8004516:	eef0 1a67 	vmov.f32	s3, s15
 800451a:	eeb0 0a48 	vmov.f32	s0, s16
 800451e:	eef0 0a68 	vmov.f32	s1, s17
 8004522:	f006 f819 	bl	800a558 <rt_hypotd_snf>
 8004526:	eeb0 7a40 	vmov.f32	s14, s0
 800452a:	eef0 7a60 	vmov.f32	s15, s1
 800452e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004532:	ed83 7b00 	vstr	d7, [r3]
      if (*Sy >= 0.0) {
 8004536:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800453a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	f7fc facf 	bl	8000ae8 <__aeabi_dcmpge>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <UKFCorrectorAdditive_getPredict+0x6a2>
        tempY = -tempY;
 8004550:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	4692      	mov	sl, r2
 800455a:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800455e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004562:	e9c3 ab00 	strd	sl, fp, [r3]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8004566:	2300      	movs	r3, #0
 8004568:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800456c:	e014      	b.n	8004598 <UKFCorrectorAdditive_getPredict+0x6d4>
        tempY *= 1.0020841800044864E-292;
 800456e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004572:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800457e:	f7fc f82d 	bl	80005dc <__aeabi_dmul>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800458a:	e9c1 2300 	strd	r2, r3, [r1]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 800458e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004592:	3301      	adds	r3, #1
 8004594:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004598:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 800459c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80045a0:	429a      	cmp	r2, r3
 80045a2:	dbe4      	blt.n	800456e <UKFCorrectorAdditive_getPredict+0x6aa>
      *Sy = tempY;
 80045a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80045b0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80045b4:	e007      	b.n	80045c6 <UKFCorrectorAdditive_getPredict+0x702>
      *Sy = tempY;
 80045b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80045c2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80045c6:	bf00      	nop
 80045c8:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 80045cc:	46bd      	mov	sp, r7
 80045ce:	ecbd 8b02 	vpop	{d8}
 80045d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d6:	bf00      	nop
 80045d8:	7c900000 	.word	0x7c900000
 80045dc:	00000000 	.word	0x00000000

080045e0 <CSE_step>:

void CSE_step(void)
{
 80045e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045e4:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 80045e8:	af06      	add	r7, sp, #24
  int32_T iAcol_0;
  static const real_T Wmean[2] = { 1.0, -0.1736111111111111 };

  static const real_T Wcov[2] = { 0.87666666666666659, -0.1736111111111111 };

  if (CSE_P.Enable1_Value) {
 80045ea:	4bb3      	ldr	r3, [pc, #716]	; (80048b8 <CSE_step+0x2d8>)
 80045ec:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f001 803e 	beq.w	8005672 <CSE_step+0x1092>
    boolean_T errorCondition;
    boolean_T guard1 = false;
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    CSE_M_x(CSE_DW.x, &s_0);
 80045fc:	f107 0308 	add.w	r3, r7, #8
 8004600:	4619      	mov	r1, r3
 8004602:	48ae      	ldr	r0, [pc, #696]	; (80048bc <CSE_step+0x2dc>)
 8004604:	f7ff fc10 	bl	8003e28 <CSE_M_x>
    UKFCorrectorAdditive_getPredict(CSE_P.R1_Value, CSE_DW.x, CSE_DW.P, 0.2, 2.0,
 8004608:	4bab      	ldr	r3, [pc, #684]	; (80048b8 <CSE_step+0x2d8>)
 800460a:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 800460e:	f107 0110 	add.w	r1, r7, #16
 8004612:	f107 0208 	add.w	r2, r7, #8
 8004616:	463b      	mov	r3, r7
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	460b      	mov	r3, r1
 800461c:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 80048a0 <CSE_step+0x2c0>
 8004620:	ed9f 2ba1 	vldr	d2, [pc, #644]	; 80048a8 <CSE_step+0x2c8>
 8004624:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 80048b0 <CSE_step+0x2d0>
 8004628:	49a5      	ldr	r1, [pc, #660]	; (80048c0 <CSE_step+0x2e0>)
 800462a:	48a4      	ldr	r0, [pc, #656]	; (80048bc <CSE_step+0x2dc>)
 800462c:	eeb0 0a47 	vmov.f32	s0, s14
 8004630:	eef0 0a67 	vmov.f32	s1, s15
 8004634:	f7ff fc46 	bl	8003ec4 <UKFCorrectorAdditive_getPredict>
      0.0, &s_0, tempY, &temp);
    s_0 = CSE_U.y - s_0;
 8004638:	4ba2      	ldr	r3, [pc, #648]	; (80048c4 <CSE_step+0x2e4>)
 800463a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800463e:	f107 0308 	add.w	r3, r7, #8
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	f7fb fe11 	bl	800026c <__aeabi_dsub>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	f107 0108 	add.w	r1, r7, #8
 8004652:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 800465c:	2300      	movs	r3, #0
 800465e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8004662:	e04a      	b.n	80046fa <CSE_step+0x11a>
      R[iAcol_0] = CSE_DW.P[iAcol];
 8004664:	4a96      	ldr	r2, [pc, #600]	; (80048c0 <CSE_step+0x2e0>)
 8004666:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4413      	add	r3, r2
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8004676:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800467a:	00c9      	lsls	r1, r1, #3
 800467c:	4401      	add	r1, r0
 800467e:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 1] = CSE_DW.P[iAcol + 3];
 8004682:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004686:	3303      	adds	r3, #3
 8004688:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800468c:	1c51      	adds	r1, r2, #1
 800468e:	4a8c      	ldr	r2, [pc, #560]	; (80048c0 <CSE_step+0x2e0>)
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4413      	add	r3, r2
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800469c:	00c9      	lsls	r1, r1, #3
 800469e:	4401      	add	r1, r0
 80046a0:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 2] = CSE_DW.P[iAcol + 6];
 80046a4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80046a8:	3306      	adds	r3, #6
 80046aa:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80046ae:	1c91      	adds	r1, r2, #2
 80046b0:	4a83      	ldr	r2, [pc, #524]	; (80048c0 <CSE_step+0x2e0>)
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4413      	add	r3, r2
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80046be:	00c9      	lsls	r1, r1, #3
 80046c0:	4401      	add	r1, r0
 80046c2:	e9c1 2300 	strd	r2, r3, [r1]
      C[iAcol] = tempY[iAcol];
 80046c6:	f107 0210 	add.w	r2, r7, #16
 80046ca:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4413      	add	r3, r2
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80046da:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 80046de:	00c9      	lsls	r1, r1, #3
 80046e0:	4401      	add	r1, r0
 80046e2:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 80046e6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80046ea:	3303      	adds	r3, #3
 80046ec:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80046f0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80046f4:	3301      	adds	r3, #1
 80046f6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80046fa:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80046fe:	2b02      	cmp	r3, #2
 8004700:	ddb0      	ble.n	8004664 <CSE_step+0x84>
    }

    trisolve_BC1XmAGq(temp, C);
 8004702:	463b      	mov	r3, r7
 8004704:	ed93 7b00 	vldr	d7, [r3]
 8004708:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800470c:	4618      	mov	r0, r3
 800470e:	eeb0 0a47 	vmov.f32	s0, s14
 8004712:	eef0 0a67 	vmov.f32	s1, s15
 8004716:	f007 fe43 	bl	800c3a0 <trisolve_BC1XmAGq>
    K[0] = C[0];
 800471a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004726:	e9c1 2300 	strd	r2, r3, [r1]
    K[1] = C[1];
 800472a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800472e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004732:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004736:	e9c1 2302 	strd	r2, r3, [r1, #8]
    K[2] = C[2];
 800473a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800473e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004742:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004746:	e9c1 2304 	strd	r2, r3, [r1, #16]
    trisolve_BC1XmAGq(temp, K);
 800474a:	463b      	mov	r3, r7
 800474c:	ed93 7b00 	vldr	d7, [r3]
 8004750:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004754:	4618      	mov	r0, r3
 8004756:	eeb0 0a47 	vmov.f32	s0, s14
 800475a:	eef0 0a67 	vmov.f32	s1, s15
 800475e:	f007 fe1f 	bl	800c3a0 <trisolve_BC1XmAGq>
    tempY[0] = K[0] * temp;
 8004762:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004766:	e9d3 0100 	ldrd	r0, r1, [r3]
 800476a:	463b      	mov	r3, r7
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f7fb ff34 	bl	80005dc <__aeabi_dmul>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	f107 0110 	add.w	r1, r7, #16
 800477c:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8004780:	2300      	movs	r3, #0
 8004782:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8004786:	e011      	b.n	80047ac <CSE_step+0x1cc>
      R[iAcol + 1] = 0.0;
 8004788:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800478c:	3301      	adds	r3, #1
 800478e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	18d1      	adds	r1, r2, r3
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 80047a2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80047a6:	3301      	adds	r3, #1
 80047a8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80047ac:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	dde9      	ble.n	8004788 <CSE_step+0x1a8>
    }

    tempY[1] = K[1] * temp;
 80047b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80047bc:	463b      	mov	r3, r7
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	f7fb ff0b 	bl	80005dc <__aeabi_dmul>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	f107 0110 	add.w	r1, r7, #16
 80047ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
    R[5] = 0.0;
 80047d2:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    tempY[2] = K[2] * temp;
 80047e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80047ea:	463b      	mov	r3, r7
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	f7fb fef4 	bl	80005dc <__aeabi_dmul>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	f107 0110 	add.w	r1, r7, #16
 80047fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    errorCondition = (R[0] == 0.0);
 8004800:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004804:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004808:	2301      	movs	r3, #1
 800480a:	461e      	mov	r6, r3
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	f7fc f94a 	bl	8000aac <__aeabi_dcmpeq>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <CSE_step+0x242>
 800481e:	2300      	movs	r3, #0
 8004820:	461e      	mov	r6, r3
 8004822:	b2f3      	uxtb	r3, r6
 8004824:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    if (!errorCondition) {
 8004828:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800482c:	2b00      	cmp	r3, #0
 800482e:	d113      	bne.n	8004858 <CSE_step+0x278>
      errorCondition = (R[4] == 0.0);
 8004830:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004834:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004838:	2301      	movs	r3, #1
 800483a:	461e      	mov	r6, r3
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	f7fc f932 	bl	8000aac <__aeabi_dcmpeq>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <CSE_step+0x272>
 800484e:	2300      	movs	r3, #0
 8004850:	461e      	mov	r6, r3
 8004852:	b2f3      	uxtb	r3, r6
 8004854:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    if (!errorCondition) {
 8004858:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800485c:	2b00      	cmp	r3, #0
 800485e:	d113      	bne.n	8004888 <CSE_step+0x2a8>
      errorCondition = (R[8] == 0.0);
 8004860:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004864:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004868:	2301      	movs	r3, #1
 800486a:	461e      	mov	r6, r3
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	f7fc f91a 	bl	8000aac <__aeabi_dcmpeq>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <CSE_step+0x2a2>
 800487e:	2300      	movs	r3, #0
 8004880:	461e      	mov	r6, r3
 8004882:	b2f3      	uxtb	r3, r6
 8004884:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    guard1 = false;
 8004888:	2300      	movs	r3, #0
 800488a:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    if (errorCondition) {
 800488e:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8004892:	2b00      	cmp	r3, #0
 8004894:	d018      	beq.n	80048c8 <CSE_step+0x2e8>
      guard1 = true;
 8004896:	2301      	movs	r3, #1
 8004898:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 800489c:	e395      	b.n	8004fca <CSE_step+0x9ea>
 800489e:	bf00      	nop
	...
 80048ac:	40000000 	.word	0x40000000
 80048b0:	9999999a 	.word	0x9999999a
 80048b4:	3fc99999 	.word	0x3fc99999
 80048b8:	20001010 	.word	0x20001010
 80048bc:	2000ddd8 	.word	0x2000ddd8
 80048c0:	2000dd90 	.word	0x2000dd90
 80048c4:	2000dd80 	.word	0x2000dd80
    } else {
      real_T absxk;
      real_T scale;
      real_T t;
      C[2] = tempY[2];
 80048c8:	f107 0310 	add.w	r3, r7, #16
 80048cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80048d0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80048d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
      C[0] = tempY[0] / R[0];
 80048d8:	f107 0310 	add.w	r3, r7, #16
 80048dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f7fb ffa2 	bl	8000830 <__aeabi_ddiv>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80048f4:	e9c1 2300 	strd	r2, r3, [r1]
      C[1] = (tempY[1] - C[0] * R[3]) / R[4];
 80048f8:	f107 0310 	add.w	r3, r7, #16
 80048fc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8004900:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004908:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800490c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004910:	f7fb fe64 	bl	80005dc <__aeabi_dmul>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4640      	mov	r0, r8
 800491a:	4649      	mov	r1, r9
 800491c:	f7fb fca6 	bl	800026c <__aeabi_dsub>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800492c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004930:	f7fb ff7e 	bl	8000830 <__aeabi_ddiv>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800493c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = tempY[2];
 8004940:	f107 0310 	add.w	r3, r7, #16
 8004944:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004948:	4639      	mov	r1, r7
 800494a:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 800494e:	2300      	movs	r3, #0
 8004950:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8004954:	e025      	b.n	80049a2 <CSE_step+0x3c2>
        temp -= R[iAcol_0 + 6] * C[iAcol_0];
 8004956:	463b      	mov	r3, r7
 8004958:	e9d3 8900 	ldrd	r8, r9, [r3]
 800495c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004960:	3306      	adds	r3, #6
 8004962:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4413      	add	r3, r2
 800496a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800496e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004972:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	4413      	add	r3, r2
 800497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497e:	f7fb fe2d 	bl	80005dc <__aeabi_dmul>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	4640      	mov	r0, r8
 8004988:	4649      	mov	r1, r9
 800498a:	f7fb fc6f 	bl	800026c <__aeabi_dsub>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4639      	mov	r1, r7
 8004994:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8004998:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800499c:	3301      	adds	r3, #1
 800499e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80049a2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	ddd5      	ble.n	8004956 <CSE_step+0x376>
      }

      C[2] = temp / R[8];
 80049aa:	463b      	mov	r3, r7
 80049ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80049b4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80049b8:	f7fb ff3a 	bl	8000830 <__aeabi_ddiv>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80049c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80049d0:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
      absxk = fabs(C[0]);
 80049d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	4611      	mov	r1, r2
 80049de:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 80049e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049e6:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > 3.3121686421112381E-170) {
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80049f2:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80049f6:	f7fc f881 	bl	8000afc <__aeabi_dcmpgt>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <CSE_step+0x436>
        temp = 1.0;
 8004a00:	4639      	mov	r1, r7
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	4bbf      	ldr	r3, [pc, #764]	; (8004d04 <CSE_step+0x724>)
 8004a08:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8004a0c:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8004a10:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8004a14:	e016      	b.n	8004a44 <CSE_step+0x464>
      } else {
        t = absxk / 3.3121686421112381E-170;
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8004a1e:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8004a22:	f7fb ff05 	bl	8000830 <__aeabi_ddiv>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = t * t;
 8004a2e:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8004a32:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8004a36:	f7fb fdd1 	bl	80005dc <__aeabi_dmul>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4639      	mov	r1, r7
 8004a40:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[1]);
 8004a44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8004a52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a56:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 8004a5a:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8004a5e:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8004a62:	f7fc f84b 	bl	8000afc <__aeabi_dcmpgt>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d02b      	beq.n	8004ac4 <CSE_step+0x4e4>
        t = scale / absxk;
 8004a6c:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8004a70:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8004a74:	f7fb fedc 	bl	8000830 <__aeabi_ddiv>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8004a80:	463b      	mov	r3, r7
 8004a82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a86:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8004a8a:	f7fb fda7 	bl	80005dc <__aeabi_dmul>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4610      	mov	r0, r2
 8004a94:	4619      	mov	r1, r3
 8004a96:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8004a9a:	f7fb fd9f 	bl	80005dc <__aeabi_dmul>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	4b96      	ldr	r3, [pc, #600]	; (8004d04 <CSE_step+0x724>)
 8004aac:	f7fb fbe0 	bl	8000270 <__adddf3>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4639      	mov	r1, r7
 8004ab6:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8004aba:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8004abe:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8004ac2:	e01d      	b.n	8004b00 <CSE_step+0x520>
      } else {
        t = absxk / scale;
 8004ac4:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8004ac8:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8004acc:	f7fb feb0 	bl	8000830 <__aeabi_ddiv>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8004ad8:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8004adc:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8004ae0:	f7fb fd7c 	bl	80005dc <__aeabi_dmul>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4610      	mov	r0, r2
 8004aea:	4619      	mov	r1, r3
 8004aec:	463b      	mov	r3, r7
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	f7fb fbbd 	bl	8000270 <__adddf3>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4639      	mov	r1, r7
 8004afc:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[2]);
 8004b00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b04:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004b08:	4611      	mov	r1, r2
 8004b0a:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8004b0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b12:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 8004b16:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8004b1a:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8004b1e:	f7fb ffed 	bl	8000afc <__aeabi_dcmpgt>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02b      	beq.n	8004b80 <CSE_step+0x5a0>
        t = scale / absxk;
 8004b28:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8004b2c:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8004b30:	f7fb fe7e 	bl	8000830 <__aeabi_ddiv>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8004b3c:	463b      	mov	r3, r7
 8004b3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b42:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8004b46:	f7fb fd49 	bl	80005dc <__aeabi_dmul>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4610      	mov	r0, r2
 8004b50:	4619      	mov	r1, r3
 8004b52:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8004b56:	f7fb fd41 	bl	80005dc <__aeabi_dmul>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	4b67      	ldr	r3, [pc, #412]	; (8004d04 <CSE_step+0x724>)
 8004b68:	f7fb fb82 	bl	8000270 <__adddf3>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4639      	mov	r1, r7
 8004b72:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8004b76:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8004b7a:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8004b7e:	e01d      	b.n	8004bbc <CSE_step+0x5dc>
      } else {
        t = absxk / scale;
 8004b80:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8004b84:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8004b88:	f7fb fe52 	bl	8000830 <__aeabi_ddiv>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8004b94:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8004b98:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8004b9c:	f7fb fd1e 	bl	80005dc <__aeabi_dmul>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	463b      	mov	r3, r7
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f7fb fb5f 	bl	8000270 <__adddf3>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4639      	mov	r1, r7
 8004bb8:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 8004bbc:	463b      	mov	r3, r7
 8004bbe:	ed93 7b00 	vldr	d7, [r3]
 8004bc2:	eeb0 0a47 	vmov.f32	s0, s14
 8004bc6:	eef0 0a67 	vmov.f32	s1, s15
 8004bca:	f011 f977 	bl	8015ebc <sqrt>
 8004bce:	ec51 0b10 	vmov	r0, r1, d0
 8004bd2:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8004bd6:	f7fb fd01 	bl	80005dc <__aeabi_dmul>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4639      	mov	r1, r7
 8004be0:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 8004be4:	463b      	mov	r3, r7
 8004be6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	4b45      	ldr	r3, [pc, #276]	; (8004d04 <CSE_step+0x724>)
 8004bf0:	f7fb ff7a 	bl	8000ae8 <__aeabi_dcmpge>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <CSE_step+0x622>
        guard1 = true;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8004c00:	e1e3      	b.n	8004fca <CSE_step+0x9ea>
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), C[2], &tempY[2], &s[2], &temp);
 8004c02:	463b      	mov	r3, r7
 8004c04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c08:	463b      	mov	r3, r7
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f7fb fce5 	bl	80005dc <__aeabi_dmul>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	f04f 0000 	mov.w	r0, #0
 8004c1a:	493a      	ldr	r1, [pc, #232]	; (8004d04 <CSE_step+0x724>)
 8004c1c:	f7fb fb26 	bl	800026c <__aeabi_dsub>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	ec43 2b17 	vmov	d7, r2, r3
 8004c28:	eeb0 0a47 	vmov.f32	s0, s14
 8004c2c:	eef0 0a67 	vmov.f32	s1, s15
 8004c30:	f011 f944 	bl	8015ebc <sqrt>
 8004c34:	eeb0 6a40 	vmov.f32	s12, s0
 8004c38:	eef0 6a60 	vmov.f32	s13, s1
 8004c3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c40:	ed93 7b04 	vldr	d7, [r3, #16]
 8004c44:	463a      	mov	r2, r7
 8004c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c4a:	f103 0110 	add.w	r1, r3, #16
 8004c4e:	f107 0310 	add.w	r3, r7, #16
 8004c52:	3310      	adds	r3, #16
 8004c54:	4618      	mov	r0, r3
 8004c56:	eeb0 1a47 	vmov.f32	s2, s14
 8004c5a:	eef0 1a67 	vmov.f32	s3, s15
 8004c5e:	eeb0 0a46 	vmov.f32	s0, s12
 8004c62:	eef0 0a66 	vmov.f32	s1, s13
 8004c66:	f005 faeb 	bl	800a240 <rotate_LZ7ctbe0>
        C[2] = 0.0;
 8004c6a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, C[1], &tempY[1], &s[1], &temp);
 8004c7a:	463b      	mov	r3, r7
 8004c7c:	ed93 7b00 	vldr	d7, [r3]
 8004c80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c84:	ed93 6b02 	vldr	d6, [r3, #8]
 8004c88:	463a      	mov	r2, r7
 8004c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c8e:	f103 0108 	add.w	r1, r3, #8
 8004c92:	f107 0310 	add.w	r3, r7, #16
 8004c96:	3308      	adds	r3, #8
 8004c98:	4618      	mov	r0, r3
 8004c9a:	eeb0 1a46 	vmov.f32	s2, s12
 8004c9e:	eef0 1a66 	vmov.f32	s3, s13
 8004ca2:	eeb0 0a47 	vmov.f32	s0, s14
 8004ca6:	eef0 0a67 	vmov.f32	s1, s15
 8004caa:	f005 fac9 	bl	800a240 <rotate_LZ7ctbe0>
        C[1] = 0.0;
 8004cae:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, C[0], &tempY[0], &s[0], &temp);
 8004cbe:	463b      	mov	r3, r7
 8004cc0:	ed93 7b00 	vldr	d7, [r3]
 8004cc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004cc8:	ed93 6b00 	vldr	d6, [r3]
 8004ccc:	463a      	mov	r2, r7
 8004cce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004cd2:	f107 0310 	add.w	r3, r7, #16
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	eeb0 1a46 	vmov.f32	s2, s12
 8004cdc:	eef0 1a66 	vmov.f32	s3, s13
 8004ce0:	eeb0 0a47 	vmov.f32	s0, s14
 8004ce4:	eef0 0a67 	vmov.f32	s1, s15
 8004ce8:	f005 faaa 	bl	800a240 <rotate_LZ7ctbe0>
        C[0] = 0.0;
 8004cec:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8004d02:	e06e      	b.n	8004de2 <CSE_step+0x802>
 8004d04:	3ff00000 	.word	0x3ff00000
          temp = s[iAcol_0] * R[iAcol_0];
 8004d08:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004d0c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	4413      	add	r3, r2
 8004d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d18:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8004d1c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	4413      	add	r3, r2
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f7fb fc58 	bl	80005dc <__aeabi_dmul>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4639      	mov	r1, r7
 8004d32:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0] = tempY[iAcol_0] * R[iAcol_0] - s[iAcol_0] * C[0];
 8004d36:	f107 0210 	add.w	r2, r7, #16
 8004d3a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	4413      	add	r3, r2
 8004d42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d46:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8004d4a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4413      	add	r3, r2
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f7fb fc41 	bl	80005dc <__aeabi_dmul>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4690      	mov	r8, r2
 8004d60:	4699      	mov	r9, r3
 8004d62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004d66:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	f7fb fc2f 	bl	80005dc <__aeabi_dmul>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4640      	mov	r0, r8
 8004d84:	4649      	mov	r1, r9
 8004d86:	f7fb fa71 	bl	800026c <__aeabi_dsub>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8004d92:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8004d96:	00c9      	lsls	r1, r1, #3
 8004d98:	4401      	add	r1, r0
 8004d9a:	e9c1 2300 	strd	r2, r3, [r1]
          C[0] = tempY[iAcol_0] * C[0] + temp;
 8004d9e:	f107 0210 	add.w	r2, r7, #16
 8004da2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4413      	add	r3, r2
 8004daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f7fb fc11 	bl	80005dc <__aeabi_dmul>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	463b      	mov	r3, r7
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f7fb fa52 	bl	8000270 <__adddf3>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004dd4:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 8004dd8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8004de2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	da8e      	bge.n	8004d08 <CSE_step+0x728>
        }

        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 8004dea:	2301      	movs	r3, #1
 8004dec:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8004df0:	e06f      	b.n	8004ed2 <CSE_step+0x8f2>
          temp = R[iAcol_0 + 3];
 8004df2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004df6:	3303      	adds	r3, #3
 8004df8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4413      	add	r3, r2
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	4639      	mov	r1, r7
 8004e06:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 3] = temp * tempY[iAcol_0] - s[iAcol_0] * C[1];
 8004e0a:	f107 0210 	add.w	r2, r7, #16
 8004e0e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e1a:	463b      	mov	r3, r7
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f7fb fbdc 	bl	80005dc <__aeabi_dmul>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4690      	mov	r8, r2
 8004e2a:	4699      	mov	r9, r3
 8004e2c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e30:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4413      	add	r3, r2
 8004e38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004e40:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004e44:	f7fb fbca 	bl	80005dc <__aeabi_dmul>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	4619      	mov	r1, r3
 8004e50:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004e54:	1cde      	adds	r6, r3, #3
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	f7fb fa05 	bl	800026c <__aeabi_dsub>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8004e6a:	00f1      	lsls	r1, r6, #3
 8004e6c:	4401      	add	r1, r0
 8004e6e:	e9c1 2300 	strd	r2, r3, [r1]
          C[1] = tempY[iAcol_0] * C[1] + temp * s[iAcol_0];
 8004e72:	f107 0210 	add.w	r2, r7, #16
 8004e76:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004e86:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004e8a:	f7fb fba7 	bl	80005dc <__aeabi_dmul>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4690      	mov	r8, r2
 8004e94:	4699      	mov	r9, r3
 8004e96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e9a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f7fb fb96 	bl	80005dc <__aeabi_dmul>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4640      	mov	r0, r8
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	f7fb f9da 	bl	8000270 <__adddf3>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004ec4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 8004ec8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8004ed2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	da8b      	bge.n	8004df2 <CSE_step+0x812>
        }

        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 8004eda:	2302      	movs	r3, #2
 8004edc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8004ee0:	e06f      	b.n	8004fc2 <CSE_step+0x9e2>
          temp = R[iAcol_0 + 6];
 8004ee2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004ee6:	3306      	adds	r3, #6
 8004ee8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4413      	add	r3, r2
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	4639      	mov	r1, r7
 8004ef6:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 6] = temp * tempY[iAcol_0] - s[iAcol_0] * C[2];
 8004efa:	f107 0210 	add.w	r2, r7, #16
 8004efe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4413      	add	r3, r2
 8004f06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f10:	f7fb fb64 	bl	80005dc <__aeabi_dmul>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4690      	mov	r8, r2
 8004f1a:	4699      	mov	r9, r3
 8004f1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f20:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4413      	add	r3, r2
 8004f28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f30:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004f34:	f7fb fb52 	bl	80005dc <__aeabi_dmul>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004f44:	1d9e      	adds	r6, r3, #6
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	f7fb f98d 	bl	800026c <__aeabi_dsub>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8004f5a:	00f1      	lsls	r1, r6, #3
 8004f5c:	4401      	add	r1, r0
 8004f5e:	e9c1 2300 	strd	r2, r3, [r1]
          C[2] = tempY[iAcol_0] * C[2] + temp * s[iAcol_0];
 8004f62:	f107 0210 	add.w	r2, r7, #16
 8004f66:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f76:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004f7a:	f7fb fb2f 	bl	80005dc <__aeabi_dmul>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4690      	mov	r8, r2
 8004f84:	4699      	mov	r9, r3
 8004f86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f8a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4413      	add	r3, r2
 8004f92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f96:	463b      	mov	r3, r7
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	f7fb fb1e 	bl	80005dc <__aeabi_dmul>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4640      	mov	r0, r8
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	f7fb f962 	bl	8000270 <__adddf3>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004fb4:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 8004fb8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8004fc2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	da8b      	bge.n	8004ee2 <CSE_step+0x902>
        }
      }
    }

    if (guard1) {
 8004fca:	f897 32de 	ldrb.w	r3, [r7, #734]	; 0x2de
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 82e1 	beq.w	8005596 <CSE_step+0xfb6>
      int32_T R_tmp;
      boolean_T exitg2;
      iAcol_0 = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8004fe0:	e0d6      	b.n	8005190 <CSE_step+0xbb0>
        coffset = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8004fee:	e0c0      	b.n	8005172 <CSE_step+0xb92>
          R_tmp = coffset + iAcol;
 8004ff0:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8004ff4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R_0[R_tmp] = 0.0;
 8004ffe:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005002:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	18d1      	adds	r1, r2, r3
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0] * R[coffset];
 8005016:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800501a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	4413      	add	r3, r2
 8005022:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005026:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800502a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4413      	add	r3, r2
 8005032:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005036:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800503a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4413      	add	r3, r2
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	f7fb fac9 	bl	80005dc <__aeabi_dmul>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4640      	mov	r0, r8
 8005050:	4649      	mov	r1, r9
 8005052:	f7fb f90d 	bl	8000270 <__adddf3>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800505e:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005062:	00c9      	lsls	r1, r1, #3
 8005064:	4401      	add	r1, r0
 8005066:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 1] * R[coffset + 1];
 800506a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800506e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4413      	add	r3, r2
 8005076:	e9d3 8900 	ldrd	r8, r9, [r3]
 800507a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800507e:	3301      	adds	r3, #1
 8005080:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4413      	add	r3, r2
 8005088:	e9d3 0100 	ldrd	r0, r1, [r3]
 800508c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005090:	3301      	adds	r3, #1
 8005092:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4413      	add	r3, r2
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	f7fb fa9d 	bl	80005dc <__aeabi_dmul>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4640      	mov	r0, r8
 80050a8:	4649      	mov	r1, r9
 80050aa:	f7fb f8e1 	bl	8000270 <__adddf3>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80050b6:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80050ba:	00c9      	lsls	r1, r1, #3
 80050bc:	4401      	add	r1, r0
 80050be:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 2] * R[coffset + 2];
 80050c2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80050c6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	4413      	add	r3, r2
 80050ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050d2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80050d6:	3302      	adds	r3, #2
 80050d8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4413      	add	r3, r2
 80050e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050e4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80050e8:	3302      	adds	r3, #2
 80050ea:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	4413      	add	r3, r2
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	f7fb fa71 	bl	80005dc <__aeabi_dmul>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4640      	mov	r0, r8
 8005100:	4649      	mov	r1, r9
 8005102:	f7fb f8b5 	bl	8000270 <__adddf3>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
 800510a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800510e:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005112:	00c9      	lsls	r1, r1, #3
 8005114:	4401      	add	r1, r0
 8005116:	e9c1 2300 	strd	r2, r3, [r1]
          tempY_0[aoffset + iAcol_0] = tempY[aoffset] * tempY[iAcol];
 800511a:	f107 0210 	add.w	r2, r7, #16
 800511e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	4413      	add	r3, r2
 8005126:	e9d3 0100 	ldrd	r0, r1, [r3]
 800512a:	f107 0210 	add.w	r2, r7, #16
 800512e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	4413      	add	r3, r2
 8005136:	e9d3 8900 	ldrd	r8, r9, [r3]
 800513a:	f8d7 62ec 	ldr.w	r6, [r7, #748]	; 0x2ec
 800513e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005142:	4433      	add	r3, r6
 8005144:	461e      	mov	r6, r3
 8005146:	4642      	mov	r2, r8
 8005148:	464b      	mov	r3, r9
 800514a:	f7fb fa47 	bl	80005dc <__aeabi_dmul>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8005156:	00f1      	lsls	r1, r6, #3
 8005158:	4401      	add	r1, r0
 800515a:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 800515e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005162:	3303      	adds	r3, #3
 8005164:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005168:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800516c:	3301      	adds	r3, #1
 800516e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8005172:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005176:	2b02      	cmp	r3, #2
 8005178:	f77f af3a 	ble.w	8004ff0 <CSE_step+0xa10>
        }

        iAcol_0 += 3;
 800517c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005180:	3303      	adds	r3, #3
 8005182:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005186:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800518a:	3301      	adds	r3, #1
 800518c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005190:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005194:	2b02      	cmp	r3, #2
 8005196:	f77f af24 	ble.w	8004fe2 <CSE_step+0xa02>
      }

      errorCondition = true;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      for (iAcol = 0; iAcol < 9; iAcol++) {
 80051a0:	2300      	movs	r3, #0
 80051a2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80051a6:	e045      	b.n	8005234 <CSE_step+0xc54>
        temp = R_0[iAcol] - tempY_0[iAcol];
 80051a8:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80051ac:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	4413      	add	r3, r2
 80051b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051b8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80051bc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4413      	add	r3, r2
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f7fb f850 	bl	800026c <__aeabi_dsub>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4639      	mov	r1, r7
 80051d2:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 80051d6:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01a      	beq.n	8005214 <CSE_step+0xc34>
 80051de:	463b      	mov	r3, r7
 80051e0:	ed93 7b00 	vldr	d7, [r3]
 80051e4:	eeb0 0a47 	vmov.f32	s0, s14
 80051e8:	eef0 0a67 	vmov.f32	s1, s15
 80051ec:	f005 fa9e 	bl	800a72c <rtIsInf>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10b      	bne.n	800520e <CSE_step+0xc2e>
 80051f6:	463b      	mov	r3, r7
 80051f8:	ed93 7b00 	vldr	d7, [r3]
 80051fc:	eeb0 0a47 	vmov.f32	s0, s14
 8005200:	eef0 0a67 	vmov.f32	s1, s15
 8005204:	f005 fab6 	bl	800a774 <rtIsNaN>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <CSE_step+0xc34>
          errorCondition = false;
 800520e:	2300      	movs	r3, #0
 8005210:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
        }

        Ss[iAcol] = temp;
 8005214:	463b      	mov	r3, r7
 8005216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521a:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800521e:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8005222:	00c9      	lsls	r1, r1, #3
 8005224:	4401      	add	r1, r0
 8005226:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 800522a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800522e:	3301      	adds	r3, #1
 8005230:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005234:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005238:	2b08      	cmp	r3, #8
 800523a:	ddb5      	ble.n	80051a8 <CSE_step+0xbc8>
      }

      if (errorCondition) {
 800523c:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <CSE_step+0xc7a>
        svd_u3DvUgOe(Ss, tempY_0, s, R_0);
 8005244:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005248:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800524c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005250:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8005254:	f005 fae0 	bl	800a818 <svd_u3DvUgOe>
 8005258:	e02c      	b.n	80052b4 <CSE_step+0xcd4>
      } else {
        s[0] = (rtNaN);
 800525a:	4bd2      	ldr	r3, [pc, #840]	; (80055a4 <CSE_step+0xfc4>)
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005264:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8005268:	4bce      	ldr	r3, [pc, #824]	; (80055a4 <CSE_step+0xfc4>)
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005272:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 8005276:	4bcb      	ldr	r3, [pc, #812]	; (80055a4 <CSE_step+0xfc4>)
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005280:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005284:	2300      	movs	r3, #0
 8005286:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800528a:	e00f      	b.n	80052ac <CSE_step+0xccc>
          R_0[iAcol_0] = (rtNaN);
 800528c:	4bc5      	ldr	r3, [pc, #788]	; (80055a4 <CSE_step+0xfc4>)
 800528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005292:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8005296:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800529a:	00c9      	lsls	r1, r1, #3
 800529c:	4401      	add	r1, r0
 800529e:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80052a2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80052a6:	3301      	adds	r3, #1
 80052a8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80052ac:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	ddeb      	ble.n	800528c <CSE_step+0xcac>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 80052b4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80052b8:	2248      	movs	r2, #72	; 0x48
 80052ba:	2100      	movs	r1, #0
 80052bc:	4618      	mov	r0, r3
 80052be:	f010 fc0b 	bl	8015ad8 <memset>
      Ss[0] = s[0];
 80052c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ca:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80052ce:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 80052d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80052da:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80052de:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 80052e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80052ea:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80052ee:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80052f2:	2300      	movs	r3, #0
 80052f4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80052f8:	e01e      	b.n	8005338 <CSE_step+0xd58>
        Ss[iAcol_0] = sqrt(Ss[iAcol_0]);
 80052fa:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80052fe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4413      	add	r3, r2
 8005306:	ed93 7b00 	vldr	d7, [r3]
 800530a:	eeb0 0a47 	vmov.f32	s0, s14
 800530e:	eef0 0a67 	vmov.f32	s1, s15
 8005312:	f010 fdd3 	bl	8015ebc <sqrt>
 8005316:	eeb0 7a40 	vmov.f32	s14, s0
 800531a:	eef0 7a60 	vmov.f32	s15, s1
 800531e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005322:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4413      	add	r3, r2
 800532a:	ed83 7b00 	vstr	d7, [r3]
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 800532e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005332:	3301      	adds	r3, #1
 8005334:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005338:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800533c:	2b08      	cmp	r3, #8
 800533e:	dddc      	ble.n	80052fa <CSE_step+0xd1a>
      }

      iAcol_0 = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005346:	2300      	movs	r3, #0
 8005348:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800534c:	e0b4      	b.n	80054b8 <CSE_step+0xed8>
        coffset = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005354:	2300      	movs	r3, #0
 8005356:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800535a:	e09e      	b.n	800549a <CSE_step+0xeba>
          R_tmp = coffset + iAcol;
 800535c:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8005360:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005364:	4413      	add	r3, r2
 8005366:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R[R_tmp] = 0.0;
 800536a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800536e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	18d1      	adds	r1, r2, r3
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0] * R_0[aoffset];
 8005382:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005386:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4413      	add	r3, r2
 800538e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005392:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005396:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053a2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80053a6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4413      	add	r3, r2
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	f7fb f913 	bl	80005dc <__aeabi_dmul>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4640      	mov	r0, r8
 80053bc:	4649      	mov	r1, r9
 80053be:	f7fa ff57 	bl	8000270 <__adddf3>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80053ca:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80053ce:	00c9      	lsls	r1, r1, #3
 80053d0:	4401      	add	r1, r0
 80053d2:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 1] * R_0[aoffset + 3];
 80053d6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80053da:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4413      	add	r3, r2
 80053e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053e6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80053ea:	3301      	adds	r3, #1
 80053ec:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	4413      	add	r3, r2
 80053f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053f8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80053fc:	3303      	adds	r3, #3
 80053fe:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4413      	add	r3, r2
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	f7fb f8e7 	bl	80005dc <__aeabi_dmul>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4640      	mov	r0, r8
 8005414:	4649      	mov	r1, r9
 8005416:	f7fa ff2b 	bl	8000270 <__adddf3>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005422:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005426:	00c9      	lsls	r1, r1, #3
 8005428:	4401      	add	r1, r0
 800542a:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 2] * R_0[aoffset + 6];
 800542e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005432:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	4413      	add	r3, r2
 800543a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800543e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005442:	3302      	adds	r3, #2
 8005444:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	4413      	add	r3, r2
 800544c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005450:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005454:	3306      	adds	r3, #6
 8005456:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4413      	add	r3, r2
 800545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005462:	f7fb f8bb 	bl	80005dc <__aeabi_dmul>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4640      	mov	r0, r8
 800546c:	4649      	mov	r1, r9
 800546e:	f7fa feff 	bl	8000270 <__adddf3>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800547a:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 800547e:	00c9      	lsls	r1, r1, #3
 8005480:	4401      	add	r1, r0
 8005482:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 8005486:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800548a:	3303      	adds	r3, #3
 800548c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005490:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005494:	3301      	adds	r3, #1
 8005496:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800549a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800549e:	2b02      	cmp	r3, #2
 80054a0:	f77f af5c 	ble.w	800535c <CSE_step+0xd7c>
        }

        iAcol_0 += 3;
 80054a4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80054a8:	3303      	adds	r3, #3
 80054aa:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80054ae:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80054b2:	3301      	adds	r3, #1
 80054b4:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80054b8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80054bc:	2b02      	cmp	r3, #2
 80054be:	f77f af46 	ble.w	800534e <CSE_step+0xd6e>
      }

      errorCondition = true;
 80054c2:	2301      	movs	r3, #1
 80054c4:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      iAcol = 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
      exitg2 = false;
 80054ce:	2300      	movs	r3, #0
 80054d0:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 80054d4:	e042      	b.n	800555c <CSE_step+0xf7c>
        int32_T exitg1;
        iAcol_0 = iAcol + 1;
 80054d6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80054da:	3301      	adds	r3, #1
 80054dc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
        do {
          exitg1 = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          if (iAcol_0 + 1 < 4) {
 80054e6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	dc23      	bgt.n	8005536 <CSE_step+0xf56>
            if (!(R[3 * iAcol + iAcol_0] == 0.0)) {
 80054ee:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80054f2:	4613      	mov	r3, r2
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	441a      	add	r2, r3
 80054f8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80054fc:	4413      	add	r3, r2
 80054fe:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4413      	add	r3, r2
 8005506:	e9d3 0100 	ldrd	r0, r1, [r3]
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	f7fb facb 	bl	8000aac <__aeabi_dcmpeq>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d106      	bne.n	800552a <CSE_step+0xf4a>
              errorCondition = false;
 800551c:	2300      	movs	r3, #0
 800551e:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
              exitg1 = 1;
 8005522:	2301      	movs	r3, #1
 8005524:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8005528:	e00d      	b.n	8005546 <CSE_step+0xf66>
            } else {
              iAcol_0++;
 800552a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800552e:	3301      	adds	r3, #1
 8005530:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005534:	e007      	b.n	8005546 <CSE_step+0xf66>
            }
          } else {
            iAcol++;
 8005536:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800553a:	3301      	adds	r3, #1
 800553c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            exitg1 = 2;
 8005540:	2302      	movs	r3, #2
 8005542:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          }
        } while (exitg1 == 0);
 8005546:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0c8      	beq.n	80054e0 <CSE_step+0xf00>

        if (exitg1 == 1) {
 800554e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8005552:	2b01      	cmp	r3, #1
 8005554:	d102      	bne.n	800555c <CSE_step+0xf7c>
          exitg2 = true;
 8005556:	2301      	movs	r3, #1
 8005558:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 800555c:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8005560:	2b00      	cmp	r3, #0
 8005562:	d103      	bne.n	800556c <CSE_step+0xf8c>
 8005564:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005568:	2b02      	cmp	r3, #2
 800556a:	ddb4      	ble.n	80054d6 <CSE_step+0xef6>
        }
      }

      if (!errorCondition) {
 800556c:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005570:	2b00      	cmp	r3, #0
 8005572:	d110      	bne.n	8005596 <CSE_step+0xfb6>
        memcpy(&R_0[0], &R[0], 9U * sizeof(real_T));
 8005574:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8005578:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800557c:	2248      	movs	r2, #72	; 0x48
 800557e:	4618      	mov	r0, r3
 8005580:	f010 fa9c 	bl	8015abc <memcpy>
        qr_5a2P8Gh6(R_0, tempY_0, R);
 8005584:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005588:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800558c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005590:	4618      	mov	r0, r3
 8005592:	f002 fd7d 	bl	8008090 <qr_5a2P8Gh6>
      }
    }

    iAcol_0 = 0;
 8005596:	2300      	movs	r3, #0
 8005598:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 800559c:	2300      	movs	r3, #0
 800559e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80055a2:	e062      	b.n	800566a <CSE_step+0x108a>
 80055a4:	2000de00 	.word	0x2000de00
      CSE_DW.P[iAcol_0] = R[iAcol];
 80055a8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80055ac:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4413      	add	r3, r2
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	48a5      	ldr	r0, [pc, #660]	; (8005850 <CSE_step+0x1270>)
 80055ba:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80055be:	00c9      	lsls	r1, r1, #3
 80055c0:	4401      	add	r1, r0
 80055c2:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 80055c6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80055ca:	3303      	adds	r3, #3
 80055cc:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80055d0:	1c51      	adds	r1, r2, #1
 80055d2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4413      	add	r3, r2
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	489c      	ldr	r0, [pc, #624]	; (8005850 <CSE_step+0x1270>)
 80055e0:	00c9      	lsls	r1, r1, #3
 80055e2:	4401      	add	r1, r0
 80055e4:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 80055e8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80055ec:	3306      	adds	r3, #6
 80055ee:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80055f2:	1c91      	adds	r1, r2, #2
 80055f4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	4413      	add	r3, r2
 80055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005600:	4893      	ldr	r0, [pc, #588]	; (8005850 <CSE_step+0x1270>)
 8005602:	00c9      	lsls	r1, r1, #3
 8005604:	4401      	add	r1, r0
 8005606:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.x[iAcol] += K[iAcol] * s_0;
 800560a:	4a91      	ldr	r2, [pc, #580]	; (8005850 <CSE_step+0x1270>)
 800560c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005610:	3309      	adds	r3, #9
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	4413      	add	r3, r2
 8005616:	e9d3 8900 	ldrd	r8, r9, [r3]
 800561a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800561e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	4413      	add	r3, r2
 8005626:	e9d3 0100 	ldrd	r0, r1, [r3]
 800562a:	f107 0308 	add.w	r3, r7, #8
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	f7fa ffd3 	bl	80005dc <__aeabi_dmul>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4640      	mov	r0, r8
 800563c:	4649      	mov	r1, r9
 800563e:	f7fa fe17 	bl	8000270 <__adddf3>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4882      	ldr	r0, [pc, #520]	; (8005850 <CSE_step+0x1270>)
 8005648:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 800564c:	3109      	adds	r1, #9
 800564e:	00c9      	lsls	r1, r1, #3
 8005650:	4401      	add	r1, r0
 8005652:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8005656:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800565a:	3303      	adds	r3, #3
 800565c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005660:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005664:	3301      	adds	r3, #1
 8005666:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800566a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800566e:	2b02      	cmp	r3, #2
 8005670:	dd9a      	ble.n	80055a8 <CSE_step+0xfc8>
    }
  }

  CSE_Y.soc = CSE_DW.x[1] / CSE_DW.x[2];
 8005672:	4b77      	ldr	r3, [pc, #476]	; (8005850 <CSE_step+0x1270>)
 8005674:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005678:	4b75      	ldr	r3, [pc, #468]	; (8005850 <CSE_step+0x1270>)
 800567a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800567e:	f7fb f8d7 	bl	8000830 <__aeabi_ddiv>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4973      	ldr	r1, [pc, #460]	; (8005854 <CSE_step+0x1274>)
 8005688:	e9c1 2300 	strd	r2, r3, [r1]
  CSE_Y.C = CSE_DW.x[2];
 800568c:	4b70      	ldr	r3, [pc, #448]	; (8005850 <CSE_step+0x1270>)
 800568e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005692:	4970      	ldr	r1, [pc, #448]	; (8005854 <CSE_step+0x1274>)
 8005694:	e9c1 2302 	strd	r2, r3, [r1, #8]
  CSE_S_x(CSE_DW.x, tempY);
 8005698:	f107 0310 	add.w	r3, r7, #16
 800569c:	4619      	mov	r1, r3
 800569e:	486e      	ldr	r0, [pc, #440]	; (8005858 <CSE_step+0x1278>)
 80056a0:	f7fe fb26 	bl	8003cf0 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80056a4:	2300      	movs	r3, #0
 80056a6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80056aa:	e034      	b.n	8005716 <CSE_step+0x1136>
    s_0 = 0.34641016151377552 * CSE_DW.P[iAcol_0];
 80056ac:	4a68      	ldr	r2, [pc, #416]	; (8005850 <CSE_step+0x1270>)
 80056ae:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	4413      	add	r3, r2
 80056b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056ba:	a363      	add	r3, pc, #396	; (adr r3, 8005848 <CSE_step+0x1268>)
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	f7fa ff8c 	bl	80005dc <__aeabi_dmul>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	f107 0108 	add.w	r1, r7, #8
 80056cc:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0] = s_0;
 80056d0:	f107 0308 	add.w	r3, r7, #8
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80056dc:	00c9      	lsls	r1, r1, #3
 80056de:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80056e2:	4401      	add	r1, r0
 80056e4:	39d0      	subs	r1, #208	; 0xd0
 80056e6:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 9] = -s_0;
 80056ea:	f107 0308 	add.w	r3, r7, #8
 80056ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f2:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80056f6:	3109      	adds	r1, #9
 80056f8:	4614      	mov	r4, r2
 80056fa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80056fe:	00cb      	lsls	r3, r1, #3
 8005700:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8005704:	4413      	add	r3, r2
 8005706:	3bd0      	subs	r3, #208	; 0xd0
 8005708:	e9c3 4500 	strd	r4, r5, [r3]
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 800570c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005710:	3301      	adds	r3, #1
 8005712:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005716:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800571a:	2b08      	cmp	r3, #8
 800571c:	ddc6      	ble.n	80056ac <CSE_step+0x10cc>
  }

  iAcol_0 = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8005724:	2300      	movs	r3, #0
 8005726:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800572a:	e058      	b.n	80057de <CSE_step+0x11fe>
    X2state[iAcol_0] += CSE_DW.x[0];
 800572c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8005736:	4413      	add	r3, r2
 8005738:	3bd0      	subs	r3, #208	; 0xd0
 800573a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800573e:	4b44      	ldr	r3, [pc, #272]	; (8005850 <CSE_step+0x1270>)
 8005740:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005744:	f7fa fd94 	bl	8000270 <__adddf3>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005750:	00c9      	lsls	r1, r1, #3
 8005752:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8005756:	4401      	add	r1, r0
 8005758:	39d0      	subs	r1, #208	; 0xd0
 800575a:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 1] += CSE_DW.x[1];
 800575e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005762:	3301      	adds	r3, #1
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 800576a:	4413      	add	r3, r2
 800576c:	3bd0      	subs	r3, #208	; 0xd0
 800576e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005772:	4b37      	ldr	r3, [pc, #220]	; (8005850 <CSE_step+0x1270>)
 8005774:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005778:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 800577c:	3401      	adds	r4, #1
 800577e:	f7fa fd77 	bl	8000270 <__adddf3>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	00e1      	lsls	r1, r4, #3
 8005788:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 800578c:	4401      	add	r1, r0
 800578e:	39d0      	subs	r1, #208	; 0xd0
 8005790:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 2] += CSE_DW.x[2];
 8005794:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005798:	3302      	adds	r3, #2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 80057a0:	4413      	add	r3, r2
 80057a2:	3bd0      	subs	r3, #208	; 0xd0
 80057a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057a8:	4b29      	ldr	r3, [pc, #164]	; (8005850 <CSE_step+0x1270>)
 80057aa:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80057ae:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 80057b2:	3402      	adds	r4, #2
 80057b4:	f7fa fd5c 	bl	8000270 <__adddf3>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	00e1      	lsls	r1, r4, #3
 80057be:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80057c2:	4401      	add	r1, r0
 80057c4:	39d0      	subs	r1, #208	; 0xd0
 80057c6:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 80057ca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80057ce:	3303      	adds	r3, #3
 80057d0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 80057d4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80057d8:	3301      	adds	r3, #1
 80057da:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80057de:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	dda2      	ble.n	800572c <CSE_step+0x114c>
  }

  iAcol_0 = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 80057ec:	2300      	movs	r3, #0
 80057ee:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80057f2:	e018      	b.n	8005826 <CSE_step+0x1246>
    CSE_S_x(&X2state[iAcol_0], &Y2[iAcol_0]);
 80057f4:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80057f8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	18d0      	adds	r0, r2, r3
 8005800:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8005804:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4413      	add	r3, r2
 800580c:	4619      	mov	r1, r3
 800580e:	f7fe fa6f 	bl	8003cf0 <CSE_S_x>
    iAcol_0 += 3;
 8005812:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005816:	3303      	adds	r3, #3
 8005818:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 800581c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005820:	3301      	adds	r3, #1
 8005822:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005826:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800582a:	2b05      	cmp	r3, #5
 800582c:	dde2      	ble.n	80057f4 <CSE_step+0x1214>
  }

  CSE_S_x(CSE_DW.x, tempY);
 800582e:	f107 0310 	add.w	r3, r7, #16
 8005832:	4619      	mov	r1, r3
 8005834:	4808      	ldr	r0, [pc, #32]	; (8005858 <CSE_step+0x1278>)
 8005836:	f7fe fa5b 	bl	8003cf0 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 800583a:	2300      	movs	r3, #0
 800583c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005840:	e021      	b.n	8005886 <CSE_step+0x12a6>
 8005842:	bf00      	nop
 8005844:	f3af 8000 	nop.w
 8005848:	86ad0a23 	.word	0x86ad0a23
 800584c:	3fd62b95 	.word	0x3fd62b95
 8005850:	2000dd90 	.word	0x2000dd90
 8005854:	2000dd70 	.word	0x2000dd70
 8005858:	2000ddd8 	.word	0x2000ddd8
    C[iAcol_0] = CSE_DW.x[iAcol_0];
 800585c:	4ab8      	ldr	r2, [pc, #736]	; (8005b40 <CSE_step+0x1560>)
 800585e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005862:	3309      	adds	r3, #9
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	4413      	add	r3, r2
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8005870:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005874:	00c9      	lsls	r1, r1, #3
 8005876:	4401      	add	r1, r0
 8005878:	e9c1 2300 	strd	r2, r3, [r1]
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 800587c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005880:	3301      	adds	r3, #1
 8005882:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005886:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800588a:	2b02      	cmp	r3, #2
 800588c:	dde6      	ble.n	800585c <CSE_step+0x127c>
  }

  UTMeanCovSqrt_C2vgLQ4W(Wmean, Wcov, -23.999999999999996, tempY, Y2, C, X2state,
 800588e:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8005892:	f107 0210 	add.w	r2, r7, #16
 8005896:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800589a:	9304      	str	r3, [sp, #16]
 800589c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80058a0:	9303      	str	r3, [sp, #12]
 80058a2:	4ba8      	ldr	r3, [pc, #672]	; (8005b44 <CSE_step+0x1564>)
 80058a4:	9302      	str	r3, [sp, #8]
 80058a6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80058aa:	9301      	str	r3, [sp, #4]
 80058ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	460b      	mov	r3, r1
 80058b4:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8005b38 <CSE_step+0x1558>
 80058b8:	49a3      	ldr	r1, [pc, #652]	; (8005b48 <CSE_step+0x1568>)
 80058ba:	48a4      	ldr	r0, [pc, #656]	; (8005b4c <CSE_step+0x156c>)
 80058bc:	f000 f9b8 	bl	8005c30 <UTMeanCovSqrt_C2vgLQ4W>
    CSE_DW.x, Ss, R);
  memset(&R[0], 0, 9U * sizeof(real_T));
 80058c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80058c4:	2248      	movs	r2, #72	; 0x48
 80058c6:	2100      	movs	r1, #0
 80058c8:	4618      	mov	r0, r3
 80058ca:	f010 f905 	bl	8015ad8 <memset>
  R[0] = 1.0;
 80058ce:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	4b9e      	ldr	r3, [pc, #632]	; (8005b50 <CSE_step+0x1570>)
 80058d8:	e9c1 2300 	strd	r2, r3, [r1]
  R[4] = 1.0;
 80058dc:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	4b9a      	ldr	r3, [pc, #616]	; (8005b50 <CSE_step+0x1570>)
 80058e6:	e9c1 2308 	strd	r2, r3, [r1, #32]
  R[8] = 1.0;
 80058ea:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	4b97      	ldr	r3, [pc, #604]	; (8005b50 <CSE_step+0x1570>)
 80058f4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 80058f8:	2300      	movs	r3, #0
 80058fa:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80058fe:	e07e      	b.n	80059fe <CSE_step+0x141e>
    coffset = iAcol_0 * 3;
 8005900:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005904:	4613      	mov	r3, r2
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	4413      	add	r3, r2
 800590a:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
    for (iAcol = 0; iAcol < 3; iAcol++) {
 800590e:	2300      	movs	r3, #0
 8005910:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005914:	e06a      	b.n	80059ec <CSE_step+0x140c>
      aoffset = iAcol * 3;
 8005916:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800591a:	4613      	mov	r3, r2
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	4413      	add	r3, r2
 8005920:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8005924:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005928:	3301      	adds	r3, #1
 800592a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	4413      	add	r3, r2
 8005932:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005936:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800593a:	3303      	adds	r3, #3
 800593c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	4413      	add	r3, r2
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	f7fa fe48 	bl	80005dc <__aeabi_dmul>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4614      	mov	r4, r2
 8005952:	461d      	mov	r5, r3
 8005954:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005958:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	4413      	add	r3, r2
 8005960:	e9d3 0100 	ldrd	r0, r1, [r3]
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8005964:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005968:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	4413      	add	r3, r2
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8005974:	f7fa fe32 	bl	80005dc <__aeabi_dmul>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4620      	mov	r0, r4
 800597e:	4629      	mov	r1, r5
 8005980:	f7fa fc76 	bl	8000270 <__adddf3>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4690      	mov	r8, r2
 800598a:	4699      	mov	r9, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 800598c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005990:	3302      	adds	r3, #2
 8005992:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	4413      	add	r3, r2
 800599a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800599e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80059a2:	3306      	adds	r3, #6
 80059a4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	4413      	add	r3, r2
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	f7fa fe14 	bl	80005dc <__aeabi_dmul>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4610      	mov	r0, r2
 80059ba:	4619      	mov	r1, r3
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 80059bc:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80059c0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80059c4:	18d4      	adds	r4, r2, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4640      	mov	r0, r8
 80059cc:	4649      	mov	r1, r9
 80059ce:	f7fa fc4f 	bl	8000270 <__adddf3>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 80059d6:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80059da:	00e1      	lsls	r1, r4, #3
 80059dc:	4401      	add	r1, r0
 80059de:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80059e2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80059e6:	3301      	adds	r3, #1
 80059e8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80059ec:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	dd90      	ble.n	8005916 <CSE_step+0x1336>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 80059f4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80059f8:	3301      	adds	r3, #1
 80059fa:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80059fe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	f77f af7c 	ble.w	8005900 <CSE_step+0x1320>
    }
  }

  iAcol_0 = 0;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  iAcol = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 8005a14:	2300      	movs	r3, #0
 8005a16:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8005a1a:	e077      	b.n	8005b0c <CSE_step+0x152c>
    Y2[iAcol_0] = R_0[iAcol];
 8005a1c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005a20:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	4413      	add	r3, r2
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8005a30:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005a34:	00c9      	lsls	r1, r1, #3
 8005a36:	4401      	add	r1, r0
 8005a38:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 3] = CSE_P.Q_Value[coffset];
 8005a3c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005a40:	1cd9      	adds	r1, r3, #3
 8005a42:	4a44      	ldr	r2, [pc, #272]	; (8005b54 <CSE_step+0x1574>)
 8005a44:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005a48:	3344      	adds	r3, #68	; 0x44
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	4413      	add	r3, r2
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8005a56:	00c9      	lsls	r1, r1, #3
 8005a58:	4401      	add	r1, r0
 8005a5a:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 1] = R_0[iAcol + 1];
 8005a5e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005a62:	3301      	adds	r3, #1
 8005a64:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005a68:	1c51      	adds	r1, r2, #1
 8005a6a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	4413      	add	r3, r2
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8005a7a:	00c9      	lsls	r1, r1, #3
 8005a7c:	4401      	add	r1, r0
 8005a7e:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 4] = CSE_P.Q_Value[coffset + 3];
 8005a82:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005a86:	3303      	adds	r3, #3
 8005a88:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005a8c:	1d11      	adds	r1, r2, #4
 8005a8e:	4a31      	ldr	r2, [pc, #196]	; (8005b54 <CSE_step+0x1574>)
 8005a90:	3344      	adds	r3, #68	; 0x44
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	4413      	add	r3, r2
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8005a9e:	00c9      	lsls	r1, r1, #3
 8005aa0:	4401      	add	r1, r0
 8005aa2:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 2] = R_0[iAcol + 2];
 8005aa6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005aaa:	3302      	adds	r3, #2
 8005aac:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005ab0:	1c91      	adds	r1, r2, #2
 8005ab2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	4413      	add	r3, r2
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8005ac2:	00c9      	lsls	r1, r1, #3
 8005ac4:	4401      	add	r1, r0
 8005ac6:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 5] = CSE_P.Q_Value[coffset + 6];
 8005aca:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005ace:	3306      	adds	r3, #6
 8005ad0:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005ad4:	1d51      	adds	r1, r2, #5
 8005ad6:	4a1f      	ldr	r2, [pc, #124]	; (8005b54 <CSE_step+0x1574>)
 8005ad8:	3344      	adds	r3, #68	; 0x44
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	4413      	add	r3, r2
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8005ae6:	00c9      	lsls	r1, r1, #3
 8005ae8:	4401      	add	r1, r0
 8005aea:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 6;
 8005aee:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005af2:	3306      	adds	r3, #6
 8005af4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    iAcol += 3;
 8005af8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005afc:	3303      	adds	r3, #3
 8005afe:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 8005b02:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005b06:	3301      	adds	r3, #1
 8005b08:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8005b0c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	dd83      	ble.n	8005a1c <CSE_step+0x143c>
  }

  qr_DvOBrgQi(Y2, X2state, R);
 8005b14:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005b18:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8005b1c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005b20:	4618      	mov	r0, r3
 8005b22:	f003 fa3d 	bl	8008fa0 <qr_DvOBrgQi>
  iAcol_0 = 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005b32:	e04c      	b.n	8005bce <CSE_step+0x15ee>
 8005b34:	f3af 8000 	nop.w
 8005b38:	ffffffff 	.word	0xffffffff
 8005b3c:	c037ffff 	.word	0xc037ffff
 8005b40:	2000dd90 	.word	0x2000dd90
 8005b44:	2000ddd8 	.word	0x2000ddd8
 8005b48:	080166f8 	.word	0x080166f8
 8005b4c:	080166e8 	.word	0x080166e8
 8005b50:	3ff00000 	.word	0x3ff00000
 8005b54:	20001010 	.word	0x20001010
    CSE_DW.P[iAcol_0] = R[iAcol];
 8005b58:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005b5c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	4413      	add	r3, r2
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	481e      	ldr	r0, [pc, #120]	; (8005be4 <CSE_step+0x1604>)
 8005b6a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005b6e:	00c9      	lsls	r1, r1, #3
 8005b70:	4401      	add	r1, r0
 8005b72:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 8005b76:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005b7a:	3303      	adds	r3, #3
 8005b7c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005b80:	1c51      	adds	r1, r2, #1
 8005b82:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4413      	add	r3, r2
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	4815      	ldr	r0, [pc, #84]	; (8005be4 <CSE_step+0x1604>)
 8005b90:	00c9      	lsls	r1, r1, #3
 8005b92:	4401      	add	r1, r0
 8005b94:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8005b98:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005b9c:	3306      	adds	r3, #6
 8005b9e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005ba2:	1c91      	adds	r1, r2, #2
 8005ba4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	4413      	add	r3, r2
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	480c      	ldr	r0, [pc, #48]	; (8005be4 <CSE_step+0x1604>)
 8005bb2:	00c9      	lsls	r1, r1, #3
 8005bb4:	4401      	add	r1, r0
 8005bb6:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 8005bba:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005bbe:	3303      	adds	r3, #3
 8005bc0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8005bc4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005bc8:	3301      	adds	r3, #1
 8005bca:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005bce:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	ddc0      	ble.n	8005b58 <CSE_step+0x1578>
  }
}
 8005bd6:	bf00      	nop
 8005bd8:	bf00      	nop
 8005bda:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 8005bde:	46bd      	mov	sp, r7
 8005be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005be4:	2000dd90 	.word	0x2000dd90

08005be8 <CSE_initialize>:

void CSE_initialize(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN(sizeof(real_T));
 8005bec:	2008      	movs	r0, #8
 8005bee:	f004 fd59 	bl	800a6a4 <rt_InitInfAndNaN>
  memcpy(&CSE_DW.P[0], &CSE_P.DataStoreMemoryP_InitialValue[0], 9U * sizeof
 8005bf2:	2248      	movs	r2, #72	; 0x48
 8005bf4:	490b      	ldr	r1, [pc, #44]	; (8005c24 <CSE_initialize+0x3c>)
 8005bf6:	480c      	ldr	r0, [pc, #48]	; (8005c28 <CSE_initialize+0x40>)
 8005bf8:	f00f ff60 	bl	8015abc <memcpy>
         (real_T));
  CSE_DW.x[0] = CSE_P.DataStoreMemoryx_InitialValue[0];
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <CSE_initialize+0x44>)
 8005bfe:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 8005c02:	4909      	ldr	r1, [pc, #36]	; (8005c28 <CSE_initialize+0x40>)
 8005c04:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  CSE_DW.x[1] = CSE_P.DataStoreMemoryx_InitialValue[1];
 8005c08:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <CSE_initialize+0x44>)
 8005c0a:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8005c0e:	4906      	ldr	r1, [pc, #24]	; (8005c28 <CSE_initialize+0x40>)
 8005c10:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  CSE_DW.x[2] = CSE_P.DataStoreMemoryx_InitialValue[2];
 8005c14:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <CSE_initialize+0x44>)
 8005c16:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8005c1a:	4903      	ldr	r1, [pc, #12]	; (8005c28 <CSE_initialize+0x40>)
 8005c1c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 8005c20:	bf00      	nop
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20001280 	.word	0x20001280
 8005c28:	2000dd90 	.word	0x2000dd90
 8005c2c:	20001010 	.word	0x20001010

08005c30 <UTMeanCovSqrt_C2vgLQ4W>:
#include "qr_5a2P8Gh6.h"

void UTMeanCovSqrt_C2vgLQ4W(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1[3], real_T Y2[18], const real_T X1[3],
  real_T X2[18], real_T Ymean[3], real_T Sy[9], real_T Pxy[9])
{
 8005c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c34:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	f107 0414 	add.w	r4, r7, #20
 8005c3e:	6020      	str	r0, [r4, #0]
 8005c40:	f107 0010 	add.w	r0, r7, #16
 8005c44:	6001      	str	r1, [r0, #0]
 8005c46:	f107 0108 	add.w	r1, r7, #8
 8005c4a:	ed81 0b00 	vstr	d0, [r1]
 8005c4e:	1d39      	adds	r1, r7, #4
 8005c50:	600a      	str	r2, [r1, #0]
 8005c52:	463a      	mov	r2, r7
 8005c54:	6013      	str	r3, [r2, #0]
  int32_T i;
  int32_T iAcol;
  int32_T i_0;
  int32_T i_1;
  int32_T kk;
  Ymean[0] = Y1[0] * meanWeights[0];
 8005c56:	1d3b      	adds	r3, r7, #4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c5e:	f107 0314 	add.w	r3, r7, #20
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f7fa fcb8 	bl	80005dc <__aeabi_dmul>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005c74:	e9c1 2300 	strd	r2, r3, [r1]
  Ymean[1] = meanWeights[0] * Y1[1];
 8005c78:	f107 0314 	add.w	r3, r7, #20
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c82:	1d3b      	adds	r3, r7, #4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3308      	adds	r3, #8
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8005c90:	3408      	adds	r4, #8
 8005c92:	f7fa fca3 	bl	80005dc <__aeabi_dmul>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	e9c4 2300 	strd	r2, r3, [r4]
  Ymean[2] = meanWeights[0] * Y1[2];
 8005c9e:	f107 0314 	add.w	r3, r7, #20
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ca8:	1d3b      	adds	r3, r7, #4
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3310      	adds	r3, #16
 8005cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb2:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8005cb6:	3410      	adds	r4, #16
 8005cb8:	f7fa fc90 	bl	80005dc <__aeabi_dmul>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	e9c4 2300 	strd	r2, r3, [r4]
  iAcol = 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8005cd0:	e079      	b.n	8005dc6 <UTMeanCovSqrt_C2vgLQ4W+0x196>
    Ymean[0] += Y2[iAcol] * meanWeights[1];
 8005cd2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005cd6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005cda:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	463a      	mov	r2, r7
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cea:	f107 0314 	add.w	r3, r7, #20
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf6:	f7fa fc71 	bl	80005dc <__aeabi_dmul>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4620      	mov	r0, r4
 8005d00:	4629      	mov	r1, r5
 8005d02:	f7fa fab5 	bl	8000270 <__adddf3>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005d0e:	e9c1 2300 	strd	r2, r3, [r1]
    Ymean[1] += Y2[iAcol + 1] * meanWeights[1];
 8005d12:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d16:	3308      	adds	r3, #8
 8005d18:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005d1c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005d20:	3301      	adds	r3, #1
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	463a      	mov	r2, r7
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	4413      	add	r3, r2
 8005d2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d2e:	f107 0314 	add.w	r3, r7, #20
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3308      	adds	r3, #8
 8005d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3a:	f7fa fc4f 	bl	80005dc <__aeabi_dmul>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4610      	mov	r0, r2
 8005d44:	4619      	mov	r1, r3
 8005d46:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d4a:	f103 0608 	add.w	r6, r3, #8
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4620      	mov	r0, r4
 8005d54:	4629      	mov	r1, r5
 8005d56:	f7fa fa8b 	bl	8000270 <__adddf3>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	e9c6 2300 	strd	r2, r3, [r6]
    Ymean[2] += Y2[iAcol + 2] * meanWeights[1];
 8005d62:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d66:	3310      	adds	r3, #16
 8005d68:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005d6c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005d70:	3302      	adds	r3, #2
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	463a      	mov	r2, r7
 8005d76:	6812      	ldr	r2, [r2, #0]
 8005d78:	4413      	add	r3, r2
 8005d7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d7e:	f107 0314 	add.w	r3, r7, #20
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3308      	adds	r3, #8
 8005d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8a:	f7fa fc27 	bl	80005dc <__aeabi_dmul>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	4610      	mov	r0, r2
 8005d94:	4619      	mov	r1, r3
 8005d96:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d9a:	f103 0610 	add.w	r6, r3, #16
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4620      	mov	r0, r4
 8005da4:	4629      	mov	r1, r5
 8005da6:	f7fa fa63 	bl	8000270 <__adddf3>
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	e9c6 2300 	strd	r2, r3, [r6]
    iAcol += 3;
 8005db2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005db6:	3303      	adds	r3, #3
 8005db8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8005dbc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8005dc6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8005dca:	2b05      	cmp	r3, #5
 8005dcc:	dd81      	ble.n	8005cd2 <UTMeanCovSqrt_C2vgLQ4W+0xa2>
  }

  signOOM = Ymean[0] * OOM;
 8005dce:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f107 0108 	add.w	r1, r7, #8
 8005dda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dde:	f7fa fbfd 	bl	80005dc <__aeabi_dmul>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  scale = Y1[0] - signOOM;
 8005dea:	1d3b      	adds	r3, r7, #4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005df2:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8005df6:	f7fa fa39 	bl	800026c <__aeabi_dsub>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
  Ymean[0] = signOOM;
 8005e02:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005e06:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8005e0a:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[0] = scale;
 8005e0e:	1d3b      	adds	r3, r7, #4
 8005e10:	6819      	ldr	r1, [r3, #0]
 8005e12:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8005e16:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[1] * OOM;
 8005e1a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e1e:	3308      	adds	r3, #8
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	f107 0108 	add.w	r1, r7, #8
 8005e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e2c:	f7fa fbd6 	bl	80005dc <__aeabi_dmul>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  absxk = Y1[1] - signOOM;
 8005e38:	1d3b      	adds	r3, r7, #4
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e42:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8005e46:	f7fa fa11 	bl	800026c <__aeabi_dsub>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
  Ymean[1] = signOOM;
 8005e52:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e56:	f103 0108 	add.w	r1, r3, #8
 8005e5a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8005e5e:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[1] = absxk;
 8005e62:	1d3b      	adds	r3, r7, #4
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f103 0108 	add.w	r1, r3, #8
 8005e6a:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8005e6e:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[2] * OOM;
 8005e72:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e76:	3310      	adds	r3, #16
 8005e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7c:	f107 0108 	add.w	r1, r7, #8
 8005e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e84:	f7fa fbaa 	bl	80005dc <__aeabi_dmul>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  b_t = Y1[2] - signOOM;
 8005e90:	1d3b      	adds	r3, r7, #4
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3310      	adds	r3, #16
 8005e96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e9a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8005e9e:	f7fa f9e5 	bl	800026c <__aeabi_dsub>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
  Ymean[2] = signOOM;
 8005eaa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005eae:	f103 0110 	add.w	r1, r3, #16
 8005eb2:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8005eb6:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[2] = b_t;
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f103 0110 	add.w	r1, r3, #16
 8005ec2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8005ec6:	e9c1 2300 	strd	r2, r3, [r1]
  iAcol = 0;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8005ed6:	e054      	b.n	8005f82 <UTMeanCovSqrt_C2vgLQ4W+0x352>
    Y2[iAcol] -= Ymean[0];
 8005ed8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005edc:	00db      	lsls	r3, r3, #3
 8005ede:	463a      	mov	r2, r7
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ee8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8005ef4:	00e4      	lsls	r4, r4, #3
 8005ef6:	463d      	mov	r5, r7
 8005ef8:	682d      	ldr	r5, [r5, #0]
 8005efa:	442c      	add	r4, r5
 8005efc:	f7fa f9b6 	bl	800026c <__aeabi_dsub>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 1] -= Ymean[1];
 8005f08:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	463a      	mov	r2, r7
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	4413      	add	r3, r2
 8005f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f1a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005f1e:	3308      	adds	r3, #8
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8005f28:	3401      	adds	r4, #1
 8005f2a:	00e4      	lsls	r4, r4, #3
 8005f2c:	463d      	mov	r5, r7
 8005f2e:	682d      	ldr	r5, [r5, #0]
 8005f30:	442c      	add	r4, r5
 8005f32:	f7fa f99b 	bl	800026c <__aeabi_dsub>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 2] -= signOOM;
 8005f3e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005f42:	3302      	adds	r3, #2
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	463a      	mov	r2, r7
 8005f48:	6812      	ldr	r2, [r2, #0]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f50:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005f54:	3302      	adds	r3, #2
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	463a      	mov	r2, r7
 8005f5a:	6812      	ldr	r2, [r2, #0]
 8005f5c:	18d4      	adds	r4, r2, r3
 8005f5e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8005f62:	f7fa f983 	bl	800026c <__aeabi_dsub>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 8005f6e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005f72:	3303      	adds	r3, #3
 8005f74:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8005f78:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8005f82:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8005f86:	2b05      	cmp	r3, #5
 8005f88:	dda6      	ble.n	8005ed8 <UTMeanCovSqrt_C2vgLQ4W+0x2a8>
  }

  if (rtIsNaN(OOM)) {
 8005f8a:	f107 0308 	add.w	r3, r7, #8
 8005f8e:	ed93 0b00 	vldr	d0, [r3]
 8005f92:	f004 fbef 	bl	800a774 <rtIsNaN>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d006      	beq.n	8005faa <UTMeanCovSqrt_C2vgLQ4W+0x37a>
    signOOM = OOM;
 8005f9c:	f107 0308 	add.w	r3, r7, #8
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 8005fa8:	e029      	b.n	8005ffe <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else if (OOM < 0.0) {
 8005faa:	f107 0108 	add.w	r1, r7, #8
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	f04f 0300 	mov.w	r3, #0
 8005fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fba:	f7fa fd81 	bl	8000ac0 <__aeabi_dcmplt>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <UTMeanCovSqrt_C2vgLQ4W+0x3a0>
    signOOM = -1.0;
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	4bce      	ldr	r3, [pc, #824]	; (8006304 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 8005fca:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 8005fce:	e016      	b.n	8005ffe <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else {
    signOOM = (OOM > 0.0);
 8005fd0:	f107 0108 	add.w	r1, r7, #8
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fe0:	f7fa fd8c 	bl	8000afc <__aeabi_dcmpgt>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <UTMeanCovSqrt_C2vgLQ4W+0x3c2>
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	4bc6      	ldr	r3, [pc, #792]	; (8006308 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8005ff0:	e003      	b.n	8005ffa <UTMeanCovSqrt_C2vgLQ4W+0x3ca>
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  }

  covWeights_0 = signOOM * covWeights[0];
 8005ffe:	f107 0310 	add.w	r3, r7, #16
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 800600c:	f7fa fae6 	bl	80005dc <__aeabi_dmul>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
  covWeights_1 = signOOM * covWeights[1];
 8006018:	f107 0310 	add.w	r3, r7, #16
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3308      	adds	r3, #8
 8006020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006024:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8006028:	f7fa fad8 	bl	80005dc <__aeabi_dmul>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
  OOM *= signOOM;
 8006034:	f107 0408 	add.w	r4, r7, #8
 8006038:	f107 0108 	add.w	r1, r7, #8
 800603c:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8006040:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006044:	f7fa faca 	bl	80005dc <__aeabi_dmul>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	e9c4 2300 	strd	r2, r3, [r4]
  signOOM = sqrt(OOM);
 8006050:	f107 0308 	add.w	r3, r7, #8
 8006054:	ed93 0b00 	vldr	d0, [r3]
 8006058:	f00f ff30 	bl	8015ebc <sqrt>
 800605c:	ed87 0ba8 	vstr	d0, [r7, #672]	; 0x2a0
  temp = sqrt(covWeights_1);
 8006060:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 8006064:	f00f ff2a 	bl	8015ebc <sqrt>
 8006068:	eeb0 7a40 	vmov.f32	s14, s0
 800606c:	eef0 7a60 	vmov.f32	s15, s1
 8006070:	f107 0318 	add.w	r3, r7, #24
 8006074:	ed83 7b00 	vstr	d7, [r3]
  kk = 0;
 8006078:	2300      	movs	r3, #0
 800607a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 800607e:	2300      	movs	r3, #0
 8006080:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006084:	e03c      	b.n	8006100 <UTMeanCovSqrt_C2vgLQ4W+0x4d0>
    i_1 = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 800608c:	2300      	movs	r3, #0
 800608e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8006092:	e027      	b.n	80060e4 <UTMeanCovSqrt_C2vgLQ4W+0x4b4>
      temp_0[i + kk] = Y2[i_1 + iAcol] * temp;
 8006094:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8006098:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800609c:	4413      	add	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	463a      	mov	r2, r7
 80060a2:	6812      	ldr	r2, [r2, #0]
 80060a4:	4413      	add	r3, r2
 80060a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060aa:	f107 0318 	add.w	r3, r7, #24
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 80060b6:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 80060ba:	442c      	add	r4, r5
 80060bc:	f7fa fa8e 	bl	80005dc <__aeabi_dmul>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80060c8:	00e1      	lsls	r1, r4, #3
 80060ca:	4401      	add	r1, r0
 80060cc:	e9c1 2300 	strd	r2, r3, [r1]
      i_1 += 3;
 80060d0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80060d4:	3303      	adds	r3, #3
 80060d6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 80060da:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80060de:	3301      	adds	r3, #1
 80060e0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80060e4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80060e8:	2b05      	cmp	r3, #5
 80060ea:	ddd3      	ble.n	8006094 <UTMeanCovSqrt_C2vgLQ4W+0x464>
    }

    kk += 6;
 80060ec:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80060f0:	3306      	adds	r3, #6
 80060f2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 80060f6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80060fa:	3301      	adds	r3, #1
 80060fc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006100:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006104:	2b02      	cmp	r3, #2
 8006106:	ddbe      	ble.n	8006086 <UTMeanCovSqrt_C2vgLQ4W+0x456>
  }

  qr_DvOBrgQi(temp_0, a__1, Sy);
 8006108:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 800610c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006110:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006114:	4618      	mov	r0, r3
 8006116:	f002 ff43 	bl	8008fa0 <qr_DvOBrgQi>
  if (!rtIsNaN(covWeights_0)) {
 800611a:	ed97 0bac 	vldr	d0, [r7, #688]	; 0x2b0
 800611e:	f004 fb29 	bl	800a774 <rtIsNaN>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d125      	bne.n	8006174 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    if (covWeights_0 < 0.0) {
 8006128:	f04f 0200 	mov.w	r2, #0
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8006134:	f7fa fcc4 	bl	8000ac0 <__aeabi_dcmplt>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d005      	beq.n	800614a <UTMeanCovSqrt_C2vgLQ4W+0x51a>
      covWeights_0 = -1.0;
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	4b70      	ldr	r3, [pc, #448]	; (8006304 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 8006144:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 8006148:	e014      	b.n	8006174 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8006156:	f7fa fcd1 	bl	8000afc <__aeabi_dcmpgt>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <UTMeanCovSqrt_C2vgLQ4W+0x538>
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	4b68      	ldr	r3, [pc, #416]	; (8006308 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8006166:	e003      	b.n	8006170 <UTMeanCovSqrt_C2vgLQ4W+0x540>
 8006168:	f04f 0200 	mov.w	r2, #0
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    }
  }

  if (covWeights_0 == 1.0) {
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	4b63      	ldr	r3, [pc, #396]	; (8006308 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 800617a:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 800617e:	f7fa fc95 	bl	8000aac <__aeabi_dcmpeq>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 81bd 	beq.w	8006504 <UTMeanCovSqrt_C2vgLQ4W+0x8d4>
    for (iAcol = 0; iAcol < 2; iAcol++) {
 800618a:	2300      	movs	r3, #0
 800618c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006190:	e011      	b.n	80061b6 <UTMeanCovSqrt_C2vgLQ4W+0x586>
      Sy[iAcol + 1] = 0.0;
 8006192:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006196:	3301      	adds	r3, #1
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800619e:	18d1      	adds	r1, r2, r3
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	f04f 0300 	mov.w	r3, #0
 80061a8:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 80061ac:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80061b0:	3301      	adds	r3, #1
 80061b2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80061b6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	dde9      	ble.n	8006192 <UTMeanCovSqrt_C2vgLQ4W+0x562>
    }

    Sy[5] = 0.0;
 80061be:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80061c2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80061c6:	f04f 0200 	mov.w	r2, #0
 80061ca:	f04f 0300 	mov.w	r3, #0
 80061ce:	e9c1 2300 	strd	r2, r3, [r1]
    c[2] = 0.0;
 80061d2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	f04f 0300 	mov.w	r3, #0
 80061de:	e9c1 2304 	strd	r2, r3, [r1, #16]
    s[2] = 0.0;
 80061e2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	f04f 0300 	mov.w	r3, #0
 80061ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rotate_LZ7ctbe0(Sy[0], scale, &c[0], &s[0], &Sy[0]);
 80061f2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80061f6:	ed93 7b00 	vldr	d7, [r3]
 80061fa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80061fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006202:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006206:	4618      	mov	r0, r3
 8006208:	ed97 1baa 	vldr	d1, [r7, #680]	; 0x2a8
 800620c:	eeb0 0a47 	vmov.f32	s0, s14
 8006210:	eef0 0a67 	vmov.f32	s1, s15
 8006214:	f004 f814 	bl	800a240 <rotate_LZ7ctbe0>
    temp = c[0] * absxk - s[0] * Sy[3];
 8006218:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800621c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006220:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006224:	f7fa f9da 	bl	80005dc <__aeabi_dmul>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4614      	mov	r4, r2
 800622e:	461d      	mov	r5, r3
 8006230:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006238:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800623c:	3318      	adds	r3, #24
 800623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006242:	f7fa f9cb 	bl	80005dc <__aeabi_dmul>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4620      	mov	r0, r4
 800624c:	4629      	mov	r1, r5
 800624e:	f7fa f80d 	bl	800026c <__aeabi_dsub>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	f107 0118 	add.w	r1, r7, #24
 800625a:	e9c1 2300 	strd	r2, r3, [r1]
    Sy[3] = c[0] * Sy[3] + s[0] * absxk;
 800625e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006262:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006266:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800626a:	3318      	adds	r3, #24
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	f7fa f9b4 	bl	80005dc <__aeabi_dmul>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4690      	mov	r8, r2
 800627a:	4699      	mov	r9, r3
 800627c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006280:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006284:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006288:	f7fa f9a8 	bl	80005dc <__aeabi_dmul>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4610      	mov	r0, r2
 8006292:	4619      	mov	r1, r3
 8006294:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006298:	f103 0418 	add.w	r4, r3, #24
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4640      	mov	r0, r8
 80062a2:	4649      	mov	r1, r9
 80062a4:	f7f9 ffe4 	bl	8000270 <__adddf3>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	e9c4 2300 	strd	r2, r3, [r4]
    rotate_LZ7ctbe0(Sy[4], temp, &c[1], &s[1], &Sy[4]);
 80062b0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80062b4:	3320      	adds	r3, #32
 80062b6:	ed93 7b00 	vldr	d7, [r3]
 80062ba:	f107 0318 	add.w	r3, r7, #24
 80062be:	ed93 6b00 	vldr	d6, [r3]
 80062c2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80062c6:	f103 0220 	add.w	r2, r3, #32
 80062ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80062ce:	f103 0108 	add.w	r1, r3, #8
 80062d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80062d6:	3308      	adds	r3, #8
 80062d8:	4618      	mov	r0, r3
 80062da:	eeb0 1a46 	vmov.f32	s2, s12
 80062de:	eef0 1a66 	vmov.f32	s3, s13
 80062e2:	eeb0 0a47 	vmov.f32	s0, s14
 80062e6:	eef0 0a67 	vmov.f32	s1, s15
 80062ea:	f003 ffa9 	bl	800a240 <rotate_LZ7ctbe0>
    temp = b_t;
 80062ee:	f107 0118 	add.w	r1, r7, #24
 80062f2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80062f6:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 80062fa:	2300      	movs	r3, #0
 80062fc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006300:	e06f      	b.n	80063e2 <UTMeanCovSqrt_C2vgLQ4W+0x7b2>
 8006302:	bf00      	nop
 8006304:	bff00000 	.word	0xbff00000
 8006308:	3ff00000 	.word	0x3ff00000
      scale = s[iAcol] * temp;
 800630c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006310:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	4413      	add	r3, r2
 8006318:	e9d3 0100 	ldrd	r0, r1, [r3]
 800631c:	f107 0318 	add.w	r3, r7, #24
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f7fa f95a 	bl	80005dc <__aeabi_dmul>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = Sy[iAcol + 6];
 8006330:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006334:	3306      	adds	r3, #6
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800633c:	4413      	add	r3, r2
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
      temp = c[iAcol] * temp - absxk * s[iAcol];
 8006346:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800634a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	4413      	add	r3, r2
 8006352:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006356:	f107 0318 	add.w	r3, r7, #24
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	f7fa f93d 	bl	80005dc <__aeabi_dmul>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	4614      	mov	r4, r2
 8006368:	461d      	mov	r5, r3
 800636a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800636e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	4413      	add	r3, r2
 8006376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800637a:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800637e:	f7fa f92d 	bl	80005dc <__aeabi_dmul>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4620      	mov	r0, r4
 8006388:	4629      	mov	r1, r5
 800638a:	f7f9 ff6f 	bl	800026c <__aeabi_dsub>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	f107 0118 	add.w	r1, r7, #24
 8006396:	e9c1 2300 	strd	r2, r3, [r1]
      Sy[iAcol + 6] = absxk * c[iAcol] + scale;
 800639a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800639e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	4413      	add	r3, r2
 80063a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063aa:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80063ae:	f7fa f915 	bl	80005dc <__aeabi_dmul>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	4610      	mov	r0, r2
 80063b8:	4619      	mov	r1, r3
 80063ba:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80063be:	3306      	adds	r3, #6
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80063c6:	18d4      	adds	r4, r2, r3
 80063c8:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80063cc:	f7f9 ff50 	bl	8000270 <__adddf3>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	e9c4 2300 	strd	r2, r3, [r4]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 80063d8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80063dc:	3301      	adds	r3, #1
 80063de:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80063e2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	dd90      	ble.n	800630c <UTMeanCovSqrt_C2vgLQ4W+0x6dc>
    }

    rotate_LZ7ctbe0(Sy[8], temp, &c[2], &s[2], &Sy[8]);
 80063ea:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80063ee:	3340      	adds	r3, #64	; 0x40
 80063f0:	ed93 7b00 	vldr	d7, [r3]
 80063f4:	f107 0318 	add.w	r3, r7, #24
 80063f8:	ed93 6b00 	vldr	d6, [r3]
 80063fc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006400:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006404:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006408:	f103 0110 	add.w	r1, r3, #16
 800640c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006410:	3310      	adds	r3, #16
 8006412:	4618      	mov	r0, r3
 8006414:	eeb0 1a46 	vmov.f32	s2, s12
 8006418:	eef0 1a66 	vmov.f32	s3, s13
 800641c:	eeb0 0a47 	vmov.f32	s0, s14
 8006420:	eef0 0a67 	vmov.f32	s1, s15
 8006424:	f003 ff0c 	bl	800a240 <rotate_LZ7ctbe0>
    kk = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 800642e:	2300      	movs	r3, #0
 8006430:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006434:	e03d      	b.n	80064b2 <UTMeanCovSqrt_C2vgLQ4W+0x882>
      Sy_0[kk] = Sy[iAcol];
 8006436:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006440:	4413      	add	r3, r2
 8006442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006446:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800644a:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 800644e:	00c9      	lsls	r1, r1, #3
 8006450:	4401      	add	r1, r0
 8006452:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 8006456:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800645a:	3303      	adds	r3, #3
 800645c:	00db      	lsls	r3, r3, #3
 800645e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006462:	4413      	add	r3, r2
 8006464:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8006468:	1c51      	adds	r1, r2, #1
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006472:	00c9      	lsls	r1, r1, #3
 8006474:	4401      	add	r1, r0
 8006476:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 800647a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800647e:	3306      	adds	r3, #6
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006486:	4413      	add	r3, r2
 8006488:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 800648c:	1c91      	adds	r1, r2, #2
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006496:	00c9      	lsls	r1, r1, #3
 8006498:	4401      	add	r1, r0
 800649a:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 800649e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80064a2:	3303      	adds	r3, #3
 80064a4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80064a8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80064ac:	3301      	adds	r3, #1
 80064ae:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80064b2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	ddbd      	ble.n	8006436 <UTMeanCovSqrt_C2vgLQ4W+0x806>
    }

    for (kk = 0; kk < 9; kk++) {
 80064ba:	2300      	movs	r3, #0
 80064bc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80064c0:	e01a      	b.n	80064f8 <UTMeanCovSqrt_C2vgLQ4W+0x8c8>
      Sy[kk] = signOOM * Sy_0[kk];
 80064c2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80064c6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	4413      	add	r3, r2
 80064ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064d2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80064dc:	18d4      	adds	r4, r2, r3
 80064de:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80064e2:	f7fa f87b 	bl	80005dc <__aeabi_dmul>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 80064ee:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80064f2:	3301      	adds	r3, #1
 80064f4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80064f8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	dde0      	ble.n	80064c2 <UTMeanCovSqrt_C2vgLQ4W+0x892>
 8006500:	f000 bf6e 	b.w	80073e0 <UTMeanCovSqrt_C2vgLQ4W+0x17b0>
    }
  } else {
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8006504:	2300      	movs	r3, #0
 8006506:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    for (iAcol = 0; iAcol < 2; iAcol++) {
 800650a:	2300      	movs	r3, #0
 800650c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006510:	e011      	b.n	8006536 <UTMeanCovSqrt_C2vgLQ4W+0x906>
      Sy[iAcol + 1] = 0.0;
 8006512:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006516:	3301      	adds	r3, #1
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800651e:	18d1      	adds	r1, r2, r3
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 800652c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006530:	3301      	adds	r3, #1
 8006532:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006536:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800653a:	2b01      	cmp	r3, #1
 800653c:	dde9      	ble.n	8006512 <UTMeanCovSqrt_C2vgLQ4W+0x8e2>
    }

    Sy[5] = 0.0;
 800653e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006542:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	e9c1 2300 	strd	r2, r3, [r1]
    errorCondition = (Sy[0] == 0.0);
 8006552:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006556:	e9d3 0100 	ldrd	r0, r1, [r3]
 800655a:	2301      	movs	r3, #1
 800655c:	461c      	mov	r4, r3
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	f7fa faa1 	bl	8000aac <__aeabi_dcmpeq>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <UTMeanCovSqrt_C2vgLQ4W+0x944>
 8006570:	2300      	movs	r3, #0
 8006572:	461c      	mov	r4, r3
 8006574:	b2e3      	uxtb	r3, r4
 8006576:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if (!errorCondition) {
 800657a:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800657e:	2b00      	cmp	r3, #0
 8006580:	d114      	bne.n	80065ac <UTMeanCovSqrt_C2vgLQ4W+0x97c>
      errorCondition = (Sy[4] == 0.0);
 8006582:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006586:	3320      	adds	r3, #32
 8006588:	e9d3 0100 	ldrd	r0, r1, [r3]
 800658c:	2301      	movs	r3, #1
 800658e:	461c      	mov	r4, r3
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	f04f 0300 	mov.w	r3, #0
 8006598:	f7fa fa88 	bl	8000aac <__aeabi_dcmpeq>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <UTMeanCovSqrt_C2vgLQ4W+0x976>
 80065a2:	2300      	movs	r3, #0
 80065a4:	461c      	mov	r4, r3
 80065a6:	b2e3      	uxtb	r3, r4
 80065a8:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    if (!errorCondition) {
 80065ac:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d114      	bne.n	80065de <UTMeanCovSqrt_C2vgLQ4W+0x9ae>
      errorCondition = (Sy[8] == 0.0);
 80065b4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80065b8:	3340      	adds	r3, #64	; 0x40
 80065ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065be:	2301      	movs	r3, #1
 80065c0:	461c      	mov	r4, r3
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	f04f 0300 	mov.w	r3, #0
 80065ca:	f7fa fa6f 	bl	8000aac <__aeabi_dcmpeq>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <UTMeanCovSqrt_C2vgLQ4W+0x9a8>
 80065d4:	2300      	movs	r3, #0
 80065d6:	461c      	mov	r4, r3
 80065d8:	b2e3      	uxtb	r3, r4
 80065da:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    guard1 = false;
 80065de:	2300      	movs	r3, #0
 80065e0:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    if (errorCondition) {
 80065e4:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <UTMeanCovSqrt_C2vgLQ4W+0x9c4>
      guard1 = true;
 80065ec:	2301      	movs	r3, #1
 80065ee:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 80065f2:	e394      	b.n	8006d1e <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
    } else {
      x[2] = b_t;
 80065f4:	f107 0120 	add.w	r1, r7, #32
 80065f8:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80065fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
      x[0] = scale / Sy[0];
 8006600:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 800660c:	f7fa f910 	bl	8000830 <__aeabi_ddiv>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	f107 0120 	add.w	r1, r7, #32
 8006618:	e9c1 2300 	strd	r2, r3, [r1]
      x[1] = (absxk - x[0] * Sy[3]) / Sy[4];
 800661c:	f107 0320 	add.w	r3, r7, #32
 8006620:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006624:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006628:	3318      	adds	r3, #24
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	f7f9 ffd5 	bl	80005dc <__aeabi_dmul>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800663a:	f7f9 fe17 	bl	800026c <__aeabi_dsub>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	4610      	mov	r0, r2
 8006644:	4619      	mov	r1, r3
 8006646:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800664a:	3320      	adds	r3, #32
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	f7fa f8ee 	bl	8000830 <__aeabi_ddiv>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	f107 0120 	add.w	r1, r7, #32
 800665c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = b_t;
 8006660:	f107 0118 	add.w	r1, r7, #24
 8006664:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8006668:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 800666c:	2300      	movs	r3, #0
 800666e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006672:	e027      	b.n	80066c4 <UTMeanCovSqrt_C2vgLQ4W+0xa94>
        temp -= Sy[kk + 6] * x[kk];
 8006674:	f107 0318 	add.w	r3, r7, #24
 8006678:	e9d3 4500 	ldrd	r4, r5, [r3]
 800667c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006680:	3306      	adds	r3, #6
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006688:	4413      	add	r3, r2
 800668a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800668e:	f107 0220 	add.w	r2, r7, #32
 8006692:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	4413      	add	r3, r2
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	f7f9 ff9d 	bl	80005dc <__aeabi_dmul>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4620      	mov	r0, r4
 80066a8:	4629      	mov	r1, r5
 80066aa:	f7f9 fddf 	bl	800026c <__aeabi_dsub>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	f107 0118 	add.w	r1, r7, #24
 80066b6:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 80066ba:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80066be:	3301      	adds	r3, #1
 80066c0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80066c4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	ddd3      	ble.n	8006674 <UTMeanCovSqrt_C2vgLQ4W+0xa44>
      }

      x[2] = temp / Sy[8];
 80066cc:	f107 0318 	add.w	r3, r7, #24
 80066d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066d4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80066d8:	3340      	adds	r3, #64	; 0x40
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	f7fa f8a7 	bl	8000830 <__aeabi_ddiv>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	f107 0120 	add.w	r1, r7, #32
 80066ea:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80066f6:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = fabs(x[0]);
 80066fa:	f107 0320 	add.w	r3, r7, #32
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	4611      	mov	r1, r2
 8006704:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8006708:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800670c:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > 3.3121686421112381E-170) {
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8006718:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800671c:	f7fa f9ee 	bl	8000afc <__aeabi_dcmpgt>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00b      	beq.n	800673e <UTMeanCovSqrt_C2vgLQ4W+0xb0e>
        temp = 1.0;
 8006726:	f107 0118 	add.w	r1, r7, #24
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	4b85      	ldr	r3, [pc, #532]	; (8006944 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8006730:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8006734:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006738:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 800673c:	e017      	b.n	800676e <UTMeanCovSqrt_C2vgLQ4W+0xb3e>
      } else {
        b_t = absxk / 3.3121686421112381E-170;
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8006746:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800674a:	f7fa f871 	bl	8000830 <__aeabi_ddiv>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = b_t * b_t;
 8006756:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800675a:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 800675e:	f7f9 ff3d 	bl	80005dc <__aeabi_dmul>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	f107 0118 	add.w	r1, r7, #24
 800676a:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[1]);
 800676e:	f107 0320 	add.w	r3, r7, #32
 8006772:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006776:	4611      	mov	r1, r2
 8006778:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800677c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006780:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 8006784:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8006788:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800678c:	f7fa f9b6 	bl	8000afc <__aeabi_dcmpgt>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d02d      	beq.n	80067f2 <UTMeanCovSqrt_C2vgLQ4W+0xbc2>
        b_t = scale / absxk;
 8006796:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800679a:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 800679e:	f7fa f847 	bl	8000830 <__aeabi_ddiv>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 80067aa:	f107 0318 	add.w	r3, r7, #24
 80067ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067b2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80067b6:	f7f9 ff11 	bl	80005dc <__aeabi_dmul>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4610      	mov	r0, r2
 80067c0:	4619      	mov	r1, r3
 80067c2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80067c6:	f7f9 ff09 	bl	80005dc <__aeabi_dmul>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	4610      	mov	r0, r2
 80067d0:	4619      	mov	r1, r3
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	4b5b      	ldr	r3, [pc, #364]	; (8006944 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 80067d8:	f7f9 fd4a 	bl	8000270 <__adddf3>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	f107 0118 	add.w	r1, r7, #24
 80067e4:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80067e8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80067ec:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 80067f0:	e01f      	b.n	8006832 <UTMeanCovSqrt_C2vgLQ4W+0xc02>
      } else {
        b_t = absxk / scale;
 80067f2:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80067f6:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80067fa:	f7fa f819 	bl	8000830 <__aeabi_ddiv>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 8006806:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800680a:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 800680e:	f7f9 fee5 	bl	80005dc <__aeabi_dmul>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	4610      	mov	r0, r2
 8006818:	4619      	mov	r1, r3
 800681a:	f107 0318 	add.w	r3, r7, #24
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	f7f9 fd25 	bl	8000270 <__adddf3>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	f107 0118 	add.w	r1, r7, #24
 800682e:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[2]);
 8006832:	f107 0320 	add.w	r3, r7, #32
 8006836:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800683a:	4611      	mov	r1, r2
 800683c:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8006840:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006844:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 8006848:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800684c:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8006850:	f7fa f954 	bl	8000afc <__aeabi_dcmpgt>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d02d      	beq.n	80068b6 <UTMeanCovSqrt_C2vgLQ4W+0xc86>
        b_t = scale / absxk;
 800685a:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800685e:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 8006862:	f7f9 ffe5 	bl	8000830 <__aeabi_ddiv>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 800686e:	f107 0318 	add.w	r3, r7, #24
 8006872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006876:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800687a:	f7f9 feaf 	bl	80005dc <__aeabi_dmul>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4610      	mov	r0, r2
 8006884:	4619      	mov	r1, r3
 8006886:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800688a:	f7f9 fea7 	bl	80005dc <__aeabi_dmul>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4610      	mov	r0, r2
 8006894:	4619      	mov	r1, r3
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	4b2a      	ldr	r3, [pc, #168]	; (8006944 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 800689c:	f7f9 fce8 	bl	8000270 <__adddf3>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	f107 0118 	add.w	r1, r7, #24
 80068a8:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80068ac:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80068b0:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 80068b4:	e01f      	b.n	80068f6 <UTMeanCovSqrt_C2vgLQ4W+0xcc6>
      } else {
        b_t = absxk / scale;
 80068b6:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80068ba:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80068be:	f7f9 ffb7 	bl	8000830 <__aeabi_ddiv>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 80068ca:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80068ce:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 80068d2:	f7f9 fe83 	bl	80005dc <__aeabi_dmul>
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	4610      	mov	r0, r2
 80068dc:	4619      	mov	r1, r3
 80068de:	f107 0318 	add.w	r3, r7, #24
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	f7f9 fcc3 	bl	8000270 <__adddf3>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	f107 0118 	add.w	r1, r7, #24
 80068f2:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 80068f6:	f107 0318 	add.w	r3, r7, #24
 80068fa:	ed93 7b00 	vldr	d7, [r3]
 80068fe:	eeb0 0a47 	vmov.f32	s0, s14
 8006902:	eef0 0a67 	vmov.f32	s1, s15
 8006906:	f00f fad9 	bl	8015ebc <sqrt>
 800690a:	ec51 0b10 	vmov	r0, r1, d0
 800690e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8006912:	f7f9 fe63 	bl	80005dc <__aeabi_dmul>
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	f107 0118 	add.w	r1, r7, #24
 800691e:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 8006922:	f107 0318 	add.w	r3, r7, #24
 8006926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8006930:	f7fa f8da 	bl	8000ae8 <__aeabi_dcmpge>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d006      	beq.n	8006948 <UTMeanCovSqrt_C2vgLQ4W+0xd18>
        guard1 = true;
 800693a:	2301      	movs	r3, #1
 800693c:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 8006940:	e1ed      	b.n	8006d1e <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
 8006942:	bf00      	nop
 8006944:	3ff00000 	.word	0x3ff00000
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), x[2], &c[2], &s[2], &temp);
 8006948:	f107 0318 	add.w	r3, r7, #24
 800694c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006950:	f107 0318 	add.w	r3, r7, #24
 8006954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006958:	f7f9 fe40 	bl	80005dc <__aeabi_dmul>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	f04f 0000 	mov.w	r0, #0
 8006964:	49b4      	ldr	r1, [pc, #720]	; (8006c38 <UTMeanCovSqrt_C2vgLQ4W+0x1008>)
 8006966:	f7f9 fc81 	bl	800026c <__aeabi_dsub>
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	ec43 2b17 	vmov	d7, r2, r3
 8006972:	eeb0 0a47 	vmov.f32	s0, s14
 8006976:	eef0 0a67 	vmov.f32	s1, s15
 800697a:	f00f fa9f 	bl	8015ebc <sqrt>
 800697e:	eeb0 6a40 	vmov.f32	s12, s0
 8006982:	eef0 6a60 	vmov.f32	s13, s1
 8006986:	f107 0320 	add.w	r3, r7, #32
 800698a:	ed93 7b04 	vldr	d7, [r3, #16]
 800698e:	f107 0218 	add.w	r2, r7, #24
 8006992:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006996:	f103 0110 	add.w	r1, r3, #16
 800699a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800699e:	3310      	adds	r3, #16
 80069a0:	4618      	mov	r0, r3
 80069a2:	eeb0 1a47 	vmov.f32	s2, s14
 80069a6:	eef0 1a67 	vmov.f32	s3, s15
 80069aa:	eeb0 0a46 	vmov.f32	s0, s12
 80069ae:	eef0 0a66 	vmov.f32	s1, s13
 80069b2:	f003 fc45 	bl	800a240 <rotate_LZ7ctbe0>
        x[2] = 0.0;
 80069b6:	f107 0120 	add.w	r1, r7, #32
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	f04f 0300 	mov.w	r3, #0
 80069c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, x[1], &c[1], &s[1], &temp);
 80069c6:	f107 0318 	add.w	r3, r7, #24
 80069ca:	ed93 7b00 	vldr	d7, [r3]
 80069ce:	f107 0320 	add.w	r3, r7, #32
 80069d2:	ed93 6b02 	vldr	d6, [r3, #8]
 80069d6:	f107 0218 	add.w	r2, r7, #24
 80069da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80069de:	f103 0108 	add.w	r1, r3, #8
 80069e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80069e6:	3308      	adds	r3, #8
 80069e8:	4618      	mov	r0, r3
 80069ea:	eeb0 1a46 	vmov.f32	s2, s12
 80069ee:	eef0 1a66 	vmov.f32	s3, s13
 80069f2:	eeb0 0a47 	vmov.f32	s0, s14
 80069f6:	eef0 0a67 	vmov.f32	s1, s15
 80069fa:	f003 fc21 	bl	800a240 <rotate_LZ7ctbe0>
        x[1] = 0.0;
 80069fe:	f107 0120 	add.w	r1, r7, #32
 8006a02:	f04f 0200 	mov.w	r2, #0
 8006a06:	f04f 0300 	mov.w	r3, #0
 8006a0a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, x[0], &c[0], &s[0], &temp);
 8006a0e:	f107 0318 	add.w	r3, r7, #24
 8006a12:	ed93 7b00 	vldr	d7, [r3]
 8006a16:	f107 0320 	add.w	r3, r7, #32
 8006a1a:	ed93 6b00 	vldr	d6, [r3]
 8006a1e:	f107 0218 	add.w	r2, r7, #24
 8006a22:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006a26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	eeb0 1a46 	vmov.f32	s2, s12
 8006a30:	eef0 1a66 	vmov.f32	s3, s13
 8006a34:	eeb0 0a47 	vmov.f32	s0, s14
 8006a38:	eef0 0a67 	vmov.f32	s1, s15
 8006a3c:	f003 fc00 	bl	800a240 <rotate_LZ7ctbe0>
        x[0] = 0.0;
 8006a40:	f107 0120 	add.w	r1, r7, #32
 8006a44:	f04f 0200 	mov.w	r2, #0
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 8006a50:	2300      	movs	r3, #0
 8006a52:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006a56:	e072      	b.n	8006b3e <UTMeanCovSqrt_C2vgLQ4W+0xf0e>
          temp = s[iAcol] * Sy[iAcol];
 8006a58:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a5c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	4413      	add	r3, r2
 8006a64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a68:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006a6c:	00db      	lsls	r3, r3, #3
 8006a6e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006a72:	4413      	add	r3, r2
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	f7f9 fdb0 	bl	80005dc <__aeabi_dmul>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	f107 0118 	add.w	r1, r7, #24
 8006a84:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[iAcol] = c[iAcol] * Sy[iAcol] - s[iAcol] * x[0];
 8006a88:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a8c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006a90:	00db      	lsls	r3, r3, #3
 8006a92:	4413      	add	r3, r2
 8006a94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a98:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006aa2:	4413      	add	r3, r2
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	f7f9 fd98 	bl	80005dc <__aeabi_dmul>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4690      	mov	r8, r2
 8006ab2:	4699      	mov	r9, r3
 8006ab4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006ab8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006abc:	00db      	lsls	r3, r3, #3
 8006abe:	4413      	add	r3, r2
 8006ac0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ac4:	f107 0320 	add.w	r3, r7, #32
 8006ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006acc:	f7f9 fd86 	bl	80005dc <__aeabi_dmul>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006ae2:	18d4      	adds	r4, r2, r3
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4640      	mov	r0, r8
 8006aea:	4649      	mov	r1, r9
 8006aec:	f7f9 fbbe 	bl	800026c <__aeabi_dsub>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	e9c4 2300 	strd	r2, r3, [r4]
          x[0] = c[iAcol] * x[0] + temp;
 8006af8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006afc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	4413      	add	r3, r2
 8006b04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b08:	f107 0320 	add.w	r3, r7, #32
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f7f9 fd64 	bl	80005dc <__aeabi_dmul>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4610      	mov	r0, r2
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	f107 0318 	add.w	r3, r7, #24
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f7f9 fba4 	bl	8000270 <__adddf3>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	f107 0120 	add.w	r1, r7, #32
 8006b30:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 8006b34:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006b3e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	da88      	bge.n	8006a58 <UTMeanCovSqrt_C2vgLQ4W+0xe28>
        }

        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 8006b46:	2301      	movs	r3, #1
 8006b48:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006b4c:	e06c      	b.n	8006c28 <UTMeanCovSqrt_C2vgLQ4W+0xff8>
          absxk = Sy[iAcol + 3];
 8006b4e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006b52:	3303      	adds	r3, #3
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006b5a:	4413      	add	r3, r2
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 3] = absxk * c[iAcol] - s[iAcol] * x[1];
 8006b64:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b68:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	4413      	add	r3, r2
 8006b70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b74:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006b78:	f7f9 fd30 	bl	80005dc <__aeabi_dmul>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4690      	mov	r8, r2
 8006b82:	4699      	mov	r9, r3
 8006b84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006b88:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	4413      	add	r3, r2
 8006b90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b94:	f107 0320 	add.w	r3, r7, #32
 8006b98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006b9c:	f7f9 fd1e 	bl	80005dc <__aeabi_dmul>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006bac:	3303      	adds	r3, #3
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006bb4:	18d4      	adds	r4, r2, r3
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4640      	mov	r0, r8
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	f7f9 fb55 	bl	800026c <__aeabi_dsub>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	e9c4 2300 	strd	r2, r3, [r4]
          x[1] = c[iAcol] * x[1] + absxk * s[iAcol];
 8006bca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006bce:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	4413      	add	r3, r2
 8006bd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bda:	f107 0320 	add.w	r3, r7, #32
 8006bde:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006be2:	f7f9 fcfb 	bl	80005dc <__aeabi_dmul>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	4614      	mov	r4, r2
 8006bec:	461d      	mov	r5, r3
 8006bee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006bf2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	4413      	add	r3, r2
 8006bfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bfe:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006c02:	f7f9 fceb 	bl	80005dc <__aeabi_dmul>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	f7f9 fb2f 	bl	8000270 <__adddf3>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	f107 0120 	add.w	r1, r7, #32
 8006c1a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 8006c1e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006c22:	3b01      	subs	r3, #1
 8006c24:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006c28:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	da8e      	bge.n	8006b4e <UTMeanCovSqrt_C2vgLQ4W+0xf1e>
        }

        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 8006c30:	2302      	movs	r3, #2
 8006c32:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006c36:	e06e      	b.n	8006d16 <UTMeanCovSqrt_C2vgLQ4W+0x10e6>
 8006c38:	3ff00000 	.word	0x3ff00000
          absxk = Sy[iAcol + 6];
 8006c3c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006c40:	3306      	adds	r3, #6
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006c48:	4413      	add	r3, r2
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 6] = absxk * c[iAcol] - s[iAcol] * x[2];
 8006c52:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c56:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	4413      	add	r3, r2
 8006c5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c62:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006c66:	f7f9 fcb9 	bl	80005dc <__aeabi_dmul>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4690      	mov	r8, r2
 8006c70:	4699      	mov	r9, r3
 8006c72:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c76:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	4413      	add	r3, r2
 8006c7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c82:	f107 0320 	add.w	r3, r7, #32
 8006c86:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006c8a:	f7f9 fca7 	bl	80005dc <__aeabi_dmul>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4610      	mov	r0, r2
 8006c94:	4619      	mov	r1, r3
 8006c96:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006c9a:	3306      	adds	r3, #6
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006ca2:	18d4      	adds	r4, r2, r3
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4640      	mov	r0, r8
 8006caa:	4649      	mov	r1, r9
 8006cac:	f7f9 fade 	bl	800026c <__aeabi_dsub>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	e9c4 2300 	strd	r2, r3, [r4]
          x[2] = c[iAcol] * x[2] + absxk * s[iAcol];
 8006cb8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006cbc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006cc0:	00db      	lsls	r3, r3, #3
 8006cc2:	4413      	add	r3, r2
 8006cc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cc8:	f107 0320 	add.w	r3, r7, #32
 8006ccc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006cd0:	f7f9 fc84 	bl	80005dc <__aeabi_dmul>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4614      	mov	r4, r2
 8006cda:	461d      	mov	r5, r3
 8006cdc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006ce0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006ce4:	00db      	lsls	r3, r3, #3
 8006ce6:	4413      	add	r3, r2
 8006ce8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cec:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006cf0:	f7f9 fc74 	bl	80005dc <__aeabi_dmul>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	f7f9 fab8 	bl	8000270 <__adddf3>
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	f107 0120 	add.w	r1, r7, #32
 8006d08:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 8006d0c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006d10:	3b01      	subs	r3, #1
 8006d12:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006d16:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	da8e      	bge.n	8006c3c <UTMeanCovSqrt_C2vgLQ4W+0x100c>
        }
      }
    }

    if (guard1) {
 8006d1e:	f897 328a 	ldrb.w	r3, [r7, #650]	; 0x28a
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 82f0 	beq.w	8007308 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
      boolean_T exitg2;
      kk = 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006d34:	e0d3      	b.n	8006ede <UTMeanCovSqrt_C2vgLQ4W+0x12ae>
        i_1 = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8006d42:	e0bd      	b.n	8006ec0 <UTMeanCovSqrt_C2vgLQ4W+0x1290>
          Sy_tmp = i_1 + iAcol;
 8006d44:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8006d48:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy_0[Sy_tmp] = 0.0;
 8006d52:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006d56:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	18d1      	adds	r1, r2, r3
 8006d5e:	f04f 0200 	mov.w	r2, #0
 8006d62:	f04f 0300 	mov.w	r3, #0
 8006d66:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk] * Sy[i_1];
 8006d6a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006d6e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	4413      	add	r3, r2
 8006d76:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006d7a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006d84:	4413      	add	r3, r2
 8006d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d8a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006d94:	4413      	add	r3, r2
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	f7f9 fc1f 	bl	80005dc <__aeabi_dmul>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4620      	mov	r0, r4
 8006da4:	4629      	mov	r1, r5
 8006da6:	f7f9 fa63 	bl	8000270 <__adddf3>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006db2:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8006db6:	00c9      	lsls	r1, r1, #3
 8006db8:	4401      	add	r1, r0
 8006dba:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 1] * Sy[i_1 + 1];
 8006dbe:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006dc2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	4413      	add	r3, r2
 8006dca:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006dce:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006dda:	4413      	add	r3, r2
 8006ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006de0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8006de4:	3301      	adds	r3, #1
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006dec:	4413      	add	r3, r2
 8006dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df2:	f7f9 fbf3 	bl	80005dc <__aeabi_dmul>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	f7f9 fa37 	bl	8000270 <__adddf3>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006e0a:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8006e0e:	00c9      	lsls	r1, r1, #3
 8006e10:	4401      	add	r1, r0
 8006e12:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 2] * Sy[i_1 + 2];
 8006e16:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006e1a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	4413      	add	r3, r2
 8006e22:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006e26:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006e2a:	3302      	adds	r3, #2
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006e32:	4413      	add	r3, r2
 8006e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e38:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8006e3c:	3302      	adds	r3, #2
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006e44:	4413      	add	r3, r2
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	f7f9 fbc7 	bl	80005dc <__aeabi_dmul>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	4620      	mov	r0, r4
 8006e54:	4629      	mov	r1, r5
 8006e56:	f7f9 fa0b 	bl	8000270 <__adddf3>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006e62:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8006e66:	00c9      	lsls	r1, r1, #3
 8006e68:	4401      	add	r1, r0
 8006e6a:	e9c1 2300 	strd	r2, r3, [r1]
          Y1_0[i + kk] = Y1[i] * Y1[iAcol];
 8006e6e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	1d3a      	adds	r2, r7, #4
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	4413      	add	r3, r2
 8006e7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e7e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	1d3a      	adds	r2, r7, #4
 8006e86:	6812      	ldr	r2, [r2, #0]
 8006e88:	4413      	add	r3, r2
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 8006e92:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 8006e96:	442c      	add	r4, r5
 8006e98:	f7f9 fba0 	bl	80005dc <__aeabi_dmul>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8006ea4:	00e1      	lsls	r1, r4, #3
 8006ea6:	4401      	add	r1, r0
 8006ea8:	e9c1 2300 	strd	r2, r3, [r1]
          i_1 += 3;
 8006eac:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8006eb0:	3303      	adds	r3, #3
 8006eb2:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8006eb6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8006eba:	3301      	adds	r3, #1
 8006ebc:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8006ec0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	f77f af3d 	ble.w	8006d44 <UTMeanCovSqrt_C2vgLQ4W+0x1114>
        }

        kk += 3;
 8006eca:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006ece:	3303      	adds	r3, #3
 8006ed0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8006ed4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006ed8:	3301      	adds	r3, #1
 8006eda:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006ede:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	f77f af27 	ble.w	8006d36 <UTMeanCovSqrt_C2vgLQ4W+0x1106>
      }

      errorCondition = true;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006ef4:	e049      	b.n	8006f8a <UTMeanCovSqrt_C2vgLQ4W+0x135a>
        temp = Sy_0[iAcol] - Y1_0[iAcol];
 8006ef6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006efa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	4413      	add	r3, r2
 8006f02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f06:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8006f0a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	4413      	add	r3, r2
 8006f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f16:	f7f9 f9a9 	bl	800026c <__aeabi_dsub>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	f107 0118 	add.w	r1, r7, #24
 8006f22:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 8006f26:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d01c      	beq.n	8006f68 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
 8006f2e:	f107 0318 	add.w	r3, r7, #24
 8006f32:	ed93 7b00 	vldr	d7, [r3]
 8006f36:	eeb0 0a47 	vmov.f32	s0, s14
 8006f3a:	eef0 0a67 	vmov.f32	s1, s15
 8006f3e:	f003 fbf5 	bl	800a72c <rtIsInf>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10c      	bne.n	8006f62 <UTMeanCovSqrt_C2vgLQ4W+0x1332>
 8006f48:	f107 0318 	add.w	r3, r7, #24
 8006f4c:	ed93 7b00 	vldr	d7, [r3]
 8006f50:	eeb0 0a47 	vmov.f32	s0, s14
 8006f54:	eef0 0a67 	vmov.f32	s1, s15
 8006f58:	f003 fc0c 	bl	800a774 <rtIsNaN>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
          errorCondition = false;
 8006f62:	2300      	movs	r3, #0
 8006f64:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
        }

        Ss[iAcol] = temp;
 8006f68:	f107 0318 	add.w	r3, r7, #24
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8006f74:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 8006f78:	00c9      	lsls	r1, r1, #3
 8006f7a:	4401      	add	r1, r0
 8006f7c:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8006f80:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006f84:	3301      	adds	r3, #1
 8006f86:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006f8a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	ddb1      	ble.n	8006ef6 <UTMeanCovSqrt_C2vgLQ4W+0x12c6>
      }

      if (errorCondition) {
 8006f92:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <UTMeanCovSqrt_C2vgLQ4W+0x1380>
        svd_u3DvUgOe(Ss, Y1_0, s, Sy_0);
 8006f9a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006f9e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006fa2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8006fa6:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8006faa:	f003 fc35 	bl	800a818 <svd_u3DvUgOe>
 8006fae:	e02c      	b.n	800700a <UTMeanCovSqrt_C2vgLQ4W+0x13da>
      } else {
        s[0] = (rtNaN);
 8006fb0:	4bbc      	ldr	r3, [pc, #752]	; (80072a4 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006fba:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8006fbe:	4bb9      	ldr	r3, [pc, #740]	; (80072a4 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006fc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 8006fcc:	4bb5      	ldr	r3, [pc, #724]	; (80072a4 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006fd6:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (kk = 0; kk < 9; kk++) {
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006fe0:	e00f      	b.n	8007002 <UTMeanCovSqrt_C2vgLQ4W+0x13d2>
          Sy_0[kk] = (rtNaN);
 8006fe2:	4bb0      	ldr	r3, [pc, #704]	; (80072a4 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006fec:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8006ff0:	00c9      	lsls	r1, r1, #3
 8006ff2:	4401      	add	r1, r0
 8006ff4:	e9c1 2300 	strd	r2, r3, [r1]
        for (kk = 0; kk < 9; kk++) {
 8006ff8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007002:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007006:	2b08      	cmp	r3, #8
 8007008:	ddeb      	ble.n	8006fe2 <UTMeanCovSqrt_C2vgLQ4W+0x13b2>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 800700a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800700e:	2248      	movs	r2, #72	; 0x48
 8007010:	2100      	movs	r1, #0
 8007012:	4618      	mov	r0, r3
 8007014:	f00e fd60 	bl	8015ad8 <memset>
      Ss[0] = s[0];
 8007018:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800701c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007020:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8007024:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 8007028:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800702c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007030:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8007034:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 8007038:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800703c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007040:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8007044:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (kk = 0; kk < 9; kk++) {
 8007048:	2300      	movs	r3, #0
 800704a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800704e:	e01e      	b.n	800708e <UTMeanCovSqrt_C2vgLQ4W+0x145e>
        Ss[kk] = sqrt(Ss[kk]);
 8007050:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007054:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	4413      	add	r3, r2
 800705c:	ed93 7b00 	vldr	d7, [r3]
 8007060:	eeb0 0a47 	vmov.f32	s0, s14
 8007064:	eef0 0a67 	vmov.f32	s1, s15
 8007068:	f00e ff28 	bl	8015ebc <sqrt>
 800706c:	eeb0 7a40 	vmov.f32	s14, s0
 8007070:	eef0 7a60 	vmov.f32	s15, s1
 8007074:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007078:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	4413      	add	r3, r2
 8007080:	ed83 7b00 	vstr	d7, [r3]
      for (kk = 0; kk < 9; kk++) {
 8007084:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007088:	3301      	adds	r3, #1
 800708a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800708e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007092:	2b08      	cmp	r3, #8
 8007094:	dddc      	ble.n	8007050 <UTMeanCovSqrt_C2vgLQ4W+0x1420>
      }

      kk = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 800709c:	2300      	movs	r3, #0
 800709e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80070a2:	e0c0      	b.n	8007226 <UTMeanCovSqrt_C2vgLQ4W+0x15f6>
        i_1 = 0;
 80070a4:	2300      	movs	r3, #0
 80070a6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 80070aa:	2300      	movs	r3, #0
 80070ac:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80070b0:	e0aa      	b.n	8007208 <UTMeanCovSqrt_C2vgLQ4W+0x15d8>
          Sy_tmp = i_1 + iAcol;
 80070b2:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80070b6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80070ba:	4413      	add	r3, r2
 80070bc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy[Sy_tmp] = 0.0;
 80070c0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80070ca:	18d1      	adds	r1, r2, r3
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	f04f 0300 	mov.w	r3, #0
 80070d4:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[Sy_tmp] += Ss[kk] * Sy_0[i];
 80070d8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80070e2:	4413      	add	r3, r2
 80070e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80070e8:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80070ec:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80070f0:	00db      	lsls	r3, r3, #3
 80070f2:	4413      	add	r3, r2
 80070f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80070f8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80070fc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	4413      	add	r3, r2
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f7f9 fa68 	bl	80005dc <__aeabi_dmul>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4610      	mov	r0, r2
 8007112:	4619      	mov	r1, r3
 8007114:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800711e:	18d6      	adds	r6, r2, r3
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	4620      	mov	r0, r4
 8007126:	4629      	mov	r1, r5
 8007128:	f7f9 f8a2 	bl	8000270 <__adddf3>
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 1] * Sy_0[i + 3];
 8007134:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800713e:	4413      	add	r3, r2
 8007140:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007144:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007148:	3301      	adds	r3, #1
 800714a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	4413      	add	r3, r2
 8007152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007156:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800715a:	3303      	adds	r3, #3
 800715c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007160:	00db      	lsls	r3, r3, #3
 8007162:	4413      	add	r3, r2
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	f7f9 fa38 	bl	80005dc <__aeabi_dmul>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4610      	mov	r0, r2
 8007172:	4619      	mov	r1, r3
 8007174:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007178:	00db      	lsls	r3, r3, #3
 800717a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800717e:	18d6      	adds	r6, r2, r3
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4620      	mov	r0, r4
 8007186:	4629      	mov	r1, r5
 8007188:	f7f9 f872 	bl	8000270 <__adddf3>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 2] * Sy_0[i + 6];
 8007194:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800719e:	4413      	add	r3, r2
 80071a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80071a4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80071a8:	3302      	adds	r3, #2
 80071aa:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	4413      	add	r3, r2
 80071b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80071b6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80071ba:	3306      	adds	r3, #6
 80071bc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80071c0:	00db      	lsls	r3, r3, #3
 80071c2:	4413      	add	r3, r2
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f7f9 fa08 	bl	80005dc <__aeabi_dmul>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4610      	mov	r0, r2
 80071d2:	4619      	mov	r1, r3
 80071d4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80071de:	18d6      	adds	r6, r2, r3
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4620      	mov	r0, r4
 80071e6:	4629      	mov	r1, r5
 80071e8:	f7f9 f842 	bl	8000270 <__adddf3>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	e9c6 2300 	strd	r2, r3, [r6]
          i_1 += 3;
 80071f4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80071f8:	3303      	adds	r3, #3
 80071fa:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 80071fe:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007202:	3301      	adds	r3, #1
 8007204:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8007208:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800720c:	2b02      	cmp	r3, #2
 800720e:	f77f af50 	ble.w	80070b2 <UTMeanCovSqrt_C2vgLQ4W+0x1482>
        }

        kk += 3;
 8007212:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007216:	3303      	adds	r3, #3
 8007218:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 800721c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007220:	3301      	adds	r3, #1
 8007222:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007226:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800722a:	2b02      	cmp	r3, #2
 800722c:	f77f af3a 	ble.w	80070a4 <UTMeanCovSqrt_C2vgLQ4W+0x1474>
      }

      errorCondition = true;
 8007230:	2301      	movs	r3, #1
 8007232:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      kk = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      exitg2 = false;
 800723c:	2300      	movs	r3, #0
 800723e:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8007242:	e044      	b.n	80072ce <UTMeanCovSqrt_C2vgLQ4W+0x169e>
        int32_T exitg1;
        iAcol = kk + 1;
 8007244:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007248:	3301      	adds	r3, #1
 800724a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
        do {
          exitg1 = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          if (iAcol + 1 < 4) {
 8007254:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007258:	2b02      	cmp	r3, #2
 800725a:	dc25      	bgt.n	80072a8 <UTMeanCovSqrt_C2vgLQ4W+0x1678>
            if (!(Sy[3 * kk + iAcol] == 0.0)) {
 800725c:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8007260:	4613      	mov	r3, r2
 8007262:	005b      	lsls	r3, r3, #1
 8007264:	441a      	add	r2, r3
 8007266:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800726a:	4413      	add	r3, r2
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007272:	4413      	add	r3, r2
 8007274:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	f04f 0300 	mov.w	r3, #0
 8007280:	f7f9 fc14 	bl	8000aac <__aeabi_dcmpeq>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <UTMeanCovSqrt_C2vgLQ4W+0x1668>
              errorCondition = false;
 800728a:	2300      	movs	r3, #0
 800728c:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
              exitg1 = 1;
 8007290:	2301      	movs	r3, #1
 8007292:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007296:	e00f      	b.n	80072b8 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
            } else {
              iAcol++;
 8007298:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800729c:	3301      	adds	r3, #1
 800729e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80072a2:	e009      	b.n	80072b8 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
 80072a4:	2000de00 	.word	0x2000de00
            }
          } else {
            kk++;
 80072a8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80072ac:	3301      	adds	r3, #1
 80072ae:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            exitg1 = 2;
 80072b2:	2302      	movs	r3, #2
 80072b4:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          }
        } while (exitg1 == 0);
 80072b8:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0c6      	beq.n	800724e <UTMeanCovSqrt_C2vgLQ4W+0x161e>

        if (exitg1 == 1) {
 80072c0:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d102      	bne.n	80072ce <UTMeanCovSqrt_C2vgLQ4W+0x169e>
          exitg2 = true;
 80072c8:	2301      	movs	r3, #1
 80072ca:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 80072ce:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d103      	bne.n	80072de <UTMeanCovSqrt_C2vgLQ4W+0x16ae>
 80072d6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80072da:	2b02      	cmp	r3, #2
 80072dc:	ddb2      	ble.n	8007244 <UTMeanCovSqrt_C2vgLQ4W+0x1614>
        }
      }

      if (!errorCondition) {
 80072de:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d110      	bne.n	8007308 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
        memcpy(&Sy_0[0], &Sy[0], 9U * sizeof(real_T));
 80072e6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80072ea:	2248      	movs	r2, #72	; 0x48
 80072ec:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 80072f0:	4618      	mov	r0, r3
 80072f2:	f00e fbe3 	bl	8015abc <memcpy>
        qr_5a2P8Gh6(Sy_0, Y1_0, Sy);
 80072f6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80072fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80072fe:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007302:	4618      	mov	r0, r3
 8007304:	f000 fec4 	bl	8008090 <qr_5a2P8Gh6>
      }
    }

    kk = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 800730e:	2300      	movs	r3, #0
 8007310:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007314:	e03d      	b.n	8007392 <UTMeanCovSqrt_C2vgLQ4W+0x1762>
      Sy_0[kk] = Sy[iAcol];
 8007316:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007320:	4413      	add	r3, r2
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800732a:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 800732e:	00c9      	lsls	r1, r1, #3
 8007330:	4401      	add	r1, r0
 8007332:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 8007336:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800733a:	3303      	adds	r3, #3
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007342:	4413      	add	r3, r2
 8007344:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8007348:	1c51      	adds	r1, r2, #1
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8007352:	00c9      	lsls	r1, r1, #3
 8007354:	4401      	add	r1, r0
 8007356:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 800735a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800735e:	3306      	adds	r3, #6
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007366:	4413      	add	r3, r2
 8007368:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 800736c:	1c91      	adds	r1, r2, #2
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8007376:	00c9      	lsls	r1, r1, #3
 8007378:	4401      	add	r1, r0
 800737a:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 800737e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007382:	3303      	adds	r3, #3
 8007384:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8007388:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800738c:	3301      	adds	r3, #1
 800738e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007392:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007396:	2b02      	cmp	r3, #2
 8007398:	ddbd      	ble.n	8007316 <UTMeanCovSqrt_C2vgLQ4W+0x16e6>
    }

    for (kk = 0; kk < 9; kk++) {
 800739a:	2300      	movs	r3, #0
 800739c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80073a0:	e01a      	b.n	80073d8 <UTMeanCovSqrt_C2vgLQ4W+0x17a8>
      Sy[kk] = signOOM * Sy_0[kk];
 80073a2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80073a6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	4413      	add	r3, r2
 80073ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073b2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80073bc:	18d4      	adds	r4, r2, r3
 80073be:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80073c2:	f7f9 f90b 	bl	80005dc <__aeabi_dmul>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 80073ce:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80073d2:	3301      	adds	r3, #1
 80073d4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80073d8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80073dc:	2b08      	cmp	r3, #8
 80073de:	dde0      	ble.n	80073a2 <UTMeanCovSqrt_C2vgLQ4W+0x1772>
    }
  }

  iAcol = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 80073e6:	2300      	movs	r3, #0
 80073e8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80073ec:	e057      	b.n	800749e <UTMeanCovSqrt_C2vgLQ4W+0x186e>
    X2[iAcol] -= X1[0];
 80073ee:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 80073f8:	4413      	add	r3, r2
 80073fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073fe:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 800740a:	00e4      	lsls	r4, r4, #3
 800740c:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8007410:	442c      	add	r4, r5
 8007412:	f7f8 ff2b 	bl	800026c <__aeabi_dsub>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 1] -= X1[1];
 800741e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007422:	3301      	adds	r3, #1
 8007424:	00db      	lsls	r3, r3, #3
 8007426:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 800742a:	4413      	add	r3, r2
 800742c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007430:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8007434:	3308      	adds	r3, #8
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 800743e:	3401      	adds	r4, #1
 8007440:	00e4      	lsls	r4, r4, #3
 8007442:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8007446:	442c      	add	r4, r5
 8007448:	f7f8 ff10 	bl	800026c <__aeabi_dsub>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 2] -= X1[2];
 8007454:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007458:	3302      	adds	r3, #2
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8007460:	4413      	add	r3, r2
 8007462:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007466:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 800746a:	3310      	adds	r3, #16
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8007474:	3402      	adds	r4, #2
 8007476:	00e4      	lsls	r4, r4, #3
 8007478:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 800747c:	442c      	add	r4, r5
 800747e:	f7f8 fef5 	bl	800026c <__aeabi_dsub>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 800748a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800748e:	3303      	adds	r3, #3
 8007490:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8007494:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007498:	3301      	adds	r3, #1
 800749a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800749e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80074a2:	2b05      	cmp	r3, #5
 80074a4:	dda3      	ble.n	80073ee <UTMeanCovSqrt_C2vgLQ4W+0x17be>
  }

  signOOM = covWeights_1 * OOM;
 80074a6:	f107 0308 	add.w	r3, r7, #8
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 80074b2:	f7f9 f893 	bl	80005dc <__aeabi_dmul>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  for (kk = 0; kk < 3; kk++) {
 80074be:	2300      	movs	r3, #0
 80074c0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80074c4:	e071      	b.n	80075aa <UTMeanCovSqrt_C2vgLQ4W+0x197a>
    iAcol = 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 80074cc:	2300      	movs	r3, #0
 80074ce:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80074d2:	e061      	b.n	8007598 <UTMeanCovSqrt_C2vgLQ4W+0x1968>
      Sy_tmp = iAcol + kk;
 80074d4:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 80074d8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80074dc:	4413      	add	r3, r2
 80074de:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
      Ss[Sy_tmp] = 0.0;
 80074e2:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80074e6:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	18d1      	adds	r1, r2, r3
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	f04f 0300 	mov.w	r3, #0
 80074f6:	e9c1 2300 	strd	r2, r3, [r1]
      i = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 8007500:	2300      	movs	r3, #0
 8007502:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8007506:	e039      	b.n	800757c <UTMeanCovSqrt_C2vgLQ4W+0x194c>
        Ss[Sy_tmp] += X2[i + kk] * Y2[i + i_1];
 8007508:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800750c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007510:	00db      	lsls	r3, r3, #3
 8007512:	4413      	add	r3, r2
 8007514:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007518:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800751c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007520:	4413      	add	r3, r2
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8007528:	4413      	add	r3, r2
 800752a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800752e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8007532:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007536:	4413      	add	r3, r2
 8007538:	00db      	lsls	r3, r3, #3
 800753a:	463a      	mov	r2, r7
 800753c:	6812      	ldr	r2, [r2, #0]
 800753e:	4413      	add	r3, r2
 8007540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007544:	f7f9 f84a 	bl	80005dc <__aeabi_dmul>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4620      	mov	r0, r4
 800754e:	4629      	mov	r1, r5
 8007550:	f7f8 fe8e 	bl	8000270 <__adddf3>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 800755c:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8007560:	00c9      	lsls	r1, r1, #3
 8007562:	4401      	add	r1, r0
 8007564:	e9c1 2300 	strd	r2, r3, [r1]
        i += 3;
 8007568:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800756c:	3303      	adds	r3, #3
 800756e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 8007572:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8007576:	3301      	adds	r3, #1
 8007578:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800757c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8007580:	2b05      	cmp	r3, #5
 8007582:	ddc1      	ble.n	8007508 <UTMeanCovSqrt_C2vgLQ4W+0x18d8>
      }

      iAcol += 3;
 8007584:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007588:	3303      	adds	r3, #3
 800758a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 800758e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007592:	3301      	adds	r3, #1
 8007594:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8007598:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800759c:	2b02      	cmp	r3, #2
 800759e:	dd99      	ble.n	80074d4 <UTMeanCovSqrt_C2vgLQ4W+0x18a4>
  for (kk = 0; kk < 3; kk++) {
 80075a0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80075a4:	3301      	adds	r3, #1
 80075a6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80075aa:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	dd89      	ble.n	80074c6 <UTMeanCovSqrt_C2vgLQ4W+0x1896>
    }
  }

  for (kk = 0; kk < 9; kk++) {
 80075b2:	2300      	movs	r3, #0
 80075b4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80075b8:	e01a      	b.n	80075f0 <UTMeanCovSqrt_C2vgLQ4W+0x19c0>
    Pxy[kk] = Ss[kk] * signOOM;
 80075ba:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80075be:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	4413      	add	r3, r2
 80075c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075ca:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80075d4:	18d4      	adds	r4, r2, r3
 80075d6:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80075da:	f7f8 ffff 	bl	80005dc <__aeabi_dmul>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	e9c4 2300 	strd	r2, r3, [r4]
  for (kk = 0; kk < 9; kk++) {
 80075e6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80075ea:	3301      	adds	r3, #1
 80075ec:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80075f0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	dde0      	ble.n	80075ba <UTMeanCovSqrt_C2vgLQ4W+0x198a>
  }
}
 80075f8:	bf00      	nop
 80075fa:	bf00      	nop
 80075fc:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 8007600:	46bd      	mov	sp, r7
 8007602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007606:	bf00      	nop

08007608 <UTMeanCovSqrt_C6QfB9Td>:
#include "rotate_LZ7ctbe0.h"

void UTMeanCovSqrt_C6QfB9Td(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1, real_T Y2[6], const real_T X1[3], real_T
  X2[18], real_T *Ymean, real_T *Sy, real_T Pxy[3])
{
 8007608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800760c:	ed2d 8b02 	vpush	{d8}
 8007610:	b0ac      	sub	sp, #176	; 0xb0
 8007612:	af00      	add	r7, sp, #0
 8007614:	6378      	str	r0, [r7, #52]	; 0x34
 8007616:	6339      	str	r1, [r7, #48]	; 0x30
 8007618:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800761c:	ed87 1b08 	vstr	d1, [r7, #32]
 8007620:	61fa      	str	r2, [r7, #28]
 8007622:	61bb      	str	r3, [r7, #24]
  real_T signOOM;
  real_T xnorm;
  int32_T b_k;
  int32_T i;
  int32_T knt;
  *Ymean = Y1 * meanWeights[0];
 8007624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007626:	e9d3 0100 	ldrd	r0, r1, [r3]
 800762a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800762e:	f7f8 ffd5 	bl	80005dc <__aeabi_dmul>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800763a:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 800763e:	2300      	movs	r3, #0
 8007640:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007644:	e021      	b.n	800768a <UTMeanCovSqrt_C6QfB9Td+0x82>
    *Ymean += Y2[knt] * meanWeights[1];
 8007646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800764a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800764e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007652:	00db      	lsls	r3, r3, #3
 8007654:	69fa      	ldr	r2, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	e9d3 0100 	ldrd	r0, r1, [r3]
 800765c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765e:	3308      	adds	r3, #8
 8007660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007664:	f7f8 ffba 	bl	80005dc <__aeabi_dmul>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4620      	mov	r0, r4
 800766e:	4629      	mov	r1, r5
 8007670:	f7f8 fdfe 	bl	8000270 <__adddf3>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800767c:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8007680:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007684:	3301      	adds	r3, #1
 8007686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800768a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800768e:	2b05      	cmp	r3, #5
 8007690:	ddd9      	ble.n	8007646 <UTMeanCovSqrt_C6QfB9Td+0x3e>
  }

  *Ymean *= OOM;
 8007692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007696:	e9d3 0100 	ldrd	r0, r1, [r3]
 800769a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800769e:	f7f8 ff9d 	bl	80005dc <__aeabi_dmul>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80076aa:	e9c1 2300 	strd	r2, r3, [r1]
  Y1 -= *Ymean;
 80076ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80076ba:	f7f8 fdd7 	bl	800026c <__aeabi_dsub>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (knt = 0; knt < 6; knt++) {
 80076c6:	2300      	movs	r3, #0
 80076c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076cc:	e01c      	b.n	8007708 <UTMeanCovSqrt_C6QfB9Td+0x100>
    Y2[knt] -= *Ymean;
 80076ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	4413      	add	r3, r2
 80076d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	69fa      	ldr	r2, [r7, #28]
 80076ec:	18d4      	adds	r4, r2, r3
 80076ee:	4642      	mov	r2, r8
 80076f0:	464b      	mov	r3, r9
 80076f2:	f7f8 fdbb 	bl	800026c <__aeabi_dsub>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 6; knt++) {
 80076fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007702:	3301      	adds	r3, #1
 8007704:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007708:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800770c:	2b05      	cmp	r3, #5
 800770e:	ddde      	ble.n	80076ce <UTMeanCovSqrt_C6QfB9Td+0xc6>
  }

  if (rtIsNaN(OOM)) {
 8007710:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8007714:	f003 f82e 	bl	800a774 <rtIsNaN>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d004      	beq.n	8007728 <UTMeanCovSqrt_C6QfB9Td+0x120>
    signOOM = OOM;
 800771e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007722:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8007726:	e025      	b.n	8007774 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else if (OOM < 0.0) {
 8007728:	f04f 0200 	mov.w	r2, #0
 800772c:	f04f 0300 	mov.w	r3, #0
 8007730:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007734:	f7f9 f9c4 	bl	8000ac0 <__aeabi_dcmplt>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d005      	beq.n	800774a <UTMeanCovSqrt_C6QfB9Td+0x142>
    signOOM = -1.0;
 800773e:	f04f 0200 	mov.w	r2, #0
 8007742:	4bc3      	ldr	r3, [pc, #780]	; (8007a50 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 8007744:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8007748:	e014      	b.n	8007774 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else {
    signOOM = (OOM > 0.0);
 800774a:	f04f 0200 	mov.w	r2, #0
 800774e:	f04f 0300 	mov.w	r3, #0
 8007752:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007756:	f7f9 f9d1 	bl	8000afc <__aeabi_dcmpgt>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <UTMeanCovSqrt_C6QfB9Td+0x160>
 8007760:	f04f 0200 	mov.w	r2, #0
 8007764:	4bbb      	ldr	r3, [pc, #748]	; (8007a54 <UTMeanCovSqrt_C6QfB9Td+0x44c>)
 8007766:	e003      	b.n	8007770 <UTMeanCovSqrt_C6QfB9Td+0x168>
 8007768:	f04f 0200 	mov.w	r2, #0
 800776c:	f04f 0300 	mov.w	r3, #0
 8007770:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  covWeights_0 = signOOM * covWeights[0];
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	e9d3 0100 	ldrd	r0, r1, [r3]
 800777a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800777e:	f7f8 ff2d 	bl	80005dc <__aeabi_dmul>
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  covWeights_1 = signOOM * covWeights[1];
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	3308      	adds	r3, #8
 800778e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007792:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007796:	f7f8 ff21 	bl	80005dc <__aeabi_dmul>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  OOM *= signOOM;
 80077a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80077a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80077aa:	f7f8 ff17 	bl	80005dc <__aeabi_dmul>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  signOOM = sqrt(covWeights_1);
 80077b6:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 80077ba:	f00e fb7f 	bl	8015ebc <sqrt>
 80077be:	eeb0 7a40 	vmov.f32	s14, s0
 80077c2:	eef0 7a60 	vmov.f32	s15, s1
 80077c6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  for (knt = 0; knt < 6; knt++) {
 80077ca:	2300      	movs	r3, #0
 80077cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80077d0:	e01a      	b.n	8007808 <UTMeanCovSqrt_C6QfB9Td+0x200>
    A[knt] = signOOM * Y2[knt];
 80077d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	69fa      	ldr	r2, [r7, #28]
 80077da:	4413      	add	r3, r2
 80077dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80077e4:	f7f8 fefa 	bl	80005dc <__aeabi_dmul>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077f0:	00c9      	lsls	r1, r1, #3
 80077f2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80077f6:	4401      	add	r1, r0
 80077f8:	3948      	subs	r1, #72	; 0x48
 80077fa:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 80077fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007802:	3301      	adds	r3, #1
 8007804:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007808:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800780c:	2b05      	cmp	r3, #5
 800780e:	dde0      	ble.n	80077d2 <UTMeanCovSqrt_C6QfB9Td+0x1ca>
  }

  signOOM = A[0];
 8007810:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007814:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  xnorm = xnrm2_7bm34mDQ(5, A, 2);
 8007818:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800781c:	2202      	movs	r2, #2
 800781e:	4619      	mov	r1, r3
 8007820:	2005      	movs	r0, #5
 8007822:	f005 f975 	bl	800cb10 <xnrm2_7bm34mDQ>
 8007826:	eeb0 7a40 	vmov.f32	s14, s0
 800782a:	eef0 7a60 	vmov.f32	s15, s1
 800782e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  if (xnorm != 0.0) {
 8007832:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007836:	f04f 0200 	mov.w	r2, #0
 800783a:	f04f 0300 	mov.w	r3, #0
 800783e:	f7f9 f935 	bl	8000aac <__aeabi_dcmpeq>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	f040 80e7 	bne.w	8007a18 <UTMeanCovSqrt_C6QfB9Td+0x410>
    xnorm = rt_hypotd_snf(A[0], xnorm);
 800784a:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800784e:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8007852:	eeb0 1a46 	vmov.f32	s2, s12
 8007856:	eef0 1a66 	vmov.f32	s3, s13
 800785a:	eeb0 0a47 	vmov.f32	s0, s14
 800785e:	eef0 0a67 	vmov.f32	s1, s15
 8007862:	f002 fe79 	bl	800a558 <rt_hypotd_snf>
 8007866:	eeb0 7a40 	vmov.f32	s14, s0
 800786a:	eef0 7a60 	vmov.f32	s15, s1
 800786e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    if (A[0] >= 0.0) {
 8007872:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007876:	f04f 0200 	mov.w	r2, #0
 800787a:	f04f 0300 	mov.w	r3, #0
 800787e:	f7f9 f933 	bl	8000ae8 <__aeabi_dcmpge>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d009      	beq.n	800789c <UTMeanCovSqrt_C6QfB9Td+0x294>
      xnorm = -xnorm;
 8007888:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800788c:	613a      	str	r2, [r7, #16]
 800788e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	ed97 7b04 	vldr	d7, [r7, #16]
 8007898:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    }

    if (fabs(xnorm) < 1.0020841800044864E-292) {
 800789c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80078a0:	60ba      	str	r2, [r7, #8]
 80078a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	f04f 0200 	mov.w	r2, #0
 80078ac:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80078b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078b4:	f7f9 f904 	bl	8000ac0 <__aeabi_dcmplt>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 80a8 	beq.w	8007a10 <UTMeanCovSqrt_C6QfB9Td+0x408>
      knt = 0;
 80078c0:	2300      	movs	r3, #0
 80078c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      do {
        knt++;
 80078c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078ca:	3301      	adds	r3, #1
 80078cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (b_k = 1; b_k < 6; b_k++) {
 80078d0:	2301      	movs	r3, #1
 80078d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078d6:	e01d      	b.n	8007914 <UTMeanCovSqrt_C6QfB9Td+0x30c>
          A[b_k] *= 9.9792015476736E+291;
 80078d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078dc:	00db      	lsls	r3, r3, #3
 80078de:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80078e2:	4413      	add	r3, r2
 80078e4:	3b48      	subs	r3, #72	; 0x48
 80078e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078ea:	f04f 0200 	mov.w	r2, #0
 80078ee:	4b5a      	ldr	r3, [pc, #360]	; (8007a58 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 80078f0:	f7f8 fe74 	bl	80005dc <__aeabi_dmul>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80078fc:	00c9      	lsls	r1, r1, #3
 80078fe:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8007902:	4401      	add	r1, r0
 8007904:	3948      	subs	r1, #72	; 0x48
 8007906:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_k = 1; b_k < 6; b_k++) {
 800790a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800790e:	3301      	adds	r3, #1
 8007910:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007918:	2b05      	cmp	r3, #5
 800791a:	dddd      	ble.n	80078d8 <UTMeanCovSqrt_C6QfB9Td+0x2d0>
        }

        xnorm *= 9.9792015476736E+291;
 800791c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007920:	f04f 0200 	mov.w	r2, #0
 8007924:	4b4c      	ldr	r3, [pc, #304]	; (8007a58 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 8007926:	f7f8 fe59 	bl	80005dc <__aeabi_dmul>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        signOOM *= 9.9792015476736E+291;
 8007932:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007936:	f04f 0200 	mov.w	r2, #0
 800793a:	4b47      	ldr	r3, [pc, #284]	; (8007a58 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 800793c:	f7f8 fe4e 	bl	80005dc <__aeabi_dmul>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt < 20));
 8007948:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800794c:	603a      	str	r2, [r7, #0]
 800794e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007952:	607b      	str	r3, [r7, #4]
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800795c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007960:	f7f9 f8ae 	bl	8000ac0 <__aeabi_dcmplt>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <UTMeanCovSqrt_C6QfB9Td+0x36a>
 800796a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800796e:	2b13      	cmp	r3, #19
 8007970:	dda9      	ble.n	80078c6 <UTMeanCovSqrt_C6QfB9Td+0x2be>

      xnorm = rt_hypotd_snf(signOOM, xnrm2_7bm34mDQ(5, A, 2));
 8007972:	ed97 8b10 	vldr	d8, [r7, #64]	; 0x40
 8007976:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800797a:	2202      	movs	r2, #2
 800797c:	4619      	mov	r1, r3
 800797e:	2005      	movs	r0, #5
 8007980:	f005 f8c6 	bl	800cb10 <xnrm2_7bm34mDQ>
 8007984:	eeb0 7a40 	vmov.f32	s14, s0
 8007988:	eef0 7a60 	vmov.f32	s15, s1
 800798c:	eeb0 1a47 	vmov.f32	s2, s14
 8007990:	eef0 1a67 	vmov.f32	s3, s15
 8007994:	eeb0 0a48 	vmov.f32	s0, s16
 8007998:	eef0 0a68 	vmov.f32	s1, s17
 800799c:	f002 fddc 	bl	800a558 <rt_hypotd_snf>
 80079a0:	eeb0 7a40 	vmov.f32	s14, s0
 80079a4:	eef0 7a60 	vmov.f32	s15, s1
 80079a8:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
      if (signOOM >= 0.0) {
 80079ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80079b0:	f04f 0200 	mov.w	r2, #0
 80079b4:	f04f 0300 	mov.w	r3, #0
 80079b8:	f7f9 f896 	bl	8000ae8 <__aeabi_dcmpge>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d006      	beq.n	80079d0 <UTMeanCovSqrt_C6QfB9Td+0x3c8>
        xnorm = -xnorm;
 80079c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80079c6:	4692      	mov	sl, r2
 80079c8:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80079cc:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      }

      for (b_k = 0; b_k < knt; b_k++) {
 80079d0:	2300      	movs	r3, #0
 80079d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079d6:	e010      	b.n	80079fa <UTMeanCovSqrt_C6QfB9Td+0x3f2>
        xnorm *= 1.0020841800044864E-292;
 80079d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80079dc:	f04f 0200 	mov.w	r2, #0
 80079e0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80079e4:	f7f8 fdfa 	bl	80005dc <__aeabi_dmul>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      for (b_k = 0; b_k < knt; b_k++) {
 80079f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079f4:	3301      	adds	r3, #1
 80079f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80079fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a02:	429a      	cmp	r2, r3
 8007a04:	dbe8      	blt.n	80079d8 <UTMeanCovSqrt_C6QfB9Td+0x3d0>
      }

      signOOM = xnorm;
 8007a06:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a0a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8007a0e:	e003      	b.n	8007a18 <UTMeanCovSqrt_C6QfB9Td+0x410>
    } else {
      signOOM = xnorm;
 8007a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a14:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  if (!rtIsNaN(covWeights_0)) {
 8007a18:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8007a1c:	eeb0 0a47 	vmov.f32	s0, s14
 8007a20:	eef0 0a67 	vmov.f32	s1, s15
 8007a24:	f002 fea6 	bl	800a774 <rtIsNaN>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d12b      	bne.n	8007a86 <UTMeanCovSqrt_C6QfB9Td+0x47e>
    if (covWeights_0 < 0.0) {
 8007a2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a32:	f04f 0200 	mov.w	r2, #0
 8007a36:	f04f 0300 	mov.w	r3, #0
 8007a3a:	f7f9 f841 	bl	8000ac0 <__aeabi_dcmplt>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <UTMeanCovSqrt_C6QfB9Td+0x454>
      covWeights_0 = -1.0;
 8007a44:	f04f 0200 	mov.w	r2, #0
 8007a48:	4b01      	ldr	r3, [pc, #4]	; (8007a50 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 8007a4a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8007a4e:	e01a      	b.n	8007a86 <UTMeanCovSqrt_C6QfB9Td+0x47e>
 8007a50:	bff00000 	.word	0xbff00000
 8007a54:	3ff00000 	.word	0x3ff00000
 8007a58:	7c900000 	.word	0x7c900000
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 8007a5c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	f04f 0300 	mov.w	r3, #0
 8007a68:	f7f9 f848 	bl	8000afc <__aeabi_dcmpgt>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <UTMeanCovSqrt_C6QfB9Td+0x472>
 8007a72:	f04f 0200 	mov.w	r2, #0
 8007a76:	4b99      	ldr	r3, [pc, #612]	; (8007cdc <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 8007a78:	e003      	b.n	8007a82 <UTMeanCovSqrt_C6QfB9Td+0x47a>
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }
  }

  if (covWeights_0 == 1.0) {
 8007a86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a8a:	f04f 0200 	mov.w	r2, #0
 8007a8e:	4b93      	ldr	r3, [pc, #588]	; (8007cdc <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 8007a90:	f7f9 f80c 	bl	8000aac <__aeabi_dcmpeq>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d021      	beq.n	8007ade <UTMeanCovSqrt_C6QfB9Td+0x4d6>
    rotate_LZ7ctbe0(signOOM, Y1, &signOOM, &xnorm, &covWeights_0);
 8007a9a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8007a9e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007aa2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8007aa6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007aaa:	4618      	mov	r0, r3
 8007aac:	ed97 1b08 	vldr	d1, [r7, #32]
 8007ab0:	eeb0 0a47 	vmov.f32	s0, s14
 8007ab4:	eef0 0a67 	vmov.f32	s1, s15
 8007ab8:	f002 fbc2 	bl	800a240 <rotate_LZ7ctbe0>
    *Sy = sqrt(OOM) * covWeights_0;
 8007abc:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8007ac0:	f00e f9fc 	bl	8015ebc <sqrt>
 8007ac4:	ec51 0b10 	vmov	r0, r1, d0
 8007ac8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007acc:	f7f8 fd86 	bl	80005dc <__aeabi_dmul>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8007ad8:	e9c1 2300 	strd	r2, r3, [r1]
 8007adc:	e016      	b.n	8007b0c <UTMeanCovSqrt_C6QfB9Td+0x504>
  } else {
    cholUpdateFactor_HBMX5a5h(&signOOM, Y1);
 8007ade:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007ae2:	ed97 0b08 	vldr	d0, [r7, #32]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 f8fa 	bl	8007ce0 <cholUpdateFactor_HBMX5a5h>
    *Sy = sqrt(OOM) * signOOM;
 8007aec:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8007af0:	f00e f9e4 	bl	8015ebc <sqrt>
 8007af4:	ec51 0b10 	vmov	r0, r1, d0
 8007af8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007afc:	f7f8 fd6e 	bl	80005dc <__aeabi_dmul>
 8007b00:	4602      	mov	r2, r0
 8007b02:	460b      	mov	r3, r1
 8007b04:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8007b08:	e9c1 2300 	strd	r2, r3, [r1]
  }

  b_k = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 8007b12:	2300      	movs	r3, #0
 8007b14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b18:	e054      	b.n	8007bc4 <UTMeanCovSqrt_C6QfB9Td+0x5bc>
    X2[b_k] -= X1[0];
 8007b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b1e:	00db      	lsls	r3, r3, #3
 8007b20:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007b24:	4413      	add	r3, r2
 8007b26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8007b34:	00e4      	lsls	r4, r4, #3
 8007b36:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8007b3a:	442c      	add	r4, r5
 8007b3c:	f7f8 fb96 	bl	800026c <__aeabi_dsub>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 1] -= X1[1];
 8007b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007b54:	4413      	add	r3, r2
 8007b56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	3308      	adds	r3, #8
 8007b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b62:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8007b66:	3401      	adds	r4, #1
 8007b68:	00e4      	lsls	r4, r4, #3
 8007b6a:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8007b6e:	442c      	add	r4, r5
 8007b70:	f7f8 fb7c 	bl	800026c <__aeabi_dsub>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 2] -= X1[2];
 8007b7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b80:	3302      	adds	r3, #2
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007b88:	4413      	add	r3, r2
 8007b8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	3310      	adds	r3, #16
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8007b9a:	3402      	adds	r4, #2
 8007b9c:	00e4      	lsls	r4, r4, #3
 8007b9e:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8007ba2:	442c      	add	r4, r5
 8007ba4:	f7f8 fb62 	bl	800026c <__aeabi_dsub>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	e9c4 2300 	strd	r2, r3, [r4]
    b_k += 3;
 8007bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bb4:	3303      	adds	r3, #3
 8007bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 8007bba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007bc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007bc8:	2b05      	cmp	r3, #5
 8007bca:	dda6      	ble.n	8007b1a <UTMeanCovSqrt_C6QfB9Td+0x512>
  }

  signOOM = covWeights_1 * OOM;
 8007bcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007bd4:	f7f8 fd02 	bl	80005dc <__aeabi_dmul>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (knt = 0; knt < 3; knt++) {
 8007be0:	2300      	movs	r3, #0
 8007be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007be6:	e06c      	b.n	8007cc2 <UTMeanCovSqrt_C6QfB9Td+0x6ba>
    X2_0[knt] = 0.0;
 8007be8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8007bf8:	f04f 0200 	mov.w	r2, #0
 8007bfc:	f04f 0300 	mov.w	r3, #0
 8007c00:	e9c1 2300 	strd	r2, r3, [r1]
    b_k = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c10:	e037      	b.n	8007c82 <UTMeanCovSqrt_C6QfB9Td+0x67a>
      X2_0[knt] += X2[b_k + knt] * Y2[i];
 8007c12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007c1c:	4413      	add	r3, r2
 8007c1e:	3b60      	subs	r3, #96	; 0x60
 8007c20:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007c24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007c28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c2c:	4413      	add	r3, r2
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007c34:	4413      	add	r3, r2
 8007c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c3e:	00db      	lsls	r3, r3, #3
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	4413      	add	r3, r2
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	f7f8 fcc8 	bl	80005dc <__aeabi_dmul>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4620      	mov	r0, r4
 8007c52:	4629      	mov	r1, r5
 8007c54:	f7f8 fb0c 	bl	8000270 <__adddf3>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c60:	00c9      	lsls	r1, r1, #3
 8007c62:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8007c66:	4401      	add	r1, r0
 8007c68:	3960      	subs	r1, #96	; 0x60
 8007c6a:	e9c1 2300 	strd	r2, r3, [r1]
      b_k += 3;
 8007c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c72:	3303      	adds	r3, #3
 8007c74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 8007c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c86:	2b05      	cmp	r3, #5
 8007c88:	ddc3      	ble.n	8007c12 <UTMeanCovSqrt_C6QfB9Td+0x60a>
    }

    Pxy[knt] = X2_0[knt] * signOOM;
 8007c8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007c94:	4413      	add	r3, r2
 8007c96:	3b60      	subs	r3, #96	; 0x60
 8007c98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ca0:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8007ca4:	00e4      	lsls	r4, r4, #3
 8007ca6:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 8007caa:	442c      	add	r4, r5
 8007cac:	f7f8 fc96 	bl	80005dc <__aeabi_dmul>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 3; knt++) {
 8007cb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007cc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	dd8e      	ble.n	8007be8 <UTMeanCovSqrt_C6QfB9Td+0x5e0>
  }
}
 8007cca:	bf00      	nop
 8007ccc:	bf00      	nop
 8007cce:	37b0      	adds	r7, #176	; 0xb0
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	ecbd 8b02 	vpop	{d8}
 8007cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cda:	bf00      	nop
 8007cdc:	3ff00000 	.word	0x3ff00000

08007ce0 <cholUpdateFactor_HBMX5a5h>:
#include "rotate_LZ7ctbe0.h"
#include "rt_nonfinite.h"
#include "rtGetNaN.h"

void cholUpdateFactor_HBMX5a5h(real_T *S, real_T U)
{
 8007ce0:	b5b0      	push	{r4, r5, r7, lr}
 8007ce2:	b090      	sub	sp, #64	; 0x40
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	ed87 0b00 	vstr	d0, [r7]
  real_T alpha;
  real_T c;
  real_T nrmx;
  real_T s;
  int8_T p;
  R = *S;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  p = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (*S == 0.0) {
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d02:	f04f 0200 	mov.w	r2, #0
 8007d06:	f04f 0300 	mov.w	r3, #0
 8007d0a:	f7f8 fecf 	bl	8000aac <__aeabi_dcmpeq>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <cholUpdateFactor_HBMX5a5h+0x3c>
    p = 2;
 8007d14:	2302      	movs	r3, #2
 8007d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007d1a:	e065      	b.n	8007de8 <cholUpdateFactor_HBMX5a5h+0x108>
  } else {
    s = U / *S;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d26:	f7f8 fd83 	bl	8000830 <__aeabi_ddiv>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    nrmx = fabs(s);
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (nrmx >= 1.0) {
 8007d3e:	f04f 0200 	mov.w	r2, #0
 8007d42:	4b5c      	ldr	r3, [pc, #368]	; (8007eb4 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 8007d44:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007d48:	f7f8 fece 	bl	8000ae8 <__aeabi_dcmpge>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <cholUpdateFactor_HBMX5a5h+0x7a>
      p = 1;
 8007d52:	2301      	movs	r3, #1
 8007d54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007d58:	e046      	b.n	8007de8 <cholUpdateFactor_HBMX5a5h+0x108>
    } else {
      rotate_LZ7ctbe0(sqrt(1.0 - nrmx * nrmx), s, &R, &c, &alpha);
 8007d5a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d5e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007d62:	f7f8 fc3b 	bl	80005dc <__aeabi_dmul>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	f04f 0000 	mov.w	r0, #0
 8007d6e:	4951      	ldr	r1, [pc, #324]	; (8007eb4 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 8007d70:	f7f8 fa7c 	bl	800026c <__aeabi_dsub>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	ec43 2b17 	vmov	d7, r2, r3
 8007d7c:	eeb0 0a47 	vmov.f32	s0, s14
 8007d80:	eef0 0a67 	vmov.f32	s1, s15
 8007d84:	f00e f89a 	bl	8015ebc <sqrt>
 8007d88:	eeb0 7a40 	vmov.f32	s14, s0
 8007d8c:	eef0 7a60 	vmov.f32	s15, s1
 8007d90:	f107 0218 	add.w	r2, r7, #24
 8007d94:	f107 0110 	add.w	r1, r7, #16
 8007d98:	f107 0320 	add.w	r3, r7, #32
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8007da2:	eeb0 0a47 	vmov.f32	s0, s14
 8007da6:	eef0 0a67 	vmov.f32	s1, s15
 8007daa:	f002 fa49 	bl	800a240 <rotate_LZ7ctbe0>
      R = R * *S - c * 0.0;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007db4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007db8:	f7f8 fc10 	bl	80005dc <__aeabi_dmul>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4614      	mov	r4, r2
 8007dc2:	461d      	mov	r5, r3
 8007dc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007dc8:	f04f 0200 	mov.w	r2, #0
 8007dcc:	f04f 0300 	mov.w	r3, #0
 8007dd0:	f7f8 fc04 	bl	80005dc <__aeabi_dmul>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4620      	mov	r0, r4
 8007dda:	4629      	mov	r1, r5
 8007ddc:	f7f8 fa46 	bl	800026c <__aeabi_dsub>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
  }

  *S = R;
 8007de8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007dec:	68f9      	ldr	r1, [r7, #12]
 8007dee:	e9c1 2300 	strd	r2, r3, [r1]
  if (p != 0) {
 8007df2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d057      	beq.n	8007eaa <cholUpdateFactor_HBMX5a5h+0x1ca>
    s = R * R - U * U;
 8007dfa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e02:	f7f8 fbeb 	bl	80005dc <__aeabi_dmul>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4614      	mov	r4, r2
 8007e0c:	461d      	mov	r5, r3
 8007e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e16:	f7f8 fbe1 	bl	80005dc <__aeabi_dmul>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4620      	mov	r0, r4
 8007e20:	4629      	mov	r1, r5
 8007e22:	f7f8 fa23 	bl	800026c <__aeabi_dsub>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if ((!rtIsInf(s)) && (!rtIsNaN(s))) {
 8007e2e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8007e32:	f002 fc7b 	bl	800a72c <rtIsInf>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d11d      	bne.n	8007e78 <cholUpdateFactor_HBMX5a5h+0x198>
 8007e3c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8007e40:	f002 fc98 	bl	800a774 <rtIsNaN>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d116      	bne.n	8007e78 <cholUpdateFactor_HBMX5a5h+0x198>
      nrmx = 1.0;
 8007e4a:	f04f 0200 	mov.w	r2, #0
 8007e4e:	4b19      	ldr	r3, [pc, #100]	; (8007eb4 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 8007e50:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      if (s != 0.0) {
 8007e54:	f04f 0200 	mov.w	r2, #0
 8007e58:	f04f 0300 	mov.w	r3, #0
 8007e5c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007e60:	f7f8 fe24 	bl	8000aac <__aeabi_dcmpeq>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d110      	bne.n	8007e8c <cholUpdateFactor_HBMX5a5h+0x1ac>
        s = fabs(s);
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8007e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e74:	637b      	str	r3, [r7, #52]	; 0x34
      if (s != 0.0) {
 8007e76:	e009      	b.n	8007e8c <cholUpdateFactor_HBMX5a5h+0x1ac>
      }
    } else {
      s = (rtNaN);
 8007e78:	4b0f      	ldr	r3, [pc, #60]	; (8007eb8 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      nrmx = (rtNaN);
 8007e82:	4b0d      	ldr	r3, [pc, #52]	; (8007eb8 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    *S = nrmx * sqrt(s);
 8007e8c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8007e90:	f00e f814 	bl	8015ebc <sqrt>
 8007e94:	ec51 0b10 	vmov	r0, r1, d0
 8007e98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e9c:	f7f8 fb9e 	bl	80005dc <__aeabi_dmul>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	68f9      	ldr	r1, [r7, #12]
 8007ea6:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 8007eaa:	bf00      	nop
 8007eac:	3740      	adds	r7, #64	; 0x40
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	3ff00000 	.word	0x3ff00000
 8007eb8:	2000de00 	.word	0x2000de00

08007ebc <look1_binlxpw>:
#include "look1_binlxpw.h"
#include "rtwtypes.h"

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 8007ebc:	b5b0      	push	{r4, r5, r7, lr}
 8007ebe:	b08e      	sub	sp, #56	; 0x38
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	ed87 0b04 	vstr	d0, [r7, #16]
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
  real_T frac;
  real_T yL_0d0;
  uint32_T iLeft;
  if (u0 <= bp0[0U]) {
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ed6:	f7f8 fdfd 	bl	8000ad4 <__aeabi_dcmple>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d020      	beq.n	8007f22 <look1_binlxpw+0x66>
    iLeft = 0U;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007eee:	f7f8 f9bd 	bl	800026c <__aeabi_dsub>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4614      	mov	r4, r2
 8007ef8:	461d      	mov	r5, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3308      	adds	r3, #8
 8007efe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	f7f8 f9b0 	bl	800026c <__aeabi_dsub>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4620      	mov	r0, r4
 8007f12:	4629      	mov	r1, r5
 8007f14:	f7f8 fc8c 	bl	8000830 <__aeabi_ddiv>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007f20:	e087      	b.n	8008032 <look1_binlxpw+0x176>
  } else if (u0 < bp0[maxIndex]) {
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	00db      	lsls	r3, r3, #3
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	4413      	add	r3, r2
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f32:	f7f8 fdc5 	bl	8000ac0 <__aeabi_dcmplt>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d04b      	beq.n	8007fd4 <look1_binlxpw+0x118>
    uint32_T bpIdx;
    uint32_T iRght;
    bpIdx = maxIndex >> 1U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	085b      	lsrs	r3, r3, #1
 8007f40:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 8007f4a:	e016      	b.n	8007f7a <look1_binlxpw+0xbe>
      if (u0 < bp0[bpIdx]) {
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	4413      	add	r3, r2
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f5c:	f7f8 fdb0 	bl	8000ac0 <__aeabi_dcmplt>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <look1_binlxpw+0xb0>
        iRght = bpIdx;
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	627b      	str	r3, [r7, #36]	; 0x24
 8007f6a:	e001      	b.n	8007f70 <look1_binlxpw+0xb4>
      } else {
        iLeft = bpIdx;
 8007f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8007f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f74:	4413      	add	r3, r2
 8007f76:	085b      	lsrs	r3, r3, #1
 8007f78:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 8007f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d8e3      	bhi.n	8007f4c <look1_binlxpw+0x90>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f94:	f7f8 f96a 	bl	800026c <__aeabi_dsub>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	461d      	mov	r5, r3
 8007fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	00db      	lsls	r3, r3, #3
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	4413      	add	r3, r2
 8007faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	f7f8 f957 	bl	800026c <__aeabi_dsub>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	f7f8 fc33 	bl	8000830 <__aeabi_ddiv>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007fd2:	e02e      	b.n	8008032 <look1_binlxpw+0x176>
  } else {
    iLeft = maxIndex - 1U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	00db      	lsls	r3, r3, #3
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ff0:	f7f8 f93c 	bl	800026c <__aeabi_dsub>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4614      	mov	r4, r2
 8007ffa:	461d      	mov	r5, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	4413      	add	r3, r2
 8008004:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800800e:	3b01      	subs	r3, #1
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	4413      	add	r3, r2
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	f7f8 f927 	bl	800026c <__aeabi_dsub>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4620      	mov	r0, r4
 8008024:	4629      	mov	r1, r5
 8008026:	f7f8 fc03 	bl	8000830 <__aeabi_ddiv>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  yL_0d0 = table[iLeft];
 8008032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	4413      	add	r3, r2
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 8008042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008044:	3301      	adds	r3, #1
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	4413      	add	r3, r2
 800804c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008054:	f7f8 f90a 	bl	800026c <__aeabi_dsub>
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4610      	mov	r0, r2
 800805e:	4619      	mov	r1, r3
 8008060:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008064:	f7f8 faba 	bl	80005dc <__aeabi_dmul>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4610      	mov	r0, r2
 800806e:	4619      	mov	r1, r3
 8008070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008074:	f7f8 f8fc 	bl	8000270 <__adddf3>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	ec43 2b17 	vmov	d7, r2, r3
}
 8008080:	eeb0 0a47 	vmov.f32	s0, s14
 8008084:	eef0 0a67 	vmov.f32	s1, s15
 8008088:	3738      	adds	r7, #56	; 0x38
 800808a:	46bd      	mov	sp, r7
 800808c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008090 <qr_5a2P8Gh6>:
#include <math.h>
#include "xgemv_fRiR1I1O.h"
#include "xgerc_tNNiazQU.h"

void qr_5a2P8Gh6(const real_T A[9], real_T Q[9], real_T R[9])
{
 8008090:	b5b0      	push	{r4, r5, r7, lr}
 8008092:	b0c0      	sub	sp, #256	; 0x100
 8008094:	af04      	add	r7, sp, #16
 8008096:	6578      	str	r0, [r7, #84]	; 0x54
 8008098:	6539      	str	r1, [r7, #80]	; 0x50
 800809a:	64fa      	str	r2, [r7, #76]	; 0x4c
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 9U * sizeof(real_T));
 800809c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80080a0:	2248      	movs	r2, #72	; 0x48
 80080a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080a4:	4618      	mov	r0, r3
 80080a6:	f00d fd09 	bl	8015abc <memcpy>
  tau_idx_0 = 0.0;
 80080aa:	f04f 0200 	mov.w	r2, #0
 80080ae:	f04f 0300 	mov.w	r3, #0
 80080b2:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  work[0] = 0.0;
 80080b6:	f04f 0200 	mov.w	r2, #0
 80080ba:	f04f 0300 	mov.w	r3, #0
 80080be:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  tau_idx_1 = 0.0;
 80080c2:	f04f 0200 	mov.w	r2, #0
 80080c6:	f04f 0300 	mov.w	r3, #0
 80080ca:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  work[1] = 0.0;
 80080ce:	f04f 0200 	mov.w	r2, #0
 80080d2:	f04f 0300 	mov.w	r3, #0
 80080d6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  work[2] = 0.0;
 80080da:	f04f 0200 	mov.w	r2, #0
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  atmp = b_A[0];
 80080e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80080ea:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(2, b_A, 2);
 80080ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80080f2:	2202      	movs	r2, #2
 80080f4:	4619      	mov	r1, r3
 80080f6:	2002      	movs	r0, #2
 80080f8:	f004 ffc2 	bl	800d080 <xnrm2_xDOlDEtw>
 80080fc:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 8008100:	f04f 0200 	mov.w	r2, #0
 8008104:	f04f 0300 	mov.w	r3, #0
 8008108:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800810c:	f7f8 fcce 	bl	8000aac <__aeabi_dcmpeq>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	f040 8172 	bne.w	80083fc <qr_5a2P8Gh6+0x36c>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 8008118:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800811c:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 8008120:	eeb0 0a47 	vmov.f32	s0, s14
 8008124:	eef0 0a67 	vmov.f32	s1, s15
 8008128:	f002 fa16 	bl	800a558 <rt_hypotd_snf>
 800812c:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[0] >= 0.0) {
 8008130:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8008134:	f04f 0200 	mov.w	r2, #0
 8008138:	f04f 0300 	mov.w	r3, #0
 800813c:	f7f8 fcd4 	bl	8000ae8 <__aeabi_dcmpge>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d009      	beq.n	800815a <qr_5a2P8Gh6+0xca>
      beta1 = -beta1;
 8008146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800814a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800814e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008152:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800815a:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800815e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008162:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8008166:	f04f 0200 	mov.w	r2, #0
 800816a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800816e:	4620      	mov	r0, r4
 8008170:	4629      	mov	r1, r5
 8008172:	f7f8 fca5 	bl	8000ac0 <__aeabi_dcmplt>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 80f1 	beq.w	8008360 <qr_5a2P8Gh6+0x2d0>
      knt = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 8008184:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008188:	3301      	adds	r3, #1
 800818a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800818e:	2301      	movs	r3, #1
 8008190:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008194:	e01f      	b.n	80081d6 <qr_5a2P8Gh6+0x146>
          b_A[b_coltop] *= 9.9792015476736E+291;
 8008196:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80081a0:	4413      	add	r3, r2
 80081a2:	3b80      	subs	r3, #128	; 0x80
 80081a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80081a8:	f04f 0200 	mov.w	r2, #0
 80081ac:	4bc9      	ldr	r3, [pc, #804]	; (80084d4 <qr_5a2P8Gh6+0x444>)
 80081ae:	f7f8 fa15 	bl	80005dc <__aeabi_dmul>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4610      	mov	r0, r2
 80081b8:	4619      	mov	r1, r3
 80081ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081be:	00db      	lsls	r3, r3, #3
 80081c0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80081c4:	4413      	add	r3, r2
 80081c6:	3b80      	subs	r3, #128	; 0x80
 80081c8:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 80081cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081d0:	3301      	adds	r3, #1
 80081d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081da:	2b02      	cmp	r3, #2
 80081dc:	dddb      	ble.n	8008196 <qr_5a2P8Gh6+0x106>
        }

        beta1 *= 9.9792015476736E+291;
 80081de:	f04f 0200 	mov.w	r2, #0
 80081e2:	4bbc      	ldr	r3, [pc, #752]	; (80084d4 <qr_5a2P8Gh6+0x444>)
 80081e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081e8:	f7f8 f9f8 	bl	80005dc <__aeabi_dmul>
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	4bb6      	ldr	r3, [pc, #728]	; (80084d4 <qr_5a2P8Gh6+0x444>)
 80081fa:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80081fe:	f7f8 f9ed 	bl	80005dc <__aeabi_dmul>
 8008202:	4602      	mov	r2, r0
 8008204:	460b      	mov	r3, r1
 8008206:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800820a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800820e:	643b      	str	r3, [r7, #64]	; 0x40
 8008210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008218:	647b      	str	r3, [r7, #68]	; 0x44
 800821a:	f04f 0200 	mov.w	r2, #0
 800821e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8008222:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008226:	f7f8 fc4b 	bl	8000ac0 <__aeabi_dcmplt>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <qr_5a2P8Gh6+0x1a8>
 8008230:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008234:	2b13      	cmp	r3, #19
 8008236:	dda5      	ble.n	8008184 <qr_5a2P8Gh6+0xf4>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(2, b_A, 2));
 8008238:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800823c:	2202      	movs	r2, #2
 800823e:	4619      	mov	r1, r3
 8008240:	2002      	movs	r0, #2
 8008242:	f004 ff1d 	bl	800d080 <xnrm2_xDOlDEtw>
 8008246:	eeb0 7a40 	vmov.f32	s14, s0
 800824a:	eef0 7a60 	vmov.f32	s15, s1
 800824e:	eeb0 1a47 	vmov.f32	s2, s14
 8008252:	eef0 1a67 	vmov.f32	s3, s15
 8008256:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 800825a:	f002 f97d 	bl	800a558 <rt_hypotd_snf>
 800825e:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 8008262:	f04f 0200 	mov.w	r2, #0
 8008266:	f04f 0300 	mov.w	r3, #0
 800826a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800826e:	f7f8 fc3b 	bl	8000ae8 <__aeabi_dcmpge>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d009      	beq.n	800828c <qr_5a2P8Gh6+0x1fc>
        beta1 = -beta1;
 8008278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800827c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008284:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008288:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 800828c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8008290:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008294:	f7f7 ffea 	bl	800026c <__aeabi_dsub>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4610      	mov	r0, r2
 800829e:	4619      	mov	r1, r3
 80082a0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80082a4:	f7f8 fac4 	bl	8000830 <__aeabi_ddiv>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (atmp - beta1);
 80082b0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80082b4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80082b8:	f7f7 ffd8 	bl	800026c <__aeabi_dsub>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	f04f 0000 	mov.w	r0, #0
 80082c4:	4984      	ldr	r1, [pc, #528]	; (80084d8 <qr_5a2P8Gh6+0x448>)
 80082c6:	f7f8 fab3 	bl	8000830 <__aeabi_ddiv>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 80082d2:	2301      	movs	r3, #1
 80082d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80082d8:	e01e      	b.n	8008318 <qr_5a2P8Gh6+0x288>
        b_A[b_coltop] *= atmp;
 80082da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80082e4:	4413      	add	r3, r2
 80082e6:	3b80      	subs	r3, #128	; 0x80
 80082e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082ec:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80082f0:	f7f8 f974 	bl	80005dc <__aeabi_dmul>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4610      	mov	r0, r2
 80082fa:	4619      	mov	r1, r3
 80082fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008306:	4413      	add	r3, r2
 8008308:	3b80      	subs	r3, #128	; 0x80
 800830a:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800830e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008312:	3301      	adds	r3, #1
 8008314:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008318:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800831c:	2b02      	cmp	r3, #2
 800831e:	dddc      	ble.n	80082da <qr_5a2P8Gh6+0x24a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8008320:	2300      	movs	r3, #0
 8008322:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008326:	e010      	b.n	800834a <qr_5a2P8Gh6+0x2ba>
        beta1 *= 1.0020841800044864E-292;
 8008328:	f04f 0200 	mov.w	r2, #0
 800832c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8008330:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008334:	f7f8 f952 	bl	80005dc <__aeabi_dmul>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8008340:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008344:	3301      	adds	r3, #1
 8008346:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800834a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800834e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008352:	429a      	cmp	r2, r3
 8008354:	dbe8      	blt.n	8008328 <qr_5a2P8Gh6+0x298>
      }

      atmp = beta1;
 8008356:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800835a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800835e:	e04d      	b.n	80083fc <qr_5a2P8Gh6+0x36c>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 8008360:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008364:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008368:	f7f7 ff80 	bl	800026c <__aeabi_dsub>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4610      	mov	r0, r2
 8008372:	4619      	mov	r1, r3
 8008374:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008378:	f7f8 fa5a 	bl	8000830 <__aeabi_ddiv>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (b_A[0] - beta1);
 8008384:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8008388:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800838c:	f7f7 ff6e 	bl	800026c <__aeabi_dsub>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	f04f 0000 	mov.w	r0, #0
 8008398:	494f      	ldr	r1, [pc, #316]	; (80084d8 <qr_5a2P8Gh6+0x448>)
 800839a:	f7f8 fa49 	bl	8000830 <__aeabi_ddiv>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 80083a6:	2301      	movs	r3, #1
 80083a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083ac:	e01e      	b.n	80083ec <qr_5a2P8Gh6+0x35c>
        b_A[c_lastc] *= atmp;
 80083ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80083b8:	4413      	add	r3, r2
 80083ba:	3b80      	subs	r3, #128	; 0x80
 80083bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083c0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80083c4:	f7f8 f90a 	bl	80005dc <__aeabi_dmul>
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	4610      	mov	r0, r2
 80083ce:	4619      	mov	r1, r3
 80083d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80083da:	4413      	add	r3, r2
 80083dc:	3b80      	subs	r3, #128	; 0x80
 80083de:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 80083e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083e6:	3301      	adds	r3, #1
 80083e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	dddc      	ble.n	80083ae <qr_5a2P8Gh6+0x31e>
      }

      atmp = beta1;
 80083f4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80083f8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[0] = 1.0;
 80083fc:	f04f 0200 	mov.w	r2, #0
 8008400:	4b35      	ldr	r3, [pc, #212]	; (80084d8 <qr_5a2P8Gh6+0x448>)
 8008402:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 8008406:	f04f 0200 	mov.w	r2, #0
 800840a:	f04f 0300 	mov.w	r3, #0
 800840e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008412:	f7f8 fb4b 	bl	8000aac <__aeabi_dcmpeq>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	f040 8081 	bne.w	8008520 <qr_5a2P8Gh6+0x490>
    knt = 3;
 800841e:	2303      	movs	r3, #3
 8008420:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 2;
 8008424:	2302      	movs	r3, #2
 8008426:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800842a:	e009      	b.n	8008440 <qr_5a2P8Gh6+0x3b0>
      knt--;
 800842c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008430:	3b01      	subs	r3, #1
 8008432:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 8008436:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800843a:	3b01      	subs	r3, #1
 800843c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8008440:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008444:	2b00      	cmp	r3, #0
 8008446:	dd11      	ble.n	800846c <qr_5a2P8Gh6+0x3dc>
 8008448:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008452:	4413      	add	r3, r2
 8008454:	3b80      	subs	r3, #128	; 0x80
 8008456:	e9d3 0100 	ldrd	r0, r1, [r3]
 800845a:	f04f 0200 	mov.w	r2, #0
 800845e:	f04f 0300 	mov.w	r3, #0
 8008462:	f7f8 fb23 	bl	8000aac <__aeabi_dcmpeq>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1df      	bne.n	800842c <qr_5a2P8Gh6+0x39c>
    }

    c_lastc = 2;
 800846c:	2302      	movs	r3, #2
 800846e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    exitg2 = false;
 8008472:	2300      	movs	r3, #0
 8008474:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 8008478:	e049      	b.n	800850e <qr_5a2P8Gh6+0x47e>
      b_coltop = (c_lastc - 1) * 3 + 3;
 800847a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800847e:	4613      	mov	r3, r2
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	4413      	add	r3, r2
 8008484:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      coltop = b_coltop;
 8008488:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800848c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      do {
        exitg1 = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (coltop + 1 <= b_coltop + knt) {
 8008496:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800849a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800849e:	441a      	add	r2, r3
 80084a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80084a4:	4293      	cmp	r3, r2
 80084a6:	da1f      	bge.n	80084e8 <qr_5a2P8Gh6+0x458>
          if (b_A[coltop] != 0.0) {
 80084a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80084ac:	00db      	lsls	r3, r3, #3
 80084ae:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80084b2:	4413      	add	r3, r2
 80084b4:	3b80      	subs	r3, #128	; 0x80
 80084b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084ba:	f04f 0200 	mov.w	r2, #0
 80084be:	f04f 0300 	mov.w	r3, #0
 80084c2:	f7f8 faf3 	bl	8000aac <__aeabi_dcmpeq>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d107      	bne.n	80084dc <qr_5a2P8Gh6+0x44c>
            exitg1 = 1;
 80084cc:	2301      	movs	r3, #1
 80084ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084d2:	e011      	b.n	80084f8 <qr_5a2P8Gh6+0x468>
 80084d4:	7c900000 	.word	0x7c900000
 80084d8:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 80084dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80084e0:	3301      	adds	r3, #1
 80084e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084e6:	e007      	b.n	80084f8 <qr_5a2P8Gh6+0x468>
          }
        } else {
          c_lastc--;
 80084e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084ec:	3b01      	subs	r3, #1
 80084ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
          exitg1 = 2;
 80084f2:	2302      	movs	r3, #2
 80084f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 80084f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0c7      	beq.n	8008490 <qr_5a2P8Gh6+0x400>

      if (exitg1 == 1) {
 8008500:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008504:	2b01      	cmp	r3, #1
 8008506:	d102      	bne.n	800850e <qr_5a2P8Gh6+0x47e>
        exitg2 = true;
 8008508:	2301      	movs	r3, #1
 800850a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 800850e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10a      	bne.n	800852c <qr_5a2P8Gh6+0x49c>
 8008516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800851a:	2b00      	cmp	r3, #0
 800851c:	dcad      	bgt.n	800847a <qr_5a2P8Gh6+0x3ea>
 800851e:	e005      	b.n	800852c <qr_5a2P8Gh6+0x49c>
      }
    }
  } else {
    knt = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 8008526:	2300      	movs	r3, #0
 8008528:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 800852c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008530:	2b00      	cmp	r3, #0
 8008532:	dd29      	ble.n	8008588 <qr_5a2P8Gh6+0x4f8>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 4, b_A, 1, work);
 8008534:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008538:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800853c:	9302      	str	r3, [sp, #8]
 800853e:	2301      	movs	r3, #1
 8008540:	9301      	str	r3, [sp, #4]
 8008542:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	2304      	movs	r3, #4
 800854a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800854e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8008552:	f004 f951 	bl	800c7f8 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_0, 1, work, b_A, 4);
 8008556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800855a:	63bb      	str	r3, [r7, #56]	; 0x38
 800855c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008560:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008566:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800856a:	2304      	movs	r3, #4
 800856c:	9301      	str	r3, [sp, #4]
 800856e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	4613      	mov	r3, r2
 8008576:	2201      	movs	r2, #1
 8008578:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800857c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008580:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8008584:	f004 fa41 	bl	800ca0a <xgerc_tNNiazQU>
  }

  b_A[0] = atmp;
 8008588:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800858c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  atmp = b_A[4];
 8008590:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008594:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(1, b_A, 6);
 8008598:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800859c:	2206      	movs	r2, #6
 800859e:	4619      	mov	r1, r3
 80085a0:	2001      	movs	r0, #1
 80085a2:	f004 fd6d 	bl	800d080 <xnrm2_xDOlDEtw>
 80085a6:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 80085aa:	f04f 0200 	mov.w	r2, #0
 80085ae:	f04f 0300 	mov.w	r3, #0
 80085b2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80085b6:	f7f8 fa79 	bl	8000aac <__aeabi_dcmpeq>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f040 8170 	bne.w	80088a2 <qr_5a2P8Gh6+0x812>
    beta1 = rt_hypotd_snf(b_A[4], beta1);
 80085c2:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 80085c6:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 80085ca:	eeb0 0a47 	vmov.f32	s0, s14
 80085ce:	eef0 0a67 	vmov.f32	s1, s15
 80085d2:	f001 ffc1 	bl	800a558 <rt_hypotd_snf>
 80085d6:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[4] >= 0.0) {
 80085da:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80085de:	f04f 0200 	mov.w	r2, #0
 80085e2:	f04f 0300 	mov.w	r3, #0
 80085e6:	f7f8 fa7f 	bl	8000ae8 <__aeabi_dcmpge>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d009      	beq.n	8008604 <qr_5a2P8Gh6+0x574>
      beta1 = -beta1;
 80085f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008600:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 8008604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008608:	633b      	str	r3, [r7, #48]	; 0x30
 800860a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800860e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008612:	637b      	str	r3, [r7, #52]	; 0x34
 8008614:	f04f 0200 	mov.w	r2, #0
 8008618:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800861c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008620:	f7f8 fa4e 	bl	8000ac0 <__aeabi_dcmplt>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 80ef 	beq.w	800880a <qr_5a2P8Gh6+0x77a>
      knt = 0;
 800862c:	2300      	movs	r3, #0
 800862e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 8008632:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008636:	3301      	adds	r3, #1
 8008638:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800863c:	2305      	movs	r3, #5
 800863e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008642:	e01f      	b.n	8008684 <qr_5a2P8Gh6+0x5f4>
          b_A[b_coltop] *= 9.9792015476736E+291;
 8008644:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008648:	00db      	lsls	r3, r3, #3
 800864a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800864e:	4413      	add	r3, r2
 8008650:	3b80      	subs	r3, #128	; 0x80
 8008652:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008656:	f04f 0200 	mov.w	r2, #0
 800865a:	4bc9      	ldr	r3, [pc, #804]	; (8008980 <qr_5a2P8Gh6+0x8f0>)
 800865c:	f7f7 ffbe 	bl	80005dc <__aeabi_dmul>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	4610      	mov	r0, r2
 8008666:	4619      	mov	r1, r3
 8008668:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008672:	4413      	add	r3, r2
 8008674:	3b80      	subs	r3, #128	; 0x80
 8008676:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800867a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800867e:	3301      	adds	r3, #1
 8008680:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008688:	2b05      	cmp	r3, #5
 800868a:	dddb      	ble.n	8008644 <qr_5a2P8Gh6+0x5b4>
        }

        beta1 *= 9.9792015476736E+291;
 800868c:	f04f 0200 	mov.w	r2, #0
 8008690:	4bbb      	ldr	r3, [pc, #748]	; (8008980 <qr_5a2P8Gh6+0x8f0>)
 8008692:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008696:	f7f7 ffa1 	bl	80005dc <__aeabi_dmul>
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 80086a2:	f04f 0200 	mov.w	r2, #0
 80086a6:	4bb6      	ldr	r3, [pc, #728]	; (8008980 <qr_5a2P8Gh6+0x8f0>)
 80086a8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80086ac:	f7f7 ff96 	bl	80005dc <__aeabi_dmul>
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 80086b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80086be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086c8:	f04f 0200 	mov.w	r2, #0
 80086cc:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80086d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80086d4:	f7f8 f9f4 	bl	8000ac0 <__aeabi_dcmplt>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <qr_5a2P8Gh6+0x656>
 80086de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80086e2:	2b13      	cmp	r3, #19
 80086e4:	dda5      	ble.n	8008632 <qr_5a2P8Gh6+0x5a2>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(1, b_A, 6));
 80086e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80086ea:	2206      	movs	r2, #6
 80086ec:	4619      	mov	r1, r3
 80086ee:	2001      	movs	r0, #1
 80086f0:	f004 fcc6 	bl	800d080 <xnrm2_xDOlDEtw>
 80086f4:	eeb0 7a40 	vmov.f32	s14, s0
 80086f8:	eef0 7a60 	vmov.f32	s15, s1
 80086fc:	eeb0 1a47 	vmov.f32	s2, s14
 8008700:	eef0 1a67 	vmov.f32	s3, s15
 8008704:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8008708:	f001 ff26 	bl	800a558 <rt_hypotd_snf>
 800870c:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 8008710:	f04f 0200 	mov.w	r2, #0
 8008714:	f04f 0300 	mov.w	r3, #0
 8008718:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800871c:	f7f8 f9e4 	bl	8000ae8 <__aeabi_dcmpge>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d009      	beq.n	800873a <qr_5a2P8Gh6+0x6aa>
        beta1 = -beta1;
 8008726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800872a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800872e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008732:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 800873a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800873e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008742:	f7f7 fd93 	bl	800026c <__aeabi_dsub>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	4610      	mov	r0, r2
 800874c:	4619      	mov	r1, r3
 800874e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008752:	f7f8 f86d 	bl	8000830 <__aeabi_ddiv>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (atmp - beta1);
 800875e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008762:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8008766:	f7f7 fd81 	bl	800026c <__aeabi_dsub>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	f04f 0000 	mov.w	r0, #0
 8008772:	4984      	ldr	r1, [pc, #528]	; (8008984 <qr_5a2P8Gh6+0x8f4>)
 8008774:	f7f8 f85c 	bl	8000830 <__aeabi_ddiv>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 8008780:	2305      	movs	r3, #5
 8008782:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008786:	e01c      	b.n	80087c2 <qr_5a2P8Gh6+0x732>
        b_A[b_coltop] *= atmp;
 8008788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800878c:	00db      	lsls	r3, r3, #3
 800878e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008792:	4413      	add	r3, r2
 8008794:	3b80      	subs	r3, #128	; 0x80
 8008796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800879a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800879e:	f7f7 ff1d 	bl	80005dc <__aeabi_dmul>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80087aa:	00c9      	lsls	r1, r1, #3
 80087ac:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 80087b0:	4401      	add	r1, r0
 80087b2:	3980      	subs	r1, #128	; 0x80
 80087b4:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 80087b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80087bc:	3301      	adds	r3, #1
 80087be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80087c6:	2b05      	cmp	r3, #5
 80087c8:	ddde      	ble.n	8008788 <qr_5a2P8Gh6+0x6f8>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 80087ca:	2300      	movs	r3, #0
 80087cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087d0:	e010      	b.n	80087f4 <qr_5a2P8Gh6+0x764>
        beta1 *= 1.0020841800044864E-292;
 80087d2:	f04f 0200 	mov.w	r2, #0
 80087d6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80087da:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80087de:	f7f7 fefd 	bl	80005dc <__aeabi_dmul>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 80087ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087ee:	3301      	adds	r3, #1
 80087f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087f4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80087f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087fc:	429a      	cmp	r2, r3
 80087fe:	dbe8      	blt.n	80087d2 <qr_5a2P8Gh6+0x742>
      }

      atmp = beta1;
 8008800:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008804:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 8008808:	e04b      	b.n	80088a2 <qr_5a2P8Gh6+0x812>
    } else {
      tau_idx_1 = (beta1 - b_A[4]) / beta1;
 800880a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800880e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008812:	f7f7 fd2b 	bl	800026c <__aeabi_dsub>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4610      	mov	r0, r2
 800881c:	4619      	mov	r1, r3
 800881e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008822:	f7f8 f805 	bl	8000830 <__aeabi_ddiv>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (b_A[4] - beta1);
 800882e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008832:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008836:	f7f7 fd19 	bl	800026c <__aeabi_dsub>
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
 800883e:	f04f 0000 	mov.w	r0, #0
 8008842:	4950      	ldr	r1, [pc, #320]	; (8008984 <qr_5a2P8Gh6+0x8f4>)
 8008844:	f7f7 fff4 	bl	8000830 <__aeabi_ddiv>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 8008850:	2305      	movs	r3, #5
 8008852:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008856:	e01c      	b.n	8008892 <qr_5a2P8Gh6+0x802>
        b_A[c_lastc] *= atmp;
 8008858:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800885c:	00db      	lsls	r3, r3, #3
 800885e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008862:	4413      	add	r3, r2
 8008864:	3b80      	subs	r3, #128	; 0x80
 8008866:	e9d3 0100 	ldrd	r0, r1, [r3]
 800886a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800886e:	f7f7 feb5 	bl	80005dc <__aeabi_dmul>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800887a:	00c9      	lsls	r1, r1, #3
 800887c:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8008880:	4401      	add	r1, r0
 8008882:	3980      	subs	r1, #128	; 0x80
 8008884:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 8008888:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800888c:	3301      	adds	r3, #1
 800888e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008892:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008896:	2b05      	cmp	r3, #5
 8008898:	ddde      	ble.n	8008858 <qr_5a2P8Gh6+0x7c8>
      }

      atmp = beta1;
 800889a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800889e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[4] = 1.0;
 80088a2:	f04f 0200 	mov.w	r2, #0
 80088a6:	4b37      	ldr	r3, [pc, #220]	; (8008984 <qr_5a2P8Gh6+0x8f4>)
 80088a8:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 80088ac:	f04f 0200 	mov.w	r2, #0
 80088b0:	f04f 0300 	mov.w	r3, #0
 80088b4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80088b8:	f7f8 f8f8 	bl	8000aac <__aeabi_dcmpeq>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d162      	bne.n	8008988 <qr_5a2P8Gh6+0x8f8>
    knt = 2;
 80088c2:	2302      	movs	r3, #2
 80088c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 5;
 80088c8:	2305      	movs	r3, #5
 80088ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 80088ce:	e009      	b.n	80088e4 <qr_5a2P8Gh6+0x854>
      knt--;
 80088d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80088d4:	3b01      	subs	r3, #1
 80088d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 80088da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088de:	3b01      	subs	r3, #1
 80088e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 80088e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	dd11      	ble.n	8008910 <qr_5a2P8Gh6+0x880>
 80088ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088f0:	00db      	lsls	r3, r3, #3
 80088f2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80088f6:	4413      	add	r3, r2
 80088f8:	3b80      	subs	r3, #128	; 0x80
 80088fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80088fe:	f04f 0200 	mov.w	r2, #0
 8008902:	f04f 0300 	mov.w	r3, #0
 8008906:	f7f8 f8d1 	bl	8000aac <__aeabi_dcmpeq>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1df      	bne.n	80088d0 <qr_5a2P8Gh6+0x840>
    }

    c_lastc = 1;
 8008910:	2301      	movs	r3, #1
 8008912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    coltop = 7;
 8008916:	2307      	movs	r3, #7
 8008918:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    do {
      exitg1 = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (coltop + 1 <= knt + 7) {
 8008922:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008926:	3306      	adds	r3, #6
 8008928:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800892c:	429a      	cmp	r2, r3
 800892e:	dc1b      	bgt.n	8008968 <qr_5a2P8Gh6+0x8d8>
        if (b_A[coltop] != 0.0) {
 8008930:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800893a:	4413      	add	r3, r2
 800893c:	3b80      	subs	r3, #128	; 0x80
 800893e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008942:	f04f 0200 	mov.w	r2, #0
 8008946:	f04f 0300 	mov.w	r3, #0
 800894a:	f7f8 f8af 	bl	8000aac <__aeabi_dcmpeq>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d103      	bne.n	800895c <qr_5a2P8Gh6+0x8cc>
          exitg1 = 1;
 8008954:	2301      	movs	r3, #1
 8008956:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800895a:	e00b      	b.n	8008974 <qr_5a2P8Gh6+0x8e4>
        } else {
          coltop++;
 800895c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008960:	3301      	adds	r3, #1
 8008962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008966:	e005      	b.n	8008974 <qr_5a2P8Gh6+0x8e4>
        }
      } else {
        c_lastc = 0;
 8008968:	2300      	movs	r3, #0
 800896a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        exitg1 = 1;
 800896e:	2301      	movs	r3, #1
 8008970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 8008974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0cf      	beq.n	800891c <qr_5a2P8Gh6+0x88c>
 800897c:	e00a      	b.n	8008994 <qr_5a2P8Gh6+0x904>
 800897e:	bf00      	nop
 8008980:	7c900000 	.word	0x7c900000
 8008984:	3ff00000 	.word	0x3ff00000
  } else {
    knt = 0;
 8008988:	2300      	movs	r3, #0
 800898a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 800898e:	2300      	movs	r3, #0
 8008990:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 8008994:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008998:	2b00      	cmp	r3, #0
 800899a:	dd29      	ble.n	80089f0 <qr_5a2P8Gh6+0x960>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 8, b_A, 5, work);
 800899c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80089a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089a4:	9302      	str	r3, [sp, #8]
 80089a6:	2305      	movs	r3, #5
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	2308      	movs	r3, #8
 80089b2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80089b6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80089ba:	f003 ff1d 	bl	800c7f8 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_1, 5, work, b_A, 8);
 80089be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80089c2:	623b      	str	r3, [r7, #32]
 80089c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80089c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80089cc:	627b      	str	r3, [r7, #36]	; 0x24
 80089ce:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80089d2:	2308      	movs	r3, #8
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	4613      	mov	r3, r2
 80089de:	2205      	movs	r2, #5
 80089e0:	ed97 0b08 	vldr	d0, [r7, #32]
 80089e4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80089e8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80089ec:	f004 f80d 	bl	800ca0a <xgerc_tNNiazQU>
  }

  b_A[4] = atmp;
 80089f0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80089f4:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  R[0] = b_A[0];
 80089f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80089fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80089fe:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 8008a02:	2301      	movs	r3, #1
 8008a04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a08:	e00f      	b.n	8008a2a <qr_5a2P8Gh6+0x99a>
    R[c_lastc] = 0.0;
 8008a0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a12:	18d1      	adds	r1, r2, r3
 8008a14:	f04f 0200 	mov.w	r2, #0
 8008a18:	f04f 0300 	mov.w	r3, #0
 8008a1c:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 8008a20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a24:	3301      	adds	r3, #1
 8008a26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	ddeb      	ble.n	8008a0a <qr_5a2P8Gh6+0x97a>
  }

  work[0] = 0.0;
 8008a32:	f04f 0200 	mov.w	r2, #0
 8008a36:	f04f 0300 	mov.w	r3, #0
 8008a3a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a44:	e016      	b.n	8008a74 <qr_5a2P8Gh6+0x9e4>
    R[c_lastc + 3] = b_A[c_lastc + 3];
 8008a46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a4a:	3303      	adds	r3, #3
 8008a4c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a50:	3203      	adds	r2, #3
 8008a52:	00d2      	lsls	r2, r2, #3
 8008a54:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008a56:	4411      	add	r1, r2
 8008a58:	00db      	lsls	r3, r3, #3
 8008a5a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008a5e:	4413      	add	r3, r2
 8008a60:	3b80      	subs	r3, #128	; 0x80
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 8008a6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a6e:	3301      	adds	r3, #1
 8008a70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	dde4      	ble.n	8008a46 <qr_5a2P8Gh6+0x9b6>
  }

  while (c_lastc + 1 < 4) {
 8008a7c:	e010      	b.n	8008aa0 <qr_5a2P8Gh6+0xa10>
    R[c_lastc + 3] = 0.0;
 8008a7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a82:	3303      	adds	r3, #3
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a88:	18d1      	adds	r1, r2, r3
 8008a8a:	f04f 0200 	mov.w	r2, #0
 8008a8e:	f04f 0300 	mov.w	r3, #0
 8008a92:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 8008a96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  while (c_lastc + 1 < 4) {
 8008aa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	ddea      	ble.n	8008a7e <qr_5a2P8Gh6+0x9ee>
  }

  work[1] = 0.0;
 8008aa8:	f04f 0200 	mov.w	r2, #0
 8008aac:	f04f 0300 	mov.w	r3, #0
 8008ab0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008aba:	e016      	b.n	8008aea <qr_5a2P8Gh6+0xa5a>
    R[c_lastc + 6] = b_A[c_lastc + 6];
 8008abc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ac0:	3306      	adds	r3, #6
 8008ac2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008ac6:	3206      	adds	r2, #6
 8008ac8:	00d2      	lsls	r2, r2, #3
 8008aca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008acc:	4411      	add	r1, r2
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008ad4:	4413      	add	r3, r2
 8008ad6:	3b80      	subs	r3, #128	; 0x80
 8008ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008adc:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 8008ae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008aea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	dde4      	ble.n	8008abc <qr_5a2P8Gh6+0xa2c>
  }

  work[2] = 0.0;
 8008af2:	f04f 0200 	mov.w	r2, #0
 8008af6:	f04f 0300 	mov.w	r3, #0
 8008afa:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  b_A[8] = 1.0;
 8008afe:	f04f 0200 	mov.w	r2, #0
 8008b02:	4bc8      	ldr	r3, [pc, #800]	; (8008e24 <qr_5a2P8Gh6+0xd94>)
 8008b04:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b0e:	e014      	b.n	8008b3a <qr_5a2P8Gh6+0xaaa>
    b_A[7 - c_lastc] = 0.0;
 8008b10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b14:	f1c3 0307 	rsb	r3, r3, #7
 8008b18:	00db      	lsls	r3, r3, #3
 8008b1a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008b1e:	4413      	add	r3, r2
 8008b20:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 8008b24:	f04f 0200 	mov.w	r2, #0
 8008b28:	f04f 0300 	mov.w	r3, #0
 8008b2c:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 8008b30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b34:	3301      	adds	r3, #1
 8008b36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	dde6      	ble.n	8008b10 <qr_5a2P8Gh6+0xa80>
  }

  b_A[4] = 1.0;
 8008b42:	f04f 0200 	mov.w	r2, #0
 8008b46:	4bb7      	ldr	r3, [pc, #732]	; (8008e24 <qr_5a2P8Gh6+0xd94>)
 8008b48:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 8008b4c:	f04f 0200 	mov.w	r2, #0
 8008b50:	f04f 0300 	mov.w	r3, #0
 8008b54:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008b58:	f7f7 ffa8 	bl	8000aac <__aeabi_dcmpeq>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d15c      	bne.n	8008c1c <qr_5a2P8Gh6+0xb8c>
    b_coltop = 7;
 8008b62:	2307      	movs	r3, #7
 8008b64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 8008b68:	e009      	b.n	8008b7e <qr_5a2P8Gh6+0xaee>
      c_lastc--;
 8008b6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 8008b74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 8008b7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	dd12      	ble.n	8008bac <qr_5a2P8Gh6+0xb1c>
 8008b86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b8a:	3b02      	subs	r3, #2
 8008b8c:	00db      	lsls	r3, r3, #3
 8008b8e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008b92:	4413      	add	r3, r2
 8008b94:	3b80      	subs	r3, #128	; 0x80
 8008b96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b9a:	f04f 0200 	mov.w	r2, #0
 8008b9e:	f04f 0300 	mov.w	r3, #0
 8008ba2:	f7f7 ff83 	bl	8000aac <__aeabi_dcmpeq>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1de      	bne.n	8008b6a <qr_5a2P8Gh6+0xada>
    }

    b_coltop = 1;
 8008bac:	2301      	movs	r3, #1
 8008bae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    knt = 8;
 8008bb2:	2308      	movs	r3, #8
 8008bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    do {
      exitg1 = 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (knt <= c_lastc + 7) {
 8008bbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bc2:	3307      	adds	r3, #7
 8008bc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	dc1c      	bgt.n	8008c06 <qr_5a2P8Gh6+0xb76>
        if (b_A[knt - 1] != 0.0) {
 8008bcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008bd8:	4413      	add	r3, r2
 8008bda:	3b80      	subs	r3, #128	; 0x80
 8008bdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008be0:	f04f 0200 	mov.w	r2, #0
 8008be4:	f04f 0300 	mov.w	r3, #0
 8008be8:	f7f7 ff60 	bl	8000aac <__aeabi_dcmpeq>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d103      	bne.n	8008bfa <qr_5a2P8Gh6+0xb6a>
          exitg1 = 1;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bf8:	e00b      	b.n	8008c12 <qr_5a2P8Gh6+0xb82>
        } else {
          knt++;
 8008bfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008bfe:	3301      	adds	r3, #1
 8008c00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c04:	e005      	b.n	8008c12 <qr_5a2P8Gh6+0xb82>
        }
      } else {
        b_coltop = 0;
 8008c06:	2300      	movs	r3, #0
 8008c08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        exitg1 = 1;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 8008c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0ce      	beq.n	8008bb8 <qr_5a2P8Gh6+0xb28>
 8008c1a:	e005      	b.n	8008c28 <qr_5a2P8Gh6+0xb98>
  } else {
    c_lastc = 0;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 8008c28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	dd29      	ble.n	8008c84 <qr_5a2P8Gh6+0xbf4>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 8, b_A, 5, work);
 8008c30:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008c34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c38:	9302      	str	r3, [sp, #8]
 8008c3a:	2305      	movs	r3, #5
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	2308      	movs	r3, #8
 8008c46:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008c4a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8008c4e:	f003 fdd3 	bl	800c7f8 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_1, 5, work, b_A, 8);
 8008c52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008c56:	61bb      	str	r3, [r7, #24]
 8008c58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008c60:	61fb      	str	r3, [r7, #28]
 8008c62:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008c66:	2308      	movs	r3, #8
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	4613      	mov	r3, r2
 8008c72:	2205      	movs	r2, #5
 8008c74:	ed97 0b06 	vldr	d0, [r7, #24]
 8008c78:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008c7c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8008c80:	f003 fec3 	bl	800ca0a <xgerc_tNNiazQU>
  }

  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 8008c84:	2305      	movs	r3, #5
 8008c86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c8a:	e024      	b.n	8008cd6 <qr_5a2P8Gh6+0xc46>
    b_A[b_coltop] *= -tau_idx_1;
 8008c8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008c96:	4413      	add	r3, r2
 8008c98:	3b80      	subs	r3, #128	; 0x80
 8008c9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008ca2:	613b      	str	r3, [r7, #16]
 8008ca4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ca8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008cac:	617b      	str	r3, [r7, #20]
 8008cae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cb2:	f7f7 fc93 	bl	80005dc <__aeabi_dmul>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008cbe:	00c9      	lsls	r1, r1, #3
 8008cc0:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8008cc4:	4401      	add	r1, r0
 8008cc6:	3980      	subs	r1, #128	; 0x80
 8008cc8:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 8008ccc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008cd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008cda:	2b05      	cmp	r3, #5
 8008cdc:	ddd6      	ble.n	8008c8c <qr_5a2P8Gh6+0xbfc>
  }

  b_A[4] = 1.0 - tau_idx_1;
 8008cde:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8008ce2:	f04f 0000 	mov.w	r0, #0
 8008ce6:	494f      	ldr	r1, [pc, #316]	; (8008e24 <qr_5a2P8Gh6+0xd94>)
 8008ce8:	f7f7 fac0 	bl	800026c <__aeabi_dsub>
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  b_A[3] = 0.0;
 8008cf4:	f04f 0200 	mov.w	r2, #0
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_A[0] = 1.0;
 8008d00:	f04f 0200 	mov.w	r2, #0
 8008d04:	4b47      	ldr	r3, [pc, #284]	; (8008e24 <qr_5a2P8Gh6+0xd94>)
 8008d06:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 8008d0a:	f04f 0200 	mov.w	r2, #0
 8008d0e:	f04f 0300 	mov.w	r3, #0
 8008d12:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008d16:	f7f7 fec9 	bl	8000aac <__aeabi_dcmpeq>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f040 8083 	bne.w	8008e28 <qr_5a2P8Gh6+0xd98>
    c_lastc = 3;
 8008d22:	2303      	movs	r3, #3
 8008d24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 4;
 8008d28:	2304      	movs	r3, #4
 8008d2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 8008d2e:	e009      	b.n	8008d44 <qr_5a2P8Gh6+0xcb4>
      c_lastc--;
 8008d30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d34:	3b01      	subs	r3, #1
 8008d36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 8008d3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 8008d44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	dd12      	ble.n	8008d72 <qr_5a2P8Gh6+0xce2>
 8008d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008d50:	3b02      	subs	r3, #2
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008d58:	4413      	add	r3, r2
 8008d5a:	3b80      	subs	r3, #128	; 0x80
 8008d5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d60:	f04f 0200 	mov.w	r2, #0
 8008d64:	f04f 0300 	mov.w	r3, #0
 8008d68:	f7f7 fea0 	bl	8000aac <__aeabi_dcmpeq>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1de      	bne.n	8008d30 <qr_5a2P8Gh6+0xca0>
    }

    b_coltop = 2;
 8008d72:	2302      	movs	r3, #2
 8008d74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    exitg2 = false;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 8008d7e:	e048      	b.n	8008e12 <qr_5a2P8Gh6+0xd82>
      coltop = (b_coltop - 1) * 3 + 4;
 8008d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008d84:	1e5a      	subs	r2, r3, #1
 8008d86:	4613      	mov	r3, r2
 8008d88:	005b      	lsls	r3, r3, #1
 8008d8a:	4413      	add	r3, r2
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      knt = coltop;
 8008d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        exitg1 = 0;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (knt <= (coltop + c_lastc) - 1) {
 8008da0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008da4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008da8:	4413      	add	r3, r2
 8008daa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008dae:	429a      	cmp	r2, r3
 8008db0:	da1c      	bge.n	8008dec <qr_5a2P8Gh6+0xd5c>
          if (b_A[knt - 1] != 0.0) {
 8008db2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008db6:	3b01      	subs	r3, #1
 8008db8:	00db      	lsls	r3, r3, #3
 8008dba:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008dbe:	4413      	add	r3, r2
 8008dc0:	3b80      	subs	r3, #128	; 0x80
 8008dc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008dc6:	f04f 0200 	mov.w	r2, #0
 8008dca:	f04f 0300 	mov.w	r3, #0
 8008dce:	f7f7 fe6d 	bl	8000aac <__aeabi_dcmpeq>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d103      	bne.n	8008de0 <qr_5a2P8Gh6+0xd50>
            exitg1 = 1;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dde:	e00d      	b.n	8008dfc <qr_5a2P8Gh6+0xd6c>
          } else {
            knt++;
 8008de0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008de4:	3301      	adds	r3, #1
 8008de6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008dea:	e007      	b.n	8008dfc <qr_5a2P8Gh6+0xd6c>
          }
        } else {
          b_coltop--;
 8008dec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008df0:	3b01      	subs	r3, #1
 8008df2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          exitg1 = 2;
 8008df6:	2302      	movs	r3, #2
 8008df8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 8008dfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0ca      	beq.n	8008d9a <qr_5a2P8Gh6+0xd0a>

      if (exitg1 == 1) {
 8008e04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d102      	bne.n	8008e12 <qr_5a2P8Gh6+0xd82>
        exitg2 = true;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 8008e12:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10c      	bne.n	8008e34 <qr_5a2P8Gh6+0xda4>
 8008e1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	dcae      	bgt.n	8008d80 <qr_5a2P8Gh6+0xcf0>
 8008e22:	e007      	b.n	8008e34 <qr_5a2P8Gh6+0xda4>
 8008e24:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 8008e34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	dd29      	ble.n	8008e90 <qr_5a2P8Gh6+0xe00>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 4, b_A, 1, work);
 8008e3c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008e40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e44:	9302      	str	r3, [sp, #8]
 8008e46:	2301      	movs	r3, #1
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	2304      	movs	r3, #4
 8008e52:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008e56:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8008e5a:	f003 fccd 	bl	800c7f8 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 4);
 8008e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e62:	60bb      	str	r3, [r7, #8]
 8008e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008e6c:	60fb      	str	r3, [r7, #12]
 8008e6e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008e72:	2304      	movs	r3, #4
 8008e74:	9301      	str	r3, [sp, #4]
 8008e76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	2201      	movs	r2, #1
 8008e80:	ed97 0b02 	vldr	d0, [r7, #8]
 8008e84:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008e88:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8008e8c:	f003 fdbd 	bl	800ca0a <xgerc_tNNiazQU>
  }

  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8008e90:	2301      	movs	r3, #1
 8008e92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e96:	e024      	b.n	8008ee2 <qr_5a2P8Gh6+0xe52>
    b_A[b_coltop] *= -tau_idx_0;
 8008e98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e9c:	00db      	lsls	r3, r3, #3
 8008e9e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008ea2:	4413      	add	r3, r2
 8008ea4:	3b80      	subs	r3, #128	; 0x80
 8008ea6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eb4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008eb8:	607b      	str	r3, [r7, #4]
 8008eba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ebe:	f7f7 fb8d 	bl	80005dc <__aeabi_dmul>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008eca:	00c9      	lsls	r1, r1, #3
 8008ecc:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8008ed0:	4401      	add	r1, r0
 8008ed2:	3980      	subs	r1, #128	; 0x80
 8008ed4:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8008ed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008edc:	3301      	adds	r3, #1
 8008ede:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ee2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	ddd6      	ble.n	8008e98 <qr_5a2P8Gh6+0xe08>
  }

  b_A[0] = 1.0 - tau_idx_0;
 8008eea:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8008eee:	f04f 0000 	mov.w	r0, #0
 8008ef2:	492a      	ldr	r1, [pc, #168]	; (8008f9c <qr_5a2P8Gh6+0xf0c>)
 8008ef4:	f7f7 f9ba 	bl	800026c <__aeabi_dsub>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  c_lastc = 0;
 8008f00:	2300      	movs	r3, #0
 8008f02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 8008f06:	2300      	movs	r3, #0
 8008f08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f0c:	e03d      	b.n	8008f8a <qr_5a2P8Gh6+0xefa>
    Q[c_lastc] = b_A[c_lastc];
 8008f0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f16:	18d1      	adds	r1, r2, r3
 8008f18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f1c:	00db      	lsls	r3, r3, #3
 8008f1e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008f22:	4413      	add	r3, r2
 8008f24:	3b80      	subs	r3, #128	; 0x80
 8008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2a:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 1] = b_A[c_lastc + 1];
 8008f2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f32:	3301      	adds	r3, #1
 8008f34:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008f38:	3201      	adds	r2, #1
 8008f3a:	00d2      	lsls	r2, r2, #3
 8008f3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f3e:	4411      	add	r1, r2
 8008f40:	00db      	lsls	r3, r3, #3
 8008f42:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008f46:	4413      	add	r3, r2
 8008f48:	3b80      	subs	r3, #128	; 0x80
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 2] = b_A[c_lastc + 2];
 8008f52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f56:	3302      	adds	r3, #2
 8008f58:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008f5c:	3202      	adds	r2, #2
 8008f5e:	00d2      	lsls	r2, r2, #3
 8008f60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f62:	4411      	add	r1, r2
 8008f64:	00db      	lsls	r3, r3, #3
 8008f66:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008f6a:	4413      	add	r3, r2
 8008f6c:	3b80      	subs	r3, #128	; 0x80
 8008f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f72:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc += 3;
 8008f76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f7a:	3303      	adds	r3, #3
 8008f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 8008f80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008f84:	3301      	adds	r3, #1
 8008f86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	ddbd      	ble.n	8008f0e <qr_5a2P8Gh6+0xe7e>
  }
}
 8008f92:	bf00      	nop
 8008f94:	bf00      	nop
 8008f96:	37f0      	adds	r7, #240	; 0xf0
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8008f9c:	3ff00000 	.word	0x3ff00000

08008fa0 <qr_DvOBrgQi>:
#include <math.h>
#include "xgemv_NQlWbt2i.h"
#include "xgerc_R09LiDgJ.h"

void qr_DvOBrgQi(const real_T A[18], real_T Q[18], real_T R[9])
{
 8008fa0:	b5b0      	push	{r4, r5, r7, lr}
 8008fa2:	b0da      	sub	sp, #360	; 0x168
 8008fa4:	af04      	add	r7, sp, #16
 8008fa6:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008fa8:	66b9      	str	r1, [r7, #104]	; 0x68
 8008faa:	667a      	str	r2, [r7, #100]	; 0x64
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 18U * sizeof(real_T));
 8008fac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008fb0:	2290      	movs	r2, #144	; 0x90
 8008fb2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f00c fd81 	bl	8015abc <memcpy>
  work[0] = 0.0;
 8008fba:	f04f 0200 	mov.w	r2, #0
 8008fbe:	f04f 0300 	mov.w	r3, #0
 8008fc2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  work[1] = 0.0;
 8008fc6:	f04f 0200 	mov.w	r2, #0
 8008fca:	f04f 0300 	mov.w	r3, #0
 8008fce:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  work[2] = 0.0;
 8008fd2:	f04f 0200 	mov.w	r2, #0
 8008fd6:	f04f 0300 	mov.w	r3, #0
 8008fda:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  atmp = b_A[0];
 8008fde:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008fe2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_0 = 0.0;
 8008fe6:	f04f 0200 	mov.w	r2, #0
 8008fea:	f04f 0300 	mov.w	r3, #0
 8008fee:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  beta1 = xnrm2_nLdASVZH(5, b_A, 2);
 8008ff2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	2005      	movs	r0, #5
 8008ffc:	f003 ff92 	bl	800cf24 <xnrm2_nLdASVZH>
 8009000:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 8009004:	f04f 0200 	mov.w	r2, #0
 8009008:	f04f 0300 	mov.w	r3, #0
 800900c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009010:	f7f7 fd4c 	bl	8000aac <__aeabi_dcmpeq>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	f040 8172 	bne.w	8009300 <qr_DvOBrgQi+0x360>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 800901c:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8009020:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 8009024:	eeb0 0a47 	vmov.f32	s0, s14
 8009028:	eef0 0a67 	vmov.f32	s1, s15
 800902c:	f001 fa94 	bl	800a558 <rt_hypotd_snf>
 8009030:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[0] >= 0.0) {
 8009034:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8009038:	f04f 0200 	mov.w	r2, #0
 800903c:	f04f 0300 	mov.w	r3, #0
 8009040:	f7f7 fd52 	bl	8000ae8 <__aeabi_dcmpge>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d009      	beq.n	800905e <qr_DvOBrgQi+0xbe>
      beta1 = -beta1;
 800904a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800904e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8009052:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009056:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800905a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800905e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8009062:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009066:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800906a:	f04f 0200 	mov.w	r2, #0
 800906e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009072:	4620      	mov	r0, r4
 8009074:	4629      	mov	r1, r5
 8009076:	f7f7 fd23 	bl	8000ac0 <__aeabi_dcmplt>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 80f1 	beq.w	8009264 <qr_DvOBrgQi+0x2c4>
      knt = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 8009088:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800908c:	3301      	adds	r3, #1
 800908e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 8009092:	2301      	movs	r3, #1
 8009094:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009098:	e01f      	b.n	80090da <qr_DvOBrgQi+0x13a>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800909a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800909e:	00db      	lsls	r3, r3, #3
 80090a0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80090a4:	4413      	add	r3, r2
 80090a6:	3bd0      	subs	r3, #208	; 0xd0
 80090a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090ac:	f04f 0200 	mov.w	r2, #0
 80090b0:	4bca      	ldr	r3, [pc, #808]	; (80093dc <qr_DvOBrgQi+0x43c>)
 80090b2:	f7f7 fa93 	bl	80005dc <__aeabi_dmul>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4610      	mov	r0, r2
 80090bc:	4619      	mov	r1, r3
 80090be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80090c8:	4413      	add	r3, r2
 80090ca:	3bd0      	subs	r3, #208	; 0xd0
 80090cc:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 80090d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d4:	3301      	adds	r3, #1
 80090d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80090da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090de:	2b05      	cmp	r3, #5
 80090e0:	dddb      	ble.n	800909a <qr_DvOBrgQi+0xfa>
        }

        beta1 *= 9.9792015476736E+291;
 80090e2:	f04f 0200 	mov.w	r2, #0
 80090e6:	4bbd      	ldr	r3, [pc, #756]	; (80093dc <qr_DvOBrgQi+0x43c>)
 80090e8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80090ec:	f7f7 fa76 	bl	80005dc <__aeabi_dmul>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 80090f8:	f04f 0200 	mov.w	r2, #0
 80090fc:	4bb7      	ldr	r3, [pc, #732]	; (80093dc <qr_DvOBrgQi+0x43c>)
 80090fe:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009102:	f7f7 fa6b 	bl	80005dc <__aeabi_dmul>
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800910e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009112:	65bb      	str	r3, [r7, #88]	; 0x58
 8009114:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800911c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800911e:	f04f 0200 	mov.w	r2, #0
 8009122:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009126:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800912a:	f7f7 fcc9 	bl	8000ac0 <__aeabi_dcmplt>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d003      	beq.n	800913c <qr_DvOBrgQi+0x19c>
 8009134:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009138:	2b13      	cmp	r3, #19
 800913a:	dda5      	ble.n	8009088 <qr_DvOBrgQi+0xe8>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(5, b_A, 2));
 800913c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009140:	2202      	movs	r2, #2
 8009142:	4619      	mov	r1, r3
 8009144:	2005      	movs	r0, #5
 8009146:	f003 feed 	bl	800cf24 <xnrm2_nLdASVZH>
 800914a:	eeb0 7a40 	vmov.f32	s14, s0
 800914e:	eef0 7a60 	vmov.f32	s15, s1
 8009152:	eeb0 1a47 	vmov.f32	s2, s14
 8009156:	eef0 1a67 	vmov.f32	s3, s15
 800915a:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800915e:	f001 f9fb 	bl	800a558 <rt_hypotd_snf>
 8009162:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 8009166:	f04f 0200 	mov.w	r2, #0
 800916a:	f04f 0300 	mov.w	r3, #0
 800916e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009172:	f7f7 fcb9 	bl	8000ae8 <__aeabi_dcmpge>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d009      	beq.n	8009190 <qr_DvOBrgQi+0x1f0>
        beta1 = -beta1;
 800917c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009180:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8009184:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800918c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 8009190:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009194:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009198:	f7f7 f868 	bl	800026c <__aeabi_dsub>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	4610      	mov	r0, r2
 80091a2:	4619      	mov	r1, r3
 80091a4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80091a8:	f7f7 fb42 	bl	8000830 <__aeabi_ddiv>
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (atmp - beta1);
 80091b4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80091b8:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 80091bc:	f7f7 f856 	bl	800026c <__aeabi_dsub>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	f04f 0000 	mov.w	r0, #0
 80091c8:	4985      	ldr	r1, [pc, #532]	; (80093e0 <qr_DvOBrgQi+0x440>)
 80091ca:	f7f7 fb31 	bl	8000830 <__aeabi_ddiv>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 80091d6:	2301      	movs	r3, #1
 80091d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80091dc:	e01e      	b.n	800921c <qr_DvOBrgQi+0x27c>
        b_A[b_coltop] *= atmp;
 80091de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80091e8:	4413      	add	r3, r2
 80091ea:	3bd0      	subs	r3, #208	; 0xd0
 80091ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091f0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80091f4:	f7f7 f9f2 	bl	80005dc <__aeabi_dmul>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4610      	mov	r0, r2
 80091fe:	4619      	mov	r1, r3
 8009200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009204:	00db      	lsls	r3, r3, #3
 8009206:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800920a:	4413      	add	r3, r2
 800920c:	3bd0      	subs	r3, #208	; 0xd0
 800920e:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 8009212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009216:	3301      	adds	r3, #1
 8009218:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800921c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009220:	2b05      	cmp	r3, #5
 8009222:	dddc      	ble.n	80091de <qr_DvOBrgQi+0x23e>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8009224:	2300      	movs	r3, #0
 8009226:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800922a:	e010      	b.n	800924e <qr_DvOBrgQi+0x2ae>
        beta1 *= 1.0020841800044864E-292;
 800922c:	f04f 0200 	mov.w	r2, #0
 8009230:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009234:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009238:	f7f7 f9d0 	bl	80005dc <__aeabi_dmul>
 800923c:	4602      	mov	r2, r0
 800923e:	460b      	mov	r3, r1
 8009240:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8009244:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009248:	3301      	adds	r3, #1
 800924a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800924e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009252:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009256:	429a      	cmp	r2, r3
 8009258:	dbe8      	blt.n	800922c <qr_DvOBrgQi+0x28c>
      }

      atmp = beta1;
 800925a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800925e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 8009262:	e04d      	b.n	8009300 <qr_DvOBrgQi+0x360>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 8009264:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009268:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800926c:	f7f6 fffe 	bl	800026c <__aeabi_dsub>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4610      	mov	r0, r2
 8009276:	4619      	mov	r1, r3
 8009278:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800927c:	f7f7 fad8 	bl	8000830 <__aeabi_ddiv>
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (b_A[0] - beta1);
 8009288:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800928c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009290:	f7f6 ffec 	bl	800026c <__aeabi_dsub>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	f04f 0000 	mov.w	r0, #0
 800929c:	4950      	ldr	r1, [pc, #320]	; (80093e0 <qr_DvOBrgQi+0x440>)
 800929e:	f7f7 fac7 	bl	8000830 <__aeabi_ddiv>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 80092aa:	2301      	movs	r3, #1
 80092ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80092b0:	e01e      	b.n	80092f0 <qr_DvOBrgQi+0x350>
        b_A[c_lastc] *= atmp;
 80092b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80092bc:	4413      	add	r3, r2
 80092be:	3bd0      	subs	r3, #208	; 0xd0
 80092c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80092c4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80092c8:	f7f7 f988 	bl	80005dc <__aeabi_dmul>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4610      	mov	r0, r2
 80092d2:	4619      	mov	r1, r3
 80092d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092d8:	00db      	lsls	r3, r3, #3
 80092da:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80092de:	4413      	add	r3, r2
 80092e0:	3bd0      	subs	r3, #208	; 0xd0
 80092e2:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 80092e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092ea:	3301      	adds	r3, #1
 80092ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80092f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092f4:	2b05      	cmp	r3, #5
 80092f6:	dddc      	ble.n	80092b2 <qr_DvOBrgQi+0x312>
      }

      atmp = beta1;
 80092f8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80092fc:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[0] = 1.0;
 8009300:	f04f 0200 	mov.w	r2, #0
 8009304:	4b36      	ldr	r3, [pc, #216]	; (80093e0 <qr_DvOBrgQi+0x440>)
 8009306:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 800930a:	f04f 0200 	mov.w	r2, #0
 800930e:	f04f 0300 	mov.w	r3, #0
 8009312:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8009316:	f7f7 fbc9 	bl	8000aac <__aeabi_dcmpeq>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	f040 8083 	bne.w	8009428 <qr_DvOBrgQi+0x488>
    knt = 6;
 8009322:	2306      	movs	r3, #6
 8009324:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 5;
 8009328:	2305      	movs	r3, #5
 800932a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800932e:	e009      	b.n	8009344 <qr_DvOBrgQi+0x3a4>
      knt--;
 8009330:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009334:	3b01      	subs	r3, #1
 8009336:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 800933a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800933e:	3b01      	subs	r3, #1
 8009340:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8009344:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009348:	2b00      	cmp	r3, #0
 800934a:	dd11      	ble.n	8009370 <qr_DvOBrgQi+0x3d0>
 800934c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009350:	00db      	lsls	r3, r3, #3
 8009352:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009356:	4413      	add	r3, r2
 8009358:	3bd0      	subs	r3, #208	; 0xd0
 800935a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800935e:	f04f 0200 	mov.w	r2, #0
 8009362:	f04f 0300 	mov.w	r3, #0
 8009366:	f7f7 fba1 	bl	8000aac <__aeabi_dcmpeq>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1df      	bne.n	8009330 <qr_DvOBrgQi+0x390>
    }

    c_lastc = 2;
 8009370:	2302      	movs	r3, #2
 8009372:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    exitg2 = false;
 8009376:	2300      	movs	r3, #0
 8009378:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 800937c:	e04b      	b.n	8009416 <qr_DvOBrgQi+0x476>
      b_coltop = (c_lastc - 1) * 6 + 6;
 800937e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009382:	4613      	mov	r3, r2
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	4413      	add	r3, r2
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      coltop = b_coltop;
 800938e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009392:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      do {
        exitg1 = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (coltop + 1 <= b_coltop + knt) {
 800939c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80093a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80093a4:	441a      	add	r2, r3
 80093a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80093aa:	4293      	cmp	r3, r2
 80093ac:	da20      	bge.n	80093f0 <qr_DvOBrgQi+0x450>
          if (b_A[coltop] != 0.0) {
 80093ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80093b2:	00db      	lsls	r3, r3, #3
 80093b4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80093b8:	4413      	add	r3, r2
 80093ba:	3bd0      	subs	r3, #208	; 0xd0
 80093bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093c0:	f04f 0200 	mov.w	r2, #0
 80093c4:	f04f 0300 	mov.w	r3, #0
 80093c8:	f7f7 fb70 	bl	8000aac <__aeabi_dcmpeq>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d108      	bne.n	80093e4 <qr_DvOBrgQi+0x444>
            exitg1 = 1;
 80093d2:	2301      	movs	r3, #1
 80093d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80093d8:	e012      	b.n	8009400 <qr_DvOBrgQi+0x460>
 80093da:	bf00      	nop
 80093dc:	7c900000 	.word	0x7c900000
 80093e0:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 80093e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80093e8:	3301      	adds	r3, #1
 80093ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80093ee:	e007      	b.n	8009400 <qr_DvOBrgQi+0x460>
          }
        } else {
          c_lastc--;
 80093f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093f4:	3b01      	subs	r3, #1
 80093f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          exitg1 = 2;
 80093fa:	2302      	movs	r3, #2
 80093fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 8009400:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009404:	2b00      	cmp	r3, #0
 8009406:	d0c6      	beq.n	8009396 <qr_DvOBrgQi+0x3f6>

      if (exitg1 == 1) {
 8009408:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800940c:	2b01      	cmp	r3, #1
 800940e:	d102      	bne.n	8009416 <qr_DvOBrgQi+0x476>
        exitg2 = true;
 8009410:	2301      	movs	r3, #1
 8009412:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 8009416:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <qr_DvOBrgQi+0x494>
 800941e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009422:	2b00      	cmp	r3, #0
 8009424:	dcab      	bgt.n	800937e <qr_DvOBrgQi+0x3de>
 8009426:	e005      	b.n	8009434 <qr_DvOBrgQi+0x494>
      }
    }
  } else {
    knt = 0;
 8009428:	2300      	movs	r3, #0
 800942a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 800942e:	2300      	movs	r3, #0
 8009430:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 8009434:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009438:	2b00      	cmp	r3, #0
 800943a:	dd29      	ble.n	8009490 <qr_DvOBrgQi+0x4f0>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 7, b_A, 1, work);
 800943c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8009440:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009444:	9302      	str	r3, [sp, #8]
 8009446:	2301      	movs	r3, #1
 8009448:	9301      	str	r3, [sp, #4]
 800944a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	2307      	movs	r3, #7
 8009452:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8009456:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800945a:	f003 f945 	bl	800c6e8 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_0, 1, work, b_A, 7);
 800945e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009462:	653b      	str	r3, [r7, #80]	; 0x50
 8009464:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009468:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800946c:	657b      	str	r3, [r7, #84]	; 0x54
 800946e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8009472:	2307      	movs	r3, #7
 8009474:	9301      	str	r3, [sp, #4]
 8009476:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	4613      	mov	r3, r2
 800947e:	2201      	movs	r2, #1
 8009480:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8009484:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8009488:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800948c:	f003 fa3a 	bl	800c904 <xgerc_R09LiDgJ>
  }

  b_A[0] = atmp;
 8009490:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009494:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  atmp = b_A[7];
 8009498:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800949c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_1 = 0.0;
 80094a0:	f04f 0200 	mov.w	r2, #0
 80094a4:	f04f 0300 	mov.w	r3, #0
 80094a8:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  beta1 = xnrm2_nLdASVZH(4, b_A, 9);
 80094ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80094b0:	2209      	movs	r2, #9
 80094b2:	4619      	mov	r1, r3
 80094b4:	2004      	movs	r0, #4
 80094b6:	f003 fd35 	bl	800cf24 <xnrm2_nLdASVZH>
 80094ba:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 80094be:	f04f 0200 	mov.w	r2, #0
 80094c2:	f04f 0300 	mov.w	r3, #0
 80094c6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80094ca:	f7f7 faef 	bl	8000aac <__aeabi_dcmpeq>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f040 8174 	bne.w	80097be <qr_DvOBrgQi+0x81e>
    beta1 = rt_hypotd_snf(b_A[7], beta1);
 80094d6:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 80094da:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 80094de:	eeb0 0a47 	vmov.f32	s0, s14
 80094e2:	eef0 0a67 	vmov.f32	s1, s15
 80094e6:	f001 f837 	bl	800a558 <rt_hypotd_snf>
 80094ea:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[7] >= 0.0) {
 80094ee:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80094f2:	f04f 0200 	mov.w	r2, #0
 80094f6:	f04f 0300 	mov.w	r3, #0
 80094fa:	f7f7 faf5 	bl	8000ae8 <__aeabi_dcmpge>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d009      	beq.n	8009518 <qr_DvOBrgQi+0x578>
      beta1 = -beta1;
 8009504:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009508:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800950c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009510:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009514:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 8009518:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800951c:	64bb      	str	r3, [r7, #72]	; 0x48
 800951e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009522:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009528:	f04f 0200 	mov.w	r2, #0
 800952c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009530:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009534:	f7f7 fac4 	bl	8000ac0 <__aeabi_dcmplt>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 80f1 	beq.w	8009722 <qr_DvOBrgQi+0x782>
      knt = 0;
 8009540:	2300      	movs	r3, #0
 8009542:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 8009546:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800954a:	3301      	adds	r3, #1
 800954c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 8009550:	2308      	movs	r3, #8
 8009552:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009556:	e01f      	b.n	8009598 <qr_DvOBrgQi+0x5f8>
          b_A[b_coltop] *= 9.9792015476736E+291;
 8009558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800955c:	00db      	lsls	r3, r3, #3
 800955e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009562:	4413      	add	r3, r2
 8009564:	3bd0      	subs	r3, #208	; 0xd0
 8009566:	e9d3 0100 	ldrd	r0, r1, [r3]
 800956a:	f04f 0200 	mov.w	r2, #0
 800956e:	4bc6      	ldr	r3, [pc, #792]	; (8009888 <qr_DvOBrgQi+0x8e8>)
 8009570:	f7f7 f834 	bl	80005dc <__aeabi_dmul>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	4610      	mov	r0, r2
 800957a:	4619      	mov	r1, r3
 800957c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009580:	00db      	lsls	r3, r3, #3
 8009582:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009586:	4413      	add	r3, r2
 8009588:	3bd0      	subs	r3, #208	; 0xd0
 800958a:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800958e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009592:	3301      	adds	r3, #1
 8009594:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800959c:	2b0b      	cmp	r3, #11
 800959e:	dddb      	ble.n	8009558 <qr_DvOBrgQi+0x5b8>
        }

        beta1 *= 9.9792015476736E+291;
 80095a0:	f04f 0200 	mov.w	r2, #0
 80095a4:	4bb8      	ldr	r3, [pc, #736]	; (8009888 <qr_DvOBrgQi+0x8e8>)
 80095a6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80095aa:	f7f7 f817 	bl	80005dc <__aeabi_dmul>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 80095b6:	f04f 0200 	mov.w	r2, #0
 80095ba:	4bb3      	ldr	r3, [pc, #716]	; (8009888 <qr_DvOBrgQi+0x8e8>)
 80095bc:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 80095c0:	f7f7 f80c 	bl	80005dc <__aeabi_dmul>
 80095c4:	4602      	mov	r2, r0
 80095c6:	460b      	mov	r3, r1
 80095c8:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 80095cc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80095d0:	643b      	str	r3, [r7, #64]	; 0x40
 80095d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80095d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095da:	647b      	str	r3, [r7, #68]	; 0x44
 80095dc:	f04f 0200 	mov.w	r2, #0
 80095e0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80095e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80095e8:	f7f7 fa6a 	bl	8000ac0 <__aeabi_dcmplt>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <qr_DvOBrgQi+0x65a>
 80095f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80095f6:	2b13      	cmp	r3, #19
 80095f8:	dda5      	ble.n	8009546 <qr_DvOBrgQi+0x5a6>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(4, b_A, 9));
 80095fa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80095fe:	2209      	movs	r2, #9
 8009600:	4619      	mov	r1, r3
 8009602:	2004      	movs	r0, #4
 8009604:	f003 fc8e 	bl	800cf24 <xnrm2_nLdASVZH>
 8009608:	eeb0 7a40 	vmov.f32	s14, s0
 800960c:	eef0 7a60 	vmov.f32	s15, s1
 8009610:	eeb0 1a47 	vmov.f32	s2, s14
 8009614:	eef0 1a67 	vmov.f32	s3, s15
 8009618:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800961c:	f000 ff9c 	bl	800a558 <rt_hypotd_snf>
 8009620:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 8009624:	f04f 0200 	mov.w	r2, #0
 8009628:	f04f 0300 	mov.w	r3, #0
 800962c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009630:	f7f7 fa5a 	bl	8000ae8 <__aeabi_dcmpge>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d009      	beq.n	800964e <qr_DvOBrgQi+0x6ae>
        beta1 = -beta1;
 800963a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800963e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8009642:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009646:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800964a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 800964e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009652:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009656:	f7f6 fe09 	bl	800026c <__aeabi_dsub>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	4610      	mov	r0, r2
 8009660:	4619      	mov	r1, r3
 8009662:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009666:	f7f7 f8e3 	bl	8000830 <__aeabi_ddiv>
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (atmp - beta1);
 8009672:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009676:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800967a:	f7f6 fdf7 	bl	800026c <__aeabi_dsub>
 800967e:	4602      	mov	r2, r0
 8009680:	460b      	mov	r3, r1
 8009682:	f04f 0000 	mov.w	r0, #0
 8009686:	4981      	ldr	r1, [pc, #516]	; (800988c <qr_DvOBrgQi+0x8ec>)
 8009688:	f7f7 f8d2 	bl	8000830 <__aeabi_ddiv>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 8009694:	2308      	movs	r3, #8
 8009696:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800969a:	e01e      	b.n	80096da <qr_DvOBrgQi+0x73a>
        b_A[b_coltop] *= atmp;
 800969c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a0:	00db      	lsls	r3, r3, #3
 80096a2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80096a6:	4413      	add	r3, r2
 80096a8:	3bd0      	subs	r3, #208	; 0xd0
 80096aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096ae:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80096b2:	f7f6 ff93 	bl	80005dc <__aeabi_dmul>
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	4610      	mov	r0, r2
 80096bc:	4619      	mov	r1, r3
 80096be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096c2:	00db      	lsls	r3, r3, #3
 80096c4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80096c8:	4413      	add	r3, r2
 80096ca:	3bd0      	subs	r3, #208	; 0xd0
 80096cc:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 80096d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096d4:	3301      	adds	r3, #1
 80096d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80096da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096de:	2b0b      	cmp	r3, #11
 80096e0:	dddc      	ble.n	800969c <qr_DvOBrgQi+0x6fc>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 80096e2:	2300      	movs	r3, #0
 80096e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80096e8:	e010      	b.n	800970c <qr_DvOBrgQi+0x76c>
        beta1 *= 1.0020841800044864E-292;
 80096ea:	f04f 0200 	mov.w	r2, #0
 80096ee:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80096f2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80096f6:	f7f6 ff71 	bl	80005dc <__aeabi_dmul>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8009702:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009706:	3301      	adds	r3, #1
 8009708:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800970c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009710:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009714:	429a      	cmp	r2, r3
 8009716:	dbe8      	blt.n	80096ea <qr_DvOBrgQi+0x74a>
      }

      atmp = beta1;
 8009718:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800971c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 8009720:	e04d      	b.n	80097be <qr_DvOBrgQi+0x81e>
    } else {
      tau_idx_1 = (beta1 - b_A[7]) / beta1;
 8009722:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8009726:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800972a:	f7f6 fd9f 	bl	800026c <__aeabi_dsub>
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	4610      	mov	r0, r2
 8009734:	4619      	mov	r1, r3
 8009736:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800973a:	f7f7 f879 	bl	8000830 <__aeabi_ddiv>
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (b_A[7] - beta1);
 8009746:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800974a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800974e:	f7f6 fd8d 	bl	800026c <__aeabi_dsub>
 8009752:	4602      	mov	r2, r0
 8009754:	460b      	mov	r3, r1
 8009756:	f04f 0000 	mov.w	r0, #0
 800975a:	494c      	ldr	r1, [pc, #304]	; (800988c <qr_DvOBrgQi+0x8ec>)
 800975c:	f7f7 f868 	bl	8000830 <__aeabi_ddiv>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 8009768:	2308      	movs	r3, #8
 800976a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800976e:	e01e      	b.n	80097ae <qr_DvOBrgQi+0x80e>
        b_A[c_lastc] *= atmp;
 8009770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009774:	00db      	lsls	r3, r3, #3
 8009776:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800977a:	4413      	add	r3, r2
 800977c:	3bd0      	subs	r3, #208	; 0xd0
 800977e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009782:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009786:	f7f6 ff29 	bl	80005dc <__aeabi_dmul>
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	4610      	mov	r0, r2
 8009790:	4619      	mov	r1, r3
 8009792:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009796:	00db      	lsls	r3, r3, #3
 8009798:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800979c:	4413      	add	r3, r2
 800979e:	3bd0      	subs	r3, #208	; 0xd0
 80097a0:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 80097a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097a8:	3301      	adds	r3, #1
 80097aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80097ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097b2:	2b0b      	cmp	r3, #11
 80097b4:	dddc      	ble.n	8009770 <qr_DvOBrgQi+0x7d0>
      }

      atmp = beta1;
 80097b6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80097ba:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[7] = 1.0;
 80097be:	f04f 0200 	mov.w	r2, #0
 80097c2:	4b32      	ldr	r3, [pc, #200]	; (800988c <qr_DvOBrgQi+0x8ec>)
 80097c4:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 80097c8:	f04f 0200 	mov.w	r2, #0
 80097cc:	f04f 0300 	mov.w	r3, #0
 80097d0:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80097d4:	f7f7 f96a 	bl	8000aac <__aeabi_dcmpeq>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d163      	bne.n	80098a6 <qr_DvOBrgQi+0x906>
    knt = 5;
 80097de:	2305      	movs	r3, #5
 80097e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 11;
 80097e4:	230b      	movs	r3, #11
 80097e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 80097ea:	e009      	b.n	8009800 <qr_DvOBrgQi+0x860>
      knt--;
 80097ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80097f0:	3b01      	subs	r3, #1
 80097f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 80097f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097fa:	3b01      	subs	r3, #1
 80097fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8009800:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009804:	2b00      	cmp	r3, #0
 8009806:	dd11      	ble.n	800982c <qr_DvOBrgQi+0x88c>
 8009808:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800980c:	00db      	lsls	r3, r3, #3
 800980e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009812:	4413      	add	r3, r2
 8009814:	3bd0      	subs	r3, #208	; 0xd0
 8009816:	e9d3 0100 	ldrd	r0, r1, [r3]
 800981a:	f04f 0200 	mov.w	r2, #0
 800981e:	f04f 0300 	mov.w	r3, #0
 8009822:	f7f7 f943 	bl	8000aac <__aeabi_dcmpeq>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1df      	bne.n	80097ec <qr_DvOBrgQi+0x84c>
    }

    c_lastc = 1;
 800982c:	2301      	movs	r3, #1
 800982e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    coltop = 13;
 8009832:	230d      	movs	r3, #13
 8009834:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    do {
      exitg1 = 0;
 8009838:	2300      	movs	r3, #0
 800983a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (coltop + 1 <= knt + 13) {
 800983e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009842:	f103 020c 	add.w	r2, r3, #12
 8009846:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800984a:	4293      	cmp	r3, r2
 800984c:	dc20      	bgt.n	8009890 <qr_DvOBrgQi+0x8f0>
        if (b_A[coltop] != 0.0) {
 800984e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009852:	00db      	lsls	r3, r3, #3
 8009854:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009858:	4413      	add	r3, r2
 800985a:	3bd0      	subs	r3, #208	; 0xd0
 800985c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009860:	f04f 0200 	mov.w	r2, #0
 8009864:	f04f 0300 	mov.w	r3, #0
 8009868:	f7f7 f920 	bl	8000aac <__aeabi_dcmpeq>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d103      	bne.n	800987a <qr_DvOBrgQi+0x8da>
          exitg1 = 1;
 8009872:	2301      	movs	r3, #1
 8009874:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009878:	e010      	b.n	800989c <qr_DvOBrgQi+0x8fc>
        } else {
          coltop++;
 800987a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800987e:	3301      	adds	r3, #1
 8009880:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009884:	e00a      	b.n	800989c <qr_DvOBrgQi+0x8fc>
 8009886:	bf00      	nop
 8009888:	7c900000 	.word	0x7c900000
 800988c:	3ff00000 	.word	0x3ff00000
        }
      } else {
        c_lastc = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        exitg1 = 1;
 8009896:	2301      	movs	r3, #1
 8009898:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800989c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d0c9      	beq.n	8009838 <qr_DvOBrgQi+0x898>
 80098a4:	e005      	b.n	80098b2 <qr_DvOBrgQi+0x912>
  } else {
    knt = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 80098b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	dd29      	ble.n	800990e <qr_DvOBrgQi+0x96e>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 14, b_A, 8, work);
 80098ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80098be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80098c2:	9302      	str	r3, [sp, #8]
 80098c4:	2308      	movs	r3, #8
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	230e      	movs	r3, #14
 80098d0:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80098d4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80098d8:	f002 ff06 	bl	800c6e8 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_1, 8, work, b_A, 14);
 80098dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80098e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80098e2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80098e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80098ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098ec:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80098f0:	230e      	movs	r3, #14
 80098f2:	9301      	str	r3, [sp, #4]
 80098f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	4613      	mov	r3, r2
 80098fc:	2208      	movs	r2, #8
 80098fe:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8009902:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8009906:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800990a:	f002 fffb 	bl	800c904 <xgerc_R09LiDgJ>
  }

  b_A[7] = atmp;
 800990e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009912:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  atmp = b_A[14];
 8009916:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800991a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_2 = 0.0;
 800991e:	f04f 0200 	mov.w	r2, #0
 8009922:	f04f 0300 	mov.w	r3, #0
 8009926:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  beta1 = xnrm2_nLdASVZH(3, b_A, 16);
 800992a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800992e:	2210      	movs	r2, #16
 8009930:	4619      	mov	r1, r3
 8009932:	2003      	movs	r0, #3
 8009934:	f003 faf6 	bl	800cf24 <xnrm2_nLdASVZH>
 8009938:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800993c:	f04f 0200 	mov.w	r2, #0
 8009940:	f04f 0300 	mov.w	r3, #0
 8009944:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009948:	f7f7 f8b0 	bl	8000aac <__aeabi_dcmpeq>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	f040 8170 	bne.w	8009c34 <qr_DvOBrgQi+0xc94>
    beta1 = rt_hypotd_snf(b_A[14], beta1);
 8009954:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 8009958:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800995c:	eeb0 0a47 	vmov.f32	s0, s14
 8009960:	eef0 0a67 	vmov.f32	s1, s15
 8009964:	f000 fdf8 	bl	800a558 <rt_hypotd_snf>
 8009968:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[14] >= 0.0) {
 800996c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8009970:	f04f 0200 	mov.w	r2, #0
 8009974:	f04f 0300 	mov.w	r3, #0
 8009978:	f7f7 f8b6 	bl	8000ae8 <__aeabi_dcmpge>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d009      	beq.n	8009996 <qr_DvOBrgQi+0x9f6>
      beta1 = -beta1;
 8009982:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009986:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800998a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800998e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009992:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 8009996:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800999a:	633b      	str	r3, [r7, #48]	; 0x30
 800999c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099a4:	637b      	str	r3, [r7, #52]	; 0x34
 80099a6:	f04f 0200 	mov.w	r2, #0
 80099aa:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80099ae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80099b2:	f7f7 f885 	bl	8000ac0 <__aeabi_dcmplt>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 80ef 	beq.w	8009b9c <qr_DvOBrgQi+0xbfc>
      knt = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 80099c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80099c8:	3301      	adds	r3, #1
 80099ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 80099ce:	230f      	movs	r3, #15
 80099d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80099d4:	e01f      	b.n	8009a16 <qr_DvOBrgQi+0xa76>
          b_A[b_coltop] *= 9.9792015476736E+291;
 80099d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80099e0:	4413      	add	r3, r2
 80099e2:	3bd0      	subs	r3, #208	; 0xd0
 80099e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099e8:	f04f 0200 	mov.w	r2, #0
 80099ec:	4bb5      	ldr	r3, [pc, #724]	; (8009cc4 <qr_DvOBrgQi+0xd24>)
 80099ee:	f7f6 fdf5 	bl	80005dc <__aeabi_dmul>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	4610      	mov	r0, r2
 80099f8:	4619      	mov	r1, r3
 80099fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009a04:	4413      	add	r3, r2
 8009a06:	3bd0      	subs	r3, #208	; 0xd0
 8009a08:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 8009a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a10:	3301      	adds	r3, #1
 8009a12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a1a:	2b11      	cmp	r3, #17
 8009a1c:	dddb      	ble.n	80099d6 <qr_DvOBrgQi+0xa36>
        }

        beta1 *= 9.9792015476736E+291;
 8009a1e:	f04f 0200 	mov.w	r2, #0
 8009a22:	4ba8      	ldr	r3, [pc, #672]	; (8009cc4 <qr_DvOBrgQi+0xd24>)
 8009a24:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009a28:	f7f6 fdd8 	bl	80005dc <__aeabi_dmul>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 8009a34:	f04f 0200 	mov.w	r2, #0
 8009a38:	4ba2      	ldr	r3, [pc, #648]	; (8009cc4 <qr_DvOBrgQi+0xd24>)
 8009a3a:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009a3e:	f7f6 fdcd 	bl	80005dc <__aeabi_dmul>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 8009a4a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a5a:	f04f 0200 	mov.w	r2, #0
 8009a5e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009a62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009a66:	f7f7 f82b 	bl	8000ac0 <__aeabi_dcmplt>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d003      	beq.n	8009a78 <qr_DvOBrgQi+0xad8>
 8009a70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a74:	2b13      	cmp	r3, #19
 8009a76:	dda5      	ble.n	80099c4 <qr_DvOBrgQi+0xa24>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(3, b_A, 16));
 8009a78:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009a7c:	2210      	movs	r2, #16
 8009a7e:	4619      	mov	r1, r3
 8009a80:	2003      	movs	r0, #3
 8009a82:	f003 fa4f 	bl	800cf24 <xnrm2_nLdASVZH>
 8009a86:	eeb0 7a40 	vmov.f32	s14, s0
 8009a8a:	eef0 7a60 	vmov.f32	s15, s1
 8009a8e:	eeb0 1a47 	vmov.f32	s2, s14
 8009a92:	eef0 1a67 	vmov.f32	s3, s15
 8009a96:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8009a9a:	f000 fd5d 	bl	800a558 <rt_hypotd_snf>
 8009a9e:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 8009aa2:	f04f 0200 	mov.w	r2, #0
 8009aa6:	f04f 0300 	mov.w	r3, #0
 8009aaa:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009aae:	f7f7 f81b 	bl	8000ae8 <__aeabi_dcmpge>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d009      	beq.n	8009acc <qr_DvOBrgQi+0xb2c>
        beta1 = -beta1;
 8009ab8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009abc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8009ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ac4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009ac8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_2 = (beta1 - atmp) / beta1;
 8009acc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009ad0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009ad4:	f7f6 fbca 	bl	800026c <__aeabi_dsub>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4610      	mov	r0, r2
 8009ade:	4619      	mov	r1, r3
 8009ae0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009ae4:	f7f6 fea4 	bl	8000830 <__aeabi_ddiv>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (atmp - beta1);
 8009af0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009af4:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009af8:	f7f6 fbb8 	bl	800026c <__aeabi_dsub>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	f04f 0000 	mov.w	r0, #0
 8009b04:	4970      	ldr	r1, [pc, #448]	; (8009cc8 <qr_DvOBrgQi+0xd28>)
 8009b06:	f7f6 fe93 	bl	8000830 <__aeabi_ddiv>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 8009b12:	230f      	movs	r3, #15
 8009b14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009b18:	e01c      	b.n	8009b54 <qr_DvOBrgQi+0xbb4>
        b_A[b_coltop] *= atmp;
 8009b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b1e:	00db      	lsls	r3, r3, #3
 8009b20:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009b24:	4413      	add	r3, r2
 8009b26:	3bd0      	subs	r3, #208	; 0xd0
 8009b28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b2c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009b30:	f7f6 fd54 	bl	80005dc <__aeabi_dmul>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8009b3c:	00c9      	lsls	r1, r1, #3
 8009b3e:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8009b42:	4401      	add	r1, r0
 8009b44:	39d0      	subs	r1, #208	; 0xd0
 8009b46:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 8009b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b4e:	3301      	adds	r3, #1
 8009b50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b58:	2b11      	cmp	r3, #17
 8009b5a:	ddde      	ble.n	8009b1a <qr_DvOBrgQi+0xb7a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009b62:	e010      	b.n	8009b86 <qr_DvOBrgQi+0xbe6>
        beta1 *= 1.0020841800044864E-292;
 8009b64:	f04f 0200 	mov.w	r2, #0
 8009b68:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009b6c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009b70:	f7f6 fd34 	bl	80005dc <__aeabi_dmul>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8009b7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b80:	3301      	adds	r3, #1
 8009b82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009b86:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009b8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	dbe8      	blt.n	8009b64 <qr_DvOBrgQi+0xbc4>
      }

      atmp = beta1;
 8009b92:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009b96:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 8009b9a:	e04b      	b.n	8009c34 <qr_DvOBrgQi+0xc94>
    } else {
      tau_idx_2 = (beta1 - b_A[14]) / beta1;
 8009b9c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8009ba0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009ba4:	f7f6 fb62 	bl	800026c <__aeabi_dsub>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	4610      	mov	r0, r2
 8009bae:	4619      	mov	r1, r3
 8009bb0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009bb4:	f7f6 fe3c 	bl	8000830 <__aeabi_ddiv>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (b_A[14] - beta1);
 8009bc0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8009bc4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009bc8:	f7f6 fb50 	bl	800026c <__aeabi_dsub>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	460b      	mov	r3, r1
 8009bd0:	f04f 0000 	mov.w	r0, #0
 8009bd4:	493c      	ldr	r1, [pc, #240]	; (8009cc8 <qr_DvOBrgQi+0xd28>)
 8009bd6:	f7f6 fe2b 	bl	8000830 <__aeabi_ddiv>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	460b      	mov	r3, r1
 8009bde:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 8009be2:	230f      	movs	r3, #15
 8009be4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009be8:	e01c      	b.n	8009c24 <qr_DvOBrgQi+0xc84>
        b_A[c_lastc] *= atmp;
 8009bea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bee:	00db      	lsls	r3, r3, #3
 8009bf0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009bf4:	4413      	add	r3, r2
 8009bf6:	3bd0      	subs	r3, #208	; 0xd0
 8009bf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009bfc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009c00:	f7f6 fcec 	bl	80005dc <__aeabi_dmul>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8009c0c:	00c9      	lsls	r1, r1, #3
 8009c0e:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8009c12:	4401      	add	r1, r0
 8009c14:	39d0      	subs	r1, #208	; 0xd0
 8009c16:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 8009c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c1e:	3301      	adds	r3, #1
 8009c20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009c24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c28:	2b11      	cmp	r3, #17
 8009c2a:	ddde      	ble.n	8009bea <qr_DvOBrgQi+0xc4a>
      }

      atmp = beta1;
 8009c2c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009c30:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[14] = atmp;
 8009c34:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009c38:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  R[0] = b_A[0];
 8009c3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009c40:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009c42:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 8009c46:	2301      	movs	r3, #1
 8009c48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009c4c:	e00f      	b.n	8009c6e <qr_DvOBrgQi+0xcce>
    R[c_lastc] = 0.0;
 8009c4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009c56:	18d1      	adds	r1, r2, r3
 8009c58:	f04f 0200 	mov.w	r2, #0
 8009c5c:	f04f 0300 	mov.w	r3, #0
 8009c60:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 8009c64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c68:	3301      	adds	r3, #1
 8009c6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009c6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	ddeb      	ble.n	8009c4e <qr_DvOBrgQi+0xcae>
  }

  work[0] = 0.0;
 8009c76:	f04f 0200 	mov.w	r2, #0
 8009c7a:	f04f 0300 	mov.w	r3, #0
 8009c7e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 8009c82:	2300      	movs	r3, #0
 8009c84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009c88:	e016      	b.n	8009cb8 <qr_DvOBrgQi+0xd18>
    R[c_lastc + 3] = b_A[c_lastc + 6];
 8009c8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c8e:	3306      	adds	r3, #6
 8009c90:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009c94:	3203      	adds	r2, #3
 8009c96:	00d2      	lsls	r2, r2, #3
 8009c98:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009c9a:	4411      	add	r1, r2
 8009c9c:	00db      	lsls	r3, r3, #3
 8009c9e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009ca2:	4413      	add	r3, r2
 8009ca4:	3bd0      	subs	r3, #208	; 0xd0
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 8009cae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009cb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	dde4      	ble.n	8009c8a <qr_DvOBrgQi+0xcea>
  }

  while (c_lastc + 1 < 4) {
 8009cc0:	e015      	b.n	8009cee <qr_DvOBrgQi+0xd4e>
 8009cc2:	bf00      	nop
 8009cc4:	7c900000 	.word	0x7c900000
 8009cc8:	3ff00000 	.word	0x3ff00000
    R[c_lastc + 3] = 0.0;
 8009ccc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cd0:	3303      	adds	r3, #3
 8009cd2:	00db      	lsls	r3, r3, #3
 8009cd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009cd6:	18d1      	adds	r1, r2, r3
 8009cd8:	f04f 0200 	mov.w	r2, #0
 8009cdc:	f04f 0300 	mov.w	r3, #0
 8009ce0:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 8009ce4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ce8:	3301      	adds	r3, #1
 8009cea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  while (c_lastc + 1 < 4) {
 8009cee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	ddea      	ble.n	8009ccc <qr_DvOBrgQi+0xd2c>
  }

  work[1] = 0.0;
 8009cf6:	f04f 0200 	mov.w	r2, #0
 8009cfa:	f04f 0300 	mov.w	r3, #0
 8009cfe:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 8009d02:	2300      	movs	r3, #0
 8009d04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009d08:	e016      	b.n	8009d38 <qr_DvOBrgQi+0xd98>
    R[c_lastc + 6] = b_A[c_lastc + 12];
 8009d0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d0e:	330c      	adds	r3, #12
 8009d10:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009d14:	3206      	adds	r2, #6
 8009d16:	00d2      	lsls	r2, r2, #3
 8009d18:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009d1a:	4411      	add	r1, r2
 8009d1c:	00db      	lsls	r3, r3, #3
 8009d1e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009d22:	4413      	add	r3, r2
 8009d24:	3bd0      	subs	r3, #208	; 0xd0
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 8009d2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d32:	3301      	adds	r3, #1
 8009d34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009d38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	dde4      	ble.n	8009d0a <qr_DvOBrgQi+0xd6a>
  }

  work[2] = 0.0;
 8009d40:	f04f 0200 	mov.w	r2, #0
 8009d44:	f04f 0300 	mov.w	r3, #0
 8009d48:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 8009d4c:	230f      	movs	r3, #15
 8009d4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009d52:	e024      	b.n	8009d9e <qr_DvOBrgQi+0xdfe>
    b_A[b_coltop] *= -tau_idx_2;
 8009d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d58:	00db      	lsls	r3, r3, #3
 8009d5a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009d5e:	4413      	add	r3, r2
 8009d60:	3bd0      	subs	r3, #208	; 0xd0
 8009d62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009d6a:	623b      	str	r3, [r7, #32]
 8009d6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009d70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009d74:	627b      	str	r3, [r7, #36]	; 0x24
 8009d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d7a:	f7f6 fc2f 	bl	80005dc <__aeabi_dmul>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8009d86:	00c9      	lsls	r1, r1, #3
 8009d88:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8009d8c:	4401      	add	r1, r0
 8009d8e:	39d0      	subs	r1, #208	; 0xd0
 8009d90:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 8009d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d98:	3301      	adds	r3, #1
 8009d9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009da2:	2b11      	cmp	r3, #17
 8009da4:	ddd6      	ble.n	8009d54 <qr_DvOBrgQi+0xdb4>
  }

  b_A[14] = 1.0 - tau_idx_2;
 8009da6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8009daa:	f04f 0000 	mov.w	r0, #0
 8009dae:	49cc      	ldr	r1, [pc, #816]	; (800a0e0 <qr_DvOBrgQi+0x1140>)
 8009db0:	f7f6 fa5c 	bl	800026c <__aeabi_dsub>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009dc2:	e014      	b.n	8009dee <qr_DvOBrgQi+0xe4e>
    b_A[13 - c_lastc] = 0.0;
 8009dc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dc8:	f1c3 030d 	rsb	r3, r3, #13
 8009dcc:	00db      	lsls	r3, r3, #3
 8009dce:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 8009dd8:	f04f 0200 	mov.w	r2, #0
 8009ddc:	f04f 0300 	mov.w	r3, #0
 8009de0:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 8009de4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009de8:	3301      	adds	r3, #1
 8009dea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009dee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	dde6      	ble.n	8009dc4 <qr_DvOBrgQi+0xe24>
  }

  b_A[7] = 1.0;
 8009df6:	f04f 0200 	mov.w	r2, #0
 8009dfa:	4bb9      	ldr	r3, [pc, #740]	; (800a0e0 <qr_DvOBrgQi+0x1140>)
 8009dfc:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 8009e00:	f04f 0200 	mov.w	r2, #0
 8009e04:	f04f 0300 	mov.w	r3, #0
 8009e08:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8009e0c:	f7f6 fe4e 	bl	8000aac <__aeabi_dcmpeq>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d15f      	bne.n	8009ed6 <qr_DvOBrgQi+0xf36>
    c_lastc = 5;
 8009e16:	2305      	movs	r3, #5
 8009e18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 13;
 8009e1c:	230d      	movs	r3, #13
 8009e1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 8009e22:	e009      	b.n	8009e38 <qr_DvOBrgQi+0xe98>
      c_lastc--;
 8009e24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 8009e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e32:	3b01      	subs	r3, #1
 8009e34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 8009e38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	dd12      	ble.n	8009e66 <qr_DvOBrgQi+0xec6>
 8009e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e44:	3b02      	subs	r3, #2
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009e4c:	4413      	add	r3, r2
 8009e4e:	3bd0      	subs	r3, #208	; 0xd0
 8009e50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e54:	f04f 0200 	mov.w	r2, #0
 8009e58:	f04f 0300 	mov.w	r3, #0
 8009e5c:	f7f6 fe26 	bl	8000aac <__aeabi_dcmpeq>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1de      	bne.n	8009e24 <qr_DvOBrgQi+0xe84>
    }

    b_coltop = 1;
 8009e66:	2301      	movs	r3, #1
 8009e68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    knt = 14;
 8009e6c:	230e      	movs	r3, #14
 8009e6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    do {
      exitg1 = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (knt <= c_lastc + 13) {
 8009e78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e7c:	330d      	adds	r3, #13
 8009e7e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009e82:	429a      	cmp	r2, r3
 8009e84:	dc1c      	bgt.n	8009ec0 <qr_DvOBrgQi+0xf20>
        if (b_A[knt - 1] != 0.0) {
 8009e86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	00db      	lsls	r3, r3, #3
 8009e8e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009e92:	4413      	add	r3, r2
 8009e94:	3bd0      	subs	r3, #208	; 0xd0
 8009e96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e9a:	f04f 0200 	mov.w	r2, #0
 8009e9e:	f04f 0300 	mov.w	r3, #0
 8009ea2:	f7f6 fe03 	bl	8000aac <__aeabi_dcmpeq>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d103      	bne.n	8009eb4 <qr_DvOBrgQi+0xf14>
          exitg1 = 1;
 8009eac:	2301      	movs	r3, #1
 8009eae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009eb2:	e00b      	b.n	8009ecc <qr_DvOBrgQi+0xf2c>
        } else {
          knt++;
 8009eb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009eb8:	3301      	adds	r3, #1
 8009eba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009ebe:	e005      	b.n	8009ecc <qr_DvOBrgQi+0xf2c>
        }
      } else {
        b_coltop = 0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        exitg1 = 1;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 8009ecc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d0ce      	beq.n	8009e72 <qr_DvOBrgQi+0xed2>
 8009ed4:	e005      	b.n	8009ee2 <qr_DvOBrgQi+0xf42>
  } else {
    c_lastc = 0;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 8009edc:	2300      	movs	r3, #0
 8009ede:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 8009ee2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	dd29      	ble.n	8009f3e <qr_DvOBrgQi+0xf9e>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 14, b_A, 8, work);
 8009eea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8009eee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009ef2:	9302      	str	r3, [sp, #8]
 8009ef4:	2308      	movs	r3, #8
 8009ef6:	9301      	str	r3, [sp, #4]
 8009ef8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	230e      	movs	r3, #14
 8009f00:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8009f04:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8009f08:	f002 fbee 	bl	800c6e8 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_1, 8, work, b_A, 14);
 8009f0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009f10:	61bb      	str	r3, [r7, #24]
 8009f12:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009f16:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009f1a:	61fb      	str	r3, [r7, #28]
 8009f1c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8009f20:	230e      	movs	r3, #14
 8009f22:	9301      	str	r3, [sp, #4]
 8009f24:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	2208      	movs	r2, #8
 8009f2e:	ed97 0b06 	vldr	d0, [r7, #24]
 8009f32:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8009f36:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8009f3a:	f002 fce3 	bl	800c904 <xgerc_R09LiDgJ>
  }

  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 8009f3e:	2308      	movs	r3, #8
 8009f40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009f44:	e024      	b.n	8009f90 <qr_DvOBrgQi+0xff0>
    b_A[b_coltop] *= -tau_idx_1;
 8009f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f4a:	00db      	lsls	r3, r3, #3
 8009f4c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009f50:	4413      	add	r3, r2
 8009f52:	3bd0      	subs	r3, #208	; 0xd0
 8009f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f58:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009f5c:	613b      	str	r3, [r7, #16]
 8009f5e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009f62:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009f66:	617b      	str	r3, [r7, #20]
 8009f68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009f6c:	f7f6 fb36 	bl	80005dc <__aeabi_dmul>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8009f78:	00c9      	lsls	r1, r1, #3
 8009f7a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8009f7e:	4401      	add	r1, r0
 8009f80:	39d0      	subs	r1, #208	; 0xd0
 8009f82:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 8009f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f94:	2b0b      	cmp	r3, #11
 8009f96:	ddd6      	ble.n	8009f46 <qr_DvOBrgQi+0xfa6>
  }

  b_A[7] = 1.0 - tau_idx_1;
 8009f98:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8009f9c:	f04f 0000 	mov.w	r0, #0
 8009fa0:	494f      	ldr	r1, [pc, #316]	; (800a0e0 <qr_DvOBrgQi+0x1140>)
 8009fa2:	f7f6 f963 	bl	800026c <__aeabi_dsub>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  b_A[6] = 0.0;
 8009fae:	f04f 0200 	mov.w	r2, #0
 8009fb2:	f04f 0300 	mov.w	r3, #0
 8009fb6:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  b_A[0] = 1.0;
 8009fba:	f04f 0200 	mov.w	r2, #0
 8009fbe:	4b48      	ldr	r3, [pc, #288]	; (800a0e0 <qr_DvOBrgQi+0x1140>)
 8009fc0:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 8009fc4:	f04f 0200 	mov.w	r2, #0
 8009fc8:	f04f 0300 	mov.w	r3, #0
 8009fcc:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8009fd0:	f7f6 fd6c 	bl	8000aac <__aeabi_dcmpeq>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f040 8084 	bne.w	800a0e4 <qr_DvOBrgQi+0x1144>
    c_lastc = 6;
 8009fdc:	2306      	movs	r3, #6
 8009fde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 7;
 8009fe2:	2307      	movs	r3, #7
 8009fe4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 8009fe8:	e009      	b.n	8009ffe <qr_DvOBrgQi+0x105e>
      c_lastc--;
 8009fea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 8009ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 8009ffe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a002:	2b00      	cmp	r3, #0
 800a004:	dd12      	ble.n	800a02c <qr_DvOBrgQi+0x108c>
 800a006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a00a:	3b02      	subs	r3, #2
 800a00c:	00db      	lsls	r3, r3, #3
 800a00e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a012:	4413      	add	r3, r2
 800a014:	3bd0      	subs	r3, #208	; 0xd0
 800a016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a01a:	f04f 0200 	mov.w	r2, #0
 800a01e:	f04f 0300 	mov.w	r3, #0
 800a022:	f7f6 fd43 	bl	8000aac <__aeabi_dcmpeq>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1de      	bne.n	8009fea <qr_DvOBrgQi+0x104a>
    }

    b_coltop = 2;
 800a02c:	2302      	movs	r3, #2
 800a02e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    exitg2 = false;
 800a032:	2300      	movs	r3, #0
 800a034:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800a038:	e049      	b.n	800a0ce <qr_DvOBrgQi+0x112e>
      coltop = (b_coltop - 1) * 6 + 7;
 800a03a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a03e:	1e5a      	subs	r2, r3, #1
 800a040:	4613      	mov	r3, r2
 800a042:	005b      	lsls	r3, r3, #1
 800a044:	4413      	add	r3, r2
 800a046:	005b      	lsls	r3, r3, #1
 800a048:	3307      	adds	r3, #7
 800a04a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      knt = coltop;
 800a04e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a052:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        exitg1 = 0;
 800a056:	2300      	movs	r3, #0
 800a058:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (knt <= (coltop + c_lastc) - 1) {
 800a05c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800a060:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a064:	4413      	add	r3, r2
 800a066:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800a06a:	429a      	cmp	r2, r3
 800a06c:	da1c      	bge.n	800a0a8 <qr_DvOBrgQi+0x1108>
          if (b_A[knt - 1] != 0.0) {
 800a06e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a072:	3b01      	subs	r3, #1
 800a074:	00db      	lsls	r3, r3, #3
 800a076:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a07a:	4413      	add	r3, r2
 800a07c:	3bd0      	subs	r3, #208	; 0xd0
 800a07e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a082:	f04f 0200 	mov.w	r2, #0
 800a086:	f04f 0300 	mov.w	r3, #0
 800a08a:	f7f6 fd0f 	bl	8000aac <__aeabi_dcmpeq>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d103      	bne.n	800a09c <qr_DvOBrgQi+0x10fc>
            exitg1 = 1;
 800a094:	2301      	movs	r3, #1
 800a096:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a09a:	e00d      	b.n	800a0b8 <qr_DvOBrgQi+0x1118>
          } else {
            knt++;
 800a09c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a0a6:	e007      	b.n	800a0b8 <qr_DvOBrgQi+0x1118>
          }
        } else {
          b_coltop--;
 800a0a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          exitg1 = 2;
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 800a0b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d0ca      	beq.n	800a056 <qr_DvOBrgQi+0x10b6>

      if (exitg1 == 1) {
 800a0c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d102      	bne.n	800a0ce <qr_DvOBrgQi+0x112e>
        exitg2 = true;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800a0ce:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10c      	bne.n	800a0f0 <qr_DvOBrgQi+0x1150>
 800a0d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	dcad      	bgt.n	800a03a <qr_DvOBrgQi+0x109a>
 800a0de:	e007      	b.n	800a0f0 <qr_DvOBrgQi+0x1150>
 800a0e0:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800a0f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	dd29      	ble.n	800a14c <qr_DvOBrgQi+0x11ac>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 7, b_A, 1, work);
 800a0f8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800a0fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a100:	9302      	str	r3, [sp, #8]
 800a102:	2301      	movs	r3, #1
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	2307      	movs	r3, #7
 800a10e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800a112:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a116:	f002 fae7 	bl	800c6e8 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 7);
 800a11a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a11e:	60bb      	str	r3, [r7, #8]
 800a120:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a124:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a12e:	2307      	movs	r3, #7
 800a130:	9301      	str	r3, [sp, #4]
 800a132:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	4613      	mov	r3, r2
 800a13a:	2201      	movs	r2, #1
 800a13c:	ed97 0b02 	vldr	d0, [r7, #8]
 800a140:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800a144:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a148:	f002 fbdc 	bl	800c904 <xgerc_R09LiDgJ>
  }

  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800a14c:	2301      	movs	r3, #1
 800a14e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a152:	e024      	b.n	800a19e <qr_DvOBrgQi+0x11fe>
    b_A[b_coltop] *= -tau_idx_0;
 800a154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a158:	00db      	lsls	r3, r3, #3
 800a15a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a15e:	4413      	add	r3, r2
 800a160:	3bd0      	subs	r3, #208	; 0xd0
 800a162:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a166:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a16a:	603b      	str	r3, [r7, #0]
 800a16c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a170:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a174:	607b      	str	r3, [r7, #4]
 800a176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a17a:	f7f6 fa2f 	bl	80005dc <__aeabi_dmul>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800a186:	00c9      	lsls	r1, r1, #3
 800a188:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800a18c:	4401      	add	r1, r0
 800a18e:	39d0      	subs	r1, #208	; 0xd0
 800a190:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800a194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a198:	3301      	adds	r3, #1
 800a19a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a19e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1a2:	2b05      	cmp	r3, #5
 800a1a4:	ddd6      	ble.n	800a154 <qr_DvOBrgQi+0x11b4>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800a1a6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800a1aa:	f04f 0000 	mov.w	r0, #0
 800a1ae:	4923      	ldr	r1, [pc, #140]	; (800a23c <qr_DvOBrgQi+0x129c>)
 800a1b0:	f7f6 f85c 	bl	800026c <__aeabi_dsub>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_coltop = 0;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a1c8:	e02d      	b.n	800a226 <qr_DvOBrgQi+0x1286>
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a1d0:	e01b      	b.n	800a20a <qr_DvOBrgQi+0x126a>
      knt = c_lastc + b_coltop;
 800a1d2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a1d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1da:	4413      	add	r3, r2
 800a1dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Q[knt] = b_A[knt];
 800a1e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a1e4:	00db      	lsls	r3, r3, #3
 800a1e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a1e8:	18d1      	adds	r1, r2, r3
 800a1ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a1ee:	00db      	lsls	r3, r3, #3
 800a1f0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a1f4:	4413      	add	r3, r2
 800a1f6:	3bd0      	subs	r3, #208	; 0xd0
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	e9c1 2300 	strd	r2, r3, [r1]
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800a200:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a204:	3301      	adds	r3, #1
 800a206:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a20a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a20e:	2b05      	cmp	r3, #5
 800a210:	dddf      	ble.n	800a1d2 <qr_DvOBrgQi+0x1232>
    }

    b_coltop += 6;
 800a212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a216:	3306      	adds	r3, #6
 800a218:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800a21c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a220:	3301      	adds	r3, #1
 800a222:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a226:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	ddcd      	ble.n	800a1ca <qr_DvOBrgQi+0x122a>
  }
}
 800a22e:	bf00      	nop
 800a230:	bf00      	nop
 800a232:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800a236:	46bd      	mov	sp, r7
 800a238:	bdb0      	pop	{r4, r5, r7, pc}
 800a23a:	bf00      	nop
 800a23c:	3ff00000 	.word	0x3ff00000

0800a240 <rotate_LZ7ctbe0>:
#include "rotate_LZ7ctbe0.h"
#include <math.h>
#include "rt_hypotd_snf.h"

void rotate_LZ7ctbe0(real_T x, real_T y, real_T *c, real_T *s, real_T *r)
{
 800a240:	b5b0      	push	{r4, r5, r7, lr}
 800a242:	b092      	sub	sp, #72	; 0x48
 800a244:	af00      	add	r7, sp, #0
 800a246:	ed87 0b06 	vstr	d0, [r7, #24]
 800a24a:	ed87 1b04 	vstr	d1, [r7, #16]
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
  real_T absx;
  real_T absy;
  absx = fabs(x);
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	643b      	str	r3, [r7, #64]	; 0x40
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a25e:	647b      	str	r3, [r7, #68]	; 0x44
  absy = fabs(y);
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	63bb      	str	r3, [r7, #56]	; 0x38
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a26a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (absy == 0.0) {
 800a26c:	f04f 0200 	mov.w	r2, #0
 800a270:	f04f 0300 	mov.w	r3, #0
 800a274:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a278:	f7f6 fc18 	bl	8000aac <__aeabi_dcmpeq>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d012      	beq.n	800a2a8 <rotate_LZ7ctbe0+0x68>
    *c = 1.0;
 800a282:	68f9      	ldr	r1, [r7, #12]
 800a284:	f04f 0200 	mov.w	r2, #0
 800a288:	4b4e      	ldr	r3, [pc, #312]	; (800a3c4 <rotate_LZ7ctbe0+0x184>)
 800a28a:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 0.0;
 800a28e:	68b9      	ldr	r1, [r7, #8]
 800a290:	f04f 0200 	mov.w	r2, #0
 800a294:	f04f 0300 	mov.w	r3, #0
 800a298:	e9c1 2300 	strd	r2, r3, [r1]
    *r = x;
 800a29c:	6879      	ldr	r1, [r7, #4]
 800a29e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2a2:	e9c1 2300 	strd	r2, r3, [r1]
    *c = absx / rho;
    xx /= absx;
    *s = xx * yy / rho;
    *r = rho * absy * xx;
  }
}
 800a2a6:	e088      	b.n	800a3ba <rotate_LZ7ctbe0+0x17a>
  } else if (absx == 0.0) {
 800a2a8:	f04f 0200 	mov.w	r2, #0
 800a2ac:	f04f 0300 	mov.w	r3, #0
 800a2b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a2b4:	f7f6 fbfa 	bl	8000aac <__aeabi_dcmpeq>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d012      	beq.n	800a2e4 <rotate_LZ7ctbe0+0xa4>
    *c = 0.0;
 800a2be:	68f9      	ldr	r1, [r7, #12]
 800a2c0:	f04f 0200 	mov.w	r2, #0
 800a2c4:	f04f 0300 	mov.w	r3, #0
 800a2c8:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 1.0;
 800a2cc:	68b9      	ldr	r1, [r7, #8]
 800a2ce:	f04f 0200 	mov.w	r2, #0
 800a2d2:	4b3c      	ldr	r3, [pc, #240]	; (800a3c4 <rotate_LZ7ctbe0+0x184>)
 800a2d4:	e9c1 2300 	strd	r2, r3, [r1]
    *r = y;
 800a2d8:	6879      	ldr	r1, [r7, #4]
 800a2da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a2de:	e9c1 2300 	strd	r2, r3, [r1]
}
 800a2e2:	e06a      	b.n	800a3ba <rotate_LZ7ctbe0+0x17a>
    absy += absx;
 800a2e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a2e8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a2ec:	f7f5 ffc0 	bl	8000270 <__adddf3>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xx = x / absy;
 800a2f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a2fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a300:	f7f6 fa96 	bl	8000830 <__aeabi_ddiv>
 800a304:	4602      	mov	r2, r0
 800a306:	460b      	mov	r3, r1
 800a308:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    yy = y / absy;
 800a30c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a310:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a314:	f7f6 fa8c 	bl	8000830 <__aeabi_ddiv>
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    absx = fabs(xx);
 800a320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a322:	643b      	str	r3, [r7, #64]	; 0x40
 800a324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a326:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a32a:	647b      	str	r3, [r7, #68]	; 0x44
    rho = rt_hypotd_snf(absx, fabs(yy));
 800a32c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800a32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a330:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800a334:	ec45 4b11 	vmov	d1, r4, r5
 800a338:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800a33c:	f000 f90c 	bl	800a558 <rt_hypotd_snf>
 800a340:	ed87 0b08 	vstr	d0, [r7, #32]
    *c = absx / rho;
 800a344:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a348:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a34c:	f7f6 fa70 	bl	8000830 <__aeabi_ddiv>
 800a350:	4602      	mov	r2, r0
 800a352:	460b      	mov	r3, r1
 800a354:	68f9      	ldr	r1, [r7, #12]
 800a356:	e9c1 2300 	strd	r2, r3, [r1]
    xx /= absx;
 800a35a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a35e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a362:	f7f6 fa65 	bl	8000830 <__aeabi_ddiv>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    *s = xx * yy / rho;
 800a36e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a372:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a376:	f7f6 f931 	bl	80005dc <__aeabi_dmul>
 800a37a:	4602      	mov	r2, r0
 800a37c:	460b      	mov	r3, r1
 800a37e:	4610      	mov	r0, r2
 800a380:	4619      	mov	r1, r3
 800a382:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a386:	f7f6 fa53 	bl	8000830 <__aeabi_ddiv>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	68b9      	ldr	r1, [r7, #8]
 800a390:	e9c1 2300 	strd	r2, r3, [r1]
    *r = rho * absy * xx;
 800a394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a398:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a39c:	f7f6 f91e 	bl	80005dc <__aeabi_dmul>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a3ac:	f7f6 f916 	bl	80005dc <__aeabi_dmul>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	6879      	ldr	r1, [r7, #4]
 800a3b6:	e9c1 2300 	strd	r2, r3, [r1]
}
 800a3ba:	bf00      	nop
 800a3bc:	3748      	adds	r7, #72	; 0x48
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bdb0      	pop	{r4, r5, r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	3ff00000 	.word	0x3ff00000

0800a3c8 <rtGetInf>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetInf(void)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800a3ce:	2340      	movs	r3, #64	; 0x40
 800a3d0:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 800a3d2:	f04f 0200 	mov.w	r2, #0
 800a3d6:	f04f 0300 	mov.w	r3, #0
 800a3da:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2b20      	cmp	r3, #32
 800a3e2:	d10b      	bne.n	800a3fc <rtGetInf+0x34>
    inf = rtGetInfF();
 800a3e4:	f000 f820 	bl	800a428 <rtGetInfF>
 800a3e8:	ee10 3a10 	vmov	r3, s0
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7f6 f89d 	bl	800052c <__aeabi_f2d>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800a3fa:	e007      	b.n	800a40c <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800a3fc:	4b09      	ldr	r3, [pc, #36]	; (800a424 <rtGetInf+0x5c>)
 800a3fe:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800a400:	2300      	movs	r3, #0
 800a402:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 800a404:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a408:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 800a40c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a410:	ec43 2b17 	vmov	d7, r2, r3
}
 800a414:	eeb0 0a47 	vmov.f32	s0, s14
 800a418:	eef0 0a67 	vmov.f32	s1, s15
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	7ff00000 	.word	0x7ff00000

0800a428 <rtGetInfF>:

real32_T rtGetInfF(void)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800a42e:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800a432:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	ee07 3a90 	vmov	s15, r3
}
 800a43a:	eeb0 0a67 	vmov.f32	s0, s15
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <rtGetMinusInf>:

real_T rtGetMinusInf(void)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800a44e:	2340      	movs	r3, #64	; 0x40
 800a450:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 800a452:	f04f 0200 	mov.w	r2, #0
 800a456:	f04f 0300 	mov.w	r3, #0
 800a45a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2b20      	cmp	r3, #32
 800a462:	d10b      	bne.n	800a47c <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 800a464:	f000 f820 	bl	800a4a8 <rtGetMinusInfF>
 800a468:	ee10 3a10 	vmov	r3, s0
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7f6 f85d 	bl	800052c <__aeabi_f2d>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800a47a:	e007      	b.n	800a48c <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800a47c:	4b09      	ldr	r3, [pc, #36]	; (800a4a4 <rtGetMinusInf+0x5c>)
 800a47e:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800a480:	2300      	movs	r3, #0
 800a482:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 800a484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a488:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 800a48c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a490:	ec43 2b17 	vmov	d7, r2, r3
}
 800a494:	eeb0 0a47 	vmov.f32	s0, s14
 800a498:	eef0 0a67 	vmov.f32	s1, s15
 800a49c:	3718      	adds	r7, #24
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	fff00000 	.word	0xfff00000

0800a4a8 <rtGetMinusInfF>:

real32_T rtGetMinusInfF(void)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 800a4ae:	4b06      	ldr	r3, [pc, #24]	; (800a4c8 <rtGetMinusInfF+0x20>)
 800a4b0:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	ee07 3a90 	vmov	s15, r3
}
 800a4b8:	eeb0 0a67 	vmov.f32	s0, s15
 800a4bc:	370c      	adds	r7, #12
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	ff800000 	.word	0xff800000

0800a4cc <rtGetNaN>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetNaN(void)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800a4d2:	2340      	movs	r3, #64	; 0x40
 800a4d4:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 800a4d6:	f04f 0200 	mov.w	r2, #0
 800a4da:	f04f 0300 	mov.w	r3, #0
 800a4de:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b20      	cmp	r3, #32
 800a4e6:	d10b      	bne.n	800a500 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 800a4e8:	f000 f820 	bl	800a52c <rtGetNaNF>
 800a4ec:	ee10 3a10 	vmov	r3, s0
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7f6 f81b 	bl	800052c <__aeabi_f2d>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800a4fe:	e007      	b.n	800a510 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800a500:	4b09      	ldr	r3, [pc, #36]	; (800a528 <rtGetNaN+0x5c>)
 800a502:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800a504:	2300      	movs	r3, #0
 800a506:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 800a508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a50c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 800a510:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a514:	ec43 2b17 	vmov	d7, r2, r3
}
 800a518:	eeb0 0a47 	vmov.f32	s0, s14
 800a51c:	eef0 0a67 	vmov.f32	s1, s15
 800a520:	3718      	adds	r7, #24
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	fff80000 	.word	0xfff80000

0800a52c <rtGetNaNF>:

real32_T rtGetNaNF(void)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 800a532:	f04f 0300 	mov.w	r3, #0
 800a536:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 800a538:	4b05      	ldr	r3, [pc, #20]	; (800a550 <rtGetNaNF+0x24>)
 800a53a:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	ee07 3a90 	vmov	s15, r3
}
 800a542:	eeb0 0a67 	vmov.f32	s0, s15
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr
 800a550:	ffc00000 	.word	0xffc00000
 800a554:	00000000 	.word	0x00000000

0800a558 <rt_hypotd_snf>:
#include "rt_hypotd_snf.h"
#include <math.h>
#include "rt_nonfinite.h"

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b088      	sub	sp, #32
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	ed87 0b02 	vstr	d0, [r7, #8]
 800a562:	ed87 1b00 	vstr	d1, [r7]
  real_T a;
  real_T y;
  a = fabs(u0);
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	613b      	str	r3, [r7, #16]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a570:	617b      	str	r3, [r7, #20]
  y = fabs(u1);
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	61bb      	str	r3, [r7, #24]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a57c:	61fb      	str	r3, [r7, #28]
  if (a < y) {
 800a57e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a582:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a586:	f7f6 fa9b 	bl	8000ac0 <__aeabi_dcmplt>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d02d      	beq.n	800a5ec <rt_hypotd_snf+0x94>
    a /= y;
 800a590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a594:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a598:	f7f6 f94a 	bl	8000830 <__aeabi_ddiv>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y *= sqrt(a * a + 1.0);
 800a5a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a5a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a5ac:	f7f6 f816 	bl	80005dc <__aeabi_dmul>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	f04f 0200 	mov.w	r2, #0
 800a5bc:	4b38      	ldr	r3, [pc, #224]	; (800a6a0 <rt_hypotd_snf+0x148>)
 800a5be:	f7f5 fe57 	bl	8000270 <__adddf3>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	ec43 2b17 	vmov	d7, r2, r3
 800a5ca:	eeb0 0a47 	vmov.f32	s0, s14
 800a5ce:	eef0 0a67 	vmov.f32	s1, s15
 800a5d2:	f00b fc73 	bl	8015ebc <sqrt>
 800a5d6:	ec53 2b10 	vmov	r2, r3, d0
 800a5da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a5de:	f7f5 fffd 	bl	80005dc <__aeabi_dmul>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800a5ea:	e048      	b.n	800a67e <rt_hypotd_snf+0x126>
  } else if (a > y) {
 800a5ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a5f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a5f4:	f7f6 fa82 	bl	8000afc <__aeabi_dcmpgt>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d02d      	beq.n	800a65a <rt_hypotd_snf+0x102>
    y /= a;
 800a5fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a602:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a606:	f7f6 f913 	bl	8000830 <__aeabi_ddiv>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = sqrt(y * y + 1.0) * a;
 800a612:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a616:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a61a:	f7f5 ffdf 	bl	80005dc <__aeabi_dmul>
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	4610      	mov	r0, r2
 800a624:	4619      	mov	r1, r3
 800a626:	f04f 0200 	mov.w	r2, #0
 800a62a:	4b1d      	ldr	r3, [pc, #116]	; (800a6a0 <rt_hypotd_snf+0x148>)
 800a62c:	f7f5 fe20 	bl	8000270 <__adddf3>
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	ec43 2b17 	vmov	d7, r2, r3
 800a638:	eeb0 0a47 	vmov.f32	s0, s14
 800a63c:	eef0 0a67 	vmov.f32	s1, s15
 800a640:	f00b fc3c 	bl	8015ebc <sqrt>
 800a644:	ec53 2b10 	vmov	r2, r3, d0
 800a648:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a64c:	f7f5 ffc6 	bl	80005dc <__aeabi_dmul>
 800a650:	4602      	mov	r2, r0
 800a652:	460b      	mov	r3, r1
 800a654:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800a658:	e011      	b.n	800a67e <rt_hypotd_snf+0x126>
  } else if (!rtIsNaN(y)) {
 800a65a:	ed97 0b06 	vldr	d0, [r7, #24]
 800a65e:	f000 f889 	bl	800a774 <rtIsNaN>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10a      	bne.n	800a67e <rt_hypotd_snf+0x126>
    y = a * 1.4142135623730951;
 800a668:	a30b      	add	r3, pc, #44	; (adr r3, 800a698 <rt_hypotd_snf+0x140>)
 800a66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a672:	f7f5 ffb3 	bl	80005dc <__aeabi_dmul>
 800a676:	4602      	mov	r2, r0
 800a678:	460b      	mov	r3, r1
 800a67a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  return y;
 800a67e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a682:	ec43 2b17 	vmov	d7, r2, r3
}
 800a686:	eeb0 0a47 	vmov.f32	s0, s14
 800a68a:	eef0 0a67 	vmov.f32	s1, s15
 800a68e:	3720      	adds	r7, #32
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	f3af 8000 	nop.w
 800a698:	667f3bcd 	.word	0x667f3bcd
 800a69c:	3ff6a09e 	.word	0x3ff6a09e
 800a6a0:	3ff00000 	.word	0x3ff00000

0800a6a4 <rt_InitInfAndNaN>:
real_T rtNaN;
real32_T rtInfF;
real32_T rtMinusInfF;
real32_T rtNaNF;
void rt_InitInfAndNaN(size_t realSize)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 800a6ac:	f7ff ff0e 	bl	800a4cc <rtGetNaN>
 800a6b0:	eeb0 7a40 	vmov.f32	s14, s0
 800a6b4:	eef0 7a60 	vmov.f32	s15, s1
 800a6b8:	4b16      	ldr	r3, [pc, #88]	; (800a714 <rt_InitInfAndNaN+0x70>)
 800a6ba:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 800a6be:	f7ff ff35 	bl	800a52c <rtGetNaNF>
 800a6c2:	eef0 7a40 	vmov.f32	s15, s0
 800a6c6:	4b14      	ldr	r3, [pc, #80]	; (800a718 <rt_InitInfAndNaN+0x74>)
 800a6c8:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 800a6cc:	f7ff fe7c 	bl	800a3c8 <rtGetInf>
 800a6d0:	eeb0 7a40 	vmov.f32	s14, s0
 800a6d4:	eef0 7a60 	vmov.f32	s15, s1
 800a6d8:	4b10      	ldr	r3, [pc, #64]	; (800a71c <rt_InitInfAndNaN+0x78>)
 800a6da:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 800a6de:	f7ff fea3 	bl	800a428 <rtGetInfF>
 800a6e2:	eef0 7a40 	vmov.f32	s15, s0
 800a6e6:	4b0e      	ldr	r3, [pc, #56]	; (800a720 <rt_InitInfAndNaN+0x7c>)
 800a6e8:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 800a6ec:	f7ff feac 	bl	800a448 <rtGetMinusInf>
 800a6f0:	eeb0 7a40 	vmov.f32	s14, s0
 800a6f4:	eef0 7a60 	vmov.f32	s15, s1
 800a6f8:	4b0a      	ldr	r3, [pc, #40]	; (800a724 <rt_InitInfAndNaN+0x80>)
 800a6fa:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 800a6fe:	f7ff fed3 	bl	800a4a8 <rtGetMinusInfF>
 800a702:	eef0 7a40 	vmov.f32	s15, s0
 800a706:	4b08      	ldr	r3, [pc, #32]	; (800a728 <rt_InitInfAndNaN+0x84>)
 800a708:	edc3 7a00 	vstr	s15, [r3]
}
 800a70c:	bf00      	nop
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	2000de00 	.word	0x2000de00
 800a718:	2000ddf0 	.word	0x2000ddf0
 800a71c:	2000ddf8 	.word	0x2000ddf8
 800a720:	2000ddf4 	.word	0x2000ddf4
 800a724:	2000de08 	.word	0x2000de08
 800a728:	2000de10 	.word	0x2000de10

0800a72c <rtIsInf>:

boolean_T rtIsInf(real_T value)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800a736:	4b0d      	ldr	r3, [pc, #52]	; (800a76c <rtIsInf+0x40>)
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a740:	f7f6 f9b4 	bl	8000aac <__aeabi_dcmpeq>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d109      	bne.n	800a75e <rtIsInf+0x32>
 800a74a:	4b09      	ldr	r3, [pc, #36]	; (800a770 <rtIsInf+0x44>)
 800a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a750:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a754:	f7f6 f9aa 	bl	8000aac <__aeabi_dcmpeq>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d001      	beq.n	800a762 <rtIsInf+0x36>
 800a75e:	2301      	movs	r3, #1
 800a760:	e000      	b.n	800a764 <rtIsInf+0x38>
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	2000ddf8 	.word	0x2000ddf8
 800a770:	2000de08 	.word	0x2000de08

0800a774 <rtIsNaN>:
{
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

boolean_T rtIsNaN(real_T value)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800a782:	2340      	movs	r3, #64	; 0x40
 800a784:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	2b20      	cmp	r3, #32
 800a78a:	d10b      	bne.n	800a7a4 <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 800a78c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a790:	f7f6 fa1c 	bl	8000bcc <__aeabi_d2f>
 800a794:	4603      	mov	r3, r0
 800a796:	ee00 3a10 	vmov	s0, r3
 800a79a:	f000 f821 	bl	800a7e0 <rtIsNaNF>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	75fb      	strb	r3, [r7, #23]
 800a7a2:	e015      	b.n	800a7d0 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 800a7a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	4b0b      	ldr	r3, [pc, #44]	; (800a7dc <rtIsNaN+0x68>)
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	4a0a      	ldr	r2, [pc, #40]	; (800a7dc <rtIsNaN+0x68>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d109      	bne.n	800a7cc <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d102      	bne.n	800a7c8 <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 800a7c2:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d001      	beq.n	800a7cc <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e000      	b.n	800a7ce <rtIsNaN+0x5a>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 800a7d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3718      	adds	r7, #24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	7ff00000 	.word	0x7ff00000

0800a7e0 <rtIsNaNF>:

boolean_T rtIsNaNF(real32_T value)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 800a7f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a7f8:	d106      	bne.n	800a808 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <rtIsNaNF+0x28>
 800a804:	2301      	movs	r3, #1
 800a806:	e000      	b.n	800a80a <rtIsNaNF+0x2a>
 800a808:	2300      	movs	r3, #0
 800a80a:	b2db      	uxtb	r3, r3
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3714      	adds	r7, #20
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <svd_u3DvUgOe>:
#include "xrotg_XzIjz1eG.h"
#include "xrot_i7f01JoJ.h"
#include "xswap_JoAqPjUv.h"

void svd_u3DvUgOe(const real_T A[9], real_T U[9], real_T s[3], real_T V[9])
{
 800a818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a81c:	ed2d 8b02 	vpush	{d8}
 800a820:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800a824:	af02      	add	r7, sp, #8
 800a826:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800a82a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800a82e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800a832:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800a836:	6013      	str	r3, [r2, #0]
  int32_T kase;
  int32_T m;
  int32_T qjj;
  int32_T qq;
  boolean_T apply_transform;
  e[0] = 0.0;
 800a838:	f04f 0200 	mov.w	r2, #0
 800a83c:	f04f 0300 	mov.w	r3, #0
 800a840:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  work[0] = 0.0;
 800a844:	f04f 0200 	mov.w	r2, #0
 800a848:	f04f 0300 	mov.w	r3, #0
 800a84c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  e[1] = 0.0;
 800a850:	f04f 0200 	mov.w	r2, #0
 800a854:	f04f 0300 	mov.w	r3, #0
 800a858:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  work[1] = 0.0;
 800a85c:	f04f 0200 	mov.w	r2, #0
 800a860:	f04f 0300 	mov.w	r3, #0
 800a864:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  e[2] = 0.0;
 800a868:	f04f 0200 	mov.w	r2, #0
 800a86c:	f04f 0300 	mov.w	r3, #0
 800a870:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  work[2] = 0.0;
 800a874:	f04f 0200 	mov.w	r2, #0
 800a878:	f04f 0300 	mov.w	r3, #0
 800a87c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  for (qq = 0; qq < 9; qq++) {
 800a880:	2300      	movs	r3, #0
 800a882:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800a886:	e02e      	b.n	800a8e6 <svd_u3DvUgOe+0xce>
    b_A[qq] = A[qq];
 800a888:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a88c:	00da      	lsls	r2, r3, #3
 800a88e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a892:	4413      	add	r3, r2
 800a894:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a898:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a89c:	00db      	lsls	r3, r3, #3
 800a89e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a8a2:	4413      	add	r3, r2
 800a8a4:	3b88      	subs	r3, #136	; 0x88
 800a8a6:	e9c3 0100 	strd	r0, r1, [r3]
    U[qq] = 0.0;
 800a8aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a8ae:	00da      	lsls	r2, r3, #3
 800a8b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a8b4:	1899      	adds	r1, r3, r2
 800a8b6:	f04f 0200 	mov.w	r2, #0
 800a8ba:	f04f 0300 	mov.w	r3, #0
 800a8be:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq] = 0.0;
 800a8c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a8c6:	00da      	lsls	r2, r3, #3
 800a8c8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	1899      	adds	r1, r3, r2
 800a8d0:	f04f 0200 	mov.w	r2, #0
 800a8d4:	f04f 0300 	mov.w	r3, #0
 800a8d8:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 0; qq < 9; qq++) {
 800a8dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800a8e6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a8ea:	2b08      	cmp	r3, #8
 800a8ec:	ddcc      	ble.n	800a888 <svd_u3DvUgOe+0x70>
  }

  qq = 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  apply_transform = false;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(3, b_A, 1);
 800a8fa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a8fe:	2201      	movs	r2, #1
 800a900:	4619      	mov	r1, r3
 800a902:	2003      	movs	r0, #3
 800a904:	f002 fbbc 	bl	800d080 <xnrm2_xDOlDEtw>
 800a908:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800a90c:	f04f 0200 	mov.w	r2, #0
 800a910:	f04f 0300 	mov.w	r3, #0
 800a914:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800a918:	f7f6 f8f0 	bl	8000afc <__aeabi_dcmpgt>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d07b      	beq.n	800aa1a <svd_u3DvUgOe+0x202>
    apply_transform = true;
 800a922:	2301      	movs	r3, #1
 800a924:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[0] < 0.0) {
 800a928:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800a92c:	f04f 0200 	mov.w	r2, #0
 800a930:	f04f 0300 	mov.w	r3, #0
 800a934:	f7f6 f8c4 	bl	8000ac0 <__aeabi_dcmplt>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d008      	beq.n	800a950 <svd_u3DvUgOe+0x138>
      b_s[0] = -nrm;
 800a93e:	f8d7 41c8 	ldr.w	r4, [r7, #456]	; 0x1c8
 800a942:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800a946:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800a94a:	e9c7 4558 	strd	r4, r5, [r7, #352]	; 0x160
 800a94e:	e003      	b.n	800a958 <svd_u3DvUgOe+0x140>
    } else {
      b_s[0] = nrm;
 800a950:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800a954:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    }

    if (fabs(b_s[0]) >= 1.0020841800044864E-292) {
 800a958:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800a95c:	4690      	mov	r8, r2
 800a95e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800a962:	f04f 0200 	mov.w	r2, #0
 800a966:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a96a:	4640      	mov	r0, r8
 800a96c:	4649      	mov	r1, r9
 800a96e:	f7f6 f8bb 	bl	8000ae8 <__aeabi_dcmpge>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d016      	beq.n	800a9a6 <svd_u3DvUgOe+0x18e>
      xscal_59GtRAwv(3, 1.0 / b_s[0], b_A, 1);
 800a978:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800a97c:	f04f 0000 	mov.w	r0, #0
 800a980:	49c1      	ldr	r1, [pc, #772]	; (800ac88 <svd_u3DvUgOe+0x470>)
 800a982:	f7f5 ff55 	bl	8000830 <__aeabi_ddiv>
 800a986:	4602      	mov	r2, r0
 800a988:	460b      	mov	r3, r1
 800a98a:	ec43 2b17 	vmov	d7, r2, r3
 800a98e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a992:	2201      	movs	r2, #1
 800a994:	4619      	mov	r1, r3
 800a996:	eeb0 0a47 	vmov.f32	s0, s14
 800a99a:	eef0 0a67 	vmov.f32	s1, s15
 800a99e:	2003      	movs	r0, #3
 800a9a0:	f002 fe36 	bl	800d610 <xscal_59GtRAwv>
 800a9a4:	e026      	b.n	800a9f4 <svd_u3DvUgOe+0x1dc>
    } else {
      for (qjj = 0; qjj < 3; qjj++) {
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800a9ac:	e01e      	b.n	800a9ec <svd_u3DvUgOe+0x1d4>
        b_A[qjj] /= b_s[0];
 800a9ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800a9b2:	00db      	lsls	r3, r3, #3
 800a9b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a9b8:	4413      	add	r3, r2
 800a9ba:	3b88      	subs	r3, #136	; 0x88
 800a9bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9c0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800a9c4:	f7f5 ff34 	bl	8000830 <__aeabi_ddiv>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800a9d4:	00db      	lsls	r3, r3, #3
 800a9d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a9da:	4413      	add	r3, r2
 800a9dc:	3b88      	subs	r3, #136	; 0x88
 800a9de:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 0; qjj < 3; qjj++) {
 800a9e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800a9ec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	dddc      	ble.n	800a9ae <svd_u3DvUgOe+0x196>
      }
    }

    b_A[0]++;
 800a9f4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800a9f8:	f04f 0200 	mov.w	r2, #0
 800a9fc:	4ba2      	ldr	r3, [pc, #648]	; (800ac88 <svd_u3DvUgOe+0x470>)
 800a9fe:	f7f5 fc37 	bl	8000270 <__adddf3>
 800aa02:	4602      	mov	r2, r0
 800aa04:	460b      	mov	r3, r1
 800aa06:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
    b_s[0] = -b_s[0];
 800aa0a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800aa0e:	4692      	mov	sl, r2
 800aa10:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800aa14:	e9c7 ab58 	strd	sl, fp, [r7, #352]	; 0x160
 800aa18:	e005      	b.n	800aa26 <svd_u3DvUgOe+0x20e>
  } else {
    b_s[0] = 0.0;
 800aa1a:	f04f 0200 	mov.w	r2, #0
 800aa1e:	f04f 0300 	mov.w	r3, #0
 800aa22:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  }

  for (d = 1; d + 1 < 4; d++) {
 800aa26:	2301      	movs	r3, #1
 800aa28:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800aa2c:	e047      	b.n	800aabe <svd_u3DvUgOe+0x2a6>
    qjj = 3 * d;
 800aa2e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800aa32:	4613      	mov	r3, r2
 800aa34:	005b      	lsls	r3, r3, #1
 800aa36:	4413      	add	r3, r2
 800aa38:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800aa3c:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d025      	beq.n	800aa90 <svd_u3DvUgOe+0x278>
      xaxpy_guu0hJif(3, -(xdotc_mznw4aLl(3, b_A, 1, b_A, qjj + 1) / b_A[0]), 1,
 800aa44:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800aa48:	3301      	adds	r3, #1
 800aa4a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800aa4e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	4613      	mov	r3, r2
 800aa56:	2201      	movs	r2, #1
 800aa58:	2003      	movs	r0, #3
 800aa5a:	f001 fdf8 	bl	800c64e <xdotc_mznw4aLl>
 800aa5e:	ec51 0b10 	vmov	r0, r1, d0
 800aa62:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800aa66:	f7f5 fee3 	bl	8000830 <__aeabi_ddiv>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800aa72:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800aa76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa7a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800aa7e:	3301      	adds	r3, #1
 800aa80:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800aa84:	2101      	movs	r1, #1
 800aa86:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 800aa8a:	2003      	movs	r0, #3
 800aa8c:	f001 fd8b 	bl	800c5a6 <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800aa90:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800aa94:	00db      	lsls	r3, r3, #3
 800aa96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800aa9a:	4413      	add	r3, r2
 800aa9c:	3b88      	subs	r3, #136	; 0x88
 800aa9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aaa2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800aaa6:	00db      	lsls	r3, r3, #3
 800aaa8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800aaac:	4413      	add	r3, r2
 800aaae:	3bb8      	subs	r3, #184	; 0xb8
 800aab0:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 1; d + 1 < 4; d++) {
 800aab4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800aab8:	3301      	adds	r3, #1
 800aaba:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800aabe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	ddb3      	ble.n	800aa2e <svd_u3DvUgOe+0x216>
  }

  while (qq + 1 < 4) {
 800aac6:	e015      	b.n	800aaf4 <svd_u3DvUgOe+0x2dc>
    U[qq] = b_A[qq];
 800aac8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800aacc:	00da      	lsls	r2, r3, #3
 800aace:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800aad2:	1899      	adds	r1, r3, r2
 800aad4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800aad8:	00db      	lsls	r3, r3, #3
 800aada:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800aade:	4413      	add	r3, r2
 800aae0:	3b88      	subs	r3, #136	; 0x88
 800aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae6:	e9c1 2300 	strd	r2, r3, [r1]
    qq++;
 800aaea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800aaee:	3301      	adds	r3, #1
 800aaf0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  while (qq + 1 < 4) {
 800aaf4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	dde5      	ble.n	800aac8 <svd_u3DvUgOe+0x2b0>
  }

  nrm = xnrm2_Rlk0oxWw(2, e, 2);
 800aafc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ab00:	2202      	movs	r2, #2
 800ab02:	4619      	mov	r1, r3
 800ab04:	2002      	movs	r0, #2
 800ab06:	f002 f95f 	bl	800cdc8 <xnrm2_Rlk0oxWw>
 800ab0a:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm == 0.0) {
 800ab0e:	f04f 0200 	mov.w	r2, #0
 800ab12:	f04f 0300 	mov.w	r3, #0
 800ab16:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800ab1a:	f7f5 ffc7 	bl	8000aac <__aeabi_dcmpeq>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d006      	beq.n	800ab32 <svd_u3DvUgOe+0x31a>
    e[0] = 0.0;
 800ab24:	f04f 0200 	mov.w	r2, #0
 800ab28:	f04f 0300 	mov.w	r3, #0
 800ab2c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 800ab30:	e10d      	b.n	800ad4e <svd_u3DvUgOe+0x536>
  } else {
    if (e[1] < 0.0) {
 800ab32:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800ab36:	f04f 0200 	mov.w	r2, #0
 800ab3a:	f04f 0300 	mov.w	r3, #0
 800ab3e:	f7f5 ffbf 	bl	8000ac0 <__aeabi_dcmplt>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00e      	beq.n	800ab66 <svd_u3DvUgOe+0x34e>
      e[0] = -nrm;
 800ab48:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800ab4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab50:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800ab54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ab58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab5c:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 800ab60:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
 800ab64:	e003      	b.n	800ab6e <svd_u3DvUgOe+0x356>
    } else {
      e[0] = nrm;
 800ab66:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800ab6a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    }

    nrm = e[0];
 800ab6e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800ab72:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    if (fabs(e[0]) >= 1.0020841800044864E-292) {
 800ab76:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800ab7a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800ab7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab86:	f04f 0200 	mov.w	r2, #0
 800ab8a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800ab8e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800ab92:	f7f5 ffa9 	bl	8000ae8 <__aeabi_dcmpge>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d016      	beq.n	800abca <svd_u3DvUgOe+0x3b2>
      xscal_PLmmUlD2(2, 1.0 / e[0], e, 2);
 800ab9c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800aba0:	f04f 0000 	mov.w	r0, #0
 800aba4:	4938      	ldr	r1, [pc, #224]	; (800ac88 <svd_u3DvUgOe+0x470>)
 800aba6:	f7f5 fe43 	bl	8000830 <__aeabi_ddiv>
 800abaa:	4602      	mov	r2, r0
 800abac:	460b      	mov	r3, r1
 800abae:	ec43 2b17 	vmov	d7, r2, r3
 800abb2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800abb6:	2202      	movs	r2, #2
 800abb8:	4619      	mov	r1, r3
 800abba:	eeb0 0a47 	vmov.f32	s0, s14
 800abbe:	eef0 0a67 	vmov.f32	s1, s15
 800abc2:	2002      	movs	r0, #2
 800abc4:	f002 fd58 	bl	800d678 <xscal_PLmmUlD2>
 800abc8:	e026      	b.n	800ac18 <svd_u3DvUgOe+0x400>
    } else {
      for (qq = 1; qq < 3; qq++) {
 800abca:	2301      	movs	r3, #1
 800abcc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800abd0:	e01e      	b.n	800ac10 <svd_u3DvUgOe+0x3f8>
        e[qq] /= nrm;
 800abd2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800abd6:	00db      	lsls	r3, r3, #3
 800abd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800abdc:	4413      	add	r3, r2
 800abde:	3bb8      	subs	r3, #184	; 0xb8
 800abe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800abe4:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800abe8:	f7f5 fe22 	bl	8000830 <__aeabi_ddiv>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4610      	mov	r0, r2
 800abf2:	4619      	mov	r1, r3
 800abf4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800abf8:	00db      	lsls	r3, r3, #3
 800abfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800abfe:	4413      	add	r3, r2
 800ac00:	3bb8      	subs	r3, #184	; 0xb8
 800ac02:	e9c3 0100 	strd	r0, r1, [r3]
      for (qq = 1; qq < 3; qq++) {
 800ac06:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ac10:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	dddc      	ble.n	800abd2 <svd_u3DvUgOe+0x3ba>
      }
    }

    e[1]++;
 800ac18:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800ac1c:	f04f 0200 	mov.w	r2, #0
 800ac20:	4b19      	ldr	r3, [pc, #100]	; (800ac88 <svd_u3DvUgOe+0x470>)
 800ac22:	f7f5 fb25 	bl	8000270 <__adddf3>
 800ac26:	4602      	mov	r2, r0
 800ac28:	460b      	mov	r3, r1
 800ac2a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    e[0] = -e[0];
 800ac2e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800ac32:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800ac36:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ac3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac3e:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 800ac42:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
    for (qq = 2; qq < 4; qq++) {
 800ac46:	2302      	movs	r3, #2
 800ac48:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ac4c:	e013      	b.n	800ac76 <svd_u3DvUgOe+0x45e>
      work[qq - 1] = 0.0;
 800ac4e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ac52:	3b01      	subs	r3, #1
 800ac54:	00db      	lsls	r3, r3, #3
 800ac56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ac5a:	4413      	add	r3, r2
 800ac5c:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800ac60:	f04f 0200 	mov.w	r2, #0
 800ac64:	f04f 0300 	mov.w	r3, #0
 800ac68:	e9c1 2300 	strd	r2, r3, [r1]
    for (qq = 2; qq < 4; qq++) {
 800ac6c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ac70:	3301      	adds	r3, #1
 800ac72:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ac76:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ac7a:	2b03      	cmp	r3, #3
 800ac7c:	dde7      	ble.n	800ac4e <svd_u3DvUgOe+0x436>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800ac7e:	2301      	movs	r3, #1
 800ac80:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ac84:	e025      	b.n	800acd2 <svd_u3DvUgOe+0x4ba>
 800ac86:	bf00      	nop
 800ac88:	3ff00000 	.word	0x3ff00000
      xaxpy_OQ28XA21(2, e[qq], b_A, 3 * qq + 2, work, 2);
 800ac8c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ac90:	00db      	lsls	r3, r3, #3
 800ac92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ac96:	4413      	add	r3, r2
 800ac98:	3bb8      	subs	r3, #184	; 0xb8
 800ac9a:	ed93 7b00 	vldr	d7, [r3]
 800ac9e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800aca2:	4613      	mov	r3, r2
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	4413      	add	r3, r2
 800aca8:	1c98      	adds	r0, r3, #2
 800acaa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800acae:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800acb2:	2302      	movs	r3, #2
 800acb4:	9300      	str	r3, [sp, #0]
 800acb6:	4613      	mov	r3, r2
 800acb8:	4602      	mov	r2, r0
 800acba:	eeb0 0a47 	vmov.f32	s0, s14
 800acbe:	eef0 0a67 	vmov.f32	s1, s15
 800acc2:	2002      	movs	r0, #2
 800acc4:	f001 fbc7 	bl	800c456 <xaxpy_OQ28XA21>
    for (qq = 1; qq + 1 < 4; qq++) {
 800acc8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800accc:	3301      	adds	r3, #1
 800acce:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800acd2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	ddd8      	ble.n	800ac8c <svd_u3DvUgOe+0x474>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800acda:	2301      	movs	r3, #1
 800acdc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ace0:	e031      	b.n	800ad46 <svd_u3DvUgOe+0x52e>
      xaxpy_Wxch84Fl(2, -e[qq] / e[1], work, 2, b_A, 3 * qq + 2);
 800ace2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ace6:	00db      	lsls	r3, r3, #3
 800ace8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800acec:	4413      	add	r3, r2
 800acee:	3bb8      	subs	r3, #184	; 0xb8
 800acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf4:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800acf8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800acfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ad00:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800ad04:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800ad08:	f7f5 fd92 	bl	8000830 <__aeabi_ddiv>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	ec43 2b17 	vmov	d7, r2, r3
 800ad14:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800ad18:	4613      	mov	r3, r2
 800ad1a:	005b      	lsls	r3, r3, #1
 800ad1c:	4413      	add	r3, r2
 800ad1e:	3302      	adds	r3, #2
 800ad20:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800ad24:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	2202      	movs	r2, #2
 800ad2e:	eeb0 0a47 	vmov.f32	s0, s14
 800ad32:	eef0 0a67 	vmov.f32	s1, s15
 800ad36:	2002      	movs	r0, #2
 800ad38:	f001 fbe1 	bl	800c4fe <xaxpy_Wxch84Fl>
    for (qq = 1; qq + 1 < 4; qq++) {
 800ad3c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ad40:	3301      	adds	r3, #1
 800ad42:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ad46:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	ddc9      	ble.n	800ace2 <svd_u3DvUgOe+0x4ca>
    }
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800ad4e:	2301      	movs	r3, #1
 800ad50:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ad54:	e016      	b.n	800ad84 <svd_u3DvUgOe+0x56c>
    V[qq] = e[qq];
 800ad56:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ad5a:	00da      	lsls	r2, r3, #3
 800ad5c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	1899      	adds	r1, r3, r2
 800ad64:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ad68:	00db      	lsls	r3, r3, #3
 800ad6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ad6e:	4413      	add	r3, r2
 800ad70:	3bb8      	subs	r3, #184	; 0xb8
 800ad72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad76:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800ad7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ad7e:	3301      	adds	r3, #1
 800ad80:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ad84:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	dde4      	ble.n	800ad56 <svd_u3DvUgOe+0x53e>
  }

  apply_transform = false;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(2, b_A, 5);
 800ad92:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800ad96:	2205      	movs	r2, #5
 800ad98:	4619      	mov	r1, r3
 800ad9a:	2002      	movs	r0, #2
 800ad9c:	f002 f970 	bl	800d080 <xnrm2_xDOlDEtw>
 800ada0:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800ada4:	f04f 0200 	mov.w	r2, #0
 800ada8:	f04f 0300 	mov.w	r3, #0
 800adac:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800adb0:	f7f5 fea4 	bl	8000afc <__aeabi_dcmpgt>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	f000 808a 	beq.w	800aed0 <svd_u3DvUgOe+0x6b8>
    apply_transform = true;
 800adbc:	2301      	movs	r3, #1
 800adbe:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[4] < 0.0) {
 800adc2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800adc6:	f04f 0200 	mov.w	r2, #0
 800adca:	f04f 0300 	mov.w	r3, #0
 800adce:	f7f5 fe77 	bl	8000ac0 <__aeabi_dcmplt>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00e      	beq.n	800adf6 <svd_u3DvUgOe+0x5de>
      b_s[1] = -nrm;
 800add8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800addc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ade0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800ade4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ade8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800adec:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 800adf0:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800adf4:	e003      	b.n	800adfe <svd_u3DvUgOe+0x5e6>
    } else {
      b_s[1] = nrm;
 800adf6:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800adfa:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    }

    if (fabs(b_s[1]) >= 1.0020841800044864E-292) {
 800adfe:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800ae02:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800ae06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ae0e:	f04f 0200 	mov.w	r2, #0
 800ae12:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800ae16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ae1a:	f7f5 fe65 	bl	8000ae8 <__aeabi_dcmpge>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d016      	beq.n	800ae52 <svd_u3DvUgOe+0x63a>
      xscal_59GtRAwv(2, 1.0 / b_s[1], b_A, 5);
 800ae24:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800ae28:	f04f 0000 	mov.w	r0, #0
 800ae2c:	49d6      	ldr	r1, [pc, #856]	; (800b188 <svd_u3DvUgOe+0x970>)
 800ae2e:	f7f5 fcff 	bl	8000830 <__aeabi_ddiv>
 800ae32:	4602      	mov	r2, r0
 800ae34:	460b      	mov	r3, r1
 800ae36:	ec43 2b17 	vmov	d7, r2, r3
 800ae3a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800ae3e:	2205      	movs	r2, #5
 800ae40:	4619      	mov	r1, r3
 800ae42:	eeb0 0a47 	vmov.f32	s0, s14
 800ae46:	eef0 0a67 	vmov.f32	s1, s15
 800ae4a:	2002      	movs	r0, #2
 800ae4c:	f002 fbe0 	bl	800d610 <xscal_59GtRAwv>
 800ae50:	e026      	b.n	800aea0 <svd_u3DvUgOe+0x688>
    } else {
      for (qjj = 4; qjj < 6; qjj++) {
 800ae52:	2304      	movs	r3, #4
 800ae54:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ae58:	e01e      	b.n	800ae98 <svd_u3DvUgOe+0x680>
        b_A[qjj] /= b_s[1];
 800ae5a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ae5e:	00db      	lsls	r3, r3, #3
 800ae60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ae64:	4413      	add	r3, r2
 800ae66:	3b88      	subs	r3, #136	; 0x88
 800ae68:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae6c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800ae70:	f7f5 fcde 	bl	8000830 <__aeabi_ddiv>
 800ae74:	4602      	mov	r2, r0
 800ae76:	460b      	mov	r3, r1
 800ae78:	4610      	mov	r0, r2
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ae80:	00db      	lsls	r3, r3, #3
 800ae82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ae86:	4413      	add	r3, r2
 800ae88:	3b88      	subs	r3, #136	; 0x88
 800ae8a:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 4; qjj < 6; qjj++) {
 800ae8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ae92:	3301      	adds	r3, #1
 800ae94:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ae98:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ae9c:	2b05      	cmp	r3, #5
 800ae9e:	dddc      	ble.n	800ae5a <svd_u3DvUgOe+0x642>
      }
    }

    b_A[4]++;
 800aea0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800aea4:	f04f 0200 	mov.w	r2, #0
 800aea8:	4bb7      	ldr	r3, [pc, #732]	; (800b188 <svd_u3DvUgOe+0x970>)
 800aeaa:	f7f5 f9e1 	bl	8000270 <__adddf3>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    b_s[1] = -b_s[1];
 800aeb6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800aeba:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800aebe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800aec2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aec6:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800aeca:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800aece:	e005      	b.n	800aedc <svd_u3DvUgOe+0x6c4>
  } else {
    b_s[1] = 0.0;
 800aed0:	f04f 0200 	mov.w	r2, #0
 800aed4:	f04f 0300 	mov.w	r3, #0
 800aed8:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  }

  for (d = 2; d + 1 < 4; d++) {
 800aedc:	2302      	movs	r3, #2
 800aede:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800aee2:	e048      	b.n	800af76 <svd_u3DvUgOe+0x75e>
    qjj = 3 * d + 1;
 800aee4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800aee8:	4613      	mov	r3, r2
 800aeea:	005b      	lsls	r3, r3, #1
 800aeec:	4413      	add	r3, r2
 800aeee:	3301      	adds	r3, #1
 800aef0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800aef4:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d025      	beq.n	800af48 <svd_u3DvUgOe+0x730>
      xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, b_A, 5, b_A, qjj + 1) / b_A[4]), 5,
 800aefc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800af00:	3301      	adds	r3, #1
 800af02:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800af06:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	4613      	mov	r3, r2
 800af0e:	2205      	movs	r2, #5
 800af10:	2002      	movs	r0, #2
 800af12:	f001 fb9c 	bl	800c64e <xdotc_mznw4aLl>
 800af16:	ec51 0b10 	vmov	r0, r1, d0
 800af1a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800af1e:	f7f5 fc87 	bl	8000830 <__aeabi_ddiv>
 800af22:	4602      	mov	r2, r0
 800af24:	460b      	mov	r3, r1
 800af26:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800af2a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800af2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800af32:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800af36:	3301      	adds	r3, #1
 800af38:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800af3c:	2105      	movs	r1, #5
 800af3e:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 800af42:	2002      	movs	r0, #2
 800af44:	f001 fb2f 	bl	800c5a6 <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800af48:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800af4c:	00db      	lsls	r3, r3, #3
 800af4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800af52:	4413      	add	r3, r2
 800af54:	3b88      	subs	r3, #136	; 0x88
 800af56:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af5a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800af5e:	00db      	lsls	r3, r3, #3
 800af60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800af64:	4413      	add	r3, r2
 800af66:	3bb8      	subs	r3, #184	; 0xb8
 800af68:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 2; d + 1 < 4; d++) {
 800af6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800af70:	3301      	adds	r3, #1
 800af72:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800af76:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	ddb2      	ble.n	800aee4 <svd_u3DvUgOe+0x6cc>
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800af7e:	2301      	movs	r3, #1
 800af80:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800af84:	e017      	b.n	800afb6 <svd_u3DvUgOe+0x79e>
    U[qq + 3] = b_A[qq + 3];
 800af86:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800af8a:	1cd8      	adds	r0, r3, #3
 800af8c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800af90:	3303      	adds	r3, #3
 800af92:	00da      	lsls	r2, r3, #3
 800af94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800af98:	1899      	adds	r1, r3, r2
 800af9a:	00c3      	lsls	r3, r0, #3
 800af9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800afa0:	4413      	add	r3, r2
 800afa2:	3b88      	subs	r3, #136	; 0x88
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800afac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800afb0:	3301      	adds	r3, #1
 800afb2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800afb6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800afba:	2b02      	cmp	r3, #2
 800afbc:	dde3      	ble.n	800af86 <svd_u3DvUgOe+0x76e>
  }

  m = 1;
 800afbe:	2301      	movs	r3, #1
 800afc0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  b_s[2] = b_A[8];
 800afc4:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 800afc8:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  U[6] = 0.0;
 800afcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800afd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afd4:	f04f 0200 	mov.w	r2, #0
 800afd8:	f04f 0300 	mov.w	r3, #0
 800afdc:	e9c1 2300 	strd	r2, r3, [r1]
  U[7] = 0.0;
 800afe0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800afe4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800afe8:	f04f 0200 	mov.w	r2, #0
 800afec:	f04f 0300 	mov.w	r3, #0
 800aff0:	e9c1 2300 	strd	r2, r3, [r1]
  U[8] = 1.0;
 800aff4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800aff8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800affc:	f04f 0200 	mov.w	r2, #0
 800b000:	4b61      	ldr	r3, [pc, #388]	; (800b188 <svd_u3DvUgOe+0x970>)
 800b002:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800b006:	2301      	movs	r3, #1
 800b008:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800b00c:	e100      	b.n	800b210 <svd_u3DvUgOe+0x9f8>
    qq = 3 * d + d;
 800b00e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    if (b_s[d] != 0.0) {
 800b018:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b022:	4413      	add	r3, r2
 800b024:	3ba0      	subs	r3, #160	; 0xa0
 800b026:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b02a:	f04f 0200 	mov.w	r2, #0
 800b02e:	f04f 0300 	mov.w	r3, #0
 800b032:	f7f5 fd3b 	bl	8000aac <__aeabi_dcmpeq>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f040 80a7 	bne.w	800b18c <svd_u3DvUgOe+0x974>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800b03e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b042:	3301      	adds	r3, #1
 800b044:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800b048:	e043      	b.n	800b0d2 <svd_u3DvUgOe+0x8ba>
        qjj = (3 * kase + d) + 1;
 800b04a:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 800b04e:	4613      	mov	r3, r2
 800b050:	005b      	lsls	r3, r3, #1
 800b052:	441a      	add	r2, r3
 800b054:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b058:	4413      	add	r3, r2
 800b05a:	3301      	adds	r3, #1
 800b05c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(3 - d, -(xdotc_mznw4aLl(3 - d, U, qq + 1, U, qjj) / U[qq]),
 800b060:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b064:	f1c3 0403 	rsb	r4, r3, #3
 800b068:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b06c:	f1c3 0003 	rsb	r0, r3, #3
 800b070:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b074:	1c5a      	adds	r2, r3, #1
 800b076:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b080:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800b084:	f001 fae3 	bl	800c64e <xdotc_mznw4aLl>
 800b088:	ec51 0b10 	vmov	r0, r1, d0
 800b08c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b090:	00da      	lsls	r2, r3, #3
 800b092:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b096:	4413      	add	r3, r2
 800b098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09c:	f7f5 fbc8 	bl	8000830 <__aeabi_ddiv>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800b0a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b0ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b0b4:	1c59      	adds	r1, r3, #1
 800b0b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b0ba:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800b0be:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f001 fa6f 	bl	800c5a6 <xaxpy_guu0hJif>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800b0c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800b0d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	ddb7      	ble.n	800b04a <svd_u3DvUgOe+0x832>
                       qq + 1, U, qjj);
      }

      for (qjj = d; qjj + 1 < 4; qjj++) {
 800b0da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b0de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800b0e2:	e026      	b.n	800b132 <svd_u3DvUgOe+0x91a>
        kase = 3 * d + qjj;
 800b0e4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	005b      	lsls	r3, r3, #1
 800b0ec:	441a      	add	r2, r3
 800b0ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b0f2:	4413      	add	r3, r2
 800b0f4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        U[kase] = -U[kase];
 800b0f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b0fc:	00da      	lsls	r2, r3, #3
 800b0fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b102:	4413      	add	r3, r2
 800b104:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b10c:	00da      	lsls	r2, r3, #3
 800b10e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b112:	4413      	add	r3, r2
 800b114:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800b118:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 800b11c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b120:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 800b124:	ed83 7b00 	vstr	d7, [r3]
      for (qjj = d; qjj + 1 < 4; qjj++) {
 800b128:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b12c:	3301      	adds	r3, #1
 800b12e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800b132:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b136:	2b02      	cmp	r3, #2
 800b138:	ddd4      	ble.n	800b0e4 <svd_u3DvUgOe+0x8cc>
      }

      U[qq]++;
 800b13a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b13e:	00da      	lsls	r2, r3, #3
 800b140:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b144:	189c      	adds	r4, r3, r2
 800b146:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b14a:	f04f 0200 	mov.w	r2, #0
 800b14e:	4b0e      	ldr	r3, [pc, #56]	; (800b188 <svd_u3DvUgOe+0x970>)
 800b150:	f7f5 f88e 	bl	8000270 <__adddf3>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	e9c4 2300 	strd	r2, r3, [r4]
      if (d - 1 >= 0) {
 800b15c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b160:	2b00      	cmp	r3, #0
 800b162:	dd50      	ble.n	800b206 <svd_u3DvUgOe+0x9ee>
        U[3 * d] = 0.0;
 800b164:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800b168:	4613      	mov	r3, r2
 800b16a:	005b      	lsls	r3, r3, #1
 800b16c:	4413      	add	r3, r2
 800b16e:	00db      	lsls	r3, r3, #3
 800b170:	461a      	mov	r2, r3
 800b172:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b176:	1899      	adds	r1, r3, r2
 800b178:	f04f 0200 	mov.w	r2, #0
 800b17c:	f04f 0300 	mov.w	r3, #0
 800b180:	e9c1 2300 	strd	r2, r3, [r1]
 800b184:	e03f      	b.n	800b206 <svd_u3DvUgOe+0x9ee>
 800b186:	bf00      	nop
 800b188:	3ff00000 	.word	0x3ff00000
      }
    } else {
      U[3 * d] = 0.0;
 800b18c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800b190:	4613      	mov	r3, r2
 800b192:	005b      	lsls	r3, r3, #1
 800b194:	4413      	add	r3, r2
 800b196:	00db      	lsls	r3, r3, #3
 800b198:	461a      	mov	r2, r3
 800b19a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b19e:	1899      	adds	r1, r3, r2
 800b1a0:	f04f 0200 	mov.w	r2, #0
 800b1a4:	f04f 0300 	mov.w	r3, #0
 800b1a8:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 1] = 0.0;
 800b1ac:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	005b      	lsls	r3, r3, #1
 800b1b4:	4413      	add	r3, r2
 800b1b6:	00db      	lsls	r3, r3, #3
 800b1b8:	f103 0208 	add.w	r2, r3, #8
 800b1bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b1c0:	1899      	adds	r1, r3, r2
 800b1c2:	f04f 0200 	mov.w	r2, #0
 800b1c6:	f04f 0300 	mov.w	r3, #0
 800b1ca:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 2] = 0.0;
 800b1ce:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	005b      	lsls	r3, r3, #1
 800b1d6:	4413      	add	r3, r2
 800b1d8:	00db      	lsls	r3, r3, #3
 800b1da:	f103 0210 	add.w	r2, r3, #16
 800b1de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b1e2:	1899      	adds	r1, r3, r2
 800b1e4:	f04f 0200 	mov.w	r2, #0
 800b1e8:	f04f 0300 	mov.w	r3, #0
 800b1ec:	e9c1 2300 	strd	r2, r3, [r1]
      U[qq] = 1.0;
 800b1f0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b1f4:	00da      	lsls	r2, r3, #3
 800b1f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b1fa:	1899      	adds	r1, r3, r2
 800b1fc:	f04f 0200 	mov.w	r2, #0
 800b200:	4b11      	ldr	r3, [pc, #68]	; (800b248 <svd_u3DvUgOe+0xa30>)
 800b202:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800b206:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b20a:	3b01      	subs	r3, #1
 800b20c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800b210:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b214:	2b00      	cmp	r3, #0
 800b216:	f6bf aefa 	bge.w	800b00e <svd_u3DvUgOe+0x7f6>
    }
  }

  for (qq = 2; qq >= 0; qq--) {
 800b21a:	2302      	movs	r3, #2
 800b21c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b220:	e096      	b.n	800b350 <svd_u3DvUgOe+0xb38>
    if ((qq + 1 <= 1) && (e[0] != 0.0)) {
 800b222:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b226:	2b00      	cmp	r3, #0
 800b228:	dc4c      	bgt.n	800b2c4 <svd_u3DvUgOe+0xaac>
 800b22a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b22e:	f04f 0200 	mov.w	r2, #0
 800b232:	f04f 0300 	mov.w	r3, #0
 800b236:	f7f5 fc39 	bl	8000aac <__aeabi_dcmpeq>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d141      	bne.n	800b2c4 <svd_u3DvUgOe+0xaac>
      for (d = 2; d < 4; d++) {
 800b240:	2302      	movs	r3, #2
 800b242:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800b246:	e039      	b.n	800b2bc <svd_u3DvUgOe+0xaa4>
 800b248:	3ff00000 	.word	0x3ff00000
        qjj = (d - 1) * 3 + 2;
 800b24c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b250:	1e5a      	subs	r2, r3, #1
 800b252:	4613      	mov	r3, r2
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	4413      	add	r3, r2
 800b258:	3302      	adds	r3, #2
 800b25a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, V, 2, V, qjj) / V[1]), 2, V, qjj);
 800b25e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800b262:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800b266:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	6813      	ldr	r3, [r2, #0]
 800b26e:	2202      	movs	r2, #2
 800b270:	6809      	ldr	r1, [r1, #0]
 800b272:	2002      	movs	r0, #2
 800b274:	f001 f9eb 	bl	800c64e <xdotc_mznw4aLl>
 800b278:	ec51 0b10 	vmov	r0, r1, d0
 800b27c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3308      	adds	r3, #8
 800b284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b288:	f7f5 fad2 	bl	8000830 <__aeabi_ddiv>
 800b28c:	4602      	mov	r2, r0
 800b28e:	460b      	mov	r3, r1
 800b290:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800b294:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b298:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b29c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800b2a0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b2a4:	6812      	ldr	r2, [r2, #0]
 800b2a6:	2102      	movs	r1, #2
 800b2a8:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 800b2ac:	2002      	movs	r0, #2
 800b2ae:	f001 f97a 	bl	800c5a6 <xaxpy_guu0hJif>
      for (d = 2; d < 4; d++) {
 800b2b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800b2bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	ddc3      	ble.n	800b24c <svd_u3DvUgOe+0xa34>
      }
    }

    V[3 * qq] = 0.0;
 800b2c4:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	005b      	lsls	r3, r3, #1
 800b2cc:	4413      	add	r3, r2
 800b2ce:	00db      	lsls	r3, r3, #3
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	1899      	adds	r1, r3, r2
 800b2da:	f04f 0200 	mov.w	r2, #0
 800b2de:	f04f 0300 	mov.w	r3, #0
 800b2e2:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 1] = 0.0;
 800b2e6:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	4413      	add	r3, r2
 800b2f0:	00db      	lsls	r3, r3, #3
 800b2f2:	f103 0208 	add.w	r2, r3, #8
 800b2f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	1899      	adds	r1, r3, r2
 800b2fe:	f04f 0200 	mov.w	r2, #0
 800b302:	f04f 0300 	mov.w	r3, #0
 800b306:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 2] = 0.0;
 800b30a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800b30e:	4613      	mov	r3, r2
 800b310:	005b      	lsls	r3, r3, #1
 800b312:	4413      	add	r3, r2
 800b314:	00db      	lsls	r3, r3, #3
 800b316:	f103 0210 	add.w	r2, r3, #16
 800b31a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	1899      	adds	r1, r3, r2
 800b322:	f04f 0200 	mov.w	r2, #0
 800b326:	f04f 0300 	mov.w	r3, #0
 800b32a:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq + 3 * qq] = 1.0;
 800b32e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b332:	015a      	lsls	r2, r3, #5
 800b334:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	1899      	adds	r1, r3, r2
 800b33c:	f04f 0200 	mov.w	r2, #0
 800b340:	4bbd      	ldr	r3, [pc, #756]	; (800b638 <svd_u3DvUgOe+0xe20>)
 800b342:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 2; qq >= 0; qq--) {
 800b346:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b34a:	3b01      	subs	r3, #1
 800b34c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b350:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b354:	2b00      	cmp	r3, #0
 800b356:	f6bf af64 	bge.w	800b222 <svd_u3DvUgOe+0xa0a>
  }

  ztest = e[0];
 800b35a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b35e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[0] != 0.0) {
 800b362:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800b366:	f04f 0200 	mov.w	r2, #0
 800b36a:	f04f 0300 	mov.w	r3, #0
 800b36e:	f7f5 fb9d 	bl	8000aac <__aeabi_dcmpeq>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d12a      	bne.n	800b3ce <svd_u3DvUgOe+0xbb6>
    rt = fabs(b_s[0]);
 800b378:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800b37c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800b380:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b388:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 800b38c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[0] / rt;
 800b390:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800b394:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800b398:	f7f5 fa4a 	bl	8000830 <__aeabi_ddiv>
 800b39c:	4602      	mov	r2, r0
 800b39e:	460b      	mov	r3, r1
 800b3a0:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[0] = rt;
 800b3a4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800b3a8:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    ztest = e[0] / nrm;
 800b3ac:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b3b0:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800b3b4:	f7f5 fa3c 	bl	8000830 <__aeabi_ddiv>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 1);
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800b3c6:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800b3ca:	f002 f989 	bl	800d6e0 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800b3ce:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800b3d2:	f04f 0200 	mov.w	r2, #0
 800b3d6:	f04f 0300 	mov.w	r3, #0
 800b3da:	f7f5 fb67 	bl	8000aac <__aeabi_dcmpeq>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d12b      	bne.n	800b43c <svd_u3DvUgOe+0xc24>
    rt = fabs(ztest);
 800b3e4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800b3e8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b3ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b3f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b3f4:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800b3f8:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800b3fc:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800b400:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800b404:	f7f5 fa14 	bl	8000830 <__aeabi_ddiv>
 800b408:	4602      	mov	r2, r0
 800b40a:	460b      	mov	r3, r1
 800b40c:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800b410:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800b414:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[1] *= nrm;
 800b418:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800b41c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800b420:	f7f5 f8dc 	bl	80005dc <__aeabi_dmul>
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    xscal_eaAxXsvQ(nrm, V, 4);
 800b42c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800b430:	2104      	movs	r1, #4
 800b432:	6818      	ldr	r0, [r3, #0]
 800b434:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800b438:	f002 f952 	bl	800d6e0 <xscal_eaAxXsvQ>
  }

  e[0] = ztest;
 800b43c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800b440:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  ztest = b_A[7];
 800b444:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800b448:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[1] != 0.0) {
 800b44c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800b450:	f04f 0200 	mov.w	r2, #0
 800b454:	f04f 0300 	mov.w	r3, #0
 800b458:	f7f5 fb28 	bl	8000aac <__aeabi_dcmpeq>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d12a      	bne.n	800b4b8 <svd_u3DvUgOe+0xca0>
    rt = fabs(b_s[1]);
 800b462:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800b466:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b46a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b46e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b472:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800b476:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[1] / rt;
 800b47a:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800b47e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800b482:	f7f5 f9d5 	bl	8000830 <__aeabi_ddiv>
 800b486:	4602      	mov	r2, r0
 800b488:	460b      	mov	r3, r1
 800b48a:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[1] = rt;
 800b48e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800b492:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    ztest = b_A[7] / nrm;
 800b496:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800b49a:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800b49e:	f7f5 f9c7 	bl	8000830 <__aeabi_ddiv>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 4);
 800b4aa:	2104      	movs	r1, #4
 800b4ac:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800b4b0:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800b4b4:	f002 f914 	bl	800d6e0 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800b4b8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800b4bc:	f04f 0200 	mov.w	r2, #0
 800b4c0:	f04f 0300 	mov.w	r3, #0
 800b4c4:	f7f5 faf2 	bl	8000aac <__aeabi_dcmpeq>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d12b      	bne.n	800b526 <svd_u3DvUgOe+0xd0e>
    rt = fabs(ztest);
 800b4ce:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800b4d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b4d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4de:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800b4e2:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800b4e6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800b4ea:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800b4ee:	f7f5 f99f 	bl	8000830 <__aeabi_ddiv>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800b4fa:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800b4fe:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[2] = b_A[8] * nrm;
 800b502:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800b506:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800b50a:	f7f5 f867 	bl	80005dc <__aeabi_dmul>
 800b50e:	4602      	mov	r2, r0
 800b510:	460b      	mov	r3, r1
 800b512:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, V, 7);
 800b516:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800b51a:	2107      	movs	r1, #7
 800b51c:	6818      	ldr	r0, [r3, #0]
 800b51e:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800b522:	f002 f8dd 	bl	800d6e0 <xscal_eaAxXsvQ>
  }

  e[1] = ztest;
 800b526:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800b52a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  if (b_s[2] != 0.0) {
 800b52e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800b532:	f04f 0200 	mov.w	r2, #0
 800b536:	f04f 0300 	mov.w	r3, #0
 800b53a:	f7f5 fab7 	bl	8000aac <__aeabi_dcmpeq>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d11e      	bne.n	800b582 <svd_u3DvUgOe+0xd6a>
    rt = fabs(b_s[2]);
 800b544:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800b548:	67ba      	str	r2, [r7, #120]	; 0x78
 800b54a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b54e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b550:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800b554:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[2] / rt;
 800b558:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800b55c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800b560:	f7f5 f966 	bl	8000830 <__aeabi_ddiv>
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[2] = rt;
 800b56c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800b570:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, U, 7);
 800b574:	2107      	movs	r1, #7
 800b576:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800b57a:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800b57e:	f002 f8af 	bl	800d6e0 <xscal_eaAxXsvQ>
  }

  e[2] = 0.0;
 800b582:	f04f 0200 	mov.w	r2, #0
 800b586:	f04f 0300 	mov.w	r3, #0
 800b58a:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  qq = 0;
 800b58e:	2300      	movs	r3, #0
 800b590:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  nrm = fmax(fmax(fmax(b_s[0], e[0]), fmax(b_s[1], ztest)), fmax(b_s[2], 0.0));
 800b594:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 800b598:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 800b59c:	eeb0 1a46 	vmov.f32	s2, s12
 800b5a0:	eef0 1a66 	vmov.f32	s3, s13
 800b5a4:	eeb0 0a47 	vmov.f32	s0, s14
 800b5a8:	eef0 0a67 	vmov.f32	s1, s15
 800b5ac:	f00a fbe4 	bl	8015d78 <fmax>
 800b5b0:	eeb0 8a40 	vmov.f32	s16, s0
 800b5b4:	eef0 8a60 	vmov.f32	s17, s1
 800b5b8:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800b5bc:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 800b5c0:	eeb0 1a46 	vmov.f32	s2, s12
 800b5c4:	eef0 1a66 	vmov.f32	s3, s13
 800b5c8:	eeb0 0a47 	vmov.f32	s0, s14
 800b5cc:	eef0 0a67 	vmov.f32	s1, s15
 800b5d0:	f00a fbd2 	bl	8015d78 <fmax>
 800b5d4:	eeb0 7a40 	vmov.f32	s14, s0
 800b5d8:	eef0 7a60 	vmov.f32	s15, s1
 800b5dc:	eeb0 1a47 	vmov.f32	s2, s14
 800b5e0:	eef0 1a67 	vmov.f32	s3, s15
 800b5e4:	eeb0 0a48 	vmov.f32	s0, s16
 800b5e8:	eef0 0a68 	vmov.f32	s1, s17
 800b5ec:	f00a fbc4 	bl	8015d78 <fmax>
 800b5f0:	eeb0 8a40 	vmov.f32	s16, s0
 800b5f4:	eef0 8a60 	vmov.f32	s17, s1
 800b5f8:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800b5fc:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 800b630 <svd_u3DvUgOe+0xe18>
 800b600:	eeb0 0a47 	vmov.f32	s0, s14
 800b604:	eef0 0a67 	vmov.f32	s1, s15
 800b608:	f00a fbb6 	bl	8015d78 <fmax>
 800b60c:	eeb0 7a40 	vmov.f32	s14, s0
 800b610:	eef0 7a60 	vmov.f32	s15, s1
 800b614:	eeb0 1a47 	vmov.f32	s2, s14
 800b618:	eef0 1a67 	vmov.f32	s3, s15
 800b61c:	eeb0 0a48 	vmov.f32	s0, s16
 800b620:	eef0 0a68 	vmov.f32	s1, s17
 800b624:	f00a fba8 	bl	8015d78 <fmax>
 800b628:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  while ((m + 2 > 0) && (qq < 75)) {
 800b62c:	f000 be8a 	b.w	800c344 <svd_u3DvUgOe+0x1b2c>
	...
 800b638:	3ff00000 	.word	0x3ff00000
    kase = m + 1;
 800b63c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800b640:	3301      	adds	r3, #1
 800b642:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int32_T exitg1;
    do {
      exitg1 = 0;
 800b646:	2300      	movs	r3, #0
 800b648:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
      d = kase;
 800b64c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b650:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      if (kase == 0) {
 800b654:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d103      	bne.n	800b664 <svd_u3DvUgOe+0xe4c>
        exitg1 = 1;
 800b65c:	2301      	movs	r3, #1
 800b65e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800b662:	e092      	b.n	800b78a <svd_u3DvUgOe+0xf72>
      } else {
        rt = fabs(e[kase - 1]);
 800b664:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b668:	3b01      	subs	r3, #1
 800b66a:	00db      	lsls	r3, r3, #3
 800b66c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b670:	4413      	add	r3, r2
 800b672:	3bb8      	subs	r3, #184	; 0xb8
 800b674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b678:	673a      	str	r2, [r7, #112]	; 0x70
 800b67a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b67e:	677b      	str	r3, [r7, #116]	; 0x74
 800b680:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800b684:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
        if (rt <= (fabs(b_s[kase - 1]) + fabs(b_s[kase])) *
 800b688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b68c:	3b01      	subs	r3, #1
 800b68e:	00db      	lsls	r3, r3, #3
 800b690:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b694:	4413      	add	r3, r2
 800b696:	3ba0      	subs	r3, #160	; 0xa0
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	66ba      	str	r2, [r7, #104]	; 0x68
 800b69e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b6a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b6a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b6a8:	00db      	lsls	r3, r3, #3
 800b6aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b6ae:	4413      	add	r3, r2
 800b6b0:	3ba0      	subs	r3, #160	; 0xa0
 800b6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b6:	663a      	str	r2, [r7, #96]	; 0x60
 800b6b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b6bc:	667b      	str	r3, [r7, #100]	; 0x64
 800b6be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b6c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b6c6:	f7f4 fdd3 	bl	8000270 <__adddf3>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	4610      	mov	r0, r2
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	f04f 0200 	mov.w	r2, #0
 800b6d6:	4bb2      	ldr	r3, [pc, #712]	; (800b9a0 <svd_u3DvUgOe+0x1188>)
 800b6d8:	f7f4 ff80 	bl	80005dc <__aeabi_dmul>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	460b      	mov	r3, r1
 800b6e0:	4610      	mov	r0, r2
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800b6e8:	f7f5 f9fe 	bl	8000ae8 <__aeabi_dcmpge>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d012      	beq.n	800b718 <svd_u3DvUgOe+0xf00>
            2.2204460492503131E-16) {
          e[kase - 1] = 0.0;
 800b6f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	00db      	lsls	r3, r3, #3
 800b6fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b6fe:	4413      	add	r3, r2
 800b700:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800b704:	f04f 0200 	mov.w	r2, #0
 800b708:	f04f 0300 	mov.w	r3, #0
 800b70c:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800b710:	2301      	movs	r3, #1
 800b712:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800b716:	e038      	b.n	800b78a <svd_u3DvUgOe+0xf72>
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800b718:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800b71c:	f04f 0200 	mov.w	r2, #0
 800b720:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b724:	f7f5 f9d6 	bl	8000ad4 <__aeabi_dcmple>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d115      	bne.n	800b75a <svd_u3DvUgOe+0xf42>
 800b72e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b732:	2b14      	cmp	r3, #20
 800b734:	dd24      	ble.n	800b780 <svd_u3DvUgOe+0xf68>
                     2.2204460492503131E-16 * nrm))) {
 800b736:	f04f 0200 	mov.w	r2, #0
 800b73a:	4b99      	ldr	r3, [pc, #612]	; (800b9a0 <svd_u3DvUgOe+0x1188>)
 800b73c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800b740:	f7f4 ff4c 	bl	80005dc <__aeabi_dmul>
 800b744:	4602      	mov	r2, r0
 800b746:	460b      	mov	r3, r1
 800b748:	4610      	mov	r0, r2
 800b74a:	4619      	mov	r1, r3
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800b74c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800b750:	f7f5 f9ca 	bl	8000ae8 <__aeabi_dcmpge>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d012      	beq.n	800b780 <svd_u3DvUgOe+0xf68>
          e[kase - 1] = 0.0;
 800b75a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b75e:	3b01      	subs	r3, #1
 800b760:	00db      	lsls	r3, r3, #3
 800b762:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b766:	4413      	add	r3, r2
 800b768:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800b76c:	f04f 0200 	mov.w	r2, #0
 800b770:	f04f 0300 	mov.w	r3, #0
 800b774:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800b778:	2301      	movs	r3, #1
 800b77a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800b77e:	e004      	b.n	800b78a <svd_u3DvUgOe+0xf72>
        } else {
          kase--;
 800b780:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b784:	3b01      	subs	r3, #1
 800b786:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        }
      }
    } while (exitg1 == 0);
 800b78a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f43f af59 	beq.w	800b646 <svd_u3DvUgOe+0xe2e>

    if (m + 1 == kase) {
 800b794:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800b798:	1c5a      	adds	r2, r3, #1
 800b79a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d103      	bne.n	800b7aa <svd_u3DvUgOe+0xf92>
      kase = 4;
 800b7a2:	2304      	movs	r3, #4
 800b7a4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800b7a8:	e0c7      	b.n	800b93a <svd_u3DvUgOe+0x1122>
    } else {
      int32_T k_ii;
      boolean_T exitg2;
      qjj = m + 2;
 800b7aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800b7ae:	3302      	adds	r3, #2
 800b7b0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
      k_ii = m + 2;
 800b7b4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800b7b8:	3302      	adds	r3, #2
 800b7ba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      exitg2 = false;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
      while ((!exitg2) && (k_ii >= kase)) {
 800b7c4:	e092      	b.n	800b8ec <svd_u3DvUgOe+0x10d4>
        qjj = k_ii;
 800b7c6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800b7ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        if (k_ii == kase) {
 800b7ce:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800b7d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d103      	bne.n	800b7e2 <svd_u3DvUgOe+0xfca>
          exitg2 = true;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800b7e0:	e084      	b.n	800b8ec <svd_u3DvUgOe+0x10d4>
        } else {
          rt = 0.0;
 800b7e2:	f04f 0200 	mov.w	r2, #0
 800b7e6:	f04f 0300 	mov.w	r3, #0
 800b7ea:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          if (k_ii < m + 2) {
 800b7ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800b7f2:	1c5a      	adds	r2, r3, #1
 800b7f4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	dc11      	bgt.n	800b820 <svd_u3DvUgOe+0x1008>
            rt = fabs(e[k_ii - 1]);
 800b7fc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800b800:	3b01      	subs	r3, #1
 800b802:	00db      	lsls	r3, r3, #3
 800b804:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b808:	4413      	add	r3, r2
 800b80a:	3bb8      	subs	r3, #184	; 0xb8
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	65ba      	str	r2, [r7, #88]	; 0x58
 800b812:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b816:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b818:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800b81c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
          }

          if (k_ii > kase + 1) {
 800b820:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b824:	1c5a      	adds	r2, r3, #1
 800b826:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800b82a:	4293      	cmp	r3, r2
 800b82c:	dd17      	ble.n	800b85e <svd_u3DvUgOe+0x1046>
            rt += fabs(e[k_ii - 2]);
 800b82e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800b832:	3b02      	subs	r3, #2
 800b834:	00db      	lsls	r3, r3, #3
 800b836:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b83a:	4413      	add	r3, r2
 800b83c:	3bb8      	subs	r3, #184	; 0xb8
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	653a      	str	r2, [r7, #80]	; 0x50
 800b844:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b848:	657b      	str	r3, [r7, #84]	; 0x54
 800b84a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800b84e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b852:	f7f4 fd0d 	bl	8000270 <__adddf3>
 800b856:	4602      	mov	r2, r0
 800b858:	460b      	mov	r3, r1
 800b85a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          }

          ztest = fabs(b_s[k_ii - 1]);
 800b85e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800b862:	3b01      	subs	r3, #1
 800b864:	00db      	lsls	r3, r3, #3
 800b866:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b86a:	4413      	add	r3, r2
 800b86c:	3ba0      	subs	r3, #160	; 0xa0
 800b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b872:	64ba      	str	r2, [r7, #72]	; 0x48
 800b874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b878:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b87a:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800b87e:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=
 800b882:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800b886:	f04f 0200 	mov.w	r2, #0
 800b88a:	4b45      	ldr	r3, [pc, #276]	; (800b9a0 <svd_u3DvUgOe+0x1188>)
 800b88c:	f7f4 fea6 	bl	80005dc <__aeabi_dmul>
 800b890:	4602      	mov	r2, r0
 800b892:	460b      	mov	r3, r1
 800b894:	4610      	mov	r0, r2
 800b896:	4619      	mov	r1, r3
 800b898:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800b89c:	f7f5 f924 	bl	8000ae8 <__aeabi_dcmpge>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10a      	bne.n	800b8bc <svd_u3DvUgOe+0x10a4>
 800b8a6:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800b8aa:	f04f 0200 	mov.w	r2, #0
 800b8ae:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b8b2:	f7f5 f90f 	bl	8000ad4 <__aeabi_dcmple>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d012      	beq.n	800b8e2 <svd_u3DvUgOe+0x10ca>
               1.0020841800044864E-292)) {
            b_s[k_ii - 1] = 0.0;
 800b8bc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	00db      	lsls	r3, r3, #3
 800b8c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b8c8:	4413      	add	r3, r2
 800b8ca:	f1a3 01a0 	sub.w	r1, r3, #160	; 0xa0
 800b8ce:	f04f 0200 	mov.w	r2, #0
 800b8d2:	f04f 0300 	mov.w	r3, #0
 800b8d6:	e9c1 2300 	strd	r2, r3, [r1]
            exitg2 = true;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800b8e0:	e004      	b.n	800b8ec <svd_u3DvUgOe+0x10d4>
          } else {
            k_ii--;
 800b8e2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      while ((!exitg2) && (k_ii >= kase)) {
 800b8ec:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d106      	bne.n	800b902 <svd_u3DvUgOe+0x10ea>
 800b8f4:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800b8f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	f6bf af62 	bge.w	800b7c6 <svd_u3DvUgOe+0xfae>
          }
        }
      }

      if (qjj == kase) {
 800b902:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800b906:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d103      	bne.n	800b916 <svd_u3DvUgOe+0x10fe>
        kase = 3;
 800b90e:	2303      	movs	r3, #3
 800b910:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800b914:	e011      	b.n	800b93a <svd_u3DvUgOe+0x1122>
      } else if (m + 2 == qjj) {
 800b916:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800b91a:	1c9a      	adds	r2, r3, #2
 800b91c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b920:	4293      	cmp	r3, r2
 800b922:	d103      	bne.n	800b92c <svd_u3DvUgOe+0x1114>
        kase = 1;
 800b924:	2301      	movs	r3, #1
 800b926:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800b92a:	e006      	b.n	800b93a <svd_u3DvUgOe+0x1122>
      } else {
        kase = 2;
 800b92c:	2302      	movs	r3, #2
 800b92e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        d = qjj;
 800b932:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b936:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      }
    }

    switch (kase) {
 800b93a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b93e:	2b03      	cmp	r3, #3
 800b940:	f000 8113 	beq.w	800bb6a <svd_u3DvUgOe+0x1352>
 800b944:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b948:	2b03      	cmp	r3, #3
 800b94a:	f300 8443 	bgt.w	800c1d4 <svd_u3DvUgOe+0x19bc>
 800b94e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b952:	2b01      	cmp	r3, #1
 800b954:	d005      	beq.n	800b962 <svd_u3DvUgOe+0x114a>
 800b956:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d07b      	beq.n	800ba56 <svd_u3DvUgOe+0x123e>
 800b95e:	f000 bc39 	b.w	800c1d4 <svd_u3DvUgOe+0x19bc>
     case 1:
      rt = e[m];
 800b962:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800b966:	00db      	lsls	r3, r3, #3
 800b968:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b96c:	4413      	add	r3, r2
 800b96e:	3bb8      	subs	r3, #184	; 0xb8
 800b970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b974:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[m] = 0.0;
 800b978:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800b97c:	00db      	lsls	r3, r3, #3
 800b97e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b982:	4413      	add	r3, r2
 800b984:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800b988:	f04f 0200 	mov.w	r2, #0
 800b98c:	f04f 0300 	mov.w	r3, #0
 800b990:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800b994:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800b998:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800b99c:	e053      	b.n	800ba46 <svd_u3DvUgOe+0x122e>
 800b99e:	bf00      	nop
 800b9a0:	3cb00000 	.word	0x3cb00000
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800b9a4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800b9a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b9ac:	00db      	lsls	r3, r3, #3
 800b9ae:	18d0      	adds	r0, r2, r3
 800b9b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b9b4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800b9b8:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800b9bc:	f001 fd2a 	bl	800d414 <xrotg_XzIjz1eG>
        if (qjj + 1 > d + 1) {
 800b9c0:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800b9c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	dd19      	ble.n	800ba00 <svd_u3DvUgOe+0x11e8>
          rt = -sqds * e[0];
 800b9cc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800b9d0:	643a      	str	r2, [r7, #64]	; 0x40
 800b9d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b9d6:	647b      	str	r3, [r7, #68]	; 0x44
 800b9d8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b9dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800b9e0:	f7f4 fdfc 	bl	80005dc <__aeabi_dmul>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          e[0] *= ztest;
 800b9ec:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b9f0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800b9f4:	f7f4 fdf2 	bl	80005dc <__aeabi_dmul>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        }

        xrot_i7f01JoJ(V, 3 * qjj + 1, 3 * (m + 1) + 1, ztest, sqds);
 800ba00:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800ba04:	4613      	mov	r3, r2
 800ba06:	005b      	lsls	r3, r3, #1
 800ba08:	4413      	add	r3, r2
 800ba0a:	1c59      	adds	r1, r3, #1
 800ba0c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ba10:	1c5a      	adds	r2, r3, #1
 800ba12:	4613      	mov	r3, r2
 800ba14:	005b      	lsls	r3, r3, #1
 800ba16:	4413      	add	r3, r2
 800ba18:	1c5a      	adds	r2, r3, #1
 800ba1a:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800ba1e:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800ba22:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800ba26:	eeb0 1a46 	vmov.f32	s2, s12
 800ba2a:	eef0 1a66 	vmov.f32	s3, s13
 800ba2e:	eeb0 0a47 	vmov.f32	s0, s14
 800ba32:	eef0 0a67 	vmov.f32	s1, s15
 800ba36:	6818      	ldr	r0, [r3, #0]
 800ba38:	f001 fbd0 	bl	800d1dc <xrot_i7f01JoJ>
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800ba3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ba40:	3b01      	subs	r3, #1
 800ba42:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ba46:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800ba4a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	daa8      	bge.n	800b9a4 <svd_u3DvUgOe+0x118c>
      }
      break;
 800ba52:	f000 bc77 	b.w	800c344 <svd_u3DvUgOe+0x1b2c>

     case 2:
      rt = e[d - 1];
 800ba56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	00db      	lsls	r3, r3, #3
 800ba5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ba62:	4413      	add	r3, r2
 800ba64:	3bb8      	subs	r3, #184	; 0xb8
 800ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[d - 1] = 0.0;
 800ba6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ba72:	3b01      	subs	r3, #1
 800ba74:	00db      	lsls	r3, r3, #3
 800ba76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ba7a:	4413      	add	r3, r2
 800ba7c:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800ba80:	f04f 0200 	mov.w	r2, #0
 800ba84:	f04f 0300 	mov.w	r3, #0
 800ba88:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = d; qjj < m + 2; qjj++) {
 800ba8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ba90:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ba94:	e061      	b.n	800bb5a <svd_u3DvUgOe+0x1342>
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800ba96:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800ba9a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ba9e:	00db      	lsls	r3, r3, #3
 800baa0:	18d0      	adds	r0, r2, r3
 800baa2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800baa6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800baaa:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800baae:	f001 fcb1 	bl	800d414 <xrotg_XzIjz1eG>
        rt = -sqds * e[qjj];
 800bab2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800bab6:	63ba      	str	r2, [r7, #56]	; 0x38
 800bab8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800babc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800babe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bac2:	00db      	lsls	r3, r3, #3
 800bac4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bac8:	4413      	add	r3, r2
 800baca:	3bb8      	subs	r3, #184	; 0xb8
 800bacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800bad4:	f7f4 fd82 	bl	80005dc <__aeabi_dmul>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        e[qjj] *= ztest;
 800bae0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bae4:	00db      	lsls	r3, r3, #3
 800bae6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800baea:	4413      	add	r3, r2
 800baec:	3bb8      	subs	r3, #184	; 0xb8
 800baee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800baf2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800baf6:	f7f4 fd71 	bl	80005dc <__aeabi_dmul>
 800bafa:	4602      	mov	r2, r0
 800bafc:	460b      	mov	r3, r1
 800bafe:	4610      	mov	r0, r2
 800bb00:	4619      	mov	r1, r3
 800bb02:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bb06:	00db      	lsls	r3, r3, #3
 800bb08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bb0c:	4413      	add	r3, r2
 800bb0e:	3bb8      	subs	r3, #184	; 0xb8
 800bb10:	e9c3 0100 	strd	r0, r1, [r3]
        xrot_i7f01JoJ(U, 3 * qjj + 1, 3 * (d - 1) + 1, ztest, sqds);
 800bb14:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800bb18:	4613      	mov	r3, r2
 800bb1a:	005b      	lsls	r3, r3, #1
 800bb1c:	4413      	add	r3, r2
 800bb1e:	1c59      	adds	r1, r3, #1
 800bb20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800bb24:	1e5a      	subs	r2, r3, #1
 800bb26:	4613      	mov	r3, r2
 800bb28:	005b      	lsls	r3, r3, #1
 800bb2a:	4413      	add	r3, r2
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800bb32:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800bb36:	eeb0 1a46 	vmov.f32	s2, s12
 800bb3a:	eef0 1a66 	vmov.f32	s3, s13
 800bb3e:	eeb0 0a47 	vmov.f32	s0, s14
 800bb42:	eef0 0a67 	vmov.f32	s1, s15
 800bb46:	461a      	mov	r2, r3
 800bb48:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800bb4c:	f001 fb46 	bl	800d1dc <xrot_i7f01JoJ>
      for (qjj = d; qjj < m + 2; qjj++) {
 800bb50:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bb54:	3301      	adds	r3, #1
 800bb56:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800bb5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800bb5e:	1c5a      	adds	r2, r3, #1
 800bb60:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bb64:	4293      	cmp	r3, r2
 800bb66:	dd96      	ble.n	800ba96 <svd_u3DvUgOe+0x127e>
      }
      break;
 800bb68:	e3ec      	b.n	800c344 <svd_u3DvUgOe+0x1b2c>

     case 3:
      {
        real_T emm1;
        real_T shift;
        sqds = b_s[m + 1];
 800bb6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800bb6e:	3301      	adds	r3, #1
 800bb70:	00db      	lsls	r3, r3, #3
 800bb72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bb76:	4413      	add	r3, r2
 800bb78:	3ba0      	subs	r3, #160	; 0xa0
 800bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800bb82:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800bb86:	633a      	str	r2, [r7, #48]	; 0x30
 800bb88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb8c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bb98:	4413      	add	r3, r2
 800bb9a:	3ba0      	subs	r3, #160	; 0xa0
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	62ba      	str	r2, [r7, #40]	; 0x28
 800bba2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bba8:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 800bbac:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800bbb0:	f00a f8e2 	bl	8015d78 <fmax>
 800bbb4:	eeb0 7a40 	vmov.f32	s14, s0
 800bbb8:	eef0 7a60 	vmov.f32	s15, s1
 800bbbc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800bbc0:	00db      	lsls	r3, r3, #3
 800bbc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bbc6:	4413      	add	r3, r2
 800bbc8:	3bb8      	subs	r3, #184	; 0xb8
 800bbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbce:	623a      	str	r2, [r7, #32]
 800bbd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbd4:	627b      	str	r3, [r7, #36]	; 0x24
 800bbd6:	ed97 1b08 	vldr	d1, [r7, #32]
 800bbda:	eeb0 0a47 	vmov.f32	s0, s14
 800bbde:	eef0 0a67 	vmov.f32	s1, s15
 800bbe2:	f00a f8c9 	bl	8015d78 <fmax>
 800bbe6:	eeb0 7a40 	vmov.f32	s14, s0
 800bbea:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800bbee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800bbf2:	00db      	lsls	r3, r3, #3
 800bbf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bbf8:	4413      	add	r3, r2
 800bbfa:	3ba0      	subs	r3, #160	; 0xa0
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800bc00:	61ba      	str	r2, [r7, #24]
 800bc02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc06:	61fb      	str	r3, [r7, #28]
 800bc08:	ed97 1b06 	vldr	d1, [r7, #24]
 800bc0c:	eeb0 0a47 	vmov.f32	s0, s14
 800bc10:	eef0 0a67 	vmov.f32	s1, s15
 800bc14:	f00a f8b0 	bl	8015d78 <fmax>
 800bc18:	eeb0 7a40 	vmov.f32	s14, s0
 800bc1c:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800bc20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800bc24:	00db      	lsls	r3, r3, #3
 800bc26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bc2a:	4413      	add	r3, r2
 800bc2c:	3bb8      	subs	r3, #184	; 0xb8
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800bc32:	613a      	str	r2, [r7, #16]
 800bc34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc38:	617b      	str	r3, [r7, #20]
 800bc3a:	ed97 1b04 	vldr	d1, [r7, #16]
 800bc3e:	eeb0 0a47 	vmov.f32	s0, s14
 800bc42:	eef0 0a67 	vmov.f32	s1, s15
 800bc46:	f00a f897 	bl	8015d78 <fmax>
 800bc4a:	eeb0 7a40 	vmov.f32	s14, s0
 800bc4e:	eef0 7a60 	vmov.f32	s15, s1
 800bc52:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
        rt = sqds / ztest;
 800bc56:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800bc5a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bc5e:	f7f4 fde7 	bl	8000830 <__aeabi_ddiv>
 800bc62:	4602      	mov	r2, r0
 800bc64:	460b      	mov	r3, r1
 800bc66:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        smm1 = b_s[m] / ztest;
 800bc6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800bc6e:	00db      	lsls	r3, r3, #3
 800bc70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bc74:	4413      	add	r3, r2
 800bc76:	3ba0      	subs	r3, #160	; 0xa0
 800bc78:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc7c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bc80:	f7f4 fdd6 	bl	8000830 <__aeabi_ddiv>
 800bc84:	4602      	mov	r2, r0
 800bc86:	460b      	mov	r3, r1
 800bc88:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 = e[m] / ztest;
 800bc8c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800bc90:	00db      	lsls	r3, r3, #3
 800bc92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bc96:	4413      	add	r3, r2
 800bc98:	3bb8      	subs	r3, #184	; 0xb8
 800bc9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc9e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bca2:	f7f4 fdc5 	bl	8000830 <__aeabi_ddiv>
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
 800bcaa:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        sqds = b_s[d] / ztest;
 800bcae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800bcb2:	00db      	lsls	r3, r3, #3
 800bcb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bcb8:	4413      	add	r3, r2
 800bcba:	3ba0      	subs	r3, #160	; 0xa0
 800bcbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bcc0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bcc4:	f7f4 fdb4 	bl	8000830 <__aeabi_ddiv>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	460b      	mov	r3, r1
 800bccc:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;
 800bcd0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800bcd4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bcd8:	f7f4 faca 	bl	8000270 <__adddf3>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	4614      	mov	r4, r2
 800bce2:	461d      	mov	r5, r3
 800bce4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800bce8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bcec:	f7f4 fabe 	bl	800026c <__aeabi_dsub>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	4629      	mov	r1, r5
 800bcf8:	f7f4 fc70 	bl	80005dc <__aeabi_dmul>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	460b      	mov	r3, r1
 800bd00:	4614      	mov	r4, r2
 800bd02:	461d      	mov	r5, r3
 800bd04:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800bd08:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800bd0c:	f7f4 fc66 	bl	80005dc <__aeabi_dmul>
 800bd10:	4602      	mov	r2, r0
 800bd12:	460b      	mov	r3, r1
 800bd14:	4620      	mov	r0, r4
 800bd16:	4629      	mov	r1, r5
 800bd18:	f7f4 faaa 	bl	8000270 <__adddf3>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	460b      	mov	r3, r1
 800bd20:	4610      	mov	r0, r2
 800bd22:	4619      	mov	r1, r3
 800bd24:	f04f 0200 	mov.w	r2, #0
 800bd28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd2c:	f7f4 fd80 	bl	8000830 <__aeabi_ddiv>
 800bd30:	4602      	mov	r2, r0
 800bd32:	460b      	mov	r3, r1
 800bd34:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 *= rt;
 800bd38:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bd3c:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800bd40:	f7f4 fc4c 	bl	80005dc <__aeabi_dmul>
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        emm1 *= emm1;
 800bd4c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800bd50:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800bd54:	f7f4 fc42 	bl	80005dc <__aeabi_dmul>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
 800bd60:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800bd64:	f04f 0200 	mov.w	r2, #0
 800bd68:	f04f 0300 	mov.w	r3, #0
 800bd6c:	f7f4 fe9e 	bl	8000aac <__aeabi_dcmpeq>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d00a      	beq.n	800bd8c <svd_u3DvUgOe+0x1574>
 800bd76:	f04f 0200 	mov.w	r2, #0
 800bd7a:	f04f 0300 	mov.w	r3, #0
 800bd7e:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800bd82:	f7f4 fe93 	bl	8000aac <__aeabi_dcmpeq>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d13f      	bne.n	800be0c <svd_u3DvUgOe+0x15f4>
          shift = sqrt(smm1 * smm1 + emm1);
 800bd8c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800bd90:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800bd94:	f7f4 fc22 	bl	80005dc <__aeabi_dmul>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	4610      	mov	r0, r2
 800bd9e:	4619      	mov	r1, r3
 800bda0:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800bda4:	f7f4 fa64 	bl	8000270 <__adddf3>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	ec43 2b17 	vmov	d7, r2, r3
 800bdb0:	eeb0 0a47 	vmov.f32	s0, s14
 800bdb4:	eef0 0a67 	vmov.f32	s1, s15
 800bdb8:	f00a f880 	bl	8015ebc <sqrt>
 800bdbc:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
          if (smm1 < 0.0) {
 800bdc0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800bdc4:	f04f 0200 	mov.w	r2, #0
 800bdc8:	f04f 0300 	mov.w	r3, #0
 800bdcc:	f7f4 fe78 	bl	8000ac0 <__aeabi_dcmplt>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d009      	beq.n	800bdea <svd_u3DvUgOe+0x15d2>
            shift = -shift;
 800bdd6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800bdda:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800bdde:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800bde2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bde6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
          }

          shift = emm1 / (smm1 + shift);
 800bdea:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800bdee:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800bdf2:	f7f4 fa3d 	bl	8000270 <__adddf3>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800bdfe:	f7f4 fd17 	bl	8000830 <__aeabi_ddiv>
 800be02:	4602      	mov	r2, r0
 800be04:	460b      	mov	r3, r1
 800be06:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
 800be0a:	e005      	b.n	800be18 <svd_u3DvUgOe+0x1600>
        } else {
          shift = 0.0;
 800be0c:	f04f 0200 	mov.w	r2, #0
 800be10:	f04f 0300 	mov.w	r3, #0
 800be14:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        }

        rt = (sqds + rt) * (sqds - rt) + shift;
 800be18:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800be1c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800be20:	f7f4 fa26 	bl	8000270 <__adddf3>
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	4614      	mov	r4, r2
 800be2a:	461d      	mov	r5, r3
 800be2c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800be30:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800be34:	f7f4 fa1a 	bl	800026c <__aeabi_dsub>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4620      	mov	r0, r4
 800be3e:	4629      	mov	r1, r5
 800be40:	f7f4 fbcc 	bl	80005dc <__aeabi_dmul>
 800be44:	4602      	mov	r2, r0
 800be46:	460b      	mov	r3, r1
 800be48:	4610      	mov	r0, r2
 800be4a:	4619      	mov	r1, r3
 800be4c:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800be50:	f7f4 fa0e 	bl	8000270 <__adddf3>
 800be54:	4602      	mov	r2, r0
 800be56:	460b      	mov	r3, r1
 800be58:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        ztest = e[d] / ztest * sqds;
 800be5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800be60:	00db      	lsls	r3, r3, #3
 800be62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800be66:	4413      	add	r3, r2
 800be68:	3bb8      	subs	r3, #184	; 0xb8
 800be6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be6e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800be72:	f7f4 fcdd 	bl	8000830 <__aeabi_ddiv>
 800be76:	4602      	mov	r2, r0
 800be78:	460b      	mov	r3, r1
 800be7a:	4610      	mov	r0, r2
 800be7c:	4619      	mov	r1, r3
 800be7e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800be82:	f7f4 fbab 	bl	80005dc <__aeabi_dmul>
 800be86:	4602      	mov	r2, r0
 800be88:	460b      	mov	r3, r1
 800be8a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800be8e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800be92:	3301      	adds	r3, #1
 800be94:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800be98:	e183      	b.n	800c1a2 <svd_u3DvUgOe+0x198a>
          xrotg_XzIjz1eG(&rt, &ztest, &sqds, &smm1);
 800be9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800be9e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800bea2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800bea6:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800beaa:	f001 fab3 	bl	800d414 <xrotg_XzIjz1eG>
          if (qjj > d + 1) {
 800beae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800beb2:	1c5a      	adds	r2, r3, #1
 800beb4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800beb8:	4293      	cmp	r3, r2
 800beba:	dd03      	ble.n	800bec4 <svd_u3DvUgOe+0x16ac>
            e[0] = rt;
 800bebc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bec0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
          }

          rt = e[qjj - 1];
 800bec4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bec8:	3b01      	subs	r3, #1
 800beca:	00db      	lsls	r3, r3, #3
 800becc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bed0:	4413      	add	r3, r2
 800bed2:	3bb8      	subs	r3, #184	; 0xb8
 800bed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed8:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          emm1 = b_s[qjj - 1];
 800bedc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bee0:	3b01      	subs	r3, #1
 800bee2:	00db      	lsls	r3, r3, #3
 800bee4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bee8:	4413      	add	r3, r2
 800beea:	3ba0      	subs	r3, #160	; 0xa0
 800beec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef0:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
          e[qjj - 1] = rt * sqds - emm1 * smm1;
 800bef4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800bef8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800befc:	f7f4 fb6e 	bl	80005dc <__aeabi_dmul>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	4690      	mov	r8, r2
 800bf06:	4699      	mov	r9, r3
 800bf08:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800bf0c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800bf10:	f7f4 fb64 	bl	80005dc <__aeabi_dmul>
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	4610      	mov	r0, r2
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bf20:	1e5c      	subs	r4, r3, #1
 800bf22:	4602      	mov	r2, r0
 800bf24:	460b      	mov	r3, r1
 800bf26:	4640      	mov	r0, r8
 800bf28:	4649      	mov	r1, r9
 800bf2a:	f7f4 f99f 	bl	800026c <__aeabi_dsub>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	460b      	mov	r3, r1
 800bf32:	4610      	mov	r0, r2
 800bf34:	4619      	mov	r1, r3
 800bf36:	00e3      	lsls	r3, r4, #3
 800bf38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bf3c:	4413      	add	r3, r2
 800bf3e:	3bb8      	subs	r3, #184	; 0xb8
 800bf40:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * b_s[qjj];
 800bf44:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bf48:	00db      	lsls	r3, r3, #3
 800bf4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bf4e:	4413      	add	r3, r2
 800bf50:	3ba0      	subs	r3, #160	; 0xa0
 800bf52:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf56:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800bf5a:	f7f4 fb3f 	bl	80005dc <__aeabi_dmul>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	460b      	mov	r3, r1
 800bf62:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          b_s[qjj] *= sqds;
 800bf66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bf6a:	00db      	lsls	r3, r3, #3
 800bf6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bf70:	4413      	add	r3, r2
 800bf72:	3ba0      	subs	r3, #160	; 0xa0
 800bf74:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf78:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800bf7c:	f7f4 fb2e 	bl	80005dc <__aeabi_dmul>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	4610      	mov	r0, r2
 800bf86:	4619      	mov	r1, r3
 800bf88:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bf8c:	00db      	lsls	r3, r3, #3
 800bf8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bf92:	4413      	add	r3, r2
 800bf94:	3ba0      	subs	r3, #160	; 0xa0
 800bf96:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(V, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800bf9a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bf9e:	1e5a      	subs	r2, r3, #1
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	005b      	lsls	r3, r3, #1
 800bfa4:	4413      	add	r3, r2
 800bfa6:	1c59      	adds	r1, r3, #1
 800bfa8:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800bfac:	4613      	mov	r3, r2
 800bfae:	005b      	lsls	r3, r3, #1
 800bfb0:	4413      	add	r3, r2
 800bfb2:	1c5a      	adds	r2, r3, #1
 800bfb4:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800bfb8:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800bfbc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bfc0:	eeb0 1a46 	vmov.f32	s2, s12
 800bfc4:	eef0 1a66 	vmov.f32	s3, s13
 800bfc8:	eeb0 0a47 	vmov.f32	s0, s14
 800bfcc:	eef0 0a67 	vmov.f32	s1, s15
 800bfd0:	6818      	ldr	r0, [r3, #0]
 800bfd2:	f001 f903 	bl	800d1dc <xrot_i7f01JoJ>
          b_s[qjj - 1] = emm1 * sqds + rt * smm1;
 800bfd6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800bfda:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800bfde:	f7f4 fafd 	bl	80005dc <__aeabi_dmul>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4690      	mov	r8, r2
 800bfe8:	4699      	mov	r9, r3
 800bfea:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800bfee:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800bff2:	f7f4 faf3 	bl	80005dc <__aeabi_dmul>
 800bff6:	4602      	mov	r2, r0
 800bff8:	460b      	mov	r3, r1
 800bffa:	4610      	mov	r0, r2
 800bffc:	4619      	mov	r1, r3
 800bffe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c002:	1e5c      	subs	r4, r3, #1
 800c004:	4602      	mov	r2, r0
 800c006:	460b      	mov	r3, r1
 800c008:	4640      	mov	r0, r8
 800c00a:	4649      	mov	r1, r9
 800c00c:	f7f4 f930 	bl	8000270 <__adddf3>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4610      	mov	r0, r2
 800c016:	4619      	mov	r1, r3
 800c018:	00e3      	lsls	r3, r4, #3
 800c01a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c01e:	4413      	add	r3, r2
 800c020:	3ba0      	subs	r3, #160	; 0xa0
 800c022:	e9c3 0100 	strd	r0, r1, [r3]
          xrotg_XzIjz1eG(&b_s[qjj - 1], &ztest, &sqds, &smm1);
 800c026:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c02a:	3b01      	subs	r3, #1
 800c02c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800c030:	00db      	lsls	r3, r3, #3
 800c032:	18d0      	adds	r0, r2, r3
 800c034:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c038:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800c03c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800c040:	f001 f9e8 	bl	800d414 <xrotg_XzIjz1eG>
          rt = e[qjj - 1] * sqds + smm1 * b_s[qjj];
 800c044:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c048:	3b01      	subs	r3, #1
 800c04a:	00db      	lsls	r3, r3, #3
 800c04c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c050:	4413      	add	r3, r2
 800c052:	3bb8      	subs	r3, #184	; 0xb8
 800c054:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c058:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c05c:	f7f4 fabe 	bl	80005dc <__aeabi_dmul>
 800c060:	4602      	mov	r2, r0
 800c062:	460b      	mov	r3, r1
 800c064:	4614      	mov	r4, r2
 800c066:	461d      	mov	r5, r3
 800c068:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c06c:	00db      	lsls	r3, r3, #3
 800c06e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c072:	4413      	add	r3, r2
 800c074:	3ba0      	subs	r3, #160	; 0xa0
 800c076:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c07a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c07e:	f7f4 faad 	bl	80005dc <__aeabi_dmul>
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	4620      	mov	r0, r4
 800c088:	4629      	mov	r1, r5
 800c08a:	f7f4 f8f1 	bl	8000270 <__adddf3>
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          b_s[qjj] = e[qjj - 1] * -smm1 + sqds * b_s[qjj];
 800c096:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c09a:	3b01      	subs	r3, #1
 800c09c:	00db      	lsls	r3, r3, #3
 800c09e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c0a2:	4413      	add	r3, r2
 800c0a4:	3bb8      	subs	r3, #184	; 0xb8
 800c0a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0aa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c0ae:	60ba      	str	r2, [r7, #8]
 800c0b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c0b4:	60fb      	str	r3, [r7, #12]
 800c0b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c0ba:	f7f4 fa8f 	bl	80005dc <__aeabi_dmul>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	4614      	mov	r4, r2
 800c0c4:	461d      	mov	r5, r3
 800c0c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c0d0:	4413      	add	r3, r2
 800c0d2:	3ba0      	subs	r3, #160	; 0xa0
 800c0d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0d8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c0dc:	f7f4 fa7e 	bl	80005dc <__aeabi_dmul>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	f7f4 f8c2 	bl	8000270 <__adddf3>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	4610      	mov	r0, r2
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c0f8:	00db      	lsls	r3, r3, #3
 800c0fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c0fe:	4413      	add	r3, r2
 800c100:	3ba0      	subs	r3, #160	; 0xa0
 800c102:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * e[qjj];
 800c106:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c10a:	00db      	lsls	r3, r3, #3
 800c10c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c110:	4413      	add	r3, r2
 800c112:	3bb8      	subs	r3, #184	; 0xb8
 800c114:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c118:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c11c:	f7f4 fa5e 	bl	80005dc <__aeabi_dmul>
 800c120:	4602      	mov	r2, r0
 800c122:	460b      	mov	r3, r1
 800c124:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          e[qjj] *= sqds;
 800c128:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c12c:	00db      	lsls	r3, r3, #3
 800c12e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c132:	4413      	add	r3, r2
 800c134:	3bb8      	subs	r3, #184	; 0xb8
 800c136:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c13a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c13e:	f7f4 fa4d 	bl	80005dc <__aeabi_dmul>
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	4610      	mov	r0, r2
 800c148:	4619      	mov	r1, r3
 800c14a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c14e:	00db      	lsls	r3, r3, #3
 800c150:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c154:	4413      	add	r3, r2
 800c156:	3bb8      	subs	r3, #184	; 0xb8
 800c158:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(U, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800c15c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c160:	1e5a      	subs	r2, r3, #1
 800c162:	4613      	mov	r3, r2
 800c164:	005b      	lsls	r3, r3, #1
 800c166:	4413      	add	r3, r2
 800c168:	1c59      	adds	r1, r3, #1
 800c16a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c16e:	4613      	mov	r3, r2
 800c170:	005b      	lsls	r3, r3, #1
 800c172:	4413      	add	r3, r2
 800c174:	3301      	adds	r3, #1
 800c176:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800c17a:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800c17e:	eeb0 1a46 	vmov.f32	s2, s12
 800c182:	eef0 1a66 	vmov.f32	s3, s13
 800c186:	eeb0 0a47 	vmov.f32	s0, s14
 800c18a:	eef0 0a67 	vmov.f32	s1, s15
 800c18e:	461a      	mov	r2, r3
 800c190:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800c194:	f001 f822 	bl	800d1dc <xrot_i7f01JoJ>
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800c198:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c19c:	3301      	adds	r3, #1
 800c19e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800c1a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c1a6:	1c5a      	adds	r2, r3, #1
 800c1a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	f77f ae74 	ble.w	800be9a <svd_u3DvUgOe+0x1682>
        }

        e[m] = rt;
 800c1b2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800c1b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c1ba:	00db      	lsls	r3, r3, #3
 800c1bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c1c0:	4413      	add	r3, r2
 800c1c2:	3bb8      	subs	r3, #184	; 0xb8
 800c1c4:	e9c3 0100 	strd	r0, r1, [r3]
        qq++;
 800c1c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      }
      break;
 800c1d2:	e0b7      	b.n	800c344 <svd_u3DvUgOe+0x1b2c>

     default:
      if (b_s[d] < 0.0) {
 800c1d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c1d8:	00db      	lsls	r3, r3, #3
 800c1da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c1de:	4413      	add	r3, r2
 800c1e0:	3ba0      	subs	r3, #160	; 0xa0
 800c1e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1e6:	f04f 0200 	mov.w	r2, #0
 800c1ea:	f04f 0300 	mov.w	r3, #0
 800c1ee:	f7f4 fc67 	bl	8000ac0 <__aeabi_dcmplt>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d025      	beq.n	800c244 <svd_u3DvUgOe+0x1a2c>
        b_s[d] = -b_s[d];
 800c1f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c1fc:	00db      	lsls	r3, r3, #3
 800c1fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c202:	4413      	add	r3, r2
 800c204:	3ba0      	subs	r3, #160	; 0xa0
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	603a      	str	r2, [r7, #0]
 800c20c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c210:	607b      	str	r3, [r7, #4]
 800c212:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c216:	00db      	lsls	r3, r3, #3
 800c218:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c21c:	4413      	add	r3, r2
 800c21e:	3ba0      	subs	r3, #160	; 0xa0
 800c220:	ed97 7b00 	vldr	d7, [r7]
 800c224:	ed83 7b00 	vstr	d7, [r3]
        xscal_eaAxXsvQ(-1.0, V, 3 * d + 1);
 800c228:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800c22c:	4613      	mov	r3, r2
 800c22e:	005b      	lsls	r3, r3, #1
 800c230:	4413      	add	r3, r2
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800c238:	4611      	mov	r1, r2
 800c23a:	6818      	ldr	r0, [r3, #0]
 800c23c:	ed9f 0b56 	vldr	d0, [pc, #344]	; 800c398 <svd_u3DvUgOe+0x1b80>
 800c240:	f001 fa4e 	bl	800d6e0 <xscal_eaAxXsvQ>
      }

      qq = d + 1;
 800c244:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c248:	3301      	adds	r3, #1
 800c24a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800c24e:	e055      	b.n	800c2fc <svd_u3DvUgOe+0x1ae4>
        rt = b_s[d];
 800c250:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c254:	00db      	lsls	r3, r3, #3
 800c256:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c25a:	4413      	add	r3, r2
 800c25c:	3ba0      	subs	r3, #160	; 0xa0
 800c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c262:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        b_s[d] = b_s[qq];
 800c266:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c26a:	00db      	lsls	r3, r3, #3
 800c26c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c270:	4413      	add	r3, r2
 800c272:	3ba0      	subs	r3, #160	; 0xa0
 800c274:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c278:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c27c:	00db      	lsls	r3, r3, #3
 800c27e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c282:	4413      	add	r3, r2
 800c284:	3ba0      	subs	r3, #160	; 0xa0
 800c286:	e9c3 0100 	strd	r0, r1, [r3]
        b_s[qq] = rt;
 800c28a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800c28e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c292:	00db      	lsls	r3, r3, #3
 800c294:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c298:	4413      	add	r3, r2
 800c29a:	3ba0      	subs	r3, #160	; 0xa0
 800c29c:	e9c3 0100 	strd	r0, r1, [r3]
        xswap_JoAqPjUv(V, 3 * d + 1, 3 * (d + 1) + 1);
 800c2a0:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	4413      	add	r3, r2
 800c2aa:	1c59      	adds	r1, r3, #1
 800c2ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c2b0:	1c5a      	adds	r2, r3, #1
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	005b      	lsls	r3, r3, #1
 800c2b6:	4413      	add	r3, r2
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800c2be:	461a      	mov	r2, r3
 800c2c0:	6800      	ldr	r0, [r0, #0]
 800c2c2:	f001 fa3c 	bl	800d73e <xswap_JoAqPjUv>
        xswap_JoAqPjUv(U, 3 * d + 1, 3 * (d + 1) + 1);
 800c2c6:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	005b      	lsls	r3, r3, #1
 800c2ce:	4413      	add	r3, r2
 800c2d0:	1c59      	adds	r1, r3, #1
 800c2d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c2d6:	1c5a      	adds	r2, r3, #1
 800c2d8:	4613      	mov	r3, r2
 800c2da:	005b      	lsls	r3, r3, #1
 800c2dc:	4413      	add	r3, r2
 800c2de:	3301      	adds	r3, #1
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800c2e6:	f001 fa2a 	bl	800d73e <xswap_JoAqPjUv>
        d = qq;
 800c2ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c2ee:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        qq++;
 800c2f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800c2fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c300:	2b01      	cmp	r3, #1
 800c302:	dc16      	bgt.n	800c332 <svd_u3DvUgOe+0x1b1a>
 800c304:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c308:	00db      	lsls	r3, r3, #3
 800c30a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c30e:	4413      	add	r3, r2
 800c310:	3ba0      	subs	r3, #160	; 0xa0
 800c312:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c316:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c31a:	00db      	lsls	r3, r3, #3
 800c31c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c320:	4413      	add	r3, r2
 800c322:	3ba0      	subs	r3, #160	; 0xa0
 800c324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c328:	f7f4 fbca 	bl	8000ac0 <__aeabi_dcmplt>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d18e      	bne.n	800c250 <svd_u3DvUgOe+0x1a38>
      }

      qq = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      m--;
 800c338:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c33c:	3b01      	subs	r3, #1
 800c33e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
      break;
 800c342:	bf00      	nop
  while ((m + 2 > 0) && (qq < 75)) {
 800c344:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c34c:	db04      	blt.n	800c358 <svd_u3DvUgOe+0x1b40>
 800c34e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c352:	2b4a      	cmp	r3, #74	; 0x4a
 800c354:	f77f a972 	ble.w	800b63c <svd_u3DvUgOe+0xe24>
    }
  }

  s[0] = b_s[0];
 800c358:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800c35c:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800c360:	e9c1 2300 	strd	r2, r3, [r1]
  s[1] = b_s[1];
 800c364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c368:	f103 0108 	add.w	r1, r3, #8
 800c36c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800c370:	e9c1 2300 	strd	r2, r3, [r1]
  s[2] = b_s[2];
 800c374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c378:	f103 0110 	add.w	r1, r3, #16
 800c37c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800c380:	e9c1 2300 	strd	r2, r3, [r1]
}
 800c384:	bf00      	nop
 800c386:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800c38a:	46bd      	mov	sp, r7
 800c38c:	ecbd 8b02 	vpop	{d8}
 800c390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c394:	f3af 8000 	nop.w
 800c398:	00000000 	.word	0x00000000
 800c39c:	bff00000 	.word	0xbff00000

0800c3a0 <trisolve_BC1XmAGq>:
#include "rtwtypes.h"
#include "trisolve_BC1XmAGq.h"

void trisolve_BC1XmAGq(real_T A, real_T B[3])
{
 800c3a0:	b590      	push	{r4, r7, lr}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	ed87 0b02 	vstr	d0, [r7, #8]
 800c3aa:	6078      	str	r0, [r7, #4]
  if (B[0] != 0.0) {
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3b2:	f04f 0200 	mov.w	r2, #0
 800c3b6:	f04f 0300 	mov.w	r3, #0
 800c3ba:	f7f4 fb77 	bl	8000aac <__aeabi_dcmpeq>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d10b      	bne.n	800c3dc <trisolve_BC1XmAGq+0x3c>
    B[0] /= A;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c3ce:	f7f4 fa2f 	bl	8000830 <__aeabi_ddiv>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	6879      	ldr	r1, [r7, #4]
 800c3d8:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (B[1] != 0.0) {
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	3308      	adds	r3, #8
 800c3e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3e4:	f04f 0200 	mov.w	r2, #0
 800c3e8:	f04f 0300 	mov.w	r3, #0
 800c3ec:	f7f4 fb5e 	bl	8000aac <__aeabi_dcmpeq>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d10e      	bne.n	800c414 <trisolve_BC1XmAGq+0x74>
    B[1] /= A;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	3308      	adds	r3, #8
 800c3fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f103 0408 	add.w	r4, r3, #8
 800c404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c408:	f7f4 fa12 	bl	8000830 <__aeabi_ddiv>
 800c40c:	4602      	mov	r2, r0
 800c40e:	460b      	mov	r3, r1
 800c410:	e9c4 2300 	strd	r2, r3, [r4]
  }

  if (B[2] != 0.0) {
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	3310      	adds	r3, #16
 800c418:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c41c:	f04f 0200 	mov.w	r2, #0
 800c420:	f04f 0300 	mov.w	r3, #0
 800c424:	f7f4 fb42 	bl	8000aac <__aeabi_dcmpeq>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d000      	beq.n	800c430 <trisolve_BC1XmAGq+0x90>
    B[2] /= A;
  }
}
 800c42e:	e00e      	b.n	800c44e <trisolve_BC1XmAGq+0xae>
    B[2] /= A;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	3310      	adds	r3, #16
 800c434:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f103 0410 	add.w	r4, r3, #16
 800c43e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c442:	f7f4 f9f5 	bl	8000830 <__aeabi_ddiv>
 800c446:	4602      	mov	r2, r0
 800c448:	460b      	mov	r3, r1
 800c44a:	e9c4 2300 	strd	r2, r3, [r4]
}
 800c44e:	bf00      	nop
 800c450:	3714      	adds	r7, #20
 800c452:	46bd      	mov	sp, r7
 800c454:	bd90      	pop	{r4, r7, pc}

0800c456 <xaxpy_OQ28XA21>:
#include "rtwtypes.h"
#include "xaxpy_OQ28XA21.h"

void xaxpy_OQ28XA21(int32_T n, real_T a, const real_T x[9], int32_T ix0, real_T
                    y[3], int32_T iy0)
{
 800c456:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c458:	b08b      	sub	sp, #44	; 0x2c
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6178      	str	r0, [r7, #20]
 800c45e:	ed87 0b02 	vstr	d0, [r7, #8]
 800c462:	6139      	str	r1, [r7, #16]
 800c464:	607a      	str	r2, [r7, #4]
 800c466:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	dd43      	ble.n	800c4f6 <xaxpy_OQ28XA21+0xa0>
 800c46e:	f04f 0200 	mov.w	r2, #0
 800c472:	f04f 0300 	mov.w	r3, #0
 800c476:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c47a:	f7f4 fb17 	bl	8000aac <__aeabi_dcmpeq>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d000      	beq.n	800c486 <xaxpy_OQ28XA21+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800c484:	e037      	b.n	800c4f6 <xaxpy_OQ28XA21+0xa0>
    ix = ix0 - 1;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	3b01      	subs	r3, #1
 800c48a:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800c48c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c48e:	3b01      	subs	r3, #1
 800c490:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800c492:	2300      	movs	r3, #0
 800c494:	627b      	str	r3, [r7, #36]	; 0x24
 800c496:	e02a      	b.n	800c4ee <xaxpy_OQ28XA21+0x98>
      y[iy] += a * x[ix];
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	00db      	lsls	r3, r3, #3
 800c49c:	683a      	ldr	r2, [r7, #0]
 800c49e:	4413      	add	r3, r2
 800c4a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c4a4:	6a3b      	ldr	r3, [r7, #32]
 800c4a6:	00db      	lsls	r3, r3, #3
 800c4a8:	693a      	ldr	r2, [r7, #16]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c4b4:	f7f4 f892 	bl	80005dc <__aeabi_dmul>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	4610      	mov	r0, r2
 800c4be:	4619      	mov	r1, r3
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	00db      	lsls	r3, r3, #3
 800c4c4:	683a      	ldr	r2, [r7, #0]
 800c4c6:	18d6      	adds	r6, r2, r3
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	f7f3 fece 	bl	8000270 <__adddf3>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800c4dc:	6a3b      	ldr	r3, [r7, #32]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	623b      	str	r3, [r7, #32]
      iy++;
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	627b      	str	r3, [r7, #36]	; 0x24
 800c4ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	dbd0      	blt.n	800c498 <xaxpy_OQ28XA21+0x42>
}
 800c4f6:	bf00      	nop
 800c4f8:	372c      	adds	r7, #44	; 0x2c
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4fe <xaxpy_Wxch84Fl>:
#include "rtwtypes.h"
#include "xaxpy_Wxch84Fl.h"

void xaxpy_Wxch84Fl(int32_T n, real_T a, const real_T x[3], int32_T ix0, real_T
                    y[9], int32_T iy0)
{
 800c4fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c500:	b08b      	sub	sp, #44	; 0x2c
 800c502:	af00      	add	r7, sp, #0
 800c504:	6178      	str	r0, [r7, #20]
 800c506:	ed87 0b02 	vstr	d0, [r7, #8]
 800c50a:	6139      	str	r1, [r7, #16]
 800c50c:	607a      	str	r2, [r7, #4]
 800c50e:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	2b00      	cmp	r3, #0
 800c514:	dd43      	ble.n	800c59e <xaxpy_Wxch84Fl+0xa0>
 800c516:	f04f 0200 	mov.w	r2, #0
 800c51a:	f04f 0300 	mov.w	r3, #0
 800c51e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c522:	f7f4 fac3 	bl	8000aac <__aeabi_dcmpeq>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d000      	beq.n	800c52e <xaxpy_Wxch84Fl+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800c52c:	e037      	b.n	800c59e <xaxpy_Wxch84Fl+0xa0>
    ix = ix0 - 1;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	3b01      	subs	r3, #1
 800c532:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800c534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c536:	3b01      	subs	r3, #1
 800c538:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800c53a:	2300      	movs	r3, #0
 800c53c:	627b      	str	r3, [r7, #36]	; 0x24
 800c53e:	e02a      	b.n	800c596 <xaxpy_Wxch84Fl+0x98>
      y[iy] += a * x[ix];
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	4413      	add	r3, r2
 800c548:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c54c:	6a3b      	ldr	r3, [r7, #32]
 800c54e:	00db      	lsls	r3, r3, #3
 800c550:	693a      	ldr	r2, [r7, #16]
 800c552:	4413      	add	r3, r2
 800c554:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c558:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c55c:	f7f4 f83e 	bl	80005dc <__aeabi_dmul>
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	4610      	mov	r0, r2
 800c566:	4619      	mov	r1, r3
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	00db      	lsls	r3, r3, #3
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	18d6      	adds	r6, r2, r3
 800c570:	4602      	mov	r2, r0
 800c572:	460b      	mov	r3, r1
 800c574:	4620      	mov	r0, r4
 800c576:	4629      	mov	r1, r5
 800c578:	f7f3 fe7a 	bl	8000270 <__adddf3>
 800c57c:	4602      	mov	r2, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800c584:	6a3b      	ldr	r3, [r7, #32]
 800c586:	3301      	adds	r3, #1
 800c588:	623b      	str	r3, [r7, #32]
      iy++;
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	3301      	adds	r3, #1
 800c58e:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800c590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c592:	3301      	adds	r3, #1
 800c594:	627b      	str	r3, [r7, #36]	; 0x24
 800c596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	dbd0      	blt.n	800c540 <xaxpy_Wxch84Fl+0x42>
}
 800c59e:	bf00      	nop
 800c5a0:	372c      	adds	r7, #44	; 0x2c
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c5a6 <xaxpy_guu0hJif>:
#include "rtwtypes.h"
#include "xaxpy_guu0hJif.h"

void xaxpy_guu0hJif(int32_T n, real_T a, int32_T ix0, real_T y[9], int32_T iy0)
{
 800c5a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5a8:	b08b      	sub	sp, #44	; 0x2c
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6178      	str	r0, [r7, #20]
 800c5ae:	ed87 0b02 	vstr	d0, [r7, #8]
 800c5b2:	6139      	str	r1, [r7, #16]
 800c5b4:	607a      	str	r2, [r7, #4]
 800c5b6:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	dd43      	ble.n	800c646 <xaxpy_guu0hJif+0xa0>
 800c5be:	f04f 0200 	mov.w	r2, #0
 800c5c2:	f04f 0300 	mov.w	r3, #0
 800c5c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c5ca:	f7f4 fa6f 	bl	8000aac <__aeabi_dcmpeq>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d000      	beq.n	800c5d6 <xaxpy_guu0hJif+0x30>
      y[iy] += a * y[ix];
      ix++;
      iy++;
    }
  }
}
 800c5d4:	e037      	b.n	800c646 <xaxpy_guu0hJif+0xa0>
    ix = ix0 - 1;
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	627b      	str	r3, [r7, #36]	; 0x24
 800c5e6:	e02a      	b.n	800c63e <xaxpy_guu0hJif+0x98>
      y[iy] += a * y[ix];
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	00db      	lsls	r3, r3, #3
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c5f4:	6a3b      	ldr	r3, [r7, #32]
 800c5f6:	00db      	lsls	r3, r3, #3
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c600:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c604:	f7f3 ffea 	bl	80005dc <__aeabi_dmul>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	4610      	mov	r0, r2
 800c60e:	4619      	mov	r1, r3
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	00db      	lsls	r3, r3, #3
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	18d6      	adds	r6, r2, r3
 800c618:	4602      	mov	r2, r0
 800c61a:	460b      	mov	r3, r1
 800c61c:	4620      	mov	r0, r4
 800c61e:	4629      	mov	r1, r5
 800c620:	f7f3 fe26 	bl	8000270 <__adddf3>
 800c624:	4602      	mov	r2, r0
 800c626:	460b      	mov	r3, r1
 800c628:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800c62c:	6a3b      	ldr	r3, [r7, #32]
 800c62e:	3301      	adds	r3, #1
 800c630:	623b      	str	r3, [r7, #32]
      iy++;
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	3301      	adds	r3, #1
 800c636:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63a:	3301      	adds	r3, #1
 800c63c:	627b      	str	r3, [r7, #36]	; 0x24
 800c63e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	429a      	cmp	r2, r3
 800c644:	dbd0      	blt.n	800c5e8 <xaxpy_guu0hJif+0x42>
}
 800c646:	bf00      	nop
 800c648:	372c      	adds	r7, #44	; 0x2c
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c64e <xdotc_mznw4aLl>:
#include "rtwtypes.h"
#include "xdotc_mznw4aLl.h"

real_T xdotc_mznw4aLl(int32_T n, const real_T x[9], int32_T ix0, const real_T y
                      [9], int32_T iy0)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b08a      	sub	sp, #40	; 0x28
 800c652:	af00      	add	r7, sp, #0
 800c654:	60f8      	str	r0, [r7, #12]
 800c656:	60b9      	str	r1, [r7, #8]
 800c658:	607a      	str	r2, [r7, #4]
 800c65a:	603b      	str	r3, [r7, #0]
  real_T d;
  int32_T k;
  d = 0.0;
 800c65c:	f04f 0200 	mov.w	r2, #0
 800c660:	f04f 0300 	mov.w	r3, #0
 800c664:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (n >= 1) {
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	dd31      	ble.n	800c6d2 <xdotc_mznw4aLl+0x84>
    int32_T ix;
    int32_T iy;
    ix = ix0;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	61bb      	str	r3, [r7, #24]
    iy = iy0;
 800c672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c674:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800c676:	2300      	movs	r3, #0
 800c678:	61fb      	str	r3, [r7, #28]
 800c67a:	e026      	b.n	800c6ca <xdotc_mznw4aLl+0x7c>
      d += x[ix - 1] * y[iy - 1];
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c682:	3b01      	subs	r3, #1
 800c684:	00db      	lsls	r3, r3, #3
 800c686:	68ba      	ldr	r2, [r7, #8]
 800c688:	4413      	add	r3, r2
 800c68a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c694:	3b01      	subs	r3, #1
 800c696:	00db      	lsls	r3, r3, #3
 800c698:	683a      	ldr	r2, [r7, #0]
 800c69a:	4413      	add	r3, r2
 800c69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a0:	f7f3 ff9c 	bl	80005dc <__aeabi_dmul>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c6ac:	f7f3 fde0 	bl	8000270 <__adddf3>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
      ix++;
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	61bb      	str	r3, [r7, #24]
      iy++;
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	61fb      	str	r3, [r7, #28]
 800c6ca:	69fa      	ldr	r2, [r7, #28]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	dbd4      	blt.n	800c67c <xdotc_mznw4aLl+0x2e>
    }
  }

  return d;
 800c6d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c6d6:	ec43 2b17 	vmov	d7, r2, r3
}
 800c6da:	eeb0 0a47 	vmov.f32	s0, s14
 800c6de:	eef0 0a67 	vmov.f32	s1, s15
 800c6e2:	3728      	adds	r7, #40	; 0x28
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <xgemv_NQlWbt2i>:
#include "rtwtypes.h"
#include "xgemv_NQlWbt2i.h"

void xgemv_NQlWbt2i(int32_T m, int32_T n, const real_T A[18], int32_T ia0, const
                    real_T x[18], int32_T ix0, real_T y[3])
{
 800c6e8:	b590      	push	{r4, r7, lr}
 800c6ea:	b08f      	sub	sp, #60	; 0x3c
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
 800c6f4:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d079      	beq.n	800c7f0 <xgemv_NQlWbt2i+0x108>
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d076      	beq.n	800c7f0 <xgemv_NQlWbt2i+0x108>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800c702:	2300      	movs	r3, #0
 800c704:	637b      	str	r3, [r7, #52]	; 0x34
 800c706:	e00c      	b.n	800c722 <xgemv_NQlWbt2i+0x3a>
      y[b_iy] = 0.0;
 800c708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c70a:	00db      	lsls	r3, r3, #3
 800c70c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c70e:	18d1      	adds	r1, r2, r3
 800c710:	f04f 0200 	mov.w	r2, #0
 800c714:	f04f 0300 	mov.w	r3, #0
 800c718:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800c71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c71e:	3301      	adds	r3, #1
 800c720:	637b      	str	r3, [r7, #52]	; 0x34
 800c722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	429a      	cmp	r2, r3
 800c728:	dbee      	blt.n	800c708 <xgemv_NQlWbt2i+0x20>
    }

    b_iy = 0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 6 + ia0;
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	1e5a      	subs	r2, r3, #1
 800c732:	4613      	mov	r3, r2
 800c734:	005b      	lsls	r3, r3, #1
 800c736:	4413      	add	r3, r2
 800c738:	005b      	lsls	r3, r3, #1
 800c73a:	461a      	mov	r2, r3
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	4413      	add	r3, r2
 800c740:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 6) {
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c746:	e04f      	b.n	800c7e8 <xgemv_NQlWbt2i+0x100>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800c748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c74a:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800c74c:	f04f 0200 	mov.w	r2, #0
 800c750:	f04f 0300 	mov.w	r3, #0
 800c754:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800c758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	4413      	add	r3, r2
 800c75e:	3b01      	subs	r3, #1
 800c760:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800c762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c764:	633b      	str	r3, [r7, #48]	; 0x30
 800c766:	e023      	b.n	800c7b0 <xgemv_NQlWbt2i+0xc8>
        c += A[ia - 1] * x[ix - 1];
 800c768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c76e:	3b01      	subs	r3, #1
 800c770:	00db      	lsls	r3, r3, #3
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	4413      	add	r3, r2
 800c776:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c780:	3b01      	subs	r3, #1
 800c782:	00db      	lsls	r3, r3, #3
 800c784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c786:	4413      	add	r3, r2
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	f7f3 ff26 	bl	80005dc <__aeabi_dmul>
 800c790:	4602      	mov	r2, r0
 800c792:	460b      	mov	r3, r1
 800c794:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c798:	f7f3 fd6a 	bl	8000270 <__adddf3>
 800c79c:	4602      	mov	r2, r0
 800c79e:	460b      	mov	r3, r1
 800c7a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	633b      	str	r3, [r7, #48]	; 0x30
 800c7b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	ddd7      	ble.n	800c768 <xgemv_NQlWbt2i+0x80>
      }

      y[b_iy] += c;
 800c7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c7be:	4413      	add	r3, r2
 800c7c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7c6:	00db      	lsls	r3, r3, #3
 800c7c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c7ca:	18d4      	adds	r4, r2, r3
 800c7cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c7d0:	f7f3 fd4e 	bl	8000270 <__adddf3>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800c7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7de:	3301      	adds	r3, #1
 800c7e0:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 6) {
 800c7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e4:	3306      	adds	r3, #6
 800c7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	ddab      	ble.n	800c748 <xgemv_NQlWbt2i+0x60>
    }
  }
}
 800c7f0:	bf00      	nop
 800c7f2:	373c      	adds	r7, #60	; 0x3c
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd90      	pop	{r4, r7, pc}

0800c7f8 <xgemv_fRiR1I1O>:
#include "rtwtypes.h"
#include "xgemv_fRiR1I1O.h"

void xgemv_fRiR1I1O(int32_T m, int32_T n, const real_T A[9], int32_T ia0, const
                    real_T x[9], int32_T ix0, real_T y[3])
{
 800c7f8:	b590      	push	{r4, r7, lr}
 800c7fa:	b08f      	sub	sp, #60	; 0x3c
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
 800c804:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d077      	beq.n	800c8fc <xgemv_fRiR1I1O+0x104>
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d074      	beq.n	800c8fc <xgemv_fRiR1I1O+0x104>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800c812:	2300      	movs	r3, #0
 800c814:	637b      	str	r3, [r7, #52]	; 0x34
 800c816:	e00c      	b.n	800c832 <xgemv_fRiR1I1O+0x3a>
      y[b_iy] = 0.0;
 800c818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c81a:	00db      	lsls	r3, r3, #3
 800c81c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c81e:	18d1      	adds	r1, r2, r3
 800c820:	f04f 0200 	mov.w	r2, #0
 800c824:	f04f 0300 	mov.w	r3, #0
 800c828:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800c82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c82e:	3301      	adds	r3, #1
 800c830:	637b      	str	r3, [r7, #52]	; 0x34
 800c832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	429a      	cmp	r2, r3
 800c838:	dbee      	blt.n	800c818 <xgemv_fRiR1I1O+0x20>
    }

    b_iy = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 3 + ia0;
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	1e5a      	subs	r2, r3, #1
 800c842:	4613      	mov	r3, r2
 800c844:	005b      	lsls	r3, r3, #1
 800c846:	4413      	add	r3, r2
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	4413      	add	r3, r2
 800c84c:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 3) {
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c852:	e04f      	b.n	800c8f4 <xgemv_fRiR1I1O+0xfc>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800c854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c856:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800c858:	f04f 0200 	mov.w	r2, #0
 800c85c:	f04f 0300 	mov.w	r3, #0
 800c860:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800c864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	4413      	add	r3, r2
 800c86a:	3b01      	subs	r3, #1
 800c86c:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800c86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c870:	633b      	str	r3, [r7, #48]	; 0x30
 800c872:	e023      	b.n	800c8bc <xgemv_fRiR1I1O+0xc4>
        c += A[ia - 1] * x[ix - 1];
 800c874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c876:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c87a:	3b01      	subs	r3, #1
 800c87c:	00db      	lsls	r3, r3, #3
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	4413      	add	r3, r2
 800c882:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c88c:	3b01      	subs	r3, #1
 800c88e:	00db      	lsls	r3, r3, #3
 800c890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c892:	4413      	add	r3, r2
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	f7f3 fea0 	bl	80005dc <__aeabi_dmul>
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c8a4:	f7f3 fce4 	bl	8000270 <__adddf3>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	633b      	str	r3, [r7, #48]	; 0x30
 800c8bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	ddd7      	ble.n	800c874 <xgemv_fRiR1I1O+0x7c>
      }

      y[b_iy] += c;
 800c8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8ca:	4413      	add	r3, r2
 800c8cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8d2:	00db      	lsls	r3, r3, #3
 800c8d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8d6:	18d4      	adds	r4, r2, r3
 800c8d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c8dc:	f7f3 fcc8 	bl	8000270 <__adddf3>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800c8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 3) {
 800c8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f0:	3303      	adds	r3, #3
 800c8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	ddab      	ble.n	800c854 <xgemv_fRiR1I1O+0x5c>
    }
  }
}
 800c8fc:	bf00      	nop
 800c8fe:	373c      	adds	r7, #60	; 0x3c
 800c900:	46bd      	mov	sp, r7
 800c902:	bd90      	pop	{r4, r7, pc}

0800c904 <xgerc_R09LiDgJ>:
#include "rtwtypes.h"
#include "xgerc_R09LiDgJ.h"

void xgerc_R09LiDgJ(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[18], int32_T ia0)
{
 800c904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c906:	b091      	sub	sp, #68	; 0x44
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6178      	str	r0, [r7, #20]
 800c90c:	6139      	str	r1, [r7, #16]
 800c90e:	ed87 0b02 	vstr	d0, [r7, #8]
 800c912:	607a      	str	r2, [r7, #4]
 800c914:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800c916:	f04f 0200 	mov.w	r2, #0
 800c91a:	f04f 0300 	mov.w	r3, #0
 800c91e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c922:	f7f4 f8c3 	bl	8000aac <__aeabi_dcmpeq>
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d000      	beq.n	800c92e <xgerc_R09LiDgJ+0x2a>

      jy++;
      jA += 6;
    }
  }
}
 800c92c:	e069      	b.n	800ca02 <xgerc_R09LiDgJ+0xfe>
    jA = ia0 - 1;
 800c92e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c930:	3b01      	subs	r3, #1
 800c932:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800c934:	2300      	movs	r3, #0
 800c936:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800c938:	2300      	movs	r3, #0
 800c93a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c93c:	e05d      	b.n	800c9fa <xgerc_R09LiDgJ+0xf6>
      if (y[jy] != 0.0) {
 800c93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c940:	00db      	lsls	r3, r3, #3
 800c942:	683a      	ldr	r2, [r7, #0]
 800c944:	4413      	add	r3, r2
 800c946:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c94a:	f04f 0200 	mov.w	r2, #0
 800c94e:	f04f 0300 	mov.w	r3, #0
 800c952:	f7f4 f8ab 	bl	8000aac <__aeabi_dcmpeq>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d145      	bne.n	800c9e8 <xgerc_R09LiDgJ+0xe4>
        temp = y[jy] * alpha1;
 800c95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c95e:	00db      	lsls	r3, r3, #3
 800c960:	683a      	ldr	r2, [r7, #0]
 800c962:	4413      	add	r3, r2
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c96c:	f7f3 fe36 	bl	80005dc <__aeabi_dmul>
 800c970:	4602      	mov	r2, r0
 800c972:	460b      	mov	r3, r1
 800c974:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800c97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97e:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800c980:	697a      	ldr	r2, [r7, #20]
 800c982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c984:	4413      	add	r3, r2
 800c986:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800c988:	e02a      	b.n	800c9e0 <xgerc_R09LiDgJ+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800c98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98c:	00db      	lsls	r3, r3, #3
 800c98e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c990:	4413      	add	r3, r2
 800c992:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c998:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c99c:	3b01      	subs	r3, #1
 800c99e:	00db      	lsls	r3, r3, #3
 800c9a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c9a2:	4413      	add	r3, r2
 800c9a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c9ac:	f7f3 fe16 	bl	80005dc <__aeabi_dmul>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	4610      	mov	r0, r2
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ba:	00db      	lsls	r3, r3, #3
 800c9bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c9be:	18d6      	adds	r6, r2, r3
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	4629      	mov	r1, r5
 800c9c8:	f7f3 fc52 	bl	8000270 <__adddf3>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800c9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800c9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9dc:	3301      	adds	r3, #1
 800c9de:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800c9e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	dbd0      	blt.n	800c98a <xgerc_R09LiDgJ+0x86>
      jy++;
 800c9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 6;
 800c9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f0:	3306      	adds	r3, #6
 800c9f2:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800c9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	db9d      	blt.n	800c93e <xgerc_R09LiDgJ+0x3a>
}
 800ca02:	bf00      	nop
 800ca04:	3744      	adds	r7, #68	; 0x44
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca0a <xgerc_tNNiazQU>:
#include "rtwtypes.h"
#include "xgerc_tNNiazQU.h"

void xgerc_tNNiazQU(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[9], int32_T ia0)
{
 800ca0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca0c:	b091      	sub	sp, #68	; 0x44
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6178      	str	r0, [r7, #20]
 800ca12:	6139      	str	r1, [r7, #16]
 800ca14:	ed87 0b02 	vstr	d0, [r7, #8]
 800ca18:	607a      	str	r2, [r7, #4]
 800ca1a:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800ca1c:	f04f 0200 	mov.w	r2, #0
 800ca20:	f04f 0300 	mov.w	r3, #0
 800ca24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca28:	f7f4 f840 	bl	8000aac <__aeabi_dcmpeq>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d000      	beq.n	800ca34 <xgerc_tNNiazQU+0x2a>

      jy++;
      jA += 3;
    }
  }
}
 800ca32:	e069      	b.n	800cb08 <xgerc_tNNiazQU+0xfe>
    jA = ia0 - 1;
 800ca34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca36:	3b01      	subs	r3, #1
 800ca38:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800ca3e:	2300      	movs	r3, #0
 800ca40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca42:	e05d      	b.n	800cb00 <xgerc_tNNiazQU+0xf6>
      if (y[jy] != 0.0) {
 800ca44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca46:	00db      	lsls	r3, r3, #3
 800ca48:	683a      	ldr	r2, [r7, #0]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca50:	f04f 0200 	mov.w	r2, #0
 800ca54:	f04f 0300 	mov.w	r3, #0
 800ca58:	f7f4 f828 	bl	8000aac <__aeabi_dcmpeq>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d145      	bne.n	800caee <xgerc_tNNiazQU+0xe4>
        temp = y[jy] * alpha1;
 800ca62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca64:	00db      	lsls	r3, r3, #3
 800ca66:	683a      	ldr	r2, [r7, #0]
 800ca68:	4413      	add	r3, r2
 800ca6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca72:	f7f3 fdb3 	bl	80005dc <__aeabi_dmul>
 800ca76:	4602      	mov	r2, r0
 800ca78:	460b      	mov	r3, r1
 800ca7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800ca82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca84:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800ca86:	697a      	ldr	r2, [r7, #20]
 800ca88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8a:	4413      	add	r3, r2
 800ca8c:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800ca8e:	e02a      	b.n	800cae6 <xgerc_tNNiazQU+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800ca90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca92:	00db      	lsls	r3, r3, #3
 800ca94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca96:	4413      	add	r3, r2
 800ca98:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ca9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800caa2:	3b01      	subs	r3, #1
 800caa4:	00db      	lsls	r3, r3, #3
 800caa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800caa8:	4413      	add	r3, r2
 800caaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800caae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cab2:	f7f3 fd93 	bl	80005dc <__aeabi_dmul>
 800cab6:	4602      	mov	r2, r0
 800cab8:	460b      	mov	r3, r1
 800caba:	4610      	mov	r0, r2
 800cabc:	4619      	mov	r1, r3
 800cabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac0:	00db      	lsls	r3, r3, #3
 800cac2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cac4:	18d6      	adds	r6, r2, r3
 800cac6:	4602      	mov	r2, r0
 800cac8:	460b      	mov	r3, r1
 800caca:	4620      	mov	r0, r4
 800cacc:	4629      	mov	r1, r5
 800cace:	f7f3 fbcf 	bl	8000270 <__adddf3>
 800cad2:	4602      	mov	r2, r0
 800cad4:	460b      	mov	r3, r1
 800cad6:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cadc:	3301      	adds	r3, #1
 800cade:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800cae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae2:	3301      	adds	r3, #1
 800cae4:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800cae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	429a      	cmp	r2, r3
 800caec:	dbd0      	blt.n	800ca90 <xgerc_tNNiazQU+0x86>
      jy++;
 800caee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf0:	3301      	adds	r3, #1
 800caf2:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 3;
 800caf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf6:	3303      	adds	r3, #3
 800caf8:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800cafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cafc:	3301      	adds	r3, #1
 800cafe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	db9d      	blt.n	800ca44 <xgerc_tNNiazQU+0x3a>
}
 800cb08:	bf00      	nop
 800cb0a:	3744      	adds	r7, #68	; 0x44
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb10 <xnrm2_7bm34mDQ>:
#include "rtwtypes.h"
#include "xnrm2_7bm34mDQ.h"
#include <math.h>

real_T xnrm2_7bm34mDQ(int32_T n, const real_T x[6], int32_T ix0)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b092      	sub	sp, #72	; 0x48
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800cb1c:	f04f 0200 	mov.w	r2, #0
 800cb20:	f04f 0300 	mov.w	r3, #0
 800cb24:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f340 8090 	ble.w	800cc50 <xnrm2_7bm34mDQ+0x140>
    if (n == 1) {
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d10e      	bne.n	800cb54 <xnrm2_7bm34mDQ+0x44>
      y = fabs(x[ix0 - 1]);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800cb3c:	3b01      	subs	r3, #1
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	4413      	add	r3, r2
 800cb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb48:	4611      	mov	r1, r2
 800cb4a:	6439      	str	r1, [r7, #64]	; 0x40
 800cb4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb50:	647b      	str	r3, [r7, #68]	; 0x44
 800cb52:	e07d      	b.n	800cc50 <xnrm2_7bm34mDQ+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800cb54:	f04f 0200 	mov.w	r2, #0
 800cb58:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800cb5c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	4413      	add	r3, r2
 800cb66:	3b01      	subs	r3, #1
 800cb68:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb6e:	e05d      	b.n	800cc2c <xnrm2_7bm34mDQ+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800cb70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb72:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800cb76:	3b01      	subs	r3, #1
 800cb78:	00db      	lsls	r3, r3, #3
 800cb7a:	68ba      	ldr	r2, [r7, #8]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb82:	4611      	mov	r1, r2
 800cb84:	6239      	str	r1, [r7, #32]
 800cb86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb8a:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800cb8c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cb90:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cb94:	f7f3 ffb2 	bl	8000afc <__aeabi_dcmpgt>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d029      	beq.n	800cbf2 <xnrm2_7bm34mDQ+0xe2>
          real_T t;
          t = scale / absxk;
 800cb9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cba2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cba6:	f7f3 fe43 	bl	8000830 <__aeabi_ddiv>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	460b      	mov	r3, r1
 800cbae:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800cbb2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cbb6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800cbba:	f7f3 fd0f 	bl	80005dc <__aeabi_dmul>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	4610      	mov	r0, r2
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cbca:	f7f3 fd07 	bl	80005dc <__aeabi_dmul>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	4610      	mov	r0, r2
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	f04f 0200 	mov.w	r2, #0
 800cbda:	4b23      	ldr	r3, [pc, #140]	; (800cc68 <xnrm2_7bm34mDQ+0x158>)
 800cbdc:	f7f3 fb48 	bl	8000270 <__adddf3>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800cbe8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cbec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800cbf0:	e019      	b.n	800cc26 <xnrm2_7bm34mDQ+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800cbf2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cbf6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cbfa:	f7f3 fe19 	bl	8000830 <__aeabi_ddiv>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800cc06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cc0e:	f7f3 fce5 	bl	80005dc <__aeabi_dmul>
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800cc1a:	f7f3 fb29 	bl	8000270 <__adddf3>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	460b      	mov	r3, r1
 800cc22:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800cc26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc28:	3301      	adds	r3, #1
 800cc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc30:	429a      	cmp	r2, r3
 800cc32:	dd9d      	ble.n	800cb70 <xnrm2_7bm34mDQ+0x60>
        }
      }

      y = scale * sqrt(y);
 800cc34:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800cc38:	f009 f940 	bl	8015ebc <sqrt>
 800cc3c:	ec53 2b10 	vmov	r2, r3, d0
 800cc40:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cc44:	f7f3 fcca 	bl	80005dc <__aeabi_dmul>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800cc50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cc54:	ec43 2b17 	vmov	d7, r2, r3
}
 800cc58:	eeb0 0a47 	vmov.f32	s0, s14
 800cc5c:	eef0 0a67 	vmov.f32	s1, s15
 800cc60:	3748      	adds	r7, #72	; 0x48
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	3ff00000 	.word	0x3ff00000

0800cc6c <xnrm2_Mnmxg9YT>:
#include "rtwtypes.h"
#include "xnrm2_Mnmxg9YT.h"
#include <math.h>

real_T xnrm2_Mnmxg9YT(int32_T n, const real_T x[2], int32_T ix0)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b092      	sub	sp, #72	; 0x48
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800cc78:	f04f 0200 	mov.w	r2, #0
 800cc7c:	f04f 0300 	mov.w	r3, #0
 800cc80:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f340 8090 	ble.w	800cdac <xnrm2_Mnmxg9YT+0x140>
    if (n == 1) {
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d10e      	bne.n	800ccb0 <xnrm2_Mnmxg9YT+0x44>
      y = fabs(x[ix0 - 1]);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	00db      	lsls	r3, r3, #3
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	4413      	add	r3, r2
 800cca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca4:	4611      	mov	r1, r2
 800cca6:	6439      	str	r1, [r7, #64]	; 0x40
 800cca8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ccac:	647b      	str	r3, [r7, #68]	; 0x44
 800ccae:	e07d      	b.n	800cdac <xnrm2_Mnmxg9YT+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800ccb0:	f04f 0200 	mov.w	r2, #0
 800ccb4:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800ccb8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	3b01      	subs	r3, #1
 800ccc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccca:	e05d      	b.n	800cd88 <xnrm2_Mnmxg9YT+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800cccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccce:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ccd2:	3b01      	subs	r3, #1
 800ccd4:	00db      	lsls	r3, r3, #3
 800ccd6:	68ba      	ldr	r2, [r7, #8]
 800ccd8:	4413      	add	r3, r2
 800ccda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccde:	4611      	mov	r1, r2
 800cce0:	6239      	str	r1, [r7, #32]
 800cce2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cce6:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800cce8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ccec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ccf0:	f7f3 ff04 	bl	8000afc <__aeabi_dcmpgt>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d029      	beq.n	800cd4e <xnrm2_Mnmxg9YT+0xe2>
          real_T t;
          t = scale / absxk;
 800ccfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ccfe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cd02:	f7f3 fd95 	bl	8000830 <__aeabi_ddiv>
 800cd06:	4602      	mov	r2, r0
 800cd08:	460b      	mov	r3, r1
 800cd0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800cd0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cd12:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800cd16:	f7f3 fc61 	bl	80005dc <__aeabi_dmul>
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	4610      	mov	r0, r2
 800cd20:	4619      	mov	r1, r3
 800cd22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cd26:	f7f3 fc59 	bl	80005dc <__aeabi_dmul>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	4610      	mov	r0, r2
 800cd30:	4619      	mov	r1, r3
 800cd32:	f04f 0200 	mov.w	r2, #0
 800cd36:	4b23      	ldr	r3, [pc, #140]	; (800cdc4 <xnrm2_Mnmxg9YT+0x158>)
 800cd38:	f7f3 fa9a 	bl	8000270 <__adddf3>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	460b      	mov	r3, r1
 800cd40:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800cd44:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cd48:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800cd4c:	e019      	b.n	800cd82 <xnrm2_Mnmxg9YT+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800cd4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cd52:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cd56:	f7f3 fd6b 	bl	8000830 <__aeabi_ddiv>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800cd62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cd66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cd6a:	f7f3 fc37 	bl	80005dc <__aeabi_dmul>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	460b      	mov	r3, r1
 800cd72:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800cd76:	f7f3 fa7b 	bl	8000270 <__adddf3>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800cd82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd84:	3301      	adds	r3, #1
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	dd9d      	ble.n	800cccc <xnrm2_Mnmxg9YT+0x60>
        }
      }

      y = scale * sqrt(y);
 800cd90:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800cd94:	f009 f892 	bl	8015ebc <sqrt>
 800cd98:	ec53 2b10 	vmov	r2, r3, d0
 800cd9c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cda0:	f7f3 fc1c 	bl	80005dc <__aeabi_dmul>
 800cda4:	4602      	mov	r2, r0
 800cda6:	460b      	mov	r3, r1
 800cda8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800cdac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cdb0:	ec43 2b17 	vmov	d7, r2, r3
}
 800cdb4:	eeb0 0a47 	vmov.f32	s0, s14
 800cdb8:	eef0 0a67 	vmov.f32	s1, s15
 800cdbc:	3748      	adds	r7, #72	; 0x48
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	3ff00000 	.word	0x3ff00000

0800cdc8 <xnrm2_Rlk0oxWw>:
#include "rtwtypes.h"
#include "xnrm2_Rlk0oxWw.h"
#include <math.h>

real_T xnrm2_Rlk0oxWw(int32_T n, const real_T x[3], int32_T ix0)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b092      	sub	sp, #72	; 0x48
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800cdd4:	f04f 0200 	mov.w	r2, #0
 800cdd8:	f04f 0300 	mov.w	r3, #0
 800cddc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f340 8090 	ble.w	800cf08 <xnrm2_Rlk0oxWw+0x140>
    if (n == 1) {
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d10e      	bne.n	800ce0c <xnrm2_Rlk0oxWw+0x44>
      y = fabs(x[ix0 - 1]);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800cdf4:	3b01      	subs	r3, #1
 800cdf6:	00db      	lsls	r3, r3, #3
 800cdf8:	68ba      	ldr	r2, [r7, #8]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce00:	4611      	mov	r1, r2
 800ce02:	6439      	str	r1, [r7, #64]	; 0x40
 800ce04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce08:	647b      	str	r3, [r7, #68]	; 0x44
 800ce0a:	e07d      	b.n	800cf08 <xnrm2_Rlk0oxWw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800ce0c:	f04f 0200 	mov.w	r2, #0
 800ce10:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800ce14:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce26:	e05d      	b.n	800cee4 <xnrm2_Rlk0oxWw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800ce28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce2a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	00db      	lsls	r3, r3, #3
 800ce32:	68ba      	ldr	r2, [r7, #8]
 800ce34:	4413      	add	r3, r2
 800ce36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3a:	4611      	mov	r1, r2
 800ce3c:	6239      	str	r1, [r7, #32]
 800ce3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce42:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800ce44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ce48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ce4c:	f7f3 fe56 	bl	8000afc <__aeabi_dcmpgt>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d029      	beq.n	800ceaa <xnrm2_Rlk0oxWw+0xe2>
          real_T t;
          t = scale / absxk;
 800ce56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ce5a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ce5e:	f7f3 fce7 	bl	8000830 <__aeabi_ddiv>
 800ce62:	4602      	mov	r2, r0
 800ce64:	460b      	mov	r3, r1
 800ce66:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800ce6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ce6e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ce72:	f7f3 fbb3 	bl	80005dc <__aeabi_dmul>
 800ce76:	4602      	mov	r2, r0
 800ce78:	460b      	mov	r3, r1
 800ce7a:	4610      	mov	r0, r2
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ce82:	f7f3 fbab 	bl	80005dc <__aeabi_dmul>
 800ce86:	4602      	mov	r2, r0
 800ce88:	460b      	mov	r3, r1
 800ce8a:	4610      	mov	r0, r2
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	f04f 0200 	mov.w	r2, #0
 800ce92:	4b23      	ldr	r3, [pc, #140]	; (800cf20 <xnrm2_Rlk0oxWw+0x158>)
 800ce94:	f7f3 f9ec 	bl	8000270 <__adddf3>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800cea0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cea4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800cea8:	e019      	b.n	800cede <xnrm2_Rlk0oxWw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800ceaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ceae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ceb2:	f7f3 fcbd 	bl	8000830 <__aeabi_ddiv>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	460b      	mov	r3, r1
 800ceba:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800cebe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cec2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cec6:	f7f3 fb89 	bl	80005dc <__aeabi_dmul>
 800ceca:	4602      	mov	r2, r0
 800cecc:	460b      	mov	r3, r1
 800cece:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ced2:	f7f3 f9cd 	bl	8000270 <__adddf3>
 800ced6:	4602      	mov	r2, r0
 800ced8:	460b      	mov	r3, r1
 800ceda:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800cede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cee0:	3301      	adds	r3, #1
 800cee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee8:	429a      	cmp	r2, r3
 800ceea:	dd9d      	ble.n	800ce28 <xnrm2_Rlk0oxWw+0x60>
        }
      }

      y = scale * sqrt(y);
 800ceec:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800cef0:	f008 ffe4 	bl	8015ebc <sqrt>
 800cef4:	ec53 2b10 	vmov	r2, r3, d0
 800cef8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cefc:	f7f3 fb6e 	bl	80005dc <__aeabi_dmul>
 800cf00:	4602      	mov	r2, r0
 800cf02:	460b      	mov	r3, r1
 800cf04:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800cf08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cf0c:	ec43 2b17 	vmov	d7, r2, r3
}
 800cf10:	eeb0 0a47 	vmov.f32	s0, s14
 800cf14:	eef0 0a67 	vmov.f32	s1, s15
 800cf18:	3748      	adds	r7, #72	; 0x48
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	3ff00000 	.word	0x3ff00000

0800cf24 <xnrm2_nLdASVZH>:
#include "rtwtypes.h"
#include "xnrm2_nLdASVZH.h"
#include <math.h>

real_T xnrm2_nLdASVZH(int32_T n, const real_T x[18], int32_T ix0)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b092      	sub	sp, #72	; 0x48
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800cf30:	f04f 0200 	mov.w	r2, #0
 800cf34:	f04f 0300 	mov.w	r3, #0
 800cf38:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f340 8090 	ble.w	800d064 <xnrm2_nLdASVZH+0x140>
    if (n == 1) {
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d10e      	bne.n	800cf68 <xnrm2_nLdASVZH+0x44>
      y = fabs(x[ix0 - 1]);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800cf50:	3b01      	subs	r3, #1
 800cf52:	00db      	lsls	r3, r3, #3
 800cf54:	68ba      	ldr	r2, [r7, #8]
 800cf56:	4413      	add	r3, r2
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	4611      	mov	r1, r2
 800cf5e:	6439      	str	r1, [r7, #64]	; 0x40
 800cf60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf64:	647b      	str	r3, [r7, #68]	; 0x44
 800cf66:	e07d      	b.n	800d064 <xnrm2_nLdASVZH+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800cf68:	f04f 0200 	mov.w	r2, #0
 800cf6c:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800cf70:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	4413      	add	r3, r2
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf82:	e05d      	b.n	800d040 <xnrm2_nLdASVZH+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800cf84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf86:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	00db      	lsls	r3, r3, #3
 800cf8e:	68ba      	ldr	r2, [r7, #8]
 800cf90:	4413      	add	r3, r2
 800cf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf96:	4611      	mov	r1, r2
 800cf98:	6239      	str	r1, [r7, #32]
 800cf9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf9e:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800cfa0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cfa4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cfa8:	f7f3 fda8 	bl	8000afc <__aeabi_dcmpgt>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d029      	beq.n	800d006 <xnrm2_nLdASVZH+0xe2>
          real_T t;
          t = scale / absxk;
 800cfb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cfb6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cfba:	f7f3 fc39 	bl	8000830 <__aeabi_ddiv>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800cfc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cfca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800cfce:	f7f3 fb05 	bl	80005dc <__aeabi_dmul>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	4610      	mov	r0, r2
 800cfd8:	4619      	mov	r1, r3
 800cfda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cfde:	f7f3 fafd 	bl	80005dc <__aeabi_dmul>
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	4610      	mov	r0, r2
 800cfe8:	4619      	mov	r1, r3
 800cfea:	f04f 0200 	mov.w	r2, #0
 800cfee:	4b23      	ldr	r3, [pc, #140]	; (800d07c <xnrm2_nLdASVZH+0x158>)
 800cff0:	f7f3 f93e 	bl	8000270 <__adddf3>
 800cff4:	4602      	mov	r2, r0
 800cff6:	460b      	mov	r3, r1
 800cff8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800cffc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d000:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d004:	e019      	b.n	800d03a <xnrm2_nLdASVZH+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800d006:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d00a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d00e:	f7f3 fc0f 	bl	8000830 <__aeabi_ddiv>
 800d012:	4602      	mov	r2, r0
 800d014:	460b      	mov	r3, r1
 800d016:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800d01a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d01e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d022:	f7f3 fadb 	bl	80005dc <__aeabi_dmul>
 800d026:	4602      	mov	r2, r0
 800d028:	460b      	mov	r3, r1
 800d02a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d02e:	f7f3 f91f 	bl	8000270 <__adddf3>
 800d032:	4602      	mov	r2, r0
 800d034:	460b      	mov	r3, r1
 800d036:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800d03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d03c:	3301      	adds	r3, #1
 800d03e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d040:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d044:	429a      	cmp	r2, r3
 800d046:	dd9d      	ble.n	800cf84 <xnrm2_nLdASVZH+0x60>
        }
      }

      y = scale * sqrt(y);
 800d048:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800d04c:	f008 ff36 	bl	8015ebc <sqrt>
 800d050:	ec53 2b10 	vmov	r2, r3, d0
 800d054:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d058:	f7f3 fac0 	bl	80005dc <__aeabi_dmul>
 800d05c:	4602      	mov	r2, r0
 800d05e:	460b      	mov	r3, r1
 800d060:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800d064:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d068:	ec43 2b17 	vmov	d7, r2, r3
}
 800d06c:	eeb0 0a47 	vmov.f32	s0, s14
 800d070:	eef0 0a67 	vmov.f32	s1, s15
 800d074:	3748      	adds	r7, #72	; 0x48
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}
 800d07a:	bf00      	nop
 800d07c:	3ff00000 	.word	0x3ff00000

0800d080 <xnrm2_xDOlDEtw>:
#include "rtwtypes.h"
#include "xnrm2_xDOlDEtw.h"
#include <math.h>

real_T xnrm2_xDOlDEtw(int32_T n, const real_T x[9], int32_T ix0)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b092      	sub	sp, #72	; 0x48
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800d08c:	f04f 0200 	mov.w	r2, #0
 800d090:	f04f 0300 	mov.w	r3, #0
 800d094:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f340 8090 	ble.w	800d1c0 <xnrm2_xDOlDEtw+0x140>
    if (n == 1) {
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d10e      	bne.n	800d0c4 <xnrm2_xDOlDEtw+0x44>
      y = fabs(x[ix0 - 1]);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d0ac:	3b01      	subs	r3, #1
 800d0ae:	00db      	lsls	r3, r3, #3
 800d0b0:	68ba      	ldr	r2, [r7, #8]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b8:	4611      	mov	r1, r2
 800d0ba:	6439      	str	r1, [r7, #64]	; 0x40
 800d0bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0c0:	647b      	str	r3, [r7, #68]	; 0x44
 800d0c2:	e07d      	b.n	800d1c0 <xnrm2_xDOlDEtw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800d0c4:	f04f 0200 	mov.w	r2, #0
 800d0c8:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800d0cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0de:	e05d      	b.n	800d19c <xnrm2_xDOlDEtw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800d0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0e2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d0e6:	3b01      	subs	r3, #1
 800d0e8:	00db      	lsls	r3, r3, #3
 800d0ea:	68ba      	ldr	r2, [r7, #8]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f2:	4611      	mov	r1, r2
 800d0f4:	6239      	str	r1, [r7, #32]
 800d0f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0fa:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800d0fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d100:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d104:	f7f3 fcfa 	bl	8000afc <__aeabi_dcmpgt>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d029      	beq.n	800d162 <xnrm2_xDOlDEtw+0xe2>
          real_T t;
          t = scale / absxk;
 800d10e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d112:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d116:	f7f3 fb8b 	bl	8000830 <__aeabi_ddiv>
 800d11a:	4602      	mov	r2, r0
 800d11c:	460b      	mov	r3, r1
 800d11e:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800d122:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d126:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d12a:	f7f3 fa57 	bl	80005dc <__aeabi_dmul>
 800d12e:	4602      	mov	r2, r0
 800d130:	460b      	mov	r3, r1
 800d132:	4610      	mov	r0, r2
 800d134:	4619      	mov	r1, r3
 800d136:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d13a:	f7f3 fa4f 	bl	80005dc <__aeabi_dmul>
 800d13e:	4602      	mov	r2, r0
 800d140:	460b      	mov	r3, r1
 800d142:	4610      	mov	r0, r2
 800d144:	4619      	mov	r1, r3
 800d146:	f04f 0200 	mov.w	r2, #0
 800d14a:	4b23      	ldr	r3, [pc, #140]	; (800d1d8 <xnrm2_xDOlDEtw+0x158>)
 800d14c:	f7f3 f890 	bl	8000270 <__adddf3>
 800d150:	4602      	mov	r2, r0
 800d152:	460b      	mov	r3, r1
 800d154:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800d158:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d15c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d160:	e019      	b.n	800d196 <xnrm2_xDOlDEtw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800d162:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d166:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d16a:	f7f3 fb61 	bl	8000830 <__aeabi_ddiv>
 800d16e:	4602      	mov	r2, r0
 800d170:	460b      	mov	r3, r1
 800d172:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800d176:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d17a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d17e:	f7f3 fa2d 	bl	80005dc <__aeabi_dmul>
 800d182:	4602      	mov	r2, r0
 800d184:	460b      	mov	r3, r1
 800d186:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d18a:	f7f3 f871 	bl	8000270 <__adddf3>
 800d18e:	4602      	mov	r2, r0
 800d190:	460b      	mov	r3, r1
 800d192:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800d196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d198:	3301      	adds	r3, #1
 800d19a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d19c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	dd9d      	ble.n	800d0e0 <xnrm2_xDOlDEtw+0x60>
        }
      }

      y = scale * sqrt(y);
 800d1a4:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800d1a8:	f008 fe88 	bl	8015ebc <sqrt>
 800d1ac:	ec53 2b10 	vmov	r2, r3, d0
 800d1b0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d1b4:	f7f3 fa12 	bl	80005dc <__aeabi_dmul>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800d1c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d1c4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d1c8:	eeb0 0a47 	vmov.f32	s0, s14
 800d1cc:	eef0 0a67 	vmov.f32	s1, s15
 800d1d0:	3748      	adds	r7, #72	; 0x48
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	3ff00000 	.word	0x3ff00000

0800d1dc <xrot_i7f01JoJ>:
#include "rtwtypes.h"
#include "xrot_i7f01JoJ.h"

void xrot_i7f01JoJ(real_T x[9], int32_T ix0, int32_T iy0, real_T c, real_T s)
{
 800d1dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d1e0:	b08c      	sub	sp, #48	; 0x30
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	61f8      	str	r0, [r7, #28]
 800d1e6:	61b9      	str	r1, [r7, #24]
 800d1e8:	617a      	str	r2, [r7, #20]
 800d1ea:	ed87 0b02 	vstr	d0, [r7, #8]
 800d1ee:	ed87 1b00 	vstr	d1, [r7]
  real_T temp;
  real_T temp_tmp;
  temp = x[iy0 - 1];
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	00db      	lsls	r3, r3, #3
 800d1fc:	69fa      	ldr	r2, [r7, #28]
 800d1fe:	4413      	add	r3, r2
 800d200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d204:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 - 1];
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d20e:	3b01      	subs	r3, #1
 800d210:	00db      	lsls	r3, r3, #3
 800d212:	69fa      	ldr	r2, [r7, #28]
 800d214:	4413      	add	r3, r2
 800d216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 - 1] = temp * c - temp_tmp * s;
 800d21e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d222:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d226:	f7f3 f9d9 	bl	80005dc <__aeabi_dmul>
 800d22a:	4602      	mov	r2, r0
 800d22c:	460b      	mov	r3, r1
 800d22e:	4690      	mov	r8, r2
 800d230:	4699      	mov	r9, r3
 800d232:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d236:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d23a:	f7f3 f9cf 	bl	80005dc <__aeabi_dmul>
 800d23e:	4602      	mov	r2, r0
 800d240:	460b      	mov	r3, r1
 800d242:	4610      	mov	r0, r2
 800d244:	4619      	mov	r1, r3
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d24c:	3b01      	subs	r3, #1
 800d24e:	00db      	lsls	r3, r3, #3
 800d250:	69fa      	ldr	r2, [r7, #28]
 800d252:	18d4      	adds	r4, r2, r3
 800d254:	4602      	mov	r2, r0
 800d256:	460b      	mov	r3, r1
 800d258:	4640      	mov	r0, r8
 800d25a:	4649      	mov	r1, r9
 800d25c:	f7f3 f806 	bl	800026c <__aeabi_dsub>
 800d260:	4602      	mov	r2, r0
 800d262:	460b      	mov	r3, r1
 800d264:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 - 1] = temp_tmp * c + temp * s;
 800d268:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d26c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d270:	f7f3 f9b4 	bl	80005dc <__aeabi_dmul>
 800d274:	4602      	mov	r2, r0
 800d276:	460b      	mov	r3, r1
 800d278:	4690      	mov	r8, r2
 800d27a:	4699      	mov	r9, r3
 800d27c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d280:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d284:	f7f3 f9aa 	bl	80005dc <__aeabi_dmul>
 800d288:	4602      	mov	r2, r0
 800d28a:	460b      	mov	r3, r1
 800d28c:	4610      	mov	r0, r2
 800d28e:	4619      	mov	r1, r3
 800d290:	69bb      	ldr	r3, [r7, #24]
 800d292:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d296:	3b01      	subs	r3, #1
 800d298:	00db      	lsls	r3, r3, #3
 800d29a:	69fa      	ldr	r2, [r7, #28]
 800d29c:	18d4      	adds	r4, r2, r3
 800d29e:	4602      	mov	r2, r0
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	4640      	mov	r0, r8
 800d2a4:	4649      	mov	r1, r9
 800d2a6:	f7f2 ffe3 	bl	8000270 <__adddf3>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	e9c4 2300 	strd	r2, r3, [r4]
  temp = x[ix0] * c + x[iy0] * s;
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	00db      	lsls	r3, r3, #3
 800d2b6:	69fa      	ldr	r2, [r7, #28]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d2be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d2c2:	f7f3 f98b 	bl	80005dc <__aeabi_dmul>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	4614      	mov	r4, r2
 800d2cc:	461d      	mov	r5, r3
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	00db      	lsls	r3, r3, #3
 800d2d2:	69fa      	ldr	r2, [r7, #28]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d2da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2de:	f7f3 f97d 	bl	80005dc <__aeabi_dmul>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	4629      	mov	r1, r5
 800d2ea:	f7f2 ffc1 	bl	8000270 <__adddf3>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  x[iy0] = x[iy0] * c - x[ix0] * s;
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	00db      	lsls	r3, r3, #3
 800d2fa:	69fa      	ldr	r2, [r7, #28]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d306:	f7f3 f969 	bl	80005dc <__aeabi_dmul>
 800d30a:	4602      	mov	r2, r0
 800d30c:	460b      	mov	r3, r1
 800d30e:	4690      	mov	r8, r2
 800d310:	4699      	mov	r9, r3
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	00db      	lsls	r3, r3, #3
 800d316:	69fa      	ldr	r2, [r7, #28]
 800d318:	4413      	add	r3, r2
 800d31a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d31e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d322:	f7f3 f95b 	bl	80005dc <__aeabi_dmul>
 800d326:	4602      	mov	r2, r0
 800d328:	460b      	mov	r3, r1
 800d32a:	4610      	mov	r0, r2
 800d32c:	4619      	mov	r1, r3
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	00db      	lsls	r3, r3, #3
 800d332:	69fa      	ldr	r2, [r7, #28]
 800d334:	18d4      	adds	r4, r2, r3
 800d336:	4602      	mov	r2, r0
 800d338:	460b      	mov	r3, r1
 800d33a:	4640      	mov	r0, r8
 800d33c:	4649      	mov	r1, r9
 800d33e:	f7f2 ff95 	bl	800026c <__aeabi_dsub>
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0] = temp;
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	00db      	lsls	r3, r3, #3
 800d34e:	69fa      	ldr	r2, [r7, #28]
 800d350:	18d1      	adds	r1, r2, r3
 800d352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d356:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[iy0 + 1];
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	3301      	adds	r3, #1
 800d35e:	00db      	lsls	r3, r3, #3
 800d360:	69fa      	ldr	r2, [r7, #28]
 800d362:	4413      	add	r3, r2
 800d364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d368:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 + 1];
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	3301      	adds	r3, #1
 800d370:	00db      	lsls	r3, r3, #3
 800d372:	69fa      	ldr	r2, [r7, #28]
 800d374:	4413      	add	r3, r2
 800d376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 + 1] = temp * c - temp_tmp * s;
 800d37e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d382:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d386:	f7f3 f929 	bl	80005dc <__aeabi_dmul>
 800d38a:	4602      	mov	r2, r0
 800d38c:	460b      	mov	r3, r1
 800d38e:	4690      	mov	r8, r2
 800d390:	4699      	mov	r9, r3
 800d392:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d396:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d39a:	f7f3 f91f 	bl	80005dc <__aeabi_dmul>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	4610      	mov	r0, r2
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	00db      	lsls	r3, r3, #3
 800d3ac:	69fa      	ldr	r2, [r7, #28]
 800d3ae:	18d4      	adds	r4, r2, r3
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	4640      	mov	r0, r8
 800d3b6:	4649      	mov	r1, r9
 800d3b8:	f7f2 ff58 	bl	800026c <__aeabi_dsub>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	460b      	mov	r3, r1
 800d3c0:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 + 1] = temp_tmp * c + temp * s;
 800d3c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d3c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d3cc:	f7f3 f906 	bl	80005dc <__aeabi_dmul>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	4690      	mov	r8, r2
 800d3d6:	4699      	mov	r9, r3
 800d3d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d3e0:	f7f3 f8fc 	bl	80005dc <__aeabi_dmul>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	4610      	mov	r0, r2
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	00db      	lsls	r3, r3, #3
 800d3f2:	69fa      	ldr	r2, [r7, #28]
 800d3f4:	18d4      	adds	r4, r2, r3
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	4640      	mov	r0, r8
 800d3fc:	4649      	mov	r1, r9
 800d3fe:	f7f2 ff37 	bl	8000270 <__adddf3>
 800d402:	4602      	mov	r2, r0
 800d404:	460b      	mov	r3, r1
 800d406:	e9c4 2300 	strd	r2, r3, [r4]
}
 800d40a:	bf00      	nop
 800d40c:	3730      	adds	r7, #48	; 0x30
 800d40e:	46bd      	mov	sp, r7
 800d410:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800d414 <xrotg_XzIjz1eG>:
#include "rtwtypes.h"
#include "xrotg_XzIjz1eG.h"
#include <math.h>

void xrotg_XzIjz1eG(real_T *a, real_T *b, real_T *c, real_T *s)
{
 800d414:	b5b0      	push	{r4, r5, r7, lr}
 800d416:	b090      	sub	sp, #64	; 0x40
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	607a      	str	r2, [r7, #4]
 800d420:	603b      	str	r3, [r7, #0]
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d428:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  absa = fabs(*a);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d432:	4611      	mov	r1, r2
 800d434:	62b9      	str	r1, [r7, #40]	; 0x28
 800d436:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d43a:	62fb      	str	r3, [r7, #44]	; 0x2c
  absb = fabs(*b);
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d442:	4611      	mov	r1, r2
 800d444:	6239      	str	r1, [r7, #32]
 800d446:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d44a:	627b      	str	r3, [r7, #36]	; 0x24
  if (absa > absb) {
 800d44c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d450:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d454:	f7f3 fb52 	bl	8000afc <__aeabi_dcmpgt>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d004      	beq.n	800d468 <xrotg_XzIjz1eG+0x54>
    roe = *a;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d464:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  scale = absa + absb;
 800d468:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d46c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d470:	f7f2 fefe 	bl	8000270 <__adddf3>
 800d474:	4602      	mov	r2, r0
 800d476:	460b      	mov	r3, r1
 800d478:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  if (scale == 0.0) {
 800d47c:	f04f 0200 	mov.w	r2, #0
 800d480:	f04f 0300 	mov.w	r3, #0
 800d484:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d488:	f7f3 fb10 	bl	8000aac <__aeabi_dcmpeq>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d01b      	beq.n	800d4ca <xrotg_XzIjz1eG+0xb6>
    *s = 0.0;
 800d492:	6839      	ldr	r1, [r7, #0]
 800d494:	f04f 0200 	mov.w	r2, #0
 800d498:	f04f 0300 	mov.w	r3, #0
 800d49c:	e9c1 2300 	strd	r2, r3, [r1]
    *c = 1.0;
 800d4a0:	6879      	ldr	r1, [r7, #4]
 800d4a2:	f04f 0200 	mov.w	r2, #0
 800d4a6:	4b59      	ldr	r3, [pc, #356]	; (800d60c <xrotg_XzIjz1eG+0x1f8>)
 800d4a8:	e9c1 2300 	strd	r2, r3, [r1]
    *a = 0.0;
 800d4ac:	68f9      	ldr	r1, [r7, #12]
 800d4ae:	f04f 0200 	mov.w	r2, #0
 800d4b2:	f04f 0300 	mov.w	r3, #0
 800d4b6:	e9c1 2300 	strd	r2, r3, [r1]
    *b = 0.0;
 800d4ba:	68b9      	ldr	r1, [r7, #8]
 800d4bc:	f04f 0200 	mov.w	r2, #0
 800d4c0:	f04f 0300 	mov.w	r3, #0
 800d4c4:	e9c1 2300 	strd	r2, r3, [r1]
      *b = 1.0;
    }

    *a = scale;
  }
}
 800d4c8:	e09b      	b.n	800d602 <xrotg_XzIjz1eG+0x1ee>
    ads = absa / scale;
 800d4ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d4ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d4d2:	f7f3 f9ad 	bl	8000830 <__aeabi_ddiv>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	460b      	mov	r3, r1
 800d4da:	e9c7 2306 	strd	r2, r3, [r7, #24]
    bds = absb / scale;
 800d4de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d4e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d4e6:	f7f3 f9a3 	bl	8000830 <__aeabi_ddiv>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
    scale *= sqrt(ads * ads + bds * bds);
 800d4f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d4f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d4fa:	f7f3 f86f 	bl	80005dc <__aeabi_dmul>
 800d4fe:	4602      	mov	r2, r0
 800d500:	460b      	mov	r3, r1
 800d502:	4614      	mov	r4, r2
 800d504:	461d      	mov	r5, r3
 800d506:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d50a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d50e:	f7f3 f865 	bl	80005dc <__aeabi_dmul>
 800d512:	4602      	mov	r2, r0
 800d514:	460b      	mov	r3, r1
 800d516:	4620      	mov	r0, r4
 800d518:	4629      	mov	r1, r5
 800d51a:	f7f2 fea9 	bl	8000270 <__adddf3>
 800d51e:	4602      	mov	r2, r0
 800d520:	460b      	mov	r3, r1
 800d522:	ec43 2b17 	vmov	d7, r2, r3
 800d526:	eeb0 0a47 	vmov.f32	s0, s14
 800d52a:	eef0 0a67 	vmov.f32	s1, s15
 800d52e:	f008 fcc5 	bl	8015ebc <sqrt>
 800d532:	ec53 2b10 	vmov	r2, r3, d0
 800d536:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d53a:	f7f3 f84f 	bl	80005dc <__aeabi_dmul>
 800d53e:	4602      	mov	r2, r0
 800d540:	460b      	mov	r3, r1
 800d542:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (roe < 0.0) {
 800d546:	f04f 0200 	mov.w	r2, #0
 800d54a:	f04f 0300 	mov.w	r3, #0
 800d54e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d552:	f7f3 fab5 	bl	8000ac0 <__aeabi_dcmplt>
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d005      	beq.n	800d568 <xrotg_XzIjz1eG+0x154>
      scale = -scale;
 800d55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55e:	633b      	str	r3, [r7, #48]	; 0x30
 800d560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d562:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d566:	637b      	str	r3, [r7, #52]	; 0x34
    *c = *a / scale;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d56e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d572:	f7f3 f95d 	bl	8000830 <__aeabi_ddiv>
 800d576:	4602      	mov	r2, r0
 800d578:	460b      	mov	r3, r1
 800d57a:	6879      	ldr	r1, [r7, #4]
 800d57c:	e9c1 2300 	strd	r2, r3, [r1]
    *s = *b / scale;
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d586:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d58a:	f7f3 f951 	bl	8000830 <__aeabi_ddiv>
 800d58e:	4602      	mov	r2, r0
 800d590:	460b      	mov	r3, r1
 800d592:	6839      	ldr	r1, [r7, #0]
 800d594:	e9c1 2300 	strd	r2, r3, [r1]
    if (absa > absb) {
 800d598:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d59c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d5a0:	f7f3 faac 	bl	8000afc <__aeabi_dcmpgt>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d006      	beq.n	800d5b8 <xrotg_XzIjz1eG+0x1a4>
      *b = *s;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b0:	68b9      	ldr	r1, [r7, #8]
 800d5b2:	e9c1 2300 	strd	r2, r3, [r1]
 800d5b6:	e01f      	b.n	800d5f8 <xrotg_XzIjz1eG+0x1e4>
    } else if (*c != 0.0) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d5be:	f04f 0200 	mov.w	r2, #0
 800d5c2:	f04f 0300 	mov.w	r3, #0
 800d5c6:	f7f3 fa71 	bl	8000aac <__aeabi_dcmpeq>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d10d      	bne.n	800d5ec <xrotg_XzIjz1eG+0x1d8>
      *b = 1.0 / *c;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d6:	f04f 0000 	mov.w	r0, #0
 800d5da:	490c      	ldr	r1, [pc, #48]	; (800d60c <xrotg_XzIjz1eG+0x1f8>)
 800d5dc:	f7f3 f928 	bl	8000830 <__aeabi_ddiv>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	68b9      	ldr	r1, [r7, #8]
 800d5e6:	e9c1 2300 	strd	r2, r3, [r1]
 800d5ea:	e005      	b.n	800d5f8 <xrotg_XzIjz1eG+0x1e4>
      *b = 1.0;
 800d5ec:	68b9      	ldr	r1, [r7, #8]
 800d5ee:	f04f 0200 	mov.w	r2, #0
 800d5f2:	4b06      	ldr	r3, [pc, #24]	; (800d60c <xrotg_XzIjz1eG+0x1f8>)
 800d5f4:	e9c1 2300 	strd	r2, r3, [r1]
    *a = scale;
 800d5f8:	68f9      	ldr	r1, [r7, #12]
 800d5fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d5fe:	e9c1 2300 	strd	r2, r3, [r1]
}
 800d602:	bf00      	nop
 800d604:	3740      	adds	r7, #64	; 0x40
 800d606:	46bd      	mov	sp, r7
 800d608:	bdb0      	pop	{r4, r5, r7, pc}
 800d60a:	bf00      	nop
 800d60c:	3ff00000 	.word	0x3ff00000

0800d610 <xscal_59GtRAwv>:
#include "rtwtypes.h"
#include "xscal_59GtRAwv.h"

void xscal_59GtRAwv(int32_T n, real_T a, real_T x[9], int32_T ix0)
{
 800d610:	b590      	push	{r4, r7, lr}
 800d612:	b089      	sub	sp, #36	; 0x24
 800d614:	af00      	add	r7, sp, #0
 800d616:	6178      	str	r0, [r7, #20]
 800d618:	ed87 0b02 	vstr	d0, [r7, #8]
 800d61c:	6139      	str	r1, [r7, #16]
 800d61e:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	4413      	add	r3, r2
 800d626:	3b01      	subs	r3, #1
 800d628:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	61fb      	str	r3, [r7, #28]
 800d62e:	e01a      	b.n	800d666 <xscal_59GtRAwv+0x56>
    x[k - 1] *= a;
 800d630:	69fb      	ldr	r3, [r7, #28]
 800d632:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d636:	3b01      	subs	r3, #1
 800d638:	00db      	lsls	r3, r3, #3
 800d63a:	693a      	ldr	r2, [r7, #16]
 800d63c:	4413      	add	r3, r2
 800d63e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d648:	3b01      	subs	r3, #1
 800d64a:	00db      	lsls	r3, r3, #3
 800d64c:	693a      	ldr	r2, [r7, #16]
 800d64e:	18d4      	adds	r4, r2, r3
 800d650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d654:	f7f2 ffc2 	bl	80005dc <__aeabi_dmul>
 800d658:	4602      	mov	r2, r0
 800d65a:	460b      	mov	r3, r1
 800d65c:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 800d660:	69fb      	ldr	r3, [r7, #28]
 800d662:	3301      	adds	r3, #1
 800d664:	61fb      	str	r3, [r7, #28]
 800d666:	69fa      	ldr	r2, [r7, #28]
 800d668:	69bb      	ldr	r3, [r7, #24]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	dde0      	ble.n	800d630 <xscal_59GtRAwv+0x20>
  }
}
 800d66e:	bf00      	nop
 800d670:	bf00      	nop
 800d672:	3724      	adds	r7, #36	; 0x24
 800d674:	46bd      	mov	sp, r7
 800d676:	bd90      	pop	{r4, r7, pc}

0800d678 <xscal_PLmmUlD2>:
#include "rtwtypes.h"
#include "xscal_PLmmUlD2.h"

void xscal_PLmmUlD2(int32_T n, real_T a, real_T x[3], int32_T ix0)
{
 800d678:	b590      	push	{r4, r7, lr}
 800d67a:	b089      	sub	sp, #36	; 0x24
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6178      	str	r0, [r7, #20]
 800d680:	ed87 0b02 	vstr	d0, [r7, #8]
 800d684:	6139      	str	r1, [r7, #16]
 800d686:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	4413      	add	r3, r2
 800d68e:	3b01      	subs	r3, #1
 800d690:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	61fb      	str	r3, [r7, #28]
 800d696:	e01a      	b.n	800d6ce <xscal_PLmmUlD2+0x56>
    x[k - 1] *= a;
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	00db      	lsls	r3, r3, #3
 800d6a2:	693a      	ldr	r2, [r7, #16]
 800d6a4:	4413      	add	r3, r2
 800d6a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	00db      	lsls	r3, r3, #3
 800d6b4:	693a      	ldr	r2, [r7, #16]
 800d6b6:	18d4      	adds	r4, r2, r3
 800d6b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d6bc:	f7f2 ff8e 	bl	80005dc <__aeabi_dmul>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	61fb      	str	r3, [r7, #28]
 800d6ce:	69fa      	ldr	r2, [r7, #28]
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	dde0      	ble.n	800d698 <xscal_PLmmUlD2+0x20>
  }
}
 800d6d6:	bf00      	nop
 800d6d8:	bf00      	nop
 800d6da:	3724      	adds	r7, #36	; 0x24
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd90      	pop	{r4, r7, pc}

0800d6e0 <xscal_eaAxXsvQ>:
#include "rtwtypes.h"
#include "xscal_eaAxXsvQ.h"

void xscal_eaAxXsvQ(real_T a, real_T x[9], int32_T ix0)
{
 800d6e0:	b590      	push	{r4, r7, lr}
 800d6e2:	b087      	sub	sp, #28
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	ed87 0b02 	vstr	d0, [r7, #8]
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  int32_T k;
  for (k = ix0; k <= ix0 + 2; k++) {
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	617b      	str	r3, [r7, #20]
 800d6f2:	e01a      	b.n	800d72a <xscal_eaAxXsvQ+0x4a>
    x[k - 1] *= a;
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d6fa:	3b01      	subs	r3, #1
 800d6fc:	00db      	lsls	r3, r3, #3
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	4413      	add	r3, r2
 800d702:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d70c:	3b01      	subs	r3, #1
 800d70e:	00db      	lsls	r3, r3, #3
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	18d4      	adds	r4, r2, r3
 800d714:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d718:	f7f2 ff60 	bl	80005dc <__aeabi_dmul>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= ix0 + 2; k++) {
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	3301      	adds	r3, #1
 800d728:	617b      	str	r3, [r7, #20]
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	3302      	adds	r3, #2
 800d72e:	697a      	ldr	r2, [r7, #20]
 800d730:	429a      	cmp	r2, r3
 800d732:	dddf      	ble.n	800d6f4 <xscal_eaAxXsvQ+0x14>
  }
}
 800d734:	bf00      	nop
 800d736:	bf00      	nop
 800d738:	371c      	adds	r7, #28
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd90      	pop	{r4, r7, pc}

0800d73e <xswap_JoAqPjUv>:
#include "rtwtypes.h"
#include "xswap_JoAqPjUv.h"

void xswap_JoAqPjUv(real_T x[9], int32_T ix0, int32_T iy0)
{
 800d73e:	b480      	push	{r7}
 800d740:	b087      	sub	sp, #28
 800d742:	af00      	add	r7, sp, #0
 800d744:	60f8      	str	r0, [r7, #12]
 800d746:	60b9      	str	r1, [r7, #8]
 800d748:	607a      	str	r2, [r7, #4]
  real_T temp;
  temp = x[ix0 - 1];
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d750:	3b01      	subs	r3, #1
 800d752:	00db      	lsls	r3, r3, #3
 800d754:	68fa      	ldr	r2, [r7, #12]
 800d756:	4413      	add	r3, r2
 800d758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 - 1] = x[iy0 - 1];
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d766:	3b01      	subs	r3, #1
 800d768:	00db      	lsls	r3, r3, #3
 800d76a:	68fa      	ldr	r2, [r7, #12]
 800d76c:	441a      	add	r2, r3
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d774:	3b01      	subs	r3, #1
 800d776:	00db      	lsls	r3, r3, #3
 800d778:	68f9      	ldr	r1, [r7, #12]
 800d77a:	4419      	add	r1, r3
 800d77c:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d780:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 - 1] = temp;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d78a:	3b01      	subs	r3, #1
 800d78c:	00db      	lsls	r3, r3, #3
 800d78e:	68fa      	ldr	r2, [r7, #12]
 800d790:	18d1      	adds	r1, r2, r3
 800d792:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d796:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0];
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	00db      	lsls	r3, r3, #3
 800d79e:	68fa      	ldr	r2, [r7, #12]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0] = x[iy0];
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	00db      	lsls	r3, r3, #3
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	4413      	add	r3, r2
 800d7b2:	68ba      	ldr	r2, [r7, #8]
 800d7b4:	00d2      	lsls	r2, r2, #3
 800d7b6:	68f9      	ldr	r1, [r7, #12]
 800d7b8:	4411      	add	r1, r2
 800d7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7be:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0] = temp;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	00db      	lsls	r3, r3, #3
 800d7c6:	68fa      	ldr	r2, [r7, #12]
 800d7c8:	18d1      	adds	r1, r2, r3
 800d7ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d7ce:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0 + 1];
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	00db      	lsls	r3, r3, #3
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	4413      	add	r3, r2
 800d7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 + 1] = x[iy0 + 1];
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	00db      	lsls	r3, r3, #3
 800d7ea:	68fa      	ldr	r2, [r7, #12]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	68ba      	ldr	r2, [r7, #8]
 800d7f0:	3201      	adds	r2, #1
 800d7f2:	00d2      	lsls	r2, r2, #3
 800d7f4:	68f9      	ldr	r1, [r7, #12]
 800d7f6:	4411      	add	r1, r2
 800d7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fc:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 + 1] = temp;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	3301      	adds	r3, #1
 800d804:	00db      	lsls	r3, r3, #3
 800d806:	68fa      	ldr	r2, [r7, #12]
 800d808:	18d1      	adds	r1, r2, r3
 800d80a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d80e:	e9c1 2300 	strd	r2, r3, [r1]
}
 800d812:	bf00      	nop
 800d814:	371c      	adds	r7, #28
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr
	...

0800d820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d820:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d858 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800d824:	480d      	ldr	r0, [pc, #52]	; (800d85c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800d826:	490e      	ldr	r1, [pc, #56]	; (800d860 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800d828:	4a0e      	ldr	r2, [pc, #56]	; (800d864 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800d82a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d82c:	e002      	b.n	800d834 <LoopCopyDataInit>

0800d82e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d82e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d832:	3304      	adds	r3, #4

0800d834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d838:	d3f9      	bcc.n	800d82e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d83a:	4a0b      	ldr	r2, [pc, #44]	; (800d868 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800d83c:	4c0b      	ldr	r4, [pc, #44]	; (800d86c <LoopFillZerobss+0x26>)
  movs r3, #0
 800d83e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d840:	e001      	b.n	800d846 <LoopFillZerobss>

0800d842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d844:	3204      	adds	r2, #4

0800d846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d848:	d3fb      	bcc.n	800d842 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d84a:	f7f5 f90f 	bl	8002a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d84e:	f008 f901 	bl	8015a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d852:	f7f4 f92d 	bl	8001ab0 <main>
  bx  lr    
 800d856:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d858:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800d85c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d860:	2000135c 	.word	0x2000135c
  ldr r2, =_sidata
 800d864:	080167c0 	.word	0x080167c0
  ldr r2, =_sbss
 800d868:	20001360 	.word	0x20001360
  ldr r4, =_ebss
 800d86c:	2000df0c 	.word	0x2000df0c

0800d870 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d870:	e7fe      	b.n	800d870 <CAN1_SCE_IRQHandler>
	...

0800d874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d878:	4b0e      	ldr	r3, [pc, #56]	; (800d8b4 <HAL_Init+0x40>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a0d      	ldr	r2, [pc, #52]	; (800d8b4 <HAL_Init+0x40>)
 800d87e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d882:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800d884:	4b0b      	ldr	r3, [pc, #44]	; (800d8b4 <HAL_Init+0x40>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a0a      	ldr	r2, [pc, #40]	; (800d8b4 <HAL_Init+0x40>)
 800d88a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d88e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d890:	4b08      	ldr	r3, [pc, #32]	; (800d8b4 <HAL_Init+0x40>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a07      	ldr	r2, [pc, #28]	; (800d8b4 <HAL_Init+0x40>)
 800d896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d89a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d89c:	2003      	movs	r0, #3
 800d89e:	f001 f9bc 	bl	800ec1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d8a2:	200f      	movs	r0, #15
 800d8a4:	f7f5 f822 	bl	80028ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d8a8:	f7f4 fff4 	bl	8002894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d8ac:	2300      	movs	r3, #0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	bf00      	nop
 800d8b4:	40023c00 	.word	0x40023c00

0800d8b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d8bc:	4b06      	ldr	r3, [pc, #24]	; (800d8d8 <HAL_IncTick+0x20>)
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	4b06      	ldr	r3, [pc, #24]	; (800d8dc <HAL_IncTick+0x24>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4413      	add	r3, r2
 800d8c8:	4a04      	ldr	r2, [pc, #16]	; (800d8dc <HAL_IncTick+0x24>)
 800d8ca:	6013      	str	r3, [r2, #0]
}
 800d8cc:	bf00      	nop
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	200012ec 	.word	0x200012ec
 800d8dc:	2000de14 	.word	0x2000de14

0800d8e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	af00      	add	r7, sp, #0
  return uwTick;
 800d8e4:	4b03      	ldr	r3, [pc, #12]	; (800d8f4 <HAL_GetTick+0x14>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	2000de14 	.word	0x2000de14

0800d8f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d900:	2300      	movs	r3, #0
 800d902:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d101      	bne.n	800d90e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800d90a:	2301      	movs	r3, #1
 800d90c:	e033      	b.n	800d976 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d912:	2b00      	cmp	r3, #0
 800d914:	d109      	bne.n	800d92a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f7f3 fe40 	bl	800159c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d92e:	f003 0310 	and.w	r3, r3, #16
 800d932:	2b00      	cmp	r3, #0
 800d934:	d118      	bne.n	800d968 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d93a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800d93e:	f023 0302 	bic.w	r3, r3, #2
 800d942:	f043 0202 	orr.w	r2, r3, #2
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 fa8e 	bl	800de6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d95a:	f023 0303 	bic.w	r3, r3, #3
 800d95e:	f043 0201 	orr.w	r2, r3, #1
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	641a      	str	r2, [r3, #64]	; 0x40
 800d966:	e001      	b.n	800d96c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800d968:	2301      	movs	r3, #1
 800d96a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800d974:	7bfb      	ldrb	r3, [r7, #15]
}
 800d976:	4618      	mov	r0, r3
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}

0800d97e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800d97e:	b580      	push	{r7, lr}
 800d980:	b084      	sub	sp, #16
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800d986:	2300      	movs	r3, #0
 800d988:	60fb      	str	r3, [r7, #12]
 800d98a:	2300      	movs	r3, #0
 800d98c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f003 0302 	and.w	r3, r3, #2
 800d998:	2b02      	cmp	r3, #2
 800d99a:	bf0c      	ite	eq
 800d99c:	2301      	moveq	r3, #1
 800d99e:	2300      	movne	r3, #0
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	f003 0320 	and.w	r3, r3, #32
 800d9ae:	2b20      	cmp	r3, #32
 800d9b0:	bf0c      	ite	eq
 800d9b2:	2301      	moveq	r3, #1
 800d9b4:	2300      	movne	r3, #0
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d049      	beq.n	800da54 <HAL_ADC_IRQHandler+0xd6>
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d046      	beq.n	800da54 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ca:	f003 0310 	and.w	r3, r3, #16
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d105      	bne.n	800d9de <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	689b      	ldr	r3, [r3, #8]
 800d9e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d12b      	bne.n	800da44 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d127      	bne.n	800da44 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d006      	beq.n	800da10 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	689b      	ldr	r3, [r3, #8]
 800da08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d119      	bne.n	800da44 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	685a      	ldr	r2, [r3, #4]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f022 0220 	bic.w	r2, r2, #32
 800da1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800da34:	2b00      	cmp	r3, #0
 800da36:	d105      	bne.n	800da44 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da3c:	f043 0201 	orr.w	r2, r3, #1
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f7f3 fe29 	bl	800169c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f06f 0212 	mvn.w	r2, #18
 800da52:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f003 0304 	and.w	r3, r3, #4
 800da5e:	2b04      	cmp	r3, #4
 800da60:	bf0c      	ite	eq
 800da62:	2301      	moveq	r3, #1
 800da64:	2300      	movne	r3, #0
 800da66:	b2db      	uxtb	r3, r3
 800da68:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da74:	2b80      	cmp	r3, #128	; 0x80
 800da76:	bf0c      	ite	eq
 800da78:	2301      	moveq	r3, #1
 800da7a:	2300      	movne	r3, #0
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d057      	beq.n	800db36 <HAL_ADC_IRQHandler+0x1b8>
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d054      	beq.n	800db36 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da90:	f003 0310 	and.w	r3, r3, #16
 800da94:	2b00      	cmp	r3, #0
 800da96:	d105      	bne.n	800daa4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da9c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d139      	bne.n	800db26 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d006      	beq.n	800dace <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	689b      	ldr	r3, [r3, #8]
 800dac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d12b      	bne.n	800db26 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d124      	bne.n	800db26 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	689b      	ldr	r3, [r3, #8]
 800dae2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d11d      	bne.n	800db26 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d119      	bne.n	800db26 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	685a      	ldr	r2, [r3, #4]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800db00:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db16:	2b00      	cmp	r3, #0
 800db18:	d105      	bne.n	800db26 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db1e:	f043 0201 	orr.w	r2, r3, #1
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 fa9c 	bl	800e064 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f06f 020c 	mvn.w	r2, #12
 800db34:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f003 0301 	and.w	r3, r3, #1
 800db40:	2b01      	cmp	r3, #1
 800db42:	bf0c      	ite	eq
 800db44:	2301      	moveq	r3, #1
 800db46:	2300      	movne	r3, #0
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db56:	2b40      	cmp	r3, #64	; 0x40
 800db58:	bf0c      	ite	eq
 800db5a:	2301      	moveq	r3, #1
 800db5c:	2300      	movne	r3, #0
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d017      	beq.n	800db98 <HAL_ADC_IRQHandler+0x21a>
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d014      	beq.n	800db98 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f003 0301 	and.w	r3, r3, #1
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d10d      	bne.n	800db98 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 f839 	bl	800dc00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f06f 0201 	mvn.w	r2, #1
 800db96:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f003 0320 	and.w	r3, r3, #32
 800dba2:	2b20      	cmp	r3, #32
 800dba4:	bf0c      	ite	eq
 800dba6:	2301      	moveq	r3, #1
 800dba8:	2300      	movne	r3, #0
 800dbaa:	b2db      	uxtb	r3, r3
 800dbac:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dbb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dbbc:	bf0c      	ite	eq
 800dbbe:	2301      	moveq	r3, #1
 800dbc0:	2300      	movne	r3, #0
 800dbc2:	b2db      	uxtb	r3, r3
 800dbc4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d015      	beq.n	800dbf8 <HAL_ADC_IRQHandler+0x27a>
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d012      	beq.n	800dbf8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbd6:	f043 0202 	orr.w	r2, r3, #2
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f06f 0220 	mvn.w	r2, #32
 800dbe6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 f813 	bl	800dc14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f06f 0220 	mvn.w	r2, #32
 800dbf6:	601a      	str	r2, [r3, #0]
  }
}
 800dbf8:	bf00      	nop
 800dbfa:	3710      	adds	r7, #16
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800dc08:	bf00      	nop
 800dc0a:	370c      	adds	r7, #12
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800dc1c:	bf00      	nop
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800dc32:	2300      	movs	r3, #0
 800dc34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d101      	bne.n	800dc44 <HAL_ADC_ConfigChannel+0x1c>
 800dc40:	2302      	movs	r3, #2
 800dc42:	e105      	b.n	800de50 <HAL_ADC_ConfigChannel+0x228>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2201      	movs	r2, #1
 800dc48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2b09      	cmp	r3, #9
 800dc52:	d925      	bls.n	800dca0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	68d9      	ldr	r1, [r3, #12]
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	461a      	mov	r2, r3
 800dc62:	4613      	mov	r3, r2
 800dc64:	005b      	lsls	r3, r3, #1
 800dc66:	4413      	add	r3, r2
 800dc68:	3b1e      	subs	r3, #30
 800dc6a:	2207      	movs	r2, #7
 800dc6c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc70:	43da      	mvns	r2, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	400a      	ands	r2, r1
 800dc78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	68d9      	ldr	r1, [r3, #12]
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	689a      	ldr	r2, [r3, #8]
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	005b      	lsls	r3, r3, #1
 800dc90:	4403      	add	r3, r0
 800dc92:	3b1e      	subs	r3, #30
 800dc94:	409a      	lsls	r2, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	430a      	orrs	r2, r1
 800dc9c:	60da      	str	r2, [r3, #12]
 800dc9e:	e022      	b.n	800dce6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	6919      	ldr	r1, [r3, #16]
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	461a      	mov	r2, r3
 800dcae:	4613      	mov	r3, r2
 800dcb0:	005b      	lsls	r3, r3, #1
 800dcb2:	4413      	add	r3, r2
 800dcb4:	2207      	movs	r2, #7
 800dcb6:	fa02 f303 	lsl.w	r3, r2, r3
 800dcba:	43da      	mvns	r2, r3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	400a      	ands	r2, r1
 800dcc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	6919      	ldr	r1, [r3, #16]
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	689a      	ldr	r2, [r3, #8]
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	005b      	lsls	r3, r3, #1
 800dcda:	4403      	add	r3, r0
 800dcdc:	409a      	lsls	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	430a      	orrs	r2, r1
 800dce4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	2b06      	cmp	r3, #6
 800dcec:	d824      	bhi.n	800dd38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	685a      	ldr	r2, [r3, #4]
 800dcf8:	4613      	mov	r3, r2
 800dcfa:	009b      	lsls	r3, r3, #2
 800dcfc:	4413      	add	r3, r2
 800dcfe:	3b05      	subs	r3, #5
 800dd00:	221f      	movs	r2, #31
 800dd02:	fa02 f303 	lsl.w	r3, r2, r3
 800dd06:	43da      	mvns	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	400a      	ands	r2, r1
 800dd0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	685a      	ldr	r2, [r3, #4]
 800dd22:	4613      	mov	r3, r2
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	4413      	add	r3, r2
 800dd28:	3b05      	subs	r3, #5
 800dd2a:	fa00 f203 	lsl.w	r2, r0, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	430a      	orrs	r2, r1
 800dd34:	635a      	str	r2, [r3, #52]	; 0x34
 800dd36:	e04c      	b.n	800ddd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	2b0c      	cmp	r3, #12
 800dd3e:	d824      	bhi.n	800dd8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	685a      	ldr	r2, [r3, #4]
 800dd4a:	4613      	mov	r3, r2
 800dd4c:	009b      	lsls	r3, r3, #2
 800dd4e:	4413      	add	r3, r2
 800dd50:	3b23      	subs	r3, #35	; 0x23
 800dd52:	221f      	movs	r2, #31
 800dd54:	fa02 f303 	lsl.w	r3, r2, r3
 800dd58:	43da      	mvns	r2, r3
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	400a      	ands	r2, r1
 800dd60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	4618      	mov	r0, r3
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	685a      	ldr	r2, [r3, #4]
 800dd74:	4613      	mov	r3, r2
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	4413      	add	r3, r2
 800dd7a:	3b23      	subs	r3, #35	; 0x23
 800dd7c:	fa00 f203 	lsl.w	r2, r0, r3
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	430a      	orrs	r2, r1
 800dd86:	631a      	str	r2, [r3, #48]	; 0x30
 800dd88:	e023      	b.n	800ddd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	685a      	ldr	r2, [r3, #4]
 800dd94:	4613      	mov	r3, r2
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	4413      	add	r3, r2
 800dd9a:	3b41      	subs	r3, #65	; 0x41
 800dd9c:	221f      	movs	r2, #31
 800dd9e:	fa02 f303 	lsl.w	r3, r2, r3
 800dda2:	43da      	mvns	r2, r3
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	400a      	ands	r2, r1
 800ddaa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	4618      	mov	r0, r3
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	685a      	ldr	r2, [r3, #4]
 800ddbe:	4613      	mov	r3, r2
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	4413      	add	r3, r2
 800ddc4:	3b41      	subs	r3, #65	; 0x41
 800ddc6:	fa00 f203 	lsl.w	r2, r0, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	430a      	orrs	r2, r1
 800ddd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ddd2:	4b22      	ldr	r3, [pc, #136]	; (800de5c <HAL_ADC_ConfigChannel+0x234>)
 800ddd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4a21      	ldr	r2, [pc, #132]	; (800de60 <HAL_ADC_ConfigChannel+0x238>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d109      	bne.n	800ddf4 <HAL_ADC_ConfigChannel+0x1cc>
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2b12      	cmp	r3, #18
 800dde6:	d105      	bne.n	800ddf4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a19      	ldr	r2, [pc, #100]	; (800de60 <HAL_ADC_ConfigChannel+0x238>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d123      	bne.n	800de46 <HAL_ADC_ConfigChannel+0x21e>
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2b10      	cmp	r3, #16
 800de04:	d003      	beq.n	800de0e <HAL_ADC_ConfigChannel+0x1e6>
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	2b11      	cmp	r3, #17
 800de0c:	d11b      	bne.n	800de46 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2b10      	cmp	r3, #16
 800de20:	d111      	bne.n	800de46 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800de22:	4b10      	ldr	r3, [pc, #64]	; (800de64 <HAL_ADC_ConfigChannel+0x23c>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4a10      	ldr	r2, [pc, #64]	; (800de68 <HAL_ADC_ConfigChannel+0x240>)
 800de28:	fba2 2303 	umull	r2, r3, r2, r3
 800de2c:	0c9a      	lsrs	r2, r3, #18
 800de2e:	4613      	mov	r3, r2
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	4413      	add	r3, r2
 800de34:	005b      	lsls	r3, r3, #1
 800de36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800de38:	e002      	b.n	800de40 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	3b01      	subs	r3, #1
 800de3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1f9      	bne.n	800de3a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800de4e:	2300      	movs	r3, #0
}
 800de50:	4618      	mov	r0, r3
 800de52:	3714      	adds	r7, #20
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr
 800de5c:	40012300 	.word	0x40012300
 800de60:	40012000 	.word	0x40012000
 800de64:	20000004 	.word	0x20000004
 800de68:	431bde83 	.word	0x431bde83

0800de6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800de74:	4b79      	ldr	r3, [pc, #484]	; (800e05c <ADC_Init+0x1f0>)
 800de76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	685b      	ldr	r3, [r3, #4]
 800de7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	685a      	ldr	r2, [r3, #4]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	431a      	orrs	r2, r3
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	685a      	ldr	r2, [r3, #4]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dea0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	6859      	ldr	r1, [r3, #4]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	021a      	lsls	r2, r3, #8
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	430a      	orrs	r2, r1
 800deb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	685a      	ldr	r2, [r3, #4]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800dec4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	6859      	ldr	r1, [r3, #4]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	689a      	ldr	r2, [r3, #8]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	430a      	orrs	r2, r1
 800ded6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	689a      	ldr	r2, [r3, #8]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dee6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	6899      	ldr	r1, [r3, #8]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	68da      	ldr	r2, [r3, #12]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	430a      	orrs	r2, r1
 800def8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800defe:	4a58      	ldr	r2, [pc, #352]	; (800e060 <ADC_Init+0x1f4>)
 800df00:	4293      	cmp	r3, r2
 800df02:	d022      	beq.n	800df4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	689a      	ldr	r2, [r3, #8]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800df12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	6899      	ldr	r1, [r3, #8]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	430a      	orrs	r2, r1
 800df24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	689a      	ldr	r2, [r3, #8]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800df34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	6899      	ldr	r1, [r3, #8]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	430a      	orrs	r2, r1
 800df46:	609a      	str	r2, [r3, #8]
 800df48:	e00f      	b.n	800df6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	689a      	ldr	r2, [r3, #8]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800df58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	689a      	ldr	r2, [r3, #8]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800df68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	689a      	ldr	r2, [r3, #8]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f022 0202 	bic.w	r2, r2, #2
 800df78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	6899      	ldr	r1, [r3, #8]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	7e1b      	ldrb	r3, [r3, #24]
 800df84:	005a      	lsls	r2, r3, #1
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	430a      	orrs	r2, r1
 800df8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f893 3020 	ldrb.w	r3, [r3, #32]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d01b      	beq.n	800dfd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	685a      	ldr	r2, [r3, #4]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dfa6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	685a      	ldr	r2, [r3, #4]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800dfb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	6859      	ldr	r1, [r3, #4]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	035a      	lsls	r2, r3, #13
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	430a      	orrs	r2, r1
 800dfcc:	605a      	str	r2, [r3, #4]
 800dfce:	e007      	b.n	800dfe0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	685a      	ldr	r2, [r3, #4]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dfde:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800dfee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	69db      	ldr	r3, [r3, #28]
 800dffa:	3b01      	subs	r3, #1
 800dffc:	051a      	lsls	r2, r3, #20
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	430a      	orrs	r2, r1
 800e004:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	689a      	ldr	r2, [r3, #8]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	6899      	ldr	r1, [r3, #8]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e022:	025a      	lsls	r2, r3, #9
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	430a      	orrs	r2, r1
 800e02a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	689a      	ldr	r2, [r3, #8]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e03a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	6899      	ldr	r1, [r3, #8]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	695b      	ldr	r3, [r3, #20]
 800e046:	029a      	lsls	r2, r3, #10
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	430a      	orrs	r2, r1
 800e04e:	609a      	str	r2, [r3, #8]
}
 800e050:	bf00      	nop
 800e052:	3714      	adds	r7, #20
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr
 800e05c:	40012300 	.word	0x40012300
 800e060:	0f000001 	.word	0x0f000001

0800e064 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800e06c:	bf00      	nop
 800e06e:	370c      	adds	r7, #12
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr

0800e078 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d101      	bne.n	800e08a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800e086:	2301      	movs	r3, #1
 800e088:	e0ed      	b.n	800e266 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e090:	b2db      	uxtb	r3, r3
 800e092:	2b00      	cmp	r3, #0
 800e094:	d102      	bne.n	800e09c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f7f3 fb7c 	bl	8001794 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f042 0201 	orr.w	r2, r2, #1
 800e0aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e0ac:	f7ff fc18 	bl	800d8e0 <HAL_GetTick>
 800e0b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e0b2:	e012      	b.n	800e0da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e0b4:	f7ff fc14 	bl	800d8e0 <HAL_GetTick>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	2b0a      	cmp	r3, #10
 800e0c0:	d90b      	bls.n	800e0da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2205      	movs	r2, #5
 800e0d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	e0c5      	b.n	800e266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	f003 0301 	and.w	r3, r3, #1
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d0e5      	beq.n	800e0b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f022 0202 	bic.w	r2, r2, #2
 800e0f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e0f8:	f7ff fbf2 	bl	800d8e0 <HAL_GetTick>
 800e0fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800e0fe:	e012      	b.n	800e126 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e100:	f7ff fbee 	bl	800d8e0 <HAL_GetTick>
 800e104:	4602      	mov	r2, r0
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	2b0a      	cmp	r3, #10
 800e10c:	d90b      	bls.n	800e126 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e112:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2205      	movs	r2, #5
 800e11e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800e122:	2301      	movs	r3, #1
 800e124:	e09f      	b.n	800e266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	f003 0302 	and.w	r3, r3, #2
 800e130:	2b00      	cmp	r3, #0
 800e132:	d1e5      	bne.n	800e100 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	7e1b      	ldrb	r3, [r3, #24]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d108      	bne.n	800e14e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e14a:	601a      	str	r2, [r3, #0]
 800e14c:	e007      	b.n	800e15e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e15c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	7e5b      	ldrb	r3, [r3, #25]
 800e162:	2b01      	cmp	r3, #1
 800e164:	d108      	bne.n	800e178 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	681a      	ldr	r2, [r3, #0]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e174:	601a      	str	r2, [r3, #0]
 800e176:	e007      	b.n	800e188 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e186:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	7e9b      	ldrb	r3, [r3, #26]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d108      	bne.n	800e1a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f042 0220 	orr.w	r2, r2, #32
 800e19e:	601a      	str	r2, [r3, #0]
 800e1a0:	e007      	b.n	800e1b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f022 0220 	bic.w	r2, r2, #32
 800e1b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	7edb      	ldrb	r3, [r3, #27]
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d108      	bne.n	800e1cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f022 0210 	bic.w	r2, r2, #16
 800e1c8:	601a      	str	r2, [r3, #0]
 800e1ca:	e007      	b.n	800e1dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	681a      	ldr	r2, [r3, #0]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f042 0210 	orr.w	r2, r2, #16
 800e1da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	7f1b      	ldrb	r3, [r3, #28]
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d108      	bne.n	800e1f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f042 0208 	orr.w	r2, r2, #8
 800e1f2:	601a      	str	r2, [r3, #0]
 800e1f4:	e007      	b.n	800e206 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	681a      	ldr	r2, [r3, #0]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f022 0208 	bic.w	r2, r2, #8
 800e204:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	7f5b      	ldrb	r3, [r3, #29]
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d108      	bne.n	800e220 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f042 0204 	orr.w	r2, r2, #4
 800e21c:	601a      	str	r2, [r3, #0]
 800e21e:	e007      	b.n	800e230 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	681a      	ldr	r2, [r3, #0]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f022 0204 	bic.w	r2, r2, #4
 800e22e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	689a      	ldr	r2, [r3, #8]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	431a      	orrs	r2, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	691b      	ldr	r3, [r3, #16]
 800e23e:	431a      	orrs	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	695b      	ldr	r3, [r3, #20]
 800e244:	ea42 0103 	orr.w	r1, r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	1e5a      	subs	r2, r3, #1
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	430a      	orrs	r2, r1
 800e254:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2200      	movs	r2, #0
 800e25a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2201      	movs	r2, #1
 800e260:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800e264:	2300      	movs	r3, #0
}
 800e266:	4618      	mov	r0, r3
 800e268:	3710      	adds	r7, #16
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800e26e:	b480      	push	{r7}
 800e270:	b089      	sub	sp, #36	; 0x24
 800e272:	af00      	add	r7, sp, #0
 800e274:	60f8      	str	r0, [r7, #12]
 800e276:	60b9      	str	r1, [r7, #8]
 800e278:	607a      	str	r2, [r7, #4]
 800e27a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e282:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	689b      	ldr	r3, [r3, #8]
 800e28a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800e28c:	7ffb      	ldrb	r3, [r7, #31]
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d003      	beq.n	800e29a <HAL_CAN_AddTxMessage+0x2c>
 800e292:	7ffb      	ldrb	r3, [r7, #31]
 800e294:	2b02      	cmp	r3, #2
 800e296:	f040 80b8 	bne.w	800e40a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d10a      	bne.n	800e2ba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800e2a4:	69bb      	ldr	r3, [r7, #24]
 800e2a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d105      	bne.n	800e2ba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800e2ae:	69bb      	ldr	r3, [r7, #24]
 800e2b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f000 80a0 	beq.w	800e3fa <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	0e1b      	lsrs	r3, r3, #24
 800e2be:	f003 0303 	and.w	r3, r3, #3
 800e2c2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	2b02      	cmp	r3, #2
 800e2c8:	d907      	bls.n	800e2da <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	e09e      	b.n	800e418 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800e2da:	2201      	movs	r2, #1
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	409a      	lsls	r2, r3
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	689b      	ldr	r3, [r3, #8]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d10d      	bne.n	800e308 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800e2f6:	68f9      	ldr	r1, [r7, #12]
 800e2f8:	6809      	ldr	r1, [r1, #0]
 800e2fa:	431a      	orrs	r2, r3
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	3318      	adds	r3, #24
 800e300:	011b      	lsls	r3, r3, #4
 800e302:	440b      	add	r3, r1
 800e304:	601a      	str	r2, [r3, #0]
 800e306:	e00f      	b.n	800e328 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e312:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e318:	68f9      	ldr	r1, [r7, #12]
 800e31a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800e31c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	3318      	adds	r3, #24
 800e322:	011b      	lsls	r3, r3, #4
 800e324:	440b      	add	r3, r1
 800e326:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6819      	ldr	r1, [r3, #0]
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	691a      	ldr	r2, [r3, #16]
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	3318      	adds	r3, #24
 800e334:	011b      	lsls	r3, r3, #4
 800e336:	440b      	add	r3, r1
 800e338:	3304      	adds	r3, #4
 800e33a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	7d1b      	ldrb	r3, [r3, #20]
 800e340:	2b01      	cmp	r3, #1
 800e342:	d111      	bne.n	800e368 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	3318      	adds	r3, #24
 800e34c:	011b      	lsls	r3, r3, #4
 800e34e:	4413      	add	r3, r2
 800e350:	3304      	adds	r3, #4
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	6811      	ldr	r1, [r2, #0]
 800e358:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	3318      	adds	r3, #24
 800e360:	011b      	lsls	r3, r3, #4
 800e362:	440b      	add	r3, r1
 800e364:	3304      	adds	r3, #4
 800e366:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	3307      	adds	r3, #7
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	061a      	lsls	r2, r3, #24
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	3306      	adds	r3, #6
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	041b      	lsls	r3, r3, #16
 800e378:	431a      	orrs	r2, r3
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	3305      	adds	r3, #5
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	021b      	lsls	r3, r3, #8
 800e382:	4313      	orrs	r3, r2
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	3204      	adds	r2, #4
 800e388:	7812      	ldrb	r2, [r2, #0]
 800e38a:	4610      	mov	r0, r2
 800e38c:	68fa      	ldr	r2, [r7, #12]
 800e38e:	6811      	ldr	r1, [r2, #0]
 800e390:	ea43 0200 	orr.w	r2, r3, r0
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	011b      	lsls	r3, r3, #4
 800e398:	440b      	add	r3, r1
 800e39a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800e39e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	3303      	adds	r3, #3
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	061a      	lsls	r2, r3, #24
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	3302      	adds	r3, #2
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	041b      	lsls	r3, r3, #16
 800e3b0:	431a      	orrs	r2, r3
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	021b      	lsls	r3, r3, #8
 800e3ba:	4313      	orrs	r3, r2
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	7812      	ldrb	r2, [r2, #0]
 800e3c0:	4610      	mov	r0, r2
 800e3c2:	68fa      	ldr	r2, [r7, #12]
 800e3c4:	6811      	ldr	r1, [r2, #0]
 800e3c6:	ea43 0200 	orr.w	r2, r3, r0
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	011b      	lsls	r3, r3, #4
 800e3ce:	440b      	add	r3, r1
 800e3d0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800e3d4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	3318      	adds	r3, #24
 800e3de:	011b      	lsls	r3, r3, #4
 800e3e0:	4413      	add	r3, r2
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	6811      	ldr	r1, [r2, #0]
 800e3e8:	f043 0201 	orr.w	r2, r3, #1
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	3318      	adds	r3, #24
 800e3f0:	011b      	lsls	r3, r3, #4
 800e3f2:	440b      	add	r3, r1
 800e3f4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	e00e      	b.n	800e418 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800e406:	2301      	movs	r3, #1
 800e408:	e006      	b.n	800e418 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e40e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e416:	2301      	movs	r3, #1
  }
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3724      	adds	r7, #36	; 0x24
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800e424:	b480      	push	{r7}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800e42c:	2300      	movs	r3, #0
 800e42e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e436:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800e438:	7afb      	ldrb	r3, [r7, #11]
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	d002      	beq.n	800e444 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800e43e:	7afb      	ldrb	r3, [r7, #11]
 800e440:	2b02      	cmp	r3, #2
 800e442:	d11d      	bne.n	800e480 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	689b      	ldr	r3, [r3, #8]
 800e44a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d002      	beq.n	800e458 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	3301      	adds	r3, #1
 800e456:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	689b      	ldr	r3, [r3, #8]
 800e45e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e462:	2b00      	cmp	r3, #0
 800e464:	d002      	beq.n	800e46c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	3301      	adds	r3, #1
 800e46a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	689b      	ldr	r3, [r3, #8]
 800e472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e476:	2b00      	cmp	r3, #0
 800e478:	d002      	beq.n	800e480 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	3301      	adds	r3, #1
 800e47e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800e480:	68fb      	ldr	r3, [r7, #12]
}
 800e482:	4618      	mov	r0, r3
 800e484:	3714      	adds	r7, #20
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr

0800e48e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800e48e:	b480      	push	{r7}
 800e490:	b087      	sub	sp, #28
 800e492:	af00      	add	r7, sp, #0
 800e494:	60f8      	str	r0, [r7, #12]
 800e496:	60b9      	str	r1, [r7, #8]
 800e498:	607a      	str	r2, [r7, #4]
 800e49a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e4a2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800e4a4:	7dfb      	ldrb	r3, [r7, #23]
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d003      	beq.n	800e4b2 <HAL_CAN_GetRxMessage+0x24>
 800e4aa:	7dfb      	ldrb	r3, [r7, #23]
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	f040 80f3 	bne.w	800e698 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d10e      	bne.n	800e4d6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	68db      	ldr	r3, [r3, #12]
 800e4be:	f003 0303 	and.w	r3, r3, #3
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d116      	bne.n	800e4f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	e0e7      	b.n	800e6a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	691b      	ldr	r3, [r3, #16]
 800e4dc:	f003 0303 	and.w	r3, r3, #3
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d107      	bne.n	800e4f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	e0d8      	b.n	800e6a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681a      	ldr	r2, [r3, #0]
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	331b      	adds	r3, #27
 800e4fc:	011b      	lsls	r3, r3, #4
 800e4fe:	4413      	add	r3, r2
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f003 0204 	and.w	r2, r3, #4
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	689b      	ldr	r3, [r3, #8]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d10c      	bne.n	800e52c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	331b      	adds	r3, #27
 800e51a:	011b      	lsls	r3, r3, #4
 800e51c:	4413      	add	r3, r2
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	0d5b      	lsrs	r3, r3, #21
 800e522:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	601a      	str	r2, [r3, #0]
 800e52a:	e00b      	b.n	800e544 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	331b      	adds	r3, #27
 800e534:	011b      	lsls	r3, r3, #4
 800e536:	4413      	add	r3, r2
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	08db      	lsrs	r3, r3, #3
 800e53c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	331b      	adds	r3, #27
 800e54c:	011b      	lsls	r3, r3, #4
 800e54e:	4413      	add	r3, r2
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f003 0202 	and.w	r2, r3, #2
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	331b      	adds	r3, #27
 800e562:	011b      	lsls	r3, r3, #4
 800e564:	4413      	add	r3, r2
 800e566:	3304      	adds	r3, #4
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f003 020f 	and.w	r2, r3, #15
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	331b      	adds	r3, #27
 800e57a:	011b      	lsls	r3, r3, #4
 800e57c:	4413      	add	r3, r2
 800e57e:	3304      	adds	r3, #4
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	0a1b      	lsrs	r3, r3, #8
 800e584:	b2da      	uxtb	r2, r3
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	331b      	adds	r3, #27
 800e592:	011b      	lsls	r3, r3, #4
 800e594:	4413      	add	r3, r2
 800e596:	3304      	adds	r3, #4
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	0c1b      	lsrs	r3, r3, #16
 800e59c:	b29a      	uxth	r2, r3
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681a      	ldr	r2, [r3, #0]
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	011b      	lsls	r3, r3, #4
 800e5aa:	4413      	add	r3, r2
 800e5ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	b2da      	uxtb	r2, r3
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	011b      	lsls	r3, r3, #4
 800e5c0:	4413      	add	r3, r2
 800e5c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	0a1a      	lsrs	r2, r3, #8
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	b2d2      	uxtb	r2, r2
 800e5d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	011b      	lsls	r3, r3, #4
 800e5da:	4413      	add	r3, r2
 800e5dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	0c1a      	lsrs	r2, r3, #16
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	3302      	adds	r3, #2
 800e5e8:	b2d2      	uxtb	r2, r2
 800e5ea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	011b      	lsls	r3, r3, #4
 800e5f4:	4413      	add	r3, r2
 800e5f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	0e1a      	lsrs	r2, r3, #24
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	3303      	adds	r3, #3
 800e602:	b2d2      	uxtb	r2, r2
 800e604:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	011b      	lsls	r3, r3, #4
 800e60e:	4413      	add	r3, r2
 800e610:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	3304      	adds	r3, #4
 800e61a:	b2d2      	uxtb	r2, r2
 800e61c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681a      	ldr	r2, [r3, #0]
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	011b      	lsls	r3, r3, #4
 800e626:	4413      	add	r3, r2
 800e628:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	0a1a      	lsrs	r2, r3, #8
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	3305      	adds	r3, #5
 800e634:	b2d2      	uxtb	r2, r2
 800e636:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	011b      	lsls	r3, r3, #4
 800e640:	4413      	add	r3, r2
 800e642:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	0c1a      	lsrs	r2, r3, #16
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	3306      	adds	r3, #6
 800e64e:	b2d2      	uxtb	r2, r2
 800e650:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	011b      	lsls	r3, r3, #4
 800e65a:	4413      	add	r3, r2
 800e65c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	0e1a      	lsrs	r2, r3, #24
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	3307      	adds	r3, #7
 800e668:	b2d2      	uxtb	r2, r2
 800e66a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d108      	bne.n	800e684 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	68da      	ldr	r2, [r3, #12]
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f042 0220 	orr.w	r2, r2, #32
 800e680:	60da      	str	r2, [r3, #12]
 800e682:	e007      	b.n	800e694 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	691a      	ldr	r2, [r3, #16]
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f042 0220 	orr.w	r2, r2, #32
 800e692:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800e694:	2300      	movs	r3, #0
 800e696:	e006      	b.n	800e6a6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e69c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e6a4:	2301      	movs	r3, #1
  }
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	371c      	adds	r7, #28
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr

0800e6b2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800e6b2:	b580      	push	{r7, lr}
 800e6b4:	b08a      	sub	sp, #40	; 0x28
 800e6b6:	af00      	add	r7, sp, #0
 800e6b8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	695b      	ldr	r3, [r3, #20]
 800e6c4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	689b      	ldr	r3, [r3, #8]
 800e6d4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	68db      	ldr	r3, [r3, #12]
 800e6dc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	691b      	ldr	r3, [r3, #16]
 800e6e4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	699b      	ldr	r3, [r3, #24]
 800e6ec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800e6ee:	6a3b      	ldr	r3, [r7, #32]
 800e6f0:	f003 0301 	and.w	r3, r3, #1
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d07c      	beq.n	800e7f2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800e6f8:	69bb      	ldr	r3, [r7, #24]
 800e6fa:	f003 0301 	and.w	r3, r3, #1
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d023      	beq.n	800e74a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	2201      	movs	r2, #1
 800e708:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800e70a:	69bb      	ldr	r3, [r7, #24]
 800e70c:	f003 0302 	and.w	r3, r3, #2
 800e710:	2b00      	cmp	r3, #0
 800e712:	d003      	beq.n	800e71c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f7f3 ff91 	bl	800263c <HAL_CAN_TxMailbox0CompleteCallback>
 800e71a:	e016      	b.n	800e74a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	f003 0304 	and.w	r3, r3, #4
 800e722:	2b00      	cmp	r3, #0
 800e724:	d004      	beq.n	800e730 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800e726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e728:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e72c:	627b      	str	r3, [r7, #36]	; 0x24
 800e72e:	e00c      	b.n	800e74a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	f003 0308 	and.w	r3, r3, #8
 800e736:	2b00      	cmp	r3, #0
 800e738:	d004      	beq.n	800e744 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800e73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e740:	627b      	str	r3, [r7, #36]	; 0x24
 800e742:	e002      	b.n	800e74a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f000 f96b 	bl	800ea20 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e750:	2b00      	cmp	r3, #0
 800e752:	d024      	beq.n	800e79e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e75c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e764:	2b00      	cmp	r3, #0
 800e766:	d003      	beq.n	800e770 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f7f3 ff71 	bl	8002650 <HAL_CAN_TxMailbox1CompleteCallback>
 800e76e:	e016      	b.n	800e79e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800e770:	69bb      	ldr	r3, [r7, #24]
 800e772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e776:	2b00      	cmp	r3, #0
 800e778:	d004      	beq.n	800e784 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800e77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e780:	627b      	str	r3, [r7, #36]	; 0x24
 800e782:	e00c      	b.n	800e79e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d004      	beq.n	800e798 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800e78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e794:	627b      	str	r3, [r7, #36]	; 0x24
 800e796:	e002      	b.n	800e79e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 f94b 	bl	800ea34 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d024      	beq.n	800e7f2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e7b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d003      	beq.n	800e7c4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f7f3 ff51 	bl	8002664 <HAL_CAN_TxMailbox2CompleteCallback>
 800e7c2:	e016      	b.n	800e7f2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d004      	beq.n	800e7d8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800e7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7d4:	627b      	str	r3, [r7, #36]	; 0x24
 800e7d6:	e00c      	b.n	800e7f2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d004      	beq.n	800e7ec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800e7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e7e8:	627b      	str	r3, [r7, #36]	; 0x24
 800e7ea:	e002      	b.n	800e7f2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 f92b 	bl	800ea48 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800e7f2:	6a3b      	ldr	r3, [r7, #32]
 800e7f4:	f003 0308 	and.w	r3, r3, #8
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d00c      	beq.n	800e816 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	f003 0310 	and.w	r3, r3, #16
 800e802:	2b00      	cmp	r3, #0
 800e804:	d007      	beq.n	800e816 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800e806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e808:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e80c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	2210      	movs	r2, #16
 800e814:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800e816:	6a3b      	ldr	r3, [r7, #32]
 800e818:	f003 0304 	and.w	r3, r3, #4
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d00b      	beq.n	800e838 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	f003 0308 	and.w	r3, r3, #8
 800e826:	2b00      	cmp	r3, #0
 800e828:	d006      	beq.n	800e838 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	2208      	movs	r2, #8
 800e830:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f000 f912 	bl	800ea5c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800e838:	6a3b      	ldr	r3, [r7, #32]
 800e83a:	f003 0302 	and.w	r3, r3, #2
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d009      	beq.n	800e856 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	68db      	ldr	r3, [r3, #12]
 800e848:	f003 0303 	and.w	r3, r3, #3
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d002      	beq.n	800e856 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f7f3 ff11 	bl	8002678 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800e856:	6a3b      	ldr	r3, [r7, #32]
 800e858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00c      	beq.n	800e87a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	f003 0310 	and.w	r3, r3, #16
 800e866:	2b00      	cmp	r3, #0
 800e868:	d007      	beq.n	800e87a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800e86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e870:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	2210      	movs	r2, #16
 800e878:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800e87a:	6a3b      	ldr	r3, [r7, #32]
 800e87c:	f003 0320 	and.w	r3, r3, #32
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00b      	beq.n	800e89c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	f003 0308 	and.w	r3, r3, #8
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d006      	beq.n	800e89c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	2208      	movs	r2, #8
 800e894:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f000 f8ea 	bl	800ea70 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800e89c:	6a3b      	ldr	r3, [r7, #32]
 800e89e:	f003 0310 	and.w	r3, r3, #16
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d009      	beq.n	800e8ba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	691b      	ldr	r3, [r3, #16]
 800e8ac:	f003 0303 	and.w	r3, r3, #3
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d002      	beq.n	800e8ba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f7f3 ff0f 	bl	80026d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800e8ba:	6a3b      	ldr	r3, [r7, #32]
 800e8bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d00b      	beq.n	800e8dc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	f003 0310 	and.w	r3, r3, #16
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d006      	beq.n	800e8dc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	2210      	movs	r2, #16
 800e8d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 f8d4 	bl	800ea84 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800e8dc:	6a3b      	ldr	r3, [r7, #32]
 800e8de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d00b      	beq.n	800e8fe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800e8e6:	69fb      	ldr	r3, [r7, #28]
 800e8e8:	f003 0308 	and.w	r3, r3, #8
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d006      	beq.n	800e8fe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2208      	movs	r2, #8
 800e8f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 f8cd 	bl	800ea98 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800e8fe:	6a3b      	ldr	r3, [r7, #32]
 800e900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e904:	2b00      	cmp	r3, #0
 800e906:	d07b      	beq.n	800ea00 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	f003 0304 	and.w	r3, r3, #4
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d072      	beq.n	800e9f8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800e912:	6a3b      	ldr	r3, [r7, #32]
 800e914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d008      	beq.n	800e92e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800e922:	2b00      	cmp	r3, #0
 800e924:	d003      	beq.n	800e92e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800e926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e928:	f043 0301 	orr.w	r3, r3, #1
 800e92c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800e92e:	6a3b      	ldr	r3, [r7, #32]
 800e930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e934:	2b00      	cmp	r3, #0
 800e936:	d008      	beq.n	800e94a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d003      	beq.n	800e94a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800e942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e944:	f043 0302 	orr.w	r3, r3, #2
 800e948:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800e94a:	6a3b      	ldr	r3, [r7, #32]
 800e94c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e950:	2b00      	cmp	r3, #0
 800e952:	d008      	beq.n	800e966 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d003      	beq.n	800e966 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800e95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e960:	f043 0304 	orr.w	r3, r3, #4
 800e964:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800e966:	6a3b      	ldr	r3, [r7, #32]
 800e968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d043      	beq.n	800e9f8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800e976:	2b00      	cmp	r3, #0
 800e978:	d03e      	beq.n	800e9f8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e980:	2b60      	cmp	r3, #96	; 0x60
 800e982:	d02b      	beq.n	800e9dc <HAL_CAN_IRQHandler+0x32a>
 800e984:	2b60      	cmp	r3, #96	; 0x60
 800e986:	d82e      	bhi.n	800e9e6 <HAL_CAN_IRQHandler+0x334>
 800e988:	2b50      	cmp	r3, #80	; 0x50
 800e98a:	d022      	beq.n	800e9d2 <HAL_CAN_IRQHandler+0x320>
 800e98c:	2b50      	cmp	r3, #80	; 0x50
 800e98e:	d82a      	bhi.n	800e9e6 <HAL_CAN_IRQHandler+0x334>
 800e990:	2b40      	cmp	r3, #64	; 0x40
 800e992:	d019      	beq.n	800e9c8 <HAL_CAN_IRQHandler+0x316>
 800e994:	2b40      	cmp	r3, #64	; 0x40
 800e996:	d826      	bhi.n	800e9e6 <HAL_CAN_IRQHandler+0x334>
 800e998:	2b30      	cmp	r3, #48	; 0x30
 800e99a:	d010      	beq.n	800e9be <HAL_CAN_IRQHandler+0x30c>
 800e99c:	2b30      	cmp	r3, #48	; 0x30
 800e99e:	d822      	bhi.n	800e9e6 <HAL_CAN_IRQHandler+0x334>
 800e9a0:	2b10      	cmp	r3, #16
 800e9a2:	d002      	beq.n	800e9aa <HAL_CAN_IRQHandler+0x2f8>
 800e9a4:	2b20      	cmp	r3, #32
 800e9a6:	d005      	beq.n	800e9b4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800e9a8:	e01d      	b.n	800e9e6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800e9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ac:	f043 0308 	orr.w	r3, r3, #8
 800e9b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e9b2:	e019      	b.n	800e9e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800e9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b6:	f043 0310 	orr.w	r3, r3, #16
 800e9ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e9bc:	e014      	b.n	800e9e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800e9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c0:	f043 0320 	orr.w	r3, r3, #32
 800e9c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e9c6:	e00f      	b.n	800e9e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e9d0:	e00a      	b.n	800e9e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800e9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e9da:	e005      	b.n	800e9e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800e9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e9e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e9e4:	e000      	b.n	800e9e8 <HAL_CAN_IRQHandler+0x336>
            break;
 800e9e6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	699a      	ldr	r2, [r3, #24]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e9f6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	2204      	movs	r2, #4
 800e9fe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800ea00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d008      	beq.n	800ea18 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0c:	431a      	orrs	r2, r3
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 f84a 	bl	800eaac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800ea18:	bf00      	nop
 800ea1a:	3728      	adds	r7, #40	; 0x28
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800ea28:	bf00      	nop
 800ea2a:	370c      	adds	r7, #12
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr

0800ea34 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800ea3c:	bf00      	nop
 800ea3e:	370c      	adds	r7, #12
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800ea50:	bf00      	nop
 800ea52:	370c      	adds	r7, #12
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800ea64:	bf00      	nop
 800ea66:	370c      	adds	r7, #12
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr

0800ea70 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b083      	sub	sp, #12
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800ea78:	bf00      	nop
 800ea7a:	370c      	adds	r7, #12
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800ea8c:	bf00      	nop
 800ea8e:	370c      	adds	r7, #12
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr

0800ea98 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800eaa0:	bf00      	nop
 800eaa2:	370c      	adds	r7, #12
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr

0800eaac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800eab4:	bf00      	nop
 800eab6:	370c      	adds	r7, #12
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr

0800eac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b085      	sub	sp, #20
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f003 0307 	and.w	r3, r3, #7
 800eace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ead0:	4b0c      	ldr	r3, [pc, #48]	; (800eb04 <__NVIC_SetPriorityGrouping+0x44>)
 800ead2:	68db      	ldr	r3, [r3, #12]
 800ead4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ead6:	68ba      	ldr	r2, [r7, #8]
 800ead8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800eadc:	4013      	ands	r3, r2
 800eade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800eae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800eaec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eaf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800eaf2:	4a04      	ldr	r2, [pc, #16]	; (800eb04 <__NVIC_SetPriorityGrouping+0x44>)
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	60d3      	str	r3, [r2, #12]
}
 800eaf8:	bf00      	nop
 800eafa:	3714      	adds	r7, #20
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr
 800eb04:	e000ed00 	.word	0xe000ed00

0800eb08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800eb0c:	4b04      	ldr	r3, [pc, #16]	; (800eb20 <__NVIC_GetPriorityGrouping+0x18>)
 800eb0e:	68db      	ldr	r3, [r3, #12]
 800eb10:	0a1b      	lsrs	r3, r3, #8
 800eb12:	f003 0307 	and.w	r3, r3, #7
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr
 800eb20:	e000ed00 	.word	0xe000ed00

0800eb24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800eb24:	b480      	push	{r7}
 800eb26:	b083      	sub	sp, #12
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800eb2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	db0b      	blt.n	800eb4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800eb36:	79fb      	ldrb	r3, [r7, #7]
 800eb38:	f003 021f 	and.w	r2, r3, #31
 800eb3c:	4907      	ldr	r1, [pc, #28]	; (800eb5c <__NVIC_EnableIRQ+0x38>)
 800eb3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb42:	095b      	lsrs	r3, r3, #5
 800eb44:	2001      	movs	r0, #1
 800eb46:	fa00 f202 	lsl.w	r2, r0, r2
 800eb4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800eb4e:	bf00      	nop
 800eb50:	370c      	adds	r7, #12
 800eb52:	46bd      	mov	sp, r7
 800eb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb58:	4770      	bx	lr
 800eb5a:	bf00      	nop
 800eb5c:	e000e100 	.word	0xe000e100

0800eb60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	4603      	mov	r3, r0
 800eb68:	6039      	str	r1, [r7, #0]
 800eb6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800eb6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	db0a      	blt.n	800eb8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	b2da      	uxtb	r2, r3
 800eb78:	490c      	ldr	r1, [pc, #48]	; (800ebac <__NVIC_SetPriority+0x4c>)
 800eb7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb7e:	0112      	lsls	r2, r2, #4
 800eb80:	b2d2      	uxtb	r2, r2
 800eb82:	440b      	add	r3, r1
 800eb84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800eb88:	e00a      	b.n	800eba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	b2da      	uxtb	r2, r3
 800eb8e:	4908      	ldr	r1, [pc, #32]	; (800ebb0 <__NVIC_SetPriority+0x50>)
 800eb90:	79fb      	ldrb	r3, [r7, #7]
 800eb92:	f003 030f 	and.w	r3, r3, #15
 800eb96:	3b04      	subs	r3, #4
 800eb98:	0112      	lsls	r2, r2, #4
 800eb9a:	b2d2      	uxtb	r2, r2
 800eb9c:	440b      	add	r3, r1
 800eb9e:	761a      	strb	r2, [r3, #24]
}
 800eba0:	bf00      	nop
 800eba2:	370c      	adds	r7, #12
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr
 800ebac:	e000e100 	.word	0xe000e100
 800ebb0:	e000ed00 	.word	0xe000ed00

0800ebb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b089      	sub	sp, #36	; 0x24
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f003 0307 	and.w	r3, r3, #7
 800ebc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	f1c3 0307 	rsb	r3, r3, #7
 800ebce:	2b04      	cmp	r3, #4
 800ebd0:	bf28      	it	cs
 800ebd2:	2304      	movcs	r3, #4
 800ebd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	3304      	adds	r3, #4
 800ebda:	2b06      	cmp	r3, #6
 800ebdc:	d902      	bls.n	800ebe4 <NVIC_EncodePriority+0x30>
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	3b03      	subs	r3, #3
 800ebe2:	e000      	b.n	800ebe6 <NVIC_EncodePriority+0x32>
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ebe8:	f04f 32ff 	mov.w	r2, #4294967295
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	fa02 f303 	lsl.w	r3, r2, r3
 800ebf2:	43da      	mvns	r2, r3
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	401a      	ands	r2, r3
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ebfc:	f04f 31ff 	mov.w	r1, #4294967295
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	fa01 f303 	lsl.w	r3, r1, r3
 800ec06:	43d9      	mvns	r1, r3
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ec0c:	4313      	orrs	r3, r2
         );
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3724      	adds	r7, #36	; 0x24
 800ec12:	46bd      	mov	sp, r7
 800ec14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec18:	4770      	bx	lr

0800ec1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b082      	sub	sp, #8
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f7ff ff4c 	bl	800eac0 <__NVIC_SetPriorityGrouping>
}
 800ec28:	bf00      	nop
 800ec2a:	3708      	adds	r7, #8
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b086      	sub	sp, #24
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	4603      	mov	r3, r0
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	607a      	str	r2, [r7, #4]
 800ec3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ec42:	f7ff ff61 	bl	800eb08 <__NVIC_GetPriorityGrouping>
 800ec46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ec48:	687a      	ldr	r2, [r7, #4]
 800ec4a:	68b9      	ldr	r1, [r7, #8]
 800ec4c:	6978      	ldr	r0, [r7, #20]
 800ec4e:	f7ff ffb1 	bl	800ebb4 <NVIC_EncodePriority>
 800ec52:	4602      	mov	r2, r0
 800ec54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec58:	4611      	mov	r1, r2
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7ff ff80 	bl	800eb60 <__NVIC_SetPriority>
}
 800ec60:	bf00      	nop
 800ec62:	3718      	adds	r7, #24
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	4603      	mov	r3, r0
 800ec70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ec72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7ff ff54 	bl	800eb24 <__NVIC_EnableIRQ>
}
 800ec7c:	bf00      	nop
 800ec7e:	3708      	adds	r7, #8
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b086      	sub	sp, #24
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800ec90:	f7fe fe26 	bl	800d8e0 <HAL_GetTick>
 800ec94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d101      	bne.n	800eca0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	e099      	b.n	800edd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2202      	movs	r2, #2
 800eca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f022 0201 	bic.w	r2, r2, #1
 800ecbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ecc0:	e00f      	b.n	800ece2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ecc2:	f7fe fe0d 	bl	800d8e0 <HAL_GetTick>
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	1ad3      	subs	r3, r2, r3
 800eccc:	2b05      	cmp	r3, #5
 800ecce:	d908      	bls.n	800ece2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2220      	movs	r2, #32
 800ecd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2203      	movs	r2, #3
 800ecda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800ecde:	2303      	movs	r3, #3
 800ece0:	e078      	b.n	800edd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f003 0301 	and.w	r3, r3, #1
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d1e8      	bne.n	800ecc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ecf8:	697a      	ldr	r2, [r7, #20]
 800ecfa:	4b38      	ldr	r3, [pc, #224]	; (800eddc <HAL_DMA_Init+0x158>)
 800ecfc:	4013      	ands	r3, r2
 800ecfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	685a      	ldr	r2, [r3, #4]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	689b      	ldr	r3, [r3, #8]
 800ed08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ed0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	691b      	ldr	r3, [r3, #16]
 800ed14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ed1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	699b      	ldr	r3, [r3, #24]
 800ed20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ed26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6a1b      	ldr	r3, [r3, #32]
 800ed2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ed2e:	697a      	ldr	r2, [r7, #20]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed38:	2b04      	cmp	r3, #4
 800ed3a:	d107      	bne.n	800ed4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed44:	4313      	orrs	r3, r2
 800ed46:	697a      	ldr	r2, [r7, #20]
 800ed48:	4313      	orrs	r3, r2
 800ed4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	697a      	ldr	r2, [r7, #20]
 800ed52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	695b      	ldr	r3, [r3, #20]
 800ed5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	f023 0307 	bic.w	r3, r3, #7
 800ed62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed68:	697a      	ldr	r2, [r7, #20]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed72:	2b04      	cmp	r3, #4
 800ed74:	d117      	bne.n	800eda6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed7a:	697a      	ldr	r2, [r7, #20]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00e      	beq.n	800eda6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 f9e9 	bl	800f160 <DMA_CheckFifoParam>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d008      	beq.n	800eda6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2240      	movs	r2, #64	; 0x40
 800ed98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800eda2:	2301      	movs	r3, #1
 800eda4:	e016      	b.n	800edd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	697a      	ldr	r2, [r7, #20]
 800edac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f000 f9a0 	bl	800f0f4 <DMA_CalcBaseAndBitshift>
 800edb4:	4603      	mov	r3, r0
 800edb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edbc:	223f      	movs	r2, #63	; 0x3f
 800edbe:	409a      	lsls	r2, r3
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2200      	movs	r2, #0
 800edc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2201      	movs	r2, #1
 800edce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800edd2:	2300      	movs	r3, #0
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3718      	adds	r7, #24
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	f010803f 	.word	0xf010803f

0800ede0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b086      	sub	sp, #24
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ede8:	2300      	movs	r3, #0
 800edea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800edec:	4b92      	ldr	r3, [pc, #584]	; (800f038 <HAL_DMA_IRQHandler+0x258>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4a92      	ldr	r2, [pc, #584]	; (800f03c <HAL_DMA_IRQHandler+0x25c>)
 800edf2:	fba2 2303 	umull	r2, r3, r2, r3
 800edf6:	0a9b      	lsrs	r3, r3, #10
 800edf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee0a:	2208      	movs	r2, #8
 800ee0c:	409a      	lsls	r2, r3
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	4013      	ands	r3, r2
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d01a      	beq.n	800ee4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f003 0304 	and.w	r3, r3, #4
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d013      	beq.n	800ee4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	681a      	ldr	r2, [r3, #0]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f022 0204 	bic.w	r2, r2, #4
 800ee32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee38:	2208      	movs	r2, #8
 800ee3a:	409a      	lsls	r2, r3
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee44:	f043 0201 	orr.w	r2, r3, #1
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee50:	2201      	movs	r2, #1
 800ee52:	409a      	lsls	r2, r3
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	4013      	ands	r3, r2
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d012      	beq.n	800ee82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	695b      	ldr	r3, [r3, #20]
 800ee62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d00b      	beq.n	800ee82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee6e:	2201      	movs	r2, #1
 800ee70:	409a      	lsls	r2, r3
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee7a:	f043 0202 	orr.w	r2, r3, #2
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee86:	2204      	movs	r2, #4
 800ee88:	409a      	lsls	r2, r3
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	4013      	ands	r3, r2
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d012      	beq.n	800eeb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f003 0302 	and.w	r3, r3, #2
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d00b      	beq.n	800eeb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eea4:	2204      	movs	r2, #4
 800eea6:	409a      	lsls	r2, r3
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eeb0:	f043 0204 	orr.w	r2, r3, #4
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eebc:	2210      	movs	r2, #16
 800eebe:	409a      	lsls	r2, r3
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	4013      	ands	r3, r2
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d043      	beq.n	800ef50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f003 0308 	and.w	r3, r3, #8
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d03c      	beq.n	800ef50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eeda:	2210      	movs	r2, #16
 800eedc:	409a      	lsls	r2, r3
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d018      	beq.n	800ef22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d108      	bne.n	800ef10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d024      	beq.n	800ef50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	4798      	blx	r3
 800ef0e:	e01f      	b.n	800ef50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d01b      	beq.n	800ef50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	4798      	blx	r3
 800ef20:	e016      	b.n	800ef50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d107      	bne.n	800ef40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f022 0208 	bic.w	r2, r2, #8
 800ef3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d003      	beq.n	800ef50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef54:	2220      	movs	r2, #32
 800ef56:	409a      	lsls	r2, r3
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	4013      	ands	r3, r2
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	f000 808e 	beq.w	800f07e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f003 0310 	and.w	r3, r3, #16
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	f000 8086 	beq.w	800f07e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef76:	2220      	movs	r2, #32
 800ef78:	409a      	lsls	r2, r3
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ef84:	b2db      	uxtb	r3, r3
 800ef86:	2b05      	cmp	r3, #5
 800ef88:	d136      	bne.n	800eff8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f022 0216 	bic.w	r2, r2, #22
 800ef98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	695a      	ldr	r2, [r3, #20]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800efa8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d103      	bne.n	800efba <HAL_DMA_IRQHandler+0x1da>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d007      	beq.n	800efca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f022 0208 	bic.w	r2, r2, #8
 800efc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800efce:	223f      	movs	r2, #63	; 0x3f
 800efd0:	409a      	lsls	r2, r3
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2201      	movs	r2, #1
 800efda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2200      	movs	r2, #0
 800efe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efea:	2b00      	cmp	r3, #0
 800efec:	d07d      	beq.n	800f0ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	4798      	blx	r3
        }
        return;
 800eff6:	e078      	b.n	800f0ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f002:	2b00      	cmp	r3, #0
 800f004:	d01c      	beq.n	800f040 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f010:	2b00      	cmp	r3, #0
 800f012:	d108      	bne.n	800f026 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d030      	beq.n	800f07e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	4798      	blx	r3
 800f024:	e02b      	b.n	800f07e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d027      	beq.n	800f07e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	4798      	blx	r3
 800f036:	e022      	b.n	800f07e <HAL_DMA_IRQHandler+0x29e>
 800f038:	20000004 	.word	0x20000004
 800f03c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d10f      	bne.n	800f06e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	681a      	ldr	r2, [r3, #0]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f022 0210 	bic.w	r2, r2, #16
 800f05c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2201      	movs	r2, #1
 800f062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2200      	movs	r2, #0
 800f06a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f072:	2b00      	cmp	r3, #0
 800f074:	d003      	beq.n	800f07e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f082:	2b00      	cmp	r3, #0
 800f084:	d032      	beq.n	800f0ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f08a:	f003 0301 	and.w	r3, r3, #1
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d022      	beq.n	800f0d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2205      	movs	r2, #5
 800f096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	681a      	ldr	r2, [r3, #0]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f022 0201 	bic.w	r2, r2, #1
 800f0a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	60bb      	str	r3, [r7, #8]
 800f0b0:	697a      	ldr	r2, [r7, #20]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d307      	bcc.n	800f0c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f003 0301 	and.w	r3, r3, #1
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d1f2      	bne.n	800f0aa <HAL_DMA_IRQHandler+0x2ca>
 800f0c4:	e000      	b.n	800f0c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800f0c6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d005      	beq.n	800f0ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	4798      	blx	r3
 800f0e8:	e000      	b.n	800f0ec <HAL_DMA_IRQHandler+0x30c>
        return;
 800f0ea:	bf00      	nop
    }
  }
}
 800f0ec:	3718      	adds	r7, #24
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop

0800f0f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	b2db      	uxtb	r3, r3
 800f102:	3b10      	subs	r3, #16
 800f104:	4a14      	ldr	r2, [pc, #80]	; (800f158 <DMA_CalcBaseAndBitshift+0x64>)
 800f106:	fba2 2303 	umull	r2, r3, r2, r3
 800f10a:	091b      	lsrs	r3, r3, #4
 800f10c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f10e:	4a13      	ldr	r2, [pc, #76]	; (800f15c <DMA_CalcBaseAndBitshift+0x68>)
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	4413      	add	r3, r2
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	461a      	mov	r2, r3
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2b03      	cmp	r3, #3
 800f120:	d909      	bls.n	800f136 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f12a:	f023 0303 	bic.w	r3, r3, #3
 800f12e:	1d1a      	adds	r2, r3, #4
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	659a      	str	r2, [r3, #88]	; 0x58
 800f134:	e007      	b.n	800f146 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f13e:	f023 0303 	bic.w	r3, r3, #3
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3714      	adds	r7, #20
 800f14e:	46bd      	mov	sp, r7
 800f150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f154:	4770      	bx	lr
 800f156:	bf00      	nop
 800f158:	aaaaaaab 	.word	0xaaaaaaab
 800f15c:	08016708 	.word	0x08016708

0800f160 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800f160:	b480      	push	{r7}
 800f162:	b085      	sub	sp, #20
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f168:	2300      	movs	r3, #0
 800f16a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f170:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	699b      	ldr	r3, [r3, #24]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d11f      	bne.n	800f1ba <DMA_CheckFifoParam+0x5a>
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	2b03      	cmp	r3, #3
 800f17e:	d856      	bhi.n	800f22e <DMA_CheckFifoParam+0xce>
 800f180:	a201      	add	r2, pc, #4	; (adr r2, 800f188 <DMA_CheckFifoParam+0x28>)
 800f182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f186:	bf00      	nop
 800f188:	0800f199 	.word	0x0800f199
 800f18c:	0800f1ab 	.word	0x0800f1ab
 800f190:	0800f199 	.word	0x0800f199
 800f194:	0800f22f 	.word	0x0800f22f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f19c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d046      	beq.n	800f232 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f1a8:	e043      	b.n	800f232 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f1b2:	d140      	bne.n	800f236 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f1b8:	e03d      	b.n	800f236 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	699b      	ldr	r3, [r3, #24]
 800f1be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f1c2:	d121      	bne.n	800f208 <DMA_CheckFifoParam+0xa8>
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	2b03      	cmp	r3, #3
 800f1c8:	d837      	bhi.n	800f23a <DMA_CheckFifoParam+0xda>
 800f1ca:	a201      	add	r2, pc, #4	; (adr r2, 800f1d0 <DMA_CheckFifoParam+0x70>)
 800f1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1d0:	0800f1e1 	.word	0x0800f1e1
 800f1d4:	0800f1e7 	.word	0x0800f1e7
 800f1d8:	0800f1e1 	.word	0x0800f1e1
 800f1dc:	0800f1f9 	.word	0x0800f1f9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	73fb      	strb	r3, [r7, #15]
      break;
 800f1e4:	e030      	b.n	800f248 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d025      	beq.n	800f23e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f1f6:	e022      	b.n	800f23e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f200:	d11f      	bne.n	800f242 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800f202:	2301      	movs	r3, #1
 800f204:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800f206:	e01c      	b.n	800f242 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	2b02      	cmp	r3, #2
 800f20c:	d903      	bls.n	800f216 <DMA_CheckFifoParam+0xb6>
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	2b03      	cmp	r3, #3
 800f212:	d003      	beq.n	800f21c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800f214:	e018      	b.n	800f248 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800f216:	2301      	movs	r3, #1
 800f218:	73fb      	strb	r3, [r7, #15]
      break;
 800f21a:	e015      	b.n	800f248 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00e      	beq.n	800f246 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800f228:	2301      	movs	r3, #1
 800f22a:	73fb      	strb	r3, [r7, #15]
      break;
 800f22c:	e00b      	b.n	800f246 <DMA_CheckFifoParam+0xe6>
      break;
 800f22e:	bf00      	nop
 800f230:	e00a      	b.n	800f248 <DMA_CheckFifoParam+0xe8>
      break;
 800f232:	bf00      	nop
 800f234:	e008      	b.n	800f248 <DMA_CheckFifoParam+0xe8>
      break;
 800f236:	bf00      	nop
 800f238:	e006      	b.n	800f248 <DMA_CheckFifoParam+0xe8>
      break;
 800f23a:	bf00      	nop
 800f23c:	e004      	b.n	800f248 <DMA_CheckFifoParam+0xe8>
      break;
 800f23e:	bf00      	nop
 800f240:	e002      	b.n	800f248 <DMA_CheckFifoParam+0xe8>
      break;   
 800f242:	bf00      	nop
 800f244:	e000      	b.n	800f248 <DMA_CheckFifoParam+0xe8>
      break;
 800f246:	bf00      	nop
    }
  } 
  
  return status; 
 800f248:	7bfb      	ldrb	r3, [r7, #15]
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3714      	adds	r7, #20
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr
 800f256:	bf00      	nop

0800f258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f258:	b480      	push	{r7}
 800f25a:	b089      	sub	sp, #36	; 0x24
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800f262:	2300      	movs	r3, #0
 800f264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f266:	2300      	movs	r3, #0
 800f268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800f26a:	2300      	movs	r3, #0
 800f26c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f26e:	2300      	movs	r3, #0
 800f270:	61fb      	str	r3, [r7, #28]
 800f272:	e16b      	b.n	800f54c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800f274:	2201      	movs	r2, #1
 800f276:	69fb      	ldr	r3, [r7, #28]
 800f278:	fa02 f303 	lsl.w	r3, r2, r3
 800f27c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	697a      	ldr	r2, [r7, #20]
 800f284:	4013      	ands	r3, r2
 800f286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800f288:	693a      	ldr	r2, [r7, #16]
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	429a      	cmp	r2, r3
 800f28e:	f040 815a 	bne.w	800f546 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	f003 0303 	and.w	r3, r3, #3
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d005      	beq.n	800f2aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800f2a6:	2b02      	cmp	r3, #2
 800f2a8:	d130      	bne.n	800f30c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800f2b0:	69fb      	ldr	r3, [r7, #28]
 800f2b2:	005b      	lsls	r3, r3, #1
 800f2b4:	2203      	movs	r2, #3
 800f2b6:	fa02 f303 	lsl.w	r3, r2, r3
 800f2ba:	43db      	mvns	r3, r3
 800f2bc:	69ba      	ldr	r2, [r7, #24]
 800f2be:	4013      	ands	r3, r2
 800f2c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	68da      	ldr	r2, [r3, #12]
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	005b      	lsls	r3, r3, #1
 800f2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800f2ce:	69ba      	ldr	r2, [r7, #24]
 800f2d0:	4313      	orrs	r3, r2
 800f2d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	69ba      	ldr	r2, [r7, #24]
 800f2d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	69fb      	ldr	r3, [r7, #28]
 800f2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800f2e8:	43db      	mvns	r3, r3
 800f2ea:	69ba      	ldr	r2, [r7, #24]
 800f2ec:	4013      	ands	r3, r2
 800f2ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	091b      	lsrs	r3, r3, #4
 800f2f6:	f003 0201 	and.w	r2, r3, #1
 800f2fa:	69fb      	ldr	r3, [r7, #28]
 800f2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800f300:	69ba      	ldr	r2, [r7, #24]
 800f302:	4313      	orrs	r3, r2
 800f304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	69ba      	ldr	r2, [r7, #24]
 800f30a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	f003 0303 	and.w	r3, r3, #3
 800f314:	2b03      	cmp	r3, #3
 800f316:	d017      	beq.n	800f348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	005b      	lsls	r3, r3, #1
 800f322:	2203      	movs	r2, #3
 800f324:	fa02 f303 	lsl.w	r3, r2, r3
 800f328:	43db      	mvns	r3, r3
 800f32a:	69ba      	ldr	r2, [r7, #24]
 800f32c:	4013      	ands	r3, r2
 800f32e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	689a      	ldr	r2, [r3, #8]
 800f334:	69fb      	ldr	r3, [r7, #28]
 800f336:	005b      	lsls	r3, r3, #1
 800f338:	fa02 f303 	lsl.w	r3, r2, r3
 800f33c:	69ba      	ldr	r2, [r7, #24]
 800f33e:	4313      	orrs	r3, r2
 800f340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	69ba      	ldr	r2, [r7, #24]
 800f346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	f003 0303 	and.w	r3, r3, #3
 800f350:	2b02      	cmp	r3, #2
 800f352:	d123      	bne.n	800f39c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f354:	69fb      	ldr	r3, [r7, #28]
 800f356:	08da      	lsrs	r2, r3, #3
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	3208      	adds	r2, #8
 800f35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f362:	69fb      	ldr	r3, [r7, #28]
 800f364:	f003 0307 	and.w	r3, r3, #7
 800f368:	009b      	lsls	r3, r3, #2
 800f36a:	220f      	movs	r2, #15
 800f36c:	fa02 f303 	lsl.w	r3, r2, r3
 800f370:	43db      	mvns	r3, r3
 800f372:	69ba      	ldr	r2, [r7, #24]
 800f374:	4013      	ands	r3, r2
 800f376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	691a      	ldr	r2, [r3, #16]
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	f003 0307 	and.w	r3, r3, #7
 800f382:	009b      	lsls	r3, r3, #2
 800f384:	fa02 f303 	lsl.w	r3, r2, r3
 800f388:	69ba      	ldr	r2, [r7, #24]
 800f38a:	4313      	orrs	r3, r2
 800f38c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f38e:	69fb      	ldr	r3, [r7, #28]
 800f390:	08da      	lsrs	r2, r3, #3
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	3208      	adds	r2, #8
 800f396:	69b9      	ldr	r1, [r7, #24]
 800f398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800f3a2:	69fb      	ldr	r3, [r7, #28]
 800f3a4:	005b      	lsls	r3, r3, #1
 800f3a6:	2203      	movs	r2, #3
 800f3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800f3ac:	43db      	mvns	r3, r3
 800f3ae:	69ba      	ldr	r2, [r7, #24]
 800f3b0:	4013      	ands	r3, r2
 800f3b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	f003 0203 	and.w	r2, r3, #3
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	005b      	lsls	r3, r3, #1
 800f3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800f3c4:	69ba      	ldr	r2, [r7, #24]
 800f3c6:	4313      	orrs	r3, r2
 800f3c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	69ba      	ldr	r2, [r7, #24]
 800f3ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	f000 80b4 	beq.w	800f546 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f3de:	2300      	movs	r3, #0
 800f3e0:	60fb      	str	r3, [r7, #12]
 800f3e2:	4b60      	ldr	r3, [pc, #384]	; (800f564 <HAL_GPIO_Init+0x30c>)
 800f3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3e6:	4a5f      	ldr	r2, [pc, #380]	; (800f564 <HAL_GPIO_Init+0x30c>)
 800f3e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f3ec:	6453      	str	r3, [r2, #68]	; 0x44
 800f3ee:	4b5d      	ldr	r3, [pc, #372]	; (800f564 <HAL_GPIO_Init+0x30c>)
 800f3f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f3f6:	60fb      	str	r3, [r7, #12]
 800f3f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f3fa:	4a5b      	ldr	r2, [pc, #364]	; (800f568 <HAL_GPIO_Init+0x310>)
 800f3fc:	69fb      	ldr	r3, [r7, #28]
 800f3fe:	089b      	lsrs	r3, r3, #2
 800f400:	3302      	adds	r3, #2
 800f402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	f003 0303 	and.w	r3, r3, #3
 800f40e:	009b      	lsls	r3, r3, #2
 800f410:	220f      	movs	r2, #15
 800f412:	fa02 f303 	lsl.w	r3, r2, r3
 800f416:	43db      	mvns	r3, r3
 800f418:	69ba      	ldr	r2, [r7, #24]
 800f41a:	4013      	ands	r3, r2
 800f41c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	4a52      	ldr	r2, [pc, #328]	; (800f56c <HAL_GPIO_Init+0x314>)
 800f422:	4293      	cmp	r3, r2
 800f424:	d02b      	beq.n	800f47e <HAL_GPIO_Init+0x226>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	4a51      	ldr	r2, [pc, #324]	; (800f570 <HAL_GPIO_Init+0x318>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d025      	beq.n	800f47a <HAL_GPIO_Init+0x222>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	4a50      	ldr	r2, [pc, #320]	; (800f574 <HAL_GPIO_Init+0x31c>)
 800f432:	4293      	cmp	r3, r2
 800f434:	d01f      	beq.n	800f476 <HAL_GPIO_Init+0x21e>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	4a4f      	ldr	r2, [pc, #316]	; (800f578 <HAL_GPIO_Init+0x320>)
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d019      	beq.n	800f472 <HAL_GPIO_Init+0x21a>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4a4e      	ldr	r2, [pc, #312]	; (800f57c <HAL_GPIO_Init+0x324>)
 800f442:	4293      	cmp	r3, r2
 800f444:	d013      	beq.n	800f46e <HAL_GPIO_Init+0x216>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4a4d      	ldr	r2, [pc, #308]	; (800f580 <HAL_GPIO_Init+0x328>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d00d      	beq.n	800f46a <HAL_GPIO_Init+0x212>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4a4c      	ldr	r2, [pc, #304]	; (800f584 <HAL_GPIO_Init+0x32c>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d007      	beq.n	800f466 <HAL_GPIO_Init+0x20e>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	4a4b      	ldr	r2, [pc, #300]	; (800f588 <HAL_GPIO_Init+0x330>)
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d101      	bne.n	800f462 <HAL_GPIO_Init+0x20a>
 800f45e:	2307      	movs	r3, #7
 800f460:	e00e      	b.n	800f480 <HAL_GPIO_Init+0x228>
 800f462:	2308      	movs	r3, #8
 800f464:	e00c      	b.n	800f480 <HAL_GPIO_Init+0x228>
 800f466:	2306      	movs	r3, #6
 800f468:	e00a      	b.n	800f480 <HAL_GPIO_Init+0x228>
 800f46a:	2305      	movs	r3, #5
 800f46c:	e008      	b.n	800f480 <HAL_GPIO_Init+0x228>
 800f46e:	2304      	movs	r3, #4
 800f470:	e006      	b.n	800f480 <HAL_GPIO_Init+0x228>
 800f472:	2303      	movs	r3, #3
 800f474:	e004      	b.n	800f480 <HAL_GPIO_Init+0x228>
 800f476:	2302      	movs	r3, #2
 800f478:	e002      	b.n	800f480 <HAL_GPIO_Init+0x228>
 800f47a:	2301      	movs	r3, #1
 800f47c:	e000      	b.n	800f480 <HAL_GPIO_Init+0x228>
 800f47e:	2300      	movs	r3, #0
 800f480:	69fa      	ldr	r2, [r7, #28]
 800f482:	f002 0203 	and.w	r2, r2, #3
 800f486:	0092      	lsls	r2, r2, #2
 800f488:	4093      	lsls	r3, r2
 800f48a:	69ba      	ldr	r2, [r7, #24]
 800f48c:	4313      	orrs	r3, r2
 800f48e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f490:	4935      	ldr	r1, [pc, #212]	; (800f568 <HAL_GPIO_Init+0x310>)
 800f492:	69fb      	ldr	r3, [r7, #28]
 800f494:	089b      	lsrs	r3, r3, #2
 800f496:	3302      	adds	r3, #2
 800f498:	69ba      	ldr	r2, [r7, #24]
 800f49a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f49e:	4b3b      	ldr	r3, [pc, #236]	; (800f58c <HAL_GPIO_Init+0x334>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	43db      	mvns	r3, r3
 800f4a8:	69ba      	ldr	r2, [r7, #24]
 800f4aa:	4013      	ands	r3, r2
 800f4ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d003      	beq.n	800f4c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800f4ba:	69ba      	ldr	r2, [r7, #24]
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	4313      	orrs	r3, r2
 800f4c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800f4c2:	4a32      	ldr	r2, [pc, #200]	; (800f58c <HAL_GPIO_Init+0x334>)
 800f4c4:	69bb      	ldr	r3, [r7, #24]
 800f4c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800f4c8:	4b30      	ldr	r3, [pc, #192]	; (800f58c <HAL_GPIO_Init+0x334>)
 800f4ca:	685b      	ldr	r3, [r3, #4]
 800f4cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	43db      	mvns	r3, r3
 800f4d2:	69ba      	ldr	r2, [r7, #24]
 800f4d4:	4013      	ands	r3, r2
 800f4d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	685b      	ldr	r3, [r3, #4]
 800f4dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d003      	beq.n	800f4ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800f4e4:	69ba      	ldr	r2, [r7, #24]
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	4313      	orrs	r3, r2
 800f4ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800f4ec:	4a27      	ldr	r2, [pc, #156]	; (800f58c <HAL_GPIO_Init+0x334>)
 800f4ee:	69bb      	ldr	r3, [r7, #24]
 800f4f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f4f2:	4b26      	ldr	r3, [pc, #152]	; (800f58c <HAL_GPIO_Init+0x334>)
 800f4f4:	689b      	ldr	r3, [r3, #8]
 800f4f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	43db      	mvns	r3, r3
 800f4fc:	69ba      	ldr	r2, [r7, #24]
 800f4fe:	4013      	ands	r3, r2
 800f500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d003      	beq.n	800f516 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800f50e:	69ba      	ldr	r2, [r7, #24]
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	4313      	orrs	r3, r2
 800f514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800f516:	4a1d      	ldr	r2, [pc, #116]	; (800f58c <HAL_GPIO_Init+0x334>)
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800f51c:	4b1b      	ldr	r3, [pc, #108]	; (800f58c <HAL_GPIO_Init+0x334>)
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	43db      	mvns	r3, r3
 800f526:	69ba      	ldr	r2, [r7, #24]
 800f528:	4013      	ands	r3, r2
 800f52a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f534:	2b00      	cmp	r3, #0
 800f536:	d003      	beq.n	800f540 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800f538:	69ba      	ldr	r2, [r7, #24]
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	4313      	orrs	r3, r2
 800f53e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800f540:	4a12      	ldr	r2, [pc, #72]	; (800f58c <HAL_GPIO_Init+0x334>)
 800f542:	69bb      	ldr	r3, [r7, #24]
 800f544:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	3301      	adds	r3, #1
 800f54a:	61fb      	str	r3, [r7, #28]
 800f54c:	69fb      	ldr	r3, [r7, #28]
 800f54e:	2b0f      	cmp	r3, #15
 800f550:	f67f ae90 	bls.w	800f274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800f554:	bf00      	nop
 800f556:	bf00      	nop
 800f558:	3724      	adds	r7, #36	; 0x24
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop
 800f564:	40023800 	.word	0x40023800
 800f568:	40013800 	.word	0x40013800
 800f56c:	40020000 	.word	0x40020000
 800f570:	40020400 	.word	0x40020400
 800f574:	40020800 	.word	0x40020800
 800f578:	40020c00 	.word	0x40020c00
 800f57c:	40021000 	.word	0x40021000
 800f580:	40021400 	.word	0x40021400
 800f584:	40021800 	.word	0x40021800
 800f588:	40021c00 	.word	0x40021c00
 800f58c:	40013c00 	.word	0x40013c00

0800f590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f590:	b480      	push	{r7}
 800f592:	b083      	sub	sp, #12
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	460b      	mov	r3, r1
 800f59a:	807b      	strh	r3, [r7, #2]
 800f59c:	4613      	mov	r3, r2
 800f59e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f5a0:	787b      	ldrb	r3, [r7, #1]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d003      	beq.n	800f5ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f5a6:	887a      	ldrh	r2, [r7, #2]
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800f5ac:	e003      	b.n	800f5b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800f5ae:	887b      	ldrh	r3, [r7, #2]
 800f5b0:	041a      	lsls	r2, r3, #16
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	619a      	str	r2, [r3, #24]
}
 800f5b6:	bf00      	nop
 800f5b8:	370c      	adds	r7, #12
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
	...

0800f5c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b086      	sub	sp, #24
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d101      	bne.n	800f5d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	e264      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f003 0301 	and.w	r3, r3, #1
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d075      	beq.n	800f6ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f5e2:	4ba3      	ldr	r3, [pc, #652]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f5e4:	689b      	ldr	r3, [r3, #8]
 800f5e6:	f003 030c 	and.w	r3, r3, #12
 800f5ea:	2b04      	cmp	r3, #4
 800f5ec:	d00c      	beq.n	800f608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f5ee:	4ba0      	ldr	r3, [pc, #640]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f5f0:	689b      	ldr	r3, [r3, #8]
 800f5f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f5f6:	2b08      	cmp	r3, #8
 800f5f8:	d112      	bne.n	800f620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f5fa:	4b9d      	ldr	r3, [pc, #628]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f606:	d10b      	bne.n	800f620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f608:	4b99      	ldr	r3, [pc, #612]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f610:	2b00      	cmp	r3, #0
 800f612:	d05b      	beq.n	800f6cc <HAL_RCC_OscConfig+0x108>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d157      	bne.n	800f6cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800f61c:	2301      	movs	r3, #1
 800f61e:	e23f      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f628:	d106      	bne.n	800f638 <HAL_RCC_OscConfig+0x74>
 800f62a:	4b91      	ldr	r3, [pc, #580]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	4a90      	ldr	r2, [pc, #576]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f634:	6013      	str	r3, [r2, #0]
 800f636:	e01d      	b.n	800f674 <HAL_RCC_OscConfig+0xb0>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f640:	d10c      	bne.n	800f65c <HAL_RCC_OscConfig+0x98>
 800f642:	4b8b      	ldr	r3, [pc, #556]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	4a8a      	ldr	r2, [pc, #552]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f64c:	6013      	str	r3, [r2, #0]
 800f64e:	4b88      	ldr	r3, [pc, #544]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	4a87      	ldr	r2, [pc, #540]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f658:	6013      	str	r3, [r2, #0]
 800f65a:	e00b      	b.n	800f674 <HAL_RCC_OscConfig+0xb0>
 800f65c:	4b84      	ldr	r3, [pc, #528]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4a83      	ldr	r2, [pc, #524]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f666:	6013      	str	r3, [r2, #0]
 800f668:	4b81      	ldr	r3, [pc, #516]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	4a80      	ldr	r2, [pc, #512]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f66e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d013      	beq.n	800f6a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f67c:	f7fe f930 	bl	800d8e0 <HAL_GetTick>
 800f680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f682:	e008      	b.n	800f696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f684:	f7fe f92c 	bl	800d8e0 <HAL_GetTick>
 800f688:	4602      	mov	r2, r0
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	1ad3      	subs	r3, r2, r3
 800f68e:	2b64      	cmp	r3, #100	; 0x64
 800f690:	d901      	bls.n	800f696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800f692:	2303      	movs	r3, #3
 800f694:	e204      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f696:	4b76      	ldr	r3, [pc, #472]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d0f0      	beq.n	800f684 <HAL_RCC_OscConfig+0xc0>
 800f6a2:	e014      	b.n	800f6ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f6a4:	f7fe f91c 	bl	800d8e0 <HAL_GetTick>
 800f6a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f6aa:	e008      	b.n	800f6be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f6ac:	f7fe f918 	bl	800d8e0 <HAL_GetTick>
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	1ad3      	subs	r3, r2, r3
 800f6b6:	2b64      	cmp	r3, #100	; 0x64
 800f6b8:	d901      	bls.n	800f6be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f6ba:	2303      	movs	r3, #3
 800f6bc:	e1f0      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f6be:	4b6c      	ldr	r3, [pc, #432]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d1f0      	bne.n	800f6ac <HAL_RCC_OscConfig+0xe8>
 800f6ca:	e000      	b.n	800f6ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f6cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f003 0302 	and.w	r3, r3, #2
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d063      	beq.n	800f7a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f6da:	4b65      	ldr	r3, [pc, #404]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f6dc:	689b      	ldr	r3, [r3, #8]
 800f6de:	f003 030c 	and.w	r3, r3, #12
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d00b      	beq.n	800f6fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f6e6:	4b62      	ldr	r3, [pc, #392]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f6e8:	689b      	ldr	r3, [r3, #8]
 800f6ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f6ee:	2b08      	cmp	r3, #8
 800f6f0:	d11c      	bne.n	800f72c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f6f2:	4b5f      	ldr	r3, [pc, #380]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d116      	bne.n	800f72c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f6fe:	4b5c      	ldr	r3, [pc, #368]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	f003 0302 	and.w	r3, r3, #2
 800f706:	2b00      	cmp	r3, #0
 800f708:	d005      	beq.n	800f716 <HAL_RCC_OscConfig+0x152>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	68db      	ldr	r3, [r3, #12]
 800f70e:	2b01      	cmp	r3, #1
 800f710:	d001      	beq.n	800f716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f712:	2301      	movs	r3, #1
 800f714:	e1c4      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f716:	4b56      	ldr	r3, [pc, #344]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	691b      	ldr	r3, [r3, #16]
 800f722:	00db      	lsls	r3, r3, #3
 800f724:	4952      	ldr	r1, [pc, #328]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f726:	4313      	orrs	r3, r2
 800f728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f72a:	e03a      	b.n	800f7a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	68db      	ldr	r3, [r3, #12]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d020      	beq.n	800f776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f734:	4b4f      	ldr	r3, [pc, #316]	; (800f874 <HAL_RCC_OscConfig+0x2b0>)
 800f736:	2201      	movs	r2, #1
 800f738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f73a:	f7fe f8d1 	bl	800d8e0 <HAL_GetTick>
 800f73e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f740:	e008      	b.n	800f754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f742:	f7fe f8cd 	bl	800d8e0 <HAL_GetTick>
 800f746:	4602      	mov	r2, r0
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	1ad3      	subs	r3, r2, r3
 800f74c:	2b02      	cmp	r3, #2
 800f74e:	d901      	bls.n	800f754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f750:	2303      	movs	r3, #3
 800f752:	e1a5      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f754:	4b46      	ldr	r3, [pc, #280]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	f003 0302 	and.w	r3, r3, #2
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d0f0      	beq.n	800f742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f760:	4b43      	ldr	r3, [pc, #268]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	691b      	ldr	r3, [r3, #16]
 800f76c:	00db      	lsls	r3, r3, #3
 800f76e:	4940      	ldr	r1, [pc, #256]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f770:	4313      	orrs	r3, r2
 800f772:	600b      	str	r3, [r1, #0]
 800f774:	e015      	b.n	800f7a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f776:	4b3f      	ldr	r3, [pc, #252]	; (800f874 <HAL_RCC_OscConfig+0x2b0>)
 800f778:	2200      	movs	r2, #0
 800f77a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f77c:	f7fe f8b0 	bl	800d8e0 <HAL_GetTick>
 800f780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f782:	e008      	b.n	800f796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f784:	f7fe f8ac 	bl	800d8e0 <HAL_GetTick>
 800f788:	4602      	mov	r2, r0
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	1ad3      	subs	r3, r2, r3
 800f78e:	2b02      	cmp	r3, #2
 800f790:	d901      	bls.n	800f796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f792:	2303      	movs	r3, #3
 800f794:	e184      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f796:	4b36      	ldr	r3, [pc, #216]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f003 0302 	and.w	r3, r3, #2
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d1f0      	bne.n	800f784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	f003 0308 	and.w	r3, r3, #8
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d030      	beq.n	800f810 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	695b      	ldr	r3, [r3, #20]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d016      	beq.n	800f7e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f7b6:	4b30      	ldr	r3, [pc, #192]	; (800f878 <HAL_RCC_OscConfig+0x2b4>)
 800f7b8:	2201      	movs	r2, #1
 800f7ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f7bc:	f7fe f890 	bl	800d8e0 <HAL_GetTick>
 800f7c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f7c2:	e008      	b.n	800f7d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f7c4:	f7fe f88c 	bl	800d8e0 <HAL_GetTick>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	1ad3      	subs	r3, r2, r3
 800f7ce:	2b02      	cmp	r3, #2
 800f7d0:	d901      	bls.n	800f7d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f7d2:	2303      	movs	r3, #3
 800f7d4:	e164      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f7d6:	4b26      	ldr	r3, [pc, #152]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f7d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7da:	f003 0302 	and.w	r3, r3, #2
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d0f0      	beq.n	800f7c4 <HAL_RCC_OscConfig+0x200>
 800f7e2:	e015      	b.n	800f810 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f7e4:	4b24      	ldr	r3, [pc, #144]	; (800f878 <HAL_RCC_OscConfig+0x2b4>)
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f7ea:	f7fe f879 	bl	800d8e0 <HAL_GetTick>
 800f7ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f7f0:	e008      	b.n	800f804 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f7f2:	f7fe f875 	bl	800d8e0 <HAL_GetTick>
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	1ad3      	subs	r3, r2, r3
 800f7fc:	2b02      	cmp	r3, #2
 800f7fe:	d901      	bls.n	800f804 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800f800:	2303      	movs	r3, #3
 800f802:	e14d      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f804:	4b1a      	ldr	r3, [pc, #104]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f808:	f003 0302 	and.w	r3, r3, #2
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d1f0      	bne.n	800f7f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f003 0304 	and.w	r3, r3, #4
 800f818:	2b00      	cmp	r3, #0
 800f81a:	f000 80a0 	beq.w	800f95e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f81e:	2300      	movs	r3, #0
 800f820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f822:	4b13      	ldr	r3, [pc, #76]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d10f      	bne.n	800f84e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f82e:	2300      	movs	r3, #0
 800f830:	60bb      	str	r3, [r7, #8]
 800f832:	4b0f      	ldr	r3, [pc, #60]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f836:	4a0e      	ldr	r2, [pc, #56]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f83c:	6413      	str	r3, [r2, #64]	; 0x40
 800f83e:	4b0c      	ldr	r3, [pc, #48]	; (800f870 <HAL_RCC_OscConfig+0x2ac>)
 800f840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f846:	60bb      	str	r3, [r7, #8]
 800f848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f84a:	2301      	movs	r3, #1
 800f84c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f84e:	4b0b      	ldr	r3, [pc, #44]	; (800f87c <HAL_RCC_OscConfig+0x2b8>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f856:	2b00      	cmp	r3, #0
 800f858:	d121      	bne.n	800f89e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f85a:	4b08      	ldr	r3, [pc, #32]	; (800f87c <HAL_RCC_OscConfig+0x2b8>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	4a07      	ldr	r2, [pc, #28]	; (800f87c <HAL_RCC_OscConfig+0x2b8>)
 800f860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f866:	f7fe f83b 	bl	800d8e0 <HAL_GetTick>
 800f86a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f86c:	e011      	b.n	800f892 <HAL_RCC_OscConfig+0x2ce>
 800f86e:	bf00      	nop
 800f870:	40023800 	.word	0x40023800
 800f874:	42470000 	.word	0x42470000
 800f878:	42470e80 	.word	0x42470e80
 800f87c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f880:	f7fe f82e 	bl	800d8e0 <HAL_GetTick>
 800f884:	4602      	mov	r2, r0
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	1ad3      	subs	r3, r2, r3
 800f88a:	2b02      	cmp	r3, #2
 800f88c:	d901      	bls.n	800f892 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800f88e:	2303      	movs	r3, #3
 800f890:	e106      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f892:	4b85      	ldr	r3, [pc, #532]	; (800faa8 <HAL_RCC_OscConfig+0x4e4>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d0f0      	beq.n	800f880 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	689b      	ldr	r3, [r3, #8]
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d106      	bne.n	800f8b4 <HAL_RCC_OscConfig+0x2f0>
 800f8a6:	4b81      	ldr	r3, [pc, #516]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f8a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8aa:	4a80      	ldr	r2, [pc, #512]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f8ac:	f043 0301 	orr.w	r3, r3, #1
 800f8b0:	6713      	str	r3, [r2, #112]	; 0x70
 800f8b2:	e01c      	b.n	800f8ee <HAL_RCC_OscConfig+0x32a>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	2b05      	cmp	r3, #5
 800f8ba:	d10c      	bne.n	800f8d6 <HAL_RCC_OscConfig+0x312>
 800f8bc:	4b7b      	ldr	r3, [pc, #492]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f8be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8c0:	4a7a      	ldr	r2, [pc, #488]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f8c2:	f043 0304 	orr.w	r3, r3, #4
 800f8c6:	6713      	str	r3, [r2, #112]	; 0x70
 800f8c8:	4b78      	ldr	r3, [pc, #480]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f8ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8cc:	4a77      	ldr	r2, [pc, #476]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f8ce:	f043 0301 	orr.w	r3, r3, #1
 800f8d2:	6713      	str	r3, [r2, #112]	; 0x70
 800f8d4:	e00b      	b.n	800f8ee <HAL_RCC_OscConfig+0x32a>
 800f8d6:	4b75      	ldr	r3, [pc, #468]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8da:	4a74      	ldr	r2, [pc, #464]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f8dc:	f023 0301 	bic.w	r3, r3, #1
 800f8e0:	6713      	str	r3, [r2, #112]	; 0x70
 800f8e2:	4b72      	ldr	r3, [pc, #456]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8e6:	4a71      	ldr	r2, [pc, #452]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f8e8:	f023 0304 	bic.w	r3, r3, #4
 800f8ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	689b      	ldr	r3, [r3, #8]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d015      	beq.n	800f922 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f8f6:	f7fd fff3 	bl	800d8e0 <HAL_GetTick>
 800f8fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f8fc:	e00a      	b.n	800f914 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f8fe:	f7fd ffef 	bl	800d8e0 <HAL_GetTick>
 800f902:	4602      	mov	r2, r0
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	1ad3      	subs	r3, r2, r3
 800f908:	f241 3288 	movw	r2, #5000	; 0x1388
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d901      	bls.n	800f914 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800f910:	2303      	movs	r3, #3
 800f912:	e0c5      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f914:	4b65      	ldr	r3, [pc, #404]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f918:	f003 0302 	and.w	r3, r3, #2
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d0ee      	beq.n	800f8fe <HAL_RCC_OscConfig+0x33a>
 800f920:	e014      	b.n	800f94c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f922:	f7fd ffdd 	bl	800d8e0 <HAL_GetTick>
 800f926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f928:	e00a      	b.n	800f940 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f92a:	f7fd ffd9 	bl	800d8e0 <HAL_GetTick>
 800f92e:	4602      	mov	r2, r0
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	1ad3      	subs	r3, r2, r3
 800f934:	f241 3288 	movw	r2, #5000	; 0x1388
 800f938:	4293      	cmp	r3, r2
 800f93a:	d901      	bls.n	800f940 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800f93c:	2303      	movs	r3, #3
 800f93e:	e0af      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f940:	4b5a      	ldr	r3, [pc, #360]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f944:	f003 0302 	and.w	r3, r3, #2
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d1ee      	bne.n	800f92a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f94c:	7dfb      	ldrb	r3, [r7, #23]
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d105      	bne.n	800f95e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f952:	4b56      	ldr	r3, [pc, #344]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f956:	4a55      	ldr	r2, [pc, #340]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f95c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	699b      	ldr	r3, [r3, #24]
 800f962:	2b00      	cmp	r3, #0
 800f964:	f000 809b 	beq.w	800fa9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f968:	4b50      	ldr	r3, [pc, #320]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f96a:	689b      	ldr	r3, [r3, #8]
 800f96c:	f003 030c 	and.w	r3, r3, #12
 800f970:	2b08      	cmp	r3, #8
 800f972:	d05c      	beq.n	800fa2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	699b      	ldr	r3, [r3, #24]
 800f978:	2b02      	cmp	r3, #2
 800f97a:	d141      	bne.n	800fa00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f97c:	4b4c      	ldr	r3, [pc, #304]	; (800fab0 <HAL_RCC_OscConfig+0x4ec>)
 800f97e:	2200      	movs	r2, #0
 800f980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f982:	f7fd ffad 	bl	800d8e0 <HAL_GetTick>
 800f986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f988:	e008      	b.n	800f99c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f98a:	f7fd ffa9 	bl	800d8e0 <HAL_GetTick>
 800f98e:	4602      	mov	r2, r0
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	1ad3      	subs	r3, r2, r3
 800f994:	2b02      	cmp	r3, #2
 800f996:	d901      	bls.n	800f99c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800f998:	2303      	movs	r3, #3
 800f99a:	e081      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f99c:	4b43      	ldr	r3, [pc, #268]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d1f0      	bne.n	800f98a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	69da      	ldr	r2, [r3, #28]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6a1b      	ldr	r3, [r3, #32]
 800f9b0:	431a      	orrs	r2, r3
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b6:	019b      	lsls	r3, r3, #6
 800f9b8:	431a      	orrs	r2, r3
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9be:	085b      	lsrs	r3, r3, #1
 800f9c0:	3b01      	subs	r3, #1
 800f9c2:	041b      	lsls	r3, r3, #16
 800f9c4:	431a      	orrs	r2, r3
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ca:	061b      	lsls	r3, r3, #24
 800f9cc:	4937      	ldr	r1, [pc, #220]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f9d2:	4b37      	ldr	r3, [pc, #220]	; (800fab0 <HAL_RCC_OscConfig+0x4ec>)
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f9d8:	f7fd ff82 	bl	800d8e0 <HAL_GetTick>
 800f9dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f9de:	e008      	b.n	800f9f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f9e0:	f7fd ff7e 	bl	800d8e0 <HAL_GetTick>
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	1ad3      	subs	r3, r2, r3
 800f9ea:	2b02      	cmp	r3, #2
 800f9ec:	d901      	bls.n	800f9f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800f9ee:	2303      	movs	r3, #3
 800f9f0:	e056      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f9f2:	4b2e      	ldr	r3, [pc, #184]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d0f0      	beq.n	800f9e0 <HAL_RCC_OscConfig+0x41c>
 800f9fe:	e04e      	b.n	800fa9e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fa00:	4b2b      	ldr	r3, [pc, #172]	; (800fab0 <HAL_RCC_OscConfig+0x4ec>)
 800fa02:	2200      	movs	r2, #0
 800fa04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa06:	f7fd ff6b 	bl	800d8e0 <HAL_GetTick>
 800fa0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fa0c:	e008      	b.n	800fa20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fa0e:	f7fd ff67 	bl	800d8e0 <HAL_GetTick>
 800fa12:	4602      	mov	r2, r0
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	1ad3      	subs	r3, r2, r3
 800fa18:	2b02      	cmp	r3, #2
 800fa1a:	d901      	bls.n	800fa20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800fa1c:	2303      	movs	r3, #3
 800fa1e:	e03f      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fa20:	4b22      	ldr	r3, [pc, #136]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d1f0      	bne.n	800fa0e <HAL_RCC_OscConfig+0x44a>
 800fa2c:	e037      	b.n	800fa9e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	699b      	ldr	r3, [r3, #24]
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d101      	bne.n	800fa3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800fa36:	2301      	movs	r3, #1
 800fa38:	e032      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800fa3a:	4b1c      	ldr	r3, [pc, #112]	; (800faac <HAL_RCC_OscConfig+0x4e8>)
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	699b      	ldr	r3, [r3, #24]
 800fa44:	2b01      	cmp	r3, #1
 800fa46:	d028      	beq.n	800fa9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d121      	bne.n	800fa9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d11a      	bne.n	800fa9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800fa64:	68fa      	ldr	r2, [r7, #12]
 800fa66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800fa6a:	4013      	ands	r3, r2
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fa70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d111      	bne.n	800fa9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa80:	085b      	lsrs	r3, r3, #1
 800fa82:	3b01      	subs	r3, #1
 800fa84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d107      	bne.n	800fa9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d001      	beq.n	800fa9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e000      	b.n	800faa0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800fa9e:	2300      	movs	r3, #0
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3718      	adds	r7, #24
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}
 800faa8:	40007000 	.word	0x40007000
 800faac:	40023800 	.word	0x40023800
 800fab0:	42470060 	.word	0x42470060

0800fab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d101      	bne.n	800fac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fac4:	2301      	movs	r3, #1
 800fac6:	e0cc      	b.n	800fc62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fac8:	4b68      	ldr	r3, [pc, #416]	; (800fc6c <HAL_RCC_ClockConfig+0x1b8>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	f003 0307 	and.w	r3, r3, #7
 800fad0:	683a      	ldr	r2, [r7, #0]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d90c      	bls.n	800faf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fad6:	4b65      	ldr	r3, [pc, #404]	; (800fc6c <HAL_RCC_ClockConfig+0x1b8>)
 800fad8:	683a      	ldr	r2, [r7, #0]
 800fada:	b2d2      	uxtb	r2, r2
 800fadc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fade:	4b63      	ldr	r3, [pc, #396]	; (800fc6c <HAL_RCC_ClockConfig+0x1b8>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f003 0307 	and.w	r3, r3, #7
 800fae6:	683a      	ldr	r2, [r7, #0]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d001      	beq.n	800faf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800faec:	2301      	movs	r3, #1
 800faee:	e0b8      	b.n	800fc62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	f003 0302 	and.w	r3, r3, #2
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d020      	beq.n	800fb3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f003 0304 	and.w	r3, r3, #4
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d005      	beq.n	800fb14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800fb08:	4b59      	ldr	r3, [pc, #356]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fb0a:	689b      	ldr	r3, [r3, #8]
 800fb0c:	4a58      	ldr	r2, [pc, #352]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fb0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800fb12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	f003 0308 	and.w	r3, r3, #8
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d005      	beq.n	800fb2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800fb20:	4b53      	ldr	r3, [pc, #332]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fb22:	689b      	ldr	r3, [r3, #8]
 800fb24:	4a52      	ldr	r2, [pc, #328]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fb26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800fb2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fb2c:	4b50      	ldr	r3, [pc, #320]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fb2e:	689b      	ldr	r3, [r3, #8]
 800fb30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	689b      	ldr	r3, [r3, #8]
 800fb38:	494d      	ldr	r1, [pc, #308]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	f003 0301 	and.w	r3, r3, #1
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d044      	beq.n	800fbd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d107      	bne.n	800fb62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fb52:	4b47      	ldr	r3, [pc, #284]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d119      	bne.n	800fb92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fb5e:	2301      	movs	r3, #1
 800fb60:	e07f      	b.n	800fc62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	685b      	ldr	r3, [r3, #4]
 800fb66:	2b02      	cmp	r3, #2
 800fb68:	d003      	beq.n	800fb72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800fb6e:	2b03      	cmp	r3, #3
 800fb70:	d107      	bne.n	800fb82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fb72:	4b3f      	ldr	r3, [pc, #252]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d109      	bne.n	800fb92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fb7e:	2301      	movs	r3, #1
 800fb80:	e06f      	b.n	800fc62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fb82:	4b3b      	ldr	r3, [pc, #236]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f003 0302 	and.w	r3, r3, #2
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d101      	bne.n	800fb92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fb8e:	2301      	movs	r3, #1
 800fb90:	e067      	b.n	800fc62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800fb92:	4b37      	ldr	r3, [pc, #220]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fb94:	689b      	ldr	r3, [r3, #8]
 800fb96:	f023 0203 	bic.w	r2, r3, #3
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	4934      	ldr	r1, [pc, #208]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fba0:	4313      	orrs	r3, r2
 800fba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fba4:	f7fd fe9c 	bl	800d8e0 <HAL_GetTick>
 800fba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fbaa:	e00a      	b.n	800fbc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fbac:	f7fd fe98 	bl	800d8e0 <HAL_GetTick>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	1ad3      	subs	r3, r2, r3
 800fbb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d901      	bls.n	800fbc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800fbbe:	2303      	movs	r3, #3
 800fbc0:	e04f      	b.n	800fc62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fbc2:	4b2b      	ldr	r3, [pc, #172]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fbc4:	689b      	ldr	r3, [r3, #8]
 800fbc6:	f003 020c 	and.w	r2, r3, #12
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	009b      	lsls	r3, r3, #2
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d1eb      	bne.n	800fbac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800fbd4:	4b25      	ldr	r3, [pc, #148]	; (800fc6c <HAL_RCC_ClockConfig+0x1b8>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f003 0307 	and.w	r3, r3, #7
 800fbdc:	683a      	ldr	r2, [r7, #0]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d20c      	bcs.n	800fbfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fbe2:	4b22      	ldr	r3, [pc, #136]	; (800fc6c <HAL_RCC_ClockConfig+0x1b8>)
 800fbe4:	683a      	ldr	r2, [r7, #0]
 800fbe6:	b2d2      	uxtb	r2, r2
 800fbe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fbea:	4b20      	ldr	r3, [pc, #128]	; (800fc6c <HAL_RCC_ClockConfig+0x1b8>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f003 0307 	and.w	r3, r3, #7
 800fbf2:	683a      	ldr	r2, [r7, #0]
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d001      	beq.n	800fbfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	e032      	b.n	800fc62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f003 0304 	and.w	r3, r3, #4
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d008      	beq.n	800fc1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fc08:	4b19      	ldr	r3, [pc, #100]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fc0a:	689b      	ldr	r3, [r3, #8]
 800fc0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	4916      	ldr	r1, [pc, #88]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fc16:	4313      	orrs	r3, r2
 800fc18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	f003 0308 	and.w	r3, r3, #8
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d009      	beq.n	800fc3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800fc26:	4b12      	ldr	r3, [pc, #72]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fc28:	689b      	ldr	r3, [r3, #8]
 800fc2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	691b      	ldr	r3, [r3, #16]
 800fc32:	00db      	lsls	r3, r3, #3
 800fc34:	490e      	ldr	r1, [pc, #56]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fc36:	4313      	orrs	r3, r2
 800fc38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800fc3a:	f000 f821 	bl	800fc80 <HAL_RCC_GetSysClockFreq>
 800fc3e:	4602      	mov	r2, r0
 800fc40:	4b0b      	ldr	r3, [pc, #44]	; (800fc70 <HAL_RCC_ClockConfig+0x1bc>)
 800fc42:	689b      	ldr	r3, [r3, #8]
 800fc44:	091b      	lsrs	r3, r3, #4
 800fc46:	f003 030f 	and.w	r3, r3, #15
 800fc4a:	490a      	ldr	r1, [pc, #40]	; (800fc74 <HAL_RCC_ClockConfig+0x1c0>)
 800fc4c:	5ccb      	ldrb	r3, [r1, r3]
 800fc4e:	fa22 f303 	lsr.w	r3, r2, r3
 800fc52:	4a09      	ldr	r2, [pc, #36]	; (800fc78 <HAL_RCC_ClockConfig+0x1c4>)
 800fc54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800fc56:	4b09      	ldr	r3, [pc, #36]	; (800fc7c <HAL_RCC_ClockConfig+0x1c8>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7f2 fe46 	bl	80028ec <HAL_InitTick>

  return HAL_OK;
 800fc60:	2300      	movs	r3, #0
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3710      	adds	r7, #16
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	40023c00 	.word	0x40023c00
 800fc70:	40023800 	.word	0x40023800
 800fc74:	080166d0 	.word	0x080166d0
 800fc78:	20000004 	.word	0x20000004
 800fc7c:	200012e8 	.word	0x200012e8

0800fc80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fc80:	b5b0      	push	{r4, r5, r7, lr}
 800fc82:	b084      	sub	sp, #16
 800fc84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800fc86:	2100      	movs	r1, #0
 800fc88:	6079      	str	r1, [r7, #4]
 800fc8a:	2100      	movs	r1, #0
 800fc8c:	60f9      	str	r1, [r7, #12]
 800fc8e:	2100      	movs	r1, #0
 800fc90:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800fc92:	2100      	movs	r1, #0
 800fc94:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fc96:	4952      	ldr	r1, [pc, #328]	; (800fde0 <HAL_RCC_GetSysClockFreq+0x160>)
 800fc98:	6889      	ldr	r1, [r1, #8]
 800fc9a:	f001 010c 	and.w	r1, r1, #12
 800fc9e:	2908      	cmp	r1, #8
 800fca0:	d00d      	beq.n	800fcbe <HAL_RCC_GetSysClockFreq+0x3e>
 800fca2:	2908      	cmp	r1, #8
 800fca4:	f200 8094 	bhi.w	800fdd0 <HAL_RCC_GetSysClockFreq+0x150>
 800fca8:	2900      	cmp	r1, #0
 800fcaa:	d002      	beq.n	800fcb2 <HAL_RCC_GetSysClockFreq+0x32>
 800fcac:	2904      	cmp	r1, #4
 800fcae:	d003      	beq.n	800fcb8 <HAL_RCC_GetSysClockFreq+0x38>
 800fcb0:	e08e      	b.n	800fdd0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800fcb2:	4b4c      	ldr	r3, [pc, #304]	; (800fde4 <HAL_RCC_GetSysClockFreq+0x164>)
 800fcb4:	60bb      	str	r3, [r7, #8]
       break;
 800fcb6:	e08e      	b.n	800fdd6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800fcb8:	4b4b      	ldr	r3, [pc, #300]	; (800fde8 <HAL_RCC_GetSysClockFreq+0x168>)
 800fcba:	60bb      	str	r3, [r7, #8]
      break;
 800fcbc:	e08b      	b.n	800fdd6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800fcbe:	4948      	ldr	r1, [pc, #288]	; (800fde0 <HAL_RCC_GetSysClockFreq+0x160>)
 800fcc0:	6849      	ldr	r1, [r1, #4]
 800fcc2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800fcc6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800fcc8:	4945      	ldr	r1, [pc, #276]	; (800fde0 <HAL_RCC_GetSysClockFreq+0x160>)
 800fcca:	6849      	ldr	r1, [r1, #4]
 800fccc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800fcd0:	2900      	cmp	r1, #0
 800fcd2:	d024      	beq.n	800fd1e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fcd4:	4942      	ldr	r1, [pc, #264]	; (800fde0 <HAL_RCC_GetSysClockFreq+0x160>)
 800fcd6:	6849      	ldr	r1, [r1, #4]
 800fcd8:	0989      	lsrs	r1, r1, #6
 800fcda:	4608      	mov	r0, r1
 800fcdc:	f04f 0100 	mov.w	r1, #0
 800fce0:	f240 14ff 	movw	r4, #511	; 0x1ff
 800fce4:	f04f 0500 	mov.w	r5, #0
 800fce8:	ea00 0204 	and.w	r2, r0, r4
 800fcec:	ea01 0305 	and.w	r3, r1, r5
 800fcf0:	493d      	ldr	r1, [pc, #244]	; (800fde8 <HAL_RCC_GetSysClockFreq+0x168>)
 800fcf2:	fb01 f003 	mul.w	r0, r1, r3
 800fcf6:	2100      	movs	r1, #0
 800fcf8:	fb01 f102 	mul.w	r1, r1, r2
 800fcfc:	1844      	adds	r4, r0, r1
 800fcfe:	493a      	ldr	r1, [pc, #232]	; (800fde8 <HAL_RCC_GetSysClockFreq+0x168>)
 800fd00:	fba2 0101 	umull	r0, r1, r2, r1
 800fd04:	1863      	adds	r3, r4, r1
 800fd06:	4619      	mov	r1, r3
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	f04f 0300 	mov.w	r3, #0
 800fd10:	f7f0 ffac 	bl	8000c6c <__aeabi_uldivmod>
 800fd14:	4602      	mov	r2, r0
 800fd16:	460b      	mov	r3, r1
 800fd18:	4613      	mov	r3, r2
 800fd1a:	60fb      	str	r3, [r7, #12]
 800fd1c:	e04a      	b.n	800fdb4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fd1e:	4b30      	ldr	r3, [pc, #192]	; (800fde0 <HAL_RCC_GetSysClockFreq+0x160>)
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	099b      	lsrs	r3, r3, #6
 800fd24:	461a      	mov	r2, r3
 800fd26:	f04f 0300 	mov.w	r3, #0
 800fd2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800fd2e:	f04f 0100 	mov.w	r1, #0
 800fd32:	ea02 0400 	and.w	r4, r2, r0
 800fd36:	ea03 0501 	and.w	r5, r3, r1
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	4629      	mov	r1, r5
 800fd3e:	f04f 0200 	mov.w	r2, #0
 800fd42:	f04f 0300 	mov.w	r3, #0
 800fd46:	014b      	lsls	r3, r1, #5
 800fd48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800fd4c:	0142      	lsls	r2, r0, #5
 800fd4e:	4610      	mov	r0, r2
 800fd50:	4619      	mov	r1, r3
 800fd52:	1b00      	subs	r0, r0, r4
 800fd54:	eb61 0105 	sbc.w	r1, r1, r5
 800fd58:	f04f 0200 	mov.w	r2, #0
 800fd5c:	f04f 0300 	mov.w	r3, #0
 800fd60:	018b      	lsls	r3, r1, #6
 800fd62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800fd66:	0182      	lsls	r2, r0, #6
 800fd68:	1a12      	subs	r2, r2, r0
 800fd6a:	eb63 0301 	sbc.w	r3, r3, r1
 800fd6e:	f04f 0000 	mov.w	r0, #0
 800fd72:	f04f 0100 	mov.w	r1, #0
 800fd76:	00d9      	lsls	r1, r3, #3
 800fd78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fd7c:	00d0      	lsls	r0, r2, #3
 800fd7e:	4602      	mov	r2, r0
 800fd80:	460b      	mov	r3, r1
 800fd82:	1912      	adds	r2, r2, r4
 800fd84:	eb45 0303 	adc.w	r3, r5, r3
 800fd88:	f04f 0000 	mov.w	r0, #0
 800fd8c:	f04f 0100 	mov.w	r1, #0
 800fd90:	0299      	lsls	r1, r3, #10
 800fd92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800fd96:	0290      	lsls	r0, r2, #10
 800fd98:	4602      	mov	r2, r0
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	4610      	mov	r0, r2
 800fd9e:	4619      	mov	r1, r3
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	461a      	mov	r2, r3
 800fda4:	f04f 0300 	mov.w	r3, #0
 800fda8:	f7f0 ff60 	bl	8000c6c <__aeabi_uldivmod>
 800fdac:	4602      	mov	r2, r0
 800fdae:	460b      	mov	r3, r1
 800fdb0:	4613      	mov	r3, r2
 800fdb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800fdb4:	4b0a      	ldr	r3, [pc, #40]	; (800fde0 <HAL_RCC_GetSysClockFreq+0x160>)
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	0c1b      	lsrs	r3, r3, #16
 800fdba:	f003 0303 	and.w	r3, r3, #3
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	005b      	lsls	r3, r3, #1
 800fdc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800fdc4:	68fa      	ldr	r2, [r7, #12]
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdcc:	60bb      	str	r3, [r7, #8]
      break;
 800fdce:	e002      	b.n	800fdd6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800fdd0:	4b04      	ldr	r3, [pc, #16]	; (800fde4 <HAL_RCC_GetSysClockFreq+0x164>)
 800fdd2:	60bb      	str	r3, [r7, #8]
      break;
 800fdd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800fdd6:	68bb      	ldr	r3, [r7, #8]
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3710      	adds	r7, #16
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bdb0      	pop	{r4, r5, r7, pc}
 800fde0:	40023800 	.word	0x40023800
 800fde4:	00f42400 	.word	0x00f42400
 800fde8:	017d7840 	.word	0x017d7840

0800fdec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fdec:	b480      	push	{r7}
 800fdee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fdf0:	4b03      	ldr	r3, [pc, #12]	; (800fe00 <HAL_RCC_GetHCLKFreq+0x14>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfc:	4770      	bx	lr
 800fdfe:	bf00      	nop
 800fe00:	20000004 	.word	0x20000004

0800fe04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800fe08:	f7ff fff0 	bl	800fdec <HAL_RCC_GetHCLKFreq>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	4b05      	ldr	r3, [pc, #20]	; (800fe24 <HAL_RCC_GetPCLK1Freq+0x20>)
 800fe10:	689b      	ldr	r3, [r3, #8]
 800fe12:	0a9b      	lsrs	r3, r3, #10
 800fe14:	f003 0307 	and.w	r3, r3, #7
 800fe18:	4903      	ldr	r1, [pc, #12]	; (800fe28 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fe1a:	5ccb      	ldrb	r3, [r1, r3]
 800fe1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	40023800 	.word	0x40023800
 800fe28:	080166e0 	.word	0x080166e0

0800fe2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b083      	sub	sp, #12
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	220f      	movs	r2, #15
 800fe3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800fe3c:	4b12      	ldr	r3, [pc, #72]	; (800fe88 <HAL_RCC_GetClockConfig+0x5c>)
 800fe3e:	689b      	ldr	r3, [r3, #8]
 800fe40:	f003 0203 	and.w	r2, r3, #3
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800fe48:	4b0f      	ldr	r3, [pc, #60]	; (800fe88 <HAL_RCC_GetClockConfig+0x5c>)
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800fe54:	4b0c      	ldr	r3, [pc, #48]	; (800fe88 <HAL_RCC_GetClockConfig+0x5c>)
 800fe56:	689b      	ldr	r3, [r3, #8]
 800fe58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800fe60:	4b09      	ldr	r3, [pc, #36]	; (800fe88 <HAL_RCC_GetClockConfig+0x5c>)
 800fe62:	689b      	ldr	r3, [r3, #8]
 800fe64:	08db      	lsrs	r3, r3, #3
 800fe66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800fe6e:	4b07      	ldr	r3, [pc, #28]	; (800fe8c <HAL_RCC_GetClockConfig+0x60>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	f003 0207 	and.w	r2, r3, #7
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	601a      	str	r2, [r3, #0]
}
 800fe7a:	bf00      	nop
 800fe7c:	370c      	adds	r7, #12
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe84:	4770      	bx	lr
 800fe86:	bf00      	nop
 800fe88:	40023800 	.word	0x40023800
 800fe8c:	40023c00 	.word	0x40023c00

0800fe90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d101      	bne.n	800fea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fe9e:	2301      	movs	r3, #1
 800fea0:	e07b      	b.n	800ff9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d108      	bne.n	800febc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800feb2:	d009      	beq.n	800fec8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	61da      	str	r2, [r3, #28]
 800feba:	e005      	b.n	800fec8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2200      	movs	r2, #0
 800fec6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2200      	movs	r2, #0
 800fecc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fed4:	b2db      	uxtb	r3, r3
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d106      	bne.n	800fee8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2200      	movs	r2, #0
 800fede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f7f2 fc6e 	bl	80027c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2202      	movs	r2, #2
 800feec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	681a      	ldr	r2, [r3, #0]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fefe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	689b      	ldr	r3, [r3, #8]
 800ff0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ff10:	431a      	orrs	r2, r3
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ff1a:	431a      	orrs	r2, r3
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	691b      	ldr	r3, [r3, #16]
 800ff20:	f003 0302 	and.w	r3, r3, #2
 800ff24:	431a      	orrs	r2, r3
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	695b      	ldr	r3, [r3, #20]
 800ff2a:	f003 0301 	and.w	r3, r3, #1
 800ff2e:	431a      	orrs	r2, r3
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	699b      	ldr	r3, [r3, #24]
 800ff34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ff38:	431a      	orrs	r2, r3
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	69db      	ldr	r3, [r3, #28]
 800ff3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ff42:	431a      	orrs	r2, r3
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	6a1b      	ldr	r3, [r3, #32]
 800ff48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff4c:	ea42 0103 	orr.w	r1, r2, r3
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	430a      	orrs	r2, r1
 800ff5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	699b      	ldr	r3, [r3, #24]
 800ff64:	0c1b      	lsrs	r3, r3, #16
 800ff66:	f003 0104 	and.w	r1, r3, #4
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff6e:	f003 0210 	and.w	r2, r3, #16
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	430a      	orrs	r2, r1
 800ff78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	69da      	ldr	r2, [r3, #28]
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ff88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2201      	movs	r2, #1
 800ff94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ff98:	2300      	movs	r3, #0
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3708      	adds	r7, #8
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}

0800ffa2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ffa2:	b580      	push	{r7, lr}
 800ffa4:	b082      	sub	sp, #8
 800ffa6:	af00      	add	r7, sp, #0
 800ffa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d101      	bne.n	800ffb4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	e041      	b.n	8010038 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ffba:	b2db      	uxtb	r3, r3
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d106      	bne.n	800ffce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f7f2 feeb 	bl	8002da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2202      	movs	r2, #2
 800ffd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	3304      	adds	r3, #4
 800ffde:	4619      	mov	r1, r3
 800ffe0:	4610      	mov	r0, r2
 800ffe2:	f000 fce7 	bl	80109b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2201      	movs	r2, #1
 800ffea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2201      	movs	r2, #1
 800fff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2201      	movs	r2, #1
 800fffa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2201      	movs	r2, #1
 8010002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2201      	movs	r2, #1
 801000a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2201      	movs	r2, #1
 8010012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2201      	movs	r2, #1
 801001a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2201      	movs	r2, #1
 8010022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2201      	movs	r2, #1
 801002a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2201      	movs	r2, #1
 8010032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010036:	2300      	movs	r3, #0
}
 8010038:	4618      	mov	r0, r3
 801003a:	3708      	adds	r7, #8
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010040:	b480      	push	{r7}
 8010042:	b085      	sub	sp, #20
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801004e:	b2db      	uxtb	r3, r3
 8010050:	2b01      	cmp	r3, #1
 8010052:	d001      	beq.n	8010058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010054:	2301      	movs	r3, #1
 8010056:	e04e      	b.n	80100f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2202      	movs	r2, #2
 801005c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	68da      	ldr	r2, [r3, #12]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f042 0201 	orr.w	r2, r2, #1
 801006e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	4a23      	ldr	r2, [pc, #140]	; (8010104 <HAL_TIM_Base_Start_IT+0xc4>)
 8010076:	4293      	cmp	r3, r2
 8010078:	d022      	beq.n	80100c0 <HAL_TIM_Base_Start_IT+0x80>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010082:	d01d      	beq.n	80100c0 <HAL_TIM_Base_Start_IT+0x80>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	4a1f      	ldr	r2, [pc, #124]	; (8010108 <HAL_TIM_Base_Start_IT+0xc8>)
 801008a:	4293      	cmp	r3, r2
 801008c:	d018      	beq.n	80100c0 <HAL_TIM_Base_Start_IT+0x80>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	4a1e      	ldr	r2, [pc, #120]	; (801010c <HAL_TIM_Base_Start_IT+0xcc>)
 8010094:	4293      	cmp	r3, r2
 8010096:	d013      	beq.n	80100c0 <HAL_TIM_Base_Start_IT+0x80>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4a1c      	ldr	r2, [pc, #112]	; (8010110 <HAL_TIM_Base_Start_IT+0xd0>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d00e      	beq.n	80100c0 <HAL_TIM_Base_Start_IT+0x80>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	4a1b      	ldr	r2, [pc, #108]	; (8010114 <HAL_TIM_Base_Start_IT+0xd4>)
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d009      	beq.n	80100c0 <HAL_TIM_Base_Start_IT+0x80>
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4a19      	ldr	r2, [pc, #100]	; (8010118 <HAL_TIM_Base_Start_IT+0xd8>)
 80100b2:	4293      	cmp	r3, r2
 80100b4:	d004      	beq.n	80100c0 <HAL_TIM_Base_Start_IT+0x80>
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	4a18      	ldr	r2, [pc, #96]	; (801011c <HAL_TIM_Base_Start_IT+0xdc>)
 80100bc:	4293      	cmp	r3, r2
 80100be:	d111      	bne.n	80100e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	689b      	ldr	r3, [r3, #8]
 80100c6:	f003 0307 	and.w	r3, r3, #7
 80100ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2b06      	cmp	r3, #6
 80100d0:	d010      	beq.n	80100f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f042 0201 	orr.w	r2, r2, #1
 80100e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80100e2:	e007      	b.n	80100f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	681a      	ldr	r2, [r3, #0]
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	f042 0201 	orr.w	r2, r2, #1
 80100f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80100f4:	2300      	movs	r3, #0
}
 80100f6:	4618      	mov	r0, r3
 80100f8:	3714      	adds	r7, #20
 80100fa:	46bd      	mov	sp, r7
 80100fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010100:	4770      	bx	lr
 8010102:	bf00      	nop
 8010104:	40010000 	.word	0x40010000
 8010108:	40000400 	.word	0x40000400
 801010c:	40000800 	.word	0x40000800
 8010110:	40000c00 	.word	0x40000c00
 8010114:	40010400 	.word	0x40010400
 8010118:	40014000 	.word	0x40014000
 801011c:	40001800 	.word	0x40001800

08010120 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d101      	bne.n	8010132 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801012e:	2301      	movs	r3, #1
 8010130:	e041      	b.n	80101b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010138:	b2db      	uxtb	r3, r3
 801013a:	2b00      	cmp	r3, #0
 801013c:	d106      	bne.n	801014c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2200      	movs	r2, #0
 8010142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f000 f839 	bl	80101be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2202      	movs	r2, #2
 8010150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681a      	ldr	r2, [r3, #0]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	3304      	adds	r3, #4
 801015c:	4619      	mov	r1, r3
 801015e:	4610      	mov	r0, r2
 8010160:	f000 fc28 	bl	80109b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2201      	movs	r2, #1
 8010168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2201      	movs	r2, #1
 8010170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2201      	movs	r2, #1
 8010178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2201      	movs	r2, #1
 8010180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2201      	movs	r2, #1
 8010188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2201      	movs	r2, #1
 8010190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2201      	movs	r2, #1
 8010198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2201      	movs	r2, #1
 80101a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2201      	movs	r2, #1
 80101a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2201      	movs	r2, #1
 80101b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80101b4:	2300      	movs	r3, #0
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}

080101be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80101be:	b480      	push	{r7}
 80101c0:	b083      	sub	sp, #12
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80101c6:	bf00      	nop
 80101c8:	370c      	adds	r7, #12
 80101ca:	46bd      	mov	sp, r7
 80101cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d0:	4770      	bx	lr

080101d2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80101d2:	b580      	push	{r7, lr}
 80101d4:	b082      	sub	sp, #8
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d101      	bne.n	80101e4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80101e0:	2301      	movs	r3, #1
 80101e2:	e041      	b.n	8010268 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80101ea:	b2db      	uxtb	r3, r3
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d106      	bne.n	80101fe <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2200      	movs	r2, #0
 80101f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	f000 f839 	bl	8010270 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2202      	movs	r2, #2
 8010202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	3304      	adds	r3, #4
 801020e:	4619      	mov	r1, r3
 8010210:	4610      	mov	r0, r2
 8010212:	f000 fbcf 	bl	80109b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2201      	movs	r2, #1
 801021a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2201      	movs	r2, #1
 8010222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2201      	movs	r2, #1
 801022a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2201      	movs	r2, #1
 8010232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2201      	movs	r2, #1
 801023a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2201      	movs	r2, #1
 8010242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2201      	movs	r2, #1
 801024a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2201      	movs	r2, #1
 8010252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2201      	movs	r2, #1
 801025a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2201      	movs	r2, #1
 8010262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010266:	2300      	movs	r3, #0
}
 8010268:	4618      	mov	r0, r3
 801026a:	3708      	adds	r7, #8
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}

08010270 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8010270:	b480      	push	{r7}
 8010272:	b083      	sub	sp, #12
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8010278:	bf00      	nop
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	691b      	ldr	r3, [r3, #16]
 8010292:	f003 0302 	and.w	r3, r3, #2
 8010296:	2b02      	cmp	r3, #2
 8010298:	d122      	bne.n	80102e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	68db      	ldr	r3, [r3, #12]
 80102a0:	f003 0302 	and.w	r3, r3, #2
 80102a4:	2b02      	cmp	r3, #2
 80102a6:	d11b      	bne.n	80102e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	f06f 0202 	mvn.w	r2, #2
 80102b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2201      	movs	r2, #1
 80102b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	699b      	ldr	r3, [r3, #24]
 80102be:	f003 0303 	and.w	r3, r3, #3
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d003      	beq.n	80102ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f000 fb55 	bl	8010976 <HAL_TIM_IC_CaptureCallback>
 80102cc:	e005      	b.n	80102da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f000 fb47 	bl	8010962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f000 fb58 	bl	801098a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2200      	movs	r2, #0
 80102de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	691b      	ldr	r3, [r3, #16]
 80102e6:	f003 0304 	and.w	r3, r3, #4
 80102ea:	2b04      	cmp	r3, #4
 80102ec:	d122      	bne.n	8010334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	f003 0304 	and.w	r3, r3, #4
 80102f8:	2b04      	cmp	r3, #4
 80102fa:	d11b      	bne.n	8010334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f06f 0204 	mvn.w	r2, #4
 8010304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2202      	movs	r2, #2
 801030a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	699b      	ldr	r3, [r3, #24]
 8010312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010316:	2b00      	cmp	r3, #0
 8010318:	d003      	beq.n	8010322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f000 fb2b 	bl	8010976 <HAL_TIM_IC_CaptureCallback>
 8010320:	e005      	b.n	801032e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f000 fb1d 	bl	8010962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f000 fb2e 	bl	801098a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2200      	movs	r2, #0
 8010332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	691b      	ldr	r3, [r3, #16]
 801033a:	f003 0308 	and.w	r3, r3, #8
 801033e:	2b08      	cmp	r3, #8
 8010340:	d122      	bne.n	8010388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	68db      	ldr	r3, [r3, #12]
 8010348:	f003 0308 	and.w	r3, r3, #8
 801034c:	2b08      	cmp	r3, #8
 801034e:	d11b      	bne.n	8010388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	f06f 0208 	mvn.w	r2, #8
 8010358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2204      	movs	r2, #4
 801035e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	69db      	ldr	r3, [r3, #28]
 8010366:	f003 0303 	and.w	r3, r3, #3
 801036a:	2b00      	cmp	r3, #0
 801036c:	d003      	beq.n	8010376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 fb01 	bl	8010976 <HAL_TIM_IC_CaptureCallback>
 8010374:	e005      	b.n	8010382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f000 faf3 	bl	8010962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f000 fb04 	bl	801098a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2200      	movs	r2, #0
 8010386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	691b      	ldr	r3, [r3, #16]
 801038e:	f003 0310 	and.w	r3, r3, #16
 8010392:	2b10      	cmp	r3, #16
 8010394:	d122      	bne.n	80103dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	68db      	ldr	r3, [r3, #12]
 801039c:	f003 0310 	and.w	r3, r3, #16
 80103a0:	2b10      	cmp	r3, #16
 80103a2:	d11b      	bne.n	80103dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	f06f 0210 	mvn.w	r2, #16
 80103ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2208      	movs	r2, #8
 80103b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	69db      	ldr	r3, [r3, #28]
 80103ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d003      	beq.n	80103ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f000 fad7 	bl	8010976 <HAL_TIM_IC_CaptureCallback>
 80103c8:	e005      	b.n	80103d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f000 fac9 	bl	8010962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f000 fada 	bl	801098a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2200      	movs	r2, #0
 80103da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	691b      	ldr	r3, [r3, #16]
 80103e2:	f003 0301 	and.w	r3, r3, #1
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d10e      	bne.n	8010408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	68db      	ldr	r3, [r3, #12]
 80103f0:	f003 0301 	and.w	r3, r3, #1
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d107      	bne.n	8010408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	f06f 0201 	mvn.w	r2, #1
 8010400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f7f2 f89e 	bl	8002544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	691b      	ldr	r3, [r3, #16]
 801040e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010412:	2b80      	cmp	r3, #128	; 0x80
 8010414:	d10e      	bne.n	8010434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010420:	2b80      	cmp	r3, #128	; 0x80
 8010422:	d107      	bne.n	8010434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801042c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f001 f83e 	bl	80114b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	691b      	ldr	r3, [r3, #16]
 801043a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801043e:	2b40      	cmp	r3, #64	; 0x40
 8010440:	d10e      	bne.n	8010460 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801044c:	2b40      	cmp	r3, #64	; 0x40
 801044e:	d107      	bne.n	8010460 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f000 fa9f 	bl	801099e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	691b      	ldr	r3, [r3, #16]
 8010466:	f003 0320 	and.w	r3, r3, #32
 801046a:	2b20      	cmp	r3, #32
 801046c:	d10e      	bne.n	801048c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	68db      	ldr	r3, [r3, #12]
 8010474:	f003 0320 	and.w	r3, r3, #32
 8010478:	2b20      	cmp	r3, #32
 801047a:	d107      	bne.n	801048c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f06f 0220 	mvn.w	r2, #32
 8010484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f001 f808 	bl	801149c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801048c:	bf00      	nop
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b086      	sub	sp, #24
 8010498:	af00      	add	r7, sp, #0
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	60b9      	str	r1, [r7, #8]
 801049e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80104a0:	2300      	movs	r3, #0
 80104a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	d101      	bne.n	80104b2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80104ae:	2302      	movs	r3, #2
 80104b0:	e088      	b.n	80105c4 <HAL_TIM_IC_ConfigChannel+0x130>
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	2201      	movs	r2, #1
 80104b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d11b      	bne.n	80104f8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	6818      	ldr	r0, [r3, #0]
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	6819      	ldr	r1, [r3, #0]
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	685a      	ldr	r2, [r3, #4]
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	f000 fd52 	bl	8010f78 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	699a      	ldr	r2, [r3, #24]
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	f022 020c 	bic.w	r2, r2, #12
 80104e2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	6999      	ldr	r1, [r3, #24]
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	689a      	ldr	r2, [r3, #8]
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	430a      	orrs	r2, r1
 80104f4:	619a      	str	r2, [r3, #24]
 80104f6:	e060      	b.n	80105ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2b04      	cmp	r3, #4
 80104fc:	d11c      	bne.n	8010538 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	6818      	ldr	r0, [r3, #0]
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	6819      	ldr	r1, [r3, #0]
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	685a      	ldr	r2, [r3, #4]
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	f000 fdd6 	bl	80110be <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	699a      	ldr	r2, [r3, #24]
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010520:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	6999      	ldr	r1, [r3, #24]
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	689b      	ldr	r3, [r3, #8]
 801052c:	021a      	lsls	r2, r3, #8
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	430a      	orrs	r2, r1
 8010534:	619a      	str	r2, [r3, #24]
 8010536:	e040      	b.n	80105ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2b08      	cmp	r3, #8
 801053c:	d11b      	bne.n	8010576 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	6818      	ldr	r0, [r3, #0]
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	6819      	ldr	r1, [r3, #0]
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	685a      	ldr	r2, [r3, #4]
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	68db      	ldr	r3, [r3, #12]
 801054e:	f000 fe23 	bl	8011198 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	69da      	ldr	r2, [r3, #28]
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f022 020c 	bic.w	r2, r2, #12
 8010560:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	69d9      	ldr	r1, [r3, #28]
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	689a      	ldr	r2, [r3, #8]
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	430a      	orrs	r2, r1
 8010572:	61da      	str	r2, [r3, #28]
 8010574:	e021      	b.n	80105ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2b0c      	cmp	r3, #12
 801057a:	d11c      	bne.n	80105b6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	6818      	ldr	r0, [r3, #0]
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	6819      	ldr	r1, [r3, #0]
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	685a      	ldr	r2, [r3, #4]
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	68db      	ldr	r3, [r3, #12]
 801058c:	f000 fe40 	bl	8011210 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	69da      	ldr	r2, [r3, #28]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801059e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	69d9      	ldr	r1, [r3, #28]
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	689b      	ldr	r3, [r3, #8]
 80105aa:	021a      	lsls	r2, r3, #8
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	430a      	orrs	r2, r1
 80105b2:	61da      	str	r2, [r3, #28]
 80105b4:	e001      	b.n	80105ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80105b6:	2301      	movs	r3, #1
 80105b8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2200      	movs	r2, #0
 80105be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80105c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3718      	adds	r7, #24
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b086      	sub	sp, #24
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	60f8      	str	r0, [r7, #12]
 80105d4:	60b9      	str	r1, [r7, #8]
 80105d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80105d8:	2300      	movs	r3, #0
 80105da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105e2:	2b01      	cmp	r3, #1
 80105e4:	d101      	bne.n	80105ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80105e6:	2302      	movs	r3, #2
 80105e8:	e0ae      	b.n	8010748 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2201      	movs	r2, #1
 80105ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2b0c      	cmp	r3, #12
 80105f6:	f200 809f 	bhi.w	8010738 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80105fa:	a201      	add	r2, pc, #4	; (adr r2, 8010600 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80105fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010600:	08010635 	.word	0x08010635
 8010604:	08010739 	.word	0x08010739
 8010608:	08010739 	.word	0x08010739
 801060c:	08010739 	.word	0x08010739
 8010610:	08010675 	.word	0x08010675
 8010614:	08010739 	.word	0x08010739
 8010618:	08010739 	.word	0x08010739
 801061c:	08010739 	.word	0x08010739
 8010620:	080106b7 	.word	0x080106b7
 8010624:	08010739 	.word	0x08010739
 8010628:	08010739 	.word	0x08010739
 801062c:	08010739 	.word	0x08010739
 8010630:	080106f7 	.word	0x080106f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	68b9      	ldr	r1, [r7, #8]
 801063a:	4618      	mov	r0, r3
 801063c:	f000 fa5a 	bl	8010af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	699a      	ldr	r2, [r3, #24]
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	f042 0208 	orr.w	r2, r2, #8
 801064e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	699a      	ldr	r2, [r3, #24]
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	f022 0204 	bic.w	r2, r2, #4
 801065e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	6999      	ldr	r1, [r3, #24]
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	691a      	ldr	r2, [r3, #16]
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	430a      	orrs	r2, r1
 8010670:	619a      	str	r2, [r3, #24]
      break;
 8010672:	e064      	b.n	801073e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	68b9      	ldr	r1, [r7, #8]
 801067a:	4618      	mov	r0, r3
 801067c:	f000 faaa 	bl	8010bd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	699a      	ldr	r2, [r3, #24]
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801068e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	699a      	ldr	r2, [r3, #24]
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801069e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	6999      	ldr	r1, [r3, #24]
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	691b      	ldr	r3, [r3, #16]
 80106aa:	021a      	lsls	r2, r3, #8
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	430a      	orrs	r2, r1
 80106b2:	619a      	str	r2, [r3, #24]
      break;
 80106b4:	e043      	b.n	801073e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	68b9      	ldr	r1, [r7, #8]
 80106bc:	4618      	mov	r0, r3
 80106be:	f000 faff 	bl	8010cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	69da      	ldr	r2, [r3, #28]
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	f042 0208 	orr.w	r2, r2, #8
 80106d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	69da      	ldr	r2, [r3, #28]
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	f022 0204 	bic.w	r2, r2, #4
 80106e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	69d9      	ldr	r1, [r3, #28]
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	691a      	ldr	r2, [r3, #16]
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	430a      	orrs	r2, r1
 80106f2:	61da      	str	r2, [r3, #28]
      break;
 80106f4:	e023      	b.n	801073e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	68b9      	ldr	r1, [r7, #8]
 80106fc:	4618      	mov	r0, r3
 80106fe:	f000 fb53 	bl	8010da8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	69da      	ldr	r2, [r3, #28]
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	69da      	ldr	r2, [r3, #28]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	69d9      	ldr	r1, [r3, #28]
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	691b      	ldr	r3, [r3, #16]
 801072c:	021a      	lsls	r2, r3, #8
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	430a      	orrs	r2, r1
 8010734:	61da      	str	r2, [r3, #28]
      break;
 8010736:	e002      	b.n	801073e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8010738:	2301      	movs	r3, #1
 801073a:	75fb      	strb	r3, [r7, #23]
      break;
 801073c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2200      	movs	r2, #0
 8010742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010746:	7dfb      	ldrb	r3, [r7, #23]
}
 8010748:	4618      	mov	r0, r3
 801074a:	3718      	adds	r7, #24
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b084      	sub	sp, #16
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801075a:	2300      	movs	r3, #0
 801075c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010764:	2b01      	cmp	r3, #1
 8010766:	d101      	bne.n	801076c <HAL_TIM_ConfigClockSource+0x1c>
 8010768:	2302      	movs	r3, #2
 801076a:	e0b4      	b.n	80108d6 <HAL_TIM_ConfigClockSource+0x186>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2201      	movs	r2, #1
 8010770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2202      	movs	r2, #2
 8010778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	689b      	ldr	r3, [r3, #8]
 8010782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801078a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	68ba      	ldr	r2, [r7, #8]
 801079a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80107a4:	d03e      	beq.n	8010824 <HAL_TIM_ConfigClockSource+0xd4>
 80107a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80107aa:	f200 8087 	bhi.w	80108bc <HAL_TIM_ConfigClockSource+0x16c>
 80107ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80107b2:	f000 8086 	beq.w	80108c2 <HAL_TIM_ConfigClockSource+0x172>
 80107b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80107ba:	d87f      	bhi.n	80108bc <HAL_TIM_ConfigClockSource+0x16c>
 80107bc:	2b70      	cmp	r3, #112	; 0x70
 80107be:	d01a      	beq.n	80107f6 <HAL_TIM_ConfigClockSource+0xa6>
 80107c0:	2b70      	cmp	r3, #112	; 0x70
 80107c2:	d87b      	bhi.n	80108bc <HAL_TIM_ConfigClockSource+0x16c>
 80107c4:	2b60      	cmp	r3, #96	; 0x60
 80107c6:	d050      	beq.n	801086a <HAL_TIM_ConfigClockSource+0x11a>
 80107c8:	2b60      	cmp	r3, #96	; 0x60
 80107ca:	d877      	bhi.n	80108bc <HAL_TIM_ConfigClockSource+0x16c>
 80107cc:	2b50      	cmp	r3, #80	; 0x50
 80107ce:	d03c      	beq.n	801084a <HAL_TIM_ConfigClockSource+0xfa>
 80107d0:	2b50      	cmp	r3, #80	; 0x50
 80107d2:	d873      	bhi.n	80108bc <HAL_TIM_ConfigClockSource+0x16c>
 80107d4:	2b40      	cmp	r3, #64	; 0x40
 80107d6:	d058      	beq.n	801088a <HAL_TIM_ConfigClockSource+0x13a>
 80107d8:	2b40      	cmp	r3, #64	; 0x40
 80107da:	d86f      	bhi.n	80108bc <HAL_TIM_ConfigClockSource+0x16c>
 80107dc:	2b30      	cmp	r3, #48	; 0x30
 80107de:	d064      	beq.n	80108aa <HAL_TIM_ConfigClockSource+0x15a>
 80107e0:	2b30      	cmp	r3, #48	; 0x30
 80107e2:	d86b      	bhi.n	80108bc <HAL_TIM_ConfigClockSource+0x16c>
 80107e4:	2b20      	cmp	r3, #32
 80107e6:	d060      	beq.n	80108aa <HAL_TIM_ConfigClockSource+0x15a>
 80107e8:	2b20      	cmp	r3, #32
 80107ea:	d867      	bhi.n	80108bc <HAL_TIM_ConfigClockSource+0x16c>
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d05c      	beq.n	80108aa <HAL_TIM_ConfigClockSource+0x15a>
 80107f0:	2b10      	cmp	r3, #16
 80107f2:	d05a      	beq.n	80108aa <HAL_TIM_ConfigClockSource+0x15a>
 80107f4:	e062      	b.n	80108bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6818      	ldr	r0, [r3, #0]
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	6899      	ldr	r1, [r3, #8]
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	685a      	ldr	r2, [r3, #4]
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	68db      	ldr	r3, [r3, #12]
 8010806:	f000 fd5b 	bl	80112c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	689b      	ldr	r3, [r3, #8]
 8010810:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010818:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	68ba      	ldr	r2, [r7, #8]
 8010820:	609a      	str	r2, [r3, #8]
      break;
 8010822:	e04f      	b.n	80108c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6818      	ldr	r0, [r3, #0]
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	6899      	ldr	r1, [r3, #8]
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	685a      	ldr	r2, [r3, #4]
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	68db      	ldr	r3, [r3, #12]
 8010834:	f000 fd44 	bl	80112c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	689a      	ldr	r2, [r3, #8]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010846:	609a      	str	r2, [r3, #8]
      break;
 8010848:	e03c      	b.n	80108c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6818      	ldr	r0, [r3, #0]
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	6859      	ldr	r1, [r3, #4]
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	68db      	ldr	r3, [r3, #12]
 8010856:	461a      	mov	r2, r3
 8010858:	f000 fc02 	bl	8011060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	2150      	movs	r1, #80	; 0x50
 8010862:	4618      	mov	r0, r3
 8010864:	f000 fd11 	bl	801128a <TIM_ITRx_SetConfig>
      break;
 8010868:	e02c      	b.n	80108c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6818      	ldr	r0, [r3, #0]
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	6859      	ldr	r1, [r3, #4]
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	461a      	mov	r2, r3
 8010878:	f000 fc5e 	bl	8011138 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	2160      	movs	r1, #96	; 0x60
 8010882:	4618      	mov	r0, r3
 8010884:	f000 fd01 	bl	801128a <TIM_ITRx_SetConfig>
      break;
 8010888:	e01c      	b.n	80108c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6818      	ldr	r0, [r3, #0]
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	6859      	ldr	r1, [r3, #4]
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	68db      	ldr	r3, [r3, #12]
 8010896:	461a      	mov	r2, r3
 8010898:	f000 fbe2 	bl	8011060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	2140      	movs	r1, #64	; 0x40
 80108a2:	4618      	mov	r0, r3
 80108a4:	f000 fcf1 	bl	801128a <TIM_ITRx_SetConfig>
      break;
 80108a8:	e00c      	b.n	80108c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681a      	ldr	r2, [r3, #0]
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	4619      	mov	r1, r3
 80108b4:	4610      	mov	r0, r2
 80108b6:	f000 fce8 	bl	801128a <TIM_ITRx_SetConfig>
      break;
 80108ba:	e003      	b.n	80108c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80108bc:	2301      	movs	r3, #1
 80108be:	73fb      	strb	r3, [r7, #15]
      break;
 80108c0:	e000      	b.n	80108c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80108c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2201      	movs	r2, #1
 80108c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2200      	movs	r2, #0
 80108d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80108d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}

080108de <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80108de:	b580      	push	{r7, lr}
 80108e0:	b082      	sub	sp, #8
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]
 80108e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80108ee:	2b01      	cmp	r3, #1
 80108f0:	d101      	bne.n	80108f6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80108f2:	2302      	movs	r3, #2
 80108f4:	e031      	b.n	801095a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2201      	movs	r2, #1
 80108fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2202      	movs	r2, #2
 8010902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8010906:	6839      	ldr	r1, [r7, #0]
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f000 faa3 	bl	8010e54 <TIM_SlaveTimer_SetConfig>
 801090e:	4603      	mov	r3, r0
 8010910:	2b00      	cmp	r3, #0
 8010912:	d009      	beq.n	8010928 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2201      	movs	r2, #1
 8010918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2200      	movs	r2, #0
 8010920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8010924:	2301      	movs	r3, #1
 8010926:	e018      	b.n	801095a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	68da      	ldr	r2, [r3, #12]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010936:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	68da      	ldr	r2, [r3, #12]
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010946:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2201      	movs	r2, #1
 801094c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2200      	movs	r2, #0
 8010954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010958:	2300      	movs	r3, #0
}
 801095a:	4618      	mov	r0, r3
 801095c:	3708      	adds	r7, #8
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}

08010962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010962:	b480      	push	{r7}
 8010964:	b083      	sub	sp, #12
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801096a:	bf00      	nop
 801096c:	370c      	adds	r7, #12
 801096e:	46bd      	mov	sp, r7
 8010970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010974:	4770      	bx	lr

08010976 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010976:	b480      	push	{r7}
 8010978:	b083      	sub	sp, #12
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801097e:	bf00      	nop
 8010980:	370c      	adds	r7, #12
 8010982:	46bd      	mov	sp, r7
 8010984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010988:	4770      	bx	lr

0801098a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801098a:	b480      	push	{r7}
 801098c:	b083      	sub	sp, #12
 801098e:	af00      	add	r7, sp, #0
 8010990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010992:	bf00      	nop
 8010994:	370c      	adds	r7, #12
 8010996:	46bd      	mov	sp, r7
 8010998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099c:	4770      	bx	lr

0801099e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801099e:	b480      	push	{r7}
 80109a0:	b083      	sub	sp, #12
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80109a6:	bf00      	nop
 80109a8:	370c      	adds	r7, #12
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr
	...

080109b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b085      	sub	sp, #20
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	4a40      	ldr	r2, [pc, #256]	; (8010ac8 <TIM_Base_SetConfig+0x114>)
 80109c8:	4293      	cmp	r3, r2
 80109ca:	d013      	beq.n	80109f4 <TIM_Base_SetConfig+0x40>
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109d2:	d00f      	beq.n	80109f4 <TIM_Base_SetConfig+0x40>
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	4a3d      	ldr	r2, [pc, #244]	; (8010acc <TIM_Base_SetConfig+0x118>)
 80109d8:	4293      	cmp	r3, r2
 80109da:	d00b      	beq.n	80109f4 <TIM_Base_SetConfig+0x40>
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	4a3c      	ldr	r2, [pc, #240]	; (8010ad0 <TIM_Base_SetConfig+0x11c>)
 80109e0:	4293      	cmp	r3, r2
 80109e2:	d007      	beq.n	80109f4 <TIM_Base_SetConfig+0x40>
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	4a3b      	ldr	r2, [pc, #236]	; (8010ad4 <TIM_Base_SetConfig+0x120>)
 80109e8:	4293      	cmp	r3, r2
 80109ea:	d003      	beq.n	80109f4 <TIM_Base_SetConfig+0x40>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	4a3a      	ldr	r2, [pc, #232]	; (8010ad8 <TIM_Base_SetConfig+0x124>)
 80109f0:	4293      	cmp	r3, r2
 80109f2:	d108      	bne.n	8010a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	68fa      	ldr	r2, [r7, #12]
 8010a02:	4313      	orrs	r3, r2
 8010a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4a2f      	ldr	r2, [pc, #188]	; (8010ac8 <TIM_Base_SetConfig+0x114>)
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d02b      	beq.n	8010a66 <TIM_Base_SetConfig+0xb2>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a14:	d027      	beq.n	8010a66 <TIM_Base_SetConfig+0xb2>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	4a2c      	ldr	r2, [pc, #176]	; (8010acc <TIM_Base_SetConfig+0x118>)
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	d023      	beq.n	8010a66 <TIM_Base_SetConfig+0xb2>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4a2b      	ldr	r2, [pc, #172]	; (8010ad0 <TIM_Base_SetConfig+0x11c>)
 8010a22:	4293      	cmp	r3, r2
 8010a24:	d01f      	beq.n	8010a66 <TIM_Base_SetConfig+0xb2>
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	4a2a      	ldr	r2, [pc, #168]	; (8010ad4 <TIM_Base_SetConfig+0x120>)
 8010a2a:	4293      	cmp	r3, r2
 8010a2c:	d01b      	beq.n	8010a66 <TIM_Base_SetConfig+0xb2>
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	4a29      	ldr	r2, [pc, #164]	; (8010ad8 <TIM_Base_SetConfig+0x124>)
 8010a32:	4293      	cmp	r3, r2
 8010a34:	d017      	beq.n	8010a66 <TIM_Base_SetConfig+0xb2>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	4a28      	ldr	r2, [pc, #160]	; (8010adc <TIM_Base_SetConfig+0x128>)
 8010a3a:	4293      	cmp	r3, r2
 8010a3c:	d013      	beq.n	8010a66 <TIM_Base_SetConfig+0xb2>
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	4a27      	ldr	r2, [pc, #156]	; (8010ae0 <TIM_Base_SetConfig+0x12c>)
 8010a42:	4293      	cmp	r3, r2
 8010a44:	d00f      	beq.n	8010a66 <TIM_Base_SetConfig+0xb2>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	4a26      	ldr	r2, [pc, #152]	; (8010ae4 <TIM_Base_SetConfig+0x130>)
 8010a4a:	4293      	cmp	r3, r2
 8010a4c:	d00b      	beq.n	8010a66 <TIM_Base_SetConfig+0xb2>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	4a25      	ldr	r2, [pc, #148]	; (8010ae8 <TIM_Base_SetConfig+0x134>)
 8010a52:	4293      	cmp	r3, r2
 8010a54:	d007      	beq.n	8010a66 <TIM_Base_SetConfig+0xb2>
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	4a24      	ldr	r2, [pc, #144]	; (8010aec <TIM_Base_SetConfig+0x138>)
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	d003      	beq.n	8010a66 <TIM_Base_SetConfig+0xb2>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	4a23      	ldr	r2, [pc, #140]	; (8010af0 <TIM_Base_SetConfig+0x13c>)
 8010a62:	4293      	cmp	r3, r2
 8010a64:	d108      	bne.n	8010a78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	68db      	ldr	r3, [r3, #12]
 8010a72:	68fa      	ldr	r2, [r7, #12]
 8010a74:	4313      	orrs	r3, r2
 8010a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	695b      	ldr	r3, [r3, #20]
 8010a82:	4313      	orrs	r3, r2
 8010a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	68fa      	ldr	r2, [r7, #12]
 8010a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	689a      	ldr	r2, [r3, #8]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	4a0a      	ldr	r2, [pc, #40]	; (8010ac8 <TIM_Base_SetConfig+0x114>)
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d003      	beq.n	8010aac <TIM_Base_SetConfig+0xf8>
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	4a0c      	ldr	r2, [pc, #48]	; (8010ad8 <TIM_Base_SetConfig+0x124>)
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	d103      	bne.n	8010ab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	691a      	ldr	r2, [r3, #16]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	615a      	str	r2, [r3, #20]
}
 8010aba:	bf00      	nop
 8010abc:	3714      	adds	r7, #20
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac4:	4770      	bx	lr
 8010ac6:	bf00      	nop
 8010ac8:	40010000 	.word	0x40010000
 8010acc:	40000400 	.word	0x40000400
 8010ad0:	40000800 	.word	0x40000800
 8010ad4:	40000c00 	.word	0x40000c00
 8010ad8:	40010400 	.word	0x40010400
 8010adc:	40014000 	.word	0x40014000
 8010ae0:	40014400 	.word	0x40014400
 8010ae4:	40014800 	.word	0x40014800
 8010ae8:	40001800 	.word	0x40001800
 8010aec:	40001c00 	.word	0x40001c00
 8010af0:	40002000 	.word	0x40002000

08010af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b087      	sub	sp, #28
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6a1b      	ldr	r3, [r3, #32]
 8010b02:	f023 0201 	bic.w	r2, r3, #1
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6a1b      	ldr	r3, [r3, #32]
 8010b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	699b      	ldr	r3, [r3, #24]
 8010b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	f023 0303 	bic.w	r3, r3, #3
 8010b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	68fa      	ldr	r2, [r7, #12]
 8010b32:	4313      	orrs	r3, r2
 8010b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	f023 0302 	bic.w	r3, r3, #2
 8010b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	689b      	ldr	r3, [r3, #8]
 8010b42:	697a      	ldr	r2, [r7, #20]
 8010b44:	4313      	orrs	r3, r2
 8010b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	4a20      	ldr	r2, [pc, #128]	; (8010bcc <TIM_OC1_SetConfig+0xd8>)
 8010b4c:	4293      	cmp	r3, r2
 8010b4e:	d003      	beq.n	8010b58 <TIM_OC1_SetConfig+0x64>
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	4a1f      	ldr	r2, [pc, #124]	; (8010bd0 <TIM_OC1_SetConfig+0xdc>)
 8010b54:	4293      	cmp	r3, r2
 8010b56:	d10c      	bne.n	8010b72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	f023 0308 	bic.w	r3, r3, #8
 8010b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	697a      	ldr	r2, [r7, #20]
 8010b66:	4313      	orrs	r3, r2
 8010b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	f023 0304 	bic.w	r3, r3, #4
 8010b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	4a15      	ldr	r2, [pc, #84]	; (8010bcc <TIM_OC1_SetConfig+0xd8>)
 8010b76:	4293      	cmp	r3, r2
 8010b78:	d003      	beq.n	8010b82 <TIM_OC1_SetConfig+0x8e>
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	4a14      	ldr	r2, [pc, #80]	; (8010bd0 <TIM_OC1_SetConfig+0xdc>)
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	d111      	bne.n	8010ba6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	695b      	ldr	r3, [r3, #20]
 8010b96:	693a      	ldr	r2, [r7, #16]
 8010b98:	4313      	orrs	r3, r2
 8010b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	699b      	ldr	r3, [r3, #24]
 8010ba0:	693a      	ldr	r2, [r7, #16]
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	693a      	ldr	r2, [r7, #16]
 8010baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	68fa      	ldr	r2, [r7, #12]
 8010bb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	685a      	ldr	r2, [r3, #4]
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	697a      	ldr	r2, [r7, #20]
 8010bbe:	621a      	str	r2, [r3, #32]
}
 8010bc0:	bf00      	nop
 8010bc2:	371c      	adds	r7, #28
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bca:	4770      	bx	lr
 8010bcc:	40010000 	.word	0x40010000
 8010bd0:	40010400 	.word	0x40010400

08010bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010bd4:	b480      	push	{r7}
 8010bd6:	b087      	sub	sp, #28
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6a1b      	ldr	r3, [r3, #32]
 8010be2:	f023 0210 	bic.w	r2, r3, #16
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6a1b      	ldr	r3, [r3, #32]
 8010bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	699b      	ldr	r3, [r3, #24]
 8010bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	021b      	lsls	r3, r3, #8
 8010c12:	68fa      	ldr	r2, [r7, #12]
 8010c14:	4313      	orrs	r3, r2
 8010c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	f023 0320 	bic.w	r3, r3, #32
 8010c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	689b      	ldr	r3, [r3, #8]
 8010c24:	011b      	lsls	r3, r3, #4
 8010c26:	697a      	ldr	r2, [r7, #20]
 8010c28:	4313      	orrs	r3, r2
 8010c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	4a22      	ldr	r2, [pc, #136]	; (8010cb8 <TIM_OC2_SetConfig+0xe4>)
 8010c30:	4293      	cmp	r3, r2
 8010c32:	d003      	beq.n	8010c3c <TIM_OC2_SetConfig+0x68>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	4a21      	ldr	r2, [pc, #132]	; (8010cbc <TIM_OC2_SetConfig+0xe8>)
 8010c38:	4293      	cmp	r3, r2
 8010c3a:	d10d      	bne.n	8010c58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	68db      	ldr	r3, [r3, #12]
 8010c48:	011b      	lsls	r3, r3, #4
 8010c4a:	697a      	ldr	r2, [r7, #20]
 8010c4c:	4313      	orrs	r3, r2
 8010c4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	4a17      	ldr	r2, [pc, #92]	; (8010cb8 <TIM_OC2_SetConfig+0xe4>)
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	d003      	beq.n	8010c68 <TIM_OC2_SetConfig+0x94>
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	4a16      	ldr	r2, [pc, #88]	; (8010cbc <TIM_OC2_SetConfig+0xe8>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d113      	bne.n	8010c90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010c68:	693b      	ldr	r3, [r7, #16]
 8010c6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010c6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	695b      	ldr	r3, [r3, #20]
 8010c7c:	009b      	lsls	r3, r3, #2
 8010c7e:	693a      	ldr	r2, [r7, #16]
 8010c80:	4313      	orrs	r3, r2
 8010c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	699b      	ldr	r3, [r3, #24]
 8010c88:	009b      	lsls	r3, r3, #2
 8010c8a:	693a      	ldr	r2, [r7, #16]
 8010c8c:	4313      	orrs	r3, r2
 8010c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	693a      	ldr	r2, [r7, #16]
 8010c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	68fa      	ldr	r2, [r7, #12]
 8010c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	685a      	ldr	r2, [r3, #4]
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	697a      	ldr	r2, [r7, #20]
 8010ca8:	621a      	str	r2, [r3, #32]
}
 8010caa:	bf00      	nop
 8010cac:	371c      	adds	r7, #28
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop
 8010cb8:	40010000 	.word	0x40010000
 8010cbc:	40010400 	.word	0x40010400

08010cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	b087      	sub	sp, #28
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
 8010cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6a1b      	ldr	r3, [r3, #32]
 8010cce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6a1b      	ldr	r3, [r3, #32]
 8010cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	685b      	ldr	r3, [r3, #4]
 8010ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	69db      	ldr	r3, [r3, #28]
 8010ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f023 0303 	bic.w	r3, r3, #3
 8010cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	68fa      	ldr	r2, [r7, #12]
 8010cfe:	4313      	orrs	r3, r2
 8010d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	689b      	ldr	r3, [r3, #8]
 8010d0e:	021b      	lsls	r3, r3, #8
 8010d10:	697a      	ldr	r2, [r7, #20]
 8010d12:	4313      	orrs	r3, r2
 8010d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	4a21      	ldr	r2, [pc, #132]	; (8010da0 <TIM_OC3_SetConfig+0xe0>)
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d003      	beq.n	8010d26 <TIM_OC3_SetConfig+0x66>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	4a20      	ldr	r2, [pc, #128]	; (8010da4 <TIM_OC3_SetConfig+0xe4>)
 8010d22:	4293      	cmp	r3, r2
 8010d24:	d10d      	bne.n	8010d42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	68db      	ldr	r3, [r3, #12]
 8010d32:	021b      	lsls	r3, r3, #8
 8010d34:	697a      	ldr	r2, [r7, #20]
 8010d36:	4313      	orrs	r3, r2
 8010d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	4a16      	ldr	r2, [pc, #88]	; (8010da0 <TIM_OC3_SetConfig+0xe0>)
 8010d46:	4293      	cmp	r3, r2
 8010d48:	d003      	beq.n	8010d52 <TIM_OC3_SetConfig+0x92>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	4a15      	ldr	r2, [pc, #84]	; (8010da4 <TIM_OC3_SetConfig+0xe4>)
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	d113      	bne.n	8010d7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010d5a:	693b      	ldr	r3, [r7, #16]
 8010d5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	695b      	ldr	r3, [r3, #20]
 8010d66:	011b      	lsls	r3, r3, #4
 8010d68:	693a      	ldr	r2, [r7, #16]
 8010d6a:	4313      	orrs	r3, r2
 8010d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	699b      	ldr	r3, [r3, #24]
 8010d72:	011b      	lsls	r3, r3, #4
 8010d74:	693a      	ldr	r2, [r7, #16]
 8010d76:	4313      	orrs	r3, r2
 8010d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	693a      	ldr	r2, [r7, #16]
 8010d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	68fa      	ldr	r2, [r7, #12]
 8010d84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	685a      	ldr	r2, [r3, #4]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	697a      	ldr	r2, [r7, #20]
 8010d92:	621a      	str	r2, [r3, #32]
}
 8010d94:	bf00      	nop
 8010d96:	371c      	adds	r7, #28
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr
 8010da0:	40010000 	.word	0x40010000
 8010da4:	40010400 	.word	0x40010400

08010da8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010da8:	b480      	push	{r7}
 8010daa:	b087      	sub	sp, #28
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6a1b      	ldr	r3, [r3, #32]
 8010db6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6a1b      	ldr	r3, [r3, #32]
 8010dc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	69db      	ldr	r3, [r3, #28]
 8010dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	021b      	lsls	r3, r3, #8
 8010de6:	68fa      	ldr	r2, [r7, #12]
 8010de8:	4313      	orrs	r3, r2
 8010dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010dec:	693b      	ldr	r3, [r7, #16]
 8010dee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	689b      	ldr	r3, [r3, #8]
 8010df8:	031b      	lsls	r3, r3, #12
 8010dfa:	693a      	ldr	r2, [r7, #16]
 8010dfc:	4313      	orrs	r3, r2
 8010dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	4a12      	ldr	r2, [pc, #72]	; (8010e4c <TIM_OC4_SetConfig+0xa4>)
 8010e04:	4293      	cmp	r3, r2
 8010e06:	d003      	beq.n	8010e10 <TIM_OC4_SetConfig+0x68>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	4a11      	ldr	r2, [pc, #68]	; (8010e50 <TIM_OC4_SetConfig+0xa8>)
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d109      	bne.n	8010e24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010e16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	695b      	ldr	r3, [r3, #20]
 8010e1c:	019b      	lsls	r3, r3, #6
 8010e1e:	697a      	ldr	r2, [r7, #20]
 8010e20:	4313      	orrs	r3, r2
 8010e22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	697a      	ldr	r2, [r7, #20]
 8010e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	68fa      	ldr	r2, [r7, #12]
 8010e2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	685a      	ldr	r2, [r3, #4]
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	693a      	ldr	r2, [r7, #16]
 8010e3c:	621a      	str	r2, [r3, #32]
}
 8010e3e:	bf00      	nop
 8010e40:	371c      	adds	r7, #28
 8010e42:	46bd      	mov	sp, r7
 8010e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e48:	4770      	bx	lr
 8010e4a:	bf00      	nop
 8010e4c:	40010000 	.word	0x40010000
 8010e50:	40010400 	.word	0x40010400

08010e54 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b086      	sub	sp, #24
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	689b      	ldr	r3, [r3, #8]
 8010e68:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e70:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	685b      	ldr	r3, [r3, #4]
 8010e76:	693a      	ldr	r2, [r7, #16]
 8010e78:	4313      	orrs	r3, r2
 8010e7a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	f023 0307 	bic.w	r3, r3, #7
 8010e82:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	693a      	ldr	r2, [r7, #16]
 8010e8a:	4313      	orrs	r3, r2
 8010e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	693a      	ldr	r2, [r7, #16]
 8010e94:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	2b70      	cmp	r3, #112	; 0x70
 8010e9c:	d01a      	beq.n	8010ed4 <TIM_SlaveTimer_SetConfig+0x80>
 8010e9e:	2b70      	cmp	r3, #112	; 0x70
 8010ea0:	d860      	bhi.n	8010f64 <TIM_SlaveTimer_SetConfig+0x110>
 8010ea2:	2b60      	cmp	r3, #96	; 0x60
 8010ea4:	d054      	beq.n	8010f50 <TIM_SlaveTimer_SetConfig+0xfc>
 8010ea6:	2b60      	cmp	r3, #96	; 0x60
 8010ea8:	d85c      	bhi.n	8010f64 <TIM_SlaveTimer_SetConfig+0x110>
 8010eaa:	2b50      	cmp	r3, #80	; 0x50
 8010eac:	d046      	beq.n	8010f3c <TIM_SlaveTimer_SetConfig+0xe8>
 8010eae:	2b50      	cmp	r3, #80	; 0x50
 8010eb0:	d858      	bhi.n	8010f64 <TIM_SlaveTimer_SetConfig+0x110>
 8010eb2:	2b40      	cmp	r3, #64	; 0x40
 8010eb4:	d019      	beq.n	8010eea <TIM_SlaveTimer_SetConfig+0x96>
 8010eb6:	2b40      	cmp	r3, #64	; 0x40
 8010eb8:	d854      	bhi.n	8010f64 <TIM_SlaveTimer_SetConfig+0x110>
 8010eba:	2b30      	cmp	r3, #48	; 0x30
 8010ebc:	d055      	beq.n	8010f6a <TIM_SlaveTimer_SetConfig+0x116>
 8010ebe:	2b30      	cmp	r3, #48	; 0x30
 8010ec0:	d850      	bhi.n	8010f64 <TIM_SlaveTimer_SetConfig+0x110>
 8010ec2:	2b20      	cmp	r3, #32
 8010ec4:	d051      	beq.n	8010f6a <TIM_SlaveTimer_SetConfig+0x116>
 8010ec6:	2b20      	cmp	r3, #32
 8010ec8:	d84c      	bhi.n	8010f64 <TIM_SlaveTimer_SetConfig+0x110>
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d04d      	beq.n	8010f6a <TIM_SlaveTimer_SetConfig+0x116>
 8010ece:	2b10      	cmp	r3, #16
 8010ed0:	d04b      	beq.n	8010f6a <TIM_SlaveTimer_SetConfig+0x116>
 8010ed2:	e047      	b.n	8010f64 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6818      	ldr	r0, [r3, #0]
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	68d9      	ldr	r1, [r3, #12]
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	689a      	ldr	r2, [r3, #8]
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	691b      	ldr	r3, [r3, #16]
 8010ee4:	f000 f9ec 	bl	80112c0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8010ee8:	e040      	b.n	8010f6c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	2b05      	cmp	r3, #5
 8010ef0:	d101      	bne.n	8010ef6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	e03b      	b.n	8010f6e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	6a1b      	ldr	r3, [r3, #32]
 8010efc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	6a1a      	ldr	r2, [r3, #32]
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	f022 0201 	bic.w	r2, r2, #1
 8010f0c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	699b      	ldr	r3, [r3, #24]
 8010f14:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010f1c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	691b      	ldr	r3, [r3, #16]
 8010f22:	011b      	lsls	r3, r3, #4
 8010f24:	68ba      	ldr	r2, [r7, #8]
 8010f26:	4313      	orrs	r3, r2
 8010f28:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	68ba      	ldr	r2, [r7, #8]
 8010f30:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	68fa      	ldr	r2, [r7, #12]
 8010f38:	621a      	str	r2, [r3, #32]
      break;
 8010f3a:	e017      	b.n	8010f6c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6818      	ldr	r0, [r3, #0]
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	6899      	ldr	r1, [r3, #8]
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	691b      	ldr	r3, [r3, #16]
 8010f48:	461a      	mov	r2, r3
 8010f4a:	f000 f889 	bl	8011060 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8010f4e:	e00d      	b.n	8010f6c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6818      	ldr	r0, [r3, #0]
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	6899      	ldr	r1, [r3, #8]
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	691b      	ldr	r3, [r3, #16]
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	f000 f8eb 	bl	8011138 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8010f62:	e003      	b.n	8010f6c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8010f64:	2301      	movs	r3, #1
 8010f66:	75fb      	strb	r3, [r7, #23]
      break;
 8010f68:	e000      	b.n	8010f6c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8010f6a:	bf00      	nop
  }

  return status;
 8010f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f6e:	4618      	mov	r0, r3
 8010f70:	3718      	adds	r7, #24
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}
	...

08010f78 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b087      	sub	sp, #28
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	60f8      	str	r0, [r7, #12]
 8010f80:	60b9      	str	r1, [r7, #8]
 8010f82:	607a      	str	r2, [r7, #4]
 8010f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	6a1b      	ldr	r3, [r3, #32]
 8010f8a:	f023 0201 	bic.w	r2, r3, #1
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	699b      	ldr	r3, [r3, #24]
 8010f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	6a1b      	ldr	r3, [r3, #32]
 8010f9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	4a28      	ldr	r2, [pc, #160]	; (8011044 <TIM_TI1_SetConfig+0xcc>)
 8010fa2:	4293      	cmp	r3, r2
 8010fa4:	d01b      	beq.n	8010fde <TIM_TI1_SetConfig+0x66>
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010fac:	d017      	beq.n	8010fde <TIM_TI1_SetConfig+0x66>
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	4a25      	ldr	r2, [pc, #148]	; (8011048 <TIM_TI1_SetConfig+0xd0>)
 8010fb2:	4293      	cmp	r3, r2
 8010fb4:	d013      	beq.n	8010fde <TIM_TI1_SetConfig+0x66>
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	4a24      	ldr	r2, [pc, #144]	; (801104c <TIM_TI1_SetConfig+0xd4>)
 8010fba:	4293      	cmp	r3, r2
 8010fbc:	d00f      	beq.n	8010fde <TIM_TI1_SetConfig+0x66>
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	4a23      	ldr	r2, [pc, #140]	; (8011050 <TIM_TI1_SetConfig+0xd8>)
 8010fc2:	4293      	cmp	r3, r2
 8010fc4:	d00b      	beq.n	8010fde <TIM_TI1_SetConfig+0x66>
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	4a22      	ldr	r2, [pc, #136]	; (8011054 <TIM_TI1_SetConfig+0xdc>)
 8010fca:	4293      	cmp	r3, r2
 8010fcc:	d007      	beq.n	8010fde <TIM_TI1_SetConfig+0x66>
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	4a21      	ldr	r2, [pc, #132]	; (8011058 <TIM_TI1_SetConfig+0xe0>)
 8010fd2:	4293      	cmp	r3, r2
 8010fd4:	d003      	beq.n	8010fde <TIM_TI1_SetConfig+0x66>
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	4a20      	ldr	r2, [pc, #128]	; (801105c <TIM_TI1_SetConfig+0xe4>)
 8010fda:	4293      	cmp	r3, r2
 8010fdc:	d101      	bne.n	8010fe2 <TIM_TI1_SetConfig+0x6a>
 8010fde:	2301      	movs	r3, #1
 8010fe0:	e000      	b.n	8010fe4 <TIM_TI1_SetConfig+0x6c>
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d008      	beq.n	8010ffa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	f023 0303 	bic.w	r3, r3, #3
 8010fee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8010ff0:	697a      	ldr	r2, [r7, #20]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	4313      	orrs	r3, r2
 8010ff6:	617b      	str	r3, [r7, #20]
 8010ff8:	e003      	b.n	8011002 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	f043 0301 	orr.w	r3, r3, #1
 8011000:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011008:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	011b      	lsls	r3, r3, #4
 801100e:	b2db      	uxtb	r3, r3
 8011010:	697a      	ldr	r2, [r7, #20]
 8011012:	4313      	orrs	r3, r2
 8011014:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	f023 030a 	bic.w	r3, r3, #10
 801101c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	f003 030a 	and.w	r3, r3, #10
 8011024:	693a      	ldr	r2, [r7, #16]
 8011026:	4313      	orrs	r3, r2
 8011028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	697a      	ldr	r2, [r7, #20]
 801102e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	693a      	ldr	r2, [r7, #16]
 8011034:	621a      	str	r2, [r3, #32]
}
 8011036:	bf00      	nop
 8011038:	371c      	adds	r7, #28
 801103a:	46bd      	mov	sp, r7
 801103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011040:	4770      	bx	lr
 8011042:	bf00      	nop
 8011044:	40010000 	.word	0x40010000
 8011048:	40000400 	.word	0x40000400
 801104c:	40000800 	.word	0x40000800
 8011050:	40000c00 	.word	0x40000c00
 8011054:	40010400 	.word	0x40010400
 8011058:	40014000 	.word	0x40014000
 801105c:	40001800 	.word	0x40001800

08011060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011060:	b480      	push	{r7}
 8011062:	b087      	sub	sp, #28
 8011064:	af00      	add	r7, sp, #0
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	60b9      	str	r1, [r7, #8]
 801106a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	6a1b      	ldr	r3, [r3, #32]
 8011070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	6a1b      	ldr	r3, [r3, #32]
 8011076:	f023 0201 	bic.w	r2, r3, #1
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	699b      	ldr	r3, [r3, #24]
 8011082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801108a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	011b      	lsls	r3, r3, #4
 8011090:	693a      	ldr	r2, [r7, #16]
 8011092:	4313      	orrs	r3, r2
 8011094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	f023 030a 	bic.w	r3, r3, #10
 801109c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801109e:	697a      	ldr	r2, [r7, #20]
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	4313      	orrs	r3, r2
 80110a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	693a      	ldr	r2, [r7, #16]
 80110aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	697a      	ldr	r2, [r7, #20]
 80110b0:	621a      	str	r2, [r3, #32]
}
 80110b2:	bf00      	nop
 80110b4:	371c      	adds	r7, #28
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr

080110be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80110be:	b480      	push	{r7}
 80110c0:	b087      	sub	sp, #28
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	60f8      	str	r0, [r7, #12]
 80110c6:	60b9      	str	r1, [r7, #8]
 80110c8:	607a      	str	r2, [r7, #4]
 80110ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	6a1b      	ldr	r3, [r3, #32]
 80110d0:	f023 0210 	bic.w	r2, r3, #16
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	699b      	ldr	r3, [r3, #24]
 80110dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	6a1b      	ldr	r3, [r3, #32]
 80110e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80110ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	021b      	lsls	r3, r3, #8
 80110f0:	697a      	ldr	r2, [r7, #20]
 80110f2:	4313      	orrs	r3, r2
 80110f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80110fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	031b      	lsls	r3, r3, #12
 8011102:	b29b      	uxth	r3, r3
 8011104:	697a      	ldr	r2, [r7, #20]
 8011106:	4313      	orrs	r3, r2
 8011108:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011110:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	011b      	lsls	r3, r3, #4
 8011116:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801111a:	693a      	ldr	r2, [r7, #16]
 801111c:	4313      	orrs	r3, r2
 801111e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	697a      	ldr	r2, [r7, #20]
 8011124:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	693a      	ldr	r2, [r7, #16]
 801112a:	621a      	str	r2, [r3, #32]
}
 801112c:	bf00      	nop
 801112e:	371c      	adds	r7, #28
 8011130:	46bd      	mov	sp, r7
 8011132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011136:	4770      	bx	lr

08011138 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011138:	b480      	push	{r7}
 801113a:	b087      	sub	sp, #28
 801113c:	af00      	add	r7, sp, #0
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	6a1b      	ldr	r3, [r3, #32]
 8011148:	f023 0210 	bic.w	r2, r3, #16
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	699b      	ldr	r3, [r3, #24]
 8011154:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	6a1b      	ldr	r3, [r3, #32]
 801115a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011162:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	031b      	lsls	r3, r3, #12
 8011168:	697a      	ldr	r2, [r7, #20]
 801116a:	4313      	orrs	r3, r2
 801116c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011174:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	011b      	lsls	r3, r3, #4
 801117a:	693a      	ldr	r2, [r7, #16]
 801117c:	4313      	orrs	r3, r2
 801117e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	697a      	ldr	r2, [r7, #20]
 8011184:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	693a      	ldr	r2, [r7, #16]
 801118a:	621a      	str	r2, [r3, #32]
}
 801118c:	bf00      	nop
 801118e:	371c      	adds	r7, #28
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr

08011198 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011198:	b480      	push	{r7}
 801119a:	b087      	sub	sp, #28
 801119c:	af00      	add	r7, sp, #0
 801119e:	60f8      	str	r0, [r7, #12]
 80111a0:	60b9      	str	r1, [r7, #8]
 80111a2:	607a      	str	r2, [r7, #4]
 80111a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	6a1b      	ldr	r3, [r3, #32]
 80111aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	69db      	ldr	r3, [r3, #28]
 80111b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	6a1b      	ldr	r3, [r3, #32]
 80111bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	f023 0303 	bic.w	r3, r3, #3
 80111c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80111c6:	697a      	ldr	r2, [r7, #20]
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	4313      	orrs	r3, r2
 80111cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80111d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	011b      	lsls	r3, r3, #4
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	697a      	ldr	r2, [r7, #20]
 80111de:	4313      	orrs	r3, r2
 80111e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80111e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	021b      	lsls	r3, r3, #8
 80111ee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80111f2:	693a      	ldr	r2, [r7, #16]
 80111f4:	4313      	orrs	r3, r2
 80111f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	697a      	ldr	r2, [r7, #20]
 80111fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	693a      	ldr	r2, [r7, #16]
 8011202:	621a      	str	r2, [r3, #32]
}
 8011204:	bf00      	nop
 8011206:	371c      	adds	r7, #28
 8011208:	46bd      	mov	sp, r7
 801120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120e:	4770      	bx	lr

08011210 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011210:	b480      	push	{r7}
 8011212:	b087      	sub	sp, #28
 8011214:	af00      	add	r7, sp, #0
 8011216:	60f8      	str	r0, [r7, #12]
 8011218:	60b9      	str	r1, [r7, #8]
 801121a:	607a      	str	r2, [r7, #4]
 801121c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	6a1b      	ldr	r3, [r3, #32]
 8011222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	69db      	ldr	r3, [r3, #28]
 801122e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	6a1b      	ldr	r3, [r3, #32]
 8011234:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801123c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	021b      	lsls	r3, r3, #8
 8011242:	697a      	ldr	r2, [r7, #20]
 8011244:	4313      	orrs	r3, r2
 8011246:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801124e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	031b      	lsls	r3, r3, #12
 8011254:	b29b      	uxth	r3, r3
 8011256:	697a      	ldr	r2, [r7, #20]
 8011258:	4313      	orrs	r3, r2
 801125a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8011262:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	031b      	lsls	r3, r3, #12
 8011268:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 801126c:	693a      	ldr	r2, [r7, #16]
 801126e:	4313      	orrs	r3, r2
 8011270:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	697a      	ldr	r2, [r7, #20]
 8011276:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	693a      	ldr	r2, [r7, #16]
 801127c:	621a      	str	r2, [r3, #32]
}
 801127e:	bf00      	nop
 8011280:	371c      	adds	r7, #28
 8011282:	46bd      	mov	sp, r7
 8011284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011288:	4770      	bx	lr

0801128a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801128a:	b480      	push	{r7}
 801128c:	b085      	sub	sp, #20
 801128e:	af00      	add	r7, sp, #0
 8011290:	6078      	str	r0, [r7, #4]
 8011292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	689b      	ldr	r3, [r3, #8]
 8011298:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80112a2:	683a      	ldr	r2, [r7, #0]
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	4313      	orrs	r3, r2
 80112a8:	f043 0307 	orr.w	r3, r3, #7
 80112ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	68fa      	ldr	r2, [r7, #12]
 80112b2:	609a      	str	r2, [r3, #8]
}
 80112b4:	bf00      	nop
 80112b6:	3714      	adds	r7, #20
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	4770      	bx	lr

080112c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80112c0:	b480      	push	{r7}
 80112c2:	b087      	sub	sp, #28
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	60f8      	str	r0, [r7, #12]
 80112c8:	60b9      	str	r1, [r7, #8]
 80112ca:	607a      	str	r2, [r7, #4]
 80112cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	689b      	ldr	r3, [r3, #8]
 80112d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80112d4:	697b      	ldr	r3, [r7, #20]
 80112d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80112da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	021a      	lsls	r2, r3, #8
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	431a      	orrs	r2, r3
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	4313      	orrs	r3, r2
 80112e8:	697a      	ldr	r2, [r7, #20]
 80112ea:	4313      	orrs	r3, r2
 80112ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	697a      	ldr	r2, [r7, #20]
 80112f2:	609a      	str	r2, [r3, #8]
}
 80112f4:	bf00      	nop
 80112f6:	371c      	adds	r7, #28
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr

08011300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011300:	b480      	push	{r7}
 8011302:	b085      	sub	sp, #20
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
 8011308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011310:	2b01      	cmp	r3, #1
 8011312:	d101      	bne.n	8011318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011314:	2302      	movs	r3, #2
 8011316:	e05a      	b.n	80113ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2201      	movs	r2, #1
 801131c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2202      	movs	r2, #2
 8011324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	689b      	ldr	r3, [r3, #8]
 8011336:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801133e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	68fa      	ldr	r2, [r7, #12]
 8011346:	4313      	orrs	r3, r2
 8011348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	68fa      	ldr	r2, [r7, #12]
 8011350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	4a21      	ldr	r2, [pc, #132]	; (80113dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8011358:	4293      	cmp	r3, r2
 801135a:	d022      	beq.n	80113a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011364:	d01d      	beq.n	80113a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	4a1d      	ldr	r2, [pc, #116]	; (80113e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801136c:	4293      	cmp	r3, r2
 801136e:	d018      	beq.n	80113a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	4a1b      	ldr	r2, [pc, #108]	; (80113e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8011376:	4293      	cmp	r3, r2
 8011378:	d013      	beq.n	80113a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	4a1a      	ldr	r2, [pc, #104]	; (80113e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011380:	4293      	cmp	r3, r2
 8011382:	d00e      	beq.n	80113a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	4a18      	ldr	r2, [pc, #96]	; (80113ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801138a:	4293      	cmp	r3, r2
 801138c:	d009      	beq.n	80113a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	4a17      	ldr	r2, [pc, #92]	; (80113f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011394:	4293      	cmp	r3, r2
 8011396:	d004      	beq.n	80113a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	4a15      	ldr	r2, [pc, #84]	; (80113f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801139e:	4293      	cmp	r3, r2
 80113a0:	d10c      	bne.n	80113bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	68ba      	ldr	r2, [r7, #8]
 80113b0:	4313      	orrs	r3, r2
 80113b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	68ba      	ldr	r2, [r7, #8]
 80113ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2201      	movs	r2, #1
 80113c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2200      	movs	r2, #0
 80113c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80113cc:	2300      	movs	r3, #0
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	3714      	adds	r7, #20
 80113d2:	46bd      	mov	sp, r7
 80113d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d8:	4770      	bx	lr
 80113da:	bf00      	nop
 80113dc:	40010000 	.word	0x40010000
 80113e0:	40000400 	.word	0x40000400
 80113e4:	40000800 	.word	0x40000800
 80113e8:	40000c00 	.word	0x40000c00
 80113ec:	40010400 	.word	0x40010400
 80113f0:	40014000 	.word	0x40014000
 80113f4:	40001800 	.word	0x40001800

080113f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80113f8:	b480      	push	{r7}
 80113fa:	b085      	sub	sp, #20
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011402:	2300      	movs	r3, #0
 8011404:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801140c:	2b01      	cmp	r3, #1
 801140e:	d101      	bne.n	8011414 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011410:	2302      	movs	r3, #2
 8011412:	e03d      	b.n	8011490 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2201      	movs	r2, #1
 8011418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	68db      	ldr	r3, [r3, #12]
 8011426:	4313      	orrs	r3, r2
 8011428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	689b      	ldr	r3, [r3, #8]
 8011434:	4313      	orrs	r3, r2
 8011436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	685b      	ldr	r3, [r3, #4]
 8011442:	4313      	orrs	r3, r2
 8011444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	4313      	orrs	r3, r2
 8011452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	691b      	ldr	r3, [r3, #16]
 801145e:	4313      	orrs	r3, r2
 8011460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	695b      	ldr	r3, [r3, #20]
 801146c:	4313      	orrs	r3, r2
 801146e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	69db      	ldr	r3, [r3, #28]
 801147a:	4313      	orrs	r3, r2
 801147c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	68fa      	ldr	r2, [r7, #12]
 8011484:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2200      	movs	r2, #0
 801148a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801148e:	2300      	movs	r3, #0
}
 8011490:	4618      	mov	r0, r3
 8011492:	3714      	adds	r7, #20
 8011494:	46bd      	mov	sp, r7
 8011496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149a:	4770      	bx	lr

0801149c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801149c:	b480      	push	{r7}
 801149e:	b083      	sub	sp, #12
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80114a4:	bf00      	nop
 80114a6:	370c      	adds	r7, #12
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr

080114b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80114b0:	b480      	push	{r7}
 80114b2:	b083      	sub	sp, #12
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80114b8:	bf00      	nop
 80114ba:	370c      	adds	r7, #12
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr

080114c4 <__NVIC_SetPriority>:
{
 80114c4:	b480      	push	{r7}
 80114c6:	b083      	sub	sp, #12
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	4603      	mov	r3, r0
 80114cc:	6039      	str	r1, [r7, #0]
 80114ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80114d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	db0a      	blt.n	80114ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	b2da      	uxtb	r2, r3
 80114dc:	490c      	ldr	r1, [pc, #48]	; (8011510 <__NVIC_SetPriority+0x4c>)
 80114de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114e2:	0112      	lsls	r2, r2, #4
 80114e4:	b2d2      	uxtb	r2, r2
 80114e6:	440b      	add	r3, r1
 80114e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80114ec:	e00a      	b.n	8011504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	b2da      	uxtb	r2, r3
 80114f2:	4908      	ldr	r1, [pc, #32]	; (8011514 <__NVIC_SetPriority+0x50>)
 80114f4:	79fb      	ldrb	r3, [r7, #7]
 80114f6:	f003 030f 	and.w	r3, r3, #15
 80114fa:	3b04      	subs	r3, #4
 80114fc:	0112      	lsls	r2, r2, #4
 80114fe:	b2d2      	uxtb	r2, r2
 8011500:	440b      	add	r3, r1
 8011502:	761a      	strb	r2, [r3, #24]
}
 8011504:	bf00      	nop
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr
 8011510:	e000e100 	.word	0xe000e100
 8011514:	e000ed00 	.word	0xe000ed00

08011518 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011518:	b580      	push	{r7, lr}
 801151a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801151c:	4b05      	ldr	r3, [pc, #20]	; (8011534 <SysTick_Handler+0x1c>)
 801151e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011520:	f001 ff4e 	bl	80133c0 <xTaskGetSchedulerState>
 8011524:	4603      	mov	r3, r0
 8011526:	2b01      	cmp	r3, #1
 8011528:	d001      	beq.n	801152e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801152a:	f002 fd3d 	bl	8013fa8 <xPortSysTickHandler>
  }
}
 801152e:	bf00      	nop
 8011530:	bd80      	pop	{r7, pc}
 8011532:	bf00      	nop
 8011534:	e000e010 	.word	0xe000e010

08011538 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011538:	b580      	push	{r7, lr}
 801153a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801153c:	2100      	movs	r1, #0
 801153e:	f06f 0004 	mvn.w	r0, #4
 8011542:	f7ff ffbf 	bl	80114c4 <__NVIC_SetPriority>
#endif
}
 8011546:	bf00      	nop
 8011548:	bd80      	pop	{r7, pc}
	...

0801154c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801154c:	b480      	push	{r7}
 801154e:	b083      	sub	sp, #12
 8011550:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011552:	f3ef 8305 	mrs	r3, IPSR
 8011556:	603b      	str	r3, [r7, #0]
  return(result);
 8011558:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801155a:	2b00      	cmp	r3, #0
 801155c:	d003      	beq.n	8011566 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801155e:	f06f 0305 	mvn.w	r3, #5
 8011562:	607b      	str	r3, [r7, #4]
 8011564:	e00c      	b.n	8011580 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011566:	4b0a      	ldr	r3, [pc, #40]	; (8011590 <osKernelInitialize+0x44>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d105      	bne.n	801157a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801156e:	4b08      	ldr	r3, [pc, #32]	; (8011590 <osKernelInitialize+0x44>)
 8011570:	2201      	movs	r2, #1
 8011572:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011574:	2300      	movs	r3, #0
 8011576:	607b      	str	r3, [r7, #4]
 8011578:	e002      	b.n	8011580 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801157a:	f04f 33ff 	mov.w	r3, #4294967295
 801157e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011580:	687b      	ldr	r3, [r7, #4]
}
 8011582:	4618      	mov	r0, r3
 8011584:	370c      	adds	r7, #12
 8011586:	46bd      	mov	sp, r7
 8011588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158c:	4770      	bx	lr
 801158e:	bf00      	nop
 8011590:	2000165c 	.word	0x2000165c

08011594 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801159a:	f3ef 8305 	mrs	r3, IPSR
 801159e:	603b      	str	r3, [r7, #0]
  return(result);
 80115a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d003      	beq.n	80115ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80115a6:	f06f 0305 	mvn.w	r3, #5
 80115aa:	607b      	str	r3, [r7, #4]
 80115ac:	e010      	b.n	80115d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80115ae:	4b0b      	ldr	r3, [pc, #44]	; (80115dc <osKernelStart+0x48>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	2b01      	cmp	r3, #1
 80115b4:	d109      	bne.n	80115ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80115b6:	f7ff ffbf 	bl	8011538 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80115ba:	4b08      	ldr	r3, [pc, #32]	; (80115dc <osKernelStart+0x48>)
 80115bc:	2202      	movs	r2, #2
 80115be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80115c0:	f001 fa24 	bl	8012a0c <vTaskStartScheduler>
      stat = osOK;
 80115c4:	2300      	movs	r3, #0
 80115c6:	607b      	str	r3, [r7, #4]
 80115c8:	e002      	b.n	80115d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80115ca:	f04f 33ff 	mov.w	r3, #4294967295
 80115ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80115d0:	687b      	ldr	r3, [r7, #4]
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	3708      	adds	r7, #8
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}
 80115da:	bf00      	nop
 80115dc:	2000165c 	.word	0x2000165c

080115e0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115e6:	f3ef 8305 	mrs	r3, IPSR
 80115ea:	603b      	str	r3, [r7, #0]
  return(result);
 80115ec:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d003      	beq.n	80115fa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80115f2:	f001 fb4d 	bl	8012c90 <xTaskGetTickCountFromISR>
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	e002      	b.n	8011600 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80115fa:	f001 fb39 	bl	8012c70 <xTaskGetTickCount>
 80115fe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8011600:	687b      	ldr	r3, [r7, #4]
}
 8011602:	4618      	mov	r0, r3
 8011604:	3708      	adds	r7, #8
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}

0801160a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801160a:	b580      	push	{r7, lr}
 801160c:	b08e      	sub	sp, #56	; 0x38
 801160e:	af04      	add	r7, sp, #16
 8011610:	60f8      	str	r0, [r7, #12]
 8011612:	60b9      	str	r1, [r7, #8]
 8011614:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011616:	2300      	movs	r3, #0
 8011618:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801161a:	f3ef 8305 	mrs	r3, IPSR
 801161e:	617b      	str	r3, [r7, #20]
  return(result);
 8011620:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011622:	2b00      	cmp	r3, #0
 8011624:	d17e      	bne.n	8011724 <osThreadNew+0x11a>
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d07b      	beq.n	8011724 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801162c:	2380      	movs	r3, #128	; 0x80
 801162e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011630:	2318      	movs	r3, #24
 8011632:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011634:	2300      	movs	r3, #0
 8011636:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011638:	f04f 33ff 	mov.w	r3, #4294967295
 801163c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d045      	beq.n	80116d0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d002      	beq.n	8011652 <osThreadNew+0x48>
        name = attr->name;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	699b      	ldr	r3, [r3, #24]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d002      	beq.n	8011660 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	699b      	ldr	r3, [r3, #24]
 801165e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d008      	beq.n	8011678 <osThreadNew+0x6e>
 8011666:	69fb      	ldr	r3, [r7, #28]
 8011668:	2b38      	cmp	r3, #56	; 0x38
 801166a:	d805      	bhi.n	8011678 <osThreadNew+0x6e>
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	685b      	ldr	r3, [r3, #4]
 8011670:	f003 0301 	and.w	r3, r3, #1
 8011674:	2b00      	cmp	r3, #0
 8011676:	d001      	beq.n	801167c <osThreadNew+0x72>
        return (NULL);
 8011678:	2300      	movs	r3, #0
 801167a:	e054      	b.n	8011726 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	695b      	ldr	r3, [r3, #20]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d003      	beq.n	801168c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	695b      	ldr	r3, [r3, #20]
 8011688:	089b      	lsrs	r3, r3, #2
 801168a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	689b      	ldr	r3, [r3, #8]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d00e      	beq.n	80116b2 <osThreadNew+0xa8>
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	68db      	ldr	r3, [r3, #12]
 8011698:	2bbb      	cmp	r3, #187	; 0xbb
 801169a:	d90a      	bls.n	80116b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d006      	beq.n	80116b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	695b      	ldr	r3, [r3, #20]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d002      	beq.n	80116b2 <osThreadNew+0xa8>
        mem = 1;
 80116ac:	2301      	movs	r3, #1
 80116ae:	61bb      	str	r3, [r7, #24]
 80116b0:	e010      	b.n	80116d4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	689b      	ldr	r3, [r3, #8]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d10c      	bne.n	80116d4 <osThreadNew+0xca>
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	68db      	ldr	r3, [r3, #12]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d108      	bne.n	80116d4 <osThreadNew+0xca>
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	691b      	ldr	r3, [r3, #16]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d104      	bne.n	80116d4 <osThreadNew+0xca>
          mem = 0;
 80116ca:	2300      	movs	r3, #0
 80116cc:	61bb      	str	r3, [r7, #24]
 80116ce:	e001      	b.n	80116d4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80116d0:	2300      	movs	r3, #0
 80116d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80116d4:	69bb      	ldr	r3, [r7, #24]
 80116d6:	2b01      	cmp	r3, #1
 80116d8:	d110      	bne.n	80116fc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80116de:	687a      	ldr	r2, [r7, #4]
 80116e0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80116e2:	9202      	str	r2, [sp, #8]
 80116e4:	9301      	str	r3, [sp, #4]
 80116e6:	69fb      	ldr	r3, [r7, #28]
 80116e8:	9300      	str	r3, [sp, #0]
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	6a3a      	ldr	r2, [r7, #32]
 80116ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80116f0:	68f8      	ldr	r0, [r7, #12]
 80116f2:	f000 ff35 	bl	8012560 <xTaskCreateStatic>
 80116f6:	4603      	mov	r3, r0
 80116f8:	613b      	str	r3, [r7, #16]
 80116fa:	e013      	b.n	8011724 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80116fc:	69bb      	ldr	r3, [r7, #24]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d110      	bne.n	8011724 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011702:	6a3b      	ldr	r3, [r7, #32]
 8011704:	b29a      	uxth	r2, r3
 8011706:	f107 0310 	add.w	r3, r7, #16
 801170a:	9301      	str	r3, [sp, #4]
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	9300      	str	r3, [sp, #0]
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011714:	68f8      	ldr	r0, [r7, #12]
 8011716:	f000 ff80 	bl	801261a <xTaskCreate>
 801171a:	4603      	mov	r3, r0
 801171c:	2b01      	cmp	r3, #1
 801171e:	d001      	beq.n	8011724 <osThreadNew+0x11a>
            hTask = NULL;
 8011720:	2300      	movs	r3, #0
 8011722:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011724:	693b      	ldr	r3, [r7, #16]
}
 8011726:	4618      	mov	r0, r3
 8011728:	3728      	adds	r7, #40	; 0x28
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}

0801172e <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 801172e:	b580      	push	{r7, lr}
 8011730:	b086      	sub	sp, #24
 8011732:	af00      	add	r7, sp, #0
 8011734:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011736:	f3ef 8305 	mrs	r3, IPSR
 801173a:	60fb      	str	r3, [r7, #12]
  return(result);
 801173c:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 801173e:	2b00      	cmp	r3, #0
 8011740:	d003      	beq.n	801174a <osDelayUntil+0x1c>
    stat = osErrorISR;
 8011742:	f06f 0305 	mvn.w	r3, #5
 8011746:	617b      	str	r3, [r7, #20]
 8011748:	e019      	b.n	801177e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 801174a:	2300      	movs	r3, #0
 801174c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 801174e:	f001 fa8f 	bl	8012c70 <xTaskGetTickCount>
 8011752:	4603      	mov	r3, r0
 8011754:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	687a      	ldr	r2, [r7, #4]
 801175a:	1ad3      	subs	r3, r2, r3
 801175c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 801175e:	693b      	ldr	r3, [r7, #16]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d009      	beq.n	8011778 <osDelayUntil+0x4a>
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	2b00      	cmp	r3, #0
 8011768:	db06      	blt.n	8011778 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 801176a:	f107 0308 	add.w	r3, r7, #8
 801176e:	6939      	ldr	r1, [r7, #16]
 8011770:	4618      	mov	r0, r3
 8011772:	f001 f8cb 	bl	801290c <vTaskDelayUntil>
 8011776:	e002      	b.n	801177e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8011778:	f06f 0303 	mvn.w	r3, #3
 801177c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801177e:	697b      	ldr	r3, [r7, #20]
}
 8011780:	4618      	mov	r0, r3
 8011782:	3718      	adds	r7, #24
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011788:	b480      	push	{r7}
 801178a:	b085      	sub	sp, #20
 801178c:	af00      	add	r7, sp, #0
 801178e:	60f8      	str	r0, [r7, #12]
 8011790:	60b9      	str	r1, [r7, #8]
 8011792:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	4a07      	ldr	r2, [pc, #28]	; (80117b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8011798:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	4a06      	ldr	r2, [pc, #24]	; (80117b8 <vApplicationGetIdleTaskMemory+0x30>)
 801179e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2280      	movs	r2, #128	; 0x80
 80117a4:	601a      	str	r2, [r3, #0]
}
 80117a6:	bf00      	nop
 80117a8:	3714      	adds	r7, #20
 80117aa:	46bd      	mov	sp, r7
 80117ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b0:	4770      	bx	lr
 80117b2:	bf00      	nop
 80117b4:	20001660 	.word	0x20001660
 80117b8:	2000171c 	.word	0x2000171c

080117bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80117bc:	b480      	push	{r7}
 80117be:	b085      	sub	sp, #20
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	60f8      	str	r0, [r7, #12]
 80117c4:	60b9      	str	r1, [r7, #8]
 80117c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	4a07      	ldr	r2, [pc, #28]	; (80117e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80117cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	4a06      	ldr	r2, [pc, #24]	; (80117ec <vApplicationGetTimerTaskMemory+0x30>)
 80117d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80117da:	601a      	str	r2, [r3, #0]
}
 80117dc:	bf00      	nop
 80117de:	3714      	adds	r7, #20
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr
 80117e8:	2000191c 	.word	0x2000191c
 80117ec:	200019d8 	.word	0x200019d8

080117f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80117f0:	b480      	push	{r7}
 80117f2:	b083      	sub	sp, #12
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f103 0208 	add.w	r2, r3, #8
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f04f 32ff 	mov.w	r2, #4294967295
 8011808:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f103 0208 	add.w	r2, r3, #8
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f103 0208 	add.w	r2, r3, #8
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	2200      	movs	r2, #0
 8011822:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011824:	bf00      	nop
 8011826:	370c      	adds	r7, #12
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr

08011830 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011830:	b480      	push	{r7}
 8011832:	b083      	sub	sp, #12
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2200      	movs	r2, #0
 801183c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801183e:	bf00      	nop
 8011840:	370c      	adds	r7, #12
 8011842:	46bd      	mov	sp, r7
 8011844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011848:	4770      	bx	lr

0801184a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801184a:	b480      	push	{r7}
 801184c:	b085      	sub	sp, #20
 801184e:	af00      	add	r7, sp, #0
 8011850:	6078      	str	r0, [r7, #4]
 8011852:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	68fa      	ldr	r2, [r7, #12]
 801185e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	689a      	ldr	r2, [r3, #8]
 8011864:	683b      	ldr	r3, [r7, #0]
 8011866:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	689b      	ldr	r3, [r3, #8]
 801186c:	683a      	ldr	r2, [r7, #0]
 801186e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	683a      	ldr	r2, [r7, #0]
 8011874:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	687a      	ldr	r2, [r7, #4]
 801187a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	1c5a      	adds	r2, r3, #1
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	601a      	str	r2, [r3, #0]
}
 8011886:	bf00      	nop
 8011888:	3714      	adds	r7, #20
 801188a:	46bd      	mov	sp, r7
 801188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011890:	4770      	bx	lr

08011892 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011892:	b480      	push	{r7}
 8011894:	b085      	sub	sp, #20
 8011896:	af00      	add	r7, sp, #0
 8011898:	6078      	str	r0, [r7, #4]
 801189a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118a8:	d103      	bne.n	80118b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	691b      	ldr	r3, [r3, #16]
 80118ae:	60fb      	str	r3, [r7, #12]
 80118b0:	e00c      	b.n	80118cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	3308      	adds	r3, #8
 80118b6:	60fb      	str	r3, [r7, #12]
 80118b8:	e002      	b.n	80118c0 <vListInsert+0x2e>
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	685b      	ldr	r3, [r3, #4]
 80118be:	60fb      	str	r3, [r7, #12]
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	685b      	ldr	r3, [r3, #4]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	68ba      	ldr	r2, [r7, #8]
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d2f6      	bcs.n	80118ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	685a      	ldr	r2, [r3, #4]
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	683a      	ldr	r2, [r7, #0]
 80118da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	68fa      	ldr	r2, [r7, #12]
 80118e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	683a      	ldr	r2, [r7, #0]
 80118e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	687a      	ldr	r2, [r7, #4]
 80118ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	1c5a      	adds	r2, r3, #1
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	601a      	str	r2, [r3, #0]
}
 80118f8:	bf00      	nop
 80118fa:	3714      	adds	r7, #20
 80118fc:	46bd      	mov	sp, r7
 80118fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011902:	4770      	bx	lr

08011904 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011904:	b480      	push	{r7}
 8011906:	b085      	sub	sp, #20
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	691b      	ldr	r3, [r3, #16]
 8011910:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	687a      	ldr	r2, [r7, #4]
 8011918:	6892      	ldr	r2, [r2, #8]
 801191a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	689b      	ldr	r3, [r3, #8]
 8011920:	687a      	ldr	r2, [r7, #4]
 8011922:	6852      	ldr	r2, [r2, #4]
 8011924:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	685b      	ldr	r3, [r3, #4]
 801192a:	687a      	ldr	r2, [r7, #4]
 801192c:	429a      	cmp	r2, r3
 801192e:	d103      	bne.n	8011938 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	689a      	ldr	r2, [r3, #8]
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2200      	movs	r2, #0
 801193c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	1e5a      	subs	r2, r3, #1
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	681b      	ldr	r3, [r3, #0]
}
 801194c:	4618      	mov	r0, r3
 801194e:	3714      	adds	r7, #20
 8011950:	46bd      	mov	sp, r7
 8011952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011956:	4770      	bx	lr

08011958 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b084      	sub	sp, #16
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d10a      	bne.n	8011982 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801196c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011970:	f383 8811 	msr	BASEPRI, r3
 8011974:	f3bf 8f6f 	isb	sy
 8011978:	f3bf 8f4f 	dsb	sy
 801197c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801197e:	bf00      	nop
 8011980:	e7fe      	b.n	8011980 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011982:	f002 fa7f 	bl	8013e84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	681a      	ldr	r2, [r3, #0]
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801198e:	68f9      	ldr	r1, [r7, #12]
 8011990:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011992:	fb01 f303 	mul.w	r3, r1, r3
 8011996:	441a      	add	r2, r3
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	2200      	movs	r2, #0
 80119a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	681a      	ldr	r2, [r3, #0]
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	681a      	ldr	r2, [r3, #0]
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119b2:	3b01      	subs	r3, #1
 80119b4:	68f9      	ldr	r1, [r7, #12]
 80119b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80119b8:	fb01 f303 	mul.w	r3, r1, r3
 80119bc:	441a      	add	r2, r3
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	22ff      	movs	r2, #255	; 0xff
 80119c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	22ff      	movs	r2, #255	; 0xff
 80119ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d114      	bne.n	8011a02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	691b      	ldr	r3, [r3, #16]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d01a      	beq.n	8011a16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	3310      	adds	r3, #16
 80119e4:	4618      	mov	r0, r3
 80119e6:	f001 faed 	bl	8012fc4 <xTaskRemoveFromEventList>
 80119ea:	4603      	mov	r3, r0
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d012      	beq.n	8011a16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80119f0:	4b0c      	ldr	r3, [pc, #48]	; (8011a24 <xQueueGenericReset+0xcc>)
 80119f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119f6:	601a      	str	r2, [r3, #0]
 80119f8:	f3bf 8f4f 	dsb	sy
 80119fc:	f3bf 8f6f 	isb	sy
 8011a00:	e009      	b.n	8011a16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	3310      	adds	r3, #16
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7ff fef2 	bl	80117f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	3324      	adds	r3, #36	; 0x24
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7ff feed 	bl	80117f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011a16:	f002 fa65 	bl	8013ee4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011a1a:	2301      	movs	r3, #1
}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3710      	adds	r7, #16
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}
 8011a24:	e000ed04 	.word	0xe000ed04

08011a28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b08e      	sub	sp, #56	; 0x38
 8011a2c:	af02      	add	r7, sp, #8
 8011a2e:	60f8      	str	r0, [r7, #12]
 8011a30:	60b9      	str	r1, [r7, #8]
 8011a32:	607a      	str	r2, [r7, #4]
 8011a34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d10a      	bne.n	8011a52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a40:	f383 8811 	msr	BASEPRI, r3
 8011a44:	f3bf 8f6f 	isb	sy
 8011a48:	f3bf 8f4f 	dsb	sy
 8011a4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011a4e:	bf00      	nop
 8011a50:	e7fe      	b.n	8011a50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d10a      	bne.n	8011a6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a5c:	f383 8811 	msr	BASEPRI, r3
 8011a60:	f3bf 8f6f 	isb	sy
 8011a64:	f3bf 8f4f 	dsb	sy
 8011a68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011a6a:	bf00      	nop
 8011a6c:	e7fe      	b.n	8011a6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d002      	beq.n	8011a7a <xQueueGenericCreateStatic+0x52>
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d001      	beq.n	8011a7e <xQueueGenericCreateStatic+0x56>
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	e000      	b.n	8011a80 <xQueueGenericCreateStatic+0x58>
 8011a7e:	2300      	movs	r3, #0
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d10a      	bne.n	8011a9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a88:	f383 8811 	msr	BASEPRI, r3
 8011a8c:	f3bf 8f6f 	isb	sy
 8011a90:	f3bf 8f4f 	dsb	sy
 8011a94:	623b      	str	r3, [r7, #32]
}
 8011a96:	bf00      	nop
 8011a98:	e7fe      	b.n	8011a98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d102      	bne.n	8011aa6 <xQueueGenericCreateStatic+0x7e>
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d101      	bne.n	8011aaa <xQueueGenericCreateStatic+0x82>
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	e000      	b.n	8011aac <xQueueGenericCreateStatic+0x84>
 8011aaa:	2300      	movs	r3, #0
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d10a      	bne.n	8011ac6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab4:	f383 8811 	msr	BASEPRI, r3
 8011ab8:	f3bf 8f6f 	isb	sy
 8011abc:	f3bf 8f4f 	dsb	sy
 8011ac0:	61fb      	str	r3, [r7, #28]
}
 8011ac2:	bf00      	nop
 8011ac4:	e7fe      	b.n	8011ac4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011ac6:	2350      	movs	r3, #80	; 0x50
 8011ac8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	2b50      	cmp	r3, #80	; 0x50
 8011ace:	d00a      	beq.n	8011ae6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad4:	f383 8811 	msr	BASEPRI, r3
 8011ad8:	f3bf 8f6f 	isb	sy
 8011adc:	f3bf 8f4f 	dsb	sy
 8011ae0:	61bb      	str	r3, [r7, #24]
}
 8011ae2:	bf00      	nop
 8011ae4:	e7fe      	b.n	8011ae4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011ae6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d00d      	beq.n	8011b0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af4:	2201      	movs	r2, #1
 8011af6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011afa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b00:	9300      	str	r3, [sp, #0]
 8011b02:	4613      	mov	r3, r2
 8011b04:	687a      	ldr	r2, [r7, #4]
 8011b06:	68b9      	ldr	r1, [r7, #8]
 8011b08:	68f8      	ldr	r0, [r7, #12]
 8011b0a:	f000 f805 	bl	8011b18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3730      	adds	r7, #48	; 0x30
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}

08011b18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b084      	sub	sp, #16
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	60f8      	str	r0, [r7, #12]
 8011b20:	60b9      	str	r1, [r7, #8]
 8011b22:	607a      	str	r2, [r7, #4]
 8011b24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d103      	bne.n	8011b34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011b2c:	69bb      	ldr	r3, [r7, #24]
 8011b2e:	69ba      	ldr	r2, [r7, #24]
 8011b30:	601a      	str	r2, [r3, #0]
 8011b32:	e002      	b.n	8011b3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011b34:	69bb      	ldr	r3, [r7, #24]
 8011b36:	687a      	ldr	r2, [r7, #4]
 8011b38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011b3a:	69bb      	ldr	r3, [r7, #24]
 8011b3c:	68fa      	ldr	r2, [r7, #12]
 8011b3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011b40:	69bb      	ldr	r3, [r7, #24]
 8011b42:	68ba      	ldr	r2, [r7, #8]
 8011b44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011b46:	2101      	movs	r1, #1
 8011b48:	69b8      	ldr	r0, [r7, #24]
 8011b4a:	f7ff ff05 	bl	8011958 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011b4e:	69bb      	ldr	r3, [r7, #24]
 8011b50:	78fa      	ldrb	r2, [r7, #3]
 8011b52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8011b56:	78fb      	ldrb	r3, [r7, #3]
 8011b58:	68ba      	ldr	r2, [r7, #8]
 8011b5a:	68f9      	ldr	r1, [r7, #12]
 8011b5c:	2073      	movs	r0, #115	; 0x73
 8011b5e:	f003 f979 	bl	8014e54 <SEGGER_SYSVIEW_RecordU32x3>
}
 8011b62:	bf00      	nop
 8011b64:	3710      	adds	r7, #16
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}
	...

08011b6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b090      	sub	sp, #64	; 0x40
 8011b70:	af02      	add	r7, sp, #8
 8011b72:	60f8      	str	r0, [r7, #12]
 8011b74:	60b9      	str	r1, [r7, #8]
 8011b76:	607a      	str	r2, [r7, #4]
 8011b78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d10a      	bne.n	8011b9e <xQueueGenericSend+0x32>
	__asm volatile
 8011b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b8c:	f383 8811 	msr	BASEPRI, r3
 8011b90:	f3bf 8f6f 	isb	sy
 8011b94:	f3bf 8f4f 	dsb	sy
 8011b98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011b9a:	bf00      	nop
 8011b9c:	e7fe      	b.n	8011b9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d103      	bne.n	8011bac <xQueueGenericSend+0x40>
 8011ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d101      	bne.n	8011bb0 <xQueueGenericSend+0x44>
 8011bac:	2301      	movs	r3, #1
 8011bae:	e000      	b.n	8011bb2 <xQueueGenericSend+0x46>
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d10a      	bne.n	8011bcc <xQueueGenericSend+0x60>
	__asm volatile
 8011bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bba:	f383 8811 	msr	BASEPRI, r3
 8011bbe:	f3bf 8f6f 	isb	sy
 8011bc2:	f3bf 8f4f 	dsb	sy
 8011bc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011bc8:	bf00      	nop
 8011bca:	e7fe      	b.n	8011bca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	2b02      	cmp	r3, #2
 8011bd0:	d103      	bne.n	8011bda <xQueueGenericSend+0x6e>
 8011bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bd6:	2b01      	cmp	r3, #1
 8011bd8:	d101      	bne.n	8011bde <xQueueGenericSend+0x72>
 8011bda:	2301      	movs	r3, #1
 8011bdc:	e000      	b.n	8011be0 <xQueueGenericSend+0x74>
 8011bde:	2300      	movs	r3, #0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d10a      	bne.n	8011bfa <xQueueGenericSend+0x8e>
	__asm volatile
 8011be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011be8:	f383 8811 	msr	BASEPRI, r3
 8011bec:	f3bf 8f6f 	isb	sy
 8011bf0:	f3bf 8f4f 	dsb	sy
 8011bf4:	623b      	str	r3, [r7, #32]
}
 8011bf6:	bf00      	nop
 8011bf8:	e7fe      	b.n	8011bf8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011bfa:	f001 fbe1 	bl	80133c0 <xTaskGetSchedulerState>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d102      	bne.n	8011c0a <xQueueGenericSend+0x9e>
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d101      	bne.n	8011c0e <xQueueGenericSend+0xa2>
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	e000      	b.n	8011c10 <xQueueGenericSend+0xa4>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d10a      	bne.n	8011c2a <xQueueGenericSend+0xbe>
	__asm volatile
 8011c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c18:	f383 8811 	msr	BASEPRI, r3
 8011c1c:	f3bf 8f6f 	isb	sy
 8011c20:	f3bf 8f4f 	dsb	sy
 8011c24:	61fb      	str	r3, [r7, #28]
}
 8011c26:	bf00      	nop
 8011c28:	e7fe      	b.n	8011c28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011c2a:	f002 f92b 	bl	8013e84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c36:	429a      	cmp	r2, r3
 8011c38:	d302      	bcc.n	8011c40 <xQueueGenericSend+0xd4>
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	2b02      	cmp	r3, #2
 8011c3e:	d136      	bne.n	8011cae <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8011c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c42:	4618      	mov	r0, r3
 8011c44:	f003 fdb8 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 8011c48:	68ba      	ldr	r2, [r7, #8]
 8011c4a:	6879      	ldr	r1, [r7, #4]
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	9300      	str	r3, [sp, #0]
 8011c50:	460b      	mov	r3, r1
 8011c52:	4601      	mov	r1, r0
 8011c54:	205a      	movs	r0, #90	; 0x5a
 8011c56:	f003 f973 	bl	8014f40 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011c5a:	683a      	ldr	r2, [r7, #0]
 8011c5c:	68b9      	ldr	r1, [r7, #8]
 8011c5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c60:	f000 fb08 	bl	8012274 <prvCopyDataToQueue>
 8011c64:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d010      	beq.n	8011c90 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c70:	3324      	adds	r3, #36	; 0x24
 8011c72:	4618      	mov	r0, r3
 8011c74:	f001 f9a6 	bl	8012fc4 <xTaskRemoveFromEventList>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d013      	beq.n	8011ca6 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011c7e:	4b4d      	ldr	r3, [pc, #308]	; (8011db4 <xQueueGenericSend+0x248>)
 8011c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c84:	601a      	str	r2, [r3, #0]
 8011c86:	f3bf 8f4f 	dsb	sy
 8011c8a:	f3bf 8f6f 	isb	sy
 8011c8e:	e00a      	b.n	8011ca6 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d007      	beq.n	8011ca6 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011c96:	4b47      	ldr	r3, [pc, #284]	; (8011db4 <xQueueGenericSend+0x248>)
 8011c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c9c:	601a      	str	r2, [r3, #0]
 8011c9e:	f3bf 8f4f 	dsb	sy
 8011ca2:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011ca6:	f002 f91d 	bl	8013ee4 <vPortExitCritical>
				return pdPASS;
 8011caa:	2301      	movs	r3, #1
 8011cac:	e07d      	b.n	8011daa <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d110      	bne.n	8011cd6 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011cb4:	f002 f916 	bl	8013ee4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8011cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f003 fd7c 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 8011cc0:	68ba      	ldr	r2, [r7, #8]
 8011cc2:	6879      	ldr	r1, [r7, #4]
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	9300      	str	r3, [sp, #0]
 8011cc8:	460b      	mov	r3, r1
 8011cca:	4601      	mov	r1, r0
 8011ccc:	205a      	movs	r0, #90	; 0x5a
 8011cce:	f003 f937 	bl	8014f40 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	e069      	b.n	8011daa <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d106      	bne.n	8011cea <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011cdc:	f107 0314 	add.w	r3, r7, #20
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f001 f9d7 	bl	8013094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011cea:	f002 f8fb 	bl	8013ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011cee:	f000 ff0f 	bl	8012b10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011cf2:	f002 f8c7 	bl	8013e84 <vPortEnterCritical>
 8011cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011cfc:	b25b      	sxtb	r3, r3
 8011cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d02:	d103      	bne.n	8011d0c <xQueueGenericSend+0x1a0>
 8011d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d06:	2200      	movs	r2, #0
 8011d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d12:	b25b      	sxtb	r3, r3
 8011d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d18:	d103      	bne.n	8011d22 <xQueueGenericSend+0x1b6>
 8011d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011d22:	f002 f8df 	bl	8013ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011d26:	1d3a      	adds	r2, r7, #4
 8011d28:	f107 0314 	add.w	r3, r7, #20
 8011d2c:	4611      	mov	r1, r2
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f001 f9c6 	bl	80130c0 <xTaskCheckForTimeOut>
 8011d34:	4603      	mov	r3, r0
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d124      	bne.n	8011d84 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d3c:	f000 fb92 	bl	8012464 <prvIsQueueFull>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d018      	beq.n	8011d78 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d48:	3310      	adds	r3, #16
 8011d4a:	687a      	ldr	r2, [r7, #4]
 8011d4c:	4611      	mov	r1, r2
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f001 f8e6 	bl	8012f20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d56:	f000 fb1d 	bl	8012394 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011d5a:	f000 fee7 	bl	8012b2c <xTaskResumeAll>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	f47f af62 	bne.w	8011c2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011d66:	4b13      	ldr	r3, [pc, #76]	; (8011db4 <xQueueGenericSend+0x248>)
 8011d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d6c:	601a      	str	r2, [r3, #0]
 8011d6e:	f3bf 8f4f 	dsb	sy
 8011d72:	f3bf 8f6f 	isb	sy
 8011d76:	e758      	b.n	8011c2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d7a:	f000 fb0b 	bl	8012394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011d7e:	f000 fed5 	bl	8012b2c <xTaskResumeAll>
 8011d82:	e752      	b.n	8011c2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d86:	f000 fb05 	bl	8012394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011d8a:	f000 fecf 	bl	8012b2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8011d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d90:	4618      	mov	r0, r3
 8011d92:	f003 fd11 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 8011d96:	68ba      	ldr	r2, [r7, #8]
 8011d98:	6879      	ldr	r1, [r7, #4]
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	9300      	str	r3, [sp, #0]
 8011d9e:	460b      	mov	r3, r1
 8011da0:	4601      	mov	r1, r0
 8011da2:	205a      	movs	r0, #90	; 0x5a
 8011da4:	f003 f8cc 	bl	8014f40 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8011da8:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3738      	adds	r7, #56	; 0x38
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	e000ed04 	.word	0xe000ed04

08011db8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b090      	sub	sp, #64	; 0x40
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	60f8      	str	r0, [r7, #12]
 8011dc0:	60b9      	str	r1, [r7, #8]
 8011dc2:	607a      	str	r2, [r7, #4]
 8011dc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d10a      	bne.n	8011de6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dd4:	f383 8811 	msr	BASEPRI, r3
 8011dd8:	f3bf 8f6f 	isb	sy
 8011ddc:	f3bf 8f4f 	dsb	sy
 8011de0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011de2:	bf00      	nop
 8011de4:	e7fe      	b.n	8011de4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d103      	bne.n	8011df4 <xQueueGenericSendFromISR+0x3c>
 8011dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d101      	bne.n	8011df8 <xQueueGenericSendFromISR+0x40>
 8011df4:	2301      	movs	r3, #1
 8011df6:	e000      	b.n	8011dfa <xQueueGenericSendFromISR+0x42>
 8011df8:	2300      	movs	r3, #0
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d10a      	bne.n	8011e14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e02:	f383 8811 	msr	BASEPRI, r3
 8011e06:	f3bf 8f6f 	isb	sy
 8011e0a:	f3bf 8f4f 	dsb	sy
 8011e0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011e10:	bf00      	nop
 8011e12:	e7fe      	b.n	8011e12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	2b02      	cmp	r3, #2
 8011e18:	d103      	bne.n	8011e22 <xQueueGenericSendFromISR+0x6a>
 8011e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e1e:	2b01      	cmp	r3, #1
 8011e20:	d101      	bne.n	8011e26 <xQueueGenericSendFromISR+0x6e>
 8011e22:	2301      	movs	r3, #1
 8011e24:	e000      	b.n	8011e28 <xQueueGenericSendFromISR+0x70>
 8011e26:	2300      	movs	r3, #0
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d10a      	bne.n	8011e42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e30:	f383 8811 	msr	BASEPRI, r3
 8011e34:	f3bf 8f6f 	isb	sy
 8011e38:	f3bf 8f4f 	dsb	sy
 8011e3c:	623b      	str	r3, [r7, #32]
}
 8011e3e:	bf00      	nop
 8011e40:	e7fe      	b.n	8011e40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011e42:	f002 f901 	bl	8014048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011e46:	f3ef 8211 	mrs	r2, BASEPRI
 8011e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e4e:	f383 8811 	msr	BASEPRI, r3
 8011e52:	f3bf 8f6f 	isb	sy
 8011e56:	f3bf 8f4f 	dsb	sy
 8011e5a:	61fa      	str	r2, [r7, #28]
 8011e5c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011e5e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011e60:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d302      	bcc.n	8011e74 <xQueueGenericSendFromISR+0xbc>
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	2b02      	cmp	r3, #2
 8011e72:	d139      	bne.n	8011ee8 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e82:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8011e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e86:	4618      	mov	r0, r3
 8011e88:	f003 fc96 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 8011e8c:	4601      	mov	r1, r0
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	461a      	mov	r2, r3
 8011e92:	2060      	movs	r0, #96	; 0x60
 8011e94:	f002 ff84 	bl	8014da0 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011e98:	683a      	ldr	r2, [r7, #0]
 8011e9a:	68b9      	ldr	r1, [r7, #8]
 8011e9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e9e:	f000 f9e9 	bl	8012274 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011ea2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eaa:	d112      	bne.n	8011ed2 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d016      	beq.n	8011ee2 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb6:	3324      	adds	r3, #36	; 0x24
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f001 f883 	bl	8012fc4 <xTaskRemoveFromEventList>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d00e      	beq.n	8011ee2 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d00b      	beq.n	8011ee2 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	2201      	movs	r2, #1
 8011ece:	601a      	str	r2, [r3, #0]
 8011ed0:	e007      	b.n	8011ee2 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011ed2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011ed6:	3301      	adds	r3, #1
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	b25a      	sxtb	r2, r3
 8011edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011ee6:	e00b      	b.n	8011f00 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8011ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eea:	4618      	mov	r0, r3
 8011eec:	f003 fc64 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 8011ef0:	4601      	mov	r1, r0
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	461a      	mov	r2, r3
 8011ef6:	2060      	movs	r0, #96	; 0x60
 8011ef8:	f002 ff52 	bl	8014da0 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8011efc:	2300      	movs	r3, #0
 8011efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011f0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3740      	adds	r7, #64	; 0x40
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
	...

08011f18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011f18:	b590      	push	{r4, r7, lr}
 8011f1a:	b08f      	sub	sp, #60	; 0x3c
 8011f1c:	af02      	add	r7, sp, #8
 8011f1e:	60f8      	str	r0, [r7, #12]
 8011f20:	60b9      	str	r1, [r7, #8]
 8011f22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011f24:	2300      	movs	r3, #0
 8011f26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d10a      	bne.n	8011f48 <xQueueReceive+0x30>
	__asm volatile
 8011f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f36:	f383 8811 	msr	BASEPRI, r3
 8011f3a:	f3bf 8f6f 	isb	sy
 8011f3e:	f3bf 8f4f 	dsb	sy
 8011f42:	623b      	str	r3, [r7, #32]
}
 8011f44:	bf00      	nop
 8011f46:	e7fe      	b.n	8011f46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d103      	bne.n	8011f56 <xQueueReceive+0x3e>
 8011f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d101      	bne.n	8011f5a <xQueueReceive+0x42>
 8011f56:	2301      	movs	r3, #1
 8011f58:	e000      	b.n	8011f5c <xQueueReceive+0x44>
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d10a      	bne.n	8011f76 <xQueueReceive+0x5e>
	__asm volatile
 8011f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f64:	f383 8811 	msr	BASEPRI, r3
 8011f68:	f3bf 8f6f 	isb	sy
 8011f6c:	f3bf 8f4f 	dsb	sy
 8011f70:	61fb      	str	r3, [r7, #28]
}
 8011f72:	bf00      	nop
 8011f74:	e7fe      	b.n	8011f74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011f76:	f001 fa23 	bl	80133c0 <xTaskGetSchedulerState>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d102      	bne.n	8011f86 <xQueueReceive+0x6e>
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d101      	bne.n	8011f8a <xQueueReceive+0x72>
 8011f86:	2301      	movs	r3, #1
 8011f88:	e000      	b.n	8011f8c <xQueueReceive+0x74>
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d10a      	bne.n	8011fa6 <xQueueReceive+0x8e>
	__asm volatile
 8011f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f94:	f383 8811 	msr	BASEPRI, r3
 8011f98:	f3bf 8f6f 	isb	sy
 8011f9c:	f3bf 8f4f 	dsb	sy
 8011fa0:	61bb      	str	r3, [r7, #24]
}
 8011fa2:	bf00      	nop
 8011fa4:	e7fe      	b.n	8011fa4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011fa6:	f001 ff6d 	bl	8013e84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d02f      	beq.n	8012016 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011fb6:	68b9      	ldr	r1, [r7, #8]
 8011fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011fba:	f000 f9c5 	bl	8012348 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8011fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f003 fbf9 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	2000      	movs	r0, #0
 8011fca:	f003 fbf5 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 8011fce:	4602      	mov	r2, r0
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2101      	movs	r1, #1
 8011fd4:	9100      	str	r1, [sp, #0]
 8011fd6:	4621      	mov	r1, r4
 8011fd8:	205c      	movs	r0, #92	; 0x5c
 8011fda:	f002 ffb1 	bl	8014f40 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe0:	1e5a      	subs	r2, r3, #1
 8011fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe8:	691b      	ldr	r3, [r3, #16]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d00f      	beq.n	801200e <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ff0:	3310      	adds	r3, #16
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f000 ffe6 	bl	8012fc4 <xTaskRemoveFromEventList>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d007      	beq.n	801200e <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011ffe:	4b4d      	ldr	r3, [pc, #308]	; (8012134 <xQueueReceive+0x21c>)
 8012000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012004:	601a      	str	r2, [r3, #0]
 8012006:	f3bf 8f4f 	dsb	sy
 801200a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801200e:	f001 ff69 	bl	8013ee4 <vPortExitCritical>
				return pdPASS;
 8012012:	2301      	movs	r3, #1
 8012014:	e08a      	b.n	801212c <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d113      	bne.n	8012044 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801201c:	f001 ff62 	bl	8013ee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8012020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012022:	4618      	mov	r0, r3
 8012024:	f003 fbc8 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 8012028:	4604      	mov	r4, r0
 801202a:	2000      	movs	r0, #0
 801202c:	f003 fbc4 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 8012030:	4602      	mov	r2, r0
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2101      	movs	r1, #1
 8012036:	9100      	str	r1, [sp, #0]
 8012038:	4621      	mov	r1, r4
 801203a:	205c      	movs	r0, #92	; 0x5c
 801203c:	f002 ff80 	bl	8014f40 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8012040:	2300      	movs	r3, #0
 8012042:	e073      	b.n	801212c <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012046:	2b00      	cmp	r3, #0
 8012048:	d106      	bne.n	8012058 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801204a:	f107 0310 	add.w	r3, r7, #16
 801204e:	4618      	mov	r0, r3
 8012050:	f001 f820 	bl	8013094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012054:	2301      	movs	r3, #1
 8012056:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012058:	f001 ff44 	bl	8013ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801205c:	f000 fd58 	bl	8012b10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012060:	f001 ff10 	bl	8013e84 <vPortEnterCritical>
 8012064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801206a:	b25b      	sxtb	r3, r3
 801206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012070:	d103      	bne.n	801207a <xQueueReceive+0x162>
 8012072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012074:	2200      	movs	r2, #0
 8012076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801207c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012080:	b25b      	sxtb	r3, r3
 8012082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012086:	d103      	bne.n	8012090 <xQueueReceive+0x178>
 8012088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801208a:	2200      	movs	r2, #0
 801208c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012090:	f001 ff28 	bl	8013ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012094:	1d3a      	adds	r2, r7, #4
 8012096:	f107 0310 	add.w	r3, r7, #16
 801209a:	4611      	mov	r1, r2
 801209c:	4618      	mov	r0, r3
 801209e:	f001 f80f 	bl	80130c0 <xTaskCheckForTimeOut>
 80120a2:	4603      	mov	r3, r0
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d124      	bne.n	80120f2 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80120a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120aa:	f000 f9c5 	bl	8012438 <prvIsQueueEmpty>
 80120ae:	4603      	mov	r3, r0
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d018      	beq.n	80120e6 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80120b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b6:	3324      	adds	r3, #36	; 0x24
 80120b8:	687a      	ldr	r2, [r7, #4]
 80120ba:	4611      	mov	r1, r2
 80120bc:	4618      	mov	r0, r3
 80120be:	f000 ff2f 	bl	8012f20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80120c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120c4:	f000 f966 	bl	8012394 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80120c8:	f000 fd30 	bl	8012b2c <xTaskResumeAll>
 80120cc:	4603      	mov	r3, r0
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	f47f af69 	bne.w	8011fa6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80120d4:	4b17      	ldr	r3, [pc, #92]	; (8012134 <xQueueReceive+0x21c>)
 80120d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120da:	601a      	str	r2, [r3, #0]
 80120dc:	f3bf 8f4f 	dsb	sy
 80120e0:	f3bf 8f6f 	isb	sy
 80120e4:	e75f      	b.n	8011fa6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80120e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120e8:	f000 f954 	bl	8012394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80120ec:	f000 fd1e 	bl	8012b2c <xTaskResumeAll>
 80120f0:	e759      	b.n	8011fa6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80120f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120f4:	f000 f94e 	bl	8012394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80120f8:	f000 fd18 	bl	8012b2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80120fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120fe:	f000 f99b 	bl	8012438 <prvIsQueueEmpty>
 8012102:	4603      	mov	r3, r0
 8012104:	2b00      	cmp	r3, #0
 8012106:	f43f af4e 	beq.w	8011fa6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 801210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801210c:	4618      	mov	r0, r3
 801210e:	f003 fb53 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 8012112:	4604      	mov	r4, r0
 8012114:	2000      	movs	r0, #0
 8012116:	f003 fb4f 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 801211a:	4602      	mov	r2, r0
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2101      	movs	r1, #1
 8012120:	9100      	str	r1, [sp, #0]
 8012122:	4621      	mov	r1, r4
 8012124:	205c      	movs	r0, #92	; 0x5c
 8012126:	f002 ff0b 	bl	8014f40 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 801212a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801212c:	4618      	mov	r0, r3
 801212e:	3734      	adds	r7, #52	; 0x34
 8012130:	46bd      	mov	sp, r7
 8012132:	bd90      	pop	{r4, r7, pc}
 8012134:	e000ed04 	.word	0xe000ed04

08012138 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012138:	b590      	push	{r4, r7, lr}
 801213a:	b08f      	sub	sp, #60	; 0x3c
 801213c:	af00      	add	r7, sp, #0
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801214a:	2b00      	cmp	r3, #0
 801214c:	d10a      	bne.n	8012164 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801214e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012152:	f383 8811 	msr	BASEPRI, r3
 8012156:	f3bf 8f6f 	isb	sy
 801215a:	f3bf 8f4f 	dsb	sy
 801215e:	623b      	str	r3, [r7, #32]
}
 8012160:	bf00      	nop
 8012162:	e7fe      	b.n	8012162 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d103      	bne.n	8012172 <xQueueReceiveFromISR+0x3a>
 801216a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801216e:	2b00      	cmp	r3, #0
 8012170:	d101      	bne.n	8012176 <xQueueReceiveFromISR+0x3e>
 8012172:	2301      	movs	r3, #1
 8012174:	e000      	b.n	8012178 <xQueueReceiveFromISR+0x40>
 8012176:	2300      	movs	r3, #0
 8012178:	2b00      	cmp	r3, #0
 801217a:	d10a      	bne.n	8012192 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012180:	f383 8811 	msr	BASEPRI, r3
 8012184:	f3bf 8f6f 	isb	sy
 8012188:	f3bf 8f4f 	dsb	sy
 801218c:	61fb      	str	r3, [r7, #28]
}
 801218e:	bf00      	nop
 8012190:	e7fe      	b.n	8012190 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012192:	f001 ff59 	bl	8014048 <vPortValidateInterruptPriority>
	__asm volatile
 8012196:	f3ef 8211 	mrs	r2, BASEPRI
 801219a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801219e:	f383 8811 	msr	BASEPRI, r3
 80121a2:	f3bf 8f6f 	isb	sy
 80121a6:	f3bf 8f4f 	dsb	sy
 80121aa:	61ba      	str	r2, [r7, #24]
 80121ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80121ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80121b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80121b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80121b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d03e      	beq.n	801223c <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80121be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80121c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 80121c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ca:	4618      	mov	r0, r3
 80121cc:	f003 faf4 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 80121d0:	4604      	mov	r4, r0
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	4618      	mov	r0, r3
 80121d6:	f003 faef 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 80121da:	4602      	mov	r2, r0
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	4621      	mov	r1, r4
 80121e0:	2062      	movs	r0, #98	; 0x62
 80121e2:	f002 fe37 	bl	8014e54 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80121e6:	68b9      	ldr	r1, [r7, #8]
 80121e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121ea:	f000 f8ad 	bl	8012348 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80121ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f0:	1e5a      	subs	r2, r3, #1
 80121f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f4:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80121f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80121fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121fe:	d112      	bne.n	8012226 <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012202:	691b      	ldr	r3, [r3, #16]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d016      	beq.n	8012236 <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801220a:	3310      	adds	r3, #16
 801220c:	4618      	mov	r0, r3
 801220e:	f000 fed9 	bl	8012fc4 <xTaskRemoveFromEventList>
 8012212:	4603      	mov	r3, r0
 8012214:	2b00      	cmp	r3, #0
 8012216:	d00e      	beq.n	8012236 <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d00b      	beq.n	8012236 <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	2201      	movs	r2, #1
 8012222:	601a      	str	r2, [r3, #0]
 8012224:	e007      	b.n	8012236 <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801222a:	3301      	adds	r3, #1
 801222c:	b2db      	uxtb	r3, r3
 801222e:	b25a      	sxtb	r2, r3
 8012230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012236:	2301      	movs	r3, #1
 8012238:	637b      	str	r3, [r7, #52]	; 0x34
 801223a:	e010      	b.n	801225e <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 801223c:	2300      	movs	r3, #0
 801223e:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8012240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012242:	4618      	mov	r0, r3
 8012244:	f003 fab8 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 8012248:	4604      	mov	r4, r0
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	4618      	mov	r0, r3
 801224e:	f003 fab3 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 8012252:	4602      	mov	r2, r0
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	4621      	mov	r1, r4
 8012258:	2062      	movs	r0, #98	; 0x62
 801225a:	f002 fdfb 	bl	8014e54 <SEGGER_SYSVIEW_RecordU32x3>
 801225e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012260:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	f383 8811 	msr	BASEPRI, r3
}
 8012268:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801226a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801226c:	4618      	mov	r0, r3
 801226e:	373c      	adds	r7, #60	; 0x3c
 8012270:	46bd      	mov	sp, r7
 8012272:	bd90      	pop	{r4, r7, pc}

08012274 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b086      	sub	sp, #24
 8012278:	af00      	add	r7, sp, #0
 801227a:	60f8      	str	r0, [r7, #12]
 801227c:	60b9      	str	r1, [r7, #8]
 801227e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012280:	2300      	movs	r3, #0
 8012282:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012288:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801228e:	2b00      	cmp	r3, #0
 8012290:	d10d      	bne.n	80122ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d14d      	bne.n	8012336 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	689b      	ldr	r3, [r3, #8]
 801229e:	4618      	mov	r0, r3
 80122a0:	f001 f8ac 	bl	80133fc <xTaskPriorityDisinherit>
 80122a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	2200      	movs	r2, #0
 80122aa:	609a      	str	r2, [r3, #8]
 80122ac:	e043      	b.n	8012336 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d119      	bne.n	80122e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	6858      	ldr	r0, [r3, #4]
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122bc:	461a      	mov	r2, r3
 80122be:	68b9      	ldr	r1, [r7, #8]
 80122c0:	f003 fbfc 	bl	8015abc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	685a      	ldr	r2, [r3, #4]
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122cc:	441a      	add	r2, r3
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	685a      	ldr	r2, [r3, #4]
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	689b      	ldr	r3, [r3, #8]
 80122da:	429a      	cmp	r2, r3
 80122dc:	d32b      	bcc.n	8012336 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	681a      	ldr	r2, [r3, #0]
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	605a      	str	r2, [r3, #4]
 80122e6:	e026      	b.n	8012336 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	68d8      	ldr	r0, [r3, #12]
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122f0:	461a      	mov	r2, r3
 80122f2:	68b9      	ldr	r1, [r7, #8]
 80122f4:	f003 fbe2 	bl	8015abc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	68da      	ldr	r2, [r3, #12]
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012300:	425b      	negs	r3, r3
 8012302:	441a      	add	r2, r3
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	68da      	ldr	r2, [r3, #12]
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	429a      	cmp	r2, r3
 8012312:	d207      	bcs.n	8012324 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	689a      	ldr	r2, [r3, #8]
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801231c:	425b      	negs	r3, r3
 801231e:	441a      	add	r2, r3
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2b02      	cmp	r3, #2
 8012328:	d105      	bne.n	8012336 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801232a:	693b      	ldr	r3, [r7, #16]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d002      	beq.n	8012336 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	3b01      	subs	r3, #1
 8012334:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012336:	693b      	ldr	r3, [r7, #16]
 8012338:	1c5a      	adds	r2, r3, #1
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801233e:	697b      	ldr	r3, [r7, #20]
}
 8012340:	4618      	mov	r0, r3
 8012342:	3718      	adds	r7, #24
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b082      	sub	sp, #8
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
 8012350:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012356:	2b00      	cmp	r3, #0
 8012358:	d018      	beq.n	801238c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	68da      	ldr	r2, [r3, #12]
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012362:	441a      	add	r2, r3
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	68da      	ldr	r2, [r3, #12]
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	689b      	ldr	r3, [r3, #8]
 8012370:	429a      	cmp	r2, r3
 8012372:	d303      	bcc.n	801237c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681a      	ldr	r2, [r3, #0]
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	68d9      	ldr	r1, [r3, #12]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012384:	461a      	mov	r2, r3
 8012386:	6838      	ldr	r0, [r7, #0]
 8012388:	f003 fb98 	bl	8015abc <memcpy>
	}
}
 801238c:	bf00      	nop
 801238e:	3708      	adds	r7, #8
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}

08012394 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b084      	sub	sp, #16
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801239c:	f001 fd72 	bl	8013e84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80123a8:	e011      	b.n	80123ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d012      	beq.n	80123d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	3324      	adds	r3, #36	; 0x24
 80123b6:	4618      	mov	r0, r3
 80123b8:	f000 fe04 	bl	8012fc4 <xTaskRemoveFromEventList>
 80123bc:	4603      	mov	r3, r0
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d001      	beq.n	80123c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80123c2:	f000 fedf 	bl	8013184 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80123c6:	7bfb      	ldrb	r3, [r7, #15]
 80123c8:	3b01      	subs	r3, #1
 80123ca:	b2db      	uxtb	r3, r3
 80123cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80123ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	dce9      	bgt.n	80123aa <prvUnlockQueue+0x16>
 80123d6:	e000      	b.n	80123da <prvUnlockQueue+0x46>
					break;
 80123d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	22ff      	movs	r2, #255	; 0xff
 80123de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80123e2:	f001 fd7f 	bl	8013ee4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80123e6:	f001 fd4d 	bl	8013e84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80123f2:	e011      	b.n	8012418 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	691b      	ldr	r3, [r3, #16]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d012      	beq.n	8012422 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	3310      	adds	r3, #16
 8012400:	4618      	mov	r0, r3
 8012402:	f000 fddf 	bl	8012fc4 <xTaskRemoveFromEventList>
 8012406:	4603      	mov	r3, r0
 8012408:	2b00      	cmp	r3, #0
 801240a:	d001      	beq.n	8012410 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801240c:	f000 feba 	bl	8013184 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012410:	7bbb      	ldrb	r3, [r7, #14]
 8012412:	3b01      	subs	r3, #1
 8012414:	b2db      	uxtb	r3, r3
 8012416:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012418:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801241c:	2b00      	cmp	r3, #0
 801241e:	dce9      	bgt.n	80123f4 <prvUnlockQueue+0x60>
 8012420:	e000      	b.n	8012424 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012422:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	22ff      	movs	r2, #255	; 0xff
 8012428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801242c:	f001 fd5a 	bl	8013ee4 <vPortExitCritical>
}
 8012430:	bf00      	nop
 8012432:	3710      	adds	r7, #16
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}

08012438 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b084      	sub	sp, #16
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012440:	f001 fd20 	bl	8013e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012448:	2b00      	cmp	r3, #0
 801244a:	d102      	bne.n	8012452 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801244c:	2301      	movs	r3, #1
 801244e:	60fb      	str	r3, [r7, #12]
 8012450:	e001      	b.n	8012456 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012452:	2300      	movs	r3, #0
 8012454:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012456:	f001 fd45 	bl	8013ee4 <vPortExitCritical>

	return xReturn;
 801245a:	68fb      	ldr	r3, [r7, #12]
}
 801245c:	4618      	mov	r0, r3
 801245e:	3710      	adds	r7, #16
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b084      	sub	sp, #16
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801246c:	f001 fd0a 	bl	8013e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012478:	429a      	cmp	r2, r3
 801247a:	d102      	bne.n	8012482 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801247c:	2301      	movs	r3, #1
 801247e:	60fb      	str	r3, [r7, #12]
 8012480:	e001      	b.n	8012486 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012482:	2300      	movs	r3, #0
 8012484:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012486:	f001 fd2d 	bl	8013ee4 <vPortExitCritical>

	return xReturn;
 801248a:	68fb      	ldr	r3, [r7, #12]
}
 801248c:	4618      	mov	r0, r3
 801248e:	3710      	adds	r7, #16
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}

08012494 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012494:	b580      	push	{r7, lr}
 8012496:	b084      	sub	sp, #16
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801249e:	2300      	movs	r3, #0
 80124a0:	60fb      	str	r3, [r7, #12]
 80124a2:	e01e      	b.n	80124e2 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80124a4:	4a13      	ldr	r2, [pc, #76]	; (80124f4 <vQueueAddToRegistry+0x60>)
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d115      	bne.n	80124dc <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80124b0:	4910      	ldr	r1, [pc, #64]	; (80124f4 <vQueueAddToRegistry+0x60>)
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	683a      	ldr	r2, [r7, #0]
 80124b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80124ba:	4a0e      	ldr	r2, [pc, #56]	; (80124f4 <vQueueAddToRegistry+0x60>)
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	00db      	lsls	r3, r3, #3
 80124c0:	4413      	add	r3, r2
 80124c2:	687a      	ldr	r2, [r7, #4]
 80124c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	4618      	mov	r0, r3
 80124ca:	f003 f975 	bl	80157b8 <SEGGER_SYSVIEW_ShrinkId>
 80124ce:	4601      	mov	r1, r0
 80124d0:	683b      	ldr	r3, [r7, #0]
 80124d2:	461a      	mov	r2, r3
 80124d4:	2071      	movs	r0, #113	; 0x71
 80124d6:	f002 fc63 	bl	8014da0 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80124da:	e006      	b.n	80124ea <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	3301      	adds	r3, #1
 80124e0:	60fb      	str	r3, [r7, #12]
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	2b07      	cmp	r3, #7
 80124e6:	d9dd      	bls.n	80124a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80124e8:	bf00      	nop
 80124ea:	bf00      	nop
 80124ec:	3710      	adds	r7, #16
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}
 80124f2:	bf00      	nop
 80124f4:	2000de18 	.word	0x2000de18

080124f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b086      	sub	sp, #24
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	60f8      	str	r0, [r7, #12]
 8012500:	60b9      	str	r1, [r7, #8]
 8012502:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012508:	f001 fcbc 	bl	8013e84 <vPortEnterCritical>
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012512:	b25b      	sxtb	r3, r3
 8012514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012518:	d103      	bne.n	8012522 <vQueueWaitForMessageRestricted+0x2a>
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	2200      	movs	r2, #0
 801251e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012528:	b25b      	sxtb	r3, r3
 801252a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801252e:	d103      	bne.n	8012538 <vQueueWaitForMessageRestricted+0x40>
 8012530:	697b      	ldr	r3, [r7, #20]
 8012532:	2200      	movs	r2, #0
 8012534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012538:	f001 fcd4 	bl	8013ee4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012540:	2b00      	cmp	r3, #0
 8012542:	d106      	bne.n	8012552 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	3324      	adds	r3, #36	; 0x24
 8012548:	687a      	ldr	r2, [r7, #4]
 801254a:	68b9      	ldr	r1, [r7, #8]
 801254c:	4618      	mov	r0, r3
 801254e:	f000 fd0b 	bl	8012f68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012552:	6978      	ldr	r0, [r7, #20]
 8012554:	f7ff ff1e 	bl	8012394 <prvUnlockQueue>
	}
 8012558:	bf00      	nop
 801255a:	3718      	adds	r7, #24
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}

08012560 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012560:	b580      	push	{r7, lr}
 8012562:	b08e      	sub	sp, #56	; 0x38
 8012564:	af04      	add	r7, sp, #16
 8012566:	60f8      	str	r0, [r7, #12]
 8012568:	60b9      	str	r1, [r7, #8]
 801256a:	607a      	str	r2, [r7, #4]
 801256c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801256e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012570:	2b00      	cmp	r3, #0
 8012572:	d10a      	bne.n	801258a <xTaskCreateStatic+0x2a>
	__asm volatile
 8012574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012578:	f383 8811 	msr	BASEPRI, r3
 801257c:	f3bf 8f6f 	isb	sy
 8012580:	f3bf 8f4f 	dsb	sy
 8012584:	623b      	str	r3, [r7, #32]
}
 8012586:	bf00      	nop
 8012588:	e7fe      	b.n	8012588 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801258a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801258c:	2b00      	cmp	r3, #0
 801258e:	d10a      	bne.n	80125a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8012590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012594:	f383 8811 	msr	BASEPRI, r3
 8012598:	f3bf 8f6f 	isb	sy
 801259c:	f3bf 8f4f 	dsb	sy
 80125a0:	61fb      	str	r3, [r7, #28]
}
 80125a2:	bf00      	nop
 80125a4:	e7fe      	b.n	80125a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80125a6:	23bc      	movs	r3, #188	; 0xbc
 80125a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80125aa:	693b      	ldr	r3, [r7, #16]
 80125ac:	2bbc      	cmp	r3, #188	; 0xbc
 80125ae:	d00a      	beq.n	80125c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80125b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b4:	f383 8811 	msr	BASEPRI, r3
 80125b8:	f3bf 8f6f 	isb	sy
 80125bc:	f3bf 8f4f 	dsb	sy
 80125c0:	61bb      	str	r3, [r7, #24]
}
 80125c2:	bf00      	nop
 80125c4:	e7fe      	b.n	80125c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80125c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80125c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d01e      	beq.n	801260c <xTaskCreateStatic+0xac>
 80125ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d01b      	beq.n	801260c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80125d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80125d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80125de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e0:	2202      	movs	r2, #2
 80125e2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80125e6:	2300      	movs	r3, #0
 80125e8:	9303      	str	r3, [sp, #12]
 80125ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ec:	9302      	str	r3, [sp, #8]
 80125ee:	f107 0314 	add.w	r3, r7, #20
 80125f2:	9301      	str	r3, [sp, #4]
 80125f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125f6:	9300      	str	r3, [sp, #0]
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	687a      	ldr	r2, [r7, #4]
 80125fc:	68b9      	ldr	r1, [r7, #8]
 80125fe:	68f8      	ldr	r0, [r7, #12]
 8012600:	f000 f850 	bl	80126a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012606:	f000 f8f3 	bl	80127f0 <prvAddNewTaskToReadyList>
 801260a:	e001      	b.n	8012610 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801260c:	2300      	movs	r3, #0
 801260e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012610:	697b      	ldr	r3, [r7, #20]
	}
 8012612:	4618      	mov	r0, r3
 8012614:	3728      	adds	r7, #40	; 0x28
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}

0801261a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801261a:	b580      	push	{r7, lr}
 801261c:	b08c      	sub	sp, #48	; 0x30
 801261e:	af04      	add	r7, sp, #16
 8012620:	60f8      	str	r0, [r7, #12]
 8012622:	60b9      	str	r1, [r7, #8]
 8012624:	603b      	str	r3, [r7, #0]
 8012626:	4613      	mov	r3, r2
 8012628:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801262a:	88fb      	ldrh	r3, [r7, #6]
 801262c:	009b      	lsls	r3, r3, #2
 801262e:	4618      	mov	r0, r3
 8012630:	f001 fd4a 	bl	80140c8 <pvPortMalloc>
 8012634:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d00e      	beq.n	801265a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801263c:	20bc      	movs	r0, #188	; 0xbc
 801263e:	f001 fd43 	bl	80140c8 <pvPortMalloc>
 8012642:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012644:	69fb      	ldr	r3, [r7, #28]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d003      	beq.n	8012652 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801264a:	69fb      	ldr	r3, [r7, #28]
 801264c:	697a      	ldr	r2, [r7, #20]
 801264e:	631a      	str	r2, [r3, #48]	; 0x30
 8012650:	e005      	b.n	801265e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012652:	6978      	ldr	r0, [r7, #20]
 8012654:	f001 fe04 	bl	8014260 <vPortFree>
 8012658:	e001      	b.n	801265e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801265a:	2300      	movs	r3, #0
 801265c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801265e:	69fb      	ldr	r3, [r7, #28]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d017      	beq.n	8012694 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	2200      	movs	r2, #0
 8012668:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801266c:	88fa      	ldrh	r2, [r7, #6]
 801266e:	2300      	movs	r3, #0
 8012670:	9303      	str	r3, [sp, #12]
 8012672:	69fb      	ldr	r3, [r7, #28]
 8012674:	9302      	str	r3, [sp, #8]
 8012676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012678:	9301      	str	r3, [sp, #4]
 801267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801267c:	9300      	str	r3, [sp, #0]
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	68b9      	ldr	r1, [r7, #8]
 8012682:	68f8      	ldr	r0, [r7, #12]
 8012684:	f000 f80e 	bl	80126a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012688:	69f8      	ldr	r0, [r7, #28]
 801268a:	f000 f8b1 	bl	80127f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801268e:	2301      	movs	r3, #1
 8012690:	61bb      	str	r3, [r7, #24]
 8012692:	e002      	b.n	801269a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012694:	f04f 33ff 	mov.w	r3, #4294967295
 8012698:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801269a:	69bb      	ldr	r3, [r7, #24]
	}
 801269c:	4618      	mov	r0, r3
 801269e:	3720      	adds	r7, #32
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}

080126a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b088      	sub	sp, #32
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	60f8      	str	r0, [r7, #12]
 80126ac:	60b9      	str	r1, [r7, #8]
 80126ae:	607a      	str	r2, [r7, #4]
 80126b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80126b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	009b      	lsls	r3, r3, #2
 80126ba:	461a      	mov	r2, r3
 80126bc:	21a5      	movs	r1, #165	; 0xa5
 80126be:	f003 fa0b 	bl	8015ad8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80126c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80126cc:	3b01      	subs	r3, #1
 80126ce:	009b      	lsls	r3, r3, #2
 80126d0:	4413      	add	r3, r2
 80126d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80126d4:	69bb      	ldr	r3, [r7, #24]
 80126d6:	f023 0307 	bic.w	r3, r3, #7
 80126da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	f003 0307 	and.w	r3, r3, #7
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d00a      	beq.n	80126fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80126e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ea:	f383 8811 	msr	BASEPRI, r3
 80126ee:	f3bf 8f6f 	isb	sy
 80126f2:	f3bf 8f4f 	dsb	sy
 80126f6:	617b      	str	r3, [r7, #20]
}
 80126f8:	bf00      	nop
 80126fa:	e7fe      	b.n	80126fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d01f      	beq.n	8012742 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012702:	2300      	movs	r3, #0
 8012704:	61fb      	str	r3, [r7, #28]
 8012706:	e012      	b.n	801272e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012708:	68ba      	ldr	r2, [r7, #8]
 801270a:	69fb      	ldr	r3, [r7, #28]
 801270c:	4413      	add	r3, r2
 801270e:	7819      	ldrb	r1, [r3, #0]
 8012710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012712:	69fb      	ldr	r3, [r7, #28]
 8012714:	4413      	add	r3, r2
 8012716:	3334      	adds	r3, #52	; 0x34
 8012718:	460a      	mov	r2, r1
 801271a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801271c:	68ba      	ldr	r2, [r7, #8]
 801271e:	69fb      	ldr	r3, [r7, #28]
 8012720:	4413      	add	r3, r2
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d006      	beq.n	8012736 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012728:	69fb      	ldr	r3, [r7, #28]
 801272a:	3301      	adds	r3, #1
 801272c:	61fb      	str	r3, [r7, #28]
 801272e:	69fb      	ldr	r3, [r7, #28]
 8012730:	2b0f      	cmp	r3, #15
 8012732:	d9e9      	bls.n	8012708 <prvInitialiseNewTask+0x64>
 8012734:	e000      	b.n	8012738 <prvInitialiseNewTask+0x94>
			{
				break;
 8012736:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801273a:	2200      	movs	r2, #0
 801273c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012740:	e003      	b.n	801274a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012744:	2200      	movs	r2, #0
 8012746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801274c:	2b37      	cmp	r3, #55	; 0x37
 801274e:	d901      	bls.n	8012754 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012750:	2337      	movs	r3, #55	; 0x37
 8012752:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012758:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801275c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801275e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012762:	2200      	movs	r2, #0
 8012764:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012768:	3304      	adds	r3, #4
 801276a:	4618      	mov	r0, r3
 801276c:	f7ff f860 	bl	8011830 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012772:	3318      	adds	r3, #24
 8012774:	4618      	mov	r0, r3
 8012776:	f7ff f85b 	bl	8011830 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801277e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012782:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012788:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801278c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801278e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012792:	2200      	movs	r2, #0
 8012794:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279a:	2200      	movs	r2, #0
 801279c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80127a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a2:	3354      	adds	r3, #84	; 0x54
 80127a4:	2260      	movs	r2, #96	; 0x60
 80127a6:	2100      	movs	r1, #0
 80127a8:	4618      	mov	r0, r3
 80127aa:	f003 f995 	bl	8015ad8 <memset>
 80127ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b0:	4a0c      	ldr	r2, [pc, #48]	; (80127e4 <prvInitialiseNewTask+0x140>)
 80127b2:	659a      	str	r2, [r3, #88]	; 0x58
 80127b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b6:	4a0c      	ldr	r2, [pc, #48]	; (80127e8 <prvInitialiseNewTask+0x144>)
 80127b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80127ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127bc:	4a0b      	ldr	r2, [pc, #44]	; (80127ec <prvInitialiseNewTask+0x148>)
 80127be:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80127c0:	683a      	ldr	r2, [r7, #0]
 80127c2:	68f9      	ldr	r1, [r7, #12]
 80127c4:	69b8      	ldr	r0, [r7, #24]
 80127c6:	f001 fa31 	bl	8013c2c <pxPortInitialiseStack>
 80127ca:	4602      	mov	r2, r0
 80127cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80127d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d002      	beq.n	80127dc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80127d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80127dc:	bf00      	nop
 80127de:	3720      	adds	r7, #32
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd80      	pop	{r7, pc}
 80127e4:	0801673c 	.word	0x0801673c
 80127e8:	0801675c 	.word	0x0801675c
 80127ec:	0801671c 	.word	0x0801671c

080127f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80127f0:	b5b0      	push	{r4, r5, r7, lr}
 80127f2:	b084      	sub	sp, #16
 80127f4:	af02      	add	r7, sp, #8
 80127f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80127f8:	f001 fb44 	bl	8013e84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80127fc:	4b3c      	ldr	r3, [pc, #240]	; (80128f0 <prvAddNewTaskToReadyList+0x100>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	3301      	adds	r3, #1
 8012802:	4a3b      	ldr	r2, [pc, #236]	; (80128f0 <prvAddNewTaskToReadyList+0x100>)
 8012804:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012806:	4b3b      	ldr	r3, [pc, #236]	; (80128f4 <prvAddNewTaskToReadyList+0x104>)
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d109      	bne.n	8012822 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801280e:	4a39      	ldr	r2, [pc, #228]	; (80128f4 <prvAddNewTaskToReadyList+0x104>)
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012814:	4b36      	ldr	r3, [pc, #216]	; (80128f0 <prvAddNewTaskToReadyList+0x100>)
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	2b01      	cmp	r3, #1
 801281a:	d110      	bne.n	801283e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801281c:	f000 fcd6 	bl	80131cc <prvInitialiseTaskLists>
 8012820:	e00d      	b.n	801283e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012822:	4b35      	ldr	r3, [pc, #212]	; (80128f8 <prvAddNewTaskToReadyList+0x108>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d109      	bne.n	801283e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801282a:	4b32      	ldr	r3, [pc, #200]	; (80128f4 <prvAddNewTaskToReadyList+0x104>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012834:	429a      	cmp	r2, r3
 8012836:	d802      	bhi.n	801283e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012838:	4a2e      	ldr	r2, [pc, #184]	; (80128f4 <prvAddNewTaskToReadyList+0x104>)
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801283e:	4b2f      	ldr	r3, [pc, #188]	; (80128fc <prvAddNewTaskToReadyList+0x10c>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	3301      	adds	r3, #1
 8012844:	4a2d      	ldr	r2, [pc, #180]	; (80128fc <prvAddNewTaskToReadyList+0x10c>)
 8012846:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012848:	4b2c      	ldr	r3, [pc, #176]	; (80128fc <prvAddNewTaskToReadyList+0x10c>)
 801284a:	681a      	ldr	r2, [r3, #0]
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d016      	beq.n	8012884 <prvAddNewTaskToReadyList+0x94>
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	4618      	mov	r0, r3
 801285a:	f002 fee7 	bl	801562c <SEGGER_SYSVIEW_OnTaskCreate>
 801285e:	6878      	ldr	r0, [r7, #4]
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801286e:	461d      	mov	r5, r3
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	461c      	mov	r4, r3
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801287a:	1ae3      	subs	r3, r4, r3
 801287c:	9300      	str	r3, [sp, #0]
 801287e:	462b      	mov	r3, r5
 8012880:	f7ee fd86 	bl	8001390 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	4618      	mov	r0, r3
 8012888:	f002 ff54 	bl	8015734 <SEGGER_SYSVIEW_OnTaskStartReady>
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012890:	4b1b      	ldr	r3, [pc, #108]	; (8012900 <prvAddNewTaskToReadyList+0x110>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	429a      	cmp	r2, r3
 8012896:	d903      	bls.n	80128a0 <prvAddNewTaskToReadyList+0xb0>
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801289c:	4a18      	ldr	r2, [pc, #96]	; (8012900 <prvAddNewTaskToReadyList+0x110>)
 801289e:	6013      	str	r3, [r2, #0]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128a4:	4613      	mov	r3, r2
 80128a6:	009b      	lsls	r3, r3, #2
 80128a8:	4413      	add	r3, r2
 80128aa:	009b      	lsls	r3, r3, #2
 80128ac:	4a15      	ldr	r2, [pc, #84]	; (8012904 <prvAddNewTaskToReadyList+0x114>)
 80128ae:	441a      	add	r2, r3
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	3304      	adds	r3, #4
 80128b4:	4619      	mov	r1, r3
 80128b6:	4610      	mov	r0, r2
 80128b8:	f7fe ffc7 	bl	801184a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80128bc:	f001 fb12 	bl	8013ee4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80128c0:	4b0d      	ldr	r3, [pc, #52]	; (80128f8 <prvAddNewTaskToReadyList+0x108>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d00e      	beq.n	80128e6 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80128c8:	4b0a      	ldr	r3, [pc, #40]	; (80128f4 <prvAddNewTaskToReadyList+0x104>)
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d207      	bcs.n	80128e6 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80128d6:	4b0c      	ldr	r3, [pc, #48]	; (8012908 <prvAddNewTaskToReadyList+0x118>)
 80128d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128dc:	601a      	str	r2, [r3, #0]
 80128de:	f3bf 8f4f 	dsb	sy
 80128e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80128e6:	bf00      	nop
 80128e8:	3708      	adds	r7, #8
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bdb0      	pop	{r4, r5, r7, pc}
 80128ee:	bf00      	nop
 80128f0:	200022ac 	.word	0x200022ac
 80128f4:	20001dd8 	.word	0x20001dd8
 80128f8:	200022b8 	.word	0x200022b8
 80128fc:	200022c8 	.word	0x200022c8
 8012900:	200022b4 	.word	0x200022b4
 8012904:	20001ddc 	.word	0x20001ddc
 8012908:	e000ed04 	.word	0xe000ed04

0801290c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801290c:	b580      	push	{r7, lr}
 801290e:	b08a      	sub	sp, #40	; 0x28
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
 8012914:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8012916:	2300      	movs	r3, #0
 8012918:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d10a      	bne.n	8012936 <vTaskDelayUntil+0x2a>
	__asm volatile
 8012920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012924:	f383 8811 	msr	BASEPRI, r3
 8012928:	f3bf 8f6f 	isb	sy
 801292c:	f3bf 8f4f 	dsb	sy
 8012930:	617b      	str	r3, [r7, #20]
}
 8012932:	bf00      	nop
 8012934:	e7fe      	b.n	8012934 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8012936:	683b      	ldr	r3, [r7, #0]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d10a      	bne.n	8012952 <vTaskDelayUntil+0x46>
	__asm volatile
 801293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012940:	f383 8811 	msr	BASEPRI, r3
 8012944:	f3bf 8f6f 	isb	sy
 8012948:	f3bf 8f4f 	dsb	sy
 801294c:	613b      	str	r3, [r7, #16]
}
 801294e:	bf00      	nop
 8012950:	e7fe      	b.n	8012950 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8012952:	4b2b      	ldr	r3, [pc, #172]	; (8012a00 <vTaskDelayUntil+0xf4>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d00a      	beq.n	8012970 <vTaskDelayUntil+0x64>
	__asm volatile
 801295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801295e:	f383 8811 	msr	BASEPRI, r3
 8012962:	f3bf 8f6f 	isb	sy
 8012966:	f3bf 8f4f 	dsb	sy
 801296a:	60fb      	str	r3, [r7, #12]
}
 801296c:	bf00      	nop
 801296e:	e7fe      	b.n	801296e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8012970:	f000 f8ce 	bl	8012b10 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8012974:	4b23      	ldr	r3, [pc, #140]	; (8012a04 <vTaskDelayUntil+0xf8>)
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	683a      	ldr	r2, [r7, #0]
 8012980:	4413      	add	r3, r2
 8012982:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	6a3a      	ldr	r2, [r7, #32]
 801298a:	429a      	cmp	r2, r3
 801298c:	d20b      	bcs.n	80129a6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	69fa      	ldr	r2, [r7, #28]
 8012994:	429a      	cmp	r2, r3
 8012996:	d211      	bcs.n	80129bc <vTaskDelayUntil+0xb0>
 8012998:	69fa      	ldr	r2, [r7, #28]
 801299a:	6a3b      	ldr	r3, [r7, #32]
 801299c:	429a      	cmp	r2, r3
 801299e:	d90d      	bls.n	80129bc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80129a0:	2301      	movs	r3, #1
 80129a2:	627b      	str	r3, [r7, #36]	; 0x24
 80129a4:	e00a      	b.n	80129bc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	69fa      	ldr	r2, [r7, #28]
 80129ac:	429a      	cmp	r2, r3
 80129ae:	d303      	bcc.n	80129b8 <vTaskDelayUntil+0xac>
 80129b0:	69fa      	ldr	r2, [r7, #28]
 80129b2:	6a3b      	ldr	r3, [r7, #32]
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d901      	bls.n	80129bc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80129b8:	2301      	movs	r3, #1
 80129ba:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	69fa      	ldr	r2, [r7, #28]
 80129c0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80129c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d009      	beq.n	80129dc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 80129c8:	2024      	movs	r0, #36	; 0x24
 80129ca:	f002 f98f 	bl	8014cec <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80129ce:	69fa      	ldr	r2, [r7, #28]
 80129d0:	6a3b      	ldr	r3, [r7, #32]
 80129d2:	1ad3      	subs	r3, r2, r3
 80129d4:	2100      	movs	r1, #0
 80129d6:	4618      	mov	r0, r3
 80129d8:	f000 fd86 	bl	80134e8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80129dc:	f000 f8a6 	bl	8012b2c <xTaskResumeAll>
 80129e0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80129e2:	69bb      	ldr	r3, [r7, #24]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d107      	bne.n	80129f8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80129e8:	4b07      	ldr	r3, [pc, #28]	; (8012a08 <vTaskDelayUntil+0xfc>)
 80129ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129ee:	601a      	str	r2, [r3, #0]
 80129f0:	f3bf 8f4f 	dsb	sy
 80129f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80129f8:	bf00      	nop
 80129fa:	3728      	adds	r7, #40	; 0x28
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	200022d4 	.word	0x200022d4
 8012a04:	200022b0 	.word	0x200022b0
 8012a08:	e000ed04 	.word	0xe000ed04

08012a0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b08a      	sub	sp, #40	; 0x28
 8012a10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012a12:	2300      	movs	r3, #0
 8012a14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012a16:	2300      	movs	r3, #0
 8012a18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012a1a:	463a      	mov	r2, r7
 8012a1c:	1d39      	adds	r1, r7, #4
 8012a1e:	f107 0308 	add.w	r3, r7, #8
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7fe feb0 	bl	8011788 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012a28:	6839      	ldr	r1, [r7, #0]
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	68ba      	ldr	r2, [r7, #8]
 8012a2e:	9202      	str	r2, [sp, #8]
 8012a30:	9301      	str	r3, [sp, #4]
 8012a32:	2300      	movs	r3, #0
 8012a34:	9300      	str	r3, [sp, #0]
 8012a36:	2300      	movs	r3, #0
 8012a38:	460a      	mov	r2, r1
 8012a3a:	492d      	ldr	r1, [pc, #180]	; (8012af0 <vTaskStartScheduler+0xe4>)
 8012a3c:	482d      	ldr	r0, [pc, #180]	; (8012af4 <vTaskStartScheduler+0xe8>)
 8012a3e:	f7ff fd8f 	bl	8012560 <xTaskCreateStatic>
 8012a42:	4603      	mov	r3, r0
 8012a44:	4a2c      	ldr	r2, [pc, #176]	; (8012af8 <vTaskStartScheduler+0xec>)
 8012a46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012a48:	4b2b      	ldr	r3, [pc, #172]	; (8012af8 <vTaskStartScheduler+0xec>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d002      	beq.n	8012a56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012a50:	2301      	movs	r3, #1
 8012a52:	617b      	str	r3, [r7, #20]
 8012a54:	e001      	b.n	8012a5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012a56:	2300      	movs	r3, #0
 8012a58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	2b01      	cmp	r3, #1
 8012a5e:	d102      	bne.n	8012a66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012a60:	f000 fd96 	bl	8013590 <xTimerCreateTimerTask>
 8012a64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	2b01      	cmp	r3, #1
 8012a6a:	d12e      	bne.n	8012aca <vTaskStartScheduler+0xbe>
	__asm volatile
 8012a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a70:	f383 8811 	msr	BASEPRI, r3
 8012a74:	f3bf 8f6f 	isb	sy
 8012a78:	f3bf 8f4f 	dsb	sy
 8012a7c:	613b      	str	r3, [r7, #16]
}
 8012a7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012a80:	4b1e      	ldr	r3, [pc, #120]	; (8012afc <vTaskStartScheduler+0xf0>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	3354      	adds	r3, #84	; 0x54
 8012a86:	4a1e      	ldr	r2, [pc, #120]	; (8012b00 <vTaskStartScheduler+0xf4>)
 8012a88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012a8a:	4b1e      	ldr	r3, [pc, #120]	; (8012b04 <vTaskStartScheduler+0xf8>)
 8012a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8012a90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012a92:	4b1d      	ldr	r3, [pc, #116]	; (8012b08 <vTaskStartScheduler+0xfc>)
 8012a94:	2201      	movs	r2, #1
 8012a96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012a98:	4b1c      	ldr	r3, [pc, #112]	; (8012b0c <vTaskStartScheduler+0x100>)
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8012a9e:	4b17      	ldr	r3, [pc, #92]	; (8012afc <vTaskStartScheduler+0xf0>)
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	3334      	adds	r3, #52	; 0x34
 8012aa4:	2205      	movs	r2, #5
 8012aa6:	4912      	ldr	r1, [pc, #72]	; (8012af0 <vTaskStartScheduler+0xe4>)
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f002 fff9 	bl	8015aa0 <memcmp>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d005      	beq.n	8012ac0 <vTaskStartScheduler+0xb4>
 8012ab4:	4b11      	ldr	r3, [pc, #68]	; (8012afc <vTaskStartScheduler+0xf0>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f002 fdf9 	bl	80156b0 <SEGGER_SYSVIEW_OnTaskStartExec>
 8012abe:	e001      	b.n	8012ac4 <vTaskStartScheduler+0xb8>
 8012ac0:	f002 fd98 	bl	80155f4 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012ac4:	f001 f93c 	bl	8013d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012ac8:	e00e      	b.n	8012ae8 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ad0:	d10a      	bne.n	8012ae8 <vTaskStartScheduler+0xdc>
	__asm volatile
 8012ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad6:	f383 8811 	msr	BASEPRI, r3
 8012ada:	f3bf 8f6f 	isb	sy
 8012ade:	f3bf 8f4f 	dsb	sy
 8012ae2:	60fb      	str	r3, [r7, #12]
}
 8012ae4:	bf00      	nop
 8012ae6:	e7fe      	b.n	8012ae6 <vTaskStartScheduler+0xda>
}
 8012ae8:	bf00      	nop
 8012aea:	3718      	adds	r7, #24
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}
 8012af0:	080164e0 	.word	0x080164e0
 8012af4:	0801319d 	.word	0x0801319d
 8012af8:	200022d0 	.word	0x200022d0
 8012afc:	20001dd8 	.word	0x20001dd8
 8012b00:	200012f4 	.word	0x200012f4
 8012b04:	200022cc 	.word	0x200022cc
 8012b08:	200022b8 	.word	0x200022b8
 8012b0c:	200022b0 	.word	0x200022b0

08012b10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012b10:	b480      	push	{r7}
 8012b12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012b14:	4b04      	ldr	r3, [pc, #16]	; (8012b28 <vTaskSuspendAll+0x18>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	3301      	adds	r3, #1
 8012b1a:	4a03      	ldr	r2, [pc, #12]	; (8012b28 <vTaskSuspendAll+0x18>)
 8012b1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012b1e:	bf00      	nop
 8012b20:	46bd      	mov	sp, r7
 8012b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b26:	4770      	bx	lr
 8012b28:	200022d4 	.word	0x200022d4

08012b2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b084      	sub	sp, #16
 8012b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012b32:	2300      	movs	r3, #0
 8012b34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012b36:	2300      	movs	r3, #0
 8012b38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012b3a:	4b44      	ldr	r3, [pc, #272]	; (8012c4c <xTaskResumeAll+0x120>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d10a      	bne.n	8012b58 <xTaskResumeAll+0x2c>
	__asm volatile
 8012b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b46:	f383 8811 	msr	BASEPRI, r3
 8012b4a:	f3bf 8f6f 	isb	sy
 8012b4e:	f3bf 8f4f 	dsb	sy
 8012b52:	603b      	str	r3, [r7, #0]
}
 8012b54:	bf00      	nop
 8012b56:	e7fe      	b.n	8012b56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012b58:	f001 f994 	bl	8013e84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012b5c:	4b3b      	ldr	r3, [pc, #236]	; (8012c4c <xTaskResumeAll+0x120>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	3b01      	subs	r3, #1
 8012b62:	4a3a      	ldr	r2, [pc, #232]	; (8012c4c <xTaskResumeAll+0x120>)
 8012b64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b66:	4b39      	ldr	r3, [pc, #228]	; (8012c4c <xTaskResumeAll+0x120>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d166      	bne.n	8012c3c <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012b6e:	4b38      	ldr	r3, [pc, #224]	; (8012c50 <xTaskResumeAll+0x124>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d062      	beq.n	8012c3c <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012b76:	e033      	b.n	8012be0 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b78:	4b36      	ldr	r3, [pc, #216]	; (8012c54 <xTaskResumeAll+0x128>)
 8012b7a:	68db      	ldr	r3, [r3, #12]
 8012b7c:	68db      	ldr	r3, [r3, #12]
 8012b7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	3318      	adds	r3, #24
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7fe febd 	bl	8011904 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	3304      	adds	r3, #4
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7fe feb8 	bl	8011904 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	4618      	mov	r0, r3
 8012b98:	f002 fdcc 	bl	8015734 <SEGGER_SYSVIEW_OnTaskStartReady>
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ba0:	4b2d      	ldr	r3, [pc, #180]	; (8012c58 <xTaskResumeAll+0x12c>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	d903      	bls.n	8012bb0 <xTaskResumeAll+0x84>
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bac:	4a2a      	ldr	r2, [pc, #168]	; (8012c58 <xTaskResumeAll+0x12c>)
 8012bae:	6013      	str	r3, [r2, #0]
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bb4:	4613      	mov	r3, r2
 8012bb6:	009b      	lsls	r3, r3, #2
 8012bb8:	4413      	add	r3, r2
 8012bba:	009b      	lsls	r3, r3, #2
 8012bbc:	4a27      	ldr	r2, [pc, #156]	; (8012c5c <xTaskResumeAll+0x130>)
 8012bbe:	441a      	add	r2, r3
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	3304      	adds	r3, #4
 8012bc4:	4619      	mov	r1, r3
 8012bc6:	4610      	mov	r0, r2
 8012bc8:	f7fe fe3f 	bl	801184a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bd0:	4b23      	ldr	r3, [pc, #140]	; (8012c60 <xTaskResumeAll+0x134>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d302      	bcc.n	8012be0 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8012bda:	4b22      	ldr	r3, [pc, #136]	; (8012c64 <xTaskResumeAll+0x138>)
 8012bdc:	2201      	movs	r2, #1
 8012bde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012be0:	4b1c      	ldr	r3, [pc, #112]	; (8012c54 <xTaskResumeAll+0x128>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d1c7      	bne.n	8012b78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d001      	beq.n	8012bf2 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012bee:	f000 fbc7 	bl	8013380 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012bf2:	4b1d      	ldr	r3, [pc, #116]	; (8012c68 <xTaskResumeAll+0x13c>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d010      	beq.n	8012c20 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012bfe:	f000 f859 	bl	8012cb4 <xTaskIncrementTick>
 8012c02:	4603      	mov	r3, r0
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d002      	beq.n	8012c0e <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8012c08:	4b16      	ldr	r3, [pc, #88]	; (8012c64 <xTaskResumeAll+0x138>)
 8012c0a:	2201      	movs	r2, #1
 8012c0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	3b01      	subs	r3, #1
 8012c12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d1f1      	bne.n	8012bfe <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8012c1a:	4b13      	ldr	r3, [pc, #76]	; (8012c68 <xTaskResumeAll+0x13c>)
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012c20:	4b10      	ldr	r3, [pc, #64]	; (8012c64 <xTaskResumeAll+0x138>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d009      	beq.n	8012c3c <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012c28:	2301      	movs	r3, #1
 8012c2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012c2c:	4b0f      	ldr	r3, [pc, #60]	; (8012c6c <xTaskResumeAll+0x140>)
 8012c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c32:	601a      	str	r2, [r3, #0]
 8012c34:	f3bf 8f4f 	dsb	sy
 8012c38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012c3c:	f001 f952 	bl	8013ee4 <vPortExitCritical>

	return xAlreadyYielded;
 8012c40:	68bb      	ldr	r3, [r7, #8]
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3710      	adds	r7, #16
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	200022d4 	.word	0x200022d4
 8012c50:	200022ac 	.word	0x200022ac
 8012c54:	2000226c 	.word	0x2000226c
 8012c58:	200022b4 	.word	0x200022b4
 8012c5c:	20001ddc 	.word	0x20001ddc
 8012c60:	20001dd8 	.word	0x20001dd8
 8012c64:	200022c0 	.word	0x200022c0
 8012c68:	200022bc 	.word	0x200022bc
 8012c6c:	e000ed04 	.word	0xe000ed04

08012c70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012c70:	b480      	push	{r7}
 8012c72:	b083      	sub	sp, #12
 8012c74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012c76:	4b05      	ldr	r3, [pc, #20]	; (8012c8c <xTaskGetTickCount+0x1c>)
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012c7c:	687b      	ldr	r3, [r7, #4]
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	370c      	adds	r7, #12
 8012c82:	46bd      	mov	sp, r7
 8012c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c88:	4770      	bx	lr
 8012c8a:	bf00      	nop
 8012c8c:	200022b0 	.word	0x200022b0

08012c90 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012c96:	f001 f9d7 	bl	8014048 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012c9e:	4b04      	ldr	r3, [pc, #16]	; (8012cb0 <xTaskGetTickCountFromISR+0x20>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012ca4:	683b      	ldr	r3, [r7, #0]
}
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	3708      	adds	r7, #8
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}
 8012cae:	bf00      	nop
 8012cb0:	200022b0 	.word	0x200022b0

08012cb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b086      	sub	sp, #24
 8012cb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012cba:	2300      	movs	r3, #0
 8012cbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012cbe:	4b51      	ldr	r3, [pc, #324]	; (8012e04 <xTaskIncrementTick+0x150>)
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	f040 8093 	bne.w	8012dee <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012cc8:	4b4f      	ldr	r3, [pc, #316]	; (8012e08 <xTaskIncrementTick+0x154>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	3301      	adds	r3, #1
 8012cce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012cd0:	4a4d      	ldr	r2, [pc, #308]	; (8012e08 <xTaskIncrementTick+0x154>)
 8012cd2:	693b      	ldr	r3, [r7, #16]
 8012cd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012cd6:	693b      	ldr	r3, [r7, #16]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d120      	bne.n	8012d1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012cdc:	4b4b      	ldr	r3, [pc, #300]	; (8012e0c <xTaskIncrementTick+0x158>)
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d00a      	beq.n	8012cfc <xTaskIncrementTick+0x48>
	__asm volatile
 8012ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cea:	f383 8811 	msr	BASEPRI, r3
 8012cee:	f3bf 8f6f 	isb	sy
 8012cf2:	f3bf 8f4f 	dsb	sy
 8012cf6:	603b      	str	r3, [r7, #0]
}
 8012cf8:	bf00      	nop
 8012cfa:	e7fe      	b.n	8012cfa <xTaskIncrementTick+0x46>
 8012cfc:	4b43      	ldr	r3, [pc, #268]	; (8012e0c <xTaskIncrementTick+0x158>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	60fb      	str	r3, [r7, #12]
 8012d02:	4b43      	ldr	r3, [pc, #268]	; (8012e10 <xTaskIncrementTick+0x15c>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	4a41      	ldr	r2, [pc, #260]	; (8012e0c <xTaskIncrementTick+0x158>)
 8012d08:	6013      	str	r3, [r2, #0]
 8012d0a:	4a41      	ldr	r2, [pc, #260]	; (8012e10 <xTaskIncrementTick+0x15c>)
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	6013      	str	r3, [r2, #0]
 8012d10:	4b40      	ldr	r3, [pc, #256]	; (8012e14 <xTaskIncrementTick+0x160>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	3301      	adds	r3, #1
 8012d16:	4a3f      	ldr	r2, [pc, #252]	; (8012e14 <xTaskIncrementTick+0x160>)
 8012d18:	6013      	str	r3, [r2, #0]
 8012d1a:	f000 fb31 	bl	8013380 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012d1e:	4b3e      	ldr	r3, [pc, #248]	; (8012e18 <xTaskIncrementTick+0x164>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	693a      	ldr	r2, [r7, #16]
 8012d24:	429a      	cmp	r2, r3
 8012d26:	d34d      	bcc.n	8012dc4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012d28:	4b38      	ldr	r3, [pc, #224]	; (8012e0c <xTaskIncrementTick+0x158>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d104      	bne.n	8012d3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d32:	4b39      	ldr	r3, [pc, #228]	; (8012e18 <xTaskIncrementTick+0x164>)
 8012d34:	f04f 32ff 	mov.w	r2, #4294967295
 8012d38:	601a      	str	r2, [r3, #0]
					break;
 8012d3a:	e043      	b.n	8012dc4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d3c:	4b33      	ldr	r3, [pc, #204]	; (8012e0c <xTaskIncrementTick+0x158>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	68db      	ldr	r3, [r3, #12]
 8012d42:	68db      	ldr	r3, [r3, #12]
 8012d44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012d4c:	693a      	ldr	r2, [r7, #16]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	429a      	cmp	r2, r3
 8012d52:	d203      	bcs.n	8012d5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012d54:	4a30      	ldr	r2, [pc, #192]	; (8012e18 <xTaskIncrementTick+0x164>)
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012d5a:	e033      	b.n	8012dc4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	3304      	adds	r3, #4
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7fe fdcf 	bl	8011904 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012d66:	68bb      	ldr	r3, [r7, #8]
 8012d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d004      	beq.n	8012d78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	3318      	adds	r3, #24
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7fe fdc6 	bl	8011904 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012d78:	68bb      	ldr	r3, [r7, #8]
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f002 fcda 	bl	8015734 <SEGGER_SYSVIEW_OnTaskStartReady>
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d84:	4b25      	ldr	r3, [pc, #148]	; (8012e1c <xTaskIncrementTick+0x168>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	d903      	bls.n	8012d94 <xTaskIncrementTick+0xe0>
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d90:	4a22      	ldr	r2, [pc, #136]	; (8012e1c <xTaskIncrementTick+0x168>)
 8012d92:	6013      	str	r3, [r2, #0]
 8012d94:	68bb      	ldr	r3, [r7, #8]
 8012d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d98:	4613      	mov	r3, r2
 8012d9a:	009b      	lsls	r3, r3, #2
 8012d9c:	4413      	add	r3, r2
 8012d9e:	009b      	lsls	r3, r3, #2
 8012da0:	4a1f      	ldr	r2, [pc, #124]	; (8012e20 <xTaskIncrementTick+0x16c>)
 8012da2:	441a      	add	r2, r3
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	3304      	adds	r3, #4
 8012da8:	4619      	mov	r1, r3
 8012daa:	4610      	mov	r0, r2
 8012dac:	f7fe fd4d 	bl	801184a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012db4:	4b1b      	ldr	r3, [pc, #108]	; (8012e24 <xTaskIncrementTick+0x170>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d3b4      	bcc.n	8012d28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012dbe:	2301      	movs	r3, #1
 8012dc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012dc2:	e7b1      	b.n	8012d28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012dc4:	4b17      	ldr	r3, [pc, #92]	; (8012e24 <xTaskIncrementTick+0x170>)
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012dca:	4915      	ldr	r1, [pc, #84]	; (8012e20 <xTaskIncrementTick+0x16c>)
 8012dcc:	4613      	mov	r3, r2
 8012dce:	009b      	lsls	r3, r3, #2
 8012dd0:	4413      	add	r3, r2
 8012dd2:	009b      	lsls	r3, r3, #2
 8012dd4:	440b      	add	r3, r1
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	2b01      	cmp	r3, #1
 8012dda:	d901      	bls.n	8012de0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8012ddc:	2301      	movs	r3, #1
 8012dde:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012de0:	4b11      	ldr	r3, [pc, #68]	; (8012e28 <xTaskIncrementTick+0x174>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d007      	beq.n	8012df8 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8012de8:	2301      	movs	r3, #1
 8012dea:	617b      	str	r3, [r7, #20]
 8012dec:	e004      	b.n	8012df8 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012dee:	4b0f      	ldr	r3, [pc, #60]	; (8012e2c <xTaskIncrementTick+0x178>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	3301      	adds	r3, #1
 8012df4:	4a0d      	ldr	r2, [pc, #52]	; (8012e2c <xTaskIncrementTick+0x178>)
 8012df6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012df8:	697b      	ldr	r3, [r7, #20]
}
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	3718      	adds	r7, #24
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}
 8012e02:	bf00      	nop
 8012e04:	200022d4 	.word	0x200022d4
 8012e08:	200022b0 	.word	0x200022b0
 8012e0c:	20002264 	.word	0x20002264
 8012e10:	20002268 	.word	0x20002268
 8012e14:	200022c4 	.word	0x200022c4
 8012e18:	200022cc 	.word	0x200022cc
 8012e1c:	200022b4 	.word	0x200022b4
 8012e20:	20001ddc 	.word	0x20001ddc
 8012e24:	20001dd8 	.word	0x20001dd8
 8012e28:	200022c0 	.word	0x200022c0
 8012e2c:	200022bc 	.word	0x200022bc

08012e30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b084      	sub	sp, #16
 8012e34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012e36:	4b33      	ldr	r3, [pc, #204]	; (8012f04 <vTaskSwitchContext+0xd4>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d003      	beq.n	8012e46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012e3e:	4b32      	ldr	r3, [pc, #200]	; (8012f08 <vTaskSwitchContext+0xd8>)
 8012e40:	2201      	movs	r2, #1
 8012e42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012e44:	e059      	b.n	8012efa <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8012e46:	4b30      	ldr	r3, [pc, #192]	; (8012f08 <vTaskSwitchContext+0xd8>)
 8012e48:	2200      	movs	r2, #0
 8012e4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e4c:	4b2f      	ldr	r3, [pc, #188]	; (8012f0c <vTaskSwitchContext+0xdc>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	60fb      	str	r3, [r7, #12]
 8012e52:	e010      	b.n	8012e76 <vTaskSwitchContext+0x46>
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d10a      	bne.n	8012e70 <vTaskSwitchContext+0x40>
	__asm volatile
 8012e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e5e:	f383 8811 	msr	BASEPRI, r3
 8012e62:	f3bf 8f6f 	isb	sy
 8012e66:	f3bf 8f4f 	dsb	sy
 8012e6a:	607b      	str	r3, [r7, #4]
}
 8012e6c:	bf00      	nop
 8012e6e:	e7fe      	b.n	8012e6e <vTaskSwitchContext+0x3e>
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	3b01      	subs	r3, #1
 8012e74:	60fb      	str	r3, [r7, #12]
 8012e76:	4926      	ldr	r1, [pc, #152]	; (8012f10 <vTaskSwitchContext+0xe0>)
 8012e78:	68fa      	ldr	r2, [r7, #12]
 8012e7a:	4613      	mov	r3, r2
 8012e7c:	009b      	lsls	r3, r3, #2
 8012e7e:	4413      	add	r3, r2
 8012e80:	009b      	lsls	r3, r3, #2
 8012e82:	440b      	add	r3, r1
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d0e4      	beq.n	8012e54 <vTaskSwitchContext+0x24>
 8012e8a:	68fa      	ldr	r2, [r7, #12]
 8012e8c:	4613      	mov	r3, r2
 8012e8e:	009b      	lsls	r3, r3, #2
 8012e90:	4413      	add	r3, r2
 8012e92:	009b      	lsls	r3, r3, #2
 8012e94:	4a1e      	ldr	r2, [pc, #120]	; (8012f10 <vTaskSwitchContext+0xe0>)
 8012e96:	4413      	add	r3, r2
 8012e98:	60bb      	str	r3, [r7, #8]
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	685b      	ldr	r3, [r3, #4]
 8012e9e:	685a      	ldr	r2, [r3, #4]
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	605a      	str	r2, [r3, #4]
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	685a      	ldr	r2, [r3, #4]
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	3308      	adds	r3, #8
 8012eac:	429a      	cmp	r2, r3
 8012eae:	d104      	bne.n	8012eba <vTaskSwitchContext+0x8a>
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	685b      	ldr	r3, [r3, #4]
 8012eb4:	685a      	ldr	r2, [r3, #4]
 8012eb6:	68bb      	ldr	r3, [r7, #8]
 8012eb8:	605a      	str	r2, [r3, #4]
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	68db      	ldr	r3, [r3, #12]
 8012ec0:	4a14      	ldr	r2, [pc, #80]	; (8012f14 <vTaskSwitchContext+0xe4>)
 8012ec2:	6013      	str	r3, [r2, #0]
 8012ec4:	4a11      	ldr	r2, [pc, #68]	; (8012f0c <vTaskSwitchContext+0xdc>)
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8012eca:	4b12      	ldr	r3, [pc, #72]	; (8012f14 <vTaskSwitchContext+0xe4>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	3334      	adds	r3, #52	; 0x34
 8012ed0:	2205      	movs	r2, #5
 8012ed2:	4911      	ldr	r1, [pc, #68]	; (8012f18 <vTaskSwitchContext+0xe8>)
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f002 fde3 	bl	8015aa0 <memcmp>
 8012eda:	4603      	mov	r3, r0
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d005      	beq.n	8012eec <vTaskSwitchContext+0xbc>
 8012ee0:	4b0c      	ldr	r3, [pc, #48]	; (8012f14 <vTaskSwitchContext+0xe4>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f002 fbe3 	bl	80156b0 <SEGGER_SYSVIEW_OnTaskStartExec>
 8012eea:	e001      	b.n	8012ef0 <vTaskSwitchContext+0xc0>
 8012eec:	f002 fb82 	bl	80155f4 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012ef0:	4b08      	ldr	r3, [pc, #32]	; (8012f14 <vTaskSwitchContext+0xe4>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	3354      	adds	r3, #84	; 0x54
 8012ef6:	4a09      	ldr	r2, [pc, #36]	; (8012f1c <vTaskSwitchContext+0xec>)
 8012ef8:	6013      	str	r3, [r2, #0]
}
 8012efa:	bf00      	nop
 8012efc:	3710      	adds	r7, #16
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}
 8012f02:	bf00      	nop
 8012f04:	200022d4 	.word	0x200022d4
 8012f08:	200022c0 	.word	0x200022c0
 8012f0c:	200022b4 	.word	0x200022b4
 8012f10:	20001ddc 	.word	0x20001ddc
 8012f14:	20001dd8 	.word	0x20001dd8
 8012f18:	080164e0 	.word	0x080164e0
 8012f1c:	200012f4 	.word	0x200012f4

08012f20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b084      	sub	sp, #16
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d10a      	bne.n	8012f46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f34:	f383 8811 	msr	BASEPRI, r3
 8012f38:	f3bf 8f6f 	isb	sy
 8012f3c:	f3bf 8f4f 	dsb	sy
 8012f40:	60fb      	str	r3, [r7, #12]
}
 8012f42:	bf00      	nop
 8012f44:	e7fe      	b.n	8012f44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012f46:	4b07      	ldr	r3, [pc, #28]	; (8012f64 <vTaskPlaceOnEventList+0x44>)
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	3318      	adds	r3, #24
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f7fe fc9f 	bl	8011892 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012f54:	2101      	movs	r1, #1
 8012f56:	6838      	ldr	r0, [r7, #0]
 8012f58:	f000 fac6 	bl	80134e8 <prvAddCurrentTaskToDelayedList>
}
 8012f5c:	bf00      	nop
 8012f5e:	3710      	adds	r7, #16
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}
 8012f64:	20001dd8 	.word	0x20001dd8

08012f68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b086      	sub	sp, #24
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	60f8      	str	r0, [r7, #12]
 8012f70:	60b9      	str	r1, [r7, #8]
 8012f72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d10a      	bne.n	8012f90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8012f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f7e:	f383 8811 	msr	BASEPRI, r3
 8012f82:	f3bf 8f6f 	isb	sy
 8012f86:	f3bf 8f4f 	dsb	sy
 8012f8a:	617b      	str	r3, [r7, #20]
}
 8012f8c:	bf00      	nop
 8012f8e:	e7fe      	b.n	8012f8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012f90:	4b0b      	ldr	r3, [pc, #44]	; (8012fc0 <vTaskPlaceOnEventListRestricted+0x58>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	3318      	adds	r3, #24
 8012f96:	4619      	mov	r1, r3
 8012f98:	68f8      	ldr	r0, [r7, #12]
 8012f9a:	f7fe fc56 	bl	801184a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d002      	beq.n	8012faa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8012fa8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8012faa:	2024      	movs	r0, #36	; 0x24
 8012fac:	f001 fe9e 	bl	8014cec <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012fb0:	6879      	ldr	r1, [r7, #4]
 8012fb2:	68b8      	ldr	r0, [r7, #8]
 8012fb4:	f000 fa98 	bl	80134e8 <prvAddCurrentTaskToDelayedList>
	}
 8012fb8:	bf00      	nop
 8012fba:	3718      	adds	r7, #24
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}
 8012fc0:	20001dd8 	.word	0x20001dd8

08012fc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b086      	sub	sp, #24
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	68db      	ldr	r3, [r3, #12]
 8012fd0:	68db      	ldr	r3, [r3, #12]
 8012fd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012fd4:	693b      	ldr	r3, [r7, #16]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d10a      	bne.n	8012ff0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fde:	f383 8811 	msr	BASEPRI, r3
 8012fe2:	f3bf 8f6f 	isb	sy
 8012fe6:	f3bf 8f4f 	dsb	sy
 8012fea:	60fb      	str	r3, [r7, #12]
}
 8012fec:	bf00      	nop
 8012fee:	e7fe      	b.n	8012fee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	3318      	adds	r3, #24
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7fe fc85 	bl	8011904 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ffa:	4b20      	ldr	r3, [pc, #128]	; (801307c <xTaskRemoveFromEventList+0xb8>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d121      	bne.n	8013046 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013002:	693b      	ldr	r3, [r7, #16]
 8013004:	3304      	adds	r3, #4
 8013006:	4618      	mov	r0, r3
 8013008:	f7fe fc7c 	bl	8011904 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801300c:	693b      	ldr	r3, [r7, #16]
 801300e:	4618      	mov	r0, r3
 8013010:	f002 fb90 	bl	8015734 <SEGGER_SYSVIEW_OnTaskStartReady>
 8013014:	693b      	ldr	r3, [r7, #16]
 8013016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013018:	4b19      	ldr	r3, [pc, #100]	; (8013080 <xTaskRemoveFromEventList+0xbc>)
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	429a      	cmp	r2, r3
 801301e:	d903      	bls.n	8013028 <xTaskRemoveFromEventList+0x64>
 8013020:	693b      	ldr	r3, [r7, #16]
 8013022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013024:	4a16      	ldr	r2, [pc, #88]	; (8013080 <xTaskRemoveFromEventList+0xbc>)
 8013026:	6013      	str	r3, [r2, #0]
 8013028:	693b      	ldr	r3, [r7, #16]
 801302a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801302c:	4613      	mov	r3, r2
 801302e:	009b      	lsls	r3, r3, #2
 8013030:	4413      	add	r3, r2
 8013032:	009b      	lsls	r3, r3, #2
 8013034:	4a13      	ldr	r2, [pc, #76]	; (8013084 <xTaskRemoveFromEventList+0xc0>)
 8013036:	441a      	add	r2, r3
 8013038:	693b      	ldr	r3, [r7, #16]
 801303a:	3304      	adds	r3, #4
 801303c:	4619      	mov	r1, r3
 801303e:	4610      	mov	r0, r2
 8013040:	f7fe fc03 	bl	801184a <vListInsertEnd>
 8013044:	e005      	b.n	8013052 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013046:	693b      	ldr	r3, [r7, #16]
 8013048:	3318      	adds	r3, #24
 801304a:	4619      	mov	r1, r3
 801304c:	480e      	ldr	r0, [pc, #56]	; (8013088 <xTaskRemoveFromEventList+0xc4>)
 801304e:	f7fe fbfc 	bl	801184a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013052:	693b      	ldr	r3, [r7, #16]
 8013054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013056:	4b0d      	ldr	r3, [pc, #52]	; (801308c <xTaskRemoveFromEventList+0xc8>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801305c:	429a      	cmp	r2, r3
 801305e:	d905      	bls.n	801306c <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013060:	2301      	movs	r3, #1
 8013062:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013064:	4b0a      	ldr	r3, [pc, #40]	; (8013090 <xTaskRemoveFromEventList+0xcc>)
 8013066:	2201      	movs	r2, #1
 8013068:	601a      	str	r2, [r3, #0]
 801306a:	e001      	b.n	8013070 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 801306c:	2300      	movs	r3, #0
 801306e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013070:	697b      	ldr	r3, [r7, #20]
}
 8013072:	4618      	mov	r0, r3
 8013074:	3718      	adds	r7, #24
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}
 801307a:	bf00      	nop
 801307c:	200022d4 	.word	0x200022d4
 8013080:	200022b4 	.word	0x200022b4
 8013084:	20001ddc 	.word	0x20001ddc
 8013088:	2000226c 	.word	0x2000226c
 801308c:	20001dd8 	.word	0x20001dd8
 8013090:	200022c0 	.word	0x200022c0

08013094 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013094:	b480      	push	{r7}
 8013096:	b083      	sub	sp, #12
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801309c:	4b06      	ldr	r3, [pc, #24]	; (80130b8 <vTaskInternalSetTimeOutState+0x24>)
 801309e:	681a      	ldr	r2, [r3, #0]
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80130a4:	4b05      	ldr	r3, [pc, #20]	; (80130bc <vTaskInternalSetTimeOutState+0x28>)
 80130a6:	681a      	ldr	r2, [r3, #0]
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	605a      	str	r2, [r3, #4]
}
 80130ac:	bf00      	nop
 80130ae:	370c      	adds	r7, #12
 80130b0:	46bd      	mov	sp, r7
 80130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b6:	4770      	bx	lr
 80130b8:	200022c4 	.word	0x200022c4
 80130bc:	200022b0 	.word	0x200022b0

080130c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b088      	sub	sp, #32
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d10a      	bne.n	80130e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80130d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130d4:	f383 8811 	msr	BASEPRI, r3
 80130d8:	f3bf 8f6f 	isb	sy
 80130dc:	f3bf 8f4f 	dsb	sy
 80130e0:	613b      	str	r3, [r7, #16]
}
 80130e2:	bf00      	nop
 80130e4:	e7fe      	b.n	80130e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d10a      	bne.n	8013102 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80130ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f0:	f383 8811 	msr	BASEPRI, r3
 80130f4:	f3bf 8f6f 	isb	sy
 80130f8:	f3bf 8f4f 	dsb	sy
 80130fc:	60fb      	str	r3, [r7, #12]
}
 80130fe:	bf00      	nop
 8013100:	e7fe      	b.n	8013100 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013102:	f000 febf 	bl	8013e84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013106:	4b1d      	ldr	r3, [pc, #116]	; (801317c <xTaskCheckForTimeOut+0xbc>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	69ba      	ldr	r2, [r7, #24]
 8013112:	1ad3      	subs	r3, r2, r3
 8013114:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801311e:	d102      	bne.n	8013126 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013120:	2300      	movs	r3, #0
 8013122:	61fb      	str	r3, [r7, #28]
 8013124:	e023      	b.n	801316e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	681a      	ldr	r2, [r3, #0]
 801312a:	4b15      	ldr	r3, [pc, #84]	; (8013180 <xTaskCheckForTimeOut+0xc0>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	429a      	cmp	r2, r3
 8013130:	d007      	beq.n	8013142 <xTaskCheckForTimeOut+0x82>
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	685b      	ldr	r3, [r3, #4]
 8013136:	69ba      	ldr	r2, [r7, #24]
 8013138:	429a      	cmp	r2, r3
 801313a:	d302      	bcc.n	8013142 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801313c:	2301      	movs	r3, #1
 801313e:	61fb      	str	r3, [r7, #28]
 8013140:	e015      	b.n	801316e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	697a      	ldr	r2, [r7, #20]
 8013148:	429a      	cmp	r2, r3
 801314a:	d20b      	bcs.n	8013164 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	681a      	ldr	r2, [r3, #0]
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	1ad2      	subs	r2, r2, r3
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f7ff ff9b 	bl	8013094 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801315e:	2300      	movs	r3, #0
 8013160:	61fb      	str	r3, [r7, #28]
 8013162:	e004      	b.n	801316e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	2200      	movs	r2, #0
 8013168:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801316a:	2301      	movs	r3, #1
 801316c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801316e:	f000 feb9 	bl	8013ee4 <vPortExitCritical>

	return xReturn;
 8013172:	69fb      	ldr	r3, [r7, #28]
}
 8013174:	4618      	mov	r0, r3
 8013176:	3720      	adds	r7, #32
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}
 801317c:	200022b0 	.word	0x200022b0
 8013180:	200022c4 	.word	0x200022c4

08013184 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013184:	b480      	push	{r7}
 8013186:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013188:	4b03      	ldr	r3, [pc, #12]	; (8013198 <vTaskMissedYield+0x14>)
 801318a:	2201      	movs	r2, #1
 801318c:	601a      	str	r2, [r3, #0]
}
 801318e:	bf00      	nop
 8013190:	46bd      	mov	sp, r7
 8013192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013196:	4770      	bx	lr
 8013198:	200022c0 	.word	0x200022c0

0801319c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b082      	sub	sp, #8
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80131a4:	f000 f852 	bl	801324c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80131a8:	4b06      	ldr	r3, [pc, #24]	; (80131c4 <prvIdleTask+0x28>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	2b01      	cmp	r3, #1
 80131ae:	d9f9      	bls.n	80131a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80131b0:	4b05      	ldr	r3, [pc, #20]	; (80131c8 <prvIdleTask+0x2c>)
 80131b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131b6:	601a      	str	r2, [r3, #0]
 80131b8:	f3bf 8f4f 	dsb	sy
 80131bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80131c0:	e7f0      	b.n	80131a4 <prvIdleTask+0x8>
 80131c2:	bf00      	nop
 80131c4:	20001ddc 	.word	0x20001ddc
 80131c8:	e000ed04 	.word	0xe000ed04

080131cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80131d2:	2300      	movs	r3, #0
 80131d4:	607b      	str	r3, [r7, #4]
 80131d6:	e00c      	b.n	80131f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80131d8:	687a      	ldr	r2, [r7, #4]
 80131da:	4613      	mov	r3, r2
 80131dc:	009b      	lsls	r3, r3, #2
 80131de:	4413      	add	r3, r2
 80131e0:	009b      	lsls	r3, r3, #2
 80131e2:	4a12      	ldr	r2, [pc, #72]	; (801322c <prvInitialiseTaskLists+0x60>)
 80131e4:	4413      	add	r3, r2
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7fe fb02 	bl	80117f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	3301      	adds	r3, #1
 80131f0:	607b      	str	r3, [r7, #4]
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2b37      	cmp	r3, #55	; 0x37
 80131f6:	d9ef      	bls.n	80131d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80131f8:	480d      	ldr	r0, [pc, #52]	; (8013230 <prvInitialiseTaskLists+0x64>)
 80131fa:	f7fe faf9 	bl	80117f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80131fe:	480d      	ldr	r0, [pc, #52]	; (8013234 <prvInitialiseTaskLists+0x68>)
 8013200:	f7fe faf6 	bl	80117f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013204:	480c      	ldr	r0, [pc, #48]	; (8013238 <prvInitialiseTaskLists+0x6c>)
 8013206:	f7fe faf3 	bl	80117f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801320a:	480c      	ldr	r0, [pc, #48]	; (801323c <prvInitialiseTaskLists+0x70>)
 801320c:	f7fe faf0 	bl	80117f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013210:	480b      	ldr	r0, [pc, #44]	; (8013240 <prvInitialiseTaskLists+0x74>)
 8013212:	f7fe faed 	bl	80117f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013216:	4b0b      	ldr	r3, [pc, #44]	; (8013244 <prvInitialiseTaskLists+0x78>)
 8013218:	4a05      	ldr	r2, [pc, #20]	; (8013230 <prvInitialiseTaskLists+0x64>)
 801321a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801321c:	4b0a      	ldr	r3, [pc, #40]	; (8013248 <prvInitialiseTaskLists+0x7c>)
 801321e:	4a05      	ldr	r2, [pc, #20]	; (8013234 <prvInitialiseTaskLists+0x68>)
 8013220:	601a      	str	r2, [r3, #0]
}
 8013222:	bf00      	nop
 8013224:	3708      	adds	r7, #8
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}
 801322a:	bf00      	nop
 801322c:	20001ddc 	.word	0x20001ddc
 8013230:	2000223c 	.word	0x2000223c
 8013234:	20002250 	.word	0x20002250
 8013238:	2000226c 	.word	0x2000226c
 801323c:	20002280 	.word	0x20002280
 8013240:	20002298 	.word	0x20002298
 8013244:	20002264 	.word	0x20002264
 8013248:	20002268 	.word	0x20002268

0801324c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b082      	sub	sp, #8
 8013250:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013252:	e019      	b.n	8013288 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013254:	f000 fe16 	bl	8013e84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013258:	4b10      	ldr	r3, [pc, #64]	; (801329c <prvCheckTasksWaitingTermination+0x50>)
 801325a:	68db      	ldr	r3, [r3, #12]
 801325c:	68db      	ldr	r3, [r3, #12]
 801325e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	3304      	adds	r3, #4
 8013264:	4618      	mov	r0, r3
 8013266:	f7fe fb4d 	bl	8011904 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801326a:	4b0d      	ldr	r3, [pc, #52]	; (80132a0 <prvCheckTasksWaitingTermination+0x54>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	3b01      	subs	r3, #1
 8013270:	4a0b      	ldr	r2, [pc, #44]	; (80132a0 <prvCheckTasksWaitingTermination+0x54>)
 8013272:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013274:	4b0b      	ldr	r3, [pc, #44]	; (80132a4 <prvCheckTasksWaitingTermination+0x58>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	3b01      	subs	r3, #1
 801327a:	4a0a      	ldr	r2, [pc, #40]	; (80132a4 <prvCheckTasksWaitingTermination+0x58>)
 801327c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801327e:	f000 fe31 	bl	8013ee4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f000 f848 	bl	8013318 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013288:	4b06      	ldr	r3, [pc, #24]	; (80132a4 <prvCheckTasksWaitingTermination+0x58>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d1e1      	bne.n	8013254 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013290:	bf00      	nop
 8013292:	bf00      	nop
 8013294:	3708      	adds	r7, #8
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}
 801329a:	bf00      	nop
 801329c:	20002280 	.word	0x20002280
 80132a0:	200022ac 	.word	0x200022ac
 80132a4:	20002294 	.word	0x20002294

080132a8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80132a8:	b480      	push	{r7}
 80132aa:	b085      	sub	sp, #20
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80132b0:	2300      	movs	r3, #0
 80132b2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80132b4:	e005      	b.n	80132c2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	3301      	adds	r3, #1
 80132ba:	607b      	str	r3, [r7, #4]
			ulCount++;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	3301      	adds	r3, #1
 80132c0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	2ba5      	cmp	r3, #165	; 0xa5
 80132c8:	d0f5      	beq.n	80132b6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	089b      	lsrs	r3, r3, #2
 80132ce:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	b29b      	uxth	r3, r3
	}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3714      	adds	r7, #20
 80132d8:	46bd      	mov	sp, r7
 80132da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132de:	4770      	bx	lr

080132e0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b086      	sub	sp, #24
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d102      	bne.n	80132f4 <uxTaskGetStackHighWaterMark+0x14>
 80132ee:	4b09      	ldr	r3, [pc, #36]	; (8013314 <uxTaskGetStackHighWaterMark+0x34>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	e000      	b.n	80132f6 <uxTaskGetStackHighWaterMark+0x16>
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132fc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80132fe:	6938      	ldr	r0, [r7, #16]
 8013300:	f7ff ffd2 	bl	80132a8 <prvTaskCheckFreeStackSpace>
 8013304:	4603      	mov	r3, r0
 8013306:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8013308:	68fb      	ldr	r3, [r7, #12]
	}
 801330a:	4618      	mov	r0, r3
 801330c:	3718      	adds	r7, #24
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}
 8013312:	bf00      	nop
 8013314:	20001dd8 	.word	0x20001dd8

08013318 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013318:	b580      	push	{r7, lr}
 801331a:	b084      	sub	sp, #16
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	3354      	adds	r3, #84	; 0x54
 8013324:	4618      	mov	r0, r3
 8013326:	f002 fbed 	bl	8015b04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013330:	2b00      	cmp	r3, #0
 8013332:	d108      	bne.n	8013346 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013338:	4618      	mov	r0, r3
 801333a:	f000 ff91 	bl	8014260 <vPortFree>
				vPortFree( pxTCB );
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f000 ff8e 	bl	8014260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013344:	e018      	b.n	8013378 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801334c:	2b01      	cmp	r3, #1
 801334e:	d103      	bne.n	8013358 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f000 ff85 	bl	8014260 <vPortFree>
	}
 8013356:	e00f      	b.n	8013378 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801335e:	2b02      	cmp	r3, #2
 8013360:	d00a      	beq.n	8013378 <prvDeleteTCB+0x60>
	__asm volatile
 8013362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013366:	f383 8811 	msr	BASEPRI, r3
 801336a:	f3bf 8f6f 	isb	sy
 801336e:	f3bf 8f4f 	dsb	sy
 8013372:	60fb      	str	r3, [r7, #12]
}
 8013374:	bf00      	nop
 8013376:	e7fe      	b.n	8013376 <prvDeleteTCB+0x5e>
	}
 8013378:	bf00      	nop
 801337a:	3710      	adds	r7, #16
 801337c:	46bd      	mov	sp, r7
 801337e:	bd80      	pop	{r7, pc}

08013380 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013380:	b480      	push	{r7}
 8013382:	b083      	sub	sp, #12
 8013384:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013386:	4b0c      	ldr	r3, [pc, #48]	; (80133b8 <prvResetNextTaskUnblockTime+0x38>)
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d104      	bne.n	801339a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013390:	4b0a      	ldr	r3, [pc, #40]	; (80133bc <prvResetNextTaskUnblockTime+0x3c>)
 8013392:	f04f 32ff 	mov.w	r2, #4294967295
 8013396:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013398:	e008      	b.n	80133ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801339a:	4b07      	ldr	r3, [pc, #28]	; (80133b8 <prvResetNextTaskUnblockTime+0x38>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	68db      	ldr	r3, [r3, #12]
 80133a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	685b      	ldr	r3, [r3, #4]
 80133a8:	4a04      	ldr	r2, [pc, #16]	; (80133bc <prvResetNextTaskUnblockTime+0x3c>)
 80133aa:	6013      	str	r3, [r2, #0]
}
 80133ac:	bf00      	nop
 80133ae:	370c      	adds	r7, #12
 80133b0:	46bd      	mov	sp, r7
 80133b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b6:	4770      	bx	lr
 80133b8:	20002264 	.word	0x20002264
 80133bc:	200022cc 	.word	0x200022cc

080133c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80133c0:	b480      	push	{r7}
 80133c2:	b083      	sub	sp, #12
 80133c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80133c6:	4b0b      	ldr	r3, [pc, #44]	; (80133f4 <xTaskGetSchedulerState+0x34>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d102      	bne.n	80133d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80133ce:	2301      	movs	r3, #1
 80133d0:	607b      	str	r3, [r7, #4]
 80133d2:	e008      	b.n	80133e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133d4:	4b08      	ldr	r3, [pc, #32]	; (80133f8 <xTaskGetSchedulerState+0x38>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d102      	bne.n	80133e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80133dc:	2302      	movs	r3, #2
 80133de:	607b      	str	r3, [r7, #4]
 80133e0:	e001      	b.n	80133e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80133e2:	2300      	movs	r3, #0
 80133e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80133e6:	687b      	ldr	r3, [r7, #4]
	}
 80133e8:	4618      	mov	r0, r3
 80133ea:	370c      	adds	r7, #12
 80133ec:	46bd      	mov	sp, r7
 80133ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f2:	4770      	bx	lr
 80133f4:	200022b8 	.word	0x200022b8
 80133f8:	200022d4 	.word	0x200022d4

080133fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b086      	sub	sp, #24
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013408:	2300      	movs	r3, #0
 801340a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d05f      	beq.n	80134d2 <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013412:	4b32      	ldr	r3, [pc, #200]	; (80134dc <xTaskPriorityDisinherit+0xe0>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	693a      	ldr	r2, [r7, #16]
 8013418:	429a      	cmp	r2, r3
 801341a:	d00a      	beq.n	8013432 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013420:	f383 8811 	msr	BASEPRI, r3
 8013424:	f3bf 8f6f 	isb	sy
 8013428:	f3bf 8f4f 	dsb	sy
 801342c:	60fb      	str	r3, [r7, #12]
}
 801342e:	bf00      	nop
 8013430:	e7fe      	b.n	8013430 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013432:	693b      	ldr	r3, [r7, #16]
 8013434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013436:	2b00      	cmp	r3, #0
 8013438:	d10a      	bne.n	8013450 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801343a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801343e:	f383 8811 	msr	BASEPRI, r3
 8013442:	f3bf 8f6f 	isb	sy
 8013446:	f3bf 8f4f 	dsb	sy
 801344a:	60bb      	str	r3, [r7, #8]
}
 801344c:	bf00      	nop
 801344e:	e7fe      	b.n	801344e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013454:	1e5a      	subs	r2, r3, #1
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801345a:	693b      	ldr	r3, [r7, #16]
 801345c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801345e:	693b      	ldr	r3, [r7, #16]
 8013460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013462:	429a      	cmp	r2, r3
 8013464:	d035      	beq.n	80134d2 <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013466:	693b      	ldr	r3, [r7, #16]
 8013468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801346a:	2b00      	cmp	r3, #0
 801346c:	d131      	bne.n	80134d2 <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801346e:	693b      	ldr	r3, [r7, #16]
 8013470:	3304      	adds	r3, #4
 8013472:	4618      	mov	r0, r3
 8013474:	f7fe fa46 	bl	8011904 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	4619      	mov	r1, r3
 801347c:	204a      	movs	r0, #74	; 0x4a
 801347e:	f001 fc53 	bl	8014d28 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013482:	693b      	ldr	r3, [r7, #16]
 8013484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801348e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013492:	693b      	ldr	r3, [r7, #16]
 8013494:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013496:	693b      	ldr	r3, [r7, #16]
 8013498:	4618      	mov	r0, r3
 801349a:	f002 f94b 	bl	8015734 <SEGGER_SYSVIEW_OnTaskStartReady>
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134a2:	4b0f      	ldr	r3, [pc, #60]	; (80134e0 <xTaskPriorityDisinherit+0xe4>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d903      	bls.n	80134b2 <xTaskPriorityDisinherit+0xb6>
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134ae:	4a0c      	ldr	r2, [pc, #48]	; (80134e0 <xTaskPriorityDisinherit+0xe4>)
 80134b0:	6013      	str	r3, [r2, #0]
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134b6:	4613      	mov	r3, r2
 80134b8:	009b      	lsls	r3, r3, #2
 80134ba:	4413      	add	r3, r2
 80134bc:	009b      	lsls	r3, r3, #2
 80134be:	4a09      	ldr	r2, [pc, #36]	; (80134e4 <xTaskPriorityDisinherit+0xe8>)
 80134c0:	441a      	add	r2, r3
 80134c2:	693b      	ldr	r3, [r7, #16]
 80134c4:	3304      	adds	r3, #4
 80134c6:	4619      	mov	r1, r3
 80134c8:	4610      	mov	r0, r2
 80134ca:	f7fe f9be 	bl	801184a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80134ce:	2301      	movs	r3, #1
 80134d0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80134d2:	697b      	ldr	r3, [r7, #20]
	}
 80134d4:	4618      	mov	r0, r3
 80134d6:	3718      	adds	r7, #24
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}
 80134dc:	20001dd8 	.word	0x20001dd8
 80134e0:	200022b4 	.word	0x200022b4
 80134e4:	20001ddc 	.word	0x20001ddc

080134e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b084      	sub	sp, #16
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80134f2:	4b21      	ldr	r3, [pc, #132]	; (8013578 <prvAddCurrentTaskToDelayedList+0x90>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134f8:	4b20      	ldr	r3, [pc, #128]	; (801357c <prvAddCurrentTaskToDelayedList+0x94>)
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	3304      	adds	r3, #4
 80134fe:	4618      	mov	r0, r3
 8013500:	f7fe fa00 	bl	8011904 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f1b3 3fff 	cmp.w	r3, #4294967295
 801350a:	d10a      	bne.n	8013522 <prvAddCurrentTaskToDelayedList+0x3a>
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d007      	beq.n	8013522 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013512:	4b1a      	ldr	r3, [pc, #104]	; (801357c <prvAddCurrentTaskToDelayedList+0x94>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	3304      	adds	r3, #4
 8013518:	4619      	mov	r1, r3
 801351a:	4819      	ldr	r0, [pc, #100]	; (8013580 <prvAddCurrentTaskToDelayedList+0x98>)
 801351c:	f7fe f995 	bl	801184a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013520:	e026      	b.n	8013570 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013522:	68fa      	ldr	r2, [r7, #12]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	4413      	add	r3, r2
 8013528:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801352a:	4b14      	ldr	r3, [pc, #80]	; (801357c <prvAddCurrentTaskToDelayedList+0x94>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	68ba      	ldr	r2, [r7, #8]
 8013530:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013532:	68ba      	ldr	r2, [r7, #8]
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	429a      	cmp	r2, r3
 8013538:	d209      	bcs.n	801354e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801353a:	4b12      	ldr	r3, [pc, #72]	; (8013584 <prvAddCurrentTaskToDelayedList+0x9c>)
 801353c:	681a      	ldr	r2, [r3, #0]
 801353e:	4b0f      	ldr	r3, [pc, #60]	; (801357c <prvAddCurrentTaskToDelayedList+0x94>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	3304      	adds	r3, #4
 8013544:	4619      	mov	r1, r3
 8013546:	4610      	mov	r0, r2
 8013548:	f7fe f9a3 	bl	8011892 <vListInsert>
}
 801354c:	e010      	b.n	8013570 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801354e:	4b0e      	ldr	r3, [pc, #56]	; (8013588 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013550:	681a      	ldr	r2, [r3, #0]
 8013552:	4b0a      	ldr	r3, [pc, #40]	; (801357c <prvAddCurrentTaskToDelayedList+0x94>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	3304      	adds	r3, #4
 8013558:	4619      	mov	r1, r3
 801355a:	4610      	mov	r0, r2
 801355c:	f7fe f999 	bl	8011892 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013560:	4b0a      	ldr	r3, [pc, #40]	; (801358c <prvAddCurrentTaskToDelayedList+0xa4>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	68ba      	ldr	r2, [r7, #8]
 8013566:	429a      	cmp	r2, r3
 8013568:	d202      	bcs.n	8013570 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801356a:	4a08      	ldr	r2, [pc, #32]	; (801358c <prvAddCurrentTaskToDelayedList+0xa4>)
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	6013      	str	r3, [r2, #0]
}
 8013570:	bf00      	nop
 8013572:	3710      	adds	r7, #16
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}
 8013578:	200022b0 	.word	0x200022b0
 801357c:	20001dd8 	.word	0x20001dd8
 8013580:	20002298 	.word	0x20002298
 8013584:	20002268 	.word	0x20002268
 8013588:	20002264 	.word	0x20002264
 801358c:	200022cc 	.word	0x200022cc

08013590 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b08a      	sub	sp, #40	; 0x28
 8013594:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013596:	2300      	movs	r3, #0
 8013598:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801359a:	f000 fb07 	bl	8013bac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801359e:	4b1c      	ldr	r3, [pc, #112]	; (8013610 <xTimerCreateTimerTask+0x80>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d021      	beq.n	80135ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80135a6:	2300      	movs	r3, #0
 80135a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80135aa:	2300      	movs	r3, #0
 80135ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80135ae:	1d3a      	adds	r2, r7, #4
 80135b0:	f107 0108 	add.w	r1, r7, #8
 80135b4:	f107 030c 	add.w	r3, r7, #12
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7fe f8ff 	bl	80117bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80135be:	6879      	ldr	r1, [r7, #4]
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	68fa      	ldr	r2, [r7, #12]
 80135c4:	9202      	str	r2, [sp, #8]
 80135c6:	9301      	str	r3, [sp, #4]
 80135c8:	2302      	movs	r3, #2
 80135ca:	9300      	str	r3, [sp, #0]
 80135cc:	2300      	movs	r3, #0
 80135ce:	460a      	mov	r2, r1
 80135d0:	4910      	ldr	r1, [pc, #64]	; (8013614 <xTimerCreateTimerTask+0x84>)
 80135d2:	4811      	ldr	r0, [pc, #68]	; (8013618 <xTimerCreateTimerTask+0x88>)
 80135d4:	f7fe ffc4 	bl	8012560 <xTaskCreateStatic>
 80135d8:	4603      	mov	r3, r0
 80135da:	4a10      	ldr	r2, [pc, #64]	; (801361c <xTimerCreateTimerTask+0x8c>)
 80135dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80135de:	4b0f      	ldr	r3, [pc, #60]	; (801361c <xTimerCreateTimerTask+0x8c>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d001      	beq.n	80135ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80135e6:	2301      	movs	r3, #1
 80135e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d10a      	bne.n	8013606 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80135f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135f4:	f383 8811 	msr	BASEPRI, r3
 80135f8:	f3bf 8f6f 	isb	sy
 80135fc:	f3bf 8f4f 	dsb	sy
 8013600:	613b      	str	r3, [r7, #16]
}
 8013602:	bf00      	nop
 8013604:	e7fe      	b.n	8013604 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013606:	697b      	ldr	r3, [r7, #20]
}
 8013608:	4618      	mov	r0, r3
 801360a:	3718      	adds	r7, #24
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}
 8013610:	20002308 	.word	0x20002308
 8013614:	080164e8 	.word	0x080164e8
 8013618:	08013755 	.word	0x08013755
 801361c:	2000230c 	.word	0x2000230c

08013620 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b08a      	sub	sp, #40	; 0x28
 8013624:	af00      	add	r7, sp, #0
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	60b9      	str	r1, [r7, #8]
 801362a:	607a      	str	r2, [r7, #4]
 801362c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801362e:	2300      	movs	r3, #0
 8013630:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d10a      	bne.n	801364e <xTimerGenericCommand+0x2e>
	__asm volatile
 8013638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801363c:	f383 8811 	msr	BASEPRI, r3
 8013640:	f3bf 8f6f 	isb	sy
 8013644:	f3bf 8f4f 	dsb	sy
 8013648:	623b      	str	r3, [r7, #32]
}
 801364a:	bf00      	nop
 801364c:	e7fe      	b.n	801364c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801364e:	4b1a      	ldr	r3, [pc, #104]	; (80136b8 <xTimerGenericCommand+0x98>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d02a      	beq.n	80136ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	2b05      	cmp	r3, #5
 8013666:	dc18      	bgt.n	801369a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013668:	f7ff feaa 	bl	80133c0 <xTaskGetSchedulerState>
 801366c:	4603      	mov	r3, r0
 801366e:	2b02      	cmp	r3, #2
 8013670:	d109      	bne.n	8013686 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013672:	4b11      	ldr	r3, [pc, #68]	; (80136b8 <xTimerGenericCommand+0x98>)
 8013674:	6818      	ldr	r0, [r3, #0]
 8013676:	f107 0110 	add.w	r1, r7, #16
 801367a:	2300      	movs	r3, #0
 801367c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801367e:	f7fe fa75 	bl	8011b6c <xQueueGenericSend>
 8013682:	6278      	str	r0, [r7, #36]	; 0x24
 8013684:	e012      	b.n	80136ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013686:	4b0c      	ldr	r3, [pc, #48]	; (80136b8 <xTimerGenericCommand+0x98>)
 8013688:	6818      	ldr	r0, [r3, #0]
 801368a:	f107 0110 	add.w	r1, r7, #16
 801368e:	2300      	movs	r3, #0
 8013690:	2200      	movs	r2, #0
 8013692:	f7fe fa6b 	bl	8011b6c <xQueueGenericSend>
 8013696:	6278      	str	r0, [r7, #36]	; 0x24
 8013698:	e008      	b.n	80136ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801369a:	4b07      	ldr	r3, [pc, #28]	; (80136b8 <xTimerGenericCommand+0x98>)
 801369c:	6818      	ldr	r0, [r3, #0]
 801369e:	f107 0110 	add.w	r1, r7, #16
 80136a2:	2300      	movs	r3, #0
 80136a4:	683a      	ldr	r2, [r7, #0]
 80136a6:	f7fe fb87 	bl	8011db8 <xQueueGenericSendFromISR>
 80136aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80136ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3728      	adds	r7, #40	; 0x28
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	bf00      	nop
 80136b8:	20002308 	.word	0x20002308

080136bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b088      	sub	sp, #32
 80136c0:	af02      	add	r7, sp, #8
 80136c2:	6078      	str	r0, [r7, #4]
 80136c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136c6:	4b22      	ldr	r3, [pc, #136]	; (8013750 <prvProcessExpiredTimer+0x94>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	68db      	ldr	r3, [r3, #12]
 80136cc:	68db      	ldr	r3, [r3, #12]
 80136ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	3304      	adds	r3, #4
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7fe f915 	bl	8011904 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136e0:	f003 0304 	and.w	r3, r3, #4
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d022      	beq.n	801372e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	699a      	ldr	r2, [r3, #24]
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	18d1      	adds	r1, r2, r3
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	683a      	ldr	r2, [r7, #0]
 80136f4:	6978      	ldr	r0, [r7, #20]
 80136f6:	f000 f8d1 	bl	801389c <prvInsertTimerInActiveList>
 80136fa:	4603      	mov	r3, r0
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d01f      	beq.n	8013740 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013700:	2300      	movs	r3, #0
 8013702:	9300      	str	r3, [sp, #0]
 8013704:	2300      	movs	r3, #0
 8013706:	687a      	ldr	r2, [r7, #4]
 8013708:	2100      	movs	r1, #0
 801370a:	6978      	ldr	r0, [r7, #20]
 801370c:	f7ff ff88 	bl	8013620 <xTimerGenericCommand>
 8013710:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013712:	693b      	ldr	r3, [r7, #16]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d113      	bne.n	8013740 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801371c:	f383 8811 	msr	BASEPRI, r3
 8013720:	f3bf 8f6f 	isb	sy
 8013724:	f3bf 8f4f 	dsb	sy
 8013728:	60fb      	str	r3, [r7, #12]
}
 801372a:	bf00      	nop
 801372c:	e7fe      	b.n	801372c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801372e:	697b      	ldr	r3, [r7, #20]
 8013730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013734:	f023 0301 	bic.w	r3, r3, #1
 8013738:	b2da      	uxtb	r2, r3
 801373a:	697b      	ldr	r3, [r7, #20]
 801373c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	6a1b      	ldr	r3, [r3, #32]
 8013744:	6978      	ldr	r0, [r7, #20]
 8013746:	4798      	blx	r3
}
 8013748:	bf00      	nop
 801374a:	3718      	adds	r7, #24
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}
 8013750:	20002300 	.word	0x20002300

08013754 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013754:	b580      	push	{r7, lr}
 8013756:	b084      	sub	sp, #16
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801375c:	f107 0308 	add.w	r3, r7, #8
 8013760:	4618      	mov	r0, r3
 8013762:	f000 f857 	bl	8013814 <prvGetNextExpireTime>
 8013766:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	4619      	mov	r1, r3
 801376c:	68f8      	ldr	r0, [r7, #12]
 801376e:	f000 f803 	bl	8013778 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013772:	f000 f8d5 	bl	8013920 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013776:	e7f1      	b.n	801375c <prvTimerTask+0x8>

08013778 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b084      	sub	sp, #16
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
 8013780:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013782:	f7ff f9c5 	bl	8012b10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013786:	f107 0308 	add.w	r3, r7, #8
 801378a:	4618      	mov	r0, r3
 801378c:	f000 f866 	bl	801385c <prvSampleTimeNow>
 8013790:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013792:	68bb      	ldr	r3, [r7, #8]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d130      	bne.n	80137fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d10a      	bne.n	80137b4 <prvProcessTimerOrBlockTask+0x3c>
 801379e:	687a      	ldr	r2, [r7, #4]
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	429a      	cmp	r2, r3
 80137a4:	d806      	bhi.n	80137b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80137a6:	f7ff f9c1 	bl	8012b2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80137aa:	68f9      	ldr	r1, [r7, #12]
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	f7ff ff85 	bl	80136bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80137b2:	e024      	b.n	80137fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d008      	beq.n	80137cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80137ba:	4b13      	ldr	r3, [pc, #76]	; (8013808 <prvProcessTimerOrBlockTask+0x90>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d101      	bne.n	80137c8 <prvProcessTimerOrBlockTask+0x50>
 80137c4:	2301      	movs	r3, #1
 80137c6:	e000      	b.n	80137ca <prvProcessTimerOrBlockTask+0x52>
 80137c8:	2300      	movs	r3, #0
 80137ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80137cc:	4b0f      	ldr	r3, [pc, #60]	; (801380c <prvProcessTimerOrBlockTask+0x94>)
 80137ce:	6818      	ldr	r0, [r3, #0]
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	1ad3      	subs	r3, r2, r3
 80137d6:	683a      	ldr	r2, [r7, #0]
 80137d8:	4619      	mov	r1, r3
 80137da:	f7fe fe8d 	bl	80124f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80137de:	f7ff f9a5 	bl	8012b2c <xTaskResumeAll>
 80137e2:	4603      	mov	r3, r0
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d10a      	bne.n	80137fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80137e8:	4b09      	ldr	r3, [pc, #36]	; (8013810 <prvProcessTimerOrBlockTask+0x98>)
 80137ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137ee:	601a      	str	r2, [r3, #0]
 80137f0:	f3bf 8f4f 	dsb	sy
 80137f4:	f3bf 8f6f 	isb	sy
}
 80137f8:	e001      	b.n	80137fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80137fa:	f7ff f997 	bl	8012b2c <xTaskResumeAll>
}
 80137fe:	bf00      	nop
 8013800:	3710      	adds	r7, #16
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}
 8013806:	bf00      	nop
 8013808:	20002304 	.word	0x20002304
 801380c:	20002308 	.word	0x20002308
 8013810:	e000ed04 	.word	0xe000ed04

08013814 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013814:	b480      	push	{r7}
 8013816:	b085      	sub	sp, #20
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801381c:	4b0e      	ldr	r3, [pc, #56]	; (8013858 <prvGetNextExpireTime+0x44>)
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d101      	bne.n	801382a <prvGetNextExpireTime+0x16>
 8013826:	2201      	movs	r2, #1
 8013828:	e000      	b.n	801382c <prvGetNextExpireTime+0x18>
 801382a:	2200      	movs	r2, #0
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d105      	bne.n	8013844 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013838:	4b07      	ldr	r3, [pc, #28]	; (8013858 <prvGetNextExpireTime+0x44>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	68db      	ldr	r3, [r3, #12]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	60fb      	str	r3, [r7, #12]
 8013842:	e001      	b.n	8013848 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013844:	2300      	movs	r3, #0
 8013846:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013848:	68fb      	ldr	r3, [r7, #12]
}
 801384a:	4618      	mov	r0, r3
 801384c:	3714      	adds	r7, #20
 801384e:	46bd      	mov	sp, r7
 8013850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013854:	4770      	bx	lr
 8013856:	bf00      	nop
 8013858:	20002300 	.word	0x20002300

0801385c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b084      	sub	sp, #16
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013864:	f7ff fa04 	bl	8012c70 <xTaskGetTickCount>
 8013868:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801386a:	4b0b      	ldr	r3, [pc, #44]	; (8013898 <prvSampleTimeNow+0x3c>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	68fa      	ldr	r2, [r7, #12]
 8013870:	429a      	cmp	r2, r3
 8013872:	d205      	bcs.n	8013880 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013874:	f000 f936 	bl	8013ae4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2201      	movs	r2, #1
 801387c:	601a      	str	r2, [r3, #0]
 801387e:	e002      	b.n	8013886 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	2200      	movs	r2, #0
 8013884:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013886:	4a04      	ldr	r2, [pc, #16]	; (8013898 <prvSampleTimeNow+0x3c>)
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801388c:	68fb      	ldr	r3, [r7, #12]
}
 801388e:	4618      	mov	r0, r3
 8013890:	3710      	adds	r7, #16
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}
 8013896:	bf00      	nop
 8013898:	20002310 	.word	0x20002310

0801389c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b086      	sub	sp, #24
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	60f8      	str	r0, [r7, #12]
 80138a4:	60b9      	str	r1, [r7, #8]
 80138a6:	607a      	str	r2, [r7, #4]
 80138a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80138aa:	2300      	movs	r3, #0
 80138ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	68ba      	ldr	r2, [r7, #8]
 80138b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	68fa      	ldr	r2, [r7, #12]
 80138b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80138ba:	68ba      	ldr	r2, [r7, #8]
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	429a      	cmp	r2, r3
 80138c0:	d812      	bhi.n	80138e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138c2:	687a      	ldr	r2, [r7, #4]
 80138c4:	683b      	ldr	r3, [r7, #0]
 80138c6:	1ad2      	subs	r2, r2, r3
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	699b      	ldr	r3, [r3, #24]
 80138cc:	429a      	cmp	r2, r3
 80138ce:	d302      	bcc.n	80138d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80138d0:	2301      	movs	r3, #1
 80138d2:	617b      	str	r3, [r7, #20]
 80138d4:	e01b      	b.n	801390e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80138d6:	4b10      	ldr	r3, [pc, #64]	; (8013918 <prvInsertTimerInActiveList+0x7c>)
 80138d8:	681a      	ldr	r2, [r3, #0]
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	3304      	adds	r3, #4
 80138de:	4619      	mov	r1, r3
 80138e0:	4610      	mov	r0, r2
 80138e2:	f7fd ffd6 	bl	8011892 <vListInsert>
 80138e6:	e012      	b.n	801390e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80138e8:	687a      	ldr	r2, [r7, #4]
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	429a      	cmp	r2, r3
 80138ee:	d206      	bcs.n	80138fe <prvInsertTimerInActiveList+0x62>
 80138f0:	68ba      	ldr	r2, [r7, #8]
 80138f2:	683b      	ldr	r3, [r7, #0]
 80138f4:	429a      	cmp	r2, r3
 80138f6:	d302      	bcc.n	80138fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80138f8:	2301      	movs	r3, #1
 80138fa:	617b      	str	r3, [r7, #20]
 80138fc:	e007      	b.n	801390e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80138fe:	4b07      	ldr	r3, [pc, #28]	; (801391c <prvInsertTimerInActiveList+0x80>)
 8013900:	681a      	ldr	r2, [r3, #0]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	3304      	adds	r3, #4
 8013906:	4619      	mov	r1, r3
 8013908:	4610      	mov	r0, r2
 801390a:	f7fd ffc2 	bl	8011892 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801390e:	697b      	ldr	r3, [r7, #20]
}
 8013910:	4618      	mov	r0, r3
 8013912:	3718      	adds	r7, #24
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}
 8013918:	20002304 	.word	0x20002304
 801391c:	20002300 	.word	0x20002300

08013920 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b08e      	sub	sp, #56	; 0x38
 8013924:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013926:	e0ca      	b.n	8013abe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2b00      	cmp	r3, #0
 801392c:	da18      	bge.n	8013960 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801392e:	1d3b      	adds	r3, r7, #4
 8013930:	3304      	adds	r3, #4
 8013932:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013936:	2b00      	cmp	r3, #0
 8013938:	d10a      	bne.n	8013950 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801393e:	f383 8811 	msr	BASEPRI, r3
 8013942:	f3bf 8f6f 	isb	sy
 8013946:	f3bf 8f4f 	dsb	sy
 801394a:	61fb      	str	r3, [r7, #28]
}
 801394c:	bf00      	nop
 801394e:	e7fe      	b.n	801394e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013956:	6850      	ldr	r0, [r2, #4]
 8013958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801395a:	6892      	ldr	r2, [r2, #8]
 801395c:	4611      	mov	r1, r2
 801395e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	2b00      	cmp	r3, #0
 8013964:	f2c0 80aa 	blt.w	8013abc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801396c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801396e:	695b      	ldr	r3, [r3, #20]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d004      	beq.n	801397e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013976:	3304      	adds	r3, #4
 8013978:	4618      	mov	r0, r3
 801397a:	f7fd ffc3 	bl	8011904 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801397e:	463b      	mov	r3, r7
 8013980:	4618      	mov	r0, r3
 8013982:	f7ff ff6b 	bl	801385c <prvSampleTimeNow>
 8013986:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	2b09      	cmp	r3, #9
 801398c:	f200 8097 	bhi.w	8013abe <prvProcessReceivedCommands+0x19e>
 8013990:	a201      	add	r2, pc, #4	; (adr r2, 8013998 <prvProcessReceivedCommands+0x78>)
 8013992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013996:	bf00      	nop
 8013998:	080139c1 	.word	0x080139c1
 801399c:	080139c1 	.word	0x080139c1
 80139a0:	080139c1 	.word	0x080139c1
 80139a4:	08013a35 	.word	0x08013a35
 80139a8:	08013a49 	.word	0x08013a49
 80139ac:	08013a93 	.word	0x08013a93
 80139b0:	080139c1 	.word	0x080139c1
 80139b4:	080139c1 	.word	0x080139c1
 80139b8:	08013a35 	.word	0x08013a35
 80139bc:	08013a49 	.word	0x08013a49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80139c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139c6:	f043 0301 	orr.w	r3, r3, #1
 80139ca:	b2da      	uxtb	r2, r3
 80139cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80139d2:	68ba      	ldr	r2, [r7, #8]
 80139d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d6:	699b      	ldr	r3, [r3, #24]
 80139d8:	18d1      	adds	r1, r2, r3
 80139da:	68bb      	ldr	r3, [r7, #8]
 80139dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139e0:	f7ff ff5c 	bl	801389c <prvInsertTimerInActiveList>
 80139e4:	4603      	mov	r3, r0
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d069      	beq.n	8013abe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80139ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ec:	6a1b      	ldr	r3, [r3, #32]
 80139ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80139f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139f8:	f003 0304 	and.w	r3, r3, #4
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d05e      	beq.n	8013abe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013a00:	68ba      	ldr	r2, [r7, #8]
 8013a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a04:	699b      	ldr	r3, [r3, #24]
 8013a06:	441a      	add	r2, r3
 8013a08:	2300      	movs	r3, #0
 8013a0a:	9300      	str	r3, [sp, #0]
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	2100      	movs	r1, #0
 8013a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a12:	f7ff fe05 	bl	8013620 <xTimerGenericCommand>
 8013a16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013a18:	6a3b      	ldr	r3, [r7, #32]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d14f      	bne.n	8013abe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a22:	f383 8811 	msr	BASEPRI, r3
 8013a26:	f3bf 8f6f 	isb	sy
 8013a2a:	f3bf 8f4f 	dsb	sy
 8013a2e:	61bb      	str	r3, [r7, #24]
}
 8013a30:	bf00      	nop
 8013a32:	e7fe      	b.n	8013a32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a3a:	f023 0301 	bic.w	r3, r3, #1
 8013a3e:	b2da      	uxtb	r2, r3
 8013a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013a46:	e03a      	b.n	8013abe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a4e:	f043 0301 	orr.w	r3, r3, #1
 8013a52:	b2da      	uxtb	r2, r3
 8013a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013a5a:	68ba      	ldr	r2, [r7, #8]
 8013a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a62:	699b      	ldr	r3, [r3, #24]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d10a      	bne.n	8013a7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a6c:	f383 8811 	msr	BASEPRI, r3
 8013a70:	f3bf 8f6f 	isb	sy
 8013a74:	f3bf 8f4f 	dsb	sy
 8013a78:	617b      	str	r3, [r7, #20]
}
 8013a7a:	bf00      	nop
 8013a7c:	e7fe      	b.n	8013a7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a80:	699a      	ldr	r2, [r3, #24]
 8013a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a84:	18d1      	adds	r1, r2, r3
 8013a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a8c:	f7ff ff06 	bl	801389c <prvInsertTimerInActiveList>
					break;
 8013a90:	e015      	b.n	8013abe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a98:	f003 0302 	and.w	r3, r3, #2
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d103      	bne.n	8013aa8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013aa2:	f000 fbdd 	bl	8014260 <vPortFree>
 8013aa6:	e00a      	b.n	8013abe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013aae:	f023 0301 	bic.w	r3, r3, #1
 8013ab2:	b2da      	uxtb	r2, r3
 8013ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013aba:	e000      	b.n	8013abe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013abc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013abe:	4b08      	ldr	r3, [pc, #32]	; (8013ae0 <prvProcessReceivedCommands+0x1c0>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	1d39      	adds	r1, r7, #4
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7fe fa26 	bl	8011f18 <xQueueReceive>
 8013acc:	4603      	mov	r3, r0
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	f47f af2a 	bne.w	8013928 <prvProcessReceivedCommands+0x8>
	}
}
 8013ad4:	bf00      	nop
 8013ad6:	bf00      	nop
 8013ad8:	3730      	adds	r7, #48	; 0x30
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	bf00      	nop
 8013ae0:	20002308 	.word	0x20002308

08013ae4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b088      	sub	sp, #32
 8013ae8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013aea:	e048      	b.n	8013b7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013aec:	4b2d      	ldr	r3, [pc, #180]	; (8013ba4 <prvSwitchTimerLists+0xc0>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	68db      	ldr	r3, [r3, #12]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013af6:	4b2b      	ldr	r3, [pc, #172]	; (8013ba4 <prvSwitchTimerLists+0xc0>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	68db      	ldr	r3, [r3, #12]
 8013afc:	68db      	ldr	r3, [r3, #12]
 8013afe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	3304      	adds	r3, #4
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7fd fefd 	bl	8011904 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	6a1b      	ldr	r3, [r3, #32]
 8013b0e:	68f8      	ldr	r0, [r7, #12]
 8013b10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b18:	f003 0304 	and.w	r3, r3, #4
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d02e      	beq.n	8013b7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	699b      	ldr	r3, [r3, #24]
 8013b24:	693a      	ldr	r2, [r7, #16]
 8013b26:	4413      	add	r3, r2
 8013b28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013b2a:	68ba      	ldr	r2, [r7, #8]
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d90e      	bls.n	8013b50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	68ba      	ldr	r2, [r7, #8]
 8013b36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	68fa      	ldr	r2, [r7, #12]
 8013b3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013b3e:	4b19      	ldr	r3, [pc, #100]	; (8013ba4 <prvSwitchTimerLists+0xc0>)
 8013b40:	681a      	ldr	r2, [r3, #0]
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	3304      	adds	r3, #4
 8013b46:	4619      	mov	r1, r3
 8013b48:	4610      	mov	r0, r2
 8013b4a:	f7fd fea2 	bl	8011892 <vListInsert>
 8013b4e:	e016      	b.n	8013b7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013b50:	2300      	movs	r3, #0
 8013b52:	9300      	str	r3, [sp, #0]
 8013b54:	2300      	movs	r3, #0
 8013b56:	693a      	ldr	r2, [r7, #16]
 8013b58:	2100      	movs	r1, #0
 8013b5a:	68f8      	ldr	r0, [r7, #12]
 8013b5c:	f7ff fd60 	bl	8013620 <xTimerGenericCommand>
 8013b60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d10a      	bne.n	8013b7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b6c:	f383 8811 	msr	BASEPRI, r3
 8013b70:	f3bf 8f6f 	isb	sy
 8013b74:	f3bf 8f4f 	dsb	sy
 8013b78:	603b      	str	r3, [r7, #0]
}
 8013b7a:	bf00      	nop
 8013b7c:	e7fe      	b.n	8013b7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013b7e:	4b09      	ldr	r3, [pc, #36]	; (8013ba4 <prvSwitchTimerLists+0xc0>)
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d1b1      	bne.n	8013aec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013b88:	4b06      	ldr	r3, [pc, #24]	; (8013ba4 <prvSwitchTimerLists+0xc0>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013b8e:	4b06      	ldr	r3, [pc, #24]	; (8013ba8 <prvSwitchTimerLists+0xc4>)
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	4a04      	ldr	r2, [pc, #16]	; (8013ba4 <prvSwitchTimerLists+0xc0>)
 8013b94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013b96:	4a04      	ldr	r2, [pc, #16]	; (8013ba8 <prvSwitchTimerLists+0xc4>)
 8013b98:	697b      	ldr	r3, [r7, #20]
 8013b9a:	6013      	str	r3, [r2, #0]
}
 8013b9c:	bf00      	nop
 8013b9e:	3718      	adds	r7, #24
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}
 8013ba4:	20002300 	.word	0x20002300
 8013ba8:	20002304 	.word	0x20002304

08013bac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b082      	sub	sp, #8
 8013bb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013bb2:	f000 f967 	bl	8013e84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013bb6:	4b15      	ldr	r3, [pc, #84]	; (8013c0c <prvCheckForValidListAndQueue+0x60>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d120      	bne.n	8013c00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013bbe:	4814      	ldr	r0, [pc, #80]	; (8013c10 <prvCheckForValidListAndQueue+0x64>)
 8013bc0:	f7fd fe16 	bl	80117f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013bc4:	4813      	ldr	r0, [pc, #76]	; (8013c14 <prvCheckForValidListAndQueue+0x68>)
 8013bc6:	f7fd fe13 	bl	80117f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013bca:	4b13      	ldr	r3, [pc, #76]	; (8013c18 <prvCheckForValidListAndQueue+0x6c>)
 8013bcc:	4a10      	ldr	r2, [pc, #64]	; (8013c10 <prvCheckForValidListAndQueue+0x64>)
 8013bce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013bd0:	4b12      	ldr	r3, [pc, #72]	; (8013c1c <prvCheckForValidListAndQueue+0x70>)
 8013bd2:	4a10      	ldr	r2, [pc, #64]	; (8013c14 <prvCheckForValidListAndQueue+0x68>)
 8013bd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	9300      	str	r3, [sp, #0]
 8013bda:	4b11      	ldr	r3, [pc, #68]	; (8013c20 <prvCheckForValidListAndQueue+0x74>)
 8013bdc:	4a11      	ldr	r2, [pc, #68]	; (8013c24 <prvCheckForValidListAndQueue+0x78>)
 8013bde:	2110      	movs	r1, #16
 8013be0:	200a      	movs	r0, #10
 8013be2:	f7fd ff21 	bl	8011a28 <xQueueGenericCreateStatic>
 8013be6:	4603      	mov	r3, r0
 8013be8:	4a08      	ldr	r2, [pc, #32]	; (8013c0c <prvCheckForValidListAndQueue+0x60>)
 8013bea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013bec:	4b07      	ldr	r3, [pc, #28]	; (8013c0c <prvCheckForValidListAndQueue+0x60>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d005      	beq.n	8013c00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013bf4:	4b05      	ldr	r3, [pc, #20]	; (8013c0c <prvCheckForValidListAndQueue+0x60>)
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	490b      	ldr	r1, [pc, #44]	; (8013c28 <prvCheckForValidListAndQueue+0x7c>)
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7fe fc4a 	bl	8012494 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013c00:	f000 f970 	bl	8013ee4 <vPortExitCritical>
}
 8013c04:	bf00      	nop
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bd80      	pop	{r7, pc}
 8013c0a:	bf00      	nop
 8013c0c:	20002308 	.word	0x20002308
 8013c10:	200022d8 	.word	0x200022d8
 8013c14:	200022ec 	.word	0x200022ec
 8013c18:	20002300 	.word	0x20002300
 8013c1c:	20002304 	.word	0x20002304
 8013c20:	200023b4 	.word	0x200023b4
 8013c24:	20002314 	.word	0x20002314
 8013c28:	080164f0 	.word	0x080164f0

08013c2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	b085      	sub	sp, #20
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	60f8      	str	r0, [r7, #12]
 8013c34:	60b9      	str	r1, [r7, #8]
 8013c36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	3b04      	subs	r3, #4
 8013c3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	3b04      	subs	r3, #4
 8013c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	f023 0201 	bic.w	r2, r3, #1
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	3b04      	subs	r3, #4
 8013c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013c5c:	4a0c      	ldr	r2, [pc, #48]	; (8013c90 <pxPortInitialiseStack+0x64>)
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	3b14      	subs	r3, #20
 8013c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013c68:	687a      	ldr	r2, [r7, #4]
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	3b04      	subs	r3, #4
 8013c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	f06f 0202 	mvn.w	r2, #2
 8013c7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	3b20      	subs	r3, #32
 8013c80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013c82:	68fb      	ldr	r3, [r7, #12]
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	3714      	adds	r7, #20
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8e:	4770      	bx	lr
 8013c90:	08013c95 	.word	0x08013c95

08013c94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013c94:	b480      	push	{r7}
 8013c96:	b085      	sub	sp, #20
 8013c98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013c9e:	4b12      	ldr	r3, [pc, #72]	; (8013ce8 <prvTaskExitError+0x54>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ca6:	d00a      	beq.n	8013cbe <prvTaskExitError+0x2a>
	__asm volatile
 8013ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cac:	f383 8811 	msr	BASEPRI, r3
 8013cb0:	f3bf 8f6f 	isb	sy
 8013cb4:	f3bf 8f4f 	dsb	sy
 8013cb8:	60fb      	str	r3, [r7, #12]
}
 8013cba:	bf00      	nop
 8013cbc:	e7fe      	b.n	8013cbc <prvTaskExitError+0x28>
	__asm volatile
 8013cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cc2:	f383 8811 	msr	BASEPRI, r3
 8013cc6:	f3bf 8f6f 	isb	sy
 8013cca:	f3bf 8f4f 	dsb	sy
 8013cce:	60bb      	str	r3, [r7, #8]
}
 8013cd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013cd2:	bf00      	nop
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d0fc      	beq.n	8013cd4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013cda:	bf00      	nop
 8013cdc:	bf00      	nop
 8013cde:	3714      	adds	r7, #20
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce6:	4770      	bx	lr
 8013ce8:	200012f0 	.word	0x200012f0
 8013cec:	00000000 	.word	0x00000000

08013cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013cf0:	4b07      	ldr	r3, [pc, #28]	; (8013d10 <pxCurrentTCBConst2>)
 8013cf2:	6819      	ldr	r1, [r3, #0]
 8013cf4:	6808      	ldr	r0, [r1, #0]
 8013cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cfa:	f380 8809 	msr	PSP, r0
 8013cfe:	f3bf 8f6f 	isb	sy
 8013d02:	f04f 0000 	mov.w	r0, #0
 8013d06:	f380 8811 	msr	BASEPRI, r0
 8013d0a:	4770      	bx	lr
 8013d0c:	f3af 8000 	nop.w

08013d10 <pxCurrentTCBConst2>:
 8013d10:	20001dd8 	.word	0x20001dd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013d14:	bf00      	nop
 8013d16:	bf00      	nop

08013d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013d18:	4808      	ldr	r0, [pc, #32]	; (8013d3c <prvPortStartFirstTask+0x24>)
 8013d1a:	6800      	ldr	r0, [r0, #0]
 8013d1c:	6800      	ldr	r0, [r0, #0]
 8013d1e:	f380 8808 	msr	MSP, r0
 8013d22:	f04f 0000 	mov.w	r0, #0
 8013d26:	f380 8814 	msr	CONTROL, r0
 8013d2a:	b662      	cpsie	i
 8013d2c:	b661      	cpsie	f
 8013d2e:	f3bf 8f4f 	dsb	sy
 8013d32:	f3bf 8f6f 	isb	sy
 8013d36:	df00      	svc	0
 8013d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013d3a:	bf00      	nop
 8013d3c:	e000ed08 	.word	0xe000ed08

08013d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b086      	sub	sp, #24
 8013d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013d46:	4b46      	ldr	r3, [pc, #280]	; (8013e60 <xPortStartScheduler+0x120>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	4a46      	ldr	r2, [pc, #280]	; (8013e64 <xPortStartScheduler+0x124>)
 8013d4c:	4293      	cmp	r3, r2
 8013d4e:	d10a      	bne.n	8013d66 <xPortStartScheduler+0x26>
	__asm volatile
 8013d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d54:	f383 8811 	msr	BASEPRI, r3
 8013d58:	f3bf 8f6f 	isb	sy
 8013d5c:	f3bf 8f4f 	dsb	sy
 8013d60:	613b      	str	r3, [r7, #16]
}
 8013d62:	bf00      	nop
 8013d64:	e7fe      	b.n	8013d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013d66:	4b3e      	ldr	r3, [pc, #248]	; (8013e60 <xPortStartScheduler+0x120>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	4a3f      	ldr	r2, [pc, #252]	; (8013e68 <xPortStartScheduler+0x128>)
 8013d6c:	4293      	cmp	r3, r2
 8013d6e:	d10a      	bne.n	8013d86 <xPortStartScheduler+0x46>
	__asm volatile
 8013d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d74:	f383 8811 	msr	BASEPRI, r3
 8013d78:	f3bf 8f6f 	isb	sy
 8013d7c:	f3bf 8f4f 	dsb	sy
 8013d80:	60fb      	str	r3, [r7, #12]
}
 8013d82:	bf00      	nop
 8013d84:	e7fe      	b.n	8013d84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013d86:	4b39      	ldr	r3, [pc, #228]	; (8013e6c <xPortStartScheduler+0x12c>)
 8013d88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013d8a:	697b      	ldr	r3, [r7, #20]
 8013d8c:	781b      	ldrb	r3, [r3, #0]
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013d92:	697b      	ldr	r3, [r7, #20]
 8013d94:	22ff      	movs	r2, #255	; 0xff
 8013d96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013d98:	697b      	ldr	r3, [r7, #20]
 8013d9a:	781b      	ldrb	r3, [r3, #0]
 8013d9c:	b2db      	uxtb	r3, r3
 8013d9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013da0:	78fb      	ldrb	r3, [r7, #3]
 8013da2:	b2db      	uxtb	r3, r3
 8013da4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013da8:	b2da      	uxtb	r2, r3
 8013daa:	4b31      	ldr	r3, [pc, #196]	; (8013e70 <xPortStartScheduler+0x130>)
 8013dac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013dae:	4b31      	ldr	r3, [pc, #196]	; (8013e74 <xPortStartScheduler+0x134>)
 8013db0:	2207      	movs	r2, #7
 8013db2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013db4:	e009      	b.n	8013dca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013db6:	4b2f      	ldr	r3, [pc, #188]	; (8013e74 <xPortStartScheduler+0x134>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	3b01      	subs	r3, #1
 8013dbc:	4a2d      	ldr	r2, [pc, #180]	; (8013e74 <xPortStartScheduler+0x134>)
 8013dbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013dc0:	78fb      	ldrb	r3, [r7, #3]
 8013dc2:	b2db      	uxtb	r3, r3
 8013dc4:	005b      	lsls	r3, r3, #1
 8013dc6:	b2db      	uxtb	r3, r3
 8013dc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013dca:	78fb      	ldrb	r3, [r7, #3]
 8013dcc:	b2db      	uxtb	r3, r3
 8013dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013dd2:	2b80      	cmp	r3, #128	; 0x80
 8013dd4:	d0ef      	beq.n	8013db6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013dd6:	4b27      	ldr	r3, [pc, #156]	; (8013e74 <xPortStartScheduler+0x134>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	f1c3 0307 	rsb	r3, r3, #7
 8013dde:	2b04      	cmp	r3, #4
 8013de0:	d00a      	beq.n	8013df8 <xPortStartScheduler+0xb8>
	__asm volatile
 8013de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de6:	f383 8811 	msr	BASEPRI, r3
 8013dea:	f3bf 8f6f 	isb	sy
 8013dee:	f3bf 8f4f 	dsb	sy
 8013df2:	60bb      	str	r3, [r7, #8]
}
 8013df4:	bf00      	nop
 8013df6:	e7fe      	b.n	8013df6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013df8:	4b1e      	ldr	r3, [pc, #120]	; (8013e74 <xPortStartScheduler+0x134>)
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	021b      	lsls	r3, r3, #8
 8013dfe:	4a1d      	ldr	r2, [pc, #116]	; (8013e74 <xPortStartScheduler+0x134>)
 8013e00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013e02:	4b1c      	ldr	r3, [pc, #112]	; (8013e74 <xPortStartScheduler+0x134>)
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013e0a:	4a1a      	ldr	r2, [pc, #104]	; (8013e74 <xPortStartScheduler+0x134>)
 8013e0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	b2da      	uxtb	r2, r3
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013e16:	4b18      	ldr	r3, [pc, #96]	; (8013e78 <xPortStartScheduler+0x138>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	4a17      	ldr	r2, [pc, #92]	; (8013e78 <xPortStartScheduler+0x138>)
 8013e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013e20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013e22:	4b15      	ldr	r3, [pc, #84]	; (8013e78 <xPortStartScheduler+0x138>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	4a14      	ldr	r2, [pc, #80]	; (8013e78 <xPortStartScheduler+0x138>)
 8013e28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013e2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013e2e:	f000 f8dd 	bl	8013fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013e32:	4b12      	ldr	r3, [pc, #72]	; (8013e7c <xPortStartScheduler+0x13c>)
 8013e34:	2200      	movs	r2, #0
 8013e36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013e38:	f000 f8fc 	bl	8014034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013e3c:	4b10      	ldr	r3, [pc, #64]	; (8013e80 <xPortStartScheduler+0x140>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	4a0f      	ldr	r2, [pc, #60]	; (8013e80 <xPortStartScheduler+0x140>)
 8013e42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013e46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013e48:	f7ff ff66 	bl	8013d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013e4c:	f7fe fff0 	bl	8012e30 <vTaskSwitchContext>
	prvTaskExitError();
 8013e50:	f7ff ff20 	bl	8013c94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013e54:	2300      	movs	r3, #0
}
 8013e56:	4618      	mov	r0, r3
 8013e58:	3718      	adds	r7, #24
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}
 8013e5e:	bf00      	nop
 8013e60:	e000ed00 	.word	0xe000ed00
 8013e64:	410fc271 	.word	0x410fc271
 8013e68:	410fc270 	.word	0x410fc270
 8013e6c:	e000e400 	.word	0xe000e400
 8013e70:	20002404 	.word	0x20002404
 8013e74:	20002408 	.word	0x20002408
 8013e78:	e000ed20 	.word	0xe000ed20
 8013e7c:	200012f0 	.word	0x200012f0
 8013e80:	e000ef34 	.word	0xe000ef34

08013e84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013e84:	b480      	push	{r7}
 8013e86:	b083      	sub	sp, #12
 8013e88:	af00      	add	r7, sp, #0
	__asm volatile
 8013e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e8e:	f383 8811 	msr	BASEPRI, r3
 8013e92:	f3bf 8f6f 	isb	sy
 8013e96:	f3bf 8f4f 	dsb	sy
 8013e9a:	607b      	str	r3, [r7, #4]
}
 8013e9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013e9e:	4b0f      	ldr	r3, [pc, #60]	; (8013edc <vPortEnterCritical+0x58>)
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	3301      	adds	r3, #1
 8013ea4:	4a0d      	ldr	r2, [pc, #52]	; (8013edc <vPortEnterCritical+0x58>)
 8013ea6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013ea8:	4b0c      	ldr	r3, [pc, #48]	; (8013edc <vPortEnterCritical+0x58>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	2b01      	cmp	r3, #1
 8013eae:	d10f      	bne.n	8013ed0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013eb0:	4b0b      	ldr	r3, [pc, #44]	; (8013ee0 <vPortEnterCritical+0x5c>)
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	b2db      	uxtb	r3, r3
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d00a      	beq.n	8013ed0 <vPortEnterCritical+0x4c>
	__asm volatile
 8013eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ebe:	f383 8811 	msr	BASEPRI, r3
 8013ec2:	f3bf 8f6f 	isb	sy
 8013ec6:	f3bf 8f4f 	dsb	sy
 8013eca:	603b      	str	r3, [r7, #0]
}
 8013ecc:	bf00      	nop
 8013ece:	e7fe      	b.n	8013ece <vPortEnterCritical+0x4a>
	}
}
 8013ed0:	bf00      	nop
 8013ed2:	370c      	adds	r7, #12
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eda:	4770      	bx	lr
 8013edc:	200012f0 	.word	0x200012f0
 8013ee0:	e000ed04 	.word	0xe000ed04

08013ee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013ee4:	b480      	push	{r7}
 8013ee6:	b083      	sub	sp, #12
 8013ee8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013eea:	4b12      	ldr	r3, [pc, #72]	; (8013f34 <vPortExitCritical+0x50>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d10a      	bne.n	8013f08 <vPortExitCritical+0x24>
	__asm volatile
 8013ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ef6:	f383 8811 	msr	BASEPRI, r3
 8013efa:	f3bf 8f6f 	isb	sy
 8013efe:	f3bf 8f4f 	dsb	sy
 8013f02:	607b      	str	r3, [r7, #4]
}
 8013f04:	bf00      	nop
 8013f06:	e7fe      	b.n	8013f06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013f08:	4b0a      	ldr	r3, [pc, #40]	; (8013f34 <vPortExitCritical+0x50>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	3b01      	subs	r3, #1
 8013f0e:	4a09      	ldr	r2, [pc, #36]	; (8013f34 <vPortExitCritical+0x50>)
 8013f10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013f12:	4b08      	ldr	r3, [pc, #32]	; (8013f34 <vPortExitCritical+0x50>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d105      	bne.n	8013f26 <vPortExitCritical+0x42>
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	f383 8811 	msr	BASEPRI, r3
}
 8013f24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013f26:	bf00      	nop
 8013f28:	370c      	adds	r7, #12
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f30:	4770      	bx	lr
 8013f32:	bf00      	nop
 8013f34:	200012f0 	.word	0x200012f0
	...

08013f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013f40:	f3ef 8009 	mrs	r0, PSP
 8013f44:	f3bf 8f6f 	isb	sy
 8013f48:	4b15      	ldr	r3, [pc, #84]	; (8013fa0 <pxCurrentTCBConst>)
 8013f4a:	681a      	ldr	r2, [r3, #0]
 8013f4c:	f01e 0f10 	tst.w	lr, #16
 8013f50:	bf08      	it	eq
 8013f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f5a:	6010      	str	r0, [r2, #0]
 8013f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013f64:	f380 8811 	msr	BASEPRI, r0
 8013f68:	f3bf 8f4f 	dsb	sy
 8013f6c:	f3bf 8f6f 	isb	sy
 8013f70:	f7fe ff5e 	bl	8012e30 <vTaskSwitchContext>
 8013f74:	f04f 0000 	mov.w	r0, #0
 8013f78:	f380 8811 	msr	BASEPRI, r0
 8013f7c:	bc09      	pop	{r0, r3}
 8013f7e:	6819      	ldr	r1, [r3, #0]
 8013f80:	6808      	ldr	r0, [r1, #0]
 8013f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f86:	f01e 0f10 	tst.w	lr, #16
 8013f8a:	bf08      	it	eq
 8013f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013f90:	f380 8809 	msr	PSP, r0
 8013f94:	f3bf 8f6f 	isb	sy
 8013f98:	4770      	bx	lr
 8013f9a:	bf00      	nop
 8013f9c:	f3af 8000 	nop.w

08013fa0 <pxCurrentTCBConst>:
 8013fa0:	20001dd8 	.word	0x20001dd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013fa4:	bf00      	nop
 8013fa6:	bf00      	nop

08013fa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b082      	sub	sp, #8
 8013fac:	af00      	add	r7, sp, #0
	__asm volatile
 8013fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fb2:	f383 8811 	msr	BASEPRI, r3
 8013fb6:	f3bf 8f6f 	isb	sy
 8013fba:	f3bf 8f4f 	dsb	sy
 8013fbe:	607b      	str	r3, [r7, #4]
}
 8013fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013fc2:	f7fe fe77 	bl	8012cb4 <xTaskIncrementTick>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d003      	beq.n	8013fd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013fcc:	4b06      	ldr	r3, [pc, #24]	; (8013fe8 <xPortSysTickHandler+0x40>)
 8013fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fd2:	601a      	str	r2, [r3, #0]
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	f383 8811 	msr	BASEPRI, r3
}
 8013fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013fe0:	bf00      	nop
 8013fe2:	3708      	adds	r7, #8
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}
 8013fe8:	e000ed04 	.word	0xe000ed04

08013fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013fec:	b480      	push	{r7}
 8013fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013ff0:	4b0b      	ldr	r3, [pc, #44]	; (8014020 <vPortSetupTimerInterrupt+0x34>)
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013ff6:	4b0b      	ldr	r3, [pc, #44]	; (8014024 <vPortSetupTimerInterrupt+0x38>)
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013ffc:	4b0a      	ldr	r3, [pc, #40]	; (8014028 <vPortSetupTimerInterrupt+0x3c>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	4a0a      	ldr	r2, [pc, #40]	; (801402c <vPortSetupTimerInterrupt+0x40>)
 8014002:	fba2 2303 	umull	r2, r3, r2, r3
 8014006:	099b      	lsrs	r3, r3, #6
 8014008:	4a09      	ldr	r2, [pc, #36]	; (8014030 <vPortSetupTimerInterrupt+0x44>)
 801400a:	3b01      	subs	r3, #1
 801400c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801400e:	4b04      	ldr	r3, [pc, #16]	; (8014020 <vPortSetupTimerInterrupt+0x34>)
 8014010:	2207      	movs	r2, #7
 8014012:	601a      	str	r2, [r3, #0]
}
 8014014:	bf00      	nop
 8014016:	46bd      	mov	sp, r7
 8014018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401c:	4770      	bx	lr
 801401e:	bf00      	nop
 8014020:	e000e010 	.word	0xe000e010
 8014024:	e000e018 	.word	0xe000e018
 8014028:	20000004 	.word	0x20000004
 801402c:	10624dd3 	.word	0x10624dd3
 8014030:	e000e014 	.word	0xe000e014

08014034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014044 <vPortEnableVFP+0x10>
 8014038:	6801      	ldr	r1, [r0, #0]
 801403a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801403e:	6001      	str	r1, [r0, #0]
 8014040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014042:	bf00      	nop
 8014044:	e000ed88 	.word	0xe000ed88

08014048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014048:	b480      	push	{r7}
 801404a:	b085      	sub	sp, #20
 801404c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801404e:	f3ef 8305 	mrs	r3, IPSR
 8014052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	2b0f      	cmp	r3, #15
 8014058:	d914      	bls.n	8014084 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801405a:	4a17      	ldr	r2, [pc, #92]	; (80140b8 <vPortValidateInterruptPriority+0x70>)
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	4413      	add	r3, r2
 8014060:	781b      	ldrb	r3, [r3, #0]
 8014062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014064:	4b15      	ldr	r3, [pc, #84]	; (80140bc <vPortValidateInterruptPriority+0x74>)
 8014066:	781b      	ldrb	r3, [r3, #0]
 8014068:	7afa      	ldrb	r2, [r7, #11]
 801406a:	429a      	cmp	r2, r3
 801406c:	d20a      	bcs.n	8014084 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014072:	f383 8811 	msr	BASEPRI, r3
 8014076:	f3bf 8f6f 	isb	sy
 801407a:	f3bf 8f4f 	dsb	sy
 801407e:	607b      	str	r3, [r7, #4]
}
 8014080:	bf00      	nop
 8014082:	e7fe      	b.n	8014082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014084:	4b0e      	ldr	r3, [pc, #56]	; (80140c0 <vPortValidateInterruptPriority+0x78>)
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801408c:	4b0d      	ldr	r3, [pc, #52]	; (80140c4 <vPortValidateInterruptPriority+0x7c>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	429a      	cmp	r2, r3
 8014092:	d90a      	bls.n	80140aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014098:	f383 8811 	msr	BASEPRI, r3
 801409c:	f3bf 8f6f 	isb	sy
 80140a0:	f3bf 8f4f 	dsb	sy
 80140a4:	603b      	str	r3, [r7, #0]
}
 80140a6:	bf00      	nop
 80140a8:	e7fe      	b.n	80140a8 <vPortValidateInterruptPriority+0x60>
	}
 80140aa:	bf00      	nop
 80140ac:	3714      	adds	r7, #20
 80140ae:	46bd      	mov	sp, r7
 80140b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b4:	4770      	bx	lr
 80140b6:	bf00      	nop
 80140b8:	e000e3f0 	.word	0xe000e3f0
 80140bc:	20002404 	.word	0x20002404
 80140c0:	e000ed0c 	.word	0xe000ed0c
 80140c4:	20002408 	.word	0x20002408

080140c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b08a      	sub	sp, #40	; 0x28
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80140d0:	2300      	movs	r3, #0
 80140d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80140d4:	f7fe fd1c 	bl	8012b10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80140d8:	4b5b      	ldr	r3, [pc, #364]	; (8014248 <pvPortMalloc+0x180>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d101      	bne.n	80140e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80140e0:	f000 f920 	bl	8014324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80140e4:	4b59      	ldr	r3, [pc, #356]	; (801424c <pvPortMalloc+0x184>)
 80140e6:	681a      	ldr	r2, [r3, #0]
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	4013      	ands	r3, r2
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	f040 8093 	bne.w	8014218 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d01d      	beq.n	8014134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80140f8:	2208      	movs	r2, #8
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	4413      	add	r3, r2
 80140fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	f003 0307 	and.w	r3, r3, #7
 8014106:	2b00      	cmp	r3, #0
 8014108:	d014      	beq.n	8014134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f023 0307 	bic.w	r3, r3, #7
 8014110:	3308      	adds	r3, #8
 8014112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f003 0307 	and.w	r3, r3, #7
 801411a:	2b00      	cmp	r3, #0
 801411c:	d00a      	beq.n	8014134 <pvPortMalloc+0x6c>
	__asm volatile
 801411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014122:	f383 8811 	msr	BASEPRI, r3
 8014126:	f3bf 8f6f 	isb	sy
 801412a:	f3bf 8f4f 	dsb	sy
 801412e:	617b      	str	r3, [r7, #20]
}
 8014130:	bf00      	nop
 8014132:	e7fe      	b.n	8014132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d06e      	beq.n	8014218 <pvPortMalloc+0x150>
 801413a:	4b45      	ldr	r3, [pc, #276]	; (8014250 <pvPortMalloc+0x188>)
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	687a      	ldr	r2, [r7, #4]
 8014140:	429a      	cmp	r2, r3
 8014142:	d869      	bhi.n	8014218 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014144:	4b43      	ldr	r3, [pc, #268]	; (8014254 <pvPortMalloc+0x18c>)
 8014146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014148:	4b42      	ldr	r3, [pc, #264]	; (8014254 <pvPortMalloc+0x18c>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801414e:	e004      	b.n	801415a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	687a      	ldr	r2, [r7, #4]
 8014160:	429a      	cmp	r2, r3
 8014162:	d903      	bls.n	801416c <pvPortMalloc+0xa4>
 8014164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d1f1      	bne.n	8014150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801416c:	4b36      	ldr	r3, [pc, #216]	; (8014248 <pvPortMalloc+0x180>)
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014172:	429a      	cmp	r2, r3
 8014174:	d050      	beq.n	8014218 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014176:	6a3b      	ldr	r3, [r7, #32]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	2208      	movs	r2, #8
 801417c:	4413      	add	r3, r2
 801417e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014182:	681a      	ldr	r2, [r3, #0]
 8014184:	6a3b      	ldr	r3, [r7, #32]
 8014186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801418a:	685a      	ldr	r2, [r3, #4]
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	1ad2      	subs	r2, r2, r3
 8014190:	2308      	movs	r3, #8
 8014192:	005b      	lsls	r3, r3, #1
 8014194:	429a      	cmp	r2, r3
 8014196:	d91f      	bls.n	80141d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	4413      	add	r3, r2
 801419e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80141a0:	69bb      	ldr	r3, [r7, #24]
 80141a2:	f003 0307 	and.w	r3, r3, #7
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d00a      	beq.n	80141c0 <pvPortMalloc+0xf8>
	__asm volatile
 80141aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ae:	f383 8811 	msr	BASEPRI, r3
 80141b2:	f3bf 8f6f 	isb	sy
 80141b6:	f3bf 8f4f 	dsb	sy
 80141ba:	613b      	str	r3, [r7, #16]
}
 80141bc:	bf00      	nop
 80141be:	e7fe      	b.n	80141be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80141c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c2:	685a      	ldr	r2, [r3, #4]
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	1ad2      	subs	r2, r2, r3
 80141c8:	69bb      	ldr	r3, [r7, #24]
 80141ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80141cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ce:	687a      	ldr	r2, [r7, #4]
 80141d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80141d2:	69b8      	ldr	r0, [r7, #24]
 80141d4:	f000 f908 	bl	80143e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80141d8:	4b1d      	ldr	r3, [pc, #116]	; (8014250 <pvPortMalloc+0x188>)
 80141da:	681a      	ldr	r2, [r3, #0]
 80141dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141de:	685b      	ldr	r3, [r3, #4]
 80141e0:	1ad3      	subs	r3, r2, r3
 80141e2:	4a1b      	ldr	r2, [pc, #108]	; (8014250 <pvPortMalloc+0x188>)
 80141e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80141e6:	4b1a      	ldr	r3, [pc, #104]	; (8014250 <pvPortMalloc+0x188>)
 80141e8:	681a      	ldr	r2, [r3, #0]
 80141ea:	4b1b      	ldr	r3, [pc, #108]	; (8014258 <pvPortMalloc+0x190>)
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	429a      	cmp	r2, r3
 80141f0:	d203      	bcs.n	80141fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80141f2:	4b17      	ldr	r3, [pc, #92]	; (8014250 <pvPortMalloc+0x188>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	4a18      	ldr	r2, [pc, #96]	; (8014258 <pvPortMalloc+0x190>)
 80141f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80141fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141fc:	685a      	ldr	r2, [r3, #4]
 80141fe:	4b13      	ldr	r3, [pc, #76]	; (801424c <pvPortMalloc+0x184>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	431a      	orrs	r2, r3
 8014204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420a:	2200      	movs	r2, #0
 801420c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801420e:	4b13      	ldr	r3, [pc, #76]	; (801425c <pvPortMalloc+0x194>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	3301      	adds	r3, #1
 8014214:	4a11      	ldr	r2, [pc, #68]	; (801425c <pvPortMalloc+0x194>)
 8014216:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014218:	f7fe fc88 	bl	8012b2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801421c:	69fb      	ldr	r3, [r7, #28]
 801421e:	f003 0307 	and.w	r3, r3, #7
 8014222:	2b00      	cmp	r3, #0
 8014224:	d00a      	beq.n	801423c <pvPortMalloc+0x174>
	__asm volatile
 8014226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801422a:	f383 8811 	msr	BASEPRI, r3
 801422e:	f3bf 8f6f 	isb	sy
 8014232:	f3bf 8f4f 	dsb	sy
 8014236:	60fb      	str	r3, [r7, #12]
}
 8014238:	bf00      	nop
 801423a:	e7fe      	b.n	801423a <pvPortMalloc+0x172>
	return pvReturn;
 801423c:	69fb      	ldr	r3, [r7, #28]
}
 801423e:	4618      	mov	r0, r3
 8014240:	3728      	adds	r7, #40	; 0x28
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}
 8014246:	bf00      	nop
 8014248:	2000a414 	.word	0x2000a414
 801424c:	2000a428 	.word	0x2000a428
 8014250:	2000a418 	.word	0x2000a418
 8014254:	2000a40c 	.word	0x2000a40c
 8014258:	2000a41c 	.word	0x2000a41c
 801425c:	2000a420 	.word	0x2000a420

08014260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b086      	sub	sp, #24
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d04d      	beq.n	801430e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014272:	2308      	movs	r3, #8
 8014274:	425b      	negs	r3, r3
 8014276:	697a      	ldr	r2, [r7, #20]
 8014278:	4413      	add	r3, r2
 801427a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801427c:	697b      	ldr	r3, [r7, #20]
 801427e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014280:	693b      	ldr	r3, [r7, #16]
 8014282:	685a      	ldr	r2, [r3, #4]
 8014284:	4b24      	ldr	r3, [pc, #144]	; (8014318 <vPortFree+0xb8>)
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	4013      	ands	r3, r2
 801428a:	2b00      	cmp	r3, #0
 801428c:	d10a      	bne.n	80142a4 <vPortFree+0x44>
	__asm volatile
 801428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014292:	f383 8811 	msr	BASEPRI, r3
 8014296:	f3bf 8f6f 	isb	sy
 801429a:	f3bf 8f4f 	dsb	sy
 801429e:	60fb      	str	r3, [r7, #12]
}
 80142a0:	bf00      	nop
 80142a2:	e7fe      	b.n	80142a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80142a4:	693b      	ldr	r3, [r7, #16]
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d00a      	beq.n	80142c2 <vPortFree+0x62>
	__asm volatile
 80142ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142b0:	f383 8811 	msr	BASEPRI, r3
 80142b4:	f3bf 8f6f 	isb	sy
 80142b8:	f3bf 8f4f 	dsb	sy
 80142bc:	60bb      	str	r3, [r7, #8]
}
 80142be:	bf00      	nop
 80142c0:	e7fe      	b.n	80142c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80142c2:	693b      	ldr	r3, [r7, #16]
 80142c4:	685a      	ldr	r2, [r3, #4]
 80142c6:	4b14      	ldr	r3, [pc, #80]	; (8014318 <vPortFree+0xb8>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	4013      	ands	r3, r2
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d01e      	beq.n	801430e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80142d0:	693b      	ldr	r3, [r7, #16]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d11a      	bne.n	801430e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80142d8:	693b      	ldr	r3, [r7, #16]
 80142da:	685a      	ldr	r2, [r3, #4]
 80142dc:	4b0e      	ldr	r3, [pc, #56]	; (8014318 <vPortFree+0xb8>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	43db      	mvns	r3, r3
 80142e2:	401a      	ands	r2, r3
 80142e4:	693b      	ldr	r3, [r7, #16]
 80142e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80142e8:	f7fe fc12 	bl	8012b10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80142ec:	693b      	ldr	r3, [r7, #16]
 80142ee:	685a      	ldr	r2, [r3, #4]
 80142f0:	4b0a      	ldr	r3, [pc, #40]	; (801431c <vPortFree+0xbc>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	4413      	add	r3, r2
 80142f6:	4a09      	ldr	r2, [pc, #36]	; (801431c <vPortFree+0xbc>)
 80142f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80142fa:	6938      	ldr	r0, [r7, #16]
 80142fc:	f000 f874 	bl	80143e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014300:	4b07      	ldr	r3, [pc, #28]	; (8014320 <vPortFree+0xc0>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	3301      	adds	r3, #1
 8014306:	4a06      	ldr	r2, [pc, #24]	; (8014320 <vPortFree+0xc0>)
 8014308:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801430a:	f7fe fc0f 	bl	8012b2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801430e:	bf00      	nop
 8014310:	3718      	adds	r7, #24
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}
 8014316:	bf00      	nop
 8014318:	2000a428 	.word	0x2000a428
 801431c:	2000a418 	.word	0x2000a418
 8014320:	2000a424 	.word	0x2000a424

08014324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014324:	b480      	push	{r7}
 8014326:	b085      	sub	sp, #20
 8014328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801432a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801432e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014330:	4b27      	ldr	r3, [pc, #156]	; (80143d0 <prvHeapInit+0xac>)
 8014332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	f003 0307 	and.w	r3, r3, #7
 801433a:	2b00      	cmp	r3, #0
 801433c:	d00c      	beq.n	8014358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	3307      	adds	r3, #7
 8014342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	f023 0307 	bic.w	r3, r3, #7
 801434a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801434c:	68ba      	ldr	r2, [r7, #8]
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	1ad3      	subs	r3, r2, r3
 8014352:	4a1f      	ldr	r2, [pc, #124]	; (80143d0 <prvHeapInit+0xac>)
 8014354:	4413      	add	r3, r2
 8014356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801435c:	4a1d      	ldr	r2, [pc, #116]	; (80143d4 <prvHeapInit+0xb0>)
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014362:	4b1c      	ldr	r3, [pc, #112]	; (80143d4 <prvHeapInit+0xb0>)
 8014364:	2200      	movs	r2, #0
 8014366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	68ba      	ldr	r2, [r7, #8]
 801436c:	4413      	add	r3, r2
 801436e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014370:	2208      	movs	r2, #8
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	1a9b      	subs	r3, r3, r2
 8014376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	f023 0307 	bic.w	r3, r3, #7
 801437e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	4a15      	ldr	r2, [pc, #84]	; (80143d8 <prvHeapInit+0xb4>)
 8014384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014386:	4b14      	ldr	r3, [pc, #80]	; (80143d8 <prvHeapInit+0xb4>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	2200      	movs	r2, #0
 801438c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801438e:	4b12      	ldr	r3, [pc, #72]	; (80143d8 <prvHeapInit+0xb4>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2200      	movs	r2, #0
 8014394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	68fa      	ldr	r2, [r7, #12]
 801439e:	1ad2      	subs	r2, r2, r3
 80143a0:	683b      	ldr	r3, [r7, #0]
 80143a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80143a4:	4b0c      	ldr	r3, [pc, #48]	; (80143d8 <prvHeapInit+0xb4>)
 80143a6:	681a      	ldr	r2, [r3, #0]
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	685b      	ldr	r3, [r3, #4]
 80143b0:	4a0a      	ldr	r2, [pc, #40]	; (80143dc <prvHeapInit+0xb8>)
 80143b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	685b      	ldr	r3, [r3, #4]
 80143b8:	4a09      	ldr	r2, [pc, #36]	; (80143e0 <prvHeapInit+0xbc>)
 80143ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80143bc:	4b09      	ldr	r3, [pc, #36]	; (80143e4 <prvHeapInit+0xc0>)
 80143be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80143c2:	601a      	str	r2, [r3, #0]
}
 80143c4:	bf00      	nop
 80143c6:	3714      	adds	r7, #20
 80143c8:	46bd      	mov	sp, r7
 80143ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ce:	4770      	bx	lr
 80143d0:	2000240c 	.word	0x2000240c
 80143d4:	2000a40c 	.word	0x2000a40c
 80143d8:	2000a414 	.word	0x2000a414
 80143dc:	2000a41c 	.word	0x2000a41c
 80143e0:	2000a418 	.word	0x2000a418
 80143e4:	2000a428 	.word	0x2000a428

080143e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80143e8:	b480      	push	{r7}
 80143ea:	b085      	sub	sp, #20
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80143f0:	4b28      	ldr	r3, [pc, #160]	; (8014494 <prvInsertBlockIntoFreeList+0xac>)
 80143f2:	60fb      	str	r3, [r7, #12]
 80143f4:	e002      	b.n	80143fc <prvInsertBlockIntoFreeList+0x14>
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	60fb      	str	r3, [r7, #12]
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	687a      	ldr	r2, [r7, #4]
 8014402:	429a      	cmp	r2, r3
 8014404:	d8f7      	bhi.n	80143f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	685b      	ldr	r3, [r3, #4]
 801440e:	68ba      	ldr	r2, [r7, #8]
 8014410:	4413      	add	r3, r2
 8014412:	687a      	ldr	r2, [r7, #4]
 8014414:	429a      	cmp	r2, r3
 8014416:	d108      	bne.n	801442a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	685a      	ldr	r2, [r3, #4]
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	685b      	ldr	r3, [r3, #4]
 8014420:	441a      	add	r2, r3
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	685b      	ldr	r3, [r3, #4]
 8014432:	68ba      	ldr	r2, [r7, #8]
 8014434:	441a      	add	r2, r3
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	429a      	cmp	r2, r3
 801443c:	d118      	bne.n	8014470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	681a      	ldr	r2, [r3, #0]
 8014442:	4b15      	ldr	r3, [pc, #84]	; (8014498 <prvInsertBlockIntoFreeList+0xb0>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	429a      	cmp	r2, r3
 8014448:	d00d      	beq.n	8014466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	685a      	ldr	r2, [r3, #4]
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	685b      	ldr	r3, [r3, #4]
 8014454:	441a      	add	r2, r3
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	681a      	ldr	r2, [r3, #0]
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	601a      	str	r2, [r3, #0]
 8014464:	e008      	b.n	8014478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014466:	4b0c      	ldr	r3, [pc, #48]	; (8014498 <prvInsertBlockIntoFreeList+0xb0>)
 8014468:	681a      	ldr	r2, [r3, #0]
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	601a      	str	r2, [r3, #0]
 801446e:	e003      	b.n	8014478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	681a      	ldr	r2, [r3, #0]
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014478:	68fa      	ldr	r2, [r7, #12]
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	429a      	cmp	r2, r3
 801447e:	d002      	beq.n	8014486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	687a      	ldr	r2, [r7, #4]
 8014484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014486:	bf00      	nop
 8014488:	3714      	adds	r7, #20
 801448a:	46bd      	mov	sp, r7
 801448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014490:	4770      	bx	lr
 8014492:	bf00      	nop
 8014494:	2000a40c 	.word	0x2000a40c
 8014498:	2000a414 	.word	0x2000a414

0801449c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 801449c:	b480      	push	{r7}
 801449e:	b083      	sub	sp, #12
 80144a0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80144a2:	4b24      	ldr	r3, [pc, #144]	; (8014534 <_DoInit+0x98>)
 80144a4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	2203      	movs	r2, #3
 80144aa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	2203      	movs	r2, #3
 80144b0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	4a20      	ldr	r2, [pc, #128]	; (8014538 <_DoInit+0x9c>)
 80144b6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	4a20      	ldr	r2, [pc, #128]	; (801453c <_DoInit+0xa0>)
 80144bc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80144c4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	2200      	movs	r2, #0
 80144ca:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	2200      	movs	r2, #0
 80144d0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2200      	movs	r2, #0
 80144d6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	4a17      	ldr	r2, [pc, #92]	; (8014538 <_DoInit+0x9c>)
 80144dc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	4a17      	ldr	r2, [pc, #92]	; (8014540 <_DoInit+0xa4>)
 80144e2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	2210      	movs	r2, #16
 80144e8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	2200      	movs	r2, #0
 80144ee:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2200      	movs	r2, #0
 80144f4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	2200      	movs	r2, #0
 80144fa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	3307      	adds	r3, #7
 8014500:	4a10      	ldr	r2, [pc, #64]	; (8014544 <_DoInit+0xa8>)
 8014502:	6810      	ldr	r0, [r2, #0]
 8014504:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8014506:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	4a0e      	ldr	r2, [pc, #56]	; (8014548 <_DoInit+0xac>)
 801450e:	6810      	ldr	r0, [r2, #0]
 8014510:	6018      	str	r0, [r3, #0]
 8014512:	8891      	ldrh	r1, [r2, #4]
 8014514:	7992      	ldrb	r2, [r2, #6]
 8014516:	8099      	strh	r1, [r3, #4]
 8014518:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 801451a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2220      	movs	r2, #32
 8014522:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8014524:	f3bf 8f5f 	dmb	sy
}
 8014528:	bf00      	nop
 801452a:	370c      	adds	r7, #12
 801452c:	46bd      	mov	sp, r7
 801452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014532:	4770      	bx	lr
 8014534:	2000de58 	.word	0x2000de58
 8014538:	080164f8 	.word	0x080164f8
 801453c:	2000a42c 	.word	0x2000a42c
 8014540:	2000a82c 	.word	0x2000a82c
 8014544:	08016504 	.word	0x08016504
 8014548:	08016508 	.word	0x08016508

0801454c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 801454c:	b580      	push	{r7, lr}
 801454e:	b08c      	sub	sp, #48	; 0x30
 8014550:	af00      	add	r7, sp, #0
 8014552:	60f8      	str	r0, [r7, #12]
 8014554:	60b9      	str	r1, [r7, #8]
 8014556:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8014558:	4b3e      	ldr	r3, [pc, #248]	; (8014654 <SEGGER_RTT_ReadNoLock+0x108>)
 801455a:	623b      	str	r3, [r7, #32]
 801455c:	6a3b      	ldr	r3, [r7, #32]
 801455e:	781b      	ldrb	r3, [r3, #0]
 8014560:	b2db      	uxtb	r3, r3
 8014562:	2b00      	cmp	r3, #0
 8014564:	d101      	bne.n	801456a <SEGGER_RTT_ReadNoLock+0x1e>
 8014566:	f7ff ff99 	bl	801449c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 801456a:	68fa      	ldr	r2, [r7, #12]
 801456c:	4613      	mov	r3, r2
 801456e:	005b      	lsls	r3, r3, #1
 8014570:	4413      	add	r3, r2
 8014572:	00db      	lsls	r3, r3, #3
 8014574:	3360      	adds	r3, #96	; 0x60
 8014576:	4a37      	ldr	r2, [pc, #220]	; (8014654 <SEGGER_RTT_ReadNoLock+0x108>)
 8014578:	4413      	add	r3, r2
 801457a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8014580:	69fb      	ldr	r3, [r7, #28]
 8014582:	691b      	ldr	r3, [r3, #16]
 8014584:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8014586:	69fb      	ldr	r3, [r7, #28]
 8014588:	68db      	ldr	r3, [r3, #12]
 801458a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 801458c:	2300      	movs	r3, #0
 801458e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8014590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014592:	69bb      	ldr	r3, [r7, #24]
 8014594:	429a      	cmp	r2, r3
 8014596:	d92b      	bls.n	80145f0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8014598:	69fb      	ldr	r3, [r7, #28]
 801459a:	689a      	ldr	r2, [r3, #8]
 801459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801459e:	1ad3      	subs	r3, r2, r3
 80145a0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80145a2:	697a      	ldr	r2, [r7, #20]
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	4293      	cmp	r3, r2
 80145a8:	bf28      	it	cs
 80145aa:	4613      	movcs	r3, r2
 80145ac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80145ae:	69fb      	ldr	r3, [r7, #28]
 80145b0:	685a      	ldr	r2, [r3, #4]
 80145b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145b4:	4413      	add	r3, r2
 80145b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80145b8:	697a      	ldr	r2, [r7, #20]
 80145ba:	6939      	ldr	r1, [r7, #16]
 80145bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145be:	f001 fa7d 	bl	8015abc <memcpy>
    NumBytesRead += NumBytesRem;
 80145c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	4413      	add	r3, r2
 80145c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80145ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145cc:	697b      	ldr	r3, [r7, #20]
 80145ce:	4413      	add	r3, r2
 80145d0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80145d2:	687a      	ldr	r2, [r7, #4]
 80145d4:	697b      	ldr	r3, [r7, #20]
 80145d6:	1ad3      	subs	r3, r2, r3
 80145d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80145da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80145dc:	697b      	ldr	r3, [r7, #20]
 80145de:	4413      	add	r3, r2
 80145e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80145e2:	69fb      	ldr	r3, [r7, #28]
 80145e4:	689b      	ldr	r3, [r3, #8]
 80145e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80145e8:	429a      	cmp	r2, r3
 80145ea:	d101      	bne.n	80145f0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80145ec:	2300      	movs	r3, #0
 80145ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80145f0:	69ba      	ldr	r2, [r7, #24]
 80145f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145f4:	1ad3      	subs	r3, r2, r3
 80145f6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80145f8:	697a      	ldr	r2, [r7, #20]
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	4293      	cmp	r3, r2
 80145fe:	bf28      	it	cs
 8014600:	4613      	movcs	r3, r2
 8014602:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8014604:	697b      	ldr	r3, [r7, #20]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d019      	beq.n	801463e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 801460a:	69fb      	ldr	r3, [r7, #28]
 801460c:	685a      	ldr	r2, [r3, #4]
 801460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014610:	4413      	add	r3, r2
 8014612:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8014614:	697a      	ldr	r2, [r7, #20]
 8014616:	6939      	ldr	r1, [r7, #16]
 8014618:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801461a:	f001 fa4f 	bl	8015abc <memcpy>
    NumBytesRead += NumBytesRem;
 801461e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	4413      	add	r3, r2
 8014624:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8014626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014628:	697b      	ldr	r3, [r7, #20]
 801462a:	4413      	add	r3, r2
 801462c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 801462e:	687a      	ldr	r2, [r7, #4]
 8014630:	697b      	ldr	r3, [r7, #20]
 8014632:	1ad3      	subs	r3, r2, r3
 8014634:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8014636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014638:	697b      	ldr	r3, [r7, #20]
 801463a:	4413      	add	r3, r2
 801463c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 801463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014640:	2b00      	cmp	r3, #0
 8014642:	d002      	beq.n	801464a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8014644:	69fb      	ldr	r3, [r7, #28]
 8014646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014648:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 801464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801464c:	4618      	mov	r0, r3
 801464e:	3730      	adds	r7, #48	; 0x30
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}
 8014654:	2000de58 	.word	0x2000de58

08014658 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8014658:	b580      	push	{r7, lr}
 801465a:	b088      	sub	sp, #32
 801465c:	af00      	add	r7, sp, #0
 801465e:	60f8      	str	r0, [r7, #12]
 8014660:	60b9      	str	r1, [r7, #8]
 8014662:	607a      	str	r2, [r7, #4]
 8014664:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8014666:	4b3d      	ldr	r3, [pc, #244]	; (801475c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8014668:	61bb      	str	r3, [r7, #24]
 801466a:	69bb      	ldr	r3, [r7, #24]
 801466c:	781b      	ldrb	r3, [r3, #0]
 801466e:	b2db      	uxtb	r3, r3
 8014670:	2b00      	cmp	r3, #0
 8014672:	d101      	bne.n	8014678 <SEGGER_RTT_AllocUpBuffer+0x20>
 8014674:	f7ff ff12 	bl	801449c <_DoInit>
  SEGGER_RTT_LOCK();
 8014678:	f3ef 8311 	mrs	r3, BASEPRI
 801467c:	f04f 0120 	mov.w	r1, #32
 8014680:	f381 8811 	msr	BASEPRI, r1
 8014684:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8014686:	4b35      	ldr	r3, [pc, #212]	; (801475c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8014688:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 801468a:	2300      	movs	r3, #0
 801468c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 801468e:	6939      	ldr	r1, [r7, #16]
 8014690:	69fb      	ldr	r3, [r7, #28]
 8014692:	1c5a      	adds	r2, r3, #1
 8014694:	4613      	mov	r3, r2
 8014696:	005b      	lsls	r3, r3, #1
 8014698:	4413      	add	r3, r2
 801469a:	00db      	lsls	r3, r3, #3
 801469c:	440b      	add	r3, r1
 801469e:	3304      	adds	r3, #4
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d008      	beq.n	80146b8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80146a6:	69fb      	ldr	r3, [r7, #28]
 80146a8:	3301      	adds	r3, #1
 80146aa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	691b      	ldr	r3, [r3, #16]
 80146b0:	69fa      	ldr	r2, [r7, #28]
 80146b2:	429a      	cmp	r2, r3
 80146b4:	dbeb      	blt.n	801468e <SEGGER_RTT_AllocUpBuffer+0x36>
 80146b6:	e000      	b.n	80146ba <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80146b8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	691b      	ldr	r3, [r3, #16]
 80146be:	69fa      	ldr	r2, [r7, #28]
 80146c0:	429a      	cmp	r2, r3
 80146c2:	da3f      	bge.n	8014744 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80146c4:	6939      	ldr	r1, [r7, #16]
 80146c6:	69fb      	ldr	r3, [r7, #28]
 80146c8:	1c5a      	adds	r2, r3, #1
 80146ca:	4613      	mov	r3, r2
 80146cc:	005b      	lsls	r3, r3, #1
 80146ce:	4413      	add	r3, r2
 80146d0:	00db      	lsls	r3, r3, #3
 80146d2:	440b      	add	r3, r1
 80146d4:	68fa      	ldr	r2, [r7, #12]
 80146d6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80146d8:	6939      	ldr	r1, [r7, #16]
 80146da:	69fb      	ldr	r3, [r7, #28]
 80146dc:	1c5a      	adds	r2, r3, #1
 80146de:	4613      	mov	r3, r2
 80146e0:	005b      	lsls	r3, r3, #1
 80146e2:	4413      	add	r3, r2
 80146e4:	00db      	lsls	r3, r3, #3
 80146e6:	440b      	add	r3, r1
 80146e8:	3304      	adds	r3, #4
 80146ea:	68ba      	ldr	r2, [r7, #8]
 80146ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80146ee:	6939      	ldr	r1, [r7, #16]
 80146f0:	69fa      	ldr	r2, [r7, #28]
 80146f2:	4613      	mov	r3, r2
 80146f4:	005b      	lsls	r3, r3, #1
 80146f6:	4413      	add	r3, r2
 80146f8:	00db      	lsls	r3, r3, #3
 80146fa:	440b      	add	r3, r1
 80146fc:	3320      	adds	r3, #32
 80146fe:	687a      	ldr	r2, [r7, #4]
 8014700:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8014702:	6939      	ldr	r1, [r7, #16]
 8014704:	69fa      	ldr	r2, [r7, #28]
 8014706:	4613      	mov	r3, r2
 8014708:	005b      	lsls	r3, r3, #1
 801470a:	4413      	add	r3, r2
 801470c:	00db      	lsls	r3, r3, #3
 801470e:	440b      	add	r3, r1
 8014710:	3328      	adds	r3, #40	; 0x28
 8014712:	2200      	movs	r2, #0
 8014714:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8014716:	6939      	ldr	r1, [r7, #16]
 8014718:	69fa      	ldr	r2, [r7, #28]
 801471a:	4613      	mov	r3, r2
 801471c:	005b      	lsls	r3, r3, #1
 801471e:	4413      	add	r3, r2
 8014720:	00db      	lsls	r3, r3, #3
 8014722:	440b      	add	r3, r1
 8014724:	3324      	adds	r3, #36	; 0x24
 8014726:	2200      	movs	r2, #0
 8014728:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 801472a:	6939      	ldr	r1, [r7, #16]
 801472c:	69fa      	ldr	r2, [r7, #28]
 801472e:	4613      	mov	r3, r2
 8014730:	005b      	lsls	r3, r3, #1
 8014732:	4413      	add	r3, r2
 8014734:	00db      	lsls	r3, r3, #3
 8014736:	440b      	add	r3, r1
 8014738:	332c      	adds	r3, #44	; 0x2c
 801473a:	683a      	ldr	r2, [r7, #0]
 801473c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 801473e:	f3bf 8f5f 	dmb	sy
 8014742:	e002      	b.n	801474a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8014744:	f04f 33ff 	mov.w	r3, #4294967295
 8014748:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 801474a:	697b      	ldr	r3, [r7, #20]
 801474c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8014750:	69fb      	ldr	r3, [r7, #28]
}
 8014752:	4618      	mov	r0, r3
 8014754:	3720      	adds	r7, #32
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}
 801475a:	bf00      	nop
 801475c:	2000de58 	.word	0x2000de58

08014760 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8014760:	b580      	push	{r7, lr}
 8014762:	b08a      	sub	sp, #40	; 0x28
 8014764:	af00      	add	r7, sp, #0
 8014766:	60f8      	str	r0, [r7, #12]
 8014768:	60b9      	str	r1, [r7, #8]
 801476a:	607a      	str	r2, [r7, #4]
 801476c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 801476e:	4b21      	ldr	r3, [pc, #132]	; (80147f4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8014770:	623b      	str	r3, [r7, #32]
 8014772:	6a3b      	ldr	r3, [r7, #32]
 8014774:	781b      	ldrb	r3, [r3, #0]
 8014776:	b2db      	uxtb	r3, r3
 8014778:	2b00      	cmp	r3, #0
 801477a:	d101      	bne.n	8014780 <SEGGER_RTT_ConfigDownBuffer+0x20>
 801477c:	f7ff fe8e 	bl	801449c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8014780:	4b1c      	ldr	r3, [pc, #112]	; (80147f4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8014782:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	2b02      	cmp	r3, #2
 8014788:	d82c      	bhi.n	80147e4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 801478a:	f3ef 8311 	mrs	r3, BASEPRI
 801478e:	f04f 0120 	mov.w	r1, #32
 8014792:	f381 8811 	msr	BASEPRI, r1
 8014796:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8014798:	68fa      	ldr	r2, [r7, #12]
 801479a:	4613      	mov	r3, r2
 801479c:	005b      	lsls	r3, r3, #1
 801479e:	4413      	add	r3, r2
 80147a0:	00db      	lsls	r3, r3, #3
 80147a2:	3360      	adds	r3, #96	; 0x60
 80147a4:	69fa      	ldr	r2, [r7, #28]
 80147a6:	4413      	add	r3, r2
 80147a8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d00e      	beq.n	80147ce <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	68ba      	ldr	r2, [r7, #8]
 80147b4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80147b6:	697b      	ldr	r3, [r7, #20]
 80147b8:	687a      	ldr	r2, [r7, #4]
 80147ba:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80147bc:	697b      	ldr	r3, [r7, #20]
 80147be:	683a      	ldr	r2, [r7, #0]
 80147c0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80147c2:	697b      	ldr	r3, [r7, #20]
 80147c4:	2200      	movs	r2, #0
 80147c6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	2200      	movs	r2, #0
 80147cc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80147ce:	697b      	ldr	r3, [r7, #20]
 80147d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147d2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80147d4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80147d8:	69bb      	ldr	r3, [r7, #24]
 80147da:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80147de:	2300      	movs	r3, #0
 80147e0:	627b      	str	r3, [r7, #36]	; 0x24
 80147e2:	e002      	b.n	80147ea <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80147e4:	f04f 33ff 	mov.w	r3, #4294967295
 80147e8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80147ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80147ec:	4618      	mov	r0, r3
 80147ee:	3728      	adds	r7, #40	; 0x28
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}
 80147f4:	2000de58 	.word	0x2000de58

080147f8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80147f8:	b480      	push	{r7}
 80147fa:	b087      	sub	sp, #28
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	60f8      	str	r0, [r7, #12]
 8014800:	60b9      	str	r1, [r7, #8]
 8014802:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8014804:	2300      	movs	r3, #0
 8014806:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d00f      	beq.n	801482e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 801480e:	e002      	b.n	8014816 <_EncodeStr+0x1e>
      Len++;
 8014810:	693b      	ldr	r3, [r7, #16]
 8014812:	3301      	adds	r3, #1
 8014814:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8014816:	68ba      	ldr	r2, [r7, #8]
 8014818:	693b      	ldr	r3, [r7, #16]
 801481a:	4413      	add	r3, r2
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d1f6      	bne.n	8014810 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8014822:	693a      	ldr	r2, [r7, #16]
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	429a      	cmp	r2, r3
 8014828:	d901      	bls.n	801482e <_EncodeStr+0x36>
      Len = Limit;
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	2bfe      	cmp	r3, #254	; 0xfe
 8014832:	d806      	bhi.n	8014842 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	1c5a      	adds	r2, r3, #1
 8014838:	60fa      	str	r2, [r7, #12]
 801483a:	693a      	ldr	r2, [r7, #16]
 801483c:	b2d2      	uxtb	r2, r2
 801483e:	701a      	strb	r2, [r3, #0]
 8014840:	e011      	b.n	8014866 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	1c5a      	adds	r2, r3, #1
 8014846:	60fa      	str	r2, [r7, #12]
 8014848:	22ff      	movs	r2, #255	; 0xff
 801484a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	1c5a      	adds	r2, r3, #1
 8014850:	60fa      	str	r2, [r7, #12]
 8014852:	693a      	ldr	r2, [r7, #16]
 8014854:	b2d2      	uxtb	r2, r2
 8014856:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8014858:	693b      	ldr	r3, [r7, #16]
 801485a:	0a19      	lsrs	r1, r3, #8
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	1c5a      	adds	r2, r3, #1
 8014860:	60fa      	str	r2, [r7, #12]
 8014862:	b2ca      	uxtb	r2, r1
 8014864:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8014866:	2300      	movs	r3, #0
 8014868:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 801486a:	e00a      	b.n	8014882 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 801486c:	68ba      	ldr	r2, [r7, #8]
 801486e:	1c53      	adds	r3, r2, #1
 8014870:	60bb      	str	r3, [r7, #8]
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	1c59      	adds	r1, r3, #1
 8014876:	60f9      	str	r1, [r7, #12]
 8014878:	7812      	ldrb	r2, [r2, #0]
 801487a:	701a      	strb	r2, [r3, #0]
    n++;
 801487c:	697b      	ldr	r3, [r7, #20]
 801487e:	3301      	adds	r3, #1
 8014880:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8014882:	697a      	ldr	r2, [r7, #20]
 8014884:	693b      	ldr	r3, [r7, #16]
 8014886:	429a      	cmp	r2, r3
 8014888:	d3f0      	bcc.n	801486c <_EncodeStr+0x74>
  }
  return pPayload;
 801488a:	68fb      	ldr	r3, [r7, #12]
}
 801488c:	4618      	mov	r0, r3
 801488e:	371c      	adds	r7, #28
 8014890:	46bd      	mov	sp, r7
 8014892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014896:	4770      	bx	lr

08014898 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8014898:	b480      	push	{r7}
 801489a:	b083      	sub	sp, #12
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	3304      	adds	r3, #4
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	370c      	adds	r7, #12
 80148a8:	46bd      	mov	sp, r7
 80148aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ae:	4770      	bx	lr

080148b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b082      	sub	sp, #8
 80148b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80148b6:	4b36      	ldr	r3, [pc, #216]	; (8014990 <_HandleIncomingPacket+0xe0>)
 80148b8:	7e1b      	ldrb	r3, [r3, #24]
 80148ba:	4618      	mov	r0, r3
 80148bc:	1cfb      	adds	r3, r7, #3
 80148be:	2201      	movs	r2, #1
 80148c0:	4619      	mov	r1, r3
 80148c2:	f7ff fe43 	bl	801454c <SEGGER_RTT_ReadNoLock>
 80148c6:	4603      	mov	r3, r0
 80148c8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	dd54      	ble.n	801497a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80148d0:	78fb      	ldrb	r3, [r7, #3]
 80148d2:	2b80      	cmp	r3, #128	; 0x80
 80148d4:	d032      	beq.n	801493c <_HandleIncomingPacket+0x8c>
 80148d6:	2b80      	cmp	r3, #128	; 0x80
 80148d8:	dc42      	bgt.n	8014960 <_HandleIncomingPacket+0xb0>
 80148da:	2b07      	cmp	r3, #7
 80148dc:	dc16      	bgt.n	801490c <_HandleIncomingPacket+0x5c>
 80148de:	2b00      	cmp	r3, #0
 80148e0:	dd3e      	ble.n	8014960 <_HandleIncomingPacket+0xb0>
 80148e2:	3b01      	subs	r3, #1
 80148e4:	2b06      	cmp	r3, #6
 80148e6:	d83b      	bhi.n	8014960 <_HandleIncomingPacket+0xb0>
 80148e8:	a201      	add	r2, pc, #4	; (adr r2, 80148f0 <_HandleIncomingPacket+0x40>)
 80148ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148ee:	bf00      	nop
 80148f0:	08014913 	.word	0x08014913
 80148f4:	08014919 	.word	0x08014919
 80148f8:	0801491f 	.word	0x0801491f
 80148fc:	08014925 	.word	0x08014925
 8014900:	0801492b 	.word	0x0801492b
 8014904:	08014931 	.word	0x08014931
 8014908:	08014937 	.word	0x08014937
 801490c:	2b7f      	cmp	r3, #127	; 0x7f
 801490e:	d036      	beq.n	801497e <_HandleIncomingPacket+0xce>
 8014910:	e026      	b.n	8014960 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8014912:	f000 fba7 	bl	8015064 <SEGGER_SYSVIEW_Start>
      break;
 8014916:	e037      	b.n	8014988 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8014918:	f000 fc5e 	bl	80151d8 <SEGGER_SYSVIEW_Stop>
      break;
 801491c:	e034      	b.n	8014988 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 801491e:	f000 fe37 	bl	8015590 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8014922:	e031      	b.n	8014988 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8014924:	f000 fdfc 	bl	8015520 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8014928:	e02e      	b.n	8014988 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 801492a:	f000 fc7b 	bl	8015224 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 801492e:	e02b      	b.n	8014988 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8014930:	f000 fff0 	bl	8015914 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8014934:	e028      	b.n	8014988 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8014936:	f000 ffcf 	bl	80158d8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 801493a:	e025      	b.n	8014988 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 801493c:	4b14      	ldr	r3, [pc, #80]	; (8014990 <_HandleIncomingPacket+0xe0>)
 801493e:	7e1b      	ldrb	r3, [r3, #24]
 8014940:	4618      	mov	r0, r3
 8014942:	1cfb      	adds	r3, r7, #3
 8014944:	2201      	movs	r2, #1
 8014946:	4619      	mov	r1, r3
 8014948:	f7ff fe00 	bl	801454c <SEGGER_RTT_ReadNoLock>
 801494c:	4603      	mov	r3, r0
 801494e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2b00      	cmp	r3, #0
 8014954:	dd15      	ble.n	8014982 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8014956:	78fb      	ldrb	r3, [r7, #3]
 8014958:	4618      	mov	r0, r3
 801495a:	f000 ff3d 	bl	80157d8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 801495e:	e010      	b.n	8014982 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8014960:	78fb      	ldrb	r3, [r7, #3]
 8014962:	b25b      	sxtb	r3, r3
 8014964:	2b00      	cmp	r3, #0
 8014966:	da0e      	bge.n	8014986 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8014968:	4b09      	ldr	r3, [pc, #36]	; (8014990 <_HandleIncomingPacket+0xe0>)
 801496a:	7e1b      	ldrb	r3, [r3, #24]
 801496c:	4618      	mov	r0, r3
 801496e:	1cfb      	adds	r3, r7, #3
 8014970:	2201      	movs	r2, #1
 8014972:	4619      	mov	r1, r3
 8014974:	f7ff fdea 	bl	801454c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8014978:	e005      	b.n	8014986 <_HandleIncomingPacket+0xd6>
    }
  }
 801497a:	bf00      	nop
 801497c:	e004      	b.n	8014988 <_HandleIncomingPacket+0xd8>
      break;
 801497e:	bf00      	nop
 8014980:	e002      	b.n	8014988 <_HandleIncomingPacket+0xd8>
      break;
 8014982:	bf00      	nop
 8014984:	e000      	b.n	8014988 <_HandleIncomingPacket+0xd8>
      break;
 8014986:	bf00      	nop
}
 8014988:	bf00      	nop
 801498a:	3708      	adds	r7, #8
 801498c:	46bd      	mov	sp, r7
 801498e:	bd80      	pop	{r7, pc}
 8014990:	2000ac44 	.word	0x2000ac44

08014994 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8014994:	b580      	push	{r7, lr}
 8014996:	b08c      	sub	sp, #48	; 0x30
 8014998:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 801499a:	2301      	movs	r3, #1
 801499c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 801499e:	1d3b      	adds	r3, r7, #4
 80149a0:	3301      	adds	r3, #1
 80149a2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80149a4:	69fb      	ldr	r3, [r7, #28]
 80149a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80149a8:	4b31      	ldr	r3, [pc, #196]	; (8014a70 <_TrySendOverflowPacket+0xdc>)
 80149aa:	695b      	ldr	r3, [r3, #20]
 80149ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80149ae:	e00b      	b.n	80149c8 <_TrySendOverflowPacket+0x34>
 80149b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149b2:	b2da      	uxtb	r2, r3
 80149b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149b6:	1c59      	adds	r1, r3, #1
 80149b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80149ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80149be:	b2d2      	uxtb	r2, r2
 80149c0:	701a      	strb	r2, [r3, #0]
 80149c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c4:	09db      	lsrs	r3, r3, #7
 80149c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80149c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ca:	2b7f      	cmp	r3, #127	; 0x7f
 80149cc:	d8f0      	bhi.n	80149b0 <_TrySendOverflowPacket+0x1c>
 80149ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149d0:	1c5a      	adds	r2, r3, #1
 80149d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80149d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80149d6:	b2d2      	uxtb	r2, r2
 80149d8:	701a      	strb	r2, [r3, #0]
 80149da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149dc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80149de:	4b25      	ldr	r3, [pc, #148]	; (8014a74 <_TrySendOverflowPacket+0xe0>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80149e4:	4b22      	ldr	r3, [pc, #136]	; (8014a70 <_TrySendOverflowPacket+0xdc>)
 80149e6:	68db      	ldr	r3, [r3, #12]
 80149e8:	69ba      	ldr	r2, [r7, #24]
 80149ea:	1ad3      	subs	r3, r2, r3
 80149ec:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80149ee:	69fb      	ldr	r3, [r7, #28]
 80149f0:	627b      	str	r3, [r7, #36]	; 0x24
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	623b      	str	r3, [r7, #32]
 80149f6:	e00b      	b.n	8014a10 <_TrySendOverflowPacket+0x7c>
 80149f8:	6a3b      	ldr	r3, [r7, #32]
 80149fa:	b2da      	uxtb	r2, r3
 80149fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149fe:	1c59      	adds	r1, r3, #1
 8014a00:	6279      	str	r1, [r7, #36]	; 0x24
 8014a02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014a06:	b2d2      	uxtb	r2, r2
 8014a08:	701a      	strb	r2, [r3, #0]
 8014a0a:	6a3b      	ldr	r3, [r7, #32]
 8014a0c:	09db      	lsrs	r3, r3, #7
 8014a0e:	623b      	str	r3, [r7, #32]
 8014a10:	6a3b      	ldr	r3, [r7, #32]
 8014a12:	2b7f      	cmp	r3, #127	; 0x7f
 8014a14:	d8f0      	bhi.n	80149f8 <_TrySendOverflowPacket+0x64>
 8014a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a18:	1c5a      	adds	r2, r3, #1
 8014a1a:	627a      	str	r2, [r7, #36]	; 0x24
 8014a1c:	6a3a      	ldr	r2, [r7, #32]
 8014a1e:	b2d2      	uxtb	r2, r2
 8014a20:	701a      	strb	r2, [r3, #0]
 8014a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a24:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8014a26:	4b12      	ldr	r3, [pc, #72]	; (8014a70 <_TrySendOverflowPacket+0xdc>)
 8014a28:	785b      	ldrb	r3, [r3, #1]
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	1d3b      	adds	r3, r7, #4
 8014a2e:	69fa      	ldr	r2, [r7, #28]
 8014a30:	1ad3      	subs	r3, r2, r3
 8014a32:	461a      	mov	r2, r3
 8014a34:	1d3b      	adds	r3, r7, #4
 8014a36:	4619      	mov	r1, r3
 8014a38:	f7eb fbca 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8014a40:	693b      	ldr	r3, [r7, #16]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d009      	beq.n	8014a5a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8014a46:	4a0a      	ldr	r2, [pc, #40]	; (8014a70 <_TrySendOverflowPacket+0xdc>)
 8014a48:	69bb      	ldr	r3, [r7, #24]
 8014a4a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8014a4c:	4b08      	ldr	r3, [pc, #32]	; (8014a70 <_TrySendOverflowPacket+0xdc>)
 8014a4e:	781b      	ldrb	r3, [r3, #0]
 8014a50:	3b01      	subs	r3, #1
 8014a52:	b2da      	uxtb	r2, r3
 8014a54:	4b06      	ldr	r3, [pc, #24]	; (8014a70 <_TrySendOverflowPacket+0xdc>)
 8014a56:	701a      	strb	r2, [r3, #0]
 8014a58:	e004      	b.n	8014a64 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8014a5a:	4b05      	ldr	r3, [pc, #20]	; (8014a70 <_TrySendOverflowPacket+0xdc>)
 8014a5c:	695b      	ldr	r3, [r3, #20]
 8014a5e:	3301      	adds	r3, #1
 8014a60:	4a03      	ldr	r2, [pc, #12]	; (8014a70 <_TrySendOverflowPacket+0xdc>)
 8014a62:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8014a64:	693b      	ldr	r3, [r7, #16]
}
 8014a66:	4618      	mov	r0, r3
 8014a68:	3730      	adds	r7, #48	; 0x30
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}
 8014a6e:	bf00      	nop
 8014a70:	2000ac44 	.word	0x2000ac44
 8014a74:	e0001004 	.word	0xe0001004

08014a78 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b08a      	sub	sp, #40	; 0x28
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	60f8      	str	r0, [r7, #12]
 8014a80:	60b9      	str	r1, [r7, #8]
 8014a82:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8014a84:	4b6c      	ldr	r3, [pc, #432]	; (8014c38 <_SendPacket+0x1c0>)
 8014a86:	781b      	ldrb	r3, [r3, #0]
 8014a88:	2b01      	cmp	r3, #1
 8014a8a:	d010      	beq.n	8014aae <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8014a8c:	4b6a      	ldr	r3, [pc, #424]	; (8014c38 <_SendPacket+0x1c0>)
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	f000 80a3 	beq.w	8014bdc <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8014a96:	4b68      	ldr	r3, [pc, #416]	; (8014c38 <_SendPacket+0x1c0>)
 8014a98:	781b      	ldrb	r3, [r3, #0]
 8014a9a:	2b02      	cmp	r3, #2
 8014a9c:	d109      	bne.n	8014ab2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8014a9e:	f7ff ff79 	bl	8014994 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8014aa2:	4b65      	ldr	r3, [pc, #404]	; (8014c38 <_SendPacket+0x1c0>)
 8014aa4:	781b      	ldrb	r3, [r3, #0]
 8014aa6:	2b01      	cmp	r3, #1
 8014aa8:	f040 809a 	bne.w	8014be0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8014aac:	e001      	b.n	8014ab2 <_SendPacket+0x3a>
    goto Send;
 8014aae:	bf00      	nop
 8014ab0:	e000      	b.n	8014ab4 <_SendPacket+0x3c>
Send:
 8014ab2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	2b1f      	cmp	r3, #31
 8014ab8:	d809      	bhi.n	8014ace <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8014aba:	4b5f      	ldr	r3, [pc, #380]	; (8014c38 <_SendPacket+0x1c0>)
 8014abc:	69da      	ldr	r2, [r3, #28]
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8014ac4:	f003 0301 	and.w	r3, r3, #1
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	f040 808b 	bne.w	8014be4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	2b17      	cmp	r3, #23
 8014ad2:	d807      	bhi.n	8014ae4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	3b01      	subs	r3, #1
 8014ad8:	60fb      	str	r3, [r7, #12]
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	b2da      	uxtb	r2, r3
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	701a      	strb	r2, [r3, #0]
 8014ae2:	e03d      	b.n	8014b60 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8014ae4:	68ba      	ldr	r2, [r7, #8]
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	1ad3      	subs	r3, r2, r3
 8014aea:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8014aec:	69fb      	ldr	r3, [r7, #28]
 8014aee:	2b7f      	cmp	r3, #127	; 0x7f
 8014af0:	d912      	bls.n	8014b18 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8014af2:	69fb      	ldr	r3, [r7, #28]
 8014af4:	09da      	lsrs	r2, r3, #7
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	3b01      	subs	r3, #1
 8014afa:	60fb      	str	r3, [r7, #12]
 8014afc:	b2d2      	uxtb	r2, r2
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8014b02:	69fb      	ldr	r3, [r7, #28]
 8014b04:	b2db      	uxtb	r3, r3
 8014b06:	68fa      	ldr	r2, [r7, #12]
 8014b08:	3a01      	subs	r2, #1
 8014b0a:	60fa      	str	r2, [r7, #12]
 8014b0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014b10:	b2da      	uxtb	r2, r3
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	701a      	strb	r2, [r3, #0]
 8014b16:	e006      	b.n	8014b26 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	3b01      	subs	r3, #1
 8014b1c:	60fb      	str	r3, [r7, #12]
 8014b1e:	69fb      	ldr	r3, [r7, #28]
 8014b20:	b2da      	uxtb	r2, r3
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	2b7f      	cmp	r3, #127	; 0x7f
 8014b2a:	d912      	bls.n	8014b52 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	09da      	lsrs	r2, r3, #7
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	3b01      	subs	r3, #1
 8014b34:	60fb      	str	r3, [r7, #12]
 8014b36:	b2d2      	uxtb	r2, r2
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	b2db      	uxtb	r3, r3
 8014b40:	68fa      	ldr	r2, [r7, #12]
 8014b42:	3a01      	subs	r2, #1
 8014b44:	60fa      	str	r2, [r7, #12]
 8014b46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014b4a:	b2da      	uxtb	r2, r3
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	701a      	strb	r2, [r3, #0]
 8014b50:	e006      	b.n	8014b60 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	3b01      	subs	r3, #1
 8014b56:	60fb      	str	r3, [r7, #12]
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	b2da      	uxtb	r2, r3
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8014b60:	4b36      	ldr	r3, [pc, #216]	; (8014c3c <_SendPacket+0x1c4>)
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8014b66:	4b34      	ldr	r3, [pc, #208]	; (8014c38 <_SendPacket+0x1c0>)
 8014b68:	68db      	ldr	r3, [r3, #12]
 8014b6a:	69ba      	ldr	r2, [r7, #24]
 8014b6c:	1ad3      	subs	r3, r2, r3
 8014b6e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	627b      	str	r3, [r7, #36]	; 0x24
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	623b      	str	r3, [r7, #32]
 8014b78:	e00b      	b.n	8014b92 <_SendPacket+0x11a>
 8014b7a:	6a3b      	ldr	r3, [r7, #32]
 8014b7c:	b2da      	uxtb	r2, r3
 8014b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b80:	1c59      	adds	r1, r3, #1
 8014b82:	6279      	str	r1, [r7, #36]	; 0x24
 8014b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014b88:	b2d2      	uxtb	r2, r2
 8014b8a:	701a      	strb	r2, [r3, #0]
 8014b8c:	6a3b      	ldr	r3, [r7, #32]
 8014b8e:	09db      	lsrs	r3, r3, #7
 8014b90:	623b      	str	r3, [r7, #32]
 8014b92:	6a3b      	ldr	r3, [r7, #32]
 8014b94:	2b7f      	cmp	r3, #127	; 0x7f
 8014b96:	d8f0      	bhi.n	8014b7a <_SendPacket+0x102>
 8014b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b9a:	1c5a      	adds	r2, r3, #1
 8014b9c:	627a      	str	r2, [r7, #36]	; 0x24
 8014b9e:	6a3a      	ldr	r2, [r7, #32]
 8014ba0:	b2d2      	uxtb	r2, r2
 8014ba2:	701a      	strb	r2, [r3, #0]
 8014ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8014ba8:	4b23      	ldr	r3, [pc, #140]	; (8014c38 <_SendPacket+0x1c0>)
 8014baa:	785b      	ldrb	r3, [r3, #1]
 8014bac:	4618      	mov	r0, r3
 8014bae:	68ba      	ldr	r2, [r7, #8]
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	1ad3      	subs	r3, r2, r3
 8014bb4:	461a      	mov	r2, r3
 8014bb6:	68f9      	ldr	r1, [r7, #12]
 8014bb8:	f7eb fb0a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8014bc0:	693b      	ldr	r3, [r7, #16]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d003      	beq.n	8014bce <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8014bc6:	4a1c      	ldr	r2, [pc, #112]	; (8014c38 <_SendPacket+0x1c0>)
 8014bc8:	69bb      	ldr	r3, [r7, #24]
 8014bca:	60d3      	str	r3, [r2, #12]
 8014bcc:	e00b      	b.n	8014be6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8014bce:	4b1a      	ldr	r3, [pc, #104]	; (8014c38 <_SendPacket+0x1c0>)
 8014bd0:	781b      	ldrb	r3, [r3, #0]
 8014bd2:	3301      	adds	r3, #1
 8014bd4:	b2da      	uxtb	r2, r3
 8014bd6:	4b18      	ldr	r3, [pc, #96]	; (8014c38 <_SendPacket+0x1c0>)
 8014bd8:	701a      	strb	r2, [r3, #0]
 8014bda:	e004      	b.n	8014be6 <_SendPacket+0x16e>
    goto SendDone;
 8014bdc:	bf00      	nop
 8014bde:	e002      	b.n	8014be6 <_SendPacket+0x16e>
      goto SendDone;
 8014be0:	bf00      	nop
 8014be2:	e000      	b.n	8014be6 <_SendPacket+0x16e>
      goto SendDone;
 8014be4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8014be6:	4b14      	ldr	r3, [pc, #80]	; (8014c38 <_SendPacket+0x1c0>)
 8014be8:	7e1b      	ldrb	r3, [r3, #24]
 8014bea:	4619      	mov	r1, r3
 8014bec:	4a14      	ldr	r2, [pc, #80]	; (8014c40 <_SendPacket+0x1c8>)
 8014bee:	460b      	mov	r3, r1
 8014bf0:	005b      	lsls	r3, r3, #1
 8014bf2:	440b      	add	r3, r1
 8014bf4:	00db      	lsls	r3, r3, #3
 8014bf6:	4413      	add	r3, r2
 8014bf8:	336c      	adds	r3, #108	; 0x6c
 8014bfa:	681a      	ldr	r2, [r3, #0]
 8014bfc:	4b0e      	ldr	r3, [pc, #56]	; (8014c38 <_SendPacket+0x1c0>)
 8014bfe:	7e1b      	ldrb	r3, [r3, #24]
 8014c00:	4618      	mov	r0, r3
 8014c02:	490f      	ldr	r1, [pc, #60]	; (8014c40 <_SendPacket+0x1c8>)
 8014c04:	4603      	mov	r3, r0
 8014c06:	005b      	lsls	r3, r3, #1
 8014c08:	4403      	add	r3, r0
 8014c0a:	00db      	lsls	r3, r3, #3
 8014c0c:	440b      	add	r3, r1
 8014c0e:	3370      	adds	r3, #112	; 0x70
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d00b      	beq.n	8014c2e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8014c16:	4b08      	ldr	r3, [pc, #32]	; (8014c38 <_SendPacket+0x1c0>)
 8014c18:	789b      	ldrb	r3, [r3, #2]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d107      	bne.n	8014c2e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8014c1e:	4b06      	ldr	r3, [pc, #24]	; (8014c38 <_SendPacket+0x1c0>)
 8014c20:	2201      	movs	r2, #1
 8014c22:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8014c24:	f7ff fe44 	bl	80148b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8014c28:	4b03      	ldr	r3, [pc, #12]	; (8014c38 <_SendPacket+0x1c0>)
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8014c2e:	bf00      	nop
 8014c30:	3728      	adds	r7, #40	; 0x28
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}
 8014c36:	bf00      	nop
 8014c38:	2000ac44 	.word	0x2000ac44
 8014c3c:	e0001004 	.word	0xe0001004
 8014c40:	2000de58 	.word	0x2000de58

08014c44 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b086      	sub	sp, #24
 8014c48:	af02      	add	r7, sp, #8
 8014c4a:	60f8      	str	r0, [r7, #12]
 8014c4c:	60b9      	str	r1, [r7, #8]
 8014c4e:	607a      	str	r2, [r7, #4]
 8014c50:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8014c52:	2300      	movs	r3, #0
 8014c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014c58:	4917      	ldr	r1, [pc, #92]	; (8014cb8 <SEGGER_SYSVIEW_Init+0x74>)
 8014c5a:	4818      	ldr	r0, [pc, #96]	; (8014cbc <SEGGER_SYSVIEW_Init+0x78>)
 8014c5c:	f7ff fcfc 	bl	8014658 <SEGGER_RTT_AllocUpBuffer>
 8014c60:	4603      	mov	r3, r0
 8014c62:	b2da      	uxtb	r2, r3
 8014c64:	4b16      	ldr	r3, [pc, #88]	; (8014cc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8014c66:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8014c68:	4b15      	ldr	r3, [pc, #84]	; (8014cc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8014c6a:	785a      	ldrb	r2, [r3, #1]
 8014c6c:	4b14      	ldr	r3, [pc, #80]	; (8014cc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8014c6e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8014c70:	4b13      	ldr	r3, [pc, #76]	; (8014cc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8014c72:	7e1b      	ldrb	r3, [r3, #24]
 8014c74:	4618      	mov	r0, r3
 8014c76:	2300      	movs	r3, #0
 8014c78:	9300      	str	r3, [sp, #0]
 8014c7a:	2308      	movs	r3, #8
 8014c7c:	4a11      	ldr	r2, [pc, #68]	; (8014cc4 <SEGGER_SYSVIEW_Init+0x80>)
 8014c7e:	490f      	ldr	r1, [pc, #60]	; (8014cbc <SEGGER_SYSVIEW_Init+0x78>)
 8014c80:	f7ff fd6e 	bl	8014760 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8014c84:	4b0e      	ldr	r3, [pc, #56]	; (8014cc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8014c86:	2200      	movs	r2, #0
 8014c88:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8014c8a:	4b0f      	ldr	r3, [pc, #60]	; (8014cc8 <SEGGER_SYSVIEW_Init+0x84>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	4a0c      	ldr	r2, [pc, #48]	; (8014cc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8014c90:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8014c92:	4a0b      	ldr	r2, [pc, #44]	; (8014cc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8014c98:	4a09      	ldr	r2, [pc, #36]	; (8014cc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8014c9e:	4a08      	ldr	r2, [pc, #32]	; (8014cc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8014ca0:	68bb      	ldr	r3, [r7, #8]
 8014ca2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8014ca4:	4a06      	ldr	r2, [pc, #24]	; (8014cc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8014ca6:	683b      	ldr	r3, [r7, #0]
 8014ca8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8014caa:	4b05      	ldr	r3, [pc, #20]	; (8014cc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8014cac:	2200      	movs	r2, #0
 8014cae:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8014cb0:	bf00      	nop
 8014cb2:	3710      	adds	r7, #16
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}
 8014cb8:	2000a83c 	.word	0x2000a83c
 8014cbc:	08016510 	.word	0x08016510
 8014cc0:	2000ac44 	.word	0x2000ac44
 8014cc4:	2000ac3c 	.word	0x2000ac3c
 8014cc8:	e0001004 	.word	0xe0001004

08014ccc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8014ccc:	b480      	push	{r7}
 8014cce:	b083      	sub	sp, #12
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8014cd4:	4a04      	ldr	r2, [pc, #16]	; (8014ce8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6113      	str	r3, [r2, #16]
}
 8014cda:	bf00      	nop
 8014cdc:	370c      	adds	r7, #12
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce4:	4770      	bx	lr
 8014ce6:	bf00      	nop
 8014ce8:	2000ac44 	.word	0x2000ac44

08014cec <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b084      	sub	sp, #16
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8014cf4:	f3ef 8311 	mrs	r3, BASEPRI
 8014cf8:	f04f 0120 	mov.w	r1, #32
 8014cfc:	f381 8811 	msr	BASEPRI, r1
 8014d00:	60fb      	str	r3, [r7, #12]
 8014d02:	4808      	ldr	r0, [pc, #32]	; (8014d24 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8014d04:	f7ff fdc8 	bl	8014898 <_PreparePacket>
 8014d08:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8014d0a:	687a      	ldr	r2, [r7, #4]
 8014d0c:	68b9      	ldr	r1, [r7, #8]
 8014d0e:	68b8      	ldr	r0, [r7, #8]
 8014d10:	f7ff feb2 	bl	8014a78 <_SendPacket>
  RECORD_END();
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	f383 8811 	msr	BASEPRI, r3
}
 8014d1a:	bf00      	nop
 8014d1c:	3710      	adds	r7, #16
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd80      	pop	{r7, pc}
 8014d22:	bf00      	nop
 8014d24:	2000ac74 	.word	0x2000ac74

08014d28 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b088      	sub	sp, #32
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
 8014d30:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8014d32:	f3ef 8311 	mrs	r3, BASEPRI
 8014d36:	f04f 0120 	mov.w	r1, #32
 8014d3a:	f381 8811 	msr	BASEPRI, r1
 8014d3e:	617b      	str	r3, [r7, #20]
 8014d40:	4816      	ldr	r0, [pc, #88]	; (8014d9c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8014d42:	f7ff fda9 	bl	8014898 <_PreparePacket>
 8014d46:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8014d48:	693b      	ldr	r3, [r7, #16]
 8014d4a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	61fb      	str	r3, [r7, #28]
 8014d50:	683b      	ldr	r3, [r7, #0]
 8014d52:	61bb      	str	r3, [r7, #24]
 8014d54:	e00b      	b.n	8014d6e <SEGGER_SYSVIEW_RecordU32+0x46>
 8014d56:	69bb      	ldr	r3, [r7, #24]
 8014d58:	b2da      	uxtb	r2, r3
 8014d5a:	69fb      	ldr	r3, [r7, #28]
 8014d5c:	1c59      	adds	r1, r3, #1
 8014d5e:	61f9      	str	r1, [r7, #28]
 8014d60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014d64:	b2d2      	uxtb	r2, r2
 8014d66:	701a      	strb	r2, [r3, #0]
 8014d68:	69bb      	ldr	r3, [r7, #24]
 8014d6a:	09db      	lsrs	r3, r3, #7
 8014d6c:	61bb      	str	r3, [r7, #24]
 8014d6e:	69bb      	ldr	r3, [r7, #24]
 8014d70:	2b7f      	cmp	r3, #127	; 0x7f
 8014d72:	d8f0      	bhi.n	8014d56 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8014d74:	69fb      	ldr	r3, [r7, #28]
 8014d76:	1c5a      	adds	r2, r3, #1
 8014d78:	61fa      	str	r2, [r7, #28]
 8014d7a:	69ba      	ldr	r2, [r7, #24]
 8014d7c:	b2d2      	uxtb	r2, r2
 8014d7e:	701a      	strb	r2, [r3, #0]
 8014d80:	69fb      	ldr	r3, [r7, #28]
 8014d82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8014d84:	687a      	ldr	r2, [r7, #4]
 8014d86:	68f9      	ldr	r1, [r7, #12]
 8014d88:	6938      	ldr	r0, [r7, #16]
 8014d8a:	f7ff fe75 	bl	8014a78 <_SendPacket>
  RECORD_END();
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	f383 8811 	msr	BASEPRI, r3
}
 8014d94:	bf00      	nop
 8014d96:	3720      	adds	r7, #32
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}
 8014d9c:	2000ac74 	.word	0x2000ac74

08014da0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b08c      	sub	sp, #48	; 0x30
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	60f8      	str	r0, [r7, #12]
 8014da8:	60b9      	str	r1, [r7, #8]
 8014daa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8014dac:	f3ef 8311 	mrs	r3, BASEPRI
 8014db0:	f04f 0120 	mov.w	r1, #32
 8014db4:	f381 8811 	msr	BASEPRI, r1
 8014db8:	61fb      	str	r3, [r7, #28]
 8014dba:	4825      	ldr	r0, [pc, #148]	; (8014e50 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8014dbc:	f7ff fd6c 	bl	8014898 <_PreparePacket>
 8014dc0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8014dc2:	69bb      	ldr	r3, [r7, #24]
 8014dc4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8014dc6:	697b      	ldr	r3, [r7, #20]
 8014dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014dca:	68bb      	ldr	r3, [r7, #8]
 8014dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8014dce:	e00b      	b.n	8014de8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8014dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dd2:	b2da      	uxtb	r2, r3
 8014dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dd6:	1c59      	adds	r1, r3, #1
 8014dd8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8014dda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014dde:	b2d2      	uxtb	r2, r2
 8014de0:	701a      	strb	r2, [r3, #0]
 8014de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de4:	09db      	lsrs	r3, r3, #7
 8014de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8014de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dea:	2b7f      	cmp	r3, #127	; 0x7f
 8014dec:	d8f0      	bhi.n	8014dd0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8014dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014df0:	1c5a      	adds	r2, r3, #1
 8014df2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014df6:	b2d2      	uxtb	r2, r2
 8014df8:	701a      	strb	r2, [r3, #0]
 8014dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dfc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8014dfe:	697b      	ldr	r3, [r7, #20]
 8014e00:	627b      	str	r3, [r7, #36]	; 0x24
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	623b      	str	r3, [r7, #32]
 8014e06:	e00b      	b.n	8014e20 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8014e08:	6a3b      	ldr	r3, [r7, #32]
 8014e0a:	b2da      	uxtb	r2, r3
 8014e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e0e:	1c59      	adds	r1, r3, #1
 8014e10:	6279      	str	r1, [r7, #36]	; 0x24
 8014e12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014e16:	b2d2      	uxtb	r2, r2
 8014e18:	701a      	strb	r2, [r3, #0]
 8014e1a:	6a3b      	ldr	r3, [r7, #32]
 8014e1c:	09db      	lsrs	r3, r3, #7
 8014e1e:	623b      	str	r3, [r7, #32]
 8014e20:	6a3b      	ldr	r3, [r7, #32]
 8014e22:	2b7f      	cmp	r3, #127	; 0x7f
 8014e24:	d8f0      	bhi.n	8014e08 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8014e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e28:	1c5a      	adds	r2, r3, #1
 8014e2a:	627a      	str	r2, [r7, #36]	; 0x24
 8014e2c:	6a3a      	ldr	r2, [r7, #32]
 8014e2e:	b2d2      	uxtb	r2, r2
 8014e30:	701a      	strb	r2, [r3, #0]
 8014e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e34:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8014e36:	68fa      	ldr	r2, [r7, #12]
 8014e38:	6979      	ldr	r1, [r7, #20]
 8014e3a:	69b8      	ldr	r0, [r7, #24]
 8014e3c:	f7ff fe1c 	bl	8014a78 <_SendPacket>
  RECORD_END();
 8014e40:	69fb      	ldr	r3, [r7, #28]
 8014e42:	f383 8811 	msr	BASEPRI, r3
}
 8014e46:	bf00      	nop
 8014e48:	3730      	adds	r7, #48	; 0x30
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd80      	pop	{r7, pc}
 8014e4e:	bf00      	nop
 8014e50:	2000ac74 	.word	0x2000ac74

08014e54 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b08e      	sub	sp, #56	; 0x38
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	60f8      	str	r0, [r7, #12]
 8014e5c:	60b9      	str	r1, [r7, #8]
 8014e5e:	607a      	str	r2, [r7, #4]
 8014e60:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8014e62:	f3ef 8311 	mrs	r3, BASEPRI
 8014e66:	f04f 0120 	mov.w	r1, #32
 8014e6a:	f381 8811 	msr	BASEPRI, r1
 8014e6e:	61fb      	str	r3, [r7, #28]
 8014e70:	4832      	ldr	r0, [pc, #200]	; (8014f3c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8014e72:	f7ff fd11 	bl	8014898 <_PreparePacket>
 8014e76:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8014e78:	69bb      	ldr	r3, [r7, #24]
 8014e7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8014e7c:	697b      	ldr	r3, [r7, #20]
 8014e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8014e80:	68bb      	ldr	r3, [r7, #8]
 8014e82:	633b      	str	r3, [r7, #48]	; 0x30
 8014e84:	e00b      	b.n	8014e9e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8014e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e88:	b2da      	uxtb	r2, r3
 8014e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e8c:	1c59      	adds	r1, r3, #1
 8014e8e:	6379      	str	r1, [r7, #52]	; 0x34
 8014e90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014e94:	b2d2      	uxtb	r2, r2
 8014e96:	701a      	strb	r2, [r3, #0]
 8014e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e9a:	09db      	lsrs	r3, r3, #7
 8014e9c:	633b      	str	r3, [r7, #48]	; 0x30
 8014e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8014ea2:	d8f0      	bhi.n	8014e86 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8014ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ea6:	1c5a      	adds	r2, r3, #1
 8014ea8:	637a      	str	r2, [r7, #52]	; 0x34
 8014eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014eac:	b2d2      	uxtb	r2, r2
 8014eae:	701a      	strb	r2, [r3, #0]
 8014eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014eb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8014eb4:	697b      	ldr	r3, [r7, #20]
 8014eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ebc:	e00b      	b.n	8014ed6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8014ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ec0:	b2da      	uxtb	r2, r3
 8014ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ec4:	1c59      	adds	r1, r3, #1
 8014ec6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8014ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014ecc:	b2d2      	uxtb	r2, r2
 8014ece:	701a      	strb	r2, [r3, #0]
 8014ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ed2:	09db      	lsrs	r3, r3, #7
 8014ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8014eda:	d8f0      	bhi.n	8014ebe <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8014edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ede:	1c5a      	adds	r2, r3, #1
 8014ee0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ee4:	b2d2      	uxtb	r2, r2
 8014ee6:	701a      	strb	r2, [r3, #0]
 8014ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	627b      	str	r3, [r7, #36]	; 0x24
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	623b      	str	r3, [r7, #32]
 8014ef4:	e00b      	b.n	8014f0e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8014ef6:	6a3b      	ldr	r3, [r7, #32]
 8014ef8:	b2da      	uxtb	r2, r3
 8014efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014efc:	1c59      	adds	r1, r3, #1
 8014efe:	6279      	str	r1, [r7, #36]	; 0x24
 8014f00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014f04:	b2d2      	uxtb	r2, r2
 8014f06:	701a      	strb	r2, [r3, #0]
 8014f08:	6a3b      	ldr	r3, [r7, #32]
 8014f0a:	09db      	lsrs	r3, r3, #7
 8014f0c:	623b      	str	r3, [r7, #32]
 8014f0e:	6a3b      	ldr	r3, [r7, #32]
 8014f10:	2b7f      	cmp	r3, #127	; 0x7f
 8014f12:	d8f0      	bhi.n	8014ef6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8014f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f16:	1c5a      	adds	r2, r3, #1
 8014f18:	627a      	str	r2, [r7, #36]	; 0x24
 8014f1a:	6a3a      	ldr	r2, [r7, #32]
 8014f1c:	b2d2      	uxtb	r2, r2
 8014f1e:	701a      	strb	r2, [r3, #0]
 8014f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f22:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8014f24:	68fa      	ldr	r2, [r7, #12]
 8014f26:	6979      	ldr	r1, [r7, #20]
 8014f28:	69b8      	ldr	r0, [r7, #24]
 8014f2a:	f7ff fda5 	bl	8014a78 <_SendPacket>
  RECORD_END();
 8014f2e:	69fb      	ldr	r3, [r7, #28]
 8014f30:	f383 8811 	msr	BASEPRI, r3
}
 8014f34:	bf00      	nop
 8014f36:	3738      	adds	r7, #56	; 0x38
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}
 8014f3c:	2000ac74 	.word	0x2000ac74

08014f40 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b090      	sub	sp, #64	; 0x40
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	60f8      	str	r0, [r7, #12]
 8014f48:	60b9      	str	r1, [r7, #8]
 8014f4a:	607a      	str	r2, [r7, #4]
 8014f4c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8014f4e:	f3ef 8311 	mrs	r3, BASEPRI
 8014f52:	f04f 0120 	mov.w	r1, #32
 8014f56:	f381 8811 	msr	BASEPRI, r1
 8014f5a:	61fb      	str	r3, [r7, #28]
 8014f5c:	4840      	ldr	r0, [pc, #256]	; (8015060 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8014f5e:	f7ff fc9b 	bl	8014898 <_PreparePacket>
 8014f62:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8014f64:	69bb      	ldr	r3, [r7, #24]
 8014f66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014f6c:	68bb      	ldr	r3, [r7, #8]
 8014f6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8014f70:	e00b      	b.n	8014f8a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8014f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f74:	b2da      	uxtb	r2, r3
 8014f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f78:	1c59      	adds	r1, r3, #1
 8014f7a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8014f7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014f80:	b2d2      	uxtb	r2, r2
 8014f82:	701a      	strb	r2, [r3, #0]
 8014f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f86:	09db      	lsrs	r3, r3, #7
 8014f88:	63bb      	str	r3, [r7, #56]	; 0x38
 8014f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f8c:	2b7f      	cmp	r3, #127	; 0x7f
 8014f8e:	d8f0      	bhi.n	8014f72 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8014f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f92:	1c5a      	adds	r2, r3, #1
 8014f94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8014f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014f98:	b2d2      	uxtb	r2, r2
 8014f9a:	701a      	strb	r2, [r3, #0]
 8014f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8014fa0:	697b      	ldr	r3, [r7, #20]
 8014fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	633b      	str	r3, [r7, #48]	; 0x30
 8014fa8:	e00b      	b.n	8014fc2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8014faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fac:	b2da      	uxtb	r2, r3
 8014fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fb0:	1c59      	adds	r1, r3, #1
 8014fb2:	6379      	str	r1, [r7, #52]	; 0x34
 8014fb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014fb8:	b2d2      	uxtb	r2, r2
 8014fba:	701a      	strb	r2, [r3, #0]
 8014fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fbe:	09db      	lsrs	r3, r3, #7
 8014fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8014fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fc4:	2b7f      	cmp	r3, #127	; 0x7f
 8014fc6:	d8f0      	bhi.n	8014faa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8014fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fca:	1c5a      	adds	r2, r3, #1
 8014fcc:	637a      	str	r2, [r7, #52]	; 0x34
 8014fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014fd0:	b2d2      	uxtb	r2, r2
 8014fd2:	701a      	strb	r2, [r3, #0]
 8014fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8014fd8:	697b      	ldr	r3, [r7, #20]
 8014fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8014fe0:	e00b      	b.n	8014ffa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8014fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fe4:	b2da      	uxtb	r2, r3
 8014fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fe8:	1c59      	adds	r1, r3, #1
 8014fea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8014fec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8014ff0:	b2d2      	uxtb	r2, r2
 8014ff2:	701a      	strb	r2, [r3, #0]
 8014ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ff6:	09db      	lsrs	r3, r3, #7
 8014ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8014ffe:	d8f0      	bhi.n	8014fe2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8015000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015002:	1c5a      	adds	r2, r3, #1
 8015004:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015008:	b2d2      	uxtb	r2, r2
 801500a:	701a      	strb	r2, [r3, #0]
 801500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801500e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8015010:	697b      	ldr	r3, [r7, #20]
 8015012:	627b      	str	r3, [r7, #36]	; 0x24
 8015014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015016:	623b      	str	r3, [r7, #32]
 8015018:	e00b      	b.n	8015032 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 801501a:	6a3b      	ldr	r3, [r7, #32]
 801501c:	b2da      	uxtb	r2, r3
 801501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015020:	1c59      	adds	r1, r3, #1
 8015022:	6279      	str	r1, [r7, #36]	; 0x24
 8015024:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015028:	b2d2      	uxtb	r2, r2
 801502a:	701a      	strb	r2, [r3, #0]
 801502c:	6a3b      	ldr	r3, [r7, #32]
 801502e:	09db      	lsrs	r3, r3, #7
 8015030:	623b      	str	r3, [r7, #32]
 8015032:	6a3b      	ldr	r3, [r7, #32]
 8015034:	2b7f      	cmp	r3, #127	; 0x7f
 8015036:	d8f0      	bhi.n	801501a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8015038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503a:	1c5a      	adds	r2, r3, #1
 801503c:	627a      	str	r2, [r7, #36]	; 0x24
 801503e:	6a3a      	ldr	r2, [r7, #32]
 8015040:	b2d2      	uxtb	r2, r2
 8015042:	701a      	strb	r2, [r3, #0]
 8015044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015046:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8015048:	68fa      	ldr	r2, [r7, #12]
 801504a:	6979      	ldr	r1, [r7, #20]
 801504c:	69b8      	ldr	r0, [r7, #24]
 801504e:	f7ff fd13 	bl	8014a78 <_SendPacket>
  RECORD_END();
 8015052:	69fb      	ldr	r3, [r7, #28]
 8015054:	f383 8811 	msr	BASEPRI, r3
}
 8015058:	bf00      	nop
 801505a:	3740      	adds	r7, #64	; 0x40
 801505c:	46bd      	mov	sp, r7
 801505e:	bd80      	pop	{r7, pc}
 8015060:	2000ac74 	.word	0x2000ac74

08015064 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8015064:	b580      	push	{r7, lr}
 8015066:	b08c      	sub	sp, #48	; 0x30
 8015068:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 801506a:	4b58      	ldr	r3, [pc, #352]	; (80151cc <SEGGER_SYSVIEW_Start+0x168>)
 801506c:	2201      	movs	r2, #1
 801506e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8015070:	f3ef 8311 	mrs	r3, BASEPRI
 8015074:	f04f 0120 	mov.w	r1, #32
 8015078:	f381 8811 	msr	BASEPRI, r1
 801507c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 801507e:	4b53      	ldr	r3, [pc, #332]	; (80151cc <SEGGER_SYSVIEW_Start+0x168>)
 8015080:	785b      	ldrb	r3, [r3, #1]
 8015082:	220a      	movs	r2, #10
 8015084:	4952      	ldr	r1, [pc, #328]	; (80151d0 <SEGGER_SYSVIEW_Start+0x16c>)
 8015086:	4618      	mov	r0, r3
 8015088:	f7eb f8a2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8015092:	200a      	movs	r0, #10
 8015094:	f7ff fe2a 	bl	8014cec <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8015098:	f3ef 8311 	mrs	r3, BASEPRI
 801509c:	f04f 0120 	mov.w	r1, #32
 80150a0:	f381 8811 	msr	BASEPRI, r1
 80150a4:	60bb      	str	r3, [r7, #8]
 80150a6:	484b      	ldr	r0, [pc, #300]	; (80151d4 <SEGGER_SYSVIEW_Start+0x170>)
 80150a8:	f7ff fbf6 	bl	8014898 <_PreparePacket>
 80150ac:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80150b2:	683b      	ldr	r3, [r7, #0]
 80150b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80150b6:	4b45      	ldr	r3, [pc, #276]	; (80151cc <SEGGER_SYSVIEW_Start+0x168>)
 80150b8:	685b      	ldr	r3, [r3, #4]
 80150ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80150bc:	e00b      	b.n	80150d6 <SEGGER_SYSVIEW_Start+0x72>
 80150be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150c0:	b2da      	uxtb	r2, r3
 80150c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150c4:	1c59      	adds	r1, r3, #1
 80150c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80150c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80150cc:	b2d2      	uxtb	r2, r2
 80150ce:	701a      	strb	r2, [r3, #0]
 80150d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150d2:	09db      	lsrs	r3, r3, #7
 80150d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80150d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150d8:	2b7f      	cmp	r3, #127	; 0x7f
 80150da:	d8f0      	bhi.n	80150be <SEGGER_SYSVIEW_Start+0x5a>
 80150dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150de:	1c5a      	adds	r2, r3, #1
 80150e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80150e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150e4:	b2d2      	uxtb	r2, r2
 80150e6:	701a      	strb	r2, [r3, #0]
 80150e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150ea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	627b      	str	r3, [r7, #36]	; 0x24
 80150f0:	4b36      	ldr	r3, [pc, #216]	; (80151cc <SEGGER_SYSVIEW_Start+0x168>)
 80150f2:	689b      	ldr	r3, [r3, #8]
 80150f4:	623b      	str	r3, [r7, #32]
 80150f6:	e00b      	b.n	8015110 <SEGGER_SYSVIEW_Start+0xac>
 80150f8:	6a3b      	ldr	r3, [r7, #32]
 80150fa:	b2da      	uxtb	r2, r3
 80150fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150fe:	1c59      	adds	r1, r3, #1
 8015100:	6279      	str	r1, [r7, #36]	; 0x24
 8015102:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015106:	b2d2      	uxtb	r2, r2
 8015108:	701a      	strb	r2, [r3, #0]
 801510a:	6a3b      	ldr	r3, [r7, #32]
 801510c:	09db      	lsrs	r3, r3, #7
 801510e:	623b      	str	r3, [r7, #32]
 8015110:	6a3b      	ldr	r3, [r7, #32]
 8015112:	2b7f      	cmp	r3, #127	; 0x7f
 8015114:	d8f0      	bhi.n	80150f8 <SEGGER_SYSVIEW_Start+0x94>
 8015116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015118:	1c5a      	adds	r2, r3, #1
 801511a:	627a      	str	r2, [r7, #36]	; 0x24
 801511c:	6a3a      	ldr	r2, [r7, #32]
 801511e:	b2d2      	uxtb	r2, r2
 8015120:	701a      	strb	r2, [r3, #0]
 8015122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015124:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	61fb      	str	r3, [r7, #28]
 801512a:	4b28      	ldr	r3, [pc, #160]	; (80151cc <SEGGER_SYSVIEW_Start+0x168>)
 801512c:	691b      	ldr	r3, [r3, #16]
 801512e:	61bb      	str	r3, [r7, #24]
 8015130:	e00b      	b.n	801514a <SEGGER_SYSVIEW_Start+0xe6>
 8015132:	69bb      	ldr	r3, [r7, #24]
 8015134:	b2da      	uxtb	r2, r3
 8015136:	69fb      	ldr	r3, [r7, #28]
 8015138:	1c59      	adds	r1, r3, #1
 801513a:	61f9      	str	r1, [r7, #28]
 801513c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015140:	b2d2      	uxtb	r2, r2
 8015142:	701a      	strb	r2, [r3, #0]
 8015144:	69bb      	ldr	r3, [r7, #24]
 8015146:	09db      	lsrs	r3, r3, #7
 8015148:	61bb      	str	r3, [r7, #24]
 801514a:	69bb      	ldr	r3, [r7, #24]
 801514c:	2b7f      	cmp	r3, #127	; 0x7f
 801514e:	d8f0      	bhi.n	8015132 <SEGGER_SYSVIEW_Start+0xce>
 8015150:	69fb      	ldr	r3, [r7, #28]
 8015152:	1c5a      	adds	r2, r3, #1
 8015154:	61fa      	str	r2, [r7, #28]
 8015156:	69ba      	ldr	r2, [r7, #24]
 8015158:	b2d2      	uxtb	r2, r2
 801515a:	701a      	strb	r2, [r3, #0]
 801515c:	69fb      	ldr	r3, [r7, #28]
 801515e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8015160:	683b      	ldr	r3, [r7, #0]
 8015162:	617b      	str	r3, [r7, #20]
 8015164:	2300      	movs	r3, #0
 8015166:	613b      	str	r3, [r7, #16]
 8015168:	e00b      	b.n	8015182 <SEGGER_SYSVIEW_Start+0x11e>
 801516a:	693b      	ldr	r3, [r7, #16]
 801516c:	b2da      	uxtb	r2, r3
 801516e:	697b      	ldr	r3, [r7, #20]
 8015170:	1c59      	adds	r1, r3, #1
 8015172:	6179      	str	r1, [r7, #20]
 8015174:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015178:	b2d2      	uxtb	r2, r2
 801517a:	701a      	strb	r2, [r3, #0]
 801517c:	693b      	ldr	r3, [r7, #16]
 801517e:	09db      	lsrs	r3, r3, #7
 8015180:	613b      	str	r3, [r7, #16]
 8015182:	693b      	ldr	r3, [r7, #16]
 8015184:	2b7f      	cmp	r3, #127	; 0x7f
 8015186:	d8f0      	bhi.n	801516a <SEGGER_SYSVIEW_Start+0x106>
 8015188:	697b      	ldr	r3, [r7, #20]
 801518a:	1c5a      	adds	r2, r3, #1
 801518c:	617a      	str	r2, [r7, #20]
 801518e:	693a      	ldr	r2, [r7, #16]
 8015190:	b2d2      	uxtb	r2, r2
 8015192:	701a      	strb	r2, [r3, #0]
 8015194:	697b      	ldr	r3, [r7, #20]
 8015196:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8015198:	2218      	movs	r2, #24
 801519a:	6839      	ldr	r1, [r7, #0]
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f7ff fc6b 	bl	8014a78 <_SendPacket>
      RECORD_END();
 80151a2:	68bb      	ldr	r3, [r7, #8]
 80151a4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80151a8:	4b08      	ldr	r3, [pc, #32]	; (80151cc <SEGGER_SYSVIEW_Start+0x168>)
 80151aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d002      	beq.n	80151b6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80151b0:	4b06      	ldr	r3, [pc, #24]	; (80151cc <SEGGER_SYSVIEW_Start+0x168>)
 80151b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151b4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80151b6:	f000 f9eb 	bl	8015590 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80151ba:	f000 f9b1 	bl	8015520 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80151be:	f000 fba9 	bl	8015914 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80151c2:	bf00      	nop
 80151c4:	3730      	adds	r7, #48	; 0x30
 80151c6:	46bd      	mov	sp, r7
 80151c8:	bd80      	pop	{r7, pc}
 80151ca:	bf00      	nop
 80151cc:	2000ac44 	.word	0x2000ac44
 80151d0:	08016710 	.word	0x08016710
 80151d4:	2000ac74 	.word	0x2000ac74

080151d8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80151d8:	b580      	push	{r7, lr}
 80151da:	b082      	sub	sp, #8
 80151dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80151de:	f3ef 8311 	mrs	r3, BASEPRI
 80151e2:	f04f 0120 	mov.w	r1, #32
 80151e6:	f381 8811 	msr	BASEPRI, r1
 80151ea:	607b      	str	r3, [r7, #4]
 80151ec:	480b      	ldr	r0, [pc, #44]	; (801521c <SEGGER_SYSVIEW_Stop+0x44>)
 80151ee:	f7ff fb53 	bl	8014898 <_PreparePacket>
 80151f2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80151f4:	4b0a      	ldr	r3, [pc, #40]	; (8015220 <SEGGER_SYSVIEW_Stop+0x48>)
 80151f6:	781b      	ldrb	r3, [r3, #0]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d007      	beq.n	801520c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80151fc:	220b      	movs	r2, #11
 80151fe:	6839      	ldr	r1, [r7, #0]
 8015200:	6838      	ldr	r0, [r7, #0]
 8015202:	f7ff fc39 	bl	8014a78 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8015206:	4b06      	ldr	r3, [pc, #24]	; (8015220 <SEGGER_SYSVIEW_Stop+0x48>)
 8015208:	2200      	movs	r2, #0
 801520a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	f383 8811 	msr	BASEPRI, r3
}
 8015212:	bf00      	nop
 8015214:	3708      	adds	r7, #8
 8015216:	46bd      	mov	sp, r7
 8015218:	bd80      	pop	{r7, pc}
 801521a:	bf00      	nop
 801521c:	2000ac74 	.word	0x2000ac74
 8015220:	2000ac44 	.word	0x2000ac44

08015224 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8015224:	b580      	push	{r7, lr}
 8015226:	b08c      	sub	sp, #48	; 0x30
 8015228:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801522a:	f3ef 8311 	mrs	r3, BASEPRI
 801522e:	f04f 0120 	mov.w	r1, #32
 8015232:	f381 8811 	msr	BASEPRI, r1
 8015236:	60fb      	str	r3, [r7, #12]
 8015238:	4845      	ldr	r0, [pc, #276]	; (8015350 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 801523a:	f7ff fb2d 	bl	8014898 <_PreparePacket>
 801523e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8015240:	68bb      	ldr	r3, [r7, #8]
 8015242:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015248:	4b42      	ldr	r3, [pc, #264]	; (8015354 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801524a:	685b      	ldr	r3, [r3, #4]
 801524c:	62bb      	str	r3, [r7, #40]	; 0x28
 801524e:	e00b      	b.n	8015268 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8015250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015252:	b2da      	uxtb	r2, r3
 8015254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015256:	1c59      	adds	r1, r3, #1
 8015258:	62f9      	str	r1, [r7, #44]	; 0x2c
 801525a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801525e:	b2d2      	uxtb	r2, r2
 8015260:	701a      	strb	r2, [r3, #0]
 8015262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015264:	09db      	lsrs	r3, r3, #7
 8015266:	62bb      	str	r3, [r7, #40]	; 0x28
 8015268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801526a:	2b7f      	cmp	r3, #127	; 0x7f
 801526c:	d8f0      	bhi.n	8015250 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 801526e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015270:	1c5a      	adds	r2, r3, #1
 8015272:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015276:	b2d2      	uxtb	r2, r2
 8015278:	701a      	strb	r2, [r3, #0]
 801527a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801527c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	627b      	str	r3, [r7, #36]	; 0x24
 8015282:	4b34      	ldr	r3, [pc, #208]	; (8015354 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8015284:	689b      	ldr	r3, [r3, #8]
 8015286:	623b      	str	r3, [r7, #32]
 8015288:	e00b      	b.n	80152a2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 801528a:	6a3b      	ldr	r3, [r7, #32]
 801528c:	b2da      	uxtb	r2, r3
 801528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015290:	1c59      	adds	r1, r3, #1
 8015292:	6279      	str	r1, [r7, #36]	; 0x24
 8015294:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015298:	b2d2      	uxtb	r2, r2
 801529a:	701a      	strb	r2, [r3, #0]
 801529c:	6a3b      	ldr	r3, [r7, #32]
 801529e:	09db      	lsrs	r3, r3, #7
 80152a0:	623b      	str	r3, [r7, #32]
 80152a2:	6a3b      	ldr	r3, [r7, #32]
 80152a4:	2b7f      	cmp	r3, #127	; 0x7f
 80152a6:	d8f0      	bhi.n	801528a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80152a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152aa:	1c5a      	adds	r2, r3, #1
 80152ac:	627a      	str	r2, [r7, #36]	; 0x24
 80152ae:	6a3a      	ldr	r2, [r7, #32]
 80152b0:	b2d2      	uxtb	r2, r2
 80152b2:	701a      	strb	r2, [r3, #0]
 80152b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	61fb      	str	r3, [r7, #28]
 80152bc:	4b25      	ldr	r3, [pc, #148]	; (8015354 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80152be:	691b      	ldr	r3, [r3, #16]
 80152c0:	61bb      	str	r3, [r7, #24]
 80152c2:	e00b      	b.n	80152dc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80152c4:	69bb      	ldr	r3, [r7, #24]
 80152c6:	b2da      	uxtb	r2, r3
 80152c8:	69fb      	ldr	r3, [r7, #28]
 80152ca:	1c59      	adds	r1, r3, #1
 80152cc:	61f9      	str	r1, [r7, #28]
 80152ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80152d2:	b2d2      	uxtb	r2, r2
 80152d4:	701a      	strb	r2, [r3, #0]
 80152d6:	69bb      	ldr	r3, [r7, #24]
 80152d8:	09db      	lsrs	r3, r3, #7
 80152da:	61bb      	str	r3, [r7, #24]
 80152dc:	69bb      	ldr	r3, [r7, #24]
 80152de:	2b7f      	cmp	r3, #127	; 0x7f
 80152e0:	d8f0      	bhi.n	80152c4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80152e2:	69fb      	ldr	r3, [r7, #28]
 80152e4:	1c5a      	adds	r2, r3, #1
 80152e6:	61fa      	str	r2, [r7, #28]
 80152e8:	69ba      	ldr	r2, [r7, #24]
 80152ea:	b2d2      	uxtb	r2, r2
 80152ec:	701a      	strb	r2, [r3, #0]
 80152ee:	69fb      	ldr	r3, [r7, #28]
 80152f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	617b      	str	r3, [r7, #20]
 80152f6:	2300      	movs	r3, #0
 80152f8:	613b      	str	r3, [r7, #16]
 80152fa:	e00b      	b.n	8015314 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80152fc:	693b      	ldr	r3, [r7, #16]
 80152fe:	b2da      	uxtb	r2, r3
 8015300:	697b      	ldr	r3, [r7, #20]
 8015302:	1c59      	adds	r1, r3, #1
 8015304:	6179      	str	r1, [r7, #20]
 8015306:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801530a:	b2d2      	uxtb	r2, r2
 801530c:	701a      	strb	r2, [r3, #0]
 801530e:	693b      	ldr	r3, [r7, #16]
 8015310:	09db      	lsrs	r3, r3, #7
 8015312:	613b      	str	r3, [r7, #16]
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	2b7f      	cmp	r3, #127	; 0x7f
 8015318:	d8f0      	bhi.n	80152fc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 801531a:	697b      	ldr	r3, [r7, #20]
 801531c:	1c5a      	adds	r2, r3, #1
 801531e:	617a      	str	r2, [r7, #20]
 8015320:	693a      	ldr	r2, [r7, #16]
 8015322:	b2d2      	uxtb	r2, r2
 8015324:	701a      	strb	r2, [r3, #0]
 8015326:	697b      	ldr	r3, [r7, #20]
 8015328:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 801532a:	2218      	movs	r2, #24
 801532c:	6879      	ldr	r1, [r7, #4]
 801532e:	68b8      	ldr	r0, [r7, #8]
 8015330:	f7ff fba2 	bl	8014a78 <_SendPacket>
  RECORD_END();
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 801533a:	4b06      	ldr	r3, [pc, #24]	; (8015354 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801533e:	2b00      	cmp	r3, #0
 8015340:	d002      	beq.n	8015348 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8015342:	4b04      	ldr	r3, [pc, #16]	; (8015354 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8015344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015346:	4798      	blx	r3
  }
}
 8015348:	bf00      	nop
 801534a:	3730      	adds	r7, #48	; 0x30
 801534c:	46bd      	mov	sp, r7
 801534e:	bd80      	pop	{r7, pc}
 8015350:	2000ac74 	.word	0x2000ac74
 8015354:	2000ac44 	.word	0x2000ac44

08015358 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8015358:	b580      	push	{r7, lr}
 801535a:	b092      	sub	sp, #72	; 0x48
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8015360:	f3ef 8311 	mrs	r3, BASEPRI
 8015364:	f04f 0120 	mov.w	r1, #32
 8015368:	f381 8811 	msr	BASEPRI, r1
 801536c:	617b      	str	r3, [r7, #20]
 801536e:	486a      	ldr	r0, [pc, #424]	; (8015518 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8015370:	f7ff fa92 	bl	8014898 <_PreparePacket>
 8015374:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8015376:	693b      	ldr	r3, [r7, #16]
 8015378:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	647b      	str	r3, [r7, #68]	; 0x44
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	681a      	ldr	r2, [r3, #0]
 8015382:	4b66      	ldr	r3, [pc, #408]	; (801551c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8015384:	691b      	ldr	r3, [r3, #16]
 8015386:	1ad3      	subs	r3, r2, r3
 8015388:	643b      	str	r3, [r7, #64]	; 0x40
 801538a:	e00b      	b.n	80153a4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 801538c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801538e:	b2da      	uxtb	r2, r3
 8015390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015392:	1c59      	adds	r1, r3, #1
 8015394:	6479      	str	r1, [r7, #68]	; 0x44
 8015396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801539a:	b2d2      	uxtb	r2, r2
 801539c:	701a      	strb	r2, [r3, #0]
 801539e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153a0:	09db      	lsrs	r3, r3, #7
 80153a2:	643b      	str	r3, [r7, #64]	; 0x40
 80153a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153a6:	2b7f      	cmp	r3, #127	; 0x7f
 80153a8:	d8f0      	bhi.n	801538c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80153aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153ac:	1c5a      	adds	r2, r3, #1
 80153ae:	647a      	str	r2, [r7, #68]	; 0x44
 80153b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80153b2:	b2d2      	uxtb	r2, r2
 80153b4:	701a      	strb	r2, [r3, #0]
 80153b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	689b      	ldr	r3, [r3, #8]
 80153c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80153c4:	e00b      	b.n	80153de <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80153c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153c8:	b2da      	uxtb	r2, r3
 80153ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153cc:	1c59      	adds	r1, r3, #1
 80153ce:	63f9      	str	r1, [r7, #60]	; 0x3c
 80153d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80153d4:	b2d2      	uxtb	r2, r2
 80153d6:	701a      	strb	r2, [r3, #0]
 80153d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153da:	09db      	lsrs	r3, r3, #7
 80153dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80153de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153e0:	2b7f      	cmp	r3, #127	; 0x7f
 80153e2:	d8f0      	bhi.n	80153c6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80153e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153e6:	1c5a      	adds	r2, r3, #1
 80153e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80153ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80153ec:	b2d2      	uxtb	r2, r2
 80153ee:	701a      	strb	r2, [r3, #0]
 80153f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153f2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	685b      	ldr	r3, [r3, #4]
 80153f8:	2220      	movs	r2, #32
 80153fa:	4619      	mov	r1, r3
 80153fc:	68f8      	ldr	r0, [r7, #12]
 80153fe:	f7ff f9fb 	bl	80147f8 <_EncodeStr>
 8015402:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8015404:	2209      	movs	r2, #9
 8015406:	68f9      	ldr	r1, [r7, #12]
 8015408:	6938      	ldr	r0, [r7, #16]
 801540a:	f7ff fb35 	bl	8014a78 <_SendPacket>
  //
  pPayload = pPayloadStart;
 801540e:	693b      	ldr	r3, [r7, #16]
 8015410:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	637b      	str	r3, [r7, #52]	; 0x34
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	681a      	ldr	r2, [r3, #0]
 801541a:	4b40      	ldr	r3, [pc, #256]	; (801551c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 801541c:	691b      	ldr	r3, [r3, #16]
 801541e:	1ad3      	subs	r3, r2, r3
 8015420:	633b      	str	r3, [r7, #48]	; 0x30
 8015422:	e00b      	b.n	801543c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8015424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015426:	b2da      	uxtb	r2, r3
 8015428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801542a:	1c59      	adds	r1, r3, #1
 801542c:	6379      	str	r1, [r7, #52]	; 0x34
 801542e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015432:	b2d2      	uxtb	r2, r2
 8015434:	701a      	strb	r2, [r3, #0]
 8015436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015438:	09db      	lsrs	r3, r3, #7
 801543a:	633b      	str	r3, [r7, #48]	; 0x30
 801543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801543e:	2b7f      	cmp	r3, #127	; 0x7f
 8015440:	d8f0      	bhi.n	8015424 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8015442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015444:	1c5a      	adds	r2, r3, #1
 8015446:	637a      	str	r2, [r7, #52]	; 0x34
 8015448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801544a:	b2d2      	uxtb	r2, r2
 801544c:	701a      	strb	r2, [r3, #0]
 801544e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015450:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	68db      	ldr	r3, [r3, #12]
 801545a:	62bb      	str	r3, [r7, #40]	; 0x28
 801545c:	e00b      	b.n	8015476 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 801545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015460:	b2da      	uxtb	r2, r3
 8015462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015464:	1c59      	adds	r1, r3, #1
 8015466:	62f9      	str	r1, [r7, #44]	; 0x2c
 8015468:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801546c:	b2d2      	uxtb	r2, r2
 801546e:	701a      	strb	r2, [r3, #0]
 8015470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015472:	09db      	lsrs	r3, r3, #7
 8015474:	62bb      	str	r3, [r7, #40]	; 0x28
 8015476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015478:	2b7f      	cmp	r3, #127	; 0x7f
 801547a:	d8f0      	bhi.n	801545e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 801547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801547e:	1c5a      	adds	r2, r3, #1
 8015480:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015484:	b2d2      	uxtb	r2, r2
 8015486:	701a      	strb	r2, [r3, #0]
 8015488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801548a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	627b      	str	r3, [r7, #36]	; 0x24
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	691b      	ldr	r3, [r3, #16]
 8015494:	623b      	str	r3, [r7, #32]
 8015496:	e00b      	b.n	80154b0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8015498:	6a3b      	ldr	r3, [r7, #32]
 801549a:	b2da      	uxtb	r2, r3
 801549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801549e:	1c59      	adds	r1, r3, #1
 80154a0:	6279      	str	r1, [r7, #36]	; 0x24
 80154a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80154a6:	b2d2      	uxtb	r2, r2
 80154a8:	701a      	strb	r2, [r3, #0]
 80154aa:	6a3b      	ldr	r3, [r7, #32]
 80154ac:	09db      	lsrs	r3, r3, #7
 80154ae:	623b      	str	r3, [r7, #32]
 80154b0:	6a3b      	ldr	r3, [r7, #32]
 80154b2:	2b7f      	cmp	r3, #127	; 0x7f
 80154b4:	d8f0      	bhi.n	8015498 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80154b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154b8:	1c5a      	adds	r2, r3, #1
 80154ba:	627a      	str	r2, [r7, #36]	; 0x24
 80154bc:	6a3a      	ldr	r2, [r7, #32]
 80154be:	b2d2      	uxtb	r2, r2
 80154c0:	701a      	strb	r2, [r3, #0]
 80154c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	61fb      	str	r3, [r7, #28]
 80154ca:	2300      	movs	r3, #0
 80154cc:	61bb      	str	r3, [r7, #24]
 80154ce:	e00b      	b.n	80154e8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80154d0:	69bb      	ldr	r3, [r7, #24]
 80154d2:	b2da      	uxtb	r2, r3
 80154d4:	69fb      	ldr	r3, [r7, #28]
 80154d6:	1c59      	adds	r1, r3, #1
 80154d8:	61f9      	str	r1, [r7, #28]
 80154da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80154de:	b2d2      	uxtb	r2, r2
 80154e0:	701a      	strb	r2, [r3, #0]
 80154e2:	69bb      	ldr	r3, [r7, #24]
 80154e4:	09db      	lsrs	r3, r3, #7
 80154e6:	61bb      	str	r3, [r7, #24]
 80154e8:	69bb      	ldr	r3, [r7, #24]
 80154ea:	2b7f      	cmp	r3, #127	; 0x7f
 80154ec:	d8f0      	bhi.n	80154d0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80154ee:	69fb      	ldr	r3, [r7, #28]
 80154f0:	1c5a      	adds	r2, r3, #1
 80154f2:	61fa      	str	r2, [r7, #28]
 80154f4:	69ba      	ldr	r2, [r7, #24]
 80154f6:	b2d2      	uxtb	r2, r2
 80154f8:	701a      	strb	r2, [r3, #0]
 80154fa:	69fb      	ldr	r3, [r7, #28]
 80154fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80154fe:	2215      	movs	r2, #21
 8015500:	68f9      	ldr	r1, [r7, #12]
 8015502:	6938      	ldr	r0, [r7, #16]
 8015504:	f7ff fab8 	bl	8014a78 <_SendPacket>
  RECORD_END();
 8015508:	697b      	ldr	r3, [r7, #20]
 801550a:	f383 8811 	msr	BASEPRI, r3
}
 801550e:	bf00      	nop
 8015510:	3748      	adds	r7, #72	; 0x48
 8015512:	46bd      	mov	sp, r7
 8015514:	bd80      	pop	{r7, pc}
 8015516:	bf00      	nop
 8015518:	2000ac74 	.word	0x2000ac74
 801551c:	2000ac44 	.word	0x2000ac44

08015520 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8015520:	b580      	push	{r7, lr}
 8015522:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8015524:	4b07      	ldr	r3, [pc, #28]	; (8015544 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8015526:	6a1b      	ldr	r3, [r3, #32]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d008      	beq.n	801553e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 801552c:	4b05      	ldr	r3, [pc, #20]	; (8015544 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 801552e:	6a1b      	ldr	r3, [r3, #32]
 8015530:	685b      	ldr	r3, [r3, #4]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d003      	beq.n	801553e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8015536:	4b03      	ldr	r3, [pc, #12]	; (8015544 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8015538:	6a1b      	ldr	r3, [r3, #32]
 801553a:	685b      	ldr	r3, [r3, #4]
 801553c:	4798      	blx	r3
  }
}
 801553e:	bf00      	nop
 8015540:	bd80      	pop	{r7, pc}
 8015542:	bf00      	nop
 8015544:	2000ac44 	.word	0x2000ac44

08015548 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8015548:	b580      	push	{r7, lr}
 801554a:	b086      	sub	sp, #24
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8015550:	f3ef 8311 	mrs	r3, BASEPRI
 8015554:	f04f 0120 	mov.w	r1, #32
 8015558:	f381 8811 	msr	BASEPRI, r1
 801555c:	617b      	str	r3, [r7, #20]
 801555e:	480b      	ldr	r0, [pc, #44]	; (801558c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8015560:	f7ff f99a 	bl	8014898 <_PreparePacket>
 8015564:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8015566:	2280      	movs	r2, #128	; 0x80
 8015568:	6879      	ldr	r1, [r7, #4]
 801556a:	6938      	ldr	r0, [r7, #16]
 801556c:	f7ff f944 	bl	80147f8 <_EncodeStr>
 8015570:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8015572:	220e      	movs	r2, #14
 8015574:	68f9      	ldr	r1, [r7, #12]
 8015576:	6938      	ldr	r0, [r7, #16]
 8015578:	f7ff fa7e 	bl	8014a78 <_SendPacket>
  RECORD_END();
 801557c:	697b      	ldr	r3, [r7, #20]
 801557e:	f383 8811 	msr	BASEPRI, r3
}
 8015582:	bf00      	nop
 8015584:	3718      	adds	r7, #24
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}
 801558a:	bf00      	nop
 801558c:	2000ac74 	.word	0x2000ac74

08015590 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8015590:	b590      	push	{r4, r7, lr}
 8015592:	b083      	sub	sp, #12
 8015594:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8015596:	4b15      	ldr	r3, [pc, #84]	; (80155ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8015598:	6a1b      	ldr	r3, [r3, #32]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d01a      	beq.n	80155d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 801559e:	4b13      	ldr	r3, [pc, #76]	; (80155ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80155a0:	6a1b      	ldr	r3, [r3, #32]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d015      	beq.n	80155d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80155a8:	4b10      	ldr	r3, [pc, #64]	; (80155ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80155aa:	6a1b      	ldr	r3, [r3, #32]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	4798      	blx	r3
 80155b0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80155b4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80155b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80155ba:	f04f 0200 	mov.w	r2, #0
 80155be:	f04f 0300 	mov.w	r3, #0
 80155c2:	000a      	movs	r2, r1
 80155c4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80155c6:	4613      	mov	r3, r2
 80155c8:	461a      	mov	r2, r3
 80155ca:	4621      	mov	r1, r4
 80155cc:	200d      	movs	r0, #13
 80155ce:	f7ff fbe7 	bl	8014da0 <SEGGER_SYSVIEW_RecordU32x2>
 80155d2:	e006      	b.n	80155e2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80155d4:	4b06      	ldr	r3, [pc, #24]	; (80155f0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	4619      	mov	r1, r3
 80155da:	200c      	movs	r0, #12
 80155dc:	f7ff fba4 	bl	8014d28 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80155e0:	bf00      	nop
 80155e2:	bf00      	nop
 80155e4:	370c      	adds	r7, #12
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd90      	pop	{r4, r7, pc}
 80155ea:	bf00      	nop
 80155ec:	2000ac44 	.word	0x2000ac44
 80155f0:	e0001004 	.word	0xe0001004

080155f4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b082      	sub	sp, #8
 80155f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80155fa:	f3ef 8311 	mrs	r3, BASEPRI
 80155fe:	f04f 0120 	mov.w	r1, #32
 8015602:	f381 8811 	msr	BASEPRI, r1
 8015606:	607b      	str	r3, [r7, #4]
 8015608:	4807      	ldr	r0, [pc, #28]	; (8015628 <SEGGER_SYSVIEW_OnIdle+0x34>)
 801560a:	f7ff f945 	bl	8014898 <_PreparePacket>
 801560e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8015610:	2211      	movs	r2, #17
 8015612:	6839      	ldr	r1, [r7, #0]
 8015614:	6838      	ldr	r0, [r7, #0]
 8015616:	f7ff fa2f 	bl	8014a78 <_SendPacket>
  RECORD_END();
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	f383 8811 	msr	BASEPRI, r3
}
 8015620:	bf00      	nop
 8015622:	3708      	adds	r7, #8
 8015624:	46bd      	mov	sp, r7
 8015626:	bd80      	pop	{r7, pc}
 8015628:	2000ac74 	.word	0x2000ac74

0801562c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 801562c:	b580      	push	{r7, lr}
 801562e:	b088      	sub	sp, #32
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8015634:	f3ef 8311 	mrs	r3, BASEPRI
 8015638:	f04f 0120 	mov.w	r1, #32
 801563c:	f381 8811 	msr	BASEPRI, r1
 8015640:	617b      	str	r3, [r7, #20]
 8015642:	4819      	ldr	r0, [pc, #100]	; (80156a8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8015644:	f7ff f928 	bl	8014898 <_PreparePacket>
 8015648:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801564a:	693b      	ldr	r3, [r7, #16]
 801564c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 801564e:	4b17      	ldr	r3, [pc, #92]	; (80156ac <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8015650:	691b      	ldr	r3, [r3, #16]
 8015652:	687a      	ldr	r2, [r7, #4]
 8015654:	1ad3      	subs	r3, r2, r3
 8015656:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	61fb      	str	r3, [r7, #28]
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	61bb      	str	r3, [r7, #24]
 8015660:	e00b      	b.n	801567a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8015662:	69bb      	ldr	r3, [r7, #24]
 8015664:	b2da      	uxtb	r2, r3
 8015666:	69fb      	ldr	r3, [r7, #28]
 8015668:	1c59      	adds	r1, r3, #1
 801566a:	61f9      	str	r1, [r7, #28]
 801566c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015670:	b2d2      	uxtb	r2, r2
 8015672:	701a      	strb	r2, [r3, #0]
 8015674:	69bb      	ldr	r3, [r7, #24]
 8015676:	09db      	lsrs	r3, r3, #7
 8015678:	61bb      	str	r3, [r7, #24]
 801567a:	69bb      	ldr	r3, [r7, #24]
 801567c:	2b7f      	cmp	r3, #127	; 0x7f
 801567e:	d8f0      	bhi.n	8015662 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8015680:	69fb      	ldr	r3, [r7, #28]
 8015682:	1c5a      	adds	r2, r3, #1
 8015684:	61fa      	str	r2, [r7, #28]
 8015686:	69ba      	ldr	r2, [r7, #24]
 8015688:	b2d2      	uxtb	r2, r2
 801568a:	701a      	strb	r2, [r3, #0]
 801568c:	69fb      	ldr	r3, [r7, #28]
 801568e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8015690:	2208      	movs	r2, #8
 8015692:	68f9      	ldr	r1, [r7, #12]
 8015694:	6938      	ldr	r0, [r7, #16]
 8015696:	f7ff f9ef 	bl	8014a78 <_SendPacket>
  RECORD_END();
 801569a:	697b      	ldr	r3, [r7, #20]
 801569c:	f383 8811 	msr	BASEPRI, r3
}
 80156a0:	bf00      	nop
 80156a2:	3720      	adds	r7, #32
 80156a4:	46bd      	mov	sp, r7
 80156a6:	bd80      	pop	{r7, pc}
 80156a8:	2000ac74 	.word	0x2000ac74
 80156ac:	2000ac44 	.word	0x2000ac44

080156b0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b088      	sub	sp, #32
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80156b8:	f3ef 8311 	mrs	r3, BASEPRI
 80156bc:	f04f 0120 	mov.w	r1, #32
 80156c0:	f381 8811 	msr	BASEPRI, r1
 80156c4:	617b      	str	r3, [r7, #20]
 80156c6:	4819      	ldr	r0, [pc, #100]	; (801572c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80156c8:	f7ff f8e6 	bl	8014898 <_PreparePacket>
 80156cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80156ce:	693b      	ldr	r3, [r7, #16]
 80156d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80156d2:	4b17      	ldr	r3, [pc, #92]	; (8015730 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80156d4:	691b      	ldr	r3, [r3, #16]
 80156d6:	687a      	ldr	r2, [r7, #4]
 80156d8:	1ad3      	subs	r3, r2, r3
 80156da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	61fb      	str	r3, [r7, #28]
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	61bb      	str	r3, [r7, #24]
 80156e4:	e00b      	b.n	80156fe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80156e6:	69bb      	ldr	r3, [r7, #24]
 80156e8:	b2da      	uxtb	r2, r3
 80156ea:	69fb      	ldr	r3, [r7, #28]
 80156ec:	1c59      	adds	r1, r3, #1
 80156ee:	61f9      	str	r1, [r7, #28]
 80156f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80156f4:	b2d2      	uxtb	r2, r2
 80156f6:	701a      	strb	r2, [r3, #0]
 80156f8:	69bb      	ldr	r3, [r7, #24]
 80156fa:	09db      	lsrs	r3, r3, #7
 80156fc:	61bb      	str	r3, [r7, #24]
 80156fe:	69bb      	ldr	r3, [r7, #24]
 8015700:	2b7f      	cmp	r3, #127	; 0x7f
 8015702:	d8f0      	bhi.n	80156e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8015704:	69fb      	ldr	r3, [r7, #28]
 8015706:	1c5a      	adds	r2, r3, #1
 8015708:	61fa      	str	r2, [r7, #28]
 801570a:	69ba      	ldr	r2, [r7, #24]
 801570c:	b2d2      	uxtb	r2, r2
 801570e:	701a      	strb	r2, [r3, #0]
 8015710:	69fb      	ldr	r3, [r7, #28]
 8015712:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8015714:	2204      	movs	r2, #4
 8015716:	68f9      	ldr	r1, [r7, #12]
 8015718:	6938      	ldr	r0, [r7, #16]
 801571a:	f7ff f9ad 	bl	8014a78 <_SendPacket>
  RECORD_END();
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	f383 8811 	msr	BASEPRI, r3
}
 8015724:	bf00      	nop
 8015726:	3720      	adds	r7, #32
 8015728:	46bd      	mov	sp, r7
 801572a:	bd80      	pop	{r7, pc}
 801572c:	2000ac74 	.word	0x2000ac74
 8015730:	2000ac44 	.word	0x2000ac44

08015734 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8015734:	b580      	push	{r7, lr}
 8015736:	b088      	sub	sp, #32
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801573c:	f3ef 8311 	mrs	r3, BASEPRI
 8015740:	f04f 0120 	mov.w	r1, #32
 8015744:	f381 8811 	msr	BASEPRI, r1
 8015748:	617b      	str	r3, [r7, #20]
 801574a:	4819      	ldr	r0, [pc, #100]	; (80157b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 801574c:	f7ff f8a4 	bl	8014898 <_PreparePacket>
 8015750:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8015752:	693b      	ldr	r3, [r7, #16]
 8015754:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8015756:	4b17      	ldr	r3, [pc, #92]	; (80157b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8015758:	691b      	ldr	r3, [r3, #16]
 801575a:	687a      	ldr	r2, [r7, #4]
 801575c:	1ad3      	subs	r3, r2, r3
 801575e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	61fb      	str	r3, [r7, #28]
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	61bb      	str	r3, [r7, #24]
 8015768:	e00b      	b.n	8015782 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 801576a:	69bb      	ldr	r3, [r7, #24]
 801576c:	b2da      	uxtb	r2, r3
 801576e:	69fb      	ldr	r3, [r7, #28]
 8015770:	1c59      	adds	r1, r3, #1
 8015772:	61f9      	str	r1, [r7, #28]
 8015774:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015778:	b2d2      	uxtb	r2, r2
 801577a:	701a      	strb	r2, [r3, #0]
 801577c:	69bb      	ldr	r3, [r7, #24]
 801577e:	09db      	lsrs	r3, r3, #7
 8015780:	61bb      	str	r3, [r7, #24]
 8015782:	69bb      	ldr	r3, [r7, #24]
 8015784:	2b7f      	cmp	r3, #127	; 0x7f
 8015786:	d8f0      	bhi.n	801576a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8015788:	69fb      	ldr	r3, [r7, #28]
 801578a:	1c5a      	adds	r2, r3, #1
 801578c:	61fa      	str	r2, [r7, #28]
 801578e:	69ba      	ldr	r2, [r7, #24]
 8015790:	b2d2      	uxtb	r2, r2
 8015792:	701a      	strb	r2, [r3, #0]
 8015794:	69fb      	ldr	r3, [r7, #28]
 8015796:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8015798:	2206      	movs	r2, #6
 801579a:	68f9      	ldr	r1, [r7, #12]
 801579c:	6938      	ldr	r0, [r7, #16]
 801579e:	f7ff f96b 	bl	8014a78 <_SendPacket>
  RECORD_END();
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	f383 8811 	msr	BASEPRI, r3
}
 80157a8:	bf00      	nop
 80157aa:	3720      	adds	r7, #32
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	2000ac74 	.word	0x2000ac74
 80157b4:	2000ac44 	.word	0x2000ac44

080157b8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80157b8:	b480      	push	{r7}
 80157ba:	b083      	sub	sp, #12
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80157c0:	4b04      	ldr	r3, [pc, #16]	; (80157d4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80157c2:	691b      	ldr	r3, [r3, #16]
 80157c4:	687a      	ldr	r2, [r7, #4]
 80157c6:	1ad3      	subs	r3, r2, r3
}
 80157c8:	4618      	mov	r0, r3
 80157ca:	370c      	adds	r7, #12
 80157cc:	46bd      	mov	sp, r7
 80157ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d2:	4770      	bx	lr
 80157d4:	2000ac44 	.word	0x2000ac44

080157d8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80157d8:	b580      	push	{r7, lr}
 80157da:	b08c      	sub	sp, #48	; 0x30
 80157dc:	af00      	add	r7, sp, #0
 80157de:	4603      	mov	r3, r0
 80157e0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80157e2:	4b3b      	ldr	r3, [pc, #236]	; (80158d0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d06d      	beq.n	80158c6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80157ea:	4b39      	ldr	r3, [pc, #228]	; (80158d0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80157f0:	2300      	movs	r3, #0
 80157f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80157f4:	e008      	b.n	8015808 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80157f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f8:	691b      	ldr	r3, [r3, #16]
 80157fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80157fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d007      	beq.n	8015812 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8015802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015804:	3301      	adds	r3, #1
 8015806:	62bb      	str	r3, [r7, #40]	; 0x28
 8015808:	79fb      	ldrb	r3, [r7, #7]
 801580a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801580c:	429a      	cmp	r2, r3
 801580e:	d3f2      	bcc.n	80157f6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8015810:	e000      	b.n	8015814 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8015812:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8015814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015816:	2b00      	cmp	r3, #0
 8015818:	d055      	beq.n	80158c6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801581a:	f3ef 8311 	mrs	r3, BASEPRI
 801581e:	f04f 0120 	mov.w	r1, #32
 8015822:	f381 8811 	msr	BASEPRI, r1
 8015826:	617b      	str	r3, [r7, #20]
 8015828:	482a      	ldr	r0, [pc, #168]	; (80158d4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 801582a:	f7ff f835 	bl	8014898 <_PreparePacket>
 801582e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	627b      	str	r3, [r7, #36]	; 0x24
 8015838:	79fb      	ldrb	r3, [r7, #7]
 801583a:	623b      	str	r3, [r7, #32]
 801583c:	e00b      	b.n	8015856 <SEGGER_SYSVIEW_SendModule+0x7e>
 801583e:	6a3b      	ldr	r3, [r7, #32]
 8015840:	b2da      	uxtb	r2, r3
 8015842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015844:	1c59      	adds	r1, r3, #1
 8015846:	6279      	str	r1, [r7, #36]	; 0x24
 8015848:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801584c:	b2d2      	uxtb	r2, r2
 801584e:	701a      	strb	r2, [r3, #0]
 8015850:	6a3b      	ldr	r3, [r7, #32]
 8015852:	09db      	lsrs	r3, r3, #7
 8015854:	623b      	str	r3, [r7, #32]
 8015856:	6a3b      	ldr	r3, [r7, #32]
 8015858:	2b7f      	cmp	r3, #127	; 0x7f
 801585a:	d8f0      	bhi.n	801583e <SEGGER_SYSVIEW_SendModule+0x66>
 801585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801585e:	1c5a      	adds	r2, r3, #1
 8015860:	627a      	str	r2, [r7, #36]	; 0x24
 8015862:	6a3a      	ldr	r2, [r7, #32]
 8015864:	b2d2      	uxtb	r2, r2
 8015866:	701a      	strb	r2, [r3, #0]
 8015868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801586a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	61fb      	str	r3, [r7, #28]
 8015870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015872:	689b      	ldr	r3, [r3, #8]
 8015874:	61bb      	str	r3, [r7, #24]
 8015876:	e00b      	b.n	8015890 <SEGGER_SYSVIEW_SendModule+0xb8>
 8015878:	69bb      	ldr	r3, [r7, #24]
 801587a:	b2da      	uxtb	r2, r3
 801587c:	69fb      	ldr	r3, [r7, #28]
 801587e:	1c59      	adds	r1, r3, #1
 8015880:	61f9      	str	r1, [r7, #28]
 8015882:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015886:	b2d2      	uxtb	r2, r2
 8015888:	701a      	strb	r2, [r3, #0]
 801588a:	69bb      	ldr	r3, [r7, #24]
 801588c:	09db      	lsrs	r3, r3, #7
 801588e:	61bb      	str	r3, [r7, #24]
 8015890:	69bb      	ldr	r3, [r7, #24]
 8015892:	2b7f      	cmp	r3, #127	; 0x7f
 8015894:	d8f0      	bhi.n	8015878 <SEGGER_SYSVIEW_SendModule+0xa0>
 8015896:	69fb      	ldr	r3, [r7, #28]
 8015898:	1c5a      	adds	r2, r3, #1
 801589a:	61fa      	str	r2, [r7, #28]
 801589c:	69ba      	ldr	r2, [r7, #24]
 801589e:	b2d2      	uxtb	r2, r2
 80158a0:	701a      	strb	r2, [r3, #0]
 80158a2:	69fb      	ldr	r3, [r7, #28]
 80158a4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80158a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	2280      	movs	r2, #128	; 0x80
 80158ac:	4619      	mov	r1, r3
 80158ae:	68f8      	ldr	r0, [r7, #12]
 80158b0:	f7fe ffa2 	bl	80147f8 <_EncodeStr>
 80158b4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80158b6:	2216      	movs	r2, #22
 80158b8:	68f9      	ldr	r1, [r7, #12]
 80158ba:	6938      	ldr	r0, [r7, #16]
 80158bc:	f7ff f8dc 	bl	8014a78 <_SendPacket>
      RECORD_END();
 80158c0:	697b      	ldr	r3, [r7, #20]
 80158c2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80158c6:	bf00      	nop
 80158c8:	3730      	adds	r7, #48	; 0x30
 80158ca:	46bd      	mov	sp, r7
 80158cc:	bd80      	pop	{r7, pc}
 80158ce:	bf00      	nop
 80158d0:	2000ac6c 	.word	0x2000ac6c
 80158d4:	2000ac74 	.word	0x2000ac74

080158d8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80158de:	4b0c      	ldr	r3, [pc, #48]	; (8015910 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d00f      	beq.n	8015906 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80158e6:	4b0a      	ldr	r3, [pc, #40]	; (8015910 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	68db      	ldr	r3, [r3, #12]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d002      	beq.n	80158fa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	68db      	ldr	r3, [r3, #12]
 80158f8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	691b      	ldr	r3, [r3, #16]
 80158fe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d1f2      	bne.n	80158ec <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8015906:	bf00      	nop
 8015908:	3708      	adds	r7, #8
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop
 8015910:	2000ac6c 	.word	0x2000ac6c

08015914 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8015914:	b580      	push	{r7, lr}
 8015916:	b086      	sub	sp, #24
 8015918:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 801591a:	f3ef 8311 	mrs	r3, BASEPRI
 801591e:	f04f 0120 	mov.w	r1, #32
 8015922:	f381 8811 	msr	BASEPRI, r1
 8015926:	60fb      	str	r3, [r7, #12]
 8015928:	4817      	ldr	r0, [pc, #92]	; (8015988 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 801592a:	f7fe ffb5 	bl	8014898 <_PreparePacket>
 801592e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8015930:	68bb      	ldr	r3, [r7, #8]
 8015932:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	617b      	str	r3, [r7, #20]
 8015938:	4b14      	ldr	r3, [pc, #80]	; (801598c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 801593a:	781b      	ldrb	r3, [r3, #0]
 801593c:	613b      	str	r3, [r7, #16]
 801593e:	e00b      	b.n	8015958 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8015940:	693b      	ldr	r3, [r7, #16]
 8015942:	b2da      	uxtb	r2, r3
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	1c59      	adds	r1, r3, #1
 8015948:	6179      	str	r1, [r7, #20]
 801594a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801594e:	b2d2      	uxtb	r2, r2
 8015950:	701a      	strb	r2, [r3, #0]
 8015952:	693b      	ldr	r3, [r7, #16]
 8015954:	09db      	lsrs	r3, r3, #7
 8015956:	613b      	str	r3, [r7, #16]
 8015958:	693b      	ldr	r3, [r7, #16]
 801595a:	2b7f      	cmp	r3, #127	; 0x7f
 801595c:	d8f0      	bhi.n	8015940 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 801595e:	697b      	ldr	r3, [r7, #20]
 8015960:	1c5a      	adds	r2, r3, #1
 8015962:	617a      	str	r2, [r7, #20]
 8015964:	693a      	ldr	r2, [r7, #16]
 8015966:	b2d2      	uxtb	r2, r2
 8015968:	701a      	strb	r2, [r3, #0]
 801596a:	697b      	ldr	r3, [r7, #20]
 801596c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 801596e:	221b      	movs	r2, #27
 8015970:	6879      	ldr	r1, [r7, #4]
 8015972:	68b8      	ldr	r0, [r7, #8]
 8015974:	f7ff f880 	bl	8014a78 <_SendPacket>
  RECORD_END();
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	f383 8811 	msr	BASEPRI, r3
}
 801597e:	bf00      	nop
 8015980:	3718      	adds	r7, #24
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}
 8015986:	bf00      	nop
 8015988:	2000ac74 	.word	0x2000ac74
 801598c:	2000ac70 	.word	0x2000ac70

08015990 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8015990:	b580      	push	{r7, lr}
 8015992:	b08a      	sub	sp, #40	; 0x28
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8015998:	f3ef 8311 	mrs	r3, BASEPRI
 801599c:	f04f 0120 	mov.w	r1, #32
 80159a0:	f381 8811 	msr	BASEPRI, r1
 80159a4:	617b      	str	r3, [r7, #20]
 80159a6:	4827      	ldr	r0, [pc, #156]	; (8015a44 <SEGGER_SYSVIEW_Warn+0xb4>)
 80159a8:	f7fe ff76 	bl	8014898 <_PreparePacket>
 80159ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80159ae:	2280      	movs	r2, #128	; 0x80
 80159b0:	6879      	ldr	r1, [r7, #4]
 80159b2:	6938      	ldr	r0, [r7, #16]
 80159b4:	f7fe ff20 	bl	80147f8 <_EncodeStr>
 80159b8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	627b      	str	r3, [r7, #36]	; 0x24
 80159be:	2301      	movs	r3, #1
 80159c0:	623b      	str	r3, [r7, #32]
 80159c2:	e00b      	b.n	80159dc <SEGGER_SYSVIEW_Warn+0x4c>
 80159c4:	6a3b      	ldr	r3, [r7, #32]
 80159c6:	b2da      	uxtb	r2, r3
 80159c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ca:	1c59      	adds	r1, r3, #1
 80159cc:	6279      	str	r1, [r7, #36]	; 0x24
 80159ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80159d2:	b2d2      	uxtb	r2, r2
 80159d4:	701a      	strb	r2, [r3, #0]
 80159d6:	6a3b      	ldr	r3, [r7, #32]
 80159d8:	09db      	lsrs	r3, r3, #7
 80159da:	623b      	str	r3, [r7, #32]
 80159dc:	6a3b      	ldr	r3, [r7, #32]
 80159de:	2b7f      	cmp	r3, #127	; 0x7f
 80159e0:	d8f0      	bhi.n	80159c4 <SEGGER_SYSVIEW_Warn+0x34>
 80159e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e4:	1c5a      	adds	r2, r3, #1
 80159e6:	627a      	str	r2, [r7, #36]	; 0x24
 80159e8:	6a3a      	ldr	r2, [r7, #32]
 80159ea:	b2d2      	uxtb	r2, r2
 80159ec:	701a      	strb	r2, [r3, #0]
 80159ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	61fb      	str	r3, [r7, #28]
 80159f6:	2300      	movs	r3, #0
 80159f8:	61bb      	str	r3, [r7, #24]
 80159fa:	e00b      	b.n	8015a14 <SEGGER_SYSVIEW_Warn+0x84>
 80159fc:	69bb      	ldr	r3, [r7, #24]
 80159fe:	b2da      	uxtb	r2, r3
 8015a00:	69fb      	ldr	r3, [r7, #28]
 8015a02:	1c59      	adds	r1, r3, #1
 8015a04:	61f9      	str	r1, [r7, #28]
 8015a06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015a0a:	b2d2      	uxtb	r2, r2
 8015a0c:	701a      	strb	r2, [r3, #0]
 8015a0e:	69bb      	ldr	r3, [r7, #24]
 8015a10:	09db      	lsrs	r3, r3, #7
 8015a12:	61bb      	str	r3, [r7, #24]
 8015a14:	69bb      	ldr	r3, [r7, #24]
 8015a16:	2b7f      	cmp	r3, #127	; 0x7f
 8015a18:	d8f0      	bhi.n	80159fc <SEGGER_SYSVIEW_Warn+0x6c>
 8015a1a:	69fb      	ldr	r3, [r7, #28]
 8015a1c:	1c5a      	adds	r2, r3, #1
 8015a1e:	61fa      	str	r2, [r7, #28]
 8015a20:	69ba      	ldr	r2, [r7, #24]
 8015a22:	b2d2      	uxtb	r2, r2
 8015a24:	701a      	strb	r2, [r3, #0]
 8015a26:	69fb      	ldr	r3, [r7, #28]
 8015a28:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8015a2a:	221a      	movs	r2, #26
 8015a2c:	68f9      	ldr	r1, [r7, #12]
 8015a2e:	6938      	ldr	r0, [r7, #16]
 8015a30:	f7ff f822 	bl	8014a78 <_SendPacket>
  RECORD_END();
 8015a34:	697b      	ldr	r3, [r7, #20]
 8015a36:	f383 8811 	msr	BASEPRI, r3
}
 8015a3a:	bf00      	nop
 8015a3c:	3728      	adds	r7, #40	; 0x28
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}
 8015a42:	bf00      	nop
 8015a44:	2000ac74 	.word	0x2000ac74

08015a48 <__errno>:
 8015a48:	4b01      	ldr	r3, [pc, #4]	; (8015a50 <__errno+0x8>)
 8015a4a:	6818      	ldr	r0, [r3, #0]
 8015a4c:	4770      	bx	lr
 8015a4e:	bf00      	nop
 8015a50:	200012f4 	.word	0x200012f4

08015a54 <__libc_init_array>:
 8015a54:	b570      	push	{r4, r5, r6, lr}
 8015a56:	4d0d      	ldr	r5, [pc, #52]	; (8015a8c <__libc_init_array+0x38>)
 8015a58:	4c0d      	ldr	r4, [pc, #52]	; (8015a90 <__libc_init_array+0x3c>)
 8015a5a:	1b64      	subs	r4, r4, r5
 8015a5c:	10a4      	asrs	r4, r4, #2
 8015a5e:	2600      	movs	r6, #0
 8015a60:	42a6      	cmp	r6, r4
 8015a62:	d109      	bne.n	8015a78 <__libc_init_array+0x24>
 8015a64:	4d0b      	ldr	r5, [pc, #44]	; (8015a94 <__libc_init_array+0x40>)
 8015a66:	4c0c      	ldr	r4, [pc, #48]	; (8015a98 <__libc_init_array+0x44>)
 8015a68:	f000 fc98 	bl	801639c <_init>
 8015a6c:	1b64      	subs	r4, r4, r5
 8015a6e:	10a4      	asrs	r4, r4, #2
 8015a70:	2600      	movs	r6, #0
 8015a72:	42a6      	cmp	r6, r4
 8015a74:	d105      	bne.n	8015a82 <__libc_init_array+0x2e>
 8015a76:	bd70      	pop	{r4, r5, r6, pc}
 8015a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8015a7c:	4798      	blx	r3
 8015a7e:	3601      	adds	r6, #1
 8015a80:	e7ee      	b.n	8015a60 <__libc_init_array+0xc>
 8015a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8015a86:	4798      	blx	r3
 8015a88:	3601      	adds	r6, #1
 8015a8a:	e7f2      	b.n	8015a72 <__libc_init_array+0x1e>
 8015a8c:	080167b8 	.word	0x080167b8
 8015a90:	080167b8 	.word	0x080167b8
 8015a94:	080167b8 	.word	0x080167b8
 8015a98:	080167bc 	.word	0x080167bc

08015a9c <__retarget_lock_acquire_recursive>:
 8015a9c:	4770      	bx	lr

08015a9e <__retarget_lock_release_recursive>:
 8015a9e:	4770      	bx	lr

08015aa0 <memcmp>:
 8015aa0:	b530      	push	{r4, r5, lr}
 8015aa2:	3901      	subs	r1, #1
 8015aa4:	2400      	movs	r4, #0
 8015aa6:	42a2      	cmp	r2, r4
 8015aa8:	d101      	bne.n	8015aae <memcmp+0xe>
 8015aaa:	2000      	movs	r0, #0
 8015aac:	e005      	b.n	8015aba <memcmp+0x1a>
 8015aae:	5d03      	ldrb	r3, [r0, r4]
 8015ab0:	3401      	adds	r4, #1
 8015ab2:	5d0d      	ldrb	r5, [r1, r4]
 8015ab4:	42ab      	cmp	r3, r5
 8015ab6:	d0f6      	beq.n	8015aa6 <memcmp+0x6>
 8015ab8:	1b58      	subs	r0, r3, r5
 8015aba:	bd30      	pop	{r4, r5, pc}

08015abc <memcpy>:
 8015abc:	440a      	add	r2, r1
 8015abe:	4291      	cmp	r1, r2
 8015ac0:	f100 33ff 	add.w	r3, r0, #4294967295
 8015ac4:	d100      	bne.n	8015ac8 <memcpy+0xc>
 8015ac6:	4770      	bx	lr
 8015ac8:	b510      	push	{r4, lr}
 8015aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ace:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015ad2:	4291      	cmp	r1, r2
 8015ad4:	d1f9      	bne.n	8015aca <memcpy+0xe>
 8015ad6:	bd10      	pop	{r4, pc}

08015ad8 <memset>:
 8015ad8:	4402      	add	r2, r0
 8015ada:	4603      	mov	r3, r0
 8015adc:	4293      	cmp	r3, r2
 8015ade:	d100      	bne.n	8015ae2 <memset+0xa>
 8015ae0:	4770      	bx	lr
 8015ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8015ae6:	e7f9      	b.n	8015adc <memset+0x4>

08015ae8 <cleanup_glue>:
 8015ae8:	b538      	push	{r3, r4, r5, lr}
 8015aea:	460c      	mov	r4, r1
 8015aec:	6809      	ldr	r1, [r1, #0]
 8015aee:	4605      	mov	r5, r0
 8015af0:	b109      	cbz	r1, 8015af6 <cleanup_glue+0xe>
 8015af2:	f7ff fff9 	bl	8015ae8 <cleanup_glue>
 8015af6:	4621      	mov	r1, r4
 8015af8:	4628      	mov	r0, r5
 8015afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015afe:	f000 b869 	b.w	8015bd4 <_free_r>
	...

08015b04 <_reclaim_reent>:
 8015b04:	4b2c      	ldr	r3, [pc, #176]	; (8015bb8 <_reclaim_reent+0xb4>)
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	4283      	cmp	r3, r0
 8015b0a:	b570      	push	{r4, r5, r6, lr}
 8015b0c:	4604      	mov	r4, r0
 8015b0e:	d051      	beq.n	8015bb4 <_reclaim_reent+0xb0>
 8015b10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015b12:	b143      	cbz	r3, 8015b26 <_reclaim_reent+0x22>
 8015b14:	68db      	ldr	r3, [r3, #12]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d14a      	bne.n	8015bb0 <_reclaim_reent+0xac>
 8015b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b1c:	6819      	ldr	r1, [r3, #0]
 8015b1e:	b111      	cbz	r1, 8015b26 <_reclaim_reent+0x22>
 8015b20:	4620      	mov	r0, r4
 8015b22:	f000 f857 	bl	8015bd4 <_free_r>
 8015b26:	6961      	ldr	r1, [r4, #20]
 8015b28:	b111      	cbz	r1, 8015b30 <_reclaim_reent+0x2c>
 8015b2a:	4620      	mov	r0, r4
 8015b2c:	f000 f852 	bl	8015bd4 <_free_r>
 8015b30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015b32:	b111      	cbz	r1, 8015b3a <_reclaim_reent+0x36>
 8015b34:	4620      	mov	r0, r4
 8015b36:	f000 f84d 	bl	8015bd4 <_free_r>
 8015b3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015b3c:	b111      	cbz	r1, 8015b44 <_reclaim_reent+0x40>
 8015b3e:	4620      	mov	r0, r4
 8015b40:	f000 f848 	bl	8015bd4 <_free_r>
 8015b44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015b46:	b111      	cbz	r1, 8015b4e <_reclaim_reent+0x4a>
 8015b48:	4620      	mov	r0, r4
 8015b4a:	f000 f843 	bl	8015bd4 <_free_r>
 8015b4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015b50:	b111      	cbz	r1, 8015b58 <_reclaim_reent+0x54>
 8015b52:	4620      	mov	r0, r4
 8015b54:	f000 f83e 	bl	8015bd4 <_free_r>
 8015b58:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8015b5a:	b111      	cbz	r1, 8015b62 <_reclaim_reent+0x5e>
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	f000 f839 	bl	8015bd4 <_free_r>
 8015b62:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015b64:	b111      	cbz	r1, 8015b6c <_reclaim_reent+0x68>
 8015b66:	4620      	mov	r0, r4
 8015b68:	f000 f834 	bl	8015bd4 <_free_r>
 8015b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b6e:	b111      	cbz	r1, 8015b76 <_reclaim_reent+0x72>
 8015b70:	4620      	mov	r0, r4
 8015b72:	f000 f82f 	bl	8015bd4 <_free_r>
 8015b76:	69a3      	ldr	r3, [r4, #24]
 8015b78:	b1e3      	cbz	r3, 8015bb4 <_reclaim_reent+0xb0>
 8015b7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015b7c:	4620      	mov	r0, r4
 8015b7e:	4798      	blx	r3
 8015b80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015b82:	b1b9      	cbz	r1, 8015bb4 <_reclaim_reent+0xb0>
 8015b84:	4620      	mov	r0, r4
 8015b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b8a:	f7ff bfad 	b.w	8015ae8 <cleanup_glue>
 8015b8e:	5949      	ldr	r1, [r1, r5]
 8015b90:	b941      	cbnz	r1, 8015ba4 <_reclaim_reent+0xa0>
 8015b92:	3504      	adds	r5, #4
 8015b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b96:	2d80      	cmp	r5, #128	; 0x80
 8015b98:	68d9      	ldr	r1, [r3, #12]
 8015b9a:	d1f8      	bne.n	8015b8e <_reclaim_reent+0x8a>
 8015b9c:	4620      	mov	r0, r4
 8015b9e:	f000 f819 	bl	8015bd4 <_free_r>
 8015ba2:	e7ba      	b.n	8015b1a <_reclaim_reent+0x16>
 8015ba4:	680e      	ldr	r6, [r1, #0]
 8015ba6:	4620      	mov	r0, r4
 8015ba8:	f000 f814 	bl	8015bd4 <_free_r>
 8015bac:	4631      	mov	r1, r6
 8015bae:	e7ef      	b.n	8015b90 <_reclaim_reent+0x8c>
 8015bb0:	2500      	movs	r5, #0
 8015bb2:	e7ef      	b.n	8015b94 <_reclaim_reent+0x90>
 8015bb4:	bd70      	pop	{r4, r5, r6, pc}
 8015bb6:	bf00      	nop
 8015bb8:	200012f4 	.word	0x200012f4

08015bbc <__malloc_lock>:
 8015bbc:	4801      	ldr	r0, [pc, #4]	; (8015bc4 <__malloc_lock+0x8>)
 8015bbe:	f7ff bf6d 	b.w	8015a9c <__retarget_lock_acquire_recursive>
 8015bc2:	bf00      	nop
 8015bc4:	2000df04 	.word	0x2000df04

08015bc8 <__malloc_unlock>:
 8015bc8:	4801      	ldr	r0, [pc, #4]	; (8015bd0 <__malloc_unlock+0x8>)
 8015bca:	f7ff bf68 	b.w	8015a9e <__retarget_lock_release_recursive>
 8015bce:	bf00      	nop
 8015bd0:	2000df04 	.word	0x2000df04

08015bd4 <_free_r>:
 8015bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015bd6:	2900      	cmp	r1, #0
 8015bd8:	d048      	beq.n	8015c6c <_free_r+0x98>
 8015bda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015bde:	9001      	str	r0, [sp, #4]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	f1a1 0404 	sub.w	r4, r1, #4
 8015be6:	bfb8      	it	lt
 8015be8:	18e4      	addlt	r4, r4, r3
 8015bea:	f7ff ffe7 	bl	8015bbc <__malloc_lock>
 8015bee:	4a20      	ldr	r2, [pc, #128]	; (8015c70 <_free_r+0x9c>)
 8015bf0:	9801      	ldr	r0, [sp, #4]
 8015bf2:	6813      	ldr	r3, [r2, #0]
 8015bf4:	4615      	mov	r5, r2
 8015bf6:	b933      	cbnz	r3, 8015c06 <_free_r+0x32>
 8015bf8:	6063      	str	r3, [r4, #4]
 8015bfa:	6014      	str	r4, [r2, #0]
 8015bfc:	b003      	add	sp, #12
 8015bfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015c02:	f7ff bfe1 	b.w	8015bc8 <__malloc_unlock>
 8015c06:	42a3      	cmp	r3, r4
 8015c08:	d90b      	bls.n	8015c22 <_free_r+0x4e>
 8015c0a:	6821      	ldr	r1, [r4, #0]
 8015c0c:	1862      	adds	r2, r4, r1
 8015c0e:	4293      	cmp	r3, r2
 8015c10:	bf04      	itt	eq
 8015c12:	681a      	ldreq	r2, [r3, #0]
 8015c14:	685b      	ldreq	r3, [r3, #4]
 8015c16:	6063      	str	r3, [r4, #4]
 8015c18:	bf04      	itt	eq
 8015c1a:	1852      	addeq	r2, r2, r1
 8015c1c:	6022      	streq	r2, [r4, #0]
 8015c1e:	602c      	str	r4, [r5, #0]
 8015c20:	e7ec      	b.n	8015bfc <_free_r+0x28>
 8015c22:	461a      	mov	r2, r3
 8015c24:	685b      	ldr	r3, [r3, #4]
 8015c26:	b10b      	cbz	r3, 8015c2c <_free_r+0x58>
 8015c28:	42a3      	cmp	r3, r4
 8015c2a:	d9fa      	bls.n	8015c22 <_free_r+0x4e>
 8015c2c:	6811      	ldr	r1, [r2, #0]
 8015c2e:	1855      	adds	r5, r2, r1
 8015c30:	42a5      	cmp	r5, r4
 8015c32:	d10b      	bne.n	8015c4c <_free_r+0x78>
 8015c34:	6824      	ldr	r4, [r4, #0]
 8015c36:	4421      	add	r1, r4
 8015c38:	1854      	adds	r4, r2, r1
 8015c3a:	42a3      	cmp	r3, r4
 8015c3c:	6011      	str	r1, [r2, #0]
 8015c3e:	d1dd      	bne.n	8015bfc <_free_r+0x28>
 8015c40:	681c      	ldr	r4, [r3, #0]
 8015c42:	685b      	ldr	r3, [r3, #4]
 8015c44:	6053      	str	r3, [r2, #4]
 8015c46:	4421      	add	r1, r4
 8015c48:	6011      	str	r1, [r2, #0]
 8015c4a:	e7d7      	b.n	8015bfc <_free_r+0x28>
 8015c4c:	d902      	bls.n	8015c54 <_free_r+0x80>
 8015c4e:	230c      	movs	r3, #12
 8015c50:	6003      	str	r3, [r0, #0]
 8015c52:	e7d3      	b.n	8015bfc <_free_r+0x28>
 8015c54:	6825      	ldr	r5, [r4, #0]
 8015c56:	1961      	adds	r1, r4, r5
 8015c58:	428b      	cmp	r3, r1
 8015c5a:	bf04      	itt	eq
 8015c5c:	6819      	ldreq	r1, [r3, #0]
 8015c5e:	685b      	ldreq	r3, [r3, #4]
 8015c60:	6063      	str	r3, [r4, #4]
 8015c62:	bf04      	itt	eq
 8015c64:	1949      	addeq	r1, r1, r5
 8015c66:	6021      	streq	r1, [r4, #0]
 8015c68:	6054      	str	r4, [r2, #4]
 8015c6a:	e7c7      	b.n	8015bfc <_free_r+0x28>
 8015c6c:	b003      	add	sp, #12
 8015c6e:	bd30      	pop	{r4, r5, pc}
 8015c70:	2000ad58 	.word	0x2000ad58
 8015c74:	00000000 	.word	0x00000000

08015c78 <floor>:
 8015c78:	ec51 0b10 	vmov	r0, r1, d0
 8015c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015c84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015c88:	2e13      	cmp	r6, #19
 8015c8a:	ee10 5a10 	vmov	r5, s0
 8015c8e:	ee10 8a10 	vmov	r8, s0
 8015c92:	460c      	mov	r4, r1
 8015c94:	dc32      	bgt.n	8015cfc <floor+0x84>
 8015c96:	2e00      	cmp	r6, #0
 8015c98:	da14      	bge.n	8015cc4 <floor+0x4c>
 8015c9a:	a333      	add	r3, pc, #204	; (adr r3, 8015d68 <floor+0xf0>)
 8015c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ca0:	f7ea fae6 	bl	8000270 <__adddf3>
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	f7ea ff28 	bl	8000afc <__aeabi_dcmpgt>
 8015cac:	b138      	cbz	r0, 8015cbe <floor+0x46>
 8015cae:	2c00      	cmp	r4, #0
 8015cb0:	da57      	bge.n	8015d62 <floor+0xea>
 8015cb2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015cb6:	431d      	orrs	r5, r3
 8015cb8:	d001      	beq.n	8015cbe <floor+0x46>
 8015cba:	4c2d      	ldr	r4, [pc, #180]	; (8015d70 <floor+0xf8>)
 8015cbc:	2500      	movs	r5, #0
 8015cbe:	4621      	mov	r1, r4
 8015cc0:	4628      	mov	r0, r5
 8015cc2:	e025      	b.n	8015d10 <floor+0x98>
 8015cc4:	4f2b      	ldr	r7, [pc, #172]	; (8015d74 <floor+0xfc>)
 8015cc6:	4137      	asrs	r7, r6
 8015cc8:	ea01 0307 	and.w	r3, r1, r7
 8015ccc:	4303      	orrs	r3, r0
 8015cce:	d01f      	beq.n	8015d10 <floor+0x98>
 8015cd0:	a325      	add	r3, pc, #148	; (adr r3, 8015d68 <floor+0xf0>)
 8015cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cd6:	f7ea facb 	bl	8000270 <__adddf3>
 8015cda:	2200      	movs	r2, #0
 8015cdc:	2300      	movs	r3, #0
 8015cde:	f7ea ff0d 	bl	8000afc <__aeabi_dcmpgt>
 8015ce2:	2800      	cmp	r0, #0
 8015ce4:	d0eb      	beq.n	8015cbe <floor+0x46>
 8015ce6:	2c00      	cmp	r4, #0
 8015ce8:	bfbe      	ittt	lt
 8015cea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015cee:	fa43 f606 	asrlt.w	r6, r3, r6
 8015cf2:	19a4      	addlt	r4, r4, r6
 8015cf4:	ea24 0407 	bic.w	r4, r4, r7
 8015cf8:	2500      	movs	r5, #0
 8015cfa:	e7e0      	b.n	8015cbe <floor+0x46>
 8015cfc:	2e33      	cmp	r6, #51	; 0x33
 8015cfe:	dd0b      	ble.n	8015d18 <floor+0xa0>
 8015d00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015d04:	d104      	bne.n	8015d10 <floor+0x98>
 8015d06:	ee10 2a10 	vmov	r2, s0
 8015d0a:	460b      	mov	r3, r1
 8015d0c:	f7ea fab0 	bl	8000270 <__adddf3>
 8015d10:	ec41 0b10 	vmov	d0, r0, r1
 8015d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d18:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8015d20:	fa23 f707 	lsr.w	r7, r3, r7
 8015d24:	4207      	tst	r7, r0
 8015d26:	d0f3      	beq.n	8015d10 <floor+0x98>
 8015d28:	a30f      	add	r3, pc, #60	; (adr r3, 8015d68 <floor+0xf0>)
 8015d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d2e:	f7ea fa9f 	bl	8000270 <__adddf3>
 8015d32:	2200      	movs	r2, #0
 8015d34:	2300      	movs	r3, #0
 8015d36:	f7ea fee1 	bl	8000afc <__aeabi_dcmpgt>
 8015d3a:	2800      	cmp	r0, #0
 8015d3c:	d0bf      	beq.n	8015cbe <floor+0x46>
 8015d3e:	2c00      	cmp	r4, #0
 8015d40:	da02      	bge.n	8015d48 <floor+0xd0>
 8015d42:	2e14      	cmp	r6, #20
 8015d44:	d103      	bne.n	8015d4e <floor+0xd6>
 8015d46:	3401      	adds	r4, #1
 8015d48:	ea25 0507 	bic.w	r5, r5, r7
 8015d4c:	e7b7      	b.n	8015cbe <floor+0x46>
 8015d4e:	2301      	movs	r3, #1
 8015d50:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015d54:	fa03 f606 	lsl.w	r6, r3, r6
 8015d58:	4435      	add	r5, r6
 8015d5a:	4545      	cmp	r5, r8
 8015d5c:	bf38      	it	cc
 8015d5e:	18e4      	addcc	r4, r4, r3
 8015d60:	e7f2      	b.n	8015d48 <floor+0xd0>
 8015d62:	2500      	movs	r5, #0
 8015d64:	462c      	mov	r4, r5
 8015d66:	e7aa      	b.n	8015cbe <floor+0x46>
 8015d68:	8800759c 	.word	0x8800759c
 8015d6c:	7e37e43c 	.word	0x7e37e43c
 8015d70:	bff00000 	.word	0xbff00000
 8015d74:	000fffff 	.word	0x000fffff

08015d78 <fmax>:
 8015d78:	b508      	push	{r3, lr}
 8015d7a:	ed2d 8b04 	vpush	{d8-d9}
 8015d7e:	eeb0 8a40 	vmov.f32	s16, s0
 8015d82:	eef0 8a60 	vmov.f32	s17, s1
 8015d86:	eeb0 9a41 	vmov.f32	s18, s2
 8015d8a:	eef0 9a61 	vmov.f32	s19, s3
 8015d8e:	f000 f81b 	bl	8015dc8 <__fpclassifyd>
 8015d92:	b168      	cbz	r0, 8015db0 <fmax+0x38>
 8015d94:	eeb0 0a49 	vmov.f32	s0, s18
 8015d98:	eef0 0a69 	vmov.f32	s1, s19
 8015d9c:	f000 f814 	bl	8015dc8 <__fpclassifyd>
 8015da0:	b150      	cbz	r0, 8015db8 <fmax+0x40>
 8015da2:	ec53 2b19 	vmov	r2, r3, d9
 8015da6:	ec51 0b18 	vmov	r0, r1, d8
 8015daa:	f7ea fea7 	bl	8000afc <__aeabi_dcmpgt>
 8015dae:	b918      	cbnz	r0, 8015db8 <fmax+0x40>
 8015db0:	eeb0 8a49 	vmov.f32	s16, s18
 8015db4:	eef0 8a69 	vmov.f32	s17, s19
 8015db8:	eeb0 0a48 	vmov.f32	s0, s16
 8015dbc:	eef0 0a68 	vmov.f32	s1, s17
 8015dc0:	ecbd 8b04 	vpop	{d8-d9}
 8015dc4:	bd08      	pop	{r3, pc}
	...

08015dc8 <__fpclassifyd>:
 8015dc8:	ec51 0b10 	vmov	r0, r1, d0
 8015dcc:	b510      	push	{r4, lr}
 8015dce:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8015dd2:	460b      	mov	r3, r1
 8015dd4:	d019      	beq.n	8015e0a <__fpclassifyd+0x42>
 8015dd6:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8015dda:	490e      	ldr	r1, [pc, #56]	; (8015e14 <__fpclassifyd+0x4c>)
 8015ddc:	428a      	cmp	r2, r1
 8015dde:	d90e      	bls.n	8015dfe <__fpclassifyd+0x36>
 8015de0:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8015de4:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8015de8:	428a      	cmp	r2, r1
 8015dea:	d908      	bls.n	8015dfe <__fpclassifyd+0x36>
 8015dec:	4a0a      	ldr	r2, [pc, #40]	; (8015e18 <__fpclassifyd+0x50>)
 8015dee:	4213      	tst	r3, r2
 8015df0:	d007      	beq.n	8015e02 <__fpclassifyd+0x3a>
 8015df2:	4294      	cmp	r4, r2
 8015df4:	d107      	bne.n	8015e06 <__fpclassifyd+0x3e>
 8015df6:	fab0 f080 	clz	r0, r0
 8015dfa:	0940      	lsrs	r0, r0, #5
 8015dfc:	bd10      	pop	{r4, pc}
 8015dfe:	2004      	movs	r0, #4
 8015e00:	e7fc      	b.n	8015dfc <__fpclassifyd+0x34>
 8015e02:	2003      	movs	r0, #3
 8015e04:	e7fa      	b.n	8015dfc <__fpclassifyd+0x34>
 8015e06:	2000      	movs	r0, #0
 8015e08:	e7f8      	b.n	8015dfc <__fpclassifyd+0x34>
 8015e0a:	2800      	cmp	r0, #0
 8015e0c:	d1ee      	bne.n	8015dec <__fpclassifyd+0x24>
 8015e0e:	2002      	movs	r0, #2
 8015e10:	e7f4      	b.n	8015dfc <__fpclassifyd+0x34>
 8015e12:	bf00      	nop
 8015e14:	7fdfffff 	.word	0x7fdfffff
 8015e18:	7ff00000 	.word	0x7ff00000
 8015e1c:	00000000 	.word	0x00000000

08015e20 <exp>:
 8015e20:	b538      	push	{r3, r4, r5, lr}
 8015e22:	ed2d 8b02 	vpush	{d8}
 8015e26:	ec55 4b10 	vmov	r4, r5, d0
 8015e2a:	f000 f87d 	bl	8015f28 <__ieee754_exp>
 8015e2e:	4b22      	ldr	r3, [pc, #136]	; (8015eb8 <exp+0x98>)
 8015e30:	eeb0 8a40 	vmov.f32	s16, s0
 8015e34:	eef0 8a60 	vmov.f32	s17, s1
 8015e38:	f993 3000 	ldrsb.w	r3, [r3]
 8015e3c:	3301      	adds	r3, #1
 8015e3e:	d012      	beq.n	8015e66 <exp+0x46>
 8015e40:	ec45 4b10 	vmov	d0, r4, r5
 8015e44:	f000 fa9e 	bl	8016384 <finite>
 8015e48:	b168      	cbz	r0, 8015e66 <exp+0x46>
 8015e4a:	a313      	add	r3, pc, #76	; (adr r3, 8015e98 <exp+0x78>)
 8015e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e50:	4620      	mov	r0, r4
 8015e52:	4629      	mov	r1, r5
 8015e54:	f7ea fe52 	bl	8000afc <__aeabi_dcmpgt>
 8015e58:	b160      	cbz	r0, 8015e74 <exp+0x54>
 8015e5a:	f7ff fdf5 	bl	8015a48 <__errno>
 8015e5e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8015ea0 <exp+0x80>
 8015e62:	2322      	movs	r3, #34	; 0x22
 8015e64:	6003      	str	r3, [r0, #0]
 8015e66:	eeb0 0a48 	vmov.f32	s0, s16
 8015e6a:	eef0 0a68 	vmov.f32	s1, s17
 8015e6e:	ecbd 8b02 	vpop	{d8}
 8015e72:	bd38      	pop	{r3, r4, r5, pc}
 8015e74:	a30c      	add	r3, pc, #48	; (adr r3, 8015ea8 <exp+0x88>)
 8015e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	4629      	mov	r1, r5
 8015e7e:	f7ea fe1f 	bl	8000ac0 <__aeabi_dcmplt>
 8015e82:	2800      	cmp	r0, #0
 8015e84:	d0ef      	beq.n	8015e66 <exp+0x46>
 8015e86:	f7ff fddf 	bl	8015a48 <__errno>
 8015e8a:	2322      	movs	r3, #34	; 0x22
 8015e8c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8015eb0 <exp+0x90>
 8015e90:	6003      	str	r3, [r0, #0]
 8015e92:	e7e8      	b.n	8015e66 <exp+0x46>
 8015e94:	f3af 8000 	nop.w
 8015e98:	fefa39ef 	.word	0xfefa39ef
 8015e9c:	40862e42 	.word	0x40862e42
 8015ea0:	00000000 	.word	0x00000000
 8015ea4:	7ff00000 	.word	0x7ff00000
 8015ea8:	d52d3051 	.word	0xd52d3051
 8015eac:	c0874910 	.word	0xc0874910
	...
 8015eb8:	20001358 	.word	0x20001358

08015ebc <sqrt>:
 8015ebc:	b538      	push	{r3, r4, r5, lr}
 8015ebe:	ed2d 8b02 	vpush	{d8}
 8015ec2:	ec55 4b10 	vmov	r4, r5, d0
 8015ec6:	f000 f9a9 	bl	801621c <__ieee754_sqrt>
 8015eca:	4b15      	ldr	r3, [pc, #84]	; (8015f20 <sqrt+0x64>)
 8015ecc:	eeb0 8a40 	vmov.f32	s16, s0
 8015ed0:	eef0 8a60 	vmov.f32	s17, s1
 8015ed4:	f993 3000 	ldrsb.w	r3, [r3]
 8015ed8:	3301      	adds	r3, #1
 8015eda:	d019      	beq.n	8015f10 <sqrt+0x54>
 8015edc:	4622      	mov	r2, r4
 8015ede:	462b      	mov	r3, r5
 8015ee0:	4620      	mov	r0, r4
 8015ee2:	4629      	mov	r1, r5
 8015ee4:	f7ea fe14 	bl	8000b10 <__aeabi_dcmpun>
 8015ee8:	b990      	cbnz	r0, 8015f10 <sqrt+0x54>
 8015eea:	2200      	movs	r2, #0
 8015eec:	2300      	movs	r3, #0
 8015eee:	4620      	mov	r0, r4
 8015ef0:	4629      	mov	r1, r5
 8015ef2:	f7ea fde5 	bl	8000ac0 <__aeabi_dcmplt>
 8015ef6:	b158      	cbz	r0, 8015f10 <sqrt+0x54>
 8015ef8:	f7ff fda6 	bl	8015a48 <__errno>
 8015efc:	2321      	movs	r3, #33	; 0x21
 8015efe:	6003      	str	r3, [r0, #0]
 8015f00:	2200      	movs	r2, #0
 8015f02:	2300      	movs	r3, #0
 8015f04:	4610      	mov	r0, r2
 8015f06:	4619      	mov	r1, r3
 8015f08:	f7ea fc92 	bl	8000830 <__aeabi_ddiv>
 8015f0c:	ec41 0b18 	vmov	d8, r0, r1
 8015f10:	eeb0 0a48 	vmov.f32	s0, s16
 8015f14:	eef0 0a68 	vmov.f32	s1, s17
 8015f18:	ecbd 8b02 	vpop	{d8}
 8015f1c:	bd38      	pop	{r3, r4, r5, pc}
 8015f1e:	bf00      	nop
 8015f20:	20001358 	.word	0x20001358
 8015f24:	00000000 	.word	0x00000000

08015f28 <__ieee754_exp>:
 8015f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f2c:	ec55 4b10 	vmov	r4, r5, d0
 8015f30:	49b1      	ldr	r1, [pc, #708]	; (80161f8 <__ieee754_exp+0x2d0>)
 8015f32:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015f36:	428b      	cmp	r3, r1
 8015f38:	ed2d 8b04 	vpush	{d8-d9}
 8015f3c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8015f40:	d937      	bls.n	8015fb2 <__ieee754_exp+0x8a>
 8015f42:	49ae      	ldr	r1, [pc, #696]	; (80161fc <__ieee754_exp+0x2d4>)
 8015f44:	428b      	cmp	r3, r1
 8015f46:	d916      	bls.n	8015f76 <__ieee754_exp+0x4e>
 8015f48:	ee10 3a10 	vmov	r3, s0
 8015f4c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8015f50:	4313      	orrs	r3, r2
 8015f52:	d009      	beq.n	8015f68 <__ieee754_exp+0x40>
 8015f54:	ee10 2a10 	vmov	r2, s0
 8015f58:	462b      	mov	r3, r5
 8015f5a:	4620      	mov	r0, r4
 8015f5c:	4629      	mov	r1, r5
 8015f5e:	f7ea f987 	bl	8000270 <__adddf3>
 8015f62:	4604      	mov	r4, r0
 8015f64:	460d      	mov	r5, r1
 8015f66:	e000      	b.n	8015f6a <__ieee754_exp+0x42>
 8015f68:	bb06      	cbnz	r6, 8015fac <__ieee754_exp+0x84>
 8015f6a:	ecbd 8b04 	vpop	{d8-d9}
 8015f6e:	ec45 4b10 	vmov	d0, r4, r5
 8015f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f76:	a38a      	add	r3, pc, #552	; (adr r3, 80161a0 <__ieee754_exp+0x278>)
 8015f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f7c:	ee10 0a10 	vmov	r0, s0
 8015f80:	4629      	mov	r1, r5
 8015f82:	f7ea fdbb 	bl	8000afc <__aeabi_dcmpgt>
 8015f86:	b138      	cbz	r0, 8015f98 <__ieee754_exp+0x70>
 8015f88:	a387      	add	r3, pc, #540	; (adr r3, 80161a8 <__ieee754_exp+0x280>)
 8015f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f8e:	4610      	mov	r0, r2
 8015f90:	4619      	mov	r1, r3
 8015f92:	f7ea fb23 	bl	80005dc <__aeabi_dmul>
 8015f96:	e7e4      	b.n	8015f62 <__ieee754_exp+0x3a>
 8015f98:	a385      	add	r3, pc, #532	; (adr r3, 80161b0 <__ieee754_exp+0x288>)
 8015f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f9e:	4620      	mov	r0, r4
 8015fa0:	4629      	mov	r1, r5
 8015fa2:	f7ea fd8d 	bl	8000ac0 <__aeabi_dcmplt>
 8015fa6:	2800      	cmp	r0, #0
 8015fa8:	f000 8087 	beq.w	80160ba <__ieee754_exp+0x192>
 8015fac:	2400      	movs	r4, #0
 8015fae:	2500      	movs	r5, #0
 8015fb0:	e7db      	b.n	8015f6a <__ieee754_exp+0x42>
 8015fb2:	4a93      	ldr	r2, [pc, #588]	; (8016200 <__ieee754_exp+0x2d8>)
 8015fb4:	4293      	cmp	r3, r2
 8015fb6:	f240 80ac 	bls.w	8016112 <__ieee754_exp+0x1ea>
 8015fba:	4a92      	ldr	r2, [pc, #584]	; (8016204 <__ieee754_exp+0x2dc>)
 8015fbc:	4293      	cmp	r3, r2
 8015fbe:	d87c      	bhi.n	80160ba <__ieee754_exp+0x192>
 8015fc0:	4b91      	ldr	r3, [pc, #580]	; (8016208 <__ieee754_exp+0x2e0>)
 8015fc2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fca:	ee10 0a10 	vmov	r0, s0
 8015fce:	4629      	mov	r1, r5
 8015fd0:	f7ea f94c 	bl	800026c <__aeabi_dsub>
 8015fd4:	4b8d      	ldr	r3, [pc, #564]	; (801620c <__ieee754_exp+0x2e4>)
 8015fd6:	00f7      	lsls	r7, r6, #3
 8015fd8:	443b      	add	r3, r7
 8015fda:	ed93 7b00 	vldr	d7, [r3]
 8015fde:	f1c6 0a01 	rsb	sl, r6, #1
 8015fe2:	4680      	mov	r8, r0
 8015fe4:	4689      	mov	r9, r1
 8015fe6:	ebaa 0a06 	sub.w	sl, sl, r6
 8015fea:	eeb0 8a47 	vmov.f32	s16, s14
 8015fee:	eef0 8a67 	vmov.f32	s17, s15
 8015ff2:	ec53 2b18 	vmov	r2, r3, d8
 8015ff6:	4640      	mov	r0, r8
 8015ff8:	4649      	mov	r1, r9
 8015ffa:	f7ea f937 	bl	800026c <__aeabi_dsub>
 8015ffe:	4604      	mov	r4, r0
 8016000:	460d      	mov	r5, r1
 8016002:	4622      	mov	r2, r4
 8016004:	462b      	mov	r3, r5
 8016006:	4620      	mov	r0, r4
 8016008:	4629      	mov	r1, r5
 801600a:	f7ea fae7 	bl	80005dc <__aeabi_dmul>
 801600e:	a36a      	add	r3, pc, #424	; (adr r3, 80161b8 <__ieee754_exp+0x290>)
 8016010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016014:	4606      	mov	r6, r0
 8016016:	460f      	mov	r7, r1
 8016018:	f7ea fae0 	bl	80005dc <__aeabi_dmul>
 801601c:	a368      	add	r3, pc, #416	; (adr r3, 80161c0 <__ieee754_exp+0x298>)
 801601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016022:	f7ea f923 	bl	800026c <__aeabi_dsub>
 8016026:	4632      	mov	r2, r6
 8016028:	463b      	mov	r3, r7
 801602a:	f7ea fad7 	bl	80005dc <__aeabi_dmul>
 801602e:	a366      	add	r3, pc, #408	; (adr r3, 80161c8 <__ieee754_exp+0x2a0>)
 8016030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016034:	f7ea f91c 	bl	8000270 <__adddf3>
 8016038:	4632      	mov	r2, r6
 801603a:	463b      	mov	r3, r7
 801603c:	f7ea face 	bl	80005dc <__aeabi_dmul>
 8016040:	a363      	add	r3, pc, #396	; (adr r3, 80161d0 <__ieee754_exp+0x2a8>)
 8016042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016046:	f7ea f911 	bl	800026c <__aeabi_dsub>
 801604a:	4632      	mov	r2, r6
 801604c:	463b      	mov	r3, r7
 801604e:	f7ea fac5 	bl	80005dc <__aeabi_dmul>
 8016052:	a361      	add	r3, pc, #388	; (adr r3, 80161d8 <__ieee754_exp+0x2b0>)
 8016054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016058:	f7ea f90a 	bl	8000270 <__adddf3>
 801605c:	4632      	mov	r2, r6
 801605e:	463b      	mov	r3, r7
 8016060:	f7ea fabc 	bl	80005dc <__aeabi_dmul>
 8016064:	4602      	mov	r2, r0
 8016066:	460b      	mov	r3, r1
 8016068:	4620      	mov	r0, r4
 801606a:	4629      	mov	r1, r5
 801606c:	f7ea f8fe 	bl	800026c <__aeabi_dsub>
 8016070:	4602      	mov	r2, r0
 8016072:	460b      	mov	r3, r1
 8016074:	4606      	mov	r6, r0
 8016076:	460f      	mov	r7, r1
 8016078:	4620      	mov	r0, r4
 801607a:	4629      	mov	r1, r5
 801607c:	f7ea faae 	bl	80005dc <__aeabi_dmul>
 8016080:	ec41 0b19 	vmov	d9, r0, r1
 8016084:	f1ba 0f00 	cmp.w	sl, #0
 8016088:	d15d      	bne.n	8016146 <__ieee754_exp+0x21e>
 801608a:	2200      	movs	r2, #0
 801608c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016090:	4630      	mov	r0, r6
 8016092:	4639      	mov	r1, r7
 8016094:	f7ea f8ea 	bl	800026c <__aeabi_dsub>
 8016098:	4602      	mov	r2, r0
 801609a:	460b      	mov	r3, r1
 801609c:	ec51 0b19 	vmov	r0, r1, d9
 80160a0:	f7ea fbc6 	bl	8000830 <__aeabi_ddiv>
 80160a4:	4622      	mov	r2, r4
 80160a6:	462b      	mov	r3, r5
 80160a8:	f7ea f8e0 	bl	800026c <__aeabi_dsub>
 80160ac:	4602      	mov	r2, r0
 80160ae:	460b      	mov	r3, r1
 80160b0:	2000      	movs	r0, #0
 80160b2:	4957      	ldr	r1, [pc, #348]	; (8016210 <__ieee754_exp+0x2e8>)
 80160b4:	f7ea f8da 	bl	800026c <__aeabi_dsub>
 80160b8:	e753      	b.n	8015f62 <__ieee754_exp+0x3a>
 80160ba:	4856      	ldr	r0, [pc, #344]	; (8016214 <__ieee754_exp+0x2ec>)
 80160bc:	a348      	add	r3, pc, #288	; (adr r3, 80161e0 <__ieee754_exp+0x2b8>)
 80160be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160c2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80160c6:	4629      	mov	r1, r5
 80160c8:	4620      	mov	r0, r4
 80160ca:	f7ea fa87 	bl	80005dc <__aeabi_dmul>
 80160ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80160d2:	f7ea f8cd 	bl	8000270 <__adddf3>
 80160d6:	f7ea fd31 	bl	8000b3c <__aeabi_d2iz>
 80160da:	4682      	mov	sl, r0
 80160dc:	f7ea fa14 	bl	8000508 <__aeabi_i2d>
 80160e0:	a341      	add	r3, pc, #260	; (adr r3, 80161e8 <__ieee754_exp+0x2c0>)
 80160e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160e6:	4606      	mov	r6, r0
 80160e8:	460f      	mov	r7, r1
 80160ea:	f7ea fa77 	bl	80005dc <__aeabi_dmul>
 80160ee:	4602      	mov	r2, r0
 80160f0:	460b      	mov	r3, r1
 80160f2:	4620      	mov	r0, r4
 80160f4:	4629      	mov	r1, r5
 80160f6:	f7ea f8b9 	bl	800026c <__aeabi_dsub>
 80160fa:	a33d      	add	r3, pc, #244	; (adr r3, 80161f0 <__ieee754_exp+0x2c8>)
 80160fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016100:	4680      	mov	r8, r0
 8016102:	4689      	mov	r9, r1
 8016104:	4630      	mov	r0, r6
 8016106:	4639      	mov	r1, r7
 8016108:	f7ea fa68 	bl	80005dc <__aeabi_dmul>
 801610c:	ec41 0b18 	vmov	d8, r0, r1
 8016110:	e76f      	b.n	8015ff2 <__ieee754_exp+0xca>
 8016112:	4a41      	ldr	r2, [pc, #260]	; (8016218 <__ieee754_exp+0x2f0>)
 8016114:	4293      	cmp	r3, r2
 8016116:	d811      	bhi.n	801613c <__ieee754_exp+0x214>
 8016118:	a323      	add	r3, pc, #140	; (adr r3, 80161a8 <__ieee754_exp+0x280>)
 801611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801611e:	ee10 0a10 	vmov	r0, s0
 8016122:	4629      	mov	r1, r5
 8016124:	f7ea f8a4 	bl	8000270 <__adddf3>
 8016128:	4b39      	ldr	r3, [pc, #228]	; (8016210 <__ieee754_exp+0x2e8>)
 801612a:	2200      	movs	r2, #0
 801612c:	f7ea fce6 	bl	8000afc <__aeabi_dcmpgt>
 8016130:	b138      	cbz	r0, 8016142 <__ieee754_exp+0x21a>
 8016132:	4b37      	ldr	r3, [pc, #220]	; (8016210 <__ieee754_exp+0x2e8>)
 8016134:	2200      	movs	r2, #0
 8016136:	4620      	mov	r0, r4
 8016138:	4629      	mov	r1, r5
 801613a:	e710      	b.n	8015f5e <__ieee754_exp+0x36>
 801613c:	f04f 0a00 	mov.w	sl, #0
 8016140:	e75f      	b.n	8016002 <__ieee754_exp+0xda>
 8016142:	4682      	mov	sl, r0
 8016144:	e75d      	b.n	8016002 <__ieee754_exp+0xda>
 8016146:	4632      	mov	r2, r6
 8016148:	463b      	mov	r3, r7
 801614a:	2000      	movs	r0, #0
 801614c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8016150:	f7ea f88c 	bl	800026c <__aeabi_dsub>
 8016154:	4602      	mov	r2, r0
 8016156:	460b      	mov	r3, r1
 8016158:	ec51 0b19 	vmov	r0, r1, d9
 801615c:	f7ea fb68 	bl	8000830 <__aeabi_ddiv>
 8016160:	4602      	mov	r2, r0
 8016162:	460b      	mov	r3, r1
 8016164:	ec51 0b18 	vmov	r0, r1, d8
 8016168:	f7ea f880 	bl	800026c <__aeabi_dsub>
 801616c:	4642      	mov	r2, r8
 801616e:	464b      	mov	r3, r9
 8016170:	f7ea f87c 	bl	800026c <__aeabi_dsub>
 8016174:	4602      	mov	r2, r0
 8016176:	460b      	mov	r3, r1
 8016178:	2000      	movs	r0, #0
 801617a:	4925      	ldr	r1, [pc, #148]	; (8016210 <__ieee754_exp+0x2e8>)
 801617c:	f7ea f876 	bl	800026c <__aeabi_dsub>
 8016180:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8016184:	4592      	cmp	sl, r2
 8016186:	db02      	blt.n	801618e <__ieee754_exp+0x266>
 8016188:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801618c:	e6e9      	b.n	8015f62 <__ieee754_exp+0x3a>
 801618e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8016192:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8016196:	2200      	movs	r2, #0
 8016198:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801619c:	e6f9      	b.n	8015f92 <__ieee754_exp+0x6a>
 801619e:	bf00      	nop
 80161a0:	fefa39ef 	.word	0xfefa39ef
 80161a4:	40862e42 	.word	0x40862e42
 80161a8:	8800759c 	.word	0x8800759c
 80161ac:	7e37e43c 	.word	0x7e37e43c
 80161b0:	d52d3051 	.word	0xd52d3051
 80161b4:	c0874910 	.word	0xc0874910
 80161b8:	72bea4d0 	.word	0x72bea4d0
 80161bc:	3e663769 	.word	0x3e663769
 80161c0:	c5d26bf1 	.word	0xc5d26bf1
 80161c4:	3ebbbd41 	.word	0x3ebbbd41
 80161c8:	af25de2c 	.word	0xaf25de2c
 80161cc:	3f11566a 	.word	0x3f11566a
 80161d0:	16bebd93 	.word	0x16bebd93
 80161d4:	3f66c16c 	.word	0x3f66c16c
 80161d8:	5555553e 	.word	0x5555553e
 80161dc:	3fc55555 	.word	0x3fc55555
 80161e0:	652b82fe 	.word	0x652b82fe
 80161e4:	3ff71547 	.word	0x3ff71547
 80161e8:	fee00000 	.word	0xfee00000
 80161ec:	3fe62e42 	.word	0x3fe62e42
 80161f0:	35793c76 	.word	0x35793c76
 80161f4:	3dea39ef 	.word	0x3dea39ef
 80161f8:	40862e41 	.word	0x40862e41
 80161fc:	7fefffff 	.word	0x7fefffff
 8016200:	3fd62e42 	.word	0x3fd62e42
 8016204:	3ff0a2b1 	.word	0x3ff0a2b1
 8016208:	08016790 	.word	0x08016790
 801620c:	080167a0 	.word	0x080167a0
 8016210:	3ff00000 	.word	0x3ff00000
 8016214:	08016780 	.word	0x08016780
 8016218:	3e2fffff 	.word	0x3e2fffff

0801621c <__ieee754_sqrt>:
 801621c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016220:	ec55 4b10 	vmov	r4, r5, d0
 8016224:	4e56      	ldr	r6, [pc, #344]	; (8016380 <__ieee754_sqrt+0x164>)
 8016226:	43ae      	bics	r6, r5
 8016228:	ee10 0a10 	vmov	r0, s0
 801622c:	ee10 3a10 	vmov	r3, s0
 8016230:	4629      	mov	r1, r5
 8016232:	462a      	mov	r2, r5
 8016234:	d110      	bne.n	8016258 <__ieee754_sqrt+0x3c>
 8016236:	ee10 2a10 	vmov	r2, s0
 801623a:	462b      	mov	r3, r5
 801623c:	f7ea f9ce 	bl	80005dc <__aeabi_dmul>
 8016240:	4602      	mov	r2, r0
 8016242:	460b      	mov	r3, r1
 8016244:	4620      	mov	r0, r4
 8016246:	4629      	mov	r1, r5
 8016248:	f7ea f812 	bl	8000270 <__adddf3>
 801624c:	4604      	mov	r4, r0
 801624e:	460d      	mov	r5, r1
 8016250:	ec45 4b10 	vmov	d0, r4, r5
 8016254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016258:	2d00      	cmp	r5, #0
 801625a:	dc10      	bgt.n	801627e <__ieee754_sqrt+0x62>
 801625c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016260:	4330      	orrs	r0, r6
 8016262:	d0f5      	beq.n	8016250 <__ieee754_sqrt+0x34>
 8016264:	b15d      	cbz	r5, 801627e <__ieee754_sqrt+0x62>
 8016266:	ee10 2a10 	vmov	r2, s0
 801626a:	462b      	mov	r3, r5
 801626c:	ee10 0a10 	vmov	r0, s0
 8016270:	f7e9 fffc 	bl	800026c <__aeabi_dsub>
 8016274:	4602      	mov	r2, r0
 8016276:	460b      	mov	r3, r1
 8016278:	f7ea fada 	bl	8000830 <__aeabi_ddiv>
 801627c:	e7e6      	b.n	801624c <__ieee754_sqrt+0x30>
 801627e:	1509      	asrs	r1, r1, #20
 8016280:	d076      	beq.n	8016370 <__ieee754_sqrt+0x154>
 8016282:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016286:	07ce      	lsls	r6, r1, #31
 8016288:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801628c:	bf5e      	ittt	pl
 801628e:	0fda      	lsrpl	r2, r3, #31
 8016290:	005b      	lslpl	r3, r3, #1
 8016292:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8016296:	0fda      	lsrs	r2, r3, #31
 8016298:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801629c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80162a0:	2000      	movs	r0, #0
 80162a2:	106d      	asrs	r5, r5, #1
 80162a4:	005b      	lsls	r3, r3, #1
 80162a6:	f04f 0e16 	mov.w	lr, #22
 80162aa:	4684      	mov	ip, r0
 80162ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80162b0:	eb0c 0401 	add.w	r4, ip, r1
 80162b4:	4294      	cmp	r4, r2
 80162b6:	bfde      	ittt	le
 80162b8:	1b12      	suble	r2, r2, r4
 80162ba:	eb04 0c01 	addle.w	ip, r4, r1
 80162be:	1840      	addle	r0, r0, r1
 80162c0:	0052      	lsls	r2, r2, #1
 80162c2:	f1be 0e01 	subs.w	lr, lr, #1
 80162c6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80162ca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80162ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80162d2:	d1ed      	bne.n	80162b0 <__ieee754_sqrt+0x94>
 80162d4:	4671      	mov	r1, lr
 80162d6:	2720      	movs	r7, #32
 80162d8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80162dc:	4562      	cmp	r2, ip
 80162de:	eb04 060e 	add.w	r6, r4, lr
 80162e2:	dc02      	bgt.n	80162ea <__ieee754_sqrt+0xce>
 80162e4:	d113      	bne.n	801630e <__ieee754_sqrt+0xf2>
 80162e6:	429e      	cmp	r6, r3
 80162e8:	d811      	bhi.n	801630e <__ieee754_sqrt+0xf2>
 80162ea:	2e00      	cmp	r6, #0
 80162ec:	eb06 0e04 	add.w	lr, r6, r4
 80162f0:	da43      	bge.n	801637a <__ieee754_sqrt+0x15e>
 80162f2:	f1be 0f00 	cmp.w	lr, #0
 80162f6:	db40      	blt.n	801637a <__ieee754_sqrt+0x15e>
 80162f8:	f10c 0801 	add.w	r8, ip, #1
 80162fc:	eba2 020c 	sub.w	r2, r2, ip
 8016300:	429e      	cmp	r6, r3
 8016302:	bf88      	it	hi
 8016304:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016308:	1b9b      	subs	r3, r3, r6
 801630a:	4421      	add	r1, r4
 801630c:	46c4      	mov	ip, r8
 801630e:	0052      	lsls	r2, r2, #1
 8016310:	3f01      	subs	r7, #1
 8016312:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8016316:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801631a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801631e:	d1dd      	bne.n	80162dc <__ieee754_sqrt+0xc0>
 8016320:	4313      	orrs	r3, r2
 8016322:	d006      	beq.n	8016332 <__ieee754_sqrt+0x116>
 8016324:	1c4c      	adds	r4, r1, #1
 8016326:	bf13      	iteet	ne
 8016328:	3101      	addne	r1, #1
 801632a:	3001      	addeq	r0, #1
 801632c:	4639      	moveq	r1, r7
 801632e:	f021 0101 	bicne.w	r1, r1, #1
 8016332:	1043      	asrs	r3, r0, #1
 8016334:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8016338:	0849      	lsrs	r1, r1, #1
 801633a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801633e:	07c2      	lsls	r2, r0, #31
 8016340:	bf48      	it	mi
 8016342:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8016346:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801634a:	460c      	mov	r4, r1
 801634c:	463d      	mov	r5, r7
 801634e:	e77f      	b.n	8016250 <__ieee754_sqrt+0x34>
 8016350:	0ada      	lsrs	r2, r3, #11
 8016352:	3815      	subs	r0, #21
 8016354:	055b      	lsls	r3, r3, #21
 8016356:	2a00      	cmp	r2, #0
 8016358:	d0fa      	beq.n	8016350 <__ieee754_sqrt+0x134>
 801635a:	02d7      	lsls	r7, r2, #11
 801635c:	d50a      	bpl.n	8016374 <__ieee754_sqrt+0x158>
 801635e:	f1c1 0420 	rsb	r4, r1, #32
 8016362:	fa23 f404 	lsr.w	r4, r3, r4
 8016366:	1e4d      	subs	r5, r1, #1
 8016368:	408b      	lsls	r3, r1
 801636a:	4322      	orrs	r2, r4
 801636c:	1b41      	subs	r1, r0, r5
 801636e:	e788      	b.n	8016282 <__ieee754_sqrt+0x66>
 8016370:	4608      	mov	r0, r1
 8016372:	e7f0      	b.n	8016356 <__ieee754_sqrt+0x13a>
 8016374:	0052      	lsls	r2, r2, #1
 8016376:	3101      	adds	r1, #1
 8016378:	e7ef      	b.n	801635a <__ieee754_sqrt+0x13e>
 801637a:	46e0      	mov	r8, ip
 801637c:	e7be      	b.n	80162fc <__ieee754_sqrt+0xe0>
 801637e:	bf00      	nop
 8016380:	7ff00000 	.word	0x7ff00000

08016384 <finite>:
 8016384:	b082      	sub	sp, #8
 8016386:	ed8d 0b00 	vstr	d0, [sp]
 801638a:	9801      	ldr	r0, [sp, #4]
 801638c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8016390:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016394:	0fc0      	lsrs	r0, r0, #31
 8016396:	b002      	add	sp, #8
 8016398:	4770      	bx	lr
	...

0801639c <_init>:
 801639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801639e:	bf00      	nop
 80163a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80163a2:	bc08      	pop	{r3}
 80163a4:	469e      	mov	lr, r3
 80163a6:	4770      	bx	lr

080163a8 <_fini>:
 80163a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163aa:	bf00      	nop
 80163ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80163ae:	bc08      	pop	{r3}
 80163b0:	469e      	mov	lr, r3
 80163b2:	4770      	bx	lr
