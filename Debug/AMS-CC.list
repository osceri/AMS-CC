
AMS-CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002d7c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0802d950  0802d950  0003d950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e128  0802e128  000403d4  2**0
                  CONTENTS
  4 .ARM          00000008  0802e128  0802e128  0003e128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e130  0802e130  000403d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e130  0802e130  0003e130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802e134  0802e134  0003e134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d4  20000000  0802e138  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000403d4  2**0
                  CONTENTS
 10 .bss          0001dbfc  200003d8  200003d8  000403d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001dfd4  2001dfd4  000403d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000403d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00066d73  00000000  00000000  00040404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a1b9  00000000  00000000  000a7177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00006d58  00000000  00000000  000b1330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000067d8  00000000  00000000  000b8088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cb7d  00000000  00000000  000be860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004a70e  00000000  00000000  000eb3dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010cb56  00000000  00000000  00135aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  00242641  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0001e390  00000000  00000000  0024270c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003d8 	.word	0x200003d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0802d938 	.word	0x0802d938

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003dc 	.word	0x200003dc
 80001cc:	0802d938 	.word	0x0802d938

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001df20 	.word	0x2001df20

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b96e 	b.w	8000f60 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8083 	bne.w	8000db2 <__udivmoddi4+0x116>
 8000cac:	428a      	cmp	r2, r1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	d947      	bls.n	8000d42 <__udivmoddi4+0xa6>
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	b142      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb8:	f1c2 0020 	rsb	r0, r2, #32
 8000cbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	4097      	lsls	r7, r2
 8000cc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cce:	0c23      	lsrs	r3, r4, #16
 8000cd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd4:	fa1f fe87 	uxth.w	lr, r7
 8000cd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x60>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 8119 	bcs.w	8000f24 <__udivmoddi4+0x288>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 8116 	bls.w	8000f24 <__udivmoddi4+0x288>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x8c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	f080 8105 	bcs.w	8000f28 <__udivmoddi4+0x28c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8102 	bls.w	8000f28 <__udivmoddi4+0x28c>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2c:	eba4 040e 	sub.w	r4, r4, lr
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa0>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	b902      	cbnz	r2, 8000d46 <__udivmoddi4+0xaa>
 8000d44:	deff      	udf	#255	; 0xff
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d150      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d4e:	1bcb      	subs	r3, r1, r7
 8000d50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	2601      	movs	r6, #1
 8000d5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5e:	0c21      	lsrs	r1, r4, #16
 8000d60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb08 f30c 	mul.w	r3, r8, ip
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0xe4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0xe2>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	f200 80e9 	bhi.w	8000f50 <__udivmoddi4+0x2b4>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1ac9      	subs	r1, r1, r3
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x10c>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x10a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80d9 	bhi.w	8000f58 <__udivmoddi4+0x2bc>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e7bf      	b.n	8000d32 <__udivmoddi4+0x96>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80b1 	beq.w	8000f1e <__udivmoddi4+0x282>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x1cc>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b8 	bhi.w	8000f4c <__udivmoddi4+0x2b0>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0103 	sbc.w	r1, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	468c      	mov	ip, r1
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0a8      	beq.n	8000d3c <__udivmoddi4+0xa0>
 8000dea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dee:	e7a5      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f603 	lsr.w	r6, r0, r3
 8000df8:	4097      	lsls	r7, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	4330      	orrs	r0, r6
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb06 f108 	mul.w	r1, r6, r8
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x19c>
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e2a:	f080 808d 	bcs.w	8000f48 <__udivmoddi4+0x2ac>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 808a 	bls.w	8000f48 <__udivmoddi4+0x2ac>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	443b      	add	r3, r7
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b281      	uxth	r1, r0
 8000e3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb00 f308 	mul.w	r3, r0, r8
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	1879      	adds	r1, r7, r1
 8000e52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e56:	d273      	bcs.n	8000f40 <__udivmoddi4+0x2a4>
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d971      	bls.n	8000f40 <__udivmoddi4+0x2a4>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4439      	add	r1, r7
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e66:	e778      	b.n	8000d5a <__udivmoddi4+0xbe>
 8000e68:	f1c6 0c20 	rsb	ip, r6, #32
 8000e6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e74:	431c      	orrs	r4, r3
 8000e76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c3b      	lsrs	r3, r7, #16
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fa1f f884 	uxth.w	r8, r4
 8000e92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x220>
 8000eaa:	1861      	adds	r1, r4, r1
 8000eac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb0:	d248      	bcs.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb2:	458a      	cmp	sl, r1
 8000eb4:	d946      	bls.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4421      	add	r1, r4
 8000ebc:	eba1 010a 	sub.w	r1, r1, sl
 8000ec0:	b2bf      	uxth	r7, r7
 8000ec2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ece:	fb00 f808 	mul.w	r8, r0, r8
 8000ed2:	45b8      	cmp	r8, r7
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x24a>
 8000ed6:	19e7      	adds	r7, r4, r7
 8000ed8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000edc:	d22e      	bcs.n	8000f3c <__udivmoddi4+0x2a0>
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d92c      	bls.n	8000f3c <__udivmoddi4+0x2a0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4427      	add	r7, r4
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	eba7 0708 	sub.w	r7, r7, r8
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	454f      	cmp	r7, r9
 8000ef4:	46c6      	mov	lr, r8
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	d31a      	bcc.n	8000f30 <__udivmoddi4+0x294>
 8000efa:	d017      	beq.n	8000f2c <__udivmoddi4+0x290>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x27a>
 8000efe:	ebb3 020e 	subs.w	r2, r3, lr
 8000f02:	eb67 0701 	sbc.w	r7, r7, r1
 8000f06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f0a:	40f2      	lsrs	r2, r6
 8000f0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f10:	40f7      	lsrs	r7, r6
 8000f12:	e9c5 2700 	strd	r2, r7, [r5]
 8000f16:	2600      	movs	r6, #0
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e70b      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fd      	b.n	8000d28 <__udivmoddi4+0x8c>
 8000f2c:	4543      	cmp	r3, r8
 8000f2e:	d2e5      	bcs.n	8000efc <__udivmoddi4+0x260>
 8000f30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f34:	eb69 0104 	sbc.w	r1, r9, r4
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7df      	b.n	8000efc <__udivmoddi4+0x260>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e7d2      	b.n	8000ee6 <__udivmoddi4+0x24a>
 8000f40:	4660      	mov	r0, ip
 8000f42:	e78d      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f44:	4681      	mov	r9, r0
 8000f46:	e7b9      	b.n	8000ebc <__udivmoddi4+0x220>
 8000f48:	4666      	mov	r6, ip
 8000f4a:	e775      	b.n	8000e38 <__udivmoddi4+0x19c>
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	e74a      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f54:	4439      	add	r1, r7
 8000f56:	e713      	b.n	8000d80 <__udivmoddi4+0xe4>
 8000f58:	3802      	subs	r0, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e724      	b.n	8000da8 <__udivmoddi4+0x10c>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	71bb      	strb	r3, [r7, #6]
 8000f72:	4613      	mov	r3, r2
 8000f74:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8000f76:	79fa      	ldrb	r2, [r7, #7]
 8000f78:	79bb      	ldrb	r3, [r7, #6]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	797b      	ldrb	r3, [r7, #5]
 8000f82:	4013      	ands	r3, r2
 8000f84:	b2db      	uxtb	r3, r3
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	80fb      	strh	r3, [r7, #6]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	717b      	strb	r3, [r7, #5]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8000fa4:	88fa      	ldrh	r2, [r7, #6]
 8000fa6:	797b      	ldrb	r3, [r7, #5]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	793b      	ldrb	r3, [r7, #4]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	b2db      	uxtb	r3, r3
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	717b      	strb	r3, [r7, #5]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 8000fd2:	88fa      	ldrh	r2, [r7, #6]
 8000fd4:	797b      	ldrb	r3, [r7, #5]
 8000fd6:	fa42 f303 	asr.w	r3, r2, r3
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	793b      	ldrb	r3, [r7, #4]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	b2db      	uxtb	r3, r3
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	71bb      	strb	r3, [r7, #6]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 8001000:	79fa      	ldrb	r2, [r7, #7]
 8001002:	797b      	ldrb	r3, [r7, #5]
 8001004:	4013      	ands	r3, r2
 8001006:	b2db      	uxtb	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	b29b      	uxth	r3, r3
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	460b      	mov	r3, r1
 800102a:	71bb      	strb	r3, [r7, #6]
 800102c:	4613      	mov	r3, r2
 800102e:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 8001030:	79fa      	ldrb	r2, [r7, #7]
 8001032:	797b      	ldrb	r3, [r7, #5]
 8001034:	4013      	ands	r3, r2
 8001036:	b2db      	uxtb	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	fa42 f303 	asr.w	r3, r2, r3
 8001040:	b2db      	uxtb	r3, r3
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	460b      	mov	r3, r1
 800105a:	71bb      	strb	r3, [r7, #6]
 800105c:	4613      	mov	r3, r2
 800105e:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 8001060:	79fa      	ldrb	r2, [r7, #7]
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	4013      	ands	r3, r2
 8001066:	b2db      	uxtb	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	79bb      	ldrb	r3, [r7, #6]
 800106c:	fa42 f303 	asr.w	r3, r2, r3
 8001070:	b29b      	uxth	r3, r3
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <can1_ams_status_1_pack>:

int can1_ams_status_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_status_1_t *src_p,
    size_t size)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
    uint16_t max_cell_temperature;
    uint16_t min_cell_temperature;

    if (size < 8u) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b07      	cmp	r3, #7
 800108e:	d802      	bhi.n	8001096 <can1_ams_status_1_pack+0x18>
        return (-EINVAL);
 8001090:	f06f 0315 	mvn.w	r3, #21
 8001094:	e0fa      	b.n	800128c <can1_ams_status_1_pack+0x20e>
    }

    memset(&dst_p[0], 0, 8);
 8001096:	2208      	movs	r2, #8
 8001098:	2100      	movs	r1, #0
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f02b fe60 	bl	802cd60 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->charging_status, 0u, 0x03u);
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2203      	movs	r2, #3
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5b 	bl	8000f64 <pack_left_shift_u8>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->air1_closed, 2u, 0x04u);
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	785b      	ldrb	r3, [r3, #1]
 80010c2:	2204      	movs	r2, #4
 80010c4:	2102      	movs	r1, #2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff4c 	bl	8000f64 <pack_left_shift_u8>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->air2_closed, 3u, 0x08u);
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	789b      	ldrb	r3, [r3, #2]
 80010e0:	2208      	movs	r2, #8
 80010e2:	2103      	movs	r1, #3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff3d 	bl	8000f64 <pack_left_shift_u8>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->sc_closed, 4u, 0x10u);
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	78db      	ldrb	r3, [r3, #3]
 80010fe:	2210      	movs	r2, #16
 8001100:	2104      	movs	r1, #4
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff2e 	bl	8000f64 <pack_left_shift_u8>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4313      	orrs	r3, r2
 8001112:	b2da      	uxtb	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->pre_charge_status, 5u, 0x20u);
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	791b      	ldrb	r3, [r3, #4]
 800111c:	2220      	movs	r2, #32
 800111e:	2105      	movs	r1, #5
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff1f 	bl	8000f64 <pack_left_shift_u8>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	4313      	orrs	r3, r2
 8001130:	b2da      	uxtb	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->ams_error, 6u, 0x40u);
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	795b      	ldrb	r3, [r3, #5]
 800113a:	2240      	movs	r2, #64	; 0x40
 800113c:	2106      	movs	r1, #6
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff10 	bl	8000f64 <pack_left_shift_u8>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4313      	orrs	r3, r2
 800114e:	b2da      	uxtb	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->imd_error, 7u, 0x80u);
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	799b      	ldrb	r3, [r3, #6]
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	2107      	movs	r1, #7
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff01 	bl	8000f64 <pack_left_shift_u8>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	4313      	orrs	r3, r2
 800116c:	b2da      	uxtb	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->state_of_charge, 0u, 0xffu);
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	79db      	ldrb	r3, [r3, #7]
 8001176:	22ff      	movs	r2, #255	; 0xff
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fef2 	bl	8000f64 <pack_left_shift_u8>
 8001180:	4603      	mov	r3, r0
 8001182:	4619      	mov	r1, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3301      	adds	r3, #1
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3301      	adds	r3, #1
 800118e:	430a      	orrs	r2, r1
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->min_cell_voltage, 0u, 0xffu);
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	7a1b      	ldrb	r3, [r3, #8]
 8001198:	22ff      	movs	r2, #255	; 0xff
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fee1 	bl	8000f64 <pack_left_shift_u8>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4619      	mov	r1, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3302      	adds	r3, #2
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3302      	adds	r3, #2
 80011b0:	430a      	orrs	r2, r1
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->max_cell_voltage, 0u, 0xffu);
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	7a5b      	ldrb	r3, [r3, #9]
 80011ba:	22ff      	movs	r2, #255	; 0xff
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fed0 	bl	8000f64 <pack_left_shift_u8>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4619      	mov	r1, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3303      	adds	r3, #3
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3303      	adds	r3, #3
 80011d2:	430a      	orrs	r2, r1
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
    min_cell_temperature = (uint16_t)src_p->min_cell_temperature;
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80011de:	82fb      	strh	r3, [r7, #22]
    dst_p[4] |= pack_left_shift_u16(min_cell_temperature, 0u, 0xffu);
 80011e0:	8afb      	ldrh	r3, [r7, #22]
 80011e2:	22ff      	movs	r2, #255	; 0xff
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fed3 	bl	8000f92 <pack_left_shift_u16>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4619      	mov	r1, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3304      	adds	r3, #4
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3304      	adds	r3, #4
 80011fa:	430a      	orrs	r2, r1
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(min_cell_temperature, 8u, 0x0fu);
 8001200:	8afb      	ldrh	r3, [r7, #22]
 8001202:	220f      	movs	r2, #15
 8001204:	2108      	movs	r1, #8
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff feda 	bl	8000fc0 <pack_right_shift_u16>
 800120c:	4603      	mov	r3, r0
 800120e:	4619      	mov	r1, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3305      	adds	r3, #5
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3305      	adds	r3, #5
 800121a:	430a      	orrs	r2, r1
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	701a      	strb	r2, [r3, #0]
    max_cell_temperature = (uint16_t)src_p->max_cell_temperature;
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001226:	82bb      	strh	r3, [r7, #20]
    dst_p[5] |= pack_left_shift_u16(max_cell_temperature, 4u, 0xf0u);
 8001228:	8abb      	ldrh	r3, [r7, #20]
 800122a:	22f0      	movs	r2, #240	; 0xf0
 800122c:	2104      	movs	r1, #4
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff feaf 	bl	8000f92 <pack_left_shift_u16>
 8001234:	4603      	mov	r3, r0
 8001236:	4619      	mov	r1, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3305      	adds	r3, #5
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3305      	adds	r3, #5
 8001242:	430a      	orrs	r2, r1
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_right_shift_u16(max_cell_temperature, 4u, 0xffu);
 8001248:	8abb      	ldrh	r3, [r7, #20]
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	2104      	movs	r1, #4
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff feb6 	bl	8000fc0 <pack_right_shift_u16>
 8001254:	4603      	mov	r3, r0
 8001256:	4619      	mov	r1, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3306      	adds	r3, #6
 800125c:	781a      	ldrb	r2, [r3, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3306      	adds	r3, #6
 8001262:	430a      	orrs	r2, r1
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_left_shift_u8(src_p->fan_speed, 0u, 0xffu);
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	7b9b      	ldrb	r3, [r3, #14]
 800126c:	22ff      	movs	r2, #255	; 0xff
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe77 	bl	8000f64 <pack_left_shift_u8>
 8001276:	4603      	mov	r3, r0
 8001278:	4619      	mov	r1, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3307      	adds	r3, #7
 800127e:	781a      	ldrb	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3307      	adds	r3, #7
 8001284:	430a      	orrs	r2, r1
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	701a      	strb	r2, [r3, #0]

    return (8);
 800128a:	2308      	movs	r3, #8
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <can1_ams_status_1_unpack>:

int can1_ams_status_1_unpack(
    struct can1_ams_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
    uint16_t max_cell_temperature;
    uint16_t min_cell_temperature;

    if (size < 8u) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b07      	cmp	r3, #7
 80012a4:	d802      	bhi.n	80012ac <can1_ams_status_1_unpack+0x18>
        return (-EINVAL);
 80012a6:	f06f 0315 	mvn.w	r3, #21
 80012aa:	e0c9      	b.n	8001440 <can1_ams_status_1_unpack+0x1ac>
    }

    dst_p->charging_status = unpack_right_shift_u8(src_p[0], 0u, 0x03u);
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2203      	movs	r2, #3
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff feb2 	bl	800101e <unpack_right_shift_u8>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	701a      	strb	r2, [r3, #0]
    dst_p->air1_closed = unpack_right_shift_u8(src_p[0], 2u, 0x04u);
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2204      	movs	r2, #4
 80012c8:	2102      	movs	r1, #2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fea7 	bl	800101e <unpack_right_shift_u8>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	705a      	strb	r2, [r3, #1]
    dst_p->air2_closed = unpack_right_shift_u8(src_p[0], 3u, 0x08u);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2208      	movs	r2, #8
 80012de:	2103      	movs	r1, #3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fe9c 	bl	800101e <unpack_right_shift_u8>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	709a      	strb	r2, [r3, #2]
    dst_p->sc_closed = unpack_right_shift_u8(src_p[0], 4u, 0x10u);
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2210      	movs	r2, #16
 80012f4:	2104      	movs	r1, #4
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fe91 	bl	800101e <unpack_right_shift_u8>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	70da      	strb	r2, [r3, #3]
    dst_p->pre_charge_status = unpack_right_shift_u8(src_p[0], 5u, 0x20u);
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2220      	movs	r2, #32
 800130a:	2105      	movs	r1, #5
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe86 	bl	800101e <unpack_right_shift_u8>
 8001312:	4603      	mov	r3, r0
 8001314:	461a      	mov	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	711a      	strb	r2, [r3, #4]
    dst_p->ams_error = unpack_right_shift_u8(src_p[0], 6u, 0x40u);
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2240      	movs	r2, #64	; 0x40
 8001320:	2106      	movs	r1, #6
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fe7b 	bl	800101e <unpack_right_shift_u8>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	715a      	strb	r2, [r3, #5]
    dst_p->imd_error = unpack_right_shift_u8(src_p[0], 7u, 0x80u);
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2280      	movs	r2, #128	; 0x80
 8001336:	2107      	movs	r1, #7
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe70 	bl	800101e <unpack_right_shift_u8>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	719a      	strb	r2, [r3, #6]
    dst_p->state_of_charge = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	3301      	adds	r3, #1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	22ff      	movs	r2, #255	; 0xff
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe64 	bl	800101e <unpack_right_shift_u8>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	71da      	strb	r2, [r3, #7]
    dst_p->min_cell_voltage = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3302      	adds	r3, #2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	22ff      	movs	r2, #255	; 0xff
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fe58 	bl	800101e <unpack_right_shift_u8>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	721a      	strb	r2, [r3, #8]
    dst_p->max_cell_voltage = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	3303      	adds	r3, #3
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	22ff      	movs	r2, #255	; 0xff
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fe4c 	bl	800101e <unpack_right_shift_u8>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	725a      	strb	r2, [r3, #9]
    min_cell_temperature = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	3304      	adds	r3, #4
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	22ff      	movs	r2, #255	; 0xff
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fe58 	bl	800104e <unpack_right_shift_u16>
 800139e:	4603      	mov	r3, r0
 80013a0:	82bb      	strh	r3, [r7, #20]
    min_cell_temperature |= unpack_left_shift_u16(src_p[5], 8u, 0x0fu);
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3305      	adds	r3, #5
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	220f      	movs	r2, #15
 80013aa:	2108      	movs	r1, #8
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fe1e 	bl	8000fee <unpack_left_shift_u16>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	8abb      	ldrh	r3, [r7, #20]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	82bb      	strh	r3, [r7, #20]

    if ((min_cell_temperature & (1u << 11)) != 0u) {
 80013bc:	8abb      	ldrh	r3, [r7, #20]
 80013be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d005      	beq.n	80013d2 <can1_ams_status_1_unpack+0x13e>
        min_cell_temperature |= 0xf000u;
 80013c6:	8abb      	ldrh	r3, [r7, #20]
 80013c8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80013cc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80013d0:	82bb      	strh	r3, [r7, #20]
    }

    dst_p->min_cell_temperature = (int16_t)min_cell_temperature;
 80013d2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	815a      	strh	r2, [r3, #10]
    max_cell_temperature = unpack_right_shift_u16(src_p[5], 4u, 0xf0u);
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3305      	adds	r3, #5
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	22f0      	movs	r2, #240	; 0xf0
 80013e2:	2104      	movs	r1, #4
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fe32 	bl	800104e <unpack_right_shift_u16>
 80013ea:	4603      	mov	r3, r0
 80013ec:	82fb      	strh	r3, [r7, #22]
    max_cell_temperature |= unpack_left_shift_u16(src_p[6], 4u, 0xffu);
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	3306      	adds	r3, #6
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	22ff      	movs	r2, #255	; 0xff
 80013f6:	2104      	movs	r1, #4
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fdf8 	bl	8000fee <unpack_left_shift_u16>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	8afb      	ldrh	r3, [r7, #22]
 8001404:	4313      	orrs	r3, r2
 8001406:	82fb      	strh	r3, [r7, #22]

    if ((max_cell_temperature & (1u << 11)) != 0u) {
 8001408:	8afb      	ldrh	r3, [r7, #22]
 800140a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <can1_ams_status_1_unpack+0x18a>
        max_cell_temperature |= 0xf000u;
 8001412:	8afb      	ldrh	r3, [r7, #22]
 8001414:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001418:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800141c:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->max_cell_temperature = (int16_t)max_cell_temperature;
 800141e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	819a      	strh	r2, [r3, #12]
    dst_p->fan_speed = unpack_right_shift_u8(src_p[7], 0u, 0xffu);
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3307      	adds	r3, #7
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	22ff      	movs	r2, #255	; 0xff
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fdf4 	bl	800101e <unpack_right_shift_u8>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	739a      	strb	r2, [r3, #14]

    return (0);
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <can1_ams_status_1_charging_status_encode>:

uint8_t can1_ams_status_1_charging_status_encode(double value)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001452:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001456:	f7ff fb99 	bl	8000b8c <__aeabi_d2uiz>
 800145a:	4603      	mov	r3, r0
 800145c:	b2db      	uxtb	r3, r3
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <can1_ams_status_1_charging_status_decode>:

double can1_ams_status_1_charging_status_decode(uint8_t value)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f838 	bl	80004e8 <__aeabi_ui2d>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001480:	eeb0 0a47 	vmov.f32	s0, s14
 8001484:	eef0 0a67 	vmov.f32	s1, s15
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <can1_ams_status_1_air1_closed_encode>:
{
    return (value <= 3u);
}

uint8_t can1_ams_status_1_air1_closed_encode(double value)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001498:	e9d7 0100 	ldrd	r0, r1, [r7]
 800149c:	f7ff fb76 	bl	8000b8c <__aeabi_d2uiz>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b2db      	uxtb	r3, r3
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <can1_ams_status_1_air1_closed_decode>:

double can1_ams_status_1_air1_closed_decode(uint8_t value)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f815 	bl	80004e8 <__aeabi_ui2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80014c6:	eeb0 0a47 	vmov.f32	s0, s14
 80014ca:	eef0 0a67 	vmov.f32	s1, s15
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <can1_ams_status_1_air2_closed_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_air2_closed_encode(double value)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80014de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014e2:	f7ff fb53 	bl	8000b8c <__aeabi_d2uiz>
 80014e6:	4603      	mov	r3, r0
 80014e8:	b2db      	uxtb	r3, r3
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <can1_ams_status_1_air2_closed_decode>:

double can1_ams_status_1_air2_closed_decode(uint8_t value)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe fff2 	bl	80004e8 <__aeabi_ui2d>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	ec43 2b17 	vmov	d7, r2, r3
}
 800150c:	eeb0 0a47 	vmov.f32	s0, s14
 8001510:	eef0 0a67 	vmov.f32	s1, s15
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <can1_ams_status_1_sc_closed_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_sc_closed_encode(double value)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001524:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001528:	f7ff fb30 	bl	8000b8c <__aeabi_d2uiz>
 800152c:	4603      	mov	r3, r0
 800152e:	b2db      	uxtb	r3, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <can1_ams_status_1_sc_closed_decode>:

double can1_ams_status_1_sc_closed_decode(uint8_t value)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ffcf 	bl	80004e8 <__aeabi_ui2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001552:	eeb0 0a47 	vmov.f32	s0, s14
 8001556:	eef0 0a67 	vmov.f32	s1, s15
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <can1_ams_status_1_pre_charge_status_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_pre_charge_status_encode(double value)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800156a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800156e:	f7ff fb0d 	bl	8000b8c <__aeabi_d2uiz>
 8001572:	4603      	mov	r3, r0
 8001574:	b2db      	uxtb	r3, r3
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <can1_ams_status_1_pre_charge_status_decode>:

double can1_ams_status_1_pre_charge_status_decode(uint8_t value)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffac 	bl	80004e8 <__aeabi_ui2d>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	ec43 2b17 	vmov	d7, r2, r3
}
 8001598:	eeb0 0a47 	vmov.f32	s0, s14
 800159c:	eef0 0a67 	vmov.f32	s1, s15
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <can1_ams_status_1_ams_error_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_ams_error_encode(double value)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80015b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015b4:	f7ff faea 	bl	8000b8c <__aeabi_d2uiz>
 80015b8:	4603      	mov	r3, r0
 80015ba:	b2db      	uxtb	r3, r3
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <can1_ams_status_1_ams_error_decode>:

double can1_ams_status_1_ams_error_decode(uint8_t value)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ff89 	bl	80004e8 <__aeabi_ui2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	ec43 2b17 	vmov	d7, r2, r3
}
 80015de:	eeb0 0a47 	vmov.f32	s0, s14
 80015e2:	eef0 0a67 	vmov.f32	s1, s15
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <can1_ams_status_1_imd_error_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_imd_error_encode(double value)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80015f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015fa:	f7ff fac7 	bl	8000b8c <__aeabi_d2uiz>
 80015fe:	4603      	mov	r3, r0
 8001600:	b2db      	uxtb	r3, r3
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <can1_ams_status_1_imd_error_decode>:

double can1_ams_status_1_imd_error_decode(uint8_t value)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ff66 	bl	80004e8 <__aeabi_ui2d>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	ec43 2b17 	vmov	d7, r2, r3
}
 8001624:	eeb0 0a47 	vmov.f32	s0, s14
 8001628:	eef0 0a67 	vmov.f32	s1, s15
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <can1_ams_status_1_state_of_charge_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_state_of_charge_encode(double value)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800163c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001640:	f7ff faa4 	bl	8000b8c <__aeabi_d2uiz>
 8001644:	4603      	mov	r3, r0
 8001646:	b2db      	uxtb	r3, r3
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <can1_ams_status_1_state_of_charge_decode>:

double can1_ams_status_1_state_of_charge_decode(uint8_t value)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff43 	bl	80004e8 <__aeabi_ui2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	ec43 2b17 	vmov	d7, r2, r3
}
 800166a:	eeb0 0a47 	vmov.f32	s0, s14
 800166e:	eef0 0a67 	vmov.f32	s1, s15
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <can1_ams_status_1_min_cell_voltage_encode>:
{
    return (value <= 100u);
}

uint8_t can1_ams_status_1_min_cell_voltage_encode(double value)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <can1_ams_status_1_min_cell_voltage_encode+0x50>)
 8001688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800168c:	f7fe fdee 	bl	800026c <__aeabi_dsub>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	a309      	add	r3, pc, #36	; (adr r3, 80016c0 <can1_ams_status_1_min_cell_voltage_encode+0x48>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7ff f8c7 	bl	8000830 <__aeabi_ddiv>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f7ff fa6f 	bl	8000b8c <__aeabi_d2uiz>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b2db      	uxtb	r3, r3
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	f3af 8000 	nop.w
 80016c0:	fcce1c58 	.word	0xfcce1c58
 80016c4:	3f800e6a 	.word	0x3f800e6a
 80016c8:	40040000 	.word	0x40040000
 80016cc:	00000000 	.word	0x00000000

080016d0 <can1_ams_status_1_min_cell_voltage_decode>:

double can1_ams_status_1_min_cell_voltage_decode(uint8_t value)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe ff03 	bl	80004e8 <__aeabi_ui2d>
 80016e2:	a30e      	add	r3, pc, #56	; (adr r3, 800171c <can1_ams_status_1_min_cell_voltage_decode+0x4c>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7fe ff78 	bl	80005dc <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <can1_ams_status_1_min_cell_voltage_decode+0x48>)
 80016fa:	f7fe fdb9 	bl	8000270 <__adddf3>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	ec43 2b17 	vmov	d7, r2, r3
}
 8001706:	eeb0 0a47 	vmov.f32	s0, s14
 800170a:	eef0 0a67 	vmov.f32	s1, s15
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	f3af 8000 	nop.w
 8001718:	40040000 	.word	0x40040000
 800171c:	fcce1c58 	.word	0xfcce1c58
 8001720:	3f800e6a 	.word	0x3f800e6a
 8001724:	00000000 	.word	0x00000000

08001728 <can1_ams_status_1_max_cell_voltage_encode>:

    return (true);
}

uint8_t can1_ams_status_1_max_cell_voltage_encode(double value)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <can1_ams_status_1_max_cell_voltage_encode+0x50>)
 8001738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800173c:	f7fe fd96 	bl	800026c <__aeabi_dsub>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	a309      	add	r3, pc, #36	; (adr r3, 8001770 <can1_ams_status_1_max_cell_voltage_encode+0x48>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7ff f86f 	bl	8000830 <__aeabi_ddiv>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f7ff fa17 	bl	8000b8c <__aeabi_d2uiz>
 800175e:	4603      	mov	r3, r0
 8001760:	b2db      	uxtb	r3, r3
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	f3af 8000 	nop.w
 8001770:	fcce1c58 	.word	0xfcce1c58
 8001774:	3f800e6a 	.word	0x3f800e6a
 8001778:	40040000 	.word	0x40040000
 800177c:	00000000 	.word	0x00000000

08001780 <can1_ams_status_1_max_cell_voltage_decode>:

double can1_ams_status_1_max_cell_voltage_decode(uint8_t value)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe feab 	bl	80004e8 <__aeabi_ui2d>
 8001792:	a30e      	add	r3, pc, #56	; (adr r3, 80017cc <can1_ams_status_1_max_cell_voltage_decode+0x4c>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe ff20 	bl	80005dc <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <can1_ams_status_1_max_cell_voltage_decode+0x48>)
 80017aa:	f7fe fd61 	bl	8000270 <__adddf3>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80017b6:	eeb0 0a47 	vmov.f32	s0, s14
 80017ba:	eef0 0a67 	vmov.f32	s1, s15
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	f3af 8000 	nop.w
 80017c8:	40040000 	.word	0x40040000
 80017cc:	fcce1c58 	.word	0xfcce1c58
 80017d0:	3f800e6a 	.word	0x3f800e6a
 80017d4:	00000000 	.word	0x00000000

080017d8 <can1_ams_status_1_min_cell_temperature_encode>:

    return (true);
}

int16_t can1_ams_status_1_min_cell_temperature_encode(double value)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <can1_ams_status_1_min_cell_temperature_encode+0x50>)
 80017e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ec:	f7fe fd40 	bl	8000270 <__adddf3>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	a309      	add	r3, pc, #36	; (adr r3, 8001820 <can1_ams_status_1_min_cell_temperature_encode+0x48>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7ff f817 	bl	8000830 <__aeabi_ddiv>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f997 	bl	8000b3c <__aeabi_d2iz>
 800180e:	4603      	mov	r3, r0
 8001810:	b21b      	sxth	r3, r3
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	f3af 8000 	nop.w
 8001820:	757928e1 	.word	0x757928e1
 8001824:	3fa9018e 	.word	0x3fa9018e
 8001828:	40240000 	.word	0x40240000
 800182c:	00000000 	.word	0x00000000

08001830 <can1_ams_status_1_min_cell_temperature_decode>:

double can1_ams_status_1_min_cell_temperature_decode(int16_t value)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800183a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe62 	bl	8000508 <__aeabi_i2d>
 8001844:	a30d      	add	r3, pc, #52	; (adr r3, 800187c <can1_ams_status_1_min_cell_temperature_decode+0x4c>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe fec7 	bl	80005dc <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <can1_ams_status_1_min_cell_temperature_decode+0x48>)
 800185c:	f7fe fd06 	bl	800026c <__aeabi_dsub>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	ec43 2b17 	vmov	d7, r2, r3
}
 8001868:	eeb0 0a47 	vmov.f32	s0, s14
 800186c:	eef0 0a67 	vmov.f32	s1, s15
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40240000 	.word	0x40240000
 800187c:	757928e1 	.word	0x757928e1
 8001880:	3fa9018e 	.word	0x3fa9018e
 8001884:	00000000 	.word	0x00000000

08001888 <can1_ams_status_1_max_cell_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_status_1_max_cell_temperature_encode(double value)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <can1_ams_status_1_max_cell_temperature_encode+0x50>)
 8001898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800189c:	f7fe fce8 	bl	8000270 <__adddf3>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	a309      	add	r3, pc, #36	; (adr r3, 80018d0 <can1_ams_status_1_max_cell_temperature_encode+0x48>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe ffbf 	bl	8000830 <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f93f 	bl	8000b3c <__aeabi_d2iz>
 80018be:	4603      	mov	r3, r0
 80018c0:	b21b      	sxth	r3, r3
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	f3af 8000 	nop.w
 80018d0:	757928e1 	.word	0x757928e1
 80018d4:	3fa9018e 	.word	0x3fa9018e
 80018d8:	40240000 	.word	0x40240000
 80018dc:	00000000 	.word	0x00000000

080018e0 <can1_ams_status_1_max_cell_temperature_decode>:

double can1_ams_status_1_max_cell_temperature_decode(int16_t value)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 80018ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe0a 	bl	8000508 <__aeabi_i2d>
 80018f4:	a30d      	add	r3, pc, #52	; (adr r3, 800192c <can1_ams_status_1_max_cell_temperature_decode+0x4c>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	f7fe fe6f 	bl	80005dc <__aeabi_dmul>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4610      	mov	r0, r2
 8001904:	4619      	mov	r1, r3
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <can1_ams_status_1_max_cell_temperature_decode+0x48>)
 800190c:	f7fe fcae 	bl	800026c <__aeabi_dsub>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	ec43 2b17 	vmov	d7, r2, r3
}
 8001918:	eeb0 0a47 	vmov.f32	s0, s14
 800191c:	eef0 0a67 	vmov.f32	s1, s15
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40240000 	.word	0x40240000
 800192c:	757928e1 	.word	0x757928e1
 8001930:	3fa9018e 	.word	0x3fa9018e

08001934 <can1_ams_status_1_fan_speed_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

uint8_t can1_ams_status_1_fan_speed_encode(double value)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800193e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001942:	f7ff f923 	bl	8000b8c <__aeabi_d2uiz>
 8001946:	4603      	mov	r3, r0
 8001948:	b2db      	uxtb	r3, r3
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <can1_ams_status_1_fan_speed_decode>:

double can1_ams_status_1_fan_speed_decode(uint8_t value)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fdc2 	bl	80004e8 <__aeabi_ui2d>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	ec43 2b17 	vmov	d7, r2, r3
}
 800196c:	eeb0 0a47 	vmov.f32	s0, s14
 8001970:	eef0 0a67 	vmov.f32	s1, s15
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <can1_dbu_status_1_unpack>:

int can1_dbu_status_1_unpack(
    struct can1_dbu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
    uint16_t dbu_temperature;

    if (size < 8u) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b07      	cmp	r3, #7
 800198a:	d802      	bhi.n	8001992 <can1_dbu_status_1_unpack+0x18>
        return (-EINVAL);
 800198c:	f06f 0315 	mvn.w	r3, #21
 8001990:	e03b      	b.n	8001a0a <can1_dbu_status_1_unpack+0x90>
    }

    dst_p->activate_ts_button = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2201      	movs	r2, #1
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fb3f 	bl	800101e <unpack_right_shift_u8>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	701a      	strb	r2, [r3, #0]
    dst_p->ready_to_drive_button = unpack_right_shift_u8(src_p[0], 1u, 0x02u);
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2202      	movs	r2, #2
 80019ae:	2101      	movs	r1, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fb34 	bl	800101e <unpack_right_shift_u8>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	705a      	strb	r2, [r3, #1]
    dbu_temperature = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	22f0      	movs	r2, #240	; 0xf0
 80019c4:	2104      	movs	r1, #4
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fb41 	bl	800104e <unpack_right_shift_u16>
 80019cc:	4603      	mov	r3, r0
 80019ce:	82fb      	strh	r3, [r7, #22]
    dbu_temperature |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	3301      	adds	r3, #1
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	22ff      	movs	r2, #255	; 0xff
 80019d8:	2104      	movs	r1, #4
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fb07 	bl	8000fee <unpack_left_shift_u16>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	8afb      	ldrh	r3, [r7, #22]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	82fb      	strh	r3, [r7, #22]

    if ((dbu_temperature & (1u << 11)) != 0u) {
 80019ea:	8afb      	ldrh	r3, [r7, #22]
 80019ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <can1_dbu_status_1_unpack+0x86>
        dbu_temperature |= 0xf000u;
 80019f4:	8afb      	ldrh	r3, [r7, #22]
 80019f6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80019fa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80019fe:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->dbu_temperature = (int16_t)dbu_temperature;
 8001a00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	805a      	strh	r2, [r3, #2]

    return (0);
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <can1_dbu_status_1_activate_ts_button_decode>:
{
    return (uint8_t)(value);
}

double can1_dbu_status_1_activate_ts_button_decode(uint8_t value)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fd62 	bl	80004e8 <__aeabi_ui2d>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a2c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a30:	eef0 0a67 	vmov.f32	s1, s15
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <can1_dbu_status_1_ready_to_drive_button_decode>:
{
    return (uint8_t)(value);
}

double can1_dbu_status_1_ready_to_drive_button_decode(uint8_t value)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd4e 	bl	80004e8 <__aeabi_ui2d>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a54:	eeb0 0a47 	vmov.f32	s0, s14
 8001a58:	eef0 0a67 	vmov.f32	s1, s15
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	0000      	movs	r0, r0
 8001a64:	0000      	movs	r0, r0
	...

08001a68 <can1_dbu_status_1_dbu_temperature_decode>:
{
    return (int16_t)((value - -10.0) / 0.04884);
}

double can1_dbu_status_1_dbu_temperature_decode(int16_t value)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 8001a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fd46 	bl	8000508 <__aeabi_i2d>
 8001a7c:	a30d      	add	r3, pc, #52	; (adr r3, 8001ab4 <can1_dbu_status_1_dbu_temperature_decode+0x4c>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe fdab 	bl	80005dc <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <can1_dbu_status_1_dbu_temperature_decode+0x48>)
 8001a94:	f7fe fbea 	bl	800026c <__aeabi_dsub>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001aa0:	eeb0 0a47 	vmov.f32	s0, s14
 8001aa4:	eef0 0a67 	vmov.f32	s1, s15
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40240000 	.word	0x40240000
 8001ab4:	757928e1 	.word	0x757928e1
 8001ab8:	3fa9018e 	.word	0x3fa9018e

08001abc <can1_ams_temperatures_pack>:

int can1_ams_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_temperatures_t *src_p,
    size_t size)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
    uint16_t aux_1_temperature;
    uint16_t aux_2_temperature;
    uint16_t fuse_resistor_temperature;
    uint16_t pre_charge_resistor_temperature;

    if (size < 6u) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	d802      	bhi.n	8001ad4 <can1_ams_temperatures_pack+0x18>
        return (-EINVAL);
 8001ace:	f06f 0315 	mvn.w	r3, #21
 8001ad2:	e093      	b.n	8001bfc <can1_ams_temperatures_pack+0x140>
    }

    memset(&dst_p[0], 0, 6);
 8001ad4:	2206      	movs	r2, #6
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f02b f941 	bl	802cd60 <memset>

    pre_charge_resistor_temperature = (uint16_t)src_p->pre_charge_resistor_temperature;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae4:	82fb      	strh	r3, [r7, #22]
    dst_p[0] |= pack_left_shift_u16(pre_charge_resistor_temperature, 0u, 0xffu);
 8001ae6:	8afb      	ldrh	r3, [r7, #22]
 8001ae8:	22ff      	movs	r2, #255	; 0xff
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fa50 	bl	8000f92 <pack_left_shift_u16>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(pre_charge_resistor_temperature, 8u, 0x0fu);
 8001b02:	8afb      	ldrh	r3, [r7, #22]
 8001b04:	220f      	movs	r2, #15
 8001b06:	2108      	movs	r1, #8
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fa59 	bl	8000fc0 <pack_right_shift_u16>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4619      	mov	r1, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3301      	adds	r3, #1
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]
    fuse_resistor_temperature = (uint16_t)src_p->fuse_resistor_temperature;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b28:	82bb      	strh	r3, [r7, #20]
    dst_p[1] |= pack_left_shift_u16(fuse_resistor_temperature, 4u, 0xf0u);
 8001b2a:	8abb      	ldrh	r3, [r7, #20]
 8001b2c:	22f0      	movs	r2, #240	; 0xf0
 8001b2e:	2104      	movs	r1, #4
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fa2e 	bl	8000f92 <pack_left_shift_u16>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4619      	mov	r1, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	781a      	ldrb	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3301      	adds	r3, #1
 8001b44:	430a      	orrs	r2, r1
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u16(fuse_resistor_temperature, 4u, 0xffu);
 8001b4a:	8abb      	ldrh	r3, [r7, #20]
 8001b4c:	22ff      	movs	r2, #255	; 0xff
 8001b4e:	2104      	movs	r1, #4
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fa35 	bl	8000fc0 <pack_right_shift_u16>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4619      	mov	r1, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	781a      	ldrb	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3302      	adds	r3, #2
 8001b64:	430a      	orrs	r2, r1
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
    aux_1_temperature = (uint16_t)src_p->aux_1_temperature;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b70:	827b      	strh	r3, [r7, #18]
    dst_p[3] |= pack_left_shift_u16(aux_1_temperature, 0u, 0xffu);
 8001b72:	8a7b      	ldrh	r3, [r7, #18]
 8001b74:	22ff      	movs	r2, #255	; 0xff
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fa0a 	bl	8000f92 <pack_left_shift_u16>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4619      	mov	r1, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3303      	adds	r3, #3
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3303      	adds	r3, #3
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u16(aux_1_temperature, 8u, 0x0fu);
 8001b92:	8a7b      	ldrh	r3, [r7, #18]
 8001b94:	220f      	movs	r2, #15
 8001b96:	2108      	movs	r1, #8
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fa11 	bl	8000fc0 <pack_right_shift_u16>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3304      	adds	r3, #4
 8001bac:	430a      	orrs	r2, r1
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]
    aux_2_temperature = (uint16_t)src_p->aux_2_temperature;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001bb8:	823b      	strh	r3, [r7, #16]
    dst_p[4] |= pack_left_shift_u16(aux_2_temperature, 4u, 0xf0u);
 8001bba:	8a3b      	ldrh	r3, [r7, #16]
 8001bbc:	22f0      	movs	r2, #240	; 0xf0
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff f9e6 	bl	8000f92 <pack_left_shift_u16>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(aux_2_temperature, 4u, 0xffu);
 8001bda:	8a3b      	ldrh	r3, [r7, #16]
 8001bdc:	22ff      	movs	r2, #255	; 0xff
 8001bde:	2104      	movs	r1, #4
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f9ed 	bl	8000fc0 <pack_right_shift_u16>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4619      	mov	r1, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	3305      	adds	r3, #5
 8001bee:	781a      	ldrb	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3305      	adds	r3, #5
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]

    return (6);
 8001bfa:	2306      	movs	r3, #6
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <can1_ams_temperatures_unpack>:

int can1_ams_temperatures_unpack(
    struct can1_ams_temperatures_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
    uint16_t aux_1_temperature;
    uint16_t aux_2_temperature;
    uint16_t fuse_resistor_temperature;
    uint16_t pre_charge_resistor_temperature;

    if (size < 6u) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d802      	bhi.n	8001c1c <can1_ams_temperatures_unpack+0x18>
        return (-EINVAL);
 8001c16:	f06f 0315 	mvn.w	r3, #21
 8001c1a:	e097      	b.n	8001d4c <can1_ams_temperatures_unpack+0x148>
    }

    pre_charge_resistor_temperature = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	22ff      	movs	r2, #255	; 0xff
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fa12 	bl	800104e <unpack_right_shift_u16>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	823b      	strh	r3, [r7, #16]
    pre_charge_resistor_temperature |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	3301      	adds	r3, #1
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	220f      	movs	r2, #15
 8001c36:	2108      	movs	r1, #8
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff f9d8 	bl	8000fee <unpack_left_shift_u16>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	8a3b      	ldrh	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	823b      	strh	r3, [r7, #16]

    if ((pre_charge_resistor_temperature & (1u << 11)) != 0u) {
 8001c48:	8a3b      	ldrh	r3, [r7, #16]
 8001c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d005      	beq.n	8001c5e <can1_ams_temperatures_unpack+0x5a>
        pre_charge_resistor_temperature |= 0xf000u;
 8001c52:	8a3b      	ldrh	r3, [r7, #16]
 8001c54:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001c58:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001c5c:	823b      	strh	r3, [r7, #16]
    }

    dst_p->pre_charge_resistor_temperature = (int16_t)pre_charge_resistor_temperature;
 8001c5e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	801a      	strh	r2, [r3, #0]
    fuse_resistor_temperature = unpack_right_shift_u16(src_p[1], 4u, 0xf0u);
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	22f0      	movs	r2, #240	; 0xf0
 8001c6e:	2104      	movs	r1, #4
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f9ec 	bl	800104e <unpack_right_shift_u16>
 8001c76:	4603      	mov	r3, r0
 8001c78:	827b      	strh	r3, [r7, #18]
    fuse_resistor_temperature |= unpack_left_shift_u16(src_p[2], 4u, 0xffu);
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	22ff      	movs	r2, #255	; 0xff
 8001c82:	2104      	movs	r1, #4
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff f9b2 	bl	8000fee <unpack_left_shift_u16>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	8a7b      	ldrh	r3, [r7, #18]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	827b      	strh	r3, [r7, #18]

    if ((fuse_resistor_temperature & (1u << 11)) != 0u) {
 8001c94:	8a7b      	ldrh	r3, [r7, #18]
 8001c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <can1_ams_temperatures_unpack+0xa6>
        fuse_resistor_temperature |= 0xf000u;
 8001c9e:	8a7b      	ldrh	r3, [r7, #18]
 8001ca0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001ca4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001ca8:	827b      	strh	r3, [r7, #18]
    }

    dst_p->fuse_resistor_temperature = (int16_t)fuse_resistor_temperature;
 8001caa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	805a      	strh	r2, [r3, #2]
    aux_1_temperature = unpack_right_shift_u16(src_p[3], 0u, 0xffu);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	3303      	adds	r3, #3
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	22ff      	movs	r2, #255	; 0xff
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f9c6 	bl	800104e <unpack_right_shift_u16>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	82fb      	strh	r3, [r7, #22]
    aux_1_temperature |= unpack_left_shift_u16(src_p[4], 8u, 0x0fu);
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	220f      	movs	r2, #15
 8001cce:	2108      	movs	r1, #8
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f98c 	bl	8000fee <unpack_left_shift_u16>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	8afb      	ldrh	r3, [r7, #22]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	82fb      	strh	r3, [r7, #22]

    if ((aux_1_temperature & (1u << 11)) != 0u) {
 8001ce0:	8afb      	ldrh	r3, [r7, #22]
 8001ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d005      	beq.n	8001cf6 <can1_ams_temperatures_unpack+0xf2>
        aux_1_temperature |= 0xf000u;
 8001cea:	8afb      	ldrh	r3, [r7, #22]
 8001cec:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001cf0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001cf4:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->aux_1_temperature = (int16_t)aux_1_temperature;
 8001cf6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	809a      	strh	r2, [r3, #4]
    aux_2_temperature = unpack_right_shift_u16(src_p[4], 4u, 0xf0u);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	3304      	adds	r3, #4
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	22f0      	movs	r2, #240	; 0xf0
 8001d06:	2104      	movs	r1, #4
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff f9a0 	bl	800104e <unpack_right_shift_u16>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	82bb      	strh	r3, [r7, #20]
    aux_2_temperature |= unpack_left_shift_u16(src_p[5], 4u, 0xffu);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3305      	adds	r3, #5
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	22ff      	movs	r2, #255	; 0xff
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f966 	bl	8000fee <unpack_left_shift_u16>
 8001d22:	4603      	mov	r3, r0
 8001d24:	461a      	mov	r2, r3
 8001d26:	8abb      	ldrh	r3, [r7, #20]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	82bb      	strh	r3, [r7, #20]

    if ((aux_2_temperature & (1u << 11)) != 0u) {
 8001d2c:	8abb      	ldrh	r3, [r7, #20]
 8001d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <can1_ams_temperatures_unpack+0x13e>
        aux_2_temperature |= 0xf000u;
 8001d36:	8abb      	ldrh	r3, [r7, #20]
 8001d38:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001d3c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001d40:	82bb      	strh	r3, [r7, #20]
    }

    dst_p->aux_2_temperature = (int16_t)aux_2_temperature;
 8001d42:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	80da      	strh	r2, [r3, #6]

    return (0);
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	0000      	movs	r0, r0
	...

08001d58 <can1_ams_temperatures_pre_charge_resistor_temperature_encode>:

int16_t can1_ams_temperatures_pre_charge_resistor_temperature_encode(double value)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <can1_ams_temperatures_pre_charge_resistor_temperature_encode+0x50>)
 8001d68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d6c:	f7fe fa80 	bl	8000270 <__adddf3>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	a309      	add	r3, pc, #36	; (adr r3, 8001da0 <can1_ams_temperatures_pre_charge_resistor_temperature_encode+0x48>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe fd57 	bl	8000830 <__aeabi_ddiv>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f7fe fed7 	bl	8000b3c <__aeabi_d2iz>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	b21b      	sxth	r3, r3
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	f3af 8000 	nop.w
 8001da0:	757928e1 	.word	0x757928e1
 8001da4:	3fa9018e 	.word	0x3fa9018e
 8001da8:	40240000 	.word	0x40240000
 8001dac:	00000000 	.word	0x00000000

08001db0 <can1_ams_temperatures_pre_charge_resistor_temperature_decode>:

double can1_ams_temperatures_pre_charge_resistor_temperature_decode(int16_t value)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 8001dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fba2 	bl	8000508 <__aeabi_i2d>
 8001dc4:	a30d      	add	r3, pc, #52	; (adr r3, 8001dfc <can1_ams_temperatures_pre_charge_resistor_temperature_decode+0x4c>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	f7fe fc07 	bl	80005dc <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <can1_ams_temperatures_pre_charge_resistor_temperature_decode+0x48>)
 8001ddc:	f7fe fa46 	bl	800026c <__aeabi_dsub>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001de8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dec:	eef0 0a67 	vmov.f32	s1, s15
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40240000 	.word	0x40240000
 8001dfc:	757928e1 	.word	0x757928e1
 8001e00:	3fa9018e 	.word	0x3fa9018e
 8001e04:	00000000 	.word	0x00000000

08001e08 <can1_ams_temperatures_fuse_resistor_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_temperatures_fuse_resistor_temperature_encode(double value)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <can1_ams_temperatures_fuse_resistor_temperature_encode+0x50>)
 8001e18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e1c:	f7fe fa28 	bl	8000270 <__adddf3>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	a309      	add	r3, pc, #36	; (adr r3, 8001e50 <can1_ams_temperatures_fuse_resistor_temperature_encode+0x48>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	f7fe fcff 	bl	8000830 <__aeabi_ddiv>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7fe fe7f 	bl	8000b3c <__aeabi_d2iz>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	b21b      	sxth	r3, r3
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	f3af 8000 	nop.w
 8001e50:	757928e1 	.word	0x757928e1
 8001e54:	3fa9018e 	.word	0x3fa9018e
 8001e58:	40240000 	.word	0x40240000
 8001e5c:	00000000 	.word	0x00000000

08001e60 <can1_ams_temperatures_fuse_resistor_temperature_decode>:

double can1_ams_temperatures_fuse_resistor_temperature_decode(int16_t value)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 8001e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fb4a 	bl	8000508 <__aeabi_i2d>
 8001e74:	a30d      	add	r3, pc, #52	; (adr r3, 8001eac <can1_ams_temperatures_fuse_resistor_temperature_decode+0x4c>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	f7fe fbaf 	bl	80005dc <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <can1_ams_temperatures_fuse_resistor_temperature_decode+0x48>)
 8001e8c:	f7fe f9ee 	bl	800026c <__aeabi_dsub>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e98:	eeb0 0a47 	vmov.f32	s0, s14
 8001e9c:	eef0 0a67 	vmov.f32	s1, s15
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40240000 	.word	0x40240000
 8001eac:	757928e1 	.word	0x757928e1
 8001eb0:	3fa9018e 	.word	0x3fa9018e
 8001eb4:	00000000 	.word	0x00000000

08001eb8 <can1_ams_temperatures_aux_1_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_temperatures_aux_1_temperature_encode(double value)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <can1_ams_temperatures_aux_1_temperature_encode+0x50>)
 8001ec8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ecc:	f7fe f9d0 	bl	8000270 <__adddf3>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	a309      	add	r3, pc, #36	; (adr r3, 8001f00 <can1_ams_temperatures_aux_1_temperature_encode+0x48>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe fca7 	bl	8000830 <__aeabi_ddiv>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f7fe fe27 	bl	8000b3c <__aeabi_d2iz>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	b21b      	sxth	r3, r3
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	f3af 8000 	nop.w
 8001f00:	757928e1 	.word	0x757928e1
 8001f04:	3fa9018e 	.word	0x3fa9018e
 8001f08:	40240000 	.word	0x40240000
 8001f0c:	00000000 	.word	0x00000000

08001f10 <can1_ams_temperatures_aux_1_temperature_decode>:

double can1_ams_temperatures_aux_1_temperature_decode(int16_t value)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 8001f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe faf2 	bl	8000508 <__aeabi_i2d>
 8001f24:	a30d      	add	r3, pc, #52	; (adr r3, 8001f5c <can1_ams_temperatures_aux_1_temperature_decode+0x4c>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	f7fe fb57 	bl	80005dc <__aeabi_dmul>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <can1_ams_temperatures_aux_1_temperature_decode+0x48>)
 8001f3c:	f7fe f996 	bl	800026c <__aeabi_dsub>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f48:	eeb0 0a47 	vmov.f32	s0, s14
 8001f4c:	eef0 0a67 	vmov.f32	s1, s15
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40240000 	.word	0x40240000
 8001f5c:	757928e1 	.word	0x757928e1
 8001f60:	3fa9018e 	.word	0x3fa9018e
 8001f64:	00000000 	.word	0x00000000

08001f68 <can1_ams_temperatures_aux_2_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_temperatures_aux_2_temperature_encode(double value)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <can1_ams_temperatures_aux_2_temperature_encode+0x50>)
 8001f78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f7c:	f7fe f978 	bl	8000270 <__adddf3>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	a309      	add	r3, pc, #36	; (adr r3, 8001fb0 <can1_ams_temperatures_aux_2_temperature_encode+0x48>)
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	f7fe fc4f 	bl	8000830 <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f7fe fdcf 	bl	8000b3c <__aeabi_d2iz>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	b21b      	sxth	r3, r3
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	f3af 8000 	nop.w
 8001fb0:	757928e1 	.word	0x757928e1
 8001fb4:	3fa9018e 	.word	0x3fa9018e
 8001fb8:	40240000 	.word	0x40240000
 8001fbc:	00000000 	.word	0x00000000

08001fc0 <can1_ams_temperatures_aux_2_temperature_decode>:

double can1_ams_temperatures_aux_2_temperature_decode(int16_t value)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 8001fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fa9a 	bl	8000508 <__aeabi_i2d>
 8001fd4:	a30d      	add	r3, pc, #52	; (adr r3, 800200c <can1_ams_temperatures_aux_2_temperature_decode+0x4c>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	f7fe faff 	bl	80005dc <__aeabi_dmul>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <can1_ams_temperatures_aux_2_temperature_decode+0x48>)
 8001fec:	f7fe f93e 	bl	800026c <__aeabi_dsub>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ff8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ffc:	eef0 0a67 	vmov.f32	s1, s15
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40240000 	.word	0x40240000
 800200c:	757928e1 	.word	0x757928e1
 8002010:	3fa9018e 	.word	0x3fa9018e

08002014 <can1_ams_cell_voltages_pack>:

int can1_ams_cell_voltages_pack(
    uint8_t *dst_p,
    const struct can1_ams_cell_voltages_t *src_p,
    size_t size)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
    if (size < 7u) {
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b06      	cmp	r3, #6
 8002024:	d803      	bhi.n	800202e <can1_ams_cell_voltages_pack+0x1a>
        return (-EINVAL);
 8002026:	f06f 0315 	mvn.w	r3, #21
 800202a:	f001 b931 	b.w	8003290 <can1_ams_cell_voltages_pack+0x127c>
    }

    memset(&dst_p[0], 0, 7);
 800202e:	2207      	movs	r2, #7
 8002030:	2100      	movs	r1, #0
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f02a fe94 	bl	802cd60 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->voltage_multiplexor, 0u, 0xffu);
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	22ff      	movs	r2, #255	; 0xff
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe ff8f 	bl	8000f64 <pack_left_shift_u8>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	b2da      	uxtb	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	701a      	strb	r2, [r3, #0]

    switch (src_p->voltage_multiplexor) {
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b17      	cmp	r3, #23
 800205c:	f201 8116 	bhi.w	800328c <can1_ams_cell_voltages_pack+0x1278>
 8002060:	a201      	add	r2, pc, #4	; (adr r2, 8002068 <can1_ams_cell_voltages_pack+0x54>)
 8002062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002066:	bf00      	nop
 8002068:	080020c9 	.word	0x080020c9
 800206c:	080021a1 	.word	0x080021a1
 8002070:	08002255 	.word	0x08002255
 8002074:	0800232d 	.word	0x0800232d
 8002078:	080023bd 	.word	0x080023bd
 800207c:	08002495 	.word	0x08002495
 8002080:	08002549 	.word	0x08002549
 8002084:	08002621 	.word	0x08002621
 8002088:	080026b3 	.word	0x080026b3
 800208c:	0800278d 	.word	0x0800278d
 8002090:	08002843 	.word	0x08002843
 8002094:	0800291d 	.word	0x0800291d
 8002098:	080029af 	.word	0x080029af
 800209c:	08002a89 	.word	0x08002a89
 80020a0:	08002b3d 	.word	0x08002b3d
 80020a4:	08002c15 	.word	0x08002c15
 80020a8:	08002ca5 	.word	0x08002ca5
 80020ac:	08002d7d 	.word	0x08002d7d
 80020b0:	08002e31 	.word	0x08002e31
 80020b4:	08002f09 	.word	0x08002f09
 80020b8:	08002f99 	.word	0x08002f99
 80020bc:	08003071 	.word	0x08003071
 80020c0:	08003125 	.word	0x08003125
 80020c4:	080031fd 	.word	0x080031fd

    case 0:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s1, 0u, 0xffu);
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	785b      	ldrb	r3, [r3, #1]
 80020cc:	22ff      	movs	r2, #255	; 0xff
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe ff47 	bl	8000f64 <pack_left_shift_u8>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4619      	mov	r1, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3301      	adds	r3, #1
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3301      	adds	r3, #1
 80020e4:	430a      	orrs	r2, r1
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s1, 0u, 0xffu);
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	7e5b      	ldrb	r3, [r3, #25]
 80020ee:	22ff      	movs	r2, #255	; 0xff
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe ff36 	bl	8000f64 <pack_left_shift_u8>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4619      	mov	r1, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	3302      	adds	r3, #2
 8002100:	781a      	ldrb	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	3302      	adds	r3, #2
 8002106:	430a      	orrs	r2, r1
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s1, 0u, 0xffu);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002112:	22ff      	movs	r2, #255	; 0xff
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe ff24 	bl	8000f64 <pack_left_shift_u8>
 800211c:	4603      	mov	r3, r0
 800211e:	4619      	mov	r1, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3303      	adds	r3, #3
 8002124:	781a      	ldrb	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3303      	adds	r3, #3
 800212a:	430a      	orrs	r2, r1
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s1, 0u, 0xffu);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002136:	22ff      	movs	r2, #255	; 0xff
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe ff12 	bl	8000f64 <pack_left_shift_u8>
 8002140:	4603      	mov	r3, r0
 8002142:	4619      	mov	r1, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3304      	adds	r3, #4
 8002148:	781a      	ldrb	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3304      	adds	r3, #4
 800214e:	430a      	orrs	r2, r1
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s1, 0u, 0xffu);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800215a:	22ff      	movs	r2, #255	; 0xff
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe ff00 	bl	8000f64 <pack_left_shift_u8>
 8002164:	4603      	mov	r3, r0
 8002166:	4619      	mov	r1, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3305      	adds	r3, #5
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3305      	adds	r3, #5
 8002172:	430a      	orrs	r2, r1
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s1, 0u, 0xffu);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800217e:	22ff      	movs	r2, #255	; 0xff
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe feee 	bl	8000f64 <pack_left_shift_u8>
 8002188:	4603      	mov	r3, r0
 800218a:	4619      	mov	r1, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3306      	adds	r3, #6
 8002190:	781a      	ldrb	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3306      	adds	r3, #6
 8002196:	430a      	orrs	r2, r1
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	701a      	strb	r2, [r3, #0]
        break;
 800219c:	f001 b877 	b.w	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 1:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s1, 0u, 0xffu);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	789b      	ldrb	r3, [r3, #2]
 80021a4:	22ff      	movs	r2, #255	; 0xff
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe fedb 	bl	8000f64 <pack_left_shift_u8>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4619      	mov	r1, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3301      	adds	r3, #1
 80021b6:	781a      	ldrb	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3301      	adds	r3, #1
 80021bc:	430a      	orrs	r2, r1
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s1, 0u, 0xffu);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	7e9b      	ldrb	r3, [r3, #26]
 80021c6:	22ff      	movs	r2, #255	; 0xff
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe feca 	bl	8000f64 <pack_left_shift_u8>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4619      	mov	r1, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3302      	adds	r3, #2
 80021d8:	781a      	ldrb	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3302      	adds	r3, #2
 80021de:	430a      	orrs	r2, r1
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s1, 0u, 0xffu);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80021ea:	22ff      	movs	r2, #255	; 0xff
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe feb8 	bl	8000f64 <pack_left_shift_u8>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4619      	mov	r1, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3303      	adds	r3, #3
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3303      	adds	r3, #3
 8002202:	430a      	orrs	r2, r1
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s1, 0u, 0xffu);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800220e:	22ff      	movs	r2, #255	; 0xff
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fea6 	bl	8000f64 <pack_left_shift_u8>
 8002218:	4603      	mov	r3, r0
 800221a:	4619      	mov	r1, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3304      	adds	r3, #4
 8002220:	781a      	ldrb	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3304      	adds	r3, #4
 8002226:	430a      	orrs	r2, r1
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s1, 0u, 0xffu);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002232:	22ff      	movs	r2, #255	; 0xff
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fe94 	bl	8000f64 <pack_left_shift_u8>
 800223c:	4603      	mov	r3, r0
 800223e:	4619      	mov	r1, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	3305      	adds	r3, #5
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3305      	adds	r3, #5
 800224a:	430a      	orrs	r2, r1
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]
        break;
 8002250:	f001 b81d 	b.w	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 2:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s2, 0u, 0xffu);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	78db      	ldrb	r3, [r3, #3]
 8002258:	22ff      	movs	r2, #255	; 0xff
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe fe81 	bl	8000f64 <pack_left_shift_u8>
 8002262:	4603      	mov	r3, r0
 8002264:	4619      	mov	r1, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3301      	adds	r3, #1
 800226a:	781a      	ldrb	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	3301      	adds	r3, #1
 8002270:	430a      	orrs	r2, r1
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s2, 0u, 0xffu);
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	7edb      	ldrb	r3, [r3, #27]
 800227a:	22ff      	movs	r2, #255	; 0xff
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fe70 	bl	8000f64 <pack_left_shift_u8>
 8002284:	4603      	mov	r3, r0
 8002286:	4619      	mov	r1, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3302      	adds	r3, #2
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3302      	adds	r3, #2
 8002292:	430a      	orrs	r2, r1
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s2, 0u, 0xffu);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800229e:	22ff      	movs	r2, #255	; 0xff
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fe5e 	bl	8000f64 <pack_left_shift_u8>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4619      	mov	r1, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3303      	adds	r3, #3
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3303      	adds	r3, #3
 80022b6:	430a      	orrs	r2, r1
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s2, 0u, 0xffu);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80022c2:	22ff      	movs	r2, #255	; 0xff
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fe4c 	bl	8000f64 <pack_left_shift_u8>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4619      	mov	r1, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3304      	adds	r3, #4
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3304      	adds	r3, #4
 80022da:	430a      	orrs	r2, r1
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s2, 0u, 0xffu);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80022e6:	22ff      	movs	r2, #255	; 0xff
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fe3a 	bl	8000f64 <pack_left_shift_u8>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4619      	mov	r1, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3305      	adds	r3, #5
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3305      	adds	r3, #5
 80022fe:	430a      	orrs	r2, r1
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s2, 0u, 0xffu);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800230a:	22ff      	movs	r2, #255	; 0xff
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fe28 	bl	8000f64 <pack_left_shift_u8>
 8002314:	4603      	mov	r3, r0
 8002316:	4619      	mov	r1, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3306      	adds	r3, #6
 800231c:	781a      	ldrb	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3306      	adds	r3, #6
 8002322:	430a      	orrs	r2, r1
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	701a      	strb	r2, [r3, #0]
        break;
 8002328:	f000 bfb1 	b.w	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 3:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s2, 0u, 0xffu);
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	791b      	ldrb	r3, [r3, #4]
 8002330:	22ff      	movs	r2, #255	; 0xff
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fe15 	bl	8000f64 <pack_left_shift_u8>
 800233a:	4603      	mov	r3, r0
 800233c:	4619      	mov	r1, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3301      	adds	r3, #1
 8002342:	781a      	ldrb	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3301      	adds	r3, #1
 8002348:	430a      	orrs	r2, r1
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s2, 0u, 0xffu);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	7f1b      	ldrb	r3, [r3, #28]
 8002352:	22ff      	movs	r2, #255	; 0xff
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fe04 	bl	8000f64 <pack_left_shift_u8>
 800235c:	4603      	mov	r3, r0
 800235e:	4619      	mov	r1, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	3302      	adds	r3, #2
 8002364:	781a      	ldrb	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3302      	adds	r3, #2
 800236a:	430a      	orrs	r2, r1
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s2, 0u, 0xffu);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002376:	22ff      	movs	r2, #255	; 0xff
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fdf2 	bl	8000f64 <pack_left_shift_u8>
 8002380:	4603      	mov	r3, r0
 8002382:	4619      	mov	r1, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3303      	adds	r3, #3
 8002388:	781a      	ldrb	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	3303      	adds	r3, #3
 800238e:	430a      	orrs	r2, r1
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s2, 0u, 0xffu);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800239a:	22ff      	movs	r2, #255	; 0xff
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fde0 	bl	8000f64 <pack_left_shift_u8>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4619      	mov	r1, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3304      	adds	r3, #4
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	3304      	adds	r3, #4
 80023b2:	430a      	orrs	r2, r1
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
        break;
 80023b8:	f000 bf69 	b.w	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 4:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s3, 0u, 0xffu);
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	795b      	ldrb	r3, [r3, #5]
 80023c0:	22ff      	movs	r2, #255	; 0xff
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fdcd 	bl	8000f64 <pack_left_shift_u8>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4619      	mov	r1, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3301      	adds	r3, #1
 80023d2:	781a      	ldrb	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	3301      	adds	r3, #1
 80023d8:	430a      	orrs	r2, r1
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s3, 0u, 0xffu);
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	7f5b      	ldrb	r3, [r3, #29]
 80023e2:	22ff      	movs	r2, #255	; 0xff
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fdbc 	bl	8000f64 <pack_left_shift_u8>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4619      	mov	r1, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3302      	adds	r3, #2
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3302      	adds	r3, #2
 80023fa:	430a      	orrs	r2, r1
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s3, 0u, 0xffu);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002406:	22ff      	movs	r2, #255	; 0xff
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fdaa 	bl	8000f64 <pack_left_shift_u8>
 8002410:	4603      	mov	r3, r0
 8002412:	4619      	mov	r1, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3303      	adds	r3, #3
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3303      	adds	r3, #3
 800241e:	430a      	orrs	r2, r1
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s3, 0u, 0xffu);
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800242a:	22ff      	movs	r2, #255	; 0xff
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fd98 	bl	8000f64 <pack_left_shift_u8>
 8002434:	4603      	mov	r3, r0
 8002436:	4619      	mov	r1, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3304      	adds	r3, #4
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3304      	adds	r3, #4
 8002442:	430a      	orrs	r2, r1
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s3, 0u, 0xffu);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800244e:	22ff      	movs	r2, #255	; 0xff
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fd86 	bl	8000f64 <pack_left_shift_u8>
 8002458:	4603      	mov	r3, r0
 800245a:	4619      	mov	r1, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3305      	adds	r3, #5
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3305      	adds	r3, #5
 8002466:	430a      	orrs	r2, r1
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s3, 0u, 0xffu);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002472:	22ff      	movs	r2, #255	; 0xff
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fd74 	bl	8000f64 <pack_left_shift_u8>
 800247c:	4603      	mov	r3, r0
 800247e:	4619      	mov	r1, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3306      	adds	r3, #6
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3306      	adds	r3, #6
 800248a:	430a      	orrs	r2, r1
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]
        break;
 8002490:	f000 befd 	b.w	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 5:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s3, 0u, 0xffu);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	799b      	ldrb	r3, [r3, #6]
 8002498:	22ff      	movs	r2, #255	; 0xff
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fd61 	bl	8000f64 <pack_left_shift_u8>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4619      	mov	r1, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3301      	adds	r3, #1
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3301      	adds	r3, #1
 80024b0:	430a      	orrs	r2, r1
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s3, 0u, 0xffu);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	7f9b      	ldrb	r3, [r3, #30]
 80024ba:	22ff      	movs	r2, #255	; 0xff
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fd50 	bl	8000f64 <pack_left_shift_u8>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4619      	mov	r1, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3302      	adds	r3, #2
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3302      	adds	r3, #2
 80024d2:	430a      	orrs	r2, r1
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s3, 0u, 0xffu);
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80024de:	22ff      	movs	r2, #255	; 0xff
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fd3e 	bl	8000f64 <pack_left_shift_u8>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4619      	mov	r1, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3303      	adds	r3, #3
 80024f0:	781a      	ldrb	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	3303      	adds	r3, #3
 80024f6:	430a      	orrs	r2, r1
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s3, 0u, 0xffu);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002502:	22ff      	movs	r2, #255	; 0xff
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fd2c 	bl	8000f64 <pack_left_shift_u8>
 800250c:	4603      	mov	r3, r0
 800250e:	4619      	mov	r1, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3304      	adds	r3, #4
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3304      	adds	r3, #4
 800251a:	430a      	orrs	r2, r1
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s3, 0u, 0xffu);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8002526:	22ff      	movs	r2, #255	; 0xff
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fd1a 	bl	8000f64 <pack_left_shift_u8>
 8002530:	4603      	mov	r3, r0
 8002532:	4619      	mov	r1, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3305      	adds	r3, #5
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3305      	adds	r3, #5
 800253e:	430a      	orrs	r2, r1
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	701a      	strb	r2, [r3, #0]
        break;
 8002544:	f000 bea3 	b.w	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 6:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s4, 0u, 0xffu);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	79db      	ldrb	r3, [r3, #7]
 800254c:	22ff      	movs	r2, #255	; 0xff
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fd07 	bl	8000f64 <pack_left_shift_u8>
 8002556:	4603      	mov	r3, r0
 8002558:	4619      	mov	r1, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	3301      	adds	r3, #1
 800255e:	781a      	ldrb	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	3301      	adds	r3, #1
 8002564:	430a      	orrs	r2, r1
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s4, 0u, 0xffu);
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	7fdb      	ldrb	r3, [r3, #31]
 800256e:	22ff      	movs	r2, #255	; 0xff
 8002570:	2100      	movs	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fcf6 	bl	8000f64 <pack_left_shift_u8>
 8002578:	4603      	mov	r3, r0
 800257a:	4619      	mov	r1, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3302      	adds	r3, #2
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3302      	adds	r3, #2
 8002586:	430a      	orrs	r2, r1
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s4, 0u, 0xffu);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002592:	22ff      	movs	r2, #255	; 0xff
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fce4 	bl	8000f64 <pack_left_shift_u8>
 800259c:	4603      	mov	r3, r0
 800259e:	4619      	mov	r1, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3303      	adds	r3, #3
 80025a4:	781a      	ldrb	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3303      	adds	r3, #3
 80025aa:	430a      	orrs	r2, r1
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s4, 0u, 0xffu);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80025b6:	22ff      	movs	r2, #255	; 0xff
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fcd2 	bl	8000f64 <pack_left_shift_u8>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4619      	mov	r1, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3304      	adds	r3, #4
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3304      	adds	r3, #4
 80025ce:	430a      	orrs	r2, r1
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s4, 0u, 0xffu);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80025da:	22ff      	movs	r2, #255	; 0xff
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fcc0 	bl	8000f64 <pack_left_shift_u8>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4619      	mov	r1, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3305      	adds	r3, #5
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3305      	adds	r3, #5
 80025f2:	430a      	orrs	r2, r1
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s4, 0u, 0xffu);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80025fe:	22ff      	movs	r2, #255	; 0xff
 8002600:	2100      	movs	r1, #0
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fcae 	bl	8000f64 <pack_left_shift_u8>
 8002608:	4603      	mov	r3, r0
 800260a:	4619      	mov	r1, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3306      	adds	r3, #6
 8002610:	781a      	ldrb	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3306      	adds	r3, #6
 8002616:	430a      	orrs	r2, r1
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]
        break;
 800261c:	f000 be37 	b.w	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 7:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s4, 0u, 0xffu);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	7a1b      	ldrb	r3, [r3, #8]
 8002624:	22ff      	movs	r2, #255	; 0xff
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fc9b 	bl	8000f64 <pack_left_shift_u8>
 800262e:	4603      	mov	r3, r0
 8002630:	4619      	mov	r1, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	3301      	adds	r3, #1
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3301      	adds	r3, #1
 800263c:	430a      	orrs	r2, r1
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s4, 0u, 0xffu);
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002648:	22ff      	movs	r2, #255	; 0xff
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fc89 	bl	8000f64 <pack_left_shift_u8>
 8002652:	4603      	mov	r3, r0
 8002654:	4619      	mov	r1, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3302      	adds	r3, #2
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3302      	adds	r3, #2
 8002660:	430a      	orrs	r2, r1
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s4, 0u, 0xffu);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800266c:	22ff      	movs	r2, #255	; 0xff
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fc77 	bl	8000f64 <pack_left_shift_u8>
 8002676:	4603      	mov	r3, r0
 8002678:	4619      	mov	r1, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3303      	adds	r3, #3
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3303      	adds	r3, #3
 8002684:	430a      	orrs	r2, r1
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s4, 0u, 0xffu);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002690:	22ff      	movs	r2, #255	; 0xff
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe fc65 	bl	8000f64 <pack_left_shift_u8>
 800269a:	4603      	mov	r3, r0
 800269c:	4619      	mov	r1, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3304      	adds	r3, #4
 80026a2:	781a      	ldrb	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3304      	adds	r3, #4
 80026a8:	430a      	orrs	r2, r1
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]
        break;
 80026ae:	f000 bdee 	b.w	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 8:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s5, 0u, 0xffu);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	7a5b      	ldrb	r3, [r3, #9]
 80026b6:	22ff      	movs	r2, #255	; 0xff
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fc52 	bl	8000f64 <pack_left_shift_u8>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4619      	mov	r1, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3301      	adds	r3, #1
 80026c8:	781a      	ldrb	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3301      	adds	r3, #1
 80026ce:	430a      	orrs	r2, r1
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s5, 0u, 0xffu);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026da:	22ff      	movs	r2, #255	; 0xff
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fc40 	bl	8000f64 <pack_left_shift_u8>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4619      	mov	r1, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3302      	adds	r3, #2
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3302      	adds	r3, #2
 80026f2:	430a      	orrs	r2, r1
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s5, 0u, 0xffu);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026fe:	22ff      	movs	r2, #255	; 0xff
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fc2e 	bl	8000f64 <pack_left_shift_u8>
 8002708:	4603      	mov	r3, r0
 800270a:	4619      	mov	r1, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3303      	adds	r3, #3
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3303      	adds	r3, #3
 8002716:	430a      	orrs	r2, r1
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s5, 0u, 0xffu);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002722:	22ff      	movs	r2, #255	; 0xff
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fc1c 	bl	8000f64 <pack_left_shift_u8>
 800272c:	4603      	mov	r3, r0
 800272e:	4619      	mov	r1, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3304      	adds	r3, #4
 8002734:	781a      	ldrb	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3304      	adds	r3, #4
 800273a:	430a      	orrs	r2, r1
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s5, 0u, 0xffu);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8002746:	22ff      	movs	r2, #255	; 0xff
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fc0a 	bl	8000f64 <pack_left_shift_u8>
 8002750:	4603      	mov	r3, r0
 8002752:	4619      	mov	r1, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3305      	adds	r3, #5
 8002758:	781a      	ldrb	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3305      	adds	r3, #5
 800275e:	430a      	orrs	r2, r1
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s5, 0u, 0xffu);
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800276a:	22ff      	movs	r2, #255	; 0xff
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fbf8 	bl	8000f64 <pack_left_shift_u8>
 8002774:	4603      	mov	r3, r0
 8002776:	4619      	mov	r1, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3306      	adds	r3, #6
 800277c:	781a      	ldrb	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	3306      	adds	r3, #6
 8002782:	430a      	orrs	r2, r1
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	701a      	strb	r2, [r3, #0]
        break;
 8002788:	f000 bd81 	b.w	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 9:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s5, 0u, 0xffu);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	7a9b      	ldrb	r3, [r3, #10]
 8002790:	22ff      	movs	r2, #255	; 0xff
 8002792:	2100      	movs	r1, #0
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe fbe5 	bl	8000f64 <pack_left_shift_u8>
 800279a:	4603      	mov	r3, r0
 800279c:	4619      	mov	r1, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3301      	adds	r3, #1
 80027a2:	781a      	ldrb	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3301      	adds	r3, #1
 80027a8:	430a      	orrs	r2, r1
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s5, 0u, 0xffu);
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80027b4:	22ff      	movs	r2, #255	; 0xff
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe fbd3 	bl	8000f64 <pack_left_shift_u8>
 80027be:	4603      	mov	r3, r0
 80027c0:	4619      	mov	r1, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3302      	adds	r3, #2
 80027c6:	781a      	ldrb	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3302      	adds	r3, #2
 80027cc:	430a      	orrs	r2, r1
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s5, 0u, 0xffu);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027d8:	22ff      	movs	r2, #255	; 0xff
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fbc1 	bl	8000f64 <pack_left_shift_u8>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4619      	mov	r1, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	3303      	adds	r3, #3
 80027ea:	781a      	ldrb	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3303      	adds	r3, #3
 80027f0:	430a      	orrs	r2, r1
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s5, 0u, 0xffu);
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80027fc:	22ff      	movs	r2, #255	; 0xff
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe fbaf 	bl	8000f64 <pack_left_shift_u8>
 8002806:	4603      	mov	r3, r0
 8002808:	4619      	mov	r1, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3304      	adds	r3, #4
 800280e:	781a      	ldrb	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	3304      	adds	r3, #4
 8002814:	430a      	orrs	r2, r1
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s5, 0u, 0xffu);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002820:	22ff      	movs	r2, #255	; 0xff
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fb9d 	bl	8000f64 <pack_left_shift_u8>
 800282a:	4603      	mov	r3, r0
 800282c:	4619      	mov	r1, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3305      	adds	r3, #5
 8002832:	781a      	ldrb	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3305      	adds	r3, #5
 8002838:	430a      	orrs	r2, r1
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]
        break;
 800283e:	f000 bd26 	b.w	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 10:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s6, 0u, 0xffu);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	7adb      	ldrb	r3, [r3, #11]
 8002846:	22ff      	movs	r2, #255	; 0xff
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fb8a 	bl	8000f64 <pack_left_shift_u8>
 8002850:	4603      	mov	r3, r0
 8002852:	4619      	mov	r1, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	3301      	adds	r3, #1
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3301      	adds	r3, #1
 800285e:	430a      	orrs	r2, r1
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s6, 0u, 0xffu);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800286a:	22ff      	movs	r2, #255	; 0xff
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fb78 	bl	8000f64 <pack_left_shift_u8>
 8002874:	4603      	mov	r3, r0
 8002876:	4619      	mov	r1, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3302      	adds	r3, #2
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3302      	adds	r3, #2
 8002882:	430a      	orrs	r2, r1
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s6, 0u, 0xffu);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800288e:	22ff      	movs	r2, #255	; 0xff
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fb66 	bl	8000f64 <pack_left_shift_u8>
 8002898:	4603      	mov	r3, r0
 800289a:	4619      	mov	r1, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3303      	adds	r3, #3
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3303      	adds	r3, #3
 80028a6:	430a      	orrs	r2, r1
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s6, 0u, 0xffu);
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80028b2:	22ff      	movs	r2, #255	; 0xff
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fb54 	bl	8000f64 <pack_left_shift_u8>
 80028bc:	4603      	mov	r3, r0
 80028be:	4619      	mov	r1, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3304      	adds	r3, #4
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3304      	adds	r3, #4
 80028ca:	430a      	orrs	r2, r1
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s6, 0u, 0xffu);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80028d6:	22ff      	movs	r2, #255	; 0xff
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fb42 	bl	8000f64 <pack_left_shift_u8>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4619      	mov	r1, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3305      	adds	r3, #5
 80028e8:	781a      	ldrb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3305      	adds	r3, #5
 80028ee:	430a      	orrs	r2, r1
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s6, 0u, 0xffu);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80028fa:	22ff      	movs	r2, #255	; 0xff
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fb30 	bl	8000f64 <pack_left_shift_u8>
 8002904:	4603      	mov	r3, r0
 8002906:	4619      	mov	r1, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3306      	adds	r3, #6
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3306      	adds	r3, #6
 8002912:	430a      	orrs	r2, r1
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]
        break;
 8002918:	f000 bcb9 	b.w	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 11:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s6, 0u, 0xffu);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	7b1b      	ldrb	r3, [r3, #12]
 8002920:	22ff      	movs	r2, #255	; 0xff
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe fb1d 	bl	8000f64 <pack_left_shift_u8>
 800292a:	4603      	mov	r3, r0
 800292c:	4619      	mov	r1, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3301      	adds	r3, #1
 8002932:	781a      	ldrb	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3301      	adds	r3, #1
 8002938:	430a      	orrs	r2, r1
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s6, 0u, 0xffu);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002944:	22ff      	movs	r2, #255	; 0xff
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fb0b 	bl	8000f64 <pack_left_shift_u8>
 800294e:	4603      	mov	r3, r0
 8002950:	4619      	mov	r1, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3302      	adds	r3, #2
 8002956:	781a      	ldrb	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	3302      	adds	r3, #2
 800295c:	430a      	orrs	r2, r1
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s6, 0u, 0xffu);
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002968:	22ff      	movs	r2, #255	; 0xff
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe faf9 	bl	8000f64 <pack_left_shift_u8>
 8002972:	4603      	mov	r3, r0
 8002974:	4619      	mov	r1, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3303      	adds	r3, #3
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3303      	adds	r3, #3
 8002980:	430a      	orrs	r2, r1
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s6, 0u, 0xffu);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800298c:	22ff      	movs	r2, #255	; 0xff
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fae7 	bl	8000f64 <pack_left_shift_u8>
 8002996:	4603      	mov	r3, r0
 8002998:	4619      	mov	r1, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3304      	adds	r3, #4
 800299e:	781a      	ldrb	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3304      	adds	r3, #4
 80029a4:	430a      	orrs	r2, r1
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
        break;
 80029aa:	f000 bc70 	b.w	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 12:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s7, 0u, 0xffu);
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	7b5b      	ldrb	r3, [r3, #13]
 80029b2:	22ff      	movs	r2, #255	; 0xff
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe fad4 	bl	8000f64 <pack_left_shift_u8>
 80029bc:	4603      	mov	r3, r0
 80029be:	4619      	mov	r1, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3301      	adds	r3, #1
 80029c4:	781a      	ldrb	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3301      	adds	r3, #1
 80029ca:	430a      	orrs	r2, r1
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s7, 0u, 0xffu);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029d6:	22ff      	movs	r2, #255	; 0xff
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fac2 	bl	8000f64 <pack_left_shift_u8>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4619      	mov	r1, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3302      	adds	r3, #2
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3302      	adds	r3, #2
 80029ee:	430a      	orrs	r2, r1
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s7, 0u, 0xffu);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fa:	22ff      	movs	r2, #255	; 0xff
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe fab0 	bl	8000f64 <pack_left_shift_u8>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4619      	mov	r1, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3303      	adds	r3, #3
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3303      	adds	r3, #3
 8002a12:	430a      	orrs	r2, r1
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s7, 0u, 0xffu);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002a1e:	22ff      	movs	r2, #255	; 0xff
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fa9e 	bl	8000f64 <pack_left_shift_u8>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3304      	adds	r3, #4
 8002a36:	430a      	orrs	r2, r1
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s7, 0u, 0xffu);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002a42:	22ff      	movs	r2, #255	; 0xff
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fa8c 	bl	8000f64 <pack_left_shift_u8>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4619      	mov	r1, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3305      	adds	r3, #5
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3305      	adds	r3, #5
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s7, 0u, 0xffu);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8002a66:	22ff      	movs	r2, #255	; 0xff
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fa7a 	bl	8000f64 <pack_left_shift_u8>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4619      	mov	r1, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	3306      	adds	r3, #6
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3306      	adds	r3, #6
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]
        break;
 8002a84:	f000 bc03 	b.w	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 13:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s7, 0u, 0xffu);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	7b9b      	ldrb	r3, [r3, #14]
 8002a8c:	22ff      	movs	r2, #255	; 0xff
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fe fa67 	bl	8000f64 <pack_left_shift_u8>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4619      	mov	r1, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	781a      	ldrb	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s7, 0u, 0xffu);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002ab0:	22ff      	movs	r2, #255	; 0xff
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe fa55 	bl	8000f64 <pack_left_shift_u8>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4619      	mov	r1, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	781a      	ldrb	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s7, 0u, 0xffu);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ad4:	22ff      	movs	r2, #255	; 0xff
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe fa43 	bl	8000f64 <pack_left_shift_u8>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3303      	adds	r3, #3
 8002ae6:	781a      	ldrb	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3303      	adds	r3, #3
 8002aec:	430a      	orrs	r2, r1
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s7, 0u, 0xffu);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002af8:	22ff      	movs	r2, #255	; 0xff
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe fa31 	bl	8000f64 <pack_left_shift_u8>
 8002b02:	4603      	mov	r3, r0
 8002b04:	4619      	mov	r1, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	781a      	ldrb	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	430a      	orrs	r2, r1
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s7, 0u, 0xffu);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8002b1c:	22ff      	movs	r2, #255	; 0xff
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe fa1f 	bl	8000f64 <pack_left_shift_u8>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4619      	mov	r1, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3305      	adds	r3, #5
 8002b2e:	781a      	ldrb	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3305      	adds	r3, #5
 8002b34:	430a      	orrs	r2, r1
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]
        break;
 8002b3a:	e3a8      	b.n	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 14:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s8, 0u, 0xffu);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	7bdb      	ldrb	r3, [r3, #15]
 8002b40:	22ff      	movs	r2, #255	; 0xff
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe fa0d 	bl	8000f64 <pack_left_shift_u8>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3301      	adds	r3, #1
 8002b52:	781a      	ldrb	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3301      	adds	r3, #1
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s8, 0u, 0xffu);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002b64:	22ff      	movs	r2, #255	; 0xff
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe f9fb 	bl	8000f64 <pack_left_shift_u8>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4619      	mov	r1, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3302      	adds	r3, #2
 8002b76:	781a      	ldrb	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s8, 0u, 0xffu);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b88:	22ff      	movs	r2, #255	; 0xff
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe f9e9 	bl	8000f64 <pack_left_shift_u8>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4619      	mov	r1, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3303      	adds	r3, #3
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3303      	adds	r3, #3
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s8, 0u, 0xffu);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002bac:	22ff      	movs	r2, #255	; 0xff
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe f9d7 	bl	8000f64 <pack_left_shift_u8>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4619      	mov	r1, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s8, 0u, 0xffu);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002bd0:	22ff      	movs	r2, #255	; 0xff
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe f9c5 	bl	8000f64 <pack_left_shift_u8>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4619      	mov	r1, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3305      	adds	r3, #5
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3305      	adds	r3, #5
 8002be8:	430a      	orrs	r2, r1
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s8, 0u, 0xffu);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002bf4:	22ff      	movs	r2, #255	; 0xff
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe f9b3 	bl	8000f64 <pack_left_shift_u8>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4619      	mov	r1, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3306      	adds	r3, #6
 8002c06:	781a      	ldrb	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3306      	adds	r3, #6
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]
        break;
 8002c12:	e33c      	b.n	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 15:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s8, 0u, 0xffu);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	7c1b      	ldrb	r3, [r3, #16]
 8002c18:	22ff      	movs	r2, #255	; 0xff
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fe f9a1 	bl	8000f64 <pack_left_shift_u8>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4619      	mov	r1, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	781a      	ldrb	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	430a      	orrs	r2, r1
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s8, 0u, 0xffu);
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c3c:	22ff      	movs	r2, #255	; 0xff
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe f98f 	bl	8000f64 <pack_left_shift_u8>
 8002c46:	4603      	mov	r3, r0
 8002c48:	4619      	mov	r1, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	781a      	ldrb	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3302      	adds	r3, #2
 8002c54:	430a      	orrs	r2, r1
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s8, 0u, 0xffu);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c60:	22ff      	movs	r2, #255	; 0xff
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe f97d 	bl	8000f64 <pack_left_shift_u8>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3303      	adds	r3, #3
 8002c72:	781a      	ldrb	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3303      	adds	r3, #3
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s8, 0u, 0xffu);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c84:	22ff      	movs	r2, #255	; 0xff
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe f96b 	bl	8000f64 <pack_left_shift_u8>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4619      	mov	r1, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3304      	adds	r3, #4
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]
        break;
 8002ca2:	e2f4      	b.n	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 16:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s9, 0u, 0xffu);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	7c5b      	ldrb	r3, [r3, #17]
 8002ca8:	22ff      	movs	r2, #255	; 0xff
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe f959 	bl	8000f64 <pack_left_shift_u8>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	781a      	ldrb	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s9, 0u, 0xffu);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002ccc:	22ff      	movs	r2, #255	; 0xff
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe f947 	bl	8000f64 <pack_left_shift_u8>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4619      	mov	r1, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3302      	adds	r3, #2
 8002cde:	781a      	ldrb	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s9, 0u, 0xffu);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf0:	22ff      	movs	r2, #255	; 0xff
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe f935 	bl	8000f64 <pack_left_shift_u8>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3303      	adds	r3, #3
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3303      	adds	r3, #3
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s9, 0u, 0xffu);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002d14:	22ff      	movs	r2, #255	; 0xff
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe f923 	bl	8000f64 <pack_left_shift_u8>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4619      	mov	r1, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3304      	adds	r3, #4
 8002d26:	781a      	ldrb	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s9, 0u, 0xffu);
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe f911 	bl	8000f64 <pack_left_shift_u8>
 8002d42:	4603      	mov	r3, r0
 8002d44:	4619      	mov	r1, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3305      	adds	r3, #5
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3305      	adds	r3, #5
 8002d50:	430a      	orrs	r2, r1
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s9, 0u, 0xffu);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002d5c:	22ff      	movs	r2, #255	; 0xff
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe f8ff 	bl	8000f64 <pack_left_shift_u8>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4619      	mov	r1, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3306      	adds	r3, #6
 8002d6e:	781a      	ldrb	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3306      	adds	r3, #6
 8002d74:	430a      	orrs	r2, r1
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]
        break;
 8002d7a:	e288      	b.n	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 17:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s9, 0u, 0xffu);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	7c9b      	ldrb	r3, [r3, #18]
 8002d80:	22ff      	movs	r2, #255	; 0xff
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe f8ed 	bl	8000f64 <pack_left_shift_u8>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3301      	adds	r3, #1
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3301      	adds	r3, #1
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s9, 0u, 0xffu);
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002da4:	22ff      	movs	r2, #255	; 0xff
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe f8db 	bl	8000f64 <pack_left_shift_u8>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4619      	mov	r1, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3302      	adds	r3, #2
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3302      	adds	r3, #2
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s9, 0u, 0xffu);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe f8c9 	bl	8000f64 <pack_left_shift_u8>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3303      	adds	r3, #3
 8002dda:	781a      	ldrb	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3303      	adds	r3, #3
 8002de0:	430a      	orrs	r2, r1
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s9, 0u, 0xffu);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8002dec:	22ff      	movs	r2, #255	; 0xff
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe f8b7 	bl	8000f64 <pack_left_shift_u8>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4619      	mov	r1, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3304      	adds	r3, #4
 8002e04:	430a      	orrs	r2, r1
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s9, 0u, 0xffu);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8002e10:	22ff      	movs	r2, #255	; 0xff
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe f8a5 	bl	8000f64 <pack_left_shift_u8>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3305      	adds	r3, #5
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3305      	adds	r3, #5
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
        break;
 8002e2e:	e22e      	b.n	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 18:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s10, 0u, 0xffu);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	7cdb      	ldrb	r3, [r3, #19]
 8002e34:	22ff      	movs	r2, #255	; 0xff
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe f893 	bl	8000f64 <pack_left_shift_u8>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4619      	mov	r1, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3301      	adds	r3, #1
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s10, 0u, 0xffu);
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe f881 	bl	8000f64 <pack_left_shift_u8>
 8002e62:	4603      	mov	r3, r0
 8002e64:	4619      	mov	r1, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3302      	adds	r3, #2
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3302      	adds	r3, #2
 8002e70:	430a      	orrs	r2, r1
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s10, 0u, 0xffu);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e7c:	22ff      	movs	r2, #255	; 0xff
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe f86f 	bl	8000f64 <pack_left_shift_u8>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4619      	mov	r1, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3303      	adds	r3, #3
 8002e8e:	781a      	ldrb	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3303      	adds	r3, #3
 8002e94:	430a      	orrs	r2, r1
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s10, 0u, 0xffu);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002ea0:	22ff      	movs	r2, #255	; 0xff
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe f85d 	bl	8000f64 <pack_left_shift_u8>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4619      	mov	r1, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	781a      	ldrb	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s10, 0u, 0xffu);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8002ec4:	22ff      	movs	r2, #255	; 0xff
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe f84b 	bl	8000f64 <pack_left_shift_u8>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3305      	adds	r3, #5
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3305      	adds	r3, #5
 8002edc:	430a      	orrs	r2, r1
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s10, 0u, 0xffu);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002ee8:	22ff      	movs	r2, #255	; 0xff
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe f839 	bl	8000f64 <pack_left_shift_u8>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3306      	adds	r3, #6
 8002efa:	781a      	ldrb	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3306      	adds	r3, #6
 8002f00:	430a      	orrs	r2, r1
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]
        break;
 8002f06:	e1c2      	b.n	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 19:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s10, 0u, 0xffu);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	7d1b      	ldrb	r3, [r3, #20]
 8002f0c:	22ff      	movs	r2, #255	; 0xff
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe f827 	bl	8000f64 <pack_left_shift_u8>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4619      	mov	r1, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3301      	adds	r3, #1
 8002f24:	430a      	orrs	r2, r1
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s10, 0u, 0xffu);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002f30:	22ff      	movs	r2, #255	; 0xff
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe f815 	bl	8000f64 <pack_left_shift_u8>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3302      	adds	r3, #2
 8002f42:	781a      	ldrb	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3302      	adds	r3, #2
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s10, 0u, 0xffu);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f54:	22ff      	movs	r2, #255	; 0xff
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe f803 	bl	8000f64 <pack_left_shift_u8>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4619      	mov	r1, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3303      	adds	r3, #3
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3303      	adds	r3, #3
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s10, 0u, 0xffu);
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f78:	22ff      	movs	r2, #255	; 0xff
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fff1 	bl	8000f64 <pack_left_shift_u8>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4619      	mov	r1, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	781a      	ldrb	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	430a      	orrs	r2, r1
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]
        break;
 8002f96:	e17a      	b.n	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 20:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s11, 0u, 0xffu);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	7d5b      	ldrb	r3, [r3, #21]
 8002f9c:	22ff      	movs	r2, #255	; 0xff
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd ffdf 	bl	8000f64 <pack_left_shift_u8>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4619      	mov	r1, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3301      	adds	r3, #1
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s11, 0u, 0xffu);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002fc0:	22ff      	movs	r2, #255	; 0xff
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd ffcd 	bl	8000f64 <pack_left_shift_u8>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4619      	mov	r1, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	781a      	ldrb	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s11, 0u, 0xffu);
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fe4:	22ff      	movs	r2, #255	; 0xff
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd ffbb 	bl	8000f64 <pack_left_shift_u8>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3303      	adds	r3, #3
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3303      	adds	r3, #3
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s11, 0u, 0xffu);
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003008:	22ff      	movs	r2, #255	; 0xff
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd ffa9 	bl	8000f64 <pack_left_shift_u8>
 8003012:	4603      	mov	r3, r0
 8003014:	4619      	mov	r1, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3304      	adds	r3, #4
 800301a:	781a      	ldrb	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3304      	adds	r3, #4
 8003020:	430a      	orrs	r2, r1
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s11, 0u, 0xffu);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800302c:	22ff      	movs	r2, #255	; 0xff
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd ff97 	bl	8000f64 <pack_left_shift_u8>
 8003036:	4603      	mov	r3, r0
 8003038:	4619      	mov	r1, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3305      	adds	r3, #5
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3305      	adds	r3, #5
 8003044:	430a      	orrs	r2, r1
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s11, 0u, 0xffu);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003050:	22ff      	movs	r2, #255	; 0xff
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd ff85 	bl	8000f64 <pack_left_shift_u8>
 800305a:	4603      	mov	r3, r0
 800305c:	4619      	mov	r1, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3306      	adds	r3, #6
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3306      	adds	r3, #6
 8003068:	430a      	orrs	r2, r1
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]
        break;
 800306e:	e10e      	b.n	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 21:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s11, 0u, 0xffu);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	7d9b      	ldrb	r3, [r3, #22]
 8003074:	22ff      	movs	r2, #255	; 0xff
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd ff73 	bl	8000f64 <pack_left_shift_u8>
 800307e:	4603      	mov	r3, r0
 8003080:	4619      	mov	r1, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3301      	adds	r3, #1
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3301      	adds	r3, #1
 800308c:	430a      	orrs	r2, r1
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s11, 0u, 0xffu);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003098:	22ff      	movs	r2, #255	; 0xff
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd ff61 	bl	8000f64 <pack_left_shift_u8>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4619      	mov	r1, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3302      	adds	r3, #2
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3302      	adds	r3, #2
 80030b0:	430a      	orrs	r2, r1
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s11, 0u, 0xffu);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80030bc:	22ff      	movs	r2, #255	; 0xff
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd ff4f 	bl	8000f64 <pack_left_shift_u8>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4619      	mov	r1, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3303      	adds	r3, #3
 80030ce:	781a      	ldrb	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3303      	adds	r3, #3
 80030d4:	430a      	orrs	r2, r1
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s11, 0u, 0xffu);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80030e0:	22ff      	movs	r2, #255	; 0xff
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd ff3d 	bl	8000f64 <pack_left_shift_u8>
 80030ea:	4603      	mov	r3, r0
 80030ec:	4619      	mov	r1, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3304      	adds	r3, #4
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3304      	adds	r3, #4
 80030f8:	430a      	orrs	r2, r1
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s11, 0u, 0xffu);
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003104:	22ff      	movs	r2, #255	; 0xff
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd ff2b 	bl	8000f64 <pack_left_shift_u8>
 800310e:	4603      	mov	r3, r0
 8003110:	4619      	mov	r1, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3305      	adds	r3, #5
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3305      	adds	r3, #5
 800311c:	430a      	orrs	r2, r1
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]
        break;
 8003122:	e0b4      	b.n	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 22:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s12, 0u, 0xffu);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	7ddb      	ldrb	r3, [r3, #23]
 8003128:	22ff      	movs	r2, #255	; 0xff
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd ff19 	bl	8000f64 <pack_left_shift_u8>
 8003132:	4603      	mov	r3, r0
 8003134:	4619      	mov	r1, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3301      	adds	r3, #1
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3301      	adds	r3, #1
 8003140:	430a      	orrs	r2, r1
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s12, 0u, 0xffu);
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800314c:	22ff      	movs	r2, #255	; 0xff
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd ff07 	bl	8000f64 <pack_left_shift_u8>
 8003156:	4603      	mov	r3, r0
 8003158:	4619      	mov	r1, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3302      	adds	r3, #2
 800315e:	781a      	ldrb	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3302      	adds	r3, #2
 8003164:	430a      	orrs	r2, r1
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s12, 0u, 0xffu);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003170:	22ff      	movs	r2, #255	; 0xff
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd fef5 	bl	8000f64 <pack_left_shift_u8>
 800317a:	4603      	mov	r3, r0
 800317c:	4619      	mov	r1, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3303      	adds	r3, #3
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3303      	adds	r3, #3
 8003188:	430a      	orrs	r2, r1
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s12, 0u, 0xffu);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8003194:	22ff      	movs	r2, #255	; 0xff
 8003196:	2100      	movs	r1, #0
 8003198:	4618      	mov	r0, r3
 800319a:	f7fd fee3 	bl	8000f64 <pack_left_shift_u8>
 800319e:	4603      	mov	r3, r0
 80031a0:	4619      	mov	r1, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3304      	adds	r3, #4
 80031a6:	781a      	ldrb	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3304      	adds	r3, #4
 80031ac:	430a      	orrs	r2, r1
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s12, 0u, 0xffu);
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80031b8:	22ff      	movs	r2, #255	; 0xff
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd fed1 	bl	8000f64 <pack_left_shift_u8>
 80031c2:	4603      	mov	r3, r0
 80031c4:	4619      	mov	r1, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3305      	adds	r3, #5
 80031ca:	781a      	ldrb	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3305      	adds	r3, #5
 80031d0:	430a      	orrs	r2, r1
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s12, 0u, 0xffu);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80031dc:	22ff      	movs	r2, #255	; 0xff
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd febf 	bl	8000f64 <pack_left_shift_u8>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4619      	mov	r1, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3306      	adds	r3, #6
 80031ee:	781a      	ldrb	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3306      	adds	r3, #6
 80031f4:	430a      	orrs	r2, r1
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]
        break;
 80031fa:	e048      	b.n	800328e <can1_ams_cell_voltages_pack+0x127a>

    case 23:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s12, 0u, 0xffu);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	7e1b      	ldrb	r3, [r3, #24]
 8003200:	22ff      	movs	r2, #255	; 0xff
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd fead 	bl	8000f64 <pack_left_shift_u8>
 800320a:	4603      	mov	r3, r0
 800320c:	4619      	mov	r1, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3301      	adds	r3, #1
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3301      	adds	r3, #1
 8003218:	430a      	orrs	r2, r1
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s12, 0u, 0xffu);
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003224:	22ff      	movs	r2, #255	; 0xff
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd fe9b 	bl	8000f64 <pack_left_shift_u8>
 800322e:	4603      	mov	r3, r0
 8003230:	4619      	mov	r1, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3302      	adds	r3, #2
 8003236:	781a      	ldrb	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3302      	adds	r3, #2
 800323c:	430a      	orrs	r2, r1
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s12, 0u, 0xffu);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003248:	22ff      	movs	r2, #255	; 0xff
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd fe89 	bl	8000f64 <pack_left_shift_u8>
 8003252:	4603      	mov	r3, r0
 8003254:	4619      	mov	r1, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3303      	adds	r3, #3
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3303      	adds	r3, #3
 8003260:	430a      	orrs	r2, r1
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s12, 0u, 0xffu);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800326c:	22ff      	movs	r2, #255	; 0xff
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd fe77 	bl	8000f64 <pack_left_shift_u8>
 8003276:	4603      	mov	r3, r0
 8003278:	4619      	mov	r1, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3304      	adds	r3, #4
 800327e:	781a      	ldrb	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3304      	adds	r3, #4
 8003284:	430a      	orrs	r2, r1
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]
        break;
 800328a:	e000      	b.n	800328e <can1_ams_cell_voltages_pack+0x127a>

    default:
        break;
 800328c:	bf00      	nop
    }

    return (7);
 800328e:	2307      	movs	r3, #7
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <can1_ams_cell_voltages_unpack>:

int can1_ams_cell_voltages_unpack(
    struct can1_ams_cell_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
    if (size < 7u) {
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	d803      	bhi.n	80032b2 <can1_ams_cell_voltages_unpack+0x1a>
        return (-EINVAL);
 80032aa:	f06f 0315 	mvn.w	r3, #21
 80032ae:	f000 beac 	b.w	800400a <can1_ams_cell_voltages_unpack+0xd72>
    }

    dst_p->voltage_multiplexor = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	22ff      	movs	r2, #255	; 0xff
 80032b8:	2100      	movs	r1, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd feaf 	bl	800101e <unpack_right_shift_u8>
 80032c0:	4603      	mov	r3, r0
 80032c2:	461a      	mov	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	701a      	strb	r2, [r3, #0]

    switch (dst_p->voltage_multiplexor) {
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b17      	cmp	r3, #23
 80032ce:	f200 869a 	bhi.w	8004006 <can1_ams_cell_voltages_unpack+0xd6e>
 80032d2:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <can1_ams_cell_voltages_unpack+0x40>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	08003339 	.word	0x08003339
 80032dc:	080033d5 	.word	0x080033d5
 80032e0:	08003457 	.word	0x08003457
 80032e4:	080034f3 	.word	0x080034f3
 80032e8:	0800355b 	.word	0x0800355b
 80032ec:	080035f7 	.word	0x080035f7
 80032f0:	08003679 	.word	0x08003679
 80032f4:	08003715 	.word	0x08003715
 80032f8:	0800377f 	.word	0x0800377f
 80032fc:	0800381b 	.word	0x0800381b
 8003300:	0800389d 	.word	0x0800389d
 8003304:	08003939 	.word	0x08003939
 8003308:	080039a1 	.word	0x080039a1
 800330c:	08003a3d 	.word	0x08003a3d
 8003310:	08003abf 	.word	0x08003abf
 8003314:	08003b5b 	.word	0x08003b5b
 8003318:	08003bc3 	.word	0x08003bc3
 800331c:	08003c5f 	.word	0x08003c5f
 8003320:	08003ce1 	.word	0x08003ce1
 8003324:	08003d7d 	.word	0x08003d7d
 8003328:	08003de5 	.word	0x08003de5
 800332c:	08003e81 	.word	0x08003e81
 8003330:	08003f03 	.word	0x08003f03
 8003334:	08003f9f 	.word	0x08003f9f

    case 0:
        dst_p->v1s1 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	3301      	adds	r3, #1
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	22ff      	movs	r2, #255	; 0xff
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd fe6b 	bl	800101e <unpack_right_shift_u8>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	705a      	strb	r2, [r3, #1]
        dst_p->v2s1 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	3302      	adds	r3, #2
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	22ff      	movs	r2, #255	; 0xff
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd fe5f 	bl	800101e <unpack_right_shift_u8>
 8003360:	4603      	mov	r3, r0
 8003362:	461a      	mov	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	765a      	strb	r2, [r3, #25]
        dst_p->v3s1 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	3303      	adds	r3, #3
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	22ff      	movs	r2, #255	; 0xff
 8003370:	2100      	movs	r1, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd fe53 	bl	800101e <unpack_right_shift_u8>
 8003378:	4603      	mov	r3, r0
 800337a:	461a      	mov	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        dst_p->v4s1 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3304      	adds	r3, #4
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	22ff      	movs	r2, #255	; 0xff
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd fe46 	bl	800101e <unpack_right_shift_u8>
 8003392:	4603      	mov	r3, r0
 8003394:	461a      	mov	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        dst_p->v5s1 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	3305      	adds	r3, #5
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	22ff      	movs	r2, #255	; 0xff
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd fe39 	bl	800101e <unpack_right_shift_u8>
 80033ac:	4603      	mov	r3, r0
 80033ae:	461a      	mov	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        dst_p->v6s1 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	3306      	adds	r3, #6
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	22ff      	movs	r2, #255	; 0xff
 80033be:	2100      	movs	r1, #0
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fd fe2c 	bl	800101e <unpack_right_shift_u8>
 80033c6:	4603      	mov	r3, r0
 80033c8:	461a      	mov	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
        break;
 80033d0:	f000 be1a 	b.w	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 1:
        dst_p->v7s1 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	3301      	adds	r3, #1
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	22ff      	movs	r2, #255	; 0xff
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd fe1d 	bl	800101e <unpack_right_shift_u8>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	709a      	strb	r2, [r3, #2]
        dst_p->v8s1 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	3302      	adds	r3, #2
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	22ff      	movs	r2, #255	; 0xff
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd fe11 	bl	800101e <unpack_right_shift_u8>
 80033fc:	4603      	mov	r3, r0
 80033fe:	461a      	mov	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	769a      	strb	r2, [r3, #26]
        dst_p->v9s1 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	3303      	adds	r3, #3
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	22ff      	movs	r2, #255	; 0xff
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f7fd fe05 	bl	800101e <unpack_right_shift_u8>
 8003414:	4603      	mov	r3, r0
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        dst_p->v10s1 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	3304      	adds	r3, #4
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	22ff      	movs	r2, #255	; 0xff
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd fdf8 	bl	800101e <unpack_right_shift_u8>
 800342e:	4603      	mov	r3, r0
 8003430:	461a      	mov	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        dst_p->v11s1 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	3305      	adds	r3, #5
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	22ff      	movs	r2, #255	; 0xff
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd fdeb 	bl	800101e <unpack_right_shift_u8>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
        break;
 8003452:	f000 bdd9 	b.w	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 2:
        dst_p->v1s2 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	3301      	adds	r3, #1
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	22ff      	movs	r2, #255	; 0xff
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f7fd fddc 	bl	800101e <unpack_right_shift_u8>
 8003466:	4603      	mov	r3, r0
 8003468:	461a      	mov	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	70da      	strb	r2, [r3, #3]
        dst_p->v2s2 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	3302      	adds	r3, #2
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	22ff      	movs	r2, #255	; 0xff
 8003476:	2100      	movs	r1, #0
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd fdd0 	bl	800101e <unpack_right_shift_u8>
 800347e:	4603      	mov	r3, r0
 8003480:	461a      	mov	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	76da      	strb	r2, [r3, #27]
        dst_p->v3s2 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	3303      	adds	r3, #3
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd fdc4 	bl	800101e <unpack_right_shift_u8>
 8003496:	4603      	mov	r3, r0
 8003498:	461a      	mov	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        dst_p->v4s2 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3304      	adds	r3, #4
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	22ff      	movs	r2, #255	; 0xff
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd fdb7 	bl	800101e <unpack_right_shift_u8>
 80034b0:	4603      	mov	r3, r0
 80034b2:	461a      	mov	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        dst_p->v5s2 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	3305      	adds	r3, #5
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	22ff      	movs	r2, #255	; 0xff
 80034c2:	2100      	movs	r1, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fd fdaa 	bl	800101e <unpack_right_shift_u8>
 80034ca:	4603      	mov	r3, r0
 80034cc:	461a      	mov	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
        dst_p->v6s2 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	3306      	adds	r3, #6
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	22ff      	movs	r2, #255	; 0xff
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd fd9d 	bl	800101e <unpack_right_shift_u8>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        break;
 80034ee:	f000 bd8b 	b.w	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 3:
        dst_p->v7s2 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	3301      	adds	r3, #1
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	22ff      	movs	r2, #255	; 0xff
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd fd8e 	bl	800101e <unpack_right_shift_u8>
 8003502:	4603      	mov	r3, r0
 8003504:	461a      	mov	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	711a      	strb	r2, [r3, #4]
        dst_p->v8s2 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	3302      	adds	r3, #2
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	22ff      	movs	r2, #255	; 0xff
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f7fd fd82 	bl	800101e <unpack_right_shift_u8>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	771a      	strb	r2, [r3, #28]
        dst_p->v9s2 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	3303      	adds	r3, #3
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	22ff      	movs	r2, #255	; 0xff
 800352a:	2100      	movs	r1, #0
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fd76 	bl	800101e <unpack_right_shift_u8>
 8003532:	4603      	mov	r3, r0
 8003534:	461a      	mov	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        dst_p->v10s2 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	3304      	adds	r3, #4
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	22ff      	movs	r2, #255	; 0xff
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f7fd fd69 	bl	800101e <unpack_right_shift_u8>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        break;
 8003556:	f000 bd57 	b.w	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 4:
        dst_p->v1s3 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	3301      	adds	r3, #1
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	22ff      	movs	r2, #255	; 0xff
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd fd5a 	bl	800101e <unpack_right_shift_u8>
 800356a:	4603      	mov	r3, r0
 800356c:	461a      	mov	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	715a      	strb	r2, [r3, #5]
        dst_p->v2s3 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	3302      	adds	r3, #2
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	22ff      	movs	r2, #255	; 0xff
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f7fd fd4e 	bl	800101e <unpack_right_shift_u8>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	775a      	strb	r2, [r3, #29]
        dst_p->v3s3 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	3303      	adds	r3, #3
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	22ff      	movs	r2, #255	; 0xff
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f7fd fd42 	bl	800101e <unpack_right_shift_u8>
 800359a:	4603      	mov	r3, r0
 800359c:	461a      	mov	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        dst_p->v4s3 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	3304      	adds	r3, #4
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	22ff      	movs	r2, #255	; 0xff
 80035ac:	2100      	movs	r1, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fd fd35 	bl	800101e <unpack_right_shift_u8>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461a      	mov	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        dst_p->v5s3 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	3305      	adds	r3, #5
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	22ff      	movs	r2, #255	; 0xff
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fd fd28 	bl	800101e <unpack_right_shift_u8>
 80035ce:	4603      	mov	r3, r0
 80035d0:	461a      	mov	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        dst_p->v6s3 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	3306      	adds	r3, #6
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	22ff      	movs	r2, #255	; 0xff
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd fd1b 	bl	800101e <unpack_right_shift_u8>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        break;
 80035f2:	f000 bd09 	b.w	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 5:
        dst_p->v7s3 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	3301      	adds	r3, #1
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	22ff      	movs	r2, #255	; 0xff
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f7fd fd0c 	bl	800101e <unpack_right_shift_u8>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	719a      	strb	r2, [r3, #6]
        dst_p->v8s3 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3302      	adds	r3, #2
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	22ff      	movs	r2, #255	; 0xff
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f7fd fd00 	bl	800101e <unpack_right_shift_u8>
 800361e:	4603      	mov	r3, r0
 8003620:	461a      	mov	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	779a      	strb	r2, [r3, #30]
        dst_p->v9s3 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	3303      	adds	r3, #3
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	22ff      	movs	r2, #255	; 0xff
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f7fd fcf4 	bl	800101e <unpack_right_shift_u8>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        dst_p->v10s3 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	3304      	adds	r3, #4
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	22ff      	movs	r2, #255	; 0xff
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fce7 	bl	800101e <unpack_right_shift_u8>
 8003650:	4603      	mov	r3, r0
 8003652:	461a      	mov	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        dst_p->v11s3 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	3305      	adds	r3, #5
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	22ff      	movs	r2, #255	; 0xff
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f7fd fcda 	bl	800101e <unpack_right_shift_u8>
 800366a:	4603      	mov	r3, r0
 800366c:	461a      	mov	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        break;
 8003674:	f000 bcc8 	b.w	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 6:
        dst_p->v1s4 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	3301      	adds	r3, #1
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	22ff      	movs	r2, #255	; 0xff
 8003680:	2100      	movs	r1, #0
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd fccb 	bl	800101e <unpack_right_shift_u8>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	71da      	strb	r2, [r3, #7]
        dst_p->v2s4 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	3302      	adds	r3, #2
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	22ff      	movs	r2, #255	; 0xff
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fcbf 	bl	800101e <unpack_right_shift_u8>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	77da      	strb	r2, [r3, #31]
        dst_p->v3s4 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	3303      	adds	r3, #3
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	22ff      	movs	r2, #255	; 0xff
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fd fcb3 	bl	800101e <unpack_right_shift_u8>
 80036b8:	4603      	mov	r3, r0
 80036ba:	461a      	mov	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
        dst_p->v4s4 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	3304      	adds	r3, #4
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	22ff      	movs	r2, #255	; 0xff
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fd fca6 	bl	800101e <unpack_right_shift_u8>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
        dst_p->v5s4 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	3305      	adds	r3, #5
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	22ff      	movs	r2, #255	; 0xff
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fc99 	bl	800101e <unpack_right_shift_u8>
 80036ec:	4603      	mov	r3, r0
 80036ee:	461a      	mov	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
        dst_p->v6s4 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	3306      	adds	r3, #6
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	22ff      	movs	r2, #255	; 0xff
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f7fd fc8c 	bl	800101e <unpack_right_shift_u8>
 8003706:	4603      	mov	r3, r0
 8003708:	461a      	mov	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
        break;
 8003710:	f000 bc7a 	b.w	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 7:
        dst_p->v7s4 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	3301      	adds	r3, #1
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	22ff      	movs	r2, #255	; 0xff
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f7fd fc7d 	bl	800101e <unpack_right_shift_u8>
 8003724:	4603      	mov	r3, r0
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	721a      	strb	r2, [r3, #8]
        dst_p->v8s4 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	3302      	adds	r3, #2
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	22ff      	movs	r2, #255	; 0xff
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd fc71 	bl	800101e <unpack_right_shift_u8>
 800373c:	4603      	mov	r3, r0
 800373e:	461a      	mov	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f883 2020 	strb.w	r2, [r3, #32]
        dst_p->v9s4 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	3303      	adds	r3, #3
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	22ff      	movs	r2, #255	; 0xff
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f7fd fc64 	bl	800101e <unpack_right_shift_u8>
 8003756:	4603      	mov	r3, r0
 8003758:	461a      	mov	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        dst_p->v10s4 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	3304      	adds	r3, #4
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	22ff      	movs	r2, #255	; 0xff
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd fc57 	bl	800101e <unpack_right_shift_u8>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        break;
 800377a:	f000 bc45 	b.w	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 8:
        dst_p->v1s5 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	3301      	adds	r3, #1
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	22ff      	movs	r2, #255	; 0xff
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f7fd fc48 	bl	800101e <unpack_right_shift_u8>
 800378e:	4603      	mov	r3, r0
 8003790:	461a      	mov	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	725a      	strb	r2, [r3, #9]
        dst_p->v2s5 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	3302      	adds	r3, #2
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	22ff      	movs	r2, #255	; 0xff
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fd fc3c 	bl	800101e <unpack_right_shift_u8>
 80037a6:	4603      	mov	r3, r0
 80037a8:	461a      	mov	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        dst_p->v3s5 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	3303      	adds	r3, #3
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	22ff      	movs	r2, #255	; 0xff
 80037b8:	2100      	movs	r1, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fd fc2f 	bl	800101e <unpack_right_shift_u8>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        dst_p->v4s5 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3304      	adds	r3, #4
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	22ff      	movs	r2, #255	; 0xff
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fd fc22 	bl	800101e <unpack_right_shift_u8>
 80037da:	4603      	mov	r3, r0
 80037dc:	461a      	mov	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        dst_p->v5s5 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	3305      	adds	r3, #5
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	22ff      	movs	r2, #255	; 0xff
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd fc15 	bl	800101e <unpack_right_shift_u8>
 80037f4:	4603      	mov	r3, r0
 80037f6:	461a      	mov	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        dst_p->v6s5 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	3306      	adds	r3, #6
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	22ff      	movs	r2, #255	; 0xff
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f7fd fc08 	bl	800101e <unpack_right_shift_u8>
 800380e:	4603      	mov	r3, r0
 8003810:	461a      	mov	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        break;
 8003818:	e3f6      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 9:
        dst_p->v7s5 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	3301      	adds	r3, #1
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	22ff      	movs	r2, #255	; 0xff
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f7fd fbfa 	bl	800101e <unpack_right_shift_u8>
 800382a:	4603      	mov	r3, r0
 800382c:	461a      	mov	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	729a      	strb	r2, [r3, #10]
        dst_p->v8s5 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	3302      	adds	r3, #2
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	22ff      	movs	r2, #255	; 0xff
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f7fd fbee 	bl	800101e <unpack_right_shift_u8>
 8003842:	4603      	mov	r3, r0
 8003844:	461a      	mov	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        dst_p->v9s5 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	3303      	adds	r3, #3
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	22ff      	movs	r2, #255	; 0xff
 8003854:	2100      	movs	r1, #0
 8003856:	4618      	mov	r0, r3
 8003858:	f7fd fbe1 	bl	800101e <unpack_right_shift_u8>
 800385c:	4603      	mov	r3, r0
 800385e:	461a      	mov	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        dst_p->v10s5 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	3304      	adds	r3, #4
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	22ff      	movs	r2, #255	; 0xff
 800386e:	2100      	movs	r1, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f7fd fbd4 	bl	800101e <unpack_right_shift_u8>
 8003876:	4603      	mov	r3, r0
 8003878:	461a      	mov	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        dst_p->v11s5 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	3305      	adds	r3, #5
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	22ff      	movs	r2, #255	; 0xff
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd fbc7 	bl	800101e <unpack_right_shift_u8>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        break;
 800389a:	e3b5      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 10:
        dst_p->v1s6 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	3301      	adds	r3, #1
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	22ff      	movs	r2, #255	; 0xff
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fbb9 	bl	800101e <unpack_right_shift_u8>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461a      	mov	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	72da      	strb	r2, [r3, #11]
        dst_p->v2s6 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	3302      	adds	r3, #2
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	22ff      	movs	r2, #255	; 0xff
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd fbad 	bl	800101e <unpack_right_shift_u8>
 80038c4:	4603      	mov	r3, r0
 80038c6:	461a      	mov	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        dst_p->v3s6 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	3303      	adds	r3, #3
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	22ff      	movs	r2, #255	; 0xff
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fd fba0 	bl	800101e <unpack_right_shift_u8>
 80038de:	4603      	mov	r3, r0
 80038e0:	461a      	mov	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
        dst_p->v4s6 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	3304      	adds	r3, #4
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	22ff      	movs	r2, #255	; 0xff
 80038f0:	2100      	movs	r1, #0
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fd fb93 	bl	800101e <unpack_right_shift_u8>
 80038f8:	4603      	mov	r3, r0
 80038fa:	461a      	mov	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
        dst_p->v5s6 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	3305      	adds	r3, #5
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	22ff      	movs	r2, #255	; 0xff
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f7fd fb86 	bl	800101e <unpack_right_shift_u8>
 8003912:	4603      	mov	r3, r0
 8003914:	461a      	mov	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        dst_p->v6s6 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	3306      	adds	r3, #6
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	22ff      	movs	r2, #255	; 0xff
 8003924:	2100      	movs	r1, #0
 8003926:	4618      	mov	r0, r3
 8003928:	f7fd fb79 	bl	800101e <unpack_right_shift_u8>
 800392c:	4603      	mov	r3, r0
 800392e:	461a      	mov	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        break;
 8003936:	e367      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 11:
        dst_p->v7s6 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	3301      	adds	r3, #1
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	22ff      	movs	r2, #255	; 0xff
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd fb6b 	bl	800101e <unpack_right_shift_u8>
 8003948:	4603      	mov	r3, r0
 800394a:	461a      	mov	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	731a      	strb	r2, [r3, #12]
        dst_p->v8s6 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	3302      	adds	r3, #2
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	22ff      	movs	r2, #255	; 0xff
 8003958:	2100      	movs	r1, #0
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd fb5f 	bl	800101e <unpack_right_shift_u8>
 8003960:	4603      	mov	r3, r0
 8003962:	461a      	mov	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        dst_p->v9s6 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	3303      	adds	r3, #3
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	22ff      	movs	r2, #255	; 0xff
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd fb52 	bl	800101e <unpack_right_shift_u8>
 800397a:	4603      	mov	r3, r0
 800397c:	461a      	mov	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        dst_p->v10s6 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	3304      	adds	r3, #4
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	22ff      	movs	r2, #255	; 0xff
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f7fd fb45 	bl	800101e <unpack_right_shift_u8>
 8003994:	4603      	mov	r3, r0
 8003996:	461a      	mov	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        break;
 800399e:	e333      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 12:
        dst_p->v1s7 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	3301      	adds	r3, #1
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	22ff      	movs	r2, #255	; 0xff
 80039a8:	2100      	movs	r1, #0
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd fb37 	bl	800101e <unpack_right_shift_u8>
 80039b0:	4603      	mov	r3, r0
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	735a      	strb	r2, [r3, #13]
        dst_p->v2s7 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	3302      	adds	r3, #2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	22ff      	movs	r2, #255	; 0xff
 80039c0:	2100      	movs	r1, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd fb2b 	bl	800101e <unpack_right_shift_u8>
 80039c8:	4603      	mov	r3, r0
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        dst_p->v3s7 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	3303      	adds	r3, #3
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	22ff      	movs	r2, #255	; 0xff
 80039da:	2100      	movs	r1, #0
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fd fb1e 	bl	800101e <unpack_right_shift_u8>
 80039e2:	4603      	mov	r3, r0
 80039e4:	461a      	mov	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        dst_p->v4s7 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	3304      	adds	r3, #4
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	22ff      	movs	r2, #255	; 0xff
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fd fb11 	bl	800101e <unpack_right_shift_u8>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        dst_p->v5s7 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3305      	adds	r3, #5
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	22ff      	movs	r2, #255	; 0xff
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fd fb04 	bl	800101e <unpack_right_shift_u8>
 8003a16:	4603      	mov	r3, r0
 8003a18:	461a      	mov	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        dst_p->v6s7 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	3306      	adds	r3, #6
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	22ff      	movs	r2, #255	; 0xff
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd faf7 	bl	800101e <unpack_right_shift_u8>
 8003a30:	4603      	mov	r3, r0
 8003a32:	461a      	mov	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
        break;
 8003a3a:	e2e5      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 13:
        dst_p->v7s7 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	22ff      	movs	r2, #255	; 0xff
 8003a44:	2100      	movs	r1, #0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fd fae9 	bl	800101e <unpack_right_shift_u8>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	739a      	strb	r2, [r3, #14]
        dst_p->v8s7 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	3302      	adds	r3, #2
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	22ff      	movs	r2, #255	; 0xff
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fd fadd 	bl	800101e <unpack_right_shift_u8>
 8003a64:	4603      	mov	r3, r0
 8003a66:	461a      	mov	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        dst_p->v9s7 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	3303      	adds	r3, #3
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	22ff      	movs	r2, #255	; 0xff
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fd fad0 	bl	800101e <unpack_right_shift_u8>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	461a      	mov	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        dst_p->v10s7 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	22ff      	movs	r2, #255	; 0xff
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd fac3 	bl	800101e <unpack_right_shift_u8>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
        dst_p->v11s7 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	3305      	adds	r3, #5
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	22ff      	movs	r2, #255	; 0xff
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fd fab6 	bl	800101e <unpack_right_shift_u8>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        break;
 8003abc:	e2a4      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 14:
        dst_p->v1s8 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	22ff      	movs	r2, #255	; 0xff
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fd faa8 	bl	800101e <unpack_right_shift_u8>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	73da      	strb	r2, [r3, #15]
        dst_p->v2s8 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	3302      	adds	r3, #2
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	22ff      	movs	r2, #255	; 0xff
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd fa9c 	bl	800101e <unpack_right_shift_u8>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        dst_p->v3s8 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	3303      	adds	r3, #3
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	22ff      	movs	r2, #255	; 0xff
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd fa8f 	bl	800101e <unpack_right_shift_u8>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461a      	mov	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        dst_p->v4s8 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	22ff      	movs	r2, #255	; 0xff
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fd fa82 	bl	800101e <unpack_right_shift_u8>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        dst_p->v5s8 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	3305      	adds	r3, #5
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	22ff      	movs	r2, #255	; 0xff
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fa75 	bl	800101e <unpack_right_shift_u8>
 8003b34:	4603      	mov	r3, r0
 8003b36:	461a      	mov	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        dst_p->v6s8 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	3306      	adds	r3, #6
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	22ff      	movs	r2, #255	; 0xff
 8003b46:	2100      	movs	r1, #0
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd fa68 	bl	800101e <unpack_right_shift_u8>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	461a      	mov	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        break;
 8003b58:	e256      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 15:
        dst_p->v7s8 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	22ff      	movs	r2, #255	; 0xff
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fd fa5a 	bl	800101e <unpack_right_shift_u8>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	741a      	strb	r2, [r3, #16]
        dst_p->v8s8 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	3302      	adds	r3, #2
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	22ff      	movs	r2, #255	; 0xff
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fd fa4e 	bl	800101e <unpack_right_shift_u8>
 8003b82:	4603      	mov	r3, r0
 8003b84:	461a      	mov	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        dst_p->v9s8 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	3303      	adds	r3, #3
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	22ff      	movs	r2, #255	; 0xff
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd fa41 	bl	800101e <unpack_right_shift_u8>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        dst_p->v10s8 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	22ff      	movs	r2, #255	; 0xff
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fd fa34 	bl	800101e <unpack_right_shift_u8>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        break;
 8003bc0:	e222      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 16:
        dst_p->v1s9 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	22ff      	movs	r2, #255	; 0xff
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd fa26 	bl	800101e <unpack_right_shift_u8>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	745a      	strb	r2, [r3, #17]
        dst_p->v2s9 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	3302      	adds	r3, #2
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	22ff      	movs	r2, #255	; 0xff
 8003be2:	2100      	movs	r1, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fd fa1a 	bl	800101e <unpack_right_shift_u8>
 8003bea:	4603      	mov	r3, r0
 8003bec:	461a      	mov	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        dst_p->v3s9 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	3303      	adds	r3, #3
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	22ff      	movs	r2, #255	; 0xff
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fd fa0d 	bl	800101e <unpack_right_shift_u8>
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        dst_p->v4s9 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	3304      	adds	r3, #4
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	22ff      	movs	r2, #255	; 0xff
 8003c16:	2100      	movs	r1, #0
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fd fa00 	bl	800101e <unpack_right_shift_u8>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	461a      	mov	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        dst_p->v5s9 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	3305      	adds	r3, #5
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	22ff      	movs	r2, #255	; 0xff
 8003c30:	2100      	movs	r1, #0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd f9f3 	bl	800101e <unpack_right_shift_u8>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        dst_p->v6s9 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	3306      	adds	r3, #6
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	22ff      	movs	r2, #255	; 0xff
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fd f9e6 	bl	800101e <unpack_right_shift_u8>
 8003c52:	4603      	mov	r3, r0
 8003c54:	461a      	mov	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        break;
 8003c5c:	e1d4      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 17:
        dst_p->v7s9 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	3301      	adds	r3, #1
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	22ff      	movs	r2, #255	; 0xff
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fd f9d8 	bl	800101e <unpack_right_shift_u8>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	461a      	mov	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	749a      	strb	r2, [r3, #18]
        dst_p->v8s9 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	3302      	adds	r3, #2
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	22ff      	movs	r2, #255	; 0xff
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fd f9cc 	bl	800101e <unpack_right_shift_u8>
 8003c86:	4603      	mov	r3, r0
 8003c88:	461a      	mov	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        dst_p->v9s9 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	3303      	adds	r3, #3
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	22ff      	movs	r2, #255	; 0xff
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fd f9bf 	bl	800101e <unpack_right_shift_u8>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        dst_p->v10s9 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	3304      	adds	r3, #4
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	22ff      	movs	r2, #255	; 0xff
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fd f9b2 	bl	800101e <unpack_right_shift_u8>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
        dst_p->v11s9 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	3305      	adds	r3, #5
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	22ff      	movs	r2, #255	; 0xff
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fd f9a5 	bl	800101e <unpack_right_shift_u8>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
        break;
 8003cde:	e193      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 18:
        dst_p->v1s10 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	22ff      	movs	r2, #255	; 0xff
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd f997 	bl	800101e <unpack_right_shift_u8>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	74da      	strb	r2, [r3, #19]
        dst_p->v2s10 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	22ff      	movs	r2, #255	; 0xff
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fd f98b 	bl	800101e <unpack_right_shift_u8>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        dst_p->v3s10 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	3303      	adds	r3, #3
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	22ff      	movs	r2, #255	; 0xff
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fd f97e 	bl	800101e <unpack_right_shift_u8>
 8003d22:	4603      	mov	r3, r0
 8003d24:	461a      	mov	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        dst_p->v4s10 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	22ff      	movs	r2, #255	; 0xff
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd f971 	bl	800101e <unpack_right_shift_u8>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
        dst_p->v5s10 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	3305      	adds	r3, #5
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	22ff      	movs	r2, #255	; 0xff
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fd f964 	bl	800101e <unpack_right_shift_u8>
 8003d56:	4603      	mov	r3, r0
 8003d58:	461a      	mov	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        dst_p->v6s10 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	3306      	adds	r3, #6
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	22ff      	movs	r2, #255	; 0xff
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd f957 	bl	800101e <unpack_right_shift_u8>
 8003d70:	4603      	mov	r3, r0
 8003d72:	461a      	mov	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        break;
 8003d7a:	e145      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 19:
        dst_p->v7s10 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	22ff      	movs	r2, #255	; 0xff
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fd f949 	bl	800101e <unpack_right_shift_u8>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	751a      	strb	r2, [r3, #20]
        dst_p->v8s10 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	3302      	adds	r3, #2
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	22ff      	movs	r2, #255	; 0xff
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fd f93d 	bl	800101e <unpack_right_shift_u8>
 8003da4:	4603      	mov	r3, r0
 8003da6:	461a      	mov	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        dst_p->v9s10 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	3303      	adds	r3, #3
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	22ff      	movs	r2, #255	; 0xff
 8003db6:	2100      	movs	r1, #0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fd f930 	bl	800101e <unpack_right_shift_u8>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        dst_p->v10s10 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	22ff      	movs	r2, #255	; 0xff
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd f923 	bl	800101e <unpack_right_shift_u8>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        break;
 8003de2:	e111      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 20:
        dst_p->v1s11 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	3301      	adds	r3, #1
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	22ff      	movs	r2, #255	; 0xff
 8003dec:	2100      	movs	r1, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fd f915 	bl	800101e <unpack_right_shift_u8>
 8003df4:	4603      	mov	r3, r0
 8003df6:	461a      	mov	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	755a      	strb	r2, [r3, #21]
        dst_p->v2s11 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	3302      	adds	r3, #2
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	22ff      	movs	r2, #255	; 0xff
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fd f909 	bl	800101e <unpack_right_shift_u8>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        dst_p->v3s11 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	3303      	adds	r3, #3
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	22ff      	movs	r2, #255	; 0xff
 8003e1e:	2100      	movs	r1, #0
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fd f8fc 	bl	800101e <unpack_right_shift_u8>
 8003e26:	4603      	mov	r3, r0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        dst_p->v4s11 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	3304      	adds	r3, #4
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	22ff      	movs	r2, #255	; 0xff
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fd f8ef 	bl	800101e <unpack_right_shift_u8>
 8003e40:	4603      	mov	r3, r0
 8003e42:	461a      	mov	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        dst_p->v5s11 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3305      	adds	r3, #5
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	22ff      	movs	r2, #255	; 0xff
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fd f8e2 	bl	800101e <unpack_right_shift_u8>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        dst_p->v6s11 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	3306      	adds	r3, #6
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	22ff      	movs	r2, #255	; 0xff
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fd f8d5 	bl	800101e <unpack_right_shift_u8>
 8003e74:	4603      	mov	r3, r0
 8003e76:	461a      	mov	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        break;
 8003e7e:	e0c3      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 21:
        dst_p->v7s11 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	3301      	adds	r3, #1
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	22ff      	movs	r2, #255	; 0xff
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fd f8c7 	bl	800101e <unpack_right_shift_u8>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	759a      	strb	r2, [r3, #22]
        dst_p->v8s11 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	3302      	adds	r3, #2
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	22ff      	movs	r2, #255	; 0xff
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fd f8bb 	bl	800101e <unpack_right_shift_u8>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        dst_p->v9s11 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	3303      	adds	r3, #3
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	22ff      	movs	r2, #255	; 0xff
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fd f8ae 	bl	800101e <unpack_right_shift_u8>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        dst_p->v10s11 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	22ff      	movs	r2, #255	; 0xff
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd f8a1 	bl	800101e <unpack_right_shift_u8>
 8003edc:	4603      	mov	r3, r0
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        dst_p->v11s11 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	3305      	adds	r3, #5
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	22ff      	movs	r2, #255	; 0xff
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fd f894 	bl	800101e <unpack_right_shift_u8>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        break;
 8003f00:	e082      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 22:
        dst_p->v1s12 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	3301      	adds	r3, #1
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	22ff      	movs	r2, #255	; 0xff
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fd f886 	bl	800101e <unpack_right_shift_u8>
 8003f12:	4603      	mov	r3, r0
 8003f14:	461a      	mov	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	75da      	strb	r2, [r3, #23]
        dst_p->v2s12 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	3302      	adds	r3, #2
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	22ff      	movs	r2, #255	; 0xff
 8003f22:	2100      	movs	r1, #0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fd f87a 	bl	800101e <unpack_right_shift_u8>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        dst_p->v3s12 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	3303      	adds	r3, #3
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	22ff      	movs	r2, #255	; 0xff
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fd f86d 	bl	800101e <unpack_right_shift_u8>
 8003f44:	4603      	mov	r3, r0
 8003f46:	461a      	mov	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        dst_p->v4s12 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	3304      	adds	r3, #4
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	22ff      	movs	r2, #255	; 0xff
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fd f860 	bl	800101e <unpack_right_shift_u8>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	461a      	mov	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
        dst_p->v5s12 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	3305      	adds	r3, #5
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	22ff      	movs	r2, #255	; 0xff
 8003f70:	2100      	movs	r1, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fd f853 	bl	800101e <unpack_right_shift_u8>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
        dst_p->v6s12 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3306      	adds	r3, #6
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	22ff      	movs	r2, #255	; 0xff
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fd f846 	bl	800101e <unpack_right_shift_u8>
 8003f92:	4603      	mov	r3, r0
 8003f94:	461a      	mov	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        break;
 8003f9c:	e034      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    case 23:
        dst_p->v7s12 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	22ff      	movs	r2, #255	; 0xff
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fd f838 	bl	800101e <unpack_right_shift_u8>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	761a      	strb	r2, [r3, #24]
        dst_p->v8s12 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	3302      	adds	r3, #2
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	22ff      	movs	r2, #255	; 0xff
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fd f82c 	bl	800101e <unpack_right_shift_u8>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	461a      	mov	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        dst_p->v9s12 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	3303      	adds	r3, #3
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	22ff      	movs	r2, #255	; 0xff
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fd f81f 	bl	800101e <unpack_right_shift_u8>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        dst_p->v10s12 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3304      	adds	r3, #4
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	22ff      	movs	r2, #255	; 0xff
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fd f812 	bl	800101e <unpack_right_shift_u8>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        break;
 8004004:	e000      	b.n	8004008 <can1_ams_cell_voltages_unpack+0xd70>

    default:
        break;
 8004006:	bf00      	nop
    }

    return (0);
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop

08004014 <can1_ams_cell_voltages_voltage_multiplexor_encode>:

uint8_t can1_ams_cell_voltages_voltage_multiplexor_encode(double value)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800401e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004022:	f7fc fdb3 	bl	8000b8c <__aeabi_d2uiz>
 8004026:	4603      	mov	r3, r0
 8004028:	b2db      	uxtb	r3, r3
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	0000      	movs	r0, r0
 8004034:	0000      	movs	r0, r0
	...

08004038 <can1_ams_cell_voltages_v1s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s1_encode(double value)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <can1_ams_cell_voltages_v1s1_encode+0x50>)
 8004048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800404c:	f7fc f90e 	bl	800026c <__aeabi_dsub>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4610      	mov	r0, r2
 8004056:	4619      	mov	r1, r3
 8004058:	a309      	add	r3, pc, #36	; (adr r3, 8004080 <can1_ams_cell_voltages_v1s1_encode+0x48>)
 800405a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405e:	f7fc fbe7 	bl	8000830 <__aeabi_ddiv>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4610      	mov	r0, r2
 8004068:	4619      	mov	r1, r3
 800406a:	f7fc fd8f 	bl	8000b8c <__aeabi_d2uiz>
 800406e:	4603      	mov	r3, r0
 8004070:	b2db      	uxtb	r3, r3
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	f3af 8000 	nop.w
 8004080:	fcce1c58 	.word	0xfcce1c58
 8004084:	3f800e6a 	.word	0x3f800e6a
 8004088:	40040000 	.word	0x40040000
 800408c:	00000000 	.word	0x00000000

08004090 <can1_ams_cell_voltages_v1s1_decode>:

double can1_ams_cell_voltages_v1s1_decode(uint8_t value)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	4618      	mov	r0, r3
 800409e:	f7fc fa23 	bl	80004e8 <__aeabi_ui2d>
 80040a2:	a30e      	add	r3, pc, #56	; (adr r3, 80040dc <can1_ams_cell_voltages_v1s1_decode+0x4c>)
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	f7fc fa98 	bl	80005dc <__aeabi_dmul>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4610      	mov	r0, r2
 80040b2:	4619      	mov	r1, r3
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <can1_ams_cell_voltages_v1s1_decode+0x48>)
 80040ba:	f7fc f8d9 	bl	8000270 <__adddf3>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80040c6:	eeb0 0a47 	vmov.f32	s0, s14
 80040ca:	eef0 0a67 	vmov.f32	s1, s15
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	f3af 8000 	nop.w
 80040d8:	40040000 	.word	0x40040000
 80040dc:	fcce1c58 	.word	0xfcce1c58
 80040e0:	3f800e6a 	.word	0x3f800e6a
 80040e4:	00000000 	.word	0x00000000

080040e8 <can1_ams_cell_voltages_v7s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s1_encode(double value)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <can1_ams_cell_voltages_v7s1_encode+0x50>)
 80040f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040fc:	f7fc f8b6 	bl	800026c <__aeabi_dsub>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4610      	mov	r0, r2
 8004106:	4619      	mov	r1, r3
 8004108:	a309      	add	r3, pc, #36	; (adr r3, 8004130 <can1_ams_cell_voltages_v7s1_encode+0x48>)
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f7fc fb8f 	bl	8000830 <__aeabi_ddiv>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4610      	mov	r0, r2
 8004118:	4619      	mov	r1, r3
 800411a:	f7fc fd37 	bl	8000b8c <__aeabi_d2uiz>
 800411e:	4603      	mov	r3, r0
 8004120:	b2db      	uxtb	r3, r3
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	f3af 8000 	nop.w
 8004130:	fcce1c58 	.word	0xfcce1c58
 8004134:	3f800e6a 	.word	0x3f800e6a
 8004138:	40040000 	.word	0x40040000
 800413c:	00000000 	.word	0x00000000

08004140 <can1_ams_cell_voltages_v7s1_decode>:

double can1_ams_cell_voltages_v7s1_decode(uint8_t value)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	4618      	mov	r0, r3
 800414e:	f7fc f9cb 	bl	80004e8 <__aeabi_ui2d>
 8004152:	a30e      	add	r3, pc, #56	; (adr r3, 800418c <can1_ams_cell_voltages_v7s1_decode+0x4c>)
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f7fc fa40 	bl	80005dc <__aeabi_dmul>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4610      	mov	r0, r2
 8004162:	4619      	mov	r1, r3
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	4b07      	ldr	r3, [pc, #28]	; (8004188 <can1_ams_cell_voltages_v7s1_decode+0x48>)
 800416a:	f7fc f881 	bl	8000270 <__adddf3>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	ec43 2b17 	vmov	d7, r2, r3
}
 8004176:	eeb0 0a47 	vmov.f32	s0, s14
 800417a:	eef0 0a67 	vmov.f32	s1, s15
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	f3af 8000 	nop.w
 8004188:	40040000 	.word	0x40040000
 800418c:	fcce1c58 	.word	0xfcce1c58
 8004190:	3f800e6a 	.word	0x3f800e6a
 8004194:	00000000 	.word	0x00000000

08004198 <can1_ams_cell_voltages_v1s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s2_encode(double value)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <can1_ams_cell_voltages_v1s2_encode+0x50>)
 80041a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041ac:	f7fc f85e 	bl	800026c <__aeabi_dsub>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4610      	mov	r0, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	a309      	add	r3, pc, #36	; (adr r3, 80041e0 <can1_ams_cell_voltages_v1s2_encode+0x48>)
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	f7fc fb37 	bl	8000830 <__aeabi_ddiv>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	f7fc fcdf 	bl	8000b8c <__aeabi_d2uiz>
 80041ce:	4603      	mov	r3, r0
 80041d0:	b2db      	uxtb	r3, r3
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	f3af 8000 	nop.w
 80041e0:	fcce1c58 	.word	0xfcce1c58
 80041e4:	3f800e6a 	.word	0x3f800e6a
 80041e8:	40040000 	.word	0x40040000
 80041ec:	00000000 	.word	0x00000000

080041f0 <can1_ams_cell_voltages_v1s2_decode>:

double can1_ams_cell_voltages_v1s2_decode(uint8_t value)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fc f973 	bl	80004e8 <__aeabi_ui2d>
 8004202:	a30e      	add	r3, pc, #56	; (adr r3, 800423c <can1_ams_cell_voltages_v1s2_decode+0x4c>)
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	f7fc f9e8 	bl	80005dc <__aeabi_dmul>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	4b07      	ldr	r3, [pc, #28]	; (8004238 <can1_ams_cell_voltages_v1s2_decode+0x48>)
 800421a:	f7fc f829 	bl	8000270 <__adddf3>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	ec43 2b17 	vmov	d7, r2, r3
}
 8004226:	eeb0 0a47 	vmov.f32	s0, s14
 800422a:	eef0 0a67 	vmov.f32	s1, s15
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	f3af 8000 	nop.w
 8004238:	40040000 	.word	0x40040000
 800423c:	fcce1c58 	.word	0xfcce1c58
 8004240:	3f800e6a 	.word	0x3f800e6a
 8004244:	00000000 	.word	0x00000000

08004248 <can1_ams_cell_voltages_v7s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s2_encode(double value)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	4b10      	ldr	r3, [pc, #64]	; (8004298 <can1_ams_cell_voltages_v7s2_encode+0x50>)
 8004258:	e9d7 0100 	ldrd	r0, r1, [r7]
 800425c:	f7fc f806 	bl	800026c <__aeabi_dsub>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4610      	mov	r0, r2
 8004266:	4619      	mov	r1, r3
 8004268:	a309      	add	r3, pc, #36	; (adr r3, 8004290 <can1_ams_cell_voltages_v7s2_encode+0x48>)
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	f7fc fadf 	bl	8000830 <__aeabi_ddiv>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4610      	mov	r0, r2
 8004278:	4619      	mov	r1, r3
 800427a:	f7fc fc87 	bl	8000b8c <__aeabi_d2uiz>
 800427e:	4603      	mov	r3, r0
 8004280:	b2db      	uxtb	r3, r3
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	f3af 8000 	nop.w
 8004290:	fcce1c58 	.word	0xfcce1c58
 8004294:	3f800e6a 	.word	0x3f800e6a
 8004298:	40040000 	.word	0x40040000
 800429c:	00000000 	.word	0x00000000

080042a0 <can1_ams_cell_voltages_v7s2_decode>:

double can1_ams_cell_voltages_v7s2_decode(uint8_t value)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fc f91b 	bl	80004e8 <__aeabi_ui2d>
 80042b2:	a30e      	add	r3, pc, #56	; (adr r3, 80042ec <can1_ams_cell_voltages_v7s2_decode+0x4c>)
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f7fc f990 	bl	80005dc <__aeabi_dmul>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4610      	mov	r0, r2
 80042c2:	4619      	mov	r1, r3
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <can1_ams_cell_voltages_v7s2_decode+0x48>)
 80042ca:	f7fb ffd1 	bl	8000270 <__adddf3>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80042d6:	eeb0 0a47 	vmov.f32	s0, s14
 80042da:	eef0 0a67 	vmov.f32	s1, s15
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	f3af 8000 	nop.w
 80042e8:	40040000 	.word	0x40040000
 80042ec:	fcce1c58 	.word	0xfcce1c58
 80042f0:	3f800e6a 	.word	0x3f800e6a
 80042f4:	00000000 	.word	0x00000000

080042f8 <can1_ams_cell_voltages_v1s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s3_encode(double value)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <can1_ams_cell_voltages_v1s3_encode+0x50>)
 8004308:	e9d7 0100 	ldrd	r0, r1, [r7]
 800430c:	f7fb ffae 	bl	800026c <__aeabi_dsub>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4610      	mov	r0, r2
 8004316:	4619      	mov	r1, r3
 8004318:	a309      	add	r3, pc, #36	; (adr r3, 8004340 <can1_ams_cell_voltages_v1s3_encode+0x48>)
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	f7fc fa87 	bl	8000830 <__aeabi_ddiv>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4610      	mov	r0, r2
 8004328:	4619      	mov	r1, r3
 800432a:	f7fc fc2f 	bl	8000b8c <__aeabi_d2uiz>
 800432e:	4603      	mov	r3, r0
 8004330:	b2db      	uxtb	r3, r3
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	f3af 8000 	nop.w
 8004340:	fcce1c58 	.word	0xfcce1c58
 8004344:	3f800e6a 	.word	0x3f800e6a
 8004348:	40040000 	.word	0x40040000
 800434c:	00000000 	.word	0x00000000

08004350 <can1_ams_cell_voltages_v1s3_decode>:

double can1_ams_cell_voltages_v1s3_decode(uint8_t value)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fc f8c3 	bl	80004e8 <__aeabi_ui2d>
 8004362:	a30e      	add	r3, pc, #56	; (adr r3, 800439c <can1_ams_cell_voltages_v1s3_decode+0x4c>)
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f7fc f938 	bl	80005dc <__aeabi_dmul>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	4b07      	ldr	r3, [pc, #28]	; (8004398 <can1_ams_cell_voltages_v1s3_decode+0x48>)
 800437a:	f7fb ff79 	bl	8000270 <__adddf3>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	ec43 2b17 	vmov	d7, r2, r3
}
 8004386:	eeb0 0a47 	vmov.f32	s0, s14
 800438a:	eef0 0a67 	vmov.f32	s1, s15
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	f3af 8000 	nop.w
 8004398:	40040000 	.word	0x40040000
 800439c:	fcce1c58 	.word	0xfcce1c58
 80043a0:	3f800e6a 	.word	0x3f800e6a
 80043a4:	00000000 	.word	0x00000000

080043a8 <can1_ams_cell_voltages_v7s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s3_encode(double value)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <can1_ams_cell_voltages_v7s3_encode+0x50>)
 80043b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043bc:	f7fb ff56 	bl	800026c <__aeabi_dsub>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	a309      	add	r3, pc, #36	; (adr r3, 80043f0 <can1_ams_cell_voltages_v7s3_encode+0x48>)
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f7fc fa2f 	bl	8000830 <__aeabi_ddiv>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4610      	mov	r0, r2
 80043d8:	4619      	mov	r1, r3
 80043da:	f7fc fbd7 	bl	8000b8c <__aeabi_d2uiz>
 80043de:	4603      	mov	r3, r0
 80043e0:	b2db      	uxtb	r3, r3
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	f3af 8000 	nop.w
 80043f0:	fcce1c58 	.word	0xfcce1c58
 80043f4:	3f800e6a 	.word	0x3f800e6a
 80043f8:	40040000 	.word	0x40040000
 80043fc:	00000000 	.word	0x00000000

08004400 <can1_ams_cell_voltages_v7s3_decode>:

double can1_ams_cell_voltages_v7s3_decode(uint8_t value)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	4618      	mov	r0, r3
 800440e:	f7fc f86b 	bl	80004e8 <__aeabi_ui2d>
 8004412:	a30e      	add	r3, pc, #56	; (adr r3, 800444c <can1_ams_cell_voltages_v7s3_decode+0x4c>)
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f7fc f8e0 	bl	80005dc <__aeabi_dmul>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	4b07      	ldr	r3, [pc, #28]	; (8004448 <can1_ams_cell_voltages_v7s3_decode+0x48>)
 800442a:	f7fb ff21 	bl	8000270 <__adddf3>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	ec43 2b17 	vmov	d7, r2, r3
}
 8004436:	eeb0 0a47 	vmov.f32	s0, s14
 800443a:	eef0 0a67 	vmov.f32	s1, s15
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	f3af 8000 	nop.w
 8004448:	40040000 	.word	0x40040000
 800444c:	fcce1c58 	.word	0xfcce1c58
 8004450:	3f800e6a 	.word	0x3f800e6a
 8004454:	00000000 	.word	0x00000000

08004458 <can1_ams_cell_voltages_v1s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s4_encode(double value)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <can1_ams_cell_voltages_v1s4_encode+0x50>)
 8004468:	e9d7 0100 	ldrd	r0, r1, [r7]
 800446c:	f7fb fefe 	bl	800026c <__aeabi_dsub>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4610      	mov	r0, r2
 8004476:	4619      	mov	r1, r3
 8004478:	a309      	add	r3, pc, #36	; (adr r3, 80044a0 <can1_ams_cell_voltages_v1s4_encode+0x48>)
 800447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447e:	f7fc f9d7 	bl	8000830 <__aeabi_ddiv>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4610      	mov	r0, r2
 8004488:	4619      	mov	r1, r3
 800448a:	f7fc fb7f 	bl	8000b8c <__aeabi_d2uiz>
 800448e:	4603      	mov	r3, r0
 8004490:	b2db      	uxtb	r3, r3
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	f3af 8000 	nop.w
 80044a0:	fcce1c58 	.word	0xfcce1c58
 80044a4:	3f800e6a 	.word	0x3f800e6a
 80044a8:	40040000 	.word	0x40040000
 80044ac:	00000000 	.word	0x00000000

080044b0 <can1_ams_cell_voltages_v1s4_decode>:

double can1_ams_cell_voltages_v1s4_decode(uint8_t value)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fc f813 	bl	80004e8 <__aeabi_ui2d>
 80044c2:	a30e      	add	r3, pc, #56	; (adr r3, 80044fc <can1_ams_cell_voltages_v1s4_decode+0x4c>)
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f7fc f888 	bl	80005dc <__aeabi_dmul>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4610      	mov	r0, r2
 80044d2:	4619      	mov	r1, r3
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <can1_ams_cell_voltages_v1s4_decode+0x48>)
 80044da:	f7fb fec9 	bl	8000270 <__adddf3>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80044e6:	eeb0 0a47 	vmov.f32	s0, s14
 80044ea:	eef0 0a67 	vmov.f32	s1, s15
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	f3af 8000 	nop.w
 80044f8:	40040000 	.word	0x40040000
 80044fc:	fcce1c58 	.word	0xfcce1c58
 8004500:	3f800e6a 	.word	0x3f800e6a
 8004504:	00000000 	.word	0x00000000

08004508 <can1_ams_cell_voltages_v7s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s4_encode(double value)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	4b10      	ldr	r3, [pc, #64]	; (8004558 <can1_ams_cell_voltages_v7s4_encode+0x50>)
 8004518:	e9d7 0100 	ldrd	r0, r1, [r7]
 800451c:	f7fb fea6 	bl	800026c <__aeabi_dsub>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4610      	mov	r0, r2
 8004526:	4619      	mov	r1, r3
 8004528:	a309      	add	r3, pc, #36	; (adr r3, 8004550 <can1_ams_cell_voltages_v7s4_encode+0x48>)
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	f7fc f97f 	bl	8000830 <__aeabi_ddiv>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
 800453a:	f7fc fb27 	bl	8000b8c <__aeabi_d2uiz>
 800453e:	4603      	mov	r3, r0
 8004540:	b2db      	uxtb	r3, r3
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	f3af 8000 	nop.w
 8004550:	fcce1c58 	.word	0xfcce1c58
 8004554:	3f800e6a 	.word	0x3f800e6a
 8004558:	40040000 	.word	0x40040000
 800455c:	00000000 	.word	0x00000000

08004560 <can1_ams_cell_voltages_v7s4_decode>:

double can1_ams_cell_voltages_v7s4_decode(uint8_t value)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	4618      	mov	r0, r3
 800456e:	f7fb ffbb 	bl	80004e8 <__aeabi_ui2d>
 8004572:	a30e      	add	r3, pc, #56	; (adr r3, 80045ac <can1_ams_cell_voltages_v7s4_decode+0x4c>)
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f7fc f830 	bl	80005dc <__aeabi_dmul>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4610      	mov	r0, r2
 8004582:	4619      	mov	r1, r3
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <can1_ams_cell_voltages_v7s4_decode+0x48>)
 800458a:	f7fb fe71 	bl	8000270 <__adddf3>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	ec43 2b17 	vmov	d7, r2, r3
}
 8004596:	eeb0 0a47 	vmov.f32	s0, s14
 800459a:	eef0 0a67 	vmov.f32	s1, s15
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	f3af 8000 	nop.w
 80045a8:	40040000 	.word	0x40040000
 80045ac:	fcce1c58 	.word	0xfcce1c58
 80045b0:	3f800e6a 	.word	0x3f800e6a
 80045b4:	00000000 	.word	0x00000000

080045b8 <can1_ams_cell_voltages_v1s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s5_encode(double value)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	4b10      	ldr	r3, [pc, #64]	; (8004608 <can1_ams_cell_voltages_v1s5_encode+0x50>)
 80045c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045cc:	f7fb fe4e 	bl	800026c <__aeabi_dsub>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4610      	mov	r0, r2
 80045d6:	4619      	mov	r1, r3
 80045d8:	a309      	add	r3, pc, #36	; (adr r3, 8004600 <can1_ams_cell_voltages_v1s5_encode+0x48>)
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	f7fc f927 	bl	8000830 <__aeabi_ddiv>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	f7fc facf 	bl	8000b8c <__aeabi_d2uiz>
 80045ee:	4603      	mov	r3, r0
 80045f0:	b2db      	uxtb	r3, r3
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	f3af 8000 	nop.w
 8004600:	fcce1c58 	.word	0xfcce1c58
 8004604:	3f800e6a 	.word	0x3f800e6a
 8004608:	40040000 	.word	0x40040000
 800460c:	00000000 	.word	0x00000000

08004610 <can1_ams_cell_voltages_v1s5_decode>:

double can1_ams_cell_voltages_v1s5_decode(uint8_t value)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	4618      	mov	r0, r3
 800461e:	f7fb ff63 	bl	80004e8 <__aeabi_ui2d>
 8004622:	a30e      	add	r3, pc, #56	; (adr r3, 800465c <can1_ams_cell_voltages_v1s5_decode+0x4c>)
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f7fb ffd8 	bl	80005dc <__aeabi_dmul>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4610      	mov	r0, r2
 8004632:	4619      	mov	r1, r3
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	4b07      	ldr	r3, [pc, #28]	; (8004658 <can1_ams_cell_voltages_v1s5_decode+0x48>)
 800463a:	f7fb fe19 	bl	8000270 <__adddf3>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	ec43 2b17 	vmov	d7, r2, r3
}
 8004646:	eeb0 0a47 	vmov.f32	s0, s14
 800464a:	eef0 0a67 	vmov.f32	s1, s15
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	f3af 8000 	nop.w
 8004658:	40040000 	.word	0x40040000
 800465c:	fcce1c58 	.word	0xfcce1c58
 8004660:	3f800e6a 	.word	0x3f800e6a
 8004664:	00000000 	.word	0x00000000

08004668 <can1_ams_cell_voltages_v7s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s5_encode(double value)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <can1_ams_cell_voltages_v7s5_encode+0x50>)
 8004678:	e9d7 0100 	ldrd	r0, r1, [r7]
 800467c:	f7fb fdf6 	bl	800026c <__aeabi_dsub>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4610      	mov	r0, r2
 8004686:	4619      	mov	r1, r3
 8004688:	a309      	add	r3, pc, #36	; (adr r3, 80046b0 <can1_ams_cell_voltages_v7s5_encode+0x48>)
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f7fc f8cf 	bl	8000830 <__aeabi_ddiv>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4610      	mov	r0, r2
 8004698:	4619      	mov	r1, r3
 800469a:	f7fc fa77 	bl	8000b8c <__aeabi_d2uiz>
 800469e:	4603      	mov	r3, r0
 80046a0:	b2db      	uxtb	r3, r3
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	f3af 8000 	nop.w
 80046b0:	fcce1c58 	.word	0xfcce1c58
 80046b4:	3f800e6a 	.word	0x3f800e6a
 80046b8:	40040000 	.word	0x40040000
 80046bc:	00000000 	.word	0x00000000

080046c0 <can1_ams_cell_voltages_v7s5_decode>:

double can1_ams_cell_voltages_v7s5_decode(uint8_t value)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fb ff0b 	bl	80004e8 <__aeabi_ui2d>
 80046d2:	a30e      	add	r3, pc, #56	; (adr r3, 800470c <can1_ams_cell_voltages_v7s5_decode+0x4c>)
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	f7fb ff80 	bl	80005dc <__aeabi_dmul>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4610      	mov	r0, r2
 80046e2:	4619      	mov	r1, r3
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	4b07      	ldr	r3, [pc, #28]	; (8004708 <can1_ams_cell_voltages_v7s5_decode+0x48>)
 80046ea:	f7fb fdc1 	bl	8000270 <__adddf3>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80046f6:	eeb0 0a47 	vmov.f32	s0, s14
 80046fa:	eef0 0a67 	vmov.f32	s1, s15
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	f3af 8000 	nop.w
 8004708:	40040000 	.word	0x40040000
 800470c:	fcce1c58 	.word	0xfcce1c58
 8004710:	3f800e6a 	.word	0x3f800e6a
 8004714:	00000000 	.word	0x00000000

08004718 <can1_ams_cell_voltages_v1s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s6_encode(double value)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	4b10      	ldr	r3, [pc, #64]	; (8004768 <can1_ams_cell_voltages_v1s6_encode+0x50>)
 8004728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800472c:	f7fb fd9e 	bl	800026c <__aeabi_dsub>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4610      	mov	r0, r2
 8004736:	4619      	mov	r1, r3
 8004738:	a309      	add	r3, pc, #36	; (adr r3, 8004760 <can1_ams_cell_voltages_v1s6_encode+0x48>)
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	f7fc f877 	bl	8000830 <__aeabi_ddiv>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	f7fc fa1f 	bl	8000b8c <__aeabi_d2uiz>
 800474e:	4603      	mov	r3, r0
 8004750:	b2db      	uxtb	r3, r3
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	f3af 8000 	nop.w
 8004760:	fcce1c58 	.word	0xfcce1c58
 8004764:	3f800e6a 	.word	0x3f800e6a
 8004768:	40040000 	.word	0x40040000
 800476c:	00000000 	.word	0x00000000

08004770 <can1_ams_cell_voltages_v1s6_decode>:

double can1_ams_cell_voltages_v1s6_decode(uint8_t value)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	4618      	mov	r0, r3
 800477e:	f7fb feb3 	bl	80004e8 <__aeabi_ui2d>
 8004782:	a30e      	add	r3, pc, #56	; (adr r3, 80047bc <can1_ams_cell_voltages_v1s6_decode+0x4c>)
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	f7fb ff28 	bl	80005dc <__aeabi_dmul>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4610      	mov	r0, r2
 8004792:	4619      	mov	r1, r3
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <can1_ams_cell_voltages_v1s6_decode+0x48>)
 800479a:	f7fb fd69 	bl	8000270 <__adddf3>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80047a6:	eeb0 0a47 	vmov.f32	s0, s14
 80047aa:	eef0 0a67 	vmov.f32	s1, s15
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	f3af 8000 	nop.w
 80047b8:	40040000 	.word	0x40040000
 80047bc:	fcce1c58 	.word	0xfcce1c58
 80047c0:	3f800e6a 	.word	0x3f800e6a
 80047c4:	00000000 	.word	0x00000000

080047c8 <can1_ams_cell_voltages_v7s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s6_encode(double value)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <can1_ams_cell_voltages_v7s6_encode+0x50>)
 80047d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047dc:	f7fb fd46 	bl	800026c <__aeabi_dsub>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4610      	mov	r0, r2
 80047e6:	4619      	mov	r1, r3
 80047e8:	a309      	add	r3, pc, #36	; (adr r3, 8004810 <can1_ams_cell_voltages_v7s6_encode+0x48>)
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f7fc f81f 	bl	8000830 <__aeabi_ddiv>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4610      	mov	r0, r2
 80047f8:	4619      	mov	r1, r3
 80047fa:	f7fc f9c7 	bl	8000b8c <__aeabi_d2uiz>
 80047fe:	4603      	mov	r3, r0
 8004800:	b2db      	uxtb	r3, r3
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	f3af 8000 	nop.w
 8004810:	fcce1c58 	.word	0xfcce1c58
 8004814:	3f800e6a 	.word	0x3f800e6a
 8004818:	40040000 	.word	0x40040000
 800481c:	00000000 	.word	0x00000000

08004820 <can1_ams_cell_voltages_v7s6_decode>:

double can1_ams_cell_voltages_v7s6_decode(uint8_t value)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	4618      	mov	r0, r3
 800482e:	f7fb fe5b 	bl	80004e8 <__aeabi_ui2d>
 8004832:	a30e      	add	r3, pc, #56	; (adr r3, 800486c <can1_ams_cell_voltages_v7s6_decode+0x4c>)
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	f7fb fed0 	bl	80005dc <__aeabi_dmul>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4610      	mov	r0, r2
 8004842:	4619      	mov	r1, r3
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	4b07      	ldr	r3, [pc, #28]	; (8004868 <can1_ams_cell_voltages_v7s6_decode+0x48>)
 800484a:	f7fb fd11 	bl	8000270 <__adddf3>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	ec43 2b17 	vmov	d7, r2, r3
}
 8004856:	eeb0 0a47 	vmov.f32	s0, s14
 800485a:	eef0 0a67 	vmov.f32	s1, s15
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	f3af 8000 	nop.w
 8004868:	40040000 	.word	0x40040000
 800486c:	fcce1c58 	.word	0xfcce1c58
 8004870:	3f800e6a 	.word	0x3f800e6a
 8004874:	00000000 	.word	0x00000000

08004878 <can1_ams_cell_voltages_v1s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s7_encode(double value)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <can1_ams_cell_voltages_v1s7_encode+0x50>)
 8004888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800488c:	f7fb fcee 	bl	800026c <__aeabi_dsub>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4610      	mov	r0, r2
 8004896:	4619      	mov	r1, r3
 8004898:	a309      	add	r3, pc, #36	; (adr r3, 80048c0 <can1_ams_cell_voltages_v1s7_encode+0x48>)
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	f7fb ffc7 	bl	8000830 <__aeabi_ddiv>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4610      	mov	r0, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	f7fc f96f 	bl	8000b8c <__aeabi_d2uiz>
 80048ae:	4603      	mov	r3, r0
 80048b0:	b2db      	uxtb	r3, r3
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	f3af 8000 	nop.w
 80048c0:	fcce1c58 	.word	0xfcce1c58
 80048c4:	3f800e6a 	.word	0x3f800e6a
 80048c8:	40040000 	.word	0x40040000
 80048cc:	00000000 	.word	0x00000000

080048d0 <can1_ams_cell_voltages_v1s7_decode>:

double can1_ams_cell_voltages_v1s7_decode(uint8_t value)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fb fe03 	bl	80004e8 <__aeabi_ui2d>
 80048e2:	a30e      	add	r3, pc, #56	; (adr r3, 800491c <can1_ams_cell_voltages_v1s7_decode+0x4c>)
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f7fb fe78 	bl	80005dc <__aeabi_dmul>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	4b07      	ldr	r3, [pc, #28]	; (8004918 <can1_ams_cell_voltages_v1s7_decode+0x48>)
 80048fa:	f7fb fcb9 	bl	8000270 <__adddf3>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	ec43 2b17 	vmov	d7, r2, r3
}
 8004906:	eeb0 0a47 	vmov.f32	s0, s14
 800490a:	eef0 0a67 	vmov.f32	s1, s15
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	f3af 8000 	nop.w
 8004918:	40040000 	.word	0x40040000
 800491c:	fcce1c58 	.word	0xfcce1c58
 8004920:	3f800e6a 	.word	0x3f800e6a
 8004924:	00000000 	.word	0x00000000

08004928 <can1_ams_cell_voltages_v7s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s7_encode(double value)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	4b10      	ldr	r3, [pc, #64]	; (8004978 <can1_ams_cell_voltages_v7s7_encode+0x50>)
 8004938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800493c:	f7fb fc96 	bl	800026c <__aeabi_dsub>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4610      	mov	r0, r2
 8004946:	4619      	mov	r1, r3
 8004948:	a309      	add	r3, pc, #36	; (adr r3, 8004970 <can1_ams_cell_voltages_v7s7_encode+0x48>)
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	f7fb ff6f 	bl	8000830 <__aeabi_ddiv>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4610      	mov	r0, r2
 8004958:	4619      	mov	r1, r3
 800495a:	f7fc f917 	bl	8000b8c <__aeabi_d2uiz>
 800495e:	4603      	mov	r3, r0
 8004960:	b2db      	uxtb	r3, r3
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	f3af 8000 	nop.w
 8004970:	fcce1c58 	.word	0xfcce1c58
 8004974:	3f800e6a 	.word	0x3f800e6a
 8004978:	40040000 	.word	0x40040000
 800497c:	00000000 	.word	0x00000000

08004980 <can1_ams_cell_voltages_v7s7_decode>:

double can1_ams_cell_voltages_v7s7_decode(uint8_t value)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	4618      	mov	r0, r3
 800498e:	f7fb fdab 	bl	80004e8 <__aeabi_ui2d>
 8004992:	a30e      	add	r3, pc, #56	; (adr r3, 80049cc <can1_ams_cell_voltages_v7s7_decode+0x4c>)
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f7fb fe20 	bl	80005dc <__aeabi_dmul>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	4b07      	ldr	r3, [pc, #28]	; (80049c8 <can1_ams_cell_voltages_v7s7_decode+0x48>)
 80049aa:	f7fb fc61 	bl	8000270 <__adddf3>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80049b6:	eeb0 0a47 	vmov.f32	s0, s14
 80049ba:	eef0 0a67 	vmov.f32	s1, s15
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	f3af 8000 	nop.w
 80049c8:	40040000 	.word	0x40040000
 80049cc:	fcce1c58 	.word	0xfcce1c58
 80049d0:	3f800e6a 	.word	0x3f800e6a
 80049d4:	00000000 	.word	0x00000000

080049d8 <can1_ams_cell_voltages_v1s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s8_encode(double value)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <can1_ams_cell_voltages_v1s8_encode+0x50>)
 80049e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049ec:	f7fb fc3e 	bl	800026c <__aeabi_dsub>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4610      	mov	r0, r2
 80049f6:	4619      	mov	r1, r3
 80049f8:	a309      	add	r3, pc, #36	; (adr r3, 8004a20 <can1_ams_cell_voltages_v1s8_encode+0x48>)
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	f7fb ff17 	bl	8000830 <__aeabi_ddiv>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f7fc f8bf 	bl	8000b8c <__aeabi_d2uiz>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	b2db      	uxtb	r3, r3
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	f3af 8000 	nop.w
 8004a20:	fcce1c58 	.word	0xfcce1c58
 8004a24:	3f800e6a 	.word	0x3f800e6a
 8004a28:	40040000 	.word	0x40040000
 8004a2c:	00000000 	.word	0x00000000

08004a30 <can1_ams_cell_voltages_v1s8_decode>:

double can1_ams_cell_voltages_v1s8_decode(uint8_t value)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fb fd53 	bl	80004e8 <__aeabi_ui2d>
 8004a42:	a30e      	add	r3, pc, #56	; (adr r3, 8004a7c <can1_ams_cell_voltages_v1s8_decode+0x4c>)
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f7fb fdc8 	bl	80005dc <__aeabi_dmul>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4610      	mov	r0, r2
 8004a52:	4619      	mov	r1, r3
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <can1_ams_cell_voltages_v1s8_decode+0x48>)
 8004a5a:	f7fb fc09 	bl	8000270 <__adddf3>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	ec43 2b17 	vmov	d7, r2, r3
}
 8004a66:	eeb0 0a47 	vmov.f32	s0, s14
 8004a6a:	eef0 0a67 	vmov.f32	s1, s15
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	f3af 8000 	nop.w
 8004a78:	40040000 	.word	0x40040000
 8004a7c:	fcce1c58 	.word	0xfcce1c58
 8004a80:	3f800e6a 	.word	0x3f800e6a
 8004a84:	00000000 	.word	0x00000000

08004a88 <can1_ams_cell_voltages_v7s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s8_encode(double value)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <can1_ams_cell_voltages_v7s8_encode+0x50>)
 8004a98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a9c:	f7fb fbe6 	bl	800026c <__aeabi_dsub>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	a309      	add	r3, pc, #36	; (adr r3, 8004ad0 <can1_ams_cell_voltages_v7s8_encode+0x48>)
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	f7fb febf 	bl	8000830 <__aeabi_ddiv>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	f7fc f867 	bl	8000b8c <__aeabi_d2uiz>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	b2db      	uxtb	r3, r3
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	f3af 8000 	nop.w
 8004ad0:	fcce1c58 	.word	0xfcce1c58
 8004ad4:	3f800e6a 	.word	0x3f800e6a
 8004ad8:	40040000 	.word	0x40040000
 8004adc:	00000000 	.word	0x00000000

08004ae0 <can1_ams_cell_voltages_v7s8_decode>:

double can1_ams_cell_voltages_v7s8_decode(uint8_t value)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fb fcfb 	bl	80004e8 <__aeabi_ui2d>
 8004af2:	a30e      	add	r3, pc, #56	; (adr r3, 8004b2c <can1_ams_cell_voltages_v7s8_decode+0x4c>)
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f7fb fd70 	bl	80005dc <__aeabi_dmul>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4610      	mov	r0, r2
 8004b02:	4619      	mov	r1, r3
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <can1_ams_cell_voltages_v7s8_decode+0x48>)
 8004b0a:	f7fb fbb1 	bl	8000270 <__adddf3>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	ec43 2b17 	vmov	d7, r2, r3
}
 8004b16:	eeb0 0a47 	vmov.f32	s0, s14
 8004b1a:	eef0 0a67 	vmov.f32	s1, s15
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	f3af 8000 	nop.w
 8004b28:	40040000 	.word	0x40040000
 8004b2c:	fcce1c58 	.word	0xfcce1c58
 8004b30:	3f800e6a 	.word	0x3f800e6a
 8004b34:	00000000 	.word	0x00000000

08004b38 <can1_ams_cell_voltages_v1s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s9_encode(double value)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <can1_ams_cell_voltages_v1s9_encode+0x50>)
 8004b48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b4c:	f7fb fb8e 	bl	800026c <__aeabi_dsub>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4610      	mov	r0, r2
 8004b56:	4619      	mov	r1, r3
 8004b58:	a309      	add	r3, pc, #36	; (adr r3, 8004b80 <can1_ams_cell_voltages_v1s9_encode+0x48>)
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	f7fb fe67 	bl	8000830 <__aeabi_ddiv>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4610      	mov	r0, r2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f7fc f80f 	bl	8000b8c <__aeabi_d2uiz>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	b2db      	uxtb	r3, r3
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	f3af 8000 	nop.w
 8004b80:	fcce1c58 	.word	0xfcce1c58
 8004b84:	3f800e6a 	.word	0x3f800e6a
 8004b88:	40040000 	.word	0x40040000
 8004b8c:	00000000 	.word	0x00000000

08004b90 <can1_ams_cell_voltages_v1s9_decode>:

double can1_ams_cell_voltages_v1s9_decode(uint8_t value)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fb fca3 	bl	80004e8 <__aeabi_ui2d>
 8004ba2:	a30e      	add	r3, pc, #56	; (adr r3, 8004bdc <can1_ams_cell_voltages_v1s9_decode+0x4c>)
 8004ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba8:	f7fb fd18 	bl	80005dc <__aeabi_dmul>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <can1_ams_cell_voltages_v1s9_decode+0x48>)
 8004bba:	f7fb fb59 	bl	8000270 <__adddf3>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	ec43 2b17 	vmov	d7, r2, r3
}
 8004bc6:	eeb0 0a47 	vmov.f32	s0, s14
 8004bca:	eef0 0a67 	vmov.f32	s1, s15
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	f3af 8000 	nop.w
 8004bd8:	40040000 	.word	0x40040000
 8004bdc:	fcce1c58 	.word	0xfcce1c58
 8004be0:	3f800e6a 	.word	0x3f800e6a
 8004be4:	00000000 	.word	0x00000000

08004be8 <can1_ams_cell_voltages_v7s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s9_encode(double value)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	4b10      	ldr	r3, [pc, #64]	; (8004c38 <can1_ams_cell_voltages_v7s9_encode+0x50>)
 8004bf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bfc:	f7fb fb36 	bl	800026c <__aeabi_dsub>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4610      	mov	r0, r2
 8004c06:	4619      	mov	r1, r3
 8004c08:	a309      	add	r3, pc, #36	; (adr r3, 8004c30 <can1_ams_cell_voltages_v7s9_encode+0x48>)
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f7fb fe0f 	bl	8000830 <__aeabi_ddiv>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f7fb ffb7 	bl	8000b8c <__aeabi_d2uiz>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	b2db      	uxtb	r3, r3
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	f3af 8000 	nop.w
 8004c30:	fcce1c58 	.word	0xfcce1c58
 8004c34:	3f800e6a 	.word	0x3f800e6a
 8004c38:	40040000 	.word	0x40040000
 8004c3c:	00000000 	.word	0x00000000

08004c40 <can1_ams_cell_voltages_v7s9_decode>:

double can1_ams_cell_voltages_v7s9_decode(uint8_t value)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fb fc4b 	bl	80004e8 <__aeabi_ui2d>
 8004c52:	a30e      	add	r3, pc, #56	; (adr r3, 8004c8c <can1_ams_cell_voltages_v7s9_decode+0x4c>)
 8004c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c58:	f7fb fcc0 	bl	80005dc <__aeabi_dmul>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4610      	mov	r0, r2
 8004c62:	4619      	mov	r1, r3
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <can1_ams_cell_voltages_v7s9_decode+0x48>)
 8004c6a:	f7fb fb01 	bl	8000270 <__adddf3>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	ec43 2b17 	vmov	d7, r2, r3
}
 8004c76:	eeb0 0a47 	vmov.f32	s0, s14
 8004c7a:	eef0 0a67 	vmov.f32	s1, s15
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	f3af 8000 	nop.w
 8004c88:	40040000 	.word	0x40040000
 8004c8c:	fcce1c58 	.word	0xfcce1c58
 8004c90:	3f800e6a 	.word	0x3f800e6a
 8004c94:	00000000 	.word	0x00000000

08004c98 <can1_ams_cell_voltages_v1s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s10_encode(double value)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <can1_ams_cell_voltages_v1s10_encode+0x50>)
 8004ca8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cac:	f7fb fade 	bl	800026c <__aeabi_dsub>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	a309      	add	r3, pc, #36	; (adr r3, 8004ce0 <can1_ams_cell_voltages_v1s10_encode+0x48>)
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f7fb fdb7 	bl	8000830 <__aeabi_ddiv>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f7fb ff5f 	bl	8000b8c <__aeabi_d2uiz>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	b2db      	uxtb	r3, r3
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	f3af 8000 	nop.w
 8004ce0:	fcce1c58 	.word	0xfcce1c58
 8004ce4:	3f800e6a 	.word	0x3f800e6a
 8004ce8:	40040000 	.word	0x40040000
 8004cec:	00000000 	.word	0x00000000

08004cf0 <can1_ams_cell_voltages_v1s10_decode>:

double can1_ams_cell_voltages_v1s10_decode(uint8_t value)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fb fbf3 	bl	80004e8 <__aeabi_ui2d>
 8004d02:	a30e      	add	r3, pc, #56	; (adr r3, 8004d3c <can1_ams_cell_voltages_v1s10_decode+0x4c>)
 8004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d08:	f7fb fc68 	bl	80005dc <__aeabi_dmul>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4610      	mov	r0, r2
 8004d12:	4619      	mov	r1, r3
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <can1_ams_cell_voltages_v1s10_decode+0x48>)
 8004d1a:	f7fb faa9 	bl	8000270 <__adddf3>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	ec43 2b17 	vmov	d7, r2, r3
}
 8004d26:	eeb0 0a47 	vmov.f32	s0, s14
 8004d2a:	eef0 0a67 	vmov.f32	s1, s15
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	f3af 8000 	nop.w
 8004d38:	40040000 	.word	0x40040000
 8004d3c:	fcce1c58 	.word	0xfcce1c58
 8004d40:	3f800e6a 	.word	0x3f800e6a
 8004d44:	00000000 	.word	0x00000000

08004d48 <can1_ams_cell_voltages_v7s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s10_encode(double value)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <can1_ams_cell_voltages_v7s10_encode+0x50>)
 8004d58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d5c:	f7fb fa86 	bl	800026c <__aeabi_dsub>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4610      	mov	r0, r2
 8004d66:	4619      	mov	r1, r3
 8004d68:	a309      	add	r3, pc, #36	; (adr r3, 8004d90 <can1_ams_cell_voltages_v7s10_encode+0x48>)
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f7fb fd5f 	bl	8000830 <__aeabi_ddiv>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f7fb ff07 	bl	8000b8c <__aeabi_d2uiz>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	b2db      	uxtb	r3, r3
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	f3af 8000 	nop.w
 8004d90:	fcce1c58 	.word	0xfcce1c58
 8004d94:	3f800e6a 	.word	0x3f800e6a
 8004d98:	40040000 	.word	0x40040000
 8004d9c:	00000000 	.word	0x00000000

08004da0 <can1_ams_cell_voltages_v7s10_decode>:

double can1_ams_cell_voltages_v7s10_decode(uint8_t value)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fb fb9b 	bl	80004e8 <__aeabi_ui2d>
 8004db2:	a30e      	add	r3, pc, #56	; (adr r3, 8004dec <can1_ams_cell_voltages_v7s10_decode+0x4c>)
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f7fb fc10 	bl	80005dc <__aeabi_dmul>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <can1_ams_cell_voltages_v7s10_decode+0x48>)
 8004dca:	f7fb fa51 	bl	8000270 <__adddf3>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	ec43 2b17 	vmov	d7, r2, r3
}
 8004dd6:	eeb0 0a47 	vmov.f32	s0, s14
 8004dda:	eef0 0a67 	vmov.f32	s1, s15
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	f3af 8000 	nop.w
 8004de8:	40040000 	.word	0x40040000
 8004dec:	fcce1c58 	.word	0xfcce1c58
 8004df0:	3f800e6a 	.word	0x3f800e6a
 8004df4:	00000000 	.word	0x00000000

08004df8 <can1_ams_cell_voltages_v1s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s11_encode(double value)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <can1_ams_cell_voltages_v1s11_encode+0x50>)
 8004e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e0c:	f7fb fa2e 	bl	800026c <__aeabi_dsub>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4610      	mov	r0, r2
 8004e16:	4619      	mov	r1, r3
 8004e18:	a309      	add	r3, pc, #36	; (adr r3, 8004e40 <can1_ams_cell_voltages_v1s11_encode+0x48>)
 8004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1e:	f7fb fd07 	bl	8000830 <__aeabi_ddiv>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4610      	mov	r0, r2
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f7fb feaf 	bl	8000b8c <__aeabi_d2uiz>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	b2db      	uxtb	r3, r3
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	f3af 8000 	nop.w
 8004e40:	fcce1c58 	.word	0xfcce1c58
 8004e44:	3f800e6a 	.word	0x3f800e6a
 8004e48:	40040000 	.word	0x40040000
 8004e4c:	00000000 	.word	0x00000000

08004e50 <can1_ams_cell_voltages_v1s11_decode>:

double can1_ams_cell_voltages_v1s11_decode(uint8_t value)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fb fb43 	bl	80004e8 <__aeabi_ui2d>
 8004e62:	a30e      	add	r3, pc, #56	; (adr r3, 8004e9c <can1_ams_cell_voltages_v1s11_decode+0x4c>)
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	f7fb fbb8 	bl	80005dc <__aeabi_dmul>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4610      	mov	r0, r2
 8004e72:	4619      	mov	r1, r3
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <can1_ams_cell_voltages_v1s11_decode+0x48>)
 8004e7a:	f7fb f9f9 	bl	8000270 <__adddf3>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	ec43 2b17 	vmov	d7, r2, r3
}
 8004e86:	eeb0 0a47 	vmov.f32	s0, s14
 8004e8a:	eef0 0a67 	vmov.f32	s1, s15
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	f3af 8000 	nop.w
 8004e98:	40040000 	.word	0x40040000
 8004e9c:	fcce1c58 	.word	0xfcce1c58
 8004ea0:	3f800e6a 	.word	0x3f800e6a
 8004ea4:	00000000 	.word	0x00000000

08004ea8 <can1_ams_cell_voltages_v7s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s11_encode(double value)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <can1_ams_cell_voltages_v7s11_encode+0x50>)
 8004eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ebc:	f7fb f9d6 	bl	800026c <__aeabi_dsub>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	a309      	add	r3, pc, #36	; (adr r3, 8004ef0 <can1_ams_cell_voltages_v7s11_encode+0x48>)
 8004eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ece:	f7fb fcaf 	bl	8000830 <__aeabi_ddiv>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	4619      	mov	r1, r3
 8004eda:	f7fb fe57 	bl	8000b8c <__aeabi_d2uiz>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	b2db      	uxtb	r3, r3
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	f3af 8000 	nop.w
 8004ef0:	fcce1c58 	.word	0xfcce1c58
 8004ef4:	3f800e6a 	.word	0x3f800e6a
 8004ef8:	40040000 	.word	0x40040000
 8004efc:	00000000 	.word	0x00000000

08004f00 <can1_ams_cell_voltages_v7s11_decode>:

double can1_ams_cell_voltages_v7s11_decode(uint8_t value)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fb faeb 	bl	80004e8 <__aeabi_ui2d>
 8004f12:	a30e      	add	r3, pc, #56	; (adr r3, 8004f4c <can1_ams_cell_voltages_v7s11_decode+0x4c>)
 8004f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f18:	f7fb fb60 	bl	80005dc <__aeabi_dmul>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4610      	mov	r0, r2
 8004f22:	4619      	mov	r1, r3
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <can1_ams_cell_voltages_v7s11_decode+0x48>)
 8004f2a:	f7fb f9a1 	bl	8000270 <__adddf3>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	ec43 2b17 	vmov	d7, r2, r3
}
 8004f36:	eeb0 0a47 	vmov.f32	s0, s14
 8004f3a:	eef0 0a67 	vmov.f32	s1, s15
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	f3af 8000 	nop.w
 8004f48:	40040000 	.word	0x40040000
 8004f4c:	fcce1c58 	.word	0xfcce1c58
 8004f50:	3f800e6a 	.word	0x3f800e6a
 8004f54:	00000000 	.word	0x00000000

08004f58 <can1_ams_cell_voltages_v1s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s12_encode(double value)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <can1_ams_cell_voltages_v1s12_encode+0x50>)
 8004f68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f6c:	f7fb f97e 	bl	800026c <__aeabi_dsub>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	4610      	mov	r0, r2
 8004f76:	4619      	mov	r1, r3
 8004f78:	a309      	add	r3, pc, #36	; (adr r3, 8004fa0 <can1_ams_cell_voltages_v1s12_encode+0x48>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f7fb fc57 	bl	8000830 <__aeabi_ddiv>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	f7fb fdff 	bl	8000b8c <__aeabi_d2uiz>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	b2db      	uxtb	r3, r3
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	f3af 8000 	nop.w
 8004fa0:	fcce1c58 	.word	0xfcce1c58
 8004fa4:	3f800e6a 	.word	0x3f800e6a
 8004fa8:	40040000 	.word	0x40040000
 8004fac:	00000000 	.word	0x00000000

08004fb0 <can1_ams_cell_voltages_v1s12_decode>:

double can1_ams_cell_voltages_v1s12_decode(uint8_t value)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fb fa93 	bl	80004e8 <__aeabi_ui2d>
 8004fc2:	a30e      	add	r3, pc, #56	; (adr r3, 8004ffc <can1_ams_cell_voltages_v1s12_decode+0x4c>)
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	f7fb fb08 	bl	80005dc <__aeabi_dmul>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	4b07      	ldr	r3, [pc, #28]	; (8004ff8 <can1_ams_cell_voltages_v1s12_decode+0x48>)
 8004fda:	f7fb f949 	bl	8000270 <__adddf3>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	ec43 2b17 	vmov	d7, r2, r3
}
 8004fe6:	eeb0 0a47 	vmov.f32	s0, s14
 8004fea:	eef0 0a67 	vmov.f32	s1, s15
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	f3af 8000 	nop.w
 8004ff8:	40040000 	.word	0x40040000
 8004ffc:	fcce1c58 	.word	0xfcce1c58
 8005000:	3f800e6a 	.word	0x3f800e6a
 8005004:	00000000 	.word	0x00000000

08005008 <can1_ams_cell_voltages_v7s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s12_encode(double value)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	4b10      	ldr	r3, [pc, #64]	; (8005058 <can1_ams_cell_voltages_v7s12_encode+0x50>)
 8005018:	e9d7 0100 	ldrd	r0, r1, [r7]
 800501c:	f7fb f926 	bl	800026c <__aeabi_dsub>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4610      	mov	r0, r2
 8005026:	4619      	mov	r1, r3
 8005028:	a309      	add	r3, pc, #36	; (adr r3, 8005050 <can1_ams_cell_voltages_v7s12_encode+0x48>)
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	f7fb fbff 	bl	8000830 <__aeabi_ddiv>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4610      	mov	r0, r2
 8005038:	4619      	mov	r1, r3
 800503a:	f7fb fda7 	bl	8000b8c <__aeabi_d2uiz>
 800503e:	4603      	mov	r3, r0
 8005040:	b2db      	uxtb	r3, r3
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	f3af 8000 	nop.w
 8005050:	fcce1c58 	.word	0xfcce1c58
 8005054:	3f800e6a 	.word	0x3f800e6a
 8005058:	40040000 	.word	0x40040000
 800505c:	00000000 	.word	0x00000000

08005060 <can1_ams_cell_voltages_v7s12_decode>:

double can1_ams_cell_voltages_v7s12_decode(uint8_t value)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	4618      	mov	r0, r3
 800506e:	f7fb fa3b 	bl	80004e8 <__aeabi_ui2d>
 8005072:	a30e      	add	r3, pc, #56	; (adr r3, 80050ac <can1_ams_cell_voltages_v7s12_decode+0x4c>)
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	f7fb fab0 	bl	80005dc <__aeabi_dmul>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4610      	mov	r0, r2
 8005082:	4619      	mov	r1, r3
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <can1_ams_cell_voltages_v7s12_decode+0x48>)
 800508a:	f7fb f8f1 	bl	8000270 <__adddf3>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	ec43 2b17 	vmov	d7, r2, r3
}
 8005096:	eeb0 0a47 	vmov.f32	s0, s14
 800509a:	eef0 0a67 	vmov.f32	s1, s15
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	f3af 8000 	nop.w
 80050a8:	40040000 	.word	0x40040000
 80050ac:	fcce1c58 	.word	0xfcce1c58
 80050b0:	3f800e6a 	.word	0x3f800e6a
 80050b4:	00000000 	.word	0x00000000

080050b8 <can1_ams_cell_voltages_v2s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s1_encode(double value)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	4b10      	ldr	r3, [pc, #64]	; (8005108 <can1_ams_cell_voltages_v2s1_encode+0x50>)
 80050c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050cc:	f7fb f8ce 	bl	800026c <__aeabi_dsub>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4610      	mov	r0, r2
 80050d6:	4619      	mov	r1, r3
 80050d8:	a309      	add	r3, pc, #36	; (adr r3, 8005100 <can1_ams_cell_voltages_v2s1_encode+0x48>)
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	f7fb fba7 	bl	8000830 <__aeabi_ddiv>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4610      	mov	r0, r2
 80050e8:	4619      	mov	r1, r3
 80050ea:	f7fb fd4f 	bl	8000b8c <__aeabi_d2uiz>
 80050ee:	4603      	mov	r3, r0
 80050f0:	b2db      	uxtb	r3, r3
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	f3af 8000 	nop.w
 8005100:	fcce1c58 	.word	0xfcce1c58
 8005104:	3f800e6a 	.word	0x3f800e6a
 8005108:	40040000 	.word	0x40040000
 800510c:	00000000 	.word	0x00000000

08005110 <can1_ams_cell_voltages_v2s1_decode>:

double can1_ams_cell_voltages_v2s1_decode(uint8_t value)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	4618      	mov	r0, r3
 800511e:	f7fb f9e3 	bl	80004e8 <__aeabi_ui2d>
 8005122:	a30e      	add	r3, pc, #56	; (adr r3, 800515c <can1_ams_cell_voltages_v2s1_decode+0x4c>)
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	f7fb fa58 	bl	80005dc <__aeabi_dmul>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4610      	mov	r0, r2
 8005132:	4619      	mov	r1, r3
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	4b07      	ldr	r3, [pc, #28]	; (8005158 <can1_ams_cell_voltages_v2s1_decode+0x48>)
 800513a:	f7fb f899 	bl	8000270 <__adddf3>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	ec43 2b17 	vmov	d7, r2, r3
}
 8005146:	eeb0 0a47 	vmov.f32	s0, s14
 800514a:	eef0 0a67 	vmov.f32	s1, s15
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	f3af 8000 	nop.w
 8005158:	40040000 	.word	0x40040000
 800515c:	fcce1c58 	.word	0xfcce1c58
 8005160:	3f800e6a 	.word	0x3f800e6a
 8005164:	00000000 	.word	0x00000000

08005168 <can1_ams_cell_voltages_v8s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s1_encode(double value)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	4b10      	ldr	r3, [pc, #64]	; (80051b8 <can1_ams_cell_voltages_v8s1_encode+0x50>)
 8005178:	e9d7 0100 	ldrd	r0, r1, [r7]
 800517c:	f7fb f876 	bl	800026c <__aeabi_dsub>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4610      	mov	r0, r2
 8005186:	4619      	mov	r1, r3
 8005188:	a309      	add	r3, pc, #36	; (adr r3, 80051b0 <can1_ams_cell_voltages_v8s1_encode+0x48>)
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f7fb fb4f 	bl	8000830 <__aeabi_ddiv>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4610      	mov	r0, r2
 8005198:	4619      	mov	r1, r3
 800519a:	f7fb fcf7 	bl	8000b8c <__aeabi_d2uiz>
 800519e:	4603      	mov	r3, r0
 80051a0:	b2db      	uxtb	r3, r3
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	f3af 8000 	nop.w
 80051b0:	fcce1c58 	.word	0xfcce1c58
 80051b4:	3f800e6a 	.word	0x3f800e6a
 80051b8:	40040000 	.word	0x40040000
 80051bc:	00000000 	.word	0x00000000

080051c0 <can1_ams_cell_voltages_v8s1_decode>:

double can1_ams_cell_voltages_v8s1_decode(uint8_t value)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fb f98b 	bl	80004e8 <__aeabi_ui2d>
 80051d2:	a30e      	add	r3, pc, #56	; (adr r3, 800520c <can1_ams_cell_voltages_v8s1_decode+0x4c>)
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f7fb fa00 	bl	80005dc <__aeabi_dmul>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4610      	mov	r0, r2
 80051e2:	4619      	mov	r1, r3
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	4b07      	ldr	r3, [pc, #28]	; (8005208 <can1_ams_cell_voltages_v8s1_decode+0x48>)
 80051ea:	f7fb f841 	bl	8000270 <__adddf3>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80051f6:	eeb0 0a47 	vmov.f32	s0, s14
 80051fa:	eef0 0a67 	vmov.f32	s1, s15
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	f3af 8000 	nop.w
 8005208:	40040000 	.word	0x40040000
 800520c:	fcce1c58 	.word	0xfcce1c58
 8005210:	3f800e6a 	.word	0x3f800e6a
 8005214:	00000000 	.word	0x00000000

08005218 <can1_ams_cell_voltages_v2s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s2_encode(double value)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	4b10      	ldr	r3, [pc, #64]	; (8005268 <can1_ams_cell_voltages_v2s2_encode+0x50>)
 8005228:	e9d7 0100 	ldrd	r0, r1, [r7]
 800522c:	f7fb f81e 	bl	800026c <__aeabi_dsub>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4610      	mov	r0, r2
 8005236:	4619      	mov	r1, r3
 8005238:	a309      	add	r3, pc, #36	; (adr r3, 8005260 <can1_ams_cell_voltages_v2s2_encode+0x48>)
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f7fb faf7 	bl	8000830 <__aeabi_ddiv>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4610      	mov	r0, r2
 8005248:	4619      	mov	r1, r3
 800524a:	f7fb fc9f 	bl	8000b8c <__aeabi_d2uiz>
 800524e:	4603      	mov	r3, r0
 8005250:	b2db      	uxtb	r3, r3
}
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	f3af 8000 	nop.w
 8005260:	fcce1c58 	.word	0xfcce1c58
 8005264:	3f800e6a 	.word	0x3f800e6a
 8005268:	40040000 	.word	0x40040000
 800526c:	00000000 	.word	0x00000000

08005270 <can1_ams_cell_voltages_v2s2_decode>:

double can1_ams_cell_voltages_v2s2_decode(uint8_t value)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	4618      	mov	r0, r3
 800527e:	f7fb f933 	bl	80004e8 <__aeabi_ui2d>
 8005282:	a30e      	add	r3, pc, #56	; (adr r3, 80052bc <can1_ams_cell_voltages_v2s2_decode+0x4c>)
 8005284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005288:	f7fb f9a8 	bl	80005dc <__aeabi_dmul>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4610      	mov	r0, r2
 8005292:	4619      	mov	r1, r3
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <can1_ams_cell_voltages_v2s2_decode+0x48>)
 800529a:	f7fa ffe9 	bl	8000270 <__adddf3>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80052a6:	eeb0 0a47 	vmov.f32	s0, s14
 80052aa:	eef0 0a67 	vmov.f32	s1, s15
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	f3af 8000 	nop.w
 80052b8:	40040000 	.word	0x40040000
 80052bc:	fcce1c58 	.word	0xfcce1c58
 80052c0:	3f800e6a 	.word	0x3f800e6a
 80052c4:	00000000 	.word	0x00000000

080052c8 <can1_ams_cell_voltages_v8s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s2_encode(double value)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	4b10      	ldr	r3, [pc, #64]	; (8005318 <can1_ams_cell_voltages_v8s2_encode+0x50>)
 80052d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052dc:	f7fa ffc6 	bl	800026c <__aeabi_dsub>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4610      	mov	r0, r2
 80052e6:	4619      	mov	r1, r3
 80052e8:	a309      	add	r3, pc, #36	; (adr r3, 8005310 <can1_ams_cell_voltages_v8s2_encode+0x48>)
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f7fb fa9f 	bl	8000830 <__aeabi_ddiv>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4610      	mov	r0, r2
 80052f8:	4619      	mov	r1, r3
 80052fa:	f7fb fc47 	bl	8000b8c <__aeabi_d2uiz>
 80052fe:	4603      	mov	r3, r0
 8005300:	b2db      	uxtb	r3, r3
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	f3af 8000 	nop.w
 8005310:	fcce1c58 	.word	0xfcce1c58
 8005314:	3f800e6a 	.word	0x3f800e6a
 8005318:	40040000 	.word	0x40040000
 800531c:	00000000 	.word	0x00000000

08005320 <can1_ams_cell_voltages_v8s2_decode>:

double can1_ams_cell_voltages_v8s2_decode(uint8_t value)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	4618      	mov	r0, r3
 800532e:	f7fb f8db 	bl	80004e8 <__aeabi_ui2d>
 8005332:	a30e      	add	r3, pc, #56	; (adr r3, 800536c <can1_ams_cell_voltages_v8s2_decode+0x4c>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	f7fb f950 	bl	80005dc <__aeabi_dmul>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4610      	mov	r0, r2
 8005342:	4619      	mov	r1, r3
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	4b07      	ldr	r3, [pc, #28]	; (8005368 <can1_ams_cell_voltages_v8s2_decode+0x48>)
 800534a:	f7fa ff91 	bl	8000270 <__adddf3>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	ec43 2b17 	vmov	d7, r2, r3
}
 8005356:	eeb0 0a47 	vmov.f32	s0, s14
 800535a:	eef0 0a67 	vmov.f32	s1, s15
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	f3af 8000 	nop.w
 8005368:	40040000 	.word	0x40040000
 800536c:	fcce1c58 	.word	0xfcce1c58
 8005370:	3f800e6a 	.word	0x3f800e6a
 8005374:	00000000 	.word	0x00000000

08005378 <can1_ams_cell_voltages_v2s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s3_encode(double value)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <can1_ams_cell_voltages_v2s3_encode+0x50>)
 8005388:	e9d7 0100 	ldrd	r0, r1, [r7]
 800538c:	f7fa ff6e 	bl	800026c <__aeabi_dsub>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4610      	mov	r0, r2
 8005396:	4619      	mov	r1, r3
 8005398:	a309      	add	r3, pc, #36	; (adr r3, 80053c0 <can1_ams_cell_voltages_v2s3_encode+0x48>)
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	f7fb fa47 	bl	8000830 <__aeabi_ddiv>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4610      	mov	r0, r2
 80053a8:	4619      	mov	r1, r3
 80053aa:	f7fb fbef 	bl	8000b8c <__aeabi_d2uiz>
 80053ae:	4603      	mov	r3, r0
 80053b0:	b2db      	uxtb	r3, r3
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	f3af 8000 	nop.w
 80053c0:	fcce1c58 	.word	0xfcce1c58
 80053c4:	3f800e6a 	.word	0x3f800e6a
 80053c8:	40040000 	.word	0x40040000
 80053cc:	00000000 	.word	0x00000000

080053d0 <can1_ams_cell_voltages_v2s3_decode>:

double can1_ams_cell_voltages_v2s3_decode(uint8_t value)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	4603      	mov	r3, r0
 80053d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fb f883 	bl	80004e8 <__aeabi_ui2d>
 80053e2:	a30e      	add	r3, pc, #56	; (adr r3, 800541c <can1_ams_cell_voltages_v2s3_decode+0x4c>)
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	f7fb f8f8 	bl	80005dc <__aeabi_dmul>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4610      	mov	r0, r2
 80053f2:	4619      	mov	r1, r3
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	4b07      	ldr	r3, [pc, #28]	; (8005418 <can1_ams_cell_voltages_v2s3_decode+0x48>)
 80053fa:	f7fa ff39 	bl	8000270 <__adddf3>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	ec43 2b17 	vmov	d7, r2, r3
}
 8005406:	eeb0 0a47 	vmov.f32	s0, s14
 800540a:	eef0 0a67 	vmov.f32	s1, s15
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	f3af 8000 	nop.w
 8005418:	40040000 	.word	0x40040000
 800541c:	fcce1c58 	.word	0xfcce1c58
 8005420:	3f800e6a 	.word	0x3f800e6a
 8005424:	00000000 	.word	0x00000000

08005428 <can1_ams_cell_voltages_v8s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s3_encode(double value)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	4b10      	ldr	r3, [pc, #64]	; (8005478 <can1_ams_cell_voltages_v8s3_encode+0x50>)
 8005438:	e9d7 0100 	ldrd	r0, r1, [r7]
 800543c:	f7fa ff16 	bl	800026c <__aeabi_dsub>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4610      	mov	r0, r2
 8005446:	4619      	mov	r1, r3
 8005448:	a309      	add	r3, pc, #36	; (adr r3, 8005470 <can1_ams_cell_voltages_v8s3_encode+0x48>)
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	f7fb f9ef 	bl	8000830 <__aeabi_ddiv>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4610      	mov	r0, r2
 8005458:	4619      	mov	r1, r3
 800545a:	f7fb fb97 	bl	8000b8c <__aeabi_d2uiz>
 800545e:	4603      	mov	r3, r0
 8005460:	b2db      	uxtb	r3, r3
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	f3af 8000 	nop.w
 8005470:	fcce1c58 	.word	0xfcce1c58
 8005474:	3f800e6a 	.word	0x3f800e6a
 8005478:	40040000 	.word	0x40040000
 800547c:	00000000 	.word	0x00000000

08005480 <can1_ams_cell_voltages_v8s3_decode>:

double can1_ams_cell_voltages_v8s3_decode(uint8_t value)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	4618      	mov	r0, r3
 800548e:	f7fb f82b 	bl	80004e8 <__aeabi_ui2d>
 8005492:	a30e      	add	r3, pc, #56	; (adr r3, 80054cc <can1_ams_cell_voltages_v8s3_decode+0x4c>)
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	f7fb f8a0 	bl	80005dc <__aeabi_dmul>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4610      	mov	r0, r2
 80054a2:	4619      	mov	r1, r3
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <can1_ams_cell_voltages_v8s3_decode+0x48>)
 80054aa:	f7fa fee1 	bl	8000270 <__adddf3>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80054b6:	eeb0 0a47 	vmov.f32	s0, s14
 80054ba:	eef0 0a67 	vmov.f32	s1, s15
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	f3af 8000 	nop.w
 80054c8:	40040000 	.word	0x40040000
 80054cc:	fcce1c58 	.word	0xfcce1c58
 80054d0:	3f800e6a 	.word	0x3f800e6a
 80054d4:	00000000 	.word	0x00000000

080054d8 <can1_ams_cell_voltages_v2s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s4_encode(double value)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	4b10      	ldr	r3, [pc, #64]	; (8005528 <can1_ams_cell_voltages_v2s4_encode+0x50>)
 80054e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054ec:	f7fa febe 	bl	800026c <__aeabi_dsub>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4610      	mov	r0, r2
 80054f6:	4619      	mov	r1, r3
 80054f8:	a309      	add	r3, pc, #36	; (adr r3, 8005520 <can1_ams_cell_voltages_v2s4_encode+0x48>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f7fb f997 	bl	8000830 <__aeabi_ddiv>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4610      	mov	r0, r2
 8005508:	4619      	mov	r1, r3
 800550a:	f7fb fb3f 	bl	8000b8c <__aeabi_d2uiz>
 800550e:	4603      	mov	r3, r0
 8005510:	b2db      	uxtb	r3, r3
}
 8005512:	4618      	mov	r0, r3
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	f3af 8000 	nop.w
 8005520:	fcce1c58 	.word	0xfcce1c58
 8005524:	3f800e6a 	.word	0x3f800e6a
 8005528:	40040000 	.word	0x40040000
 800552c:	00000000 	.word	0x00000000

08005530 <can1_ams_cell_voltages_v2s4_decode>:

double can1_ams_cell_voltages_v2s4_decode(uint8_t value)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800553a:	79fb      	ldrb	r3, [r7, #7]
 800553c:	4618      	mov	r0, r3
 800553e:	f7fa ffd3 	bl	80004e8 <__aeabi_ui2d>
 8005542:	a30e      	add	r3, pc, #56	; (adr r3, 800557c <can1_ams_cell_voltages_v2s4_decode+0x4c>)
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f7fb f848 	bl	80005dc <__aeabi_dmul>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4610      	mov	r0, r2
 8005552:	4619      	mov	r1, r3
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	4b07      	ldr	r3, [pc, #28]	; (8005578 <can1_ams_cell_voltages_v2s4_decode+0x48>)
 800555a:	f7fa fe89 	bl	8000270 <__adddf3>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	ec43 2b17 	vmov	d7, r2, r3
}
 8005566:	eeb0 0a47 	vmov.f32	s0, s14
 800556a:	eef0 0a67 	vmov.f32	s1, s15
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	f3af 8000 	nop.w
 8005578:	40040000 	.word	0x40040000
 800557c:	fcce1c58 	.word	0xfcce1c58
 8005580:	3f800e6a 	.word	0x3f800e6a
 8005584:	00000000 	.word	0x00000000

08005588 <can1_ams_cell_voltages_v8s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s4_encode(double value)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	4b10      	ldr	r3, [pc, #64]	; (80055d8 <can1_ams_cell_voltages_v8s4_encode+0x50>)
 8005598:	e9d7 0100 	ldrd	r0, r1, [r7]
 800559c:	f7fa fe66 	bl	800026c <__aeabi_dsub>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4610      	mov	r0, r2
 80055a6:	4619      	mov	r1, r3
 80055a8:	a309      	add	r3, pc, #36	; (adr r3, 80055d0 <can1_ams_cell_voltages_v8s4_encode+0x48>)
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	f7fb f93f 	bl	8000830 <__aeabi_ddiv>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4610      	mov	r0, r2
 80055b8:	4619      	mov	r1, r3
 80055ba:	f7fb fae7 	bl	8000b8c <__aeabi_d2uiz>
 80055be:	4603      	mov	r3, r0
 80055c0:	b2db      	uxtb	r3, r3
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	f3af 8000 	nop.w
 80055d0:	fcce1c58 	.word	0xfcce1c58
 80055d4:	3f800e6a 	.word	0x3f800e6a
 80055d8:	40040000 	.word	0x40040000
 80055dc:	00000000 	.word	0x00000000

080055e0 <can1_ams_cell_voltages_v8s4_decode>:

double can1_ams_cell_voltages_v8s4_decode(uint8_t value)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80055ea:	79fb      	ldrb	r3, [r7, #7]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fa ff7b 	bl	80004e8 <__aeabi_ui2d>
 80055f2:	a30e      	add	r3, pc, #56	; (adr r3, 800562c <can1_ams_cell_voltages_v8s4_decode+0x4c>)
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f7fa fff0 	bl	80005dc <__aeabi_dmul>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4610      	mov	r0, r2
 8005602:	4619      	mov	r1, r3
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	4b07      	ldr	r3, [pc, #28]	; (8005628 <can1_ams_cell_voltages_v8s4_decode+0x48>)
 800560a:	f7fa fe31 	bl	8000270 <__adddf3>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	ec43 2b17 	vmov	d7, r2, r3
}
 8005616:	eeb0 0a47 	vmov.f32	s0, s14
 800561a:	eef0 0a67 	vmov.f32	s1, s15
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	f3af 8000 	nop.w
 8005628:	40040000 	.word	0x40040000
 800562c:	fcce1c58 	.word	0xfcce1c58
 8005630:	3f800e6a 	.word	0x3f800e6a
 8005634:	00000000 	.word	0x00000000

08005638 <can1_ams_cell_voltages_v2s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s5_encode(double value)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	4b10      	ldr	r3, [pc, #64]	; (8005688 <can1_ams_cell_voltages_v2s5_encode+0x50>)
 8005648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800564c:	f7fa fe0e 	bl	800026c <__aeabi_dsub>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4610      	mov	r0, r2
 8005656:	4619      	mov	r1, r3
 8005658:	a309      	add	r3, pc, #36	; (adr r3, 8005680 <can1_ams_cell_voltages_v2s5_encode+0x48>)
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	f7fb f8e7 	bl	8000830 <__aeabi_ddiv>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4610      	mov	r0, r2
 8005668:	4619      	mov	r1, r3
 800566a:	f7fb fa8f 	bl	8000b8c <__aeabi_d2uiz>
 800566e:	4603      	mov	r3, r0
 8005670:	b2db      	uxtb	r3, r3
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	f3af 8000 	nop.w
 8005680:	fcce1c58 	.word	0xfcce1c58
 8005684:	3f800e6a 	.word	0x3f800e6a
 8005688:	40040000 	.word	0x40040000
 800568c:	00000000 	.word	0x00000000

08005690 <can1_ams_cell_voltages_v2s5_decode>:

double can1_ams_cell_voltages_v2s5_decode(uint8_t value)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	4618      	mov	r0, r3
 800569e:	f7fa ff23 	bl	80004e8 <__aeabi_ui2d>
 80056a2:	a30e      	add	r3, pc, #56	; (adr r3, 80056dc <can1_ams_cell_voltages_v2s5_decode+0x4c>)
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	f7fa ff98 	bl	80005dc <__aeabi_dmul>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4610      	mov	r0, r2
 80056b2:	4619      	mov	r1, r3
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <can1_ams_cell_voltages_v2s5_decode+0x48>)
 80056ba:	f7fa fdd9 	bl	8000270 <__adddf3>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80056c6:	eeb0 0a47 	vmov.f32	s0, s14
 80056ca:	eef0 0a67 	vmov.f32	s1, s15
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	f3af 8000 	nop.w
 80056d8:	40040000 	.word	0x40040000
 80056dc:	fcce1c58 	.word	0xfcce1c58
 80056e0:	3f800e6a 	.word	0x3f800e6a
 80056e4:	00000000 	.word	0x00000000

080056e8 <can1_ams_cell_voltages_v8s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s5_encode(double value)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	4b10      	ldr	r3, [pc, #64]	; (8005738 <can1_ams_cell_voltages_v8s5_encode+0x50>)
 80056f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056fc:	f7fa fdb6 	bl	800026c <__aeabi_dsub>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4610      	mov	r0, r2
 8005706:	4619      	mov	r1, r3
 8005708:	a309      	add	r3, pc, #36	; (adr r3, 8005730 <can1_ams_cell_voltages_v8s5_encode+0x48>)
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f7fb f88f 	bl	8000830 <__aeabi_ddiv>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4610      	mov	r0, r2
 8005718:	4619      	mov	r1, r3
 800571a:	f7fb fa37 	bl	8000b8c <__aeabi_d2uiz>
 800571e:	4603      	mov	r3, r0
 8005720:	b2db      	uxtb	r3, r3
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	f3af 8000 	nop.w
 8005730:	fcce1c58 	.word	0xfcce1c58
 8005734:	3f800e6a 	.word	0x3f800e6a
 8005738:	40040000 	.word	0x40040000
 800573c:	00000000 	.word	0x00000000

08005740 <can1_ams_cell_voltages_v8s5_decode>:

double can1_ams_cell_voltages_v8s5_decode(uint8_t value)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	4618      	mov	r0, r3
 800574e:	f7fa fecb 	bl	80004e8 <__aeabi_ui2d>
 8005752:	a30e      	add	r3, pc, #56	; (adr r3, 800578c <can1_ams_cell_voltages_v8s5_decode+0x4c>)
 8005754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005758:	f7fa ff40 	bl	80005dc <__aeabi_dmul>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4610      	mov	r0, r2
 8005762:	4619      	mov	r1, r3
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	4b07      	ldr	r3, [pc, #28]	; (8005788 <can1_ams_cell_voltages_v8s5_decode+0x48>)
 800576a:	f7fa fd81 	bl	8000270 <__adddf3>
 800576e:	4602      	mov	r2, r0
 8005770:	460b      	mov	r3, r1
 8005772:	ec43 2b17 	vmov	d7, r2, r3
}
 8005776:	eeb0 0a47 	vmov.f32	s0, s14
 800577a:	eef0 0a67 	vmov.f32	s1, s15
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	f3af 8000 	nop.w
 8005788:	40040000 	.word	0x40040000
 800578c:	fcce1c58 	.word	0xfcce1c58
 8005790:	3f800e6a 	.word	0x3f800e6a
 8005794:	00000000 	.word	0x00000000

08005798 <can1_ams_cell_voltages_v2s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s6_encode(double value)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	4b10      	ldr	r3, [pc, #64]	; (80057e8 <can1_ams_cell_voltages_v2s6_encode+0x50>)
 80057a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057ac:	f7fa fd5e 	bl	800026c <__aeabi_dsub>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4610      	mov	r0, r2
 80057b6:	4619      	mov	r1, r3
 80057b8:	a309      	add	r3, pc, #36	; (adr r3, 80057e0 <can1_ams_cell_voltages_v2s6_encode+0x48>)
 80057ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057be:	f7fb f837 	bl	8000830 <__aeabi_ddiv>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4610      	mov	r0, r2
 80057c8:	4619      	mov	r1, r3
 80057ca:	f7fb f9df 	bl	8000b8c <__aeabi_d2uiz>
 80057ce:	4603      	mov	r3, r0
 80057d0:	b2db      	uxtb	r3, r3
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	f3af 8000 	nop.w
 80057e0:	fcce1c58 	.word	0xfcce1c58
 80057e4:	3f800e6a 	.word	0x3f800e6a
 80057e8:	40040000 	.word	0x40040000
 80057ec:	00000000 	.word	0x00000000

080057f0 <can1_ams_cell_voltages_v2s6_decode>:

double can1_ams_cell_voltages_v2s6_decode(uint8_t value)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fa fe73 	bl	80004e8 <__aeabi_ui2d>
 8005802:	a30e      	add	r3, pc, #56	; (adr r3, 800583c <can1_ams_cell_voltages_v2s6_decode+0x4c>)
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f7fa fee8 	bl	80005dc <__aeabi_dmul>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4610      	mov	r0, r2
 8005812:	4619      	mov	r1, r3
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	4b07      	ldr	r3, [pc, #28]	; (8005838 <can1_ams_cell_voltages_v2s6_decode+0x48>)
 800581a:	f7fa fd29 	bl	8000270 <__adddf3>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	ec43 2b17 	vmov	d7, r2, r3
}
 8005826:	eeb0 0a47 	vmov.f32	s0, s14
 800582a:	eef0 0a67 	vmov.f32	s1, s15
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	f3af 8000 	nop.w
 8005838:	40040000 	.word	0x40040000
 800583c:	fcce1c58 	.word	0xfcce1c58
 8005840:	3f800e6a 	.word	0x3f800e6a
 8005844:	00000000 	.word	0x00000000

08005848 <can1_ams_cell_voltages_v8s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s6_encode(double value)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	4b10      	ldr	r3, [pc, #64]	; (8005898 <can1_ams_cell_voltages_v8s6_encode+0x50>)
 8005858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800585c:	f7fa fd06 	bl	800026c <__aeabi_dsub>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4610      	mov	r0, r2
 8005866:	4619      	mov	r1, r3
 8005868:	a309      	add	r3, pc, #36	; (adr r3, 8005890 <can1_ams_cell_voltages_v8s6_encode+0x48>)
 800586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586e:	f7fa ffdf 	bl	8000830 <__aeabi_ddiv>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	4610      	mov	r0, r2
 8005878:	4619      	mov	r1, r3
 800587a:	f7fb f987 	bl	8000b8c <__aeabi_d2uiz>
 800587e:	4603      	mov	r3, r0
 8005880:	b2db      	uxtb	r3, r3
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	f3af 8000 	nop.w
 8005890:	fcce1c58 	.word	0xfcce1c58
 8005894:	3f800e6a 	.word	0x3f800e6a
 8005898:	40040000 	.word	0x40040000
 800589c:	00000000 	.word	0x00000000

080058a0 <can1_ams_cell_voltages_v8s6_decode>:

double can1_ams_cell_voltages_v8s6_decode(uint8_t value)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	4603      	mov	r3, r0
 80058a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fa fe1b 	bl	80004e8 <__aeabi_ui2d>
 80058b2:	a30e      	add	r3, pc, #56	; (adr r3, 80058ec <can1_ams_cell_voltages_v8s6_decode+0x4c>)
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f7fa fe90 	bl	80005dc <__aeabi_dmul>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4610      	mov	r0, r2
 80058c2:	4619      	mov	r1, r3
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	4b07      	ldr	r3, [pc, #28]	; (80058e8 <can1_ams_cell_voltages_v8s6_decode+0x48>)
 80058ca:	f7fa fcd1 	bl	8000270 <__adddf3>
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80058d6:	eeb0 0a47 	vmov.f32	s0, s14
 80058da:	eef0 0a67 	vmov.f32	s1, s15
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	f3af 8000 	nop.w
 80058e8:	40040000 	.word	0x40040000
 80058ec:	fcce1c58 	.word	0xfcce1c58
 80058f0:	3f800e6a 	.word	0x3f800e6a
 80058f4:	00000000 	.word	0x00000000

080058f8 <can1_ams_cell_voltages_v2s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s7_encode(double value)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005902:	f04f 0200 	mov.w	r2, #0
 8005906:	4b10      	ldr	r3, [pc, #64]	; (8005948 <can1_ams_cell_voltages_v2s7_encode+0x50>)
 8005908:	e9d7 0100 	ldrd	r0, r1, [r7]
 800590c:	f7fa fcae 	bl	800026c <__aeabi_dsub>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4610      	mov	r0, r2
 8005916:	4619      	mov	r1, r3
 8005918:	a309      	add	r3, pc, #36	; (adr r3, 8005940 <can1_ams_cell_voltages_v2s7_encode+0x48>)
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f7fa ff87 	bl	8000830 <__aeabi_ddiv>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4610      	mov	r0, r2
 8005928:	4619      	mov	r1, r3
 800592a:	f7fb f92f 	bl	8000b8c <__aeabi_d2uiz>
 800592e:	4603      	mov	r3, r0
 8005930:	b2db      	uxtb	r3, r3
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	f3af 8000 	nop.w
 8005940:	fcce1c58 	.word	0xfcce1c58
 8005944:	3f800e6a 	.word	0x3f800e6a
 8005948:	40040000 	.word	0x40040000
 800594c:	00000000 	.word	0x00000000

08005950 <can1_ams_cell_voltages_v2s7_decode>:

double can1_ams_cell_voltages_v2s7_decode(uint8_t value)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	4618      	mov	r0, r3
 800595e:	f7fa fdc3 	bl	80004e8 <__aeabi_ui2d>
 8005962:	a30e      	add	r3, pc, #56	; (adr r3, 800599c <can1_ams_cell_voltages_v2s7_decode+0x4c>)
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	f7fa fe38 	bl	80005dc <__aeabi_dmul>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4610      	mov	r0, r2
 8005972:	4619      	mov	r1, r3
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	4b07      	ldr	r3, [pc, #28]	; (8005998 <can1_ams_cell_voltages_v2s7_decode+0x48>)
 800597a:	f7fa fc79 	bl	8000270 <__adddf3>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	ec43 2b17 	vmov	d7, r2, r3
}
 8005986:	eeb0 0a47 	vmov.f32	s0, s14
 800598a:	eef0 0a67 	vmov.f32	s1, s15
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	f3af 8000 	nop.w
 8005998:	40040000 	.word	0x40040000
 800599c:	fcce1c58 	.word	0xfcce1c58
 80059a0:	3f800e6a 	.word	0x3f800e6a
 80059a4:	00000000 	.word	0x00000000

080059a8 <can1_ams_cell_voltages_v8s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s7_encode(double value)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	4b10      	ldr	r3, [pc, #64]	; (80059f8 <can1_ams_cell_voltages_v8s7_encode+0x50>)
 80059b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059bc:	f7fa fc56 	bl	800026c <__aeabi_dsub>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4610      	mov	r0, r2
 80059c6:	4619      	mov	r1, r3
 80059c8:	a309      	add	r3, pc, #36	; (adr r3, 80059f0 <can1_ams_cell_voltages_v8s7_encode+0x48>)
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	f7fa ff2f 	bl	8000830 <__aeabi_ddiv>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4610      	mov	r0, r2
 80059d8:	4619      	mov	r1, r3
 80059da:	f7fb f8d7 	bl	8000b8c <__aeabi_d2uiz>
 80059de:	4603      	mov	r3, r0
 80059e0:	b2db      	uxtb	r3, r3
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	f3af 8000 	nop.w
 80059f0:	fcce1c58 	.word	0xfcce1c58
 80059f4:	3f800e6a 	.word	0x3f800e6a
 80059f8:	40040000 	.word	0x40040000
 80059fc:	00000000 	.word	0x00000000

08005a00 <can1_ams_cell_voltages_v8s7_decode>:

double can1_ams_cell_voltages_v8s7_decode(uint8_t value)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fa fd6b 	bl	80004e8 <__aeabi_ui2d>
 8005a12:	a30e      	add	r3, pc, #56	; (adr r3, 8005a4c <can1_ams_cell_voltages_v8s7_decode+0x4c>)
 8005a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a18:	f7fa fde0 	bl	80005dc <__aeabi_dmul>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4610      	mov	r0, r2
 8005a22:	4619      	mov	r1, r3
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <can1_ams_cell_voltages_v8s7_decode+0x48>)
 8005a2a:	f7fa fc21 	bl	8000270 <__adddf3>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	ec43 2b17 	vmov	d7, r2, r3
}
 8005a36:	eeb0 0a47 	vmov.f32	s0, s14
 8005a3a:	eef0 0a67 	vmov.f32	s1, s15
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	f3af 8000 	nop.w
 8005a48:	40040000 	.word	0x40040000
 8005a4c:	fcce1c58 	.word	0xfcce1c58
 8005a50:	3f800e6a 	.word	0x3f800e6a
 8005a54:	00000000 	.word	0x00000000

08005a58 <can1_ams_cell_voltages_v2s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s8_encode(double value)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <can1_ams_cell_voltages_v2s8_encode+0x50>)
 8005a68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a6c:	f7fa fbfe 	bl	800026c <__aeabi_dsub>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4610      	mov	r0, r2
 8005a76:	4619      	mov	r1, r3
 8005a78:	a309      	add	r3, pc, #36	; (adr r3, 8005aa0 <can1_ams_cell_voltages_v2s8_encode+0x48>)
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	f7fa fed7 	bl	8000830 <__aeabi_ddiv>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4610      	mov	r0, r2
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f7fb f87f 	bl	8000b8c <__aeabi_d2uiz>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	b2db      	uxtb	r3, r3
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	f3af 8000 	nop.w
 8005aa0:	fcce1c58 	.word	0xfcce1c58
 8005aa4:	3f800e6a 	.word	0x3f800e6a
 8005aa8:	40040000 	.word	0x40040000
 8005aac:	00000000 	.word	0x00000000

08005ab0 <can1_ams_cell_voltages_v2s8_decode>:

double can1_ams_cell_voltages_v2s8_decode(uint8_t value)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fa fd13 	bl	80004e8 <__aeabi_ui2d>
 8005ac2:	a30e      	add	r3, pc, #56	; (adr r3, 8005afc <can1_ams_cell_voltages_v2s8_decode+0x4c>)
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	f7fa fd88 	bl	80005dc <__aeabi_dmul>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <can1_ams_cell_voltages_v2s8_decode+0x48>)
 8005ada:	f7fa fbc9 	bl	8000270 <__adddf3>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	ec43 2b17 	vmov	d7, r2, r3
}
 8005ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8005aea:	eef0 0a67 	vmov.f32	s1, s15
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	f3af 8000 	nop.w
 8005af8:	40040000 	.word	0x40040000
 8005afc:	fcce1c58 	.word	0xfcce1c58
 8005b00:	3f800e6a 	.word	0x3f800e6a
 8005b04:	00000000 	.word	0x00000000

08005b08 <can1_ams_cell_voltages_v8s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s8_encode(double value)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <can1_ams_cell_voltages_v8s8_encode+0x50>)
 8005b18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b1c:	f7fa fba6 	bl	800026c <__aeabi_dsub>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4610      	mov	r0, r2
 8005b26:	4619      	mov	r1, r3
 8005b28:	a309      	add	r3, pc, #36	; (adr r3, 8005b50 <can1_ams_cell_voltages_v8s8_encode+0x48>)
 8005b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2e:	f7fa fe7f 	bl	8000830 <__aeabi_ddiv>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4610      	mov	r0, r2
 8005b38:	4619      	mov	r1, r3
 8005b3a:	f7fb f827 	bl	8000b8c <__aeabi_d2uiz>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	b2db      	uxtb	r3, r3
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	f3af 8000 	nop.w
 8005b50:	fcce1c58 	.word	0xfcce1c58
 8005b54:	3f800e6a 	.word	0x3f800e6a
 8005b58:	40040000 	.word	0x40040000
 8005b5c:	00000000 	.word	0x00000000

08005b60 <can1_ams_cell_voltages_v8s8_decode>:

double can1_ams_cell_voltages_v8s8_decode(uint8_t value)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	4603      	mov	r3, r0
 8005b68:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fa fcbb 	bl	80004e8 <__aeabi_ui2d>
 8005b72:	a30e      	add	r3, pc, #56	; (adr r3, 8005bac <can1_ams_cell_voltages_v8s8_decode+0x4c>)
 8005b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b78:	f7fa fd30 	bl	80005dc <__aeabi_dmul>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4610      	mov	r0, r2
 8005b82:	4619      	mov	r1, r3
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <can1_ams_cell_voltages_v8s8_decode+0x48>)
 8005b8a:	f7fa fb71 	bl	8000270 <__adddf3>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	ec43 2b17 	vmov	d7, r2, r3
}
 8005b96:	eeb0 0a47 	vmov.f32	s0, s14
 8005b9a:	eef0 0a67 	vmov.f32	s1, s15
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	f3af 8000 	nop.w
 8005ba8:	40040000 	.word	0x40040000
 8005bac:	fcce1c58 	.word	0xfcce1c58
 8005bb0:	3f800e6a 	.word	0x3f800e6a
 8005bb4:	00000000 	.word	0x00000000

08005bb8 <can1_ams_cell_voltages_v2s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s9_encode(double value)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <can1_ams_cell_voltages_v2s9_encode+0x50>)
 8005bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bcc:	f7fa fb4e 	bl	800026c <__aeabi_dsub>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	a309      	add	r3, pc, #36	; (adr r3, 8005c00 <can1_ams_cell_voltages_v2s9_encode+0x48>)
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	f7fa fe27 	bl	8000830 <__aeabi_ddiv>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4610      	mov	r0, r2
 8005be8:	4619      	mov	r1, r3
 8005bea:	f7fa ffcf 	bl	8000b8c <__aeabi_d2uiz>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	b2db      	uxtb	r3, r3
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	f3af 8000 	nop.w
 8005c00:	fcce1c58 	.word	0xfcce1c58
 8005c04:	3f800e6a 	.word	0x3f800e6a
 8005c08:	40040000 	.word	0x40040000
 8005c0c:	00000000 	.word	0x00000000

08005c10 <can1_ams_cell_voltages_v2s9_decode>:

double can1_ams_cell_voltages_v2s9_decode(uint8_t value)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fa fc63 	bl	80004e8 <__aeabi_ui2d>
 8005c22:	a30e      	add	r3, pc, #56	; (adr r3, 8005c5c <can1_ams_cell_voltages_v2s9_decode+0x4c>)
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	f7fa fcd8 	bl	80005dc <__aeabi_dmul>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4610      	mov	r0, r2
 8005c32:	4619      	mov	r1, r3
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <can1_ams_cell_voltages_v2s9_decode+0x48>)
 8005c3a:	f7fa fb19 	bl	8000270 <__adddf3>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	ec43 2b17 	vmov	d7, r2, r3
}
 8005c46:	eeb0 0a47 	vmov.f32	s0, s14
 8005c4a:	eef0 0a67 	vmov.f32	s1, s15
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	f3af 8000 	nop.w
 8005c58:	40040000 	.word	0x40040000
 8005c5c:	fcce1c58 	.word	0xfcce1c58
 8005c60:	3f800e6a 	.word	0x3f800e6a
 8005c64:	00000000 	.word	0x00000000

08005c68 <can1_ams_cell_voltages_v8s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s9_encode(double value)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <can1_ams_cell_voltages_v8s9_encode+0x50>)
 8005c78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c7c:	f7fa faf6 	bl	800026c <__aeabi_dsub>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4610      	mov	r0, r2
 8005c86:	4619      	mov	r1, r3
 8005c88:	a309      	add	r3, pc, #36	; (adr r3, 8005cb0 <can1_ams_cell_voltages_v8s9_encode+0x48>)
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	f7fa fdcf 	bl	8000830 <__aeabi_ddiv>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4610      	mov	r0, r2
 8005c98:	4619      	mov	r1, r3
 8005c9a:	f7fa ff77 	bl	8000b8c <__aeabi_d2uiz>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	b2db      	uxtb	r3, r3
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	f3af 8000 	nop.w
 8005cb0:	fcce1c58 	.word	0xfcce1c58
 8005cb4:	3f800e6a 	.word	0x3f800e6a
 8005cb8:	40040000 	.word	0x40040000
 8005cbc:	00000000 	.word	0x00000000

08005cc0 <can1_ams_cell_voltages_v8s9_decode>:

double can1_ams_cell_voltages_v8s9_decode(uint8_t value)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fa fc0b 	bl	80004e8 <__aeabi_ui2d>
 8005cd2:	a30e      	add	r3, pc, #56	; (adr r3, 8005d0c <can1_ams_cell_voltages_v8s9_decode+0x4c>)
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	f7fa fc80 	bl	80005dc <__aeabi_dmul>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <can1_ams_cell_voltages_v8s9_decode+0x48>)
 8005cea:	f7fa fac1 	bl	8000270 <__adddf3>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	ec43 2b17 	vmov	d7, r2, r3
}
 8005cf6:	eeb0 0a47 	vmov.f32	s0, s14
 8005cfa:	eef0 0a67 	vmov.f32	s1, s15
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	f3af 8000 	nop.w
 8005d08:	40040000 	.word	0x40040000
 8005d0c:	fcce1c58 	.word	0xfcce1c58
 8005d10:	3f800e6a 	.word	0x3f800e6a
 8005d14:	00000000 	.word	0x00000000

08005d18 <can1_ams_cell_voltages_v2s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s10_encode(double value)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <can1_ams_cell_voltages_v2s10_encode+0x50>)
 8005d28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d2c:	f7fa fa9e 	bl	800026c <__aeabi_dsub>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4610      	mov	r0, r2
 8005d36:	4619      	mov	r1, r3
 8005d38:	a309      	add	r3, pc, #36	; (adr r3, 8005d60 <can1_ams_cell_voltages_v2s10_encode+0x48>)
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	f7fa fd77 	bl	8000830 <__aeabi_ddiv>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4610      	mov	r0, r2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	f7fa ff1f 	bl	8000b8c <__aeabi_d2uiz>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	b2db      	uxtb	r3, r3
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	f3af 8000 	nop.w
 8005d60:	fcce1c58 	.word	0xfcce1c58
 8005d64:	3f800e6a 	.word	0x3f800e6a
 8005d68:	40040000 	.word	0x40040000
 8005d6c:	00000000 	.word	0x00000000

08005d70 <can1_ams_cell_voltages_v2s10_decode>:

double can1_ams_cell_voltages_v2s10_decode(uint8_t value)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fa fbb3 	bl	80004e8 <__aeabi_ui2d>
 8005d82:	a30e      	add	r3, pc, #56	; (adr r3, 8005dbc <can1_ams_cell_voltages_v2s10_decode+0x4c>)
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	f7fa fc28 	bl	80005dc <__aeabi_dmul>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4610      	mov	r0, r2
 8005d92:	4619      	mov	r1, r3
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <can1_ams_cell_voltages_v2s10_decode+0x48>)
 8005d9a:	f7fa fa69 	bl	8000270 <__adddf3>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	ec43 2b17 	vmov	d7, r2, r3
}
 8005da6:	eeb0 0a47 	vmov.f32	s0, s14
 8005daa:	eef0 0a67 	vmov.f32	s1, s15
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	f3af 8000 	nop.w
 8005db8:	40040000 	.word	0x40040000
 8005dbc:	fcce1c58 	.word	0xfcce1c58
 8005dc0:	3f800e6a 	.word	0x3f800e6a
 8005dc4:	00000000 	.word	0x00000000

08005dc8 <can1_ams_cell_voltages_v8s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s10_encode(double value)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	4b10      	ldr	r3, [pc, #64]	; (8005e18 <can1_ams_cell_voltages_v8s10_encode+0x50>)
 8005dd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ddc:	f7fa fa46 	bl	800026c <__aeabi_dsub>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4610      	mov	r0, r2
 8005de6:	4619      	mov	r1, r3
 8005de8:	a309      	add	r3, pc, #36	; (adr r3, 8005e10 <can1_ams_cell_voltages_v8s10_encode+0x48>)
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f7fa fd1f 	bl	8000830 <__aeabi_ddiv>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4610      	mov	r0, r2
 8005df8:	4619      	mov	r1, r3
 8005dfa:	f7fa fec7 	bl	8000b8c <__aeabi_d2uiz>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	b2db      	uxtb	r3, r3
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	f3af 8000 	nop.w
 8005e10:	fcce1c58 	.word	0xfcce1c58
 8005e14:	3f800e6a 	.word	0x3f800e6a
 8005e18:	40040000 	.word	0x40040000
 8005e1c:	00000000 	.word	0x00000000

08005e20 <can1_ams_cell_voltages_v8s10_decode>:

double can1_ams_cell_voltages_v8s10_decode(uint8_t value)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	4603      	mov	r3, r0
 8005e28:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fa fb5b 	bl	80004e8 <__aeabi_ui2d>
 8005e32:	a30e      	add	r3, pc, #56	; (adr r3, 8005e6c <can1_ams_cell_voltages_v8s10_decode+0x4c>)
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f7fa fbd0 	bl	80005dc <__aeabi_dmul>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4610      	mov	r0, r2
 8005e42:	4619      	mov	r1, r3
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <can1_ams_cell_voltages_v8s10_decode+0x48>)
 8005e4a:	f7fa fa11 	bl	8000270 <__adddf3>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	ec43 2b17 	vmov	d7, r2, r3
}
 8005e56:	eeb0 0a47 	vmov.f32	s0, s14
 8005e5a:	eef0 0a67 	vmov.f32	s1, s15
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	f3af 8000 	nop.w
 8005e68:	40040000 	.word	0x40040000
 8005e6c:	fcce1c58 	.word	0xfcce1c58
 8005e70:	3f800e6a 	.word	0x3f800e6a
 8005e74:	00000000 	.word	0x00000000

08005e78 <can1_ams_cell_voltages_v2s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s11_encode(double value)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	4b10      	ldr	r3, [pc, #64]	; (8005ec8 <can1_ams_cell_voltages_v2s11_encode+0x50>)
 8005e88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e8c:	f7fa f9ee 	bl	800026c <__aeabi_dsub>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4610      	mov	r0, r2
 8005e96:	4619      	mov	r1, r3
 8005e98:	a309      	add	r3, pc, #36	; (adr r3, 8005ec0 <can1_ams_cell_voltages_v2s11_encode+0x48>)
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	f7fa fcc7 	bl	8000830 <__aeabi_ddiv>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	f7fa fe6f 	bl	8000b8c <__aeabi_d2uiz>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	b2db      	uxtb	r3, r3
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	f3af 8000 	nop.w
 8005ec0:	fcce1c58 	.word	0xfcce1c58
 8005ec4:	3f800e6a 	.word	0x3f800e6a
 8005ec8:	40040000 	.word	0x40040000
 8005ecc:	00000000 	.word	0x00000000

08005ed0 <can1_ams_cell_voltages_v2s11_decode>:

double can1_ams_cell_voltages_v2s11_decode(uint8_t value)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fa fb03 	bl	80004e8 <__aeabi_ui2d>
 8005ee2:	a30e      	add	r3, pc, #56	; (adr r3, 8005f1c <can1_ams_cell_voltages_v2s11_decode+0x4c>)
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	f7fa fb78 	bl	80005dc <__aeabi_dmul>
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	4b07      	ldr	r3, [pc, #28]	; (8005f18 <can1_ams_cell_voltages_v2s11_decode+0x48>)
 8005efa:	f7fa f9b9 	bl	8000270 <__adddf3>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	ec43 2b17 	vmov	d7, r2, r3
}
 8005f06:	eeb0 0a47 	vmov.f32	s0, s14
 8005f0a:	eef0 0a67 	vmov.f32	s1, s15
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	f3af 8000 	nop.w
 8005f18:	40040000 	.word	0x40040000
 8005f1c:	fcce1c58 	.word	0xfcce1c58
 8005f20:	3f800e6a 	.word	0x3f800e6a
 8005f24:	00000000 	.word	0x00000000

08005f28 <can1_ams_cell_voltages_v8s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s11_encode(double value)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005f32:	f04f 0200 	mov.w	r2, #0
 8005f36:	4b10      	ldr	r3, [pc, #64]	; (8005f78 <can1_ams_cell_voltages_v8s11_encode+0x50>)
 8005f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f3c:	f7fa f996 	bl	800026c <__aeabi_dsub>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	4610      	mov	r0, r2
 8005f46:	4619      	mov	r1, r3
 8005f48:	a309      	add	r3, pc, #36	; (adr r3, 8005f70 <can1_ams_cell_voltages_v8s11_encode+0x48>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f7fa fc6f 	bl	8000830 <__aeabi_ddiv>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4610      	mov	r0, r2
 8005f58:	4619      	mov	r1, r3
 8005f5a:	f7fa fe17 	bl	8000b8c <__aeabi_d2uiz>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	b2db      	uxtb	r3, r3
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	f3af 8000 	nop.w
 8005f70:	fcce1c58 	.word	0xfcce1c58
 8005f74:	3f800e6a 	.word	0x3f800e6a
 8005f78:	40040000 	.word	0x40040000
 8005f7c:	00000000 	.word	0x00000000

08005f80 <can1_ams_cell_voltages_v8s11_decode>:

double can1_ams_cell_voltages_v8s11_decode(uint8_t value)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	4603      	mov	r3, r0
 8005f88:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fa faab 	bl	80004e8 <__aeabi_ui2d>
 8005f92:	a30e      	add	r3, pc, #56	; (adr r3, 8005fcc <can1_ams_cell_voltages_v8s11_decode+0x4c>)
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	f7fa fb20 	bl	80005dc <__aeabi_dmul>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	4b07      	ldr	r3, [pc, #28]	; (8005fc8 <can1_ams_cell_voltages_v8s11_decode+0x48>)
 8005faa:	f7fa f961 	bl	8000270 <__adddf3>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	ec43 2b17 	vmov	d7, r2, r3
}
 8005fb6:	eeb0 0a47 	vmov.f32	s0, s14
 8005fba:	eef0 0a67 	vmov.f32	s1, s15
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	f3af 8000 	nop.w
 8005fc8:	40040000 	.word	0x40040000
 8005fcc:	fcce1c58 	.word	0xfcce1c58
 8005fd0:	3f800e6a 	.word	0x3f800e6a
 8005fd4:	00000000 	.word	0x00000000

08005fd8 <can1_ams_cell_voltages_v2s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s12_encode(double value)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	4b10      	ldr	r3, [pc, #64]	; (8006028 <can1_ams_cell_voltages_v2s12_encode+0x50>)
 8005fe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fec:	f7fa f93e 	bl	800026c <__aeabi_dsub>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	a309      	add	r3, pc, #36	; (adr r3, 8006020 <can1_ams_cell_voltages_v2s12_encode+0x48>)
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	f7fa fc17 	bl	8000830 <__aeabi_ddiv>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4610      	mov	r0, r2
 8006008:	4619      	mov	r1, r3
 800600a:	f7fa fdbf 	bl	8000b8c <__aeabi_d2uiz>
 800600e:	4603      	mov	r3, r0
 8006010:	b2db      	uxtb	r3, r3
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	f3af 8000 	nop.w
 8006020:	fcce1c58 	.word	0xfcce1c58
 8006024:	3f800e6a 	.word	0x3f800e6a
 8006028:	40040000 	.word	0x40040000
 800602c:	00000000 	.word	0x00000000

08006030 <can1_ams_cell_voltages_v2s12_decode>:

double can1_ams_cell_voltages_v2s12_decode(uint8_t value)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	4603      	mov	r3, r0
 8006038:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	4618      	mov	r0, r3
 800603e:	f7fa fa53 	bl	80004e8 <__aeabi_ui2d>
 8006042:	a30e      	add	r3, pc, #56	; (adr r3, 800607c <can1_ams_cell_voltages_v2s12_decode+0x4c>)
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	f7fa fac8 	bl	80005dc <__aeabi_dmul>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4610      	mov	r0, r2
 8006052:	4619      	mov	r1, r3
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	4b07      	ldr	r3, [pc, #28]	; (8006078 <can1_ams_cell_voltages_v2s12_decode+0x48>)
 800605a:	f7fa f909 	bl	8000270 <__adddf3>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	ec43 2b17 	vmov	d7, r2, r3
}
 8006066:	eeb0 0a47 	vmov.f32	s0, s14
 800606a:	eef0 0a67 	vmov.f32	s1, s15
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	f3af 8000 	nop.w
 8006078:	40040000 	.word	0x40040000
 800607c:	fcce1c58 	.word	0xfcce1c58
 8006080:	3f800e6a 	.word	0x3f800e6a
 8006084:	00000000 	.word	0x00000000

08006088 <can1_ams_cell_voltages_v8s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s12_encode(double value)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006092:	f04f 0200 	mov.w	r2, #0
 8006096:	4b10      	ldr	r3, [pc, #64]	; (80060d8 <can1_ams_cell_voltages_v8s12_encode+0x50>)
 8006098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800609c:	f7fa f8e6 	bl	800026c <__aeabi_dsub>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4610      	mov	r0, r2
 80060a6:	4619      	mov	r1, r3
 80060a8:	a309      	add	r3, pc, #36	; (adr r3, 80060d0 <can1_ams_cell_voltages_v8s12_encode+0x48>)
 80060aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ae:	f7fa fbbf 	bl	8000830 <__aeabi_ddiv>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4610      	mov	r0, r2
 80060b8:	4619      	mov	r1, r3
 80060ba:	f7fa fd67 	bl	8000b8c <__aeabi_d2uiz>
 80060be:	4603      	mov	r3, r0
 80060c0:	b2db      	uxtb	r3, r3
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	f3af 8000 	nop.w
 80060d0:	fcce1c58 	.word	0xfcce1c58
 80060d4:	3f800e6a 	.word	0x3f800e6a
 80060d8:	40040000 	.word	0x40040000
 80060dc:	00000000 	.word	0x00000000

080060e0 <can1_ams_cell_voltages_v8s12_decode>:

double can1_ams_cell_voltages_v8s12_decode(uint8_t value)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	4603      	mov	r3, r0
 80060e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80060ea:	79fb      	ldrb	r3, [r7, #7]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fa f9fb 	bl	80004e8 <__aeabi_ui2d>
 80060f2:	a30e      	add	r3, pc, #56	; (adr r3, 800612c <can1_ams_cell_voltages_v8s12_decode+0x4c>)
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f7fa fa70 	bl	80005dc <__aeabi_dmul>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4610      	mov	r0, r2
 8006102:	4619      	mov	r1, r3
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	4b07      	ldr	r3, [pc, #28]	; (8006128 <can1_ams_cell_voltages_v8s12_decode+0x48>)
 800610a:	f7fa f8b1 	bl	8000270 <__adddf3>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	ec43 2b17 	vmov	d7, r2, r3
}
 8006116:	eeb0 0a47 	vmov.f32	s0, s14
 800611a:	eef0 0a67 	vmov.f32	s1, s15
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	f3af 8000 	nop.w
 8006128:	40040000 	.word	0x40040000
 800612c:	fcce1c58 	.word	0xfcce1c58
 8006130:	3f800e6a 	.word	0x3f800e6a
 8006134:	00000000 	.word	0x00000000

08006138 <can1_ams_cell_voltages_v3s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s1_encode(double value)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	4b10      	ldr	r3, [pc, #64]	; (8006188 <can1_ams_cell_voltages_v3s1_encode+0x50>)
 8006148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800614c:	f7fa f88e 	bl	800026c <__aeabi_dsub>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	4610      	mov	r0, r2
 8006156:	4619      	mov	r1, r3
 8006158:	a309      	add	r3, pc, #36	; (adr r3, 8006180 <can1_ams_cell_voltages_v3s1_encode+0x48>)
 800615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615e:	f7fa fb67 	bl	8000830 <__aeabi_ddiv>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4610      	mov	r0, r2
 8006168:	4619      	mov	r1, r3
 800616a:	f7fa fd0f 	bl	8000b8c <__aeabi_d2uiz>
 800616e:	4603      	mov	r3, r0
 8006170:	b2db      	uxtb	r3, r3
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	f3af 8000 	nop.w
 8006180:	fcce1c58 	.word	0xfcce1c58
 8006184:	3f800e6a 	.word	0x3f800e6a
 8006188:	40040000 	.word	0x40040000
 800618c:	00000000 	.word	0x00000000

08006190 <can1_ams_cell_voltages_v3s1_decode>:

double can1_ams_cell_voltages_v3s1_decode(uint8_t value)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800619a:	79fb      	ldrb	r3, [r7, #7]
 800619c:	4618      	mov	r0, r3
 800619e:	f7fa f9a3 	bl	80004e8 <__aeabi_ui2d>
 80061a2:	a30e      	add	r3, pc, #56	; (adr r3, 80061dc <can1_ams_cell_voltages_v3s1_decode+0x4c>)
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f7fa fa18 	bl	80005dc <__aeabi_dmul>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4610      	mov	r0, r2
 80061b2:	4619      	mov	r1, r3
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <can1_ams_cell_voltages_v3s1_decode+0x48>)
 80061ba:	f7fa f859 	bl	8000270 <__adddf3>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80061c6:	eeb0 0a47 	vmov.f32	s0, s14
 80061ca:	eef0 0a67 	vmov.f32	s1, s15
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	f3af 8000 	nop.w
 80061d8:	40040000 	.word	0x40040000
 80061dc:	fcce1c58 	.word	0xfcce1c58
 80061e0:	3f800e6a 	.word	0x3f800e6a
 80061e4:	00000000 	.word	0x00000000

080061e8 <can1_ams_cell_voltages_v9s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s1_encode(double value)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	4b10      	ldr	r3, [pc, #64]	; (8006238 <can1_ams_cell_voltages_v9s1_encode+0x50>)
 80061f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061fc:	f7fa f836 	bl	800026c <__aeabi_dsub>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4610      	mov	r0, r2
 8006206:	4619      	mov	r1, r3
 8006208:	a309      	add	r3, pc, #36	; (adr r3, 8006230 <can1_ams_cell_voltages_v9s1_encode+0x48>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f7fa fb0f 	bl	8000830 <__aeabi_ddiv>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4610      	mov	r0, r2
 8006218:	4619      	mov	r1, r3
 800621a:	f7fa fcb7 	bl	8000b8c <__aeabi_d2uiz>
 800621e:	4603      	mov	r3, r0
 8006220:	b2db      	uxtb	r3, r3
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	f3af 8000 	nop.w
 8006230:	fcce1c58 	.word	0xfcce1c58
 8006234:	3f800e6a 	.word	0x3f800e6a
 8006238:	40040000 	.word	0x40040000
 800623c:	00000000 	.word	0x00000000

08006240 <can1_ams_cell_voltages_v9s1_decode>:

double can1_ams_cell_voltages_v9s1_decode(uint8_t value)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	4603      	mov	r3, r0
 8006248:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	4618      	mov	r0, r3
 800624e:	f7fa f94b 	bl	80004e8 <__aeabi_ui2d>
 8006252:	a30e      	add	r3, pc, #56	; (adr r3, 800628c <can1_ams_cell_voltages_v9s1_decode+0x4c>)
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	f7fa f9c0 	bl	80005dc <__aeabi_dmul>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4610      	mov	r0, r2
 8006262:	4619      	mov	r1, r3
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	4b07      	ldr	r3, [pc, #28]	; (8006288 <can1_ams_cell_voltages_v9s1_decode+0x48>)
 800626a:	f7fa f801 	bl	8000270 <__adddf3>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	ec43 2b17 	vmov	d7, r2, r3
}
 8006276:	eeb0 0a47 	vmov.f32	s0, s14
 800627a:	eef0 0a67 	vmov.f32	s1, s15
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	f3af 8000 	nop.w
 8006288:	40040000 	.word	0x40040000
 800628c:	fcce1c58 	.word	0xfcce1c58
 8006290:	3f800e6a 	.word	0x3f800e6a
 8006294:	00000000 	.word	0x00000000

08006298 <can1_ams_cell_voltages_v3s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s2_encode(double value)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	4b10      	ldr	r3, [pc, #64]	; (80062e8 <can1_ams_cell_voltages_v3s2_encode+0x50>)
 80062a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062ac:	f7f9 ffde 	bl	800026c <__aeabi_dsub>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	4610      	mov	r0, r2
 80062b6:	4619      	mov	r1, r3
 80062b8:	a309      	add	r3, pc, #36	; (adr r3, 80062e0 <can1_ams_cell_voltages_v3s2_encode+0x48>)
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	f7fa fab7 	bl	8000830 <__aeabi_ddiv>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	4610      	mov	r0, r2
 80062c8:	4619      	mov	r1, r3
 80062ca:	f7fa fc5f 	bl	8000b8c <__aeabi_d2uiz>
 80062ce:	4603      	mov	r3, r0
 80062d0:	b2db      	uxtb	r3, r3
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	f3af 8000 	nop.w
 80062e0:	fcce1c58 	.word	0xfcce1c58
 80062e4:	3f800e6a 	.word	0x3f800e6a
 80062e8:	40040000 	.word	0x40040000
 80062ec:	00000000 	.word	0x00000000

080062f0 <can1_ams_cell_voltages_v3s2_decode>:

double can1_ams_cell_voltages_v3s2_decode(uint8_t value)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	4603      	mov	r3, r0
 80062f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fa f8f3 	bl	80004e8 <__aeabi_ui2d>
 8006302:	a30e      	add	r3, pc, #56	; (adr r3, 800633c <can1_ams_cell_voltages_v3s2_decode+0x4c>)
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	f7fa f968 	bl	80005dc <__aeabi_dmul>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4610      	mov	r0, r2
 8006312:	4619      	mov	r1, r3
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	4b07      	ldr	r3, [pc, #28]	; (8006338 <can1_ams_cell_voltages_v3s2_decode+0x48>)
 800631a:	f7f9 ffa9 	bl	8000270 <__adddf3>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	ec43 2b17 	vmov	d7, r2, r3
}
 8006326:	eeb0 0a47 	vmov.f32	s0, s14
 800632a:	eef0 0a67 	vmov.f32	s1, s15
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	f3af 8000 	nop.w
 8006338:	40040000 	.word	0x40040000
 800633c:	fcce1c58 	.word	0xfcce1c58
 8006340:	3f800e6a 	.word	0x3f800e6a
 8006344:	00000000 	.word	0x00000000

08006348 <can1_ams_cell_voltages_v9s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s2_encode(double value)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	4b10      	ldr	r3, [pc, #64]	; (8006398 <can1_ams_cell_voltages_v9s2_encode+0x50>)
 8006358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800635c:	f7f9 ff86 	bl	800026c <__aeabi_dsub>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4610      	mov	r0, r2
 8006366:	4619      	mov	r1, r3
 8006368:	a309      	add	r3, pc, #36	; (adr r3, 8006390 <can1_ams_cell_voltages_v9s2_encode+0x48>)
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f7fa fa5f 	bl	8000830 <__aeabi_ddiv>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	4610      	mov	r0, r2
 8006378:	4619      	mov	r1, r3
 800637a:	f7fa fc07 	bl	8000b8c <__aeabi_d2uiz>
 800637e:	4603      	mov	r3, r0
 8006380:	b2db      	uxtb	r3, r3
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	f3af 8000 	nop.w
 8006390:	fcce1c58 	.word	0xfcce1c58
 8006394:	3f800e6a 	.word	0x3f800e6a
 8006398:	40040000 	.word	0x40040000
 800639c:	00000000 	.word	0x00000000

080063a0 <can1_ams_cell_voltages_v9s2_decode>:

double can1_ams_cell_voltages_v9s2_decode(uint8_t value)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	4603      	mov	r3, r0
 80063a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80063aa:	79fb      	ldrb	r3, [r7, #7]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fa f89b 	bl	80004e8 <__aeabi_ui2d>
 80063b2:	a30e      	add	r3, pc, #56	; (adr r3, 80063ec <can1_ams_cell_voltages_v9s2_decode+0x4c>)
 80063b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b8:	f7fa f910 	bl	80005dc <__aeabi_dmul>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4610      	mov	r0, r2
 80063c2:	4619      	mov	r1, r3
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	4b07      	ldr	r3, [pc, #28]	; (80063e8 <can1_ams_cell_voltages_v9s2_decode+0x48>)
 80063ca:	f7f9 ff51 	bl	8000270 <__adddf3>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80063d6:	eeb0 0a47 	vmov.f32	s0, s14
 80063da:	eef0 0a67 	vmov.f32	s1, s15
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	f3af 8000 	nop.w
 80063e8:	40040000 	.word	0x40040000
 80063ec:	fcce1c58 	.word	0xfcce1c58
 80063f0:	3f800e6a 	.word	0x3f800e6a
 80063f4:	00000000 	.word	0x00000000

080063f8 <can1_ams_cell_voltages_v3s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s3_encode(double value)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006402:	f04f 0200 	mov.w	r2, #0
 8006406:	4b10      	ldr	r3, [pc, #64]	; (8006448 <can1_ams_cell_voltages_v3s3_encode+0x50>)
 8006408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800640c:	f7f9 ff2e 	bl	800026c <__aeabi_dsub>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4610      	mov	r0, r2
 8006416:	4619      	mov	r1, r3
 8006418:	a309      	add	r3, pc, #36	; (adr r3, 8006440 <can1_ams_cell_voltages_v3s3_encode+0x48>)
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	f7fa fa07 	bl	8000830 <__aeabi_ddiv>
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	4610      	mov	r0, r2
 8006428:	4619      	mov	r1, r3
 800642a:	f7fa fbaf 	bl	8000b8c <__aeabi_d2uiz>
 800642e:	4603      	mov	r3, r0
 8006430:	b2db      	uxtb	r3, r3
}
 8006432:	4618      	mov	r0, r3
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	f3af 8000 	nop.w
 8006440:	fcce1c58 	.word	0xfcce1c58
 8006444:	3f800e6a 	.word	0x3f800e6a
 8006448:	40040000 	.word	0x40040000
 800644c:	00000000 	.word	0x00000000

08006450 <can1_ams_cell_voltages_v3s3_decode>:

double can1_ams_cell_voltages_v3s3_decode(uint8_t value)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	4603      	mov	r3, r0
 8006458:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	4618      	mov	r0, r3
 800645e:	f7fa f843 	bl	80004e8 <__aeabi_ui2d>
 8006462:	a30e      	add	r3, pc, #56	; (adr r3, 800649c <can1_ams_cell_voltages_v3s3_decode+0x4c>)
 8006464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006468:	f7fa f8b8 	bl	80005dc <__aeabi_dmul>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4610      	mov	r0, r2
 8006472:	4619      	mov	r1, r3
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	4b07      	ldr	r3, [pc, #28]	; (8006498 <can1_ams_cell_voltages_v3s3_decode+0x48>)
 800647a:	f7f9 fef9 	bl	8000270 <__adddf3>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	ec43 2b17 	vmov	d7, r2, r3
}
 8006486:	eeb0 0a47 	vmov.f32	s0, s14
 800648a:	eef0 0a67 	vmov.f32	s1, s15
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	f3af 8000 	nop.w
 8006498:	40040000 	.word	0x40040000
 800649c:	fcce1c58 	.word	0xfcce1c58
 80064a0:	3f800e6a 	.word	0x3f800e6a
 80064a4:	00000000 	.word	0x00000000

080064a8 <can1_ams_cell_voltages_v9s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s3_encode(double value)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80064b2:	f04f 0200 	mov.w	r2, #0
 80064b6:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <can1_ams_cell_voltages_v9s3_encode+0x50>)
 80064b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064bc:	f7f9 fed6 	bl	800026c <__aeabi_dsub>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4610      	mov	r0, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	a309      	add	r3, pc, #36	; (adr r3, 80064f0 <can1_ams_cell_voltages_v9s3_encode+0x48>)
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	f7fa f9af 	bl	8000830 <__aeabi_ddiv>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4610      	mov	r0, r2
 80064d8:	4619      	mov	r1, r3
 80064da:	f7fa fb57 	bl	8000b8c <__aeabi_d2uiz>
 80064de:	4603      	mov	r3, r0
 80064e0:	b2db      	uxtb	r3, r3
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	f3af 8000 	nop.w
 80064f0:	fcce1c58 	.word	0xfcce1c58
 80064f4:	3f800e6a 	.word	0x3f800e6a
 80064f8:	40040000 	.word	0x40040000
 80064fc:	00000000 	.word	0x00000000

08006500 <can1_ams_cell_voltages_v9s3_decode>:

double can1_ams_cell_voltages_v9s3_decode(uint8_t value)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	4618      	mov	r0, r3
 800650e:	f7f9 ffeb 	bl	80004e8 <__aeabi_ui2d>
 8006512:	a30e      	add	r3, pc, #56	; (adr r3, 800654c <can1_ams_cell_voltages_v9s3_decode+0x4c>)
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	f7fa f860 	bl	80005dc <__aeabi_dmul>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4610      	mov	r0, r2
 8006522:	4619      	mov	r1, r3
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	4b07      	ldr	r3, [pc, #28]	; (8006548 <can1_ams_cell_voltages_v9s3_decode+0x48>)
 800652a:	f7f9 fea1 	bl	8000270 <__adddf3>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	ec43 2b17 	vmov	d7, r2, r3
}
 8006536:	eeb0 0a47 	vmov.f32	s0, s14
 800653a:	eef0 0a67 	vmov.f32	s1, s15
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	f3af 8000 	nop.w
 8006548:	40040000 	.word	0x40040000
 800654c:	fcce1c58 	.word	0xfcce1c58
 8006550:	3f800e6a 	.word	0x3f800e6a
 8006554:	00000000 	.word	0x00000000

08006558 <can1_ams_cell_voltages_v3s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s4_encode(double value)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006562:	f04f 0200 	mov.w	r2, #0
 8006566:	4b10      	ldr	r3, [pc, #64]	; (80065a8 <can1_ams_cell_voltages_v3s4_encode+0x50>)
 8006568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800656c:	f7f9 fe7e 	bl	800026c <__aeabi_dsub>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4610      	mov	r0, r2
 8006576:	4619      	mov	r1, r3
 8006578:	a309      	add	r3, pc, #36	; (adr r3, 80065a0 <can1_ams_cell_voltages_v3s4_encode+0x48>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f7fa f957 	bl	8000830 <__aeabi_ddiv>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4610      	mov	r0, r2
 8006588:	4619      	mov	r1, r3
 800658a:	f7fa faff 	bl	8000b8c <__aeabi_d2uiz>
 800658e:	4603      	mov	r3, r0
 8006590:	b2db      	uxtb	r3, r3
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	f3af 8000 	nop.w
 80065a0:	fcce1c58 	.word	0xfcce1c58
 80065a4:	3f800e6a 	.word	0x3f800e6a
 80065a8:	40040000 	.word	0x40040000
 80065ac:	00000000 	.word	0x00000000

080065b0 <can1_ams_cell_voltages_v3s4_decode>:

double can1_ams_cell_voltages_v3s4_decode(uint8_t value)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7f9 ff93 	bl	80004e8 <__aeabi_ui2d>
 80065c2:	a30e      	add	r3, pc, #56	; (adr r3, 80065fc <can1_ams_cell_voltages_v3s4_decode+0x4c>)
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f7fa f808 	bl	80005dc <__aeabi_dmul>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4610      	mov	r0, r2
 80065d2:	4619      	mov	r1, r3
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	4b07      	ldr	r3, [pc, #28]	; (80065f8 <can1_ams_cell_voltages_v3s4_decode+0x48>)
 80065da:	f7f9 fe49 	bl	8000270 <__adddf3>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80065e6:	eeb0 0a47 	vmov.f32	s0, s14
 80065ea:	eef0 0a67 	vmov.f32	s1, s15
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	f3af 8000 	nop.w
 80065f8:	40040000 	.word	0x40040000
 80065fc:	fcce1c58 	.word	0xfcce1c58
 8006600:	3f800e6a 	.word	0x3f800e6a
 8006604:	00000000 	.word	0x00000000

08006608 <can1_ams_cell_voltages_v9s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s4_encode(double value)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	4b10      	ldr	r3, [pc, #64]	; (8006658 <can1_ams_cell_voltages_v9s4_encode+0x50>)
 8006618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800661c:	f7f9 fe26 	bl	800026c <__aeabi_dsub>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4610      	mov	r0, r2
 8006626:	4619      	mov	r1, r3
 8006628:	a309      	add	r3, pc, #36	; (adr r3, 8006650 <can1_ams_cell_voltages_v9s4_encode+0x48>)
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	f7fa f8ff 	bl	8000830 <__aeabi_ddiv>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4610      	mov	r0, r2
 8006638:	4619      	mov	r1, r3
 800663a:	f7fa faa7 	bl	8000b8c <__aeabi_d2uiz>
 800663e:	4603      	mov	r3, r0
 8006640:	b2db      	uxtb	r3, r3
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	f3af 8000 	nop.w
 8006650:	fcce1c58 	.word	0xfcce1c58
 8006654:	3f800e6a 	.word	0x3f800e6a
 8006658:	40040000 	.word	0x40040000
 800665c:	00000000 	.word	0x00000000

08006660 <can1_ams_cell_voltages_v9s4_decode>:

double can1_ams_cell_voltages_v9s4_decode(uint8_t value)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800666a:	79fb      	ldrb	r3, [r7, #7]
 800666c:	4618      	mov	r0, r3
 800666e:	f7f9 ff3b 	bl	80004e8 <__aeabi_ui2d>
 8006672:	a30e      	add	r3, pc, #56	; (adr r3, 80066ac <can1_ams_cell_voltages_v9s4_decode+0x4c>)
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	f7f9 ffb0 	bl	80005dc <__aeabi_dmul>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4610      	mov	r0, r2
 8006682:	4619      	mov	r1, r3
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	4b07      	ldr	r3, [pc, #28]	; (80066a8 <can1_ams_cell_voltages_v9s4_decode+0x48>)
 800668a:	f7f9 fdf1 	bl	8000270 <__adddf3>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	ec43 2b17 	vmov	d7, r2, r3
}
 8006696:	eeb0 0a47 	vmov.f32	s0, s14
 800669a:	eef0 0a67 	vmov.f32	s1, s15
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	f3af 8000 	nop.w
 80066a8:	40040000 	.word	0x40040000
 80066ac:	fcce1c58 	.word	0xfcce1c58
 80066b0:	3f800e6a 	.word	0x3f800e6a
 80066b4:	00000000 	.word	0x00000000

080066b8 <can1_ams_cell_voltages_v3s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s5_encode(double value)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80066c2:	f04f 0200 	mov.w	r2, #0
 80066c6:	4b10      	ldr	r3, [pc, #64]	; (8006708 <can1_ams_cell_voltages_v3s5_encode+0x50>)
 80066c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066cc:	f7f9 fdce 	bl	800026c <__aeabi_dsub>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	4610      	mov	r0, r2
 80066d6:	4619      	mov	r1, r3
 80066d8:	a309      	add	r3, pc, #36	; (adr r3, 8006700 <can1_ams_cell_voltages_v3s5_encode+0x48>)
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	f7fa f8a7 	bl	8000830 <__aeabi_ddiv>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4610      	mov	r0, r2
 80066e8:	4619      	mov	r1, r3
 80066ea:	f7fa fa4f 	bl	8000b8c <__aeabi_d2uiz>
 80066ee:	4603      	mov	r3, r0
 80066f0:	b2db      	uxtb	r3, r3
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	f3af 8000 	nop.w
 8006700:	fcce1c58 	.word	0xfcce1c58
 8006704:	3f800e6a 	.word	0x3f800e6a
 8006708:	40040000 	.word	0x40040000
 800670c:	00000000 	.word	0x00000000

08006710 <can1_ams_cell_voltages_v3s5_decode>:

double can1_ams_cell_voltages_v3s5_decode(uint8_t value)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	4618      	mov	r0, r3
 800671e:	f7f9 fee3 	bl	80004e8 <__aeabi_ui2d>
 8006722:	a30e      	add	r3, pc, #56	; (adr r3, 800675c <can1_ams_cell_voltages_v3s5_decode+0x4c>)
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	f7f9 ff58 	bl	80005dc <__aeabi_dmul>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4610      	mov	r0, r2
 8006732:	4619      	mov	r1, r3
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	4b07      	ldr	r3, [pc, #28]	; (8006758 <can1_ams_cell_voltages_v3s5_decode+0x48>)
 800673a:	f7f9 fd99 	bl	8000270 <__adddf3>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	ec43 2b17 	vmov	d7, r2, r3
}
 8006746:	eeb0 0a47 	vmov.f32	s0, s14
 800674a:	eef0 0a67 	vmov.f32	s1, s15
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	f3af 8000 	nop.w
 8006758:	40040000 	.word	0x40040000
 800675c:	fcce1c58 	.word	0xfcce1c58
 8006760:	3f800e6a 	.word	0x3f800e6a
 8006764:	00000000 	.word	0x00000000

08006768 <can1_ams_cell_voltages_v9s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s5_encode(double value)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006772:	f04f 0200 	mov.w	r2, #0
 8006776:	4b10      	ldr	r3, [pc, #64]	; (80067b8 <can1_ams_cell_voltages_v9s5_encode+0x50>)
 8006778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800677c:	f7f9 fd76 	bl	800026c <__aeabi_dsub>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4610      	mov	r0, r2
 8006786:	4619      	mov	r1, r3
 8006788:	a309      	add	r3, pc, #36	; (adr r3, 80067b0 <can1_ams_cell_voltages_v9s5_encode+0x48>)
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	f7fa f84f 	bl	8000830 <__aeabi_ddiv>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4610      	mov	r0, r2
 8006798:	4619      	mov	r1, r3
 800679a:	f7fa f9f7 	bl	8000b8c <__aeabi_d2uiz>
 800679e:	4603      	mov	r3, r0
 80067a0:	b2db      	uxtb	r3, r3
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	f3af 8000 	nop.w
 80067b0:	fcce1c58 	.word	0xfcce1c58
 80067b4:	3f800e6a 	.word	0x3f800e6a
 80067b8:	40040000 	.word	0x40040000
 80067bc:	00000000 	.word	0x00000000

080067c0 <can1_ams_cell_voltages_v9s5_decode>:

double can1_ams_cell_voltages_v9s5_decode(uint8_t value)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	4603      	mov	r3, r0
 80067c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7f9 fe8b 	bl	80004e8 <__aeabi_ui2d>
 80067d2:	a30e      	add	r3, pc, #56	; (adr r3, 800680c <can1_ams_cell_voltages_v9s5_decode+0x4c>)
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f7f9 ff00 	bl	80005dc <__aeabi_dmul>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4610      	mov	r0, r2
 80067e2:	4619      	mov	r1, r3
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	4b07      	ldr	r3, [pc, #28]	; (8006808 <can1_ams_cell_voltages_v9s5_decode+0x48>)
 80067ea:	f7f9 fd41 	bl	8000270 <__adddf3>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80067f6:	eeb0 0a47 	vmov.f32	s0, s14
 80067fa:	eef0 0a67 	vmov.f32	s1, s15
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	f3af 8000 	nop.w
 8006808:	40040000 	.word	0x40040000
 800680c:	fcce1c58 	.word	0xfcce1c58
 8006810:	3f800e6a 	.word	0x3f800e6a
 8006814:	00000000 	.word	0x00000000

08006818 <can1_ams_cell_voltages_v3s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s6_encode(double value)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	4b10      	ldr	r3, [pc, #64]	; (8006868 <can1_ams_cell_voltages_v3s6_encode+0x50>)
 8006828:	e9d7 0100 	ldrd	r0, r1, [r7]
 800682c:	f7f9 fd1e 	bl	800026c <__aeabi_dsub>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	4610      	mov	r0, r2
 8006836:	4619      	mov	r1, r3
 8006838:	a309      	add	r3, pc, #36	; (adr r3, 8006860 <can1_ams_cell_voltages_v3s6_encode+0x48>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f7f9 fff7 	bl	8000830 <__aeabi_ddiv>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4610      	mov	r0, r2
 8006848:	4619      	mov	r1, r3
 800684a:	f7fa f99f 	bl	8000b8c <__aeabi_d2uiz>
 800684e:	4603      	mov	r3, r0
 8006850:	b2db      	uxtb	r3, r3
}
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	f3af 8000 	nop.w
 8006860:	fcce1c58 	.word	0xfcce1c58
 8006864:	3f800e6a 	.word	0x3f800e6a
 8006868:	40040000 	.word	0x40040000
 800686c:	00000000 	.word	0x00000000

08006870 <can1_ams_cell_voltages_v3s6_decode>:

double can1_ams_cell_voltages_v3s6_decode(uint8_t value)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	4618      	mov	r0, r3
 800687e:	f7f9 fe33 	bl	80004e8 <__aeabi_ui2d>
 8006882:	a30e      	add	r3, pc, #56	; (adr r3, 80068bc <can1_ams_cell_voltages_v3s6_decode+0x4c>)
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	f7f9 fea8 	bl	80005dc <__aeabi_dmul>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	4610      	mov	r0, r2
 8006892:	4619      	mov	r1, r3
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	4b07      	ldr	r3, [pc, #28]	; (80068b8 <can1_ams_cell_voltages_v3s6_decode+0x48>)
 800689a:	f7f9 fce9 	bl	8000270 <__adddf3>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80068a6:	eeb0 0a47 	vmov.f32	s0, s14
 80068aa:	eef0 0a67 	vmov.f32	s1, s15
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	f3af 8000 	nop.w
 80068b8:	40040000 	.word	0x40040000
 80068bc:	fcce1c58 	.word	0xfcce1c58
 80068c0:	3f800e6a 	.word	0x3f800e6a
 80068c4:	00000000 	.word	0x00000000

080068c8 <can1_ams_cell_voltages_v9s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s6_encode(double value)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	4b10      	ldr	r3, [pc, #64]	; (8006918 <can1_ams_cell_voltages_v9s6_encode+0x50>)
 80068d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068dc:	f7f9 fcc6 	bl	800026c <__aeabi_dsub>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4610      	mov	r0, r2
 80068e6:	4619      	mov	r1, r3
 80068e8:	a309      	add	r3, pc, #36	; (adr r3, 8006910 <can1_ams_cell_voltages_v9s6_encode+0x48>)
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f7f9 ff9f 	bl	8000830 <__aeabi_ddiv>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4610      	mov	r0, r2
 80068f8:	4619      	mov	r1, r3
 80068fa:	f7fa f947 	bl	8000b8c <__aeabi_d2uiz>
 80068fe:	4603      	mov	r3, r0
 8006900:	b2db      	uxtb	r3, r3
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	f3af 8000 	nop.w
 8006910:	fcce1c58 	.word	0xfcce1c58
 8006914:	3f800e6a 	.word	0x3f800e6a
 8006918:	40040000 	.word	0x40040000
 800691c:	00000000 	.word	0x00000000

08006920 <can1_ams_cell_voltages_v9s6_decode>:

double can1_ams_cell_voltages_v9s6_decode(uint8_t value)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	4603      	mov	r3, r0
 8006928:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	4618      	mov	r0, r3
 800692e:	f7f9 fddb 	bl	80004e8 <__aeabi_ui2d>
 8006932:	a30e      	add	r3, pc, #56	; (adr r3, 800696c <can1_ams_cell_voltages_v9s6_decode+0x4c>)
 8006934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006938:	f7f9 fe50 	bl	80005dc <__aeabi_dmul>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4610      	mov	r0, r2
 8006942:	4619      	mov	r1, r3
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	4b07      	ldr	r3, [pc, #28]	; (8006968 <can1_ams_cell_voltages_v9s6_decode+0x48>)
 800694a:	f7f9 fc91 	bl	8000270 <__adddf3>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	ec43 2b17 	vmov	d7, r2, r3
}
 8006956:	eeb0 0a47 	vmov.f32	s0, s14
 800695a:	eef0 0a67 	vmov.f32	s1, s15
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	f3af 8000 	nop.w
 8006968:	40040000 	.word	0x40040000
 800696c:	fcce1c58 	.word	0xfcce1c58
 8006970:	3f800e6a 	.word	0x3f800e6a
 8006974:	00000000 	.word	0x00000000

08006978 <can1_ams_cell_voltages_v3s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s7_encode(double value)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	4b10      	ldr	r3, [pc, #64]	; (80069c8 <can1_ams_cell_voltages_v3s7_encode+0x50>)
 8006988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800698c:	f7f9 fc6e 	bl	800026c <__aeabi_dsub>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4610      	mov	r0, r2
 8006996:	4619      	mov	r1, r3
 8006998:	a309      	add	r3, pc, #36	; (adr r3, 80069c0 <can1_ams_cell_voltages_v3s7_encode+0x48>)
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	f7f9 ff47 	bl	8000830 <__aeabi_ddiv>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	4610      	mov	r0, r2
 80069a8:	4619      	mov	r1, r3
 80069aa:	f7fa f8ef 	bl	8000b8c <__aeabi_d2uiz>
 80069ae:	4603      	mov	r3, r0
 80069b0:	b2db      	uxtb	r3, r3
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	f3af 8000 	nop.w
 80069c0:	fcce1c58 	.word	0xfcce1c58
 80069c4:	3f800e6a 	.word	0x3f800e6a
 80069c8:	40040000 	.word	0x40040000
 80069cc:	00000000 	.word	0x00000000

080069d0 <can1_ams_cell_voltages_v3s7_decode>:

double can1_ams_cell_voltages_v3s7_decode(uint8_t value)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	4618      	mov	r0, r3
 80069de:	f7f9 fd83 	bl	80004e8 <__aeabi_ui2d>
 80069e2:	a30e      	add	r3, pc, #56	; (adr r3, 8006a1c <can1_ams_cell_voltages_v3s7_decode+0x4c>)
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	f7f9 fdf8 	bl	80005dc <__aeabi_dmul>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4610      	mov	r0, r2
 80069f2:	4619      	mov	r1, r3
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <can1_ams_cell_voltages_v3s7_decode+0x48>)
 80069fa:	f7f9 fc39 	bl	8000270 <__adddf3>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	ec43 2b17 	vmov	d7, r2, r3
}
 8006a06:	eeb0 0a47 	vmov.f32	s0, s14
 8006a0a:	eef0 0a67 	vmov.f32	s1, s15
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	f3af 8000 	nop.w
 8006a18:	40040000 	.word	0x40040000
 8006a1c:	fcce1c58 	.word	0xfcce1c58
 8006a20:	3f800e6a 	.word	0x3f800e6a
 8006a24:	00000000 	.word	0x00000000

08006a28 <can1_ams_cell_voltages_v9s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s7_encode(double value)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006a32:	f04f 0200 	mov.w	r2, #0
 8006a36:	4b10      	ldr	r3, [pc, #64]	; (8006a78 <can1_ams_cell_voltages_v9s7_encode+0x50>)
 8006a38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a3c:	f7f9 fc16 	bl	800026c <__aeabi_dsub>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	4610      	mov	r0, r2
 8006a46:	4619      	mov	r1, r3
 8006a48:	a309      	add	r3, pc, #36	; (adr r3, 8006a70 <can1_ams_cell_voltages_v9s7_encode+0x48>)
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	f7f9 feef 	bl	8000830 <__aeabi_ddiv>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4610      	mov	r0, r2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	f7fa f897 	bl	8000b8c <__aeabi_d2uiz>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	b2db      	uxtb	r3, r3
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	f3af 8000 	nop.w
 8006a70:	fcce1c58 	.word	0xfcce1c58
 8006a74:	3f800e6a 	.word	0x3f800e6a
 8006a78:	40040000 	.word	0x40040000
 8006a7c:	00000000 	.word	0x00000000

08006a80 <can1_ams_cell_voltages_v9s7_decode>:

double can1_ams_cell_voltages_v9s7_decode(uint8_t value)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	4603      	mov	r3, r0
 8006a88:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7f9 fd2b 	bl	80004e8 <__aeabi_ui2d>
 8006a92:	a30e      	add	r3, pc, #56	; (adr r3, 8006acc <can1_ams_cell_voltages_v9s7_decode+0x4c>)
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	f7f9 fda0 	bl	80005dc <__aeabi_dmul>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <can1_ams_cell_voltages_v9s7_decode+0x48>)
 8006aaa:	f7f9 fbe1 	bl	8000270 <__adddf3>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	ec43 2b17 	vmov	d7, r2, r3
}
 8006ab6:	eeb0 0a47 	vmov.f32	s0, s14
 8006aba:	eef0 0a67 	vmov.f32	s1, s15
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	f3af 8000 	nop.w
 8006ac8:	40040000 	.word	0x40040000
 8006acc:	fcce1c58 	.word	0xfcce1c58
 8006ad0:	3f800e6a 	.word	0x3f800e6a
 8006ad4:	00000000 	.word	0x00000000

08006ad8 <can1_ams_cell_voltages_v3s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s8_encode(double value)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	4b10      	ldr	r3, [pc, #64]	; (8006b28 <can1_ams_cell_voltages_v3s8_encode+0x50>)
 8006ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aec:	f7f9 fbbe 	bl	800026c <__aeabi_dsub>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4610      	mov	r0, r2
 8006af6:	4619      	mov	r1, r3
 8006af8:	a309      	add	r3, pc, #36	; (adr r3, 8006b20 <can1_ams_cell_voltages_v3s8_encode+0x48>)
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	f7f9 fe97 	bl	8000830 <__aeabi_ddiv>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	4610      	mov	r0, r2
 8006b08:	4619      	mov	r1, r3
 8006b0a:	f7fa f83f 	bl	8000b8c <__aeabi_d2uiz>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	b2db      	uxtb	r3, r3
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	f3af 8000 	nop.w
 8006b20:	fcce1c58 	.word	0xfcce1c58
 8006b24:	3f800e6a 	.word	0x3f800e6a
 8006b28:	40040000 	.word	0x40040000
 8006b2c:	00000000 	.word	0x00000000

08006b30 <can1_ams_cell_voltages_v3s8_decode>:

double can1_ams_cell_voltages_v3s8_decode(uint8_t value)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7f9 fcd3 	bl	80004e8 <__aeabi_ui2d>
 8006b42:	a30e      	add	r3, pc, #56	; (adr r3, 8006b7c <can1_ams_cell_voltages_v3s8_decode+0x4c>)
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	f7f9 fd48 	bl	80005dc <__aeabi_dmul>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4610      	mov	r0, r2
 8006b52:	4619      	mov	r1, r3
 8006b54:	f04f 0200 	mov.w	r2, #0
 8006b58:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <can1_ams_cell_voltages_v3s8_decode+0x48>)
 8006b5a:	f7f9 fb89 	bl	8000270 <__adddf3>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	ec43 2b17 	vmov	d7, r2, r3
}
 8006b66:	eeb0 0a47 	vmov.f32	s0, s14
 8006b6a:	eef0 0a67 	vmov.f32	s1, s15
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	f3af 8000 	nop.w
 8006b78:	40040000 	.word	0x40040000
 8006b7c:	fcce1c58 	.word	0xfcce1c58
 8006b80:	3f800e6a 	.word	0x3f800e6a
 8006b84:	00000000 	.word	0x00000000

08006b88 <can1_ams_cell_voltages_v9s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s8_encode(double value)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	4b10      	ldr	r3, [pc, #64]	; (8006bd8 <can1_ams_cell_voltages_v9s8_encode+0x50>)
 8006b98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b9c:	f7f9 fb66 	bl	800026c <__aeabi_dsub>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	a309      	add	r3, pc, #36	; (adr r3, 8006bd0 <can1_ams_cell_voltages_v9s8_encode+0x48>)
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f7f9 fe3f 	bl	8000830 <__aeabi_ddiv>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	4619      	mov	r1, r3
 8006bba:	f7f9 ffe7 	bl	8000b8c <__aeabi_d2uiz>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	b2db      	uxtb	r3, r3
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	f3af 8000 	nop.w
 8006bd0:	fcce1c58 	.word	0xfcce1c58
 8006bd4:	3f800e6a 	.word	0x3f800e6a
 8006bd8:	40040000 	.word	0x40040000
 8006bdc:	00000000 	.word	0x00000000

08006be0 <can1_ams_cell_voltages_v9s8_decode>:

double can1_ams_cell_voltages_v9s8_decode(uint8_t value)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7f9 fc7b 	bl	80004e8 <__aeabi_ui2d>
 8006bf2:	a30e      	add	r3, pc, #56	; (adr r3, 8006c2c <can1_ams_cell_voltages_v9s8_decode+0x4c>)
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	f7f9 fcf0 	bl	80005dc <__aeabi_dmul>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4610      	mov	r0, r2
 8006c02:	4619      	mov	r1, r3
 8006c04:	f04f 0200 	mov.w	r2, #0
 8006c08:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <can1_ams_cell_voltages_v9s8_decode+0x48>)
 8006c0a:	f7f9 fb31 	bl	8000270 <__adddf3>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	ec43 2b17 	vmov	d7, r2, r3
}
 8006c16:	eeb0 0a47 	vmov.f32	s0, s14
 8006c1a:	eef0 0a67 	vmov.f32	s1, s15
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	f3af 8000 	nop.w
 8006c28:	40040000 	.word	0x40040000
 8006c2c:	fcce1c58 	.word	0xfcce1c58
 8006c30:	3f800e6a 	.word	0x3f800e6a
 8006c34:	00000000 	.word	0x00000000

08006c38 <can1_ams_cell_voltages_v3s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s9_encode(double value)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006c42:	f04f 0200 	mov.w	r2, #0
 8006c46:	4b10      	ldr	r3, [pc, #64]	; (8006c88 <can1_ams_cell_voltages_v3s9_encode+0x50>)
 8006c48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c4c:	f7f9 fb0e 	bl	800026c <__aeabi_dsub>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4610      	mov	r0, r2
 8006c56:	4619      	mov	r1, r3
 8006c58:	a309      	add	r3, pc, #36	; (adr r3, 8006c80 <can1_ams_cell_voltages_v3s9_encode+0x48>)
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f7f9 fde7 	bl	8000830 <__aeabi_ddiv>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4610      	mov	r0, r2
 8006c68:	4619      	mov	r1, r3
 8006c6a:	f7f9 ff8f 	bl	8000b8c <__aeabi_d2uiz>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	b2db      	uxtb	r3, r3
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	f3af 8000 	nop.w
 8006c80:	fcce1c58 	.word	0xfcce1c58
 8006c84:	3f800e6a 	.word	0x3f800e6a
 8006c88:	40040000 	.word	0x40040000
 8006c8c:	00000000 	.word	0x00000000

08006c90 <can1_ams_cell_voltages_v3s9_decode>:

double can1_ams_cell_voltages_v3s9_decode(uint8_t value)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	4603      	mov	r3, r0
 8006c98:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7f9 fc23 	bl	80004e8 <__aeabi_ui2d>
 8006ca2:	a30e      	add	r3, pc, #56	; (adr r3, 8006cdc <can1_ams_cell_voltages_v3s9_decode+0x4c>)
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	f7f9 fc98 	bl	80005dc <__aeabi_dmul>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	4b07      	ldr	r3, [pc, #28]	; (8006cd8 <can1_ams_cell_voltages_v3s9_decode+0x48>)
 8006cba:	f7f9 fad9 	bl	8000270 <__adddf3>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	ec43 2b17 	vmov	d7, r2, r3
}
 8006cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8006cca:	eef0 0a67 	vmov.f32	s1, s15
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	f3af 8000 	nop.w
 8006cd8:	40040000 	.word	0x40040000
 8006cdc:	fcce1c58 	.word	0xfcce1c58
 8006ce0:	3f800e6a 	.word	0x3f800e6a
 8006ce4:	00000000 	.word	0x00000000

08006ce8 <can1_ams_cell_voltages_v9s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s9_encode(double value)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	4b10      	ldr	r3, [pc, #64]	; (8006d38 <can1_ams_cell_voltages_v9s9_encode+0x50>)
 8006cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cfc:	f7f9 fab6 	bl	800026c <__aeabi_dsub>
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	4610      	mov	r0, r2
 8006d06:	4619      	mov	r1, r3
 8006d08:	a309      	add	r3, pc, #36	; (adr r3, 8006d30 <can1_ams_cell_voltages_v9s9_encode+0x48>)
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f7f9 fd8f 	bl	8000830 <__aeabi_ddiv>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4610      	mov	r0, r2
 8006d18:	4619      	mov	r1, r3
 8006d1a:	f7f9 ff37 	bl	8000b8c <__aeabi_d2uiz>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	b2db      	uxtb	r3, r3
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	f3af 8000 	nop.w
 8006d30:	fcce1c58 	.word	0xfcce1c58
 8006d34:	3f800e6a 	.word	0x3f800e6a
 8006d38:	40040000 	.word	0x40040000
 8006d3c:	00000000 	.word	0x00000000

08006d40 <can1_ams_cell_voltages_v9s9_decode>:

double can1_ams_cell_voltages_v9s9_decode(uint8_t value)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006d4a:	79fb      	ldrb	r3, [r7, #7]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7f9 fbcb 	bl	80004e8 <__aeabi_ui2d>
 8006d52:	a30e      	add	r3, pc, #56	; (adr r3, 8006d8c <can1_ams_cell_voltages_v9s9_decode+0x4c>)
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	f7f9 fc40 	bl	80005dc <__aeabi_dmul>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4610      	mov	r0, r2
 8006d62:	4619      	mov	r1, r3
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <can1_ams_cell_voltages_v9s9_decode+0x48>)
 8006d6a:	f7f9 fa81 	bl	8000270 <__adddf3>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	ec43 2b17 	vmov	d7, r2, r3
}
 8006d76:	eeb0 0a47 	vmov.f32	s0, s14
 8006d7a:	eef0 0a67 	vmov.f32	s1, s15
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	f3af 8000 	nop.w
 8006d88:	40040000 	.word	0x40040000
 8006d8c:	fcce1c58 	.word	0xfcce1c58
 8006d90:	3f800e6a 	.word	0x3f800e6a
 8006d94:	00000000 	.word	0x00000000

08006d98 <can1_ams_cell_voltages_v3s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s10_encode(double value)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006da2:	f04f 0200 	mov.w	r2, #0
 8006da6:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <can1_ams_cell_voltages_v3s10_encode+0x50>)
 8006da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dac:	f7f9 fa5e 	bl	800026c <__aeabi_dsub>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	4610      	mov	r0, r2
 8006db6:	4619      	mov	r1, r3
 8006db8:	a309      	add	r3, pc, #36	; (adr r3, 8006de0 <can1_ams_cell_voltages_v3s10_encode+0x48>)
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	f7f9 fd37 	bl	8000830 <__aeabi_ddiv>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	4619      	mov	r1, r3
 8006dca:	f7f9 fedf 	bl	8000b8c <__aeabi_d2uiz>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	b2db      	uxtb	r3, r3
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	f3af 8000 	nop.w
 8006de0:	fcce1c58 	.word	0xfcce1c58
 8006de4:	3f800e6a 	.word	0x3f800e6a
 8006de8:	40040000 	.word	0x40040000
 8006dec:	00000000 	.word	0x00000000

08006df0 <can1_ams_cell_voltages_v3s10_decode>:

double can1_ams_cell_voltages_v3s10_decode(uint8_t value)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	4603      	mov	r3, r0
 8006df8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006dfa:	79fb      	ldrb	r3, [r7, #7]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7f9 fb73 	bl	80004e8 <__aeabi_ui2d>
 8006e02:	a30e      	add	r3, pc, #56	; (adr r3, 8006e3c <can1_ams_cell_voltages_v3s10_decode+0x4c>)
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	f7f9 fbe8 	bl	80005dc <__aeabi_dmul>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4610      	mov	r0, r2
 8006e12:	4619      	mov	r1, r3
 8006e14:	f04f 0200 	mov.w	r2, #0
 8006e18:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <can1_ams_cell_voltages_v3s10_decode+0x48>)
 8006e1a:	f7f9 fa29 	bl	8000270 <__adddf3>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	ec43 2b17 	vmov	d7, r2, r3
}
 8006e26:	eeb0 0a47 	vmov.f32	s0, s14
 8006e2a:	eef0 0a67 	vmov.f32	s1, s15
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	f3af 8000 	nop.w
 8006e38:	40040000 	.word	0x40040000
 8006e3c:	fcce1c58 	.word	0xfcce1c58
 8006e40:	3f800e6a 	.word	0x3f800e6a
 8006e44:	00000000 	.word	0x00000000

08006e48 <can1_ams_cell_voltages_v9s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s10_encode(double value)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006e52:	f04f 0200 	mov.w	r2, #0
 8006e56:	4b10      	ldr	r3, [pc, #64]	; (8006e98 <can1_ams_cell_voltages_v9s10_encode+0x50>)
 8006e58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e5c:	f7f9 fa06 	bl	800026c <__aeabi_dsub>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4610      	mov	r0, r2
 8006e66:	4619      	mov	r1, r3
 8006e68:	a309      	add	r3, pc, #36	; (adr r3, 8006e90 <can1_ams_cell_voltages_v9s10_encode+0x48>)
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	f7f9 fcdf 	bl	8000830 <__aeabi_ddiv>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4610      	mov	r0, r2
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f7f9 fe87 	bl	8000b8c <__aeabi_d2uiz>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	b2db      	uxtb	r3, r3
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	f3af 8000 	nop.w
 8006e90:	fcce1c58 	.word	0xfcce1c58
 8006e94:	3f800e6a 	.word	0x3f800e6a
 8006e98:	40040000 	.word	0x40040000
 8006e9c:	00000000 	.word	0x00000000

08006ea0 <can1_ams_cell_voltages_v9s10_decode>:

double can1_ams_cell_voltages_v9s10_decode(uint8_t value)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006eaa:	79fb      	ldrb	r3, [r7, #7]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7f9 fb1b 	bl	80004e8 <__aeabi_ui2d>
 8006eb2:	a30e      	add	r3, pc, #56	; (adr r3, 8006eec <can1_ams_cell_voltages_v9s10_decode+0x4c>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	f7f9 fb90 	bl	80005dc <__aeabi_dmul>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	f04f 0200 	mov.w	r2, #0
 8006ec8:	4b07      	ldr	r3, [pc, #28]	; (8006ee8 <can1_ams_cell_voltages_v9s10_decode+0x48>)
 8006eca:	f7f9 f9d1 	bl	8000270 <__adddf3>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	ec43 2b17 	vmov	d7, r2, r3
}
 8006ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8006eda:	eef0 0a67 	vmov.f32	s1, s15
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	f3af 8000 	nop.w
 8006ee8:	40040000 	.word	0x40040000
 8006eec:	fcce1c58 	.word	0xfcce1c58
 8006ef0:	3f800e6a 	.word	0x3f800e6a
 8006ef4:	00000000 	.word	0x00000000

08006ef8 <can1_ams_cell_voltages_v3s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s11_encode(double value)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006f02:	f04f 0200 	mov.w	r2, #0
 8006f06:	4b10      	ldr	r3, [pc, #64]	; (8006f48 <can1_ams_cell_voltages_v3s11_encode+0x50>)
 8006f08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f0c:	f7f9 f9ae 	bl	800026c <__aeabi_dsub>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4610      	mov	r0, r2
 8006f16:	4619      	mov	r1, r3
 8006f18:	a309      	add	r3, pc, #36	; (adr r3, 8006f40 <can1_ams_cell_voltages_v3s11_encode+0x48>)
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	f7f9 fc87 	bl	8000830 <__aeabi_ddiv>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4610      	mov	r0, r2
 8006f28:	4619      	mov	r1, r3
 8006f2a:	f7f9 fe2f 	bl	8000b8c <__aeabi_d2uiz>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	b2db      	uxtb	r3, r3
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	f3af 8000 	nop.w
 8006f40:	fcce1c58 	.word	0xfcce1c58
 8006f44:	3f800e6a 	.word	0x3f800e6a
 8006f48:	40040000 	.word	0x40040000
 8006f4c:	00000000 	.word	0x00000000

08006f50 <can1_ams_cell_voltages_v3s11_decode>:

double can1_ams_cell_voltages_v3s11_decode(uint8_t value)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	4603      	mov	r3, r0
 8006f58:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006f5a:	79fb      	ldrb	r3, [r7, #7]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7f9 fac3 	bl	80004e8 <__aeabi_ui2d>
 8006f62:	a30e      	add	r3, pc, #56	; (adr r3, 8006f9c <can1_ams_cell_voltages_v3s11_decode+0x4c>)
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f7f9 fb38 	bl	80005dc <__aeabi_dmul>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4610      	mov	r0, r2
 8006f72:	4619      	mov	r1, r3
 8006f74:	f04f 0200 	mov.w	r2, #0
 8006f78:	4b07      	ldr	r3, [pc, #28]	; (8006f98 <can1_ams_cell_voltages_v3s11_decode+0x48>)
 8006f7a:	f7f9 f979 	bl	8000270 <__adddf3>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	ec43 2b17 	vmov	d7, r2, r3
}
 8006f86:	eeb0 0a47 	vmov.f32	s0, s14
 8006f8a:	eef0 0a67 	vmov.f32	s1, s15
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	f3af 8000 	nop.w
 8006f98:	40040000 	.word	0x40040000
 8006f9c:	fcce1c58 	.word	0xfcce1c58
 8006fa0:	3f800e6a 	.word	0x3f800e6a
 8006fa4:	00000000 	.word	0x00000000

08006fa8 <can1_ams_cell_voltages_v9s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s11_encode(double value)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006fb2:	f04f 0200 	mov.w	r2, #0
 8006fb6:	4b10      	ldr	r3, [pc, #64]	; (8006ff8 <can1_ams_cell_voltages_v9s11_encode+0x50>)
 8006fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fbc:	f7f9 f956 	bl	800026c <__aeabi_dsub>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	a309      	add	r3, pc, #36	; (adr r3, 8006ff0 <can1_ams_cell_voltages_v9s11_encode+0x48>)
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f7f9 fc2f 	bl	8000830 <__aeabi_ddiv>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4610      	mov	r0, r2
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f7f9 fdd7 	bl	8000b8c <__aeabi_d2uiz>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	b2db      	uxtb	r3, r3
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	f3af 8000 	nop.w
 8006ff0:	fcce1c58 	.word	0xfcce1c58
 8006ff4:	3f800e6a 	.word	0x3f800e6a
 8006ff8:	40040000 	.word	0x40040000
 8006ffc:	00000000 	.word	0x00000000

08007000 <can1_ams_cell_voltages_v9s11_decode>:

double can1_ams_cell_voltages_v9s11_decode(uint8_t value)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	4618      	mov	r0, r3
 800700e:	f7f9 fa6b 	bl	80004e8 <__aeabi_ui2d>
 8007012:	a30e      	add	r3, pc, #56	; (adr r3, 800704c <can1_ams_cell_voltages_v9s11_decode+0x4c>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	f7f9 fae0 	bl	80005dc <__aeabi_dmul>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4610      	mov	r0, r2
 8007022:	4619      	mov	r1, r3
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	4b07      	ldr	r3, [pc, #28]	; (8007048 <can1_ams_cell_voltages_v9s11_decode+0x48>)
 800702a:	f7f9 f921 	bl	8000270 <__adddf3>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	ec43 2b17 	vmov	d7, r2, r3
}
 8007036:	eeb0 0a47 	vmov.f32	s0, s14
 800703a:	eef0 0a67 	vmov.f32	s1, s15
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	f3af 8000 	nop.w
 8007048:	40040000 	.word	0x40040000
 800704c:	fcce1c58 	.word	0xfcce1c58
 8007050:	3f800e6a 	.word	0x3f800e6a
 8007054:	00000000 	.word	0x00000000

08007058 <can1_ams_cell_voltages_v3s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s12_encode(double value)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007062:	f04f 0200 	mov.w	r2, #0
 8007066:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <can1_ams_cell_voltages_v3s12_encode+0x50>)
 8007068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800706c:	f7f9 f8fe 	bl	800026c <__aeabi_dsub>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4610      	mov	r0, r2
 8007076:	4619      	mov	r1, r3
 8007078:	a309      	add	r3, pc, #36	; (adr r3, 80070a0 <can1_ams_cell_voltages_v3s12_encode+0x48>)
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f7f9 fbd7 	bl	8000830 <__aeabi_ddiv>
 8007082:	4602      	mov	r2, r0
 8007084:	460b      	mov	r3, r1
 8007086:	4610      	mov	r0, r2
 8007088:	4619      	mov	r1, r3
 800708a:	f7f9 fd7f 	bl	8000b8c <__aeabi_d2uiz>
 800708e:	4603      	mov	r3, r0
 8007090:	b2db      	uxtb	r3, r3
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	f3af 8000 	nop.w
 80070a0:	fcce1c58 	.word	0xfcce1c58
 80070a4:	3f800e6a 	.word	0x3f800e6a
 80070a8:	40040000 	.word	0x40040000
 80070ac:	00000000 	.word	0x00000000

080070b0 <can1_ams_cell_voltages_v3s12_decode>:

double can1_ams_cell_voltages_v3s12_decode(uint8_t value)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	4618      	mov	r0, r3
 80070be:	f7f9 fa13 	bl	80004e8 <__aeabi_ui2d>
 80070c2:	a30e      	add	r3, pc, #56	; (adr r3, 80070fc <can1_ams_cell_voltages_v3s12_decode+0x4c>)
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	f7f9 fa88 	bl	80005dc <__aeabi_dmul>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4610      	mov	r0, r2
 80070d2:	4619      	mov	r1, r3
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	4b07      	ldr	r3, [pc, #28]	; (80070f8 <can1_ams_cell_voltages_v3s12_decode+0x48>)
 80070da:	f7f9 f8c9 	bl	8000270 <__adddf3>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80070e6:	eeb0 0a47 	vmov.f32	s0, s14
 80070ea:	eef0 0a67 	vmov.f32	s1, s15
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	f3af 8000 	nop.w
 80070f8:	40040000 	.word	0x40040000
 80070fc:	fcce1c58 	.word	0xfcce1c58
 8007100:	3f800e6a 	.word	0x3f800e6a
 8007104:	00000000 	.word	0x00000000

08007108 <can1_ams_cell_voltages_v9s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s12_encode(double value)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	4b10      	ldr	r3, [pc, #64]	; (8007158 <can1_ams_cell_voltages_v9s12_encode+0x50>)
 8007118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800711c:	f7f9 f8a6 	bl	800026c <__aeabi_dsub>
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	4610      	mov	r0, r2
 8007126:	4619      	mov	r1, r3
 8007128:	a309      	add	r3, pc, #36	; (adr r3, 8007150 <can1_ams_cell_voltages_v9s12_encode+0x48>)
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f7f9 fb7f 	bl	8000830 <__aeabi_ddiv>
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	4610      	mov	r0, r2
 8007138:	4619      	mov	r1, r3
 800713a:	f7f9 fd27 	bl	8000b8c <__aeabi_d2uiz>
 800713e:	4603      	mov	r3, r0
 8007140:	b2db      	uxtb	r3, r3
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	f3af 8000 	nop.w
 8007150:	fcce1c58 	.word	0xfcce1c58
 8007154:	3f800e6a 	.word	0x3f800e6a
 8007158:	40040000 	.word	0x40040000
 800715c:	00000000 	.word	0x00000000

08007160 <can1_ams_cell_voltages_v9s12_decode>:

double can1_ams_cell_voltages_v9s12_decode(uint8_t value)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800716a:	79fb      	ldrb	r3, [r7, #7]
 800716c:	4618      	mov	r0, r3
 800716e:	f7f9 f9bb 	bl	80004e8 <__aeabi_ui2d>
 8007172:	a30e      	add	r3, pc, #56	; (adr r3, 80071ac <can1_ams_cell_voltages_v9s12_decode+0x4c>)
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	f7f9 fa30 	bl	80005dc <__aeabi_dmul>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4610      	mov	r0, r2
 8007182:	4619      	mov	r1, r3
 8007184:	f04f 0200 	mov.w	r2, #0
 8007188:	4b07      	ldr	r3, [pc, #28]	; (80071a8 <can1_ams_cell_voltages_v9s12_decode+0x48>)
 800718a:	f7f9 f871 	bl	8000270 <__adddf3>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	ec43 2b17 	vmov	d7, r2, r3
}
 8007196:	eeb0 0a47 	vmov.f32	s0, s14
 800719a:	eef0 0a67 	vmov.f32	s1, s15
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	f3af 8000 	nop.w
 80071a8:	40040000 	.word	0x40040000
 80071ac:	fcce1c58 	.word	0xfcce1c58
 80071b0:	3f800e6a 	.word	0x3f800e6a
 80071b4:	00000000 	.word	0x00000000

080071b8 <can1_ams_cell_voltages_v4s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s1_encode(double value)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80071c2:	f04f 0200 	mov.w	r2, #0
 80071c6:	4b10      	ldr	r3, [pc, #64]	; (8007208 <can1_ams_cell_voltages_v4s1_encode+0x50>)
 80071c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071cc:	f7f9 f84e 	bl	800026c <__aeabi_dsub>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4610      	mov	r0, r2
 80071d6:	4619      	mov	r1, r3
 80071d8:	a309      	add	r3, pc, #36	; (adr r3, 8007200 <can1_ams_cell_voltages_v4s1_encode+0x48>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f7f9 fb27 	bl	8000830 <__aeabi_ddiv>
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	4610      	mov	r0, r2
 80071e8:	4619      	mov	r1, r3
 80071ea:	f7f9 fccf 	bl	8000b8c <__aeabi_d2uiz>
 80071ee:	4603      	mov	r3, r0
 80071f0:	b2db      	uxtb	r3, r3
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	f3af 8000 	nop.w
 8007200:	fcce1c58 	.word	0xfcce1c58
 8007204:	3f800e6a 	.word	0x3f800e6a
 8007208:	40040000 	.word	0x40040000
 800720c:	00000000 	.word	0x00000000

08007210 <can1_ams_cell_voltages_v4s1_decode>:

double can1_ams_cell_voltages_v4s1_decode(uint8_t value)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	4603      	mov	r3, r0
 8007218:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800721a:	79fb      	ldrb	r3, [r7, #7]
 800721c:	4618      	mov	r0, r3
 800721e:	f7f9 f963 	bl	80004e8 <__aeabi_ui2d>
 8007222:	a30e      	add	r3, pc, #56	; (adr r3, 800725c <can1_ams_cell_voltages_v4s1_decode+0x4c>)
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f7f9 f9d8 	bl	80005dc <__aeabi_dmul>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4610      	mov	r0, r2
 8007232:	4619      	mov	r1, r3
 8007234:	f04f 0200 	mov.w	r2, #0
 8007238:	4b07      	ldr	r3, [pc, #28]	; (8007258 <can1_ams_cell_voltages_v4s1_decode+0x48>)
 800723a:	f7f9 f819 	bl	8000270 <__adddf3>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	ec43 2b17 	vmov	d7, r2, r3
}
 8007246:	eeb0 0a47 	vmov.f32	s0, s14
 800724a:	eef0 0a67 	vmov.f32	s1, s15
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	f3af 8000 	nop.w
 8007258:	40040000 	.word	0x40040000
 800725c:	fcce1c58 	.word	0xfcce1c58
 8007260:	3f800e6a 	.word	0x3f800e6a
 8007264:	00000000 	.word	0x00000000

08007268 <can1_ams_cell_voltages_v10s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s1_encode(double value)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007272:	f04f 0200 	mov.w	r2, #0
 8007276:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <can1_ams_cell_voltages_v10s1_encode+0x50>)
 8007278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800727c:	f7f8 fff6 	bl	800026c <__aeabi_dsub>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4610      	mov	r0, r2
 8007286:	4619      	mov	r1, r3
 8007288:	a309      	add	r3, pc, #36	; (adr r3, 80072b0 <can1_ams_cell_voltages_v10s1_encode+0x48>)
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f7f9 facf 	bl	8000830 <__aeabi_ddiv>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	4610      	mov	r0, r2
 8007298:	4619      	mov	r1, r3
 800729a:	f7f9 fc77 	bl	8000b8c <__aeabi_d2uiz>
 800729e:	4603      	mov	r3, r0
 80072a0:	b2db      	uxtb	r3, r3
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	f3af 8000 	nop.w
 80072b0:	fcce1c58 	.word	0xfcce1c58
 80072b4:	3f800e6a 	.word	0x3f800e6a
 80072b8:	40040000 	.word	0x40040000
 80072bc:	00000000 	.word	0x00000000

080072c0 <can1_ams_cell_voltages_v10s1_decode>:

double can1_ams_cell_voltages_v10s1_decode(uint8_t value)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7f9 f90b 	bl	80004e8 <__aeabi_ui2d>
 80072d2:	a30e      	add	r3, pc, #56	; (adr r3, 800730c <can1_ams_cell_voltages_v10s1_decode+0x4c>)
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	f7f9 f980 	bl	80005dc <__aeabi_dmul>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4610      	mov	r0, r2
 80072e2:	4619      	mov	r1, r3
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	4b07      	ldr	r3, [pc, #28]	; (8007308 <can1_ams_cell_voltages_v10s1_decode+0x48>)
 80072ea:	f7f8 ffc1 	bl	8000270 <__adddf3>
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80072f6:	eeb0 0a47 	vmov.f32	s0, s14
 80072fa:	eef0 0a67 	vmov.f32	s1, s15
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	f3af 8000 	nop.w
 8007308:	40040000 	.word	0x40040000
 800730c:	fcce1c58 	.word	0xfcce1c58
 8007310:	3f800e6a 	.word	0x3f800e6a
 8007314:	00000000 	.word	0x00000000

08007318 <can1_ams_cell_voltages_v4s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s2_encode(double value)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007322:	f04f 0200 	mov.w	r2, #0
 8007326:	4b10      	ldr	r3, [pc, #64]	; (8007368 <can1_ams_cell_voltages_v4s2_encode+0x50>)
 8007328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800732c:	f7f8 ff9e 	bl	800026c <__aeabi_dsub>
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	4610      	mov	r0, r2
 8007336:	4619      	mov	r1, r3
 8007338:	a309      	add	r3, pc, #36	; (adr r3, 8007360 <can1_ams_cell_voltages_v4s2_encode+0x48>)
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	f7f9 fa77 	bl	8000830 <__aeabi_ddiv>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	4610      	mov	r0, r2
 8007348:	4619      	mov	r1, r3
 800734a:	f7f9 fc1f 	bl	8000b8c <__aeabi_d2uiz>
 800734e:	4603      	mov	r3, r0
 8007350:	b2db      	uxtb	r3, r3
}
 8007352:	4618      	mov	r0, r3
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	f3af 8000 	nop.w
 8007360:	fcce1c58 	.word	0xfcce1c58
 8007364:	3f800e6a 	.word	0x3f800e6a
 8007368:	40040000 	.word	0x40040000
 800736c:	00000000 	.word	0x00000000

08007370 <can1_ams_cell_voltages_v4s2_decode>:

double can1_ams_cell_voltages_v4s2_decode(uint8_t value)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800737a:	79fb      	ldrb	r3, [r7, #7]
 800737c:	4618      	mov	r0, r3
 800737e:	f7f9 f8b3 	bl	80004e8 <__aeabi_ui2d>
 8007382:	a30e      	add	r3, pc, #56	; (adr r3, 80073bc <can1_ams_cell_voltages_v4s2_decode+0x4c>)
 8007384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007388:	f7f9 f928 	bl	80005dc <__aeabi_dmul>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4610      	mov	r0, r2
 8007392:	4619      	mov	r1, r3
 8007394:	f04f 0200 	mov.w	r2, #0
 8007398:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <can1_ams_cell_voltages_v4s2_decode+0x48>)
 800739a:	f7f8 ff69 	bl	8000270 <__adddf3>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80073a6:	eeb0 0a47 	vmov.f32	s0, s14
 80073aa:	eef0 0a67 	vmov.f32	s1, s15
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	f3af 8000 	nop.w
 80073b8:	40040000 	.word	0x40040000
 80073bc:	fcce1c58 	.word	0xfcce1c58
 80073c0:	3f800e6a 	.word	0x3f800e6a
 80073c4:	00000000 	.word	0x00000000

080073c8 <can1_ams_cell_voltages_v10s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s2_encode(double value)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80073d2:	f04f 0200 	mov.w	r2, #0
 80073d6:	4b10      	ldr	r3, [pc, #64]	; (8007418 <can1_ams_cell_voltages_v10s2_encode+0x50>)
 80073d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073dc:	f7f8 ff46 	bl	800026c <__aeabi_dsub>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4610      	mov	r0, r2
 80073e6:	4619      	mov	r1, r3
 80073e8:	a309      	add	r3, pc, #36	; (adr r3, 8007410 <can1_ams_cell_voltages_v10s2_encode+0x48>)
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	f7f9 fa1f 	bl	8000830 <__aeabi_ddiv>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4610      	mov	r0, r2
 80073f8:	4619      	mov	r1, r3
 80073fa:	f7f9 fbc7 	bl	8000b8c <__aeabi_d2uiz>
 80073fe:	4603      	mov	r3, r0
 8007400:	b2db      	uxtb	r3, r3
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	f3af 8000 	nop.w
 8007410:	fcce1c58 	.word	0xfcce1c58
 8007414:	3f800e6a 	.word	0x3f800e6a
 8007418:	40040000 	.word	0x40040000
 800741c:	00000000 	.word	0x00000000

08007420 <can1_ams_cell_voltages_v10s2_decode>:

double can1_ams_cell_voltages_v10s2_decode(uint8_t value)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800742a:	79fb      	ldrb	r3, [r7, #7]
 800742c:	4618      	mov	r0, r3
 800742e:	f7f9 f85b 	bl	80004e8 <__aeabi_ui2d>
 8007432:	a30e      	add	r3, pc, #56	; (adr r3, 800746c <can1_ams_cell_voltages_v10s2_decode+0x4c>)
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	f7f9 f8d0 	bl	80005dc <__aeabi_dmul>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4610      	mov	r0, r2
 8007442:	4619      	mov	r1, r3
 8007444:	f04f 0200 	mov.w	r2, #0
 8007448:	4b07      	ldr	r3, [pc, #28]	; (8007468 <can1_ams_cell_voltages_v10s2_decode+0x48>)
 800744a:	f7f8 ff11 	bl	8000270 <__adddf3>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	ec43 2b17 	vmov	d7, r2, r3
}
 8007456:	eeb0 0a47 	vmov.f32	s0, s14
 800745a:	eef0 0a67 	vmov.f32	s1, s15
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	f3af 8000 	nop.w
 8007468:	40040000 	.word	0x40040000
 800746c:	fcce1c58 	.word	0xfcce1c58
 8007470:	3f800e6a 	.word	0x3f800e6a
 8007474:	00000000 	.word	0x00000000

08007478 <can1_ams_cell_voltages_v4s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s3_encode(double value)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	4b10      	ldr	r3, [pc, #64]	; (80074c8 <can1_ams_cell_voltages_v4s3_encode+0x50>)
 8007488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800748c:	f7f8 feee 	bl	800026c <__aeabi_dsub>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4610      	mov	r0, r2
 8007496:	4619      	mov	r1, r3
 8007498:	a309      	add	r3, pc, #36	; (adr r3, 80074c0 <can1_ams_cell_voltages_v4s3_encode+0x48>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7f9 f9c7 	bl	8000830 <__aeabi_ddiv>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4610      	mov	r0, r2
 80074a8:	4619      	mov	r1, r3
 80074aa:	f7f9 fb6f 	bl	8000b8c <__aeabi_d2uiz>
 80074ae:	4603      	mov	r3, r0
 80074b0:	b2db      	uxtb	r3, r3
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	f3af 8000 	nop.w
 80074c0:	fcce1c58 	.word	0xfcce1c58
 80074c4:	3f800e6a 	.word	0x3f800e6a
 80074c8:	40040000 	.word	0x40040000
 80074cc:	00000000 	.word	0x00000000

080074d0 <can1_ams_cell_voltages_v4s3_decode>:

double can1_ams_cell_voltages_v4s3_decode(uint8_t value)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	4603      	mov	r3, r0
 80074d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	4618      	mov	r0, r3
 80074de:	f7f9 f803 	bl	80004e8 <__aeabi_ui2d>
 80074e2:	a30e      	add	r3, pc, #56	; (adr r3, 800751c <can1_ams_cell_voltages_v4s3_decode+0x4c>)
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	f7f9 f878 	bl	80005dc <__aeabi_dmul>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4610      	mov	r0, r2
 80074f2:	4619      	mov	r1, r3
 80074f4:	f04f 0200 	mov.w	r2, #0
 80074f8:	4b07      	ldr	r3, [pc, #28]	; (8007518 <can1_ams_cell_voltages_v4s3_decode+0x48>)
 80074fa:	f7f8 feb9 	bl	8000270 <__adddf3>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	ec43 2b17 	vmov	d7, r2, r3
}
 8007506:	eeb0 0a47 	vmov.f32	s0, s14
 800750a:	eef0 0a67 	vmov.f32	s1, s15
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	f3af 8000 	nop.w
 8007518:	40040000 	.word	0x40040000
 800751c:	fcce1c58 	.word	0xfcce1c58
 8007520:	3f800e6a 	.word	0x3f800e6a
 8007524:	00000000 	.word	0x00000000

08007528 <can1_ams_cell_voltages_v10s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s3_encode(double value)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007532:	f04f 0200 	mov.w	r2, #0
 8007536:	4b10      	ldr	r3, [pc, #64]	; (8007578 <can1_ams_cell_voltages_v10s3_encode+0x50>)
 8007538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800753c:	f7f8 fe96 	bl	800026c <__aeabi_dsub>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	4610      	mov	r0, r2
 8007546:	4619      	mov	r1, r3
 8007548:	a309      	add	r3, pc, #36	; (adr r3, 8007570 <can1_ams_cell_voltages_v10s3_encode+0x48>)
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f7f9 f96f 	bl	8000830 <__aeabi_ddiv>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4610      	mov	r0, r2
 8007558:	4619      	mov	r1, r3
 800755a:	f7f9 fb17 	bl	8000b8c <__aeabi_d2uiz>
 800755e:	4603      	mov	r3, r0
 8007560:	b2db      	uxtb	r3, r3
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	f3af 8000 	nop.w
 8007570:	fcce1c58 	.word	0xfcce1c58
 8007574:	3f800e6a 	.word	0x3f800e6a
 8007578:	40040000 	.word	0x40040000
 800757c:	00000000 	.word	0x00000000

08007580 <can1_ams_cell_voltages_v10s3_decode>:

double can1_ams_cell_voltages_v10s3_decode(uint8_t value)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	4603      	mov	r3, r0
 8007588:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	4618      	mov	r0, r3
 800758e:	f7f8 ffab 	bl	80004e8 <__aeabi_ui2d>
 8007592:	a30e      	add	r3, pc, #56	; (adr r3, 80075cc <can1_ams_cell_voltages_v10s3_decode+0x4c>)
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f7f9 f820 	bl	80005dc <__aeabi_dmul>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4610      	mov	r0, r2
 80075a2:	4619      	mov	r1, r3
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <can1_ams_cell_voltages_v10s3_decode+0x48>)
 80075aa:	f7f8 fe61 	bl	8000270 <__adddf3>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80075b6:	eeb0 0a47 	vmov.f32	s0, s14
 80075ba:	eef0 0a67 	vmov.f32	s1, s15
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	f3af 8000 	nop.w
 80075c8:	40040000 	.word	0x40040000
 80075cc:	fcce1c58 	.word	0xfcce1c58
 80075d0:	3f800e6a 	.word	0x3f800e6a
 80075d4:	00000000 	.word	0x00000000

080075d8 <can1_ams_cell_voltages_v4s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s4_encode(double value)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80075e2:	f04f 0200 	mov.w	r2, #0
 80075e6:	4b10      	ldr	r3, [pc, #64]	; (8007628 <can1_ams_cell_voltages_v4s4_encode+0x50>)
 80075e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075ec:	f7f8 fe3e 	bl	800026c <__aeabi_dsub>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4610      	mov	r0, r2
 80075f6:	4619      	mov	r1, r3
 80075f8:	a309      	add	r3, pc, #36	; (adr r3, 8007620 <can1_ams_cell_voltages_v4s4_encode+0x48>)
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	f7f9 f917 	bl	8000830 <__aeabi_ddiv>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	4610      	mov	r0, r2
 8007608:	4619      	mov	r1, r3
 800760a:	f7f9 fabf 	bl	8000b8c <__aeabi_d2uiz>
 800760e:	4603      	mov	r3, r0
 8007610:	b2db      	uxtb	r3, r3
}
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	f3af 8000 	nop.w
 8007620:	fcce1c58 	.word	0xfcce1c58
 8007624:	3f800e6a 	.word	0x3f800e6a
 8007628:	40040000 	.word	0x40040000
 800762c:	00000000 	.word	0x00000000

08007630 <can1_ams_cell_voltages_v4s4_decode>:

double can1_ams_cell_voltages_v4s4_decode(uint8_t value)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800763a:	79fb      	ldrb	r3, [r7, #7]
 800763c:	4618      	mov	r0, r3
 800763e:	f7f8 ff53 	bl	80004e8 <__aeabi_ui2d>
 8007642:	a30e      	add	r3, pc, #56	; (adr r3, 800767c <can1_ams_cell_voltages_v4s4_decode+0x4c>)
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	f7f8 ffc8 	bl	80005dc <__aeabi_dmul>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	4610      	mov	r0, r2
 8007652:	4619      	mov	r1, r3
 8007654:	f04f 0200 	mov.w	r2, #0
 8007658:	4b07      	ldr	r3, [pc, #28]	; (8007678 <can1_ams_cell_voltages_v4s4_decode+0x48>)
 800765a:	f7f8 fe09 	bl	8000270 <__adddf3>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	ec43 2b17 	vmov	d7, r2, r3
}
 8007666:	eeb0 0a47 	vmov.f32	s0, s14
 800766a:	eef0 0a67 	vmov.f32	s1, s15
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	f3af 8000 	nop.w
 8007678:	40040000 	.word	0x40040000
 800767c:	fcce1c58 	.word	0xfcce1c58
 8007680:	3f800e6a 	.word	0x3f800e6a
 8007684:	00000000 	.word	0x00000000

08007688 <can1_ams_cell_voltages_v10s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s4_encode(double value)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	4b10      	ldr	r3, [pc, #64]	; (80076d8 <can1_ams_cell_voltages_v10s4_encode+0x50>)
 8007698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800769c:	f7f8 fde6 	bl	800026c <__aeabi_dsub>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4610      	mov	r0, r2
 80076a6:	4619      	mov	r1, r3
 80076a8:	a309      	add	r3, pc, #36	; (adr r3, 80076d0 <can1_ams_cell_voltages_v10s4_encode+0x48>)
 80076aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ae:	f7f9 f8bf 	bl	8000830 <__aeabi_ddiv>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	4610      	mov	r0, r2
 80076b8:	4619      	mov	r1, r3
 80076ba:	f7f9 fa67 	bl	8000b8c <__aeabi_d2uiz>
 80076be:	4603      	mov	r3, r0
 80076c0:	b2db      	uxtb	r3, r3
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	f3af 8000 	nop.w
 80076d0:	fcce1c58 	.word	0xfcce1c58
 80076d4:	3f800e6a 	.word	0x3f800e6a
 80076d8:	40040000 	.word	0x40040000
 80076dc:	00000000 	.word	0x00000000

080076e0 <can1_ams_cell_voltages_v10s4_decode>:

double can1_ams_cell_voltages_v10s4_decode(uint8_t value)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80076ea:	79fb      	ldrb	r3, [r7, #7]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7f8 fefb 	bl	80004e8 <__aeabi_ui2d>
 80076f2:	a30e      	add	r3, pc, #56	; (adr r3, 800772c <can1_ams_cell_voltages_v10s4_decode+0x4c>)
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	f7f8 ff70 	bl	80005dc <__aeabi_dmul>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4610      	mov	r0, r2
 8007702:	4619      	mov	r1, r3
 8007704:	f04f 0200 	mov.w	r2, #0
 8007708:	4b07      	ldr	r3, [pc, #28]	; (8007728 <can1_ams_cell_voltages_v10s4_decode+0x48>)
 800770a:	f7f8 fdb1 	bl	8000270 <__adddf3>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	ec43 2b17 	vmov	d7, r2, r3
}
 8007716:	eeb0 0a47 	vmov.f32	s0, s14
 800771a:	eef0 0a67 	vmov.f32	s1, s15
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	f3af 8000 	nop.w
 8007728:	40040000 	.word	0x40040000
 800772c:	fcce1c58 	.word	0xfcce1c58
 8007730:	3f800e6a 	.word	0x3f800e6a
 8007734:	00000000 	.word	0x00000000

08007738 <can1_ams_cell_voltages_v4s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s5_encode(double value)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007742:	f04f 0200 	mov.w	r2, #0
 8007746:	4b10      	ldr	r3, [pc, #64]	; (8007788 <can1_ams_cell_voltages_v4s5_encode+0x50>)
 8007748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800774c:	f7f8 fd8e 	bl	800026c <__aeabi_dsub>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4610      	mov	r0, r2
 8007756:	4619      	mov	r1, r3
 8007758:	a309      	add	r3, pc, #36	; (adr r3, 8007780 <can1_ams_cell_voltages_v4s5_encode+0x48>)
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	f7f9 f867 	bl	8000830 <__aeabi_ddiv>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4610      	mov	r0, r2
 8007768:	4619      	mov	r1, r3
 800776a:	f7f9 fa0f 	bl	8000b8c <__aeabi_d2uiz>
 800776e:	4603      	mov	r3, r0
 8007770:	b2db      	uxtb	r3, r3
}
 8007772:	4618      	mov	r0, r3
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	f3af 8000 	nop.w
 8007780:	fcce1c58 	.word	0xfcce1c58
 8007784:	3f800e6a 	.word	0x3f800e6a
 8007788:	40040000 	.word	0x40040000
 800778c:	00000000 	.word	0x00000000

08007790 <can1_ams_cell_voltages_v4s5_decode>:

double can1_ams_cell_voltages_v4s5_decode(uint8_t value)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	4603      	mov	r3, r0
 8007798:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800779a:	79fb      	ldrb	r3, [r7, #7]
 800779c:	4618      	mov	r0, r3
 800779e:	f7f8 fea3 	bl	80004e8 <__aeabi_ui2d>
 80077a2:	a30e      	add	r3, pc, #56	; (adr r3, 80077dc <can1_ams_cell_voltages_v4s5_decode+0x4c>)
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f7f8 ff18 	bl	80005dc <__aeabi_dmul>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4610      	mov	r0, r2
 80077b2:	4619      	mov	r1, r3
 80077b4:	f04f 0200 	mov.w	r2, #0
 80077b8:	4b07      	ldr	r3, [pc, #28]	; (80077d8 <can1_ams_cell_voltages_v4s5_decode+0x48>)
 80077ba:	f7f8 fd59 	bl	8000270 <__adddf3>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80077c6:	eeb0 0a47 	vmov.f32	s0, s14
 80077ca:	eef0 0a67 	vmov.f32	s1, s15
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	f3af 8000 	nop.w
 80077d8:	40040000 	.word	0x40040000
 80077dc:	fcce1c58 	.word	0xfcce1c58
 80077e0:	3f800e6a 	.word	0x3f800e6a
 80077e4:	00000000 	.word	0x00000000

080077e8 <can1_ams_cell_voltages_v10s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s5_encode(double value)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80077f2:	f04f 0200 	mov.w	r2, #0
 80077f6:	4b10      	ldr	r3, [pc, #64]	; (8007838 <can1_ams_cell_voltages_v10s5_encode+0x50>)
 80077f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077fc:	f7f8 fd36 	bl	800026c <__aeabi_dsub>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4610      	mov	r0, r2
 8007806:	4619      	mov	r1, r3
 8007808:	a309      	add	r3, pc, #36	; (adr r3, 8007830 <can1_ams_cell_voltages_v10s5_encode+0x48>)
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f7f9 f80f 	bl	8000830 <__aeabi_ddiv>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	4610      	mov	r0, r2
 8007818:	4619      	mov	r1, r3
 800781a:	f7f9 f9b7 	bl	8000b8c <__aeabi_d2uiz>
 800781e:	4603      	mov	r3, r0
 8007820:	b2db      	uxtb	r3, r3
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	f3af 8000 	nop.w
 8007830:	fcce1c58 	.word	0xfcce1c58
 8007834:	3f800e6a 	.word	0x3f800e6a
 8007838:	40040000 	.word	0x40040000
 800783c:	00000000 	.word	0x00000000

08007840 <can1_ams_cell_voltages_v10s5_decode>:

double can1_ams_cell_voltages_v10s5_decode(uint8_t value)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	4603      	mov	r3, r0
 8007848:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800784a:	79fb      	ldrb	r3, [r7, #7]
 800784c:	4618      	mov	r0, r3
 800784e:	f7f8 fe4b 	bl	80004e8 <__aeabi_ui2d>
 8007852:	a30e      	add	r3, pc, #56	; (adr r3, 800788c <can1_ams_cell_voltages_v10s5_decode+0x4c>)
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f7f8 fec0 	bl	80005dc <__aeabi_dmul>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4610      	mov	r0, r2
 8007862:	4619      	mov	r1, r3
 8007864:	f04f 0200 	mov.w	r2, #0
 8007868:	4b07      	ldr	r3, [pc, #28]	; (8007888 <can1_ams_cell_voltages_v10s5_decode+0x48>)
 800786a:	f7f8 fd01 	bl	8000270 <__adddf3>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	ec43 2b17 	vmov	d7, r2, r3
}
 8007876:	eeb0 0a47 	vmov.f32	s0, s14
 800787a:	eef0 0a67 	vmov.f32	s1, s15
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	f3af 8000 	nop.w
 8007888:	40040000 	.word	0x40040000
 800788c:	fcce1c58 	.word	0xfcce1c58
 8007890:	3f800e6a 	.word	0x3f800e6a
 8007894:	00000000 	.word	0x00000000

08007898 <can1_ams_cell_voltages_v4s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s6_encode(double value)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80078a2:	f04f 0200 	mov.w	r2, #0
 80078a6:	4b10      	ldr	r3, [pc, #64]	; (80078e8 <can1_ams_cell_voltages_v4s6_encode+0x50>)
 80078a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078ac:	f7f8 fcde 	bl	800026c <__aeabi_dsub>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4610      	mov	r0, r2
 80078b6:	4619      	mov	r1, r3
 80078b8:	a309      	add	r3, pc, #36	; (adr r3, 80078e0 <can1_ams_cell_voltages_v4s6_encode+0x48>)
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	f7f8 ffb7 	bl	8000830 <__aeabi_ddiv>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4610      	mov	r0, r2
 80078c8:	4619      	mov	r1, r3
 80078ca:	f7f9 f95f 	bl	8000b8c <__aeabi_d2uiz>
 80078ce:	4603      	mov	r3, r0
 80078d0:	b2db      	uxtb	r3, r3
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	f3af 8000 	nop.w
 80078e0:	fcce1c58 	.word	0xfcce1c58
 80078e4:	3f800e6a 	.word	0x3f800e6a
 80078e8:	40040000 	.word	0x40040000
 80078ec:	00000000 	.word	0x00000000

080078f0 <can1_ams_cell_voltages_v4s6_decode>:

double can1_ams_cell_voltages_v4s6_decode(uint8_t value)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80078fa:	79fb      	ldrb	r3, [r7, #7]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7f8 fdf3 	bl	80004e8 <__aeabi_ui2d>
 8007902:	a30e      	add	r3, pc, #56	; (adr r3, 800793c <can1_ams_cell_voltages_v4s6_decode+0x4c>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f7f8 fe68 	bl	80005dc <__aeabi_dmul>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4610      	mov	r0, r2
 8007912:	4619      	mov	r1, r3
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	4b07      	ldr	r3, [pc, #28]	; (8007938 <can1_ams_cell_voltages_v4s6_decode+0x48>)
 800791a:	f7f8 fca9 	bl	8000270 <__adddf3>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	ec43 2b17 	vmov	d7, r2, r3
}
 8007926:	eeb0 0a47 	vmov.f32	s0, s14
 800792a:	eef0 0a67 	vmov.f32	s1, s15
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	f3af 8000 	nop.w
 8007938:	40040000 	.word	0x40040000
 800793c:	fcce1c58 	.word	0xfcce1c58
 8007940:	3f800e6a 	.word	0x3f800e6a
 8007944:	00000000 	.word	0x00000000

08007948 <can1_ams_cell_voltages_v10s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s6_encode(double value)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	4b10      	ldr	r3, [pc, #64]	; (8007998 <can1_ams_cell_voltages_v10s6_encode+0x50>)
 8007958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800795c:	f7f8 fc86 	bl	800026c <__aeabi_dsub>
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
 8007964:	4610      	mov	r0, r2
 8007966:	4619      	mov	r1, r3
 8007968:	a309      	add	r3, pc, #36	; (adr r3, 8007990 <can1_ams_cell_voltages_v10s6_encode+0x48>)
 800796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796e:	f7f8 ff5f 	bl	8000830 <__aeabi_ddiv>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4610      	mov	r0, r2
 8007978:	4619      	mov	r1, r3
 800797a:	f7f9 f907 	bl	8000b8c <__aeabi_d2uiz>
 800797e:	4603      	mov	r3, r0
 8007980:	b2db      	uxtb	r3, r3
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	f3af 8000 	nop.w
 8007990:	fcce1c58 	.word	0xfcce1c58
 8007994:	3f800e6a 	.word	0x3f800e6a
 8007998:	40040000 	.word	0x40040000
 800799c:	00000000 	.word	0x00000000

080079a0 <can1_ams_cell_voltages_v10s6_decode>:

double can1_ams_cell_voltages_v10s6_decode(uint8_t value)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	4603      	mov	r3, r0
 80079a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7f8 fd9b 	bl	80004e8 <__aeabi_ui2d>
 80079b2:	a30e      	add	r3, pc, #56	; (adr r3, 80079ec <can1_ams_cell_voltages_v10s6_decode+0x4c>)
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	f7f8 fe10 	bl	80005dc <__aeabi_dmul>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4610      	mov	r0, r2
 80079c2:	4619      	mov	r1, r3
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <can1_ams_cell_voltages_v10s6_decode+0x48>)
 80079ca:	f7f8 fc51 	bl	8000270 <__adddf3>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80079d6:	eeb0 0a47 	vmov.f32	s0, s14
 80079da:	eef0 0a67 	vmov.f32	s1, s15
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	f3af 8000 	nop.w
 80079e8:	40040000 	.word	0x40040000
 80079ec:	fcce1c58 	.word	0xfcce1c58
 80079f0:	3f800e6a 	.word	0x3f800e6a
 80079f4:	00000000 	.word	0x00000000

080079f8 <can1_ams_cell_voltages_v4s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s7_encode(double value)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007a02:	f04f 0200 	mov.w	r2, #0
 8007a06:	4b10      	ldr	r3, [pc, #64]	; (8007a48 <can1_ams_cell_voltages_v4s7_encode+0x50>)
 8007a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a0c:	f7f8 fc2e 	bl	800026c <__aeabi_dsub>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	4610      	mov	r0, r2
 8007a16:	4619      	mov	r1, r3
 8007a18:	a309      	add	r3, pc, #36	; (adr r3, 8007a40 <can1_ams_cell_voltages_v4s7_encode+0x48>)
 8007a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1e:	f7f8 ff07 	bl	8000830 <__aeabi_ddiv>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4610      	mov	r0, r2
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f7f9 f8af 	bl	8000b8c <__aeabi_d2uiz>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	b2db      	uxtb	r3, r3
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	f3af 8000 	nop.w
 8007a40:	fcce1c58 	.word	0xfcce1c58
 8007a44:	3f800e6a 	.word	0x3f800e6a
 8007a48:	40040000 	.word	0x40040000
 8007a4c:	00000000 	.word	0x00000000

08007a50 <can1_ams_cell_voltages_v4s7_decode>:

double can1_ams_cell_voltages_v4s7_decode(uint8_t value)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	4603      	mov	r3, r0
 8007a58:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7f8 fd43 	bl	80004e8 <__aeabi_ui2d>
 8007a62:	a30e      	add	r3, pc, #56	; (adr r3, 8007a9c <can1_ams_cell_voltages_v4s7_decode+0x4c>)
 8007a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a68:	f7f8 fdb8 	bl	80005dc <__aeabi_dmul>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4610      	mov	r0, r2
 8007a72:	4619      	mov	r1, r3
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	4b07      	ldr	r3, [pc, #28]	; (8007a98 <can1_ams_cell_voltages_v4s7_decode+0x48>)
 8007a7a:	f7f8 fbf9 	bl	8000270 <__adddf3>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	ec43 2b17 	vmov	d7, r2, r3
}
 8007a86:	eeb0 0a47 	vmov.f32	s0, s14
 8007a8a:	eef0 0a67 	vmov.f32	s1, s15
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	f3af 8000 	nop.w
 8007a98:	40040000 	.word	0x40040000
 8007a9c:	fcce1c58 	.word	0xfcce1c58
 8007aa0:	3f800e6a 	.word	0x3f800e6a
 8007aa4:	00000000 	.word	0x00000000

08007aa8 <can1_ams_cell_voltages_v10s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s7_encode(double value)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007ab2:	f04f 0200 	mov.w	r2, #0
 8007ab6:	4b10      	ldr	r3, [pc, #64]	; (8007af8 <can1_ams_cell_voltages_v10s7_encode+0x50>)
 8007ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007abc:	f7f8 fbd6 	bl	800026c <__aeabi_dsub>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	a309      	add	r3, pc, #36	; (adr r3, 8007af0 <can1_ams_cell_voltages_v10s7_encode+0x48>)
 8007aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ace:	f7f8 feaf 	bl	8000830 <__aeabi_ddiv>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	4619      	mov	r1, r3
 8007ada:	f7f9 f857 	bl	8000b8c <__aeabi_d2uiz>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	b2db      	uxtb	r3, r3
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	f3af 8000 	nop.w
 8007af0:	fcce1c58 	.word	0xfcce1c58
 8007af4:	3f800e6a 	.word	0x3f800e6a
 8007af8:	40040000 	.word	0x40040000
 8007afc:	00000000 	.word	0x00000000

08007b00 <can1_ams_cell_voltages_v10s7_decode>:

double can1_ams_cell_voltages_v10s7_decode(uint8_t value)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7f8 fceb 	bl	80004e8 <__aeabi_ui2d>
 8007b12:	a30e      	add	r3, pc, #56	; (adr r3, 8007b4c <can1_ams_cell_voltages_v10s7_decode+0x4c>)
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	f7f8 fd60 	bl	80005dc <__aeabi_dmul>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4610      	mov	r0, r2
 8007b22:	4619      	mov	r1, r3
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	4b07      	ldr	r3, [pc, #28]	; (8007b48 <can1_ams_cell_voltages_v10s7_decode+0x48>)
 8007b2a:	f7f8 fba1 	bl	8000270 <__adddf3>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	ec43 2b17 	vmov	d7, r2, r3
}
 8007b36:	eeb0 0a47 	vmov.f32	s0, s14
 8007b3a:	eef0 0a67 	vmov.f32	s1, s15
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	f3af 8000 	nop.w
 8007b48:	40040000 	.word	0x40040000
 8007b4c:	fcce1c58 	.word	0xfcce1c58
 8007b50:	3f800e6a 	.word	0x3f800e6a
 8007b54:	00000000 	.word	0x00000000

08007b58 <can1_ams_cell_voltages_v4s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s8_encode(double value)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007b62:	f04f 0200 	mov.w	r2, #0
 8007b66:	4b10      	ldr	r3, [pc, #64]	; (8007ba8 <can1_ams_cell_voltages_v4s8_encode+0x50>)
 8007b68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b6c:	f7f8 fb7e 	bl	800026c <__aeabi_dsub>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4610      	mov	r0, r2
 8007b76:	4619      	mov	r1, r3
 8007b78:	a309      	add	r3, pc, #36	; (adr r3, 8007ba0 <can1_ams_cell_voltages_v4s8_encode+0x48>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	f7f8 fe57 	bl	8000830 <__aeabi_ddiv>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	4610      	mov	r0, r2
 8007b88:	4619      	mov	r1, r3
 8007b8a:	f7f8 ffff 	bl	8000b8c <__aeabi_d2uiz>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	b2db      	uxtb	r3, r3
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	f3af 8000 	nop.w
 8007ba0:	fcce1c58 	.word	0xfcce1c58
 8007ba4:	3f800e6a 	.word	0x3f800e6a
 8007ba8:	40040000 	.word	0x40040000
 8007bac:	00000000 	.word	0x00000000

08007bb0 <can1_ams_cell_voltages_v4s8_decode>:

double can1_ams_cell_voltages_v4s8_decode(uint8_t value)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7f8 fc93 	bl	80004e8 <__aeabi_ui2d>
 8007bc2:	a30e      	add	r3, pc, #56	; (adr r3, 8007bfc <can1_ams_cell_voltages_v4s8_decode+0x4c>)
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f7f8 fd08 	bl	80005dc <__aeabi_dmul>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	f04f 0200 	mov.w	r2, #0
 8007bd8:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <can1_ams_cell_voltages_v4s8_decode+0x48>)
 8007bda:	f7f8 fb49 	bl	8000270 <__adddf3>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	ec43 2b17 	vmov	d7, r2, r3
}
 8007be6:	eeb0 0a47 	vmov.f32	s0, s14
 8007bea:	eef0 0a67 	vmov.f32	s1, s15
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	f3af 8000 	nop.w
 8007bf8:	40040000 	.word	0x40040000
 8007bfc:	fcce1c58 	.word	0xfcce1c58
 8007c00:	3f800e6a 	.word	0x3f800e6a
 8007c04:	00000000 	.word	0x00000000

08007c08 <can1_ams_cell_voltages_v10s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s8_encode(double value)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007c12:	f04f 0200 	mov.w	r2, #0
 8007c16:	4b10      	ldr	r3, [pc, #64]	; (8007c58 <can1_ams_cell_voltages_v10s8_encode+0x50>)
 8007c18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c1c:	f7f8 fb26 	bl	800026c <__aeabi_dsub>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4610      	mov	r0, r2
 8007c26:	4619      	mov	r1, r3
 8007c28:	a309      	add	r3, pc, #36	; (adr r3, 8007c50 <can1_ams_cell_voltages_v10s8_encode+0x48>)
 8007c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2e:	f7f8 fdff 	bl	8000830 <__aeabi_ddiv>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	4610      	mov	r0, r2
 8007c38:	4619      	mov	r1, r3
 8007c3a:	f7f8 ffa7 	bl	8000b8c <__aeabi_d2uiz>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	b2db      	uxtb	r3, r3
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	f3af 8000 	nop.w
 8007c50:	fcce1c58 	.word	0xfcce1c58
 8007c54:	3f800e6a 	.word	0x3f800e6a
 8007c58:	40040000 	.word	0x40040000
 8007c5c:	00000000 	.word	0x00000000

08007c60 <can1_ams_cell_voltages_v10s8_decode>:

double can1_ams_cell_voltages_v10s8_decode(uint8_t value)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	4603      	mov	r3, r0
 8007c68:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7f8 fc3b 	bl	80004e8 <__aeabi_ui2d>
 8007c72:	a30e      	add	r3, pc, #56	; (adr r3, 8007cac <can1_ams_cell_voltages_v10s8_decode+0x4c>)
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	f7f8 fcb0 	bl	80005dc <__aeabi_dmul>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4610      	mov	r0, r2
 8007c82:	4619      	mov	r1, r3
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <can1_ams_cell_voltages_v10s8_decode+0x48>)
 8007c8a:	f7f8 faf1 	bl	8000270 <__adddf3>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	ec43 2b17 	vmov	d7, r2, r3
}
 8007c96:	eeb0 0a47 	vmov.f32	s0, s14
 8007c9a:	eef0 0a67 	vmov.f32	s1, s15
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	f3af 8000 	nop.w
 8007ca8:	40040000 	.word	0x40040000
 8007cac:	fcce1c58 	.word	0xfcce1c58
 8007cb0:	3f800e6a 	.word	0x3f800e6a
 8007cb4:	00000000 	.word	0x00000000

08007cb8 <can1_ams_cell_voltages_v4s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s9_encode(double value)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007cc2:	f04f 0200 	mov.w	r2, #0
 8007cc6:	4b10      	ldr	r3, [pc, #64]	; (8007d08 <can1_ams_cell_voltages_v4s9_encode+0x50>)
 8007cc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ccc:	f7f8 face 	bl	800026c <__aeabi_dsub>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	a309      	add	r3, pc, #36	; (adr r3, 8007d00 <can1_ams_cell_voltages_v4s9_encode+0x48>)
 8007cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cde:	f7f8 fda7 	bl	8000830 <__aeabi_ddiv>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	4619      	mov	r1, r3
 8007cea:	f7f8 ff4f 	bl	8000b8c <__aeabi_d2uiz>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	b2db      	uxtb	r3, r3
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	f3af 8000 	nop.w
 8007d00:	fcce1c58 	.word	0xfcce1c58
 8007d04:	3f800e6a 	.word	0x3f800e6a
 8007d08:	40040000 	.word	0x40040000
 8007d0c:	00000000 	.word	0x00000000

08007d10 <can1_ams_cell_voltages_v4s9_decode>:

double can1_ams_cell_voltages_v4s9_decode(uint8_t value)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4603      	mov	r3, r0
 8007d18:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007d1a:	79fb      	ldrb	r3, [r7, #7]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7f8 fbe3 	bl	80004e8 <__aeabi_ui2d>
 8007d22:	a30e      	add	r3, pc, #56	; (adr r3, 8007d5c <can1_ams_cell_voltages_v4s9_decode+0x4c>)
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	f7f8 fc58 	bl	80005dc <__aeabi_dmul>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4610      	mov	r0, r2
 8007d32:	4619      	mov	r1, r3
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	4b07      	ldr	r3, [pc, #28]	; (8007d58 <can1_ams_cell_voltages_v4s9_decode+0x48>)
 8007d3a:	f7f8 fa99 	bl	8000270 <__adddf3>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	ec43 2b17 	vmov	d7, r2, r3
}
 8007d46:	eeb0 0a47 	vmov.f32	s0, s14
 8007d4a:	eef0 0a67 	vmov.f32	s1, s15
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	f3af 8000 	nop.w
 8007d58:	40040000 	.word	0x40040000
 8007d5c:	fcce1c58 	.word	0xfcce1c58
 8007d60:	3f800e6a 	.word	0x3f800e6a
 8007d64:	00000000 	.word	0x00000000

08007d68 <can1_ams_cell_voltages_v10s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s9_encode(double value)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007d72:	f04f 0200 	mov.w	r2, #0
 8007d76:	4b10      	ldr	r3, [pc, #64]	; (8007db8 <can1_ams_cell_voltages_v10s9_encode+0x50>)
 8007d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d7c:	f7f8 fa76 	bl	800026c <__aeabi_dsub>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	4610      	mov	r0, r2
 8007d86:	4619      	mov	r1, r3
 8007d88:	a309      	add	r3, pc, #36	; (adr r3, 8007db0 <can1_ams_cell_voltages_v10s9_encode+0x48>)
 8007d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8e:	f7f8 fd4f 	bl	8000830 <__aeabi_ddiv>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4610      	mov	r0, r2
 8007d98:	4619      	mov	r1, r3
 8007d9a:	f7f8 fef7 	bl	8000b8c <__aeabi_d2uiz>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	b2db      	uxtb	r3, r3
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	f3af 8000 	nop.w
 8007db0:	fcce1c58 	.word	0xfcce1c58
 8007db4:	3f800e6a 	.word	0x3f800e6a
 8007db8:	40040000 	.word	0x40040000
 8007dbc:	00000000 	.word	0x00000000

08007dc0 <can1_ams_cell_voltages_v10s9_decode>:

double can1_ams_cell_voltages_v10s9_decode(uint8_t value)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007dca:	79fb      	ldrb	r3, [r7, #7]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7f8 fb8b 	bl	80004e8 <__aeabi_ui2d>
 8007dd2:	a30e      	add	r3, pc, #56	; (adr r3, 8007e0c <can1_ams_cell_voltages_v10s9_decode+0x4c>)
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f7f8 fc00 	bl	80005dc <__aeabi_dmul>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	4610      	mov	r0, r2
 8007de2:	4619      	mov	r1, r3
 8007de4:	f04f 0200 	mov.w	r2, #0
 8007de8:	4b07      	ldr	r3, [pc, #28]	; (8007e08 <can1_ams_cell_voltages_v10s9_decode+0x48>)
 8007dea:	f7f8 fa41 	bl	8000270 <__adddf3>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	ec43 2b17 	vmov	d7, r2, r3
}
 8007df6:	eeb0 0a47 	vmov.f32	s0, s14
 8007dfa:	eef0 0a67 	vmov.f32	s1, s15
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	f3af 8000 	nop.w
 8007e08:	40040000 	.word	0x40040000
 8007e0c:	fcce1c58 	.word	0xfcce1c58
 8007e10:	3f800e6a 	.word	0x3f800e6a
 8007e14:	00000000 	.word	0x00000000

08007e18 <can1_ams_cell_voltages_v4s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s10_encode(double value)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	4b10      	ldr	r3, [pc, #64]	; (8007e68 <can1_ams_cell_voltages_v4s10_encode+0x50>)
 8007e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e2c:	f7f8 fa1e 	bl	800026c <__aeabi_dsub>
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	4610      	mov	r0, r2
 8007e36:	4619      	mov	r1, r3
 8007e38:	a309      	add	r3, pc, #36	; (adr r3, 8007e60 <can1_ams_cell_voltages_v4s10_encode+0x48>)
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	f7f8 fcf7 	bl	8000830 <__aeabi_ddiv>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4610      	mov	r0, r2
 8007e48:	4619      	mov	r1, r3
 8007e4a:	f7f8 fe9f 	bl	8000b8c <__aeabi_d2uiz>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	b2db      	uxtb	r3, r3
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	f3af 8000 	nop.w
 8007e60:	fcce1c58 	.word	0xfcce1c58
 8007e64:	3f800e6a 	.word	0x3f800e6a
 8007e68:	40040000 	.word	0x40040000
 8007e6c:	00000000 	.word	0x00000000

08007e70 <can1_ams_cell_voltages_v4s10_decode>:

double can1_ams_cell_voltages_v4s10_decode(uint8_t value)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7f8 fb33 	bl	80004e8 <__aeabi_ui2d>
 8007e82:	a30e      	add	r3, pc, #56	; (adr r3, 8007ebc <can1_ams_cell_voltages_v4s10_decode+0x4c>)
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	f7f8 fba8 	bl	80005dc <__aeabi_dmul>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4610      	mov	r0, r2
 8007e92:	4619      	mov	r1, r3
 8007e94:	f04f 0200 	mov.w	r2, #0
 8007e98:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <can1_ams_cell_voltages_v4s10_decode+0x48>)
 8007e9a:	f7f8 f9e9 	bl	8000270 <__adddf3>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	ec43 2b17 	vmov	d7, r2, r3
}
 8007ea6:	eeb0 0a47 	vmov.f32	s0, s14
 8007eaa:	eef0 0a67 	vmov.f32	s1, s15
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	f3af 8000 	nop.w
 8007eb8:	40040000 	.word	0x40040000
 8007ebc:	fcce1c58 	.word	0xfcce1c58
 8007ec0:	3f800e6a 	.word	0x3f800e6a
 8007ec4:	00000000 	.word	0x00000000

08007ec8 <can1_ams_cell_voltages_v10s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s10_encode(double value)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007ed2:	f04f 0200 	mov.w	r2, #0
 8007ed6:	4b10      	ldr	r3, [pc, #64]	; (8007f18 <can1_ams_cell_voltages_v10s10_encode+0x50>)
 8007ed8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007edc:	f7f8 f9c6 	bl	800026c <__aeabi_dsub>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	a309      	add	r3, pc, #36	; (adr r3, 8007f10 <can1_ams_cell_voltages_v10s10_encode+0x48>)
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f7f8 fc9f 	bl	8000830 <__aeabi_ddiv>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	4619      	mov	r1, r3
 8007efa:	f7f8 fe47 	bl	8000b8c <__aeabi_d2uiz>
 8007efe:	4603      	mov	r3, r0
 8007f00:	b2db      	uxtb	r3, r3
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	f3af 8000 	nop.w
 8007f10:	fcce1c58 	.word	0xfcce1c58
 8007f14:	3f800e6a 	.word	0x3f800e6a
 8007f18:	40040000 	.word	0x40040000
 8007f1c:	00000000 	.word	0x00000000

08007f20 <can1_ams_cell_voltages_v10s10_decode>:

double can1_ams_cell_voltages_v10s10_decode(uint8_t value)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	4603      	mov	r3, r0
 8007f28:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007f2a:	79fb      	ldrb	r3, [r7, #7]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7f8 fadb 	bl	80004e8 <__aeabi_ui2d>
 8007f32:	a30e      	add	r3, pc, #56	; (adr r3, 8007f6c <can1_ams_cell_voltages_v10s10_decode+0x4c>)
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f7f8 fb50 	bl	80005dc <__aeabi_dmul>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	4610      	mov	r0, r2
 8007f42:	4619      	mov	r1, r3
 8007f44:	f04f 0200 	mov.w	r2, #0
 8007f48:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <can1_ams_cell_voltages_v10s10_decode+0x48>)
 8007f4a:	f7f8 f991 	bl	8000270 <__adddf3>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	ec43 2b17 	vmov	d7, r2, r3
}
 8007f56:	eeb0 0a47 	vmov.f32	s0, s14
 8007f5a:	eef0 0a67 	vmov.f32	s1, s15
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	f3af 8000 	nop.w
 8007f68:	40040000 	.word	0x40040000
 8007f6c:	fcce1c58 	.word	0xfcce1c58
 8007f70:	3f800e6a 	.word	0x3f800e6a
 8007f74:	00000000 	.word	0x00000000

08007f78 <can1_ams_cell_voltages_v4s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s11_encode(double value)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007f82:	f04f 0200 	mov.w	r2, #0
 8007f86:	4b10      	ldr	r3, [pc, #64]	; (8007fc8 <can1_ams_cell_voltages_v4s11_encode+0x50>)
 8007f88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f8c:	f7f8 f96e 	bl	800026c <__aeabi_dsub>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4610      	mov	r0, r2
 8007f96:	4619      	mov	r1, r3
 8007f98:	a309      	add	r3, pc, #36	; (adr r3, 8007fc0 <can1_ams_cell_voltages_v4s11_encode+0x48>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f7f8 fc47 	bl	8000830 <__aeabi_ddiv>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	4619      	mov	r1, r3
 8007faa:	f7f8 fdef 	bl	8000b8c <__aeabi_d2uiz>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	b2db      	uxtb	r3, r3
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	f3af 8000 	nop.w
 8007fc0:	fcce1c58 	.word	0xfcce1c58
 8007fc4:	3f800e6a 	.word	0x3f800e6a
 8007fc8:	40040000 	.word	0x40040000
 8007fcc:	00000000 	.word	0x00000000

08007fd0 <can1_ams_cell_voltages_v4s11_decode>:

double can1_ams_cell_voltages_v4s11_decode(uint8_t value)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007fda:	79fb      	ldrb	r3, [r7, #7]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7f8 fa83 	bl	80004e8 <__aeabi_ui2d>
 8007fe2:	a30e      	add	r3, pc, #56	; (adr r3, 800801c <can1_ams_cell_voltages_v4s11_decode+0x4c>)
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	f7f8 faf8 	bl	80005dc <__aeabi_dmul>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	f04f 0200 	mov.w	r2, #0
 8007ff8:	4b07      	ldr	r3, [pc, #28]	; (8008018 <can1_ams_cell_voltages_v4s11_decode+0x48>)
 8007ffa:	f7f8 f939 	bl	8000270 <__adddf3>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	ec43 2b17 	vmov	d7, r2, r3
}
 8008006:	eeb0 0a47 	vmov.f32	s0, s14
 800800a:	eef0 0a67 	vmov.f32	s1, s15
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	f3af 8000 	nop.w
 8008018:	40040000 	.word	0x40040000
 800801c:	fcce1c58 	.word	0xfcce1c58
 8008020:	3f800e6a 	.word	0x3f800e6a
 8008024:	00000000 	.word	0x00000000

08008028 <can1_ams_cell_voltages_v10s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s11_encode(double value)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008032:	f04f 0200 	mov.w	r2, #0
 8008036:	4b10      	ldr	r3, [pc, #64]	; (8008078 <can1_ams_cell_voltages_v10s11_encode+0x50>)
 8008038:	e9d7 0100 	ldrd	r0, r1, [r7]
 800803c:	f7f8 f916 	bl	800026c <__aeabi_dsub>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	4610      	mov	r0, r2
 8008046:	4619      	mov	r1, r3
 8008048:	a309      	add	r3, pc, #36	; (adr r3, 8008070 <can1_ams_cell_voltages_v10s11_encode+0x48>)
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	f7f8 fbef 	bl	8000830 <__aeabi_ddiv>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	4610      	mov	r0, r2
 8008058:	4619      	mov	r1, r3
 800805a:	f7f8 fd97 	bl	8000b8c <__aeabi_d2uiz>
 800805e:	4603      	mov	r3, r0
 8008060:	b2db      	uxtb	r3, r3
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	f3af 8000 	nop.w
 8008070:	fcce1c58 	.word	0xfcce1c58
 8008074:	3f800e6a 	.word	0x3f800e6a
 8008078:	40040000 	.word	0x40040000
 800807c:	00000000 	.word	0x00000000

08008080 <can1_ams_cell_voltages_v10s11_decode>:

double can1_ams_cell_voltages_v10s11_decode(uint8_t value)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	4603      	mov	r3, r0
 8008088:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	4618      	mov	r0, r3
 800808e:	f7f8 fa2b 	bl	80004e8 <__aeabi_ui2d>
 8008092:	a30e      	add	r3, pc, #56	; (adr r3, 80080cc <can1_ams_cell_voltages_v10s11_decode+0x4c>)
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	f7f8 faa0 	bl	80005dc <__aeabi_dmul>
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	4610      	mov	r0, r2
 80080a2:	4619      	mov	r1, r3
 80080a4:	f04f 0200 	mov.w	r2, #0
 80080a8:	4b07      	ldr	r3, [pc, #28]	; (80080c8 <can1_ams_cell_voltages_v10s11_decode+0x48>)
 80080aa:	f7f8 f8e1 	bl	8000270 <__adddf3>
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80080b6:	eeb0 0a47 	vmov.f32	s0, s14
 80080ba:	eef0 0a67 	vmov.f32	s1, s15
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	f3af 8000 	nop.w
 80080c8:	40040000 	.word	0x40040000
 80080cc:	fcce1c58 	.word	0xfcce1c58
 80080d0:	3f800e6a 	.word	0x3f800e6a
 80080d4:	00000000 	.word	0x00000000

080080d8 <can1_ams_cell_voltages_v4s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s12_encode(double value)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80080e2:	f04f 0200 	mov.w	r2, #0
 80080e6:	4b10      	ldr	r3, [pc, #64]	; (8008128 <can1_ams_cell_voltages_v4s12_encode+0x50>)
 80080e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080ec:	f7f8 f8be 	bl	800026c <__aeabi_dsub>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4610      	mov	r0, r2
 80080f6:	4619      	mov	r1, r3
 80080f8:	a309      	add	r3, pc, #36	; (adr r3, 8008120 <can1_ams_cell_voltages_v4s12_encode+0x48>)
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	f7f8 fb97 	bl	8000830 <__aeabi_ddiv>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4610      	mov	r0, r2
 8008108:	4619      	mov	r1, r3
 800810a:	f7f8 fd3f 	bl	8000b8c <__aeabi_d2uiz>
 800810e:	4603      	mov	r3, r0
 8008110:	b2db      	uxtb	r3, r3
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	f3af 8000 	nop.w
 8008120:	fcce1c58 	.word	0xfcce1c58
 8008124:	3f800e6a 	.word	0x3f800e6a
 8008128:	40040000 	.word	0x40040000
 800812c:	00000000 	.word	0x00000000

08008130 <can1_ams_cell_voltages_v4s12_decode>:

double can1_ams_cell_voltages_v4s12_decode(uint8_t value)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800813a:	79fb      	ldrb	r3, [r7, #7]
 800813c:	4618      	mov	r0, r3
 800813e:	f7f8 f9d3 	bl	80004e8 <__aeabi_ui2d>
 8008142:	a30e      	add	r3, pc, #56	; (adr r3, 800817c <can1_ams_cell_voltages_v4s12_decode+0x4c>)
 8008144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008148:	f7f8 fa48 	bl	80005dc <__aeabi_dmul>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	4610      	mov	r0, r2
 8008152:	4619      	mov	r1, r3
 8008154:	f04f 0200 	mov.w	r2, #0
 8008158:	4b07      	ldr	r3, [pc, #28]	; (8008178 <can1_ams_cell_voltages_v4s12_decode+0x48>)
 800815a:	f7f8 f889 	bl	8000270 <__adddf3>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	ec43 2b17 	vmov	d7, r2, r3
}
 8008166:	eeb0 0a47 	vmov.f32	s0, s14
 800816a:	eef0 0a67 	vmov.f32	s1, s15
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	f3af 8000 	nop.w
 8008178:	40040000 	.word	0x40040000
 800817c:	fcce1c58 	.word	0xfcce1c58
 8008180:	3f800e6a 	.word	0x3f800e6a
 8008184:	00000000 	.word	0x00000000

08008188 <can1_ams_cell_voltages_v10s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s12_encode(double value)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008192:	f04f 0200 	mov.w	r2, #0
 8008196:	4b10      	ldr	r3, [pc, #64]	; (80081d8 <can1_ams_cell_voltages_v10s12_encode+0x50>)
 8008198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800819c:	f7f8 f866 	bl	800026c <__aeabi_dsub>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4610      	mov	r0, r2
 80081a6:	4619      	mov	r1, r3
 80081a8:	a309      	add	r3, pc, #36	; (adr r3, 80081d0 <can1_ams_cell_voltages_v10s12_encode+0x48>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	f7f8 fb3f 	bl	8000830 <__aeabi_ddiv>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4610      	mov	r0, r2
 80081b8:	4619      	mov	r1, r3
 80081ba:	f7f8 fce7 	bl	8000b8c <__aeabi_d2uiz>
 80081be:	4603      	mov	r3, r0
 80081c0:	b2db      	uxtb	r3, r3
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	f3af 8000 	nop.w
 80081d0:	fcce1c58 	.word	0xfcce1c58
 80081d4:	3f800e6a 	.word	0x3f800e6a
 80081d8:	40040000 	.word	0x40040000
 80081dc:	00000000 	.word	0x00000000

080081e0 <can1_ams_cell_voltages_v10s12_decode>:

double can1_ams_cell_voltages_v10s12_decode(uint8_t value)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80081ea:	79fb      	ldrb	r3, [r7, #7]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7f8 f97b 	bl	80004e8 <__aeabi_ui2d>
 80081f2:	a30e      	add	r3, pc, #56	; (adr r3, 800822c <can1_ams_cell_voltages_v10s12_decode+0x4c>)
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f7f8 f9f0 	bl	80005dc <__aeabi_dmul>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4610      	mov	r0, r2
 8008202:	4619      	mov	r1, r3
 8008204:	f04f 0200 	mov.w	r2, #0
 8008208:	4b07      	ldr	r3, [pc, #28]	; (8008228 <can1_ams_cell_voltages_v10s12_decode+0x48>)
 800820a:	f7f8 f831 	bl	8000270 <__adddf3>
 800820e:	4602      	mov	r2, r0
 8008210:	460b      	mov	r3, r1
 8008212:	ec43 2b17 	vmov	d7, r2, r3
}
 8008216:	eeb0 0a47 	vmov.f32	s0, s14
 800821a:	eef0 0a67 	vmov.f32	s1, s15
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	f3af 8000 	nop.w
 8008228:	40040000 	.word	0x40040000
 800822c:	fcce1c58 	.word	0xfcce1c58
 8008230:	3f800e6a 	.word	0x3f800e6a
 8008234:	00000000 	.word	0x00000000

08008238 <can1_ams_cell_voltages_v5s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s1_encode(double value)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008242:	f04f 0200 	mov.w	r2, #0
 8008246:	4b10      	ldr	r3, [pc, #64]	; (8008288 <can1_ams_cell_voltages_v5s1_encode+0x50>)
 8008248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800824c:	f7f8 f80e 	bl	800026c <__aeabi_dsub>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	4610      	mov	r0, r2
 8008256:	4619      	mov	r1, r3
 8008258:	a309      	add	r3, pc, #36	; (adr r3, 8008280 <can1_ams_cell_voltages_v5s1_encode+0x48>)
 800825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825e:	f7f8 fae7 	bl	8000830 <__aeabi_ddiv>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	4610      	mov	r0, r2
 8008268:	4619      	mov	r1, r3
 800826a:	f7f8 fc8f 	bl	8000b8c <__aeabi_d2uiz>
 800826e:	4603      	mov	r3, r0
 8008270:	b2db      	uxtb	r3, r3
}
 8008272:	4618      	mov	r0, r3
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	f3af 8000 	nop.w
 8008280:	fcce1c58 	.word	0xfcce1c58
 8008284:	3f800e6a 	.word	0x3f800e6a
 8008288:	40040000 	.word	0x40040000
 800828c:	00000000 	.word	0x00000000

08008290 <can1_ams_cell_voltages_v5s1_decode>:

double can1_ams_cell_voltages_v5s1_decode(uint8_t value)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800829a:	79fb      	ldrb	r3, [r7, #7]
 800829c:	4618      	mov	r0, r3
 800829e:	f7f8 f923 	bl	80004e8 <__aeabi_ui2d>
 80082a2:	a30e      	add	r3, pc, #56	; (adr r3, 80082dc <can1_ams_cell_voltages_v5s1_decode+0x4c>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f8 f998 	bl	80005dc <__aeabi_dmul>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4610      	mov	r0, r2
 80082b2:	4619      	mov	r1, r3
 80082b4:	f04f 0200 	mov.w	r2, #0
 80082b8:	4b07      	ldr	r3, [pc, #28]	; (80082d8 <can1_ams_cell_voltages_v5s1_decode+0x48>)
 80082ba:	f7f7 ffd9 	bl	8000270 <__adddf3>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80082c6:	eeb0 0a47 	vmov.f32	s0, s14
 80082ca:	eef0 0a67 	vmov.f32	s1, s15
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	f3af 8000 	nop.w
 80082d8:	40040000 	.word	0x40040000
 80082dc:	fcce1c58 	.word	0xfcce1c58
 80082e0:	3f800e6a 	.word	0x3f800e6a
 80082e4:	00000000 	.word	0x00000000

080082e8 <can1_ams_cell_voltages_v11s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s1_encode(double value)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80082f2:	f04f 0200 	mov.w	r2, #0
 80082f6:	4b10      	ldr	r3, [pc, #64]	; (8008338 <can1_ams_cell_voltages_v11s1_encode+0x50>)
 80082f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082fc:	f7f7 ffb6 	bl	800026c <__aeabi_dsub>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4610      	mov	r0, r2
 8008306:	4619      	mov	r1, r3
 8008308:	a309      	add	r3, pc, #36	; (adr r3, 8008330 <can1_ams_cell_voltages_v11s1_encode+0x48>)
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f7f8 fa8f 	bl	8000830 <__aeabi_ddiv>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4610      	mov	r0, r2
 8008318:	4619      	mov	r1, r3
 800831a:	f7f8 fc37 	bl	8000b8c <__aeabi_d2uiz>
 800831e:	4603      	mov	r3, r0
 8008320:	b2db      	uxtb	r3, r3
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	f3af 8000 	nop.w
 8008330:	fcce1c58 	.word	0xfcce1c58
 8008334:	3f800e6a 	.word	0x3f800e6a
 8008338:	40040000 	.word	0x40040000
 800833c:	00000000 	.word	0x00000000

08008340 <can1_ams_cell_voltages_v11s1_decode>:

double can1_ams_cell_voltages_v11s1_decode(uint8_t value)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	4603      	mov	r3, r0
 8008348:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	4618      	mov	r0, r3
 800834e:	f7f8 f8cb 	bl	80004e8 <__aeabi_ui2d>
 8008352:	a30e      	add	r3, pc, #56	; (adr r3, 800838c <can1_ams_cell_voltages_v11s1_decode+0x4c>)
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	f7f8 f940 	bl	80005dc <__aeabi_dmul>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4610      	mov	r0, r2
 8008362:	4619      	mov	r1, r3
 8008364:	f04f 0200 	mov.w	r2, #0
 8008368:	4b07      	ldr	r3, [pc, #28]	; (8008388 <can1_ams_cell_voltages_v11s1_decode+0x48>)
 800836a:	f7f7 ff81 	bl	8000270 <__adddf3>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	ec43 2b17 	vmov	d7, r2, r3
}
 8008376:	eeb0 0a47 	vmov.f32	s0, s14
 800837a:	eef0 0a67 	vmov.f32	s1, s15
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	f3af 8000 	nop.w
 8008388:	40040000 	.word	0x40040000
 800838c:	fcce1c58 	.word	0xfcce1c58
 8008390:	3f800e6a 	.word	0x3f800e6a
 8008394:	00000000 	.word	0x00000000

08008398 <can1_ams_cell_voltages_v5s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s2_encode(double value)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80083a2:	f04f 0200 	mov.w	r2, #0
 80083a6:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <can1_ams_cell_voltages_v5s2_encode+0x50>)
 80083a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083ac:	f7f7 ff5e 	bl	800026c <__aeabi_dsub>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	4610      	mov	r0, r2
 80083b6:	4619      	mov	r1, r3
 80083b8:	a309      	add	r3, pc, #36	; (adr r3, 80083e0 <can1_ams_cell_voltages_v5s2_encode+0x48>)
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	f7f8 fa37 	bl	8000830 <__aeabi_ddiv>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4610      	mov	r0, r2
 80083c8:	4619      	mov	r1, r3
 80083ca:	f7f8 fbdf 	bl	8000b8c <__aeabi_d2uiz>
 80083ce:	4603      	mov	r3, r0
 80083d0:	b2db      	uxtb	r3, r3
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	f3af 8000 	nop.w
 80083e0:	fcce1c58 	.word	0xfcce1c58
 80083e4:	3f800e6a 	.word	0x3f800e6a
 80083e8:	40040000 	.word	0x40040000
 80083ec:	00000000 	.word	0x00000000

080083f0 <can1_ams_cell_voltages_v5s2_decode>:

double can1_ams_cell_voltages_v5s2_decode(uint8_t value)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80083fa:	79fb      	ldrb	r3, [r7, #7]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7f8 f873 	bl	80004e8 <__aeabi_ui2d>
 8008402:	a30e      	add	r3, pc, #56	; (adr r3, 800843c <can1_ams_cell_voltages_v5s2_decode+0x4c>)
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	f7f8 f8e8 	bl	80005dc <__aeabi_dmul>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4610      	mov	r0, r2
 8008412:	4619      	mov	r1, r3
 8008414:	f04f 0200 	mov.w	r2, #0
 8008418:	4b07      	ldr	r3, [pc, #28]	; (8008438 <can1_ams_cell_voltages_v5s2_decode+0x48>)
 800841a:	f7f7 ff29 	bl	8000270 <__adddf3>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	ec43 2b17 	vmov	d7, r2, r3
}
 8008426:	eeb0 0a47 	vmov.f32	s0, s14
 800842a:	eef0 0a67 	vmov.f32	s1, s15
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	f3af 8000 	nop.w
 8008438:	40040000 	.word	0x40040000
 800843c:	fcce1c58 	.word	0xfcce1c58
 8008440:	3f800e6a 	.word	0x3f800e6a
 8008444:	00000000 	.word	0x00000000

08008448 <can1_ams_cell_voltages_v5s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s3_encode(double value)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008452:	f04f 0200 	mov.w	r2, #0
 8008456:	4b10      	ldr	r3, [pc, #64]	; (8008498 <can1_ams_cell_voltages_v5s3_encode+0x50>)
 8008458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800845c:	f7f7 ff06 	bl	800026c <__aeabi_dsub>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4610      	mov	r0, r2
 8008466:	4619      	mov	r1, r3
 8008468:	a309      	add	r3, pc, #36	; (adr r3, 8008490 <can1_ams_cell_voltages_v5s3_encode+0x48>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	f7f8 f9df 	bl	8000830 <__aeabi_ddiv>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4610      	mov	r0, r2
 8008478:	4619      	mov	r1, r3
 800847a:	f7f8 fb87 	bl	8000b8c <__aeabi_d2uiz>
 800847e:	4603      	mov	r3, r0
 8008480:	b2db      	uxtb	r3, r3
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	f3af 8000 	nop.w
 8008490:	fcce1c58 	.word	0xfcce1c58
 8008494:	3f800e6a 	.word	0x3f800e6a
 8008498:	40040000 	.word	0x40040000
 800849c:	00000000 	.word	0x00000000

080084a0 <can1_ams_cell_voltages_v5s3_decode>:

double can1_ams_cell_voltages_v5s3_decode(uint8_t value)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	4603      	mov	r3, r0
 80084a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7f8 f81b 	bl	80004e8 <__aeabi_ui2d>
 80084b2:	a30e      	add	r3, pc, #56	; (adr r3, 80084ec <can1_ams_cell_voltages_v5s3_decode+0x4c>)
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	f7f8 f890 	bl	80005dc <__aeabi_dmul>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4610      	mov	r0, r2
 80084c2:	4619      	mov	r1, r3
 80084c4:	f04f 0200 	mov.w	r2, #0
 80084c8:	4b07      	ldr	r3, [pc, #28]	; (80084e8 <can1_ams_cell_voltages_v5s3_decode+0x48>)
 80084ca:	f7f7 fed1 	bl	8000270 <__adddf3>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80084d6:	eeb0 0a47 	vmov.f32	s0, s14
 80084da:	eef0 0a67 	vmov.f32	s1, s15
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	f3af 8000 	nop.w
 80084e8:	40040000 	.word	0x40040000
 80084ec:	fcce1c58 	.word	0xfcce1c58
 80084f0:	3f800e6a 	.word	0x3f800e6a
 80084f4:	00000000 	.word	0x00000000

080084f8 <can1_ams_cell_voltages_v11s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s3_encode(double value)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008502:	f04f 0200 	mov.w	r2, #0
 8008506:	4b10      	ldr	r3, [pc, #64]	; (8008548 <can1_ams_cell_voltages_v11s3_encode+0x50>)
 8008508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800850c:	f7f7 feae 	bl	800026c <__aeabi_dsub>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	4610      	mov	r0, r2
 8008516:	4619      	mov	r1, r3
 8008518:	a309      	add	r3, pc, #36	; (adr r3, 8008540 <can1_ams_cell_voltages_v11s3_encode+0x48>)
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	f7f8 f987 	bl	8000830 <__aeabi_ddiv>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	4610      	mov	r0, r2
 8008528:	4619      	mov	r1, r3
 800852a:	f7f8 fb2f 	bl	8000b8c <__aeabi_d2uiz>
 800852e:	4603      	mov	r3, r0
 8008530:	b2db      	uxtb	r3, r3
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	f3af 8000 	nop.w
 8008540:	fcce1c58 	.word	0xfcce1c58
 8008544:	3f800e6a 	.word	0x3f800e6a
 8008548:	40040000 	.word	0x40040000
 800854c:	00000000 	.word	0x00000000

08008550 <can1_ams_cell_voltages_v11s3_decode>:

double can1_ams_cell_voltages_v11s3_decode(uint8_t value)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	4603      	mov	r3, r0
 8008558:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800855a:	79fb      	ldrb	r3, [r7, #7]
 800855c:	4618      	mov	r0, r3
 800855e:	f7f7 ffc3 	bl	80004e8 <__aeabi_ui2d>
 8008562:	a30e      	add	r3, pc, #56	; (adr r3, 800859c <can1_ams_cell_voltages_v11s3_decode+0x4c>)
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	f7f8 f838 	bl	80005dc <__aeabi_dmul>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4610      	mov	r0, r2
 8008572:	4619      	mov	r1, r3
 8008574:	f04f 0200 	mov.w	r2, #0
 8008578:	4b07      	ldr	r3, [pc, #28]	; (8008598 <can1_ams_cell_voltages_v11s3_decode+0x48>)
 800857a:	f7f7 fe79 	bl	8000270 <__adddf3>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	ec43 2b17 	vmov	d7, r2, r3
}
 8008586:	eeb0 0a47 	vmov.f32	s0, s14
 800858a:	eef0 0a67 	vmov.f32	s1, s15
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	f3af 8000 	nop.w
 8008598:	40040000 	.word	0x40040000
 800859c:	fcce1c58 	.word	0xfcce1c58
 80085a0:	3f800e6a 	.word	0x3f800e6a
 80085a4:	00000000 	.word	0x00000000

080085a8 <can1_ams_cell_voltages_v5s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s4_encode(double value)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80085b2:	f04f 0200 	mov.w	r2, #0
 80085b6:	4b10      	ldr	r3, [pc, #64]	; (80085f8 <can1_ams_cell_voltages_v5s4_encode+0x50>)
 80085b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085bc:	f7f7 fe56 	bl	800026c <__aeabi_dsub>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	4610      	mov	r0, r2
 80085c6:	4619      	mov	r1, r3
 80085c8:	a309      	add	r3, pc, #36	; (adr r3, 80085f0 <can1_ams_cell_voltages_v5s4_encode+0x48>)
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	f7f8 f92f 	bl	8000830 <__aeabi_ddiv>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	4610      	mov	r0, r2
 80085d8:	4619      	mov	r1, r3
 80085da:	f7f8 fad7 	bl	8000b8c <__aeabi_d2uiz>
 80085de:	4603      	mov	r3, r0
 80085e0:	b2db      	uxtb	r3, r3
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	f3af 8000 	nop.w
 80085f0:	fcce1c58 	.word	0xfcce1c58
 80085f4:	3f800e6a 	.word	0x3f800e6a
 80085f8:	40040000 	.word	0x40040000
 80085fc:	00000000 	.word	0x00000000

08008600 <can1_ams_cell_voltages_v5s4_decode>:

double can1_ams_cell_voltages_v5s4_decode(uint8_t value)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	4618      	mov	r0, r3
 800860e:	f7f7 ff6b 	bl	80004e8 <__aeabi_ui2d>
 8008612:	a30e      	add	r3, pc, #56	; (adr r3, 800864c <can1_ams_cell_voltages_v5s4_decode+0x4c>)
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	f7f7 ffe0 	bl	80005dc <__aeabi_dmul>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	4610      	mov	r0, r2
 8008622:	4619      	mov	r1, r3
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	4b07      	ldr	r3, [pc, #28]	; (8008648 <can1_ams_cell_voltages_v5s4_decode+0x48>)
 800862a:	f7f7 fe21 	bl	8000270 <__adddf3>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	ec43 2b17 	vmov	d7, r2, r3
}
 8008636:	eeb0 0a47 	vmov.f32	s0, s14
 800863a:	eef0 0a67 	vmov.f32	s1, s15
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	f3af 8000 	nop.w
 8008648:	40040000 	.word	0x40040000
 800864c:	fcce1c58 	.word	0xfcce1c58
 8008650:	3f800e6a 	.word	0x3f800e6a
 8008654:	00000000 	.word	0x00000000

08008658 <can1_ams_cell_voltages_v5s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s5_encode(double value)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008662:	f04f 0200 	mov.w	r2, #0
 8008666:	4b10      	ldr	r3, [pc, #64]	; (80086a8 <can1_ams_cell_voltages_v5s5_encode+0x50>)
 8008668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800866c:	f7f7 fdfe 	bl	800026c <__aeabi_dsub>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4610      	mov	r0, r2
 8008676:	4619      	mov	r1, r3
 8008678:	a309      	add	r3, pc, #36	; (adr r3, 80086a0 <can1_ams_cell_voltages_v5s5_encode+0x48>)
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f7f8 f8d7 	bl	8000830 <__aeabi_ddiv>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4610      	mov	r0, r2
 8008688:	4619      	mov	r1, r3
 800868a:	f7f8 fa7f 	bl	8000b8c <__aeabi_d2uiz>
 800868e:	4603      	mov	r3, r0
 8008690:	b2db      	uxtb	r3, r3
}
 8008692:	4618      	mov	r0, r3
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	f3af 8000 	nop.w
 80086a0:	fcce1c58 	.word	0xfcce1c58
 80086a4:	3f800e6a 	.word	0x3f800e6a
 80086a8:	40040000 	.word	0x40040000
 80086ac:	00000000 	.word	0x00000000

080086b0 <can1_ams_cell_voltages_v5s5_decode>:

double can1_ams_cell_voltages_v5s5_decode(uint8_t value)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80086ba:	79fb      	ldrb	r3, [r7, #7]
 80086bc:	4618      	mov	r0, r3
 80086be:	f7f7 ff13 	bl	80004e8 <__aeabi_ui2d>
 80086c2:	a30e      	add	r3, pc, #56	; (adr r3, 80086fc <can1_ams_cell_voltages_v5s5_decode+0x4c>)
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	f7f7 ff88 	bl	80005dc <__aeabi_dmul>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4610      	mov	r0, r2
 80086d2:	4619      	mov	r1, r3
 80086d4:	f04f 0200 	mov.w	r2, #0
 80086d8:	4b07      	ldr	r3, [pc, #28]	; (80086f8 <can1_ams_cell_voltages_v5s5_decode+0x48>)
 80086da:	f7f7 fdc9 	bl	8000270 <__adddf3>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80086e6:	eeb0 0a47 	vmov.f32	s0, s14
 80086ea:	eef0 0a67 	vmov.f32	s1, s15
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	f3af 8000 	nop.w
 80086f8:	40040000 	.word	0x40040000
 80086fc:	fcce1c58 	.word	0xfcce1c58
 8008700:	3f800e6a 	.word	0x3f800e6a
 8008704:	00000000 	.word	0x00000000

08008708 <can1_ams_cell_voltages_v11s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s5_encode(double value)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008712:	f04f 0200 	mov.w	r2, #0
 8008716:	4b10      	ldr	r3, [pc, #64]	; (8008758 <can1_ams_cell_voltages_v11s5_encode+0x50>)
 8008718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800871c:	f7f7 fda6 	bl	800026c <__aeabi_dsub>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4610      	mov	r0, r2
 8008726:	4619      	mov	r1, r3
 8008728:	a309      	add	r3, pc, #36	; (adr r3, 8008750 <can1_ams_cell_voltages_v11s5_encode+0x48>)
 800872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872e:	f7f8 f87f 	bl	8000830 <__aeabi_ddiv>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	4610      	mov	r0, r2
 8008738:	4619      	mov	r1, r3
 800873a:	f7f8 fa27 	bl	8000b8c <__aeabi_d2uiz>
 800873e:	4603      	mov	r3, r0
 8008740:	b2db      	uxtb	r3, r3
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	f3af 8000 	nop.w
 8008750:	fcce1c58 	.word	0xfcce1c58
 8008754:	3f800e6a 	.word	0x3f800e6a
 8008758:	40040000 	.word	0x40040000
 800875c:	00000000 	.word	0x00000000

08008760 <can1_ams_cell_voltages_v11s5_decode>:

double can1_ams_cell_voltages_v11s5_decode(uint8_t value)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	4618      	mov	r0, r3
 800876e:	f7f7 febb 	bl	80004e8 <__aeabi_ui2d>
 8008772:	a30e      	add	r3, pc, #56	; (adr r3, 80087ac <can1_ams_cell_voltages_v11s5_decode+0x4c>)
 8008774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008778:	f7f7 ff30 	bl	80005dc <__aeabi_dmul>
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	4610      	mov	r0, r2
 8008782:	4619      	mov	r1, r3
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	4b07      	ldr	r3, [pc, #28]	; (80087a8 <can1_ams_cell_voltages_v11s5_decode+0x48>)
 800878a:	f7f7 fd71 	bl	8000270 <__adddf3>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	ec43 2b17 	vmov	d7, r2, r3
}
 8008796:	eeb0 0a47 	vmov.f32	s0, s14
 800879a:	eef0 0a67 	vmov.f32	s1, s15
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	f3af 8000 	nop.w
 80087a8:	40040000 	.word	0x40040000
 80087ac:	fcce1c58 	.word	0xfcce1c58
 80087b0:	3f800e6a 	.word	0x3f800e6a
 80087b4:	00000000 	.word	0x00000000

080087b8 <can1_ams_cell_voltages_v5s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s6_encode(double value)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80087c2:	f04f 0200 	mov.w	r2, #0
 80087c6:	4b10      	ldr	r3, [pc, #64]	; (8008808 <can1_ams_cell_voltages_v5s6_encode+0x50>)
 80087c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087cc:	f7f7 fd4e 	bl	800026c <__aeabi_dsub>
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	4610      	mov	r0, r2
 80087d6:	4619      	mov	r1, r3
 80087d8:	a309      	add	r3, pc, #36	; (adr r3, 8008800 <can1_ams_cell_voltages_v5s6_encode+0x48>)
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	f7f8 f827 	bl	8000830 <__aeabi_ddiv>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4610      	mov	r0, r2
 80087e8:	4619      	mov	r1, r3
 80087ea:	f7f8 f9cf 	bl	8000b8c <__aeabi_d2uiz>
 80087ee:	4603      	mov	r3, r0
 80087f0:	b2db      	uxtb	r3, r3
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	f3af 8000 	nop.w
 8008800:	fcce1c58 	.word	0xfcce1c58
 8008804:	3f800e6a 	.word	0x3f800e6a
 8008808:	40040000 	.word	0x40040000
 800880c:	00000000 	.word	0x00000000

08008810 <can1_ams_cell_voltages_v5s6_decode>:

double can1_ams_cell_voltages_v5s6_decode(uint8_t value)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800881a:	79fb      	ldrb	r3, [r7, #7]
 800881c:	4618      	mov	r0, r3
 800881e:	f7f7 fe63 	bl	80004e8 <__aeabi_ui2d>
 8008822:	a30e      	add	r3, pc, #56	; (adr r3, 800885c <can1_ams_cell_voltages_v5s6_decode+0x4c>)
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	f7f7 fed8 	bl	80005dc <__aeabi_dmul>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4610      	mov	r0, r2
 8008832:	4619      	mov	r1, r3
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	4b07      	ldr	r3, [pc, #28]	; (8008858 <can1_ams_cell_voltages_v5s6_decode+0x48>)
 800883a:	f7f7 fd19 	bl	8000270 <__adddf3>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	ec43 2b17 	vmov	d7, r2, r3
}
 8008846:	eeb0 0a47 	vmov.f32	s0, s14
 800884a:	eef0 0a67 	vmov.f32	s1, s15
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	f3af 8000 	nop.w
 8008858:	40040000 	.word	0x40040000
 800885c:	fcce1c58 	.word	0xfcce1c58
 8008860:	3f800e6a 	.word	0x3f800e6a
 8008864:	00000000 	.word	0x00000000

08008868 <can1_ams_cell_voltages_v5s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s7_encode(double value)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008872:	f04f 0200 	mov.w	r2, #0
 8008876:	4b10      	ldr	r3, [pc, #64]	; (80088b8 <can1_ams_cell_voltages_v5s7_encode+0x50>)
 8008878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800887c:	f7f7 fcf6 	bl	800026c <__aeabi_dsub>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4610      	mov	r0, r2
 8008886:	4619      	mov	r1, r3
 8008888:	a309      	add	r3, pc, #36	; (adr r3, 80088b0 <can1_ams_cell_voltages_v5s7_encode+0x48>)
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	f7f7 ffcf 	bl	8000830 <__aeabi_ddiv>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	4610      	mov	r0, r2
 8008898:	4619      	mov	r1, r3
 800889a:	f7f8 f977 	bl	8000b8c <__aeabi_d2uiz>
 800889e:	4603      	mov	r3, r0
 80088a0:	b2db      	uxtb	r3, r3
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	f3af 8000 	nop.w
 80088b0:	fcce1c58 	.word	0xfcce1c58
 80088b4:	3f800e6a 	.word	0x3f800e6a
 80088b8:	40040000 	.word	0x40040000
 80088bc:	00000000 	.word	0x00000000

080088c0 <can1_ams_cell_voltages_v5s7_decode>:

double can1_ams_cell_voltages_v5s7_decode(uint8_t value)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	4603      	mov	r3, r0
 80088c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7f7 fe0b 	bl	80004e8 <__aeabi_ui2d>
 80088d2:	a30e      	add	r3, pc, #56	; (adr r3, 800890c <can1_ams_cell_voltages_v5s7_decode+0x4c>)
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	f7f7 fe80 	bl	80005dc <__aeabi_dmul>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	4610      	mov	r0, r2
 80088e2:	4619      	mov	r1, r3
 80088e4:	f04f 0200 	mov.w	r2, #0
 80088e8:	4b07      	ldr	r3, [pc, #28]	; (8008908 <can1_ams_cell_voltages_v5s7_decode+0x48>)
 80088ea:	f7f7 fcc1 	bl	8000270 <__adddf3>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80088f6:	eeb0 0a47 	vmov.f32	s0, s14
 80088fa:	eef0 0a67 	vmov.f32	s1, s15
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	f3af 8000 	nop.w
 8008908:	40040000 	.word	0x40040000
 800890c:	fcce1c58 	.word	0xfcce1c58
 8008910:	3f800e6a 	.word	0x3f800e6a
 8008914:	00000000 	.word	0x00000000

08008918 <can1_ams_cell_voltages_v11s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s7_encode(double value)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008922:	f04f 0200 	mov.w	r2, #0
 8008926:	4b10      	ldr	r3, [pc, #64]	; (8008968 <can1_ams_cell_voltages_v11s7_encode+0x50>)
 8008928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800892c:	f7f7 fc9e 	bl	800026c <__aeabi_dsub>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4610      	mov	r0, r2
 8008936:	4619      	mov	r1, r3
 8008938:	a309      	add	r3, pc, #36	; (adr r3, 8008960 <can1_ams_cell_voltages_v11s7_encode+0x48>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	f7f7 ff77 	bl	8000830 <__aeabi_ddiv>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4610      	mov	r0, r2
 8008948:	4619      	mov	r1, r3
 800894a:	f7f8 f91f 	bl	8000b8c <__aeabi_d2uiz>
 800894e:	4603      	mov	r3, r0
 8008950:	b2db      	uxtb	r3, r3
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	f3af 8000 	nop.w
 8008960:	fcce1c58 	.word	0xfcce1c58
 8008964:	3f800e6a 	.word	0x3f800e6a
 8008968:	40040000 	.word	0x40040000
 800896c:	00000000 	.word	0x00000000

08008970 <can1_ams_cell_voltages_v11s7_decode>:

double can1_ams_cell_voltages_v11s7_decode(uint8_t value)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800897a:	79fb      	ldrb	r3, [r7, #7]
 800897c:	4618      	mov	r0, r3
 800897e:	f7f7 fdb3 	bl	80004e8 <__aeabi_ui2d>
 8008982:	a30e      	add	r3, pc, #56	; (adr r3, 80089bc <can1_ams_cell_voltages_v11s7_decode+0x4c>)
 8008984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008988:	f7f7 fe28 	bl	80005dc <__aeabi_dmul>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4610      	mov	r0, r2
 8008992:	4619      	mov	r1, r3
 8008994:	f04f 0200 	mov.w	r2, #0
 8008998:	4b07      	ldr	r3, [pc, #28]	; (80089b8 <can1_ams_cell_voltages_v11s7_decode+0x48>)
 800899a:	f7f7 fc69 	bl	8000270 <__adddf3>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80089a6:	eeb0 0a47 	vmov.f32	s0, s14
 80089aa:	eef0 0a67 	vmov.f32	s1, s15
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	f3af 8000 	nop.w
 80089b8:	40040000 	.word	0x40040000
 80089bc:	fcce1c58 	.word	0xfcce1c58
 80089c0:	3f800e6a 	.word	0x3f800e6a
 80089c4:	00000000 	.word	0x00000000

080089c8 <can1_ams_cell_voltages_v5s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s8_encode(double value)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80089d2:	f04f 0200 	mov.w	r2, #0
 80089d6:	4b10      	ldr	r3, [pc, #64]	; (8008a18 <can1_ams_cell_voltages_v5s8_encode+0x50>)
 80089d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089dc:	f7f7 fc46 	bl	800026c <__aeabi_dsub>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4610      	mov	r0, r2
 80089e6:	4619      	mov	r1, r3
 80089e8:	a309      	add	r3, pc, #36	; (adr r3, 8008a10 <can1_ams_cell_voltages_v5s8_encode+0x48>)
 80089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ee:	f7f7 ff1f 	bl	8000830 <__aeabi_ddiv>
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	4610      	mov	r0, r2
 80089f8:	4619      	mov	r1, r3
 80089fa:	f7f8 f8c7 	bl	8000b8c <__aeabi_d2uiz>
 80089fe:	4603      	mov	r3, r0
 8008a00:	b2db      	uxtb	r3, r3
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	f3af 8000 	nop.w
 8008a10:	fcce1c58 	.word	0xfcce1c58
 8008a14:	3f800e6a 	.word	0x3f800e6a
 8008a18:	40040000 	.word	0x40040000
 8008a1c:	00000000 	.word	0x00000000

08008a20 <can1_ams_cell_voltages_v5s8_decode>:

double can1_ams_cell_voltages_v5s8_decode(uint8_t value)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008a2a:	79fb      	ldrb	r3, [r7, #7]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7f7 fd5b 	bl	80004e8 <__aeabi_ui2d>
 8008a32:	a30e      	add	r3, pc, #56	; (adr r3, 8008a6c <can1_ams_cell_voltages_v5s8_decode+0x4c>)
 8008a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a38:	f7f7 fdd0 	bl	80005dc <__aeabi_dmul>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4610      	mov	r0, r2
 8008a42:	4619      	mov	r1, r3
 8008a44:	f04f 0200 	mov.w	r2, #0
 8008a48:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <can1_ams_cell_voltages_v5s8_decode+0x48>)
 8008a4a:	f7f7 fc11 	bl	8000270 <__adddf3>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	ec43 2b17 	vmov	d7, r2, r3
}
 8008a56:	eeb0 0a47 	vmov.f32	s0, s14
 8008a5a:	eef0 0a67 	vmov.f32	s1, s15
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	f3af 8000 	nop.w
 8008a68:	40040000 	.word	0x40040000
 8008a6c:	fcce1c58 	.word	0xfcce1c58
 8008a70:	3f800e6a 	.word	0x3f800e6a
 8008a74:	00000000 	.word	0x00000000

08008a78 <can1_ams_cell_voltages_v5s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s9_encode(double value)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008a82:	f04f 0200 	mov.w	r2, #0
 8008a86:	4b10      	ldr	r3, [pc, #64]	; (8008ac8 <can1_ams_cell_voltages_v5s9_encode+0x50>)
 8008a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a8c:	f7f7 fbee 	bl	800026c <__aeabi_dsub>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4610      	mov	r0, r2
 8008a96:	4619      	mov	r1, r3
 8008a98:	a309      	add	r3, pc, #36	; (adr r3, 8008ac0 <can1_ams_cell_voltages_v5s9_encode+0x48>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fec7 	bl	8000830 <__aeabi_ddiv>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4610      	mov	r0, r2
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	f7f8 f86f 	bl	8000b8c <__aeabi_d2uiz>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	b2db      	uxtb	r3, r3
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	f3af 8000 	nop.w
 8008ac0:	fcce1c58 	.word	0xfcce1c58
 8008ac4:	3f800e6a 	.word	0x3f800e6a
 8008ac8:	40040000 	.word	0x40040000
 8008acc:	00000000 	.word	0x00000000

08008ad0 <can1_ams_cell_voltages_v5s9_decode>:

double can1_ams_cell_voltages_v5s9_decode(uint8_t value)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7f7 fd03 	bl	80004e8 <__aeabi_ui2d>
 8008ae2:	a30e      	add	r3, pc, #56	; (adr r3, 8008b1c <can1_ams_cell_voltages_v5s9_decode+0x4c>)
 8008ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae8:	f7f7 fd78 	bl	80005dc <__aeabi_dmul>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4610      	mov	r0, r2
 8008af2:	4619      	mov	r1, r3
 8008af4:	f04f 0200 	mov.w	r2, #0
 8008af8:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <can1_ams_cell_voltages_v5s9_decode+0x48>)
 8008afa:	f7f7 fbb9 	bl	8000270 <__adddf3>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	ec43 2b17 	vmov	d7, r2, r3
}
 8008b06:	eeb0 0a47 	vmov.f32	s0, s14
 8008b0a:	eef0 0a67 	vmov.f32	s1, s15
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	f3af 8000 	nop.w
 8008b18:	40040000 	.word	0x40040000
 8008b1c:	fcce1c58 	.word	0xfcce1c58
 8008b20:	3f800e6a 	.word	0x3f800e6a
 8008b24:	00000000 	.word	0x00000000

08008b28 <can1_ams_cell_voltages_v11s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s9_encode(double value)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008b32:	f04f 0200 	mov.w	r2, #0
 8008b36:	4b10      	ldr	r3, [pc, #64]	; (8008b78 <can1_ams_cell_voltages_v11s9_encode+0x50>)
 8008b38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b3c:	f7f7 fb96 	bl	800026c <__aeabi_dsub>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4610      	mov	r0, r2
 8008b46:	4619      	mov	r1, r3
 8008b48:	a309      	add	r3, pc, #36	; (adr r3, 8008b70 <can1_ams_cell_voltages_v11s9_encode+0x48>)
 8008b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4e:	f7f7 fe6f 	bl	8000830 <__aeabi_ddiv>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	4610      	mov	r0, r2
 8008b58:	4619      	mov	r1, r3
 8008b5a:	f7f8 f817 	bl	8000b8c <__aeabi_d2uiz>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	b2db      	uxtb	r3, r3
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	f3af 8000 	nop.w
 8008b70:	fcce1c58 	.word	0xfcce1c58
 8008b74:	3f800e6a 	.word	0x3f800e6a
 8008b78:	40040000 	.word	0x40040000
 8008b7c:	00000000 	.word	0x00000000

08008b80 <can1_ams_cell_voltages_v11s9_decode>:

double can1_ams_cell_voltages_v11s9_decode(uint8_t value)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	4603      	mov	r3, r0
 8008b88:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008b8a:	79fb      	ldrb	r3, [r7, #7]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7f7 fcab 	bl	80004e8 <__aeabi_ui2d>
 8008b92:	a30e      	add	r3, pc, #56	; (adr r3, 8008bcc <can1_ams_cell_voltages_v11s9_decode+0x4c>)
 8008b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b98:	f7f7 fd20 	bl	80005dc <__aeabi_dmul>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	f04f 0200 	mov.w	r2, #0
 8008ba8:	4b07      	ldr	r3, [pc, #28]	; (8008bc8 <can1_ams_cell_voltages_v11s9_decode+0x48>)
 8008baa:	f7f7 fb61 	bl	8000270 <__adddf3>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	ec43 2b17 	vmov	d7, r2, r3
}
 8008bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8008bba:	eef0 0a67 	vmov.f32	s1, s15
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	f3af 8000 	nop.w
 8008bc8:	40040000 	.word	0x40040000
 8008bcc:	fcce1c58 	.word	0xfcce1c58
 8008bd0:	3f800e6a 	.word	0x3f800e6a
 8008bd4:	00000000 	.word	0x00000000

08008bd8 <can1_ams_cell_voltages_v5s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s10_encode(double value)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008be2:	f04f 0200 	mov.w	r2, #0
 8008be6:	4b10      	ldr	r3, [pc, #64]	; (8008c28 <can1_ams_cell_voltages_v5s10_encode+0x50>)
 8008be8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bec:	f7f7 fb3e 	bl	800026c <__aeabi_dsub>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	a309      	add	r3, pc, #36	; (adr r3, 8008c20 <can1_ams_cell_voltages_v5s10_encode+0x48>)
 8008bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfe:	f7f7 fe17 	bl	8000830 <__aeabi_ddiv>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4610      	mov	r0, r2
 8008c08:	4619      	mov	r1, r3
 8008c0a:	f7f7 ffbf 	bl	8000b8c <__aeabi_d2uiz>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	b2db      	uxtb	r3, r3
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	f3af 8000 	nop.w
 8008c20:	fcce1c58 	.word	0xfcce1c58
 8008c24:	3f800e6a 	.word	0x3f800e6a
 8008c28:	40040000 	.word	0x40040000
 8008c2c:	00000000 	.word	0x00000000

08008c30 <can1_ams_cell_voltages_v5s10_decode>:

double can1_ams_cell_voltages_v5s10_decode(uint8_t value)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4603      	mov	r3, r0
 8008c38:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008c3a:	79fb      	ldrb	r3, [r7, #7]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7f7 fc53 	bl	80004e8 <__aeabi_ui2d>
 8008c42:	a30e      	add	r3, pc, #56	; (adr r3, 8008c7c <can1_ams_cell_voltages_v5s10_decode+0x4c>)
 8008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c48:	f7f7 fcc8 	bl	80005dc <__aeabi_dmul>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4610      	mov	r0, r2
 8008c52:	4619      	mov	r1, r3
 8008c54:	f04f 0200 	mov.w	r2, #0
 8008c58:	4b07      	ldr	r3, [pc, #28]	; (8008c78 <can1_ams_cell_voltages_v5s10_decode+0x48>)
 8008c5a:	f7f7 fb09 	bl	8000270 <__adddf3>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	ec43 2b17 	vmov	d7, r2, r3
}
 8008c66:	eeb0 0a47 	vmov.f32	s0, s14
 8008c6a:	eef0 0a67 	vmov.f32	s1, s15
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	f3af 8000 	nop.w
 8008c78:	40040000 	.word	0x40040000
 8008c7c:	fcce1c58 	.word	0xfcce1c58
 8008c80:	3f800e6a 	.word	0x3f800e6a
 8008c84:	00000000 	.word	0x00000000

08008c88 <can1_ams_cell_voltages_v5s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s11_encode(double value)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008c92:	f04f 0200 	mov.w	r2, #0
 8008c96:	4b10      	ldr	r3, [pc, #64]	; (8008cd8 <can1_ams_cell_voltages_v5s11_encode+0x50>)
 8008c98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c9c:	f7f7 fae6 	bl	800026c <__aeabi_dsub>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	a309      	add	r3, pc, #36	; (adr r3, 8008cd0 <can1_ams_cell_voltages_v5s11_encode+0x48>)
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	f7f7 fdbf 	bl	8000830 <__aeabi_ddiv>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	4619      	mov	r1, r3
 8008cba:	f7f7 ff67 	bl	8000b8c <__aeabi_d2uiz>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	b2db      	uxtb	r3, r3
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	f3af 8000 	nop.w
 8008cd0:	fcce1c58 	.word	0xfcce1c58
 8008cd4:	3f800e6a 	.word	0x3f800e6a
 8008cd8:	40040000 	.word	0x40040000
 8008cdc:	00000000 	.word	0x00000000

08008ce0 <can1_ams_cell_voltages_v5s11_decode>:

double can1_ams_cell_voltages_v5s11_decode(uint8_t value)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008cea:	79fb      	ldrb	r3, [r7, #7]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7f7 fbfb 	bl	80004e8 <__aeabi_ui2d>
 8008cf2:	a30e      	add	r3, pc, #56	; (adr r3, 8008d2c <can1_ams_cell_voltages_v5s11_decode+0x4c>)
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	f7f7 fc70 	bl	80005dc <__aeabi_dmul>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4610      	mov	r0, r2
 8008d02:	4619      	mov	r1, r3
 8008d04:	f04f 0200 	mov.w	r2, #0
 8008d08:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <can1_ams_cell_voltages_v5s11_decode+0x48>)
 8008d0a:	f7f7 fab1 	bl	8000270 <__adddf3>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	ec43 2b17 	vmov	d7, r2, r3
}
 8008d16:	eeb0 0a47 	vmov.f32	s0, s14
 8008d1a:	eef0 0a67 	vmov.f32	s1, s15
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	f3af 8000 	nop.w
 8008d28:	40040000 	.word	0x40040000
 8008d2c:	fcce1c58 	.word	0xfcce1c58
 8008d30:	3f800e6a 	.word	0x3f800e6a
 8008d34:	00000000 	.word	0x00000000

08008d38 <can1_ams_cell_voltages_v11s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s11_encode(double value)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008d42:	f04f 0200 	mov.w	r2, #0
 8008d46:	4b10      	ldr	r3, [pc, #64]	; (8008d88 <can1_ams_cell_voltages_v11s11_encode+0x50>)
 8008d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d4c:	f7f7 fa8e 	bl	800026c <__aeabi_dsub>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	4610      	mov	r0, r2
 8008d56:	4619      	mov	r1, r3
 8008d58:	a309      	add	r3, pc, #36	; (adr r3, 8008d80 <can1_ams_cell_voltages_v11s11_encode+0x48>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	f7f7 fd67 	bl	8000830 <__aeabi_ddiv>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4610      	mov	r0, r2
 8008d68:	4619      	mov	r1, r3
 8008d6a:	f7f7 ff0f 	bl	8000b8c <__aeabi_d2uiz>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	b2db      	uxtb	r3, r3
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	f3af 8000 	nop.w
 8008d80:	fcce1c58 	.word	0xfcce1c58
 8008d84:	3f800e6a 	.word	0x3f800e6a
 8008d88:	40040000 	.word	0x40040000
 8008d8c:	00000000 	.word	0x00000000

08008d90 <can1_ams_cell_voltages_v11s11_decode>:

double can1_ams_cell_voltages_v11s11_decode(uint8_t value)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	4603      	mov	r3, r0
 8008d98:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008d9a:	79fb      	ldrb	r3, [r7, #7]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7f7 fba3 	bl	80004e8 <__aeabi_ui2d>
 8008da2:	a30e      	add	r3, pc, #56	; (adr r3, 8008ddc <can1_ams_cell_voltages_v11s11_decode+0x4c>)
 8008da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da8:	f7f7 fc18 	bl	80005dc <__aeabi_dmul>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4610      	mov	r0, r2
 8008db2:	4619      	mov	r1, r3
 8008db4:	f04f 0200 	mov.w	r2, #0
 8008db8:	4b07      	ldr	r3, [pc, #28]	; (8008dd8 <can1_ams_cell_voltages_v11s11_decode+0x48>)
 8008dba:	f7f7 fa59 	bl	8000270 <__adddf3>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	ec43 2b17 	vmov	d7, r2, r3
}
 8008dc6:	eeb0 0a47 	vmov.f32	s0, s14
 8008dca:	eef0 0a67 	vmov.f32	s1, s15
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	f3af 8000 	nop.w
 8008dd8:	40040000 	.word	0x40040000
 8008ddc:	fcce1c58 	.word	0xfcce1c58
 8008de0:	3f800e6a 	.word	0x3f800e6a
 8008de4:	00000000 	.word	0x00000000

08008de8 <can1_ams_cell_voltages_v5s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s12_encode(double value)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008df2:	f04f 0200 	mov.w	r2, #0
 8008df6:	4b10      	ldr	r3, [pc, #64]	; (8008e38 <can1_ams_cell_voltages_v5s12_encode+0x50>)
 8008df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dfc:	f7f7 fa36 	bl	800026c <__aeabi_dsub>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4610      	mov	r0, r2
 8008e06:	4619      	mov	r1, r3
 8008e08:	a309      	add	r3, pc, #36	; (adr r3, 8008e30 <can1_ams_cell_voltages_v5s12_encode+0x48>)
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	f7f7 fd0f 	bl	8000830 <__aeabi_ddiv>
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	4610      	mov	r0, r2
 8008e18:	4619      	mov	r1, r3
 8008e1a:	f7f7 feb7 	bl	8000b8c <__aeabi_d2uiz>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	b2db      	uxtb	r3, r3
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	f3af 8000 	nop.w
 8008e30:	fcce1c58 	.word	0xfcce1c58
 8008e34:	3f800e6a 	.word	0x3f800e6a
 8008e38:	40040000 	.word	0x40040000
 8008e3c:	00000000 	.word	0x00000000

08008e40 <can1_ams_cell_voltages_v5s12_decode>:

double can1_ams_cell_voltages_v5s12_decode(uint8_t value)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008e4a:	79fb      	ldrb	r3, [r7, #7]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7f7 fb4b 	bl	80004e8 <__aeabi_ui2d>
 8008e52:	a30e      	add	r3, pc, #56	; (adr r3, 8008e8c <can1_ams_cell_voltages_v5s12_decode+0x4c>)
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f7f7 fbc0 	bl	80005dc <__aeabi_dmul>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4610      	mov	r0, r2
 8008e62:	4619      	mov	r1, r3
 8008e64:	f04f 0200 	mov.w	r2, #0
 8008e68:	4b07      	ldr	r3, [pc, #28]	; (8008e88 <can1_ams_cell_voltages_v5s12_decode+0x48>)
 8008e6a:	f7f7 fa01 	bl	8000270 <__adddf3>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	ec43 2b17 	vmov	d7, r2, r3
}
 8008e76:	eeb0 0a47 	vmov.f32	s0, s14
 8008e7a:	eef0 0a67 	vmov.f32	s1, s15
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	f3af 8000 	nop.w
 8008e88:	40040000 	.word	0x40040000
 8008e8c:	fcce1c58 	.word	0xfcce1c58
 8008e90:	3f800e6a 	.word	0x3f800e6a
 8008e94:	00000000 	.word	0x00000000

08008e98 <can1_ams_cell_voltages_v6s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s1_encode(double value)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008ea2:	f04f 0200 	mov.w	r2, #0
 8008ea6:	4b10      	ldr	r3, [pc, #64]	; (8008ee8 <can1_ams_cell_voltages_v6s1_encode+0x50>)
 8008ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eac:	f7f7 f9de 	bl	800026c <__aeabi_dsub>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4610      	mov	r0, r2
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	a309      	add	r3, pc, #36	; (adr r3, 8008ee0 <can1_ams_cell_voltages_v6s1_encode+0x48>)
 8008eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebe:	f7f7 fcb7 	bl	8000830 <__aeabi_ddiv>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	4619      	mov	r1, r3
 8008eca:	f7f7 fe5f 	bl	8000b8c <__aeabi_d2uiz>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	b2db      	uxtb	r3, r3
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	f3af 8000 	nop.w
 8008ee0:	fcce1c58 	.word	0xfcce1c58
 8008ee4:	3f800e6a 	.word	0x3f800e6a
 8008ee8:	40040000 	.word	0x40040000
 8008eec:	00000000 	.word	0x00000000

08008ef0 <can1_ams_cell_voltages_v6s1_decode>:

double can1_ams_cell_voltages_v6s1_decode(uint8_t value)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008efa:	79fb      	ldrb	r3, [r7, #7]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7f7 faf3 	bl	80004e8 <__aeabi_ui2d>
 8008f02:	a30e      	add	r3, pc, #56	; (adr r3, 8008f3c <can1_ams_cell_voltages_v6s1_decode+0x4c>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	f7f7 fb68 	bl	80005dc <__aeabi_dmul>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4610      	mov	r0, r2
 8008f12:	4619      	mov	r1, r3
 8008f14:	f04f 0200 	mov.w	r2, #0
 8008f18:	4b07      	ldr	r3, [pc, #28]	; (8008f38 <can1_ams_cell_voltages_v6s1_decode+0x48>)
 8008f1a:	f7f7 f9a9 	bl	8000270 <__adddf3>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	ec43 2b17 	vmov	d7, r2, r3
}
 8008f26:	eeb0 0a47 	vmov.f32	s0, s14
 8008f2a:	eef0 0a67 	vmov.f32	s1, s15
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	f3af 8000 	nop.w
 8008f38:	40040000 	.word	0x40040000
 8008f3c:	fcce1c58 	.word	0xfcce1c58
 8008f40:	3f800e6a 	.word	0x3f800e6a
 8008f44:	00000000 	.word	0x00000000

08008f48 <can1_ams_cell_voltages_v6s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s2_encode(double value)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008f52:	f04f 0200 	mov.w	r2, #0
 8008f56:	4b10      	ldr	r3, [pc, #64]	; (8008f98 <can1_ams_cell_voltages_v6s2_encode+0x50>)
 8008f58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f5c:	f7f7 f986 	bl	800026c <__aeabi_dsub>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4610      	mov	r0, r2
 8008f66:	4619      	mov	r1, r3
 8008f68:	a309      	add	r3, pc, #36	; (adr r3, 8008f90 <can1_ams_cell_voltages_v6s2_encode+0x48>)
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	f7f7 fc5f 	bl	8000830 <__aeabi_ddiv>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	4610      	mov	r0, r2
 8008f78:	4619      	mov	r1, r3
 8008f7a:	f7f7 fe07 	bl	8000b8c <__aeabi_d2uiz>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	b2db      	uxtb	r3, r3
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	f3af 8000 	nop.w
 8008f90:	fcce1c58 	.word	0xfcce1c58
 8008f94:	3f800e6a 	.word	0x3f800e6a
 8008f98:	40040000 	.word	0x40040000
 8008f9c:	00000000 	.word	0x00000000

08008fa0 <can1_ams_cell_voltages_v6s2_decode>:

double can1_ams_cell_voltages_v6s2_decode(uint8_t value)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7f7 fa9b 	bl	80004e8 <__aeabi_ui2d>
 8008fb2:	a30e      	add	r3, pc, #56	; (adr r3, 8008fec <can1_ams_cell_voltages_v6s2_decode+0x4c>)
 8008fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb8:	f7f7 fb10 	bl	80005dc <__aeabi_dmul>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	f04f 0200 	mov.w	r2, #0
 8008fc8:	4b07      	ldr	r3, [pc, #28]	; (8008fe8 <can1_ams_cell_voltages_v6s2_decode+0x48>)
 8008fca:	f7f7 f951 	bl	8000270 <__adddf3>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	ec43 2b17 	vmov	d7, r2, r3
}
 8008fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8008fda:	eef0 0a67 	vmov.f32	s1, s15
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	f3af 8000 	nop.w
 8008fe8:	40040000 	.word	0x40040000
 8008fec:	fcce1c58 	.word	0xfcce1c58
 8008ff0:	3f800e6a 	.word	0x3f800e6a
 8008ff4:	00000000 	.word	0x00000000

08008ff8 <can1_ams_cell_voltages_v6s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s3_encode(double value)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009002:	f04f 0200 	mov.w	r2, #0
 8009006:	4b10      	ldr	r3, [pc, #64]	; (8009048 <can1_ams_cell_voltages_v6s3_encode+0x50>)
 8009008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800900c:	f7f7 f92e 	bl	800026c <__aeabi_dsub>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	4610      	mov	r0, r2
 8009016:	4619      	mov	r1, r3
 8009018:	a309      	add	r3, pc, #36	; (adr r3, 8009040 <can1_ams_cell_voltages_v6s3_encode+0x48>)
 800901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901e:	f7f7 fc07 	bl	8000830 <__aeabi_ddiv>
 8009022:	4602      	mov	r2, r0
 8009024:	460b      	mov	r3, r1
 8009026:	4610      	mov	r0, r2
 8009028:	4619      	mov	r1, r3
 800902a:	f7f7 fdaf 	bl	8000b8c <__aeabi_d2uiz>
 800902e:	4603      	mov	r3, r0
 8009030:	b2db      	uxtb	r3, r3
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	f3af 8000 	nop.w
 8009040:	fcce1c58 	.word	0xfcce1c58
 8009044:	3f800e6a 	.word	0x3f800e6a
 8009048:	40040000 	.word	0x40040000
 800904c:	00000000 	.word	0x00000000

08009050 <can1_ams_cell_voltages_v6s3_decode>:

double can1_ams_cell_voltages_v6s3_decode(uint8_t value)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800905a:	79fb      	ldrb	r3, [r7, #7]
 800905c:	4618      	mov	r0, r3
 800905e:	f7f7 fa43 	bl	80004e8 <__aeabi_ui2d>
 8009062:	a30e      	add	r3, pc, #56	; (adr r3, 800909c <can1_ams_cell_voltages_v6s3_decode+0x4c>)
 8009064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009068:	f7f7 fab8 	bl	80005dc <__aeabi_dmul>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4610      	mov	r0, r2
 8009072:	4619      	mov	r1, r3
 8009074:	f04f 0200 	mov.w	r2, #0
 8009078:	4b07      	ldr	r3, [pc, #28]	; (8009098 <can1_ams_cell_voltages_v6s3_decode+0x48>)
 800907a:	f7f7 f8f9 	bl	8000270 <__adddf3>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	ec43 2b17 	vmov	d7, r2, r3
}
 8009086:	eeb0 0a47 	vmov.f32	s0, s14
 800908a:	eef0 0a67 	vmov.f32	s1, s15
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	f3af 8000 	nop.w
 8009098:	40040000 	.word	0x40040000
 800909c:	fcce1c58 	.word	0xfcce1c58
 80090a0:	3f800e6a 	.word	0x3f800e6a
 80090a4:	00000000 	.word	0x00000000

080090a8 <can1_ams_cell_voltages_v6s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s4_encode(double value)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80090b2:	f04f 0200 	mov.w	r2, #0
 80090b6:	4b10      	ldr	r3, [pc, #64]	; (80090f8 <can1_ams_cell_voltages_v6s4_encode+0x50>)
 80090b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090bc:	f7f7 f8d6 	bl	800026c <__aeabi_dsub>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4610      	mov	r0, r2
 80090c6:	4619      	mov	r1, r3
 80090c8:	a309      	add	r3, pc, #36	; (adr r3, 80090f0 <can1_ams_cell_voltages_v6s4_encode+0x48>)
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	f7f7 fbaf 	bl	8000830 <__aeabi_ddiv>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	4610      	mov	r0, r2
 80090d8:	4619      	mov	r1, r3
 80090da:	f7f7 fd57 	bl	8000b8c <__aeabi_d2uiz>
 80090de:	4603      	mov	r3, r0
 80090e0:	b2db      	uxtb	r3, r3
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	f3af 8000 	nop.w
 80090f0:	fcce1c58 	.word	0xfcce1c58
 80090f4:	3f800e6a 	.word	0x3f800e6a
 80090f8:	40040000 	.word	0x40040000
 80090fc:	00000000 	.word	0x00000000

08009100 <can1_ams_cell_voltages_v6s4_decode>:

double can1_ams_cell_voltages_v6s4_decode(uint8_t value)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	4603      	mov	r3, r0
 8009108:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800910a:	79fb      	ldrb	r3, [r7, #7]
 800910c:	4618      	mov	r0, r3
 800910e:	f7f7 f9eb 	bl	80004e8 <__aeabi_ui2d>
 8009112:	a30e      	add	r3, pc, #56	; (adr r3, 800914c <can1_ams_cell_voltages_v6s4_decode+0x4c>)
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	f7f7 fa60 	bl	80005dc <__aeabi_dmul>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4610      	mov	r0, r2
 8009122:	4619      	mov	r1, r3
 8009124:	f04f 0200 	mov.w	r2, #0
 8009128:	4b07      	ldr	r3, [pc, #28]	; (8009148 <can1_ams_cell_voltages_v6s4_decode+0x48>)
 800912a:	f7f7 f8a1 	bl	8000270 <__adddf3>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	ec43 2b17 	vmov	d7, r2, r3
}
 8009136:	eeb0 0a47 	vmov.f32	s0, s14
 800913a:	eef0 0a67 	vmov.f32	s1, s15
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	f3af 8000 	nop.w
 8009148:	40040000 	.word	0x40040000
 800914c:	fcce1c58 	.word	0xfcce1c58
 8009150:	3f800e6a 	.word	0x3f800e6a
 8009154:	00000000 	.word	0x00000000

08009158 <can1_ams_cell_voltages_v6s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s5_encode(double value)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009162:	f04f 0200 	mov.w	r2, #0
 8009166:	4b10      	ldr	r3, [pc, #64]	; (80091a8 <can1_ams_cell_voltages_v6s5_encode+0x50>)
 8009168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800916c:	f7f7 f87e 	bl	800026c <__aeabi_dsub>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4610      	mov	r0, r2
 8009176:	4619      	mov	r1, r3
 8009178:	a309      	add	r3, pc, #36	; (adr r3, 80091a0 <can1_ams_cell_voltages_v6s5_encode+0x48>)
 800917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917e:	f7f7 fb57 	bl	8000830 <__aeabi_ddiv>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4610      	mov	r0, r2
 8009188:	4619      	mov	r1, r3
 800918a:	f7f7 fcff 	bl	8000b8c <__aeabi_d2uiz>
 800918e:	4603      	mov	r3, r0
 8009190:	b2db      	uxtb	r3, r3
}
 8009192:	4618      	mov	r0, r3
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	f3af 8000 	nop.w
 80091a0:	fcce1c58 	.word	0xfcce1c58
 80091a4:	3f800e6a 	.word	0x3f800e6a
 80091a8:	40040000 	.word	0x40040000
 80091ac:	00000000 	.word	0x00000000

080091b0 <can1_ams_cell_voltages_v6s5_decode>:

double can1_ams_cell_voltages_v6s5_decode(uint8_t value)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	4618      	mov	r0, r3
 80091be:	f7f7 f993 	bl	80004e8 <__aeabi_ui2d>
 80091c2:	a30e      	add	r3, pc, #56	; (adr r3, 80091fc <can1_ams_cell_voltages_v6s5_decode+0x4c>)
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	f7f7 fa08 	bl	80005dc <__aeabi_dmul>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	4610      	mov	r0, r2
 80091d2:	4619      	mov	r1, r3
 80091d4:	f04f 0200 	mov.w	r2, #0
 80091d8:	4b07      	ldr	r3, [pc, #28]	; (80091f8 <can1_ams_cell_voltages_v6s5_decode+0x48>)
 80091da:	f7f7 f849 	bl	8000270 <__adddf3>
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80091e6:	eeb0 0a47 	vmov.f32	s0, s14
 80091ea:	eef0 0a67 	vmov.f32	s1, s15
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	f3af 8000 	nop.w
 80091f8:	40040000 	.word	0x40040000
 80091fc:	fcce1c58 	.word	0xfcce1c58
 8009200:	3f800e6a 	.word	0x3f800e6a
 8009204:	00000000 	.word	0x00000000

08009208 <can1_ams_cell_voltages_v6s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s6_encode(double value)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009212:	f04f 0200 	mov.w	r2, #0
 8009216:	4b10      	ldr	r3, [pc, #64]	; (8009258 <can1_ams_cell_voltages_v6s6_encode+0x50>)
 8009218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800921c:	f7f7 f826 	bl	800026c <__aeabi_dsub>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4610      	mov	r0, r2
 8009226:	4619      	mov	r1, r3
 8009228:	a309      	add	r3, pc, #36	; (adr r3, 8009250 <can1_ams_cell_voltages_v6s6_encode+0x48>)
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	f7f7 faff 	bl	8000830 <__aeabi_ddiv>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	4610      	mov	r0, r2
 8009238:	4619      	mov	r1, r3
 800923a:	f7f7 fca7 	bl	8000b8c <__aeabi_d2uiz>
 800923e:	4603      	mov	r3, r0
 8009240:	b2db      	uxtb	r3, r3
}
 8009242:	4618      	mov	r0, r3
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	f3af 8000 	nop.w
 8009250:	fcce1c58 	.word	0xfcce1c58
 8009254:	3f800e6a 	.word	0x3f800e6a
 8009258:	40040000 	.word	0x40040000
 800925c:	00000000 	.word	0x00000000

08009260 <can1_ams_cell_voltages_v6s6_decode>:

double can1_ams_cell_voltages_v6s6_decode(uint8_t value)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800926a:	79fb      	ldrb	r3, [r7, #7]
 800926c:	4618      	mov	r0, r3
 800926e:	f7f7 f93b 	bl	80004e8 <__aeabi_ui2d>
 8009272:	a30e      	add	r3, pc, #56	; (adr r3, 80092ac <can1_ams_cell_voltages_v6s6_decode+0x4c>)
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	f7f7 f9b0 	bl	80005dc <__aeabi_dmul>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4610      	mov	r0, r2
 8009282:	4619      	mov	r1, r3
 8009284:	f04f 0200 	mov.w	r2, #0
 8009288:	4b07      	ldr	r3, [pc, #28]	; (80092a8 <can1_ams_cell_voltages_v6s6_decode+0x48>)
 800928a:	f7f6 fff1 	bl	8000270 <__adddf3>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	ec43 2b17 	vmov	d7, r2, r3
}
 8009296:	eeb0 0a47 	vmov.f32	s0, s14
 800929a:	eef0 0a67 	vmov.f32	s1, s15
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	f3af 8000 	nop.w
 80092a8:	40040000 	.word	0x40040000
 80092ac:	fcce1c58 	.word	0xfcce1c58
 80092b0:	3f800e6a 	.word	0x3f800e6a
 80092b4:	00000000 	.word	0x00000000

080092b8 <can1_ams_cell_voltages_v6s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s7_encode(double value)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80092c2:	f04f 0200 	mov.w	r2, #0
 80092c6:	4b10      	ldr	r3, [pc, #64]	; (8009308 <can1_ams_cell_voltages_v6s7_encode+0x50>)
 80092c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092cc:	f7f6 ffce 	bl	800026c <__aeabi_dsub>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4610      	mov	r0, r2
 80092d6:	4619      	mov	r1, r3
 80092d8:	a309      	add	r3, pc, #36	; (adr r3, 8009300 <can1_ams_cell_voltages_v6s7_encode+0x48>)
 80092da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092de:	f7f7 faa7 	bl	8000830 <__aeabi_ddiv>
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	4610      	mov	r0, r2
 80092e8:	4619      	mov	r1, r3
 80092ea:	f7f7 fc4f 	bl	8000b8c <__aeabi_d2uiz>
 80092ee:	4603      	mov	r3, r0
 80092f0:	b2db      	uxtb	r3, r3
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	f3af 8000 	nop.w
 8009300:	fcce1c58 	.word	0xfcce1c58
 8009304:	3f800e6a 	.word	0x3f800e6a
 8009308:	40040000 	.word	0x40040000
 800930c:	00000000 	.word	0x00000000

08009310 <can1_ams_cell_voltages_v6s7_decode>:

double can1_ams_cell_voltages_v6s7_decode(uint8_t value)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	4603      	mov	r3, r0
 8009318:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800931a:	79fb      	ldrb	r3, [r7, #7]
 800931c:	4618      	mov	r0, r3
 800931e:	f7f7 f8e3 	bl	80004e8 <__aeabi_ui2d>
 8009322:	a30e      	add	r3, pc, #56	; (adr r3, 800935c <can1_ams_cell_voltages_v6s7_decode+0x4c>)
 8009324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009328:	f7f7 f958 	bl	80005dc <__aeabi_dmul>
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	4610      	mov	r0, r2
 8009332:	4619      	mov	r1, r3
 8009334:	f04f 0200 	mov.w	r2, #0
 8009338:	4b07      	ldr	r3, [pc, #28]	; (8009358 <can1_ams_cell_voltages_v6s7_decode+0x48>)
 800933a:	f7f6 ff99 	bl	8000270 <__adddf3>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	ec43 2b17 	vmov	d7, r2, r3
}
 8009346:	eeb0 0a47 	vmov.f32	s0, s14
 800934a:	eef0 0a67 	vmov.f32	s1, s15
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	f3af 8000 	nop.w
 8009358:	40040000 	.word	0x40040000
 800935c:	fcce1c58 	.word	0xfcce1c58
 8009360:	3f800e6a 	.word	0x3f800e6a
 8009364:	00000000 	.word	0x00000000

08009368 <can1_ams_cell_voltages_v6s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s8_encode(double value)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009372:	f04f 0200 	mov.w	r2, #0
 8009376:	4b10      	ldr	r3, [pc, #64]	; (80093b8 <can1_ams_cell_voltages_v6s8_encode+0x50>)
 8009378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800937c:	f7f6 ff76 	bl	800026c <__aeabi_dsub>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	4610      	mov	r0, r2
 8009386:	4619      	mov	r1, r3
 8009388:	a309      	add	r3, pc, #36	; (adr r3, 80093b0 <can1_ams_cell_voltages_v6s8_encode+0x48>)
 800938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938e:	f7f7 fa4f 	bl	8000830 <__aeabi_ddiv>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	4610      	mov	r0, r2
 8009398:	4619      	mov	r1, r3
 800939a:	f7f7 fbf7 	bl	8000b8c <__aeabi_d2uiz>
 800939e:	4603      	mov	r3, r0
 80093a0:	b2db      	uxtb	r3, r3
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	f3af 8000 	nop.w
 80093b0:	fcce1c58 	.word	0xfcce1c58
 80093b4:	3f800e6a 	.word	0x3f800e6a
 80093b8:	40040000 	.word	0x40040000
 80093bc:	00000000 	.word	0x00000000

080093c0 <can1_ams_cell_voltages_v6s8_decode>:

double can1_ams_cell_voltages_v6s8_decode(uint8_t value)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80093ca:	79fb      	ldrb	r3, [r7, #7]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7f7 f88b 	bl	80004e8 <__aeabi_ui2d>
 80093d2:	a30e      	add	r3, pc, #56	; (adr r3, 800940c <can1_ams_cell_voltages_v6s8_decode+0x4c>)
 80093d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d8:	f7f7 f900 	bl	80005dc <__aeabi_dmul>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4610      	mov	r0, r2
 80093e2:	4619      	mov	r1, r3
 80093e4:	f04f 0200 	mov.w	r2, #0
 80093e8:	4b07      	ldr	r3, [pc, #28]	; (8009408 <can1_ams_cell_voltages_v6s8_decode+0x48>)
 80093ea:	f7f6 ff41 	bl	8000270 <__adddf3>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80093f6:	eeb0 0a47 	vmov.f32	s0, s14
 80093fa:	eef0 0a67 	vmov.f32	s1, s15
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	f3af 8000 	nop.w
 8009408:	40040000 	.word	0x40040000
 800940c:	fcce1c58 	.word	0xfcce1c58
 8009410:	3f800e6a 	.word	0x3f800e6a
 8009414:	00000000 	.word	0x00000000

08009418 <can1_ams_cell_voltages_v6s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s9_encode(double value)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009422:	f04f 0200 	mov.w	r2, #0
 8009426:	4b10      	ldr	r3, [pc, #64]	; (8009468 <can1_ams_cell_voltages_v6s9_encode+0x50>)
 8009428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800942c:	f7f6 ff1e 	bl	800026c <__aeabi_dsub>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	4610      	mov	r0, r2
 8009436:	4619      	mov	r1, r3
 8009438:	a309      	add	r3, pc, #36	; (adr r3, 8009460 <can1_ams_cell_voltages_v6s9_encode+0x48>)
 800943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943e:	f7f7 f9f7 	bl	8000830 <__aeabi_ddiv>
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	4610      	mov	r0, r2
 8009448:	4619      	mov	r1, r3
 800944a:	f7f7 fb9f 	bl	8000b8c <__aeabi_d2uiz>
 800944e:	4603      	mov	r3, r0
 8009450:	b2db      	uxtb	r3, r3
}
 8009452:	4618      	mov	r0, r3
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	f3af 8000 	nop.w
 8009460:	fcce1c58 	.word	0xfcce1c58
 8009464:	3f800e6a 	.word	0x3f800e6a
 8009468:	40040000 	.word	0x40040000
 800946c:	00000000 	.word	0x00000000

08009470 <can1_ams_cell_voltages_v6s9_decode>:

double can1_ams_cell_voltages_v6s9_decode(uint8_t value)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	4603      	mov	r3, r0
 8009478:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800947a:	79fb      	ldrb	r3, [r7, #7]
 800947c:	4618      	mov	r0, r3
 800947e:	f7f7 f833 	bl	80004e8 <__aeabi_ui2d>
 8009482:	a30e      	add	r3, pc, #56	; (adr r3, 80094bc <can1_ams_cell_voltages_v6s9_decode+0x4c>)
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	f7f7 f8a8 	bl	80005dc <__aeabi_dmul>
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	4610      	mov	r0, r2
 8009492:	4619      	mov	r1, r3
 8009494:	f04f 0200 	mov.w	r2, #0
 8009498:	4b07      	ldr	r3, [pc, #28]	; (80094b8 <can1_ams_cell_voltages_v6s9_decode+0x48>)
 800949a:	f7f6 fee9 	bl	8000270 <__adddf3>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80094a6:	eeb0 0a47 	vmov.f32	s0, s14
 80094aa:	eef0 0a67 	vmov.f32	s1, s15
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	f3af 8000 	nop.w
 80094b8:	40040000 	.word	0x40040000
 80094bc:	fcce1c58 	.word	0xfcce1c58
 80094c0:	3f800e6a 	.word	0x3f800e6a
 80094c4:	00000000 	.word	0x00000000

080094c8 <can1_ams_cell_voltages_v6s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s10_encode(double value)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80094d2:	f04f 0200 	mov.w	r2, #0
 80094d6:	4b10      	ldr	r3, [pc, #64]	; (8009518 <can1_ams_cell_voltages_v6s10_encode+0x50>)
 80094d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094dc:	f7f6 fec6 	bl	800026c <__aeabi_dsub>
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	4610      	mov	r0, r2
 80094e6:	4619      	mov	r1, r3
 80094e8:	a309      	add	r3, pc, #36	; (adr r3, 8009510 <can1_ams_cell_voltages_v6s10_encode+0x48>)
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	f7f7 f99f 	bl	8000830 <__aeabi_ddiv>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4610      	mov	r0, r2
 80094f8:	4619      	mov	r1, r3
 80094fa:	f7f7 fb47 	bl	8000b8c <__aeabi_d2uiz>
 80094fe:	4603      	mov	r3, r0
 8009500:	b2db      	uxtb	r3, r3
}
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	f3af 8000 	nop.w
 8009510:	fcce1c58 	.word	0xfcce1c58
 8009514:	3f800e6a 	.word	0x3f800e6a
 8009518:	40040000 	.word	0x40040000
 800951c:	00000000 	.word	0x00000000

08009520 <can1_ams_cell_voltages_v6s10_decode>:

double can1_ams_cell_voltages_v6s10_decode(uint8_t value)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	4603      	mov	r3, r0
 8009528:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800952a:	79fb      	ldrb	r3, [r7, #7]
 800952c:	4618      	mov	r0, r3
 800952e:	f7f6 ffdb 	bl	80004e8 <__aeabi_ui2d>
 8009532:	a30e      	add	r3, pc, #56	; (adr r3, 800956c <can1_ams_cell_voltages_v6s10_decode+0x4c>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	f7f7 f850 	bl	80005dc <__aeabi_dmul>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4610      	mov	r0, r2
 8009542:	4619      	mov	r1, r3
 8009544:	f04f 0200 	mov.w	r2, #0
 8009548:	4b07      	ldr	r3, [pc, #28]	; (8009568 <can1_ams_cell_voltages_v6s10_decode+0x48>)
 800954a:	f7f6 fe91 	bl	8000270 <__adddf3>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	ec43 2b17 	vmov	d7, r2, r3
}
 8009556:	eeb0 0a47 	vmov.f32	s0, s14
 800955a:	eef0 0a67 	vmov.f32	s1, s15
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	f3af 8000 	nop.w
 8009568:	40040000 	.word	0x40040000
 800956c:	fcce1c58 	.word	0xfcce1c58
 8009570:	3f800e6a 	.word	0x3f800e6a
 8009574:	00000000 	.word	0x00000000

08009578 <can1_ams_cell_voltages_v6s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s11_encode(double value)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009582:	f04f 0200 	mov.w	r2, #0
 8009586:	4b10      	ldr	r3, [pc, #64]	; (80095c8 <can1_ams_cell_voltages_v6s11_encode+0x50>)
 8009588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800958c:	f7f6 fe6e 	bl	800026c <__aeabi_dsub>
 8009590:	4602      	mov	r2, r0
 8009592:	460b      	mov	r3, r1
 8009594:	4610      	mov	r0, r2
 8009596:	4619      	mov	r1, r3
 8009598:	a309      	add	r3, pc, #36	; (adr r3, 80095c0 <can1_ams_cell_voltages_v6s11_encode+0x48>)
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	f7f7 f947 	bl	8000830 <__aeabi_ddiv>
 80095a2:	4602      	mov	r2, r0
 80095a4:	460b      	mov	r3, r1
 80095a6:	4610      	mov	r0, r2
 80095a8:	4619      	mov	r1, r3
 80095aa:	f7f7 faef 	bl	8000b8c <__aeabi_d2uiz>
 80095ae:	4603      	mov	r3, r0
 80095b0:	b2db      	uxtb	r3, r3
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	f3af 8000 	nop.w
 80095c0:	fcce1c58 	.word	0xfcce1c58
 80095c4:	3f800e6a 	.word	0x3f800e6a
 80095c8:	40040000 	.word	0x40040000
 80095cc:	00000000 	.word	0x00000000

080095d0 <can1_ams_cell_voltages_v6s11_decode>:

double can1_ams_cell_voltages_v6s11_decode(uint8_t value)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	4603      	mov	r3, r0
 80095d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80095da:	79fb      	ldrb	r3, [r7, #7]
 80095dc:	4618      	mov	r0, r3
 80095de:	f7f6 ff83 	bl	80004e8 <__aeabi_ui2d>
 80095e2:	a30e      	add	r3, pc, #56	; (adr r3, 800961c <can1_ams_cell_voltages_v6s11_decode+0x4c>)
 80095e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e8:	f7f6 fff8 	bl	80005dc <__aeabi_dmul>
 80095ec:	4602      	mov	r2, r0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4610      	mov	r0, r2
 80095f2:	4619      	mov	r1, r3
 80095f4:	f04f 0200 	mov.w	r2, #0
 80095f8:	4b07      	ldr	r3, [pc, #28]	; (8009618 <can1_ams_cell_voltages_v6s11_decode+0x48>)
 80095fa:	f7f6 fe39 	bl	8000270 <__adddf3>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	ec43 2b17 	vmov	d7, r2, r3
}
 8009606:	eeb0 0a47 	vmov.f32	s0, s14
 800960a:	eef0 0a67 	vmov.f32	s1, s15
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	f3af 8000 	nop.w
 8009618:	40040000 	.word	0x40040000
 800961c:	fcce1c58 	.word	0xfcce1c58
 8009620:	3f800e6a 	.word	0x3f800e6a
 8009624:	00000000 	.word	0x00000000

08009628 <can1_ams_cell_voltages_v6s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s12_encode(double value)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009632:	f04f 0200 	mov.w	r2, #0
 8009636:	4b10      	ldr	r3, [pc, #64]	; (8009678 <can1_ams_cell_voltages_v6s12_encode+0x50>)
 8009638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800963c:	f7f6 fe16 	bl	800026c <__aeabi_dsub>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4610      	mov	r0, r2
 8009646:	4619      	mov	r1, r3
 8009648:	a309      	add	r3, pc, #36	; (adr r3, 8009670 <can1_ams_cell_voltages_v6s12_encode+0x48>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f7f7 f8ef 	bl	8000830 <__aeabi_ddiv>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	4610      	mov	r0, r2
 8009658:	4619      	mov	r1, r3
 800965a:	f7f7 fa97 	bl	8000b8c <__aeabi_d2uiz>
 800965e:	4603      	mov	r3, r0
 8009660:	b2db      	uxtb	r3, r3
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	f3af 8000 	nop.w
 8009670:	fcce1c58 	.word	0xfcce1c58
 8009674:	3f800e6a 	.word	0x3f800e6a
 8009678:	40040000 	.word	0x40040000
 800967c:	00000000 	.word	0x00000000

08009680 <can1_ams_cell_voltages_v6s12_decode>:

double can1_ams_cell_voltages_v6s12_decode(uint8_t value)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800968a:	79fb      	ldrb	r3, [r7, #7]
 800968c:	4618      	mov	r0, r3
 800968e:	f7f6 ff2b 	bl	80004e8 <__aeabi_ui2d>
 8009692:	a30e      	add	r3, pc, #56	; (adr r3, 80096cc <can1_ams_cell_voltages_v6s12_decode+0x4c>)
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	f7f6 ffa0 	bl	80005dc <__aeabi_dmul>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4610      	mov	r0, r2
 80096a2:	4619      	mov	r1, r3
 80096a4:	f04f 0200 	mov.w	r2, #0
 80096a8:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <can1_ams_cell_voltages_v6s12_decode+0x48>)
 80096aa:	f7f6 fde1 	bl	8000270 <__adddf3>
 80096ae:	4602      	mov	r2, r0
 80096b0:	460b      	mov	r3, r1
 80096b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80096b6:	eeb0 0a47 	vmov.f32	s0, s14
 80096ba:	eef0 0a67 	vmov.f32	s1, s15
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	f3af 8000 	nop.w
 80096c8:	40040000 	.word	0x40040000
 80096cc:	fcce1c58 	.word	0xfcce1c58
 80096d0:	3f800e6a 	.word	0x3f800e6a

080096d4 <can1_ams_cell_temperatures_pack>:

int can1_ams_cell_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_cell_temperatures_t *src_p,
    size_t size)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b0a2      	sub	sp, #136	; 0x88
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
    uint16_t t5s6;
    uint16_t t5s7;
    uint16_t t5s8;
    uint16_t t5s9;

    if (size < 8u) {
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b07      	cmp	r3, #7
 80096e4:	d803      	bhi.n	80096ee <can1_ams_cell_temperatures_pack+0x1a>
        return (-EINVAL);
 80096e6:	f06f 0315 	mvn.w	r3, #21
 80096ea:	f001 b90d 	b.w	800a908 <can1_ams_cell_temperatures_pack+0x1234>
    }

    memset(&dst_p[0], 0, 8);
 80096ee:	2208      	movs	r2, #8
 80096f0:	2100      	movs	r1, #0
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f023 fb34 	bl	802cd60 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->temperature_multiplexor, 0u, 0x0fu);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	220f      	movs	r2, #15
 80096fe:	2100      	movs	r1, #0
 8009700:	4618      	mov	r0, r3
 8009702:	f7f7 fc2f 	bl	8000f64 <pack_left_shift_u8>
 8009706:	4603      	mov	r3, r0
 8009708:	461a      	mov	r2, r3
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	4313      	orrs	r3, r2
 8009710:	b2da      	uxtb	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	701a      	strb	r2, [r3, #0]

    switch (src_p->temperature_multiplexor) {
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	2b0b      	cmp	r3, #11
 800971c:	f201 80f2 	bhi.w	800a904 <can1_ams_cell_temperatures_pack+0x1230>
 8009720:	a201      	add	r2, pc, #4	; (adr r2, 8009728 <can1_ams_cell_temperatures_pack+0x54>)
 8009722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009726:	bf00      	nop
 8009728:	08009759 	.word	0x08009759
 800972c:	080098c1 	.word	0x080098c1
 8009730:	08009a29 	.word	0x08009a29
 8009734:	08009b91 	.word	0x08009b91
 8009738:	08009cf9 	.word	0x08009cf9
 800973c:	08009e67 	.word	0x08009e67
 8009740:	08009fed 	.word	0x08009fed
 8009744:	0800a171 	.word	0x0800a171
 8009748:	0800a2f5 	.word	0x0800a2f5
 800974c:	0800a479 	.word	0x0800a479
 8009750:	0800a5fd 	.word	0x0800a5fd
 8009754:	0800a781 	.word	0x0800a781

    case 0:
        t1s1 = (uint16_t)src_p->t1s1;
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800975e:	833b      	strh	r3, [r7, #24]
        dst_p[0] |= pack_left_shift_u16(t1s1, 4u, 0xf0u);
 8009760:	8b3b      	ldrh	r3, [r7, #24]
 8009762:	22f0      	movs	r2, #240	; 0xf0
 8009764:	2104      	movs	r1, #4
 8009766:	4618      	mov	r0, r3
 8009768:	f7f7 fc13 	bl	8000f92 <pack_left_shift_u16>
 800976c:	4603      	mov	r3, r0
 800976e:	461a      	mov	r2, r3
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	4313      	orrs	r3, r2
 8009776:	b2da      	uxtb	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s1, 4u, 0xffu);
 800977c:	8b3b      	ldrh	r3, [r7, #24]
 800977e:	22ff      	movs	r2, #255	; 0xff
 8009780:	2104      	movs	r1, #4
 8009782:	4618      	mov	r0, r3
 8009784:	f7f7 fc1c 	bl	8000fc0 <pack_right_shift_u16>
 8009788:	4603      	mov	r3, r0
 800978a:	4619      	mov	r1, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3301      	adds	r3, #1
 8009790:	781a      	ldrb	r2, [r3, #0]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	3301      	adds	r3, #1
 8009796:	430a      	orrs	r2, r1
 8009798:	b2d2      	uxtb	r2, r2
 800979a:	701a      	strb	r2, [r3, #0]
        t2s1 = (uint16_t)src_p->t2s1;
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80097a2:	82fb      	strh	r3, [r7, #22]
        dst_p[2] |= pack_left_shift_u16(t2s1, 0u, 0xffu);
 80097a4:	8afb      	ldrh	r3, [r7, #22]
 80097a6:	22ff      	movs	r2, #255	; 0xff
 80097a8:	2100      	movs	r1, #0
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7f7 fbf1 	bl	8000f92 <pack_left_shift_u16>
 80097b0:	4603      	mov	r3, r0
 80097b2:	4619      	mov	r1, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3302      	adds	r3, #2
 80097b8:	781a      	ldrb	r2, [r3, #0]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	3302      	adds	r3, #2
 80097be:	430a      	orrs	r2, r1
 80097c0:	b2d2      	uxtb	r2, r2
 80097c2:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s1, 8u, 0x0fu);
 80097c4:	8afb      	ldrh	r3, [r7, #22]
 80097c6:	220f      	movs	r2, #15
 80097c8:	2108      	movs	r1, #8
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7f7 fbf8 	bl	8000fc0 <pack_right_shift_u16>
 80097d0:	4603      	mov	r3, r0
 80097d2:	4619      	mov	r1, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3303      	adds	r3, #3
 80097d8:	781a      	ldrb	r2, [r3, #0]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3303      	adds	r3, #3
 80097de:	430a      	orrs	r2, r1
 80097e0:	b2d2      	uxtb	r2, r2
 80097e2:	701a      	strb	r2, [r3, #0]
        t3s1 = (uint16_t)src_p->t3s1;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80097ea:	82bb      	strh	r3, [r7, #20]
        dst_p[3] |= pack_left_shift_u16(t3s1, 4u, 0xf0u);
 80097ec:	8abb      	ldrh	r3, [r7, #20]
 80097ee:	22f0      	movs	r2, #240	; 0xf0
 80097f0:	2104      	movs	r1, #4
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7f7 fbcd 	bl	8000f92 <pack_left_shift_u16>
 80097f8:	4603      	mov	r3, r0
 80097fa:	4619      	mov	r1, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	3303      	adds	r3, #3
 8009800:	781a      	ldrb	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3303      	adds	r3, #3
 8009806:	430a      	orrs	r2, r1
 8009808:	b2d2      	uxtb	r2, r2
 800980a:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s1, 4u, 0xffu);
 800980c:	8abb      	ldrh	r3, [r7, #20]
 800980e:	22ff      	movs	r2, #255	; 0xff
 8009810:	2104      	movs	r1, #4
 8009812:	4618      	mov	r0, r3
 8009814:	f7f7 fbd4 	bl	8000fc0 <pack_right_shift_u16>
 8009818:	4603      	mov	r3, r0
 800981a:	4619      	mov	r1, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3304      	adds	r3, #4
 8009820:	781a      	ldrb	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	3304      	adds	r3, #4
 8009826:	430a      	orrs	r2, r1
 8009828:	b2d2      	uxtb	r2, r2
 800982a:	701a      	strb	r2, [r3, #0]
        t4s1 = (uint16_t)src_p->t4s1;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8009832:	827b      	strh	r3, [r7, #18]
        dst_p[5] |= pack_left_shift_u16(t4s1, 0u, 0xffu);
 8009834:	8a7b      	ldrh	r3, [r7, #18]
 8009836:	22ff      	movs	r2, #255	; 0xff
 8009838:	2100      	movs	r1, #0
 800983a:	4618      	mov	r0, r3
 800983c:	f7f7 fba9 	bl	8000f92 <pack_left_shift_u16>
 8009840:	4603      	mov	r3, r0
 8009842:	4619      	mov	r1, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3305      	adds	r3, #5
 8009848:	781a      	ldrb	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	3305      	adds	r3, #5
 800984e:	430a      	orrs	r2, r1
 8009850:	b2d2      	uxtb	r2, r2
 8009852:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s1, 8u, 0x0fu);
 8009854:	8a7b      	ldrh	r3, [r7, #18]
 8009856:	220f      	movs	r2, #15
 8009858:	2108      	movs	r1, #8
 800985a:	4618      	mov	r0, r3
 800985c:	f7f7 fbb0 	bl	8000fc0 <pack_right_shift_u16>
 8009860:	4603      	mov	r3, r0
 8009862:	4619      	mov	r1, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3306      	adds	r3, #6
 8009868:	781a      	ldrb	r2, [r3, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3306      	adds	r3, #6
 800986e:	430a      	orrs	r2, r1
 8009870:	b2d2      	uxtb	r2, r2
 8009872:	701a      	strb	r2, [r3, #0]
        t5s1 = (uint16_t)src_p->t5s1;
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 800987a:	823b      	strh	r3, [r7, #16]
        dst_p[6] |= pack_left_shift_u16(t5s1, 4u, 0xf0u);
 800987c:	8a3b      	ldrh	r3, [r7, #16]
 800987e:	22f0      	movs	r2, #240	; 0xf0
 8009880:	2104      	movs	r1, #4
 8009882:	4618      	mov	r0, r3
 8009884:	f7f7 fb85 	bl	8000f92 <pack_left_shift_u16>
 8009888:	4603      	mov	r3, r0
 800988a:	4619      	mov	r1, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	3306      	adds	r3, #6
 8009890:	781a      	ldrb	r2, [r3, #0]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3306      	adds	r3, #6
 8009896:	430a      	orrs	r2, r1
 8009898:	b2d2      	uxtb	r2, r2
 800989a:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s1, 4u, 0xffu);
 800989c:	8a3b      	ldrh	r3, [r7, #16]
 800989e:	22ff      	movs	r2, #255	; 0xff
 80098a0:	2104      	movs	r1, #4
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7f7 fb8c 	bl	8000fc0 <pack_right_shift_u16>
 80098a8:	4603      	mov	r3, r0
 80098aa:	4619      	mov	r1, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3307      	adds	r3, #7
 80098b0:	781a      	ldrb	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3307      	adds	r3, #7
 80098b6:	430a      	orrs	r2, r1
 80098b8:	b2d2      	uxtb	r2, r2
 80098ba:	701a      	strb	r2, [r3, #0]
        break;
 80098bc:	f001 b823 	b.w	800a906 <can1_ams_cell_temperatures_pack+0x1232>

    case 1:
        t1s2 = (uint16_t)src_p->t1s2;
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80098c6:	847b      	strh	r3, [r7, #34]	; 0x22
        dst_p[0] |= pack_left_shift_u16(t1s2, 4u, 0xf0u);
 80098c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80098ca:	22f0      	movs	r2, #240	; 0xf0
 80098cc:	2104      	movs	r1, #4
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7f7 fb5f 	bl	8000f92 <pack_left_shift_u16>
 80098d4:	4603      	mov	r3, r0
 80098d6:	461a      	mov	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	4313      	orrs	r3, r2
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s2, 4u, 0xffu);
 80098e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80098e6:	22ff      	movs	r2, #255	; 0xff
 80098e8:	2104      	movs	r1, #4
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7f7 fb68 	bl	8000fc0 <pack_right_shift_u16>
 80098f0:	4603      	mov	r3, r0
 80098f2:	4619      	mov	r1, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3301      	adds	r3, #1
 80098f8:	781a      	ldrb	r2, [r3, #0]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	3301      	adds	r3, #1
 80098fe:	430a      	orrs	r2, r1
 8009900:	b2d2      	uxtb	r2, r2
 8009902:	701a      	strb	r2, [r3, #0]
        t2s2 = (uint16_t)src_p->t2s2;
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800990a:	843b      	strh	r3, [r7, #32]
        dst_p[2] |= pack_left_shift_u16(t2s2, 0u, 0xffu);
 800990c:	8c3b      	ldrh	r3, [r7, #32]
 800990e:	22ff      	movs	r2, #255	; 0xff
 8009910:	2100      	movs	r1, #0
 8009912:	4618      	mov	r0, r3
 8009914:	f7f7 fb3d 	bl	8000f92 <pack_left_shift_u16>
 8009918:	4603      	mov	r3, r0
 800991a:	4619      	mov	r1, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3302      	adds	r3, #2
 8009920:	781a      	ldrb	r2, [r3, #0]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	3302      	adds	r3, #2
 8009926:	430a      	orrs	r2, r1
 8009928:	b2d2      	uxtb	r2, r2
 800992a:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s2, 8u, 0x0fu);
 800992c:	8c3b      	ldrh	r3, [r7, #32]
 800992e:	220f      	movs	r2, #15
 8009930:	2108      	movs	r1, #8
 8009932:	4618      	mov	r0, r3
 8009934:	f7f7 fb44 	bl	8000fc0 <pack_right_shift_u16>
 8009938:	4603      	mov	r3, r0
 800993a:	4619      	mov	r1, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	3303      	adds	r3, #3
 8009940:	781a      	ldrb	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3303      	adds	r3, #3
 8009946:	430a      	orrs	r2, r1
 8009948:	b2d2      	uxtb	r2, r2
 800994a:	701a      	strb	r2, [r3, #0]
        t3s2 = (uint16_t)src_p->t3s2;
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8009952:	83fb      	strh	r3, [r7, #30]
        dst_p[3] |= pack_left_shift_u16(t3s2, 4u, 0xf0u);
 8009954:	8bfb      	ldrh	r3, [r7, #30]
 8009956:	22f0      	movs	r2, #240	; 0xf0
 8009958:	2104      	movs	r1, #4
 800995a:	4618      	mov	r0, r3
 800995c:	f7f7 fb19 	bl	8000f92 <pack_left_shift_u16>
 8009960:	4603      	mov	r3, r0
 8009962:	4619      	mov	r1, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	3303      	adds	r3, #3
 8009968:	781a      	ldrb	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3303      	adds	r3, #3
 800996e:	430a      	orrs	r2, r1
 8009970:	b2d2      	uxtb	r2, r2
 8009972:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s2, 4u, 0xffu);
 8009974:	8bfb      	ldrh	r3, [r7, #30]
 8009976:	22ff      	movs	r2, #255	; 0xff
 8009978:	2104      	movs	r1, #4
 800997a:	4618      	mov	r0, r3
 800997c:	f7f7 fb20 	bl	8000fc0 <pack_right_shift_u16>
 8009980:	4603      	mov	r3, r0
 8009982:	4619      	mov	r1, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3304      	adds	r3, #4
 8009988:	781a      	ldrb	r2, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3304      	adds	r3, #4
 800998e:	430a      	orrs	r2, r1
 8009990:	b2d2      	uxtb	r2, r2
 8009992:	701a      	strb	r2, [r3, #0]
        t4s2 = (uint16_t)src_p->t4s2;
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800999a:	83bb      	strh	r3, [r7, #28]
        dst_p[5] |= pack_left_shift_u16(t4s2, 0u, 0xffu);
 800999c:	8bbb      	ldrh	r3, [r7, #28]
 800999e:	22ff      	movs	r2, #255	; 0xff
 80099a0:	2100      	movs	r1, #0
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7f7 faf5 	bl	8000f92 <pack_left_shift_u16>
 80099a8:	4603      	mov	r3, r0
 80099aa:	4619      	mov	r1, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3305      	adds	r3, #5
 80099b0:	781a      	ldrb	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	3305      	adds	r3, #5
 80099b6:	430a      	orrs	r2, r1
 80099b8:	b2d2      	uxtb	r2, r2
 80099ba:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s2, 8u, 0x0fu);
 80099bc:	8bbb      	ldrh	r3, [r7, #28]
 80099be:	220f      	movs	r2, #15
 80099c0:	2108      	movs	r1, #8
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7f7 fafc 	bl	8000fc0 <pack_right_shift_u16>
 80099c8:	4603      	mov	r3, r0
 80099ca:	4619      	mov	r1, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	3306      	adds	r3, #6
 80099d0:	781a      	ldrb	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3306      	adds	r3, #6
 80099d6:	430a      	orrs	r2, r1
 80099d8:	b2d2      	uxtb	r2, r2
 80099da:	701a      	strb	r2, [r3, #0]
        t5s2 = (uint16_t)src_p->t5s2;
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80099e2:	837b      	strh	r3, [r7, #26]
        dst_p[6] |= pack_left_shift_u16(t5s2, 4u, 0xf0u);
 80099e4:	8b7b      	ldrh	r3, [r7, #26]
 80099e6:	22f0      	movs	r2, #240	; 0xf0
 80099e8:	2104      	movs	r1, #4
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7f7 fad1 	bl	8000f92 <pack_left_shift_u16>
 80099f0:	4603      	mov	r3, r0
 80099f2:	4619      	mov	r1, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	3306      	adds	r3, #6
 80099f8:	781a      	ldrb	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	3306      	adds	r3, #6
 80099fe:	430a      	orrs	r2, r1
 8009a00:	b2d2      	uxtb	r2, r2
 8009a02:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s2, 4u, 0xffu);
 8009a04:	8b7b      	ldrh	r3, [r7, #26]
 8009a06:	22ff      	movs	r2, #255	; 0xff
 8009a08:	2104      	movs	r1, #4
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7f7 fad8 	bl	8000fc0 <pack_right_shift_u16>
 8009a10:	4603      	mov	r3, r0
 8009a12:	4619      	mov	r1, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3307      	adds	r3, #7
 8009a18:	781a      	ldrb	r2, [r3, #0]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	3307      	adds	r3, #7
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	b2d2      	uxtb	r2, r2
 8009a22:	701a      	strb	r2, [r3, #0]
        break;
 8009a24:	f000 bf6f 	b.w	800a906 <can1_ams_cell_temperatures_pack+0x1232>

    case 2:
        t1s3 = (uint16_t)src_p->t1s3;
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009a2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        dst_p[0] |= pack_left_shift_u16(t1s3, 4u, 0xf0u);
 8009a30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009a32:	22f0      	movs	r2, #240	; 0xf0
 8009a34:	2104      	movs	r1, #4
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7f7 faab 	bl	8000f92 <pack_left_shift_u16>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	461a      	mov	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s3, 4u, 0xffu);
 8009a4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009a4e:	22ff      	movs	r2, #255	; 0xff
 8009a50:	2104      	movs	r1, #4
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7f7 fab4 	bl	8000fc0 <pack_right_shift_u16>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	781a      	ldrb	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3301      	adds	r3, #1
 8009a66:	430a      	orrs	r2, r1
 8009a68:	b2d2      	uxtb	r2, r2
 8009a6a:	701a      	strb	r2, [r3, #0]
        t2s3 = (uint16_t)src_p->t2s3;
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8009a72:	857b      	strh	r3, [r7, #42]	; 0x2a
        dst_p[2] |= pack_left_shift_u16(t2s3, 0u, 0xffu);
 8009a74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a76:	22ff      	movs	r2, #255	; 0xff
 8009a78:	2100      	movs	r1, #0
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7f7 fa89 	bl	8000f92 <pack_left_shift_u16>
 8009a80:	4603      	mov	r3, r0
 8009a82:	4619      	mov	r1, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	3302      	adds	r3, #2
 8009a88:	781a      	ldrb	r2, [r3, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3302      	adds	r3, #2
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	b2d2      	uxtb	r2, r2
 8009a92:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s3, 8u, 0x0fu);
 8009a94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a96:	220f      	movs	r2, #15
 8009a98:	2108      	movs	r1, #8
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f7 fa90 	bl	8000fc0 <pack_right_shift_u16>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	3303      	adds	r3, #3
 8009aa8:	781a      	ldrb	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	3303      	adds	r3, #3
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	b2d2      	uxtb	r2, r2
 8009ab2:	701a      	strb	r2, [r3, #0]
        t3s3 = (uint16_t)src_p->t3s3;
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8009aba:	853b      	strh	r3, [r7, #40]	; 0x28
        dst_p[3] |= pack_left_shift_u16(t3s3, 4u, 0xf0u);
 8009abc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009abe:	22f0      	movs	r2, #240	; 0xf0
 8009ac0:	2104      	movs	r1, #4
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7f7 fa65 	bl	8000f92 <pack_left_shift_u16>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	4619      	mov	r1, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3303      	adds	r3, #3
 8009ad0:	781a      	ldrb	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3303      	adds	r3, #3
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	b2d2      	uxtb	r2, r2
 8009ada:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s3, 4u, 0xffu);
 8009adc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ade:	22ff      	movs	r2, #255	; 0xff
 8009ae0:	2104      	movs	r1, #4
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7f7 fa6c 	bl	8000fc0 <pack_right_shift_u16>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	4619      	mov	r1, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3304      	adds	r3, #4
 8009af0:	781a      	ldrb	r2, [r3, #0]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3304      	adds	r3, #4
 8009af6:	430a      	orrs	r2, r1
 8009af8:	b2d2      	uxtb	r2, r2
 8009afa:	701a      	strb	r2, [r3, #0]
        t4s3 = (uint16_t)src_p->t4s3;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 8009b02:	84fb      	strh	r3, [r7, #38]	; 0x26
        dst_p[5] |= pack_left_shift_u16(t4s3, 0u, 0xffu);
 8009b04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b06:	22ff      	movs	r2, #255	; 0xff
 8009b08:	2100      	movs	r1, #0
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7f7 fa41 	bl	8000f92 <pack_left_shift_u16>
 8009b10:	4603      	mov	r3, r0
 8009b12:	4619      	mov	r1, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	3305      	adds	r3, #5
 8009b18:	781a      	ldrb	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3305      	adds	r3, #5
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	b2d2      	uxtb	r2, r2
 8009b22:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s3, 8u, 0x0fu);
 8009b24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b26:	220f      	movs	r2, #15
 8009b28:	2108      	movs	r1, #8
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7f7 fa48 	bl	8000fc0 <pack_right_shift_u16>
 8009b30:	4603      	mov	r3, r0
 8009b32:	4619      	mov	r1, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3306      	adds	r3, #6
 8009b38:	781a      	ldrb	r2, [r3, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3306      	adds	r3, #6
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	b2d2      	uxtb	r2, r2
 8009b42:	701a      	strb	r2, [r3, #0]
        t5s3 = (uint16_t)src_p->t5s3;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	; 0x66
 8009b4a:	84bb      	strh	r3, [r7, #36]	; 0x24
        dst_p[6] |= pack_left_shift_u16(t5s3, 4u, 0xf0u);
 8009b4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b4e:	22f0      	movs	r2, #240	; 0xf0
 8009b50:	2104      	movs	r1, #4
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7f7 fa1d 	bl	8000f92 <pack_left_shift_u16>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	3306      	adds	r3, #6
 8009b60:	781a      	ldrb	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	3306      	adds	r3, #6
 8009b66:	430a      	orrs	r2, r1
 8009b68:	b2d2      	uxtb	r2, r2
 8009b6a:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s3, 4u, 0xffu);
 8009b6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b6e:	22ff      	movs	r2, #255	; 0xff
 8009b70:	2104      	movs	r1, #4
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7f7 fa24 	bl	8000fc0 <pack_right_shift_u16>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	3307      	adds	r3, #7
 8009b80:	781a      	ldrb	r2, [r3, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3307      	adds	r3, #7
 8009b86:	430a      	orrs	r2, r1
 8009b88:	b2d2      	uxtb	r2, r2
 8009b8a:	701a      	strb	r2, [r3, #0]
        break;
 8009b8c:	f000 bebb 	b.w	800a906 <can1_ams_cell_temperatures_pack+0x1232>

    case 3:
        t1s4 = (uint16_t)src_p->t1s4;
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009b96:	86fb      	strh	r3, [r7, #54]	; 0x36
        dst_p[0] |= pack_left_shift_u16(t1s4, 4u, 0xf0u);
 8009b98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009b9a:	22f0      	movs	r2, #240	; 0xf0
 8009b9c:	2104      	movs	r1, #4
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7f7 f9f7 	bl	8000f92 <pack_left_shift_u16>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s4, 4u, 0xffu);
 8009bb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009bb6:	22ff      	movs	r2, #255	; 0xff
 8009bb8:	2104      	movs	r1, #4
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7f7 fa00 	bl	8000fc0 <pack_right_shift_u16>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	781a      	ldrb	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	701a      	strb	r2, [r3, #0]
        t2s4 = (uint16_t)src_p->t2s4;
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8009bda:	86bb      	strh	r3, [r7, #52]	; 0x34
        dst_p[2] |= pack_left_shift_u16(t2s4, 0u, 0xffu);
 8009bdc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009bde:	22ff      	movs	r2, #255	; 0xff
 8009be0:	2100      	movs	r1, #0
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7f7 f9d5 	bl	8000f92 <pack_left_shift_u16>
 8009be8:	4603      	mov	r3, r0
 8009bea:	4619      	mov	r1, r3
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	3302      	adds	r3, #2
 8009bf0:	781a      	ldrb	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	3302      	adds	r3, #2
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	b2d2      	uxtb	r2, r2
 8009bfa:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s4, 8u, 0x0fu);
 8009bfc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009bfe:	220f      	movs	r2, #15
 8009c00:	2108      	movs	r1, #8
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7f7 f9dc 	bl	8000fc0 <pack_right_shift_u16>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	3303      	adds	r3, #3
 8009c10:	781a      	ldrb	r2, [r3, #0]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3303      	adds	r3, #3
 8009c16:	430a      	orrs	r2, r1
 8009c18:	b2d2      	uxtb	r2, r2
 8009c1a:	701a      	strb	r2, [r3, #0]
        t3s4 = (uint16_t)src_p->t3s4;
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8009c22:	867b      	strh	r3, [r7, #50]	; 0x32
        dst_p[3] |= pack_left_shift_u16(t3s4, 4u, 0xf0u);
 8009c24:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009c26:	22f0      	movs	r2, #240	; 0xf0
 8009c28:	2104      	movs	r1, #4
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7f7 f9b1 	bl	8000f92 <pack_left_shift_u16>
 8009c30:	4603      	mov	r3, r0
 8009c32:	4619      	mov	r1, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3303      	adds	r3, #3
 8009c38:	781a      	ldrb	r2, [r3, #0]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3303      	adds	r3, #3
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	b2d2      	uxtb	r2, r2
 8009c42:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s4, 4u, 0xffu);
 8009c44:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009c46:	22ff      	movs	r2, #255	; 0xff
 8009c48:	2104      	movs	r1, #4
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7f7 f9b8 	bl	8000fc0 <pack_right_shift_u16>
 8009c50:	4603      	mov	r3, r0
 8009c52:	4619      	mov	r1, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3304      	adds	r3, #4
 8009c58:	781a      	ldrb	r2, [r3, #0]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	b2d2      	uxtb	r2, r2
 8009c62:	701a      	strb	r2, [r3, #0]
        t4s4 = (uint16_t)src_p->t4s4;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8009c6a:	863b      	strh	r3, [r7, #48]	; 0x30
        dst_p[5] |= pack_left_shift_u16(t4s4, 0u, 0xffu);
 8009c6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009c6e:	22ff      	movs	r2, #255	; 0xff
 8009c70:	2100      	movs	r1, #0
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7f7 f98d 	bl	8000f92 <pack_left_shift_u16>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3305      	adds	r3, #5
 8009c80:	781a      	ldrb	r2, [r3, #0]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3305      	adds	r3, #5
 8009c86:	430a      	orrs	r2, r1
 8009c88:	b2d2      	uxtb	r2, r2
 8009c8a:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s4, 8u, 0x0fu);
 8009c8c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009c8e:	220f      	movs	r2, #15
 8009c90:	2108      	movs	r1, #8
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7f7 f994 	bl	8000fc0 <pack_right_shift_u16>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3306      	adds	r3, #6
 8009ca0:	781a      	ldrb	r2, [r3, #0]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3306      	adds	r3, #6
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	b2d2      	uxtb	r2, r2
 8009caa:	701a      	strb	r2, [r3, #0]
        t5s4 = (uint16_t)src_p->t5s4;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8009cb2:	85fb      	strh	r3, [r7, #46]	; 0x2e
        dst_p[6] |= pack_left_shift_u16(t5s4, 4u, 0xf0u);
 8009cb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009cb6:	22f0      	movs	r2, #240	; 0xf0
 8009cb8:	2104      	movs	r1, #4
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7f7 f969 	bl	8000f92 <pack_left_shift_u16>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3306      	adds	r3, #6
 8009cc8:	781a      	ldrb	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3306      	adds	r3, #6
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	b2d2      	uxtb	r2, r2
 8009cd2:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s4, 4u, 0xffu);
 8009cd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009cd6:	22ff      	movs	r2, #255	; 0xff
 8009cd8:	2104      	movs	r1, #4
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7f7 f970 	bl	8000fc0 <pack_right_shift_u16>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3307      	adds	r3, #7
 8009ce8:	781a      	ldrb	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	3307      	adds	r3, #7
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	b2d2      	uxtb	r2, r2
 8009cf2:	701a      	strb	r2, [r3, #0]
        break;
 8009cf4:	f000 be07 	b.w	800a906 <can1_ams_cell_temperatures_pack+0x1232>

    case 4:
        t1s5 = (uint16_t)src_p->t1s5;
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009cfe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        dst_p[0] |= pack_left_shift_u16(t1s5, 4u, 0xf0u);
 8009d02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d06:	22f0      	movs	r2, #240	; 0xf0
 8009d08:	2104      	movs	r1, #4
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7f7 f941 	bl	8000f92 <pack_left_shift_u16>
 8009d10:	4603      	mov	r3, r0
 8009d12:	461a      	mov	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	b2da      	uxtb	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s5, 4u, 0xffu);
 8009d20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d24:	22ff      	movs	r2, #255	; 0xff
 8009d26:	2104      	movs	r1, #4
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7f7 f949 	bl	8000fc0 <pack_right_shift_u16>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	4619      	mov	r1, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	3301      	adds	r3, #1
 8009d36:	781a      	ldrb	r2, [r3, #0]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	b2d2      	uxtb	r2, r2
 8009d40:	701a      	strb	r2, [r3, #0]
        t2s5 = (uint16_t)src_p->t2s5;
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8009d48:	87fb      	strh	r3, [r7, #62]	; 0x3e
        dst_p[2] |= pack_left_shift_u16(t2s5, 0u, 0xffu);
 8009d4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009d4c:	22ff      	movs	r2, #255	; 0xff
 8009d4e:	2100      	movs	r1, #0
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7f7 f91e 	bl	8000f92 <pack_left_shift_u16>
 8009d56:	4603      	mov	r3, r0
 8009d58:	4619      	mov	r1, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	3302      	adds	r3, #2
 8009d5e:	781a      	ldrb	r2, [r3, #0]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	3302      	adds	r3, #2
 8009d64:	430a      	orrs	r2, r1
 8009d66:	b2d2      	uxtb	r2, r2
 8009d68:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s5, 8u, 0x0fu);
 8009d6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009d6c:	220f      	movs	r2, #15
 8009d6e:	2108      	movs	r1, #8
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7f7 f925 	bl	8000fc0 <pack_right_shift_u16>
 8009d76:	4603      	mov	r3, r0
 8009d78:	4619      	mov	r1, r3
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	3303      	adds	r3, #3
 8009d7e:	781a      	ldrb	r2, [r3, #0]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	3303      	adds	r3, #3
 8009d84:	430a      	orrs	r2, r1
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	701a      	strb	r2, [r3, #0]
        t3s5 = (uint16_t)src_p->t3s5;
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8009d90:	87bb      	strh	r3, [r7, #60]	; 0x3c
        dst_p[3] |= pack_left_shift_u16(t3s5, 4u, 0xf0u);
 8009d92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009d94:	22f0      	movs	r2, #240	; 0xf0
 8009d96:	2104      	movs	r1, #4
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7f7 f8fa 	bl	8000f92 <pack_left_shift_u16>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	4619      	mov	r1, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	3303      	adds	r3, #3
 8009da6:	781a      	ldrb	r2, [r3, #0]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	3303      	adds	r3, #3
 8009dac:	430a      	orrs	r2, r1
 8009dae:	b2d2      	uxtb	r2, r2
 8009db0:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s5, 4u, 0xffu);
 8009db2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009db4:	22ff      	movs	r2, #255	; 0xff
 8009db6:	2104      	movs	r1, #4
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7f7 f901 	bl	8000fc0 <pack_right_shift_u16>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	781a      	ldrb	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	b2d2      	uxtb	r2, r2
 8009dd0:	701a      	strb	r2, [r3, #0]
        t4s5 = (uint16_t)src_p->t4s5;
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8009dd8:	877b      	strh	r3, [r7, #58]	; 0x3a
        dst_p[5] |= pack_left_shift_u16(t4s5, 0u, 0xffu);
 8009dda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009ddc:	22ff      	movs	r2, #255	; 0xff
 8009dde:	2100      	movs	r1, #0
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7f7 f8d6 	bl	8000f92 <pack_left_shift_u16>
 8009de6:	4603      	mov	r3, r0
 8009de8:	4619      	mov	r1, r3
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3305      	adds	r3, #5
 8009dee:	781a      	ldrb	r2, [r3, #0]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	3305      	adds	r3, #5
 8009df4:	430a      	orrs	r2, r1
 8009df6:	b2d2      	uxtb	r2, r2
 8009df8:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s5, 8u, 0x0fu);
 8009dfa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009dfc:	220f      	movs	r2, #15
 8009dfe:	2108      	movs	r1, #8
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7f7 f8dd 	bl	8000fc0 <pack_right_shift_u16>
 8009e06:	4603      	mov	r3, r0
 8009e08:	4619      	mov	r1, r3
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3306      	adds	r3, #6
 8009e0e:	781a      	ldrb	r2, [r3, #0]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	3306      	adds	r3, #6
 8009e14:	430a      	orrs	r2, r1
 8009e16:	b2d2      	uxtb	r2, r2
 8009e18:	701a      	strb	r2, [r3, #0]
        t5s5 = (uint16_t)src_p->t5s5;
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 8009e20:	873b      	strh	r3, [r7, #56]	; 0x38
        dst_p[6] |= pack_left_shift_u16(t5s5, 4u, 0xf0u);
 8009e22:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e24:	22f0      	movs	r2, #240	; 0xf0
 8009e26:	2104      	movs	r1, #4
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7f7 f8b2 	bl	8000f92 <pack_left_shift_u16>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	4619      	mov	r1, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	3306      	adds	r3, #6
 8009e36:	781a      	ldrb	r2, [r3, #0]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	3306      	adds	r3, #6
 8009e3c:	430a      	orrs	r2, r1
 8009e3e:	b2d2      	uxtb	r2, r2
 8009e40:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s5, 4u, 0xffu);
 8009e42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e44:	22ff      	movs	r2, #255	; 0xff
 8009e46:	2104      	movs	r1, #4
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7f7 f8b9 	bl	8000fc0 <pack_right_shift_u16>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	4619      	mov	r1, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3307      	adds	r3, #7
 8009e56:	781a      	ldrb	r2, [r3, #0]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	3307      	adds	r3, #7
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	b2d2      	uxtb	r2, r2
 8009e60:	701a      	strb	r2, [r3, #0]
        break;
 8009e62:	f000 bd50 	b.w	800a906 <can1_ams_cell_temperatures_pack+0x1232>

    case 5:
        t1s6 = (uint16_t)src_p->t1s6;
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009e6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        dst_p[0] |= pack_left_shift_u16(t1s6, 4u, 0xf0u);
 8009e70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009e74:	22f0      	movs	r2, #240	; 0xf0
 8009e76:	2104      	movs	r1, #4
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7f7 f88a 	bl	8000f92 <pack_left_shift_u16>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	461a      	mov	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s6, 4u, 0xffu);
 8009e8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009e92:	22ff      	movs	r2, #255	; 0xff
 8009e94:	2104      	movs	r1, #4
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7f7 f892 	bl	8000fc0 <pack_right_shift_u16>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	781a      	ldrb	r2, [r3, #0]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	b2d2      	uxtb	r2, r2
 8009eae:	701a      	strb	r2, [r3, #0]
        t2s6 = (uint16_t)src_p->t2s6;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8009eb6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        dst_p[2] |= pack_left_shift_u16(t2s6, 0u, 0xffu);
 8009eba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009ebe:	22ff      	movs	r2, #255	; 0xff
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7f7 f865 	bl	8000f92 <pack_left_shift_u16>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	4619      	mov	r1, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	3302      	adds	r3, #2
 8009ed0:	781a      	ldrb	r2, [r3, #0]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3302      	adds	r3, #2
 8009ed6:	430a      	orrs	r2, r1
 8009ed8:	b2d2      	uxtb	r2, r2
 8009eda:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s6, 8u, 0x0fu);
 8009edc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009ee0:	220f      	movs	r2, #15
 8009ee2:	2108      	movs	r1, #8
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7f7 f86b 	bl	8000fc0 <pack_right_shift_u16>
 8009eea:	4603      	mov	r3, r0
 8009eec:	4619      	mov	r1, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	3303      	adds	r3, #3
 8009ef2:	781a      	ldrb	r2, [r3, #0]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	3303      	adds	r3, #3
 8009ef8:	430a      	orrs	r2, r1
 8009efa:	b2d2      	uxtb	r2, r2
 8009efc:	701a      	strb	r2, [r3, #0]
        t3s6 = (uint16_t)src_p->t3s6;
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009f04:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        dst_p[3] |= pack_left_shift_u16(t3s6, 4u, 0xf0u);
 8009f08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009f0c:	22f0      	movs	r2, #240	; 0xf0
 8009f0e:	2104      	movs	r1, #4
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7f7 f83e 	bl	8000f92 <pack_left_shift_u16>
 8009f16:	4603      	mov	r3, r0
 8009f18:	4619      	mov	r1, r3
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	3303      	adds	r3, #3
 8009f1e:	781a      	ldrb	r2, [r3, #0]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	3303      	adds	r3, #3
 8009f24:	430a      	orrs	r2, r1
 8009f26:	b2d2      	uxtb	r2, r2
 8009f28:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s6, 4u, 0xffu);
 8009f2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009f2e:	22ff      	movs	r2, #255	; 0xff
 8009f30:	2104      	movs	r1, #4
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7f7 f844 	bl	8000fc0 <pack_right_shift_u16>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	781a      	ldrb	r2, [r3, #0]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3304      	adds	r3, #4
 8009f46:	430a      	orrs	r2, r1
 8009f48:	b2d2      	uxtb	r2, r2
 8009f4a:	701a      	strb	r2, [r3, #0]
        t4s6 = (uint16_t)src_p->t4s6;
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8009f52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        dst_p[5] |= pack_left_shift_u16(t4s6, 0u, 0xffu);
 8009f56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009f5a:	22ff      	movs	r2, #255	; 0xff
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7f7 f817 	bl	8000f92 <pack_left_shift_u16>
 8009f64:	4603      	mov	r3, r0
 8009f66:	4619      	mov	r1, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	3305      	adds	r3, #5
 8009f6c:	781a      	ldrb	r2, [r3, #0]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3305      	adds	r3, #5
 8009f72:	430a      	orrs	r2, r1
 8009f74:	b2d2      	uxtb	r2, r2
 8009f76:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s6, 8u, 0x0fu);
 8009f78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009f7c:	220f      	movs	r2, #15
 8009f7e:	2108      	movs	r1, #8
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7f7 f81d 	bl	8000fc0 <pack_right_shift_u16>
 8009f86:	4603      	mov	r3, r0
 8009f88:	4619      	mov	r1, r3
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3306      	adds	r3, #6
 8009f8e:	781a      	ldrb	r2, [r3, #0]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	3306      	adds	r3, #6
 8009f94:	430a      	orrs	r2, r1
 8009f96:	b2d2      	uxtb	r2, r2
 8009f98:	701a      	strb	r2, [r3, #0]
        t5s6 = (uint16_t)src_p->t5s6;
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8009fa0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        dst_p[6] |= pack_left_shift_u16(t5s6, 4u, 0xf0u);
 8009fa4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009fa8:	22f0      	movs	r2, #240	; 0xf0
 8009faa:	2104      	movs	r1, #4
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7f6 fff0 	bl	8000f92 <pack_left_shift_u16>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	3306      	adds	r3, #6
 8009fba:	781a      	ldrb	r2, [r3, #0]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3306      	adds	r3, #6
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	b2d2      	uxtb	r2, r2
 8009fc4:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s6, 4u, 0xffu);
 8009fc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009fca:	22ff      	movs	r2, #255	; 0xff
 8009fcc:	2104      	movs	r1, #4
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7f6 fff6 	bl	8000fc0 <pack_right_shift_u16>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3307      	adds	r3, #7
 8009fdc:	781a      	ldrb	r2, [r3, #0]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	3307      	adds	r3, #7
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	b2d2      	uxtb	r2, r2
 8009fe6:	701a      	strb	r2, [r3, #0]
        break;
 8009fe8:	f000 bc8d 	b.w	800a906 <can1_ams_cell_temperatures_pack+0x1232>

    case 6:
        t1s7 = (uint16_t)src_p->t1s7;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009ff2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        dst_p[0] |= pack_left_shift_u16(t1s7, 4u, 0xf0u);
 8009ff6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009ffa:	22f0      	movs	r2, #240	; 0xf0
 8009ffc:	2104      	movs	r1, #4
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7f6 ffc7 	bl	8000f92 <pack_left_shift_u16>
 800a004:	4603      	mov	r3, r0
 800a006:	461a      	mov	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	b2da      	uxtb	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s7, 4u, 0xffu);
 800a014:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a018:	22ff      	movs	r2, #255	; 0xff
 800a01a:	2104      	movs	r1, #4
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7f6 ffcf 	bl	8000fc0 <pack_right_shift_u16>
 800a022:	4603      	mov	r3, r0
 800a024:	4619      	mov	r1, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3301      	adds	r3, #1
 800a02a:	781a      	ldrb	r2, [r3, #0]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	3301      	adds	r3, #1
 800a030:	430a      	orrs	r2, r1
 800a032:	b2d2      	uxtb	r2, r2
 800a034:	701a      	strb	r2, [r3, #0]
        t2s7 = (uint16_t)src_p->t2s7;
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800a03c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        dst_p[2] |= pack_left_shift_u16(t2s7, 0u, 0xffu);
 800a040:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a044:	22ff      	movs	r2, #255	; 0xff
 800a046:	2100      	movs	r1, #0
 800a048:	4618      	mov	r0, r3
 800a04a:	f7f6 ffa2 	bl	8000f92 <pack_left_shift_u16>
 800a04e:	4603      	mov	r3, r0
 800a050:	4619      	mov	r1, r3
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	3302      	adds	r3, #2
 800a056:	781a      	ldrb	r2, [r3, #0]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	3302      	adds	r3, #2
 800a05c:	430a      	orrs	r2, r1
 800a05e:	b2d2      	uxtb	r2, r2
 800a060:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s7, 8u, 0x0fu);
 800a062:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a066:	220f      	movs	r2, #15
 800a068:	2108      	movs	r1, #8
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7f6 ffa8 	bl	8000fc0 <pack_right_shift_u16>
 800a070:	4603      	mov	r3, r0
 800a072:	4619      	mov	r1, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	3303      	adds	r3, #3
 800a078:	781a      	ldrb	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3303      	adds	r3, #3
 800a07e:	430a      	orrs	r2, r1
 800a080:	b2d2      	uxtb	r2, r2
 800a082:	701a      	strb	r2, [r3, #0]
        t3s7 = (uint16_t)src_p->t3s7;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a08a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        dst_p[3] |= pack_left_shift_u16(t3s7, 4u, 0xf0u);
 800a08e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a092:	22f0      	movs	r2, #240	; 0xf0
 800a094:	2104      	movs	r1, #4
 800a096:	4618      	mov	r0, r3
 800a098:	f7f6 ff7b 	bl	8000f92 <pack_left_shift_u16>
 800a09c:	4603      	mov	r3, r0
 800a09e:	4619      	mov	r1, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3303      	adds	r3, #3
 800a0a4:	781a      	ldrb	r2, [r3, #0]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3303      	adds	r3, #3
 800a0aa:	430a      	orrs	r2, r1
 800a0ac:	b2d2      	uxtb	r2, r2
 800a0ae:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s7, 4u, 0xffu);
 800a0b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a0b4:	22ff      	movs	r2, #255	; 0xff
 800a0b6:	2104      	movs	r1, #4
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7f6 ff81 	bl	8000fc0 <pack_right_shift_u16>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	3304      	adds	r3, #4
 800a0c6:	781a      	ldrb	r2, [r3, #0]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	b2d2      	uxtb	r2, r2
 800a0d0:	701a      	strb	r2, [r3, #0]
        t4s7 = (uint16_t)src_p->t4s7;
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800a0d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        dst_p[5] |= pack_left_shift_u16(t4s7, 0u, 0xffu);
 800a0dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a0e0:	22ff      	movs	r2, #255	; 0xff
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7f6 ff54 	bl	8000f92 <pack_left_shift_u16>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	3305      	adds	r3, #5
 800a0f2:	781a      	ldrb	r2, [r3, #0]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	3305      	adds	r3, #5
 800a0f8:	430a      	orrs	r2, r1
 800a0fa:	b2d2      	uxtb	r2, r2
 800a0fc:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s7, 8u, 0x0fu);
 800a0fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a102:	220f      	movs	r2, #15
 800a104:	2108      	movs	r1, #8
 800a106:	4618      	mov	r0, r3
 800a108:	f7f6 ff5a 	bl	8000fc0 <pack_right_shift_u16>
 800a10c:	4603      	mov	r3, r0
 800a10e:	4619      	mov	r1, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	3306      	adds	r3, #6
 800a114:	781a      	ldrb	r2, [r3, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	3306      	adds	r3, #6
 800a11a:	430a      	orrs	r2, r1
 800a11c:	b2d2      	uxtb	r2, r2
 800a11e:	701a      	strb	r2, [r3, #0]
        t5s7 = (uint16_t)src_p->t5s7;
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	f9b3 306e 	ldrsh.w	r3, [r3, #110]	; 0x6e
 800a126:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        dst_p[6] |= pack_left_shift_u16(t5s7, 4u, 0xf0u);
 800a12a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a12e:	22f0      	movs	r2, #240	; 0xf0
 800a130:	2104      	movs	r1, #4
 800a132:	4618      	mov	r0, r3
 800a134:	f7f6 ff2d 	bl	8000f92 <pack_left_shift_u16>
 800a138:	4603      	mov	r3, r0
 800a13a:	4619      	mov	r1, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	3306      	adds	r3, #6
 800a140:	781a      	ldrb	r2, [r3, #0]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	3306      	adds	r3, #6
 800a146:	430a      	orrs	r2, r1
 800a148:	b2d2      	uxtb	r2, r2
 800a14a:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s7, 4u, 0xffu);
 800a14c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a150:	22ff      	movs	r2, #255	; 0xff
 800a152:	2104      	movs	r1, #4
 800a154:	4618      	mov	r0, r3
 800a156:	f7f6 ff33 	bl	8000fc0 <pack_right_shift_u16>
 800a15a:	4603      	mov	r3, r0
 800a15c:	4619      	mov	r1, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	3307      	adds	r3, #7
 800a162:	781a      	ldrb	r2, [r3, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	3307      	adds	r3, #7
 800a168:	430a      	orrs	r2, r1
 800a16a:	b2d2      	uxtb	r2, r2
 800a16c:	701a      	strb	r2, [r3, #0]
        break;
 800a16e:	e3ca      	b.n	800a906 <can1_ams_cell_temperatures_pack+0x1232>

    case 7:
        t1s8 = (uint16_t)src_p->t1s8;
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a176:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        dst_p[0] |= pack_left_shift_u16(t1s8, 4u, 0xf0u);
 800a17a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a17e:	22f0      	movs	r2, #240	; 0xf0
 800a180:	2104      	movs	r1, #4
 800a182:	4618      	mov	r0, r3
 800a184:	f7f6 ff05 	bl	8000f92 <pack_left_shift_u16>
 800a188:	4603      	mov	r3, r0
 800a18a:	461a      	mov	r2, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	4313      	orrs	r3, r2
 800a192:	b2da      	uxtb	r2, r3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s8, 4u, 0xffu);
 800a198:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a19c:	22ff      	movs	r2, #255	; 0xff
 800a19e:	2104      	movs	r1, #4
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7f6 ff0d 	bl	8000fc0 <pack_right_shift_u16>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	781a      	ldrb	r2, [r3, #0]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	b2d2      	uxtb	r2, r2
 800a1b8:	701a      	strb	r2, [r3, #0]
        t2s8 = (uint16_t)src_p->t2s8;
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800a1c0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        dst_p[2] |= pack_left_shift_u16(t2s8, 0u, 0xffu);
 800a1c4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a1c8:	22ff      	movs	r2, #255	; 0xff
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7f6 fee0 	bl	8000f92 <pack_left_shift_u16>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3302      	adds	r3, #2
 800a1da:	781a      	ldrb	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	3302      	adds	r3, #2
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	b2d2      	uxtb	r2, r2
 800a1e4:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s8, 8u, 0x0fu);
 800a1e6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a1ea:	220f      	movs	r2, #15
 800a1ec:	2108      	movs	r1, #8
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7f6 fee6 	bl	8000fc0 <pack_right_shift_u16>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	3303      	adds	r3, #3
 800a1fc:	781a      	ldrb	r2, [r3, #0]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3303      	adds	r3, #3
 800a202:	430a      	orrs	r2, r1
 800a204:	b2d2      	uxtb	r2, r2
 800a206:	701a      	strb	r2, [r3, #0]
        t3s8 = (uint16_t)src_p->t3s8;
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a20e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        dst_p[3] |= pack_left_shift_u16(t3s8, 4u, 0xf0u);
 800a212:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a216:	22f0      	movs	r2, #240	; 0xf0
 800a218:	2104      	movs	r1, #4
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7f6 feb9 	bl	8000f92 <pack_left_shift_u16>
 800a220:	4603      	mov	r3, r0
 800a222:	4619      	mov	r1, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	3303      	adds	r3, #3
 800a228:	781a      	ldrb	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	3303      	adds	r3, #3
 800a22e:	430a      	orrs	r2, r1
 800a230:	b2d2      	uxtb	r2, r2
 800a232:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s8, 4u, 0xffu);
 800a234:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a238:	22ff      	movs	r2, #255	; 0xff
 800a23a:	2104      	movs	r1, #4
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7f6 febf 	bl	8000fc0 <pack_right_shift_u16>
 800a242:	4603      	mov	r3, r0
 800a244:	4619      	mov	r1, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	3304      	adds	r3, #4
 800a24a:	781a      	ldrb	r2, [r3, #0]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	3304      	adds	r3, #4
 800a250:	430a      	orrs	r2, r1
 800a252:	b2d2      	uxtb	r2, r2
 800a254:	701a      	strb	r2, [r3, #0]
        t4s8 = (uint16_t)src_p->t4s8;
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800a25c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        dst_p[5] |= pack_left_shift_u16(t4s8, 0u, 0xffu);
 800a260:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800a264:	22ff      	movs	r2, #255	; 0xff
 800a266:	2100      	movs	r1, #0
 800a268:	4618      	mov	r0, r3
 800a26a:	f7f6 fe92 	bl	8000f92 <pack_left_shift_u16>
 800a26e:	4603      	mov	r3, r0
 800a270:	4619      	mov	r1, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3305      	adds	r3, #5
 800a276:	781a      	ldrb	r2, [r3, #0]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	3305      	adds	r3, #5
 800a27c:	430a      	orrs	r2, r1
 800a27e:	b2d2      	uxtb	r2, r2
 800a280:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s8, 8u, 0x0fu);
 800a282:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800a286:	220f      	movs	r2, #15
 800a288:	2108      	movs	r1, #8
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7f6 fe98 	bl	8000fc0 <pack_right_shift_u16>
 800a290:	4603      	mov	r3, r0
 800a292:	4619      	mov	r1, r3
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	3306      	adds	r3, #6
 800a298:	781a      	ldrb	r2, [r3, #0]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	3306      	adds	r3, #6
 800a29e:	430a      	orrs	r2, r1
 800a2a0:	b2d2      	uxtb	r2, r2
 800a2a2:	701a      	strb	r2, [r3, #0]
        t5s8 = (uint16_t)src_p->t5s8;
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800a2aa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        dst_p[6] |= pack_left_shift_u16(t5s8, 4u, 0xf0u);
 800a2ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2b2:	22f0      	movs	r2, #240	; 0xf0
 800a2b4:	2104      	movs	r1, #4
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7f6 fe6b 	bl	8000f92 <pack_left_shift_u16>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	4619      	mov	r1, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3306      	adds	r3, #6
 800a2c4:	781a      	ldrb	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3306      	adds	r3, #6
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	b2d2      	uxtb	r2, r2
 800a2ce:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s8, 4u, 0xffu);
 800a2d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2d4:	22ff      	movs	r2, #255	; 0xff
 800a2d6:	2104      	movs	r1, #4
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7f6 fe71 	bl	8000fc0 <pack_right_shift_u16>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	3307      	adds	r3, #7
 800a2e6:	781a      	ldrb	r2, [r3, #0]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3307      	adds	r3, #7
 800a2ec:	430a      	orrs	r2, r1
 800a2ee:	b2d2      	uxtb	r2, r2
 800a2f0:	701a      	strb	r2, [r3, #0]
        break;
 800a2f2:	e308      	b.n	800a906 <can1_ams_cell_temperatures_pack+0x1232>

    case 8:
        t1s9 = (uint16_t)src_p->t1s9;
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a2fa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        dst_p[0] |= pack_left_shift_u16(t1s9, 4u, 0xf0u);
 800a2fe:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a302:	22f0      	movs	r2, #240	; 0xf0
 800a304:	2104      	movs	r1, #4
 800a306:	4618      	mov	r0, r3
 800a308:	f7f6 fe43 	bl	8000f92 <pack_left_shift_u16>
 800a30c:	4603      	mov	r3, r0
 800a30e:	461a      	mov	r2, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	4313      	orrs	r3, r2
 800a316:	b2da      	uxtb	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s9, 4u, 0xffu);
 800a31c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a320:	22ff      	movs	r2, #255	; 0xff
 800a322:	2104      	movs	r1, #4
 800a324:	4618      	mov	r0, r3
 800a326:	f7f6 fe4b 	bl	8000fc0 <pack_right_shift_u16>
 800a32a:	4603      	mov	r3, r0
 800a32c:	4619      	mov	r1, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3301      	adds	r3, #1
 800a332:	781a      	ldrb	r2, [r3, #0]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	3301      	adds	r3, #1
 800a338:	430a      	orrs	r2, r1
 800a33a:	b2d2      	uxtb	r2, r2
 800a33c:	701a      	strb	r2, [r3, #0]
        t2s9 = (uint16_t)src_p->t2s9;
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800a344:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        dst_p[2] |= pack_left_shift_u16(t2s9, 0u, 0xffu);
 800a348:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a34c:	22ff      	movs	r2, #255	; 0xff
 800a34e:	2100      	movs	r1, #0
 800a350:	4618      	mov	r0, r3
 800a352:	f7f6 fe1e 	bl	8000f92 <pack_left_shift_u16>
 800a356:	4603      	mov	r3, r0
 800a358:	4619      	mov	r1, r3
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3302      	adds	r3, #2
 800a35e:	781a      	ldrb	r2, [r3, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	3302      	adds	r3, #2
 800a364:	430a      	orrs	r2, r1
 800a366:	b2d2      	uxtb	r2, r2
 800a368:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s9, 8u, 0x0fu);
 800a36a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a36e:	220f      	movs	r2, #15
 800a370:	2108      	movs	r1, #8
 800a372:	4618      	mov	r0, r3
 800a374:	f7f6 fe24 	bl	8000fc0 <pack_right_shift_u16>
 800a378:	4603      	mov	r3, r0
 800a37a:	4619      	mov	r1, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3303      	adds	r3, #3
 800a380:	781a      	ldrb	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	3303      	adds	r3, #3
 800a386:	430a      	orrs	r2, r1
 800a388:	b2d2      	uxtb	r2, r2
 800a38a:	701a      	strb	r2, [r3, #0]
        t3s9 = (uint16_t)src_p->t3s9;
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800a392:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        dst_p[3] |= pack_left_shift_u16(t3s9, 4u, 0xf0u);
 800a396:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a39a:	22f0      	movs	r2, #240	; 0xf0
 800a39c:	2104      	movs	r1, #4
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7f6 fdf7 	bl	8000f92 <pack_left_shift_u16>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3303      	adds	r3, #3
 800a3ac:	781a      	ldrb	r2, [r3, #0]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3303      	adds	r3, #3
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	b2d2      	uxtb	r2, r2
 800a3b6:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s9, 4u, 0xffu);
 800a3b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a3bc:	22ff      	movs	r2, #255	; 0xff
 800a3be:	2104      	movs	r1, #4
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7f6 fdfd 	bl	8000fc0 <pack_right_shift_u16>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3304      	adds	r3, #4
 800a3ce:	781a      	ldrb	r2, [r3, #0]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	3304      	adds	r3, #4
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	b2d2      	uxtb	r2, r2
 800a3d8:	701a      	strb	r2, [r3, #0]
        t4s9 = (uint16_t)src_p->t4s9;
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 800a3e0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        dst_p[5] |= pack_left_shift_u16(t4s9, 0u, 0xffu);
 800a3e4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a3e8:	22ff      	movs	r2, #255	; 0xff
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7f6 fdd0 	bl	8000f92 <pack_left_shift_u16>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	3305      	adds	r3, #5
 800a3fa:	781a      	ldrb	r2, [r3, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	3305      	adds	r3, #5
 800a400:	430a      	orrs	r2, r1
 800a402:	b2d2      	uxtb	r2, r2
 800a404:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s9, 8u, 0x0fu);
 800a406:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a40a:	220f      	movs	r2, #15
 800a40c:	2108      	movs	r1, #8
 800a40e:	4618      	mov	r0, r3
 800a410:	f7f6 fdd6 	bl	8000fc0 <pack_right_shift_u16>
 800a414:	4603      	mov	r3, r0
 800a416:	4619      	mov	r1, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3306      	adds	r3, #6
 800a41c:	781a      	ldrb	r2, [r3, #0]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	3306      	adds	r3, #6
 800a422:	430a      	orrs	r2, r1
 800a424:	b2d2      	uxtb	r2, r2
 800a426:	701a      	strb	r2, [r3, #0]
        t5s9 = (uint16_t)src_p->t5s9;
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800a42e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        dst_p[6] |= pack_left_shift_u16(t5s9, 4u, 0xf0u);
 800a432:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800a436:	22f0      	movs	r2, #240	; 0xf0
 800a438:	2104      	movs	r1, #4
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7f6 fda9 	bl	8000f92 <pack_left_shift_u16>
 800a440:	4603      	mov	r3, r0
 800a442:	4619      	mov	r1, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	3306      	adds	r3, #6
 800a448:	781a      	ldrb	r2, [r3, #0]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3306      	adds	r3, #6
 800a44e:	430a      	orrs	r2, r1
 800a450:	b2d2      	uxtb	r2, r2
 800a452:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s9, 4u, 0xffu);
 800a454:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800a458:	22ff      	movs	r2, #255	; 0xff
 800a45a:	2104      	movs	r1, #4
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7f6 fdaf 	bl	8000fc0 <pack_right_shift_u16>
 800a462:	4603      	mov	r3, r0
 800a464:	4619      	mov	r1, r3
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	3307      	adds	r3, #7
 800a46a:	781a      	ldrb	r2, [r3, #0]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	3307      	adds	r3, #7
 800a470:	430a      	orrs	r2, r1
 800a472:	b2d2      	uxtb	r2, r2
 800a474:	701a      	strb	r2, [r3, #0]
        break;
 800a476:	e246      	b.n	800a906 <can1_ams_cell_temperatures_pack+0x1232>

    case 9:
        t1s10 = (uint16_t)src_p->t1s10;
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a47e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        dst_p[0] |= pack_left_shift_u16(t1s10, 4u, 0xf0u);
 800a482:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800a486:	22f0      	movs	r2, #240	; 0xf0
 800a488:	2104      	movs	r1, #4
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7f6 fd81 	bl	8000f92 <pack_left_shift_u16>
 800a490:	4603      	mov	r3, r0
 800a492:	461a      	mov	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	4313      	orrs	r3, r2
 800a49a:	b2da      	uxtb	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s10, 4u, 0xffu);
 800a4a0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800a4a4:	22ff      	movs	r2, #255	; 0xff
 800a4a6:	2104      	movs	r1, #4
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7f6 fd89 	bl	8000fc0 <pack_right_shift_u16>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	781a      	ldrb	r2, [r3, #0]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	430a      	orrs	r2, r1
 800a4be:	b2d2      	uxtb	r2, r2
 800a4c0:	701a      	strb	r2, [r3, #0]
        t2s10 = (uint16_t)src_p->t2s10;
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800a4c8:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        dst_p[2] |= pack_left_shift_u16(t2s10, 0u, 0xffu);
 800a4cc:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800a4d0:	22ff      	movs	r2, #255	; 0xff
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7f6 fd5c 	bl	8000f92 <pack_left_shift_u16>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	4619      	mov	r1, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3302      	adds	r3, #2
 800a4e2:	781a      	ldrb	r2, [r3, #0]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	3302      	adds	r3, #2
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	b2d2      	uxtb	r2, r2
 800a4ec:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s10, 8u, 0x0fu);
 800a4ee:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800a4f2:	220f      	movs	r2, #15
 800a4f4:	2108      	movs	r1, #8
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7f6 fd62 	bl	8000fc0 <pack_right_shift_u16>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	4619      	mov	r1, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	3303      	adds	r3, #3
 800a504:	781a      	ldrb	r2, [r3, #0]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3303      	adds	r3, #3
 800a50a:	430a      	orrs	r2, r1
 800a50c:	b2d2      	uxtb	r2, r2
 800a50e:	701a      	strb	r2, [r3, #0]
        t3s10 = (uint16_t)src_p->t3s10;
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a516:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        dst_p[3] |= pack_left_shift_u16(t3s10, 4u, 0xf0u);
 800a51a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a51e:	22f0      	movs	r2, #240	; 0xf0
 800a520:	2104      	movs	r1, #4
 800a522:	4618      	mov	r0, r3
 800a524:	f7f6 fd35 	bl	8000f92 <pack_left_shift_u16>
 800a528:	4603      	mov	r3, r0
 800a52a:	4619      	mov	r1, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	3303      	adds	r3, #3
 800a530:	781a      	ldrb	r2, [r3, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	3303      	adds	r3, #3
 800a536:	430a      	orrs	r2, r1
 800a538:	b2d2      	uxtb	r2, r2
 800a53a:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s10, 4u, 0xffu);
 800a53c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a540:	22ff      	movs	r2, #255	; 0xff
 800a542:	2104      	movs	r1, #4
 800a544:	4618      	mov	r0, r3
 800a546:	f7f6 fd3b 	bl	8000fc0 <pack_right_shift_u16>
 800a54a:	4603      	mov	r3, r0
 800a54c:	4619      	mov	r1, r3
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	3304      	adds	r3, #4
 800a552:	781a      	ldrb	r2, [r3, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	3304      	adds	r3, #4
 800a558:	430a      	orrs	r2, r1
 800a55a:	b2d2      	uxtb	r2, r2
 800a55c:	701a      	strb	r2, [r3, #0]
        t4s10 = (uint16_t)src_p->t4s10;
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 800a564:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        dst_p[5] |= pack_left_shift_u16(t4s10, 0u, 0xffu);
 800a568:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a56c:	22ff      	movs	r2, #255	; 0xff
 800a56e:	2100      	movs	r1, #0
 800a570:	4618      	mov	r0, r3
 800a572:	f7f6 fd0e 	bl	8000f92 <pack_left_shift_u16>
 800a576:	4603      	mov	r3, r0
 800a578:	4619      	mov	r1, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3305      	adds	r3, #5
 800a57e:	781a      	ldrb	r2, [r3, #0]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3305      	adds	r3, #5
 800a584:	430a      	orrs	r2, r1
 800a586:	b2d2      	uxtb	r2, r2
 800a588:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s10, 8u, 0x0fu);
 800a58a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a58e:	220f      	movs	r2, #15
 800a590:	2108      	movs	r1, #8
 800a592:	4618      	mov	r0, r3
 800a594:	f7f6 fd14 	bl	8000fc0 <pack_right_shift_u16>
 800a598:	4603      	mov	r3, r0
 800a59a:	4619      	mov	r1, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3306      	adds	r3, #6
 800a5a0:	781a      	ldrb	r2, [r3, #0]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	3306      	adds	r3, #6
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	b2d2      	uxtb	r2, r2
 800a5aa:	701a      	strb	r2, [r3, #0]
        t5s10 = (uint16_t)src_p->t5s10;
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800a5b2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        dst_p[6] |= pack_left_shift_u16(t5s10, 4u, 0xf0u);
 800a5b6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800a5ba:	22f0      	movs	r2, #240	; 0xf0
 800a5bc:	2104      	movs	r1, #4
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7f6 fce7 	bl	8000f92 <pack_left_shift_u16>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	3306      	adds	r3, #6
 800a5cc:	781a      	ldrb	r2, [r3, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3306      	adds	r3, #6
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	b2d2      	uxtb	r2, r2
 800a5d6:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s10, 4u, 0xffu);
 800a5d8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800a5dc:	22ff      	movs	r2, #255	; 0xff
 800a5de:	2104      	movs	r1, #4
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7f6 fced 	bl	8000fc0 <pack_right_shift_u16>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	3307      	adds	r3, #7
 800a5ee:	781a      	ldrb	r2, [r3, #0]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	3307      	adds	r3, #7
 800a5f4:	430a      	orrs	r2, r1
 800a5f6:	b2d2      	uxtb	r2, r2
 800a5f8:	701a      	strb	r2, [r3, #0]
        break;
 800a5fa:	e184      	b.n	800a906 <can1_ams_cell_temperatures_pack+0x1232>

    case 10:
        t1s11 = (uint16_t)src_p->t1s11;
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a602:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        dst_p[0] |= pack_left_shift_u16(t1s11, 4u, 0xf0u);
 800a606:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800a60a:	22f0      	movs	r2, #240	; 0xf0
 800a60c:	2104      	movs	r1, #4
 800a60e:	4618      	mov	r0, r3
 800a610:	f7f6 fcbf 	bl	8000f92 <pack_left_shift_u16>
 800a614:	4603      	mov	r3, r0
 800a616:	461a      	mov	r2, r3
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s11, 4u, 0xffu);
 800a624:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800a628:	22ff      	movs	r2, #255	; 0xff
 800a62a:	2104      	movs	r1, #4
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7f6 fcc7 	bl	8000fc0 <pack_right_shift_u16>
 800a632:	4603      	mov	r3, r0
 800a634:	4619      	mov	r1, r3
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3301      	adds	r3, #1
 800a63a:	781a      	ldrb	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	3301      	adds	r3, #1
 800a640:	430a      	orrs	r2, r1
 800a642:	b2d2      	uxtb	r2, r2
 800a644:	701a      	strb	r2, [r3, #0]
        t2s11 = (uint16_t)src_p->t2s11;
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800a64c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        dst_p[2] |= pack_left_shift_u16(t2s11, 0u, 0xffu);
 800a650:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a654:	22ff      	movs	r2, #255	; 0xff
 800a656:	2100      	movs	r1, #0
 800a658:	4618      	mov	r0, r3
 800a65a:	f7f6 fc9a 	bl	8000f92 <pack_left_shift_u16>
 800a65e:	4603      	mov	r3, r0
 800a660:	4619      	mov	r1, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3302      	adds	r3, #2
 800a666:	781a      	ldrb	r2, [r3, #0]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3302      	adds	r3, #2
 800a66c:	430a      	orrs	r2, r1
 800a66e:	b2d2      	uxtb	r2, r2
 800a670:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s11, 8u, 0x0fu);
 800a672:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a676:	220f      	movs	r2, #15
 800a678:	2108      	movs	r1, #8
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7f6 fca0 	bl	8000fc0 <pack_right_shift_u16>
 800a680:	4603      	mov	r3, r0
 800a682:	4619      	mov	r1, r3
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	3303      	adds	r3, #3
 800a688:	781a      	ldrb	r2, [r3, #0]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3303      	adds	r3, #3
 800a68e:	430a      	orrs	r2, r1
 800a690:	b2d2      	uxtb	r2, r2
 800a692:	701a      	strb	r2, [r3, #0]
        t3s11 = (uint16_t)src_p->t3s11;
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a69a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        dst_p[3] |= pack_left_shift_u16(t3s11, 4u, 0xf0u);
 800a69e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a6a2:	22f0      	movs	r2, #240	; 0xf0
 800a6a4:	2104      	movs	r1, #4
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7f6 fc73 	bl	8000f92 <pack_left_shift_u16>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	3303      	adds	r3, #3
 800a6b4:	781a      	ldrb	r2, [r3, #0]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	3303      	adds	r3, #3
 800a6ba:	430a      	orrs	r2, r1
 800a6bc:	b2d2      	uxtb	r2, r2
 800a6be:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s11, 4u, 0xffu);
 800a6c0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a6c4:	22ff      	movs	r2, #255	; 0xff
 800a6c6:	2104      	movs	r1, #4
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7f6 fc79 	bl	8000fc0 <pack_right_shift_u16>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	781a      	ldrb	r2, [r3, #0]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	3304      	adds	r3, #4
 800a6dc:	430a      	orrs	r2, r1
 800a6de:	b2d2      	uxtb	r2, r2
 800a6e0:	701a      	strb	r2, [r3, #0]
        t4s11 = (uint16_t)src_p->t4s11;
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 800a6e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        dst_p[5] |= pack_left_shift_u16(t4s11, 0u, 0xffu);
 800a6ec:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a6f0:	22ff      	movs	r2, #255	; 0xff
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7f6 fc4c 	bl	8000f92 <pack_left_shift_u16>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3305      	adds	r3, #5
 800a702:	781a      	ldrb	r2, [r3, #0]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3305      	adds	r3, #5
 800a708:	430a      	orrs	r2, r1
 800a70a:	b2d2      	uxtb	r2, r2
 800a70c:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s11, 8u, 0x0fu);
 800a70e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a712:	220f      	movs	r2, #15
 800a714:	2108      	movs	r1, #8
 800a716:	4618      	mov	r0, r3
 800a718:	f7f6 fc52 	bl	8000fc0 <pack_right_shift_u16>
 800a71c:	4603      	mov	r3, r0
 800a71e:	4619      	mov	r1, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	3306      	adds	r3, #6
 800a724:	781a      	ldrb	r2, [r3, #0]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	3306      	adds	r3, #6
 800a72a:	430a      	orrs	r2, r1
 800a72c:	b2d2      	uxtb	r2, r2
 800a72e:	701a      	strb	r2, [r3, #0]
        t5s11 = (uint16_t)src_p->t5s11;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 800a736:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        dst_p[6] |= pack_left_shift_u16(t5s11, 4u, 0xf0u);
 800a73a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800a73e:	22f0      	movs	r2, #240	; 0xf0
 800a740:	2104      	movs	r1, #4
 800a742:	4618      	mov	r0, r3
 800a744:	f7f6 fc25 	bl	8000f92 <pack_left_shift_u16>
 800a748:	4603      	mov	r3, r0
 800a74a:	4619      	mov	r1, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	3306      	adds	r3, #6
 800a750:	781a      	ldrb	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3306      	adds	r3, #6
 800a756:	430a      	orrs	r2, r1
 800a758:	b2d2      	uxtb	r2, r2
 800a75a:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s11, 4u, 0xffu);
 800a75c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800a760:	22ff      	movs	r2, #255	; 0xff
 800a762:	2104      	movs	r1, #4
 800a764:	4618      	mov	r0, r3
 800a766:	f7f6 fc2b 	bl	8000fc0 <pack_right_shift_u16>
 800a76a:	4603      	mov	r3, r0
 800a76c:	4619      	mov	r1, r3
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	3307      	adds	r3, #7
 800a772:	781a      	ldrb	r2, [r3, #0]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	3307      	adds	r3, #7
 800a778:	430a      	orrs	r2, r1
 800a77a:	b2d2      	uxtb	r2, r2
 800a77c:	701a      	strb	r2, [r3, #0]
        break;
 800a77e:	e0c2      	b.n	800a906 <can1_ams_cell_temperatures_pack+0x1232>

    case 11:
        t1s12 = (uint16_t)src_p->t1s12;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a786:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        dst_p[0] |= pack_left_shift_u16(t1s12, 4u, 0xf0u);
 800a78a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a78e:	22f0      	movs	r2, #240	; 0xf0
 800a790:	2104      	movs	r1, #4
 800a792:	4618      	mov	r0, r3
 800a794:	f7f6 fbfd 	bl	8000f92 <pack_left_shift_u16>
 800a798:	4603      	mov	r3, r0
 800a79a:	461a      	mov	r2, r3
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s12, 4u, 0xffu);
 800a7a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a7ac:	22ff      	movs	r2, #255	; 0xff
 800a7ae:	2104      	movs	r1, #4
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7f6 fc05 	bl	8000fc0 <pack_right_shift_u16>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	781a      	ldrb	r2, [r3, #0]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	b2d2      	uxtb	r2, r2
 800a7c8:	701a      	strb	r2, [r3, #0]
        t2s12 = (uint16_t)src_p->t2s12;
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a7d0:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        dst_p[2] |= pack_left_shift_u16(t2s12, 0u, 0xffu);
 800a7d4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a7d8:	22ff      	movs	r2, #255	; 0xff
 800a7da:	2100      	movs	r1, #0
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7f6 fbd8 	bl	8000f92 <pack_left_shift_u16>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	3302      	adds	r3, #2
 800a7ea:	781a      	ldrb	r2, [r3, #0]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	3302      	adds	r3, #2
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	b2d2      	uxtb	r2, r2
 800a7f4:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s12, 8u, 0x0fu);
 800a7f6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a7fa:	220f      	movs	r2, #15
 800a7fc:	2108      	movs	r1, #8
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7f6 fbde 	bl	8000fc0 <pack_right_shift_u16>
 800a804:	4603      	mov	r3, r0
 800a806:	4619      	mov	r1, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	3303      	adds	r3, #3
 800a80c:	781a      	ldrb	r2, [r3, #0]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	3303      	adds	r3, #3
 800a812:	430a      	orrs	r2, r1
 800a814:	b2d2      	uxtb	r2, r2
 800a816:	701a      	strb	r2, [r3, #0]
        t3s12 = (uint16_t)src_p->t3s12;
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800a81e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        dst_p[3] |= pack_left_shift_u16(t3s12, 4u, 0xf0u);
 800a822:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800a826:	22f0      	movs	r2, #240	; 0xf0
 800a828:	2104      	movs	r1, #4
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7f6 fbb1 	bl	8000f92 <pack_left_shift_u16>
 800a830:	4603      	mov	r3, r0
 800a832:	4619      	mov	r1, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	3303      	adds	r3, #3
 800a838:	781a      	ldrb	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3303      	adds	r3, #3
 800a83e:	430a      	orrs	r2, r1
 800a840:	b2d2      	uxtb	r2, r2
 800a842:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s12, 4u, 0xffu);
 800a844:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800a848:	22ff      	movs	r2, #255	; 0xff
 800a84a:	2104      	movs	r1, #4
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7f6 fbb7 	bl	8000fc0 <pack_right_shift_u16>
 800a852:	4603      	mov	r3, r0
 800a854:	4619      	mov	r1, r3
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3304      	adds	r3, #4
 800a85a:	781a      	ldrb	r2, [r3, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	3304      	adds	r3, #4
 800a860:	430a      	orrs	r2, r1
 800a862:	b2d2      	uxtb	r2, r2
 800a864:	701a      	strb	r2, [r3, #0]
        t4s12 = (uint16_t)src_p->t4s12;
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 800a86c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        dst_p[5] |= pack_left_shift_u16(t4s12, 0u, 0xffu);
 800a870:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800a874:	22ff      	movs	r2, #255	; 0xff
 800a876:	2100      	movs	r1, #0
 800a878:	4618      	mov	r0, r3
 800a87a:	f7f6 fb8a 	bl	8000f92 <pack_left_shift_u16>
 800a87e:	4603      	mov	r3, r0
 800a880:	4619      	mov	r1, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3305      	adds	r3, #5
 800a886:	781a      	ldrb	r2, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	3305      	adds	r3, #5
 800a88c:	430a      	orrs	r2, r1
 800a88e:	b2d2      	uxtb	r2, r2
 800a890:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s12, 8u, 0x0fu);
 800a892:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800a896:	220f      	movs	r2, #15
 800a898:	2108      	movs	r1, #8
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7f6 fb90 	bl	8000fc0 <pack_right_shift_u16>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	3306      	adds	r3, #6
 800a8a8:	781a      	ldrb	r2, [r3, #0]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3306      	adds	r3, #6
 800a8ae:	430a      	orrs	r2, r1
 800a8b0:	b2d2      	uxtb	r2, r2
 800a8b2:	701a      	strb	r2, [r3, #0]
        t5s12 = (uint16_t)src_p->t5s12;
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800a8ba:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        dst_p[6] |= pack_left_shift_u16(t5s12, 4u, 0xf0u);
 800a8be:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800a8c2:	22f0      	movs	r2, #240	; 0xf0
 800a8c4:	2104      	movs	r1, #4
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7f6 fb63 	bl	8000f92 <pack_left_shift_u16>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	3306      	adds	r3, #6
 800a8d4:	781a      	ldrb	r2, [r3, #0]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	3306      	adds	r3, #6
 800a8da:	430a      	orrs	r2, r1
 800a8dc:	b2d2      	uxtb	r2, r2
 800a8de:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s12, 4u, 0xffu);
 800a8e0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800a8e4:	22ff      	movs	r2, #255	; 0xff
 800a8e6:	2104      	movs	r1, #4
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7f6 fb69 	bl	8000fc0 <pack_right_shift_u16>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3307      	adds	r3, #7
 800a8f6:	781a      	ldrb	r2, [r3, #0]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	3307      	adds	r3, #7
 800a8fc:	430a      	orrs	r2, r1
 800a8fe:	b2d2      	uxtb	r2, r2
 800a900:	701a      	strb	r2, [r3, #0]
        break;
 800a902:	e000      	b.n	800a906 <can1_ams_cell_temperatures_pack+0x1232>

    default:
        break;
 800a904:	bf00      	nop
    }

    return (8);
 800a906:	2308      	movs	r3, #8
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3788      	adds	r7, #136	; 0x88
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <can1_ams_cell_temperatures_unpack>:

int can1_ams_cell_temperatures_unpack(
    struct can1_ams_cell_temperatures_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b0a2      	sub	sp, #136	; 0x88
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
    uint16_t t5s6;
    uint16_t t5s7;
    uint16_t t5s8;
    uint16_t t5s9;

    if (size < 8u) {
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b07      	cmp	r3, #7
 800a920:	d803      	bhi.n	800a92a <can1_ams_cell_temperatures_unpack+0x1a>
        return (-EINVAL);
 800a922:	f06f 0315 	mvn.w	r3, #21
 800a926:	f001 ba11 	b.w	800bd4c <can1_ams_cell_temperatures_unpack+0x143c>
    }

    dst_p->temperature_multiplexor = unpack_right_shift_u8(src_p[0], 0u, 0x0fu);
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	220f      	movs	r2, #15
 800a930:	2100      	movs	r1, #0
 800a932:	4618      	mov	r0, r3
 800a934:	f7f6 fb73 	bl	800101e <unpack_right_shift_u8>
 800a938:	4603      	mov	r3, r0
 800a93a:	461a      	mov	r2, r3
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	701a      	strb	r2, [r3, #0]

    switch (dst_p->temperature_multiplexor) {
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	2b0b      	cmp	r3, #11
 800a946:	f201 81ff 	bhi.w	800bd48 <can1_ams_cell_temperatures_unpack+0x1438>
 800a94a:	a201      	add	r2, pc, #4	; (adr r2, 800a950 <can1_ams_cell_temperatures_unpack+0x40>)
 800a94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a950:	0800a981 	.word	0x0800a981
 800a954:	0800ab27 	.word	0x0800ab27
 800a958:	0800accd 	.word	0x0800accd
 800a95c:	0800ae73 	.word	0x0800ae73
 800a960:	0800b019 	.word	0x0800b019
 800a964:	0800b1bf 	.word	0x0800b1bf
 800a968:	0800b365 	.word	0x0800b365
 800a96c:	0800b50b 	.word	0x0800b50b
 800a970:	0800b6b1 	.word	0x0800b6b1
 800a974:	0800b857 	.word	0x0800b857
 800a978:	0800b9fd 	.word	0x0800b9fd
 800a97c:	0800bba3 	.word	0x0800bba3

    case 0:
        t1s1 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	22f0      	movs	r2, #240	; 0xf0
 800a986:	2104      	movs	r1, #4
 800a988:	4618      	mov	r0, r3
 800a98a:	f7f6 fb60 	bl	800104e <unpack_right_shift_u16>
 800a98e:	4603      	mov	r3, r0
 800a990:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        t1s1 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	3301      	adds	r3, #1
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	22ff      	movs	r2, #255	; 0xff
 800a99c:	2104      	movs	r1, #4
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7f6 fb25 	bl	8000fee <unpack_left_shift_u16>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

        if ((t1s1 & (1u << 11)) != 0u) {
 800a9b2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800a9b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d007      	beq.n	800a9ce <can1_ams_cell_temperatures_unpack+0xbe>
            t1s1 |= 0xf000u;
 800a9be:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800a9c2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800a9c6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800a9ca:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        }

        dst_p->t1s1 = (int16_t)t1s1;
 800a9ce:	f9b7 2080 	ldrsh.w	r2, [r7, #128]	; 0x80
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	805a      	strh	r2, [r3, #2]
        t2s1 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	3302      	adds	r3, #2
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	22ff      	movs	r2, #255	; 0xff
 800a9de:	2100      	movs	r1, #0
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7f6 fb34 	bl	800104e <unpack_right_shift_u16>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        t2s1 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	3303      	adds	r3, #3
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	220f      	movs	r2, #15
 800a9f4:	2108      	movs	r1, #8
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7f6 faf9 	bl	8000fee <unpack_left_shift_u16>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	461a      	mov	r2, r3
 800aa00:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800aa04:	4313      	orrs	r3, r2
 800aa06:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

        if ((t2s1 & (1u << 11)) != 0u) {
 800aa0a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800aa0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d007      	beq.n	800aa26 <can1_ams_cell_temperatures_unpack+0x116>
            t2s1 |= 0xf000u;
 800aa16:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800aa1a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800aa1e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800aa22:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        }

        dst_p->t2s1 = (int16_t)t2s1;
 800aa26:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	835a      	strh	r2, [r3, #26]
        t3s1 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	3303      	adds	r3, #3
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	22f0      	movs	r2, #240	; 0xf0
 800aa36:	2104      	movs	r1, #4
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7f6 fb08 	bl	800104e <unpack_right_shift_u16>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        t3s1 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	3304      	adds	r3, #4
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	22ff      	movs	r2, #255	; 0xff
 800aa4c:	2104      	movs	r1, #4
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7f6 facd 	bl	8000fee <unpack_left_shift_u16>
 800aa54:	4603      	mov	r3, r0
 800aa56:	461a      	mov	r2, r3
 800aa58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

        if ((t3s1 & (1u << 11)) != 0u) {
 800aa62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800aa66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d007      	beq.n	800aa7e <can1_ams_cell_temperatures_unpack+0x16e>
            t3s1 |= 0xf000u;
 800aa6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800aa72:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800aa76:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800aa7a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        }

        dst_p->t3s1 = (int16_t)t3s1;
 800aa7e:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	865a      	strh	r2, [r3, #50]	; 0x32
        t4s1 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	3305      	adds	r3, #5
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	22ff      	movs	r2, #255	; 0xff
 800aa8e:	2100      	movs	r1, #0
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7f6 fadc 	bl	800104e <unpack_right_shift_u16>
 800aa96:	4603      	mov	r3, r0
 800aa98:	873b      	strh	r3, [r7, #56]	; 0x38
        t4s1 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	3306      	adds	r3, #6
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	220f      	movs	r2, #15
 800aaa2:	2108      	movs	r1, #8
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7f6 faa2 	bl	8000fee <unpack_left_shift_u16>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	461a      	mov	r2, r3
 800aaae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aab0:	4313      	orrs	r3, r2
 800aab2:	873b      	strh	r3, [r7, #56]	; 0x38

        if ((t4s1 & (1u << 11)) != 0u) {
 800aab4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d005      	beq.n	800aaca <can1_ams_cell_temperatures_unpack+0x1ba>
            t4s1 |= 0xf000u;
 800aabe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aac0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800aac4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800aac8:	873b      	strh	r3, [r7, #56]	; 0x38
        }

        dst_p->t4s1 = (int16_t)t4s1;
 800aaca:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        t5s1 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	3306      	adds	r3, #6
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	22f0      	movs	r2, #240	; 0xf0
 800aadc:	2104      	movs	r1, #4
 800aade:	4618      	mov	r0, r3
 800aae0:	f7f6 fab5 	bl	800104e <unpack_right_shift_u16>
 800aae4:	4603      	mov	r3, r0
 800aae6:	843b      	strh	r3, [r7, #32]
        t5s1 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	3307      	adds	r3, #7
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	22ff      	movs	r2, #255	; 0xff
 800aaf0:	2104      	movs	r1, #4
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7f6 fa7b 	bl	8000fee <unpack_left_shift_u16>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	461a      	mov	r2, r3
 800aafc:	8c3b      	ldrh	r3, [r7, #32]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	843b      	strh	r3, [r7, #32]

        if ((t5s1 & (1u << 11)) != 0u) {
 800ab02:	8c3b      	ldrh	r3, [r7, #32]
 800ab04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d005      	beq.n	800ab18 <can1_ams_cell_temperatures_unpack+0x208>
            t5s1 |= 0xf000u;
 800ab0c:	8c3b      	ldrh	r3, [r7, #32]
 800ab0e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ab12:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ab16:	843b      	strh	r3, [r7, #32]
        }

        dst_p->t5s1 = (int16_t)t5s1;
 800ab18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        break;
 800ab22:	f001 b912 	b.w	800bd4a <can1_ams_cell_temperatures_unpack+0x143a>

    case 1:
        t1s2 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	22f0      	movs	r2, #240	; 0xf0
 800ab2c:	2104      	movs	r1, #4
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7f6 fa8d 	bl	800104e <unpack_right_shift_u16>
 800ab34:	4603      	mov	r3, r0
 800ab36:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        t1s2 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	22ff      	movs	r2, #255	; 0xff
 800ab42:	2104      	movs	r1, #4
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7f6 fa52 	bl	8000fee <unpack_left_shift_u16>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ab52:	4313      	orrs	r3, r2
 800ab54:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        if ((t1s2 & (1u << 11)) != 0u) {
 800ab58:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ab5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d007      	beq.n	800ab74 <can1_ams_cell_temperatures_unpack+0x264>
            t1s2 |= 0xf000u;
 800ab64:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ab68:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ab6c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ab70:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        }

        dst_p->t1s2 = (int16_t)t1s2;
 800ab74:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	809a      	strh	r2, [r3, #4]
        t2s2 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	3302      	adds	r3, #2
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	22ff      	movs	r2, #255	; 0xff
 800ab84:	2100      	movs	r1, #0
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7f6 fa61 	bl	800104e <unpack_right_shift_u16>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        t2s2 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	3303      	adds	r3, #3
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	220f      	movs	r2, #15
 800ab9a:	2108      	movs	r1, #8
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7f6 fa26 	bl	8000fee <unpack_left_shift_u16>
 800aba2:	4603      	mov	r3, r0
 800aba4:	461a      	mov	r2, r3
 800aba6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800abaa:	4313      	orrs	r3, r2
 800abac:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        if ((t2s2 & (1u << 11)) != 0u) {
 800abb0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800abb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d007      	beq.n	800abcc <can1_ams_cell_temperatures_unpack+0x2bc>
            t2s2 |= 0xf000u;
 800abbc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800abc0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800abc4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800abc8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        }

        dst_p->t2s2 = (int16_t)t2s2;
 800abcc:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	839a      	strh	r2, [r3, #28]
        t3s2 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	3303      	adds	r3, #3
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	22f0      	movs	r2, #240	; 0xf0
 800abdc:	2104      	movs	r1, #4
 800abde:	4618      	mov	r0, r3
 800abe0:	f7f6 fa35 	bl	800104e <unpack_right_shift_u16>
 800abe4:	4603      	mov	r3, r0
 800abe6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        t3s2 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	3304      	adds	r3, #4
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	22ff      	movs	r2, #255	; 0xff
 800abf2:	2104      	movs	r1, #4
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7f6 f9fa 	bl	8000fee <unpack_left_shift_u16>
 800abfa:	4603      	mov	r3, r0
 800abfc:	461a      	mov	r2, r3
 800abfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac02:	4313      	orrs	r3, r2
 800ac04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        if ((t3s2 & (1u << 11)) != 0u) {
 800ac08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d007      	beq.n	800ac24 <can1_ams_cell_temperatures_unpack+0x314>
            t3s2 |= 0xf000u;
 800ac14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac18:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ac1c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ac20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }

        dst_p->t3s2 = (int16_t)t3s2;
 800ac24:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	869a      	strh	r2, [r3, #52]	; 0x34
        t4s2 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	3305      	adds	r3, #5
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	22ff      	movs	r2, #255	; 0xff
 800ac34:	2100      	movs	r1, #0
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7f6 fa09 	bl	800104e <unpack_right_shift_u16>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	86fb      	strh	r3, [r7, #54]	; 0x36
        t4s2 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	3306      	adds	r3, #6
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	220f      	movs	r2, #15
 800ac48:	2108      	movs	r1, #8
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7f6 f9cf 	bl	8000fee <unpack_left_shift_u16>
 800ac50:	4603      	mov	r3, r0
 800ac52:	461a      	mov	r2, r3
 800ac54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac56:	4313      	orrs	r3, r2
 800ac58:	86fb      	strh	r3, [r7, #54]	; 0x36

        if ((t4s2 & (1u << 11)) != 0u) {
 800ac5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d005      	beq.n	800ac70 <can1_ams_cell_temperatures_unpack+0x360>
            t4s2 |= 0xf000u;
 800ac64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac66:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ac6a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ac6e:	86fb      	strh	r3, [r7, #54]	; 0x36
        }

        dst_p->t4s2 = (int16_t)t4s2;
 800ac70:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        t5s2 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	3306      	adds	r3, #6
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	22f0      	movs	r2, #240	; 0xf0
 800ac82:	2104      	movs	r1, #4
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7f6 f9e2 	bl	800104e <unpack_right_shift_u16>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	83fb      	strh	r3, [r7, #30]
        t5s2 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	3307      	adds	r3, #7
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	22ff      	movs	r2, #255	; 0xff
 800ac96:	2104      	movs	r1, #4
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7f6 f9a8 	bl	8000fee <unpack_left_shift_u16>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	461a      	mov	r2, r3
 800aca2:	8bfb      	ldrh	r3, [r7, #30]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	83fb      	strh	r3, [r7, #30]

        if ((t5s2 & (1u << 11)) != 0u) {
 800aca8:	8bfb      	ldrh	r3, [r7, #30]
 800acaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d005      	beq.n	800acbe <can1_ams_cell_temperatures_unpack+0x3ae>
            t5s2 |= 0xf000u;
 800acb2:	8bfb      	ldrh	r3, [r7, #30]
 800acb4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800acb8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800acbc:	83fb      	strh	r3, [r7, #30]
        }

        dst_p->t5s2 = (int16_t)t5s2;
 800acbe:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
        break;
 800acc8:	f001 b83f 	b.w	800bd4a <can1_ams_cell_temperatures_unpack+0x143a>

    case 2:
        t1s3 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	22f0      	movs	r2, #240	; 0xf0
 800acd2:	2104      	movs	r1, #4
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7f6 f9ba 	bl	800104e <unpack_right_shift_u16>
 800acda:	4603      	mov	r3, r0
 800acdc:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        t1s3 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	3301      	adds	r3, #1
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	22ff      	movs	r2, #255	; 0xff
 800ace8:	2104      	movs	r1, #4
 800acea:	4618      	mov	r0, r3
 800acec:	f7f6 f97f 	bl	8000fee <unpack_left_shift_u16>
 800acf0:	4603      	mov	r3, r0
 800acf2:	461a      	mov	r2, r3
 800acf4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800acf8:	4313      	orrs	r3, r2
 800acfa:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

        if ((t1s3 & (1u << 11)) != 0u) {
 800acfe:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800ad02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d007      	beq.n	800ad1a <can1_ams_cell_temperatures_unpack+0x40a>
            t1s3 |= 0xf000u;
 800ad0a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800ad0e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ad12:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ad16:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        }

        dst_p->t1s3 = (int16_t)t1s3;
 800ad1a:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	; 0x7c
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	80da      	strh	r2, [r3, #6]
        t2s3 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	3302      	adds	r3, #2
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	22ff      	movs	r2, #255	; 0xff
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7f6 f98e 	bl	800104e <unpack_right_shift_u16>
 800ad32:	4603      	mov	r3, r0
 800ad34:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        t2s3 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	3303      	adds	r3, #3
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	220f      	movs	r2, #15
 800ad40:	2108      	movs	r1, #8
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7f6 f953 	bl	8000fee <unpack_left_shift_u16>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ad50:	4313      	orrs	r3, r2
 800ad52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

        if ((t2s3 & (1u << 11)) != 0u) {
 800ad56:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ad5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d007      	beq.n	800ad72 <can1_ams_cell_temperatures_unpack+0x462>
            t2s3 |= 0xf000u;
 800ad62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ad66:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ad6a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ad6e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        }

        dst_p->t2s3 = (int16_t)t2s3;
 800ad72:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	83da      	strh	r2, [r3, #30]
        t3s3 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	3303      	adds	r3, #3
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	22f0      	movs	r2, #240	; 0xf0
 800ad82:	2104      	movs	r1, #4
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7f6 f962 	bl	800104e <unpack_right_shift_u16>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        t3s3 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	3304      	adds	r3, #4
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	22ff      	movs	r2, #255	; 0xff
 800ad98:	2104      	movs	r1, #4
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7f6 f927 	bl	8000fee <unpack_left_shift_u16>
 800ada0:	4603      	mov	r3, r0
 800ada2:	461a      	mov	r2, r3
 800ada4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ada8:	4313      	orrs	r3, r2
 800adaa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        if ((t3s3 & (1u << 11)) != 0u) {
 800adae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800adb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d007      	beq.n	800adca <can1_ams_cell_temperatures_unpack+0x4ba>
            t3s3 |= 0xf000u;
 800adba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800adbe:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800adc2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800adc6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        }

        dst_p->t3s3 = (int16_t)t3s3;
 800adca:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	86da      	strh	r2, [r3, #54]	; 0x36
        t4s3 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	3305      	adds	r3, #5
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	22ff      	movs	r2, #255	; 0xff
 800adda:	2100      	movs	r1, #0
 800addc:	4618      	mov	r0, r3
 800adde:	f7f6 f936 	bl	800104e <unpack_right_shift_u16>
 800ade2:	4603      	mov	r3, r0
 800ade4:	86bb      	strh	r3, [r7, #52]	; 0x34
        t4s3 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	3306      	adds	r3, #6
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	220f      	movs	r2, #15
 800adee:	2108      	movs	r1, #8
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7f6 f8fc 	bl	8000fee <unpack_left_shift_u16>
 800adf6:	4603      	mov	r3, r0
 800adf8:	461a      	mov	r2, r3
 800adfa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800adfc:	4313      	orrs	r3, r2
 800adfe:	86bb      	strh	r3, [r7, #52]	; 0x34

        if ((t4s3 & (1u << 11)) != 0u) {
 800ae00:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ae02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d005      	beq.n	800ae16 <can1_ams_cell_temperatures_unpack+0x506>
            t4s3 |= 0xf000u;
 800ae0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ae0c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ae10:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ae14:	86bb      	strh	r3, [r7, #52]	; 0x34
        }

        dst_p->t4s3 = (int16_t)t4s3;
 800ae16:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
        t5s3 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	3306      	adds	r3, #6
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	22f0      	movs	r2, #240	; 0xf0
 800ae28:	2104      	movs	r1, #4
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7f6 f90f 	bl	800104e <unpack_right_shift_u16>
 800ae30:	4603      	mov	r3, r0
 800ae32:	83bb      	strh	r3, [r7, #28]
        t5s3 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	3307      	adds	r3, #7
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	22ff      	movs	r2, #255	; 0xff
 800ae3c:	2104      	movs	r1, #4
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7f6 f8d5 	bl	8000fee <unpack_left_shift_u16>
 800ae44:	4603      	mov	r3, r0
 800ae46:	461a      	mov	r2, r3
 800ae48:	8bbb      	ldrh	r3, [r7, #28]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	83bb      	strh	r3, [r7, #28]

        if ((t5s3 & (1u << 11)) != 0u) {
 800ae4e:	8bbb      	ldrh	r3, [r7, #28]
 800ae50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d005      	beq.n	800ae64 <can1_ams_cell_temperatures_unpack+0x554>
            t5s3 |= 0xf000u;
 800ae58:	8bbb      	ldrh	r3, [r7, #28]
 800ae5a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ae5e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ae62:	83bb      	strh	r3, [r7, #28]
        }

        dst_p->t5s3 = (int16_t)t5s3;
 800ae64:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        break;
 800ae6e:	f000 bf6c 	b.w	800bd4a <can1_ams_cell_temperatures_unpack+0x143a>

    case 3:
        t1s4 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	22f0      	movs	r2, #240	; 0xf0
 800ae78:	2104      	movs	r1, #4
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7f6 f8e7 	bl	800104e <unpack_right_shift_u16>
 800ae80:	4603      	mov	r3, r0
 800ae82:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        t1s4 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	22ff      	movs	r2, #255	; 0xff
 800ae8e:	2104      	movs	r1, #4
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f6 f8ac 	bl	8000fee <unpack_left_shift_u16>
 800ae96:	4603      	mov	r3, r0
 800ae98:	461a      	mov	r2, r3
 800ae9a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

        if ((t1s4 & (1u << 11)) != 0u) {
 800aea4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800aea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d007      	beq.n	800aec0 <can1_ams_cell_temperatures_unpack+0x5b0>
            t1s4 |= 0xf000u;
 800aeb0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800aeb4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800aeb8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800aebc:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        }

        dst_p->t1s4 = (int16_t)t1s4;
 800aec0:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	811a      	strh	r2, [r3, #8]
        t2s4 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	3302      	adds	r3, #2
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	22ff      	movs	r2, #255	; 0xff
 800aed0:	2100      	movs	r1, #0
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7f6 f8bb 	bl	800104e <unpack_right_shift_u16>
 800aed8:	4603      	mov	r3, r0
 800aeda:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        t2s4 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	3303      	adds	r3, #3
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	220f      	movs	r2, #15
 800aee6:	2108      	movs	r1, #8
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7f6 f880 	bl	8000fee <unpack_left_shift_u16>
 800aeee:	4603      	mov	r3, r0
 800aef0:	461a      	mov	r2, r3
 800aef2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aef6:	4313      	orrs	r3, r2
 800aef8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        if ((t2s4 & (1u << 11)) != 0u) {
 800aefc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800af00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af04:	2b00      	cmp	r3, #0
 800af06:	d007      	beq.n	800af18 <can1_ams_cell_temperatures_unpack+0x608>
            t2s4 |= 0xf000u;
 800af08:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800af0c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800af10:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800af14:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        }

        dst_p->t2s4 = (int16_t)t2s4;
 800af18:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	841a      	strh	r2, [r3, #32]
        t3s4 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	3303      	adds	r3, #3
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	22f0      	movs	r2, #240	; 0xf0
 800af28:	2104      	movs	r1, #4
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7f6 f88f 	bl	800104e <unpack_right_shift_u16>
 800af30:	4603      	mov	r3, r0
 800af32:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        t3s4 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	3304      	adds	r3, #4
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	22ff      	movs	r2, #255	; 0xff
 800af3e:	2104      	movs	r1, #4
 800af40:	4618      	mov	r0, r3
 800af42:	f7f6 f854 	bl	8000fee <unpack_left_shift_u16>
 800af46:	4603      	mov	r3, r0
 800af48:	461a      	mov	r2, r3
 800af4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800af4e:	4313      	orrs	r3, r2
 800af50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((t3s4 & (1u << 11)) != 0u) {
 800af54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800af58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d007      	beq.n	800af70 <can1_ams_cell_temperatures_unpack+0x660>
            t3s4 |= 0xf000u;
 800af60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800af64:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800af68:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800af6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        }

        dst_p->t3s4 = (int16_t)t3s4;
 800af70:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	871a      	strh	r2, [r3, #56]	; 0x38
        t4s4 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	3305      	adds	r3, #5
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	22ff      	movs	r2, #255	; 0xff
 800af80:	2100      	movs	r1, #0
 800af82:	4618      	mov	r0, r3
 800af84:	f7f6 f863 	bl	800104e <unpack_right_shift_u16>
 800af88:	4603      	mov	r3, r0
 800af8a:	867b      	strh	r3, [r7, #50]	; 0x32
        t4s4 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	3306      	adds	r3, #6
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	220f      	movs	r2, #15
 800af94:	2108      	movs	r1, #8
 800af96:	4618      	mov	r0, r3
 800af98:	f7f6 f829 	bl	8000fee <unpack_left_shift_u16>
 800af9c:	4603      	mov	r3, r0
 800af9e:	461a      	mov	r2, r3
 800afa0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800afa2:	4313      	orrs	r3, r2
 800afa4:	867b      	strh	r3, [r7, #50]	; 0x32

        if ((t4s4 & (1u << 11)) != 0u) {
 800afa6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800afa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afac:	2b00      	cmp	r3, #0
 800afae:	d005      	beq.n	800afbc <can1_ams_cell_temperatures_unpack+0x6ac>
            t4s4 |= 0xf000u;
 800afb0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800afb2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800afb6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800afba:	867b      	strh	r3, [r7, #50]	; 0x32
        }

        dst_p->t4s4 = (int16_t)t4s4;
 800afbc:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        t5s4 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	3306      	adds	r3, #6
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	22f0      	movs	r2, #240	; 0xf0
 800afce:	2104      	movs	r1, #4
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7f6 f83c 	bl	800104e <unpack_right_shift_u16>
 800afd6:	4603      	mov	r3, r0
 800afd8:	837b      	strh	r3, [r7, #26]
        t5s4 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	3307      	adds	r3, #7
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	22ff      	movs	r2, #255	; 0xff
 800afe2:	2104      	movs	r1, #4
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7f6 f802 	bl	8000fee <unpack_left_shift_u16>
 800afea:	4603      	mov	r3, r0
 800afec:	461a      	mov	r2, r3
 800afee:	8b7b      	ldrh	r3, [r7, #26]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	837b      	strh	r3, [r7, #26]

        if ((t5s4 & (1u << 11)) != 0u) {
 800aff4:	8b7b      	ldrh	r3, [r7, #26]
 800aff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800affa:	2b00      	cmp	r3, #0
 800affc:	d005      	beq.n	800b00a <can1_ams_cell_temperatures_unpack+0x6fa>
            t5s4 |= 0xf000u;
 800affe:	8b7b      	ldrh	r3, [r7, #26]
 800b000:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b004:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b008:	837b      	strh	r3, [r7, #26]
        }

        dst_p->t5s4 = (int16_t)t5s4;
 800b00a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        break;
 800b014:	f000 be99 	b.w	800bd4a <can1_ams_cell_temperatures_unpack+0x143a>

    case 4:
        t1s5 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	22f0      	movs	r2, #240	; 0xf0
 800b01e:	2104      	movs	r1, #4
 800b020:	4618      	mov	r0, r3
 800b022:	f7f6 f814 	bl	800104e <unpack_right_shift_u16>
 800b026:	4603      	mov	r3, r0
 800b028:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        t1s5 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	3301      	adds	r3, #1
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	22ff      	movs	r2, #255	; 0xff
 800b034:	2104      	movs	r1, #4
 800b036:	4618      	mov	r0, r3
 800b038:	f7f5 ffd9 	bl	8000fee <unpack_left_shift_u16>
 800b03c:	4603      	mov	r3, r0
 800b03e:	461a      	mov	r2, r3
 800b040:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800b044:	4313      	orrs	r3, r2
 800b046:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

        if ((t1s5 & (1u << 11)) != 0u) {
 800b04a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800b04e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b052:	2b00      	cmp	r3, #0
 800b054:	d007      	beq.n	800b066 <can1_ams_cell_temperatures_unpack+0x756>
            t1s5 |= 0xf000u;
 800b056:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800b05a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b05e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b062:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        }

        dst_p->t1s5 = (int16_t)t1s5;
 800b066:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	815a      	strh	r2, [r3, #10]
        t2s5 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	3302      	adds	r3, #2
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	22ff      	movs	r2, #255	; 0xff
 800b076:	2100      	movs	r1, #0
 800b078:	4618      	mov	r0, r3
 800b07a:	f7f5 ffe8 	bl	800104e <unpack_right_shift_u16>
 800b07e:	4603      	mov	r3, r0
 800b080:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        t2s5 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	3303      	adds	r3, #3
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	220f      	movs	r2, #15
 800b08c:	2108      	movs	r1, #8
 800b08e:	4618      	mov	r0, r3
 800b090:	f7f5 ffad 	bl	8000fee <unpack_left_shift_u16>
 800b094:	4603      	mov	r3, r0
 800b096:	461a      	mov	r2, r3
 800b098:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800b09c:	4313      	orrs	r3, r2
 800b09e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

        if ((t2s5 & (1u << 11)) != 0u) {
 800b0a2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800b0a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d007      	beq.n	800b0be <can1_ams_cell_temperatures_unpack+0x7ae>
            t2s5 |= 0xf000u;
 800b0ae:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800b0b2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b0b6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b0ba:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        }

        dst_p->t2s5 = (int16_t)t2s5;
 800b0be:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	845a      	strh	r2, [r3, #34]	; 0x22
        t3s5 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	3303      	adds	r3, #3
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	22f0      	movs	r2, #240	; 0xf0
 800b0ce:	2104      	movs	r1, #4
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7f5 ffbc 	bl	800104e <unpack_right_shift_u16>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        t3s5 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	3304      	adds	r3, #4
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	22ff      	movs	r2, #255	; 0xff
 800b0e4:	2104      	movs	r1, #4
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7f5 ff81 	bl	8000fee <unpack_left_shift_u16>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

        if ((t3s5 & (1u << 11)) != 0u) {
 800b0fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b0fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b102:	2b00      	cmp	r3, #0
 800b104:	d007      	beq.n	800b116 <can1_ams_cell_temperatures_unpack+0x806>
            t3s5 |= 0xf000u;
 800b106:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b10a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b10e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b112:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        }

        dst_p->t3s5 = (int16_t)t3s5;
 800b116:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	875a      	strh	r2, [r3, #58]	; 0x3a
        t4s5 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	3305      	adds	r3, #5
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	22ff      	movs	r2, #255	; 0xff
 800b126:	2100      	movs	r1, #0
 800b128:	4618      	mov	r0, r3
 800b12a:	f7f5 ff90 	bl	800104e <unpack_right_shift_u16>
 800b12e:	4603      	mov	r3, r0
 800b130:	863b      	strh	r3, [r7, #48]	; 0x30
        t4s5 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	3306      	adds	r3, #6
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	220f      	movs	r2, #15
 800b13a:	2108      	movs	r1, #8
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7f5 ff56 	bl	8000fee <unpack_left_shift_u16>
 800b142:	4603      	mov	r3, r0
 800b144:	461a      	mov	r2, r3
 800b146:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b148:	4313      	orrs	r3, r2
 800b14a:	863b      	strh	r3, [r7, #48]	; 0x30

        if ((t4s5 & (1u << 11)) != 0u) {
 800b14c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b14e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b152:	2b00      	cmp	r3, #0
 800b154:	d005      	beq.n	800b162 <can1_ams_cell_temperatures_unpack+0x852>
            t4s5 |= 0xf000u;
 800b156:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b158:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b15c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b160:	863b      	strh	r3, [r7, #48]	; 0x30
        }

        dst_p->t4s5 = (int16_t)t4s5;
 800b162:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        t5s5 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	3306      	adds	r3, #6
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	22f0      	movs	r2, #240	; 0xf0
 800b174:	2104      	movs	r1, #4
 800b176:	4618      	mov	r0, r3
 800b178:	f7f5 ff69 	bl	800104e <unpack_right_shift_u16>
 800b17c:	4603      	mov	r3, r0
 800b17e:	833b      	strh	r3, [r7, #24]
        t5s5 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	3307      	adds	r3, #7
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	22ff      	movs	r2, #255	; 0xff
 800b188:	2104      	movs	r1, #4
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7f5 ff2f 	bl	8000fee <unpack_left_shift_u16>
 800b190:	4603      	mov	r3, r0
 800b192:	461a      	mov	r2, r3
 800b194:	8b3b      	ldrh	r3, [r7, #24]
 800b196:	4313      	orrs	r3, r2
 800b198:	833b      	strh	r3, [r7, #24]

        if ((t5s5 & (1u << 11)) != 0u) {
 800b19a:	8b3b      	ldrh	r3, [r7, #24]
 800b19c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d005      	beq.n	800b1b0 <can1_ams_cell_temperatures_unpack+0x8a0>
            t5s5 |= 0xf000u;
 800b1a4:	8b3b      	ldrh	r3, [r7, #24]
 800b1a6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b1aa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b1ae:	833b      	strh	r3, [r7, #24]
        }

        dst_p->t5s5 = (int16_t)t5s5;
 800b1b0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        break;
 800b1ba:	f000 bdc6 	b.w	800bd4a <can1_ams_cell_temperatures_unpack+0x143a>

    case 5:
        t1s6 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	22f0      	movs	r2, #240	; 0xf0
 800b1c4:	2104      	movs	r1, #4
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7f5 ff41 	bl	800104e <unpack_right_shift_u16>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        t1s6 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	22ff      	movs	r2, #255	; 0xff
 800b1da:	2104      	movs	r1, #4
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7f5 ff06 	bl	8000fee <unpack_left_shift_u16>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

        if ((t1s6 & (1u << 11)) != 0u) {
 800b1f0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b1f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d007      	beq.n	800b20c <can1_ams_cell_temperatures_unpack+0x8fc>
            t1s6 |= 0xf000u;
 800b1fc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b200:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b204:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b208:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        }

        dst_p->t1s6 = (int16_t)t1s6;
 800b20c:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	819a      	strh	r2, [r3, #12]
        t2s6 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	3302      	adds	r3, #2
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	22ff      	movs	r2, #255	; 0xff
 800b21c:	2100      	movs	r1, #0
 800b21e:	4618      	mov	r0, r3
 800b220:	f7f5 ff15 	bl	800104e <unpack_right_shift_u16>
 800b224:	4603      	mov	r3, r0
 800b226:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        t2s6 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	3303      	adds	r3, #3
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	220f      	movs	r2, #15
 800b232:	2108      	movs	r1, #8
 800b234:	4618      	mov	r0, r3
 800b236:	f7f5 feda 	bl	8000fee <unpack_left_shift_u16>
 800b23a:	4603      	mov	r3, r0
 800b23c:	461a      	mov	r2, r3
 800b23e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b242:	4313      	orrs	r3, r2
 800b244:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if ((t2s6 & (1u << 11)) != 0u) {
 800b248:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b24c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b250:	2b00      	cmp	r3, #0
 800b252:	d007      	beq.n	800b264 <can1_ams_cell_temperatures_unpack+0x954>
            t2s6 |= 0xf000u;
 800b254:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b258:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b25c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b260:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        }

        dst_p->t2s6 = (int16_t)t2s6;
 800b264:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	849a      	strh	r2, [r3, #36]	; 0x24
        t3s6 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	3303      	adds	r3, #3
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	22f0      	movs	r2, #240	; 0xf0
 800b274:	2104      	movs	r1, #4
 800b276:	4618      	mov	r0, r3
 800b278:	f7f5 fee9 	bl	800104e <unpack_right_shift_u16>
 800b27c:	4603      	mov	r3, r0
 800b27e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        t3s6 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	3304      	adds	r3, #4
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	22ff      	movs	r2, #255	; 0xff
 800b28a:	2104      	movs	r1, #4
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7f5 feae 	bl	8000fee <unpack_left_shift_u16>
 800b292:	4603      	mov	r3, r0
 800b294:	461a      	mov	r2, r3
 800b296:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b29a:	4313      	orrs	r3, r2
 800b29c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

        if ((t3s6 & (1u << 11)) != 0u) {
 800b2a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b2a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d007      	beq.n	800b2bc <can1_ams_cell_temperatures_unpack+0x9ac>
            t3s6 |= 0xf000u;
 800b2ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b2b0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b2b4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b2b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        }

        dst_p->t3s6 = (int16_t)t3s6;
 800b2bc:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	879a      	strh	r2, [r3, #60]	; 0x3c
        t4s6 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	3305      	adds	r3, #5
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	22ff      	movs	r2, #255	; 0xff
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7f5 febd 	bl	800104e <unpack_right_shift_u16>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
        t4s6 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	3306      	adds	r3, #6
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	220f      	movs	r2, #15
 800b2e0:	2108      	movs	r1, #8
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7f5 fe83 	bl	8000fee <unpack_left_shift_u16>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if ((t4s6 & (1u << 11)) != 0u) {
 800b2f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d005      	beq.n	800b308 <can1_ams_cell_temperatures_unpack+0x9f8>
            t4s6 |= 0xf000u;
 800b2fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2fe:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b302:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b306:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }

        dst_p->t4s6 = (int16_t)t4s6;
 800b308:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        t5s6 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	3306      	adds	r3, #6
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	22f0      	movs	r2, #240	; 0xf0
 800b31a:	2104      	movs	r1, #4
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7f5 fe96 	bl	800104e <unpack_right_shift_u16>
 800b322:	4603      	mov	r3, r0
 800b324:	82fb      	strh	r3, [r7, #22]
        t5s6 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	3307      	adds	r3, #7
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	22ff      	movs	r2, #255	; 0xff
 800b32e:	2104      	movs	r1, #4
 800b330:	4618      	mov	r0, r3
 800b332:	f7f5 fe5c 	bl	8000fee <unpack_left_shift_u16>
 800b336:	4603      	mov	r3, r0
 800b338:	461a      	mov	r2, r3
 800b33a:	8afb      	ldrh	r3, [r7, #22]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	82fb      	strh	r3, [r7, #22]

        if ((t5s6 & (1u << 11)) != 0u) {
 800b340:	8afb      	ldrh	r3, [r7, #22]
 800b342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b346:	2b00      	cmp	r3, #0
 800b348:	d005      	beq.n	800b356 <can1_ams_cell_temperatures_unpack+0xa46>
            t5s6 |= 0xf000u;
 800b34a:	8afb      	ldrh	r3, [r7, #22]
 800b34c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b350:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b354:	82fb      	strh	r3, [r7, #22]
        }

        dst_p->t5s6 = (int16_t)t5s6;
 800b356:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
        break;
 800b360:	f000 bcf3 	b.w	800bd4a <can1_ams_cell_temperatures_unpack+0x143a>

    case 6:
        t1s7 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	22f0      	movs	r2, #240	; 0xf0
 800b36a:	2104      	movs	r1, #4
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7f5 fe6e 	bl	800104e <unpack_right_shift_u16>
 800b372:	4603      	mov	r3, r0
 800b374:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        t1s7 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	3301      	adds	r3, #1
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	22ff      	movs	r2, #255	; 0xff
 800b380:	2104      	movs	r1, #4
 800b382:	4618      	mov	r0, r3
 800b384:	f7f5 fe33 	bl	8000fee <unpack_left_shift_u16>
 800b388:	4603      	mov	r3, r0
 800b38a:	461a      	mov	r2, r3
 800b38c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800b390:	4313      	orrs	r3, r2
 800b392:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

        if ((t1s7 & (1u << 11)) != 0u) {
 800b396:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800b39a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d007      	beq.n	800b3b2 <can1_ams_cell_temperatures_unpack+0xaa2>
            t1s7 |= 0xf000u;
 800b3a2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800b3a6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b3aa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b3ae:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        }

        dst_p->t1s7 = (int16_t)t1s7;
 800b3b2:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	81da      	strh	r2, [r3, #14]
        t2s7 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	3302      	adds	r3, #2
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	22ff      	movs	r2, #255	; 0xff
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7f5 fe42 	bl	800104e <unpack_right_shift_u16>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        t2s7 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	3303      	adds	r3, #3
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	220f      	movs	r2, #15
 800b3d8:	2108      	movs	r1, #8
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7f5 fe07 	bl	8000fee <unpack_left_shift_u16>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

        if ((t2s7 & (1u << 11)) != 0u) {
 800b3ee:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800b3f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d007      	beq.n	800b40a <can1_ams_cell_temperatures_unpack+0xafa>
            t2s7 |= 0xf000u;
 800b3fa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800b3fe:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b402:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b406:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        dst_p->t2s7 = (int16_t)t2s7;
 800b40a:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	84da      	strh	r2, [r3, #38]	; 0x26
        t3s7 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	3303      	adds	r3, #3
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	22f0      	movs	r2, #240	; 0xf0
 800b41a:	2104      	movs	r1, #4
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7f5 fe16 	bl	800104e <unpack_right_shift_u16>
 800b422:	4603      	mov	r3, r0
 800b424:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        t3s7 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	3304      	adds	r3, #4
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	22ff      	movs	r2, #255	; 0xff
 800b430:	2104      	movs	r1, #4
 800b432:	4618      	mov	r0, r3
 800b434:	f7f5 fddb 	bl	8000fee <unpack_left_shift_u16>
 800b438:	4603      	mov	r3, r0
 800b43a:	461a      	mov	r2, r3
 800b43c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b440:	4313      	orrs	r3, r2
 800b442:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

        if ((t3s7 & (1u << 11)) != 0u) {
 800b446:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b44a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d007      	beq.n	800b462 <can1_ams_cell_temperatures_unpack+0xb52>
            t3s7 |= 0xf000u;
 800b452:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b456:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b45a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b45e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        }

        dst_p->t3s7 = (int16_t)t3s7;
 800b462:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	87da      	strh	r2, [r3, #62]	; 0x3e
        t4s7 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	3305      	adds	r3, #5
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	22ff      	movs	r2, #255	; 0xff
 800b472:	2100      	movs	r1, #0
 800b474:	4618      	mov	r0, r3
 800b476:	f7f5 fdea 	bl	800104e <unpack_right_shift_u16>
 800b47a:	4603      	mov	r3, r0
 800b47c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        t4s7 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	3306      	adds	r3, #6
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	220f      	movs	r2, #15
 800b486:	2108      	movs	r1, #8
 800b488:	4618      	mov	r0, r3
 800b48a:	f7f5 fdb0 	bl	8000fee <unpack_left_shift_u16>
 800b48e:	4603      	mov	r3, r0
 800b490:	461a      	mov	r2, r3
 800b492:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b494:	4313      	orrs	r3, r2
 800b496:	85bb      	strh	r3, [r7, #44]	; 0x2c

        if ((t4s7 & (1u << 11)) != 0u) {
 800b498:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b49a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d005      	beq.n	800b4ae <can1_ams_cell_temperatures_unpack+0xb9e>
            t4s7 |= 0xf000u;
 800b4a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b4a4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b4a8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b4ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }

        dst_p->t4s7 = (int16_t)t4s7;
 800b4ae:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        t5s7 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	3306      	adds	r3, #6
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	22f0      	movs	r2, #240	; 0xf0
 800b4c0:	2104      	movs	r1, #4
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7f5 fdc3 	bl	800104e <unpack_right_shift_u16>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	82bb      	strh	r3, [r7, #20]
        t5s7 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	3307      	adds	r3, #7
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	22ff      	movs	r2, #255	; 0xff
 800b4d4:	2104      	movs	r1, #4
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7f5 fd89 	bl	8000fee <unpack_left_shift_u16>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	461a      	mov	r2, r3
 800b4e0:	8abb      	ldrh	r3, [r7, #20]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	82bb      	strh	r3, [r7, #20]

        if ((t5s7 & (1u << 11)) != 0u) {
 800b4e6:	8abb      	ldrh	r3, [r7, #20]
 800b4e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d005      	beq.n	800b4fc <can1_ams_cell_temperatures_unpack+0xbec>
            t5s7 |= 0xf000u;
 800b4f0:	8abb      	ldrh	r3, [r7, #20]
 800b4f2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b4f6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b4fa:	82bb      	strh	r3, [r7, #20]
        }

        dst_p->t5s7 = (int16_t)t5s7;
 800b4fc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
        break;
 800b506:	f000 bc20 	b.w	800bd4a <can1_ams_cell_temperatures_unpack+0x143a>

    case 7:
        t1s8 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	22f0      	movs	r2, #240	; 0xf0
 800b510:	2104      	movs	r1, #4
 800b512:	4618      	mov	r0, r3
 800b514:	f7f5 fd9b 	bl	800104e <unpack_right_shift_u16>
 800b518:	4603      	mov	r3, r0
 800b51a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        t1s8 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	3301      	adds	r3, #1
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	22ff      	movs	r2, #255	; 0xff
 800b526:	2104      	movs	r1, #4
 800b528:	4618      	mov	r0, r3
 800b52a:	f7f5 fd60 	bl	8000fee <unpack_left_shift_u16>
 800b52e:	4603      	mov	r3, r0
 800b530:	461a      	mov	r2, r3
 800b532:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800b536:	4313      	orrs	r3, r2
 800b538:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

        if ((t1s8 & (1u << 11)) != 0u) {
 800b53c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800b540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b544:	2b00      	cmp	r3, #0
 800b546:	d007      	beq.n	800b558 <can1_ams_cell_temperatures_unpack+0xc48>
            t1s8 |= 0xf000u;
 800b548:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800b54c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b550:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b554:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        }

        dst_p->t1s8 = (int16_t)t1s8;
 800b558:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	; 0x72
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	821a      	strh	r2, [r3, #16]
        t2s8 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	3302      	adds	r3, #2
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	22ff      	movs	r2, #255	; 0xff
 800b568:	2100      	movs	r1, #0
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7f5 fd6f 	bl	800104e <unpack_right_shift_u16>
 800b570:	4603      	mov	r3, r0
 800b572:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        t2s8 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	3303      	adds	r3, #3
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	220f      	movs	r2, #15
 800b57e:	2108      	movs	r1, #8
 800b580:	4618      	mov	r0, r3
 800b582:	f7f5 fd34 	bl	8000fee <unpack_left_shift_u16>
 800b586:	4603      	mov	r3, r0
 800b588:	461a      	mov	r2, r3
 800b58a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b58e:	4313      	orrs	r3, r2
 800b590:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if ((t2s8 & (1u << 11)) != 0u) {
 800b594:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d007      	beq.n	800b5b0 <can1_ams_cell_temperatures_unpack+0xca0>
            t2s8 |= 0xf000u;
 800b5a0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b5a4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b5a8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b5ac:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        }

        dst_p->t2s8 = (int16_t)t2s8;
 800b5b0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	851a      	strh	r2, [r3, #40]	; 0x28
        t3s8 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	3303      	adds	r3, #3
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	22f0      	movs	r2, #240	; 0xf0
 800b5c0:	2104      	movs	r1, #4
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7f5 fd43 	bl	800104e <unpack_right_shift_u16>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        t3s8 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	3304      	adds	r3, #4
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	22ff      	movs	r2, #255	; 0xff
 800b5d6:	2104      	movs	r1, #4
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7f5 fd08 	bl	8000fee <unpack_left_shift_u16>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

        if ((t3s8 & (1u << 11)) != 0u) {
 800b5ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b5f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d007      	beq.n	800b608 <can1_ams_cell_temperatures_unpack+0xcf8>
            t3s8 |= 0xf000u;
 800b5f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b5fc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b600:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b604:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        }

        dst_p->t3s8 = (int16_t)t3s8;
 800b608:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        t4s8 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	3305      	adds	r3, #5
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	22ff      	movs	r2, #255	; 0xff
 800b61a:	2100      	movs	r1, #0
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7f5 fd16 	bl	800104e <unpack_right_shift_u16>
 800b622:	4603      	mov	r3, r0
 800b624:	857b      	strh	r3, [r7, #42]	; 0x2a
        t4s8 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	3306      	adds	r3, #6
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	220f      	movs	r2, #15
 800b62e:	2108      	movs	r1, #8
 800b630:	4618      	mov	r0, r3
 800b632:	f7f5 fcdc 	bl	8000fee <unpack_left_shift_u16>
 800b636:	4603      	mov	r3, r0
 800b638:	461a      	mov	r2, r3
 800b63a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b63c:	4313      	orrs	r3, r2
 800b63e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((t4s8 & (1u << 11)) != 0u) {
 800b640:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b646:	2b00      	cmp	r3, #0
 800b648:	d005      	beq.n	800b656 <can1_ams_cell_temperatures_unpack+0xd46>
            t4s8 |= 0xf000u;
 800b64a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b64c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b650:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b654:	857b      	strh	r3, [r7, #42]	; 0x2a
        }

        dst_p->t4s8 = (int16_t)t4s8;
 800b656:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
        t5s8 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	3306      	adds	r3, #6
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	22f0      	movs	r2, #240	; 0xf0
 800b668:	2104      	movs	r1, #4
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7f5 fcef 	bl	800104e <unpack_right_shift_u16>
 800b670:	4603      	mov	r3, r0
 800b672:	827b      	strh	r3, [r7, #18]
        t5s8 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	3307      	adds	r3, #7
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	22ff      	movs	r2, #255	; 0xff
 800b67c:	2104      	movs	r1, #4
 800b67e:	4618      	mov	r0, r3
 800b680:	f7f5 fcb5 	bl	8000fee <unpack_left_shift_u16>
 800b684:	4603      	mov	r3, r0
 800b686:	461a      	mov	r2, r3
 800b688:	8a7b      	ldrh	r3, [r7, #18]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	827b      	strh	r3, [r7, #18]

        if ((t5s8 & (1u << 11)) != 0u) {
 800b68e:	8a7b      	ldrh	r3, [r7, #18]
 800b690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b694:	2b00      	cmp	r3, #0
 800b696:	d005      	beq.n	800b6a4 <can1_ams_cell_temperatures_unpack+0xd94>
            t5s8 |= 0xf000u;
 800b698:	8a7b      	ldrh	r3, [r7, #18]
 800b69a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b69e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b6a2:	827b      	strh	r3, [r7, #18]
        }

        dst_p->t5s8 = (int16_t)t5s8;
 800b6a4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
        break;
 800b6ae:	e34c      	b.n	800bd4a <can1_ams_cell_temperatures_unpack+0x143a>

    case 8:
        t1s9 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	22f0      	movs	r2, #240	; 0xf0
 800b6b6:	2104      	movs	r1, #4
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7f5 fcc8 	bl	800104e <unpack_right_shift_u16>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        t1s9 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	22ff      	movs	r2, #255	; 0xff
 800b6cc:	2104      	movs	r1, #4
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7f5 fc8d 	bl	8000fee <unpack_left_shift_u16>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

        if ((t1s9 & (1u << 11)) != 0u) {
 800b6e2:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800b6e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d007      	beq.n	800b6fe <can1_ams_cell_temperatures_unpack+0xdee>
            t1s9 |= 0xf000u;
 800b6ee:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800b6f2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b6f6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b6fa:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        }

        dst_p->t1s9 = (int16_t)t1s9;
 800b6fe:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	825a      	strh	r2, [r3, #18]
        t2s9 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	3302      	adds	r3, #2
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	22ff      	movs	r2, #255	; 0xff
 800b70e:	2100      	movs	r1, #0
 800b710:	4618      	mov	r0, r3
 800b712:	f7f5 fc9c 	bl	800104e <unpack_right_shift_u16>
 800b716:	4603      	mov	r3, r0
 800b718:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        t2s9 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	3303      	adds	r3, #3
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	220f      	movs	r2, #15
 800b724:	2108      	movs	r1, #8
 800b726:	4618      	mov	r0, r3
 800b728:	f7f5 fc61 	bl	8000fee <unpack_left_shift_u16>
 800b72c:	4603      	mov	r3, r0
 800b72e:	461a      	mov	r2, r3
 800b730:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800b734:	4313      	orrs	r3, r2
 800b736:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

        if ((t2s9 & (1u << 11)) != 0u) {
 800b73a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800b73e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b742:	2b00      	cmp	r3, #0
 800b744:	d007      	beq.n	800b756 <can1_ams_cell_temperatures_unpack+0xe46>
            t2s9 |= 0xf000u;
 800b746:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800b74a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b74e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b752:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        }

        dst_p->t2s9 = (int16_t)t2s9;
 800b756:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	855a      	strh	r2, [r3, #42]	; 0x2a
        t3s9 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	3303      	adds	r3, #3
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	22f0      	movs	r2, #240	; 0xf0
 800b766:	2104      	movs	r1, #4
 800b768:	4618      	mov	r0, r3
 800b76a:	f7f5 fc70 	bl	800104e <unpack_right_shift_u16>
 800b76e:	4603      	mov	r3, r0
 800b770:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        t3s9 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	3304      	adds	r3, #4
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	22ff      	movs	r2, #255	; 0xff
 800b77c:	2104      	movs	r1, #4
 800b77e:	4618      	mov	r0, r3
 800b780:	f7f5 fc35 	bl	8000fee <unpack_left_shift_u16>
 800b784:	4603      	mov	r3, r0
 800b786:	461a      	mov	r2, r3
 800b788:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b78c:	4313      	orrs	r3, r2
 800b78e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

        if ((t3s9 & (1u << 11)) != 0u) {
 800b792:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d007      	beq.n	800b7ae <can1_ams_cell_temperatures_unpack+0xe9e>
            t3s9 |= 0xf000u;
 800b79e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b7a2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b7a6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b7aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        }

        dst_p->t3s9 = (int16_t)t3s9;
 800b7ae:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        t4s9 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	3305      	adds	r3, #5
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	22ff      	movs	r2, #255	; 0xff
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7f5 fc43 	bl	800104e <unpack_right_shift_u16>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	853b      	strh	r3, [r7, #40]	; 0x28
        t4s9 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	3306      	adds	r3, #6
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	220f      	movs	r2, #15
 800b7d4:	2108      	movs	r1, #8
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7f5 fc09 	bl	8000fee <unpack_left_shift_u16>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	461a      	mov	r2, r3
 800b7e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	853b      	strh	r3, [r7, #40]	; 0x28

        if ((t4s9 & (1u << 11)) != 0u) {
 800b7e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b7e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d005      	beq.n	800b7fc <can1_ams_cell_temperatures_unpack+0xeec>
            t4s9 |= 0xf000u;
 800b7f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b7f2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b7f6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b7fa:	853b      	strh	r3, [r7, #40]	; 0x28
        }

        dst_p->t4s9 = (int16_t)t4s9;
 800b7fc:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        t5s9 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	3306      	adds	r3, #6
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	22f0      	movs	r2, #240	; 0xf0
 800b80e:	2104      	movs	r1, #4
 800b810:	4618      	mov	r0, r3
 800b812:	f7f5 fc1c 	bl	800104e <unpack_right_shift_u16>
 800b816:	4603      	mov	r3, r0
 800b818:	823b      	strh	r3, [r7, #16]
        t5s9 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	3307      	adds	r3, #7
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	22ff      	movs	r2, #255	; 0xff
 800b822:	2104      	movs	r1, #4
 800b824:	4618      	mov	r0, r3
 800b826:	f7f5 fbe2 	bl	8000fee <unpack_left_shift_u16>
 800b82a:	4603      	mov	r3, r0
 800b82c:	461a      	mov	r2, r3
 800b82e:	8a3b      	ldrh	r3, [r7, #16]
 800b830:	4313      	orrs	r3, r2
 800b832:	823b      	strh	r3, [r7, #16]

        if ((t5s9 & (1u << 11)) != 0u) {
 800b834:	8a3b      	ldrh	r3, [r7, #16]
 800b836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d005      	beq.n	800b84a <can1_ams_cell_temperatures_unpack+0xf3a>
            t5s9 |= 0xf000u;
 800b83e:	8a3b      	ldrh	r3, [r7, #16]
 800b840:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b844:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b848:	823b      	strh	r3, [r7, #16]
        }

        dst_p->t5s9 = (int16_t)t5s9;
 800b84a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        break;
 800b854:	e279      	b.n	800bd4a <can1_ams_cell_temperatures_unpack+0x143a>

    case 9:
        t1s10 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	22f0      	movs	r2, #240	; 0xf0
 800b85c:	2104      	movs	r1, #4
 800b85e:	4618      	mov	r0, r3
 800b860:	f7f5 fbf5 	bl	800104e <unpack_right_shift_u16>
 800b864:	4603      	mov	r3, r0
 800b866:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        t1s10 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	3301      	adds	r3, #1
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	22ff      	movs	r2, #255	; 0xff
 800b872:	2104      	movs	r1, #4
 800b874:	4618      	mov	r0, r3
 800b876:	f7f5 fbba 	bl	8000fee <unpack_left_shift_u16>
 800b87a:	4603      	mov	r3, r0
 800b87c:	461a      	mov	r2, r3
 800b87e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b882:	4313      	orrs	r3, r2
 800b884:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        if ((t1s10 & (1u << 11)) != 0u) {
 800b888:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b88c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b890:	2b00      	cmp	r3, #0
 800b892:	d007      	beq.n	800b8a4 <can1_ams_cell_temperatures_unpack+0xf94>
            t1s10 |= 0xf000u;
 800b894:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b898:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b89c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b8a0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        }

        dst_p->t1s10 = (int16_t)t1s10;
 800b8a4:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	829a      	strh	r2, [r3, #20]
        t2s10 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	3302      	adds	r3, #2
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	22ff      	movs	r2, #255	; 0xff
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7f5 fbc9 	bl	800104e <unpack_right_shift_u16>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        t2s10 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	3303      	adds	r3, #3
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	220f      	movs	r2, #15
 800b8ca:	2108      	movs	r1, #8
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7f5 fb8e 	bl	8000fee <unpack_left_shift_u16>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

        if ((t2s10 & (1u << 11)) != 0u) {
 800b8e0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b8e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d007      	beq.n	800b8fc <can1_ams_cell_temperatures_unpack+0xfec>
            t2s10 |= 0xf000u;
 800b8ec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b8f0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b8f4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b8f8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        }

        dst_p->t2s10 = (int16_t)t2s10;
 800b8fc:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	859a      	strh	r2, [r3, #44]	; 0x2c
        t3s10 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	3303      	adds	r3, #3
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	22f0      	movs	r2, #240	; 0xf0
 800b90c:	2104      	movs	r1, #4
 800b90e:	4618      	mov	r0, r3
 800b910:	f7f5 fb9d 	bl	800104e <unpack_right_shift_u16>
 800b914:	4603      	mov	r3, r0
 800b916:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        t3s10 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	3304      	adds	r3, #4
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	22ff      	movs	r2, #255	; 0xff
 800b922:	2104      	movs	r1, #4
 800b924:	4618      	mov	r0, r3
 800b926:	f7f5 fb62 	bl	8000fee <unpack_left_shift_u16>
 800b92a:	4603      	mov	r3, r0
 800b92c:	461a      	mov	r2, r3
 800b92e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b932:	4313      	orrs	r3, r2
 800b934:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

        if ((t3s10 & (1u << 11)) != 0u) {
 800b938:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b93c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b940:	2b00      	cmp	r3, #0
 800b942:	d007      	beq.n	800b954 <can1_ams_cell_temperatures_unpack+0x1044>
            t3s10 |= 0xf000u;
 800b944:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b948:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b94c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b950:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        }

        dst_p->t3s10 = (int16_t)t3s10;
 800b954:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        t4s10 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	3305      	adds	r3, #5
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	22ff      	movs	r2, #255	; 0xff
 800b966:	2100      	movs	r1, #0
 800b968:	4618      	mov	r0, r3
 800b96a:	f7f5 fb70 	bl	800104e <unpack_right_shift_u16>
 800b96e:	4603      	mov	r3, r0
 800b970:	87fb      	strh	r3, [r7, #62]	; 0x3e
        t4s10 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	3306      	adds	r3, #6
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	220f      	movs	r2, #15
 800b97a:	2108      	movs	r1, #8
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7f5 fb36 	bl	8000fee <unpack_left_shift_u16>
 800b982:	4603      	mov	r3, r0
 800b984:	461a      	mov	r2, r3
 800b986:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b988:	4313      	orrs	r3, r2
 800b98a:	87fb      	strh	r3, [r7, #62]	; 0x3e

        if ((t4s10 & (1u << 11)) != 0u) {
 800b98c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b98e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b992:	2b00      	cmp	r3, #0
 800b994:	d005      	beq.n	800b9a2 <can1_ams_cell_temperatures_unpack+0x1092>
            t4s10 |= 0xf000u;
 800b996:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b998:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b99c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b9a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        }

        dst_p->t4s10 = (int16_t)t4s10;
 800b9a2:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        t5s10 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	3306      	adds	r3, #6
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	22f0      	movs	r2, #240	; 0xf0
 800b9b4:	2104      	movs	r1, #4
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7f5 fb49 	bl	800104e <unpack_right_shift_u16>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	84fb      	strh	r3, [r7, #38]	; 0x26
        t5s10 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	3307      	adds	r3, #7
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	22ff      	movs	r2, #255	; 0xff
 800b9c8:	2104      	movs	r1, #4
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7f5 fb0f 	bl	8000fee <unpack_left_shift_u16>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	84fb      	strh	r3, [r7, #38]	; 0x26

        if ((t5s10 & (1u << 11)) != 0u) {
 800b9da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b9dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d005      	beq.n	800b9f0 <can1_ams_cell_temperatures_unpack+0x10e0>
            t5s10 |= 0xf000u;
 800b9e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b9e6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b9ea:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b9ee:	84fb      	strh	r3, [r7, #38]	; 0x26
        }

        dst_p->t5s10 = (int16_t)t5s10;
 800b9f0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        break;
 800b9fa:	e1a6      	b.n	800bd4a <can1_ams_cell_temperatures_unpack+0x143a>

    case 10:
        t1s11 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	22f0      	movs	r2, #240	; 0xf0
 800ba02:	2104      	movs	r1, #4
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7f5 fb22 	bl	800104e <unpack_right_shift_u16>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        t1s11 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	3301      	adds	r3, #1
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	22ff      	movs	r2, #255	; 0xff
 800ba18:	2104      	movs	r1, #4
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7f5 fae7 	bl	8000fee <unpack_left_shift_u16>
 800ba20:	4603      	mov	r3, r0
 800ba22:	461a      	mov	r2, r3
 800ba24:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

        if ((t1s11 & (1u << 11)) != 0u) {
 800ba2e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800ba32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d007      	beq.n	800ba4a <can1_ams_cell_temperatures_unpack+0x113a>
            t1s11 |= 0xf000u;
 800ba3a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800ba3e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ba42:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ba46:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        }

        dst_p->t1s11 = (int16_t)t1s11;
 800ba4a:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	82da      	strh	r2, [r3, #22]
        t2s11 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	3302      	adds	r3, #2
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	22ff      	movs	r2, #255	; 0xff
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7f5 faf6 	bl	800104e <unpack_right_shift_u16>
 800ba62:	4603      	mov	r3, r0
 800ba64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        t2s11 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	3303      	adds	r3, #3
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	220f      	movs	r2, #15
 800ba70:	2108      	movs	r1, #8
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7f5 fabb 	bl	8000fee <unpack_left_shift_u16>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ba80:	4313      	orrs	r3, r2
 800ba82:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

        if ((t2s11 & (1u << 11)) != 0u) {
 800ba86:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ba8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d007      	beq.n	800baa2 <can1_ams_cell_temperatures_unpack+0x1192>
            t2s11 |= 0xf000u;
 800ba92:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ba96:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ba9a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ba9e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        }

        dst_p->t2s11 = (int16_t)t2s11;
 800baa2:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	85da      	strh	r2, [r3, #46]	; 0x2e
        t3s11 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	3303      	adds	r3, #3
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	22f0      	movs	r2, #240	; 0xf0
 800bab2:	2104      	movs	r1, #4
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7f5 faca 	bl	800104e <unpack_right_shift_u16>
 800baba:	4603      	mov	r3, r0
 800babc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        t3s11 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	3304      	adds	r3, #4
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	22ff      	movs	r2, #255	; 0xff
 800bac8:	2104      	movs	r1, #4
 800baca:	4618      	mov	r0, r3
 800bacc:	f7f5 fa8f 	bl	8000fee <unpack_left_shift_u16>
 800bad0:	4603      	mov	r3, r0
 800bad2:	461a      	mov	r2, r3
 800bad4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bad8:	4313      	orrs	r3, r2
 800bada:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

        if ((t3s11 & (1u << 11)) != 0u) {
 800bade:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d007      	beq.n	800bafa <can1_ams_cell_temperatures_unpack+0x11ea>
            t3s11 |= 0xf000u;
 800baea:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800baee:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800baf2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800baf6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        }

        dst_p->t3s11 = (int16_t)t3s11;
 800bafa:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        t4s11 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	3305      	adds	r3, #5
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	22ff      	movs	r2, #255	; 0xff
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7f5 fa9d 	bl	800104e <unpack_right_shift_u16>
 800bb14:	4603      	mov	r3, r0
 800bb16:	87bb      	strh	r3, [r7, #60]	; 0x3c
        t4s11 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	3306      	adds	r3, #6
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	220f      	movs	r2, #15
 800bb20:	2108      	movs	r1, #8
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7f5 fa63 	bl	8000fee <unpack_left_shift_u16>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	87bb      	strh	r3, [r7, #60]	; 0x3c

        if ((t4s11 & (1u << 11)) != 0u) {
 800bb32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bb34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d005      	beq.n	800bb48 <can1_ams_cell_temperatures_unpack+0x1238>
            t4s11 |= 0xf000u;
 800bb3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bb3e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bb42:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bb46:	87bb      	strh	r3, [r7, #60]	; 0x3c
        }

        dst_p->t4s11 = (int16_t)t4s11;
 800bb48:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
        t5s11 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	3306      	adds	r3, #6
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	22f0      	movs	r2, #240	; 0xf0
 800bb5a:	2104      	movs	r1, #4
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7f5 fa76 	bl	800104e <unpack_right_shift_u16>
 800bb62:	4603      	mov	r3, r0
 800bb64:	84bb      	strh	r3, [r7, #36]	; 0x24
        t5s11 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	3307      	adds	r3, #7
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	22ff      	movs	r2, #255	; 0xff
 800bb6e:	2104      	movs	r1, #4
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7f5 fa3c 	bl	8000fee <unpack_left_shift_u16>
 800bb76:	4603      	mov	r3, r0
 800bb78:	461a      	mov	r2, r3
 800bb7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	84bb      	strh	r3, [r7, #36]	; 0x24

        if ((t5s11 & (1u << 11)) != 0u) {
 800bb80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d005      	beq.n	800bb96 <can1_ams_cell_temperatures_unpack+0x1286>
            t5s11 |= 0xf000u;
 800bb8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb8c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bb90:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bb94:	84bb      	strh	r3, [r7, #36]	; 0x24
        }

        dst_p->t5s11 = (int16_t)t5s11;
 800bb96:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        break;
 800bba0:	e0d3      	b.n	800bd4a <can1_ams_cell_temperatures_unpack+0x143a>

    case 11:
        t1s12 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	22f0      	movs	r2, #240	; 0xf0
 800bba8:	2104      	movs	r1, #4
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7f5 fa4f 	bl	800104e <unpack_right_shift_u16>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        t1s12 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	22ff      	movs	r2, #255	; 0xff
 800bbbe:	2104      	movs	r1, #4
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7f5 fa14 	bl	8000fee <unpack_left_shift_u16>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	461a      	mov	r2, r3
 800bbca:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

        if ((t1s12 & (1u << 11)) != 0u) {
 800bbd4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800bbd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d007      	beq.n	800bbf0 <can1_ams_cell_temperatures_unpack+0x12e0>
            t1s12 |= 0xf000u;
 800bbe0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800bbe4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bbe8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bbec:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        }

        dst_p->t1s12 = (int16_t)t1s12;
 800bbf0:	f9b7 2082 	ldrsh.w	r2, [r7, #130]	; 0x82
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	831a      	strh	r2, [r3, #24]
        t2s12 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	3302      	adds	r3, #2
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	22ff      	movs	r2, #255	; 0xff
 800bc00:	2100      	movs	r1, #0
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7f5 fa23 	bl	800104e <unpack_right_shift_u16>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        t2s12 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	3303      	adds	r3, #3
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	220f      	movs	r2, #15
 800bc16:	2108      	movs	r1, #8
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7f5 f9e8 	bl	8000fee <unpack_left_shift_u16>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	461a      	mov	r2, r3
 800bc22:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800bc26:	4313      	orrs	r3, r2
 800bc28:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

        if ((t2s12 & (1u << 11)) != 0u) {
 800bc2c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800bc30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d007      	beq.n	800bc48 <can1_ams_cell_temperatures_unpack+0x1338>
            t2s12 |= 0xf000u;
 800bc38:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800bc3c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bc40:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bc44:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        }

        dst_p->t2s12 = (int16_t)t2s12;
 800bc48:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	861a      	strh	r2, [r3, #48]	; 0x30
        t3s12 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	3303      	adds	r3, #3
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	22f0      	movs	r2, #240	; 0xf0
 800bc58:	2104      	movs	r1, #4
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7f5 f9f7 	bl	800104e <unpack_right_shift_u16>
 800bc60:	4603      	mov	r3, r0
 800bc62:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        t3s12 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	3304      	adds	r3, #4
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	22ff      	movs	r2, #255	; 0xff
 800bc6e:	2104      	movs	r1, #4
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7f5 f9bc 	bl	8000fee <unpack_left_shift_u16>
 800bc76:	4603      	mov	r3, r0
 800bc78:	461a      	mov	r2, r3
 800bc7a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((t3s12 & (1u << 11)) != 0u) {
 800bc84:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bc88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d007      	beq.n	800bca0 <can1_ams_cell_temperatures_unpack+0x1390>
            t3s12 |= 0xf000u;
 800bc90:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bc94:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bc98:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bc9c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        }

        dst_p->t3s12 = (int16_t)t3s12;
 800bca0:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        t4s12 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	3305      	adds	r3, #5
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	22ff      	movs	r2, #255	; 0xff
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7f5 f9ca 	bl	800104e <unpack_right_shift_u16>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	877b      	strh	r3, [r7, #58]	; 0x3a
        t4s12 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	3306      	adds	r3, #6
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	220f      	movs	r2, #15
 800bcc6:	2108      	movs	r1, #8
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7f5 f990 	bl	8000fee <unpack_left_shift_u16>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	877b      	strh	r3, [r7, #58]	; 0x3a

        if ((t4s12 & (1u << 11)) != 0u) {
 800bcd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bcda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d005      	beq.n	800bcee <can1_ams_cell_temperatures_unpack+0x13de>
            t4s12 |= 0xf000u;
 800bce2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bce4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bce8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bcec:	877b      	strh	r3, [r7, #58]	; 0x3a
        }

        dst_p->t4s12 = (int16_t)t4s12;
 800bcee:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        t5s12 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	3306      	adds	r3, #6
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	22f0      	movs	r2, #240	; 0xf0
 800bd00:	2104      	movs	r1, #4
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7f5 f9a3 	bl	800104e <unpack_right_shift_u16>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	847b      	strh	r3, [r7, #34]	; 0x22
        t5s12 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	3307      	adds	r3, #7
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	22ff      	movs	r2, #255	; 0xff
 800bd14:	2104      	movs	r1, #4
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7f5 f969 	bl	8000fee <unpack_left_shift_u16>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	461a      	mov	r2, r3
 800bd20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd22:	4313      	orrs	r3, r2
 800bd24:	847b      	strh	r3, [r7, #34]	; 0x22

        if ((t5s12 & (1u << 11)) != 0u) {
 800bd26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d005      	beq.n	800bd3c <can1_ams_cell_temperatures_unpack+0x142c>
            t5s12 |= 0xf000u;
 800bd30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd32:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bd36:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bd3a:	847b      	strh	r3, [r7, #34]	; 0x22
        }

        dst_p->t5s12 = (int16_t)t5s12;
 800bd3c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
        break;
 800bd46:	e000      	b.n	800bd4a <can1_ams_cell_temperatures_unpack+0x143a>

    default:
        break;
 800bd48:	bf00      	nop
    }

    return (0);
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3788      	adds	r7, #136	; 0x88
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <can1_ams_cell_temperatures_temperature_multiplexor_encode>:

uint8_t can1_ams_cell_temperatures_temperature_multiplexor_encode(double value)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800bd5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bd62:	f7f4 ff13 	bl	8000b8c <__aeabi_d2uiz>
 800bd66:	4603      	mov	r3, r0
 800bd68:	b2db      	uxtb	r3, r3
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	0000      	movs	r0, r0
 800bd74:	0000      	movs	r0, r0
	...

0800bd78 <can1_ams_cell_temperatures_t1s1_encode>:
{
    return (value <= 15u);
}

int16_t can1_ams_cell_temperatures_t1s1_encode(double value)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800bd82:	f04f 0200 	mov.w	r2, #0
 800bd86:	4b10      	ldr	r3, [pc, #64]	; (800bdc8 <can1_ams_cell_temperatures_t1s1_encode+0x50>)
 800bd88:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bd8c:	f7f4 fa70 	bl	8000270 <__adddf3>
 800bd90:	4602      	mov	r2, r0
 800bd92:	460b      	mov	r3, r1
 800bd94:	4610      	mov	r0, r2
 800bd96:	4619      	mov	r1, r3
 800bd98:	a309      	add	r3, pc, #36	; (adr r3, 800bdc0 <can1_ams_cell_temperatures_t1s1_encode+0x48>)
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	f7f4 fd47 	bl	8000830 <__aeabi_ddiv>
 800bda2:	4602      	mov	r2, r0
 800bda4:	460b      	mov	r3, r1
 800bda6:	4610      	mov	r0, r2
 800bda8:	4619      	mov	r1, r3
 800bdaa:	f7f4 fec7 	bl	8000b3c <__aeabi_d2iz>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	b21b      	sxth	r3, r3
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	f3af 8000 	nop.w
 800bdc0:	757928e1 	.word	0x757928e1
 800bdc4:	3fa9018e 	.word	0x3fa9018e
 800bdc8:	40240000 	.word	0x40240000
 800bdcc:	00000000 	.word	0x00000000

0800bdd0 <can1_ams_cell_temperatures_t1s1_decode>:

double can1_ams_cell_temperatures_t1s1_decode(int16_t value)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800bdda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7f4 fb92 	bl	8000508 <__aeabi_i2d>
 800bde4:	a30d      	add	r3, pc, #52	; (adr r3, 800be1c <can1_ams_cell_temperatures_t1s1_decode+0x4c>)
 800bde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdea:	f7f4 fbf7 	bl	80005dc <__aeabi_dmul>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	f04f 0200 	mov.w	r2, #0
 800bdfa:	4b07      	ldr	r3, [pc, #28]	; (800be18 <can1_ams_cell_temperatures_t1s1_decode+0x48>)
 800bdfc:	f7f4 fa36 	bl	800026c <__aeabi_dsub>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	ec43 2b17 	vmov	d7, r2, r3
}
 800be08:	eeb0 0a47 	vmov.f32	s0, s14
 800be0c:	eef0 0a67 	vmov.f32	s1, s15
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	40240000 	.word	0x40240000
 800be1c:	757928e1 	.word	0x757928e1
 800be20:	3fa9018e 	.word	0x3fa9018e
 800be24:	00000000 	.word	0x00000000

0800be28 <can1_ams_cell_temperatures_t1s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s2_encode(double value)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800be32:	f04f 0200 	mov.w	r2, #0
 800be36:	4b10      	ldr	r3, [pc, #64]	; (800be78 <can1_ams_cell_temperatures_t1s2_encode+0x50>)
 800be38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800be3c:	f7f4 fa18 	bl	8000270 <__adddf3>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4610      	mov	r0, r2
 800be46:	4619      	mov	r1, r3
 800be48:	a309      	add	r3, pc, #36	; (adr r3, 800be70 <can1_ams_cell_temperatures_t1s2_encode+0x48>)
 800be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4e:	f7f4 fcef 	bl	8000830 <__aeabi_ddiv>
 800be52:	4602      	mov	r2, r0
 800be54:	460b      	mov	r3, r1
 800be56:	4610      	mov	r0, r2
 800be58:	4619      	mov	r1, r3
 800be5a:	f7f4 fe6f 	bl	8000b3c <__aeabi_d2iz>
 800be5e:	4603      	mov	r3, r0
 800be60:	b21b      	sxth	r3, r3
}
 800be62:	4618      	mov	r0, r3
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	f3af 8000 	nop.w
 800be70:	757928e1 	.word	0x757928e1
 800be74:	3fa9018e 	.word	0x3fa9018e
 800be78:	40240000 	.word	0x40240000
 800be7c:	00000000 	.word	0x00000000

0800be80 <can1_ams_cell_temperatures_t1s2_decode>:

double can1_ams_cell_temperatures_t1s2_decode(int16_t value)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	4603      	mov	r3, r0
 800be88:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800be8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be8e:	4618      	mov	r0, r3
 800be90:	f7f4 fb3a 	bl	8000508 <__aeabi_i2d>
 800be94:	a30d      	add	r3, pc, #52	; (adr r3, 800becc <can1_ams_cell_temperatures_t1s2_decode+0x4c>)
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	f7f4 fb9f 	bl	80005dc <__aeabi_dmul>
 800be9e:	4602      	mov	r2, r0
 800bea0:	460b      	mov	r3, r1
 800bea2:	4610      	mov	r0, r2
 800bea4:	4619      	mov	r1, r3
 800bea6:	f04f 0200 	mov.w	r2, #0
 800beaa:	4b07      	ldr	r3, [pc, #28]	; (800bec8 <can1_ams_cell_temperatures_t1s2_decode+0x48>)
 800beac:	f7f4 f9de 	bl	800026c <__aeabi_dsub>
 800beb0:	4602      	mov	r2, r0
 800beb2:	460b      	mov	r3, r1
 800beb4:	ec43 2b17 	vmov	d7, r2, r3
}
 800beb8:	eeb0 0a47 	vmov.f32	s0, s14
 800bebc:	eef0 0a67 	vmov.f32	s1, s15
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	40240000 	.word	0x40240000
 800becc:	757928e1 	.word	0x757928e1
 800bed0:	3fa9018e 	.word	0x3fa9018e
 800bed4:	00000000 	.word	0x00000000

0800bed8 <can1_ams_cell_temperatures_t1s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s3_encode(double value)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800bee2:	f04f 0200 	mov.w	r2, #0
 800bee6:	4b10      	ldr	r3, [pc, #64]	; (800bf28 <can1_ams_cell_temperatures_t1s3_encode+0x50>)
 800bee8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800beec:	f7f4 f9c0 	bl	8000270 <__adddf3>
 800bef0:	4602      	mov	r2, r0
 800bef2:	460b      	mov	r3, r1
 800bef4:	4610      	mov	r0, r2
 800bef6:	4619      	mov	r1, r3
 800bef8:	a309      	add	r3, pc, #36	; (adr r3, 800bf20 <can1_ams_cell_temperatures_t1s3_encode+0x48>)
 800befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befe:	f7f4 fc97 	bl	8000830 <__aeabi_ddiv>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	4610      	mov	r0, r2
 800bf08:	4619      	mov	r1, r3
 800bf0a:	f7f4 fe17 	bl	8000b3c <__aeabi_d2iz>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	b21b      	sxth	r3, r3
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3708      	adds	r7, #8
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	f3af 8000 	nop.w
 800bf20:	757928e1 	.word	0x757928e1
 800bf24:	3fa9018e 	.word	0x3fa9018e
 800bf28:	40240000 	.word	0x40240000
 800bf2c:	00000000 	.word	0x00000000

0800bf30 <can1_ams_cell_temperatures_t1s3_decode>:

double can1_ams_cell_temperatures_t1s3_decode(int16_t value)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	4603      	mov	r3, r0
 800bf38:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800bf3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7f4 fae2 	bl	8000508 <__aeabi_i2d>
 800bf44:	a30d      	add	r3, pc, #52	; (adr r3, 800bf7c <can1_ams_cell_temperatures_t1s3_decode+0x4c>)
 800bf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4a:	f7f4 fb47 	bl	80005dc <__aeabi_dmul>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
 800bf52:	4610      	mov	r0, r2
 800bf54:	4619      	mov	r1, r3
 800bf56:	f04f 0200 	mov.w	r2, #0
 800bf5a:	4b07      	ldr	r3, [pc, #28]	; (800bf78 <can1_ams_cell_temperatures_t1s3_decode+0x48>)
 800bf5c:	f7f4 f986 	bl	800026c <__aeabi_dsub>
 800bf60:	4602      	mov	r2, r0
 800bf62:	460b      	mov	r3, r1
 800bf64:	ec43 2b17 	vmov	d7, r2, r3
}
 800bf68:	eeb0 0a47 	vmov.f32	s0, s14
 800bf6c:	eef0 0a67 	vmov.f32	s1, s15
 800bf70:	3708      	adds	r7, #8
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	40240000 	.word	0x40240000
 800bf7c:	757928e1 	.word	0x757928e1
 800bf80:	3fa9018e 	.word	0x3fa9018e
 800bf84:	00000000 	.word	0x00000000

0800bf88 <can1_ams_cell_temperatures_t1s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s4_encode(double value)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800bf92:	f04f 0200 	mov.w	r2, #0
 800bf96:	4b10      	ldr	r3, [pc, #64]	; (800bfd8 <can1_ams_cell_temperatures_t1s4_encode+0x50>)
 800bf98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf9c:	f7f4 f968 	bl	8000270 <__adddf3>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4610      	mov	r0, r2
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	a309      	add	r3, pc, #36	; (adr r3, 800bfd0 <can1_ams_cell_temperatures_t1s4_encode+0x48>)
 800bfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfae:	f7f4 fc3f 	bl	8000830 <__aeabi_ddiv>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	4610      	mov	r0, r2
 800bfb8:	4619      	mov	r1, r3
 800bfba:	f7f4 fdbf 	bl	8000b3c <__aeabi_d2iz>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	b21b      	sxth	r3, r3
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	f3af 8000 	nop.w
 800bfd0:	757928e1 	.word	0x757928e1
 800bfd4:	3fa9018e 	.word	0x3fa9018e
 800bfd8:	40240000 	.word	0x40240000
 800bfdc:	00000000 	.word	0x00000000

0800bfe0 <can1_ams_cell_temperatures_t1s4_decode>:

double can1_ams_cell_temperatures_t1s4_decode(int16_t value)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800bfea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7f4 fa8a 	bl	8000508 <__aeabi_i2d>
 800bff4:	a30d      	add	r3, pc, #52	; (adr r3, 800c02c <can1_ams_cell_temperatures_t1s4_decode+0x4c>)
 800bff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffa:	f7f4 faef 	bl	80005dc <__aeabi_dmul>
 800bffe:	4602      	mov	r2, r0
 800c000:	460b      	mov	r3, r1
 800c002:	4610      	mov	r0, r2
 800c004:	4619      	mov	r1, r3
 800c006:	f04f 0200 	mov.w	r2, #0
 800c00a:	4b07      	ldr	r3, [pc, #28]	; (800c028 <can1_ams_cell_temperatures_t1s4_decode+0x48>)
 800c00c:	f7f4 f92e 	bl	800026c <__aeabi_dsub>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	ec43 2b17 	vmov	d7, r2, r3
}
 800c018:	eeb0 0a47 	vmov.f32	s0, s14
 800c01c:	eef0 0a67 	vmov.f32	s1, s15
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	40240000 	.word	0x40240000
 800c02c:	757928e1 	.word	0x757928e1
 800c030:	3fa9018e 	.word	0x3fa9018e
 800c034:	00000000 	.word	0x00000000

0800c038 <can1_ams_cell_temperatures_t1s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s5_encode(double value)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c042:	f04f 0200 	mov.w	r2, #0
 800c046:	4b10      	ldr	r3, [pc, #64]	; (800c088 <can1_ams_cell_temperatures_t1s5_encode+0x50>)
 800c048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c04c:	f7f4 f910 	bl	8000270 <__adddf3>
 800c050:	4602      	mov	r2, r0
 800c052:	460b      	mov	r3, r1
 800c054:	4610      	mov	r0, r2
 800c056:	4619      	mov	r1, r3
 800c058:	a309      	add	r3, pc, #36	; (adr r3, 800c080 <can1_ams_cell_temperatures_t1s5_encode+0x48>)
 800c05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05e:	f7f4 fbe7 	bl	8000830 <__aeabi_ddiv>
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	4610      	mov	r0, r2
 800c068:	4619      	mov	r1, r3
 800c06a:	f7f4 fd67 	bl	8000b3c <__aeabi_d2iz>
 800c06e:	4603      	mov	r3, r0
 800c070:	b21b      	sxth	r3, r3
}
 800c072:	4618      	mov	r0, r3
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	f3af 8000 	nop.w
 800c080:	757928e1 	.word	0x757928e1
 800c084:	3fa9018e 	.word	0x3fa9018e
 800c088:	40240000 	.word	0x40240000
 800c08c:	00000000 	.word	0x00000000

0800c090 <can1_ams_cell_temperatures_t1s5_decode>:

double can1_ams_cell_temperatures_t1s5_decode(int16_t value)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	4603      	mov	r3, r0
 800c098:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c09a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7f4 fa32 	bl	8000508 <__aeabi_i2d>
 800c0a4:	a30d      	add	r3, pc, #52	; (adr r3, 800c0dc <can1_ams_cell_temperatures_t1s5_decode+0x4c>)
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	f7f4 fa97 	bl	80005dc <__aeabi_dmul>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	4610      	mov	r0, r2
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	f04f 0200 	mov.w	r2, #0
 800c0ba:	4b07      	ldr	r3, [pc, #28]	; (800c0d8 <can1_ams_cell_temperatures_t1s5_decode+0x48>)
 800c0bc:	f7f4 f8d6 	bl	800026c <__aeabi_dsub>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c0c8:	eeb0 0a47 	vmov.f32	s0, s14
 800c0cc:	eef0 0a67 	vmov.f32	s1, s15
 800c0d0:	3708      	adds	r7, #8
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	40240000 	.word	0x40240000
 800c0dc:	757928e1 	.word	0x757928e1
 800c0e0:	3fa9018e 	.word	0x3fa9018e
 800c0e4:	00000000 	.word	0x00000000

0800c0e8 <can1_ams_cell_temperatures_t1s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s6_encode(double value)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c0f2:	f04f 0200 	mov.w	r2, #0
 800c0f6:	4b10      	ldr	r3, [pc, #64]	; (800c138 <can1_ams_cell_temperatures_t1s6_encode+0x50>)
 800c0f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c0fc:	f7f4 f8b8 	bl	8000270 <__adddf3>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	4610      	mov	r0, r2
 800c106:	4619      	mov	r1, r3
 800c108:	a309      	add	r3, pc, #36	; (adr r3, 800c130 <can1_ams_cell_temperatures_t1s6_encode+0x48>)
 800c10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10e:	f7f4 fb8f 	bl	8000830 <__aeabi_ddiv>
 800c112:	4602      	mov	r2, r0
 800c114:	460b      	mov	r3, r1
 800c116:	4610      	mov	r0, r2
 800c118:	4619      	mov	r1, r3
 800c11a:	f7f4 fd0f 	bl	8000b3c <__aeabi_d2iz>
 800c11e:	4603      	mov	r3, r0
 800c120:	b21b      	sxth	r3, r3
}
 800c122:	4618      	mov	r0, r3
 800c124:	3708      	adds	r7, #8
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	f3af 8000 	nop.w
 800c130:	757928e1 	.word	0x757928e1
 800c134:	3fa9018e 	.word	0x3fa9018e
 800c138:	40240000 	.word	0x40240000
 800c13c:	00000000 	.word	0x00000000

0800c140 <can1_ams_cell_temperatures_t1s6_decode>:

double can1_ams_cell_temperatures_t1s6_decode(int16_t value)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	4603      	mov	r3, r0
 800c148:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c14a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c14e:	4618      	mov	r0, r3
 800c150:	f7f4 f9da 	bl	8000508 <__aeabi_i2d>
 800c154:	a30d      	add	r3, pc, #52	; (adr r3, 800c18c <can1_ams_cell_temperatures_t1s6_decode+0x4c>)
 800c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15a:	f7f4 fa3f 	bl	80005dc <__aeabi_dmul>
 800c15e:	4602      	mov	r2, r0
 800c160:	460b      	mov	r3, r1
 800c162:	4610      	mov	r0, r2
 800c164:	4619      	mov	r1, r3
 800c166:	f04f 0200 	mov.w	r2, #0
 800c16a:	4b07      	ldr	r3, [pc, #28]	; (800c188 <can1_ams_cell_temperatures_t1s6_decode+0x48>)
 800c16c:	f7f4 f87e 	bl	800026c <__aeabi_dsub>
 800c170:	4602      	mov	r2, r0
 800c172:	460b      	mov	r3, r1
 800c174:	ec43 2b17 	vmov	d7, r2, r3
}
 800c178:	eeb0 0a47 	vmov.f32	s0, s14
 800c17c:	eef0 0a67 	vmov.f32	s1, s15
 800c180:	3708      	adds	r7, #8
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	40240000 	.word	0x40240000
 800c18c:	757928e1 	.word	0x757928e1
 800c190:	3fa9018e 	.word	0x3fa9018e
 800c194:	00000000 	.word	0x00000000

0800c198 <can1_ams_cell_temperatures_t1s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s7_encode(double value)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c1a2:	f04f 0200 	mov.w	r2, #0
 800c1a6:	4b10      	ldr	r3, [pc, #64]	; (800c1e8 <can1_ams_cell_temperatures_t1s7_encode+0x50>)
 800c1a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c1ac:	f7f4 f860 	bl	8000270 <__adddf3>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	4610      	mov	r0, r2
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	a309      	add	r3, pc, #36	; (adr r3, 800c1e0 <can1_ams_cell_temperatures_t1s7_encode+0x48>)
 800c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1be:	f7f4 fb37 	bl	8000830 <__aeabi_ddiv>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4610      	mov	r0, r2
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	f7f4 fcb7 	bl	8000b3c <__aeabi_d2iz>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	b21b      	sxth	r3, r3
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	f3af 8000 	nop.w
 800c1e0:	757928e1 	.word	0x757928e1
 800c1e4:	3fa9018e 	.word	0x3fa9018e
 800c1e8:	40240000 	.word	0x40240000
 800c1ec:	00000000 	.word	0x00000000

0800c1f0 <can1_ams_cell_temperatures_t1s7_decode>:

double can1_ams_cell_temperatures_t1s7_decode(int16_t value)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c1fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7f4 f982 	bl	8000508 <__aeabi_i2d>
 800c204:	a30d      	add	r3, pc, #52	; (adr r3, 800c23c <can1_ams_cell_temperatures_t1s7_decode+0x4c>)
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	f7f4 f9e7 	bl	80005dc <__aeabi_dmul>
 800c20e:	4602      	mov	r2, r0
 800c210:	460b      	mov	r3, r1
 800c212:	4610      	mov	r0, r2
 800c214:	4619      	mov	r1, r3
 800c216:	f04f 0200 	mov.w	r2, #0
 800c21a:	4b07      	ldr	r3, [pc, #28]	; (800c238 <can1_ams_cell_temperatures_t1s7_decode+0x48>)
 800c21c:	f7f4 f826 	bl	800026c <__aeabi_dsub>
 800c220:	4602      	mov	r2, r0
 800c222:	460b      	mov	r3, r1
 800c224:	ec43 2b17 	vmov	d7, r2, r3
}
 800c228:	eeb0 0a47 	vmov.f32	s0, s14
 800c22c:	eef0 0a67 	vmov.f32	s1, s15
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	40240000 	.word	0x40240000
 800c23c:	757928e1 	.word	0x757928e1
 800c240:	3fa9018e 	.word	0x3fa9018e
 800c244:	00000000 	.word	0x00000000

0800c248 <can1_ams_cell_temperatures_t1s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s8_encode(double value)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c252:	f04f 0200 	mov.w	r2, #0
 800c256:	4b10      	ldr	r3, [pc, #64]	; (800c298 <can1_ams_cell_temperatures_t1s8_encode+0x50>)
 800c258:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c25c:	f7f4 f808 	bl	8000270 <__adddf3>
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	4610      	mov	r0, r2
 800c266:	4619      	mov	r1, r3
 800c268:	a309      	add	r3, pc, #36	; (adr r3, 800c290 <can1_ams_cell_temperatures_t1s8_encode+0x48>)
 800c26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26e:	f7f4 fadf 	bl	8000830 <__aeabi_ddiv>
 800c272:	4602      	mov	r2, r0
 800c274:	460b      	mov	r3, r1
 800c276:	4610      	mov	r0, r2
 800c278:	4619      	mov	r1, r3
 800c27a:	f7f4 fc5f 	bl	8000b3c <__aeabi_d2iz>
 800c27e:	4603      	mov	r3, r0
 800c280:	b21b      	sxth	r3, r3
}
 800c282:	4618      	mov	r0, r3
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	f3af 8000 	nop.w
 800c290:	757928e1 	.word	0x757928e1
 800c294:	3fa9018e 	.word	0x3fa9018e
 800c298:	40240000 	.word	0x40240000
 800c29c:	00000000 	.word	0x00000000

0800c2a0 <can1_ams_cell_temperatures_t1s8_decode>:

double can1_ams_cell_temperatures_t1s8_decode(int16_t value)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c2aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7f4 f92a 	bl	8000508 <__aeabi_i2d>
 800c2b4:	a30d      	add	r3, pc, #52	; (adr r3, 800c2ec <can1_ams_cell_temperatures_t1s8_decode+0x4c>)
 800c2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ba:	f7f4 f98f 	bl	80005dc <__aeabi_dmul>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	4610      	mov	r0, r2
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	f04f 0200 	mov.w	r2, #0
 800c2ca:	4b07      	ldr	r3, [pc, #28]	; (800c2e8 <can1_ams_cell_temperatures_t1s8_decode+0x48>)
 800c2cc:	f7f3 ffce 	bl	800026c <__aeabi_dsub>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c2d8:	eeb0 0a47 	vmov.f32	s0, s14
 800c2dc:	eef0 0a67 	vmov.f32	s1, s15
 800c2e0:	3708      	adds	r7, #8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	40240000 	.word	0x40240000
 800c2ec:	757928e1 	.word	0x757928e1
 800c2f0:	3fa9018e 	.word	0x3fa9018e
 800c2f4:	00000000 	.word	0x00000000

0800c2f8 <can1_ams_cell_temperatures_t1s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s9_encode(double value)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c302:	f04f 0200 	mov.w	r2, #0
 800c306:	4b10      	ldr	r3, [pc, #64]	; (800c348 <can1_ams_cell_temperatures_t1s9_encode+0x50>)
 800c308:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c30c:	f7f3 ffb0 	bl	8000270 <__adddf3>
 800c310:	4602      	mov	r2, r0
 800c312:	460b      	mov	r3, r1
 800c314:	4610      	mov	r0, r2
 800c316:	4619      	mov	r1, r3
 800c318:	a309      	add	r3, pc, #36	; (adr r3, 800c340 <can1_ams_cell_temperatures_t1s9_encode+0x48>)
 800c31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31e:	f7f4 fa87 	bl	8000830 <__aeabi_ddiv>
 800c322:	4602      	mov	r2, r0
 800c324:	460b      	mov	r3, r1
 800c326:	4610      	mov	r0, r2
 800c328:	4619      	mov	r1, r3
 800c32a:	f7f4 fc07 	bl	8000b3c <__aeabi_d2iz>
 800c32e:	4603      	mov	r3, r0
 800c330:	b21b      	sxth	r3, r3
}
 800c332:	4618      	mov	r0, r3
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	f3af 8000 	nop.w
 800c340:	757928e1 	.word	0x757928e1
 800c344:	3fa9018e 	.word	0x3fa9018e
 800c348:	40240000 	.word	0x40240000
 800c34c:	00000000 	.word	0x00000000

0800c350 <can1_ams_cell_temperatures_t1s9_decode>:

double can1_ams_cell_temperatures_t1s9_decode(int16_t value)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	4603      	mov	r3, r0
 800c358:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c35a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c35e:	4618      	mov	r0, r3
 800c360:	f7f4 f8d2 	bl	8000508 <__aeabi_i2d>
 800c364:	a30d      	add	r3, pc, #52	; (adr r3, 800c39c <can1_ams_cell_temperatures_t1s9_decode+0x4c>)
 800c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36a:	f7f4 f937 	bl	80005dc <__aeabi_dmul>
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	4610      	mov	r0, r2
 800c374:	4619      	mov	r1, r3
 800c376:	f04f 0200 	mov.w	r2, #0
 800c37a:	4b07      	ldr	r3, [pc, #28]	; (800c398 <can1_ams_cell_temperatures_t1s9_decode+0x48>)
 800c37c:	f7f3 ff76 	bl	800026c <__aeabi_dsub>
 800c380:	4602      	mov	r2, r0
 800c382:	460b      	mov	r3, r1
 800c384:	ec43 2b17 	vmov	d7, r2, r3
}
 800c388:	eeb0 0a47 	vmov.f32	s0, s14
 800c38c:	eef0 0a67 	vmov.f32	s1, s15
 800c390:	3708      	adds	r7, #8
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	40240000 	.word	0x40240000
 800c39c:	757928e1 	.word	0x757928e1
 800c3a0:	3fa9018e 	.word	0x3fa9018e
 800c3a4:	00000000 	.word	0x00000000

0800c3a8 <can1_ams_cell_temperatures_t1s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s10_encode(double value)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c3b2:	f04f 0200 	mov.w	r2, #0
 800c3b6:	4b10      	ldr	r3, [pc, #64]	; (800c3f8 <can1_ams_cell_temperatures_t1s10_encode+0x50>)
 800c3b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c3bc:	f7f3 ff58 	bl	8000270 <__adddf3>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	4610      	mov	r0, r2
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	a309      	add	r3, pc, #36	; (adr r3, 800c3f0 <can1_ams_cell_temperatures_t1s10_encode+0x48>)
 800c3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ce:	f7f4 fa2f 	bl	8000830 <__aeabi_ddiv>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	4610      	mov	r0, r2
 800c3d8:	4619      	mov	r1, r3
 800c3da:	f7f4 fbaf 	bl	8000b3c <__aeabi_d2iz>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	b21b      	sxth	r3, r3
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3708      	adds	r7, #8
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	f3af 8000 	nop.w
 800c3f0:	757928e1 	.word	0x757928e1
 800c3f4:	3fa9018e 	.word	0x3fa9018e
 800c3f8:	40240000 	.word	0x40240000
 800c3fc:	00000000 	.word	0x00000000

0800c400 <can1_ams_cell_temperatures_t1s10_decode>:

double can1_ams_cell_temperatures_t1s10_decode(int16_t value)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	4603      	mov	r3, r0
 800c408:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c40a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c40e:	4618      	mov	r0, r3
 800c410:	f7f4 f87a 	bl	8000508 <__aeabi_i2d>
 800c414:	a30d      	add	r3, pc, #52	; (adr r3, 800c44c <can1_ams_cell_temperatures_t1s10_decode+0x4c>)
 800c416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41a:	f7f4 f8df 	bl	80005dc <__aeabi_dmul>
 800c41e:	4602      	mov	r2, r0
 800c420:	460b      	mov	r3, r1
 800c422:	4610      	mov	r0, r2
 800c424:	4619      	mov	r1, r3
 800c426:	f04f 0200 	mov.w	r2, #0
 800c42a:	4b07      	ldr	r3, [pc, #28]	; (800c448 <can1_ams_cell_temperatures_t1s10_decode+0x48>)
 800c42c:	f7f3 ff1e 	bl	800026c <__aeabi_dsub>
 800c430:	4602      	mov	r2, r0
 800c432:	460b      	mov	r3, r1
 800c434:	ec43 2b17 	vmov	d7, r2, r3
}
 800c438:	eeb0 0a47 	vmov.f32	s0, s14
 800c43c:	eef0 0a67 	vmov.f32	s1, s15
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	40240000 	.word	0x40240000
 800c44c:	757928e1 	.word	0x757928e1
 800c450:	3fa9018e 	.word	0x3fa9018e
 800c454:	00000000 	.word	0x00000000

0800c458 <can1_ams_cell_temperatures_t1s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s11_encode(double value)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c462:	f04f 0200 	mov.w	r2, #0
 800c466:	4b10      	ldr	r3, [pc, #64]	; (800c4a8 <can1_ams_cell_temperatures_t1s11_encode+0x50>)
 800c468:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c46c:	f7f3 ff00 	bl	8000270 <__adddf3>
 800c470:	4602      	mov	r2, r0
 800c472:	460b      	mov	r3, r1
 800c474:	4610      	mov	r0, r2
 800c476:	4619      	mov	r1, r3
 800c478:	a309      	add	r3, pc, #36	; (adr r3, 800c4a0 <can1_ams_cell_temperatures_t1s11_encode+0x48>)
 800c47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47e:	f7f4 f9d7 	bl	8000830 <__aeabi_ddiv>
 800c482:	4602      	mov	r2, r0
 800c484:	460b      	mov	r3, r1
 800c486:	4610      	mov	r0, r2
 800c488:	4619      	mov	r1, r3
 800c48a:	f7f4 fb57 	bl	8000b3c <__aeabi_d2iz>
 800c48e:	4603      	mov	r3, r0
 800c490:	b21b      	sxth	r3, r3
}
 800c492:	4618      	mov	r0, r3
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	f3af 8000 	nop.w
 800c4a0:	757928e1 	.word	0x757928e1
 800c4a4:	3fa9018e 	.word	0x3fa9018e
 800c4a8:	40240000 	.word	0x40240000
 800c4ac:	00000000 	.word	0x00000000

0800c4b0 <can1_ams_cell_temperatures_t1s11_decode>:

double can1_ams_cell_temperatures_t1s11_decode(int16_t value)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c4ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7f4 f822 	bl	8000508 <__aeabi_i2d>
 800c4c4:	a30d      	add	r3, pc, #52	; (adr r3, 800c4fc <can1_ams_cell_temperatures_t1s11_decode+0x4c>)
 800c4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ca:	f7f4 f887 	bl	80005dc <__aeabi_dmul>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	4610      	mov	r0, r2
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	f04f 0200 	mov.w	r2, #0
 800c4da:	4b07      	ldr	r3, [pc, #28]	; (800c4f8 <can1_ams_cell_temperatures_t1s11_decode+0x48>)
 800c4dc:	f7f3 fec6 	bl	800026c <__aeabi_dsub>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c4e8:	eeb0 0a47 	vmov.f32	s0, s14
 800c4ec:	eef0 0a67 	vmov.f32	s1, s15
 800c4f0:	3708      	adds	r7, #8
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	40240000 	.word	0x40240000
 800c4fc:	757928e1 	.word	0x757928e1
 800c500:	3fa9018e 	.word	0x3fa9018e
 800c504:	00000000 	.word	0x00000000

0800c508 <can1_ams_cell_temperatures_t1s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s12_encode(double value)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c512:	f04f 0200 	mov.w	r2, #0
 800c516:	4b10      	ldr	r3, [pc, #64]	; (800c558 <can1_ams_cell_temperatures_t1s12_encode+0x50>)
 800c518:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c51c:	f7f3 fea8 	bl	8000270 <__adddf3>
 800c520:	4602      	mov	r2, r0
 800c522:	460b      	mov	r3, r1
 800c524:	4610      	mov	r0, r2
 800c526:	4619      	mov	r1, r3
 800c528:	a309      	add	r3, pc, #36	; (adr r3, 800c550 <can1_ams_cell_temperatures_t1s12_encode+0x48>)
 800c52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52e:	f7f4 f97f 	bl	8000830 <__aeabi_ddiv>
 800c532:	4602      	mov	r2, r0
 800c534:	460b      	mov	r3, r1
 800c536:	4610      	mov	r0, r2
 800c538:	4619      	mov	r1, r3
 800c53a:	f7f4 faff 	bl	8000b3c <__aeabi_d2iz>
 800c53e:	4603      	mov	r3, r0
 800c540:	b21b      	sxth	r3, r3
}
 800c542:	4618      	mov	r0, r3
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	f3af 8000 	nop.w
 800c550:	757928e1 	.word	0x757928e1
 800c554:	3fa9018e 	.word	0x3fa9018e
 800c558:	40240000 	.word	0x40240000
 800c55c:	00000000 	.word	0x00000000

0800c560 <can1_ams_cell_temperatures_t1s12_decode>:

double can1_ams_cell_temperatures_t1s12_decode(int16_t value)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	4603      	mov	r3, r0
 800c568:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c56a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c56e:	4618      	mov	r0, r3
 800c570:	f7f3 ffca 	bl	8000508 <__aeabi_i2d>
 800c574:	a30d      	add	r3, pc, #52	; (adr r3, 800c5ac <can1_ams_cell_temperatures_t1s12_decode+0x4c>)
 800c576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57a:	f7f4 f82f 	bl	80005dc <__aeabi_dmul>
 800c57e:	4602      	mov	r2, r0
 800c580:	460b      	mov	r3, r1
 800c582:	4610      	mov	r0, r2
 800c584:	4619      	mov	r1, r3
 800c586:	f04f 0200 	mov.w	r2, #0
 800c58a:	4b07      	ldr	r3, [pc, #28]	; (800c5a8 <can1_ams_cell_temperatures_t1s12_decode+0x48>)
 800c58c:	f7f3 fe6e 	bl	800026c <__aeabi_dsub>
 800c590:	4602      	mov	r2, r0
 800c592:	460b      	mov	r3, r1
 800c594:	ec43 2b17 	vmov	d7, r2, r3
}
 800c598:	eeb0 0a47 	vmov.f32	s0, s14
 800c59c:	eef0 0a67 	vmov.f32	s1, s15
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	40240000 	.word	0x40240000
 800c5ac:	757928e1 	.word	0x757928e1
 800c5b0:	3fa9018e 	.word	0x3fa9018e
 800c5b4:	00000000 	.word	0x00000000

0800c5b8 <can1_ams_cell_temperatures_t2s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s1_encode(double value)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c5c2:	f04f 0200 	mov.w	r2, #0
 800c5c6:	4b10      	ldr	r3, [pc, #64]	; (800c608 <can1_ams_cell_temperatures_t2s1_encode+0x50>)
 800c5c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c5cc:	f7f3 fe50 	bl	8000270 <__adddf3>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	4610      	mov	r0, r2
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	a309      	add	r3, pc, #36	; (adr r3, 800c600 <can1_ams_cell_temperatures_t2s1_encode+0x48>)
 800c5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5de:	f7f4 f927 	bl	8000830 <__aeabi_ddiv>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	4610      	mov	r0, r2
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	f7f4 faa7 	bl	8000b3c <__aeabi_d2iz>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	b21b      	sxth	r3, r3
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	f3af 8000 	nop.w
 800c600:	757928e1 	.word	0x757928e1
 800c604:	3fa9018e 	.word	0x3fa9018e
 800c608:	40240000 	.word	0x40240000
 800c60c:	00000000 	.word	0x00000000

0800c610 <can1_ams_cell_temperatures_t2s1_decode>:

double can1_ams_cell_temperatures_t2s1_decode(int16_t value)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	4603      	mov	r3, r0
 800c618:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c61a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c61e:	4618      	mov	r0, r3
 800c620:	f7f3 ff72 	bl	8000508 <__aeabi_i2d>
 800c624:	a30d      	add	r3, pc, #52	; (adr r3, 800c65c <can1_ams_cell_temperatures_t2s1_decode+0x4c>)
 800c626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62a:	f7f3 ffd7 	bl	80005dc <__aeabi_dmul>
 800c62e:	4602      	mov	r2, r0
 800c630:	460b      	mov	r3, r1
 800c632:	4610      	mov	r0, r2
 800c634:	4619      	mov	r1, r3
 800c636:	f04f 0200 	mov.w	r2, #0
 800c63a:	4b07      	ldr	r3, [pc, #28]	; (800c658 <can1_ams_cell_temperatures_t2s1_decode+0x48>)
 800c63c:	f7f3 fe16 	bl	800026c <__aeabi_dsub>
 800c640:	4602      	mov	r2, r0
 800c642:	460b      	mov	r3, r1
 800c644:	ec43 2b17 	vmov	d7, r2, r3
}
 800c648:	eeb0 0a47 	vmov.f32	s0, s14
 800c64c:	eef0 0a67 	vmov.f32	s1, s15
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	40240000 	.word	0x40240000
 800c65c:	757928e1 	.word	0x757928e1
 800c660:	3fa9018e 	.word	0x3fa9018e
 800c664:	00000000 	.word	0x00000000

0800c668 <can1_ams_cell_temperatures_t2s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s2_encode(double value)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c672:	f04f 0200 	mov.w	r2, #0
 800c676:	4b10      	ldr	r3, [pc, #64]	; (800c6b8 <can1_ams_cell_temperatures_t2s2_encode+0x50>)
 800c678:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c67c:	f7f3 fdf8 	bl	8000270 <__adddf3>
 800c680:	4602      	mov	r2, r0
 800c682:	460b      	mov	r3, r1
 800c684:	4610      	mov	r0, r2
 800c686:	4619      	mov	r1, r3
 800c688:	a309      	add	r3, pc, #36	; (adr r3, 800c6b0 <can1_ams_cell_temperatures_t2s2_encode+0x48>)
 800c68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68e:	f7f4 f8cf 	bl	8000830 <__aeabi_ddiv>
 800c692:	4602      	mov	r2, r0
 800c694:	460b      	mov	r3, r1
 800c696:	4610      	mov	r0, r2
 800c698:	4619      	mov	r1, r3
 800c69a:	f7f4 fa4f 	bl	8000b3c <__aeabi_d2iz>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	b21b      	sxth	r3, r3
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	f3af 8000 	nop.w
 800c6b0:	757928e1 	.word	0x757928e1
 800c6b4:	3fa9018e 	.word	0x3fa9018e
 800c6b8:	40240000 	.word	0x40240000
 800c6bc:	00000000 	.word	0x00000000

0800c6c0 <can1_ams_cell_temperatures_t2s2_decode>:

double can1_ams_cell_temperatures_t2s2_decode(int16_t value)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c6ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7f3 ff1a 	bl	8000508 <__aeabi_i2d>
 800c6d4:	a30d      	add	r3, pc, #52	; (adr r3, 800c70c <can1_ams_cell_temperatures_t2s2_decode+0x4c>)
 800c6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6da:	f7f3 ff7f 	bl	80005dc <__aeabi_dmul>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	4610      	mov	r0, r2
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	f04f 0200 	mov.w	r2, #0
 800c6ea:	4b07      	ldr	r3, [pc, #28]	; (800c708 <can1_ams_cell_temperatures_t2s2_decode+0x48>)
 800c6ec:	f7f3 fdbe 	bl	800026c <__aeabi_dsub>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c6f8:	eeb0 0a47 	vmov.f32	s0, s14
 800c6fc:	eef0 0a67 	vmov.f32	s1, s15
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	40240000 	.word	0x40240000
 800c70c:	757928e1 	.word	0x757928e1
 800c710:	3fa9018e 	.word	0x3fa9018e
 800c714:	00000000 	.word	0x00000000

0800c718 <can1_ams_cell_temperatures_t2s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s3_encode(double value)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c722:	f04f 0200 	mov.w	r2, #0
 800c726:	4b10      	ldr	r3, [pc, #64]	; (800c768 <can1_ams_cell_temperatures_t2s3_encode+0x50>)
 800c728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c72c:	f7f3 fda0 	bl	8000270 <__adddf3>
 800c730:	4602      	mov	r2, r0
 800c732:	460b      	mov	r3, r1
 800c734:	4610      	mov	r0, r2
 800c736:	4619      	mov	r1, r3
 800c738:	a309      	add	r3, pc, #36	; (adr r3, 800c760 <can1_ams_cell_temperatures_t2s3_encode+0x48>)
 800c73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73e:	f7f4 f877 	bl	8000830 <__aeabi_ddiv>
 800c742:	4602      	mov	r2, r0
 800c744:	460b      	mov	r3, r1
 800c746:	4610      	mov	r0, r2
 800c748:	4619      	mov	r1, r3
 800c74a:	f7f4 f9f7 	bl	8000b3c <__aeabi_d2iz>
 800c74e:	4603      	mov	r3, r0
 800c750:	b21b      	sxth	r3, r3
}
 800c752:	4618      	mov	r0, r3
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	f3af 8000 	nop.w
 800c760:	757928e1 	.word	0x757928e1
 800c764:	3fa9018e 	.word	0x3fa9018e
 800c768:	40240000 	.word	0x40240000
 800c76c:	00000000 	.word	0x00000000

0800c770 <can1_ams_cell_temperatures_t2s3_decode>:

double can1_ams_cell_temperatures_t2s3_decode(int16_t value)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	4603      	mov	r3, r0
 800c778:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c77a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c77e:	4618      	mov	r0, r3
 800c780:	f7f3 fec2 	bl	8000508 <__aeabi_i2d>
 800c784:	a30d      	add	r3, pc, #52	; (adr r3, 800c7bc <can1_ams_cell_temperatures_t2s3_decode+0x4c>)
 800c786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78a:	f7f3 ff27 	bl	80005dc <__aeabi_dmul>
 800c78e:	4602      	mov	r2, r0
 800c790:	460b      	mov	r3, r1
 800c792:	4610      	mov	r0, r2
 800c794:	4619      	mov	r1, r3
 800c796:	f04f 0200 	mov.w	r2, #0
 800c79a:	4b07      	ldr	r3, [pc, #28]	; (800c7b8 <can1_ams_cell_temperatures_t2s3_decode+0x48>)
 800c79c:	f7f3 fd66 	bl	800026c <__aeabi_dsub>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c7a8:	eeb0 0a47 	vmov.f32	s0, s14
 800c7ac:	eef0 0a67 	vmov.f32	s1, s15
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	40240000 	.word	0x40240000
 800c7bc:	757928e1 	.word	0x757928e1
 800c7c0:	3fa9018e 	.word	0x3fa9018e
 800c7c4:	00000000 	.word	0x00000000

0800c7c8 <can1_ams_cell_temperatures_t2s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s4_encode(double value)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c7d2:	f04f 0200 	mov.w	r2, #0
 800c7d6:	4b10      	ldr	r3, [pc, #64]	; (800c818 <can1_ams_cell_temperatures_t2s4_encode+0x50>)
 800c7d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c7dc:	f7f3 fd48 	bl	8000270 <__adddf3>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	4610      	mov	r0, r2
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	a309      	add	r3, pc, #36	; (adr r3, 800c810 <can1_ams_cell_temperatures_t2s4_encode+0x48>)
 800c7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ee:	f7f4 f81f 	bl	8000830 <__aeabi_ddiv>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	f7f4 f99f 	bl	8000b3c <__aeabi_d2iz>
 800c7fe:	4603      	mov	r3, r0
 800c800:	b21b      	sxth	r3, r3
}
 800c802:	4618      	mov	r0, r3
 800c804:	3708      	adds	r7, #8
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	f3af 8000 	nop.w
 800c810:	757928e1 	.word	0x757928e1
 800c814:	3fa9018e 	.word	0x3fa9018e
 800c818:	40240000 	.word	0x40240000
 800c81c:	00000000 	.word	0x00000000

0800c820 <can1_ams_cell_temperatures_t2s4_decode>:

double can1_ams_cell_temperatures_t2s4_decode(int16_t value)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	4603      	mov	r3, r0
 800c828:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c82a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c82e:	4618      	mov	r0, r3
 800c830:	f7f3 fe6a 	bl	8000508 <__aeabi_i2d>
 800c834:	a30d      	add	r3, pc, #52	; (adr r3, 800c86c <can1_ams_cell_temperatures_t2s4_decode+0x4c>)
 800c836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83a:	f7f3 fecf 	bl	80005dc <__aeabi_dmul>
 800c83e:	4602      	mov	r2, r0
 800c840:	460b      	mov	r3, r1
 800c842:	4610      	mov	r0, r2
 800c844:	4619      	mov	r1, r3
 800c846:	f04f 0200 	mov.w	r2, #0
 800c84a:	4b07      	ldr	r3, [pc, #28]	; (800c868 <can1_ams_cell_temperatures_t2s4_decode+0x48>)
 800c84c:	f7f3 fd0e 	bl	800026c <__aeabi_dsub>
 800c850:	4602      	mov	r2, r0
 800c852:	460b      	mov	r3, r1
 800c854:	ec43 2b17 	vmov	d7, r2, r3
}
 800c858:	eeb0 0a47 	vmov.f32	s0, s14
 800c85c:	eef0 0a67 	vmov.f32	s1, s15
 800c860:	3708      	adds	r7, #8
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	40240000 	.word	0x40240000
 800c86c:	757928e1 	.word	0x757928e1
 800c870:	3fa9018e 	.word	0x3fa9018e
 800c874:	00000000 	.word	0x00000000

0800c878 <can1_ams_cell_temperatures_t2s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s5_encode(double value)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c882:	f04f 0200 	mov.w	r2, #0
 800c886:	4b10      	ldr	r3, [pc, #64]	; (800c8c8 <can1_ams_cell_temperatures_t2s5_encode+0x50>)
 800c888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c88c:	f7f3 fcf0 	bl	8000270 <__adddf3>
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	4610      	mov	r0, r2
 800c896:	4619      	mov	r1, r3
 800c898:	a309      	add	r3, pc, #36	; (adr r3, 800c8c0 <can1_ams_cell_temperatures_t2s5_encode+0x48>)
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	f7f3 ffc7 	bl	8000830 <__aeabi_ddiv>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4610      	mov	r0, r2
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	f7f4 f947 	bl	8000b3c <__aeabi_d2iz>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	b21b      	sxth	r3, r3
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3708      	adds	r7, #8
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	f3af 8000 	nop.w
 800c8c0:	757928e1 	.word	0x757928e1
 800c8c4:	3fa9018e 	.word	0x3fa9018e
 800c8c8:	40240000 	.word	0x40240000
 800c8cc:	00000000 	.word	0x00000000

0800c8d0 <can1_ams_cell_temperatures_t2s5_decode>:

double can1_ams_cell_temperatures_t2s5_decode(int16_t value)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c8da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7f3 fe12 	bl	8000508 <__aeabi_i2d>
 800c8e4:	a30d      	add	r3, pc, #52	; (adr r3, 800c91c <can1_ams_cell_temperatures_t2s5_decode+0x4c>)
 800c8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ea:	f7f3 fe77 	bl	80005dc <__aeabi_dmul>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	4610      	mov	r0, r2
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	f04f 0200 	mov.w	r2, #0
 800c8fa:	4b07      	ldr	r3, [pc, #28]	; (800c918 <can1_ams_cell_temperatures_t2s5_decode+0x48>)
 800c8fc:	f7f3 fcb6 	bl	800026c <__aeabi_dsub>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	ec43 2b17 	vmov	d7, r2, r3
}
 800c908:	eeb0 0a47 	vmov.f32	s0, s14
 800c90c:	eef0 0a67 	vmov.f32	s1, s15
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	40240000 	.word	0x40240000
 800c91c:	757928e1 	.word	0x757928e1
 800c920:	3fa9018e 	.word	0x3fa9018e
 800c924:	00000000 	.word	0x00000000

0800c928 <can1_ams_cell_temperatures_t2s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s6_encode(double value)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c932:	f04f 0200 	mov.w	r2, #0
 800c936:	4b10      	ldr	r3, [pc, #64]	; (800c978 <can1_ams_cell_temperatures_t2s6_encode+0x50>)
 800c938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c93c:	f7f3 fc98 	bl	8000270 <__adddf3>
 800c940:	4602      	mov	r2, r0
 800c942:	460b      	mov	r3, r1
 800c944:	4610      	mov	r0, r2
 800c946:	4619      	mov	r1, r3
 800c948:	a309      	add	r3, pc, #36	; (adr r3, 800c970 <can1_ams_cell_temperatures_t2s6_encode+0x48>)
 800c94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94e:	f7f3 ff6f 	bl	8000830 <__aeabi_ddiv>
 800c952:	4602      	mov	r2, r0
 800c954:	460b      	mov	r3, r1
 800c956:	4610      	mov	r0, r2
 800c958:	4619      	mov	r1, r3
 800c95a:	f7f4 f8ef 	bl	8000b3c <__aeabi_d2iz>
 800c95e:	4603      	mov	r3, r0
 800c960:	b21b      	sxth	r3, r3
}
 800c962:	4618      	mov	r0, r3
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	f3af 8000 	nop.w
 800c970:	757928e1 	.word	0x757928e1
 800c974:	3fa9018e 	.word	0x3fa9018e
 800c978:	40240000 	.word	0x40240000
 800c97c:	00000000 	.word	0x00000000

0800c980 <can1_ams_cell_temperatures_t2s6_decode>:

double can1_ams_cell_temperatures_t2s6_decode(int16_t value)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	4603      	mov	r3, r0
 800c988:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c98a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c98e:	4618      	mov	r0, r3
 800c990:	f7f3 fdba 	bl	8000508 <__aeabi_i2d>
 800c994:	a30d      	add	r3, pc, #52	; (adr r3, 800c9cc <can1_ams_cell_temperatures_t2s6_decode+0x4c>)
 800c996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99a:	f7f3 fe1f 	bl	80005dc <__aeabi_dmul>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	4610      	mov	r0, r2
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	f04f 0200 	mov.w	r2, #0
 800c9aa:	4b07      	ldr	r3, [pc, #28]	; (800c9c8 <can1_ams_cell_temperatures_t2s6_decode+0x48>)
 800c9ac:	f7f3 fc5e 	bl	800026c <__aeabi_dsub>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c9b8:	eeb0 0a47 	vmov.f32	s0, s14
 800c9bc:	eef0 0a67 	vmov.f32	s1, s15
 800c9c0:	3708      	adds	r7, #8
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	40240000 	.word	0x40240000
 800c9cc:	757928e1 	.word	0x757928e1
 800c9d0:	3fa9018e 	.word	0x3fa9018e
 800c9d4:	00000000 	.word	0x00000000

0800c9d8 <can1_ams_cell_temperatures_t2s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s7_encode(double value)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c9e2:	f04f 0200 	mov.w	r2, #0
 800c9e6:	4b10      	ldr	r3, [pc, #64]	; (800ca28 <can1_ams_cell_temperatures_t2s7_encode+0x50>)
 800c9e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9ec:	f7f3 fc40 	bl	8000270 <__adddf3>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	4610      	mov	r0, r2
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	a309      	add	r3, pc, #36	; (adr r3, 800ca20 <can1_ams_cell_temperatures_t2s7_encode+0x48>)
 800c9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fe:	f7f3 ff17 	bl	8000830 <__aeabi_ddiv>
 800ca02:	4602      	mov	r2, r0
 800ca04:	460b      	mov	r3, r1
 800ca06:	4610      	mov	r0, r2
 800ca08:	4619      	mov	r1, r3
 800ca0a:	f7f4 f897 	bl	8000b3c <__aeabi_d2iz>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	b21b      	sxth	r3, r3
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	f3af 8000 	nop.w
 800ca20:	757928e1 	.word	0x757928e1
 800ca24:	3fa9018e 	.word	0x3fa9018e
 800ca28:	40240000 	.word	0x40240000
 800ca2c:	00000000 	.word	0x00000000

0800ca30 <can1_ams_cell_temperatures_t2s7_decode>:

double can1_ams_cell_temperatures_t2s7_decode(int16_t value)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	4603      	mov	r3, r0
 800ca38:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800ca3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7f3 fd62 	bl	8000508 <__aeabi_i2d>
 800ca44:	a30d      	add	r3, pc, #52	; (adr r3, 800ca7c <can1_ams_cell_temperatures_t2s7_decode+0x4c>)
 800ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4a:	f7f3 fdc7 	bl	80005dc <__aeabi_dmul>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	4610      	mov	r0, r2
 800ca54:	4619      	mov	r1, r3
 800ca56:	f04f 0200 	mov.w	r2, #0
 800ca5a:	4b07      	ldr	r3, [pc, #28]	; (800ca78 <can1_ams_cell_temperatures_t2s7_decode+0x48>)
 800ca5c:	f7f3 fc06 	bl	800026c <__aeabi_dsub>
 800ca60:	4602      	mov	r2, r0
 800ca62:	460b      	mov	r3, r1
 800ca64:	ec43 2b17 	vmov	d7, r2, r3
}
 800ca68:	eeb0 0a47 	vmov.f32	s0, s14
 800ca6c:	eef0 0a67 	vmov.f32	s1, s15
 800ca70:	3708      	adds	r7, #8
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	40240000 	.word	0x40240000
 800ca7c:	757928e1 	.word	0x757928e1
 800ca80:	3fa9018e 	.word	0x3fa9018e
 800ca84:	00000000 	.word	0x00000000

0800ca88 <can1_ams_cell_temperatures_t2s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s8_encode(double value)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ca92:	f04f 0200 	mov.w	r2, #0
 800ca96:	4b10      	ldr	r3, [pc, #64]	; (800cad8 <can1_ams_cell_temperatures_t2s8_encode+0x50>)
 800ca98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca9c:	f7f3 fbe8 	bl	8000270 <__adddf3>
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	4610      	mov	r0, r2
 800caa6:	4619      	mov	r1, r3
 800caa8:	a309      	add	r3, pc, #36	; (adr r3, 800cad0 <can1_ams_cell_temperatures_t2s8_encode+0x48>)
 800caaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caae:	f7f3 febf 	bl	8000830 <__aeabi_ddiv>
 800cab2:	4602      	mov	r2, r0
 800cab4:	460b      	mov	r3, r1
 800cab6:	4610      	mov	r0, r2
 800cab8:	4619      	mov	r1, r3
 800caba:	f7f4 f83f 	bl	8000b3c <__aeabi_d2iz>
 800cabe:	4603      	mov	r3, r0
 800cac0:	b21b      	sxth	r3, r3
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3708      	adds	r7, #8
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	f3af 8000 	nop.w
 800cad0:	757928e1 	.word	0x757928e1
 800cad4:	3fa9018e 	.word	0x3fa9018e
 800cad8:	40240000 	.word	0x40240000
 800cadc:	00000000 	.word	0x00000000

0800cae0 <can1_ams_cell_temperatures_t2s8_decode>:

double can1_ams_cell_temperatures_t2s8_decode(int16_t value)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	4603      	mov	r3, r0
 800cae8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800caea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800caee:	4618      	mov	r0, r3
 800caf0:	f7f3 fd0a 	bl	8000508 <__aeabi_i2d>
 800caf4:	a30d      	add	r3, pc, #52	; (adr r3, 800cb2c <can1_ams_cell_temperatures_t2s8_decode+0x4c>)
 800caf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafa:	f7f3 fd6f 	bl	80005dc <__aeabi_dmul>
 800cafe:	4602      	mov	r2, r0
 800cb00:	460b      	mov	r3, r1
 800cb02:	4610      	mov	r0, r2
 800cb04:	4619      	mov	r1, r3
 800cb06:	f04f 0200 	mov.w	r2, #0
 800cb0a:	4b07      	ldr	r3, [pc, #28]	; (800cb28 <can1_ams_cell_temperatures_t2s8_decode+0x48>)
 800cb0c:	f7f3 fbae 	bl	800026c <__aeabi_dsub>
 800cb10:	4602      	mov	r2, r0
 800cb12:	460b      	mov	r3, r1
 800cb14:	ec43 2b17 	vmov	d7, r2, r3
}
 800cb18:	eeb0 0a47 	vmov.f32	s0, s14
 800cb1c:	eef0 0a67 	vmov.f32	s1, s15
 800cb20:	3708      	adds	r7, #8
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	40240000 	.word	0x40240000
 800cb2c:	757928e1 	.word	0x757928e1
 800cb30:	3fa9018e 	.word	0x3fa9018e
 800cb34:	00000000 	.word	0x00000000

0800cb38 <can1_ams_cell_temperatures_t2s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s9_encode(double value)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cb42:	f04f 0200 	mov.w	r2, #0
 800cb46:	4b10      	ldr	r3, [pc, #64]	; (800cb88 <can1_ams_cell_temperatures_t2s9_encode+0x50>)
 800cb48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb4c:	f7f3 fb90 	bl	8000270 <__adddf3>
 800cb50:	4602      	mov	r2, r0
 800cb52:	460b      	mov	r3, r1
 800cb54:	4610      	mov	r0, r2
 800cb56:	4619      	mov	r1, r3
 800cb58:	a309      	add	r3, pc, #36	; (adr r3, 800cb80 <can1_ams_cell_temperatures_t2s9_encode+0x48>)
 800cb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5e:	f7f3 fe67 	bl	8000830 <__aeabi_ddiv>
 800cb62:	4602      	mov	r2, r0
 800cb64:	460b      	mov	r3, r1
 800cb66:	4610      	mov	r0, r2
 800cb68:	4619      	mov	r1, r3
 800cb6a:	f7f3 ffe7 	bl	8000b3c <__aeabi_d2iz>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	b21b      	sxth	r3, r3
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3708      	adds	r7, #8
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	f3af 8000 	nop.w
 800cb80:	757928e1 	.word	0x757928e1
 800cb84:	3fa9018e 	.word	0x3fa9018e
 800cb88:	40240000 	.word	0x40240000
 800cb8c:	00000000 	.word	0x00000000

0800cb90 <can1_ams_cell_temperatures_t2s9_decode>:

double can1_ams_cell_temperatures_t2s9_decode(int16_t value)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	4603      	mov	r3, r0
 800cb98:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cb9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7f3 fcb2 	bl	8000508 <__aeabi_i2d>
 800cba4:	a30d      	add	r3, pc, #52	; (adr r3, 800cbdc <can1_ams_cell_temperatures_t2s9_decode+0x4c>)
 800cba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbaa:	f7f3 fd17 	bl	80005dc <__aeabi_dmul>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	4610      	mov	r0, r2
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	f04f 0200 	mov.w	r2, #0
 800cbba:	4b07      	ldr	r3, [pc, #28]	; (800cbd8 <can1_ams_cell_temperatures_t2s9_decode+0x48>)
 800cbbc:	f7f3 fb56 	bl	800026c <__aeabi_dsub>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	ec43 2b17 	vmov	d7, r2, r3
}
 800cbc8:	eeb0 0a47 	vmov.f32	s0, s14
 800cbcc:	eef0 0a67 	vmov.f32	s1, s15
 800cbd0:	3708      	adds	r7, #8
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	40240000 	.word	0x40240000
 800cbdc:	757928e1 	.word	0x757928e1
 800cbe0:	3fa9018e 	.word	0x3fa9018e
 800cbe4:	00000000 	.word	0x00000000

0800cbe8 <can1_ams_cell_temperatures_t2s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s10_encode(double value)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cbf2:	f04f 0200 	mov.w	r2, #0
 800cbf6:	4b10      	ldr	r3, [pc, #64]	; (800cc38 <can1_ams_cell_temperatures_t2s10_encode+0x50>)
 800cbf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cbfc:	f7f3 fb38 	bl	8000270 <__adddf3>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	4610      	mov	r0, r2
 800cc06:	4619      	mov	r1, r3
 800cc08:	a309      	add	r3, pc, #36	; (adr r3, 800cc30 <can1_ams_cell_temperatures_t2s10_encode+0x48>)
 800cc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0e:	f7f3 fe0f 	bl	8000830 <__aeabi_ddiv>
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	4610      	mov	r0, r2
 800cc18:	4619      	mov	r1, r3
 800cc1a:	f7f3 ff8f 	bl	8000b3c <__aeabi_d2iz>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	b21b      	sxth	r3, r3
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	f3af 8000 	nop.w
 800cc30:	757928e1 	.word	0x757928e1
 800cc34:	3fa9018e 	.word	0x3fa9018e
 800cc38:	40240000 	.word	0x40240000
 800cc3c:	00000000 	.word	0x00000000

0800cc40 <can1_ams_cell_temperatures_t2s10_decode>:

double can1_ams_cell_temperatures_t2s10_decode(int16_t value)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	4603      	mov	r3, r0
 800cc48:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cc4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7f3 fc5a 	bl	8000508 <__aeabi_i2d>
 800cc54:	a30d      	add	r3, pc, #52	; (adr r3, 800cc8c <can1_ams_cell_temperatures_t2s10_decode+0x4c>)
 800cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5a:	f7f3 fcbf 	bl	80005dc <__aeabi_dmul>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	460b      	mov	r3, r1
 800cc62:	4610      	mov	r0, r2
 800cc64:	4619      	mov	r1, r3
 800cc66:	f04f 0200 	mov.w	r2, #0
 800cc6a:	4b07      	ldr	r3, [pc, #28]	; (800cc88 <can1_ams_cell_temperatures_t2s10_decode+0x48>)
 800cc6c:	f7f3 fafe 	bl	800026c <__aeabi_dsub>
 800cc70:	4602      	mov	r2, r0
 800cc72:	460b      	mov	r3, r1
 800cc74:	ec43 2b17 	vmov	d7, r2, r3
}
 800cc78:	eeb0 0a47 	vmov.f32	s0, s14
 800cc7c:	eef0 0a67 	vmov.f32	s1, s15
 800cc80:	3708      	adds	r7, #8
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	40240000 	.word	0x40240000
 800cc8c:	757928e1 	.word	0x757928e1
 800cc90:	3fa9018e 	.word	0x3fa9018e
 800cc94:	00000000 	.word	0x00000000

0800cc98 <can1_ams_cell_temperatures_t2s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s11_encode(double value)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cca2:	f04f 0200 	mov.w	r2, #0
 800cca6:	4b10      	ldr	r3, [pc, #64]	; (800cce8 <can1_ams_cell_temperatures_t2s11_encode+0x50>)
 800cca8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ccac:	f7f3 fae0 	bl	8000270 <__adddf3>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	4610      	mov	r0, r2
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	a309      	add	r3, pc, #36	; (adr r3, 800cce0 <can1_ams_cell_temperatures_t2s11_encode+0x48>)
 800ccba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbe:	f7f3 fdb7 	bl	8000830 <__aeabi_ddiv>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4610      	mov	r0, r2
 800ccc8:	4619      	mov	r1, r3
 800ccca:	f7f3 ff37 	bl	8000b3c <__aeabi_d2iz>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	b21b      	sxth	r3, r3
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3708      	adds	r7, #8
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	f3af 8000 	nop.w
 800cce0:	757928e1 	.word	0x757928e1
 800cce4:	3fa9018e 	.word	0x3fa9018e
 800cce8:	40240000 	.word	0x40240000
 800ccec:	00000000 	.word	0x00000000

0800ccf0 <can1_ams_cell_temperatures_t2s11_decode>:

double can1_ams_cell_temperatures_t2s11_decode(int16_t value)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800ccfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7f3 fc02 	bl	8000508 <__aeabi_i2d>
 800cd04:	a30d      	add	r3, pc, #52	; (adr r3, 800cd3c <can1_ams_cell_temperatures_t2s11_decode+0x4c>)
 800cd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0a:	f7f3 fc67 	bl	80005dc <__aeabi_dmul>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	460b      	mov	r3, r1
 800cd12:	4610      	mov	r0, r2
 800cd14:	4619      	mov	r1, r3
 800cd16:	f04f 0200 	mov.w	r2, #0
 800cd1a:	4b07      	ldr	r3, [pc, #28]	; (800cd38 <can1_ams_cell_temperatures_t2s11_decode+0x48>)
 800cd1c:	f7f3 faa6 	bl	800026c <__aeabi_dsub>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	ec43 2b17 	vmov	d7, r2, r3
}
 800cd28:	eeb0 0a47 	vmov.f32	s0, s14
 800cd2c:	eef0 0a67 	vmov.f32	s1, s15
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	40240000 	.word	0x40240000
 800cd3c:	757928e1 	.word	0x757928e1
 800cd40:	3fa9018e 	.word	0x3fa9018e
 800cd44:	00000000 	.word	0x00000000

0800cd48 <can1_ams_cell_temperatures_t2s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s12_encode(double value)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cd52:	f04f 0200 	mov.w	r2, #0
 800cd56:	4b10      	ldr	r3, [pc, #64]	; (800cd98 <can1_ams_cell_temperatures_t2s12_encode+0x50>)
 800cd58:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cd5c:	f7f3 fa88 	bl	8000270 <__adddf3>
 800cd60:	4602      	mov	r2, r0
 800cd62:	460b      	mov	r3, r1
 800cd64:	4610      	mov	r0, r2
 800cd66:	4619      	mov	r1, r3
 800cd68:	a309      	add	r3, pc, #36	; (adr r3, 800cd90 <can1_ams_cell_temperatures_t2s12_encode+0x48>)
 800cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6e:	f7f3 fd5f 	bl	8000830 <__aeabi_ddiv>
 800cd72:	4602      	mov	r2, r0
 800cd74:	460b      	mov	r3, r1
 800cd76:	4610      	mov	r0, r2
 800cd78:	4619      	mov	r1, r3
 800cd7a:	f7f3 fedf 	bl	8000b3c <__aeabi_d2iz>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	b21b      	sxth	r3, r3
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3708      	adds	r7, #8
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	f3af 8000 	nop.w
 800cd90:	757928e1 	.word	0x757928e1
 800cd94:	3fa9018e 	.word	0x3fa9018e
 800cd98:	40240000 	.word	0x40240000
 800cd9c:	00000000 	.word	0x00000000

0800cda0 <can1_ams_cell_temperatures_t2s12_decode>:

double can1_ams_cell_temperatures_t2s12_decode(int16_t value)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cdaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7f3 fbaa 	bl	8000508 <__aeabi_i2d>
 800cdb4:	a30d      	add	r3, pc, #52	; (adr r3, 800cdec <can1_ams_cell_temperatures_t2s12_decode+0x4c>)
 800cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdba:	f7f3 fc0f 	bl	80005dc <__aeabi_dmul>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	4610      	mov	r0, r2
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	f04f 0200 	mov.w	r2, #0
 800cdca:	4b07      	ldr	r3, [pc, #28]	; (800cde8 <can1_ams_cell_temperatures_t2s12_decode+0x48>)
 800cdcc:	f7f3 fa4e 	bl	800026c <__aeabi_dsub>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	ec43 2b17 	vmov	d7, r2, r3
}
 800cdd8:	eeb0 0a47 	vmov.f32	s0, s14
 800cddc:	eef0 0a67 	vmov.f32	s1, s15
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	40240000 	.word	0x40240000
 800cdec:	757928e1 	.word	0x757928e1
 800cdf0:	3fa9018e 	.word	0x3fa9018e
 800cdf4:	00000000 	.word	0x00000000

0800cdf8 <can1_ams_cell_temperatures_t3s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s1_encode(double value)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ce02:	f04f 0200 	mov.w	r2, #0
 800ce06:	4b10      	ldr	r3, [pc, #64]	; (800ce48 <can1_ams_cell_temperatures_t3s1_encode+0x50>)
 800ce08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ce0c:	f7f3 fa30 	bl	8000270 <__adddf3>
 800ce10:	4602      	mov	r2, r0
 800ce12:	460b      	mov	r3, r1
 800ce14:	4610      	mov	r0, r2
 800ce16:	4619      	mov	r1, r3
 800ce18:	a309      	add	r3, pc, #36	; (adr r3, 800ce40 <can1_ams_cell_temperatures_t3s1_encode+0x48>)
 800ce1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1e:	f7f3 fd07 	bl	8000830 <__aeabi_ddiv>
 800ce22:	4602      	mov	r2, r0
 800ce24:	460b      	mov	r3, r1
 800ce26:	4610      	mov	r0, r2
 800ce28:	4619      	mov	r1, r3
 800ce2a:	f7f3 fe87 	bl	8000b3c <__aeabi_d2iz>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	b21b      	sxth	r3, r3
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	f3af 8000 	nop.w
 800ce40:	757928e1 	.word	0x757928e1
 800ce44:	3fa9018e 	.word	0x3fa9018e
 800ce48:	40240000 	.word	0x40240000
 800ce4c:	00000000 	.word	0x00000000

0800ce50 <can1_ams_cell_temperatures_t3s1_decode>:

double can1_ams_cell_temperatures_t3s1_decode(int16_t value)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	4603      	mov	r3, r0
 800ce58:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800ce5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7f3 fb52 	bl	8000508 <__aeabi_i2d>
 800ce64:	a30d      	add	r3, pc, #52	; (adr r3, 800ce9c <can1_ams_cell_temperatures_t3s1_decode+0x4c>)
 800ce66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6a:	f7f3 fbb7 	bl	80005dc <__aeabi_dmul>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	460b      	mov	r3, r1
 800ce72:	4610      	mov	r0, r2
 800ce74:	4619      	mov	r1, r3
 800ce76:	f04f 0200 	mov.w	r2, #0
 800ce7a:	4b07      	ldr	r3, [pc, #28]	; (800ce98 <can1_ams_cell_temperatures_t3s1_decode+0x48>)
 800ce7c:	f7f3 f9f6 	bl	800026c <__aeabi_dsub>
 800ce80:	4602      	mov	r2, r0
 800ce82:	460b      	mov	r3, r1
 800ce84:	ec43 2b17 	vmov	d7, r2, r3
}
 800ce88:	eeb0 0a47 	vmov.f32	s0, s14
 800ce8c:	eef0 0a67 	vmov.f32	s1, s15
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	40240000 	.word	0x40240000
 800ce9c:	757928e1 	.word	0x757928e1
 800cea0:	3fa9018e 	.word	0x3fa9018e
 800cea4:	00000000 	.word	0x00000000

0800cea8 <can1_ams_cell_temperatures_t3s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s2_encode(double value)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ceb2:	f04f 0200 	mov.w	r2, #0
 800ceb6:	4b10      	ldr	r3, [pc, #64]	; (800cef8 <can1_ams_cell_temperatures_t3s2_encode+0x50>)
 800ceb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cebc:	f7f3 f9d8 	bl	8000270 <__adddf3>
 800cec0:	4602      	mov	r2, r0
 800cec2:	460b      	mov	r3, r1
 800cec4:	4610      	mov	r0, r2
 800cec6:	4619      	mov	r1, r3
 800cec8:	a309      	add	r3, pc, #36	; (adr r3, 800cef0 <can1_ams_cell_temperatures_t3s2_encode+0x48>)
 800ceca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cece:	f7f3 fcaf 	bl	8000830 <__aeabi_ddiv>
 800ced2:	4602      	mov	r2, r0
 800ced4:	460b      	mov	r3, r1
 800ced6:	4610      	mov	r0, r2
 800ced8:	4619      	mov	r1, r3
 800ceda:	f7f3 fe2f 	bl	8000b3c <__aeabi_d2iz>
 800cede:	4603      	mov	r3, r0
 800cee0:	b21b      	sxth	r3, r3
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	f3af 8000 	nop.w
 800cef0:	757928e1 	.word	0x757928e1
 800cef4:	3fa9018e 	.word	0x3fa9018e
 800cef8:	40240000 	.word	0x40240000
 800cefc:	00000000 	.word	0x00000000

0800cf00 <can1_ams_cell_temperatures_t3s2_decode>:

double can1_ams_cell_temperatures_t3s2_decode(int16_t value)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	4603      	mov	r3, r0
 800cf08:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cf0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7f3 fafa 	bl	8000508 <__aeabi_i2d>
 800cf14:	a30d      	add	r3, pc, #52	; (adr r3, 800cf4c <can1_ams_cell_temperatures_t3s2_decode+0x4c>)
 800cf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1a:	f7f3 fb5f 	bl	80005dc <__aeabi_dmul>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	460b      	mov	r3, r1
 800cf22:	4610      	mov	r0, r2
 800cf24:	4619      	mov	r1, r3
 800cf26:	f04f 0200 	mov.w	r2, #0
 800cf2a:	4b07      	ldr	r3, [pc, #28]	; (800cf48 <can1_ams_cell_temperatures_t3s2_decode+0x48>)
 800cf2c:	f7f3 f99e 	bl	800026c <__aeabi_dsub>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	ec43 2b17 	vmov	d7, r2, r3
}
 800cf38:	eeb0 0a47 	vmov.f32	s0, s14
 800cf3c:	eef0 0a67 	vmov.f32	s1, s15
 800cf40:	3708      	adds	r7, #8
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	40240000 	.word	0x40240000
 800cf4c:	757928e1 	.word	0x757928e1
 800cf50:	3fa9018e 	.word	0x3fa9018e
 800cf54:	00000000 	.word	0x00000000

0800cf58 <can1_ams_cell_temperatures_t3s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s3_encode(double value)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cf62:	f04f 0200 	mov.w	r2, #0
 800cf66:	4b10      	ldr	r3, [pc, #64]	; (800cfa8 <can1_ams_cell_temperatures_t3s3_encode+0x50>)
 800cf68:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf6c:	f7f3 f980 	bl	8000270 <__adddf3>
 800cf70:	4602      	mov	r2, r0
 800cf72:	460b      	mov	r3, r1
 800cf74:	4610      	mov	r0, r2
 800cf76:	4619      	mov	r1, r3
 800cf78:	a309      	add	r3, pc, #36	; (adr r3, 800cfa0 <can1_ams_cell_temperatures_t3s3_encode+0x48>)
 800cf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7e:	f7f3 fc57 	bl	8000830 <__aeabi_ddiv>
 800cf82:	4602      	mov	r2, r0
 800cf84:	460b      	mov	r3, r1
 800cf86:	4610      	mov	r0, r2
 800cf88:	4619      	mov	r1, r3
 800cf8a:	f7f3 fdd7 	bl	8000b3c <__aeabi_d2iz>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	b21b      	sxth	r3, r3
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	f3af 8000 	nop.w
 800cfa0:	757928e1 	.word	0x757928e1
 800cfa4:	3fa9018e 	.word	0x3fa9018e
 800cfa8:	40240000 	.word	0x40240000
 800cfac:	00000000 	.word	0x00000000

0800cfb0 <can1_ams_cell_temperatures_t3s3_decode>:

double can1_ams_cell_temperatures_t3s3_decode(int16_t value)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cfba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7f3 faa2 	bl	8000508 <__aeabi_i2d>
 800cfc4:	a30d      	add	r3, pc, #52	; (adr r3, 800cffc <can1_ams_cell_temperatures_t3s3_decode+0x4c>)
 800cfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfca:	f7f3 fb07 	bl	80005dc <__aeabi_dmul>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	4610      	mov	r0, r2
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	f04f 0200 	mov.w	r2, #0
 800cfda:	4b07      	ldr	r3, [pc, #28]	; (800cff8 <can1_ams_cell_temperatures_t3s3_decode+0x48>)
 800cfdc:	f7f3 f946 	bl	800026c <__aeabi_dsub>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	ec43 2b17 	vmov	d7, r2, r3
}
 800cfe8:	eeb0 0a47 	vmov.f32	s0, s14
 800cfec:	eef0 0a67 	vmov.f32	s1, s15
 800cff0:	3708      	adds	r7, #8
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	40240000 	.word	0x40240000
 800cffc:	757928e1 	.word	0x757928e1
 800d000:	3fa9018e 	.word	0x3fa9018e
 800d004:	00000000 	.word	0x00000000

0800d008 <can1_ams_cell_temperatures_t3s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s4_encode(double value)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d012:	f04f 0200 	mov.w	r2, #0
 800d016:	4b10      	ldr	r3, [pc, #64]	; (800d058 <can1_ams_cell_temperatures_t3s4_encode+0x50>)
 800d018:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d01c:	f7f3 f928 	bl	8000270 <__adddf3>
 800d020:	4602      	mov	r2, r0
 800d022:	460b      	mov	r3, r1
 800d024:	4610      	mov	r0, r2
 800d026:	4619      	mov	r1, r3
 800d028:	a309      	add	r3, pc, #36	; (adr r3, 800d050 <can1_ams_cell_temperatures_t3s4_encode+0x48>)
 800d02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02e:	f7f3 fbff 	bl	8000830 <__aeabi_ddiv>
 800d032:	4602      	mov	r2, r0
 800d034:	460b      	mov	r3, r1
 800d036:	4610      	mov	r0, r2
 800d038:	4619      	mov	r1, r3
 800d03a:	f7f3 fd7f 	bl	8000b3c <__aeabi_d2iz>
 800d03e:	4603      	mov	r3, r0
 800d040:	b21b      	sxth	r3, r3
}
 800d042:	4618      	mov	r0, r3
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	f3af 8000 	nop.w
 800d050:	757928e1 	.word	0x757928e1
 800d054:	3fa9018e 	.word	0x3fa9018e
 800d058:	40240000 	.word	0x40240000
 800d05c:	00000000 	.word	0x00000000

0800d060 <can1_ams_cell_temperatures_t3s4_decode>:

double can1_ams_cell_temperatures_t3s4_decode(int16_t value)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
 800d066:	4603      	mov	r3, r0
 800d068:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d06a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d06e:	4618      	mov	r0, r3
 800d070:	f7f3 fa4a 	bl	8000508 <__aeabi_i2d>
 800d074:	a30d      	add	r3, pc, #52	; (adr r3, 800d0ac <can1_ams_cell_temperatures_t3s4_decode+0x4c>)
 800d076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07a:	f7f3 faaf 	bl	80005dc <__aeabi_dmul>
 800d07e:	4602      	mov	r2, r0
 800d080:	460b      	mov	r3, r1
 800d082:	4610      	mov	r0, r2
 800d084:	4619      	mov	r1, r3
 800d086:	f04f 0200 	mov.w	r2, #0
 800d08a:	4b07      	ldr	r3, [pc, #28]	; (800d0a8 <can1_ams_cell_temperatures_t3s4_decode+0x48>)
 800d08c:	f7f3 f8ee 	bl	800026c <__aeabi_dsub>
 800d090:	4602      	mov	r2, r0
 800d092:	460b      	mov	r3, r1
 800d094:	ec43 2b17 	vmov	d7, r2, r3
}
 800d098:	eeb0 0a47 	vmov.f32	s0, s14
 800d09c:	eef0 0a67 	vmov.f32	s1, s15
 800d0a0:	3708      	adds	r7, #8
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	40240000 	.word	0x40240000
 800d0ac:	757928e1 	.word	0x757928e1
 800d0b0:	3fa9018e 	.word	0x3fa9018e
 800d0b4:	00000000 	.word	0x00000000

0800d0b8 <can1_ams_cell_temperatures_t3s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s5_encode(double value)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d0c2:	f04f 0200 	mov.w	r2, #0
 800d0c6:	4b10      	ldr	r3, [pc, #64]	; (800d108 <can1_ams_cell_temperatures_t3s5_encode+0x50>)
 800d0c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0cc:	f7f3 f8d0 	bl	8000270 <__adddf3>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	4610      	mov	r0, r2
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	a309      	add	r3, pc, #36	; (adr r3, 800d100 <can1_ams_cell_temperatures_t3s5_encode+0x48>)
 800d0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0de:	f7f3 fba7 	bl	8000830 <__aeabi_ddiv>
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	4610      	mov	r0, r2
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	f7f3 fd27 	bl	8000b3c <__aeabi_d2iz>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	b21b      	sxth	r3, r3
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3708      	adds	r7, #8
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	f3af 8000 	nop.w
 800d100:	757928e1 	.word	0x757928e1
 800d104:	3fa9018e 	.word	0x3fa9018e
 800d108:	40240000 	.word	0x40240000
 800d10c:	00000000 	.word	0x00000000

0800d110 <can1_ams_cell_temperatures_t3s5_decode>:

double can1_ams_cell_temperatures_t3s5_decode(int16_t value)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	4603      	mov	r3, r0
 800d118:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d11a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d11e:	4618      	mov	r0, r3
 800d120:	f7f3 f9f2 	bl	8000508 <__aeabi_i2d>
 800d124:	a30d      	add	r3, pc, #52	; (adr r3, 800d15c <can1_ams_cell_temperatures_t3s5_decode+0x4c>)
 800d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12a:	f7f3 fa57 	bl	80005dc <__aeabi_dmul>
 800d12e:	4602      	mov	r2, r0
 800d130:	460b      	mov	r3, r1
 800d132:	4610      	mov	r0, r2
 800d134:	4619      	mov	r1, r3
 800d136:	f04f 0200 	mov.w	r2, #0
 800d13a:	4b07      	ldr	r3, [pc, #28]	; (800d158 <can1_ams_cell_temperatures_t3s5_decode+0x48>)
 800d13c:	f7f3 f896 	bl	800026c <__aeabi_dsub>
 800d140:	4602      	mov	r2, r0
 800d142:	460b      	mov	r3, r1
 800d144:	ec43 2b17 	vmov	d7, r2, r3
}
 800d148:	eeb0 0a47 	vmov.f32	s0, s14
 800d14c:	eef0 0a67 	vmov.f32	s1, s15
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	40240000 	.word	0x40240000
 800d15c:	757928e1 	.word	0x757928e1
 800d160:	3fa9018e 	.word	0x3fa9018e
 800d164:	00000000 	.word	0x00000000

0800d168 <can1_ams_cell_temperatures_t3s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s6_encode(double value)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d172:	f04f 0200 	mov.w	r2, #0
 800d176:	4b10      	ldr	r3, [pc, #64]	; (800d1b8 <can1_ams_cell_temperatures_t3s6_encode+0x50>)
 800d178:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d17c:	f7f3 f878 	bl	8000270 <__adddf3>
 800d180:	4602      	mov	r2, r0
 800d182:	460b      	mov	r3, r1
 800d184:	4610      	mov	r0, r2
 800d186:	4619      	mov	r1, r3
 800d188:	a309      	add	r3, pc, #36	; (adr r3, 800d1b0 <can1_ams_cell_temperatures_t3s6_encode+0x48>)
 800d18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18e:	f7f3 fb4f 	bl	8000830 <__aeabi_ddiv>
 800d192:	4602      	mov	r2, r0
 800d194:	460b      	mov	r3, r1
 800d196:	4610      	mov	r0, r2
 800d198:	4619      	mov	r1, r3
 800d19a:	f7f3 fccf 	bl	8000b3c <__aeabi_d2iz>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	b21b      	sxth	r3, r3
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	f3af 8000 	nop.w
 800d1b0:	757928e1 	.word	0x757928e1
 800d1b4:	3fa9018e 	.word	0x3fa9018e
 800d1b8:	40240000 	.word	0x40240000
 800d1bc:	00000000 	.word	0x00000000

0800d1c0 <can1_ams_cell_temperatures_t3s6_decode>:

double can1_ams_cell_temperatures_t3s6_decode(int16_t value)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d1ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7f3 f99a 	bl	8000508 <__aeabi_i2d>
 800d1d4:	a30d      	add	r3, pc, #52	; (adr r3, 800d20c <can1_ams_cell_temperatures_t3s6_decode+0x4c>)
 800d1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1da:	f7f3 f9ff 	bl	80005dc <__aeabi_dmul>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	4610      	mov	r0, r2
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	f04f 0200 	mov.w	r2, #0
 800d1ea:	4b07      	ldr	r3, [pc, #28]	; (800d208 <can1_ams_cell_temperatures_t3s6_decode+0x48>)
 800d1ec:	f7f3 f83e 	bl	800026c <__aeabi_dsub>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d1f8:	eeb0 0a47 	vmov.f32	s0, s14
 800d1fc:	eef0 0a67 	vmov.f32	s1, s15
 800d200:	3708      	adds	r7, #8
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	40240000 	.word	0x40240000
 800d20c:	757928e1 	.word	0x757928e1
 800d210:	3fa9018e 	.word	0x3fa9018e
 800d214:	00000000 	.word	0x00000000

0800d218 <can1_ams_cell_temperatures_t3s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s7_encode(double value)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d222:	f04f 0200 	mov.w	r2, #0
 800d226:	4b10      	ldr	r3, [pc, #64]	; (800d268 <can1_ams_cell_temperatures_t3s7_encode+0x50>)
 800d228:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d22c:	f7f3 f820 	bl	8000270 <__adddf3>
 800d230:	4602      	mov	r2, r0
 800d232:	460b      	mov	r3, r1
 800d234:	4610      	mov	r0, r2
 800d236:	4619      	mov	r1, r3
 800d238:	a309      	add	r3, pc, #36	; (adr r3, 800d260 <can1_ams_cell_temperatures_t3s7_encode+0x48>)
 800d23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23e:	f7f3 faf7 	bl	8000830 <__aeabi_ddiv>
 800d242:	4602      	mov	r2, r0
 800d244:	460b      	mov	r3, r1
 800d246:	4610      	mov	r0, r2
 800d248:	4619      	mov	r1, r3
 800d24a:	f7f3 fc77 	bl	8000b3c <__aeabi_d2iz>
 800d24e:	4603      	mov	r3, r0
 800d250:	b21b      	sxth	r3, r3
}
 800d252:	4618      	mov	r0, r3
 800d254:	3708      	adds	r7, #8
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	f3af 8000 	nop.w
 800d260:	757928e1 	.word	0x757928e1
 800d264:	3fa9018e 	.word	0x3fa9018e
 800d268:	40240000 	.word	0x40240000
 800d26c:	00000000 	.word	0x00000000

0800d270 <can1_ams_cell_temperatures_t3s7_decode>:

double can1_ams_cell_temperatures_t3s7_decode(int16_t value)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	4603      	mov	r3, r0
 800d278:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d27a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d27e:	4618      	mov	r0, r3
 800d280:	f7f3 f942 	bl	8000508 <__aeabi_i2d>
 800d284:	a30d      	add	r3, pc, #52	; (adr r3, 800d2bc <can1_ams_cell_temperatures_t3s7_decode+0x4c>)
 800d286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28a:	f7f3 f9a7 	bl	80005dc <__aeabi_dmul>
 800d28e:	4602      	mov	r2, r0
 800d290:	460b      	mov	r3, r1
 800d292:	4610      	mov	r0, r2
 800d294:	4619      	mov	r1, r3
 800d296:	f04f 0200 	mov.w	r2, #0
 800d29a:	4b07      	ldr	r3, [pc, #28]	; (800d2b8 <can1_ams_cell_temperatures_t3s7_decode+0x48>)
 800d29c:	f7f2 ffe6 	bl	800026c <__aeabi_dsub>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d2a8:	eeb0 0a47 	vmov.f32	s0, s14
 800d2ac:	eef0 0a67 	vmov.f32	s1, s15
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	40240000 	.word	0x40240000
 800d2bc:	757928e1 	.word	0x757928e1
 800d2c0:	3fa9018e 	.word	0x3fa9018e
 800d2c4:	00000000 	.word	0x00000000

0800d2c8 <can1_ams_cell_temperatures_t3s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s8_encode(double value)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d2d2:	f04f 0200 	mov.w	r2, #0
 800d2d6:	4b10      	ldr	r3, [pc, #64]	; (800d318 <can1_ams_cell_temperatures_t3s8_encode+0x50>)
 800d2d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d2dc:	f7f2 ffc8 	bl	8000270 <__adddf3>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	4610      	mov	r0, r2
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	a309      	add	r3, pc, #36	; (adr r3, 800d310 <can1_ams_cell_temperatures_t3s8_encode+0x48>)
 800d2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ee:	f7f3 fa9f 	bl	8000830 <__aeabi_ddiv>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	4610      	mov	r0, r2
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	f7f3 fc1f 	bl	8000b3c <__aeabi_d2iz>
 800d2fe:	4603      	mov	r3, r0
 800d300:	b21b      	sxth	r3, r3
}
 800d302:	4618      	mov	r0, r3
 800d304:	3708      	adds	r7, #8
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	f3af 8000 	nop.w
 800d310:	757928e1 	.word	0x757928e1
 800d314:	3fa9018e 	.word	0x3fa9018e
 800d318:	40240000 	.word	0x40240000
 800d31c:	00000000 	.word	0x00000000

0800d320 <can1_ams_cell_temperatures_t3s8_decode>:

double can1_ams_cell_temperatures_t3s8_decode(int16_t value)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	4603      	mov	r3, r0
 800d328:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d32a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d32e:	4618      	mov	r0, r3
 800d330:	f7f3 f8ea 	bl	8000508 <__aeabi_i2d>
 800d334:	a30d      	add	r3, pc, #52	; (adr r3, 800d36c <can1_ams_cell_temperatures_t3s8_decode+0x4c>)
 800d336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33a:	f7f3 f94f 	bl	80005dc <__aeabi_dmul>
 800d33e:	4602      	mov	r2, r0
 800d340:	460b      	mov	r3, r1
 800d342:	4610      	mov	r0, r2
 800d344:	4619      	mov	r1, r3
 800d346:	f04f 0200 	mov.w	r2, #0
 800d34a:	4b07      	ldr	r3, [pc, #28]	; (800d368 <can1_ams_cell_temperatures_t3s8_decode+0x48>)
 800d34c:	f7f2 ff8e 	bl	800026c <__aeabi_dsub>
 800d350:	4602      	mov	r2, r0
 800d352:	460b      	mov	r3, r1
 800d354:	ec43 2b17 	vmov	d7, r2, r3
}
 800d358:	eeb0 0a47 	vmov.f32	s0, s14
 800d35c:	eef0 0a67 	vmov.f32	s1, s15
 800d360:	3708      	adds	r7, #8
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	40240000 	.word	0x40240000
 800d36c:	757928e1 	.word	0x757928e1
 800d370:	3fa9018e 	.word	0x3fa9018e
 800d374:	00000000 	.word	0x00000000

0800d378 <can1_ams_cell_temperatures_t3s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s9_encode(double value)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d382:	f04f 0200 	mov.w	r2, #0
 800d386:	4b10      	ldr	r3, [pc, #64]	; (800d3c8 <can1_ams_cell_temperatures_t3s9_encode+0x50>)
 800d388:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d38c:	f7f2 ff70 	bl	8000270 <__adddf3>
 800d390:	4602      	mov	r2, r0
 800d392:	460b      	mov	r3, r1
 800d394:	4610      	mov	r0, r2
 800d396:	4619      	mov	r1, r3
 800d398:	a309      	add	r3, pc, #36	; (adr r3, 800d3c0 <can1_ams_cell_temperatures_t3s9_encode+0x48>)
 800d39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39e:	f7f3 fa47 	bl	8000830 <__aeabi_ddiv>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	4610      	mov	r0, r2
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	f7f3 fbc7 	bl	8000b3c <__aeabi_d2iz>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	b21b      	sxth	r3, r3
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3708      	adds	r7, #8
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	f3af 8000 	nop.w
 800d3c0:	757928e1 	.word	0x757928e1
 800d3c4:	3fa9018e 	.word	0x3fa9018e
 800d3c8:	40240000 	.word	0x40240000
 800d3cc:	00000000 	.word	0x00000000

0800d3d0 <can1_ams_cell_temperatures_t3s9_decode>:

double can1_ams_cell_temperatures_t3s9_decode(int16_t value)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d3da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7f3 f892 	bl	8000508 <__aeabi_i2d>
 800d3e4:	a30d      	add	r3, pc, #52	; (adr r3, 800d41c <can1_ams_cell_temperatures_t3s9_decode+0x4c>)
 800d3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ea:	f7f3 f8f7 	bl	80005dc <__aeabi_dmul>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	4610      	mov	r0, r2
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	f04f 0200 	mov.w	r2, #0
 800d3fa:	4b07      	ldr	r3, [pc, #28]	; (800d418 <can1_ams_cell_temperatures_t3s9_decode+0x48>)
 800d3fc:	f7f2 ff36 	bl	800026c <__aeabi_dsub>
 800d400:	4602      	mov	r2, r0
 800d402:	460b      	mov	r3, r1
 800d404:	ec43 2b17 	vmov	d7, r2, r3
}
 800d408:	eeb0 0a47 	vmov.f32	s0, s14
 800d40c:	eef0 0a67 	vmov.f32	s1, s15
 800d410:	3708      	adds	r7, #8
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	40240000 	.word	0x40240000
 800d41c:	757928e1 	.word	0x757928e1
 800d420:	3fa9018e 	.word	0x3fa9018e
 800d424:	00000000 	.word	0x00000000

0800d428 <can1_ams_cell_temperatures_t3s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s10_encode(double value)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d432:	f04f 0200 	mov.w	r2, #0
 800d436:	4b10      	ldr	r3, [pc, #64]	; (800d478 <can1_ams_cell_temperatures_t3s10_encode+0x50>)
 800d438:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d43c:	f7f2 ff18 	bl	8000270 <__adddf3>
 800d440:	4602      	mov	r2, r0
 800d442:	460b      	mov	r3, r1
 800d444:	4610      	mov	r0, r2
 800d446:	4619      	mov	r1, r3
 800d448:	a309      	add	r3, pc, #36	; (adr r3, 800d470 <can1_ams_cell_temperatures_t3s10_encode+0x48>)
 800d44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44e:	f7f3 f9ef 	bl	8000830 <__aeabi_ddiv>
 800d452:	4602      	mov	r2, r0
 800d454:	460b      	mov	r3, r1
 800d456:	4610      	mov	r0, r2
 800d458:	4619      	mov	r1, r3
 800d45a:	f7f3 fb6f 	bl	8000b3c <__aeabi_d2iz>
 800d45e:	4603      	mov	r3, r0
 800d460:	b21b      	sxth	r3, r3
}
 800d462:	4618      	mov	r0, r3
 800d464:	3708      	adds	r7, #8
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	f3af 8000 	nop.w
 800d470:	757928e1 	.word	0x757928e1
 800d474:	3fa9018e 	.word	0x3fa9018e
 800d478:	40240000 	.word	0x40240000
 800d47c:	00000000 	.word	0x00000000

0800d480 <can1_ams_cell_temperatures_t3s10_decode>:

double can1_ams_cell_temperatures_t3s10_decode(int16_t value)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	4603      	mov	r3, r0
 800d488:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d48a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d48e:	4618      	mov	r0, r3
 800d490:	f7f3 f83a 	bl	8000508 <__aeabi_i2d>
 800d494:	a30d      	add	r3, pc, #52	; (adr r3, 800d4cc <can1_ams_cell_temperatures_t3s10_decode+0x4c>)
 800d496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49a:	f7f3 f89f 	bl	80005dc <__aeabi_dmul>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	4610      	mov	r0, r2
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	f04f 0200 	mov.w	r2, #0
 800d4aa:	4b07      	ldr	r3, [pc, #28]	; (800d4c8 <can1_ams_cell_temperatures_t3s10_decode+0x48>)
 800d4ac:	f7f2 fede 	bl	800026c <__aeabi_dsub>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	460b      	mov	r3, r1
 800d4b4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d4b8:	eeb0 0a47 	vmov.f32	s0, s14
 800d4bc:	eef0 0a67 	vmov.f32	s1, s15
 800d4c0:	3708      	adds	r7, #8
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	40240000 	.word	0x40240000
 800d4cc:	757928e1 	.word	0x757928e1
 800d4d0:	3fa9018e 	.word	0x3fa9018e
 800d4d4:	00000000 	.word	0x00000000

0800d4d8 <can1_ams_cell_temperatures_t3s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s11_encode(double value)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d4e2:	f04f 0200 	mov.w	r2, #0
 800d4e6:	4b10      	ldr	r3, [pc, #64]	; (800d528 <can1_ams_cell_temperatures_t3s11_encode+0x50>)
 800d4e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d4ec:	f7f2 fec0 	bl	8000270 <__adddf3>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	4610      	mov	r0, r2
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	a309      	add	r3, pc, #36	; (adr r3, 800d520 <can1_ams_cell_temperatures_t3s11_encode+0x48>)
 800d4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fe:	f7f3 f997 	bl	8000830 <__aeabi_ddiv>
 800d502:	4602      	mov	r2, r0
 800d504:	460b      	mov	r3, r1
 800d506:	4610      	mov	r0, r2
 800d508:	4619      	mov	r1, r3
 800d50a:	f7f3 fb17 	bl	8000b3c <__aeabi_d2iz>
 800d50e:	4603      	mov	r3, r0
 800d510:	b21b      	sxth	r3, r3
}
 800d512:	4618      	mov	r0, r3
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	f3af 8000 	nop.w
 800d520:	757928e1 	.word	0x757928e1
 800d524:	3fa9018e 	.word	0x3fa9018e
 800d528:	40240000 	.word	0x40240000
 800d52c:	00000000 	.word	0x00000000

0800d530 <can1_ams_cell_temperatures_t3s11_decode>:

double can1_ams_cell_temperatures_t3s11_decode(int16_t value)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	4603      	mov	r3, r0
 800d538:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d53a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d53e:	4618      	mov	r0, r3
 800d540:	f7f2 ffe2 	bl	8000508 <__aeabi_i2d>
 800d544:	a30d      	add	r3, pc, #52	; (adr r3, 800d57c <can1_ams_cell_temperatures_t3s11_decode+0x4c>)
 800d546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54a:	f7f3 f847 	bl	80005dc <__aeabi_dmul>
 800d54e:	4602      	mov	r2, r0
 800d550:	460b      	mov	r3, r1
 800d552:	4610      	mov	r0, r2
 800d554:	4619      	mov	r1, r3
 800d556:	f04f 0200 	mov.w	r2, #0
 800d55a:	4b07      	ldr	r3, [pc, #28]	; (800d578 <can1_ams_cell_temperatures_t3s11_decode+0x48>)
 800d55c:	f7f2 fe86 	bl	800026c <__aeabi_dsub>
 800d560:	4602      	mov	r2, r0
 800d562:	460b      	mov	r3, r1
 800d564:	ec43 2b17 	vmov	d7, r2, r3
}
 800d568:	eeb0 0a47 	vmov.f32	s0, s14
 800d56c:	eef0 0a67 	vmov.f32	s1, s15
 800d570:	3708      	adds	r7, #8
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	40240000 	.word	0x40240000
 800d57c:	757928e1 	.word	0x757928e1
 800d580:	3fa9018e 	.word	0x3fa9018e
 800d584:	00000000 	.word	0x00000000

0800d588 <can1_ams_cell_temperatures_t3s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s12_encode(double value)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d592:	f04f 0200 	mov.w	r2, #0
 800d596:	4b10      	ldr	r3, [pc, #64]	; (800d5d8 <can1_ams_cell_temperatures_t3s12_encode+0x50>)
 800d598:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d59c:	f7f2 fe68 	bl	8000270 <__adddf3>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	4610      	mov	r0, r2
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	a309      	add	r3, pc, #36	; (adr r3, 800d5d0 <can1_ams_cell_temperatures_t3s12_encode+0x48>)
 800d5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ae:	f7f3 f93f 	bl	8000830 <__aeabi_ddiv>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	f7f3 fabf 	bl	8000b3c <__aeabi_d2iz>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	b21b      	sxth	r3, r3
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	f3af 8000 	nop.w
 800d5d0:	757928e1 	.word	0x757928e1
 800d5d4:	3fa9018e 	.word	0x3fa9018e
 800d5d8:	40240000 	.word	0x40240000
 800d5dc:	00000000 	.word	0x00000000

0800d5e0 <can1_ams_cell_temperatures_t3s12_decode>:

double can1_ams_cell_temperatures_t3s12_decode(int16_t value)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d5ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7f2 ff8a 	bl	8000508 <__aeabi_i2d>
 800d5f4:	a30d      	add	r3, pc, #52	; (adr r3, 800d62c <can1_ams_cell_temperatures_t3s12_decode+0x4c>)
 800d5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fa:	f7f2 ffef 	bl	80005dc <__aeabi_dmul>
 800d5fe:	4602      	mov	r2, r0
 800d600:	460b      	mov	r3, r1
 800d602:	4610      	mov	r0, r2
 800d604:	4619      	mov	r1, r3
 800d606:	f04f 0200 	mov.w	r2, #0
 800d60a:	4b07      	ldr	r3, [pc, #28]	; (800d628 <can1_ams_cell_temperatures_t3s12_decode+0x48>)
 800d60c:	f7f2 fe2e 	bl	800026c <__aeabi_dsub>
 800d610:	4602      	mov	r2, r0
 800d612:	460b      	mov	r3, r1
 800d614:	ec43 2b17 	vmov	d7, r2, r3
}
 800d618:	eeb0 0a47 	vmov.f32	s0, s14
 800d61c:	eef0 0a67 	vmov.f32	s1, s15
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	40240000 	.word	0x40240000
 800d62c:	757928e1 	.word	0x757928e1
 800d630:	3fa9018e 	.word	0x3fa9018e
 800d634:	00000000 	.word	0x00000000

0800d638 <can1_ams_cell_temperatures_t4s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s1_encode(double value)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d642:	f04f 0200 	mov.w	r2, #0
 800d646:	4b10      	ldr	r3, [pc, #64]	; (800d688 <can1_ams_cell_temperatures_t4s1_encode+0x50>)
 800d648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d64c:	f7f2 fe10 	bl	8000270 <__adddf3>
 800d650:	4602      	mov	r2, r0
 800d652:	460b      	mov	r3, r1
 800d654:	4610      	mov	r0, r2
 800d656:	4619      	mov	r1, r3
 800d658:	a309      	add	r3, pc, #36	; (adr r3, 800d680 <can1_ams_cell_temperatures_t4s1_encode+0x48>)
 800d65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65e:	f7f3 f8e7 	bl	8000830 <__aeabi_ddiv>
 800d662:	4602      	mov	r2, r0
 800d664:	460b      	mov	r3, r1
 800d666:	4610      	mov	r0, r2
 800d668:	4619      	mov	r1, r3
 800d66a:	f7f3 fa67 	bl	8000b3c <__aeabi_d2iz>
 800d66e:	4603      	mov	r3, r0
 800d670:	b21b      	sxth	r3, r3
}
 800d672:	4618      	mov	r0, r3
 800d674:	3708      	adds	r7, #8
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	f3af 8000 	nop.w
 800d680:	757928e1 	.word	0x757928e1
 800d684:	3fa9018e 	.word	0x3fa9018e
 800d688:	40240000 	.word	0x40240000
 800d68c:	00000000 	.word	0x00000000

0800d690 <can1_ams_cell_temperatures_t4s1_decode>:

double can1_ams_cell_temperatures_t4s1_decode(int16_t value)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	4603      	mov	r3, r0
 800d698:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d69a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7f2 ff32 	bl	8000508 <__aeabi_i2d>
 800d6a4:	a30d      	add	r3, pc, #52	; (adr r3, 800d6dc <can1_ams_cell_temperatures_t4s1_decode+0x4c>)
 800d6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6aa:	f7f2 ff97 	bl	80005dc <__aeabi_dmul>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	4610      	mov	r0, r2
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	f04f 0200 	mov.w	r2, #0
 800d6ba:	4b07      	ldr	r3, [pc, #28]	; (800d6d8 <can1_ams_cell_temperatures_t4s1_decode+0x48>)
 800d6bc:	f7f2 fdd6 	bl	800026c <__aeabi_dsub>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d6c8:	eeb0 0a47 	vmov.f32	s0, s14
 800d6cc:	eef0 0a67 	vmov.f32	s1, s15
 800d6d0:	3708      	adds	r7, #8
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	40240000 	.word	0x40240000
 800d6dc:	757928e1 	.word	0x757928e1
 800d6e0:	3fa9018e 	.word	0x3fa9018e
 800d6e4:	00000000 	.word	0x00000000

0800d6e8 <can1_ams_cell_temperatures_t4s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s2_encode(double value)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d6f2:	f04f 0200 	mov.w	r2, #0
 800d6f6:	4b10      	ldr	r3, [pc, #64]	; (800d738 <can1_ams_cell_temperatures_t4s2_encode+0x50>)
 800d6f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d6fc:	f7f2 fdb8 	bl	8000270 <__adddf3>
 800d700:	4602      	mov	r2, r0
 800d702:	460b      	mov	r3, r1
 800d704:	4610      	mov	r0, r2
 800d706:	4619      	mov	r1, r3
 800d708:	a309      	add	r3, pc, #36	; (adr r3, 800d730 <can1_ams_cell_temperatures_t4s2_encode+0x48>)
 800d70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70e:	f7f3 f88f 	bl	8000830 <__aeabi_ddiv>
 800d712:	4602      	mov	r2, r0
 800d714:	460b      	mov	r3, r1
 800d716:	4610      	mov	r0, r2
 800d718:	4619      	mov	r1, r3
 800d71a:	f7f3 fa0f 	bl	8000b3c <__aeabi_d2iz>
 800d71e:	4603      	mov	r3, r0
 800d720:	b21b      	sxth	r3, r3
}
 800d722:	4618      	mov	r0, r3
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	f3af 8000 	nop.w
 800d730:	757928e1 	.word	0x757928e1
 800d734:	3fa9018e 	.word	0x3fa9018e
 800d738:	40240000 	.word	0x40240000
 800d73c:	00000000 	.word	0x00000000

0800d740 <can1_ams_cell_temperatures_t4s2_decode>:

double can1_ams_cell_temperatures_t4s2_decode(int16_t value)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	4603      	mov	r3, r0
 800d748:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d74a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d74e:	4618      	mov	r0, r3
 800d750:	f7f2 feda 	bl	8000508 <__aeabi_i2d>
 800d754:	a30d      	add	r3, pc, #52	; (adr r3, 800d78c <can1_ams_cell_temperatures_t4s2_decode+0x4c>)
 800d756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75a:	f7f2 ff3f 	bl	80005dc <__aeabi_dmul>
 800d75e:	4602      	mov	r2, r0
 800d760:	460b      	mov	r3, r1
 800d762:	4610      	mov	r0, r2
 800d764:	4619      	mov	r1, r3
 800d766:	f04f 0200 	mov.w	r2, #0
 800d76a:	4b07      	ldr	r3, [pc, #28]	; (800d788 <can1_ams_cell_temperatures_t4s2_decode+0x48>)
 800d76c:	f7f2 fd7e 	bl	800026c <__aeabi_dsub>
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	ec43 2b17 	vmov	d7, r2, r3
}
 800d778:	eeb0 0a47 	vmov.f32	s0, s14
 800d77c:	eef0 0a67 	vmov.f32	s1, s15
 800d780:	3708      	adds	r7, #8
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	40240000 	.word	0x40240000
 800d78c:	757928e1 	.word	0x757928e1
 800d790:	3fa9018e 	.word	0x3fa9018e
 800d794:	00000000 	.word	0x00000000

0800d798 <can1_ams_cell_temperatures_t4s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s3_encode(double value)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d7a2:	f04f 0200 	mov.w	r2, #0
 800d7a6:	4b10      	ldr	r3, [pc, #64]	; (800d7e8 <can1_ams_cell_temperatures_t4s3_encode+0x50>)
 800d7a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7ac:	f7f2 fd60 	bl	8000270 <__adddf3>
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	4610      	mov	r0, r2
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	a309      	add	r3, pc, #36	; (adr r3, 800d7e0 <can1_ams_cell_temperatures_t4s3_encode+0x48>)
 800d7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7be:	f7f3 f837 	bl	8000830 <__aeabi_ddiv>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	4610      	mov	r0, r2
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	f7f3 f9b7 	bl	8000b3c <__aeabi_d2iz>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	b21b      	sxth	r3, r3
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3708      	adds	r7, #8
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	f3af 8000 	nop.w
 800d7e0:	757928e1 	.word	0x757928e1
 800d7e4:	3fa9018e 	.word	0x3fa9018e
 800d7e8:	40240000 	.word	0x40240000
 800d7ec:	00000000 	.word	0x00000000

0800d7f0 <can1_ams_cell_temperatures_t4s3_decode>:

double can1_ams_cell_temperatures_t4s3_decode(int16_t value)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d7fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7f2 fe82 	bl	8000508 <__aeabi_i2d>
 800d804:	a30d      	add	r3, pc, #52	; (adr r3, 800d83c <can1_ams_cell_temperatures_t4s3_decode+0x4c>)
 800d806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80a:	f7f2 fee7 	bl	80005dc <__aeabi_dmul>
 800d80e:	4602      	mov	r2, r0
 800d810:	460b      	mov	r3, r1
 800d812:	4610      	mov	r0, r2
 800d814:	4619      	mov	r1, r3
 800d816:	f04f 0200 	mov.w	r2, #0
 800d81a:	4b07      	ldr	r3, [pc, #28]	; (800d838 <can1_ams_cell_temperatures_t4s3_decode+0x48>)
 800d81c:	f7f2 fd26 	bl	800026c <__aeabi_dsub>
 800d820:	4602      	mov	r2, r0
 800d822:	460b      	mov	r3, r1
 800d824:	ec43 2b17 	vmov	d7, r2, r3
}
 800d828:	eeb0 0a47 	vmov.f32	s0, s14
 800d82c:	eef0 0a67 	vmov.f32	s1, s15
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	40240000 	.word	0x40240000
 800d83c:	757928e1 	.word	0x757928e1
 800d840:	3fa9018e 	.word	0x3fa9018e
 800d844:	00000000 	.word	0x00000000

0800d848 <can1_ams_cell_temperatures_t4s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s4_encode(double value)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d852:	f04f 0200 	mov.w	r2, #0
 800d856:	4b10      	ldr	r3, [pc, #64]	; (800d898 <can1_ams_cell_temperatures_t4s4_encode+0x50>)
 800d858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d85c:	f7f2 fd08 	bl	8000270 <__adddf3>
 800d860:	4602      	mov	r2, r0
 800d862:	460b      	mov	r3, r1
 800d864:	4610      	mov	r0, r2
 800d866:	4619      	mov	r1, r3
 800d868:	a309      	add	r3, pc, #36	; (adr r3, 800d890 <can1_ams_cell_temperatures_t4s4_encode+0x48>)
 800d86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86e:	f7f2 ffdf 	bl	8000830 <__aeabi_ddiv>
 800d872:	4602      	mov	r2, r0
 800d874:	460b      	mov	r3, r1
 800d876:	4610      	mov	r0, r2
 800d878:	4619      	mov	r1, r3
 800d87a:	f7f3 f95f 	bl	8000b3c <__aeabi_d2iz>
 800d87e:	4603      	mov	r3, r0
 800d880:	b21b      	sxth	r3, r3
}
 800d882:	4618      	mov	r0, r3
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	f3af 8000 	nop.w
 800d890:	757928e1 	.word	0x757928e1
 800d894:	3fa9018e 	.word	0x3fa9018e
 800d898:	40240000 	.word	0x40240000
 800d89c:	00000000 	.word	0x00000000

0800d8a0 <can1_ams_cell_temperatures_t4s4_decode>:

double can1_ams_cell_temperatures_t4s4_decode(int16_t value)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d8aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7f2 fe2a 	bl	8000508 <__aeabi_i2d>
 800d8b4:	a30d      	add	r3, pc, #52	; (adr r3, 800d8ec <can1_ams_cell_temperatures_t4s4_decode+0x4c>)
 800d8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ba:	f7f2 fe8f 	bl	80005dc <__aeabi_dmul>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	4610      	mov	r0, r2
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	f04f 0200 	mov.w	r2, #0
 800d8ca:	4b07      	ldr	r3, [pc, #28]	; (800d8e8 <can1_ams_cell_temperatures_t4s4_decode+0x48>)
 800d8cc:	f7f2 fcce 	bl	800026c <__aeabi_dsub>
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d8d8:	eeb0 0a47 	vmov.f32	s0, s14
 800d8dc:	eef0 0a67 	vmov.f32	s1, s15
 800d8e0:	3708      	adds	r7, #8
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	40240000 	.word	0x40240000
 800d8ec:	757928e1 	.word	0x757928e1
 800d8f0:	3fa9018e 	.word	0x3fa9018e
 800d8f4:	00000000 	.word	0x00000000

0800d8f8 <can1_ams_cell_temperatures_t4s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s5_encode(double value)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d902:	f04f 0200 	mov.w	r2, #0
 800d906:	4b10      	ldr	r3, [pc, #64]	; (800d948 <can1_ams_cell_temperatures_t4s5_encode+0x50>)
 800d908:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d90c:	f7f2 fcb0 	bl	8000270 <__adddf3>
 800d910:	4602      	mov	r2, r0
 800d912:	460b      	mov	r3, r1
 800d914:	4610      	mov	r0, r2
 800d916:	4619      	mov	r1, r3
 800d918:	a309      	add	r3, pc, #36	; (adr r3, 800d940 <can1_ams_cell_temperatures_t4s5_encode+0x48>)
 800d91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91e:	f7f2 ff87 	bl	8000830 <__aeabi_ddiv>
 800d922:	4602      	mov	r2, r0
 800d924:	460b      	mov	r3, r1
 800d926:	4610      	mov	r0, r2
 800d928:	4619      	mov	r1, r3
 800d92a:	f7f3 f907 	bl	8000b3c <__aeabi_d2iz>
 800d92e:	4603      	mov	r3, r0
 800d930:	b21b      	sxth	r3, r3
}
 800d932:	4618      	mov	r0, r3
 800d934:	3708      	adds	r7, #8
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	f3af 8000 	nop.w
 800d940:	757928e1 	.word	0x757928e1
 800d944:	3fa9018e 	.word	0x3fa9018e
 800d948:	40240000 	.word	0x40240000
 800d94c:	00000000 	.word	0x00000000

0800d950 <can1_ams_cell_temperatures_t4s5_decode>:

double can1_ams_cell_temperatures_t4s5_decode(int16_t value)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	4603      	mov	r3, r0
 800d958:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d95a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d95e:	4618      	mov	r0, r3
 800d960:	f7f2 fdd2 	bl	8000508 <__aeabi_i2d>
 800d964:	a30d      	add	r3, pc, #52	; (adr r3, 800d99c <can1_ams_cell_temperatures_t4s5_decode+0x4c>)
 800d966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96a:	f7f2 fe37 	bl	80005dc <__aeabi_dmul>
 800d96e:	4602      	mov	r2, r0
 800d970:	460b      	mov	r3, r1
 800d972:	4610      	mov	r0, r2
 800d974:	4619      	mov	r1, r3
 800d976:	f04f 0200 	mov.w	r2, #0
 800d97a:	4b07      	ldr	r3, [pc, #28]	; (800d998 <can1_ams_cell_temperatures_t4s5_decode+0x48>)
 800d97c:	f7f2 fc76 	bl	800026c <__aeabi_dsub>
 800d980:	4602      	mov	r2, r0
 800d982:	460b      	mov	r3, r1
 800d984:	ec43 2b17 	vmov	d7, r2, r3
}
 800d988:	eeb0 0a47 	vmov.f32	s0, s14
 800d98c:	eef0 0a67 	vmov.f32	s1, s15
 800d990:	3708      	adds	r7, #8
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	40240000 	.word	0x40240000
 800d99c:	757928e1 	.word	0x757928e1
 800d9a0:	3fa9018e 	.word	0x3fa9018e
 800d9a4:	00000000 	.word	0x00000000

0800d9a8 <can1_ams_cell_temperatures_t4s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s6_encode(double value)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d9b2:	f04f 0200 	mov.w	r2, #0
 800d9b6:	4b10      	ldr	r3, [pc, #64]	; (800d9f8 <can1_ams_cell_temperatures_t4s6_encode+0x50>)
 800d9b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d9bc:	f7f2 fc58 	bl	8000270 <__adddf3>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	4610      	mov	r0, r2
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	a309      	add	r3, pc, #36	; (adr r3, 800d9f0 <can1_ams_cell_temperatures_t4s6_encode+0x48>)
 800d9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ce:	f7f2 ff2f 	bl	8000830 <__aeabi_ddiv>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	4610      	mov	r0, r2
 800d9d8:	4619      	mov	r1, r3
 800d9da:	f7f3 f8af 	bl	8000b3c <__aeabi_d2iz>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	b21b      	sxth	r3, r3
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3708      	adds	r7, #8
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	f3af 8000 	nop.w
 800d9f0:	757928e1 	.word	0x757928e1
 800d9f4:	3fa9018e 	.word	0x3fa9018e
 800d9f8:	40240000 	.word	0x40240000
 800d9fc:	00000000 	.word	0x00000000

0800da00 <can1_ams_cell_temperatures_t4s6_decode>:

double can1_ams_cell_temperatures_t4s6_decode(int16_t value)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	4603      	mov	r3, r0
 800da08:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800da0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da0e:	4618      	mov	r0, r3
 800da10:	f7f2 fd7a 	bl	8000508 <__aeabi_i2d>
 800da14:	a30d      	add	r3, pc, #52	; (adr r3, 800da4c <can1_ams_cell_temperatures_t4s6_decode+0x4c>)
 800da16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1a:	f7f2 fddf 	bl	80005dc <__aeabi_dmul>
 800da1e:	4602      	mov	r2, r0
 800da20:	460b      	mov	r3, r1
 800da22:	4610      	mov	r0, r2
 800da24:	4619      	mov	r1, r3
 800da26:	f04f 0200 	mov.w	r2, #0
 800da2a:	4b07      	ldr	r3, [pc, #28]	; (800da48 <can1_ams_cell_temperatures_t4s6_decode+0x48>)
 800da2c:	f7f2 fc1e 	bl	800026c <__aeabi_dsub>
 800da30:	4602      	mov	r2, r0
 800da32:	460b      	mov	r3, r1
 800da34:	ec43 2b17 	vmov	d7, r2, r3
}
 800da38:	eeb0 0a47 	vmov.f32	s0, s14
 800da3c:	eef0 0a67 	vmov.f32	s1, s15
 800da40:	3708      	adds	r7, #8
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	40240000 	.word	0x40240000
 800da4c:	757928e1 	.word	0x757928e1
 800da50:	3fa9018e 	.word	0x3fa9018e
 800da54:	00000000 	.word	0x00000000

0800da58 <can1_ams_cell_temperatures_t4s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s7_encode(double value)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b082      	sub	sp, #8
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800da62:	f04f 0200 	mov.w	r2, #0
 800da66:	4b10      	ldr	r3, [pc, #64]	; (800daa8 <can1_ams_cell_temperatures_t4s7_encode+0x50>)
 800da68:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da6c:	f7f2 fc00 	bl	8000270 <__adddf3>
 800da70:	4602      	mov	r2, r0
 800da72:	460b      	mov	r3, r1
 800da74:	4610      	mov	r0, r2
 800da76:	4619      	mov	r1, r3
 800da78:	a309      	add	r3, pc, #36	; (adr r3, 800daa0 <can1_ams_cell_temperatures_t4s7_encode+0x48>)
 800da7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7e:	f7f2 fed7 	bl	8000830 <__aeabi_ddiv>
 800da82:	4602      	mov	r2, r0
 800da84:	460b      	mov	r3, r1
 800da86:	4610      	mov	r0, r2
 800da88:	4619      	mov	r1, r3
 800da8a:	f7f3 f857 	bl	8000b3c <__aeabi_d2iz>
 800da8e:	4603      	mov	r3, r0
 800da90:	b21b      	sxth	r3, r3
}
 800da92:	4618      	mov	r0, r3
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	f3af 8000 	nop.w
 800daa0:	757928e1 	.word	0x757928e1
 800daa4:	3fa9018e 	.word	0x3fa9018e
 800daa8:	40240000 	.word	0x40240000
 800daac:	00000000 	.word	0x00000000

0800dab0 <can1_ams_cell_temperatures_t4s7_decode>:

double can1_ams_cell_temperatures_t4s7_decode(int16_t value)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	4603      	mov	r3, r0
 800dab8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800daba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7f2 fd22 	bl	8000508 <__aeabi_i2d>
 800dac4:	a30d      	add	r3, pc, #52	; (adr r3, 800dafc <can1_ams_cell_temperatures_t4s7_decode+0x4c>)
 800dac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daca:	f7f2 fd87 	bl	80005dc <__aeabi_dmul>
 800dace:	4602      	mov	r2, r0
 800dad0:	460b      	mov	r3, r1
 800dad2:	4610      	mov	r0, r2
 800dad4:	4619      	mov	r1, r3
 800dad6:	f04f 0200 	mov.w	r2, #0
 800dada:	4b07      	ldr	r3, [pc, #28]	; (800daf8 <can1_ams_cell_temperatures_t4s7_decode+0x48>)
 800dadc:	f7f2 fbc6 	bl	800026c <__aeabi_dsub>
 800dae0:	4602      	mov	r2, r0
 800dae2:	460b      	mov	r3, r1
 800dae4:	ec43 2b17 	vmov	d7, r2, r3
}
 800dae8:	eeb0 0a47 	vmov.f32	s0, s14
 800daec:	eef0 0a67 	vmov.f32	s1, s15
 800daf0:	3708      	adds	r7, #8
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	40240000 	.word	0x40240000
 800dafc:	757928e1 	.word	0x757928e1
 800db00:	3fa9018e 	.word	0x3fa9018e
 800db04:	00000000 	.word	0x00000000

0800db08 <can1_ams_cell_temperatures_t4s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s8_encode(double value)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800db12:	f04f 0200 	mov.w	r2, #0
 800db16:	4b10      	ldr	r3, [pc, #64]	; (800db58 <can1_ams_cell_temperatures_t4s8_encode+0x50>)
 800db18:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db1c:	f7f2 fba8 	bl	8000270 <__adddf3>
 800db20:	4602      	mov	r2, r0
 800db22:	460b      	mov	r3, r1
 800db24:	4610      	mov	r0, r2
 800db26:	4619      	mov	r1, r3
 800db28:	a309      	add	r3, pc, #36	; (adr r3, 800db50 <can1_ams_cell_temperatures_t4s8_encode+0x48>)
 800db2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2e:	f7f2 fe7f 	bl	8000830 <__aeabi_ddiv>
 800db32:	4602      	mov	r2, r0
 800db34:	460b      	mov	r3, r1
 800db36:	4610      	mov	r0, r2
 800db38:	4619      	mov	r1, r3
 800db3a:	f7f2 ffff 	bl	8000b3c <__aeabi_d2iz>
 800db3e:	4603      	mov	r3, r0
 800db40:	b21b      	sxth	r3, r3
}
 800db42:	4618      	mov	r0, r3
 800db44:	3708      	adds	r7, #8
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	f3af 8000 	nop.w
 800db50:	757928e1 	.word	0x757928e1
 800db54:	3fa9018e 	.word	0x3fa9018e
 800db58:	40240000 	.word	0x40240000
 800db5c:	00000000 	.word	0x00000000

0800db60 <can1_ams_cell_temperatures_t4s8_decode>:

double can1_ams_cell_temperatures_t4s8_decode(int16_t value)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	4603      	mov	r3, r0
 800db68:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800db6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db6e:	4618      	mov	r0, r3
 800db70:	f7f2 fcca 	bl	8000508 <__aeabi_i2d>
 800db74:	a30d      	add	r3, pc, #52	; (adr r3, 800dbac <can1_ams_cell_temperatures_t4s8_decode+0x4c>)
 800db76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7a:	f7f2 fd2f 	bl	80005dc <__aeabi_dmul>
 800db7e:	4602      	mov	r2, r0
 800db80:	460b      	mov	r3, r1
 800db82:	4610      	mov	r0, r2
 800db84:	4619      	mov	r1, r3
 800db86:	f04f 0200 	mov.w	r2, #0
 800db8a:	4b07      	ldr	r3, [pc, #28]	; (800dba8 <can1_ams_cell_temperatures_t4s8_decode+0x48>)
 800db8c:	f7f2 fb6e 	bl	800026c <__aeabi_dsub>
 800db90:	4602      	mov	r2, r0
 800db92:	460b      	mov	r3, r1
 800db94:	ec43 2b17 	vmov	d7, r2, r3
}
 800db98:	eeb0 0a47 	vmov.f32	s0, s14
 800db9c:	eef0 0a67 	vmov.f32	s1, s15
 800dba0:	3708      	adds	r7, #8
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	40240000 	.word	0x40240000
 800dbac:	757928e1 	.word	0x757928e1
 800dbb0:	3fa9018e 	.word	0x3fa9018e
 800dbb4:	00000000 	.word	0x00000000

0800dbb8 <can1_ams_cell_temperatures_t4s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s9_encode(double value)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dbc2:	f04f 0200 	mov.w	r2, #0
 800dbc6:	4b10      	ldr	r3, [pc, #64]	; (800dc08 <can1_ams_cell_temperatures_t4s9_encode+0x50>)
 800dbc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dbcc:	f7f2 fb50 	bl	8000270 <__adddf3>
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	4610      	mov	r0, r2
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	a309      	add	r3, pc, #36	; (adr r3, 800dc00 <can1_ams_cell_temperatures_t4s9_encode+0x48>)
 800dbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbde:	f7f2 fe27 	bl	8000830 <__aeabi_ddiv>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	4610      	mov	r0, r2
 800dbe8:	4619      	mov	r1, r3
 800dbea:	f7f2 ffa7 	bl	8000b3c <__aeabi_d2iz>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	b21b      	sxth	r3, r3
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3708      	adds	r7, #8
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	f3af 8000 	nop.w
 800dc00:	757928e1 	.word	0x757928e1
 800dc04:	3fa9018e 	.word	0x3fa9018e
 800dc08:	40240000 	.word	0x40240000
 800dc0c:	00000000 	.word	0x00000000

0800dc10 <can1_ams_cell_temperatures_t4s9_decode>:

double can1_ams_cell_temperatures_t4s9_decode(int16_t value)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	4603      	mov	r3, r0
 800dc18:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800dc1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7f2 fc72 	bl	8000508 <__aeabi_i2d>
 800dc24:	a30d      	add	r3, pc, #52	; (adr r3, 800dc5c <can1_ams_cell_temperatures_t4s9_decode+0x4c>)
 800dc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2a:	f7f2 fcd7 	bl	80005dc <__aeabi_dmul>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	460b      	mov	r3, r1
 800dc32:	4610      	mov	r0, r2
 800dc34:	4619      	mov	r1, r3
 800dc36:	f04f 0200 	mov.w	r2, #0
 800dc3a:	4b07      	ldr	r3, [pc, #28]	; (800dc58 <can1_ams_cell_temperatures_t4s9_decode+0x48>)
 800dc3c:	f7f2 fb16 	bl	800026c <__aeabi_dsub>
 800dc40:	4602      	mov	r2, r0
 800dc42:	460b      	mov	r3, r1
 800dc44:	ec43 2b17 	vmov	d7, r2, r3
}
 800dc48:	eeb0 0a47 	vmov.f32	s0, s14
 800dc4c:	eef0 0a67 	vmov.f32	s1, s15
 800dc50:	3708      	adds	r7, #8
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	40240000 	.word	0x40240000
 800dc5c:	757928e1 	.word	0x757928e1
 800dc60:	3fa9018e 	.word	0x3fa9018e
 800dc64:	00000000 	.word	0x00000000

0800dc68 <can1_ams_cell_temperatures_t4s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s10_encode(double value)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dc72:	f04f 0200 	mov.w	r2, #0
 800dc76:	4b10      	ldr	r3, [pc, #64]	; (800dcb8 <can1_ams_cell_temperatures_t4s10_encode+0x50>)
 800dc78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dc7c:	f7f2 faf8 	bl	8000270 <__adddf3>
 800dc80:	4602      	mov	r2, r0
 800dc82:	460b      	mov	r3, r1
 800dc84:	4610      	mov	r0, r2
 800dc86:	4619      	mov	r1, r3
 800dc88:	a309      	add	r3, pc, #36	; (adr r3, 800dcb0 <can1_ams_cell_temperatures_t4s10_encode+0x48>)
 800dc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8e:	f7f2 fdcf 	bl	8000830 <__aeabi_ddiv>
 800dc92:	4602      	mov	r2, r0
 800dc94:	460b      	mov	r3, r1
 800dc96:	4610      	mov	r0, r2
 800dc98:	4619      	mov	r1, r3
 800dc9a:	f7f2 ff4f 	bl	8000b3c <__aeabi_d2iz>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	b21b      	sxth	r3, r3
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3708      	adds	r7, #8
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	f3af 8000 	nop.w
 800dcb0:	757928e1 	.word	0x757928e1
 800dcb4:	3fa9018e 	.word	0x3fa9018e
 800dcb8:	40240000 	.word	0x40240000
 800dcbc:	00000000 	.word	0x00000000

0800dcc0 <can1_ams_cell_temperatures_t4s10_decode>:

double can1_ams_cell_temperatures_t4s10_decode(int16_t value)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800dcca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7f2 fc1a 	bl	8000508 <__aeabi_i2d>
 800dcd4:	a30d      	add	r3, pc, #52	; (adr r3, 800dd0c <can1_ams_cell_temperatures_t4s10_decode+0x4c>)
 800dcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcda:	f7f2 fc7f 	bl	80005dc <__aeabi_dmul>
 800dcde:	4602      	mov	r2, r0
 800dce0:	460b      	mov	r3, r1
 800dce2:	4610      	mov	r0, r2
 800dce4:	4619      	mov	r1, r3
 800dce6:	f04f 0200 	mov.w	r2, #0
 800dcea:	4b07      	ldr	r3, [pc, #28]	; (800dd08 <can1_ams_cell_temperatures_t4s10_decode+0x48>)
 800dcec:	f7f2 fabe 	bl	800026c <__aeabi_dsub>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	ec43 2b17 	vmov	d7, r2, r3
}
 800dcf8:	eeb0 0a47 	vmov.f32	s0, s14
 800dcfc:	eef0 0a67 	vmov.f32	s1, s15
 800dd00:	3708      	adds	r7, #8
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	40240000 	.word	0x40240000
 800dd0c:	757928e1 	.word	0x757928e1
 800dd10:	3fa9018e 	.word	0x3fa9018e
 800dd14:	00000000 	.word	0x00000000

0800dd18 <can1_ams_cell_temperatures_t4s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s11_encode(double value)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dd22:	f04f 0200 	mov.w	r2, #0
 800dd26:	4b10      	ldr	r3, [pc, #64]	; (800dd68 <can1_ams_cell_temperatures_t4s11_encode+0x50>)
 800dd28:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dd2c:	f7f2 faa0 	bl	8000270 <__adddf3>
 800dd30:	4602      	mov	r2, r0
 800dd32:	460b      	mov	r3, r1
 800dd34:	4610      	mov	r0, r2
 800dd36:	4619      	mov	r1, r3
 800dd38:	a309      	add	r3, pc, #36	; (adr r3, 800dd60 <can1_ams_cell_temperatures_t4s11_encode+0x48>)
 800dd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3e:	f7f2 fd77 	bl	8000830 <__aeabi_ddiv>
 800dd42:	4602      	mov	r2, r0
 800dd44:	460b      	mov	r3, r1
 800dd46:	4610      	mov	r0, r2
 800dd48:	4619      	mov	r1, r3
 800dd4a:	f7f2 fef7 	bl	8000b3c <__aeabi_d2iz>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	b21b      	sxth	r3, r3
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	f3af 8000 	nop.w
 800dd60:	757928e1 	.word	0x757928e1
 800dd64:	3fa9018e 	.word	0x3fa9018e
 800dd68:	40240000 	.word	0x40240000
 800dd6c:	00000000 	.word	0x00000000

0800dd70 <can1_ams_cell_temperatures_t4s11_decode>:

double can1_ams_cell_temperatures_t4s11_decode(int16_t value)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	4603      	mov	r3, r0
 800dd78:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800dd7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7f2 fbc2 	bl	8000508 <__aeabi_i2d>
 800dd84:	a30d      	add	r3, pc, #52	; (adr r3, 800ddbc <can1_ams_cell_temperatures_t4s11_decode+0x4c>)
 800dd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8a:	f7f2 fc27 	bl	80005dc <__aeabi_dmul>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	460b      	mov	r3, r1
 800dd92:	4610      	mov	r0, r2
 800dd94:	4619      	mov	r1, r3
 800dd96:	f04f 0200 	mov.w	r2, #0
 800dd9a:	4b07      	ldr	r3, [pc, #28]	; (800ddb8 <can1_ams_cell_temperatures_t4s11_decode+0x48>)
 800dd9c:	f7f2 fa66 	bl	800026c <__aeabi_dsub>
 800dda0:	4602      	mov	r2, r0
 800dda2:	460b      	mov	r3, r1
 800dda4:	ec43 2b17 	vmov	d7, r2, r3
}
 800dda8:	eeb0 0a47 	vmov.f32	s0, s14
 800ddac:	eef0 0a67 	vmov.f32	s1, s15
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	40240000 	.word	0x40240000
 800ddbc:	757928e1 	.word	0x757928e1
 800ddc0:	3fa9018e 	.word	0x3fa9018e
 800ddc4:	00000000 	.word	0x00000000

0800ddc8 <can1_ams_cell_temperatures_t4s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s12_encode(double value)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ddd2:	f04f 0200 	mov.w	r2, #0
 800ddd6:	4b10      	ldr	r3, [pc, #64]	; (800de18 <can1_ams_cell_temperatures_t4s12_encode+0x50>)
 800ddd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dddc:	f7f2 fa48 	bl	8000270 <__adddf3>
 800dde0:	4602      	mov	r2, r0
 800dde2:	460b      	mov	r3, r1
 800dde4:	4610      	mov	r0, r2
 800dde6:	4619      	mov	r1, r3
 800dde8:	a309      	add	r3, pc, #36	; (adr r3, 800de10 <can1_ams_cell_temperatures_t4s12_encode+0x48>)
 800ddea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddee:	f7f2 fd1f 	bl	8000830 <__aeabi_ddiv>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	4610      	mov	r0, r2
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	f7f2 fe9f 	bl	8000b3c <__aeabi_d2iz>
 800ddfe:	4603      	mov	r3, r0
 800de00:	b21b      	sxth	r3, r3
}
 800de02:	4618      	mov	r0, r3
 800de04:	3708      	adds	r7, #8
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	f3af 8000 	nop.w
 800de10:	757928e1 	.word	0x757928e1
 800de14:	3fa9018e 	.word	0x3fa9018e
 800de18:	40240000 	.word	0x40240000
 800de1c:	00000000 	.word	0x00000000

0800de20 <can1_ams_cell_temperatures_t4s12_decode>:

double can1_ams_cell_temperatures_t4s12_decode(int16_t value)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	4603      	mov	r3, r0
 800de28:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800de2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800de2e:	4618      	mov	r0, r3
 800de30:	f7f2 fb6a 	bl	8000508 <__aeabi_i2d>
 800de34:	a30d      	add	r3, pc, #52	; (adr r3, 800de6c <can1_ams_cell_temperatures_t4s12_decode+0x4c>)
 800de36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3a:	f7f2 fbcf 	bl	80005dc <__aeabi_dmul>
 800de3e:	4602      	mov	r2, r0
 800de40:	460b      	mov	r3, r1
 800de42:	4610      	mov	r0, r2
 800de44:	4619      	mov	r1, r3
 800de46:	f04f 0200 	mov.w	r2, #0
 800de4a:	4b07      	ldr	r3, [pc, #28]	; (800de68 <can1_ams_cell_temperatures_t4s12_decode+0x48>)
 800de4c:	f7f2 fa0e 	bl	800026c <__aeabi_dsub>
 800de50:	4602      	mov	r2, r0
 800de52:	460b      	mov	r3, r1
 800de54:	ec43 2b17 	vmov	d7, r2, r3
}
 800de58:	eeb0 0a47 	vmov.f32	s0, s14
 800de5c:	eef0 0a67 	vmov.f32	s1, s15
 800de60:	3708      	adds	r7, #8
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	40240000 	.word	0x40240000
 800de6c:	757928e1 	.word	0x757928e1
 800de70:	3fa9018e 	.word	0x3fa9018e
 800de74:	00000000 	.word	0x00000000

0800de78 <can1_ams_cell_temperatures_t5s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s1_encode(double value)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800de82:	f04f 0200 	mov.w	r2, #0
 800de86:	4b10      	ldr	r3, [pc, #64]	; (800dec8 <can1_ams_cell_temperatures_t5s1_encode+0x50>)
 800de88:	e9d7 0100 	ldrd	r0, r1, [r7]
 800de8c:	f7f2 f9f0 	bl	8000270 <__adddf3>
 800de90:	4602      	mov	r2, r0
 800de92:	460b      	mov	r3, r1
 800de94:	4610      	mov	r0, r2
 800de96:	4619      	mov	r1, r3
 800de98:	a309      	add	r3, pc, #36	; (adr r3, 800dec0 <can1_ams_cell_temperatures_t5s1_encode+0x48>)
 800de9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9e:	f7f2 fcc7 	bl	8000830 <__aeabi_ddiv>
 800dea2:	4602      	mov	r2, r0
 800dea4:	460b      	mov	r3, r1
 800dea6:	4610      	mov	r0, r2
 800dea8:	4619      	mov	r1, r3
 800deaa:	f7f2 fe47 	bl	8000b3c <__aeabi_d2iz>
 800deae:	4603      	mov	r3, r0
 800deb0:	b21b      	sxth	r3, r3
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3708      	adds	r7, #8
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	f3af 8000 	nop.w
 800dec0:	757928e1 	.word	0x757928e1
 800dec4:	3fa9018e 	.word	0x3fa9018e
 800dec8:	40240000 	.word	0x40240000
 800decc:	00000000 	.word	0x00000000

0800ded0 <can1_ams_cell_temperatures_t5s1_decode>:

double can1_ams_cell_temperatures_t5s1_decode(int16_t value)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	4603      	mov	r3, r0
 800ded8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800deda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dede:	4618      	mov	r0, r3
 800dee0:	f7f2 fb12 	bl	8000508 <__aeabi_i2d>
 800dee4:	a30d      	add	r3, pc, #52	; (adr r3, 800df1c <can1_ams_cell_temperatures_t5s1_decode+0x4c>)
 800dee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deea:	f7f2 fb77 	bl	80005dc <__aeabi_dmul>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	4610      	mov	r0, r2
 800def4:	4619      	mov	r1, r3
 800def6:	f04f 0200 	mov.w	r2, #0
 800defa:	4b07      	ldr	r3, [pc, #28]	; (800df18 <can1_ams_cell_temperatures_t5s1_decode+0x48>)
 800defc:	f7f2 f9b6 	bl	800026c <__aeabi_dsub>
 800df00:	4602      	mov	r2, r0
 800df02:	460b      	mov	r3, r1
 800df04:	ec43 2b17 	vmov	d7, r2, r3
}
 800df08:	eeb0 0a47 	vmov.f32	s0, s14
 800df0c:	eef0 0a67 	vmov.f32	s1, s15
 800df10:	3708      	adds	r7, #8
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	40240000 	.word	0x40240000
 800df1c:	757928e1 	.word	0x757928e1
 800df20:	3fa9018e 	.word	0x3fa9018e
 800df24:	00000000 	.word	0x00000000

0800df28 <can1_ams_cell_temperatures_t5s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s2_encode(double value)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800df32:	f04f 0200 	mov.w	r2, #0
 800df36:	4b10      	ldr	r3, [pc, #64]	; (800df78 <can1_ams_cell_temperatures_t5s2_encode+0x50>)
 800df38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800df3c:	f7f2 f998 	bl	8000270 <__adddf3>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4610      	mov	r0, r2
 800df46:	4619      	mov	r1, r3
 800df48:	a309      	add	r3, pc, #36	; (adr r3, 800df70 <can1_ams_cell_temperatures_t5s2_encode+0x48>)
 800df4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4e:	f7f2 fc6f 	bl	8000830 <__aeabi_ddiv>
 800df52:	4602      	mov	r2, r0
 800df54:	460b      	mov	r3, r1
 800df56:	4610      	mov	r0, r2
 800df58:	4619      	mov	r1, r3
 800df5a:	f7f2 fdef 	bl	8000b3c <__aeabi_d2iz>
 800df5e:	4603      	mov	r3, r0
 800df60:	b21b      	sxth	r3, r3
}
 800df62:	4618      	mov	r0, r3
 800df64:	3708      	adds	r7, #8
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	f3af 8000 	nop.w
 800df70:	757928e1 	.word	0x757928e1
 800df74:	3fa9018e 	.word	0x3fa9018e
 800df78:	40240000 	.word	0x40240000
 800df7c:	00000000 	.word	0x00000000

0800df80 <can1_ams_cell_temperatures_t5s2_decode>:

double can1_ams_cell_temperatures_t5s2_decode(int16_t value)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	4603      	mov	r3, r0
 800df88:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800df8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df8e:	4618      	mov	r0, r3
 800df90:	f7f2 faba 	bl	8000508 <__aeabi_i2d>
 800df94:	a30d      	add	r3, pc, #52	; (adr r3, 800dfcc <can1_ams_cell_temperatures_t5s2_decode+0x4c>)
 800df96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9a:	f7f2 fb1f 	bl	80005dc <__aeabi_dmul>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	4610      	mov	r0, r2
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	f04f 0200 	mov.w	r2, #0
 800dfaa:	4b07      	ldr	r3, [pc, #28]	; (800dfc8 <can1_ams_cell_temperatures_t5s2_decode+0x48>)
 800dfac:	f7f2 f95e 	bl	800026c <__aeabi_dsub>
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	460b      	mov	r3, r1
 800dfb4:	ec43 2b17 	vmov	d7, r2, r3
}
 800dfb8:	eeb0 0a47 	vmov.f32	s0, s14
 800dfbc:	eef0 0a67 	vmov.f32	s1, s15
 800dfc0:	3708      	adds	r7, #8
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	40240000 	.word	0x40240000
 800dfcc:	757928e1 	.word	0x757928e1
 800dfd0:	3fa9018e 	.word	0x3fa9018e
 800dfd4:	00000000 	.word	0x00000000

0800dfd8 <can1_ams_cell_temperatures_t5s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s3_encode(double value)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dfe2:	f04f 0200 	mov.w	r2, #0
 800dfe6:	4b10      	ldr	r3, [pc, #64]	; (800e028 <can1_ams_cell_temperatures_t5s3_encode+0x50>)
 800dfe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dfec:	f7f2 f940 	bl	8000270 <__adddf3>
 800dff0:	4602      	mov	r2, r0
 800dff2:	460b      	mov	r3, r1
 800dff4:	4610      	mov	r0, r2
 800dff6:	4619      	mov	r1, r3
 800dff8:	a309      	add	r3, pc, #36	; (adr r3, 800e020 <can1_ams_cell_temperatures_t5s3_encode+0x48>)
 800dffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffe:	f7f2 fc17 	bl	8000830 <__aeabi_ddiv>
 800e002:	4602      	mov	r2, r0
 800e004:	460b      	mov	r3, r1
 800e006:	4610      	mov	r0, r2
 800e008:	4619      	mov	r1, r3
 800e00a:	f7f2 fd97 	bl	8000b3c <__aeabi_d2iz>
 800e00e:	4603      	mov	r3, r0
 800e010:	b21b      	sxth	r3, r3
}
 800e012:	4618      	mov	r0, r3
 800e014:	3708      	adds	r7, #8
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
 800e01a:	bf00      	nop
 800e01c:	f3af 8000 	nop.w
 800e020:	757928e1 	.word	0x757928e1
 800e024:	3fa9018e 	.word	0x3fa9018e
 800e028:	40240000 	.word	0x40240000
 800e02c:	00000000 	.word	0x00000000

0800e030 <can1_ams_cell_temperatures_t5s3_decode>:

double can1_ams_cell_temperatures_t5s3_decode(int16_t value)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	4603      	mov	r3, r0
 800e038:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e03a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e03e:	4618      	mov	r0, r3
 800e040:	f7f2 fa62 	bl	8000508 <__aeabi_i2d>
 800e044:	a30d      	add	r3, pc, #52	; (adr r3, 800e07c <can1_ams_cell_temperatures_t5s3_decode+0x4c>)
 800e046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04a:	f7f2 fac7 	bl	80005dc <__aeabi_dmul>
 800e04e:	4602      	mov	r2, r0
 800e050:	460b      	mov	r3, r1
 800e052:	4610      	mov	r0, r2
 800e054:	4619      	mov	r1, r3
 800e056:	f04f 0200 	mov.w	r2, #0
 800e05a:	4b07      	ldr	r3, [pc, #28]	; (800e078 <can1_ams_cell_temperatures_t5s3_decode+0x48>)
 800e05c:	f7f2 f906 	bl	800026c <__aeabi_dsub>
 800e060:	4602      	mov	r2, r0
 800e062:	460b      	mov	r3, r1
 800e064:	ec43 2b17 	vmov	d7, r2, r3
}
 800e068:	eeb0 0a47 	vmov.f32	s0, s14
 800e06c:	eef0 0a67 	vmov.f32	s1, s15
 800e070:	3708      	adds	r7, #8
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	40240000 	.word	0x40240000
 800e07c:	757928e1 	.word	0x757928e1
 800e080:	3fa9018e 	.word	0x3fa9018e
 800e084:	00000000 	.word	0x00000000

0800e088 <can1_ams_cell_temperatures_t5s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s4_encode(double value)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e092:	f04f 0200 	mov.w	r2, #0
 800e096:	4b10      	ldr	r3, [pc, #64]	; (800e0d8 <can1_ams_cell_temperatures_t5s4_encode+0x50>)
 800e098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e09c:	f7f2 f8e8 	bl	8000270 <__adddf3>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	4610      	mov	r0, r2
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	a309      	add	r3, pc, #36	; (adr r3, 800e0d0 <can1_ams_cell_temperatures_t5s4_encode+0x48>)
 800e0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ae:	f7f2 fbbf 	bl	8000830 <__aeabi_ddiv>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	4610      	mov	r0, r2
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	f7f2 fd3f 	bl	8000b3c <__aeabi_d2iz>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	b21b      	sxth	r3, r3
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	f3af 8000 	nop.w
 800e0d0:	757928e1 	.word	0x757928e1
 800e0d4:	3fa9018e 	.word	0x3fa9018e
 800e0d8:	40240000 	.word	0x40240000
 800e0dc:	00000000 	.word	0x00000000

0800e0e0 <can1_ams_cell_temperatures_t5s4_decode>:

double can1_ams_cell_temperatures_t5s4_decode(int16_t value)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e0ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7f2 fa0a 	bl	8000508 <__aeabi_i2d>
 800e0f4:	a30d      	add	r3, pc, #52	; (adr r3, 800e12c <can1_ams_cell_temperatures_t5s4_decode+0x4c>)
 800e0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fa:	f7f2 fa6f 	bl	80005dc <__aeabi_dmul>
 800e0fe:	4602      	mov	r2, r0
 800e100:	460b      	mov	r3, r1
 800e102:	4610      	mov	r0, r2
 800e104:	4619      	mov	r1, r3
 800e106:	f04f 0200 	mov.w	r2, #0
 800e10a:	4b07      	ldr	r3, [pc, #28]	; (800e128 <can1_ams_cell_temperatures_t5s4_decode+0x48>)
 800e10c:	f7f2 f8ae 	bl	800026c <__aeabi_dsub>
 800e110:	4602      	mov	r2, r0
 800e112:	460b      	mov	r3, r1
 800e114:	ec43 2b17 	vmov	d7, r2, r3
}
 800e118:	eeb0 0a47 	vmov.f32	s0, s14
 800e11c:	eef0 0a67 	vmov.f32	s1, s15
 800e120:	3708      	adds	r7, #8
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop
 800e128:	40240000 	.word	0x40240000
 800e12c:	757928e1 	.word	0x757928e1
 800e130:	3fa9018e 	.word	0x3fa9018e
 800e134:	00000000 	.word	0x00000000

0800e138 <can1_ams_cell_temperatures_t5s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s5_encode(double value)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e142:	f04f 0200 	mov.w	r2, #0
 800e146:	4b10      	ldr	r3, [pc, #64]	; (800e188 <can1_ams_cell_temperatures_t5s5_encode+0x50>)
 800e148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e14c:	f7f2 f890 	bl	8000270 <__adddf3>
 800e150:	4602      	mov	r2, r0
 800e152:	460b      	mov	r3, r1
 800e154:	4610      	mov	r0, r2
 800e156:	4619      	mov	r1, r3
 800e158:	a309      	add	r3, pc, #36	; (adr r3, 800e180 <can1_ams_cell_temperatures_t5s5_encode+0x48>)
 800e15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15e:	f7f2 fb67 	bl	8000830 <__aeabi_ddiv>
 800e162:	4602      	mov	r2, r0
 800e164:	460b      	mov	r3, r1
 800e166:	4610      	mov	r0, r2
 800e168:	4619      	mov	r1, r3
 800e16a:	f7f2 fce7 	bl	8000b3c <__aeabi_d2iz>
 800e16e:	4603      	mov	r3, r0
 800e170:	b21b      	sxth	r3, r3
}
 800e172:	4618      	mov	r0, r3
 800e174:	3708      	adds	r7, #8
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	f3af 8000 	nop.w
 800e180:	757928e1 	.word	0x757928e1
 800e184:	3fa9018e 	.word	0x3fa9018e
 800e188:	40240000 	.word	0x40240000
 800e18c:	00000000 	.word	0x00000000

0800e190 <can1_ams_cell_temperatures_t5s5_decode>:

double can1_ams_cell_temperatures_t5s5_decode(int16_t value)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	4603      	mov	r3, r0
 800e198:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e19a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7f2 f9b2 	bl	8000508 <__aeabi_i2d>
 800e1a4:	a30d      	add	r3, pc, #52	; (adr r3, 800e1dc <can1_ams_cell_temperatures_t5s5_decode+0x4c>)
 800e1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1aa:	f7f2 fa17 	bl	80005dc <__aeabi_dmul>
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	4610      	mov	r0, r2
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	f04f 0200 	mov.w	r2, #0
 800e1ba:	4b07      	ldr	r3, [pc, #28]	; (800e1d8 <can1_ams_cell_temperatures_t5s5_decode+0x48>)
 800e1bc:	f7f2 f856 	bl	800026c <__aeabi_dsub>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e1c8:	eeb0 0a47 	vmov.f32	s0, s14
 800e1cc:	eef0 0a67 	vmov.f32	s1, s15
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	40240000 	.word	0x40240000
 800e1dc:	757928e1 	.word	0x757928e1
 800e1e0:	3fa9018e 	.word	0x3fa9018e
 800e1e4:	00000000 	.word	0x00000000

0800e1e8 <can1_ams_cell_temperatures_t5s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s6_encode(double value)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e1f2:	f04f 0200 	mov.w	r2, #0
 800e1f6:	4b10      	ldr	r3, [pc, #64]	; (800e238 <can1_ams_cell_temperatures_t5s6_encode+0x50>)
 800e1f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e1fc:	f7f2 f838 	bl	8000270 <__adddf3>
 800e200:	4602      	mov	r2, r0
 800e202:	460b      	mov	r3, r1
 800e204:	4610      	mov	r0, r2
 800e206:	4619      	mov	r1, r3
 800e208:	a309      	add	r3, pc, #36	; (adr r3, 800e230 <can1_ams_cell_temperatures_t5s6_encode+0x48>)
 800e20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20e:	f7f2 fb0f 	bl	8000830 <__aeabi_ddiv>
 800e212:	4602      	mov	r2, r0
 800e214:	460b      	mov	r3, r1
 800e216:	4610      	mov	r0, r2
 800e218:	4619      	mov	r1, r3
 800e21a:	f7f2 fc8f 	bl	8000b3c <__aeabi_d2iz>
 800e21e:	4603      	mov	r3, r0
 800e220:	b21b      	sxth	r3, r3
}
 800e222:	4618      	mov	r0, r3
 800e224:	3708      	adds	r7, #8
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	f3af 8000 	nop.w
 800e230:	757928e1 	.word	0x757928e1
 800e234:	3fa9018e 	.word	0x3fa9018e
 800e238:	40240000 	.word	0x40240000
 800e23c:	00000000 	.word	0x00000000

0800e240 <can1_ams_cell_temperatures_t5s6_decode>:

double can1_ams_cell_temperatures_t5s6_decode(int16_t value)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	4603      	mov	r3, r0
 800e248:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e24a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e24e:	4618      	mov	r0, r3
 800e250:	f7f2 f95a 	bl	8000508 <__aeabi_i2d>
 800e254:	a30d      	add	r3, pc, #52	; (adr r3, 800e28c <can1_ams_cell_temperatures_t5s6_decode+0x4c>)
 800e256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25a:	f7f2 f9bf 	bl	80005dc <__aeabi_dmul>
 800e25e:	4602      	mov	r2, r0
 800e260:	460b      	mov	r3, r1
 800e262:	4610      	mov	r0, r2
 800e264:	4619      	mov	r1, r3
 800e266:	f04f 0200 	mov.w	r2, #0
 800e26a:	4b07      	ldr	r3, [pc, #28]	; (800e288 <can1_ams_cell_temperatures_t5s6_decode+0x48>)
 800e26c:	f7f1 fffe 	bl	800026c <__aeabi_dsub>
 800e270:	4602      	mov	r2, r0
 800e272:	460b      	mov	r3, r1
 800e274:	ec43 2b17 	vmov	d7, r2, r3
}
 800e278:	eeb0 0a47 	vmov.f32	s0, s14
 800e27c:	eef0 0a67 	vmov.f32	s1, s15
 800e280:	3708      	adds	r7, #8
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	40240000 	.word	0x40240000
 800e28c:	757928e1 	.word	0x757928e1
 800e290:	3fa9018e 	.word	0x3fa9018e
 800e294:	00000000 	.word	0x00000000

0800e298 <can1_ams_cell_temperatures_t5s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s7_encode(double value)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e2a2:	f04f 0200 	mov.w	r2, #0
 800e2a6:	4b10      	ldr	r3, [pc, #64]	; (800e2e8 <can1_ams_cell_temperatures_t5s7_encode+0x50>)
 800e2a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e2ac:	f7f1 ffe0 	bl	8000270 <__adddf3>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	460b      	mov	r3, r1
 800e2b4:	4610      	mov	r0, r2
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	a309      	add	r3, pc, #36	; (adr r3, 800e2e0 <can1_ams_cell_temperatures_t5s7_encode+0x48>)
 800e2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2be:	f7f2 fab7 	bl	8000830 <__aeabi_ddiv>
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	4610      	mov	r0, r2
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	f7f2 fc37 	bl	8000b3c <__aeabi_d2iz>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	b21b      	sxth	r3, r3
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3708      	adds	r7, #8
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	f3af 8000 	nop.w
 800e2e0:	757928e1 	.word	0x757928e1
 800e2e4:	3fa9018e 	.word	0x3fa9018e
 800e2e8:	40240000 	.word	0x40240000
 800e2ec:	00000000 	.word	0x00000000

0800e2f0 <can1_ams_cell_temperatures_t5s7_decode>:

double can1_ams_cell_temperatures_t5s7_decode(int16_t value)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e2fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7f2 f902 	bl	8000508 <__aeabi_i2d>
 800e304:	a30d      	add	r3, pc, #52	; (adr r3, 800e33c <can1_ams_cell_temperatures_t5s7_decode+0x4c>)
 800e306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30a:	f7f2 f967 	bl	80005dc <__aeabi_dmul>
 800e30e:	4602      	mov	r2, r0
 800e310:	460b      	mov	r3, r1
 800e312:	4610      	mov	r0, r2
 800e314:	4619      	mov	r1, r3
 800e316:	f04f 0200 	mov.w	r2, #0
 800e31a:	4b07      	ldr	r3, [pc, #28]	; (800e338 <can1_ams_cell_temperatures_t5s7_decode+0x48>)
 800e31c:	f7f1 ffa6 	bl	800026c <__aeabi_dsub>
 800e320:	4602      	mov	r2, r0
 800e322:	460b      	mov	r3, r1
 800e324:	ec43 2b17 	vmov	d7, r2, r3
}
 800e328:	eeb0 0a47 	vmov.f32	s0, s14
 800e32c:	eef0 0a67 	vmov.f32	s1, s15
 800e330:	3708      	adds	r7, #8
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	40240000 	.word	0x40240000
 800e33c:	757928e1 	.word	0x757928e1
 800e340:	3fa9018e 	.word	0x3fa9018e
 800e344:	00000000 	.word	0x00000000

0800e348 <can1_ams_cell_temperatures_t5s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s8_encode(double value)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e352:	f04f 0200 	mov.w	r2, #0
 800e356:	4b10      	ldr	r3, [pc, #64]	; (800e398 <can1_ams_cell_temperatures_t5s8_encode+0x50>)
 800e358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e35c:	f7f1 ff88 	bl	8000270 <__adddf3>
 800e360:	4602      	mov	r2, r0
 800e362:	460b      	mov	r3, r1
 800e364:	4610      	mov	r0, r2
 800e366:	4619      	mov	r1, r3
 800e368:	a309      	add	r3, pc, #36	; (adr r3, 800e390 <can1_ams_cell_temperatures_t5s8_encode+0x48>)
 800e36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36e:	f7f2 fa5f 	bl	8000830 <__aeabi_ddiv>
 800e372:	4602      	mov	r2, r0
 800e374:	460b      	mov	r3, r1
 800e376:	4610      	mov	r0, r2
 800e378:	4619      	mov	r1, r3
 800e37a:	f7f2 fbdf 	bl	8000b3c <__aeabi_d2iz>
 800e37e:	4603      	mov	r3, r0
 800e380:	b21b      	sxth	r3, r3
}
 800e382:	4618      	mov	r0, r3
 800e384:	3708      	adds	r7, #8
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	f3af 8000 	nop.w
 800e390:	757928e1 	.word	0x757928e1
 800e394:	3fa9018e 	.word	0x3fa9018e
 800e398:	40240000 	.word	0x40240000
 800e39c:	00000000 	.word	0x00000000

0800e3a0 <can1_ams_cell_temperatures_t5s8_decode>:

double can1_ams_cell_temperatures_t5s8_decode(int16_t value)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b082      	sub	sp, #8
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e3aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7f2 f8aa 	bl	8000508 <__aeabi_i2d>
 800e3b4:	a30d      	add	r3, pc, #52	; (adr r3, 800e3ec <can1_ams_cell_temperatures_t5s8_decode+0x4c>)
 800e3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ba:	f7f2 f90f 	bl	80005dc <__aeabi_dmul>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	4610      	mov	r0, r2
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	f04f 0200 	mov.w	r2, #0
 800e3ca:	4b07      	ldr	r3, [pc, #28]	; (800e3e8 <can1_ams_cell_temperatures_t5s8_decode+0x48>)
 800e3cc:	f7f1 ff4e 	bl	800026c <__aeabi_dsub>
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e3d8:	eeb0 0a47 	vmov.f32	s0, s14
 800e3dc:	eef0 0a67 	vmov.f32	s1, s15
 800e3e0:	3708      	adds	r7, #8
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	40240000 	.word	0x40240000
 800e3ec:	757928e1 	.word	0x757928e1
 800e3f0:	3fa9018e 	.word	0x3fa9018e
 800e3f4:	00000000 	.word	0x00000000

0800e3f8 <can1_ams_cell_temperatures_t5s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s9_encode(double value)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e402:	f04f 0200 	mov.w	r2, #0
 800e406:	4b10      	ldr	r3, [pc, #64]	; (800e448 <can1_ams_cell_temperatures_t5s9_encode+0x50>)
 800e408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e40c:	f7f1 ff30 	bl	8000270 <__adddf3>
 800e410:	4602      	mov	r2, r0
 800e412:	460b      	mov	r3, r1
 800e414:	4610      	mov	r0, r2
 800e416:	4619      	mov	r1, r3
 800e418:	a309      	add	r3, pc, #36	; (adr r3, 800e440 <can1_ams_cell_temperatures_t5s9_encode+0x48>)
 800e41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41e:	f7f2 fa07 	bl	8000830 <__aeabi_ddiv>
 800e422:	4602      	mov	r2, r0
 800e424:	460b      	mov	r3, r1
 800e426:	4610      	mov	r0, r2
 800e428:	4619      	mov	r1, r3
 800e42a:	f7f2 fb87 	bl	8000b3c <__aeabi_d2iz>
 800e42e:	4603      	mov	r3, r0
 800e430:	b21b      	sxth	r3, r3
}
 800e432:	4618      	mov	r0, r3
 800e434:	3708      	adds	r7, #8
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	f3af 8000 	nop.w
 800e440:	757928e1 	.word	0x757928e1
 800e444:	3fa9018e 	.word	0x3fa9018e
 800e448:	40240000 	.word	0x40240000
 800e44c:	00000000 	.word	0x00000000

0800e450 <can1_ams_cell_temperatures_t5s9_decode>:

double can1_ams_cell_temperatures_t5s9_decode(int16_t value)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	4603      	mov	r3, r0
 800e458:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e45a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e45e:	4618      	mov	r0, r3
 800e460:	f7f2 f852 	bl	8000508 <__aeabi_i2d>
 800e464:	a30d      	add	r3, pc, #52	; (adr r3, 800e49c <can1_ams_cell_temperatures_t5s9_decode+0x4c>)
 800e466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46a:	f7f2 f8b7 	bl	80005dc <__aeabi_dmul>
 800e46e:	4602      	mov	r2, r0
 800e470:	460b      	mov	r3, r1
 800e472:	4610      	mov	r0, r2
 800e474:	4619      	mov	r1, r3
 800e476:	f04f 0200 	mov.w	r2, #0
 800e47a:	4b07      	ldr	r3, [pc, #28]	; (800e498 <can1_ams_cell_temperatures_t5s9_decode+0x48>)
 800e47c:	f7f1 fef6 	bl	800026c <__aeabi_dsub>
 800e480:	4602      	mov	r2, r0
 800e482:	460b      	mov	r3, r1
 800e484:	ec43 2b17 	vmov	d7, r2, r3
}
 800e488:	eeb0 0a47 	vmov.f32	s0, s14
 800e48c:	eef0 0a67 	vmov.f32	s1, s15
 800e490:	3708      	adds	r7, #8
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
 800e496:	bf00      	nop
 800e498:	40240000 	.word	0x40240000
 800e49c:	757928e1 	.word	0x757928e1
 800e4a0:	3fa9018e 	.word	0x3fa9018e
 800e4a4:	00000000 	.word	0x00000000

0800e4a8 <can1_ams_cell_temperatures_t5s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s10_encode(double value)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e4b2:	f04f 0200 	mov.w	r2, #0
 800e4b6:	4b10      	ldr	r3, [pc, #64]	; (800e4f8 <can1_ams_cell_temperatures_t5s10_encode+0x50>)
 800e4b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e4bc:	f7f1 fed8 	bl	8000270 <__adddf3>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	4610      	mov	r0, r2
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	a309      	add	r3, pc, #36	; (adr r3, 800e4f0 <can1_ams_cell_temperatures_t5s10_encode+0x48>)
 800e4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ce:	f7f2 f9af 	bl	8000830 <__aeabi_ddiv>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	4610      	mov	r0, r2
 800e4d8:	4619      	mov	r1, r3
 800e4da:	f7f2 fb2f 	bl	8000b3c <__aeabi_d2iz>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	b21b      	sxth	r3, r3
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3708      	adds	r7, #8
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	f3af 8000 	nop.w
 800e4f0:	757928e1 	.word	0x757928e1
 800e4f4:	3fa9018e 	.word	0x3fa9018e
 800e4f8:	40240000 	.word	0x40240000
 800e4fc:	00000000 	.word	0x00000000

0800e500 <can1_ams_cell_temperatures_t5s10_decode>:

double can1_ams_cell_temperatures_t5s10_decode(int16_t value)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	4603      	mov	r3, r0
 800e508:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e50a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e50e:	4618      	mov	r0, r3
 800e510:	f7f1 fffa 	bl	8000508 <__aeabi_i2d>
 800e514:	a30d      	add	r3, pc, #52	; (adr r3, 800e54c <can1_ams_cell_temperatures_t5s10_decode+0x4c>)
 800e516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51a:	f7f2 f85f 	bl	80005dc <__aeabi_dmul>
 800e51e:	4602      	mov	r2, r0
 800e520:	460b      	mov	r3, r1
 800e522:	4610      	mov	r0, r2
 800e524:	4619      	mov	r1, r3
 800e526:	f04f 0200 	mov.w	r2, #0
 800e52a:	4b07      	ldr	r3, [pc, #28]	; (800e548 <can1_ams_cell_temperatures_t5s10_decode+0x48>)
 800e52c:	f7f1 fe9e 	bl	800026c <__aeabi_dsub>
 800e530:	4602      	mov	r2, r0
 800e532:	460b      	mov	r3, r1
 800e534:	ec43 2b17 	vmov	d7, r2, r3
}
 800e538:	eeb0 0a47 	vmov.f32	s0, s14
 800e53c:	eef0 0a67 	vmov.f32	s1, s15
 800e540:	3708      	adds	r7, #8
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	40240000 	.word	0x40240000
 800e54c:	757928e1 	.word	0x757928e1
 800e550:	3fa9018e 	.word	0x3fa9018e
 800e554:	00000000 	.word	0x00000000

0800e558 <can1_ams_cell_temperatures_t5s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s11_encode(double value)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e562:	f04f 0200 	mov.w	r2, #0
 800e566:	4b10      	ldr	r3, [pc, #64]	; (800e5a8 <can1_ams_cell_temperatures_t5s11_encode+0x50>)
 800e568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e56c:	f7f1 fe80 	bl	8000270 <__adddf3>
 800e570:	4602      	mov	r2, r0
 800e572:	460b      	mov	r3, r1
 800e574:	4610      	mov	r0, r2
 800e576:	4619      	mov	r1, r3
 800e578:	a309      	add	r3, pc, #36	; (adr r3, 800e5a0 <can1_ams_cell_temperatures_t5s11_encode+0x48>)
 800e57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57e:	f7f2 f957 	bl	8000830 <__aeabi_ddiv>
 800e582:	4602      	mov	r2, r0
 800e584:	460b      	mov	r3, r1
 800e586:	4610      	mov	r0, r2
 800e588:	4619      	mov	r1, r3
 800e58a:	f7f2 fad7 	bl	8000b3c <__aeabi_d2iz>
 800e58e:	4603      	mov	r3, r0
 800e590:	b21b      	sxth	r3, r3
}
 800e592:	4618      	mov	r0, r3
 800e594:	3708      	adds	r7, #8
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	f3af 8000 	nop.w
 800e5a0:	757928e1 	.word	0x757928e1
 800e5a4:	3fa9018e 	.word	0x3fa9018e
 800e5a8:	40240000 	.word	0x40240000
 800e5ac:	00000000 	.word	0x00000000

0800e5b0 <can1_ams_cell_temperatures_t5s11_decode>:

double can1_ams_cell_temperatures_t5s11_decode(int16_t value)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e5ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7f1 ffa2 	bl	8000508 <__aeabi_i2d>
 800e5c4:	a30d      	add	r3, pc, #52	; (adr r3, 800e5fc <can1_ams_cell_temperatures_t5s11_decode+0x4c>)
 800e5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ca:	f7f2 f807 	bl	80005dc <__aeabi_dmul>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	4610      	mov	r0, r2
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	f04f 0200 	mov.w	r2, #0
 800e5da:	4b07      	ldr	r3, [pc, #28]	; (800e5f8 <can1_ams_cell_temperatures_t5s11_decode+0x48>)
 800e5dc:	f7f1 fe46 	bl	800026c <__aeabi_dsub>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e5e8:	eeb0 0a47 	vmov.f32	s0, s14
 800e5ec:	eef0 0a67 	vmov.f32	s1, s15
 800e5f0:	3708      	adds	r7, #8
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	40240000 	.word	0x40240000
 800e5fc:	757928e1 	.word	0x757928e1
 800e600:	3fa9018e 	.word	0x3fa9018e
 800e604:	00000000 	.word	0x00000000

0800e608 <can1_ams_cell_temperatures_t5s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s12_encode(double value)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e612:	f04f 0200 	mov.w	r2, #0
 800e616:	4b10      	ldr	r3, [pc, #64]	; (800e658 <can1_ams_cell_temperatures_t5s12_encode+0x50>)
 800e618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e61c:	f7f1 fe28 	bl	8000270 <__adddf3>
 800e620:	4602      	mov	r2, r0
 800e622:	460b      	mov	r3, r1
 800e624:	4610      	mov	r0, r2
 800e626:	4619      	mov	r1, r3
 800e628:	a309      	add	r3, pc, #36	; (adr r3, 800e650 <can1_ams_cell_temperatures_t5s12_encode+0x48>)
 800e62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e62e:	f7f2 f8ff 	bl	8000830 <__aeabi_ddiv>
 800e632:	4602      	mov	r2, r0
 800e634:	460b      	mov	r3, r1
 800e636:	4610      	mov	r0, r2
 800e638:	4619      	mov	r1, r3
 800e63a:	f7f2 fa7f 	bl	8000b3c <__aeabi_d2iz>
 800e63e:	4603      	mov	r3, r0
 800e640:	b21b      	sxth	r3, r3
}
 800e642:	4618      	mov	r0, r3
 800e644:	3708      	adds	r7, #8
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	f3af 8000 	nop.w
 800e650:	757928e1 	.word	0x757928e1
 800e654:	3fa9018e 	.word	0x3fa9018e
 800e658:	40240000 	.word	0x40240000
 800e65c:	00000000 	.word	0x00000000

0800e660 <can1_ams_cell_temperatures_t5s12_decode>:

double can1_ams_cell_temperatures_t5s12_decode(int16_t value)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	4603      	mov	r3, r0
 800e668:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e66a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e66e:	4618      	mov	r0, r3
 800e670:	f7f1 ff4a 	bl	8000508 <__aeabi_i2d>
 800e674:	a30d      	add	r3, pc, #52	; (adr r3, 800e6ac <can1_ams_cell_temperatures_t5s12_decode+0x4c>)
 800e676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e67a:	f7f1 ffaf 	bl	80005dc <__aeabi_dmul>
 800e67e:	4602      	mov	r2, r0
 800e680:	460b      	mov	r3, r1
 800e682:	4610      	mov	r0, r2
 800e684:	4619      	mov	r1, r3
 800e686:	f04f 0200 	mov.w	r2, #0
 800e68a:	4b07      	ldr	r3, [pc, #28]	; (800e6a8 <can1_ams_cell_temperatures_t5s12_decode+0x48>)
 800e68c:	f7f1 fdee 	bl	800026c <__aeabi_dsub>
 800e690:	4602      	mov	r2, r0
 800e692:	460b      	mov	r3, r1
 800e694:	ec43 2b17 	vmov	d7, r2, r3
}
 800e698:	eeb0 0a47 	vmov.f32	s0, s14
 800e69c:	eef0 0a67 	vmov.f32	s1, s15
 800e6a0:	3708      	adds	r7, #8
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	40240000 	.word	0x40240000
 800e6ac:	757928e1 	.word	0x757928e1
 800e6b0:	3fa9018e 	.word	0x3fa9018e

0800e6b4 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	71fb      	strb	r3, [r7, #7]
 800e6be:	460b      	mov	r3, r1
 800e6c0:	71bb      	strb	r3, [r7, #6]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800e6c6:	79fa      	ldrb	r2, [r7, #7]
 800e6c8:	79bb      	ldrb	r3, [r7, #6]
 800e6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800e6ce:	b2da      	uxtb	r2, r3
 800e6d0:	797b      	ldrb	r3, [r7, #5]
 800e6d2:	4013      	ands	r3, r2
 800e6d4:	b2db      	uxtb	r3, r3
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	370c      	adds	r7, #12
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr

0800e6e2 <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e6e2:	b480      	push	{r7}
 800e6e4:	b083      	sub	sp, #12
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	80fb      	strh	r3, [r7, #6]
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	717b      	strb	r3, [r7, #5]
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800e6f4:	88fa      	ldrh	r2, [r7, #6]
 800e6f6:	797b      	ldrb	r3, [r7, #5]
 800e6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e6fc:	b2da      	uxtb	r2, r3
 800e6fe:	793b      	ldrb	r3, [r7, #4]
 800e700:	4013      	ands	r3, r2
 800e702:	b2db      	uxtb	r3, r3
}
 800e704:	4618      	mov	r0, r3
 800e706:	370c      	adds	r7, #12
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr

0800e710 <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e710:	b480      	push	{r7}
 800e712:	b083      	sub	sp, #12
 800e714:	af00      	add	r7, sp, #0
 800e716:	4603      	mov	r3, r0
 800e718:	80fb      	strh	r3, [r7, #6]
 800e71a:	460b      	mov	r3, r1
 800e71c:	717b      	strb	r3, [r7, #5]
 800e71e:	4613      	mov	r3, r2
 800e720:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 800e722:	88fa      	ldrh	r2, [r7, #6]
 800e724:	797b      	ldrb	r3, [r7, #5]
 800e726:	fa42 f303 	asr.w	r3, r2, r3
 800e72a:	b2da      	uxtb	r2, r3
 800e72c:	793b      	ldrb	r3, [r7, #4]
 800e72e:	4013      	ands	r3, r2
 800e730:	b2db      	uxtb	r3, r3
}
 800e732:	4618      	mov	r0, r3
 800e734:	370c      	adds	r7, #12
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr

0800e73e <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e73e:	b480      	push	{r7}
 800e740:	b083      	sub	sp, #12
 800e742:	af00      	add	r7, sp, #0
 800e744:	4603      	mov	r3, r0
 800e746:	71fb      	strb	r3, [r7, #7]
 800e748:	460b      	mov	r3, r1
 800e74a:	71bb      	strb	r3, [r7, #6]
 800e74c:	4613      	mov	r3, r2
 800e74e:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 800e750:	79fa      	ldrb	r2, [r7, #7]
 800e752:	797b      	ldrb	r3, [r7, #5]
 800e754:	4013      	ands	r3, r2
 800e756:	b2db      	uxtb	r3, r3
 800e758:	461a      	mov	r2, r3
 800e75a:	79bb      	ldrb	r3, [r7, #6]
 800e75c:	fa02 f303 	lsl.w	r3, r2, r3
 800e760:	b29b      	uxth	r3, r3
}
 800e762:	4618      	mov	r0, r3
 800e764:	370c      	adds	r7, #12
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr

0800e76e <unpack_left_shift_u32>:

static inline uint32_t unpack_left_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e76e:	b480      	push	{r7}
 800e770:	b083      	sub	sp, #12
 800e772:	af00      	add	r7, sp, #0
 800e774:	4603      	mov	r3, r0
 800e776:	71fb      	strb	r3, [r7, #7]
 800e778:	460b      	mov	r3, r1
 800e77a:	71bb      	strb	r3, [r7, #6]
 800e77c:	4613      	mov	r3, r2
 800e77e:	717b      	strb	r3, [r7, #5]
    return (uint32_t)((uint32_t)(value & mask) << shift);
 800e780:	79fa      	ldrb	r2, [r7, #7]
 800e782:	797b      	ldrb	r3, [r7, #5]
 800e784:	4013      	ands	r3, r2
 800e786:	b2db      	uxtb	r3, r3
 800e788:	461a      	mov	r2, r3
 800e78a:	79bb      	ldrb	r3, [r7, #6]
 800e78c:	fa02 f303 	lsl.w	r3, r2, r3
}
 800e790:	4618      	mov	r0, r3
 800e792:	370c      	adds	r7, #12
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr

0800e79c <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	71fb      	strb	r3, [r7, #7]
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	71bb      	strb	r3, [r7, #6]
 800e7aa:	4613      	mov	r3, r2
 800e7ac:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800e7ae:	79fa      	ldrb	r2, [r7, #7]
 800e7b0:	797b      	ldrb	r3, [r7, #5]
 800e7b2:	4013      	ands	r3, r2
 800e7b4:	b2db      	uxtb	r3, r3
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	79bb      	ldrb	r3, [r7, #6]
 800e7ba:	fa42 f303 	asr.w	r3, r2, r3
 800e7be:	b2db      	uxtb	r3, r3
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	71fb      	strb	r3, [r7, #7]
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	71bb      	strb	r3, [r7, #6]
 800e7da:	4613      	mov	r3, r2
 800e7dc:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 800e7de:	79fa      	ldrb	r2, [r7, #7]
 800e7e0:	797b      	ldrb	r3, [r7, #5]
 800e7e2:	4013      	ands	r3, r2
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	79bb      	ldrb	r3, [r7, #6]
 800e7ea:	fa42 f303 	asr.w	r3, r2, r3
 800e7ee:	b29b      	uxth	r3, r3
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <unpack_right_shift_u32>:

static inline uint32_t unpack_right_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	4603      	mov	r3, r0
 800e804:	71fb      	strb	r3, [r7, #7]
 800e806:	460b      	mov	r3, r1
 800e808:	71bb      	strb	r3, [r7, #6]
 800e80a:	4613      	mov	r3, r2
 800e80c:	717b      	strb	r3, [r7, #5]
    return (uint32_t)((uint32_t)(value & mask) >> shift);
 800e80e:	79fa      	ldrb	r2, [r7, #7]
 800e810:	797b      	ldrb	r3, [r7, #5]
 800e812:	4013      	ands	r3, r2
 800e814:	b2db      	uxtb	r3, r3
 800e816:	461a      	mov	r2, r3
 800e818:	79bb      	ldrb	r3, [r7, #6]
 800e81a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e81e:	4618      	mov	r0, r3
 800e820:	370c      	adds	r7, #12
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr

0800e82a <can2_amk1_setpoints_1_unpack>:

int can2_amk1_setpoints_1_unpack(
    struct can2_amk1_setpoints_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800e82a:	b580      	push	{r7, lr}
 800e82c:	b086      	sub	sp, #24
 800e82e:	af00      	add	r7, sp, #0
 800e830:	60f8      	str	r0, [r7, #12]
 800e832:	60b9      	str	r1, [r7, #8]
 800e834:	607a      	str	r2, [r7, #4]
    uint16_t amk1_target_velocity;
    uint16_t amk1_torque_limit_negativ;
    uint16_t amk1_torque_limit_positiv;

    if (size < 8u) {
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2b07      	cmp	r3, #7
 800e83a:	d802      	bhi.n	800e842 <can2_amk1_setpoints_1_unpack+0x18>
        return (-EINVAL);
 800e83c:	f06f 0315 	mvn.w	r3, #21
 800e840:	e081      	b.n	800e946 <can2_amk1_setpoints_1_unpack+0x11c>
    }

    dst_p->amk1_control_inverter_on = unpack_right_shift_u8(src_p[1], 0u, 0x01u);
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	3301      	adds	r3, #1
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	2201      	movs	r2, #1
 800e84a:	2100      	movs	r1, #0
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7ff ffa5 	bl	800e79c <unpack_right_shift_u8>
 800e852:	4603      	mov	r3, r0
 800e854:	461a      	mov	r2, r3
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	701a      	strb	r2, [r3, #0]
    dst_p->amk1_control_dc_on = unpack_right_shift_u8(src_p[1], 1u, 0x02u);
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	3301      	adds	r3, #1
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	2202      	movs	r2, #2
 800e862:	2101      	movs	r1, #1
 800e864:	4618      	mov	r0, r3
 800e866:	f7ff ff99 	bl	800e79c <unpack_right_shift_u8>
 800e86a:	4603      	mov	r3, r0
 800e86c:	461a      	mov	r2, r3
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	705a      	strb	r2, [r3, #1]
    dst_p->amk1_control_enable = unpack_right_shift_u8(src_p[1], 2u, 0x04u);
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	3301      	adds	r3, #1
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	2204      	movs	r2, #4
 800e87a:	2102      	movs	r1, #2
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7ff ff8d 	bl	800e79c <unpack_right_shift_u8>
 800e882:	4603      	mov	r3, r0
 800e884:	461a      	mov	r2, r3
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	709a      	strb	r2, [r3, #2]
    dst_p->amk1_control_error_reset = unpack_right_shift_u8(src_p[1], 3u, 0x08u);
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	3301      	adds	r3, #1
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	2208      	movs	r2, #8
 800e892:	2103      	movs	r1, #3
 800e894:	4618      	mov	r0, r3
 800e896:	f7ff ff81 	bl	800e79c <unpack_right_shift_u8>
 800e89a:	4603      	mov	r3, r0
 800e89c:	461a      	mov	r2, r3
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	70da      	strb	r2, [r3, #3]
    amk1_target_velocity = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	3302      	adds	r3, #2
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	22ff      	movs	r2, #255	; 0xff
 800e8aa:	2100      	movs	r1, #0
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7ff ff8d 	bl	800e7cc <unpack_right_shift_u16>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	82fb      	strh	r3, [r7, #22]
    amk1_target_velocity |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	3303      	adds	r3, #3
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	22ff      	movs	r2, #255	; 0xff
 800e8be:	2108      	movs	r1, #8
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7ff ff3c 	bl	800e73e <unpack_left_shift_u16>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	8afb      	ldrh	r3, [r7, #22]
 800e8cc:	4313      	orrs	r3, r2
 800e8ce:	82fb      	strh	r3, [r7, #22]
    dst_p->amk1_target_velocity = (int16_t)amk1_target_velocity;
 800e8d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	809a      	strh	r2, [r3, #4]
    amk1_torque_limit_positiv = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	3304      	adds	r3, #4
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	22ff      	movs	r2, #255	; 0xff
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7ff ff72 	bl	800e7cc <unpack_right_shift_u16>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	82bb      	strh	r3, [r7, #20]
    amk1_torque_limit_positiv |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	3305      	adds	r3, #5
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	22ff      	movs	r2, #255	; 0xff
 800e8f4:	2108      	movs	r1, #8
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7ff ff21 	bl	800e73e <unpack_left_shift_u16>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	461a      	mov	r2, r3
 800e900:	8abb      	ldrh	r3, [r7, #20]
 800e902:	4313      	orrs	r3, r2
 800e904:	82bb      	strh	r3, [r7, #20]
    dst_p->amk1_torque_limit_positiv = (int16_t)amk1_torque_limit_positiv;
 800e906:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	80da      	strh	r2, [r3, #6]
    amk1_torque_limit_negativ = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	3306      	adds	r3, #6
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	22ff      	movs	r2, #255	; 0xff
 800e916:	2100      	movs	r1, #0
 800e918:	4618      	mov	r0, r3
 800e91a:	f7ff ff57 	bl	800e7cc <unpack_right_shift_u16>
 800e91e:	4603      	mov	r3, r0
 800e920:	827b      	strh	r3, [r7, #18]
    amk1_torque_limit_negativ |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	3307      	adds	r3, #7
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	22ff      	movs	r2, #255	; 0xff
 800e92a:	2108      	movs	r1, #8
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7ff ff06 	bl	800e73e <unpack_left_shift_u16>
 800e932:	4603      	mov	r3, r0
 800e934:	461a      	mov	r2, r3
 800e936:	8a7b      	ldrh	r3, [r7, #18]
 800e938:	4313      	orrs	r3, r2
 800e93a:	827b      	strh	r3, [r7, #18]
    dst_p->amk1_torque_limit_negativ = (int16_t)amk1_torque_limit_negativ;
 800e93c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	811a      	strh	r2, [r3, #8]

    return (0);
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3718      	adds	r7, #24
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <can2_amk1_setpoints_1_amk1_control_inverter_on_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_inverter_on_decode(uint8_t value)
{
 800e94e:	b580      	push	{r7, lr}
 800e950:	b082      	sub	sp, #8
 800e952:	af00      	add	r7, sp, #0
 800e954:	4603      	mov	r3, r0
 800e956:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800e958:	79fb      	ldrb	r3, [r7, #7]
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7f1 fdc4 	bl	80004e8 <__aeabi_ui2d>
 800e960:	4602      	mov	r2, r0
 800e962:	460b      	mov	r3, r1
 800e964:	ec43 2b17 	vmov	d7, r2, r3
}
 800e968:	eeb0 0a47 	vmov.f32	s0, s14
 800e96c:	eef0 0a67 	vmov.f32	s1, s15
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <can2_amk1_setpoints_1_amk1_control_dc_on_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_dc_on_decode(uint8_t value)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b082      	sub	sp, #8
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	4603      	mov	r3, r0
 800e97e:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800e980:	79fb      	ldrb	r3, [r7, #7]
 800e982:	4618      	mov	r0, r3
 800e984:	f7f1 fdb0 	bl	80004e8 <__aeabi_ui2d>
 800e988:	4602      	mov	r2, r0
 800e98a:	460b      	mov	r3, r1
 800e98c:	ec43 2b17 	vmov	d7, r2, r3
}
 800e990:	eeb0 0a47 	vmov.f32	s0, s14
 800e994:	eef0 0a67 	vmov.f32	s1, s15
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <can2_amk1_setpoints_1_amk1_control_enable_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_enable_decode(uint8_t value)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b082      	sub	sp, #8
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800e9a8:	79fb      	ldrb	r3, [r7, #7]
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7f1 fd9c 	bl	80004e8 <__aeabi_ui2d>
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e9b8:	eeb0 0a47 	vmov.f32	s0, s14
 800e9bc:	eef0 0a67 	vmov.f32	s1, s15
 800e9c0:	3708      	adds	r7, #8
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}

0800e9c6 <can2_amk1_setpoints_1_amk1_control_error_reset_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_error_reset_decode(uint8_t value)
{
 800e9c6:	b580      	push	{r7, lr}
 800e9c8:	b082      	sub	sp, #8
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800e9d0:	79fb      	ldrb	r3, [r7, #7]
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7f1 fd88 	bl	80004e8 <__aeabi_ui2d>
 800e9d8:	4602      	mov	r2, r0
 800e9da:	460b      	mov	r3, r1
 800e9dc:	ec43 2b17 	vmov	d7, r2, r3
}
 800e9e0:	eeb0 0a47 	vmov.f32	s0, s14
 800e9e4:	eef0 0a67 	vmov.f32	s1, s15
 800e9e8:	3708      	adds	r7, #8
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <can2_amk1_setpoints_1_amk1_target_velocity_decode>:
{
    return (int16_t)(value);
}

double can2_amk1_setpoints_1_amk1_target_velocity_decode(int16_t value)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b082      	sub	sp, #8
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800e9f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7f1 fd83 	bl	8000508 <__aeabi_i2d>
 800ea02:	4602      	mov	r2, r0
 800ea04:	460b      	mov	r3, r1
 800ea06:	ec43 2b17 	vmov	d7, r2, r3
}
 800ea0a:	eeb0 0a47 	vmov.f32	s0, s14
 800ea0e:	eef0 0a67 	vmov.f32	s1, s15
 800ea12:	3708      	adds	r7, #8
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode>:
{
    return (int16_t)(value);
}

double can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode(int16_t value)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	4603      	mov	r3, r0
 800ea20:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800ea22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7f1 fd6e 	bl	8000508 <__aeabi_i2d>
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	460b      	mov	r3, r1
 800ea30:	ec43 2b17 	vmov	d7, r2, r3
}
 800ea34:	eeb0 0a47 	vmov.f32	s0, s14
 800ea38:	eef0 0a67 	vmov.f32	s1, s15
 800ea3c:	3708      	adds	r7, #8
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}

0800ea42 <can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode>:
{
    return (int16_t)(value);
}

double can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode(int16_t value)
{
 800ea42:	b580      	push	{r7, lr}
 800ea44:	b082      	sub	sp, #8
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	4603      	mov	r3, r0
 800ea4a:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800ea4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7f1 fd59 	bl	8000508 <__aeabi_i2d>
 800ea56:	4602      	mov	r2, r0
 800ea58:	460b      	mov	r3, r1
 800ea5a:	ec43 2b17 	vmov	d7, r2, r3
}
 800ea5e:	eeb0 0a47 	vmov.f32	s0, s14
 800ea62:	eef0 0a67 	vmov.f32	s1, s15
 800ea66:	3708      	adds	r7, #8
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <can2_charger_config_pack>:

int can2_charger_config_pack(
    uint8_t *dst_p,
    const struct can2_charger_config_t *src_p,
    size_t size)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	607a      	str	r2, [r7, #4]
    if (size < 4u) {
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2b03      	cmp	r3, #3
 800ea7c:	d802      	bhi.n	800ea84 <can2_charger_config_pack+0x18>
        return (-EINVAL);
 800ea7e:	f06f 0315 	mvn.w	r3, #21
 800ea82:	e0c5      	b.n	800ec10 <can2_charger_config_pack+0x1a4>
    }

    memset(&dst_p[0], 0, 4);
 800ea84:	2204      	movs	r2, #4
 800ea86:	2100      	movs	r1, #0
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f01e f969 	bl	802cd60 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->set_mux, 0u, 0xffu);
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	22ff      	movs	r2, #255	; 0xff
 800ea94:	2100      	movs	r1, #0
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7ff fe0c 	bl	800e6b4 <pack_left_shift_u8>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	781b      	ldrb	r3, [r3, #0]
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	b2da      	uxtb	r2, r3
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->msg_choose_chargers, 0u, 0xffu);
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	785b      	ldrb	r3, [r3, #1]
 800eab0:	22ff      	movs	r2, #255	; 0xff
 800eab2:	2100      	movs	r1, #0
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7ff fdfd 	bl	800e6b4 <pack_left_shift_u8>
 800eaba:	4603      	mov	r3, r0
 800eabc:	4619      	mov	r1, r3
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	3301      	adds	r3, #1
 800eac2:	781a      	ldrb	r2, [r3, #0]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	3301      	adds	r3, #1
 800eac8:	430a      	orrs	r2, r1
 800eaca:	b2d2      	uxtb	r2, r2
 800eacc:	701a      	strb	r2, [r3, #0]

    switch (src_p->set_mux) {
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	3b40      	subs	r3, #64	; 0x40
 800ead4:	2b04      	cmp	r3, #4
 800ead6:	f200 8099 	bhi.w	800ec0c <can2_charger_config_pack+0x1a0>
 800eada:	a201      	add	r2, pc, #4	; (adr r2, 800eae0 <can2_charger_config_pack+0x74>)
 800eadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae0:	0800eaf5 	.word	0x0800eaf5
 800eae4:	0800eb3b 	.word	0x0800eb3b
 800eae8:	0800eb81 	.word	0x0800eb81
 800eaec:	0800ec0d 	.word	0x0800ec0d
 800eaf0:	0800ebc7 	.word	0x0800ebc7

    case 64:
        dst_p[2] |= pack_right_shift_u16(src_p->msg_set_voltage_limit, 8u, 0xffu);
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	885b      	ldrh	r3, [r3, #2]
 800eaf8:	22ff      	movs	r2, #255	; 0xff
 800eafa:	2108      	movs	r1, #8
 800eafc:	4618      	mov	r0, r3
 800eafe:	f7ff fe07 	bl	800e710 <pack_right_shift_u16>
 800eb02:	4603      	mov	r3, r0
 800eb04:	4619      	mov	r1, r3
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	3302      	adds	r3, #2
 800eb0a:	781a      	ldrb	r2, [r3, #0]
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	3302      	adds	r3, #2
 800eb10:	430a      	orrs	r2, r1
 800eb12:	b2d2      	uxtb	r2, r2
 800eb14:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u16(src_p->msg_set_voltage_limit, 0u, 0xffu);
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	885b      	ldrh	r3, [r3, #2]
 800eb1a:	22ff      	movs	r2, #255	; 0xff
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7ff fddf 	bl	800e6e2 <pack_left_shift_u16>
 800eb24:	4603      	mov	r3, r0
 800eb26:	4619      	mov	r1, r3
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	3303      	adds	r3, #3
 800eb2c:	781a      	ldrb	r2, [r3, #0]
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	3303      	adds	r3, #3
 800eb32:	430a      	orrs	r2, r1
 800eb34:	b2d2      	uxtb	r2, r2
 800eb36:	701a      	strb	r2, [r3, #0]
        break;
 800eb38:	e069      	b.n	800ec0e <can2_charger_config_pack+0x1a2>

    case 65:
        dst_p[2] |= pack_right_shift_u16(src_p->msg_set_current_limit, 8u, 0xffu);
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	889b      	ldrh	r3, [r3, #4]
 800eb3e:	22ff      	movs	r2, #255	; 0xff
 800eb40:	2108      	movs	r1, #8
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7ff fde4 	bl	800e710 <pack_right_shift_u16>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	3302      	adds	r3, #2
 800eb50:	781a      	ldrb	r2, [r3, #0]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	3302      	adds	r3, #2
 800eb56:	430a      	orrs	r2, r1
 800eb58:	b2d2      	uxtb	r2, r2
 800eb5a:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u16(src_p->msg_set_current_limit, 0u, 0xffu);
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	889b      	ldrh	r3, [r3, #4]
 800eb60:	22ff      	movs	r2, #255	; 0xff
 800eb62:	2100      	movs	r1, #0
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7ff fdbc 	bl	800e6e2 <pack_left_shift_u16>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	3303      	adds	r3, #3
 800eb72:	781a      	ldrb	r2, [r3, #0]
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	3303      	adds	r3, #3
 800eb78:	430a      	orrs	r2, r1
 800eb7a:	b2d2      	uxtb	r2, r2
 800eb7c:	701a      	strb	r2, [r3, #0]
        break;
 800eb7e:	e046      	b.n	800ec0e <can2_charger_config_pack+0x1a2>

    case 66:
        dst_p[2] |= pack_right_shift_u16(src_p->msg_set_power_limit, 8u, 0xffu);
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	88db      	ldrh	r3, [r3, #6]
 800eb84:	22ff      	movs	r2, #255	; 0xff
 800eb86:	2108      	movs	r1, #8
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7ff fdc1 	bl	800e710 <pack_right_shift_u16>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	4619      	mov	r1, r3
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	3302      	adds	r3, #2
 800eb96:	781a      	ldrb	r2, [r3, #0]
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	3302      	adds	r3, #2
 800eb9c:	430a      	orrs	r2, r1
 800eb9e:	b2d2      	uxtb	r2, r2
 800eba0:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u16(src_p->msg_set_power_limit, 0u, 0xffu);
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	88db      	ldrh	r3, [r3, #6]
 800eba6:	22ff      	movs	r2, #255	; 0xff
 800eba8:	2100      	movs	r1, #0
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7ff fd99 	bl	800e6e2 <pack_left_shift_u16>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	3303      	adds	r3, #3
 800ebb8:	781a      	ldrb	r2, [r3, #0]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	3303      	adds	r3, #3
 800ebbe:	430a      	orrs	r2, r1
 800ebc0:	b2d2      	uxtb	r2, r2
 800ebc2:	701a      	strb	r2, [r3, #0]
        break;
 800ebc4:	e023      	b.n	800ec0e <can2_charger_config_pack+0x1a2>

    case 68:
        dst_p[2] |= pack_left_shift_u8(src_p->msg_set_enabled, 0u, 0xffu);
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	7a1b      	ldrb	r3, [r3, #8]
 800ebca:	22ff      	movs	r2, #255	; 0xff
 800ebcc:	2100      	movs	r1, #0
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7ff fd70 	bl	800e6b4 <pack_left_shift_u8>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	3302      	adds	r3, #2
 800ebdc:	781a      	ldrb	r2, [r3, #0]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	3302      	adds	r3, #2
 800ebe2:	430a      	orrs	r2, r1
 800ebe4:	b2d2      	uxtb	r2, r2
 800ebe6:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->msg_set_time_out, 0u, 0xffu);
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	7a5b      	ldrb	r3, [r3, #9]
 800ebec:	22ff      	movs	r2, #255	; 0xff
 800ebee:	2100      	movs	r1, #0
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7ff fd5f 	bl	800e6b4 <pack_left_shift_u8>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	3303      	adds	r3, #3
 800ebfe:	781a      	ldrb	r2, [r3, #0]
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	3303      	adds	r3, #3
 800ec04:	430a      	orrs	r2, r1
 800ec06:	b2d2      	uxtb	r2, r2
 800ec08:	701a      	strb	r2, [r3, #0]
        break;
 800ec0a:	e000      	b.n	800ec0e <can2_charger_config_pack+0x1a2>

    default:
        break;
 800ec0c:	bf00      	nop
    }

    return (4);
 800ec0e:	2304      	movs	r3, #4
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3710      	adds	r7, #16
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <can2_charger_config_unpack>:

int can2_charger_config_unpack(
    struct can2_charger_config_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	607a      	str	r2, [r7, #4]
    if (size < 4u) {
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2b03      	cmp	r3, #3
 800ec28:	d802      	bhi.n	800ec30 <can2_charger_config_unpack+0x18>
        return (-EINVAL);
 800ec2a:	f06f 0315 	mvn.w	r3, #21
 800ec2e:	e09b      	b.n	800ed68 <can2_charger_config_unpack+0x150>
    }

    dst_p->set_mux = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	22ff      	movs	r2, #255	; 0xff
 800ec36:	2100      	movs	r1, #0
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7ff fdaf 	bl	800e79c <unpack_right_shift_u8>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	461a      	mov	r2, r3
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	701a      	strb	r2, [r3, #0]
    dst_p->msg_choose_chargers = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	22ff      	movs	r2, #255	; 0xff
 800ec4e:	2100      	movs	r1, #0
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7ff fda3 	bl	800e79c <unpack_right_shift_u8>
 800ec56:	4603      	mov	r3, r0
 800ec58:	461a      	mov	r2, r3
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	705a      	strb	r2, [r3, #1]

    switch (dst_p->set_mux) {
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	3b40      	subs	r3, #64	; 0x40
 800ec64:	2b04      	cmp	r3, #4
 800ec66:	d87d      	bhi.n	800ed64 <can2_charger_config_unpack+0x14c>
 800ec68:	a201      	add	r2, pc, #4	; (adr r2, 800ec70 <can2_charger_config_unpack+0x58>)
 800ec6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec6e:	bf00      	nop
 800ec70:	0800ec85 	.word	0x0800ec85
 800ec74:	0800ecbf 	.word	0x0800ecbf
 800ec78:	0800ecf9 	.word	0x0800ecf9
 800ec7c:	0800ed65 	.word	0x0800ed65
 800ec80:	0800ed33 	.word	0x0800ed33

    case 64:
        dst_p->msg_set_voltage_limit = unpack_left_shift_u16(src_p[2], 8u, 0xffu);
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	3302      	adds	r3, #2
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	22ff      	movs	r2, #255	; 0xff
 800ec8c:	2108      	movs	r1, #8
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7ff fd55 	bl	800e73e <unpack_left_shift_u16>
 800ec94:	4603      	mov	r3, r0
 800ec96:	461a      	mov	r2, r3
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	805a      	strh	r2, [r3, #2]
        dst_p->msg_set_voltage_limit |= unpack_right_shift_u16(src_p[3], 0u, 0xffu);
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	3303      	adds	r3, #3
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	22ff      	movs	r2, #255	; 0xff
 800eca4:	2100      	movs	r1, #0
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7ff fd90 	bl	800e7cc <unpack_right_shift_u16>
 800ecac:	4603      	mov	r3, r0
 800ecae:	461a      	mov	r2, r3
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	885b      	ldrh	r3, [r3, #2]
 800ecb4:	4313      	orrs	r3, r2
 800ecb6:	b29a      	uxth	r2, r3
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	805a      	strh	r2, [r3, #2]
        break;
 800ecbc:	e053      	b.n	800ed66 <can2_charger_config_unpack+0x14e>

    case 65:
        dst_p->msg_set_current_limit = unpack_left_shift_u16(src_p[2], 8u, 0xffu);
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	3302      	adds	r3, #2
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	22ff      	movs	r2, #255	; 0xff
 800ecc6:	2108      	movs	r1, #8
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7ff fd38 	bl	800e73e <unpack_left_shift_u16>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	809a      	strh	r2, [r3, #4]
        dst_p->msg_set_current_limit |= unpack_right_shift_u16(src_p[3], 0u, 0xffu);
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	3303      	adds	r3, #3
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	22ff      	movs	r2, #255	; 0xff
 800ecde:	2100      	movs	r1, #0
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7ff fd73 	bl	800e7cc <unpack_right_shift_u16>
 800ece6:	4603      	mov	r3, r0
 800ece8:	461a      	mov	r2, r3
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	889b      	ldrh	r3, [r3, #4]
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	809a      	strh	r2, [r3, #4]
        break;
 800ecf6:	e036      	b.n	800ed66 <can2_charger_config_unpack+0x14e>

    case 66:
        dst_p->msg_set_power_limit = unpack_left_shift_u16(src_p[2], 8u, 0xffu);
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	3302      	adds	r3, #2
 800ecfc:	781b      	ldrb	r3, [r3, #0]
 800ecfe:	22ff      	movs	r2, #255	; 0xff
 800ed00:	2108      	movs	r1, #8
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7ff fd1b 	bl	800e73e <unpack_left_shift_u16>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	80da      	strh	r2, [r3, #6]
        dst_p->msg_set_power_limit |= unpack_right_shift_u16(src_p[3], 0u, 0xffu);
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	3303      	adds	r3, #3
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	22ff      	movs	r2, #255	; 0xff
 800ed18:	2100      	movs	r1, #0
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7ff fd56 	bl	800e7cc <unpack_right_shift_u16>
 800ed20:	4603      	mov	r3, r0
 800ed22:	461a      	mov	r2, r3
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	88db      	ldrh	r3, [r3, #6]
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	b29a      	uxth	r2, r3
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	80da      	strh	r2, [r3, #6]
        break;
 800ed30:	e019      	b.n	800ed66 <can2_charger_config_unpack+0x14e>

    case 68:
        dst_p->msg_set_enabled = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	3302      	adds	r3, #2
 800ed36:	781b      	ldrb	r3, [r3, #0]
 800ed38:	22ff      	movs	r2, #255	; 0xff
 800ed3a:	2100      	movs	r1, #0
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7ff fd2d 	bl	800e79c <unpack_right_shift_u8>
 800ed42:	4603      	mov	r3, r0
 800ed44:	461a      	mov	r2, r3
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	721a      	strb	r2, [r3, #8]
        dst_p->msg_set_time_out = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	3303      	adds	r3, #3
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	22ff      	movs	r2, #255	; 0xff
 800ed52:	2100      	movs	r1, #0
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7ff fd21 	bl	800e79c <unpack_right_shift_u8>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	725a      	strb	r2, [r3, #9]
        break;
 800ed62:	e000      	b.n	800ed66 <can2_charger_config_unpack+0x14e>

    default:
        break;
 800ed64:	bf00      	nop
    }

    return (0);
 800ed66:	2300      	movs	r3, #0
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3710      	adds	r7, #16
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <can2_charger_config_set_mux_encode>:

uint8_t can2_charger_config_set_mux_encode(double value)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800ed7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ed7e:	f7f1 ff05 	bl	8000b8c <__aeabi_d2uiz>
 800ed82:	4603      	mov	r3, r0
 800ed84:	b2db      	uxtb	r3, r3
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3708      	adds	r7, #8
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}

0800ed8e <can2_charger_config_msg_set_voltage_limit_encode>:

    return (true);
}

uint16_t can2_charger_config_msg_set_voltage_limit_encode(double value)
{
 800ed8e:	b580      	push	{r7, lr}
 800ed90:	b082      	sub	sp, #8
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	ed87 0b00 	vstr	d0, [r7]
    return (uint16_t)(value);
 800ed98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ed9c:	f7f1 fef6 	bl	8000b8c <__aeabi_d2uiz>
 800eda0:	4603      	mov	r3, r0
 800eda2:	b29b      	uxth	r3, r3
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <can2_charger_config_msg_set_voltage_limit_decode>:

double can2_charger_config_msg_set_voltage_limit_decode(uint16_t value)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	4603      	mov	r3, r0
 800edb4:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800edb6:	88fb      	ldrh	r3, [r7, #6]
 800edb8:	4618      	mov	r0, r3
 800edba:	f7f1 fb95 	bl	80004e8 <__aeabi_ui2d>
 800edbe:	4602      	mov	r2, r0
 800edc0:	460b      	mov	r3, r1
 800edc2:	ec43 2b17 	vmov	d7, r2, r3
}
 800edc6:	eeb0 0a47 	vmov.f32	s0, s14
 800edca:	eef0 0a67 	vmov.f32	s1, s15
 800edce:	3708      	adds	r7, #8
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	0000      	movs	r0, r0
	...

0800edd8 <can2_charger_config_msg_set_current_limit_encode>:
{
    return (value <= 900u);
}

uint16_t can2_charger_config_msg_set_current_limit_encode(double value)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	ed87 0b00 	vstr	d0, [r7]
    return (uint16_t)(value / 0.1);
 800ede2:	a309      	add	r3, pc, #36	; (adr r3, 800ee08 <can2_charger_config_msg_set_current_limit_encode+0x30>)
 800ede4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800edec:	f7f1 fd20 	bl	8000830 <__aeabi_ddiv>
 800edf0:	4602      	mov	r2, r0
 800edf2:	460b      	mov	r3, r1
 800edf4:	4610      	mov	r0, r2
 800edf6:	4619      	mov	r1, r3
 800edf8:	f7f1 fec8 	bl	8000b8c <__aeabi_d2uiz>
 800edfc:	4603      	mov	r3, r0
 800edfe:	b29b      	uxth	r3, r3
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3708      	adds	r7, #8
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	9999999a 	.word	0x9999999a
 800ee0c:	3fb99999 	.word	0x3fb99999

0800ee10 <can2_charger_config_msg_set_current_limit_decode>:

double can2_charger_config_msg_set_current_limit_decode(uint16_t value)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	4603      	mov	r3, r0
 800ee18:	80fb      	strh	r3, [r7, #6]
    return ((double)value * 0.1);
 800ee1a:	88fb      	ldrh	r3, [r7, #6]
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7f1 fb63 	bl	80004e8 <__aeabi_ui2d>
 800ee22:	a309      	add	r3, pc, #36	; (adr r3, 800ee48 <can2_charger_config_msg_set_current_limit_decode+0x38>)
 800ee24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee28:	f7f1 fbd8 	bl	80005dc <__aeabi_dmul>
 800ee2c:	4602      	mov	r2, r0
 800ee2e:	460b      	mov	r3, r1
 800ee30:	ec43 2b17 	vmov	d7, r2, r3
}
 800ee34:	eeb0 0a47 	vmov.f32	s0, s14
 800ee38:	eef0 0a67 	vmov.f32	s1, s15
 800ee3c:	3708      	adds	r7, #8
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	f3af 8000 	nop.w
 800ee48:	9999999a 	.word	0x9999999a
 800ee4c:	3fb99999 	.word	0x3fb99999

0800ee50 <can2_charger_config_msg_set_power_limit_encode>:
{
    return (value <= 133u);
}

uint16_t can2_charger_config_msg_set_power_limit_encode(double value)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	ed87 0b00 	vstr	d0, [r7]
    return (uint16_t)(value);
 800ee5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ee5e:	f7f1 fe95 	bl	8000b8c <__aeabi_d2uiz>
 800ee62:	4603      	mov	r3, r0
 800ee64:	b29b      	uxth	r3, r3
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3708      	adds	r7, #8
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <can2_charger_config_msg_set_power_limit_decode>:

double can2_charger_config_msg_set_power_limit_decode(uint16_t value)
{
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b082      	sub	sp, #8
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	4603      	mov	r3, r0
 800ee76:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800ee78:	88fb      	ldrh	r3, [r7, #6]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7f1 fb34 	bl	80004e8 <__aeabi_ui2d>
 800ee80:	4602      	mov	r2, r0
 800ee82:	460b      	mov	r3, r1
 800ee84:	ec43 2b17 	vmov	d7, r2, r3
}
 800ee88:	eeb0 0a47 	vmov.f32	s0, s14
 800ee8c:	eef0 0a67 	vmov.f32	s1, s15
 800ee90:	3708      	adds	r7, #8
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <can2_charger_config_msg_set_enabled_encode>:
{
    return (value <= 6000u);
}

uint8_t can2_charger_config_msg_set_enabled_encode(double value)
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b082      	sub	sp, #8
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800eea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800eea4:	f7f1 fe72 	bl	8000b8c <__aeabi_d2uiz>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	b2db      	uxtb	r3, r3
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <can2_charger_config_msg_set_enabled_decode>:

double can2_charger_config_msg_set_enabled_decode(uint8_t value)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	4603      	mov	r3, r0
 800eebc:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800eebe:	79fb      	ldrb	r3, [r7, #7]
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7f1 fb11 	bl	80004e8 <__aeabi_ui2d>
 800eec6:	4602      	mov	r2, r0
 800eec8:	460b      	mov	r3, r1
 800eeca:	ec43 2b17 	vmov	d7, r2, r3
}
 800eece:	eeb0 0a47 	vmov.f32	s0, s14
 800eed2:	eef0 0a67 	vmov.f32	s1, s15
 800eed6:	3708      	adds	r7, #8
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <can2_charger_config_msg_set_time_out_encode>:
{
    return (value <= 1u);
}

uint8_t can2_charger_config_msg_set_time_out_encode(double value)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b082      	sub	sp, #8
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800eee6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800eeea:	f7f1 fe4f 	bl	8000b8c <__aeabi_d2uiz>
 800eeee:	4603      	mov	r3, r0
 800eef0:	b2db      	uxtb	r3, r3
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3708      	adds	r7, #8
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}

0800eefa <can2_charger_config_msg_set_time_out_decode>:

double can2_charger_config_msg_set_time_out_decode(uint8_t value)
{
 800eefa:	b580      	push	{r7, lr}
 800eefc:	b082      	sub	sp, #8
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	4603      	mov	r3, r0
 800ef02:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800ef04:	79fb      	ldrb	r3, [r7, #7]
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7f1 faee 	bl	80004e8 <__aeabi_ui2d>
 800ef0c:	4602      	mov	r2, r0
 800ef0e:	460b      	mov	r3, r1
 800ef10:	ec43 2b17 	vmov	d7, r2, r3
}
 800ef14:	eeb0 0a47 	vmov.f32	s0, s14
 800ef18:	eef0 0a67 	vmov.f32	s1, s15
 800ef1c:	3708      	adds	r7, #8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}

0800ef22 <can2_cc_status_unpack>:

int can2_cc_status_unpack(
    struct can2_cc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800ef22:	b580      	push	{r7, lr}
 800ef24:	b084      	sub	sp, #16
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	60f8      	str	r0, [r7, #12]
 800ef2a:	60b9      	str	r1, [r7, #8]
 800ef2c:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d102      	bne.n	800ef3a <can2_cc_status_unpack+0x18>
        return (-EINVAL);
 800ef34:	f06f 0315 	mvn.w	r3, #21
 800ef38:	e00b      	b.n	800ef52 <can2_cc_status_unpack+0x30>
    }

    dst_p->enable_ams_charging = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	2100      	movs	r1, #0
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7ff fc2a 	bl	800e79c <unpack_right_shift_u8>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	701a      	strb	r2, [r3, #0]

    return (0);
 800ef50:	2300      	movs	r3, #0
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3710      	adds	r7, #16
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}

0800ef5a <can2_cc_status_enable_ams_charging_decode>:
{
    return (uint8_t)(value);
}

double can2_cc_status_enable_ams_charging_decode(uint8_t value)
{
 800ef5a:	b580      	push	{r7, lr}
 800ef5c:	b082      	sub	sp, #8
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	4603      	mov	r3, r0
 800ef62:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800ef64:	79fb      	ldrb	r3, [r7, #7]
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7f1 fabe 	bl	80004e8 <__aeabi_ui2d>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	460b      	mov	r3, r1
 800ef70:	ec43 2b17 	vmov	d7, r2, r3
}
 800ef74:	eeb0 0a47 	vmov.f32	s0, s14
 800ef78:	eef0 0a67 	vmov.f32	s1, s15
 800ef7c:	3708      	adds	r7, #8
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}

0800ef82 <can2_ivt_msg_result_u3_unpack>:

int can2_ivt_msg_result_u3_unpack(
    struct can2_ivt_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800ef82:	b580      	push	{r7, lr}
 800ef84:	b086      	sub	sp, #24
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	60f8      	str	r0, [r7, #12]
 800ef8a:	60b9      	str	r1, [r7, #8]
 800ef8c:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_u3;

    if (size < 6u) {
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b05      	cmp	r3, #5
 800ef92:	d802      	bhi.n	800ef9a <can2_ivt_msg_result_u3_unpack+0x18>
        return (-EINVAL);
 800ef94:	f06f 0315 	mvn.w	r3, #21
 800ef98:	e077      	b.n	800f08a <can2_ivt_msg_result_u3_unpack+0x108>
    }

    dst_p->ivt_id_result_u3 = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	22ff      	movs	r2, #255	; 0xff
 800efa0:	2100      	movs	r1, #0
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7ff fbfa 	bl	800e79c <unpack_right_shift_u8>
 800efa8:	4603      	mov	r3, r0
 800efaa:	461a      	mov	r2, r3
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_u3_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	3301      	adds	r3, #1
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	2280      	movs	r2, #128	; 0x80
 800efb8:	2107      	movs	r1, #7
 800efba:	4618      	mov	r0, r3
 800efbc:	f7ff fbee 	bl	800e79c <unpack_right_shift_u8>
 800efc0:	4603      	mov	r3, r0
 800efc2:	461a      	mov	r2, r3
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_u3_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	3301      	adds	r3, #1
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	2240      	movs	r2, #64	; 0x40
 800efd0:	2106      	movs	r1, #6
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7ff fbe2 	bl	800e79c <unpack_right_shift_u8>
 800efd8:	4603      	mov	r3, r0
 800efda:	461a      	mov	r2, r3
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_u3_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	3301      	adds	r3, #1
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	2220      	movs	r2, #32
 800efe8:	2105      	movs	r1, #5
 800efea:	4618      	mov	r0, r3
 800efec:	f7ff fbd6 	bl	800e79c <unpack_right_shift_u8>
 800eff0:	4603      	mov	r3, r0
 800eff2:	461a      	mov	r2, r3
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_u3_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	3301      	adds	r3, #1
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	2210      	movs	r2, #16
 800f000:	2104      	movs	r1, #4
 800f002:	4618      	mov	r0, r3
 800f004:	f7ff fbca 	bl	800e79c <unpack_right_shift_u8>
 800f008:	4603      	mov	r3, r0
 800f00a:	461a      	mov	r2, r3
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_u3 = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	3301      	adds	r3, #1
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	220f      	movs	r2, #15
 800f018:	2100      	movs	r1, #0
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7ff fbbe 	bl	800e79c <unpack_right_shift_u8>
 800f020:	4603      	mov	r3, r0
 800f022:	461a      	mov	r2, r3
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	715a      	strb	r2, [r3, #5]
    ivt_result_u3 = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	3302      	adds	r3, #2
 800f02c:	781b      	ldrb	r3, [r3, #0]
 800f02e:	22ff      	movs	r2, #255	; 0xff
 800f030:	2118      	movs	r1, #24
 800f032:	4618      	mov	r0, r3
 800f034:	f7ff fb9b 	bl	800e76e <unpack_left_shift_u32>
 800f038:	6178      	str	r0, [r7, #20]
    ivt_result_u3 |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	3303      	adds	r3, #3
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	22ff      	movs	r2, #255	; 0xff
 800f042:	2110      	movs	r1, #16
 800f044:	4618      	mov	r0, r3
 800f046:	f7ff fb92 	bl	800e76e <unpack_left_shift_u32>
 800f04a:	4602      	mov	r2, r0
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	4313      	orrs	r3, r2
 800f050:	617b      	str	r3, [r7, #20]
    ivt_result_u3 |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	3304      	adds	r3, #4
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	22ff      	movs	r2, #255	; 0xff
 800f05a:	2108      	movs	r1, #8
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7ff fb86 	bl	800e76e <unpack_left_shift_u32>
 800f062:	4602      	mov	r2, r0
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	4313      	orrs	r3, r2
 800f068:	617b      	str	r3, [r7, #20]
    ivt_result_u3 |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	3305      	adds	r3, #5
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	22ff      	movs	r2, #255	; 0xff
 800f072:	2100      	movs	r1, #0
 800f074:	4618      	mov	r0, r3
 800f076:	f7ff fbc1 	bl	800e7fc <unpack_right_shift_u32>
 800f07a:	4602      	mov	r2, r0
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	4313      	orrs	r3, r2
 800f080:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_u3 = (int32_t)ivt_result_u3;
 800f082:	697a      	ldr	r2, [r7, #20]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	609a      	str	r2, [r3, #8]

    return (0);
 800f088:	2300      	movs	r3, #0
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3718      	adds	r7, #24
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}

0800f092 <can2_ivt_msg_result_u3_ivt_id_result_u3_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u3_ivt_id_result_u3_decode(uint8_t value)
{
 800f092:	b580      	push	{r7, lr}
 800f094:	b082      	sub	sp, #8
 800f096:	af00      	add	r7, sp, #0
 800f098:	4603      	mov	r3, r0
 800f09a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f09c:	79fb      	ldrb	r3, [r7, #7]
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7f1 fa22 	bl	80004e8 <__aeabi_ui2d>
 800f0a4:	4602      	mov	r2, r0
 800f0a6:	460b      	mov	r3, r1
 800f0a8:	ec43 2b17 	vmov	d7, r2, r3
}
 800f0ac:	eeb0 0a47 	vmov.f32	s0, s14
 800f0b0:	eef0 0a67 	vmov.f32	s1, s15
 800f0b4:	3708      	adds	r7, #8
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <can2_ivt_msg_result_u3_ivt_result_u3_system_error_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u3_ivt_result_u3_system_error_decode(uint8_t value)
{
 800f0ba:	b580      	push	{r7, lr}
 800f0bc:	b082      	sub	sp, #8
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f0c4:	79fb      	ldrb	r3, [r7, #7]
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7f1 fa0e 	bl	80004e8 <__aeabi_ui2d>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	ec43 2b17 	vmov	d7, r2, r3
}
 800f0d4:	eeb0 0a47 	vmov.f32	s0, s14
 800f0d8:	eef0 0a67 	vmov.f32	s1, s15
 800f0dc:	3708      	adds	r7, #8
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <can2_ivt_msg_result_u3_ivt_result_u3_measurement_error_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u3_ivt_result_u3_measurement_error_decode(uint8_t value)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b082      	sub	sp, #8
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f0ec:	79fb      	ldrb	r3, [r7, #7]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7f1 f9fa 	bl	80004e8 <__aeabi_ui2d>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	460b      	mov	r3, r1
 800f0f8:	ec43 2b17 	vmov	d7, r2, r3
}
 800f0fc:	eeb0 0a47 	vmov.f32	s0, s14
 800f100:	eef0 0a67 	vmov.f32	s1, s15
 800f104:	3708      	adds	r7, #8
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}

0800f10a <can2_ivt_msg_result_u3_ivt_result_u3_channel_error_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u3_ivt_result_u3_channel_error_decode(uint8_t value)
{
 800f10a:	b580      	push	{r7, lr}
 800f10c:	b082      	sub	sp, #8
 800f10e:	af00      	add	r7, sp, #0
 800f110:	4603      	mov	r3, r0
 800f112:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f114:	79fb      	ldrb	r3, [r7, #7]
 800f116:	4618      	mov	r0, r3
 800f118:	f7f1 f9e6 	bl	80004e8 <__aeabi_ui2d>
 800f11c:	4602      	mov	r2, r0
 800f11e:	460b      	mov	r3, r1
 800f120:	ec43 2b17 	vmov	d7, r2, r3
}
 800f124:	eeb0 0a47 	vmov.f32	s0, s14
 800f128:	eef0 0a67 	vmov.f32	s1, s15
 800f12c:	3708      	adds	r7, #8
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}

0800f132 <can2_ivt_msg_result_u3_ivt_result_u3_ocs_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u3_ivt_result_u3_ocs_decode(uint8_t value)
{
 800f132:	b580      	push	{r7, lr}
 800f134:	b082      	sub	sp, #8
 800f136:	af00      	add	r7, sp, #0
 800f138:	4603      	mov	r3, r0
 800f13a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f13c:	79fb      	ldrb	r3, [r7, #7]
 800f13e:	4618      	mov	r0, r3
 800f140:	f7f1 f9d2 	bl	80004e8 <__aeabi_ui2d>
 800f144:	4602      	mov	r2, r0
 800f146:	460b      	mov	r3, r1
 800f148:	ec43 2b17 	vmov	d7, r2, r3
}
 800f14c:	eeb0 0a47 	vmov.f32	s0, s14
 800f150:	eef0 0a67 	vmov.f32	s1, s15
 800f154:	3708      	adds	r7, #8
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}

0800f15a <can2_ivt_msg_result_u3_ivt_msg_count_result_u3_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u3_ivt_msg_count_result_u3_decode(uint8_t value)
{
 800f15a:	b580      	push	{r7, lr}
 800f15c:	b082      	sub	sp, #8
 800f15e:	af00      	add	r7, sp, #0
 800f160:	4603      	mov	r3, r0
 800f162:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f164:	79fb      	ldrb	r3, [r7, #7]
 800f166:	4618      	mov	r0, r3
 800f168:	f7f1 f9be 	bl	80004e8 <__aeabi_ui2d>
 800f16c:	4602      	mov	r2, r0
 800f16e:	460b      	mov	r3, r1
 800f170:	ec43 2b17 	vmov	d7, r2, r3
}
 800f174:	eeb0 0a47 	vmov.f32	s0, s14
 800f178:	eef0 0a67 	vmov.f32	s1, s15
 800f17c:	3708      	adds	r7, #8
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <can2_ivt_msg_result_u3_ivt_result_u3_decode>:
{
    return (int32_t)(value);
}

double can2_ivt_msg_result_u3_ivt_result_u3_decode(int32_t value)
{
 800f182:	b580      	push	{r7, lr}
 800f184:	b082      	sub	sp, #8
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
    return ((double)value);
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7f1 f9bc 	bl	8000508 <__aeabi_i2d>
 800f190:	4602      	mov	r2, r0
 800f192:	460b      	mov	r3, r1
 800f194:	ec43 2b17 	vmov	d7, r2, r3
}
 800f198:	eeb0 0a47 	vmov.f32	s0, s14
 800f19c:	eef0 0a67 	vmov.f32	s1, s15
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}

0800f1a6 <can2_ivt_msg_result_u2_unpack>:

int can2_ivt_msg_result_u2_unpack(
    struct can2_ivt_msg_result_u2_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800f1a6:	b580      	push	{r7, lr}
 800f1a8:	b086      	sub	sp, #24
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	60f8      	str	r0, [r7, #12]
 800f1ae:	60b9      	str	r1, [r7, #8]
 800f1b0:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_u2;

    if (size < 6u) {
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2b05      	cmp	r3, #5
 800f1b6:	d802      	bhi.n	800f1be <can2_ivt_msg_result_u2_unpack+0x18>
        return (-EINVAL);
 800f1b8:	f06f 0315 	mvn.w	r3, #21
 800f1bc:	e077      	b.n	800f2ae <can2_ivt_msg_result_u2_unpack+0x108>
    }

    dst_p->ivt_id_result_u2 = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	22ff      	movs	r2, #255	; 0xff
 800f1c4:	2100      	movs	r1, #0
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7ff fae8 	bl	800e79c <unpack_right_shift_u8>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_u2_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	2280      	movs	r2, #128	; 0x80
 800f1dc:	2107      	movs	r1, #7
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7ff fadc 	bl	800e79c <unpack_right_shift_u8>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_u2_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	2240      	movs	r2, #64	; 0x40
 800f1f4:	2106      	movs	r1, #6
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7ff fad0 	bl	800e79c <unpack_right_shift_u8>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	461a      	mov	r2, r3
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_u2_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	3301      	adds	r3, #1
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	2220      	movs	r2, #32
 800f20c:	2105      	movs	r1, #5
 800f20e:	4618      	mov	r0, r3
 800f210:	f7ff fac4 	bl	800e79c <unpack_right_shift_u8>
 800f214:	4603      	mov	r3, r0
 800f216:	461a      	mov	r2, r3
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_u2_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	3301      	adds	r3, #1
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	2210      	movs	r2, #16
 800f224:	2104      	movs	r1, #4
 800f226:	4618      	mov	r0, r3
 800f228:	f7ff fab8 	bl	800e79c <unpack_right_shift_u8>
 800f22c:	4603      	mov	r3, r0
 800f22e:	461a      	mov	r2, r3
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_u2 = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	3301      	adds	r3, #1
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	220f      	movs	r2, #15
 800f23c:	2100      	movs	r1, #0
 800f23e:	4618      	mov	r0, r3
 800f240:	f7ff faac 	bl	800e79c <unpack_right_shift_u8>
 800f244:	4603      	mov	r3, r0
 800f246:	461a      	mov	r2, r3
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	715a      	strb	r2, [r3, #5]
    ivt_result_u2 = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	3302      	adds	r3, #2
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	22ff      	movs	r2, #255	; 0xff
 800f254:	2118      	movs	r1, #24
 800f256:	4618      	mov	r0, r3
 800f258:	f7ff fa89 	bl	800e76e <unpack_left_shift_u32>
 800f25c:	6178      	str	r0, [r7, #20]
    ivt_result_u2 |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	3303      	adds	r3, #3
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	22ff      	movs	r2, #255	; 0xff
 800f266:	2110      	movs	r1, #16
 800f268:	4618      	mov	r0, r3
 800f26a:	f7ff fa80 	bl	800e76e <unpack_left_shift_u32>
 800f26e:	4602      	mov	r2, r0
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	4313      	orrs	r3, r2
 800f274:	617b      	str	r3, [r7, #20]
    ivt_result_u2 |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	3304      	adds	r3, #4
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	22ff      	movs	r2, #255	; 0xff
 800f27e:	2108      	movs	r1, #8
 800f280:	4618      	mov	r0, r3
 800f282:	f7ff fa74 	bl	800e76e <unpack_left_shift_u32>
 800f286:	4602      	mov	r2, r0
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	4313      	orrs	r3, r2
 800f28c:	617b      	str	r3, [r7, #20]
    ivt_result_u2 |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	3305      	adds	r3, #5
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	22ff      	movs	r2, #255	; 0xff
 800f296:	2100      	movs	r1, #0
 800f298:	4618      	mov	r0, r3
 800f29a:	f7ff faaf 	bl	800e7fc <unpack_right_shift_u32>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_u2 = (int32_t)ivt_result_u2;
 800f2a6:	697a      	ldr	r2, [r7, #20]
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	609a      	str	r2, [r3, #8]

    return (0);
 800f2ac:	2300      	movs	r3, #0
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3718      	adds	r7, #24
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}

0800f2b6 <can2_ivt_msg_result_u2_ivt_id_result_u2_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u2_ivt_id_result_u2_decode(uint8_t value)
{
 800f2b6:	b580      	push	{r7, lr}
 800f2b8:	b082      	sub	sp, #8
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	4603      	mov	r3, r0
 800f2be:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f2c0:	79fb      	ldrb	r3, [r7, #7]
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7f1 f910 	bl	80004e8 <__aeabi_ui2d>
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	ec43 2b17 	vmov	d7, r2, r3
}
 800f2d0:	eeb0 0a47 	vmov.f32	s0, s14
 800f2d4:	eef0 0a67 	vmov.f32	s1, s15
 800f2d8:	3708      	adds	r7, #8
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}

0800f2de <can2_ivt_msg_result_u2_ivt_result_u2_system_error_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u2_ivt_result_u2_system_error_decode(uint8_t value)
{
 800f2de:	b580      	push	{r7, lr}
 800f2e0:	b082      	sub	sp, #8
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f2e8:	79fb      	ldrb	r3, [r7, #7]
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7f1 f8fc 	bl	80004e8 <__aeabi_ui2d>
 800f2f0:	4602      	mov	r2, r0
 800f2f2:	460b      	mov	r3, r1
 800f2f4:	ec43 2b17 	vmov	d7, r2, r3
}
 800f2f8:	eeb0 0a47 	vmov.f32	s0, s14
 800f2fc:	eef0 0a67 	vmov.f32	s1, s15
 800f300:	3708      	adds	r7, #8
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}

0800f306 <can2_ivt_msg_result_u2_ivt_result_u2_measurement_error_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u2_ivt_result_u2_measurement_error_decode(uint8_t value)
{
 800f306:	b580      	push	{r7, lr}
 800f308:	b082      	sub	sp, #8
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	4603      	mov	r3, r0
 800f30e:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f310:	79fb      	ldrb	r3, [r7, #7]
 800f312:	4618      	mov	r0, r3
 800f314:	f7f1 f8e8 	bl	80004e8 <__aeabi_ui2d>
 800f318:	4602      	mov	r2, r0
 800f31a:	460b      	mov	r3, r1
 800f31c:	ec43 2b17 	vmov	d7, r2, r3
}
 800f320:	eeb0 0a47 	vmov.f32	s0, s14
 800f324:	eef0 0a67 	vmov.f32	s1, s15
 800f328:	3708      	adds	r7, #8
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}

0800f32e <can2_ivt_msg_result_u2_ivt_result_u2_channel_error_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u2_ivt_result_u2_channel_error_decode(uint8_t value)
{
 800f32e:	b580      	push	{r7, lr}
 800f330:	b082      	sub	sp, #8
 800f332:	af00      	add	r7, sp, #0
 800f334:	4603      	mov	r3, r0
 800f336:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f338:	79fb      	ldrb	r3, [r7, #7]
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7f1 f8d4 	bl	80004e8 <__aeabi_ui2d>
 800f340:	4602      	mov	r2, r0
 800f342:	460b      	mov	r3, r1
 800f344:	ec43 2b17 	vmov	d7, r2, r3
}
 800f348:	eeb0 0a47 	vmov.f32	s0, s14
 800f34c:	eef0 0a67 	vmov.f32	s1, s15
 800f350:	3708      	adds	r7, #8
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}

0800f356 <can2_ivt_msg_result_u2_ivt_result_u2_ocs_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u2_ivt_result_u2_ocs_decode(uint8_t value)
{
 800f356:	b580      	push	{r7, lr}
 800f358:	b082      	sub	sp, #8
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	4603      	mov	r3, r0
 800f35e:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f360:	79fb      	ldrb	r3, [r7, #7]
 800f362:	4618      	mov	r0, r3
 800f364:	f7f1 f8c0 	bl	80004e8 <__aeabi_ui2d>
 800f368:	4602      	mov	r2, r0
 800f36a:	460b      	mov	r3, r1
 800f36c:	ec43 2b17 	vmov	d7, r2, r3
}
 800f370:	eeb0 0a47 	vmov.f32	s0, s14
 800f374:	eef0 0a67 	vmov.f32	s1, s15
 800f378:	3708      	adds	r7, #8
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}

0800f37e <can2_ivt_msg_result_u2_ivt_msg_count_result_u2_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u2_ivt_msg_count_result_u2_decode(uint8_t value)
{
 800f37e:	b580      	push	{r7, lr}
 800f380:	b082      	sub	sp, #8
 800f382:	af00      	add	r7, sp, #0
 800f384:	4603      	mov	r3, r0
 800f386:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f388:	79fb      	ldrb	r3, [r7, #7]
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7f1 f8ac 	bl	80004e8 <__aeabi_ui2d>
 800f390:	4602      	mov	r2, r0
 800f392:	460b      	mov	r3, r1
 800f394:	ec43 2b17 	vmov	d7, r2, r3
}
 800f398:	eeb0 0a47 	vmov.f32	s0, s14
 800f39c:	eef0 0a67 	vmov.f32	s1, s15
 800f3a0:	3708      	adds	r7, #8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}

0800f3a6 <can2_ivt_msg_result_u2_ivt_result_u2_decode>:
{
    return (int32_t)(value);
}

double can2_ivt_msg_result_u2_ivt_result_u2_decode(int32_t value)
{
 800f3a6:	b580      	push	{r7, lr}
 800f3a8:	b082      	sub	sp, #8
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	6078      	str	r0, [r7, #4]
    return ((double)value);
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f7f1 f8aa 	bl	8000508 <__aeabi_i2d>
 800f3b4:	4602      	mov	r2, r0
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	ec43 2b17 	vmov	d7, r2, r3
}
 800f3bc:	eeb0 0a47 	vmov.f32	s0, s14
 800f3c0:	eef0 0a67 	vmov.f32	s1, s15
 800f3c4:	3708      	adds	r7, #8
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}

0800f3ca <can2_ivt_msg_result_u1_unpack>:

int can2_ivt_msg_result_u1_unpack(
    struct can2_ivt_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b086      	sub	sp, #24
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	60f8      	str	r0, [r7, #12]
 800f3d2:	60b9      	str	r1, [r7, #8]
 800f3d4:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_u1;

    if (size < 6u) {
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2b05      	cmp	r3, #5
 800f3da:	d802      	bhi.n	800f3e2 <can2_ivt_msg_result_u1_unpack+0x18>
        return (-EINVAL);
 800f3dc:	f06f 0315 	mvn.w	r3, #21
 800f3e0:	e077      	b.n	800f4d2 <can2_ivt_msg_result_u1_unpack+0x108>
    }

    dst_p->ivt_id_result_u1 = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	22ff      	movs	r2, #255	; 0xff
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7ff f9d6 	bl	800e79c <unpack_right_shift_u8>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_u1_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	2280      	movs	r2, #128	; 0x80
 800f400:	2107      	movs	r1, #7
 800f402:	4618      	mov	r0, r3
 800f404:	f7ff f9ca 	bl	800e79c <unpack_right_shift_u8>
 800f408:	4603      	mov	r3, r0
 800f40a:	461a      	mov	r2, r3
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_u1_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	3301      	adds	r3, #1
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	2240      	movs	r2, #64	; 0x40
 800f418:	2106      	movs	r1, #6
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7ff f9be 	bl	800e79c <unpack_right_shift_u8>
 800f420:	4603      	mov	r3, r0
 800f422:	461a      	mov	r2, r3
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_u1_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	3301      	adds	r3, #1
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	2220      	movs	r2, #32
 800f430:	2105      	movs	r1, #5
 800f432:	4618      	mov	r0, r3
 800f434:	f7ff f9b2 	bl	800e79c <unpack_right_shift_u8>
 800f438:	4603      	mov	r3, r0
 800f43a:	461a      	mov	r2, r3
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_u1_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	3301      	adds	r3, #1
 800f444:	781b      	ldrb	r3, [r3, #0]
 800f446:	2210      	movs	r2, #16
 800f448:	2104      	movs	r1, #4
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7ff f9a6 	bl	800e79c <unpack_right_shift_u8>
 800f450:	4603      	mov	r3, r0
 800f452:	461a      	mov	r2, r3
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_u1 = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	3301      	adds	r3, #1
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	220f      	movs	r2, #15
 800f460:	2100      	movs	r1, #0
 800f462:	4618      	mov	r0, r3
 800f464:	f7ff f99a 	bl	800e79c <unpack_right_shift_u8>
 800f468:	4603      	mov	r3, r0
 800f46a:	461a      	mov	r2, r3
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	715a      	strb	r2, [r3, #5]
    ivt_result_u1 = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	3302      	adds	r3, #2
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	22ff      	movs	r2, #255	; 0xff
 800f478:	2118      	movs	r1, #24
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7ff f977 	bl	800e76e <unpack_left_shift_u32>
 800f480:	6178      	str	r0, [r7, #20]
    ivt_result_u1 |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	3303      	adds	r3, #3
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	22ff      	movs	r2, #255	; 0xff
 800f48a:	2110      	movs	r1, #16
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7ff f96e 	bl	800e76e <unpack_left_shift_u32>
 800f492:	4602      	mov	r2, r0
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	4313      	orrs	r3, r2
 800f498:	617b      	str	r3, [r7, #20]
    ivt_result_u1 |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	3304      	adds	r3, #4
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	22ff      	movs	r2, #255	; 0xff
 800f4a2:	2108      	movs	r1, #8
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7ff f962 	bl	800e76e <unpack_left_shift_u32>
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	617b      	str	r3, [r7, #20]
    ivt_result_u1 |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	3305      	adds	r3, #5
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	22ff      	movs	r2, #255	; 0xff
 800f4ba:	2100      	movs	r1, #0
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7ff f99d 	bl	800e7fc <unpack_right_shift_u32>
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_u1 = (int32_t)ivt_result_u1;
 800f4ca:	697a      	ldr	r2, [r7, #20]
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	609a      	str	r2, [r3, #8]

    return (0);
 800f4d0:	2300      	movs	r3, #0
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3718      	adds	r7, #24
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}

0800f4da <can2_ivt_msg_result_u1_ivt_id_result_u1_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u1_ivt_id_result_u1_decode(uint8_t value)
{
 800f4da:	b580      	push	{r7, lr}
 800f4dc:	b082      	sub	sp, #8
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f4e4:	79fb      	ldrb	r3, [r7, #7]
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7f0 fffe 	bl	80004e8 <__aeabi_ui2d>
 800f4ec:	4602      	mov	r2, r0
 800f4ee:	460b      	mov	r3, r1
 800f4f0:	ec43 2b17 	vmov	d7, r2, r3
}
 800f4f4:	eeb0 0a47 	vmov.f32	s0, s14
 800f4f8:	eef0 0a67 	vmov.f32	s1, s15
 800f4fc:	3708      	adds	r7, #8
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}

0800f502 <can2_ivt_msg_result_u1_ivt_result_u1_system_error_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u1_ivt_result_u1_system_error_decode(uint8_t value)
{
 800f502:	b580      	push	{r7, lr}
 800f504:	b082      	sub	sp, #8
 800f506:	af00      	add	r7, sp, #0
 800f508:	4603      	mov	r3, r0
 800f50a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f50c:	79fb      	ldrb	r3, [r7, #7]
 800f50e:	4618      	mov	r0, r3
 800f510:	f7f0 ffea 	bl	80004e8 <__aeabi_ui2d>
 800f514:	4602      	mov	r2, r0
 800f516:	460b      	mov	r3, r1
 800f518:	ec43 2b17 	vmov	d7, r2, r3
}
 800f51c:	eeb0 0a47 	vmov.f32	s0, s14
 800f520:	eef0 0a67 	vmov.f32	s1, s15
 800f524:	3708      	adds	r7, #8
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}

0800f52a <can2_ivt_msg_result_u1_ivt_result_u1_measurement_error_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u1_ivt_result_u1_measurement_error_decode(uint8_t value)
{
 800f52a:	b580      	push	{r7, lr}
 800f52c:	b082      	sub	sp, #8
 800f52e:	af00      	add	r7, sp, #0
 800f530:	4603      	mov	r3, r0
 800f532:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f534:	79fb      	ldrb	r3, [r7, #7]
 800f536:	4618      	mov	r0, r3
 800f538:	f7f0 ffd6 	bl	80004e8 <__aeabi_ui2d>
 800f53c:	4602      	mov	r2, r0
 800f53e:	460b      	mov	r3, r1
 800f540:	ec43 2b17 	vmov	d7, r2, r3
}
 800f544:	eeb0 0a47 	vmov.f32	s0, s14
 800f548:	eef0 0a67 	vmov.f32	s1, s15
 800f54c:	3708      	adds	r7, #8
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <can2_ivt_msg_result_u1_ivt_result_u1_channel_error_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u1_ivt_result_u1_channel_error_decode(uint8_t value)
{
 800f552:	b580      	push	{r7, lr}
 800f554:	b082      	sub	sp, #8
 800f556:	af00      	add	r7, sp, #0
 800f558:	4603      	mov	r3, r0
 800f55a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f55c:	79fb      	ldrb	r3, [r7, #7]
 800f55e:	4618      	mov	r0, r3
 800f560:	f7f0 ffc2 	bl	80004e8 <__aeabi_ui2d>
 800f564:	4602      	mov	r2, r0
 800f566:	460b      	mov	r3, r1
 800f568:	ec43 2b17 	vmov	d7, r2, r3
}
 800f56c:	eeb0 0a47 	vmov.f32	s0, s14
 800f570:	eef0 0a67 	vmov.f32	s1, s15
 800f574:	3708      	adds	r7, #8
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}

0800f57a <can2_ivt_msg_result_u1_ivt_result_u1_ocs_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u1_ivt_result_u1_ocs_decode(uint8_t value)
{
 800f57a:	b580      	push	{r7, lr}
 800f57c:	b082      	sub	sp, #8
 800f57e:	af00      	add	r7, sp, #0
 800f580:	4603      	mov	r3, r0
 800f582:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f584:	79fb      	ldrb	r3, [r7, #7]
 800f586:	4618      	mov	r0, r3
 800f588:	f7f0 ffae 	bl	80004e8 <__aeabi_ui2d>
 800f58c:	4602      	mov	r2, r0
 800f58e:	460b      	mov	r3, r1
 800f590:	ec43 2b17 	vmov	d7, r2, r3
}
 800f594:	eeb0 0a47 	vmov.f32	s0, s14
 800f598:	eef0 0a67 	vmov.f32	s1, s15
 800f59c:	3708      	adds	r7, #8
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <can2_ivt_msg_result_u1_ivt_msg_count_result_u1_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_u1_ivt_msg_count_result_u1_decode(uint8_t value)
{
 800f5a2:	b580      	push	{r7, lr}
 800f5a4:	b082      	sub	sp, #8
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f5ac:	79fb      	ldrb	r3, [r7, #7]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7f0 ff9a 	bl	80004e8 <__aeabi_ui2d>
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	ec43 2b17 	vmov	d7, r2, r3
}
 800f5bc:	eeb0 0a47 	vmov.f32	s0, s14
 800f5c0:	eef0 0a67 	vmov.f32	s1, s15
 800f5c4:	3708      	adds	r7, #8
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}

0800f5ca <can2_ivt_msg_result_u1_ivt_result_u1_decode>:
{
    return (int32_t)(value);
}

double can2_ivt_msg_result_u1_ivt_result_u1_decode(int32_t value)
{
 800f5ca:	b580      	push	{r7, lr}
 800f5cc:	b082      	sub	sp, #8
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	6078      	str	r0, [r7, #4]
    return ((double)value);
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f7f0 ff98 	bl	8000508 <__aeabi_i2d>
 800f5d8:	4602      	mov	r2, r0
 800f5da:	460b      	mov	r3, r1
 800f5dc:	ec43 2b17 	vmov	d7, r2, r3
}
 800f5e0:	eeb0 0a47 	vmov.f32	s0, s14
 800f5e4:	eef0 0a67 	vmov.f32	s1, s15
 800f5e8:	3708      	adds	r7, #8
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}

0800f5ee <can2_ivt_msg_result_i_unpack>:

int can2_ivt_msg_result_i_unpack(
    struct can2_ivt_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800f5ee:	b580      	push	{r7, lr}
 800f5f0:	b086      	sub	sp, #24
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	60f8      	str	r0, [r7, #12]
 800f5f6:	60b9      	str	r1, [r7, #8]
 800f5f8:	607a      	str	r2, [r7, #4]
    uint32_t ivt_result_i;

    if (size < 6u) {
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2b05      	cmp	r3, #5
 800f5fe:	d802      	bhi.n	800f606 <can2_ivt_msg_result_i_unpack+0x18>
        return (-EINVAL);
 800f600:	f06f 0315 	mvn.w	r3, #21
 800f604:	e077      	b.n	800f6f6 <can2_ivt_msg_result_i_unpack+0x108>
    }

    dst_p->ivt_id_result_i = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	22ff      	movs	r2, #255	; 0xff
 800f60c:	2100      	movs	r1, #0
 800f60e:	4618      	mov	r0, r3
 800f610:	f7ff f8c4 	bl	800e79c <unpack_right_shift_u8>
 800f614:	4603      	mov	r3, r0
 800f616:	461a      	mov	r2, r3
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	701a      	strb	r2, [r3, #0]
    dst_p->ivt_result_i_system_error = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	3301      	adds	r3, #1
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	2280      	movs	r2, #128	; 0x80
 800f624:	2107      	movs	r1, #7
 800f626:	4618      	mov	r0, r3
 800f628:	f7ff f8b8 	bl	800e79c <unpack_right_shift_u8>
 800f62c:	4603      	mov	r3, r0
 800f62e:	461a      	mov	r2, r3
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	705a      	strb	r2, [r3, #1]
    dst_p->ivt_result_i_measurement_error = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	3301      	adds	r3, #1
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	2240      	movs	r2, #64	; 0x40
 800f63c:	2106      	movs	r1, #6
 800f63e:	4618      	mov	r0, r3
 800f640:	f7ff f8ac 	bl	800e79c <unpack_right_shift_u8>
 800f644:	4603      	mov	r3, r0
 800f646:	461a      	mov	r2, r3
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	709a      	strb	r2, [r3, #2]
    dst_p->ivt_result_i_channel_error = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	3301      	adds	r3, #1
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	2220      	movs	r2, #32
 800f654:	2105      	movs	r1, #5
 800f656:	4618      	mov	r0, r3
 800f658:	f7ff f8a0 	bl	800e79c <unpack_right_shift_u8>
 800f65c:	4603      	mov	r3, r0
 800f65e:	461a      	mov	r2, r3
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	70da      	strb	r2, [r3, #3]
    dst_p->ivt_result_i_ocs = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	3301      	adds	r3, #1
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	2210      	movs	r2, #16
 800f66c:	2104      	movs	r1, #4
 800f66e:	4618      	mov	r0, r3
 800f670:	f7ff f894 	bl	800e79c <unpack_right_shift_u8>
 800f674:	4603      	mov	r3, r0
 800f676:	461a      	mov	r2, r3
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	711a      	strb	r2, [r3, #4]
    dst_p->ivt_msg_count_result_i = unpack_right_shift_u8(src_p[1], 0u, 0x0fu);
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	3301      	adds	r3, #1
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	220f      	movs	r2, #15
 800f684:	2100      	movs	r1, #0
 800f686:	4618      	mov	r0, r3
 800f688:	f7ff f888 	bl	800e79c <unpack_right_shift_u8>
 800f68c:	4603      	mov	r3, r0
 800f68e:	461a      	mov	r2, r3
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	715a      	strb	r2, [r3, #5]
    ivt_result_i = unpack_left_shift_u32(src_p[2], 24u, 0xffu);
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	3302      	adds	r3, #2
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	22ff      	movs	r2, #255	; 0xff
 800f69c:	2118      	movs	r1, #24
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7ff f865 	bl	800e76e <unpack_left_shift_u32>
 800f6a4:	6178      	str	r0, [r7, #20]
    ivt_result_i |= unpack_left_shift_u32(src_p[3], 16u, 0xffu);
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	3303      	adds	r3, #3
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	22ff      	movs	r2, #255	; 0xff
 800f6ae:	2110      	movs	r1, #16
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7ff f85c 	bl	800e76e <unpack_left_shift_u32>
 800f6b6:	4602      	mov	r2, r0
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	4313      	orrs	r3, r2
 800f6bc:	617b      	str	r3, [r7, #20]
    ivt_result_i |= unpack_left_shift_u32(src_p[4], 8u, 0xffu);
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	3304      	adds	r3, #4
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	22ff      	movs	r2, #255	; 0xff
 800f6c6:	2108      	movs	r1, #8
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7ff f850 	bl	800e76e <unpack_left_shift_u32>
 800f6ce:	4602      	mov	r2, r0
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	617b      	str	r3, [r7, #20]
    ivt_result_i |= unpack_right_shift_u32(src_p[5], 0u, 0xffu);
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	3305      	adds	r3, #5
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	22ff      	movs	r2, #255	; 0xff
 800f6de:	2100      	movs	r1, #0
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7ff f88b 	bl	800e7fc <unpack_right_shift_u32>
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	617b      	str	r3, [r7, #20]
    dst_p->ivt_result_i = (int32_t)ivt_result_i;
 800f6ee:	697a      	ldr	r2, [r7, #20]
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	609a      	str	r2, [r3, #8]

    return (0);
 800f6f4:	2300      	movs	r3, #0
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3718      	adds	r7, #24
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}

0800f6fe <can2_ivt_msg_result_i_ivt_id_result_i_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_i_ivt_id_result_i_decode(uint8_t value)
{
 800f6fe:	b580      	push	{r7, lr}
 800f700:	b082      	sub	sp, #8
 800f702:	af00      	add	r7, sp, #0
 800f704:	4603      	mov	r3, r0
 800f706:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f708:	79fb      	ldrb	r3, [r7, #7]
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7f0 feec 	bl	80004e8 <__aeabi_ui2d>
 800f710:	4602      	mov	r2, r0
 800f712:	460b      	mov	r3, r1
 800f714:	ec43 2b17 	vmov	d7, r2, r3
}
 800f718:	eeb0 0a47 	vmov.f32	s0, s14
 800f71c:	eef0 0a67 	vmov.f32	s1, s15
 800f720:	3708      	adds	r7, #8
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}

0800f726 <can2_ivt_msg_result_i_ivt_result_i_system_error_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_i_ivt_result_i_system_error_decode(uint8_t value)
{
 800f726:	b580      	push	{r7, lr}
 800f728:	b082      	sub	sp, #8
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	4603      	mov	r3, r0
 800f72e:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f730:	79fb      	ldrb	r3, [r7, #7]
 800f732:	4618      	mov	r0, r3
 800f734:	f7f0 fed8 	bl	80004e8 <__aeabi_ui2d>
 800f738:	4602      	mov	r2, r0
 800f73a:	460b      	mov	r3, r1
 800f73c:	ec43 2b17 	vmov	d7, r2, r3
}
 800f740:	eeb0 0a47 	vmov.f32	s0, s14
 800f744:	eef0 0a67 	vmov.f32	s1, s15
 800f748:	3708      	adds	r7, #8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}

0800f74e <can2_ivt_msg_result_i_ivt_result_i_measurement_error_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_i_ivt_result_i_measurement_error_decode(uint8_t value)
{
 800f74e:	b580      	push	{r7, lr}
 800f750:	b082      	sub	sp, #8
 800f752:	af00      	add	r7, sp, #0
 800f754:	4603      	mov	r3, r0
 800f756:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f758:	79fb      	ldrb	r3, [r7, #7]
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7f0 fec4 	bl	80004e8 <__aeabi_ui2d>
 800f760:	4602      	mov	r2, r0
 800f762:	460b      	mov	r3, r1
 800f764:	ec43 2b17 	vmov	d7, r2, r3
}
 800f768:	eeb0 0a47 	vmov.f32	s0, s14
 800f76c:	eef0 0a67 	vmov.f32	s1, s15
 800f770:	3708      	adds	r7, #8
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}

0800f776 <can2_ivt_msg_result_i_ivt_result_i_channel_error_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_i_ivt_result_i_channel_error_decode(uint8_t value)
{
 800f776:	b580      	push	{r7, lr}
 800f778:	b082      	sub	sp, #8
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	4603      	mov	r3, r0
 800f77e:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f780:	79fb      	ldrb	r3, [r7, #7]
 800f782:	4618      	mov	r0, r3
 800f784:	f7f0 feb0 	bl	80004e8 <__aeabi_ui2d>
 800f788:	4602      	mov	r2, r0
 800f78a:	460b      	mov	r3, r1
 800f78c:	ec43 2b17 	vmov	d7, r2, r3
}
 800f790:	eeb0 0a47 	vmov.f32	s0, s14
 800f794:	eef0 0a67 	vmov.f32	s1, s15
 800f798:	3708      	adds	r7, #8
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <can2_ivt_msg_result_i_ivt_result_i_ocs_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_i_ivt_result_i_ocs_decode(uint8_t value)
{
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b082      	sub	sp, #8
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f7a8:	79fb      	ldrb	r3, [r7, #7]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7f0 fe9c 	bl	80004e8 <__aeabi_ui2d>
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	ec43 2b17 	vmov	d7, r2, r3
}
 800f7b8:	eeb0 0a47 	vmov.f32	s0, s14
 800f7bc:	eef0 0a67 	vmov.f32	s1, s15
 800f7c0:	3708      	adds	r7, #8
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <can2_ivt_msg_result_i_ivt_msg_count_result_i_decode>:
{
    return (uint8_t)(value);
}

double can2_ivt_msg_result_i_ivt_msg_count_result_i_decode(uint8_t value)
{
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b082      	sub	sp, #8
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f7d0:	79fb      	ldrb	r3, [r7, #7]
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7f0 fe88 	bl	80004e8 <__aeabi_ui2d>
 800f7d8:	4602      	mov	r2, r0
 800f7da:	460b      	mov	r3, r1
 800f7dc:	ec43 2b17 	vmov	d7, r2, r3
}
 800f7e0:	eeb0 0a47 	vmov.f32	s0, s14
 800f7e4:	eef0 0a67 	vmov.f32	s1, s15
 800f7e8:	3708      	adds	r7, #8
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}

0800f7ee <can2_ivt_msg_result_i_ivt_result_i_decode>:
{
    return (int32_t)(value);
}

double can2_ivt_msg_result_i_ivt_result_i_decode(int32_t value)
{
 800f7ee:	b580      	push	{r7, lr}
 800f7f0:	b082      	sub	sp, #8
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
    return ((double)value);
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f7f0 fe86 	bl	8000508 <__aeabi_i2d>
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	460b      	mov	r3, r1
 800f800:	ec43 2b17 	vmov	d7, r2, r3
}
 800f804:	eeb0 0a47 	vmov.f32	s0, s14
 800f808:	eef0 0a67 	vmov.f32	s1, s15
 800f80c:	3708      	adds	r7, #8
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}
	...

0800f814 <can1_ams_cell_voltages_array_raise>:
static uint8_t can2_cc_status_flag = 0;

static CAN_HandleTypeDef* _hcan1;
static CAN_HandleTypeDef* _hcan2;

static void can1_ams_cell_voltages_array_raise(uint16_t _index) {
 800f814:	b480      	push	{r7}
 800f816:	b087      	sub	sp, #28
 800f818:	af00      	add	r7, sp, #0
 800f81a:	4603      	mov	r3, r0
 800f81c:	80fb      	strh	r3, [r7, #6]
   static uint8_t array[1 +  24 / 8];
   static uint8_t count = 0;
   uint8_t index;

   switch(_index) {
 800f81e:	88fb      	ldrh	r3, [r7, #6]
 800f820:	2b17      	cmp	r3, #23
 800f822:	f200 80c2 	bhi.w	800f9aa <can1_ams_cell_voltages_array_raise+0x196>
 800f826:	a201      	add	r2, pc, #4	; (adr r2, 800f82c <can1_ams_cell_voltages_array_raise+0x18>)
 800f828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f82c:	0800f88d 	.word	0x0800f88d
 800f830:	0800f893 	.word	0x0800f893
 800f834:	0800f899 	.word	0x0800f899
 800f838:	0800f89f 	.word	0x0800f89f
 800f83c:	0800f8a5 	.word	0x0800f8a5
 800f840:	0800f8ab 	.word	0x0800f8ab
 800f844:	0800f8b1 	.word	0x0800f8b1
 800f848:	0800f8b7 	.word	0x0800f8b7
 800f84c:	0800f8bd 	.word	0x0800f8bd
 800f850:	0800f8c3 	.word	0x0800f8c3
 800f854:	0800f8c9 	.word	0x0800f8c9
 800f858:	0800f8cf 	.word	0x0800f8cf
 800f85c:	0800f8d5 	.word	0x0800f8d5
 800f860:	0800f8db 	.word	0x0800f8db
 800f864:	0800f8e1 	.word	0x0800f8e1
 800f868:	0800f8e7 	.word	0x0800f8e7
 800f86c:	0800f8ed 	.word	0x0800f8ed
 800f870:	0800f8f3 	.word	0x0800f8f3
 800f874:	0800f8f9 	.word	0x0800f8f9
 800f878:	0800f8ff 	.word	0x0800f8ff
 800f87c:	0800f905 	.word	0x0800f905
 800f880:	0800f90b 	.word	0x0800f90b
 800f884:	0800f911 	.word	0x0800f911
 800f888:	0800f917 	.word	0x0800f917
       case 0: index = 0; break;
 800f88c:	2300      	movs	r3, #0
 800f88e:	75fb      	strb	r3, [r7, #23]
 800f890:	e044      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 1: index = 1; break;
 800f892:	2301      	movs	r3, #1
 800f894:	75fb      	strb	r3, [r7, #23]
 800f896:	e041      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 2: index = 2; break;
 800f898:	2302      	movs	r3, #2
 800f89a:	75fb      	strb	r3, [r7, #23]
 800f89c:	e03e      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 3: index = 3; break;
 800f89e:	2303      	movs	r3, #3
 800f8a0:	75fb      	strb	r3, [r7, #23]
 800f8a2:	e03b      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 4: index = 4; break;
 800f8a4:	2304      	movs	r3, #4
 800f8a6:	75fb      	strb	r3, [r7, #23]
 800f8a8:	e038      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 5: index = 5; break;
 800f8aa:	2305      	movs	r3, #5
 800f8ac:	75fb      	strb	r3, [r7, #23]
 800f8ae:	e035      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 6: index = 6; break;
 800f8b0:	2306      	movs	r3, #6
 800f8b2:	75fb      	strb	r3, [r7, #23]
 800f8b4:	e032      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 7: index = 7; break;
 800f8b6:	2307      	movs	r3, #7
 800f8b8:	75fb      	strb	r3, [r7, #23]
 800f8ba:	e02f      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 8: index = 8; break;
 800f8bc:	2308      	movs	r3, #8
 800f8be:	75fb      	strb	r3, [r7, #23]
 800f8c0:	e02c      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 9: index = 9; break;
 800f8c2:	2309      	movs	r3, #9
 800f8c4:	75fb      	strb	r3, [r7, #23]
 800f8c6:	e029      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 10: index = 10; break;
 800f8c8:	230a      	movs	r3, #10
 800f8ca:	75fb      	strb	r3, [r7, #23]
 800f8cc:	e026      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 11: index = 11; break;
 800f8ce:	230b      	movs	r3, #11
 800f8d0:	75fb      	strb	r3, [r7, #23]
 800f8d2:	e023      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 12: index = 12; break;
 800f8d4:	230c      	movs	r3, #12
 800f8d6:	75fb      	strb	r3, [r7, #23]
 800f8d8:	e020      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 13: index = 13; break;
 800f8da:	230d      	movs	r3, #13
 800f8dc:	75fb      	strb	r3, [r7, #23]
 800f8de:	e01d      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 14: index = 14; break;
 800f8e0:	230e      	movs	r3, #14
 800f8e2:	75fb      	strb	r3, [r7, #23]
 800f8e4:	e01a      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 15: index = 15; break;
 800f8e6:	230f      	movs	r3, #15
 800f8e8:	75fb      	strb	r3, [r7, #23]
 800f8ea:	e017      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 16: index = 16; break;
 800f8ec:	2310      	movs	r3, #16
 800f8ee:	75fb      	strb	r3, [r7, #23]
 800f8f0:	e014      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 17: index = 17; break;
 800f8f2:	2311      	movs	r3, #17
 800f8f4:	75fb      	strb	r3, [r7, #23]
 800f8f6:	e011      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 18: index = 18; break;
 800f8f8:	2312      	movs	r3, #18
 800f8fa:	75fb      	strb	r3, [r7, #23]
 800f8fc:	e00e      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 19: index = 19; break;
 800f8fe:	2313      	movs	r3, #19
 800f900:	75fb      	strb	r3, [r7, #23]
 800f902:	e00b      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 20: index = 20; break;
 800f904:	2314      	movs	r3, #20
 800f906:	75fb      	strb	r3, [r7, #23]
 800f908:	e008      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 21: index = 21; break;
 800f90a:	2315      	movs	r3, #21
 800f90c:	75fb      	strb	r3, [r7, #23]
 800f90e:	e005      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 22: index = 22; break;
 800f910:	2316      	movs	r3, #22
 800f912:	75fb      	strb	r3, [r7, #23]
 800f914:	e002      	b.n	800f91c <can1_ams_cell_voltages_array_raise+0x108>
       case 23: index = 23; break;
 800f916:	2317      	movs	r3, #23
 800f918:	75fb      	strb	r3, [r7, #23]
 800f91a:	bf00      	nop
       default: return;
   }

    if(index < 24) {
 800f91c:	7dfb      	ldrb	r3, [r7, #23]
 800f91e:	2b17      	cmp	r3, #23
 800f920:	d844      	bhi.n	800f9ac <can1_ams_cell_voltages_array_raise+0x198>
        uint8_t div = index / 8;
 800f922:	7dfb      	ldrb	r3, [r7, #23]
 800f924:	08db      	lsrs	r3, r3, #3
 800f926:	73fb      	strb	r3, [r7, #15]
        uint8_t rem = index % 8;
 800f928:	7dfb      	ldrb	r3, [r7, #23]
 800f92a:	f003 0307 	and.w	r3, r3, #7
 800f92e:	73bb      	strb	r3, [r7, #14]
        uint8_t flag = (1 << rem);
 800f930:	7bbb      	ldrb	r3, [r7, #14]
 800f932:	2201      	movs	r2, #1
 800f934:	fa02 f303 	lsl.w	r3, r2, r3
 800f938:	737b      	strb	r3, [r7, #13]
        
        if(!(array[div] & flag)) {
 800f93a:	7bfb      	ldrb	r3, [r7, #15]
 800f93c:	4a1e      	ldr	r2, [pc, #120]	; (800f9b8 <can1_ams_cell_voltages_array_raise+0x1a4>)
 800f93e:	5cd2      	ldrb	r2, [r2, r3]
 800f940:	7b7b      	ldrb	r3, [r7, #13]
 800f942:	4013      	ands	r3, r2
 800f944:	b2db      	uxtb	r3, r3
 800f946:	2b00      	cmp	r3, #0
 800f948:	d130      	bne.n	800f9ac <can1_ams_cell_voltages_array_raise+0x198>
            array[div] |= flag;
 800f94a:	7bfb      	ldrb	r3, [r7, #15]
 800f94c:	4a1a      	ldr	r2, [pc, #104]	; (800f9b8 <can1_ams_cell_voltages_array_raise+0x1a4>)
 800f94e:	5cd1      	ldrb	r1, [r2, r3]
 800f950:	7bfb      	ldrb	r3, [r7, #15]
 800f952:	7b7a      	ldrb	r2, [r7, #13]
 800f954:	430a      	orrs	r2, r1
 800f956:	b2d1      	uxtb	r1, r2
 800f958:	4a17      	ldr	r2, [pc, #92]	; (800f9b8 <can1_ams_cell_voltages_array_raise+0x1a4>)
 800f95a:	54d1      	strb	r1, [r2, r3]
            count = (count + 1) % 24;
 800f95c:	4b17      	ldr	r3, [pc, #92]	; (800f9bc <can1_ams_cell_voltages_array_raise+0x1a8>)
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	1c5a      	adds	r2, r3, #1
 800f962:	4b17      	ldr	r3, [pc, #92]	; (800f9c0 <can1_ams_cell_voltages_array_raise+0x1ac>)
 800f964:	fb83 1302 	smull	r1, r3, r3, r2
 800f968:	1099      	asrs	r1, r3, #2
 800f96a:	17d3      	asrs	r3, r2, #31
 800f96c:	1ac9      	subs	r1, r1, r3
 800f96e:	460b      	mov	r3, r1
 800f970:	005b      	lsls	r3, r3, #1
 800f972:	440b      	add	r3, r1
 800f974:	00db      	lsls	r3, r3, #3
 800f976:	1ad1      	subs	r1, r2, r3
 800f978:	b2ca      	uxtb	r2, r1
 800f97a:	4b10      	ldr	r3, [pc, #64]	; (800f9bc <can1_ams_cell_voltages_array_raise+0x1a8>)
 800f97c:	701a      	strb	r2, [r3, #0]

            if(count == 0) {
 800f97e:	4b0f      	ldr	r3, [pc, #60]	; (800f9bc <can1_ams_cell_voltages_array_raise+0x1a8>)
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d112      	bne.n	800f9ac <can1_ams_cell_voltages_array_raise+0x198>
                for(int i = 0; i < (1 + 24 / 8); i++) {
 800f986:	2300      	movs	r3, #0
 800f988:	613b      	str	r3, [r7, #16]
 800f98a:	e007      	b.n	800f99c <can1_ams_cell_voltages_array_raise+0x188>
                    array[i] = 0;
 800f98c:	4a0a      	ldr	r2, [pc, #40]	; (800f9b8 <can1_ams_cell_voltages_array_raise+0x1a4>)
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	4413      	add	r3, r2
 800f992:	2200      	movs	r2, #0
 800f994:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < (1 + 24 / 8); i++) {
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	3301      	adds	r3, #1
 800f99a:	613b      	str	r3, [r7, #16]
 800f99c:	693b      	ldr	r3, [r7, #16]
 800f99e:	2b03      	cmp	r3, #3
 800f9a0:	ddf4      	ble.n	800f98c <can1_ams_cell_voltages_array_raise+0x178>
                }
                can1_ams_cell_voltages_flag = 1;
 800f9a2:	4b08      	ldr	r3, [pc, #32]	; (800f9c4 <can1_ams_cell_voltages_array_raise+0x1b0>)
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	701a      	strb	r2, [r3, #0]
 800f9a8:	e000      	b.n	800f9ac <can1_ams_cell_voltages_array_raise+0x198>
       default: return;
 800f9aa:	bf00      	nop
            }
        }
    }
}
 800f9ac:	371c      	adds	r7, #28
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr
 800f9b6:	bf00      	nop
 800f9b8:	20000698 	.word	0x20000698
 800f9bc:	2000069c 	.word	0x2000069c
 800f9c0:	2aaaaaab 	.word	0x2aaaaaab
 800f9c4:	20000685 	.word	0x20000685

0800f9c8 <can1_ams_cell_temperatures_array_raise>:
static void can1_ams_cell_temperatures_array_raise(uint16_t _index) {
 800f9c8:	b480      	push	{r7}
 800f9ca:	b087      	sub	sp, #28
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	80fb      	strh	r3, [r7, #6]
   static uint8_t array[1 +  12 / 8];
   static uint8_t count = 0;
   uint8_t index;

   switch(_index) {
 800f9d2:	88fb      	ldrh	r3, [r7, #6]
 800f9d4:	2b0b      	cmp	r3, #11
 800f9d6:	f200 8086 	bhi.w	800fae6 <can1_ams_cell_temperatures_array_raise+0x11e>
 800f9da:	a201      	add	r2, pc, #4	; (adr r2, 800f9e0 <can1_ams_cell_temperatures_array_raise+0x18>)
 800f9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e0:	0800fa11 	.word	0x0800fa11
 800f9e4:	0800fa17 	.word	0x0800fa17
 800f9e8:	0800fa1d 	.word	0x0800fa1d
 800f9ec:	0800fa23 	.word	0x0800fa23
 800f9f0:	0800fa29 	.word	0x0800fa29
 800f9f4:	0800fa2f 	.word	0x0800fa2f
 800f9f8:	0800fa35 	.word	0x0800fa35
 800f9fc:	0800fa3b 	.word	0x0800fa3b
 800fa00:	0800fa41 	.word	0x0800fa41
 800fa04:	0800fa47 	.word	0x0800fa47
 800fa08:	0800fa4d 	.word	0x0800fa4d
 800fa0c:	0800fa53 	.word	0x0800fa53
       case 0: index = 0; break;
 800fa10:	2300      	movs	r3, #0
 800fa12:	75fb      	strb	r3, [r7, #23]
 800fa14:	e020      	b.n	800fa58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 1: index = 1; break;
 800fa16:	2301      	movs	r3, #1
 800fa18:	75fb      	strb	r3, [r7, #23]
 800fa1a:	e01d      	b.n	800fa58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 2: index = 2; break;
 800fa1c:	2302      	movs	r3, #2
 800fa1e:	75fb      	strb	r3, [r7, #23]
 800fa20:	e01a      	b.n	800fa58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 3: index = 3; break;
 800fa22:	2303      	movs	r3, #3
 800fa24:	75fb      	strb	r3, [r7, #23]
 800fa26:	e017      	b.n	800fa58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 4: index = 4; break;
 800fa28:	2304      	movs	r3, #4
 800fa2a:	75fb      	strb	r3, [r7, #23]
 800fa2c:	e014      	b.n	800fa58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 5: index = 5; break;
 800fa2e:	2305      	movs	r3, #5
 800fa30:	75fb      	strb	r3, [r7, #23]
 800fa32:	e011      	b.n	800fa58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 6: index = 6; break;
 800fa34:	2306      	movs	r3, #6
 800fa36:	75fb      	strb	r3, [r7, #23]
 800fa38:	e00e      	b.n	800fa58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 7: index = 7; break;
 800fa3a:	2307      	movs	r3, #7
 800fa3c:	75fb      	strb	r3, [r7, #23]
 800fa3e:	e00b      	b.n	800fa58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 8: index = 8; break;
 800fa40:	2308      	movs	r3, #8
 800fa42:	75fb      	strb	r3, [r7, #23]
 800fa44:	e008      	b.n	800fa58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 9: index = 9; break;
 800fa46:	2309      	movs	r3, #9
 800fa48:	75fb      	strb	r3, [r7, #23]
 800fa4a:	e005      	b.n	800fa58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 10: index = 10; break;
 800fa4c:	230a      	movs	r3, #10
 800fa4e:	75fb      	strb	r3, [r7, #23]
 800fa50:	e002      	b.n	800fa58 <can1_ams_cell_temperatures_array_raise+0x90>
       case 11: index = 11; break;
 800fa52:	230b      	movs	r3, #11
 800fa54:	75fb      	strb	r3, [r7, #23]
 800fa56:	bf00      	nop
       default: return;
   }

    if(index < 12) {
 800fa58:	7dfb      	ldrb	r3, [r7, #23]
 800fa5a:	2b0b      	cmp	r3, #11
 800fa5c:	d844      	bhi.n	800fae8 <can1_ams_cell_temperatures_array_raise+0x120>
        uint8_t div = index / 8;
 800fa5e:	7dfb      	ldrb	r3, [r7, #23]
 800fa60:	08db      	lsrs	r3, r3, #3
 800fa62:	73fb      	strb	r3, [r7, #15]
        uint8_t rem = index % 8;
 800fa64:	7dfb      	ldrb	r3, [r7, #23]
 800fa66:	f003 0307 	and.w	r3, r3, #7
 800fa6a:	73bb      	strb	r3, [r7, #14]
        uint8_t flag = (1 << rem);
 800fa6c:	7bbb      	ldrb	r3, [r7, #14]
 800fa6e:	2201      	movs	r2, #1
 800fa70:	fa02 f303 	lsl.w	r3, r2, r3
 800fa74:	737b      	strb	r3, [r7, #13]
        
        if(!(array[div] & flag)) {
 800fa76:	7bfb      	ldrb	r3, [r7, #15]
 800fa78:	4a1e      	ldr	r2, [pc, #120]	; (800faf4 <can1_ams_cell_temperatures_array_raise+0x12c>)
 800fa7a:	5cd2      	ldrb	r2, [r2, r3]
 800fa7c:	7b7b      	ldrb	r3, [r7, #13]
 800fa7e:	4013      	ands	r3, r2
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d130      	bne.n	800fae8 <can1_ams_cell_temperatures_array_raise+0x120>
            array[div] |= flag;
 800fa86:	7bfb      	ldrb	r3, [r7, #15]
 800fa88:	4a1a      	ldr	r2, [pc, #104]	; (800faf4 <can1_ams_cell_temperatures_array_raise+0x12c>)
 800fa8a:	5cd1      	ldrb	r1, [r2, r3]
 800fa8c:	7bfb      	ldrb	r3, [r7, #15]
 800fa8e:	7b7a      	ldrb	r2, [r7, #13]
 800fa90:	430a      	orrs	r2, r1
 800fa92:	b2d1      	uxtb	r1, r2
 800fa94:	4a17      	ldr	r2, [pc, #92]	; (800faf4 <can1_ams_cell_temperatures_array_raise+0x12c>)
 800fa96:	54d1      	strb	r1, [r2, r3]
            count = (count + 1) % 12;
 800fa98:	4b17      	ldr	r3, [pc, #92]	; (800faf8 <can1_ams_cell_temperatures_array_raise+0x130>)
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	1c5a      	adds	r2, r3, #1
 800fa9e:	4b17      	ldr	r3, [pc, #92]	; (800fafc <can1_ams_cell_temperatures_array_raise+0x134>)
 800faa0:	fb83 1302 	smull	r1, r3, r3, r2
 800faa4:	1059      	asrs	r1, r3, #1
 800faa6:	17d3      	asrs	r3, r2, #31
 800faa8:	1ac9      	subs	r1, r1, r3
 800faaa:	460b      	mov	r3, r1
 800faac:	005b      	lsls	r3, r3, #1
 800faae:	440b      	add	r3, r1
 800fab0:	009b      	lsls	r3, r3, #2
 800fab2:	1ad1      	subs	r1, r2, r3
 800fab4:	b2ca      	uxtb	r2, r1
 800fab6:	4b10      	ldr	r3, [pc, #64]	; (800faf8 <can1_ams_cell_temperatures_array_raise+0x130>)
 800fab8:	701a      	strb	r2, [r3, #0]

            if(count == 0) {
 800faba:	4b0f      	ldr	r3, [pc, #60]	; (800faf8 <can1_ams_cell_temperatures_array_raise+0x130>)
 800fabc:	781b      	ldrb	r3, [r3, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d112      	bne.n	800fae8 <can1_ams_cell_temperatures_array_raise+0x120>
                for(int i = 0; i < (1 + 12 / 8); i++) {
 800fac2:	2300      	movs	r3, #0
 800fac4:	613b      	str	r3, [r7, #16]
 800fac6:	e007      	b.n	800fad8 <can1_ams_cell_temperatures_array_raise+0x110>
                    array[i] = 0;
 800fac8:	4a0a      	ldr	r2, [pc, #40]	; (800faf4 <can1_ams_cell_temperatures_array_raise+0x12c>)
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	4413      	add	r3, r2
 800face:	2200      	movs	r2, #0
 800fad0:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < (1 + 12 / 8); i++) {
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	3301      	adds	r3, #1
 800fad6:	613b      	str	r3, [r7, #16]
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	2b01      	cmp	r3, #1
 800fadc:	ddf4      	ble.n	800fac8 <can1_ams_cell_temperatures_array_raise+0x100>
                }
                can1_ams_cell_temperatures_flag = 1;
 800fade:	4b08      	ldr	r3, [pc, #32]	; (800fb00 <can1_ams_cell_temperatures_array_raise+0x138>)
 800fae0:	2201      	movs	r2, #1
 800fae2:	701a      	strb	r2, [r3, #0]
 800fae4:	e000      	b.n	800fae8 <can1_ams_cell_temperatures_array_raise+0x120>
       default: return;
 800fae6:	bf00      	nop
            }
        }
    }
}
 800fae8:	371c      	adds	r7, #28
 800faea:	46bd      	mov	sp, r7
 800faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf0:	4770      	bx	lr
 800faf2:	bf00      	nop
 800faf4:	200006a0 	.word	0x200006a0
 800faf8:	200006a2 	.word	0x200006a2
 800fafc:	2aaaaaab 	.word	0x2aaaaaab
 800fb00:	20000686 	.word	0x20000686

0800fb04 <can2_charger_config_array_raise>:
static void can2_charger_config_array_raise(uint16_t _index) {
 800fb04:	b480      	push	{r7}
 800fb06:	b087      	sub	sp, #28
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	80fb      	strh	r3, [r7, #6]
   static uint8_t array[1 +  4 / 8];
   static uint8_t count = 0;
   uint8_t index;

   switch(_index) {
 800fb0e:	88fb      	ldrh	r3, [r7, #6]
 800fb10:	3b40      	subs	r3, #64	; 0x40
 800fb12:	2b04      	cmp	r3, #4
 800fb14:	d85b      	bhi.n	800fbce <can2_charger_config_array_raise+0xca>
 800fb16:	a201      	add	r2, pc, #4	; (adr r2, 800fb1c <can2_charger_config_array_raise+0x18>)
 800fb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb1c:	0800fb31 	.word	0x0800fb31
 800fb20:	0800fb37 	.word	0x0800fb37
 800fb24:	0800fb3d 	.word	0x0800fb3d
 800fb28:	0800fbcf 	.word	0x0800fbcf
 800fb2c:	0800fb43 	.word	0x0800fb43
       case 64: index = 0; break;
 800fb30:	2300      	movs	r3, #0
 800fb32:	75fb      	strb	r3, [r7, #23]
 800fb34:	e008      	b.n	800fb48 <can2_charger_config_array_raise+0x44>
       case 65: index = 1; break;
 800fb36:	2301      	movs	r3, #1
 800fb38:	75fb      	strb	r3, [r7, #23]
 800fb3a:	e005      	b.n	800fb48 <can2_charger_config_array_raise+0x44>
       case 66: index = 2; break;
 800fb3c:	2302      	movs	r3, #2
 800fb3e:	75fb      	strb	r3, [r7, #23]
 800fb40:	e002      	b.n	800fb48 <can2_charger_config_array_raise+0x44>
       case 68: index = 3; break;
 800fb42:	2303      	movs	r3, #3
 800fb44:	75fb      	strb	r3, [r7, #23]
 800fb46:	bf00      	nop
       default: return;
   }

    if(index < 4) {
 800fb48:	7dfb      	ldrb	r3, [r7, #23]
 800fb4a:	2b03      	cmp	r3, #3
 800fb4c:	d840      	bhi.n	800fbd0 <can2_charger_config_array_raise+0xcc>
        uint8_t div = index / 8;
 800fb4e:	7dfb      	ldrb	r3, [r7, #23]
 800fb50:	08db      	lsrs	r3, r3, #3
 800fb52:	73fb      	strb	r3, [r7, #15]
        uint8_t rem = index % 8;
 800fb54:	7dfb      	ldrb	r3, [r7, #23]
 800fb56:	f003 0307 	and.w	r3, r3, #7
 800fb5a:	73bb      	strb	r3, [r7, #14]
        uint8_t flag = (1 << rem);
 800fb5c:	7bbb      	ldrb	r3, [r7, #14]
 800fb5e:	2201      	movs	r2, #1
 800fb60:	fa02 f303 	lsl.w	r3, r2, r3
 800fb64:	737b      	strb	r3, [r7, #13]
        
        if(!(array[div] & flag)) {
 800fb66:	7bfb      	ldrb	r3, [r7, #15]
 800fb68:	4a1c      	ldr	r2, [pc, #112]	; (800fbdc <can2_charger_config_array_raise+0xd8>)
 800fb6a:	5cd2      	ldrb	r2, [r2, r3]
 800fb6c:	7b7b      	ldrb	r3, [r7, #13]
 800fb6e:	4013      	ands	r3, r2
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d12c      	bne.n	800fbd0 <can2_charger_config_array_raise+0xcc>
            array[div] |= flag;
 800fb76:	7bfb      	ldrb	r3, [r7, #15]
 800fb78:	4a18      	ldr	r2, [pc, #96]	; (800fbdc <can2_charger_config_array_raise+0xd8>)
 800fb7a:	5cd1      	ldrb	r1, [r2, r3]
 800fb7c:	7bfb      	ldrb	r3, [r7, #15]
 800fb7e:	7b7a      	ldrb	r2, [r7, #13]
 800fb80:	430a      	orrs	r2, r1
 800fb82:	b2d1      	uxtb	r1, r2
 800fb84:	4a15      	ldr	r2, [pc, #84]	; (800fbdc <can2_charger_config_array_raise+0xd8>)
 800fb86:	54d1      	strb	r1, [r2, r3]
            count = (count + 1) % 4;
 800fb88:	4b15      	ldr	r3, [pc, #84]	; (800fbe0 <can2_charger_config_array_raise+0xdc>)
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	425a      	negs	r2, r3
 800fb90:	f003 0303 	and.w	r3, r3, #3
 800fb94:	f002 0203 	and.w	r2, r2, #3
 800fb98:	bf58      	it	pl
 800fb9a:	4253      	negpl	r3, r2
 800fb9c:	b2da      	uxtb	r2, r3
 800fb9e:	4b10      	ldr	r3, [pc, #64]	; (800fbe0 <can2_charger_config_array_raise+0xdc>)
 800fba0:	701a      	strb	r2, [r3, #0]

            if(count == 0) {
 800fba2:	4b0f      	ldr	r3, [pc, #60]	; (800fbe0 <can2_charger_config_array_raise+0xdc>)
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d112      	bne.n	800fbd0 <can2_charger_config_array_raise+0xcc>
                for(int i = 0; i < (1 + 4 / 8); i++) {
 800fbaa:	2300      	movs	r3, #0
 800fbac:	613b      	str	r3, [r7, #16]
 800fbae:	e007      	b.n	800fbc0 <can2_charger_config_array_raise+0xbc>
                    array[i] = 0;
 800fbb0:	4a0a      	ldr	r2, [pc, #40]	; (800fbdc <can2_charger_config_array_raise+0xd8>)
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	4413      	add	r3, r2
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < (1 + 4 / 8); i++) {
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	3301      	adds	r3, #1
 800fbbe:	613b      	str	r3, [r7, #16]
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	ddf4      	ble.n	800fbb0 <can2_charger_config_array_raise+0xac>
                }
                can2_charger_config_flag = 1;
 800fbc6:	4b07      	ldr	r3, [pc, #28]	; (800fbe4 <can2_charger_config_array_raise+0xe0>)
 800fbc8:	2201      	movs	r2, #1
 800fbca:	701a      	strb	r2, [r3, #0]
 800fbcc:	e000      	b.n	800fbd0 <can2_charger_config_array_raise+0xcc>
       default: return;
 800fbce:	bf00      	nop
            }
        }
    }
}
 800fbd0:	371c      	adds	r7, #28
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr
 800fbda:	bf00      	nop
 800fbdc:	200006a4 	.word	0x200006a4
 800fbe0:	200006a5 	.word	0x200006a5
 800fbe4:	2000068c 	.word	0x2000068c

0800fbe8 <can1_ams_status_1_decode>:
/*
 * @Brief  
 * @Retval None
 */
void can1_ams_status_1_decode() {
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	af00      	add	r7, sp, #0
   can1_ams_status_1_unpack(&can1_rx_ams_status_1, rx_data, 8);
 800fbec:	2208      	movs	r2, #8
 800fbee:	4905      	ldr	r1, [pc, #20]	; (800fc04 <can1_ams_status_1_decode+0x1c>)
 800fbf0:	4805      	ldr	r0, [pc, #20]	; (800fc08 <can1_ams_status_1_decode+0x20>)
 800fbf2:	f7f1 fb4f 	bl	8001294 <can1_ams_status_1_unpack>
   can1_ams_status_1_flag = 1;
 800fbf6:	4b05      	ldr	r3, [pc, #20]	; (800fc0c <can1_ams_status_1_decode+0x24>)
 800fbf8:	2201      	movs	r2, #1
 800fbfa:	701a      	strb	r2, [r3, #0]
   can1_ams_status_1_receive();
 800fbfc:	f002 fa4c 	bl	8012098 <can1_ams_status_1_receive>
}
 800fc00:	bf00      	nop
 800fc02:	bd80      	pop	{r7, pc}
 800fc04:	200003f8 	.word	0x200003f8
 800fc08:	20000400 	.word	0x20000400
 800fc0c:	20000682 	.word	0x20000682

0800fc10 <can1_dbu_status_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_decode() {
 800fc10:	b580      	push	{r7, lr}
 800fc12:	af00      	add	r7, sp, #0
   can1_dbu_status_1_unpack(&can1_rx_dbu_status_1, rx_data, 8);
 800fc14:	2208      	movs	r2, #8
 800fc16:	4905      	ldr	r1, [pc, #20]	; (800fc2c <can1_dbu_status_1_decode+0x1c>)
 800fc18:	4805      	ldr	r0, [pc, #20]	; (800fc30 <can1_dbu_status_1_decode+0x20>)
 800fc1a:	f7f1 feae 	bl	800197a <can1_dbu_status_1_unpack>
   can1_dbu_status_1_flag = 1;
 800fc1e:	4b05      	ldr	r3, [pc, #20]	; (800fc34 <can1_dbu_status_1_decode+0x24>)
 800fc20:	2201      	movs	r2, #1
 800fc22:	701a      	strb	r2, [r3, #0]
   can1_dbu_status_1_receive();
 800fc24:	f002 faf8 	bl	8012218 <can1_dbu_status_1_receive>
}
 800fc28:	bf00      	nop
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	200003f8 	.word	0x200003f8
 800fc30:	20000410 	.word	0x20000410
 800fc34:	20000683 	.word	0x20000683

0800fc38 <can1_ams_temperatures_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_temperatures_decode() {
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	af00      	add	r7, sp, #0
   can1_ams_temperatures_unpack(&can1_rx_ams_temperatures, rx_data, 6);
 800fc3c:	2206      	movs	r2, #6
 800fc3e:	4905      	ldr	r1, [pc, #20]	; (800fc54 <can1_ams_temperatures_decode+0x1c>)
 800fc40:	4805      	ldr	r0, [pc, #20]	; (800fc58 <can1_ams_temperatures_decode+0x20>)
 800fc42:	f7f1 ffdf 	bl	8001c04 <can1_ams_temperatures_unpack>
   can1_ams_temperatures_flag = 1;
 800fc46:	4b05      	ldr	r3, [pc, #20]	; (800fc5c <can1_ams_temperatures_decode+0x24>)
 800fc48:	2201      	movs	r2, #1
 800fc4a:	701a      	strb	r2, [r3, #0]
   can1_ams_temperatures_receive();
 800fc4c:	f002 fb22 	bl	8012294 <can1_ams_temperatures_receive>
}
 800fc50:	bf00      	nop
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	200003f8 	.word	0x200003f8
 800fc58:	20000414 	.word	0x20000414
 800fc5c:	20000684 	.word	0x20000684

0800fc60 <can1_ams_cell_voltages_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_voltages_decode() {
 800fc60:	b580      	push	{r7, lr}
 800fc62:	af00      	add	r7, sp, #0
   can1_ams_cell_voltages_unpack(&can1_rx_ams_cell_voltages, rx_data, 7);
 800fc64:	2207      	movs	r2, #7
 800fc66:	4907      	ldr	r1, [pc, #28]	; (800fc84 <can1_ams_cell_voltages_decode+0x24>)
 800fc68:	4807      	ldr	r0, [pc, #28]	; (800fc88 <can1_ams_cell_voltages_decode+0x28>)
 800fc6a:	f7f3 fb15 	bl	8003298 <can1_ams_cell_voltages_unpack>
   can1_ams_cell_voltages_array_raise(can1_rx_ams_cell_voltages.voltage_multiplexor);
 800fc6e:	4b06      	ldr	r3, [pc, #24]	; (800fc88 <can1_ams_cell_voltages_decode+0x28>)
 800fc70:	781b      	ldrb	r3, [r3, #0]
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7ff fdcd 	bl	800f814 <can1_ams_cell_voltages_array_raise>
   can1_ams_cell_voltages_receive();
 800fc7a:	f002 fb51 	bl	8012320 <can1_ams_cell_voltages_receive>
}
 800fc7e:	bf00      	nop
 800fc80:	bd80      	pop	{r7, pc}
 800fc82:	bf00      	nop
 800fc84:	200003f8 	.word	0x200003f8
 800fc88:	2000041c 	.word	0x2000041c

0800fc8c <can1_ams_cell_temperatures_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_temperatures_decode() {
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	af00      	add	r7, sp, #0
   can1_ams_cell_temperatures_unpack(&can1_rx_ams_cell_temperatures, rx_data, 8);
 800fc90:	2208      	movs	r2, #8
 800fc92:	4907      	ldr	r1, [pc, #28]	; (800fcb0 <can1_ams_cell_temperatures_decode+0x24>)
 800fc94:	4807      	ldr	r0, [pc, #28]	; (800fcb4 <can1_ams_cell_temperatures_decode+0x28>)
 800fc96:	f7fa fe3b 	bl	800a910 <can1_ams_cell_temperatures_unpack>
   can1_ams_cell_temperatures_array_raise(can1_rx_ams_cell_temperatures.temperature_multiplexor);
 800fc9a:	4b06      	ldr	r3, [pc, #24]	; (800fcb4 <can1_ams_cell_temperatures_decode+0x28>)
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	b29b      	uxth	r3, r3
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7ff fe91 	bl	800f9c8 <can1_ams_cell_temperatures_array_raise>
   can1_ams_cell_temperatures_receive();
 800fca6:	f003 f9a7 	bl	8012ff8 <can1_ams_cell_temperatures_receive>
}
 800fcaa:	bf00      	nop
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	200003f8 	.word	0x200003f8
 800fcb4:	2000049c 	.word	0x2000049c

0800fcb8 <can2_amk1_setpoints_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_amk1_setpoints_1_decode() {
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	af00      	add	r7, sp, #0
   can2_amk1_setpoints_1_unpack(&can2_rx_amk1_setpoints_1, rx_data, 8);
 800fcbc:	2208      	movs	r2, #8
 800fcbe:	4905      	ldr	r1, [pc, #20]	; (800fcd4 <can2_amk1_setpoints_1_decode+0x1c>)
 800fcc0:	4805      	ldr	r0, [pc, #20]	; (800fcd8 <can2_amk1_setpoints_1_decode+0x20>)
 800fcc2:	f7fe fdb2 	bl	800e82a <can2_amk1_setpoints_1_unpack>
   can2_amk1_setpoints_1_flag = 1;
 800fcc6:	4b05      	ldr	r3, [pc, #20]	; (800fcdc <can2_amk1_setpoints_1_decode+0x24>)
 800fcc8:	2201      	movs	r2, #1
 800fcca:	701a      	strb	r2, [r3, #0]
   can2_amk1_setpoints_1_receive();
 800fccc:	f003 fcbe 	bl	801364c <can2_amk1_setpoints_1_receive>
}
 800fcd0:	bf00      	nop
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	200003f8 	.word	0x200003f8
 800fcd8:	2000062c 	.word	0x2000062c
 800fcdc:	20000687 	.word	0x20000687

0800fce0 <can2_ivt_msg_result_u3_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_decode() {
 800fce0:	b580      	push	{r7, lr}
 800fce2:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u3_unpack(&can2_rx_ivt_msg_result_u3, rx_data, 6);
 800fce4:	2206      	movs	r2, #6
 800fce6:	4905      	ldr	r1, [pc, #20]	; (800fcfc <can2_ivt_msg_result_u3_decode+0x1c>)
 800fce8:	4805      	ldr	r0, [pc, #20]	; (800fd00 <can2_ivt_msg_result_u3_decode+0x20>)
 800fcea:	f7ff f94a 	bl	800ef82 <can2_ivt_msg_result_u3_unpack>
   can2_ivt_msg_result_u3_flag = 1;
 800fcee:	4b05      	ldr	r3, [pc, #20]	; (800fd04 <can2_ivt_msg_result_u3_decode+0x24>)
 800fcf0:	2201      	movs	r2, #1
 800fcf2:	701a      	strb	r2, [r3, #0]
   can2_ivt_msg_result_u3_receive();
 800fcf4:	f003 fd26 	bl	8013744 <can2_ivt_msg_result_u3_receive>
}
 800fcf8:	bf00      	nop
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	200003f8 	.word	0x200003f8
 800fd00:	20000638 	.word	0x20000638
 800fd04:	20000688 	.word	0x20000688

0800fd08 <can2_ivt_msg_result_u2_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u2_decode() {
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u2_unpack(&can2_rx_ivt_msg_result_u2, rx_data, 6);
 800fd0c:	2206      	movs	r2, #6
 800fd0e:	4905      	ldr	r1, [pc, #20]	; (800fd24 <can2_ivt_msg_result_u2_decode+0x1c>)
 800fd10:	4805      	ldr	r0, [pc, #20]	; (800fd28 <can2_ivt_msg_result_u2_decode+0x20>)
 800fd12:	f7ff fa48 	bl	800f1a6 <can2_ivt_msg_result_u2_unpack>
   can2_ivt_msg_result_u2_flag = 1;
 800fd16:	4b05      	ldr	r3, [pc, #20]	; (800fd2c <can2_ivt_msg_result_u2_decode+0x24>)
 800fd18:	2201      	movs	r2, #1
 800fd1a:	701a      	strb	r2, [r3, #0]
   can2_ivt_msg_result_u2_receive();
 800fd1c:	f003 fd88 	bl	8013830 <can2_ivt_msg_result_u2_receive>
}
 800fd20:	bf00      	nop
 800fd22:	bd80      	pop	{r7, pc}
 800fd24:	200003f8 	.word	0x200003f8
 800fd28:	20000644 	.word	0x20000644
 800fd2c:	20000689 	.word	0x20000689

0800fd30 <can2_ivt_msg_result_u1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_decode() {
 800fd30:	b580      	push	{r7, lr}
 800fd32:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u1_unpack(&can2_rx_ivt_msg_result_u1, rx_data, 6);
 800fd34:	2206      	movs	r2, #6
 800fd36:	4905      	ldr	r1, [pc, #20]	; (800fd4c <can2_ivt_msg_result_u1_decode+0x1c>)
 800fd38:	4805      	ldr	r0, [pc, #20]	; (800fd50 <can2_ivt_msg_result_u1_decode+0x20>)
 800fd3a:	f7ff fb46 	bl	800f3ca <can2_ivt_msg_result_u1_unpack>
   can2_ivt_msg_result_u1_flag = 1;
 800fd3e:	4b05      	ldr	r3, [pc, #20]	; (800fd54 <can2_ivt_msg_result_u1_decode+0x24>)
 800fd40:	2201      	movs	r2, #1
 800fd42:	701a      	strb	r2, [r3, #0]
   can2_ivt_msg_result_u1_receive();
 800fd44:	f003 fdea 	bl	801391c <can2_ivt_msg_result_u1_receive>
}
 800fd48:	bf00      	nop
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	200003f8 	.word	0x200003f8
 800fd50:	20000650 	.word	0x20000650
 800fd54:	2000068a 	.word	0x2000068a

0800fd58 <can2_ivt_msg_result_i_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_decode() {
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_i_unpack(&can2_rx_ivt_msg_result_i, rx_data, 6);
 800fd5c:	2206      	movs	r2, #6
 800fd5e:	4905      	ldr	r1, [pc, #20]	; (800fd74 <can2_ivt_msg_result_i_decode+0x1c>)
 800fd60:	4805      	ldr	r0, [pc, #20]	; (800fd78 <can2_ivt_msg_result_i_decode+0x20>)
 800fd62:	f7ff fc44 	bl	800f5ee <can2_ivt_msg_result_i_unpack>
   can2_ivt_msg_result_i_flag = 1;
 800fd66:	4b05      	ldr	r3, [pc, #20]	; (800fd7c <can2_ivt_msg_result_i_decode+0x24>)
 800fd68:	2201      	movs	r2, #1
 800fd6a:	701a      	strb	r2, [r3, #0]
   can2_ivt_msg_result_i_receive();
 800fd6c:	f003 fe4c 	bl	8013a08 <can2_ivt_msg_result_i_receive>
}
 800fd70:	bf00      	nop
 800fd72:	bd80      	pop	{r7, pc}
 800fd74:	200003f8 	.word	0x200003f8
 800fd78:	2000065c 	.word	0x2000065c
 800fd7c:	2000068b 	.word	0x2000068b

0800fd80 <can2_charger_config_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_charger_config_decode() {
 800fd80:	b580      	push	{r7, lr}
 800fd82:	af00      	add	r7, sp, #0
   can2_charger_config_unpack(&can2_rx_charger_config, rx_data, 4);
 800fd84:	2204      	movs	r2, #4
 800fd86:	4907      	ldr	r1, [pc, #28]	; (800fda4 <can2_charger_config_decode+0x24>)
 800fd88:	4807      	ldr	r0, [pc, #28]	; (800fda8 <can2_charger_config_decode+0x28>)
 800fd8a:	f7fe ff45 	bl	800ec18 <can2_charger_config_unpack>
   can2_charger_config_array_raise(can2_rx_charger_config.set_mux);
 800fd8e:	4b06      	ldr	r3, [pc, #24]	; (800fda8 <can2_charger_config_decode+0x28>)
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	4618      	mov	r0, r3
 800fd96:	f7ff feb5 	bl	800fb04 <can2_charger_config_array_raise>
   can2_charger_config_receive();
 800fd9a:	f003 feab 	bl	8013af4 <can2_charger_config_receive>
}
 800fd9e:	bf00      	nop
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	200003f8 	.word	0x200003f8
 800fda8:	20000668 	.word	0x20000668

0800fdac <can2_cc_status_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_cc_status_decode() {
 800fdac:	b580      	push	{r7, lr}
 800fdae:	af00      	add	r7, sp, #0
   can2_cc_status_unpack(&can2_rx_cc_status, rx_data, 1);
 800fdb0:	2201      	movs	r2, #1
 800fdb2:	4905      	ldr	r1, [pc, #20]	; (800fdc8 <can2_cc_status_decode+0x1c>)
 800fdb4:	4805      	ldr	r0, [pc, #20]	; (800fdcc <can2_cc_status_decode+0x20>)
 800fdb6:	f7ff f8b4 	bl	800ef22 <can2_cc_status_unpack>
   can2_cc_status_flag = 1;
 800fdba:	4b05      	ldr	r3, [pc, #20]	; (800fdd0 <can2_cc_status_decode+0x24>)
 800fdbc:	2201      	movs	r2, #1
 800fdbe:	701a      	strb	r2, [r3, #0]
   can2_cc_status_receive();
 800fdc0:	f003 feec 	bl	8013b9c <can2_cc_status_receive>
}
 800fdc4:	bf00      	nop
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	200003f8 	.word	0x200003f8
 800fdcc:	20000674 	.word	0x20000674
 800fdd0:	2000068d 	.word	0x2000068d

0800fdd4 <can1_ams_status_1_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_status_1_transmit() {
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b09a      	sub	sp, #104	; 0x68
 800fdd8:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 800fdda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fdde:	2200      	movs	r2, #0
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	605a      	str	r2, [r3, #4]
 800fde4:	609a      	str	r2, [r3, #8]
 800fde6:	60da      	str	r2, [r3, #12]
 800fde8:	611a      	str	r2, [r3, #16]
 800fdea:	615a      	str	r2, [r3, #20]
 800fdec:	2320      	movs	r3, #32
 800fdee:	64bb      	str	r3, [r7, #72]	; 0x48
 800fdf0:	2308      	movs	r3, #8
 800fdf2:	65bb      	str	r3, [r7, #88]	; 0x58
       .StdId = 32,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_status_1_t ams_status_1;
   can1_ams_status_1_tx_callback(&ams_status_1);
 800fdf4:	463b      	mov	r3, r7
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f005 fdc6 	bl	8015988 <can1_ams_status_1_tx_callback>

   can1_tx_ams_status_1.charging_status = can1_ams_status_1_charging_status_encode(ams_status_1.charging_status);
 800fdfc:	78fb      	ldrb	r3, [r7, #3]
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7f0 fb72 	bl	80004e8 <__aeabi_ui2d>
 800fe04:	4602      	mov	r2, r0
 800fe06:	460b      	mov	r3, r1
 800fe08:	ec43 2b10 	vmov	d0, r2, r3
 800fe0c:	f7f1 fb1c 	bl	8001448 <can1_ams_status_1_charging_status_encode>
 800fe10:	4603      	mov	r3, r0
 800fe12:	461a      	mov	r2, r3
 800fe14:	4b60      	ldr	r3, [pc, #384]	; (800ff98 <can1_ams_status_1_transmit+0x1c4>)
 800fe16:	701a      	strb	r2, [r3, #0]
   can1_tx_ams_status_1.air1_closed = can1_ams_status_1_air1_closed_encode(ams_status_1.air1_closed);
 800fe18:	783b      	ldrb	r3, [r7, #0]
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7f0 fb64 	bl	80004e8 <__aeabi_ui2d>
 800fe20:	4602      	mov	r2, r0
 800fe22:	460b      	mov	r3, r1
 800fe24:	ec43 2b10 	vmov	d0, r2, r3
 800fe28:	f7f1 fb31 	bl	800148e <can1_ams_status_1_air1_closed_encode>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	461a      	mov	r2, r3
 800fe30:	4b59      	ldr	r3, [pc, #356]	; (800ff98 <can1_ams_status_1_transmit+0x1c4>)
 800fe32:	705a      	strb	r2, [r3, #1]
   can1_tx_ams_status_1.air2_closed = can1_ams_status_1_air2_closed_encode(ams_status_1.air2_closed);
 800fe34:	787b      	ldrb	r3, [r7, #1]
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7f0 fb56 	bl	80004e8 <__aeabi_ui2d>
 800fe3c:	4602      	mov	r2, r0
 800fe3e:	460b      	mov	r3, r1
 800fe40:	ec43 2b10 	vmov	d0, r2, r3
 800fe44:	f7f1 fb46 	bl	80014d4 <can1_ams_status_1_air2_closed_encode>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	4b52      	ldr	r3, [pc, #328]	; (800ff98 <can1_ams_status_1_transmit+0x1c4>)
 800fe4e:	709a      	strb	r2, [r3, #2]
   can1_tx_ams_status_1.sc_closed = can1_ams_status_1_sc_closed_encode(ams_status_1.sc_closed);
 800fe50:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fe54:	4618      	mov	r0, r3
 800fe56:	f7f0 fb47 	bl	80004e8 <__aeabi_ui2d>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	ec43 2b10 	vmov	d0, r2, r3
 800fe62:	f7f1 fb5a 	bl	800151a <can1_ams_status_1_sc_closed_encode>
 800fe66:	4603      	mov	r3, r0
 800fe68:	461a      	mov	r2, r3
 800fe6a:	4b4b      	ldr	r3, [pc, #300]	; (800ff98 <can1_ams_status_1_transmit+0x1c4>)
 800fe6c:	70da      	strb	r2, [r3, #3]
   can1_tx_ams_status_1.pre_charge_status = can1_ams_status_1_pre_charge_status_encode(ams_status_1.pre_charge_status);
 800fe6e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7f0 fb38 	bl	80004e8 <__aeabi_ui2d>
 800fe78:	4602      	mov	r2, r0
 800fe7a:	460b      	mov	r3, r1
 800fe7c:	ec43 2b10 	vmov	d0, r2, r3
 800fe80:	f7f1 fb6e 	bl	8001560 <can1_ams_status_1_pre_charge_status_encode>
 800fe84:	4603      	mov	r3, r0
 800fe86:	461a      	mov	r2, r3
 800fe88:	4b43      	ldr	r3, [pc, #268]	; (800ff98 <can1_ams_status_1_transmit+0x1c4>)
 800fe8a:	711a      	strb	r2, [r3, #4]
   can1_tx_ams_status_1.ams_error = can1_ams_status_1_ams_error_encode(ams_status_1.ams_error);
 800fe8c:	78bb      	ldrb	r3, [r7, #2]
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7f0 fb2a 	bl	80004e8 <__aeabi_ui2d>
 800fe94:	4602      	mov	r2, r0
 800fe96:	460b      	mov	r3, r1
 800fe98:	ec43 2b10 	vmov	d0, r2, r3
 800fe9c:	f7f1 fb83 	bl	80015a6 <can1_ams_status_1_ams_error_encode>
 800fea0:	4603      	mov	r3, r0
 800fea2:	461a      	mov	r2, r3
 800fea4:	4b3c      	ldr	r3, [pc, #240]	; (800ff98 <can1_ams_status_1_transmit+0x1c4>)
 800fea6:	715a      	strb	r2, [r3, #5]
   can1_tx_ams_status_1.imd_error = can1_ams_status_1_imd_error_encode(ams_status_1.imd_error);
 800fea8:	7c3b      	ldrb	r3, [r7, #16]
 800feaa:	4618      	mov	r0, r3
 800feac:	f7f0 fb1c 	bl	80004e8 <__aeabi_ui2d>
 800feb0:	4602      	mov	r2, r0
 800feb2:	460b      	mov	r3, r1
 800feb4:	ec43 2b10 	vmov	d0, r2, r3
 800feb8:	f7f1 fb98 	bl	80015ec <can1_ams_status_1_imd_error_encode>
 800febc:	4603      	mov	r3, r0
 800febe:	461a      	mov	r2, r3
 800fec0:	4b35      	ldr	r3, [pc, #212]	; (800ff98 <can1_ams_status_1_transmit+0x1c4>)
 800fec2:	719a      	strb	r2, [r3, #6]
   can1_tx_ams_status_1.state_of_charge = can1_ams_status_1_state_of_charge_encode(ams_status_1.state_of_charge);
 800fec4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800fec8:	eeb0 0a47 	vmov.f32	s0, s14
 800fecc:	eef0 0a67 	vmov.f32	s1, s15
 800fed0:	f7f1 fbaf 	bl	8001632 <can1_ams_status_1_state_of_charge_encode>
 800fed4:	4603      	mov	r3, r0
 800fed6:	461a      	mov	r2, r3
 800fed8:	4b2f      	ldr	r3, [pc, #188]	; (800ff98 <can1_ams_status_1_transmit+0x1c4>)
 800feda:	71da      	strb	r2, [r3, #7]
   can1_tx_ams_status_1.min_cell_voltage = can1_ams_status_1_min_cell_voltage_encode(ams_status_1.min_cell_voltage);
 800fedc:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800fee0:	eeb0 0a47 	vmov.f32	s0, s14
 800fee4:	eef0 0a67 	vmov.f32	s1, s15
 800fee8:	f7f1 fbc6 	bl	8001678 <can1_ams_status_1_min_cell_voltage_encode>
 800feec:	4603      	mov	r3, r0
 800feee:	461a      	mov	r2, r3
 800fef0:	4b29      	ldr	r3, [pc, #164]	; (800ff98 <can1_ams_status_1_transmit+0x1c4>)
 800fef2:	721a      	strb	r2, [r3, #8]
   can1_tx_ams_status_1.max_cell_voltage = can1_ams_status_1_max_cell_voltage_encode(ams_status_1.max_cell_voltage);
 800fef4:	ed97 7b08 	vldr	d7, [r7, #32]
 800fef8:	eeb0 0a47 	vmov.f32	s0, s14
 800fefc:	eef0 0a67 	vmov.f32	s1, s15
 800ff00:	f7f1 fc12 	bl	8001728 <can1_ams_status_1_max_cell_voltage_encode>
 800ff04:	4603      	mov	r3, r0
 800ff06:	461a      	mov	r2, r3
 800ff08:	4b23      	ldr	r3, [pc, #140]	; (800ff98 <can1_ams_status_1_transmit+0x1c4>)
 800ff0a:	725a      	strb	r2, [r3, #9]
   can1_tx_ams_status_1.min_cell_temperature = can1_ams_status_1_min_cell_temperature_encode(ams_status_1.min_cell_temperature);
 800ff0c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800ff10:	eeb0 0a47 	vmov.f32	s0, s14
 800ff14:	eef0 0a67 	vmov.f32	s1, s15
 800ff18:	f7f1 fc5e 	bl	80017d8 <can1_ams_status_1_min_cell_temperature_encode>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	461a      	mov	r2, r3
 800ff20:	4b1d      	ldr	r3, [pc, #116]	; (800ff98 <can1_ams_status_1_transmit+0x1c4>)
 800ff22:	815a      	strh	r2, [r3, #10]
   can1_tx_ams_status_1.max_cell_temperature = can1_ams_status_1_max_cell_temperature_encode(ams_status_1.max_cell_temperature);
 800ff24:	ed97 7b06 	vldr	d7, [r7, #24]
 800ff28:	eeb0 0a47 	vmov.f32	s0, s14
 800ff2c:	eef0 0a67 	vmov.f32	s1, s15
 800ff30:	f7f1 fcaa 	bl	8001888 <can1_ams_status_1_max_cell_temperature_encode>
 800ff34:	4603      	mov	r3, r0
 800ff36:	461a      	mov	r2, r3
 800ff38:	4b17      	ldr	r3, [pc, #92]	; (800ff98 <can1_ams_status_1_transmit+0x1c4>)
 800ff3a:	819a      	strh	r2, [r3, #12]
   can1_tx_ams_status_1.fan_speed = can1_ams_status_1_fan_speed_encode(ams_status_1.fan_speed);
 800ff3c:	ed97 7b02 	vldr	d7, [r7, #8]
 800ff40:	eeb0 0a47 	vmov.f32	s0, s14
 800ff44:	eef0 0a67 	vmov.f32	s1, s15
 800ff48:	f7f1 fcf4 	bl	8001934 <can1_ams_status_1_fan_speed_encode>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	461a      	mov	r2, r3
 800ff50:	4b11      	ldr	r3, [pc, #68]	; (800ff98 <can1_ams_status_1_transmit+0x1c4>)
 800ff52:	739a      	strb	r2, [r3, #14]

   can1_ams_status_1_pack(tx_data, &can1_tx_ams_status_1, 8);
 800ff54:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ff58:	2208      	movs	r2, #8
 800ff5a:	490f      	ldr	r1, [pc, #60]	; (800ff98 <can1_ams_status_1_transmit+0x1c4>)
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f7f1 f88e 	bl	800107e <can1_ams_status_1_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 800ff62:	bf00      	nop
 800ff64:	4b0d      	ldr	r3, [pc, #52]	; (800ff9c <can1_ams_status_1_transmit+0x1c8>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f014 f802 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d0f7      	beq.n	800ff64 <can1_ams_status_1_transmit+0x190>
   if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 800ff74:	4b09      	ldr	r3, [pc, #36]	; (800ff9c <can1_ams_status_1_transmit+0x1c8>)
 800ff76:	6818      	ldr	r0, [r3, #0]
 800ff78:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ff7c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ff80:	4b07      	ldr	r3, [pc, #28]	; (800ffa0 <can1_ams_status_1_transmit+0x1cc>)
 800ff82:	f013 ff1b 	bl	8023dbc <HAL_CAN_AddTxMessage>
 800ff86:	4603      	mov	r3, r0
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d001      	beq.n	800ff90 <can1_ams_status_1_transmit+0x1bc>
       Error_Handler();
 800ff8c:	f007 f900 	bl	8017190 <Error_Handler>
   }
}
 800ff90:	bf00      	nop
 800ff92:	3768      	adds	r7, #104	; 0x68
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	20000518 	.word	0x20000518
 800ff9c:	20000690 	.word	0x20000690
 800ffa0:	200003f4 	.word	0x200003f4

0800ffa4 <can1_ams_temperatures_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_temperatures_transmit() {
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b090      	sub	sp, #64	; 0x40
 800ffa8:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 800ffaa:	f107 0320 	add.w	r3, r7, #32
 800ffae:	2200      	movs	r2, #0
 800ffb0:	601a      	str	r2, [r3, #0]
 800ffb2:	605a      	str	r2, [r3, #4]
 800ffb4:	609a      	str	r2, [r3, #8]
 800ffb6:	60da      	str	r2, [r3, #12]
 800ffb8:	611a      	str	r2, [r3, #16]
 800ffba:	615a      	str	r2, [r3, #20]
 800ffbc:	2323      	movs	r3, #35	; 0x23
 800ffbe:	623b      	str	r3, [r7, #32]
 800ffc0:	2306      	movs	r3, #6
 800ffc2:	633b      	str	r3, [r7, #48]	; 0x30
       .StdId = 35,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_temperatures_t ams_temperatures;
   can1_ams_temperatures_tx_callback(&ams_temperatures);
 800ffc4:	463b      	mov	r3, r7
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f005 fdba 	bl	8015b40 <can1_ams_temperatures_tx_callback>

   can1_tx_ams_temperatures.pre_charge_resistor_temperature = can1_ams_temperatures_pre_charge_resistor_temperature_encode(ams_temperatures.pre_charge_resistor_temperature);
 800ffcc:	ed97 7b06 	vldr	d7, [r7, #24]
 800ffd0:	eeb0 0a47 	vmov.f32	s0, s14
 800ffd4:	eef0 0a67 	vmov.f32	s1, s15
 800ffd8:	f7f1 febe 	bl	8001d58 <can1_ams_temperatures_pre_charge_resistor_temperature_encode>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	461a      	mov	r2, r3
 800ffe0:	4b23      	ldr	r3, [pc, #140]	; (8010070 <can1_ams_temperatures_transmit+0xcc>)
 800ffe2:	801a      	strh	r2, [r3, #0]
   can1_tx_ams_temperatures.fuse_resistor_temperature = can1_ams_temperatures_fuse_resistor_temperature_encode(ams_temperatures.fuse_resistor_temperature);
 800ffe4:	ed97 7b04 	vldr	d7, [r7, #16]
 800ffe8:	eeb0 0a47 	vmov.f32	s0, s14
 800ffec:	eef0 0a67 	vmov.f32	s1, s15
 800fff0:	f7f1 ff0a 	bl	8001e08 <can1_ams_temperatures_fuse_resistor_temperature_encode>
 800fff4:	4603      	mov	r3, r0
 800fff6:	461a      	mov	r2, r3
 800fff8:	4b1d      	ldr	r3, [pc, #116]	; (8010070 <can1_ams_temperatures_transmit+0xcc>)
 800fffa:	805a      	strh	r2, [r3, #2]
   can1_tx_ams_temperatures.aux_1_temperature = can1_ams_temperatures_aux_1_temperature_encode(ams_temperatures.aux_1_temperature);
 800fffc:	ed97 7b00 	vldr	d7, [r7]
 8010000:	eeb0 0a47 	vmov.f32	s0, s14
 8010004:	eef0 0a67 	vmov.f32	s1, s15
 8010008:	f7f1 ff56 	bl	8001eb8 <can1_ams_temperatures_aux_1_temperature_encode>
 801000c:	4603      	mov	r3, r0
 801000e:	461a      	mov	r2, r3
 8010010:	4b17      	ldr	r3, [pc, #92]	; (8010070 <can1_ams_temperatures_transmit+0xcc>)
 8010012:	809a      	strh	r2, [r3, #4]
   can1_tx_ams_temperatures.aux_2_temperature = can1_ams_temperatures_aux_2_temperature_encode(ams_temperatures.aux_2_temperature);
 8010014:	ed97 7b02 	vldr	d7, [r7, #8]
 8010018:	eeb0 0a47 	vmov.f32	s0, s14
 801001c:	eef0 0a67 	vmov.f32	s1, s15
 8010020:	f7f1 ffa2 	bl	8001f68 <can1_ams_temperatures_aux_2_temperature_encode>
 8010024:	4603      	mov	r3, r0
 8010026:	461a      	mov	r2, r3
 8010028:	4b11      	ldr	r3, [pc, #68]	; (8010070 <can1_ams_temperatures_transmit+0xcc>)
 801002a:	80da      	strh	r2, [r3, #6]

   can1_ams_temperatures_pack(tx_data, &can1_tx_ams_temperatures, 6);
 801002c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010030:	2206      	movs	r2, #6
 8010032:	490f      	ldr	r1, [pc, #60]	; (8010070 <can1_ams_temperatures_transmit+0xcc>)
 8010034:	4618      	mov	r0, r3
 8010036:	f7f1 fd41 	bl	8001abc <can1_ams_temperatures_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801003a:	bf00      	nop
 801003c:	4b0d      	ldr	r3, [pc, #52]	; (8010074 <can1_ams_temperatures_transmit+0xd0>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	4618      	mov	r0, r3
 8010042:	f013 ff96 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8010046:	4603      	mov	r3, r0
 8010048:	2b00      	cmp	r3, #0
 801004a:	d0f7      	beq.n	801003c <can1_ams_temperatures_transmit+0x98>
   if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801004c:	4b09      	ldr	r3, [pc, #36]	; (8010074 <can1_ams_temperatures_transmit+0xd0>)
 801004e:	6818      	ldr	r0, [r3, #0]
 8010050:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010054:	f107 0120 	add.w	r1, r7, #32
 8010058:	4b07      	ldr	r3, [pc, #28]	; (8010078 <can1_ams_temperatures_transmit+0xd4>)
 801005a:	f013 feaf 	bl	8023dbc <HAL_CAN_AddTxMessage>
 801005e:	4603      	mov	r3, r0
 8010060:	2b00      	cmp	r3, #0
 8010062:	d001      	beq.n	8010068 <can1_ams_temperatures_transmit+0xc4>
       Error_Handler();
 8010064:	f007 f894 	bl	8017190 <Error_Handler>
   }
}
 8010068:	bf00      	nop
 801006a:	3740      	adds	r7, #64	; 0x40
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	20000528 	.word	0x20000528
 8010074:	20000690 	.word	0x20000690
 8010078:	200003f4 	.word	0x200003f4

0801007c <can1_ams_cell_voltages_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_voltages_transmit() {
 801007c:	b580      	push	{r7, lr}
 801007e:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8010082:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 8010084:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8010088:	2200      	movs	r2, #0
 801008a:	601a      	str	r2, [r3, #0]
 801008c:	605a      	str	r2, [r3, #4]
 801008e:	609a      	str	r2, [r3, #8]
 8010090:	60da      	str	r2, [r3, #12]
 8010092:	611a      	str	r2, [r3, #16]
 8010094:	615a      	str	r2, [r3, #20]
 8010096:	2321      	movs	r3, #33	; 0x21
 8010098:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 801009c:	2307      	movs	r3, #7
 801009e:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
       .StdId = 33,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_cell_voltages_t ams_cell_voltages;
   can1_ams_cell_voltages_tx_callback(&ams_cell_voltages);
 80100a2:	463b      	mov	r3, r7
 80100a4:	4618      	mov	r0, r3
 80100a6:	f005 fd5f 	bl	8015b68 <can1_ams_cell_voltages_tx_callback>

   can1_tx_ams_cell_voltages.voltage_multiplexor = can1_ams_cell_voltages_voltage_multiplexor_encode(ams_cell_voltages.voltage_multiplexor);
 80100aa:	463b      	mov	r3, r7
 80100ac:	f893 33f0 	ldrb.w	r3, [r3, #1008]	; 0x3f0
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7f0 fa19 	bl	80004e8 <__aeabi_ui2d>
 80100b6:	4602      	mov	r2, r0
 80100b8:	460b      	mov	r3, r1
 80100ba:	ec43 2b10 	vmov	d0, r2, r3
 80100be:	f7f3 ffa9 	bl	8004014 <can1_ams_cell_voltages_voltage_multiplexor_encode>
 80100c2:	4603      	mov	r3, r0
 80100c4:	461a      	mov	r2, r3
 80100c6:	4bec      	ldr	r3, [pc, #944]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 80100c8:	701a      	strb	r2, [r3, #0]
   can1_tx_ams_cell_voltages.v1s1 = can1_ams_cell_voltages_v1s1_encode(ams_cell_voltages.v1s1);
 80100ca:	463b      	mov	r3, r7
 80100cc:	ed93 7b00 	vldr	d7, [r3]
 80100d0:	eeb0 0a47 	vmov.f32	s0, s14
 80100d4:	eef0 0a67 	vmov.f32	s1, s15
 80100d8:	f7f3 ffae 	bl	8004038 <can1_ams_cell_voltages_v1s1_encode>
 80100dc:	4603      	mov	r3, r0
 80100de:	461a      	mov	r2, r3
 80100e0:	4be5      	ldr	r3, [pc, #916]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 80100e2:	705a      	strb	r2, [r3, #1]
   can1_tx_ams_cell_voltages.v7s1 = can1_ams_cell_voltages_v7s1_encode(ams_cell_voltages.v7s1);
 80100e4:	463b      	mov	r3, r7
 80100e6:	ed93 7b90 	vldr	d7, [r3, #576]	; 0x240
 80100ea:	eeb0 0a47 	vmov.f32	s0, s14
 80100ee:	eef0 0a67 	vmov.f32	s1, s15
 80100f2:	f7f3 fff9 	bl	80040e8 <can1_ams_cell_voltages_v7s1_encode>
 80100f6:	4603      	mov	r3, r0
 80100f8:	461a      	mov	r2, r3
 80100fa:	4bdf      	ldr	r3, [pc, #892]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 80100fc:	709a      	strb	r2, [r3, #2]
   can1_tx_ams_cell_voltages.v1s2 = can1_ams_cell_voltages_v1s2_encode(ams_cell_voltages.v1s2);
 80100fe:	463b      	mov	r3, r7
 8010100:	ed93 7b02 	vldr	d7, [r3, #8]
 8010104:	eeb0 0a47 	vmov.f32	s0, s14
 8010108:	eef0 0a67 	vmov.f32	s1, s15
 801010c:	f7f4 f844 	bl	8004198 <can1_ams_cell_voltages_v1s2_encode>
 8010110:	4603      	mov	r3, r0
 8010112:	461a      	mov	r2, r3
 8010114:	4bd8      	ldr	r3, [pc, #864]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010116:	70da      	strb	r2, [r3, #3]
   can1_tx_ams_cell_voltages.v7s2 = can1_ams_cell_voltages_v7s2_encode(ams_cell_voltages.v7s2);
 8010118:	463b      	mov	r3, r7
 801011a:	ed93 7b92 	vldr	d7, [r3, #584]	; 0x248
 801011e:	eeb0 0a47 	vmov.f32	s0, s14
 8010122:	eef0 0a67 	vmov.f32	s1, s15
 8010126:	f7f4 f88f 	bl	8004248 <can1_ams_cell_voltages_v7s2_encode>
 801012a:	4603      	mov	r3, r0
 801012c:	461a      	mov	r2, r3
 801012e:	4bd2      	ldr	r3, [pc, #840]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010130:	711a      	strb	r2, [r3, #4]
   can1_tx_ams_cell_voltages.v1s3 = can1_ams_cell_voltages_v1s3_encode(ams_cell_voltages.v1s3);
 8010132:	463b      	mov	r3, r7
 8010134:	ed93 7b04 	vldr	d7, [r3, #16]
 8010138:	eeb0 0a47 	vmov.f32	s0, s14
 801013c:	eef0 0a67 	vmov.f32	s1, s15
 8010140:	f7f4 f8da 	bl	80042f8 <can1_ams_cell_voltages_v1s3_encode>
 8010144:	4603      	mov	r3, r0
 8010146:	461a      	mov	r2, r3
 8010148:	4bcb      	ldr	r3, [pc, #812]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 801014a:	715a      	strb	r2, [r3, #5]
   can1_tx_ams_cell_voltages.v7s3 = can1_ams_cell_voltages_v7s3_encode(ams_cell_voltages.v7s3);
 801014c:	463b      	mov	r3, r7
 801014e:	ed93 7b94 	vldr	d7, [r3, #592]	; 0x250
 8010152:	eeb0 0a47 	vmov.f32	s0, s14
 8010156:	eef0 0a67 	vmov.f32	s1, s15
 801015a:	f7f4 f925 	bl	80043a8 <can1_ams_cell_voltages_v7s3_encode>
 801015e:	4603      	mov	r3, r0
 8010160:	461a      	mov	r2, r3
 8010162:	4bc5      	ldr	r3, [pc, #788]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010164:	719a      	strb	r2, [r3, #6]
   can1_tx_ams_cell_voltages.v1s4 = can1_ams_cell_voltages_v1s4_encode(ams_cell_voltages.v1s4);
 8010166:	463b      	mov	r3, r7
 8010168:	ed93 7b06 	vldr	d7, [r3, #24]
 801016c:	eeb0 0a47 	vmov.f32	s0, s14
 8010170:	eef0 0a67 	vmov.f32	s1, s15
 8010174:	f7f4 f970 	bl	8004458 <can1_ams_cell_voltages_v1s4_encode>
 8010178:	4603      	mov	r3, r0
 801017a:	461a      	mov	r2, r3
 801017c:	4bbe      	ldr	r3, [pc, #760]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 801017e:	71da      	strb	r2, [r3, #7]
   can1_tx_ams_cell_voltages.v7s4 = can1_ams_cell_voltages_v7s4_encode(ams_cell_voltages.v7s4);
 8010180:	463b      	mov	r3, r7
 8010182:	ed93 7b96 	vldr	d7, [r3, #600]	; 0x258
 8010186:	eeb0 0a47 	vmov.f32	s0, s14
 801018a:	eef0 0a67 	vmov.f32	s1, s15
 801018e:	f7f4 f9bb 	bl	8004508 <can1_ams_cell_voltages_v7s4_encode>
 8010192:	4603      	mov	r3, r0
 8010194:	461a      	mov	r2, r3
 8010196:	4bb8      	ldr	r3, [pc, #736]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010198:	721a      	strb	r2, [r3, #8]
   can1_tx_ams_cell_voltages.v1s5 = can1_ams_cell_voltages_v1s5_encode(ams_cell_voltages.v1s5);
 801019a:	463b      	mov	r3, r7
 801019c:	ed93 7b08 	vldr	d7, [r3, #32]
 80101a0:	eeb0 0a47 	vmov.f32	s0, s14
 80101a4:	eef0 0a67 	vmov.f32	s1, s15
 80101a8:	f7f4 fa06 	bl	80045b8 <can1_ams_cell_voltages_v1s5_encode>
 80101ac:	4603      	mov	r3, r0
 80101ae:	461a      	mov	r2, r3
 80101b0:	4bb1      	ldr	r3, [pc, #708]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 80101b2:	725a      	strb	r2, [r3, #9]
   can1_tx_ams_cell_voltages.v7s5 = can1_ams_cell_voltages_v7s5_encode(ams_cell_voltages.v7s5);
 80101b4:	463b      	mov	r3, r7
 80101b6:	ed93 7b98 	vldr	d7, [r3, #608]	; 0x260
 80101ba:	eeb0 0a47 	vmov.f32	s0, s14
 80101be:	eef0 0a67 	vmov.f32	s1, s15
 80101c2:	f7f4 fa51 	bl	8004668 <can1_ams_cell_voltages_v7s5_encode>
 80101c6:	4603      	mov	r3, r0
 80101c8:	461a      	mov	r2, r3
 80101ca:	4bab      	ldr	r3, [pc, #684]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 80101cc:	729a      	strb	r2, [r3, #10]
   can1_tx_ams_cell_voltages.v1s6 = can1_ams_cell_voltages_v1s6_encode(ams_cell_voltages.v1s6);
 80101ce:	463b      	mov	r3, r7
 80101d0:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80101d4:	eeb0 0a47 	vmov.f32	s0, s14
 80101d8:	eef0 0a67 	vmov.f32	s1, s15
 80101dc:	f7f4 fa9c 	bl	8004718 <can1_ams_cell_voltages_v1s6_encode>
 80101e0:	4603      	mov	r3, r0
 80101e2:	461a      	mov	r2, r3
 80101e4:	4ba4      	ldr	r3, [pc, #656]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 80101e6:	72da      	strb	r2, [r3, #11]
   can1_tx_ams_cell_voltages.v7s6 = can1_ams_cell_voltages_v7s6_encode(ams_cell_voltages.v7s6);
 80101e8:	463b      	mov	r3, r7
 80101ea:	ed93 7b9a 	vldr	d7, [r3, #616]	; 0x268
 80101ee:	eeb0 0a47 	vmov.f32	s0, s14
 80101f2:	eef0 0a67 	vmov.f32	s1, s15
 80101f6:	f7f4 fae7 	bl	80047c8 <can1_ams_cell_voltages_v7s6_encode>
 80101fa:	4603      	mov	r3, r0
 80101fc:	461a      	mov	r2, r3
 80101fe:	4b9e      	ldr	r3, [pc, #632]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010200:	731a      	strb	r2, [r3, #12]
   can1_tx_ams_cell_voltages.v1s7 = can1_ams_cell_voltages_v1s7_encode(ams_cell_voltages.v1s7);
 8010202:	463b      	mov	r3, r7
 8010204:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8010208:	eeb0 0a47 	vmov.f32	s0, s14
 801020c:	eef0 0a67 	vmov.f32	s1, s15
 8010210:	f7f4 fb32 	bl	8004878 <can1_ams_cell_voltages_v1s7_encode>
 8010214:	4603      	mov	r3, r0
 8010216:	461a      	mov	r2, r3
 8010218:	4b97      	ldr	r3, [pc, #604]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 801021a:	735a      	strb	r2, [r3, #13]
   can1_tx_ams_cell_voltages.v7s7 = can1_ams_cell_voltages_v7s7_encode(ams_cell_voltages.v7s7);
 801021c:	463b      	mov	r3, r7
 801021e:	ed93 7b9c 	vldr	d7, [r3, #624]	; 0x270
 8010222:	eeb0 0a47 	vmov.f32	s0, s14
 8010226:	eef0 0a67 	vmov.f32	s1, s15
 801022a:	f7f4 fb7d 	bl	8004928 <can1_ams_cell_voltages_v7s7_encode>
 801022e:	4603      	mov	r3, r0
 8010230:	461a      	mov	r2, r3
 8010232:	4b91      	ldr	r3, [pc, #580]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010234:	739a      	strb	r2, [r3, #14]
   can1_tx_ams_cell_voltages.v1s8 = can1_ams_cell_voltages_v1s8_encode(ams_cell_voltages.v1s8);
 8010236:	463b      	mov	r3, r7
 8010238:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 801023c:	eeb0 0a47 	vmov.f32	s0, s14
 8010240:	eef0 0a67 	vmov.f32	s1, s15
 8010244:	f7f4 fbc8 	bl	80049d8 <can1_ams_cell_voltages_v1s8_encode>
 8010248:	4603      	mov	r3, r0
 801024a:	461a      	mov	r2, r3
 801024c:	4b8a      	ldr	r3, [pc, #552]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 801024e:	73da      	strb	r2, [r3, #15]
   can1_tx_ams_cell_voltages.v7s8 = can1_ams_cell_voltages_v7s8_encode(ams_cell_voltages.v7s8);
 8010250:	463b      	mov	r3, r7
 8010252:	ed93 7b9e 	vldr	d7, [r3, #632]	; 0x278
 8010256:	eeb0 0a47 	vmov.f32	s0, s14
 801025a:	eef0 0a67 	vmov.f32	s1, s15
 801025e:	f7f4 fc13 	bl	8004a88 <can1_ams_cell_voltages_v7s8_encode>
 8010262:	4603      	mov	r3, r0
 8010264:	461a      	mov	r2, r3
 8010266:	4b84      	ldr	r3, [pc, #528]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010268:	741a      	strb	r2, [r3, #16]
   can1_tx_ams_cell_voltages.v1s9 = can1_ams_cell_voltages_v1s9_encode(ams_cell_voltages.v1s9);
 801026a:	463b      	mov	r3, r7
 801026c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8010270:	eeb0 0a47 	vmov.f32	s0, s14
 8010274:	eef0 0a67 	vmov.f32	s1, s15
 8010278:	f7f4 fc5e 	bl	8004b38 <can1_ams_cell_voltages_v1s9_encode>
 801027c:	4603      	mov	r3, r0
 801027e:	461a      	mov	r2, r3
 8010280:	4b7d      	ldr	r3, [pc, #500]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010282:	745a      	strb	r2, [r3, #17]
   can1_tx_ams_cell_voltages.v7s9 = can1_ams_cell_voltages_v7s9_encode(ams_cell_voltages.v7s9);
 8010284:	463b      	mov	r3, r7
 8010286:	ed93 7ba0 	vldr	d7, [r3, #640]	; 0x280
 801028a:	eeb0 0a47 	vmov.f32	s0, s14
 801028e:	eef0 0a67 	vmov.f32	s1, s15
 8010292:	f7f4 fca9 	bl	8004be8 <can1_ams_cell_voltages_v7s9_encode>
 8010296:	4603      	mov	r3, r0
 8010298:	461a      	mov	r2, r3
 801029a:	4b77      	ldr	r3, [pc, #476]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 801029c:	749a      	strb	r2, [r3, #18]
   can1_tx_ams_cell_voltages.v1s10 = can1_ams_cell_voltages_v1s10_encode(ams_cell_voltages.v1s10);
 801029e:	463b      	mov	r3, r7
 80102a0:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80102a4:	eeb0 0a47 	vmov.f32	s0, s14
 80102a8:	eef0 0a67 	vmov.f32	s1, s15
 80102ac:	f7f4 fcf4 	bl	8004c98 <can1_ams_cell_voltages_v1s10_encode>
 80102b0:	4603      	mov	r3, r0
 80102b2:	461a      	mov	r2, r3
 80102b4:	4b70      	ldr	r3, [pc, #448]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 80102b6:	74da      	strb	r2, [r3, #19]
   can1_tx_ams_cell_voltages.v7s10 = can1_ams_cell_voltages_v7s10_encode(ams_cell_voltages.v7s10);
 80102b8:	463b      	mov	r3, r7
 80102ba:	ed93 7ba2 	vldr	d7, [r3, #648]	; 0x288
 80102be:	eeb0 0a47 	vmov.f32	s0, s14
 80102c2:	eef0 0a67 	vmov.f32	s1, s15
 80102c6:	f7f4 fd3f 	bl	8004d48 <can1_ams_cell_voltages_v7s10_encode>
 80102ca:	4603      	mov	r3, r0
 80102cc:	461a      	mov	r2, r3
 80102ce:	4b6a      	ldr	r3, [pc, #424]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 80102d0:	751a      	strb	r2, [r3, #20]
   can1_tx_ams_cell_voltages.v1s11 = can1_ams_cell_voltages_v1s11_encode(ams_cell_voltages.v1s11);
 80102d2:	463b      	mov	r3, r7
 80102d4:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80102d8:	eeb0 0a47 	vmov.f32	s0, s14
 80102dc:	eef0 0a67 	vmov.f32	s1, s15
 80102e0:	f7f4 fd8a 	bl	8004df8 <can1_ams_cell_voltages_v1s11_encode>
 80102e4:	4603      	mov	r3, r0
 80102e6:	461a      	mov	r2, r3
 80102e8:	4b63      	ldr	r3, [pc, #396]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 80102ea:	755a      	strb	r2, [r3, #21]
   can1_tx_ams_cell_voltages.v7s11 = can1_ams_cell_voltages_v7s11_encode(ams_cell_voltages.v7s11);
 80102ec:	463b      	mov	r3, r7
 80102ee:	ed93 7ba4 	vldr	d7, [r3, #656]	; 0x290
 80102f2:	eeb0 0a47 	vmov.f32	s0, s14
 80102f6:	eef0 0a67 	vmov.f32	s1, s15
 80102fa:	f7f4 fdd5 	bl	8004ea8 <can1_ams_cell_voltages_v7s11_encode>
 80102fe:	4603      	mov	r3, r0
 8010300:	461a      	mov	r2, r3
 8010302:	4b5d      	ldr	r3, [pc, #372]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010304:	759a      	strb	r2, [r3, #22]
   can1_tx_ams_cell_voltages.v1s12 = can1_ams_cell_voltages_v1s12_encode(ams_cell_voltages.v1s12);
 8010306:	463b      	mov	r3, r7
 8010308:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 801030c:	eeb0 0a47 	vmov.f32	s0, s14
 8010310:	eef0 0a67 	vmov.f32	s1, s15
 8010314:	f7f4 fe20 	bl	8004f58 <can1_ams_cell_voltages_v1s12_encode>
 8010318:	4603      	mov	r3, r0
 801031a:	461a      	mov	r2, r3
 801031c:	4b56      	ldr	r3, [pc, #344]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 801031e:	75da      	strb	r2, [r3, #23]
   can1_tx_ams_cell_voltages.v7s12 = can1_ams_cell_voltages_v7s12_encode(ams_cell_voltages.v7s12);
 8010320:	463b      	mov	r3, r7
 8010322:	ed93 7ba6 	vldr	d7, [r3, #664]	; 0x298
 8010326:	eeb0 0a47 	vmov.f32	s0, s14
 801032a:	eef0 0a67 	vmov.f32	s1, s15
 801032e:	f7f4 fe6b 	bl	8005008 <can1_ams_cell_voltages_v7s12_encode>
 8010332:	4603      	mov	r3, r0
 8010334:	461a      	mov	r2, r3
 8010336:	4b50      	ldr	r3, [pc, #320]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010338:	761a      	strb	r2, [r3, #24]
   can1_tx_ams_cell_voltages.v2s1 = can1_ams_cell_voltages_v2s1_encode(ams_cell_voltages.v2s1);
 801033a:	463b      	mov	r3, r7
 801033c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8010340:	eeb0 0a47 	vmov.f32	s0, s14
 8010344:	eef0 0a67 	vmov.f32	s1, s15
 8010348:	f7f4 feb6 	bl	80050b8 <can1_ams_cell_voltages_v2s1_encode>
 801034c:	4603      	mov	r3, r0
 801034e:	461a      	mov	r2, r3
 8010350:	4b49      	ldr	r3, [pc, #292]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010352:	765a      	strb	r2, [r3, #25]
   can1_tx_ams_cell_voltages.v8s1 = can1_ams_cell_voltages_v8s1_encode(ams_cell_voltages.v8s1);
 8010354:	463b      	mov	r3, r7
 8010356:	ed93 7ba8 	vldr	d7, [r3, #672]	; 0x2a0
 801035a:	eeb0 0a47 	vmov.f32	s0, s14
 801035e:	eef0 0a67 	vmov.f32	s1, s15
 8010362:	f7f4 ff01 	bl	8005168 <can1_ams_cell_voltages_v8s1_encode>
 8010366:	4603      	mov	r3, r0
 8010368:	461a      	mov	r2, r3
 801036a:	4b43      	ldr	r3, [pc, #268]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 801036c:	769a      	strb	r2, [r3, #26]
   can1_tx_ams_cell_voltages.v2s2 = can1_ams_cell_voltages_v2s2_encode(ams_cell_voltages.v2s2);
 801036e:	463b      	mov	r3, r7
 8010370:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8010374:	eeb0 0a47 	vmov.f32	s0, s14
 8010378:	eef0 0a67 	vmov.f32	s1, s15
 801037c:	f7f4 ff4c 	bl	8005218 <can1_ams_cell_voltages_v2s2_encode>
 8010380:	4603      	mov	r3, r0
 8010382:	461a      	mov	r2, r3
 8010384:	4b3c      	ldr	r3, [pc, #240]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010386:	76da      	strb	r2, [r3, #27]
   can1_tx_ams_cell_voltages.v8s2 = can1_ams_cell_voltages_v8s2_encode(ams_cell_voltages.v8s2);
 8010388:	463b      	mov	r3, r7
 801038a:	ed93 7baa 	vldr	d7, [r3, #680]	; 0x2a8
 801038e:	eeb0 0a47 	vmov.f32	s0, s14
 8010392:	eef0 0a67 	vmov.f32	s1, s15
 8010396:	f7f4 ff97 	bl	80052c8 <can1_ams_cell_voltages_v8s2_encode>
 801039a:	4603      	mov	r3, r0
 801039c:	461a      	mov	r2, r3
 801039e:	4b36      	ldr	r3, [pc, #216]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 80103a0:	771a      	strb	r2, [r3, #28]
   can1_tx_ams_cell_voltages.v2s3 = can1_ams_cell_voltages_v2s3_encode(ams_cell_voltages.v2s3);
 80103a2:	463b      	mov	r3, r7
 80103a4:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80103a8:	eeb0 0a47 	vmov.f32	s0, s14
 80103ac:	eef0 0a67 	vmov.f32	s1, s15
 80103b0:	f7f4 ffe2 	bl	8005378 <can1_ams_cell_voltages_v2s3_encode>
 80103b4:	4603      	mov	r3, r0
 80103b6:	461a      	mov	r2, r3
 80103b8:	4b2f      	ldr	r3, [pc, #188]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 80103ba:	775a      	strb	r2, [r3, #29]
   can1_tx_ams_cell_voltages.v8s3 = can1_ams_cell_voltages_v8s3_encode(ams_cell_voltages.v8s3);
 80103bc:	463b      	mov	r3, r7
 80103be:	ed93 7bac 	vldr	d7, [r3, #688]	; 0x2b0
 80103c2:	eeb0 0a47 	vmov.f32	s0, s14
 80103c6:	eef0 0a67 	vmov.f32	s1, s15
 80103ca:	f7f5 f82d 	bl	8005428 <can1_ams_cell_voltages_v8s3_encode>
 80103ce:	4603      	mov	r3, r0
 80103d0:	461a      	mov	r2, r3
 80103d2:	4b29      	ldr	r3, [pc, #164]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 80103d4:	779a      	strb	r2, [r3, #30]
   can1_tx_ams_cell_voltages.v2s4 = can1_ams_cell_voltages_v2s4_encode(ams_cell_voltages.v2s4);
 80103d6:	463b      	mov	r3, r7
 80103d8:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80103dc:	eeb0 0a47 	vmov.f32	s0, s14
 80103e0:	eef0 0a67 	vmov.f32	s1, s15
 80103e4:	f7f5 f878 	bl	80054d8 <can1_ams_cell_voltages_v2s4_encode>
 80103e8:	4603      	mov	r3, r0
 80103ea:	461a      	mov	r2, r3
 80103ec:	4b22      	ldr	r3, [pc, #136]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 80103ee:	77da      	strb	r2, [r3, #31]
   can1_tx_ams_cell_voltages.v8s4 = can1_ams_cell_voltages_v8s4_encode(ams_cell_voltages.v8s4);
 80103f0:	463b      	mov	r3, r7
 80103f2:	ed93 7bae 	vldr	d7, [r3, #696]	; 0x2b8
 80103f6:	eeb0 0a47 	vmov.f32	s0, s14
 80103fa:	eef0 0a67 	vmov.f32	s1, s15
 80103fe:	f7f5 f8c3 	bl	8005588 <can1_ams_cell_voltages_v8s4_encode>
 8010402:	4603      	mov	r3, r0
 8010404:	461a      	mov	r2, r3
 8010406:	4b1c      	ldr	r3, [pc, #112]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010408:	f883 2020 	strb.w	r2, [r3, #32]
   can1_tx_ams_cell_voltages.v2s5 = can1_ams_cell_voltages_v2s5_encode(ams_cell_voltages.v2s5);
 801040c:	463b      	mov	r3, r7
 801040e:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8010412:	eeb0 0a47 	vmov.f32	s0, s14
 8010416:	eef0 0a67 	vmov.f32	s1, s15
 801041a:	f7f5 f90d 	bl	8005638 <can1_ams_cell_voltages_v2s5_encode>
 801041e:	4603      	mov	r3, r0
 8010420:	461a      	mov	r2, r3
 8010422:	4b15      	ldr	r3, [pc, #84]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010424:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   can1_tx_ams_cell_voltages.v8s5 = can1_ams_cell_voltages_v8s5_encode(ams_cell_voltages.v8s5);
 8010428:	463b      	mov	r3, r7
 801042a:	ed93 7bb0 	vldr	d7, [r3, #704]	; 0x2c0
 801042e:	eeb0 0a47 	vmov.f32	s0, s14
 8010432:	eef0 0a67 	vmov.f32	s1, s15
 8010436:	f7f5 f957 	bl	80056e8 <can1_ams_cell_voltages_v8s5_encode>
 801043a:	4603      	mov	r3, r0
 801043c:	461a      	mov	r2, r3
 801043e:	4b0e      	ldr	r3, [pc, #56]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010440:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   can1_tx_ams_cell_voltages.v2s6 = can1_ams_cell_voltages_v2s6_encode(ams_cell_voltages.v2s6);
 8010444:	463b      	mov	r3, r7
 8010446:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 801044a:	eeb0 0a47 	vmov.f32	s0, s14
 801044e:	eef0 0a67 	vmov.f32	s1, s15
 8010452:	f7f5 f9a1 	bl	8005798 <can1_ams_cell_voltages_v2s6_encode>
 8010456:	4603      	mov	r3, r0
 8010458:	461a      	mov	r2, r3
 801045a:	4b07      	ldr	r3, [pc, #28]	; (8010478 <can1_ams_cell_voltages_transmit+0x3fc>)
 801045c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
   can1_tx_ams_cell_voltages.v8s6 = can1_ams_cell_voltages_v8s6_encode(ams_cell_voltages.v8s6);
 8010460:	463b      	mov	r3, r7
 8010462:	ed93 7bb2 	vldr	d7, [r3, #712]	; 0x2c8
 8010466:	eeb0 0a47 	vmov.f32	s0, s14
 801046a:	eef0 0a67 	vmov.f32	s1, s15
 801046e:	f7f5 f9eb 	bl	8005848 <can1_ams_cell_voltages_v8s6_encode>
 8010472:	4603      	mov	r3, r0
 8010474:	461a      	mov	r2, r3
 8010476:	e001      	b.n	801047c <can1_ams_cell_voltages_transmit+0x400>
 8010478:	20000530 	.word	0x20000530
 801047c:	4bed      	ldr	r3, [pc, #948]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 801047e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   can1_tx_ams_cell_voltages.v2s7 = can1_ams_cell_voltages_v2s7_encode(ams_cell_voltages.v2s7);
 8010482:	463b      	mov	r3, r7
 8010484:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8010488:	eeb0 0a47 	vmov.f32	s0, s14
 801048c:	eef0 0a67 	vmov.f32	s1, s15
 8010490:	f7f5 fa32 	bl	80058f8 <can1_ams_cell_voltages_v2s7_encode>
 8010494:	4603      	mov	r3, r0
 8010496:	461a      	mov	r2, r3
 8010498:	4be6      	ldr	r3, [pc, #920]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 801049a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
   can1_tx_ams_cell_voltages.v8s7 = can1_ams_cell_voltages_v8s7_encode(ams_cell_voltages.v8s7);
 801049e:	463b      	mov	r3, r7
 80104a0:	ed93 7bb4 	vldr	d7, [r3, #720]	; 0x2d0
 80104a4:	eeb0 0a47 	vmov.f32	s0, s14
 80104a8:	eef0 0a67 	vmov.f32	s1, s15
 80104ac:	f7f5 fa7c 	bl	80059a8 <can1_ams_cell_voltages_v8s7_encode>
 80104b0:	4603      	mov	r3, r0
 80104b2:	461a      	mov	r2, r3
 80104b4:	4bdf      	ldr	r3, [pc, #892]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 80104b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   can1_tx_ams_cell_voltages.v2s8 = can1_ams_cell_voltages_v2s8_encode(ams_cell_voltages.v2s8);
 80104ba:	463b      	mov	r3, r7
 80104bc:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80104c0:	eeb0 0a47 	vmov.f32	s0, s14
 80104c4:	eef0 0a67 	vmov.f32	s1, s15
 80104c8:	f7f5 fac6 	bl	8005a58 <can1_ams_cell_voltages_v2s8_encode>
 80104cc:	4603      	mov	r3, r0
 80104ce:	461a      	mov	r2, r3
 80104d0:	4bd8      	ldr	r3, [pc, #864]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 80104d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   can1_tx_ams_cell_voltages.v8s8 = can1_ams_cell_voltages_v8s8_encode(ams_cell_voltages.v8s8);
 80104d6:	463b      	mov	r3, r7
 80104d8:	ed93 7bb6 	vldr	d7, [r3, #728]	; 0x2d8
 80104dc:	eeb0 0a47 	vmov.f32	s0, s14
 80104e0:	eef0 0a67 	vmov.f32	s1, s15
 80104e4:	f7f5 fb10 	bl	8005b08 <can1_ams_cell_voltages_v8s8_encode>
 80104e8:	4603      	mov	r3, r0
 80104ea:	461a      	mov	r2, r3
 80104ec:	4bd1      	ldr	r3, [pc, #836]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 80104ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   can1_tx_ams_cell_voltages.v2s9 = can1_ams_cell_voltages_v2s9_encode(ams_cell_voltages.v2s9);
 80104f2:	463b      	mov	r3, r7
 80104f4:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80104f8:	eeb0 0a47 	vmov.f32	s0, s14
 80104fc:	eef0 0a67 	vmov.f32	s1, s15
 8010500:	f7f5 fb5a 	bl	8005bb8 <can1_ams_cell_voltages_v2s9_encode>
 8010504:	4603      	mov	r3, r0
 8010506:	461a      	mov	r2, r3
 8010508:	4bca      	ldr	r3, [pc, #808]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 801050a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   can1_tx_ams_cell_voltages.v8s9 = can1_ams_cell_voltages_v8s9_encode(ams_cell_voltages.v8s9);
 801050e:	463b      	mov	r3, r7
 8010510:	ed93 7bb8 	vldr	d7, [r3, #736]	; 0x2e0
 8010514:	eeb0 0a47 	vmov.f32	s0, s14
 8010518:	eef0 0a67 	vmov.f32	s1, s15
 801051c:	f7f5 fba4 	bl	8005c68 <can1_ams_cell_voltages_v8s9_encode>
 8010520:	4603      	mov	r3, r0
 8010522:	461a      	mov	r2, r3
 8010524:	4bc3      	ldr	r3, [pc, #780]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010526:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   can1_tx_ams_cell_voltages.v2s10 = can1_ams_cell_voltages_v2s10_encode(ams_cell_voltages.v2s10);
 801052a:	463b      	mov	r3, r7
 801052c:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8010530:	eeb0 0a47 	vmov.f32	s0, s14
 8010534:	eef0 0a67 	vmov.f32	s1, s15
 8010538:	f7f5 fbee 	bl	8005d18 <can1_ams_cell_voltages_v2s10_encode>
 801053c:	4603      	mov	r3, r0
 801053e:	461a      	mov	r2, r3
 8010540:	4bbc      	ldr	r3, [pc, #752]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010542:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   can1_tx_ams_cell_voltages.v8s10 = can1_ams_cell_voltages_v8s10_encode(ams_cell_voltages.v8s10);
 8010546:	463b      	mov	r3, r7
 8010548:	ed93 7bba 	vldr	d7, [r3, #744]	; 0x2e8
 801054c:	eeb0 0a47 	vmov.f32	s0, s14
 8010550:	eef0 0a67 	vmov.f32	s1, s15
 8010554:	f7f5 fc38 	bl	8005dc8 <can1_ams_cell_voltages_v8s10_encode>
 8010558:	4603      	mov	r3, r0
 801055a:	461a      	mov	r2, r3
 801055c:	4bb5      	ldr	r3, [pc, #724]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 801055e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   can1_tx_ams_cell_voltages.v2s11 = can1_ams_cell_voltages_v2s11_encode(ams_cell_voltages.v2s11);
 8010562:	463b      	mov	r3, r7
 8010564:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8010568:	eeb0 0a47 	vmov.f32	s0, s14
 801056c:	eef0 0a67 	vmov.f32	s1, s15
 8010570:	f7f5 fc82 	bl	8005e78 <can1_ams_cell_voltages_v2s11_encode>
 8010574:	4603      	mov	r3, r0
 8010576:	461a      	mov	r2, r3
 8010578:	4bae      	ldr	r3, [pc, #696]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 801057a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   can1_tx_ams_cell_voltages.v8s11 = can1_ams_cell_voltages_v8s11_encode(ams_cell_voltages.v8s11);
 801057e:	463b      	mov	r3, r7
 8010580:	ed93 7bbc 	vldr	d7, [r3, #752]	; 0x2f0
 8010584:	eeb0 0a47 	vmov.f32	s0, s14
 8010588:	eef0 0a67 	vmov.f32	s1, s15
 801058c:	f7f5 fccc 	bl	8005f28 <can1_ams_cell_voltages_v8s11_encode>
 8010590:	4603      	mov	r3, r0
 8010592:	461a      	mov	r2, r3
 8010594:	4ba7      	ldr	r3, [pc, #668]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010596:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   can1_tx_ams_cell_voltages.v2s12 = can1_ams_cell_voltages_v2s12_encode(ams_cell_voltages.v2s12);
 801059a:	463b      	mov	r3, r7
 801059c:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 80105a0:	eeb0 0a47 	vmov.f32	s0, s14
 80105a4:	eef0 0a67 	vmov.f32	s1, s15
 80105a8:	f7f5 fd16 	bl	8005fd8 <can1_ams_cell_voltages_v2s12_encode>
 80105ac:	4603      	mov	r3, r0
 80105ae:	461a      	mov	r2, r3
 80105b0:	4ba0      	ldr	r3, [pc, #640]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 80105b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   can1_tx_ams_cell_voltages.v8s12 = can1_ams_cell_voltages_v8s12_encode(ams_cell_voltages.v8s12);
 80105b6:	463b      	mov	r3, r7
 80105b8:	ed93 7bbe 	vldr	d7, [r3, #760]	; 0x2f8
 80105bc:	eeb0 0a47 	vmov.f32	s0, s14
 80105c0:	eef0 0a67 	vmov.f32	s1, s15
 80105c4:	f7f5 fd60 	bl	8006088 <can1_ams_cell_voltages_v8s12_encode>
 80105c8:	4603      	mov	r3, r0
 80105ca:	461a      	mov	r2, r3
 80105cc:	4b99      	ldr	r3, [pc, #612]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 80105ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   can1_tx_ams_cell_voltages.v3s1 = can1_ams_cell_voltages_v3s1_encode(ams_cell_voltages.v3s1);
 80105d2:	463b      	mov	r3, r7
 80105d4:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 80105d8:	eeb0 0a47 	vmov.f32	s0, s14
 80105dc:	eef0 0a67 	vmov.f32	s1, s15
 80105e0:	f7f5 fdaa 	bl	8006138 <can1_ams_cell_voltages_v3s1_encode>
 80105e4:	4603      	mov	r3, r0
 80105e6:	461a      	mov	r2, r3
 80105e8:	4b92      	ldr	r3, [pc, #584]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 80105ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   can1_tx_ams_cell_voltages.v9s1 = can1_ams_cell_voltages_v9s1_encode(ams_cell_voltages.v9s1);
 80105ee:	463b      	mov	r3, r7
 80105f0:	ed93 7bc0 	vldr	d7, [r3, #768]	; 0x300
 80105f4:	eeb0 0a47 	vmov.f32	s0, s14
 80105f8:	eef0 0a67 	vmov.f32	s1, s15
 80105fc:	f7f5 fdf4 	bl	80061e8 <can1_ams_cell_voltages_v9s1_encode>
 8010600:	4603      	mov	r3, r0
 8010602:	461a      	mov	r2, r3
 8010604:	4b8b      	ldr	r3, [pc, #556]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010606:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   can1_tx_ams_cell_voltages.v3s2 = can1_ams_cell_voltages_v3s2_encode(ams_cell_voltages.v3s2);
 801060a:	463b      	mov	r3, r7
 801060c:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 8010610:	eeb0 0a47 	vmov.f32	s0, s14
 8010614:	eef0 0a67 	vmov.f32	s1, s15
 8010618:	f7f5 fe3e 	bl	8006298 <can1_ams_cell_voltages_v3s2_encode>
 801061c:	4603      	mov	r3, r0
 801061e:	461a      	mov	r2, r3
 8010620:	4b84      	ldr	r3, [pc, #528]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010622:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   can1_tx_ams_cell_voltages.v9s2 = can1_ams_cell_voltages_v9s2_encode(ams_cell_voltages.v9s2);
 8010626:	463b      	mov	r3, r7
 8010628:	ed93 7bc2 	vldr	d7, [r3, #776]	; 0x308
 801062c:	eeb0 0a47 	vmov.f32	s0, s14
 8010630:	eef0 0a67 	vmov.f32	s1, s15
 8010634:	f7f5 fe88 	bl	8006348 <can1_ams_cell_voltages_v9s2_encode>
 8010638:	4603      	mov	r3, r0
 801063a:	461a      	mov	r2, r3
 801063c:	4b7d      	ldr	r3, [pc, #500]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 801063e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   can1_tx_ams_cell_voltages.v3s3 = can1_ams_cell_voltages_v3s3_encode(ams_cell_voltages.v3s3);
 8010642:	463b      	mov	r3, r7
 8010644:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8010648:	eeb0 0a47 	vmov.f32	s0, s14
 801064c:	eef0 0a67 	vmov.f32	s1, s15
 8010650:	f7f5 fed2 	bl	80063f8 <can1_ams_cell_voltages_v3s3_encode>
 8010654:	4603      	mov	r3, r0
 8010656:	461a      	mov	r2, r3
 8010658:	4b76      	ldr	r3, [pc, #472]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 801065a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   can1_tx_ams_cell_voltages.v9s3 = can1_ams_cell_voltages_v9s3_encode(ams_cell_voltages.v9s3);
 801065e:	463b      	mov	r3, r7
 8010660:	ed93 7bc4 	vldr	d7, [r3, #784]	; 0x310
 8010664:	eeb0 0a47 	vmov.f32	s0, s14
 8010668:	eef0 0a67 	vmov.f32	s1, s15
 801066c:	f7f5 ff1c 	bl	80064a8 <can1_ams_cell_voltages_v9s3_encode>
 8010670:	4603      	mov	r3, r0
 8010672:	461a      	mov	r2, r3
 8010674:	4b6f      	ldr	r3, [pc, #444]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010676:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
   can1_tx_ams_cell_voltages.v3s4 = can1_ams_cell_voltages_v3s4_encode(ams_cell_voltages.v3s4);
 801067a:	463b      	mov	r3, r7
 801067c:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
 8010680:	eeb0 0a47 	vmov.f32	s0, s14
 8010684:	eef0 0a67 	vmov.f32	s1, s15
 8010688:	f7f5 ff66 	bl	8006558 <can1_ams_cell_voltages_v3s4_encode>
 801068c:	4603      	mov	r3, r0
 801068e:	461a      	mov	r2, r3
 8010690:	4b68      	ldr	r3, [pc, #416]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010692:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   can1_tx_ams_cell_voltages.v9s4 = can1_ams_cell_voltages_v9s4_encode(ams_cell_voltages.v9s4);
 8010696:	463b      	mov	r3, r7
 8010698:	ed93 7bc6 	vldr	d7, [r3, #792]	; 0x318
 801069c:	eeb0 0a47 	vmov.f32	s0, s14
 80106a0:	eef0 0a67 	vmov.f32	s1, s15
 80106a4:	f7f5 ffb0 	bl	8006608 <can1_ams_cell_voltages_v9s4_encode>
 80106a8:	4603      	mov	r3, r0
 80106aa:	461a      	mov	r2, r3
 80106ac:	4b61      	ldr	r3, [pc, #388]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 80106ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   can1_tx_ams_cell_voltages.v3s5 = can1_ams_cell_voltages_v3s5_encode(ams_cell_voltages.v3s5);
 80106b2:	463b      	mov	r3, r7
 80106b4:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
 80106b8:	eeb0 0a47 	vmov.f32	s0, s14
 80106bc:	eef0 0a67 	vmov.f32	s1, s15
 80106c0:	f7f5 fffa 	bl	80066b8 <can1_ams_cell_voltages_v3s5_encode>
 80106c4:	4603      	mov	r3, r0
 80106c6:	461a      	mov	r2, r3
 80106c8:	4b5a      	ldr	r3, [pc, #360]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 80106ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   can1_tx_ams_cell_voltages.v9s5 = can1_ams_cell_voltages_v9s5_encode(ams_cell_voltages.v9s5);
 80106ce:	463b      	mov	r3, r7
 80106d0:	ed93 7bc8 	vldr	d7, [r3, #800]	; 0x320
 80106d4:	eeb0 0a47 	vmov.f32	s0, s14
 80106d8:	eef0 0a67 	vmov.f32	s1, s15
 80106dc:	f7f6 f844 	bl	8006768 <can1_ams_cell_voltages_v9s5_encode>
 80106e0:	4603      	mov	r3, r0
 80106e2:	461a      	mov	r2, r3
 80106e4:	4b53      	ldr	r3, [pc, #332]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 80106e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
   can1_tx_ams_cell_voltages.v3s6 = can1_ams_cell_voltages_v3s6_encode(ams_cell_voltages.v3s6);
 80106ea:	463b      	mov	r3, r7
 80106ec:	ed93 7b3a 	vldr	d7, [r3, #232]	; 0xe8
 80106f0:	eeb0 0a47 	vmov.f32	s0, s14
 80106f4:	eef0 0a67 	vmov.f32	s1, s15
 80106f8:	f7f6 f88e 	bl	8006818 <can1_ams_cell_voltages_v3s6_encode>
 80106fc:	4603      	mov	r3, r0
 80106fe:	461a      	mov	r2, r3
 8010700:	4b4c      	ldr	r3, [pc, #304]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010702:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   can1_tx_ams_cell_voltages.v9s6 = can1_ams_cell_voltages_v9s6_encode(ams_cell_voltages.v9s6);
 8010706:	463b      	mov	r3, r7
 8010708:	ed93 7bca 	vldr	d7, [r3, #808]	; 0x328
 801070c:	eeb0 0a47 	vmov.f32	s0, s14
 8010710:	eef0 0a67 	vmov.f32	s1, s15
 8010714:	f7f6 f8d8 	bl	80068c8 <can1_ams_cell_voltages_v9s6_encode>
 8010718:	4603      	mov	r3, r0
 801071a:	461a      	mov	r2, r3
 801071c:	4b45      	ldr	r3, [pc, #276]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 801071e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   can1_tx_ams_cell_voltages.v3s7 = can1_ams_cell_voltages_v3s7_encode(ams_cell_voltages.v3s7);
 8010722:	463b      	mov	r3, r7
 8010724:	ed93 7b3c 	vldr	d7, [r3, #240]	; 0xf0
 8010728:	eeb0 0a47 	vmov.f32	s0, s14
 801072c:	eef0 0a67 	vmov.f32	s1, s15
 8010730:	f7f6 f922 	bl	8006978 <can1_ams_cell_voltages_v3s7_encode>
 8010734:	4603      	mov	r3, r0
 8010736:	461a      	mov	r2, r3
 8010738:	4b3e      	ldr	r3, [pc, #248]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 801073a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
   can1_tx_ams_cell_voltages.v9s7 = can1_ams_cell_voltages_v9s7_encode(ams_cell_voltages.v9s7);
 801073e:	463b      	mov	r3, r7
 8010740:	ed93 7bcc 	vldr	d7, [r3, #816]	; 0x330
 8010744:	eeb0 0a47 	vmov.f32	s0, s14
 8010748:	eef0 0a67 	vmov.f32	s1, s15
 801074c:	f7f6 f96c 	bl	8006a28 <can1_ams_cell_voltages_v9s7_encode>
 8010750:	4603      	mov	r3, r0
 8010752:	461a      	mov	r2, r3
 8010754:	4b37      	ldr	r3, [pc, #220]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   can1_tx_ams_cell_voltages.v3s8 = can1_ams_cell_voltages_v3s8_encode(ams_cell_voltages.v3s8);
 801075a:	463b      	mov	r3, r7
 801075c:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8010760:	eeb0 0a47 	vmov.f32	s0, s14
 8010764:	eef0 0a67 	vmov.f32	s1, s15
 8010768:	f7f6 f9b6 	bl	8006ad8 <can1_ams_cell_voltages_v3s8_encode>
 801076c:	4603      	mov	r3, r0
 801076e:	461a      	mov	r2, r3
 8010770:	4b30      	ldr	r3, [pc, #192]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010772:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   can1_tx_ams_cell_voltages.v9s8 = can1_ams_cell_voltages_v9s8_encode(ams_cell_voltages.v9s8);
 8010776:	463b      	mov	r3, r7
 8010778:	ed93 7bce 	vldr	d7, [r3, #824]	; 0x338
 801077c:	eeb0 0a47 	vmov.f32	s0, s14
 8010780:	eef0 0a67 	vmov.f32	s1, s15
 8010784:	f7f6 fa00 	bl	8006b88 <can1_ams_cell_voltages_v9s8_encode>
 8010788:	4603      	mov	r3, r0
 801078a:	461a      	mov	r2, r3
 801078c:	4b29      	ldr	r3, [pc, #164]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 801078e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   can1_tx_ams_cell_voltages.v3s9 = can1_ams_cell_voltages_v3s9_encode(ams_cell_voltages.v3s9);
 8010792:	463b      	mov	r3, r7
 8010794:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8010798:	eeb0 0a47 	vmov.f32	s0, s14
 801079c:	eef0 0a67 	vmov.f32	s1, s15
 80107a0:	f7f6 fa4a 	bl	8006c38 <can1_ams_cell_voltages_v3s9_encode>
 80107a4:	4603      	mov	r3, r0
 80107a6:	461a      	mov	r2, r3
 80107a8:	4b22      	ldr	r3, [pc, #136]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 80107aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   can1_tx_ams_cell_voltages.v9s9 = can1_ams_cell_voltages_v9s9_encode(ams_cell_voltages.v9s9);
 80107ae:	463b      	mov	r3, r7
 80107b0:	ed93 7bd0 	vldr	d7, [r3, #832]	; 0x340
 80107b4:	eeb0 0a47 	vmov.f32	s0, s14
 80107b8:	eef0 0a67 	vmov.f32	s1, s15
 80107bc:	f7f6 fa94 	bl	8006ce8 <can1_ams_cell_voltages_v9s9_encode>
 80107c0:	4603      	mov	r3, r0
 80107c2:	461a      	mov	r2, r3
 80107c4:	4b1b      	ldr	r3, [pc, #108]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 80107c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
   can1_tx_ams_cell_voltages.v3s10 = can1_ams_cell_voltages_v3s10_encode(ams_cell_voltages.v3s10);
 80107ca:	463b      	mov	r3, r7
 80107cc:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 80107d0:	eeb0 0a47 	vmov.f32	s0, s14
 80107d4:	eef0 0a67 	vmov.f32	s1, s15
 80107d8:	f7f6 fade 	bl	8006d98 <can1_ams_cell_voltages_v3s10_encode>
 80107dc:	4603      	mov	r3, r0
 80107de:	461a      	mov	r2, r3
 80107e0:	4b14      	ldr	r3, [pc, #80]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 80107e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
   can1_tx_ams_cell_voltages.v9s10 = can1_ams_cell_voltages_v9s10_encode(ams_cell_voltages.v9s10);
 80107e6:	463b      	mov	r3, r7
 80107e8:	ed93 7bd2 	vldr	d7, [r3, #840]	; 0x348
 80107ec:	eeb0 0a47 	vmov.f32	s0, s14
 80107f0:	eef0 0a67 	vmov.f32	s1, s15
 80107f4:	f7f6 fb28 	bl	8006e48 <can1_ams_cell_voltages_v9s10_encode>
 80107f8:	4603      	mov	r3, r0
 80107fa:	461a      	mov	r2, r3
 80107fc:	4b0d      	ldr	r3, [pc, #52]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 80107fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   can1_tx_ams_cell_voltages.v3s11 = can1_ams_cell_voltages_v3s11_encode(ams_cell_voltages.v3s11);
 8010802:	463b      	mov	r3, r7
 8010804:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 8010808:	eeb0 0a47 	vmov.f32	s0, s14
 801080c:	eef0 0a67 	vmov.f32	s1, s15
 8010810:	f7f6 fb72 	bl	8006ef8 <can1_ams_cell_voltages_v3s11_encode>
 8010814:	4603      	mov	r3, r0
 8010816:	461a      	mov	r2, r3
 8010818:	4b06      	ldr	r3, [pc, #24]	; (8010834 <can1_ams_cell_voltages_transmit+0x7b8>)
 801081a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   can1_tx_ams_cell_voltages.v9s11 = can1_ams_cell_voltages_v9s11_encode(ams_cell_voltages.v9s11);
 801081e:	463b      	mov	r3, r7
 8010820:	ed93 7bd4 	vldr	d7, [r3, #848]	; 0x350
 8010824:	eeb0 0a47 	vmov.f32	s0, s14
 8010828:	eef0 0a67 	vmov.f32	s1, s15
 801082c:	f7f6 fbbc 	bl	8006fa8 <can1_ams_cell_voltages_v9s11_encode>
 8010830:	e002      	b.n	8010838 <can1_ams_cell_voltages_transmit+0x7bc>
 8010832:	bf00      	nop
 8010834:	20000530 	.word	0x20000530
 8010838:	4603      	mov	r3, r0
 801083a:	461a      	mov	r2, r3
 801083c:	4bed      	ldr	r3, [pc, #948]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 801083e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
   can1_tx_ams_cell_voltages.v3s12 = can1_ams_cell_voltages_v3s12_encode(ams_cell_voltages.v3s12);
 8010842:	463b      	mov	r3, r7
 8010844:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
 8010848:	eeb0 0a47 	vmov.f32	s0, s14
 801084c:	eef0 0a67 	vmov.f32	s1, s15
 8010850:	f7f6 fc02 	bl	8007058 <can1_ams_cell_voltages_v3s12_encode>
 8010854:	4603      	mov	r3, r0
 8010856:	461a      	mov	r2, r3
 8010858:	4be6      	ldr	r3, [pc, #920]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 801085a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
   can1_tx_ams_cell_voltages.v9s12 = can1_ams_cell_voltages_v9s12_encode(ams_cell_voltages.v9s12);
 801085e:	463b      	mov	r3, r7
 8010860:	ed93 7bd6 	vldr	d7, [r3, #856]	; 0x358
 8010864:	eeb0 0a47 	vmov.f32	s0, s14
 8010868:	eef0 0a67 	vmov.f32	s1, s15
 801086c:	f7f6 fc4c 	bl	8007108 <can1_ams_cell_voltages_v9s12_encode>
 8010870:	4603      	mov	r3, r0
 8010872:	461a      	mov	r2, r3
 8010874:	4bdf      	ldr	r3, [pc, #892]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010876:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
   can1_tx_ams_cell_voltages.v4s1 = can1_ams_cell_voltages_v4s1_encode(ams_cell_voltages.v4s1);
 801087a:	463b      	mov	r3, r7
 801087c:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8010880:	eeb0 0a47 	vmov.f32	s0, s14
 8010884:	eef0 0a67 	vmov.f32	s1, s15
 8010888:	f7f6 fc96 	bl	80071b8 <can1_ams_cell_voltages_v4s1_encode>
 801088c:	4603      	mov	r3, r0
 801088e:	461a      	mov	r2, r3
 8010890:	4bd8      	ldr	r3, [pc, #864]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010892:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   can1_tx_ams_cell_voltages.v10s1 = can1_ams_cell_voltages_v10s1_encode(ams_cell_voltages.v10s1);
 8010896:	463b      	mov	r3, r7
 8010898:	ed93 7bd8 	vldr	d7, [r3, #864]	; 0x360
 801089c:	eeb0 0a47 	vmov.f32	s0, s14
 80108a0:	eef0 0a67 	vmov.f32	s1, s15
 80108a4:	f7f6 fce0 	bl	8007268 <can1_ams_cell_voltages_v10s1_encode>
 80108a8:	4603      	mov	r3, r0
 80108aa:	461a      	mov	r2, r3
 80108ac:	4bd1      	ldr	r3, [pc, #836]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 80108ae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   can1_tx_ams_cell_voltages.v4s2 = can1_ams_cell_voltages_v4s2_encode(ams_cell_voltages.v4s2);
 80108b2:	463b      	mov	r3, r7
 80108b4:	ed93 7b4a 	vldr	d7, [r3, #296]	; 0x128
 80108b8:	eeb0 0a47 	vmov.f32	s0, s14
 80108bc:	eef0 0a67 	vmov.f32	s1, s15
 80108c0:	f7f6 fd2a 	bl	8007318 <can1_ams_cell_voltages_v4s2_encode>
 80108c4:	4603      	mov	r3, r0
 80108c6:	461a      	mov	r2, r3
 80108c8:	4bca      	ldr	r3, [pc, #808]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 80108ca:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
   can1_tx_ams_cell_voltages.v10s2 = can1_ams_cell_voltages_v10s2_encode(ams_cell_voltages.v10s2);
 80108ce:	463b      	mov	r3, r7
 80108d0:	ed93 7bda 	vldr	d7, [r3, #872]	; 0x368
 80108d4:	eeb0 0a47 	vmov.f32	s0, s14
 80108d8:	eef0 0a67 	vmov.f32	s1, s15
 80108dc:	f7f6 fd74 	bl	80073c8 <can1_ams_cell_voltages_v10s2_encode>
 80108e0:	4603      	mov	r3, r0
 80108e2:	461a      	mov	r2, r3
 80108e4:	4bc3      	ldr	r3, [pc, #780]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 80108e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
   can1_tx_ams_cell_voltages.v4s3 = can1_ams_cell_voltages_v4s3_encode(ams_cell_voltages.v4s3);
 80108ea:	463b      	mov	r3, r7
 80108ec:	ed93 7b4c 	vldr	d7, [r3, #304]	; 0x130
 80108f0:	eeb0 0a47 	vmov.f32	s0, s14
 80108f4:	eef0 0a67 	vmov.f32	s1, s15
 80108f8:	f7f6 fdbe 	bl	8007478 <can1_ams_cell_voltages_v4s3_encode>
 80108fc:	4603      	mov	r3, r0
 80108fe:	461a      	mov	r2, r3
 8010900:	4bbc      	ldr	r3, [pc, #752]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010902:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
   can1_tx_ams_cell_voltages.v10s3 = can1_ams_cell_voltages_v10s3_encode(ams_cell_voltages.v10s3);
 8010906:	463b      	mov	r3, r7
 8010908:	ed93 7bdc 	vldr	d7, [r3, #880]	; 0x370
 801090c:	eeb0 0a47 	vmov.f32	s0, s14
 8010910:	eef0 0a67 	vmov.f32	s1, s15
 8010914:	f7f6 fe08 	bl	8007528 <can1_ams_cell_voltages_v10s3_encode>
 8010918:	4603      	mov	r3, r0
 801091a:	461a      	mov	r2, r3
 801091c:	4bb5      	ldr	r3, [pc, #724]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 801091e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   can1_tx_ams_cell_voltages.v4s4 = can1_ams_cell_voltages_v4s4_encode(ams_cell_voltages.v4s4);
 8010922:	463b      	mov	r3, r7
 8010924:	ed93 7b4e 	vldr	d7, [r3, #312]	; 0x138
 8010928:	eeb0 0a47 	vmov.f32	s0, s14
 801092c:	eef0 0a67 	vmov.f32	s1, s15
 8010930:	f7f6 fe52 	bl	80075d8 <can1_ams_cell_voltages_v4s4_encode>
 8010934:	4603      	mov	r3, r0
 8010936:	461a      	mov	r2, r3
 8010938:	4bae      	ldr	r3, [pc, #696]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 801093a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
   can1_tx_ams_cell_voltages.v10s4 = can1_ams_cell_voltages_v10s4_encode(ams_cell_voltages.v10s4);
 801093e:	463b      	mov	r3, r7
 8010940:	ed93 7bde 	vldr	d7, [r3, #888]	; 0x378
 8010944:	eeb0 0a47 	vmov.f32	s0, s14
 8010948:	eef0 0a67 	vmov.f32	s1, s15
 801094c:	f7f6 fe9c 	bl	8007688 <can1_ams_cell_voltages_v10s4_encode>
 8010950:	4603      	mov	r3, r0
 8010952:	461a      	mov	r2, r3
 8010954:	4ba7      	ldr	r3, [pc, #668]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   can1_tx_ams_cell_voltages.v4s5 = can1_ams_cell_voltages_v4s5_encode(ams_cell_voltages.v4s5);
 801095a:	463b      	mov	r3, r7
 801095c:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8010960:	eeb0 0a47 	vmov.f32	s0, s14
 8010964:	eef0 0a67 	vmov.f32	s1, s15
 8010968:	f7f6 fee6 	bl	8007738 <can1_ams_cell_voltages_v4s5_encode>
 801096c:	4603      	mov	r3, r0
 801096e:	461a      	mov	r2, r3
 8010970:	4ba0      	ldr	r3, [pc, #640]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
   can1_tx_ams_cell_voltages.v10s5 = can1_ams_cell_voltages_v10s5_encode(ams_cell_voltages.v10s5);
 8010976:	463b      	mov	r3, r7
 8010978:	ed93 7be0 	vldr	d7, [r3, #896]	; 0x380
 801097c:	eeb0 0a47 	vmov.f32	s0, s14
 8010980:	eef0 0a67 	vmov.f32	s1, s15
 8010984:	f7f6 ff30 	bl	80077e8 <can1_ams_cell_voltages_v10s5_encode>
 8010988:	4603      	mov	r3, r0
 801098a:	461a      	mov	r2, r3
 801098c:	4b99      	ldr	r3, [pc, #612]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 801098e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
   can1_tx_ams_cell_voltages.v4s6 = can1_ams_cell_voltages_v4s6_encode(ams_cell_voltages.v4s6);
 8010992:	463b      	mov	r3, r7
 8010994:	ed93 7b52 	vldr	d7, [r3, #328]	; 0x148
 8010998:	eeb0 0a47 	vmov.f32	s0, s14
 801099c:	eef0 0a67 	vmov.f32	s1, s15
 80109a0:	f7f6 ff7a 	bl	8007898 <can1_ams_cell_voltages_v4s6_encode>
 80109a4:	4603      	mov	r3, r0
 80109a6:	461a      	mov	r2, r3
 80109a8:	4b92      	ldr	r3, [pc, #584]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 80109aa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
   can1_tx_ams_cell_voltages.v10s6 = can1_ams_cell_voltages_v10s6_encode(ams_cell_voltages.v10s6);
 80109ae:	463b      	mov	r3, r7
 80109b0:	ed93 7be2 	vldr	d7, [r3, #904]	; 0x388
 80109b4:	eeb0 0a47 	vmov.f32	s0, s14
 80109b8:	eef0 0a67 	vmov.f32	s1, s15
 80109bc:	f7f6 ffc4 	bl	8007948 <can1_ams_cell_voltages_v10s6_encode>
 80109c0:	4603      	mov	r3, r0
 80109c2:	461a      	mov	r2, r3
 80109c4:	4b8b      	ldr	r3, [pc, #556]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 80109c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
   can1_tx_ams_cell_voltages.v4s7 = can1_ams_cell_voltages_v4s7_encode(ams_cell_voltages.v4s7);
 80109ca:	463b      	mov	r3, r7
 80109cc:	ed93 7b54 	vldr	d7, [r3, #336]	; 0x150
 80109d0:	eeb0 0a47 	vmov.f32	s0, s14
 80109d4:	eef0 0a67 	vmov.f32	s1, s15
 80109d8:	f7f7 f80e 	bl	80079f8 <can1_ams_cell_voltages_v4s7_encode>
 80109dc:	4603      	mov	r3, r0
 80109de:	461a      	mov	r2, r3
 80109e0:	4b84      	ldr	r3, [pc, #528]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 80109e2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
   can1_tx_ams_cell_voltages.v10s7 = can1_ams_cell_voltages_v10s7_encode(ams_cell_voltages.v10s7);
 80109e6:	463b      	mov	r3, r7
 80109e8:	ed93 7be4 	vldr	d7, [r3, #912]	; 0x390
 80109ec:	eeb0 0a47 	vmov.f32	s0, s14
 80109f0:	eef0 0a67 	vmov.f32	s1, s15
 80109f4:	f7f7 f858 	bl	8007aa8 <can1_ams_cell_voltages_v10s7_encode>
 80109f8:	4603      	mov	r3, r0
 80109fa:	461a      	mov	r2, r3
 80109fc:	4b7d      	ldr	r3, [pc, #500]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 80109fe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
   can1_tx_ams_cell_voltages.v4s8 = can1_ams_cell_voltages_v4s8_encode(ams_cell_voltages.v4s8);
 8010a02:	463b      	mov	r3, r7
 8010a04:	ed93 7b56 	vldr	d7, [r3, #344]	; 0x158
 8010a08:	eeb0 0a47 	vmov.f32	s0, s14
 8010a0c:	eef0 0a67 	vmov.f32	s1, s15
 8010a10:	f7f7 f8a2 	bl	8007b58 <can1_ams_cell_voltages_v4s8_encode>
 8010a14:	4603      	mov	r3, r0
 8010a16:	461a      	mov	r2, r3
 8010a18:	4b76      	ldr	r3, [pc, #472]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010a1a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
   can1_tx_ams_cell_voltages.v10s8 = can1_ams_cell_voltages_v10s8_encode(ams_cell_voltages.v10s8);
 8010a1e:	463b      	mov	r3, r7
 8010a20:	ed93 7be6 	vldr	d7, [r3, #920]	; 0x398
 8010a24:	eeb0 0a47 	vmov.f32	s0, s14
 8010a28:	eef0 0a67 	vmov.f32	s1, s15
 8010a2c:	f7f7 f8ec 	bl	8007c08 <can1_ams_cell_voltages_v10s8_encode>
 8010a30:	4603      	mov	r3, r0
 8010a32:	461a      	mov	r2, r3
 8010a34:	4b6f      	ldr	r3, [pc, #444]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010a36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
   can1_tx_ams_cell_voltages.v4s9 = can1_ams_cell_voltages_v4s9_encode(ams_cell_voltages.v4s9);
 8010a3a:	463b      	mov	r3, r7
 8010a3c:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8010a40:	eeb0 0a47 	vmov.f32	s0, s14
 8010a44:	eef0 0a67 	vmov.f32	s1, s15
 8010a48:	f7f7 f936 	bl	8007cb8 <can1_ams_cell_voltages_v4s9_encode>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	461a      	mov	r2, r3
 8010a50:	4b68      	ldr	r3, [pc, #416]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010a52:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
   can1_tx_ams_cell_voltages.v10s9 = can1_ams_cell_voltages_v10s9_encode(ams_cell_voltages.v10s9);
 8010a56:	463b      	mov	r3, r7
 8010a58:	ed93 7be8 	vldr	d7, [r3, #928]	; 0x3a0
 8010a5c:	eeb0 0a47 	vmov.f32	s0, s14
 8010a60:	eef0 0a67 	vmov.f32	s1, s15
 8010a64:	f7f7 f980 	bl	8007d68 <can1_ams_cell_voltages_v10s9_encode>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	4b61      	ldr	r3, [pc, #388]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010a6e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
   can1_tx_ams_cell_voltages.v4s10 = can1_ams_cell_voltages_v4s10_encode(ams_cell_voltages.v4s10);
 8010a72:	463b      	mov	r3, r7
 8010a74:	ed93 7b5a 	vldr	d7, [r3, #360]	; 0x168
 8010a78:	eeb0 0a47 	vmov.f32	s0, s14
 8010a7c:	eef0 0a67 	vmov.f32	s1, s15
 8010a80:	f7f7 f9ca 	bl	8007e18 <can1_ams_cell_voltages_v4s10_encode>
 8010a84:	4603      	mov	r3, r0
 8010a86:	461a      	mov	r2, r3
 8010a88:	4b5a      	ldr	r3, [pc, #360]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010a8a:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
   can1_tx_ams_cell_voltages.v10s10 = can1_ams_cell_voltages_v10s10_encode(ams_cell_voltages.v10s10);
 8010a8e:	463b      	mov	r3, r7
 8010a90:	ed93 7bea 	vldr	d7, [r3, #936]	; 0x3a8
 8010a94:	eeb0 0a47 	vmov.f32	s0, s14
 8010a98:	eef0 0a67 	vmov.f32	s1, s15
 8010a9c:	f7f7 fa14 	bl	8007ec8 <can1_ams_cell_voltages_v10s10_encode>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	4b53      	ldr	r3, [pc, #332]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
   can1_tx_ams_cell_voltages.v4s11 = can1_ams_cell_voltages_v4s11_encode(ams_cell_voltages.v4s11);
 8010aaa:	463b      	mov	r3, r7
 8010aac:	ed93 7b5c 	vldr	d7, [r3, #368]	; 0x170
 8010ab0:	eeb0 0a47 	vmov.f32	s0, s14
 8010ab4:	eef0 0a67 	vmov.f32	s1, s15
 8010ab8:	f7f7 fa5e 	bl	8007f78 <can1_ams_cell_voltages_v4s11_encode>
 8010abc:	4603      	mov	r3, r0
 8010abe:	461a      	mov	r2, r3
 8010ac0:	4b4c      	ldr	r3, [pc, #304]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010ac2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   can1_tx_ams_cell_voltages.v10s11 = can1_ams_cell_voltages_v10s11_encode(ams_cell_voltages.v10s11);
 8010ac6:	463b      	mov	r3, r7
 8010ac8:	ed93 7bec 	vldr	d7, [r3, #944]	; 0x3b0
 8010acc:	eeb0 0a47 	vmov.f32	s0, s14
 8010ad0:	eef0 0a67 	vmov.f32	s1, s15
 8010ad4:	f7f7 faa8 	bl	8008028 <can1_ams_cell_voltages_v10s11_encode>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	461a      	mov	r2, r3
 8010adc:	4b45      	ldr	r3, [pc, #276]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010ade:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
   can1_tx_ams_cell_voltages.v4s12 = can1_ams_cell_voltages_v4s12_encode(ams_cell_voltages.v4s12);
 8010ae2:	463b      	mov	r3, r7
 8010ae4:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8010ae8:	eeb0 0a47 	vmov.f32	s0, s14
 8010aec:	eef0 0a67 	vmov.f32	s1, s15
 8010af0:	f7f7 faf2 	bl	80080d8 <can1_ams_cell_voltages_v4s12_encode>
 8010af4:	4603      	mov	r3, r0
 8010af6:	461a      	mov	r2, r3
 8010af8:	4b3e      	ldr	r3, [pc, #248]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010afa:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
   can1_tx_ams_cell_voltages.v10s12 = can1_ams_cell_voltages_v10s12_encode(ams_cell_voltages.v10s12);
 8010afe:	463b      	mov	r3, r7
 8010b00:	ed93 7bee 	vldr	d7, [r3, #952]	; 0x3b8
 8010b04:	eeb0 0a47 	vmov.f32	s0, s14
 8010b08:	eef0 0a67 	vmov.f32	s1, s15
 8010b0c:	f7f7 fb3c 	bl	8008188 <can1_ams_cell_voltages_v10s12_encode>
 8010b10:	4603      	mov	r3, r0
 8010b12:	461a      	mov	r2, r3
 8010b14:	4b37      	ldr	r3, [pc, #220]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010b16:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
   can1_tx_ams_cell_voltages.v5s1 = can1_ams_cell_voltages_v5s1_encode(ams_cell_voltages.v5s1);
 8010b1a:	463b      	mov	r3, r7
 8010b1c:	ed93 7b60 	vldr	d7, [r3, #384]	; 0x180
 8010b20:	eeb0 0a47 	vmov.f32	s0, s14
 8010b24:	eef0 0a67 	vmov.f32	s1, s15
 8010b28:	f7f7 fb86 	bl	8008238 <can1_ams_cell_voltages_v5s1_encode>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	461a      	mov	r2, r3
 8010b30:	4b30      	ldr	r3, [pc, #192]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010b32:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
   can1_tx_ams_cell_voltages.v11s1 = can1_ams_cell_voltages_v11s1_encode(ams_cell_voltages.v11s1);
 8010b36:	463b      	mov	r3, r7
 8010b38:	ed93 7bf0 	vldr	d7, [r3, #960]	; 0x3c0
 8010b3c:	eeb0 0a47 	vmov.f32	s0, s14
 8010b40:	eef0 0a67 	vmov.f32	s1, s15
 8010b44:	f7f7 fbd0 	bl	80082e8 <can1_ams_cell_voltages_v11s1_encode>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	4b29      	ldr	r3, [pc, #164]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010b4e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
   can1_tx_ams_cell_voltages.v5s2 = can1_ams_cell_voltages_v5s2_encode(ams_cell_voltages.v5s2);
 8010b52:	463b      	mov	r3, r7
 8010b54:	ed93 7b62 	vldr	d7, [r3, #392]	; 0x188
 8010b58:	eeb0 0a47 	vmov.f32	s0, s14
 8010b5c:	eef0 0a67 	vmov.f32	s1, s15
 8010b60:	f7f7 fc1a 	bl	8008398 <can1_ams_cell_voltages_v5s2_encode>
 8010b64:	4603      	mov	r3, r0
 8010b66:	461a      	mov	r2, r3
 8010b68:	4b22      	ldr	r3, [pc, #136]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010b6a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
   can1_tx_ams_cell_voltages.v5s3 = can1_ams_cell_voltages_v5s3_encode(ams_cell_voltages.v5s3);
 8010b6e:	463b      	mov	r3, r7
 8010b70:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8010b74:	eeb0 0a47 	vmov.f32	s0, s14
 8010b78:	eef0 0a67 	vmov.f32	s1, s15
 8010b7c:	f7f7 fc64 	bl	8008448 <can1_ams_cell_voltages_v5s3_encode>
 8010b80:	4603      	mov	r3, r0
 8010b82:	461a      	mov	r2, r3
 8010b84:	4b1b      	ldr	r3, [pc, #108]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010b86:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
   can1_tx_ams_cell_voltages.v11s3 = can1_ams_cell_voltages_v11s3_encode(ams_cell_voltages.v11s3);
 8010b8a:	463b      	mov	r3, r7
 8010b8c:	ed93 7bf2 	vldr	d7, [r3, #968]	; 0x3c8
 8010b90:	eeb0 0a47 	vmov.f32	s0, s14
 8010b94:	eef0 0a67 	vmov.f32	s1, s15
 8010b98:	f7f7 fcae 	bl	80084f8 <can1_ams_cell_voltages_v11s3_encode>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	4b14      	ldr	r3, [pc, #80]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010ba2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
   can1_tx_ams_cell_voltages.v5s4 = can1_ams_cell_voltages_v5s4_encode(ams_cell_voltages.v5s4);
 8010ba6:	463b      	mov	r3, r7
 8010ba8:	ed93 7b66 	vldr	d7, [r3, #408]	; 0x198
 8010bac:	eeb0 0a47 	vmov.f32	s0, s14
 8010bb0:	eef0 0a67 	vmov.f32	s1, s15
 8010bb4:	f7f7 fcf8 	bl	80085a8 <can1_ams_cell_voltages_v5s4_encode>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	461a      	mov	r2, r3
 8010bbc:	4b0d      	ldr	r3, [pc, #52]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010bbe:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
   can1_tx_ams_cell_voltages.v5s5 = can1_ams_cell_voltages_v5s5_encode(ams_cell_voltages.v5s5);
 8010bc2:	463b      	mov	r3, r7
 8010bc4:	ed93 7b68 	vldr	d7, [r3, #416]	; 0x1a0
 8010bc8:	eeb0 0a47 	vmov.f32	s0, s14
 8010bcc:	eef0 0a67 	vmov.f32	s1, s15
 8010bd0:	f7f7 fd42 	bl	8008658 <can1_ams_cell_voltages_v5s5_encode>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	461a      	mov	r2, r3
 8010bd8:	4b06      	ldr	r3, [pc, #24]	; (8010bf4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010bda:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
   can1_tx_ams_cell_voltages.v11s5 = can1_ams_cell_voltages_v11s5_encode(ams_cell_voltages.v11s5);
 8010bde:	463b      	mov	r3, r7
 8010be0:	ed93 7bf4 	vldr	d7, [r3, #976]	; 0x3d0
 8010be4:	eeb0 0a47 	vmov.f32	s0, s14
 8010be8:	eef0 0a67 	vmov.f32	s1, s15
 8010bec:	f7f7 fd8c 	bl	8008708 <can1_ams_cell_voltages_v11s5_encode>
 8010bf0:	e002      	b.n	8010bf8 <can1_ams_cell_voltages_transmit+0xb7c>
 8010bf2:	bf00      	nop
 8010bf4:	20000530 	.word	0x20000530
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	4be0      	ldr	r3, [pc, #896]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010bfe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   can1_tx_ams_cell_voltages.v5s6 = can1_ams_cell_voltages_v5s6_encode(ams_cell_voltages.v5s6);
 8010c02:	463b      	mov	r3, r7
 8010c04:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 8010c08:	eeb0 0a47 	vmov.f32	s0, s14
 8010c0c:	eef0 0a67 	vmov.f32	s1, s15
 8010c10:	f7f7 fdd2 	bl	80087b8 <can1_ams_cell_voltages_v5s6_encode>
 8010c14:	4603      	mov	r3, r0
 8010c16:	461a      	mov	r2, r3
 8010c18:	4bd9      	ldr	r3, [pc, #868]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010c1a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
   can1_tx_ams_cell_voltages.v5s7 = can1_ams_cell_voltages_v5s7_encode(ams_cell_voltages.v5s7);
 8010c1e:	463b      	mov	r3, r7
 8010c20:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8010c24:	eeb0 0a47 	vmov.f32	s0, s14
 8010c28:	eef0 0a67 	vmov.f32	s1, s15
 8010c2c:	f7f7 fe1c 	bl	8008868 <can1_ams_cell_voltages_v5s7_encode>
 8010c30:	4603      	mov	r3, r0
 8010c32:	461a      	mov	r2, r3
 8010c34:	4bd2      	ldr	r3, [pc, #840]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010c36:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   can1_tx_ams_cell_voltages.v11s7 = can1_ams_cell_voltages_v11s7_encode(ams_cell_voltages.v11s7);
 8010c3a:	463b      	mov	r3, r7
 8010c3c:	ed93 7bf6 	vldr	d7, [r3, #984]	; 0x3d8
 8010c40:	eeb0 0a47 	vmov.f32	s0, s14
 8010c44:	eef0 0a67 	vmov.f32	s1, s15
 8010c48:	f7f7 fe66 	bl	8008918 <can1_ams_cell_voltages_v11s7_encode>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	461a      	mov	r2, r3
 8010c50:	4bcb      	ldr	r3, [pc, #812]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010c52:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
   can1_tx_ams_cell_voltages.v5s8 = can1_ams_cell_voltages_v5s8_encode(ams_cell_voltages.v5s8);
 8010c56:	463b      	mov	r3, r7
 8010c58:	ed93 7b6e 	vldr	d7, [r3, #440]	; 0x1b8
 8010c5c:	eeb0 0a47 	vmov.f32	s0, s14
 8010c60:	eef0 0a67 	vmov.f32	s1, s15
 8010c64:	f7f7 feb0 	bl	80089c8 <can1_ams_cell_voltages_v5s8_encode>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	4bc4      	ldr	r3, [pc, #784]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010c6e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
   can1_tx_ams_cell_voltages.v5s9 = can1_ams_cell_voltages_v5s9_encode(ams_cell_voltages.v5s9);
 8010c72:	463b      	mov	r3, r7
 8010c74:	ed93 7b70 	vldr	d7, [r3, #448]	; 0x1c0
 8010c78:	eeb0 0a47 	vmov.f32	s0, s14
 8010c7c:	eef0 0a67 	vmov.f32	s1, s15
 8010c80:	f7f7 fefa 	bl	8008a78 <can1_ams_cell_voltages_v5s9_encode>
 8010c84:	4603      	mov	r3, r0
 8010c86:	461a      	mov	r2, r3
 8010c88:	4bbd      	ldr	r3, [pc, #756]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010c8a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
   can1_tx_ams_cell_voltages.v11s9 = can1_ams_cell_voltages_v11s9_encode(ams_cell_voltages.v11s9);
 8010c8e:	463b      	mov	r3, r7
 8010c90:	ed93 7bf8 	vldr	d7, [r3, #992]	; 0x3e0
 8010c94:	eeb0 0a47 	vmov.f32	s0, s14
 8010c98:	eef0 0a67 	vmov.f32	s1, s15
 8010c9c:	f7f7 ff44 	bl	8008b28 <can1_ams_cell_voltages_v11s9_encode>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	4bb6      	ldr	r3, [pc, #728]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010ca6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
   can1_tx_ams_cell_voltages.v5s10 = can1_ams_cell_voltages_v5s10_encode(ams_cell_voltages.v5s10);
 8010caa:	463b      	mov	r3, r7
 8010cac:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 8010cb0:	eeb0 0a47 	vmov.f32	s0, s14
 8010cb4:	eef0 0a67 	vmov.f32	s1, s15
 8010cb8:	f7f7 ff8e 	bl	8008bd8 <can1_ams_cell_voltages_v5s10_encode>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	4baf      	ldr	r3, [pc, #700]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010cc2:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
   can1_tx_ams_cell_voltages.v5s11 = can1_ams_cell_voltages_v5s11_encode(ams_cell_voltages.v5s11);
 8010cc6:	463b      	mov	r3, r7
 8010cc8:	ed93 7b74 	vldr	d7, [r3, #464]	; 0x1d0
 8010ccc:	eeb0 0a47 	vmov.f32	s0, s14
 8010cd0:	eef0 0a67 	vmov.f32	s1, s15
 8010cd4:	f7f7 ffd8 	bl	8008c88 <can1_ams_cell_voltages_v5s11_encode>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	461a      	mov	r2, r3
 8010cdc:	4ba8      	ldr	r3, [pc, #672]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010cde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
   can1_tx_ams_cell_voltages.v11s11 = can1_ams_cell_voltages_v11s11_encode(ams_cell_voltages.v11s11);
 8010ce2:	463b      	mov	r3, r7
 8010ce4:	ed93 7bfa 	vldr	d7, [r3, #1000]	; 0x3e8
 8010ce8:	eeb0 0a47 	vmov.f32	s0, s14
 8010cec:	eef0 0a67 	vmov.f32	s1, s15
 8010cf0:	f7f8 f822 	bl	8008d38 <can1_ams_cell_voltages_v11s11_encode>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	4ba1      	ldr	r3, [pc, #644]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010cfa:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
   can1_tx_ams_cell_voltages.v5s12 = can1_ams_cell_voltages_v5s12_encode(ams_cell_voltages.v5s12);
 8010cfe:	463b      	mov	r3, r7
 8010d00:	ed93 7b76 	vldr	d7, [r3, #472]	; 0x1d8
 8010d04:	eeb0 0a47 	vmov.f32	s0, s14
 8010d08:	eef0 0a67 	vmov.f32	s1, s15
 8010d0c:	f7f8 f86c 	bl	8008de8 <can1_ams_cell_voltages_v5s12_encode>
 8010d10:	4603      	mov	r3, r0
 8010d12:	461a      	mov	r2, r3
 8010d14:	4b9a      	ldr	r3, [pc, #616]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010d16:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
   can1_tx_ams_cell_voltages.v6s1 = can1_ams_cell_voltages_v6s1_encode(ams_cell_voltages.v6s1);
 8010d1a:	463b      	mov	r3, r7
 8010d1c:	ed93 7b78 	vldr	d7, [r3, #480]	; 0x1e0
 8010d20:	eeb0 0a47 	vmov.f32	s0, s14
 8010d24:	eef0 0a67 	vmov.f32	s1, s15
 8010d28:	f7f8 f8b6 	bl	8008e98 <can1_ams_cell_voltages_v6s1_encode>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	461a      	mov	r2, r3
 8010d30:	4b93      	ldr	r3, [pc, #588]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010d32:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
   can1_tx_ams_cell_voltages.v6s2 = can1_ams_cell_voltages_v6s2_encode(ams_cell_voltages.v6s2);
 8010d36:	463b      	mov	r3, r7
 8010d38:	ed93 7b7a 	vldr	d7, [r3, #488]	; 0x1e8
 8010d3c:	eeb0 0a47 	vmov.f32	s0, s14
 8010d40:	eef0 0a67 	vmov.f32	s1, s15
 8010d44:	f7f8 f900 	bl	8008f48 <can1_ams_cell_voltages_v6s2_encode>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	4b8c      	ldr	r3, [pc, #560]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010d4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   can1_tx_ams_cell_voltages.v6s3 = can1_ams_cell_voltages_v6s3_encode(ams_cell_voltages.v6s3);
 8010d52:	463b      	mov	r3, r7
 8010d54:	ed93 7b7c 	vldr	d7, [r3, #496]	; 0x1f0
 8010d58:	eeb0 0a47 	vmov.f32	s0, s14
 8010d5c:	eef0 0a67 	vmov.f32	s1, s15
 8010d60:	f7f8 f94a 	bl	8008ff8 <can1_ams_cell_voltages_v6s3_encode>
 8010d64:	4603      	mov	r3, r0
 8010d66:	461a      	mov	r2, r3
 8010d68:	4b85      	ldr	r3, [pc, #532]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010d6a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
   can1_tx_ams_cell_voltages.v6s4 = can1_ams_cell_voltages_v6s4_encode(ams_cell_voltages.v6s4);
 8010d6e:	463b      	mov	r3, r7
 8010d70:	ed93 7b7e 	vldr	d7, [r3, #504]	; 0x1f8
 8010d74:	eeb0 0a47 	vmov.f32	s0, s14
 8010d78:	eef0 0a67 	vmov.f32	s1, s15
 8010d7c:	f7f8 f994 	bl	80090a8 <can1_ams_cell_voltages_v6s4_encode>
 8010d80:	4603      	mov	r3, r0
 8010d82:	461a      	mov	r2, r3
 8010d84:	4b7e      	ldr	r3, [pc, #504]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010d86:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
   can1_tx_ams_cell_voltages.v6s5 = can1_ams_cell_voltages_v6s5_encode(ams_cell_voltages.v6s5);
 8010d8a:	463b      	mov	r3, r7
 8010d8c:	ed93 7b80 	vldr	d7, [r3, #512]	; 0x200
 8010d90:	eeb0 0a47 	vmov.f32	s0, s14
 8010d94:	eef0 0a67 	vmov.f32	s1, s15
 8010d98:	f7f8 f9de 	bl	8009158 <can1_ams_cell_voltages_v6s5_encode>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	461a      	mov	r2, r3
 8010da0:	4b77      	ldr	r3, [pc, #476]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010da2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
   can1_tx_ams_cell_voltages.v6s6 = can1_ams_cell_voltages_v6s6_encode(ams_cell_voltages.v6s6);
 8010da6:	463b      	mov	r3, r7
 8010da8:	ed93 7b82 	vldr	d7, [r3, #520]	; 0x208
 8010dac:	eeb0 0a47 	vmov.f32	s0, s14
 8010db0:	eef0 0a67 	vmov.f32	s1, s15
 8010db4:	f7f8 fa28 	bl	8009208 <can1_ams_cell_voltages_v6s6_encode>
 8010db8:	4603      	mov	r3, r0
 8010dba:	461a      	mov	r2, r3
 8010dbc:	4b70      	ldr	r3, [pc, #448]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010dbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   can1_tx_ams_cell_voltages.v6s7 = can1_ams_cell_voltages_v6s7_encode(ams_cell_voltages.v6s7);
 8010dc2:	463b      	mov	r3, r7
 8010dc4:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8010dc8:	eeb0 0a47 	vmov.f32	s0, s14
 8010dcc:	eef0 0a67 	vmov.f32	s1, s15
 8010dd0:	f7f8 fa72 	bl	80092b8 <can1_ams_cell_voltages_v6s7_encode>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	4b69      	ldr	r3, [pc, #420]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010dda:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   can1_tx_ams_cell_voltages.v6s8 = can1_ams_cell_voltages_v6s8_encode(ams_cell_voltages.v6s8);
 8010dde:	463b      	mov	r3, r7
 8010de0:	ed93 7b86 	vldr	d7, [r3, #536]	; 0x218
 8010de4:	eeb0 0a47 	vmov.f32	s0, s14
 8010de8:	eef0 0a67 	vmov.f32	s1, s15
 8010dec:	f7f8 fabc 	bl	8009368 <can1_ams_cell_voltages_v6s8_encode>
 8010df0:	4603      	mov	r3, r0
 8010df2:	461a      	mov	r2, r3
 8010df4:	4b62      	ldr	r3, [pc, #392]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010df6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   can1_tx_ams_cell_voltages.v6s9 = can1_ams_cell_voltages_v6s9_encode(ams_cell_voltages.v6s9);
 8010dfa:	463b      	mov	r3, r7
 8010dfc:	ed93 7b88 	vldr	d7, [r3, #544]	; 0x220
 8010e00:	eeb0 0a47 	vmov.f32	s0, s14
 8010e04:	eef0 0a67 	vmov.f32	s1, s15
 8010e08:	f7f8 fb06 	bl	8009418 <can1_ams_cell_voltages_v6s9_encode>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	461a      	mov	r2, r3
 8010e10:	4b5b      	ldr	r3, [pc, #364]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010e12:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
   can1_tx_ams_cell_voltages.v6s10 = can1_ams_cell_voltages_v6s10_encode(ams_cell_voltages.v6s10);
 8010e16:	463b      	mov	r3, r7
 8010e18:	ed93 7b8a 	vldr	d7, [r3, #552]	; 0x228
 8010e1c:	eeb0 0a47 	vmov.f32	s0, s14
 8010e20:	eef0 0a67 	vmov.f32	s1, s15
 8010e24:	f7f8 fb50 	bl	80094c8 <can1_ams_cell_voltages_v6s10_encode>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	4b54      	ldr	r3, [pc, #336]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010e2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
   can1_tx_ams_cell_voltages.v6s11 = can1_ams_cell_voltages_v6s11_encode(ams_cell_voltages.v6s11);
 8010e32:	463b      	mov	r3, r7
 8010e34:	ed93 7b8c 	vldr	d7, [r3, #560]	; 0x230
 8010e38:	eeb0 0a47 	vmov.f32	s0, s14
 8010e3c:	eef0 0a67 	vmov.f32	s1, s15
 8010e40:	f7f8 fb9a 	bl	8009578 <can1_ams_cell_voltages_v6s11_encode>
 8010e44:	4603      	mov	r3, r0
 8010e46:	461a      	mov	r2, r3
 8010e48:	4b4d      	ldr	r3, [pc, #308]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010e4a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
   can1_tx_ams_cell_voltages.v6s12 = can1_ams_cell_voltages_v6s12_encode(ams_cell_voltages.v6s12);
 8010e4e:	463b      	mov	r3, r7
 8010e50:	ed93 7b8e 	vldr	d7, [r3, #568]	; 0x238
 8010e54:	eeb0 0a47 	vmov.f32	s0, s14
 8010e58:	eef0 0a67 	vmov.f32	s1, s15
 8010e5c:	f7f8 fbe4 	bl	8009628 <can1_ams_cell_voltages_v6s12_encode>
 8010e60:	4603      	mov	r3, r0
 8010e62:	461a      	mov	r2, r3
 8010e64:	4b46      	ldr	r3, [pc, #280]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010e66:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

       can1_tx_ams_cell_voltages.voltage_multiplexor = 0;
 8010e6a:	4b45      	ldr	r3, [pc, #276]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 8010e70:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8010e74:	2207      	movs	r2, #7
 8010e76:	4942      	ldr	r1, [pc, #264]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7f1 f8cb 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8010e7e:	bf00      	nop
 8010e80:	4b40      	ldr	r3, [pc, #256]	; (8010f84 <can1_ams_cell_voltages_transmit+0xf08>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	4618      	mov	r0, r3
 8010e86:	f013 f874 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d0f7      	beq.n	8010e80 <can1_ams_cell_voltages_transmit+0xe04>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010e90:	4b3c      	ldr	r3, [pc, #240]	; (8010f84 <can1_ams_cell_voltages_transmit+0xf08>)
 8010e92:	6818      	ldr	r0, [r3, #0]
 8010e94:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8010e98:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8010e9c:	4b3a      	ldr	r3, [pc, #232]	; (8010f88 <can1_ams_cell_voltages_transmit+0xf0c>)
 8010e9e:	f012 ff8d 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d001      	beq.n	8010eac <can1_ams_cell_voltages_transmit+0xe30>
           Error_Handler();
 8010ea8:	f006 f972 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 1;
 8010eac:	4b34      	ldr	r3, [pc, #208]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010eae:	2201      	movs	r2, #1
 8010eb0:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 8010eb2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8010eb6:	2207      	movs	r2, #7
 8010eb8:	4931      	ldr	r1, [pc, #196]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7f1 f8aa 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8010ec0:	bf00      	nop
 8010ec2:	4b30      	ldr	r3, [pc, #192]	; (8010f84 <can1_ams_cell_voltages_transmit+0xf08>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f013 f853 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d0f7      	beq.n	8010ec2 <can1_ams_cell_voltages_transmit+0xe46>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010ed2:	4b2c      	ldr	r3, [pc, #176]	; (8010f84 <can1_ams_cell_voltages_transmit+0xf08>)
 8010ed4:	6818      	ldr	r0, [r3, #0]
 8010ed6:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8010eda:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8010ede:	4b2a      	ldr	r3, [pc, #168]	; (8010f88 <can1_ams_cell_voltages_transmit+0xf0c>)
 8010ee0:	f012 ff6c 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d001      	beq.n	8010eee <can1_ams_cell_voltages_transmit+0xe72>
           Error_Handler();
 8010eea:	f006 f951 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 2;
 8010eee:	4b24      	ldr	r3, [pc, #144]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010ef0:	2202      	movs	r2, #2
 8010ef2:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 8010ef4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8010ef8:	2207      	movs	r2, #7
 8010efa:	4921      	ldr	r1, [pc, #132]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7f1 f889 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8010f02:	bf00      	nop
 8010f04:	4b1f      	ldr	r3, [pc, #124]	; (8010f84 <can1_ams_cell_voltages_transmit+0xf08>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f013 f832 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d0f7      	beq.n	8010f04 <can1_ams_cell_voltages_transmit+0xe88>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010f14:	4b1b      	ldr	r3, [pc, #108]	; (8010f84 <can1_ams_cell_voltages_transmit+0xf08>)
 8010f16:	6818      	ldr	r0, [r3, #0]
 8010f18:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8010f1c:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8010f20:	4b19      	ldr	r3, [pc, #100]	; (8010f88 <can1_ams_cell_voltages_transmit+0xf0c>)
 8010f22:	f012 ff4b 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8010f26:	4603      	mov	r3, r0
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d001      	beq.n	8010f30 <can1_ams_cell_voltages_transmit+0xeb4>
           Error_Handler();
 8010f2c:	f006 f930 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 3;
 8010f30:	4b13      	ldr	r3, [pc, #76]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f32:	2203      	movs	r2, #3
 8010f34:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 8010f36:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8010f3a:	2207      	movs	r2, #7
 8010f3c:	4910      	ldr	r1, [pc, #64]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7f1 f868 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8010f44:	bf00      	nop
 8010f46:	4b0f      	ldr	r3, [pc, #60]	; (8010f84 <can1_ams_cell_voltages_transmit+0xf08>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f013 f811 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8010f50:	4603      	mov	r3, r0
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d0f7      	beq.n	8010f46 <can1_ams_cell_voltages_transmit+0xeca>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010f56:	4b0b      	ldr	r3, [pc, #44]	; (8010f84 <can1_ams_cell_voltages_transmit+0xf08>)
 8010f58:	6818      	ldr	r0, [r3, #0]
 8010f5a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8010f5e:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8010f62:	4b09      	ldr	r3, [pc, #36]	; (8010f88 <can1_ams_cell_voltages_transmit+0xf0c>)
 8010f64:	f012 ff2a 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d001      	beq.n	8010f72 <can1_ams_cell_voltages_transmit+0xef6>
           Error_Handler();
 8010f6e:	f006 f90f 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 4;
 8010f72:	4b03      	ldr	r3, [pc, #12]	; (8010f80 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f74:	2204      	movs	r2, #4
 8010f76:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 8010f78:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8010f7c:	e006      	b.n	8010f8c <can1_ams_cell_voltages_transmit+0xf10>
 8010f7e:	bf00      	nop
 8010f80:	20000530 	.word	0x20000530
 8010f84:	20000690 	.word	0x20000690
 8010f88:	200003f4 	.word	0x200003f4
 8010f8c:	2207      	movs	r2, #7
 8010f8e:	49c7      	ldr	r1, [pc, #796]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7f1 f83f 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8010f96:	bf00      	nop
 8010f98:	4bc5      	ldr	r3, [pc, #788]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f012 ffe8 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d0f7      	beq.n	8010f98 <can1_ams_cell_voltages_transmit+0xf1c>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010fa8:	4bc1      	ldr	r3, [pc, #772]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 8010faa:	6818      	ldr	r0, [r3, #0]
 8010fac:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8010fb0:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8010fb4:	4bbf      	ldr	r3, [pc, #764]	; (80112b4 <can1_ams_cell_voltages_transmit+0x1238>)
 8010fb6:	f012 ff01 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d001      	beq.n	8010fc4 <can1_ams_cell_voltages_transmit+0xf48>
           Error_Handler();
 8010fc0:	f006 f8e6 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 5;
 8010fc4:	4bb9      	ldr	r3, [pc, #740]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 8010fc6:	2205      	movs	r2, #5
 8010fc8:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 8010fca:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8010fce:	2207      	movs	r2, #7
 8010fd0:	49b6      	ldr	r1, [pc, #728]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7f1 f81e 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8010fd8:	bf00      	nop
 8010fda:	4bb5      	ldr	r3, [pc, #724]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f012 ffc7 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d0f7      	beq.n	8010fda <can1_ams_cell_voltages_transmit+0xf5e>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010fea:	4bb1      	ldr	r3, [pc, #708]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 8010fec:	6818      	ldr	r0, [r3, #0]
 8010fee:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8010ff2:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8010ff6:	4baf      	ldr	r3, [pc, #700]	; (80112b4 <can1_ams_cell_voltages_transmit+0x1238>)
 8010ff8:	f012 fee0 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d001      	beq.n	8011006 <can1_ams_cell_voltages_transmit+0xf8a>
           Error_Handler();
 8011002:	f006 f8c5 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 6;
 8011006:	4ba9      	ldr	r3, [pc, #676]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 8011008:	2206      	movs	r2, #6
 801100a:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 801100c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011010:	2207      	movs	r2, #7
 8011012:	49a6      	ldr	r1, [pc, #664]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 8011014:	4618      	mov	r0, r3
 8011016:	f7f0 fffd 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801101a:	bf00      	nop
 801101c:	4ba4      	ldr	r3, [pc, #656]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	4618      	mov	r0, r3
 8011022:	f012 ffa6 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011026:	4603      	mov	r3, r0
 8011028:	2b00      	cmp	r3, #0
 801102a:	d0f7      	beq.n	801101c <can1_ams_cell_voltages_transmit+0xfa0>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801102c:	4ba0      	ldr	r3, [pc, #640]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 801102e:	6818      	ldr	r0, [r3, #0]
 8011030:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011034:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011038:	4b9e      	ldr	r3, [pc, #632]	; (80112b4 <can1_ams_cell_voltages_transmit+0x1238>)
 801103a:	f012 febf 	bl	8023dbc <HAL_CAN_AddTxMessage>
 801103e:	4603      	mov	r3, r0
 8011040:	2b00      	cmp	r3, #0
 8011042:	d001      	beq.n	8011048 <can1_ams_cell_voltages_transmit+0xfcc>
           Error_Handler();
 8011044:	f006 f8a4 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 7;
 8011048:	4b98      	ldr	r3, [pc, #608]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 801104a:	2207      	movs	r2, #7
 801104c:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 801104e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011052:	2207      	movs	r2, #7
 8011054:	4995      	ldr	r1, [pc, #596]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 8011056:	4618      	mov	r0, r3
 8011058:	f7f0 ffdc 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801105c:	bf00      	nop
 801105e:	4b94      	ldr	r3, [pc, #592]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	4618      	mov	r0, r3
 8011064:	f012 ff85 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011068:	4603      	mov	r3, r0
 801106a:	2b00      	cmp	r3, #0
 801106c:	d0f7      	beq.n	801105e <can1_ams_cell_voltages_transmit+0xfe2>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801106e:	4b90      	ldr	r3, [pc, #576]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 8011070:	6818      	ldr	r0, [r3, #0]
 8011072:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011076:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801107a:	4b8e      	ldr	r3, [pc, #568]	; (80112b4 <can1_ams_cell_voltages_transmit+0x1238>)
 801107c:	f012 fe9e 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011080:	4603      	mov	r3, r0
 8011082:	2b00      	cmp	r3, #0
 8011084:	d001      	beq.n	801108a <can1_ams_cell_voltages_transmit+0x100e>
           Error_Handler();
 8011086:	f006 f883 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 8;
 801108a:	4b88      	ldr	r3, [pc, #544]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 801108c:	2208      	movs	r2, #8
 801108e:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 8011090:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011094:	2207      	movs	r2, #7
 8011096:	4985      	ldr	r1, [pc, #532]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 8011098:	4618      	mov	r0, r3
 801109a:	f7f0 ffbb 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801109e:	bf00      	nop
 80110a0:	4b83      	ldr	r3, [pc, #524]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4618      	mov	r0, r3
 80110a6:	f012 ff64 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d0f7      	beq.n	80110a0 <can1_ams_cell_voltages_transmit+0x1024>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80110b0:	4b7f      	ldr	r3, [pc, #508]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 80110b2:	6818      	ldr	r0, [r3, #0]
 80110b4:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80110b8:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80110bc:	4b7d      	ldr	r3, [pc, #500]	; (80112b4 <can1_ams_cell_voltages_transmit+0x1238>)
 80110be:	f012 fe7d 	bl	8023dbc <HAL_CAN_AddTxMessage>
 80110c2:	4603      	mov	r3, r0
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d001      	beq.n	80110cc <can1_ams_cell_voltages_transmit+0x1050>
           Error_Handler();
 80110c8:	f006 f862 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 9;
 80110cc:	4b77      	ldr	r3, [pc, #476]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 80110ce:	2209      	movs	r2, #9
 80110d0:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 80110d2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80110d6:	2207      	movs	r2, #7
 80110d8:	4974      	ldr	r1, [pc, #464]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 80110da:	4618      	mov	r0, r3
 80110dc:	f7f0 ff9a 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80110e0:	bf00      	nop
 80110e2:	4b73      	ldr	r3, [pc, #460]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	4618      	mov	r0, r3
 80110e8:	f012 ff43 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 80110ec:	4603      	mov	r3, r0
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d0f7      	beq.n	80110e2 <can1_ams_cell_voltages_transmit+0x1066>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80110f2:	4b6f      	ldr	r3, [pc, #444]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 80110f4:	6818      	ldr	r0, [r3, #0]
 80110f6:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80110fa:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80110fe:	4b6d      	ldr	r3, [pc, #436]	; (80112b4 <can1_ams_cell_voltages_transmit+0x1238>)
 8011100:	f012 fe5c 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011104:	4603      	mov	r3, r0
 8011106:	2b00      	cmp	r3, #0
 8011108:	d001      	beq.n	801110e <can1_ams_cell_voltages_transmit+0x1092>
           Error_Handler();
 801110a:	f006 f841 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 10;
 801110e:	4b67      	ldr	r3, [pc, #412]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 8011110:	220a      	movs	r2, #10
 8011112:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 8011114:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011118:	2207      	movs	r2, #7
 801111a:	4964      	ldr	r1, [pc, #400]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 801111c:	4618      	mov	r0, r3
 801111e:	f7f0 ff79 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011122:	bf00      	nop
 8011124:	4b62      	ldr	r3, [pc, #392]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	4618      	mov	r0, r3
 801112a:	f012 ff22 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 801112e:	4603      	mov	r3, r0
 8011130:	2b00      	cmp	r3, #0
 8011132:	d0f7      	beq.n	8011124 <can1_ams_cell_voltages_transmit+0x10a8>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011134:	4b5e      	ldr	r3, [pc, #376]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 8011136:	6818      	ldr	r0, [r3, #0]
 8011138:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801113c:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011140:	4b5c      	ldr	r3, [pc, #368]	; (80112b4 <can1_ams_cell_voltages_transmit+0x1238>)
 8011142:	f012 fe3b 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011146:	4603      	mov	r3, r0
 8011148:	2b00      	cmp	r3, #0
 801114a:	d001      	beq.n	8011150 <can1_ams_cell_voltages_transmit+0x10d4>
           Error_Handler();
 801114c:	f006 f820 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 11;
 8011150:	4b56      	ldr	r3, [pc, #344]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 8011152:	220b      	movs	r2, #11
 8011154:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 8011156:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801115a:	2207      	movs	r2, #7
 801115c:	4953      	ldr	r1, [pc, #332]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 801115e:	4618      	mov	r0, r3
 8011160:	f7f0 ff58 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011164:	bf00      	nop
 8011166:	4b52      	ldr	r3, [pc, #328]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	4618      	mov	r0, r3
 801116c:	f012 ff01 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011170:	4603      	mov	r3, r0
 8011172:	2b00      	cmp	r3, #0
 8011174:	d0f7      	beq.n	8011166 <can1_ams_cell_voltages_transmit+0x10ea>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011176:	4b4e      	ldr	r3, [pc, #312]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 8011178:	6818      	ldr	r0, [r3, #0]
 801117a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801117e:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011182:	4b4c      	ldr	r3, [pc, #304]	; (80112b4 <can1_ams_cell_voltages_transmit+0x1238>)
 8011184:	f012 fe1a 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011188:	4603      	mov	r3, r0
 801118a:	2b00      	cmp	r3, #0
 801118c:	d001      	beq.n	8011192 <can1_ams_cell_voltages_transmit+0x1116>
           Error_Handler();
 801118e:	f005 ffff 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 12;
 8011192:	4b46      	ldr	r3, [pc, #280]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 8011194:	220c      	movs	r2, #12
 8011196:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 8011198:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801119c:	2207      	movs	r2, #7
 801119e:	4943      	ldr	r1, [pc, #268]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7f0 ff37 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80111a6:	bf00      	nop
 80111a8:	4b41      	ldr	r3, [pc, #260]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	4618      	mov	r0, r3
 80111ae:	f012 fee0 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 80111b2:	4603      	mov	r3, r0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d0f7      	beq.n	80111a8 <can1_ams_cell_voltages_transmit+0x112c>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80111b8:	4b3d      	ldr	r3, [pc, #244]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 80111ba:	6818      	ldr	r0, [r3, #0]
 80111bc:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80111c0:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80111c4:	4b3b      	ldr	r3, [pc, #236]	; (80112b4 <can1_ams_cell_voltages_transmit+0x1238>)
 80111c6:	f012 fdf9 	bl	8023dbc <HAL_CAN_AddTxMessage>
 80111ca:	4603      	mov	r3, r0
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d001      	beq.n	80111d4 <can1_ams_cell_voltages_transmit+0x1158>
           Error_Handler();
 80111d0:	f005 ffde 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 13;
 80111d4:	4b35      	ldr	r3, [pc, #212]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 80111d6:	220d      	movs	r2, #13
 80111d8:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 80111da:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80111de:	2207      	movs	r2, #7
 80111e0:	4932      	ldr	r1, [pc, #200]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7f0 ff16 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80111e8:	bf00      	nop
 80111ea:	4b31      	ldr	r3, [pc, #196]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	4618      	mov	r0, r3
 80111f0:	f012 febf 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d0f7      	beq.n	80111ea <can1_ams_cell_voltages_transmit+0x116e>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80111fa:	4b2d      	ldr	r3, [pc, #180]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 80111fc:	6818      	ldr	r0, [r3, #0]
 80111fe:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011202:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011206:	4b2b      	ldr	r3, [pc, #172]	; (80112b4 <can1_ams_cell_voltages_transmit+0x1238>)
 8011208:	f012 fdd8 	bl	8023dbc <HAL_CAN_AddTxMessage>
 801120c:	4603      	mov	r3, r0
 801120e:	2b00      	cmp	r3, #0
 8011210:	d001      	beq.n	8011216 <can1_ams_cell_voltages_transmit+0x119a>
           Error_Handler();
 8011212:	f005 ffbd 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 14;
 8011216:	4b25      	ldr	r3, [pc, #148]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 8011218:	220e      	movs	r2, #14
 801121a:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 801121c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011220:	2207      	movs	r2, #7
 8011222:	4922      	ldr	r1, [pc, #136]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 8011224:	4618      	mov	r0, r3
 8011226:	f7f0 fef5 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801122a:	bf00      	nop
 801122c:	4b20      	ldr	r3, [pc, #128]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	4618      	mov	r0, r3
 8011232:	f012 fe9e 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011236:	4603      	mov	r3, r0
 8011238:	2b00      	cmp	r3, #0
 801123a:	d0f7      	beq.n	801122c <can1_ams_cell_voltages_transmit+0x11b0>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801123c:	4b1c      	ldr	r3, [pc, #112]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 801123e:	6818      	ldr	r0, [r3, #0]
 8011240:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011244:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011248:	4b1a      	ldr	r3, [pc, #104]	; (80112b4 <can1_ams_cell_voltages_transmit+0x1238>)
 801124a:	f012 fdb7 	bl	8023dbc <HAL_CAN_AddTxMessage>
 801124e:	4603      	mov	r3, r0
 8011250:	2b00      	cmp	r3, #0
 8011252:	d001      	beq.n	8011258 <can1_ams_cell_voltages_transmit+0x11dc>
           Error_Handler();
 8011254:	f005 ff9c 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 15;
 8011258:	4b14      	ldr	r3, [pc, #80]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 801125a:	220f      	movs	r2, #15
 801125c:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 801125e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011262:	2207      	movs	r2, #7
 8011264:	4911      	ldr	r1, [pc, #68]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 8011266:	4618      	mov	r0, r3
 8011268:	f7f0 fed4 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801126c:	bf00      	nop
 801126e:	4b10      	ldr	r3, [pc, #64]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	4618      	mov	r0, r3
 8011274:	f012 fe7d 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011278:	4603      	mov	r3, r0
 801127a:	2b00      	cmp	r3, #0
 801127c:	d0f7      	beq.n	801126e <can1_ams_cell_voltages_transmit+0x11f2>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801127e:	4b0c      	ldr	r3, [pc, #48]	; (80112b0 <can1_ams_cell_voltages_transmit+0x1234>)
 8011280:	6818      	ldr	r0, [r3, #0]
 8011282:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011286:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801128a:	4b0a      	ldr	r3, [pc, #40]	; (80112b4 <can1_ams_cell_voltages_transmit+0x1238>)
 801128c:	f012 fd96 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011290:	4603      	mov	r3, r0
 8011292:	2b00      	cmp	r3, #0
 8011294:	d001      	beq.n	801129a <can1_ams_cell_voltages_transmit+0x121e>
           Error_Handler();
 8011296:	f005 ff7b 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 16;
 801129a:	4b04      	ldr	r3, [pc, #16]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 801129c:	2210      	movs	r2, #16
 801129e:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 80112a0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80112a4:	2207      	movs	r2, #7
 80112a6:	4901      	ldr	r1, [pc, #4]	; (80112ac <can1_ams_cell_voltages_transmit+0x1230>)
 80112a8:	4618      	mov	r0, r3
 80112aa:	e005      	b.n	80112b8 <can1_ams_cell_voltages_transmit+0x123c>
 80112ac:	20000530 	.word	0x20000530
 80112b0:	20000690 	.word	0x20000690
 80112b4:	200003f4 	.word	0x200003f4
 80112b8:	f7f0 feac 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80112bc:	bf00      	nop
 80112be:	4b81      	ldr	r3, [pc, #516]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	4618      	mov	r0, r3
 80112c4:	f012 fe55 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 80112c8:	4603      	mov	r3, r0
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d0f7      	beq.n	80112be <can1_ams_cell_voltages_transmit+0x1242>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80112ce:	4b7d      	ldr	r3, [pc, #500]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 80112d0:	6818      	ldr	r0, [r3, #0]
 80112d2:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80112d6:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80112da:	4b7b      	ldr	r3, [pc, #492]	; (80114c8 <can1_ams_cell_voltages_transmit+0x144c>)
 80112dc:	f012 fd6e 	bl	8023dbc <HAL_CAN_AddTxMessage>
 80112e0:	4603      	mov	r3, r0
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d001      	beq.n	80112ea <can1_ams_cell_voltages_transmit+0x126e>
           Error_Handler();
 80112e6:	f005 ff53 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 17;
 80112ea:	4b78      	ldr	r3, [pc, #480]	; (80114cc <can1_ams_cell_voltages_transmit+0x1450>)
 80112ec:	2211      	movs	r2, #17
 80112ee:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 80112f0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80112f4:	2207      	movs	r2, #7
 80112f6:	4975      	ldr	r1, [pc, #468]	; (80114cc <can1_ams_cell_voltages_transmit+0x1450>)
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7f0 fe8b 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80112fe:	bf00      	nop
 8011300:	4b70      	ldr	r3, [pc, #448]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4618      	mov	r0, r3
 8011306:	f012 fe34 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 801130a:	4603      	mov	r3, r0
 801130c:	2b00      	cmp	r3, #0
 801130e:	d0f7      	beq.n	8011300 <can1_ams_cell_voltages_transmit+0x1284>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011310:	4b6c      	ldr	r3, [pc, #432]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 8011312:	6818      	ldr	r0, [r3, #0]
 8011314:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011318:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801131c:	4b6a      	ldr	r3, [pc, #424]	; (80114c8 <can1_ams_cell_voltages_transmit+0x144c>)
 801131e:	f012 fd4d 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011322:	4603      	mov	r3, r0
 8011324:	2b00      	cmp	r3, #0
 8011326:	d001      	beq.n	801132c <can1_ams_cell_voltages_transmit+0x12b0>
           Error_Handler();
 8011328:	f005 ff32 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 18;
 801132c:	4b67      	ldr	r3, [pc, #412]	; (80114cc <can1_ams_cell_voltages_transmit+0x1450>)
 801132e:	2212      	movs	r2, #18
 8011330:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 8011332:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011336:	2207      	movs	r2, #7
 8011338:	4964      	ldr	r1, [pc, #400]	; (80114cc <can1_ams_cell_voltages_transmit+0x1450>)
 801133a:	4618      	mov	r0, r3
 801133c:	f7f0 fe6a 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011340:	bf00      	nop
 8011342:	4b60      	ldr	r3, [pc, #384]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	4618      	mov	r0, r3
 8011348:	f012 fe13 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 801134c:	4603      	mov	r3, r0
 801134e:	2b00      	cmp	r3, #0
 8011350:	d0f7      	beq.n	8011342 <can1_ams_cell_voltages_transmit+0x12c6>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011352:	4b5c      	ldr	r3, [pc, #368]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 8011354:	6818      	ldr	r0, [r3, #0]
 8011356:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801135a:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801135e:	4b5a      	ldr	r3, [pc, #360]	; (80114c8 <can1_ams_cell_voltages_transmit+0x144c>)
 8011360:	f012 fd2c 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011364:	4603      	mov	r3, r0
 8011366:	2b00      	cmp	r3, #0
 8011368:	d001      	beq.n	801136e <can1_ams_cell_voltages_transmit+0x12f2>
           Error_Handler();
 801136a:	f005 ff11 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 19;
 801136e:	4b57      	ldr	r3, [pc, #348]	; (80114cc <can1_ams_cell_voltages_transmit+0x1450>)
 8011370:	2213      	movs	r2, #19
 8011372:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 8011374:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011378:	2207      	movs	r2, #7
 801137a:	4954      	ldr	r1, [pc, #336]	; (80114cc <can1_ams_cell_voltages_transmit+0x1450>)
 801137c:	4618      	mov	r0, r3
 801137e:	f7f0 fe49 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011382:	bf00      	nop
 8011384:	4b4f      	ldr	r3, [pc, #316]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	4618      	mov	r0, r3
 801138a:	f012 fdf2 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 801138e:	4603      	mov	r3, r0
 8011390:	2b00      	cmp	r3, #0
 8011392:	d0f7      	beq.n	8011384 <can1_ams_cell_voltages_transmit+0x1308>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011394:	4b4b      	ldr	r3, [pc, #300]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 8011396:	6818      	ldr	r0, [r3, #0]
 8011398:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801139c:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80113a0:	4b49      	ldr	r3, [pc, #292]	; (80114c8 <can1_ams_cell_voltages_transmit+0x144c>)
 80113a2:	f012 fd0b 	bl	8023dbc <HAL_CAN_AddTxMessage>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d001      	beq.n	80113b0 <can1_ams_cell_voltages_transmit+0x1334>
           Error_Handler();
 80113ac:	f005 fef0 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 20;
 80113b0:	4b46      	ldr	r3, [pc, #280]	; (80114cc <can1_ams_cell_voltages_transmit+0x1450>)
 80113b2:	2214      	movs	r2, #20
 80113b4:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 80113b6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80113ba:	2207      	movs	r2, #7
 80113bc:	4943      	ldr	r1, [pc, #268]	; (80114cc <can1_ams_cell_voltages_transmit+0x1450>)
 80113be:	4618      	mov	r0, r3
 80113c0:	f7f0 fe28 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80113c4:	bf00      	nop
 80113c6:	4b3f      	ldr	r3, [pc, #252]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	4618      	mov	r0, r3
 80113cc:	f012 fdd1 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 80113d0:	4603      	mov	r3, r0
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d0f7      	beq.n	80113c6 <can1_ams_cell_voltages_transmit+0x134a>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80113d6:	4b3b      	ldr	r3, [pc, #236]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 80113d8:	6818      	ldr	r0, [r3, #0]
 80113da:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80113de:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80113e2:	4b39      	ldr	r3, [pc, #228]	; (80114c8 <can1_ams_cell_voltages_transmit+0x144c>)
 80113e4:	f012 fcea 	bl	8023dbc <HAL_CAN_AddTxMessage>
 80113e8:	4603      	mov	r3, r0
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d001      	beq.n	80113f2 <can1_ams_cell_voltages_transmit+0x1376>
           Error_Handler();
 80113ee:	f005 fecf 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 21;
 80113f2:	4b36      	ldr	r3, [pc, #216]	; (80114cc <can1_ams_cell_voltages_transmit+0x1450>)
 80113f4:	2215      	movs	r2, #21
 80113f6:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 80113f8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80113fc:	2207      	movs	r2, #7
 80113fe:	4933      	ldr	r1, [pc, #204]	; (80114cc <can1_ams_cell_voltages_transmit+0x1450>)
 8011400:	4618      	mov	r0, r3
 8011402:	f7f0 fe07 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011406:	bf00      	nop
 8011408:	4b2e      	ldr	r3, [pc, #184]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	4618      	mov	r0, r3
 801140e:	f012 fdb0 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011412:	4603      	mov	r3, r0
 8011414:	2b00      	cmp	r3, #0
 8011416:	d0f7      	beq.n	8011408 <can1_ams_cell_voltages_transmit+0x138c>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011418:	4b2a      	ldr	r3, [pc, #168]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 801141a:	6818      	ldr	r0, [r3, #0]
 801141c:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011420:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011424:	4b28      	ldr	r3, [pc, #160]	; (80114c8 <can1_ams_cell_voltages_transmit+0x144c>)
 8011426:	f012 fcc9 	bl	8023dbc <HAL_CAN_AddTxMessage>
 801142a:	4603      	mov	r3, r0
 801142c:	2b00      	cmp	r3, #0
 801142e:	d001      	beq.n	8011434 <can1_ams_cell_voltages_transmit+0x13b8>
           Error_Handler();
 8011430:	f005 feae 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 22;
 8011434:	4b25      	ldr	r3, [pc, #148]	; (80114cc <can1_ams_cell_voltages_transmit+0x1450>)
 8011436:	2216      	movs	r2, #22
 8011438:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 801143a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801143e:	2207      	movs	r2, #7
 8011440:	4922      	ldr	r1, [pc, #136]	; (80114cc <can1_ams_cell_voltages_transmit+0x1450>)
 8011442:	4618      	mov	r0, r3
 8011444:	f7f0 fde6 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011448:	bf00      	nop
 801144a:	4b1e      	ldr	r3, [pc, #120]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	4618      	mov	r0, r3
 8011450:	f012 fd8f 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011454:	4603      	mov	r3, r0
 8011456:	2b00      	cmp	r3, #0
 8011458:	d0f7      	beq.n	801144a <can1_ams_cell_voltages_transmit+0x13ce>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801145a:	4b1a      	ldr	r3, [pc, #104]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 801145c:	6818      	ldr	r0, [r3, #0]
 801145e:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011462:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011466:	4b18      	ldr	r3, [pc, #96]	; (80114c8 <can1_ams_cell_voltages_transmit+0x144c>)
 8011468:	f012 fca8 	bl	8023dbc <HAL_CAN_AddTxMessage>
 801146c:	4603      	mov	r3, r0
 801146e:	2b00      	cmp	r3, #0
 8011470:	d001      	beq.n	8011476 <can1_ams_cell_voltages_transmit+0x13fa>
           Error_Handler();
 8011472:	f005 fe8d 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_voltages.voltage_multiplexor = 23;
 8011476:	4b15      	ldr	r3, [pc, #84]	; (80114cc <can1_ams_cell_voltages_transmit+0x1450>)
 8011478:	2217      	movs	r2, #23
 801147a:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_tx_ams_cell_voltages, 7);
 801147c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011480:	2207      	movs	r2, #7
 8011482:	4912      	ldr	r1, [pc, #72]	; (80114cc <can1_ams_cell_voltages_transmit+0x1450>)
 8011484:	4618      	mov	r0, r3
 8011486:	f7f0 fdc5 	bl	8002014 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801148a:	bf00      	nop
 801148c:	4b0d      	ldr	r3, [pc, #52]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	4618      	mov	r0, r3
 8011492:	f012 fd6e 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011496:	4603      	mov	r3, r0
 8011498:	2b00      	cmp	r3, #0
 801149a:	d0f7      	beq.n	801148c <can1_ams_cell_voltages_transmit+0x1410>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801149c:	4b09      	ldr	r3, [pc, #36]	; (80114c4 <can1_ams_cell_voltages_transmit+0x1448>)
 801149e:	6818      	ldr	r0, [r3, #0]
 80114a0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80114a4:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80114a8:	4b07      	ldr	r3, [pc, #28]	; (80114c8 <can1_ams_cell_voltages_transmit+0x144c>)
 80114aa:	f012 fc87 	bl	8023dbc <HAL_CAN_AddTxMessage>
 80114ae:	4603      	mov	r3, r0
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d001      	beq.n	80114b8 <can1_ams_cell_voltages_transmit+0x143c>
           Error_Handler();
 80114b4:	f005 fe6c 	bl	8017190 <Error_Handler>
       }
}
 80114b8:	bf00      	nop
 80114ba:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
 80114c2:	bf00      	nop
 80114c4:	20000690 	.word	0x20000690
 80114c8:	200003f4 	.word	0x200003f4
 80114cc:	20000530 	.word	0x20000530

080114d0 <can1_ams_cell_temperatures_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_temperatures_transmit() {
 80114d0:	b580      	push	{r7, lr}
 80114d2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80114d6:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 80114d8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80114dc:	2200      	movs	r2, #0
 80114de:	601a      	str	r2, [r3, #0]
 80114e0:	605a      	str	r2, [r3, #4]
 80114e2:	609a      	str	r2, [r3, #8]
 80114e4:	60da      	str	r2, [r3, #12]
 80114e6:	611a      	str	r2, [r3, #16]
 80114e8:	615a      	str	r2, [r3, #20]
 80114ea:	2322      	movs	r3, #34	; 0x22
 80114ec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80114f0:	2308      	movs	r3, #8
 80114f2:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
       .StdId = 34,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_cell_temperatures_t ams_cell_temperatures;
   can1_ams_cell_temperatures_tx_callback(&ams_cell_temperatures);
 80114f6:	463b      	mov	r3, r7
 80114f8:	4618      	mov	r0, r3
 80114fa:	f004 fb55 	bl	8015ba8 <can1_ams_cell_temperatures_tx_callback>

   can1_tx_ams_cell_temperatures.temperature_multiplexor = can1_ams_cell_temperatures_temperature_multiplexor_encode(ams_cell_temperatures.temperature_multiplexor);
 80114fe:	463b      	mov	r3, r7
 8011500:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 8011504:	4618      	mov	r0, r3
 8011506:	f7ee ffef 	bl	80004e8 <__aeabi_ui2d>
 801150a:	4602      	mov	r2, r0
 801150c:	460b      	mov	r3, r1
 801150e:	ec43 2b10 	vmov	d0, r2, r3
 8011512:	f7fa fc1f 	bl	800bd54 <can1_ams_cell_temperatures_temperature_multiplexor_encode>
 8011516:	4603      	mov	r3, r0
 8011518:	461a      	mov	r2, r3
 801151a:	4bde      	ldr	r3, [pc, #888]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801151c:	701a      	strb	r2, [r3, #0]
   can1_tx_ams_cell_temperatures.t1s1 = can1_ams_cell_temperatures_t1s1_encode(ams_cell_temperatures.t1s1);
 801151e:	463b      	mov	r3, r7
 8011520:	ed93 7b00 	vldr	d7, [r3]
 8011524:	eeb0 0a47 	vmov.f32	s0, s14
 8011528:	eef0 0a67 	vmov.f32	s1, s15
 801152c:	f7fa fc24 	bl	800bd78 <can1_ams_cell_temperatures_t1s1_encode>
 8011530:	4603      	mov	r3, r0
 8011532:	461a      	mov	r2, r3
 8011534:	4bd7      	ldr	r3, [pc, #860]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011536:	805a      	strh	r2, [r3, #2]
   can1_tx_ams_cell_temperatures.t1s2 = can1_ams_cell_temperatures_t1s2_encode(ams_cell_temperatures.t1s2);
 8011538:	463b      	mov	r3, r7
 801153a:	ed93 7b02 	vldr	d7, [r3, #8]
 801153e:	eeb0 0a47 	vmov.f32	s0, s14
 8011542:	eef0 0a67 	vmov.f32	s1, s15
 8011546:	f7fa fc6f 	bl	800be28 <can1_ams_cell_temperatures_t1s2_encode>
 801154a:	4603      	mov	r3, r0
 801154c:	461a      	mov	r2, r3
 801154e:	4bd1      	ldr	r3, [pc, #836]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011550:	809a      	strh	r2, [r3, #4]
   can1_tx_ams_cell_temperatures.t1s3 = can1_ams_cell_temperatures_t1s3_encode(ams_cell_temperatures.t1s3);
 8011552:	463b      	mov	r3, r7
 8011554:	ed93 7b04 	vldr	d7, [r3, #16]
 8011558:	eeb0 0a47 	vmov.f32	s0, s14
 801155c:	eef0 0a67 	vmov.f32	s1, s15
 8011560:	f7fa fcba 	bl	800bed8 <can1_ams_cell_temperatures_t1s3_encode>
 8011564:	4603      	mov	r3, r0
 8011566:	461a      	mov	r2, r3
 8011568:	4bca      	ldr	r3, [pc, #808]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801156a:	80da      	strh	r2, [r3, #6]
   can1_tx_ams_cell_temperatures.t1s4 = can1_ams_cell_temperatures_t1s4_encode(ams_cell_temperatures.t1s4);
 801156c:	463b      	mov	r3, r7
 801156e:	ed93 7b06 	vldr	d7, [r3, #24]
 8011572:	eeb0 0a47 	vmov.f32	s0, s14
 8011576:	eef0 0a67 	vmov.f32	s1, s15
 801157a:	f7fa fd05 	bl	800bf88 <can1_ams_cell_temperatures_t1s4_encode>
 801157e:	4603      	mov	r3, r0
 8011580:	461a      	mov	r2, r3
 8011582:	4bc4      	ldr	r3, [pc, #784]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011584:	811a      	strh	r2, [r3, #8]
   can1_tx_ams_cell_temperatures.t1s5 = can1_ams_cell_temperatures_t1s5_encode(ams_cell_temperatures.t1s5);
 8011586:	463b      	mov	r3, r7
 8011588:	ed93 7b08 	vldr	d7, [r3, #32]
 801158c:	eeb0 0a47 	vmov.f32	s0, s14
 8011590:	eef0 0a67 	vmov.f32	s1, s15
 8011594:	f7fa fd50 	bl	800c038 <can1_ams_cell_temperatures_t1s5_encode>
 8011598:	4603      	mov	r3, r0
 801159a:	461a      	mov	r2, r3
 801159c:	4bbd      	ldr	r3, [pc, #756]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801159e:	815a      	strh	r2, [r3, #10]
   can1_tx_ams_cell_temperatures.t1s6 = can1_ams_cell_temperatures_t1s6_encode(ams_cell_temperatures.t1s6);
 80115a0:	463b      	mov	r3, r7
 80115a2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80115a6:	eeb0 0a47 	vmov.f32	s0, s14
 80115aa:	eef0 0a67 	vmov.f32	s1, s15
 80115ae:	f7fa fd9b 	bl	800c0e8 <can1_ams_cell_temperatures_t1s6_encode>
 80115b2:	4603      	mov	r3, r0
 80115b4:	461a      	mov	r2, r3
 80115b6:	4bb7      	ldr	r3, [pc, #732]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80115b8:	819a      	strh	r2, [r3, #12]
   can1_tx_ams_cell_temperatures.t1s7 = can1_ams_cell_temperatures_t1s7_encode(ams_cell_temperatures.t1s7);
 80115ba:	463b      	mov	r3, r7
 80115bc:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80115c0:	eeb0 0a47 	vmov.f32	s0, s14
 80115c4:	eef0 0a67 	vmov.f32	s1, s15
 80115c8:	f7fa fde6 	bl	800c198 <can1_ams_cell_temperatures_t1s7_encode>
 80115cc:	4603      	mov	r3, r0
 80115ce:	461a      	mov	r2, r3
 80115d0:	4bb0      	ldr	r3, [pc, #704]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80115d2:	81da      	strh	r2, [r3, #14]
   can1_tx_ams_cell_temperatures.t1s8 = can1_ams_cell_temperatures_t1s8_encode(ams_cell_temperatures.t1s8);
 80115d4:	463b      	mov	r3, r7
 80115d6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80115da:	eeb0 0a47 	vmov.f32	s0, s14
 80115de:	eef0 0a67 	vmov.f32	s1, s15
 80115e2:	f7fa fe31 	bl	800c248 <can1_ams_cell_temperatures_t1s8_encode>
 80115e6:	4603      	mov	r3, r0
 80115e8:	461a      	mov	r2, r3
 80115ea:	4baa      	ldr	r3, [pc, #680]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80115ec:	821a      	strh	r2, [r3, #16]
   can1_tx_ams_cell_temperatures.t1s9 = can1_ams_cell_temperatures_t1s9_encode(ams_cell_temperatures.t1s9);
 80115ee:	463b      	mov	r3, r7
 80115f0:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80115f4:	eeb0 0a47 	vmov.f32	s0, s14
 80115f8:	eef0 0a67 	vmov.f32	s1, s15
 80115fc:	f7fa fe7c 	bl	800c2f8 <can1_ams_cell_temperatures_t1s9_encode>
 8011600:	4603      	mov	r3, r0
 8011602:	461a      	mov	r2, r3
 8011604:	4ba3      	ldr	r3, [pc, #652]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011606:	825a      	strh	r2, [r3, #18]
   can1_tx_ams_cell_temperatures.t1s10 = can1_ams_cell_temperatures_t1s10_encode(ams_cell_temperatures.t1s10);
 8011608:	463b      	mov	r3, r7
 801160a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 801160e:	eeb0 0a47 	vmov.f32	s0, s14
 8011612:	eef0 0a67 	vmov.f32	s1, s15
 8011616:	f7fa fec7 	bl	800c3a8 <can1_ams_cell_temperatures_t1s10_encode>
 801161a:	4603      	mov	r3, r0
 801161c:	461a      	mov	r2, r3
 801161e:	4b9d      	ldr	r3, [pc, #628]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011620:	829a      	strh	r2, [r3, #20]
   can1_tx_ams_cell_temperatures.t1s11 = can1_ams_cell_temperatures_t1s11_encode(ams_cell_temperatures.t1s11);
 8011622:	463b      	mov	r3, r7
 8011624:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8011628:	eeb0 0a47 	vmov.f32	s0, s14
 801162c:	eef0 0a67 	vmov.f32	s1, s15
 8011630:	f7fa ff12 	bl	800c458 <can1_ams_cell_temperatures_t1s11_encode>
 8011634:	4603      	mov	r3, r0
 8011636:	461a      	mov	r2, r3
 8011638:	4b96      	ldr	r3, [pc, #600]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801163a:	82da      	strh	r2, [r3, #22]
   can1_tx_ams_cell_temperatures.t1s12 = can1_ams_cell_temperatures_t1s12_encode(ams_cell_temperatures.t1s12);
 801163c:	463b      	mov	r3, r7
 801163e:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8011642:	eeb0 0a47 	vmov.f32	s0, s14
 8011646:	eef0 0a67 	vmov.f32	s1, s15
 801164a:	f7fa ff5d 	bl	800c508 <can1_ams_cell_temperatures_t1s12_encode>
 801164e:	4603      	mov	r3, r0
 8011650:	461a      	mov	r2, r3
 8011652:	4b90      	ldr	r3, [pc, #576]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011654:	831a      	strh	r2, [r3, #24]
   can1_tx_ams_cell_temperatures.t2s1 = can1_ams_cell_temperatures_t2s1_encode(ams_cell_temperatures.t2s1);
 8011656:	463b      	mov	r3, r7
 8011658:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 801165c:	eeb0 0a47 	vmov.f32	s0, s14
 8011660:	eef0 0a67 	vmov.f32	s1, s15
 8011664:	f7fa ffa8 	bl	800c5b8 <can1_ams_cell_temperatures_t2s1_encode>
 8011668:	4603      	mov	r3, r0
 801166a:	461a      	mov	r2, r3
 801166c:	4b89      	ldr	r3, [pc, #548]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801166e:	835a      	strh	r2, [r3, #26]
   can1_tx_ams_cell_temperatures.t2s2 = can1_ams_cell_temperatures_t2s2_encode(ams_cell_temperatures.t2s2);
 8011670:	463b      	mov	r3, r7
 8011672:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8011676:	eeb0 0a47 	vmov.f32	s0, s14
 801167a:	eef0 0a67 	vmov.f32	s1, s15
 801167e:	f7fa fff3 	bl	800c668 <can1_ams_cell_temperatures_t2s2_encode>
 8011682:	4603      	mov	r3, r0
 8011684:	461a      	mov	r2, r3
 8011686:	4b83      	ldr	r3, [pc, #524]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011688:	839a      	strh	r2, [r3, #28]
   can1_tx_ams_cell_temperatures.t2s3 = can1_ams_cell_temperatures_t2s3_encode(ams_cell_temperatures.t2s3);
 801168a:	463b      	mov	r3, r7
 801168c:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8011690:	eeb0 0a47 	vmov.f32	s0, s14
 8011694:	eef0 0a67 	vmov.f32	s1, s15
 8011698:	f7fb f83e 	bl	800c718 <can1_ams_cell_temperatures_t2s3_encode>
 801169c:	4603      	mov	r3, r0
 801169e:	461a      	mov	r2, r3
 80116a0:	4b7c      	ldr	r3, [pc, #496]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80116a2:	83da      	strh	r2, [r3, #30]
   can1_tx_ams_cell_temperatures.t2s4 = can1_ams_cell_temperatures_t2s4_encode(ams_cell_temperatures.t2s4);
 80116a4:	463b      	mov	r3, r7
 80116a6:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80116aa:	eeb0 0a47 	vmov.f32	s0, s14
 80116ae:	eef0 0a67 	vmov.f32	s1, s15
 80116b2:	f7fb f889 	bl	800c7c8 <can1_ams_cell_temperatures_t2s4_encode>
 80116b6:	4603      	mov	r3, r0
 80116b8:	461a      	mov	r2, r3
 80116ba:	4b76      	ldr	r3, [pc, #472]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80116bc:	841a      	strh	r2, [r3, #32]
   can1_tx_ams_cell_temperatures.t2s5 = can1_ams_cell_temperatures_t2s5_encode(ams_cell_temperatures.t2s5);
 80116be:	463b      	mov	r3, r7
 80116c0:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80116c4:	eeb0 0a47 	vmov.f32	s0, s14
 80116c8:	eef0 0a67 	vmov.f32	s1, s15
 80116cc:	f7fb f8d4 	bl	800c878 <can1_ams_cell_temperatures_t2s5_encode>
 80116d0:	4603      	mov	r3, r0
 80116d2:	461a      	mov	r2, r3
 80116d4:	4b6f      	ldr	r3, [pc, #444]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80116d6:	845a      	strh	r2, [r3, #34]	; 0x22
   can1_tx_ams_cell_temperatures.t2s6 = can1_ams_cell_temperatures_t2s6_encode(ams_cell_temperatures.t2s6);
 80116d8:	463b      	mov	r3, r7
 80116da:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80116de:	eeb0 0a47 	vmov.f32	s0, s14
 80116e2:	eef0 0a67 	vmov.f32	s1, s15
 80116e6:	f7fb f91f 	bl	800c928 <can1_ams_cell_temperatures_t2s6_encode>
 80116ea:	4603      	mov	r3, r0
 80116ec:	461a      	mov	r2, r3
 80116ee:	4b69      	ldr	r3, [pc, #420]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80116f0:	849a      	strh	r2, [r3, #36]	; 0x24
   can1_tx_ams_cell_temperatures.t2s7 = can1_ams_cell_temperatures_t2s7_encode(ams_cell_temperatures.t2s7);
 80116f2:	463b      	mov	r3, r7
 80116f4:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80116f8:	eeb0 0a47 	vmov.f32	s0, s14
 80116fc:	eef0 0a67 	vmov.f32	s1, s15
 8011700:	f7fb f96a 	bl	800c9d8 <can1_ams_cell_temperatures_t2s7_encode>
 8011704:	4603      	mov	r3, r0
 8011706:	461a      	mov	r2, r3
 8011708:	4b62      	ldr	r3, [pc, #392]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801170a:	84da      	strh	r2, [r3, #38]	; 0x26
   can1_tx_ams_cell_temperatures.t2s8 = can1_ams_cell_temperatures_t2s8_encode(ams_cell_temperatures.t2s8);
 801170c:	463b      	mov	r3, r7
 801170e:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8011712:	eeb0 0a47 	vmov.f32	s0, s14
 8011716:	eef0 0a67 	vmov.f32	s1, s15
 801171a:	f7fb f9b5 	bl	800ca88 <can1_ams_cell_temperatures_t2s8_encode>
 801171e:	4603      	mov	r3, r0
 8011720:	461a      	mov	r2, r3
 8011722:	4b5c      	ldr	r3, [pc, #368]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011724:	851a      	strh	r2, [r3, #40]	; 0x28
   can1_tx_ams_cell_temperatures.t2s9 = can1_ams_cell_temperatures_t2s9_encode(ams_cell_temperatures.t2s9);
 8011726:	463b      	mov	r3, r7
 8011728:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 801172c:	eeb0 0a47 	vmov.f32	s0, s14
 8011730:	eef0 0a67 	vmov.f32	s1, s15
 8011734:	f7fb fa00 	bl	800cb38 <can1_ams_cell_temperatures_t2s9_encode>
 8011738:	4603      	mov	r3, r0
 801173a:	461a      	mov	r2, r3
 801173c:	4b55      	ldr	r3, [pc, #340]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801173e:	855a      	strh	r2, [r3, #42]	; 0x2a
   can1_tx_ams_cell_temperatures.t2s10 = can1_ams_cell_temperatures_t2s10_encode(ams_cell_temperatures.t2s10);
 8011740:	463b      	mov	r3, r7
 8011742:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8011746:	eeb0 0a47 	vmov.f32	s0, s14
 801174a:	eef0 0a67 	vmov.f32	s1, s15
 801174e:	f7fb fa4b 	bl	800cbe8 <can1_ams_cell_temperatures_t2s10_encode>
 8011752:	4603      	mov	r3, r0
 8011754:	461a      	mov	r2, r3
 8011756:	4b4f      	ldr	r3, [pc, #316]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011758:	859a      	strh	r2, [r3, #44]	; 0x2c
   can1_tx_ams_cell_temperatures.t2s11 = can1_ams_cell_temperatures_t2s11_encode(ams_cell_temperatures.t2s11);
 801175a:	463b      	mov	r3, r7
 801175c:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8011760:	eeb0 0a47 	vmov.f32	s0, s14
 8011764:	eef0 0a67 	vmov.f32	s1, s15
 8011768:	f7fb fa96 	bl	800cc98 <can1_ams_cell_temperatures_t2s11_encode>
 801176c:	4603      	mov	r3, r0
 801176e:	461a      	mov	r2, r3
 8011770:	4b48      	ldr	r3, [pc, #288]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011772:	85da      	strh	r2, [r3, #46]	; 0x2e
   can1_tx_ams_cell_temperatures.t2s12 = can1_ams_cell_temperatures_t2s12_encode(ams_cell_temperatures.t2s12);
 8011774:	463b      	mov	r3, r7
 8011776:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 801177a:	eeb0 0a47 	vmov.f32	s0, s14
 801177e:	eef0 0a67 	vmov.f32	s1, s15
 8011782:	f7fb fae1 	bl	800cd48 <can1_ams_cell_temperatures_t2s12_encode>
 8011786:	4603      	mov	r3, r0
 8011788:	461a      	mov	r2, r3
 801178a:	4b42      	ldr	r3, [pc, #264]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801178c:	861a      	strh	r2, [r3, #48]	; 0x30
   can1_tx_ams_cell_temperatures.t3s1 = can1_ams_cell_temperatures_t3s1_encode(ams_cell_temperatures.t3s1);
 801178e:	463b      	mov	r3, r7
 8011790:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 8011794:	eeb0 0a47 	vmov.f32	s0, s14
 8011798:	eef0 0a67 	vmov.f32	s1, s15
 801179c:	f7fb fb2c 	bl	800cdf8 <can1_ams_cell_temperatures_t3s1_encode>
 80117a0:	4603      	mov	r3, r0
 80117a2:	461a      	mov	r2, r3
 80117a4:	4b3b      	ldr	r3, [pc, #236]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80117a6:	865a      	strh	r2, [r3, #50]	; 0x32
   can1_tx_ams_cell_temperatures.t3s2 = can1_ams_cell_temperatures_t3s2_encode(ams_cell_temperatures.t3s2);
 80117a8:	463b      	mov	r3, r7
 80117aa:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 80117ae:	eeb0 0a47 	vmov.f32	s0, s14
 80117b2:	eef0 0a67 	vmov.f32	s1, s15
 80117b6:	f7fb fb77 	bl	800cea8 <can1_ams_cell_temperatures_t3s2_encode>
 80117ba:	4603      	mov	r3, r0
 80117bc:	461a      	mov	r2, r3
 80117be:	4b35      	ldr	r3, [pc, #212]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80117c0:	869a      	strh	r2, [r3, #52]	; 0x34
   can1_tx_ams_cell_temperatures.t3s3 = can1_ams_cell_temperatures_t3s3_encode(ams_cell_temperatures.t3s3);
 80117c2:	463b      	mov	r3, r7
 80117c4:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 80117c8:	eeb0 0a47 	vmov.f32	s0, s14
 80117cc:	eef0 0a67 	vmov.f32	s1, s15
 80117d0:	f7fb fbc2 	bl	800cf58 <can1_ams_cell_temperatures_t3s3_encode>
 80117d4:	4603      	mov	r3, r0
 80117d6:	461a      	mov	r2, r3
 80117d8:	4b2e      	ldr	r3, [pc, #184]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80117da:	86da      	strh	r2, [r3, #54]	; 0x36
   can1_tx_ams_cell_temperatures.t3s4 = can1_ams_cell_temperatures_t3s4_encode(ams_cell_temperatures.t3s4);
 80117dc:	463b      	mov	r3, r7
 80117de:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
 80117e2:	eeb0 0a47 	vmov.f32	s0, s14
 80117e6:	eef0 0a67 	vmov.f32	s1, s15
 80117ea:	f7fb fc0d 	bl	800d008 <can1_ams_cell_temperatures_t3s4_encode>
 80117ee:	4603      	mov	r3, r0
 80117f0:	461a      	mov	r2, r3
 80117f2:	4b28      	ldr	r3, [pc, #160]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80117f4:	871a      	strh	r2, [r3, #56]	; 0x38
   can1_tx_ams_cell_temperatures.t3s5 = can1_ams_cell_temperatures_t3s5_encode(ams_cell_temperatures.t3s5);
 80117f6:	463b      	mov	r3, r7
 80117f8:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
 80117fc:	eeb0 0a47 	vmov.f32	s0, s14
 8011800:	eef0 0a67 	vmov.f32	s1, s15
 8011804:	f7fb fc58 	bl	800d0b8 <can1_ams_cell_temperatures_t3s5_encode>
 8011808:	4603      	mov	r3, r0
 801180a:	461a      	mov	r2, r3
 801180c:	4b21      	ldr	r3, [pc, #132]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801180e:	875a      	strh	r2, [r3, #58]	; 0x3a
   can1_tx_ams_cell_temperatures.t3s6 = can1_ams_cell_temperatures_t3s6_encode(ams_cell_temperatures.t3s6);
 8011810:	463b      	mov	r3, r7
 8011812:	ed93 7b3a 	vldr	d7, [r3, #232]	; 0xe8
 8011816:	eeb0 0a47 	vmov.f32	s0, s14
 801181a:	eef0 0a67 	vmov.f32	s1, s15
 801181e:	f7fb fca3 	bl	800d168 <can1_ams_cell_temperatures_t3s6_encode>
 8011822:	4603      	mov	r3, r0
 8011824:	461a      	mov	r2, r3
 8011826:	4b1b      	ldr	r3, [pc, #108]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011828:	879a      	strh	r2, [r3, #60]	; 0x3c
   can1_tx_ams_cell_temperatures.t3s7 = can1_ams_cell_temperatures_t3s7_encode(ams_cell_temperatures.t3s7);
 801182a:	463b      	mov	r3, r7
 801182c:	ed93 7b3c 	vldr	d7, [r3, #240]	; 0xf0
 8011830:	eeb0 0a47 	vmov.f32	s0, s14
 8011834:	eef0 0a67 	vmov.f32	s1, s15
 8011838:	f7fb fcee 	bl	800d218 <can1_ams_cell_temperatures_t3s7_encode>
 801183c:	4603      	mov	r3, r0
 801183e:	461a      	mov	r2, r3
 8011840:	4b14      	ldr	r3, [pc, #80]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011842:	87da      	strh	r2, [r3, #62]	; 0x3e
   can1_tx_ams_cell_temperatures.t3s8 = can1_ams_cell_temperatures_t3s8_encode(ams_cell_temperatures.t3s8);
 8011844:	463b      	mov	r3, r7
 8011846:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 801184a:	eeb0 0a47 	vmov.f32	s0, s14
 801184e:	eef0 0a67 	vmov.f32	s1, s15
 8011852:	f7fb fd39 	bl	800d2c8 <can1_ams_cell_temperatures_t3s8_encode>
 8011856:	4603      	mov	r3, r0
 8011858:	461a      	mov	r2, r3
 801185a:	4b0e      	ldr	r3, [pc, #56]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801185c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
   can1_tx_ams_cell_temperatures.t3s9 = can1_ams_cell_temperatures_t3s9_encode(ams_cell_temperatures.t3s9);
 8011860:	463b      	mov	r3, r7
 8011862:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8011866:	eeb0 0a47 	vmov.f32	s0, s14
 801186a:	eef0 0a67 	vmov.f32	s1, s15
 801186e:	f7fb fd83 	bl	800d378 <can1_ams_cell_temperatures_t3s9_encode>
 8011872:	4603      	mov	r3, r0
 8011874:	461a      	mov	r2, r3
 8011876:	4b07      	ldr	r3, [pc, #28]	; (8011894 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011878:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   can1_tx_ams_cell_temperatures.t3s10 = can1_ams_cell_temperatures_t3s10_encode(ams_cell_temperatures.t3s10);
 801187c:	463b      	mov	r3, r7
 801187e:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8011882:	eeb0 0a47 	vmov.f32	s0, s14
 8011886:	eef0 0a67 	vmov.f32	s1, s15
 801188a:	f7fb fdcd 	bl	800d428 <can1_ams_cell_temperatures_t3s10_encode>
 801188e:	4603      	mov	r3, r0
 8011890:	e002      	b.n	8011898 <can1_ams_cell_temperatures_transmit+0x3c8>
 8011892:	bf00      	nop
 8011894:	200005b0 	.word	0x200005b0
 8011898:	461a      	mov	r2, r3
 801189a:	4be4      	ldr	r3, [pc, #912]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 801189c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   can1_tx_ams_cell_temperatures.t3s11 = can1_ams_cell_temperatures_t3s11_encode(ams_cell_temperatures.t3s11);
 80118a0:	463b      	mov	r3, r7
 80118a2:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 80118a6:	eeb0 0a47 	vmov.f32	s0, s14
 80118aa:	eef0 0a67 	vmov.f32	s1, s15
 80118ae:	f7fb fe13 	bl	800d4d8 <can1_ams_cell_temperatures_t3s11_encode>
 80118b2:	4603      	mov	r3, r0
 80118b4:	461a      	mov	r2, r3
 80118b6:	4bdd      	ldr	r3, [pc, #884]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 80118b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   can1_tx_ams_cell_temperatures.t3s12 = can1_ams_cell_temperatures_t3s12_encode(ams_cell_temperatures.t3s12);
 80118bc:	463b      	mov	r3, r7
 80118be:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
 80118c2:	eeb0 0a47 	vmov.f32	s0, s14
 80118c6:	eef0 0a67 	vmov.f32	s1, s15
 80118ca:	f7fb fe5d 	bl	800d588 <can1_ams_cell_temperatures_t3s12_encode>
 80118ce:	4603      	mov	r3, r0
 80118d0:	461a      	mov	r2, r3
 80118d2:	4bd6      	ldr	r3, [pc, #856]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 80118d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
   can1_tx_ams_cell_temperatures.t4s1 = can1_ams_cell_temperatures_t4s1_encode(ams_cell_temperatures.t4s1);
 80118d8:	463b      	mov	r3, r7
 80118da:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 80118de:	eeb0 0a47 	vmov.f32	s0, s14
 80118e2:	eef0 0a67 	vmov.f32	s1, s15
 80118e6:	f7fb fea7 	bl	800d638 <can1_ams_cell_temperatures_t4s1_encode>
 80118ea:	4603      	mov	r3, r0
 80118ec:	461a      	mov	r2, r3
 80118ee:	4bcf      	ldr	r3, [pc, #828]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 80118f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
   can1_tx_ams_cell_temperatures.t4s2 = can1_ams_cell_temperatures_t4s2_encode(ams_cell_temperatures.t4s2);
 80118f4:	463b      	mov	r3, r7
 80118f6:	ed93 7b4a 	vldr	d7, [r3, #296]	; 0x128
 80118fa:	eeb0 0a47 	vmov.f32	s0, s14
 80118fe:	eef0 0a67 	vmov.f32	s1, s15
 8011902:	f7fb fef1 	bl	800d6e8 <can1_ams_cell_temperatures_t4s2_encode>
 8011906:	4603      	mov	r3, r0
 8011908:	461a      	mov	r2, r3
 801190a:	4bc8      	ldr	r3, [pc, #800]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 801190c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   can1_tx_ams_cell_temperatures.t4s3 = can1_ams_cell_temperatures_t4s3_encode(ams_cell_temperatures.t4s3);
 8011910:	463b      	mov	r3, r7
 8011912:	ed93 7b4c 	vldr	d7, [r3, #304]	; 0x130
 8011916:	eeb0 0a47 	vmov.f32	s0, s14
 801191a:	eef0 0a67 	vmov.f32	s1, s15
 801191e:	f7fb ff3b 	bl	800d798 <can1_ams_cell_temperatures_t4s3_encode>
 8011922:	4603      	mov	r3, r0
 8011924:	461a      	mov	r2, r3
 8011926:	4bc1      	ldr	r3, [pc, #772]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011928:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   can1_tx_ams_cell_temperatures.t4s4 = can1_ams_cell_temperatures_t4s4_encode(ams_cell_temperatures.t4s4);
 801192c:	463b      	mov	r3, r7
 801192e:	ed93 7b4e 	vldr	d7, [r3, #312]	; 0x138
 8011932:	eeb0 0a47 	vmov.f32	s0, s14
 8011936:	eef0 0a67 	vmov.f32	s1, s15
 801193a:	f7fb ff85 	bl	800d848 <can1_ams_cell_temperatures_t4s4_encode>
 801193e:	4603      	mov	r3, r0
 8011940:	461a      	mov	r2, r3
 8011942:	4bba      	ldr	r3, [pc, #744]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011944:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   can1_tx_ams_cell_temperatures.t4s5 = can1_ams_cell_temperatures_t4s5_encode(ams_cell_temperatures.t4s5);
 8011948:	463b      	mov	r3, r7
 801194a:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 801194e:	eeb0 0a47 	vmov.f32	s0, s14
 8011952:	eef0 0a67 	vmov.f32	s1, s15
 8011956:	f7fb ffcf 	bl	800d8f8 <can1_ams_cell_temperatures_t4s5_encode>
 801195a:	4603      	mov	r3, r0
 801195c:	461a      	mov	r2, r3
 801195e:	4bb3      	ldr	r3, [pc, #716]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011960:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
   can1_tx_ams_cell_temperatures.t4s6 = can1_ams_cell_temperatures_t4s6_encode(ams_cell_temperatures.t4s6);
 8011964:	463b      	mov	r3, r7
 8011966:	ed93 7b52 	vldr	d7, [r3, #328]	; 0x148
 801196a:	eeb0 0a47 	vmov.f32	s0, s14
 801196e:	eef0 0a67 	vmov.f32	s1, s15
 8011972:	f7fc f819 	bl	800d9a8 <can1_ams_cell_temperatures_t4s6_encode>
 8011976:	4603      	mov	r3, r0
 8011978:	461a      	mov	r2, r3
 801197a:	4bac      	ldr	r3, [pc, #688]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 801197c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
   can1_tx_ams_cell_temperatures.t4s7 = can1_ams_cell_temperatures_t4s7_encode(ams_cell_temperatures.t4s7);
 8011980:	463b      	mov	r3, r7
 8011982:	ed93 7b54 	vldr	d7, [r3, #336]	; 0x150
 8011986:	eeb0 0a47 	vmov.f32	s0, s14
 801198a:	eef0 0a67 	vmov.f32	s1, s15
 801198e:	f7fc f863 	bl	800da58 <can1_ams_cell_temperatures_t4s7_encode>
 8011992:	4603      	mov	r3, r0
 8011994:	461a      	mov	r2, r3
 8011996:	4ba5      	ldr	r3, [pc, #660]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011998:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
   can1_tx_ams_cell_temperatures.t4s8 = can1_ams_cell_temperatures_t4s8_encode(ams_cell_temperatures.t4s8);
 801199c:	463b      	mov	r3, r7
 801199e:	ed93 7b56 	vldr	d7, [r3, #344]	; 0x158
 80119a2:	eeb0 0a47 	vmov.f32	s0, s14
 80119a6:	eef0 0a67 	vmov.f32	s1, s15
 80119aa:	f7fc f8ad 	bl	800db08 <can1_ams_cell_temperatures_t4s8_encode>
 80119ae:	4603      	mov	r3, r0
 80119b0:	461a      	mov	r2, r3
 80119b2:	4b9e      	ldr	r3, [pc, #632]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 80119b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
   can1_tx_ams_cell_temperatures.t4s9 = can1_ams_cell_temperatures_t4s9_encode(ams_cell_temperatures.t4s9);
 80119b8:	463b      	mov	r3, r7
 80119ba:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 80119be:	eeb0 0a47 	vmov.f32	s0, s14
 80119c2:	eef0 0a67 	vmov.f32	s1, s15
 80119c6:	f7fc f8f7 	bl	800dbb8 <can1_ams_cell_temperatures_t4s9_encode>
 80119ca:	4603      	mov	r3, r0
 80119cc:	461a      	mov	r2, r3
 80119ce:	4b97      	ldr	r3, [pc, #604]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 80119d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
   can1_tx_ams_cell_temperatures.t4s10 = can1_ams_cell_temperatures_t4s10_encode(ams_cell_temperatures.t4s10);
 80119d4:	463b      	mov	r3, r7
 80119d6:	ed93 7b5a 	vldr	d7, [r3, #360]	; 0x168
 80119da:	eeb0 0a47 	vmov.f32	s0, s14
 80119de:	eef0 0a67 	vmov.f32	s1, s15
 80119e2:	f7fc f941 	bl	800dc68 <can1_ams_cell_temperatures_t4s10_encode>
 80119e6:	4603      	mov	r3, r0
 80119e8:	461a      	mov	r2, r3
 80119ea:	4b90      	ldr	r3, [pc, #576]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 80119ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
   can1_tx_ams_cell_temperatures.t4s11 = can1_ams_cell_temperatures_t4s11_encode(ams_cell_temperatures.t4s11);
 80119f0:	463b      	mov	r3, r7
 80119f2:	ed93 7b5c 	vldr	d7, [r3, #368]	; 0x170
 80119f6:	eeb0 0a47 	vmov.f32	s0, s14
 80119fa:	eef0 0a67 	vmov.f32	s1, s15
 80119fe:	f7fc f98b 	bl	800dd18 <can1_ams_cell_temperatures_t4s11_encode>
 8011a02:	4603      	mov	r3, r0
 8011a04:	461a      	mov	r2, r3
 8011a06:	4b89      	ldr	r3, [pc, #548]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011a08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
   can1_tx_ams_cell_temperatures.t4s12 = can1_ams_cell_temperatures_t4s12_encode(ams_cell_temperatures.t4s12);
 8011a0c:	463b      	mov	r3, r7
 8011a0e:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8011a12:	eeb0 0a47 	vmov.f32	s0, s14
 8011a16:	eef0 0a67 	vmov.f32	s1, s15
 8011a1a:	f7fc f9d5 	bl	800ddc8 <can1_ams_cell_temperatures_t4s12_encode>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	461a      	mov	r2, r3
 8011a22:	4b82      	ldr	r3, [pc, #520]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011a24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
   can1_tx_ams_cell_temperatures.t5s1 = can1_ams_cell_temperatures_t5s1_encode(ams_cell_temperatures.t5s1);
 8011a28:	463b      	mov	r3, r7
 8011a2a:	ed93 7b60 	vldr	d7, [r3, #384]	; 0x180
 8011a2e:	eeb0 0a47 	vmov.f32	s0, s14
 8011a32:	eef0 0a67 	vmov.f32	s1, s15
 8011a36:	f7fc fa1f 	bl	800de78 <can1_ams_cell_temperatures_t5s1_encode>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	461a      	mov	r2, r3
 8011a3e:	4b7b      	ldr	r3, [pc, #492]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011a40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
   can1_tx_ams_cell_temperatures.t5s2 = can1_ams_cell_temperatures_t5s2_encode(ams_cell_temperatures.t5s2);
 8011a44:	463b      	mov	r3, r7
 8011a46:	ed93 7b62 	vldr	d7, [r3, #392]	; 0x188
 8011a4a:	eeb0 0a47 	vmov.f32	s0, s14
 8011a4e:	eef0 0a67 	vmov.f32	s1, s15
 8011a52:	f7fc fa69 	bl	800df28 <can1_ams_cell_temperatures_t5s2_encode>
 8011a56:	4603      	mov	r3, r0
 8011a58:	461a      	mov	r2, r3
 8011a5a:	4b74      	ldr	r3, [pc, #464]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011a5c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
   can1_tx_ams_cell_temperatures.t5s3 = can1_ams_cell_temperatures_t5s3_encode(ams_cell_temperatures.t5s3);
 8011a60:	463b      	mov	r3, r7
 8011a62:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8011a66:	eeb0 0a47 	vmov.f32	s0, s14
 8011a6a:	eef0 0a67 	vmov.f32	s1, s15
 8011a6e:	f7fc fab3 	bl	800dfd8 <can1_ams_cell_temperatures_t5s3_encode>
 8011a72:	4603      	mov	r3, r0
 8011a74:	461a      	mov	r2, r3
 8011a76:	4b6d      	ldr	r3, [pc, #436]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011a78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
   can1_tx_ams_cell_temperatures.t5s4 = can1_ams_cell_temperatures_t5s4_encode(ams_cell_temperatures.t5s4);
 8011a7c:	463b      	mov	r3, r7
 8011a7e:	ed93 7b66 	vldr	d7, [r3, #408]	; 0x198
 8011a82:	eeb0 0a47 	vmov.f32	s0, s14
 8011a86:	eef0 0a67 	vmov.f32	s1, s15
 8011a8a:	f7fc fafd 	bl	800e088 <can1_ams_cell_temperatures_t5s4_encode>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	461a      	mov	r2, r3
 8011a92:	4b66      	ldr	r3, [pc, #408]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011a94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
   can1_tx_ams_cell_temperatures.t5s5 = can1_ams_cell_temperatures_t5s5_encode(ams_cell_temperatures.t5s5);
 8011a98:	463b      	mov	r3, r7
 8011a9a:	ed93 7b68 	vldr	d7, [r3, #416]	; 0x1a0
 8011a9e:	eeb0 0a47 	vmov.f32	s0, s14
 8011aa2:	eef0 0a67 	vmov.f32	s1, s15
 8011aa6:	f7fc fb47 	bl	800e138 <can1_ams_cell_temperatures_t5s5_encode>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	461a      	mov	r2, r3
 8011aae:	4b5f      	ldr	r3, [pc, #380]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
   can1_tx_ams_cell_temperatures.t5s6 = can1_ams_cell_temperatures_t5s6_encode(ams_cell_temperatures.t5s6);
 8011ab4:	463b      	mov	r3, r7
 8011ab6:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 8011aba:	eeb0 0a47 	vmov.f32	s0, s14
 8011abe:	eef0 0a67 	vmov.f32	s1, s15
 8011ac2:	f7fc fb91 	bl	800e1e8 <can1_ams_cell_temperatures_t5s6_encode>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	461a      	mov	r2, r3
 8011aca:	4b58      	ldr	r3, [pc, #352]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011acc:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
   can1_tx_ams_cell_temperatures.t5s7 = can1_ams_cell_temperatures_t5s7_encode(ams_cell_temperatures.t5s7);
 8011ad0:	463b      	mov	r3, r7
 8011ad2:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8011ad6:	eeb0 0a47 	vmov.f32	s0, s14
 8011ada:	eef0 0a67 	vmov.f32	s1, s15
 8011ade:	f7fc fbdb 	bl	800e298 <can1_ams_cell_temperatures_t5s7_encode>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	461a      	mov	r2, r3
 8011ae6:	4b51      	ldr	r3, [pc, #324]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011ae8:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
   can1_tx_ams_cell_temperatures.t5s8 = can1_ams_cell_temperatures_t5s8_encode(ams_cell_temperatures.t5s8);
 8011aec:	463b      	mov	r3, r7
 8011aee:	ed93 7b6e 	vldr	d7, [r3, #440]	; 0x1b8
 8011af2:	eeb0 0a47 	vmov.f32	s0, s14
 8011af6:	eef0 0a67 	vmov.f32	s1, s15
 8011afa:	f7fc fc25 	bl	800e348 <can1_ams_cell_temperatures_t5s8_encode>
 8011afe:	4603      	mov	r3, r0
 8011b00:	461a      	mov	r2, r3
 8011b02:	4b4a      	ldr	r3, [pc, #296]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b04:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
   can1_tx_ams_cell_temperatures.t5s9 = can1_ams_cell_temperatures_t5s9_encode(ams_cell_temperatures.t5s9);
 8011b08:	463b      	mov	r3, r7
 8011b0a:	ed93 7b70 	vldr	d7, [r3, #448]	; 0x1c0
 8011b0e:	eeb0 0a47 	vmov.f32	s0, s14
 8011b12:	eef0 0a67 	vmov.f32	s1, s15
 8011b16:	f7fc fc6f 	bl	800e3f8 <can1_ams_cell_temperatures_t5s9_encode>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	4b43      	ldr	r3, [pc, #268]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b20:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
   can1_tx_ams_cell_temperatures.t5s10 = can1_ams_cell_temperatures_t5s10_encode(ams_cell_temperatures.t5s10);
 8011b24:	463b      	mov	r3, r7
 8011b26:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 8011b2a:	eeb0 0a47 	vmov.f32	s0, s14
 8011b2e:	eef0 0a67 	vmov.f32	s1, s15
 8011b32:	f7fc fcb9 	bl	800e4a8 <can1_ams_cell_temperatures_t5s10_encode>
 8011b36:	4603      	mov	r3, r0
 8011b38:	461a      	mov	r2, r3
 8011b3a:	4b3c      	ldr	r3, [pc, #240]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b3c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
   can1_tx_ams_cell_temperatures.t5s11 = can1_ams_cell_temperatures_t5s11_encode(ams_cell_temperatures.t5s11);
 8011b40:	463b      	mov	r3, r7
 8011b42:	ed93 7b74 	vldr	d7, [r3, #464]	; 0x1d0
 8011b46:	eeb0 0a47 	vmov.f32	s0, s14
 8011b4a:	eef0 0a67 	vmov.f32	s1, s15
 8011b4e:	f7fc fd03 	bl	800e558 <can1_ams_cell_temperatures_t5s11_encode>
 8011b52:	4603      	mov	r3, r0
 8011b54:	461a      	mov	r2, r3
 8011b56:	4b35      	ldr	r3, [pc, #212]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b58:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
   can1_tx_ams_cell_temperatures.t5s12 = can1_ams_cell_temperatures_t5s12_encode(ams_cell_temperatures.t5s12);
 8011b5c:	463b      	mov	r3, r7
 8011b5e:	ed93 7b76 	vldr	d7, [r3, #472]	; 0x1d8
 8011b62:	eeb0 0a47 	vmov.f32	s0, s14
 8011b66:	eef0 0a67 	vmov.f32	s1, s15
 8011b6a:	f7fc fd4d 	bl	800e608 <can1_ams_cell_temperatures_t5s12_encode>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	461a      	mov	r2, r3
 8011b72:	4b2e      	ldr	r3, [pc, #184]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b74:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78

       can1_tx_ams_cell_temperatures.temperature_multiplexor = 0;
 8011b78:	4b2c      	ldr	r3, [pc, #176]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_tx_ams_cell_temperatures, 8);
 8011b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011b82:	2208      	movs	r2, #8
 8011b84:	4929      	ldr	r1, [pc, #164]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7f7 fda4 	bl	80096d4 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011b8c:	bf00      	nop
 8011b8e:	4b28      	ldr	r3, [pc, #160]	; (8011c30 <can1_ams_cell_temperatures_transmit+0x760>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	4618      	mov	r0, r3
 8011b94:	f012 f9ed 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d0f7      	beq.n	8011b8e <can1_ams_cell_temperatures_transmit+0x6be>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011b9e:	4b24      	ldr	r3, [pc, #144]	; (8011c30 <can1_ams_cell_temperatures_transmit+0x760>)
 8011ba0:	6818      	ldr	r0, [r3, #0]
 8011ba2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011ba6:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011baa:	4b22      	ldr	r3, [pc, #136]	; (8011c34 <can1_ams_cell_temperatures_transmit+0x764>)
 8011bac:	f012 f906 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d001      	beq.n	8011bba <can1_ams_cell_temperatures_transmit+0x6ea>
           Error_Handler();
 8011bb6:	f005 faeb 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_temperatures.temperature_multiplexor = 1;
 8011bba:	4b1c      	ldr	r3, [pc, #112]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011bbc:	2201      	movs	r2, #1
 8011bbe:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_tx_ams_cell_temperatures, 8);
 8011bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011bc4:	2208      	movs	r2, #8
 8011bc6:	4919      	ldr	r1, [pc, #100]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f7f7 fd83 	bl	80096d4 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011bce:	bf00      	nop
 8011bd0:	4b17      	ldr	r3, [pc, #92]	; (8011c30 <can1_ams_cell_temperatures_transmit+0x760>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f012 f9cc 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d0f7      	beq.n	8011bd0 <can1_ams_cell_temperatures_transmit+0x700>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011be0:	4b13      	ldr	r3, [pc, #76]	; (8011c30 <can1_ams_cell_temperatures_transmit+0x760>)
 8011be2:	6818      	ldr	r0, [r3, #0]
 8011be4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011be8:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011bec:	4b11      	ldr	r3, [pc, #68]	; (8011c34 <can1_ams_cell_temperatures_transmit+0x764>)
 8011bee:	f012 f8e5 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d001      	beq.n	8011bfc <can1_ams_cell_temperatures_transmit+0x72c>
           Error_Handler();
 8011bf8:	f005 faca 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_temperatures.temperature_multiplexor = 2;
 8011bfc:	4b0b      	ldr	r3, [pc, #44]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011bfe:	2202      	movs	r2, #2
 8011c00:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_tx_ams_cell_temperatures, 8);
 8011c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011c06:	2208      	movs	r2, #8
 8011c08:	4908      	ldr	r1, [pc, #32]	; (8011c2c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7f7 fd62 	bl	80096d4 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011c10:	bf00      	nop
 8011c12:	4b07      	ldr	r3, [pc, #28]	; (8011c30 <can1_ams_cell_temperatures_transmit+0x760>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	4618      	mov	r0, r3
 8011c18:	f012 f9ab 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d0f7      	beq.n	8011c12 <can1_ams_cell_temperatures_transmit+0x742>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011c22:	4b03      	ldr	r3, [pc, #12]	; (8011c30 <can1_ams_cell_temperatures_transmit+0x760>)
 8011c24:	6818      	ldr	r0, [r3, #0]
 8011c26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011c2a:	e005      	b.n	8011c38 <can1_ams_cell_temperatures_transmit+0x768>
 8011c2c:	200005b0 	.word	0x200005b0
 8011c30:	20000690 	.word	0x20000690
 8011c34:	200003f4 	.word	0x200003f4
 8011c38:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011c3c:	4b9a      	ldr	r3, [pc, #616]	; (8011ea8 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011c3e:	f012 f8bd 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011c42:	4603      	mov	r3, r0
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d001      	beq.n	8011c4c <can1_ams_cell_temperatures_transmit+0x77c>
           Error_Handler();
 8011c48:	f005 faa2 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_temperatures.temperature_multiplexor = 3;
 8011c4c:	4b97      	ldr	r3, [pc, #604]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011c4e:	2203      	movs	r2, #3
 8011c50:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_tx_ams_cell_temperatures, 8);
 8011c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011c56:	2208      	movs	r2, #8
 8011c58:	4994      	ldr	r1, [pc, #592]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f7f7 fd3a 	bl	80096d4 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011c60:	bf00      	nop
 8011c62:	4b93      	ldr	r3, [pc, #588]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	4618      	mov	r0, r3
 8011c68:	f012 f983 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d0f7      	beq.n	8011c62 <can1_ams_cell_temperatures_transmit+0x792>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011c72:	4b8f      	ldr	r3, [pc, #572]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011c74:	6818      	ldr	r0, [r3, #0]
 8011c76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011c7a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011c7e:	4b8a      	ldr	r3, [pc, #552]	; (8011ea8 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011c80:	f012 f89c 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011c84:	4603      	mov	r3, r0
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d001      	beq.n	8011c8e <can1_ams_cell_temperatures_transmit+0x7be>
           Error_Handler();
 8011c8a:	f005 fa81 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_temperatures.temperature_multiplexor = 4;
 8011c8e:	4b87      	ldr	r3, [pc, #540]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011c90:	2204      	movs	r2, #4
 8011c92:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_tx_ams_cell_temperatures, 8);
 8011c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011c98:	2208      	movs	r2, #8
 8011c9a:	4984      	ldr	r1, [pc, #528]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f7f7 fd19 	bl	80096d4 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011ca2:	bf00      	nop
 8011ca4:	4b82      	ldr	r3, [pc, #520]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f012 f962 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d0f7      	beq.n	8011ca4 <can1_ams_cell_temperatures_transmit+0x7d4>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011cb4:	4b7e      	ldr	r3, [pc, #504]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011cb6:	6818      	ldr	r0, [r3, #0]
 8011cb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011cbc:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011cc0:	4b79      	ldr	r3, [pc, #484]	; (8011ea8 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011cc2:	f012 f87b 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d001      	beq.n	8011cd0 <can1_ams_cell_temperatures_transmit+0x800>
           Error_Handler();
 8011ccc:	f005 fa60 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_temperatures.temperature_multiplexor = 5;
 8011cd0:	4b76      	ldr	r3, [pc, #472]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011cd2:	2205      	movs	r2, #5
 8011cd4:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_tx_ams_cell_temperatures, 8);
 8011cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011cda:	2208      	movs	r2, #8
 8011cdc:	4973      	ldr	r1, [pc, #460]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7f7 fcf8 	bl	80096d4 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011ce4:	bf00      	nop
 8011ce6:	4b72      	ldr	r3, [pc, #456]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	4618      	mov	r0, r3
 8011cec:	f012 f941 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d0f7      	beq.n	8011ce6 <can1_ams_cell_temperatures_transmit+0x816>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011cf6:	4b6e      	ldr	r3, [pc, #440]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011cf8:	6818      	ldr	r0, [r3, #0]
 8011cfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011cfe:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011d02:	4b69      	ldr	r3, [pc, #420]	; (8011ea8 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011d04:	f012 f85a 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d001      	beq.n	8011d12 <can1_ams_cell_temperatures_transmit+0x842>
           Error_Handler();
 8011d0e:	f005 fa3f 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_temperatures.temperature_multiplexor = 6;
 8011d12:	4b66      	ldr	r3, [pc, #408]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011d14:	2206      	movs	r2, #6
 8011d16:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_tx_ams_cell_temperatures, 8);
 8011d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011d1c:	2208      	movs	r2, #8
 8011d1e:	4963      	ldr	r1, [pc, #396]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7f7 fcd7 	bl	80096d4 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011d26:	bf00      	nop
 8011d28:	4b61      	ldr	r3, [pc, #388]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f012 f920 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011d32:	4603      	mov	r3, r0
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d0f7      	beq.n	8011d28 <can1_ams_cell_temperatures_transmit+0x858>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011d38:	4b5d      	ldr	r3, [pc, #372]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011d3a:	6818      	ldr	r0, [r3, #0]
 8011d3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011d40:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011d44:	4b58      	ldr	r3, [pc, #352]	; (8011ea8 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011d46:	f012 f839 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d001      	beq.n	8011d54 <can1_ams_cell_temperatures_transmit+0x884>
           Error_Handler();
 8011d50:	f005 fa1e 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_temperatures.temperature_multiplexor = 7;
 8011d54:	4b55      	ldr	r3, [pc, #340]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011d56:	2207      	movs	r2, #7
 8011d58:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_tx_ams_cell_temperatures, 8);
 8011d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011d5e:	2208      	movs	r2, #8
 8011d60:	4952      	ldr	r1, [pc, #328]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7f7 fcb6 	bl	80096d4 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011d68:	bf00      	nop
 8011d6a:	4b51      	ldr	r3, [pc, #324]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f012 f8ff 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011d74:	4603      	mov	r3, r0
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d0f7      	beq.n	8011d6a <can1_ams_cell_temperatures_transmit+0x89a>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011d7a:	4b4d      	ldr	r3, [pc, #308]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011d7c:	6818      	ldr	r0, [r3, #0]
 8011d7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011d82:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011d86:	4b48      	ldr	r3, [pc, #288]	; (8011ea8 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011d88:	f012 f818 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d001      	beq.n	8011d96 <can1_ams_cell_temperatures_transmit+0x8c6>
           Error_Handler();
 8011d92:	f005 f9fd 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_temperatures.temperature_multiplexor = 8;
 8011d96:	4b45      	ldr	r3, [pc, #276]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011d98:	2208      	movs	r2, #8
 8011d9a:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_tx_ams_cell_temperatures, 8);
 8011d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011da0:	2208      	movs	r2, #8
 8011da2:	4942      	ldr	r1, [pc, #264]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7f7 fc95 	bl	80096d4 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011daa:	bf00      	nop
 8011dac:	4b40      	ldr	r3, [pc, #256]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	4618      	mov	r0, r3
 8011db2:	f012 f8de 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011db6:	4603      	mov	r3, r0
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d0f7      	beq.n	8011dac <can1_ams_cell_temperatures_transmit+0x8dc>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011dbc:	4b3c      	ldr	r3, [pc, #240]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011dbe:	6818      	ldr	r0, [r3, #0]
 8011dc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011dc4:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011dc8:	4b37      	ldr	r3, [pc, #220]	; (8011ea8 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011dca:	f011 fff7 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d001      	beq.n	8011dd8 <can1_ams_cell_temperatures_transmit+0x908>
           Error_Handler();
 8011dd4:	f005 f9dc 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_temperatures.temperature_multiplexor = 9;
 8011dd8:	4b34      	ldr	r3, [pc, #208]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011dda:	2209      	movs	r2, #9
 8011ddc:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_tx_ams_cell_temperatures, 8);
 8011dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011de2:	2208      	movs	r2, #8
 8011de4:	4931      	ldr	r1, [pc, #196]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7f7 fc74 	bl	80096d4 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011dec:	bf00      	nop
 8011dee:	4b30      	ldr	r3, [pc, #192]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	4618      	mov	r0, r3
 8011df4:	f012 f8bd 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d0f7      	beq.n	8011dee <can1_ams_cell_temperatures_transmit+0x91e>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011dfe:	4b2c      	ldr	r3, [pc, #176]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011e00:	6818      	ldr	r0, [r3, #0]
 8011e02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011e06:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011e0a:	4b27      	ldr	r3, [pc, #156]	; (8011ea8 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011e0c:	f011 ffd6 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011e10:	4603      	mov	r3, r0
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d001      	beq.n	8011e1a <can1_ams_cell_temperatures_transmit+0x94a>
           Error_Handler();
 8011e16:	f005 f9bb 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_temperatures.temperature_multiplexor = 10;
 8011e1a:	4b24      	ldr	r3, [pc, #144]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011e1c:	220a      	movs	r2, #10
 8011e1e:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_tx_ams_cell_temperatures, 8);
 8011e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011e24:	2208      	movs	r2, #8
 8011e26:	4921      	ldr	r1, [pc, #132]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7f7 fc53 	bl	80096d4 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011e2e:	bf00      	nop
 8011e30:	4b1f      	ldr	r3, [pc, #124]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	4618      	mov	r0, r3
 8011e36:	f012 f89c 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d0f7      	beq.n	8011e30 <can1_ams_cell_temperatures_transmit+0x960>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011e40:	4b1b      	ldr	r3, [pc, #108]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011e42:	6818      	ldr	r0, [r3, #0]
 8011e44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011e48:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011e4c:	4b16      	ldr	r3, [pc, #88]	; (8011ea8 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011e4e:	f011 ffb5 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011e52:	4603      	mov	r3, r0
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d001      	beq.n	8011e5c <can1_ams_cell_temperatures_transmit+0x98c>
           Error_Handler();
 8011e58:	f005 f99a 	bl	8017190 <Error_Handler>
       }
       can1_tx_ams_cell_temperatures.temperature_multiplexor = 11;
 8011e5c:	4b13      	ldr	r3, [pc, #76]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011e5e:	220b      	movs	r2, #11
 8011e60:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_tx_ams_cell_temperatures, 8);
 8011e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011e66:	2208      	movs	r2, #8
 8011e68:	4910      	ldr	r1, [pc, #64]	; (8011eac <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7f7 fc32 	bl	80096d4 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011e70:	bf00      	nop
 8011e72:	4b0f      	ldr	r3, [pc, #60]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	4618      	mov	r0, r3
 8011e78:	f012 f87b 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d0f7      	beq.n	8011e72 <can1_ams_cell_temperatures_transmit+0x9a2>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011e82:	4b0b      	ldr	r3, [pc, #44]	; (8011eb0 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011e84:	6818      	ldr	r0, [r3, #0]
 8011e86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011e8a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011e8e:	4b06      	ldr	r3, [pc, #24]	; (8011ea8 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011e90:	f011 ff94 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011e94:	4603      	mov	r3, r0
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d001      	beq.n	8011e9e <can1_ams_cell_temperatures_transmit+0x9ce>
           Error_Handler();
 8011e9a:	f005 f979 	bl	8017190 <Error_Handler>
       }
}
 8011e9e:	bf00      	nop
 8011ea0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}
 8011ea8:	200003f4 	.word	0x200003f4
 8011eac:	200005b0 	.word	0x200005b0
 8011eb0:	20000690 	.word	0x20000690

08011eb4 <can2_charger_config_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can2_charger_config_transmit() {
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b094      	sub	sp, #80	; 0x50
 8011eb8:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 8011eba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	601a      	str	r2, [r3, #0]
 8011ec2:	605a      	str	r2, [r3, #4]
 8011ec4:	609a      	str	r2, [r3, #8]
 8011ec6:	60da      	str	r2, [r3, #12]
 8011ec8:	611a      	str	r2, [r3, #16]
 8011eca:	615a      	str	r2, [r3, #20]
 8011ecc:	f44f 731c 	mov.w	r3, #624	; 0x270
 8011ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8011ed2:	2304      	movs	r3, #4
 8011ed4:	643b      	str	r3, [r7, #64]	; 0x40
       .StdId = 624,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   charger_config_t charger_config;
   can2_charger_config_tx_callback(&charger_config);
 8011ed6:	463b      	mov	r3, r7
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f003 fd29 	bl	8015930 <can2_charger_config_tx_callback>

   can2_tx_charger_config.set_mux = can2_charger_config_set_mux_encode(charger_config.set_mux);
 8011ede:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7ee fb00 	bl	80004e8 <__aeabi_ui2d>
 8011ee8:	4602      	mov	r2, r0
 8011eea:	460b      	mov	r3, r1
 8011eec:	ec43 2b10 	vmov	d0, r2, r3
 8011ef0:	f7fc ff3e 	bl	800ed70 <can2_charger_config_set_mux_encode>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	461a      	mov	r2, r3
 8011ef8:	4b64      	ldr	r3, [pc, #400]	; (801208c <can2_charger_config_transmit+0x1d8>)
 8011efa:	701a      	strb	r2, [r3, #0]
   can2_tx_charger_config.msg_set_voltage_limit = can2_charger_config_msg_set_voltage_limit_encode(charger_config.msg_set_voltage_limit);
 8011efc:	ed97 7b08 	vldr	d7, [r7, #32]
 8011f00:	eeb0 0a47 	vmov.f32	s0, s14
 8011f04:	eef0 0a67 	vmov.f32	s1, s15
 8011f08:	f7fc ff41 	bl	800ed8e <can2_charger_config_msg_set_voltage_limit_encode>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	461a      	mov	r2, r3
 8011f10:	4b5e      	ldr	r3, [pc, #376]	; (801208c <can2_charger_config_transmit+0x1d8>)
 8011f12:	805a      	strh	r2, [r3, #2]
   can2_tx_charger_config.msg_set_current_limit = can2_charger_config_msg_set_current_limit_encode(charger_config.msg_set_current_limit);
 8011f14:	ed97 7b00 	vldr	d7, [r7]
 8011f18:	eeb0 0a47 	vmov.f32	s0, s14
 8011f1c:	eef0 0a67 	vmov.f32	s1, s15
 8011f20:	f7fc ff5a 	bl	800edd8 <can2_charger_config_msg_set_current_limit_encode>
 8011f24:	4603      	mov	r3, r0
 8011f26:	461a      	mov	r2, r3
 8011f28:	4b58      	ldr	r3, [pc, #352]	; (801208c <can2_charger_config_transmit+0x1d8>)
 8011f2a:	809a      	strh	r2, [r3, #4]
   can2_tx_charger_config.msg_set_power_limit = can2_charger_config_msg_set_power_limit_encode(charger_config.msg_set_power_limit);
 8011f2c:	ed97 7b04 	vldr	d7, [r7, #16]
 8011f30:	eeb0 0a47 	vmov.f32	s0, s14
 8011f34:	eef0 0a67 	vmov.f32	s1, s15
 8011f38:	f7fc ff8a 	bl	800ee50 <can2_charger_config_msg_set_power_limit_encode>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	461a      	mov	r2, r3
 8011f40:	4b52      	ldr	r3, [pc, #328]	; (801208c <can2_charger_config_transmit+0x1d8>)
 8011f42:	80da      	strh	r2, [r3, #6]
   can2_tx_charger_config.msg_set_enabled = can2_charger_config_msg_set_enabled_encode(charger_config.msg_set_enabled);
 8011f44:	7a3b      	ldrb	r3, [r7, #8]
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7ee face 	bl	80004e8 <__aeabi_ui2d>
 8011f4c:	4602      	mov	r2, r0
 8011f4e:	460b      	mov	r3, r1
 8011f50:	ec43 2b10 	vmov	d0, r2, r3
 8011f54:	f7fc ff9f 	bl	800ee96 <can2_charger_config_msg_set_enabled_encode>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	461a      	mov	r2, r3
 8011f5c:	4b4b      	ldr	r3, [pc, #300]	; (801208c <can2_charger_config_transmit+0x1d8>)
 8011f5e:	721a      	strb	r2, [r3, #8]
   can2_tx_charger_config.msg_set_time_out = can2_charger_config_msg_set_time_out_encode(charger_config.msg_set_time_out);
 8011f60:	7e3b      	ldrb	r3, [r7, #24]
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7ee fac0 	bl	80004e8 <__aeabi_ui2d>
 8011f68:	4602      	mov	r2, r0
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	ec43 2b10 	vmov	d0, r2, r3
 8011f70:	f7fc ffb4 	bl	800eedc <can2_charger_config_msg_set_time_out_encode>
 8011f74:	4603      	mov	r3, r0
 8011f76:	461a      	mov	r2, r3
 8011f78:	4b44      	ldr	r3, [pc, #272]	; (801208c <can2_charger_config_transmit+0x1d8>)
 8011f7a:	725a      	strb	r2, [r3, #9]

       can2_tx_charger_config.set_mux = 64;
 8011f7c:	4b43      	ldr	r3, [pc, #268]	; (801208c <can2_charger_config_transmit+0x1d8>)
 8011f7e:	2240      	movs	r2, #64	; 0x40
 8011f80:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_tx_charger_config, 4);
 8011f82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f86:	2204      	movs	r2, #4
 8011f88:	4940      	ldr	r1, [pc, #256]	; (801208c <can2_charger_config_transmit+0x1d8>)
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f7fc fd6e 	bl	800ea6c <can2_charger_config_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 8011f90:	bf00      	nop
 8011f92:	4b3f      	ldr	r3, [pc, #252]	; (8012090 <can2_charger_config_transmit+0x1dc>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	4618      	mov	r0, r3
 8011f98:	f011 ffeb 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d0f7      	beq.n	8011f92 <can2_charger_config_transmit+0xde>
       if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011fa2:	4b3b      	ldr	r3, [pc, #236]	; (8012090 <can2_charger_config_transmit+0x1dc>)
 8011fa4:	6818      	ldr	r0, [r3, #0]
 8011fa6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011faa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011fae:	4b39      	ldr	r3, [pc, #228]	; (8012094 <can2_charger_config_transmit+0x1e0>)
 8011fb0:	f011 ff04 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d001      	beq.n	8011fbe <can2_charger_config_transmit+0x10a>
           Error_Handler();
 8011fba:	f005 f8e9 	bl	8017190 <Error_Handler>
       }
       can2_tx_charger_config.set_mux = 65;
 8011fbe:	4b33      	ldr	r3, [pc, #204]	; (801208c <can2_charger_config_transmit+0x1d8>)
 8011fc0:	2241      	movs	r2, #65	; 0x41
 8011fc2:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_tx_charger_config, 4);
 8011fc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011fc8:	2204      	movs	r2, #4
 8011fca:	4930      	ldr	r1, [pc, #192]	; (801208c <can2_charger_config_transmit+0x1d8>)
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7fc fd4d 	bl	800ea6c <can2_charger_config_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 8011fd2:	bf00      	nop
 8011fd4:	4b2e      	ldr	r3, [pc, #184]	; (8012090 <can2_charger_config_transmit+0x1dc>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f011 ffca 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d0f7      	beq.n	8011fd4 <can2_charger_config_transmit+0x120>
       if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011fe4:	4b2a      	ldr	r3, [pc, #168]	; (8012090 <can2_charger_config_transmit+0x1dc>)
 8011fe6:	6818      	ldr	r0, [r3, #0]
 8011fe8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011fec:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011ff0:	4b28      	ldr	r3, [pc, #160]	; (8012094 <can2_charger_config_transmit+0x1e0>)
 8011ff2:	f011 fee3 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d001      	beq.n	8012000 <can2_charger_config_transmit+0x14c>
           Error_Handler();
 8011ffc:	f005 f8c8 	bl	8017190 <Error_Handler>
       }
       can2_tx_charger_config.set_mux = 66;
 8012000:	4b22      	ldr	r3, [pc, #136]	; (801208c <can2_charger_config_transmit+0x1d8>)
 8012002:	2242      	movs	r2, #66	; 0x42
 8012004:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_tx_charger_config, 4);
 8012006:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801200a:	2204      	movs	r2, #4
 801200c:	491f      	ldr	r1, [pc, #124]	; (801208c <can2_charger_config_transmit+0x1d8>)
 801200e:	4618      	mov	r0, r3
 8012010:	f7fc fd2c 	bl	800ea6c <can2_charger_config_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 8012014:	bf00      	nop
 8012016:	4b1e      	ldr	r3, [pc, #120]	; (8012090 <can2_charger_config_transmit+0x1dc>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	4618      	mov	r0, r3
 801201c:	f011 ffa9 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8012020:	4603      	mov	r3, r0
 8012022:	2b00      	cmp	r3, #0
 8012024:	d0f7      	beq.n	8012016 <can2_charger_config_transmit+0x162>
       if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8012026:	4b1a      	ldr	r3, [pc, #104]	; (8012090 <can2_charger_config_transmit+0x1dc>)
 8012028:	6818      	ldr	r0, [r3, #0]
 801202a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801202e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012032:	4b18      	ldr	r3, [pc, #96]	; (8012094 <can2_charger_config_transmit+0x1e0>)
 8012034:	f011 fec2 	bl	8023dbc <HAL_CAN_AddTxMessage>
 8012038:	4603      	mov	r3, r0
 801203a:	2b00      	cmp	r3, #0
 801203c:	d001      	beq.n	8012042 <can2_charger_config_transmit+0x18e>
           Error_Handler();
 801203e:	f005 f8a7 	bl	8017190 <Error_Handler>
       }
       can2_tx_charger_config.set_mux = 68;
 8012042:	4b12      	ldr	r3, [pc, #72]	; (801208c <can2_charger_config_transmit+0x1d8>)
 8012044:	2244      	movs	r2, #68	; 0x44
 8012046:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_tx_charger_config, 4);
 8012048:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801204c:	2204      	movs	r2, #4
 801204e:	490f      	ldr	r1, [pc, #60]	; (801208c <can2_charger_config_transmit+0x1d8>)
 8012050:	4618      	mov	r0, r3
 8012052:	f7fc fd0b 	bl	800ea6c <can2_charger_config_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 8012056:	bf00      	nop
 8012058:	4b0d      	ldr	r3, [pc, #52]	; (8012090 <can2_charger_config_transmit+0x1dc>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	4618      	mov	r0, r3
 801205e:	f011 ff88 	bl	8023f72 <HAL_CAN_GetTxMailboxesFreeLevel>
 8012062:	4603      	mov	r3, r0
 8012064:	2b00      	cmp	r3, #0
 8012066:	d0f7      	beq.n	8012058 <can2_charger_config_transmit+0x1a4>
       if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8012068:	4b09      	ldr	r3, [pc, #36]	; (8012090 <can2_charger_config_transmit+0x1dc>)
 801206a:	6818      	ldr	r0, [r3, #0]
 801206c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012070:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012074:	4b07      	ldr	r3, [pc, #28]	; (8012094 <can2_charger_config_transmit+0x1e0>)
 8012076:	f011 fea1 	bl	8023dbc <HAL_CAN_AddTxMessage>
 801207a:	4603      	mov	r3, r0
 801207c:	2b00      	cmp	r3, #0
 801207e:	d001      	beq.n	8012084 <can2_charger_config_transmit+0x1d0>
           Error_Handler();
 8012080:	f005 f886 	bl	8017190 <Error_Handler>
       }
}
 8012084:	bf00      	nop
 8012086:	3750      	adds	r7, #80	; 0x50
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}
 801208c:	20000678 	.word	0x20000678
 8012090:	20000694 	.word	0x20000694
 8012094:	200003f4 	.word	0x200003f4

08012098 <can1_ams_status_1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_status_1_receive() {
 8012098:	b580      	push	{r7, lr}
 801209a:	b092      	sub	sp, #72	; 0x48
 801209c:	af00      	add	r7, sp, #0
   if(can1_ams_status_1_flag) {
 801209e:	4b5c      	ldr	r3, [pc, #368]	; (8012210 <can1_ams_status_1_receive+0x178>)
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	f000 80af 	beq.w	8012206 <can1_ams_status_1_receive+0x16e>
       ams_status_1_t ams_status_1;
       ams_status_1.charging_status = can1_ams_status_1_charging_status_decode(can1_rx_ams_status_1.charging_status);
 80120a8:	4b5a      	ldr	r3, [pc, #360]	; (8012214 <can1_ams_status_1_receive+0x17c>)
 80120aa:	781b      	ldrb	r3, [r3, #0]
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7ef f9da 	bl	8001466 <can1_ams_status_1_charging_status_decode>
 80120b2:	ec53 2b10 	vmov	r2, r3, d0
 80120b6:	4610      	mov	r0, r2
 80120b8:	4619      	mov	r1, r3
 80120ba:	f7ee fd67 	bl	8000b8c <__aeabi_d2uiz>
 80120be:	4603      	mov	r3, r0
 80120c0:	b2db      	uxtb	r3, r3
 80120c2:	70fb      	strb	r3, [r7, #3]
       ams_status_1.air1_closed = can1_ams_status_1_air1_closed_decode(can1_rx_ams_status_1.air1_closed);
 80120c4:	4b53      	ldr	r3, [pc, #332]	; (8012214 <can1_ams_status_1_receive+0x17c>)
 80120c6:	785b      	ldrb	r3, [r3, #1]
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7ef f9ef 	bl	80014ac <can1_ams_status_1_air1_closed_decode>
 80120ce:	ec53 2b10 	vmov	r2, r3, d0
 80120d2:	4610      	mov	r0, r2
 80120d4:	4619      	mov	r1, r3
 80120d6:	f7ee fd59 	bl	8000b8c <__aeabi_d2uiz>
 80120da:	4603      	mov	r3, r0
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	703b      	strb	r3, [r7, #0]
       ams_status_1.air2_closed = can1_ams_status_1_air2_closed_decode(can1_rx_ams_status_1.air2_closed);
 80120e0:	4b4c      	ldr	r3, [pc, #304]	; (8012214 <can1_ams_status_1_receive+0x17c>)
 80120e2:	789b      	ldrb	r3, [r3, #2]
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7ef fa04 	bl	80014f2 <can1_ams_status_1_air2_closed_decode>
 80120ea:	ec53 2b10 	vmov	r2, r3, d0
 80120ee:	4610      	mov	r0, r2
 80120f0:	4619      	mov	r1, r3
 80120f2:	f7ee fd4b 	bl	8000b8c <__aeabi_d2uiz>
 80120f6:	4603      	mov	r3, r0
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	707b      	strb	r3, [r7, #1]
       ams_status_1.sc_closed = can1_ams_status_1_sc_closed_decode(can1_rx_ams_status_1.sc_closed);
 80120fc:	4b45      	ldr	r3, [pc, #276]	; (8012214 <can1_ams_status_1_receive+0x17c>)
 80120fe:	78db      	ldrb	r3, [r3, #3]
 8012100:	4618      	mov	r0, r3
 8012102:	f7ef fa19 	bl	8001538 <can1_ams_status_1_sc_closed_decode>
 8012106:	ec53 2b10 	vmov	r2, r3, d0
 801210a:	4610      	mov	r0, r2
 801210c:	4619      	mov	r1, r3
 801210e:	f7ee fd3d 	bl	8000b8c <__aeabi_d2uiz>
 8012112:	4603      	mov	r3, r0
 8012114:	b2db      	uxtb	r3, r3
 8012116:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
       ams_status_1.pre_charge_status = can1_ams_status_1_pre_charge_status_decode(can1_rx_ams_status_1.pre_charge_status);
 801211a:	4b3e      	ldr	r3, [pc, #248]	; (8012214 <can1_ams_status_1_receive+0x17c>)
 801211c:	791b      	ldrb	r3, [r3, #4]
 801211e:	4618      	mov	r0, r3
 8012120:	f7ef fa2d 	bl	800157e <can1_ams_status_1_pre_charge_status_decode>
 8012124:	ec53 2b10 	vmov	r2, r3, d0
 8012128:	4610      	mov	r0, r2
 801212a:	4619      	mov	r1, r3
 801212c:	f7ee fd2e 	bl	8000b8c <__aeabi_d2uiz>
 8012130:	4603      	mov	r3, r0
 8012132:	b2db      	uxtb	r3, r3
 8012134:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
       ams_status_1.ams_error = can1_ams_status_1_ams_error_decode(can1_rx_ams_status_1.ams_error);
 8012138:	4b36      	ldr	r3, [pc, #216]	; (8012214 <can1_ams_status_1_receive+0x17c>)
 801213a:	795b      	ldrb	r3, [r3, #5]
 801213c:	4618      	mov	r0, r3
 801213e:	f7ef fa41 	bl	80015c4 <can1_ams_status_1_ams_error_decode>
 8012142:	ec53 2b10 	vmov	r2, r3, d0
 8012146:	4610      	mov	r0, r2
 8012148:	4619      	mov	r1, r3
 801214a:	f7ee fd1f 	bl	8000b8c <__aeabi_d2uiz>
 801214e:	4603      	mov	r3, r0
 8012150:	b2db      	uxtb	r3, r3
 8012152:	70bb      	strb	r3, [r7, #2]
       ams_status_1.imd_error = can1_ams_status_1_imd_error_decode(can1_rx_ams_status_1.imd_error);
 8012154:	4b2f      	ldr	r3, [pc, #188]	; (8012214 <can1_ams_status_1_receive+0x17c>)
 8012156:	799b      	ldrb	r3, [r3, #6]
 8012158:	4618      	mov	r0, r3
 801215a:	f7ef fa56 	bl	800160a <can1_ams_status_1_imd_error_decode>
 801215e:	ec53 2b10 	vmov	r2, r3, d0
 8012162:	4610      	mov	r0, r2
 8012164:	4619      	mov	r1, r3
 8012166:	f7ee fd11 	bl	8000b8c <__aeabi_d2uiz>
 801216a:	4603      	mov	r3, r0
 801216c:	b2db      	uxtb	r3, r3
 801216e:	743b      	strb	r3, [r7, #16]
       ams_status_1.state_of_charge = can1_ams_status_1_state_of_charge_decode(can1_rx_ams_status_1.state_of_charge);
 8012170:	4b28      	ldr	r3, [pc, #160]	; (8012214 <can1_ams_status_1_receive+0x17c>)
 8012172:	79db      	ldrb	r3, [r3, #7]
 8012174:	4618      	mov	r0, r3
 8012176:	f7ef fa6b 	bl	8001650 <can1_ams_status_1_state_of_charge_decode>
 801217a:	eeb0 7a40 	vmov.f32	s14, s0
 801217e:	eef0 7a60 	vmov.f32	s15, s1
 8012182:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
       ams_status_1.min_cell_voltage = can1_ams_status_1_min_cell_voltage_decode(can1_rx_ams_status_1.min_cell_voltage);
 8012186:	4b23      	ldr	r3, [pc, #140]	; (8012214 <can1_ams_status_1_receive+0x17c>)
 8012188:	7a1b      	ldrb	r3, [r3, #8]
 801218a:	4618      	mov	r0, r3
 801218c:	f7ef faa0 	bl	80016d0 <can1_ams_status_1_min_cell_voltage_decode>
 8012190:	eeb0 7a40 	vmov.f32	s14, s0
 8012194:	eef0 7a60 	vmov.f32	s15, s1
 8012198:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
       ams_status_1.max_cell_voltage = can1_ams_status_1_max_cell_voltage_decode(can1_rx_ams_status_1.max_cell_voltage);
 801219c:	4b1d      	ldr	r3, [pc, #116]	; (8012214 <can1_ams_status_1_receive+0x17c>)
 801219e:	7a5b      	ldrb	r3, [r3, #9]
 80121a0:	4618      	mov	r0, r3
 80121a2:	f7ef faed 	bl	8001780 <can1_ams_status_1_max_cell_voltage_decode>
 80121a6:	eeb0 7a40 	vmov.f32	s14, s0
 80121aa:	eef0 7a60 	vmov.f32	s15, s1
 80121ae:	ed87 7b08 	vstr	d7, [r7, #32]
       ams_status_1.min_cell_temperature = can1_ams_status_1_min_cell_temperature_decode(can1_rx_ams_status_1.min_cell_temperature);
 80121b2:	4b18      	ldr	r3, [pc, #96]	; (8012214 <can1_ams_status_1_receive+0x17c>)
 80121b4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7ef fb39 	bl	8001830 <can1_ams_status_1_min_cell_temperature_decode>
 80121be:	eeb0 7a40 	vmov.f32	s14, s0
 80121c2:	eef0 7a60 	vmov.f32	s15, s1
 80121c6:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
       ams_status_1.max_cell_temperature = can1_ams_status_1_max_cell_temperature_decode(can1_rx_ams_status_1.max_cell_temperature);
 80121ca:	4b12      	ldr	r3, [pc, #72]	; (8012214 <can1_ams_status_1_receive+0x17c>)
 80121cc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7ef fb85 	bl	80018e0 <can1_ams_status_1_max_cell_temperature_decode>
 80121d6:	eeb0 7a40 	vmov.f32	s14, s0
 80121da:	eef0 7a60 	vmov.f32	s15, s1
 80121de:	ed87 7b06 	vstr	d7, [r7, #24]
       ams_status_1.fan_speed = can1_ams_status_1_fan_speed_decode(can1_rx_ams_status_1.fan_speed);
 80121e2:	4b0c      	ldr	r3, [pc, #48]	; (8012214 <can1_ams_status_1_receive+0x17c>)
 80121e4:	7b9b      	ldrb	r3, [r3, #14]
 80121e6:	4618      	mov	r0, r3
 80121e8:	f7ef fbb3 	bl	8001952 <can1_ams_status_1_fan_speed_decode>
 80121ec:	eeb0 7a40 	vmov.f32	s14, s0
 80121f0:	eef0 7a60 	vmov.f32	s15, s1
 80121f4:	ed87 7b02 	vstr	d7, [r7, #8]
       can1_ams_status_1_rx_callback(&ams_status_1);
 80121f8:	463b      	mov	r3, r7
 80121fa:	4618      	mov	r0, r3
 80121fc:	f001 ff02 	bl	8014004 <can1_ams_status_1_rx_callback>
       can1_ams_status_1_flag = 0;
 8012200:	4b03      	ldr	r3, [pc, #12]	; (8012210 <can1_ams_status_1_receive+0x178>)
 8012202:	2200      	movs	r2, #0
 8012204:	701a      	strb	r2, [r3, #0]
   }
}
 8012206:	bf00      	nop
 8012208:	3748      	adds	r7, #72	; 0x48
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}
 801220e:	bf00      	nop
 8012210:	20000682 	.word	0x20000682
 8012214:	20000400 	.word	0x20000400

08012218 <can1_dbu_status_1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_receive() {
 8012218:	b580      	push	{r7, lr}
 801221a:	b086      	sub	sp, #24
 801221c:	af00      	add	r7, sp, #0
   if(can1_dbu_status_1_flag) {
 801221e:	4b1b      	ldr	r3, [pc, #108]	; (801228c <can1_dbu_status_1_receive+0x74>)
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d02e      	beq.n	8012284 <can1_dbu_status_1_receive+0x6c>
       dbu_status_1_t dbu_status_1;
       dbu_status_1.activate_ts_button = can1_dbu_status_1_activate_ts_button_decode(can1_rx_dbu_status_1.activate_ts_button);
 8012226:	4b1a      	ldr	r3, [pc, #104]	; (8012290 <can1_dbu_status_1_receive+0x78>)
 8012228:	781b      	ldrb	r3, [r3, #0]
 801222a:	4618      	mov	r0, r3
 801222c:	f7ef fbf1 	bl	8001a12 <can1_dbu_status_1_activate_ts_button_decode>
 8012230:	ec53 2b10 	vmov	r2, r3, d0
 8012234:	4610      	mov	r0, r2
 8012236:	4619      	mov	r1, r3
 8012238:	f7ee fca8 	bl	8000b8c <__aeabi_d2uiz>
 801223c:	4603      	mov	r3, r0
 801223e:	b2db      	uxtb	r3, r3
 8012240:	703b      	strb	r3, [r7, #0]
       dbu_status_1.ready_to_drive_button = can1_dbu_status_1_ready_to_drive_button_decode(can1_rx_dbu_status_1.ready_to_drive_button);
 8012242:	4b13      	ldr	r3, [pc, #76]	; (8012290 <can1_dbu_status_1_receive+0x78>)
 8012244:	785b      	ldrb	r3, [r3, #1]
 8012246:	4618      	mov	r0, r3
 8012248:	f7ef fbf7 	bl	8001a3a <can1_dbu_status_1_ready_to_drive_button_decode>
 801224c:	ec53 2b10 	vmov	r2, r3, d0
 8012250:	4610      	mov	r0, r2
 8012252:	4619      	mov	r1, r3
 8012254:	f7ee fc9a 	bl	8000b8c <__aeabi_d2uiz>
 8012258:	4603      	mov	r3, r0
 801225a:	b2db      	uxtb	r3, r3
 801225c:	743b      	strb	r3, [r7, #16]
       dbu_status_1.dbu_temperature = can1_dbu_status_1_dbu_temperature_decode(can1_rx_dbu_status_1.dbu_temperature);
 801225e:	4b0c      	ldr	r3, [pc, #48]	; (8012290 <can1_dbu_status_1_receive+0x78>)
 8012260:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012264:	4618      	mov	r0, r3
 8012266:	f7ef fbff 	bl	8001a68 <can1_dbu_status_1_dbu_temperature_decode>
 801226a:	eeb0 7a40 	vmov.f32	s14, s0
 801226e:	eef0 7a60 	vmov.f32	s15, s1
 8012272:	ed87 7b02 	vstr	d7, [r7, #8]
       can1_dbu_status_1_rx_callback(&dbu_status_1);
 8012276:	463b      	mov	r3, r7
 8012278:	4618      	mov	r0, r3
 801227a:	f003 fa79 	bl	8015770 <can1_dbu_status_1_rx_callback>
       can1_dbu_status_1_flag = 0;
 801227e:	4b03      	ldr	r3, [pc, #12]	; (801228c <can1_dbu_status_1_receive+0x74>)
 8012280:	2200      	movs	r2, #0
 8012282:	701a      	strb	r2, [r3, #0]
   }
}
 8012284:	bf00      	nop
 8012286:	3718      	adds	r7, #24
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}
 801228c:	20000683 	.word	0x20000683
 8012290:	20000410 	.word	0x20000410

08012294 <can1_ams_temperatures_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_temperatures_receive() {
 8012294:	b580      	push	{r7, lr}
 8012296:	b088      	sub	sp, #32
 8012298:	af00      	add	r7, sp, #0
   if(can1_ams_temperatures_flag) {
 801229a:	4b1f      	ldr	r3, [pc, #124]	; (8012318 <can1_ams_temperatures_receive+0x84>)
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d036      	beq.n	8012310 <can1_ams_temperatures_receive+0x7c>
       ams_temperatures_t ams_temperatures;
       ams_temperatures.pre_charge_resistor_temperature = can1_ams_temperatures_pre_charge_resistor_temperature_decode(can1_rx_ams_temperatures.pre_charge_resistor_temperature);
 80122a2:	4b1e      	ldr	r3, [pc, #120]	; (801231c <can1_ams_temperatures_receive+0x88>)
 80122a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7ef fd81 	bl	8001db0 <can1_ams_temperatures_pre_charge_resistor_temperature_decode>
 80122ae:	eeb0 7a40 	vmov.f32	s14, s0
 80122b2:	eef0 7a60 	vmov.f32	s15, s1
 80122b6:	ed87 7b06 	vstr	d7, [r7, #24]
       ams_temperatures.fuse_resistor_temperature = can1_ams_temperatures_fuse_resistor_temperature_decode(can1_rx_ams_temperatures.fuse_resistor_temperature);
 80122ba:	4b18      	ldr	r3, [pc, #96]	; (801231c <can1_ams_temperatures_receive+0x88>)
 80122bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80122c0:	4618      	mov	r0, r3
 80122c2:	f7ef fdcd 	bl	8001e60 <can1_ams_temperatures_fuse_resistor_temperature_decode>
 80122c6:	eeb0 7a40 	vmov.f32	s14, s0
 80122ca:	eef0 7a60 	vmov.f32	s15, s1
 80122ce:	ed87 7b04 	vstr	d7, [r7, #16]
       ams_temperatures.aux_1_temperature = can1_ams_temperatures_aux_1_temperature_decode(can1_rx_ams_temperatures.aux_1_temperature);
 80122d2:	4b12      	ldr	r3, [pc, #72]	; (801231c <can1_ams_temperatures_receive+0x88>)
 80122d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80122d8:	4618      	mov	r0, r3
 80122da:	f7ef fe19 	bl	8001f10 <can1_ams_temperatures_aux_1_temperature_decode>
 80122de:	eeb0 7a40 	vmov.f32	s14, s0
 80122e2:	eef0 7a60 	vmov.f32	s15, s1
 80122e6:	ed87 7b00 	vstr	d7, [r7]
       ams_temperatures.aux_2_temperature = can1_ams_temperatures_aux_2_temperature_decode(can1_rx_ams_temperatures.aux_2_temperature);
 80122ea:	4b0c      	ldr	r3, [pc, #48]	; (801231c <can1_ams_temperatures_receive+0x88>)
 80122ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80122f0:	4618      	mov	r0, r3
 80122f2:	f7ef fe65 	bl	8001fc0 <can1_ams_temperatures_aux_2_temperature_decode>
 80122f6:	eeb0 7a40 	vmov.f32	s14, s0
 80122fa:	eef0 7a60 	vmov.f32	s15, s1
 80122fe:	ed87 7b02 	vstr	d7, [r7, #8]
       can1_ams_temperatures_rx_callback(&ams_temperatures);
 8012302:	463b      	mov	r3, r7
 8012304:	4618      	mov	r0, r3
 8012306:	f001 fe87 	bl	8014018 <can1_ams_temperatures_rx_callback>
       can1_ams_temperatures_flag = 0;
 801230a:	4b03      	ldr	r3, [pc, #12]	; (8012318 <can1_ams_temperatures_receive+0x84>)
 801230c:	2200      	movs	r2, #0
 801230e:	701a      	strb	r2, [r3, #0]
   }
}
 8012310:	bf00      	nop
 8012312:	3720      	adds	r7, #32
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}
 8012318:	20000684 	.word	0x20000684
 801231c:	20000414 	.word	0x20000414

08012320 <can1_ams_cell_voltages_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_voltages_receive() {
 8012320:	b580      	push	{r7, lr}
 8012322:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8012326:	af00      	add	r7, sp, #0
   if(can1_ams_cell_voltages_flag) {
 8012328:	4bdb      	ldr	r3, [pc, #876]	; (8012698 <can1_ams_cell_voltages_receive+0x378>)
 801232a:	781b      	ldrb	r3, [r3, #0]
 801232c:	2b00      	cmp	r3, #0
 801232e:	f000 865a 	beq.w	8012fe6 <can1_ams_cell_voltages_receive+0xcc6>
       ams_cell_voltages_t ams_cell_voltages;
       ams_cell_voltages.v1s1 = can1_ams_cell_voltages_v1s1_decode(can1_rx_ams_cell_voltages.v1s1);
 8012332:	4bda      	ldr	r3, [pc, #872]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 8012334:	785b      	ldrb	r3, [r3, #1]
 8012336:	4618      	mov	r0, r3
 8012338:	f7f1 feaa 	bl	8004090 <can1_ams_cell_voltages_v1s1_decode>
 801233c:	eeb0 7a40 	vmov.f32	s14, s0
 8012340:	eef0 7a60 	vmov.f32	s15, s1
 8012344:	463b      	mov	r3, r7
 8012346:	ed83 7b00 	vstr	d7, [r3]
       ams_cell_voltages.v7s1 = can1_ams_cell_voltages_v7s1_decode(can1_rx_ams_cell_voltages.v7s1);
 801234a:	4bd4      	ldr	r3, [pc, #848]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 801234c:	789b      	ldrb	r3, [r3, #2]
 801234e:	4618      	mov	r0, r3
 8012350:	f7f1 fef6 	bl	8004140 <can1_ams_cell_voltages_v7s1_decode>
 8012354:	eeb0 7a40 	vmov.f32	s14, s0
 8012358:	eef0 7a60 	vmov.f32	s15, s1
 801235c:	463b      	mov	r3, r7
 801235e:	ed83 7b90 	vstr	d7, [r3, #576]	; 0x240
       ams_cell_voltages.v1s2 = can1_ams_cell_voltages_v1s2_decode(can1_rx_ams_cell_voltages.v1s2);
 8012362:	4bce      	ldr	r3, [pc, #824]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 8012364:	78db      	ldrb	r3, [r3, #3]
 8012366:	4618      	mov	r0, r3
 8012368:	f7f1 ff42 	bl	80041f0 <can1_ams_cell_voltages_v1s2_decode>
 801236c:	eeb0 7a40 	vmov.f32	s14, s0
 8012370:	eef0 7a60 	vmov.f32	s15, s1
 8012374:	463b      	mov	r3, r7
 8012376:	ed83 7b02 	vstr	d7, [r3, #8]
       ams_cell_voltages.v7s2 = can1_ams_cell_voltages_v7s2_decode(can1_rx_ams_cell_voltages.v7s2);
 801237a:	4bc8      	ldr	r3, [pc, #800]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 801237c:	791b      	ldrb	r3, [r3, #4]
 801237e:	4618      	mov	r0, r3
 8012380:	f7f1 ff8e 	bl	80042a0 <can1_ams_cell_voltages_v7s2_decode>
 8012384:	eeb0 7a40 	vmov.f32	s14, s0
 8012388:	eef0 7a60 	vmov.f32	s15, s1
 801238c:	463b      	mov	r3, r7
 801238e:	ed83 7b92 	vstr	d7, [r3, #584]	; 0x248
       ams_cell_voltages.v1s3 = can1_ams_cell_voltages_v1s3_decode(can1_rx_ams_cell_voltages.v1s3);
 8012392:	4bc2      	ldr	r3, [pc, #776]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 8012394:	795b      	ldrb	r3, [r3, #5]
 8012396:	4618      	mov	r0, r3
 8012398:	f7f1 ffda 	bl	8004350 <can1_ams_cell_voltages_v1s3_decode>
 801239c:	eeb0 7a40 	vmov.f32	s14, s0
 80123a0:	eef0 7a60 	vmov.f32	s15, s1
 80123a4:	463b      	mov	r3, r7
 80123a6:	ed83 7b04 	vstr	d7, [r3, #16]
       ams_cell_voltages.v7s3 = can1_ams_cell_voltages_v7s3_decode(can1_rx_ams_cell_voltages.v7s3);
 80123aa:	4bbc      	ldr	r3, [pc, #752]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 80123ac:	799b      	ldrb	r3, [r3, #6]
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7f2 f826 	bl	8004400 <can1_ams_cell_voltages_v7s3_decode>
 80123b4:	eeb0 7a40 	vmov.f32	s14, s0
 80123b8:	eef0 7a60 	vmov.f32	s15, s1
 80123bc:	463b      	mov	r3, r7
 80123be:	ed83 7b94 	vstr	d7, [r3, #592]	; 0x250
       ams_cell_voltages.v1s4 = can1_ams_cell_voltages_v1s4_decode(can1_rx_ams_cell_voltages.v1s4);
 80123c2:	4bb6      	ldr	r3, [pc, #728]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 80123c4:	79db      	ldrb	r3, [r3, #7]
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7f2 f872 	bl	80044b0 <can1_ams_cell_voltages_v1s4_decode>
 80123cc:	eeb0 7a40 	vmov.f32	s14, s0
 80123d0:	eef0 7a60 	vmov.f32	s15, s1
 80123d4:	463b      	mov	r3, r7
 80123d6:	ed83 7b06 	vstr	d7, [r3, #24]
       ams_cell_voltages.v7s4 = can1_ams_cell_voltages_v7s4_decode(can1_rx_ams_cell_voltages.v7s4);
 80123da:	4bb0      	ldr	r3, [pc, #704]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 80123dc:	7a1b      	ldrb	r3, [r3, #8]
 80123de:	4618      	mov	r0, r3
 80123e0:	f7f2 f8be 	bl	8004560 <can1_ams_cell_voltages_v7s4_decode>
 80123e4:	eeb0 7a40 	vmov.f32	s14, s0
 80123e8:	eef0 7a60 	vmov.f32	s15, s1
 80123ec:	463b      	mov	r3, r7
 80123ee:	ed83 7b96 	vstr	d7, [r3, #600]	; 0x258
       ams_cell_voltages.v1s5 = can1_ams_cell_voltages_v1s5_decode(can1_rx_ams_cell_voltages.v1s5);
 80123f2:	4baa      	ldr	r3, [pc, #680]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 80123f4:	7a5b      	ldrb	r3, [r3, #9]
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7f2 f90a 	bl	8004610 <can1_ams_cell_voltages_v1s5_decode>
 80123fc:	eeb0 7a40 	vmov.f32	s14, s0
 8012400:	eef0 7a60 	vmov.f32	s15, s1
 8012404:	463b      	mov	r3, r7
 8012406:	ed83 7b08 	vstr	d7, [r3, #32]
       ams_cell_voltages.v7s5 = can1_ams_cell_voltages_v7s5_decode(can1_rx_ams_cell_voltages.v7s5);
 801240a:	4ba4      	ldr	r3, [pc, #656]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 801240c:	7a9b      	ldrb	r3, [r3, #10]
 801240e:	4618      	mov	r0, r3
 8012410:	f7f2 f956 	bl	80046c0 <can1_ams_cell_voltages_v7s5_decode>
 8012414:	eeb0 7a40 	vmov.f32	s14, s0
 8012418:	eef0 7a60 	vmov.f32	s15, s1
 801241c:	463b      	mov	r3, r7
 801241e:	ed83 7b98 	vstr	d7, [r3, #608]	; 0x260
       ams_cell_voltages.v1s6 = can1_ams_cell_voltages_v1s6_decode(can1_rx_ams_cell_voltages.v1s6);
 8012422:	4b9e      	ldr	r3, [pc, #632]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 8012424:	7adb      	ldrb	r3, [r3, #11]
 8012426:	4618      	mov	r0, r3
 8012428:	f7f2 f9a2 	bl	8004770 <can1_ams_cell_voltages_v1s6_decode>
 801242c:	eeb0 7a40 	vmov.f32	s14, s0
 8012430:	eef0 7a60 	vmov.f32	s15, s1
 8012434:	463b      	mov	r3, r7
 8012436:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
       ams_cell_voltages.v7s6 = can1_ams_cell_voltages_v7s6_decode(can1_rx_ams_cell_voltages.v7s6);
 801243a:	4b98      	ldr	r3, [pc, #608]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 801243c:	7b1b      	ldrb	r3, [r3, #12]
 801243e:	4618      	mov	r0, r3
 8012440:	f7f2 f9ee 	bl	8004820 <can1_ams_cell_voltages_v7s6_decode>
 8012444:	eeb0 7a40 	vmov.f32	s14, s0
 8012448:	eef0 7a60 	vmov.f32	s15, s1
 801244c:	463b      	mov	r3, r7
 801244e:	ed83 7b9a 	vstr	d7, [r3, #616]	; 0x268
       ams_cell_voltages.v1s7 = can1_ams_cell_voltages_v1s7_decode(can1_rx_ams_cell_voltages.v1s7);
 8012452:	4b92      	ldr	r3, [pc, #584]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 8012454:	7b5b      	ldrb	r3, [r3, #13]
 8012456:	4618      	mov	r0, r3
 8012458:	f7f2 fa3a 	bl	80048d0 <can1_ams_cell_voltages_v1s7_decode>
 801245c:	eeb0 7a40 	vmov.f32	s14, s0
 8012460:	eef0 7a60 	vmov.f32	s15, s1
 8012464:	463b      	mov	r3, r7
 8012466:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
       ams_cell_voltages.v7s7 = can1_ams_cell_voltages_v7s7_decode(can1_rx_ams_cell_voltages.v7s7);
 801246a:	4b8c      	ldr	r3, [pc, #560]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 801246c:	7b9b      	ldrb	r3, [r3, #14]
 801246e:	4618      	mov	r0, r3
 8012470:	f7f2 fa86 	bl	8004980 <can1_ams_cell_voltages_v7s7_decode>
 8012474:	eeb0 7a40 	vmov.f32	s14, s0
 8012478:	eef0 7a60 	vmov.f32	s15, s1
 801247c:	463b      	mov	r3, r7
 801247e:	ed83 7b9c 	vstr	d7, [r3, #624]	; 0x270
       ams_cell_voltages.v1s8 = can1_ams_cell_voltages_v1s8_decode(can1_rx_ams_cell_voltages.v1s8);
 8012482:	4b86      	ldr	r3, [pc, #536]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 8012484:	7bdb      	ldrb	r3, [r3, #15]
 8012486:	4618      	mov	r0, r3
 8012488:	f7f2 fad2 	bl	8004a30 <can1_ams_cell_voltages_v1s8_decode>
 801248c:	eeb0 7a40 	vmov.f32	s14, s0
 8012490:	eef0 7a60 	vmov.f32	s15, s1
 8012494:	463b      	mov	r3, r7
 8012496:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
       ams_cell_voltages.v7s8 = can1_ams_cell_voltages_v7s8_decode(can1_rx_ams_cell_voltages.v7s8);
 801249a:	4b80      	ldr	r3, [pc, #512]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 801249c:	7c1b      	ldrb	r3, [r3, #16]
 801249e:	4618      	mov	r0, r3
 80124a0:	f7f2 fb1e 	bl	8004ae0 <can1_ams_cell_voltages_v7s8_decode>
 80124a4:	eeb0 7a40 	vmov.f32	s14, s0
 80124a8:	eef0 7a60 	vmov.f32	s15, s1
 80124ac:	463b      	mov	r3, r7
 80124ae:	ed83 7b9e 	vstr	d7, [r3, #632]	; 0x278
       ams_cell_voltages.v1s9 = can1_ams_cell_voltages_v1s9_decode(can1_rx_ams_cell_voltages.v1s9);
 80124b2:	4b7a      	ldr	r3, [pc, #488]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 80124b4:	7c5b      	ldrb	r3, [r3, #17]
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7f2 fb6a 	bl	8004b90 <can1_ams_cell_voltages_v1s9_decode>
 80124bc:	eeb0 7a40 	vmov.f32	s14, s0
 80124c0:	eef0 7a60 	vmov.f32	s15, s1
 80124c4:	463b      	mov	r3, r7
 80124c6:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
       ams_cell_voltages.v7s9 = can1_ams_cell_voltages_v7s9_decode(can1_rx_ams_cell_voltages.v7s9);
 80124ca:	4b74      	ldr	r3, [pc, #464]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 80124cc:	7c9b      	ldrb	r3, [r3, #18]
 80124ce:	4618      	mov	r0, r3
 80124d0:	f7f2 fbb6 	bl	8004c40 <can1_ams_cell_voltages_v7s9_decode>
 80124d4:	eeb0 7a40 	vmov.f32	s14, s0
 80124d8:	eef0 7a60 	vmov.f32	s15, s1
 80124dc:	463b      	mov	r3, r7
 80124de:	ed83 7ba0 	vstr	d7, [r3, #640]	; 0x280
       ams_cell_voltages.v1s10 = can1_ams_cell_voltages_v1s10_decode(can1_rx_ams_cell_voltages.v1s10);
 80124e2:	4b6e      	ldr	r3, [pc, #440]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 80124e4:	7cdb      	ldrb	r3, [r3, #19]
 80124e6:	4618      	mov	r0, r3
 80124e8:	f7f2 fc02 	bl	8004cf0 <can1_ams_cell_voltages_v1s10_decode>
 80124ec:	eeb0 7a40 	vmov.f32	s14, s0
 80124f0:	eef0 7a60 	vmov.f32	s15, s1
 80124f4:	463b      	mov	r3, r7
 80124f6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
       ams_cell_voltages.v7s10 = can1_ams_cell_voltages_v7s10_decode(can1_rx_ams_cell_voltages.v7s10);
 80124fa:	4b68      	ldr	r3, [pc, #416]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 80124fc:	7d1b      	ldrb	r3, [r3, #20]
 80124fe:	4618      	mov	r0, r3
 8012500:	f7f2 fc4e 	bl	8004da0 <can1_ams_cell_voltages_v7s10_decode>
 8012504:	eeb0 7a40 	vmov.f32	s14, s0
 8012508:	eef0 7a60 	vmov.f32	s15, s1
 801250c:	463b      	mov	r3, r7
 801250e:	ed83 7ba2 	vstr	d7, [r3, #648]	; 0x288
       ams_cell_voltages.v1s11 = can1_ams_cell_voltages_v1s11_decode(can1_rx_ams_cell_voltages.v1s11);
 8012512:	4b62      	ldr	r3, [pc, #392]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 8012514:	7d5b      	ldrb	r3, [r3, #21]
 8012516:	4618      	mov	r0, r3
 8012518:	f7f2 fc9a 	bl	8004e50 <can1_ams_cell_voltages_v1s11_decode>
 801251c:	eeb0 7a40 	vmov.f32	s14, s0
 8012520:	eef0 7a60 	vmov.f32	s15, s1
 8012524:	463b      	mov	r3, r7
 8012526:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
       ams_cell_voltages.v7s11 = can1_ams_cell_voltages_v7s11_decode(can1_rx_ams_cell_voltages.v7s11);
 801252a:	4b5c      	ldr	r3, [pc, #368]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 801252c:	7d9b      	ldrb	r3, [r3, #22]
 801252e:	4618      	mov	r0, r3
 8012530:	f7f2 fce6 	bl	8004f00 <can1_ams_cell_voltages_v7s11_decode>
 8012534:	eeb0 7a40 	vmov.f32	s14, s0
 8012538:	eef0 7a60 	vmov.f32	s15, s1
 801253c:	463b      	mov	r3, r7
 801253e:	ed83 7ba4 	vstr	d7, [r3, #656]	; 0x290
       ams_cell_voltages.v1s12 = can1_ams_cell_voltages_v1s12_decode(can1_rx_ams_cell_voltages.v1s12);
 8012542:	4b56      	ldr	r3, [pc, #344]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 8012544:	7ddb      	ldrb	r3, [r3, #23]
 8012546:	4618      	mov	r0, r3
 8012548:	f7f2 fd32 	bl	8004fb0 <can1_ams_cell_voltages_v1s12_decode>
 801254c:	eeb0 7a40 	vmov.f32	s14, s0
 8012550:	eef0 7a60 	vmov.f32	s15, s1
 8012554:	463b      	mov	r3, r7
 8012556:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
       ams_cell_voltages.v7s12 = can1_ams_cell_voltages_v7s12_decode(can1_rx_ams_cell_voltages.v7s12);
 801255a:	4b50      	ldr	r3, [pc, #320]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 801255c:	7e1b      	ldrb	r3, [r3, #24]
 801255e:	4618      	mov	r0, r3
 8012560:	f7f2 fd7e 	bl	8005060 <can1_ams_cell_voltages_v7s12_decode>
 8012564:	eeb0 7a40 	vmov.f32	s14, s0
 8012568:	eef0 7a60 	vmov.f32	s15, s1
 801256c:	463b      	mov	r3, r7
 801256e:	ed83 7ba6 	vstr	d7, [r3, #664]	; 0x298
       ams_cell_voltages.v2s1 = can1_ams_cell_voltages_v2s1_decode(can1_rx_ams_cell_voltages.v2s1);
 8012572:	4b4a      	ldr	r3, [pc, #296]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 8012574:	7e5b      	ldrb	r3, [r3, #25]
 8012576:	4618      	mov	r0, r3
 8012578:	f7f2 fdca 	bl	8005110 <can1_ams_cell_voltages_v2s1_decode>
 801257c:	eeb0 7a40 	vmov.f32	s14, s0
 8012580:	eef0 7a60 	vmov.f32	s15, s1
 8012584:	463b      	mov	r3, r7
 8012586:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
       ams_cell_voltages.v8s1 = can1_ams_cell_voltages_v8s1_decode(can1_rx_ams_cell_voltages.v8s1);
 801258a:	4b44      	ldr	r3, [pc, #272]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 801258c:	7e9b      	ldrb	r3, [r3, #26]
 801258e:	4618      	mov	r0, r3
 8012590:	f7f2 fe16 	bl	80051c0 <can1_ams_cell_voltages_v8s1_decode>
 8012594:	eeb0 7a40 	vmov.f32	s14, s0
 8012598:	eef0 7a60 	vmov.f32	s15, s1
 801259c:	463b      	mov	r3, r7
 801259e:	ed83 7ba8 	vstr	d7, [r3, #672]	; 0x2a0
       ams_cell_voltages.v2s2 = can1_ams_cell_voltages_v2s2_decode(can1_rx_ams_cell_voltages.v2s2);
 80125a2:	4b3e      	ldr	r3, [pc, #248]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 80125a4:	7edb      	ldrb	r3, [r3, #27]
 80125a6:	4618      	mov	r0, r3
 80125a8:	f7f2 fe62 	bl	8005270 <can1_ams_cell_voltages_v2s2_decode>
 80125ac:	eeb0 7a40 	vmov.f32	s14, s0
 80125b0:	eef0 7a60 	vmov.f32	s15, s1
 80125b4:	463b      	mov	r3, r7
 80125b6:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
       ams_cell_voltages.v8s2 = can1_ams_cell_voltages_v8s2_decode(can1_rx_ams_cell_voltages.v8s2);
 80125ba:	4b38      	ldr	r3, [pc, #224]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 80125bc:	7f1b      	ldrb	r3, [r3, #28]
 80125be:	4618      	mov	r0, r3
 80125c0:	f7f2 feae 	bl	8005320 <can1_ams_cell_voltages_v8s2_decode>
 80125c4:	eeb0 7a40 	vmov.f32	s14, s0
 80125c8:	eef0 7a60 	vmov.f32	s15, s1
 80125cc:	463b      	mov	r3, r7
 80125ce:	ed83 7baa 	vstr	d7, [r3, #680]	; 0x2a8
       ams_cell_voltages.v2s3 = can1_ams_cell_voltages_v2s3_decode(can1_rx_ams_cell_voltages.v2s3);
 80125d2:	4b32      	ldr	r3, [pc, #200]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 80125d4:	7f5b      	ldrb	r3, [r3, #29]
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7f2 fefa 	bl	80053d0 <can1_ams_cell_voltages_v2s3_decode>
 80125dc:	eeb0 7a40 	vmov.f32	s14, s0
 80125e0:	eef0 7a60 	vmov.f32	s15, s1
 80125e4:	463b      	mov	r3, r7
 80125e6:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
       ams_cell_voltages.v8s3 = can1_ams_cell_voltages_v8s3_decode(can1_rx_ams_cell_voltages.v8s3);
 80125ea:	4b2c      	ldr	r3, [pc, #176]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 80125ec:	7f9b      	ldrb	r3, [r3, #30]
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7f2 ff46 	bl	8005480 <can1_ams_cell_voltages_v8s3_decode>
 80125f4:	eeb0 7a40 	vmov.f32	s14, s0
 80125f8:	eef0 7a60 	vmov.f32	s15, s1
 80125fc:	463b      	mov	r3, r7
 80125fe:	ed83 7bac 	vstr	d7, [r3, #688]	; 0x2b0
       ams_cell_voltages.v2s4 = can1_ams_cell_voltages_v2s4_decode(can1_rx_ams_cell_voltages.v2s4);
 8012602:	4b26      	ldr	r3, [pc, #152]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 8012604:	7fdb      	ldrb	r3, [r3, #31]
 8012606:	4618      	mov	r0, r3
 8012608:	f7f2 ff92 	bl	8005530 <can1_ams_cell_voltages_v2s4_decode>
 801260c:	eeb0 7a40 	vmov.f32	s14, s0
 8012610:	eef0 7a60 	vmov.f32	s15, s1
 8012614:	463b      	mov	r3, r7
 8012616:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
       ams_cell_voltages.v8s4 = can1_ams_cell_voltages_v8s4_decode(can1_rx_ams_cell_voltages.v8s4);
 801261a:	4b20      	ldr	r3, [pc, #128]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 801261c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012620:	4618      	mov	r0, r3
 8012622:	f7f2 ffdd 	bl	80055e0 <can1_ams_cell_voltages_v8s4_decode>
 8012626:	eeb0 7a40 	vmov.f32	s14, s0
 801262a:	eef0 7a60 	vmov.f32	s15, s1
 801262e:	463b      	mov	r3, r7
 8012630:	ed83 7bae 	vstr	d7, [r3, #696]	; 0x2b8
       ams_cell_voltages.v2s5 = can1_ams_cell_voltages_v2s5_decode(can1_rx_ams_cell_voltages.v2s5);
 8012634:	4b19      	ldr	r3, [pc, #100]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 8012636:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801263a:	4618      	mov	r0, r3
 801263c:	f7f3 f828 	bl	8005690 <can1_ams_cell_voltages_v2s5_decode>
 8012640:	eeb0 7a40 	vmov.f32	s14, s0
 8012644:	eef0 7a60 	vmov.f32	s15, s1
 8012648:	463b      	mov	r3, r7
 801264a:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
       ams_cell_voltages.v8s5 = can1_ams_cell_voltages_v8s5_decode(can1_rx_ams_cell_voltages.v8s5);
 801264e:	4b13      	ldr	r3, [pc, #76]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 8012650:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012654:	4618      	mov	r0, r3
 8012656:	f7f3 f873 	bl	8005740 <can1_ams_cell_voltages_v8s5_decode>
 801265a:	eeb0 7a40 	vmov.f32	s14, s0
 801265e:	eef0 7a60 	vmov.f32	s15, s1
 8012662:	463b      	mov	r3, r7
 8012664:	ed83 7bb0 	vstr	d7, [r3, #704]	; 0x2c0
       ams_cell_voltages.v2s6 = can1_ams_cell_voltages_v2s6_decode(can1_rx_ams_cell_voltages.v2s6);
 8012668:	4b0c      	ldr	r3, [pc, #48]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 801266a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801266e:	4618      	mov	r0, r3
 8012670:	f7f3 f8be 	bl	80057f0 <can1_ams_cell_voltages_v2s6_decode>
 8012674:	eeb0 7a40 	vmov.f32	s14, s0
 8012678:	eef0 7a60 	vmov.f32	s15, s1
 801267c:	463b      	mov	r3, r7
 801267e:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
       ams_cell_voltages.v8s6 = can1_ams_cell_voltages_v8s6_decode(can1_rx_ams_cell_voltages.v8s6);
 8012682:	4b06      	ldr	r3, [pc, #24]	; (801269c <can1_ams_cell_voltages_receive+0x37c>)
 8012684:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012688:	4618      	mov	r0, r3
 801268a:	f7f3 f909 	bl	80058a0 <can1_ams_cell_voltages_v8s6_decode>
 801268e:	eeb0 7a40 	vmov.f32	s14, s0
 8012692:	eef0 7a60 	vmov.f32	s15, s1
 8012696:	e003      	b.n	80126a0 <can1_ams_cell_voltages_receive+0x380>
 8012698:	20000685 	.word	0x20000685
 801269c:	2000041c 	.word	0x2000041c
 80126a0:	463b      	mov	r3, r7
 80126a2:	ed83 7bb2 	vstr	d7, [r3, #712]	; 0x2c8
       ams_cell_voltages.v2s7 = can1_ams_cell_voltages_v2s7_decode(can1_rx_ams_cell_voltages.v2s7);
 80126a6:	4bec      	ldr	r3, [pc, #944]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 80126a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7f3 f94f 	bl	8005950 <can1_ams_cell_voltages_v2s7_decode>
 80126b2:	eeb0 7a40 	vmov.f32	s14, s0
 80126b6:	eef0 7a60 	vmov.f32	s15, s1
 80126ba:	463b      	mov	r3, r7
 80126bc:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
       ams_cell_voltages.v8s7 = can1_ams_cell_voltages_v8s7_decode(can1_rx_ams_cell_voltages.v8s7);
 80126c0:	4be5      	ldr	r3, [pc, #916]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 80126c2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7f3 f99a 	bl	8005a00 <can1_ams_cell_voltages_v8s7_decode>
 80126cc:	eeb0 7a40 	vmov.f32	s14, s0
 80126d0:	eef0 7a60 	vmov.f32	s15, s1
 80126d4:	463b      	mov	r3, r7
 80126d6:	ed83 7bb4 	vstr	d7, [r3, #720]	; 0x2d0
       ams_cell_voltages.v2s8 = can1_ams_cell_voltages_v2s8_decode(can1_rx_ams_cell_voltages.v2s8);
 80126da:	4bdf      	ldr	r3, [pc, #892]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 80126dc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80126e0:	4618      	mov	r0, r3
 80126e2:	f7f3 f9e5 	bl	8005ab0 <can1_ams_cell_voltages_v2s8_decode>
 80126e6:	eeb0 7a40 	vmov.f32	s14, s0
 80126ea:	eef0 7a60 	vmov.f32	s15, s1
 80126ee:	463b      	mov	r3, r7
 80126f0:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
       ams_cell_voltages.v8s8 = can1_ams_cell_voltages_v8s8_decode(can1_rx_ams_cell_voltages.v8s8);
 80126f4:	4bd8      	ldr	r3, [pc, #864]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 80126f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7f3 fa30 	bl	8005b60 <can1_ams_cell_voltages_v8s8_decode>
 8012700:	eeb0 7a40 	vmov.f32	s14, s0
 8012704:	eef0 7a60 	vmov.f32	s15, s1
 8012708:	463b      	mov	r3, r7
 801270a:	ed83 7bb6 	vstr	d7, [r3, #728]	; 0x2d8
       ams_cell_voltages.v2s9 = can1_ams_cell_voltages_v2s9_decode(can1_rx_ams_cell_voltages.v2s9);
 801270e:	4bd2      	ldr	r3, [pc, #840]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012710:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8012714:	4618      	mov	r0, r3
 8012716:	f7f3 fa7b 	bl	8005c10 <can1_ams_cell_voltages_v2s9_decode>
 801271a:	eeb0 7a40 	vmov.f32	s14, s0
 801271e:	eef0 7a60 	vmov.f32	s15, s1
 8012722:	463b      	mov	r3, r7
 8012724:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
       ams_cell_voltages.v8s9 = can1_ams_cell_voltages_v8s9_decode(can1_rx_ams_cell_voltages.v8s9);
 8012728:	4bcb      	ldr	r3, [pc, #812]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 801272a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801272e:	4618      	mov	r0, r3
 8012730:	f7f3 fac6 	bl	8005cc0 <can1_ams_cell_voltages_v8s9_decode>
 8012734:	eeb0 7a40 	vmov.f32	s14, s0
 8012738:	eef0 7a60 	vmov.f32	s15, s1
 801273c:	463b      	mov	r3, r7
 801273e:	ed83 7bb8 	vstr	d7, [r3, #736]	; 0x2e0
       ams_cell_voltages.v2s10 = can1_ams_cell_voltages_v2s10_decode(can1_rx_ams_cell_voltages.v2s10);
 8012742:	4bc5      	ldr	r3, [pc, #788]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012744:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012748:	4618      	mov	r0, r3
 801274a:	f7f3 fb11 	bl	8005d70 <can1_ams_cell_voltages_v2s10_decode>
 801274e:	eeb0 7a40 	vmov.f32	s14, s0
 8012752:	eef0 7a60 	vmov.f32	s15, s1
 8012756:	463b      	mov	r3, r7
 8012758:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
       ams_cell_voltages.v8s10 = can1_ams_cell_voltages_v8s10_decode(can1_rx_ams_cell_voltages.v8s10);
 801275c:	4bbe      	ldr	r3, [pc, #760]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 801275e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012762:	4618      	mov	r0, r3
 8012764:	f7f3 fb5c 	bl	8005e20 <can1_ams_cell_voltages_v8s10_decode>
 8012768:	eeb0 7a40 	vmov.f32	s14, s0
 801276c:	eef0 7a60 	vmov.f32	s15, s1
 8012770:	463b      	mov	r3, r7
 8012772:	ed83 7bba 	vstr	d7, [r3, #744]	; 0x2e8
       ams_cell_voltages.v2s11 = can1_ams_cell_voltages_v2s11_decode(can1_rx_ams_cell_voltages.v2s11);
 8012776:	4bb8      	ldr	r3, [pc, #736]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012778:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801277c:	4618      	mov	r0, r3
 801277e:	f7f3 fba7 	bl	8005ed0 <can1_ams_cell_voltages_v2s11_decode>
 8012782:	eeb0 7a40 	vmov.f32	s14, s0
 8012786:	eef0 7a60 	vmov.f32	s15, s1
 801278a:	463b      	mov	r3, r7
 801278c:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
       ams_cell_voltages.v8s11 = can1_ams_cell_voltages_v8s11_decode(can1_rx_ams_cell_voltages.v8s11);
 8012790:	4bb1      	ldr	r3, [pc, #708]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012792:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012796:	4618      	mov	r0, r3
 8012798:	f7f3 fbf2 	bl	8005f80 <can1_ams_cell_voltages_v8s11_decode>
 801279c:	eeb0 7a40 	vmov.f32	s14, s0
 80127a0:	eef0 7a60 	vmov.f32	s15, s1
 80127a4:	463b      	mov	r3, r7
 80127a6:	ed83 7bbc 	vstr	d7, [r3, #752]	; 0x2f0
       ams_cell_voltages.v2s12 = can1_ams_cell_voltages_v2s12_decode(can1_rx_ams_cell_voltages.v2s12);
 80127aa:	4bab      	ldr	r3, [pc, #684]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 80127ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80127b0:	4618      	mov	r0, r3
 80127b2:	f7f3 fc3d 	bl	8006030 <can1_ams_cell_voltages_v2s12_decode>
 80127b6:	eeb0 7a40 	vmov.f32	s14, s0
 80127ba:	eef0 7a60 	vmov.f32	s15, s1
 80127be:	463b      	mov	r3, r7
 80127c0:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
       ams_cell_voltages.v8s12 = can1_ams_cell_voltages_v8s12_decode(can1_rx_ams_cell_voltages.v8s12);
 80127c4:	4ba4      	ldr	r3, [pc, #656]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 80127c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7f3 fc88 	bl	80060e0 <can1_ams_cell_voltages_v8s12_decode>
 80127d0:	eeb0 7a40 	vmov.f32	s14, s0
 80127d4:	eef0 7a60 	vmov.f32	s15, s1
 80127d8:	463b      	mov	r3, r7
 80127da:	ed83 7bbe 	vstr	d7, [r3, #760]	; 0x2f8
       ams_cell_voltages.v3s1 = can1_ams_cell_voltages_v3s1_decode(can1_rx_ams_cell_voltages.v3s1);
 80127de:	4b9e      	ldr	r3, [pc, #632]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 80127e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80127e4:	4618      	mov	r0, r3
 80127e6:	f7f3 fcd3 	bl	8006190 <can1_ams_cell_voltages_v3s1_decode>
 80127ea:	eeb0 7a40 	vmov.f32	s14, s0
 80127ee:	eef0 7a60 	vmov.f32	s15, s1
 80127f2:	463b      	mov	r3, r7
 80127f4:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
       ams_cell_voltages.v9s1 = can1_ams_cell_voltages_v9s1_decode(can1_rx_ams_cell_voltages.v9s1);
 80127f8:	4b97      	ldr	r3, [pc, #604]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 80127fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80127fe:	4618      	mov	r0, r3
 8012800:	f7f3 fd1e 	bl	8006240 <can1_ams_cell_voltages_v9s1_decode>
 8012804:	eeb0 7a40 	vmov.f32	s14, s0
 8012808:	eef0 7a60 	vmov.f32	s15, s1
 801280c:	463b      	mov	r3, r7
 801280e:	ed83 7bc0 	vstr	d7, [r3, #768]	; 0x300
       ams_cell_voltages.v3s2 = can1_ams_cell_voltages_v3s2_decode(can1_rx_ams_cell_voltages.v3s2);
 8012812:	4b91      	ldr	r3, [pc, #580]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012814:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012818:	4618      	mov	r0, r3
 801281a:	f7f3 fd69 	bl	80062f0 <can1_ams_cell_voltages_v3s2_decode>
 801281e:	eeb0 7a40 	vmov.f32	s14, s0
 8012822:	eef0 7a60 	vmov.f32	s15, s1
 8012826:	463b      	mov	r3, r7
 8012828:	ed83 7b32 	vstr	d7, [r3, #200]	; 0xc8
       ams_cell_voltages.v9s2 = can1_ams_cell_voltages_v9s2_decode(can1_rx_ams_cell_voltages.v9s2);
 801282c:	4b8a      	ldr	r3, [pc, #552]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 801282e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012832:	4618      	mov	r0, r3
 8012834:	f7f3 fdb4 	bl	80063a0 <can1_ams_cell_voltages_v9s2_decode>
 8012838:	eeb0 7a40 	vmov.f32	s14, s0
 801283c:	eef0 7a60 	vmov.f32	s15, s1
 8012840:	463b      	mov	r3, r7
 8012842:	ed83 7bc2 	vstr	d7, [r3, #776]	; 0x308
       ams_cell_voltages.v3s3 = can1_ams_cell_voltages_v3s3_decode(can1_rx_ams_cell_voltages.v3s3);
 8012846:	4b84      	ldr	r3, [pc, #528]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012848:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801284c:	4618      	mov	r0, r3
 801284e:	f7f3 fdff 	bl	8006450 <can1_ams_cell_voltages_v3s3_decode>
 8012852:	eeb0 7a40 	vmov.f32	s14, s0
 8012856:	eef0 7a60 	vmov.f32	s15, s1
 801285a:	463b      	mov	r3, r7
 801285c:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
       ams_cell_voltages.v9s3 = can1_ams_cell_voltages_v9s3_decode(can1_rx_ams_cell_voltages.v9s3);
 8012860:	4b7d      	ldr	r3, [pc, #500]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012862:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012866:	4618      	mov	r0, r3
 8012868:	f7f3 fe4a 	bl	8006500 <can1_ams_cell_voltages_v9s3_decode>
 801286c:	eeb0 7a40 	vmov.f32	s14, s0
 8012870:	eef0 7a60 	vmov.f32	s15, s1
 8012874:	463b      	mov	r3, r7
 8012876:	ed83 7bc4 	vstr	d7, [r3, #784]	; 0x310
       ams_cell_voltages.v3s4 = can1_ams_cell_voltages_v3s4_decode(can1_rx_ams_cell_voltages.v3s4);
 801287a:	4b77      	ldr	r3, [pc, #476]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 801287c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8012880:	4618      	mov	r0, r3
 8012882:	f7f3 fe95 	bl	80065b0 <can1_ams_cell_voltages_v3s4_decode>
 8012886:	eeb0 7a40 	vmov.f32	s14, s0
 801288a:	eef0 7a60 	vmov.f32	s15, s1
 801288e:	463b      	mov	r3, r7
 8012890:	ed83 7b36 	vstr	d7, [r3, #216]	; 0xd8
       ams_cell_voltages.v9s4 = can1_ams_cell_voltages_v9s4_decode(can1_rx_ams_cell_voltages.v9s4);
 8012894:	4b70      	ldr	r3, [pc, #448]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012896:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801289a:	4618      	mov	r0, r3
 801289c:	f7f3 fee0 	bl	8006660 <can1_ams_cell_voltages_v9s4_decode>
 80128a0:	eeb0 7a40 	vmov.f32	s14, s0
 80128a4:	eef0 7a60 	vmov.f32	s15, s1
 80128a8:	463b      	mov	r3, r7
 80128aa:	ed83 7bc6 	vstr	d7, [r3, #792]	; 0x318
       ams_cell_voltages.v3s5 = can1_ams_cell_voltages_v3s5_decode(can1_rx_ams_cell_voltages.v3s5);
 80128ae:	4b6a      	ldr	r3, [pc, #424]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 80128b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7f3 ff2b 	bl	8006710 <can1_ams_cell_voltages_v3s5_decode>
 80128ba:	eeb0 7a40 	vmov.f32	s14, s0
 80128be:	eef0 7a60 	vmov.f32	s15, s1
 80128c2:	463b      	mov	r3, r7
 80128c4:	ed83 7b38 	vstr	d7, [r3, #224]	; 0xe0
       ams_cell_voltages.v9s5 = can1_ams_cell_voltages_v9s5_decode(can1_rx_ams_cell_voltages.v9s5);
 80128c8:	4b63      	ldr	r3, [pc, #396]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 80128ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7f3 ff76 	bl	80067c0 <can1_ams_cell_voltages_v9s5_decode>
 80128d4:	eeb0 7a40 	vmov.f32	s14, s0
 80128d8:	eef0 7a60 	vmov.f32	s15, s1
 80128dc:	463b      	mov	r3, r7
 80128de:	ed83 7bc8 	vstr	d7, [r3, #800]	; 0x320
       ams_cell_voltages.v3s6 = can1_ams_cell_voltages_v3s6_decode(can1_rx_ams_cell_voltages.v3s6);
 80128e2:	4b5d      	ldr	r3, [pc, #372]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 80128e4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7f3 ffc1 	bl	8006870 <can1_ams_cell_voltages_v3s6_decode>
 80128ee:	eeb0 7a40 	vmov.f32	s14, s0
 80128f2:	eef0 7a60 	vmov.f32	s15, s1
 80128f6:	463b      	mov	r3, r7
 80128f8:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8
       ams_cell_voltages.v9s6 = can1_ams_cell_voltages_v9s6_decode(can1_rx_ams_cell_voltages.v9s6);
 80128fc:	4b56      	ldr	r3, [pc, #344]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 80128fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012902:	4618      	mov	r0, r3
 8012904:	f7f4 f80c 	bl	8006920 <can1_ams_cell_voltages_v9s6_decode>
 8012908:	eeb0 7a40 	vmov.f32	s14, s0
 801290c:	eef0 7a60 	vmov.f32	s15, s1
 8012910:	463b      	mov	r3, r7
 8012912:	ed83 7bca 	vstr	d7, [r3, #808]	; 0x328
       ams_cell_voltages.v3s7 = can1_ams_cell_voltages_v3s7_decode(can1_rx_ams_cell_voltages.v3s7);
 8012916:	4b50      	ldr	r3, [pc, #320]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801291c:	4618      	mov	r0, r3
 801291e:	f7f4 f857 	bl	80069d0 <can1_ams_cell_voltages_v3s7_decode>
 8012922:	eeb0 7a40 	vmov.f32	s14, s0
 8012926:	eef0 7a60 	vmov.f32	s15, s1
 801292a:	463b      	mov	r3, r7
 801292c:	ed83 7b3c 	vstr	d7, [r3, #240]	; 0xf0
       ams_cell_voltages.v9s7 = can1_ams_cell_voltages_v9s7_decode(can1_rx_ams_cell_voltages.v9s7);
 8012930:	4b49      	ldr	r3, [pc, #292]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012936:	4618      	mov	r0, r3
 8012938:	f7f4 f8a2 	bl	8006a80 <can1_ams_cell_voltages_v9s7_decode>
 801293c:	eeb0 7a40 	vmov.f32	s14, s0
 8012940:	eef0 7a60 	vmov.f32	s15, s1
 8012944:	463b      	mov	r3, r7
 8012946:	ed83 7bcc 	vstr	d7, [r3, #816]	; 0x330
       ams_cell_voltages.v3s8 = can1_ams_cell_voltages_v3s8_decode(can1_rx_ams_cell_voltages.v3s8);
 801294a:	4b43      	ldr	r3, [pc, #268]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 801294c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012950:	4618      	mov	r0, r3
 8012952:	f7f4 f8ed 	bl	8006b30 <can1_ams_cell_voltages_v3s8_decode>
 8012956:	eeb0 7a40 	vmov.f32	s14, s0
 801295a:	eef0 7a60 	vmov.f32	s15, s1
 801295e:	463b      	mov	r3, r7
 8012960:	ed83 7b3e 	vstr	d7, [r3, #248]	; 0xf8
       ams_cell_voltages.v9s8 = can1_ams_cell_voltages_v9s8_decode(can1_rx_ams_cell_voltages.v9s8);
 8012964:	4b3c      	ldr	r3, [pc, #240]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801296a:	4618      	mov	r0, r3
 801296c:	f7f4 f938 	bl	8006be0 <can1_ams_cell_voltages_v9s8_decode>
 8012970:	eeb0 7a40 	vmov.f32	s14, s0
 8012974:	eef0 7a60 	vmov.f32	s15, s1
 8012978:	463b      	mov	r3, r7
 801297a:	ed83 7bce 	vstr	d7, [r3, #824]	; 0x338
       ams_cell_voltages.v3s9 = can1_ams_cell_voltages_v3s9_decode(can1_rx_ams_cell_voltages.v3s9);
 801297e:	4b36      	ldr	r3, [pc, #216]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012984:	4618      	mov	r0, r3
 8012986:	f7f4 f983 	bl	8006c90 <can1_ams_cell_voltages_v3s9_decode>
 801298a:	eeb0 7a40 	vmov.f32	s14, s0
 801298e:	eef0 7a60 	vmov.f32	s15, s1
 8012992:	463b      	mov	r3, r7
 8012994:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
       ams_cell_voltages.v9s9 = can1_ams_cell_voltages_v9s9_decode(can1_rx_ams_cell_voltages.v9s9);
 8012998:	4b2f      	ldr	r3, [pc, #188]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 801299a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801299e:	4618      	mov	r0, r3
 80129a0:	f7f4 f9ce 	bl	8006d40 <can1_ams_cell_voltages_v9s9_decode>
 80129a4:	eeb0 7a40 	vmov.f32	s14, s0
 80129a8:	eef0 7a60 	vmov.f32	s15, s1
 80129ac:	463b      	mov	r3, r7
 80129ae:	ed83 7bd0 	vstr	d7, [r3, #832]	; 0x340
       ams_cell_voltages.v3s10 = can1_ams_cell_voltages_v3s10_decode(can1_rx_ams_cell_voltages.v3s10);
 80129b2:	4b29      	ldr	r3, [pc, #164]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 80129b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7f4 fa19 	bl	8006df0 <can1_ams_cell_voltages_v3s10_decode>
 80129be:	eeb0 7a40 	vmov.f32	s14, s0
 80129c2:	eef0 7a60 	vmov.f32	s15, s1
 80129c6:	463b      	mov	r3, r7
 80129c8:	ed83 7b42 	vstr	d7, [r3, #264]	; 0x108
       ams_cell_voltages.v9s10 = can1_ams_cell_voltages_v9s10_decode(can1_rx_ams_cell_voltages.v9s10);
 80129cc:	4b22      	ldr	r3, [pc, #136]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 80129ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7f4 fa64 	bl	8006ea0 <can1_ams_cell_voltages_v9s10_decode>
 80129d8:	eeb0 7a40 	vmov.f32	s14, s0
 80129dc:	eef0 7a60 	vmov.f32	s15, s1
 80129e0:	463b      	mov	r3, r7
 80129e2:	ed83 7bd2 	vstr	d7, [r3, #840]	; 0x348
       ams_cell_voltages.v3s11 = can1_ams_cell_voltages_v3s11_decode(can1_rx_ams_cell_voltages.v3s11);
 80129e6:	4b1c      	ldr	r3, [pc, #112]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 80129e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7f4 faaf 	bl	8006f50 <can1_ams_cell_voltages_v3s11_decode>
 80129f2:	eeb0 7a40 	vmov.f32	s14, s0
 80129f6:	eef0 7a60 	vmov.f32	s15, s1
 80129fa:	463b      	mov	r3, r7
 80129fc:	ed83 7b44 	vstr	d7, [r3, #272]	; 0x110
       ams_cell_voltages.v9s11 = can1_ams_cell_voltages_v9s11_decode(can1_rx_ams_cell_voltages.v9s11);
 8012a00:	4b15      	ldr	r3, [pc, #84]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012a02:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7f4 fafa 	bl	8007000 <can1_ams_cell_voltages_v9s11_decode>
 8012a0c:	eeb0 7a40 	vmov.f32	s14, s0
 8012a10:	eef0 7a60 	vmov.f32	s15, s1
 8012a14:	463b      	mov	r3, r7
 8012a16:	ed83 7bd4 	vstr	d7, [r3, #848]	; 0x350
       ams_cell_voltages.v3s12 = can1_ams_cell_voltages_v3s12_decode(can1_rx_ams_cell_voltages.v3s12);
 8012a1a:	4b0f      	ldr	r3, [pc, #60]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012a1c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8012a20:	4618      	mov	r0, r3
 8012a22:	f7f4 fb45 	bl	80070b0 <can1_ams_cell_voltages_v3s12_decode>
 8012a26:	eeb0 7a40 	vmov.f32	s14, s0
 8012a2a:	eef0 7a60 	vmov.f32	s15, s1
 8012a2e:	463b      	mov	r3, r7
 8012a30:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
       ams_cell_voltages.v9s12 = can1_ams_cell_voltages_v9s12_decode(can1_rx_ams_cell_voltages.v9s12);
 8012a34:	4b08      	ldr	r3, [pc, #32]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012a36:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7f4 fb90 	bl	8007160 <can1_ams_cell_voltages_v9s12_decode>
 8012a40:	eeb0 7a40 	vmov.f32	s14, s0
 8012a44:	eef0 7a60 	vmov.f32	s15, s1
 8012a48:	463b      	mov	r3, r7
 8012a4a:	ed83 7bd6 	vstr	d7, [r3, #856]	; 0x358
       ams_cell_voltages.v4s1 = can1_ams_cell_voltages_v4s1_decode(can1_rx_ams_cell_voltages.v4s1);
 8012a4e:	4b02      	ldr	r3, [pc, #8]	; (8012a58 <can1_ams_cell_voltages_receive+0x738>)
 8012a50:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8012a54:	e002      	b.n	8012a5c <can1_ams_cell_voltages_receive+0x73c>
 8012a56:	bf00      	nop
 8012a58:	2000041c 	.word	0x2000041c
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7f4 fbd7 	bl	8007210 <can1_ams_cell_voltages_v4s1_decode>
 8012a62:	eeb0 7a40 	vmov.f32	s14, s0
 8012a66:	eef0 7a60 	vmov.f32	s15, s1
 8012a6a:	463b      	mov	r3, r7
 8012a6c:	ed83 7b48 	vstr	d7, [r3, #288]	; 0x120
       ams_cell_voltages.v10s1 = can1_ams_cell_voltages_v10s1_decode(can1_rx_ams_cell_voltages.v10s1);
 8012a70:	4beb      	ldr	r3, [pc, #940]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012a72:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7f4 fc22 	bl	80072c0 <can1_ams_cell_voltages_v10s1_decode>
 8012a7c:	eeb0 7a40 	vmov.f32	s14, s0
 8012a80:	eef0 7a60 	vmov.f32	s15, s1
 8012a84:	463b      	mov	r3, r7
 8012a86:	ed83 7bd8 	vstr	d7, [r3, #864]	; 0x360
       ams_cell_voltages.v4s2 = can1_ams_cell_voltages_v4s2_decode(can1_rx_ams_cell_voltages.v4s2);
 8012a8a:	4be5      	ldr	r3, [pc, #916]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012a8c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7f4 fc6d 	bl	8007370 <can1_ams_cell_voltages_v4s2_decode>
 8012a96:	eeb0 7a40 	vmov.f32	s14, s0
 8012a9a:	eef0 7a60 	vmov.f32	s15, s1
 8012a9e:	463b      	mov	r3, r7
 8012aa0:	ed83 7b4a 	vstr	d7, [r3, #296]	; 0x128
       ams_cell_voltages.v10s2 = can1_ams_cell_voltages_v10s2_decode(can1_rx_ams_cell_voltages.v10s2);
 8012aa4:	4bde      	ldr	r3, [pc, #888]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012aa6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7f4 fcb8 	bl	8007420 <can1_ams_cell_voltages_v10s2_decode>
 8012ab0:	eeb0 7a40 	vmov.f32	s14, s0
 8012ab4:	eef0 7a60 	vmov.f32	s15, s1
 8012ab8:	463b      	mov	r3, r7
 8012aba:	ed83 7bda 	vstr	d7, [r3, #872]	; 0x368
       ams_cell_voltages.v4s3 = can1_ams_cell_voltages_v4s3_decode(can1_rx_ams_cell_voltages.v4s3);
 8012abe:	4bd8      	ldr	r3, [pc, #864]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012ac0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7f4 fd03 	bl	80074d0 <can1_ams_cell_voltages_v4s3_decode>
 8012aca:	eeb0 7a40 	vmov.f32	s14, s0
 8012ace:	eef0 7a60 	vmov.f32	s15, s1
 8012ad2:	463b      	mov	r3, r7
 8012ad4:	ed83 7b4c 	vstr	d7, [r3, #304]	; 0x130
       ams_cell_voltages.v10s3 = can1_ams_cell_voltages_v10s3_decode(can1_rx_ams_cell_voltages.v10s3);
 8012ad8:	4bd1      	ldr	r3, [pc, #836]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012ada:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7f4 fd4e 	bl	8007580 <can1_ams_cell_voltages_v10s3_decode>
 8012ae4:	eeb0 7a40 	vmov.f32	s14, s0
 8012ae8:	eef0 7a60 	vmov.f32	s15, s1
 8012aec:	463b      	mov	r3, r7
 8012aee:	ed83 7bdc 	vstr	d7, [r3, #880]	; 0x370
       ams_cell_voltages.v4s4 = can1_ams_cell_voltages_v4s4_decode(can1_rx_ams_cell_voltages.v4s4);
 8012af2:	4bcb      	ldr	r3, [pc, #812]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012af4:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7f4 fd99 	bl	8007630 <can1_ams_cell_voltages_v4s4_decode>
 8012afe:	eeb0 7a40 	vmov.f32	s14, s0
 8012b02:	eef0 7a60 	vmov.f32	s15, s1
 8012b06:	463b      	mov	r3, r7
 8012b08:	ed83 7b4e 	vstr	d7, [r3, #312]	; 0x138
       ams_cell_voltages.v10s4 = can1_ams_cell_voltages_v10s4_decode(can1_rx_ams_cell_voltages.v10s4);
 8012b0c:	4bc4      	ldr	r3, [pc, #784]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012b0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7f4 fde4 	bl	80076e0 <can1_ams_cell_voltages_v10s4_decode>
 8012b18:	eeb0 7a40 	vmov.f32	s14, s0
 8012b1c:	eef0 7a60 	vmov.f32	s15, s1
 8012b20:	463b      	mov	r3, r7
 8012b22:	ed83 7bde 	vstr	d7, [r3, #888]	; 0x378
       ams_cell_voltages.v4s5 = can1_ams_cell_voltages_v4s5_decode(can1_rx_ams_cell_voltages.v4s5);
 8012b26:	4bbe      	ldr	r3, [pc, #760]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7f4 fe2f 	bl	8007790 <can1_ams_cell_voltages_v4s5_decode>
 8012b32:	eeb0 7a40 	vmov.f32	s14, s0
 8012b36:	eef0 7a60 	vmov.f32	s15, s1
 8012b3a:	463b      	mov	r3, r7
 8012b3c:	ed83 7b50 	vstr	d7, [r3, #320]	; 0x140
       ams_cell_voltages.v10s5 = can1_ams_cell_voltages_v10s5_decode(can1_rx_ams_cell_voltages.v10s5);
 8012b40:	4bb7      	ldr	r3, [pc, #732]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012b42:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7f4 fe7a 	bl	8007840 <can1_ams_cell_voltages_v10s5_decode>
 8012b4c:	eeb0 7a40 	vmov.f32	s14, s0
 8012b50:	eef0 7a60 	vmov.f32	s15, s1
 8012b54:	463b      	mov	r3, r7
 8012b56:	ed83 7be0 	vstr	d7, [r3, #896]	; 0x380
       ams_cell_voltages.v4s6 = can1_ams_cell_voltages_v4s6_decode(can1_rx_ams_cell_voltages.v4s6);
 8012b5a:	4bb1      	ldr	r3, [pc, #708]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012b5c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7f4 fec5 	bl	80078f0 <can1_ams_cell_voltages_v4s6_decode>
 8012b66:	eeb0 7a40 	vmov.f32	s14, s0
 8012b6a:	eef0 7a60 	vmov.f32	s15, s1
 8012b6e:	463b      	mov	r3, r7
 8012b70:	ed83 7b52 	vstr	d7, [r3, #328]	; 0x148
       ams_cell_voltages.v10s6 = can1_ams_cell_voltages_v10s6_decode(can1_rx_ams_cell_voltages.v10s6);
 8012b74:	4baa      	ldr	r3, [pc, #680]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012b76:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7f4 ff10 	bl	80079a0 <can1_ams_cell_voltages_v10s6_decode>
 8012b80:	eeb0 7a40 	vmov.f32	s14, s0
 8012b84:	eef0 7a60 	vmov.f32	s15, s1
 8012b88:	463b      	mov	r3, r7
 8012b8a:	ed83 7be2 	vstr	d7, [r3, #904]	; 0x388
       ams_cell_voltages.v4s7 = can1_ams_cell_voltages_v4s7_decode(can1_rx_ams_cell_voltages.v4s7);
 8012b8e:	4ba4      	ldr	r3, [pc, #656]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012b90:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8012b94:	4618      	mov	r0, r3
 8012b96:	f7f4 ff5b 	bl	8007a50 <can1_ams_cell_voltages_v4s7_decode>
 8012b9a:	eeb0 7a40 	vmov.f32	s14, s0
 8012b9e:	eef0 7a60 	vmov.f32	s15, s1
 8012ba2:	463b      	mov	r3, r7
 8012ba4:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150
       ams_cell_voltages.v10s7 = can1_ams_cell_voltages_v10s7_decode(can1_rx_ams_cell_voltages.v10s7);
 8012ba8:	4b9d      	ldr	r3, [pc, #628]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012baa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f7f4 ffa6 	bl	8007b00 <can1_ams_cell_voltages_v10s7_decode>
 8012bb4:	eeb0 7a40 	vmov.f32	s14, s0
 8012bb8:	eef0 7a60 	vmov.f32	s15, s1
 8012bbc:	463b      	mov	r3, r7
 8012bbe:	ed83 7be4 	vstr	d7, [r3, #912]	; 0x390
       ams_cell_voltages.v4s8 = can1_ams_cell_voltages_v4s8_decode(can1_rx_ams_cell_voltages.v4s8);
 8012bc2:	4b97      	ldr	r3, [pc, #604]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012bc4:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7f4 fff1 	bl	8007bb0 <can1_ams_cell_voltages_v4s8_decode>
 8012bce:	eeb0 7a40 	vmov.f32	s14, s0
 8012bd2:	eef0 7a60 	vmov.f32	s15, s1
 8012bd6:	463b      	mov	r3, r7
 8012bd8:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158
       ams_cell_voltages.v10s8 = can1_ams_cell_voltages_v10s8_decode(can1_rx_ams_cell_voltages.v10s8);
 8012bdc:	4b90      	ldr	r3, [pc, #576]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012bde:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7f5 f83c 	bl	8007c60 <can1_ams_cell_voltages_v10s8_decode>
 8012be8:	eeb0 7a40 	vmov.f32	s14, s0
 8012bec:	eef0 7a60 	vmov.f32	s15, s1
 8012bf0:	463b      	mov	r3, r7
 8012bf2:	ed83 7be6 	vstr	d7, [r3, #920]	; 0x398
       ams_cell_voltages.v4s9 = can1_ams_cell_voltages_v4s9_decode(can1_rx_ams_cell_voltages.v4s9);
 8012bf6:	4b8a      	ldr	r3, [pc, #552]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012bf8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f7f5 f887 	bl	8007d10 <can1_ams_cell_voltages_v4s9_decode>
 8012c02:	eeb0 7a40 	vmov.f32	s14, s0
 8012c06:	eef0 7a60 	vmov.f32	s15, s1
 8012c0a:	463b      	mov	r3, r7
 8012c0c:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160
       ams_cell_voltages.v10s9 = can1_ams_cell_voltages_v10s9_decode(can1_rx_ams_cell_voltages.v10s9);
 8012c10:	4b83      	ldr	r3, [pc, #524]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012c12:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7f5 f8d2 	bl	8007dc0 <can1_ams_cell_voltages_v10s9_decode>
 8012c1c:	eeb0 7a40 	vmov.f32	s14, s0
 8012c20:	eef0 7a60 	vmov.f32	s15, s1
 8012c24:	463b      	mov	r3, r7
 8012c26:	ed83 7be8 	vstr	d7, [r3, #928]	; 0x3a0
       ams_cell_voltages.v4s10 = can1_ams_cell_voltages_v4s10_decode(can1_rx_ams_cell_voltages.v4s10);
 8012c2a:	4b7d      	ldr	r3, [pc, #500]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012c2c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7f5 f91d 	bl	8007e70 <can1_ams_cell_voltages_v4s10_decode>
 8012c36:	eeb0 7a40 	vmov.f32	s14, s0
 8012c3a:	eef0 7a60 	vmov.f32	s15, s1
 8012c3e:	463b      	mov	r3, r7
 8012c40:	ed83 7b5a 	vstr	d7, [r3, #360]	; 0x168
       ams_cell_voltages.v10s10 = can1_ams_cell_voltages_v10s10_decode(can1_rx_ams_cell_voltages.v10s10);
 8012c44:	4b76      	ldr	r3, [pc, #472]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012c46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f7f5 f968 	bl	8007f20 <can1_ams_cell_voltages_v10s10_decode>
 8012c50:	eeb0 7a40 	vmov.f32	s14, s0
 8012c54:	eef0 7a60 	vmov.f32	s15, s1
 8012c58:	463b      	mov	r3, r7
 8012c5a:	ed83 7bea 	vstr	d7, [r3, #936]	; 0x3a8
       ams_cell_voltages.v4s11 = can1_ams_cell_voltages_v4s11_decode(can1_rx_ams_cell_voltages.v4s11);
 8012c5e:	4b70      	ldr	r3, [pc, #448]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012c60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7f5 f9b3 	bl	8007fd0 <can1_ams_cell_voltages_v4s11_decode>
 8012c6a:	eeb0 7a40 	vmov.f32	s14, s0
 8012c6e:	eef0 7a60 	vmov.f32	s15, s1
 8012c72:	463b      	mov	r3, r7
 8012c74:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170
       ams_cell_voltages.v10s11 = can1_ams_cell_voltages_v10s11_decode(can1_rx_ams_cell_voltages.v10s11);
 8012c78:	4b69      	ldr	r3, [pc, #420]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012c7a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7f5 f9fe 	bl	8008080 <can1_ams_cell_voltages_v10s11_decode>
 8012c84:	eeb0 7a40 	vmov.f32	s14, s0
 8012c88:	eef0 7a60 	vmov.f32	s15, s1
 8012c8c:	463b      	mov	r3, r7
 8012c8e:	ed83 7bec 	vstr	d7, [r3, #944]	; 0x3b0
       ams_cell_voltages.v4s12 = can1_ams_cell_voltages_v4s12_decode(can1_rx_ams_cell_voltages.v4s12);
 8012c92:	4b63      	ldr	r3, [pc, #396]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012c94:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f7f5 fa49 	bl	8008130 <can1_ams_cell_voltages_v4s12_decode>
 8012c9e:	eeb0 7a40 	vmov.f32	s14, s0
 8012ca2:	eef0 7a60 	vmov.f32	s15, s1
 8012ca6:	463b      	mov	r3, r7
 8012ca8:	ed83 7b5e 	vstr	d7, [r3, #376]	; 0x178
       ams_cell_voltages.v10s12 = can1_ams_cell_voltages_v10s12_decode(can1_rx_ams_cell_voltages.v10s12);
 8012cac:	4b5c      	ldr	r3, [pc, #368]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012cae:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f7f5 fa94 	bl	80081e0 <can1_ams_cell_voltages_v10s12_decode>
 8012cb8:	eeb0 7a40 	vmov.f32	s14, s0
 8012cbc:	eef0 7a60 	vmov.f32	s15, s1
 8012cc0:	463b      	mov	r3, r7
 8012cc2:	ed83 7bee 	vstr	d7, [r3, #952]	; 0x3b8
       ams_cell_voltages.v5s1 = can1_ams_cell_voltages_v5s1_decode(can1_rx_ams_cell_voltages.v5s1);
 8012cc6:	4b56      	ldr	r3, [pc, #344]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012cc8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f7f5 fadf 	bl	8008290 <can1_ams_cell_voltages_v5s1_decode>
 8012cd2:	eeb0 7a40 	vmov.f32	s14, s0
 8012cd6:	eef0 7a60 	vmov.f32	s15, s1
 8012cda:	463b      	mov	r3, r7
 8012cdc:	ed83 7b60 	vstr	d7, [r3, #384]	; 0x180
       ams_cell_voltages.v11s1 = can1_ams_cell_voltages_v11s1_decode(can1_rx_ams_cell_voltages.v11s1);
 8012ce0:	4b4f      	ldr	r3, [pc, #316]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012ce2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7f5 fb2a 	bl	8008340 <can1_ams_cell_voltages_v11s1_decode>
 8012cec:	eeb0 7a40 	vmov.f32	s14, s0
 8012cf0:	eef0 7a60 	vmov.f32	s15, s1
 8012cf4:	463b      	mov	r3, r7
 8012cf6:	ed83 7bf0 	vstr	d7, [r3, #960]	; 0x3c0
       ams_cell_voltages.v5s2 = can1_ams_cell_voltages_v5s2_decode(can1_rx_ams_cell_voltages.v5s2);
 8012cfa:	4b49      	ldr	r3, [pc, #292]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012cfc:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7f5 fb75 	bl	80083f0 <can1_ams_cell_voltages_v5s2_decode>
 8012d06:	eeb0 7a40 	vmov.f32	s14, s0
 8012d0a:	eef0 7a60 	vmov.f32	s15, s1
 8012d0e:	463b      	mov	r3, r7
 8012d10:	ed83 7b62 	vstr	d7, [r3, #392]	; 0x188
       ams_cell_voltages.v5s3 = can1_ams_cell_voltages_v5s3_decode(can1_rx_ams_cell_voltages.v5s3);
 8012d14:	4b42      	ldr	r3, [pc, #264]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012d16:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f7f5 fbc0 	bl	80084a0 <can1_ams_cell_voltages_v5s3_decode>
 8012d20:	eeb0 7a40 	vmov.f32	s14, s0
 8012d24:	eef0 7a60 	vmov.f32	s15, s1
 8012d28:	463b      	mov	r3, r7
 8012d2a:	ed83 7b64 	vstr	d7, [r3, #400]	; 0x190
       ams_cell_voltages.v11s3 = can1_ams_cell_voltages_v11s3_decode(can1_rx_ams_cell_voltages.v11s3);
 8012d2e:	4b3c      	ldr	r3, [pc, #240]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012d30:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7f5 fc0b 	bl	8008550 <can1_ams_cell_voltages_v11s3_decode>
 8012d3a:	eeb0 7a40 	vmov.f32	s14, s0
 8012d3e:	eef0 7a60 	vmov.f32	s15, s1
 8012d42:	463b      	mov	r3, r7
 8012d44:	ed83 7bf2 	vstr	d7, [r3, #968]	; 0x3c8
       ams_cell_voltages.v5s4 = can1_ams_cell_voltages_v5s4_decode(can1_rx_ams_cell_voltages.v5s4);
 8012d48:	4b35      	ldr	r3, [pc, #212]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012d4a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f7f5 fc56 	bl	8008600 <can1_ams_cell_voltages_v5s4_decode>
 8012d54:	eeb0 7a40 	vmov.f32	s14, s0
 8012d58:	eef0 7a60 	vmov.f32	s15, s1
 8012d5c:	463b      	mov	r3, r7
 8012d5e:	ed83 7b66 	vstr	d7, [r3, #408]	; 0x198
       ams_cell_voltages.v5s5 = can1_ams_cell_voltages_v5s5_decode(can1_rx_ams_cell_voltages.v5s5);
 8012d62:	4b2f      	ldr	r3, [pc, #188]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012d64:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f7f5 fca1 	bl	80086b0 <can1_ams_cell_voltages_v5s5_decode>
 8012d6e:	eeb0 7a40 	vmov.f32	s14, s0
 8012d72:	eef0 7a60 	vmov.f32	s15, s1
 8012d76:	463b      	mov	r3, r7
 8012d78:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0
       ams_cell_voltages.v11s5 = can1_ams_cell_voltages_v11s5_decode(can1_rx_ams_cell_voltages.v11s5);
 8012d7c:	4b28      	ldr	r3, [pc, #160]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012d7e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012d82:	4618      	mov	r0, r3
 8012d84:	f7f5 fcec 	bl	8008760 <can1_ams_cell_voltages_v11s5_decode>
 8012d88:	eeb0 7a40 	vmov.f32	s14, s0
 8012d8c:	eef0 7a60 	vmov.f32	s15, s1
 8012d90:	463b      	mov	r3, r7
 8012d92:	ed83 7bf4 	vstr	d7, [r3, #976]	; 0x3d0
       ams_cell_voltages.v5s6 = can1_ams_cell_voltages_v5s6_decode(can1_rx_ams_cell_voltages.v5s6);
 8012d96:	4b22      	ldr	r3, [pc, #136]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012d98:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7f5 fd37 	bl	8008810 <can1_ams_cell_voltages_v5s6_decode>
 8012da2:	eeb0 7a40 	vmov.f32	s14, s0
 8012da6:	eef0 7a60 	vmov.f32	s15, s1
 8012daa:	463b      	mov	r3, r7
 8012dac:	ed83 7b6a 	vstr	d7, [r3, #424]	; 0x1a8
       ams_cell_voltages.v5s7 = can1_ams_cell_voltages_v5s7_decode(can1_rx_ams_cell_voltages.v5s7);
 8012db0:	4b1b      	ldr	r3, [pc, #108]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012db2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7f5 fd82 	bl	80088c0 <can1_ams_cell_voltages_v5s7_decode>
 8012dbc:	eeb0 7a40 	vmov.f32	s14, s0
 8012dc0:	eef0 7a60 	vmov.f32	s15, s1
 8012dc4:	463b      	mov	r3, r7
 8012dc6:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
       ams_cell_voltages.v11s7 = can1_ams_cell_voltages_v11s7_decode(can1_rx_ams_cell_voltages.v11s7);
 8012dca:	4b15      	ldr	r3, [pc, #84]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012dcc:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7f5 fdcd 	bl	8008970 <can1_ams_cell_voltages_v11s7_decode>
 8012dd6:	eeb0 7a40 	vmov.f32	s14, s0
 8012dda:	eef0 7a60 	vmov.f32	s15, s1
 8012dde:	463b      	mov	r3, r7
 8012de0:	ed83 7bf6 	vstr	d7, [r3, #984]	; 0x3d8
       ams_cell_voltages.v5s8 = can1_ams_cell_voltages_v5s8_decode(can1_rx_ams_cell_voltages.v5s8);
 8012de4:	4b0e      	ldr	r3, [pc, #56]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012de6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7f5 fe18 	bl	8008a20 <can1_ams_cell_voltages_v5s8_decode>
 8012df0:	eeb0 7a40 	vmov.f32	s14, s0
 8012df4:	eef0 7a60 	vmov.f32	s15, s1
 8012df8:	463b      	mov	r3, r7
 8012dfa:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8
       ams_cell_voltages.v5s9 = can1_ams_cell_voltages_v5s9_decode(can1_rx_ams_cell_voltages.v5s9);
 8012dfe:	4b08      	ldr	r3, [pc, #32]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012e00:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7f5 fe63 	bl	8008ad0 <can1_ams_cell_voltages_v5s9_decode>
 8012e0a:	eeb0 7a40 	vmov.f32	s14, s0
 8012e0e:	eef0 7a60 	vmov.f32	s15, s1
 8012e12:	463b      	mov	r3, r7
 8012e14:	ed83 7b70 	vstr	d7, [r3, #448]	; 0x1c0
       ams_cell_voltages.v11s9 = can1_ams_cell_voltages_v11s9_decode(can1_rx_ams_cell_voltages.v11s9);
 8012e18:	4b01      	ldr	r3, [pc, #4]	; (8012e20 <can1_ams_cell_voltages_receive+0xb00>)
 8012e1a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8012e1e:	e001      	b.n	8012e24 <can1_ams_cell_voltages_receive+0xb04>
 8012e20:	2000041c 	.word	0x2000041c
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7f5 feab 	bl	8008b80 <can1_ams_cell_voltages_v11s9_decode>
 8012e2a:	eeb0 7a40 	vmov.f32	s14, s0
 8012e2e:	eef0 7a60 	vmov.f32	s15, s1
 8012e32:	463b      	mov	r3, r7
 8012e34:	ed83 7bf8 	vstr	d7, [r3, #992]	; 0x3e0
       ams_cell_voltages.v5s10 = can1_ams_cell_voltages_v5s10_decode(can1_rx_ams_cell_voltages.v5s10);
 8012e38:	4b6d      	ldr	r3, [pc, #436]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012e3a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7f5 fef6 	bl	8008c30 <can1_ams_cell_voltages_v5s10_decode>
 8012e44:	eeb0 7a40 	vmov.f32	s14, s0
 8012e48:	eef0 7a60 	vmov.f32	s15, s1
 8012e4c:	463b      	mov	r3, r7
 8012e4e:	ed83 7b72 	vstr	d7, [r3, #456]	; 0x1c8
       ams_cell_voltages.v5s11 = can1_ams_cell_voltages_v5s11_decode(can1_rx_ams_cell_voltages.v5s11);
 8012e52:	4b67      	ldr	r3, [pc, #412]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012e54:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7f5 ff41 	bl	8008ce0 <can1_ams_cell_voltages_v5s11_decode>
 8012e5e:	eeb0 7a40 	vmov.f32	s14, s0
 8012e62:	eef0 7a60 	vmov.f32	s15, s1
 8012e66:	463b      	mov	r3, r7
 8012e68:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0
       ams_cell_voltages.v11s11 = can1_ams_cell_voltages_v11s11_decode(can1_rx_ams_cell_voltages.v11s11);
 8012e6c:	4b60      	ldr	r3, [pc, #384]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012e6e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8012e72:	4618      	mov	r0, r3
 8012e74:	f7f5 ff8c 	bl	8008d90 <can1_ams_cell_voltages_v11s11_decode>
 8012e78:	eeb0 7a40 	vmov.f32	s14, s0
 8012e7c:	eef0 7a60 	vmov.f32	s15, s1
 8012e80:	463b      	mov	r3, r7
 8012e82:	ed83 7bfa 	vstr	d7, [r3, #1000]	; 0x3e8
       ams_cell_voltages.v5s12 = can1_ams_cell_voltages_v5s12_decode(can1_rx_ams_cell_voltages.v5s12);
 8012e86:	4b5a      	ldr	r3, [pc, #360]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012e88:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7f5 ffd7 	bl	8008e40 <can1_ams_cell_voltages_v5s12_decode>
 8012e92:	eeb0 7a40 	vmov.f32	s14, s0
 8012e96:	eef0 7a60 	vmov.f32	s15, s1
 8012e9a:	463b      	mov	r3, r7
 8012e9c:	ed83 7b76 	vstr	d7, [r3, #472]	; 0x1d8
       ams_cell_voltages.v6s1 = can1_ams_cell_voltages_v6s1_decode(can1_rx_ams_cell_voltages.v6s1);
 8012ea0:	4b53      	ldr	r3, [pc, #332]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012ea2:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7f6 f822 	bl	8008ef0 <can1_ams_cell_voltages_v6s1_decode>
 8012eac:	eeb0 7a40 	vmov.f32	s14, s0
 8012eb0:	eef0 7a60 	vmov.f32	s15, s1
 8012eb4:	463b      	mov	r3, r7
 8012eb6:	ed83 7b78 	vstr	d7, [r3, #480]	; 0x1e0
       ams_cell_voltages.v6s2 = can1_ams_cell_voltages_v6s2_decode(can1_rx_ams_cell_voltages.v6s2);
 8012eba:	4b4d      	ldr	r3, [pc, #308]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012ebc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f7f6 f86d 	bl	8008fa0 <can1_ams_cell_voltages_v6s2_decode>
 8012ec6:	eeb0 7a40 	vmov.f32	s14, s0
 8012eca:	eef0 7a60 	vmov.f32	s15, s1
 8012ece:	463b      	mov	r3, r7
 8012ed0:	ed83 7b7a 	vstr	d7, [r3, #488]	; 0x1e8
       ams_cell_voltages.v6s3 = can1_ams_cell_voltages_v6s3_decode(can1_rx_ams_cell_voltages.v6s3);
 8012ed4:	4b46      	ldr	r3, [pc, #280]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012ed6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7f6 f8b8 	bl	8009050 <can1_ams_cell_voltages_v6s3_decode>
 8012ee0:	eeb0 7a40 	vmov.f32	s14, s0
 8012ee4:	eef0 7a60 	vmov.f32	s15, s1
 8012ee8:	463b      	mov	r3, r7
 8012eea:	ed83 7b7c 	vstr	d7, [r3, #496]	; 0x1f0
       ams_cell_voltages.v6s4 = can1_ams_cell_voltages_v6s4_decode(can1_rx_ams_cell_voltages.v6s4);
 8012eee:	4b40      	ldr	r3, [pc, #256]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012ef0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7f6 f903 	bl	8009100 <can1_ams_cell_voltages_v6s4_decode>
 8012efa:	eeb0 7a40 	vmov.f32	s14, s0
 8012efe:	eef0 7a60 	vmov.f32	s15, s1
 8012f02:	463b      	mov	r3, r7
 8012f04:	ed83 7b7e 	vstr	d7, [r3, #504]	; 0x1f8
       ams_cell_voltages.v6s5 = can1_ams_cell_voltages_v6s5_decode(can1_rx_ams_cell_voltages.v6s5);
 8012f08:	4b39      	ldr	r3, [pc, #228]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012f0a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7f6 f94e 	bl	80091b0 <can1_ams_cell_voltages_v6s5_decode>
 8012f14:	eeb0 7a40 	vmov.f32	s14, s0
 8012f18:	eef0 7a60 	vmov.f32	s15, s1
 8012f1c:	463b      	mov	r3, r7
 8012f1e:	ed83 7b80 	vstr	d7, [r3, #512]	; 0x200
       ams_cell_voltages.v6s6 = can1_ams_cell_voltages_v6s6_decode(can1_rx_ams_cell_voltages.v6s6);
 8012f22:	4b33      	ldr	r3, [pc, #204]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012f24:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f7f6 f999 	bl	8009260 <can1_ams_cell_voltages_v6s6_decode>
 8012f2e:	eeb0 7a40 	vmov.f32	s14, s0
 8012f32:	eef0 7a60 	vmov.f32	s15, s1
 8012f36:	463b      	mov	r3, r7
 8012f38:	ed83 7b82 	vstr	d7, [r3, #520]	; 0x208
       ams_cell_voltages.v6s7 = can1_ams_cell_voltages_v6s7_decode(can1_rx_ams_cell_voltages.v6s7);
 8012f3c:	4b2c      	ldr	r3, [pc, #176]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012f3e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7f6 f9e4 	bl	8009310 <can1_ams_cell_voltages_v6s7_decode>
 8012f48:	eeb0 7a40 	vmov.f32	s14, s0
 8012f4c:	eef0 7a60 	vmov.f32	s15, s1
 8012f50:	463b      	mov	r3, r7
 8012f52:	ed83 7b84 	vstr	d7, [r3, #528]	; 0x210
       ams_cell_voltages.v6s8 = can1_ams_cell_voltages_v6s8_decode(can1_rx_ams_cell_voltages.v6s8);
 8012f56:	4b26      	ldr	r3, [pc, #152]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012f58:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7f6 fa2f 	bl	80093c0 <can1_ams_cell_voltages_v6s8_decode>
 8012f62:	eeb0 7a40 	vmov.f32	s14, s0
 8012f66:	eef0 7a60 	vmov.f32	s15, s1
 8012f6a:	463b      	mov	r3, r7
 8012f6c:	ed83 7b86 	vstr	d7, [r3, #536]	; 0x218
       ams_cell_voltages.v6s9 = can1_ams_cell_voltages_v6s9_decode(can1_rx_ams_cell_voltages.v6s9);
 8012f70:	4b1f      	ldr	r3, [pc, #124]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012f72:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7f6 fa7a 	bl	8009470 <can1_ams_cell_voltages_v6s9_decode>
 8012f7c:	eeb0 7a40 	vmov.f32	s14, s0
 8012f80:	eef0 7a60 	vmov.f32	s15, s1
 8012f84:	463b      	mov	r3, r7
 8012f86:	ed83 7b88 	vstr	d7, [r3, #544]	; 0x220
       ams_cell_voltages.v6s10 = can1_ams_cell_voltages_v6s10_decode(can1_rx_ams_cell_voltages.v6s10);
 8012f8a:	4b19      	ldr	r3, [pc, #100]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012f8c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7f6 fac5 	bl	8009520 <can1_ams_cell_voltages_v6s10_decode>
 8012f96:	eeb0 7a40 	vmov.f32	s14, s0
 8012f9a:	eef0 7a60 	vmov.f32	s15, s1
 8012f9e:	463b      	mov	r3, r7
 8012fa0:	ed83 7b8a 	vstr	d7, [r3, #552]	; 0x228
       ams_cell_voltages.v6s11 = can1_ams_cell_voltages_v6s11_decode(can1_rx_ams_cell_voltages.v6s11);
 8012fa4:	4b12      	ldr	r3, [pc, #72]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012fa6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7f6 fb10 	bl	80095d0 <can1_ams_cell_voltages_v6s11_decode>
 8012fb0:	eeb0 7a40 	vmov.f32	s14, s0
 8012fb4:	eef0 7a60 	vmov.f32	s15, s1
 8012fb8:	463b      	mov	r3, r7
 8012fba:	ed83 7b8c 	vstr	d7, [r3, #560]	; 0x230
       ams_cell_voltages.v6s12 = can1_ams_cell_voltages_v6s12_decode(can1_rx_ams_cell_voltages.v6s12);
 8012fbe:	4b0c      	ldr	r3, [pc, #48]	; (8012ff0 <can1_ams_cell_voltages_receive+0xcd0>)
 8012fc0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7f6 fb5b 	bl	8009680 <can1_ams_cell_voltages_v6s12_decode>
 8012fca:	eeb0 7a40 	vmov.f32	s14, s0
 8012fce:	eef0 7a60 	vmov.f32	s15, s1
 8012fd2:	463b      	mov	r3, r7
 8012fd4:	ed83 7b8e 	vstr	d7, [r3, #568]	; 0x238
       can1_ams_cell_voltages_rx_callback(&ams_cell_voltages);
 8012fd8:	463b      	mov	r3, r7
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f001 f826 	bl	801402c <can1_ams_cell_voltages_rx_callback>
       can1_ams_cell_voltages_flag = 0;
 8012fe0:	4b04      	ldr	r3, [pc, #16]	; (8012ff4 <can1_ams_cell_voltages_receive+0xcd4>)
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	701a      	strb	r2, [r3, #0]
   }
}
 8012fe6:	bf00      	nop
 8012fe8:	f507 777e 	add.w	r7, r7, #1016	; 0x3f8
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}
 8012ff0:	2000041c 	.word	0x2000041c
 8012ff4:	20000685 	.word	0x20000685

08012ff8 <can1_ams_cell_temperatures_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_temperatures_receive() {
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b0fa      	sub	sp, #488	; 0x1e8
 8012ffc:	af00      	add	r7, sp, #0
   if(can1_ams_cell_temperatures_flag) {
 8012ffe:	4beb      	ldr	r3, [pc, #940]	; (80133ac <can1_ams_cell_temperatures_receive+0x3b4>)
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	2b00      	cmp	r3, #0
 8013004:	f000 8318 	beq.w	8013638 <can1_ams_cell_temperatures_receive+0x640>
       ams_cell_temperatures_t ams_cell_temperatures;
       ams_cell_temperatures.t1s1 = can1_ams_cell_temperatures_t1s1_decode(can1_rx_ams_cell_temperatures.t1s1);
 8013008:	4be9      	ldr	r3, [pc, #932]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 801300a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801300e:	4618      	mov	r0, r3
 8013010:	f7f8 fede 	bl	800bdd0 <can1_ams_cell_temperatures_t1s1_decode>
 8013014:	eeb0 7a40 	vmov.f32	s14, s0
 8013018:	eef0 7a60 	vmov.f32	s15, s1
 801301c:	463b      	mov	r3, r7
 801301e:	ed83 7b00 	vstr	d7, [r3]
       ams_cell_temperatures.t1s2 = can1_ams_cell_temperatures_t1s2_decode(can1_rx_ams_cell_temperatures.t1s2);
 8013022:	4be3      	ldr	r3, [pc, #908]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013024:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013028:	4618      	mov	r0, r3
 801302a:	f7f8 ff29 	bl	800be80 <can1_ams_cell_temperatures_t1s2_decode>
 801302e:	eeb0 7a40 	vmov.f32	s14, s0
 8013032:	eef0 7a60 	vmov.f32	s15, s1
 8013036:	463b      	mov	r3, r7
 8013038:	ed83 7b02 	vstr	d7, [r3, #8]
       ams_cell_temperatures.t1s3 = can1_ams_cell_temperatures_t1s3_decode(can1_rx_ams_cell_temperatures.t1s3);
 801303c:	4bdc      	ldr	r3, [pc, #880]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 801303e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013042:	4618      	mov	r0, r3
 8013044:	f7f8 ff74 	bl	800bf30 <can1_ams_cell_temperatures_t1s3_decode>
 8013048:	eeb0 7a40 	vmov.f32	s14, s0
 801304c:	eef0 7a60 	vmov.f32	s15, s1
 8013050:	463b      	mov	r3, r7
 8013052:	ed83 7b04 	vstr	d7, [r3, #16]
       ams_cell_temperatures.t1s4 = can1_ams_cell_temperatures_t1s4_decode(can1_rx_ams_cell_temperatures.t1s4);
 8013056:	4bd6      	ldr	r3, [pc, #856]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013058:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801305c:	4618      	mov	r0, r3
 801305e:	f7f8 ffbf 	bl	800bfe0 <can1_ams_cell_temperatures_t1s4_decode>
 8013062:	eeb0 7a40 	vmov.f32	s14, s0
 8013066:	eef0 7a60 	vmov.f32	s15, s1
 801306a:	463b      	mov	r3, r7
 801306c:	ed83 7b06 	vstr	d7, [r3, #24]
       ams_cell_temperatures.t1s5 = can1_ams_cell_temperatures_t1s5_decode(can1_rx_ams_cell_temperatures.t1s5);
 8013070:	4bcf      	ldr	r3, [pc, #828]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013072:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013076:	4618      	mov	r0, r3
 8013078:	f7f9 f80a 	bl	800c090 <can1_ams_cell_temperatures_t1s5_decode>
 801307c:	eeb0 7a40 	vmov.f32	s14, s0
 8013080:	eef0 7a60 	vmov.f32	s15, s1
 8013084:	463b      	mov	r3, r7
 8013086:	ed83 7b08 	vstr	d7, [r3, #32]
       ams_cell_temperatures.t1s6 = can1_ams_cell_temperatures_t1s6_decode(can1_rx_ams_cell_temperatures.t1s6);
 801308a:	4bc9      	ldr	r3, [pc, #804]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 801308c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013090:	4618      	mov	r0, r3
 8013092:	f7f9 f855 	bl	800c140 <can1_ams_cell_temperatures_t1s6_decode>
 8013096:	eeb0 7a40 	vmov.f32	s14, s0
 801309a:	eef0 7a60 	vmov.f32	s15, s1
 801309e:	463b      	mov	r3, r7
 80130a0:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
       ams_cell_temperatures.t1s7 = can1_ams_cell_temperatures_t1s7_decode(can1_rx_ams_cell_temperatures.t1s7);
 80130a4:	4bc2      	ldr	r3, [pc, #776]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 80130a6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7f9 f8a0 	bl	800c1f0 <can1_ams_cell_temperatures_t1s7_decode>
 80130b0:	eeb0 7a40 	vmov.f32	s14, s0
 80130b4:	eef0 7a60 	vmov.f32	s15, s1
 80130b8:	463b      	mov	r3, r7
 80130ba:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
       ams_cell_temperatures.t1s8 = can1_ams_cell_temperatures_t1s8_decode(can1_rx_ams_cell_temperatures.t1s8);
 80130be:	4bbc      	ldr	r3, [pc, #752]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 80130c0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7f9 f8eb 	bl	800c2a0 <can1_ams_cell_temperatures_t1s8_decode>
 80130ca:	eeb0 7a40 	vmov.f32	s14, s0
 80130ce:	eef0 7a60 	vmov.f32	s15, s1
 80130d2:	463b      	mov	r3, r7
 80130d4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
       ams_cell_temperatures.t1s9 = can1_ams_cell_temperatures_t1s9_decode(can1_rx_ams_cell_temperatures.t1s9);
 80130d8:	4bb5      	ldr	r3, [pc, #724]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 80130da:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80130de:	4618      	mov	r0, r3
 80130e0:	f7f9 f936 	bl	800c350 <can1_ams_cell_temperatures_t1s9_decode>
 80130e4:	eeb0 7a40 	vmov.f32	s14, s0
 80130e8:	eef0 7a60 	vmov.f32	s15, s1
 80130ec:	463b      	mov	r3, r7
 80130ee:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
       ams_cell_temperatures.t1s10 = can1_ams_cell_temperatures_t1s10_decode(can1_rx_ams_cell_temperatures.t1s10);
 80130f2:	4baf      	ldr	r3, [pc, #700]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 80130f4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7f9 f981 	bl	800c400 <can1_ams_cell_temperatures_t1s10_decode>
 80130fe:	eeb0 7a40 	vmov.f32	s14, s0
 8013102:	eef0 7a60 	vmov.f32	s15, s1
 8013106:	463b      	mov	r3, r7
 8013108:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
       ams_cell_temperatures.t1s11 = can1_ams_cell_temperatures_t1s11_decode(can1_rx_ams_cell_temperatures.t1s11);
 801310c:	4ba8      	ldr	r3, [pc, #672]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 801310e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8013112:	4618      	mov	r0, r3
 8013114:	f7f9 f9cc 	bl	800c4b0 <can1_ams_cell_temperatures_t1s11_decode>
 8013118:	eeb0 7a40 	vmov.f32	s14, s0
 801311c:	eef0 7a60 	vmov.f32	s15, s1
 8013120:	463b      	mov	r3, r7
 8013122:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
       ams_cell_temperatures.t1s12 = can1_ams_cell_temperatures_t1s12_decode(can1_rx_ams_cell_temperatures.t1s12);
 8013126:	4ba2      	ldr	r3, [pc, #648]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013128:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801312c:	4618      	mov	r0, r3
 801312e:	f7f9 fa17 	bl	800c560 <can1_ams_cell_temperatures_t1s12_decode>
 8013132:	eeb0 7a40 	vmov.f32	s14, s0
 8013136:	eef0 7a60 	vmov.f32	s15, s1
 801313a:	463b      	mov	r3, r7
 801313c:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
       ams_cell_temperatures.t2s1 = can1_ams_cell_temperatures_t2s1_decode(can1_rx_ams_cell_temperatures.t2s1);
 8013140:	4b9b      	ldr	r3, [pc, #620]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013142:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013146:	4618      	mov	r0, r3
 8013148:	f7f9 fa62 	bl	800c610 <can1_ams_cell_temperatures_t2s1_decode>
 801314c:	eeb0 7a40 	vmov.f32	s14, s0
 8013150:	eef0 7a60 	vmov.f32	s15, s1
 8013154:	463b      	mov	r3, r7
 8013156:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
       ams_cell_temperatures.t2s2 = can1_ams_cell_temperatures_t2s2_decode(can1_rx_ams_cell_temperatures.t2s2);
 801315a:	4b95      	ldr	r3, [pc, #596]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 801315c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013160:	4618      	mov	r0, r3
 8013162:	f7f9 faad 	bl	800c6c0 <can1_ams_cell_temperatures_t2s2_decode>
 8013166:	eeb0 7a40 	vmov.f32	s14, s0
 801316a:	eef0 7a60 	vmov.f32	s15, s1
 801316e:	463b      	mov	r3, r7
 8013170:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
       ams_cell_temperatures.t2s3 = can1_ams_cell_temperatures_t2s3_decode(can1_rx_ams_cell_temperatures.t2s3);
 8013174:	4b8e      	ldr	r3, [pc, #568]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013176:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801317a:	4618      	mov	r0, r3
 801317c:	f7f9 faf8 	bl	800c770 <can1_ams_cell_temperatures_t2s3_decode>
 8013180:	eeb0 7a40 	vmov.f32	s14, s0
 8013184:	eef0 7a60 	vmov.f32	s15, s1
 8013188:	463b      	mov	r3, r7
 801318a:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
       ams_cell_temperatures.t2s4 = can1_ams_cell_temperatures_t2s4_decode(can1_rx_ams_cell_temperatures.t2s4);
 801318e:	4b88      	ldr	r3, [pc, #544]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013190:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8013194:	4618      	mov	r0, r3
 8013196:	f7f9 fb43 	bl	800c820 <can1_ams_cell_temperatures_t2s4_decode>
 801319a:	eeb0 7a40 	vmov.f32	s14, s0
 801319e:	eef0 7a60 	vmov.f32	s15, s1
 80131a2:	463b      	mov	r3, r7
 80131a4:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
       ams_cell_temperatures.t2s5 = can1_ams_cell_temperatures_t2s5_decode(can1_rx_ams_cell_temperatures.t2s5);
 80131a8:	4b81      	ldr	r3, [pc, #516]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 80131aa:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7f9 fb8e 	bl	800c8d0 <can1_ams_cell_temperatures_t2s5_decode>
 80131b4:	eeb0 7a40 	vmov.f32	s14, s0
 80131b8:	eef0 7a60 	vmov.f32	s15, s1
 80131bc:	463b      	mov	r3, r7
 80131be:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
       ams_cell_temperatures.t2s6 = can1_ams_cell_temperatures_t2s6_decode(can1_rx_ams_cell_temperatures.t2s6);
 80131c2:	4b7b      	ldr	r3, [pc, #492]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 80131c4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7f9 fbd9 	bl	800c980 <can1_ams_cell_temperatures_t2s6_decode>
 80131ce:	eeb0 7a40 	vmov.f32	s14, s0
 80131d2:	eef0 7a60 	vmov.f32	s15, s1
 80131d6:	463b      	mov	r3, r7
 80131d8:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
       ams_cell_temperatures.t2s7 = can1_ams_cell_temperatures_t2s7_decode(can1_rx_ams_cell_temperatures.t2s7);
 80131dc:	4b74      	ldr	r3, [pc, #464]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 80131de:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7f9 fc24 	bl	800ca30 <can1_ams_cell_temperatures_t2s7_decode>
 80131e8:	eeb0 7a40 	vmov.f32	s14, s0
 80131ec:	eef0 7a60 	vmov.f32	s15, s1
 80131f0:	463b      	mov	r3, r7
 80131f2:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
       ams_cell_temperatures.t2s8 = can1_ams_cell_temperatures_t2s8_decode(can1_rx_ams_cell_temperatures.t2s8);
 80131f6:	4b6e      	ldr	r3, [pc, #440]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 80131f8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7f9 fc6f 	bl	800cae0 <can1_ams_cell_temperatures_t2s8_decode>
 8013202:	eeb0 7a40 	vmov.f32	s14, s0
 8013206:	eef0 7a60 	vmov.f32	s15, s1
 801320a:	463b      	mov	r3, r7
 801320c:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
       ams_cell_temperatures.t2s9 = can1_ams_cell_temperatures_t2s9_decode(can1_rx_ams_cell_temperatures.t2s9);
 8013210:	4b67      	ldr	r3, [pc, #412]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013212:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8013216:	4618      	mov	r0, r3
 8013218:	f7f9 fcba 	bl	800cb90 <can1_ams_cell_temperatures_t2s9_decode>
 801321c:	eeb0 7a40 	vmov.f32	s14, s0
 8013220:	eef0 7a60 	vmov.f32	s15, s1
 8013224:	463b      	mov	r3, r7
 8013226:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
       ams_cell_temperatures.t2s10 = can1_ams_cell_temperatures_t2s10_decode(can1_rx_ams_cell_temperatures.t2s10);
 801322a:	4b61      	ldr	r3, [pc, #388]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 801322c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8013230:	4618      	mov	r0, r3
 8013232:	f7f9 fd05 	bl	800cc40 <can1_ams_cell_temperatures_t2s10_decode>
 8013236:	eeb0 7a40 	vmov.f32	s14, s0
 801323a:	eef0 7a60 	vmov.f32	s15, s1
 801323e:	463b      	mov	r3, r7
 8013240:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
       ams_cell_temperatures.t2s11 = can1_ams_cell_temperatures_t2s11_decode(can1_rx_ams_cell_temperatures.t2s11);
 8013244:	4b5a      	ldr	r3, [pc, #360]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013246:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 801324a:	4618      	mov	r0, r3
 801324c:	f7f9 fd50 	bl	800ccf0 <can1_ams_cell_temperatures_t2s11_decode>
 8013250:	eeb0 7a40 	vmov.f32	s14, s0
 8013254:	eef0 7a60 	vmov.f32	s15, s1
 8013258:	463b      	mov	r3, r7
 801325a:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
       ams_cell_temperatures.t2s12 = can1_ams_cell_temperatures_t2s12_decode(can1_rx_ams_cell_temperatures.t2s12);
 801325e:	4b54      	ldr	r3, [pc, #336]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013260:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013264:	4618      	mov	r0, r3
 8013266:	f7f9 fd9b 	bl	800cda0 <can1_ams_cell_temperatures_t2s12_decode>
 801326a:	eeb0 7a40 	vmov.f32	s14, s0
 801326e:	eef0 7a60 	vmov.f32	s15, s1
 8013272:	463b      	mov	r3, r7
 8013274:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
       ams_cell_temperatures.t3s1 = can1_ams_cell_temperatures_t3s1_decode(can1_rx_ams_cell_temperatures.t3s1);
 8013278:	4b4d      	ldr	r3, [pc, #308]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 801327a:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 801327e:	4618      	mov	r0, r3
 8013280:	f7f9 fde6 	bl	800ce50 <can1_ams_cell_temperatures_t3s1_decode>
 8013284:	eeb0 7a40 	vmov.f32	s14, s0
 8013288:	eef0 7a60 	vmov.f32	s15, s1
 801328c:	463b      	mov	r3, r7
 801328e:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
       ams_cell_temperatures.t3s2 = can1_ams_cell_temperatures_t3s2_decode(can1_rx_ams_cell_temperatures.t3s2);
 8013292:	4b47      	ldr	r3, [pc, #284]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013294:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8013298:	4618      	mov	r0, r3
 801329a:	f7f9 fe31 	bl	800cf00 <can1_ams_cell_temperatures_t3s2_decode>
 801329e:	eeb0 7a40 	vmov.f32	s14, s0
 80132a2:	eef0 7a60 	vmov.f32	s15, s1
 80132a6:	463b      	mov	r3, r7
 80132a8:	ed83 7b32 	vstr	d7, [r3, #200]	; 0xc8
       ams_cell_temperatures.t3s3 = can1_ams_cell_temperatures_t3s3_decode(can1_rx_ams_cell_temperatures.t3s3);
 80132ac:	4b40      	ldr	r3, [pc, #256]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 80132ae:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80132b2:	4618      	mov	r0, r3
 80132b4:	f7f9 fe7c 	bl	800cfb0 <can1_ams_cell_temperatures_t3s3_decode>
 80132b8:	eeb0 7a40 	vmov.f32	s14, s0
 80132bc:	eef0 7a60 	vmov.f32	s15, s1
 80132c0:	463b      	mov	r3, r7
 80132c2:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
       ams_cell_temperatures.t3s4 = can1_ams_cell_temperatures_t3s4_decode(can1_rx_ams_cell_temperatures.t3s4);
 80132c6:	4b3a      	ldr	r3, [pc, #232]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 80132c8:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7f9 fec7 	bl	800d060 <can1_ams_cell_temperatures_t3s4_decode>
 80132d2:	eeb0 7a40 	vmov.f32	s14, s0
 80132d6:	eef0 7a60 	vmov.f32	s15, s1
 80132da:	463b      	mov	r3, r7
 80132dc:	ed83 7b36 	vstr	d7, [r3, #216]	; 0xd8
       ams_cell_temperatures.t3s5 = can1_ams_cell_temperatures_t3s5_decode(can1_rx_ams_cell_temperatures.t3s5);
 80132e0:	4b33      	ldr	r3, [pc, #204]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 80132e2:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7f9 ff12 	bl	800d110 <can1_ams_cell_temperatures_t3s5_decode>
 80132ec:	eeb0 7a40 	vmov.f32	s14, s0
 80132f0:	eef0 7a60 	vmov.f32	s15, s1
 80132f4:	463b      	mov	r3, r7
 80132f6:	ed83 7b38 	vstr	d7, [r3, #224]	; 0xe0
       ams_cell_temperatures.t3s6 = can1_ams_cell_temperatures_t3s6_decode(can1_rx_ams_cell_temperatures.t3s6);
 80132fa:	4b2d      	ldr	r3, [pc, #180]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 80132fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013300:	4618      	mov	r0, r3
 8013302:	f7f9 ff5d 	bl	800d1c0 <can1_ams_cell_temperatures_t3s6_decode>
 8013306:	eeb0 7a40 	vmov.f32	s14, s0
 801330a:	eef0 7a60 	vmov.f32	s15, s1
 801330e:	463b      	mov	r3, r7
 8013310:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8
       ams_cell_temperatures.t3s7 = can1_ams_cell_temperatures_t3s7_decode(can1_rx_ams_cell_temperatures.t3s7);
 8013314:	4b26      	ldr	r3, [pc, #152]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013316:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801331a:	4618      	mov	r0, r3
 801331c:	f7f9 ffa8 	bl	800d270 <can1_ams_cell_temperatures_t3s7_decode>
 8013320:	eeb0 7a40 	vmov.f32	s14, s0
 8013324:	eef0 7a60 	vmov.f32	s15, s1
 8013328:	463b      	mov	r3, r7
 801332a:	ed83 7b3c 	vstr	d7, [r3, #240]	; 0xf0
       ams_cell_temperatures.t3s8 = can1_ams_cell_temperatures_t3s8_decode(can1_rx_ams_cell_temperatures.t3s8);
 801332e:	4b20      	ldr	r3, [pc, #128]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013330:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013334:	4618      	mov	r0, r3
 8013336:	f7f9 fff3 	bl	800d320 <can1_ams_cell_temperatures_t3s8_decode>
 801333a:	eeb0 7a40 	vmov.f32	s14, s0
 801333e:	eef0 7a60 	vmov.f32	s15, s1
 8013342:	463b      	mov	r3, r7
 8013344:	ed83 7b3e 	vstr	d7, [r3, #248]	; 0xf8
       ams_cell_temperatures.t3s9 = can1_ams_cell_temperatures_t3s9_decode(can1_rx_ams_cell_temperatures.t3s9);
 8013348:	4b19      	ldr	r3, [pc, #100]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 801334a:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 801334e:	4618      	mov	r0, r3
 8013350:	f7fa f83e 	bl	800d3d0 <can1_ams_cell_temperatures_t3s9_decode>
 8013354:	eeb0 7a40 	vmov.f32	s14, s0
 8013358:	eef0 7a60 	vmov.f32	s15, s1
 801335c:	463b      	mov	r3, r7
 801335e:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
       ams_cell_temperatures.t3s10 = can1_ams_cell_temperatures_t3s10_decode(can1_rx_ams_cell_temperatures.t3s10);
 8013362:	4b13      	ldr	r3, [pc, #76]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013364:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013368:	4618      	mov	r0, r3
 801336a:	f7fa f889 	bl	800d480 <can1_ams_cell_temperatures_t3s10_decode>
 801336e:	eeb0 7a40 	vmov.f32	s14, s0
 8013372:	eef0 7a60 	vmov.f32	s15, s1
 8013376:	463b      	mov	r3, r7
 8013378:	ed83 7b42 	vstr	d7, [r3, #264]	; 0x108
       ams_cell_temperatures.t3s11 = can1_ams_cell_temperatures_t3s11_decode(can1_rx_ams_cell_temperatures.t3s11);
 801337c:	4b0c      	ldr	r3, [pc, #48]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 801337e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8013382:	4618      	mov	r0, r3
 8013384:	f7fa f8d4 	bl	800d530 <can1_ams_cell_temperatures_t3s11_decode>
 8013388:	eeb0 7a40 	vmov.f32	s14, s0
 801338c:	eef0 7a60 	vmov.f32	s15, s1
 8013390:	463b      	mov	r3, r7
 8013392:	ed83 7b44 	vstr	d7, [r3, #272]	; 0x110
       ams_cell_temperatures.t3s12 = can1_ams_cell_temperatures_t3s12_decode(can1_rx_ams_cell_temperatures.t3s12);
 8013396:	4b06      	ldr	r3, [pc, #24]	; (80133b0 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013398:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 801339c:	4618      	mov	r0, r3
 801339e:	f7fa f91f 	bl	800d5e0 <can1_ams_cell_temperatures_t3s12_decode>
 80133a2:	eeb0 7a40 	vmov.f32	s14, s0
 80133a6:	eef0 7a60 	vmov.f32	s15, s1
 80133aa:	e003      	b.n	80133b4 <can1_ams_cell_temperatures_receive+0x3bc>
 80133ac:	20000686 	.word	0x20000686
 80133b0:	2000049c 	.word	0x2000049c
 80133b4:	463b      	mov	r3, r7
 80133b6:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
       ams_cell_temperatures.t4s1 = can1_ams_cell_temperatures_t4s1_decode(can1_rx_ams_cell_temperatures.t4s1);
 80133ba:	4ba2      	ldr	r3, [pc, #648]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 80133bc:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7fa f965 	bl	800d690 <can1_ams_cell_temperatures_t4s1_decode>
 80133c6:	eeb0 7a40 	vmov.f32	s14, s0
 80133ca:	eef0 7a60 	vmov.f32	s15, s1
 80133ce:	463b      	mov	r3, r7
 80133d0:	ed83 7b48 	vstr	d7, [r3, #288]	; 0x120
       ams_cell_temperatures.t4s2 = can1_ams_cell_temperatures_t4s2_decode(can1_rx_ams_cell_temperatures.t4s2);
 80133d4:	4b9b      	ldr	r3, [pc, #620]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 80133d6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80133da:	4618      	mov	r0, r3
 80133dc:	f7fa f9b0 	bl	800d740 <can1_ams_cell_temperatures_t4s2_decode>
 80133e0:	eeb0 7a40 	vmov.f32	s14, s0
 80133e4:	eef0 7a60 	vmov.f32	s15, s1
 80133e8:	463b      	mov	r3, r7
 80133ea:	ed83 7b4a 	vstr	d7, [r3, #296]	; 0x128
       ams_cell_temperatures.t4s3 = can1_ams_cell_temperatures_t4s3_decode(can1_rx_ams_cell_temperatures.t4s3);
 80133ee:	4b95      	ldr	r3, [pc, #596]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 80133f0:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7fa f9fb 	bl	800d7f0 <can1_ams_cell_temperatures_t4s3_decode>
 80133fa:	eeb0 7a40 	vmov.f32	s14, s0
 80133fe:	eef0 7a60 	vmov.f32	s15, s1
 8013402:	463b      	mov	r3, r7
 8013404:	ed83 7b4c 	vstr	d7, [r3, #304]	; 0x130
       ams_cell_temperatures.t4s4 = can1_ams_cell_temperatures_t4s4_decode(can1_rx_ams_cell_temperatures.t4s4);
 8013408:	4b8e      	ldr	r3, [pc, #568]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 801340a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 801340e:	4618      	mov	r0, r3
 8013410:	f7fa fa46 	bl	800d8a0 <can1_ams_cell_temperatures_t4s4_decode>
 8013414:	eeb0 7a40 	vmov.f32	s14, s0
 8013418:	eef0 7a60 	vmov.f32	s15, s1
 801341c:	463b      	mov	r3, r7
 801341e:	ed83 7b4e 	vstr	d7, [r3, #312]	; 0x138
       ams_cell_temperatures.t4s5 = can1_ams_cell_temperatures_t4s5_decode(can1_rx_ams_cell_temperatures.t4s5);
 8013422:	4b88      	ldr	r3, [pc, #544]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 8013424:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8013428:	4618      	mov	r0, r3
 801342a:	f7fa fa91 	bl	800d950 <can1_ams_cell_temperatures_t4s5_decode>
 801342e:	eeb0 7a40 	vmov.f32	s14, s0
 8013432:	eef0 7a60 	vmov.f32	s15, s1
 8013436:	463b      	mov	r3, r7
 8013438:	ed83 7b50 	vstr	d7, [r3, #320]	; 0x140
       ams_cell_temperatures.t4s6 = can1_ams_cell_temperatures_t4s6_decode(can1_rx_ams_cell_temperatures.t4s6);
 801343c:	4b81      	ldr	r3, [pc, #516]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 801343e:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8013442:	4618      	mov	r0, r3
 8013444:	f7fa fadc 	bl	800da00 <can1_ams_cell_temperatures_t4s6_decode>
 8013448:	eeb0 7a40 	vmov.f32	s14, s0
 801344c:	eef0 7a60 	vmov.f32	s15, s1
 8013450:	463b      	mov	r3, r7
 8013452:	ed83 7b52 	vstr	d7, [r3, #328]	; 0x148
       ams_cell_temperatures.t4s7 = can1_ams_cell_temperatures_t4s7_decode(can1_rx_ams_cell_temperatures.t4s7);
 8013456:	4b7b      	ldr	r3, [pc, #492]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 8013458:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801345c:	4618      	mov	r0, r3
 801345e:	f7fa fb27 	bl	800dab0 <can1_ams_cell_temperatures_t4s7_decode>
 8013462:	eeb0 7a40 	vmov.f32	s14, s0
 8013466:	eef0 7a60 	vmov.f32	s15, s1
 801346a:	463b      	mov	r3, r7
 801346c:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150
       ams_cell_temperatures.t4s8 = can1_ams_cell_temperatures_t4s8_decode(can1_rx_ams_cell_temperatures.t4s8);
 8013470:	4b74      	ldr	r3, [pc, #464]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 8013472:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8013476:	4618      	mov	r0, r3
 8013478:	f7fa fb72 	bl	800db60 <can1_ams_cell_temperatures_t4s8_decode>
 801347c:	eeb0 7a40 	vmov.f32	s14, s0
 8013480:	eef0 7a60 	vmov.f32	s15, s1
 8013484:	463b      	mov	r3, r7
 8013486:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158
       ams_cell_temperatures.t4s9 = can1_ams_cell_temperatures_t4s9_decode(can1_rx_ams_cell_temperatures.t4s9);
 801348a:	4b6e      	ldr	r3, [pc, #440]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 801348c:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8013490:	4618      	mov	r0, r3
 8013492:	f7fa fbbd 	bl	800dc10 <can1_ams_cell_temperatures_t4s9_decode>
 8013496:	eeb0 7a40 	vmov.f32	s14, s0
 801349a:	eef0 7a60 	vmov.f32	s15, s1
 801349e:	463b      	mov	r3, r7
 80134a0:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160
       ams_cell_temperatures.t4s10 = can1_ams_cell_temperatures_t4s10_decode(can1_rx_ams_cell_temperatures.t4s10);
 80134a4:	4b67      	ldr	r3, [pc, #412]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 80134a6:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80134aa:	4618      	mov	r0, r3
 80134ac:	f7fa fc08 	bl	800dcc0 <can1_ams_cell_temperatures_t4s10_decode>
 80134b0:	eeb0 7a40 	vmov.f32	s14, s0
 80134b4:	eef0 7a60 	vmov.f32	s15, s1
 80134b8:	463b      	mov	r3, r7
 80134ba:	ed83 7b5a 	vstr	d7, [r3, #360]	; 0x168
       ams_cell_temperatures.t4s11 = can1_ams_cell_temperatures_t4s11_decode(can1_rx_ams_cell_temperatures.t4s11);
 80134be:	4b61      	ldr	r3, [pc, #388]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 80134c0:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7fa fc53 	bl	800dd70 <can1_ams_cell_temperatures_t4s11_decode>
 80134ca:	eeb0 7a40 	vmov.f32	s14, s0
 80134ce:	eef0 7a60 	vmov.f32	s15, s1
 80134d2:	463b      	mov	r3, r7
 80134d4:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170
       ams_cell_temperatures.t4s12 = can1_ams_cell_temperatures_t4s12_decode(can1_rx_ams_cell_temperatures.t4s12);
 80134d8:	4b5a      	ldr	r3, [pc, #360]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 80134da:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 80134de:	4618      	mov	r0, r3
 80134e0:	f7fa fc9e 	bl	800de20 <can1_ams_cell_temperatures_t4s12_decode>
 80134e4:	eeb0 7a40 	vmov.f32	s14, s0
 80134e8:	eef0 7a60 	vmov.f32	s15, s1
 80134ec:	463b      	mov	r3, r7
 80134ee:	ed83 7b5e 	vstr	d7, [r3, #376]	; 0x178
       ams_cell_temperatures.t5s1 = can1_ams_cell_temperatures_t5s1_decode(can1_rx_ams_cell_temperatures.t5s1);
 80134f2:	4b54      	ldr	r3, [pc, #336]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 80134f4:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7fa fce9 	bl	800ded0 <can1_ams_cell_temperatures_t5s1_decode>
 80134fe:	eeb0 7a40 	vmov.f32	s14, s0
 8013502:	eef0 7a60 	vmov.f32	s15, s1
 8013506:	463b      	mov	r3, r7
 8013508:	ed83 7b60 	vstr	d7, [r3, #384]	; 0x180
       ams_cell_temperatures.t5s2 = can1_ams_cell_temperatures_t5s2_decode(can1_rx_ams_cell_temperatures.t5s2);
 801350c:	4b4d      	ldr	r3, [pc, #308]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 801350e:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013512:	4618      	mov	r0, r3
 8013514:	f7fa fd34 	bl	800df80 <can1_ams_cell_temperatures_t5s2_decode>
 8013518:	eeb0 7a40 	vmov.f32	s14, s0
 801351c:	eef0 7a60 	vmov.f32	s15, s1
 8013520:	463b      	mov	r3, r7
 8013522:	ed83 7b62 	vstr	d7, [r3, #392]	; 0x188
       ams_cell_temperatures.t5s3 = can1_ams_cell_temperatures_t5s3_decode(can1_rx_ams_cell_temperatures.t5s3);
 8013526:	4b47      	ldr	r3, [pc, #284]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 8013528:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	; 0x66
 801352c:	4618      	mov	r0, r3
 801352e:	f7fa fd7f 	bl	800e030 <can1_ams_cell_temperatures_t5s3_decode>
 8013532:	eeb0 7a40 	vmov.f32	s14, s0
 8013536:	eef0 7a60 	vmov.f32	s15, s1
 801353a:	463b      	mov	r3, r7
 801353c:	ed83 7b64 	vstr	d7, [r3, #400]	; 0x190
       ams_cell_temperatures.t5s4 = can1_ams_cell_temperatures_t5s4_decode(can1_rx_ams_cell_temperatures.t5s4);
 8013540:	4b40      	ldr	r3, [pc, #256]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 8013542:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8013546:	4618      	mov	r0, r3
 8013548:	f7fa fdca 	bl	800e0e0 <can1_ams_cell_temperatures_t5s4_decode>
 801354c:	eeb0 7a40 	vmov.f32	s14, s0
 8013550:	eef0 7a60 	vmov.f32	s15, s1
 8013554:	463b      	mov	r3, r7
 8013556:	ed83 7b66 	vstr	d7, [r3, #408]	; 0x198
       ams_cell_temperatures.t5s5 = can1_ams_cell_temperatures_t5s5_decode(can1_rx_ams_cell_temperatures.t5s5);
 801355a:	4b3a      	ldr	r3, [pc, #232]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 801355c:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 8013560:	4618      	mov	r0, r3
 8013562:	f7fa fe15 	bl	800e190 <can1_ams_cell_temperatures_t5s5_decode>
 8013566:	eeb0 7a40 	vmov.f32	s14, s0
 801356a:	eef0 7a60 	vmov.f32	s15, s1
 801356e:	463b      	mov	r3, r7
 8013570:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0
       ams_cell_temperatures.t5s6 = can1_ams_cell_temperatures_t5s6_decode(can1_rx_ams_cell_temperatures.t5s6);
 8013574:	4b33      	ldr	r3, [pc, #204]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 8013576:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 801357a:	4618      	mov	r0, r3
 801357c:	f7fa fe60 	bl	800e240 <can1_ams_cell_temperatures_t5s6_decode>
 8013580:	eeb0 7a40 	vmov.f32	s14, s0
 8013584:	eef0 7a60 	vmov.f32	s15, s1
 8013588:	463b      	mov	r3, r7
 801358a:	ed83 7b6a 	vstr	d7, [r3, #424]	; 0x1a8
       ams_cell_temperatures.t5s7 = can1_ams_cell_temperatures_t5s7_decode(can1_rx_ams_cell_temperatures.t5s7);
 801358e:	4b2d      	ldr	r3, [pc, #180]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 8013590:	f9b3 306e 	ldrsh.w	r3, [r3, #110]	; 0x6e
 8013594:	4618      	mov	r0, r3
 8013596:	f7fa feab 	bl	800e2f0 <can1_ams_cell_temperatures_t5s7_decode>
 801359a:	eeb0 7a40 	vmov.f32	s14, s0
 801359e:	eef0 7a60 	vmov.f32	s15, s1
 80135a2:	463b      	mov	r3, r7
 80135a4:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
       ams_cell_temperatures.t5s8 = can1_ams_cell_temperatures_t5s8_decode(can1_rx_ams_cell_temperatures.t5s8);
 80135a8:	4b26      	ldr	r3, [pc, #152]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 80135aa:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7fa fef6 	bl	800e3a0 <can1_ams_cell_temperatures_t5s8_decode>
 80135b4:	eeb0 7a40 	vmov.f32	s14, s0
 80135b8:	eef0 7a60 	vmov.f32	s15, s1
 80135bc:	463b      	mov	r3, r7
 80135be:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8
       ams_cell_temperatures.t5s9 = can1_ams_cell_temperatures_t5s9_decode(can1_rx_ams_cell_temperatures.t5s9);
 80135c2:	4b20      	ldr	r3, [pc, #128]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 80135c4:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7fa ff41 	bl	800e450 <can1_ams_cell_temperatures_t5s9_decode>
 80135ce:	eeb0 7a40 	vmov.f32	s14, s0
 80135d2:	eef0 7a60 	vmov.f32	s15, s1
 80135d6:	463b      	mov	r3, r7
 80135d8:	ed83 7b70 	vstr	d7, [r3, #448]	; 0x1c0
       ams_cell_temperatures.t5s10 = can1_ams_cell_temperatures_t5s10_decode(can1_rx_ams_cell_temperatures.t5s10);
 80135dc:	4b19      	ldr	r3, [pc, #100]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 80135de:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7fa ff8c 	bl	800e500 <can1_ams_cell_temperatures_t5s10_decode>
 80135e8:	eeb0 7a40 	vmov.f32	s14, s0
 80135ec:	eef0 7a60 	vmov.f32	s15, s1
 80135f0:	463b      	mov	r3, r7
 80135f2:	ed83 7b72 	vstr	d7, [r3, #456]	; 0x1c8
       ams_cell_temperatures.t5s11 = can1_ams_cell_temperatures_t5s11_decode(can1_rx_ams_cell_temperatures.t5s11);
 80135f6:	4b13      	ldr	r3, [pc, #76]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 80135f8:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80135fc:	4618      	mov	r0, r3
 80135fe:	f7fa ffd7 	bl	800e5b0 <can1_ams_cell_temperatures_t5s11_decode>
 8013602:	eeb0 7a40 	vmov.f32	s14, s0
 8013606:	eef0 7a60 	vmov.f32	s15, s1
 801360a:	463b      	mov	r3, r7
 801360c:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0
       ams_cell_temperatures.t5s12 = can1_ams_cell_temperatures_t5s12_decode(can1_rx_ams_cell_temperatures.t5s12);
 8013610:	4b0c      	ldr	r3, [pc, #48]	; (8013644 <can1_ams_cell_temperatures_receive+0x64c>)
 8013612:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 8013616:	4618      	mov	r0, r3
 8013618:	f7fb f822 	bl	800e660 <can1_ams_cell_temperatures_t5s12_decode>
 801361c:	eeb0 7a40 	vmov.f32	s14, s0
 8013620:	eef0 7a60 	vmov.f32	s15, s1
 8013624:	463b      	mov	r3, r7
 8013626:	ed83 7b76 	vstr	d7, [r3, #472]	; 0x1d8
       can1_ams_cell_temperatures_rx_callback(&ams_cell_temperatures);
 801362a:	463b      	mov	r3, r7
 801362c:	4618      	mov	r0, r3
 801362e:	f000 fd07 	bl	8014040 <can1_ams_cell_temperatures_rx_callback>
       can1_ams_cell_temperatures_flag = 0;
 8013632:	4b05      	ldr	r3, [pc, #20]	; (8013648 <can1_ams_cell_temperatures_receive+0x650>)
 8013634:	2200      	movs	r2, #0
 8013636:	701a      	strb	r2, [r3, #0]
   }
}
 8013638:	bf00      	nop
 801363a:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 801363e:	46bd      	mov	sp, r7
 8013640:	bd80      	pop	{r7, pc}
 8013642:	bf00      	nop
 8013644:	2000049c 	.word	0x2000049c
 8013648:	20000686 	.word	0x20000686

0801364c <can2_amk1_setpoints_1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_amk1_setpoints_1_receive() {
 801364c:	b580      	push	{r7, lr}
 801364e:	b084      	sub	sp, #16
 8013650:	af00      	add	r7, sp, #0
   if(can2_amk1_setpoints_1_flag) {
 8013652:	4b3a      	ldr	r3, [pc, #232]	; (801373c <can2_amk1_setpoints_1_receive+0xf0>)
 8013654:	781b      	ldrb	r3, [r3, #0]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d06b      	beq.n	8013732 <can2_amk1_setpoints_1_receive+0xe6>
       amk1_setpoints_1_t amk1_setpoints_1;
       amk1_setpoints_1.amk1_control_inverter_on = can2_amk1_setpoints_1_amk1_control_inverter_on_decode(can2_rx_amk1_setpoints_1.amk1_control_inverter_on);
 801365a:	4b39      	ldr	r3, [pc, #228]	; (8013740 <can2_amk1_setpoints_1_receive+0xf4>)
 801365c:	781b      	ldrb	r3, [r3, #0]
 801365e:	4618      	mov	r0, r3
 8013660:	f7fb f975 	bl	800e94e <can2_amk1_setpoints_1_amk1_control_inverter_on_decode>
 8013664:	ec53 2b10 	vmov	r2, r3, d0
 8013668:	4610      	mov	r0, r2
 801366a:	4619      	mov	r1, r3
 801366c:	f7ed fa8e 	bl	8000b8c <__aeabi_d2uiz>
 8013670:	4603      	mov	r3, r0
 8013672:	b2db      	uxtb	r3, r3
 8013674:	71fb      	strb	r3, [r7, #7]
       amk1_setpoints_1.amk1_control_dc_on = can2_amk1_setpoints_1_amk1_control_dc_on_decode(can2_rx_amk1_setpoints_1.amk1_control_dc_on);
 8013676:	4b32      	ldr	r3, [pc, #200]	; (8013740 <can2_amk1_setpoints_1_receive+0xf4>)
 8013678:	785b      	ldrb	r3, [r3, #1]
 801367a:	4618      	mov	r0, r3
 801367c:	f7fb f97b 	bl	800e976 <can2_amk1_setpoints_1_amk1_control_dc_on_decode>
 8013680:	ec53 2b10 	vmov	r2, r3, d0
 8013684:	4610      	mov	r0, r2
 8013686:	4619      	mov	r1, r3
 8013688:	f7ed fa80 	bl	8000b8c <__aeabi_d2uiz>
 801368c:	4603      	mov	r3, r0
 801368e:	b2db      	uxtb	r3, r3
 8013690:	713b      	strb	r3, [r7, #4]
       amk1_setpoints_1.amk1_control_enable = can2_amk1_setpoints_1_amk1_control_enable_decode(can2_rx_amk1_setpoints_1.amk1_control_enable);
 8013692:	4b2b      	ldr	r3, [pc, #172]	; (8013740 <can2_amk1_setpoints_1_receive+0xf4>)
 8013694:	789b      	ldrb	r3, [r3, #2]
 8013696:	4618      	mov	r0, r3
 8013698:	f7fb f981 	bl	800e99e <can2_amk1_setpoints_1_amk1_control_enable_decode>
 801369c:	ec53 2b10 	vmov	r2, r3, d0
 80136a0:	4610      	mov	r0, r2
 80136a2:	4619      	mov	r1, r3
 80136a4:	f7ed fa72 	bl	8000b8c <__aeabi_d2uiz>
 80136a8:	4603      	mov	r3, r0
 80136aa:	b2db      	uxtb	r3, r3
 80136ac:	717b      	strb	r3, [r7, #5]
       amk1_setpoints_1.amk1_control_error_reset = can2_amk1_setpoints_1_amk1_control_error_reset_decode(can2_rx_amk1_setpoints_1.amk1_control_error_reset);
 80136ae:	4b24      	ldr	r3, [pc, #144]	; (8013740 <can2_amk1_setpoints_1_receive+0xf4>)
 80136b0:	78db      	ldrb	r3, [r3, #3]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7fb f987 	bl	800e9c6 <can2_amk1_setpoints_1_amk1_control_error_reset_decode>
 80136b8:	ec53 2b10 	vmov	r2, r3, d0
 80136bc:	4610      	mov	r0, r2
 80136be:	4619      	mov	r1, r3
 80136c0:	f7ed fa64 	bl	8000b8c <__aeabi_d2uiz>
 80136c4:	4603      	mov	r3, r0
 80136c6:	b2db      	uxtb	r3, r3
 80136c8:	71bb      	strb	r3, [r7, #6]
       amk1_setpoints_1.amk1_target_velocity = can2_amk1_setpoints_1_amk1_target_velocity_decode(can2_rx_amk1_setpoints_1.amk1_target_velocity);
 80136ca:	4b1d      	ldr	r3, [pc, #116]	; (8013740 <can2_amk1_setpoints_1_receive+0xf4>)
 80136cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7fb f98c 	bl	800e9ee <can2_amk1_setpoints_1_amk1_target_velocity_decode>
 80136d6:	ec53 2b10 	vmov	r2, r3, d0
 80136da:	4610      	mov	r0, r2
 80136dc:	4619      	mov	r1, r3
 80136de:	f7ed fa2d 	bl	8000b3c <__aeabi_d2iz>
 80136e2:	4603      	mov	r3, r0
 80136e4:	b21b      	sxth	r3, r3
 80136e6:	813b      	strh	r3, [r7, #8]
       amk1_setpoints_1.amk1_torque_limit_positiv = can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode(can2_rx_amk1_setpoints_1.amk1_torque_limit_positiv);
 80136e8:	4b15      	ldr	r3, [pc, #84]	; (8013740 <can2_amk1_setpoints_1_receive+0xf4>)
 80136ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7fb f992 	bl	800ea18 <can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode>
 80136f4:	ec53 2b10 	vmov	r2, r3, d0
 80136f8:	4610      	mov	r0, r2
 80136fa:	4619      	mov	r1, r3
 80136fc:	f7ed fa1e 	bl	8000b3c <__aeabi_d2iz>
 8013700:	4603      	mov	r3, r0
 8013702:	b21b      	sxth	r3, r3
 8013704:	81bb      	strh	r3, [r7, #12]
       amk1_setpoints_1.amk1_torque_limit_negativ = can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode(can2_rx_amk1_setpoints_1.amk1_torque_limit_negativ);
 8013706:	4b0e      	ldr	r3, [pc, #56]	; (8013740 <can2_amk1_setpoints_1_receive+0xf4>)
 8013708:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801370c:	4618      	mov	r0, r3
 801370e:	f7fb f998 	bl	800ea42 <can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode>
 8013712:	ec53 2b10 	vmov	r2, r3, d0
 8013716:	4610      	mov	r0, r2
 8013718:	4619      	mov	r1, r3
 801371a:	f7ed fa0f 	bl	8000b3c <__aeabi_d2iz>
 801371e:	4603      	mov	r3, r0
 8013720:	b21b      	sxth	r3, r3
 8013722:	817b      	strh	r3, [r7, #10]
       can2_amk1_setpoints_1_rx_callback(&amk1_setpoints_1);
 8013724:	1d3b      	adds	r3, r7, #4
 8013726:	4618      	mov	r0, r3
 8013728:	f000 fc94 	bl	8014054 <can2_amk1_setpoints_1_rx_callback>
       can2_amk1_setpoints_1_flag = 0;
 801372c:	4b03      	ldr	r3, [pc, #12]	; (801373c <can2_amk1_setpoints_1_receive+0xf0>)
 801372e:	2200      	movs	r2, #0
 8013730:	701a      	strb	r2, [r3, #0]
   }
}
 8013732:	bf00      	nop
 8013734:	3710      	adds	r7, #16
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}
 801373a:	bf00      	nop
 801373c:	20000687 	.word	0x20000687
 8013740:	2000062c 	.word	0x2000062c

08013744 <can2_ivt_msg_result_u3_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_receive() {
 8013744:	b580      	push	{r7, lr}
 8013746:	b086      	sub	sp, #24
 8013748:	af00      	add	r7, sp, #0
   if(can2_ivt_msg_result_u3_flag) {
 801374a:	4b37      	ldr	r3, [pc, #220]	; (8013828 <can2_ivt_msg_result_u3_receive+0xe4>)
 801374c:	781b      	ldrb	r3, [r3, #0]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d065      	beq.n	801381e <can2_ivt_msg_result_u3_receive+0xda>
       ivt_msg_result_u3_t ivt_msg_result_u3;
       ivt_msg_result_u3.ivt_id_result_u3 = can2_ivt_msg_result_u3_ivt_id_result_u3_decode(can2_rx_ivt_msg_result_u3.ivt_id_result_u3);
 8013752:	4b36      	ldr	r3, [pc, #216]	; (801382c <can2_ivt_msg_result_u3_receive+0xe8>)
 8013754:	781b      	ldrb	r3, [r3, #0]
 8013756:	4618      	mov	r0, r3
 8013758:	f7fb fc9b 	bl	800f092 <can2_ivt_msg_result_u3_ivt_id_result_u3_decode>
 801375c:	ec53 2b10 	vmov	r2, r3, d0
 8013760:	4610      	mov	r0, r2
 8013762:	4619      	mov	r1, r3
 8013764:	f7ed fa12 	bl	8000b8c <__aeabi_d2uiz>
 8013768:	4603      	mov	r3, r0
 801376a:	b2db      	uxtb	r3, r3
 801376c:	703b      	strb	r3, [r7, #0]
       ivt_msg_result_u3.ivt_result_u3_system_error = can2_ivt_msg_result_u3_ivt_result_u3_system_error_decode(can2_rx_ivt_msg_result_u3.ivt_result_u3_system_error);
 801376e:	4b2f      	ldr	r3, [pc, #188]	; (801382c <can2_ivt_msg_result_u3_receive+0xe8>)
 8013770:	785b      	ldrb	r3, [r3, #1]
 8013772:	4618      	mov	r0, r3
 8013774:	f7fb fca1 	bl	800f0ba <can2_ivt_msg_result_u3_ivt_result_u3_system_error_decode>
 8013778:	ec53 2b10 	vmov	r2, r3, d0
 801377c:	4610      	mov	r0, r2
 801377e:	4619      	mov	r1, r3
 8013780:	f7ed fa04 	bl	8000b8c <__aeabi_d2uiz>
 8013784:	4603      	mov	r3, r0
 8013786:	b2db      	uxtb	r3, r3
 8013788:	74fb      	strb	r3, [r7, #19]
       ivt_msg_result_u3.ivt_result_u3_measurement_error = can2_ivt_msg_result_u3_ivt_result_u3_measurement_error_decode(can2_rx_ivt_msg_result_u3.ivt_result_u3_measurement_error);
 801378a:	4b28      	ldr	r3, [pc, #160]	; (801382c <can2_ivt_msg_result_u3_receive+0xe8>)
 801378c:	789b      	ldrb	r3, [r3, #2]
 801378e:	4618      	mov	r0, r3
 8013790:	f7fb fca7 	bl	800f0e2 <can2_ivt_msg_result_u3_ivt_result_u3_measurement_error_decode>
 8013794:	ec53 2b10 	vmov	r2, r3, d0
 8013798:	4610      	mov	r0, r2
 801379a:	4619      	mov	r1, r3
 801379c:	f7ed f9f6 	bl	8000b8c <__aeabi_d2uiz>
 80137a0:	4603      	mov	r3, r0
 80137a2:	b2db      	uxtb	r3, r3
 80137a4:	747b      	strb	r3, [r7, #17]
       ivt_msg_result_u3.ivt_result_u3_channel_error = can2_ivt_msg_result_u3_ivt_result_u3_channel_error_decode(can2_rx_ivt_msg_result_u3.ivt_result_u3_channel_error);
 80137a6:	4b21      	ldr	r3, [pc, #132]	; (801382c <can2_ivt_msg_result_u3_receive+0xe8>)
 80137a8:	78db      	ldrb	r3, [r3, #3]
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7fb fcad 	bl	800f10a <can2_ivt_msg_result_u3_ivt_result_u3_channel_error_decode>
 80137b0:	ec53 2b10 	vmov	r2, r3, d0
 80137b4:	4610      	mov	r0, r2
 80137b6:	4619      	mov	r1, r3
 80137b8:	f7ed f9e8 	bl	8000b8c <__aeabi_d2uiz>
 80137bc:	4603      	mov	r3, r0
 80137be:	b2db      	uxtb	r3, r3
 80137c0:	743b      	strb	r3, [r7, #16]
       ivt_msg_result_u3.ivt_result_u3_ocs = can2_ivt_msg_result_u3_ivt_result_u3_ocs_decode(can2_rx_ivt_msg_result_u3.ivt_result_u3_ocs);
 80137c2:	4b1a      	ldr	r3, [pc, #104]	; (801382c <can2_ivt_msg_result_u3_receive+0xe8>)
 80137c4:	791b      	ldrb	r3, [r3, #4]
 80137c6:	4618      	mov	r0, r3
 80137c8:	f7fb fcb3 	bl	800f132 <can2_ivt_msg_result_u3_ivt_result_u3_ocs_decode>
 80137cc:	ec53 2b10 	vmov	r2, r3, d0
 80137d0:	4610      	mov	r0, r2
 80137d2:	4619      	mov	r1, r3
 80137d4:	f7ed f9da 	bl	8000b8c <__aeabi_d2uiz>
 80137d8:	4603      	mov	r3, r0
 80137da:	b2db      	uxtb	r3, r3
 80137dc:	74bb      	strb	r3, [r7, #18]
       ivt_msg_result_u3.ivt_msg_count_result_u3 = can2_ivt_msg_result_u3_ivt_msg_count_result_u3_decode(can2_rx_ivt_msg_result_u3.ivt_msg_count_result_u3);
 80137de:	4b13      	ldr	r3, [pc, #76]	; (801382c <can2_ivt_msg_result_u3_receive+0xe8>)
 80137e0:	795b      	ldrb	r3, [r3, #5]
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7fb fcb9 	bl	800f15a <can2_ivt_msg_result_u3_ivt_msg_count_result_u3_decode>
 80137e8:	ec53 2b10 	vmov	r2, r3, d0
 80137ec:	4610      	mov	r0, r2
 80137ee:	4619      	mov	r1, r3
 80137f0:	f7ed f9cc 	bl	8000b8c <__aeabi_d2uiz>
 80137f4:	4603      	mov	r3, r0
 80137f6:	b2db      	uxtb	r3, r3
 80137f8:	707b      	strb	r3, [r7, #1]
       ivt_msg_result_u3.ivt_result_u3 = can2_ivt_msg_result_u3_ivt_result_u3_decode(can2_rx_ivt_msg_result_u3.ivt_result_u3);
 80137fa:	4b0c      	ldr	r3, [pc, #48]	; (801382c <can2_ivt_msg_result_u3_receive+0xe8>)
 80137fc:	689b      	ldr	r3, [r3, #8]
 80137fe:	4618      	mov	r0, r3
 8013800:	f7fb fcbf 	bl	800f182 <can2_ivt_msg_result_u3_ivt_result_u3_decode>
 8013804:	eeb0 7a40 	vmov.f32	s14, s0
 8013808:	eef0 7a60 	vmov.f32	s15, s1
 801380c:	ed87 7b02 	vstr	d7, [r7, #8]
       can2_ivt_msg_result_u3_rx_callback(&ivt_msg_result_u3);
 8013810:	463b      	mov	r3, r7
 8013812:	4618      	mov	r0, r3
 8013814:	f002 f83a 	bl	801588c <can2_ivt_msg_result_u3_rx_callback>
       can2_ivt_msg_result_u3_flag = 0;
 8013818:	4b03      	ldr	r3, [pc, #12]	; (8013828 <can2_ivt_msg_result_u3_receive+0xe4>)
 801381a:	2200      	movs	r2, #0
 801381c:	701a      	strb	r2, [r3, #0]
   }
}
 801381e:	bf00      	nop
 8013820:	3718      	adds	r7, #24
 8013822:	46bd      	mov	sp, r7
 8013824:	bd80      	pop	{r7, pc}
 8013826:	bf00      	nop
 8013828:	20000688 	.word	0x20000688
 801382c:	20000638 	.word	0x20000638

08013830 <can2_ivt_msg_result_u2_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u2_receive() {
 8013830:	b580      	push	{r7, lr}
 8013832:	b086      	sub	sp, #24
 8013834:	af00      	add	r7, sp, #0
   if(can2_ivt_msg_result_u2_flag) {
 8013836:	4b37      	ldr	r3, [pc, #220]	; (8013914 <can2_ivt_msg_result_u2_receive+0xe4>)
 8013838:	781b      	ldrb	r3, [r3, #0]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d065      	beq.n	801390a <can2_ivt_msg_result_u2_receive+0xda>
       ivt_msg_result_u2_t ivt_msg_result_u2;
       ivt_msg_result_u2.ivt_id_result_u2 = can2_ivt_msg_result_u2_ivt_id_result_u2_decode(can2_rx_ivt_msg_result_u2.ivt_id_result_u2);
 801383e:	4b36      	ldr	r3, [pc, #216]	; (8013918 <can2_ivt_msg_result_u2_receive+0xe8>)
 8013840:	781b      	ldrb	r3, [r3, #0]
 8013842:	4618      	mov	r0, r3
 8013844:	f7fb fd37 	bl	800f2b6 <can2_ivt_msg_result_u2_ivt_id_result_u2_decode>
 8013848:	ec53 2b10 	vmov	r2, r3, d0
 801384c:	4610      	mov	r0, r2
 801384e:	4619      	mov	r1, r3
 8013850:	f7ed f99c 	bl	8000b8c <__aeabi_d2uiz>
 8013854:	4603      	mov	r3, r0
 8013856:	b2db      	uxtb	r3, r3
 8013858:	703b      	strb	r3, [r7, #0]
       ivt_msg_result_u2.ivt_result_u2_system_error = can2_ivt_msg_result_u2_ivt_result_u2_system_error_decode(can2_rx_ivt_msg_result_u2.ivt_result_u2_system_error);
 801385a:	4b2f      	ldr	r3, [pc, #188]	; (8013918 <can2_ivt_msg_result_u2_receive+0xe8>)
 801385c:	785b      	ldrb	r3, [r3, #1]
 801385e:	4618      	mov	r0, r3
 8013860:	f7fb fd3d 	bl	800f2de <can2_ivt_msg_result_u2_ivt_result_u2_system_error_decode>
 8013864:	ec53 2b10 	vmov	r2, r3, d0
 8013868:	4610      	mov	r0, r2
 801386a:	4619      	mov	r1, r3
 801386c:	f7ed f98e 	bl	8000b8c <__aeabi_d2uiz>
 8013870:	4603      	mov	r3, r0
 8013872:	b2db      	uxtb	r3, r3
 8013874:	74fb      	strb	r3, [r7, #19]
       ivt_msg_result_u2.ivt_result_u2_measurement_error = can2_ivt_msg_result_u2_ivt_result_u2_measurement_error_decode(can2_rx_ivt_msg_result_u2.ivt_result_u2_measurement_error);
 8013876:	4b28      	ldr	r3, [pc, #160]	; (8013918 <can2_ivt_msg_result_u2_receive+0xe8>)
 8013878:	789b      	ldrb	r3, [r3, #2]
 801387a:	4618      	mov	r0, r3
 801387c:	f7fb fd43 	bl	800f306 <can2_ivt_msg_result_u2_ivt_result_u2_measurement_error_decode>
 8013880:	ec53 2b10 	vmov	r2, r3, d0
 8013884:	4610      	mov	r0, r2
 8013886:	4619      	mov	r1, r3
 8013888:	f7ed f980 	bl	8000b8c <__aeabi_d2uiz>
 801388c:	4603      	mov	r3, r0
 801388e:	b2db      	uxtb	r3, r3
 8013890:	747b      	strb	r3, [r7, #17]
       ivt_msg_result_u2.ivt_result_u2_channel_error = can2_ivt_msg_result_u2_ivt_result_u2_channel_error_decode(can2_rx_ivt_msg_result_u2.ivt_result_u2_channel_error);
 8013892:	4b21      	ldr	r3, [pc, #132]	; (8013918 <can2_ivt_msg_result_u2_receive+0xe8>)
 8013894:	78db      	ldrb	r3, [r3, #3]
 8013896:	4618      	mov	r0, r3
 8013898:	f7fb fd49 	bl	800f32e <can2_ivt_msg_result_u2_ivt_result_u2_channel_error_decode>
 801389c:	ec53 2b10 	vmov	r2, r3, d0
 80138a0:	4610      	mov	r0, r2
 80138a2:	4619      	mov	r1, r3
 80138a4:	f7ed f972 	bl	8000b8c <__aeabi_d2uiz>
 80138a8:	4603      	mov	r3, r0
 80138aa:	b2db      	uxtb	r3, r3
 80138ac:	743b      	strb	r3, [r7, #16]
       ivt_msg_result_u2.ivt_result_u2_ocs = can2_ivt_msg_result_u2_ivt_result_u2_ocs_decode(can2_rx_ivt_msg_result_u2.ivt_result_u2_ocs);
 80138ae:	4b1a      	ldr	r3, [pc, #104]	; (8013918 <can2_ivt_msg_result_u2_receive+0xe8>)
 80138b0:	791b      	ldrb	r3, [r3, #4]
 80138b2:	4618      	mov	r0, r3
 80138b4:	f7fb fd4f 	bl	800f356 <can2_ivt_msg_result_u2_ivt_result_u2_ocs_decode>
 80138b8:	ec53 2b10 	vmov	r2, r3, d0
 80138bc:	4610      	mov	r0, r2
 80138be:	4619      	mov	r1, r3
 80138c0:	f7ed f964 	bl	8000b8c <__aeabi_d2uiz>
 80138c4:	4603      	mov	r3, r0
 80138c6:	b2db      	uxtb	r3, r3
 80138c8:	74bb      	strb	r3, [r7, #18]
       ivt_msg_result_u2.ivt_msg_count_result_u2 = can2_ivt_msg_result_u2_ivt_msg_count_result_u2_decode(can2_rx_ivt_msg_result_u2.ivt_msg_count_result_u2);
 80138ca:	4b13      	ldr	r3, [pc, #76]	; (8013918 <can2_ivt_msg_result_u2_receive+0xe8>)
 80138cc:	795b      	ldrb	r3, [r3, #5]
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7fb fd55 	bl	800f37e <can2_ivt_msg_result_u2_ivt_msg_count_result_u2_decode>
 80138d4:	ec53 2b10 	vmov	r2, r3, d0
 80138d8:	4610      	mov	r0, r2
 80138da:	4619      	mov	r1, r3
 80138dc:	f7ed f956 	bl	8000b8c <__aeabi_d2uiz>
 80138e0:	4603      	mov	r3, r0
 80138e2:	b2db      	uxtb	r3, r3
 80138e4:	707b      	strb	r3, [r7, #1]
       ivt_msg_result_u2.ivt_result_u2 = can2_ivt_msg_result_u2_ivt_result_u2_decode(can2_rx_ivt_msg_result_u2.ivt_result_u2);
 80138e6:	4b0c      	ldr	r3, [pc, #48]	; (8013918 <can2_ivt_msg_result_u2_receive+0xe8>)
 80138e8:	689b      	ldr	r3, [r3, #8]
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7fb fd5b 	bl	800f3a6 <can2_ivt_msg_result_u2_ivt_result_u2_decode>
 80138f0:	eeb0 7a40 	vmov.f32	s14, s0
 80138f4:	eef0 7a60 	vmov.f32	s15, s1
 80138f8:	ed87 7b02 	vstr	d7, [r7, #8]
       can2_ivt_msg_result_u2_rx_callback(&ivt_msg_result_u2);
 80138fc:	463b      	mov	r3, r7
 80138fe:	4618      	mov	r0, r3
 8013900:	f000 fbb2 	bl	8014068 <can2_ivt_msg_result_u2_rx_callback>
       can2_ivt_msg_result_u2_flag = 0;
 8013904:	4b03      	ldr	r3, [pc, #12]	; (8013914 <can2_ivt_msg_result_u2_receive+0xe4>)
 8013906:	2200      	movs	r2, #0
 8013908:	701a      	strb	r2, [r3, #0]
   }
}
 801390a:	bf00      	nop
 801390c:	3718      	adds	r7, #24
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}
 8013912:	bf00      	nop
 8013914:	20000689 	.word	0x20000689
 8013918:	20000644 	.word	0x20000644

0801391c <can2_ivt_msg_result_u1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_receive() {
 801391c:	b580      	push	{r7, lr}
 801391e:	b086      	sub	sp, #24
 8013920:	af00      	add	r7, sp, #0
   if(can2_ivt_msg_result_u1_flag) {
 8013922:	4b37      	ldr	r3, [pc, #220]	; (8013a00 <can2_ivt_msg_result_u1_receive+0xe4>)
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d065      	beq.n	80139f6 <can2_ivt_msg_result_u1_receive+0xda>
       ivt_msg_result_u1_t ivt_msg_result_u1;
       ivt_msg_result_u1.ivt_id_result_u1 = can2_ivt_msg_result_u1_ivt_id_result_u1_decode(can2_rx_ivt_msg_result_u1.ivt_id_result_u1);
 801392a:	4b36      	ldr	r3, [pc, #216]	; (8013a04 <can2_ivt_msg_result_u1_receive+0xe8>)
 801392c:	781b      	ldrb	r3, [r3, #0]
 801392e:	4618      	mov	r0, r3
 8013930:	f7fb fdd3 	bl	800f4da <can2_ivt_msg_result_u1_ivt_id_result_u1_decode>
 8013934:	ec53 2b10 	vmov	r2, r3, d0
 8013938:	4610      	mov	r0, r2
 801393a:	4619      	mov	r1, r3
 801393c:	f7ed f926 	bl	8000b8c <__aeabi_d2uiz>
 8013940:	4603      	mov	r3, r0
 8013942:	b2db      	uxtb	r3, r3
 8013944:	703b      	strb	r3, [r7, #0]
       ivt_msg_result_u1.ivt_result_u1_system_error = can2_ivt_msg_result_u1_ivt_result_u1_system_error_decode(can2_rx_ivt_msg_result_u1.ivt_result_u1_system_error);
 8013946:	4b2f      	ldr	r3, [pc, #188]	; (8013a04 <can2_ivt_msg_result_u1_receive+0xe8>)
 8013948:	785b      	ldrb	r3, [r3, #1]
 801394a:	4618      	mov	r0, r3
 801394c:	f7fb fdd9 	bl	800f502 <can2_ivt_msg_result_u1_ivt_result_u1_system_error_decode>
 8013950:	ec53 2b10 	vmov	r2, r3, d0
 8013954:	4610      	mov	r0, r2
 8013956:	4619      	mov	r1, r3
 8013958:	f7ed f918 	bl	8000b8c <__aeabi_d2uiz>
 801395c:	4603      	mov	r3, r0
 801395e:	b2db      	uxtb	r3, r3
 8013960:	74fb      	strb	r3, [r7, #19]
       ivt_msg_result_u1.ivt_result_u1_measurement_error = can2_ivt_msg_result_u1_ivt_result_u1_measurement_error_decode(can2_rx_ivt_msg_result_u1.ivt_result_u1_measurement_error);
 8013962:	4b28      	ldr	r3, [pc, #160]	; (8013a04 <can2_ivt_msg_result_u1_receive+0xe8>)
 8013964:	789b      	ldrb	r3, [r3, #2]
 8013966:	4618      	mov	r0, r3
 8013968:	f7fb fddf 	bl	800f52a <can2_ivt_msg_result_u1_ivt_result_u1_measurement_error_decode>
 801396c:	ec53 2b10 	vmov	r2, r3, d0
 8013970:	4610      	mov	r0, r2
 8013972:	4619      	mov	r1, r3
 8013974:	f7ed f90a 	bl	8000b8c <__aeabi_d2uiz>
 8013978:	4603      	mov	r3, r0
 801397a:	b2db      	uxtb	r3, r3
 801397c:	747b      	strb	r3, [r7, #17]
       ivt_msg_result_u1.ivt_result_u1_channel_error = can2_ivt_msg_result_u1_ivt_result_u1_channel_error_decode(can2_rx_ivt_msg_result_u1.ivt_result_u1_channel_error);
 801397e:	4b21      	ldr	r3, [pc, #132]	; (8013a04 <can2_ivt_msg_result_u1_receive+0xe8>)
 8013980:	78db      	ldrb	r3, [r3, #3]
 8013982:	4618      	mov	r0, r3
 8013984:	f7fb fde5 	bl	800f552 <can2_ivt_msg_result_u1_ivt_result_u1_channel_error_decode>
 8013988:	ec53 2b10 	vmov	r2, r3, d0
 801398c:	4610      	mov	r0, r2
 801398e:	4619      	mov	r1, r3
 8013990:	f7ed f8fc 	bl	8000b8c <__aeabi_d2uiz>
 8013994:	4603      	mov	r3, r0
 8013996:	b2db      	uxtb	r3, r3
 8013998:	743b      	strb	r3, [r7, #16]
       ivt_msg_result_u1.ivt_result_u1_ocs = can2_ivt_msg_result_u1_ivt_result_u1_ocs_decode(can2_rx_ivt_msg_result_u1.ivt_result_u1_ocs);
 801399a:	4b1a      	ldr	r3, [pc, #104]	; (8013a04 <can2_ivt_msg_result_u1_receive+0xe8>)
 801399c:	791b      	ldrb	r3, [r3, #4]
 801399e:	4618      	mov	r0, r3
 80139a0:	f7fb fdeb 	bl	800f57a <can2_ivt_msg_result_u1_ivt_result_u1_ocs_decode>
 80139a4:	ec53 2b10 	vmov	r2, r3, d0
 80139a8:	4610      	mov	r0, r2
 80139aa:	4619      	mov	r1, r3
 80139ac:	f7ed f8ee 	bl	8000b8c <__aeabi_d2uiz>
 80139b0:	4603      	mov	r3, r0
 80139b2:	b2db      	uxtb	r3, r3
 80139b4:	74bb      	strb	r3, [r7, #18]
       ivt_msg_result_u1.ivt_msg_count_result_u1 = can2_ivt_msg_result_u1_ivt_msg_count_result_u1_decode(can2_rx_ivt_msg_result_u1.ivt_msg_count_result_u1);
 80139b6:	4b13      	ldr	r3, [pc, #76]	; (8013a04 <can2_ivt_msg_result_u1_receive+0xe8>)
 80139b8:	795b      	ldrb	r3, [r3, #5]
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7fb fdf1 	bl	800f5a2 <can2_ivt_msg_result_u1_ivt_msg_count_result_u1_decode>
 80139c0:	ec53 2b10 	vmov	r2, r3, d0
 80139c4:	4610      	mov	r0, r2
 80139c6:	4619      	mov	r1, r3
 80139c8:	f7ed f8e0 	bl	8000b8c <__aeabi_d2uiz>
 80139cc:	4603      	mov	r3, r0
 80139ce:	b2db      	uxtb	r3, r3
 80139d0:	707b      	strb	r3, [r7, #1]
       ivt_msg_result_u1.ivt_result_u1 = can2_ivt_msg_result_u1_ivt_result_u1_decode(can2_rx_ivt_msg_result_u1.ivt_result_u1);
 80139d2:	4b0c      	ldr	r3, [pc, #48]	; (8013a04 <can2_ivt_msg_result_u1_receive+0xe8>)
 80139d4:	689b      	ldr	r3, [r3, #8]
 80139d6:	4618      	mov	r0, r3
 80139d8:	f7fb fdf7 	bl	800f5ca <can2_ivt_msg_result_u1_ivt_result_u1_decode>
 80139dc:	eeb0 7a40 	vmov.f32	s14, s0
 80139e0:	eef0 7a60 	vmov.f32	s15, s1
 80139e4:	ed87 7b02 	vstr	d7, [r7, #8]
       can2_ivt_msg_result_u1_rx_callback(&ivt_msg_result_u1);
 80139e8:	463b      	mov	r3, r7
 80139ea:	4618      	mov	r0, r3
 80139ec:	f001 ff1e 	bl	801582c <can2_ivt_msg_result_u1_rx_callback>
       can2_ivt_msg_result_u1_flag = 0;
 80139f0:	4b03      	ldr	r3, [pc, #12]	; (8013a00 <can2_ivt_msg_result_u1_receive+0xe4>)
 80139f2:	2200      	movs	r2, #0
 80139f4:	701a      	strb	r2, [r3, #0]
   }
}
 80139f6:	bf00      	nop
 80139f8:	3718      	adds	r7, #24
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}
 80139fe:	bf00      	nop
 8013a00:	2000068a 	.word	0x2000068a
 8013a04:	20000650 	.word	0x20000650

08013a08 <can2_ivt_msg_result_i_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_receive() {
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b086      	sub	sp, #24
 8013a0c:	af00      	add	r7, sp, #0
   if(can2_ivt_msg_result_i_flag) {
 8013a0e:	4b37      	ldr	r3, [pc, #220]	; (8013aec <can2_ivt_msg_result_i_receive+0xe4>)
 8013a10:	781b      	ldrb	r3, [r3, #0]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d065      	beq.n	8013ae2 <can2_ivt_msg_result_i_receive+0xda>
       ivt_msg_result_i_t ivt_msg_result_i;
       ivt_msg_result_i.ivt_id_result_i = can2_ivt_msg_result_i_ivt_id_result_i_decode(can2_rx_ivt_msg_result_i.ivt_id_result_i);
 8013a16:	4b36      	ldr	r3, [pc, #216]	; (8013af0 <can2_ivt_msg_result_i_receive+0xe8>)
 8013a18:	781b      	ldrb	r3, [r3, #0]
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7fb fe6f 	bl	800f6fe <can2_ivt_msg_result_i_ivt_id_result_i_decode>
 8013a20:	ec53 2b10 	vmov	r2, r3, d0
 8013a24:	4610      	mov	r0, r2
 8013a26:	4619      	mov	r1, r3
 8013a28:	f7ed f8b0 	bl	8000b8c <__aeabi_d2uiz>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	b2db      	uxtb	r3, r3
 8013a30:	703b      	strb	r3, [r7, #0]
       ivt_msg_result_i.ivt_result_i_system_error = can2_ivt_msg_result_i_ivt_result_i_system_error_decode(can2_rx_ivt_msg_result_i.ivt_result_i_system_error);
 8013a32:	4b2f      	ldr	r3, [pc, #188]	; (8013af0 <can2_ivt_msg_result_i_receive+0xe8>)
 8013a34:	785b      	ldrb	r3, [r3, #1]
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7fb fe75 	bl	800f726 <can2_ivt_msg_result_i_ivt_result_i_system_error_decode>
 8013a3c:	ec53 2b10 	vmov	r2, r3, d0
 8013a40:	4610      	mov	r0, r2
 8013a42:	4619      	mov	r1, r3
 8013a44:	f7ed f8a2 	bl	8000b8c <__aeabi_d2uiz>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	b2db      	uxtb	r3, r3
 8013a4c:	74fb      	strb	r3, [r7, #19]
       ivt_msg_result_i.ivt_result_i_measurement_error = can2_ivt_msg_result_i_ivt_result_i_measurement_error_decode(can2_rx_ivt_msg_result_i.ivt_result_i_measurement_error);
 8013a4e:	4b28      	ldr	r3, [pc, #160]	; (8013af0 <can2_ivt_msg_result_i_receive+0xe8>)
 8013a50:	789b      	ldrb	r3, [r3, #2]
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7fb fe7b 	bl	800f74e <can2_ivt_msg_result_i_ivt_result_i_measurement_error_decode>
 8013a58:	ec53 2b10 	vmov	r2, r3, d0
 8013a5c:	4610      	mov	r0, r2
 8013a5e:	4619      	mov	r1, r3
 8013a60:	f7ed f894 	bl	8000b8c <__aeabi_d2uiz>
 8013a64:	4603      	mov	r3, r0
 8013a66:	b2db      	uxtb	r3, r3
 8013a68:	747b      	strb	r3, [r7, #17]
       ivt_msg_result_i.ivt_result_i_channel_error = can2_ivt_msg_result_i_ivt_result_i_channel_error_decode(can2_rx_ivt_msg_result_i.ivt_result_i_channel_error);
 8013a6a:	4b21      	ldr	r3, [pc, #132]	; (8013af0 <can2_ivt_msg_result_i_receive+0xe8>)
 8013a6c:	78db      	ldrb	r3, [r3, #3]
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7fb fe81 	bl	800f776 <can2_ivt_msg_result_i_ivt_result_i_channel_error_decode>
 8013a74:	ec53 2b10 	vmov	r2, r3, d0
 8013a78:	4610      	mov	r0, r2
 8013a7a:	4619      	mov	r1, r3
 8013a7c:	f7ed f886 	bl	8000b8c <__aeabi_d2uiz>
 8013a80:	4603      	mov	r3, r0
 8013a82:	b2db      	uxtb	r3, r3
 8013a84:	743b      	strb	r3, [r7, #16]
       ivt_msg_result_i.ivt_result_i_ocs = can2_ivt_msg_result_i_ivt_result_i_ocs_decode(can2_rx_ivt_msg_result_i.ivt_result_i_ocs);
 8013a86:	4b1a      	ldr	r3, [pc, #104]	; (8013af0 <can2_ivt_msg_result_i_receive+0xe8>)
 8013a88:	791b      	ldrb	r3, [r3, #4]
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f7fb fe87 	bl	800f79e <can2_ivt_msg_result_i_ivt_result_i_ocs_decode>
 8013a90:	ec53 2b10 	vmov	r2, r3, d0
 8013a94:	4610      	mov	r0, r2
 8013a96:	4619      	mov	r1, r3
 8013a98:	f7ed f878 	bl	8000b8c <__aeabi_d2uiz>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	b2db      	uxtb	r3, r3
 8013aa0:	74bb      	strb	r3, [r7, #18]
       ivt_msg_result_i.ivt_msg_count_result_i = can2_ivt_msg_result_i_ivt_msg_count_result_i_decode(can2_rx_ivt_msg_result_i.ivt_msg_count_result_i);
 8013aa2:	4b13      	ldr	r3, [pc, #76]	; (8013af0 <can2_ivt_msg_result_i_receive+0xe8>)
 8013aa4:	795b      	ldrb	r3, [r3, #5]
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7fb fe8d 	bl	800f7c6 <can2_ivt_msg_result_i_ivt_msg_count_result_i_decode>
 8013aac:	ec53 2b10 	vmov	r2, r3, d0
 8013ab0:	4610      	mov	r0, r2
 8013ab2:	4619      	mov	r1, r3
 8013ab4:	f7ed f86a 	bl	8000b8c <__aeabi_d2uiz>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	b2db      	uxtb	r3, r3
 8013abc:	707b      	strb	r3, [r7, #1]
       ivt_msg_result_i.ivt_result_i = can2_ivt_msg_result_i_ivt_result_i_decode(can2_rx_ivt_msg_result_i.ivt_result_i);
 8013abe:	4b0c      	ldr	r3, [pc, #48]	; (8013af0 <can2_ivt_msg_result_i_receive+0xe8>)
 8013ac0:	689b      	ldr	r3, [r3, #8]
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7fb fe93 	bl	800f7ee <can2_ivt_msg_result_i_ivt_result_i_decode>
 8013ac8:	eeb0 7a40 	vmov.f32	s14, s0
 8013acc:	eef0 7a60 	vmov.f32	s15, s1
 8013ad0:	ed87 7b02 	vstr	d7, [r7, #8]
       can2_ivt_msg_result_i_rx_callback(&ivt_msg_result_i);
 8013ad4:	463b      	mov	r3, r7
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f001 fe78 	bl	80157cc <can2_ivt_msg_result_i_rx_callback>
       can2_ivt_msg_result_i_flag = 0;
 8013adc:	4b03      	ldr	r3, [pc, #12]	; (8013aec <can2_ivt_msg_result_i_receive+0xe4>)
 8013ade:	2200      	movs	r2, #0
 8013ae0:	701a      	strb	r2, [r3, #0]
   }
}
 8013ae2:	bf00      	nop
 8013ae4:	3718      	adds	r7, #24
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
 8013aea:	bf00      	nop
 8013aec:	2000068b 	.word	0x2000068b
 8013af0:	2000065c 	.word	0x2000065c

08013af4 <can2_charger_config_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_charger_config_receive() {
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b08c      	sub	sp, #48	; 0x30
 8013af8:	af00      	add	r7, sp, #0
   if(can2_charger_config_flag) {
 8013afa:	4b26      	ldr	r3, [pc, #152]	; (8013b94 <can2_charger_config_receive+0xa0>)
 8013afc:	781b      	ldrb	r3, [r3, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d043      	beq.n	8013b8a <can2_charger_config_receive+0x96>
       charger_config_t charger_config;
       charger_config.msg_set_voltage_limit = can2_charger_config_msg_set_voltage_limit_decode(can2_rx_charger_config.msg_set_voltage_limit);
 8013b02:	4b25      	ldr	r3, [pc, #148]	; (8013b98 <can2_charger_config_receive+0xa4>)
 8013b04:	885b      	ldrh	r3, [r3, #2]
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7fb f950 	bl	800edac <can2_charger_config_msg_set_voltage_limit_decode>
 8013b0c:	eeb0 7a40 	vmov.f32	s14, s0
 8013b10:	eef0 7a60 	vmov.f32	s15, s1
 8013b14:	ed87 7b08 	vstr	d7, [r7, #32]
       charger_config.msg_set_current_limit = can2_charger_config_msg_set_current_limit_decode(can2_rx_charger_config.msg_set_current_limit);
 8013b18:	4b1f      	ldr	r3, [pc, #124]	; (8013b98 <can2_charger_config_receive+0xa4>)
 8013b1a:	889b      	ldrh	r3, [r3, #4]
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7fb f977 	bl	800ee10 <can2_charger_config_msg_set_current_limit_decode>
 8013b22:	eeb0 7a40 	vmov.f32	s14, s0
 8013b26:	eef0 7a60 	vmov.f32	s15, s1
 8013b2a:	ed87 7b00 	vstr	d7, [r7]
       charger_config.msg_set_power_limit = can2_charger_config_msg_set_power_limit_decode(can2_rx_charger_config.msg_set_power_limit);
 8013b2e:	4b1a      	ldr	r3, [pc, #104]	; (8013b98 <can2_charger_config_receive+0xa4>)
 8013b30:	88db      	ldrh	r3, [r3, #6]
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fb f99b 	bl	800ee6e <can2_charger_config_msg_set_power_limit_decode>
 8013b38:	eeb0 7a40 	vmov.f32	s14, s0
 8013b3c:	eef0 7a60 	vmov.f32	s15, s1
 8013b40:	ed87 7b04 	vstr	d7, [r7, #16]
       charger_config.msg_set_enabled = can2_charger_config_msg_set_enabled_decode(can2_rx_charger_config.msg_set_enabled);
 8013b44:	4b14      	ldr	r3, [pc, #80]	; (8013b98 <can2_charger_config_receive+0xa4>)
 8013b46:	7a1b      	ldrb	r3, [r3, #8]
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f7fb f9b3 	bl	800eeb4 <can2_charger_config_msg_set_enabled_decode>
 8013b4e:	ec53 2b10 	vmov	r2, r3, d0
 8013b52:	4610      	mov	r0, r2
 8013b54:	4619      	mov	r1, r3
 8013b56:	f7ed f819 	bl	8000b8c <__aeabi_d2uiz>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	b2db      	uxtb	r3, r3
 8013b5e:	723b      	strb	r3, [r7, #8]
       charger_config.msg_set_time_out = can2_charger_config_msg_set_time_out_decode(can2_rx_charger_config.msg_set_time_out);
 8013b60:	4b0d      	ldr	r3, [pc, #52]	; (8013b98 <can2_charger_config_receive+0xa4>)
 8013b62:	7a5b      	ldrb	r3, [r3, #9]
 8013b64:	4618      	mov	r0, r3
 8013b66:	f7fb f9c8 	bl	800eefa <can2_charger_config_msg_set_time_out_decode>
 8013b6a:	ec53 2b10 	vmov	r2, r3, d0
 8013b6e:	4610      	mov	r0, r2
 8013b70:	4619      	mov	r1, r3
 8013b72:	f7ed f80b 	bl	8000b8c <__aeabi_d2uiz>
 8013b76:	4603      	mov	r3, r0
 8013b78:	b2db      	uxtb	r3, r3
 8013b7a:	763b      	strb	r3, [r7, #24]
       can2_charger_config_rx_callback(&charger_config);
 8013b7c:	463b      	mov	r3, r7
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f002 f832 	bl	8015be8 <can2_charger_config_rx_callback>
       can2_charger_config_flag = 0;
 8013b84:	4b03      	ldr	r3, [pc, #12]	; (8013b94 <can2_charger_config_receive+0xa0>)
 8013b86:	2200      	movs	r2, #0
 8013b88:	701a      	strb	r2, [r3, #0]
   }
}
 8013b8a:	bf00      	nop
 8013b8c:	3730      	adds	r7, #48	; 0x30
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
 8013b92:	bf00      	nop
 8013b94:	2000068c 	.word	0x2000068c
 8013b98:	20000668 	.word	0x20000668

08013b9c <can2_cc_status_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_cc_status_receive() {
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b082      	sub	sp, #8
 8013ba0:	af00      	add	r7, sp, #0
   if(can2_cc_status_flag) {
 8013ba2:	4b0e      	ldr	r3, [pc, #56]	; (8013bdc <can2_cc_status_receive+0x40>)
 8013ba4:	781b      	ldrb	r3, [r3, #0]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d014      	beq.n	8013bd4 <can2_cc_status_receive+0x38>
       cc_status_t cc_status;
       cc_status.enable_ams_charging = can2_cc_status_enable_ams_charging_decode(can2_rx_cc_status.enable_ams_charging);
 8013baa:	4b0d      	ldr	r3, [pc, #52]	; (8013be0 <can2_cc_status_receive+0x44>)
 8013bac:	781b      	ldrb	r3, [r3, #0]
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7fb f9d3 	bl	800ef5a <can2_cc_status_enable_ams_charging_decode>
 8013bb4:	ec53 2b10 	vmov	r2, r3, d0
 8013bb8:	4610      	mov	r0, r2
 8013bba:	4619      	mov	r1, r3
 8013bbc:	f7ec ffe6 	bl	8000b8c <__aeabi_d2uiz>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	b2db      	uxtb	r3, r3
 8013bc4:	713b      	strb	r3, [r7, #4]
       can2_cc_status_rx_callback(&cc_status);
 8013bc6:	1d3b      	adds	r3, r7, #4
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f001 fe8f 	bl	80158ec <can2_cc_status_rx_callback>
       can2_cc_status_flag = 0;
 8013bce:	4b03      	ldr	r3, [pc, #12]	; (8013bdc <can2_cc_status_receive+0x40>)
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	701a      	strb	r2, [r3, #0]
   }
}
 8013bd4:	bf00      	nop
 8013bd6:	3708      	adds	r7, #8
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}
 8013bdc:	2000068d 	.word	0x2000068d
 8013be0:	20000674 	.word	0x20000674

08013be4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b08a      	sub	sp, #40	; 0x28
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data)) {
 8013bec:	f107 020c 	add.w	r2, r7, #12
 8013bf0:	4b55      	ldr	r3, [pc, #340]	; (8013d48 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 8013bf2:	2100      	movs	r1, #0
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f010 f9f1 	bl	8023fdc <HAL_CAN_GetRxMessage>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	f040 809d 	bne.w	8013d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x158>
       switch(rx_header.StdId) {
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	f240 5224 	movw	r2, #1316	; 0x524
 8013c08:	4293      	cmp	r3, r2
 8013c0a:	f200 8098 	bhi.w	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
 8013c0e:	f5b3 6fa4 	cmp.w	r3, #1312	; 0x520
 8013c12:	d814      	bhi.n	8013c3e <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 8013c14:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013c18:	f000 808a 	beq.w	8013d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>
 8013c1c:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013c20:	f200 808d 	bhi.w	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
 8013c24:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013c28:	f000 8085 	beq.w	8013d36 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
 8013c2c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013c30:	f200 8085 	bhi.w	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
 8013c34:	2b40      	cmp	r3, #64	; 0x40
 8013c36:	d859      	bhi.n	8013cec <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
 8013c38:	2b20      	cmp	r3, #32
 8013c3a:	d20f      	bcs.n	8013c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 8013c3c:	e07f      	b.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
 8013c3e:	f2a3 5321 	subw	r3, r3, #1313	; 0x521
 8013c42:	2b03      	cmp	r3, #3
 8013c44:	d87b      	bhi.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
 8013c46:	a201      	add	r2, pc, #4	; (adr r2, 8013c4c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8013c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c4c:	08013d2b 	.word	0x08013d2b
 8013c50:	08013d25 	.word	0x08013d25
 8013c54:	08013d1f 	.word	0x08013d1f
 8013c58:	08013d19 	.word	0x08013d19
 8013c5c:	3b20      	subs	r3, #32
 8013c5e:	2b20      	cmp	r3, #32
 8013c60:	d86d      	bhi.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
 8013c62:	a201      	add	r2, pc, #4	; (adr r2, 8013c68 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8013c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c68:	08013cf5 	.word	0x08013cf5
 8013c6c:	08013d07 	.word	0x08013d07
 8013c70:	08013d0d 	.word	0x08013d0d
 8013c74:	08013d01 	.word	0x08013d01
 8013c78:	08013d3f 	.word	0x08013d3f
 8013c7c:	08013d3f 	.word	0x08013d3f
 8013c80:	08013d3f 	.word	0x08013d3f
 8013c84:	08013d3f 	.word	0x08013d3f
 8013c88:	08013d3f 	.word	0x08013d3f
 8013c8c:	08013d3f 	.word	0x08013d3f
 8013c90:	08013d3f 	.word	0x08013d3f
 8013c94:	08013d3f 	.word	0x08013d3f
 8013c98:	08013d3f 	.word	0x08013d3f
 8013c9c:	08013d3f 	.word	0x08013d3f
 8013ca0:	08013d3f 	.word	0x08013d3f
 8013ca4:	08013d3f 	.word	0x08013d3f
 8013ca8:	08013d3f 	.word	0x08013d3f
 8013cac:	08013d3f 	.word	0x08013d3f
 8013cb0:	08013d3f 	.word	0x08013d3f
 8013cb4:	08013d3f 	.word	0x08013d3f
 8013cb8:	08013d3f 	.word	0x08013d3f
 8013cbc:	08013d3f 	.word	0x08013d3f
 8013cc0:	08013d3f 	.word	0x08013d3f
 8013cc4:	08013d3f 	.word	0x08013d3f
 8013cc8:	08013d3f 	.word	0x08013d3f
 8013ccc:	08013d3f 	.word	0x08013d3f
 8013cd0:	08013d3f 	.word	0x08013d3f
 8013cd4:	08013d3f 	.word	0x08013d3f
 8013cd8:	08013d3f 	.word	0x08013d3f
 8013cdc:	08013d3f 	.word	0x08013d3f
 8013ce0:	08013d3f 	.word	0x08013d3f
 8013ce4:	08013d3f 	.word	0x08013d3f
 8013ce8:	08013cfb 	.word	0x08013cfb
       switch(rx_header.StdId) {
 8013cec:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 8013cf0:	d00f      	beq.n	8013d12 <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
}
 8013cf2:	e024      	b.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
               can1_ams_status_1_decode();
 8013cf4:	f7fb ff78 	bl	800fbe8 <can1_ams_status_1_decode>
               break;
 8013cf8:	e021      	b.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
               can1_dbu_status_1_decode();
 8013cfa:	f7fb ff89 	bl	800fc10 <can1_dbu_status_1_decode>
               break;
 8013cfe:	e01e      	b.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
               can1_ams_temperatures_decode();
 8013d00:	f7fb ff9a 	bl	800fc38 <can1_ams_temperatures_decode>
               break;
 8013d04:	e01b      	b.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
               can1_ams_cell_voltages_decode();
 8013d06:	f7fb ffab 	bl	800fc60 <can1_ams_cell_voltages_decode>
               break;
 8013d0a:	e018      	b.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
               can1_ams_cell_temperatures_decode();
 8013d0c:	f7fb ffbe 	bl	800fc8c <can1_ams_cell_temperatures_decode>
               break;
 8013d10:	e015      	b.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
               can2_amk1_setpoints_1_decode();
 8013d12:	f7fb ffd1 	bl	800fcb8 <can2_amk1_setpoints_1_decode>
               break;
 8013d16:	e012      	b.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
               can2_ivt_msg_result_u3_decode();
 8013d18:	f7fb ffe2 	bl	800fce0 <can2_ivt_msg_result_u3_decode>
               break;
 8013d1c:	e00f      	b.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
               can2_ivt_msg_result_u2_decode();
 8013d1e:	f7fb fff3 	bl	800fd08 <can2_ivt_msg_result_u2_decode>
               break;
 8013d22:	e00c      	b.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
               can2_ivt_msg_result_u1_decode();
 8013d24:	f7fc f804 	bl	800fd30 <can2_ivt_msg_result_u1_decode>
               break;
 8013d28:	e009      	b.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
               can2_ivt_msg_result_i_decode();
 8013d2a:	f7fc f815 	bl	800fd58 <can2_ivt_msg_result_i_decode>
               break;
 8013d2e:	e006      	b.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
               can2_charger_config_decode();
 8013d30:	f7fc f826 	bl	800fd80 <can2_charger_config_decode>
               break;
 8013d34:	e003      	b.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
               can2_cc_status_decode();
 8013d36:	f7fc f839 	bl	800fdac <can2_cc_status_decode>
               break;
 8013d3a:	e000      	b.n	8013d3e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
    }
 8013d3c:	bf00      	nop
}
 8013d3e:	bf00      	nop
 8013d40:	3728      	adds	r7, #40	; 0x28
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bd80      	pop	{r7, pc}
 8013d46:	bf00      	nop
 8013d48:	200003f8 	.word	0x200003f8

08013d4c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b08a      	sub	sp, #40	; 0x28
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rx_header, rx_data)) {
 8013d54:	f107 020c 	add.w	r2, r7, #12
 8013d58:	4b55      	ldr	r3, [pc, #340]	; (8013eb0 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 8013d5a:	2101      	movs	r1, #1
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	f010 f93d 	bl	8023fdc <HAL_CAN_GetRxMessage>
 8013d62:	4603      	mov	r3, r0
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	f040 809d 	bne.w	8013ea4 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>
       switch(rx_header.StdId) {
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	f240 5224 	movw	r2, #1316	; 0x524
 8013d70:	4293      	cmp	r3, r2
 8013d72:	f200 8098 	bhi.w	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
 8013d76:	f5b3 6fa4 	cmp.w	r3, #1312	; 0x520
 8013d7a:	d814      	bhi.n	8013da6 <HAL_CAN_RxFifo1MsgPendingCallback+0x5a>
 8013d7c:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013d80:	f000 808a 	beq.w	8013e98 <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>
 8013d84:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013d88:	f200 808d 	bhi.w	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
 8013d8c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013d90:	f000 8085 	beq.w	8013e9e <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
 8013d94:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013d98:	f200 8085 	bhi.w	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
 8013d9c:	2b40      	cmp	r3, #64	; 0x40
 8013d9e:	d859      	bhi.n	8013e54 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>
 8013da0:	2b20      	cmp	r3, #32
 8013da2:	d20f      	bcs.n	8013dc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x78>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 8013da4:	e07f      	b.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
 8013da6:	f2a3 5321 	subw	r3, r3, #1313	; 0x521
 8013daa:	2b03      	cmp	r3, #3
 8013dac:	d87b      	bhi.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
 8013dae:	a201      	add	r2, pc, #4	; (adr r2, 8013db4 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8013db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013db4:	08013e93 	.word	0x08013e93
 8013db8:	08013e8d 	.word	0x08013e8d
 8013dbc:	08013e87 	.word	0x08013e87
 8013dc0:	08013e81 	.word	0x08013e81
 8013dc4:	3b20      	subs	r3, #32
 8013dc6:	2b20      	cmp	r3, #32
 8013dc8:	d86d      	bhi.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
 8013dca:	a201      	add	r2, pc, #4	; (adr r2, 8013dd0 <HAL_CAN_RxFifo1MsgPendingCallback+0x84>)
 8013dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dd0:	08013e5d 	.word	0x08013e5d
 8013dd4:	08013e6f 	.word	0x08013e6f
 8013dd8:	08013e75 	.word	0x08013e75
 8013ddc:	08013e69 	.word	0x08013e69
 8013de0:	08013ea7 	.word	0x08013ea7
 8013de4:	08013ea7 	.word	0x08013ea7
 8013de8:	08013ea7 	.word	0x08013ea7
 8013dec:	08013ea7 	.word	0x08013ea7
 8013df0:	08013ea7 	.word	0x08013ea7
 8013df4:	08013ea7 	.word	0x08013ea7
 8013df8:	08013ea7 	.word	0x08013ea7
 8013dfc:	08013ea7 	.word	0x08013ea7
 8013e00:	08013ea7 	.word	0x08013ea7
 8013e04:	08013ea7 	.word	0x08013ea7
 8013e08:	08013ea7 	.word	0x08013ea7
 8013e0c:	08013ea7 	.word	0x08013ea7
 8013e10:	08013ea7 	.word	0x08013ea7
 8013e14:	08013ea7 	.word	0x08013ea7
 8013e18:	08013ea7 	.word	0x08013ea7
 8013e1c:	08013ea7 	.word	0x08013ea7
 8013e20:	08013ea7 	.word	0x08013ea7
 8013e24:	08013ea7 	.word	0x08013ea7
 8013e28:	08013ea7 	.word	0x08013ea7
 8013e2c:	08013ea7 	.word	0x08013ea7
 8013e30:	08013ea7 	.word	0x08013ea7
 8013e34:	08013ea7 	.word	0x08013ea7
 8013e38:	08013ea7 	.word	0x08013ea7
 8013e3c:	08013ea7 	.word	0x08013ea7
 8013e40:	08013ea7 	.word	0x08013ea7
 8013e44:	08013ea7 	.word	0x08013ea7
 8013e48:	08013ea7 	.word	0x08013ea7
 8013e4c:	08013ea7 	.word	0x08013ea7
 8013e50:	08013e63 	.word	0x08013e63
       switch(rx_header.StdId) {
 8013e54:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 8013e58:	d00f      	beq.n	8013e7a <HAL_CAN_RxFifo1MsgPendingCallback+0x12e>
}
 8013e5a:	e024      	b.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
               can1_ams_status_1_decode();
 8013e5c:	f7fb fec4 	bl	800fbe8 <can1_ams_status_1_decode>
               break;
 8013e60:	e021      	b.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
               can1_dbu_status_1_decode();
 8013e62:	f7fb fed5 	bl	800fc10 <can1_dbu_status_1_decode>
               break;
 8013e66:	e01e      	b.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
               can1_ams_temperatures_decode();
 8013e68:	f7fb fee6 	bl	800fc38 <can1_ams_temperatures_decode>
               break;
 8013e6c:	e01b      	b.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
               can1_ams_cell_voltages_decode();
 8013e6e:	f7fb fef7 	bl	800fc60 <can1_ams_cell_voltages_decode>
               break;
 8013e72:	e018      	b.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
               can1_ams_cell_temperatures_decode();
 8013e74:	f7fb ff0a 	bl	800fc8c <can1_ams_cell_temperatures_decode>
               break;
 8013e78:	e015      	b.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
               can2_amk1_setpoints_1_decode();
 8013e7a:	f7fb ff1d 	bl	800fcb8 <can2_amk1_setpoints_1_decode>
               break;
 8013e7e:	e012      	b.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
               can2_ivt_msg_result_u3_decode();
 8013e80:	f7fb ff2e 	bl	800fce0 <can2_ivt_msg_result_u3_decode>
               break;
 8013e84:	e00f      	b.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
               can2_ivt_msg_result_u2_decode();
 8013e86:	f7fb ff3f 	bl	800fd08 <can2_ivt_msg_result_u2_decode>
               break;
 8013e8a:	e00c      	b.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
               can2_ivt_msg_result_u1_decode();
 8013e8c:	f7fb ff50 	bl	800fd30 <can2_ivt_msg_result_u1_decode>
               break;
 8013e90:	e009      	b.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
               can2_ivt_msg_result_i_decode();
 8013e92:	f7fb ff61 	bl	800fd58 <can2_ivt_msg_result_i_decode>
               break;
 8013e96:	e006      	b.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
               can2_charger_config_decode();
 8013e98:	f7fb ff72 	bl	800fd80 <can2_charger_config_decode>
               break;
 8013e9c:	e003      	b.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
               can2_cc_status_decode();
 8013e9e:	f7fb ff85 	bl	800fdac <can2_cc_status_decode>
               break;
 8013ea2:	e000      	b.n	8013ea6 <HAL_CAN_RxFifo1MsgPendingCallback+0x15a>
    }
 8013ea4:	bf00      	nop
}
 8013ea6:	bf00      	nop
 8013ea8:	3728      	adds	r7, #40	; 0x28
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	200003f8 	.word	0x200003f8

08013eb4 <simple_filter>:


void simple_filter() {
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b08a      	sub	sp, #40	; 0x28
 8013eb8:	af00      	add	r7, sp, #0
   CAN_FilterTypeDef filter_config;
   
   filter_config.FilterActivation = ENABLE;
 8013eba:	2301      	movs	r3, #1
 8013ebc:	623b      	str	r3, [r7, #32]
   filter_config.FilterBank = 0;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	617b      	str	r3, [r7, #20]
   filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	61bb      	str	r3, [r7, #24]
   filter_config.FilterIdHigh = 0x0000;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	603b      	str	r3, [r7, #0]
   filter_config.FilterIdLow = 0x0000;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	607b      	str	r3, [r7, #4]
   filter_config.FilterMaskIdHigh = 0x0000;
 8013ece:	2300      	movs	r3, #0
 8013ed0:	60bb      	str	r3, [r7, #8]
   filter_config.FilterMaskIdLow = 0x0000;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	60fb      	str	r3, [r7, #12]
   filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	61fb      	str	r3, [r7, #28]

   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8013eda:	2300      	movs	r3, #0
 8013edc:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan1, &filter_config) != HAL_OK) {
 8013ede:	4b1d      	ldr	r3, [pc, #116]	; (8013f54 <simple_filter+0xa0>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	463a      	mov	r2, r7
 8013ee4:	4611      	mov	r1, r2
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f00f fe02 	bl	8023af0 <HAL_CAN_ConfigFilter>
 8013eec:	4603      	mov	r3, r0
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d001      	beq.n	8013ef6 <simple_filter+0x42>
       Error_Handler();
 8013ef2:	f003 f94d 	bl	8017190 <Error_Handler>
   }
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan1, &filter_config) != HAL_OK) {
 8013efa:	4b16      	ldr	r3, [pc, #88]	; (8013f54 <simple_filter+0xa0>)
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	463a      	mov	r2, r7
 8013f00:	4611      	mov	r1, r2
 8013f02:	4618      	mov	r0, r3
 8013f04:	f00f fdf4 	bl	8023af0 <HAL_CAN_ConfigFilter>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d001      	beq.n	8013f12 <simple_filter+0x5e>
       Error_Handler();
 8013f0e:	f003 f93f 	bl	8017190 <Error_Handler>
   }
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8013f12:	2300      	movs	r3, #0
 8013f14:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan2, &filter_config) != HAL_OK) {
 8013f16:	4b10      	ldr	r3, [pc, #64]	; (8013f58 <simple_filter+0xa4>)
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	463a      	mov	r2, r7
 8013f1c:	4611      	mov	r1, r2
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f00f fde6 	bl	8023af0 <HAL_CAN_ConfigFilter>
 8013f24:	4603      	mov	r3, r0
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d001      	beq.n	8013f2e <simple_filter+0x7a>
       Error_Handler();
 8013f2a:	f003 f931 	bl	8017190 <Error_Handler>
   }
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8013f2e:	2301      	movs	r3, #1
 8013f30:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan2, &filter_config) != HAL_OK) {
 8013f32:	4b09      	ldr	r3, [pc, #36]	; (8013f58 <simple_filter+0xa4>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	463a      	mov	r2, r7
 8013f38:	4611      	mov	r1, r2
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f00f fdd8 	bl	8023af0 <HAL_CAN_ConfigFilter>
 8013f40:	4603      	mov	r3, r0
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d001      	beq.n	8013f4a <simple_filter+0x96>
       Error_Handler();
 8013f46:	f003 f923 	bl	8017190 <Error_Handler>
   }


}
 8013f4a:	bf00      	nop
 8013f4c:	3728      	adds	r7, #40	; 0x28
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}
 8013f52:	bf00      	nop
 8013f54:	20000690 	.word	0x20000690
 8013f58:	20000694 	.word	0x20000694

08013f5c <initialize_CAN>:

void initialize_CAN(CAN_HandleTypeDef* __hcan1, CAN_HandleTypeDef* __hcan2) {
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b082      	sub	sp, #8
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	6039      	str	r1, [r7, #0]
   _hcan1 = __hcan1;
 8013f66:	4a25      	ldr	r2, [pc, #148]	; (8013ffc <initialize_CAN+0xa0>)
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	6013      	str	r3, [r2, #0]

   if (HAL_CAN_Start(_hcan1) != HAL_OK) {
 8013f6c:	4b23      	ldr	r3, [pc, #140]	; (8013ffc <initialize_CAN+0xa0>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	4618      	mov	r0, r3
 8013f72:	f00f fe9d 	bl	8023cb0 <HAL_CAN_Start>
 8013f76:	4603      	mov	r3, r0
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d001      	beq.n	8013f80 <initialize_CAN+0x24>
       Error_Handler();
 8013f7c:	f003 f908 	bl	8017190 <Error_Handler>
   }
   if (HAL_CAN_WakeUp(_hcan1) != HAL_OK) {
 8013f80:	4b1e      	ldr	r3, [pc, #120]	; (8013ffc <initialize_CAN+0xa0>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	4618      	mov	r0, r3
 8013f86:	f00f fed7 	bl	8023d38 <HAL_CAN_WakeUp>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d001      	beq.n	8013f94 <initialize_CAN+0x38>
       Error_Handler();
 8013f90:	f003 f8fe 	bl	8017190 <Error_Handler>
   }
   if (HAL_CAN_ActivateNotification(_hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8013f94:	4b19      	ldr	r3, [pc, #100]	; (8013ffc <initialize_CAN+0xa0>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	2112      	movs	r1, #18
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f010 f930 	bl	8024200 <HAL_CAN_ActivateNotification>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d001      	beq.n	8013faa <initialize_CAN+0x4e>
       Error_Handler();
 8013fa6:	f003 f8f3 	bl	8017190 <Error_Handler>
   }

   _hcan2 = __hcan2;
 8013faa:	4a15      	ldr	r2, [pc, #84]	; (8014000 <initialize_CAN+0xa4>)
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	6013      	str	r3, [r2, #0]

   if (HAL_CAN_Start(_hcan2) != HAL_OK) {
 8013fb0:	4b13      	ldr	r3, [pc, #76]	; (8014000 <initialize_CAN+0xa4>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f00f fe7b 	bl	8023cb0 <HAL_CAN_Start>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d001      	beq.n	8013fc4 <initialize_CAN+0x68>
       Error_Handler();
 8013fc0:	f003 f8e6 	bl	8017190 <Error_Handler>
   }
   if (HAL_CAN_WakeUp(_hcan2) != HAL_OK) {
 8013fc4:	4b0e      	ldr	r3, [pc, #56]	; (8014000 <initialize_CAN+0xa4>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f00f feb5 	bl	8023d38 <HAL_CAN_WakeUp>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d001      	beq.n	8013fd8 <initialize_CAN+0x7c>
       Error_Handler();
 8013fd4:	f003 f8dc 	bl	8017190 <Error_Handler>
   }
   if (HAL_CAN_ActivateNotification(_hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8013fd8:	4b09      	ldr	r3, [pc, #36]	; (8014000 <initialize_CAN+0xa4>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	2112      	movs	r1, #18
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f010 f90e 	bl	8024200 <HAL_CAN_ActivateNotification>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d001      	beq.n	8013fee <initialize_CAN+0x92>
       Error_Handler();
 8013fea:	f003 f8d1 	bl	8017190 <Error_Handler>
   }


   simple_filter();
 8013fee:	f7ff ff61 	bl	8013eb4 <simple_filter>

}
 8013ff2:	bf00      	nop
 8013ff4:	3708      	adds	r7, #8
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}
 8013ffa:	bf00      	nop
 8013ffc:	20000690 	.word	0x20000690
 8014000:	20000694 	.word	0x20000694

08014004 <can1_ams_status_1_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_status_1_rx_callback(ams_status_1_t* ams_status_1) {
 8014004:	b480      	push	{r7}
 8014006:	b083      	sub	sp, #12
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]

}
 801400c:	bf00      	nop
 801400e:	370c      	adds	r7, #12
 8014010:	46bd      	mov	sp, r7
 8014012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014016:	4770      	bx	lr

08014018 <can1_ams_temperatures_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_temperatures_rx_callback(ams_temperatures_t* ams_temperatures) {
 8014018:	b480      	push	{r7}
 801401a:	b083      	sub	sp, #12
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]

}
 8014020:	bf00      	nop
 8014022:	370c      	adds	r7, #12
 8014024:	46bd      	mov	sp, r7
 8014026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402a:	4770      	bx	lr

0801402c <can1_ams_cell_voltages_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_cell_voltages_rx_callback(ams_cell_voltages_t* ams_cell_voltages) {
 801402c:	b480      	push	{r7}
 801402e:	b083      	sub	sp, #12
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]

}
 8014034:	bf00      	nop
 8014036:	370c      	adds	r7, #12
 8014038:	46bd      	mov	sp, r7
 801403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403e:	4770      	bx	lr

08014040 <can1_ams_cell_temperatures_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_cell_temperatures_rx_callback(ams_cell_temperatures_t* ams_cell_temperatures) {
 8014040:	b480      	push	{r7}
 8014042:	b083      	sub	sp, #12
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]

}
 8014048:	bf00      	nop
 801404a:	370c      	adds	r7, #12
 801404c:	46bd      	mov	sp, r7
 801404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014052:	4770      	bx	lr

08014054 <can2_amk1_setpoints_1_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can2_amk1_setpoints_1_rx_callback(amk1_setpoints_1_t* amk1_setpoints_1) {
 8014054:	b480      	push	{r7}
 8014056:	b083      	sub	sp, #12
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]

}
 801405c:	bf00      	nop
 801405e:	370c      	adds	r7, #12
 8014060:	46bd      	mov	sp, r7
 8014062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014066:	4770      	bx	lr

08014068 <can2_ivt_msg_result_u2_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can2_ivt_msg_result_u2_rx_callback(ivt_msg_result_u2_t* ivt_msg_result_u2) {
 8014068:	b480      	push	{r7}
 801406a:	b083      	sub	sp, #12
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]

}
 8014070:	bf00      	nop
 8014072:	370c      	adds	r7, #12
 8014074:	46bd      	mov	sp, r7
 8014076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407a:	4770      	bx	lr

0801407c <inc_res>:
 * @Brief	Increments if true, resets (to zero) otherwise
 * @Param	A conditional statement which evaluates to true or false
 * @Param	A pointer to an integer which may be incremented or reset
 * @Retval	Void
 */
static void inc_res(uint8_t cnd, uint8_t *ptr) {
 801407c:	b480      	push	{r7}
 801407e:	b083      	sub	sp, #12
 8014080:	af00      	add	r7, sp, #0
 8014082:	4603      	mov	r3, r0
 8014084:	6039      	str	r1, [r7, #0]
 8014086:	71fb      	strb	r3, [r7, #7]
	if (cnd) {
 8014088:	79fb      	ldrb	r3, [r7, #7]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d006      	beq.n	801409c <inc_res+0x20>
		ptr[0]++;
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	781b      	ldrb	r3, [r3, #0]
 8014092:	3301      	adds	r3, #1
 8014094:	b2da      	uxtb	r2, r3
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	701a      	strb	r2, [r3, #0]
	} else {
		ptr[0] = 0;
	}
}
 801409a:	e002      	b.n	80140a2 <inc_res+0x26>
		ptr[0] = 0;
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	2200      	movs	r2, #0
 80140a0:	701a      	strb	r2, [r3, #0]
}
 80140a2:	bf00      	nop
 80140a4:	370c      	adds	r7, #12
 80140a6:	46bd      	mov	sp, r7
 80140a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ac:	4770      	bx	lr
	...

080140b0 <COM_voltages_ok>:
 * @Param	A vector of voltages to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_voltages_ok(double *voltages,
		uint16_t sample_constraint) {
 80140b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140b2:	b087      	sub	sp, #28
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	460b      	mov	r3, r1
 80140ba:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 4.19;
 80140bc:	4b2e      	ldr	r3, [pc, #184]	; (8014178 <COM_voltages_ok+0xc8>)
 80140be:	613b      	str	r3, [r7, #16]
	const float lower_boundary = 2.81;
 80140c0:	4b2e      	ldr	r3, [pc, #184]	; (801417c <COM_voltages_ok+0xcc>)
 80140c2:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 126; p++) {
 80140c4:	2300      	movs	r3, #0
 80140c6:	617b      	str	r3, [r7, #20]
 80140c8:	e04d      	b.n	8014166 <COM_voltages_ok+0xb6>
		inc_res(voltages[p] > upper_boundary, &over_voltages[p]);
 80140ca:	697b      	ldr	r3, [r7, #20]
 80140cc:	00db      	lsls	r3, r3, #3
 80140ce:	687a      	ldr	r2, [r7, #4]
 80140d0:	4413      	add	r3, r2
 80140d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80140d6:	6938      	ldr	r0, [r7, #16]
 80140d8:	f7ec fa28 	bl	800052c <__aeabi_f2d>
 80140dc:	4602      	mov	r2, r0
 80140de:	460b      	mov	r3, r1
 80140e0:	2101      	movs	r1, #1
 80140e2:	460e      	mov	r6, r1
 80140e4:	4620      	mov	r0, r4
 80140e6:	4629      	mov	r1, r5
 80140e8:	f7ec fd08 	bl	8000afc <__aeabi_dcmpgt>
 80140ec:	4603      	mov	r3, r0
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d101      	bne.n	80140f6 <COM_voltages_ok+0x46>
 80140f2:	2300      	movs	r3, #0
 80140f4:	461e      	mov	r6, r3
 80140f6:	b2f3      	uxtb	r3, r6
 80140f8:	4618      	mov	r0, r3
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	4a20      	ldr	r2, [pc, #128]	; (8014180 <COM_voltages_ok+0xd0>)
 80140fe:	4413      	add	r3, r2
 8014100:	4619      	mov	r1, r3
 8014102:	f7ff ffbb 	bl	801407c <inc_res>
		inc_res(lower_boundary > voltages[p], &under_voltages[p]);
 8014106:	68f8      	ldr	r0, [r7, #12]
 8014108:	f7ec fa10 	bl	800052c <__aeabi_f2d>
 801410c:	697b      	ldr	r3, [r7, #20]
 801410e:	00db      	lsls	r3, r3, #3
 8014110:	687a      	ldr	r2, [r7, #4]
 8014112:	4413      	add	r3, r2
 8014114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014118:	2401      	movs	r4, #1
 801411a:	f7ec fcef 	bl	8000afc <__aeabi_dcmpgt>
 801411e:	4603      	mov	r3, r0
 8014120:	2b00      	cmp	r3, #0
 8014122:	d101      	bne.n	8014128 <COM_voltages_ok+0x78>
 8014124:	2300      	movs	r3, #0
 8014126:	461c      	mov	r4, r3
 8014128:	b2e3      	uxtb	r3, r4
 801412a:	4618      	mov	r0, r3
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	4a15      	ldr	r2, [pc, #84]	; (8014184 <COM_voltages_ok+0xd4>)
 8014130:	4413      	add	r3, r2
 8014132:	4619      	mov	r1, r3
 8014134:	f7ff ffa2 	bl	801407c <inc_res>

		if (over_voltages[p] > sample_constraint) {
 8014138:	4a11      	ldr	r2, [pc, #68]	; (8014180 <COM_voltages_ok+0xd0>)
 801413a:	697b      	ldr	r3, [r7, #20]
 801413c:	4413      	add	r3, r2
 801413e:	781b      	ldrb	r3, [r3, #0]
 8014140:	b29b      	uxth	r3, r3
 8014142:	887a      	ldrh	r2, [r7, #2]
 8014144:	429a      	cmp	r2, r3
 8014146:	d201      	bcs.n	801414c <COM_voltages_ok+0x9c>
			return ERROR_OVER_VOLTAGE;
 8014148:	2316      	movs	r3, #22
 801414a:	e010      	b.n	801416e <COM_voltages_ok+0xbe>
		}
		if (under_voltages[p] > sample_constraint) {
 801414c:	4a0d      	ldr	r2, [pc, #52]	; (8014184 <COM_voltages_ok+0xd4>)
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	4413      	add	r3, r2
 8014152:	781b      	ldrb	r3, [r3, #0]
 8014154:	b29b      	uxth	r3, r3
 8014156:	887a      	ldrh	r2, [r7, #2]
 8014158:	429a      	cmp	r2, r3
 801415a:	d201      	bcs.n	8014160 <COM_voltages_ok+0xb0>
			return ERROR_UNDER_VOLTAGE;
 801415c:	2315      	movs	r3, #21
 801415e:	e006      	b.n	801416e <COM_voltages_ok+0xbe>
	for (int p = 0; p < 126; p++) {
 8014160:	697b      	ldr	r3, [r7, #20]
 8014162:	3301      	adds	r3, #1
 8014164:	617b      	str	r3, [r7, #20]
 8014166:	697b      	ldr	r3, [r7, #20]
 8014168:	2b7d      	cmp	r3, #125	; 0x7d
 801416a:	ddae      	ble.n	80140ca <COM_voltages_ok+0x1a>
		}
	}

	return 0;
 801416c:	2300      	movs	r3, #0

}
 801416e:	4618      	mov	r0, r3
 8014170:	371c      	adds	r7, #28
 8014172:	46bd      	mov	sp, r7
 8014174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014176:	bf00      	nop
 8014178:	4086147b 	.word	0x4086147b
 801417c:	4033d70a 	.word	0x4033d70a
 8014180:	200006a8 	.word	0x200006a8
 8014184:	20000728 	.word	0x20000728

08014188 <COM_temperatures_ok>:
 * @Param	A vector of temperatures to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_temperatures_ok(double *temperatures,
		uint16_t sample_constraint) {
 8014188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801418a:	b087      	sub	sp, #28
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
 8014190:	460b      	mov	r3, r1
 8014192:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 60;
 8014194:	4b2e      	ldr	r3, [pc, #184]	; (8014250 <COM_temperatures_ok+0xc8>)
 8014196:	613b      	str	r3, [r7, #16]
	const float lower_boundary = -20;
 8014198:	4b2e      	ldr	r3, [pc, #184]	; (8014254 <COM_temperatures_ok+0xcc>)
 801419a:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 60; p++) {
 801419c:	2300      	movs	r3, #0
 801419e:	617b      	str	r3, [r7, #20]
 80141a0:	e04d      	b.n	801423e <COM_temperatures_ok+0xb6>
		inc_res(temperatures[p] > upper_boundary,
 80141a2:	697b      	ldr	r3, [r7, #20]
 80141a4:	00db      	lsls	r3, r3, #3
 80141a6:	687a      	ldr	r2, [r7, #4]
 80141a8:	4413      	add	r3, r2
 80141aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80141ae:	6938      	ldr	r0, [r7, #16]
 80141b0:	f7ec f9bc 	bl	800052c <__aeabi_f2d>
 80141b4:	4602      	mov	r2, r0
 80141b6:	460b      	mov	r3, r1
 80141b8:	2101      	movs	r1, #1
 80141ba:	460e      	mov	r6, r1
 80141bc:	4620      	mov	r0, r4
 80141be:	4629      	mov	r1, r5
 80141c0:	f7ec fc9c 	bl	8000afc <__aeabi_dcmpgt>
 80141c4:	4603      	mov	r3, r0
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d101      	bne.n	80141ce <COM_temperatures_ok+0x46>
 80141ca:	2300      	movs	r3, #0
 80141cc:	461e      	mov	r6, r3
 80141ce:	b2f3      	uxtb	r3, r6
 80141d0:	4618      	mov	r0, r3
 80141d2:	697b      	ldr	r3, [r7, #20]
 80141d4:	4a20      	ldr	r2, [pc, #128]	; (8014258 <COM_temperatures_ok+0xd0>)
 80141d6:	4413      	add	r3, r2
 80141d8:	4619      	mov	r1, r3
 80141da:	f7ff ff4f 	bl	801407c <inc_res>
				&over_temperatures[p]);
		inc_res(lower_boundary > temperatures[p],
 80141de:	68f8      	ldr	r0, [r7, #12]
 80141e0:	f7ec f9a4 	bl	800052c <__aeabi_f2d>
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	00db      	lsls	r3, r3, #3
 80141e8:	687a      	ldr	r2, [r7, #4]
 80141ea:	4413      	add	r3, r2
 80141ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f0:	2401      	movs	r4, #1
 80141f2:	f7ec fc83 	bl	8000afc <__aeabi_dcmpgt>
 80141f6:	4603      	mov	r3, r0
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d101      	bne.n	8014200 <COM_temperatures_ok+0x78>
 80141fc:	2300      	movs	r3, #0
 80141fe:	461c      	mov	r4, r3
 8014200:	b2e3      	uxtb	r3, r4
 8014202:	4618      	mov	r0, r3
 8014204:	697b      	ldr	r3, [r7, #20]
 8014206:	4a15      	ldr	r2, [pc, #84]	; (801425c <COM_temperatures_ok+0xd4>)
 8014208:	4413      	add	r3, r2
 801420a:	4619      	mov	r1, r3
 801420c:	f7ff ff36 	bl	801407c <inc_res>
				&under_temperatures[p]);

		if (over_temperatures[p] > sample_constraint) {
 8014210:	4a11      	ldr	r2, [pc, #68]	; (8014258 <COM_temperatures_ok+0xd0>)
 8014212:	697b      	ldr	r3, [r7, #20]
 8014214:	4413      	add	r3, r2
 8014216:	781b      	ldrb	r3, [r3, #0]
 8014218:	b29b      	uxth	r3, r3
 801421a:	887a      	ldrh	r2, [r7, #2]
 801421c:	429a      	cmp	r2, r3
 801421e:	d201      	bcs.n	8014224 <COM_temperatures_ok+0x9c>
			return ERROR_OVER_TEMPERATURE;
 8014220:	2318      	movs	r3, #24
 8014222:	e010      	b.n	8014246 <COM_temperatures_ok+0xbe>
		}
		if (under_temperatures[p] > sample_constraint) {
 8014224:	4a0d      	ldr	r2, [pc, #52]	; (801425c <COM_temperatures_ok+0xd4>)
 8014226:	697b      	ldr	r3, [r7, #20]
 8014228:	4413      	add	r3, r2
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	b29b      	uxth	r3, r3
 801422e:	887a      	ldrh	r2, [r7, #2]
 8014230:	429a      	cmp	r2, r3
 8014232:	d201      	bcs.n	8014238 <COM_temperatures_ok+0xb0>
			return ERROR_UNDER_TEMPERATURE;
 8014234:	2317      	movs	r3, #23
 8014236:	e006      	b.n	8014246 <COM_temperatures_ok+0xbe>
	for (int p = 0; p < 60; p++) {
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	3301      	adds	r3, #1
 801423c:	617b      	str	r3, [r7, #20]
 801423e:	697b      	ldr	r3, [r7, #20]
 8014240:	2b3b      	cmp	r3, #59	; 0x3b
 8014242:	ddae      	ble.n	80141a2 <COM_temperatures_ok+0x1a>
		}
	}

	return 0;
 8014244:	2300      	movs	r3, #0

}
 8014246:	4618      	mov	r0, r3
 8014248:	371c      	adds	r7, #28
 801424a:	46bd      	mov	sp, r7
 801424c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801424e:	bf00      	nop
 8014250:	42700000 	.word	0x42700000
 8014254:	c1a00000 	.word	0xc1a00000
 8014258:	200007a8 	.word	0x200007a8
 801425c:	200007e4 	.word	0x200007e4

08014260 <COM_current_ok>:
 * @Param	A single current to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_current_ok(double *current,
		uint16_t sample_constraint) {
 8014260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014262:	b085      	sub	sp, #20
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
 8014268:	460b      	mov	r3, r1
 801426a:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 100;
 801426c:	4b21      	ldr	r3, [pc, #132]	; (80142f4 <COM_current_ok+0x94>)
 801426e:	60fb      	str	r3, [r7, #12]
	const float lower_boundary = -40;
 8014270:	4b21      	ldr	r3, [pc, #132]	; (80142f8 <COM_current_ok+0x98>)
 8014272:	60bb      	str	r3, [r7, #8]

	inc_res(current[0] > upper_boundary, &over_current);
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	e9d3 4500 	ldrd	r4, r5, [r3]
 801427a:	68f8      	ldr	r0, [r7, #12]
 801427c:	f7ec f956 	bl	800052c <__aeabi_f2d>
 8014280:	4602      	mov	r2, r0
 8014282:	460b      	mov	r3, r1
 8014284:	2101      	movs	r1, #1
 8014286:	460e      	mov	r6, r1
 8014288:	4620      	mov	r0, r4
 801428a:	4629      	mov	r1, r5
 801428c:	f7ec fc36 	bl	8000afc <__aeabi_dcmpgt>
 8014290:	4603      	mov	r3, r0
 8014292:	2b00      	cmp	r3, #0
 8014294:	d101      	bne.n	801429a <COM_current_ok+0x3a>
 8014296:	2300      	movs	r3, #0
 8014298:	461e      	mov	r6, r3
 801429a:	b2f3      	uxtb	r3, r6
 801429c:	4917      	ldr	r1, [pc, #92]	; (80142fc <COM_current_ok+0x9c>)
 801429e:	4618      	mov	r0, r3
 80142a0:	f7ff feec 	bl	801407c <inc_res>
	inc_res(lower_boundary > current[0], &under_current);
 80142a4:	68b8      	ldr	r0, [r7, #8]
 80142a6:	f7ec f941 	bl	800052c <__aeabi_f2d>
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b0:	2401      	movs	r4, #1
 80142b2:	f7ec fc23 	bl	8000afc <__aeabi_dcmpgt>
 80142b6:	4603      	mov	r3, r0
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d101      	bne.n	80142c0 <COM_current_ok+0x60>
 80142bc:	2300      	movs	r3, #0
 80142be:	461c      	mov	r4, r3
 80142c0:	b2e3      	uxtb	r3, r4
 80142c2:	490f      	ldr	r1, [pc, #60]	; (8014300 <COM_current_ok+0xa0>)
 80142c4:	4618      	mov	r0, r3
 80142c6:	f7ff fed9 	bl	801407c <inc_res>

	if (over_current > sample_constraint) {
 80142ca:	4b0c      	ldr	r3, [pc, #48]	; (80142fc <COM_current_ok+0x9c>)
 80142cc:	781b      	ldrb	r3, [r3, #0]
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	887a      	ldrh	r2, [r7, #2]
 80142d2:	429a      	cmp	r2, r3
 80142d4:	d201      	bcs.n	80142da <COM_current_ok+0x7a>
		return ERROR_OVER_CURRENT;
 80142d6:	2320      	movs	r3, #32
 80142d8:	e008      	b.n	80142ec <COM_current_ok+0x8c>
	}
	if (under_current > sample_constraint) {
 80142da:	4b09      	ldr	r3, [pc, #36]	; (8014300 <COM_current_ok+0xa0>)
 80142dc:	781b      	ldrb	r3, [r3, #0]
 80142de:	b29b      	uxth	r3, r3
 80142e0:	887a      	ldrh	r2, [r7, #2]
 80142e2:	429a      	cmp	r2, r3
 80142e4:	d201      	bcs.n	80142ea <COM_current_ok+0x8a>
		return ERROR_UNDER_CURRENT;
 80142e6:	231f      	movs	r3, #31
 80142e8:	e000      	b.n	80142ec <COM_current_ok+0x8c>
	}

	return 0;
 80142ea:	2300      	movs	r3, #0

}
 80142ec:	4618      	mov	r0, r3
 80142ee:	3714      	adds	r7, #20
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142f4:	42c80000 	.word	0x42c80000
 80142f8:	c2200000 	.word	0xc2200000
 80142fc:	20000820 	.word	0x20000820
 8014300:	20000821 	.word	0x20000821

08014304 <FAN_initialize>:
#include "main.h"
#include "programme_data.h"

#include "FAN.h"

void FAN_initialize(TIM_HandleTypeDef *htim) {
 8014304:	b580      	push	{r7, lr}
 8014306:	b084      	sub	sp, #16
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
	const float frequency = 1000;
 801430c:	4b10      	ldr	r3, [pc, #64]	; (8014350 <FAN_initialize+0x4c>)
 801430e:	60fb      	str	r3, [r7, #12]

	htim->Instance->ARR = 65535 / frequency;
 8014310:	eddf 6a10 	vldr	s13, [pc, #64]	; 8014354 <FAN_initialize+0x50>
 8014314:	ed97 7a03 	vldr	s14, [r7, #12]
 8014318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014324:	ee17 2a90 	vmov	r2, s15
 8014328:	62da      	str	r2, [r3, #44]	; 0x2c
	htim->Instance->CCR3 = htim->Instance->ARR / 2;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	0852      	lsrs	r2, r2, #1
 8014336:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	2200      	movs	r2, #0
 801433e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8014340:	2108      	movs	r1, #8
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	f012 fb80 	bl	8026a48 <HAL_TIM_PWM_Start>

}
 8014348:	bf00      	nop
 801434a:	3710      	adds	r7, #16
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}
 8014350:	447a0000 	.word	0x447a0000
 8014354:	477fff00 	.word	0x477fff00

08014358 <FAN_duty_cycle>:

void FAN_duty_cycle(TIM_HandleTypeDef *htim, float duty_cycle) {
 8014358:	b480      	push	{r7}
 801435a:	b083      	sub	sp, #12
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
 8014360:	ed87 0a00 	vstr	s0, [r7]
	if (duty_cycle < 0) {
 8014364:	edd7 7a00 	vldr	s15, [r7]
 8014368:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801436c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014370:	d502      	bpl.n	8014378 <FAN_duty_cycle+0x20>
		duty_cycle = 0;
 8014372:	f04f 0300 	mov.w	r3, #0
 8014376:	603b      	str	r3, [r7, #0]
	}
	if (100 < duty_cycle) {
 8014378:	edd7 7a00 	vldr	s15, [r7]
 801437c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80143d0 <FAN_duty_cycle+0x78>
 8014380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014388:	dd01      	ble.n	801438e <FAN_duty_cycle+0x36>
		duty_cycle = 100;
 801438a:	4b12      	ldr	r3, [pc, #72]	; (80143d4 <FAN_duty_cycle+0x7c>)
 801438c:	603b      	str	r3, [r7, #0]
	}

	htim->Instance->CCR3 = (duty_cycle / 100) * htim->Instance->ARR;
 801438e:	edd7 7a00 	vldr	s15, [r7]
 8014392:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80143d0 <FAN_duty_cycle+0x78>
 8014396:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a0:	ee07 3a90 	vmov	s15, r3
 80143a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80143b4:	ee17 2a90 	vmov	r2, s15
 80143b8:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	2200      	movs	r2, #0
 80143c0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80143c2:	bf00      	nop
 80143c4:	370c      	adds	r7, #12
 80143c6:	46bd      	mov	sp, r7
 80143c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143cc:	4770      	bx	lr
 80143ce:	bf00      	nop
 80143d0:	42c80000 	.word	0x42c80000
 80143d4:	42c80000 	.word	0x42c80000

080143d8 <HAL_TIM_IC_CaptureCallback>:
#include "IMD.h"
#include "programme_data.h"
#include "programme_queues.h"


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80143d8:	b580      	push	{r7, lr}
 80143da:	b084      	sub	sp, #16
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
	float ante = 0;
 80143e0:	f04f 0300 	mov.w	r3, #0
 80143e4:	60fb      	str	r3, [r7, #12]
	float conq = 0;
 80143e6:	f04f 0300 	mov.w	r3, #0
 80143ea:	60bb      	str	r3, [r7, #8]

	if (htim->Instance == TIM2) {
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80143f4:	d135      	bne.n	8014462 <HAL_TIM_IC_CaptureCallback+0x8a>
		ante = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80143f6:	2104      	movs	r1, #4
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	f013 f9bb 	bl	8027774 <HAL_TIM_ReadCapturedValue>
 80143fe:	ee07 0a90 	vmov	s15, r0
 8014402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014406:	edc7 7a03 	vstr	s15, [r7, #12]
		conq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 801440a:	2100      	movs	r1, #0
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f013 f9b1 	bl	8027774 <HAL_TIM_ReadCapturedValue>
 8014412:	ee07 0a90 	vmov	s15, r0
 8014416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801441a:	edc7 7a02 	vstr	s15, [r7, #8]

		IMD.duty_cycle = ante / conq;
 801441e:	ed97 7a03 	vldr	s14, [r7, #12]
 8014422:	edd7 7a02 	vldr	s15, [r7, #8]
 8014426:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801442a:	ee16 0a90 	vmov	r0, s13
 801442e:	f7ec f87d 	bl	800052c <__aeabi_f2d>
 8014432:	4602      	mov	r2, r0
 8014434:	460b      	mov	r3, r1
 8014436:	490d      	ldr	r1, [pc, #52]	; (801446c <HAL_TIM_IC_CaptureCallback+0x94>)
 8014438:	e9c1 2300 	strd	r2, r3, [r1]
		IMD.frequency = 100000000 / (conq + 1);
 801443c:	edd7 7a02 	vldr	s15, [r7, #8]
 8014440:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014444:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014448:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8014470 <HAL_TIM_IC_CaptureCallback+0x98>
 801444c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014450:	ee16 0a90 	vmov	r0, s13
 8014454:	f7ec f86a 	bl	800052c <__aeabi_f2d>
 8014458:	4602      	mov	r2, r0
 801445a:	460b      	mov	r3, r1
 801445c:	4903      	ldr	r1, [pc, #12]	; (801446c <HAL_TIM_IC_CaptureCallback+0x94>)
 801445e:	e9c1 2302 	strd	r2, r3, [r1, #8]

	}
}
 8014462:	bf00      	nop
 8014464:	3710      	adds	r7, #16
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
 801446a:	bf00      	nop
 801446c:	2001a880 	.word	0x2001a880
 8014470:	4cbebc20 	.word	0x4cbebc20

08014474 <initialize_IMD>:

void initialize_IMD(TIM_HandleTypeDef *htim) {
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 4200000;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	4a0b      	ldr	r2, [pc, #44]	; (80144b0 <initialize_IMD+0x3c>)
 8014482:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1) != HAL_OK) {
 8014484:	2100      	movs	r1, #0
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f012 fcdc 	bl	8026e44 <HAL_TIM_IC_Start_IT>
 801448c:	4603      	mov	r3, r0
 801448e:	2b00      	cmp	r3, #0
 8014490:	d001      	beq.n	8014496 <initialize_IMD+0x22>
		Error_Handler();
 8014492:	f002 fe7d 	bl	8017190 <Error_Handler>
	}

	if (HAL_TIM_IC_Start(htim, TIM_CHANNEL_2) != HAL_OK) {
 8014496:	2104      	movs	r1, #4
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f012 fbf7 	bl	8026c8c <HAL_TIM_IC_Start>
 801449e:	4603      	mov	r3, r0
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d001      	beq.n	80144a8 <initialize_IMD+0x34>
		Error_Handler();
 80144a4:	f002 fe74 	bl	8017190 <Error_Handler>
	}
}
 80144a8:	bf00      	nop
 80144aa:	3708      	adds	r7, #8
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd80      	pop	{r7, pc}
 80144b0:	00401640 	.word	0x00401640

080144b4 <pec15_calc>:
 * @param	The data used to calculate the PEC
 * @retval	The 16-bit PEC code
 */
uint16_t pec15_calc(uint8_t len, // Number of bytes that will be used to calculate a PEC
		uint8_t *data  // Array of data that will be used to calculate  a PEC
		) {
 80144b4:	b480      	push	{r7}
 80144b6:	b085      	sub	sp, #20
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	4603      	mov	r3, r0
 80144bc:	6039      	str	r1, [r7, #0]
 80144be:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;                    // initialize the PEC
 80144c0:	2310      	movs	r3, #16
 80144c2:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 80144c4:	2300      	movs	r3, #0
 80144c6:	737b      	strb	r3, [r7, #13]
 80144c8:	e018      	b.n	80144fc <pec15_calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 80144ca:	89fb      	ldrh	r3, [r7, #14]
 80144cc:	09db      	lsrs	r3, r3, #7
 80144ce:	b29a      	uxth	r2, r3
 80144d0:	7b7b      	ldrb	r3, [r7, #13]
 80144d2:	6839      	ldr	r1, [r7, #0]
 80144d4:	440b      	add	r3, r1
 80144d6:	781b      	ldrb	r3, [r3, #0]
 80144d8:	b29b      	uxth	r3, r3
 80144da:	4053      	eors	r3, r2
 80144dc:	b29b      	uxth	r3, r3
 80144de:	b2db      	uxtb	r3, r3
 80144e0:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 80144e2:	89fb      	ldrh	r3, [r7, #14]
 80144e4:	021b      	lsls	r3, r3, #8
 80144e6:	b29a      	uxth	r2, r3
 80144e8:	897b      	ldrh	r3, [r7, #10]
 80144ea:	490b      	ldr	r1, [pc, #44]	; (8014518 <pec15_calc+0x64>)
 80144ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80144f0:	b29b      	uxth	r3, r3
 80144f2:	4053      	eors	r3, r2
 80144f4:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 80144f6:	7b7b      	ldrb	r3, [r7, #13]
 80144f8:	3301      	adds	r3, #1
 80144fa:	737b      	strb	r3, [r7, #13]
 80144fc:	7b7a      	ldrb	r2, [r7, #13]
 80144fe:	79fb      	ldrb	r3, [r7, #7]
 8014500:	429a      	cmp	r2, r3
 8014502:	d3e2      	bcc.n	80144ca <pec15_calc+0x16>
	}
	return (remainder * 2);  // The CRC15 has a 0 in the LSB so the remainder
 8014504:	89fb      	ldrh	r3, [r7, #14]
 8014506:	005b      	lsls	r3, r3, #1
 8014508:	b29b      	uxth	r3, r3
							 // must be multiplied by 2
}
 801450a:	4618      	mov	r0, r3
 801450c:	3714      	adds	r7, #20
 801450e:	46bd      	mov	sp, r7
 8014510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014514:	4770      	bx	lr
 8014516:	bf00      	nop
 8014518:	0802dad8 	.word	0x0802dad8

0801451c <initialize_LTC>:
/*
 * @brief	Set the hspi which LTC uses
 * @param	The hspi to be used
 * @retval	None
 */
void initialize_LTC(SPI_HandleTypeDef *hspi) {
 801451c:	b480      	push	{r7}
 801451e:	b083      	sub	sp, #12
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
	hltc = hspi;
 8014524:	4a04      	ldr	r2, [pc, #16]	; (8014538 <initialize_LTC+0x1c>)
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	6013      	str	r3, [r2, #0]
}
 801452a:	bf00      	nop
 801452c:	370c      	adds	r7, #12
 801452e:	46bd      	mov	sp, r7
 8014530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014534:	4770      	bx	lr
 8014536:	bf00      	nop
 8014538:	2001acc0 	.word	0x2001acc0

0801453c <LTC_CS_select>:

/*
 * @brief	Selects CS
 * @retval	None
 */
void LTC_CS_select(void) {
 801453c:	b580      	push	{r7, lr}
 801453e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 0);
 8014540:	2200      	movs	r2, #0
 8014542:	2110      	movs	r1, #16
 8014544:	4802      	ldr	r0, [pc, #8]	; (8014550 <LTC_CS_select+0x14>)
 8014546:	f010 fead 	bl	80252a4 <HAL_GPIO_WritePin>
}
 801454a:	bf00      	nop
 801454c:	bd80      	pop	{r7, pc}
 801454e:	bf00      	nop
 8014550:	40020800 	.word	0x40020800

08014554 <LTC_CS_deselect>:

/*
 * @brief	Deselects CS
 * @retval	None
 */
void LTC_CS_deselect(void) {
 8014554:	b580      	push	{r7, lr}
 8014556:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 1);
 8014558:	2201      	movs	r2, #1
 801455a:	2110      	movs	r1, #16
 801455c:	4802      	ldr	r0, [pc, #8]	; (8014568 <LTC_CS_deselect+0x14>)
 801455e:	f010 fea1 	bl	80252a4 <HAL_GPIO_WritePin>
}
 8014562:	bf00      	nop
 8014564:	bd80      	pop	{r7, pc}
 8014566:	bf00      	nop
 8014568:	40020800 	.word	0x40020800

0801456c <LTC_wake>:

/*
 * @brief	A helper function which interfaces with SPI. wakes the isoSPI port from sleep
 * @retval	LTC Status
 */
uint8_t LTC_wake() {
 801456c:	b580      	push	{r7, lr}
 801456e:	b082      	sub	sp, #8
 8014570:	af00      	add	r7, sp, #0
	uint16_t pec;

	// This is the ADSTAT command. Chosen for no specific reason
	uint16_t command = 0b0000010101101000;
 8014572:	f44f 63ad 	mov.w	r3, #1384	; 0x568
 8014576:	80fb      	strh	r3, [r7, #6]

	// This is how one would pack the command, calculate the PEC, and the pack the contents.
	LTC_command_buffer[0] = command >> 8;
 8014578:	88fb      	ldrh	r3, [r7, #6]
 801457a:	0a1b      	lsrs	r3, r3, #8
 801457c:	b29b      	uxth	r3, r3
 801457e:	b2da      	uxtb	r2, r3
 8014580:	4b12      	ldr	r3, [pc, #72]	; (80145cc <LTC_wake+0x60>)
 8014582:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8014584:	88fb      	ldrh	r3, [r7, #6]
 8014586:	b2da      	uxtb	r2, r3
 8014588:	4b10      	ldr	r3, [pc, #64]	; (80145cc <LTC_wake+0x60>)
 801458a:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 801458c:	490f      	ldr	r1, [pc, #60]	; (80145cc <LTC_wake+0x60>)
 801458e:	2002      	movs	r0, #2
 8014590:	f7ff ff90 	bl	80144b4 <pec15_calc>
 8014594:	4603      	mov	r3, r0
 8014596:	80bb      	strh	r3, [r7, #4]
	LTC_command_buffer[2] = pec >> 8;
 8014598:	88bb      	ldrh	r3, [r7, #4]
 801459a:	0a1b      	lsrs	r3, r3, #8
 801459c:	b29b      	uxth	r3, r3
 801459e:	b2da      	uxtb	r2, r3
 80145a0:	4b0a      	ldr	r3, [pc, #40]	; (80145cc <LTC_wake+0x60>)
 80145a2:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 80145a4:	88bb      	ldrh	r3, [r7, #4]
 80145a6:	b2da      	uxtb	r2, r3
 80145a8:	4b08      	ldr	r3, [pc, #32]	; (80145cc <LTC_wake+0x60>)
 80145aa:	70da      	strb	r2, [r3, #3]

	// Simply lock the CS before transmitting and/or receiving
	LTC_CS_select();
 80145ac:	f7ff ffc6 	bl	801453c <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 80145b0:	4b07      	ldr	r3, [pc, #28]	; (80145d0 <LTC_wake+0x64>)
 80145b2:	6818      	ldr	r0, [r3, #0]
 80145b4:	2302      	movs	r3, #2
 80145b6:	2204      	movs	r2, #4
 80145b8:	4904      	ldr	r1, [pc, #16]	; (80145cc <LTC_wake+0x60>)
 80145ba:	f011 fba4 	bl	8025d06 <HAL_SPI_Transmit>
	LTC_CS_deselect();
 80145be:	f7ff ffc9 	bl	8014554 <LTC_CS_deselect>

	return 1;
 80145c2:	2301      	movs	r3, #1
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3708      	adds	r7, #8
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}
 80145cc:	2001acb0 	.word	0x2001acb0
 80145d0:	2001acc0 	.word	0x2001acc0

080145d4 <LTC_command>:
 * @brief	A helper function which interfaces with SPI.
 * @param	Wether or not to wake the isoSPI port first
 * @param	Which command to be sent
 * @retval	LTC Status
 */
uint8_t LTC_command(uint8_t wake, uint16_t command) {
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b084      	sub	sp, #16
 80145d8:	af00      	add	r7, sp, #0
 80145da:	4603      	mov	r3, r0
 80145dc:	460a      	mov	r2, r1
 80145de:	71fb      	strb	r3, [r7, #7]
 80145e0:	4613      	mov	r3, r2
 80145e2:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 80145e4:	79fb      	ldrb	r3, [r7, #7]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d006      	beq.n	80145f8 <LTC_command+0x24>
		if (!LTC_wake()) {
 80145ea:	f7ff ffbf 	bl	801456c <LTC_wake>
 80145ee:	4603      	mov	r3, r0
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d101      	bne.n	80145f8 <LTC_command+0x24>
			return 0;
 80145f4:	2300      	movs	r3, #0
 80145f6:	e025      	b.n	8014644 <LTC_command+0x70>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 80145f8:	88bb      	ldrh	r3, [r7, #4]
 80145fa:	0a1b      	lsrs	r3, r3, #8
 80145fc:	b29b      	uxth	r3, r3
 80145fe:	b2da      	uxtb	r2, r3
 8014600:	4b12      	ldr	r3, [pc, #72]	; (801464c <LTC_command+0x78>)
 8014602:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8014604:	88bb      	ldrh	r3, [r7, #4]
 8014606:	b2da      	uxtb	r2, r3
 8014608:	4b10      	ldr	r3, [pc, #64]	; (801464c <LTC_command+0x78>)
 801460a:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 801460c:	490f      	ldr	r1, [pc, #60]	; (801464c <LTC_command+0x78>)
 801460e:	2002      	movs	r0, #2
 8014610:	f7ff ff50 	bl	80144b4 <pec15_calc>
 8014614:	4603      	mov	r3, r0
 8014616:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 8014618:	89fb      	ldrh	r3, [r7, #14]
 801461a:	0a1b      	lsrs	r3, r3, #8
 801461c:	b29b      	uxth	r3, r3
 801461e:	b2da      	uxtb	r2, r3
 8014620:	4b0a      	ldr	r3, [pc, #40]	; (801464c <LTC_command+0x78>)
 8014622:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 8014624:	89fb      	ldrh	r3, [r7, #14]
 8014626:	b2da      	uxtb	r2, r3
 8014628:	4b08      	ldr	r3, [pc, #32]	; (801464c <LTC_command+0x78>)
 801462a:	70da      	strb	r2, [r3, #3]

	LTC_CS_select();
 801462c:	f7ff ff86 	bl	801453c <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8014630:	4b07      	ldr	r3, [pc, #28]	; (8014650 <LTC_command+0x7c>)
 8014632:	6818      	ldr	r0, [r3, #0]
 8014634:	2302      	movs	r3, #2
 8014636:	2204      	movs	r2, #4
 8014638:	4904      	ldr	r1, [pc, #16]	; (801464c <LTC_command+0x78>)
 801463a:	f011 fb64 	bl	8025d06 <HAL_SPI_Transmit>
	LTC_CS_deselect();
 801463e:	f7ff ff89 	bl	8014554 <LTC_CS_deselect>

	return 1;
 8014642:	2301      	movs	r3, #1
}
 8014644:	4618      	mov	r0, r3
 8014646:	3710      	adds	r7, #16
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}
 801464c:	2001acb0 	.word	0x2001acb0
 8014650:	2001acc0 	.word	0x2001acc0

08014654 <LTC_read_command>:
 * @brief	A helper function which interfaces with SPI. Puts received data in LTC_read_buffer
 * @param	Whether or not to wake the isoSPI port first
 * @param	Which command the received data corresponds to
 * @retval	LTC Status
 */
uint8_t LTC_read_command(uint8_t wake, uint16_t command) {
 8014654:	b580      	push	{r7, lr}
 8014656:	b084      	sub	sp, #16
 8014658:	af00      	add	r7, sp, #0
 801465a:	4603      	mov	r3, r0
 801465c:	460a      	mov	r2, r1
 801465e:	71fb      	strb	r3, [r7, #7]
 8014660:	4613      	mov	r3, r2
 8014662:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 8014664:	79fb      	ldrb	r3, [r7, #7]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d006      	beq.n	8014678 <LTC_read_command+0x24>
		if (!LTC_wake()) {
 801466a:	f7ff ff7f 	bl	801456c <LTC_wake>
 801466e:	4603      	mov	r3, r0
 8014670:	2b00      	cmp	r3, #0
 8014672:	d101      	bne.n	8014678 <LTC_read_command+0x24>
			return 0;
 8014674:	2300      	movs	r3, #0
 8014676:	e042      	b.n	80146fe <LTC_read_command+0xaa>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 8014678:	88bb      	ldrh	r3, [r7, #4]
 801467a:	0a1b      	lsrs	r3, r3, #8
 801467c:	b29b      	uxth	r3, r3
 801467e:	b2da      	uxtb	r2, r3
 8014680:	4b21      	ldr	r3, [pc, #132]	; (8014708 <LTC_read_command+0xb4>)
 8014682:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8014684:	88bb      	ldrh	r3, [r7, #4]
 8014686:	b2da      	uxtb	r2, r3
 8014688:	4b1f      	ldr	r3, [pc, #124]	; (8014708 <LTC_read_command+0xb4>)
 801468a:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 801468c:	491e      	ldr	r1, [pc, #120]	; (8014708 <LTC_read_command+0xb4>)
 801468e:	2002      	movs	r0, #2
 8014690:	f7ff ff10 	bl	80144b4 <pec15_calc>
 8014694:	4603      	mov	r3, r0
 8014696:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 8014698:	89fb      	ldrh	r3, [r7, #14]
 801469a:	0a1b      	lsrs	r3, r3, #8
 801469c:	b29b      	uxth	r3, r3
 801469e:	b2da      	uxtb	r2, r3
 80146a0:	4b19      	ldr	r3, [pc, #100]	; (8014708 <LTC_read_command+0xb4>)
 80146a2:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 80146a4:	89fb      	ldrh	r3, [r7, #14]
 80146a6:	b2da      	uxtb	r2, r3
 80146a8:	4b17      	ldr	r3, [pc, #92]	; (8014708 <LTC_read_command+0xb4>)
 80146aa:	70da      	strb	r2, [r3, #3]

	// We receive at the same instance
	LTC_CS_select();
 80146ac:	f7ff ff46 	bl	801453c <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 80146b0:	4b16      	ldr	r3, [pc, #88]	; (801470c <LTC_read_command+0xb8>)
 80146b2:	6818      	ldr	r0, [r3, #0]
 80146b4:	2302      	movs	r3, #2
 80146b6:	2204      	movs	r2, #4
 80146b8:	4913      	ldr	r1, [pc, #76]	; (8014708 <LTC_read_command+0xb4>)
 80146ba:	f011 fb24 	bl	8025d06 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hltc, LTC_read_buffer, 10, LTC_COM_TIMEOUT);
 80146be:	4b13      	ldr	r3, [pc, #76]	; (801470c <LTC_read_command+0xb8>)
 80146c0:	6818      	ldr	r0, [r3, #0]
 80146c2:	2302      	movs	r3, #2
 80146c4:	220a      	movs	r2, #10
 80146c6:	4912      	ldr	r1, [pc, #72]	; (8014710 <LTC_read_command+0xbc>)
 80146c8:	f011 fc59 	bl	8025f7e <HAL_SPI_Receive>
	LTC_CS_deselect();
 80146cc:	f7ff ff42 	bl	8014554 <LTC_CS_deselect>

	// We should make sure that the data is correct
	pec = pec15_calc(8, LTC_read_buffer);
 80146d0:	490f      	ldr	r1, [pc, #60]	; (8014710 <LTC_read_command+0xbc>)
 80146d2:	2008      	movs	r0, #8
 80146d4:	f7ff feee 	bl	80144b4 <pec15_calc>
 80146d8:	4603      	mov	r3, r0
 80146da:	81fb      	strh	r3, [r7, #14]

	// If there is a discrepancy we return an error code
	if (!((((pec >> 8) & 0xff) == LTC_read_buffer[8])
 80146dc:	89fb      	ldrh	r3, [r7, #14]
 80146de:	0a1b      	lsrs	r3, r3, #8
 80146e0:	b29b      	uxth	r3, r3
 80146e2:	b2db      	uxtb	r3, r3
 80146e4:	4a0a      	ldr	r2, [pc, #40]	; (8014710 <LTC_read_command+0xbc>)
 80146e6:	7a12      	ldrb	r2, [r2, #8]
 80146e8:	4293      	cmp	r3, r2
 80146ea:	d105      	bne.n	80146f8 <LTC_read_command+0xa4>
			&& (((pec >> 0) & 0xff) == LTC_read_buffer[9]))) {
 80146ec:	89fb      	ldrh	r3, [r7, #14]
 80146ee:	b2db      	uxtb	r3, r3
 80146f0:	4a07      	ldr	r2, [pc, #28]	; (8014710 <LTC_read_command+0xbc>)
 80146f2:	7a52      	ldrb	r2, [r2, #9]
	if (!((((pec >> 8) & 0xff) == LTC_read_buffer[8])
 80146f4:	4293      	cmp	r3, r2
 80146f6:	d001      	beq.n	80146fc <LTC_read_command+0xa8>
		return 0;
 80146f8:	2300      	movs	r3, #0
 80146fa:	e000      	b.n	80146fe <LTC_read_command+0xaa>
	}

	return 1;
 80146fc:	2301      	movs	r3, #1
}
 80146fe:	4618      	mov	r0, r3
 8014700:	3710      	adds	r7, #16
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}
 8014706:	bf00      	nop
 8014708:	2001acb0 	.word	0x2001acb0
 801470c:	2001acc0 	.word	0x2001acc0
 8014710:	2001b058 	.word	0x2001b058

08014714 <LTC_acquire_data>:
 * @brief	The function which acquires all of the cell temperatures and voltages, and places them in cell_voltages and cell_temperatures
 * @param	Whether or not to wake the isoSPI port beforehand
 * @param	LTC_data_valid[n] is high if the n:th slave has given valid data
 * @retval	LTC Status
 */
uint8_t LTC_acquire_data(uint8_t wake) {
 8014714:	b580      	push	{r7, lr}
 8014716:	b088      	sub	sp, #32
 8014718:	af00      	add	r7, sp, #0
 801471a:	4603      	mov	r3, r0
 801471c:	71fb      	strb	r3, [r7, #7]
	int p, k, i, j, command;

	/* ADCV, MD = 10, PUP = 1, DCP = 0, CH = 000 */
	command = 0b0000001101110000;
 801471e:	f44f 735c 	mov.w	r3, #880	; 0x370
 8014722:	60fb      	str	r3, [r7, #12]

	LTC_command(wake, command);
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	b29a      	uxth	r2, r3
 8014728:	79fb      	ldrb	r3, [r7, #7]
 801472a:	4611      	mov	r1, r2
 801472c:	4618      	mov	r0, r3
 801472e:	f7ff ff51 	bl	80145d4 <LTC_command>

	HAL_Delay(20);
 8014732:	2014      	movs	r0, #20
 8014734:	f00e fb6a 	bl	8022e0c <HAL_Delay>

	/* ADAX : MD = 10, PUP = 1, CH = 000 */
	command = 0b0000010101100000;
 8014738:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 801473c:	60fb      	str	r3, [r7, #12]

	LTC_command(wake, command);
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	b29a      	uxth	r2, r3
 8014742:	79fb      	ldrb	r3, [r7, #7]
 8014744:	4611      	mov	r1, r2
 8014746:	4618      	mov	r0, r3
 8014748:	f7ff ff44 	bl	80145d4 <LTC_command>

	// First we fill the cell_voltage buffer with the integer values
	p = 0;
 801474c:	2300      	movs	r3, #0
 801474e:	61fb      	str	r3, [r7, #28]

	for (k = 0; k < slave_count; k++) { // 12 segments
 8014750:	2300      	movs	r3, #0
 8014752:	61bb      	str	r3, [r7, #24]
 8014754:	e03f      	b.n	80147d6 <LTC_acquire_data+0xc2>
		for (i = 0; i < 6; i++) {
 8014756:	2300      	movs	r3, #0
 8014758:	617b      	str	r3, [r7, #20]
 801475a:	e036      	b.n	80147ca <LTC_acquire_data+0xb6>
			// We use the RDCVA command and increment it every pass to get RDCVB, RDCVC .. RDAUXB
			command = 0b1000000000000100 | (slave_address[k] << 11);
 801475c:	4a25      	ldr	r2, [pc, #148]	; (80147f4 <LTC_acquire_data+0xe0>)
 801475e:	69bb      	ldr	r3, [r7, #24]
 8014760:	4413      	add	r3, r2
 8014762:	781b      	ldrb	r3, [r3, #0]
 8014764:	02db      	lsls	r3, r3, #11
 8014766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801476a:	f043 0304 	orr.w	r3, r3, #4
 801476e:	60fb      	str	r3, [r7, #12]
			command += 2 * i;
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	005b      	lsls	r3, r3, #1
 8014774:	68fa      	ldr	r2, [r7, #12]
 8014776:	4413      	add	r3, r2
 8014778:	60fb      	str	r3, [r7, #12]


			if (!LTC_read_command(0, command)) {
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	b29b      	uxth	r3, r3
 801477e:	4619      	mov	r1, r3
 8014780:	2000      	movs	r0, #0
 8014782:	f7ff ff67 	bl	8014654 <LTC_read_command>
				/* Data wasn't to be read */
				//return 0;

			}

			for (j = 0; j < 3; j++) {
 8014786:	2300      	movs	r3, #0
 8014788:	613b      	str	r3, [r7, #16]
 801478a:	e018      	b.n	80147be <LTC_acquire_data+0xaa>
				LTC_data[p] = LTC_read_buffer[2 * j]
 801478c:	693b      	ldr	r3, [r7, #16]
 801478e:	005b      	lsls	r3, r3, #1
 8014790:	4a19      	ldr	r2, [pc, #100]	; (80147f8 <LTC_acquire_data+0xe4>)
 8014792:	5cd3      	ldrb	r3, [r2, r3]
 8014794:	b21a      	sxth	r2, r3
						| (LTC_read_buffer[2 * j + 1] << 8);
 8014796:	693b      	ldr	r3, [r7, #16]
 8014798:	005b      	lsls	r3, r3, #1
 801479a:	3301      	adds	r3, #1
 801479c:	4916      	ldr	r1, [pc, #88]	; (80147f8 <LTC_acquire_data+0xe4>)
 801479e:	5ccb      	ldrb	r3, [r1, r3]
 80147a0:	021b      	lsls	r3, r3, #8
 80147a2:	b21b      	sxth	r3, r3
 80147a4:	4313      	orrs	r3, r2
 80147a6:	b21b      	sxth	r3, r3
 80147a8:	b299      	uxth	r1, r3
				LTC_data[p] = LTC_read_buffer[2 * j]
 80147aa:	4a14      	ldr	r2, [pc, #80]	; (80147fc <LTC_acquire_data+0xe8>)
 80147ac:	69fb      	ldr	r3, [r7, #28]
 80147ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				p++;
 80147b2:	69fb      	ldr	r3, [r7, #28]
 80147b4:	3301      	adds	r3, #1
 80147b6:	61fb      	str	r3, [r7, #28]
			for (j = 0; j < 3; j++) {
 80147b8:	693b      	ldr	r3, [r7, #16]
 80147ba:	3301      	adds	r3, #1
 80147bc:	613b      	str	r3, [r7, #16]
 80147be:	693b      	ldr	r3, [r7, #16]
 80147c0:	2b02      	cmp	r3, #2
 80147c2:	dde3      	ble.n	801478c <LTC_acquire_data+0x78>
		for (i = 0; i < 6; i++) {
 80147c4:	697b      	ldr	r3, [r7, #20]
 80147c6:	3301      	adds	r3, #1
 80147c8:	617b      	str	r3, [r7, #20]
 80147ca:	697b      	ldr	r3, [r7, #20]
 80147cc:	2b05      	cmp	r3, #5
 80147ce:	ddc5      	ble.n	801475c <LTC_acquire_data+0x48>
	for (k = 0; k < slave_count; k++) { // 12 segments
 80147d0:	69bb      	ldr	r3, [r7, #24]
 80147d2:	3301      	adds	r3, #1
 80147d4:	61bb      	str	r3, [r7, #24]
 80147d6:	230c      	movs	r3, #12
 80147d8:	461a      	mov	r2, r3
 80147da:	69bb      	ldr	r3, [r7, #24]
 80147dc:	4293      	cmp	r3, r2
 80147de:	dbba      	blt.n	8014756 <LTC_acquire_data+0x42>
			}
		}

	}

	if (!LTC_make_voltages()) {
 80147e0:	f000 f80e 	bl	8014800 <LTC_make_voltages>
		/* Data was corrupted, or voltage reference was off */
		//return 0;
	}
	if (!LTC_make_temperatures()) {
 80147e4:	f000 f864 	bl	80148b0 <LTC_make_temperatures>
		/* Data was corrupted, or voltage reference was off */
		//return 0;
	}

	/* Everything is fine ! */
	return 1;
 80147e8:	2301      	movs	r3, #1
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3720      	adds	r7, #32
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
 80147f2:	bf00      	nop
 80147f4:	0802ded8 	.word	0x0802ded8
 80147f8:	2001b058 	.word	0x2001b058
 80147fc:	2001aea8 	.word	0x2001aea8

08014800 <LTC_make_voltages>:

/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_voltages
 * @retval	1 if successful
 */
uint8_t LTC_make_voltages(void) {
 8014800:	b590      	push	{r4, r7, lr}
 8014802:	b083      	sub	sp, #12
 8014804:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;
	p = 0;
 8014806:	2300      	movs	r3, #0
 8014808:	807b      	strh	r3, [r7, #2]

	for (cellstack = 0; cellstack < slave_count; cellstack++) {
 801480a:	2300      	movs	r3, #0
 801480c:	80fb      	strh	r3, [r7, #6]
 801480e:	e038      	b.n	8014882 <LTC_make_voltages+0x82>
		K = slave_cell_count[cellstack];
 8014810:	88fb      	ldrh	r3, [r7, #6]
 8014812:	4a23      	ldr	r2, [pc, #140]	; (80148a0 <LTC_make_voltages+0xa0>)
 8014814:	5cd3      	ldrb	r3, [r2, r3]
 8014816:	803b      	strh	r3, [r7, #0]
		for (k = 0; k < K; k++) {
 8014818:	2300      	movs	r3, #0
 801481a:	80bb      	strh	r3, [r7, #4]
 801481c:	e02a      	b.n	8014874 <LTC_make_voltages+0x74>
			if (LTC_data[18 * cellstack + k] == 0) {
 801481e:	88fa      	ldrh	r2, [r7, #6]
 8014820:	4613      	mov	r3, r2
 8014822:	00db      	lsls	r3, r3, #3
 8014824:	4413      	add	r3, r2
 8014826:	005b      	lsls	r3, r3, #1
				/* The voltage reference is not on */
				//return 0;
			}
			if (LTC_data[18 * cellstack + k] == 0xffff) {
 8014828:	88fa      	ldrh	r2, [r7, #6]
 801482a:	4613      	mov	r3, r2
 801482c:	00db      	lsls	r3, r3, #3
 801482e:	4413      	add	r3, r2
 8014830:	005b      	lsls	r3, r3, #1
				/* The data is corrupted */
				//return 0;
			}

			LTC_voltages[p] = 0.0001 * LTC_data[18 * cellstack + k];
 8014832:	88fa      	ldrh	r2, [r7, #6]
 8014834:	4613      	mov	r3, r2
 8014836:	00db      	lsls	r3, r3, #3
 8014838:	4413      	add	r3, r2
 801483a:	005b      	lsls	r3, r3, #1
 801483c:	461a      	mov	r2, r3
 801483e:	88bb      	ldrh	r3, [r7, #4]
 8014840:	4413      	add	r3, r2
 8014842:	4a18      	ldr	r2, [pc, #96]	; (80148a4 <LTC_make_voltages+0xa4>)
 8014844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014848:	4618      	mov	r0, r3
 801484a:	f7eb fe5d 	bl	8000508 <__aeabi_i2d>
 801484e:	887c      	ldrh	r4, [r7, #2]
 8014850:	a311      	add	r3, pc, #68	; (adr r3, 8014898 <LTC_make_voltages+0x98>)
 8014852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014856:	f7eb fec1 	bl	80005dc <__aeabi_dmul>
 801485a:	4602      	mov	r2, r0
 801485c:	460b      	mov	r3, r1
 801485e:	4812      	ldr	r0, [pc, #72]	; (80148a8 <LTC_make_voltages+0xa8>)
 8014860:	00e1      	lsls	r1, r4, #3
 8014862:	4401      	add	r1, r0
 8014864:	e9c1 2300 	strd	r2, r3, [r1]
			p++;
 8014868:	887b      	ldrh	r3, [r7, #2]
 801486a:	3301      	adds	r3, #1
 801486c:	807b      	strh	r3, [r7, #2]
		for (k = 0; k < K; k++) {
 801486e:	88bb      	ldrh	r3, [r7, #4]
 8014870:	3301      	adds	r3, #1
 8014872:	80bb      	strh	r3, [r7, #4]
 8014874:	88ba      	ldrh	r2, [r7, #4]
 8014876:	883b      	ldrh	r3, [r7, #0]
 8014878:	429a      	cmp	r2, r3
 801487a:	d3d0      	bcc.n	801481e <LTC_make_voltages+0x1e>
	for (cellstack = 0; cellstack < slave_count; cellstack++) {
 801487c:	88fb      	ldrh	r3, [r7, #6]
 801487e:	3301      	adds	r3, #1
 8014880:	80fb      	strh	r3, [r7, #6]
 8014882:	230c      	movs	r3, #12
 8014884:	b29b      	uxth	r3, r3
 8014886:	88fa      	ldrh	r2, [r7, #6]
 8014888:	429a      	cmp	r2, r3
 801488a:	d3c1      	bcc.n	8014810 <LTC_make_voltages+0x10>
		}
	}

	return 1;
 801488c:	2301      	movs	r3, #1
}
 801488e:	4618      	mov	r0, r3
 8014890:	370c      	adds	r7, #12
 8014892:	46bd      	mov	sp, r7
 8014894:	bd90      	pop	{r4, r7, pc}
 8014896:	bf00      	nop
 8014898:	eb1c432d 	.word	0xeb1c432d
 801489c:	3f1a36e2 	.word	0x3f1a36e2
 80148a0:	0802dee4 	.word	0x0802dee4
 80148a4:	2001aea8 	.word	0x2001aea8
 80148a8:	2001a8c0 	.word	0x2001a8c0
 80148ac:	00000000 	.word	0x00000000

080148b0 <LTC_make_temperatures>:

/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_temperatures
 * @retval	1 if successful
 */
uint8_t LTC_make_temperatures(void) {
 80148b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148b4:	b08d      	sub	sp, #52	; 0x34
 80148b6:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;
	double beta = 3500;
 80148b8:	a367      	add	r3, pc, #412	; (adr r3, 8014a58 <LTC_make_temperatures+0x1a8>)
 80148ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148be:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temp = 25 + 273.15;
 80148c2:	a367      	add	r3, pc, #412	; (adr r3, 8014a60 <LTC_make_temperatures+0x1b0>)
 80148c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double R0 = 10000 * exp(-beta / temp);
 80148cc:	6a38      	ldr	r0, [r7, #32]
 80148ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d0:	f083 4100 	eor.w	r1, r3, #2147483648	; 0x80000000
 80148d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80148d8:	f7eb ffaa 	bl	8000830 <__aeabi_ddiv>
 80148dc:	4602      	mov	r2, r0
 80148de:	460b      	mov	r3, r1
 80148e0:	ec43 2b17 	vmov	d7, r2, r3
 80148e4:	eeb0 0a47 	vmov.f32	s0, s14
 80148e8:	eef0 0a67 	vmov.f32	s1, s15
 80148ec:	f018 fb58 	bl	802cfa0 <exp>
 80148f0:	ec51 0b10 	vmov	r0, r1, d0
 80148f4:	a35c      	add	r3, pc, #368	; (adr r3, 8014a68 <LTC_make_temperatures+0x1b8>)
 80148f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148fa:	f7eb fe6f 	bl	80005dc <__aeabi_dmul>
 80148fe:	4602      	mov	r2, r0
 8014900:	460b      	mov	r3, r1
 8014902:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double R = 10000;
 8014906:	a358      	add	r3, pc, #352	; (adr r3, 8014a68 <LTC_make_temperatures+0x1b8>)
 8014908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801490c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	p = 0;
 8014910:	2300      	movs	r3, #0
 8014912:	857b      	strh	r3, [r7, #42]	; 0x2a

	for (cellstack = 0; cellstack < slave_count; cellstack++) {
 8014914:	2300      	movs	r3, #0
 8014916:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8014918:	e089      	b.n	8014a2e <LTC_make_temperatures+0x17e>
		K = 5;
 801491a:	2305      	movs	r3, #5
 801491c:	80fb      	strh	r3, [r7, #6]

		for (k = 0; k < K; k++) {
 801491e:	2300      	movs	r3, #0
 8014920:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8014922:	e07c      	b.n	8014a1e <LTC_make_temperatures+0x16e>
			if (LTC_data[18 * cellstack + k] == 0) {
 8014924:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014926:	4613      	mov	r3, r2
 8014928:	00db      	lsls	r3, r3, #3
 801492a:	4413      	add	r3, r2
 801492c:	005b      	lsls	r3, r3, #1
				/* The voltage reference is not on */
				//return 0;
			}
			if (LTC_data[18 * cellstack + k] == 0xffff) {
 801492e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014930:	4613      	mov	r3, r2
 8014932:	00db      	lsls	r3, r3, #3
 8014934:	4413      	add	r3, r2
 8014936:	005b      	lsls	r3, r3, #1
				/* The data is corrupted */
				//return 0;
			}

			LTC_temperatures[p] = beta
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 8014938:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801493a:	4613      	mov	r3, r2
 801493c:	00db      	lsls	r3, r3, #3
 801493e:	4413      	add	r3, r2
 8014940:	005b      	lsls	r3, r3, #1
 8014942:	f103 020c 	add.w	r2, r3, #12
 8014946:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014948:	4413      	add	r3, r2
 801494a:	4a41      	ldr	r2, [pc, #260]	; (8014a50 <LTC_make_temperatures+0x1a0>)
 801494c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014950:	4618      	mov	r0, r3
 8014952:	f7eb fdd9 	bl	8000508 <__aeabi_i2d>
 8014956:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801495a:	f7eb fe3f 	bl	80005dc <__aeabi_dmul>
 801495e:	4602      	mov	r2, r0
 8014960:	460b      	mov	r3, r1
 8014962:	ec43 2b17 	vmov	d7, r2, r3
 8014966:	eeb0 0a47 	vmov.f32	s0, s14
 801496a:	eef0 0a67 	vmov.f32	s1, s15
 801496e:	f018 fb67 	bl	802d040 <log>
 8014972:	ec59 8b10 	vmov	r8, r9, d0
							- log(
									-R0
 8014976:	693c      	ldr	r4, [r7, #16]
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
											* (LTC_data[18 * cellstack + 12 + k]
 801497e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014980:	4613      	mov	r3, r2
 8014982:	00db      	lsls	r3, r3, #3
 8014984:	4413      	add	r3, r2
 8014986:	005b      	lsls	r3, r3, #1
 8014988:	f103 020c 	add.w	r2, r3, #12
 801498c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801498e:	4413      	add	r3, r2
 8014990:	4a2f      	ldr	r2, [pc, #188]	; (8014a50 <LTC_make_temperatures+0x1a0>)
 8014992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014996:	4619      	mov	r1, r3
													- LTC_data[18 * cellstack
 8014998:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801499a:	4613      	mov	r3, r2
 801499c:	00db      	lsls	r3, r3, #3
 801499e:	4413      	add	r3, r2
 80149a0:	005b      	lsls	r3, r3, #1
															+ 12 + K])))
 80149a2:	f103 020c 	add.w	r2, r3, #12
 80149a6:	88fb      	ldrh	r3, [r7, #6]
 80149a8:	4413      	add	r3, r2
													- LTC_data[18 * cellstack
 80149aa:	4a29      	ldr	r2, [pc, #164]	; (8014a50 <LTC_make_temperatures+0x1a0>)
 80149ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80149b0:	1acb      	subs	r3, r1, r3
							- log(
 80149b2:	4618      	mov	r0, r3
 80149b4:	f7eb fda8 	bl	8000508 <__aeabi_i2d>
 80149b8:	4602      	mov	r2, r0
 80149ba:	460b      	mov	r3, r1
 80149bc:	4620      	mov	r0, r4
 80149be:	4629      	mov	r1, r5
 80149c0:	f7eb fe0c 	bl	80005dc <__aeabi_dmul>
 80149c4:	4602      	mov	r2, r0
 80149c6:	460b      	mov	r3, r1
 80149c8:	ec43 2b17 	vmov	d7, r2, r3
 80149cc:	eeb0 0a47 	vmov.f32	s0, s14
 80149d0:	eef0 0a67 	vmov.f32	s1, s15
 80149d4:	f018 fb34 	bl	802d040 <log>
 80149d8:	ec53 2b10 	vmov	r2, r3, d0
 80149dc:	4640      	mov	r0, r8
 80149de:	4649      	mov	r1, r9
 80149e0:	f7eb fc44 	bl	800026c <__aeabi_dsub>
 80149e4:	4602      	mov	r2, r0
 80149e6:	460b      	mov	r3, r1
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 80149e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80149ec:	f7eb ff20 	bl	8000830 <__aeabi_ddiv>
 80149f0:	4602      	mov	r2, r0
 80149f2:	460b      	mov	r3, r1
 80149f4:	4610      	mov	r0, r2
 80149f6:	4619      	mov	r1, r3
			LTC_temperatures[p] = beta
 80149f8:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
					- 273.15;
 80149fa:	a313      	add	r3, pc, #76	; (adr r3, 8014a48 <LTC_make_temperatures+0x198>)
 80149fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a00:	f7eb fc34 	bl	800026c <__aeabi_dsub>
 8014a04:	4602      	mov	r2, r0
 8014a06:	460b      	mov	r3, r1
			LTC_temperatures[p] = beta
 8014a08:	4812      	ldr	r0, [pc, #72]	; (8014a54 <LTC_make_temperatures+0x1a4>)
 8014a0a:	00f1      	lsls	r1, r6, #3
 8014a0c:	4401      	add	r1, r0
 8014a0e:	e9c1 2300 	strd	r2, r3, [r1]
			p++;
 8014a12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014a14:	3301      	adds	r3, #1
 8014a16:	857b      	strh	r3, [r7, #42]	; 0x2a
		for (k = 0; k < K; k++) {
 8014a18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014a1a:	3301      	adds	r3, #1
 8014a1c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8014a1e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8014a20:	88fb      	ldrh	r3, [r7, #6]
 8014a22:	429a      	cmp	r2, r3
 8014a24:	f4ff af7e 	bcc.w	8014924 <LTC_make_temperatures+0x74>
	for (cellstack = 0; cellstack < slave_count; cellstack++) {
 8014a28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014a2a:	3301      	adds	r3, #1
 8014a2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8014a2e:	230c      	movs	r3, #12
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014a34:	429a      	cmp	r2, r3
 8014a36:	f4ff af70 	bcc.w	801491a <LTC_make_temperatures+0x6a>

		}
	}

	return 1;
 8014a3a:	2301      	movs	r3, #1
}
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	3734      	adds	r7, #52	; 0x34
 8014a40:	46bd      	mov	sp, r7
 8014a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a46:	bf00      	nop
 8014a48:	66666666 	.word	0x66666666
 8014a4c:	40711266 	.word	0x40711266
 8014a50:	2001aea8 	.word	0x2001aea8
 8014a54:	2001acc8 	.word	0x2001acc8
 8014a58:	00000000 	.word	0x00000000
 8014a5c:	40ab5800 	.word	0x40ab5800
 8014a60:	66666666 	.word	0x66666666
 8014a64:	4072a266 	.word	0x4072a266
 8014a68:	00000000 	.word	0x00000000
 8014a6c:	40c38800 	.word	0x40c38800

08014a70 <PID_progress>:
/*
 * @brief	Progress the PID
 * @param	Input at current timestep
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_progress(PID_t *ctrl, float input) {
 8014a70:	b480      	push	{r7}
 8014a72:	b087      	sub	sp, #28
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
 8014a78:	ed87 0a00 	vstr	s0, [r7]
	ctrl->input = input;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	683a      	ldr	r2, [r7, #0]
 8014a80:	605a      	str	r2, [r3, #4]
	ctrl->error = ctrl->input - ctrl->reference;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	ed93 7a01 	vldr	s14, [r3, #4]
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8014a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	edc3 7a00 	vstr	s15, [r3]

	ctrl->output = arm_pid_f32(&(ctrl->controller), ctrl->error);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	f103 0218 	add.w	r2, r3, #24
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	617a      	str	r2, [r7, #20]
 8014aa4:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	ed93 7a00 	vldr	s14, [r3]
 8014aac:	edd7 7a04 	vldr	s15, [r7, #16]
 8014ab0:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8014ab4:	697b      	ldr	r3, [r7, #20]
 8014ab6:	edd3 6a01 	vldr	s13, [r3, #4]
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	edd3 7a03 	vldr	s15, [r3, #12]
 8014ac0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8014ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8014ac8:	697b      	ldr	r3, [r7, #20]
 8014aca:	edd3 6a02 	vldr	s13, [r3, #8]
 8014ace:	697b      	ldr	r3, [r7, #20]
 8014ad0:	edd3 7a04 	vldr	s15, [r3, #16]
 8014ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014adc:	697b      	ldr	r3, [r7, #20]
 8014ade:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8014ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ae6:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	68da      	ldr	r2, [r3, #12]
 8014aee:	697b      	ldr	r3, [r7, #20]
 8014af0:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8014af2:	697b      	ldr	r3, [r7, #20]
 8014af4:	693a      	ldr	r2, [r7, #16]
 8014af6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8014af8:	697b      	ldr	r3, [r7, #20]
 8014afa:	68fa      	ldr	r2, [r7, #12]
 8014afc:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8014afe:	68fa      	ldr	r2, [r7, #12]
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	609a      	str	r2, [r3, #8]

	if (ctrl->output < ctrl->output_lower_bound) {
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	ed93 7a02 	vldr	s14, [r3, #8]
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	edd3 7a05 	vldr	s15, [r3, #20]
 8014b10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b18:	d503      	bpl.n	8014b22 <PID_progress+0xb2>
		ctrl->output = ctrl->output_lower_bound;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	695a      	ldr	r2, [r3, #20]
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	609a      	str	r2, [r3, #8]
	}

	if (ctrl->output_upper_bound < ctrl->output) {
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	ed93 7a04 	vldr	s14, [r3, #16]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8014b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b36:	d503      	bpl.n	8014b40 <PID_progress+0xd0>
		ctrl->output = ctrl->output_upper_bound;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	691a      	ldr	r2, [r3, #16]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	609a      	str	r2, [r3, #8]
	}

	return 1;
 8014b40:	2301      	movs	r3, #1
}
 8014b42:	4618      	mov	r0, r3
 8014b44:	371c      	adds	r7, #28
 8014b46:	46bd      	mov	sp, r7
 8014b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4c:	4770      	bx	lr

08014b4e <PID_initialize>:
 * @param	output upper bound, ex 100 for PWM
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_initialize(PID_t *ctrl, float reference,
		float proportional, float integral, float derivative,
		float output_lower_bound, float output_upper_bound) {
 8014b4e:	b580      	push	{r7, lr}
 8014b50:	b088      	sub	sp, #32
 8014b52:	af00      	add	r7, sp, #0
 8014b54:	61f8      	str	r0, [r7, #28]
 8014b56:	ed87 0a06 	vstr	s0, [r7, #24]
 8014b5a:	edc7 0a05 	vstr	s1, [r7, #20]
 8014b5e:	ed87 1a04 	vstr	s2, [r7, #16]
 8014b62:	edc7 1a03 	vstr	s3, [r7, #12]
 8014b66:	ed87 2a02 	vstr	s4, [r7, #8]
 8014b6a:	edc7 2a01 	vstr	s5, [r7, #4]
	if (output_upper_bound < output_lower_bound) {
 8014b6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8014b72:	edd7 7a02 	vldr	s15, [r7, #8]
 8014b76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b7e:	d501      	bpl.n	8014b84 <PID_initialize+0x36>
		return 0;
 8014b80:	2300      	movs	r3, #0
 8014b82:	e024      	b.n	8014bce <PID_initialize+0x80>
	}

	ctrl->error = 0.;
 8014b84:	69fb      	ldr	r3, [r7, #28]
 8014b86:	f04f 0200 	mov.w	r2, #0
 8014b8a:	601a      	str	r2, [r3, #0]
	ctrl->input = 0.;
 8014b8c:	69fb      	ldr	r3, [r7, #28]
 8014b8e:	f04f 0200 	mov.w	r2, #0
 8014b92:	605a      	str	r2, [r3, #4]
	ctrl->output = 0.;
 8014b94:	69fb      	ldr	r3, [r7, #28]
 8014b96:	f04f 0200 	mov.w	r2, #0
 8014b9a:	609a      	str	r2, [r3, #8]
	ctrl->reference = reference;
 8014b9c:	69fb      	ldr	r3, [r7, #28]
 8014b9e:	69ba      	ldr	r2, [r7, #24]
 8014ba0:	60da      	str	r2, [r3, #12]

	ctrl->output_upper_bound = output_upper_bound;
 8014ba2:	69fb      	ldr	r3, [r7, #28]
 8014ba4:	687a      	ldr	r2, [r7, #4]
 8014ba6:	611a      	str	r2, [r3, #16]
	ctrl->output_lower_bound = output_lower_bound;
 8014ba8:	69fb      	ldr	r3, [r7, #28]
 8014baa:	68ba      	ldr	r2, [r7, #8]
 8014bac:	615a      	str	r2, [r3, #20]

	ctrl->controller.Kp = proportional;
 8014bae:	69fb      	ldr	r3, [r7, #28]
 8014bb0:	697a      	ldr	r2, [r7, #20]
 8014bb2:	631a      	str	r2, [r3, #48]	; 0x30
	ctrl->controller.Ki = integral;
 8014bb4:	69fb      	ldr	r3, [r7, #28]
 8014bb6:	693a      	ldr	r2, [r7, #16]
 8014bb8:	635a      	str	r2, [r3, #52]	; 0x34
	ctrl->controller.Kd = derivative;
 8014bba:	69fb      	ldr	r3, [r7, #28]
 8014bbc:	68fa      	ldr	r2, [r7, #12]
 8014bbe:	639a      	str	r2, [r3, #56]	; 0x38

	arm_pid_init_f32(&(ctrl->controller), 1);
 8014bc0:	69fb      	ldr	r3, [r7, #28]
 8014bc2:	3318      	adds	r3, #24
 8014bc4:	2101      	movs	r1, #1
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f018 f864 	bl	802cc94 <arm_pid_init_f32>

	return 1;
 8014bcc:	2301      	movs	r3, #1
}
 8014bce:	4618      	mov	r0, r3
 8014bd0:	3720      	adds	r7, #32
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}
	...

08014bd8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8014bdc:	4803      	ldr	r0, [pc, #12]	; (8014bec <_cbSendSystemDesc+0x14>)
 8014bde:	f017 fdc5 	bl	802c76c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8014be2:	4803      	ldr	r0, [pc, #12]	; (8014bf0 <_cbSendSystemDesc+0x18>)
 8014be4:	f017 fdc2 	bl	802c76c <SEGGER_SYSVIEW_SendSysDesc>
}
 8014be8:	bf00      	nop
 8014bea:	bd80      	pop	{r7, pc}
 8014bec:	0802d950 	.word	0x0802d950
 8014bf0:	0802d97c 	.word	0x0802d97c

08014bf4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8014bf8:	4b05      	ldr	r3, [pc, #20]	; (8014c10 <SEGGER_SYSVIEW_Conf+0x1c>)
 8014bfa:	4a06      	ldr	r2, [pc, #24]	; (8014c14 <SEGGER_SYSVIEW_Conf+0x20>)
 8014bfc:	4906      	ldr	r1, [pc, #24]	; (8014c18 <SEGGER_SYSVIEW_Conf+0x24>)
 8014bfe:	4806      	ldr	r0, [pc, #24]	; (8014c18 <SEGGER_SYSVIEW_Conf+0x24>)
 8014c00:	f017 f932 	bl	802be68 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8014c04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8014c08:	f017 f972 	bl	802bef0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8014c0c:	bf00      	nop
 8014c0e:	bd80      	pop	{r7, pc}
 8014c10:	08014bd9 	.word	0x08014bd9
 8014c14:	0802def0 	.word	0x0802def0
 8014c18:	07a12000 	.word	0x07a12000

08014c1c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8014c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c1e:	b085      	sub	sp, #20
 8014c20:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8014c22:	2300      	movs	r3, #0
 8014c24:	607b      	str	r3, [r7, #4]
 8014c26:	e048      	b.n	8014cba <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8014c28:	4929      	ldr	r1, [pc, #164]	; (8014cd0 <_cbSendTaskList+0xb4>)
 8014c2a:	687a      	ldr	r2, [r7, #4]
 8014c2c:	4613      	mov	r3, r2
 8014c2e:	009b      	lsls	r3, r3, #2
 8014c30:	4413      	add	r3, r2
 8014c32:	009b      	lsls	r3, r3, #2
 8014c34:	440b      	add	r3, r1
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f015 fb9d 	bl	802a378 <uxTaskGetStackHighWaterMark>
 8014c3e:	4601      	mov	r1, r0
 8014c40:	4823      	ldr	r0, [pc, #140]	; (8014cd0 <_cbSendTaskList+0xb4>)
 8014c42:	687a      	ldr	r2, [r7, #4]
 8014c44:	4613      	mov	r3, r2
 8014c46:	009b      	lsls	r3, r3, #2
 8014c48:	4413      	add	r3, r2
 8014c4a:	009b      	lsls	r3, r3, #2
 8014c4c:	4403      	add	r3, r0
 8014c4e:	3310      	adds	r3, #16
 8014c50:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8014c52:	491f      	ldr	r1, [pc, #124]	; (8014cd0 <_cbSendTaskList+0xb4>)
 8014c54:	687a      	ldr	r2, [r7, #4]
 8014c56:	4613      	mov	r3, r2
 8014c58:	009b      	lsls	r3, r3, #2
 8014c5a:	4413      	add	r3, r2
 8014c5c:	009b      	lsls	r3, r3, #2
 8014c5e:	440b      	add	r3, r1
 8014c60:	6818      	ldr	r0, [r3, #0]
 8014c62:	491b      	ldr	r1, [pc, #108]	; (8014cd0 <_cbSendTaskList+0xb4>)
 8014c64:	687a      	ldr	r2, [r7, #4]
 8014c66:	4613      	mov	r3, r2
 8014c68:	009b      	lsls	r3, r3, #2
 8014c6a:	4413      	add	r3, r2
 8014c6c:	009b      	lsls	r3, r3, #2
 8014c6e:	440b      	add	r3, r1
 8014c70:	3304      	adds	r3, #4
 8014c72:	6819      	ldr	r1, [r3, #0]
 8014c74:	4c16      	ldr	r4, [pc, #88]	; (8014cd0 <_cbSendTaskList+0xb4>)
 8014c76:	687a      	ldr	r2, [r7, #4]
 8014c78:	4613      	mov	r3, r2
 8014c7a:	009b      	lsls	r3, r3, #2
 8014c7c:	4413      	add	r3, r2
 8014c7e:	009b      	lsls	r3, r3, #2
 8014c80:	4423      	add	r3, r4
 8014c82:	3308      	adds	r3, #8
 8014c84:	681c      	ldr	r4, [r3, #0]
 8014c86:	4d12      	ldr	r5, [pc, #72]	; (8014cd0 <_cbSendTaskList+0xb4>)
 8014c88:	687a      	ldr	r2, [r7, #4]
 8014c8a:	4613      	mov	r3, r2
 8014c8c:	009b      	lsls	r3, r3, #2
 8014c8e:	4413      	add	r3, r2
 8014c90:	009b      	lsls	r3, r3, #2
 8014c92:	442b      	add	r3, r5
 8014c94:	330c      	adds	r3, #12
 8014c96:	681d      	ldr	r5, [r3, #0]
 8014c98:	4e0d      	ldr	r6, [pc, #52]	; (8014cd0 <_cbSendTaskList+0xb4>)
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	4613      	mov	r3, r2
 8014c9e:	009b      	lsls	r3, r3, #2
 8014ca0:	4413      	add	r3, r2
 8014ca2:	009b      	lsls	r3, r3, #2
 8014ca4:	4433      	add	r3, r6
 8014ca6:	3310      	adds	r3, #16
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	9300      	str	r3, [sp, #0]
 8014cac:	462b      	mov	r3, r5
 8014cae:	4622      	mov	r2, r4
 8014cb0:	f000 f8b6 	bl	8014e20 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	3301      	adds	r3, #1
 8014cb8:	607b      	str	r3, [r7, #4]
 8014cba:	4b06      	ldr	r3, [pc, #24]	; (8014cd4 <_cbSendTaskList+0xb8>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	687a      	ldr	r2, [r7, #4]
 8014cc0:	429a      	cmp	r2, r3
 8014cc2:	d3b1      	bcc.n	8014c28 <_cbSendTaskList+0xc>
  }
}
 8014cc4:	bf00      	nop
 8014cc6:	bf00      	nop
 8014cc8:	370c      	adds	r7, #12
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	20000824 	.word	0x20000824
 8014cd4:	20000964 	.word	0x20000964

08014cd8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8014cd8:	b5b0      	push	{r4, r5, r7, lr}
 8014cda:	b082      	sub	sp, #8
 8014cdc:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8014cde:	f015 f823 	bl	8029d28 <xTaskGetTickCountFromISR>
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	461a      	mov	r2, r3
 8014ce6:	f04f 0300 	mov.w	r3, #0
 8014cea:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8014cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014cf2:	4602      	mov	r2, r0
 8014cf4:	460b      	mov	r3, r1
 8014cf6:	f04f 0400 	mov.w	r4, #0
 8014cfa:	f04f 0500 	mov.w	r5, #0
 8014cfe:	015d      	lsls	r5, r3, #5
 8014d00:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8014d04:	0154      	lsls	r4, r2, #5
 8014d06:	4622      	mov	r2, r4
 8014d08:	462b      	mov	r3, r5
 8014d0a:	1a12      	subs	r2, r2, r0
 8014d0c:	eb63 0301 	sbc.w	r3, r3, r1
 8014d10:	f04f 0400 	mov.w	r4, #0
 8014d14:	f04f 0500 	mov.w	r5, #0
 8014d18:	009d      	lsls	r5, r3, #2
 8014d1a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8014d1e:	0094      	lsls	r4, r2, #2
 8014d20:	4622      	mov	r2, r4
 8014d22:	462b      	mov	r3, r5
 8014d24:	1812      	adds	r2, r2, r0
 8014d26:	eb41 0303 	adc.w	r3, r1, r3
 8014d2a:	f04f 0000 	mov.w	r0, #0
 8014d2e:	f04f 0100 	mov.w	r1, #0
 8014d32:	00d9      	lsls	r1, r3, #3
 8014d34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014d38:	00d0      	lsls	r0, r2, #3
 8014d3a:	4602      	mov	r2, r0
 8014d3c:	460b      	mov	r3, r1
 8014d3e:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8014d42:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8014d46:	4610      	mov	r0, r2
 8014d48:	4619      	mov	r1, r3
 8014d4a:	3708      	adds	r7, #8
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bdb0      	pop	{r4, r5, r7, pc}

08014d50 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b086      	sub	sp, #24
 8014d54:	af02      	add	r7, sp, #8
 8014d56:	60f8      	str	r0, [r7, #12]
 8014d58:	60b9      	str	r1, [r7, #8]
 8014d5a:	607a      	str	r2, [r7, #4]
 8014d5c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8014d5e:	2205      	movs	r2, #5
 8014d60:	492b      	ldr	r1, [pc, #172]	; (8014e10 <SYSVIEW_AddTask+0xc0>)
 8014d62:	68b8      	ldr	r0, [r7, #8]
 8014d64:	f017 ffe0 	bl	802cd28 <memcmp>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d04b      	beq.n	8014e06 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8014d6e:	4b29      	ldr	r3, [pc, #164]	; (8014e14 <SYSVIEW_AddTask+0xc4>)
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	2b0f      	cmp	r3, #15
 8014d74:	d903      	bls.n	8014d7e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8014d76:	4828      	ldr	r0, [pc, #160]	; (8014e18 <SYSVIEW_AddTask+0xc8>)
 8014d78:	f017 ff30 	bl	802cbdc <SEGGER_SYSVIEW_Warn>
    return;
 8014d7c:	e044      	b.n	8014e08 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8014d7e:	4b25      	ldr	r3, [pc, #148]	; (8014e14 <SYSVIEW_AddTask+0xc4>)
 8014d80:	681a      	ldr	r2, [r3, #0]
 8014d82:	4926      	ldr	r1, [pc, #152]	; (8014e1c <SYSVIEW_AddTask+0xcc>)
 8014d84:	4613      	mov	r3, r2
 8014d86:	009b      	lsls	r3, r3, #2
 8014d88:	4413      	add	r3, r2
 8014d8a:	009b      	lsls	r3, r3, #2
 8014d8c:	440b      	add	r3, r1
 8014d8e:	68fa      	ldr	r2, [r7, #12]
 8014d90:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8014d92:	4b20      	ldr	r3, [pc, #128]	; (8014e14 <SYSVIEW_AddTask+0xc4>)
 8014d94:	681a      	ldr	r2, [r3, #0]
 8014d96:	4921      	ldr	r1, [pc, #132]	; (8014e1c <SYSVIEW_AddTask+0xcc>)
 8014d98:	4613      	mov	r3, r2
 8014d9a:	009b      	lsls	r3, r3, #2
 8014d9c:	4413      	add	r3, r2
 8014d9e:	009b      	lsls	r3, r3, #2
 8014da0:	440b      	add	r3, r1
 8014da2:	3304      	adds	r3, #4
 8014da4:	68ba      	ldr	r2, [r7, #8]
 8014da6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8014da8:	4b1a      	ldr	r3, [pc, #104]	; (8014e14 <SYSVIEW_AddTask+0xc4>)
 8014daa:	681a      	ldr	r2, [r3, #0]
 8014dac:	491b      	ldr	r1, [pc, #108]	; (8014e1c <SYSVIEW_AddTask+0xcc>)
 8014dae:	4613      	mov	r3, r2
 8014db0:	009b      	lsls	r3, r3, #2
 8014db2:	4413      	add	r3, r2
 8014db4:	009b      	lsls	r3, r3, #2
 8014db6:	440b      	add	r3, r1
 8014db8:	3308      	adds	r3, #8
 8014dba:	687a      	ldr	r2, [r7, #4]
 8014dbc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8014dbe:	4b15      	ldr	r3, [pc, #84]	; (8014e14 <SYSVIEW_AddTask+0xc4>)
 8014dc0:	681a      	ldr	r2, [r3, #0]
 8014dc2:	4916      	ldr	r1, [pc, #88]	; (8014e1c <SYSVIEW_AddTask+0xcc>)
 8014dc4:	4613      	mov	r3, r2
 8014dc6:	009b      	lsls	r3, r3, #2
 8014dc8:	4413      	add	r3, r2
 8014dca:	009b      	lsls	r3, r3, #2
 8014dcc:	440b      	add	r3, r1
 8014dce:	330c      	adds	r3, #12
 8014dd0:	683a      	ldr	r2, [r7, #0]
 8014dd2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8014dd4:	4b0f      	ldr	r3, [pc, #60]	; (8014e14 <SYSVIEW_AddTask+0xc4>)
 8014dd6:	681a      	ldr	r2, [r3, #0]
 8014dd8:	4910      	ldr	r1, [pc, #64]	; (8014e1c <SYSVIEW_AddTask+0xcc>)
 8014dda:	4613      	mov	r3, r2
 8014ddc:	009b      	lsls	r3, r3, #2
 8014dde:	4413      	add	r3, r2
 8014de0:	009b      	lsls	r3, r3, #2
 8014de2:	440b      	add	r3, r1
 8014de4:	3310      	adds	r3, #16
 8014de6:	69ba      	ldr	r2, [r7, #24]
 8014de8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8014dea:	4b0a      	ldr	r3, [pc, #40]	; (8014e14 <SYSVIEW_AddTask+0xc4>)
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	3301      	adds	r3, #1
 8014df0:	4a08      	ldr	r2, [pc, #32]	; (8014e14 <SYSVIEW_AddTask+0xc4>)
 8014df2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8014df4:	69bb      	ldr	r3, [r7, #24]
 8014df6:	9300      	str	r3, [sp, #0]
 8014df8:	683b      	ldr	r3, [r7, #0]
 8014dfa:	687a      	ldr	r2, [r7, #4]
 8014dfc:	68b9      	ldr	r1, [r7, #8]
 8014dfe:	68f8      	ldr	r0, [r7, #12]
 8014e00:	f000 f80e 	bl	8014e20 <SYSVIEW_SendTaskInfo>
 8014e04:	e000      	b.n	8014e08 <SYSVIEW_AddTask+0xb8>
    return;
 8014e06:	bf00      	nop

}
 8014e08:	3710      	adds	r7, #16
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	bd80      	pop	{r7, pc}
 8014e0e:	bf00      	nop
 8014e10:	0802d98c 	.word	0x0802d98c
 8014e14:	20000964 	.word	0x20000964
 8014e18:	0802d994 	.word	0x0802d994
 8014e1c:	20000824 	.word	0x20000824

08014e20 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b08a      	sub	sp, #40	; 0x28
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	60f8      	str	r0, [r7, #12]
 8014e28:	60b9      	str	r1, [r7, #8]
 8014e2a:	607a      	str	r2, [r7, #4]
 8014e2c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8014e2e:	f107 0314 	add.w	r3, r7, #20
 8014e32:	2214      	movs	r2, #20
 8014e34:	2100      	movs	r1, #0
 8014e36:	4618      	mov	r0, r3
 8014e38:	f017 ff92 	bl	802cd60 <memset>
  TaskInfo.TaskID     = TaskID;
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8014e48:	683b      	ldr	r3, [r7, #0]
 8014e4a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8014e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e4e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8014e50:	f107 0314 	add.w	r3, r7, #20
 8014e54:	4618      	mov	r0, r3
 8014e56:	f017 fb91 	bl	802c57c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8014e5a:	bf00      	nop
 8014e5c:	3728      	adds	r7, #40	; 0x28
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}
	...

08014e64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b084      	sub	sp, #16
 8014e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8014e6a:	463b      	mov	r3, r7
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	601a      	str	r2, [r3, #0]
 8014e70:	605a      	str	r2, [r3, #4]
 8014e72:	609a      	str	r2, [r3, #8]
 8014e74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8014e76:	4b37      	ldr	r3, [pc, #220]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014e78:	4a37      	ldr	r2, [pc, #220]	; (8014f58 <MX_ADC1_Init+0xf4>)
 8014e7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8014e7c:	4b35      	ldr	r3, [pc, #212]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014e7e:	2200      	movs	r2, #0
 8014e80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8014e82:	4b34      	ldr	r3, [pc, #208]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014e84:	2200      	movs	r2, #0
 8014e86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8014e88:	4b32      	ldr	r3, [pc, #200]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8014e8e:	4b31      	ldr	r3, [pc, #196]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014e90:	2200      	movs	r2, #0
 8014e92:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8014e94:	4b2f      	ldr	r3, [pc, #188]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014e96:	2200      	movs	r2, #0
 8014e98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8014e9c:	4b2d      	ldr	r3, [pc, #180]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8014ea4:	4b2b      	ldr	r3, [pc, #172]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014ea6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014eaa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8014eac:	4b29      	ldr	r3, [pc, #164]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014eae:	2200      	movs	r2, #0
 8014eb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8014eb2:	4b28      	ldr	r3, [pc, #160]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014eb4:	2204      	movs	r2, #4
 8014eb6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8014eb8:	4b26      	ldr	r3, [pc, #152]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014eba:	2201      	movs	r2, #1
 8014ebc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8014ec0:	4b24      	ldr	r3, [pc, #144]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014ec2:	2201      	movs	r2, #1
 8014ec4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8014ec6:	4823      	ldr	r0, [pc, #140]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014ec8:	f00d ffc4 	bl	8022e54 <HAL_ADC_Init>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d001      	beq.n	8014ed6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8014ed2:	f002 f95d 	bl	8017190 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8014ed6:	2301      	movs	r3, #1
 8014ed8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8014eda:	2301      	movs	r3, #1
 8014edc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8014ede:	2302      	movs	r3, #2
 8014ee0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014ee2:	463b      	mov	r3, r7
 8014ee4:	4619      	mov	r1, r3
 8014ee6:	481b      	ldr	r0, [pc, #108]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014ee8:	f00e fa5c 	bl	80233a4 <HAL_ADC_ConfigChannel>
 8014eec:	4603      	mov	r3, r0
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d001      	beq.n	8014ef6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8014ef2:	f002 f94d 	bl	8017190 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8014ef6:	2302      	movs	r3, #2
 8014ef8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8014efa:	2302      	movs	r3, #2
 8014efc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014efe:	463b      	mov	r3, r7
 8014f00:	4619      	mov	r1, r3
 8014f02:	4814      	ldr	r0, [pc, #80]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014f04:	f00e fa4e 	bl	80233a4 <HAL_ADC_ConfigChannel>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d001      	beq.n	8014f12 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8014f0e:	f002 f93f 	bl	8017190 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8014f12:	2303      	movs	r3, #3
 8014f14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8014f16:	2303      	movs	r3, #3
 8014f18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014f1a:	463b      	mov	r3, r7
 8014f1c:	4619      	mov	r1, r3
 8014f1e:	480d      	ldr	r0, [pc, #52]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014f20:	f00e fa40 	bl	80233a4 <HAL_ADC_ConfigChannel>
 8014f24:	4603      	mov	r3, r0
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d001      	beq.n	8014f2e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8014f2a:	f002 f931 	bl	8017190 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8014f2e:	2304      	movs	r3, #4
 8014f30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8014f32:	2304      	movs	r3, #4
 8014f34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014f36:	463b      	mov	r3, r7
 8014f38:	4619      	mov	r1, r3
 8014f3a:	4806      	ldr	r0, [pc, #24]	; (8014f54 <MX_ADC1_Init+0xf0>)
 8014f3c:	f00e fa32 	bl	80233a4 <HAL_ADC_ConfigChannel>
 8014f40:	4603      	mov	r3, r0
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d001      	beq.n	8014f4a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8014f46:	f002 f923 	bl	8017190 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8014f4a:	bf00      	nop
 8014f4c:	3710      	adds	r7, #16
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}
 8014f52:	bf00      	nop
 8014f54:	2001b0c4 	.word	0x2001b0c4
 8014f58:	40012000 	.word	0x40012000

08014f5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b08a      	sub	sp, #40	; 0x28
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014f64:	f107 0314 	add.w	r3, r7, #20
 8014f68:	2200      	movs	r2, #0
 8014f6a:	601a      	str	r2, [r3, #0]
 8014f6c:	605a      	str	r2, [r3, #4]
 8014f6e:	609a      	str	r2, [r3, #8]
 8014f70:	60da      	str	r2, [r3, #12]
 8014f72:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	4a33      	ldr	r2, [pc, #204]	; (8015048 <HAL_ADC_MspInit+0xec>)
 8014f7a:	4293      	cmp	r3, r2
 8014f7c:	d160      	bne.n	8015040 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8014f7e:	2300      	movs	r3, #0
 8014f80:	613b      	str	r3, [r7, #16]
 8014f82:	4b32      	ldr	r3, [pc, #200]	; (801504c <HAL_ADC_MspInit+0xf0>)
 8014f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f86:	4a31      	ldr	r2, [pc, #196]	; (801504c <HAL_ADC_MspInit+0xf0>)
 8014f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8014f8e:	4b2f      	ldr	r3, [pc, #188]	; (801504c <HAL_ADC_MspInit+0xf0>)
 8014f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014f96:	613b      	str	r3, [r7, #16]
 8014f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	60fb      	str	r3, [r7, #12]
 8014f9e:	4b2b      	ldr	r3, [pc, #172]	; (801504c <HAL_ADC_MspInit+0xf0>)
 8014fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fa2:	4a2a      	ldr	r2, [pc, #168]	; (801504c <HAL_ADC_MspInit+0xf0>)
 8014fa4:	f043 0301 	orr.w	r3, r3, #1
 8014fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8014faa:	4b28      	ldr	r3, [pc, #160]	; (801504c <HAL_ADC_MspInit+0xf0>)
 8014fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fae:	f003 0301 	and.w	r3, r3, #1
 8014fb2:	60fb      	str	r3, [r7, #12]
 8014fb4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = precharge_resistor_temperature_Pin|fuse_resistor_temperature_Pin|aux_temp1_Pin|aux_temp2_Pin;
 8014fb6:	231e      	movs	r3, #30
 8014fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014fba:	2303      	movs	r3, #3
 8014fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014fc2:	f107 0314 	add.w	r3, r7, #20
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	4821      	ldr	r0, [pc, #132]	; (8015050 <HAL_ADC_MspInit+0xf4>)
 8014fca:	f00f ffb7 	bl	8024f3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8014fce:	4b21      	ldr	r3, [pc, #132]	; (8015054 <HAL_ADC_MspInit+0xf8>)
 8014fd0:	4a21      	ldr	r2, [pc, #132]	; (8015058 <HAL_ADC_MspInit+0xfc>)
 8014fd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8014fd4:	4b1f      	ldr	r3, [pc, #124]	; (8015054 <HAL_ADC_MspInit+0xf8>)
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014fda:	4b1e      	ldr	r3, [pc, #120]	; (8015054 <HAL_ADC_MspInit+0xf8>)
 8014fdc:	2200      	movs	r2, #0
 8014fde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8014fe0:	4b1c      	ldr	r3, [pc, #112]	; (8015054 <HAL_ADC_MspInit+0xf8>)
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8014fe6:	4b1b      	ldr	r3, [pc, #108]	; (8015054 <HAL_ADC_MspInit+0xf8>)
 8014fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014fec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8014fee:	4b19      	ldr	r3, [pc, #100]	; (8015054 <HAL_ADC_MspInit+0xf8>)
 8014ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014ff4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8014ff6:	4b17      	ldr	r3, [pc, #92]	; (8015054 <HAL_ADC_MspInit+0xf8>)
 8014ff8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014ffc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8014ffe:	4b15      	ldr	r3, [pc, #84]	; (8015054 <HAL_ADC_MspInit+0xf8>)
 8015000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015004:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8015006:	4b13      	ldr	r3, [pc, #76]	; (8015054 <HAL_ADC_MspInit+0xf8>)
 8015008:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801500c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801500e:	4b11      	ldr	r3, [pc, #68]	; (8015054 <HAL_ADC_MspInit+0xf8>)
 8015010:	2200      	movs	r2, #0
 8015012:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8015014:	480f      	ldr	r0, [pc, #60]	; (8015054 <HAL_ADC_MspInit+0xf8>)
 8015016:	f00f fc21 	bl	802485c <HAL_DMA_Init>
 801501a:	4603      	mov	r3, r0
 801501c:	2b00      	cmp	r3, #0
 801501e:	d001      	beq.n	8015024 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8015020:	f002 f8b6 	bl	8017190 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	4a0b      	ldr	r2, [pc, #44]	; (8015054 <HAL_ADC_MspInit+0xf8>)
 8015028:	639a      	str	r2, [r3, #56]	; 0x38
 801502a:	4a0a      	ldr	r2, [pc, #40]	; (8015054 <HAL_ADC_MspInit+0xf8>)
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8015030:	2200      	movs	r2, #0
 8015032:	2105      	movs	r1, #5
 8015034:	2012      	movs	r0, #18
 8015036:	f00f fbe7 	bl	8024808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 801503a:	2012      	movs	r0, #18
 801503c:	f00f fc00 	bl	8024840 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8015040:	bf00      	nop
 8015042:	3728      	adds	r7, #40	; 0x28
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}
 8015048:	40012000 	.word	0x40012000
 801504c:	40023800 	.word	0x40023800
 8015050:	40020000 	.word	0x40020000
 8015054:	2001b064 	.word	0x2001b064
 8015058:	40026410 	.word	0x40026410
 801505c:	00000000 	.word	0x00000000

08015060 <interpret_ADC_buffer>:
/* USER CODE BEGIN 1 */

static temperatures_t temperatures;
static uint16_t adcBuffer[128];

void interpret_ADC_buffer(uint16_t *_adcBuffer, uint8_t L) {
 8015060:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015064:	b08c      	sub	sp, #48	; 0x30
 8015066:	af00      	add	r7, sp, #0
 8015068:	6078      	str	r0, [r7, #4]
 801506a:	460b      	mov	r3, r1
 801506c:	70fb      	strb	r3, [r7, #3]
	uint16_t i, j;
	float adcAverageBuffer[4];

	float beta = 3500;
 801506e:	4bd6      	ldr	r3, [pc, #856]	; (80153c8 <interpret_ADC_buffer+0x368>)
 8015070:	62bb      	str	r3, [r7, #40]	; 0x28
	float temp = 25 + 273.15;
 8015072:	4bd6      	ldr	r3, [pc, #856]	; (80153cc <interpret_ADC_buffer+0x36c>)
 8015074:	627b      	str	r3, [r7, #36]	; 0x24
	float R0 = 10000 * exp(-beta / temp);
 8015076:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801507a:	eeb1 7a67 	vneg.f32	s14, s15
 801507e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015082:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015086:	ee16 0a90 	vmov	r0, s13
 801508a:	f7eb fa4f 	bl	800052c <__aeabi_f2d>
 801508e:	4602      	mov	r2, r0
 8015090:	460b      	mov	r3, r1
 8015092:	ec43 2b10 	vmov	d0, r2, r3
 8015096:	f017 ff83 	bl	802cfa0 <exp>
 801509a:	ec51 0b10 	vmov	r0, r1, d0
 801509e:	a3c6      	add	r3, pc, #792	; (adr r3, 80153b8 <interpret_ADC_buffer+0x358>)
 80150a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150a4:	f7eb fa9a 	bl	80005dc <__aeabi_dmul>
 80150a8:	4602      	mov	r2, r0
 80150aa:	460b      	mov	r3, r1
 80150ac:	4610      	mov	r0, r2
 80150ae:	4619      	mov	r1, r3
 80150b0:	f7eb fd8c 	bl	8000bcc <__aeabi_d2f>
 80150b4:	4603      	mov	r3, r0
 80150b6:	623b      	str	r3, [r7, #32]
	float R = 10000;
 80150b8:	4bc5      	ldr	r3, [pc, #788]	; (80153d0 <interpret_ADC_buffer+0x370>)
 80150ba:	61fb      	str	r3, [r7, #28]
	float resolution = pow(2, 12) - 1;
 80150bc:	4bc5      	ldr	r3, [pc, #788]	; (80153d4 <interpret_ADC_buffer+0x374>)
 80150be:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < 4; i++) {
 80150c0:	2300      	movs	r3, #0
 80150c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80150c4:	e067      	b.n	8015196 <interpret_ADC_buffer+0x136>
		adcAverageBuffer[i] = 0;
 80150c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80150c8:	009b      	lsls	r3, r3, #2
 80150ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80150ce:	4413      	add	r3, r2
 80150d0:	3b28      	subs	r3, #40	; 0x28
 80150d2:	f04f 0200 	mov.w	r2, #0
 80150d6:	601a      	str	r2, [r3, #0]
		for (j = 0; j < L/4; j++) {
 80150d8:	2300      	movs	r3, #0
 80150da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80150dc:	e020      	b.n	8015120 <interpret_ADC_buffer+0xc0>
			adcAverageBuffer[i] += _adcBuffer[4 * j + i];
 80150de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80150e0:	009b      	lsls	r3, r3, #2
 80150e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80150e6:	4413      	add	r3, r2
 80150e8:	3b28      	subs	r3, #40	; 0x28
 80150ea:	ed93 7a00 	vldr	s14, [r3]
 80150ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80150f0:	009a      	lsls	r2, r3, #2
 80150f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80150f4:	4413      	add	r3, r2
 80150f6:	005b      	lsls	r3, r3, #1
 80150f8:	687a      	ldr	r2, [r7, #4]
 80150fa:	4413      	add	r3, r2
 80150fc:	881b      	ldrh	r3, [r3, #0]
 80150fe:	ee07 3a90 	vmov	s15, r3
 8015102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015106:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015108:	ee77 7a27 	vadd.f32	s15, s14, s15
 801510c:	009b      	lsls	r3, r3, #2
 801510e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015112:	4413      	add	r3, r2
 8015114:	3b28      	subs	r3, #40	; 0x28
 8015116:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < L/4; j++) {
 801511a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801511c:	3301      	adds	r3, #1
 801511e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8015120:	78fb      	ldrb	r3, [r7, #3]
 8015122:	089b      	lsrs	r3, r3, #2
 8015124:	b2db      	uxtb	r3, r3
 8015126:	b29b      	uxth	r3, r3
 8015128:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801512a:	429a      	cmp	r2, r3
 801512c:	d3d7      	bcc.n	80150de <interpret_ADC_buffer+0x7e>
		}
		adcAverageBuffer[i] /= L/4;
 801512e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015130:	009b      	lsls	r3, r3, #2
 8015132:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015136:	4413      	add	r3, r2
 8015138:	3b28      	subs	r3, #40	; 0x28
 801513a:	edd3 6a00 	vldr	s13, [r3]
 801513e:	78fb      	ldrb	r3, [r7, #3]
 8015140:	089b      	lsrs	r3, r3, #2
 8015142:	b2db      	uxtb	r3, r3
 8015144:	ee07 3a90 	vmov	s15, r3
 8015148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801514c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801514e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015152:	009b      	lsls	r3, r3, #2
 8015154:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015158:	4413      	add	r3, r2
 801515a:	3b28      	subs	r3, #40	; 0x28
 801515c:	edc3 7a00 	vstr	s15, [r3]

		/* The adc value shouldn't be negative, nor should it be 0 */
		if (adcAverageBuffer[i] < 0.25) {
 8015160:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015162:	009b      	lsls	r3, r3, #2
 8015164:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015168:	4413      	add	r3, r2
 801516a:	3b28      	subs	r3, #40	; 0x28
 801516c:	edd3 7a00 	vldr	s15, [r3]
 8015170:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8015174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801517c:	d508      	bpl.n	8015190 <interpret_ADC_buffer+0x130>
			adcAverageBuffer[i] = 1;
 801517e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015180:	009b      	lsls	r3, r3, #2
 8015182:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015186:	4413      	add	r3, r2
 8015188:	3b28      	subs	r3, #40	; 0x28
 801518a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801518e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 4; i++) {
 8015190:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015192:	3301      	adds	r3, #1
 8015194:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8015196:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015198:	2b03      	cmp	r3, #3
 801519a:	d994      	bls.n	80150c6 <interpret_ADC_buffer+0x66>
	}
	/* temperature = beta / (log(R0 * ( resolution / adcAverageBuffer[i] - 1) ) - log(R)); */
	/* v/vt = ((2^n - 1)*v/vref)/((2^n - 1)*vt/vref) = ((2^n - 1)*v/vref)/adcAverageBuffer[i] */
	/* Assume v = vref, n = 12 */
	temperatures.precharge_resistor = beta
			/ (log(R0 * (resolution / adcAverageBuffer[0] - 1)) - log(R))
 801519c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801519e:	f7eb f9c5 	bl	800052c <__aeabi_f2d>
 80151a2:	4604      	mov	r4, r0
 80151a4:	460d      	mov	r5, r1
 80151a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80151aa:	edd7 6a06 	vldr	s13, [r7, #24]
 80151ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80151b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80151b6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80151ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80151be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80151c2:	ee17 0a90 	vmov	r0, s15
 80151c6:	f7eb f9b1 	bl	800052c <__aeabi_f2d>
 80151ca:	4602      	mov	r2, r0
 80151cc:	460b      	mov	r3, r1
 80151ce:	ec43 2b10 	vmov	d0, r2, r3
 80151d2:	f017 ff35 	bl	802d040 <log>
 80151d6:	ec59 8b10 	vmov	r8, r9, d0
 80151da:	69f8      	ldr	r0, [r7, #28]
 80151dc:	f7eb f9a6 	bl	800052c <__aeabi_f2d>
 80151e0:	4602      	mov	r2, r0
 80151e2:	460b      	mov	r3, r1
 80151e4:	ec43 2b10 	vmov	d0, r2, r3
 80151e8:	f017 ff2a 	bl	802d040 <log>
 80151ec:	ec53 2b10 	vmov	r2, r3, d0
 80151f0:	4640      	mov	r0, r8
 80151f2:	4649      	mov	r1, r9
 80151f4:	f7eb f83a 	bl	800026c <__aeabi_dsub>
 80151f8:	4602      	mov	r2, r0
 80151fa:	460b      	mov	r3, r1
 80151fc:	4620      	mov	r0, r4
 80151fe:	4629      	mov	r1, r5
 8015200:	f7eb fb16 	bl	8000830 <__aeabi_ddiv>
 8015204:	4602      	mov	r2, r0
 8015206:	460b      	mov	r3, r1
 8015208:	4610      	mov	r0, r2
 801520a:	4619      	mov	r1, r3
			- 273.15;
 801520c:	a36c      	add	r3, pc, #432	; (adr r3, 80153c0 <interpret_ADC_buffer+0x360>)
 801520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015212:	f7eb f82b 	bl	800026c <__aeabi_dsub>
 8015216:	4602      	mov	r2, r0
 8015218:	460b      	mov	r3, r1
	temperatures.precharge_resistor = beta
 801521a:	496f      	ldr	r1, [pc, #444]	; (80153d8 <interpret_ADC_buffer+0x378>)
 801521c:	e9c1 2300 	strd	r2, r3, [r1]
	temperatures.fuse = beta
			/ (log(R0 * (resolution / adcAverageBuffer[1] - 1)) - log(R))
 8015220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015222:	f7eb f983 	bl	800052c <__aeabi_f2d>
 8015226:	4604      	mov	r4, r0
 8015228:	460d      	mov	r5, r1
 801522a:	ed97 7a03 	vldr	s14, [r7, #12]
 801522e:	edd7 6a06 	vldr	s13, [r7, #24]
 8015232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801523a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801523e:	edd7 7a08 	vldr	s15, [r7, #32]
 8015242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015246:	ee17 0a90 	vmov	r0, s15
 801524a:	f7eb f96f 	bl	800052c <__aeabi_f2d>
 801524e:	4602      	mov	r2, r0
 8015250:	460b      	mov	r3, r1
 8015252:	ec43 2b10 	vmov	d0, r2, r3
 8015256:	f017 fef3 	bl	802d040 <log>
 801525a:	ec59 8b10 	vmov	r8, r9, d0
 801525e:	69f8      	ldr	r0, [r7, #28]
 8015260:	f7eb f964 	bl	800052c <__aeabi_f2d>
 8015264:	4602      	mov	r2, r0
 8015266:	460b      	mov	r3, r1
 8015268:	ec43 2b10 	vmov	d0, r2, r3
 801526c:	f017 fee8 	bl	802d040 <log>
 8015270:	ec53 2b10 	vmov	r2, r3, d0
 8015274:	4640      	mov	r0, r8
 8015276:	4649      	mov	r1, r9
 8015278:	f7ea fff8 	bl	800026c <__aeabi_dsub>
 801527c:	4602      	mov	r2, r0
 801527e:	460b      	mov	r3, r1
 8015280:	4620      	mov	r0, r4
 8015282:	4629      	mov	r1, r5
 8015284:	f7eb fad4 	bl	8000830 <__aeabi_ddiv>
 8015288:	4602      	mov	r2, r0
 801528a:	460b      	mov	r3, r1
 801528c:	4610      	mov	r0, r2
 801528e:	4619      	mov	r1, r3
			- 273.15;
 8015290:	a34b      	add	r3, pc, #300	; (adr r3, 80153c0 <interpret_ADC_buffer+0x360>)
 8015292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015296:	f7ea ffe9 	bl	800026c <__aeabi_dsub>
 801529a:	4602      	mov	r2, r0
 801529c:	460b      	mov	r3, r1
	temperatures.fuse = beta
 801529e:	494e      	ldr	r1, [pc, #312]	; (80153d8 <interpret_ADC_buffer+0x378>)
 80152a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	temperatures.aux_1 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[2] - 1)) - log(R))
 80152a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152a6:	f7eb f941 	bl	800052c <__aeabi_f2d>
 80152aa:	4604      	mov	r4, r0
 80152ac:	460d      	mov	r5, r1
 80152ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80152b2:	edd7 6a06 	vldr	s13, [r7, #24]
 80152b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80152ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80152be:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80152c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80152c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80152ca:	ee17 0a90 	vmov	r0, s15
 80152ce:	f7eb f92d 	bl	800052c <__aeabi_f2d>
 80152d2:	4602      	mov	r2, r0
 80152d4:	460b      	mov	r3, r1
 80152d6:	ec43 2b10 	vmov	d0, r2, r3
 80152da:	f017 feb1 	bl	802d040 <log>
 80152de:	ec59 8b10 	vmov	r8, r9, d0
 80152e2:	69f8      	ldr	r0, [r7, #28]
 80152e4:	f7eb f922 	bl	800052c <__aeabi_f2d>
 80152e8:	4602      	mov	r2, r0
 80152ea:	460b      	mov	r3, r1
 80152ec:	ec43 2b10 	vmov	d0, r2, r3
 80152f0:	f017 fea6 	bl	802d040 <log>
 80152f4:	ec53 2b10 	vmov	r2, r3, d0
 80152f8:	4640      	mov	r0, r8
 80152fa:	4649      	mov	r1, r9
 80152fc:	f7ea ffb6 	bl	800026c <__aeabi_dsub>
 8015300:	4602      	mov	r2, r0
 8015302:	460b      	mov	r3, r1
 8015304:	4620      	mov	r0, r4
 8015306:	4629      	mov	r1, r5
 8015308:	f7eb fa92 	bl	8000830 <__aeabi_ddiv>
 801530c:	4602      	mov	r2, r0
 801530e:	460b      	mov	r3, r1
 8015310:	4610      	mov	r0, r2
 8015312:	4619      	mov	r1, r3
			- 273.15;
 8015314:	a32a      	add	r3, pc, #168	; (adr r3, 80153c0 <interpret_ADC_buffer+0x360>)
 8015316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801531a:	f7ea ffa7 	bl	800026c <__aeabi_dsub>
 801531e:	4602      	mov	r2, r0
 8015320:	460b      	mov	r3, r1
	temperatures.aux_1 = beta
 8015322:	492d      	ldr	r1, [pc, #180]	; (80153d8 <interpret_ADC_buffer+0x378>)
 8015324:	e9c1 2304 	strd	r2, r3, [r1, #16]
	temperatures.aux_2 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[3] - 1)) - log(R))
 8015328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801532a:	f7eb f8ff 	bl	800052c <__aeabi_f2d>
 801532e:	4604      	mov	r4, r0
 8015330:	460d      	mov	r5, r1
 8015332:	ed97 7a05 	vldr	s14, [r7, #20]
 8015336:	edd7 6a06 	vldr	s13, [r7, #24]
 801533a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801533e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015342:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8015346:	edd7 7a08 	vldr	s15, [r7, #32]
 801534a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801534e:	ee17 0a90 	vmov	r0, s15
 8015352:	f7eb f8eb 	bl	800052c <__aeabi_f2d>
 8015356:	4602      	mov	r2, r0
 8015358:	460b      	mov	r3, r1
 801535a:	ec43 2b10 	vmov	d0, r2, r3
 801535e:	f017 fe6f 	bl	802d040 <log>
 8015362:	ec59 8b10 	vmov	r8, r9, d0
 8015366:	69f8      	ldr	r0, [r7, #28]
 8015368:	f7eb f8e0 	bl	800052c <__aeabi_f2d>
 801536c:	4602      	mov	r2, r0
 801536e:	460b      	mov	r3, r1
 8015370:	ec43 2b10 	vmov	d0, r2, r3
 8015374:	f017 fe64 	bl	802d040 <log>
 8015378:	ec53 2b10 	vmov	r2, r3, d0
 801537c:	4640      	mov	r0, r8
 801537e:	4649      	mov	r1, r9
 8015380:	f7ea ff74 	bl	800026c <__aeabi_dsub>
 8015384:	4602      	mov	r2, r0
 8015386:	460b      	mov	r3, r1
 8015388:	4620      	mov	r0, r4
 801538a:	4629      	mov	r1, r5
 801538c:	f7eb fa50 	bl	8000830 <__aeabi_ddiv>
 8015390:	4602      	mov	r2, r0
 8015392:	460b      	mov	r3, r1
 8015394:	4610      	mov	r0, r2
 8015396:	4619      	mov	r1, r3
			- 273.15;
 8015398:	a309      	add	r3, pc, #36	; (adr r3, 80153c0 <interpret_ADC_buffer+0x360>)
 801539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801539e:	f7ea ff65 	bl	800026c <__aeabi_dsub>
 80153a2:	4602      	mov	r2, r0
 80153a4:	460b      	mov	r3, r1
	temperatures.aux_2 = beta
 80153a6:	490c      	ldr	r1, [pc, #48]	; (80153d8 <interpret_ADC_buffer+0x378>)
 80153a8:	e9c1 2306 	strd	r2, r3, [r1, #24]

}
 80153ac:	bf00      	nop
 80153ae:	3730      	adds	r7, #48	; 0x30
 80153b0:	46bd      	mov	sp, r7
 80153b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80153b6:	bf00      	nop
 80153b8:	00000000 	.word	0x00000000
 80153bc:	40c38800 	.word	0x40c38800
 80153c0:	66666666 	.word	0x66666666
 80153c4:	40711266 	.word	0x40711266
 80153c8:	455ac000 	.word	0x455ac000
 80153cc:	43951333 	.word	0x43951333
 80153d0:	461c4000 	.word	0x461c4000
 80153d4:	457ff000 	.word	0x457ff000
 80153d8:	20000968 	.word	0x20000968
 80153dc:	00000000 	.word	0x00000000

080153e0 <initialize_TEM>:

void initialize_TEM(TIM_HandleTypeDef *htim) {
 80153e0:	b590      	push	{r4, r7, lr}
 80153e2:	b083      	sub	sp, #12
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]
	htim->Instance->PSC = 100;
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	2264      	movs	r2, #100	; 0x64
 80153ee:	629a      	str	r2, [r3, #40]	; 0x28
	htim->Instance->ARR = (64000000 / htim->Instance->PSC) * (0.18 / 64);
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153f6:	4a12      	ldr	r2, [pc, #72]	; (8015440 <initialize_TEM+0x60>)
 80153f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80153fc:	4618      	mov	r0, r3
 80153fe:	f7eb f873 	bl	80004e8 <__aeabi_ui2d>
 8015402:	a30d      	add	r3, pc, #52	; (adr r3, 8015438 <initialize_TEM+0x58>)
 8015404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015408:	f7eb f8e8 	bl	80005dc <__aeabi_dmul>
 801540c:	4602      	mov	r2, r0
 801540e:	460b      	mov	r3, r1
 8015410:	4610      	mov	r0, r2
 8015412:	4619      	mov	r1, r3
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	681c      	ldr	r4, [r3, #0]
 8015418:	f7eb fbb8 	bl	8000b8c <__aeabi_d2uiz>
 801541c:	4603      	mov	r3, r0
 801541e:	62e3      	str	r3, [r4, #44]	; 0x2c
	HAL_TIM_Base_Start(htim);
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	f011 f9df 	bl	80267e4 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, 128);
 8015426:	2280      	movs	r2, #128	; 0x80
 8015428:	4906      	ldr	r1, [pc, #24]	; (8015444 <initialize_TEM+0x64>)
 801542a:	4807      	ldr	r0, [pc, #28]	; (8015448 <initialize_TEM+0x68>)
 801542c:	f00d fe96 	bl	802315c <HAL_ADC_Start_DMA>

}
 8015430:	bf00      	nop
 8015432:	370c      	adds	r7, #12
 8015434:	46bd      	mov	sp, r7
 8015436:	bd90      	pop	{r4, r7, pc}
 8015438:	70a3d70a 	.word	0x70a3d70a
 801543c:	3f670a3d 	.word	0x3f670a3d
 8015440:	03d09000 	.word	0x03d09000
 8015444:	20000988 	.word	0x20000988
 8015448:	2001b0c4 	.word	0x2001b0c4

0801544c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 801544c:	b580      	push	{r7, lr}
 801544e:	b084      	sub	sp, #16
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
	interpret_ADC_buffer(&adcBuffer[0], 64);
 8015454:	2140      	movs	r1, #64	; 0x40
 8015456:	480e      	ldr	r0, [pc, #56]	; (8015490 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8015458:	f7ff fe02 	bl	8015060 <interpret_ADC_buffer>

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801545c:	2300      	movs	r3, #0
 801545e:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(temperatures_queue, &temperatures,
 8015460:	4b0c      	ldr	r3, [pc, #48]	; (8015494 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8015462:	6818      	ldr	r0, [r3, #0]
 8015464:	f107 020c 	add.w	r2, r7, #12
 8015468:	2302      	movs	r3, #2
 801546a:	490b      	ldr	r1, [pc, #44]	; (8015498 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 801546c:	f013 fc62 	bl	8028d34 <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d007      	beq.n	8015486 <HAL_ADC_ConvHalfCpltCallback+0x3a>
 8015476:	4b09      	ldr	r3, [pc, #36]	; (801549c <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8015478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801547c:	601a      	str	r2, [r3, #0]
 801547e:	f3bf 8f4f 	dsb	sy
 8015482:	f3bf 8f6f 	isb	sy

}
 8015486:	bf00      	nop
 8015488:	3710      	adds	r7, #16
 801548a:	46bd      	mov	sp, r7
 801548c:	bd80      	pop	{r7, pc}
 801548e:	bf00      	nop
 8015490:	20000988 	.word	0x20000988
 8015494:	2001a8ac 	.word	0x2001a8ac
 8015498:	20000968 	.word	0x20000968
 801549c:	e000ed04 	.word	0xe000ed04

080154a0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b084      	sub	sp, #16
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
	interpret_ADC_buffer(&adcBuffer[64], 64);
 80154a8:	2140      	movs	r1, #64	; 0x40
 80154aa:	480e      	ldr	r0, [pc, #56]	; (80154e4 <HAL_ADC_ConvCpltCallback+0x44>)
 80154ac:	f7ff fdd8 	bl	8015060 <interpret_ADC_buffer>

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80154b0:	2300      	movs	r3, #0
 80154b2:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(temperatures_queue, &temperatures,
 80154b4:	4b0c      	ldr	r3, [pc, #48]	; (80154e8 <HAL_ADC_ConvCpltCallback+0x48>)
 80154b6:	6818      	ldr	r0, [r3, #0]
 80154b8:	f107 020c 	add.w	r2, r7, #12
 80154bc:	2302      	movs	r3, #2
 80154be:	490b      	ldr	r1, [pc, #44]	; (80154ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80154c0:	f013 fc38 	bl	8028d34 <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d007      	beq.n	80154da <HAL_ADC_ConvCpltCallback+0x3a>
 80154ca:	4b09      	ldr	r3, [pc, #36]	; (80154f0 <HAL_ADC_ConvCpltCallback+0x50>)
 80154cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154d0:	601a      	str	r2, [r3, #0]
 80154d2:	f3bf 8f4f 	dsb	sy
 80154d6:	f3bf 8f6f 	isb	sy
}
 80154da:	bf00      	nop
 80154dc:	3710      	adds	r7, #16
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}
 80154e2:	bf00      	nop
 80154e4:	20000a08 	.word	0x20000a08
 80154e8:	2001a8ac 	.word	0x2001a8ac
 80154ec:	20000968 	.word	0x20000968
 80154f0:	e000ed04 	.word	0xe000ed04

080154f4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80154f8:	4b17      	ldr	r3, [pc, #92]	; (8015558 <MX_CAN1_Init+0x64>)
 80154fa:	4a18      	ldr	r2, [pc, #96]	; (801555c <MX_CAN1_Init+0x68>)
 80154fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80154fe:	4b16      	ldr	r3, [pc, #88]	; (8015558 <MX_CAN1_Init+0x64>)
 8015500:	2202      	movs	r2, #2
 8015502:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8015504:	4b14      	ldr	r3, [pc, #80]	; (8015558 <MX_CAN1_Init+0x64>)
 8015506:	2200      	movs	r2, #0
 8015508:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 801550a:	4b13      	ldr	r3, [pc, #76]	; (8015558 <MX_CAN1_Init+0x64>)
 801550c:	2200      	movs	r2, #0
 801550e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8015510:	4b11      	ldr	r3, [pc, #68]	; (8015558 <MX_CAN1_Init+0x64>)
 8015512:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8015516:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8015518:	4b0f      	ldr	r3, [pc, #60]	; (8015558 <MX_CAN1_Init+0x64>)
 801551a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801551e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8015520:	4b0d      	ldr	r3, [pc, #52]	; (8015558 <MX_CAN1_Init+0x64>)
 8015522:	2200      	movs	r2, #0
 8015524:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8015526:	4b0c      	ldr	r3, [pc, #48]	; (8015558 <MX_CAN1_Init+0x64>)
 8015528:	2200      	movs	r2, #0
 801552a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 801552c:	4b0a      	ldr	r3, [pc, #40]	; (8015558 <MX_CAN1_Init+0x64>)
 801552e:	2200      	movs	r2, #0
 8015530:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8015532:	4b09      	ldr	r3, [pc, #36]	; (8015558 <MX_CAN1_Init+0x64>)
 8015534:	2200      	movs	r2, #0
 8015536:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8015538:	4b07      	ldr	r3, [pc, #28]	; (8015558 <MX_CAN1_Init+0x64>)
 801553a:	2200      	movs	r2, #0
 801553c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 801553e:	4b06      	ldr	r3, [pc, #24]	; (8015558 <MX_CAN1_Init+0x64>)
 8015540:	2200      	movs	r2, #0
 8015542:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8015544:	4804      	ldr	r0, [pc, #16]	; (8015558 <MX_CAN1_Init+0x64>)
 8015546:	f00e f9d7 	bl	80238f8 <HAL_CAN_Init>
 801554a:	4603      	mov	r3, r0
 801554c:	2b00      	cmp	r3, #0
 801554e:	d001      	beq.n	8015554 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8015550:	f001 fe1e 	bl	8017190 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8015554:	bf00      	nop
 8015556:	bd80      	pop	{r7, pc}
 8015558:	2001b10c 	.word	0x2001b10c
 801555c:	40006400 	.word	0x40006400

08015560 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8015560:	b580      	push	{r7, lr}
 8015562:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8015564:	4b17      	ldr	r3, [pc, #92]	; (80155c4 <MX_CAN2_Init+0x64>)
 8015566:	4a18      	ldr	r2, [pc, #96]	; (80155c8 <MX_CAN2_Init+0x68>)
 8015568:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 801556a:	4b16      	ldr	r3, [pc, #88]	; (80155c4 <MX_CAN2_Init+0x64>)
 801556c:	2204      	movs	r2, #4
 801556e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8015570:	4b14      	ldr	r3, [pc, #80]	; (80155c4 <MX_CAN2_Init+0x64>)
 8015572:	2200      	movs	r2, #0
 8015574:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8015576:	4b13      	ldr	r3, [pc, #76]	; (80155c4 <MX_CAN2_Init+0x64>)
 8015578:	2200      	movs	r2, #0
 801557a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 801557c:	4b11      	ldr	r3, [pc, #68]	; (80155c4 <MX_CAN2_Init+0x64>)
 801557e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8015582:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8015584:	4b0f      	ldr	r3, [pc, #60]	; (80155c4 <MX_CAN2_Init+0x64>)
 8015586:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801558a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 801558c:	4b0d      	ldr	r3, [pc, #52]	; (80155c4 <MX_CAN2_Init+0x64>)
 801558e:	2200      	movs	r2, #0
 8015590:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8015592:	4b0c      	ldr	r3, [pc, #48]	; (80155c4 <MX_CAN2_Init+0x64>)
 8015594:	2200      	movs	r2, #0
 8015596:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8015598:	4b0a      	ldr	r3, [pc, #40]	; (80155c4 <MX_CAN2_Init+0x64>)
 801559a:	2200      	movs	r2, #0
 801559c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 801559e:	4b09      	ldr	r3, [pc, #36]	; (80155c4 <MX_CAN2_Init+0x64>)
 80155a0:	2200      	movs	r2, #0
 80155a2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80155a4:	4b07      	ldr	r3, [pc, #28]	; (80155c4 <MX_CAN2_Init+0x64>)
 80155a6:	2200      	movs	r2, #0
 80155a8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80155aa:	4b06      	ldr	r3, [pc, #24]	; (80155c4 <MX_CAN2_Init+0x64>)
 80155ac:	2200      	movs	r2, #0
 80155ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80155b0:	4804      	ldr	r0, [pc, #16]	; (80155c4 <MX_CAN2_Init+0x64>)
 80155b2:	f00e f9a1 	bl	80238f8 <HAL_CAN_Init>
 80155b6:	4603      	mov	r3, r0
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d001      	beq.n	80155c0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80155bc:	f001 fde8 	bl	8017190 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80155c0:	bf00      	nop
 80155c2:	bd80      	pop	{r7, pc}
 80155c4:	2001b134 	.word	0x2001b134
 80155c8:	40006800 	.word	0x40006800

080155cc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b08c      	sub	sp, #48	; 0x30
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80155d4:	f107 031c 	add.w	r3, r7, #28
 80155d8:	2200      	movs	r2, #0
 80155da:	601a      	str	r2, [r3, #0]
 80155dc:	605a      	str	r2, [r3, #4]
 80155de:	609a      	str	r2, [r3, #8]
 80155e0:	60da      	str	r2, [r3, #12]
 80155e2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	4a5b      	ldr	r2, [pc, #364]	; (8015758 <HAL_CAN_MspInit+0x18c>)
 80155ea:	4293      	cmp	r3, r2
 80155ec:	d14e      	bne.n	801568c <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80155ee:	4b5b      	ldr	r3, [pc, #364]	; (801575c <HAL_CAN_MspInit+0x190>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	3301      	adds	r3, #1
 80155f4:	4a59      	ldr	r2, [pc, #356]	; (801575c <HAL_CAN_MspInit+0x190>)
 80155f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80155f8:	4b58      	ldr	r3, [pc, #352]	; (801575c <HAL_CAN_MspInit+0x190>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	2b01      	cmp	r3, #1
 80155fe:	d10d      	bne.n	801561c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8015600:	2300      	movs	r3, #0
 8015602:	61bb      	str	r3, [r7, #24]
 8015604:	4b56      	ldr	r3, [pc, #344]	; (8015760 <HAL_CAN_MspInit+0x194>)
 8015606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015608:	4a55      	ldr	r2, [pc, #340]	; (8015760 <HAL_CAN_MspInit+0x194>)
 801560a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801560e:	6413      	str	r3, [r2, #64]	; 0x40
 8015610:	4b53      	ldr	r3, [pc, #332]	; (8015760 <HAL_CAN_MspInit+0x194>)
 8015612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015618:	61bb      	str	r3, [r7, #24]
 801561a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801561c:	2300      	movs	r3, #0
 801561e:	617b      	str	r3, [r7, #20]
 8015620:	4b4f      	ldr	r3, [pc, #316]	; (8015760 <HAL_CAN_MspInit+0x194>)
 8015622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015624:	4a4e      	ldr	r2, [pc, #312]	; (8015760 <HAL_CAN_MspInit+0x194>)
 8015626:	f043 0301 	orr.w	r3, r3, #1
 801562a:	6313      	str	r3, [r2, #48]	; 0x30
 801562c:	4b4c      	ldr	r3, [pc, #304]	; (8015760 <HAL_CAN_MspInit+0x194>)
 801562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015630:	f003 0301 	and.w	r3, r3, #1
 8015634:	617b      	str	r3, [r7, #20]
 8015636:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015638:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801563c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801563e:	2302      	movs	r3, #2
 8015640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015642:	2300      	movs	r3, #0
 8015644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015646:	2303      	movs	r3, #3
 8015648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 801564a:	2309      	movs	r3, #9
 801564c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801564e:	f107 031c 	add.w	r3, r7, #28
 8015652:	4619      	mov	r1, r3
 8015654:	4843      	ldr	r0, [pc, #268]	; (8015764 <HAL_CAN_MspInit+0x198>)
 8015656:	f00f fc71 	bl	8024f3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 801565a:	2200      	movs	r2, #0
 801565c:	2105      	movs	r1, #5
 801565e:	2013      	movs	r0, #19
 8015660:	f00f f8d2 	bl	8024808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8015664:	2013      	movs	r0, #19
 8015666:	f00f f8eb 	bl	8024840 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 801566a:	2200      	movs	r2, #0
 801566c:	2105      	movs	r1, #5
 801566e:	2014      	movs	r0, #20
 8015670:	f00f f8ca 	bl	8024808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8015674:	2014      	movs	r0, #20
 8015676:	f00f f8e3 	bl	8024840 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 801567a:	2200      	movs	r2, #0
 801567c:	2105      	movs	r1, #5
 801567e:	2015      	movs	r0, #21
 8015680:	f00f f8c2 	bl	8024808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8015684:	2015      	movs	r0, #21
 8015686:	f00f f8db 	bl	8024840 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 801568a:	e060      	b.n	801574e <HAL_CAN_MspInit+0x182>
  else if(canHandle->Instance==CAN2)
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	4a35      	ldr	r2, [pc, #212]	; (8015768 <HAL_CAN_MspInit+0x19c>)
 8015692:	4293      	cmp	r3, r2
 8015694:	d15b      	bne.n	801574e <HAL_CAN_MspInit+0x182>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8015696:	2300      	movs	r3, #0
 8015698:	613b      	str	r3, [r7, #16]
 801569a:	4b31      	ldr	r3, [pc, #196]	; (8015760 <HAL_CAN_MspInit+0x194>)
 801569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801569e:	4a30      	ldr	r2, [pc, #192]	; (8015760 <HAL_CAN_MspInit+0x194>)
 80156a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80156a4:	6413      	str	r3, [r2, #64]	; 0x40
 80156a6:	4b2e      	ldr	r3, [pc, #184]	; (8015760 <HAL_CAN_MspInit+0x194>)
 80156a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80156ae:	613b      	str	r3, [r7, #16]
 80156b0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80156b2:	4b2a      	ldr	r3, [pc, #168]	; (801575c <HAL_CAN_MspInit+0x190>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	3301      	adds	r3, #1
 80156b8:	4a28      	ldr	r2, [pc, #160]	; (801575c <HAL_CAN_MspInit+0x190>)
 80156ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80156bc:	4b27      	ldr	r3, [pc, #156]	; (801575c <HAL_CAN_MspInit+0x190>)
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	2b01      	cmp	r3, #1
 80156c2:	d10d      	bne.n	80156e0 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80156c4:	2300      	movs	r3, #0
 80156c6:	60fb      	str	r3, [r7, #12]
 80156c8:	4b25      	ldr	r3, [pc, #148]	; (8015760 <HAL_CAN_MspInit+0x194>)
 80156ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156cc:	4a24      	ldr	r2, [pc, #144]	; (8015760 <HAL_CAN_MspInit+0x194>)
 80156ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80156d2:	6413      	str	r3, [r2, #64]	; 0x40
 80156d4:	4b22      	ldr	r3, [pc, #136]	; (8015760 <HAL_CAN_MspInit+0x194>)
 80156d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80156dc:	60fb      	str	r3, [r7, #12]
 80156de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80156e0:	2300      	movs	r3, #0
 80156e2:	60bb      	str	r3, [r7, #8]
 80156e4:	4b1e      	ldr	r3, [pc, #120]	; (8015760 <HAL_CAN_MspInit+0x194>)
 80156e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156e8:	4a1d      	ldr	r2, [pc, #116]	; (8015760 <HAL_CAN_MspInit+0x194>)
 80156ea:	f043 0302 	orr.w	r3, r3, #2
 80156ee:	6313      	str	r3, [r2, #48]	; 0x30
 80156f0:	4b1b      	ldr	r3, [pc, #108]	; (8015760 <HAL_CAN_MspInit+0x194>)
 80156f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156f4:	f003 0302 	and.w	r3, r3, #2
 80156f8:	60bb      	str	r3, [r7, #8]
 80156fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80156fc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8015700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015702:	2302      	movs	r3, #2
 8015704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015706:	2300      	movs	r3, #0
 8015708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801570a:	2303      	movs	r3, #3
 801570c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 801570e:	2309      	movs	r3, #9
 8015710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015712:	f107 031c 	add.w	r3, r7, #28
 8015716:	4619      	mov	r1, r3
 8015718:	4814      	ldr	r0, [pc, #80]	; (801576c <HAL_CAN_MspInit+0x1a0>)
 801571a:	f00f fc0f 	bl	8024f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 801571e:	2200      	movs	r2, #0
 8015720:	2105      	movs	r1, #5
 8015722:	203f      	movs	r0, #63	; 0x3f
 8015724:	f00f f870 	bl	8024808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8015728:	203f      	movs	r0, #63	; 0x3f
 801572a:	f00f f889 	bl	8024840 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 801572e:	2200      	movs	r2, #0
 8015730:	2105      	movs	r1, #5
 8015732:	2040      	movs	r0, #64	; 0x40
 8015734:	f00f f868 	bl	8024808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8015738:	2040      	movs	r0, #64	; 0x40
 801573a:	f00f f881 	bl	8024840 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 801573e:	2200      	movs	r2, #0
 8015740:	2105      	movs	r1, #5
 8015742:	2041      	movs	r0, #65	; 0x41
 8015744:	f00f f860 	bl	8024808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8015748:	2041      	movs	r0, #65	; 0x41
 801574a:	f00f f879 	bl	8024840 <HAL_NVIC_EnableIRQ>
}
 801574e:	bf00      	nop
 8015750:	3730      	adds	r7, #48	; 0x30
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}
 8015756:	bf00      	nop
 8015758:	40006400 	.word	0x40006400
 801575c:	20000a88 	.word	0x20000a88
 8015760:	40023800 	.word	0x40023800
 8015764:	40020000 	.word	0x40020000
 8015768:	40006800 	.word	0x40006800
 801576c:	40020400 	.word	0x40020400

08015770 <can1_dbu_status_1_rx_callback>:
#include "canlib_data.h"
#include "canlib_callbacks.h"
#include "CSE.h"
#include "string.h"

void can1_dbu_status_1_rx_callback(dbu_status_1_t *dbu_status_1) {
 8015770:	b580      	push	{r7, lr}
 8015772:	b084      	sub	sp, #16
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015778:	2300      	movs	r3, #0
 801577a:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(start_drive_queue, &dbu_status_1->activate_ts_button,
 801577c:	4b10      	ldr	r3, [pc, #64]	; (80157c0 <can1_dbu_status_1_rx_callback+0x50>)
 801577e:	6818      	ldr	r0, [r3, #0]
 8015780:	6879      	ldr	r1, [r7, #4]
 8015782:	f107 020c 	add.w	r2, r7, #12
 8015786:	2302      	movs	r3, #2
 8015788:	f013 fad4 	bl	8028d34 <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	xQueueOverwriteFromISR(start_balance_queue,
 801578c:	4b0d      	ldr	r3, [pc, #52]	; (80157c4 <can1_dbu_status_1_rx_callback+0x54>)
 801578e:	6818      	ldr	r0, [r3, #0]
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f103 0110 	add.w	r1, r3, #16
 8015796:	f107 020c 	add.w	r2, r7, #12
 801579a:	2302      	movs	r3, #2
 801579c:	f013 faca 	bl	8028d34 <xQueueGenericSendFromISR>
			&dbu_status_1->ready_to_drive_button, &xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d007      	beq.n	80157b6 <can1_dbu_status_1_rx_callback+0x46>
 80157a6:	4b08      	ldr	r3, [pc, #32]	; (80157c8 <can1_dbu_status_1_rx_callback+0x58>)
 80157a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157ac:	601a      	str	r2, [r3, #0]
 80157ae:	f3bf 8f4f 	dsb	sy
 80157b2:	f3bf 8f6f 	isb	sy
}
 80157b6:	bf00      	nop
 80157b8:	3710      	adds	r7, #16
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bd80      	pop	{r7, pc}
 80157be:	bf00      	nop
 80157c0:	2001a898 	.word	0x2001a898
 80157c4:	2001a8b4 	.word	0x2001a8b4
 80157c8:	e000ed04 	.word	0xe000ed04

080157cc <can2_ivt_msg_result_i_rx_callback>:

void can2_ivt_msg_result_i_rx_callback(ivt_msg_result_i_t *ivt_msg_result_i) {
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b086      	sub	sp, #24
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80157d4:	2300      	movs	r3, #0
 80157d6:	617b      	str	r3, [r7, #20]
	double accumulator_current = ivt_msg_result_i->ivt_result_i/1000;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80157de:	f04f 0200 	mov.w	r2, #0
 80157e2:	4b0f      	ldr	r3, [pc, #60]	; (8015820 <can2_ivt_msg_result_i_rx_callback+0x54>)
 80157e4:	f7eb f824 	bl	8000830 <__aeabi_ddiv>
 80157e8:	4602      	mov	r2, r0
 80157ea:	460b      	mov	r3, r1
 80157ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
	xQueueOverwriteFromISR(accumulator_current_queue, &accumulator_current,
 80157f0:	4b0c      	ldr	r3, [pc, #48]	; (8015824 <can2_ivt_msg_result_i_rx_callback+0x58>)
 80157f2:	6818      	ldr	r0, [r3, #0]
 80157f4:	f107 0214 	add.w	r2, r7, #20
 80157f8:	f107 0108 	add.w	r1, r7, #8
 80157fc:	2302      	movs	r3, #2
 80157fe:	f013 fa99 	bl	8028d34 <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8015802:	697b      	ldr	r3, [r7, #20]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d007      	beq.n	8015818 <can2_ivt_msg_result_i_rx_callback+0x4c>
 8015808:	4b07      	ldr	r3, [pc, #28]	; (8015828 <can2_ivt_msg_result_i_rx_callback+0x5c>)
 801580a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801580e:	601a      	str	r2, [r3, #0]
 8015810:	f3bf 8f4f 	dsb	sy
 8015814:	f3bf 8f6f 	isb	sy
}
 8015818:	bf00      	nop
 801581a:	3718      	adds	r7, #24
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}
 8015820:	408f4000 	.word	0x408f4000
 8015824:	2001a8b0 	.word	0x2001a8b0
 8015828:	e000ed04 	.word	0xe000ed04

0801582c <can2_ivt_msg_result_u1_rx_callback>:

void can2_ivt_msg_result_u1_rx_callback(ivt_msg_result_u1_t *ivt_msg_result_u1) {
 801582c:	b580      	push	{r7, lr}
 801582e:	b086      	sub	sp, #24
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015834:	2300      	movs	r3, #0
 8015836:	617b      	str	r3, [r7, #20]
	double vehicle_voltage = ivt_msg_result_u1->ivt_result_u1/1000;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801583e:	f04f 0200 	mov.w	r2, #0
 8015842:	4b0f      	ldr	r3, [pc, #60]	; (8015880 <can2_ivt_msg_result_u1_rx_callback+0x54>)
 8015844:	f7ea fff4 	bl	8000830 <__aeabi_ddiv>
 8015848:	4602      	mov	r2, r0
 801584a:	460b      	mov	r3, r1
 801584c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	xQueueOverwriteFromISR(vehicle_voltage_queue,
 8015850:	4b0c      	ldr	r3, [pc, #48]	; (8015884 <can2_ivt_msg_result_u1_rx_callback+0x58>)
 8015852:	6818      	ldr	r0, [r3, #0]
 8015854:	f107 0214 	add.w	r2, r7, #20
 8015858:	f107 0108 	add.w	r1, r7, #8
 801585c:	2302      	movs	r3, #2
 801585e:	f013 fa69 	bl	8028d34 <xQueueGenericSendFromISR>
			&vehicle_voltage, &xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d007      	beq.n	8015878 <can2_ivt_msg_result_u1_rx_callback+0x4c>
 8015868:	4b07      	ldr	r3, [pc, #28]	; (8015888 <can2_ivt_msg_result_u1_rx_callback+0x5c>)
 801586a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801586e:	601a      	str	r2, [r3, #0]
 8015870:	f3bf 8f4f 	dsb	sy
 8015874:	f3bf 8f6f 	isb	sy
}
 8015878:	bf00      	nop
 801587a:	3718      	adds	r7, #24
 801587c:	46bd      	mov	sp, r7
 801587e:	bd80      	pop	{r7, pc}
 8015880:	408f4000 	.word	0x408f4000
 8015884:	2001a8a4 	.word	0x2001a8a4
 8015888:	e000ed04 	.word	0xe000ed04

0801588c <can2_ivt_msg_result_u3_rx_callback>:

void can2_ivt_msg_result_u3_rx_callback(ivt_msg_result_u3_t *ivt_msg_result_u3) {
 801588c:	b580      	push	{r7, lr}
 801588e:	b086      	sub	sp, #24
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015894:	2300      	movs	r3, #0
 8015896:	617b      	str	r3, [r7, #20]
	double accumulator_voltage= ivt_msg_result_u3->ivt_result_u3/1000;
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801589e:	f04f 0200 	mov.w	r2, #0
 80158a2:	4b0f      	ldr	r3, [pc, #60]	; (80158e0 <can2_ivt_msg_result_u3_rx_callback+0x54>)
 80158a4:	f7ea ffc4 	bl	8000830 <__aeabi_ddiv>
 80158a8:	4602      	mov	r2, r0
 80158aa:	460b      	mov	r3, r1
 80158ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
	xQueueOverwriteFromISR(accumulator_voltage_queue, &accumulator_voltage,
 80158b0:	4b0c      	ldr	r3, [pc, #48]	; (80158e4 <can2_ivt_msg_result_u3_rx_callback+0x58>)
 80158b2:	6818      	ldr	r0, [r3, #0]
 80158b4:	f107 0214 	add.w	r2, r7, #20
 80158b8:	f107 0108 	add.w	r1, r7, #8
 80158bc:	2302      	movs	r3, #2
 80158be:	f013 fa39 	bl	8028d34 <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80158c2:	697b      	ldr	r3, [r7, #20]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d007      	beq.n	80158d8 <can2_ivt_msg_result_u3_rx_callback+0x4c>
 80158c8:	4b07      	ldr	r3, [pc, #28]	; (80158e8 <can2_ivt_msg_result_u3_rx_callback+0x5c>)
 80158ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80158ce:	601a      	str	r2, [r3, #0]
 80158d0:	f3bf 8f4f 	dsb	sy
 80158d4:	f3bf 8f6f 	isb	sy
}
 80158d8:	bf00      	nop
 80158da:	3718      	adds	r7, #24
 80158dc:	46bd      	mov	sp, r7
 80158de:	bd80      	pop	{r7, pc}
 80158e0:	408f4000 	.word	0x408f4000
 80158e4:	2001a8a8 	.word	0x2001a8a8
 80158e8:	e000ed04 	.word	0xe000ed04

080158ec <can2_cc_status_rx_callback>:

void can2_cc_status_rx_callback(cc_status_t *cc_status) {
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b084      	sub	sp, #16
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80158f4:	2300      	movs	r3, #0
 80158f6:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(start_charge_queue, &cc_status->enable_ams_charging,
 80158f8:	4b0b      	ldr	r3, [pc, #44]	; (8015928 <can2_cc_status_rx_callback+0x3c>)
 80158fa:	6818      	ldr	r0, [r3, #0]
 80158fc:	6879      	ldr	r1, [r7, #4]
 80158fe:	f107 020c 	add.w	r2, r7, #12
 8015902:	2302      	movs	r3, #2
 8015904:	f013 fa16 	bl	8028d34 <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d007      	beq.n	801591e <can2_cc_status_rx_callback+0x32>
 801590e:	4b07      	ldr	r3, [pc, #28]	; (801592c <can2_cc_status_rx_callback+0x40>)
 8015910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015914:	601a      	str	r2, [r3, #0]
 8015916:	f3bf 8f4f 	dsb	sy
 801591a:	f3bf 8f6f 	isb	sy
}
 801591e:	bf00      	nop
 8015920:	3710      	adds	r7, #16
 8015922:	46bd      	mov	sp, r7
 8015924:	bd80      	pop	{r7, pc}
 8015926:	bf00      	nop
 8015928:	2001a8bc 	.word	0x2001a8bc
 801592c:	e000ed04 	.word	0xe000ed04

08015930 <can2_charger_config_tx_callback>:

uint8_t can2_charger_config_tx_callback(charger_config_t *charger_config) {
 8015930:	b580      	push	{r7, lr}
 8015932:	b082      	sub	sp, #8
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
	charger_config->msg_set_current_limit = charger.charger_current_limit;
 8015938:	4b12      	ldr	r3, [pc, #72]	; (8015984 <can2_charger_config_tx_callback+0x54>)
 801593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801593e:	6879      	ldr	r1, [r7, #4]
 8015940:	e9c1 2300 	strd	r2, r3, [r1]
	charger_config->msg_set_voltage_limit = charger.charger_voltage_limit;
 8015944:	4b0f      	ldr	r3, [pc, #60]	; (8015984 <can2_charger_config_tx_callback+0x54>)
 8015946:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801594a:	6879      	ldr	r1, [r7, #4]
 801594c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	charger_config->msg_set_power_limit = charger.charger_current_limit
 8015950:	4b0c      	ldr	r3, [pc, #48]	; (8015984 <can2_charger_config_tx_callback+0x54>)
 8015952:	e9d3 0100 	ldrd	r0, r1, [r3]
			* charger.charger_voltage_limit;
 8015956:	4b0b      	ldr	r3, [pc, #44]	; (8015984 <can2_charger_config_tx_callback+0x54>)
 8015958:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801595c:	f7ea fe3e 	bl	80005dc <__aeabi_dmul>
 8015960:	4602      	mov	r2, r0
 8015962:	460b      	mov	r3, r1
	charger_config->msg_set_power_limit = charger.charger_current_limit
 8015964:	6879      	ldr	r1, [r7, #4]
 8015966:	e9c1 2304 	strd	r2, r3, [r1, #16]
	charger_config->msg_set_time_out = 60;
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	223c      	movs	r2, #60	; 0x3c
 801596e:	761a      	strb	r2, [r3, #24]
	charger_config->msg_set_enabled = charger.enable_charger;
 8015970:	4b04      	ldr	r3, [pc, #16]	; (8015984 <can2_charger_config_tx_callback+0x54>)
 8015972:	7c1a      	ldrb	r2, [r3, #16]
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	721a      	strb	r2, [r3, #8]
	return 1;
 8015978:	2301      	movs	r3, #1
}
 801597a:	4618      	mov	r0, r3
 801597c:	3708      	adds	r7, #8
 801597e:	46bd      	mov	sp, r7
 8015980:	bd80      	pop	{r7, pc}
 8015982:	bf00      	nop
 8015984:	2001a860 	.word	0x2001a860

08015988 <can1_ams_status_1_tx_callback>:

uint8_t can1_ams_status_1_tx_callback(ams_status_1_t *ams_status_1) {
 8015988:	b580      	push	{r7, lr}
 801598a:	b096      	sub	sp, #88	; 0x58
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
	double minimum_cell_temperature;
	double maximum_cell_voltage;
	double minimum_cell_voltage;
	temperatures_t temperatures;

	if (xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 8015990:	4b65      	ldr	r3, [pc, #404]	; (8015b28 <can1_ams_status_1_tx_callback+0x1a0>)
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015998:	2200      	movs	r2, #0
 801599a:	4618      	mov	r0, r3
 801599c:	f013 fb8a 	bl	80290b4 <xQueuePeek>
 80159a0:	4603      	mov	r3, r0
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	f000 80ba 	beq.w	8015b1c <can1_ams_status_1_tx_callback+0x194>
			&& xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)
 80159a8:	4b60      	ldr	r3, [pc, #384]	; (8015b2c <can1_ams_status_1_tx_callback+0x1a4>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80159b0:	2200      	movs	r2, #0
 80159b2:	4618      	mov	r0, r3
 80159b4:	f013 fb7e 	bl	80290b4 <xQueuePeek>
 80159b8:	4603      	mov	r3, r0
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	f000 80ae 	beq.w	8015b1c <can1_ams_status_1_tx_callback+0x194>
			&& xQueuePeek(temperatures_queue, &temperatures, 0)) {
 80159c0:	4b5b      	ldr	r3, [pc, #364]	; (8015b30 <can1_ams_status_1_tx_callback+0x1a8>)
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	f107 0108 	add.w	r1, r7, #8
 80159c8:	2200      	movs	r2, #0
 80159ca:	4618      	mov	r0, r3
 80159cc:	f013 fb72 	bl	80290b4 <xQueuePeek>
 80159d0:	4603      	mov	r3, r0
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	f000 80a2 	beq.w	8015b1c <can1_ams_status_1_tx_callback+0x194>
		maximum_cell_temperature = cell_temperatures[0];
 80159d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159de:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		minimum_cell_temperature = cell_temperatures[0];
 80159e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		maximum_cell_voltage = cell_voltages[0];
 80159ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		minimum_cell_voltage = cell_voltages[0];
 80159f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		for (int i = 0; i < 126; i++) {
 8015a00:	2300      	movs	r3, #0
 8015a02:	637b      	str	r3, [r7, #52]	; 0x34
 8015a04:	e03e      	b.n	8015a84 <can1_ams_status_1_tx_callback+0xfc>
			if (maximum_cell_temperature < cell_temperatures[0]) {
 8015a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a0c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8015a10:	f7eb f856 	bl	8000ac0 <__aeabi_dcmplt>
 8015a14:	4603      	mov	r3, r0
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d004      	beq.n	8015a24 <can1_ams_status_1_tx_callback+0x9c>
				maximum_cell_temperature = cell_temperatures[0];
 8015a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a20:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			}
			if (minimum_cell_temperature > cell_temperatures[0]) {
 8015a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8015a2e:	f7eb f865 	bl	8000afc <__aeabi_dcmpgt>
 8015a32:	4603      	mov	r3, r0
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d004      	beq.n	8015a42 <can1_ams_status_1_tx_callback+0xba>
				minimum_cell_temperature = cell_temperatures[0];
 8015a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a3e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			}
			if (maximum_cell_voltage < cell_voltages[0]) {
 8015a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a48:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8015a4c:	f7eb f838 	bl	8000ac0 <__aeabi_dcmplt>
 8015a50:	4603      	mov	r3, r0
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d004      	beq.n	8015a60 <can1_ams_status_1_tx_callback+0xd8>
				maximum_cell_voltage = cell_voltages[0];
 8015a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a5c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			}
			if (minimum_cell_voltage > cell_voltages[0]) {
 8015a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a66:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8015a6a:	f7eb f847 	bl	8000afc <__aeabi_dcmpgt>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d004      	beq.n	8015a7e <can1_ams_status_1_tx_callback+0xf6>
				minimum_cell_voltage = cell_voltages[0];
 8015a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a7a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		for (int i = 0; i < 126; i++) {
 8015a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a80:	3301      	adds	r3, #1
 8015a82:	637b      	str	r3, [r7, #52]	; 0x34
 8015a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a86:	2b7d      	cmp	r3, #125	; 0x7d
 8015a88:	ddbd      	ble.n	8015a06 <can1_ams_status_1_tx_callback+0x7e>
			}

		}

		ams_status_1->air1_closed = get_air_minus_ext();
 8015a8a:	f001 fbc3 	bl	8017214 <get_air_minus_ext>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	461a      	mov	r2, r3
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	701a      	strb	r2, [r3, #0]
		ams_status_1->air2_closed = get_air_plus_ext();
 8015a96:	f001 fb93 	bl	80171c0 <get_air_plus_ext>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	461a      	mov	r2, r3
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	705a      	strb	r2, [r3, #1]
		ams_status_1->ams_error = get_ams_error_latched_ext();
 8015aa2:	f001 fc0b 	bl	80172bc <get_ams_error_latched_ext>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	461a      	mov	r2, r3
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	709a      	strb	r2, [r3, #2]
		ams_status_1->imd_error = get_imd_error_latched_ext();
 8015aae:	f001 fc21 	bl	80172f4 <get_imd_error_latched_ext>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	461a      	mov	r2, r3
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	741a      	strb	r2, [r3, #16]
		ams_status_1->charging_status = charger.enable_charger;
 8015aba:	4b1e      	ldr	r3, [pc, #120]	; (8015b34 <can1_ams_status_1_tx_callback+0x1ac>)
 8015abc:	7c1a      	ldrb	r2, [r3, #16]
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	70da      	strb	r2, [r3, #3]
		ams_status_1->fan_speed = pPID.duty_cycle;
 8015ac2:	4b1d      	ldr	r3, [pc, #116]	; (8015b38 <can1_ams_status_1_tx_callback+0x1b0>)
 8015ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac8:	6879      	ldr	r1, [r7, #4]
 8015aca:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ams_status_1->max_cell_temperature = maximum_cell_temperature;
 8015ace:	6879      	ldr	r1, [r7, #4]
 8015ad0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8015ad4:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ams_status_1->max_cell_voltage = maximum_cell_voltage;
 8015ad8:	6879      	ldr	r1, [r7, #4]
 8015ada:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015ade:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ams_status_1->min_cell_temperature = minimum_cell_temperature;
 8015ae2:	6879      	ldr	r1, [r7, #4]
 8015ae4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8015ae8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		ams_status_1->min_cell_voltage = minimum_cell_voltage;
 8015aec:	6879      	ldr	r1, [r7, #4]
 8015aee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8015af2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		ams_status_1->pre_charge_status = 1;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	2201      	movs	r2, #1
 8015afa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		ams_status_1->sc_closed = get_sc_probe_ext();
 8015afe:	f001 fc05 	bl	801730c <get_sc_probe_ext>
 8015b02:	4603      	mov	r3, r0
 8015b04:	461a      	mov	r2, r3
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		ams_status_1->state_of_charge = CSE_Y.soc;
 8015b0c:	4b0b      	ldr	r3, [pc, #44]	; (8015b3c <can1_ams_status_1_tx_callback+0x1b4>)
 8015b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b12:	6879      	ldr	r1, [r7, #4]
 8015b14:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

		return 1;
 8015b18:	2301      	movs	r3, #1
 8015b1a:	e000      	b.n	8015b1e <can1_ams_status_1_tx_callback+0x196>
	} else {
		return 0;
 8015b1c:	2300      	movs	r3, #0
	}

}
 8015b1e:	4618      	mov	r0, r3
 8015b20:	3758      	adds	r7, #88	; 0x58
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}
 8015b26:	bf00      	nop
 8015b28:	2001a89c 	.word	0x2001a89c
 8015b2c:	2001a8a0 	.word	0x2001a8a0
 8015b30:	2001a8ac 	.word	0x2001a8ac
 8015b34:	2001a860 	.word	0x2001a860
 8015b38:	2001a878 	.word	0x2001a878
 8015b3c:	2001b3f0 	.word	0x2001b3f0

08015b40 <can1_ams_temperatures_tx_callback>:

uint8_t can1_ams_temperatures_tx_callback(ams_temperatures_t *ams_temperatures) {
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b082      	sub	sp, #8
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
	return xQueuePeek(temperatures_queue, &ams_temperatures->aux_1_temperature,
 8015b48:	4b06      	ldr	r3, [pc, #24]	; (8015b64 <can1_ams_temperatures_tx_callback+0x24>)
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	6879      	ldr	r1, [r7, #4]
 8015b4e:	2200      	movs	r2, #0
 8015b50:	4618      	mov	r0, r3
 8015b52:	f013 faaf 	bl	80290b4 <xQueuePeek>
 8015b56:	4603      	mov	r3, r0
 8015b58:	b2db      	uxtb	r3, r3
			0);
}
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	3708      	adds	r7, #8
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}
 8015b62:	bf00      	nop
 8015b64:	2001a8ac 	.word	0x2001a8ac

08015b68 <can1_ams_cell_voltages_tx_callback>:

uint8_t can1_ams_cell_voltages_tx_callback(
		ams_cell_voltages_t *ams_cell_voltages) {
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b084      	sub	sp, #16
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
	double *cell_voltages;
	if (xQueuePeek(cell_voltages_queue, &cell_voltages, 0)) {
 8015b70:	4b0c      	ldr	r3, [pc, #48]	; (8015ba4 <can1_ams_cell_voltages_tx_callback+0x3c>)
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	f107 010c 	add.w	r1, r7, #12
 8015b78:	2200      	movs	r2, #0
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f013 fa9a 	bl	80290b4 <xQueuePeek>
 8015b80:	4603      	mov	r3, r0
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d008      	beq.n	8015b98 <can1_ams_cell_voltages_tx_callback+0x30>
		memcpy(&ams_cell_voltages->v1s1, cell_voltages, sizeof(double) * 126);
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	68f9      	ldr	r1, [r7, #12]
 8015b8a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f017 f8d8 	bl	802cd44 <memcpy>
		return 0;
 8015b94:	2300      	movs	r3, #0
 8015b96:	e000      	b.n	8015b9a <can1_ams_cell_voltages_tx_callback+0x32>
	} else {
		return 1;
 8015b98:	2301      	movs	r3, #1
	}
}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	3710      	adds	r7, #16
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bd80      	pop	{r7, pc}
 8015ba2:	bf00      	nop
 8015ba4:	2001a89c 	.word	0x2001a89c

08015ba8 <can1_ams_cell_temperatures_tx_callback>:

uint8_t can1_ams_cell_temperatures_tx_callback(
		ams_cell_temperatures_t *ams_cell_temperatures) {
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b084      	sub	sp, #16
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
	double *cell_temperatures;
	if (xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)) {
 8015bb0:	4b0c      	ldr	r3, [pc, #48]	; (8015be4 <can1_ams_cell_temperatures_tx_callback+0x3c>)
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	f107 010c 	add.w	r1, r7, #12
 8015bb8:	2200      	movs	r2, #0
 8015bba:	4618      	mov	r0, r3
 8015bbc:	f013 fa7a 	bl	80290b4 <xQueuePeek>
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d008      	beq.n	8015bd8 <can1_ams_cell_temperatures_tx_callback+0x30>
		memcpy(&ams_cell_temperatures->t1s1, cell_temperatures,
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	68f9      	ldr	r1, [r7, #12]
 8015bca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f017 f8b8 	bl	802cd44 <memcpy>
				sizeof(double) * 60);
		return 0;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	e000      	b.n	8015bda <can1_ams_cell_temperatures_tx_callback+0x32>
	} else {
		return 1;
 8015bd8:	2301      	movs	r3, #1
	}
}
 8015bda:	4618      	mov	r0, r3
 8015bdc:	3710      	adds	r7, #16
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}
 8015be2:	bf00      	nop
 8015be4:	2001a8a0 	.word	0x2001a8a0

08015be8 <can2_charger_config_rx_callback>:
	dbu_status_1->activate_ts_button = SIM0_U.drive && !SIM0_U.charge;
	dbu_status_1->ready_to_drive_button = SIM0_U.charge && SIM0_U.drive;
	return 1;
}

void can2_charger_config_rx_callback(charger_config_t *charger_config) {
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b082      	sub	sp, #8
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
	SIM0_U.CurrentLimit = charger_config->msg_set_current_limit;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bf6:	490b      	ldr	r1, [pc, #44]	; (8015c24 <can2_charger_config_rx_callback+0x3c>)
 8015bf8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	SIM0_U.VoltageLimit = charger_config->msg_set_voltage_limit;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015c02:	4908      	ldr	r1, [pc, #32]	; (8015c24 <can2_charger_config_rx_callback+0x3c>)
 8015c04:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	SIM0_U.EnableCharge = charger_config->msg_set_enabled;
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	7a1b      	ldrb	r3, [r3, #8]
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f7ea fc6b 	bl	80004e8 <__aeabi_ui2d>
 8015c12:	4602      	mov	r2, r0
 8015c14:	460b      	mov	r3, r1
 8015c16:	4903      	ldr	r1, [pc, #12]	; (8015c24 <can2_charger_config_rx_callback+0x3c>)
 8015c18:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8015c1c:	bf00      	nop
 8015c1e:	3708      	adds	r7, #8
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd80      	pop	{r7, pc}
 8015c24:	2001b400 	.word	0x2001b400

08015c28 <swap>:
#define _abc(a,b,c) _abcd(a,b,c,0)_abcd(a,b,c,1)_abcd(a,b,c,2)_abcd(a,b,c,3)_abcd(a,b,c,4)_abcd(a,b,c,5)_abcd(a,b,c,6)
#define _ab(a,b) _abc(a,b,0)_abc(a,b,1)_abc(a,b,2)
#define _a(a) _ab(a,0)_ab(a,1)_ab(a,2)
		_a(0)_a(1) };

void swap(uint8_t g) {
 8015c28:	b480      	push	{r7}
 8015c2a:	b085      	sub	sp, #20
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	4603      	mov	r3, r0
 8015c30:	71fb      	strb	r3, [r7, #7]
	uint8_t _I = sorted_indices[g];
 8015c32:	79fb      	ldrb	r3, [r7, #7]
 8015c34:	4a0a      	ldr	r2, [pc, #40]	; (8015c60 <swap+0x38>)
 8015c36:	5cd3      	ldrb	r3, [r2, r3]
 8015c38:	73fb      	strb	r3, [r7, #15]
	sorted_indices[g] = sorted_indices[g - 1];
 8015c3a:	79fb      	ldrb	r3, [r7, #7]
 8015c3c:	1e5a      	subs	r2, r3, #1
 8015c3e:	79fb      	ldrb	r3, [r7, #7]
 8015c40:	4907      	ldr	r1, [pc, #28]	; (8015c60 <swap+0x38>)
 8015c42:	5c89      	ldrb	r1, [r1, r2]
 8015c44:	4a06      	ldr	r2, [pc, #24]	; (8015c60 <swap+0x38>)
 8015c46:	54d1      	strb	r1, [r2, r3]
	sorted_indices[g - 1] = _I;
 8015c48:	79fb      	ldrb	r3, [r7, #7]
 8015c4a:	3b01      	subs	r3, #1
 8015c4c:	4904      	ldr	r1, [pc, #16]	; (8015c60 <swap+0x38>)
 8015c4e:	7bfa      	ldrb	r2, [r7, #15]
 8015c50:	54ca      	strb	r2, [r1, r3]
}
 8015c52:	bf00      	nop
 8015c54:	3714      	adds	r7, #20
 8015c56:	46bd      	mov	sp, r7
 8015c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5c:	4770      	bx	lr
 8015c5e:	bf00      	nop
 8015c60:	20000000 	.word	0x20000000

08015c64 <compare>:

uint8_t compare(uint8_t g) {
 8015c64:	b590      	push	{r4, r7, lr}
 8015c66:	b083      	sub	sp, #12
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	71fb      	strb	r3, [r7, #7]
	return cell_voltages[sorted_indices[g]] < cell_voltages[sorted_indices[g - 1]];
 8015c6e:	4b10      	ldr	r3, [pc, #64]	; (8015cb0 <compare+0x4c>)
 8015c70:	681a      	ldr	r2, [r3, #0]
 8015c72:	79fb      	ldrb	r3, [r7, #7]
 8015c74:	490f      	ldr	r1, [pc, #60]	; (8015cb4 <compare+0x50>)
 8015c76:	5ccb      	ldrb	r3, [r1, r3]
 8015c78:	00db      	lsls	r3, r3, #3
 8015c7a:	4413      	add	r3, r2
 8015c7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c80:	4b0b      	ldr	r3, [pc, #44]	; (8015cb0 <compare+0x4c>)
 8015c82:	681a      	ldr	r2, [r3, #0]
 8015c84:	79fb      	ldrb	r3, [r7, #7]
 8015c86:	3b01      	subs	r3, #1
 8015c88:	4c0a      	ldr	r4, [pc, #40]	; (8015cb4 <compare+0x50>)
 8015c8a:	5ce3      	ldrb	r3, [r4, r3]
 8015c8c:	00db      	lsls	r3, r3, #3
 8015c8e:	4413      	add	r3, r2
 8015c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c94:	2401      	movs	r4, #1
 8015c96:	f7ea ff13 	bl	8000ac0 <__aeabi_dcmplt>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d101      	bne.n	8015ca4 <compare+0x40>
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	461c      	mov	r4, r3
 8015ca4:	b2e3      	uxtb	r3, r4
}
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	370c      	adds	r7, #12
 8015caa:	46bd      	mov	sp, r7
 8015cac:	bd90      	pop	{r4, r7, pc}
 8015cae:	bf00      	nop
 8015cb0:	2001b160 	.word	0x2001b160
 8015cb4:	20000000 	.word	0x20000000

08015cb8 <gnome_sort>:

void gnome_sort() {
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b082      	sub	sp, #8
 8015cbc:	af00      	add	r7, sp, #0
	uint8_t gnome = 0;
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	71fb      	strb	r3, [r7, #7]
	while (gnome < 126) {
 8015cc2:	e014      	b.n	8015cee <gnome_sort+0x36>
		if ((gnome == 0) || compare(gnome)) {
 8015cc4:	79fb      	ldrb	r3, [r7, #7]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d006      	beq.n	8015cd8 <gnome_sort+0x20>
 8015cca:	79fb      	ldrb	r3, [r7, #7]
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f7ff ffc9 	bl	8015c64 <compare>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d003      	beq.n	8015ce0 <gnome_sort+0x28>
			gnome++;
 8015cd8:	79fb      	ldrb	r3, [r7, #7]
 8015cda:	3301      	adds	r3, #1
 8015cdc:	71fb      	strb	r3, [r7, #7]
 8015cde:	e006      	b.n	8015cee <gnome_sort+0x36>
		} else {
			swap(gnome);
 8015ce0:	79fb      	ldrb	r3, [r7, #7]
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	f7ff ffa0 	bl	8015c28 <swap>
			gnome--;
 8015ce8:	79fb      	ldrb	r3, [r7, #7]
 8015cea:	3b01      	subs	r3, #1
 8015cec:	71fb      	strb	r3, [r7, #7]
	while (gnome < 126) {
 8015cee:	79fb      	ldrb	r3, [r7, #7]
 8015cf0:	2b7d      	cmp	r3, #125	; 0x7d
 8015cf2:	d9e7      	bls.n	8015cc4 <gnome_sort+0xc>
		}
	}
}
 8015cf4:	bf00      	nop
 8015cf6:	bf00      	nop
 8015cf8:	3708      	adds	r7, #8
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}
	...

08015d00 <do_cell_balancing>:

uint8_t do_cell_balancing() {
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b082      	sub	sp, #8
 8015d04:	af00      	add	r7, sp, #0
	if (xQueuePeek(cell_voltages_queue, &cell_voltages, 0)) {
 8015d06:	4b19      	ldr	r3, [pc, #100]	; (8015d6c <do_cell_balancing+0x6c>)
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	4918      	ldr	r1, [pc, #96]	; (8015d70 <do_cell_balancing+0x70>)
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f013 f9d0 	bl	80290b4 <xQueuePeek>
 8015d14:	4603      	mov	r3, r0
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d023      	beq.n	8015d62 <do_cell_balancing+0x62>
		gnome_sort();
 8015d1a:	f7ff ffcd 	bl	8015cb8 <gnome_sort>
		for (int i = 0; i < 126; i++) {
 8015d1e:	2300      	movs	r3, #0
 8015d20:	607b      	str	r3, [r7, #4]
 8015d22:	e009      	b.n	8015d38 <do_cell_balancing+0x38>
			set_balance_ext(0, i, NULL);
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	b2db      	uxtb	r3, r3
 8015d28:	2200      	movs	r2, #0
 8015d2a:	4619      	mov	r1, r3
 8015d2c:	2000      	movs	r0, #0
 8015d2e:	f001 fb05 	bl	801733c <set_balance_ext>
		for (int i = 0; i < 126; i++) {
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	3301      	adds	r3, #1
 8015d36:	607b      	str	r3, [r7, #4]
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2b7d      	cmp	r3, #125	; 0x7d
 8015d3c:	ddf2      	ble.n	8015d24 <do_cell_balancing+0x24>
		}
		for (int i = 0; i < 41; i++) {
 8015d3e:	2300      	movs	r3, #0
 8015d40:	603b      	str	r3, [r7, #0]
 8015d42:	e00b      	b.n	8015d5c <do_cell_balancing+0x5c>
			set_balance_ext(1, sorted_indices[i], NULL);
 8015d44:	4a0b      	ldr	r2, [pc, #44]	; (8015d74 <do_cell_balancing+0x74>)
 8015d46:	683b      	ldr	r3, [r7, #0]
 8015d48:	4413      	add	r3, r2
 8015d4a:	781b      	ldrb	r3, [r3, #0]
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	4619      	mov	r1, r3
 8015d50:	2001      	movs	r0, #1
 8015d52:	f001 faf3 	bl	801733c <set_balance_ext>
		for (int i = 0; i < 41; i++) {
 8015d56:	683b      	ldr	r3, [r7, #0]
 8015d58:	3301      	adds	r3, #1
 8015d5a:	603b      	str	r3, [r7, #0]
 8015d5c:	683b      	ldr	r3, [r7, #0]
 8015d5e:	2b28      	cmp	r3, #40	; 0x28
 8015d60:	ddf0      	ble.n	8015d44 <do_cell_balancing+0x44>

		}
	}
	return 1;
 8015d62:	2301      	movs	r3, #1
}
 8015d64:	4618      	mov	r0, r3
 8015d66:	3708      	adds	r7, #8
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}
 8015d6c:	2001a89c 	.word	0x2001a89c
 8015d70:	2001b160 	.word	0x2001b160
 8015d74:	20000000 	.word	0x20000000

08015d78 <end_cell_balancing>:

uint8_t end_cell_balancing() {
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b082      	sub	sp, #8
 8015d7c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 126; i++) {
 8015d7e:	2300      	movs	r3, #0
 8015d80:	607b      	str	r3, [r7, #4]
 8015d82:	e009      	b.n	8015d98 <end_cell_balancing+0x20>
		set_balance_ext(0, i, NULL);
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	b2db      	uxtb	r3, r3
 8015d88:	2200      	movs	r2, #0
 8015d8a:	4619      	mov	r1, r3
 8015d8c:	2000      	movs	r0, #0
 8015d8e:	f001 fad5 	bl	801733c <set_balance_ext>
	for (int i = 0; i < 126; i++) {
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	3301      	adds	r3, #1
 8015d96:	607b      	str	r3, [r7, #4]
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	2b7d      	cmp	r3, #125	; 0x7d
 8015d9c:	ddf2      	ble.n	8015d84 <end_cell_balancing+0xc>
	}
	return 1;
 8015d9e:	2301      	movs	r3, #1
}
 8015da0:	4618      	mov	r0, r3
 8015da2:	3708      	adds	r7, #8
 8015da4:	46bd      	mov	sp, r7
 8015da6:	bd80      	pop	{r7, pc}

08015da8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b082      	sub	sp, #8
 8015dac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8015dae:	2300      	movs	r3, #0
 8015db0:	607b      	str	r3, [r7, #4]
 8015db2:	4b0c      	ldr	r3, [pc, #48]	; (8015de4 <MX_DMA_Init+0x3c>)
 8015db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015db6:	4a0b      	ldr	r2, [pc, #44]	; (8015de4 <MX_DMA_Init+0x3c>)
 8015db8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8015dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8015dbe:	4b09      	ldr	r3, [pc, #36]	; (8015de4 <MX_DMA_Init+0x3c>)
 8015dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015dc6:	607b      	str	r3, [r7, #4]
 8015dc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8015dca:	2200      	movs	r2, #0
 8015dcc:	2105      	movs	r1, #5
 8015dce:	2038      	movs	r0, #56	; 0x38
 8015dd0:	f00e fd1a 	bl	8024808 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8015dd4:	2038      	movs	r0, #56	; 0x38
 8015dd6:	f00e fd33 	bl	8024840 <HAL_NVIC_EnableIRQ>

}
 8015dda:	bf00      	nop
 8015ddc:	3708      	adds	r7, #8
 8015dde:	46bd      	mov	sp, r7
 8015de0:	bd80      	pop	{r7, pc}
 8015de2:	bf00      	nop
 8015de4:	40023800 	.word	0x40023800

08015de8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b08a      	sub	sp, #40	; 0x28
 8015dec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015dee:	f107 0314 	add.w	r3, r7, #20
 8015df2:	2200      	movs	r2, #0
 8015df4:	601a      	str	r2, [r3, #0]
 8015df6:	605a      	str	r2, [r3, #4]
 8015df8:	609a      	str	r2, [r3, #8]
 8015dfa:	60da      	str	r2, [r3, #12]
 8015dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8015dfe:	2300      	movs	r3, #0
 8015e00:	613b      	str	r3, [r7, #16]
 8015e02:	4b5c      	ldr	r3, [pc, #368]	; (8015f74 <MX_GPIO_Init+0x18c>)
 8015e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e06:	4a5b      	ldr	r2, [pc, #364]	; (8015f74 <MX_GPIO_Init+0x18c>)
 8015e08:	f043 0310 	orr.w	r3, r3, #16
 8015e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8015e0e:	4b59      	ldr	r3, [pc, #356]	; (8015f74 <MX_GPIO_Init+0x18c>)
 8015e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e12:	f003 0310 	and.w	r3, r3, #16
 8015e16:	613b      	str	r3, [r7, #16]
 8015e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	60fb      	str	r3, [r7, #12]
 8015e1e:	4b55      	ldr	r3, [pc, #340]	; (8015f74 <MX_GPIO_Init+0x18c>)
 8015e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e22:	4a54      	ldr	r2, [pc, #336]	; (8015f74 <MX_GPIO_Init+0x18c>)
 8015e24:	f043 0304 	orr.w	r3, r3, #4
 8015e28:	6313      	str	r3, [r2, #48]	; 0x30
 8015e2a:	4b52      	ldr	r3, [pc, #328]	; (8015f74 <MX_GPIO_Init+0x18c>)
 8015e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e2e:	f003 0304 	and.w	r3, r3, #4
 8015e32:	60fb      	str	r3, [r7, #12]
 8015e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8015e36:	2300      	movs	r3, #0
 8015e38:	60bb      	str	r3, [r7, #8]
 8015e3a:	4b4e      	ldr	r3, [pc, #312]	; (8015f74 <MX_GPIO_Init+0x18c>)
 8015e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e3e:	4a4d      	ldr	r2, [pc, #308]	; (8015f74 <MX_GPIO_Init+0x18c>)
 8015e40:	f043 0301 	orr.w	r3, r3, #1
 8015e44:	6313      	str	r3, [r2, #48]	; 0x30
 8015e46:	4b4b      	ldr	r3, [pc, #300]	; (8015f74 <MX_GPIO_Init+0x18c>)
 8015e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e4a:	f003 0301 	and.w	r3, r3, #1
 8015e4e:	60bb      	str	r3, [r7, #8]
 8015e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8015e52:	2300      	movs	r3, #0
 8015e54:	607b      	str	r3, [r7, #4]
 8015e56:	4b47      	ldr	r3, [pc, #284]	; (8015f74 <MX_GPIO_Init+0x18c>)
 8015e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e5a:	4a46      	ldr	r2, [pc, #280]	; (8015f74 <MX_GPIO_Init+0x18c>)
 8015e5c:	f043 0302 	orr.w	r3, r3, #2
 8015e60:	6313      	str	r3, [r2, #48]	; 0x30
 8015e62:	4b44      	ldr	r3, [pc, #272]	; (8015f74 <MX_GPIO_Init+0x18c>)
 8015e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e66:	f003 0302 	and.w	r3, r3, #2
 8015e6a:	607b      	str	r3, [r7, #4]
 8015e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin, GPIO_PIN_RESET);
 8015e6e:	2200      	movs	r2, #0
 8015e70:	210e      	movs	r1, #14
 8015e72:	4841      	ldr	r0, [pc, #260]	; (8015f78 <MX_GPIO_Init+0x190>)
 8015e74:	f00f fa16 	bl	80252a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 8015e78:	2200      	movs	r2, #0
 8015e7a:	21e0      	movs	r1, #224	; 0xe0
 8015e7c:	483f      	ldr	r0, [pc, #252]	; (8015f7c <MX_GPIO_Init+0x194>)
 8015e7e:	f00f fa11 	bl	80252a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin, GPIO_PIN_RESET);
 8015e82:	2200      	movs	r2, #0
 8015e84:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8015e88:	483d      	ldr	r0, [pc, #244]	; (8015f80 <MX_GPIO_Init+0x198>)
 8015e8a:	f00f fa0b 	bl	80252a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin;
 8015e8e:	230e      	movs	r3, #14
 8015e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015e92:	2301      	movs	r3, #1
 8015e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e96:	2300      	movs	r3, #0
 8015e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8015e9e:	f107 0314 	add.w	r3, r7, #20
 8015ea2:	4619      	mov	r1, r3
 8015ea4:	4834      	ldr	r0, [pc, #208]	; (8015f78 <MX_GPIO_Init+0x190>)
 8015ea6:	f00f f849 	bl	8024f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIR_plus_closed_Pin|AIR_minus_closed_Pin|precharge_closed_Pin;
 8015eaa:	2370      	movs	r3, #112	; 0x70
 8015eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8015eae:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8015eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8015eb8:	f107 0314 	add.w	r3, r7, #20
 8015ebc:	4619      	mov	r1, r3
 8015ebe:	482e      	ldr	r0, [pc, #184]	; (8015f78 <MX_GPIO_Init+0x190>)
 8015ec0:	f00f f83c 	bl	8024f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin;
 8015ec4:	23e0      	movs	r3, #224	; 0xe0
 8015ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015ec8:	2301      	movs	r3, #1
 8015eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ecc:	2300      	movs	r3, #0
 8015ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015ed4:	f107 0314 	add.w	r3, r7, #20
 8015ed8:	4619      	mov	r1, r3
 8015eda:	4828      	ldr	r0, [pc, #160]	; (8015f7c <MX_GPIO_Init+0x194>)
 8015edc:	f00f f82e 	bl	8024f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin;
 8015ee0:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 8015ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015eea:	2300      	movs	r3, #0
 8015eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015eee:	2300      	movs	r3, #0
 8015ef0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015ef2:	f107 0314 	add.w	r3, r7, #20
 8015ef6:	4619      	mov	r1, r3
 8015ef8:	4821      	ldr	r0, [pc, #132]	; (8015f80 <MX_GPIO_Init+0x198>)
 8015efa:	f00f f81f 	bl	8024f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_probe_Pin;
 8015efe:	2302      	movs	r3, #2
 8015f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015f02:	2300      	movs	r3, #0
 8015f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f06:	2300      	movs	r3, #0
 8015f08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SC_probe_GPIO_Port, &GPIO_InitStruct);
 8015f0a:	f107 0314 	add.w	r3, r7, #20
 8015f0e:	4619      	mov	r1, r3
 8015f10:	481c      	ldr	r0, [pc, #112]	; (8015f84 <MX_GPIO_Init+0x19c>)
 8015f12:	f00f f813 	bl	8024f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMD_ok_Pin;
 8015f16:	2304      	movs	r3, #4
 8015f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8015f1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8015f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f20:	2300      	movs	r3, #0
 8015f22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMD_ok_GPIO_Port, &GPIO_InitStruct);
 8015f24:	f107 0314 	add.w	r3, r7, #20
 8015f28:	4619      	mov	r1, r3
 8015f2a:	4816      	ldr	r0, [pc, #88]	; (8015f84 <MX_GPIO_Init+0x19c>)
 8015f2c:	f00f f806 	bl	8024f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AMS_error_latched_Pin|IMD_error_latched_Pin;
 8015f30:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8015f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015f36:	2300      	movs	r3, #0
 8015f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015f3e:	f107 0314 	add.w	r3, r7, #20
 8015f42:	4619      	mov	r1, r3
 8015f44:	480e      	ldr	r0, [pc, #56]	; (8015f80 <MX_GPIO_Init+0x198>)
 8015f46:	f00e fff9 	bl	8024f3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	2105      	movs	r1, #5
 8015f4e:	200a      	movs	r0, #10
 8015f50:	f00e fc5a 	bl	8024808 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8015f54:	200a      	movs	r0, #10
 8015f56:	f00e fc73 	bl	8024840 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	2105      	movs	r1, #5
 8015f5e:	2017      	movs	r0, #23
 8015f60:	f00e fc52 	bl	8024808 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8015f64:	2017      	movs	r0, #23
 8015f66:	f00e fc6b 	bl	8024840 <HAL_NVIC_EnableIRQ>

}
 8015f6a:	bf00      	nop
 8015f6c:	3728      	adds	r7, #40	; 0x28
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd80      	pop	{r7, pc}
 8015f72:	bf00      	nop
 8015f74:	40023800 	.word	0x40023800
 8015f78:	40021000 	.word	0x40021000
 8015f7c:	40020000 	.word	0x40020000
 8015f80:	40020800 	.word	0x40020800
 8015f84:	40020400 	.word	0x40020400

08015f88 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

/* RELAY MONITORING */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8015f88:	b590      	push	{r4, r7, lr}
 8015f8a:	b083      	sub	sp, #12
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	4603      	mov	r3, r0
 8015f90:	80fb      	strh	r3, [r7, #6]

#ifndef SIMULATION
	switch (GPIO_Pin) {
 8015f92:	88fb      	ldrh	r3, [r7, #6]
 8015f94:	2b40      	cmp	r3, #64	; 0x40
 8015f96:	d013      	beq.n	8015fc0 <HAL_GPIO_EXTI_Callback+0x38>
 8015f98:	2b40      	cmp	r3, #64	; 0x40
 8015f9a:	dc39      	bgt.n	8016010 <HAL_GPIO_EXTI_Callback+0x88>
 8015f9c:	2b20      	cmp	r3, #32
 8015f9e:	d01a      	beq.n	8015fd6 <HAL_GPIO_EXTI_Callback+0x4e>
 8015fa0:	2b20      	cmp	r3, #32
 8015fa2:	dc35      	bgt.n	8016010 <HAL_GPIO_EXTI_Callback+0x88>
 8015fa4:	2b04      	cmp	r3, #4
 8015fa6:	d002      	beq.n	8015fae <HAL_GPIO_EXTI_Callback+0x26>
 8015fa8:	2b10      	cmp	r3, #16
 8015faa:	d020      	beq.n	8015fee <HAL_GPIO_EXTI_Callback+0x66>
			__raise_ams_error_isr(ERROR_AIR_PLUS);
		}
		break;
	}
#endif
}
 8015fac:	e030      	b.n	8016010 <HAL_GPIO_EXTI_Callback+0x88>
		if (!get_imd_ok_ext()) {
 8015fae:	f001 f9b9 	bl	8017324 <get_imd_ok_ext>
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d126      	bne.n	8016006 <HAL_GPIO_EXTI_Callback+0x7e>
			__raise_imd_error_isr(ERROR_IMD);
 8015fb8:	2002      	movs	r0, #2
 8015fba:	f000 fa99 	bl	80164f0 <__raise_imd_error_isr>
		break;
 8015fbe:	e022      	b.n	8016006 <HAL_GPIO_EXTI_Callback+0x7e>
		if (get_precharge_ext() != get_set_precharge_ext()) {
 8015fc0:	f001 f952 	bl	8017268 <get_precharge_ext>
 8015fc4:	4604      	mov	r4, r0
 8015fc6:	f001 f95b 	bl	8017280 <get_set_precharge_ext>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	429c      	cmp	r4, r3
 8015fce:	d002      	beq.n	8015fd6 <HAL_GPIO_EXTI_Callback+0x4e>
			__raise_ams_error_isr(ERROR_PRECHARGE);
 8015fd0:	202b      	movs	r0, #43	; 0x2b
 8015fd2:	f000 fa5b 	bl	801648c <__raise_ams_error_isr>
		if (get_air_minus_ext() != get_set_air_minus_ext()) {
 8015fd6:	f001 f91d 	bl	8017214 <get_air_minus_ext>
 8015fda:	4604      	mov	r4, r0
 8015fdc:	f001 f926 	bl	801722c <get_set_air_minus_ext>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	429c      	cmp	r4, r3
 8015fe4:	d011      	beq.n	801600a <HAL_GPIO_EXTI_Callback+0x82>
			__raise_ams_error_isr(ERROR_AIR_MINUS);
 8015fe6:	2029      	movs	r0, #41	; 0x29
 8015fe8:	f000 fa50 	bl	801648c <__raise_ams_error_isr>
		break;
 8015fec:	e00d      	b.n	801600a <HAL_GPIO_EXTI_Callback+0x82>
		if (get_air_plus_ext() != get_set_air_plus_ext()) {
 8015fee:	f001 f8e7 	bl	80171c0 <get_air_plus_ext>
 8015ff2:	4604      	mov	r4, r0
 8015ff4:	f001 f8f0 	bl	80171d8 <get_set_air_plus_ext>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	429c      	cmp	r4, r3
 8015ffc:	d007      	beq.n	801600e <HAL_GPIO_EXTI_Callback+0x86>
			__raise_ams_error_isr(ERROR_AIR_PLUS);
 8015ffe:	202a      	movs	r0, #42	; 0x2a
 8016000:	f000 fa44 	bl	801648c <__raise_ams_error_isr>
		break;
 8016004:	e003      	b.n	801600e <HAL_GPIO_EXTI_Callback+0x86>
		break;
 8016006:	bf00      	nop
 8016008:	e002      	b.n	8016010 <HAL_GPIO_EXTI_Callback+0x88>
		break;
 801600a:	bf00      	nop
 801600c:	e000      	b.n	8016010 <HAL_GPIO_EXTI_Callback+0x88>
		break;
 801600e:	bf00      	nop
}
 8016010:	bf00      	nop
 8016012:	370c      	adds	r7, #12
 8016014:	46bd      	mov	sp, r7
 8016016:	bd90      	pop	{r4, r7, pc}

08016018 <main>:
		sizeof(ams_state_t), };

const queue_info error_queue_info = { .element_count = 1, .element_size =
		sizeof(error_t), };

int main() {
 8016018:	b580      	push	{r7, lr}
 801601a:	af00      	add	r7, sp, #0
	/* INSTRUMENTATE */
	SEGGER_SYSVIEW_Conf();
 801601c:	f7fe fdea 	bl	8014bf4 <SEGGER_SYSVIEW_Conf>

	/* RESET PERIPHERALS, ETC. */
	HAL_Init();
 8016020:	f00c feb2 	bl	8022d88 <HAL_Init>

	/* CONFIGURE SYSTEM CLOCK */
	SystemClock_Config();
 8016024:	f000 f922 	bl	801626c <SystemClock_Config>

	/* INITIALZE PERIPHERALS */
	MX_GPIO_Init();
 8016028:	f7ff fede 	bl	8015de8 <MX_GPIO_Init>
	MX_SPI2_Init();
 801602c:	f001 f994 	bl	8017358 <MX_SPI2_Init>
	MX_CAN1_Init();
 8016030:	f7ff fa60 	bl	80154f4 <MX_CAN1_Init>
	MX_CAN2_Init();
 8016034:	f7ff fa94 	bl	8015560 <MX_CAN2_Init>
	MX_TIM1_Init();
 8016038:	f001 fb5a 	bl	80176f0 <MX_TIM1_Init>
	MX_DMA_Init();
 801603c:	f7ff feb4 	bl	8015da8 <MX_DMA_Init>
	MX_ADC1_Init();
 8016040:	f7fe ff10 	bl	8014e64 <MX_ADC1_Init>
	MX_TIM3_Init();
 8016044:	f001 fc90 	bl	8017968 <MX_TIM3_Init>
	MX_TIM2_Init();
 8016048:	f001 fbf2 	bl	8017830 <MX_TIM2_Init>

	initialize_CAN(&hcan1, &hcan2);
 801604c:	4962      	ldr	r1, [pc, #392]	; (80161d8 <main+0x1c0>)
 801604e:	4863      	ldr	r0, [pc, #396]	; (80161dc <main+0x1c4>)
 8016050:	f7fd ff84 	bl	8013f5c <initialize_CAN>
	initialize_LTC(&hspi2);
 8016054:	4862      	ldr	r0, [pc, #392]	; (80161e0 <main+0x1c8>)
 8016056:	f7fe fa61 	bl	801451c <initialize_LTC>

	/* Initialize kernel */
	osKernelInitialize();
 801605a:	f012 f9df 	bl	802841c <osKernelInitialize>

	/* INITIALIZE QUEUES */

	temperatures_queue = xQueueCreate(temperatures_queue_info.element_count,
 801605e:	2301      	movs	r3, #1
 8016060:	2220      	movs	r2, #32
 8016062:	4611      	mov	r1, r2
 8016064:	2200      	movs	r2, #0
 8016066:	4618      	mov	r0, r3
 8016068:	f012 fcda 	bl	8028a20 <xQueueGenericCreate>
 801606c:	4603      	mov	r3, r0
 801606e:	4a5d      	ldr	r2, [pc, #372]	; (80161e4 <main+0x1cc>)
 8016070:	6013      	str	r3, [r2, #0]
			temperatures_queue_info.element_size);

	accumulator_voltage_queue = xQueueCreate(
 8016072:	2301      	movs	r3, #1
 8016074:	2208      	movs	r2, #8
 8016076:	4611      	mov	r1, r2
 8016078:	2200      	movs	r2, #0
 801607a:	4618      	mov	r0, r3
 801607c:	f012 fcd0 	bl	8028a20 <xQueueGenericCreate>
 8016080:	4603      	mov	r3, r0
 8016082:	4a59      	ldr	r2, [pc, #356]	; (80161e8 <main+0x1d0>)
 8016084:	6013      	str	r3, [r2, #0]
			accumulator_voltage_queue_info.element_count,
			accumulator_voltage_queue_info.element_size);

	vehicle_voltage_queue = xQueueCreate(
 8016086:	2301      	movs	r3, #1
 8016088:	2208      	movs	r2, #8
 801608a:	4611      	mov	r1, r2
 801608c:	2200      	movs	r2, #0
 801608e:	4618      	mov	r0, r3
 8016090:	f012 fcc6 	bl	8028a20 <xQueueGenericCreate>
 8016094:	4603      	mov	r3, r0
 8016096:	4a55      	ldr	r2, [pc, #340]	; (80161ec <main+0x1d4>)
 8016098:	6013      	str	r3, [r2, #0]
			vehicle_voltage_queue_info.element_count,
			vehicle_voltage_queue_info.element_size);

	accumulator_current_queue = xQueueCreate(
 801609a:	2301      	movs	r3, #1
 801609c:	2208      	movs	r2, #8
 801609e:	4611      	mov	r1, r2
 80160a0:	2200      	movs	r2, #0
 80160a2:	4618      	mov	r0, r3
 80160a4:	f012 fcbc 	bl	8028a20 <xQueueGenericCreate>
 80160a8:	4603      	mov	r3, r0
 80160aa:	4a51      	ldr	r2, [pc, #324]	; (80161f0 <main+0x1d8>)
 80160ac:	6013      	str	r3, [r2, #0]
			accumulator_current_queue_info.element_count,
			accumulator_current_queue_info.element_size);

	cell_voltages_queue = xQueueCreate(cell_voltages_queue_info.element_count,
 80160ae:	2301      	movs	r3, #1
 80160b0:	2204      	movs	r2, #4
 80160b2:	4611      	mov	r1, r2
 80160b4:	2200      	movs	r2, #0
 80160b6:	4618      	mov	r0, r3
 80160b8:	f012 fcb2 	bl	8028a20 <xQueueGenericCreate>
 80160bc:	4603      	mov	r3, r0
 80160be:	4a4d      	ldr	r2, [pc, #308]	; (80161f4 <main+0x1dc>)
 80160c0:	6013      	str	r3, [r2, #0]
			cell_voltages_queue_info.element_size);

	cell_temperatures_queue = xQueueCreate(
 80160c2:	2301      	movs	r3, #1
 80160c4:	2204      	movs	r2, #4
 80160c6:	4611      	mov	r1, r2
 80160c8:	2200      	movs	r2, #0
 80160ca:	4618      	mov	r0, r3
 80160cc:	f012 fca8 	bl	8028a20 <xQueueGenericCreate>
 80160d0:	4603      	mov	r3, r0
 80160d2:	4a49      	ldr	r2, [pc, #292]	; (80161f8 <main+0x1e0>)
 80160d4:	6013      	str	r3, [r2, #0]
			cell_temperatures_queue_info.element_count,
			cell_temperatures_queue_info.element_size);

	start_drive_queue = xQueueCreate(start_drive_queue_info.element_count,
 80160d6:	2301      	movs	r3, #1
 80160d8:	2201      	movs	r2, #1
 80160da:	4611      	mov	r1, r2
 80160dc:	2200      	movs	r2, #0
 80160de:	4618      	mov	r0, r3
 80160e0:	f012 fc9e 	bl	8028a20 <xQueueGenericCreate>
 80160e4:	4603      	mov	r3, r0
 80160e6:	4a45      	ldr	r2, [pc, #276]	; (80161fc <main+0x1e4>)
 80160e8:	6013      	str	r3, [r2, #0]
			start_drive_queue_info.element_size);

	start_charge_queue = xQueueCreate(start_charge_queue_info.element_count,
 80160ea:	2301      	movs	r3, #1
 80160ec:	2201      	movs	r2, #1
 80160ee:	4611      	mov	r1, r2
 80160f0:	2200      	movs	r2, #0
 80160f2:	4618      	mov	r0, r3
 80160f4:	f012 fc94 	bl	8028a20 <xQueueGenericCreate>
 80160f8:	4603      	mov	r3, r0
 80160fa:	4a41      	ldr	r2, [pc, #260]	; (8016200 <main+0x1e8>)
 80160fc:	6013      	str	r3, [r2, #0]
			start_charge_queue_info.element_size);

	start_balance_queue = xQueueCreate(start_balance_queue_info.element_count,
 80160fe:	2301      	movs	r3, #1
 8016100:	2201      	movs	r2, #1
 8016102:	4611      	mov	r1, r2
 8016104:	2200      	movs	r2, #0
 8016106:	4618      	mov	r0, r3
 8016108:	f012 fc8a 	bl	8028a20 <xQueueGenericCreate>
 801610c:	4603      	mov	r3, r0
 801610e:	4a3d      	ldr	r2, [pc, #244]	; (8016204 <main+0x1ec>)
 8016110:	6013      	str	r3, [r2, #0]
			start_balance_queue_info.element_size);

	state_queue = xQueueCreate(state_queue_info.element_count,
 8016112:	2301      	movs	r3, #1
 8016114:	2201      	movs	r2, #1
 8016116:	4611      	mov	r1, r2
 8016118:	2200      	movs	r2, #0
 801611a:	4618      	mov	r0, r3
 801611c:	f012 fc80 	bl	8028a20 <xQueueGenericCreate>
 8016120:	4603      	mov	r3, r0
 8016122:	4a39      	ldr	r2, [pc, #228]	; (8016208 <main+0x1f0>)
 8016124:	6013      	str	r3, [r2, #0]
			state_queue_info.element_size);

	error_queue = xQueueCreate(error_queue_info.element_count,
 8016126:	2301      	movs	r3, #1
 8016128:	2201      	movs	r2, #1
 801612a:	4611      	mov	r1, r2
 801612c:	2200      	movs	r2, #0
 801612e:	4618      	mov	r0, r3
 8016130:	f012 fc76 	bl	8028a20 <xQueueGenericCreate>
 8016134:	4603      	mov	r3, r0
 8016136:	4a35      	ldr	r2, [pc, #212]	; (801620c <main+0x1f4>)
 8016138:	6013      	str	r3, [r2, #0]
			error_queue_info.element_size);

	/* INITIALIZE TASKS */

	first_tick = 0.25 * TICK2HZ + osKernelGetTickCount(); // Wait for segger, etc
 801613a:	f012 f9b9 	bl	80284b0 <osKernelGetTickCount>
 801613e:	4603      	mov	r3, r0
 8016140:	4618      	mov	r0, r3
 8016142:	f7ea f9d1 	bl	80004e8 <__aeabi_ui2d>
 8016146:	f04f 0200 	mov.w	r2, #0
 801614a:	4b31      	ldr	r3, [pc, #196]	; (8016210 <main+0x1f8>)
 801614c:	f7ea f890 	bl	8000270 <__adddf3>
 8016150:	4602      	mov	r2, r0
 8016152:	460b      	mov	r3, r1
 8016154:	4610      	mov	r0, r2
 8016156:	4619      	mov	r1, r3
 8016158:	f7ea fd18 	bl	8000b8c <__aeabi_d2uiz>
 801615c:	4603      	mov	r3, r0
 801615e:	4a2d      	ldr	r2, [pc, #180]	; (8016214 <main+0x1fc>)
 8016160:	6013      	str	r3, [r2, #0]

	SM_task_handle = osThreadNew(start_SM_task, NULL, &SM_task_info.attributes);
 8016162:	4a2d      	ldr	r2, [pc, #180]	; (8016218 <main+0x200>)
 8016164:	2100      	movs	r1, #0
 8016166:	482d      	ldr	r0, [pc, #180]	; (801621c <main+0x204>)
 8016168:	f012 f9b7 	bl	80284da <osThreadNew>
 801616c:	4603      	mov	r3, r0
 801616e:	4a2c      	ldr	r2, [pc, #176]	; (8016220 <main+0x208>)
 8016170:	6013      	str	r3, [r2, #0]
#ifdef SIMULATION
	SIM_task_handle = osThreadNew(start_SIM_task, NULL,
			&SIM_task_info.attributes);
#endif

	CSE_task_handle = osThreadNew(start_CSE_task, NULL,
 8016172:	4a2c      	ldr	r2, [pc, #176]	; (8016224 <main+0x20c>)
 8016174:	2100      	movs	r1, #0
 8016176:	482c      	ldr	r0, [pc, #176]	; (8016228 <main+0x210>)
 8016178:	f012 f9af 	bl	80284da <osThreadNew>
 801617c:	4603      	mov	r3, r0
 801617e:	4a2b      	ldr	r2, [pc, #172]	; (801622c <main+0x214>)
 8016180:	6013      	str	r3, [r2, #0]
			&CSE_task_info.attributes);

	COOL_task_handle = osThreadNew(start_COOL_task, NULL,
 8016182:	4a2b      	ldr	r2, [pc, #172]	; (8016230 <main+0x218>)
 8016184:	2100      	movs	r1, #0
 8016186:	482b      	ldr	r0, [pc, #172]	; (8016234 <main+0x21c>)
 8016188:	f012 f9a7 	bl	80284da <osThreadNew>
 801618c:	4603      	mov	r3, r0
 801618e:	4a2a      	ldr	r2, [pc, #168]	; (8016238 <main+0x220>)
 8016190:	6013      	str	r3, [r2, #0]
			&COOL_task_info.attributes);

	CAN_task_handle = osThreadNew(start_CAN_task, NULL,
 8016192:	4a2a      	ldr	r2, [pc, #168]	; (801623c <main+0x224>)
 8016194:	2100      	movs	r1, #0
 8016196:	482a      	ldr	r0, [pc, #168]	; (8016240 <main+0x228>)
 8016198:	f012 f99f 	bl	80284da <osThreadNew>
 801619c:	4603      	mov	r3, r0
 801619e:	4a29      	ldr	r2, [pc, #164]	; (8016244 <main+0x22c>)
 80161a0:	6013      	str	r3, [r2, #0]
			&CAN_task_info.attributes);

	COM_task_handle = osThreadNew(start_COM_task, NULL,
 80161a2:	4a29      	ldr	r2, [pc, #164]	; (8016248 <main+0x230>)
 80161a4:	2100      	movs	r1, #0
 80161a6:	4829      	ldr	r0, [pc, #164]	; (801624c <main+0x234>)
 80161a8:	f012 f997 	bl	80284da <osThreadNew>
 80161ac:	4603      	mov	r3, r0
 80161ae:	4a28      	ldr	r2, [pc, #160]	; (8016250 <main+0x238>)
 80161b0:	6013      	str	r3, [r2, #0]
			&COM_task_info.attributes);

	IWDG_task_handle = osThreadNew(start_IWDG_task, NULL,
 80161b2:	4a28      	ldr	r2, [pc, #160]	; (8016254 <main+0x23c>)
 80161b4:	2100      	movs	r1, #0
 80161b6:	4828      	ldr	r0, [pc, #160]	; (8016258 <main+0x240>)
 80161b8:	f012 f98f 	bl	80284da <osThreadNew>
 80161bc:	4603      	mov	r3, r0
 80161be:	4a27      	ldr	r2, [pc, #156]	; (801625c <main+0x244>)
 80161c0:	6013      	str	r3, [r2, #0]
			&IWDG_task_info.attributes);

	error_handler_task_handle = osThreadNew(start_error_handler_task, NULL,
 80161c2:	4a27      	ldr	r2, [pc, #156]	; (8016260 <main+0x248>)
 80161c4:	2100      	movs	r1, #0
 80161c6:	4827      	ldr	r0, [pc, #156]	; (8016264 <main+0x24c>)
 80161c8:	f012 f987 	bl	80284da <osThreadNew>
 80161cc:	4603      	mov	r3, r0
 80161ce:	4a26      	ldr	r2, [pc, #152]	; (8016268 <main+0x250>)
 80161d0:	6013      	str	r3, [r2, #0]
			&error_handler_task_info.attributes);

	/* Launch RTOS ! */
	osKernelStart();
 80161d2:	f012 f947 	bl	8028464 <osKernelStart>

	for (;;)
 80161d6:	e7fe      	b.n	80161d6 <main+0x1be>
 80161d8:	2001b134 	.word	0x2001b134
 80161dc:	2001b10c 	.word	0x2001b10c
 80161e0:	2001b208 	.word	0x2001b208
 80161e4:	2001a8ac 	.word	0x2001a8ac
 80161e8:	2001a8a8 	.word	0x2001a8a8
 80161ec:	2001a8a4 	.word	0x2001a8a4
 80161f0:	2001a8b0 	.word	0x2001a8b0
 80161f4:	2001a89c 	.word	0x2001a89c
 80161f8:	2001a8a0 	.word	0x2001a8a0
 80161fc:	2001a898 	.word	0x2001a898
 8016200:	2001a8bc 	.word	0x2001a8bc
 8016204:	2001a8b4 	.word	0x2001a8b4
 8016208:	2001a894 	.word	0x2001a894
 801620c:	2001a8b8 	.word	0x2001a8b8
 8016210:	406f4000 	.word	0x406f4000
 8016214:	2001b1e8 	.word	0x2001b1e8
 8016218:	0802def8 	.word	0x0802def8
 801621c:	08016559 	.word	0x08016559
 8016220:	2001b200 	.word	0x2001b200
 8016224:	0802df58 	.word	0x0802df58
 8016228:	08016d19 	.word	0x08016d19
 801622c:	2001b1f4 	.word	0x2001b1f4
 8016230:	0802df28 	.word	0x0802df28
 8016234:	08016eb9 	.word	0x08016eb9
 8016238:	2001b204 	.word	0x2001b204
 801623c:	0802df88 	.word	0x0802df88
 8016240:	08016c45 	.word	0x08016c45
 8016244:	2001b1e4 	.word	0x2001b1e4
 8016248:	0802dfb8 	.word	0x0802dfb8
 801624c:	080168d1 	.word	0x080168d1
 8016250:	2001b1fc 	.word	0x2001b1fc
 8016254:	0802e018 	.word	0x0802e018
 8016258:	080170e1 	.word	0x080170e1
 801625c:	2001b1ec 	.word	0x2001b1ec
 8016260:	0802dfe8 	.word	0x0802dfe8
 8016264:	08017015 	.word	0x08017015
 8016268:	2001b1f8 	.word	0x2001b1f8

0801626c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 801626c:	b580      	push	{r7, lr}
 801626e:	b094      	sub	sp, #80	; 0x50
 8016270:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8016272:	f107 0320 	add.w	r3, r7, #32
 8016276:	2230      	movs	r2, #48	; 0x30
 8016278:	2100      	movs	r1, #0
 801627a:	4618      	mov	r0, r3
 801627c:	f016 fd70 	bl	802cd60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8016280:	f107 030c 	add.w	r3, r7, #12
 8016284:	2200      	movs	r2, #0
 8016286:	601a      	str	r2, [r3, #0]
 8016288:	605a      	str	r2, [r3, #4]
 801628a:	609a      	str	r2, [r3, #8]
 801628c:	60da      	str	r2, [r3, #12]
 801628e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8016290:	2300      	movs	r3, #0
 8016292:	60bb      	str	r3, [r7, #8]
 8016294:	4b29      	ldr	r3, [pc, #164]	; (801633c <SystemClock_Config+0xd0>)
 8016296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016298:	4a28      	ldr	r2, [pc, #160]	; (801633c <SystemClock_Config+0xd0>)
 801629a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801629e:	6413      	str	r3, [r2, #64]	; 0x40
 80162a0:	4b26      	ldr	r3, [pc, #152]	; (801633c <SystemClock_Config+0xd0>)
 80162a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80162a8:	60bb      	str	r3, [r7, #8]
 80162aa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80162ac:	2300      	movs	r3, #0
 80162ae:	607b      	str	r3, [r7, #4]
 80162b0:	4b23      	ldr	r3, [pc, #140]	; (8016340 <SystemClock_Config+0xd4>)
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	4a22      	ldr	r2, [pc, #136]	; (8016340 <SystemClock_Config+0xd4>)
 80162b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80162ba:	6013      	str	r3, [r2, #0]
 80162bc:	4b20      	ldr	r3, [pc, #128]	; (8016340 <SystemClock_Config+0xd4>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80162c4:	607b      	str	r3, [r7, #4]
 80162c6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80162c8:	230a      	movs	r3, #10
 80162ca:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80162cc:	2301      	movs	r3, #1
 80162ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80162d0:	2310      	movs	r3, #16
 80162d2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80162d4:	2301      	movs	r3, #1
 80162d6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80162d8:	2302      	movs	r3, #2
 80162da:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80162dc:	2300      	movs	r3, #0
 80162de:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80162e0:	2308      	movs	r3, #8
 80162e2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 128;
 80162e4:	2380      	movs	r3, #128	; 0x80
 80162e6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80162e8:	2302      	movs	r3, #2
 80162ea:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80162ec:	2304      	movs	r3, #4
 80162ee:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80162f0:	f107 0320 	add.w	r3, r7, #32
 80162f4:	4618      	mov	r0, r3
 80162f6:	f00f f817 	bl	8025328 <HAL_RCC_OscConfig>
 80162fa:	4603      	mov	r3, r0
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d001      	beq.n	8016304 <SystemClock_Config+0x98>
		Error_Handler();
 8016300:	f000 ff46 	bl	8017190 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8016304:	230f      	movs	r3, #15
 8016306:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8016308:	2302      	movs	r3, #2
 801630a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801630c:	2300      	movs	r3, #0
 801630e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8016310:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8016314:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8016316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801631a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 801631c:	f107 030c 	add.w	r3, r7, #12
 8016320:	2104      	movs	r1, #4
 8016322:	4618      	mov	r0, r3
 8016324:	f00f fa78 	bl	8025818 <HAL_RCC_ClockConfig>
 8016328:	4603      	mov	r3, r0
 801632a:	2b00      	cmp	r3, #0
 801632c:	d001      	beq.n	8016332 <SystemClock_Config+0xc6>
		Error_Handler();
 801632e:	f000 ff2f 	bl	8017190 <Error_Handler>
	}
}
 8016332:	bf00      	nop
 8016334:	3750      	adds	r7, #80	; 0x50
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}
 801633a:	bf00      	nop
 801633c:	40023800 	.word	0x40023800
 8016340:	40007000 	.word	0x40007000

08016344 <__wait_for_data>:
#define WAIT_FOR_ACCUMULATOR_VOLTAGE	0x0004
#define WAIT_FOR_ACCUMULATOR_CURRENT	0x0008
#define WAIT_FOR_VEHICLE_VOLTAGE		0x0010
#define WAIT_FOR_ALL 					0x001F

void __wait_for_data(uint16_t FLAGS) {
 8016344:	b580      	push	{r7, lr}
 8016346:	b088      	sub	sp, #32
 8016348:	af00      	add	r7, sp, #0
 801634a:	4603      	mov	r3, r0
 801634c:	80fb      	strh	r3, [r7, #6]
	uint8_t NOT_OK = FLAGS;
 801634e:	88fb      	ldrh	r3, [r7, #6]
 8016350:	77fb      	strb	r3, [r7, #31]

	double _d;
	double *_dptr;
	uint8_t _u8;
	while (NOT_OK) {
 8016352:	e067      	b.n	8016424 <__wait_for_data+0xe0>
		osDelay(2.00 * TICK2HZ);
 8016354:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8016358:	f012 f951 	bl	80285fe <osDelay>
		if (FLAGS & WAIT_FOR_CELL_VOLTAGES) {
 801635c:	88fb      	ldrh	r3, [r7, #6]
 801635e:	f003 0301 	and.w	r3, r3, #1
 8016362:	2b00      	cmp	r3, #0
 8016364:	d00e      	beq.n	8016384 <__wait_for_data+0x40>
			if (xQueuePeek(cell_voltages_queue, &_dptr, 0)) {
 8016366:	4b33      	ldr	r3, [pc, #204]	; (8016434 <__wait_for_data+0xf0>)
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	f107 010c 	add.w	r1, r7, #12
 801636e:	2200      	movs	r2, #0
 8016370:	4618      	mov	r0, r3
 8016372:	f012 fe9f 	bl	80290b4 <xQueuePeek>
 8016376:	4603      	mov	r3, r0
 8016378:	2b00      	cmp	r3, #0
 801637a:	d003      	beq.n	8016384 <__wait_for_data+0x40>
				NOT_OK &= ~WAIT_FOR_CELL_VOLTAGES;
 801637c:	7ffb      	ldrb	r3, [r7, #31]
 801637e:	f023 0301 	bic.w	r3, r3, #1
 8016382:	77fb      	strb	r3, [r7, #31]
			}
		}
		if (FLAGS & WAIT_FOR_CELL_TEMPERATURES) {
 8016384:	88fb      	ldrh	r3, [r7, #6]
 8016386:	f003 0302 	and.w	r3, r3, #2
 801638a:	2b00      	cmp	r3, #0
 801638c:	d00e      	beq.n	80163ac <__wait_for_data+0x68>
			if (xQueuePeek(cell_temperatures_queue, &_dptr, 0)) {
 801638e:	4b2a      	ldr	r3, [pc, #168]	; (8016438 <__wait_for_data+0xf4>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	f107 010c 	add.w	r1, r7, #12
 8016396:	2200      	movs	r2, #0
 8016398:	4618      	mov	r0, r3
 801639a:	f012 fe8b 	bl	80290b4 <xQueuePeek>
 801639e:	4603      	mov	r3, r0
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d003      	beq.n	80163ac <__wait_for_data+0x68>
				NOT_OK &= ~WAIT_FOR_CELL_TEMPERATURES;
 80163a4:	7ffb      	ldrb	r3, [r7, #31]
 80163a6:	f023 0302 	bic.w	r3, r3, #2
 80163aa:	77fb      	strb	r3, [r7, #31]
			}
		}
		if (FLAGS & WAIT_FOR_ACCUMULATOR_CURRENT) {
 80163ac:	88fb      	ldrh	r3, [r7, #6]
 80163ae:	f003 0308 	and.w	r3, r3, #8
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d00e      	beq.n	80163d4 <__wait_for_data+0x90>
			if (xQueuePeek(accumulator_current_queue, &_d, 0)) {
 80163b6:	4b21      	ldr	r3, [pc, #132]	; (801643c <__wait_for_data+0xf8>)
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	f107 0110 	add.w	r1, r7, #16
 80163be:	2200      	movs	r2, #0
 80163c0:	4618      	mov	r0, r3
 80163c2:	f012 fe77 	bl	80290b4 <xQueuePeek>
 80163c6:	4603      	mov	r3, r0
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d003      	beq.n	80163d4 <__wait_for_data+0x90>
				NOT_OK &= ~WAIT_FOR_ACCUMULATOR_CURRENT;
 80163cc:	7ffb      	ldrb	r3, [r7, #31]
 80163ce:	f023 0308 	bic.w	r3, r3, #8
 80163d2:	77fb      	strb	r3, [r7, #31]
			}
		}
		if (FLAGS & WAIT_FOR_ACCUMULATOR_VOLTAGE) {
 80163d4:	88fb      	ldrh	r3, [r7, #6]
 80163d6:	f003 0304 	and.w	r3, r3, #4
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d00e      	beq.n	80163fc <__wait_for_data+0xb8>
			if (xQueuePeek(accumulator_voltage_queue, &_d, 0)) {
 80163de:	4b18      	ldr	r3, [pc, #96]	; (8016440 <__wait_for_data+0xfc>)
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	f107 0110 	add.w	r1, r7, #16
 80163e6:	2200      	movs	r2, #0
 80163e8:	4618      	mov	r0, r3
 80163ea:	f012 fe63 	bl	80290b4 <xQueuePeek>
 80163ee:	4603      	mov	r3, r0
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d003      	beq.n	80163fc <__wait_for_data+0xb8>
				NOT_OK &= ~WAIT_FOR_ACCUMULATOR_VOLTAGE;
 80163f4:	7ffb      	ldrb	r3, [r7, #31]
 80163f6:	f023 0304 	bic.w	r3, r3, #4
 80163fa:	77fb      	strb	r3, [r7, #31]
			}
		}
		if (FLAGS & WAIT_FOR_VEHICLE_VOLTAGE) {
 80163fc:	88fb      	ldrh	r3, [r7, #6]
 80163fe:	f003 0310 	and.w	r3, r3, #16
 8016402:	2b00      	cmp	r3, #0
 8016404:	d00e      	beq.n	8016424 <__wait_for_data+0xe0>
			if (xQueuePeek(vehicle_voltage_queue, &_d, 0)) {
 8016406:	4b0f      	ldr	r3, [pc, #60]	; (8016444 <__wait_for_data+0x100>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	f107 0110 	add.w	r1, r7, #16
 801640e:	2200      	movs	r2, #0
 8016410:	4618      	mov	r0, r3
 8016412:	f012 fe4f 	bl	80290b4 <xQueuePeek>
 8016416:	4603      	mov	r3, r0
 8016418:	2b00      	cmp	r3, #0
 801641a:	d003      	beq.n	8016424 <__wait_for_data+0xe0>
				NOT_OK &= ~WAIT_FOR_VEHICLE_VOLTAGE;
 801641c:	7ffb      	ldrb	r3, [r7, #31]
 801641e:	f023 0310 	bic.w	r3, r3, #16
 8016422:	77fb      	strb	r3, [r7, #31]
	while (NOT_OK) {
 8016424:	7ffb      	ldrb	r3, [r7, #31]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d194      	bne.n	8016354 <__wait_for_data+0x10>
			}
		}
	}
}
 801642a:	bf00      	nop
 801642c:	bf00      	nop
 801642e:	3720      	adds	r7, #32
 8016430:	46bd      	mov	sp, r7
 8016432:	bd80      	pop	{r7, pc}
 8016434:	2001a89c 	.word	0x2001a89c
 8016438:	2001a8a0 	.word	0x2001a8a0
 801643c:	2001a8b0 	.word	0x2001a8b0
 8016440:	2001a8a8 	.word	0x2001a8a8
 8016444:	2001a8a4 	.word	0x2001a8a4

08016448 <__raise_ams_error>:

void __raise_ams_error(error_t error) {
 8016448:	b580      	push	{r7, lr}
 801644a:	b082      	sub	sp, #8
 801644c:	af00      	add	r7, sp, #0
 801644e:	4603      	mov	r3, r0
 8016450:	71fb      	strb	r3, [r7, #7]
	set_ams_error_ext(1);
 8016452:	2001      	movs	r0, #1
 8016454:	f000 ff20 	bl	8017298 <set_ams_error_ext>
	__error = error;
 8016458:	79fa      	ldrb	r2, [r7, #7]
 801645a:	4b09      	ldr	r3, [pc, #36]	; (8016480 <__raise_ams_error+0x38>)
 801645c:	701a      	strb	r2, [r3, #0]
#ifdef STREAM_DATA
	SEGGER_SYSVIEW_PrintfHost("error %i", error);
 801645e:	79fb      	ldrb	r3, [r7, #7]
 8016460:	4619      	mov	r1, r3
 8016462:	4808      	ldr	r0, [pc, #32]	; (8016484 <__raise_ams_error+0x3c>)
 8016464:	f016 fba6 	bl	802cbb4 <SEGGER_SYSVIEW_PrintfHost>
#endif
	xQueueOverwrite(error_queue, &error);
 8016468:	4b07      	ldr	r3, [pc, #28]	; (8016488 <__raise_ams_error+0x40>)
 801646a:	6818      	ldr	r0, [r3, #0]
 801646c:	1df9      	adds	r1, r7, #7
 801646e:	2302      	movs	r3, #2
 8016470:	2200      	movs	r2, #0
 8016472:	f012 fb39 	bl	8028ae8 <xQueueGenericSend>
}
 8016476:	bf00      	nop
 8016478:	3708      	adds	r7, #8
 801647a:	46bd      	mov	sp, r7
 801647c:	bd80      	pop	{r7, pc}
 801647e:	bf00      	nop
 8016480:	2001a890 	.word	0x2001a890
 8016484:	0802da48 	.word	0x0802da48
 8016488:	2001a8b8 	.word	0x2001a8b8

0801648c <__raise_ams_error_isr>:

void __raise_ams_error_isr(error_t error) {
 801648c:	b580      	push	{r7, lr}
 801648e:	b084      	sub	sp, #16
 8016490:	af00      	add	r7, sp, #0
 8016492:	4603      	mov	r3, r0
 8016494:	71fb      	strb	r3, [r7, #7]
	set_ams_error_ext(1);
 8016496:	2001      	movs	r0, #1
 8016498:	f000 fefe 	bl	8017298 <set_ams_error_ext>
	__error = error;
 801649c:	79fa      	ldrb	r2, [r7, #7]
 801649e:	4b10      	ldr	r3, [pc, #64]	; (80164e0 <__raise_ams_error_isr+0x54>)
 80164a0:	701a      	strb	r2, [r3, #0]
#ifdef STREAM_DATA
	SEGGER_SYSVIEW_PrintfHost("error %i", error);
 80164a2:	79fb      	ldrb	r3, [r7, #7]
 80164a4:	4619      	mov	r1, r3
 80164a6:	480f      	ldr	r0, [pc, #60]	; (80164e4 <__raise_ams_error_isr+0x58>)
 80164a8:	f016 fb84 	bl	802cbb4 <SEGGER_SYSVIEW_PrintfHost>
#endif

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80164ac:	2300      	movs	r3, #0
 80164ae:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(error_queue, &error,
 80164b0:	4b0d      	ldr	r3, [pc, #52]	; (80164e8 <__raise_ams_error_isr+0x5c>)
 80164b2:	6818      	ldr	r0, [r3, #0]
 80164b4:	f107 020c 	add.w	r2, r7, #12
 80164b8:	1df9      	adds	r1, r7, #7
 80164ba:	2302      	movs	r3, #2
 80164bc:	f012 fc3a 	bl	8028d34 <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d007      	beq.n	80164d6 <__raise_ams_error_isr+0x4a>
 80164c6:	4b09      	ldr	r3, [pc, #36]	; (80164ec <__raise_ams_error_isr+0x60>)
 80164c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164cc:	601a      	str	r2, [r3, #0]
 80164ce:	f3bf 8f4f 	dsb	sy
 80164d2:	f3bf 8f6f 	isb	sy
}
 80164d6:	bf00      	nop
 80164d8:	3710      	adds	r7, #16
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}
 80164de:	bf00      	nop
 80164e0:	2001a890 	.word	0x2001a890
 80164e4:	0802da48 	.word	0x0802da48
 80164e8:	2001a8b8 	.word	0x2001a8b8
 80164ec:	e000ed04 	.word	0xe000ed04

080164f0 <__raise_imd_error_isr>:
#endif
	xQueueOverwrite(error_queue, &error);
}


void __raise_imd_error_isr(error_t error) {
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b084      	sub	sp, #16
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	4603      	mov	r3, r0
 80164f8:	71fb      	strb	r3, [r7, #7]
	set_imd_error_ext(1);
 80164fa:	2001      	movs	r0, #1
 80164fc:	f000 feea 	bl	80172d4 <set_imd_error_ext>
	__error = error;
 8016500:	79fa      	ldrb	r2, [r7, #7]
 8016502:	4b10      	ldr	r3, [pc, #64]	; (8016544 <__raise_imd_error_isr+0x54>)
 8016504:	701a      	strb	r2, [r3, #0]
#ifdef STREAM_DATA
	SEGGER_SYSVIEW_PrintfHost("error %i", error);
 8016506:	79fb      	ldrb	r3, [r7, #7]
 8016508:	4619      	mov	r1, r3
 801650a:	480f      	ldr	r0, [pc, #60]	; (8016548 <__raise_imd_error_isr+0x58>)
 801650c:	f016 fb52 	bl	802cbb4 <SEGGER_SYSVIEW_PrintfHost>
#endif

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8016510:	2300      	movs	r3, #0
 8016512:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(error_queue, &error,
 8016514:	4b0d      	ldr	r3, [pc, #52]	; (801654c <__raise_imd_error_isr+0x5c>)
 8016516:	6818      	ldr	r0, [r3, #0]
 8016518:	f107 020c 	add.w	r2, r7, #12
 801651c:	1df9      	adds	r1, r7, #7
 801651e:	2302      	movs	r3, #2
 8016520:	f012 fc08 	bl	8028d34 <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d007      	beq.n	801653a <__raise_imd_error_isr+0x4a>
 801652a:	4b09      	ldr	r3, [pc, #36]	; (8016550 <__raise_imd_error_isr+0x60>)
 801652c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016530:	601a      	str	r2, [r3, #0]
 8016532:	f3bf 8f4f 	dsb	sy
 8016536:	f3bf 8f6f 	isb	sy
}
 801653a:	bf00      	nop
 801653c:	3710      	adds	r7, #16
 801653e:	46bd      	mov	sp, r7
 8016540:	bd80      	pop	{r7, pc}
 8016542:	bf00      	nop
 8016544:	2001a890 	.word	0x2001a890
 8016548:	0802da48 	.word	0x0802da48
 801654c:	2001a8b8 	.word	0x2001a8b8
 8016550:	e000ed04 	.word	0xe000ed04
 8016554:	00000000 	.word	0x00000000

08016558 <start_SM_task>:

/* ENTER TASKS */
void start_SM_task(void *argument) {
 8016558:	b580      	push	{r7, lr}
 801655a:	b094      	sub	sp, #80	; 0x50
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_Start();
 8016560:	f015 fe92 	bl	802c288 <SEGGER_SYSVIEW_Start>

	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016564:	4ba3      	ldr	r3, [pc, #652]	; (80167f4 <start_SM_task+0x29c>)
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t tick_increment = TICK2HZ * SM_task_info.periodicity;
 801656a:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80167f8 <start_SM_task+0x2a0>
 801656e:	eddf 7aa3 	vldr	s15, [pc, #652]	; 80167fc <start_SM_task+0x2a4>
 8016572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801657a:	ee17 3a90 	vmov	r3, s15
 801657e:	61fb      	str	r3, [r7, #28]

	/* Make task-specific structures */
	ams_inputs.Ts = SM_task_info.periodicity;
 8016580:	4a9f      	ldr	r2, [pc, #636]	; (8016800 <start_SM_task+0x2a8>)
 8016582:	4ba0      	ldr	r3, [pc, #640]	; (8016804 <start_SM_task+0x2ac>)
 8016584:	645a      	str	r2, [r3, #68]	; 0x44
	double minimum;
	double mean;
	double variance;
	double maximum;

	initialize_TEM(&htim3); // This has to be inside a task
 8016586:	48a0      	ldr	r0, [pc, #640]	; (8016808 <start_SM_task+0x2b0>)
 8016588:	f7fe ff2a 	bl	80153e0 <initialize_TEM>
	initialize_IMD(&htim2); // This has to be inside a task
 801658c:	489f      	ldr	r0, [pc, #636]	; (801680c <start_SM_task+0x2b4>)
 801658e:	f7fd ff71 	bl	8014474 <initialize_IMD>

	/* Wait until offset */
	next_tick += TICK2HZ * SM_task_info.offset;
 8016592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016594:	ee07 3a90 	vmov	s15, r3
 8016598:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801659c:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8016810 <start_SM_task+0x2b8>
 80165a0:	eddf 7a96 	vldr	s15, [pc, #600]	; 80167fc <start_SM_task+0x2a4>
 80165a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80165a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80165b0:	ee17 3a90 	vmov	r3, s15
 80165b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	osDelayUntil(next_tick);
 80165b6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80165b8:	f012 f83c 	bl	8028634 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 80165bc:	201f      	movs	r0, #31
 80165be:	f7ff fec1 	bl	8016344 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */
		/* Receive every piece of data which is required to propagate the state machine */
		if (0x1 && xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 80165c2:	4b94      	ldr	r3, [pc, #592]	; (8016814 <start_SM_task+0x2bc>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	f107 010c 	add.w	r1, r7, #12
 80165ca:	2200      	movs	r2, #0
 80165cc:	4618      	mov	r0, r3
 80165ce:	f012 fd71 	bl	80290b4 <xQueuePeek>
 80165d2:	4603      	mov	r3, r0
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	f000 813b 	beq.w	8016850 <start_SM_task+0x2f8>
				&& xQueuePeek(accumulator_current_queue,
 80165da:	4b8f      	ldr	r3, [pc, #572]	; (8016818 <start_SM_task+0x2c0>)
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	2200      	movs	r2, #0
 80165e0:	498e      	ldr	r1, [pc, #568]	; (801681c <start_SM_task+0x2c4>)
 80165e2:	4618      	mov	r0, r3
 80165e4:	f012 fd66 	bl	80290b4 <xQueuePeek>
 80165e8:	4603      	mov	r3, r0
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	f000 8130 	beq.w	8016850 <start_SM_task+0x2f8>
						&ams_inputs.accumulator_current, 0)
				&& xQueuePeek(accumulator_voltage_queue,
 80165f0:	4b8b      	ldr	r3, [pc, #556]	; (8016820 <start_SM_task+0x2c8>)
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	2200      	movs	r2, #0
 80165f6:	498b      	ldr	r1, [pc, #556]	; (8016824 <start_SM_task+0x2cc>)
 80165f8:	4618      	mov	r0, r3
 80165fa:	f012 fd5b 	bl	80290b4 <xQueuePeek>
 80165fe:	4603      	mov	r3, r0
 8016600:	2b00      	cmp	r3, #0
 8016602:	f000 8125 	beq.w	8016850 <start_SM_task+0x2f8>
						&ams_inputs.accumulator_voltage, 0)
				&& xQueuePeek(vehicle_voltage_queue,
 8016606:	4b88      	ldr	r3, [pc, #544]	; (8016828 <start_SM_task+0x2d0>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	2200      	movs	r2, #0
 801660c:	4987      	ldr	r1, [pc, #540]	; (801682c <start_SM_task+0x2d4>)
 801660e:	4618      	mov	r0, r3
 8016610:	f012 fd50 	bl	80290b4 <xQueuePeek>
 8016614:	4603      	mov	r3, r0
 8016616:	2b00      	cmp	r3, #0
 8016618:	f000 811a 	beq.w	8016850 <start_SM_task+0x2f8>
						&ams_inputs.vehicle_voltage, 0)) {

			/* Calculate mean, maximum and variance of cell voltages */
			{
				mean = 0;
 801661c:	f04f 0200 	mov.w	r2, #0
 8016620:	f04f 0300 	mov.w	r3, #0
 8016624:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				variance = 0;
 8016628:	f04f 0200 	mov.w	r2, #0
 801662c:	f04f 0300 	mov.w	r3, #0
 8016630:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				maximum = cell_voltages[0];
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801663a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				minimum = cell_voltages[0];
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016644:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				for (int i = 0; i < 126; i++) {
 8016648:	2300      	movs	r3, #0
 801664a:	627b      	str	r3, [r7, #36]	; 0x24
 801664c:	e03a      	b.n	80166c4 <start_SM_task+0x16c>
					mean += cell_voltages[i];
 801664e:	68fa      	ldr	r2, [r7, #12]
 8016650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016652:	00db      	lsls	r3, r3, #3
 8016654:	4413      	add	r3, r2
 8016656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801665a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801665e:	f7e9 fe07 	bl	8000270 <__adddf3>
 8016662:	4602      	mov	r2, r0
 8016664:	460b      	mov	r3, r1
 8016666:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
					if (cell_voltages[i] > maximum) {
 801666a:	68fa      	ldr	r2, [r7, #12]
 801666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801666e:	00db      	lsls	r3, r3, #3
 8016670:	4413      	add	r3, r2
 8016672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016676:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801667a:	f7ea fa21 	bl	8000ac0 <__aeabi_dcmplt>
 801667e:	4603      	mov	r3, r0
 8016680:	2b00      	cmp	r3, #0
 8016682:	d007      	beq.n	8016694 <start_SM_task+0x13c>
						maximum = cell_voltages[i];
 8016684:	68fa      	ldr	r2, [r7, #12]
 8016686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016688:	00db      	lsls	r3, r3, #3
 801668a:	4413      	add	r3, r2
 801668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016690:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
					}
					if (cell_voltages[i] < minimum) {
 8016694:	68fa      	ldr	r2, [r7, #12]
 8016696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016698:	00db      	lsls	r3, r3, #3
 801669a:	4413      	add	r3, r2
 801669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166a0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80166a4:	f7ea fa2a 	bl	8000afc <__aeabi_dcmpgt>
 80166a8:	4603      	mov	r3, r0
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d007      	beq.n	80166be <start_SM_task+0x166>
						minimum = cell_voltages[i];
 80166ae:	68fa      	ldr	r2, [r7, #12]
 80166b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166b2:	00db      	lsls	r3, r3, #3
 80166b4:	4413      	add	r3, r2
 80166b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				for (int i = 0; i < 126; i++) {
 80166be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166c0:	3301      	adds	r3, #1
 80166c2:	627b      	str	r3, [r7, #36]	; 0x24
 80166c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166c6:	2b7d      	cmp	r3, #125	; 0x7d
 80166c8:	ddc1      	ble.n	801664e <start_SM_task+0xf6>
					}
				}
				mean /= 126;
 80166ca:	f04f 0200 	mov.w	r2, #0
 80166ce:	4b58      	ldr	r3, [pc, #352]	; (8016830 <start_SM_task+0x2d8>)
 80166d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80166d4:	f7ea f8ac 	bl	8000830 <__aeabi_ddiv>
 80166d8:	4602      	mov	r2, r0
 80166da:	460b      	mov	r3, r1
 80166dc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				for (int i = 0; i < 126; i++) {
 80166e0:	2300      	movs	r3, #0
 80166e2:	623b      	str	r3, [r7, #32]
 80166e4:	e020      	b.n	8016728 <start_SM_task+0x1d0>
					double svar = cell_voltages[i] - mean;
 80166e6:	68fa      	ldr	r2, [r7, #12]
 80166e8:	6a3b      	ldr	r3, [r7, #32]
 80166ea:	00db      	lsls	r3, r3, #3
 80166ec:	4413      	add	r3, r2
 80166ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80166f2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80166f6:	f7e9 fdb9 	bl	800026c <__aeabi_dsub>
 80166fa:	4602      	mov	r2, r0
 80166fc:	460b      	mov	r3, r1
 80166fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
					variance += svar * svar;
 8016702:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016706:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801670a:	f7e9 ff67 	bl	80005dc <__aeabi_dmul>
 801670e:	4602      	mov	r2, r0
 8016710:	460b      	mov	r3, r1
 8016712:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8016716:	f7e9 fdab 	bl	8000270 <__adddf3>
 801671a:	4602      	mov	r2, r0
 801671c:	460b      	mov	r3, r1
 801671e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				for (int i = 0; i < 126; i++) {
 8016722:	6a3b      	ldr	r3, [r7, #32]
 8016724:	3301      	adds	r3, #1
 8016726:	623b      	str	r3, [r7, #32]
 8016728:	6a3b      	ldr	r3, [r7, #32]
 801672a:	2b7d      	cmp	r3, #125	; 0x7d
 801672c:	dddb      	ble.n	80166e6 <start_SM_task+0x18e>
				}
			}

			/* Set the rest of the state machine inputs */
			ams_inputs.cell_voltages_variance = variance;
 801672e:	4935      	ldr	r1, [pc, #212]	; (8016804 <start_SM_task+0x2ac>)
 8016730:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8016734:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			ams_inputs.maximum_cell_voltage = maximum;
 8016738:	4932      	ldr	r1, [pc, #200]	; (8016804 <start_SM_task+0x2ac>)
 801673a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801673e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			ams_inputs.minimum_cell_voltage = minimum;
 8016742:	4930      	ldr	r1, [pc, #192]	; (8016804 <start_SM_task+0x2ac>)
 8016744:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8016748:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ams_inputs.charger_is_awake = 1;
 801674c:	4b2d      	ldr	r3, [pc, #180]	; (8016804 <start_SM_task+0x2ac>)
 801674e:	2201      	movs	r2, #1
 8016750:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			ams_inputs.ams_error = get_ams_error_latched_ext();
 8016754:	f000 fdb2 	bl	80172bc <get_ams_error_latched_ext>
 8016758:	4603      	mov	r3, r0
 801675a:	461a      	mov	r2, r3
 801675c:	4b29      	ldr	r3, [pc, #164]	; (8016804 <start_SM_task+0x2ac>)
 801675e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			ams_inputs.imd_error = get_imd_error_latched_ext();
 8016762:	f000 fdc7 	bl	80172f4 <get_imd_error_latched_ext>
 8016766:	4603      	mov	r3, r0
 8016768:	461a      	mov	r2, r3
 801676a:	4b26      	ldr	r3, [pc, #152]	; (8016804 <start_SM_task+0x2ac>)
 801676c:	741a      	strb	r2, [r3, #16]
			ams_inputs.air_minus_closed = get_air_minus_ext();
 801676e:	f000 fd51 	bl	8017214 <get_air_minus_ext>
 8016772:	4603      	mov	r3, r0
 8016774:	461a      	mov	r2, r3
 8016776:	4b23      	ldr	r3, [pc, #140]	; (8016804 <start_SM_task+0x2ac>)
 8016778:	f883 2020 	strb.w	r2, [r3, #32]
			ams_inputs.air_plus_closed = get_air_plus_ext();
 801677c:	f000 fd20 	bl	80171c0 <get_air_plus_ext>
 8016780:	4603      	mov	r3, r0
 8016782:	461a      	mov	r2, r3
 8016784:	4b1f      	ldr	r3, [pc, #124]	; (8016804 <start_SM_task+0x2ac>)
 8016786:	745a      	strb	r2, [r3, #17]
			ams_inputs.precharge_closed = get_precharge_ext();
 8016788:	f000 fd6e 	bl	8017268 <get_precharge_ext>
 801678c:	4603      	mov	r3, r0
 801678e:	461a      	mov	r2, r3
 8016790:	4b1c      	ldr	r3, [pc, #112]	; (8016804 <start_SM_task+0x2ac>)
 8016792:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			ams_inputs.SC = get_sc_probe_ext();
 8016796:	f000 fdb9 	bl	801730c <get_sc_probe_ext>
 801679a:	4603      	mov	r3, r0
 801679c:	461a      	mov	r2, r3
 801679e:	4b19      	ldr	r3, [pc, #100]	; (8016804 <start_SM_task+0x2ac>)
 80167a0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

			/* Try to get the trigger signals */
			xQueueReceive(start_drive_queue, &ams_inputs.drive, 0);
 80167a4:	4b23      	ldr	r3, [pc, #140]	; (8016834 <start_SM_task+0x2dc>)
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	2200      	movs	r2, #0
 80167aa:	4923      	ldr	r1, [pc, #140]	; (8016838 <start_SM_task+0x2e0>)
 80167ac:	4618      	mov	r0, r3
 80167ae:	f012 fb71 	bl	8028e94 <xQueueReceive>
			xQueueReceive(start_charge_queue, &ams_inputs.charge, 0);
 80167b2:	4b22      	ldr	r3, [pc, #136]	; (801683c <start_SM_task+0x2e4>)
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	2200      	movs	r2, #0
 80167b8:	4912      	ldr	r1, [pc, #72]	; (8016804 <start_SM_task+0x2ac>)
 80167ba:	4618      	mov	r0, r3
 80167bc:	f012 fb6a 	bl	8028e94 <xQueueReceive>
			xQueueReceive(start_balance_queue, &ams_inputs.balance, 0);
 80167c0:	4b1f      	ldr	r3, [pc, #124]	; (8016840 <start_SM_task+0x2e8>)
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	2200      	movs	r2, #0
 80167c6:	491f      	ldr	r1, [pc, #124]	; (8016844 <start_SM_task+0x2ec>)
 80167c8:	4618      	mov	r0, r3
 80167ca:	f012 fb63 	bl	8028e94 <xQueueReceive>

			ams_state_t state = ams_function(); // _step
 80167ce:	f00c fa57 	bl	8022c80 <ams_function>
 80167d2:	4603      	mov	r3, r0
 80167d4:	72fb      	strb	r3, [r7, #11]

#ifdef STREAM_DATA
			SEGGER_SYSVIEW_PrintfHost("state %i", state);
 80167d6:	7afb      	ldrb	r3, [r7, #11]
 80167d8:	4619      	mov	r1, r3
 80167da:	481b      	ldr	r0, [pc, #108]	; (8016848 <start_SM_task+0x2f0>)
 80167dc:	f016 f9ea 	bl	802cbb4 <SEGGER_SYSVIEW_PrintfHost>
#endif
			xQueueOverwrite(state_queue, &state);
 80167e0:	4b1a      	ldr	r3, [pc, #104]	; (801684c <start_SM_task+0x2f4>)
 80167e2:	6818      	ldr	r0, [r3, #0]
 80167e4:	f107 010b 	add.w	r1, r7, #11
 80167e8:	2302      	movs	r3, #2
 80167ea:	2200      	movs	r2, #0
 80167ec:	f012 f97c 	bl	8028ae8 <xQueueGenericSend>
						&ams_inputs.vehicle_voltage, 0)) {
 80167f0:	e031      	b.n	8016856 <start_SM_task+0x2fe>
 80167f2:	bf00      	nop
 80167f4:	2001b1e8 	.word	0x2001b1e8
 80167f8:	3dcccccd 	.word	0x3dcccccd
 80167fc:	447a0000 	.word	0x447a0000
 8016800:	3dcccccd 	.word	0x3dcccccd
 8016804:	2001b168 	.word	0x2001b168
 8016808:	2001b2f0 	.word	0x2001b2f0
 801680c:	2001b2a8 	.word	0x2001b2a8
 8016810:	00000000 	.word	0x00000000
 8016814:	2001a89c 	.word	0x2001a89c
 8016818:	2001a8b0 	.word	0x2001a8b0
 801681c:	2001b170 	.word	0x2001b170
 8016820:	2001a8a8 	.word	0x2001a8a8
 8016824:	2001b190 	.word	0x2001b190
 8016828:	2001a8a4 	.word	0x2001a8a4
 801682c:	2001b198 	.word	0x2001b198
 8016830:	405f8000 	.word	0x405f8000
 8016834:	2001a898 	.word	0x2001a898
 8016838:	2001b1b2 	.word	0x2001b1b2
 801683c:	2001a8bc 	.word	0x2001a8bc
 8016840:	2001a8b4 	.word	0x2001a8b4
 8016844:	2001b1c1 	.word	0x2001b1c1
 8016848:	0802da54 	.word	0x0802da54
 801684c:	2001a894 	.word	0x2001a894
		} else {
			__raise_ams_error(ERROR_AMS);
 8016850:	2003      	movs	r0, #3
 8016852:	f7ff fdf9 	bl	8016448 <__raise_ams_error>
		}

		/* If any error was produced by the state machine (1xx), then raise them */
		if (ams_outputs.error) {
 8016856:	4b1c      	ldr	r3, [pc, #112]	; (80168c8 <start_SM_task+0x370>)
 8016858:	791b      	ldrb	r3, [r3, #4]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d004      	beq.n	8016868 <start_SM_task+0x310>
			__raise_ams_error((error_t) ams_outputs.error);
 801685e:	4b1a      	ldr	r3, [pc, #104]	; (80168c8 <start_SM_task+0x370>)
 8016860:	791b      	ldrb	r3, [r3, #4]
 8016862:	4618      	mov	r0, r3
 8016864:	f7ff fdf0 	bl	8016448 <__raise_ams_error>
		}

		charger.charger_current_limit = 6.6 * 2; 		// 2 * C
 8016868:	4918      	ldr	r1, [pc, #96]	; (80168cc <start_SM_task+0x374>)
 801686a:	a313      	add	r3, pc, #76	; (adr r3, 80168b8 <start_SM_task+0x360>)
 801686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016870:	e9c1 2300 	strd	r2, r3, [r1]
		charger.charger_voltage_limit = 4.15 * 126;	// sought cell voltage times count of cells
 8016874:	4915      	ldr	r1, [pc, #84]	; (80168cc <start_SM_task+0x374>)
 8016876:	a312      	add	r3, pc, #72	; (adr r3, 80168c0 <start_SM_task+0x368>)
 8016878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801687c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		charger.enable_charger = ams_outputs.enable_charger;
 8016880:	4b11      	ldr	r3, [pc, #68]	; (80168c8 <start_SM_task+0x370>)
 8016882:	781a      	ldrb	r2, [r3, #0]
 8016884:	4b11      	ldr	r3, [pc, #68]	; (80168cc <start_SM_task+0x374>)
 8016886:	741a      	strb	r2, [r3, #16]

		set_air_minus_ext(ams_outputs.close_air_minus);
 8016888:	4b0f      	ldr	r3, [pc, #60]	; (80168c8 <start_SM_task+0x370>)
 801688a:	785b      	ldrb	r3, [r3, #1]
 801688c:	4618      	mov	r0, r3
 801688e:	f000 fcaf 	bl	80171f0 <set_air_minus_ext>
		set_air_plus_ext(ams_outputs.close_air_plus);
 8016892:	4b0d      	ldr	r3, [pc, #52]	; (80168c8 <start_SM_task+0x370>)
 8016894:	7a1b      	ldrb	r3, [r3, #8]
 8016896:	4618      	mov	r0, r3
 8016898:	f000 fc80 	bl	801719c <set_air_plus_ext>
		set_precharge_ext(ams_outputs.close_precharge);
 801689c:	4b0a      	ldr	r3, [pc, #40]	; (80168c8 <start_SM_task+0x370>)
 801689e:	78db      	ldrb	r3, [r3, #3]
 80168a0:	4618      	mov	r0, r3
 80168a2:	f000 fccf 	bl	8017244 <set_precharge_ext>

		/* Wait until next period */
		next_tick += tick_increment;
 80168a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80168a8:	69fb      	ldr	r3, [r7, #28]
 80168aa:	4413      	add	r3, r2
 80168ac:	64fb      	str	r3, [r7, #76]	; 0x4c
		osDelayUntil(next_tick);
 80168ae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80168b0:	f011 fec0 	bl	8028634 <osDelayUntil>
		if (0x1 && xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 80168b4:	e685      	b.n	80165c2 <start_SM_task+0x6a>
 80168b6:	bf00      	nop
 80168b8:	66666666 	.word	0x66666666
 80168bc:	402a6666 	.word	0x402a6666
 80168c0:	33333334 	.word	0x33333334
 80168c4:	40805733 	.word	0x40805733
 80168c8:	2001b1c8 	.word	0x2001b1c8
 80168cc:	2001a860 	.word	0x2001a860

080168d0 <start_COM_task>:
	}
}

void start_COM_task(void *argument) {
 80168d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80168d4:	b099      	sub	sp, #100	; 0x64
 80168d6:	af06      	add	r7, sp, #24
 80168d8:	60f8      	str	r0, [r7, #12]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80168da:	4bcf      	ldr	r3, [pc, #828]	; (8016c18 <start_COM_task+0x348>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t tick_increment = TICK2HZ * COM_task_info.periodicity;
 80168e0:	ed9f 7ace 	vldr	s14, [pc, #824]	; 8016c1c <start_COM_task+0x34c>
 80168e4:	eddf 7ace 	vldr	s15, [pc, #824]	; 8016c20 <start_COM_task+0x350>
 80168e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80168ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80168f0:	ee17 3a90 	vmov	r3, s15
 80168f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	error_t accumulator_current_error;
	uint8_t cell_data_valid;
	uint8_t accumulator_current_valid;

#ifdef STREAM_DATA
	uint8_t __k = 0;
 80168f6:	2300      	movs	r3, #0
 80168f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
#endif

	const float voltage_time_constraint = 0.5;
 80168fc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8016900:	63bb      	str	r3, [r7, #56]	; 0x38
	const float temperature_time_constraint = 1.0;
 8016902:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8016906:	637b      	str	r3, [r7, #52]	; 0x34
	const float current_time_constraint = 0.5;
 8016908:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801690c:	633b      	str	r3, [r7, #48]	; 0x30

	uint16_t voltage_sample_constraint = 1
			+ (voltage_time_constraint / COM_task_info.periodicity);
 801690e:	eddf 6ac3 	vldr	s13, [pc, #780]	; 8016c1c <start_COM_task+0x34c>
 8016912:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801691a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801691e:	ee77 7a87 	vadd.f32	s15, s15, s14
	uint16_t voltage_sample_constraint = 1
 8016922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016926:	ee17 3a90 	vmov	r3, s15
 801692a:	85fb      	strh	r3, [r7, #46]	; 0x2e

	uint16_t temperature_sample_constraint = 1
			+ (temperature_time_constraint / COM_task_info.periodicity);
 801692c:	eddf 6abb 	vldr	s13, [pc, #748]	; 8016c1c <start_COM_task+0x34c>
 8016930:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8016934:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801693c:	ee77 7a87 	vadd.f32	s15, s15, s14
	uint16_t temperature_sample_constraint = 1
 8016940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016944:	ee17 3a90 	vmov	r3, s15
 8016948:	85bb      	strh	r3, [r7, #44]	; 0x2c

	uint16_t current_sample_constraint = 1
			+ (current_time_constraint / COM_task_info.periodicity);
 801694a:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8016c1c <start_COM_task+0x34c>
 801694e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8016952:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801695a:	ee77 7a87 	vadd.f32	s15, s15, s14
	uint16_t current_sample_constraint = 1
 801695e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016962:	ee17 3a90 	vmov	r3, s15
 8016966:	857b      	strh	r3, [r7, #42]	; 0x2a

	/* Wait until offset */
	next_tick += TICK2HZ * COM_task_info.offset;
 8016968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801696a:	ee07 3a90 	vmov	s15, r3
 801696e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016972:	eddf 6aac 	vldr	s13, [pc, #688]	; 8016c24 <start_COM_task+0x354>
 8016976:	eddf 7aaa 	vldr	s15, [pc, #680]	; 8016c20 <start_COM_task+0x350>
 801697a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801697e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016986:	ee17 3a90 	vmov	r3, s15
 801698a:	647b      	str	r3, [r7, #68]	; 0x44
	osDelayUntil(next_tick);
 801698c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801698e:	f011 fe51 	bl	8028634 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ACCUMULATOR_CURRENT);
 8016992:	2008      	movs	r0, #8
 8016994:	f7ff fcd6 	bl	8016344 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */

		accumulator_current_valid = xQueuePeek(accumulator_current_queue,
 8016998:	4ba3      	ldr	r3, [pc, #652]	; (8016c28 <start_COM_task+0x358>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	f107 0110 	add.w	r1, r7, #16
 80169a0:	2200      	movs	r2, #0
 80169a2:	4618      	mov	r0, r3
 80169a4:	f012 fb86 	bl	80290b4 <xQueuePeek>
 80169a8:	4603      	mov	r3, r0
 80169aa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				&accumulator_current, 0);

		/* Get new data over isoSPI */
		cell_data_valid = LTC_acquire_data(1);
 80169ae:	2001      	movs	r0, #1
 80169b0:	f7fd feb0 	bl	8014714 <LTC_acquire_data>
 80169b4:	4603      	mov	r3, r0
 80169b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
#ifdef SIMULATION
		cell_voltages = SIM0_Y.cell_voltages;
		cell_temperatures = SIM0_Y.cell_temperatures;
		cell_data_valid = 1;
#else
		cell_voltages = LTC_voltages;
 80169ba:	4b9c      	ldr	r3, [pc, #624]	; (8016c2c <start_COM_task+0x35c>)
 80169bc:	623b      	str	r3, [r7, #32]
		cell_temperatures = LTC_temperatures;
 80169be:	4b9c      	ldr	r3, [pc, #624]	; (8016c30 <start_COM_task+0x360>)
 80169c0:	61fb      	str	r3, [r7, #28]
#endif

		/* If new cell data is available, supply the system with it */
		if (cell_data_valid) {
 80169c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d010      	beq.n	80169ec <start_COM_task+0x11c>
			xQueueOverwrite(cell_voltages_queue, &cell_voltages);
 80169ca:	4b9a      	ldr	r3, [pc, #616]	; (8016c34 <start_COM_task+0x364>)
 80169cc:	6818      	ldr	r0, [r3, #0]
 80169ce:	f107 0120 	add.w	r1, r7, #32
 80169d2:	2302      	movs	r3, #2
 80169d4:	2200      	movs	r2, #0
 80169d6:	f012 f887 	bl	8028ae8 <xQueueGenericSend>
			xQueueOverwrite(cell_temperatures_queue, &cell_temperatures);
 80169da:	4b97      	ldr	r3, [pc, #604]	; (8016c38 <start_COM_task+0x368>)
 80169dc:	6818      	ldr	r0, [r3, #0]
 80169de:	f107 011c 	add.w	r1, r7, #28
 80169e2:	2302      	movs	r3, #2
 80169e4:	2200      	movs	r2, #0
 80169e6:	f012 f87f 	bl	8028ae8 <xQueueGenericSend>
 80169ea:	e002      	b.n	80169f2 <start_COM_task+0x122>
		} else {
			__raise_ams_error(ERROR_NO_LTC_DATA);
 80169ec:	200a      	movs	r0, #10
 80169ee:	f7ff fd2b 	bl	8016448 <__raise_ams_error>
		}

		/* Raise an error if cell voltage time constraints are not met,
		 * or if there is no data being received */
		cell_voltages_error = COM_voltages_ok(cell_voltages,
 80169f2:	6a3b      	ldr	r3, [r7, #32]
 80169f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80169f6:	4611      	mov	r1, r2
 80169f8:	4618      	mov	r0, r3
 80169fa:	f7fd fb59 	bl	80140b0 <COM_voltages_ok>
 80169fe:	4603      	mov	r3, r0
 8016a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				voltage_sample_constraint);

		if (cell_voltages_error) {
 8016a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d004      	beq.n	8016a16 <start_COM_task+0x146>
			__raise_ams_error(cell_voltages_error);
 8016a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a10:	4618      	mov	r0, r3
 8016a12:	f7ff fd19 	bl	8016448 <__raise_ams_error>
		}

		/* Raise an error if cell temperature time constraints are not met,
		 * or if there is no data being received */
		cell_temperatures_error = COM_temperatures_ok(cell_temperatures,
 8016a16:	69fa      	ldr	r2, [r7, #28]
 8016a18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	bf0c      	ite	eq
 8016a1e:	2301      	moveq	r3, #1
 8016a20:	2300      	movne	r3, #0
 8016a22:	b2db      	uxtb	r3, r3
 8016a24:	b29b      	uxth	r3, r3
 8016a26:	4619      	mov	r1, r3
 8016a28:	4610      	mov	r0, r2
 8016a2a:	f7fd fbad 	bl	8014188 <COM_temperatures_ok>
 8016a2e:	4603      	mov	r3, r0
 8016a30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				!temperature_sample_constraint);

		if (cell_temperatures_error) {
 8016a34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d004      	beq.n	8016a46 <start_COM_task+0x176>
			__raise_ams_error(cell_temperatures_error);
 8016a3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a40:	4618      	mov	r0, r3
 8016a42:	f7ff fd01 	bl	8016448 <__raise_ams_error>
		}

		/* If no new accumulator current was gathered, raise an error */
		if (!accumulator_current_valid) {
 8016a46:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d102      	bne.n	8016a54 <start_COM_task+0x184>
			__raise_ams_error(ERROR_NO_CURRENT_DATA);
 8016a4e:	200b      	movs	r0, #11
 8016a50:	f7ff fcfa 	bl	8016448 <__raise_ams_error>
		}

		/* Raise an error if accumulator current time constraints are not met,
		 * or if there is no data being received */
		accumulator_current_error = COM_current_ok(&accumulator_current,
 8016a54:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8016a56:	f107 0310 	add.w	r3, r7, #16
 8016a5a:	4611      	mov	r1, r2
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	f7fd fbff 	bl	8014260 <COM_current_ok>
 8016a62:	4603      	mov	r3, r0
 8016a64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				current_sample_constraint);

		if (accumulator_current_error) {
 8016a68:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d004      	beq.n	8016a7a <start_COM_task+0x1aa>
			__raise_ams_error(accumulator_current_error);
 8016a70:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8016a74:	4618      	mov	r0, r3
 8016a76:	f7ff fce7 	bl	8016448 <__raise_ams_error>
		}

#ifdef STREAM_DATA
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016a7a:	f897 4043 	ldrb.w	r4, [r7, #67]	; 0x43
				(uint16_t) (10000 * cell_voltages[__k]),
 8016a7e:	6a3a      	ldr	r2, [r7, #32]
 8016a80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016a84:	00db      	lsls	r3, r3, #3
 8016a86:	4413      	add	r3, r2
 8016a88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016a8c:	a360      	add	r3, pc, #384	; (adr r3, 8016c10 <start_COM_task+0x340>)
 8016a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a92:	f7e9 fda3 	bl	80005dc <__aeabi_dmul>
 8016a96:	4602      	mov	r2, r0
 8016a98:	460b      	mov	r3, r1
 8016a9a:	4610      	mov	r0, r2
 8016a9c:	4619      	mov	r1, r3
 8016a9e:	f7ea f875 	bl	8000b8c <__aeabi_d2uiz>
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016aa6:	4698      	mov	r8, r3
				(uint16_t) (10000 * cell_voltages[__k + 1]),
 8016aa8:	6a3a      	ldr	r2, [r7, #32]
 8016aaa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016aae:	3301      	adds	r3, #1
 8016ab0:	00db      	lsls	r3, r3, #3
 8016ab2:	4413      	add	r3, r2
 8016ab4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016ab8:	a355      	add	r3, pc, #340	; (adr r3, 8016c10 <start_COM_task+0x340>)
 8016aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016abe:	f7e9 fd8d 	bl	80005dc <__aeabi_dmul>
 8016ac2:	4602      	mov	r2, r0
 8016ac4:	460b      	mov	r3, r1
 8016ac6:	4610      	mov	r0, r2
 8016ac8:	4619      	mov	r1, r3
 8016aca:	f7ea f85f 	bl	8000b8c <__aeabi_d2uiz>
 8016ace:	4603      	mov	r3, r0
 8016ad0:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016ad2:	4699      	mov	r9, r3
				(uint16_t) (10000 * cell_voltages[__k + 2]),
 8016ad4:	6a3a      	ldr	r2, [r7, #32]
 8016ad6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016ada:	3302      	adds	r3, #2
 8016adc:	00db      	lsls	r3, r3, #3
 8016ade:	4413      	add	r3, r2
 8016ae0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016ae4:	a34a      	add	r3, pc, #296	; (adr r3, 8016c10 <start_COM_task+0x340>)
 8016ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aea:	f7e9 fd77 	bl	80005dc <__aeabi_dmul>
 8016aee:	4602      	mov	r2, r0
 8016af0:	460b      	mov	r3, r1
 8016af2:	4610      	mov	r0, r2
 8016af4:	4619      	mov	r1, r3
 8016af6:	f7ea f849 	bl	8000b8c <__aeabi_d2uiz>
 8016afa:	4603      	mov	r3, r0
 8016afc:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016afe:	461d      	mov	r5, r3
				(uint16_t) (10000 * cell_voltages[__k + 3]),
 8016b00:	6a3a      	ldr	r2, [r7, #32]
 8016b02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016b06:	3303      	adds	r3, #3
 8016b08:	00db      	lsls	r3, r3, #3
 8016b0a:	4413      	add	r3, r2
 8016b0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016b10:	a33f      	add	r3, pc, #252	; (adr r3, 8016c10 <start_COM_task+0x340>)
 8016b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b16:	f7e9 fd61 	bl	80005dc <__aeabi_dmul>
 8016b1a:	4602      	mov	r2, r0
 8016b1c:	460b      	mov	r3, r1
 8016b1e:	4610      	mov	r0, r2
 8016b20:	4619      	mov	r1, r3
 8016b22:	f7ea f833 	bl	8000b8c <__aeabi_d2uiz>
 8016b26:	4603      	mov	r3, r0
 8016b28:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016b2a:	461e      	mov	r6, r3
				(uint16_t) (10000 * cell_voltages[__k + 4]),
 8016b2c:	6a3a      	ldr	r2, [r7, #32]
 8016b2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016b32:	3304      	adds	r3, #4
 8016b34:	00db      	lsls	r3, r3, #3
 8016b36:	4413      	add	r3, r2
 8016b38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016b3c:	a334      	add	r3, pc, #208	; (adr r3, 8016c10 <start_COM_task+0x340>)
 8016b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b42:	f7e9 fd4b 	bl	80005dc <__aeabi_dmul>
 8016b46:	4602      	mov	r2, r0
 8016b48:	460b      	mov	r3, r1
 8016b4a:	4610      	mov	r0, r2
 8016b4c:	4619      	mov	r1, r3
 8016b4e:	f7ea f81d 	bl	8000b8c <__aeabi_d2uiz>
 8016b52:	4603      	mov	r3, r0
 8016b54:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016b56:	60bb      	str	r3, [r7, #8]
				(uint16_t) (10000 * cell_voltages[__k + 5]),
 8016b58:	6a3a      	ldr	r2, [r7, #32]
 8016b5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016b5e:	3305      	adds	r3, #5
 8016b60:	00db      	lsls	r3, r3, #3
 8016b62:	4413      	add	r3, r2
 8016b64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016b68:	a329      	add	r3, pc, #164	; (adr r3, 8016c10 <start_COM_task+0x340>)
 8016b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b6e:	f7e9 fd35 	bl	80005dc <__aeabi_dmul>
 8016b72:	4602      	mov	r2, r0
 8016b74:	460b      	mov	r3, r1
 8016b76:	4610      	mov	r0, r2
 8016b78:	4619      	mov	r1, r3
 8016b7a:	f7ea f807 	bl	8000b8c <__aeabi_d2uiz>
 8016b7e:	4603      	mov	r3, r0
 8016b80:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016b82:	607b      	str	r3, [r7, #4]
				(uint16_t) (10000 * cell_voltages[__k + 6]));
 8016b84:	6a3a      	ldr	r2, [r7, #32]
 8016b86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016b8a:	3306      	adds	r3, #6
 8016b8c:	00db      	lsls	r3, r3, #3
 8016b8e:	4413      	add	r3, r2
 8016b90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016b94:	a31e      	add	r3, pc, #120	; (adr r3, 8016c10 <start_COM_task+0x340>)
 8016b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b9a:	f7e9 fd1f 	bl	80005dc <__aeabi_dmul>
 8016b9e:	4602      	mov	r2, r0
 8016ba0:	460b      	mov	r3, r1
 8016ba2:	4610      	mov	r0, r2
 8016ba4:	4619      	mov	r1, r3
 8016ba6:	f7e9 fff1 	bl	8000b8c <__aeabi_d2uiz>
 8016baa:	4603      	mov	r3, r0
 8016bac:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016bae:	9304      	str	r3, [sp, #16]
 8016bb0:	687a      	ldr	r2, [r7, #4]
 8016bb2:	9203      	str	r2, [sp, #12]
 8016bb4:	68bb      	ldr	r3, [r7, #8]
 8016bb6:	9302      	str	r3, [sp, #8]
 8016bb8:	9601      	str	r6, [sp, #4]
 8016bba:	9500      	str	r5, [sp, #0]
 8016bbc:	464b      	mov	r3, r9
 8016bbe:	4642      	mov	r2, r8
 8016bc0:	4621      	mov	r1, r4
 8016bc2:	481e      	ldr	r0, [pc, #120]	; (8016c3c <start_COM_task+0x36c>)
 8016bc4:	f015 fff6 	bl	802cbb4 <SEGGER_SYSVIEW_PrintfHost>
		__k = (__k + 7) % 126;
 8016bc8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016bcc:	1dda      	adds	r2, r3, #7
 8016bce:	4b1c      	ldr	r3, [pc, #112]	; (8016c40 <start_COM_task+0x370>)
 8016bd0:	fb83 1302 	smull	r1, r3, r3, r2
 8016bd4:	4413      	add	r3, r2
 8016bd6:	1199      	asrs	r1, r3, #6
 8016bd8:	17d3      	asrs	r3, r2, #31
 8016bda:	1ac9      	subs	r1, r1, r3
 8016bdc:	460b      	mov	r3, r1
 8016bde:	019b      	lsls	r3, r3, #6
 8016be0:	1a5b      	subs	r3, r3, r1
 8016be2:	005b      	lsls	r3, r3, #1
 8016be4:	1ad1      	subs	r1, r2, r3
 8016be6:	460b      	mov	r3, r1
 8016be8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
#endif

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8016bec:	e003      	b.n	8016bf6 <start_COM_task+0x326>
			next_tick += tick_increment;
 8016bee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bf2:	4413      	add	r3, r2
 8016bf4:	647b      	str	r3, [r7, #68]	; 0x44
		while (next_tick < osKernelGetTickCount()) {
 8016bf6:	f011 fc5b 	bl	80284b0 <osKernelGetTickCount>
 8016bfa:	4602      	mov	r2, r0
 8016bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016bfe:	4293      	cmp	r3, r2
 8016c00:	d3f5      	bcc.n	8016bee <start_COM_task+0x31e>
		}
		osDelayUntil(next_tick);
 8016c02:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016c04:	f011 fd16 	bl	8028634 <osDelayUntil>
		accumulator_current_valid = xQueuePeek(accumulator_current_queue,
 8016c08:	e6c6      	b.n	8016998 <start_COM_task+0xc8>
 8016c0a:	bf00      	nop
 8016c0c:	f3af 8000 	nop.w
 8016c10:	00000000 	.word	0x00000000
 8016c14:	40c38800 	.word	0x40c38800
 8016c18:	2001b1e8 	.word	0x2001b1e8
 8016c1c:	3dcccccd 	.word	0x3dcccccd
 8016c20:	447a0000 	.word	0x447a0000
 8016c24:	00000000 	.word	0x00000000
 8016c28:	2001a8b0 	.word	0x2001a8b0
 8016c2c:	2001a8c0 	.word	0x2001a8c0
 8016c30:	2001acc8 	.word	0x2001acc8
 8016c34:	2001a89c 	.word	0x2001a89c
 8016c38:	2001a8a0 	.word	0x2001a8a0
 8016c3c:	0802da60 	.word	0x0802da60
 8016c40:	82082083 	.word	0x82082083

08016c44 <start_CAN_task>:
	}
}

void start_CAN_task(void *argument) {
 8016c44:	b580      	push	{r7, lr}
 8016c46:	b086      	sub	sp, #24
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016c4c:	4b2d      	ldr	r3, [pc, #180]	; (8016d04 <start_CAN_task+0xc0>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * CAN_task_info.periodicity;
 8016c52:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8016d08 <start_CAN_task+0xc4>
 8016c56:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8016d0c <start_CAN_task+0xc8>
 8016c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016c62:	ee17 3a90 	vmov	r3, s15
 8016c66:	60fb      	str	r3, [r7, #12]

	/* Make task-specific structures */
	uint32_t k = 0;
 8016c68:	2300      	movs	r3, #0
 8016c6a:	613b      	str	r3, [r7, #16]

	/* Wait until offset */
	next_tick += TICK2HZ * CAN_task_info.offset;
 8016c6c:	697b      	ldr	r3, [r7, #20]
 8016c6e:	ee07 3a90 	vmov	s15, r3
 8016c72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016c76:	eddf 6a26 	vldr	s13, [pc, #152]	; 8016d10 <start_CAN_task+0xcc>
 8016c7a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8016d0c <start_CAN_task+0xc8>
 8016c7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016c8a:	ee17 3a90 	vmov	r3, s15
 8016c8e:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8016c90:	6978      	ldr	r0, [r7, #20]
 8016c92:	f011 fccf 	bl	8028634 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		if (!(k % 2)) {
 8016c96:	693b      	ldr	r3, [r7, #16]
 8016c98:	f003 0301 	and.w	r3, r3, #1
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d101      	bne.n	8016ca4 <start_CAN_task+0x60>
			can1_ams_status_1_transmit();
 8016ca0:	f7f9 f898 	bl	800fdd4 <can1_ams_status_1_transmit>
		}
		if (!(k % 2)) {
 8016ca4:	693b      	ldr	r3, [r7, #16]
 8016ca6:	f003 0301 	and.w	r3, r3, #1
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d101      	bne.n	8016cb2 <start_CAN_task+0x6e>
			can1_ams_temperatures_transmit();
 8016cae:	f7f9 f979 	bl	800ffa4 <can1_ams_temperatures_transmit>
		}
		if (!(k % 3)) {
 8016cb2:	6939      	ldr	r1, [r7, #16]
 8016cb4:	4b17      	ldr	r3, [pc, #92]	; (8016d14 <start_CAN_task+0xd0>)
 8016cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8016cba:	085a      	lsrs	r2, r3, #1
 8016cbc:	4613      	mov	r3, r2
 8016cbe:	005b      	lsls	r3, r3, #1
 8016cc0:	4413      	add	r3, r2
 8016cc2:	1aca      	subs	r2, r1, r3
 8016cc4:	2a00      	cmp	r2, #0
 8016cc6:	d101      	bne.n	8016ccc <start_CAN_task+0x88>
			can2_charger_config_transmit();
 8016cc8:	f7fb f8f4 	bl	8011eb4 <can2_charger_config_transmit>
		}
		if (!(k % 4)) {
 8016ccc:	693b      	ldr	r3, [r7, #16]
 8016cce:	f003 0303 	and.w	r3, r3, #3
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d103      	bne.n	8016cde <start_CAN_task+0x9a>
			can1_ams_cell_temperatures_transmit();
 8016cd6:	f7fa fbfb 	bl	80114d0 <can1_ams_cell_temperatures_transmit>
			can1_ams_cell_voltages_transmit();
 8016cda:	f7f9 f9cf 	bl	801007c <can1_ams_cell_voltages_transmit>
		}
		k++;
 8016cde:	693b      	ldr	r3, [r7, #16]
 8016ce0:	3301      	adds	r3, #1
 8016ce2:	613b      	str	r3, [r7, #16]
		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8016ce4:	e003      	b.n	8016cee <start_CAN_task+0xaa>
			next_tick += tick_increment;
 8016ce6:	697a      	ldr	r2, [r7, #20]
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	4413      	add	r3, r2
 8016cec:	617b      	str	r3, [r7, #20]
		while (next_tick < osKernelGetTickCount()) {
 8016cee:	f011 fbdf 	bl	80284b0 <osKernelGetTickCount>
 8016cf2:	4602      	mov	r2, r0
 8016cf4:	697b      	ldr	r3, [r7, #20]
 8016cf6:	4293      	cmp	r3, r2
 8016cf8:	d3f5      	bcc.n	8016ce6 <start_CAN_task+0xa2>
		}
		osDelayUntil(next_tick);
 8016cfa:	6978      	ldr	r0, [r7, #20]
 8016cfc:	f011 fc9a 	bl	8028634 <osDelayUntil>
		if (!(k % 2)) {
 8016d00:	e7c9      	b.n	8016c96 <start_CAN_task+0x52>
 8016d02:	bf00      	nop
 8016d04:	2001b1e8 	.word	0x2001b1e8
 8016d08:	3dcccccd 	.word	0x3dcccccd
 8016d0c:	447a0000 	.word	0x447a0000
 8016d10:	00000000 	.word	0x00000000
 8016d14:	aaaaaaab 	.word	0xaaaaaaab

08016d18 <start_CSE_task>:
	}
}

void start_CSE_task(void *argument) {
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b08e      	sub	sp, #56	; 0x38
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016d20:	4b59      	ldr	r3, [pc, #356]	; (8016e88 <start_CSE_task+0x170>)
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t tick_increment = TICK2HZ * CSE_task_info.periodicity;
 8016d26:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8016e8c <start_CSE_task+0x174>
 8016d2a:	eddf 7a59 	vldr	s15, [pc, #356]	; 8016e90 <start_CSE_task+0x178>
 8016d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016d36:	ee17 3a90 	vmov	r3, s15
 8016d3a:	623b      	str	r3, [r7, #32]

	/* Make task-specific structures */
	CSE_initialize();
 8016d3c:	f002 fe98 	bl	8019a70 <CSE_initialize>
	double *cell_voltages;
	double accumulator_current;
	double mean_cell_voltage;

	/* Wait until offset */
	next_tick += TICK2HZ * CSE_task_info.offset;
 8016d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d42:	ee07 3a90 	vmov	s15, r3
 8016d46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016d4a:	eddf 6a52 	vldr	s13, [pc, #328]	; 8016e94 <start_CSE_task+0x17c>
 8016d4e:	eddf 7a50 	vldr	s15, [pc, #320]	; 8016e90 <start_CSE_task+0x178>
 8016d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016d5e:	ee17 3a90 	vmov	r3, s15
 8016d62:	637b      	str	r3, [r7, #52]	; 0x34
	osDelayUntil(next_tick);
 8016d64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016d66:	f011 fc65 	bl	8028634 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 8016d6a:	201f      	movs	r0, #31
 8016d6c:	f7ff faea 	bl	8016344 <__wait_for_data>

	CSE_DW.x[1] = 0.40773275430377137 * 23840.700984295119;
 8016d70:	4949      	ldr	r1, [pc, #292]	; (8016e98 <start_CSE_task+0x180>)
 8016d72:	a341      	add	r3, pc, #260	; (adr r3, 8016e78 <start_CSE_task+0x160>)
 8016d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d78:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	CSE_DW.x[2] = 23840.700984295119;
 8016d7c:	4946      	ldr	r1, [pc, #280]	; (8016e98 <start_CSE_task+0x180>)
 8016d7e:	a340      	add	r3, pc, #256	; (adr r3, 8016e80 <start_CSE_task+0x168>)
 8016d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d84:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	for (;;) {
		/* Enter periodic behaviour */

		/* Collect cell voltages and accumulator current -- then calcualte SOC/SOH */
		if (xQueuePeek(accumulator_current_queue, &accumulator_current, 0)
 8016d88:	4b44      	ldr	r3, [pc, #272]	; (8016e9c <start_CSE_task+0x184>)
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	f107 0108 	add.w	r1, r7, #8
 8016d90:	2200      	movs	r2, #0
 8016d92:	4618      	mov	r0, r3
 8016d94:	f012 f98e 	bl	80290b4 <xQueuePeek>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d061      	beq.n	8016e62 <start_CSE_task+0x14a>
				&& xQueuePeek(cell_voltages_queue, &cell_voltages, 0)) {
 8016d9e:	4b40      	ldr	r3, [pc, #256]	; (8016ea0 <start_CSE_task+0x188>)
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	f107 0114 	add.w	r1, r7, #20
 8016da6:	2200      	movs	r2, #0
 8016da8:	4618      	mov	r0, r3
 8016daa:	f012 f983 	bl	80290b4 <xQueuePeek>
 8016dae:	4603      	mov	r3, r0
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d056      	beq.n	8016e62 <start_CSE_task+0x14a>
			/*
			 * Calculate the mean cell voltage -- if the periodicity is high enough
			 * one might calculate them all individually at some point (and/or do them interleaving)
			 */
			mean_cell_voltage = 0;
 8016db4:	f04f 0200 	mov.w	r2, #0
 8016db8:	f04f 0300 	mov.w	r3, #0
 8016dbc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			for (int i = 0; i < 126; i++) {
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8016dc4:	e010      	b.n	8016de8 <start_CSE_task+0xd0>
				mean_cell_voltage += cell_voltages[i];
 8016dc6:	697a      	ldr	r2, [r7, #20]
 8016dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dca:	00db      	lsls	r3, r3, #3
 8016dcc:	4413      	add	r3, r2
 8016dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016dd6:	f7e9 fa4b 	bl	8000270 <__adddf3>
 8016dda:	4602      	mov	r2, r0
 8016ddc:	460b      	mov	r3, r1
 8016dde:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			for (int i = 0; i < 126; i++) {
 8016de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016de4:	3301      	adds	r3, #1
 8016de6:	627b      	str	r3, [r7, #36]	; 0x24
 8016de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dea:	2b7d      	cmp	r3, #125	; 0x7d
 8016dec:	ddeb      	ble.n	8016dc6 <start_CSE_task+0xae>
			}
			mean_cell_voltage /= 126;
 8016dee:	f04f 0200 	mov.w	r2, #0
 8016df2:	4b2c      	ldr	r3, [pc, #176]	; (8016ea4 <start_CSE_task+0x18c>)
 8016df4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016df8:	f7e9 fd1a 	bl	8000830 <__aeabi_ddiv>
 8016dfc:	4602      	mov	r2, r0
 8016dfe:	460b      	mov	r3, r1
 8016e00:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

			CSE_U.current = accumulator_current;
 8016e04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016e08:	4927      	ldr	r1, [pc, #156]	; (8016ea8 <start_CSE_task+0x190>)
 8016e0a:	e9c1 2300 	strd	r2, r3, [r1]
			CSE_U.y = mean_cell_voltage;
 8016e0e:	4926      	ldr	r1, [pc, #152]	; (8016ea8 <start_CSE_task+0x190>)
 8016e10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016e14:	e9c1 2302 	strd	r2, r3, [r1, #8]
			CSE_step();
 8016e18:	f001 fb26 	bl	8018468 <CSE_step>

#ifdef STREAM_DATA
			int32_t int_soc = 1000 * CSE_Y.soc;
 8016e1c:	4b23      	ldr	r3, [pc, #140]	; (8016eac <start_CSE_task+0x194>)
 8016e1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016e22:	f04f 0200 	mov.w	r2, #0
 8016e26:	4b22      	ldr	r3, [pc, #136]	; (8016eb0 <start_CSE_task+0x198>)
 8016e28:	f7e9 fbd8 	bl	80005dc <__aeabi_dmul>
 8016e2c:	4602      	mov	r2, r0
 8016e2e:	460b      	mov	r3, r1
 8016e30:	4610      	mov	r0, r2
 8016e32:	4619      	mov	r1, r3
 8016e34:	f7e9 fe82 	bl	8000b3c <__aeabi_d2iz>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	61fb      	str	r3, [r7, #28]
			int32_t int_cap = CSE_Y.capacity;
 8016e3c:	4b1b      	ldr	r3, [pc, #108]	; (8016eac <start_CSE_task+0x194>)
 8016e3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016e42:	4610      	mov	r0, r2
 8016e44:	4619      	mov	r1, r3
 8016e46:	f7e9 fe79 	bl	8000b3c <__aeabi_d2iz>
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	61bb      	str	r3, [r7, #24]
			SEGGER_SYSVIEW_PrintfHost("CSE %i %i", int_soc, int_cap);
 8016e4e:	69ba      	ldr	r2, [r7, #24]
 8016e50:	69f9      	ldr	r1, [r7, #28]
 8016e52:	4818      	ldr	r0, [pc, #96]	; (8016eb4 <start_CSE_task+0x19c>)
 8016e54:	f015 feae 	bl	802cbb4 <SEGGER_SYSVIEW_PrintfHost>
#endif

		}

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8016e58:	e003      	b.n	8016e62 <start_CSE_task+0x14a>
			next_tick += tick_increment;
 8016e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016e5c:	6a3b      	ldr	r3, [r7, #32]
 8016e5e:	4413      	add	r3, r2
 8016e60:	637b      	str	r3, [r7, #52]	; 0x34
		while (next_tick < osKernelGetTickCount()) {
 8016e62:	f011 fb25 	bl	80284b0 <osKernelGetTickCount>
 8016e66:	4602      	mov	r2, r0
 8016e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e6a:	4293      	cmp	r3, r2
 8016e6c:	d3f5      	bcc.n	8016e5a <start_CSE_task+0x142>
		}
		osDelayUntil(next_tick);
 8016e6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016e70:	f011 fbe0 	bl	8028634 <osDelayUntil>
		if (xQueuePeek(accumulator_current_queue, &accumulator_current, 0)
 8016e74:	e788      	b.n	8016d88 <start_CSE_task+0x70>
 8016e76:	bf00      	nop
 8016e78:	3d176113 	.word	0x3d176113
 8016e7c:	40c2fc51 	.word	0x40c2fc51
 8016e80:	dced3ba3 	.word	0xdced3ba3
 8016e84:	40d7482c 	.word	0x40d7482c
 8016e88:	2001b1e8 	.word	0x2001b1e8
 8016e8c:	3dcccccd 	.word	0x3dcccccd
 8016e90:	447a0000 	.word	0x447a0000
 8016e94:	00000000 	.word	0x00000000
 8016e98:	2001b380 	.word	0x2001b380
 8016e9c:	2001a8b0 	.word	0x2001a8b0
 8016ea0:	2001a89c 	.word	0x2001a89c
 8016ea4:	405f8000 	.word	0x405f8000
 8016ea8:	2001b3e0 	.word	0x2001b3e0
 8016eac:	2001b3f0 	.word	0x2001b3f0
 8016eb0:	408f4000 	.word	0x408f4000
 8016eb4:	0802da88 	.word	0x0802da88

08016eb8 <start_COOL_task>:
	}
}

void start_COOL_task(void *argument) {
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b098      	sub	sp, #96	; 0x60
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016ec0:	4b4b      	ldr	r3, [pc, #300]	; (8016ff0 <start_COOL_task+0x138>)
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t tick_increment = TICK2HZ * COOL_task_info.periodicity;
 8016ec6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8016ff4 <start_COOL_task+0x13c>
 8016eca:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8016ff8 <start_COOL_task+0x140>
 8016ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016ed6:	ee17 3a90 	vmov	r3, s15
 8016eda:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Make task-specific structures */
	PID_t PID;

	PID_initialize(&PID, // *ptr
 8016edc:	f107 030c 	add.w	r3, r7, #12
 8016ee0:	eddf 2a46 	vldr	s5, [pc, #280]	; 8016ffc <start_COOL_task+0x144>
 8016ee4:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 8016ee8:	eddf 1a45 	vldr	s3, [pc, #276]	; 8017000 <start_COOL_task+0x148>
 8016eec:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8017000 <start_COOL_task+0x148>
 8016ef0:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8016ef4:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8016ef8:	4618      	mov	r0, r3
 8016efa:	f7fd fe28 	bl	8014b4e <PID_initialize>
			0,			// Integral gain
			0,			// Differential gain
			20,			// Lower PID output bound
			100			// Upper PID output bound
			);
	FAN_initialize(&htim1);
 8016efe:	4841      	ldr	r0, [pc, #260]	; (8017004 <start_COOL_task+0x14c>)
 8016f00:	f7fd fa00 	bl	8014304 <FAN_initialize>

	double *cell_temperatures;
	double max_cell_temperature;

	/* Wait until offset */
	next_tick += TICK2HZ * COOL_task_info.offset;
 8016f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f06:	ee07 3a90 	vmov	s15, r3
 8016f0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016f0e:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8017000 <start_COOL_task+0x148>
 8016f12:	eddf 7a39 	vldr	s15, [pc, #228]	; 8016ff8 <start_COOL_task+0x140>
 8016f16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f22:	ee17 3a90 	vmov	r3, s15
 8016f26:	65fb      	str	r3, [r7, #92]	; 0x5c
	osDelayUntil(next_tick);
 8016f28:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8016f2a:	f011 fb83 	bl	8028634 <osDelayUntil>

	__wait_for_data(WAIT_FOR_CELL_TEMPERATURES);
 8016f2e:	2002      	movs	r0, #2
 8016f30:	f7ff fa08 	bl	8016344 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */

		/* If the cell temperatures are received one may input them into the PID */
		if (xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)) {
 8016f34:	4b34      	ldr	r3, [pc, #208]	; (8017008 <start_COOL_task+0x150>)
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	f107 0108 	add.w	r1, r7, #8
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	4618      	mov	r0, r3
 8016f40:	f012 f8b8 	bl	80290b4 <xQueuePeek>
 8016f44:	4603      	mov	r3, r0
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d048      	beq.n	8016fdc <start_COOL_task+0x124>
			/* Calculate the maximum cell temperature */
			max_cell_temperature = 0;
 8016f4a:	f04f 0200 	mov.w	r2, #0
 8016f4e:	f04f 0300 	mov.w	r3, #0
 8016f52:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			for (int i = 0; i < 126; i++) {
 8016f56:	2300      	movs	r3, #0
 8016f58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016f5a:	e010      	b.n	8016f7e <start_COOL_task+0xc6>
				max_cell_temperature += cell_temperatures[i];
 8016f5c:	68ba      	ldr	r2, [r7, #8]
 8016f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f60:	00db      	lsls	r3, r3, #3
 8016f62:	4413      	add	r3, r2
 8016f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f68:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8016f6c:	f7e9 f980 	bl	8000270 <__adddf3>
 8016f70:	4602      	mov	r2, r0
 8016f72:	460b      	mov	r3, r1
 8016f74:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			for (int i = 0; i < 126; i++) {
 8016f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f7a:	3301      	adds	r3, #1
 8016f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f80:	2b7d      	cmp	r3, #125	; 0x7d
 8016f82:	ddeb      	ble.n	8016f5c <start_COOL_task+0xa4>
			}
			max_cell_temperature /= 126;
 8016f84:	f04f 0200 	mov.w	r2, #0
 8016f88:	4b20      	ldr	r3, [pc, #128]	; (801700c <start_COOL_task+0x154>)
 8016f8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8016f8e:	f7e9 fc4f 	bl	8000830 <__aeabi_ddiv>
 8016f92:	4602      	mov	r2, r0
 8016f94:	460b      	mov	r3, r1
 8016f96:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

			/* Progress the PID and set the fan duty cycle accordingly */
			PID_progress(&PID, max_cell_temperature);
 8016f9a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8016f9e:	f7e9 fe15 	bl	8000bcc <__aeabi_d2f>
 8016fa2:	4602      	mov	r2, r0
 8016fa4:	f107 030c 	add.w	r3, r7, #12
 8016fa8:	ee00 2a10 	vmov	s0, r2
 8016fac:	4618      	mov	r0, r3
 8016fae:	f7fd fd5f 	bl	8014a70 <PID_progress>
			FAN_duty_cycle(&htim1, PID.output);
 8016fb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8016fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8016fba:	4812      	ldr	r0, [pc, #72]	; (8017004 <start_COOL_task+0x14c>)
 8016fbc:	f7fd f9cc 	bl	8014358 <FAN_duty_cycle>

			pPID.duty_cycle = PID.output;
 8016fc0:	697b      	ldr	r3, [r7, #20]
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f7e9 fab2 	bl	800052c <__aeabi_f2d>
 8016fc8:	4602      	mov	r2, r0
 8016fca:	460b      	mov	r3, r1
 8016fcc:	4910      	ldr	r1, [pc, #64]	; (8017010 <start_COOL_task+0x158>)
 8016fce:	e9c1 2300 	strd	r2, r3, [r1]
		}

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8016fd2:	e003      	b.n	8016fdc <start_COOL_task+0x124>
			next_tick += tick_increment;
 8016fd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016fd8:	4413      	add	r3, r2
 8016fda:	65fb      	str	r3, [r7, #92]	; 0x5c
		while (next_tick < osKernelGetTickCount()) {
 8016fdc:	f011 fa68 	bl	80284b0 <osKernelGetTickCount>
 8016fe0:	4602      	mov	r2, r0
 8016fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fe4:	4293      	cmp	r3, r2
 8016fe6:	d3f5      	bcc.n	8016fd4 <start_COOL_task+0x11c>
		}
		osDelayUntil(next_tick);
 8016fe8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8016fea:	f011 fb23 	bl	8028634 <osDelayUntil>
		if (xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)) {
 8016fee:	e7a1      	b.n	8016f34 <start_COOL_task+0x7c>
 8016ff0:	2001b1e8 	.word	0x2001b1e8
 8016ff4:	3dcccccd 	.word	0x3dcccccd
 8016ff8:	447a0000 	.word	0x447a0000
 8016ffc:	42c80000 	.word	0x42c80000
 8017000:	00000000 	.word	0x00000000
 8017004:	2001b338 	.word	0x2001b338
 8017008:	2001a8a0 	.word	0x2001a8a0
 801700c:	405f8000 	.word	0x405f8000
 8017010:	2001a878 	.word	0x2001a878

08017014 <start_error_handler_task>:
	}
}

void start_error_handler_task(void *argument) {
 8017014:	b580      	push	{r7, lr}
 8017016:	b086      	sub	sp, #24
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 801701c:	4b2a      	ldr	r3, [pc, #168]	; (80170c8 <start_error_handler_task+0xb4>)
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 8017022:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80170cc <start_error_handler_task+0xb8>
 8017026:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80170d0 <start_error_handler_task+0xbc>
 801702a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801702e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017032:	ee17 3a90 	vmov	r3, s15
 8017036:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	error_t error;

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 8017038:	697b      	ldr	r3, [r7, #20]
 801703a:	ee07 3a90 	vmov	s15, r3
 801703e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017042:	eddf 6a24 	vldr	s13, [pc, #144]	; 80170d4 <start_error_handler_task+0xc0>
 8017046:	eddf 7a22 	vldr	s15, [pc, #136]	; 80170d0 <start_error_handler_task+0xbc>
 801704a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801704e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017056:	ee17 3a90 	vmov	r3, s15
 801705a:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 801705c:	6978      	ldr	r0, [r7, #20]
 801705e:	f011 fae9 	bl	8028634 <osDelayUntil>
		 }
		 if (get_air_plus_ext() != get_set_air_plus_ext()) {
		 __raise_ams_error(ERROR_AIR_PLUS);
		 }
		 */
		if (xQueueReceive(error_queue, &error, 0)) {
 8017062:	4b1d      	ldr	r3, [pc, #116]	; (80170d8 <start_error_handler_task+0xc4>)
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	f107 010f 	add.w	r1, r7, #15
 801706a:	2200      	movs	r2, #0
 801706c:	4618      	mov	r0, r3
 801706e:	f011 ff11 	bl	8028e94 <xQueueReceive>
 8017072:	4603      	mov	r3, r0
 8017074:	2b00      	cmp	r3, #0
 8017076:	d00a      	beq.n	801708e <start_error_handler_task+0x7a>
			switch (error) {
 8017078:	7bfb      	ldrb	r3, [r7, #15]
 801707a:	2b02      	cmp	r3, #2
 801707c:	d103      	bne.n	8017086 <start_error_handler_task+0x72>
			case ERROR_IMD:
				set_imd_error_ext(1);
 801707e:	2001      	movs	r0, #1
 8017080:	f000 f928 	bl	80172d4 <set_imd_error_ext>
				break;
 8017084:	e011      	b.n	80170aa <start_error_handler_task+0x96>
			default:
				set_ams_error_ext(1);
 8017086:	2001      	movs	r0, #1
 8017088:	f000 f906 	bl	8017298 <set_ams_error_ext>
				break;
 801708c:	e00d      	b.n	80170aa <start_error_handler_task+0x96>
			}
		} else {
			set_ams_error_ext(0);
 801708e:	2000      	movs	r0, #0
 8017090:	f000 f902 	bl	8017298 <set_ams_error_ext>
			set_imd_error_ext(0);
 8017094:	2000      	movs	r0, #0
 8017096:	f000 f91d 	bl	80172d4 <set_imd_error_ext>
			if (!get_ams_error_latched_ext()) {
 801709a:	f000 f90f 	bl	80172bc <get_ams_error_latched_ext>
 801709e:	4603      	mov	r3, r0
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d107      	bne.n	80170b4 <start_error_handler_task+0xa0>
				__error = 0;
 80170a4:	4b0d      	ldr	r3, [pc, #52]	; (80170dc <start_error_handler_task+0xc8>)
 80170a6:	2200      	movs	r2, #0
 80170a8:	701a      	strb	r2, [r3, #0]
			}
		}

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 80170aa:	e003      	b.n	80170b4 <start_error_handler_task+0xa0>
			next_tick += tick_increment;
 80170ac:	697a      	ldr	r2, [r7, #20]
 80170ae:	693b      	ldr	r3, [r7, #16]
 80170b0:	4413      	add	r3, r2
 80170b2:	617b      	str	r3, [r7, #20]
		while (next_tick < osKernelGetTickCount()) {
 80170b4:	f011 f9fc 	bl	80284b0 <osKernelGetTickCount>
 80170b8:	4602      	mov	r2, r0
 80170ba:	697b      	ldr	r3, [r7, #20]
 80170bc:	4293      	cmp	r3, r2
 80170be:	d3f5      	bcc.n	80170ac <start_error_handler_task+0x98>
		}
		osDelayUntil(next_tick);
 80170c0:	6978      	ldr	r0, [r7, #20]
 80170c2:	f011 fab7 	bl	8028634 <osDelayUntil>
		if (xQueueReceive(error_queue, &error, 0)) {
 80170c6:	e7cc      	b.n	8017062 <start_error_handler_task+0x4e>
 80170c8:	2001b1e8 	.word	0x2001b1e8
 80170cc:	3dcccccd 	.word	0x3dcccccd
 80170d0:	447a0000 	.word	0x447a0000
 80170d4:	00000000 	.word	0x00000000
 80170d8:	2001a8b8 	.word	0x2001a8b8
 80170dc:	2001a890 	.word	0x2001a890

080170e0 <start_IWDG_task>:
	}
}

void start_IWDG_task(void *argument) {
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b084      	sub	sp, #16
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80170e8:	4b1b      	ldr	r3, [pc, #108]	; (8017158 <start_IWDG_task+0x78>)
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 80170ee:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 801715c <start_IWDG_task+0x7c>
 80170f2:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8017160 <start_IWDG_task+0x80>
 80170f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80170fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80170fe:	ee17 3a90 	vmov	r3, s15
 8017102:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	ee07 3a90 	vmov	s15, r3
 801710a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801710e:	eddf 6a15 	vldr	s13, [pc, #84]	; 8017164 <start_IWDG_task+0x84>
 8017112:	eddf 7a13 	vldr	s15, [pc, #76]	; 8017160 <start_IWDG_task+0x80>
 8017116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801711a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801711e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017122:	ee17 3a90 	vmov	r3, s15
 8017126:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8017128:	68f8      	ldr	r0, [r7, #12]
 801712a:	f011 fa83 	bl	8028634 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 801712e:	201f      	movs	r0, #31
 8017130:	f7ff f908 	bl	8016344 <__wait_for_data>

	//initialize_IWDG(&hiwdg, IWDG_task_info.periodicity);

	for (;;) {
		/* Enter periodic behaviour */
		HAL_IWDG_Refresh(&hiwdg);
 8017134:	480c      	ldr	r0, [pc, #48]	; (8017168 <start_IWDG_task+0x88>)
 8017136:	f00e f8e7 	bl	8025308 <HAL_IWDG_Refresh>

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 801713a:	e003      	b.n	8017144 <start_IWDG_task+0x64>
			next_tick += tick_increment;
 801713c:	68fa      	ldr	r2, [r7, #12]
 801713e:	68bb      	ldr	r3, [r7, #8]
 8017140:	4413      	add	r3, r2
 8017142:	60fb      	str	r3, [r7, #12]
		while (next_tick < osKernelGetTickCount()) {
 8017144:	f011 f9b4 	bl	80284b0 <osKernelGetTickCount>
 8017148:	4602      	mov	r2, r0
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	4293      	cmp	r3, r2
 801714e:	d3f5      	bcc.n	801713c <start_IWDG_task+0x5c>
		}
		osDelayUntil(next_tick);
 8017150:	68f8      	ldr	r0, [r7, #12]
 8017152:	f011 fa6f 	bl	8028634 <osDelayUntil>
		HAL_IWDG_Refresh(&hiwdg);
 8017156:	e7ed      	b.n	8017134 <start_IWDG_task+0x54>
 8017158:	2001b1e8 	.word	0x2001b1e8
 801715c:	3dcccccd 	.word	0x3dcccccd
 8017160:	447a0000 	.word	0x447a0000
 8017164:	00000000 	.word	0x00000000
 8017168:	2001b1d4 	.word	0x2001b1d4

0801716c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 801716c:	b580      	push	{r7, lr}
 801716e:	b082      	sub	sp, #8
 8017170:	af00      	add	r7, sp, #0
 8017172:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	4a04      	ldr	r2, [pc, #16]	; (801718c <HAL_TIM_PeriodElapsedCallback+0x20>)
 801717a:	4293      	cmp	r3, r2
 801717c:	d101      	bne.n	8017182 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 801717e:	f00b fe25 	bl	8022dcc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8017182:	bf00      	nop
 8017184:	3708      	adds	r7, #8
 8017186:	46bd      	mov	sp, r7
 8017188:	bd80      	pop	{r7, pc}
 801718a:	bf00      	nop
 801718c:	40000c00 	.word	0x40000c00

08017190 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8017190:	b480      	push	{r7}
 8017192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8017194:	b672      	cpsid	i
}
 8017196:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8017198:	e7fe      	b.n	8017198 <Error_Handler+0x8>
	...

0801719c <set_air_plus_ext>:
#include "main.h"

#include "canlib_callbacks.h"
#include "SIM0.h"

void set_air_plus_ext(uint8_t closed) {
 801719c:	b580      	push	{r7, lr}
 801719e:	b082      	sub	sp, #8
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	4603      	mov	r3, r0
 80171a4:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnableAirPlus = closed;
#else
	HAL_GPIO_WritePin(enable_AIR_plus_GPIO_Port, enable_AIR_plus_Pin, closed);
 80171a6:	79fb      	ldrb	r3, [r7, #7]
 80171a8:	461a      	mov	r2, r3
 80171aa:	2104      	movs	r1, #4
 80171ac:	4803      	ldr	r0, [pc, #12]	; (80171bc <set_air_plus_ext+0x20>)
 80171ae:	f00e f879 	bl	80252a4 <HAL_GPIO_WritePin>
#endif
}
 80171b2:	bf00      	nop
 80171b4:	3708      	adds	r7, #8
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}
 80171ba:	bf00      	nop
 80171bc:	40021000 	.word	0x40021000

080171c0 <get_air_plus_ext>:

uint8_t get_air_plus_ext() {
 80171c0:	b580      	push	{r7, lr}
 80171c2:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AIR_plus_closed;
#else
	return HAL_GPIO_ReadPin(AIR_plus_closed_GPIO_Port, AIR_plus_closed_Pin);
 80171c4:	2110      	movs	r1, #16
 80171c6:	4803      	ldr	r0, [pc, #12]	; (80171d4 <get_air_plus_ext+0x14>)
 80171c8:	f00e f854 	bl	8025274 <HAL_GPIO_ReadPin>
 80171cc:	4603      	mov	r3, r0
#endif
}
 80171ce:	4618      	mov	r0, r3
 80171d0:	bd80      	pop	{r7, pc}
 80171d2:	bf00      	nop
 80171d4:	40021000 	.word	0x40021000

080171d8 <get_set_air_plus_ext>:

uint8_t get_set_air_plus_ext() {
 80171d8:	b580      	push	{r7, lr}
 80171da:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_U.EnableAirPlus;
#else
	return HAL_GPIO_ReadPin(enable_AIR_plus_GPIO_Port, enable_AIR_plus_Pin);
 80171dc:	2104      	movs	r1, #4
 80171de:	4803      	ldr	r0, [pc, #12]	; (80171ec <get_set_air_plus_ext+0x14>)
 80171e0:	f00e f848 	bl	8025274 <HAL_GPIO_ReadPin>
 80171e4:	4603      	mov	r3, r0
#endif
}
 80171e6:	4618      	mov	r0, r3
 80171e8:	bd80      	pop	{r7, pc}
 80171ea:	bf00      	nop
 80171ec:	40021000 	.word	0x40021000

080171f0 <set_air_minus_ext>:

void set_air_minus_ext(uint8_t closed) {
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b082      	sub	sp, #8
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	4603      	mov	r3, r0
 80171f8:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnableAirMinus = closed;
#else
	HAL_GPIO_WritePin(enable_AIR_minus_GPIO_Port, enable_AIR_minus_Pin, closed);
 80171fa:	79fb      	ldrb	r3, [r7, #7]
 80171fc:	461a      	mov	r2, r3
 80171fe:	2108      	movs	r1, #8
 8017200:	4803      	ldr	r0, [pc, #12]	; (8017210 <set_air_minus_ext+0x20>)
 8017202:	f00e f84f 	bl	80252a4 <HAL_GPIO_WritePin>
#endif
}
 8017206:	bf00      	nop
 8017208:	3708      	adds	r7, #8
 801720a:	46bd      	mov	sp, r7
 801720c:	bd80      	pop	{r7, pc}
 801720e:	bf00      	nop
 8017210:	40021000 	.word	0x40021000

08017214 <get_air_minus_ext>:

uint8_t get_air_minus_ext() {
 8017214:	b580      	push	{r7, lr}
 8017216:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AIR_minus_closed;
#else
	return HAL_GPIO_ReadPin(AIR_minus_closed_GPIO_Port, AIR_minus_closed_Pin);
 8017218:	2120      	movs	r1, #32
 801721a:	4803      	ldr	r0, [pc, #12]	; (8017228 <get_air_minus_ext+0x14>)
 801721c:	f00e f82a 	bl	8025274 <HAL_GPIO_ReadPin>
 8017220:	4603      	mov	r3, r0
#endif
}
 8017222:	4618      	mov	r0, r3
 8017224:	bd80      	pop	{r7, pc}
 8017226:	bf00      	nop
 8017228:	40021000 	.word	0x40021000

0801722c <get_set_air_minus_ext>:

uint8_t get_set_air_minus_ext() {
 801722c:	b580      	push	{r7, lr}
 801722e:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_U.EnableAirMinus;
#else
	return HAL_GPIO_ReadPin(enable_AIR_minus_GPIO_Port, enable_AIR_minus_Pin);
 8017230:	2108      	movs	r1, #8
 8017232:	4803      	ldr	r0, [pc, #12]	; (8017240 <get_set_air_minus_ext+0x14>)
 8017234:	f00e f81e 	bl	8025274 <HAL_GPIO_ReadPin>
 8017238:	4603      	mov	r3, r0
#endif
}
 801723a:	4618      	mov	r0, r3
 801723c:	bd80      	pop	{r7, pc}
 801723e:	bf00      	nop
 8017240:	40021000 	.word	0x40021000

08017244 <set_precharge_ext>:

void set_precharge_ext(uint8_t closed) {
 8017244:	b580      	push	{r7, lr}
 8017246:	b082      	sub	sp, #8
 8017248:	af00      	add	r7, sp, #0
 801724a:	4603      	mov	r3, r0
 801724c:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnablePrecharge = closed;
#else
	HAL_GPIO_WritePin(enable_precharge_GPIO_Port, enable_precharge_Pin, closed);
 801724e:	79fb      	ldrb	r3, [r7, #7]
 8017250:	461a      	mov	r2, r3
 8017252:	2102      	movs	r1, #2
 8017254:	4803      	ldr	r0, [pc, #12]	; (8017264 <set_precharge_ext+0x20>)
 8017256:	f00e f825 	bl	80252a4 <HAL_GPIO_WritePin>
#endif
}
 801725a:	bf00      	nop
 801725c:	3708      	adds	r7, #8
 801725e:	46bd      	mov	sp, r7
 8017260:	bd80      	pop	{r7, pc}
 8017262:	bf00      	nop
 8017264:	40021000 	.word	0x40021000

08017268 <get_precharge_ext>:

uint8_t get_precharge_ext() {
 8017268:	b580      	push	{r7, lr}
 801726a:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.precharge_closed;
#else
	return HAL_GPIO_ReadPin(precharge_closed_GPIO_Port, precharge_closed_Pin);
 801726c:	2140      	movs	r1, #64	; 0x40
 801726e:	4803      	ldr	r0, [pc, #12]	; (801727c <get_precharge_ext+0x14>)
 8017270:	f00e f800 	bl	8025274 <HAL_GPIO_ReadPin>
 8017274:	4603      	mov	r3, r0
#endif

}
 8017276:	4618      	mov	r0, r3
 8017278:	bd80      	pop	{r7, pc}
 801727a:	bf00      	nop
 801727c:	40021000 	.word	0x40021000

08017280 <get_set_precharge_ext>:

uint8_t get_set_precharge_ext() {
 8017280:	b580      	push	{r7, lr}
 8017282:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_U.EnablePrecharge;
#else
	return HAL_GPIO_ReadPin(enable_precharge_GPIO_Port, enable_precharge_Pin);
 8017284:	2102      	movs	r1, #2
 8017286:	4803      	ldr	r0, [pc, #12]	; (8017294 <get_set_precharge_ext+0x14>)
 8017288:	f00d fff4 	bl	8025274 <HAL_GPIO_ReadPin>
 801728c:	4603      	mov	r3, r0
#endif
}
 801728e:	4618      	mov	r0, r3
 8017290:	bd80      	pop	{r7, pc}
 8017292:	bf00      	nop
 8017294:	40021000 	.word	0x40021000

08017298 <set_ams_error_ext>:

void set_ams_error_ext(uint8_t raise_error) {
 8017298:	b580      	push	{r7, lr}
 801729a:	b082      	sub	sp, #8
 801729c:	af00      	add	r7, sp, #0
 801729e:	4603      	mov	r3, r0
 80172a0:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.AMS_error = raise_error;
#else
	HAL_GPIO_WritePin(AMS_error_GPIO_Port, AMS_error_Pin, raise_error);
 80172a2:	79fb      	ldrb	r3, [r7, #7]
 80172a4:	461a      	mov	r2, r3
 80172a6:	2180      	movs	r1, #128	; 0x80
 80172a8:	4803      	ldr	r0, [pc, #12]	; (80172b8 <set_ams_error_ext+0x20>)
 80172aa:	f00d fffb 	bl	80252a4 <HAL_GPIO_WritePin>
#endif
}
 80172ae:	bf00      	nop
 80172b0:	3708      	adds	r7, #8
 80172b2:	46bd      	mov	sp, r7
 80172b4:	bd80      	pop	{r7, pc}
 80172b6:	bf00      	nop
 80172b8:	40020800 	.word	0x40020800

080172bc <get_ams_error_latched_ext>:

uint8_t get_ams_error_latched_ext() {
 80172bc:	b580      	push	{r7, lr}
 80172be:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AMS_error_latched;
#else
	return HAL_GPIO_ReadPin(AMS_error_latched_GPIO_Port, AMS_error_latched_Pin);
 80172c0:	2140      	movs	r1, #64	; 0x40
 80172c2:	4803      	ldr	r0, [pc, #12]	; (80172d0 <get_ams_error_latched_ext+0x14>)
 80172c4:	f00d ffd6 	bl	8025274 <HAL_GPIO_ReadPin>
 80172c8:	4603      	mov	r3, r0
#endif
}
 80172ca:	4618      	mov	r0, r3
 80172cc:	bd80      	pop	{r7, pc}
 80172ce:	bf00      	nop
 80172d0:	40020800 	.word	0x40020800

080172d4 <set_imd_error_ext>:

void set_imd_error_ext(uint8_t raise_error) {
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b082      	sub	sp, #8
 80172d8:	af00      	add	r7, sp, #0
 80172da:	4603      	mov	r3, r0
 80172dc:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.IMD_error = raise_error;
#else
	return HAL_GPIO_ReadPin(IMD_error_GPIO_Port, IMD_error_Pin);
 80172de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80172e2:	4803      	ldr	r0, [pc, #12]	; (80172f0 <set_imd_error_ext+0x1c>)
 80172e4:	f00d ffc6 	bl	8025274 <HAL_GPIO_ReadPin>
#endif
}
 80172e8:	3708      	adds	r7, #8
 80172ea:	46bd      	mov	sp, r7
 80172ec:	bd80      	pop	{r7, pc}
 80172ee:	bf00      	nop
 80172f0:	40020800 	.word	0x40020800

080172f4 <get_imd_error_latched_ext>:

uint8_t get_imd_error_latched_ext() {
 80172f4:	b580      	push	{r7, lr}
 80172f6:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.IMD_error_latched;
#else
	return HAL_GPIO_ReadPin(IMD_error_latched_GPIO_Port, IMD_error_latched_Pin);
 80172f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80172fc:	4802      	ldr	r0, [pc, #8]	; (8017308 <get_imd_error_latched_ext+0x14>)
 80172fe:	f00d ffb9 	bl	8025274 <HAL_GPIO_ReadPin>
 8017302:	4603      	mov	r3, r0
#endif
}
 8017304:	4618      	mov	r0, r3
 8017306:	bd80      	pop	{r7, pc}
 8017308:	40020800 	.word	0x40020800

0801730c <get_sc_probe_ext>:

uint8_t get_sc_probe_ext() {
 801730c:	b580      	push	{r7, lr}
 801730e:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.SC_probe;
#else
	return HAL_GPIO_ReadPin(SC_probe_GPIO_Port, SC_probe_Pin);
 8017310:	2102      	movs	r1, #2
 8017312:	4803      	ldr	r0, [pc, #12]	; (8017320 <get_sc_probe_ext+0x14>)
 8017314:	f00d ffae 	bl	8025274 <HAL_GPIO_ReadPin>
 8017318:	4603      	mov	r3, r0
#endif
}
 801731a:	4618      	mov	r0, r3
 801731c:	bd80      	pop	{r7, pc}
 801731e:	bf00      	nop
 8017320:	40020400 	.word	0x40020400

08017324 <get_imd_ok_ext>:

uint8_t get_imd_ok_ext() {
 8017324:	b580      	push	{r7, lr}
 8017326:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return 1;
#else
	return HAL_GPIO_ReadPin(IMD_ok_GPIO_Port, IMD_ok_Pin);
 8017328:	2104      	movs	r1, #4
 801732a:	4803      	ldr	r0, [pc, #12]	; (8017338 <get_imd_ok_ext+0x14>)
 801732c:	f00d ffa2 	bl	8025274 <HAL_GPIO_ReadPin>
 8017330:	4603      	mov	r3, r0
#endif
}
 8017332:	4618      	mov	r0, r3
 8017334:	bd80      	pop	{r7, pc}
 8017336:	bf00      	nop
 8017338:	40020400 	.word	0x40020400

0801733c <set_balance_ext>:


void set_balance_ext(uint8_t closed, uint8_t index, void *settings) {
 801733c:	b480      	push	{r7}
 801733e:	b083      	sub	sp, #12
 8017340:	af00      	add	r7, sp, #0
 8017342:	4603      	mov	r3, r0
 8017344:	603a      	str	r2, [r7, #0]
 8017346:	71fb      	strb	r3, [r7, #7]
 8017348:	460b      	mov	r3, r1
 801734a:	71bb      	strb	r3, [r7, #6]
	SIM0_U.BalanceOut[index] = closed;
#else

#endif

}
 801734c:	bf00      	nop
 801734e:	370c      	adds	r7, #12
 8017350:	46bd      	mov	sp, r7
 8017352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017356:	4770      	bx	lr

08017358 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 801735c:	4b17      	ldr	r3, [pc, #92]	; (80173bc <MX_SPI2_Init+0x64>)
 801735e:	4a18      	ldr	r2, [pc, #96]	; (80173c0 <MX_SPI2_Init+0x68>)
 8017360:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8017362:	4b16      	ldr	r3, [pc, #88]	; (80173bc <MX_SPI2_Init+0x64>)
 8017364:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017368:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 801736a:	4b14      	ldr	r3, [pc, #80]	; (80173bc <MX_SPI2_Init+0x64>)
 801736c:	2200      	movs	r2, #0
 801736e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8017370:	4b12      	ldr	r3, [pc, #72]	; (80173bc <MX_SPI2_Init+0x64>)
 8017372:	2200      	movs	r2, #0
 8017374:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017376:	4b11      	ldr	r3, [pc, #68]	; (80173bc <MX_SPI2_Init+0x64>)
 8017378:	2200      	movs	r2, #0
 801737a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 801737c:	4b0f      	ldr	r3, [pc, #60]	; (80173bc <MX_SPI2_Init+0x64>)
 801737e:	2200      	movs	r2, #0
 8017380:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8017382:	4b0e      	ldr	r3, [pc, #56]	; (80173bc <MX_SPI2_Init+0x64>)
 8017384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017388:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 801738a:	4b0c      	ldr	r3, [pc, #48]	; (80173bc <MX_SPI2_Init+0x64>)
 801738c:	2228      	movs	r2, #40	; 0x28
 801738e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017390:	4b0a      	ldr	r3, [pc, #40]	; (80173bc <MX_SPI2_Init+0x64>)
 8017392:	2200      	movs	r2, #0
 8017394:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8017396:	4b09      	ldr	r3, [pc, #36]	; (80173bc <MX_SPI2_Init+0x64>)
 8017398:	2200      	movs	r2, #0
 801739a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801739c:	4b07      	ldr	r3, [pc, #28]	; (80173bc <MX_SPI2_Init+0x64>)
 801739e:	2200      	movs	r2, #0
 80173a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80173a2:	4b06      	ldr	r3, [pc, #24]	; (80173bc <MX_SPI2_Init+0x64>)
 80173a4:	220a      	movs	r2, #10
 80173a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80173a8:	4804      	ldr	r0, [pc, #16]	; (80173bc <MX_SPI2_Init+0x64>)
 80173aa:	f00e fc23 	bl	8025bf4 <HAL_SPI_Init>
 80173ae:	4603      	mov	r3, r0
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d001      	beq.n	80173b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80173b4:	f7ff feec 	bl	8017190 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80173b8:	bf00      	nop
 80173ba:	bd80      	pop	{r7, pc}
 80173bc:	2001b208 	.word	0x2001b208
 80173c0:	40003800 	.word	0x40003800

080173c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b08a      	sub	sp, #40	; 0x28
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80173cc:	f107 0314 	add.w	r3, r7, #20
 80173d0:	2200      	movs	r2, #0
 80173d2:	601a      	str	r2, [r3, #0]
 80173d4:	605a      	str	r2, [r3, #4]
 80173d6:	609a      	str	r2, [r3, #8]
 80173d8:	60da      	str	r2, [r3, #12]
 80173da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	4a28      	ldr	r2, [pc, #160]	; (8017484 <HAL_SPI_MspInit+0xc0>)
 80173e2:	4293      	cmp	r3, r2
 80173e4:	d14a      	bne.n	801747c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80173e6:	2300      	movs	r3, #0
 80173e8:	613b      	str	r3, [r7, #16]
 80173ea:	4b27      	ldr	r3, [pc, #156]	; (8017488 <HAL_SPI_MspInit+0xc4>)
 80173ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173ee:	4a26      	ldr	r2, [pc, #152]	; (8017488 <HAL_SPI_MspInit+0xc4>)
 80173f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80173f4:	6413      	str	r3, [r2, #64]	; 0x40
 80173f6:	4b24      	ldr	r3, [pc, #144]	; (8017488 <HAL_SPI_MspInit+0xc4>)
 80173f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80173fe:	613b      	str	r3, [r7, #16]
 8017400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017402:	2300      	movs	r3, #0
 8017404:	60fb      	str	r3, [r7, #12]
 8017406:	4b20      	ldr	r3, [pc, #128]	; (8017488 <HAL_SPI_MspInit+0xc4>)
 8017408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801740a:	4a1f      	ldr	r2, [pc, #124]	; (8017488 <HAL_SPI_MspInit+0xc4>)
 801740c:	f043 0304 	orr.w	r3, r3, #4
 8017410:	6313      	str	r3, [r2, #48]	; 0x30
 8017412:	4b1d      	ldr	r3, [pc, #116]	; (8017488 <HAL_SPI_MspInit+0xc4>)
 8017414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017416:	f003 0304 	and.w	r3, r3, #4
 801741a:	60fb      	str	r3, [r7, #12]
 801741c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801741e:	2300      	movs	r3, #0
 8017420:	60bb      	str	r3, [r7, #8]
 8017422:	4b19      	ldr	r3, [pc, #100]	; (8017488 <HAL_SPI_MspInit+0xc4>)
 8017424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017426:	4a18      	ldr	r2, [pc, #96]	; (8017488 <HAL_SPI_MspInit+0xc4>)
 8017428:	f043 0302 	orr.w	r3, r3, #2
 801742c:	6313      	str	r3, [r2, #48]	; 0x30
 801742e:	4b16      	ldr	r3, [pc, #88]	; (8017488 <HAL_SPI_MspInit+0xc4>)
 8017430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017432:	f003 0302 	and.w	r3, r3, #2
 8017436:	60bb      	str	r3, [r7, #8]
 8017438:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 801743a:	230c      	movs	r3, #12
 801743c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801743e:	2302      	movs	r3, #2
 8017440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017442:	2300      	movs	r3, #0
 8017444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017446:	2303      	movs	r3, #3
 8017448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801744a:	2305      	movs	r3, #5
 801744c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801744e:	f107 0314 	add.w	r3, r7, #20
 8017452:	4619      	mov	r1, r3
 8017454:	480d      	ldr	r0, [pc, #52]	; (801748c <HAL_SPI_MspInit+0xc8>)
 8017456:	f00d fd71 	bl	8024f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 801745a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801745e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017460:	2302      	movs	r3, #2
 8017462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017464:	2300      	movs	r3, #0
 8017466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017468:	2303      	movs	r3, #3
 801746a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801746c:	2305      	movs	r3, #5
 801746e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017470:	f107 0314 	add.w	r3, r7, #20
 8017474:	4619      	mov	r1, r3
 8017476:	4806      	ldr	r0, [pc, #24]	; (8017490 <HAL_SPI_MspInit+0xcc>)
 8017478:	f00d fd60 	bl	8024f3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 801747c:	bf00      	nop
 801747e:	3728      	adds	r7, #40	; 0x28
 8017480:	46bd      	mov	sp, r7
 8017482:	bd80      	pop	{r7, pc}
 8017484:	40003800 	.word	0x40003800
 8017488:	40023800 	.word	0x40023800
 801748c:	40020800 	.word	0x40020800
 8017490:	40020400 	.word	0x40020400

08017494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b082      	sub	sp, #8
 8017498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801749a:	2300      	movs	r3, #0
 801749c:	607b      	str	r3, [r7, #4]
 801749e:	4b12      	ldr	r3, [pc, #72]	; (80174e8 <HAL_MspInit+0x54>)
 80174a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80174a2:	4a11      	ldr	r2, [pc, #68]	; (80174e8 <HAL_MspInit+0x54>)
 80174a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80174a8:	6453      	str	r3, [r2, #68]	; 0x44
 80174aa:	4b0f      	ldr	r3, [pc, #60]	; (80174e8 <HAL_MspInit+0x54>)
 80174ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80174ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80174b2:	607b      	str	r3, [r7, #4]
 80174b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80174b6:	2300      	movs	r3, #0
 80174b8:	603b      	str	r3, [r7, #0]
 80174ba:	4b0b      	ldr	r3, [pc, #44]	; (80174e8 <HAL_MspInit+0x54>)
 80174bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174be:	4a0a      	ldr	r2, [pc, #40]	; (80174e8 <HAL_MspInit+0x54>)
 80174c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80174c4:	6413      	str	r3, [r2, #64]	; 0x40
 80174c6:	4b08      	ldr	r3, [pc, #32]	; (80174e8 <HAL_MspInit+0x54>)
 80174c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80174ce:	603b      	str	r3, [r7, #0]
 80174d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80174d2:	2200      	movs	r2, #0
 80174d4:	210f      	movs	r1, #15
 80174d6:	f06f 0001 	mvn.w	r0, #1
 80174da:	f00d f995 	bl	8024808 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80174de:	bf00      	nop
 80174e0:	3708      	adds	r7, #8
 80174e2:	46bd      	mov	sp, r7
 80174e4:	bd80      	pop	{r7, pc}
 80174e6:	bf00      	nop
 80174e8:	40023800 	.word	0x40023800

080174ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80174ec:	b580      	push	{r7, lr}
 80174ee:	b08c      	sub	sp, #48	; 0x30
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80174f4:	2300      	movs	r3, #0
 80174f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80174f8:	2300      	movs	r3, #0
 80174fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80174fc:	2200      	movs	r2, #0
 80174fe:	6879      	ldr	r1, [r7, #4]
 8017500:	2032      	movs	r0, #50	; 0x32
 8017502:	f00d f981 	bl	8024808 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8017506:	2032      	movs	r0, #50	; 0x32
 8017508:	f00d f99a 	bl	8024840 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 801750c:	2300      	movs	r3, #0
 801750e:	60fb      	str	r3, [r7, #12]
 8017510:	4b1f      	ldr	r3, [pc, #124]	; (8017590 <HAL_InitTick+0xa4>)
 8017512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017514:	4a1e      	ldr	r2, [pc, #120]	; (8017590 <HAL_InitTick+0xa4>)
 8017516:	f043 0308 	orr.w	r3, r3, #8
 801751a:	6413      	str	r3, [r2, #64]	; 0x40
 801751c:	4b1c      	ldr	r3, [pc, #112]	; (8017590 <HAL_InitTick+0xa4>)
 801751e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017520:	f003 0308 	and.w	r3, r3, #8
 8017524:	60fb      	str	r3, [r7, #12]
 8017526:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8017528:	f107 0210 	add.w	r2, r7, #16
 801752c:	f107 0314 	add.w	r3, r7, #20
 8017530:	4611      	mov	r1, r2
 8017532:	4618      	mov	r0, r3
 8017534:	f00e fb2c 	bl	8025b90 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8017538:	f00e fb16 	bl	8025b68 <HAL_RCC_GetPCLK1Freq>
 801753c:	4603      	mov	r3, r0
 801753e:	005b      	lsls	r3, r3, #1
 8017540:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8017542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017544:	4a13      	ldr	r2, [pc, #76]	; (8017594 <HAL_InitTick+0xa8>)
 8017546:	fba2 2303 	umull	r2, r3, r2, r3
 801754a:	0c9b      	lsrs	r3, r3, #18
 801754c:	3b01      	subs	r3, #1
 801754e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8017550:	4b11      	ldr	r3, [pc, #68]	; (8017598 <HAL_InitTick+0xac>)
 8017552:	4a12      	ldr	r2, [pc, #72]	; (801759c <HAL_InitTick+0xb0>)
 8017554:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8017556:	4b10      	ldr	r3, [pc, #64]	; (8017598 <HAL_InitTick+0xac>)
 8017558:	f240 32e7 	movw	r2, #999	; 0x3e7
 801755c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 801755e:	4a0e      	ldr	r2, [pc, #56]	; (8017598 <HAL_InitTick+0xac>)
 8017560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017562:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8017564:	4b0c      	ldr	r3, [pc, #48]	; (8017598 <HAL_InitTick+0xac>)
 8017566:	2200      	movs	r2, #0
 8017568:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 801756a:	4b0b      	ldr	r3, [pc, #44]	; (8017598 <HAL_InitTick+0xac>)
 801756c:	2200      	movs	r2, #0
 801756e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8017570:	4809      	ldr	r0, [pc, #36]	; (8017598 <HAL_InitTick+0xac>)
 8017572:	f00f f8e7 	bl	8026744 <HAL_TIM_Base_Init>
 8017576:	4603      	mov	r3, r0
 8017578:	2b00      	cmp	r3, #0
 801757a:	d104      	bne.n	8017586 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 801757c:	4806      	ldr	r0, [pc, #24]	; (8017598 <HAL_InitTick+0xac>)
 801757e:	f00f f999 	bl	80268b4 <HAL_TIM_Base_Start_IT>
 8017582:	4603      	mov	r3, r0
 8017584:	e000      	b.n	8017588 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8017586:	2301      	movs	r3, #1
}
 8017588:	4618      	mov	r0, r3
 801758a:	3730      	adds	r7, #48	; 0x30
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}
 8017590:	40023800 	.word	0x40023800
 8017594:	431bde83 	.word	0x431bde83
 8017598:	2001b260 	.word	0x2001b260
 801759c:	40000c00 	.word	0x40000c00

080175a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80175a0:	b480      	push	{r7}
 80175a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80175a4:	e7fe      	b.n	80175a4 <NMI_Handler+0x4>

080175a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80175a6:	b480      	push	{r7}
 80175a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80175aa:	e7fe      	b.n	80175aa <HardFault_Handler+0x4>

080175ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80175ac:	b480      	push	{r7}
 80175ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80175b0:	e7fe      	b.n	80175b0 <MemManage_Handler+0x4>

080175b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80175b2:	b480      	push	{r7}
 80175b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80175b6:	e7fe      	b.n	80175b6 <BusFault_Handler+0x4>

080175b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80175b8:	b480      	push	{r7}
 80175ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80175bc:	e7fe      	b.n	80175bc <UsageFault_Handler+0x4>

080175be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80175be:	b480      	push	{r7}
 80175c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80175c2:	bf00      	nop
 80175c4:	46bd      	mov	sp, r7
 80175c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ca:	4770      	bx	lr

080175cc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AIR_plus_closed_Pin);
 80175d0:	2010      	movs	r0, #16
 80175d2:	f00d fe81 	bl	80252d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80175d6:	bf00      	nop
 80175d8:	bd80      	pop	{r7, pc}
	...

080175dc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80175e0:	4802      	ldr	r0, [pc, #8]	; (80175ec <ADC_IRQHandler+0x10>)
 80175e2:	f00b fc7a 	bl	8022eda <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80175e6:	bf00      	nop
 80175e8:	bd80      	pop	{r7, pc}
 80175ea:	bf00      	nop
 80175ec:	2001b0c4 	.word	0x2001b0c4

080175f0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80175f4:	4802      	ldr	r0, [pc, #8]	; (8017600 <CAN1_TX_IRQHandler+0x10>)
 80175f6:	f00c fe29 	bl	802424c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80175fa:	bf00      	nop
 80175fc:	bd80      	pop	{r7, pc}
 80175fe:	bf00      	nop
 8017600:	2001b10c 	.word	0x2001b10c

08017604 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8017604:	b580      	push	{r7, lr}
 8017606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8017608:	4802      	ldr	r0, [pc, #8]	; (8017614 <CAN1_RX0_IRQHandler+0x10>)
 801760a:	f00c fe1f 	bl	802424c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 801760e:	bf00      	nop
 8017610:	bd80      	pop	{r7, pc}
 8017612:	bf00      	nop
 8017614:	2001b10c 	.word	0x2001b10c

08017618 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8017618:	b580      	push	{r7, lr}
 801761a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 801761c:	4802      	ldr	r0, [pc, #8]	; (8017628 <CAN1_RX1_IRQHandler+0x10>)
 801761e:	f00c fe15 	bl	802424c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8017622:	bf00      	nop
 8017624:	bd80      	pop	{r7, pc}
 8017626:	bf00      	nop
 8017628:	2001b10c 	.word	0x2001b10c

0801762c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AIR_minus_closed_Pin);
 8017630:	2020      	movs	r0, #32
 8017632:	f00d fe51 	bl	80252d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(precharge_closed_Pin);
 8017636:	2040      	movs	r0, #64	; 0x40
 8017638:	f00d fe4e 	bl	80252d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 801763c:	bf00      	nop
 801763e:	bd80      	pop	{r7, pc}

08017640 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8017640:	b580      	push	{r7, lr}
 8017642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8017644:	4802      	ldr	r0, [pc, #8]	; (8017650 <TIM2_IRQHandler+0x10>)
 8017646:	f00f fd25 	bl	8027094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 801764a:	bf00      	nop
 801764c:	bd80      	pop	{r7, pc}
 801764e:	bf00      	nop
 8017650:	2001b2a8 	.word	0x2001b2a8

08017654 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8017654:	b580      	push	{r7, lr}
 8017656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8017658:	4802      	ldr	r0, [pc, #8]	; (8017664 <TIM3_IRQHandler+0x10>)
 801765a:	f00f fd1b 	bl	8027094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 801765e:	bf00      	nop
 8017660:	bd80      	pop	{r7, pc}
 8017662:	bf00      	nop
 8017664:	2001b2f0 	.word	0x2001b2f0

08017668 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8017668:	b580      	push	{r7, lr}
 801766a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 801766c:	4802      	ldr	r0, [pc, #8]	; (8017678 <TIM5_IRQHandler+0x10>)
 801766e:	f00f fd11 	bl	8027094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8017672:	bf00      	nop
 8017674:	bd80      	pop	{r7, pc}
 8017676:	bf00      	nop
 8017678:	2001b260 	.word	0x2001b260

0801767c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 801767c:	b580      	push	{r7, lr}
 801767e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8017680:	4802      	ldr	r0, [pc, #8]	; (801768c <DMA2_Stream0_IRQHandler+0x10>)
 8017682:	f00d f9f1 	bl	8024a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8017686:	bf00      	nop
 8017688:	bd80      	pop	{r7, pc}
 801768a:	bf00      	nop
 801768c:	2001b064 	.word	0x2001b064

08017690 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8017690:	b580      	push	{r7, lr}
 8017692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8017694:	4802      	ldr	r0, [pc, #8]	; (80176a0 <CAN2_TX_IRQHandler+0x10>)
 8017696:	f00c fdd9 	bl	802424c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 801769a:	bf00      	nop
 801769c:	bd80      	pop	{r7, pc}
 801769e:	bf00      	nop
 80176a0:	2001b134 	.word	0x2001b134

080176a4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80176a8:	4802      	ldr	r0, [pc, #8]	; (80176b4 <CAN2_RX0_IRQHandler+0x10>)
 80176aa:	f00c fdcf 	bl	802424c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80176ae:	bf00      	nop
 80176b0:	bd80      	pop	{r7, pc}
 80176b2:	bf00      	nop
 80176b4:	2001b134 	.word	0x2001b134

080176b8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80176bc:	4802      	ldr	r0, [pc, #8]	; (80176c8 <CAN2_RX1_IRQHandler+0x10>)
 80176be:	f00c fdc5 	bl	802424c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80176c2:	bf00      	nop
 80176c4:	bd80      	pop	{r7, pc}
 80176c6:	bf00      	nop
 80176c8:	2001b134 	.word	0x2001b134

080176cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80176cc:	b480      	push	{r7}
 80176ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80176d0:	4b06      	ldr	r3, [pc, #24]	; (80176ec <SystemInit+0x20>)
 80176d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80176d6:	4a05      	ldr	r2, [pc, #20]	; (80176ec <SystemInit+0x20>)
 80176d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80176dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80176e0:	bf00      	nop
 80176e2:	46bd      	mov	sp, r7
 80176e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e8:	4770      	bx	lr
 80176ea:	bf00      	nop
 80176ec:	e000ed00 	.word	0xe000ed00

080176f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b096      	sub	sp, #88	; 0x58
 80176f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80176f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80176fa:	2200      	movs	r2, #0
 80176fc:	601a      	str	r2, [r3, #0]
 80176fe:	605a      	str	r2, [r3, #4]
 8017700:	609a      	str	r2, [r3, #8]
 8017702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017704:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017708:	2200      	movs	r2, #0
 801770a:	601a      	str	r2, [r3, #0]
 801770c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801770e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017712:	2200      	movs	r2, #0
 8017714:	601a      	str	r2, [r3, #0]
 8017716:	605a      	str	r2, [r3, #4]
 8017718:	609a      	str	r2, [r3, #8]
 801771a:	60da      	str	r2, [r3, #12]
 801771c:	611a      	str	r2, [r3, #16]
 801771e:	615a      	str	r2, [r3, #20]
 8017720:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8017722:	1d3b      	adds	r3, r7, #4
 8017724:	2220      	movs	r2, #32
 8017726:	2100      	movs	r1, #0
 8017728:	4618      	mov	r0, r3
 801772a:	f015 fb19 	bl	802cd60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 801772e:	4b3e      	ldr	r3, [pc, #248]	; (8017828 <MX_TIM1_Init+0x138>)
 8017730:	4a3e      	ldr	r2, [pc, #248]	; (801782c <MX_TIM1_Init+0x13c>)
 8017732:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8017734:	4b3c      	ldr	r3, [pc, #240]	; (8017828 <MX_TIM1_Init+0x138>)
 8017736:	2200      	movs	r2, #0
 8017738:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801773a:	4b3b      	ldr	r3, [pc, #236]	; (8017828 <MX_TIM1_Init+0x138>)
 801773c:	2200      	movs	r2, #0
 801773e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8017740:	4b39      	ldr	r3, [pc, #228]	; (8017828 <MX_TIM1_Init+0x138>)
 8017742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017746:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017748:	4b37      	ldr	r3, [pc, #220]	; (8017828 <MX_TIM1_Init+0x138>)
 801774a:	2200      	movs	r2, #0
 801774c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 801774e:	4b36      	ldr	r3, [pc, #216]	; (8017828 <MX_TIM1_Init+0x138>)
 8017750:	2200      	movs	r2, #0
 8017752:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017754:	4b34      	ldr	r3, [pc, #208]	; (8017828 <MX_TIM1_Init+0x138>)
 8017756:	2200      	movs	r2, #0
 8017758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801775a:	4833      	ldr	r0, [pc, #204]	; (8017828 <MX_TIM1_Init+0x138>)
 801775c:	f00e fff2 	bl	8026744 <HAL_TIM_Base_Init>
 8017760:	4603      	mov	r3, r0
 8017762:	2b00      	cmp	r3, #0
 8017764:	d001      	beq.n	801776a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8017766:	f7ff fd13 	bl	8017190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801776a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801776e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017770:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017774:	4619      	mov	r1, r3
 8017776:	482c      	ldr	r0, [pc, #176]	; (8017828 <MX_TIM1_Init+0x138>)
 8017778:	f00f fef2 	bl	8027560 <HAL_TIM_ConfigClockSource>
 801777c:	4603      	mov	r3, r0
 801777e:	2b00      	cmp	r3, #0
 8017780:	d001      	beq.n	8017786 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8017782:	f7ff fd05 	bl	8017190 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8017786:	4828      	ldr	r0, [pc, #160]	; (8017828 <MX_TIM1_Init+0x138>)
 8017788:	f00f f904 	bl	8026994 <HAL_TIM_PWM_Init>
 801778c:	4603      	mov	r3, r0
 801778e:	2b00      	cmp	r3, #0
 8017790:	d001      	beq.n	8017796 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8017792:	f7ff fcfd 	bl	8017190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017796:	2300      	movs	r3, #0
 8017798:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801779a:	2300      	movs	r3, #0
 801779c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 801779e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80177a2:	4619      	mov	r1, r3
 80177a4:	4820      	ldr	r0, [pc, #128]	; (8017828 <MX_TIM1_Init+0x138>)
 80177a6:	f010 fd13 	bl	80281d0 <HAL_TIMEx_MasterConfigSynchronization>
 80177aa:	4603      	mov	r3, r0
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d001      	beq.n	80177b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80177b0:	f7ff fcee 	bl	8017190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80177b4:	2360      	movs	r3, #96	; 0x60
 80177b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80177b8:	2300      	movs	r3, #0
 80177ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80177bc:	2300      	movs	r3, #0
 80177be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80177c0:	2300      	movs	r3, #0
 80177c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80177c4:	2300      	movs	r3, #0
 80177c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80177c8:	2300      	movs	r3, #0
 80177ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80177cc:	2300      	movs	r3, #0
 80177ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80177d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80177d4:	2208      	movs	r2, #8
 80177d6:	4619      	mov	r1, r3
 80177d8:	4813      	ldr	r0, [pc, #76]	; (8017828 <MX_TIM1_Init+0x138>)
 80177da:	f00f fdff 	bl	80273dc <HAL_TIM_PWM_ConfigChannel>
 80177de:	4603      	mov	r3, r0
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d001      	beq.n	80177e8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80177e4:	f7ff fcd4 	bl	8017190 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80177e8:	2300      	movs	r3, #0
 80177ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80177ec:	2300      	movs	r3, #0
 80177ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80177f0:	2300      	movs	r3, #0
 80177f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80177f4:	2300      	movs	r3, #0
 80177f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80177f8:	2300      	movs	r3, #0
 80177fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80177fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017800:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8017802:	2300      	movs	r3, #0
 8017804:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8017806:	1d3b      	adds	r3, r7, #4
 8017808:	4619      	mov	r1, r3
 801780a:	4807      	ldr	r0, [pc, #28]	; (8017828 <MX_TIM1_Init+0x138>)
 801780c:	f010 fd5c 	bl	80282c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8017810:	4603      	mov	r3, r0
 8017812:	2b00      	cmp	r3, #0
 8017814:	d001      	beq.n	801781a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8017816:	f7ff fcbb 	bl	8017190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 801781a:	4803      	ldr	r0, [pc, #12]	; (8017828 <MX_TIM1_Init+0x138>)
 801781c:	f000 f974 	bl	8017b08 <HAL_TIM_MspPostInit>

}
 8017820:	bf00      	nop
 8017822:	3758      	adds	r7, #88	; 0x58
 8017824:	46bd      	mov	sp, r7
 8017826:	bd80      	pop	{r7, pc}
 8017828:	2001b338 	.word	0x2001b338
 801782c:	40010000 	.word	0x40010000

08017830 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b090      	sub	sp, #64	; 0x40
 8017834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017836:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801783a:	2200      	movs	r2, #0
 801783c:	601a      	str	r2, [r3, #0]
 801783e:	605a      	str	r2, [r3, #4]
 8017840:	609a      	str	r2, [r3, #8]
 8017842:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8017844:	f107 031c 	add.w	r3, r7, #28
 8017848:	2200      	movs	r2, #0
 801784a:	601a      	str	r2, [r3, #0]
 801784c:	605a      	str	r2, [r3, #4]
 801784e:	609a      	str	r2, [r3, #8]
 8017850:	60da      	str	r2, [r3, #12]
 8017852:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8017854:	f107 030c 	add.w	r3, r7, #12
 8017858:	2200      	movs	r2, #0
 801785a:	601a      	str	r2, [r3, #0]
 801785c:	605a      	str	r2, [r3, #4]
 801785e:	609a      	str	r2, [r3, #8]
 8017860:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017862:	1d3b      	adds	r3, r7, #4
 8017864:	2200      	movs	r2, #0
 8017866:	601a      	str	r2, [r3, #0]
 8017868:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 801786a:	4b3e      	ldr	r3, [pc, #248]	; (8017964 <MX_TIM2_Init+0x134>)
 801786c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017870:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8017872:	4b3c      	ldr	r3, [pc, #240]	; (8017964 <MX_TIM2_Init+0x134>)
 8017874:	2200      	movs	r2, #0
 8017876:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017878:	4b3a      	ldr	r3, [pc, #232]	; (8017964 <MX_TIM2_Init+0x134>)
 801787a:	2200      	movs	r2, #0
 801787c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 801787e:	4b39      	ldr	r3, [pc, #228]	; (8017964 <MX_TIM2_Init+0x134>)
 8017880:	f04f 32ff 	mov.w	r2, #4294967295
 8017884:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017886:	4b37      	ldr	r3, [pc, #220]	; (8017964 <MX_TIM2_Init+0x134>)
 8017888:	2200      	movs	r2, #0
 801788a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801788c:	4b35      	ldr	r3, [pc, #212]	; (8017964 <MX_TIM2_Init+0x134>)
 801788e:	2200      	movs	r2, #0
 8017890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8017892:	4834      	ldr	r0, [pc, #208]	; (8017964 <MX_TIM2_Init+0x134>)
 8017894:	f00e ff56 	bl	8026744 <HAL_TIM_Base_Init>
 8017898:	4603      	mov	r3, r0
 801789a:	2b00      	cmp	r3, #0
 801789c:	d001      	beq.n	80178a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 801789e:	f7ff fc77 	bl	8017190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80178a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80178a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80178a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80178ac:	4619      	mov	r1, r3
 80178ae:	482d      	ldr	r0, [pc, #180]	; (8017964 <MX_TIM2_Init+0x134>)
 80178b0:	f00f fe56 	bl	8027560 <HAL_TIM_ConfigClockSource>
 80178b4:	4603      	mov	r3, r0
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d001      	beq.n	80178be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80178ba:	f7ff fc69 	bl	8017190 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80178be:	4829      	ldr	r0, [pc, #164]	; (8017964 <MX_TIM2_Init+0x134>)
 80178c0:	f00f f98a 	bl	8026bd8 <HAL_TIM_IC_Init>
 80178c4:	4603      	mov	r3, r0
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d001      	beq.n	80178ce <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80178ca:	f7ff fc61 	bl	8017190 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80178ce:	2304      	movs	r3, #4
 80178d0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80178d2:	2350      	movs	r3, #80	; 0x50
 80178d4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80178d6:	2300      	movs	r3, #0
 80178d8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80178da:	2300      	movs	r3, #0
 80178dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80178de:	2300      	movs	r3, #0
 80178e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80178e2:	f107 031c 	add.w	r3, r7, #28
 80178e6:	4619      	mov	r1, r3
 80178e8:	481e      	ldr	r0, [pc, #120]	; (8017964 <MX_TIM2_Init+0x134>)
 80178ea:	f00f ff00 	bl	80276ee <HAL_TIM_SlaveConfigSynchro>
 80178ee:	4603      	mov	r3, r0
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d001      	beq.n	80178f8 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 80178f4:	f7ff fc4c 	bl	8017190 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80178f8:	2300      	movs	r3, #0
 80178fa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80178fc:	2301      	movs	r3, #1
 80178fe:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8017900:	2300      	movs	r3, #0
 8017902:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8017904:	2300      	movs	r3, #0
 8017906:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8017908:	f107 030c 	add.w	r3, r7, #12
 801790c:	2200      	movs	r2, #0
 801790e:	4619      	mov	r1, r3
 8017910:	4814      	ldr	r0, [pc, #80]	; (8017964 <MX_TIM2_Init+0x134>)
 8017912:	f00f fcc7 	bl	80272a4 <HAL_TIM_IC_ConfigChannel>
 8017916:	4603      	mov	r3, r0
 8017918:	2b00      	cmp	r3, #0
 801791a:	d001      	beq.n	8017920 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 801791c:	f7ff fc38 	bl	8017190 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8017920:	2302      	movs	r3, #2
 8017922:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8017924:	2302      	movs	r3, #2
 8017926:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8017928:	f107 030c 	add.w	r3, r7, #12
 801792c:	2204      	movs	r2, #4
 801792e:	4619      	mov	r1, r3
 8017930:	480c      	ldr	r0, [pc, #48]	; (8017964 <MX_TIM2_Init+0x134>)
 8017932:	f00f fcb7 	bl	80272a4 <HAL_TIM_IC_ConfigChannel>
 8017936:	4603      	mov	r3, r0
 8017938:	2b00      	cmp	r3, #0
 801793a:	d001      	beq.n	8017940 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 801793c:	f7ff fc28 	bl	8017190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017940:	2300      	movs	r3, #0
 8017942:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017944:	2300      	movs	r3, #0
 8017946:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8017948:	1d3b      	adds	r3, r7, #4
 801794a:	4619      	mov	r1, r3
 801794c:	4805      	ldr	r0, [pc, #20]	; (8017964 <MX_TIM2_Init+0x134>)
 801794e:	f010 fc3f 	bl	80281d0 <HAL_TIMEx_MasterConfigSynchronization>
 8017952:	4603      	mov	r3, r0
 8017954:	2b00      	cmp	r3, #0
 8017956:	d001      	beq.n	801795c <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8017958:	f7ff fc1a 	bl	8017190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 801795c:	bf00      	nop
 801795e:	3740      	adds	r7, #64	; 0x40
 8017960:	46bd      	mov	sp, r7
 8017962:	bd80      	pop	{r7, pc}
 8017964:	2001b2a8 	.word	0x2001b2a8

08017968 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8017968:	b580      	push	{r7, lr}
 801796a:	b086      	sub	sp, #24
 801796c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801796e:	f107 0308 	add.w	r3, r7, #8
 8017972:	2200      	movs	r2, #0
 8017974:	601a      	str	r2, [r3, #0]
 8017976:	605a      	str	r2, [r3, #4]
 8017978:	609a      	str	r2, [r3, #8]
 801797a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801797c:	463b      	mov	r3, r7
 801797e:	2200      	movs	r2, #0
 8017980:	601a      	str	r2, [r3, #0]
 8017982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8017984:	4b1d      	ldr	r3, [pc, #116]	; (80179fc <MX_TIM3_Init+0x94>)
 8017986:	4a1e      	ldr	r2, [pc, #120]	; (8017a00 <MX_TIM3_Init+0x98>)
 8017988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 801798a:	4b1c      	ldr	r3, [pc, #112]	; (80179fc <MX_TIM3_Init+0x94>)
 801798c:	2200      	movs	r2, #0
 801798e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017990:	4b1a      	ldr	r3, [pc, #104]	; (80179fc <MX_TIM3_Init+0x94>)
 8017992:	2200      	movs	r2, #0
 8017994:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8017996:	4b19      	ldr	r3, [pc, #100]	; (80179fc <MX_TIM3_Init+0x94>)
 8017998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801799c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801799e:	4b17      	ldr	r3, [pc, #92]	; (80179fc <MX_TIM3_Init+0x94>)
 80179a0:	2200      	movs	r2, #0
 80179a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80179a4:	4b15      	ldr	r3, [pc, #84]	; (80179fc <MX_TIM3_Init+0x94>)
 80179a6:	2200      	movs	r2, #0
 80179a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80179aa:	4814      	ldr	r0, [pc, #80]	; (80179fc <MX_TIM3_Init+0x94>)
 80179ac:	f00e feca 	bl	8026744 <HAL_TIM_Base_Init>
 80179b0:	4603      	mov	r3, r0
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d001      	beq.n	80179ba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80179b6:	f7ff fbeb 	bl	8017190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80179ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80179be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80179c0:	f107 0308 	add.w	r3, r7, #8
 80179c4:	4619      	mov	r1, r3
 80179c6:	480d      	ldr	r0, [pc, #52]	; (80179fc <MX_TIM3_Init+0x94>)
 80179c8:	f00f fdca 	bl	8027560 <HAL_TIM_ConfigClockSource>
 80179cc:	4603      	mov	r3, r0
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d001      	beq.n	80179d6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80179d2:	f7ff fbdd 	bl	8017190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80179d6:	2320      	movs	r3, #32
 80179d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80179da:	2300      	movs	r3, #0
 80179dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80179de:	463b      	mov	r3, r7
 80179e0:	4619      	mov	r1, r3
 80179e2:	4806      	ldr	r0, [pc, #24]	; (80179fc <MX_TIM3_Init+0x94>)
 80179e4:	f010 fbf4 	bl	80281d0 <HAL_TIMEx_MasterConfigSynchronization>
 80179e8:	4603      	mov	r3, r0
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d001      	beq.n	80179f2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80179ee:	f7ff fbcf 	bl	8017190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80179f2:	bf00      	nop
 80179f4:	3718      	adds	r7, #24
 80179f6:	46bd      	mov	sp, r7
 80179f8:	bd80      	pop	{r7, pc}
 80179fa:	bf00      	nop
 80179fc:	2001b2f0 	.word	0x2001b2f0
 8017a00:	40000400 	.word	0x40000400

08017a04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b08c      	sub	sp, #48	; 0x30
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017a0c:	f107 031c 	add.w	r3, r7, #28
 8017a10:	2200      	movs	r2, #0
 8017a12:	601a      	str	r2, [r3, #0]
 8017a14:	605a      	str	r2, [r3, #4]
 8017a16:	609a      	str	r2, [r3, #8]
 8017a18:	60da      	str	r2, [r3, #12]
 8017a1a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	4a35      	ldr	r2, [pc, #212]	; (8017af8 <HAL_TIM_Base_MspInit+0xf4>)
 8017a22:	4293      	cmp	r3, r2
 8017a24:	d10e      	bne.n	8017a44 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8017a26:	2300      	movs	r3, #0
 8017a28:	61bb      	str	r3, [r7, #24]
 8017a2a:	4b34      	ldr	r3, [pc, #208]	; (8017afc <HAL_TIM_Base_MspInit+0xf8>)
 8017a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a2e:	4a33      	ldr	r2, [pc, #204]	; (8017afc <HAL_TIM_Base_MspInit+0xf8>)
 8017a30:	f043 0301 	orr.w	r3, r3, #1
 8017a34:	6453      	str	r3, [r2, #68]	; 0x44
 8017a36:	4b31      	ldr	r3, [pc, #196]	; (8017afc <HAL_TIM_Base_MspInit+0xf8>)
 8017a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a3a:	f003 0301 	and.w	r3, r3, #1
 8017a3e:	61bb      	str	r3, [r7, #24]
 8017a40:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8017a42:	e055      	b.n	8017af0 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017a4c:	d135      	bne.n	8017aba <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8017a4e:	2300      	movs	r3, #0
 8017a50:	617b      	str	r3, [r7, #20]
 8017a52:	4b2a      	ldr	r3, [pc, #168]	; (8017afc <HAL_TIM_Base_MspInit+0xf8>)
 8017a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a56:	4a29      	ldr	r2, [pc, #164]	; (8017afc <HAL_TIM_Base_MspInit+0xf8>)
 8017a58:	f043 0301 	orr.w	r3, r3, #1
 8017a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8017a5e:	4b27      	ldr	r3, [pc, #156]	; (8017afc <HAL_TIM_Base_MspInit+0xf8>)
 8017a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a62:	f003 0301 	and.w	r3, r3, #1
 8017a66:	617b      	str	r3, [r7, #20]
 8017a68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	613b      	str	r3, [r7, #16]
 8017a6e:	4b23      	ldr	r3, [pc, #140]	; (8017afc <HAL_TIM_Base_MspInit+0xf8>)
 8017a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a72:	4a22      	ldr	r2, [pc, #136]	; (8017afc <HAL_TIM_Base_MspInit+0xf8>)
 8017a74:	f043 0301 	orr.w	r3, r3, #1
 8017a78:	6313      	str	r3, [r2, #48]	; 0x30
 8017a7a:	4b20      	ldr	r3, [pc, #128]	; (8017afc <HAL_TIM_Base_MspInit+0xf8>)
 8017a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a7e:	f003 0301 	and.w	r3, r3, #1
 8017a82:	613b      	str	r3, [r7, #16]
 8017a84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMD_data_Pin;
 8017a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a8c:	2302      	movs	r3, #2
 8017a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a90:	2300      	movs	r3, #0
 8017a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017a94:	2300      	movs	r3, #0
 8017a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8017a98:	2301      	movs	r3, #1
 8017a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMD_data_GPIO_Port, &GPIO_InitStruct);
 8017a9c:	f107 031c 	add.w	r3, r7, #28
 8017aa0:	4619      	mov	r1, r3
 8017aa2:	4817      	ldr	r0, [pc, #92]	; (8017b00 <HAL_TIM_Base_MspInit+0xfc>)
 8017aa4:	f00d fa4a 	bl	8024f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8017aa8:	2200      	movs	r2, #0
 8017aaa:	2105      	movs	r1, #5
 8017aac:	201c      	movs	r0, #28
 8017aae:	f00c feab 	bl	8024808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8017ab2:	201c      	movs	r0, #28
 8017ab4:	f00c fec4 	bl	8024840 <HAL_NVIC_EnableIRQ>
}
 8017ab8:	e01a      	b.n	8017af0 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	4a11      	ldr	r2, [pc, #68]	; (8017b04 <HAL_TIM_Base_MspInit+0x100>)
 8017ac0:	4293      	cmp	r3, r2
 8017ac2:	d115      	bne.n	8017af0 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	60fb      	str	r3, [r7, #12]
 8017ac8:	4b0c      	ldr	r3, [pc, #48]	; (8017afc <HAL_TIM_Base_MspInit+0xf8>)
 8017aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017acc:	4a0b      	ldr	r2, [pc, #44]	; (8017afc <HAL_TIM_Base_MspInit+0xf8>)
 8017ace:	f043 0302 	orr.w	r3, r3, #2
 8017ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8017ad4:	4b09      	ldr	r3, [pc, #36]	; (8017afc <HAL_TIM_Base_MspInit+0xf8>)
 8017ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ad8:	f003 0302 	and.w	r3, r3, #2
 8017adc:	60fb      	str	r3, [r7, #12]
 8017ade:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	2105      	movs	r1, #5
 8017ae4:	201d      	movs	r0, #29
 8017ae6:	f00c fe8f 	bl	8024808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8017aea:	201d      	movs	r0, #29
 8017aec:	f00c fea8 	bl	8024840 <HAL_NVIC_EnableIRQ>
}
 8017af0:	bf00      	nop
 8017af2:	3730      	adds	r7, #48	; 0x30
 8017af4:	46bd      	mov	sp, r7
 8017af6:	bd80      	pop	{r7, pc}
 8017af8:	40010000 	.word	0x40010000
 8017afc:	40023800 	.word	0x40023800
 8017b00:	40020000 	.word	0x40020000
 8017b04:	40000400 	.word	0x40000400

08017b08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b088      	sub	sp, #32
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017b10:	f107 030c 	add.w	r3, r7, #12
 8017b14:	2200      	movs	r2, #0
 8017b16:	601a      	str	r2, [r3, #0]
 8017b18:	605a      	str	r2, [r3, #4]
 8017b1a:	609a      	str	r2, [r3, #8]
 8017b1c:	60da      	str	r2, [r3, #12]
 8017b1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	4a12      	ldr	r2, [pc, #72]	; (8017b70 <HAL_TIM_MspPostInit+0x68>)
 8017b26:	4293      	cmp	r3, r2
 8017b28:	d11e      	bne.n	8017b68 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	60bb      	str	r3, [r7, #8]
 8017b2e:	4b11      	ldr	r3, [pc, #68]	; (8017b74 <HAL_TIM_MspPostInit+0x6c>)
 8017b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b32:	4a10      	ldr	r2, [pc, #64]	; (8017b74 <HAL_TIM_MspPostInit+0x6c>)
 8017b34:	f043 0310 	orr.w	r3, r3, #16
 8017b38:	6313      	str	r3, [r2, #48]	; 0x30
 8017b3a:	4b0e      	ldr	r3, [pc, #56]	; (8017b74 <HAL_TIM_MspPostInit+0x6c>)
 8017b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b3e:	f003 0310 	and.w	r3, r3, #16
 8017b42:	60bb      	str	r3, [r7, #8]
 8017b44:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = fan_PWM_Pin;
 8017b46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017b4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b4c:	2302      	movs	r3, #2
 8017b4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b50:	2300      	movs	r3, #0
 8017b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b54:	2300      	movs	r3, #0
 8017b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8017b58:	2301      	movs	r3, #1
 8017b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fan_PWM_GPIO_Port, &GPIO_InitStruct);
 8017b5c:	f107 030c 	add.w	r3, r7, #12
 8017b60:	4619      	mov	r1, r3
 8017b62:	4805      	ldr	r0, [pc, #20]	; (8017b78 <HAL_TIM_MspPostInit+0x70>)
 8017b64:	f00d f9ea 	bl	8024f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8017b68:	bf00      	nop
 8017b6a:	3720      	adds	r7, #32
 8017b6c:	46bd      	mov	sp, r7
 8017b6e:	bd80      	pop	{r7, pc}
 8017b70:	40010000 	.word	0x40010000
 8017b74:	40023800 	.word	0x40023800
 8017b78:	40021000 	.word	0x40021000

08017b7c <CSE_S_x>:
RT_MODEL_CSE_T *const CSE_M = &CSE_M_;
static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy);
void CSE_S_x(const real_T rtu_x[3], real_T rty_x_next[3])
{
 8017b7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017b80:	b086      	sub	sp, #24
 8017b82:	af00      	add	r7, sp, #0
 8017b84:	6078      	str	r0, [r7, #4]
 8017b86:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  real_T tmp;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	3308      	adds	r3, #8
 8017b8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	3310      	adds	r3, #16
 8017b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b98:	f7e8 fe4a 	bl	8000830 <__aeabi_ddiv>
 8017b9c:	4602      	mov	r2, r0
 8017b9e:	460b      	mov	r3, r1
 8017ba0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  tmp = exp(-CSE_P.Ts / look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.tau, 12U));
 8017ba4:	4b3e      	ldr	r3, [pc, #248]	; (8017ca0 <CSE_S_x+0x124>)
 8017ba6:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8017baa:	4614      	mov	r4, r2
 8017bac:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8017bb0:	220c      	movs	r2, #12
 8017bb2:	493c      	ldr	r1, [pc, #240]	; (8017ca4 <CSE_S_x+0x128>)
 8017bb4:	483c      	ldr	r0, [pc, #240]	; (8017ca8 <CSE_S_x+0x12c>)
 8017bb6:	ed97 0b04 	vldr	d0, [r7, #16]
 8017bba:	f004 f8c3 	bl	801bd44 <look1_binlxpw>
 8017bbe:	ec53 2b10 	vmov	r2, r3, d0
 8017bc2:	4620      	mov	r0, r4
 8017bc4:	4629      	mov	r1, r5
 8017bc6:	f7e8 fe33 	bl	8000830 <__aeabi_ddiv>
 8017bca:	4602      	mov	r2, r0
 8017bcc:	460b      	mov	r3, r1
 8017bce:	ec43 2b17 	vmov	d7, r2, r3
 8017bd2:	eeb0 0a47 	vmov.f32	s0, s14
 8017bd6:	eef0 0a67 	vmov.f32	s1, s15
 8017bda:	f015 f9e1 	bl	802cfa0 <exp>
 8017bde:	ed87 0b02 	vstr	d0, [r7, #8]
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 8017be2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017be6:	f04f 0000 	mov.w	r0, #0
 8017bea:	4930      	ldr	r1, [pc, #192]	; (8017cac <CSE_S_x+0x130>)
 8017bec:	f7e8 fb3e 	bl	800026c <__aeabi_dsub>
 8017bf0:	4602      	mov	r2, r0
 8017bf2:	460b      	mov	r3, r1
 8017bf4:	4610      	mov	r0, r2
 8017bf6:	4619      	mov	r1, r3
 8017bf8:	4b2d      	ldr	r3, [pc, #180]	; (8017cb0 <CSE_S_x+0x134>)
 8017bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bfe:	f7e8 fced 	bl	80005dc <__aeabi_dmul>
 8017c02:	4602      	mov	r2, r0
 8017c04:	460b      	mov	r3, r1
 8017c06:	4614      	mov	r4, r2
 8017c08:	461d      	mov	r5, r3
 8017c0a:	220c      	movs	r2, #12
 8017c0c:	4924      	ldr	r1, [pc, #144]	; (8017ca0 <CSE_S_x+0x124>)
 8017c0e:	4826      	ldr	r0, [pc, #152]	; (8017ca8 <CSE_S_x+0x12c>)
 8017c10:	ed97 0b04 	vldr	d0, [r7, #16]
 8017c14:	f004 f896 	bl	801bd44 <look1_binlxpw>
 8017c18:	ec53 2b10 	vmov	r2, r3, d0
 8017c1c:	4620      	mov	r0, r4
 8017c1e:	4629      	mov	r1, r5
 8017c20:	f7e8 fcdc 	bl	80005dc <__aeabi_dmul>
 8017c24:	4602      	mov	r2, r0
 8017c26:	460b      	mov	r3, r1
 8017c28:	4614      	mov	r4, r2
 8017c2a:	461d      	mov	r5, r3
    CSE_P.soc, CSE_P.Rp, 12U) + tmp * rtu_x[0];
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017c32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017c36:	f7e8 fcd1 	bl	80005dc <__aeabi_dmul>
 8017c3a:	4602      	mov	r2, r0
 8017c3c:	460b      	mov	r3, r1
 8017c3e:	4620      	mov	r0, r4
 8017c40:	4629      	mov	r1, r5
 8017c42:	f7e8 fb15 	bl	8000270 <__adddf3>
 8017c46:	4602      	mov	r2, r0
 8017c48:	460b      	mov	r3, r1
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 8017c4a:	6839      	ldr	r1, [r7, #0]
 8017c4c:	e9c1 2300 	strd	r2, r3, [r1]
  rty_x_next[1] = CSE_U.current * CSE_P.Ts + rtu_x[1];
 8017c50:	4b17      	ldr	r3, [pc, #92]	; (8017cb0 <CSE_S_x+0x134>)
 8017c52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017c56:	4b12      	ldr	r3, [pc, #72]	; (8017ca0 <CSE_S_x+0x124>)
 8017c58:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8017c5c:	f7e8 fcbe 	bl	80005dc <__aeabi_dmul>
 8017c60:	4602      	mov	r2, r0
 8017c62:	460b      	mov	r3, r1
 8017c64:	4690      	mov	r8, r2
 8017c66:	4699      	mov	r9, r3
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	3308      	adds	r3, #8
 8017c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c70:	6839      	ldr	r1, [r7, #0]
 8017c72:	f101 0408 	add.w	r4, r1, #8
 8017c76:	4640      	mov	r0, r8
 8017c78:	4649      	mov	r1, r9
 8017c7a:	f7e8 faf9 	bl	8000270 <__adddf3>
 8017c7e:	4602      	mov	r2, r0
 8017c80:	460b      	mov	r3, r1
 8017c82:	e9c4 2300 	strd	r2, r3, [r4]
  rty_x_next[2] = rtu_x[2];
 8017c86:	683b      	ldr	r3, [r7, #0]
 8017c88:	f103 0110 	add.w	r1, r3, #16
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8017c92:	e9c1 2300 	strd	r2, r3, [r1]
}
 8017c96:	bf00      	nop
 8017c98:	3718      	adds	r7, #24
 8017c9a:	46bd      	mov	sp, r7
 8017c9c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8017ca0:	20000088 	.word	0x20000088
 8017ca4:	20000230 	.word	0x20000230
 8017ca8:	200001c8 	.word	0x200001c8
 8017cac:	3ff00000 	.word	0x3ff00000
 8017cb0:	2001b3e0 	.word	0x2001b3e0

08017cb4 <CSE_M_x>:

void CSE_M_x(const real_T rtu_x[3], real_T *rty_y)
{
 8017cb4:	b5b0      	push	{r4, r5, r7, lr}
 8017cb6:	b084      	sub	sp, #16
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
 8017cbc:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	3308      	adds	r3, #8
 8017cc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	3310      	adds	r3, #16
 8017cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cce:	f7e8 fdaf 	bl	8000830 <__aeabi_ddiv>
 8017cd2:	4602      	mov	r2, r0
 8017cd4:	460b      	mov	r3, r1
 8017cd6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 8017cda:	4b19      	ldr	r3, [pc, #100]	; (8017d40 <CSE_M_x+0x8c>)
 8017cdc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017ce0:	220c      	movs	r2, #12
 8017ce2:	4918      	ldr	r1, [pc, #96]	; (8017d44 <CSE_M_x+0x90>)
 8017ce4:	4818      	ldr	r0, [pc, #96]	; (8017d48 <CSE_M_x+0x94>)
 8017ce6:	ed97 0b02 	vldr	d0, [r7, #8]
 8017cea:	f004 f82b 	bl	801bd44 <look1_binlxpw>
 8017cee:	ec53 2b10 	vmov	r2, r3, d0
 8017cf2:	4620      	mov	r0, r4
 8017cf4:	4629      	mov	r1, r5
 8017cf6:	f7e8 fc71 	bl	80005dc <__aeabi_dmul>
 8017cfa:	4602      	mov	r2, r0
 8017cfc:	460b      	mov	r3, r1
 8017cfe:	4614      	mov	r4, r2
 8017d00:	461d      	mov	r5, r3
            + look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 8017d02:	220c      	movs	r2, #12
 8017d04:	4911      	ldr	r1, [pc, #68]	; (8017d4c <CSE_M_x+0x98>)
 8017d06:	4810      	ldr	r0, [pc, #64]	; (8017d48 <CSE_M_x+0x94>)
 8017d08:	ed97 0b02 	vldr	d0, [r7, #8]
 8017d0c:	f004 f81a 	bl	801bd44 <look1_binlxpw>
 8017d10:	ec53 2b10 	vmov	r2, r3, d0
 8017d14:	4620      	mov	r0, r4
 8017d16:	4629      	mov	r1, r5
 8017d18:	f7e8 faaa 	bl	8000270 <__adddf3>
 8017d1c:	4602      	mov	r2, r0
 8017d1e:	460b      	mov	r3, r1
 8017d20:	4610      	mov	r0, r2
 8017d22:	4619      	mov	r1, r3
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d2a:	f7e8 faa1 	bl	8000270 <__adddf3>
 8017d2e:	4602      	mov	r2, r0
 8017d30:	460b      	mov	r3, r1
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 8017d32:	6839      	ldr	r1, [r7, #0]
 8017d34:	e9c1 2300 	strd	r2, r3, [r1]
}
 8017d38:	bf00      	nop
 8017d3a:	3710      	adds	r7, #16
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8017d40:	2001b3e0 	.word	0x2001b3e0
 8017d44:	200000f0 	.word	0x200000f0
 8017d48:	200001c8 	.word	0x200001c8
 8017d4c:	20000160 	.word	0x20000160

08017d50 <UKFCorrectorAdditive_getPredict>:

static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy)
{
 8017d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d54:	ed2d 8b02 	vpush	{d8}
 8017d58:	b0e1      	sub	sp, #388	; 0x184
 8017d5a:	af04      	add	r7, sp, #16
 8017d5c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8017d60:	ed84 0b00 	vstr	d0, [r4]
 8017d64:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8017d68:	6020      	str	r0, [r4, #0]
 8017d6a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8017d6e:	6001      	str	r1, [r0, #0]
 8017d70:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8017d74:	ed81 1b00 	vstr	d1, [r1]
 8017d78:	f107 0120 	add.w	r1, r7, #32
 8017d7c:	ed81 2b00 	vstr	d2, [r1]
 8017d80:	f107 0118 	add.w	r1, r7, #24
 8017d84:	ed81 3b00 	vstr	d3, [r1]
 8017d88:	f107 0114 	add.w	r1, r7, #20
 8017d8c:	600a      	str	r2, [r1, #0]
 8017d8e:	f107 0210 	add.w	r2, r7, #16
 8017d92:	6013      	str	r3, [r2, #0]
  real_T Wmean[2];
  real_T tempY;
  real_T tempY_tmp;
  int32_T knt;
  int32_T knt_0;
  tempY_tmp = alpha * alpha;
 8017d94:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8017d98:	e9d1 2300 	ldrd	r2, r3, [r1]
 8017d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017da0:	f7e8 fc1c 	bl	80005dc <__aeabi_dmul>
 8017da4:	4602      	mov	r2, r0
 8017da6:	460b      	mov	r3, r1
 8017da8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8017dac:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = (kappa + 3.0) * tempY_tmp;
 8017db0:	f107 0118 	add.w	r1, r7, #24
 8017db4:	f04f 0200 	mov.w	r2, #0
 8017db8:	4b96      	ldr	r3, [pc, #600]	; (8018014 <UKFCorrectorAdditive_getPredict+0x2c4>)
 8017dba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017dbe:	f7e8 fa57 	bl	8000270 <__adddf3>
 8017dc2:	4602      	mov	r2, r0
 8017dc4:	460b      	mov	r3, r1
 8017dc6:	4610      	mov	r0, r2
 8017dc8:	4619      	mov	r1, r3
 8017dca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dd2:	f7e8 fc03 	bl	80005dc <__aeabi_dmul>
 8017dd6:	4602      	mov	r2, r0
 8017dd8:	460b      	mov	r3, r1
 8017dda:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8017dde:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[0] = 1.0 - 3.0 / tempY;
 8017de2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dea:	f04f 0000 	mov.w	r0, #0
 8017dee:	4989      	ldr	r1, [pc, #548]	; (8018014 <UKFCorrectorAdditive_getPredict+0x2c4>)
 8017df0:	f7e8 fd1e 	bl	8000830 <__aeabi_ddiv>
 8017df4:	4602      	mov	r2, r0
 8017df6:	460b      	mov	r3, r1
 8017df8:	f04f 0000 	mov.w	r0, #0
 8017dfc:	4986      	ldr	r1, [pc, #536]	; (8018018 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8017dfe:	f7e8 fa35 	bl	800026c <__aeabi_dsub>
 8017e02:	4602      	mov	r2, r0
 8017e04:	460b      	mov	r3, r1
 8017e06:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017e0a:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = 1.0 / (2.0 * tempY);
 8017e0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017e12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017e16:	4602      	mov	r2, r0
 8017e18:	460b      	mov	r3, r1
 8017e1a:	f7e8 fa29 	bl	8000270 <__adddf3>
 8017e1e:	4602      	mov	r2, r0
 8017e20:	460b      	mov	r3, r1
 8017e22:	f04f 0000 	mov.w	r0, #0
 8017e26:	497c      	ldr	r1, [pc, #496]	; (8018018 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8017e28:	f7e8 fd02 	bl	8000830 <__aeabi_ddiv>
 8017e2c:	4602      	mov	r2, r0
 8017e2e:	460b      	mov	r3, r1
 8017e30:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017e34:	e9c1 2302 	strd	r2, r3, [r1, #8]
  Wcov[0] = ((1.0 - tempY_tmp) + beta) + Wmean[0];
 8017e38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e40:	f04f 0000 	mov.w	r0, #0
 8017e44:	4974      	ldr	r1, [pc, #464]	; (8018018 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8017e46:	f7e8 fa11 	bl	800026c <__aeabi_dsub>
 8017e4a:	4602      	mov	r2, r0
 8017e4c:	460b      	mov	r3, r1
 8017e4e:	4610      	mov	r0, r2
 8017e50:	4619      	mov	r1, r3
 8017e52:	f107 0320 	add.w	r3, r7, #32
 8017e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e5a:	f7e8 fa09 	bl	8000270 <__adddf3>
 8017e5e:	4602      	mov	r2, r0
 8017e60:	460b      	mov	r3, r1
 8017e62:	4610      	mov	r0, r2
 8017e64:	4619      	mov	r1, r3
 8017e66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e6e:	f7e8 f9ff 	bl	8000270 <__adddf3>
 8017e72:	4602      	mov	r2, r0
 8017e74:	460b      	mov	r3, r1
 8017e76:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8017e7a:	e9c1 2300 	strd	r2, r3, [r1]
  Wcov[1] = Wmean[1];
 8017e7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017e82:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8017e86:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8017e8a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (Wmean[0] != 0.0) {
 8017e8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017e92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017e96:	f04f 0200 	mov.w	r2, #0
 8017e9a:	f04f 0300 	mov.w	r3, #0
 8017e9e:	f7e8 fe05 	bl	8000aac <__aeabi_dcmpeq>
 8017ea2:	4603      	mov	r3, r0
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d154      	bne.n	8017f52 <UKFCorrectorAdditive_getPredict+0x202>
    real_T Wcov_0;
    *Sy = Wmean[0];
 8017ea8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017eb0:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8017eb4:	e9c1 2300 	strd	r2, r3, [r1]
    tempY_tmp = Wmean[0];
 8017eb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ec0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8017ec4:	e9c1 2300 	strd	r2, r3, [r1]
    Wmean[0] /= Wmean[0];
 8017ec8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017ecc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017ed0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ed8:	f7e8 fcaa 	bl	8000830 <__aeabi_ddiv>
 8017edc:	4602      	mov	r2, r0
 8017ede:	460b      	mov	r3, r1
 8017ee0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017ee4:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov[0] /= *Sy;
 8017ee8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8017eec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017ef0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8017ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ef8:	f7e8 fc9a 	bl	8000830 <__aeabi_ddiv>
 8017efc:	4602      	mov	r2, r0
 8017efe:	460b      	mov	r3, r1
 8017f00:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8017f04:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov_0 = Wmean[1];
 8017f08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017f0c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8017f10:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    Wmean[1] /= tempY_tmp;
 8017f14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017f18:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8017f1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f24:	f7e8 fc84 	bl	8000830 <__aeabi_ddiv>
 8017f28:	4602      	mov	r2, r0
 8017f2a:	460b      	mov	r3, r1
 8017f2c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017f30:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Wcov[1] = Wcov_0 / *Sy;
 8017f34:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8017f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f3c:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8017f40:	f7e8 fc76 	bl	8000830 <__aeabi_ddiv>
 8017f44:	4602      	mov	r2, r0
 8017f46:	460b      	mov	r3, r1
 8017f48:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8017f4c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8017f50:	e006      	b.n	8017f60 <UKFCorrectorAdditive_getPredict+0x210>
  } else {
    *Sy = 1.0;
 8017f52:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8017f56:	f04f 0200 	mov.w	r2, #0
 8017f5a:	4b2f      	ldr	r3, [pc, #188]	; (8018018 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8017f5c:	e9c1 2300 	strd	r2, r3, [r1]
  }

  tempY = sqrt(tempY);
 8017f60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017f64:	ed93 7b00 	vldr	d7, [r3]
 8017f68:	eeb0 0a47 	vmov.f32	s0, s14
 8017f6c:	eef0 0a67 	vmov.f32	s1, s15
 8017f70:	f015 f8ae 	bl	802d0d0 <sqrt>
 8017f74:	eeb0 7a40 	vmov.f32	s14, s0
 8017f78:	eef0 7a60 	vmov.f32	s15, s1
 8017f7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017f80:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 9; knt++) {
 8017f84:	2300      	movs	r3, #0
 8017f86:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8017f8a:	e037      	b.n	8017ffc <UKFCorrectorAdditive_getPredict+0x2ac>
    tempY_tmp = tempY * S[knt];
 8017f8c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8017f90:	00db      	lsls	r3, r3, #3
 8017f92:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017f96:	6812      	ldr	r2, [r2, #0]
 8017f98:	4413      	add	r3, r2
 8017f9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017f9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fa6:	f7e8 fb19 	bl	80005dc <__aeabi_dmul>
 8017faa:	4602      	mov	r2, r0
 8017fac:	460b      	mov	r3, r1
 8017fae:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8017fb2:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt] = tempY_tmp;
 8017fb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fbe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8017fc2:	00c9      	lsls	r1, r1, #3
 8017fc4:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8017fc8:	4401      	add	r1, r0
 8017fca:	39a0      	subs	r1, #160	; 0xa0
 8017fcc:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt + 9] = -tempY_tmp;
 8017fd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fd8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8017fdc:	3109      	adds	r1, #9
 8017fde:	4690      	mov	r8, r2
 8017fe0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8017fe4:	00cb      	lsls	r3, r1, #3
 8017fe6:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8017fea:	4413      	add	r3, r2
 8017fec:	3ba0      	subs	r3, #160	; 0xa0
 8017fee:	e9c3 8900 	strd	r8, r9, [r3]
  for (knt = 0; knt < 9; knt++) {
 8017ff2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8017ff6:	3301      	adds	r3, #1
 8017ff8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8017ffc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018000:	2b08      	cmp	r3, #8
 8018002:	ddc3      	ble.n	8017f8c <UKFCorrectorAdditive_getPredict+0x23c>
  }

  knt_0 = 0;
 8018004:	2300      	movs	r3, #0
 8018006:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 801800a:	2300      	movs	r3, #0
 801800c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8018010:	e065      	b.n	80180de <UKFCorrectorAdditive_getPredict+0x38e>
 8018012:	bf00      	nop
 8018014:	40080000 	.word	0x40080000
 8018018:	3ff00000 	.word	0x3ff00000
    X2[knt_0] += X1[0];
 801801c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8018020:	00db      	lsls	r3, r3, #3
 8018022:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8018026:	4413      	add	r3, r2
 8018028:	3ba0      	subs	r3, #160	; 0xa0
 801802a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801802e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018038:	f7e8 f91a 	bl	8000270 <__adddf3>
 801803c:	4602      	mov	r2, r0
 801803e:	460b      	mov	r3, r1
 8018040:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8018044:	00c9      	lsls	r1, r1, #3
 8018046:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 801804a:	4401      	add	r1, r0
 801804c:	39a0      	subs	r1, #160	; 0xa0
 801804e:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 1] += X1[1];
 8018052:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8018056:	3301      	adds	r3, #1
 8018058:	00db      	lsls	r3, r3, #3
 801805a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801805e:	4413      	add	r3, r2
 8018060:	3ba0      	subs	r3, #160	; 0xa0
 8018062:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018066:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	3308      	adds	r3, #8
 801806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018072:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8018076:	3401      	adds	r4, #1
 8018078:	f7e8 f8fa 	bl	8000270 <__adddf3>
 801807c:	4602      	mov	r2, r0
 801807e:	460b      	mov	r3, r1
 8018080:	00e1      	lsls	r1, r4, #3
 8018082:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8018086:	4401      	add	r1, r0
 8018088:	39a0      	subs	r1, #160	; 0xa0
 801808a:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 2] += X1[2];
 801808e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8018092:	3302      	adds	r3, #2
 8018094:	00db      	lsls	r3, r3, #3
 8018096:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801809a:	4413      	add	r3, r2
 801809c:	3ba0      	subs	r3, #160	; 0xa0
 801809e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80180a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	3310      	adds	r3, #16
 80180aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ae:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 80180b2:	3402      	adds	r4, #2
 80180b4:	f7e8 f8dc 	bl	8000270 <__adddf3>
 80180b8:	4602      	mov	r2, r0
 80180ba:	460b      	mov	r3, r1
 80180bc:	00e1      	lsls	r1, r4, #3
 80180be:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80180c2:	4401      	add	r1, r0
 80180c4:	39a0      	subs	r1, #160	; 0xa0
 80180c6:	e9c1 2300 	strd	r2, r3, [r1]
    knt_0 += 3;
 80180ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80180ce:	3303      	adds	r3, #3
 80180d0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 80180d4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80180d8:	3301      	adds	r3, #1
 80180da:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80180de:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80180e2:	2b05      	cmp	r3, #5
 80180e4:	dd9a      	ble.n	801801c <UKFCorrectorAdditive_getPredict+0x2cc>
  }

  knt_0 = 0;
 80180e6:	2300      	movs	r3, #0
 80180e8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 80180ec:	2300      	movs	r3, #0
 80180ee:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80180f2:	e018      	b.n	8018126 <UKFCorrectorAdditive_getPredict+0x3d6>
    CSE_M_x(&X2[knt_0], &Y2[knt]);
 80180f4:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80180f8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80180fc:	00db      	lsls	r3, r3, #3
 80180fe:	18d0      	adds	r0, r2, r3
 8018100:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8018104:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018108:	00db      	lsls	r3, r3, #3
 801810a:	4413      	add	r3, r2
 801810c:	4619      	mov	r1, r3
 801810e:	f7ff fdd1 	bl	8017cb4 <CSE_M_x>
    knt_0 += 3;
 8018112:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8018116:	3303      	adds	r3, #3
 8018118:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 801811c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018120:	3301      	adds	r3, #1
 8018122:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8018126:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801812a:	2b05      	cmp	r3, #5
 801812c:	dde2      	ble.n	80180f4 <UKFCorrectorAdditive_getPredict+0x3a4>
  }

  CSE_M_x(X1, &tempY);
 801812e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018132:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018136:	4611      	mov	r1, r2
 8018138:	6818      	ldr	r0, [r3, #0]
 801813a:	f7ff fdbb 	bl	8017cb4 <CSE_M_x>
  for (knt = 0; knt < 6; knt++) {
 801813e:	2300      	movs	r3, #0
 8018140:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8018144:	e027      	b.n	8018196 <UKFCorrectorAdditive_getPredict+0x446>
    Y2_0[knt] = (Y2[knt] - tempY) + tempY;
 8018146:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801814a:	00db      	lsls	r3, r3, #3
 801814c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8018150:	4413      	add	r3, r2
 8018152:	3bd0      	subs	r3, #208	; 0xd0
 8018154:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018158:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018160:	f7e8 f884 	bl	800026c <__aeabi_dsub>
 8018164:	4602      	mov	r2, r0
 8018166:	460b      	mov	r3, r1
 8018168:	4610      	mov	r0, r2
 801816a:	4619      	mov	r1, r3
 801816c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018174:	f7e8 f87c 	bl	8000270 <__adddf3>
 8018178:	4602      	mov	r2, r0
 801817a:	460b      	mov	r3, r1
 801817c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8018180:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8018184:	00c9      	lsls	r1, r1, #3
 8018186:	4401      	add	r1, r0
 8018188:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 801818c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018190:	3301      	adds	r3, #1
 8018192:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8018196:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801819a:	2b05      	cmp	r3, #5
 801819c:	ddd3      	ble.n	8018146 <UKFCorrectorAdditive_getPredict+0x3f6>
  }

  UTMeanCovSqrt_C6QfB9Td(Wmean, Wcov, *Sy, tempY, Y2_0, X1, X2, Ymean,
 801819e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80181a2:	ed93 7b00 	vldr	d7, [r3]
 80181a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80181aa:	ed93 6b00 	vldr	d6, [r3]
 80181ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80181b2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80181b6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80181ba:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80181be:	f107 0210 	add.w	r2, r7, #16
 80181c2:	6812      	ldr	r2, [r2, #0]
 80181c4:	9203      	str	r2, [sp, #12]
 80181c6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80181ca:	9202      	str	r2, [sp, #8]
 80181cc:	f107 0214 	add.w	r2, r7, #20
 80181d0:	6812      	ldr	r2, [r2, #0]
 80181d2:	9201      	str	r2, [sp, #4]
 80181d4:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80181d8:	9200      	str	r2, [sp, #0]
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	4622      	mov	r2, r4
 80181de:	eeb0 1a46 	vmov.f32	s2, s12
 80181e2:	eef0 1a66 	vmov.f32	s3, s13
 80181e6:	eeb0 0a47 	vmov.f32	s0, s14
 80181ea:	eef0 0a67 	vmov.f32	s1, s15
 80181ee:	f003 f94f 	bl	801b490 <UTMeanCovSqrt_C6QfB9Td>
    &tempY_tmp, Pxy);
  Wmean[0] = tempY_tmp;
 80181f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80181f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181fa:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80181fe:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = Rs;
 8018202:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8018206:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801820e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  *Sy = tempY_tmp;
 8018212:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801821a:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 801821e:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = xnrm2_Mnmxg9YT(1, Wmean, 2);
 8018222:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018226:	2202      	movs	r2, #2
 8018228:	4619      	mov	r1, r3
 801822a:	2001      	movs	r0, #1
 801822c:	f008 fc62 	bl	8020af4 <xnrm2_Mnmxg9YT>
 8018230:	eeb0 7a40 	vmov.f32	s14, s0
 8018234:	eef0 7a60 	vmov.f32	s15, s1
 8018238:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801823c:	ed83 7b00 	vstr	d7, [r3]
  if (tempY != 0.0) {
 8018240:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018248:	f04f 0200 	mov.w	r2, #0
 801824c:	f04f 0300 	mov.w	r3, #0
 8018250:	f7e8 fc2c 	bl	8000aac <__aeabi_dcmpeq>
 8018254:	4603      	mov	r3, r0
 8018256:	2b00      	cmp	r3, #0
 8018258:	d000      	beq.n	801825c <UKFCorrectorAdditive_getPredict+0x50c>
      *Sy = tempY;
    } else {
      *Sy = tempY;
    }
  }
}
 801825a:	e0fa      	b.n	8018452 <UKFCorrectorAdditive_getPredict+0x702>
    tempY = rt_hypotd_snf(tempY_tmp, tempY);
 801825c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018260:	ed93 7b00 	vldr	d7, [r3]
 8018264:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018268:	ed93 6b00 	vldr	d6, [r3]
 801826c:	eeb0 1a46 	vmov.f32	s2, s12
 8018270:	eef0 1a66 	vmov.f32	s3, s13
 8018274:	eeb0 0a47 	vmov.f32	s0, s14
 8018278:	eef0 0a67 	vmov.f32	s1, s15
 801827c:	f006 f8b0 	bl	801e3e0 <rt_hypotd_snf>
 8018280:	eeb0 7a40 	vmov.f32	s14, s0
 8018284:	eef0 7a60 	vmov.f32	s15, s1
 8018288:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801828c:	ed83 7b00 	vstr	d7, [r3]
    if (tempY_tmp >= 0.0) {
 8018290:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018298:	f04f 0200 	mov.w	r2, #0
 801829c:	f04f 0300 	mov.w	r3, #0
 80182a0:	f7e8 fc22 	bl	8000ae8 <__aeabi_dcmpge>
 80182a4:	4603      	mov	r3, r0
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d00a      	beq.n	80182c0 <UKFCorrectorAdditive_getPredict+0x570>
      tempY = -tempY;
 80182aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80182ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182b2:	4615      	mov	r5, r2
 80182b4:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 80182b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80182bc:	e9c3 5600 	strd	r5, r6, [r3]
    if (fabs(tempY) < 1.0020841800044864E-292) {
 80182c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80182c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182c8:	60ba      	str	r2, [r7, #8]
 80182ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80182ce:	60fb      	str	r3, [r7, #12]
 80182d0:	f04f 0200 	mov.w	r2, #0
 80182d4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80182d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80182dc:	f7e8 fbf0 	bl	8000ac0 <__aeabi_dcmplt>
 80182e0:	4603      	mov	r3, r0
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	f000 80ad 	beq.w	8018442 <UKFCorrectorAdditive_getPredict+0x6f2>
      knt = 0;
 80182e8:	2300      	movs	r3, #0
 80182ea:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        knt++;
 80182ee:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80182f2:	3301      	adds	r3, #1
 80182f4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        Wmean[1] *= 9.9792015476736E+291;
 80182f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80182fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8018300:	f04f 0200 	mov.w	r2, #0
 8018304:	4b57      	ldr	r3, [pc, #348]	; (8018464 <UKFCorrectorAdditive_getPredict+0x714>)
 8018306:	f7e8 f969 	bl	80005dc <__aeabi_dmul>
 801830a:	4602      	mov	r2, r0
 801830c:	460b      	mov	r3, r1
 801830e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8018312:	e9c1 2302 	strd	r2, r3, [r1, #8]
        tempY *= 9.9792015476736E+291;
 8018316:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801831a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801831e:	f04f 0200 	mov.w	r2, #0
 8018322:	4b50      	ldr	r3, [pc, #320]	; (8018464 <UKFCorrectorAdditive_getPredict+0x714>)
 8018324:	f7e8 f95a 	bl	80005dc <__aeabi_dmul>
 8018328:	4602      	mov	r2, r0
 801832a:	460b      	mov	r3, r1
 801832c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8018330:	e9c1 2300 	strd	r2, r3, [r1]
        *Sy *= 9.9792015476736E+291;
 8018334:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018338:	e9d3 0100 	ldrd	r0, r1, [r3]
 801833c:	f04f 0200 	mov.w	r2, #0
 8018340:	4b48      	ldr	r3, [pc, #288]	; (8018464 <UKFCorrectorAdditive_getPredict+0x714>)
 8018342:	f7e8 f94b 	bl	80005dc <__aeabi_dmul>
 8018346:	4602      	mov	r2, r0
 8018348:	460b      	mov	r3, r1
 801834a:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 801834e:	e9c1 2300 	strd	r2, r3, [r1]
      } while ((fabs(tempY) < 1.0020841800044864E-292) && (knt < 20));
 8018352:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801835a:	603a      	str	r2, [r7, #0]
 801835c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018360:	607b      	str	r3, [r7, #4]
 8018362:	f04f 0200 	mov.w	r2, #0
 8018366:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801836a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801836e:	f7e8 fba7 	bl	8000ac0 <__aeabi_dcmplt>
 8018372:	4603      	mov	r3, r0
 8018374:	2b00      	cmp	r3, #0
 8018376:	d003      	beq.n	8018380 <UKFCorrectorAdditive_getPredict+0x630>
 8018378:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801837c:	2b13      	cmp	r3, #19
 801837e:	ddb6      	ble.n	80182ee <UKFCorrectorAdditive_getPredict+0x59e>
      tempY = rt_hypotd_snf(*Sy, xnrm2_Mnmxg9YT(1, Wmean, 2));
 8018380:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018384:	ed93 8b00 	vldr	d8, [r3]
 8018388:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801838c:	2202      	movs	r2, #2
 801838e:	4619      	mov	r1, r3
 8018390:	2001      	movs	r0, #1
 8018392:	f008 fbaf 	bl	8020af4 <xnrm2_Mnmxg9YT>
 8018396:	eeb0 7a40 	vmov.f32	s14, s0
 801839a:	eef0 7a60 	vmov.f32	s15, s1
 801839e:	eeb0 1a47 	vmov.f32	s2, s14
 80183a2:	eef0 1a67 	vmov.f32	s3, s15
 80183a6:	eeb0 0a48 	vmov.f32	s0, s16
 80183aa:	eef0 0a68 	vmov.f32	s1, s17
 80183ae:	f006 f817 	bl	801e3e0 <rt_hypotd_snf>
 80183b2:	eeb0 7a40 	vmov.f32	s14, s0
 80183b6:	eef0 7a60 	vmov.f32	s15, s1
 80183ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80183be:	ed83 7b00 	vstr	d7, [r3]
      if (*Sy >= 0.0) {
 80183c2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80183c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80183ca:	f04f 0200 	mov.w	r2, #0
 80183ce:	f04f 0300 	mov.w	r3, #0
 80183d2:	f7e8 fb89 	bl	8000ae8 <__aeabi_dcmpge>
 80183d6:	4603      	mov	r3, r0
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d00a      	beq.n	80183f2 <UKFCorrectorAdditive_getPredict+0x6a2>
        tempY = -tempY;
 80183dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80183e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183e4:	4692      	mov	sl, r2
 80183e6:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80183ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80183ee:	e9c3 ab00 	strd	sl, fp, [r3]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 80183f2:	2300      	movs	r3, #0
 80183f4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80183f8:	e014      	b.n	8018424 <UKFCorrectorAdditive_getPredict+0x6d4>
        tempY *= 1.0020841800044864E-292;
 80183fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80183fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018402:	f04f 0200 	mov.w	r2, #0
 8018406:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801840a:	f7e8 f8e7 	bl	80005dc <__aeabi_dmul>
 801840e:	4602      	mov	r2, r0
 8018410:	460b      	mov	r3, r1
 8018412:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8018416:	e9c1 2300 	strd	r2, r3, [r1]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 801841a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801841e:	3301      	adds	r3, #1
 8018420:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8018424:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8018428:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801842c:	429a      	cmp	r2, r3
 801842e:	dbe4      	blt.n	80183fa <UKFCorrectorAdditive_getPredict+0x6aa>
      *Sy = tempY;
 8018430:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018438:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 801843c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8018440:	e007      	b.n	8018452 <UKFCorrectorAdditive_getPredict+0x702>
      *Sy = tempY;
 8018442:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801844a:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 801844e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8018452:	bf00      	nop
 8018454:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8018458:	46bd      	mov	sp, r7
 801845a:	ecbd 8b02 	vpop	{d8}
 801845e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018462:	bf00      	nop
 8018464:	7c900000 	.word	0x7c900000

08018468 <CSE_step>:

void CSE_step(void)
{
 8018468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801846c:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 8018470:	af06      	add	r7, sp, #24
  int32_T iAcol_0;
  static const real_T Wmean[2] = { 1.0, -0.1666668333335 };

  static const real_T Wcov[2] = { 0.999996999998, -0.1666668333335 };

  if (CSE_P.Enable1_Value) {
 8018472:	4bb3      	ldr	r3, [pc, #716]	; (8018740 <CSE_step+0x2d8>)
 8018474:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
 8018478:	2b00      	cmp	r3, #0
 801847a:	f001 803e 	beq.w	80194fa <CSE_step+0x1092>
    boolean_T errorCondition;
    boolean_T guard1 = false;
 801847e:	2300      	movs	r3, #0
 8018480:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    CSE_M_x(CSE_DW.x, &s_0);
 8018484:	f107 0308 	add.w	r3, r7, #8
 8018488:	4619      	mov	r1, r3
 801848a:	48ae      	ldr	r0, [pc, #696]	; (8018744 <CSE_step+0x2dc>)
 801848c:	f7ff fc12 	bl	8017cb4 <CSE_M_x>
    UKFCorrectorAdditive_getPredict(CSE_P.R1_Value, CSE_DW.x, CSE_DW.P, 0.001,
 8018490:	4bab      	ldr	r3, [pc, #684]	; (8018740 <CSE_step+0x2d8>)
 8018492:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8018496:	f107 0110 	add.w	r1, r7, #16
 801849a:	f107 0208 	add.w	r2, r7, #8
 801849e:	463b      	mov	r3, r7
 80184a0:	9300      	str	r3, [sp, #0]
 80184a2:	460b      	mov	r3, r1
 80184a4:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 8018728 <CSE_step+0x2c0>
 80184a8:	ed9f 2ba1 	vldr	d2, [pc, #644]	; 8018730 <CSE_step+0x2c8>
 80184ac:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8018738 <CSE_step+0x2d0>
 80184b0:	49a5      	ldr	r1, [pc, #660]	; (8018748 <CSE_step+0x2e0>)
 80184b2:	48a4      	ldr	r0, [pc, #656]	; (8018744 <CSE_step+0x2dc>)
 80184b4:	eeb0 0a47 	vmov.f32	s0, s14
 80184b8:	eef0 0a67 	vmov.f32	s1, s15
 80184bc:	f7ff fc48 	bl	8017d50 <UKFCorrectorAdditive_getPredict>
      2.0, 0.0, &s_0, tempY, &temp);
    s_0 = CSE_U.y - s_0;
 80184c0:	4ba2      	ldr	r3, [pc, #648]	; (801874c <CSE_step+0x2e4>)
 80184c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80184c6:	f107 0308 	add.w	r3, r7, #8
 80184ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184ce:	f7e7 fecd 	bl	800026c <__aeabi_dsub>
 80184d2:	4602      	mov	r2, r0
 80184d4:	460b      	mov	r3, r1
 80184d6:	f107 0108 	add.w	r1, r7, #8
 80184da:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 = 0;
 80184de:	2300      	movs	r3, #0
 80184e0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80184e4:	2300      	movs	r3, #0
 80184e6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80184ea:	e04a      	b.n	8018582 <CSE_step+0x11a>
      R[iAcol_0] = CSE_DW.P[iAcol];
 80184ec:	4a96      	ldr	r2, [pc, #600]	; (8018748 <CSE_step+0x2e0>)
 80184ee:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80184f2:	00db      	lsls	r3, r3, #3
 80184f4:	4413      	add	r3, r2
 80184f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184fa:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80184fe:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8018502:	00c9      	lsls	r1, r1, #3
 8018504:	4401      	add	r1, r0
 8018506:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 1] = CSE_DW.P[iAcol + 3];
 801850a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801850e:	3303      	adds	r3, #3
 8018510:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8018514:	1c51      	adds	r1, r2, #1
 8018516:	4a8c      	ldr	r2, [pc, #560]	; (8018748 <CSE_step+0x2e0>)
 8018518:	00db      	lsls	r3, r3, #3
 801851a:	4413      	add	r3, r2
 801851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018520:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8018524:	00c9      	lsls	r1, r1, #3
 8018526:	4401      	add	r1, r0
 8018528:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 2] = CSE_DW.P[iAcol + 6];
 801852c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018530:	3306      	adds	r3, #6
 8018532:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8018536:	1c91      	adds	r1, r2, #2
 8018538:	4a83      	ldr	r2, [pc, #524]	; (8018748 <CSE_step+0x2e0>)
 801853a:	00db      	lsls	r3, r3, #3
 801853c:	4413      	add	r3, r2
 801853e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018542:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8018546:	00c9      	lsls	r1, r1, #3
 8018548:	4401      	add	r1, r0
 801854a:	e9c1 2300 	strd	r2, r3, [r1]
      C[iAcol] = tempY[iAcol];
 801854e:	f107 0210 	add.w	r2, r7, #16
 8018552:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018556:	00db      	lsls	r3, r3, #3
 8018558:	4413      	add	r3, r2
 801855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801855e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8018562:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8018566:	00c9      	lsls	r1, r1, #3
 8018568:	4401      	add	r1, r0
 801856a:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 801856e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018572:	3303      	adds	r3, #3
 8018574:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8018578:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801857c:	3301      	adds	r3, #1
 801857e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8018582:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018586:	2b02      	cmp	r3, #2
 8018588:	ddb0      	ble.n	80184ec <CSE_step+0x84>
    }

    trisolve_BC1XmAGq(temp, C);
 801858a:	463b      	mov	r3, r7
 801858c:	ed93 7b00 	vldr	d7, [r3]
 8018590:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018594:	4618      	mov	r0, r3
 8018596:	eeb0 0a47 	vmov.f32	s0, s14
 801859a:	eef0 0a67 	vmov.f32	s1, s15
 801859e:	f007 fe43 	bl	8020228 <trisolve_BC1XmAGq>
    K[0] = C[0];
 80185a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80185a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185aa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80185ae:	e9c1 2300 	strd	r2, r3, [r1]
    K[1] = C[1];
 80185b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80185b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80185ba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80185be:	e9c1 2302 	strd	r2, r3, [r1, #8]
    K[2] = C[2];
 80185c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80185c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80185ca:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80185ce:	e9c1 2304 	strd	r2, r3, [r1, #16]
    trisolve_BC1XmAGq(temp, K);
 80185d2:	463b      	mov	r3, r7
 80185d4:	ed93 7b00 	vldr	d7, [r3]
 80185d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80185dc:	4618      	mov	r0, r3
 80185de:	eeb0 0a47 	vmov.f32	s0, s14
 80185e2:	eef0 0a67 	vmov.f32	s1, s15
 80185e6:	f007 fe1f 	bl	8020228 <trisolve_BC1XmAGq>
    tempY[0] = K[0] * temp;
 80185ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80185ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80185f2:	463b      	mov	r3, r7
 80185f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185f8:	f7e7 fff0 	bl	80005dc <__aeabi_dmul>
 80185fc:	4602      	mov	r2, r0
 80185fe:	460b      	mov	r3, r1
 8018600:	f107 0110 	add.w	r1, r7, #16
 8018604:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8018608:	2300      	movs	r3, #0
 801860a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 801860e:	e011      	b.n	8018634 <CSE_step+0x1cc>
      R[iAcol + 1] = 0.0;
 8018610:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018614:	3301      	adds	r3, #1
 8018616:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801861a:	00db      	lsls	r3, r3, #3
 801861c:	18d1      	adds	r1, r2, r3
 801861e:	f04f 0200 	mov.w	r2, #0
 8018622:	f04f 0300 	mov.w	r3, #0
 8018626:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801862a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801862e:	3301      	adds	r3, #1
 8018630:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8018634:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018638:	2b01      	cmp	r3, #1
 801863a:	dde9      	ble.n	8018610 <CSE_step+0x1a8>
    }

    tempY[1] = K[1] * temp;
 801863c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018640:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8018644:	463b      	mov	r3, r7
 8018646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801864a:	f7e7 ffc7 	bl	80005dc <__aeabi_dmul>
 801864e:	4602      	mov	r2, r0
 8018650:	460b      	mov	r3, r1
 8018652:	f107 0110 	add.w	r1, r7, #16
 8018656:	e9c1 2302 	strd	r2, r3, [r1, #8]
    R[5] = 0.0;
 801865a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 801865e:	f04f 0200 	mov.w	r2, #0
 8018662:	f04f 0300 	mov.w	r3, #0
 8018666:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    tempY[2] = K[2] * temp;
 801866a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801866e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8018672:	463b      	mov	r3, r7
 8018674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018678:	f7e7 ffb0 	bl	80005dc <__aeabi_dmul>
 801867c:	4602      	mov	r2, r0
 801867e:	460b      	mov	r3, r1
 8018680:	f107 0110 	add.w	r1, r7, #16
 8018684:	e9c1 2304 	strd	r2, r3, [r1, #16]
    errorCondition = (R[0] == 0.0);
 8018688:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801868c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018690:	2301      	movs	r3, #1
 8018692:	461e      	mov	r6, r3
 8018694:	f04f 0200 	mov.w	r2, #0
 8018698:	f04f 0300 	mov.w	r3, #0
 801869c:	f7e8 fa06 	bl	8000aac <__aeabi_dcmpeq>
 80186a0:	4603      	mov	r3, r0
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d101      	bne.n	80186aa <CSE_step+0x242>
 80186a6:	2300      	movs	r3, #0
 80186a8:	461e      	mov	r6, r3
 80186aa:	b2f3      	uxtb	r3, r6
 80186ac:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    if (!errorCondition) {
 80186b0:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d113      	bne.n	80186e0 <CSE_step+0x278>
      errorCondition = (R[4] == 0.0);
 80186b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80186bc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80186c0:	2301      	movs	r3, #1
 80186c2:	461e      	mov	r6, r3
 80186c4:	f04f 0200 	mov.w	r2, #0
 80186c8:	f04f 0300 	mov.w	r3, #0
 80186cc:	f7e8 f9ee 	bl	8000aac <__aeabi_dcmpeq>
 80186d0:	4603      	mov	r3, r0
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d101      	bne.n	80186da <CSE_step+0x272>
 80186d6:	2300      	movs	r3, #0
 80186d8:	461e      	mov	r6, r3
 80186da:	b2f3      	uxtb	r3, r6
 80186dc:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    if (!errorCondition) {
 80186e0:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d113      	bne.n	8018710 <CSE_step+0x2a8>
      errorCondition = (R[8] == 0.0);
 80186e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80186ec:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80186f0:	2301      	movs	r3, #1
 80186f2:	461e      	mov	r6, r3
 80186f4:	f04f 0200 	mov.w	r2, #0
 80186f8:	f04f 0300 	mov.w	r3, #0
 80186fc:	f7e8 f9d6 	bl	8000aac <__aeabi_dcmpeq>
 8018700:	4603      	mov	r3, r0
 8018702:	2b00      	cmp	r3, #0
 8018704:	d101      	bne.n	801870a <CSE_step+0x2a2>
 8018706:	2300      	movs	r3, #0
 8018708:	461e      	mov	r6, r3
 801870a:	b2f3      	uxtb	r3, r6
 801870c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    guard1 = false;
 8018710:	2300      	movs	r3, #0
 8018712:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    if (errorCondition) {
 8018716:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 801871a:	2b00      	cmp	r3, #0
 801871c:	d018      	beq.n	8018750 <CSE_step+0x2e8>
      guard1 = true;
 801871e:	2301      	movs	r3, #1
 8018720:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8018724:	e395      	b.n	8018e52 <CSE_step+0x9ea>
 8018726:	bf00      	nop
	...
 8018734:	40000000 	.word	0x40000000
 8018738:	d2f1a9fc 	.word	0xd2f1a9fc
 801873c:	3f50624d 	.word	0x3f50624d
 8018740:	20000088 	.word	0x20000088
 8018744:	2001b3c8 	.word	0x2001b3c8
 8018748:	2001b380 	.word	0x2001b380
 801874c:	2001b3e0 	.word	0x2001b3e0
    } else {
      real_T absxk;
      real_T scale;
      real_T t;
      C[2] = tempY[2];
 8018750:	f107 0310 	add.w	r3, r7, #16
 8018754:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018758:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801875c:	e9c1 2304 	strd	r2, r3, [r1, #16]
      C[0] = tempY[0] / R[0];
 8018760:	f107 0310 	add.w	r3, r7, #16
 8018764:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018768:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018770:	f7e8 f85e 	bl	8000830 <__aeabi_ddiv>
 8018774:	4602      	mov	r2, r0
 8018776:	460b      	mov	r3, r1
 8018778:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801877c:	e9c1 2300 	strd	r2, r3, [r1]
      C[1] = (tempY[1] - C[0] * R[3]) / R[4];
 8018780:	f107 0310 	add.w	r3, r7, #16
 8018784:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8018788:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801878c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018790:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018794:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8018798:	f7e7 ff20 	bl	80005dc <__aeabi_dmul>
 801879c:	4602      	mov	r2, r0
 801879e:	460b      	mov	r3, r1
 80187a0:	4640      	mov	r0, r8
 80187a2:	4649      	mov	r1, r9
 80187a4:	f7e7 fd62 	bl	800026c <__aeabi_dsub>
 80187a8:	4602      	mov	r2, r0
 80187aa:	460b      	mov	r3, r1
 80187ac:	4610      	mov	r0, r2
 80187ae:	4619      	mov	r1, r3
 80187b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80187b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80187b8:	f7e8 f83a 	bl	8000830 <__aeabi_ddiv>
 80187bc:	4602      	mov	r2, r0
 80187be:	460b      	mov	r3, r1
 80187c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80187c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = tempY[2];
 80187c8:	f107 0310 	add.w	r3, r7, #16
 80187cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80187d0:	4639      	mov	r1, r7
 80187d2:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 80187d6:	2300      	movs	r3, #0
 80187d8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80187dc:	e025      	b.n	801882a <CSE_step+0x3c2>
        temp -= R[iAcol_0 + 6] * C[iAcol_0];
 80187de:	463b      	mov	r3, r7
 80187e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80187e4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80187e8:	3306      	adds	r3, #6
 80187ea:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80187ee:	00db      	lsls	r3, r3, #3
 80187f0:	4413      	add	r3, r2
 80187f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80187f6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80187fa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80187fe:	00db      	lsls	r3, r3, #3
 8018800:	4413      	add	r3, r2
 8018802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018806:	f7e7 fee9 	bl	80005dc <__aeabi_dmul>
 801880a:	4602      	mov	r2, r0
 801880c:	460b      	mov	r3, r1
 801880e:	4640      	mov	r0, r8
 8018810:	4649      	mov	r1, r9
 8018812:	f7e7 fd2b 	bl	800026c <__aeabi_dsub>
 8018816:	4602      	mov	r2, r0
 8018818:	460b      	mov	r3, r1
 801881a:	4639      	mov	r1, r7
 801881c:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8018820:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018824:	3301      	adds	r3, #1
 8018826:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801882a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801882e:	2b01      	cmp	r3, #1
 8018830:	ddd5      	ble.n	80187de <CSE_step+0x376>
      }

      C[2] = temp / R[8];
 8018832:	463b      	mov	r3, r7
 8018834:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018838:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801883c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8018840:	f7e7 fff6 	bl	8000830 <__aeabi_ddiv>
 8018844:	4602      	mov	r2, r0
 8018846:	460b      	mov	r3, r1
 8018848:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801884c:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8018850:	f04f 0200 	mov.w	r2, #0
 8018854:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8018858:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
      absxk = fabs(C[0]);
 801885c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018864:	4611      	mov	r1, r2
 8018866:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 801886a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801886e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > 3.3121686421112381E-170) {
 8018872:	f04f 0200 	mov.w	r2, #0
 8018876:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 801887a:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 801887e:	f7e8 f93d 	bl	8000afc <__aeabi_dcmpgt>
 8018882:	4603      	mov	r3, r0
 8018884:	2b00      	cmp	r3, #0
 8018886:	d00a      	beq.n	801889e <CSE_step+0x436>
        temp = 1.0;
 8018888:	4639      	mov	r1, r7
 801888a:	f04f 0200 	mov.w	r2, #0
 801888e:	4bbf      	ldr	r3, [pc, #764]	; (8018b8c <CSE_step+0x724>)
 8018890:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8018894:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8018898:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 801889c:	e016      	b.n	80188cc <CSE_step+0x464>
      } else {
        t = absxk / 3.3121686421112381E-170;
 801889e:	f04f 0200 	mov.w	r2, #0
 80188a2:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80188a6:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80188aa:	f7e7 ffc1 	bl	8000830 <__aeabi_ddiv>
 80188ae:	4602      	mov	r2, r0
 80188b0:	460b      	mov	r3, r1
 80188b2:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = t * t;
 80188b6:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80188ba:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80188be:	f7e7 fe8d 	bl	80005dc <__aeabi_dmul>
 80188c2:	4602      	mov	r2, r0
 80188c4:	460b      	mov	r3, r1
 80188c6:	4639      	mov	r1, r7
 80188c8:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[1]);
 80188cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80188d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80188d4:	4611      	mov	r1, r2
 80188d6:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 80188da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80188de:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 80188e2:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80188e6:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80188ea:	f7e8 f907 	bl	8000afc <__aeabi_dcmpgt>
 80188ee:	4603      	mov	r3, r0
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d02b      	beq.n	801894c <CSE_step+0x4e4>
        t = scale / absxk;
 80188f4:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80188f8:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 80188fc:	f7e7 ff98 	bl	8000830 <__aeabi_ddiv>
 8018900:	4602      	mov	r2, r0
 8018902:	460b      	mov	r3, r1
 8018904:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8018908:	463b      	mov	r3, r7
 801890a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801890e:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018912:	f7e7 fe63 	bl	80005dc <__aeabi_dmul>
 8018916:	4602      	mov	r2, r0
 8018918:	460b      	mov	r3, r1
 801891a:	4610      	mov	r0, r2
 801891c:	4619      	mov	r1, r3
 801891e:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018922:	f7e7 fe5b 	bl	80005dc <__aeabi_dmul>
 8018926:	4602      	mov	r2, r0
 8018928:	460b      	mov	r3, r1
 801892a:	4610      	mov	r0, r2
 801892c:	4619      	mov	r1, r3
 801892e:	f04f 0200 	mov.w	r2, #0
 8018932:	4b96      	ldr	r3, [pc, #600]	; (8018b8c <CSE_step+0x724>)
 8018934:	f7e7 fc9c 	bl	8000270 <__adddf3>
 8018938:	4602      	mov	r2, r0
 801893a:	460b      	mov	r3, r1
 801893c:	4639      	mov	r1, r7
 801893e:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8018942:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8018946:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 801894a:	e01d      	b.n	8018988 <CSE_step+0x520>
      } else {
        t = absxk / scale;
 801894c:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8018950:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018954:	f7e7 ff6c 	bl	8000830 <__aeabi_ddiv>
 8018958:	4602      	mov	r2, r0
 801895a:	460b      	mov	r3, r1
 801895c:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8018960:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018964:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8018968:	f7e7 fe38 	bl	80005dc <__aeabi_dmul>
 801896c:	4602      	mov	r2, r0
 801896e:	460b      	mov	r3, r1
 8018970:	4610      	mov	r0, r2
 8018972:	4619      	mov	r1, r3
 8018974:	463b      	mov	r3, r7
 8018976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801897a:	f7e7 fc79 	bl	8000270 <__adddf3>
 801897e:	4602      	mov	r2, r0
 8018980:	460b      	mov	r3, r1
 8018982:	4639      	mov	r1, r7
 8018984:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[2]);
 8018988:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801898c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018990:	4611      	mov	r1, r2
 8018992:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8018996:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801899a:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 801899e:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80189a2:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80189a6:	f7e8 f8a9 	bl	8000afc <__aeabi_dcmpgt>
 80189aa:	4603      	mov	r3, r0
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d02b      	beq.n	8018a08 <CSE_step+0x5a0>
        t = scale / absxk;
 80189b0:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80189b4:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 80189b8:	f7e7 ff3a 	bl	8000830 <__aeabi_ddiv>
 80189bc:	4602      	mov	r2, r0
 80189be:	460b      	mov	r3, r1
 80189c0:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 80189c4:	463b      	mov	r3, r7
 80189c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80189ca:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80189ce:	f7e7 fe05 	bl	80005dc <__aeabi_dmul>
 80189d2:	4602      	mov	r2, r0
 80189d4:	460b      	mov	r3, r1
 80189d6:	4610      	mov	r0, r2
 80189d8:	4619      	mov	r1, r3
 80189da:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80189de:	f7e7 fdfd 	bl	80005dc <__aeabi_dmul>
 80189e2:	4602      	mov	r2, r0
 80189e4:	460b      	mov	r3, r1
 80189e6:	4610      	mov	r0, r2
 80189e8:	4619      	mov	r1, r3
 80189ea:	f04f 0200 	mov.w	r2, #0
 80189ee:	4b67      	ldr	r3, [pc, #412]	; (8018b8c <CSE_step+0x724>)
 80189f0:	f7e7 fc3e 	bl	8000270 <__adddf3>
 80189f4:	4602      	mov	r2, r0
 80189f6:	460b      	mov	r3, r1
 80189f8:	4639      	mov	r1, r7
 80189fa:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80189fe:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8018a02:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8018a06:	e01d      	b.n	8018a44 <CSE_step+0x5dc>
      } else {
        t = absxk / scale;
 8018a08:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8018a0c:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018a10:	f7e7 ff0e 	bl	8000830 <__aeabi_ddiv>
 8018a14:	4602      	mov	r2, r0
 8018a16:	460b      	mov	r3, r1
 8018a18:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8018a1c:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018a20:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8018a24:	f7e7 fdda 	bl	80005dc <__aeabi_dmul>
 8018a28:	4602      	mov	r2, r0
 8018a2a:	460b      	mov	r3, r1
 8018a2c:	4610      	mov	r0, r2
 8018a2e:	4619      	mov	r1, r3
 8018a30:	463b      	mov	r3, r7
 8018a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a36:	f7e7 fc1b 	bl	8000270 <__adddf3>
 8018a3a:	4602      	mov	r2, r0
 8018a3c:	460b      	mov	r3, r1
 8018a3e:	4639      	mov	r1, r7
 8018a40:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 8018a44:	463b      	mov	r3, r7
 8018a46:	ed93 7b00 	vldr	d7, [r3]
 8018a4a:	eeb0 0a47 	vmov.f32	s0, s14
 8018a4e:	eef0 0a67 	vmov.f32	s1, s15
 8018a52:	f014 fb3d 	bl	802d0d0 <sqrt>
 8018a56:	ec51 0b10 	vmov	r0, r1, d0
 8018a5a:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8018a5e:	f7e7 fdbd 	bl	80005dc <__aeabi_dmul>
 8018a62:	4602      	mov	r2, r0
 8018a64:	460b      	mov	r3, r1
 8018a66:	4639      	mov	r1, r7
 8018a68:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 8018a6c:	463b      	mov	r3, r7
 8018a6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018a72:	f04f 0200 	mov.w	r2, #0
 8018a76:	4b45      	ldr	r3, [pc, #276]	; (8018b8c <CSE_step+0x724>)
 8018a78:	f7e8 f836 	bl	8000ae8 <__aeabi_dcmpge>
 8018a7c:	4603      	mov	r3, r0
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d003      	beq.n	8018a8a <CSE_step+0x622>
        guard1 = true;
 8018a82:	2301      	movs	r3, #1
 8018a84:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8018a88:	e1e3      	b.n	8018e52 <CSE_step+0x9ea>
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), C[2], &tempY[2], &s[2], &temp);
 8018a8a:	463b      	mov	r3, r7
 8018a8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018a90:	463b      	mov	r3, r7
 8018a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a96:	f7e7 fda1 	bl	80005dc <__aeabi_dmul>
 8018a9a:	4602      	mov	r2, r0
 8018a9c:	460b      	mov	r3, r1
 8018a9e:	f04f 0000 	mov.w	r0, #0
 8018aa2:	493a      	ldr	r1, [pc, #232]	; (8018b8c <CSE_step+0x724>)
 8018aa4:	f7e7 fbe2 	bl	800026c <__aeabi_dsub>
 8018aa8:	4602      	mov	r2, r0
 8018aaa:	460b      	mov	r3, r1
 8018aac:	ec43 2b17 	vmov	d7, r2, r3
 8018ab0:	eeb0 0a47 	vmov.f32	s0, s14
 8018ab4:	eef0 0a67 	vmov.f32	s1, s15
 8018ab8:	f014 fb0a 	bl	802d0d0 <sqrt>
 8018abc:	eeb0 6a40 	vmov.f32	s12, s0
 8018ac0:	eef0 6a60 	vmov.f32	s13, s1
 8018ac4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018ac8:	ed93 7b04 	vldr	d7, [r3, #16]
 8018acc:	463a      	mov	r2, r7
 8018ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018ad2:	f103 0110 	add.w	r1, r3, #16
 8018ad6:	f107 0310 	add.w	r3, r7, #16
 8018ada:	3310      	adds	r3, #16
 8018adc:	4618      	mov	r0, r3
 8018ade:	eeb0 1a47 	vmov.f32	s2, s14
 8018ae2:	eef0 1a67 	vmov.f32	s3, s15
 8018ae6:	eeb0 0a46 	vmov.f32	s0, s12
 8018aea:	eef0 0a66 	vmov.f32	s1, s13
 8018aee:	f005 faeb 	bl	801e0c8 <rotate_LZ7ctbe0>
        C[2] = 0.0;
 8018af2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018af6:	f04f 0200 	mov.w	r2, #0
 8018afa:	f04f 0300 	mov.w	r3, #0
 8018afe:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, C[1], &tempY[1], &s[1], &temp);
 8018b02:	463b      	mov	r3, r7
 8018b04:	ed93 7b00 	vldr	d7, [r3]
 8018b08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018b0c:	ed93 6b02 	vldr	d6, [r3, #8]
 8018b10:	463a      	mov	r2, r7
 8018b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018b16:	f103 0108 	add.w	r1, r3, #8
 8018b1a:	f107 0310 	add.w	r3, r7, #16
 8018b1e:	3308      	adds	r3, #8
 8018b20:	4618      	mov	r0, r3
 8018b22:	eeb0 1a46 	vmov.f32	s2, s12
 8018b26:	eef0 1a66 	vmov.f32	s3, s13
 8018b2a:	eeb0 0a47 	vmov.f32	s0, s14
 8018b2e:	eef0 0a67 	vmov.f32	s1, s15
 8018b32:	f005 fac9 	bl	801e0c8 <rotate_LZ7ctbe0>
        C[1] = 0.0;
 8018b36:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018b3a:	f04f 0200 	mov.w	r2, #0
 8018b3e:	f04f 0300 	mov.w	r3, #0
 8018b42:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, C[0], &tempY[0], &s[0], &temp);
 8018b46:	463b      	mov	r3, r7
 8018b48:	ed93 7b00 	vldr	d7, [r3]
 8018b4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018b50:	ed93 6b00 	vldr	d6, [r3]
 8018b54:	463a      	mov	r2, r7
 8018b56:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8018b5a:	f107 0310 	add.w	r3, r7, #16
 8018b5e:	4618      	mov	r0, r3
 8018b60:	eeb0 1a46 	vmov.f32	s2, s12
 8018b64:	eef0 1a66 	vmov.f32	s3, s13
 8018b68:	eeb0 0a47 	vmov.f32	s0, s14
 8018b6c:	eef0 0a67 	vmov.f32	s1, s15
 8018b70:	f005 faaa 	bl	801e0c8 <rotate_LZ7ctbe0>
        C[0] = 0.0;
 8018b74:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018b78:	f04f 0200 	mov.w	r2, #0
 8018b7c:	f04f 0300 	mov.w	r3, #0
 8018b80:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 8018b84:	2300      	movs	r3, #0
 8018b86:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8018b8a:	e06e      	b.n	8018c6a <CSE_step+0x802>
 8018b8c:	3ff00000 	.word	0x3ff00000
          temp = s[iAcol_0] * R[iAcol_0];
 8018b90:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018b94:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018b98:	00db      	lsls	r3, r3, #3
 8018b9a:	4413      	add	r3, r2
 8018b9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018ba0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018ba4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018ba8:	00db      	lsls	r3, r3, #3
 8018baa:	4413      	add	r3, r2
 8018bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bb0:	f7e7 fd14 	bl	80005dc <__aeabi_dmul>
 8018bb4:	4602      	mov	r2, r0
 8018bb6:	460b      	mov	r3, r1
 8018bb8:	4639      	mov	r1, r7
 8018bba:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0] = tempY[iAcol_0] * R[iAcol_0] - s[iAcol_0] * C[0];
 8018bbe:	f107 0210 	add.w	r2, r7, #16
 8018bc2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018bc6:	00db      	lsls	r3, r3, #3
 8018bc8:	4413      	add	r3, r2
 8018bca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018bce:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018bd2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018bd6:	00db      	lsls	r3, r3, #3
 8018bd8:	4413      	add	r3, r2
 8018bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bde:	f7e7 fcfd 	bl	80005dc <__aeabi_dmul>
 8018be2:	4602      	mov	r2, r0
 8018be4:	460b      	mov	r3, r1
 8018be6:	4690      	mov	r8, r2
 8018be8:	4699      	mov	r9, r3
 8018bea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018bee:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018bf2:	00db      	lsls	r3, r3, #3
 8018bf4:	4413      	add	r3, r2
 8018bf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018bfa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c02:	f7e7 fceb 	bl	80005dc <__aeabi_dmul>
 8018c06:	4602      	mov	r2, r0
 8018c08:	460b      	mov	r3, r1
 8018c0a:	4640      	mov	r0, r8
 8018c0c:	4649      	mov	r1, r9
 8018c0e:	f7e7 fb2d 	bl	800026c <__aeabi_dsub>
 8018c12:	4602      	mov	r2, r0
 8018c14:	460b      	mov	r3, r1
 8018c16:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8018c1a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8018c1e:	00c9      	lsls	r1, r1, #3
 8018c20:	4401      	add	r1, r0
 8018c22:	e9c1 2300 	strd	r2, r3, [r1]
          C[0] = tempY[iAcol_0] * C[0] + temp;
 8018c26:	f107 0210 	add.w	r2, r7, #16
 8018c2a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018c2e:	00db      	lsls	r3, r3, #3
 8018c30:	4413      	add	r3, r2
 8018c32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018c36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c3e:	f7e7 fccd 	bl	80005dc <__aeabi_dmul>
 8018c42:	4602      	mov	r2, r0
 8018c44:	460b      	mov	r3, r1
 8018c46:	4610      	mov	r0, r2
 8018c48:	4619      	mov	r1, r3
 8018c4a:	463b      	mov	r3, r7
 8018c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c50:	f7e7 fb0e 	bl	8000270 <__adddf3>
 8018c54:	4602      	mov	r2, r0
 8018c56:	460b      	mov	r3, r1
 8018c58:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018c5c:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 8018c60:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018c64:	3b01      	subs	r3, #1
 8018c66:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8018c6a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	da8e      	bge.n	8018b90 <CSE_step+0x728>
        }

        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 8018c72:	2301      	movs	r3, #1
 8018c74:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8018c78:	e06f      	b.n	8018d5a <CSE_step+0x8f2>
          temp = R[iAcol_0 + 3];
 8018c7a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018c7e:	3303      	adds	r3, #3
 8018c80:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018c84:	00db      	lsls	r3, r3, #3
 8018c86:	4413      	add	r3, r2
 8018c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c8c:	4639      	mov	r1, r7
 8018c8e:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 3] = temp * tempY[iAcol_0] - s[iAcol_0] * C[1];
 8018c92:	f107 0210 	add.w	r2, r7, #16
 8018c96:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018c9a:	00db      	lsls	r3, r3, #3
 8018c9c:	4413      	add	r3, r2
 8018c9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018ca2:	463b      	mov	r3, r7
 8018ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ca8:	f7e7 fc98 	bl	80005dc <__aeabi_dmul>
 8018cac:	4602      	mov	r2, r0
 8018cae:	460b      	mov	r3, r1
 8018cb0:	4690      	mov	r8, r2
 8018cb2:	4699      	mov	r9, r3
 8018cb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018cb8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018cbc:	00db      	lsls	r3, r3, #3
 8018cbe:	4413      	add	r3, r2
 8018cc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018cc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018cc8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018ccc:	f7e7 fc86 	bl	80005dc <__aeabi_dmul>
 8018cd0:	4602      	mov	r2, r0
 8018cd2:	460b      	mov	r3, r1
 8018cd4:	4610      	mov	r0, r2
 8018cd6:	4619      	mov	r1, r3
 8018cd8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018cdc:	1cde      	adds	r6, r3, #3
 8018cde:	4602      	mov	r2, r0
 8018ce0:	460b      	mov	r3, r1
 8018ce2:	4640      	mov	r0, r8
 8018ce4:	4649      	mov	r1, r9
 8018ce6:	f7e7 fac1 	bl	800026c <__aeabi_dsub>
 8018cea:	4602      	mov	r2, r0
 8018cec:	460b      	mov	r3, r1
 8018cee:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8018cf2:	00f1      	lsls	r1, r6, #3
 8018cf4:	4401      	add	r1, r0
 8018cf6:	e9c1 2300 	strd	r2, r3, [r1]
          C[1] = tempY[iAcol_0] * C[1] + temp * s[iAcol_0];
 8018cfa:	f107 0210 	add.w	r2, r7, #16
 8018cfe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018d02:	00db      	lsls	r3, r3, #3
 8018d04:	4413      	add	r3, r2
 8018d06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018d0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018d0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018d12:	f7e7 fc63 	bl	80005dc <__aeabi_dmul>
 8018d16:	4602      	mov	r2, r0
 8018d18:	460b      	mov	r3, r1
 8018d1a:	4690      	mov	r8, r2
 8018d1c:	4699      	mov	r9, r3
 8018d1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018d22:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018d26:	00db      	lsls	r3, r3, #3
 8018d28:	4413      	add	r3, r2
 8018d2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018d2e:	463b      	mov	r3, r7
 8018d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d34:	f7e7 fc52 	bl	80005dc <__aeabi_dmul>
 8018d38:	4602      	mov	r2, r0
 8018d3a:	460b      	mov	r3, r1
 8018d3c:	4640      	mov	r0, r8
 8018d3e:	4649      	mov	r1, r9
 8018d40:	f7e7 fa96 	bl	8000270 <__adddf3>
 8018d44:	4602      	mov	r2, r0
 8018d46:	460b      	mov	r3, r1
 8018d48:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018d4c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 8018d50:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018d54:	3b01      	subs	r3, #1
 8018d56:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8018d5a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	da8b      	bge.n	8018c7a <CSE_step+0x812>
        }

        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 8018d62:	2302      	movs	r3, #2
 8018d64:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8018d68:	e06f      	b.n	8018e4a <CSE_step+0x9e2>
          temp = R[iAcol_0 + 6];
 8018d6a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018d6e:	3306      	adds	r3, #6
 8018d70:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018d74:	00db      	lsls	r3, r3, #3
 8018d76:	4413      	add	r3, r2
 8018d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d7c:	4639      	mov	r1, r7
 8018d7e:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 6] = temp * tempY[iAcol_0] - s[iAcol_0] * C[2];
 8018d82:	f107 0210 	add.w	r2, r7, #16
 8018d86:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018d8a:	00db      	lsls	r3, r3, #3
 8018d8c:	4413      	add	r3, r2
 8018d8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018d92:	463b      	mov	r3, r7
 8018d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d98:	f7e7 fc20 	bl	80005dc <__aeabi_dmul>
 8018d9c:	4602      	mov	r2, r0
 8018d9e:	460b      	mov	r3, r1
 8018da0:	4690      	mov	r8, r2
 8018da2:	4699      	mov	r9, r3
 8018da4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018da8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018dac:	00db      	lsls	r3, r3, #3
 8018dae:	4413      	add	r3, r2
 8018db0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018db4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018db8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018dbc:	f7e7 fc0e 	bl	80005dc <__aeabi_dmul>
 8018dc0:	4602      	mov	r2, r0
 8018dc2:	460b      	mov	r3, r1
 8018dc4:	4610      	mov	r0, r2
 8018dc6:	4619      	mov	r1, r3
 8018dc8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018dcc:	1d9e      	adds	r6, r3, #6
 8018dce:	4602      	mov	r2, r0
 8018dd0:	460b      	mov	r3, r1
 8018dd2:	4640      	mov	r0, r8
 8018dd4:	4649      	mov	r1, r9
 8018dd6:	f7e7 fa49 	bl	800026c <__aeabi_dsub>
 8018dda:	4602      	mov	r2, r0
 8018ddc:	460b      	mov	r3, r1
 8018dde:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8018de2:	00f1      	lsls	r1, r6, #3
 8018de4:	4401      	add	r1, r0
 8018de6:	e9c1 2300 	strd	r2, r3, [r1]
          C[2] = tempY[iAcol_0] * C[2] + temp * s[iAcol_0];
 8018dea:	f107 0210 	add.w	r2, r7, #16
 8018dee:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018df2:	00db      	lsls	r3, r3, #3
 8018df4:	4413      	add	r3, r2
 8018df6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018dfa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018dfe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018e02:	f7e7 fbeb 	bl	80005dc <__aeabi_dmul>
 8018e06:	4602      	mov	r2, r0
 8018e08:	460b      	mov	r3, r1
 8018e0a:	4690      	mov	r8, r2
 8018e0c:	4699      	mov	r9, r3
 8018e0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018e12:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018e16:	00db      	lsls	r3, r3, #3
 8018e18:	4413      	add	r3, r2
 8018e1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018e1e:	463b      	mov	r3, r7
 8018e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e24:	f7e7 fbda 	bl	80005dc <__aeabi_dmul>
 8018e28:	4602      	mov	r2, r0
 8018e2a:	460b      	mov	r3, r1
 8018e2c:	4640      	mov	r0, r8
 8018e2e:	4649      	mov	r1, r9
 8018e30:	f7e7 fa1e 	bl	8000270 <__adddf3>
 8018e34:	4602      	mov	r2, r0
 8018e36:	460b      	mov	r3, r1
 8018e38:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018e3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 8018e40:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018e44:	3b01      	subs	r3, #1
 8018e46:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8018e4a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	da8b      	bge.n	8018d6a <CSE_step+0x902>
        }
      }
    }

    if (guard1) {
 8018e52:	f897 32de 	ldrb.w	r3, [r7, #734]	; 0x2de
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	f000 82e1 	beq.w	801941e <CSE_step+0xfb6>
      int32_T R_tmp;
      boolean_T exitg2;
      iAcol_0 = 0;
 8018e5c:	2300      	movs	r3, #0
 8018e5e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8018e62:	2300      	movs	r3, #0
 8018e64:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8018e68:	e0d6      	b.n	8019018 <CSE_step+0xbb0>
        coffset = 0;
 8018e6a:	2300      	movs	r3, #0
 8018e6c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8018e70:	2300      	movs	r3, #0
 8018e72:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8018e76:	e0c0      	b.n	8018ffa <CSE_step+0xb92>
          R_tmp = coffset + iAcol;
 8018e78:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8018e7c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018e80:	4413      	add	r3, r2
 8018e82:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R_0[R_tmp] = 0.0;
 8018e86:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8018e8a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8018e8e:	00db      	lsls	r3, r3, #3
 8018e90:	18d1      	adds	r1, r2, r3
 8018e92:	f04f 0200 	mov.w	r2, #0
 8018e96:	f04f 0300 	mov.w	r3, #0
 8018e9a:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0] * R[coffset];
 8018e9e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8018ea2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8018ea6:	00db      	lsls	r3, r3, #3
 8018ea8:	4413      	add	r3, r2
 8018eaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018eae:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018eb2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018eb6:	00db      	lsls	r3, r3, #3
 8018eb8:	4413      	add	r3, r2
 8018eba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018ebe:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018ec2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8018ec6:	00db      	lsls	r3, r3, #3
 8018ec8:	4413      	add	r3, r2
 8018eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ece:	f7e7 fb85 	bl	80005dc <__aeabi_dmul>
 8018ed2:	4602      	mov	r2, r0
 8018ed4:	460b      	mov	r3, r1
 8018ed6:	4640      	mov	r0, r8
 8018ed8:	4649      	mov	r1, r9
 8018eda:	f7e7 f9c9 	bl	8000270 <__adddf3>
 8018ede:	4602      	mov	r2, r0
 8018ee0:	460b      	mov	r3, r1
 8018ee2:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8018ee6:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8018eea:	00c9      	lsls	r1, r1, #3
 8018eec:	4401      	add	r1, r0
 8018eee:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 1] * R[coffset + 1];
 8018ef2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8018ef6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8018efa:	00db      	lsls	r3, r3, #3
 8018efc:	4413      	add	r3, r2
 8018efe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018f02:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018f06:	3301      	adds	r3, #1
 8018f08:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018f0c:	00db      	lsls	r3, r3, #3
 8018f0e:	4413      	add	r3, r2
 8018f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018f14:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8018f18:	3301      	adds	r3, #1
 8018f1a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018f1e:	00db      	lsls	r3, r3, #3
 8018f20:	4413      	add	r3, r2
 8018f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f26:	f7e7 fb59 	bl	80005dc <__aeabi_dmul>
 8018f2a:	4602      	mov	r2, r0
 8018f2c:	460b      	mov	r3, r1
 8018f2e:	4640      	mov	r0, r8
 8018f30:	4649      	mov	r1, r9
 8018f32:	f7e7 f99d 	bl	8000270 <__adddf3>
 8018f36:	4602      	mov	r2, r0
 8018f38:	460b      	mov	r3, r1
 8018f3a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8018f3e:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8018f42:	00c9      	lsls	r1, r1, #3
 8018f44:	4401      	add	r1, r0
 8018f46:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 2] * R[coffset + 2];
 8018f4a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8018f4e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8018f52:	00db      	lsls	r3, r3, #3
 8018f54:	4413      	add	r3, r2
 8018f56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018f5a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018f5e:	3302      	adds	r3, #2
 8018f60:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018f64:	00db      	lsls	r3, r3, #3
 8018f66:	4413      	add	r3, r2
 8018f68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018f6c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8018f70:	3302      	adds	r3, #2
 8018f72:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018f76:	00db      	lsls	r3, r3, #3
 8018f78:	4413      	add	r3, r2
 8018f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f7e:	f7e7 fb2d 	bl	80005dc <__aeabi_dmul>
 8018f82:	4602      	mov	r2, r0
 8018f84:	460b      	mov	r3, r1
 8018f86:	4640      	mov	r0, r8
 8018f88:	4649      	mov	r1, r9
 8018f8a:	f7e7 f971 	bl	8000270 <__adddf3>
 8018f8e:	4602      	mov	r2, r0
 8018f90:	460b      	mov	r3, r1
 8018f92:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8018f96:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8018f9a:	00c9      	lsls	r1, r1, #3
 8018f9c:	4401      	add	r1, r0
 8018f9e:	e9c1 2300 	strd	r2, r3, [r1]
          tempY_0[aoffset + iAcol_0] = tempY[aoffset] * tempY[iAcol];
 8018fa2:	f107 0210 	add.w	r2, r7, #16
 8018fa6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8018faa:	00db      	lsls	r3, r3, #3
 8018fac:	4413      	add	r3, r2
 8018fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018fb2:	f107 0210 	add.w	r2, r7, #16
 8018fb6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018fba:	00db      	lsls	r3, r3, #3
 8018fbc:	4413      	add	r3, r2
 8018fbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018fc2:	f8d7 62ec 	ldr.w	r6, [r7, #748]	; 0x2ec
 8018fc6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018fca:	4433      	add	r3, r6
 8018fcc:	461e      	mov	r6, r3
 8018fce:	4642      	mov	r2, r8
 8018fd0:	464b      	mov	r3, r9
 8018fd2:	f7e7 fb03 	bl	80005dc <__aeabi_dmul>
 8018fd6:	4602      	mov	r2, r0
 8018fd8:	460b      	mov	r3, r1
 8018fda:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8018fde:	00f1      	lsls	r1, r6, #3
 8018fe0:	4401      	add	r1, r0
 8018fe2:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 8018fe6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8018fea:	3303      	adds	r3, #3
 8018fec:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8018ff0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8018ff4:	3301      	adds	r3, #1
 8018ff6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8018ffa:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8018ffe:	2b02      	cmp	r3, #2
 8019000:	f77f af3a 	ble.w	8018e78 <CSE_step+0xa10>
        }

        iAcol_0 += 3;
 8019004:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019008:	3303      	adds	r3, #3
 801900a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801900e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019012:	3301      	adds	r3, #1
 8019014:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019018:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801901c:	2b02      	cmp	r3, #2
 801901e:	f77f af24 	ble.w	8018e6a <CSE_step+0xa02>
      }

      errorCondition = true;
 8019022:	2301      	movs	r3, #1
 8019024:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8019028:	2300      	movs	r3, #0
 801902a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 801902e:	e045      	b.n	80190bc <CSE_step+0xc54>
        temp = R_0[iAcol] - tempY_0[iAcol];
 8019030:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019034:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019038:	00db      	lsls	r3, r3, #3
 801903a:	4413      	add	r3, r2
 801903c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019040:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8019044:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019048:	00db      	lsls	r3, r3, #3
 801904a:	4413      	add	r3, r2
 801904c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019050:	f7e7 f90c 	bl	800026c <__aeabi_dsub>
 8019054:	4602      	mov	r2, r0
 8019056:	460b      	mov	r3, r1
 8019058:	4639      	mov	r1, r7
 801905a:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 801905e:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8019062:	2b00      	cmp	r3, #0
 8019064:	d01a      	beq.n	801909c <CSE_step+0xc34>
 8019066:	463b      	mov	r3, r7
 8019068:	ed93 7b00 	vldr	d7, [r3]
 801906c:	eeb0 0a47 	vmov.f32	s0, s14
 8019070:	eef0 0a67 	vmov.f32	s1, s15
 8019074:	f005 fa9e 	bl	801e5b4 <rtIsInf>
 8019078:	4603      	mov	r3, r0
 801907a:	2b00      	cmp	r3, #0
 801907c:	d10b      	bne.n	8019096 <CSE_step+0xc2e>
 801907e:	463b      	mov	r3, r7
 8019080:	ed93 7b00 	vldr	d7, [r3]
 8019084:	eeb0 0a47 	vmov.f32	s0, s14
 8019088:	eef0 0a67 	vmov.f32	s1, s15
 801908c:	f005 fab6 	bl	801e5fc <rtIsNaN>
 8019090:	4603      	mov	r3, r0
 8019092:	2b00      	cmp	r3, #0
 8019094:	d002      	beq.n	801909c <CSE_step+0xc34>
          errorCondition = false;
 8019096:	2300      	movs	r3, #0
 8019098:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
        }

        Ss[iAcol] = temp;
 801909c:	463b      	mov	r3, r7
 801909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190a2:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80190a6:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 80190aa:	00c9      	lsls	r1, r1, #3
 80190ac:	4401      	add	r1, r0
 80190ae:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 80190b2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80190b6:	3301      	adds	r3, #1
 80190b8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80190bc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80190c0:	2b08      	cmp	r3, #8
 80190c2:	ddb5      	ble.n	8019030 <CSE_step+0xbc8>
      }

      if (errorCondition) {
 80190c4:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d00a      	beq.n	80190e2 <CSE_step+0xc7a>
        svd_u3DvUgOe(Ss, tempY_0, s, R_0);
 80190cc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80190d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80190d4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80190d8:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80190dc:	f005 fae0 	bl	801e6a0 <svd_u3DvUgOe>
 80190e0:	e02c      	b.n	801913c <CSE_step+0xcd4>
      } else {
        s[0] = (rtNaN);
 80190e2:	4bd2      	ldr	r3, [pc, #840]	; (801942c <CSE_step+0xfc4>)
 80190e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80190ec:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 80190f0:	4bce      	ldr	r3, [pc, #824]	; (801942c <CSE_step+0xfc4>)
 80190f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190f6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80190fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 80190fe:	4bcb      	ldr	r3, [pc, #812]	; (801942c <CSE_step+0xfc4>)
 8019100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019104:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8019108:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 801910c:	2300      	movs	r3, #0
 801910e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019112:	e00f      	b.n	8019134 <CSE_step+0xccc>
          R_0[iAcol_0] = (rtNaN);
 8019114:	4bc5      	ldr	r3, [pc, #788]	; (801942c <CSE_step+0xfc4>)
 8019116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801911a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 801911e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019122:	00c9      	lsls	r1, r1, #3
 8019124:	4401      	add	r1, r0
 8019126:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 801912a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801912e:	3301      	adds	r3, #1
 8019130:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019134:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019138:	2b08      	cmp	r3, #8
 801913a:	ddeb      	ble.n	8019114 <CSE_step+0xcac>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 801913c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8019140:	2248      	movs	r2, #72	; 0x48
 8019142:	2100      	movs	r1, #0
 8019144:	4618      	mov	r0, r3
 8019146:	f013 fe0b 	bl	802cd60 <memset>
      Ss[0] = s[0];
 801914a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019152:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8019156:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 801915a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801915e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8019162:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8019166:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 801916a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801916e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8019172:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8019176:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 801917a:	2300      	movs	r3, #0
 801917c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019180:	e01e      	b.n	80191c0 <CSE_step+0xd58>
        Ss[iAcol_0] = sqrt(Ss[iAcol_0]);
 8019182:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019186:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801918a:	00db      	lsls	r3, r3, #3
 801918c:	4413      	add	r3, r2
 801918e:	ed93 7b00 	vldr	d7, [r3]
 8019192:	eeb0 0a47 	vmov.f32	s0, s14
 8019196:	eef0 0a67 	vmov.f32	s1, s15
 801919a:	f013 ff99 	bl	802d0d0 <sqrt>
 801919e:	eeb0 7a40 	vmov.f32	s14, s0
 80191a2:	eef0 7a60 	vmov.f32	s15, s1
 80191a6:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80191aa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80191ae:	00db      	lsls	r3, r3, #3
 80191b0:	4413      	add	r3, r2
 80191b2:	ed83 7b00 	vstr	d7, [r3]
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80191b6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80191ba:	3301      	adds	r3, #1
 80191bc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80191c0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80191c4:	2b08      	cmp	r3, #8
 80191c6:	dddc      	ble.n	8019182 <CSE_step+0xd1a>
      }

      iAcol_0 = 0;
 80191c8:	2300      	movs	r3, #0
 80191ca:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80191ce:	2300      	movs	r3, #0
 80191d0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80191d4:	e0b4      	b.n	8019340 <CSE_step+0xed8>
        coffset = 0;
 80191d6:	2300      	movs	r3, #0
 80191d8:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 80191dc:	2300      	movs	r3, #0
 80191de:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80191e2:	e09e      	b.n	8019322 <CSE_step+0xeba>
          R_tmp = coffset + iAcol;
 80191e4:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80191e8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80191ec:	4413      	add	r3, r2
 80191ee:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R[R_tmp] = 0.0;
 80191f2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80191f6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80191fa:	00db      	lsls	r3, r3, #3
 80191fc:	18d1      	adds	r1, r2, r3
 80191fe:	f04f 0200 	mov.w	r2, #0
 8019202:	f04f 0300 	mov.w	r3, #0
 8019206:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0] * R_0[aoffset];
 801920a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801920e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8019212:	00db      	lsls	r3, r3, #3
 8019214:	4413      	add	r3, r2
 8019216:	e9d3 8900 	ldrd	r8, r9, [r3]
 801921a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801921e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019222:	00db      	lsls	r3, r3, #3
 8019224:	4413      	add	r3, r2
 8019226:	e9d3 0100 	ldrd	r0, r1, [r3]
 801922a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801922e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019232:	00db      	lsls	r3, r3, #3
 8019234:	4413      	add	r3, r2
 8019236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801923a:	f7e7 f9cf 	bl	80005dc <__aeabi_dmul>
 801923e:	4602      	mov	r2, r0
 8019240:	460b      	mov	r3, r1
 8019242:	4640      	mov	r0, r8
 8019244:	4649      	mov	r1, r9
 8019246:	f7e7 f813 	bl	8000270 <__adddf3>
 801924a:	4602      	mov	r2, r0
 801924c:	460b      	mov	r3, r1
 801924e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8019252:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8019256:	00c9      	lsls	r1, r1, #3
 8019258:	4401      	add	r1, r0
 801925a:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 1] * R_0[aoffset + 3];
 801925e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019262:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8019266:	00db      	lsls	r3, r3, #3
 8019268:	4413      	add	r3, r2
 801926a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801926e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019272:	3301      	adds	r3, #1
 8019274:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019278:	00db      	lsls	r3, r3, #3
 801927a:	4413      	add	r3, r2
 801927c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019280:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019284:	3303      	adds	r3, #3
 8019286:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801928a:	00db      	lsls	r3, r3, #3
 801928c:	4413      	add	r3, r2
 801928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019292:	f7e7 f9a3 	bl	80005dc <__aeabi_dmul>
 8019296:	4602      	mov	r2, r0
 8019298:	460b      	mov	r3, r1
 801929a:	4640      	mov	r0, r8
 801929c:	4649      	mov	r1, r9
 801929e:	f7e6 ffe7 	bl	8000270 <__adddf3>
 80192a2:	4602      	mov	r2, r0
 80192a4:	460b      	mov	r3, r1
 80192a6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80192aa:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80192ae:	00c9      	lsls	r1, r1, #3
 80192b0:	4401      	add	r1, r0
 80192b2:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 2] * R_0[aoffset + 6];
 80192b6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80192ba:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80192be:	00db      	lsls	r3, r3, #3
 80192c0:	4413      	add	r3, r2
 80192c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80192c6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80192ca:	3302      	adds	r3, #2
 80192cc:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80192d0:	00db      	lsls	r3, r3, #3
 80192d2:	4413      	add	r3, r2
 80192d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80192d8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80192dc:	3306      	adds	r3, #6
 80192de:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80192e2:	00db      	lsls	r3, r3, #3
 80192e4:	4413      	add	r3, r2
 80192e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ea:	f7e7 f977 	bl	80005dc <__aeabi_dmul>
 80192ee:	4602      	mov	r2, r0
 80192f0:	460b      	mov	r3, r1
 80192f2:	4640      	mov	r0, r8
 80192f4:	4649      	mov	r1, r9
 80192f6:	f7e6 ffbb 	bl	8000270 <__adddf3>
 80192fa:	4602      	mov	r2, r0
 80192fc:	460b      	mov	r3, r1
 80192fe:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8019302:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8019306:	00c9      	lsls	r1, r1, #3
 8019308:	4401      	add	r1, r0
 801930a:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 801930e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019312:	3303      	adds	r3, #3
 8019314:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8019318:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801931c:	3301      	adds	r3, #1
 801931e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8019322:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019326:	2b02      	cmp	r3, #2
 8019328:	f77f af5c 	ble.w	80191e4 <CSE_step+0xd7c>
        }

        iAcol_0 += 3;
 801932c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019330:	3303      	adds	r3, #3
 8019332:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8019336:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801933a:	3301      	adds	r3, #1
 801933c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019340:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019344:	2b02      	cmp	r3, #2
 8019346:	f77f af46 	ble.w	80191d6 <CSE_step+0xd6e>
      }

      errorCondition = true;
 801934a:	2301      	movs	r3, #1
 801934c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      iAcol = 0;
 8019350:	2300      	movs	r3, #0
 8019352:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
      exitg2 = false;
 8019356:	2300      	movs	r3, #0
 8019358:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 801935c:	e042      	b.n	80193e4 <CSE_step+0xf7c>
        int32_T exitg1;
        iAcol_0 = iAcol + 1;
 801935e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019362:	3301      	adds	r3, #1
 8019364:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
        do {
          exitg1 = 0;
 8019368:	2300      	movs	r3, #0
 801936a:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          if (iAcol_0 + 1 < 4) {
 801936e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019372:	2b02      	cmp	r3, #2
 8019374:	dc23      	bgt.n	80193be <CSE_step+0xf56>
            if (!(R[3 * iAcol + iAcol_0] == 0.0)) {
 8019376:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801937a:	4613      	mov	r3, r2
 801937c:	005b      	lsls	r3, r3, #1
 801937e:	441a      	add	r2, r3
 8019380:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019384:	4413      	add	r3, r2
 8019386:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801938a:	00db      	lsls	r3, r3, #3
 801938c:	4413      	add	r3, r2
 801938e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019392:	f04f 0200 	mov.w	r2, #0
 8019396:	f04f 0300 	mov.w	r3, #0
 801939a:	f7e7 fb87 	bl	8000aac <__aeabi_dcmpeq>
 801939e:	4603      	mov	r3, r0
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d106      	bne.n	80193b2 <CSE_step+0xf4a>
              errorCondition = false;
 80193a4:	2300      	movs	r3, #0
 80193a6:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
              exitg1 = 1;
 80193aa:	2301      	movs	r3, #1
 80193ac:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 80193b0:	e00d      	b.n	80193ce <CSE_step+0xf66>
            } else {
              iAcol_0++;
 80193b2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80193b6:	3301      	adds	r3, #1
 80193b8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80193bc:	e007      	b.n	80193ce <CSE_step+0xf66>
            }
          } else {
            iAcol++;
 80193be:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80193c2:	3301      	adds	r3, #1
 80193c4:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            exitg1 = 2;
 80193c8:	2302      	movs	r3, #2
 80193ca:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          }
        } while (exitg1 == 0);
 80193ce:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d0c8      	beq.n	8019368 <CSE_step+0xf00>

        if (exitg1 == 1) {
 80193d6:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80193da:	2b01      	cmp	r3, #1
 80193dc:	d102      	bne.n	80193e4 <CSE_step+0xf7c>
          exitg2 = true;
 80193de:	2301      	movs	r3, #1
 80193e0:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 80193e4:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d103      	bne.n	80193f4 <CSE_step+0xf8c>
 80193ec:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80193f0:	2b02      	cmp	r3, #2
 80193f2:	ddb4      	ble.n	801935e <CSE_step+0xef6>
        }
      }

      if (!errorCondition) {
 80193f4:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d110      	bne.n	801941e <CSE_step+0xfb6>
        memcpy(&R_0[0], &R[0], 9U * sizeof(real_T));
 80193fc:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8019400:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8019404:	2248      	movs	r2, #72	; 0x48
 8019406:	4618      	mov	r0, r3
 8019408:	f013 fc9c 	bl	802cd44 <memcpy>
        qr_5a2P8Gh6(R_0, tempY_0, R);
 801940c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019410:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8019414:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8019418:	4618      	mov	r0, r3
 801941a:	f002 fd7d 	bl	801bf18 <qr_5a2P8Gh6>
      }
    }

    iAcol_0 = 0;
 801941e:	2300      	movs	r3, #0
 8019420:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8019424:	2300      	movs	r3, #0
 8019426:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 801942a:	e062      	b.n	80194f2 <CSE_step+0x108a>
 801942c:	2001ded0 	.word	0x2001ded0
      CSE_DW.P[iAcol_0] = R[iAcol];
 8019430:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019434:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019438:	00db      	lsls	r3, r3, #3
 801943a:	4413      	add	r3, r2
 801943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019440:	48a5      	ldr	r0, [pc, #660]	; (80196d8 <CSE_step+0x1270>)
 8019442:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019446:	00c9      	lsls	r1, r1, #3
 8019448:	4401      	add	r1, r0
 801944a:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 801944e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019452:	3303      	adds	r3, #3
 8019454:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019458:	1c51      	adds	r1, r2, #1
 801945a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801945e:	00db      	lsls	r3, r3, #3
 8019460:	4413      	add	r3, r2
 8019462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019466:	489c      	ldr	r0, [pc, #624]	; (80196d8 <CSE_step+0x1270>)
 8019468:	00c9      	lsls	r1, r1, #3
 801946a:	4401      	add	r1, r0
 801946c:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8019470:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019474:	3306      	adds	r3, #6
 8019476:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 801947a:	1c91      	adds	r1, r2, #2
 801947c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019480:	00db      	lsls	r3, r3, #3
 8019482:	4413      	add	r3, r2
 8019484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019488:	4893      	ldr	r0, [pc, #588]	; (80196d8 <CSE_step+0x1270>)
 801948a:	00c9      	lsls	r1, r1, #3
 801948c:	4401      	add	r1, r0
 801948e:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.x[iAcol] += K[iAcol] * s_0;
 8019492:	4a91      	ldr	r2, [pc, #580]	; (80196d8 <CSE_step+0x1270>)
 8019494:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019498:	3309      	adds	r3, #9
 801949a:	00db      	lsls	r3, r3, #3
 801949c:	4413      	add	r3, r2
 801949e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80194a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80194a6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80194aa:	00db      	lsls	r3, r3, #3
 80194ac:	4413      	add	r3, r2
 80194ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80194b2:	f107 0308 	add.w	r3, r7, #8
 80194b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194ba:	f7e7 f88f 	bl	80005dc <__aeabi_dmul>
 80194be:	4602      	mov	r2, r0
 80194c0:	460b      	mov	r3, r1
 80194c2:	4640      	mov	r0, r8
 80194c4:	4649      	mov	r1, r9
 80194c6:	f7e6 fed3 	bl	8000270 <__adddf3>
 80194ca:	4602      	mov	r2, r0
 80194cc:	460b      	mov	r3, r1
 80194ce:	4882      	ldr	r0, [pc, #520]	; (80196d8 <CSE_step+0x1270>)
 80194d0:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 80194d4:	3109      	adds	r1, #9
 80194d6:	00c9      	lsls	r1, r1, #3
 80194d8:	4401      	add	r1, r0
 80194da:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 80194de:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80194e2:	3303      	adds	r3, #3
 80194e4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80194e8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80194ec:	3301      	adds	r3, #1
 80194ee:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80194f2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80194f6:	2b02      	cmp	r3, #2
 80194f8:	dd9a      	ble.n	8019430 <CSE_step+0xfc8>
    }
  }

  CSE_Y.soc = CSE_DW.x[1] / CSE_DW.x[2];
 80194fa:	4b77      	ldr	r3, [pc, #476]	; (80196d8 <CSE_step+0x1270>)
 80194fc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8019500:	4b75      	ldr	r3, [pc, #468]	; (80196d8 <CSE_step+0x1270>)
 8019502:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8019506:	f7e7 f993 	bl	8000830 <__aeabi_ddiv>
 801950a:	4602      	mov	r2, r0
 801950c:	460b      	mov	r3, r1
 801950e:	4973      	ldr	r1, [pc, #460]	; (80196dc <CSE_step+0x1274>)
 8019510:	e9c1 2300 	strd	r2, r3, [r1]
  CSE_Y.capacity = CSE_DW.x[2];
 8019514:	4b70      	ldr	r3, [pc, #448]	; (80196d8 <CSE_step+0x1270>)
 8019516:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 801951a:	4970      	ldr	r1, [pc, #448]	; (80196dc <CSE_step+0x1274>)
 801951c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  CSE_S_x(CSE_DW.x, tempY);
 8019520:	f107 0310 	add.w	r3, r7, #16
 8019524:	4619      	mov	r1, r3
 8019526:	486e      	ldr	r0, [pc, #440]	; (80196e0 <CSE_step+0x1278>)
 8019528:	f7fe fb28 	bl	8017b7c <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 801952c:	2300      	movs	r3, #0
 801952e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019532:	e034      	b.n	801959e <CSE_step+0x1136>
    s_0 = 0.0017320508075688774 * CSE_DW.P[iAcol_0];
 8019534:	4a68      	ldr	r2, [pc, #416]	; (80196d8 <CSE_step+0x1270>)
 8019536:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801953a:	00db      	lsls	r3, r3, #3
 801953c:	4413      	add	r3, r2
 801953e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019542:	a363      	add	r3, pc, #396	; (adr r3, 80196d0 <CSE_step+0x1268>)
 8019544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019548:	f7e7 f848 	bl	80005dc <__aeabi_dmul>
 801954c:	4602      	mov	r2, r0
 801954e:	460b      	mov	r3, r1
 8019550:	f107 0108 	add.w	r1, r7, #8
 8019554:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0] = s_0;
 8019558:	f107 0308 	add.w	r3, r7, #8
 801955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019560:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019564:	00c9      	lsls	r1, r1, #3
 8019566:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 801956a:	4401      	add	r1, r0
 801956c:	39d0      	subs	r1, #208	; 0xd0
 801956e:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 9] = -s_0;
 8019572:	f107 0308 	add.w	r3, r7, #8
 8019576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801957a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 801957e:	3109      	adds	r1, #9
 8019580:	4614      	mov	r4, r2
 8019582:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8019586:	00cb      	lsls	r3, r1, #3
 8019588:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 801958c:	4413      	add	r3, r2
 801958e:	3bd0      	subs	r3, #208	; 0xd0
 8019590:	e9c3 4500 	strd	r4, r5, [r3]
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8019594:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019598:	3301      	adds	r3, #1
 801959a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801959e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80195a2:	2b08      	cmp	r3, #8
 80195a4:	ddc6      	ble.n	8019534 <CSE_step+0x10cc>
  }

  iAcol_0 = 0;
 80195a6:	2300      	movs	r3, #0
 80195a8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 80195ac:	2300      	movs	r3, #0
 80195ae:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80195b2:	e058      	b.n	8019666 <CSE_step+0x11fe>
    X2state[iAcol_0] += CSE_DW.x[0];
 80195b4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80195b8:	00db      	lsls	r3, r3, #3
 80195ba:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 80195be:	4413      	add	r3, r2
 80195c0:	3bd0      	subs	r3, #208	; 0xd0
 80195c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80195c6:	4b44      	ldr	r3, [pc, #272]	; (80196d8 <CSE_step+0x1270>)
 80195c8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80195cc:	f7e6 fe50 	bl	8000270 <__adddf3>
 80195d0:	4602      	mov	r2, r0
 80195d2:	460b      	mov	r3, r1
 80195d4:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80195d8:	00c9      	lsls	r1, r1, #3
 80195da:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80195de:	4401      	add	r1, r0
 80195e0:	39d0      	subs	r1, #208	; 0xd0
 80195e2:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 1] += CSE_DW.x[1];
 80195e6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80195ea:	3301      	adds	r3, #1
 80195ec:	00db      	lsls	r3, r3, #3
 80195ee:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 80195f2:	4413      	add	r3, r2
 80195f4:	3bd0      	subs	r3, #208	; 0xd0
 80195f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80195fa:	4b37      	ldr	r3, [pc, #220]	; (80196d8 <CSE_step+0x1270>)
 80195fc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8019600:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8019604:	3401      	adds	r4, #1
 8019606:	f7e6 fe33 	bl	8000270 <__adddf3>
 801960a:	4602      	mov	r2, r0
 801960c:	460b      	mov	r3, r1
 801960e:	00e1      	lsls	r1, r4, #3
 8019610:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8019614:	4401      	add	r1, r0
 8019616:	39d0      	subs	r1, #208	; 0xd0
 8019618:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 2] += CSE_DW.x[2];
 801961c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019620:	3302      	adds	r3, #2
 8019622:	00db      	lsls	r3, r3, #3
 8019624:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8019628:	4413      	add	r3, r2
 801962a:	3bd0      	subs	r3, #208	; 0xd0
 801962c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019630:	4b29      	ldr	r3, [pc, #164]	; (80196d8 <CSE_step+0x1270>)
 8019632:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8019636:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 801963a:	3402      	adds	r4, #2
 801963c:	f7e6 fe18 	bl	8000270 <__adddf3>
 8019640:	4602      	mov	r2, r0
 8019642:	460b      	mov	r3, r1
 8019644:	00e1      	lsls	r1, r4, #3
 8019646:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 801964a:	4401      	add	r1, r0
 801964c:	39d0      	subs	r1, #208	; 0xd0
 801964e:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 8019652:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019656:	3303      	adds	r3, #3
 8019658:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 801965c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019660:	3301      	adds	r3, #1
 8019662:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019666:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801966a:	2b05      	cmp	r3, #5
 801966c:	dda2      	ble.n	80195b4 <CSE_step+0x114c>
  }

  iAcol_0 = 0;
 801966e:	2300      	movs	r3, #0
 8019670:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8019674:	2300      	movs	r3, #0
 8019676:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 801967a:	e018      	b.n	80196ae <CSE_step+0x1246>
    CSE_S_x(&X2state[iAcol_0], &Y2[iAcol_0]);
 801967c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8019680:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019684:	00db      	lsls	r3, r3, #3
 8019686:	18d0      	adds	r0, r2, r3
 8019688:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 801968c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019690:	00db      	lsls	r3, r3, #3
 8019692:	4413      	add	r3, r2
 8019694:	4619      	mov	r1, r3
 8019696:	f7fe fa71 	bl	8017b7c <CSE_S_x>
    iAcol_0 += 3;
 801969a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801969e:	3303      	adds	r3, #3
 80196a0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 80196a4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80196a8:	3301      	adds	r3, #1
 80196aa:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80196ae:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80196b2:	2b05      	cmp	r3, #5
 80196b4:	dde2      	ble.n	801967c <CSE_step+0x1214>
  }

  CSE_S_x(CSE_DW.x, tempY);
 80196b6:	f107 0310 	add.w	r3, r7, #16
 80196ba:	4619      	mov	r1, r3
 80196bc:	4808      	ldr	r0, [pc, #32]	; (80196e0 <CSE_step+0x1278>)
 80196be:	f7fe fa5d 	bl	8017b7c <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 80196c2:	2300      	movs	r3, #0
 80196c4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80196c8:	e021      	b.n	801970e <CSE_step+0x12a6>
 80196ca:	bf00      	nop
 80196cc:	f3af 8000 	nop.w
 80196d0:	64b487da 	.word	0x64b487da
 80196d4:	3f5c60bf 	.word	0x3f5c60bf
 80196d8:	2001b380 	.word	0x2001b380
 80196dc:	2001b3f0 	.word	0x2001b3f0
 80196e0:	2001b3c8 	.word	0x2001b3c8
    C[iAcol_0] = CSE_DW.x[iAcol_0];
 80196e4:	4ab8      	ldr	r2, [pc, #736]	; (80199c8 <CSE_step+0x1560>)
 80196e6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80196ea:	3309      	adds	r3, #9
 80196ec:	00db      	lsls	r3, r3, #3
 80196ee:	4413      	add	r3, r2
 80196f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196f4:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80196f8:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80196fc:	00c9      	lsls	r1, r1, #3
 80196fe:	4401      	add	r1, r0
 8019700:	e9c1 2300 	strd	r2, r3, [r1]
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8019704:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019708:	3301      	adds	r3, #1
 801970a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801970e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019712:	2b02      	cmp	r3, #2
 8019714:	dde6      	ble.n	80196e4 <CSE_step+0x127c>
  }

  UTMeanCovSqrt_C2vgLQ4W(Wmean, Wcov, -999999.0, tempY, Y2, C, X2state, CSE_DW.x,
 8019716:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 801971a:	f107 0210 	add.w	r2, r7, #16
 801971e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8019722:	9304      	str	r3, [sp, #16]
 8019724:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8019728:	9303      	str	r3, [sp, #12]
 801972a:	4ba8      	ldr	r3, [pc, #672]	; (80199cc <CSE_step+0x1564>)
 801972c:	9302      	str	r3, [sp, #8]
 801972e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8019732:	9301      	str	r3, [sp, #4]
 8019734:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019738:	9300      	str	r3, [sp, #0]
 801973a:	460b      	mov	r3, r1
 801973c:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 80199c0 <CSE_step+0x1558>
 8019740:	49a3      	ldr	r1, [pc, #652]	; (80199d0 <CSE_step+0x1568>)
 8019742:	48a4      	ldr	r0, [pc, #656]	; (80199d4 <CSE_step+0x156c>)
 8019744:	f000 f9b8 	bl	8019ab8 <UTMeanCovSqrt_C2vgLQ4W>
    Ss, R);
  memset(&R[0], 0, 9U * sizeof(real_T));
 8019748:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801974c:	2248      	movs	r2, #72	; 0x48
 801974e:	2100      	movs	r1, #0
 8019750:	4618      	mov	r0, r3
 8019752:	f013 fb05 	bl	802cd60 <memset>
  R[0] = 1.0;
 8019756:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 801975a:	f04f 0200 	mov.w	r2, #0
 801975e:	4b9e      	ldr	r3, [pc, #632]	; (80199d8 <CSE_step+0x1570>)
 8019760:	e9c1 2300 	strd	r2, r3, [r1]
  R[4] = 1.0;
 8019764:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8019768:	f04f 0200 	mov.w	r2, #0
 801976c:	4b9a      	ldr	r3, [pc, #616]	; (80199d8 <CSE_step+0x1570>)
 801976e:	e9c1 2308 	strd	r2, r3, [r1, #32]
  R[8] = 1.0;
 8019772:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8019776:	f04f 0200 	mov.w	r2, #0
 801977a:	4b97      	ldr	r3, [pc, #604]	; (80199d8 <CSE_step+0x1570>)
 801977c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8019780:	2300      	movs	r3, #0
 8019782:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019786:	e07e      	b.n	8019886 <CSE_step+0x141e>
    coffset = iAcol_0 * 3;
 8019788:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 801978c:	4613      	mov	r3, r2
 801978e:	005b      	lsls	r3, r3, #1
 8019790:	4413      	add	r3, r2
 8019792:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8019796:	2300      	movs	r3, #0
 8019798:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 801979c:	e06a      	b.n	8019874 <CSE_step+0x140c>
      aoffset = iAcol * 3;
 801979e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80197a2:	4613      	mov	r3, r2
 80197a4:	005b      	lsls	r3, r3, #1
 80197a6:	4413      	add	r3, r2
 80197a8:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 80197ac:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80197b0:	3301      	adds	r3, #1
 80197b2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80197b6:	00db      	lsls	r3, r3, #3
 80197b8:	4413      	add	r3, r2
 80197ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80197be:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80197c2:	3303      	adds	r3, #3
 80197c4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80197c8:	00db      	lsls	r3, r3, #3
 80197ca:	4413      	add	r3, r2
 80197cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197d0:	f7e6 ff04 	bl	80005dc <__aeabi_dmul>
 80197d4:	4602      	mov	r2, r0
 80197d6:	460b      	mov	r3, r1
 80197d8:	4614      	mov	r4, r2
 80197da:	461d      	mov	r5, r3
 80197dc:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80197e0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80197e4:	00db      	lsls	r3, r3, #3
 80197e6:	4413      	add	r3, r2
 80197e8:	e9d3 0100 	ldrd	r0, r1, [r3]
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 80197ec:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80197f0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80197f4:	00db      	lsls	r3, r3, #3
 80197f6:	4413      	add	r3, r2
 80197f8:	e9d3 2300 	ldrd	r2, r3, [r3]
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 80197fc:	f7e6 feee 	bl	80005dc <__aeabi_dmul>
 8019800:	4602      	mov	r2, r0
 8019802:	460b      	mov	r3, r1
 8019804:	4620      	mov	r0, r4
 8019806:	4629      	mov	r1, r5
 8019808:	f7e6 fd32 	bl	8000270 <__adddf3>
 801980c:	4602      	mov	r2, r0
 801980e:	460b      	mov	r3, r1
 8019810:	4690      	mov	r8, r2
 8019812:	4699      	mov	r9, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8019814:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019818:	3302      	adds	r3, #2
 801981a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801981e:	00db      	lsls	r3, r3, #3
 8019820:	4413      	add	r3, r2
 8019822:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019826:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801982a:	3306      	adds	r3, #6
 801982c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019830:	00db      	lsls	r3, r3, #3
 8019832:	4413      	add	r3, r2
 8019834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019838:	f7e6 fed0 	bl	80005dc <__aeabi_dmul>
 801983c:	4602      	mov	r2, r0
 801983e:	460b      	mov	r3, r1
 8019840:	4610      	mov	r0, r2
 8019842:	4619      	mov	r1, r3
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8019844:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8019848:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801984c:	18d4      	adds	r4, r2, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 801984e:	4602      	mov	r2, r0
 8019850:	460b      	mov	r3, r1
 8019852:	4640      	mov	r0, r8
 8019854:	4649      	mov	r1, r9
 8019856:	f7e6 fd0b 	bl	8000270 <__adddf3>
 801985a:	4602      	mov	r2, r0
 801985c:	460b      	mov	r3, r1
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 801985e:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8019862:	00e1      	lsls	r1, r4, #3
 8019864:	4401      	add	r1, r0
 8019866:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801986a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801986e:	3301      	adds	r3, #1
 8019870:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019874:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019878:	2b02      	cmp	r3, #2
 801987a:	dd90      	ble.n	801979e <CSE_step+0x1336>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 801987c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019880:	3301      	adds	r3, #1
 8019882:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019886:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801988a:	2b02      	cmp	r3, #2
 801988c:	f77f af7c 	ble.w	8019788 <CSE_step+0x1320>
    }
  }

  iAcol_0 = 0;
 8019890:	2300      	movs	r3, #0
 8019892:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  iAcol = 0;
 8019896:	2300      	movs	r3, #0
 8019898:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 801989c:	2300      	movs	r3, #0
 801989e:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80198a2:	e077      	b.n	8019994 <CSE_step+0x152c>
    Y2[iAcol_0] = R_0[iAcol];
 80198a4:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80198a8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80198ac:	00db      	lsls	r3, r3, #3
 80198ae:	4413      	add	r3, r2
 80198b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198b4:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80198b8:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80198bc:	00c9      	lsls	r1, r1, #3
 80198be:	4401      	add	r1, r0
 80198c0:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 3] = CSE_P.Q_Value[coffset];
 80198c4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80198c8:	1cd9      	adds	r1, r3, #3
 80198ca:	4a44      	ldr	r2, [pc, #272]	; (80199dc <CSE_step+0x1574>)
 80198cc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80198d0:	3344      	adds	r3, #68	; 0x44
 80198d2:	00db      	lsls	r3, r3, #3
 80198d4:	4413      	add	r3, r2
 80198d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198da:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80198de:	00c9      	lsls	r1, r1, #3
 80198e0:	4401      	add	r1, r0
 80198e2:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 1] = R_0[iAcol + 1];
 80198e6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80198ea:	3301      	adds	r3, #1
 80198ec:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80198f0:	1c51      	adds	r1, r2, #1
 80198f2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80198f6:	00db      	lsls	r3, r3, #3
 80198f8:	4413      	add	r3, r2
 80198fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198fe:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019902:	00c9      	lsls	r1, r1, #3
 8019904:	4401      	add	r1, r0
 8019906:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 4] = CSE_P.Q_Value[coffset + 3];
 801990a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801990e:	3303      	adds	r3, #3
 8019910:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019914:	1d11      	adds	r1, r2, #4
 8019916:	4a31      	ldr	r2, [pc, #196]	; (80199dc <CSE_step+0x1574>)
 8019918:	3344      	adds	r3, #68	; 0x44
 801991a:	00db      	lsls	r3, r3, #3
 801991c:	4413      	add	r3, r2
 801991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019922:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019926:	00c9      	lsls	r1, r1, #3
 8019928:	4401      	add	r1, r0
 801992a:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 2] = R_0[iAcol + 2];
 801992e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019932:	3302      	adds	r3, #2
 8019934:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019938:	1c91      	adds	r1, r2, #2
 801993a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801993e:	00db      	lsls	r3, r3, #3
 8019940:	4413      	add	r3, r2
 8019942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019946:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 801994a:	00c9      	lsls	r1, r1, #3
 801994c:	4401      	add	r1, r0
 801994e:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 5] = CSE_P.Q_Value[coffset + 6];
 8019952:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019956:	3306      	adds	r3, #6
 8019958:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 801995c:	1d51      	adds	r1, r2, #5
 801995e:	4a1f      	ldr	r2, [pc, #124]	; (80199dc <CSE_step+0x1574>)
 8019960:	3344      	adds	r3, #68	; 0x44
 8019962:	00db      	lsls	r3, r3, #3
 8019964:	4413      	add	r3, r2
 8019966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801996a:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 801996e:	00c9      	lsls	r1, r1, #3
 8019970:	4401      	add	r1, r0
 8019972:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 6;
 8019976:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801997a:	3306      	adds	r3, #6
 801997c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    iAcol += 3;
 8019980:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019984:	3303      	adds	r3, #3
 8019986:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 801998a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801998e:	3301      	adds	r3, #1
 8019990:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8019994:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019998:	2b02      	cmp	r3, #2
 801999a:	dd83      	ble.n	80198a4 <CSE_step+0x143c>
  }

  qr_DvOBrgQi(Y2, X2state, R);
 801999c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80199a0:	f507 7108 	add.w	r1, r7, #544	; 0x220
 80199a4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80199a8:	4618      	mov	r0, r3
 80199aa:	f003 fa3d 	bl	801ce28 <qr_DvOBrgQi>
  iAcol_0 = 0;
 80199ae:	2300      	movs	r3, #0
 80199b0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 80199b4:	2300      	movs	r3, #0
 80199b6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80199ba:	e04c      	b.n	8019a56 <CSE_step+0x15ee>
 80199bc:	f3af 8000 	nop.w
 80199c0:	00000000 	.word	0x00000000
 80199c4:	c12e847e 	.word	0xc12e847e
 80199c8:	2001b380 	.word	0x2001b380
 80199cc:	2001b3c8 	.word	0x2001b3c8
 80199d0:	0802e070 	.word	0x0802e070
 80199d4:	0802e060 	.word	0x0802e060
 80199d8:	3ff00000 	.word	0x3ff00000
 80199dc:	20000088 	.word	0x20000088
    CSE_DW.P[iAcol_0] = R[iAcol];
 80199e0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80199e4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80199e8:	00db      	lsls	r3, r3, #3
 80199ea:	4413      	add	r3, r2
 80199ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199f0:	481e      	ldr	r0, [pc, #120]	; (8019a6c <CSE_step+0x1604>)
 80199f2:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80199f6:	00c9      	lsls	r1, r1, #3
 80199f8:	4401      	add	r1, r0
 80199fa:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 80199fe:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019a02:	3303      	adds	r3, #3
 8019a04:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019a08:	1c51      	adds	r1, r2, #1
 8019a0a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019a0e:	00db      	lsls	r3, r3, #3
 8019a10:	4413      	add	r3, r2
 8019a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a16:	4815      	ldr	r0, [pc, #84]	; (8019a6c <CSE_step+0x1604>)
 8019a18:	00c9      	lsls	r1, r1, #3
 8019a1a:	4401      	add	r1, r0
 8019a1c:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8019a20:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019a24:	3306      	adds	r3, #6
 8019a26:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019a2a:	1c91      	adds	r1, r2, #2
 8019a2c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019a30:	00db      	lsls	r3, r3, #3
 8019a32:	4413      	add	r3, r2
 8019a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a38:	480c      	ldr	r0, [pc, #48]	; (8019a6c <CSE_step+0x1604>)
 8019a3a:	00c9      	lsls	r1, r1, #3
 8019a3c:	4401      	add	r1, r0
 8019a3e:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 8019a42:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019a46:	3303      	adds	r3, #3
 8019a48:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8019a4c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019a50:	3301      	adds	r3, #1
 8019a52:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019a56:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019a5a:	2b02      	cmp	r3, #2
 8019a5c:	ddc0      	ble.n	80199e0 <CSE_step+0x1578>
  }
}
 8019a5e:	bf00      	nop
 8019a60:	bf00      	nop
 8019a62:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 8019a66:	46bd      	mov	sp, r7
 8019a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a6c:	2001b380 	.word	0x2001b380

08019a70 <CSE_initialize>:

void CSE_initialize(void)
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN(sizeof(real_T));
 8019a74:	2008      	movs	r0, #8
 8019a76:	f004 fd59 	bl	801e52c <rt_InitInfAndNaN>
  memcpy(&CSE_DW.P[0], &CSE_P.DataStoreMemoryP_InitialValue[0], 9U * sizeof
 8019a7a:	2248      	movs	r2, #72	; 0x48
 8019a7c:	490b      	ldr	r1, [pc, #44]	; (8019aac <CSE_initialize+0x3c>)
 8019a7e:	480c      	ldr	r0, [pc, #48]	; (8019ab0 <CSE_initialize+0x40>)
 8019a80:	f013 f960 	bl	802cd44 <memcpy>
         (real_T));
  CSE_DW.x[0] = CSE_P.DataStoreMemoryx_InitialValue[0];
 8019a84:	4b0b      	ldr	r3, [pc, #44]	; (8019ab4 <CSE_initialize+0x44>)
 8019a86:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 8019a8a:	4909      	ldr	r1, [pc, #36]	; (8019ab0 <CSE_initialize+0x40>)
 8019a8c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  CSE_DW.x[1] = CSE_P.DataStoreMemoryx_InitialValue[1];
 8019a90:	4b08      	ldr	r3, [pc, #32]	; (8019ab4 <CSE_initialize+0x44>)
 8019a92:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8019a96:	4906      	ldr	r1, [pc, #24]	; (8019ab0 <CSE_initialize+0x40>)
 8019a98:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  CSE_DW.x[2] = CSE_P.DataStoreMemoryx_InitialValue[2];
 8019a9c:	4b05      	ldr	r3, [pc, #20]	; (8019ab4 <CSE_initialize+0x44>)
 8019a9e:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8019aa2:	4903      	ldr	r1, [pc, #12]	; (8019ab0 <CSE_initialize+0x40>)
 8019aa4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 8019aa8:	bf00      	nop
 8019aaa:	bd80      	pop	{r7, pc}
 8019aac:	200002f8 	.word	0x200002f8
 8019ab0:	2001b380 	.word	0x2001b380
 8019ab4:	20000088 	.word	0x20000088

08019ab8 <UTMeanCovSqrt_C2vgLQ4W>:
#include "qr_5a2P8Gh6.h"

void UTMeanCovSqrt_C2vgLQ4W(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1[3], real_T Y2[18], const real_T X1[3],
  real_T X2[18], real_T Ymean[3], real_T Sy[9], real_T Pxy[9])
{
 8019ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019abc:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	f107 0414 	add.w	r4, r7, #20
 8019ac6:	6020      	str	r0, [r4, #0]
 8019ac8:	f107 0010 	add.w	r0, r7, #16
 8019acc:	6001      	str	r1, [r0, #0]
 8019ace:	f107 0108 	add.w	r1, r7, #8
 8019ad2:	ed81 0b00 	vstr	d0, [r1]
 8019ad6:	1d39      	adds	r1, r7, #4
 8019ad8:	600a      	str	r2, [r1, #0]
 8019ada:	463a      	mov	r2, r7
 8019adc:	6013      	str	r3, [r2, #0]
  int32_T i;
  int32_T iAcol;
  int32_T i_0;
  int32_T i_1;
  int32_T kk;
  Ymean[0] = Y1[0] * meanWeights[0];
 8019ade:	1d3b      	adds	r3, r7, #4
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019ae6:	f107 0314 	add.w	r3, r7, #20
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019af0:	f7e6 fd74 	bl	80005dc <__aeabi_dmul>
 8019af4:	4602      	mov	r2, r0
 8019af6:	460b      	mov	r3, r1
 8019af8:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019afc:	e9c1 2300 	strd	r2, r3, [r1]
  Ymean[1] = meanWeights[0] * Y1[1];
 8019b00:	f107 0314 	add.w	r3, r7, #20
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019b0a:	1d3b      	adds	r3, r7, #4
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	3308      	adds	r3, #8
 8019b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b14:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8019b18:	3408      	adds	r4, #8
 8019b1a:	f7e6 fd5f 	bl	80005dc <__aeabi_dmul>
 8019b1e:	4602      	mov	r2, r0
 8019b20:	460b      	mov	r3, r1
 8019b22:	e9c4 2300 	strd	r2, r3, [r4]
  Ymean[2] = meanWeights[0] * Y1[2];
 8019b26:	f107 0314 	add.w	r3, r7, #20
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019b30:	1d3b      	adds	r3, r7, #4
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	3310      	adds	r3, #16
 8019b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b3a:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8019b3e:	3410      	adds	r4, #16
 8019b40:	f7e6 fd4c 	bl	80005dc <__aeabi_dmul>
 8019b44:	4602      	mov	r2, r0
 8019b46:	460b      	mov	r3, r1
 8019b48:	e9c4 2300 	strd	r2, r3, [r4]
  iAcol = 0;
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8019b52:	2300      	movs	r3, #0
 8019b54:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8019b58:	e079      	b.n	8019c4e <UTMeanCovSqrt_C2vgLQ4W+0x196>
    Ymean[0] += Y2[iAcol] * meanWeights[1];
 8019b5a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019b5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8019b62:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8019b66:	00db      	lsls	r3, r3, #3
 8019b68:	463a      	mov	r2, r7
 8019b6a:	6812      	ldr	r2, [r2, #0]
 8019b6c:	4413      	add	r3, r2
 8019b6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019b72:	f107 0314 	add.w	r3, r7, #20
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	3308      	adds	r3, #8
 8019b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b7e:	f7e6 fd2d 	bl	80005dc <__aeabi_dmul>
 8019b82:	4602      	mov	r2, r0
 8019b84:	460b      	mov	r3, r1
 8019b86:	4620      	mov	r0, r4
 8019b88:	4629      	mov	r1, r5
 8019b8a:	f7e6 fb71 	bl	8000270 <__adddf3>
 8019b8e:	4602      	mov	r2, r0
 8019b90:	460b      	mov	r3, r1
 8019b92:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019b96:	e9c1 2300 	strd	r2, r3, [r1]
    Ymean[1] += Y2[iAcol + 1] * meanWeights[1];
 8019b9a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019b9e:	3308      	adds	r3, #8
 8019ba0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8019ba4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8019ba8:	3301      	adds	r3, #1
 8019baa:	00db      	lsls	r3, r3, #3
 8019bac:	463a      	mov	r2, r7
 8019bae:	6812      	ldr	r2, [r2, #0]
 8019bb0:	4413      	add	r3, r2
 8019bb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019bb6:	f107 0314 	add.w	r3, r7, #20
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	3308      	adds	r3, #8
 8019bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bc2:	f7e6 fd0b 	bl	80005dc <__aeabi_dmul>
 8019bc6:	4602      	mov	r2, r0
 8019bc8:	460b      	mov	r3, r1
 8019bca:	4610      	mov	r0, r2
 8019bcc:	4619      	mov	r1, r3
 8019bce:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019bd2:	f103 0608 	add.w	r6, r3, #8
 8019bd6:	4602      	mov	r2, r0
 8019bd8:	460b      	mov	r3, r1
 8019bda:	4620      	mov	r0, r4
 8019bdc:	4629      	mov	r1, r5
 8019bde:	f7e6 fb47 	bl	8000270 <__adddf3>
 8019be2:	4602      	mov	r2, r0
 8019be4:	460b      	mov	r3, r1
 8019be6:	e9c6 2300 	strd	r2, r3, [r6]
    Ymean[2] += Y2[iAcol + 2] * meanWeights[1];
 8019bea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019bee:	3310      	adds	r3, #16
 8019bf0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8019bf4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8019bf8:	3302      	adds	r3, #2
 8019bfa:	00db      	lsls	r3, r3, #3
 8019bfc:	463a      	mov	r2, r7
 8019bfe:	6812      	ldr	r2, [r2, #0]
 8019c00:	4413      	add	r3, r2
 8019c02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019c06:	f107 0314 	add.w	r3, r7, #20
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	3308      	adds	r3, #8
 8019c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c12:	f7e6 fce3 	bl	80005dc <__aeabi_dmul>
 8019c16:	4602      	mov	r2, r0
 8019c18:	460b      	mov	r3, r1
 8019c1a:	4610      	mov	r0, r2
 8019c1c:	4619      	mov	r1, r3
 8019c1e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019c22:	f103 0610 	add.w	r6, r3, #16
 8019c26:	4602      	mov	r2, r0
 8019c28:	460b      	mov	r3, r1
 8019c2a:	4620      	mov	r0, r4
 8019c2c:	4629      	mov	r1, r5
 8019c2e:	f7e6 fb1f 	bl	8000270 <__adddf3>
 8019c32:	4602      	mov	r2, r0
 8019c34:	460b      	mov	r3, r1
 8019c36:	e9c6 2300 	strd	r2, r3, [r6]
    iAcol += 3;
 8019c3a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8019c3e:	3303      	adds	r3, #3
 8019c40:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8019c44:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8019c48:	3301      	adds	r3, #1
 8019c4a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8019c4e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8019c52:	2b05      	cmp	r3, #5
 8019c54:	dd81      	ble.n	8019b5a <UTMeanCovSqrt_C2vgLQ4W+0xa2>
  }

  signOOM = Ymean[0] * OOM;
 8019c56:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c5e:	f107 0108 	add.w	r1, r7, #8
 8019c62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c66:	f7e6 fcb9 	bl	80005dc <__aeabi_dmul>
 8019c6a:	4602      	mov	r2, r0
 8019c6c:	460b      	mov	r3, r1
 8019c6e:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  scale = Y1[0] - signOOM;
 8019c72:	1d3b      	adds	r3, r7, #4
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019c7a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8019c7e:	f7e6 faf5 	bl	800026c <__aeabi_dsub>
 8019c82:	4602      	mov	r2, r0
 8019c84:	460b      	mov	r3, r1
 8019c86:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
  Ymean[0] = signOOM;
 8019c8a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019c8e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8019c92:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[0] = scale;
 8019c96:	1d3b      	adds	r3, r7, #4
 8019c98:	6819      	ldr	r1, [r3, #0]
 8019c9a:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8019c9e:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[1] * OOM;
 8019ca2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019ca6:	3308      	adds	r3, #8
 8019ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cac:	f107 0108 	add.w	r1, r7, #8
 8019cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cb4:	f7e6 fc92 	bl	80005dc <__aeabi_dmul>
 8019cb8:	4602      	mov	r2, r0
 8019cba:	460b      	mov	r3, r1
 8019cbc:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  absxk = Y1[1] - signOOM;
 8019cc0:	1d3b      	adds	r3, r7, #4
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	3308      	adds	r3, #8
 8019cc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019cca:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8019cce:	f7e6 facd 	bl	800026c <__aeabi_dsub>
 8019cd2:	4602      	mov	r2, r0
 8019cd4:	460b      	mov	r3, r1
 8019cd6:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
  Ymean[1] = signOOM;
 8019cda:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019cde:	f103 0108 	add.w	r1, r3, #8
 8019ce2:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8019ce6:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[1] = absxk;
 8019cea:	1d3b      	adds	r3, r7, #4
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	f103 0108 	add.w	r1, r3, #8
 8019cf2:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8019cf6:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[2] * OOM;
 8019cfa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019cfe:	3310      	adds	r3, #16
 8019d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d04:	f107 0108 	add.w	r1, r7, #8
 8019d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d0c:	f7e6 fc66 	bl	80005dc <__aeabi_dmul>
 8019d10:	4602      	mov	r2, r0
 8019d12:	460b      	mov	r3, r1
 8019d14:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  b_t = Y1[2] - signOOM;
 8019d18:	1d3b      	adds	r3, r7, #4
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	3310      	adds	r3, #16
 8019d1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019d22:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8019d26:	f7e6 faa1 	bl	800026c <__aeabi_dsub>
 8019d2a:	4602      	mov	r2, r0
 8019d2c:	460b      	mov	r3, r1
 8019d2e:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
  Ymean[2] = signOOM;
 8019d32:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019d36:	f103 0110 	add.w	r1, r3, #16
 8019d3a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8019d3e:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[2] = b_t;
 8019d42:	1d3b      	adds	r3, r7, #4
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	f103 0110 	add.w	r1, r3, #16
 8019d4a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8019d4e:	e9c1 2300 	strd	r2, r3, [r1]
  iAcol = 0;
 8019d52:	2300      	movs	r3, #0
 8019d54:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8019d58:	2300      	movs	r3, #0
 8019d5a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8019d5e:	e054      	b.n	8019e0a <UTMeanCovSqrt_C2vgLQ4W+0x352>
    Y2[iAcol] -= Ymean[0];
 8019d60:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8019d64:	00db      	lsls	r3, r3, #3
 8019d66:	463a      	mov	r2, r7
 8019d68:	6812      	ldr	r2, [r2, #0]
 8019d6a:	4413      	add	r3, r2
 8019d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019d70:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d78:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8019d7c:	00e4      	lsls	r4, r4, #3
 8019d7e:	463d      	mov	r5, r7
 8019d80:	682d      	ldr	r5, [r5, #0]
 8019d82:	442c      	add	r4, r5
 8019d84:	f7e6 fa72 	bl	800026c <__aeabi_dsub>
 8019d88:	4602      	mov	r2, r0
 8019d8a:	460b      	mov	r3, r1
 8019d8c:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 1] -= Ymean[1];
 8019d90:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8019d94:	3301      	adds	r3, #1
 8019d96:	00db      	lsls	r3, r3, #3
 8019d98:	463a      	mov	r2, r7
 8019d9a:	6812      	ldr	r2, [r2, #0]
 8019d9c:	4413      	add	r3, r2
 8019d9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019da2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019da6:	3308      	adds	r3, #8
 8019da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dac:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8019db0:	3401      	adds	r4, #1
 8019db2:	00e4      	lsls	r4, r4, #3
 8019db4:	463d      	mov	r5, r7
 8019db6:	682d      	ldr	r5, [r5, #0]
 8019db8:	442c      	add	r4, r5
 8019dba:	f7e6 fa57 	bl	800026c <__aeabi_dsub>
 8019dbe:	4602      	mov	r2, r0
 8019dc0:	460b      	mov	r3, r1
 8019dc2:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 2] -= signOOM;
 8019dc6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8019dca:	3302      	adds	r3, #2
 8019dcc:	00db      	lsls	r3, r3, #3
 8019dce:	463a      	mov	r2, r7
 8019dd0:	6812      	ldr	r2, [r2, #0]
 8019dd2:	4413      	add	r3, r2
 8019dd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019dd8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8019ddc:	3302      	adds	r3, #2
 8019dde:	00db      	lsls	r3, r3, #3
 8019de0:	463a      	mov	r2, r7
 8019de2:	6812      	ldr	r2, [r2, #0]
 8019de4:	18d4      	adds	r4, r2, r3
 8019de6:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8019dea:	f7e6 fa3f 	bl	800026c <__aeabi_dsub>
 8019dee:	4602      	mov	r2, r0
 8019df0:	460b      	mov	r3, r1
 8019df2:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 8019df6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8019dfa:	3303      	adds	r3, #3
 8019dfc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8019e00:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8019e04:	3301      	adds	r3, #1
 8019e06:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8019e0a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8019e0e:	2b05      	cmp	r3, #5
 8019e10:	dda6      	ble.n	8019d60 <UTMeanCovSqrt_C2vgLQ4W+0x2a8>
  }

  if (rtIsNaN(OOM)) {
 8019e12:	f107 0308 	add.w	r3, r7, #8
 8019e16:	ed93 0b00 	vldr	d0, [r3]
 8019e1a:	f004 fbef 	bl	801e5fc <rtIsNaN>
 8019e1e:	4603      	mov	r3, r0
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d006      	beq.n	8019e32 <UTMeanCovSqrt_C2vgLQ4W+0x37a>
    signOOM = OOM;
 8019e24:	f107 0308 	add.w	r3, r7, #8
 8019e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e2c:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 8019e30:	e029      	b.n	8019e86 <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else if (OOM < 0.0) {
 8019e32:	f107 0108 	add.w	r1, r7, #8
 8019e36:	f04f 0200 	mov.w	r2, #0
 8019e3a:	f04f 0300 	mov.w	r3, #0
 8019e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e42:	f7e6 fe3d 	bl	8000ac0 <__aeabi_dcmplt>
 8019e46:	4603      	mov	r3, r0
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d005      	beq.n	8019e58 <UTMeanCovSqrt_C2vgLQ4W+0x3a0>
    signOOM = -1.0;
 8019e4c:	f04f 0200 	mov.w	r2, #0
 8019e50:	4bce      	ldr	r3, [pc, #824]	; (801a18c <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 8019e52:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 8019e56:	e016      	b.n	8019e86 <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else {
    signOOM = (OOM > 0.0);
 8019e58:	f107 0108 	add.w	r1, r7, #8
 8019e5c:	f04f 0200 	mov.w	r2, #0
 8019e60:	f04f 0300 	mov.w	r3, #0
 8019e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e68:	f7e6 fe48 	bl	8000afc <__aeabi_dcmpgt>
 8019e6c:	4603      	mov	r3, r0
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d003      	beq.n	8019e7a <UTMeanCovSqrt_C2vgLQ4W+0x3c2>
 8019e72:	f04f 0200 	mov.w	r2, #0
 8019e76:	4bc6      	ldr	r3, [pc, #792]	; (801a190 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8019e78:	e003      	b.n	8019e82 <UTMeanCovSqrt_C2vgLQ4W+0x3ca>
 8019e7a:	f04f 0200 	mov.w	r2, #0
 8019e7e:	f04f 0300 	mov.w	r3, #0
 8019e82:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  }

  covWeights_0 = signOOM * covWeights[0];
 8019e86:	f107 0310 	add.w	r3, r7, #16
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e90:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8019e94:	f7e6 fba2 	bl	80005dc <__aeabi_dmul>
 8019e98:	4602      	mov	r2, r0
 8019e9a:	460b      	mov	r3, r1
 8019e9c:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
  covWeights_1 = signOOM * covWeights[1];
 8019ea0:	f107 0310 	add.w	r3, r7, #16
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	3308      	adds	r3, #8
 8019ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eac:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8019eb0:	f7e6 fb94 	bl	80005dc <__aeabi_dmul>
 8019eb4:	4602      	mov	r2, r0
 8019eb6:	460b      	mov	r3, r1
 8019eb8:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
  OOM *= signOOM;
 8019ebc:	f107 0408 	add.w	r4, r7, #8
 8019ec0:	f107 0108 	add.w	r1, r7, #8
 8019ec4:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8019ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ecc:	f7e6 fb86 	bl	80005dc <__aeabi_dmul>
 8019ed0:	4602      	mov	r2, r0
 8019ed2:	460b      	mov	r3, r1
 8019ed4:	e9c4 2300 	strd	r2, r3, [r4]
  signOOM = sqrt(OOM);
 8019ed8:	f107 0308 	add.w	r3, r7, #8
 8019edc:	ed93 0b00 	vldr	d0, [r3]
 8019ee0:	f013 f8f6 	bl	802d0d0 <sqrt>
 8019ee4:	ed87 0ba8 	vstr	d0, [r7, #672]	; 0x2a0
  temp = sqrt(covWeights_1);
 8019ee8:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 8019eec:	f013 f8f0 	bl	802d0d0 <sqrt>
 8019ef0:	eeb0 7a40 	vmov.f32	s14, s0
 8019ef4:	eef0 7a60 	vmov.f32	s15, s1
 8019ef8:	f107 0318 	add.w	r3, r7, #24
 8019efc:	ed83 7b00 	vstr	d7, [r3]
  kk = 0;
 8019f00:	2300      	movs	r3, #0
 8019f02:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8019f06:	2300      	movs	r3, #0
 8019f08:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8019f0c:	e03c      	b.n	8019f88 <UTMeanCovSqrt_C2vgLQ4W+0x4d0>
    i_1 = 0;
 8019f0e:	2300      	movs	r3, #0
 8019f10:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 8019f14:	2300      	movs	r3, #0
 8019f16:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8019f1a:	e027      	b.n	8019f6c <UTMeanCovSqrt_C2vgLQ4W+0x4b4>
      temp_0[i + kk] = Y2[i_1 + iAcol] * temp;
 8019f1c:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8019f20:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8019f24:	4413      	add	r3, r2
 8019f26:	00db      	lsls	r3, r3, #3
 8019f28:	463a      	mov	r2, r7
 8019f2a:	6812      	ldr	r2, [r2, #0]
 8019f2c:	4413      	add	r3, r2
 8019f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019f32:	f107 0318 	add.w	r3, r7, #24
 8019f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f3a:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 8019f3e:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 8019f42:	442c      	add	r4, r5
 8019f44:	f7e6 fb4a 	bl	80005dc <__aeabi_dmul>
 8019f48:	4602      	mov	r2, r0
 8019f4a:	460b      	mov	r3, r1
 8019f4c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8019f50:	00e1      	lsls	r1, r4, #3
 8019f52:	4401      	add	r1, r0
 8019f54:	e9c1 2300 	strd	r2, r3, [r1]
      i_1 += 3;
 8019f58:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8019f5c:	3303      	adds	r3, #3
 8019f5e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 8019f62:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8019f66:	3301      	adds	r3, #1
 8019f68:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8019f6c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8019f70:	2b05      	cmp	r3, #5
 8019f72:	ddd3      	ble.n	8019f1c <UTMeanCovSqrt_C2vgLQ4W+0x464>
    }

    kk += 6;
 8019f74:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8019f78:	3306      	adds	r3, #6
 8019f7a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8019f7e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8019f82:	3301      	adds	r3, #1
 8019f84:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8019f88:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8019f8c:	2b02      	cmp	r3, #2
 8019f8e:	ddbe      	ble.n	8019f0e <UTMeanCovSqrt_C2vgLQ4W+0x456>
  }

  qr_DvOBrgQi(temp_0, a__1, Sy);
 8019f90:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8019f94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8019f98:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f002 ff43 	bl	801ce28 <qr_DvOBrgQi>
  if (!rtIsNaN(covWeights_0)) {
 8019fa2:	ed97 0bac 	vldr	d0, [r7, #688]	; 0x2b0
 8019fa6:	f004 fb29 	bl	801e5fc <rtIsNaN>
 8019faa:	4603      	mov	r3, r0
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d125      	bne.n	8019ffc <UTMeanCovSqrt_C2vgLQ4W+0x544>
    if (covWeights_0 < 0.0) {
 8019fb0:	f04f 0200 	mov.w	r2, #0
 8019fb4:	f04f 0300 	mov.w	r3, #0
 8019fb8:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8019fbc:	f7e6 fd80 	bl	8000ac0 <__aeabi_dcmplt>
 8019fc0:	4603      	mov	r3, r0
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d005      	beq.n	8019fd2 <UTMeanCovSqrt_C2vgLQ4W+0x51a>
      covWeights_0 = -1.0;
 8019fc6:	f04f 0200 	mov.w	r2, #0
 8019fca:	4b70      	ldr	r3, [pc, #448]	; (801a18c <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 8019fcc:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 8019fd0:	e014      	b.n	8019ffc <UTMeanCovSqrt_C2vgLQ4W+0x544>
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 8019fd2:	f04f 0200 	mov.w	r2, #0
 8019fd6:	f04f 0300 	mov.w	r3, #0
 8019fda:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8019fde:	f7e6 fd8d 	bl	8000afc <__aeabi_dcmpgt>
 8019fe2:	4603      	mov	r3, r0
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d003      	beq.n	8019ff0 <UTMeanCovSqrt_C2vgLQ4W+0x538>
 8019fe8:	f04f 0200 	mov.w	r2, #0
 8019fec:	4b68      	ldr	r3, [pc, #416]	; (801a190 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8019fee:	e003      	b.n	8019ff8 <UTMeanCovSqrt_C2vgLQ4W+0x540>
 8019ff0:	f04f 0200 	mov.w	r2, #0
 8019ff4:	f04f 0300 	mov.w	r3, #0
 8019ff8:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    }
  }

  if (covWeights_0 == 1.0) {
 8019ffc:	f04f 0200 	mov.w	r2, #0
 801a000:	4b63      	ldr	r3, [pc, #396]	; (801a190 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 801a002:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 801a006:	f7e6 fd51 	bl	8000aac <__aeabi_dcmpeq>
 801a00a:	4603      	mov	r3, r0
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	f000 81bd 	beq.w	801a38c <UTMeanCovSqrt_C2vgLQ4W+0x8d4>
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801a012:	2300      	movs	r3, #0
 801a014:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801a018:	e011      	b.n	801a03e <UTMeanCovSqrt_C2vgLQ4W+0x586>
      Sy[iAcol + 1] = 0.0;
 801a01a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a01e:	3301      	adds	r3, #1
 801a020:	00db      	lsls	r3, r3, #3
 801a022:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801a026:	18d1      	adds	r1, r2, r3
 801a028:	f04f 0200 	mov.w	r2, #0
 801a02c:	f04f 0300 	mov.w	r3, #0
 801a030:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801a034:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a038:	3301      	adds	r3, #1
 801a03a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801a03e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a042:	2b01      	cmp	r3, #1
 801a044:	dde9      	ble.n	801a01a <UTMeanCovSqrt_C2vgLQ4W+0x562>
    }

    Sy[5] = 0.0;
 801a046:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a04a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801a04e:	f04f 0200 	mov.w	r2, #0
 801a052:	f04f 0300 	mov.w	r3, #0
 801a056:	e9c1 2300 	strd	r2, r3, [r1]
    c[2] = 0.0;
 801a05a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801a05e:	f04f 0200 	mov.w	r2, #0
 801a062:	f04f 0300 	mov.w	r3, #0
 801a066:	e9c1 2304 	strd	r2, r3, [r1, #16]
    s[2] = 0.0;
 801a06a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801a06e:	f04f 0200 	mov.w	r2, #0
 801a072:	f04f 0300 	mov.w	r3, #0
 801a076:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rotate_LZ7ctbe0(Sy[0], scale, &c[0], &s[0], &Sy[0]);
 801a07a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a07e:	ed93 7b00 	vldr	d7, [r3]
 801a082:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801a086:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a08a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801a08e:	4618      	mov	r0, r3
 801a090:	ed97 1baa 	vldr	d1, [r7, #680]	; 0x2a8
 801a094:	eeb0 0a47 	vmov.f32	s0, s14
 801a098:	eef0 0a67 	vmov.f32	s1, s15
 801a09c:	f004 f814 	bl	801e0c8 <rotate_LZ7ctbe0>
    temp = c[0] * absxk - s[0] * Sy[3];
 801a0a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a0a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a0a8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801a0ac:	f7e6 fa96 	bl	80005dc <__aeabi_dmul>
 801a0b0:	4602      	mov	r2, r0
 801a0b2:	460b      	mov	r3, r1
 801a0b4:	4614      	mov	r4, r2
 801a0b6:	461d      	mov	r5, r3
 801a0b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a0bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a0c0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a0c4:	3318      	adds	r3, #24
 801a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0ca:	f7e6 fa87 	bl	80005dc <__aeabi_dmul>
 801a0ce:	4602      	mov	r2, r0
 801a0d0:	460b      	mov	r3, r1
 801a0d2:	4620      	mov	r0, r4
 801a0d4:	4629      	mov	r1, r5
 801a0d6:	f7e6 f8c9 	bl	800026c <__aeabi_dsub>
 801a0da:	4602      	mov	r2, r0
 801a0dc:	460b      	mov	r3, r1
 801a0de:	f107 0118 	add.w	r1, r7, #24
 801a0e2:	e9c1 2300 	strd	r2, r3, [r1]
    Sy[3] = c[0] * Sy[3] + s[0] * absxk;
 801a0e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a0ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a0ee:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a0f2:	3318      	adds	r3, #24
 801a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0f8:	f7e6 fa70 	bl	80005dc <__aeabi_dmul>
 801a0fc:	4602      	mov	r2, r0
 801a0fe:	460b      	mov	r3, r1
 801a100:	4690      	mov	r8, r2
 801a102:	4699      	mov	r9, r3
 801a104:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a108:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a10c:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801a110:	f7e6 fa64 	bl	80005dc <__aeabi_dmul>
 801a114:	4602      	mov	r2, r0
 801a116:	460b      	mov	r3, r1
 801a118:	4610      	mov	r0, r2
 801a11a:	4619      	mov	r1, r3
 801a11c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a120:	f103 0418 	add.w	r4, r3, #24
 801a124:	4602      	mov	r2, r0
 801a126:	460b      	mov	r3, r1
 801a128:	4640      	mov	r0, r8
 801a12a:	4649      	mov	r1, r9
 801a12c:	f7e6 f8a0 	bl	8000270 <__adddf3>
 801a130:	4602      	mov	r2, r0
 801a132:	460b      	mov	r3, r1
 801a134:	e9c4 2300 	strd	r2, r3, [r4]
    rotate_LZ7ctbe0(Sy[4], temp, &c[1], &s[1], &Sy[4]);
 801a138:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a13c:	3320      	adds	r3, #32
 801a13e:	ed93 7b00 	vldr	d7, [r3]
 801a142:	f107 0318 	add.w	r3, r7, #24
 801a146:	ed93 6b00 	vldr	d6, [r3]
 801a14a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a14e:	f103 0220 	add.w	r2, r3, #32
 801a152:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a156:	f103 0108 	add.w	r1, r3, #8
 801a15a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a15e:	3308      	adds	r3, #8
 801a160:	4618      	mov	r0, r3
 801a162:	eeb0 1a46 	vmov.f32	s2, s12
 801a166:	eef0 1a66 	vmov.f32	s3, s13
 801a16a:	eeb0 0a47 	vmov.f32	s0, s14
 801a16e:	eef0 0a67 	vmov.f32	s1, s15
 801a172:	f003 ffa9 	bl	801e0c8 <rotate_LZ7ctbe0>
    temp = b_t;
 801a176:	f107 0118 	add.w	r1, r7, #24
 801a17a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801a17e:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801a182:	2300      	movs	r3, #0
 801a184:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801a188:	e06f      	b.n	801a26a <UTMeanCovSqrt_C2vgLQ4W+0x7b2>
 801a18a:	bf00      	nop
 801a18c:	bff00000 	.word	0xbff00000
 801a190:	3ff00000 	.word	0x3ff00000
      scale = s[iAcol] * temp;
 801a194:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a198:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a19c:	00db      	lsls	r3, r3, #3
 801a19e:	4413      	add	r3, r2
 801a1a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a1a4:	f107 0318 	add.w	r3, r7, #24
 801a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ac:	f7e6 fa16 	bl	80005dc <__aeabi_dmul>
 801a1b0:	4602      	mov	r2, r0
 801a1b2:	460b      	mov	r3, r1
 801a1b4:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = Sy[iAcol + 6];
 801a1b8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a1bc:	3306      	adds	r3, #6
 801a1be:	00db      	lsls	r3, r3, #3
 801a1c0:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801a1c4:	4413      	add	r3, r2
 801a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ca:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
      temp = c[iAcol] * temp - absxk * s[iAcol];
 801a1ce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801a1d2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a1d6:	00db      	lsls	r3, r3, #3
 801a1d8:	4413      	add	r3, r2
 801a1da:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a1de:	f107 0318 	add.w	r3, r7, #24
 801a1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1e6:	f7e6 f9f9 	bl	80005dc <__aeabi_dmul>
 801a1ea:	4602      	mov	r2, r0
 801a1ec:	460b      	mov	r3, r1
 801a1ee:	4614      	mov	r4, r2
 801a1f0:	461d      	mov	r5, r3
 801a1f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a1f6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a1fa:	00db      	lsls	r3, r3, #3
 801a1fc:	4413      	add	r3, r2
 801a1fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a202:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801a206:	f7e6 f9e9 	bl	80005dc <__aeabi_dmul>
 801a20a:	4602      	mov	r2, r0
 801a20c:	460b      	mov	r3, r1
 801a20e:	4620      	mov	r0, r4
 801a210:	4629      	mov	r1, r5
 801a212:	f7e6 f82b 	bl	800026c <__aeabi_dsub>
 801a216:	4602      	mov	r2, r0
 801a218:	460b      	mov	r3, r1
 801a21a:	f107 0118 	add.w	r1, r7, #24
 801a21e:	e9c1 2300 	strd	r2, r3, [r1]
      Sy[iAcol + 6] = absxk * c[iAcol] + scale;
 801a222:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801a226:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a22a:	00db      	lsls	r3, r3, #3
 801a22c:	4413      	add	r3, r2
 801a22e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a232:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801a236:	f7e6 f9d1 	bl	80005dc <__aeabi_dmul>
 801a23a:	4602      	mov	r2, r0
 801a23c:	460b      	mov	r3, r1
 801a23e:	4610      	mov	r0, r2
 801a240:	4619      	mov	r1, r3
 801a242:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a246:	3306      	adds	r3, #6
 801a248:	00db      	lsls	r3, r3, #3
 801a24a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801a24e:	18d4      	adds	r4, r2, r3
 801a250:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801a254:	f7e6 f80c 	bl	8000270 <__adddf3>
 801a258:	4602      	mov	r2, r0
 801a25a:	460b      	mov	r3, r1
 801a25c:	e9c4 2300 	strd	r2, r3, [r4]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801a260:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a264:	3301      	adds	r3, #1
 801a266:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801a26a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a26e:	2b01      	cmp	r3, #1
 801a270:	dd90      	ble.n	801a194 <UTMeanCovSqrt_C2vgLQ4W+0x6dc>
    }

    rotate_LZ7ctbe0(Sy[8], temp, &c[2], &s[2], &Sy[8]);
 801a272:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a276:	3340      	adds	r3, #64	; 0x40
 801a278:	ed93 7b00 	vldr	d7, [r3]
 801a27c:	f107 0318 	add.w	r3, r7, #24
 801a280:	ed93 6b00 	vldr	d6, [r3]
 801a284:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a288:	f103 0240 	add.w	r2, r3, #64	; 0x40
 801a28c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a290:	f103 0110 	add.w	r1, r3, #16
 801a294:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a298:	3310      	adds	r3, #16
 801a29a:	4618      	mov	r0, r3
 801a29c:	eeb0 1a46 	vmov.f32	s2, s12
 801a2a0:	eef0 1a66 	vmov.f32	s3, s13
 801a2a4:	eeb0 0a47 	vmov.f32	s0, s14
 801a2a8:	eef0 0a67 	vmov.f32	s1, s15
 801a2ac:	f003 ff0c 	bl	801e0c8 <rotate_LZ7ctbe0>
    kk = 0;
 801a2b0:	2300      	movs	r3, #0
 801a2b2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801a2b6:	2300      	movs	r3, #0
 801a2b8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801a2bc:	e03d      	b.n	801a33a <UTMeanCovSqrt_C2vgLQ4W+0x882>
      Sy_0[kk] = Sy[iAcol];
 801a2be:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a2c2:	00db      	lsls	r3, r3, #3
 801a2c4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801a2c8:	4413      	add	r3, r2
 801a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ce:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801a2d2:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 801a2d6:	00c9      	lsls	r1, r1, #3
 801a2d8:	4401      	add	r1, r0
 801a2da:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 801a2de:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a2e2:	3303      	adds	r3, #3
 801a2e4:	00db      	lsls	r3, r3, #3
 801a2e6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801a2ea:	4413      	add	r3, r2
 801a2ec:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801a2f0:	1c51      	adds	r1, r2, #1
 801a2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2f6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801a2fa:	00c9      	lsls	r1, r1, #3
 801a2fc:	4401      	add	r1, r0
 801a2fe:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 801a302:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a306:	3306      	adds	r3, #6
 801a308:	00db      	lsls	r3, r3, #3
 801a30a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801a30e:	4413      	add	r3, r2
 801a310:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801a314:	1c91      	adds	r1, r2, #2
 801a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a31a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801a31e:	00c9      	lsls	r1, r1, #3
 801a320:	4401      	add	r1, r0
 801a322:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 801a326:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801a32a:	3303      	adds	r3, #3
 801a32c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801a330:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a334:	3301      	adds	r3, #1
 801a336:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801a33a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a33e:	2b02      	cmp	r3, #2
 801a340:	ddbd      	ble.n	801a2be <UTMeanCovSqrt_C2vgLQ4W+0x806>
    }

    for (kk = 0; kk < 9; kk++) {
 801a342:	2300      	movs	r3, #0
 801a344:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801a348:	e01a      	b.n	801a380 <UTMeanCovSqrt_C2vgLQ4W+0x8c8>
      Sy[kk] = signOOM * Sy_0[kk];
 801a34a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801a34e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801a352:	00db      	lsls	r3, r3, #3
 801a354:	4413      	add	r3, r2
 801a356:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a35a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801a35e:	00db      	lsls	r3, r3, #3
 801a360:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801a364:	18d4      	adds	r4, r2, r3
 801a366:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801a36a:	f7e6 f937 	bl	80005dc <__aeabi_dmul>
 801a36e:	4602      	mov	r2, r0
 801a370:	460b      	mov	r3, r1
 801a372:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 801a376:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801a37a:	3301      	adds	r3, #1
 801a37c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801a380:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801a384:	2b08      	cmp	r3, #8
 801a386:	dde0      	ble.n	801a34a <UTMeanCovSqrt_C2vgLQ4W+0x892>
 801a388:	f000 bf6e 	b.w	801b268 <UTMeanCovSqrt_C2vgLQ4W+0x17b0>
    }
  } else {
    boolean_T errorCondition;
    boolean_T guard1 = false;
 801a38c:	2300      	movs	r3, #0
 801a38e:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801a392:	2300      	movs	r3, #0
 801a394:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801a398:	e011      	b.n	801a3be <UTMeanCovSqrt_C2vgLQ4W+0x906>
      Sy[iAcol + 1] = 0.0;
 801a39a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a39e:	3301      	adds	r3, #1
 801a3a0:	00db      	lsls	r3, r3, #3
 801a3a2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801a3a6:	18d1      	adds	r1, r2, r3
 801a3a8:	f04f 0200 	mov.w	r2, #0
 801a3ac:	f04f 0300 	mov.w	r3, #0
 801a3b0:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801a3b4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a3b8:	3301      	adds	r3, #1
 801a3ba:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801a3be:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a3c2:	2b01      	cmp	r3, #1
 801a3c4:	dde9      	ble.n	801a39a <UTMeanCovSqrt_C2vgLQ4W+0x8e2>
    }

    Sy[5] = 0.0;
 801a3c6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a3ca:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801a3ce:	f04f 0200 	mov.w	r2, #0
 801a3d2:	f04f 0300 	mov.w	r3, #0
 801a3d6:	e9c1 2300 	strd	r2, r3, [r1]
    errorCondition = (Sy[0] == 0.0);
 801a3da:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a3de:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a3e2:	2301      	movs	r3, #1
 801a3e4:	461c      	mov	r4, r3
 801a3e6:	f04f 0200 	mov.w	r2, #0
 801a3ea:	f04f 0300 	mov.w	r3, #0
 801a3ee:	f7e6 fb5d 	bl	8000aac <__aeabi_dcmpeq>
 801a3f2:	4603      	mov	r3, r0
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d101      	bne.n	801a3fc <UTMeanCovSqrt_C2vgLQ4W+0x944>
 801a3f8:	2300      	movs	r3, #0
 801a3fa:	461c      	mov	r4, r3
 801a3fc:	b2e3      	uxtb	r3, r4
 801a3fe:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if (!errorCondition) {
 801a402:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801a406:	2b00      	cmp	r3, #0
 801a408:	d114      	bne.n	801a434 <UTMeanCovSqrt_C2vgLQ4W+0x97c>
      errorCondition = (Sy[4] == 0.0);
 801a40a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a40e:	3320      	adds	r3, #32
 801a410:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a414:	2301      	movs	r3, #1
 801a416:	461c      	mov	r4, r3
 801a418:	f04f 0200 	mov.w	r2, #0
 801a41c:	f04f 0300 	mov.w	r3, #0
 801a420:	f7e6 fb44 	bl	8000aac <__aeabi_dcmpeq>
 801a424:	4603      	mov	r3, r0
 801a426:	2b00      	cmp	r3, #0
 801a428:	d101      	bne.n	801a42e <UTMeanCovSqrt_C2vgLQ4W+0x976>
 801a42a:	2300      	movs	r3, #0
 801a42c:	461c      	mov	r4, r3
 801a42e:	b2e3      	uxtb	r3, r4
 801a430:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    if (!errorCondition) {
 801a434:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d114      	bne.n	801a466 <UTMeanCovSqrt_C2vgLQ4W+0x9ae>
      errorCondition = (Sy[8] == 0.0);
 801a43c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a440:	3340      	adds	r3, #64	; 0x40
 801a442:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a446:	2301      	movs	r3, #1
 801a448:	461c      	mov	r4, r3
 801a44a:	f04f 0200 	mov.w	r2, #0
 801a44e:	f04f 0300 	mov.w	r3, #0
 801a452:	f7e6 fb2b 	bl	8000aac <__aeabi_dcmpeq>
 801a456:	4603      	mov	r3, r0
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d101      	bne.n	801a460 <UTMeanCovSqrt_C2vgLQ4W+0x9a8>
 801a45c:	2300      	movs	r3, #0
 801a45e:	461c      	mov	r4, r3
 801a460:	b2e3      	uxtb	r3, r4
 801a462:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    guard1 = false;
 801a466:	2300      	movs	r3, #0
 801a468:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    if (errorCondition) {
 801a46c:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801a470:	2b00      	cmp	r3, #0
 801a472:	d003      	beq.n	801a47c <UTMeanCovSqrt_C2vgLQ4W+0x9c4>
      guard1 = true;
 801a474:	2301      	movs	r3, #1
 801a476:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 801a47a:	e394      	b.n	801aba6 <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
    } else {
      x[2] = b_t;
 801a47c:	f107 0120 	add.w	r1, r7, #32
 801a480:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801a484:	e9c1 2304 	strd	r2, r3, [r1, #16]
      x[0] = scale / Sy[0];
 801a488:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a490:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 801a494:	f7e6 f9cc 	bl	8000830 <__aeabi_ddiv>
 801a498:	4602      	mov	r2, r0
 801a49a:	460b      	mov	r3, r1
 801a49c:	f107 0120 	add.w	r1, r7, #32
 801a4a0:	e9c1 2300 	strd	r2, r3, [r1]
      x[1] = (absxk - x[0] * Sy[3]) / Sy[4];
 801a4a4:	f107 0320 	add.w	r3, r7, #32
 801a4a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a4ac:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a4b0:	3318      	adds	r3, #24
 801a4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4b6:	f7e6 f891 	bl	80005dc <__aeabi_dmul>
 801a4ba:	4602      	mov	r2, r0
 801a4bc:	460b      	mov	r3, r1
 801a4be:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801a4c2:	f7e5 fed3 	bl	800026c <__aeabi_dsub>
 801a4c6:	4602      	mov	r2, r0
 801a4c8:	460b      	mov	r3, r1
 801a4ca:	4610      	mov	r0, r2
 801a4cc:	4619      	mov	r1, r3
 801a4ce:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a4d2:	3320      	adds	r3, #32
 801a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4d8:	f7e6 f9aa 	bl	8000830 <__aeabi_ddiv>
 801a4dc:	4602      	mov	r2, r0
 801a4de:	460b      	mov	r3, r1
 801a4e0:	f107 0120 	add.w	r1, r7, #32
 801a4e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = b_t;
 801a4e8:	f107 0118 	add.w	r1, r7, #24
 801a4ec:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801a4f0:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 801a4f4:	2300      	movs	r3, #0
 801a4f6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801a4fa:	e027      	b.n	801a54c <UTMeanCovSqrt_C2vgLQ4W+0xa94>
        temp -= Sy[kk + 6] * x[kk];
 801a4fc:	f107 0318 	add.w	r3, r7, #24
 801a500:	e9d3 4500 	ldrd	r4, r5, [r3]
 801a504:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801a508:	3306      	adds	r3, #6
 801a50a:	00db      	lsls	r3, r3, #3
 801a50c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801a510:	4413      	add	r3, r2
 801a512:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a516:	f107 0220 	add.w	r2, r7, #32
 801a51a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801a51e:	00db      	lsls	r3, r3, #3
 801a520:	4413      	add	r3, r2
 801a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a526:	f7e6 f859 	bl	80005dc <__aeabi_dmul>
 801a52a:	4602      	mov	r2, r0
 801a52c:	460b      	mov	r3, r1
 801a52e:	4620      	mov	r0, r4
 801a530:	4629      	mov	r1, r5
 801a532:	f7e5 fe9b 	bl	800026c <__aeabi_dsub>
 801a536:	4602      	mov	r2, r0
 801a538:	460b      	mov	r3, r1
 801a53a:	f107 0118 	add.w	r1, r7, #24
 801a53e:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 801a542:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801a546:	3301      	adds	r3, #1
 801a548:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801a54c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801a550:	2b01      	cmp	r3, #1
 801a552:	ddd3      	ble.n	801a4fc <UTMeanCovSqrt_C2vgLQ4W+0xa44>
      }

      x[2] = temp / Sy[8];
 801a554:	f107 0318 	add.w	r3, r7, #24
 801a558:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a55c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a560:	3340      	adds	r3, #64	; 0x40
 801a562:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a566:	f7e6 f963 	bl	8000830 <__aeabi_ddiv>
 801a56a:	4602      	mov	r2, r0
 801a56c:	460b      	mov	r3, r1
 801a56e:	f107 0120 	add.w	r1, r7, #32
 801a572:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 801a576:	f04f 0200 	mov.w	r2, #0
 801a57a:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 801a57e:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = fabs(x[0]);
 801a582:	f107 0320 	add.w	r3, r7, #32
 801a586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a58a:	4611      	mov	r1, r2
 801a58c:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 801a590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a594:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > 3.3121686421112381E-170) {
 801a598:	f04f 0200 	mov.w	r2, #0
 801a59c:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 801a5a0:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801a5a4:	f7e6 faaa 	bl	8000afc <__aeabi_dcmpgt>
 801a5a8:	4603      	mov	r3, r0
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d00b      	beq.n	801a5c6 <UTMeanCovSqrt_C2vgLQ4W+0xb0e>
        temp = 1.0;
 801a5ae:	f107 0118 	add.w	r1, r7, #24
 801a5b2:	f04f 0200 	mov.w	r2, #0
 801a5b6:	4b85      	ldr	r3, [pc, #532]	; (801a7cc <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801a5b8:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 801a5bc:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801a5c0:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 801a5c4:	e017      	b.n	801a5f6 <UTMeanCovSqrt_C2vgLQ4W+0xb3e>
      } else {
        b_t = absxk / 3.3121686421112381E-170;
 801a5c6:	f04f 0200 	mov.w	r2, #0
 801a5ca:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 801a5ce:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801a5d2:	f7e6 f92d 	bl	8000830 <__aeabi_ddiv>
 801a5d6:	4602      	mov	r2, r0
 801a5d8:	460b      	mov	r3, r1
 801a5da:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = b_t * b_t;
 801a5de:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801a5e2:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 801a5e6:	f7e5 fff9 	bl	80005dc <__aeabi_dmul>
 801a5ea:	4602      	mov	r2, r0
 801a5ec:	460b      	mov	r3, r1
 801a5ee:	f107 0118 	add.w	r1, r7, #24
 801a5f2:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[1]);
 801a5f6:	f107 0320 	add.w	r3, r7, #32
 801a5fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a5fe:	4611      	mov	r1, r2
 801a600:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 801a604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a608:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 801a60c:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801a610:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801a614:	f7e6 fa72 	bl	8000afc <__aeabi_dcmpgt>
 801a618:	4603      	mov	r3, r0
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d02d      	beq.n	801a67a <UTMeanCovSqrt_C2vgLQ4W+0xbc2>
        b_t = scale / absxk;
 801a61e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801a622:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 801a626:	f7e6 f903 	bl	8000830 <__aeabi_ddiv>
 801a62a:	4602      	mov	r2, r0
 801a62c:	460b      	mov	r3, r1
 801a62e:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 801a632:	f107 0318 	add.w	r3, r7, #24
 801a636:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a63a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801a63e:	f7e5 ffcd 	bl	80005dc <__aeabi_dmul>
 801a642:	4602      	mov	r2, r0
 801a644:	460b      	mov	r3, r1
 801a646:	4610      	mov	r0, r2
 801a648:	4619      	mov	r1, r3
 801a64a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801a64e:	f7e5 ffc5 	bl	80005dc <__aeabi_dmul>
 801a652:	4602      	mov	r2, r0
 801a654:	460b      	mov	r3, r1
 801a656:	4610      	mov	r0, r2
 801a658:	4619      	mov	r1, r3
 801a65a:	f04f 0200 	mov.w	r2, #0
 801a65e:	4b5b      	ldr	r3, [pc, #364]	; (801a7cc <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801a660:	f7e5 fe06 	bl	8000270 <__adddf3>
 801a664:	4602      	mov	r2, r0
 801a666:	460b      	mov	r3, r1
 801a668:	f107 0118 	add.w	r1, r7, #24
 801a66c:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 801a670:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801a674:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 801a678:	e01f      	b.n	801a6ba <UTMeanCovSqrt_C2vgLQ4W+0xc02>
      } else {
        b_t = absxk / scale;
 801a67a:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801a67e:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801a682:	f7e6 f8d5 	bl	8000830 <__aeabi_ddiv>
 801a686:	4602      	mov	r2, r0
 801a688:	460b      	mov	r3, r1
 801a68a:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 801a68e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801a692:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 801a696:	f7e5 ffa1 	bl	80005dc <__aeabi_dmul>
 801a69a:	4602      	mov	r2, r0
 801a69c:	460b      	mov	r3, r1
 801a69e:	4610      	mov	r0, r2
 801a6a0:	4619      	mov	r1, r3
 801a6a2:	f107 0318 	add.w	r3, r7, #24
 801a6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6aa:	f7e5 fde1 	bl	8000270 <__adddf3>
 801a6ae:	4602      	mov	r2, r0
 801a6b0:	460b      	mov	r3, r1
 801a6b2:	f107 0118 	add.w	r1, r7, #24
 801a6b6:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[2]);
 801a6ba:	f107 0320 	add.w	r3, r7, #32
 801a6be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801a6c2:	4611      	mov	r1, r2
 801a6c4:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 801a6c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a6cc:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 801a6d0:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801a6d4:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801a6d8:	f7e6 fa10 	bl	8000afc <__aeabi_dcmpgt>
 801a6dc:	4603      	mov	r3, r0
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d02d      	beq.n	801a73e <UTMeanCovSqrt_C2vgLQ4W+0xc86>
        b_t = scale / absxk;
 801a6e2:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801a6e6:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 801a6ea:	f7e6 f8a1 	bl	8000830 <__aeabi_ddiv>
 801a6ee:	4602      	mov	r2, r0
 801a6f0:	460b      	mov	r3, r1
 801a6f2:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 801a6f6:	f107 0318 	add.w	r3, r7, #24
 801a6fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a6fe:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801a702:	f7e5 ff6b 	bl	80005dc <__aeabi_dmul>
 801a706:	4602      	mov	r2, r0
 801a708:	460b      	mov	r3, r1
 801a70a:	4610      	mov	r0, r2
 801a70c:	4619      	mov	r1, r3
 801a70e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801a712:	f7e5 ff63 	bl	80005dc <__aeabi_dmul>
 801a716:	4602      	mov	r2, r0
 801a718:	460b      	mov	r3, r1
 801a71a:	4610      	mov	r0, r2
 801a71c:	4619      	mov	r1, r3
 801a71e:	f04f 0200 	mov.w	r2, #0
 801a722:	4b2a      	ldr	r3, [pc, #168]	; (801a7cc <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801a724:	f7e5 fda4 	bl	8000270 <__adddf3>
 801a728:	4602      	mov	r2, r0
 801a72a:	460b      	mov	r3, r1
 801a72c:	f107 0118 	add.w	r1, r7, #24
 801a730:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 801a734:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801a738:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 801a73c:	e01f      	b.n	801a77e <UTMeanCovSqrt_C2vgLQ4W+0xcc6>
      } else {
        b_t = absxk / scale;
 801a73e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801a742:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801a746:	f7e6 f873 	bl	8000830 <__aeabi_ddiv>
 801a74a:	4602      	mov	r2, r0
 801a74c:	460b      	mov	r3, r1
 801a74e:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 801a752:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801a756:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 801a75a:	f7e5 ff3f 	bl	80005dc <__aeabi_dmul>
 801a75e:	4602      	mov	r2, r0
 801a760:	460b      	mov	r3, r1
 801a762:	4610      	mov	r0, r2
 801a764:	4619      	mov	r1, r3
 801a766:	f107 0318 	add.w	r3, r7, #24
 801a76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a76e:	f7e5 fd7f 	bl	8000270 <__adddf3>
 801a772:	4602      	mov	r2, r0
 801a774:	460b      	mov	r3, r1
 801a776:	f107 0118 	add.w	r1, r7, #24
 801a77a:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 801a77e:	f107 0318 	add.w	r3, r7, #24
 801a782:	ed93 7b00 	vldr	d7, [r3]
 801a786:	eeb0 0a47 	vmov.f32	s0, s14
 801a78a:	eef0 0a67 	vmov.f32	s1, s15
 801a78e:	f012 fc9f 	bl	802d0d0 <sqrt>
 801a792:	ec51 0b10 	vmov	r0, r1, d0
 801a796:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801a79a:	f7e5 ff1f 	bl	80005dc <__aeabi_dmul>
 801a79e:	4602      	mov	r2, r0
 801a7a0:	460b      	mov	r3, r1
 801a7a2:	f107 0118 	add.w	r1, r7, #24
 801a7a6:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 801a7aa:	f107 0318 	add.w	r3, r7, #24
 801a7ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a7b2:	f04f 0200 	mov.w	r2, #0
 801a7b6:	4b05      	ldr	r3, [pc, #20]	; (801a7cc <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801a7b8:	f7e6 f996 	bl	8000ae8 <__aeabi_dcmpge>
 801a7bc:	4603      	mov	r3, r0
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d006      	beq.n	801a7d0 <UTMeanCovSqrt_C2vgLQ4W+0xd18>
        guard1 = true;
 801a7c2:	2301      	movs	r3, #1
 801a7c4:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 801a7c8:	e1ed      	b.n	801aba6 <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
 801a7ca:	bf00      	nop
 801a7cc:	3ff00000 	.word	0x3ff00000
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), x[2], &c[2], &s[2], &temp);
 801a7d0:	f107 0318 	add.w	r3, r7, #24
 801a7d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a7d8:	f107 0318 	add.w	r3, r7, #24
 801a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7e0:	f7e5 fefc 	bl	80005dc <__aeabi_dmul>
 801a7e4:	4602      	mov	r2, r0
 801a7e6:	460b      	mov	r3, r1
 801a7e8:	f04f 0000 	mov.w	r0, #0
 801a7ec:	49b4      	ldr	r1, [pc, #720]	; (801aac0 <UTMeanCovSqrt_C2vgLQ4W+0x1008>)
 801a7ee:	f7e5 fd3d 	bl	800026c <__aeabi_dsub>
 801a7f2:	4602      	mov	r2, r0
 801a7f4:	460b      	mov	r3, r1
 801a7f6:	ec43 2b17 	vmov	d7, r2, r3
 801a7fa:	eeb0 0a47 	vmov.f32	s0, s14
 801a7fe:	eef0 0a67 	vmov.f32	s1, s15
 801a802:	f012 fc65 	bl	802d0d0 <sqrt>
 801a806:	eeb0 6a40 	vmov.f32	s12, s0
 801a80a:	eef0 6a60 	vmov.f32	s13, s1
 801a80e:	f107 0320 	add.w	r3, r7, #32
 801a812:	ed93 7b04 	vldr	d7, [r3, #16]
 801a816:	f107 0218 	add.w	r2, r7, #24
 801a81a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a81e:	f103 0110 	add.w	r1, r3, #16
 801a822:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a826:	3310      	adds	r3, #16
 801a828:	4618      	mov	r0, r3
 801a82a:	eeb0 1a47 	vmov.f32	s2, s14
 801a82e:	eef0 1a67 	vmov.f32	s3, s15
 801a832:	eeb0 0a46 	vmov.f32	s0, s12
 801a836:	eef0 0a66 	vmov.f32	s1, s13
 801a83a:	f003 fc45 	bl	801e0c8 <rotate_LZ7ctbe0>
        x[2] = 0.0;
 801a83e:	f107 0120 	add.w	r1, r7, #32
 801a842:	f04f 0200 	mov.w	r2, #0
 801a846:	f04f 0300 	mov.w	r3, #0
 801a84a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, x[1], &c[1], &s[1], &temp);
 801a84e:	f107 0318 	add.w	r3, r7, #24
 801a852:	ed93 7b00 	vldr	d7, [r3]
 801a856:	f107 0320 	add.w	r3, r7, #32
 801a85a:	ed93 6b02 	vldr	d6, [r3, #8]
 801a85e:	f107 0218 	add.w	r2, r7, #24
 801a862:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a866:	f103 0108 	add.w	r1, r3, #8
 801a86a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a86e:	3308      	adds	r3, #8
 801a870:	4618      	mov	r0, r3
 801a872:	eeb0 1a46 	vmov.f32	s2, s12
 801a876:	eef0 1a66 	vmov.f32	s3, s13
 801a87a:	eeb0 0a47 	vmov.f32	s0, s14
 801a87e:	eef0 0a67 	vmov.f32	s1, s15
 801a882:	f003 fc21 	bl	801e0c8 <rotate_LZ7ctbe0>
        x[1] = 0.0;
 801a886:	f107 0120 	add.w	r1, r7, #32
 801a88a:	f04f 0200 	mov.w	r2, #0
 801a88e:	f04f 0300 	mov.w	r3, #0
 801a892:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, x[0], &c[0], &s[0], &temp);
 801a896:	f107 0318 	add.w	r3, r7, #24
 801a89a:	ed93 7b00 	vldr	d7, [r3]
 801a89e:	f107 0320 	add.w	r3, r7, #32
 801a8a2:	ed93 6b00 	vldr	d6, [r3]
 801a8a6:	f107 0218 	add.w	r2, r7, #24
 801a8aa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801a8ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a8b2:	4618      	mov	r0, r3
 801a8b4:	eeb0 1a46 	vmov.f32	s2, s12
 801a8b8:	eef0 1a66 	vmov.f32	s3, s13
 801a8bc:	eeb0 0a47 	vmov.f32	s0, s14
 801a8c0:	eef0 0a67 	vmov.f32	s1, s15
 801a8c4:	f003 fc00 	bl	801e0c8 <rotate_LZ7ctbe0>
        x[0] = 0.0;
 801a8c8:	f107 0120 	add.w	r1, r7, #32
 801a8cc:	f04f 0200 	mov.w	r2, #0
 801a8d0:	f04f 0300 	mov.w	r3, #0
 801a8d4:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 801a8d8:	2300      	movs	r3, #0
 801a8da:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801a8de:	e072      	b.n	801a9c6 <UTMeanCovSqrt_C2vgLQ4W+0xf0e>
          temp = s[iAcol] * Sy[iAcol];
 801a8e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a8e4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a8e8:	00db      	lsls	r3, r3, #3
 801a8ea:	4413      	add	r3, r2
 801a8ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a8f0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a8f4:	00db      	lsls	r3, r3, #3
 801a8f6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801a8fa:	4413      	add	r3, r2
 801a8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a900:	f7e5 fe6c 	bl	80005dc <__aeabi_dmul>
 801a904:	4602      	mov	r2, r0
 801a906:	460b      	mov	r3, r1
 801a908:	f107 0118 	add.w	r1, r7, #24
 801a90c:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[iAcol] = c[iAcol] * Sy[iAcol] - s[iAcol] * x[0];
 801a910:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801a914:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a918:	00db      	lsls	r3, r3, #3
 801a91a:	4413      	add	r3, r2
 801a91c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a920:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a924:	00db      	lsls	r3, r3, #3
 801a926:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801a92a:	4413      	add	r3, r2
 801a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a930:	f7e5 fe54 	bl	80005dc <__aeabi_dmul>
 801a934:	4602      	mov	r2, r0
 801a936:	460b      	mov	r3, r1
 801a938:	4690      	mov	r8, r2
 801a93a:	4699      	mov	r9, r3
 801a93c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a940:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a944:	00db      	lsls	r3, r3, #3
 801a946:	4413      	add	r3, r2
 801a948:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a94c:	f107 0320 	add.w	r3, r7, #32
 801a950:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a954:	f7e5 fe42 	bl	80005dc <__aeabi_dmul>
 801a958:	4602      	mov	r2, r0
 801a95a:	460b      	mov	r3, r1
 801a95c:	4610      	mov	r0, r2
 801a95e:	4619      	mov	r1, r3
 801a960:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a964:	00db      	lsls	r3, r3, #3
 801a966:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801a96a:	18d4      	adds	r4, r2, r3
 801a96c:	4602      	mov	r2, r0
 801a96e:	460b      	mov	r3, r1
 801a970:	4640      	mov	r0, r8
 801a972:	4649      	mov	r1, r9
 801a974:	f7e5 fc7a 	bl	800026c <__aeabi_dsub>
 801a978:	4602      	mov	r2, r0
 801a97a:	460b      	mov	r3, r1
 801a97c:	e9c4 2300 	strd	r2, r3, [r4]
          x[0] = c[iAcol] * x[0] + temp;
 801a980:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801a984:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a988:	00db      	lsls	r3, r3, #3
 801a98a:	4413      	add	r3, r2
 801a98c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a990:	f107 0320 	add.w	r3, r7, #32
 801a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a998:	f7e5 fe20 	bl	80005dc <__aeabi_dmul>
 801a99c:	4602      	mov	r2, r0
 801a99e:	460b      	mov	r3, r1
 801a9a0:	4610      	mov	r0, r2
 801a9a2:	4619      	mov	r1, r3
 801a9a4:	f107 0318 	add.w	r3, r7, #24
 801a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9ac:	f7e5 fc60 	bl	8000270 <__adddf3>
 801a9b0:	4602      	mov	r2, r0
 801a9b2:	460b      	mov	r3, r1
 801a9b4:	f107 0120 	add.w	r1, r7, #32
 801a9b8:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 801a9bc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a9c0:	3b01      	subs	r3, #1
 801a9c2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801a9c6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	da88      	bge.n	801a8e0 <UTMeanCovSqrt_C2vgLQ4W+0xe28>
        }

        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 801a9ce:	2301      	movs	r3, #1
 801a9d0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801a9d4:	e06c      	b.n	801aab0 <UTMeanCovSqrt_C2vgLQ4W+0xff8>
          absxk = Sy[iAcol + 3];
 801a9d6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a9da:	3303      	adds	r3, #3
 801a9dc:	00db      	lsls	r3, r3, #3
 801a9de:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801a9e2:	4413      	add	r3, r2
 801a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9e8:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 3] = absxk * c[iAcol] - s[iAcol] * x[1];
 801a9ec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801a9f0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801a9f4:	00db      	lsls	r3, r3, #3
 801a9f6:	4413      	add	r3, r2
 801a9f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a9fc:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801aa00:	f7e5 fdec 	bl	80005dc <__aeabi_dmul>
 801aa04:	4602      	mov	r2, r0
 801aa06:	460b      	mov	r3, r1
 801aa08:	4690      	mov	r8, r2
 801aa0a:	4699      	mov	r9, r3
 801aa0c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801aa10:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801aa14:	00db      	lsls	r3, r3, #3
 801aa16:	4413      	add	r3, r2
 801aa18:	e9d3 0100 	ldrd	r0, r1, [r3]
 801aa1c:	f107 0320 	add.w	r3, r7, #32
 801aa20:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801aa24:	f7e5 fdda 	bl	80005dc <__aeabi_dmul>
 801aa28:	4602      	mov	r2, r0
 801aa2a:	460b      	mov	r3, r1
 801aa2c:	4610      	mov	r0, r2
 801aa2e:	4619      	mov	r1, r3
 801aa30:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801aa34:	3303      	adds	r3, #3
 801aa36:	00db      	lsls	r3, r3, #3
 801aa38:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801aa3c:	18d4      	adds	r4, r2, r3
 801aa3e:	4602      	mov	r2, r0
 801aa40:	460b      	mov	r3, r1
 801aa42:	4640      	mov	r0, r8
 801aa44:	4649      	mov	r1, r9
 801aa46:	f7e5 fc11 	bl	800026c <__aeabi_dsub>
 801aa4a:	4602      	mov	r2, r0
 801aa4c:	460b      	mov	r3, r1
 801aa4e:	e9c4 2300 	strd	r2, r3, [r4]
          x[1] = c[iAcol] * x[1] + absxk * s[iAcol];
 801aa52:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801aa56:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801aa5a:	00db      	lsls	r3, r3, #3
 801aa5c:	4413      	add	r3, r2
 801aa5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801aa62:	f107 0320 	add.w	r3, r7, #32
 801aa66:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801aa6a:	f7e5 fdb7 	bl	80005dc <__aeabi_dmul>
 801aa6e:	4602      	mov	r2, r0
 801aa70:	460b      	mov	r3, r1
 801aa72:	4614      	mov	r4, r2
 801aa74:	461d      	mov	r5, r3
 801aa76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801aa7a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801aa7e:	00db      	lsls	r3, r3, #3
 801aa80:	4413      	add	r3, r2
 801aa82:	e9d3 0100 	ldrd	r0, r1, [r3]
 801aa86:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801aa8a:	f7e5 fda7 	bl	80005dc <__aeabi_dmul>
 801aa8e:	4602      	mov	r2, r0
 801aa90:	460b      	mov	r3, r1
 801aa92:	4620      	mov	r0, r4
 801aa94:	4629      	mov	r1, r5
 801aa96:	f7e5 fbeb 	bl	8000270 <__adddf3>
 801aa9a:	4602      	mov	r2, r0
 801aa9c:	460b      	mov	r3, r1
 801aa9e:	f107 0120 	add.w	r1, r7, #32
 801aaa2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 801aaa6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801aaaa:	3b01      	subs	r3, #1
 801aaac:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801aab0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	da8e      	bge.n	801a9d6 <UTMeanCovSqrt_C2vgLQ4W+0xf1e>
        }

        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 801aab8:	2302      	movs	r3, #2
 801aaba:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801aabe:	e06e      	b.n	801ab9e <UTMeanCovSqrt_C2vgLQ4W+0x10e6>
 801aac0:	3ff00000 	.word	0x3ff00000
          absxk = Sy[iAcol + 6];
 801aac4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801aac8:	3306      	adds	r3, #6
 801aaca:	00db      	lsls	r3, r3, #3
 801aacc:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801aad0:	4413      	add	r3, r2
 801aad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aad6:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 6] = absxk * c[iAcol] - s[iAcol] * x[2];
 801aada:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801aade:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801aae2:	00db      	lsls	r3, r3, #3
 801aae4:	4413      	add	r3, r2
 801aae6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801aaea:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801aaee:	f7e5 fd75 	bl	80005dc <__aeabi_dmul>
 801aaf2:	4602      	mov	r2, r0
 801aaf4:	460b      	mov	r3, r1
 801aaf6:	4690      	mov	r8, r2
 801aaf8:	4699      	mov	r9, r3
 801aafa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801aafe:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ab02:	00db      	lsls	r3, r3, #3
 801ab04:	4413      	add	r3, r2
 801ab06:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ab0a:	f107 0320 	add.w	r3, r7, #32
 801ab0e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801ab12:	f7e5 fd63 	bl	80005dc <__aeabi_dmul>
 801ab16:	4602      	mov	r2, r0
 801ab18:	460b      	mov	r3, r1
 801ab1a:	4610      	mov	r0, r2
 801ab1c:	4619      	mov	r1, r3
 801ab1e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ab22:	3306      	adds	r3, #6
 801ab24:	00db      	lsls	r3, r3, #3
 801ab26:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801ab2a:	18d4      	adds	r4, r2, r3
 801ab2c:	4602      	mov	r2, r0
 801ab2e:	460b      	mov	r3, r1
 801ab30:	4640      	mov	r0, r8
 801ab32:	4649      	mov	r1, r9
 801ab34:	f7e5 fb9a 	bl	800026c <__aeabi_dsub>
 801ab38:	4602      	mov	r2, r0
 801ab3a:	460b      	mov	r3, r1
 801ab3c:	e9c4 2300 	strd	r2, r3, [r4]
          x[2] = c[iAcol] * x[2] + absxk * s[iAcol];
 801ab40:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801ab44:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ab48:	00db      	lsls	r3, r3, #3
 801ab4a:	4413      	add	r3, r2
 801ab4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ab50:	f107 0320 	add.w	r3, r7, #32
 801ab54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801ab58:	f7e5 fd40 	bl	80005dc <__aeabi_dmul>
 801ab5c:	4602      	mov	r2, r0
 801ab5e:	460b      	mov	r3, r1
 801ab60:	4614      	mov	r4, r2
 801ab62:	461d      	mov	r5, r3
 801ab64:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801ab68:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ab6c:	00db      	lsls	r3, r3, #3
 801ab6e:	4413      	add	r3, r2
 801ab70:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ab74:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801ab78:	f7e5 fd30 	bl	80005dc <__aeabi_dmul>
 801ab7c:	4602      	mov	r2, r0
 801ab7e:	460b      	mov	r3, r1
 801ab80:	4620      	mov	r0, r4
 801ab82:	4629      	mov	r1, r5
 801ab84:	f7e5 fb74 	bl	8000270 <__adddf3>
 801ab88:	4602      	mov	r2, r0
 801ab8a:	460b      	mov	r3, r1
 801ab8c:	f107 0120 	add.w	r1, r7, #32
 801ab90:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 801ab94:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ab98:	3b01      	subs	r3, #1
 801ab9a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801ab9e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	da8e      	bge.n	801aac4 <UTMeanCovSqrt_C2vgLQ4W+0x100c>
        }
      }
    }

    if (guard1) {
 801aba6:	f897 328a 	ldrb.w	r3, [r7, #650]	; 0x28a
 801abaa:	2b00      	cmp	r3, #0
 801abac:	f000 82f0 	beq.w	801b190 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
      boolean_T exitg2;
      kk = 0;
 801abb0:	2300      	movs	r3, #0
 801abb2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801abb6:	2300      	movs	r3, #0
 801abb8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801abbc:	e0d3      	b.n	801ad66 <UTMeanCovSqrt_C2vgLQ4W+0x12ae>
        i_1 = 0;
 801abbe:	2300      	movs	r3, #0
 801abc0:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801abc4:	2300      	movs	r3, #0
 801abc6:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801abca:	e0bd      	b.n	801ad48 <UTMeanCovSqrt_C2vgLQ4W+0x1290>
          Sy_tmp = i_1 + iAcol;
 801abcc:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 801abd0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801abd4:	4413      	add	r3, r2
 801abd6:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy_0[Sy_tmp] = 0.0;
 801abda:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801abde:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801abe2:	00db      	lsls	r3, r3, #3
 801abe4:	18d1      	adds	r1, r2, r3
 801abe6:	f04f 0200 	mov.w	r2, #0
 801abea:	f04f 0300 	mov.w	r3, #0
 801abee:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk] * Sy[i_1];
 801abf2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801abf6:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801abfa:	00db      	lsls	r3, r3, #3
 801abfc:	4413      	add	r3, r2
 801abfe:	e9d3 4500 	ldrd	r4, r5, [r3]
 801ac02:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ac06:	00db      	lsls	r3, r3, #3
 801ac08:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801ac0c:	4413      	add	r3, r2
 801ac0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ac12:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801ac16:	00db      	lsls	r3, r3, #3
 801ac18:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801ac1c:	4413      	add	r3, r2
 801ac1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac22:	f7e5 fcdb 	bl	80005dc <__aeabi_dmul>
 801ac26:	4602      	mov	r2, r0
 801ac28:	460b      	mov	r3, r1
 801ac2a:	4620      	mov	r0, r4
 801ac2c:	4629      	mov	r1, r5
 801ac2e:	f7e5 fb1f 	bl	8000270 <__adddf3>
 801ac32:	4602      	mov	r2, r0
 801ac34:	460b      	mov	r3, r1
 801ac36:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801ac3a:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801ac3e:	00c9      	lsls	r1, r1, #3
 801ac40:	4401      	add	r1, r0
 801ac42:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 1] * Sy[i_1 + 1];
 801ac46:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801ac4a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801ac4e:	00db      	lsls	r3, r3, #3
 801ac50:	4413      	add	r3, r2
 801ac52:	e9d3 4500 	ldrd	r4, r5, [r3]
 801ac56:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ac5a:	3301      	adds	r3, #1
 801ac5c:	00db      	lsls	r3, r3, #3
 801ac5e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801ac62:	4413      	add	r3, r2
 801ac64:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ac68:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801ac6c:	3301      	adds	r3, #1
 801ac6e:	00db      	lsls	r3, r3, #3
 801ac70:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801ac74:	4413      	add	r3, r2
 801ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac7a:	f7e5 fcaf 	bl	80005dc <__aeabi_dmul>
 801ac7e:	4602      	mov	r2, r0
 801ac80:	460b      	mov	r3, r1
 801ac82:	4620      	mov	r0, r4
 801ac84:	4629      	mov	r1, r5
 801ac86:	f7e5 faf3 	bl	8000270 <__adddf3>
 801ac8a:	4602      	mov	r2, r0
 801ac8c:	460b      	mov	r3, r1
 801ac8e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801ac92:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801ac96:	00c9      	lsls	r1, r1, #3
 801ac98:	4401      	add	r1, r0
 801ac9a:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 2] * Sy[i_1 + 2];
 801ac9e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801aca2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801aca6:	00db      	lsls	r3, r3, #3
 801aca8:	4413      	add	r3, r2
 801acaa:	e9d3 4500 	ldrd	r4, r5, [r3]
 801acae:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801acb2:	3302      	adds	r3, #2
 801acb4:	00db      	lsls	r3, r3, #3
 801acb6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801acba:	4413      	add	r3, r2
 801acbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801acc0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801acc4:	3302      	adds	r3, #2
 801acc6:	00db      	lsls	r3, r3, #3
 801acc8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801accc:	4413      	add	r3, r2
 801acce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acd2:	f7e5 fc83 	bl	80005dc <__aeabi_dmul>
 801acd6:	4602      	mov	r2, r0
 801acd8:	460b      	mov	r3, r1
 801acda:	4620      	mov	r0, r4
 801acdc:	4629      	mov	r1, r5
 801acde:	f7e5 fac7 	bl	8000270 <__adddf3>
 801ace2:	4602      	mov	r2, r0
 801ace4:	460b      	mov	r3, r1
 801ace6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801acea:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801acee:	00c9      	lsls	r1, r1, #3
 801acf0:	4401      	add	r1, r0
 801acf2:	e9c1 2300 	strd	r2, r3, [r1]
          Y1_0[i + kk] = Y1[i] * Y1[iAcol];
 801acf6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801acfa:	00db      	lsls	r3, r3, #3
 801acfc:	1d3a      	adds	r2, r7, #4
 801acfe:	6812      	ldr	r2, [r2, #0]
 801ad00:	4413      	add	r3, r2
 801ad02:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ad06:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ad0a:	00db      	lsls	r3, r3, #3
 801ad0c:	1d3a      	adds	r2, r7, #4
 801ad0e:	6812      	ldr	r2, [r2, #0]
 801ad10:	4413      	add	r3, r2
 801ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad16:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 801ad1a:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 801ad1e:	442c      	add	r4, r5
 801ad20:	f7e5 fc5c 	bl	80005dc <__aeabi_dmul>
 801ad24:	4602      	mov	r2, r0
 801ad26:	460b      	mov	r3, r1
 801ad28:	f107 0068 	add.w	r0, r7, #104	; 0x68
 801ad2c:	00e1      	lsls	r1, r4, #3
 801ad2e:	4401      	add	r1, r0
 801ad30:	e9c1 2300 	strd	r2, r3, [r1]
          i_1 += 3;
 801ad34:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801ad38:	3303      	adds	r3, #3
 801ad3a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801ad3e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801ad42:	3301      	adds	r3, #1
 801ad44:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801ad48:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801ad4c:	2b02      	cmp	r3, #2
 801ad4e:	f77f af3d 	ble.w	801abcc <UTMeanCovSqrt_C2vgLQ4W+0x1114>
        }

        kk += 3;
 801ad52:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ad56:	3303      	adds	r3, #3
 801ad58:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801ad5c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ad60:	3301      	adds	r3, #1
 801ad62:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801ad66:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ad6a:	2b02      	cmp	r3, #2
 801ad6c:	f77f af27 	ble.w	801abbe <UTMeanCovSqrt_C2vgLQ4W+0x1106>
      }

      errorCondition = true;
 801ad70:	2301      	movs	r3, #1
 801ad72:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      for (iAcol = 0; iAcol < 9; iAcol++) {
 801ad76:	2300      	movs	r3, #0
 801ad78:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801ad7c:	e049      	b.n	801ae12 <UTMeanCovSqrt_C2vgLQ4W+0x135a>
        temp = Sy_0[iAcol] - Y1_0[iAcol];
 801ad7e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801ad82:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ad86:	00db      	lsls	r3, r3, #3
 801ad88:	4413      	add	r3, r2
 801ad8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ad8e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801ad92:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ad96:	00db      	lsls	r3, r3, #3
 801ad98:	4413      	add	r3, r2
 801ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad9e:	f7e5 fa65 	bl	800026c <__aeabi_dsub>
 801ada2:	4602      	mov	r2, r0
 801ada4:	460b      	mov	r3, r1
 801ada6:	f107 0118 	add.w	r1, r7, #24
 801adaa:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 801adae:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d01c      	beq.n	801adf0 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
 801adb6:	f107 0318 	add.w	r3, r7, #24
 801adba:	ed93 7b00 	vldr	d7, [r3]
 801adbe:	eeb0 0a47 	vmov.f32	s0, s14
 801adc2:	eef0 0a67 	vmov.f32	s1, s15
 801adc6:	f003 fbf5 	bl	801e5b4 <rtIsInf>
 801adca:	4603      	mov	r3, r0
 801adcc:	2b00      	cmp	r3, #0
 801adce:	d10c      	bne.n	801adea <UTMeanCovSqrt_C2vgLQ4W+0x1332>
 801add0:	f107 0318 	add.w	r3, r7, #24
 801add4:	ed93 7b00 	vldr	d7, [r3]
 801add8:	eeb0 0a47 	vmov.f32	s0, s14
 801addc:	eef0 0a67 	vmov.f32	s1, s15
 801ade0:	f003 fc0c 	bl	801e5fc <rtIsNaN>
 801ade4:	4603      	mov	r3, r0
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d002      	beq.n	801adf0 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
          errorCondition = false;
 801adea:	2300      	movs	r3, #0
 801adec:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
        }

        Ss[iAcol] = temp;
 801adf0:	f107 0318 	add.w	r3, r7, #24
 801adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adf8:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 801adfc:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 801ae00:	00c9      	lsls	r1, r1, #3
 801ae02:	4401      	add	r1, r0
 801ae04:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 801ae08:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ae0c:	3301      	adds	r3, #1
 801ae0e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801ae12:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ae16:	2b08      	cmp	r3, #8
 801ae18:	ddb1      	ble.n	801ad7e <UTMeanCovSqrt_C2vgLQ4W+0x12c6>
      }

      if (errorCondition) {
 801ae1a:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d00a      	beq.n	801ae38 <UTMeanCovSqrt_C2vgLQ4W+0x1380>
        svd_u3DvUgOe(Ss, Y1_0, s, Sy_0);
 801ae22:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ae26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801ae2a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801ae2e:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 801ae32:	f003 fc35 	bl	801e6a0 <svd_u3DvUgOe>
 801ae36:	e02c      	b.n	801ae92 <UTMeanCovSqrt_C2vgLQ4W+0x13da>
      } else {
        s[0] = (rtNaN);
 801ae38:	4bbc      	ldr	r3, [pc, #752]	; (801b12c <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae3e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801ae42:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 801ae46:	4bb9      	ldr	r3, [pc, #740]	; (801b12c <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801ae48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae4c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801ae50:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 801ae54:	4bb5      	ldr	r3, [pc, #724]	; (801b12c <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801ae56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae5a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801ae5e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (kk = 0; kk < 9; kk++) {
 801ae62:	2300      	movs	r3, #0
 801ae64:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801ae68:	e00f      	b.n	801ae8a <UTMeanCovSqrt_C2vgLQ4W+0x13d2>
          Sy_0[kk] = (rtNaN);
 801ae6a:	4bb0      	ldr	r3, [pc, #704]	; (801b12c <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae70:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801ae74:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 801ae78:	00c9      	lsls	r1, r1, #3
 801ae7a:	4401      	add	r1, r0
 801ae7c:	e9c1 2300 	strd	r2, r3, [r1]
        for (kk = 0; kk < 9; kk++) {
 801ae80:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ae84:	3301      	adds	r3, #1
 801ae86:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801ae8a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ae8e:	2b08      	cmp	r3, #8
 801ae90:	ddeb      	ble.n	801ae6a <UTMeanCovSqrt_C2vgLQ4W+0x13b2>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 801ae92:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ae96:	2248      	movs	r2, #72	; 0x48
 801ae98:	2100      	movs	r1, #0
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	f011 ff60 	bl	802cd60 <memset>
      Ss[0] = s[0];
 801aea0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aea8:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 801aeac:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 801aeb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801aeb4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801aeb8:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 801aebc:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 801aec0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801aec4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801aec8:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 801aecc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (kk = 0; kk < 9; kk++) {
 801aed0:	2300      	movs	r3, #0
 801aed2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801aed6:	e01e      	b.n	801af16 <UTMeanCovSqrt_C2vgLQ4W+0x145e>
        Ss[kk] = sqrt(Ss[kk]);
 801aed8:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801aedc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801aee0:	00db      	lsls	r3, r3, #3
 801aee2:	4413      	add	r3, r2
 801aee4:	ed93 7b00 	vldr	d7, [r3]
 801aee8:	eeb0 0a47 	vmov.f32	s0, s14
 801aeec:	eef0 0a67 	vmov.f32	s1, s15
 801aef0:	f012 f8ee 	bl	802d0d0 <sqrt>
 801aef4:	eeb0 7a40 	vmov.f32	s14, s0
 801aef8:	eef0 7a60 	vmov.f32	s15, s1
 801aefc:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801af00:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801af04:	00db      	lsls	r3, r3, #3
 801af06:	4413      	add	r3, r2
 801af08:	ed83 7b00 	vstr	d7, [r3]
      for (kk = 0; kk < 9; kk++) {
 801af0c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801af10:	3301      	adds	r3, #1
 801af12:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801af16:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801af1a:	2b08      	cmp	r3, #8
 801af1c:	dddc      	ble.n	801aed8 <UTMeanCovSqrt_C2vgLQ4W+0x1420>
      }

      kk = 0;
 801af1e:	2300      	movs	r3, #0
 801af20:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801af24:	2300      	movs	r3, #0
 801af26:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801af2a:	e0c0      	b.n	801b0ae <UTMeanCovSqrt_C2vgLQ4W+0x15f6>
        i_1 = 0;
 801af2c:	2300      	movs	r3, #0
 801af2e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801af32:	2300      	movs	r3, #0
 801af34:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801af38:	e0aa      	b.n	801b090 <UTMeanCovSqrt_C2vgLQ4W+0x15d8>
          Sy_tmp = i_1 + iAcol;
 801af3a:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 801af3e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801af42:	4413      	add	r3, r2
 801af44:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy[Sy_tmp] = 0.0;
 801af48:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801af4c:	00db      	lsls	r3, r3, #3
 801af4e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801af52:	18d1      	adds	r1, r2, r3
 801af54:	f04f 0200 	mov.w	r2, #0
 801af58:	f04f 0300 	mov.w	r3, #0
 801af5c:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[Sy_tmp] += Ss[kk] * Sy_0[i];
 801af60:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801af64:	00db      	lsls	r3, r3, #3
 801af66:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801af6a:	4413      	add	r3, r2
 801af6c:	e9d3 4500 	ldrd	r4, r5, [r3]
 801af70:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801af74:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801af78:	00db      	lsls	r3, r3, #3
 801af7a:	4413      	add	r3, r2
 801af7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801af80:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801af84:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801af88:	00db      	lsls	r3, r3, #3
 801af8a:	4413      	add	r3, r2
 801af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af90:	f7e5 fb24 	bl	80005dc <__aeabi_dmul>
 801af94:	4602      	mov	r2, r0
 801af96:	460b      	mov	r3, r1
 801af98:	4610      	mov	r0, r2
 801af9a:	4619      	mov	r1, r3
 801af9c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801afa0:	00db      	lsls	r3, r3, #3
 801afa2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801afa6:	18d6      	adds	r6, r2, r3
 801afa8:	4602      	mov	r2, r0
 801afaa:	460b      	mov	r3, r1
 801afac:	4620      	mov	r0, r4
 801afae:	4629      	mov	r1, r5
 801afb0:	f7e5 f95e 	bl	8000270 <__adddf3>
 801afb4:	4602      	mov	r2, r0
 801afb6:	460b      	mov	r3, r1
 801afb8:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 1] * Sy_0[i + 3];
 801afbc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801afc0:	00db      	lsls	r3, r3, #3
 801afc2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801afc6:	4413      	add	r3, r2
 801afc8:	e9d3 4500 	ldrd	r4, r5, [r3]
 801afcc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801afd0:	3301      	adds	r3, #1
 801afd2:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801afd6:	00db      	lsls	r3, r3, #3
 801afd8:	4413      	add	r3, r2
 801afda:	e9d3 0100 	ldrd	r0, r1, [r3]
 801afde:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801afe2:	3303      	adds	r3, #3
 801afe4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801afe8:	00db      	lsls	r3, r3, #3
 801afea:	4413      	add	r3, r2
 801afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aff0:	f7e5 faf4 	bl	80005dc <__aeabi_dmul>
 801aff4:	4602      	mov	r2, r0
 801aff6:	460b      	mov	r3, r1
 801aff8:	4610      	mov	r0, r2
 801affa:	4619      	mov	r1, r3
 801affc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801b000:	00db      	lsls	r3, r3, #3
 801b002:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801b006:	18d6      	adds	r6, r2, r3
 801b008:	4602      	mov	r2, r0
 801b00a:	460b      	mov	r3, r1
 801b00c:	4620      	mov	r0, r4
 801b00e:	4629      	mov	r1, r5
 801b010:	f7e5 f92e 	bl	8000270 <__adddf3>
 801b014:	4602      	mov	r2, r0
 801b016:	460b      	mov	r3, r1
 801b018:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 2] * Sy_0[i + 6];
 801b01c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801b020:	00db      	lsls	r3, r3, #3
 801b022:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801b026:	4413      	add	r3, r2
 801b028:	e9d3 4500 	ldrd	r4, r5, [r3]
 801b02c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b030:	3302      	adds	r3, #2
 801b032:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801b036:	00db      	lsls	r3, r3, #3
 801b038:	4413      	add	r3, r2
 801b03a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b03e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801b042:	3306      	adds	r3, #6
 801b044:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801b048:	00db      	lsls	r3, r3, #3
 801b04a:	4413      	add	r3, r2
 801b04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b050:	f7e5 fac4 	bl	80005dc <__aeabi_dmul>
 801b054:	4602      	mov	r2, r0
 801b056:	460b      	mov	r3, r1
 801b058:	4610      	mov	r0, r2
 801b05a:	4619      	mov	r1, r3
 801b05c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801b060:	00db      	lsls	r3, r3, #3
 801b062:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801b066:	18d6      	adds	r6, r2, r3
 801b068:	4602      	mov	r2, r0
 801b06a:	460b      	mov	r3, r1
 801b06c:	4620      	mov	r0, r4
 801b06e:	4629      	mov	r1, r5
 801b070:	f7e5 f8fe 	bl	8000270 <__adddf3>
 801b074:	4602      	mov	r2, r0
 801b076:	460b      	mov	r3, r1
 801b078:	e9c6 2300 	strd	r2, r3, [r6]
          i_1 += 3;
 801b07c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801b080:	3303      	adds	r3, #3
 801b082:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801b086:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801b08a:	3301      	adds	r3, #1
 801b08c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801b090:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801b094:	2b02      	cmp	r3, #2
 801b096:	f77f af50 	ble.w	801af3a <UTMeanCovSqrt_C2vgLQ4W+0x1482>
        }

        kk += 3;
 801b09a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b09e:	3303      	adds	r3, #3
 801b0a0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801b0a4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b0a8:	3301      	adds	r3, #1
 801b0aa:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801b0ae:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b0b2:	2b02      	cmp	r3, #2
 801b0b4:	f77f af3a 	ble.w	801af2c <UTMeanCovSqrt_C2vgLQ4W+0x1474>
      }

      errorCondition = true;
 801b0b8:	2301      	movs	r3, #1
 801b0ba:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      kk = 0;
 801b0be:	2300      	movs	r3, #0
 801b0c0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      exitg2 = false;
 801b0c4:	2300      	movs	r3, #0
 801b0c6:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 801b0ca:	e044      	b.n	801b156 <UTMeanCovSqrt_C2vgLQ4W+0x169e>
        int32_T exitg1;
        iAcol = kk + 1;
 801b0cc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b0d0:	3301      	adds	r3, #1
 801b0d2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
        do {
          exitg1 = 0;
 801b0d6:	2300      	movs	r3, #0
 801b0d8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          if (iAcol + 1 < 4) {
 801b0dc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b0e0:	2b02      	cmp	r3, #2
 801b0e2:	dc25      	bgt.n	801b130 <UTMeanCovSqrt_C2vgLQ4W+0x1678>
            if (!(Sy[3 * kk + iAcol] == 0.0)) {
 801b0e4:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801b0e8:	4613      	mov	r3, r2
 801b0ea:	005b      	lsls	r3, r3, #1
 801b0ec:	441a      	add	r2, r3
 801b0ee:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b0f2:	4413      	add	r3, r2
 801b0f4:	00db      	lsls	r3, r3, #3
 801b0f6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801b0fa:	4413      	add	r3, r2
 801b0fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b100:	f04f 0200 	mov.w	r2, #0
 801b104:	f04f 0300 	mov.w	r3, #0
 801b108:	f7e5 fcd0 	bl	8000aac <__aeabi_dcmpeq>
 801b10c:	4603      	mov	r3, r0
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d106      	bne.n	801b120 <UTMeanCovSqrt_C2vgLQ4W+0x1668>
              errorCondition = false;
 801b112:	2300      	movs	r3, #0
 801b114:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
              exitg1 = 1;
 801b118:	2301      	movs	r3, #1
 801b11a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 801b11e:	e00f      	b.n	801b140 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
            } else {
              iAcol++;
 801b120:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b124:	3301      	adds	r3, #1
 801b126:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801b12a:	e009      	b.n	801b140 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
 801b12c:	2001ded0 	.word	0x2001ded0
            }
          } else {
            kk++;
 801b130:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b134:	3301      	adds	r3, #1
 801b136:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            exitg1 = 2;
 801b13a:	2302      	movs	r3, #2
 801b13c:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          }
        } while (exitg1 == 0);
 801b140:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801b144:	2b00      	cmp	r3, #0
 801b146:	d0c6      	beq.n	801b0d6 <UTMeanCovSqrt_C2vgLQ4W+0x161e>

        if (exitg1 == 1) {
 801b148:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801b14c:	2b01      	cmp	r3, #1
 801b14e:	d102      	bne.n	801b156 <UTMeanCovSqrt_C2vgLQ4W+0x169e>
          exitg2 = true;
 801b150:	2301      	movs	r3, #1
 801b152:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 801b156:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	d103      	bne.n	801b166 <UTMeanCovSqrt_C2vgLQ4W+0x16ae>
 801b15e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b162:	2b02      	cmp	r3, #2
 801b164:	ddb2      	ble.n	801b0cc <UTMeanCovSqrt_C2vgLQ4W+0x1614>
        }
      }

      if (!errorCondition) {
 801b166:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d110      	bne.n	801b190 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
        memcpy(&Sy_0[0], &Sy[0], 9U * sizeof(real_T));
 801b16e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b172:	2248      	movs	r2, #72	; 0x48
 801b174:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 801b178:	4618      	mov	r0, r3
 801b17a:	f011 fde3 	bl	802cd44 <memcpy>
        qr_5a2P8Gh6(Sy_0, Y1_0, Sy);
 801b17e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801b182:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b186:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801b18a:	4618      	mov	r0, r3
 801b18c:	f000 fec4 	bl	801bf18 <qr_5a2P8Gh6>
      }
    }

    kk = 0;
 801b190:	2300      	movs	r3, #0
 801b192:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801b196:	2300      	movs	r3, #0
 801b198:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801b19c:	e03d      	b.n	801b21a <UTMeanCovSqrt_C2vgLQ4W+0x1762>
      Sy_0[kk] = Sy[iAcol];
 801b19e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b1a2:	00db      	lsls	r3, r3, #3
 801b1a4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801b1a8:	4413      	add	r3, r2
 801b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1ae:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801b1b2:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 801b1b6:	00c9      	lsls	r1, r1, #3
 801b1b8:	4401      	add	r1, r0
 801b1ba:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 801b1be:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b1c2:	3303      	adds	r3, #3
 801b1c4:	00db      	lsls	r3, r3, #3
 801b1c6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801b1ca:	4413      	add	r3, r2
 801b1cc:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801b1d0:	1c51      	adds	r1, r2, #1
 801b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1d6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801b1da:	00c9      	lsls	r1, r1, #3
 801b1dc:	4401      	add	r1, r0
 801b1de:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 801b1e2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b1e6:	3306      	adds	r3, #6
 801b1e8:	00db      	lsls	r3, r3, #3
 801b1ea:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801b1ee:	4413      	add	r3, r2
 801b1f0:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801b1f4:	1c91      	adds	r1, r2, #2
 801b1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1fa:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801b1fe:	00c9      	lsls	r1, r1, #3
 801b200:	4401      	add	r1, r0
 801b202:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 801b206:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b20a:	3303      	adds	r3, #3
 801b20c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801b210:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b214:	3301      	adds	r3, #1
 801b216:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801b21a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b21e:	2b02      	cmp	r3, #2
 801b220:	ddbd      	ble.n	801b19e <UTMeanCovSqrt_C2vgLQ4W+0x16e6>
    }

    for (kk = 0; kk < 9; kk++) {
 801b222:	2300      	movs	r3, #0
 801b224:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b228:	e01a      	b.n	801b260 <UTMeanCovSqrt_C2vgLQ4W+0x17a8>
      Sy[kk] = signOOM * Sy_0[kk];
 801b22a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801b22e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b232:	00db      	lsls	r3, r3, #3
 801b234:	4413      	add	r3, r2
 801b236:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b23a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b23e:	00db      	lsls	r3, r3, #3
 801b240:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801b244:	18d4      	adds	r4, r2, r3
 801b246:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b24a:	f7e5 f9c7 	bl	80005dc <__aeabi_dmul>
 801b24e:	4602      	mov	r2, r0
 801b250:	460b      	mov	r3, r1
 801b252:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 801b256:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b25a:	3301      	adds	r3, #1
 801b25c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b260:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b264:	2b08      	cmp	r3, #8
 801b266:	dde0      	ble.n	801b22a <UTMeanCovSqrt_C2vgLQ4W+0x1772>
    }
  }

  iAcol = 0;
 801b268:	2300      	movs	r3, #0
 801b26a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801b26e:	2300      	movs	r3, #0
 801b270:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b274:	e057      	b.n	801b326 <UTMeanCovSqrt_C2vgLQ4W+0x186e>
    X2[iAcol] -= X1[0];
 801b276:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b27a:	00db      	lsls	r3, r3, #3
 801b27c:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b280:	4413      	add	r3, r2
 801b282:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b286:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b28e:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801b292:	00e4      	lsls	r4, r4, #3
 801b294:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 801b298:	442c      	add	r4, r5
 801b29a:	f7e4 ffe7 	bl	800026c <__aeabi_dsub>
 801b29e:	4602      	mov	r2, r0
 801b2a0:	460b      	mov	r3, r1
 801b2a2:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 1] -= X1[1];
 801b2a6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b2aa:	3301      	adds	r3, #1
 801b2ac:	00db      	lsls	r3, r3, #3
 801b2ae:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b2b2:	4413      	add	r3, r2
 801b2b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b2b8:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801b2bc:	3308      	adds	r3, #8
 801b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2c2:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801b2c6:	3401      	adds	r4, #1
 801b2c8:	00e4      	lsls	r4, r4, #3
 801b2ca:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 801b2ce:	442c      	add	r4, r5
 801b2d0:	f7e4 ffcc 	bl	800026c <__aeabi_dsub>
 801b2d4:	4602      	mov	r2, r0
 801b2d6:	460b      	mov	r3, r1
 801b2d8:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 2] -= X1[2];
 801b2dc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b2e0:	3302      	adds	r3, #2
 801b2e2:	00db      	lsls	r3, r3, #3
 801b2e4:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b2e8:	4413      	add	r3, r2
 801b2ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b2ee:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801b2f2:	3310      	adds	r3, #16
 801b2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2f8:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801b2fc:	3402      	adds	r4, #2
 801b2fe:	00e4      	lsls	r4, r4, #3
 801b300:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 801b304:	442c      	add	r4, r5
 801b306:	f7e4 ffb1 	bl	800026c <__aeabi_dsub>
 801b30a:	4602      	mov	r2, r0
 801b30c:	460b      	mov	r3, r1
 801b30e:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 801b312:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b316:	3303      	adds	r3, #3
 801b318:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801b31c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b320:	3301      	adds	r3, #1
 801b322:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b326:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b32a:	2b05      	cmp	r3, #5
 801b32c:	dda3      	ble.n	801b276 <UTMeanCovSqrt_C2vgLQ4W+0x17be>
  }

  signOOM = covWeights_1 * OOM;
 801b32e:	f107 0308 	add.w	r3, r7, #8
 801b332:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b336:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 801b33a:	f7e5 f94f 	bl	80005dc <__aeabi_dmul>
 801b33e:	4602      	mov	r2, r0
 801b340:	460b      	mov	r3, r1
 801b342:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  for (kk = 0; kk < 3; kk++) {
 801b346:	2300      	movs	r3, #0
 801b348:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b34c:	e071      	b.n	801b432 <UTMeanCovSqrt_C2vgLQ4W+0x197a>
    iAcol = 0;
 801b34e:	2300      	movs	r3, #0
 801b350:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 801b354:	2300      	movs	r3, #0
 801b356:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 801b35a:	e061      	b.n	801b420 <UTMeanCovSqrt_C2vgLQ4W+0x1968>
      Sy_tmp = iAcol + kk;
 801b35c:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801b360:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b364:	4413      	add	r3, r2
 801b366:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
      Ss[Sy_tmp] = 0.0;
 801b36a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801b36e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801b372:	00db      	lsls	r3, r3, #3
 801b374:	18d1      	adds	r1, r2, r3
 801b376:	f04f 0200 	mov.w	r2, #0
 801b37a:	f04f 0300 	mov.w	r3, #0
 801b37e:	e9c1 2300 	strd	r2, r3, [r1]
      i = 0;
 801b382:	2300      	movs	r3, #0
 801b384:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 801b388:	2300      	movs	r3, #0
 801b38a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 801b38e:	e039      	b.n	801b404 <UTMeanCovSqrt_C2vgLQ4W+0x194c>
        Ss[Sy_tmp] += X2[i + kk] * Y2[i + i_1];
 801b390:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801b394:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801b398:	00db      	lsls	r3, r3, #3
 801b39a:	4413      	add	r3, r2
 801b39c:	e9d3 4500 	ldrd	r4, r5, [r3]
 801b3a0:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 801b3a4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b3a8:	4413      	add	r3, r2
 801b3aa:	00db      	lsls	r3, r3, #3
 801b3ac:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801b3b0:	4413      	add	r3, r2
 801b3b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b3b6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 801b3ba:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801b3be:	4413      	add	r3, r2
 801b3c0:	00db      	lsls	r3, r3, #3
 801b3c2:	463a      	mov	r2, r7
 801b3c4:	6812      	ldr	r2, [r2, #0]
 801b3c6:	4413      	add	r3, r2
 801b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3cc:	f7e5 f906 	bl	80005dc <__aeabi_dmul>
 801b3d0:	4602      	mov	r2, r0
 801b3d2:	460b      	mov	r3, r1
 801b3d4:	4620      	mov	r0, r4
 801b3d6:	4629      	mov	r1, r5
 801b3d8:	f7e4 ff4a 	bl	8000270 <__adddf3>
 801b3dc:	4602      	mov	r2, r0
 801b3de:	460b      	mov	r3, r1
 801b3e0:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 801b3e4:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801b3e8:	00c9      	lsls	r1, r1, #3
 801b3ea:	4401      	add	r1, r0
 801b3ec:	e9c1 2300 	strd	r2, r3, [r1]
        i += 3;
 801b3f0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801b3f4:	3303      	adds	r3, #3
 801b3f6:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 801b3fa:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 801b3fe:	3301      	adds	r3, #1
 801b400:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 801b404:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 801b408:	2b05      	cmp	r3, #5
 801b40a:	ddc1      	ble.n	801b390 <UTMeanCovSqrt_C2vgLQ4W+0x18d8>
      }

      iAcol += 3;
 801b40c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b410:	3303      	adds	r3, #3
 801b412:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 801b416:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801b41a:	3301      	adds	r3, #1
 801b41c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 801b420:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801b424:	2b02      	cmp	r3, #2
 801b426:	dd99      	ble.n	801b35c <UTMeanCovSqrt_C2vgLQ4W+0x18a4>
  for (kk = 0; kk < 3; kk++) {
 801b428:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b42c:	3301      	adds	r3, #1
 801b42e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b432:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b436:	2b02      	cmp	r3, #2
 801b438:	dd89      	ble.n	801b34e <UTMeanCovSqrt_C2vgLQ4W+0x1896>
    }
  }

  for (kk = 0; kk < 9; kk++) {
 801b43a:	2300      	movs	r3, #0
 801b43c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b440:	e01a      	b.n	801b478 <UTMeanCovSqrt_C2vgLQ4W+0x19c0>
    Pxy[kk] = Ss[kk] * signOOM;
 801b442:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801b446:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b44a:	00db      	lsls	r3, r3, #3
 801b44c:	4413      	add	r3, r2
 801b44e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b452:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b456:	00db      	lsls	r3, r3, #3
 801b458:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801b45c:	18d4      	adds	r4, r2, r3
 801b45e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b462:	f7e5 f8bb 	bl	80005dc <__aeabi_dmul>
 801b466:	4602      	mov	r2, r0
 801b468:	460b      	mov	r3, r1
 801b46a:	e9c4 2300 	strd	r2, r3, [r4]
  for (kk = 0; kk < 9; kk++) {
 801b46e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b472:	3301      	adds	r3, #1
 801b474:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b478:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b47c:	2b08      	cmp	r3, #8
 801b47e:	dde0      	ble.n	801b442 <UTMeanCovSqrt_C2vgLQ4W+0x198a>
  }
}
 801b480:	bf00      	nop
 801b482:	bf00      	nop
 801b484:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 801b488:	46bd      	mov	sp, r7
 801b48a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b48e:	bf00      	nop

0801b490 <UTMeanCovSqrt_C6QfB9Td>:
#include "rotate_LZ7ctbe0.h"

void UTMeanCovSqrt_C6QfB9Td(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1, real_T Y2[6], const real_T X1[3], real_T
  X2[18], real_T *Ymean, real_T *Sy, real_T Pxy[3])
{
 801b490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b494:	ed2d 8b02 	vpush	{d8}
 801b498:	b0ac      	sub	sp, #176	; 0xb0
 801b49a:	af00      	add	r7, sp, #0
 801b49c:	6378      	str	r0, [r7, #52]	; 0x34
 801b49e:	6339      	str	r1, [r7, #48]	; 0x30
 801b4a0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 801b4a4:	ed87 1b08 	vstr	d1, [r7, #32]
 801b4a8:	61fa      	str	r2, [r7, #28]
 801b4aa:	61bb      	str	r3, [r7, #24]
  real_T signOOM;
  real_T xnorm;
  int32_T b_k;
  int32_T i;
  int32_T knt;
  *Ymean = Y1 * meanWeights[0];
 801b4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b4b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801b4b6:	f7e5 f891 	bl	80005dc <__aeabi_dmul>
 801b4ba:	4602      	mov	r2, r0
 801b4bc:	460b      	mov	r3, r1
 801b4be:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801b4c2:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 801b4c6:	2300      	movs	r3, #0
 801b4c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801b4cc:	e021      	b.n	801b512 <UTMeanCovSqrt_C6QfB9Td+0x82>
    *Ymean += Y2[knt] * meanWeights[1];
 801b4ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b4d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 801b4d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b4da:	00db      	lsls	r3, r3, #3
 801b4dc:	69fa      	ldr	r2, [r7, #28]
 801b4de:	4413      	add	r3, r2
 801b4e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4e6:	3308      	adds	r3, #8
 801b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ec:	f7e5 f876 	bl	80005dc <__aeabi_dmul>
 801b4f0:	4602      	mov	r2, r0
 801b4f2:	460b      	mov	r3, r1
 801b4f4:	4620      	mov	r0, r4
 801b4f6:	4629      	mov	r1, r5
 801b4f8:	f7e4 feba 	bl	8000270 <__adddf3>
 801b4fc:	4602      	mov	r2, r0
 801b4fe:	460b      	mov	r3, r1
 801b500:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801b504:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 801b508:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b50c:	3301      	adds	r3, #1
 801b50e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801b512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b516:	2b05      	cmp	r3, #5
 801b518:	ddd9      	ble.n	801b4ce <UTMeanCovSqrt_C6QfB9Td+0x3e>
  }

  *Ymean *= OOM;
 801b51a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b51e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801b526:	f7e5 f859 	bl	80005dc <__aeabi_dmul>
 801b52a:	4602      	mov	r2, r0
 801b52c:	460b      	mov	r3, r1
 801b52e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801b532:	e9c1 2300 	strd	r2, r3, [r1]
  Y1 -= *Ymean;
 801b536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b53e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801b542:	f7e4 fe93 	bl	800026c <__aeabi_dsub>
 801b546:	4602      	mov	r2, r0
 801b548:	460b      	mov	r3, r1
 801b54a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (knt = 0; knt < 6; knt++) {
 801b54e:	2300      	movs	r3, #0
 801b550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801b554:	e01c      	b.n	801b590 <UTMeanCovSqrt_C6QfB9Td+0x100>
    Y2[knt] -= *Ymean;
 801b556:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b55a:	00db      	lsls	r3, r3, #3
 801b55c:	69fa      	ldr	r2, [r7, #28]
 801b55e:	4413      	add	r3, r2
 801b560:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b568:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b56c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b570:	00db      	lsls	r3, r3, #3
 801b572:	69fa      	ldr	r2, [r7, #28]
 801b574:	18d4      	adds	r4, r2, r3
 801b576:	4642      	mov	r2, r8
 801b578:	464b      	mov	r3, r9
 801b57a:	f7e4 fe77 	bl	800026c <__aeabi_dsub>
 801b57e:	4602      	mov	r2, r0
 801b580:	460b      	mov	r3, r1
 801b582:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 6; knt++) {
 801b586:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b58a:	3301      	adds	r3, #1
 801b58c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801b590:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b594:	2b05      	cmp	r3, #5
 801b596:	ddde      	ble.n	801b556 <UTMeanCovSqrt_C6QfB9Td+0xc6>
  }

  if (rtIsNaN(OOM)) {
 801b598:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 801b59c:	f003 f82e 	bl	801e5fc <rtIsNaN>
 801b5a0:	4603      	mov	r3, r0
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d004      	beq.n	801b5b0 <UTMeanCovSqrt_C6QfB9Td+0x120>
    signOOM = OOM;
 801b5a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801b5aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 801b5ae:	e025      	b.n	801b5fc <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else if (OOM < 0.0) {
 801b5b0:	f04f 0200 	mov.w	r2, #0
 801b5b4:	f04f 0300 	mov.w	r3, #0
 801b5b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801b5bc:	f7e5 fa80 	bl	8000ac0 <__aeabi_dcmplt>
 801b5c0:	4603      	mov	r3, r0
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d005      	beq.n	801b5d2 <UTMeanCovSqrt_C6QfB9Td+0x142>
    signOOM = -1.0;
 801b5c6:	f04f 0200 	mov.w	r2, #0
 801b5ca:	4bc3      	ldr	r3, [pc, #780]	; (801b8d8 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 801b5cc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 801b5d0:	e014      	b.n	801b5fc <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else {
    signOOM = (OOM > 0.0);
 801b5d2:	f04f 0200 	mov.w	r2, #0
 801b5d6:	f04f 0300 	mov.w	r3, #0
 801b5da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801b5de:	f7e5 fa8d 	bl	8000afc <__aeabi_dcmpgt>
 801b5e2:	4603      	mov	r3, r0
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d003      	beq.n	801b5f0 <UTMeanCovSqrt_C6QfB9Td+0x160>
 801b5e8:	f04f 0200 	mov.w	r2, #0
 801b5ec:	4bbb      	ldr	r3, [pc, #748]	; (801b8dc <UTMeanCovSqrt_C6QfB9Td+0x44c>)
 801b5ee:	e003      	b.n	801b5f8 <UTMeanCovSqrt_C6QfB9Td+0x168>
 801b5f0:	f04f 0200 	mov.w	r2, #0
 801b5f4:	f04f 0300 	mov.w	r3, #0
 801b5f8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  covWeights_0 = signOOM * covWeights[0];
 801b5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b602:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b606:	f7e4 ffe9 	bl	80005dc <__aeabi_dmul>
 801b60a:	4602      	mov	r2, r0
 801b60c:	460b      	mov	r3, r1
 801b60e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  covWeights_1 = signOOM * covWeights[1];
 801b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b614:	3308      	adds	r3, #8
 801b616:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b61a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b61e:	f7e4 ffdd 	bl	80005dc <__aeabi_dmul>
 801b622:	4602      	mov	r2, r0
 801b624:	460b      	mov	r3, r1
 801b626:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  OOM *= signOOM;
 801b62a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b62e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801b632:	f7e4 ffd3 	bl	80005dc <__aeabi_dmul>
 801b636:	4602      	mov	r2, r0
 801b638:	460b      	mov	r3, r1
 801b63a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  signOOM = sqrt(covWeights_1);
 801b63e:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 801b642:	f011 fd45 	bl	802d0d0 <sqrt>
 801b646:	eeb0 7a40 	vmov.f32	s14, s0
 801b64a:	eef0 7a60 	vmov.f32	s15, s1
 801b64e:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  for (knt = 0; knt < 6; knt++) {
 801b652:	2300      	movs	r3, #0
 801b654:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801b658:	e01a      	b.n	801b690 <UTMeanCovSqrt_C6QfB9Td+0x200>
    A[knt] = signOOM * Y2[knt];
 801b65a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b65e:	00db      	lsls	r3, r3, #3
 801b660:	69fa      	ldr	r2, [r7, #28]
 801b662:	4413      	add	r3, r2
 801b664:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b668:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b66c:	f7e4 ffb6 	bl	80005dc <__aeabi_dmul>
 801b670:	4602      	mov	r2, r0
 801b672:	460b      	mov	r3, r1
 801b674:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801b678:	00c9      	lsls	r1, r1, #3
 801b67a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801b67e:	4401      	add	r1, r0
 801b680:	3948      	subs	r1, #72	; 0x48
 801b682:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 801b686:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b68a:	3301      	adds	r3, #1
 801b68c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801b690:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b694:	2b05      	cmp	r3, #5
 801b696:	dde0      	ble.n	801b65a <UTMeanCovSqrt_C6QfB9Td+0x1ca>
  }

  signOOM = A[0];
 801b698:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801b69c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  xnorm = xnrm2_7bm34mDQ(5, A, 2);
 801b6a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b6a4:	2202      	movs	r2, #2
 801b6a6:	4619      	mov	r1, r3
 801b6a8:	2005      	movs	r0, #5
 801b6aa:	f005 f975 	bl	8020998 <xnrm2_7bm34mDQ>
 801b6ae:	eeb0 7a40 	vmov.f32	s14, s0
 801b6b2:	eef0 7a60 	vmov.f32	s15, s1
 801b6b6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  if (xnorm != 0.0) {
 801b6ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801b6be:	f04f 0200 	mov.w	r2, #0
 801b6c2:	f04f 0300 	mov.w	r3, #0
 801b6c6:	f7e5 f9f1 	bl	8000aac <__aeabi_dcmpeq>
 801b6ca:	4603      	mov	r3, r0
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	f040 80e7 	bne.w	801b8a0 <UTMeanCovSqrt_C6QfB9Td+0x410>
    xnorm = rt_hypotd_snf(A[0], xnorm);
 801b6d2:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 801b6d6:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 801b6da:	eeb0 1a46 	vmov.f32	s2, s12
 801b6de:	eef0 1a66 	vmov.f32	s3, s13
 801b6e2:	eeb0 0a47 	vmov.f32	s0, s14
 801b6e6:	eef0 0a67 	vmov.f32	s1, s15
 801b6ea:	f002 fe79 	bl	801e3e0 <rt_hypotd_snf>
 801b6ee:	eeb0 7a40 	vmov.f32	s14, s0
 801b6f2:	eef0 7a60 	vmov.f32	s15, s1
 801b6f6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    if (A[0] >= 0.0) {
 801b6fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801b6fe:	f04f 0200 	mov.w	r2, #0
 801b702:	f04f 0300 	mov.w	r3, #0
 801b706:	f7e5 f9ef 	bl	8000ae8 <__aeabi_dcmpge>
 801b70a:	4603      	mov	r3, r0
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d009      	beq.n	801b724 <UTMeanCovSqrt_C6QfB9Td+0x294>
      xnorm = -xnorm;
 801b710:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801b714:	613a      	str	r2, [r7, #16]
 801b716:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801b71a:	617b      	str	r3, [r7, #20]
 801b71c:	ed97 7b04 	vldr	d7, [r7, #16]
 801b720:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    }

    if (fabs(xnorm) < 1.0020841800044864E-292) {
 801b724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801b728:	60ba      	str	r2, [r7, #8]
 801b72a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b72e:	60fb      	str	r3, [r7, #12]
 801b730:	f04f 0200 	mov.w	r2, #0
 801b734:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801b738:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801b73c:	f7e5 f9c0 	bl	8000ac0 <__aeabi_dcmplt>
 801b740:	4603      	mov	r3, r0
 801b742:	2b00      	cmp	r3, #0
 801b744:	f000 80a8 	beq.w	801b898 <UTMeanCovSqrt_C6QfB9Td+0x408>
      knt = 0;
 801b748:	2300      	movs	r3, #0
 801b74a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      do {
        knt++;
 801b74e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b752:	3301      	adds	r3, #1
 801b754:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (b_k = 1; b_k < 6; b_k++) {
 801b758:	2301      	movs	r3, #1
 801b75a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801b75e:	e01d      	b.n	801b79c <UTMeanCovSqrt_C6QfB9Td+0x30c>
          A[b_k] *= 9.9792015476736E+291;
 801b760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b764:	00db      	lsls	r3, r3, #3
 801b766:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801b76a:	4413      	add	r3, r2
 801b76c:	3b48      	subs	r3, #72	; 0x48
 801b76e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b772:	f04f 0200 	mov.w	r2, #0
 801b776:	4b5a      	ldr	r3, [pc, #360]	; (801b8e0 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 801b778:	f7e4 ff30 	bl	80005dc <__aeabi_dmul>
 801b77c:	4602      	mov	r2, r0
 801b77e:	460b      	mov	r3, r1
 801b780:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 801b784:	00c9      	lsls	r1, r1, #3
 801b786:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801b78a:	4401      	add	r1, r0
 801b78c:	3948      	subs	r1, #72	; 0x48
 801b78e:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_k = 1; b_k < 6; b_k++) {
 801b792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b796:	3301      	adds	r3, #1
 801b798:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801b79c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b7a0:	2b05      	cmp	r3, #5
 801b7a2:	dddd      	ble.n	801b760 <UTMeanCovSqrt_C6QfB9Td+0x2d0>
        }

        xnorm *= 9.9792015476736E+291;
 801b7a4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801b7a8:	f04f 0200 	mov.w	r2, #0
 801b7ac:	4b4c      	ldr	r3, [pc, #304]	; (801b8e0 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 801b7ae:	f7e4 ff15 	bl	80005dc <__aeabi_dmul>
 801b7b2:	4602      	mov	r2, r0
 801b7b4:	460b      	mov	r3, r1
 801b7b6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        signOOM *= 9.9792015476736E+291;
 801b7ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801b7be:	f04f 0200 	mov.w	r2, #0
 801b7c2:	4b47      	ldr	r3, [pc, #284]	; (801b8e0 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 801b7c4:	f7e4 ff0a 	bl	80005dc <__aeabi_dmul>
 801b7c8:	4602      	mov	r2, r0
 801b7ca:	460b      	mov	r3, r1
 801b7cc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt < 20));
 801b7d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801b7d4:	603a      	str	r2, [r7, #0]
 801b7d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b7da:	607b      	str	r3, [r7, #4]
 801b7dc:	f04f 0200 	mov.w	r2, #0
 801b7e0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801b7e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b7e8:	f7e5 f96a 	bl	8000ac0 <__aeabi_dcmplt>
 801b7ec:	4603      	mov	r3, r0
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d003      	beq.n	801b7fa <UTMeanCovSqrt_C6QfB9Td+0x36a>
 801b7f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b7f6:	2b13      	cmp	r3, #19
 801b7f8:	dda9      	ble.n	801b74e <UTMeanCovSqrt_C6QfB9Td+0x2be>

      xnorm = rt_hypotd_snf(signOOM, xnrm2_7bm34mDQ(5, A, 2));
 801b7fa:	ed97 8b10 	vldr	d8, [r7, #64]	; 0x40
 801b7fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b802:	2202      	movs	r2, #2
 801b804:	4619      	mov	r1, r3
 801b806:	2005      	movs	r0, #5
 801b808:	f005 f8c6 	bl	8020998 <xnrm2_7bm34mDQ>
 801b80c:	eeb0 7a40 	vmov.f32	s14, s0
 801b810:	eef0 7a60 	vmov.f32	s15, s1
 801b814:	eeb0 1a47 	vmov.f32	s2, s14
 801b818:	eef0 1a67 	vmov.f32	s3, s15
 801b81c:	eeb0 0a48 	vmov.f32	s0, s16
 801b820:	eef0 0a68 	vmov.f32	s1, s17
 801b824:	f002 fddc 	bl	801e3e0 <rt_hypotd_snf>
 801b828:	eeb0 7a40 	vmov.f32	s14, s0
 801b82c:	eef0 7a60 	vmov.f32	s15, s1
 801b830:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
      if (signOOM >= 0.0) {
 801b834:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801b838:	f04f 0200 	mov.w	r2, #0
 801b83c:	f04f 0300 	mov.w	r3, #0
 801b840:	f7e5 f952 	bl	8000ae8 <__aeabi_dcmpge>
 801b844:	4603      	mov	r3, r0
 801b846:	2b00      	cmp	r3, #0
 801b848:	d006      	beq.n	801b858 <UTMeanCovSqrt_C6QfB9Td+0x3c8>
        xnorm = -xnorm;
 801b84a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801b84e:	4692      	mov	sl, r2
 801b850:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 801b854:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      }

      for (b_k = 0; b_k < knt; b_k++) {
 801b858:	2300      	movs	r3, #0
 801b85a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801b85e:	e010      	b.n	801b882 <UTMeanCovSqrt_C6QfB9Td+0x3f2>
        xnorm *= 1.0020841800044864E-292;
 801b860:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801b864:	f04f 0200 	mov.w	r2, #0
 801b868:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801b86c:	f7e4 feb6 	bl	80005dc <__aeabi_dmul>
 801b870:	4602      	mov	r2, r0
 801b872:	460b      	mov	r3, r1
 801b874:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      for (b_k = 0; b_k < knt; b_k++) {
 801b878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b87c:	3301      	adds	r3, #1
 801b87e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801b882:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801b886:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b88a:	429a      	cmp	r2, r3
 801b88c:	dbe8      	blt.n	801b860 <UTMeanCovSqrt_C6QfB9Td+0x3d0>
      }

      signOOM = xnorm;
 801b88e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801b892:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 801b896:	e003      	b.n	801b8a0 <UTMeanCovSqrt_C6QfB9Td+0x410>
    } else {
      signOOM = xnorm;
 801b898:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801b89c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  if (!rtIsNaN(covWeights_0)) {
 801b8a0:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 801b8a4:	eeb0 0a47 	vmov.f32	s0, s14
 801b8a8:	eef0 0a67 	vmov.f32	s1, s15
 801b8ac:	f002 fea6 	bl	801e5fc <rtIsNaN>
 801b8b0:	4603      	mov	r3, r0
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d12b      	bne.n	801b90e <UTMeanCovSqrt_C6QfB9Td+0x47e>
    if (covWeights_0 < 0.0) {
 801b8b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801b8ba:	f04f 0200 	mov.w	r2, #0
 801b8be:	f04f 0300 	mov.w	r3, #0
 801b8c2:	f7e5 f8fd 	bl	8000ac0 <__aeabi_dcmplt>
 801b8c6:	4603      	mov	r3, r0
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d00b      	beq.n	801b8e4 <UTMeanCovSqrt_C6QfB9Td+0x454>
      covWeights_0 = -1.0;
 801b8cc:	f04f 0200 	mov.w	r2, #0
 801b8d0:	4b01      	ldr	r3, [pc, #4]	; (801b8d8 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 801b8d2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 801b8d6:	e01a      	b.n	801b90e <UTMeanCovSqrt_C6QfB9Td+0x47e>
 801b8d8:	bff00000 	.word	0xbff00000
 801b8dc:	3ff00000 	.word	0x3ff00000
 801b8e0:	7c900000 	.word	0x7c900000
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 801b8e4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801b8e8:	f04f 0200 	mov.w	r2, #0
 801b8ec:	f04f 0300 	mov.w	r3, #0
 801b8f0:	f7e5 f904 	bl	8000afc <__aeabi_dcmpgt>
 801b8f4:	4603      	mov	r3, r0
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d003      	beq.n	801b902 <UTMeanCovSqrt_C6QfB9Td+0x472>
 801b8fa:	f04f 0200 	mov.w	r2, #0
 801b8fe:	4b99      	ldr	r3, [pc, #612]	; (801bb64 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 801b900:	e003      	b.n	801b90a <UTMeanCovSqrt_C6QfB9Td+0x47a>
 801b902:	f04f 0200 	mov.w	r2, #0
 801b906:	f04f 0300 	mov.w	r3, #0
 801b90a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }
  }

  if (covWeights_0 == 1.0) {
 801b90e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801b912:	f04f 0200 	mov.w	r2, #0
 801b916:	4b93      	ldr	r3, [pc, #588]	; (801bb64 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 801b918:	f7e5 f8c8 	bl	8000aac <__aeabi_dcmpeq>
 801b91c:	4603      	mov	r3, r0
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d021      	beq.n	801b966 <UTMeanCovSqrt_C6QfB9Td+0x4d6>
    rotate_LZ7ctbe0(signOOM, Y1, &signOOM, &xnorm, &covWeights_0);
 801b922:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 801b926:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801b92a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801b92e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b932:	4618      	mov	r0, r3
 801b934:	ed97 1b08 	vldr	d1, [r7, #32]
 801b938:	eeb0 0a47 	vmov.f32	s0, s14
 801b93c:	eef0 0a67 	vmov.f32	s1, s15
 801b940:	f002 fbc2 	bl	801e0c8 <rotate_LZ7ctbe0>
    *Sy = sqrt(OOM) * covWeights_0;
 801b944:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 801b948:	f011 fbc2 	bl	802d0d0 <sqrt>
 801b94c:	ec51 0b10 	vmov	r0, r1, d0
 801b950:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801b954:	f7e4 fe42 	bl	80005dc <__aeabi_dmul>
 801b958:	4602      	mov	r2, r0
 801b95a:	460b      	mov	r3, r1
 801b95c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 801b960:	e9c1 2300 	strd	r2, r3, [r1]
 801b964:	e016      	b.n	801b994 <UTMeanCovSqrt_C6QfB9Td+0x504>
  } else {
    cholUpdateFactor_HBMX5a5h(&signOOM, Y1);
 801b966:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b96a:	ed97 0b08 	vldr	d0, [r7, #32]
 801b96e:	4618      	mov	r0, r3
 801b970:	f000 f8fa 	bl	801bb68 <cholUpdateFactor_HBMX5a5h>
    *Sy = sqrt(OOM) * signOOM;
 801b974:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 801b978:	f011 fbaa 	bl	802d0d0 <sqrt>
 801b97c:	ec51 0b10 	vmov	r0, r1, d0
 801b980:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b984:	f7e4 fe2a 	bl	80005dc <__aeabi_dmul>
 801b988:	4602      	mov	r2, r0
 801b98a:	460b      	mov	r3, r1
 801b98c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 801b990:	e9c1 2300 	strd	r2, r3, [r1]
  }

  b_k = 0;
 801b994:	2300      	movs	r3, #0
 801b996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 801b99a:	2300      	movs	r3, #0
 801b99c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801b9a0:	e054      	b.n	801ba4c <UTMeanCovSqrt_C6QfB9Td+0x5bc>
    X2[b_k] -= X1[0];
 801b9a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b9a6:	00db      	lsls	r3, r3, #3
 801b9a8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801b9ac:	4413      	add	r3, r2
 801b9ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b9b2:	69bb      	ldr	r3, [r7, #24]
 801b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9b8:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 801b9bc:	00e4      	lsls	r4, r4, #3
 801b9be:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 801b9c2:	442c      	add	r4, r5
 801b9c4:	f7e4 fc52 	bl	800026c <__aeabi_dsub>
 801b9c8:	4602      	mov	r2, r0
 801b9ca:	460b      	mov	r3, r1
 801b9cc:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 1] -= X1[1];
 801b9d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b9d4:	3301      	adds	r3, #1
 801b9d6:	00db      	lsls	r3, r3, #3
 801b9d8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801b9dc:	4413      	add	r3, r2
 801b9de:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b9e2:	69bb      	ldr	r3, [r7, #24]
 801b9e4:	3308      	adds	r3, #8
 801b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ea:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 801b9ee:	3401      	adds	r4, #1
 801b9f0:	00e4      	lsls	r4, r4, #3
 801b9f2:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 801b9f6:	442c      	add	r4, r5
 801b9f8:	f7e4 fc38 	bl	800026c <__aeabi_dsub>
 801b9fc:	4602      	mov	r2, r0
 801b9fe:	460b      	mov	r3, r1
 801ba00:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 2] -= X1[2];
 801ba04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ba08:	3302      	adds	r3, #2
 801ba0a:	00db      	lsls	r3, r3, #3
 801ba0c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801ba10:	4413      	add	r3, r2
 801ba12:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ba16:	69bb      	ldr	r3, [r7, #24]
 801ba18:	3310      	adds	r3, #16
 801ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba1e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 801ba22:	3402      	adds	r4, #2
 801ba24:	00e4      	lsls	r4, r4, #3
 801ba26:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 801ba2a:	442c      	add	r4, r5
 801ba2c:	f7e4 fc1e 	bl	800026c <__aeabi_dsub>
 801ba30:	4602      	mov	r2, r0
 801ba32:	460b      	mov	r3, r1
 801ba34:	e9c4 2300 	strd	r2, r3, [r4]
    b_k += 3;
 801ba38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ba3c:	3303      	adds	r3, #3
 801ba3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 801ba42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ba46:	3301      	adds	r3, #1
 801ba48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801ba4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ba50:	2b05      	cmp	r3, #5
 801ba52:	dda6      	ble.n	801b9a2 <UTMeanCovSqrt_C6QfB9Td+0x512>
  }

  signOOM = covWeights_1 * OOM;
 801ba54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801ba58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801ba5c:	f7e4 fdbe 	bl	80005dc <__aeabi_dmul>
 801ba60:	4602      	mov	r2, r0
 801ba62:	460b      	mov	r3, r1
 801ba64:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (knt = 0; knt < 3; knt++) {
 801ba68:	2300      	movs	r3, #0
 801ba6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801ba6e:	e06c      	b.n	801bb4a <UTMeanCovSqrt_C6QfB9Td+0x6ba>
    X2_0[knt] = 0.0;
 801ba70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ba74:	00db      	lsls	r3, r3, #3
 801ba76:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801ba7a:	4413      	add	r3, r2
 801ba7c:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 801ba80:	f04f 0200 	mov.w	r2, #0
 801ba84:	f04f 0300 	mov.w	r3, #0
 801ba88:	e9c1 2300 	strd	r2, r3, [r1]
    b_k = 0;
 801ba8c:	2300      	movs	r3, #0
 801ba8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 801ba92:	2300      	movs	r3, #0
 801ba94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801ba98:	e037      	b.n	801bb0a <UTMeanCovSqrt_C6QfB9Td+0x67a>
      X2_0[knt] += X2[b_k + knt] * Y2[i];
 801ba9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ba9e:	00db      	lsls	r3, r3, #3
 801baa0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801baa4:	4413      	add	r3, r2
 801baa6:	3b60      	subs	r3, #96	; 0x60
 801baa8:	e9d3 4500 	ldrd	r4, r5, [r3]
 801baac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801bab0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801bab4:	4413      	add	r3, r2
 801bab6:	00db      	lsls	r3, r3, #3
 801bab8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801babc:	4413      	add	r3, r2
 801babe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bac2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801bac6:	00db      	lsls	r3, r3, #3
 801bac8:	69fa      	ldr	r2, [r7, #28]
 801baca:	4413      	add	r3, r2
 801bacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bad0:	f7e4 fd84 	bl	80005dc <__aeabi_dmul>
 801bad4:	4602      	mov	r2, r0
 801bad6:	460b      	mov	r3, r1
 801bad8:	4620      	mov	r0, r4
 801bada:	4629      	mov	r1, r5
 801badc:	f7e4 fbc8 	bl	8000270 <__adddf3>
 801bae0:	4602      	mov	r2, r0
 801bae2:	460b      	mov	r3, r1
 801bae4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801bae8:	00c9      	lsls	r1, r1, #3
 801baea:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801baee:	4401      	add	r1, r0
 801baf0:	3960      	subs	r1, #96	; 0x60
 801baf2:	e9c1 2300 	strd	r2, r3, [r1]
      b_k += 3;
 801baf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801bafa:	3303      	adds	r3, #3
 801bafc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 801bb00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801bb04:	3301      	adds	r3, #1
 801bb06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801bb0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801bb0e:	2b05      	cmp	r3, #5
 801bb10:	ddc3      	ble.n	801ba9a <UTMeanCovSqrt_C6QfB9Td+0x60a>
    }

    Pxy[knt] = X2_0[knt] * signOOM;
 801bb12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801bb16:	00db      	lsls	r3, r3, #3
 801bb18:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801bb1c:	4413      	add	r3, r2
 801bb1e:	3b60      	subs	r3, #96	; 0x60
 801bb20:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bb24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801bb28:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 801bb2c:	00e4      	lsls	r4, r4, #3
 801bb2e:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 801bb32:	442c      	add	r4, r5
 801bb34:	f7e4 fd52 	bl	80005dc <__aeabi_dmul>
 801bb38:	4602      	mov	r2, r0
 801bb3a:	460b      	mov	r3, r1
 801bb3c:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 3; knt++) {
 801bb40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801bb44:	3301      	adds	r3, #1
 801bb46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801bb4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801bb4e:	2b02      	cmp	r3, #2
 801bb50:	dd8e      	ble.n	801ba70 <UTMeanCovSqrt_C6QfB9Td+0x5e0>
  }
}
 801bb52:	bf00      	nop
 801bb54:	bf00      	nop
 801bb56:	37b0      	adds	r7, #176	; 0xb0
 801bb58:	46bd      	mov	sp, r7
 801bb5a:	ecbd 8b02 	vpop	{d8}
 801bb5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801bb62:	bf00      	nop
 801bb64:	3ff00000 	.word	0x3ff00000

0801bb68 <cholUpdateFactor_HBMX5a5h>:
#include "rotate_LZ7ctbe0.h"
#include "rt_nonfinite.h"
#include "rtGetNaN.h"

void cholUpdateFactor_HBMX5a5h(real_T *S, real_T U)
{
 801bb68:	b5b0      	push	{r4, r5, r7, lr}
 801bb6a:	b090      	sub	sp, #64	; 0x40
 801bb6c:	af00      	add	r7, sp, #0
 801bb6e:	60f8      	str	r0, [r7, #12]
 801bb70:	ed87 0b00 	vstr	d0, [r7]
  real_T alpha;
  real_T c;
  real_T nrmx;
  real_T s;
  int8_T p;
  R = *S;
 801bb74:	68fb      	ldr	r3, [r7, #12]
 801bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  p = 0;
 801bb7e:	2300      	movs	r3, #0
 801bb80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (*S == 0.0) {
 801bb84:	68fb      	ldr	r3, [r7, #12]
 801bb86:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bb8a:	f04f 0200 	mov.w	r2, #0
 801bb8e:	f04f 0300 	mov.w	r3, #0
 801bb92:	f7e4 ff8b 	bl	8000aac <__aeabi_dcmpeq>
 801bb96:	4603      	mov	r3, r0
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d003      	beq.n	801bba4 <cholUpdateFactor_HBMX5a5h+0x3c>
    p = 2;
 801bb9c:	2302      	movs	r3, #2
 801bb9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801bba2:	e065      	b.n	801bc70 <cholUpdateFactor_HBMX5a5h+0x108>
  } else {
    s = U / *S;
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 801bbae:	f7e4 fe3f 	bl	8000830 <__aeabi_ddiv>
 801bbb2:	4602      	mov	r2, r0
 801bbb4:	460b      	mov	r3, r1
 801bbb6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    nrmx = fabs(s);
 801bbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbbc:	63bb      	str	r3, [r7, #56]	; 0x38
 801bbbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bbc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (nrmx >= 1.0) {
 801bbc6:	f04f 0200 	mov.w	r2, #0
 801bbca:	4b5c      	ldr	r3, [pc, #368]	; (801bd3c <cholUpdateFactor_HBMX5a5h+0x1d4>)
 801bbcc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801bbd0:	f7e4 ff8a 	bl	8000ae8 <__aeabi_dcmpge>
 801bbd4:	4603      	mov	r3, r0
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d003      	beq.n	801bbe2 <cholUpdateFactor_HBMX5a5h+0x7a>
      p = 1;
 801bbda:	2301      	movs	r3, #1
 801bbdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801bbe0:	e046      	b.n	801bc70 <cholUpdateFactor_HBMX5a5h+0x108>
    } else {
      rotate_LZ7ctbe0(sqrt(1.0 - nrmx * nrmx), s, &R, &c, &alpha);
 801bbe2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801bbe6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801bbea:	f7e4 fcf7 	bl	80005dc <__aeabi_dmul>
 801bbee:	4602      	mov	r2, r0
 801bbf0:	460b      	mov	r3, r1
 801bbf2:	f04f 0000 	mov.w	r0, #0
 801bbf6:	4951      	ldr	r1, [pc, #324]	; (801bd3c <cholUpdateFactor_HBMX5a5h+0x1d4>)
 801bbf8:	f7e4 fb38 	bl	800026c <__aeabi_dsub>
 801bbfc:	4602      	mov	r2, r0
 801bbfe:	460b      	mov	r3, r1
 801bc00:	ec43 2b17 	vmov	d7, r2, r3
 801bc04:	eeb0 0a47 	vmov.f32	s0, s14
 801bc08:	eef0 0a67 	vmov.f32	s1, s15
 801bc0c:	f011 fa60 	bl	802d0d0 <sqrt>
 801bc10:	eeb0 7a40 	vmov.f32	s14, s0
 801bc14:	eef0 7a60 	vmov.f32	s15, s1
 801bc18:	f107 0218 	add.w	r2, r7, #24
 801bc1c:	f107 0110 	add.w	r1, r7, #16
 801bc20:	f107 0320 	add.w	r3, r7, #32
 801bc24:	4618      	mov	r0, r3
 801bc26:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 801bc2a:	eeb0 0a47 	vmov.f32	s0, s14
 801bc2e:	eef0 0a67 	vmov.f32	s1, s15
 801bc32:	f002 fa49 	bl	801e0c8 <rotate_LZ7ctbe0>
      R = R * *S - c * 0.0;
 801bc36:	68fb      	ldr	r3, [r7, #12]
 801bc38:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bc3c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801bc40:	f7e4 fccc 	bl	80005dc <__aeabi_dmul>
 801bc44:	4602      	mov	r2, r0
 801bc46:	460b      	mov	r3, r1
 801bc48:	4614      	mov	r4, r2
 801bc4a:	461d      	mov	r5, r3
 801bc4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801bc50:	f04f 0200 	mov.w	r2, #0
 801bc54:	f04f 0300 	mov.w	r3, #0
 801bc58:	f7e4 fcc0 	bl	80005dc <__aeabi_dmul>
 801bc5c:	4602      	mov	r2, r0
 801bc5e:	460b      	mov	r3, r1
 801bc60:	4620      	mov	r0, r4
 801bc62:	4629      	mov	r1, r5
 801bc64:	f7e4 fb02 	bl	800026c <__aeabi_dsub>
 801bc68:	4602      	mov	r2, r0
 801bc6a:	460b      	mov	r3, r1
 801bc6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
  }

  *S = R;
 801bc70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801bc74:	68f9      	ldr	r1, [r7, #12]
 801bc76:	e9c1 2300 	strd	r2, r3, [r1]
  if (p != 0) {
 801bc7a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d057      	beq.n	801bd32 <cholUpdateFactor_HBMX5a5h+0x1ca>
    s = R * R - U * U;
 801bc82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801bc86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801bc8a:	f7e4 fca7 	bl	80005dc <__aeabi_dmul>
 801bc8e:	4602      	mov	r2, r0
 801bc90:	460b      	mov	r3, r1
 801bc92:	4614      	mov	r4, r2
 801bc94:	461d      	mov	r5, r3
 801bc96:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bc9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801bc9e:	f7e4 fc9d 	bl	80005dc <__aeabi_dmul>
 801bca2:	4602      	mov	r2, r0
 801bca4:	460b      	mov	r3, r1
 801bca6:	4620      	mov	r0, r4
 801bca8:	4629      	mov	r1, r5
 801bcaa:	f7e4 fadf 	bl	800026c <__aeabi_dsub>
 801bcae:	4602      	mov	r2, r0
 801bcb0:	460b      	mov	r3, r1
 801bcb2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if ((!rtIsInf(s)) && (!rtIsNaN(s))) {
 801bcb6:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801bcba:	f002 fc7b 	bl	801e5b4 <rtIsInf>
 801bcbe:	4603      	mov	r3, r0
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d11d      	bne.n	801bd00 <cholUpdateFactor_HBMX5a5h+0x198>
 801bcc4:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801bcc8:	f002 fc98 	bl	801e5fc <rtIsNaN>
 801bccc:	4603      	mov	r3, r0
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d116      	bne.n	801bd00 <cholUpdateFactor_HBMX5a5h+0x198>
      nrmx = 1.0;
 801bcd2:	f04f 0200 	mov.w	r2, #0
 801bcd6:	4b19      	ldr	r3, [pc, #100]	; (801bd3c <cholUpdateFactor_HBMX5a5h+0x1d4>)
 801bcd8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      if (s != 0.0) {
 801bcdc:	f04f 0200 	mov.w	r2, #0
 801bce0:	f04f 0300 	mov.w	r3, #0
 801bce4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801bce8:	f7e4 fee0 	bl	8000aac <__aeabi_dcmpeq>
 801bcec:	4603      	mov	r3, r0
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d110      	bne.n	801bd14 <cholUpdateFactor_HBMX5a5h+0x1ac>
        s = fabs(s);
 801bcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bcf4:	633b      	str	r3, [r7, #48]	; 0x30
 801bcf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bcf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bcfc:	637b      	str	r3, [r7, #52]	; 0x34
      if (s != 0.0) {
 801bcfe:	e009      	b.n	801bd14 <cholUpdateFactor_HBMX5a5h+0x1ac>
      }
    } else {
      s = (rtNaN);
 801bd00:	4b0f      	ldr	r3, [pc, #60]	; (801bd40 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 801bd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd06:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      nrmx = (rtNaN);
 801bd0a:	4b0d      	ldr	r3, [pc, #52]	; (801bd40 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 801bd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd10:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    *S = nrmx * sqrt(s);
 801bd14:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801bd18:	f011 f9da 	bl	802d0d0 <sqrt>
 801bd1c:	ec51 0b10 	vmov	r0, r1, d0
 801bd20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801bd24:	f7e4 fc5a 	bl	80005dc <__aeabi_dmul>
 801bd28:	4602      	mov	r2, r0
 801bd2a:	460b      	mov	r3, r1
 801bd2c:	68f9      	ldr	r1, [r7, #12]
 801bd2e:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 801bd32:	bf00      	nop
 801bd34:	3740      	adds	r7, #64	; 0x40
 801bd36:	46bd      	mov	sp, r7
 801bd38:	bdb0      	pop	{r4, r5, r7, pc}
 801bd3a:	bf00      	nop
 801bd3c:	3ff00000 	.word	0x3ff00000
 801bd40:	2001ded0 	.word	0x2001ded0

0801bd44 <look1_binlxpw>:
#include "look1_binlxpw.h"
#include "rtwtypes.h"

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 801bd44:	b5b0      	push	{r4, r5, r7, lr}
 801bd46:	b08e      	sub	sp, #56	; 0x38
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	ed87 0b04 	vstr	d0, [r7, #16]
 801bd4e:	60f8      	str	r0, [r7, #12]
 801bd50:	60b9      	str	r1, [r7, #8]
 801bd52:	607a      	str	r2, [r7, #4]
  real_T frac;
  real_T yL_0d0;
  uint32_T iLeft;
  if (u0 <= bp0[0U]) {
 801bd54:	68fb      	ldr	r3, [r7, #12]
 801bd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801bd5e:	f7e4 feb9 	bl	8000ad4 <__aeabi_dcmple>
 801bd62:	4603      	mov	r3, r0
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d020      	beq.n	801bdaa <look1_binlxpw+0x66>
    iLeft = 0U;
 801bd68:	2300      	movs	r3, #0
 801bd6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 801bd6c:	68fb      	ldr	r3, [r7, #12]
 801bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801bd76:	f7e4 fa79 	bl	800026c <__aeabi_dsub>
 801bd7a:	4602      	mov	r2, r0
 801bd7c:	460b      	mov	r3, r1
 801bd7e:	4614      	mov	r4, r2
 801bd80:	461d      	mov	r5, r3
 801bd82:	68fb      	ldr	r3, [r7, #12]
 801bd84:	3308      	adds	r3, #8
 801bd86:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bd8a:	68fb      	ldr	r3, [r7, #12]
 801bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd90:	f7e4 fa6c 	bl	800026c <__aeabi_dsub>
 801bd94:	4602      	mov	r2, r0
 801bd96:	460b      	mov	r3, r1
 801bd98:	4620      	mov	r0, r4
 801bd9a:	4629      	mov	r1, r5
 801bd9c:	f7e4 fd48 	bl	8000830 <__aeabi_ddiv>
 801bda0:	4602      	mov	r2, r0
 801bda2:	460b      	mov	r3, r1
 801bda4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801bda8:	e087      	b.n	801beba <look1_binlxpw+0x176>
  } else if (u0 < bp0[maxIndex]) {
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	00db      	lsls	r3, r3, #3
 801bdae:	68fa      	ldr	r2, [r7, #12]
 801bdb0:	4413      	add	r3, r2
 801bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801bdba:	f7e4 fe81 	bl	8000ac0 <__aeabi_dcmplt>
 801bdbe:	4603      	mov	r3, r0
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d04b      	beq.n	801be5c <look1_binlxpw+0x118>
    uint32_T bpIdx;
    uint32_T iRght;
    bpIdx = maxIndex >> 1U;
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	085b      	lsrs	r3, r3, #1
 801bdc8:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 801bdca:	2300      	movs	r3, #0
 801bdcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 801bdd2:	e016      	b.n	801be02 <look1_binlxpw+0xbe>
      if (u0 < bp0[bpIdx]) {
 801bdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdd6:	00db      	lsls	r3, r3, #3
 801bdd8:	68fa      	ldr	r2, [r7, #12]
 801bdda:	4413      	add	r3, r2
 801bddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bde0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801bde4:	f7e4 fe6c 	bl	8000ac0 <__aeabi_dcmplt>
 801bde8:	4603      	mov	r3, r0
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d002      	beq.n	801bdf4 <look1_binlxpw+0xb0>
        iRght = bpIdx;
 801bdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdf0:	627b      	str	r3, [r7, #36]	; 0x24
 801bdf2:	e001      	b.n	801bdf8 <look1_binlxpw+0xb4>
      } else {
        iLeft = bpIdx;
 801bdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 801bdf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdfc:	4413      	add	r3, r2
 801bdfe:	085b      	lsrs	r3, r3, #1
 801be00:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 801be02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801be04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be06:	1ad3      	subs	r3, r2, r3
 801be08:	2b01      	cmp	r3, #1
 801be0a:	d8e3      	bhi.n	801bdd4 <look1_binlxpw+0x90>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 801be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be0e:	00db      	lsls	r3, r3, #3
 801be10:	68fa      	ldr	r2, [r7, #12]
 801be12:	4413      	add	r3, r2
 801be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801be1c:	f7e4 fa26 	bl	800026c <__aeabi_dsub>
 801be20:	4602      	mov	r2, r0
 801be22:	460b      	mov	r3, r1
 801be24:	4614      	mov	r4, r2
 801be26:	461d      	mov	r5, r3
 801be28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be2a:	3301      	adds	r3, #1
 801be2c:	00db      	lsls	r3, r3, #3
 801be2e:	68fa      	ldr	r2, [r7, #12]
 801be30:	4413      	add	r3, r2
 801be32:	e9d3 0100 	ldrd	r0, r1, [r3]
 801be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be38:	00db      	lsls	r3, r3, #3
 801be3a:	68fa      	ldr	r2, [r7, #12]
 801be3c:	4413      	add	r3, r2
 801be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be42:	f7e4 fa13 	bl	800026c <__aeabi_dsub>
 801be46:	4602      	mov	r2, r0
 801be48:	460b      	mov	r3, r1
 801be4a:	4620      	mov	r0, r4
 801be4c:	4629      	mov	r1, r5
 801be4e:	f7e4 fcef 	bl	8000830 <__aeabi_ddiv>
 801be52:	4602      	mov	r2, r0
 801be54:	460b      	mov	r3, r1
 801be56:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801be5a:	e02e      	b.n	801beba <look1_binlxpw+0x176>
  } else {
    iLeft = maxIndex - 1U;
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	3b01      	subs	r3, #1
 801be60:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801be68:	3b01      	subs	r3, #1
 801be6a:	00db      	lsls	r3, r3, #3
 801be6c:	68fa      	ldr	r2, [r7, #12]
 801be6e:	4413      	add	r3, r2
 801be70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801be78:	f7e4 f9f8 	bl	800026c <__aeabi_dsub>
 801be7c:	4602      	mov	r2, r0
 801be7e:	460b      	mov	r3, r1
 801be80:	4614      	mov	r4, r2
 801be82:	461d      	mov	r5, r3
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	00db      	lsls	r3, r3, #3
 801be88:	68fa      	ldr	r2, [r7, #12]
 801be8a:	4413      	add	r3, r2
 801be8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801be96:	3b01      	subs	r3, #1
 801be98:	00db      	lsls	r3, r3, #3
 801be9a:	68fa      	ldr	r2, [r7, #12]
 801be9c:	4413      	add	r3, r2
 801be9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bea2:	f7e4 f9e3 	bl	800026c <__aeabi_dsub>
 801bea6:	4602      	mov	r2, r0
 801bea8:	460b      	mov	r3, r1
 801beaa:	4620      	mov	r0, r4
 801beac:	4629      	mov	r1, r5
 801beae:	f7e4 fcbf 	bl	8000830 <__aeabi_ddiv>
 801beb2:	4602      	mov	r2, r0
 801beb4:	460b      	mov	r3, r1
 801beb6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  yL_0d0 = table[iLeft];
 801beba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bebc:	00db      	lsls	r3, r3, #3
 801bebe:	68ba      	ldr	r2, [r7, #8]
 801bec0:	4413      	add	r3, r2
 801bec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bec6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 801beca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801becc:	3301      	adds	r3, #1
 801bece:	00db      	lsls	r3, r3, #3
 801bed0:	68ba      	ldr	r2, [r7, #8]
 801bed2:	4413      	add	r3, r2
 801bed4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801bedc:	f7e4 f9c6 	bl	800026c <__aeabi_dsub>
 801bee0:	4602      	mov	r2, r0
 801bee2:	460b      	mov	r3, r1
 801bee4:	4610      	mov	r0, r2
 801bee6:	4619      	mov	r1, r3
 801bee8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801beec:	f7e4 fb76 	bl	80005dc <__aeabi_dmul>
 801bef0:	4602      	mov	r2, r0
 801bef2:	460b      	mov	r3, r1
 801bef4:	4610      	mov	r0, r2
 801bef6:	4619      	mov	r1, r3
 801bef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801befc:	f7e4 f9b8 	bl	8000270 <__adddf3>
 801bf00:	4602      	mov	r2, r0
 801bf02:	460b      	mov	r3, r1
 801bf04:	ec43 2b17 	vmov	d7, r2, r3
}
 801bf08:	eeb0 0a47 	vmov.f32	s0, s14
 801bf0c:	eef0 0a67 	vmov.f32	s1, s15
 801bf10:	3738      	adds	r7, #56	; 0x38
 801bf12:	46bd      	mov	sp, r7
 801bf14:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801bf18 <qr_5a2P8Gh6>:
#include <math.h>
#include "xgemv_fRiR1I1O.h"
#include "xgerc_tNNiazQU.h"

void qr_5a2P8Gh6(const real_T A[9], real_T Q[9], real_T R[9])
{
 801bf18:	b5b0      	push	{r4, r5, r7, lr}
 801bf1a:	b0c0      	sub	sp, #256	; 0x100
 801bf1c:	af04      	add	r7, sp, #16
 801bf1e:	6578      	str	r0, [r7, #84]	; 0x54
 801bf20:	6539      	str	r1, [r7, #80]	; 0x50
 801bf22:	64fa      	str	r2, [r7, #76]	; 0x4c
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 9U * sizeof(real_T));
 801bf24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801bf28:	2248      	movs	r2, #72	; 0x48
 801bf2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bf2c:	4618      	mov	r0, r3
 801bf2e:	f010 ff09 	bl	802cd44 <memcpy>
  tau_idx_0 = 0.0;
 801bf32:	f04f 0200 	mov.w	r2, #0
 801bf36:	f04f 0300 	mov.w	r3, #0
 801bf3a:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  work[0] = 0.0;
 801bf3e:	f04f 0200 	mov.w	r2, #0
 801bf42:	f04f 0300 	mov.w	r3, #0
 801bf46:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  tau_idx_1 = 0.0;
 801bf4a:	f04f 0200 	mov.w	r2, #0
 801bf4e:	f04f 0300 	mov.w	r3, #0
 801bf52:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  work[1] = 0.0;
 801bf56:	f04f 0200 	mov.w	r2, #0
 801bf5a:	f04f 0300 	mov.w	r3, #0
 801bf5e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  work[2] = 0.0;
 801bf62:	f04f 0200 	mov.w	r2, #0
 801bf66:	f04f 0300 	mov.w	r3, #0
 801bf6a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  atmp = b_A[0];
 801bf6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801bf72:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(2, b_A, 2);
 801bf76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801bf7a:	2202      	movs	r2, #2
 801bf7c:	4619      	mov	r1, r3
 801bf7e:	2002      	movs	r0, #2
 801bf80:	f004 ffc2 	bl	8020f08 <xnrm2_xDOlDEtw>
 801bf84:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 801bf88:	f04f 0200 	mov.w	r2, #0
 801bf8c:	f04f 0300 	mov.w	r3, #0
 801bf90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801bf94:	f7e4 fd8a 	bl	8000aac <__aeabi_dcmpeq>
 801bf98:	4603      	mov	r3, r0
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	f040 8172 	bne.w	801c284 <qr_5a2P8Gh6+0x36c>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 801bfa0:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 801bfa4:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 801bfa8:	eeb0 0a47 	vmov.f32	s0, s14
 801bfac:	eef0 0a67 	vmov.f32	s1, s15
 801bfb0:	f002 fa16 	bl	801e3e0 <rt_hypotd_snf>
 801bfb4:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[0] >= 0.0) {
 801bfb8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801bfbc:	f04f 0200 	mov.w	r2, #0
 801bfc0:	f04f 0300 	mov.w	r3, #0
 801bfc4:	f7e4 fd90 	bl	8000ae8 <__aeabi_dcmpge>
 801bfc8:	4603      	mov	r3, r0
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d009      	beq.n	801bfe2 <qr_5a2P8Gh6+0xca>
      beta1 = -beta1;
 801bfce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bfd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801bfd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bfda:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801bfde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801bfe2:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 801bfe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bfea:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801bfee:	f04f 0200 	mov.w	r2, #0
 801bff2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801bff6:	4620      	mov	r0, r4
 801bff8:	4629      	mov	r1, r5
 801bffa:	f7e4 fd61 	bl	8000ac0 <__aeabi_dcmplt>
 801bffe:	4603      	mov	r3, r0
 801c000:	2b00      	cmp	r3, #0
 801c002:	f000 80f1 	beq.w	801c1e8 <qr_5a2P8Gh6+0x2d0>
      knt = 0;
 801c006:	2300      	movs	r3, #0
 801c008:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 801c00c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c010:	3301      	adds	r3, #1
 801c012:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801c016:	2301      	movs	r3, #1
 801c018:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c01c:	e01f      	b.n	801c05e <qr_5a2P8Gh6+0x146>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801c01e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c022:	00db      	lsls	r3, r3, #3
 801c024:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c028:	4413      	add	r3, r2
 801c02a:	3b80      	subs	r3, #128	; 0x80
 801c02c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c030:	f04f 0200 	mov.w	r2, #0
 801c034:	4bc9      	ldr	r3, [pc, #804]	; (801c35c <qr_5a2P8Gh6+0x444>)
 801c036:	f7e4 fad1 	bl	80005dc <__aeabi_dmul>
 801c03a:	4602      	mov	r2, r0
 801c03c:	460b      	mov	r3, r1
 801c03e:	4610      	mov	r0, r2
 801c040:	4619      	mov	r1, r3
 801c042:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c046:	00db      	lsls	r3, r3, #3
 801c048:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c04c:	4413      	add	r3, r2
 801c04e:	3b80      	subs	r3, #128	; 0x80
 801c050:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801c054:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c058:	3301      	adds	r3, #1
 801c05a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c05e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c062:	2b02      	cmp	r3, #2
 801c064:	dddb      	ble.n	801c01e <qr_5a2P8Gh6+0x106>
        }

        beta1 *= 9.9792015476736E+291;
 801c066:	f04f 0200 	mov.w	r2, #0
 801c06a:	4bbc      	ldr	r3, [pc, #752]	; (801c35c <qr_5a2P8Gh6+0x444>)
 801c06c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801c070:	f7e4 fab4 	bl	80005dc <__aeabi_dmul>
 801c074:	4602      	mov	r2, r0
 801c076:	460b      	mov	r3, r1
 801c078:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 801c07c:	f04f 0200 	mov.w	r2, #0
 801c080:	4bb6      	ldr	r3, [pc, #728]	; (801c35c <qr_5a2P8Gh6+0x444>)
 801c082:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801c086:	f7e4 faa9 	bl	80005dc <__aeabi_dmul>
 801c08a:	4602      	mov	r2, r0
 801c08c:	460b      	mov	r3, r1
 801c08e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801c092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c096:	643b      	str	r3, [r7, #64]	; 0x40
 801c098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c09c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c0a0:	647b      	str	r3, [r7, #68]	; 0x44
 801c0a2:	f04f 0200 	mov.w	r2, #0
 801c0a6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801c0aa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801c0ae:	f7e4 fd07 	bl	8000ac0 <__aeabi_dcmplt>
 801c0b2:	4603      	mov	r3, r0
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d003      	beq.n	801c0c0 <qr_5a2P8Gh6+0x1a8>
 801c0b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c0bc:	2b13      	cmp	r3, #19
 801c0be:	dda5      	ble.n	801c00c <qr_5a2P8Gh6+0xf4>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(2, b_A, 2));
 801c0c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c0c4:	2202      	movs	r2, #2
 801c0c6:	4619      	mov	r1, r3
 801c0c8:	2002      	movs	r0, #2
 801c0ca:	f004 ff1d 	bl	8020f08 <xnrm2_xDOlDEtw>
 801c0ce:	eeb0 7a40 	vmov.f32	s14, s0
 801c0d2:	eef0 7a60 	vmov.f32	s15, s1
 801c0d6:	eeb0 1a47 	vmov.f32	s2, s14
 801c0da:	eef0 1a67 	vmov.f32	s3, s15
 801c0de:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 801c0e2:	f002 f97d 	bl	801e3e0 <rt_hypotd_snf>
 801c0e6:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 801c0ea:	f04f 0200 	mov.w	r2, #0
 801c0ee:	f04f 0300 	mov.w	r3, #0
 801c0f2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801c0f6:	f7e4 fcf7 	bl	8000ae8 <__aeabi_dcmpge>
 801c0fa:	4603      	mov	r3, r0
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	d009      	beq.n	801c114 <qr_5a2P8Gh6+0x1fc>
        beta1 = -beta1;
 801c100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c10c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801c110:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 801c114:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801c118:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801c11c:	f7e4 f8a6 	bl	800026c <__aeabi_dsub>
 801c120:	4602      	mov	r2, r0
 801c122:	460b      	mov	r3, r1
 801c124:	4610      	mov	r0, r2
 801c126:	4619      	mov	r1, r3
 801c128:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801c12c:	f7e4 fb80 	bl	8000830 <__aeabi_ddiv>
 801c130:	4602      	mov	r2, r0
 801c132:	460b      	mov	r3, r1
 801c134:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (atmp - beta1);
 801c138:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801c13c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801c140:	f7e4 f894 	bl	800026c <__aeabi_dsub>
 801c144:	4602      	mov	r2, r0
 801c146:	460b      	mov	r3, r1
 801c148:	f04f 0000 	mov.w	r0, #0
 801c14c:	4984      	ldr	r1, [pc, #528]	; (801c360 <qr_5a2P8Gh6+0x448>)
 801c14e:	f7e4 fb6f 	bl	8000830 <__aeabi_ddiv>
 801c152:	4602      	mov	r2, r0
 801c154:	460b      	mov	r3, r1
 801c156:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801c15a:	2301      	movs	r3, #1
 801c15c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c160:	e01e      	b.n	801c1a0 <qr_5a2P8Gh6+0x288>
        b_A[b_coltop] *= atmp;
 801c162:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c166:	00db      	lsls	r3, r3, #3
 801c168:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c16c:	4413      	add	r3, r2
 801c16e:	3b80      	subs	r3, #128	; 0x80
 801c170:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c174:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801c178:	f7e4 fa30 	bl	80005dc <__aeabi_dmul>
 801c17c:	4602      	mov	r2, r0
 801c17e:	460b      	mov	r3, r1
 801c180:	4610      	mov	r0, r2
 801c182:	4619      	mov	r1, r3
 801c184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c188:	00db      	lsls	r3, r3, #3
 801c18a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c18e:	4413      	add	r3, r2
 801c190:	3b80      	subs	r3, #128	; 0x80
 801c192:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801c196:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c19a:	3301      	adds	r3, #1
 801c19c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c1a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c1a4:	2b02      	cmp	r3, #2
 801c1a6:	dddc      	ble.n	801c162 <qr_5a2P8Gh6+0x24a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801c1a8:	2300      	movs	r3, #0
 801c1aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c1ae:	e010      	b.n	801c1d2 <qr_5a2P8Gh6+0x2ba>
        beta1 *= 1.0020841800044864E-292;
 801c1b0:	f04f 0200 	mov.w	r2, #0
 801c1b4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801c1b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801c1bc:	f7e4 fa0e 	bl	80005dc <__aeabi_dmul>
 801c1c0:	4602      	mov	r2, r0
 801c1c2:	460b      	mov	r3, r1
 801c1c4:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801c1c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c1cc:	3301      	adds	r3, #1
 801c1ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c1d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801c1d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c1da:	429a      	cmp	r2, r3
 801c1dc:	dbe8      	blt.n	801c1b0 <qr_5a2P8Gh6+0x298>
      }

      atmp = beta1;
 801c1de:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801c1e2:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 801c1e6:	e04d      	b.n	801c284 <qr_5a2P8Gh6+0x36c>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 801c1e8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801c1ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801c1f0:	f7e4 f83c 	bl	800026c <__aeabi_dsub>
 801c1f4:	4602      	mov	r2, r0
 801c1f6:	460b      	mov	r3, r1
 801c1f8:	4610      	mov	r0, r2
 801c1fa:	4619      	mov	r1, r3
 801c1fc:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801c200:	f7e4 fb16 	bl	8000830 <__aeabi_ddiv>
 801c204:	4602      	mov	r2, r0
 801c206:	460b      	mov	r3, r1
 801c208:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (b_A[0] - beta1);
 801c20c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801c210:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801c214:	f7e4 f82a 	bl	800026c <__aeabi_dsub>
 801c218:	4602      	mov	r2, r0
 801c21a:	460b      	mov	r3, r1
 801c21c:	f04f 0000 	mov.w	r0, #0
 801c220:	494f      	ldr	r1, [pc, #316]	; (801c360 <qr_5a2P8Gh6+0x448>)
 801c222:	f7e4 fb05 	bl	8000830 <__aeabi_ddiv>
 801c226:	4602      	mov	r2, r0
 801c228:	460b      	mov	r3, r1
 801c22a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 801c22e:	2301      	movs	r3, #1
 801c230:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c234:	e01e      	b.n	801c274 <qr_5a2P8Gh6+0x35c>
        b_A[c_lastc] *= atmp;
 801c236:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c23a:	00db      	lsls	r3, r3, #3
 801c23c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c240:	4413      	add	r3, r2
 801c242:	3b80      	subs	r3, #128	; 0x80
 801c244:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c248:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801c24c:	f7e4 f9c6 	bl	80005dc <__aeabi_dmul>
 801c250:	4602      	mov	r2, r0
 801c252:	460b      	mov	r3, r1
 801c254:	4610      	mov	r0, r2
 801c256:	4619      	mov	r1, r3
 801c258:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c25c:	00db      	lsls	r3, r3, #3
 801c25e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c262:	4413      	add	r3, r2
 801c264:	3b80      	subs	r3, #128	; 0x80
 801c266:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 801c26a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c26e:	3301      	adds	r3, #1
 801c270:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c274:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c278:	2b02      	cmp	r3, #2
 801c27a:	dddc      	ble.n	801c236 <qr_5a2P8Gh6+0x31e>
      }

      atmp = beta1;
 801c27c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801c280:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[0] = 1.0;
 801c284:	f04f 0200 	mov.w	r2, #0
 801c288:	4b35      	ldr	r3, [pc, #212]	; (801c360 <qr_5a2P8Gh6+0x448>)
 801c28a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 801c28e:	f04f 0200 	mov.w	r2, #0
 801c292:	f04f 0300 	mov.w	r3, #0
 801c296:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801c29a:	f7e4 fc07 	bl	8000aac <__aeabi_dcmpeq>
 801c29e:	4603      	mov	r3, r0
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	f040 8081 	bne.w	801c3a8 <qr_5a2P8Gh6+0x490>
    knt = 3;
 801c2a6:	2303      	movs	r3, #3
 801c2a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 2;
 801c2ac:	2302      	movs	r3, #2
 801c2ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801c2b2:	e009      	b.n	801c2c8 <qr_5a2P8Gh6+0x3b0>
      knt--;
 801c2b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c2b8:	3b01      	subs	r3, #1
 801c2ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 801c2be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c2c2:	3b01      	subs	r3, #1
 801c2c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801c2c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	dd11      	ble.n	801c2f4 <qr_5a2P8Gh6+0x3dc>
 801c2d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c2d4:	00db      	lsls	r3, r3, #3
 801c2d6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c2da:	4413      	add	r3, r2
 801c2dc:	3b80      	subs	r3, #128	; 0x80
 801c2de:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c2e2:	f04f 0200 	mov.w	r2, #0
 801c2e6:	f04f 0300 	mov.w	r3, #0
 801c2ea:	f7e4 fbdf 	bl	8000aac <__aeabi_dcmpeq>
 801c2ee:	4603      	mov	r3, r0
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d1df      	bne.n	801c2b4 <qr_5a2P8Gh6+0x39c>
    }

    c_lastc = 2;
 801c2f4:	2302      	movs	r3, #2
 801c2f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    exitg2 = false;
 801c2fa:	2300      	movs	r3, #0
 801c2fc:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 801c300:	e049      	b.n	801c396 <qr_5a2P8Gh6+0x47e>
      b_coltop = (c_lastc - 1) * 3 + 3;
 801c302:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801c306:	4613      	mov	r3, r2
 801c308:	005b      	lsls	r3, r3, #1
 801c30a:	4413      	add	r3, r2
 801c30c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      coltop = b_coltop;
 801c310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c314:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      do {
        exitg1 = 0;
 801c318:	2300      	movs	r3, #0
 801c31a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (coltop + 1 <= b_coltop + knt) {
 801c31e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801c322:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c326:	441a      	add	r2, r3
 801c328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801c32c:	4293      	cmp	r3, r2
 801c32e:	da1f      	bge.n	801c370 <qr_5a2P8Gh6+0x458>
          if (b_A[coltop] != 0.0) {
 801c330:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801c334:	00db      	lsls	r3, r3, #3
 801c336:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c33a:	4413      	add	r3, r2
 801c33c:	3b80      	subs	r3, #128	; 0x80
 801c33e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c342:	f04f 0200 	mov.w	r2, #0
 801c346:	f04f 0300 	mov.w	r3, #0
 801c34a:	f7e4 fbaf 	bl	8000aac <__aeabi_dcmpeq>
 801c34e:	4603      	mov	r3, r0
 801c350:	2b00      	cmp	r3, #0
 801c352:	d107      	bne.n	801c364 <qr_5a2P8Gh6+0x44c>
            exitg1 = 1;
 801c354:	2301      	movs	r3, #1
 801c356:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c35a:	e011      	b.n	801c380 <qr_5a2P8Gh6+0x468>
 801c35c:	7c900000 	.word	0x7c900000
 801c360:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 801c364:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801c368:	3301      	adds	r3, #1
 801c36a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c36e:	e007      	b.n	801c380 <qr_5a2P8Gh6+0x468>
          }
        } else {
          c_lastc--;
 801c370:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c374:	3b01      	subs	r3, #1
 801c376:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
          exitg1 = 2;
 801c37a:	2302      	movs	r3, #2
 801c37c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 801c380:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c384:	2b00      	cmp	r3, #0
 801c386:	d0c7      	beq.n	801c318 <qr_5a2P8Gh6+0x400>

      if (exitg1 == 1) {
 801c388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c38c:	2b01      	cmp	r3, #1
 801c38e:	d102      	bne.n	801c396 <qr_5a2P8Gh6+0x47e>
        exitg2 = true;
 801c390:	2301      	movs	r3, #1
 801c392:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 801c396:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c39a:	2b00      	cmp	r3, #0
 801c39c:	d10a      	bne.n	801c3b4 <qr_5a2P8Gh6+0x49c>
 801c39e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	dcad      	bgt.n	801c302 <qr_5a2P8Gh6+0x3ea>
 801c3a6:	e005      	b.n	801c3b4 <qr_5a2P8Gh6+0x49c>
      }
    }
  } else {
    knt = 0;
 801c3a8:	2300      	movs	r3, #0
 801c3aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 801c3ae:	2300      	movs	r3, #0
 801c3b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 801c3b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	dd29      	ble.n	801c410 <qr_5a2P8Gh6+0x4f8>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 4, b_A, 1, work);
 801c3bc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801c3c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c3c4:	9302      	str	r3, [sp, #8]
 801c3c6:	2301      	movs	r3, #1
 801c3c8:	9301      	str	r3, [sp, #4]
 801c3ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c3ce:	9300      	str	r3, [sp, #0]
 801c3d0:	2304      	movs	r3, #4
 801c3d2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801c3d6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801c3da:	f004 f951 	bl	8020680 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_0, 1, work, b_A, 4);
 801c3de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c3e2:	63bb      	str	r3, [r7, #56]	; 0x38
 801c3e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c3e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c3ee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801c3f2:	2304      	movs	r3, #4
 801c3f4:	9301      	str	r3, [sp, #4]
 801c3f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c3fa:	9300      	str	r3, [sp, #0]
 801c3fc:	4613      	mov	r3, r2
 801c3fe:	2201      	movs	r2, #1
 801c400:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 801c404:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801c408:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801c40c:	f004 fa41 	bl	8020892 <xgerc_tNNiazQU>
  }

  b_A[0] = atmp;
 801c410:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801c414:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  atmp = b_A[4];
 801c418:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801c41c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(1, b_A, 6);
 801c420:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c424:	2206      	movs	r2, #6
 801c426:	4619      	mov	r1, r3
 801c428:	2001      	movs	r0, #1
 801c42a:	f004 fd6d 	bl	8020f08 <xnrm2_xDOlDEtw>
 801c42e:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 801c432:	f04f 0200 	mov.w	r2, #0
 801c436:	f04f 0300 	mov.w	r3, #0
 801c43a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801c43e:	f7e4 fb35 	bl	8000aac <__aeabi_dcmpeq>
 801c442:	4603      	mov	r3, r0
 801c444:	2b00      	cmp	r3, #0
 801c446:	f040 8170 	bne.w	801c72a <qr_5a2P8Gh6+0x812>
    beta1 = rt_hypotd_snf(b_A[4], beta1);
 801c44a:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 801c44e:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 801c452:	eeb0 0a47 	vmov.f32	s0, s14
 801c456:	eef0 0a67 	vmov.f32	s1, s15
 801c45a:	f001 ffc1 	bl	801e3e0 <rt_hypotd_snf>
 801c45e:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[4] >= 0.0) {
 801c462:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801c466:	f04f 0200 	mov.w	r2, #0
 801c46a:	f04f 0300 	mov.w	r3, #0
 801c46e:	f7e4 fb3b 	bl	8000ae8 <__aeabi_dcmpge>
 801c472:	4603      	mov	r3, r0
 801c474:	2b00      	cmp	r3, #0
 801c476:	d009      	beq.n	801c48c <qr_5a2P8Gh6+0x574>
      beta1 = -beta1;
 801c478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c47c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801c488:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801c48c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c490:	633b      	str	r3, [r7, #48]	; 0x30
 801c492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c49a:	637b      	str	r3, [r7, #52]	; 0x34
 801c49c:	f04f 0200 	mov.w	r2, #0
 801c4a0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801c4a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801c4a8:	f7e4 fb0a 	bl	8000ac0 <__aeabi_dcmplt>
 801c4ac:	4603      	mov	r3, r0
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	f000 80ef 	beq.w	801c692 <qr_5a2P8Gh6+0x77a>
      knt = 0;
 801c4b4:	2300      	movs	r3, #0
 801c4b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 801c4ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c4be:	3301      	adds	r3, #1
 801c4c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801c4c4:	2305      	movs	r3, #5
 801c4c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c4ca:	e01f      	b.n	801c50c <qr_5a2P8Gh6+0x5f4>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801c4cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c4d0:	00db      	lsls	r3, r3, #3
 801c4d2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c4d6:	4413      	add	r3, r2
 801c4d8:	3b80      	subs	r3, #128	; 0x80
 801c4da:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c4de:	f04f 0200 	mov.w	r2, #0
 801c4e2:	4bc9      	ldr	r3, [pc, #804]	; (801c808 <qr_5a2P8Gh6+0x8f0>)
 801c4e4:	f7e4 f87a 	bl	80005dc <__aeabi_dmul>
 801c4e8:	4602      	mov	r2, r0
 801c4ea:	460b      	mov	r3, r1
 801c4ec:	4610      	mov	r0, r2
 801c4ee:	4619      	mov	r1, r3
 801c4f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c4f4:	00db      	lsls	r3, r3, #3
 801c4f6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c4fa:	4413      	add	r3, r2
 801c4fc:	3b80      	subs	r3, #128	; 0x80
 801c4fe:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801c502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c506:	3301      	adds	r3, #1
 801c508:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c50c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c510:	2b05      	cmp	r3, #5
 801c512:	dddb      	ble.n	801c4cc <qr_5a2P8Gh6+0x5b4>
        }

        beta1 *= 9.9792015476736E+291;
 801c514:	f04f 0200 	mov.w	r2, #0
 801c518:	4bbb      	ldr	r3, [pc, #748]	; (801c808 <qr_5a2P8Gh6+0x8f0>)
 801c51a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801c51e:	f7e4 f85d 	bl	80005dc <__aeabi_dmul>
 801c522:	4602      	mov	r2, r0
 801c524:	460b      	mov	r3, r1
 801c526:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 801c52a:	f04f 0200 	mov.w	r2, #0
 801c52e:	4bb6      	ldr	r3, [pc, #728]	; (801c808 <qr_5a2P8Gh6+0x8f0>)
 801c530:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801c534:	f7e4 f852 	bl	80005dc <__aeabi_dmul>
 801c538:	4602      	mov	r2, r0
 801c53a:	460b      	mov	r3, r1
 801c53c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801c540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c544:	62bb      	str	r3, [r7, #40]	; 0x28
 801c546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c54a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c54e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c550:	f04f 0200 	mov.w	r2, #0
 801c554:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801c558:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801c55c:	f7e4 fab0 	bl	8000ac0 <__aeabi_dcmplt>
 801c560:	4603      	mov	r3, r0
 801c562:	2b00      	cmp	r3, #0
 801c564:	d003      	beq.n	801c56e <qr_5a2P8Gh6+0x656>
 801c566:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c56a:	2b13      	cmp	r3, #19
 801c56c:	dda5      	ble.n	801c4ba <qr_5a2P8Gh6+0x5a2>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(1, b_A, 6));
 801c56e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c572:	2206      	movs	r2, #6
 801c574:	4619      	mov	r1, r3
 801c576:	2001      	movs	r0, #1
 801c578:	f004 fcc6 	bl	8020f08 <xnrm2_xDOlDEtw>
 801c57c:	eeb0 7a40 	vmov.f32	s14, s0
 801c580:	eef0 7a60 	vmov.f32	s15, s1
 801c584:	eeb0 1a47 	vmov.f32	s2, s14
 801c588:	eef0 1a67 	vmov.f32	s3, s15
 801c58c:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 801c590:	f001 ff26 	bl	801e3e0 <rt_hypotd_snf>
 801c594:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 801c598:	f04f 0200 	mov.w	r2, #0
 801c59c:	f04f 0300 	mov.w	r3, #0
 801c5a0:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801c5a4:	f7e4 faa0 	bl	8000ae8 <__aeabi_dcmpge>
 801c5a8:	4603      	mov	r3, r0
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d009      	beq.n	801c5c2 <qr_5a2P8Gh6+0x6aa>
        beta1 = -beta1;
 801c5ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c5b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c5b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c5ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801c5be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 801c5c2:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801c5c6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801c5ca:	f7e3 fe4f 	bl	800026c <__aeabi_dsub>
 801c5ce:	4602      	mov	r2, r0
 801c5d0:	460b      	mov	r3, r1
 801c5d2:	4610      	mov	r0, r2
 801c5d4:	4619      	mov	r1, r3
 801c5d6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801c5da:	f7e4 f929 	bl	8000830 <__aeabi_ddiv>
 801c5de:	4602      	mov	r2, r0
 801c5e0:	460b      	mov	r3, r1
 801c5e2:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (atmp - beta1);
 801c5e6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801c5ea:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801c5ee:	f7e3 fe3d 	bl	800026c <__aeabi_dsub>
 801c5f2:	4602      	mov	r2, r0
 801c5f4:	460b      	mov	r3, r1
 801c5f6:	f04f 0000 	mov.w	r0, #0
 801c5fa:	4984      	ldr	r1, [pc, #528]	; (801c80c <qr_5a2P8Gh6+0x8f4>)
 801c5fc:	f7e4 f918 	bl	8000830 <__aeabi_ddiv>
 801c600:	4602      	mov	r2, r0
 801c602:	460b      	mov	r3, r1
 801c604:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801c608:	2305      	movs	r3, #5
 801c60a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c60e:	e01c      	b.n	801c64a <qr_5a2P8Gh6+0x732>
        b_A[b_coltop] *= atmp;
 801c610:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c614:	00db      	lsls	r3, r3, #3
 801c616:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c61a:	4413      	add	r3, r2
 801c61c:	3b80      	subs	r3, #128	; 0x80
 801c61e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c622:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801c626:	f7e3 ffd9 	bl	80005dc <__aeabi_dmul>
 801c62a:	4602      	mov	r2, r0
 801c62c:	460b      	mov	r3, r1
 801c62e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801c632:	00c9      	lsls	r1, r1, #3
 801c634:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801c638:	4401      	add	r1, r0
 801c63a:	3980      	subs	r1, #128	; 0x80
 801c63c:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801c640:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c644:	3301      	adds	r3, #1
 801c646:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c64a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c64e:	2b05      	cmp	r3, #5
 801c650:	ddde      	ble.n	801c610 <qr_5a2P8Gh6+0x6f8>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801c652:	2300      	movs	r3, #0
 801c654:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c658:	e010      	b.n	801c67c <qr_5a2P8Gh6+0x764>
        beta1 *= 1.0020841800044864E-292;
 801c65a:	f04f 0200 	mov.w	r2, #0
 801c65e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801c662:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801c666:	f7e3 ffb9 	bl	80005dc <__aeabi_dmul>
 801c66a:	4602      	mov	r2, r0
 801c66c:	460b      	mov	r3, r1
 801c66e:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801c672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c676:	3301      	adds	r3, #1
 801c678:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c67c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801c680:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c684:	429a      	cmp	r2, r3
 801c686:	dbe8      	blt.n	801c65a <qr_5a2P8Gh6+0x742>
      }

      atmp = beta1;
 801c688:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801c68c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 801c690:	e04b      	b.n	801c72a <qr_5a2P8Gh6+0x812>
    } else {
      tau_idx_1 = (beta1 - b_A[4]) / beta1;
 801c692:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801c696:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801c69a:	f7e3 fde7 	bl	800026c <__aeabi_dsub>
 801c69e:	4602      	mov	r2, r0
 801c6a0:	460b      	mov	r3, r1
 801c6a2:	4610      	mov	r0, r2
 801c6a4:	4619      	mov	r1, r3
 801c6a6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801c6aa:	f7e4 f8c1 	bl	8000830 <__aeabi_ddiv>
 801c6ae:	4602      	mov	r2, r0
 801c6b0:	460b      	mov	r3, r1
 801c6b2:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (b_A[4] - beta1);
 801c6b6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801c6ba:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801c6be:	f7e3 fdd5 	bl	800026c <__aeabi_dsub>
 801c6c2:	4602      	mov	r2, r0
 801c6c4:	460b      	mov	r3, r1
 801c6c6:	f04f 0000 	mov.w	r0, #0
 801c6ca:	4950      	ldr	r1, [pc, #320]	; (801c80c <qr_5a2P8Gh6+0x8f4>)
 801c6cc:	f7e4 f8b0 	bl	8000830 <__aeabi_ddiv>
 801c6d0:	4602      	mov	r2, r0
 801c6d2:	460b      	mov	r3, r1
 801c6d4:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 801c6d8:	2305      	movs	r3, #5
 801c6da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c6de:	e01c      	b.n	801c71a <qr_5a2P8Gh6+0x802>
        b_A[c_lastc] *= atmp;
 801c6e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c6e4:	00db      	lsls	r3, r3, #3
 801c6e6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c6ea:	4413      	add	r3, r2
 801c6ec:	3b80      	subs	r3, #128	; 0x80
 801c6ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c6f2:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801c6f6:	f7e3 ff71 	bl	80005dc <__aeabi_dmul>
 801c6fa:	4602      	mov	r2, r0
 801c6fc:	460b      	mov	r3, r1
 801c6fe:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801c702:	00c9      	lsls	r1, r1, #3
 801c704:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801c708:	4401      	add	r1, r0
 801c70a:	3980      	subs	r1, #128	; 0x80
 801c70c:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 801c710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c714:	3301      	adds	r3, #1
 801c716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c71a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c71e:	2b05      	cmp	r3, #5
 801c720:	ddde      	ble.n	801c6e0 <qr_5a2P8Gh6+0x7c8>
      }

      atmp = beta1;
 801c722:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801c726:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[4] = 1.0;
 801c72a:	f04f 0200 	mov.w	r2, #0
 801c72e:	4b37      	ldr	r3, [pc, #220]	; (801c80c <qr_5a2P8Gh6+0x8f4>)
 801c730:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 801c734:	f04f 0200 	mov.w	r2, #0
 801c738:	f04f 0300 	mov.w	r3, #0
 801c73c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801c740:	f7e4 f9b4 	bl	8000aac <__aeabi_dcmpeq>
 801c744:	4603      	mov	r3, r0
 801c746:	2b00      	cmp	r3, #0
 801c748:	d162      	bne.n	801c810 <qr_5a2P8Gh6+0x8f8>
    knt = 2;
 801c74a:	2302      	movs	r3, #2
 801c74c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 5;
 801c750:	2305      	movs	r3, #5
 801c752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801c756:	e009      	b.n	801c76c <qr_5a2P8Gh6+0x854>
      knt--;
 801c758:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c75c:	3b01      	subs	r3, #1
 801c75e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 801c762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c766:	3b01      	subs	r3, #1
 801c768:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801c76c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c770:	2b00      	cmp	r3, #0
 801c772:	dd11      	ble.n	801c798 <qr_5a2P8Gh6+0x880>
 801c774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c778:	00db      	lsls	r3, r3, #3
 801c77a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c77e:	4413      	add	r3, r2
 801c780:	3b80      	subs	r3, #128	; 0x80
 801c782:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c786:	f04f 0200 	mov.w	r2, #0
 801c78a:	f04f 0300 	mov.w	r3, #0
 801c78e:	f7e4 f98d 	bl	8000aac <__aeabi_dcmpeq>
 801c792:	4603      	mov	r3, r0
 801c794:	2b00      	cmp	r3, #0
 801c796:	d1df      	bne.n	801c758 <qr_5a2P8Gh6+0x840>
    }

    c_lastc = 1;
 801c798:	2301      	movs	r3, #1
 801c79a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    coltop = 7;
 801c79e:	2307      	movs	r3, #7
 801c7a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    do {
      exitg1 = 0;
 801c7a4:	2300      	movs	r3, #0
 801c7a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (coltop + 1 <= knt + 7) {
 801c7aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c7ae:	3306      	adds	r3, #6
 801c7b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801c7b4:	429a      	cmp	r2, r3
 801c7b6:	dc1b      	bgt.n	801c7f0 <qr_5a2P8Gh6+0x8d8>
        if (b_A[coltop] != 0.0) {
 801c7b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801c7bc:	00db      	lsls	r3, r3, #3
 801c7be:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c7c2:	4413      	add	r3, r2
 801c7c4:	3b80      	subs	r3, #128	; 0x80
 801c7c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c7ca:	f04f 0200 	mov.w	r2, #0
 801c7ce:	f04f 0300 	mov.w	r3, #0
 801c7d2:	f7e4 f96b 	bl	8000aac <__aeabi_dcmpeq>
 801c7d6:	4603      	mov	r3, r0
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d103      	bne.n	801c7e4 <qr_5a2P8Gh6+0x8cc>
          exitg1 = 1;
 801c7dc:	2301      	movs	r3, #1
 801c7de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c7e2:	e00b      	b.n	801c7fc <qr_5a2P8Gh6+0x8e4>
        } else {
          coltop++;
 801c7e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801c7e8:	3301      	adds	r3, #1
 801c7ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c7ee:	e005      	b.n	801c7fc <qr_5a2P8Gh6+0x8e4>
        }
      } else {
        c_lastc = 0;
 801c7f0:	2300      	movs	r3, #0
 801c7f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        exitg1 = 1;
 801c7f6:	2301      	movs	r3, #1
 801c7f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 801c7fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c800:	2b00      	cmp	r3, #0
 801c802:	d0cf      	beq.n	801c7a4 <qr_5a2P8Gh6+0x88c>
 801c804:	e00a      	b.n	801c81c <qr_5a2P8Gh6+0x904>
 801c806:	bf00      	nop
 801c808:	7c900000 	.word	0x7c900000
 801c80c:	3ff00000 	.word	0x3ff00000
  } else {
    knt = 0;
 801c810:	2300      	movs	r3, #0
 801c812:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 801c816:	2300      	movs	r3, #0
 801c818:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 801c81c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c820:	2b00      	cmp	r3, #0
 801c822:	dd29      	ble.n	801c878 <qr_5a2P8Gh6+0x960>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 8, b_A, 5, work);
 801c824:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801c828:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c82c:	9302      	str	r3, [sp, #8]
 801c82e:	2305      	movs	r3, #5
 801c830:	9301      	str	r3, [sp, #4]
 801c832:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c836:	9300      	str	r3, [sp, #0]
 801c838:	2308      	movs	r3, #8
 801c83a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801c83e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801c842:	f003 ff1d 	bl	8020680 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_1, 5, work, b_A, 8);
 801c846:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c84a:	623b      	str	r3, [r7, #32]
 801c84c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c850:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801c854:	627b      	str	r3, [r7, #36]	; 0x24
 801c856:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801c85a:	2308      	movs	r3, #8
 801c85c:	9301      	str	r3, [sp, #4]
 801c85e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c862:	9300      	str	r3, [sp, #0]
 801c864:	4613      	mov	r3, r2
 801c866:	2205      	movs	r2, #5
 801c868:	ed97 0b08 	vldr	d0, [r7, #32]
 801c86c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801c870:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801c874:	f004 f80d 	bl	8020892 <xgerc_tNNiazQU>
  }

  b_A[4] = atmp;
 801c878:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801c87c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  R[0] = b_A[0];
 801c880:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801c884:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c886:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801c88a:	2301      	movs	r3, #1
 801c88c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c890:	e00f      	b.n	801c8b2 <qr_5a2P8Gh6+0x99a>
    R[c_lastc] = 0.0;
 801c892:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c896:	00db      	lsls	r3, r3, #3
 801c898:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c89a:	18d1      	adds	r1, r2, r3
 801c89c:	f04f 0200 	mov.w	r2, #0
 801c8a0:	f04f 0300 	mov.w	r3, #0
 801c8a4:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801c8a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c8ac:	3301      	adds	r3, #1
 801c8ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c8b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c8b6:	2b02      	cmp	r3, #2
 801c8b8:	ddeb      	ble.n	801c892 <qr_5a2P8Gh6+0x97a>
  }

  work[0] = 0.0;
 801c8ba:	f04f 0200 	mov.w	r2, #0
 801c8be:	f04f 0300 	mov.w	r3, #0
 801c8c2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801c8c6:	2300      	movs	r3, #0
 801c8c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c8cc:	e016      	b.n	801c8fc <qr_5a2P8Gh6+0x9e4>
    R[c_lastc + 3] = b_A[c_lastc + 3];
 801c8ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c8d2:	3303      	adds	r3, #3
 801c8d4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801c8d8:	3203      	adds	r2, #3
 801c8da:	00d2      	lsls	r2, r2, #3
 801c8dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c8de:	4411      	add	r1, r2
 801c8e0:	00db      	lsls	r3, r3, #3
 801c8e2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c8e6:	4413      	add	r3, r2
 801c8e8:	3b80      	subs	r3, #128	; 0x80
 801c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8ee:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801c8f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c8f6:	3301      	adds	r3, #1
 801c8f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c8fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c900:	2b01      	cmp	r3, #1
 801c902:	dde4      	ble.n	801c8ce <qr_5a2P8Gh6+0x9b6>
  }

  while (c_lastc + 1 < 4) {
 801c904:	e010      	b.n	801c928 <qr_5a2P8Gh6+0xa10>
    R[c_lastc + 3] = 0.0;
 801c906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c90a:	3303      	adds	r3, #3
 801c90c:	00db      	lsls	r3, r3, #3
 801c90e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c910:	18d1      	adds	r1, r2, r3
 801c912:	f04f 0200 	mov.w	r2, #0
 801c916:	f04f 0300 	mov.w	r3, #0
 801c91a:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 801c91e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c922:	3301      	adds	r3, #1
 801c924:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  while (c_lastc + 1 < 4) {
 801c928:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c92c:	2b02      	cmp	r3, #2
 801c92e:	ddea      	ble.n	801c906 <qr_5a2P8Gh6+0x9ee>
  }

  work[1] = 0.0;
 801c930:	f04f 0200 	mov.w	r2, #0
 801c934:	f04f 0300 	mov.w	r3, #0
 801c938:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801c93c:	2300      	movs	r3, #0
 801c93e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c942:	e016      	b.n	801c972 <qr_5a2P8Gh6+0xa5a>
    R[c_lastc + 6] = b_A[c_lastc + 6];
 801c944:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c948:	3306      	adds	r3, #6
 801c94a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801c94e:	3206      	adds	r2, #6
 801c950:	00d2      	lsls	r2, r2, #3
 801c952:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c954:	4411      	add	r1, r2
 801c956:	00db      	lsls	r3, r3, #3
 801c958:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c95c:	4413      	add	r3, r2
 801c95e:	3b80      	subs	r3, #128	; 0x80
 801c960:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c964:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801c968:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c96c:	3301      	adds	r3, #1
 801c96e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c972:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c976:	2b02      	cmp	r3, #2
 801c978:	dde4      	ble.n	801c944 <qr_5a2P8Gh6+0xa2c>
  }

  work[2] = 0.0;
 801c97a:	f04f 0200 	mov.w	r2, #0
 801c97e:	f04f 0300 	mov.w	r3, #0
 801c982:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  b_A[8] = 1.0;
 801c986:	f04f 0200 	mov.w	r2, #0
 801c98a:	4bc8      	ldr	r3, [pc, #800]	; (801ccac <qr_5a2P8Gh6+0xd94>)
 801c98c:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801c990:	2300      	movs	r3, #0
 801c992:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c996:	e014      	b.n	801c9c2 <qr_5a2P8Gh6+0xaaa>
    b_A[7 - c_lastc] = 0.0;
 801c998:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c99c:	f1c3 0307 	rsb	r3, r3, #7
 801c9a0:	00db      	lsls	r3, r3, #3
 801c9a2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801c9a6:	4413      	add	r3, r2
 801c9a8:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 801c9ac:	f04f 0200 	mov.w	r2, #0
 801c9b0:	f04f 0300 	mov.w	r3, #0
 801c9b4:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801c9b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c9bc:	3301      	adds	r3, #1
 801c9be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c9c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c9c6:	2b01      	cmp	r3, #1
 801c9c8:	dde6      	ble.n	801c998 <qr_5a2P8Gh6+0xa80>
  }

  b_A[4] = 1.0;
 801c9ca:	f04f 0200 	mov.w	r2, #0
 801c9ce:	4bb7      	ldr	r3, [pc, #732]	; (801ccac <qr_5a2P8Gh6+0xd94>)
 801c9d0:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 801c9d4:	f04f 0200 	mov.w	r2, #0
 801c9d8:	f04f 0300 	mov.w	r3, #0
 801c9dc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801c9e0:	f7e4 f864 	bl	8000aac <__aeabi_dcmpeq>
 801c9e4:	4603      	mov	r3, r0
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d15c      	bne.n	801caa4 <qr_5a2P8Gh6+0xb8c>
    b_coltop = 7;
 801c9ea:	2307      	movs	r3, #7
 801c9ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801c9f0:	e009      	b.n	801ca06 <qr_5a2P8Gh6+0xaee>
      c_lastc--;
 801c9f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c9f6:	3b01      	subs	r3, #1
 801c9f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 801c9fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801ca00:	3b01      	subs	r3, #1
 801ca02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801ca06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	dd12      	ble.n	801ca34 <qr_5a2P8Gh6+0xb1c>
 801ca0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801ca12:	3b02      	subs	r3, #2
 801ca14:	00db      	lsls	r3, r3, #3
 801ca16:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801ca1a:	4413      	add	r3, r2
 801ca1c:	3b80      	subs	r3, #128	; 0x80
 801ca1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ca22:	f04f 0200 	mov.w	r2, #0
 801ca26:	f04f 0300 	mov.w	r3, #0
 801ca2a:	f7e4 f83f 	bl	8000aac <__aeabi_dcmpeq>
 801ca2e:	4603      	mov	r3, r0
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	d1de      	bne.n	801c9f2 <qr_5a2P8Gh6+0xada>
    }

    b_coltop = 1;
 801ca34:	2301      	movs	r3, #1
 801ca36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    knt = 8;
 801ca3a:	2308      	movs	r3, #8
 801ca3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    do {
      exitg1 = 0;
 801ca40:	2300      	movs	r3, #0
 801ca42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (knt <= c_lastc + 7) {
 801ca46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801ca4a:	3307      	adds	r3, #7
 801ca4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801ca50:	429a      	cmp	r2, r3
 801ca52:	dc1c      	bgt.n	801ca8e <qr_5a2P8Gh6+0xb76>
        if (b_A[knt - 1] != 0.0) {
 801ca54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801ca58:	3b01      	subs	r3, #1
 801ca5a:	00db      	lsls	r3, r3, #3
 801ca5c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801ca60:	4413      	add	r3, r2
 801ca62:	3b80      	subs	r3, #128	; 0x80
 801ca64:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ca68:	f04f 0200 	mov.w	r2, #0
 801ca6c:	f04f 0300 	mov.w	r3, #0
 801ca70:	f7e4 f81c 	bl	8000aac <__aeabi_dcmpeq>
 801ca74:	4603      	mov	r3, r0
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d103      	bne.n	801ca82 <qr_5a2P8Gh6+0xb6a>
          exitg1 = 1;
 801ca7a:	2301      	movs	r3, #1
 801ca7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801ca80:	e00b      	b.n	801ca9a <qr_5a2P8Gh6+0xb82>
        } else {
          knt++;
 801ca82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801ca86:	3301      	adds	r3, #1
 801ca88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801ca8c:	e005      	b.n	801ca9a <qr_5a2P8Gh6+0xb82>
        }
      } else {
        b_coltop = 0;
 801ca8e:	2300      	movs	r3, #0
 801ca90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        exitg1 = 1;
 801ca94:	2301      	movs	r3, #1
 801ca96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 801ca9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	d0ce      	beq.n	801ca40 <qr_5a2P8Gh6+0xb28>
 801caa2:	e005      	b.n	801cab0 <qr_5a2P8Gh6+0xb98>
  } else {
    c_lastc = 0;
 801caa4:	2300      	movs	r3, #0
 801caa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 801caaa:	2300      	movs	r3, #0
 801caac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 801cab0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	dd29      	ble.n	801cb0c <qr_5a2P8Gh6+0xbf4>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 8, b_A, 5, work);
 801cab8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801cabc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801cac0:	9302      	str	r3, [sp, #8]
 801cac2:	2305      	movs	r3, #5
 801cac4:	9301      	str	r3, [sp, #4]
 801cac6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801caca:	9300      	str	r3, [sp, #0]
 801cacc:	2308      	movs	r3, #8
 801cace:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801cad2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801cad6:	f003 fdd3 	bl	8020680 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_1, 5, work, b_A, 8);
 801cada:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801cade:	61bb      	str	r3, [r7, #24]
 801cae0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801cae4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801cae8:	61fb      	str	r3, [r7, #28]
 801caea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801caee:	2308      	movs	r3, #8
 801caf0:	9301      	str	r3, [sp, #4]
 801caf2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801caf6:	9300      	str	r3, [sp, #0]
 801caf8:	4613      	mov	r3, r2
 801cafa:	2205      	movs	r2, #5
 801cafc:	ed97 0b06 	vldr	d0, [r7, #24]
 801cb00:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801cb04:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801cb08:	f003 fec3 	bl	8020892 <xgerc_tNNiazQU>
  }

  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801cb0c:	2305      	movs	r3, #5
 801cb0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801cb12:	e024      	b.n	801cb5e <qr_5a2P8Gh6+0xc46>
    b_A[b_coltop] *= -tau_idx_1;
 801cb14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801cb18:	00db      	lsls	r3, r3, #3
 801cb1a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801cb1e:	4413      	add	r3, r2
 801cb20:	3b80      	subs	r3, #128	; 0x80
 801cb22:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cb26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801cb2a:	613b      	str	r3, [r7, #16]
 801cb2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801cb30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801cb34:	617b      	str	r3, [r7, #20]
 801cb36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801cb3a:	f7e3 fd4f 	bl	80005dc <__aeabi_dmul>
 801cb3e:	4602      	mov	r2, r0
 801cb40:	460b      	mov	r3, r1
 801cb42:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801cb46:	00c9      	lsls	r1, r1, #3
 801cb48:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801cb4c:	4401      	add	r1, r0
 801cb4e:	3980      	subs	r1, #128	; 0x80
 801cb50:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801cb54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801cb58:	3301      	adds	r3, #1
 801cb5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801cb5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801cb62:	2b05      	cmp	r3, #5
 801cb64:	ddd6      	ble.n	801cb14 <qr_5a2P8Gh6+0xbfc>
  }

  b_A[4] = 1.0 - tau_idx_1;
 801cb66:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 801cb6a:	f04f 0000 	mov.w	r0, #0
 801cb6e:	494f      	ldr	r1, [pc, #316]	; (801ccac <qr_5a2P8Gh6+0xd94>)
 801cb70:	f7e3 fb7c 	bl	800026c <__aeabi_dsub>
 801cb74:	4602      	mov	r2, r0
 801cb76:	460b      	mov	r3, r1
 801cb78:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  b_A[3] = 0.0;
 801cb7c:	f04f 0200 	mov.w	r2, #0
 801cb80:	f04f 0300 	mov.w	r3, #0
 801cb84:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_A[0] = 1.0;
 801cb88:	f04f 0200 	mov.w	r2, #0
 801cb8c:	4b47      	ldr	r3, [pc, #284]	; (801ccac <qr_5a2P8Gh6+0xd94>)
 801cb8e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 801cb92:	f04f 0200 	mov.w	r2, #0
 801cb96:	f04f 0300 	mov.w	r3, #0
 801cb9a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801cb9e:	f7e3 ff85 	bl	8000aac <__aeabi_dcmpeq>
 801cba2:	4603      	mov	r3, r0
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	f040 8083 	bne.w	801ccb0 <qr_5a2P8Gh6+0xd98>
    c_lastc = 3;
 801cbaa:	2303      	movs	r3, #3
 801cbac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 4;
 801cbb0:	2304      	movs	r3, #4
 801cbb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801cbb6:	e009      	b.n	801cbcc <qr_5a2P8Gh6+0xcb4>
      c_lastc--;
 801cbb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801cbbc:	3b01      	subs	r3, #1
 801cbbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 801cbc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801cbc6:	3b01      	subs	r3, #1
 801cbc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801cbcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	dd12      	ble.n	801cbfa <qr_5a2P8Gh6+0xce2>
 801cbd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801cbd8:	3b02      	subs	r3, #2
 801cbda:	00db      	lsls	r3, r3, #3
 801cbdc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801cbe0:	4413      	add	r3, r2
 801cbe2:	3b80      	subs	r3, #128	; 0x80
 801cbe4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cbe8:	f04f 0200 	mov.w	r2, #0
 801cbec:	f04f 0300 	mov.w	r3, #0
 801cbf0:	f7e3 ff5c 	bl	8000aac <__aeabi_dcmpeq>
 801cbf4:	4603      	mov	r3, r0
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	d1de      	bne.n	801cbb8 <qr_5a2P8Gh6+0xca0>
    }

    b_coltop = 2;
 801cbfa:	2302      	movs	r3, #2
 801cbfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    exitg2 = false;
 801cc00:	2300      	movs	r3, #0
 801cc02:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 801cc06:	e048      	b.n	801cc9a <qr_5a2P8Gh6+0xd82>
      coltop = (b_coltop - 1) * 3 + 4;
 801cc08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801cc0c:	1e5a      	subs	r2, r3, #1
 801cc0e:	4613      	mov	r3, r2
 801cc10:	005b      	lsls	r3, r3, #1
 801cc12:	4413      	add	r3, r2
 801cc14:	3304      	adds	r3, #4
 801cc16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      knt = coltop;
 801cc1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801cc1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        exitg1 = 0;
 801cc22:	2300      	movs	r3, #0
 801cc24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (knt <= (coltop + c_lastc) - 1) {
 801cc28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801cc2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801cc30:	4413      	add	r3, r2
 801cc32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801cc36:	429a      	cmp	r2, r3
 801cc38:	da1c      	bge.n	801cc74 <qr_5a2P8Gh6+0xd5c>
          if (b_A[knt - 1] != 0.0) {
 801cc3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801cc3e:	3b01      	subs	r3, #1
 801cc40:	00db      	lsls	r3, r3, #3
 801cc42:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801cc46:	4413      	add	r3, r2
 801cc48:	3b80      	subs	r3, #128	; 0x80
 801cc4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cc4e:	f04f 0200 	mov.w	r2, #0
 801cc52:	f04f 0300 	mov.w	r3, #0
 801cc56:	f7e3 ff29 	bl	8000aac <__aeabi_dcmpeq>
 801cc5a:	4603      	mov	r3, r0
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d103      	bne.n	801cc68 <qr_5a2P8Gh6+0xd50>
            exitg1 = 1;
 801cc60:	2301      	movs	r3, #1
 801cc62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801cc66:	e00d      	b.n	801cc84 <qr_5a2P8Gh6+0xd6c>
          } else {
            knt++;
 801cc68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801cc6c:	3301      	adds	r3, #1
 801cc6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801cc72:	e007      	b.n	801cc84 <qr_5a2P8Gh6+0xd6c>
          }
        } else {
          b_coltop--;
 801cc74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801cc78:	3b01      	subs	r3, #1
 801cc7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          exitg1 = 2;
 801cc7e:	2302      	movs	r3, #2
 801cc80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 801cc84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d0ca      	beq.n	801cc22 <qr_5a2P8Gh6+0xd0a>

      if (exitg1 == 1) {
 801cc8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801cc90:	2b01      	cmp	r3, #1
 801cc92:	d102      	bne.n	801cc9a <qr_5a2P8Gh6+0xd82>
        exitg2 = true;
 801cc94:	2301      	movs	r3, #1
 801cc96:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 801cc9a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	d10c      	bne.n	801ccbc <qr_5a2P8Gh6+0xda4>
 801cca2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801cca6:	2b00      	cmp	r3, #0
 801cca8:	dcae      	bgt.n	801cc08 <qr_5a2P8Gh6+0xcf0>
 801ccaa:	e007      	b.n	801ccbc <qr_5a2P8Gh6+0xda4>
 801ccac:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 801ccb0:	2300      	movs	r3, #0
 801ccb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 801ccb6:	2300      	movs	r3, #0
 801ccb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 801ccbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	dd29      	ble.n	801cd18 <qr_5a2P8Gh6+0xe00>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 4, b_A, 1, work);
 801ccc4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801ccc8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801cccc:	9302      	str	r3, [sp, #8]
 801ccce:	2301      	movs	r3, #1
 801ccd0:	9301      	str	r3, [sp, #4]
 801ccd2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ccd6:	9300      	str	r3, [sp, #0]
 801ccd8:	2304      	movs	r3, #4
 801ccda:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801ccde:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801cce2:	f003 fccd 	bl	8020680 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 4);
 801cce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801ccea:	60bb      	str	r3, [r7, #8]
 801ccec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ccf0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801ccf4:	60fb      	str	r3, [r7, #12]
 801ccf6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801ccfa:	2304      	movs	r3, #4
 801ccfc:	9301      	str	r3, [sp, #4]
 801ccfe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801cd02:	9300      	str	r3, [sp, #0]
 801cd04:	4613      	mov	r3, r2
 801cd06:	2201      	movs	r2, #1
 801cd08:	ed97 0b02 	vldr	d0, [r7, #8]
 801cd0c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801cd10:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801cd14:	f003 fdbd 	bl	8020892 <xgerc_tNNiazQU>
  }

  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801cd18:	2301      	movs	r3, #1
 801cd1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801cd1e:	e024      	b.n	801cd6a <qr_5a2P8Gh6+0xe52>
    b_A[b_coltop] *= -tau_idx_0;
 801cd20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801cd24:	00db      	lsls	r3, r3, #3
 801cd26:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801cd2a:	4413      	add	r3, r2
 801cd2c:	3b80      	subs	r3, #128	; 0x80
 801cd2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cd32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801cd36:	603b      	str	r3, [r7, #0]
 801cd38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801cd3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801cd40:	607b      	str	r3, [r7, #4]
 801cd42:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cd46:	f7e3 fc49 	bl	80005dc <__aeabi_dmul>
 801cd4a:	4602      	mov	r2, r0
 801cd4c:	460b      	mov	r3, r1
 801cd4e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801cd52:	00c9      	lsls	r1, r1, #3
 801cd54:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801cd58:	4401      	add	r1, r0
 801cd5a:	3980      	subs	r1, #128	; 0x80
 801cd5c:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801cd60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801cd64:	3301      	adds	r3, #1
 801cd66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801cd6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801cd6e:	2b02      	cmp	r3, #2
 801cd70:	ddd6      	ble.n	801cd20 <qr_5a2P8Gh6+0xe08>
  }

  b_A[0] = 1.0 - tau_idx_0;
 801cd72:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 801cd76:	f04f 0000 	mov.w	r0, #0
 801cd7a:	492a      	ldr	r1, [pc, #168]	; (801ce24 <qr_5a2P8Gh6+0xf0c>)
 801cd7c:	f7e3 fa76 	bl	800026c <__aeabi_dsub>
 801cd80:	4602      	mov	r2, r0
 801cd82:	460b      	mov	r3, r1
 801cd84:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  c_lastc = 0;
 801cd88:	2300      	movs	r3, #0
 801cd8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 801cd8e:	2300      	movs	r3, #0
 801cd90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801cd94:	e03d      	b.n	801ce12 <qr_5a2P8Gh6+0xefa>
    Q[c_lastc] = b_A[c_lastc];
 801cd96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801cd9a:	00db      	lsls	r3, r3, #3
 801cd9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801cd9e:	18d1      	adds	r1, r2, r3
 801cda0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801cda4:	00db      	lsls	r3, r3, #3
 801cda6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801cdaa:	4413      	add	r3, r2
 801cdac:	3b80      	subs	r3, #128	; 0x80
 801cdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdb2:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 1] = b_A[c_lastc + 1];
 801cdb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801cdba:	3301      	adds	r3, #1
 801cdbc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801cdc0:	3201      	adds	r2, #1
 801cdc2:	00d2      	lsls	r2, r2, #3
 801cdc4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801cdc6:	4411      	add	r1, r2
 801cdc8:	00db      	lsls	r3, r3, #3
 801cdca:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801cdce:	4413      	add	r3, r2
 801cdd0:	3b80      	subs	r3, #128	; 0x80
 801cdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdd6:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 2] = b_A[c_lastc + 2];
 801cdda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801cdde:	3302      	adds	r3, #2
 801cde0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801cde4:	3202      	adds	r2, #2
 801cde6:	00d2      	lsls	r2, r2, #3
 801cde8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801cdea:	4411      	add	r1, r2
 801cdec:	00db      	lsls	r3, r3, #3
 801cdee:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801cdf2:	4413      	add	r3, r2
 801cdf4:	3b80      	subs	r3, #128	; 0x80
 801cdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdfa:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc += 3;
 801cdfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801ce02:	3303      	adds	r3, #3
 801ce04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 801ce08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801ce0c:	3301      	adds	r3, #1
 801ce0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801ce12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801ce16:	2b02      	cmp	r3, #2
 801ce18:	ddbd      	ble.n	801cd96 <qr_5a2P8Gh6+0xe7e>
  }
}
 801ce1a:	bf00      	nop
 801ce1c:	bf00      	nop
 801ce1e:	37f0      	adds	r7, #240	; 0xf0
 801ce20:	46bd      	mov	sp, r7
 801ce22:	bdb0      	pop	{r4, r5, r7, pc}
 801ce24:	3ff00000 	.word	0x3ff00000

0801ce28 <qr_DvOBrgQi>:
#include <math.h>
#include "xgemv_NQlWbt2i.h"
#include "xgerc_R09LiDgJ.h"

void qr_DvOBrgQi(const real_T A[18], real_T Q[18], real_T R[9])
{
 801ce28:	b5b0      	push	{r4, r5, r7, lr}
 801ce2a:	b0da      	sub	sp, #360	; 0x168
 801ce2c:	af04      	add	r7, sp, #16
 801ce2e:	66f8      	str	r0, [r7, #108]	; 0x6c
 801ce30:	66b9      	str	r1, [r7, #104]	; 0x68
 801ce32:	667a      	str	r2, [r7, #100]	; 0x64
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 18U * sizeof(real_T));
 801ce34:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ce38:	2290      	movs	r2, #144	; 0x90
 801ce3a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801ce3c:	4618      	mov	r0, r3
 801ce3e:	f00f ff81 	bl	802cd44 <memcpy>
  work[0] = 0.0;
 801ce42:	f04f 0200 	mov.w	r2, #0
 801ce46:	f04f 0300 	mov.w	r3, #0
 801ce4a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  work[1] = 0.0;
 801ce4e:	f04f 0200 	mov.w	r2, #0
 801ce52:	f04f 0300 	mov.w	r3, #0
 801ce56:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  work[2] = 0.0;
 801ce5a:	f04f 0200 	mov.w	r2, #0
 801ce5e:	f04f 0300 	mov.w	r3, #0
 801ce62:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  atmp = b_A[0];
 801ce66:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801ce6a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_0 = 0.0;
 801ce6e:	f04f 0200 	mov.w	r2, #0
 801ce72:	f04f 0300 	mov.w	r3, #0
 801ce76:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  beta1 = xnrm2_nLdASVZH(5, b_A, 2);
 801ce7a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ce7e:	2202      	movs	r2, #2
 801ce80:	4619      	mov	r1, r3
 801ce82:	2005      	movs	r0, #5
 801ce84:	f003 ff92 	bl	8020dac <xnrm2_nLdASVZH>
 801ce88:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 801ce8c:	f04f 0200 	mov.w	r2, #0
 801ce90:	f04f 0300 	mov.w	r3, #0
 801ce94:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ce98:	f7e3 fe08 	bl	8000aac <__aeabi_dcmpeq>
 801ce9c:	4603      	mov	r3, r0
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	f040 8172 	bne.w	801d188 <qr_DvOBrgQi+0x360>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 801cea4:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 801cea8:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 801ceac:	eeb0 0a47 	vmov.f32	s0, s14
 801ceb0:	eef0 0a67 	vmov.f32	s1, s15
 801ceb4:	f001 fa94 	bl	801e3e0 <rt_hypotd_snf>
 801ceb8:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[0] >= 0.0) {
 801cebc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801cec0:	f04f 0200 	mov.w	r2, #0
 801cec4:	f04f 0300 	mov.w	r3, #0
 801cec8:	f7e3 fe0e 	bl	8000ae8 <__aeabi_dcmpge>
 801cecc:	4603      	mov	r3, r0
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d009      	beq.n	801cee6 <qr_DvOBrgQi+0xbe>
      beta1 = -beta1;
 801ced2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801ced6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801ceda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801cede:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801cee2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801cee6:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 801ceea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ceee:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801cef2:	f04f 0200 	mov.w	r2, #0
 801cef6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801cefa:	4620      	mov	r0, r4
 801cefc:	4629      	mov	r1, r5
 801cefe:	f7e3 fddf 	bl	8000ac0 <__aeabi_dcmplt>
 801cf02:	4603      	mov	r3, r0
 801cf04:	2b00      	cmp	r3, #0
 801cf06:	f000 80f1 	beq.w	801d0ec <qr_DvOBrgQi+0x2c4>
      knt = 0;
 801cf0a:	2300      	movs	r3, #0
 801cf0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 801cf10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801cf14:	3301      	adds	r3, #1
 801cf16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801cf1a:	2301      	movs	r3, #1
 801cf1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801cf20:	e01f      	b.n	801cf62 <qr_DvOBrgQi+0x13a>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801cf22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801cf26:	00db      	lsls	r3, r3, #3
 801cf28:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801cf2c:	4413      	add	r3, r2
 801cf2e:	3bd0      	subs	r3, #208	; 0xd0
 801cf30:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cf34:	f04f 0200 	mov.w	r2, #0
 801cf38:	4bca      	ldr	r3, [pc, #808]	; (801d264 <qr_DvOBrgQi+0x43c>)
 801cf3a:	f7e3 fb4f 	bl	80005dc <__aeabi_dmul>
 801cf3e:	4602      	mov	r2, r0
 801cf40:	460b      	mov	r3, r1
 801cf42:	4610      	mov	r0, r2
 801cf44:	4619      	mov	r1, r3
 801cf46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801cf4a:	00db      	lsls	r3, r3, #3
 801cf4c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801cf50:	4413      	add	r3, r2
 801cf52:	3bd0      	subs	r3, #208	; 0xd0
 801cf54:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801cf58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801cf5c:	3301      	adds	r3, #1
 801cf5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801cf62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801cf66:	2b05      	cmp	r3, #5
 801cf68:	dddb      	ble.n	801cf22 <qr_DvOBrgQi+0xfa>
        }

        beta1 *= 9.9792015476736E+291;
 801cf6a:	f04f 0200 	mov.w	r2, #0
 801cf6e:	4bbd      	ldr	r3, [pc, #756]	; (801d264 <qr_DvOBrgQi+0x43c>)
 801cf70:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801cf74:	f7e3 fb32 	bl	80005dc <__aeabi_dmul>
 801cf78:	4602      	mov	r2, r0
 801cf7a:	460b      	mov	r3, r1
 801cf7c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 801cf80:	f04f 0200 	mov.w	r2, #0
 801cf84:	4bb7      	ldr	r3, [pc, #732]	; (801d264 <qr_DvOBrgQi+0x43c>)
 801cf86:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801cf8a:	f7e3 fb27 	bl	80005dc <__aeabi_dmul>
 801cf8e:	4602      	mov	r2, r0
 801cf90:	460b      	mov	r3, r1
 801cf92:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801cf96:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801cf9a:	65bb      	str	r3, [r7, #88]	; 0x58
 801cf9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801cfa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cfa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 801cfa6:	f04f 0200 	mov.w	r2, #0
 801cfaa:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801cfae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801cfb2:	f7e3 fd85 	bl	8000ac0 <__aeabi_dcmplt>
 801cfb6:	4603      	mov	r3, r0
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d003      	beq.n	801cfc4 <qr_DvOBrgQi+0x19c>
 801cfbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801cfc0:	2b13      	cmp	r3, #19
 801cfc2:	dda5      	ble.n	801cf10 <qr_DvOBrgQi+0xe8>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(5, b_A, 2));
 801cfc4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801cfc8:	2202      	movs	r2, #2
 801cfca:	4619      	mov	r1, r3
 801cfcc:	2005      	movs	r0, #5
 801cfce:	f003 feed 	bl	8020dac <xnrm2_nLdASVZH>
 801cfd2:	eeb0 7a40 	vmov.f32	s14, s0
 801cfd6:	eef0 7a60 	vmov.f32	s15, s1
 801cfda:	eeb0 1a47 	vmov.f32	s2, s14
 801cfde:	eef0 1a67 	vmov.f32	s3, s15
 801cfe2:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 801cfe6:	f001 f9fb 	bl	801e3e0 <rt_hypotd_snf>
 801cfea:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 801cfee:	f04f 0200 	mov.w	r2, #0
 801cff2:	f04f 0300 	mov.w	r3, #0
 801cff6:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801cffa:	f7e3 fd75 	bl	8000ae8 <__aeabi_dcmpge>
 801cffe:	4603      	mov	r3, r0
 801d000:	2b00      	cmp	r3, #0
 801d002:	d009      	beq.n	801d018 <qr_DvOBrgQi+0x1f0>
        beta1 = -beta1;
 801d004:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d008:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801d00c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d010:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801d014:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 801d018:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801d01c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801d020:	f7e3 f924 	bl	800026c <__aeabi_dsub>
 801d024:	4602      	mov	r2, r0
 801d026:	460b      	mov	r3, r1
 801d028:	4610      	mov	r0, r2
 801d02a:	4619      	mov	r1, r3
 801d02c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801d030:	f7e3 fbfe 	bl	8000830 <__aeabi_ddiv>
 801d034:	4602      	mov	r2, r0
 801d036:	460b      	mov	r3, r1
 801d038:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (atmp - beta1);
 801d03c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801d040:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801d044:	f7e3 f912 	bl	800026c <__aeabi_dsub>
 801d048:	4602      	mov	r2, r0
 801d04a:	460b      	mov	r3, r1
 801d04c:	f04f 0000 	mov.w	r0, #0
 801d050:	4985      	ldr	r1, [pc, #532]	; (801d268 <qr_DvOBrgQi+0x440>)
 801d052:	f7e3 fbed 	bl	8000830 <__aeabi_ddiv>
 801d056:	4602      	mov	r2, r0
 801d058:	460b      	mov	r3, r1
 801d05a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801d05e:	2301      	movs	r3, #1
 801d060:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801d064:	e01e      	b.n	801d0a4 <qr_DvOBrgQi+0x27c>
        b_A[b_coltop] *= atmp;
 801d066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d06a:	00db      	lsls	r3, r3, #3
 801d06c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d070:	4413      	add	r3, r2
 801d072:	3bd0      	subs	r3, #208	; 0xd0
 801d074:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d078:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801d07c:	f7e3 faae 	bl	80005dc <__aeabi_dmul>
 801d080:	4602      	mov	r2, r0
 801d082:	460b      	mov	r3, r1
 801d084:	4610      	mov	r0, r2
 801d086:	4619      	mov	r1, r3
 801d088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d08c:	00db      	lsls	r3, r3, #3
 801d08e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d092:	4413      	add	r3, r2
 801d094:	3bd0      	subs	r3, #208	; 0xd0
 801d096:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801d09a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d09e:	3301      	adds	r3, #1
 801d0a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801d0a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d0a8:	2b05      	cmp	r3, #5
 801d0aa:	dddc      	ble.n	801d066 <qr_DvOBrgQi+0x23e>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801d0ac:	2300      	movs	r3, #0
 801d0ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801d0b2:	e010      	b.n	801d0d6 <qr_DvOBrgQi+0x2ae>
        beta1 *= 1.0020841800044864E-292;
 801d0b4:	f04f 0200 	mov.w	r2, #0
 801d0b8:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d0bc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801d0c0:	f7e3 fa8c 	bl	80005dc <__aeabi_dmul>
 801d0c4:	4602      	mov	r2, r0
 801d0c6:	460b      	mov	r3, r1
 801d0c8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801d0cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d0d0:	3301      	adds	r3, #1
 801d0d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801d0d6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801d0da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d0de:	429a      	cmp	r2, r3
 801d0e0:	dbe8      	blt.n	801d0b4 <qr_DvOBrgQi+0x28c>
      }

      atmp = beta1;
 801d0e2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801d0e6:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 801d0ea:	e04d      	b.n	801d188 <qr_DvOBrgQi+0x360>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 801d0ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801d0f0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801d0f4:	f7e3 f8ba 	bl	800026c <__aeabi_dsub>
 801d0f8:	4602      	mov	r2, r0
 801d0fa:	460b      	mov	r3, r1
 801d0fc:	4610      	mov	r0, r2
 801d0fe:	4619      	mov	r1, r3
 801d100:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801d104:	f7e3 fb94 	bl	8000830 <__aeabi_ddiv>
 801d108:	4602      	mov	r2, r0
 801d10a:	460b      	mov	r3, r1
 801d10c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (b_A[0] - beta1);
 801d110:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801d114:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801d118:	f7e3 f8a8 	bl	800026c <__aeabi_dsub>
 801d11c:	4602      	mov	r2, r0
 801d11e:	460b      	mov	r3, r1
 801d120:	f04f 0000 	mov.w	r0, #0
 801d124:	4950      	ldr	r1, [pc, #320]	; (801d268 <qr_DvOBrgQi+0x440>)
 801d126:	f7e3 fb83 	bl	8000830 <__aeabi_ddiv>
 801d12a:	4602      	mov	r2, r0
 801d12c:	460b      	mov	r3, r1
 801d12e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 801d132:	2301      	movs	r3, #1
 801d134:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801d138:	e01e      	b.n	801d178 <qr_DvOBrgQi+0x350>
        b_A[c_lastc] *= atmp;
 801d13a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d13e:	00db      	lsls	r3, r3, #3
 801d140:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d144:	4413      	add	r3, r2
 801d146:	3bd0      	subs	r3, #208	; 0xd0
 801d148:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d14c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801d150:	f7e3 fa44 	bl	80005dc <__aeabi_dmul>
 801d154:	4602      	mov	r2, r0
 801d156:	460b      	mov	r3, r1
 801d158:	4610      	mov	r0, r2
 801d15a:	4619      	mov	r1, r3
 801d15c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d160:	00db      	lsls	r3, r3, #3
 801d162:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d166:	4413      	add	r3, r2
 801d168:	3bd0      	subs	r3, #208	; 0xd0
 801d16a:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 801d16e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d172:	3301      	adds	r3, #1
 801d174:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801d178:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d17c:	2b05      	cmp	r3, #5
 801d17e:	dddc      	ble.n	801d13a <qr_DvOBrgQi+0x312>
      }

      atmp = beta1;
 801d180:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801d184:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[0] = 1.0;
 801d188:	f04f 0200 	mov.w	r2, #0
 801d18c:	4b36      	ldr	r3, [pc, #216]	; (801d268 <qr_DvOBrgQi+0x440>)
 801d18e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 801d192:	f04f 0200 	mov.w	r2, #0
 801d196:	f04f 0300 	mov.w	r3, #0
 801d19a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801d19e:	f7e3 fc85 	bl	8000aac <__aeabi_dcmpeq>
 801d1a2:	4603      	mov	r3, r0
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	f040 8083 	bne.w	801d2b0 <qr_DvOBrgQi+0x488>
    knt = 6;
 801d1aa:	2306      	movs	r3, #6
 801d1ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 5;
 801d1b0:	2305      	movs	r3, #5
 801d1b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801d1b6:	e009      	b.n	801d1cc <qr_DvOBrgQi+0x3a4>
      knt--;
 801d1b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d1bc:	3b01      	subs	r3, #1
 801d1be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 801d1c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d1c6:	3b01      	subs	r3, #1
 801d1c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801d1cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	dd11      	ble.n	801d1f8 <qr_DvOBrgQi+0x3d0>
 801d1d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d1d8:	00db      	lsls	r3, r3, #3
 801d1da:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d1de:	4413      	add	r3, r2
 801d1e0:	3bd0      	subs	r3, #208	; 0xd0
 801d1e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d1e6:	f04f 0200 	mov.w	r2, #0
 801d1ea:	f04f 0300 	mov.w	r3, #0
 801d1ee:	f7e3 fc5d 	bl	8000aac <__aeabi_dcmpeq>
 801d1f2:	4603      	mov	r3, r0
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d1df      	bne.n	801d1b8 <qr_DvOBrgQi+0x390>
    }

    c_lastc = 2;
 801d1f8:	2302      	movs	r3, #2
 801d1fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    exitg2 = false;
 801d1fe:	2300      	movs	r3, #0
 801d200:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 801d204:	e04b      	b.n	801d29e <qr_DvOBrgQi+0x476>
      b_coltop = (c_lastc - 1) * 6 + 6;
 801d206:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801d20a:	4613      	mov	r3, r2
 801d20c:	005b      	lsls	r3, r3, #1
 801d20e:	4413      	add	r3, r2
 801d210:	005b      	lsls	r3, r3, #1
 801d212:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      coltop = b_coltop;
 801d216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d21a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      do {
        exitg1 = 0;
 801d21e:	2300      	movs	r3, #0
 801d220:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (coltop + 1 <= b_coltop + knt) {
 801d224:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801d228:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d22c:	441a      	add	r2, r3
 801d22e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d232:	4293      	cmp	r3, r2
 801d234:	da20      	bge.n	801d278 <qr_DvOBrgQi+0x450>
          if (b_A[coltop] != 0.0) {
 801d236:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d23a:	00db      	lsls	r3, r3, #3
 801d23c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d240:	4413      	add	r3, r2
 801d242:	3bd0      	subs	r3, #208	; 0xd0
 801d244:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d248:	f04f 0200 	mov.w	r2, #0
 801d24c:	f04f 0300 	mov.w	r3, #0
 801d250:	f7e3 fc2c 	bl	8000aac <__aeabi_dcmpeq>
 801d254:	4603      	mov	r3, r0
 801d256:	2b00      	cmp	r3, #0
 801d258:	d108      	bne.n	801d26c <qr_DvOBrgQi+0x444>
            exitg1 = 1;
 801d25a:	2301      	movs	r3, #1
 801d25c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801d260:	e012      	b.n	801d288 <qr_DvOBrgQi+0x460>
 801d262:	bf00      	nop
 801d264:	7c900000 	.word	0x7c900000
 801d268:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 801d26c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d270:	3301      	adds	r3, #1
 801d272:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801d276:	e007      	b.n	801d288 <qr_DvOBrgQi+0x460>
          }
        } else {
          c_lastc--;
 801d278:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d27c:	3b01      	subs	r3, #1
 801d27e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          exitg1 = 2;
 801d282:	2302      	movs	r3, #2
 801d284:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 801d288:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801d28c:	2b00      	cmp	r3, #0
 801d28e:	d0c6      	beq.n	801d21e <qr_DvOBrgQi+0x3f6>

      if (exitg1 == 1) {
 801d290:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801d294:	2b01      	cmp	r3, #1
 801d296:	d102      	bne.n	801d29e <qr_DvOBrgQi+0x476>
        exitg2 = true;
 801d298:	2301      	movs	r3, #1
 801d29a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 801d29e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d10a      	bne.n	801d2bc <qr_DvOBrgQi+0x494>
 801d2a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	dcab      	bgt.n	801d206 <qr_DvOBrgQi+0x3de>
 801d2ae:	e005      	b.n	801d2bc <qr_DvOBrgQi+0x494>
      }
    }
  } else {
    knt = 0;
 801d2b0:	2300      	movs	r3, #0
 801d2b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 801d2b6:	2300      	movs	r3, #0
 801d2b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 801d2bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	dd29      	ble.n	801d318 <qr_DvOBrgQi+0x4f0>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 7, b_A, 1, work);
 801d2c4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801d2c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d2cc:	9302      	str	r3, [sp, #8]
 801d2ce:	2301      	movs	r3, #1
 801d2d0:	9301      	str	r3, [sp, #4]
 801d2d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d2d6:	9300      	str	r3, [sp, #0]
 801d2d8:	2307      	movs	r3, #7
 801d2da:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801d2de:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801d2e2:	f003 f945 	bl	8020570 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_0, 1, work, b_A, 7);
 801d2e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801d2ea:	653b      	str	r3, [r7, #80]	; 0x50
 801d2ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d2f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801d2f4:	657b      	str	r3, [r7, #84]	; 0x54
 801d2f6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801d2fa:	2307      	movs	r3, #7
 801d2fc:	9301      	str	r3, [sp, #4]
 801d2fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d302:	9300      	str	r3, [sp, #0]
 801d304:	4613      	mov	r3, r2
 801d306:	2201      	movs	r2, #1
 801d308:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801d30c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801d310:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801d314:	f003 fa3a 	bl	802078c <xgerc_R09LiDgJ>
  }

  b_A[0] = atmp;
 801d318:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801d31c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  atmp = b_A[7];
 801d320:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801d324:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_1 = 0.0;
 801d328:	f04f 0200 	mov.w	r2, #0
 801d32c:	f04f 0300 	mov.w	r3, #0
 801d330:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  beta1 = xnrm2_nLdASVZH(4, b_A, 9);
 801d334:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d338:	2209      	movs	r2, #9
 801d33a:	4619      	mov	r1, r3
 801d33c:	2004      	movs	r0, #4
 801d33e:	f003 fd35 	bl	8020dac <xnrm2_nLdASVZH>
 801d342:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 801d346:	f04f 0200 	mov.w	r2, #0
 801d34a:	f04f 0300 	mov.w	r3, #0
 801d34e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801d352:	f7e3 fbab 	bl	8000aac <__aeabi_dcmpeq>
 801d356:	4603      	mov	r3, r0
 801d358:	2b00      	cmp	r3, #0
 801d35a:	f040 8174 	bne.w	801d646 <qr_DvOBrgQi+0x81e>
    beta1 = rt_hypotd_snf(b_A[7], beta1);
 801d35e:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 801d362:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 801d366:	eeb0 0a47 	vmov.f32	s0, s14
 801d36a:	eef0 0a67 	vmov.f32	s1, s15
 801d36e:	f001 f837 	bl	801e3e0 <rt_hypotd_snf>
 801d372:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[7] >= 0.0) {
 801d376:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801d37a:	f04f 0200 	mov.w	r2, #0
 801d37e:	f04f 0300 	mov.w	r3, #0
 801d382:	f7e3 fbb1 	bl	8000ae8 <__aeabi_dcmpge>
 801d386:	4603      	mov	r3, r0
 801d388:	2b00      	cmp	r3, #0
 801d38a:	d009      	beq.n	801d3a0 <qr_DvOBrgQi+0x578>
      beta1 = -beta1;
 801d38c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d390:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801d394:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801d39c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801d3a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d3a4:	64bb      	str	r3, [r7, #72]	; 0x48
 801d3a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d3aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d3ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d3b0:	f04f 0200 	mov.w	r2, #0
 801d3b4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d3b8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801d3bc:	f7e3 fb80 	bl	8000ac0 <__aeabi_dcmplt>
 801d3c0:	4603      	mov	r3, r0
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	f000 80f1 	beq.w	801d5aa <qr_DvOBrgQi+0x782>
      knt = 0;
 801d3c8:	2300      	movs	r3, #0
 801d3ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 801d3ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d3d2:	3301      	adds	r3, #1
 801d3d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801d3d8:	2308      	movs	r3, #8
 801d3da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801d3de:	e01f      	b.n	801d420 <qr_DvOBrgQi+0x5f8>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801d3e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d3e4:	00db      	lsls	r3, r3, #3
 801d3e6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d3ea:	4413      	add	r3, r2
 801d3ec:	3bd0      	subs	r3, #208	; 0xd0
 801d3ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d3f2:	f04f 0200 	mov.w	r2, #0
 801d3f6:	4bc6      	ldr	r3, [pc, #792]	; (801d710 <qr_DvOBrgQi+0x8e8>)
 801d3f8:	f7e3 f8f0 	bl	80005dc <__aeabi_dmul>
 801d3fc:	4602      	mov	r2, r0
 801d3fe:	460b      	mov	r3, r1
 801d400:	4610      	mov	r0, r2
 801d402:	4619      	mov	r1, r3
 801d404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d408:	00db      	lsls	r3, r3, #3
 801d40a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d40e:	4413      	add	r3, r2
 801d410:	3bd0      	subs	r3, #208	; 0xd0
 801d412:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801d416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d41a:	3301      	adds	r3, #1
 801d41c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801d420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d424:	2b0b      	cmp	r3, #11
 801d426:	dddb      	ble.n	801d3e0 <qr_DvOBrgQi+0x5b8>
        }

        beta1 *= 9.9792015476736E+291;
 801d428:	f04f 0200 	mov.w	r2, #0
 801d42c:	4bb8      	ldr	r3, [pc, #736]	; (801d710 <qr_DvOBrgQi+0x8e8>)
 801d42e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801d432:	f7e3 f8d3 	bl	80005dc <__aeabi_dmul>
 801d436:	4602      	mov	r2, r0
 801d438:	460b      	mov	r3, r1
 801d43a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 801d43e:	f04f 0200 	mov.w	r2, #0
 801d442:	4bb3      	ldr	r3, [pc, #716]	; (801d710 <qr_DvOBrgQi+0x8e8>)
 801d444:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801d448:	f7e3 f8c8 	bl	80005dc <__aeabi_dmul>
 801d44c:	4602      	mov	r2, r0
 801d44e:	460b      	mov	r3, r1
 801d450:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801d454:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d458:	643b      	str	r3, [r7, #64]	; 0x40
 801d45a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d45e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d462:	647b      	str	r3, [r7, #68]	; 0x44
 801d464:	f04f 0200 	mov.w	r2, #0
 801d468:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d46c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801d470:	f7e3 fb26 	bl	8000ac0 <__aeabi_dcmplt>
 801d474:	4603      	mov	r3, r0
 801d476:	2b00      	cmp	r3, #0
 801d478:	d003      	beq.n	801d482 <qr_DvOBrgQi+0x65a>
 801d47a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d47e:	2b13      	cmp	r3, #19
 801d480:	dda5      	ble.n	801d3ce <qr_DvOBrgQi+0x5a6>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(4, b_A, 9));
 801d482:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d486:	2209      	movs	r2, #9
 801d488:	4619      	mov	r1, r3
 801d48a:	2004      	movs	r0, #4
 801d48c:	f003 fc8e 	bl	8020dac <xnrm2_nLdASVZH>
 801d490:	eeb0 7a40 	vmov.f32	s14, s0
 801d494:	eef0 7a60 	vmov.f32	s15, s1
 801d498:	eeb0 1a47 	vmov.f32	s2, s14
 801d49c:	eef0 1a67 	vmov.f32	s3, s15
 801d4a0:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 801d4a4:	f000 ff9c 	bl	801e3e0 <rt_hypotd_snf>
 801d4a8:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 801d4ac:	f04f 0200 	mov.w	r2, #0
 801d4b0:	f04f 0300 	mov.w	r3, #0
 801d4b4:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801d4b8:	f7e3 fb16 	bl	8000ae8 <__aeabi_dcmpge>
 801d4bc:	4603      	mov	r3, r0
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d009      	beq.n	801d4d6 <qr_DvOBrgQi+0x6ae>
        beta1 = -beta1;
 801d4c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d4c6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801d4ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d4ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801d4d2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 801d4d6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801d4da:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801d4de:	f7e2 fec5 	bl	800026c <__aeabi_dsub>
 801d4e2:	4602      	mov	r2, r0
 801d4e4:	460b      	mov	r3, r1
 801d4e6:	4610      	mov	r0, r2
 801d4e8:	4619      	mov	r1, r3
 801d4ea:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801d4ee:	f7e3 f99f 	bl	8000830 <__aeabi_ddiv>
 801d4f2:	4602      	mov	r2, r0
 801d4f4:	460b      	mov	r3, r1
 801d4f6:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (atmp - beta1);
 801d4fa:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801d4fe:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801d502:	f7e2 feb3 	bl	800026c <__aeabi_dsub>
 801d506:	4602      	mov	r2, r0
 801d508:	460b      	mov	r3, r1
 801d50a:	f04f 0000 	mov.w	r0, #0
 801d50e:	4981      	ldr	r1, [pc, #516]	; (801d714 <qr_DvOBrgQi+0x8ec>)
 801d510:	f7e3 f98e 	bl	8000830 <__aeabi_ddiv>
 801d514:	4602      	mov	r2, r0
 801d516:	460b      	mov	r3, r1
 801d518:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801d51c:	2308      	movs	r3, #8
 801d51e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801d522:	e01e      	b.n	801d562 <qr_DvOBrgQi+0x73a>
        b_A[b_coltop] *= atmp;
 801d524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d528:	00db      	lsls	r3, r3, #3
 801d52a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d52e:	4413      	add	r3, r2
 801d530:	3bd0      	subs	r3, #208	; 0xd0
 801d532:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d536:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801d53a:	f7e3 f84f 	bl	80005dc <__aeabi_dmul>
 801d53e:	4602      	mov	r2, r0
 801d540:	460b      	mov	r3, r1
 801d542:	4610      	mov	r0, r2
 801d544:	4619      	mov	r1, r3
 801d546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d54a:	00db      	lsls	r3, r3, #3
 801d54c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d550:	4413      	add	r3, r2
 801d552:	3bd0      	subs	r3, #208	; 0xd0
 801d554:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801d558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d55c:	3301      	adds	r3, #1
 801d55e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801d562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d566:	2b0b      	cmp	r3, #11
 801d568:	dddc      	ble.n	801d524 <qr_DvOBrgQi+0x6fc>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801d56a:	2300      	movs	r3, #0
 801d56c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801d570:	e010      	b.n	801d594 <qr_DvOBrgQi+0x76c>
        beta1 *= 1.0020841800044864E-292;
 801d572:	f04f 0200 	mov.w	r2, #0
 801d576:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d57a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801d57e:	f7e3 f82d 	bl	80005dc <__aeabi_dmul>
 801d582:	4602      	mov	r2, r0
 801d584:	460b      	mov	r3, r1
 801d586:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801d58a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d58e:	3301      	adds	r3, #1
 801d590:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801d594:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801d598:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d59c:	429a      	cmp	r2, r3
 801d59e:	dbe8      	blt.n	801d572 <qr_DvOBrgQi+0x74a>
      }

      atmp = beta1;
 801d5a0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801d5a4:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 801d5a8:	e04d      	b.n	801d646 <qr_DvOBrgQi+0x81e>
    } else {
      tau_idx_1 = (beta1 - b_A[7]) / beta1;
 801d5aa:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801d5ae:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801d5b2:	f7e2 fe5b 	bl	800026c <__aeabi_dsub>
 801d5b6:	4602      	mov	r2, r0
 801d5b8:	460b      	mov	r3, r1
 801d5ba:	4610      	mov	r0, r2
 801d5bc:	4619      	mov	r1, r3
 801d5be:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801d5c2:	f7e3 f935 	bl	8000830 <__aeabi_ddiv>
 801d5c6:	4602      	mov	r2, r0
 801d5c8:	460b      	mov	r3, r1
 801d5ca:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (b_A[7] - beta1);
 801d5ce:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801d5d2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801d5d6:	f7e2 fe49 	bl	800026c <__aeabi_dsub>
 801d5da:	4602      	mov	r2, r0
 801d5dc:	460b      	mov	r3, r1
 801d5de:	f04f 0000 	mov.w	r0, #0
 801d5e2:	494c      	ldr	r1, [pc, #304]	; (801d714 <qr_DvOBrgQi+0x8ec>)
 801d5e4:	f7e3 f924 	bl	8000830 <__aeabi_ddiv>
 801d5e8:	4602      	mov	r2, r0
 801d5ea:	460b      	mov	r3, r1
 801d5ec:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 801d5f0:	2308      	movs	r3, #8
 801d5f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801d5f6:	e01e      	b.n	801d636 <qr_DvOBrgQi+0x80e>
        b_A[c_lastc] *= atmp;
 801d5f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d5fc:	00db      	lsls	r3, r3, #3
 801d5fe:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d602:	4413      	add	r3, r2
 801d604:	3bd0      	subs	r3, #208	; 0xd0
 801d606:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d60a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801d60e:	f7e2 ffe5 	bl	80005dc <__aeabi_dmul>
 801d612:	4602      	mov	r2, r0
 801d614:	460b      	mov	r3, r1
 801d616:	4610      	mov	r0, r2
 801d618:	4619      	mov	r1, r3
 801d61a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d61e:	00db      	lsls	r3, r3, #3
 801d620:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d624:	4413      	add	r3, r2
 801d626:	3bd0      	subs	r3, #208	; 0xd0
 801d628:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 801d62c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d630:	3301      	adds	r3, #1
 801d632:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801d636:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d63a:	2b0b      	cmp	r3, #11
 801d63c:	dddc      	ble.n	801d5f8 <qr_DvOBrgQi+0x7d0>
      }

      atmp = beta1;
 801d63e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801d642:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[7] = 1.0;
 801d646:	f04f 0200 	mov.w	r2, #0
 801d64a:	4b32      	ldr	r3, [pc, #200]	; (801d714 <qr_DvOBrgQi+0x8ec>)
 801d64c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 801d650:	f04f 0200 	mov.w	r2, #0
 801d654:	f04f 0300 	mov.w	r3, #0
 801d658:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801d65c:	f7e3 fa26 	bl	8000aac <__aeabi_dcmpeq>
 801d660:	4603      	mov	r3, r0
 801d662:	2b00      	cmp	r3, #0
 801d664:	d163      	bne.n	801d72e <qr_DvOBrgQi+0x906>
    knt = 5;
 801d666:	2305      	movs	r3, #5
 801d668:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 11;
 801d66c:	230b      	movs	r3, #11
 801d66e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801d672:	e009      	b.n	801d688 <qr_DvOBrgQi+0x860>
      knt--;
 801d674:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d678:	3b01      	subs	r3, #1
 801d67a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 801d67e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d682:	3b01      	subs	r3, #1
 801d684:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801d688:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	dd11      	ble.n	801d6b4 <qr_DvOBrgQi+0x88c>
 801d690:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d694:	00db      	lsls	r3, r3, #3
 801d696:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d69a:	4413      	add	r3, r2
 801d69c:	3bd0      	subs	r3, #208	; 0xd0
 801d69e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d6a2:	f04f 0200 	mov.w	r2, #0
 801d6a6:	f04f 0300 	mov.w	r3, #0
 801d6aa:	f7e3 f9ff 	bl	8000aac <__aeabi_dcmpeq>
 801d6ae:	4603      	mov	r3, r0
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d1df      	bne.n	801d674 <qr_DvOBrgQi+0x84c>
    }

    c_lastc = 1;
 801d6b4:	2301      	movs	r3, #1
 801d6b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    coltop = 13;
 801d6ba:	230d      	movs	r3, #13
 801d6bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    do {
      exitg1 = 0;
 801d6c0:	2300      	movs	r3, #0
 801d6c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (coltop + 1 <= knt + 13) {
 801d6c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d6ca:	f103 020c 	add.w	r2, r3, #12
 801d6ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d6d2:	4293      	cmp	r3, r2
 801d6d4:	dc20      	bgt.n	801d718 <qr_DvOBrgQi+0x8f0>
        if (b_A[coltop] != 0.0) {
 801d6d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d6da:	00db      	lsls	r3, r3, #3
 801d6dc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d6e0:	4413      	add	r3, r2
 801d6e2:	3bd0      	subs	r3, #208	; 0xd0
 801d6e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d6e8:	f04f 0200 	mov.w	r2, #0
 801d6ec:	f04f 0300 	mov.w	r3, #0
 801d6f0:	f7e3 f9dc 	bl	8000aac <__aeabi_dcmpeq>
 801d6f4:	4603      	mov	r3, r0
 801d6f6:	2b00      	cmp	r3, #0
 801d6f8:	d103      	bne.n	801d702 <qr_DvOBrgQi+0x8da>
          exitg1 = 1;
 801d6fa:	2301      	movs	r3, #1
 801d6fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801d700:	e010      	b.n	801d724 <qr_DvOBrgQi+0x8fc>
        } else {
          coltop++;
 801d702:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d706:	3301      	adds	r3, #1
 801d708:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801d70c:	e00a      	b.n	801d724 <qr_DvOBrgQi+0x8fc>
 801d70e:	bf00      	nop
 801d710:	7c900000 	.word	0x7c900000
 801d714:	3ff00000 	.word	0x3ff00000
        }
      } else {
        c_lastc = 0;
 801d718:	2300      	movs	r3, #0
 801d71a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        exitg1 = 1;
 801d71e:	2301      	movs	r3, #1
 801d720:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 801d724:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d0c9      	beq.n	801d6c0 <qr_DvOBrgQi+0x898>
 801d72c:	e005      	b.n	801d73a <qr_DvOBrgQi+0x912>
  } else {
    knt = 0;
 801d72e:	2300      	movs	r3, #0
 801d730:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 801d734:	2300      	movs	r3, #0
 801d736:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 801d73a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d73e:	2b00      	cmp	r3, #0
 801d740:	dd29      	ble.n	801d796 <qr_DvOBrgQi+0x96e>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 14, b_A, 8, work);
 801d742:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801d746:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d74a:	9302      	str	r3, [sp, #8]
 801d74c:	2308      	movs	r3, #8
 801d74e:	9301      	str	r3, [sp, #4]
 801d750:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d754:	9300      	str	r3, [sp, #0]
 801d756:	230e      	movs	r3, #14
 801d758:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801d75c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801d760:	f002 ff06 	bl	8020570 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_1, 8, work, b_A, 14);
 801d764:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801d768:	63bb      	str	r3, [r7, #56]	; 0x38
 801d76a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801d76e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801d772:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d774:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801d778:	230e      	movs	r3, #14
 801d77a:	9301      	str	r3, [sp, #4]
 801d77c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d780:	9300      	str	r3, [sp, #0]
 801d782:	4613      	mov	r3, r2
 801d784:	2208      	movs	r2, #8
 801d786:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 801d78a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801d78e:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801d792:	f002 fffb 	bl	802078c <xgerc_R09LiDgJ>
  }

  b_A[7] = atmp;
 801d796:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801d79a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  atmp = b_A[14];
 801d79e:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801d7a2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_2 = 0.0;
 801d7a6:	f04f 0200 	mov.w	r2, #0
 801d7aa:	f04f 0300 	mov.w	r3, #0
 801d7ae:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  beta1 = xnrm2_nLdASVZH(3, b_A, 16);
 801d7b2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d7b6:	2210      	movs	r2, #16
 801d7b8:	4619      	mov	r1, r3
 801d7ba:	2003      	movs	r0, #3
 801d7bc:	f003 faf6 	bl	8020dac <xnrm2_nLdASVZH>
 801d7c0:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 801d7c4:	f04f 0200 	mov.w	r2, #0
 801d7c8:	f04f 0300 	mov.w	r3, #0
 801d7cc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801d7d0:	f7e3 f96c 	bl	8000aac <__aeabi_dcmpeq>
 801d7d4:	4603      	mov	r3, r0
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	f040 8170 	bne.w	801dabc <qr_DvOBrgQi+0xc94>
    beta1 = rt_hypotd_snf(b_A[14], beta1);
 801d7dc:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 801d7e0:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 801d7e4:	eeb0 0a47 	vmov.f32	s0, s14
 801d7e8:	eef0 0a67 	vmov.f32	s1, s15
 801d7ec:	f000 fdf8 	bl	801e3e0 <rt_hypotd_snf>
 801d7f0:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[14] >= 0.0) {
 801d7f4:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 801d7f8:	f04f 0200 	mov.w	r2, #0
 801d7fc:	f04f 0300 	mov.w	r3, #0
 801d800:	f7e3 f972 	bl	8000ae8 <__aeabi_dcmpge>
 801d804:	4603      	mov	r3, r0
 801d806:	2b00      	cmp	r3, #0
 801d808:	d009      	beq.n	801d81e <qr_DvOBrgQi+0x9f6>
      beta1 = -beta1;
 801d80a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d80e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801d812:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d816:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801d81a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801d81e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d822:	633b      	str	r3, [r7, #48]	; 0x30
 801d824:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d82c:	637b      	str	r3, [r7, #52]	; 0x34
 801d82e:	f04f 0200 	mov.w	r2, #0
 801d832:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d836:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801d83a:	f7e3 f941 	bl	8000ac0 <__aeabi_dcmplt>
 801d83e:	4603      	mov	r3, r0
 801d840:	2b00      	cmp	r3, #0
 801d842:	f000 80ef 	beq.w	801da24 <qr_DvOBrgQi+0xbfc>
      knt = 0;
 801d846:	2300      	movs	r3, #0
 801d848:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 801d84c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d850:	3301      	adds	r3, #1
 801d852:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801d856:	230f      	movs	r3, #15
 801d858:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801d85c:	e01f      	b.n	801d89e <qr_DvOBrgQi+0xa76>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801d85e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d862:	00db      	lsls	r3, r3, #3
 801d864:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d868:	4413      	add	r3, r2
 801d86a:	3bd0      	subs	r3, #208	; 0xd0
 801d86c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d870:	f04f 0200 	mov.w	r2, #0
 801d874:	4bb5      	ldr	r3, [pc, #724]	; (801db4c <qr_DvOBrgQi+0xd24>)
 801d876:	f7e2 feb1 	bl	80005dc <__aeabi_dmul>
 801d87a:	4602      	mov	r2, r0
 801d87c:	460b      	mov	r3, r1
 801d87e:	4610      	mov	r0, r2
 801d880:	4619      	mov	r1, r3
 801d882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d886:	00db      	lsls	r3, r3, #3
 801d888:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d88c:	4413      	add	r3, r2
 801d88e:	3bd0      	subs	r3, #208	; 0xd0
 801d890:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801d894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d898:	3301      	adds	r3, #1
 801d89a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801d89e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d8a2:	2b11      	cmp	r3, #17
 801d8a4:	dddb      	ble.n	801d85e <qr_DvOBrgQi+0xa36>
        }

        beta1 *= 9.9792015476736E+291;
 801d8a6:	f04f 0200 	mov.w	r2, #0
 801d8aa:	4ba8      	ldr	r3, [pc, #672]	; (801db4c <qr_DvOBrgQi+0xd24>)
 801d8ac:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801d8b0:	f7e2 fe94 	bl	80005dc <__aeabi_dmul>
 801d8b4:	4602      	mov	r2, r0
 801d8b6:	460b      	mov	r3, r1
 801d8b8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 801d8bc:	f04f 0200 	mov.w	r2, #0
 801d8c0:	4ba2      	ldr	r3, [pc, #648]	; (801db4c <qr_DvOBrgQi+0xd24>)
 801d8c2:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801d8c6:	f7e2 fe89 	bl	80005dc <__aeabi_dmul>
 801d8ca:	4602      	mov	r2, r0
 801d8cc:	460b      	mov	r3, r1
 801d8ce:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801d8d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d8d6:	62bb      	str	r3, [r7, #40]	; 0x28
 801d8d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d8dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d8e2:	f04f 0200 	mov.w	r2, #0
 801d8e6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d8ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801d8ee:	f7e3 f8e7 	bl	8000ac0 <__aeabi_dcmplt>
 801d8f2:	4603      	mov	r3, r0
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	d003      	beq.n	801d900 <qr_DvOBrgQi+0xad8>
 801d8f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d8fc:	2b13      	cmp	r3, #19
 801d8fe:	dda5      	ble.n	801d84c <qr_DvOBrgQi+0xa24>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(3, b_A, 16));
 801d900:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d904:	2210      	movs	r2, #16
 801d906:	4619      	mov	r1, r3
 801d908:	2003      	movs	r0, #3
 801d90a:	f003 fa4f 	bl	8020dac <xnrm2_nLdASVZH>
 801d90e:	eeb0 7a40 	vmov.f32	s14, s0
 801d912:	eef0 7a60 	vmov.f32	s15, s1
 801d916:	eeb0 1a47 	vmov.f32	s2, s14
 801d91a:	eef0 1a67 	vmov.f32	s3, s15
 801d91e:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 801d922:	f000 fd5d 	bl	801e3e0 <rt_hypotd_snf>
 801d926:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 801d92a:	f04f 0200 	mov.w	r2, #0
 801d92e:	f04f 0300 	mov.w	r3, #0
 801d932:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801d936:	f7e3 f8d7 	bl	8000ae8 <__aeabi_dcmpge>
 801d93a:	4603      	mov	r3, r0
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d009      	beq.n	801d954 <qr_DvOBrgQi+0xb2c>
        beta1 = -beta1;
 801d940:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d944:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801d948:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d94c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801d950:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_2 = (beta1 - atmp) / beta1;
 801d954:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801d958:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801d95c:	f7e2 fc86 	bl	800026c <__aeabi_dsub>
 801d960:	4602      	mov	r2, r0
 801d962:	460b      	mov	r3, r1
 801d964:	4610      	mov	r0, r2
 801d966:	4619      	mov	r1, r3
 801d968:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801d96c:	f7e2 ff60 	bl	8000830 <__aeabi_ddiv>
 801d970:	4602      	mov	r2, r0
 801d972:	460b      	mov	r3, r1
 801d974:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (atmp - beta1);
 801d978:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801d97c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801d980:	f7e2 fc74 	bl	800026c <__aeabi_dsub>
 801d984:	4602      	mov	r2, r0
 801d986:	460b      	mov	r3, r1
 801d988:	f04f 0000 	mov.w	r0, #0
 801d98c:	4970      	ldr	r1, [pc, #448]	; (801db50 <qr_DvOBrgQi+0xd28>)
 801d98e:	f7e2 ff4f 	bl	8000830 <__aeabi_ddiv>
 801d992:	4602      	mov	r2, r0
 801d994:	460b      	mov	r3, r1
 801d996:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801d99a:	230f      	movs	r3, #15
 801d99c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801d9a0:	e01c      	b.n	801d9dc <qr_DvOBrgQi+0xbb4>
        b_A[b_coltop] *= atmp;
 801d9a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d9a6:	00db      	lsls	r3, r3, #3
 801d9a8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d9ac:	4413      	add	r3, r2
 801d9ae:	3bd0      	subs	r3, #208	; 0xd0
 801d9b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d9b4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801d9b8:	f7e2 fe10 	bl	80005dc <__aeabi_dmul>
 801d9bc:	4602      	mov	r2, r0
 801d9be:	460b      	mov	r3, r1
 801d9c0:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801d9c4:	00c9      	lsls	r1, r1, #3
 801d9c6:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801d9ca:	4401      	add	r1, r0
 801d9cc:	39d0      	subs	r1, #208	; 0xd0
 801d9ce:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801d9d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d9d6:	3301      	adds	r3, #1
 801d9d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801d9dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d9e0:	2b11      	cmp	r3, #17
 801d9e2:	ddde      	ble.n	801d9a2 <qr_DvOBrgQi+0xb7a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801d9e4:	2300      	movs	r3, #0
 801d9e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801d9ea:	e010      	b.n	801da0e <qr_DvOBrgQi+0xbe6>
        beta1 *= 1.0020841800044864E-292;
 801d9ec:	f04f 0200 	mov.w	r2, #0
 801d9f0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d9f4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801d9f8:	f7e2 fdf0 	bl	80005dc <__aeabi_dmul>
 801d9fc:	4602      	mov	r2, r0
 801d9fe:	460b      	mov	r3, r1
 801da00:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801da04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801da08:	3301      	adds	r3, #1
 801da0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801da0e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801da12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801da16:	429a      	cmp	r2, r3
 801da18:	dbe8      	blt.n	801d9ec <qr_DvOBrgQi+0xbc4>
      }

      atmp = beta1;
 801da1a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801da1e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 801da22:	e04b      	b.n	801dabc <qr_DvOBrgQi+0xc94>
    } else {
      tau_idx_2 = (beta1 - b_A[14]) / beta1;
 801da24:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801da28:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801da2c:	f7e2 fc1e 	bl	800026c <__aeabi_dsub>
 801da30:	4602      	mov	r2, r0
 801da32:	460b      	mov	r3, r1
 801da34:	4610      	mov	r0, r2
 801da36:	4619      	mov	r1, r3
 801da38:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801da3c:	f7e2 fef8 	bl	8000830 <__aeabi_ddiv>
 801da40:	4602      	mov	r2, r0
 801da42:	460b      	mov	r3, r1
 801da44:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (b_A[14] - beta1);
 801da48:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 801da4c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801da50:	f7e2 fc0c 	bl	800026c <__aeabi_dsub>
 801da54:	4602      	mov	r2, r0
 801da56:	460b      	mov	r3, r1
 801da58:	f04f 0000 	mov.w	r0, #0
 801da5c:	493c      	ldr	r1, [pc, #240]	; (801db50 <qr_DvOBrgQi+0xd28>)
 801da5e:	f7e2 fee7 	bl	8000830 <__aeabi_ddiv>
 801da62:	4602      	mov	r2, r0
 801da64:	460b      	mov	r3, r1
 801da66:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 801da6a:	230f      	movs	r3, #15
 801da6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801da70:	e01c      	b.n	801daac <qr_DvOBrgQi+0xc84>
        b_A[c_lastc] *= atmp;
 801da72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801da76:	00db      	lsls	r3, r3, #3
 801da78:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801da7c:	4413      	add	r3, r2
 801da7e:	3bd0      	subs	r3, #208	; 0xd0
 801da80:	e9d3 0100 	ldrd	r0, r1, [r3]
 801da84:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801da88:	f7e2 fda8 	bl	80005dc <__aeabi_dmul>
 801da8c:	4602      	mov	r2, r0
 801da8e:	460b      	mov	r3, r1
 801da90:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801da94:	00c9      	lsls	r1, r1, #3
 801da96:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801da9a:	4401      	add	r1, r0
 801da9c:	39d0      	subs	r1, #208	; 0xd0
 801da9e:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 801daa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801daa6:	3301      	adds	r3, #1
 801daa8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801daac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dab0:	2b11      	cmp	r3, #17
 801dab2:	ddde      	ble.n	801da72 <qr_DvOBrgQi+0xc4a>
      }

      atmp = beta1;
 801dab4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801dab8:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[14] = atmp;
 801dabc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801dac0:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  R[0] = b_A[0];
 801dac4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801dac8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801daca:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801dace:	2301      	movs	r3, #1
 801dad0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801dad4:	e00f      	b.n	801daf6 <qr_DvOBrgQi+0xcce>
    R[c_lastc] = 0.0;
 801dad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dada:	00db      	lsls	r3, r3, #3
 801dadc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801dade:	18d1      	adds	r1, r2, r3
 801dae0:	f04f 0200 	mov.w	r2, #0
 801dae4:	f04f 0300 	mov.w	r3, #0
 801dae8:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801daec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801daf0:	3301      	adds	r3, #1
 801daf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801daf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dafa:	2b02      	cmp	r3, #2
 801dafc:	ddeb      	ble.n	801dad6 <qr_DvOBrgQi+0xcae>
  }

  work[0] = 0.0;
 801dafe:	f04f 0200 	mov.w	r2, #0
 801db02:	f04f 0300 	mov.w	r3, #0
 801db06:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801db0a:	2300      	movs	r3, #0
 801db0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801db10:	e016      	b.n	801db40 <qr_DvOBrgQi+0xd18>
    R[c_lastc + 3] = b_A[c_lastc + 6];
 801db12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801db16:	3306      	adds	r3, #6
 801db18:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801db1c:	3203      	adds	r2, #3
 801db1e:	00d2      	lsls	r2, r2, #3
 801db20:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801db22:	4411      	add	r1, r2
 801db24:	00db      	lsls	r3, r3, #3
 801db26:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801db2a:	4413      	add	r3, r2
 801db2c:	3bd0      	subs	r3, #208	; 0xd0
 801db2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db32:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801db36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801db3a:	3301      	adds	r3, #1
 801db3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801db40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801db44:	2b01      	cmp	r3, #1
 801db46:	dde4      	ble.n	801db12 <qr_DvOBrgQi+0xcea>
  }

  while (c_lastc + 1 < 4) {
 801db48:	e015      	b.n	801db76 <qr_DvOBrgQi+0xd4e>
 801db4a:	bf00      	nop
 801db4c:	7c900000 	.word	0x7c900000
 801db50:	3ff00000 	.word	0x3ff00000
    R[c_lastc + 3] = 0.0;
 801db54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801db58:	3303      	adds	r3, #3
 801db5a:	00db      	lsls	r3, r3, #3
 801db5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801db5e:	18d1      	adds	r1, r2, r3
 801db60:	f04f 0200 	mov.w	r2, #0
 801db64:	f04f 0300 	mov.w	r3, #0
 801db68:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 801db6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801db70:	3301      	adds	r3, #1
 801db72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  while (c_lastc + 1 < 4) {
 801db76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801db7a:	2b02      	cmp	r3, #2
 801db7c:	ddea      	ble.n	801db54 <qr_DvOBrgQi+0xd2c>
  }

  work[1] = 0.0;
 801db7e:	f04f 0200 	mov.w	r2, #0
 801db82:	f04f 0300 	mov.w	r3, #0
 801db86:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801db8a:	2300      	movs	r3, #0
 801db8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801db90:	e016      	b.n	801dbc0 <qr_DvOBrgQi+0xd98>
    R[c_lastc + 6] = b_A[c_lastc + 12];
 801db92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801db96:	330c      	adds	r3, #12
 801db98:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801db9c:	3206      	adds	r2, #6
 801db9e:	00d2      	lsls	r2, r2, #3
 801dba0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801dba2:	4411      	add	r1, r2
 801dba4:	00db      	lsls	r3, r3, #3
 801dba6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801dbaa:	4413      	add	r3, r2
 801dbac:	3bd0      	subs	r3, #208	; 0xd0
 801dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbb2:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801dbb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dbba:	3301      	adds	r3, #1
 801dbbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801dbc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dbc4:	2b02      	cmp	r3, #2
 801dbc6:	dde4      	ble.n	801db92 <qr_DvOBrgQi+0xd6a>
  }

  work[2] = 0.0;
 801dbc8:	f04f 0200 	mov.w	r2, #0
 801dbcc:	f04f 0300 	mov.w	r3, #0
 801dbd0:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801dbd4:	230f      	movs	r3, #15
 801dbd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801dbda:	e024      	b.n	801dc26 <qr_DvOBrgQi+0xdfe>
    b_A[b_coltop] *= -tau_idx_2;
 801dbdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801dbe0:	00db      	lsls	r3, r3, #3
 801dbe2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801dbe6:	4413      	add	r3, r2
 801dbe8:	3bd0      	subs	r3, #208	; 0xd0
 801dbea:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dbee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801dbf2:	623b      	str	r3, [r7, #32]
 801dbf4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801dbf8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801dbfc:	627b      	str	r3, [r7, #36]	; 0x24
 801dbfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801dc02:	f7e2 fceb 	bl	80005dc <__aeabi_dmul>
 801dc06:	4602      	mov	r2, r0
 801dc08:	460b      	mov	r3, r1
 801dc0a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801dc0e:	00c9      	lsls	r1, r1, #3
 801dc10:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801dc14:	4401      	add	r1, r0
 801dc16:	39d0      	subs	r1, #208	; 0xd0
 801dc18:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801dc1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801dc20:	3301      	adds	r3, #1
 801dc22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801dc26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801dc2a:	2b11      	cmp	r3, #17
 801dc2c:	ddd6      	ble.n	801dbdc <qr_DvOBrgQi+0xdb4>
  }

  b_A[14] = 1.0 - tau_idx_2;
 801dc2e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 801dc32:	f04f 0000 	mov.w	r0, #0
 801dc36:	49cc      	ldr	r1, [pc, #816]	; (801df68 <qr_DvOBrgQi+0x1140>)
 801dc38:	f7e2 fb18 	bl	800026c <__aeabi_dsub>
 801dc3c:	4602      	mov	r2, r0
 801dc3e:	460b      	mov	r3, r1
 801dc40:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801dc44:	2300      	movs	r3, #0
 801dc46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801dc4a:	e014      	b.n	801dc76 <qr_DvOBrgQi+0xe4e>
    b_A[13 - c_lastc] = 0.0;
 801dc4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dc50:	f1c3 030d 	rsb	r3, r3, #13
 801dc54:	00db      	lsls	r3, r3, #3
 801dc56:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801dc5a:	4413      	add	r3, r2
 801dc5c:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 801dc60:	f04f 0200 	mov.w	r2, #0
 801dc64:	f04f 0300 	mov.w	r3, #0
 801dc68:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801dc6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dc70:	3301      	adds	r3, #1
 801dc72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801dc76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dc7a:	2b01      	cmp	r3, #1
 801dc7c:	dde6      	ble.n	801dc4c <qr_DvOBrgQi+0xe24>
  }

  b_A[7] = 1.0;
 801dc7e:	f04f 0200 	mov.w	r2, #0
 801dc82:	4bb9      	ldr	r3, [pc, #740]	; (801df68 <qr_DvOBrgQi+0x1140>)
 801dc84:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 801dc88:	f04f 0200 	mov.w	r2, #0
 801dc8c:	f04f 0300 	mov.w	r3, #0
 801dc90:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801dc94:	f7e2 ff0a 	bl	8000aac <__aeabi_dcmpeq>
 801dc98:	4603      	mov	r3, r0
 801dc9a:	2b00      	cmp	r3, #0
 801dc9c:	d15f      	bne.n	801dd5e <qr_DvOBrgQi+0xf36>
    c_lastc = 5;
 801dc9e:	2305      	movs	r3, #5
 801dca0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 13;
 801dca4:	230d      	movs	r3, #13
 801dca6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801dcaa:	e009      	b.n	801dcc0 <qr_DvOBrgQi+0xe98>
      c_lastc--;
 801dcac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dcb0:	3b01      	subs	r3, #1
 801dcb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 801dcb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801dcba:	3b01      	subs	r3, #1
 801dcbc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801dcc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	dd12      	ble.n	801dcee <qr_DvOBrgQi+0xec6>
 801dcc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801dccc:	3b02      	subs	r3, #2
 801dcce:	00db      	lsls	r3, r3, #3
 801dcd0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801dcd4:	4413      	add	r3, r2
 801dcd6:	3bd0      	subs	r3, #208	; 0xd0
 801dcd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dcdc:	f04f 0200 	mov.w	r2, #0
 801dce0:	f04f 0300 	mov.w	r3, #0
 801dce4:	f7e2 fee2 	bl	8000aac <__aeabi_dcmpeq>
 801dce8:	4603      	mov	r3, r0
 801dcea:	2b00      	cmp	r3, #0
 801dcec:	d1de      	bne.n	801dcac <qr_DvOBrgQi+0xe84>
    }

    b_coltop = 1;
 801dcee:	2301      	movs	r3, #1
 801dcf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    knt = 14;
 801dcf4:	230e      	movs	r3, #14
 801dcf6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    do {
      exitg1 = 0;
 801dcfa:	2300      	movs	r3, #0
 801dcfc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (knt <= c_lastc + 13) {
 801dd00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dd04:	330d      	adds	r3, #13
 801dd06:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801dd0a:	429a      	cmp	r2, r3
 801dd0c:	dc1c      	bgt.n	801dd48 <qr_DvOBrgQi+0xf20>
        if (b_A[knt - 1] != 0.0) {
 801dd0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801dd12:	3b01      	subs	r3, #1
 801dd14:	00db      	lsls	r3, r3, #3
 801dd16:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801dd1a:	4413      	add	r3, r2
 801dd1c:	3bd0      	subs	r3, #208	; 0xd0
 801dd1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dd22:	f04f 0200 	mov.w	r2, #0
 801dd26:	f04f 0300 	mov.w	r3, #0
 801dd2a:	f7e2 febf 	bl	8000aac <__aeabi_dcmpeq>
 801dd2e:	4603      	mov	r3, r0
 801dd30:	2b00      	cmp	r3, #0
 801dd32:	d103      	bne.n	801dd3c <qr_DvOBrgQi+0xf14>
          exitg1 = 1;
 801dd34:	2301      	movs	r3, #1
 801dd36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801dd3a:	e00b      	b.n	801dd54 <qr_DvOBrgQi+0xf2c>
        } else {
          knt++;
 801dd3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801dd40:	3301      	adds	r3, #1
 801dd42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801dd46:	e005      	b.n	801dd54 <qr_DvOBrgQi+0xf2c>
        }
      } else {
        b_coltop = 0;
 801dd48:	2300      	movs	r3, #0
 801dd4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        exitg1 = 1;
 801dd4e:	2301      	movs	r3, #1
 801dd50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 801dd54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801dd58:	2b00      	cmp	r3, #0
 801dd5a:	d0ce      	beq.n	801dcfa <qr_DvOBrgQi+0xed2>
 801dd5c:	e005      	b.n	801dd6a <qr_DvOBrgQi+0xf42>
  } else {
    c_lastc = 0;
 801dd5e:	2300      	movs	r3, #0
 801dd60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 801dd64:	2300      	movs	r3, #0
 801dd66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 801dd6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dd6e:	2b00      	cmp	r3, #0
 801dd70:	dd29      	ble.n	801ddc6 <qr_DvOBrgQi+0xf9e>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 14, b_A, 8, work);
 801dd72:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801dd76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801dd7a:	9302      	str	r3, [sp, #8]
 801dd7c:	2308      	movs	r3, #8
 801dd7e:	9301      	str	r3, [sp, #4]
 801dd80:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801dd84:	9300      	str	r3, [sp, #0]
 801dd86:	230e      	movs	r3, #14
 801dd88:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801dd8c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801dd90:	f002 fbee 	bl	8020570 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_1, 8, work, b_A, 14);
 801dd94:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801dd98:	61bb      	str	r3, [r7, #24]
 801dd9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801dd9e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801dda2:	61fb      	str	r3, [r7, #28]
 801dda4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801dda8:	230e      	movs	r3, #14
 801ddaa:	9301      	str	r3, [sp, #4]
 801ddac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ddb0:	9300      	str	r3, [sp, #0]
 801ddb2:	4613      	mov	r3, r2
 801ddb4:	2208      	movs	r2, #8
 801ddb6:	ed97 0b06 	vldr	d0, [r7, #24]
 801ddba:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801ddbe:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801ddc2:	f002 fce3 	bl	802078c <xgerc_R09LiDgJ>
  }

  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801ddc6:	2308      	movs	r3, #8
 801ddc8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801ddcc:	e024      	b.n	801de18 <qr_DvOBrgQi+0xff0>
    b_A[b_coltop] *= -tau_idx_1;
 801ddce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ddd2:	00db      	lsls	r3, r3, #3
 801ddd4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ddd8:	4413      	add	r3, r2
 801ddda:	3bd0      	subs	r3, #208	; 0xd0
 801dddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dde0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801dde4:	613b      	str	r3, [r7, #16]
 801dde6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801ddea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801ddee:	617b      	str	r3, [r7, #20]
 801ddf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801ddf4:	f7e2 fbf2 	bl	80005dc <__aeabi_dmul>
 801ddf8:	4602      	mov	r2, r0
 801ddfa:	460b      	mov	r3, r1
 801ddfc:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801de00:	00c9      	lsls	r1, r1, #3
 801de02:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801de06:	4401      	add	r1, r0
 801de08:	39d0      	subs	r1, #208	; 0xd0
 801de0a:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801de0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801de12:	3301      	adds	r3, #1
 801de14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801de18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801de1c:	2b0b      	cmp	r3, #11
 801de1e:	ddd6      	ble.n	801ddce <qr_DvOBrgQi+0xfa6>
  }

  b_A[7] = 1.0 - tau_idx_1;
 801de20:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801de24:	f04f 0000 	mov.w	r0, #0
 801de28:	494f      	ldr	r1, [pc, #316]	; (801df68 <qr_DvOBrgQi+0x1140>)
 801de2a:	f7e2 fa1f 	bl	800026c <__aeabi_dsub>
 801de2e:	4602      	mov	r2, r0
 801de30:	460b      	mov	r3, r1
 801de32:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  b_A[6] = 0.0;
 801de36:	f04f 0200 	mov.w	r2, #0
 801de3a:	f04f 0300 	mov.w	r3, #0
 801de3e:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  b_A[0] = 1.0;
 801de42:	f04f 0200 	mov.w	r2, #0
 801de46:	4b48      	ldr	r3, [pc, #288]	; (801df68 <qr_DvOBrgQi+0x1140>)
 801de48:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 801de4c:	f04f 0200 	mov.w	r2, #0
 801de50:	f04f 0300 	mov.w	r3, #0
 801de54:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801de58:	f7e2 fe28 	bl	8000aac <__aeabi_dcmpeq>
 801de5c:	4603      	mov	r3, r0
 801de5e:	2b00      	cmp	r3, #0
 801de60:	f040 8084 	bne.w	801df6c <qr_DvOBrgQi+0x1144>
    c_lastc = 6;
 801de64:	2306      	movs	r3, #6
 801de66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 7;
 801de6a:	2307      	movs	r3, #7
 801de6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801de70:	e009      	b.n	801de86 <qr_DvOBrgQi+0x105e>
      c_lastc--;
 801de72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801de76:	3b01      	subs	r3, #1
 801de78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 801de7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801de80:	3b01      	subs	r3, #1
 801de82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801de86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	dd12      	ble.n	801deb4 <qr_DvOBrgQi+0x108c>
 801de8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801de92:	3b02      	subs	r3, #2
 801de94:	00db      	lsls	r3, r3, #3
 801de96:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801de9a:	4413      	add	r3, r2
 801de9c:	3bd0      	subs	r3, #208	; 0xd0
 801de9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dea2:	f04f 0200 	mov.w	r2, #0
 801dea6:	f04f 0300 	mov.w	r3, #0
 801deaa:	f7e2 fdff 	bl	8000aac <__aeabi_dcmpeq>
 801deae:	4603      	mov	r3, r0
 801deb0:	2b00      	cmp	r3, #0
 801deb2:	d1de      	bne.n	801de72 <qr_DvOBrgQi+0x104a>
    }

    b_coltop = 2;
 801deb4:	2302      	movs	r3, #2
 801deb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    exitg2 = false;
 801deba:	2300      	movs	r3, #0
 801debc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 801dec0:	e049      	b.n	801df56 <qr_DvOBrgQi+0x112e>
      coltop = (b_coltop - 1) * 6 + 7;
 801dec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801dec6:	1e5a      	subs	r2, r3, #1
 801dec8:	4613      	mov	r3, r2
 801deca:	005b      	lsls	r3, r3, #1
 801decc:	4413      	add	r3, r2
 801dece:	005b      	lsls	r3, r3, #1
 801ded0:	3307      	adds	r3, #7
 801ded2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      knt = coltop;
 801ded6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801deda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        exitg1 = 0;
 801dede:	2300      	movs	r3, #0
 801dee0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (knt <= (coltop + c_lastc) - 1) {
 801dee4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801dee8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801deec:	4413      	add	r3, r2
 801deee:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801def2:	429a      	cmp	r2, r3
 801def4:	da1c      	bge.n	801df30 <qr_DvOBrgQi+0x1108>
          if (b_A[knt - 1] != 0.0) {
 801def6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801defa:	3b01      	subs	r3, #1
 801defc:	00db      	lsls	r3, r3, #3
 801defe:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801df02:	4413      	add	r3, r2
 801df04:	3bd0      	subs	r3, #208	; 0xd0
 801df06:	e9d3 0100 	ldrd	r0, r1, [r3]
 801df0a:	f04f 0200 	mov.w	r2, #0
 801df0e:	f04f 0300 	mov.w	r3, #0
 801df12:	f7e2 fdcb 	bl	8000aac <__aeabi_dcmpeq>
 801df16:	4603      	mov	r3, r0
 801df18:	2b00      	cmp	r3, #0
 801df1a:	d103      	bne.n	801df24 <qr_DvOBrgQi+0x10fc>
            exitg1 = 1;
 801df1c:	2301      	movs	r3, #1
 801df1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801df22:	e00d      	b.n	801df40 <qr_DvOBrgQi+0x1118>
          } else {
            knt++;
 801df24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801df28:	3301      	adds	r3, #1
 801df2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801df2e:	e007      	b.n	801df40 <qr_DvOBrgQi+0x1118>
          }
        } else {
          b_coltop--;
 801df30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801df34:	3b01      	subs	r3, #1
 801df36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          exitg1 = 2;
 801df3a:	2302      	movs	r3, #2
 801df3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 801df40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801df44:	2b00      	cmp	r3, #0
 801df46:	d0ca      	beq.n	801dede <qr_DvOBrgQi+0x10b6>

      if (exitg1 == 1) {
 801df48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801df4c:	2b01      	cmp	r3, #1
 801df4e:	d102      	bne.n	801df56 <qr_DvOBrgQi+0x112e>
        exitg2 = true;
 801df50:	2301      	movs	r3, #1
 801df52:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 801df56:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	d10c      	bne.n	801df78 <qr_DvOBrgQi+0x1150>
 801df5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801df62:	2b00      	cmp	r3, #0
 801df64:	dcad      	bgt.n	801dec2 <qr_DvOBrgQi+0x109a>
 801df66:	e007      	b.n	801df78 <qr_DvOBrgQi+0x1150>
 801df68:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 801df6c:	2300      	movs	r3, #0
 801df6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 801df72:	2300      	movs	r3, #0
 801df74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 801df78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	dd29      	ble.n	801dfd4 <qr_DvOBrgQi+0x11ac>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 7, b_A, 1, work);
 801df80:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801df84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801df88:	9302      	str	r3, [sp, #8]
 801df8a:	2301      	movs	r3, #1
 801df8c:	9301      	str	r3, [sp, #4]
 801df8e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801df92:	9300      	str	r3, [sp, #0]
 801df94:	2307      	movs	r3, #7
 801df96:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801df9a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801df9e:	f002 fae7 	bl	8020570 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 7);
 801dfa2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801dfa6:	60bb      	str	r3, [r7, #8]
 801dfa8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801dfac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801dfb0:	60fb      	str	r3, [r7, #12]
 801dfb2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801dfb6:	2307      	movs	r3, #7
 801dfb8:	9301      	str	r3, [sp, #4]
 801dfba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801dfbe:	9300      	str	r3, [sp, #0]
 801dfc0:	4613      	mov	r3, r2
 801dfc2:	2201      	movs	r2, #1
 801dfc4:	ed97 0b02 	vldr	d0, [r7, #8]
 801dfc8:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801dfcc:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801dfd0:	f002 fbdc 	bl	802078c <xgerc_R09LiDgJ>
  }

  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801dfd4:	2301      	movs	r3, #1
 801dfd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801dfda:	e024      	b.n	801e026 <qr_DvOBrgQi+0x11fe>
    b_A[b_coltop] *= -tau_idx_0;
 801dfdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801dfe0:	00db      	lsls	r3, r3, #3
 801dfe2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801dfe6:	4413      	add	r3, r2
 801dfe8:	3bd0      	subs	r3, #208	; 0xd0
 801dfea:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dfee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801dff2:	603b      	str	r3, [r7, #0]
 801dff4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801dff8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801dffc:	607b      	str	r3, [r7, #4]
 801dffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e002:	f7e2 faeb 	bl	80005dc <__aeabi_dmul>
 801e006:	4602      	mov	r2, r0
 801e008:	460b      	mov	r3, r1
 801e00a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801e00e:	00c9      	lsls	r1, r1, #3
 801e010:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801e014:	4401      	add	r1, r0
 801e016:	39d0      	subs	r1, #208	; 0xd0
 801e018:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801e01c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801e020:	3301      	adds	r3, #1
 801e022:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801e026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801e02a:	2b05      	cmp	r3, #5
 801e02c:	ddd6      	ble.n	801dfdc <qr_DvOBrgQi+0x11b4>
  }

  b_A[0] = 1.0 - tau_idx_0;
 801e02e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801e032:	f04f 0000 	mov.w	r0, #0
 801e036:	4923      	ldr	r1, [pc, #140]	; (801e0c4 <qr_DvOBrgQi+0x129c>)
 801e038:	f7e2 f918 	bl	800026c <__aeabi_dsub>
 801e03c:	4602      	mov	r2, r0
 801e03e:	460b      	mov	r3, r1
 801e040:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_coltop = 0;
 801e044:	2300      	movs	r3, #0
 801e046:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 801e04a:	2300      	movs	r3, #0
 801e04c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801e050:	e02d      	b.n	801e0ae <qr_DvOBrgQi+0x1286>
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 801e052:	2300      	movs	r3, #0
 801e054:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801e058:	e01b      	b.n	801e092 <qr_DvOBrgQi+0x126a>
      knt = c_lastc + b_coltop;
 801e05a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801e05e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801e062:	4413      	add	r3, r2
 801e064:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Q[knt] = b_A[knt];
 801e068:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801e06c:	00db      	lsls	r3, r3, #3
 801e06e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e070:	18d1      	adds	r1, r2, r3
 801e072:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801e076:	00db      	lsls	r3, r3, #3
 801e078:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801e07c:	4413      	add	r3, r2
 801e07e:	3bd0      	subs	r3, #208	; 0xd0
 801e080:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e084:	e9c1 2300 	strd	r2, r3, [r1]
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 801e088:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801e08c:	3301      	adds	r3, #1
 801e08e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801e092:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801e096:	2b05      	cmp	r3, #5
 801e098:	dddf      	ble.n	801e05a <qr_DvOBrgQi+0x1232>
    }

    b_coltop += 6;
 801e09a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801e09e:	3306      	adds	r3, #6
 801e0a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 801e0a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801e0a8:	3301      	adds	r3, #1
 801e0aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801e0ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801e0b2:	2b02      	cmp	r3, #2
 801e0b4:	ddcd      	ble.n	801e052 <qr_DvOBrgQi+0x122a>
  }
}
 801e0b6:	bf00      	nop
 801e0b8:	bf00      	nop
 801e0ba:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 801e0be:	46bd      	mov	sp, r7
 801e0c0:	bdb0      	pop	{r4, r5, r7, pc}
 801e0c2:	bf00      	nop
 801e0c4:	3ff00000 	.word	0x3ff00000

0801e0c8 <rotate_LZ7ctbe0>:
#include "rotate_LZ7ctbe0.h"
#include <math.h>
#include "rt_hypotd_snf.h"

void rotate_LZ7ctbe0(real_T x, real_T y, real_T *c, real_T *s, real_T *r)
{
 801e0c8:	b5b0      	push	{r4, r5, r7, lr}
 801e0ca:	b092      	sub	sp, #72	; 0x48
 801e0cc:	af00      	add	r7, sp, #0
 801e0ce:	ed87 0b06 	vstr	d0, [r7, #24]
 801e0d2:	ed87 1b04 	vstr	d1, [r7, #16]
 801e0d6:	60f8      	str	r0, [r7, #12]
 801e0d8:	60b9      	str	r1, [r7, #8]
 801e0da:	607a      	str	r2, [r7, #4]
  real_T absx;
  real_T absy;
  absx = fabs(x);
 801e0dc:	69bb      	ldr	r3, [r7, #24]
 801e0de:	643b      	str	r3, [r7, #64]	; 0x40
 801e0e0:	69fb      	ldr	r3, [r7, #28]
 801e0e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e0e6:	647b      	str	r3, [r7, #68]	; 0x44
  absy = fabs(y);
 801e0e8:	693b      	ldr	r3, [r7, #16]
 801e0ea:	63bb      	str	r3, [r7, #56]	; 0x38
 801e0ec:	697b      	ldr	r3, [r7, #20]
 801e0ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (absy == 0.0) {
 801e0f4:	f04f 0200 	mov.w	r2, #0
 801e0f8:	f04f 0300 	mov.w	r3, #0
 801e0fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801e100:	f7e2 fcd4 	bl	8000aac <__aeabi_dcmpeq>
 801e104:	4603      	mov	r3, r0
 801e106:	2b00      	cmp	r3, #0
 801e108:	d012      	beq.n	801e130 <rotate_LZ7ctbe0+0x68>
    *c = 1.0;
 801e10a:	68f9      	ldr	r1, [r7, #12]
 801e10c:	f04f 0200 	mov.w	r2, #0
 801e110:	4b4e      	ldr	r3, [pc, #312]	; (801e24c <rotate_LZ7ctbe0+0x184>)
 801e112:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 0.0;
 801e116:	68b9      	ldr	r1, [r7, #8]
 801e118:	f04f 0200 	mov.w	r2, #0
 801e11c:	f04f 0300 	mov.w	r3, #0
 801e120:	e9c1 2300 	strd	r2, r3, [r1]
    *r = x;
 801e124:	6879      	ldr	r1, [r7, #4]
 801e126:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e12a:	e9c1 2300 	strd	r2, r3, [r1]
    *c = absx / rho;
    xx /= absx;
    *s = xx * yy / rho;
    *r = rho * absy * xx;
  }
}
 801e12e:	e088      	b.n	801e242 <rotate_LZ7ctbe0+0x17a>
  } else if (absx == 0.0) {
 801e130:	f04f 0200 	mov.w	r2, #0
 801e134:	f04f 0300 	mov.w	r3, #0
 801e138:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801e13c:	f7e2 fcb6 	bl	8000aac <__aeabi_dcmpeq>
 801e140:	4603      	mov	r3, r0
 801e142:	2b00      	cmp	r3, #0
 801e144:	d012      	beq.n	801e16c <rotate_LZ7ctbe0+0xa4>
    *c = 0.0;
 801e146:	68f9      	ldr	r1, [r7, #12]
 801e148:	f04f 0200 	mov.w	r2, #0
 801e14c:	f04f 0300 	mov.w	r3, #0
 801e150:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 1.0;
 801e154:	68b9      	ldr	r1, [r7, #8]
 801e156:	f04f 0200 	mov.w	r2, #0
 801e15a:	4b3c      	ldr	r3, [pc, #240]	; (801e24c <rotate_LZ7ctbe0+0x184>)
 801e15c:	e9c1 2300 	strd	r2, r3, [r1]
    *r = y;
 801e160:	6879      	ldr	r1, [r7, #4]
 801e162:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e166:	e9c1 2300 	strd	r2, r3, [r1]
}
 801e16a:	e06a      	b.n	801e242 <rotate_LZ7ctbe0+0x17a>
    absy += absx;
 801e16c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801e170:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801e174:	f7e2 f87c 	bl	8000270 <__adddf3>
 801e178:	4602      	mov	r2, r0
 801e17a:	460b      	mov	r3, r1
 801e17c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xx = x / absy;
 801e180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801e184:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801e188:	f7e2 fb52 	bl	8000830 <__aeabi_ddiv>
 801e18c:	4602      	mov	r2, r0
 801e18e:	460b      	mov	r3, r1
 801e190:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    yy = y / absy;
 801e194:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801e198:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801e19c:	f7e2 fb48 	bl	8000830 <__aeabi_ddiv>
 801e1a0:	4602      	mov	r2, r0
 801e1a2:	460b      	mov	r3, r1
 801e1a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    absx = fabs(xx);
 801e1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e1aa:	643b      	str	r3, [r7, #64]	; 0x40
 801e1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e1ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e1b2:	647b      	str	r3, [r7, #68]	; 0x44
    rho = rt_hypotd_snf(absx, fabs(yy));
 801e1b4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 801e1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e1b8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801e1bc:	ec45 4b11 	vmov	d1, r4, r5
 801e1c0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 801e1c4:	f000 f90c 	bl	801e3e0 <rt_hypotd_snf>
 801e1c8:	ed87 0b08 	vstr	d0, [r7, #32]
    *c = absx / rho;
 801e1cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801e1d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801e1d4:	f7e2 fb2c 	bl	8000830 <__aeabi_ddiv>
 801e1d8:	4602      	mov	r2, r0
 801e1da:	460b      	mov	r3, r1
 801e1dc:	68f9      	ldr	r1, [r7, #12]
 801e1de:	e9c1 2300 	strd	r2, r3, [r1]
    xx /= absx;
 801e1e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801e1e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801e1ea:	f7e2 fb21 	bl	8000830 <__aeabi_ddiv>
 801e1ee:	4602      	mov	r2, r0
 801e1f0:	460b      	mov	r3, r1
 801e1f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    *s = xx * yy / rho;
 801e1f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801e1fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801e1fe:	f7e2 f9ed 	bl	80005dc <__aeabi_dmul>
 801e202:	4602      	mov	r2, r0
 801e204:	460b      	mov	r3, r1
 801e206:	4610      	mov	r0, r2
 801e208:	4619      	mov	r1, r3
 801e20a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801e20e:	f7e2 fb0f 	bl	8000830 <__aeabi_ddiv>
 801e212:	4602      	mov	r2, r0
 801e214:	460b      	mov	r3, r1
 801e216:	68b9      	ldr	r1, [r7, #8]
 801e218:	e9c1 2300 	strd	r2, r3, [r1]
    *r = rho * absy * xx;
 801e21c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801e220:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801e224:	f7e2 f9da 	bl	80005dc <__aeabi_dmul>
 801e228:	4602      	mov	r2, r0
 801e22a:	460b      	mov	r3, r1
 801e22c:	4610      	mov	r0, r2
 801e22e:	4619      	mov	r1, r3
 801e230:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801e234:	f7e2 f9d2 	bl	80005dc <__aeabi_dmul>
 801e238:	4602      	mov	r2, r0
 801e23a:	460b      	mov	r3, r1
 801e23c:	6879      	ldr	r1, [r7, #4]
 801e23e:	e9c1 2300 	strd	r2, r3, [r1]
}
 801e242:	bf00      	nop
 801e244:	3748      	adds	r7, #72	; 0x48
 801e246:	46bd      	mov	sp, r7
 801e248:	bdb0      	pop	{r4, r5, r7, pc}
 801e24a:	bf00      	nop
 801e24c:	3ff00000 	.word	0x3ff00000

0801e250 <rtGetInf>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetInf(void)
{
 801e250:	b580      	push	{r7, lr}
 801e252:	b086      	sub	sp, #24
 801e254:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 801e256:	2340      	movs	r3, #64	; 0x40
 801e258:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 801e25a:	f04f 0200 	mov.w	r2, #0
 801e25e:	f04f 0300 	mov.w	r3, #0
 801e262:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 801e266:	68fb      	ldr	r3, [r7, #12]
 801e268:	2b20      	cmp	r3, #32
 801e26a:	d10b      	bne.n	801e284 <rtGetInf+0x34>
    inf = rtGetInfF();
 801e26c:	f000 f820 	bl	801e2b0 <rtGetInfF>
 801e270:	ee10 3a10 	vmov	r3, s0
 801e274:	4618      	mov	r0, r3
 801e276:	f7e2 f959 	bl	800052c <__aeabi_f2d>
 801e27a:	4602      	mov	r2, r0
 801e27c:	460b      	mov	r3, r1
 801e27e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801e282:	e007      	b.n	801e294 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 801e284:	4b09      	ldr	r3, [pc, #36]	; (801e2ac <rtGetInf+0x5c>)
 801e286:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 801e288:	2300      	movs	r3, #0
 801e28a:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 801e28c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e290:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 801e294:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e298:	ec43 2b17 	vmov	d7, r2, r3
}
 801e29c:	eeb0 0a47 	vmov.f32	s0, s14
 801e2a0:	eef0 0a67 	vmov.f32	s1, s15
 801e2a4:	3718      	adds	r7, #24
 801e2a6:	46bd      	mov	sp, r7
 801e2a8:	bd80      	pop	{r7, pc}
 801e2aa:	bf00      	nop
 801e2ac:	7ff00000 	.word	0x7ff00000

0801e2b0 <rtGetInfF>:

real32_T rtGetInfF(void)
{
 801e2b0:	b480      	push	{r7}
 801e2b2:	b083      	sub	sp, #12
 801e2b4:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 801e2b6:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801e2ba:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	ee07 3a90 	vmov	s15, r3
}
 801e2c2:	eeb0 0a67 	vmov.f32	s0, s15
 801e2c6:	370c      	adds	r7, #12
 801e2c8:	46bd      	mov	sp, r7
 801e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2ce:	4770      	bx	lr

0801e2d0 <rtGetMinusInf>:

real_T rtGetMinusInf(void)
{
 801e2d0:	b580      	push	{r7, lr}
 801e2d2:	b086      	sub	sp, #24
 801e2d4:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 801e2d6:	2340      	movs	r3, #64	; 0x40
 801e2d8:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 801e2da:	f04f 0200 	mov.w	r2, #0
 801e2de:	f04f 0300 	mov.w	r3, #0
 801e2e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 801e2e6:	68fb      	ldr	r3, [r7, #12]
 801e2e8:	2b20      	cmp	r3, #32
 801e2ea:	d10b      	bne.n	801e304 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 801e2ec:	f000 f820 	bl	801e330 <rtGetMinusInfF>
 801e2f0:	ee10 3a10 	vmov	r3, s0
 801e2f4:	4618      	mov	r0, r3
 801e2f6:	f7e2 f919 	bl	800052c <__aeabi_f2d>
 801e2fa:	4602      	mov	r2, r0
 801e2fc:	460b      	mov	r3, r1
 801e2fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801e302:	e007      	b.n	801e314 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 801e304:	4b09      	ldr	r3, [pc, #36]	; (801e32c <rtGetMinusInf+0x5c>)
 801e306:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 801e308:	2300      	movs	r3, #0
 801e30a:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 801e30c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e310:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 801e314:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e318:	ec43 2b17 	vmov	d7, r2, r3
}
 801e31c:	eeb0 0a47 	vmov.f32	s0, s14
 801e320:	eef0 0a67 	vmov.f32	s1, s15
 801e324:	3718      	adds	r7, #24
 801e326:	46bd      	mov	sp, r7
 801e328:	bd80      	pop	{r7, pc}
 801e32a:	bf00      	nop
 801e32c:	fff00000 	.word	0xfff00000

0801e330 <rtGetMinusInfF>:

real32_T rtGetMinusInfF(void)
{
 801e330:	b480      	push	{r7}
 801e332:	b083      	sub	sp, #12
 801e334:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 801e336:	4b06      	ldr	r3, [pc, #24]	; (801e350 <rtGetMinusInfF+0x20>)
 801e338:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	ee07 3a90 	vmov	s15, r3
}
 801e340:	eeb0 0a67 	vmov.f32	s0, s15
 801e344:	370c      	adds	r7, #12
 801e346:	46bd      	mov	sp, r7
 801e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e34c:	4770      	bx	lr
 801e34e:	bf00      	nop
 801e350:	ff800000 	.word	0xff800000

0801e354 <rtGetNaN>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetNaN(void)
{
 801e354:	b580      	push	{r7, lr}
 801e356:	b086      	sub	sp, #24
 801e358:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 801e35a:	2340      	movs	r3, #64	; 0x40
 801e35c:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 801e35e:	f04f 0200 	mov.w	r2, #0
 801e362:	f04f 0300 	mov.w	r3, #0
 801e366:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 801e36a:	68fb      	ldr	r3, [r7, #12]
 801e36c:	2b20      	cmp	r3, #32
 801e36e:	d10b      	bne.n	801e388 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 801e370:	f000 f820 	bl	801e3b4 <rtGetNaNF>
 801e374:	ee10 3a10 	vmov	r3, s0
 801e378:	4618      	mov	r0, r3
 801e37a:	f7e2 f8d7 	bl	800052c <__aeabi_f2d>
 801e37e:	4602      	mov	r2, r0
 801e380:	460b      	mov	r3, r1
 801e382:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801e386:	e007      	b.n	801e398 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 801e388:	4b09      	ldr	r3, [pc, #36]	; (801e3b0 <rtGetNaN+0x5c>)
 801e38a:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 801e38c:	2300      	movs	r3, #0
 801e38e:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 801e390:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e394:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 801e398:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e39c:	ec43 2b17 	vmov	d7, r2, r3
}
 801e3a0:	eeb0 0a47 	vmov.f32	s0, s14
 801e3a4:	eef0 0a67 	vmov.f32	s1, s15
 801e3a8:	3718      	adds	r7, #24
 801e3aa:	46bd      	mov	sp, r7
 801e3ac:	bd80      	pop	{r7, pc}
 801e3ae:	bf00      	nop
 801e3b0:	fff80000 	.word	0xfff80000

0801e3b4 <rtGetNaNF>:

real32_T rtGetNaNF(void)
{
 801e3b4:	b480      	push	{r7}
 801e3b6:	b083      	sub	sp, #12
 801e3b8:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 801e3ba:	f04f 0300 	mov.w	r3, #0
 801e3be:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 801e3c0:	4b05      	ldr	r3, [pc, #20]	; (801e3d8 <rtGetNaNF+0x24>)
 801e3c2:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 801e3c4:	687b      	ldr	r3, [r7, #4]
 801e3c6:	ee07 3a90 	vmov	s15, r3
}
 801e3ca:	eeb0 0a67 	vmov.f32	s0, s15
 801e3ce:	370c      	adds	r7, #12
 801e3d0:	46bd      	mov	sp, r7
 801e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3d6:	4770      	bx	lr
 801e3d8:	ffc00000 	.word	0xffc00000
 801e3dc:	00000000 	.word	0x00000000

0801e3e0 <rt_hypotd_snf>:
#include "rt_hypotd_snf.h"
#include <math.h>
#include "rt_nonfinite.h"

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
 801e3e0:	b580      	push	{r7, lr}
 801e3e2:	b088      	sub	sp, #32
 801e3e4:	af00      	add	r7, sp, #0
 801e3e6:	ed87 0b02 	vstr	d0, [r7, #8]
 801e3ea:	ed87 1b00 	vstr	d1, [r7]
  real_T a;
  real_T y;
  a = fabs(u0);
 801e3ee:	68bb      	ldr	r3, [r7, #8]
 801e3f0:	613b      	str	r3, [r7, #16]
 801e3f2:	68fb      	ldr	r3, [r7, #12]
 801e3f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e3f8:	617b      	str	r3, [r7, #20]
  y = fabs(u1);
 801e3fa:	683b      	ldr	r3, [r7, #0]
 801e3fc:	61bb      	str	r3, [r7, #24]
 801e3fe:	687b      	ldr	r3, [r7, #4]
 801e400:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e404:	61fb      	str	r3, [r7, #28]
  if (a < y) {
 801e406:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e40a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801e40e:	f7e2 fb57 	bl	8000ac0 <__aeabi_dcmplt>
 801e412:	4603      	mov	r3, r0
 801e414:	2b00      	cmp	r3, #0
 801e416:	d02d      	beq.n	801e474 <rt_hypotd_snf+0x94>
    a /= y;
 801e418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e41c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801e420:	f7e2 fa06 	bl	8000830 <__aeabi_ddiv>
 801e424:	4602      	mov	r2, r0
 801e426:	460b      	mov	r3, r1
 801e428:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y *= sqrt(a * a + 1.0);
 801e42c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e430:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801e434:	f7e2 f8d2 	bl	80005dc <__aeabi_dmul>
 801e438:	4602      	mov	r2, r0
 801e43a:	460b      	mov	r3, r1
 801e43c:	4610      	mov	r0, r2
 801e43e:	4619      	mov	r1, r3
 801e440:	f04f 0200 	mov.w	r2, #0
 801e444:	4b38      	ldr	r3, [pc, #224]	; (801e528 <rt_hypotd_snf+0x148>)
 801e446:	f7e1 ff13 	bl	8000270 <__adddf3>
 801e44a:	4602      	mov	r2, r0
 801e44c:	460b      	mov	r3, r1
 801e44e:	ec43 2b17 	vmov	d7, r2, r3
 801e452:	eeb0 0a47 	vmov.f32	s0, s14
 801e456:	eef0 0a67 	vmov.f32	s1, s15
 801e45a:	f00e fe39 	bl	802d0d0 <sqrt>
 801e45e:	ec53 2b10 	vmov	r2, r3, d0
 801e462:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801e466:	f7e2 f8b9 	bl	80005dc <__aeabi_dmul>
 801e46a:	4602      	mov	r2, r0
 801e46c:	460b      	mov	r3, r1
 801e46e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801e472:	e048      	b.n	801e506 <rt_hypotd_snf+0x126>
  } else if (a > y) {
 801e474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e478:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801e47c:	f7e2 fb3e 	bl	8000afc <__aeabi_dcmpgt>
 801e480:	4603      	mov	r3, r0
 801e482:	2b00      	cmp	r3, #0
 801e484:	d02d      	beq.n	801e4e2 <rt_hypotd_snf+0x102>
    y /= a;
 801e486:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e48a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801e48e:	f7e2 f9cf 	bl	8000830 <__aeabi_ddiv>
 801e492:	4602      	mov	r2, r0
 801e494:	460b      	mov	r3, r1
 801e496:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = sqrt(y * y + 1.0) * a;
 801e49a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e49e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801e4a2:	f7e2 f89b 	bl	80005dc <__aeabi_dmul>
 801e4a6:	4602      	mov	r2, r0
 801e4a8:	460b      	mov	r3, r1
 801e4aa:	4610      	mov	r0, r2
 801e4ac:	4619      	mov	r1, r3
 801e4ae:	f04f 0200 	mov.w	r2, #0
 801e4b2:	4b1d      	ldr	r3, [pc, #116]	; (801e528 <rt_hypotd_snf+0x148>)
 801e4b4:	f7e1 fedc 	bl	8000270 <__adddf3>
 801e4b8:	4602      	mov	r2, r0
 801e4ba:	460b      	mov	r3, r1
 801e4bc:	ec43 2b17 	vmov	d7, r2, r3
 801e4c0:	eeb0 0a47 	vmov.f32	s0, s14
 801e4c4:	eef0 0a67 	vmov.f32	s1, s15
 801e4c8:	f00e fe02 	bl	802d0d0 <sqrt>
 801e4cc:	ec53 2b10 	vmov	r2, r3, d0
 801e4d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801e4d4:	f7e2 f882 	bl	80005dc <__aeabi_dmul>
 801e4d8:	4602      	mov	r2, r0
 801e4da:	460b      	mov	r3, r1
 801e4dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801e4e0:	e011      	b.n	801e506 <rt_hypotd_snf+0x126>
  } else if (!rtIsNaN(y)) {
 801e4e2:	ed97 0b06 	vldr	d0, [r7, #24]
 801e4e6:	f000 f889 	bl	801e5fc <rtIsNaN>
 801e4ea:	4603      	mov	r3, r0
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	d10a      	bne.n	801e506 <rt_hypotd_snf+0x126>
    y = a * 1.4142135623730951;
 801e4f0:	a30b      	add	r3, pc, #44	; (adr r3, 801e520 <rt_hypotd_snf+0x140>)
 801e4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801e4fa:	f7e2 f86f 	bl	80005dc <__aeabi_dmul>
 801e4fe:	4602      	mov	r2, r0
 801e500:	460b      	mov	r3, r1
 801e502:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  return y;
 801e506:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e50a:	ec43 2b17 	vmov	d7, r2, r3
}
 801e50e:	eeb0 0a47 	vmov.f32	s0, s14
 801e512:	eef0 0a67 	vmov.f32	s1, s15
 801e516:	3720      	adds	r7, #32
 801e518:	46bd      	mov	sp, r7
 801e51a:	bd80      	pop	{r7, pc}
 801e51c:	f3af 8000 	nop.w
 801e520:	667f3bcd 	.word	0x667f3bcd
 801e524:	3ff6a09e 	.word	0x3ff6a09e
 801e528:	3ff00000 	.word	0x3ff00000

0801e52c <rt_InitInfAndNaN>:
real_T rtNaN;
real32_T rtInfF;
real32_T rtMinusInfF;
real32_T rtNaNF;
void rt_InitInfAndNaN(size_t realSize)
{
 801e52c:	b580      	push	{r7, lr}
 801e52e:	b082      	sub	sp, #8
 801e530:	af00      	add	r7, sp, #0
 801e532:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 801e534:	f7ff ff0e 	bl	801e354 <rtGetNaN>
 801e538:	eeb0 7a40 	vmov.f32	s14, s0
 801e53c:	eef0 7a60 	vmov.f32	s15, s1
 801e540:	4b16      	ldr	r3, [pc, #88]	; (801e59c <rt_InitInfAndNaN+0x70>)
 801e542:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 801e546:	f7ff ff35 	bl	801e3b4 <rtGetNaNF>
 801e54a:	eef0 7a40 	vmov.f32	s15, s0
 801e54e:	4b14      	ldr	r3, [pc, #80]	; (801e5a0 <rt_InitInfAndNaN+0x74>)
 801e550:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 801e554:	f7ff fe7c 	bl	801e250 <rtGetInf>
 801e558:	eeb0 7a40 	vmov.f32	s14, s0
 801e55c:	eef0 7a60 	vmov.f32	s15, s1
 801e560:	4b10      	ldr	r3, [pc, #64]	; (801e5a4 <rt_InitInfAndNaN+0x78>)
 801e562:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 801e566:	f7ff fea3 	bl	801e2b0 <rtGetInfF>
 801e56a:	eef0 7a40 	vmov.f32	s15, s0
 801e56e:	4b0e      	ldr	r3, [pc, #56]	; (801e5a8 <rt_InitInfAndNaN+0x7c>)
 801e570:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 801e574:	f7ff feac 	bl	801e2d0 <rtGetMinusInf>
 801e578:	eeb0 7a40 	vmov.f32	s14, s0
 801e57c:	eef0 7a60 	vmov.f32	s15, s1
 801e580:	4b0a      	ldr	r3, [pc, #40]	; (801e5ac <rt_InitInfAndNaN+0x80>)
 801e582:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 801e586:	f7ff fed3 	bl	801e330 <rtGetMinusInfF>
 801e58a:	eef0 7a40 	vmov.f32	s15, s0
 801e58e:	4b08      	ldr	r3, [pc, #32]	; (801e5b0 <rt_InitInfAndNaN+0x84>)
 801e590:	edc3 7a00 	vstr	s15, [r3]
}
 801e594:	bf00      	nop
 801e596:	3708      	adds	r7, #8
 801e598:	46bd      	mov	sp, r7
 801e59a:	bd80      	pop	{r7, pc}
 801e59c:	2001ded0 	.word	0x2001ded0
 801e5a0:	2001debc 	.word	0x2001debc
 801e5a4:	2001dec0 	.word	0x2001dec0
 801e5a8:	2001deb8 	.word	0x2001deb8
 801e5ac:	2001dec8 	.word	0x2001dec8
 801e5b0:	2001ded8 	.word	0x2001ded8

0801e5b4 <rtIsInf>:

boolean_T rtIsInf(real_T value)
{
 801e5b4:	b580      	push	{r7, lr}
 801e5b6:	b082      	sub	sp, #8
 801e5b8:	af00      	add	r7, sp, #0
 801e5ba:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 801e5be:	4b0d      	ldr	r3, [pc, #52]	; (801e5f4 <rtIsInf+0x40>)
 801e5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 801e5c8:	f7e2 fa70 	bl	8000aac <__aeabi_dcmpeq>
 801e5cc:	4603      	mov	r3, r0
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d109      	bne.n	801e5e6 <rtIsInf+0x32>
 801e5d2:	4b09      	ldr	r3, [pc, #36]	; (801e5f8 <rtIsInf+0x44>)
 801e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 801e5dc:	f7e2 fa66 	bl	8000aac <__aeabi_dcmpeq>
 801e5e0:	4603      	mov	r3, r0
 801e5e2:	2b00      	cmp	r3, #0
 801e5e4:	d001      	beq.n	801e5ea <rtIsInf+0x36>
 801e5e6:	2301      	movs	r3, #1
 801e5e8:	e000      	b.n	801e5ec <rtIsInf+0x38>
 801e5ea:	2300      	movs	r3, #0
}
 801e5ec:	4618      	mov	r0, r3
 801e5ee:	3708      	adds	r7, #8
 801e5f0:	46bd      	mov	sp, r7
 801e5f2:	bd80      	pop	{r7, pc}
 801e5f4:	2001dec0 	.word	0x2001dec0
 801e5f8:	2001dec8 	.word	0x2001dec8

0801e5fc <rtIsNaN>:
{
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

boolean_T rtIsNaN(real_T value)
{
 801e5fc:	b580      	push	{r7, lr}
 801e5fe:	b086      	sub	sp, #24
 801e600:	af00      	add	r7, sp, #0
 801e602:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 801e606:	2300      	movs	r3, #0
 801e608:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 801e60a:	2340      	movs	r3, #64	; 0x40
 801e60c:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 801e60e:	693b      	ldr	r3, [r7, #16]
 801e610:	2b20      	cmp	r3, #32
 801e612:	d10b      	bne.n	801e62c <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 801e614:	e9d7 0100 	ldrd	r0, r1, [r7]
 801e618:	f7e2 fad8 	bl	8000bcc <__aeabi_d2f>
 801e61c:	4603      	mov	r3, r0
 801e61e:	ee00 3a10 	vmov	s0, r3
 801e622:	f000 f821 	bl	801e668 <rtIsNaNF>
 801e626:	4603      	mov	r3, r0
 801e628:	75fb      	strb	r3, [r7, #23]
 801e62a:	e015      	b.n	801e658 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 801e62c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e630:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 801e634:	68fa      	ldr	r2, [r7, #12]
 801e636:	4b0b      	ldr	r3, [pc, #44]	; (801e664 <rtIsNaN+0x68>)
 801e638:	4013      	ands	r3, r2
 801e63a:	4a0a      	ldr	r2, [pc, #40]	; (801e664 <rtIsNaN+0x68>)
 801e63c:	4293      	cmp	r3, r2
 801e63e:	d109      	bne.n	801e654 <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 801e640:	68fb      	ldr	r3, [r7, #12]
 801e642:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 801e646:	2b00      	cmp	r3, #0
 801e648:	d102      	bne.n	801e650 <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 801e64a:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 801e64c:	2b00      	cmp	r3, #0
 801e64e:	d001      	beq.n	801e654 <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 801e650:	2301      	movs	r3, #1
 801e652:	e000      	b.n	801e656 <rtIsNaN+0x5a>
 801e654:	2300      	movs	r3, #0
 801e656:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 801e658:	7dfb      	ldrb	r3, [r7, #23]
}
 801e65a:	4618      	mov	r0, r3
 801e65c:	3718      	adds	r7, #24
 801e65e:	46bd      	mov	sp, r7
 801e660:	bd80      	pop	{r7, pc}
 801e662:	bf00      	nop
 801e664:	7ff00000 	.word	0x7ff00000

0801e668 <rtIsNaNF>:

boolean_T rtIsNaNF(real32_T value)
{
 801e668:	b480      	push	{r7}
 801e66a:	b085      	sub	sp, #20
 801e66c:	af00      	add	r7, sp, #0
 801e66e:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 801e676:	68fb      	ldr	r3, [r7, #12]
 801e678:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 801e67c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e680:	d106      	bne.n	801e690 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 801e682:	68fb      	ldr	r3, [r7, #12]
 801e684:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 801e688:	2b00      	cmp	r3, #0
 801e68a:	d001      	beq.n	801e690 <rtIsNaNF+0x28>
 801e68c:	2301      	movs	r3, #1
 801e68e:	e000      	b.n	801e692 <rtIsNaNF+0x2a>
 801e690:	2300      	movs	r3, #0
 801e692:	b2db      	uxtb	r3, r3
}
 801e694:	4618      	mov	r0, r3
 801e696:	3714      	adds	r7, #20
 801e698:	46bd      	mov	sp, r7
 801e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e69e:	4770      	bx	lr

0801e6a0 <svd_u3DvUgOe>:
#include "xrotg_XzIjz1eG.h"
#include "xrot_i7f01JoJ.h"
#include "xswap_JoAqPjUv.h"

void svd_u3DvUgOe(const real_T A[9], real_T U[9], real_T s[3], real_T V[9])
{
 801e6a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e6a4:	ed2d 8b02 	vpush	{d8}
 801e6a8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 801e6ac:	af02      	add	r7, sp, #8
 801e6ae:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 801e6b2:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 801e6b6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 801e6ba:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801e6be:	6013      	str	r3, [r2, #0]
  int32_T kase;
  int32_T m;
  int32_T qjj;
  int32_T qq;
  boolean_T apply_transform;
  e[0] = 0.0;
 801e6c0:	f04f 0200 	mov.w	r2, #0
 801e6c4:	f04f 0300 	mov.w	r3, #0
 801e6c8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  work[0] = 0.0;
 801e6cc:	f04f 0200 	mov.w	r2, #0
 801e6d0:	f04f 0300 	mov.w	r3, #0
 801e6d4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  e[1] = 0.0;
 801e6d8:	f04f 0200 	mov.w	r2, #0
 801e6dc:	f04f 0300 	mov.w	r3, #0
 801e6e0:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  work[1] = 0.0;
 801e6e4:	f04f 0200 	mov.w	r2, #0
 801e6e8:	f04f 0300 	mov.w	r3, #0
 801e6ec:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  e[2] = 0.0;
 801e6f0:	f04f 0200 	mov.w	r2, #0
 801e6f4:	f04f 0300 	mov.w	r3, #0
 801e6f8:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  work[2] = 0.0;
 801e6fc:	f04f 0200 	mov.w	r2, #0
 801e700:	f04f 0300 	mov.w	r3, #0
 801e704:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  for (qq = 0; qq < 9; qq++) {
 801e708:	2300      	movs	r3, #0
 801e70a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801e70e:	e02e      	b.n	801e76e <svd_u3DvUgOe+0xce>
    b_A[qq] = A[qq];
 801e710:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801e714:	00da      	lsls	r2, r3, #3
 801e716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801e71a:	4413      	add	r3, r2
 801e71c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e720:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801e724:	00db      	lsls	r3, r3, #3
 801e726:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801e72a:	4413      	add	r3, r2
 801e72c:	3b88      	subs	r3, #136	; 0x88
 801e72e:	e9c3 0100 	strd	r0, r1, [r3]
    U[qq] = 0.0;
 801e732:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801e736:	00da      	lsls	r2, r3, #3
 801e738:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801e73c:	1899      	adds	r1, r3, r2
 801e73e:	f04f 0200 	mov.w	r2, #0
 801e742:	f04f 0300 	mov.w	r3, #0
 801e746:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq] = 0.0;
 801e74a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801e74e:	00da      	lsls	r2, r3, #3
 801e750:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	1899      	adds	r1, r3, r2
 801e758:	f04f 0200 	mov.w	r2, #0
 801e75c:	f04f 0300 	mov.w	r3, #0
 801e760:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 0; qq < 9; qq++) {
 801e764:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801e768:	3301      	adds	r3, #1
 801e76a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801e76e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801e772:	2b08      	cmp	r3, #8
 801e774:	ddcc      	ble.n	801e710 <svd_u3DvUgOe+0x70>
  }

  qq = 0;
 801e776:	2300      	movs	r3, #0
 801e778:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  apply_transform = false;
 801e77c:	2300      	movs	r3, #0
 801e77e:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(3, b_A, 1);
 801e782:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801e786:	2201      	movs	r2, #1
 801e788:	4619      	mov	r1, r3
 801e78a:	2003      	movs	r0, #3
 801e78c:	f002 fbbc 	bl	8020f08 <xnrm2_xDOlDEtw>
 801e790:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 801e794:	f04f 0200 	mov.w	r2, #0
 801e798:	f04f 0300 	mov.w	r3, #0
 801e79c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 801e7a0:	f7e2 f9ac 	bl	8000afc <__aeabi_dcmpgt>
 801e7a4:	4603      	mov	r3, r0
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	d07b      	beq.n	801e8a2 <svd_u3DvUgOe+0x202>
    apply_transform = true;
 801e7aa:	2301      	movs	r3, #1
 801e7ac:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[0] < 0.0) {
 801e7b0:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 801e7b4:	f04f 0200 	mov.w	r2, #0
 801e7b8:	f04f 0300 	mov.w	r3, #0
 801e7bc:	f7e2 f980 	bl	8000ac0 <__aeabi_dcmplt>
 801e7c0:	4603      	mov	r3, r0
 801e7c2:	2b00      	cmp	r3, #0
 801e7c4:	d008      	beq.n	801e7d8 <svd_u3DvUgOe+0x138>
      b_s[0] = -nrm;
 801e7c6:	f8d7 41c8 	ldr.w	r4, [r7, #456]	; 0x1c8
 801e7ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 801e7ce:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 801e7d2:	e9c7 4558 	strd	r4, r5, [r7, #352]	; 0x160
 801e7d6:	e003      	b.n	801e7e0 <svd_u3DvUgOe+0x140>
    } else {
      b_s[0] = nrm;
 801e7d8:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 801e7dc:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    }

    if (fabs(b_s[0]) >= 1.0020841800044864E-292) {
 801e7e0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 801e7e4:	4690      	mov	r8, r2
 801e7e6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 801e7ea:	f04f 0200 	mov.w	r2, #0
 801e7ee:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801e7f2:	4640      	mov	r0, r8
 801e7f4:	4649      	mov	r1, r9
 801e7f6:	f7e2 f977 	bl	8000ae8 <__aeabi_dcmpge>
 801e7fa:	4603      	mov	r3, r0
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	d016      	beq.n	801e82e <svd_u3DvUgOe+0x18e>
      xscal_59GtRAwv(3, 1.0 / b_s[0], b_A, 1);
 801e800:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 801e804:	f04f 0000 	mov.w	r0, #0
 801e808:	49c1      	ldr	r1, [pc, #772]	; (801eb10 <svd_u3DvUgOe+0x470>)
 801e80a:	f7e2 f811 	bl	8000830 <__aeabi_ddiv>
 801e80e:	4602      	mov	r2, r0
 801e810:	460b      	mov	r3, r1
 801e812:	ec43 2b17 	vmov	d7, r2, r3
 801e816:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801e81a:	2201      	movs	r2, #1
 801e81c:	4619      	mov	r1, r3
 801e81e:	eeb0 0a47 	vmov.f32	s0, s14
 801e822:	eef0 0a67 	vmov.f32	s1, s15
 801e826:	2003      	movs	r0, #3
 801e828:	f002 fe36 	bl	8021498 <xscal_59GtRAwv>
 801e82c:	e026      	b.n	801e87c <svd_u3DvUgOe+0x1dc>
    } else {
      for (qjj = 0; qjj < 3; qjj++) {
 801e82e:	2300      	movs	r3, #0
 801e830:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801e834:	e01e      	b.n	801e874 <svd_u3DvUgOe+0x1d4>
        b_A[qjj] /= b_s[0];
 801e836:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801e83a:	00db      	lsls	r3, r3, #3
 801e83c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801e840:	4413      	add	r3, r2
 801e842:	3b88      	subs	r3, #136	; 0x88
 801e844:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e848:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 801e84c:	f7e1 fff0 	bl	8000830 <__aeabi_ddiv>
 801e850:	4602      	mov	r2, r0
 801e852:	460b      	mov	r3, r1
 801e854:	4610      	mov	r0, r2
 801e856:	4619      	mov	r1, r3
 801e858:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801e85c:	00db      	lsls	r3, r3, #3
 801e85e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801e862:	4413      	add	r3, r2
 801e864:	3b88      	subs	r3, #136	; 0x88
 801e866:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 0; qjj < 3; qjj++) {
 801e86a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801e86e:	3301      	adds	r3, #1
 801e870:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801e874:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801e878:	2b02      	cmp	r3, #2
 801e87a:	dddc      	ble.n	801e836 <svd_u3DvUgOe+0x196>
      }
    }

    b_A[0]++;
 801e87c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 801e880:	f04f 0200 	mov.w	r2, #0
 801e884:	4ba2      	ldr	r3, [pc, #648]	; (801eb10 <svd_u3DvUgOe+0x470>)
 801e886:	f7e1 fcf3 	bl	8000270 <__adddf3>
 801e88a:	4602      	mov	r2, r0
 801e88c:	460b      	mov	r3, r1
 801e88e:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
    b_s[0] = -b_s[0];
 801e892:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 801e896:	4692      	mov	sl, r2
 801e898:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 801e89c:	e9c7 ab58 	strd	sl, fp, [r7, #352]	; 0x160
 801e8a0:	e005      	b.n	801e8ae <svd_u3DvUgOe+0x20e>
  } else {
    b_s[0] = 0.0;
 801e8a2:	f04f 0200 	mov.w	r2, #0
 801e8a6:	f04f 0300 	mov.w	r3, #0
 801e8aa:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  }

  for (d = 1; d + 1 < 4; d++) {
 801e8ae:	2301      	movs	r3, #1
 801e8b0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801e8b4:	e047      	b.n	801e946 <svd_u3DvUgOe+0x2a6>
    qjj = 3 * d;
 801e8b6:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801e8ba:	4613      	mov	r3, r2
 801e8bc:	005b      	lsls	r3, r3, #1
 801e8be:	4413      	add	r3, r2
 801e8c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 801e8c4:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	d025      	beq.n	801e918 <svd_u3DvUgOe+0x278>
      xaxpy_guu0hJif(3, -(xdotc_mznw4aLl(3, b_A, 1, b_A, qjj + 1) / b_A[0]), 1,
 801e8cc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801e8d0:	3301      	adds	r3, #1
 801e8d2:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 801e8d6:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 801e8da:	9300      	str	r3, [sp, #0]
 801e8dc:	4613      	mov	r3, r2
 801e8de:	2201      	movs	r2, #1
 801e8e0:	2003      	movs	r0, #3
 801e8e2:	f001 fdf8 	bl	80204d6 <xdotc_mznw4aLl>
 801e8e6:	ec51 0b10 	vmov	r0, r1, d0
 801e8ea:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 801e8ee:	f7e1 ff9f 	bl	8000830 <__aeabi_ddiv>
 801e8f2:	4602      	mov	r2, r0
 801e8f4:	460b      	mov	r3, r1
 801e8f6:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 801e8fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e8fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801e902:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801e906:	3301      	adds	r3, #1
 801e908:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 801e90c:	2101      	movs	r1, #1
 801e90e:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 801e912:	2003      	movs	r0, #3
 801e914:	f001 fd8b 	bl	802042e <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 801e918:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801e91c:	00db      	lsls	r3, r3, #3
 801e91e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801e922:	4413      	add	r3, r2
 801e924:	3b88      	subs	r3, #136	; 0x88
 801e926:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e92a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801e92e:	00db      	lsls	r3, r3, #3
 801e930:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801e934:	4413      	add	r3, r2
 801e936:	3bb8      	subs	r3, #184	; 0xb8
 801e938:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 1; d + 1 < 4; d++) {
 801e93c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801e940:	3301      	adds	r3, #1
 801e942:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801e946:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801e94a:	2b02      	cmp	r3, #2
 801e94c:	ddb3      	ble.n	801e8b6 <svd_u3DvUgOe+0x216>
  }

  while (qq + 1 < 4) {
 801e94e:	e015      	b.n	801e97c <svd_u3DvUgOe+0x2dc>
    U[qq] = b_A[qq];
 801e950:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801e954:	00da      	lsls	r2, r3, #3
 801e956:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801e95a:	1899      	adds	r1, r3, r2
 801e95c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801e960:	00db      	lsls	r3, r3, #3
 801e962:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801e966:	4413      	add	r3, r2
 801e968:	3b88      	subs	r3, #136	; 0x88
 801e96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e96e:	e9c1 2300 	strd	r2, r3, [r1]
    qq++;
 801e972:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801e976:	3301      	adds	r3, #1
 801e978:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  while (qq + 1 < 4) {
 801e97c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801e980:	2b02      	cmp	r3, #2
 801e982:	dde5      	ble.n	801e950 <svd_u3DvUgOe+0x2b0>
  }

  nrm = xnrm2_Rlk0oxWw(2, e, 2);
 801e984:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801e988:	2202      	movs	r2, #2
 801e98a:	4619      	mov	r1, r3
 801e98c:	2002      	movs	r0, #2
 801e98e:	f002 f95f 	bl	8020c50 <xnrm2_Rlk0oxWw>
 801e992:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm == 0.0) {
 801e996:	f04f 0200 	mov.w	r2, #0
 801e99a:	f04f 0300 	mov.w	r3, #0
 801e99e:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 801e9a2:	f7e2 f883 	bl	8000aac <__aeabi_dcmpeq>
 801e9a6:	4603      	mov	r3, r0
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	d006      	beq.n	801e9ba <svd_u3DvUgOe+0x31a>
    e[0] = 0.0;
 801e9ac:	f04f 0200 	mov.w	r2, #0
 801e9b0:	f04f 0300 	mov.w	r3, #0
 801e9b4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 801e9b8:	e10d      	b.n	801ebd6 <svd_u3DvUgOe+0x536>
  } else {
    if (e[1] < 0.0) {
 801e9ba:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801e9be:	f04f 0200 	mov.w	r2, #0
 801e9c2:	f04f 0300 	mov.w	r3, #0
 801e9c6:	f7e2 f87b 	bl	8000ac0 <__aeabi_dcmplt>
 801e9ca:	4603      	mov	r3, r0
 801e9cc:	2b00      	cmp	r3, #0
 801e9ce:	d00e      	beq.n	801e9ee <svd_u3DvUgOe+0x34e>
      e[0] = -nrm;
 801e9d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 801e9d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801e9d8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 801e9dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e9e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801e9e4:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 801e9e8:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
 801e9ec:	e003      	b.n	801e9f6 <svd_u3DvUgOe+0x356>
    } else {
      e[0] = nrm;
 801e9ee:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 801e9f2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    }

    nrm = e[0];
 801e9f6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801e9fa:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    if (fabs(e[0]) >= 1.0020841800044864E-292) {
 801e9fe:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ea02:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801ea06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ea0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801ea0e:	f04f 0200 	mov.w	r2, #0
 801ea12:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801ea16:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801ea1a:	f7e2 f865 	bl	8000ae8 <__aeabi_dcmpge>
 801ea1e:	4603      	mov	r3, r0
 801ea20:	2b00      	cmp	r3, #0
 801ea22:	d016      	beq.n	801ea52 <svd_u3DvUgOe+0x3b2>
      xscal_PLmmUlD2(2, 1.0 / e[0], e, 2);
 801ea24:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ea28:	f04f 0000 	mov.w	r0, #0
 801ea2c:	4938      	ldr	r1, [pc, #224]	; (801eb10 <svd_u3DvUgOe+0x470>)
 801ea2e:	f7e1 feff 	bl	8000830 <__aeabi_ddiv>
 801ea32:	4602      	mov	r2, r0
 801ea34:	460b      	mov	r3, r1
 801ea36:	ec43 2b17 	vmov	d7, r2, r3
 801ea3a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801ea3e:	2202      	movs	r2, #2
 801ea40:	4619      	mov	r1, r3
 801ea42:	eeb0 0a47 	vmov.f32	s0, s14
 801ea46:	eef0 0a67 	vmov.f32	s1, s15
 801ea4a:	2002      	movs	r0, #2
 801ea4c:	f002 fd58 	bl	8021500 <xscal_PLmmUlD2>
 801ea50:	e026      	b.n	801eaa0 <svd_u3DvUgOe+0x400>
    } else {
      for (qq = 1; qq < 3; qq++) {
 801ea52:	2301      	movs	r3, #1
 801ea54:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801ea58:	e01e      	b.n	801ea98 <svd_u3DvUgOe+0x3f8>
        e[qq] /= nrm;
 801ea5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ea5e:	00db      	lsls	r3, r3, #3
 801ea60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801ea64:	4413      	add	r3, r2
 801ea66:	3bb8      	subs	r3, #184	; 0xb8
 801ea68:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ea6c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 801ea70:	f7e1 fede 	bl	8000830 <__aeabi_ddiv>
 801ea74:	4602      	mov	r2, r0
 801ea76:	460b      	mov	r3, r1
 801ea78:	4610      	mov	r0, r2
 801ea7a:	4619      	mov	r1, r3
 801ea7c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ea80:	00db      	lsls	r3, r3, #3
 801ea82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801ea86:	4413      	add	r3, r2
 801ea88:	3bb8      	subs	r3, #184	; 0xb8
 801ea8a:	e9c3 0100 	strd	r0, r1, [r3]
      for (qq = 1; qq < 3; qq++) {
 801ea8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ea92:	3301      	adds	r3, #1
 801ea94:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801ea98:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ea9c:	2b02      	cmp	r3, #2
 801ea9e:	dddc      	ble.n	801ea5a <svd_u3DvUgOe+0x3ba>
      }
    }

    e[1]++;
 801eaa0:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801eaa4:	f04f 0200 	mov.w	r2, #0
 801eaa8:	4b19      	ldr	r3, [pc, #100]	; (801eb10 <svd_u3DvUgOe+0x470>)
 801eaaa:	f7e1 fbe1 	bl	8000270 <__adddf3>
 801eaae:	4602      	mov	r2, r0
 801eab0:	460b      	mov	r3, r1
 801eab2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    e[0] = -e[0];
 801eab6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801eaba:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 801eabe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801eac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801eac6:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 801eaca:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
    for (qq = 2; qq < 4; qq++) {
 801eace:	2302      	movs	r3, #2
 801ead0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801ead4:	e013      	b.n	801eafe <svd_u3DvUgOe+0x45e>
      work[qq - 1] = 0.0;
 801ead6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801eada:	3b01      	subs	r3, #1
 801eadc:	00db      	lsls	r3, r3, #3
 801eade:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801eae2:	4413      	add	r3, r2
 801eae4:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 801eae8:	f04f 0200 	mov.w	r2, #0
 801eaec:	f04f 0300 	mov.w	r3, #0
 801eaf0:	e9c1 2300 	strd	r2, r3, [r1]
    for (qq = 2; qq < 4; qq++) {
 801eaf4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801eaf8:	3301      	adds	r3, #1
 801eafa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801eafe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801eb02:	2b03      	cmp	r3, #3
 801eb04:	dde7      	ble.n	801ead6 <svd_u3DvUgOe+0x436>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 801eb06:	2301      	movs	r3, #1
 801eb08:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801eb0c:	e025      	b.n	801eb5a <svd_u3DvUgOe+0x4ba>
 801eb0e:	bf00      	nop
 801eb10:	3ff00000 	.word	0x3ff00000
      xaxpy_OQ28XA21(2, e[qq], b_A, 3 * qq + 2, work, 2);
 801eb14:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801eb18:	00db      	lsls	r3, r3, #3
 801eb1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801eb1e:	4413      	add	r3, r2
 801eb20:	3bb8      	subs	r3, #184	; 0xb8
 801eb22:	ed93 7b00 	vldr	d7, [r3]
 801eb26:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801eb2a:	4613      	mov	r3, r2
 801eb2c:	005b      	lsls	r3, r3, #1
 801eb2e:	4413      	add	r3, r2
 801eb30:	1c98      	adds	r0, r3, #2
 801eb32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801eb36:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 801eb3a:	2302      	movs	r3, #2
 801eb3c:	9300      	str	r3, [sp, #0]
 801eb3e:	4613      	mov	r3, r2
 801eb40:	4602      	mov	r2, r0
 801eb42:	eeb0 0a47 	vmov.f32	s0, s14
 801eb46:	eef0 0a67 	vmov.f32	s1, s15
 801eb4a:	2002      	movs	r0, #2
 801eb4c:	f001 fbc7 	bl	80202de <xaxpy_OQ28XA21>
    for (qq = 1; qq + 1 < 4; qq++) {
 801eb50:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801eb54:	3301      	adds	r3, #1
 801eb56:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801eb5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801eb5e:	2b02      	cmp	r3, #2
 801eb60:	ddd8      	ble.n	801eb14 <svd_u3DvUgOe+0x474>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 801eb62:	2301      	movs	r3, #1
 801eb64:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801eb68:	e031      	b.n	801ebce <svd_u3DvUgOe+0x52e>
      xaxpy_Wxch84Fl(2, -e[qq] / e[1], work, 2, b_A, 3 * qq + 2);
 801eb6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801eb6e:	00db      	lsls	r3, r3, #3
 801eb70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801eb74:	4413      	add	r3, r2
 801eb76:	3bb8      	subs	r3, #184	; 0xb8
 801eb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb7c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 801eb80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801eb84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801eb88:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801eb8c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801eb90:	f7e1 fe4e 	bl	8000830 <__aeabi_ddiv>
 801eb94:	4602      	mov	r2, r0
 801eb96:	460b      	mov	r3, r1
 801eb98:	ec43 2b17 	vmov	d7, r2, r3
 801eb9c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801eba0:	4613      	mov	r3, r2
 801eba2:	005b      	lsls	r3, r3, #1
 801eba4:	4413      	add	r3, r2
 801eba6:	3302      	adds	r3, #2
 801eba8:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 801ebac:	f507 7198 	add.w	r1, r7, #304	; 0x130
 801ebb0:	9300      	str	r3, [sp, #0]
 801ebb2:	4613      	mov	r3, r2
 801ebb4:	2202      	movs	r2, #2
 801ebb6:	eeb0 0a47 	vmov.f32	s0, s14
 801ebba:	eef0 0a67 	vmov.f32	s1, s15
 801ebbe:	2002      	movs	r0, #2
 801ebc0:	f001 fbe1 	bl	8020386 <xaxpy_Wxch84Fl>
    for (qq = 1; qq + 1 < 4; qq++) {
 801ebc4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ebc8:	3301      	adds	r3, #1
 801ebca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801ebce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ebd2:	2b02      	cmp	r3, #2
 801ebd4:	ddc9      	ble.n	801eb6a <svd_u3DvUgOe+0x4ca>
    }
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 801ebd6:	2301      	movs	r3, #1
 801ebd8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801ebdc:	e016      	b.n	801ec0c <svd_u3DvUgOe+0x56c>
    V[qq] = e[qq];
 801ebde:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ebe2:	00da      	lsls	r2, r3, #3
 801ebe4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801ebe8:	681b      	ldr	r3, [r3, #0]
 801ebea:	1899      	adds	r1, r3, r2
 801ebec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ebf0:	00db      	lsls	r3, r3, #3
 801ebf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801ebf6:	4413      	add	r3, r2
 801ebf8:	3bb8      	subs	r3, #184	; 0xb8
 801ebfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebfe:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 801ec02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ec06:	3301      	adds	r3, #1
 801ec08:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801ec0c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ec10:	2b02      	cmp	r3, #2
 801ec12:	dde4      	ble.n	801ebde <svd_u3DvUgOe+0x53e>
  }

  apply_transform = false;
 801ec14:	2300      	movs	r3, #0
 801ec16:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(2, b_A, 5);
 801ec1a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801ec1e:	2205      	movs	r2, #5
 801ec20:	4619      	mov	r1, r3
 801ec22:	2002      	movs	r0, #2
 801ec24:	f002 f970 	bl	8020f08 <xnrm2_xDOlDEtw>
 801ec28:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 801ec2c:	f04f 0200 	mov.w	r2, #0
 801ec30:	f04f 0300 	mov.w	r3, #0
 801ec34:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 801ec38:	f7e1 ff60 	bl	8000afc <__aeabi_dcmpgt>
 801ec3c:	4603      	mov	r3, r0
 801ec3e:	2b00      	cmp	r3, #0
 801ec40:	f000 808a 	beq.w	801ed58 <svd_u3DvUgOe+0x6b8>
    apply_transform = true;
 801ec44:	2301      	movs	r3, #1
 801ec46:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[4] < 0.0) {
 801ec4a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 801ec4e:	f04f 0200 	mov.w	r2, #0
 801ec52:	f04f 0300 	mov.w	r3, #0
 801ec56:	f7e1 ff33 	bl	8000ac0 <__aeabi_dcmplt>
 801ec5a:	4603      	mov	r3, r0
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	d00e      	beq.n	801ec7e <svd_u3DvUgOe+0x5de>
      b_s[1] = -nrm;
 801ec60:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 801ec64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801ec68:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 801ec6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801ec70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801ec74:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 801ec78:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 801ec7c:	e003      	b.n	801ec86 <svd_u3DvUgOe+0x5e6>
    } else {
      b_s[1] = nrm;
 801ec7e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 801ec82:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    }

    if (fabs(b_s[1]) >= 1.0020841800044864E-292) {
 801ec86:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 801ec8a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 801ec8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ec92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801ec96:	f04f 0200 	mov.w	r2, #0
 801ec9a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801ec9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801eca2:	f7e1 ff21 	bl	8000ae8 <__aeabi_dcmpge>
 801eca6:	4603      	mov	r3, r0
 801eca8:	2b00      	cmp	r3, #0
 801ecaa:	d016      	beq.n	801ecda <svd_u3DvUgOe+0x63a>
      xscal_59GtRAwv(2, 1.0 / b_s[1], b_A, 5);
 801ecac:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 801ecb0:	f04f 0000 	mov.w	r0, #0
 801ecb4:	49d6      	ldr	r1, [pc, #856]	; (801f010 <svd_u3DvUgOe+0x970>)
 801ecb6:	f7e1 fdbb 	bl	8000830 <__aeabi_ddiv>
 801ecba:	4602      	mov	r2, r0
 801ecbc:	460b      	mov	r3, r1
 801ecbe:	ec43 2b17 	vmov	d7, r2, r3
 801ecc2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801ecc6:	2205      	movs	r2, #5
 801ecc8:	4619      	mov	r1, r3
 801ecca:	eeb0 0a47 	vmov.f32	s0, s14
 801ecce:	eef0 0a67 	vmov.f32	s1, s15
 801ecd2:	2002      	movs	r0, #2
 801ecd4:	f002 fbe0 	bl	8021498 <xscal_59GtRAwv>
 801ecd8:	e026      	b.n	801ed28 <svd_u3DvUgOe+0x688>
    } else {
      for (qjj = 4; qjj < 6; qjj++) {
 801ecda:	2304      	movs	r3, #4
 801ecdc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801ece0:	e01e      	b.n	801ed20 <svd_u3DvUgOe+0x680>
        b_A[qjj] /= b_s[1];
 801ece2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ece6:	00db      	lsls	r3, r3, #3
 801ece8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801ecec:	4413      	add	r3, r2
 801ecee:	3b88      	subs	r3, #136	; 0x88
 801ecf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ecf4:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 801ecf8:	f7e1 fd9a 	bl	8000830 <__aeabi_ddiv>
 801ecfc:	4602      	mov	r2, r0
 801ecfe:	460b      	mov	r3, r1
 801ed00:	4610      	mov	r0, r2
 801ed02:	4619      	mov	r1, r3
 801ed04:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ed08:	00db      	lsls	r3, r3, #3
 801ed0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801ed0e:	4413      	add	r3, r2
 801ed10:	3b88      	subs	r3, #136	; 0x88
 801ed12:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 4; qjj < 6; qjj++) {
 801ed16:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ed1a:	3301      	adds	r3, #1
 801ed1c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801ed20:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ed24:	2b05      	cmp	r3, #5
 801ed26:	dddc      	ble.n	801ece2 <svd_u3DvUgOe+0x642>
      }
    }

    b_A[4]++;
 801ed28:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 801ed2c:	f04f 0200 	mov.w	r2, #0
 801ed30:	4bb7      	ldr	r3, [pc, #732]	; (801f010 <svd_u3DvUgOe+0x970>)
 801ed32:	f7e1 fa9d 	bl	8000270 <__adddf3>
 801ed36:	4602      	mov	r2, r0
 801ed38:	460b      	mov	r3, r1
 801ed3a:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    b_s[1] = -b_s[1];
 801ed3e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 801ed42:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 801ed46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801ed4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801ed4e:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 801ed52:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 801ed56:	e005      	b.n	801ed64 <svd_u3DvUgOe+0x6c4>
  } else {
    b_s[1] = 0.0;
 801ed58:	f04f 0200 	mov.w	r2, #0
 801ed5c:	f04f 0300 	mov.w	r3, #0
 801ed60:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  }

  for (d = 2; d + 1 < 4; d++) {
 801ed64:	2302      	movs	r3, #2
 801ed66:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801ed6a:	e048      	b.n	801edfe <svd_u3DvUgOe+0x75e>
    qjj = 3 * d + 1;
 801ed6c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801ed70:	4613      	mov	r3, r2
 801ed72:	005b      	lsls	r3, r3, #1
 801ed74:	4413      	add	r3, r2
 801ed76:	3301      	adds	r3, #1
 801ed78:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 801ed7c:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 801ed80:	2b00      	cmp	r3, #0
 801ed82:	d025      	beq.n	801edd0 <svd_u3DvUgOe+0x730>
      xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, b_A, 5, b_A, qjj + 1) / b_A[4]), 5,
 801ed84:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ed88:	3301      	adds	r3, #1
 801ed8a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 801ed8e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 801ed92:	9300      	str	r3, [sp, #0]
 801ed94:	4613      	mov	r3, r2
 801ed96:	2205      	movs	r2, #5
 801ed98:	2002      	movs	r0, #2
 801ed9a:	f001 fb9c 	bl	80204d6 <xdotc_mznw4aLl>
 801ed9e:	ec51 0b10 	vmov	r0, r1, d0
 801eda2:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 801eda6:	f7e1 fd43 	bl	8000830 <__aeabi_ddiv>
 801edaa:	4602      	mov	r2, r0
 801edac:	460b      	mov	r3, r1
 801edae:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 801edb2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801edb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801edba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801edbe:	3301      	adds	r3, #1
 801edc0:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 801edc4:	2105      	movs	r1, #5
 801edc6:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 801edca:	2002      	movs	r0, #2
 801edcc:	f001 fb2f 	bl	802042e <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 801edd0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801edd4:	00db      	lsls	r3, r3, #3
 801edd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801edda:	4413      	add	r3, r2
 801eddc:	3b88      	subs	r3, #136	; 0x88
 801edde:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ede2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801ede6:	00db      	lsls	r3, r3, #3
 801ede8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801edec:	4413      	add	r3, r2
 801edee:	3bb8      	subs	r3, #184	; 0xb8
 801edf0:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 2; d + 1 < 4; d++) {
 801edf4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801edf8:	3301      	adds	r3, #1
 801edfa:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801edfe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801ee02:	2b02      	cmp	r3, #2
 801ee04:	ddb2      	ble.n	801ed6c <svd_u3DvUgOe+0x6cc>
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 801ee06:	2301      	movs	r3, #1
 801ee08:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801ee0c:	e017      	b.n	801ee3e <svd_u3DvUgOe+0x79e>
    U[qq + 3] = b_A[qq + 3];
 801ee0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ee12:	1cd8      	adds	r0, r3, #3
 801ee14:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ee18:	3303      	adds	r3, #3
 801ee1a:	00da      	lsls	r2, r3, #3
 801ee1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ee20:	1899      	adds	r1, r3, r2
 801ee22:	00c3      	lsls	r3, r0, #3
 801ee24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801ee28:	4413      	add	r3, r2
 801ee2a:	3b88      	subs	r3, #136	; 0x88
 801ee2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee30:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 801ee34:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ee38:	3301      	adds	r3, #1
 801ee3a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801ee3e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ee42:	2b02      	cmp	r3, #2
 801ee44:	dde3      	ble.n	801ee0e <svd_u3DvUgOe+0x76e>
  }

  m = 1;
 801ee46:	2301      	movs	r3, #1
 801ee48:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  b_s[2] = b_A[8];
 801ee4c:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 801ee50:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  U[6] = 0.0;
 801ee54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ee58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801ee5c:	f04f 0200 	mov.w	r2, #0
 801ee60:	f04f 0300 	mov.w	r3, #0
 801ee64:	e9c1 2300 	strd	r2, r3, [r1]
  U[7] = 0.0;
 801ee68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ee6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801ee70:	f04f 0200 	mov.w	r2, #0
 801ee74:	f04f 0300 	mov.w	r3, #0
 801ee78:	e9c1 2300 	strd	r2, r3, [r1]
  U[8] = 1.0;
 801ee7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ee80:	f103 0140 	add.w	r1, r3, #64	; 0x40
 801ee84:	f04f 0200 	mov.w	r2, #0
 801ee88:	4b61      	ldr	r3, [pc, #388]	; (801f010 <svd_u3DvUgOe+0x970>)
 801ee8a:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 801ee8e:	2301      	movs	r3, #1
 801ee90:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801ee94:	e100      	b.n	801f098 <svd_u3DvUgOe+0x9f8>
    qq = 3 * d + d;
 801ee96:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801ee9a:	009b      	lsls	r3, r3, #2
 801ee9c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    if (b_s[d] != 0.0) {
 801eea0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801eea4:	00db      	lsls	r3, r3, #3
 801eea6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801eeaa:	4413      	add	r3, r2
 801eeac:	3ba0      	subs	r3, #160	; 0xa0
 801eeae:	e9d3 0100 	ldrd	r0, r1, [r3]
 801eeb2:	f04f 0200 	mov.w	r2, #0
 801eeb6:	f04f 0300 	mov.w	r3, #0
 801eeba:	f7e1 fdf7 	bl	8000aac <__aeabi_dcmpeq>
 801eebe:	4603      	mov	r3, r0
 801eec0:	2b00      	cmp	r3, #0
 801eec2:	f040 80a7 	bne.w	801f014 <svd_u3DvUgOe+0x974>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 801eec6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801eeca:	3301      	adds	r3, #1
 801eecc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801eed0:	e043      	b.n	801ef5a <svd_u3DvUgOe+0x8ba>
        qjj = (3 * kase + d) + 1;
 801eed2:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 801eed6:	4613      	mov	r3, r2
 801eed8:	005b      	lsls	r3, r3, #1
 801eeda:	441a      	add	r2, r3
 801eedc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801eee0:	4413      	add	r3, r2
 801eee2:	3301      	adds	r3, #1
 801eee4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(3 - d, -(xdotc_mznw4aLl(3 - d, U, qq + 1, U, qjj) / U[qq]),
 801eee8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801eeec:	f1c3 0403 	rsb	r4, r3, #3
 801eef0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801eef4:	f1c3 0003 	rsb	r0, r3, #3
 801eef8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801eefc:	1c5a      	adds	r2, r3, #1
 801eefe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ef02:	9300      	str	r3, [sp, #0]
 801ef04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ef08:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 801ef0c:	f001 fae3 	bl	80204d6 <xdotc_mznw4aLl>
 801ef10:	ec51 0b10 	vmov	r0, r1, d0
 801ef14:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ef18:	00da      	lsls	r2, r3, #3
 801ef1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ef1e:	4413      	add	r3, r2
 801ef20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef24:	f7e1 fc84 	bl	8000830 <__aeabi_ddiv>
 801ef28:	4602      	mov	r2, r0
 801ef2a:	460b      	mov	r3, r1
 801ef2c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 801ef30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801ef34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801ef38:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ef3c:	1c59      	adds	r1, r3, #1
 801ef3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ef42:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801ef46:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 801ef4a:	4620      	mov	r0, r4
 801ef4c:	f001 fa6f 	bl	802042e <xaxpy_guu0hJif>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 801ef50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801ef54:	3301      	adds	r3, #1
 801ef56:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801ef5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801ef5e:	2b02      	cmp	r3, #2
 801ef60:	ddb7      	ble.n	801eed2 <svd_u3DvUgOe+0x832>
                       qq + 1, U, qjj);
      }

      for (qjj = d; qjj + 1 < 4; qjj++) {
 801ef62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801ef66:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801ef6a:	e026      	b.n	801efba <svd_u3DvUgOe+0x91a>
        kase = 3 * d + qjj;
 801ef6c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801ef70:	4613      	mov	r3, r2
 801ef72:	005b      	lsls	r3, r3, #1
 801ef74:	441a      	add	r2, r3
 801ef76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ef7a:	4413      	add	r3, r2
 801ef7c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        U[kase] = -U[kase];
 801ef80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801ef84:	00da      	lsls	r2, r3, #3
 801ef86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ef8a:	4413      	add	r3, r2
 801ef8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ef90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801ef94:	00da      	lsls	r2, r3, #3
 801ef96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ef9a:	4413      	add	r3, r2
 801ef9c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801efa0:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 801efa4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801efa8:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 801efac:	ed83 7b00 	vstr	d7, [r3]
      for (qjj = d; qjj + 1 < 4; qjj++) {
 801efb0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801efb4:	3301      	adds	r3, #1
 801efb6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801efba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801efbe:	2b02      	cmp	r3, #2
 801efc0:	ddd4      	ble.n	801ef6c <svd_u3DvUgOe+0x8cc>
      }

      U[qq]++;
 801efc2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801efc6:	00da      	lsls	r2, r3, #3
 801efc8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801efcc:	189c      	adds	r4, r3, r2
 801efce:	e9d4 0100 	ldrd	r0, r1, [r4]
 801efd2:	f04f 0200 	mov.w	r2, #0
 801efd6:	4b0e      	ldr	r3, [pc, #56]	; (801f010 <svd_u3DvUgOe+0x970>)
 801efd8:	f7e1 f94a 	bl	8000270 <__adddf3>
 801efdc:	4602      	mov	r2, r0
 801efde:	460b      	mov	r3, r1
 801efe0:	e9c4 2300 	strd	r2, r3, [r4]
      if (d - 1 >= 0) {
 801efe4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801efe8:	2b00      	cmp	r3, #0
 801efea:	dd50      	ble.n	801f08e <svd_u3DvUgOe+0x9ee>
        U[3 * d] = 0.0;
 801efec:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801eff0:	4613      	mov	r3, r2
 801eff2:	005b      	lsls	r3, r3, #1
 801eff4:	4413      	add	r3, r2
 801eff6:	00db      	lsls	r3, r3, #3
 801eff8:	461a      	mov	r2, r3
 801effa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801effe:	1899      	adds	r1, r3, r2
 801f000:	f04f 0200 	mov.w	r2, #0
 801f004:	f04f 0300 	mov.w	r3, #0
 801f008:	e9c1 2300 	strd	r2, r3, [r1]
 801f00c:	e03f      	b.n	801f08e <svd_u3DvUgOe+0x9ee>
 801f00e:	bf00      	nop
 801f010:	3ff00000 	.word	0x3ff00000
      }
    } else {
      U[3 * d] = 0.0;
 801f014:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801f018:	4613      	mov	r3, r2
 801f01a:	005b      	lsls	r3, r3, #1
 801f01c:	4413      	add	r3, r2
 801f01e:	00db      	lsls	r3, r3, #3
 801f020:	461a      	mov	r2, r3
 801f022:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801f026:	1899      	adds	r1, r3, r2
 801f028:	f04f 0200 	mov.w	r2, #0
 801f02c:	f04f 0300 	mov.w	r3, #0
 801f030:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 1] = 0.0;
 801f034:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801f038:	4613      	mov	r3, r2
 801f03a:	005b      	lsls	r3, r3, #1
 801f03c:	4413      	add	r3, r2
 801f03e:	00db      	lsls	r3, r3, #3
 801f040:	f103 0208 	add.w	r2, r3, #8
 801f044:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801f048:	1899      	adds	r1, r3, r2
 801f04a:	f04f 0200 	mov.w	r2, #0
 801f04e:	f04f 0300 	mov.w	r3, #0
 801f052:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 2] = 0.0;
 801f056:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801f05a:	4613      	mov	r3, r2
 801f05c:	005b      	lsls	r3, r3, #1
 801f05e:	4413      	add	r3, r2
 801f060:	00db      	lsls	r3, r3, #3
 801f062:	f103 0210 	add.w	r2, r3, #16
 801f066:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801f06a:	1899      	adds	r1, r3, r2
 801f06c:	f04f 0200 	mov.w	r2, #0
 801f070:	f04f 0300 	mov.w	r3, #0
 801f074:	e9c1 2300 	strd	r2, r3, [r1]
      U[qq] = 1.0;
 801f078:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801f07c:	00da      	lsls	r2, r3, #3
 801f07e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801f082:	1899      	adds	r1, r3, r2
 801f084:	f04f 0200 	mov.w	r2, #0
 801f088:	4b11      	ldr	r3, [pc, #68]	; (801f0d0 <svd_u3DvUgOe+0xa30>)
 801f08a:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 801f08e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801f092:	3b01      	subs	r3, #1
 801f094:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801f098:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	f6bf aefa 	bge.w	801ee96 <svd_u3DvUgOe+0x7f6>
    }
  }

  for (qq = 2; qq >= 0; qq--) {
 801f0a2:	2302      	movs	r3, #2
 801f0a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801f0a8:	e096      	b.n	801f1d8 <svd_u3DvUgOe+0xb38>
    if ((qq + 1 <= 1) && (e[0] != 0.0)) {
 801f0aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801f0ae:	2b00      	cmp	r3, #0
 801f0b0:	dc4c      	bgt.n	801f14c <svd_u3DvUgOe+0xaac>
 801f0b2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f0b6:	f04f 0200 	mov.w	r2, #0
 801f0ba:	f04f 0300 	mov.w	r3, #0
 801f0be:	f7e1 fcf5 	bl	8000aac <__aeabi_dcmpeq>
 801f0c2:	4603      	mov	r3, r0
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	d141      	bne.n	801f14c <svd_u3DvUgOe+0xaac>
      for (d = 2; d < 4; d++) {
 801f0c8:	2302      	movs	r3, #2
 801f0ca:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801f0ce:	e039      	b.n	801f144 <svd_u3DvUgOe+0xaa4>
 801f0d0:	3ff00000 	.word	0x3ff00000
        qjj = (d - 1) * 3 + 2;
 801f0d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801f0d8:	1e5a      	subs	r2, r3, #1
 801f0da:	4613      	mov	r3, r2
 801f0dc:	005b      	lsls	r3, r3, #1
 801f0de:	4413      	add	r3, r2
 801f0e0:	3302      	adds	r3, #2
 801f0e2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, V, 2, V, qjj) / V[1]), 2, V, qjj);
 801f0e6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801f0ea:	f507 7180 	add.w	r1, r7, #256	; 0x100
 801f0ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801f0f2:	9300      	str	r3, [sp, #0]
 801f0f4:	6813      	ldr	r3, [r2, #0]
 801f0f6:	2202      	movs	r2, #2
 801f0f8:	6809      	ldr	r1, [r1, #0]
 801f0fa:	2002      	movs	r0, #2
 801f0fc:	f001 f9eb 	bl	80204d6 <xdotc_mznw4aLl>
 801f100:	ec51 0b10 	vmov	r0, r1, d0
 801f104:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801f108:	681b      	ldr	r3, [r3, #0]
 801f10a:	3308      	adds	r3, #8
 801f10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f110:	f7e1 fb8e 	bl	8000830 <__aeabi_ddiv>
 801f114:	4602      	mov	r2, r0
 801f116:	460b      	mov	r3, r1
 801f118:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801f11c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f120:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801f124:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801f128:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801f12c:	6812      	ldr	r2, [r2, #0]
 801f12e:	2102      	movs	r1, #2
 801f130:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 801f134:	2002      	movs	r0, #2
 801f136:	f001 f97a 	bl	802042e <xaxpy_guu0hJif>
      for (d = 2; d < 4; d++) {
 801f13a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801f13e:	3301      	adds	r3, #1
 801f140:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801f144:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801f148:	2b03      	cmp	r3, #3
 801f14a:	ddc3      	ble.n	801f0d4 <svd_u3DvUgOe+0xa34>
      }
    }

    V[3 * qq] = 0.0;
 801f14c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801f150:	4613      	mov	r3, r2
 801f152:	005b      	lsls	r3, r3, #1
 801f154:	4413      	add	r3, r2
 801f156:	00db      	lsls	r3, r3, #3
 801f158:	461a      	mov	r2, r3
 801f15a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801f15e:	681b      	ldr	r3, [r3, #0]
 801f160:	1899      	adds	r1, r3, r2
 801f162:	f04f 0200 	mov.w	r2, #0
 801f166:	f04f 0300 	mov.w	r3, #0
 801f16a:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 1] = 0.0;
 801f16e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801f172:	4613      	mov	r3, r2
 801f174:	005b      	lsls	r3, r3, #1
 801f176:	4413      	add	r3, r2
 801f178:	00db      	lsls	r3, r3, #3
 801f17a:	f103 0208 	add.w	r2, r3, #8
 801f17e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801f182:	681b      	ldr	r3, [r3, #0]
 801f184:	1899      	adds	r1, r3, r2
 801f186:	f04f 0200 	mov.w	r2, #0
 801f18a:	f04f 0300 	mov.w	r3, #0
 801f18e:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 2] = 0.0;
 801f192:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801f196:	4613      	mov	r3, r2
 801f198:	005b      	lsls	r3, r3, #1
 801f19a:	4413      	add	r3, r2
 801f19c:	00db      	lsls	r3, r3, #3
 801f19e:	f103 0210 	add.w	r2, r3, #16
 801f1a2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801f1a6:	681b      	ldr	r3, [r3, #0]
 801f1a8:	1899      	adds	r1, r3, r2
 801f1aa:	f04f 0200 	mov.w	r2, #0
 801f1ae:	f04f 0300 	mov.w	r3, #0
 801f1b2:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq + 3 * qq] = 1.0;
 801f1b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801f1ba:	015a      	lsls	r2, r3, #5
 801f1bc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801f1c0:	681b      	ldr	r3, [r3, #0]
 801f1c2:	1899      	adds	r1, r3, r2
 801f1c4:	f04f 0200 	mov.w	r2, #0
 801f1c8:	4bbd      	ldr	r3, [pc, #756]	; (801f4c0 <svd_u3DvUgOe+0xe20>)
 801f1ca:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 2; qq >= 0; qq--) {
 801f1ce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801f1d2:	3b01      	subs	r3, #1
 801f1d4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801f1d8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	f6bf af64 	bge.w	801f0aa <svd_u3DvUgOe+0xa0a>
  }

  ztest = e[0];
 801f1e2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f1e6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[0] != 0.0) {
 801f1ea:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 801f1ee:	f04f 0200 	mov.w	r2, #0
 801f1f2:	f04f 0300 	mov.w	r3, #0
 801f1f6:	f7e1 fc59 	bl	8000aac <__aeabi_dcmpeq>
 801f1fa:	4603      	mov	r3, r0
 801f1fc:	2b00      	cmp	r3, #0
 801f1fe:	d12a      	bne.n	801f256 <svd_u3DvUgOe+0xbb6>
    rt = fabs(b_s[0]);
 801f200:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 801f204:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 801f208:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f20c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801f210:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 801f214:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[0] / rt;
 801f218:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 801f21c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801f220:	f7e1 fb06 	bl	8000830 <__aeabi_ddiv>
 801f224:	4602      	mov	r2, r0
 801f226:	460b      	mov	r3, r1
 801f228:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[0] = rt;
 801f22c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801f230:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    ztest = e[0] / nrm;
 801f234:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f238:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 801f23c:	f7e1 faf8 	bl	8000830 <__aeabi_ddiv>
 801f240:	4602      	mov	r2, r0
 801f242:	460b      	mov	r3, r1
 801f244:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 1);
 801f248:	2101      	movs	r1, #1
 801f24a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801f24e:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 801f252:	f002 f989 	bl	8021568 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 801f256:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 801f25a:	f04f 0200 	mov.w	r2, #0
 801f25e:	f04f 0300 	mov.w	r3, #0
 801f262:	f7e1 fc23 	bl	8000aac <__aeabi_dcmpeq>
 801f266:	4603      	mov	r3, r0
 801f268:	2b00      	cmp	r3, #0
 801f26a:	d12b      	bne.n	801f2c4 <svd_u3DvUgOe+0xc24>
    rt = fabs(ztest);
 801f26c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 801f270:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801f274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f278:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801f27c:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 801f280:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 801f284:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 801f288:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 801f28c:	f7e1 fad0 	bl	8000830 <__aeabi_ddiv>
 801f290:	4602      	mov	r2, r0
 801f292:	460b      	mov	r3, r1
 801f294:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 801f298:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801f29c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[1] *= nrm;
 801f2a0:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 801f2a4:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 801f2a8:	f7e1 f998 	bl	80005dc <__aeabi_dmul>
 801f2ac:	4602      	mov	r2, r0
 801f2ae:	460b      	mov	r3, r1
 801f2b0:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    xscal_eaAxXsvQ(nrm, V, 4);
 801f2b4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801f2b8:	2104      	movs	r1, #4
 801f2ba:	6818      	ldr	r0, [r3, #0]
 801f2bc:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 801f2c0:	f002 f952 	bl	8021568 <xscal_eaAxXsvQ>
  }

  e[0] = ztest;
 801f2c4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 801f2c8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  ztest = b_A[7];
 801f2cc:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 801f2d0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[1] != 0.0) {
 801f2d4:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 801f2d8:	f04f 0200 	mov.w	r2, #0
 801f2dc:	f04f 0300 	mov.w	r3, #0
 801f2e0:	f7e1 fbe4 	bl	8000aac <__aeabi_dcmpeq>
 801f2e4:	4603      	mov	r3, r0
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	d12a      	bne.n	801f340 <svd_u3DvUgOe+0xca0>
    rt = fabs(b_s[1]);
 801f2ea:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 801f2ee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 801f2f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f2f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801f2fa:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 801f2fe:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[1] / rt;
 801f302:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 801f306:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801f30a:	f7e1 fa91 	bl	8000830 <__aeabi_ddiv>
 801f30e:	4602      	mov	r2, r0
 801f310:	460b      	mov	r3, r1
 801f312:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[1] = rt;
 801f316:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801f31a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    ztest = b_A[7] / nrm;
 801f31e:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 801f322:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 801f326:	f7e1 fa83 	bl	8000830 <__aeabi_ddiv>
 801f32a:	4602      	mov	r2, r0
 801f32c:	460b      	mov	r3, r1
 801f32e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 4);
 801f332:	2104      	movs	r1, #4
 801f334:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801f338:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 801f33c:	f002 f914 	bl	8021568 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 801f340:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 801f344:	f04f 0200 	mov.w	r2, #0
 801f348:	f04f 0300 	mov.w	r3, #0
 801f34c:	f7e1 fbae 	bl	8000aac <__aeabi_dcmpeq>
 801f350:	4603      	mov	r3, r0
 801f352:	2b00      	cmp	r3, #0
 801f354:	d12b      	bne.n	801f3ae <svd_u3DvUgOe+0xd0e>
    rt = fabs(ztest);
 801f356:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 801f35a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801f35e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f362:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801f366:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 801f36a:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 801f36e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 801f372:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 801f376:	f7e1 fa5b 	bl	8000830 <__aeabi_ddiv>
 801f37a:	4602      	mov	r2, r0
 801f37c:	460b      	mov	r3, r1
 801f37e:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 801f382:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801f386:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[2] = b_A[8] * nrm;
 801f38a:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 801f38e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 801f392:	f7e1 f923 	bl	80005dc <__aeabi_dmul>
 801f396:	4602      	mov	r2, r0
 801f398:	460b      	mov	r3, r1
 801f39a:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, V, 7);
 801f39e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801f3a2:	2107      	movs	r1, #7
 801f3a4:	6818      	ldr	r0, [r3, #0]
 801f3a6:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 801f3aa:	f002 f8dd 	bl	8021568 <xscal_eaAxXsvQ>
  }

  e[1] = ztest;
 801f3ae:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 801f3b2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  if (b_s[2] != 0.0) {
 801f3b6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 801f3ba:	f04f 0200 	mov.w	r2, #0
 801f3be:	f04f 0300 	mov.w	r3, #0
 801f3c2:	f7e1 fb73 	bl	8000aac <__aeabi_dcmpeq>
 801f3c6:	4603      	mov	r3, r0
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	d11e      	bne.n	801f40a <svd_u3DvUgOe+0xd6a>
    rt = fabs(b_s[2]);
 801f3cc:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 801f3d0:	67ba      	str	r2, [r7, #120]	; 0x78
 801f3d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f3d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 801f3d8:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 801f3dc:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[2] / rt;
 801f3e0:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 801f3e4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801f3e8:	f7e1 fa22 	bl	8000830 <__aeabi_ddiv>
 801f3ec:	4602      	mov	r2, r0
 801f3ee:	460b      	mov	r3, r1
 801f3f0:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[2] = rt;
 801f3f4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801f3f8:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, U, 7);
 801f3fc:	2107      	movs	r1, #7
 801f3fe:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801f402:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 801f406:	f002 f8af 	bl	8021568 <xscal_eaAxXsvQ>
  }

  e[2] = 0.0;
 801f40a:	f04f 0200 	mov.w	r2, #0
 801f40e:	f04f 0300 	mov.w	r3, #0
 801f412:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  qq = 0;
 801f416:	2300      	movs	r3, #0
 801f418:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  nrm = fmax(fmax(fmax(b_s[0], e[0]), fmax(b_s[1], ztest)), fmax(b_s[2], 0.0));
 801f41c:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 801f420:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 801f424:	eeb0 1a46 	vmov.f32	s2, s12
 801f428:	eef0 1a66 	vmov.f32	s3, s13
 801f42c:	eeb0 0a47 	vmov.f32	s0, s14
 801f430:	eef0 0a67 	vmov.f32	s1, s15
 801f434:	f00d fd62 	bl	802cefc <fmax>
 801f438:	eeb0 8a40 	vmov.f32	s16, s0
 801f43c:	eef0 8a60 	vmov.f32	s17, s1
 801f440:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 801f444:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 801f448:	eeb0 1a46 	vmov.f32	s2, s12
 801f44c:	eef0 1a66 	vmov.f32	s3, s13
 801f450:	eeb0 0a47 	vmov.f32	s0, s14
 801f454:	eef0 0a67 	vmov.f32	s1, s15
 801f458:	f00d fd50 	bl	802cefc <fmax>
 801f45c:	eeb0 7a40 	vmov.f32	s14, s0
 801f460:	eef0 7a60 	vmov.f32	s15, s1
 801f464:	eeb0 1a47 	vmov.f32	s2, s14
 801f468:	eef0 1a67 	vmov.f32	s3, s15
 801f46c:	eeb0 0a48 	vmov.f32	s0, s16
 801f470:	eef0 0a68 	vmov.f32	s1, s17
 801f474:	f00d fd42 	bl	802cefc <fmax>
 801f478:	eeb0 8a40 	vmov.f32	s16, s0
 801f47c:	eef0 8a60 	vmov.f32	s17, s1
 801f480:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 801f484:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 801f4b8 <svd_u3DvUgOe+0xe18>
 801f488:	eeb0 0a47 	vmov.f32	s0, s14
 801f48c:	eef0 0a67 	vmov.f32	s1, s15
 801f490:	f00d fd34 	bl	802cefc <fmax>
 801f494:	eeb0 7a40 	vmov.f32	s14, s0
 801f498:	eef0 7a60 	vmov.f32	s15, s1
 801f49c:	eeb0 1a47 	vmov.f32	s2, s14
 801f4a0:	eef0 1a67 	vmov.f32	s3, s15
 801f4a4:	eeb0 0a48 	vmov.f32	s0, s16
 801f4a8:	eef0 0a68 	vmov.f32	s1, s17
 801f4ac:	f00d fd26 	bl	802cefc <fmax>
 801f4b0:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  while ((m + 2 > 0) && (qq < 75)) {
 801f4b4:	f000 be8a 	b.w	80201cc <svd_u3DvUgOe+0x1b2c>
	...
 801f4c0:	3ff00000 	.word	0x3ff00000
    kase = m + 1;
 801f4c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801f4c8:	3301      	adds	r3, #1
 801f4ca:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int32_T exitg1;
    do {
      exitg1 = 0;
 801f4ce:	2300      	movs	r3, #0
 801f4d0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
      d = kase;
 801f4d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f4d8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      if (kase == 0) {
 801f4dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f4e0:	2b00      	cmp	r3, #0
 801f4e2:	d103      	bne.n	801f4ec <svd_u3DvUgOe+0xe4c>
        exitg1 = 1;
 801f4e4:	2301      	movs	r3, #1
 801f4e6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 801f4ea:	e092      	b.n	801f612 <svd_u3DvUgOe+0xf72>
      } else {
        rt = fabs(e[kase - 1]);
 801f4ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f4f0:	3b01      	subs	r3, #1
 801f4f2:	00db      	lsls	r3, r3, #3
 801f4f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f4f8:	4413      	add	r3, r2
 801f4fa:	3bb8      	subs	r3, #184	; 0xb8
 801f4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f500:	673a      	str	r2, [r7, #112]	; 0x70
 801f502:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f506:	677b      	str	r3, [r7, #116]	; 0x74
 801f508:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 801f50c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
        if (rt <= (fabs(b_s[kase - 1]) + fabs(b_s[kase])) *
 801f510:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f514:	3b01      	subs	r3, #1
 801f516:	00db      	lsls	r3, r3, #3
 801f518:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f51c:	4413      	add	r3, r2
 801f51e:	3ba0      	subs	r3, #160	; 0xa0
 801f520:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f524:	66ba      	str	r2, [r7, #104]	; 0x68
 801f526:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f52a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801f52c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f530:	00db      	lsls	r3, r3, #3
 801f532:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f536:	4413      	add	r3, r2
 801f538:	3ba0      	subs	r3, #160	; 0xa0
 801f53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f53e:	663a      	str	r2, [r7, #96]	; 0x60
 801f540:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f544:	667b      	str	r3, [r7, #100]	; 0x64
 801f546:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801f54a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801f54e:	f7e0 fe8f 	bl	8000270 <__adddf3>
 801f552:	4602      	mov	r2, r0
 801f554:	460b      	mov	r3, r1
 801f556:	4610      	mov	r0, r2
 801f558:	4619      	mov	r1, r3
 801f55a:	f04f 0200 	mov.w	r2, #0
 801f55e:	4bb2      	ldr	r3, [pc, #712]	; (801f828 <svd_u3DvUgOe+0x1188>)
 801f560:	f7e1 f83c 	bl	80005dc <__aeabi_dmul>
 801f564:	4602      	mov	r2, r0
 801f566:	460b      	mov	r3, r1
 801f568:	4610      	mov	r0, r2
 801f56a:	4619      	mov	r1, r3
 801f56c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801f570:	f7e1 faba 	bl	8000ae8 <__aeabi_dcmpge>
 801f574:	4603      	mov	r3, r0
 801f576:	2b00      	cmp	r3, #0
 801f578:	d012      	beq.n	801f5a0 <svd_u3DvUgOe+0xf00>
            2.2204460492503131E-16) {
          e[kase - 1] = 0.0;
 801f57a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f57e:	3b01      	subs	r3, #1
 801f580:	00db      	lsls	r3, r3, #3
 801f582:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f586:	4413      	add	r3, r2
 801f588:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 801f58c:	f04f 0200 	mov.w	r2, #0
 801f590:	f04f 0300 	mov.w	r3, #0
 801f594:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 801f598:	2301      	movs	r3, #1
 801f59a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 801f59e:	e038      	b.n	801f612 <svd_u3DvUgOe+0xf72>
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 801f5a0:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 801f5a4:	f04f 0200 	mov.w	r2, #0
 801f5a8:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801f5ac:	f7e1 fa92 	bl	8000ad4 <__aeabi_dcmple>
 801f5b0:	4603      	mov	r3, r0
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	d115      	bne.n	801f5e2 <svd_u3DvUgOe+0xf42>
 801f5b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801f5ba:	2b14      	cmp	r3, #20
 801f5bc:	dd24      	ble.n	801f608 <svd_u3DvUgOe+0xf68>
                     2.2204460492503131E-16 * nrm))) {
 801f5be:	f04f 0200 	mov.w	r2, #0
 801f5c2:	4b99      	ldr	r3, [pc, #612]	; (801f828 <svd_u3DvUgOe+0x1188>)
 801f5c4:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 801f5c8:	f7e1 f808 	bl	80005dc <__aeabi_dmul>
 801f5cc:	4602      	mov	r2, r0
 801f5ce:	460b      	mov	r3, r1
 801f5d0:	4610      	mov	r0, r2
 801f5d2:	4619      	mov	r1, r3
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 801f5d4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801f5d8:	f7e1 fa86 	bl	8000ae8 <__aeabi_dcmpge>
 801f5dc:	4603      	mov	r3, r0
 801f5de:	2b00      	cmp	r3, #0
 801f5e0:	d012      	beq.n	801f608 <svd_u3DvUgOe+0xf68>
          e[kase - 1] = 0.0;
 801f5e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f5e6:	3b01      	subs	r3, #1
 801f5e8:	00db      	lsls	r3, r3, #3
 801f5ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f5ee:	4413      	add	r3, r2
 801f5f0:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 801f5f4:	f04f 0200 	mov.w	r2, #0
 801f5f8:	f04f 0300 	mov.w	r3, #0
 801f5fc:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 801f600:	2301      	movs	r3, #1
 801f602:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 801f606:	e004      	b.n	801f612 <svd_u3DvUgOe+0xf72>
        } else {
          kase--;
 801f608:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f60c:	3b01      	subs	r3, #1
 801f60e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        }
      }
    } while (exitg1 == 0);
 801f612:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801f616:	2b00      	cmp	r3, #0
 801f618:	f43f af59 	beq.w	801f4ce <svd_u3DvUgOe+0xe2e>

    if (m + 1 == kase) {
 801f61c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801f620:	1c5a      	adds	r2, r3, #1
 801f622:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f626:	4293      	cmp	r3, r2
 801f628:	d103      	bne.n	801f632 <svd_u3DvUgOe+0xf92>
      kase = 4;
 801f62a:	2304      	movs	r3, #4
 801f62c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801f630:	e0c7      	b.n	801f7c2 <svd_u3DvUgOe+0x1122>
    } else {
      int32_T k_ii;
      boolean_T exitg2;
      qjj = m + 2;
 801f632:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801f636:	3302      	adds	r3, #2
 801f638:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
      k_ii = m + 2;
 801f63c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801f640:	3302      	adds	r3, #2
 801f642:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      exitg2 = false;
 801f646:	2300      	movs	r3, #0
 801f648:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
      while ((!exitg2) && (k_ii >= kase)) {
 801f64c:	e092      	b.n	801f774 <svd_u3DvUgOe+0x10d4>
        qjj = k_ii;
 801f64e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801f652:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        if (k_ii == kase) {
 801f656:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 801f65a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f65e:	429a      	cmp	r2, r3
 801f660:	d103      	bne.n	801f66a <svd_u3DvUgOe+0xfca>
          exitg2 = true;
 801f662:	2301      	movs	r3, #1
 801f664:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 801f668:	e084      	b.n	801f774 <svd_u3DvUgOe+0x10d4>
        } else {
          rt = 0.0;
 801f66a:	f04f 0200 	mov.w	r2, #0
 801f66e:	f04f 0300 	mov.w	r3, #0
 801f672:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          if (k_ii < m + 2) {
 801f676:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801f67a:	1c5a      	adds	r2, r3, #1
 801f67c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801f680:	4293      	cmp	r3, r2
 801f682:	dc11      	bgt.n	801f6a8 <svd_u3DvUgOe+0x1008>
            rt = fabs(e[k_ii - 1]);
 801f684:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801f688:	3b01      	subs	r3, #1
 801f68a:	00db      	lsls	r3, r3, #3
 801f68c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f690:	4413      	add	r3, r2
 801f692:	3bb8      	subs	r3, #184	; 0xb8
 801f694:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f698:	65ba      	str	r2, [r7, #88]	; 0x58
 801f69a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f69e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801f6a0:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 801f6a4:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
          }

          if (k_ii > kase + 1) {
 801f6a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f6ac:	1c5a      	adds	r2, r3, #1
 801f6ae:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801f6b2:	4293      	cmp	r3, r2
 801f6b4:	dd17      	ble.n	801f6e6 <svd_u3DvUgOe+0x1046>
            rt += fabs(e[k_ii - 2]);
 801f6b6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801f6ba:	3b02      	subs	r3, #2
 801f6bc:	00db      	lsls	r3, r3, #3
 801f6be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f6c2:	4413      	add	r3, r2
 801f6c4:	3bb8      	subs	r3, #184	; 0xb8
 801f6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6ca:	653a      	str	r2, [r7, #80]	; 0x50
 801f6cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f6d0:	657b      	str	r3, [r7, #84]	; 0x54
 801f6d2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801f6d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801f6da:	f7e0 fdc9 	bl	8000270 <__adddf3>
 801f6de:	4602      	mov	r2, r0
 801f6e0:	460b      	mov	r3, r1
 801f6e2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          }

          ztest = fabs(b_s[k_ii - 1]);
 801f6e6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801f6ea:	3b01      	subs	r3, #1
 801f6ec:	00db      	lsls	r3, r3, #3
 801f6ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f6f2:	4413      	add	r3, r2
 801f6f4:	3ba0      	subs	r3, #160	; 0xa0
 801f6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6fa:	64ba      	str	r2, [r7, #72]	; 0x48
 801f6fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f700:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f702:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 801f706:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=
 801f70a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 801f70e:	f04f 0200 	mov.w	r2, #0
 801f712:	4b45      	ldr	r3, [pc, #276]	; (801f828 <svd_u3DvUgOe+0x1188>)
 801f714:	f7e0 ff62 	bl	80005dc <__aeabi_dmul>
 801f718:	4602      	mov	r2, r0
 801f71a:	460b      	mov	r3, r1
 801f71c:	4610      	mov	r0, r2
 801f71e:	4619      	mov	r1, r3
 801f720:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 801f724:	f7e1 f9e0 	bl	8000ae8 <__aeabi_dcmpge>
 801f728:	4603      	mov	r3, r0
 801f72a:	2b00      	cmp	r3, #0
 801f72c:	d10a      	bne.n	801f744 <svd_u3DvUgOe+0x10a4>
 801f72e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 801f732:	f04f 0200 	mov.w	r2, #0
 801f736:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801f73a:	f7e1 f9cb 	bl	8000ad4 <__aeabi_dcmple>
 801f73e:	4603      	mov	r3, r0
 801f740:	2b00      	cmp	r3, #0
 801f742:	d012      	beq.n	801f76a <svd_u3DvUgOe+0x10ca>
               1.0020841800044864E-292)) {
            b_s[k_ii - 1] = 0.0;
 801f744:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801f748:	3b01      	subs	r3, #1
 801f74a:	00db      	lsls	r3, r3, #3
 801f74c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f750:	4413      	add	r3, r2
 801f752:	f1a3 01a0 	sub.w	r1, r3, #160	; 0xa0
 801f756:	f04f 0200 	mov.w	r2, #0
 801f75a:	f04f 0300 	mov.w	r3, #0
 801f75e:	e9c1 2300 	strd	r2, r3, [r1]
            exitg2 = true;
 801f762:	2301      	movs	r3, #1
 801f764:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 801f768:	e004      	b.n	801f774 <svd_u3DvUgOe+0x10d4>
          } else {
            k_ii--;
 801f76a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801f76e:	3b01      	subs	r3, #1
 801f770:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      while ((!exitg2) && (k_ii >= kase)) {
 801f774:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 801f778:	2b00      	cmp	r3, #0
 801f77a:	d106      	bne.n	801f78a <svd_u3DvUgOe+0x10ea>
 801f77c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 801f780:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f784:	429a      	cmp	r2, r3
 801f786:	f6bf af62 	bge.w	801f64e <svd_u3DvUgOe+0xfae>
          }
        }
      }

      if (qjj == kase) {
 801f78a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801f78e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f792:	429a      	cmp	r2, r3
 801f794:	d103      	bne.n	801f79e <svd_u3DvUgOe+0x10fe>
        kase = 3;
 801f796:	2303      	movs	r3, #3
 801f798:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801f79c:	e011      	b.n	801f7c2 <svd_u3DvUgOe+0x1122>
      } else if (m + 2 == qjj) {
 801f79e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801f7a2:	1c9a      	adds	r2, r3, #2
 801f7a4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801f7a8:	4293      	cmp	r3, r2
 801f7aa:	d103      	bne.n	801f7b4 <svd_u3DvUgOe+0x1114>
        kase = 1;
 801f7ac:	2301      	movs	r3, #1
 801f7ae:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801f7b2:	e006      	b.n	801f7c2 <svd_u3DvUgOe+0x1122>
      } else {
        kase = 2;
 801f7b4:	2302      	movs	r3, #2
 801f7b6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        d = qjj;
 801f7ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801f7be:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      }
    }

    switch (kase) {
 801f7c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f7c6:	2b03      	cmp	r3, #3
 801f7c8:	f000 8113 	beq.w	801f9f2 <svd_u3DvUgOe+0x1352>
 801f7cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f7d0:	2b03      	cmp	r3, #3
 801f7d2:	f300 8443 	bgt.w	802005c <svd_u3DvUgOe+0x19bc>
 801f7d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f7da:	2b01      	cmp	r3, #1
 801f7dc:	d005      	beq.n	801f7ea <svd_u3DvUgOe+0x114a>
 801f7de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801f7e2:	2b02      	cmp	r3, #2
 801f7e4:	d07b      	beq.n	801f8de <svd_u3DvUgOe+0x123e>
 801f7e6:	f000 bc39 	b.w	802005c <svd_u3DvUgOe+0x19bc>
     case 1:
      rt = e[m];
 801f7ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801f7ee:	00db      	lsls	r3, r3, #3
 801f7f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f7f4:	4413      	add	r3, r2
 801f7f6:	3bb8      	subs	r3, #184	; 0xb8
 801f7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7fc:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[m] = 0.0;
 801f800:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801f804:	00db      	lsls	r3, r3, #3
 801f806:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f80a:	4413      	add	r3, r2
 801f80c:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 801f810:	f04f 0200 	mov.w	r2, #0
 801f814:	f04f 0300 	mov.w	r3, #0
 801f818:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 801f81c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801f820:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801f824:	e053      	b.n	801f8ce <svd_u3DvUgOe+0x122e>
 801f826:	bf00      	nop
 801f828:	3cb00000 	.word	0x3cb00000
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 801f82c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801f830:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801f834:	00db      	lsls	r3, r3, #3
 801f836:	18d0      	adds	r0, r2, r3
 801f838:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801f83c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801f840:	f507 7194 	add.w	r1, r7, #296	; 0x128
 801f844:	f001 fd2a 	bl	802129c <xrotg_XzIjz1eG>
        if (qjj + 1 > d + 1) {
 801f848:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801f84c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801f850:	429a      	cmp	r2, r3
 801f852:	dd19      	ble.n	801f888 <svd_u3DvUgOe+0x11e8>
          rt = -sqds * e[0];
 801f854:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801f858:	643a      	str	r2, [r7, #64]	; 0x40
 801f85a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f85e:	647b      	str	r3, [r7, #68]	; 0x44
 801f860:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f864:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801f868:	f7e0 feb8 	bl	80005dc <__aeabi_dmul>
 801f86c:	4602      	mov	r2, r0
 801f86e:	460b      	mov	r3, r1
 801f870:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          e[0] *= ztest;
 801f874:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f878:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 801f87c:	f7e0 feae 	bl	80005dc <__aeabi_dmul>
 801f880:	4602      	mov	r2, r0
 801f882:	460b      	mov	r3, r1
 801f884:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        }

        xrot_i7f01JoJ(V, 3 * qjj + 1, 3 * (m + 1) + 1, ztest, sqds);
 801f888:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801f88c:	4613      	mov	r3, r2
 801f88e:	005b      	lsls	r3, r3, #1
 801f890:	4413      	add	r3, r2
 801f892:	1c59      	adds	r1, r3, #1
 801f894:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801f898:	1c5a      	adds	r2, r3, #1
 801f89a:	4613      	mov	r3, r2
 801f89c:	005b      	lsls	r3, r3, #1
 801f89e:	4413      	add	r3, r2
 801f8a0:	1c5a      	adds	r2, r3, #1
 801f8a2:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 801f8a6:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 801f8aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801f8ae:	eeb0 1a46 	vmov.f32	s2, s12
 801f8b2:	eef0 1a66 	vmov.f32	s3, s13
 801f8b6:	eeb0 0a47 	vmov.f32	s0, s14
 801f8ba:	eef0 0a67 	vmov.f32	s1, s15
 801f8be:	6818      	ldr	r0, [r3, #0]
 801f8c0:	f001 fbd0 	bl	8021064 <xrot_i7f01JoJ>
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 801f8c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801f8c8:	3b01      	subs	r3, #1
 801f8ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801f8ce:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801f8d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801f8d6:	429a      	cmp	r2, r3
 801f8d8:	daa8      	bge.n	801f82c <svd_u3DvUgOe+0x118c>
      }
      break;
 801f8da:	f000 bc77 	b.w	80201cc <svd_u3DvUgOe+0x1b2c>

     case 2:
      rt = e[d - 1];
 801f8de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801f8e2:	3b01      	subs	r3, #1
 801f8e4:	00db      	lsls	r3, r3, #3
 801f8e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f8ea:	4413      	add	r3, r2
 801f8ec:	3bb8      	subs	r3, #184	; 0xb8
 801f8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8f2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[d - 1] = 0.0;
 801f8f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801f8fa:	3b01      	subs	r3, #1
 801f8fc:	00db      	lsls	r3, r3, #3
 801f8fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f902:	4413      	add	r3, r2
 801f904:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 801f908:	f04f 0200 	mov.w	r2, #0
 801f90c:	f04f 0300 	mov.w	r3, #0
 801f910:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = d; qjj < m + 2; qjj++) {
 801f914:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801f918:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801f91c:	e061      	b.n	801f9e2 <svd_u3DvUgOe+0x1342>
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 801f91e:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801f922:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801f926:	00db      	lsls	r3, r3, #3
 801f928:	18d0      	adds	r0, r2, r3
 801f92a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801f92e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801f932:	f507 7194 	add.w	r1, r7, #296	; 0x128
 801f936:	f001 fcb1 	bl	802129c <xrotg_XzIjz1eG>
        rt = -sqds * e[qjj];
 801f93a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801f93e:	63ba      	str	r2, [r7, #56]	; 0x38
 801f940:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f944:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f946:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801f94a:	00db      	lsls	r3, r3, #3
 801f94c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f950:	4413      	add	r3, r2
 801f952:	3bb8      	subs	r3, #184	; 0xb8
 801f954:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f958:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801f95c:	f7e0 fe3e 	bl	80005dc <__aeabi_dmul>
 801f960:	4602      	mov	r2, r0
 801f962:	460b      	mov	r3, r1
 801f964:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        e[qjj] *= ztest;
 801f968:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801f96c:	00db      	lsls	r3, r3, #3
 801f96e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f972:	4413      	add	r3, r2
 801f974:	3bb8      	subs	r3, #184	; 0xb8
 801f976:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f97a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 801f97e:	f7e0 fe2d 	bl	80005dc <__aeabi_dmul>
 801f982:	4602      	mov	r2, r0
 801f984:	460b      	mov	r3, r1
 801f986:	4610      	mov	r0, r2
 801f988:	4619      	mov	r1, r3
 801f98a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801f98e:	00db      	lsls	r3, r3, #3
 801f990:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f994:	4413      	add	r3, r2
 801f996:	3bb8      	subs	r3, #184	; 0xb8
 801f998:	e9c3 0100 	strd	r0, r1, [r3]
        xrot_i7f01JoJ(U, 3 * qjj + 1, 3 * (d - 1) + 1, ztest, sqds);
 801f99c:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801f9a0:	4613      	mov	r3, r2
 801f9a2:	005b      	lsls	r3, r3, #1
 801f9a4:	4413      	add	r3, r2
 801f9a6:	1c59      	adds	r1, r3, #1
 801f9a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801f9ac:	1e5a      	subs	r2, r3, #1
 801f9ae:	4613      	mov	r3, r2
 801f9b0:	005b      	lsls	r3, r3, #1
 801f9b2:	4413      	add	r3, r2
 801f9b4:	3301      	adds	r3, #1
 801f9b6:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 801f9ba:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 801f9be:	eeb0 1a46 	vmov.f32	s2, s12
 801f9c2:	eef0 1a66 	vmov.f32	s3, s13
 801f9c6:	eeb0 0a47 	vmov.f32	s0, s14
 801f9ca:	eef0 0a67 	vmov.f32	s1, s15
 801f9ce:	461a      	mov	r2, r3
 801f9d0:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801f9d4:	f001 fb46 	bl	8021064 <xrot_i7f01JoJ>
      for (qjj = d; qjj < m + 2; qjj++) {
 801f9d8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801f9dc:	3301      	adds	r3, #1
 801f9de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801f9e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801f9e6:	1c5a      	adds	r2, r3, #1
 801f9e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801f9ec:	4293      	cmp	r3, r2
 801f9ee:	dd96      	ble.n	801f91e <svd_u3DvUgOe+0x127e>
      }
      break;
 801f9f0:	e3ec      	b.n	80201cc <svd_u3DvUgOe+0x1b2c>

     case 3:
      {
        real_T emm1;
        real_T shift;
        sqds = b_s[m + 1];
 801f9f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801f9f6:	3301      	adds	r3, #1
 801f9f8:	00db      	lsls	r3, r3, #3
 801f9fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801f9fe:	4413      	add	r3, r2
 801fa00:	3ba0      	subs	r3, #160	; 0xa0
 801fa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa06:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 801fa0a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801fa0e:	633a      	str	r2, [r7, #48]	; 0x30
 801fa10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fa14:	637b      	str	r3, [r7, #52]	; 0x34
 801fa16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801fa1a:	00db      	lsls	r3, r3, #3
 801fa1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fa20:	4413      	add	r3, r2
 801fa22:	3ba0      	subs	r3, #160	; 0xa0
 801fa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa28:	62ba      	str	r2, [r7, #40]	; 0x28
 801fa2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fa2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801fa30:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 801fa34:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801fa38:	f00d fa60 	bl	802cefc <fmax>
 801fa3c:	eeb0 7a40 	vmov.f32	s14, s0
 801fa40:	eef0 7a60 	vmov.f32	s15, s1
 801fa44:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801fa48:	00db      	lsls	r3, r3, #3
 801fa4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fa4e:	4413      	add	r3, r2
 801fa50:	3bb8      	subs	r3, #184	; 0xb8
 801fa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa56:	623a      	str	r2, [r7, #32]
 801fa58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fa5c:	627b      	str	r3, [r7, #36]	; 0x24
 801fa5e:	ed97 1b08 	vldr	d1, [r7, #32]
 801fa62:	eeb0 0a47 	vmov.f32	s0, s14
 801fa66:	eef0 0a67 	vmov.f32	s1, s15
 801fa6a:	f00d fa47 	bl	802cefc <fmax>
 801fa6e:	eeb0 7a40 	vmov.f32	s14, s0
 801fa72:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 801fa76:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801fa7a:	00db      	lsls	r3, r3, #3
 801fa7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fa80:	4413      	add	r3, r2
 801fa82:	3ba0      	subs	r3, #160	; 0xa0
 801fa84:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 801fa88:	61ba      	str	r2, [r7, #24]
 801fa8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fa8e:	61fb      	str	r3, [r7, #28]
 801fa90:	ed97 1b06 	vldr	d1, [r7, #24]
 801fa94:	eeb0 0a47 	vmov.f32	s0, s14
 801fa98:	eef0 0a67 	vmov.f32	s1, s15
 801fa9c:	f00d fa2e 	bl	802cefc <fmax>
 801faa0:	eeb0 7a40 	vmov.f32	s14, s0
 801faa4:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 801faa8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801faac:	00db      	lsls	r3, r3, #3
 801faae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fab2:	4413      	add	r3, r2
 801fab4:	3bb8      	subs	r3, #184	; 0xb8
 801fab6:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 801faba:	613a      	str	r2, [r7, #16]
 801fabc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fac0:	617b      	str	r3, [r7, #20]
 801fac2:	ed97 1b04 	vldr	d1, [r7, #16]
 801fac6:	eeb0 0a47 	vmov.f32	s0, s14
 801faca:	eef0 0a67 	vmov.f32	s1, s15
 801face:	f00d fa15 	bl	802cefc <fmax>
 801fad2:	eeb0 7a40 	vmov.f32	s14, s0
 801fad6:	eef0 7a60 	vmov.f32	s15, s1
 801fada:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
        rt = sqds / ztest;
 801fade:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 801fae2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 801fae6:	f7e0 fea3 	bl	8000830 <__aeabi_ddiv>
 801faea:	4602      	mov	r2, r0
 801faec:	460b      	mov	r3, r1
 801faee:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        smm1 = b_s[m] / ztest;
 801faf2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801faf6:	00db      	lsls	r3, r3, #3
 801faf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fafc:	4413      	add	r3, r2
 801fafe:	3ba0      	subs	r3, #160	; 0xa0
 801fb00:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fb04:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 801fb08:	f7e0 fe92 	bl	8000830 <__aeabi_ddiv>
 801fb0c:	4602      	mov	r2, r0
 801fb0e:	460b      	mov	r3, r1
 801fb10:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 = e[m] / ztest;
 801fb14:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801fb18:	00db      	lsls	r3, r3, #3
 801fb1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fb1e:	4413      	add	r3, r2
 801fb20:	3bb8      	subs	r3, #184	; 0xb8
 801fb22:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fb26:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 801fb2a:	f7e0 fe81 	bl	8000830 <__aeabi_ddiv>
 801fb2e:	4602      	mov	r2, r0
 801fb30:	460b      	mov	r3, r1
 801fb32:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        sqds = b_s[d] / ztest;
 801fb36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801fb3a:	00db      	lsls	r3, r3, #3
 801fb3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fb40:	4413      	add	r3, r2
 801fb42:	3ba0      	subs	r3, #160	; 0xa0
 801fb44:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fb48:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 801fb4c:	f7e0 fe70 	bl	8000830 <__aeabi_ddiv>
 801fb50:	4602      	mov	r2, r0
 801fb52:	460b      	mov	r3, r1
 801fb54:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;
 801fb58:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 801fb5c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801fb60:	f7e0 fb86 	bl	8000270 <__adddf3>
 801fb64:	4602      	mov	r2, r0
 801fb66:	460b      	mov	r3, r1
 801fb68:	4614      	mov	r4, r2
 801fb6a:	461d      	mov	r5, r3
 801fb6c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 801fb70:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801fb74:	f7e0 fb7a 	bl	800026c <__aeabi_dsub>
 801fb78:	4602      	mov	r2, r0
 801fb7a:	460b      	mov	r3, r1
 801fb7c:	4620      	mov	r0, r4
 801fb7e:	4629      	mov	r1, r5
 801fb80:	f7e0 fd2c 	bl	80005dc <__aeabi_dmul>
 801fb84:	4602      	mov	r2, r0
 801fb86:	460b      	mov	r3, r1
 801fb88:	4614      	mov	r4, r2
 801fb8a:	461d      	mov	r5, r3
 801fb8c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 801fb90:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 801fb94:	f7e0 fd22 	bl	80005dc <__aeabi_dmul>
 801fb98:	4602      	mov	r2, r0
 801fb9a:	460b      	mov	r3, r1
 801fb9c:	4620      	mov	r0, r4
 801fb9e:	4629      	mov	r1, r5
 801fba0:	f7e0 fb66 	bl	8000270 <__adddf3>
 801fba4:	4602      	mov	r2, r0
 801fba6:	460b      	mov	r3, r1
 801fba8:	4610      	mov	r0, r2
 801fbaa:	4619      	mov	r1, r3
 801fbac:	f04f 0200 	mov.w	r2, #0
 801fbb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801fbb4:	f7e0 fe3c 	bl	8000830 <__aeabi_ddiv>
 801fbb8:	4602      	mov	r2, r0
 801fbba:	460b      	mov	r3, r1
 801fbbc:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 *= rt;
 801fbc0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801fbc4:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 801fbc8:	f7e0 fd08 	bl	80005dc <__aeabi_dmul>
 801fbcc:	4602      	mov	r2, r0
 801fbce:	460b      	mov	r3, r1
 801fbd0:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        emm1 *= emm1;
 801fbd4:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 801fbd8:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 801fbdc:	f7e0 fcfe 	bl	80005dc <__aeabi_dmul>
 801fbe0:	4602      	mov	r2, r0
 801fbe2:	460b      	mov	r3, r1
 801fbe4:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
 801fbe8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 801fbec:	f04f 0200 	mov.w	r2, #0
 801fbf0:	f04f 0300 	mov.w	r3, #0
 801fbf4:	f7e0 ff5a 	bl	8000aac <__aeabi_dcmpeq>
 801fbf8:	4603      	mov	r3, r0
 801fbfa:	2b00      	cmp	r3, #0
 801fbfc:	d00a      	beq.n	801fc14 <svd_u3DvUgOe+0x1574>
 801fbfe:	f04f 0200 	mov.w	r2, #0
 801fc02:	f04f 0300 	mov.w	r3, #0
 801fc06:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 801fc0a:	f7e0 ff4f 	bl	8000aac <__aeabi_dcmpeq>
 801fc0e:	4603      	mov	r3, r0
 801fc10:	2b00      	cmp	r3, #0
 801fc12:	d13f      	bne.n	801fc94 <svd_u3DvUgOe+0x15f4>
          shift = sqrt(smm1 * smm1 + emm1);
 801fc14:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 801fc18:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801fc1c:	f7e0 fcde 	bl	80005dc <__aeabi_dmul>
 801fc20:	4602      	mov	r2, r0
 801fc22:	460b      	mov	r3, r1
 801fc24:	4610      	mov	r0, r2
 801fc26:	4619      	mov	r1, r3
 801fc28:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 801fc2c:	f7e0 fb20 	bl	8000270 <__adddf3>
 801fc30:	4602      	mov	r2, r0
 801fc32:	460b      	mov	r3, r1
 801fc34:	ec43 2b17 	vmov	d7, r2, r3
 801fc38:	eeb0 0a47 	vmov.f32	s0, s14
 801fc3c:	eef0 0a67 	vmov.f32	s1, s15
 801fc40:	f00d fa46 	bl	802d0d0 <sqrt>
 801fc44:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
          if (smm1 < 0.0) {
 801fc48:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 801fc4c:	f04f 0200 	mov.w	r2, #0
 801fc50:	f04f 0300 	mov.w	r3, #0
 801fc54:	f7e0 ff34 	bl	8000ac0 <__aeabi_dcmplt>
 801fc58:	4603      	mov	r3, r0
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	d009      	beq.n	801fc72 <svd_u3DvUgOe+0x15d2>
            shift = -shift;
 801fc5e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801fc62:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 801fc66:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801fc6a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801fc6e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
          }

          shift = emm1 / (smm1 + shift);
 801fc72:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 801fc76:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 801fc7a:	f7e0 faf9 	bl	8000270 <__adddf3>
 801fc7e:	4602      	mov	r2, r0
 801fc80:	460b      	mov	r3, r1
 801fc82:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 801fc86:	f7e0 fdd3 	bl	8000830 <__aeabi_ddiv>
 801fc8a:	4602      	mov	r2, r0
 801fc8c:	460b      	mov	r3, r1
 801fc8e:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
 801fc92:	e005      	b.n	801fca0 <svd_u3DvUgOe+0x1600>
        } else {
          shift = 0.0;
 801fc94:	f04f 0200 	mov.w	r2, #0
 801fc98:	f04f 0300 	mov.w	r3, #0
 801fc9c:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        }

        rt = (sqds + rt) * (sqds - rt) + shift;
 801fca0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 801fca4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801fca8:	f7e0 fae2 	bl	8000270 <__adddf3>
 801fcac:	4602      	mov	r2, r0
 801fcae:	460b      	mov	r3, r1
 801fcb0:	4614      	mov	r4, r2
 801fcb2:	461d      	mov	r5, r3
 801fcb4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 801fcb8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801fcbc:	f7e0 fad6 	bl	800026c <__aeabi_dsub>
 801fcc0:	4602      	mov	r2, r0
 801fcc2:	460b      	mov	r3, r1
 801fcc4:	4620      	mov	r0, r4
 801fcc6:	4629      	mov	r1, r5
 801fcc8:	f7e0 fc88 	bl	80005dc <__aeabi_dmul>
 801fccc:	4602      	mov	r2, r0
 801fcce:	460b      	mov	r3, r1
 801fcd0:	4610      	mov	r0, r2
 801fcd2:	4619      	mov	r1, r3
 801fcd4:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 801fcd8:	f7e0 faca 	bl	8000270 <__adddf3>
 801fcdc:	4602      	mov	r2, r0
 801fcde:	460b      	mov	r3, r1
 801fce0:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        ztest = e[d] / ztest * sqds;
 801fce4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801fce8:	00db      	lsls	r3, r3, #3
 801fcea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fcee:	4413      	add	r3, r2
 801fcf0:	3bb8      	subs	r3, #184	; 0xb8
 801fcf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fcf6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 801fcfa:	f7e0 fd99 	bl	8000830 <__aeabi_ddiv>
 801fcfe:	4602      	mov	r2, r0
 801fd00:	460b      	mov	r3, r1
 801fd02:	4610      	mov	r0, r2
 801fd04:	4619      	mov	r1, r3
 801fd06:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801fd0a:	f7e0 fc67 	bl	80005dc <__aeabi_dmul>
 801fd0e:	4602      	mov	r2, r0
 801fd10:	460b      	mov	r3, r1
 801fd12:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 801fd16:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801fd1a:	3301      	adds	r3, #1
 801fd1c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801fd20:	e183      	b.n	802002a <svd_u3DvUgOe+0x198a>
          xrotg_XzIjz1eG(&rt, &ztest, &sqds, &smm1);
 801fd22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801fd26:	f507 728c 	add.w	r2, r7, #280	; 0x118
 801fd2a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801fd2e:	f507 7094 	add.w	r0, r7, #296	; 0x128
 801fd32:	f001 fab3 	bl	802129c <xrotg_XzIjz1eG>
          if (qjj > d + 1) {
 801fd36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801fd3a:	1c5a      	adds	r2, r3, #1
 801fd3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fd40:	4293      	cmp	r3, r2
 801fd42:	dd03      	ble.n	801fd4c <svd_u3DvUgOe+0x16ac>
            e[0] = rt;
 801fd44:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801fd48:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
          }

          rt = e[qjj - 1];
 801fd4c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fd50:	3b01      	subs	r3, #1
 801fd52:	00db      	lsls	r3, r3, #3
 801fd54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fd58:	4413      	add	r3, r2
 801fd5a:	3bb8      	subs	r3, #184	; 0xb8
 801fd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd60:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          emm1 = b_s[qjj - 1];
 801fd64:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fd68:	3b01      	subs	r3, #1
 801fd6a:	00db      	lsls	r3, r3, #3
 801fd6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fd70:	4413      	add	r3, r2
 801fd72:	3ba0      	subs	r3, #160	; 0xa0
 801fd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd78:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
          e[qjj - 1] = rt * sqds - emm1 * smm1;
 801fd7c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 801fd80:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801fd84:	f7e0 fc2a 	bl	80005dc <__aeabi_dmul>
 801fd88:	4602      	mov	r2, r0
 801fd8a:	460b      	mov	r3, r1
 801fd8c:	4690      	mov	r8, r2
 801fd8e:	4699      	mov	r9, r3
 801fd90:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 801fd94:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 801fd98:	f7e0 fc20 	bl	80005dc <__aeabi_dmul>
 801fd9c:	4602      	mov	r2, r0
 801fd9e:	460b      	mov	r3, r1
 801fda0:	4610      	mov	r0, r2
 801fda2:	4619      	mov	r1, r3
 801fda4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fda8:	1e5c      	subs	r4, r3, #1
 801fdaa:	4602      	mov	r2, r0
 801fdac:	460b      	mov	r3, r1
 801fdae:	4640      	mov	r0, r8
 801fdb0:	4649      	mov	r1, r9
 801fdb2:	f7e0 fa5b 	bl	800026c <__aeabi_dsub>
 801fdb6:	4602      	mov	r2, r0
 801fdb8:	460b      	mov	r3, r1
 801fdba:	4610      	mov	r0, r2
 801fdbc:	4619      	mov	r1, r3
 801fdbe:	00e3      	lsls	r3, r4, #3
 801fdc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fdc4:	4413      	add	r3, r2
 801fdc6:	3bb8      	subs	r3, #184	; 0xb8
 801fdc8:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * b_s[qjj];
 801fdcc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fdd0:	00db      	lsls	r3, r3, #3
 801fdd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fdd6:	4413      	add	r3, r2
 801fdd8:	3ba0      	subs	r3, #160	; 0xa0
 801fdda:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fdde:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801fde2:	f7e0 fbfb 	bl	80005dc <__aeabi_dmul>
 801fde6:	4602      	mov	r2, r0
 801fde8:	460b      	mov	r3, r1
 801fdea:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          b_s[qjj] *= sqds;
 801fdee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fdf2:	00db      	lsls	r3, r3, #3
 801fdf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fdf8:	4413      	add	r3, r2
 801fdfa:	3ba0      	subs	r3, #160	; 0xa0
 801fdfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fe00:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801fe04:	f7e0 fbea 	bl	80005dc <__aeabi_dmul>
 801fe08:	4602      	mov	r2, r0
 801fe0a:	460b      	mov	r3, r1
 801fe0c:	4610      	mov	r0, r2
 801fe0e:	4619      	mov	r1, r3
 801fe10:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fe14:	00db      	lsls	r3, r3, #3
 801fe16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fe1a:	4413      	add	r3, r2
 801fe1c:	3ba0      	subs	r3, #160	; 0xa0
 801fe1e:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(V, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 801fe22:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fe26:	1e5a      	subs	r2, r3, #1
 801fe28:	4613      	mov	r3, r2
 801fe2a:	005b      	lsls	r3, r3, #1
 801fe2c:	4413      	add	r3, r2
 801fe2e:	1c59      	adds	r1, r3, #1
 801fe30:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801fe34:	4613      	mov	r3, r2
 801fe36:	005b      	lsls	r3, r3, #1
 801fe38:	4413      	add	r3, r2
 801fe3a:	1c5a      	adds	r2, r3, #1
 801fe3c:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 801fe40:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 801fe44:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801fe48:	eeb0 1a46 	vmov.f32	s2, s12
 801fe4c:	eef0 1a66 	vmov.f32	s3, s13
 801fe50:	eeb0 0a47 	vmov.f32	s0, s14
 801fe54:	eef0 0a67 	vmov.f32	s1, s15
 801fe58:	6818      	ldr	r0, [r3, #0]
 801fe5a:	f001 f903 	bl	8021064 <xrot_i7f01JoJ>
          b_s[qjj - 1] = emm1 * sqds + rt * smm1;
 801fe5e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 801fe62:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 801fe66:	f7e0 fbb9 	bl	80005dc <__aeabi_dmul>
 801fe6a:	4602      	mov	r2, r0
 801fe6c:	460b      	mov	r3, r1
 801fe6e:	4690      	mov	r8, r2
 801fe70:	4699      	mov	r9, r3
 801fe72:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 801fe76:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801fe7a:	f7e0 fbaf 	bl	80005dc <__aeabi_dmul>
 801fe7e:	4602      	mov	r2, r0
 801fe80:	460b      	mov	r3, r1
 801fe82:	4610      	mov	r0, r2
 801fe84:	4619      	mov	r1, r3
 801fe86:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fe8a:	1e5c      	subs	r4, r3, #1
 801fe8c:	4602      	mov	r2, r0
 801fe8e:	460b      	mov	r3, r1
 801fe90:	4640      	mov	r0, r8
 801fe92:	4649      	mov	r1, r9
 801fe94:	f7e0 f9ec 	bl	8000270 <__adddf3>
 801fe98:	4602      	mov	r2, r0
 801fe9a:	460b      	mov	r3, r1
 801fe9c:	4610      	mov	r0, r2
 801fe9e:	4619      	mov	r1, r3
 801fea0:	00e3      	lsls	r3, r4, #3
 801fea2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fea6:	4413      	add	r3, r2
 801fea8:	3ba0      	subs	r3, #160	; 0xa0
 801feaa:	e9c3 0100 	strd	r0, r1, [r3]
          xrotg_XzIjz1eG(&b_s[qjj - 1], &ztest, &sqds, &smm1);
 801feae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801feb2:	3b01      	subs	r3, #1
 801feb4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801feb8:	00db      	lsls	r3, r3, #3
 801feba:	18d0      	adds	r0, r2, r3
 801febc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801fec0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 801fec4:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801fec8:	f001 f9e8 	bl	802129c <xrotg_XzIjz1eG>
          rt = e[qjj - 1] * sqds + smm1 * b_s[qjj];
 801fecc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fed0:	3b01      	subs	r3, #1
 801fed2:	00db      	lsls	r3, r3, #3
 801fed4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fed8:	4413      	add	r3, r2
 801feda:	3bb8      	subs	r3, #184	; 0xb8
 801fedc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fee0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801fee4:	f7e0 fb7a 	bl	80005dc <__aeabi_dmul>
 801fee8:	4602      	mov	r2, r0
 801feea:	460b      	mov	r3, r1
 801feec:	4614      	mov	r4, r2
 801feee:	461d      	mov	r5, r3
 801fef0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fef4:	00db      	lsls	r3, r3, #3
 801fef6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801fefa:	4413      	add	r3, r2
 801fefc:	3ba0      	subs	r3, #160	; 0xa0
 801fefe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ff02:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801ff06:	f7e0 fb69 	bl	80005dc <__aeabi_dmul>
 801ff0a:	4602      	mov	r2, r0
 801ff0c:	460b      	mov	r3, r1
 801ff0e:	4620      	mov	r0, r4
 801ff10:	4629      	mov	r1, r5
 801ff12:	f7e0 f9ad 	bl	8000270 <__adddf3>
 801ff16:	4602      	mov	r2, r0
 801ff18:	460b      	mov	r3, r1
 801ff1a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          b_s[qjj] = e[qjj - 1] * -smm1 + sqds * b_s[qjj];
 801ff1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ff22:	3b01      	subs	r3, #1
 801ff24:	00db      	lsls	r3, r3, #3
 801ff26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801ff2a:	4413      	add	r3, r2
 801ff2c:	3bb8      	subs	r3, #184	; 0xb8
 801ff2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ff32:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801ff36:	60ba      	str	r2, [r7, #8]
 801ff38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801ff3c:	60fb      	str	r3, [r7, #12]
 801ff3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ff42:	f7e0 fb4b 	bl	80005dc <__aeabi_dmul>
 801ff46:	4602      	mov	r2, r0
 801ff48:	460b      	mov	r3, r1
 801ff4a:	4614      	mov	r4, r2
 801ff4c:	461d      	mov	r5, r3
 801ff4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ff52:	00db      	lsls	r3, r3, #3
 801ff54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801ff58:	4413      	add	r3, r2
 801ff5a:	3ba0      	subs	r3, #160	; 0xa0
 801ff5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ff60:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801ff64:	f7e0 fb3a 	bl	80005dc <__aeabi_dmul>
 801ff68:	4602      	mov	r2, r0
 801ff6a:	460b      	mov	r3, r1
 801ff6c:	4620      	mov	r0, r4
 801ff6e:	4629      	mov	r1, r5
 801ff70:	f7e0 f97e 	bl	8000270 <__adddf3>
 801ff74:	4602      	mov	r2, r0
 801ff76:	460b      	mov	r3, r1
 801ff78:	4610      	mov	r0, r2
 801ff7a:	4619      	mov	r1, r3
 801ff7c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ff80:	00db      	lsls	r3, r3, #3
 801ff82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801ff86:	4413      	add	r3, r2
 801ff88:	3ba0      	subs	r3, #160	; 0xa0
 801ff8a:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * e[qjj];
 801ff8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ff92:	00db      	lsls	r3, r3, #3
 801ff94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801ff98:	4413      	add	r3, r2
 801ff9a:	3bb8      	subs	r3, #184	; 0xb8
 801ff9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ffa0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801ffa4:	f7e0 fb1a 	bl	80005dc <__aeabi_dmul>
 801ffa8:	4602      	mov	r2, r0
 801ffaa:	460b      	mov	r3, r1
 801ffac:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          e[qjj] *= sqds;
 801ffb0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ffb4:	00db      	lsls	r3, r3, #3
 801ffb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801ffba:	4413      	add	r3, r2
 801ffbc:	3bb8      	subs	r3, #184	; 0xb8
 801ffbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ffc2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801ffc6:	f7e0 fb09 	bl	80005dc <__aeabi_dmul>
 801ffca:	4602      	mov	r2, r0
 801ffcc:	460b      	mov	r3, r1
 801ffce:	4610      	mov	r0, r2
 801ffd0:	4619      	mov	r1, r3
 801ffd2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ffd6:	00db      	lsls	r3, r3, #3
 801ffd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801ffdc:	4413      	add	r3, r2
 801ffde:	3bb8      	subs	r3, #184	; 0xb8
 801ffe0:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(U, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 801ffe4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ffe8:	1e5a      	subs	r2, r3, #1
 801ffea:	4613      	mov	r3, r2
 801ffec:	005b      	lsls	r3, r3, #1
 801ffee:	4413      	add	r3, r2
 801fff0:	1c59      	adds	r1, r3, #1
 801fff2:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801fff6:	4613      	mov	r3, r2
 801fff8:	005b      	lsls	r3, r3, #1
 801fffa:	4413      	add	r3, r2
 801fffc:	3301      	adds	r3, #1
 801fffe:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8020002:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 8020006:	eeb0 1a46 	vmov.f32	s2, s12
 802000a:	eef0 1a66 	vmov.f32	s3, s13
 802000e:	eeb0 0a47 	vmov.f32	s0, s14
 8020012:	eef0 0a67 	vmov.f32	s1, s15
 8020016:	461a      	mov	r2, r3
 8020018:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 802001c:	f001 f822 	bl	8021064 <xrot_i7f01JoJ>
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 8020020:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020024:	3301      	adds	r3, #1
 8020026:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 802002a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 802002e:	1c5a      	adds	r2, r3, #1
 8020030:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020034:	4293      	cmp	r3, r2
 8020036:	f77f ae74 	ble.w	801fd22 <svd_u3DvUgOe+0x1682>
        }

        e[m] = rt;
 802003a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 802003e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8020042:	00db      	lsls	r3, r3, #3
 8020044:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020048:	4413      	add	r3, r2
 802004a:	3bb8      	subs	r3, #184	; 0xb8
 802004c:	e9c3 0100 	strd	r0, r1, [r3]
        qq++;
 8020050:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020054:	3301      	adds	r3, #1
 8020056:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      }
      break;
 802005a:	e0b7      	b.n	80201cc <svd_u3DvUgOe+0x1b2c>

     default:
      if (b_s[d] < 0.0) {
 802005c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020060:	00db      	lsls	r3, r3, #3
 8020062:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020066:	4413      	add	r3, r2
 8020068:	3ba0      	subs	r3, #160	; 0xa0
 802006a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802006e:	f04f 0200 	mov.w	r2, #0
 8020072:	f04f 0300 	mov.w	r3, #0
 8020076:	f7e0 fd23 	bl	8000ac0 <__aeabi_dcmplt>
 802007a:	4603      	mov	r3, r0
 802007c:	2b00      	cmp	r3, #0
 802007e:	d025      	beq.n	80200cc <svd_u3DvUgOe+0x1a2c>
        b_s[d] = -b_s[d];
 8020080:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020084:	00db      	lsls	r3, r3, #3
 8020086:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802008a:	4413      	add	r3, r2
 802008c:	3ba0      	subs	r3, #160	; 0xa0
 802008e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020092:	603a      	str	r2, [r7, #0]
 8020094:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020098:	607b      	str	r3, [r7, #4]
 802009a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802009e:	00db      	lsls	r3, r3, #3
 80200a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80200a4:	4413      	add	r3, r2
 80200a6:	3ba0      	subs	r3, #160	; 0xa0
 80200a8:	ed97 7b00 	vldr	d7, [r7]
 80200ac:	ed83 7b00 	vstr	d7, [r3]
        xscal_eaAxXsvQ(-1.0, V, 3 * d + 1);
 80200b0:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80200b4:	4613      	mov	r3, r2
 80200b6:	005b      	lsls	r3, r3, #1
 80200b8:	4413      	add	r3, r2
 80200ba:	1c5a      	adds	r2, r3, #1
 80200bc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80200c0:	4611      	mov	r1, r2
 80200c2:	6818      	ldr	r0, [r3, #0]
 80200c4:	ed9f 0b56 	vldr	d0, [pc, #344]	; 8020220 <svd_u3DvUgOe+0x1b80>
 80200c8:	f001 fa4e 	bl	8021568 <xscal_eaAxXsvQ>
      }

      qq = d + 1;
 80200cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80200d0:	3301      	adds	r3, #1
 80200d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 80200d6:	e055      	b.n	8020184 <svd_u3DvUgOe+0x1ae4>
        rt = b_s[d];
 80200d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80200dc:	00db      	lsls	r3, r3, #3
 80200de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80200e2:	4413      	add	r3, r2
 80200e4:	3ba0      	subs	r3, #160	; 0xa0
 80200e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200ea:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        b_s[d] = b_s[qq];
 80200ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80200f2:	00db      	lsls	r3, r3, #3
 80200f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80200f8:	4413      	add	r3, r2
 80200fa:	3ba0      	subs	r3, #160	; 0xa0
 80200fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020100:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020104:	00db      	lsls	r3, r3, #3
 8020106:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802010a:	4413      	add	r3, r2
 802010c:	3ba0      	subs	r3, #160	; 0xa0
 802010e:	e9c3 0100 	strd	r0, r1, [r3]
        b_s[qq] = rt;
 8020112:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8020116:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802011a:	00db      	lsls	r3, r3, #3
 802011c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020120:	4413      	add	r3, r2
 8020122:	3ba0      	subs	r3, #160	; 0xa0
 8020124:	e9c3 0100 	strd	r0, r1, [r3]
        xswap_JoAqPjUv(V, 3 * d + 1, 3 * (d + 1) + 1);
 8020128:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 802012c:	4613      	mov	r3, r2
 802012e:	005b      	lsls	r3, r3, #1
 8020130:	4413      	add	r3, r2
 8020132:	1c59      	adds	r1, r3, #1
 8020134:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020138:	1c5a      	adds	r2, r3, #1
 802013a:	4613      	mov	r3, r2
 802013c:	005b      	lsls	r3, r3, #1
 802013e:	4413      	add	r3, r2
 8020140:	3301      	adds	r3, #1
 8020142:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8020146:	461a      	mov	r2, r3
 8020148:	6800      	ldr	r0, [r0, #0]
 802014a:	f001 fa3c 	bl	80215c6 <xswap_JoAqPjUv>
        xswap_JoAqPjUv(U, 3 * d + 1, 3 * (d + 1) + 1);
 802014e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020152:	4613      	mov	r3, r2
 8020154:	005b      	lsls	r3, r3, #1
 8020156:	4413      	add	r3, r2
 8020158:	1c59      	adds	r1, r3, #1
 802015a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802015e:	1c5a      	adds	r2, r3, #1
 8020160:	4613      	mov	r3, r2
 8020162:	005b      	lsls	r3, r3, #1
 8020164:	4413      	add	r3, r2
 8020166:	3301      	adds	r3, #1
 8020168:	461a      	mov	r2, r3
 802016a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 802016e:	f001 fa2a 	bl	80215c6 <xswap_JoAqPjUv>
        d = qq;
 8020172:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020176:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        qq++;
 802017a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802017e:	3301      	adds	r3, #1
 8020180:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 8020184:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020188:	2b01      	cmp	r3, #1
 802018a:	dc16      	bgt.n	80201ba <svd_u3DvUgOe+0x1b1a>
 802018c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020190:	00db      	lsls	r3, r3, #3
 8020192:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020196:	4413      	add	r3, r2
 8020198:	3ba0      	subs	r3, #160	; 0xa0
 802019a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802019e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80201a2:	00db      	lsls	r3, r3, #3
 80201a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80201a8:	4413      	add	r3, r2
 80201aa:	3ba0      	subs	r3, #160	; 0xa0
 80201ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201b0:	f7e0 fc86 	bl	8000ac0 <__aeabi_dcmplt>
 80201b4:	4603      	mov	r3, r0
 80201b6:	2b00      	cmp	r3, #0
 80201b8:	d18e      	bne.n	80200d8 <svd_u3DvUgOe+0x1a38>
      }

      qq = 0;
 80201ba:	2300      	movs	r3, #0
 80201bc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      m--;
 80201c0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80201c4:	3b01      	subs	r3, #1
 80201c6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
      break;
 80201ca:	bf00      	nop
  while ((m + 2 > 0) && (qq < 75)) {
 80201cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80201d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80201d4:	db04      	blt.n	80201e0 <svd_u3DvUgOe+0x1b40>
 80201d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80201da:	2b4a      	cmp	r3, #74	; 0x4a
 80201dc:	f77f a972 	ble.w	801f4c4 <svd_u3DvUgOe+0xe24>
    }
  }

  s[0] = b_s[0];
 80201e0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80201e4:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80201e8:	e9c1 2300 	strd	r2, r3, [r1]
  s[1] = b_s[1];
 80201ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80201f0:	f103 0108 	add.w	r1, r3, #8
 80201f4:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80201f8:	e9c1 2300 	strd	r2, r3, [r1]
  s[2] = b_s[2];
 80201fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8020200:	f103 0110 	add.w	r1, r3, #16
 8020204:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8020208:	e9c1 2300 	strd	r2, r3, [r1]
}
 802020c:	bf00      	nop
 802020e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8020212:	46bd      	mov	sp, r7
 8020214:	ecbd 8b02 	vpop	{d8}
 8020218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802021c:	f3af 8000 	nop.w
 8020220:	00000000 	.word	0x00000000
 8020224:	bff00000 	.word	0xbff00000

08020228 <trisolve_BC1XmAGq>:
#include "rtwtypes.h"
#include "trisolve_BC1XmAGq.h"

void trisolve_BC1XmAGq(real_T A, real_T B[3])
{
 8020228:	b590      	push	{r4, r7, lr}
 802022a:	b085      	sub	sp, #20
 802022c:	af00      	add	r7, sp, #0
 802022e:	ed87 0b02 	vstr	d0, [r7, #8]
 8020232:	6078      	str	r0, [r7, #4]
  if (B[0] != 0.0) {
 8020234:	687b      	ldr	r3, [r7, #4]
 8020236:	e9d3 0100 	ldrd	r0, r1, [r3]
 802023a:	f04f 0200 	mov.w	r2, #0
 802023e:	f04f 0300 	mov.w	r3, #0
 8020242:	f7e0 fc33 	bl	8000aac <__aeabi_dcmpeq>
 8020246:	4603      	mov	r3, r0
 8020248:	2b00      	cmp	r3, #0
 802024a:	d10b      	bne.n	8020264 <trisolve_BC1XmAGq+0x3c>
    B[0] /= A;
 802024c:	687b      	ldr	r3, [r7, #4]
 802024e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020252:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020256:	f7e0 faeb 	bl	8000830 <__aeabi_ddiv>
 802025a:	4602      	mov	r2, r0
 802025c:	460b      	mov	r3, r1
 802025e:	6879      	ldr	r1, [r7, #4]
 8020260:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (B[1] != 0.0) {
 8020264:	687b      	ldr	r3, [r7, #4]
 8020266:	3308      	adds	r3, #8
 8020268:	e9d3 0100 	ldrd	r0, r1, [r3]
 802026c:	f04f 0200 	mov.w	r2, #0
 8020270:	f04f 0300 	mov.w	r3, #0
 8020274:	f7e0 fc1a 	bl	8000aac <__aeabi_dcmpeq>
 8020278:	4603      	mov	r3, r0
 802027a:	2b00      	cmp	r3, #0
 802027c:	d10e      	bne.n	802029c <trisolve_BC1XmAGq+0x74>
    B[1] /= A;
 802027e:	687b      	ldr	r3, [r7, #4]
 8020280:	3308      	adds	r3, #8
 8020282:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020286:	687b      	ldr	r3, [r7, #4]
 8020288:	f103 0408 	add.w	r4, r3, #8
 802028c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020290:	f7e0 face 	bl	8000830 <__aeabi_ddiv>
 8020294:	4602      	mov	r2, r0
 8020296:	460b      	mov	r3, r1
 8020298:	e9c4 2300 	strd	r2, r3, [r4]
  }

  if (B[2] != 0.0) {
 802029c:	687b      	ldr	r3, [r7, #4]
 802029e:	3310      	adds	r3, #16
 80202a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80202a4:	f04f 0200 	mov.w	r2, #0
 80202a8:	f04f 0300 	mov.w	r3, #0
 80202ac:	f7e0 fbfe 	bl	8000aac <__aeabi_dcmpeq>
 80202b0:	4603      	mov	r3, r0
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	d000      	beq.n	80202b8 <trisolve_BC1XmAGq+0x90>
    B[2] /= A;
  }
}
 80202b6:	e00e      	b.n	80202d6 <trisolve_BC1XmAGq+0xae>
    B[2] /= A;
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	3310      	adds	r3, #16
 80202bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80202c0:	687b      	ldr	r3, [r7, #4]
 80202c2:	f103 0410 	add.w	r4, r3, #16
 80202c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80202ca:	f7e0 fab1 	bl	8000830 <__aeabi_ddiv>
 80202ce:	4602      	mov	r2, r0
 80202d0:	460b      	mov	r3, r1
 80202d2:	e9c4 2300 	strd	r2, r3, [r4]
}
 80202d6:	bf00      	nop
 80202d8:	3714      	adds	r7, #20
 80202da:	46bd      	mov	sp, r7
 80202dc:	bd90      	pop	{r4, r7, pc}

080202de <xaxpy_OQ28XA21>:
#include "rtwtypes.h"
#include "xaxpy_OQ28XA21.h"

void xaxpy_OQ28XA21(int32_T n, real_T a, const real_T x[9], int32_T ix0, real_T
                    y[3], int32_T iy0)
{
 80202de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80202e0:	b08b      	sub	sp, #44	; 0x2c
 80202e2:	af00      	add	r7, sp, #0
 80202e4:	6178      	str	r0, [r7, #20]
 80202e6:	ed87 0b02 	vstr	d0, [r7, #8]
 80202ea:	6139      	str	r1, [r7, #16]
 80202ec:	607a      	str	r2, [r7, #4]
 80202ee:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 80202f0:	697b      	ldr	r3, [r7, #20]
 80202f2:	2b00      	cmp	r3, #0
 80202f4:	dd43      	ble.n	802037e <xaxpy_OQ28XA21+0xa0>
 80202f6:	f04f 0200 	mov.w	r2, #0
 80202fa:	f04f 0300 	mov.w	r3, #0
 80202fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8020302:	f7e0 fbd3 	bl	8000aac <__aeabi_dcmpeq>
 8020306:	4603      	mov	r3, r0
 8020308:	2b00      	cmp	r3, #0
 802030a:	d000      	beq.n	802030e <xaxpy_OQ28XA21+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 802030c:	e037      	b.n	802037e <xaxpy_OQ28XA21+0xa0>
    ix = ix0 - 1;
 802030e:	687b      	ldr	r3, [r7, #4]
 8020310:	3b01      	subs	r3, #1
 8020312:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 8020314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020316:	3b01      	subs	r3, #1
 8020318:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 802031a:	2300      	movs	r3, #0
 802031c:	627b      	str	r3, [r7, #36]	; 0x24
 802031e:	e02a      	b.n	8020376 <xaxpy_OQ28XA21+0x98>
      y[iy] += a * x[ix];
 8020320:	69fb      	ldr	r3, [r7, #28]
 8020322:	00db      	lsls	r3, r3, #3
 8020324:	683a      	ldr	r2, [r7, #0]
 8020326:	4413      	add	r3, r2
 8020328:	e9d3 4500 	ldrd	r4, r5, [r3]
 802032c:	6a3b      	ldr	r3, [r7, #32]
 802032e:	00db      	lsls	r3, r3, #3
 8020330:	693a      	ldr	r2, [r7, #16]
 8020332:	4413      	add	r3, r2
 8020334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020338:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802033c:	f7e0 f94e 	bl	80005dc <__aeabi_dmul>
 8020340:	4602      	mov	r2, r0
 8020342:	460b      	mov	r3, r1
 8020344:	4610      	mov	r0, r2
 8020346:	4619      	mov	r1, r3
 8020348:	69fb      	ldr	r3, [r7, #28]
 802034a:	00db      	lsls	r3, r3, #3
 802034c:	683a      	ldr	r2, [r7, #0]
 802034e:	18d6      	adds	r6, r2, r3
 8020350:	4602      	mov	r2, r0
 8020352:	460b      	mov	r3, r1
 8020354:	4620      	mov	r0, r4
 8020356:	4629      	mov	r1, r5
 8020358:	f7df ff8a 	bl	8000270 <__adddf3>
 802035c:	4602      	mov	r2, r0
 802035e:	460b      	mov	r3, r1
 8020360:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 8020364:	6a3b      	ldr	r3, [r7, #32]
 8020366:	3301      	adds	r3, #1
 8020368:	623b      	str	r3, [r7, #32]
      iy++;
 802036a:	69fb      	ldr	r3, [r7, #28]
 802036c:	3301      	adds	r3, #1
 802036e:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8020370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020372:	3301      	adds	r3, #1
 8020374:	627b      	str	r3, [r7, #36]	; 0x24
 8020376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020378:	697b      	ldr	r3, [r7, #20]
 802037a:	429a      	cmp	r2, r3
 802037c:	dbd0      	blt.n	8020320 <xaxpy_OQ28XA21+0x42>
}
 802037e:	bf00      	nop
 8020380:	372c      	adds	r7, #44	; 0x2c
 8020382:	46bd      	mov	sp, r7
 8020384:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020386 <xaxpy_Wxch84Fl>:
#include "rtwtypes.h"
#include "xaxpy_Wxch84Fl.h"

void xaxpy_Wxch84Fl(int32_T n, real_T a, const real_T x[3], int32_T ix0, real_T
                    y[9], int32_T iy0)
{
 8020386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020388:	b08b      	sub	sp, #44	; 0x2c
 802038a:	af00      	add	r7, sp, #0
 802038c:	6178      	str	r0, [r7, #20]
 802038e:	ed87 0b02 	vstr	d0, [r7, #8]
 8020392:	6139      	str	r1, [r7, #16]
 8020394:	607a      	str	r2, [r7, #4]
 8020396:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 8020398:	697b      	ldr	r3, [r7, #20]
 802039a:	2b00      	cmp	r3, #0
 802039c:	dd43      	ble.n	8020426 <xaxpy_Wxch84Fl+0xa0>
 802039e:	f04f 0200 	mov.w	r2, #0
 80203a2:	f04f 0300 	mov.w	r3, #0
 80203a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80203aa:	f7e0 fb7f 	bl	8000aac <__aeabi_dcmpeq>
 80203ae:	4603      	mov	r3, r0
 80203b0:	2b00      	cmp	r3, #0
 80203b2:	d000      	beq.n	80203b6 <xaxpy_Wxch84Fl+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 80203b4:	e037      	b.n	8020426 <xaxpy_Wxch84Fl+0xa0>
    ix = ix0 - 1;
 80203b6:	687b      	ldr	r3, [r7, #4]
 80203b8:	3b01      	subs	r3, #1
 80203ba:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 80203bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80203be:	3b01      	subs	r3, #1
 80203c0:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 80203c2:	2300      	movs	r3, #0
 80203c4:	627b      	str	r3, [r7, #36]	; 0x24
 80203c6:	e02a      	b.n	802041e <xaxpy_Wxch84Fl+0x98>
      y[iy] += a * x[ix];
 80203c8:	69fb      	ldr	r3, [r7, #28]
 80203ca:	00db      	lsls	r3, r3, #3
 80203cc:	683a      	ldr	r2, [r7, #0]
 80203ce:	4413      	add	r3, r2
 80203d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80203d4:	6a3b      	ldr	r3, [r7, #32]
 80203d6:	00db      	lsls	r3, r3, #3
 80203d8:	693a      	ldr	r2, [r7, #16]
 80203da:	4413      	add	r3, r2
 80203dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80203e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80203e4:	f7e0 f8fa 	bl	80005dc <__aeabi_dmul>
 80203e8:	4602      	mov	r2, r0
 80203ea:	460b      	mov	r3, r1
 80203ec:	4610      	mov	r0, r2
 80203ee:	4619      	mov	r1, r3
 80203f0:	69fb      	ldr	r3, [r7, #28]
 80203f2:	00db      	lsls	r3, r3, #3
 80203f4:	683a      	ldr	r2, [r7, #0]
 80203f6:	18d6      	adds	r6, r2, r3
 80203f8:	4602      	mov	r2, r0
 80203fa:	460b      	mov	r3, r1
 80203fc:	4620      	mov	r0, r4
 80203fe:	4629      	mov	r1, r5
 8020400:	f7df ff36 	bl	8000270 <__adddf3>
 8020404:	4602      	mov	r2, r0
 8020406:	460b      	mov	r3, r1
 8020408:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 802040c:	6a3b      	ldr	r3, [r7, #32]
 802040e:	3301      	adds	r3, #1
 8020410:	623b      	str	r3, [r7, #32]
      iy++;
 8020412:	69fb      	ldr	r3, [r7, #28]
 8020414:	3301      	adds	r3, #1
 8020416:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8020418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802041a:	3301      	adds	r3, #1
 802041c:	627b      	str	r3, [r7, #36]	; 0x24
 802041e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020420:	697b      	ldr	r3, [r7, #20]
 8020422:	429a      	cmp	r2, r3
 8020424:	dbd0      	blt.n	80203c8 <xaxpy_Wxch84Fl+0x42>
}
 8020426:	bf00      	nop
 8020428:	372c      	adds	r7, #44	; 0x2c
 802042a:	46bd      	mov	sp, r7
 802042c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802042e <xaxpy_guu0hJif>:
#include "rtwtypes.h"
#include "xaxpy_guu0hJif.h"

void xaxpy_guu0hJif(int32_T n, real_T a, int32_T ix0, real_T y[9], int32_T iy0)
{
 802042e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020430:	b08b      	sub	sp, #44	; 0x2c
 8020432:	af00      	add	r7, sp, #0
 8020434:	6178      	str	r0, [r7, #20]
 8020436:	ed87 0b02 	vstr	d0, [r7, #8]
 802043a:	6139      	str	r1, [r7, #16]
 802043c:	607a      	str	r2, [r7, #4]
 802043e:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 8020440:	697b      	ldr	r3, [r7, #20]
 8020442:	2b00      	cmp	r3, #0
 8020444:	dd43      	ble.n	80204ce <xaxpy_guu0hJif+0xa0>
 8020446:	f04f 0200 	mov.w	r2, #0
 802044a:	f04f 0300 	mov.w	r3, #0
 802044e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8020452:	f7e0 fb2b 	bl	8000aac <__aeabi_dcmpeq>
 8020456:	4603      	mov	r3, r0
 8020458:	2b00      	cmp	r3, #0
 802045a:	d000      	beq.n	802045e <xaxpy_guu0hJif+0x30>
      y[iy] += a * y[ix];
      ix++;
      iy++;
    }
  }
}
 802045c:	e037      	b.n	80204ce <xaxpy_guu0hJif+0xa0>
    ix = ix0 - 1;
 802045e:	693b      	ldr	r3, [r7, #16]
 8020460:	3b01      	subs	r3, #1
 8020462:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 8020464:	683b      	ldr	r3, [r7, #0]
 8020466:	3b01      	subs	r3, #1
 8020468:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 802046a:	2300      	movs	r3, #0
 802046c:	627b      	str	r3, [r7, #36]	; 0x24
 802046e:	e02a      	b.n	80204c6 <xaxpy_guu0hJif+0x98>
      y[iy] += a * y[ix];
 8020470:	69fb      	ldr	r3, [r7, #28]
 8020472:	00db      	lsls	r3, r3, #3
 8020474:	687a      	ldr	r2, [r7, #4]
 8020476:	4413      	add	r3, r2
 8020478:	e9d3 4500 	ldrd	r4, r5, [r3]
 802047c:	6a3b      	ldr	r3, [r7, #32]
 802047e:	00db      	lsls	r3, r3, #3
 8020480:	687a      	ldr	r2, [r7, #4]
 8020482:	4413      	add	r3, r2
 8020484:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802048c:	f7e0 f8a6 	bl	80005dc <__aeabi_dmul>
 8020490:	4602      	mov	r2, r0
 8020492:	460b      	mov	r3, r1
 8020494:	4610      	mov	r0, r2
 8020496:	4619      	mov	r1, r3
 8020498:	69fb      	ldr	r3, [r7, #28]
 802049a:	00db      	lsls	r3, r3, #3
 802049c:	687a      	ldr	r2, [r7, #4]
 802049e:	18d6      	adds	r6, r2, r3
 80204a0:	4602      	mov	r2, r0
 80204a2:	460b      	mov	r3, r1
 80204a4:	4620      	mov	r0, r4
 80204a6:	4629      	mov	r1, r5
 80204a8:	f7df fee2 	bl	8000270 <__adddf3>
 80204ac:	4602      	mov	r2, r0
 80204ae:	460b      	mov	r3, r1
 80204b0:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 80204b4:	6a3b      	ldr	r3, [r7, #32]
 80204b6:	3301      	adds	r3, #1
 80204b8:	623b      	str	r3, [r7, #32]
      iy++;
 80204ba:	69fb      	ldr	r3, [r7, #28]
 80204bc:	3301      	adds	r3, #1
 80204be:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 80204c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204c2:	3301      	adds	r3, #1
 80204c4:	627b      	str	r3, [r7, #36]	; 0x24
 80204c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80204c8:	697b      	ldr	r3, [r7, #20]
 80204ca:	429a      	cmp	r2, r3
 80204cc:	dbd0      	blt.n	8020470 <xaxpy_guu0hJif+0x42>
}
 80204ce:	bf00      	nop
 80204d0:	372c      	adds	r7, #44	; 0x2c
 80204d2:	46bd      	mov	sp, r7
 80204d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080204d6 <xdotc_mznw4aLl>:
#include "rtwtypes.h"
#include "xdotc_mznw4aLl.h"

real_T xdotc_mznw4aLl(int32_T n, const real_T x[9], int32_T ix0, const real_T y
                      [9], int32_T iy0)
{
 80204d6:	b580      	push	{r7, lr}
 80204d8:	b08a      	sub	sp, #40	; 0x28
 80204da:	af00      	add	r7, sp, #0
 80204dc:	60f8      	str	r0, [r7, #12]
 80204de:	60b9      	str	r1, [r7, #8]
 80204e0:	607a      	str	r2, [r7, #4]
 80204e2:	603b      	str	r3, [r7, #0]
  real_T d;
  int32_T k;
  d = 0.0;
 80204e4:	f04f 0200 	mov.w	r2, #0
 80204e8:	f04f 0300 	mov.w	r3, #0
 80204ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (n >= 1) {
 80204f0:	68fb      	ldr	r3, [r7, #12]
 80204f2:	2b00      	cmp	r3, #0
 80204f4:	dd31      	ble.n	802055a <xdotc_mznw4aLl+0x84>
    int32_T ix;
    int32_T iy;
    ix = ix0;
 80204f6:	687b      	ldr	r3, [r7, #4]
 80204f8:	61bb      	str	r3, [r7, #24]
    iy = iy0;
 80204fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204fc:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 80204fe:	2300      	movs	r3, #0
 8020500:	61fb      	str	r3, [r7, #28]
 8020502:	e026      	b.n	8020552 <xdotc_mznw4aLl+0x7c>
      d += x[ix - 1] * y[iy - 1];
 8020504:	69bb      	ldr	r3, [r7, #24]
 8020506:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802050a:	3b01      	subs	r3, #1
 802050c:	00db      	lsls	r3, r3, #3
 802050e:	68ba      	ldr	r2, [r7, #8]
 8020510:	4413      	add	r3, r2
 8020512:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020516:	697b      	ldr	r3, [r7, #20]
 8020518:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802051c:	3b01      	subs	r3, #1
 802051e:	00db      	lsls	r3, r3, #3
 8020520:	683a      	ldr	r2, [r7, #0]
 8020522:	4413      	add	r3, r2
 8020524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020528:	f7e0 f858 	bl	80005dc <__aeabi_dmul>
 802052c:	4602      	mov	r2, r0
 802052e:	460b      	mov	r3, r1
 8020530:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020534:	f7df fe9c 	bl	8000270 <__adddf3>
 8020538:	4602      	mov	r2, r0
 802053a:	460b      	mov	r3, r1
 802053c:	e9c7 2308 	strd	r2, r3, [r7, #32]
      ix++;
 8020540:	69bb      	ldr	r3, [r7, #24]
 8020542:	3301      	adds	r3, #1
 8020544:	61bb      	str	r3, [r7, #24]
      iy++;
 8020546:	697b      	ldr	r3, [r7, #20]
 8020548:	3301      	adds	r3, #1
 802054a:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 802054c:	69fb      	ldr	r3, [r7, #28]
 802054e:	3301      	adds	r3, #1
 8020550:	61fb      	str	r3, [r7, #28]
 8020552:	69fa      	ldr	r2, [r7, #28]
 8020554:	68fb      	ldr	r3, [r7, #12]
 8020556:	429a      	cmp	r2, r3
 8020558:	dbd4      	blt.n	8020504 <xdotc_mznw4aLl+0x2e>
    }
  }

  return d;
 802055a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802055e:	ec43 2b17 	vmov	d7, r2, r3
}
 8020562:	eeb0 0a47 	vmov.f32	s0, s14
 8020566:	eef0 0a67 	vmov.f32	s1, s15
 802056a:	3728      	adds	r7, #40	; 0x28
 802056c:	46bd      	mov	sp, r7
 802056e:	bd80      	pop	{r7, pc}

08020570 <xgemv_NQlWbt2i>:
#include "rtwtypes.h"
#include "xgemv_NQlWbt2i.h"

void xgemv_NQlWbt2i(int32_T m, int32_T n, const real_T A[18], int32_T ia0, const
                    real_T x[18], int32_T ix0, real_T y[3])
{
 8020570:	b590      	push	{r4, r7, lr}
 8020572:	b08f      	sub	sp, #60	; 0x3c
 8020574:	af00      	add	r7, sp, #0
 8020576:	60f8      	str	r0, [r7, #12]
 8020578:	60b9      	str	r1, [r7, #8]
 802057a:	607a      	str	r2, [r7, #4]
 802057c:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 802057e:	68fb      	ldr	r3, [r7, #12]
 8020580:	2b00      	cmp	r3, #0
 8020582:	d079      	beq.n	8020678 <xgemv_NQlWbt2i+0x108>
 8020584:	68bb      	ldr	r3, [r7, #8]
 8020586:	2b00      	cmp	r3, #0
 8020588:	d076      	beq.n	8020678 <xgemv_NQlWbt2i+0x108>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 802058a:	2300      	movs	r3, #0
 802058c:	637b      	str	r3, [r7, #52]	; 0x34
 802058e:	e00c      	b.n	80205aa <xgemv_NQlWbt2i+0x3a>
      y[b_iy] = 0.0;
 8020590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020592:	00db      	lsls	r3, r3, #3
 8020594:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8020596:	18d1      	adds	r1, r2, r3
 8020598:	f04f 0200 	mov.w	r2, #0
 802059c:	f04f 0300 	mov.w	r3, #0
 80205a0:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 80205a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80205a6:	3301      	adds	r3, #1
 80205a8:	637b      	str	r3, [r7, #52]	; 0x34
 80205aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80205ac:	68bb      	ldr	r3, [r7, #8]
 80205ae:	429a      	cmp	r2, r3
 80205b0:	dbee      	blt.n	8020590 <xgemv_NQlWbt2i+0x20>
    }

    b_iy = 0;
 80205b2:	2300      	movs	r3, #0
 80205b4:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 6 + ia0;
 80205b6:	68bb      	ldr	r3, [r7, #8]
 80205b8:	1e5a      	subs	r2, r3, #1
 80205ba:	4613      	mov	r3, r2
 80205bc:	005b      	lsls	r3, r3, #1
 80205be:	4413      	add	r3, r2
 80205c0:	005b      	lsls	r3, r3, #1
 80205c2:	461a      	mov	r2, r3
 80205c4:	683b      	ldr	r3, [r7, #0]
 80205c6:	4413      	add	r3, r2
 80205c8:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 6) {
 80205ca:	683b      	ldr	r3, [r7, #0]
 80205cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80205ce:	e04f      	b.n	8020670 <xgemv_NQlWbt2i+0x100>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 80205d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80205d2:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 80205d4:	f04f 0200 	mov.w	r2, #0
 80205d8:	f04f 0300 	mov.w	r3, #0
 80205dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 80205e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80205e2:	68fb      	ldr	r3, [r7, #12]
 80205e4:	4413      	add	r3, r2
 80205e6:	3b01      	subs	r3, #1
 80205e8:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 80205ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80205ec:	633b      	str	r3, [r7, #48]	; 0x30
 80205ee:	e023      	b.n	8020638 <xgemv_NQlWbt2i+0xc8>
        c += A[ia - 1] * x[ix - 1];
 80205f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205f2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80205f6:	3b01      	subs	r3, #1
 80205f8:	00db      	lsls	r3, r3, #3
 80205fa:	687a      	ldr	r2, [r7, #4]
 80205fc:	4413      	add	r3, r2
 80205fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020602:	69fb      	ldr	r3, [r7, #28]
 8020604:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8020608:	3b01      	subs	r3, #1
 802060a:	00db      	lsls	r3, r3, #3
 802060c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802060e:	4413      	add	r3, r2
 8020610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020614:	f7df ffe2 	bl	80005dc <__aeabi_dmul>
 8020618:	4602      	mov	r2, r0
 802061a:	460b      	mov	r3, r1
 802061c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020620:	f7df fe26 	bl	8000270 <__adddf3>
 8020624:	4602      	mov	r2, r0
 8020626:	460b      	mov	r3, r1
 8020628:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 802062c:	69fb      	ldr	r3, [r7, #28]
 802062e:	3301      	adds	r3, #1
 8020630:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 8020632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020634:	3301      	adds	r3, #1
 8020636:	633b      	str	r3, [r7, #48]	; 0x30
 8020638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802063a:	697b      	ldr	r3, [r7, #20]
 802063c:	429a      	cmp	r2, r3
 802063e:	ddd7      	ble.n	80205f0 <xgemv_NQlWbt2i+0x80>
      }

      y[b_iy] += c;
 8020640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020642:	00db      	lsls	r3, r3, #3
 8020644:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8020646:	4413      	add	r3, r2
 8020648:	e9d3 0100 	ldrd	r0, r1, [r3]
 802064c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802064e:	00db      	lsls	r3, r3, #3
 8020650:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8020652:	18d4      	adds	r4, r2, r3
 8020654:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020658:	f7df fe0a 	bl	8000270 <__adddf3>
 802065c:	4602      	mov	r2, r0
 802065e:	460b      	mov	r3, r1
 8020660:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 8020664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020666:	3301      	adds	r3, #1
 8020668:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 6) {
 802066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802066c:	3306      	adds	r3, #6
 802066e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020672:	69bb      	ldr	r3, [r7, #24]
 8020674:	429a      	cmp	r2, r3
 8020676:	ddab      	ble.n	80205d0 <xgemv_NQlWbt2i+0x60>
    }
  }
}
 8020678:	bf00      	nop
 802067a:	373c      	adds	r7, #60	; 0x3c
 802067c:	46bd      	mov	sp, r7
 802067e:	bd90      	pop	{r4, r7, pc}

08020680 <xgemv_fRiR1I1O>:
#include "rtwtypes.h"
#include "xgemv_fRiR1I1O.h"

void xgemv_fRiR1I1O(int32_T m, int32_T n, const real_T A[9], int32_T ia0, const
                    real_T x[9], int32_T ix0, real_T y[3])
{
 8020680:	b590      	push	{r4, r7, lr}
 8020682:	b08f      	sub	sp, #60	; 0x3c
 8020684:	af00      	add	r7, sp, #0
 8020686:	60f8      	str	r0, [r7, #12]
 8020688:	60b9      	str	r1, [r7, #8]
 802068a:	607a      	str	r2, [r7, #4]
 802068c:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 802068e:	68fb      	ldr	r3, [r7, #12]
 8020690:	2b00      	cmp	r3, #0
 8020692:	d077      	beq.n	8020784 <xgemv_fRiR1I1O+0x104>
 8020694:	68bb      	ldr	r3, [r7, #8]
 8020696:	2b00      	cmp	r3, #0
 8020698:	d074      	beq.n	8020784 <xgemv_fRiR1I1O+0x104>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 802069a:	2300      	movs	r3, #0
 802069c:	637b      	str	r3, [r7, #52]	; 0x34
 802069e:	e00c      	b.n	80206ba <xgemv_fRiR1I1O+0x3a>
      y[b_iy] = 0.0;
 80206a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80206a2:	00db      	lsls	r3, r3, #3
 80206a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80206a6:	18d1      	adds	r1, r2, r3
 80206a8:	f04f 0200 	mov.w	r2, #0
 80206ac:	f04f 0300 	mov.w	r3, #0
 80206b0:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 80206b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80206b6:	3301      	adds	r3, #1
 80206b8:	637b      	str	r3, [r7, #52]	; 0x34
 80206ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80206bc:	68bb      	ldr	r3, [r7, #8]
 80206be:	429a      	cmp	r2, r3
 80206c0:	dbee      	blt.n	80206a0 <xgemv_fRiR1I1O+0x20>
    }

    b_iy = 0;
 80206c2:	2300      	movs	r3, #0
 80206c4:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 3 + ia0;
 80206c6:	68bb      	ldr	r3, [r7, #8]
 80206c8:	1e5a      	subs	r2, r3, #1
 80206ca:	4613      	mov	r3, r2
 80206cc:	005b      	lsls	r3, r3, #1
 80206ce:	4413      	add	r3, r2
 80206d0:	683a      	ldr	r2, [r7, #0]
 80206d2:	4413      	add	r3, r2
 80206d4:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 3) {
 80206d6:	683b      	ldr	r3, [r7, #0]
 80206d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80206da:	e04f      	b.n	802077c <xgemv_fRiR1I1O+0xfc>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 80206dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80206de:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 80206e0:	f04f 0200 	mov.w	r2, #0
 80206e4:	f04f 0300 	mov.w	r3, #0
 80206e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 80206ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80206ee:	68fb      	ldr	r3, [r7, #12]
 80206f0:	4413      	add	r3, r2
 80206f2:	3b01      	subs	r3, #1
 80206f4:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 80206f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206f8:	633b      	str	r3, [r7, #48]	; 0x30
 80206fa:	e023      	b.n	8020744 <xgemv_fRiR1I1O+0xc4>
        c += A[ia - 1] * x[ix - 1];
 80206fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80206fe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8020702:	3b01      	subs	r3, #1
 8020704:	00db      	lsls	r3, r3, #3
 8020706:	687a      	ldr	r2, [r7, #4]
 8020708:	4413      	add	r3, r2
 802070a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802070e:	69fb      	ldr	r3, [r7, #28]
 8020710:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8020714:	3b01      	subs	r3, #1
 8020716:	00db      	lsls	r3, r3, #3
 8020718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802071a:	4413      	add	r3, r2
 802071c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020720:	f7df ff5c 	bl	80005dc <__aeabi_dmul>
 8020724:	4602      	mov	r2, r0
 8020726:	460b      	mov	r3, r1
 8020728:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802072c:	f7df fda0 	bl	8000270 <__adddf3>
 8020730:	4602      	mov	r2, r0
 8020732:	460b      	mov	r3, r1
 8020734:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 8020738:	69fb      	ldr	r3, [r7, #28]
 802073a:	3301      	adds	r3, #1
 802073c:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 802073e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020740:	3301      	adds	r3, #1
 8020742:	633b      	str	r3, [r7, #48]	; 0x30
 8020744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020746:	697b      	ldr	r3, [r7, #20]
 8020748:	429a      	cmp	r2, r3
 802074a:	ddd7      	ble.n	80206fc <xgemv_fRiR1I1O+0x7c>
      }

      y[b_iy] += c;
 802074c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802074e:	00db      	lsls	r3, r3, #3
 8020750:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8020752:	4413      	add	r3, r2
 8020754:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802075a:	00db      	lsls	r3, r3, #3
 802075c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802075e:	18d4      	adds	r4, r2, r3
 8020760:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020764:	f7df fd84 	bl	8000270 <__adddf3>
 8020768:	4602      	mov	r2, r0
 802076a:	460b      	mov	r3, r1
 802076c:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 8020770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020772:	3301      	adds	r3, #1
 8020774:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 3) {
 8020776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020778:	3303      	adds	r3, #3
 802077a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802077c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802077e:	69bb      	ldr	r3, [r7, #24]
 8020780:	429a      	cmp	r2, r3
 8020782:	ddab      	ble.n	80206dc <xgemv_fRiR1I1O+0x5c>
    }
  }
}
 8020784:	bf00      	nop
 8020786:	373c      	adds	r7, #60	; 0x3c
 8020788:	46bd      	mov	sp, r7
 802078a:	bd90      	pop	{r4, r7, pc}

0802078c <xgerc_R09LiDgJ>:
#include "rtwtypes.h"
#include "xgerc_R09LiDgJ.h"

void xgerc_R09LiDgJ(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[18], int32_T ia0)
{
 802078c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802078e:	b091      	sub	sp, #68	; 0x44
 8020790:	af00      	add	r7, sp, #0
 8020792:	6178      	str	r0, [r7, #20]
 8020794:	6139      	str	r1, [r7, #16]
 8020796:	ed87 0b02 	vstr	d0, [r7, #8]
 802079a:	607a      	str	r2, [r7, #4]
 802079c:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 802079e:	f04f 0200 	mov.w	r2, #0
 80207a2:	f04f 0300 	mov.w	r3, #0
 80207a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80207aa:	f7e0 f97f 	bl	8000aac <__aeabi_dcmpeq>
 80207ae:	4603      	mov	r3, r0
 80207b0:	2b00      	cmp	r3, #0
 80207b2:	d000      	beq.n	80207b6 <xgerc_R09LiDgJ+0x2a>

      jy++;
      jA += 6;
    }
  }
}
 80207b4:	e069      	b.n	802088a <xgerc_R09LiDgJ+0xfe>
    jA = ia0 - 1;
 80207b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80207b8:	3b01      	subs	r3, #1
 80207ba:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 80207bc:	2300      	movs	r3, #0
 80207be:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 80207c0:	2300      	movs	r3, #0
 80207c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80207c4:	e05d      	b.n	8020882 <xgerc_R09LiDgJ+0xf6>
      if (y[jy] != 0.0) {
 80207c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80207c8:	00db      	lsls	r3, r3, #3
 80207ca:	683a      	ldr	r2, [r7, #0]
 80207cc:	4413      	add	r3, r2
 80207ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80207d2:	f04f 0200 	mov.w	r2, #0
 80207d6:	f04f 0300 	mov.w	r3, #0
 80207da:	f7e0 f967 	bl	8000aac <__aeabi_dcmpeq>
 80207de:	4603      	mov	r3, r0
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	d145      	bne.n	8020870 <xgerc_R09LiDgJ+0xe4>
        temp = y[jy] * alpha1;
 80207e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80207e6:	00db      	lsls	r3, r3, #3
 80207e8:	683a      	ldr	r2, [r7, #0]
 80207ea:	4413      	add	r3, r2
 80207ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80207f4:	f7df fef2 	bl	80005dc <__aeabi_dmul>
 80207f8:	4602      	mov	r2, r0
 80207fa:	460b      	mov	r3, r1
 80207fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 8020800:	687b      	ldr	r3, [r7, #4]
 8020802:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 8020804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020806:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 8020808:	697a      	ldr	r2, [r7, #20]
 802080a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802080c:	4413      	add	r3, r2
 802080e:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 8020810:	e02a      	b.n	8020868 <xgerc_R09LiDgJ+0xdc>
          A[ijA] += A[ix - 1] * temp;
 8020812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020814:	00db      	lsls	r3, r3, #3
 8020816:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8020818:	4413      	add	r3, r2
 802081a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802081e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020820:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8020824:	3b01      	subs	r3, #1
 8020826:	00db      	lsls	r3, r3, #3
 8020828:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802082a:	4413      	add	r3, r2
 802082c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020830:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020834:	f7df fed2 	bl	80005dc <__aeabi_dmul>
 8020838:	4602      	mov	r2, r0
 802083a:	460b      	mov	r3, r1
 802083c:	4610      	mov	r0, r2
 802083e:	4619      	mov	r1, r3
 8020840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020842:	00db      	lsls	r3, r3, #3
 8020844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8020846:	18d6      	adds	r6, r2, r3
 8020848:	4602      	mov	r2, r0
 802084a:	460b      	mov	r3, r1
 802084c:	4620      	mov	r0, r4
 802084e:	4629      	mov	r1, r5
 8020850:	f7df fd0e 	bl	8000270 <__adddf3>
 8020854:	4602      	mov	r2, r0
 8020856:	460b      	mov	r3, r1
 8020858:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 802085c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802085e:	3301      	adds	r3, #1
 8020860:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 8020862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020864:	3301      	adds	r3, #1
 8020866:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 8020868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802086a:	69fb      	ldr	r3, [r7, #28]
 802086c:	429a      	cmp	r2, r3
 802086e:	dbd0      	blt.n	8020812 <xgerc_R09LiDgJ+0x86>
      jy++;
 8020870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020872:	3301      	adds	r3, #1
 8020874:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 6;
 8020876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020878:	3306      	adds	r3, #6
 802087a:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 802087c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802087e:	3301      	adds	r3, #1
 8020880:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020882:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020884:	693b      	ldr	r3, [r7, #16]
 8020886:	429a      	cmp	r2, r3
 8020888:	db9d      	blt.n	80207c6 <xgerc_R09LiDgJ+0x3a>
}
 802088a:	bf00      	nop
 802088c:	3744      	adds	r7, #68	; 0x44
 802088e:	46bd      	mov	sp, r7
 8020890:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020892 <xgerc_tNNiazQU>:
#include "rtwtypes.h"
#include "xgerc_tNNiazQU.h"

void xgerc_tNNiazQU(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[9], int32_T ia0)
{
 8020892:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020894:	b091      	sub	sp, #68	; 0x44
 8020896:	af00      	add	r7, sp, #0
 8020898:	6178      	str	r0, [r7, #20]
 802089a:	6139      	str	r1, [r7, #16]
 802089c:	ed87 0b02 	vstr	d0, [r7, #8]
 80208a0:	607a      	str	r2, [r7, #4]
 80208a2:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 80208a4:	f04f 0200 	mov.w	r2, #0
 80208a8:	f04f 0300 	mov.w	r3, #0
 80208ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80208b0:	f7e0 f8fc 	bl	8000aac <__aeabi_dcmpeq>
 80208b4:	4603      	mov	r3, r0
 80208b6:	2b00      	cmp	r3, #0
 80208b8:	d000      	beq.n	80208bc <xgerc_tNNiazQU+0x2a>

      jy++;
      jA += 3;
    }
  }
}
 80208ba:	e069      	b.n	8020990 <xgerc_tNNiazQU+0xfe>
    jA = ia0 - 1;
 80208bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80208be:	3b01      	subs	r3, #1
 80208c0:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 80208c2:	2300      	movs	r3, #0
 80208c4:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 80208c6:	2300      	movs	r3, #0
 80208c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80208ca:	e05d      	b.n	8020988 <xgerc_tNNiazQU+0xf6>
      if (y[jy] != 0.0) {
 80208cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80208ce:	00db      	lsls	r3, r3, #3
 80208d0:	683a      	ldr	r2, [r7, #0]
 80208d2:	4413      	add	r3, r2
 80208d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80208d8:	f04f 0200 	mov.w	r2, #0
 80208dc:	f04f 0300 	mov.w	r3, #0
 80208e0:	f7e0 f8e4 	bl	8000aac <__aeabi_dcmpeq>
 80208e4:	4603      	mov	r3, r0
 80208e6:	2b00      	cmp	r3, #0
 80208e8:	d145      	bne.n	8020976 <xgerc_tNNiazQU+0xe4>
        temp = y[jy] * alpha1;
 80208ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80208ec:	00db      	lsls	r3, r3, #3
 80208ee:	683a      	ldr	r2, [r7, #0]
 80208f0:	4413      	add	r3, r2
 80208f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80208fa:	f7df fe6f 	bl	80005dc <__aeabi_dmul>
 80208fe:	4602      	mov	r2, r0
 8020900:	460b      	mov	r3, r1
 8020902:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 8020906:	687b      	ldr	r3, [r7, #4]
 8020908:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 802090a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802090c:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 802090e:	697a      	ldr	r2, [r7, #20]
 8020910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020912:	4413      	add	r3, r2
 8020914:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 8020916:	e02a      	b.n	802096e <xgerc_tNNiazQU+0xdc>
          A[ijA] += A[ix - 1] * temp;
 8020918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802091a:	00db      	lsls	r3, r3, #3
 802091c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802091e:	4413      	add	r3, r2
 8020920:	e9d3 4500 	ldrd	r4, r5, [r3]
 8020924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020926:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802092a:	3b01      	subs	r3, #1
 802092c:	00db      	lsls	r3, r3, #3
 802092e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8020930:	4413      	add	r3, r2
 8020932:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020936:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802093a:	f7df fe4f 	bl	80005dc <__aeabi_dmul>
 802093e:	4602      	mov	r2, r0
 8020940:	460b      	mov	r3, r1
 8020942:	4610      	mov	r0, r2
 8020944:	4619      	mov	r1, r3
 8020946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020948:	00db      	lsls	r3, r3, #3
 802094a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802094c:	18d6      	adds	r6, r2, r3
 802094e:	4602      	mov	r2, r0
 8020950:	460b      	mov	r3, r1
 8020952:	4620      	mov	r0, r4
 8020954:	4629      	mov	r1, r5
 8020956:	f7df fc8b 	bl	8000270 <__adddf3>
 802095a:	4602      	mov	r2, r0
 802095c:	460b      	mov	r3, r1
 802095e:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 8020962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020964:	3301      	adds	r3, #1
 8020966:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 8020968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802096a:	3301      	adds	r3, #1
 802096c:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 802096e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020970:	69fb      	ldr	r3, [r7, #28]
 8020972:	429a      	cmp	r2, r3
 8020974:	dbd0      	blt.n	8020918 <xgerc_tNNiazQU+0x86>
      jy++;
 8020976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020978:	3301      	adds	r3, #1
 802097a:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 3;
 802097c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802097e:	3303      	adds	r3, #3
 8020980:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 8020982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020984:	3301      	adds	r3, #1
 8020986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802098a:	693b      	ldr	r3, [r7, #16]
 802098c:	429a      	cmp	r2, r3
 802098e:	db9d      	blt.n	80208cc <xgerc_tNNiazQU+0x3a>
}
 8020990:	bf00      	nop
 8020992:	3744      	adds	r7, #68	; 0x44
 8020994:	46bd      	mov	sp, r7
 8020996:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020998 <xnrm2_7bm34mDQ>:
#include "rtwtypes.h"
#include "xnrm2_7bm34mDQ.h"
#include <math.h>

real_T xnrm2_7bm34mDQ(int32_T n, const real_T x[6], int32_T ix0)
{
 8020998:	b580      	push	{r7, lr}
 802099a:	b092      	sub	sp, #72	; 0x48
 802099c:	af00      	add	r7, sp, #0
 802099e:	60f8      	str	r0, [r7, #12]
 80209a0:	60b9      	str	r1, [r7, #8]
 80209a2:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 80209a4:	f04f 0200 	mov.w	r2, #0
 80209a8:	f04f 0300 	mov.w	r3, #0
 80209ac:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 80209b0:	68fb      	ldr	r3, [r7, #12]
 80209b2:	2b00      	cmp	r3, #0
 80209b4:	f340 8090 	ble.w	8020ad8 <xnrm2_7bm34mDQ+0x140>
    if (n == 1) {
 80209b8:	68fb      	ldr	r3, [r7, #12]
 80209ba:	2b01      	cmp	r3, #1
 80209bc:	d10e      	bne.n	80209dc <xnrm2_7bm34mDQ+0x44>
      y = fabs(x[ix0 - 1]);
 80209be:	687b      	ldr	r3, [r7, #4]
 80209c0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80209c4:	3b01      	subs	r3, #1
 80209c6:	00db      	lsls	r3, r3, #3
 80209c8:	68ba      	ldr	r2, [r7, #8]
 80209ca:	4413      	add	r3, r2
 80209cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209d0:	4611      	mov	r1, r2
 80209d2:	6439      	str	r1, [r7, #64]	; 0x40
 80209d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80209d8:	647b      	str	r3, [r7, #68]	; 0x44
 80209da:	e07d      	b.n	8020ad8 <xnrm2_7bm34mDQ+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 80209dc:	f04f 0200 	mov.w	r2, #0
 80209e0:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80209e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 80209e8:	687a      	ldr	r2, [r7, #4]
 80209ea:	68fb      	ldr	r3, [r7, #12]
 80209ec:	4413      	add	r3, r2
 80209ee:	3b01      	subs	r3, #1
 80209f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 80209f2:	687b      	ldr	r3, [r7, #4]
 80209f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80209f6:	e05d      	b.n	8020ab4 <xnrm2_7bm34mDQ+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 80209f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80209fa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80209fe:	3b01      	subs	r3, #1
 8020a00:	00db      	lsls	r3, r3, #3
 8020a02:	68ba      	ldr	r2, [r7, #8]
 8020a04:	4413      	add	r3, r2
 8020a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a0a:	4611      	mov	r1, r2
 8020a0c:	6239      	str	r1, [r7, #32]
 8020a0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020a12:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8020a14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8020a18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020a1c:	f7e0 f86e 	bl	8000afc <__aeabi_dcmpgt>
 8020a20:	4603      	mov	r3, r0
 8020a22:	2b00      	cmp	r3, #0
 8020a24:	d029      	beq.n	8020a7a <xnrm2_7bm34mDQ+0xe2>
          real_T t;
          t = scale / absxk;
 8020a26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020a2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8020a2e:	f7df feff 	bl	8000830 <__aeabi_ddiv>
 8020a32:	4602      	mov	r2, r0
 8020a34:	460b      	mov	r3, r1
 8020a36:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8020a3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8020a3e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8020a42:	f7df fdcb 	bl	80005dc <__aeabi_dmul>
 8020a46:	4602      	mov	r2, r0
 8020a48:	460b      	mov	r3, r1
 8020a4a:	4610      	mov	r0, r2
 8020a4c:	4619      	mov	r1, r3
 8020a4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8020a52:	f7df fdc3 	bl	80005dc <__aeabi_dmul>
 8020a56:	4602      	mov	r2, r0
 8020a58:	460b      	mov	r3, r1
 8020a5a:	4610      	mov	r0, r2
 8020a5c:	4619      	mov	r1, r3
 8020a5e:	f04f 0200 	mov.w	r2, #0
 8020a62:	4b23      	ldr	r3, [pc, #140]	; (8020af0 <xnrm2_7bm34mDQ+0x158>)
 8020a64:	f7df fc04 	bl	8000270 <__adddf3>
 8020a68:	4602      	mov	r2, r0
 8020a6a:	460b      	mov	r3, r1
 8020a6c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8020a70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020a74:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8020a78:	e019      	b.n	8020aae <xnrm2_7bm34mDQ+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8020a7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8020a7e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020a82:	f7df fed5 	bl	8000830 <__aeabi_ddiv>
 8020a86:	4602      	mov	r2, r0
 8020a88:	460b      	mov	r3, r1
 8020a8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8020a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020a92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8020a96:	f7df fda1 	bl	80005dc <__aeabi_dmul>
 8020a9a:	4602      	mov	r2, r0
 8020a9c:	460b      	mov	r3, r1
 8020a9e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8020aa2:	f7df fbe5 	bl	8000270 <__adddf3>
 8020aa6:	4602      	mov	r2, r0
 8020aa8:	460b      	mov	r3, r1
 8020aaa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8020aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020ab0:	3301      	adds	r3, #1
 8020ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020ab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ab8:	429a      	cmp	r2, r3
 8020aba:	dd9d      	ble.n	80209f8 <xnrm2_7bm34mDQ+0x60>
        }
      }

      y = scale * sqrt(y);
 8020abc:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8020ac0:	f00c fb06 	bl	802d0d0 <sqrt>
 8020ac4:	ec53 2b10 	vmov	r2, r3, d0
 8020ac8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8020acc:	f7df fd86 	bl	80005dc <__aeabi_dmul>
 8020ad0:	4602      	mov	r2, r0
 8020ad2:	460b      	mov	r3, r1
 8020ad4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8020ad8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8020adc:	ec43 2b17 	vmov	d7, r2, r3
}
 8020ae0:	eeb0 0a47 	vmov.f32	s0, s14
 8020ae4:	eef0 0a67 	vmov.f32	s1, s15
 8020ae8:	3748      	adds	r7, #72	; 0x48
 8020aea:	46bd      	mov	sp, r7
 8020aec:	bd80      	pop	{r7, pc}
 8020aee:	bf00      	nop
 8020af0:	3ff00000 	.word	0x3ff00000

08020af4 <xnrm2_Mnmxg9YT>:
#include "rtwtypes.h"
#include "xnrm2_Mnmxg9YT.h"
#include <math.h>

real_T xnrm2_Mnmxg9YT(int32_T n, const real_T x[2], int32_T ix0)
{
 8020af4:	b580      	push	{r7, lr}
 8020af6:	b092      	sub	sp, #72	; 0x48
 8020af8:	af00      	add	r7, sp, #0
 8020afa:	60f8      	str	r0, [r7, #12]
 8020afc:	60b9      	str	r1, [r7, #8]
 8020afe:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8020b00:	f04f 0200 	mov.w	r2, #0
 8020b04:	f04f 0300 	mov.w	r3, #0
 8020b08:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8020b0c:	68fb      	ldr	r3, [r7, #12]
 8020b0e:	2b00      	cmp	r3, #0
 8020b10:	f340 8090 	ble.w	8020c34 <xnrm2_Mnmxg9YT+0x140>
    if (n == 1) {
 8020b14:	68fb      	ldr	r3, [r7, #12]
 8020b16:	2b01      	cmp	r3, #1
 8020b18:	d10e      	bne.n	8020b38 <xnrm2_Mnmxg9YT+0x44>
      y = fabs(x[ix0 - 1]);
 8020b1a:	687b      	ldr	r3, [r7, #4]
 8020b1c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8020b20:	3b01      	subs	r3, #1
 8020b22:	00db      	lsls	r3, r3, #3
 8020b24:	68ba      	ldr	r2, [r7, #8]
 8020b26:	4413      	add	r3, r2
 8020b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b2c:	4611      	mov	r1, r2
 8020b2e:	6439      	str	r1, [r7, #64]	; 0x40
 8020b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020b34:	647b      	str	r3, [r7, #68]	; 0x44
 8020b36:	e07d      	b.n	8020c34 <xnrm2_Mnmxg9YT+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 8020b38:	f04f 0200 	mov.w	r2, #0
 8020b3c:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8020b40:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8020b44:	687a      	ldr	r2, [r7, #4]
 8020b46:	68fb      	ldr	r3, [r7, #12]
 8020b48:	4413      	add	r3, r2
 8020b4a:	3b01      	subs	r3, #1
 8020b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020b52:	e05d      	b.n	8020c10 <xnrm2_Mnmxg9YT+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8020b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020b56:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8020b5a:	3b01      	subs	r3, #1
 8020b5c:	00db      	lsls	r3, r3, #3
 8020b5e:	68ba      	ldr	r2, [r7, #8]
 8020b60:	4413      	add	r3, r2
 8020b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b66:	4611      	mov	r1, r2
 8020b68:	6239      	str	r1, [r7, #32]
 8020b6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020b6e:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8020b70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8020b74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020b78:	f7df ffc0 	bl	8000afc <__aeabi_dcmpgt>
 8020b7c:	4603      	mov	r3, r0
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d029      	beq.n	8020bd6 <xnrm2_Mnmxg9YT+0xe2>
          real_T t;
          t = scale / absxk;
 8020b82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020b86:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8020b8a:	f7df fe51 	bl	8000830 <__aeabi_ddiv>
 8020b8e:	4602      	mov	r2, r0
 8020b90:	460b      	mov	r3, r1
 8020b92:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8020b96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8020b9a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8020b9e:	f7df fd1d 	bl	80005dc <__aeabi_dmul>
 8020ba2:	4602      	mov	r2, r0
 8020ba4:	460b      	mov	r3, r1
 8020ba6:	4610      	mov	r0, r2
 8020ba8:	4619      	mov	r1, r3
 8020baa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8020bae:	f7df fd15 	bl	80005dc <__aeabi_dmul>
 8020bb2:	4602      	mov	r2, r0
 8020bb4:	460b      	mov	r3, r1
 8020bb6:	4610      	mov	r0, r2
 8020bb8:	4619      	mov	r1, r3
 8020bba:	f04f 0200 	mov.w	r2, #0
 8020bbe:	4b23      	ldr	r3, [pc, #140]	; (8020c4c <xnrm2_Mnmxg9YT+0x158>)
 8020bc0:	f7df fb56 	bl	8000270 <__adddf3>
 8020bc4:	4602      	mov	r2, r0
 8020bc6:	460b      	mov	r3, r1
 8020bc8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8020bcc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020bd0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8020bd4:	e019      	b.n	8020c0a <xnrm2_Mnmxg9YT+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8020bd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8020bda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020bde:	f7df fe27 	bl	8000830 <__aeabi_ddiv>
 8020be2:	4602      	mov	r2, r0
 8020be4:	460b      	mov	r3, r1
 8020be6:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8020bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020bee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8020bf2:	f7df fcf3 	bl	80005dc <__aeabi_dmul>
 8020bf6:	4602      	mov	r2, r0
 8020bf8:	460b      	mov	r3, r1
 8020bfa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8020bfe:	f7df fb37 	bl	8000270 <__adddf3>
 8020c02:	4602      	mov	r2, r0
 8020c04:	460b      	mov	r3, r1
 8020c06:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8020c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020c0c:	3301      	adds	r3, #1
 8020c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020c10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c14:	429a      	cmp	r2, r3
 8020c16:	dd9d      	ble.n	8020b54 <xnrm2_Mnmxg9YT+0x60>
        }
      }

      y = scale * sqrt(y);
 8020c18:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8020c1c:	f00c fa58 	bl	802d0d0 <sqrt>
 8020c20:	ec53 2b10 	vmov	r2, r3, d0
 8020c24:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8020c28:	f7df fcd8 	bl	80005dc <__aeabi_dmul>
 8020c2c:	4602      	mov	r2, r0
 8020c2e:	460b      	mov	r3, r1
 8020c30:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8020c34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8020c38:	ec43 2b17 	vmov	d7, r2, r3
}
 8020c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8020c40:	eef0 0a67 	vmov.f32	s1, s15
 8020c44:	3748      	adds	r7, #72	; 0x48
 8020c46:	46bd      	mov	sp, r7
 8020c48:	bd80      	pop	{r7, pc}
 8020c4a:	bf00      	nop
 8020c4c:	3ff00000 	.word	0x3ff00000

08020c50 <xnrm2_Rlk0oxWw>:
#include "rtwtypes.h"
#include "xnrm2_Rlk0oxWw.h"
#include <math.h>

real_T xnrm2_Rlk0oxWw(int32_T n, const real_T x[3], int32_T ix0)
{
 8020c50:	b580      	push	{r7, lr}
 8020c52:	b092      	sub	sp, #72	; 0x48
 8020c54:	af00      	add	r7, sp, #0
 8020c56:	60f8      	str	r0, [r7, #12]
 8020c58:	60b9      	str	r1, [r7, #8]
 8020c5a:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8020c5c:	f04f 0200 	mov.w	r2, #0
 8020c60:	f04f 0300 	mov.w	r3, #0
 8020c64:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8020c68:	68fb      	ldr	r3, [r7, #12]
 8020c6a:	2b00      	cmp	r3, #0
 8020c6c:	f340 8090 	ble.w	8020d90 <xnrm2_Rlk0oxWw+0x140>
    if (n == 1) {
 8020c70:	68fb      	ldr	r3, [r7, #12]
 8020c72:	2b01      	cmp	r3, #1
 8020c74:	d10e      	bne.n	8020c94 <xnrm2_Rlk0oxWw+0x44>
      y = fabs(x[ix0 - 1]);
 8020c76:	687b      	ldr	r3, [r7, #4]
 8020c78:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8020c7c:	3b01      	subs	r3, #1
 8020c7e:	00db      	lsls	r3, r3, #3
 8020c80:	68ba      	ldr	r2, [r7, #8]
 8020c82:	4413      	add	r3, r2
 8020c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c88:	4611      	mov	r1, r2
 8020c8a:	6439      	str	r1, [r7, #64]	; 0x40
 8020c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020c90:	647b      	str	r3, [r7, #68]	; 0x44
 8020c92:	e07d      	b.n	8020d90 <xnrm2_Rlk0oxWw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 8020c94:	f04f 0200 	mov.w	r2, #0
 8020c98:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8020c9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8020ca0:	687a      	ldr	r2, [r7, #4]
 8020ca2:	68fb      	ldr	r3, [r7, #12]
 8020ca4:	4413      	add	r3, r2
 8020ca6:	3b01      	subs	r3, #1
 8020ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 8020caa:	687b      	ldr	r3, [r7, #4]
 8020cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020cae:	e05d      	b.n	8020d6c <xnrm2_Rlk0oxWw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8020cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020cb2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8020cb6:	3b01      	subs	r3, #1
 8020cb8:	00db      	lsls	r3, r3, #3
 8020cba:	68ba      	ldr	r2, [r7, #8]
 8020cbc:	4413      	add	r3, r2
 8020cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cc2:	4611      	mov	r1, r2
 8020cc4:	6239      	str	r1, [r7, #32]
 8020cc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020cca:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8020ccc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8020cd0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020cd4:	f7df ff12 	bl	8000afc <__aeabi_dcmpgt>
 8020cd8:	4603      	mov	r3, r0
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	d029      	beq.n	8020d32 <xnrm2_Rlk0oxWw+0xe2>
          real_T t;
          t = scale / absxk;
 8020cde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020ce2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8020ce6:	f7df fda3 	bl	8000830 <__aeabi_ddiv>
 8020cea:	4602      	mov	r2, r0
 8020cec:	460b      	mov	r3, r1
 8020cee:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8020cf2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8020cf6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8020cfa:	f7df fc6f 	bl	80005dc <__aeabi_dmul>
 8020cfe:	4602      	mov	r2, r0
 8020d00:	460b      	mov	r3, r1
 8020d02:	4610      	mov	r0, r2
 8020d04:	4619      	mov	r1, r3
 8020d06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8020d0a:	f7df fc67 	bl	80005dc <__aeabi_dmul>
 8020d0e:	4602      	mov	r2, r0
 8020d10:	460b      	mov	r3, r1
 8020d12:	4610      	mov	r0, r2
 8020d14:	4619      	mov	r1, r3
 8020d16:	f04f 0200 	mov.w	r2, #0
 8020d1a:	4b23      	ldr	r3, [pc, #140]	; (8020da8 <xnrm2_Rlk0oxWw+0x158>)
 8020d1c:	f7df faa8 	bl	8000270 <__adddf3>
 8020d20:	4602      	mov	r2, r0
 8020d22:	460b      	mov	r3, r1
 8020d24:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8020d28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020d2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8020d30:	e019      	b.n	8020d66 <xnrm2_Rlk0oxWw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8020d32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8020d36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020d3a:	f7df fd79 	bl	8000830 <__aeabi_ddiv>
 8020d3e:	4602      	mov	r2, r0
 8020d40:	460b      	mov	r3, r1
 8020d42:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8020d46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020d4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8020d4e:	f7df fc45 	bl	80005dc <__aeabi_dmul>
 8020d52:	4602      	mov	r2, r0
 8020d54:	460b      	mov	r3, r1
 8020d56:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8020d5a:	f7df fa89 	bl	8000270 <__adddf3>
 8020d5e:	4602      	mov	r2, r0
 8020d60:	460b      	mov	r3, r1
 8020d62:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8020d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d68:	3301      	adds	r3, #1
 8020d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020d6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d70:	429a      	cmp	r2, r3
 8020d72:	dd9d      	ble.n	8020cb0 <xnrm2_Rlk0oxWw+0x60>
        }
      }

      y = scale * sqrt(y);
 8020d74:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8020d78:	f00c f9aa 	bl	802d0d0 <sqrt>
 8020d7c:	ec53 2b10 	vmov	r2, r3, d0
 8020d80:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8020d84:	f7df fc2a 	bl	80005dc <__aeabi_dmul>
 8020d88:	4602      	mov	r2, r0
 8020d8a:	460b      	mov	r3, r1
 8020d8c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8020d90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8020d94:	ec43 2b17 	vmov	d7, r2, r3
}
 8020d98:	eeb0 0a47 	vmov.f32	s0, s14
 8020d9c:	eef0 0a67 	vmov.f32	s1, s15
 8020da0:	3748      	adds	r7, #72	; 0x48
 8020da2:	46bd      	mov	sp, r7
 8020da4:	bd80      	pop	{r7, pc}
 8020da6:	bf00      	nop
 8020da8:	3ff00000 	.word	0x3ff00000

08020dac <xnrm2_nLdASVZH>:
#include "rtwtypes.h"
#include "xnrm2_nLdASVZH.h"
#include <math.h>

real_T xnrm2_nLdASVZH(int32_T n, const real_T x[18], int32_T ix0)
{
 8020dac:	b580      	push	{r7, lr}
 8020dae:	b092      	sub	sp, #72	; 0x48
 8020db0:	af00      	add	r7, sp, #0
 8020db2:	60f8      	str	r0, [r7, #12]
 8020db4:	60b9      	str	r1, [r7, #8]
 8020db6:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8020db8:	f04f 0200 	mov.w	r2, #0
 8020dbc:	f04f 0300 	mov.w	r3, #0
 8020dc0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8020dc4:	68fb      	ldr	r3, [r7, #12]
 8020dc6:	2b00      	cmp	r3, #0
 8020dc8:	f340 8090 	ble.w	8020eec <xnrm2_nLdASVZH+0x140>
    if (n == 1) {
 8020dcc:	68fb      	ldr	r3, [r7, #12]
 8020dce:	2b01      	cmp	r3, #1
 8020dd0:	d10e      	bne.n	8020df0 <xnrm2_nLdASVZH+0x44>
      y = fabs(x[ix0 - 1]);
 8020dd2:	687b      	ldr	r3, [r7, #4]
 8020dd4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8020dd8:	3b01      	subs	r3, #1
 8020dda:	00db      	lsls	r3, r3, #3
 8020ddc:	68ba      	ldr	r2, [r7, #8]
 8020dde:	4413      	add	r3, r2
 8020de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020de4:	4611      	mov	r1, r2
 8020de6:	6439      	str	r1, [r7, #64]	; 0x40
 8020de8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020dec:	647b      	str	r3, [r7, #68]	; 0x44
 8020dee:	e07d      	b.n	8020eec <xnrm2_nLdASVZH+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 8020df0:	f04f 0200 	mov.w	r2, #0
 8020df4:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8020df8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8020dfc:	687a      	ldr	r2, [r7, #4]
 8020dfe:	68fb      	ldr	r3, [r7, #12]
 8020e00:	4413      	add	r3, r2
 8020e02:	3b01      	subs	r3, #1
 8020e04:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 8020e06:	687b      	ldr	r3, [r7, #4]
 8020e08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020e0a:	e05d      	b.n	8020ec8 <xnrm2_nLdASVZH+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8020e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020e0e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8020e12:	3b01      	subs	r3, #1
 8020e14:	00db      	lsls	r3, r3, #3
 8020e16:	68ba      	ldr	r2, [r7, #8]
 8020e18:	4413      	add	r3, r2
 8020e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e1e:	4611      	mov	r1, r2
 8020e20:	6239      	str	r1, [r7, #32]
 8020e22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020e26:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8020e28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8020e2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020e30:	f7df fe64 	bl	8000afc <__aeabi_dcmpgt>
 8020e34:	4603      	mov	r3, r0
 8020e36:	2b00      	cmp	r3, #0
 8020e38:	d029      	beq.n	8020e8e <xnrm2_nLdASVZH+0xe2>
          real_T t;
          t = scale / absxk;
 8020e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020e3e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8020e42:	f7df fcf5 	bl	8000830 <__aeabi_ddiv>
 8020e46:	4602      	mov	r2, r0
 8020e48:	460b      	mov	r3, r1
 8020e4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8020e4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8020e52:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8020e56:	f7df fbc1 	bl	80005dc <__aeabi_dmul>
 8020e5a:	4602      	mov	r2, r0
 8020e5c:	460b      	mov	r3, r1
 8020e5e:	4610      	mov	r0, r2
 8020e60:	4619      	mov	r1, r3
 8020e62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8020e66:	f7df fbb9 	bl	80005dc <__aeabi_dmul>
 8020e6a:	4602      	mov	r2, r0
 8020e6c:	460b      	mov	r3, r1
 8020e6e:	4610      	mov	r0, r2
 8020e70:	4619      	mov	r1, r3
 8020e72:	f04f 0200 	mov.w	r2, #0
 8020e76:	4b23      	ldr	r3, [pc, #140]	; (8020f04 <xnrm2_nLdASVZH+0x158>)
 8020e78:	f7df f9fa 	bl	8000270 <__adddf3>
 8020e7c:	4602      	mov	r2, r0
 8020e7e:	460b      	mov	r3, r1
 8020e80:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8020e84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020e88:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8020e8c:	e019      	b.n	8020ec2 <xnrm2_nLdASVZH+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8020e8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8020e92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020e96:	f7df fccb 	bl	8000830 <__aeabi_ddiv>
 8020e9a:	4602      	mov	r2, r0
 8020e9c:	460b      	mov	r3, r1
 8020e9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8020ea2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020ea6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8020eaa:	f7df fb97 	bl	80005dc <__aeabi_dmul>
 8020eae:	4602      	mov	r2, r0
 8020eb0:	460b      	mov	r3, r1
 8020eb2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8020eb6:	f7df f9db 	bl	8000270 <__adddf3>
 8020eba:	4602      	mov	r2, r0
 8020ebc:	460b      	mov	r3, r1
 8020ebe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8020ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020ec4:	3301      	adds	r3, #1
 8020ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020ec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ecc:	429a      	cmp	r2, r3
 8020ece:	dd9d      	ble.n	8020e0c <xnrm2_nLdASVZH+0x60>
        }
      }

      y = scale * sqrt(y);
 8020ed0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8020ed4:	f00c f8fc 	bl	802d0d0 <sqrt>
 8020ed8:	ec53 2b10 	vmov	r2, r3, d0
 8020edc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8020ee0:	f7df fb7c 	bl	80005dc <__aeabi_dmul>
 8020ee4:	4602      	mov	r2, r0
 8020ee6:	460b      	mov	r3, r1
 8020ee8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8020eec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8020ef0:	ec43 2b17 	vmov	d7, r2, r3
}
 8020ef4:	eeb0 0a47 	vmov.f32	s0, s14
 8020ef8:	eef0 0a67 	vmov.f32	s1, s15
 8020efc:	3748      	adds	r7, #72	; 0x48
 8020efe:	46bd      	mov	sp, r7
 8020f00:	bd80      	pop	{r7, pc}
 8020f02:	bf00      	nop
 8020f04:	3ff00000 	.word	0x3ff00000

08020f08 <xnrm2_xDOlDEtw>:
#include "rtwtypes.h"
#include "xnrm2_xDOlDEtw.h"
#include <math.h>

real_T xnrm2_xDOlDEtw(int32_T n, const real_T x[9], int32_T ix0)
{
 8020f08:	b580      	push	{r7, lr}
 8020f0a:	b092      	sub	sp, #72	; 0x48
 8020f0c:	af00      	add	r7, sp, #0
 8020f0e:	60f8      	str	r0, [r7, #12]
 8020f10:	60b9      	str	r1, [r7, #8]
 8020f12:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8020f14:	f04f 0200 	mov.w	r2, #0
 8020f18:	f04f 0300 	mov.w	r3, #0
 8020f1c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8020f20:	68fb      	ldr	r3, [r7, #12]
 8020f22:	2b00      	cmp	r3, #0
 8020f24:	f340 8090 	ble.w	8021048 <xnrm2_xDOlDEtw+0x140>
    if (n == 1) {
 8020f28:	68fb      	ldr	r3, [r7, #12]
 8020f2a:	2b01      	cmp	r3, #1
 8020f2c:	d10e      	bne.n	8020f4c <xnrm2_xDOlDEtw+0x44>
      y = fabs(x[ix0 - 1]);
 8020f2e:	687b      	ldr	r3, [r7, #4]
 8020f30:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8020f34:	3b01      	subs	r3, #1
 8020f36:	00db      	lsls	r3, r3, #3
 8020f38:	68ba      	ldr	r2, [r7, #8]
 8020f3a:	4413      	add	r3, r2
 8020f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f40:	4611      	mov	r1, r2
 8020f42:	6439      	str	r1, [r7, #64]	; 0x40
 8020f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020f48:	647b      	str	r3, [r7, #68]	; 0x44
 8020f4a:	e07d      	b.n	8021048 <xnrm2_xDOlDEtw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 8020f4c:	f04f 0200 	mov.w	r2, #0
 8020f50:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8020f54:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8020f58:	687a      	ldr	r2, [r7, #4]
 8020f5a:	68fb      	ldr	r3, [r7, #12]
 8020f5c:	4413      	add	r3, r2
 8020f5e:	3b01      	subs	r3, #1
 8020f60:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 8020f62:	687b      	ldr	r3, [r7, #4]
 8020f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020f66:	e05d      	b.n	8021024 <xnrm2_xDOlDEtw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8020f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020f6a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8020f6e:	3b01      	subs	r3, #1
 8020f70:	00db      	lsls	r3, r3, #3
 8020f72:	68ba      	ldr	r2, [r7, #8]
 8020f74:	4413      	add	r3, r2
 8020f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f7a:	4611      	mov	r1, r2
 8020f7c:	6239      	str	r1, [r7, #32]
 8020f7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020f82:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8020f84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8020f88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020f8c:	f7df fdb6 	bl	8000afc <__aeabi_dcmpgt>
 8020f90:	4603      	mov	r3, r0
 8020f92:	2b00      	cmp	r3, #0
 8020f94:	d029      	beq.n	8020fea <xnrm2_xDOlDEtw+0xe2>
          real_T t;
          t = scale / absxk;
 8020f96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020f9a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8020f9e:	f7df fc47 	bl	8000830 <__aeabi_ddiv>
 8020fa2:	4602      	mov	r2, r0
 8020fa4:	460b      	mov	r3, r1
 8020fa6:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8020faa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8020fae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8020fb2:	f7df fb13 	bl	80005dc <__aeabi_dmul>
 8020fb6:	4602      	mov	r2, r0
 8020fb8:	460b      	mov	r3, r1
 8020fba:	4610      	mov	r0, r2
 8020fbc:	4619      	mov	r1, r3
 8020fbe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8020fc2:	f7df fb0b 	bl	80005dc <__aeabi_dmul>
 8020fc6:	4602      	mov	r2, r0
 8020fc8:	460b      	mov	r3, r1
 8020fca:	4610      	mov	r0, r2
 8020fcc:	4619      	mov	r1, r3
 8020fce:	f04f 0200 	mov.w	r2, #0
 8020fd2:	4b23      	ldr	r3, [pc, #140]	; (8021060 <xnrm2_xDOlDEtw+0x158>)
 8020fd4:	f7df f94c 	bl	8000270 <__adddf3>
 8020fd8:	4602      	mov	r2, r0
 8020fda:	460b      	mov	r3, r1
 8020fdc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8020fe0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020fe4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8020fe8:	e019      	b.n	802101e <xnrm2_xDOlDEtw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8020fea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8020fee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020ff2:	f7df fc1d 	bl	8000830 <__aeabi_ddiv>
 8020ff6:	4602      	mov	r2, r0
 8020ff8:	460b      	mov	r3, r1
 8020ffa:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8020ffe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8021002:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8021006:	f7df fae9 	bl	80005dc <__aeabi_dmul>
 802100a:	4602      	mov	r2, r0
 802100c:	460b      	mov	r3, r1
 802100e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8021012:	f7df f92d 	bl	8000270 <__adddf3>
 8021016:	4602      	mov	r2, r0
 8021018:	460b      	mov	r3, r1
 802101a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 802101e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021020:	3301      	adds	r3, #1
 8021022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021024:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021028:	429a      	cmp	r2, r3
 802102a:	dd9d      	ble.n	8020f68 <xnrm2_xDOlDEtw+0x60>
        }
      }

      y = scale * sqrt(y);
 802102c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8021030:	f00c f84e 	bl	802d0d0 <sqrt>
 8021034:	ec53 2b10 	vmov	r2, r3, d0
 8021038:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 802103c:	f7df face 	bl	80005dc <__aeabi_dmul>
 8021040:	4602      	mov	r2, r0
 8021042:	460b      	mov	r3, r1
 8021044:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8021048:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802104c:	ec43 2b17 	vmov	d7, r2, r3
}
 8021050:	eeb0 0a47 	vmov.f32	s0, s14
 8021054:	eef0 0a67 	vmov.f32	s1, s15
 8021058:	3748      	adds	r7, #72	; 0x48
 802105a:	46bd      	mov	sp, r7
 802105c:	bd80      	pop	{r7, pc}
 802105e:	bf00      	nop
 8021060:	3ff00000 	.word	0x3ff00000

08021064 <xrot_i7f01JoJ>:
#include "rtwtypes.h"
#include "xrot_i7f01JoJ.h"

void xrot_i7f01JoJ(real_T x[9], int32_T ix0, int32_T iy0, real_T c, real_T s)
{
 8021064:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8021068:	b08c      	sub	sp, #48	; 0x30
 802106a:	af00      	add	r7, sp, #0
 802106c:	61f8      	str	r0, [r7, #28]
 802106e:	61b9      	str	r1, [r7, #24]
 8021070:	617a      	str	r2, [r7, #20]
 8021072:	ed87 0b02 	vstr	d0, [r7, #8]
 8021076:	ed87 1b00 	vstr	d1, [r7]
  real_T temp;
  real_T temp_tmp;
  temp = x[iy0 - 1];
 802107a:	697b      	ldr	r3, [r7, #20]
 802107c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8021080:	3b01      	subs	r3, #1
 8021082:	00db      	lsls	r3, r3, #3
 8021084:	69fa      	ldr	r2, [r7, #28]
 8021086:	4413      	add	r3, r2
 8021088:	e9d3 2300 	ldrd	r2, r3, [r3]
 802108c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 - 1];
 8021090:	69bb      	ldr	r3, [r7, #24]
 8021092:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8021096:	3b01      	subs	r3, #1
 8021098:	00db      	lsls	r3, r3, #3
 802109a:	69fa      	ldr	r2, [r7, #28]
 802109c:	4413      	add	r3, r2
 802109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 - 1] = temp * c - temp_tmp * s;
 80210a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80210aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80210ae:	f7df fa95 	bl	80005dc <__aeabi_dmul>
 80210b2:	4602      	mov	r2, r0
 80210b4:	460b      	mov	r3, r1
 80210b6:	4690      	mov	r8, r2
 80210b8:	4699      	mov	r9, r3
 80210ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80210be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80210c2:	f7df fa8b 	bl	80005dc <__aeabi_dmul>
 80210c6:	4602      	mov	r2, r0
 80210c8:	460b      	mov	r3, r1
 80210ca:	4610      	mov	r0, r2
 80210cc:	4619      	mov	r1, r3
 80210ce:	697b      	ldr	r3, [r7, #20]
 80210d0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80210d4:	3b01      	subs	r3, #1
 80210d6:	00db      	lsls	r3, r3, #3
 80210d8:	69fa      	ldr	r2, [r7, #28]
 80210da:	18d4      	adds	r4, r2, r3
 80210dc:	4602      	mov	r2, r0
 80210de:	460b      	mov	r3, r1
 80210e0:	4640      	mov	r0, r8
 80210e2:	4649      	mov	r1, r9
 80210e4:	f7df f8c2 	bl	800026c <__aeabi_dsub>
 80210e8:	4602      	mov	r2, r0
 80210ea:	460b      	mov	r3, r1
 80210ec:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 - 1] = temp_tmp * c + temp * s;
 80210f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80210f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80210f8:	f7df fa70 	bl	80005dc <__aeabi_dmul>
 80210fc:	4602      	mov	r2, r0
 80210fe:	460b      	mov	r3, r1
 8021100:	4690      	mov	r8, r2
 8021102:	4699      	mov	r9, r3
 8021104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021108:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802110c:	f7df fa66 	bl	80005dc <__aeabi_dmul>
 8021110:	4602      	mov	r2, r0
 8021112:	460b      	mov	r3, r1
 8021114:	4610      	mov	r0, r2
 8021116:	4619      	mov	r1, r3
 8021118:	69bb      	ldr	r3, [r7, #24]
 802111a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802111e:	3b01      	subs	r3, #1
 8021120:	00db      	lsls	r3, r3, #3
 8021122:	69fa      	ldr	r2, [r7, #28]
 8021124:	18d4      	adds	r4, r2, r3
 8021126:	4602      	mov	r2, r0
 8021128:	460b      	mov	r3, r1
 802112a:	4640      	mov	r0, r8
 802112c:	4649      	mov	r1, r9
 802112e:	f7df f89f 	bl	8000270 <__adddf3>
 8021132:	4602      	mov	r2, r0
 8021134:	460b      	mov	r3, r1
 8021136:	e9c4 2300 	strd	r2, r3, [r4]
  temp = x[ix0] * c + x[iy0] * s;
 802113a:	69bb      	ldr	r3, [r7, #24]
 802113c:	00db      	lsls	r3, r3, #3
 802113e:	69fa      	ldr	r2, [r7, #28]
 8021140:	4413      	add	r3, r2
 8021142:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021146:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802114a:	f7df fa47 	bl	80005dc <__aeabi_dmul>
 802114e:	4602      	mov	r2, r0
 8021150:	460b      	mov	r3, r1
 8021152:	4614      	mov	r4, r2
 8021154:	461d      	mov	r5, r3
 8021156:	697b      	ldr	r3, [r7, #20]
 8021158:	00db      	lsls	r3, r3, #3
 802115a:	69fa      	ldr	r2, [r7, #28]
 802115c:	4413      	add	r3, r2
 802115e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021166:	f7df fa39 	bl	80005dc <__aeabi_dmul>
 802116a:	4602      	mov	r2, r0
 802116c:	460b      	mov	r3, r1
 802116e:	4620      	mov	r0, r4
 8021170:	4629      	mov	r1, r5
 8021172:	f7df f87d 	bl	8000270 <__adddf3>
 8021176:	4602      	mov	r2, r0
 8021178:	460b      	mov	r3, r1
 802117a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  x[iy0] = x[iy0] * c - x[ix0] * s;
 802117e:	697b      	ldr	r3, [r7, #20]
 8021180:	00db      	lsls	r3, r3, #3
 8021182:	69fa      	ldr	r2, [r7, #28]
 8021184:	4413      	add	r3, r2
 8021186:	e9d3 0100 	ldrd	r0, r1, [r3]
 802118a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802118e:	f7df fa25 	bl	80005dc <__aeabi_dmul>
 8021192:	4602      	mov	r2, r0
 8021194:	460b      	mov	r3, r1
 8021196:	4690      	mov	r8, r2
 8021198:	4699      	mov	r9, r3
 802119a:	69bb      	ldr	r3, [r7, #24]
 802119c:	00db      	lsls	r3, r3, #3
 802119e:	69fa      	ldr	r2, [r7, #28]
 80211a0:	4413      	add	r3, r2
 80211a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80211a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80211aa:	f7df fa17 	bl	80005dc <__aeabi_dmul>
 80211ae:	4602      	mov	r2, r0
 80211b0:	460b      	mov	r3, r1
 80211b2:	4610      	mov	r0, r2
 80211b4:	4619      	mov	r1, r3
 80211b6:	697b      	ldr	r3, [r7, #20]
 80211b8:	00db      	lsls	r3, r3, #3
 80211ba:	69fa      	ldr	r2, [r7, #28]
 80211bc:	18d4      	adds	r4, r2, r3
 80211be:	4602      	mov	r2, r0
 80211c0:	460b      	mov	r3, r1
 80211c2:	4640      	mov	r0, r8
 80211c4:	4649      	mov	r1, r9
 80211c6:	f7df f851 	bl	800026c <__aeabi_dsub>
 80211ca:	4602      	mov	r2, r0
 80211cc:	460b      	mov	r3, r1
 80211ce:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0] = temp;
 80211d2:	69bb      	ldr	r3, [r7, #24]
 80211d4:	00db      	lsls	r3, r3, #3
 80211d6:	69fa      	ldr	r2, [r7, #28]
 80211d8:	18d1      	adds	r1, r2, r3
 80211da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80211de:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[iy0 + 1];
 80211e2:	697b      	ldr	r3, [r7, #20]
 80211e4:	3301      	adds	r3, #1
 80211e6:	00db      	lsls	r3, r3, #3
 80211e8:	69fa      	ldr	r2, [r7, #28]
 80211ea:	4413      	add	r3, r2
 80211ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 + 1];
 80211f4:	69bb      	ldr	r3, [r7, #24]
 80211f6:	3301      	adds	r3, #1
 80211f8:	00db      	lsls	r3, r3, #3
 80211fa:	69fa      	ldr	r2, [r7, #28]
 80211fc:	4413      	add	r3, r2
 80211fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021202:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 + 1] = temp * c - temp_tmp * s;
 8021206:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802120a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802120e:	f7df f9e5 	bl	80005dc <__aeabi_dmul>
 8021212:	4602      	mov	r2, r0
 8021214:	460b      	mov	r3, r1
 8021216:	4690      	mov	r8, r2
 8021218:	4699      	mov	r9, r3
 802121a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802121e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021222:	f7df f9db 	bl	80005dc <__aeabi_dmul>
 8021226:	4602      	mov	r2, r0
 8021228:	460b      	mov	r3, r1
 802122a:	4610      	mov	r0, r2
 802122c:	4619      	mov	r1, r3
 802122e:	697b      	ldr	r3, [r7, #20]
 8021230:	3301      	adds	r3, #1
 8021232:	00db      	lsls	r3, r3, #3
 8021234:	69fa      	ldr	r2, [r7, #28]
 8021236:	18d4      	adds	r4, r2, r3
 8021238:	4602      	mov	r2, r0
 802123a:	460b      	mov	r3, r1
 802123c:	4640      	mov	r0, r8
 802123e:	4649      	mov	r1, r9
 8021240:	f7df f814 	bl	800026c <__aeabi_dsub>
 8021244:	4602      	mov	r2, r0
 8021246:	460b      	mov	r3, r1
 8021248:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 + 1] = temp_tmp * c + temp * s;
 802124c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021250:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021254:	f7df f9c2 	bl	80005dc <__aeabi_dmul>
 8021258:	4602      	mov	r2, r0
 802125a:	460b      	mov	r3, r1
 802125c:	4690      	mov	r8, r2
 802125e:	4699      	mov	r9, r3
 8021260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021264:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8021268:	f7df f9b8 	bl	80005dc <__aeabi_dmul>
 802126c:	4602      	mov	r2, r0
 802126e:	460b      	mov	r3, r1
 8021270:	4610      	mov	r0, r2
 8021272:	4619      	mov	r1, r3
 8021274:	69bb      	ldr	r3, [r7, #24]
 8021276:	3301      	adds	r3, #1
 8021278:	00db      	lsls	r3, r3, #3
 802127a:	69fa      	ldr	r2, [r7, #28]
 802127c:	18d4      	adds	r4, r2, r3
 802127e:	4602      	mov	r2, r0
 8021280:	460b      	mov	r3, r1
 8021282:	4640      	mov	r0, r8
 8021284:	4649      	mov	r1, r9
 8021286:	f7de fff3 	bl	8000270 <__adddf3>
 802128a:	4602      	mov	r2, r0
 802128c:	460b      	mov	r3, r1
 802128e:	e9c4 2300 	strd	r2, r3, [r4]
}
 8021292:	bf00      	nop
 8021294:	3730      	adds	r7, #48	; 0x30
 8021296:	46bd      	mov	sp, r7
 8021298:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0802129c <xrotg_XzIjz1eG>:
#include "rtwtypes.h"
#include "xrotg_XzIjz1eG.h"
#include <math.h>

void xrotg_XzIjz1eG(real_T *a, real_T *b, real_T *c, real_T *s)
{
 802129c:	b5b0      	push	{r4, r5, r7, lr}
 802129e:	b090      	sub	sp, #64	; 0x40
 80212a0:	af00      	add	r7, sp, #0
 80212a2:	60f8      	str	r0, [r7, #12]
 80212a4:	60b9      	str	r1, [r7, #8]
 80212a6:	607a      	str	r2, [r7, #4]
 80212a8:	603b      	str	r3, [r7, #0]
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
 80212aa:	68bb      	ldr	r3, [r7, #8]
 80212ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  absa = fabs(*a);
 80212b4:	68fb      	ldr	r3, [r7, #12]
 80212b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212ba:	4611      	mov	r1, r2
 80212bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80212be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80212c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  absb = fabs(*b);
 80212c4:	68bb      	ldr	r3, [r7, #8]
 80212c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212ca:	4611      	mov	r1, r2
 80212cc:	6239      	str	r1, [r7, #32]
 80212ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80212d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (absa > absb) {
 80212d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80212d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80212dc:	f7df fc0e 	bl	8000afc <__aeabi_dcmpgt>
 80212e0:	4603      	mov	r3, r0
 80212e2:	2b00      	cmp	r3, #0
 80212e4:	d004      	beq.n	80212f0 <xrotg_XzIjz1eG+0x54>
    roe = *a;
 80212e6:	68fb      	ldr	r3, [r7, #12]
 80212e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  scale = absa + absb;
 80212f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80212f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80212f8:	f7de ffba 	bl	8000270 <__adddf3>
 80212fc:	4602      	mov	r2, r0
 80212fe:	460b      	mov	r3, r1
 8021300:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  if (scale == 0.0) {
 8021304:	f04f 0200 	mov.w	r2, #0
 8021308:	f04f 0300 	mov.w	r3, #0
 802130c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8021310:	f7df fbcc 	bl	8000aac <__aeabi_dcmpeq>
 8021314:	4603      	mov	r3, r0
 8021316:	2b00      	cmp	r3, #0
 8021318:	d01b      	beq.n	8021352 <xrotg_XzIjz1eG+0xb6>
    *s = 0.0;
 802131a:	6839      	ldr	r1, [r7, #0]
 802131c:	f04f 0200 	mov.w	r2, #0
 8021320:	f04f 0300 	mov.w	r3, #0
 8021324:	e9c1 2300 	strd	r2, r3, [r1]
    *c = 1.0;
 8021328:	6879      	ldr	r1, [r7, #4]
 802132a:	f04f 0200 	mov.w	r2, #0
 802132e:	4b59      	ldr	r3, [pc, #356]	; (8021494 <xrotg_XzIjz1eG+0x1f8>)
 8021330:	e9c1 2300 	strd	r2, r3, [r1]
    *a = 0.0;
 8021334:	68f9      	ldr	r1, [r7, #12]
 8021336:	f04f 0200 	mov.w	r2, #0
 802133a:	f04f 0300 	mov.w	r3, #0
 802133e:	e9c1 2300 	strd	r2, r3, [r1]
    *b = 0.0;
 8021342:	68b9      	ldr	r1, [r7, #8]
 8021344:	f04f 0200 	mov.w	r2, #0
 8021348:	f04f 0300 	mov.w	r3, #0
 802134c:	e9c1 2300 	strd	r2, r3, [r1]
      *b = 1.0;
    }

    *a = scale;
  }
}
 8021350:	e09b      	b.n	802148a <xrotg_XzIjz1eG+0x1ee>
    ads = absa / scale;
 8021352:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8021356:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802135a:	f7df fa69 	bl	8000830 <__aeabi_ddiv>
 802135e:	4602      	mov	r2, r0
 8021360:	460b      	mov	r3, r1
 8021362:	e9c7 2306 	strd	r2, r3, [r7, #24]
    bds = absb / scale;
 8021366:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 802136a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802136e:	f7df fa5f 	bl	8000830 <__aeabi_ddiv>
 8021372:	4602      	mov	r2, r0
 8021374:	460b      	mov	r3, r1
 8021376:	e9c7 2304 	strd	r2, r3, [r7, #16]
    scale *= sqrt(ads * ads + bds * bds);
 802137a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802137e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8021382:	f7df f92b 	bl	80005dc <__aeabi_dmul>
 8021386:	4602      	mov	r2, r0
 8021388:	460b      	mov	r3, r1
 802138a:	4614      	mov	r4, r2
 802138c:	461d      	mov	r5, r3
 802138e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021392:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8021396:	f7df f921 	bl	80005dc <__aeabi_dmul>
 802139a:	4602      	mov	r2, r0
 802139c:	460b      	mov	r3, r1
 802139e:	4620      	mov	r0, r4
 80213a0:	4629      	mov	r1, r5
 80213a2:	f7de ff65 	bl	8000270 <__adddf3>
 80213a6:	4602      	mov	r2, r0
 80213a8:	460b      	mov	r3, r1
 80213aa:	ec43 2b17 	vmov	d7, r2, r3
 80213ae:	eeb0 0a47 	vmov.f32	s0, s14
 80213b2:	eef0 0a67 	vmov.f32	s1, s15
 80213b6:	f00b fe8b 	bl	802d0d0 <sqrt>
 80213ba:	ec53 2b10 	vmov	r2, r3, d0
 80213be:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80213c2:	f7df f90b 	bl	80005dc <__aeabi_dmul>
 80213c6:	4602      	mov	r2, r0
 80213c8:	460b      	mov	r3, r1
 80213ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (roe < 0.0) {
 80213ce:	f04f 0200 	mov.w	r2, #0
 80213d2:	f04f 0300 	mov.w	r3, #0
 80213d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80213da:	f7df fb71 	bl	8000ac0 <__aeabi_dcmplt>
 80213de:	4603      	mov	r3, r0
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	d005      	beq.n	80213f0 <xrotg_XzIjz1eG+0x154>
      scale = -scale;
 80213e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213e6:	633b      	str	r3, [r7, #48]	; 0x30
 80213e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80213ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80213ee:	637b      	str	r3, [r7, #52]	; 0x34
    *c = *a / scale;
 80213f0:	68fb      	ldr	r3, [r7, #12]
 80213f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80213f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80213fa:	f7df fa19 	bl	8000830 <__aeabi_ddiv>
 80213fe:	4602      	mov	r2, r0
 8021400:	460b      	mov	r3, r1
 8021402:	6879      	ldr	r1, [r7, #4]
 8021404:	e9c1 2300 	strd	r2, r3, [r1]
    *s = *b / scale;
 8021408:	68bb      	ldr	r3, [r7, #8]
 802140a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802140e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8021412:	f7df fa0d 	bl	8000830 <__aeabi_ddiv>
 8021416:	4602      	mov	r2, r0
 8021418:	460b      	mov	r3, r1
 802141a:	6839      	ldr	r1, [r7, #0]
 802141c:	e9c1 2300 	strd	r2, r3, [r1]
    if (absa > absb) {
 8021420:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8021424:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8021428:	f7df fb68 	bl	8000afc <__aeabi_dcmpgt>
 802142c:	4603      	mov	r3, r0
 802142e:	2b00      	cmp	r3, #0
 8021430:	d006      	beq.n	8021440 <xrotg_XzIjz1eG+0x1a4>
      *b = *s;
 8021432:	683b      	ldr	r3, [r7, #0]
 8021434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021438:	68b9      	ldr	r1, [r7, #8]
 802143a:	e9c1 2300 	strd	r2, r3, [r1]
 802143e:	e01f      	b.n	8021480 <xrotg_XzIjz1eG+0x1e4>
    } else if (*c != 0.0) {
 8021440:	687b      	ldr	r3, [r7, #4]
 8021442:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021446:	f04f 0200 	mov.w	r2, #0
 802144a:	f04f 0300 	mov.w	r3, #0
 802144e:	f7df fb2d 	bl	8000aac <__aeabi_dcmpeq>
 8021452:	4603      	mov	r3, r0
 8021454:	2b00      	cmp	r3, #0
 8021456:	d10d      	bne.n	8021474 <xrotg_XzIjz1eG+0x1d8>
      *b = 1.0 / *c;
 8021458:	687b      	ldr	r3, [r7, #4]
 802145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802145e:	f04f 0000 	mov.w	r0, #0
 8021462:	490c      	ldr	r1, [pc, #48]	; (8021494 <xrotg_XzIjz1eG+0x1f8>)
 8021464:	f7df f9e4 	bl	8000830 <__aeabi_ddiv>
 8021468:	4602      	mov	r2, r0
 802146a:	460b      	mov	r3, r1
 802146c:	68b9      	ldr	r1, [r7, #8]
 802146e:	e9c1 2300 	strd	r2, r3, [r1]
 8021472:	e005      	b.n	8021480 <xrotg_XzIjz1eG+0x1e4>
      *b = 1.0;
 8021474:	68b9      	ldr	r1, [r7, #8]
 8021476:	f04f 0200 	mov.w	r2, #0
 802147a:	4b06      	ldr	r3, [pc, #24]	; (8021494 <xrotg_XzIjz1eG+0x1f8>)
 802147c:	e9c1 2300 	strd	r2, r3, [r1]
    *a = scale;
 8021480:	68f9      	ldr	r1, [r7, #12]
 8021482:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8021486:	e9c1 2300 	strd	r2, r3, [r1]
}
 802148a:	bf00      	nop
 802148c:	3740      	adds	r7, #64	; 0x40
 802148e:	46bd      	mov	sp, r7
 8021490:	bdb0      	pop	{r4, r5, r7, pc}
 8021492:	bf00      	nop
 8021494:	3ff00000 	.word	0x3ff00000

08021498 <xscal_59GtRAwv>:
#include "rtwtypes.h"
#include "xscal_59GtRAwv.h"

void xscal_59GtRAwv(int32_T n, real_T a, real_T x[9], int32_T ix0)
{
 8021498:	b590      	push	{r4, r7, lr}
 802149a:	b089      	sub	sp, #36	; 0x24
 802149c:	af00      	add	r7, sp, #0
 802149e:	6178      	str	r0, [r7, #20]
 80214a0:	ed87 0b02 	vstr	d0, [r7, #8]
 80214a4:	6139      	str	r1, [r7, #16]
 80214a6:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 80214a8:	687a      	ldr	r2, [r7, #4]
 80214aa:	697b      	ldr	r3, [r7, #20]
 80214ac:	4413      	add	r3, r2
 80214ae:	3b01      	subs	r3, #1
 80214b0:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	61fb      	str	r3, [r7, #28]
 80214b6:	e01a      	b.n	80214ee <xscal_59GtRAwv+0x56>
    x[k - 1] *= a;
 80214b8:	69fb      	ldr	r3, [r7, #28]
 80214ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80214be:	3b01      	subs	r3, #1
 80214c0:	00db      	lsls	r3, r3, #3
 80214c2:	693a      	ldr	r2, [r7, #16]
 80214c4:	4413      	add	r3, r2
 80214c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80214ca:	69fb      	ldr	r3, [r7, #28]
 80214cc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80214d0:	3b01      	subs	r3, #1
 80214d2:	00db      	lsls	r3, r3, #3
 80214d4:	693a      	ldr	r2, [r7, #16]
 80214d6:	18d4      	adds	r4, r2, r3
 80214d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80214dc:	f7df f87e 	bl	80005dc <__aeabi_dmul>
 80214e0:	4602      	mov	r2, r0
 80214e2:	460b      	mov	r3, r1
 80214e4:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 80214e8:	69fb      	ldr	r3, [r7, #28]
 80214ea:	3301      	adds	r3, #1
 80214ec:	61fb      	str	r3, [r7, #28]
 80214ee:	69fa      	ldr	r2, [r7, #28]
 80214f0:	69bb      	ldr	r3, [r7, #24]
 80214f2:	429a      	cmp	r2, r3
 80214f4:	dde0      	ble.n	80214b8 <xscal_59GtRAwv+0x20>
  }
}
 80214f6:	bf00      	nop
 80214f8:	bf00      	nop
 80214fa:	3724      	adds	r7, #36	; 0x24
 80214fc:	46bd      	mov	sp, r7
 80214fe:	bd90      	pop	{r4, r7, pc}

08021500 <xscal_PLmmUlD2>:
#include "rtwtypes.h"
#include "xscal_PLmmUlD2.h"

void xscal_PLmmUlD2(int32_T n, real_T a, real_T x[3], int32_T ix0)
{
 8021500:	b590      	push	{r4, r7, lr}
 8021502:	b089      	sub	sp, #36	; 0x24
 8021504:	af00      	add	r7, sp, #0
 8021506:	6178      	str	r0, [r7, #20]
 8021508:	ed87 0b02 	vstr	d0, [r7, #8]
 802150c:	6139      	str	r1, [r7, #16]
 802150e:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 8021510:	687a      	ldr	r2, [r7, #4]
 8021512:	697b      	ldr	r3, [r7, #20]
 8021514:	4413      	add	r3, r2
 8021516:	3b01      	subs	r3, #1
 8021518:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 802151a:	687b      	ldr	r3, [r7, #4]
 802151c:	61fb      	str	r3, [r7, #28]
 802151e:	e01a      	b.n	8021556 <xscal_PLmmUlD2+0x56>
    x[k - 1] *= a;
 8021520:	69fb      	ldr	r3, [r7, #28]
 8021522:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8021526:	3b01      	subs	r3, #1
 8021528:	00db      	lsls	r3, r3, #3
 802152a:	693a      	ldr	r2, [r7, #16]
 802152c:	4413      	add	r3, r2
 802152e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021532:	69fb      	ldr	r3, [r7, #28]
 8021534:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8021538:	3b01      	subs	r3, #1
 802153a:	00db      	lsls	r3, r3, #3
 802153c:	693a      	ldr	r2, [r7, #16]
 802153e:	18d4      	adds	r4, r2, r3
 8021540:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021544:	f7df f84a 	bl	80005dc <__aeabi_dmul>
 8021548:	4602      	mov	r2, r0
 802154a:	460b      	mov	r3, r1
 802154c:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 8021550:	69fb      	ldr	r3, [r7, #28]
 8021552:	3301      	adds	r3, #1
 8021554:	61fb      	str	r3, [r7, #28]
 8021556:	69fa      	ldr	r2, [r7, #28]
 8021558:	69bb      	ldr	r3, [r7, #24]
 802155a:	429a      	cmp	r2, r3
 802155c:	dde0      	ble.n	8021520 <xscal_PLmmUlD2+0x20>
  }
}
 802155e:	bf00      	nop
 8021560:	bf00      	nop
 8021562:	3724      	adds	r7, #36	; 0x24
 8021564:	46bd      	mov	sp, r7
 8021566:	bd90      	pop	{r4, r7, pc}

08021568 <xscal_eaAxXsvQ>:
#include "rtwtypes.h"
#include "xscal_eaAxXsvQ.h"

void xscal_eaAxXsvQ(real_T a, real_T x[9], int32_T ix0)
{
 8021568:	b590      	push	{r4, r7, lr}
 802156a:	b087      	sub	sp, #28
 802156c:	af00      	add	r7, sp, #0
 802156e:	ed87 0b02 	vstr	d0, [r7, #8]
 8021572:	6078      	str	r0, [r7, #4]
 8021574:	6039      	str	r1, [r7, #0]
  int32_T k;
  for (k = ix0; k <= ix0 + 2; k++) {
 8021576:	683b      	ldr	r3, [r7, #0]
 8021578:	617b      	str	r3, [r7, #20]
 802157a:	e01a      	b.n	80215b2 <xscal_eaAxXsvQ+0x4a>
    x[k - 1] *= a;
 802157c:	697b      	ldr	r3, [r7, #20]
 802157e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8021582:	3b01      	subs	r3, #1
 8021584:	00db      	lsls	r3, r3, #3
 8021586:	687a      	ldr	r2, [r7, #4]
 8021588:	4413      	add	r3, r2
 802158a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802158e:	697b      	ldr	r3, [r7, #20]
 8021590:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8021594:	3b01      	subs	r3, #1
 8021596:	00db      	lsls	r3, r3, #3
 8021598:	687a      	ldr	r2, [r7, #4]
 802159a:	18d4      	adds	r4, r2, r3
 802159c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80215a0:	f7df f81c 	bl	80005dc <__aeabi_dmul>
 80215a4:	4602      	mov	r2, r0
 80215a6:	460b      	mov	r3, r1
 80215a8:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= ix0 + 2; k++) {
 80215ac:	697b      	ldr	r3, [r7, #20]
 80215ae:	3301      	adds	r3, #1
 80215b0:	617b      	str	r3, [r7, #20]
 80215b2:	683b      	ldr	r3, [r7, #0]
 80215b4:	3302      	adds	r3, #2
 80215b6:	697a      	ldr	r2, [r7, #20]
 80215b8:	429a      	cmp	r2, r3
 80215ba:	dddf      	ble.n	802157c <xscal_eaAxXsvQ+0x14>
  }
}
 80215bc:	bf00      	nop
 80215be:	bf00      	nop
 80215c0:	371c      	adds	r7, #28
 80215c2:	46bd      	mov	sp, r7
 80215c4:	bd90      	pop	{r4, r7, pc}

080215c6 <xswap_JoAqPjUv>:
#include "rtwtypes.h"
#include "xswap_JoAqPjUv.h"

void xswap_JoAqPjUv(real_T x[9], int32_T ix0, int32_T iy0)
{
 80215c6:	b480      	push	{r7}
 80215c8:	b087      	sub	sp, #28
 80215ca:	af00      	add	r7, sp, #0
 80215cc:	60f8      	str	r0, [r7, #12]
 80215ce:	60b9      	str	r1, [r7, #8]
 80215d0:	607a      	str	r2, [r7, #4]
  real_T temp;
  temp = x[ix0 - 1];
 80215d2:	68bb      	ldr	r3, [r7, #8]
 80215d4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80215d8:	3b01      	subs	r3, #1
 80215da:	00db      	lsls	r3, r3, #3
 80215dc:	68fa      	ldr	r2, [r7, #12]
 80215de:	4413      	add	r3, r2
 80215e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 - 1] = x[iy0 - 1];
 80215e8:	687b      	ldr	r3, [r7, #4]
 80215ea:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80215ee:	3b01      	subs	r3, #1
 80215f0:	00db      	lsls	r3, r3, #3
 80215f2:	68fa      	ldr	r2, [r7, #12]
 80215f4:	441a      	add	r2, r3
 80215f6:	68bb      	ldr	r3, [r7, #8]
 80215f8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80215fc:	3b01      	subs	r3, #1
 80215fe:	00db      	lsls	r3, r3, #3
 8021600:	68f9      	ldr	r1, [r7, #12]
 8021602:	4419      	add	r1, r3
 8021604:	e9d2 2300 	ldrd	r2, r3, [r2]
 8021608:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 - 1] = temp;
 802160c:	687b      	ldr	r3, [r7, #4]
 802160e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8021612:	3b01      	subs	r3, #1
 8021614:	00db      	lsls	r3, r3, #3
 8021616:	68fa      	ldr	r2, [r7, #12]
 8021618:	18d1      	adds	r1, r2, r3
 802161a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802161e:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0];
 8021622:	68bb      	ldr	r3, [r7, #8]
 8021624:	00db      	lsls	r3, r3, #3
 8021626:	68fa      	ldr	r2, [r7, #12]
 8021628:	4413      	add	r3, r2
 802162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802162e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0] = x[iy0];
 8021632:	687b      	ldr	r3, [r7, #4]
 8021634:	00db      	lsls	r3, r3, #3
 8021636:	68fa      	ldr	r2, [r7, #12]
 8021638:	4413      	add	r3, r2
 802163a:	68ba      	ldr	r2, [r7, #8]
 802163c:	00d2      	lsls	r2, r2, #3
 802163e:	68f9      	ldr	r1, [r7, #12]
 8021640:	4411      	add	r1, r2
 8021642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021646:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0] = temp;
 802164a:	687b      	ldr	r3, [r7, #4]
 802164c:	00db      	lsls	r3, r3, #3
 802164e:	68fa      	ldr	r2, [r7, #12]
 8021650:	18d1      	adds	r1, r2, r3
 8021652:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021656:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0 + 1];
 802165a:	68bb      	ldr	r3, [r7, #8]
 802165c:	3301      	adds	r3, #1
 802165e:	00db      	lsls	r3, r3, #3
 8021660:	68fa      	ldr	r2, [r7, #12]
 8021662:	4413      	add	r3, r2
 8021664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021668:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 + 1] = x[iy0 + 1];
 802166c:	687b      	ldr	r3, [r7, #4]
 802166e:	3301      	adds	r3, #1
 8021670:	00db      	lsls	r3, r3, #3
 8021672:	68fa      	ldr	r2, [r7, #12]
 8021674:	4413      	add	r3, r2
 8021676:	68ba      	ldr	r2, [r7, #8]
 8021678:	3201      	adds	r2, #1
 802167a:	00d2      	lsls	r2, r2, #3
 802167c:	68f9      	ldr	r1, [r7, #12]
 802167e:	4411      	add	r1, r2
 8021680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021684:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 + 1] = temp;
 8021688:	687b      	ldr	r3, [r7, #4]
 802168a:	3301      	adds	r3, #1
 802168c:	00db      	lsls	r3, r3, #3
 802168e:	68fa      	ldr	r2, [r7, #12]
 8021690:	18d1      	adds	r1, r2, r3
 8021692:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021696:	e9c1 2300 	strd	r2, r3, [r1]
}
 802169a:	bf00      	nop
 802169c:	371c      	adds	r7, #28
 802169e:	46bd      	mov	sp, r7
 80216a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216a4:	4770      	bx	lr

080216a6 <ams_error>:

__weak uint8_t end_cell_balancing() {
   /* Type your actual code somewhere else */
}

__weak void ams_error() {
 80216a6:	b480      	push	{r7}
 80216a8:	af00      	add	r7, sp, #0
   /* Type your actual code somewhere else */
}
 80216aa:	bf00      	nop
 80216ac:	46bd      	mov	sp, r7
 80216ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216b2:	4770      	bx	lr

080216b4 <ams_error_0_function>:
static float timer_r0;
static float timer_r1;
static float timer_r2;
static float timer_r3;

ams_state_t ams_error_0_function() {
 80216b4:	b480      	push	{r7}
 80216b6:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 80216b8:	4b04      	ldr	r3, [pc, #16]	; (80216cc <ams_error_0_function+0x18>)
 80216ba:	f04f 0200 	mov.w	r2, #0
 80216be:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_ERROR_DETECTED;
 80216c0:	2304      	movs	r3, #4
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_ERROR_0;
}
 80216c2:	4618      	mov	r0, r3
 80216c4:	46bd      	mov	sp, r7
 80216c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216ca:	4770      	bx	lr
 80216cc:	20000a98 	.word	0x20000a98

080216d0 <ams_error_error_detected_function>:

ams_state_t ams_error_error_detected_function() {
 80216d0:	b480      	push	{r7}
 80216d2:	af00      	add	r7, sp, #0
   if(1) {
       ams_outputs.close_air_plus=0;
 80216d4:	4b0a      	ldr	r3, [pc, #40]	; (8021700 <ams_error_error_detected_function+0x30>)
 80216d6:	2200      	movs	r2, #0
 80216d8:	721a      	strb	r2, [r3, #8]
       ams_outputs.close_air_minus=0;
 80216da:	4b09      	ldr	r3, [pc, #36]	; (8021700 <ams_error_error_detected_function+0x30>)
 80216dc:	2200      	movs	r2, #0
 80216de:	705a      	strb	r2, [r3, #1]
       ams_outputs.close_precharge=0;
 80216e0:	4b07      	ldr	r3, [pc, #28]	; (8021700 <ams_error_error_detected_function+0x30>)
 80216e2:	2200      	movs	r2, #0
 80216e4:	70da      	strb	r2, [r3, #3]
       ams_outputs.enable_charger=0;
 80216e6:	4b06      	ldr	r3, [pc, #24]	; (8021700 <ams_error_error_detected_function+0x30>)
 80216e8:	2200      	movs	r2, #0
 80216ea:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 80216ec:	4b05      	ldr	r3, [pc, #20]	; (8021704 <ams_error_error_detected_function+0x34>)
 80216ee:	f04f 0200 	mov.w	r2, #0
 80216f2:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_RELAYS_OPENED;
 80216f4:	2305      	movs	r3, #5
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_ERROR_ERROR_DETECTED;
}
 80216f6:	4618      	mov	r0, r3
 80216f8:	46bd      	mov	sp, r7
 80216fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216fe:	4770      	bx	lr
 8021700:	2001b1c8 	.word	0x2001b1c8
 8021704:	20000a98 	.word	0x20000a98

08021708 <ams_error_relays_opened_function>:

ams_state_t ams_error_relays_opened_function() {
 8021708:	b480      	push	{r7}
 802170a:	af00      	add	r7, sp, #0
   if((timer_r2 > 5)) {
 802170c:	4b11      	ldr	r3, [pc, #68]	; (8021754 <ams_error_relays_opened_function+0x4c>)
 802170e:	edd3 7a00 	vldr	s15, [r3]
 8021712:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8021716:	eef4 7ac7 	vcmpe.f32	s15, s14
 802171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802171e:	dd08      	ble.n	8021732 <ams_error_relays_opened_function+0x2a>
       ams_outputs.error=0;
 8021720:	4b0d      	ldr	r3, [pc, #52]	; (8021758 <ams_error_relays_opened_function+0x50>)
 8021722:	2200      	movs	r2, #0
 8021724:	711a      	strb	r2, [r3, #4]
       timer_r2 = 0;
 8021726:	4b0b      	ldr	r3, [pc, #44]	; (8021754 <ams_error_relays_opened_function+0x4c>)
 8021728:	f04f 0200 	mov.w	r2, #0
 802172c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION;
 802172e:	2306      	movs	r3, #6
 8021730:	e00b      	b.n	802174a <ams_error_relays_opened_function+0x42>
   }

   timer_r2 += ams_inputs.Ts;
 8021732:	4b0a      	ldr	r3, [pc, #40]	; (802175c <ams_error_relays_opened_function+0x54>)
 8021734:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8021738:	4b06      	ldr	r3, [pc, #24]	; (8021754 <ams_error_relays_opened_function+0x4c>)
 802173a:	edd3 7a00 	vldr	s15, [r3]
 802173e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021742:	4b04      	ldr	r3, [pc, #16]	; (8021754 <ams_error_relays_opened_function+0x4c>)
 8021744:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR_RELAYS_OPENED;
 8021748:	2305      	movs	r3, #5
}
 802174a:	4618      	mov	r0, r3
 802174c:	46bd      	mov	sp, r7
 802174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021752:	4770      	bx	lr
 8021754:	20000a98 	.word	0x20000a98
 8021758:	2001b1c8 	.word	0x2001b1c8
 802175c:	2001b168 	.word	0x2001b168

08021760 <ams_error_awaiting_error_resolution_function>:

ams_state_t ams_error_awaiting_error_resolution_function() {
 8021760:	b480      	push	{r7}
 8021762:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 8021764:	4b08      	ldr	r3, [pc, #32]	; (8021788 <ams_error_awaiting_error_resolution_function+0x28>)
 8021766:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 802176a:	4b08      	ldr	r3, [pc, #32]	; (802178c <ams_error_awaiting_error_resolution_function+0x2c>)
 802176c:	edd3 7a00 	vldr	s15, [r3]
 8021770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021774:	4b05      	ldr	r3, [pc, #20]	; (802178c <ams_error_awaiting_error_resolution_function+0x2c>)
 8021776:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION;
 802177a:	2306      	movs	r3, #6
}
 802177c:	4618      	mov	r0, r3
 802177e:	46bd      	mov	sp, r7
 8021780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021784:	4770      	bx	lr
 8021786:	bf00      	nop
 8021788:	2001b168 	.word	0x2001b168
 802178c:	20000a98 	.word	0x20000a98

08021790 <ams_error_function>:

ams_state_t ams_error_function() {
 8021790:	b5b0      	push	{r4, r5, r7, lr}
 8021792:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 8021794:	4b38      	ldr	r3, [pc, #224]	; (8021878 <ams_error_function+0xe8>)
 8021796:	681b      	ldr	r3, [r3, #0]
 8021798:	4618      	mov	r0, r3
 802179a:	f7de fec7 	bl	800052c <__aeabi_f2d>
 802179e:	4604      	mov	r4, r0
 80217a0:	460d      	mov	r5, r1
 80217a2:	4b36      	ldr	r3, [pc, #216]	; (802187c <ams_error_function+0xec>)
 80217a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80217a6:	4618      	mov	r0, r3
 80217a8:	f7de fec0 	bl	800052c <__aeabi_f2d>
 80217ac:	a330      	add	r3, pc, #192	; (adr r3, 8021870 <ams_error_function+0xe0>)
 80217ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217b2:	f7de ff13 	bl	80005dc <__aeabi_dmul>
 80217b6:	4602      	mov	r2, r0
 80217b8:	460b      	mov	r3, r1
 80217ba:	4620      	mov	r0, r4
 80217bc:	4629      	mov	r1, r5
 80217be:	f7df f97f 	bl	8000ac0 <__aeabi_dcmplt>
 80217c2:	4603      	mov	r3, r0
 80217c4:	2b00      	cmp	r3, #0
 80217c6:	d002      	beq.n	80217ce <ams_error_function+0x3e>
       state_r2 = STATE_AMS_ERROR_0;
 80217c8:	4b2d      	ldr	r3, [pc, #180]	; (8021880 <ams_error_function+0xf0>)
 80217ca:	2203      	movs	r2, #3
 80217cc:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 80217ce:	4b2c      	ldr	r3, [pc, #176]	; (8021880 <ams_error_function+0xf0>)
 80217d0:	781b      	ldrb	r3, [r3, #0]
 80217d2:	3b03      	subs	r3, #3
 80217d4:	2b03      	cmp	r3, #3
 80217d6:	d827      	bhi.n	8021828 <ams_error_function+0x98>
 80217d8:	a201      	add	r2, pc, #4	; (adr r2, 80217e0 <ams_error_function+0x50>)
 80217da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80217de:	bf00      	nop
 80217e0:	080217f1 	.word	0x080217f1
 80217e4:	080217ff 	.word	0x080217ff
 80217e8:	0802180d 	.word	0x0802180d
 80217ec:	0802181b 	.word	0x0802181b
       case STATE_AMS_ERROR_0:
           state_r2 = ams_error_0_function();
 80217f0:	f7ff ff60 	bl	80216b4 <ams_error_0_function>
 80217f4:	4603      	mov	r3, r0
 80217f6:	461a      	mov	r2, r3
 80217f8:	4b21      	ldr	r3, [pc, #132]	; (8021880 <ams_error_function+0xf0>)
 80217fa:	701a      	strb	r2, [r3, #0]
           break;
 80217fc:	e017      	b.n	802182e <ams_error_function+0x9e>
       case STATE_AMS_ERROR_ERROR_DETECTED:
           state_r2 = ams_error_error_detected_function();
 80217fe:	f7ff ff67 	bl	80216d0 <ams_error_error_detected_function>
 8021802:	4603      	mov	r3, r0
 8021804:	461a      	mov	r2, r3
 8021806:	4b1e      	ldr	r3, [pc, #120]	; (8021880 <ams_error_function+0xf0>)
 8021808:	701a      	strb	r2, [r3, #0]
           break;
 802180a:	e010      	b.n	802182e <ams_error_function+0x9e>
       case STATE_AMS_ERROR_RELAYS_OPENED:
           state_r2 = ams_error_relays_opened_function();
 802180c:	f7ff ff7c 	bl	8021708 <ams_error_relays_opened_function>
 8021810:	4603      	mov	r3, r0
 8021812:	461a      	mov	r2, r3
 8021814:	4b1a      	ldr	r3, [pc, #104]	; (8021880 <ams_error_function+0xf0>)
 8021816:	701a      	strb	r2, [r3, #0]
           break;
 8021818:	e009      	b.n	802182e <ams_error_function+0x9e>
       case STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION:
           state_r2 = ams_error_awaiting_error_resolution_function();
 802181a:	f7ff ffa1 	bl	8021760 <ams_error_awaiting_error_resolution_function>
 802181e:	4603      	mov	r3, r0
 8021820:	461a      	mov	r2, r3
 8021822:	4b17      	ldr	r3, [pc, #92]	; (8021880 <ams_error_function+0xf0>)
 8021824:	701a      	strb	r2, [r3, #0]
           break;
 8021826:	e002      	b.n	802182e <ams_error_function+0x9e>
       default:
           ams_error();
 8021828:	f7ff ff3d 	bl	80216a6 <ams_error>
           break;
 802182c:	bf00      	nop
   }

   if(!(ams_outputs.error||ams_inputs.ams_error||ams_inputs.imd_error)) {
 802182e:	4b15      	ldr	r3, [pc, #84]	; (8021884 <ams_error_function+0xf4>)
 8021830:	791b      	ldrb	r3, [r3, #4]
 8021832:	2b00      	cmp	r3, #0
 8021834:	d10e      	bne.n	8021854 <ams_error_function+0xc4>
 8021836:	4b11      	ldr	r3, [pc, #68]	; (802187c <ams_error_function+0xec>)
 8021838:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802183c:	2b00      	cmp	r3, #0
 802183e:	d109      	bne.n	8021854 <ams_error_function+0xc4>
 8021840:	4b0e      	ldr	r3, [pc, #56]	; (802187c <ams_error_function+0xec>)
 8021842:	7c1b      	ldrb	r3, [r3, #16]
 8021844:	2b00      	cmp	r3, #0
 8021846:	d105      	bne.n	8021854 <ams_error_function+0xc4>
       timer_r1 = 0;
 8021848:	4b0b      	ldr	r3, [pc, #44]	; (8021878 <ams_error_function+0xe8>)
 802184a:	f04f 0200 	mov.w	r2, #0
 802184e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN;
 8021850:	2307      	movs	r3, #7
 8021852:	e00b      	b.n	802186c <ams_error_function+0xdc>
   }


   timer_r1 += ams_inputs.Ts;
 8021854:	4b09      	ldr	r3, [pc, #36]	; (802187c <ams_error_function+0xec>)
 8021856:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 802185a:	4b07      	ldr	r3, [pc, #28]	; (8021878 <ams_error_function+0xe8>)
 802185c:	edd3 7a00 	vldr	s15, [r3]
 8021860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021864:	4b04      	ldr	r3, [pc, #16]	; (8021878 <ams_error_function+0xe8>)
 8021866:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR;
 802186a:	2302      	movs	r3, #2
}
 802186c:	4618      	mov	r0, r3
 802186e:	bdb0      	pop	{r4, r5, r7, pc}
 8021870:	d2f1a9fc 	.word	0xd2f1a9fc
 8021874:	3f50624d 	.word	0x3f50624d
 8021878:	20000a94 	.word	0x20000a94
 802187c:	2001b168 	.word	0x2001b168
 8021880:	20000a8d 	.word	0x20000a8d
 8021884:	2001b1c8 	.word	0x2001b1c8

08021888 <ams_main_precharge_drive_close_air_minus_function>:

ams_state_t ams_main_precharge_drive_close_air_minus_function() {
 8021888:	b480      	push	{r7}
 802188a:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.air_minus_closed) {
 802188c:	4b1d      	ldr	r3, [pc, #116]	; (8021904 <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 802188e:	edd3 7a00 	vldr	s15, [r3]
 8021892:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8021896:	eef4 7ac7 	vcmpe.f32	s15, s14
 802189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802189e:	d50d      	bpl.n	80218bc <ams_main_precharge_drive_close_air_minus_function+0x34>
 80218a0:	4b19      	ldr	r3, [pc, #100]	; (8021908 <ams_main_precharge_drive_close_air_minus_function+0x80>)
 80218a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80218a6:	2b00      	cmp	r3, #0
 80218a8:	d008      	beq.n	80218bc <ams_main_precharge_drive_close_air_minus_function+0x34>
       ams_outputs.close_precharge=1;
 80218aa:	4b18      	ldr	r3, [pc, #96]	; (802190c <ams_main_precharge_drive_close_air_minus_function+0x84>)
 80218ac:	2201      	movs	r2, #1
 80218ae:	70da      	strb	r2, [r3, #3]
       timer_r3 = 0;
 80218b0:	4b14      	ldr	r3, [pc, #80]	; (8021904 <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 80218b2:	f04f 0200 	mov.w	r2, #0
 80218b6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_PRECHARGE;
 80218b8:	230a      	movs	r3, #10
 80218ba:	e01e      	b.n	80218fa <ams_main_precharge_drive_close_air_minus_function+0x72>
   }

   if((timer_r3 > 2)) {
 80218bc:	4b11      	ldr	r3, [pc, #68]	; (8021904 <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 80218be:	edd3 7a00 	vldr	s15, [r3]
 80218c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80218c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80218ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218ce:	dd08      	ble.n	80218e2 <ams_main_precharge_drive_close_air_minus_function+0x5a>
       ams_outputs.error=111;
 80218d0:	4b0e      	ldr	r3, [pc, #56]	; (802190c <ams_main_precharge_drive_close_air_minus_function+0x84>)
 80218d2:	226f      	movs	r2, #111	; 0x6f
 80218d4:	711a      	strb	r2, [r3, #4]
       timer_r3 = 0;
 80218d6:	4b0b      	ldr	r3, [pc, #44]	; (8021904 <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 80218d8:	f04f 0200 	mov.w	r2, #0
 80218dc:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 80218de:	230b      	movs	r3, #11
 80218e0:	e00b      	b.n	80218fa <ams_main_precharge_drive_close_air_minus_function+0x72>
   }

   timer_r3 += ams_inputs.Ts;
 80218e2:	4b09      	ldr	r3, [pc, #36]	; (8021908 <ams_main_precharge_drive_close_air_minus_function+0x80>)
 80218e4:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80218e8:	4b06      	ldr	r3, [pc, #24]	; (8021904 <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 80218ea:	edd3 7a00 	vldr	s15, [r3]
 80218ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80218f2:	4b04      	ldr	r3, [pc, #16]	; (8021904 <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 80218f4:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_MINUS;
 80218f8:	2309      	movs	r3, #9
}
 80218fa:	4618      	mov	r0, r3
 80218fc:	46bd      	mov	sp, r7
 80218fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021902:	4770      	bx	lr
 8021904:	20000a9c 	.word	0x20000a9c
 8021908:	2001b168 	.word	0x2001b168
 802190c:	2001b1c8 	.word	0x2001b1c8

08021910 <ams_main_precharge_drive_close_precharge_function>:

ams_state_t ams_main_precharge_drive_close_precharge_function() {
 8021910:	b480      	push	{r7}
 8021912:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.precharge_closed) {
 8021914:	4b1c      	ldr	r3, [pc, #112]	; (8021988 <ams_main_precharge_drive_close_precharge_function+0x78>)
 8021916:	edd3 7a00 	vldr	s15, [r3]
 802191a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802191e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021926:	d50a      	bpl.n	802193e <ams_main_precharge_drive_close_precharge_function+0x2e>
 8021928:	4b18      	ldr	r3, [pc, #96]	; (802198c <ams_main_precharge_drive_close_precharge_function+0x7c>)
 802192a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802192e:	2b00      	cmp	r3, #0
 8021930:	d005      	beq.n	802193e <ams_main_precharge_drive_close_precharge_function+0x2e>
       timer_r3 = 0;
 8021932:	4b15      	ldr	r3, [pc, #84]	; (8021988 <ams_main_precharge_drive_close_precharge_function+0x78>)
 8021934:	f04f 0200 	mov.w	r2, #0
 8021938:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_WAIT;
 802193a:	230c      	movs	r3, #12
 802193c:	e01e      	b.n	802197c <ams_main_precharge_drive_close_precharge_function+0x6c>
   }

   if((timer_r3 > 2)) {
 802193e:	4b12      	ldr	r3, [pc, #72]	; (8021988 <ams_main_precharge_drive_close_precharge_function+0x78>)
 8021940:	edd3 7a00 	vldr	s15, [r3]
 8021944:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8021948:	eef4 7ac7 	vcmpe.f32	s15, s14
 802194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021950:	dd08      	ble.n	8021964 <ams_main_precharge_drive_close_precharge_function+0x54>
       ams_outputs.error=112;
 8021952:	4b0f      	ldr	r3, [pc, #60]	; (8021990 <ams_main_precharge_drive_close_precharge_function+0x80>)
 8021954:	2270      	movs	r2, #112	; 0x70
 8021956:	711a      	strb	r2, [r3, #4]
       timer_r3 = 0;
 8021958:	4b0b      	ldr	r3, [pc, #44]	; (8021988 <ams_main_precharge_drive_close_precharge_function+0x78>)
 802195a:	f04f 0200 	mov.w	r2, #0
 802195e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 8021960:	230b      	movs	r3, #11
 8021962:	e00b      	b.n	802197c <ams_main_precharge_drive_close_precharge_function+0x6c>
   }

   timer_r3 += ams_inputs.Ts;
 8021964:	4b09      	ldr	r3, [pc, #36]	; (802198c <ams_main_precharge_drive_close_precharge_function+0x7c>)
 8021966:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 802196a:	4b07      	ldr	r3, [pc, #28]	; (8021988 <ams_main_precharge_drive_close_precharge_function+0x78>)
 802196c:	edd3 7a00 	vldr	s15, [r3]
 8021970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021974:	4b04      	ldr	r3, [pc, #16]	; (8021988 <ams_main_precharge_drive_close_precharge_function+0x78>)
 8021976:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_PRECHARGE;
 802197a:	230a      	movs	r3, #10
}
 802197c:	4618      	mov	r0, r3
 802197e:	46bd      	mov	sp, r7
 8021980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021984:	4770      	bx	lr
 8021986:	bf00      	nop
 8021988:	20000a9c 	.word	0x20000a9c
 802198c:	2001b168 	.word	0x2001b168
 8021990:	2001b1c8 	.word	0x2001b1c8

08021994 <ams_main_precharge_drive_error_function>:

ams_state_t ams_main_precharge_drive_error_function() {
 8021994:	b480      	push	{r7}
 8021996:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8021998:	4b08      	ldr	r3, [pc, #32]	; (80219bc <ams_main_precharge_drive_error_function+0x28>)
 802199a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 802199e:	4b08      	ldr	r3, [pc, #32]	; (80219c0 <ams_main_precharge_drive_error_function+0x2c>)
 80219a0:	edd3 7a00 	vldr	s15, [r3]
 80219a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80219a8:	4b05      	ldr	r3, [pc, #20]	; (80219c0 <ams_main_precharge_drive_error_function+0x2c>)
 80219aa:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 80219ae:	230b      	movs	r3, #11
}
 80219b0:	4618      	mov	r0, r3
 80219b2:	46bd      	mov	sp, r7
 80219b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219b8:	4770      	bx	lr
 80219ba:	bf00      	nop
 80219bc:	2001b168 	.word	0x2001b168
 80219c0:	20000a9c 	.word	0x20000a9c
 80219c4:	00000000 	.word	0x00000000

080219c8 <ams_main_precharge_drive_wait_function>:

ams_state_t ams_main_precharge_drive_wait_function() {
 80219c8:	b580      	push	{r7, lr}
 80219ca:	af00      	add	r7, sp, #0
   if((timer_r3 > 5)&&(timer_r3 < 30)&&(ams_inputs.accumulator_voltage*0.95<ams_inputs.vehicle_voltage)) {
 80219cc:	4b2a      	ldr	r3, [pc, #168]	; (8021a78 <ams_main_precharge_drive_wait_function+0xb0>)
 80219ce:	edd3 7a00 	vldr	s15, [r3]
 80219d2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80219d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80219da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219de:	dd26      	ble.n	8021a2e <ams_main_precharge_drive_wait_function+0x66>
 80219e0:	4b25      	ldr	r3, [pc, #148]	; (8021a78 <ams_main_precharge_drive_wait_function+0xb0>)
 80219e2:	edd3 7a00 	vldr	s15, [r3]
 80219e6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80219ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80219ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219f2:	d51c      	bpl.n	8021a2e <ams_main_precharge_drive_wait_function+0x66>
 80219f4:	4b21      	ldr	r3, [pc, #132]	; (8021a7c <ams_main_precharge_drive_wait_function+0xb4>)
 80219f6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80219fa:	a31d      	add	r3, pc, #116	; (adr r3, 8021a70 <ams_main_precharge_drive_wait_function+0xa8>)
 80219fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a00:	f7de fdec 	bl	80005dc <__aeabi_dmul>
 8021a04:	4602      	mov	r2, r0
 8021a06:	460b      	mov	r3, r1
 8021a08:	4610      	mov	r0, r2
 8021a0a:	4619      	mov	r1, r3
 8021a0c:	4b1b      	ldr	r3, [pc, #108]	; (8021a7c <ams_main_precharge_drive_wait_function+0xb4>)
 8021a0e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8021a12:	f7df f855 	bl	8000ac0 <__aeabi_dcmplt>
 8021a16:	4603      	mov	r3, r0
 8021a18:	2b00      	cmp	r3, #0
 8021a1a:	d008      	beq.n	8021a2e <ams_main_precharge_drive_wait_function+0x66>
       ams_outputs.close_air_plus=1;
 8021a1c:	4b18      	ldr	r3, [pc, #96]	; (8021a80 <ams_main_precharge_drive_wait_function+0xb8>)
 8021a1e:	2201      	movs	r2, #1
 8021a20:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8021a22:	4b15      	ldr	r3, [pc, #84]	; (8021a78 <ams_main_precharge_drive_wait_function+0xb0>)
 8021a24:	f04f 0200 	mov.w	r2, #0
 8021a28:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_PLUS;
 8021a2a:	230d      	movs	r3, #13
 8021a2c:	e01e      	b.n	8021a6c <ams_main_precharge_drive_wait_function+0xa4>
   }

   if((timer_r3 > 30)) {
 8021a2e:	4b12      	ldr	r3, [pc, #72]	; (8021a78 <ams_main_precharge_drive_wait_function+0xb0>)
 8021a30:	edd3 7a00 	vldr	s15, [r3]
 8021a34:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8021a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a40:	dd08      	ble.n	8021a54 <ams_main_precharge_drive_wait_function+0x8c>
       ams_outputs.error=113;
 8021a42:	4b0f      	ldr	r3, [pc, #60]	; (8021a80 <ams_main_precharge_drive_wait_function+0xb8>)
 8021a44:	2271      	movs	r2, #113	; 0x71
 8021a46:	711a      	strb	r2, [r3, #4]
       timer_r3 = 0;
 8021a48:	4b0b      	ldr	r3, [pc, #44]	; (8021a78 <ams_main_precharge_drive_wait_function+0xb0>)
 8021a4a:	f04f 0200 	mov.w	r2, #0
 8021a4e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 8021a50:	230b      	movs	r3, #11
 8021a52:	e00b      	b.n	8021a6c <ams_main_precharge_drive_wait_function+0xa4>
   }

   timer_r3 += ams_inputs.Ts;
 8021a54:	4b09      	ldr	r3, [pc, #36]	; (8021a7c <ams_main_precharge_drive_wait_function+0xb4>)
 8021a56:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8021a5a:	4b07      	ldr	r3, [pc, #28]	; (8021a78 <ams_main_precharge_drive_wait_function+0xb0>)
 8021a5c:	edd3 7a00 	vldr	s15, [r3]
 8021a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021a64:	4b04      	ldr	r3, [pc, #16]	; (8021a78 <ams_main_precharge_drive_wait_function+0xb0>)
 8021a66:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_WAIT;
 8021a6a:	230c      	movs	r3, #12
}
 8021a6c:	4618      	mov	r0, r3
 8021a6e:	bd80      	pop	{r7, pc}
 8021a70:	66666666 	.word	0x66666666
 8021a74:	3fee6666 	.word	0x3fee6666
 8021a78:	20000a9c 	.word	0x20000a9c
 8021a7c:	2001b168 	.word	0x2001b168
 8021a80:	2001b1c8 	.word	0x2001b1c8

08021a84 <ams_main_precharge_drive_close_air_plus_function>:

ams_state_t ams_main_precharge_drive_close_air_plus_function() {
 8021a84:	b480      	push	{r7}
 8021a86:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.air_plus_closed) {
 8021a88:	4b1d      	ldr	r3, [pc, #116]	; (8021b00 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 8021a8a:	edd3 7a00 	vldr	s15, [r3]
 8021a8e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8021a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a9a:	d50c      	bpl.n	8021ab6 <ams_main_precharge_drive_close_air_plus_function+0x32>
 8021a9c:	4b19      	ldr	r3, [pc, #100]	; (8021b04 <ams_main_precharge_drive_close_air_plus_function+0x80>)
 8021a9e:	7c5b      	ldrb	r3, [r3, #17]
 8021aa0:	2b00      	cmp	r3, #0
 8021aa2:	d008      	beq.n	8021ab6 <ams_main_precharge_drive_close_air_plus_function+0x32>
       ams_outputs.close_precharge=0;
 8021aa4:	4b18      	ldr	r3, [pc, #96]	; (8021b08 <ams_main_precharge_drive_close_air_plus_function+0x84>)
 8021aa6:	2200      	movs	r2, #0
 8021aa8:	70da      	strb	r2, [r3, #3]
       timer_r3 = 0;
 8021aaa:	4b15      	ldr	r3, [pc, #84]	; (8021b00 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 8021aac:	f04f 0200 	mov.w	r2, #0
 8021ab0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_OPEN_PRECHARGE;
 8021ab2:	230e      	movs	r3, #14
 8021ab4:	e01e      	b.n	8021af4 <ams_main_precharge_drive_close_air_plus_function+0x70>
   }

   if((timer_r3 > 2)) {
 8021ab6:	4b12      	ldr	r3, [pc, #72]	; (8021b00 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 8021ab8:	edd3 7a00 	vldr	s15, [r3]
 8021abc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8021ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ac8:	dd08      	ble.n	8021adc <ams_main_precharge_drive_close_air_plus_function+0x58>
       ams_outputs.error=114;
 8021aca:	4b0f      	ldr	r3, [pc, #60]	; (8021b08 <ams_main_precharge_drive_close_air_plus_function+0x84>)
 8021acc:	2272      	movs	r2, #114	; 0x72
 8021ace:	711a      	strb	r2, [r3, #4]
       timer_r3 = 0;
 8021ad0:	4b0b      	ldr	r3, [pc, #44]	; (8021b00 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 8021ad2:	f04f 0200 	mov.w	r2, #0
 8021ad6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 8021ad8:	230b      	movs	r3, #11
 8021ada:	e00b      	b.n	8021af4 <ams_main_precharge_drive_close_air_plus_function+0x70>
   }

   timer_r3 += ams_inputs.Ts;
 8021adc:	4b09      	ldr	r3, [pc, #36]	; (8021b04 <ams_main_precharge_drive_close_air_plus_function+0x80>)
 8021ade:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8021ae2:	4b07      	ldr	r3, [pc, #28]	; (8021b00 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 8021ae4:	edd3 7a00 	vldr	s15, [r3]
 8021ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021aec:	4b04      	ldr	r3, [pc, #16]	; (8021b00 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 8021aee:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_PLUS;
 8021af2:	230d      	movs	r3, #13
}
 8021af4:	4618      	mov	r0, r3
 8021af6:	46bd      	mov	sp, r7
 8021af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021afc:	4770      	bx	lr
 8021afe:	bf00      	nop
 8021b00:	20000a9c 	.word	0x20000a9c
 8021b04:	2001b168 	.word	0x2001b168
 8021b08:	2001b1c8 	.word	0x2001b1c8

08021b0c <ams_main_precharge_drive_open_precharge_function>:

ams_state_t ams_main_precharge_drive_open_precharge_function() {
 8021b0c:	b480      	push	{r7}
 8021b0e:	af00      	add	r7, sp, #0
   if((timer_r3 > 2)) {
 8021b10:	4b1d      	ldr	r3, [pc, #116]	; (8021b88 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 8021b12:	edd3 7a00 	vldr	s15, [r3]
 8021b16:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8021b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b22:	dd08      	ble.n	8021b36 <ams_main_precharge_drive_open_precharge_function+0x2a>
       ams_outputs.error=115;
 8021b24:	4b19      	ldr	r3, [pc, #100]	; (8021b8c <ams_main_precharge_drive_open_precharge_function+0x80>)
 8021b26:	2273      	movs	r2, #115	; 0x73
 8021b28:	711a      	strb	r2, [r3, #4]
       timer_r3 = 0;
 8021b2a:	4b17      	ldr	r3, [pc, #92]	; (8021b88 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 8021b2c:	f04f 0200 	mov.w	r2, #0
 8021b30:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 8021b32:	230b      	movs	r3, #11
 8021b34:	e023      	b.n	8021b7e <ams_main_precharge_drive_open_precharge_function+0x72>
   }

   if((timer_r3 < 2)&&!ams_inputs.precharge_closed) {
 8021b36:	4b14      	ldr	r3, [pc, #80]	; (8021b88 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 8021b38:	edd3 7a00 	vldr	s15, [r3]
 8021b3c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8021b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b48:	d50d      	bpl.n	8021b66 <ams_main_precharge_drive_open_precharge_function+0x5a>
 8021b4a:	4b11      	ldr	r3, [pc, #68]	; (8021b90 <ams_main_precharge_drive_open_precharge_function+0x84>)
 8021b4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8021b50:	2b00      	cmp	r3, #0
 8021b52:	d108      	bne.n	8021b66 <ams_main_precharge_drive_open_precharge_function+0x5a>
       ams_outputs.precharge_drive_complete=1;
 8021b54:	4b0d      	ldr	r3, [pc, #52]	; (8021b8c <ams_main_precharge_drive_open_precharge_function+0x80>)
 8021b56:	2201      	movs	r2, #1
 8021b58:	709a      	strb	r2, [r3, #2]
       timer_r3 = 0;
 8021b5a:	4b0b      	ldr	r3, [pc, #44]	; (8021b88 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 8021b5c:	f04f 0200 	mov.w	r2, #0
 8021b60:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_EXIT;
 8021b62:	230f      	movs	r3, #15
 8021b64:	e00b      	b.n	8021b7e <ams_main_precharge_drive_open_precharge_function+0x72>
   }

   timer_r3 += ams_inputs.Ts;
 8021b66:	4b0a      	ldr	r3, [pc, #40]	; (8021b90 <ams_main_precharge_drive_open_precharge_function+0x84>)
 8021b68:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8021b6c:	4b06      	ldr	r3, [pc, #24]	; (8021b88 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 8021b6e:	edd3 7a00 	vldr	s15, [r3]
 8021b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021b76:	4b04      	ldr	r3, [pc, #16]	; (8021b88 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 8021b78:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_OPEN_PRECHARGE;
 8021b7c:	230e      	movs	r3, #14
}
 8021b7e:	4618      	mov	r0, r3
 8021b80:	46bd      	mov	sp, r7
 8021b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b86:	4770      	bx	lr
 8021b88:	20000a9c 	.word	0x20000a9c
 8021b8c:	2001b1c8 	.word	0x2001b1c8
 8021b90:	2001b168 	.word	0x2001b168

08021b94 <ams_main_precharge_drive_exit_function>:

ams_state_t ams_main_precharge_drive_exit_function() {
 8021b94:	b480      	push	{r7}
 8021b96:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8021b98:	4b08      	ldr	r3, [pc, #32]	; (8021bbc <ams_main_precharge_drive_exit_function+0x28>)
 8021b9a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8021b9e:	4b08      	ldr	r3, [pc, #32]	; (8021bc0 <ams_main_precharge_drive_exit_function+0x2c>)
 8021ba0:	edd3 7a00 	vldr	s15, [r3]
 8021ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021ba8:	4b05      	ldr	r3, [pc, #20]	; (8021bc0 <ams_main_precharge_drive_exit_function+0x2c>)
 8021baa:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_EXIT;
 8021bae:	230f      	movs	r3, #15
}
 8021bb0:	4618      	mov	r0, r3
 8021bb2:	46bd      	mov	sp, r7
 8021bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bb8:	4770      	bx	lr
 8021bba:	bf00      	nop
 8021bbc:	2001b168 	.word	0x2001b168
 8021bc0:	20000a9c 	.word	0x20000a9c

08021bc4 <ams_main_precharge_drive_0_function>:

ams_state_t ams_main_precharge_drive_0_function() {
 8021bc4:	b480      	push	{r7}
 8021bc6:	af00      	add	r7, sp, #0
   if(1) {
       timer_r3 = 0;
 8021bc8:	4b04      	ldr	r3, [pc, #16]	; (8021bdc <ams_main_precharge_drive_0_function+0x18>)
 8021bca:	f04f 0200 	mov.w	r2, #0
 8021bce:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ENTRY;
 8021bd0:	2311      	movs	r3, #17
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_0;
}
 8021bd2:	4618      	mov	r0, r3
 8021bd4:	46bd      	mov	sp, r7
 8021bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bda:	4770      	bx	lr
 8021bdc:	20000a9c 	.word	0x20000a9c

08021be0 <ams_main_precharge_drive_entry_function>:

ams_state_t ams_main_precharge_drive_entry_function() {
 8021be0:	b480      	push	{r7}
 8021be2:	af00      	add	r7, sp, #0
   if(1) {
       ams_outputs.close_air_minus=1;
 8021be4:	4b06      	ldr	r3, [pc, #24]	; (8021c00 <ams_main_precharge_drive_entry_function+0x20>)
 8021be6:	2201      	movs	r2, #1
 8021be8:	705a      	strb	r2, [r3, #1]
       timer_r3 = 0;
 8021bea:	4b06      	ldr	r3, [pc, #24]	; (8021c04 <ams_main_precharge_drive_entry_function+0x24>)
 8021bec:	f04f 0200 	mov.w	r2, #0
 8021bf0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_MINUS;
 8021bf2:	2309      	movs	r3, #9
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_ENTRY;
}
 8021bf4:	4618      	mov	r0, r3
 8021bf6:	46bd      	mov	sp, r7
 8021bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bfc:	4770      	bx	lr
 8021bfe:	bf00      	nop
 8021c00:	2001b1c8 	.word	0x2001b1c8
 8021c04:	20000a9c 	.word	0x20000a9c

08021c08 <ams_main_precharge_drive_function>:

ams_state_t ams_main_precharge_drive_function() {
 8021c08:	b5b0      	push	{r4, r5, r7, lr}
 8021c0a:	af00      	add	r7, sp, #0
   if(timer_r2 < 0.001*ams_inputs.Ts) {
 8021c0c:	4b4c      	ldr	r3, [pc, #304]	; (8021d40 <ams_main_precharge_drive_function+0x138>)
 8021c0e:	681b      	ldr	r3, [r3, #0]
 8021c10:	4618      	mov	r0, r3
 8021c12:	f7de fc8b 	bl	800052c <__aeabi_f2d>
 8021c16:	4604      	mov	r4, r0
 8021c18:	460d      	mov	r5, r1
 8021c1a:	4b4a      	ldr	r3, [pc, #296]	; (8021d44 <ams_main_precharge_drive_function+0x13c>)
 8021c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021c1e:	4618      	mov	r0, r3
 8021c20:	f7de fc84 	bl	800052c <__aeabi_f2d>
 8021c24:	a344      	add	r3, pc, #272	; (adr r3, 8021d38 <ams_main_precharge_drive_function+0x130>)
 8021c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c2a:	f7de fcd7 	bl	80005dc <__aeabi_dmul>
 8021c2e:	4602      	mov	r2, r0
 8021c30:	460b      	mov	r3, r1
 8021c32:	4620      	mov	r0, r4
 8021c34:	4629      	mov	r1, r5
 8021c36:	f7de ff43 	bl	8000ac0 <__aeabi_dcmplt>
 8021c3a:	4603      	mov	r3, r0
 8021c3c:	2b00      	cmp	r3, #0
 8021c3e:	d002      	beq.n	8021c46 <ams_main_precharge_drive_function+0x3e>
       state_r3 = STATE_AMS_MAIN_PRECHARGE_DRIVE_0;
 8021c40:	4b41      	ldr	r3, [pc, #260]	; (8021d48 <ams_main_precharge_drive_function+0x140>)
 8021c42:	2210      	movs	r2, #16
 8021c44:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r3) {
 8021c46:	4b40      	ldr	r3, [pc, #256]	; (8021d48 <ams_main_precharge_drive_function+0x140>)
 8021c48:	781b      	ldrb	r3, [r3, #0]
 8021c4a:	3b09      	subs	r3, #9
 8021c4c:	2b08      	cmp	r3, #8
 8021c4e:	d854      	bhi.n	8021cfa <ams_main_precharge_drive_function+0xf2>
 8021c50:	a201      	add	r2, pc, #4	; (adr r2, 8021c58 <ams_main_precharge_drive_function+0x50>)
 8021c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021c56:	bf00      	nop
 8021c58:	08021c7d 	.word	0x08021c7d
 8021c5c:	08021c8b 	.word	0x08021c8b
 8021c60:	08021c99 	.word	0x08021c99
 8021c64:	08021ca7 	.word	0x08021ca7
 8021c68:	08021cb5 	.word	0x08021cb5
 8021c6c:	08021cc3 	.word	0x08021cc3
 8021c70:	08021cd1 	.word	0x08021cd1
 8021c74:	08021cdf 	.word	0x08021cdf
 8021c78:	08021ced 	.word	0x08021ced
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_MINUS:
           state_r3 = ams_main_precharge_drive_close_air_minus_function();
 8021c7c:	f7ff fe04 	bl	8021888 <ams_main_precharge_drive_close_air_minus_function>
 8021c80:	4603      	mov	r3, r0
 8021c82:	461a      	mov	r2, r3
 8021c84:	4b30      	ldr	r3, [pc, #192]	; (8021d48 <ams_main_precharge_drive_function+0x140>)
 8021c86:	701a      	strb	r2, [r3, #0]
           break;
 8021c88:	e03a      	b.n	8021d00 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_PRECHARGE:
           state_r3 = ams_main_precharge_drive_close_precharge_function();
 8021c8a:	f7ff fe41 	bl	8021910 <ams_main_precharge_drive_close_precharge_function>
 8021c8e:	4603      	mov	r3, r0
 8021c90:	461a      	mov	r2, r3
 8021c92:	4b2d      	ldr	r3, [pc, #180]	; (8021d48 <ams_main_precharge_drive_function+0x140>)
 8021c94:	701a      	strb	r2, [r3, #0]
           break;
 8021c96:	e033      	b.n	8021d00 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR:
           state_r3 = ams_main_precharge_drive_error_function();
 8021c98:	f7ff fe7c 	bl	8021994 <ams_main_precharge_drive_error_function>
 8021c9c:	4603      	mov	r3, r0
 8021c9e:	461a      	mov	r2, r3
 8021ca0:	4b29      	ldr	r3, [pc, #164]	; (8021d48 <ams_main_precharge_drive_function+0x140>)
 8021ca2:	701a      	strb	r2, [r3, #0]
           break;
 8021ca4:	e02c      	b.n	8021d00 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_WAIT:
           state_r3 = ams_main_precharge_drive_wait_function();
 8021ca6:	f7ff fe8f 	bl	80219c8 <ams_main_precharge_drive_wait_function>
 8021caa:	4603      	mov	r3, r0
 8021cac:	461a      	mov	r2, r3
 8021cae:	4b26      	ldr	r3, [pc, #152]	; (8021d48 <ams_main_precharge_drive_function+0x140>)
 8021cb0:	701a      	strb	r2, [r3, #0]
           break;
 8021cb2:	e025      	b.n	8021d00 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_PLUS:
           state_r3 = ams_main_precharge_drive_close_air_plus_function();
 8021cb4:	f7ff fee6 	bl	8021a84 <ams_main_precharge_drive_close_air_plus_function>
 8021cb8:	4603      	mov	r3, r0
 8021cba:	461a      	mov	r2, r3
 8021cbc:	4b22      	ldr	r3, [pc, #136]	; (8021d48 <ams_main_precharge_drive_function+0x140>)
 8021cbe:	701a      	strb	r2, [r3, #0]
           break;
 8021cc0:	e01e      	b.n	8021d00 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_OPEN_PRECHARGE:
           state_r3 = ams_main_precharge_drive_open_precharge_function();
 8021cc2:	f7ff ff23 	bl	8021b0c <ams_main_precharge_drive_open_precharge_function>
 8021cc6:	4603      	mov	r3, r0
 8021cc8:	461a      	mov	r2, r3
 8021cca:	4b1f      	ldr	r3, [pc, #124]	; (8021d48 <ams_main_precharge_drive_function+0x140>)
 8021ccc:	701a      	strb	r2, [r3, #0]
           break;
 8021cce:	e017      	b.n	8021d00 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_EXIT:
           state_r3 = ams_main_precharge_drive_exit_function();
 8021cd0:	f7ff ff60 	bl	8021b94 <ams_main_precharge_drive_exit_function>
 8021cd4:	4603      	mov	r3, r0
 8021cd6:	461a      	mov	r2, r3
 8021cd8:	4b1b      	ldr	r3, [pc, #108]	; (8021d48 <ams_main_precharge_drive_function+0x140>)
 8021cda:	701a      	strb	r2, [r3, #0]
           break;
 8021cdc:	e010      	b.n	8021d00 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_0:
           state_r3 = ams_main_precharge_drive_0_function();
 8021cde:	f7ff ff71 	bl	8021bc4 <ams_main_precharge_drive_0_function>
 8021ce2:	4603      	mov	r3, r0
 8021ce4:	461a      	mov	r2, r3
 8021ce6:	4b18      	ldr	r3, [pc, #96]	; (8021d48 <ams_main_precharge_drive_function+0x140>)
 8021ce8:	701a      	strb	r2, [r3, #0]
           break;
 8021cea:	e009      	b.n	8021d00 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_ENTRY:
           state_r3 = ams_main_precharge_drive_entry_function();
 8021cec:	f7ff ff78 	bl	8021be0 <ams_main_precharge_drive_entry_function>
 8021cf0:	4603      	mov	r3, r0
 8021cf2:	461a      	mov	r2, r3
 8021cf4:	4b14      	ldr	r3, [pc, #80]	; (8021d48 <ams_main_precharge_drive_function+0x140>)
 8021cf6:	701a      	strb	r2, [r3, #0]
           break;
 8021cf8:	e002      	b.n	8021d00 <ams_main_precharge_drive_function+0xf8>
       default:
           ams_error();
 8021cfa:	f7ff fcd4 	bl	80216a6 <ams_error>
           break;
 8021cfe:	bf00      	nop
   }

   if(ams_outputs.precharge_drive_complete) {
 8021d00:	4b12      	ldr	r3, [pc, #72]	; (8021d4c <ams_main_precharge_drive_function+0x144>)
 8021d02:	789b      	ldrb	r3, [r3, #2]
 8021d04:	2b00      	cmp	r3, #0
 8021d06:	d008      	beq.n	8021d1a <ams_main_precharge_drive_function+0x112>
       ams_outputs.precharge_drive_complete=0;
 8021d08:	4b10      	ldr	r3, [pc, #64]	; (8021d4c <ams_main_precharge_drive_function+0x144>)
 8021d0a:	2200      	movs	r2, #0
 8021d0c:	709a      	strb	r2, [r3, #2]
       timer_r2 = 0;
 8021d0e:	4b0c      	ldr	r3, [pc, #48]	; (8021d40 <ams_main_precharge_drive_function+0x138>)
 8021d10:	f04f 0200 	mov.w	r2, #0
 8021d14:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_DRIVE;
 8021d16:	2312      	movs	r3, #18
 8021d18:	e00b      	b.n	8021d32 <ams_main_precharge_drive_function+0x12a>
   }


   timer_r2 += ams_inputs.Ts;
 8021d1a:	4b0a      	ldr	r3, [pc, #40]	; (8021d44 <ams_main_precharge_drive_function+0x13c>)
 8021d1c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8021d20:	4b07      	ldr	r3, [pc, #28]	; (8021d40 <ams_main_precharge_drive_function+0x138>)
 8021d22:	edd3 7a00 	vldr	s15, [r3]
 8021d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021d2a:	4b05      	ldr	r3, [pc, #20]	; (8021d40 <ams_main_precharge_drive_function+0x138>)
 8021d2c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE;
 8021d30:	2308      	movs	r3, #8
}
 8021d32:	4618      	mov	r0, r3
 8021d34:	bdb0      	pop	{r4, r5, r7, pc}
 8021d36:	bf00      	nop
 8021d38:	d2f1a9fc 	.word	0xd2f1a9fc
 8021d3c:	3f50624d 	.word	0x3f50624d
 8021d40:	20000a98 	.word	0x20000a98
 8021d44:	2001b168 	.word	0x2001b168
 8021d48:	20000a8e 	.word	0x20000a8e
 8021d4c:	2001b1c8 	.word	0x2001b1c8

08021d50 <ams_main_drive_0_function>:

ams_state_t ams_main_drive_0_function() {
 8021d50:	b480      	push	{r7}
 8021d52:	af00      	add	r7, sp, #0
   if(1) {
       timer_r3 = 0;
 8021d54:	4b04      	ldr	r3, [pc, #16]	; (8021d68 <ams_main_drive_0_function+0x18>)
 8021d56:	f04f 0200 	mov.w	r2, #0
 8021d5a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_DRIVE_DRIVE;
 8021d5c:	2314      	movs	r3, #20
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_DRIVE_0;
}
 8021d5e:	4618      	mov	r0, r3
 8021d60:	46bd      	mov	sp, r7
 8021d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d66:	4770      	bx	lr
 8021d68:	20000a9c 	.word	0x20000a9c
 8021d6c:	00000000 	.word	0x00000000

08021d70 <ams_main_drive_drive_function>:

ams_state_t ams_main_drive_drive_function() {
 8021d70:	b580      	push	{r7, lr}
 8021d72:	af00      	add	r7, sp, #0
   if((ams_inputs.minimum_cell_voltage<2.85)||!ams_inputs.drive) {
 8021d74:	4b14      	ldr	r3, [pc, #80]	; (8021dc8 <ams_main_drive_drive_function+0x58>)
 8021d76:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8021d7a:	a311      	add	r3, pc, #68	; (adr r3, 8021dc0 <ams_main_drive_drive_function+0x50>)
 8021d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d80:	f7de fe9e 	bl	8000ac0 <__aeabi_dcmplt>
 8021d84:	4603      	mov	r3, r0
 8021d86:	2b00      	cmp	r3, #0
 8021d88:	d104      	bne.n	8021d94 <ams_main_drive_drive_function+0x24>
 8021d8a:	4b0f      	ldr	r3, [pc, #60]	; (8021dc8 <ams_main_drive_drive_function+0x58>)
 8021d8c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8021d90:	2b00      	cmp	r3, #0
 8021d92:	d105      	bne.n	8021da0 <ams_main_drive_drive_function+0x30>
       timer_r3 = 0;
 8021d94:	4b0d      	ldr	r3, [pc, #52]	; (8021dcc <ams_main_drive_drive_function+0x5c>)
 8021d96:	f04f 0200 	mov.w	r2, #0
 8021d9a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_DRIVE_END_DRIVE;
 8021d9c:	2315      	movs	r3, #21
 8021d9e:	e00b      	b.n	8021db8 <ams_main_drive_drive_function+0x48>
   }

   timer_r3 += ams_inputs.Ts;
 8021da0:	4b09      	ldr	r3, [pc, #36]	; (8021dc8 <ams_main_drive_drive_function+0x58>)
 8021da2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8021da6:	4b09      	ldr	r3, [pc, #36]	; (8021dcc <ams_main_drive_drive_function+0x5c>)
 8021da8:	edd3 7a00 	vldr	s15, [r3]
 8021dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021db0:	4b06      	ldr	r3, [pc, #24]	; (8021dcc <ams_main_drive_drive_function+0x5c>)
 8021db2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_DRIVE_DRIVE;
 8021db6:	2314      	movs	r3, #20
}
 8021db8:	4618      	mov	r0, r3
 8021dba:	bd80      	pop	{r7, pc}
 8021dbc:	f3af 8000 	nop.w
 8021dc0:	cccccccd 	.word	0xcccccccd
 8021dc4:	4006cccc 	.word	0x4006cccc
 8021dc8:	2001b168 	.word	0x2001b168
 8021dcc:	20000a9c 	.word	0x20000a9c

08021dd0 <ams_main_drive_end_drive_function>:

ams_state_t ams_main_drive_end_drive_function() {
 8021dd0:	b580      	push	{r7, lr}
 8021dd2:	af00      	add	r7, sp, #0
   if((timer_r3 < 7)&&(fabsf(ams_inputs.accumulator_current)<0.001)) {
 8021dd4:	4b30      	ldr	r3, [pc, #192]	; (8021e98 <ams_main_drive_end_drive_function+0xc8>)
 8021dd6:	edd3 7a00 	vldr	s15, [r3]
 8021dda:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8021dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021de6:	d528      	bpl.n	8021e3a <ams_main_drive_end_drive_function+0x6a>
 8021de8:	4b2c      	ldr	r3, [pc, #176]	; (8021e9c <ams_main_drive_end_drive_function+0xcc>)
 8021dea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021dee:	4610      	mov	r0, r2
 8021df0:	4619      	mov	r1, r3
 8021df2:	f7de feeb 	bl	8000bcc <__aeabi_d2f>
 8021df6:	ee07 0a90 	vmov	s15, r0
 8021dfa:	eef0 7ae7 	vabs.f32	s15, s15
 8021dfe:	ee17 0a90 	vmov	r0, s15
 8021e02:	f7de fb93 	bl	800052c <__aeabi_f2d>
 8021e06:	a322      	add	r3, pc, #136	; (adr r3, 8021e90 <ams_main_drive_end_drive_function+0xc0>)
 8021e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e0c:	f7de fe58 	bl	8000ac0 <__aeabi_dcmplt>
 8021e10:	4603      	mov	r3, r0
 8021e12:	2b00      	cmp	r3, #0
 8021e14:	d011      	beq.n	8021e3a <ams_main_drive_end_drive_function+0x6a>
       ams_outputs.close_air_plus=0;
 8021e16:	4b22      	ldr	r3, [pc, #136]	; (8021ea0 <ams_main_drive_end_drive_function+0xd0>)
 8021e18:	2200      	movs	r2, #0
 8021e1a:	721a      	strb	r2, [r3, #8]
       ams_outputs.close_air_minus=0;
 8021e1c:	4b20      	ldr	r3, [pc, #128]	; (8021ea0 <ams_main_drive_end_drive_function+0xd0>)
 8021e1e:	2200      	movs	r2, #0
 8021e20:	705a      	strb	r2, [r3, #1]
       ams_outputs.close_precharge=0;
 8021e22:	4b1f      	ldr	r3, [pc, #124]	; (8021ea0 <ams_main_drive_end_drive_function+0xd0>)
 8021e24:	2200      	movs	r2, #0
 8021e26:	70da      	strb	r2, [r3, #3]
       ams_outputs.drive_complete=1;
 8021e28:	4b1d      	ldr	r3, [pc, #116]	; (8021ea0 <ams_main_drive_end_drive_function+0xd0>)
 8021e2a:	2201      	movs	r2, #1
 8021e2c:	71da      	strb	r2, [r3, #7]
       timer_r3 = 0;
 8021e2e:	4b1a      	ldr	r3, [pc, #104]	; (8021e98 <ams_main_drive_end_drive_function+0xc8>)
 8021e30:	f04f 0200 	mov.w	r2, #0
 8021e34:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_DRIVE_EXIT;
 8021e36:	2316      	movs	r3, #22
 8021e38:	e027      	b.n	8021e8a <ams_main_drive_end_drive_function+0xba>
   }

   if((timer_r3 > 7)) {
 8021e3a:	4b17      	ldr	r3, [pc, #92]	; (8021e98 <ams_main_drive_end_drive_function+0xc8>)
 8021e3c:	edd3 7a00 	vldr	s15, [r3]
 8021e40:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8021e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e4c:	dd11      	ble.n	8021e72 <ams_main_drive_end_drive_function+0xa2>
       ams_outputs.close_air_plus=0;
 8021e4e:	4b14      	ldr	r3, [pc, #80]	; (8021ea0 <ams_main_drive_end_drive_function+0xd0>)
 8021e50:	2200      	movs	r2, #0
 8021e52:	721a      	strb	r2, [r3, #8]
       ams_outputs.close_air_minus=0;
 8021e54:	4b12      	ldr	r3, [pc, #72]	; (8021ea0 <ams_main_drive_end_drive_function+0xd0>)
 8021e56:	2200      	movs	r2, #0
 8021e58:	705a      	strb	r2, [r3, #1]
       ams_outputs.close_precharge=0;
 8021e5a:	4b11      	ldr	r3, [pc, #68]	; (8021ea0 <ams_main_drive_end_drive_function+0xd0>)
 8021e5c:	2200      	movs	r2, #0
 8021e5e:	70da      	strb	r2, [r3, #3]
       ams_outputs.error=131;
 8021e60:	4b0f      	ldr	r3, [pc, #60]	; (8021ea0 <ams_main_drive_end_drive_function+0xd0>)
 8021e62:	2283      	movs	r2, #131	; 0x83
 8021e64:	711a      	strb	r2, [r3, #4]
       timer_r3 = 0;
 8021e66:	4b0c      	ldr	r3, [pc, #48]	; (8021e98 <ams_main_drive_end_drive_function+0xc8>)
 8021e68:	f04f 0200 	mov.w	r2, #0
 8021e6c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_DRIVE_FORCE_QUIT;
 8021e6e:	2317      	movs	r3, #23
 8021e70:	e00b      	b.n	8021e8a <ams_main_drive_end_drive_function+0xba>
   }

   timer_r3 += ams_inputs.Ts;
 8021e72:	4b0a      	ldr	r3, [pc, #40]	; (8021e9c <ams_main_drive_end_drive_function+0xcc>)
 8021e74:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8021e78:	4b07      	ldr	r3, [pc, #28]	; (8021e98 <ams_main_drive_end_drive_function+0xc8>)
 8021e7a:	edd3 7a00 	vldr	s15, [r3]
 8021e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021e82:	4b05      	ldr	r3, [pc, #20]	; (8021e98 <ams_main_drive_end_drive_function+0xc8>)
 8021e84:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_DRIVE_END_DRIVE;
 8021e88:	2315      	movs	r3, #21
}
 8021e8a:	4618      	mov	r0, r3
 8021e8c:	bd80      	pop	{r7, pc}
 8021e8e:	bf00      	nop
 8021e90:	d2f1a9fc 	.word	0xd2f1a9fc
 8021e94:	3f50624d 	.word	0x3f50624d
 8021e98:	20000a9c 	.word	0x20000a9c
 8021e9c:	2001b168 	.word	0x2001b168
 8021ea0:	2001b1c8 	.word	0x2001b1c8

08021ea4 <ams_main_drive_exit_function>:

ams_state_t ams_main_drive_exit_function() {
 8021ea4:	b480      	push	{r7}
 8021ea6:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8021ea8:	4b08      	ldr	r3, [pc, #32]	; (8021ecc <ams_main_drive_exit_function+0x28>)
 8021eaa:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8021eae:	4b08      	ldr	r3, [pc, #32]	; (8021ed0 <ams_main_drive_exit_function+0x2c>)
 8021eb0:	edd3 7a00 	vldr	s15, [r3]
 8021eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021eb8:	4b05      	ldr	r3, [pc, #20]	; (8021ed0 <ams_main_drive_exit_function+0x2c>)
 8021eba:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_DRIVE_EXIT;
 8021ebe:	2316      	movs	r3, #22
}
 8021ec0:	4618      	mov	r0, r3
 8021ec2:	46bd      	mov	sp, r7
 8021ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ec8:	4770      	bx	lr
 8021eca:	bf00      	nop
 8021ecc:	2001b168 	.word	0x2001b168
 8021ed0:	20000a9c 	.word	0x20000a9c

08021ed4 <ams_main_drive_force_quit_function>:

ams_state_t ams_main_drive_force_quit_function() {
 8021ed4:	b480      	push	{r7}
 8021ed6:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8021ed8:	4b08      	ldr	r3, [pc, #32]	; (8021efc <ams_main_drive_force_quit_function+0x28>)
 8021eda:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8021ede:	4b08      	ldr	r3, [pc, #32]	; (8021f00 <ams_main_drive_force_quit_function+0x2c>)
 8021ee0:	edd3 7a00 	vldr	s15, [r3]
 8021ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021ee8:	4b05      	ldr	r3, [pc, #20]	; (8021f00 <ams_main_drive_force_quit_function+0x2c>)
 8021eea:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_DRIVE_FORCE_QUIT;
 8021eee:	2317      	movs	r3, #23
}
 8021ef0:	4618      	mov	r0, r3
 8021ef2:	46bd      	mov	sp, r7
 8021ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ef8:	4770      	bx	lr
 8021efa:	bf00      	nop
 8021efc:	2001b168 	.word	0x2001b168
 8021f00:	20000a9c 	.word	0x20000a9c
 8021f04:	00000000 	.word	0x00000000

08021f08 <ams_main_drive_function>:

ams_state_t ams_main_drive_function() {
 8021f08:	b5b0      	push	{r4, r5, r7, lr}
 8021f0a:	af00      	add	r7, sp, #0
   if(timer_r2 < 0.001*ams_inputs.Ts) {
 8021f0c:	4b3a      	ldr	r3, [pc, #232]	; (8021ff8 <ams_main_drive_function+0xf0>)
 8021f0e:	681b      	ldr	r3, [r3, #0]
 8021f10:	4618      	mov	r0, r3
 8021f12:	f7de fb0b 	bl	800052c <__aeabi_f2d>
 8021f16:	4604      	mov	r4, r0
 8021f18:	460d      	mov	r5, r1
 8021f1a:	4b38      	ldr	r3, [pc, #224]	; (8021ffc <ams_main_drive_function+0xf4>)
 8021f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021f1e:	4618      	mov	r0, r3
 8021f20:	f7de fb04 	bl	800052c <__aeabi_f2d>
 8021f24:	a332      	add	r3, pc, #200	; (adr r3, 8021ff0 <ams_main_drive_function+0xe8>)
 8021f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f2a:	f7de fb57 	bl	80005dc <__aeabi_dmul>
 8021f2e:	4602      	mov	r2, r0
 8021f30:	460b      	mov	r3, r1
 8021f32:	4620      	mov	r0, r4
 8021f34:	4629      	mov	r1, r5
 8021f36:	f7de fdc3 	bl	8000ac0 <__aeabi_dcmplt>
 8021f3a:	4603      	mov	r3, r0
 8021f3c:	2b00      	cmp	r3, #0
 8021f3e:	d002      	beq.n	8021f46 <ams_main_drive_function+0x3e>
       state_r3 = STATE_AMS_MAIN_DRIVE_0;
 8021f40:	4b2f      	ldr	r3, [pc, #188]	; (8022000 <ams_main_drive_function+0xf8>)
 8021f42:	2213      	movs	r2, #19
 8021f44:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r3) {
 8021f46:	4b2e      	ldr	r3, [pc, #184]	; (8022000 <ams_main_drive_function+0xf8>)
 8021f48:	781b      	ldrb	r3, [r3, #0]
 8021f4a:	3b13      	subs	r3, #19
 8021f4c:	2b04      	cmp	r3, #4
 8021f4e:	d830      	bhi.n	8021fb2 <ams_main_drive_function+0xaa>
 8021f50:	a201      	add	r2, pc, #4	; (adr r2, 8021f58 <ams_main_drive_function+0x50>)
 8021f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021f56:	bf00      	nop
 8021f58:	08021f6d 	.word	0x08021f6d
 8021f5c:	08021f7b 	.word	0x08021f7b
 8021f60:	08021f89 	.word	0x08021f89
 8021f64:	08021f97 	.word	0x08021f97
 8021f68:	08021fa5 	.word	0x08021fa5
       case STATE_AMS_MAIN_DRIVE_0:
           state_r3 = ams_main_drive_0_function();
 8021f6c:	f7ff fef0 	bl	8021d50 <ams_main_drive_0_function>
 8021f70:	4603      	mov	r3, r0
 8021f72:	461a      	mov	r2, r3
 8021f74:	4b22      	ldr	r3, [pc, #136]	; (8022000 <ams_main_drive_function+0xf8>)
 8021f76:	701a      	strb	r2, [r3, #0]
           break;
 8021f78:	e01e      	b.n	8021fb8 <ams_main_drive_function+0xb0>
       case STATE_AMS_MAIN_DRIVE_DRIVE:
           state_r3 = ams_main_drive_drive_function();
 8021f7a:	f7ff fef9 	bl	8021d70 <ams_main_drive_drive_function>
 8021f7e:	4603      	mov	r3, r0
 8021f80:	461a      	mov	r2, r3
 8021f82:	4b1f      	ldr	r3, [pc, #124]	; (8022000 <ams_main_drive_function+0xf8>)
 8021f84:	701a      	strb	r2, [r3, #0]
           break;
 8021f86:	e017      	b.n	8021fb8 <ams_main_drive_function+0xb0>
       case STATE_AMS_MAIN_DRIVE_END_DRIVE:
           state_r3 = ams_main_drive_end_drive_function();
 8021f88:	f7ff ff22 	bl	8021dd0 <ams_main_drive_end_drive_function>
 8021f8c:	4603      	mov	r3, r0
 8021f8e:	461a      	mov	r2, r3
 8021f90:	4b1b      	ldr	r3, [pc, #108]	; (8022000 <ams_main_drive_function+0xf8>)
 8021f92:	701a      	strb	r2, [r3, #0]
           break;
 8021f94:	e010      	b.n	8021fb8 <ams_main_drive_function+0xb0>
       case STATE_AMS_MAIN_DRIVE_EXIT:
           state_r3 = ams_main_drive_exit_function();
 8021f96:	f7ff ff85 	bl	8021ea4 <ams_main_drive_exit_function>
 8021f9a:	4603      	mov	r3, r0
 8021f9c:	461a      	mov	r2, r3
 8021f9e:	4b18      	ldr	r3, [pc, #96]	; (8022000 <ams_main_drive_function+0xf8>)
 8021fa0:	701a      	strb	r2, [r3, #0]
           break;
 8021fa2:	e009      	b.n	8021fb8 <ams_main_drive_function+0xb0>
       case STATE_AMS_MAIN_DRIVE_FORCE_QUIT:
           state_r3 = ams_main_drive_force_quit_function();
 8021fa4:	f7ff ff96 	bl	8021ed4 <ams_main_drive_force_quit_function>
 8021fa8:	4603      	mov	r3, r0
 8021faa:	461a      	mov	r2, r3
 8021fac:	4b14      	ldr	r3, [pc, #80]	; (8022000 <ams_main_drive_function+0xf8>)
 8021fae:	701a      	strb	r2, [r3, #0]
           break;
 8021fb0:	e002      	b.n	8021fb8 <ams_main_drive_function+0xb0>
       default:
           ams_error();
 8021fb2:	f7ff fb78 	bl	80216a6 <ams_error>
           break;
 8021fb6:	bf00      	nop
   }

   if(ams_outputs.drive_complete) {
 8021fb8:	4b12      	ldr	r3, [pc, #72]	; (8022004 <ams_main_drive_function+0xfc>)
 8021fba:	79db      	ldrb	r3, [r3, #7]
 8021fbc:	2b00      	cmp	r3, #0
 8021fbe:	d008      	beq.n	8021fd2 <ams_main_drive_function+0xca>
       ams_outputs.drive_complete=0;
 8021fc0:	4b10      	ldr	r3, [pc, #64]	; (8022004 <ams_main_drive_function+0xfc>)
 8021fc2:	2200      	movs	r2, #0
 8021fc4:	71da      	strb	r2, [r3, #7]
       timer_r2 = 0;
 8021fc6:	4b0c      	ldr	r3, [pc, #48]	; (8021ff8 <ams_main_drive_function+0xf0>)
 8021fc8:	f04f 0200 	mov.w	r2, #0
 8021fcc:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_IDLE;
 8021fce:	2328      	movs	r3, #40	; 0x28
 8021fd0:	e00b      	b.n	8021fea <ams_main_drive_function+0xe2>
   }


   timer_r2 += ams_inputs.Ts;
 8021fd2:	4b0a      	ldr	r3, [pc, #40]	; (8021ffc <ams_main_drive_function+0xf4>)
 8021fd4:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8021fd8:	4b07      	ldr	r3, [pc, #28]	; (8021ff8 <ams_main_drive_function+0xf0>)
 8021fda:	edd3 7a00 	vldr	s15, [r3]
 8021fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021fe2:	4b05      	ldr	r3, [pc, #20]	; (8021ff8 <ams_main_drive_function+0xf0>)
 8021fe4:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_DRIVE;
 8021fe8:	2312      	movs	r3, #18
}
 8021fea:	4618      	mov	r0, r3
 8021fec:	bdb0      	pop	{r4, r5, r7, pc}
 8021fee:	bf00      	nop
 8021ff0:	d2f1a9fc 	.word	0xd2f1a9fc
 8021ff4:	3f50624d 	.word	0x3f50624d
 8021ff8:	20000a98 	.word	0x20000a98
 8021ffc:	2001b168 	.word	0x2001b168
 8022000:	20000a8e 	.word	0x20000a8e
 8022004:	2001b1c8 	.word	0x2001b1c8

08022008 <ams_main_precharge_charge_close_air_minus_function>:

ams_state_t ams_main_precharge_charge_close_air_minus_function() {
 8022008:	b480      	push	{r7}
 802200a:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.air_minus_closed) {
 802200c:	4b1d      	ldr	r3, [pc, #116]	; (8022084 <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 802200e:	edd3 7a00 	vldr	s15, [r3]
 8022012:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8022016:	eef4 7ac7 	vcmpe.f32	s15, s14
 802201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802201e:	d50d      	bpl.n	802203c <ams_main_precharge_charge_close_air_minus_function+0x34>
 8022020:	4b19      	ldr	r3, [pc, #100]	; (8022088 <ams_main_precharge_charge_close_air_minus_function+0x80>)
 8022022:	f893 3020 	ldrb.w	r3, [r3, #32]
 8022026:	2b00      	cmp	r3, #0
 8022028:	d008      	beq.n	802203c <ams_main_precharge_charge_close_air_minus_function+0x34>
       ams_outputs.close_precharge=1;
 802202a:	4b18      	ldr	r3, [pc, #96]	; (802208c <ams_main_precharge_charge_close_air_minus_function+0x84>)
 802202c:	2201      	movs	r2, #1
 802202e:	70da      	strb	r2, [r3, #3]
       timer_r3 = 0;
 8022030:	4b14      	ldr	r3, [pc, #80]	; (8022084 <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 8022032:	f04f 0200 	mov.w	r2, #0
 8022036:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_PRECHARGE;
 8022038:	231a      	movs	r3, #26
 802203a:	e01e      	b.n	802207a <ams_main_precharge_charge_close_air_minus_function+0x72>
   }

   if((timer_r3 > 2)) {
 802203c:	4b11      	ldr	r3, [pc, #68]	; (8022084 <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 802203e:	edd3 7a00 	vldr	s15, [r3]
 8022042:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8022046:	eef4 7ac7 	vcmpe.f32	s15, s14
 802204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802204e:	dd08      	ble.n	8022062 <ams_main_precharge_charge_close_air_minus_function+0x5a>
       ams_outputs.error=122;
 8022050:	4b0e      	ldr	r3, [pc, #56]	; (802208c <ams_main_precharge_charge_close_air_minus_function+0x84>)
 8022052:	227a      	movs	r2, #122	; 0x7a
 8022054:	711a      	strb	r2, [r3, #4]
       timer_r3 = 0;
 8022056:	4b0b      	ldr	r3, [pc, #44]	; (8022084 <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 8022058:	f04f 0200 	mov.w	r2, #0
 802205c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 802205e:	231b      	movs	r3, #27
 8022060:	e00b      	b.n	802207a <ams_main_precharge_charge_close_air_minus_function+0x72>
   }

   timer_r3 += ams_inputs.Ts;
 8022062:	4b09      	ldr	r3, [pc, #36]	; (8022088 <ams_main_precharge_charge_close_air_minus_function+0x80>)
 8022064:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8022068:	4b06      	ldr	r3, [pc, #24]	; (8022084 <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 802206a:	edd3 7a00 	vldr	s15, [r3]
 802206e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022072:	4b04      	ldr	r3, [pc, #16]	; (8022084 <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 8022074:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_MINUS;
 8022078:	2319      	movs	r3, #25
}
 802207a:	4618      	mov	r0, r3
 802207c:	46bd      	mov	sp, r7
 802207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022082:	4770      	bx	lr
 8022084:	20000a9c 	.word	0x20000a9c
 8022088:	2001b168 	.word	0x2001b168
 802208c:	2001b1c8 	.word	0x2001b1c8

08022090 <ams_main_precharge_charge_close_precharge_function>:

ams_state_t ams_main_precharge_charge_close_precharge_function() {
 8022090:	b480      	push	{r7}
 8022092:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.precharge_closed) {
 8022094:	4b1c      	ldr	r3, [pc, #112]	; (8022108 <ams_main_precharge_charge_close_precharge_function+0x78>)
 8022096:	edd3 7a00 	vldr	s15, [r3]
 802209a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802209e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80220a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220a6:	d50a      	bpl.n	80220be <ams_main_precharge_charge_close_precharge_function+0x2e>
 80220a8:	4b18      	ldr	r3, [pc, #96]	; (802210c <ams_main_precharge_charge_close_precharge_function+0x7c>)
 80220aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80220ae:	2b00      	cmp	r3, #0
 80220b0:	d005      	beq.n	80220be <ams_main_precharge_charge_close_precharge_function+0x2e>
       timer_r3 = 0;
 80220b2:	4b15      	ldr	r3, [pc, #84]	; (8022108 <ams_main_precharge_charge_close_precharge_function+0x78>)
 80220b4:	f04f 0200 	mov.w	r2, #0
 80220b8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_WAIT;
 80220ba:	231c      	movs	r3, #28
 80220bc:	e01e      	b.n	80220fc <ams_main_precharge_charge_close_precharge_function+0x6c>
   }

   if((timer_r3 > 2)) {
 80220be:	4b12      	ldr	r3, [pc, #72]	; (8022108 <ams_main_precharge_charge_close_precharge_function+0x78>)
 80220c0:	edd3 7a00 	vldr	s15, [r3]
 80220c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80220c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80220cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220d0:	dd08      	ble.n	80220e4 <ams_main_precharge_charge_close_precharge_function+0x54>
       ams_outputs.error=123;
 80220d2:	4b0f      	ldr	r3, [pc, #60]	; (8022110 <ams_main_precharge_charge_close_precharge_function+0x80>)
 80220d4:	227b      	movs	r2, #123	; 0x7b
 80220d6:	711a      	strb	r2, [r3, #4]
       timer_r3 = 0;
 80220d8:	4b0b      	ldr	r3, [pc, #44]	; (8022108 <ams_main_precharge_charge_close_precharge_function+0x78>)
 80220da:	f04f 0200 	mov.w	r2, #0
 80220de:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 80220e0:	231b      	movs	r3, #27
 80220e2:	e00b      	b.n	80220fc <ams_main_precharge_charge_close_precharge_function+0x6c>
   }

   timer_r3 += ams_inputs.Ts;
 80220e4:	4b09      	ldr	r3, [pc, #36]	; (802210c <ams_main_precharge_charge_close_precharge_function+0x7c>)
 80220e6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80220ea:	4b07      	ldr	r3, [pc, #28]	; (8022108 <ams_main_precharge_charge_close_precharge_function+0x78>)
 80220ec:	edd3 7a00 	vldr	s15, [r3]
 80220f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80220f4:	4b04      	ldr	r3, [pc, #16]	; (8022108 <ams_main_precharge_charge_close_precharge_function+0x78>)
 80220f6:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_PRECHARGE;
 80220fa:	231a      	movs	r3, #26
}
 80220fc:	4618      	mov	r0, r3
 80220fe:	46bd      	mov	sp, r7
 8022100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022104:	4770      	bx	lr
 8022106:	bf00      	nop
 8022108:	20000a9c 	.word	0x20000a9c
 802210c:	2001b168 	.word	0x2001b168
 8022110:	2001b1c8 	.word	0x2001b1c8

08022114 <ams_main_precharge_charge_error_function>:

ams_state_t ams_main_precharge_charge_error_function() {
 8022114:	b480      	push	{r7}
 8022116:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8022118:	4b08      	ldr	r3, [pc, #32]	; (802213c <ams_main_precharge_charge_error_function+0x28>)
 802211a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 802211e:	4b08      	ldr	r3, [pc, #32]	; (8022140 <ams_main_precharge_charge_error_function+0x2c>)
 8022120:	edd3 7a00 	vldr	s15, [r3]
 8022124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022128:	4b05      	ldr	r3, [pc, #20]	; (8022140 <ams_main_precharge_charge_error_function+0x2c>)
 802212a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 802212e:	231b      	movs	r3, #27
}
 8022130:	4618      	mov	r0, r3
 8022132:	46bd      	mov	sp, r7
 8022134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022138:	4770      	bx	lr
 802213a:	bf00      	nop
 802213c:	2001b168 	.word	0x2001b168
 8022140:	20000a9c 	.word	0x20000a9c
 8022144:	00000000 	.word	0x00000000

08022148 <ams_main_precharge_charge_wait_function>:

ams_state_t ams_main_precharge_charge_wait_function() {
 8022148:	b580      	push	{r7, lr}
 802214a:	af00      	add	r7, sp, #0
   if((timer_r3 > 5)&&(timer_r3 < 30)&&(ams_inputs.accumulator_voltage*0.95<ams_inputs.vehicle_voltage)) {
 802214c:	4b2a      	ldr	r3, [pc, #168]	; (80221f8 <ams_main_precharge_charge_wait_function+0xb0>)
 802214e:	edd3 7a00 	vldr	s15, [r3]
 8022152:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8022156:	eef4 7ac7 	vcmpe.f32	s15, s14
 802215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802215e:	dd26      	ble.n	80221ae <ams_main_precharge_charge_wait_function+0x66>
 8022160:	4b25      	ldr	r3, [pc, #148]	; (80221f8 <ams_main_precharge_charge_wait_function+0xb0>)
 8022162:	edd3 7a00 	vldr	s15, [r3]
 8022166:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 802216a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802216e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022172:	d51c      	bpl.n	80221ae <ams_main_precharge_charge_wait_function+0x66>
 8022174:	4b21      	ldr	r3, [pc, #132]	; (80221fc <ams_main_precharge_charge_wait_function+0xb4>)
 8022176:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 802217a:	a31d      	add	r3, pc, #116	; (adr r3, 80221f0 <ams_main_precharge_charge_wait_function+0xa8>)
 802217c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022180:	f7de fa2c 	bl	80005dc <__aeabi_dmul>
 8022184:	4602      	mov	r2, r0
 8022186:	460b      	mov	r3, r1
 8022188:	4610      	mov	r0, r2
 802218a:	4619      	mov	r1, r3
 802218c:	4b1b      	ldr	r3, [pc, #108]	; (80221fc <ams_main_precharge_charge_wait_function+0xb4>)
 802218e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8022192:	f7de fc95 	bl	8000ac0 <__aeabi_dcmplt>
 8022196:	4603      	mov	r3, r0
 8022198:	2b00      	cmp	r3, #0
 802219a:	d008      	beq.n	80221ae <ams_main_precharge_charge_wait_function+0x66>
       ams_outputs.close_air_plus=1;
 802219c:	4b18      	ldr	r3, [pc, #96]	; (8022200 <ams_main_precharge_charge_wait_function+0xb8>)
 802219e:	2201      	movs	r2, #1
 80221a0:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 80221a2:	4b15      	ldr	r3, [pc, #84]	; (80221f8 <ams_main_precharge_charge_wait_function+0xb0>)
 80221a4:	f04f 0200 	mov.w	r2, #0
 80221a8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_PLUS;
 80221aa:	231d      	movs	r3, #29
 80221ac:	e01e      	b.n	80221ec <ams_main_precharge_charge_wait_function+0xa4>
   }

   if((timer_r3 > 30)) {
 80221ae:	4b12      	ldr	r3, [pc, #72]	; (80221f8 <ams_main_precharge_charge_wait_function+0xb0>)
 80221b0:	edd3 7a00 	vldr	s15, [r3]
 80221b4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80221b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80221bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221c0:	dd08      	ble.n	80221d4 <ams_main_precharge_charge_wait_function+0x8c>
       ams_outputs.error=124;
 80221c2:	4b0f      	ldr	r3, [pc, #60]	; (8022200 <ams_main_precharge_charge_wait_function+0xb8>)
 80221c4:	227c      	movs	r2, #124	; 0x7c
 80221c6:	711a      	strb	r2, [r3, #4]
       timer_r3 = 0;
 80221c8:	4b0b      	ldr	r3, [pc, #44]	; (80221f8 <ams_main_precharge_charge_wait_function+0xb0>)
 80221ca:	f04f 0200 	mov.w	r2, #0
 80221ce:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 80221d0:	231b      	movs	r3, #27
 80221d2:	e00b      	b.n	80221ec <ams_main_precharge_charge_wait_function+0xa4>
   }

   timer_r3 += ams_inputs.Ts;
 80221d4:	4b09      	ldr	r3, [pc, #36]	; (80221fc <ams_main_precharge_charge_wait_function+0xb4>)
 80221d6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80221da:	4b07      	ldr	r3, [pc, #28]	; (80221f8 <ams_main_precharge_charge_wait_function+0xb0>)
 80221dc:	edd3 7a00 	vldr	s15, [r3]
 80221e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80221e4:	4b04      	ldr	r3, [pc, #16]	; (80221f8 <ams_main_precharge_charge_wait_function+0xb0>)
 80221e6:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_WAIT;
 80221ea:	231c      	movs	r3, #28
}
 80221ec:	4618      	mov	r0, r3
 80221ee:	bd80      	pop	{r7, pc}
 80221f0:	66666666 	.word	0x66666666
 80221f4:	3fee6666 	.word	0x3fee6666
 80221f8:	20000a9c 	.word	0x20000a9c
 80221fc:	2001b168 	.word	0x2001b168
 8022200:	2001b1c8 	.word	0x2001b1c8

08022204 <ams_main_precharge_charge_close_air_plus_function>:

ams_state_t ams_main_precharge_charge_close_air_plus_function() {
 8022204:	b480      	push	{r7}
 8022206:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.air_plus_closed) {
 8022208:	4b1d      	ldr	r3, [pc, #116]	; (8022280 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 802220a:	edd3 7a00 	vldr	s15, [r3]
 802220e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8022212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802221a:	d50c      	bpl.n	8022236 <ams_main_precharge_charge_close_air_plus_function+0x32>
 802221c:	4b19      	ldr	r3, [pc, #100]	; (8022284 <ams_main_precharge_charge_close_air_plus_function+0x80>)
 802221e:	7c5b      	ldrb	r3, [r3, #17]
 8022220:	2b00      	cmp	r3, #0
 8022222:	d008      	beq.n	8022236 <ams_main_precharge_charge_close_air_plus_function+0x32>
       ams_outputs.close_precharge=0;
 8022224:	4b18      	ldr	r3, [pc, #96]	; (8022288 <ams_main_precharge_charge_close_air_plus_function+0x84>)
 8022226:	2200      	movs	r2, #0
 8022228:	70da      	strb	r2, [r3, #3]
       timer_r3 = 0;
 802222a:	4b15      	ldr	r3, [pc, #84]	; (8022280 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 802222c:	f04f 0200 	mov.w	r2, #0
 8022230:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_OPEN_PRECHARGE;
 8022232:	231e      	movs	r3, #30
 8022234:	e01e      	b.n	8022274 <ams_main_precharge_charge_close_air_plus_function+0x70>
   }

   if((timer_r3 > 2)) {
 8022236:	4b12      	ldr	r3, [pc, #72]	; (8022280 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 8022238:	edd3 7a00 	vldr	s15, [r3]
 802223c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8022240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022248:	dd08      	ble.n	802225c <ams_main_precharge_charge_close_air_plus_function+0x58>
       ams_outputs.error=125;
 802224a:	4b0f      	ldr	r3, [pc, #60]	; (8022288 <ams_main_precharge_charge_close_air_plus_function+0x84>)
 802224c:	227d      	movs	r2, #125	; 0x7d
 802224e:	711a      	strb	r2, [r3, #4]
       timer_r3 = 0;
 8022250:	4b0b      	ldr	r3, [pc, #44]	; (8022280 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 8022252:	f04f 0200 	mov.w	r2, #0
 8022256:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 8022258:	231b      	movs	r3, #27
 802225a:	e00b      	b.n	8022274 <ams_main_precharge_charge_close_air_plus_function+0x70>
   }

   timer_r3 += ams_inputs.Ts;
 802225c:	4b09      	ldr	r3, [pc, #36]	; (8022284 <ams_main_precharge_charge_close_air_plus_function+0x80>)
 802225e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8022262:	4b07      	ldr	r3, [pc, #28]	; (8022280 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 8022264:	edd3 7a00 	vldr	s15, [r3]
 8022268:	ee77 7a27 	vadd.f32	s15, s14, s15
 802226c:	4b04      	ldr	r3, [pc, #16]	; (8022280 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 802226e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_PLUS;
 8022272:	231d      	movs	r3, #29
}
 8022274:	4618      	mov	r0, r3
 8022276:	46bd      	mov	sp, r7
 8022278:	f85d 7b04 	ldr.w	r7, [sp], #4
 802227c:	4770      	bx	lr
 802227e:	bf00      	nop
 8022280:	20000a9c 	.word	0x20000a9c
 8022284:	2001b168 	.word	0x2001b168
 8022288:	2001b1c8 	.word	0x2001b1c8

0802228c <ams_main_precharge_charge_open_precharge_function>:

ams_state_t ams_main_precharge_charge_open_precharge_function() {
 802228c:	b480      	push	{r7}
 802228e:	af00      	add	r7, sp, #0
   if((timer_r3 > 2)) {
 8022290:	4b1d      	ldr	r3, [pc, #116]	; (8022308 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 8022292:	edd3 7a00 	vldr	s15, [r3]
 8022296:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802229a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222a2:	dd08      	ble.n	80222b6 <ams_main_precharge_charge_open_precharge_function+0x2a>
       ams_outputs.error=126;
 80222a4:	4b19      	ldr	r3, [pc, #100]	; (802230c <ams_main_precharge_charge_open_precharge_function+0x80>)
 80222a6:	227e      	movs	r2, #126	; 0x7e
 80222a8:	711a      	strb	r2, [r3, #4]
       timer_r3 = 0;
 80222aa:	4b17      	ldr	r3, [pc, #92]	; (8022308 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 80222ac:	f04f 0200 	mov.w	r2, #0
 80222b0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 80222b2:	231b      	movs	r3, #27
 80222b4:	e023      	b.n	80222fe <ams_main_precharge_charge_open_precharge_function+0x72>
   }

   if((timer_r3 < 2)&&!ams_inputs.precharge_closed) {
 80222b6:	4b14      	ldr	r3, [pc, #80]	; (8022308 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 80222b8:	edd3 7a00 	vldr	s15, [r3]
 80222bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80222c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80222c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222c8:	d50d      	bpl.n	80222e6 <ams_main_precharge_charge_open_precharge_function+0x5a>
 80222ca:	4b11      	ldr	r3, [pc, #68]	; (8022310 <ams_main_precharge_charge_open_precharge_function+0x84>)
 80222cc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80222d0:	2b00      	cmp	r3, #0
 80222d2:	d108      	bne.n	80222e6 <ams_main_precharge_charge_open_precharge_function+0x5a>
       ams_outputs.precharge_charge_complete=1;
 80222d4:	4b0d      	ldr	r3, [pc, #52]	; (802230c <ams_main_precharge_charge_open_precharge_function+0x80>)
 80222d6:	2201      	movs	r2, #1
 80222d8:	715a      	strb	r2, [r3, #5]
       timer_r3 = 0;
 80222da:	4b0b      	ldr	r3, [pc, #44]	; (8022308 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 80222dc:	f04f 0200 	mov.w	r2, #0
 80222e0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_EXIT;
 80222e2:	231f      	movs	r3, #31
 80222e4:	e00b      	b.n	80222fe <ams_main_precharge_charge_open_precharge_function+0x72>
   }

   timer_r3 += ams_inputs.Ts;
 80222e6:	4b0a      	ldr	r3, [pc, #40]	; (8022310 <ams_main_precharge_charge_open_precharge_function+0x84>)
 80222e8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80222ec:	4b06      	ldr	r3, [pc, #24]	; (8022308 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 80222ee:	edd3 7a00 	vldr	s15, [r3]
 80222f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80222f6:	4b04      	ldr	r3, [pc, #16]	; (8022308 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 80222f8:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_OPEN_PRECHARGE;
 80222fc:	231e      	movs	r3, #30
}
 80222fe:	4618      	mov	r0, r3
 8022300:	46bd      	mov	sp, r7
 8022302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022306:	4770      	bx	lr
 8022308:	20000a9c 	.word	0x20000a9c
 802230c:	2001b1c8 	.word	0x2001b1c8
 8022310:	2001b168 	.word	0x2001b168

08022314 <ams_main_precharge_charge_exit_function>:

ams_state_t ams_main_precharge_charge_exit_function() {
 8022314:	b480      	push	{r7}
 8022316:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8022318:	4b08      	ldr	r3, [pc, #32]	; (802233c <ams_main_precharge_charge_exit_function+0x28>)
 802231a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 802231e:	4b08      	ldr	r3, [pc, #32]	; (8022340 <ams_main_precharge_charge_exit_function+0x2c>)
 8022320:	edd3 7a00 	vldr	s15, [r3]
 8022324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022328:	4b05      	ldr	r3, [pc, #20]	; (8022340 <ams_main_precharge_charge_exit_function+0x2c>)
 802232a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_EXIT;
 802232e:	231f      	movs	r3, #31
}
 8022330:	4618      	mov	r0, r3
 8022332:	46bd      	mov	sp, r7
 8022334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022338:	4770      	bx	lr
 802233a:	bf00      	nop
 802233c:	2001b168 	.word	0x2001b168
 8022340:	20000a9c 	.word	0x20000a9c

08022344 <ams_main_precharge_charge_0_function>:

ams_state_t ams_main_precharge_charge_0_function() {
 8022344:	b480      	push	{r7}
 8022346:	af00      	add	r7, sp, #0
   if(1) {
       timer_r3 = 0;
 8022348:	4b04      	ldr	r3, [pc, #16]	; (802235c <ams_main_precharge_charge_0_function+0x18>)
 802234a:	f04f 0200 	mov.w	r2, #0
 802234e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_WAKE_CHARGER;
 8022350:	2321      	movs	r3, #33	; 0x21
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_0;
}
 8022352:	4618      	mov	r0, r3
 8022354:	46bd      	mov	sp, r7
 8022356:	f85d 7b04 	ldr.w	r7, [sp], #4
 802235a:	4770      	bx	lr
 802235c:	20000a9c 	.word	0x20000a9c

08022360 <ams_main_precharge_charge_wake_charger_function>:

ams_state_t ams_main_precharge_charge_wake_charger_function() {
 8022360:	b480      	push	{r7}
 8022362:	af00      	add	r7, sp, #0
   if((timer_r3 < 10)&&ams_inputs.charger_is_awake) {
 8022364:	4b1d      	ldr	r3, [pc, #116]	; (80223dc <ams_main_precharge_charge_wake_charger_function+0x7c>)
 8022366:	edd3 7a00 	vldr	s15, [r3]
 802236a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 802236e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022376:	d50d      	bpl.n	8022394 <ams_main_precharge_charge_wake_charger_function+0x34>
 8022378:	4b19      	ldr	r3, [pc, #100]	; (80223e0 <ams_main_precharge_charge_wake_charger_function+0x80>)
 802237a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 802237e:	2b00      	cmp	r3, #0
 8022380:	d008      	beq.n	8022394 <ams_main_precharge_charge_wake_charger_function+0x34>
       ams_outputs.close_air_minus=1;
 8022382:	4b18      	ldr	r3, [pc, #96]	; (80223e4 <ams_main_precharge_charge_wake_charger_function+0x84>)
 8022384:	2201      	movs	r2, #1
 8022386:	705a      	strb	r2, [r3, #1]
       timer_r3 = 0;
 8022388:	4b14      	ldr	r3, [pc, #80]	; (80223dc <ams_main_precharge_charge_wake_charger_function+0x7c>)
 802238a:	f04f 0200 	mov.w	r2, #0
 802238e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_MINUS;
 8022390:	2319      	movs	r3, #25
 8022392:	e01e      	b.n	80223d2 <ams_main_precharge_charge_wake_charger_function+0x72>
   }

   if((timer_r3 > 10)) {
 8022394:	4b11      	ldr	r3, [pc, #68]	; (80223dc <ams_main_precharge_charge_wake_charger_function+0x7c>)
 8022396:	edd3 7a00 	vldr	s15, [r3]
 802239a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 802239e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80223a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223a6:	dd08      	ble.n	80223ba <ams_main_precharge_charge_wake_charger_function+0x5a>
       ams_outputs.error=121;
 80223a8:	4b0e      	ldr	r3, [pc, #56]	; (80223e4 <ams_main_precharge_charge_wake_charger_function+0x84>)
 80223aa:	2279      	movs	r2, #121	; 0x79
 80223ac:	711a      	strb	r2, [r3, #4]
       timer_r3 = 0;
 80223ae:	4b0b      	ldr	r3, [pc, #44]	; (80223dc <ams_main_precharge_charge_wake_charger_function+0x7c>)
 80223b0:	f04f 0200 	mov.w	r2, #0
 80223b4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 80223b6:	231b      	movs	r3, #27
 80223b8:	e00b      	b.n	80223d2 <ams_main_precharge_charge_wake_charger_function+0x72>
   }

   timer_r3 += ams_inputs.Ts;
 80223ba:	4b09      	ldr	r3, [pc, #36]	; (80223e0 <ams_main_precharge_charge_wake_charger_function+0x80>)
 80223bc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80223c0:	4b06      	ldr	r3, [pc, #24]	; (80223dc <ams_main_precharge_charge_wake_charger_function+0x7c>)
 80223c2:	edd3 7a00 	vldr	s15, [r3]
 80223c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80223ca:	4b04      	ldr	r3, [pc, #16]	; (80223dc <ams_main_precharge_charge_wake_charger_function+0x7c>)
 80223cc:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_WAKE_CHARGER;
 80223d0:	2321      	movs	r3, #33	; 0x21
}
 80223d2:	4618      	mov	r0, r3
 80223d4:	46bd      	mov	sp, r7
 80223d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223da:	4770      	bx	lr
 80223dc:	20000a9c 	.word	0x20000a9c
 80223e0:	2001b168 	.word	0x2001b168
 80223e4:	2001b1c8 	.word	0x2001b1c8

080223e8 <ams_main_precharge_charge_function>:

ams_state_t ams_main_precharge_charge_function() {
 80223e8:	b5b0      	push	{r4, r5, r7, lr}
 80223ea:	af00      	add	r7, sp, #0
   if(timer_r2 < 0.001*ams_inputs.Ts) {
 80223ec:	4b4c      	ldr	r3, [pc, #304]	; (8022520 <ams_main_precharge_charge_function+0x138>)
 80223ee:	681b      	ldr	r3, [r3, #0]
 80223f0:	4618      	mov	r0, r3
 80223f2:	f7de f89b 	bl	800052c <__aeabi_f2d>
 80223f6:	4604      	mov	r4, r0
 80223f8:	460d      	mov	r5, r1
 80223fa:	4b4a      	ldr	r3, [pc, #296]	; (8022524 <ams_main_precharge_charge_function+0x13c>)
 80223fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80223fe:	4618      	mov	r0, r3
 8022400:	f7de f894 	bl	800052c <__aeabi_f2d>
 8022404:	a344      	add	r3, pc, #272	; (adr r3, 8022518 <ams_main_precharge_charge_function+0x130>)
 8022406:	e9d3 2300 	ldrd	r2, r3, [r3]
 802240a:	f7de f8e7 	bl	80005dc <__aeabi_dmul>
 802240e:	4602      	mov	r2, r0
 8022410:	460b      	mov	r3, r1
 8022412:	4620      	mov	r0, r4
 8022414:	4629      	mov	r1, r5
 8022416:	f7de fb53 	bl	8000ac0 <__aeabi_dcmplt>
 802241a:	4603      	mov	r3, r0
 802241c:	2b00      	cmp	r3, #0
 802241e:	d002      	beq.n	8022426 <ams_main_precharge_charge_function+0x3e>
       state_r3 = STATE_AMS_MAIN_PRECHARGE_CHARGE_0;
 8022420:	4b41      	ldr	r3, [pc, #260]	; (8022528 <ams_main_precharge_charge_function+0x140>)
 8022422:	2220      	movs	r2, #32
 8022424:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r3) {
 8022426:	4b40      	ldr	r3, [pc, #256]	; (8022528 <ams_main_precharge_charge_function+0x140>)
 8022428:	781b      	ldrb	r3, [r3, #0]
 802242a:	3b19      	subs	r3, #25
 802242c:	2b08      	cmp	r3, #8
 802242e:	d854      	bhi.n	80224da <ams_main_precharge_charge_function+0xf2>
 8022430:	a201      	add	r2, pc, #4	; (adr r2, 8022438 <ams_main_precharge_charge_function+0x50>)
 8022432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022436:	bf00      	nop
 8022438:	0802245d 	.word	0x0802245d
 802243c:	0802246b 	.word	0x0802246b
 8022440:	08022479 	.word	0x08022479
 8022444:	08022487 	.word	0x08022487
 8022448:	08022495 	.word	0x08022495
 802244c:	080224a3 	.word	0x080224a3
 8022450:	080224b1 	.word	0x080224b1
 8022454:	080224bf 	.word	0x080224bf
 8022458:	080224cd 	.word	0x080224cd
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_MINUS:
           state_r3 = ams_main_precharge_charge_close_air_minus_function();
 802245c:	f7ff fdd4 	bl	8022008 <ams_main_precharge_charge_close_air_minus_function>
 8022460:	4603      	mov	r3, r0
 8022462:	461a      	mov	r2, r3
 8022464:	4b30      	ldr	r3, [pc, #192]	; (8022528 <ams_main_precharge_charge_function+0x140>)
 8022466:	701a      	strb	r2, [r3, #0]
           break;
 8022468:	e03a      	b.n	80224e0 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_PRECHARGE:
           state_r3 = ams_main_precharge_charge_close_precharge_function();
 802246a:	f7ff fe11 	bl	8022090 <ams_main_precharge_charge_close_precharge_function>
 802246e:	4603      	mov	r3, r0
 8022470:	461a      	mov	r2, r3
 8022472:	4b2d      	ldr	r3, [pc, #180]	; (8022528 <ams_main_precharge_charge_function+0x140>)
 8022474:	701a      	strb	r2, [r3, #0]
           break;
 8022476:	e033      	b.n	80224e0 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR:
           state_r3 = ams_main_precharge_charge_error_function();
 8022478:	f7ff fe4c 	bl	8022114 <ams_main_precharge_charge_error_function>
 802247c:	4603      	mov	r3, r0
 802247e:	461a      	mov	r2, r3
 8022480:	4b29      	ldr	r3, [pc, #164]	; (8022528 <ams_main_precharge_charge_function+0x140>)
 8022482:	701a      	strb	r2, [r3, #0]
           break;
 8022484:	e02c      	b.n	80224e0 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_WAIT:
           state_r3 = ams_main_precharge_charge_wait_function();
 8022486:	f7ff fe5f 	bl	8022148 <ams_main_precharge_charge_wait_function>
 802248a:	4603      	mov	r3, r0
 802248c:	461a      	mov	r2, r3
 802248e:	4b26      	ldr	r3, [pc, #152]	; (8022528 <ams_main_precharge_charge_function+0x140>)
 8022490:	701a      	strb	r2, [r3, #0]
           break;
 8022492:	e025      	b.n	80224e0 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_PLUS:
           state_r3 = ams_main_precharge_charge_close_air_plus_function();
 8022494:	f7ff feb6 	bl	8022204 <ams_main_precharge_charge_close_air_plus_function>
 8022498:	4603      	mov	r3, r0
 802249a:	461a      	mov	r2, r3
 802249c:	4b22      	ldr	r3, [pc, #136]	; (8022528 <ams_main_precharge_charge_function+0x140>)
 802249e:	701a      	strb	r2, [r3, #0]
           break;
 80224a0:	e01e      	b.n	80224e0 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_OPEN_PRECHARGE:
           state_r3 = ams_main_precharge_charge_open_precharge_function();
 80224a2:	f7ff fef3 	bl	802228c <ams_main_precharge_charge_open_precharge_function>
 80224a6:	4603      	mov	r3, r0
 80224a8:	461a      	mov	r2, r3
 80224aa:	4b1f      	ldr	r3, [pc, #124]	; (8022528 <ams_main_precharge_charge_function+0x140>)
 80224ac:	701a      	strb	r2, [r3, #0]
           break;
 80224ae:	e017      	b.n	80224e0 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_EXIT:
           state_r3 = ams_main_precharge_charge_exit_function();
 80224b0:	f7ff ff30 	bl	8022314 <ams_main_precharge_charge_exit_function>
 80224b4:	4603      	mov	r3, r0
 80224b6:	461a      	mov	r2, r3
 80224b8:	4b1b      	ldr	r3, [pc, #108]	; (8022528 <ams_main_precharge_charge_function+0x140>)
 80224ba:	701a      	strb	r2, [r3, #0]
           break;
 80224bc:	e010      	b.n	80224e0 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_0:
           state_r3 = ams_main_precharge_charge_0_function();
 80224be:	f7ff ff41 	bl	8022344 <ams_main_precharge_charge_0_function>
 80224c2:	4603      	mov	r3, r0
 80224c4:	461a      	mov	r2, r3
 80224c6:	4b18      	ldr	r3, [pc, #96]	; (8022528 <ams_main_precharge_charge_function+0x140>)
 80224c8:	701a      	strb	r2, [r3, #0]
           break;
 80224ca:	e009      	b.n	80224e0 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_WAKE_CHARGER:
           state_r3 = ams_main_precharge_charge_wake_charger_function();
 80224cc:	f7ff ff48 	bl	8022360 <ams_main_precharge_charge_wake_charger_function>
 80224d0:	4603      	mov	r3, r0
 80224d2:	461a      	mov	r2, r3
 80224d4:	4b14      	ldr	r3, [pc, #80]	; (8022528 <ams_main_precharge_charge_function+0x140>)
 80224d6:	701a      	strb	r2, [r3, #0]
           break;
 80224d8:	e002      	b.n	80224e0 <ams_main_precharge_charge_function+0xf8>
       default:
           ams_error();
 80224da:	f7ff f8e4 	bl	80216a6 <ams_error>
           break;
 80224de:	bf00      	nop
   }

   if(ams_outputs.precharge_charge_complete) {
 80224e0:	4b12      	ldr	r3, [pc, #72]	; (802252c <ams_main_precharge_charge_function+0x144>)
 80224e2:	795b      	ldrb	r3, [r3, #5]
 80224e4:	2b00      	cmp	r3, #0
 80224e6:	d008      	beq.n	80224fa <ams_main_precharge_charge_function+0x112>
       ams_outputs.precharge_charge_complete=0;
 80224e8:	4b10      	ldr	r3, [pc, #64]	; (802252c <ams_main_precharge_charge_function+0x144>)
 80224ea:	2200      	movs	r2, #0
 80224ec:	715a      	strb	r2, [r3, #5]
       timer_r2 = 0;
 80224ee:	4b0c      	ldr	r3, [pc, #48]	; (8022520 <ams_main_precharge_charge_function+0x138>)
 80224f0:	f04f 0200 	mov.w	r2, #0
 80224f4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_CHARGE;
 80224f6:	2322      	movs	r3, #34	; 0x22
 80224f8:	e00b      	b.n	8022512 <ams_main_precharge_charge_function+0x12a>
   }


   timer_r2 += ams_inputs.Ts;
 80224fa:	4b0a      	ldr	r3, [pc, #40]	; (8022524 <ams_main_precharge_charge_function+0x13c>)
 80224fc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8022500:	4b07      	ldr	r3, [pc, #28]	; (8022520 <ams_main_precharge_charge_function+0x138>)
 8022502:	edd3 7a00 	vldr	s15, [r3]
 8022506:	ee77 7a27 	vadd.f32	s15, s14, s15
 802250a:	4b05      	ldr	r3, [pc, #20]	; (8022520 <ams_main_precharge_charge_function+0x138>)
 802250c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE;
 8022510:	2318      	movs	r3, #24
}
 8022512:	4618      	mov	r0, r3
 8022514:	bdb0      	pop	{r4, r5, r7, pc}
 8022516:	bf00      	nop
 8022518:	d2f1a9fc 	.word	0xd2f1a9fc
 802251c:	3f50624d 	.word	0x3f50624d
 8022520:	20000a98 	.word	0x20000a98
 8022524:	2001b168 	.word	0x2001b168
 8022528:	20000a8e 	.word	0x20000a8e
 802252c:	2001b1c8 	.word	0x2001b1c8

08022530 <ams_main_charge_0_function>:

ams_state_t ams_main_charge_0_function() {
 8022530:	b480      	push	{r7}
 8022532:	af00      	add	r7, sp, #0
   if(1) {
       timer_r3 = 0;
 8022534:	4b04      	ldr	r3, [pc, #16]	; (8022548 <ams_main_charge_0_function+0x18>)
 8022536:	f04f 0200 	mov.w	r2, #0
 802253a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_CHARGE_CHARGE;
 802253c:	2324      	movs	r3, #36	; 0x24
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_CHARGE_0;
}
 802253e:	4618      	mov	r0, r3
 8022540:	46bd      	mov	sp, r7
 8022542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022546:	4770      	bx	lr
 8022548:	20000a9c 	.word	0x20000a9c
 802254c:	00000000 	.word	0x00000000

08022550 <ams_main_charge_charge_function>:

ams_state_t ams_main_charge_charge_function() {
 8022550:	b580      	push	{r7, lr}
 8022552:	af00      	add	r7, sp, #0
   if((ams_inputs.maximum_cell_voltage>4.15)||!ams_inputs.charge) {
 8022554:	4b14      	ldr	r3, [pc, #80]	; (80225a8 <ams_main_charge_charge_function+0x58>)
 8022556:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 802255a:	a311      	add	r3, pc, #68	; (adr r3, 80225a0 <ams_main_charge_charge_function+0x50>)
 802255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022560:	f7de facc 	bl	8000afc <__aeabi_dcmpgt>
 8022564:	4603      	mov	r3, r0
 8022566:	2b00      	cmp	r3, #0
 8022568:	d103      	bne.n	8022572 <ams_main_charge_charge_function+0x22>
 802256a:	4b0f      	ldr	r3, [pc, #60]	; (80225a8 <ams_main_charge_charge_function+0x58>)
 802256c:	781b      	ldrb	r3, [r3, #0]
 802256e:	2b00      	cmp	r3, #0
 8022570:	d108      	bne.n	8022584 <ams_main_charge_charge_function+0x34>
       ams_outputs.enable_charger=0;
 8022572:	4b0e      	ldr	r3, [pc, #56]	; (80225ac <ams_main_charge_charge_function+0x5c>)
 8022574:	2200      	movs	r2, #0
 8022576:	701a      	strb	r2, [r3, #0]
       timer_r3 = 0;
 8022578:	4b0d      	ldr	r3, [pc, #52]	; (80225b0 <ams_main_charge_charge_function+0x60>)
 802257a:	f04f 0200 	mov.w	r2, #0
 802257e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_CHARGE_END_CHARGE;
 8022580:	2325      	movs	r3, #37	; 0x25
 8022582:	e00b      	b.n	802259c <ams_main_charge_charge_function+0x4c>
   }

   timer_r3 += ams_inputs.Ts;
 8022584:	4b08      	ldr	r3, [pc, #32]	; (80225a8 <ams_main_charge_charge_function+0x58>)
 8022586:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 802258a:	4b09      	ldr	r3, [pc, #36]	; (80225b0 <ams_main_charge_charge_function+0x60>)
 802258c:	edd3 7a00 	vldr	s15, [r3]
 8022590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022594:	4b06      	ldr	r3, [pc, #24]	; (80225b0 <ams_main_charge_charge_function+0x60>)
 8022596:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_CHARGE_CHARGE;
 802259a:	2324      	movs	r3, #36	; 0x24
}
 802259c:	4618      	mov	r0, r3
 802259e:	bd80      	pop	{r7, pc}
 80225a0:	9999999a 	.word	0x9999999a
 80225a4:	40109999 	.word	0x40109999
 80225a8:	2001b168 	.word	0x2001b168
 80225ac:	2001b1c8 	.word	0x2001b1c8
 80225b0:	20000a9c 	.word	0x20000a9c
 80225b4:	00000000 	.word	0x00000000

080225b8 <ams_main_charge_end_charge_function>:

ams_state_t ams_main_charge_end_charge_function() {
 80225b8:	b580      	push	{r7, lr}
 80225ba:	af00      	add	r7, sp, #0
   if((timer_r3 < 7)&&(fabsf(ams_inputs.accumulator_current)<0.001)) {
 80225bc:	4b30      	ldr	r3, [pc, #192]	; (8022680 <ams_main_charge_end_charge_function+0xc8>)
 80225be:	edd3 7a00 	vldr	s15, [r3]
 80225c2:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80225c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80225ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225ce:	d528      	bpl.n	8022622 <ams_main_charge_end_charge_function+0x6a>
 80225d0:	4b2c      	ldr	r3, [pc, #176]	; (8022684 <ams_main_charge_end_charge_function+0xcc>)
 80225d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80225d6:	4610      	mov	r0, r2
 80225d8:	4619      	mov	r1, r3
 80225da:	f7de faf7 	bl	8000bcc <__aeabi_d2f>
 80225de:	ee07 0a90 	vmov	s15, r0
 80225e2:	eef0 7ae7 	vabs.f32	s15, s15
 80225e6:	ee17 0a90 	vmov	r0, s15
 80225ea:	f7dd ff9f 	bl	800052c <__aeabi_f2d>
 80225ee:	a322      	add	r3, pc, #136	; (adr r3, 8022678 <ams_main_charge_end_charge_function+0xc0>)
 80225f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225f4:	f7de fa64 	bl	8000ac0 <__aeabi_dcmplt>
 80225f8:	4603      	mov	r3, r0
 80225fa:	2b00      	cmp	r3, #0
 80225fc:	d011      	beq.n	8022622 <ams_main_charge_end_charge_function+0x6a>
       ams_outputs.close_air_plus=0;
 80225fe:	4b22      	ldr	r3, [pc, #136]	; (8022688 <ams_main_charge_end_charge_function+0xd0>)
 8022600:	2200      	movs	r2, #0
 8022602:	721a      	strb	r2, [r3, #8]
       ams_outputs.close_air_minus=0;
 8022604:	4b20      	ldr	r3, [pc, #128]	; (8022688 <ams_main_charge_end_charge_function+0xd0>)
 8022606:	2200      	movs	r2, #0
 8022608:	705a      	strb	r2, [r3, #1]
       ams_outputs.close_precharge=0;
 802260a:	4b1f      	ldr	r3, [pc, #124]	; (8022688 <ams_main_charge_end_charge_function+0xd0>)
 802260c:	2200      	movs	r2, #0
 802260e:	70da      	strb	r2, [r3, #3]
       ams_outputs.charge_complete=1;
 8022610:	4b1d      	ldr	r3, [pc, #116]	; (8022688 <ams_main_charge_end_charge_function+0xd0>)
 8022612:	2201      	movs	r2, #1
 8022614:	719a      	strb	r2, [r3, #6]
       timer_r3 = 0;
 8022616:	4b1a      	ldr	r3, [pc, #104]	; (8022680 <ams_main_charge_end_charge_function+0xc8>)
 8022618:	f04f 0200 	mov.w	r2, #0
 802261c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_CHARGE_EXIT;
 802261e:	2326      	movs	r3, #38	; 0x26
 8022620:	e027      	b.n	8022672 <ams_main_charge_end_charge_function+0xba>
   }

   if((timer_r3 > 7)) {
 8022622:	4b17      	ldr	r3, [pc, #92]	; (8022680 <ams_main_charge_end_charge_function+0xc8>)
 8022624:	edd3 7a00 	vldr	s15, [r3]
 8022628:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 802262c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022634:	dd11      	ble.n	802265a <ams_main_charge_end_charge_function+0xa2>
       ams_outputs.close_air_plus=0;
 8022636:	4b14      	ldr	r3, [pc, #80]	; (8022688 <ams_main_charge_end_charge_function+0xd0>)
 8022638:	2200      	movs	r2, #0
 802263a:	721a      	strb	r2, [r3, #8]
       ams_outputs.close_air_minus=0;
 802263c:	4b12      	ldr	r3, [pc, #72]	; (8022688 <ams_main_charge_end_charge_function+0xd0>)
 802263e:	2200      	movs	r2, #0
 8022640:	705a      	strb	r2, [r3, #1]
       ams_outputs.close_precharge=0;
 8022642:	4b11      	ldr	r3, [pc, #68]	; (8022688 <ams_main_charge_end_charge_function+0xd0>)
 8022644:	2200      	movs	r2, #0
 8022646:	70da      	strb	r2, [r3, #3]
       ams_outputs.error=141;
 8022648:	4b0f      	ldr	r3, [pc, #60]	; (8022688 <ams_main_charge_end_charge_function+0xd0>)
 802264a:	228d      	movs	r2, #141	; 0x8d
 802264c:	711a      	strb	r2, [r3, #4]
       timer_r3 = 0;
 802264e:	4b0c      	ldr	r3, [pc, #48]	; (8022680 <ams_main_charge_end_charge_function+0xc8>)
 8022650:	f04f 0200 	mov.w	r2, #0
 8022654:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_CHARGE_FORCE_QUIT;
 8022656:	2327      	movs	r3, #39	; 0x27
 8022658:	e00b      	b.n	8022672 <ams_main_charge_end_charge_function+0xba>
   }

   timer_r3 += ams_inputs.Ts;
 802265a:	4b0a      	ldr	r3, [pc, #40]	; (8022684 <ams_main_charge_end_charge_function+0xcc>)
 802265c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8022660:	4b07      	ldr	r3, [pc, #28]	; (8022680 <ams_main_charge_end_charge_function+0xc8>)
 8022662:	edd3 7a00 	vldr	s15, [r3]
 8022666:	ee77 7a27 	vadd.f32	s15, s14, s15
 802266a:	4b05      	ldr	r3, [pc, #20]	; (8022680 <ams_main_charge_end_charge_function+0xc8>)
 802266c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_CHARGE_END_CHARGE;
 8022670:	2325      	movs	r3, #37	; 0x25
}
 8022672:	4618      	mov	r0, r3
 8022674:	bd80      	pop	{r7, pc}
 8022676:	bf00      	nop
 8022678:	d2f1a9fc 	.word	0xd2f1a9fc
 802267c:	3f50624d 	.word	0x3f50624d
 8022680:	20000a9c 	.word	0x20000a9c
 8022684:	2001b168 	.word	0x2001b168
 8022688:	2001b1c8 	.word	0x2001b1c8

0802268c <ams_main_charge_exit_function>:

ams_state_t ams_main_charge_exit_function() {
 802268c:	b480      	push	{r7}
 802268e:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8022690:	4b08      	ldr	r3, [pc, #32]	; (80226b4 <ams_main_charge_exit_function+0x28>)
 8022692:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8022696:	4b08      	ldr	r3, [pc, #32]	; (80226b8 <ams_main_charge_exit_function+0x2c>)
 8022698:	edd3 7a00 	vldr	s15, [r3]
 802269c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80226a0:	4b05      	ldr	r3, [pc, #20]	; (80226b8 <ams_main_charge_exit_function+0x2c>)
 80226a2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_CHARGE_EXIT;
 80226a6:	2326      	movs	r3, #38	; 0x26
}
 80226a8:	4618      	mov	r0, r3
 80226aa:	46bd      	mov	sp, r7
 80226ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226b0:	4770      	bx	lr
 80226b2:	bf00      	nop
 80226b4:	2001b168 	.word	0x2001b168
 80226b8:	20000a9c 	.word	0x20000a9c

080226bc <ams_main_charge_force_quit_function>:

ams_state_t ams_main_charge_force_quit_function() {
 80226bc:	b480      	push	{r7}
 80226be:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 80226c0:	4b08      	ldr	r3, [pc, #32]	; (80226e4 <ams_main_charge_force_quit_function+0x28>)
 80226c2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80226c6:	4b08      	ldr	r3, [pc, #32]	; (80226e8 <ams_main_charge_force_quit_function+0x2c>)
 80226c8:	edd3 7a00 	vldr	s15, [r3]
 80226cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80226d0:	4b05      	ldr	r3, [pc, #20]	; (80226e8 <ams_main_charge_force_quit_function+0x2c>)
 80226d2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_CHARGE_FORCE_QUIT;
 80226d6:	2327      	movs	r3, #39	; 0x27
}
 80226d8:	4618      	mov	r0, r3
 80226da:	46bd      	mov	sp, r7
 80226dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226e0:	4770      	bx	lr
 80226e2:	bf00      	nop
 80226e4:	2001b168 	.word	0x2001b168
 80226e8:	20000a9c 	.word	0x20000a9c
 80226ec:	00000000 	.word	0x00000000

080226f0 <ams_main_charge_function>:

ams_state_t ams_main_charge_function() {
 80226f0:	b5b0      	push	{r4, r5, r7, lr}
 80226f2:	af00      	add	r7, sp, #0
   if(timer_r2 < 0.001*ams_inputs.Ts) {
 80226f4:	4b3a      	ldr	r3, [pc, #232]	; (80227e0 <ams_main_charge_function+0xf0>)
 80226f6:	681b      	ldr	r3, [r3, #0]
 80226f8:	4618      	mov	r0, r3
 80226fa:	f7dd ff17 	bl	800052c <__aeabi_f2d>
 80226fe:	4604      	mov	r4, r0
 8022700:	460d      	mov	r5, r1
 8022702:	4b38      	ldr	r3, [pc, #224]	; (80227e4 <ams_main_charge_function+0xf4>)
 8022704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022706:	4618      	mov	r0, r3
 8022708:	f7dd ff10 	bl	800052c <__aeabi_f2d>
 802270c:	a332      	add	r3, pc, #200	; (adr r3, 80227d8 <ams_main_charge_function+0xe8>)
 802270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022712:	f7dd ff63 	bl	80005dc <__aeabi_dmul>
 8022716:	4602      	mov	r2, r0
 8022718:	460b      	mov	r3, r1
 802271a:	4620      	mov	r0, r4
 802271c:	4629      	mov	r1, r5
 802271e:	f7de f9cf 	bl	8000ac0 <__aeabi_dcmplt>
 8022722:	4603      	mov	r3, r0
 8022724:	2b00      	cmp	r3, #0
 8022726:	d002      	beq.n	802272e <ams_main_charge_function+0x3e>
       state_r3 = STATE_AMS_MAIN_CHARGE_0;
 8022728:	4b2f      	ldr	r3, [pc, #188]	; (80227e8 <ams_main_charge_function+0xf8>)
 802272a:	2223      	movs	r2, #35	; 0x23
 802272c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r3) {
 802272e:	4b2e      	ldr	r3, [pc, #184]	; (80227e8 <ams_main_charge_function+0xf8>)
 8022730:	781b      	ldrb	r3, [r3, #0]
 8022732:	3b23      	subs	r3, #35	; 0x23
 8022734:	2b04      	cmp	r3, #4
 8022736:	d830      	bhi.n	802279a <ams_main_charge_function+0xaa>
 8022738:	a201      	add	r2, pc, #4	; (adr r2, 8022740 <ams_main_charge_function+0x50>)
 802273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802273e:	bf00      	nop
 8022740:	08022755 	.word	0x08022755
 8022744:	08022763 	.word	0x08022763
 8022748:	08022771 	.word	0x08022771
 802274c:	0802277f 	.word	0x0802277f
 8022750:	0802278d 	.word	0x0802278d
       case STATE_AMS_MAIN_CHARGE_0:
           state_r3 = ams_main_charge_0_function();
 8022754:	f7ff feec 	bl	8022530 <ams_main_charge_0_function>
 8022758:	4603      	mov	r3, r0
 802275a:	461a      	mov	r2, r3
 802275c:	4b22      	ldr	r3, [pc, #136]	; (80227e8 <ams_main_charge_function+0xf8>)
 802275e:	701a      	strb	r2, [r3, #0]
           break;
 8022760:	e01e      	b.n	80227a0 <ams_main_charge_function+0xb0>
       case STATE_AMS_MAIN_CHARGE_CHARGE:
           state_r3 = ams_main_charge_charge_function();
 8022762:	f7ff fef5 	bl	8022550 <ams_main_charge_charge_function>
 8022766:	4603      	mov	r3, r0
 8022768:	461a      	mov	r2, r3
 802276a:	4b1f      	ldr	r3, [pc, #124]	; (80227e8 <ams_main_charge_function+0xf8>)
 802276c:	701a      	strb	r2, [r3, #0]
           break;
 802276e:	e017      	b.n	80227a0 <ams_main_charge_function+0xb0>
       case STATE_AMS_MAIN_CHARGE_END_CHARGE:
           state_r3 = ams_main_charge_end_charge_function();
 8022770:	f7ff ff22 	bl	80225b8 <ams_main_charge_end_charge_function>
 8022774:	4603      	mov	r3, r0
 8022776:	461a      	mov	r2, r3
 8022778:	4b1b      	ldr	r3, [pc, #108]	; (80227e8 <ams_main_charge_function+0xf8>)
 802277a:	701a      	strb	r2, [r3, #0]
           break;
 802277c:	e010      	b.n	80227a0 <ams_main_charge_function+0xb0>
       case STATE_AMS_MAIN_CHARGE_EXIT:
           state_r3 = ams_main_charge_exit_function();
 802277e:	f7ff ff85 	bl	802268c <ams_main_charge_exit_function>
 8022782:	4603      	mov	r3, r0
 8022784:	461a      	mov	r2, r3
 8022786:	4b18      	ldr	r3, [pc, #96]	; (80227e8 <ams_main_charge_function+0xf8>)
 8022788:	701a      	strb	r2, [r3, #0]
           break;
 802278a:	e009      	b.n	80227a0 <ams_main_charge_function+0xb0>
       case STATE_AMS_MAIN_CHARGE_FORCE_QUIT:
           state_r3 = ams_main_charge_force_quit_function();
 802278c:	f7ff ff96 	bl	80226bc <ams_main_charge_force_quit_function>
 8022790:	4603      	mov	r3, r0
 8022792:	461a      	mov	r2, r3
 8022794:	4b14      	ldr	r3, [pc, #80]	; (80227e8 <ams_main_charge_function+0xf8>)
 8022796:	701a      	strb	r2, [r3, #0]
           break;
 8022798:	e002      	b.n	80227a0 <ams_main_charge_function+0xb0>
       default:
           ams_error();
 802279a:	f7fe ff84 	bl	80216a6 <ams_error>
           break;
 802279e:	bf00      	nop
   }

   if(ams_outputs.charge_complete) {
 80227a0:	4b12      	ldr	r3, [pc, #72]	; (80227ec <ams_main_charge_function+0xfc>)
 80227a2:	799b      	ldrb	r3, [r3, #6]
 80227a4:	2b00      	cmp	r3, #0
 80227a6:	d008      	beq.n	80227ba <ams_main_charge_function+0xca>
       ams_outputs.charge_complete=0;
 80227a8:	4b10      	ldr	r3, [pc, #64]	; (80227ec <ams_main_charge_function+0xfc>)
 80227aa:	2200      	movs	r2, #0
 80227ac:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 80227ae:	4b0c      	ldr	r3, [pc, #48]	; (80227e0 <ams_main_charge_function+0xf0>)
 80227b0:	f04f 0200 	mov.w	r2, #0
 80227b4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_IDLE;
 80227b6:	2328      	movs	r3, #40	; 0x28
 80227b8:	e00b      	b.n	80227d2 <ams_main_charge_function+0xe2>
   }


   timer_r2 += ams_inputs.Ts;
 80227ba:	4b0a      	ldr	r3, [pc, #40]	; (80227e4 <ams_main_charge_function+0xf4>)
 80227bc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80227c0:	4b07      	ldr	r3, [pc, #28]	; (80227e0 <ams_main_charge_function+0xf0>)
 80227c2:	edd3 7a00 	vldr	s15, [r3]
 80227c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80227ca:	4b05      	ldr	r3, [pc, #20]	; (80227e0 <ams_main_charge_function+0xf0>)
 80227cc:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_CHARGE;
 80227d0:	2322      	movs	r3, #34	; 0x22
}
 80227d2:	4618      	mov	r0, r3
 80227d4:	bdb0      	pop	{r4, r5, r7, pc}
 80227d6:	bf00      	nop
 80227d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80227dc:	3f50624d 	.word	0x3f50624d
 80227e0:	20000a98 	.word	0x20000a98
 80227e4:	2001b168 	.word	0x2001b168
 80227e8:	20000a8e 	.word	0x20000a8e
 80227ec:	2001b1c8 	.word	0x2001b1c8

080227f0 <ams_main_idle_function>:

ams_state_t ams_main_idle_function() {
 80227f0:	b580      	push	{r7, lr}
 80227f2:	af00      	add	r7, sp, #0
   if(ams_inputs.SC&&ams_inputs.drive&&(2.95<ams_inputs.minimum_cell_voltage)) {
 80227f4:	4b3e      	ldr	r3, [pc, #248]	; (80228f0 <ams_main_idle_function+0x100>)
 80227f6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80227fa:	2b00      	cmp	r3, #0
 80227fc:	d015      	beq.n	802282a <ams_main_idle_function+0x3a>
 80227fe:	4b3c      	ldr	r3, [pc, #240]	; (80228f0 <ams_main_idle_function+0x100>)
 8022800:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8022804:	2b00      	cmp	r3, #0
 8022806:	d010      	beq.n	802282a <ams_main_idle_function+0x3a>
 8022808:	4b39      	ldr	r3, [pc, #228]	; (80228f0 <ams_main_idle_function+0x100>)
 802280a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 802280e:	a330      	add	r3, pc, #192	; (adr r3, 80228d0 <ams_main_idle_function+0xe0>)
 8022810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022814:	f7de f972 	bl	8000afc <__aeabi_dcmpgt>
 8022818:	4603      	mov	r3, r0
 802281a:	2b00      	cmp	r3, #0
 802281c:	d005      	beq.n	802282a <ams_main_idle_function+0x3a>
       timer_r2 = 0;
 802281e:	4b35      	ldr	r3, [pc, #212]	; (80228f4 <ams_main_idle_function+0x104>)
 8022820:	f04f 0200 	mov.w	r2, #0
 8022824:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE;
 8022826:	2308      	movs	r3, #8
 8022828:	e04e      	b.n	80228c8 <ams_main_idle_function+0xd8>
   }

   if(ams_inputs.SC&&ams_inputs.charge&&(ams_inputs.maximum_cell_voltage<4.05)) {
 802282a:	4b31      	ldr	r3, [pc, #196]	; (80228f0 <ams_main_idle_function+0x100>)
 802282c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8022830:	2b00      	cmp	r3, #0
 8022832:	d017      	beq.n	8022864 <ams_main_idle_function+0x74>
 8022834:	4b2e      	ldr	r3, [pc, #184]	; (80228f0 <ams_main_idle_function+0x100>)
 8022836:	781b      	ldrb	r3, [r3, #0]
 8022838:	2b00      	cmp	r3, #0
 802283a:	d013      	beq.n	8022864 <ams_main_idle_function+0x74>
 802283c:	4b2c      	ldr	r3, [pc, #176]	; (80228f0 <ams_main_idle_function+0x100>)
 802283e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8022842:	a325      	add	r3, pc, #148	; (adr r3, 80228d8 <ams_main_idle_function+0xe8>)
 8022844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022848:	f7de f93a 	bl	8000ac0 <__aeabi_dcmplt>
 802284c:	4603      	mov	r3, r0
 802284e:	2b00      	cmp	r3, #0
 8022850:	d008      	beq.n	8022864 <ams_main_idle_function+0x74>
       ams_outputs.enable_charger=1;
 8022852:	4b29      	ldr	r3, [pc, #164]	; (80228f8 <ams_main_idle_function+0x108>)
 8022854:	2201      	movs	r2, #1
 8022856:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 8022858:	4b26      	ldr	r3, [pc, #152]	; (80228f4 <ams_main_idle_function+0x104>)
 802285a:	f04f 0200 	mov.w	r2, #0
 802285e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE;
 8022860:	2318      	movs	r3, #24
 8022862:	e031      	b.n	80228c8 <ams_main_idle_function+0xd8>
   }

   if(!ams_inputs.SC&&ams_inputs.balance&&(ams_inputs.cell_voltages_variance>0.01)&&(3.4<ams_inputs.minimum_cell_voltage)) {
 8022864:	4b22      	ldr	r3, [pc, #136]	; (80228f0 <ams_main_idle_function+0x100>)
 8022866:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 802286a:	2b00      	cmp	r3, #0
 802286c:	d120      	bne.n	80228b0 <ams_main_idle_function+0xc0>
 802286e:	4b20      	ldr	r3, [pc, #128]	; (80228f0 <ams_main_idle_function+0x100>)
 8022870:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8022874:	2b00      	cmp	r3, #0
 8022876:	d01b      	beq.n	80228b0 <ams_main_idle_function+0xc0>
 8022878:	4b1d      	ldr	r3, [pc, #116]	; (80228f0 <ams_main_idle_function+0x100>)
 802287a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 802287e:	a318      	add	r3, pc, #96	; (adr r3, 80228e0 <ams_main_idle_function+0xf0>)
 8022880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022884:	f7de f93a 	bl	8000afc <__aeabi_dcmpgt>
 8022888:	4603      	mov	r3, r0
 802288a:	2b00      	cmp	r3, #0
 802288c:	d010      	beq.n	80228b0 <ams_main_idle_function+0xc0>
 802288e:	4b18      	ldr	r3, [pc, #96]	; (80228f0 <ams_main_idle_function+0x100>)
 8022890:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8022894:	a314      	add	r3, pc, #80	; (adr r3, 80228e8 <ams_main_idle_function+0xf8>)
 8022896:	e9d3 2300 	ldrd	r2, r3, [r3]
 802289a:	f7de f92f 	bl	8000afc <__aeabi_dcmpgt>
 802289e:	4603      	mov	r3, r0
 80228a0:	2b00      	cmp	r3, #0
 80228a2:	d005      	beq.n	80228b0 <ams_main_idle_function+0xc0>
       timer_r2 = 0;
 80228a4:	4b13      	ldr	r3, [pc, #76]	; (80228f4 <ams_main_idle_function+0x104>)
 80228a6:	f04f 0200 	mov.w	r2, #0
 80228aa:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_BALANCE;
 80228ac:	2329      	movs	r3, #41	; 0x29
 80228ae:	e00b      	b.n	80228c8 <ams_main_idle_function+0xd8>
   }

   timer_r2 += ams_inputs.Ts;
 80228b0:	4b0f      	ldr	r3, [pc, #60]	; (80228f0 <ams_main_idle_function+0x100>)
 80228b2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80228b6:	4b0f      	ldr	r3, [pc, #60]	; (80228f4 <ams_main_idle_function+0x104>)
 80228b8:	edd3 7a00 	vldr	s15, [r3]
 80228bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80228c0:	4b0c      	ldr	r3, [pc, #48]	; (80228f4 <ams_main_idle_function+0x104>)
 80228c2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_IDLE;
 80228c6:	2328      	movs	r3, #40	; 0x28
}
 80228c8:	4618      	mov	r0, r3
 80228ca:	bd80      	pop	{r7, pc}
 80228cc:	f3af 8000 	nop.w
 80228d0:	9999999a 	.word	0x9999999a
 80228d4:	40079999 	.word	0x40079999
 80228d8:	33333333 	.word	0x33333333
 80228dc:	40103333 	.word	0x40103333
 80228e0:	47ae147b 	.word	0x47ae147b
 80228e4:	3f847ae1 	.word	0x3f847ae1
 80228e8:	33333333 	.word	0x33333333
 80228ec:	400b3333 	.word	0x400b3333
 80228f0:	2001b168 	.word	0x2001b168
 80228f4:	20000a98 	.word	0x20000a98
 80228f8:	2001b1c8 	.word	0x2001b1c8

080228fc <ams_main_balance_0_function>:

ams_state_t ams_main_balance_0_function() {
 80228fc:	b480      	push	{r7}
 80228fe:	af00      	add	r7, sp, #0
   if(1) {
       timer_r3 = 0;
 8022900:	4b04      	ldr	r3, [pc, #16]	; (8022914 <ams_main_balance_0_function+0x18>)
 8022902:	f04f 0200 	mov.w	r2, #0
 8022906:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_BALANCE_BALANCE;
 8022908:	232b      	movs	r3, #43	; 0x2b
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_BALANCE_0;
}
 802290a:	4618      	mov	r0, r3
 802290c:	46bd      	mov	sp, r7
 802290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022912:	4770      	bx	lr
 8022914:	20000a9c 	.word	0x20000a9c

08022918 <ams_main_balance_balance_function>:

ams_state_t ams_main_balance_balance_function() {
 8022918:	b580      	push	{r7, lr}
 802291a:	af00      	add	r7, sp, #0
   if(1) {
       do_cell_balancing();
 802291c:	f7f3 f9f0 	bl	8015d00 <do_cell_balancing>
       timer_r3 = 0;
 8022920:	4b03      	ldr	r3, [pc, #12]	; (8022930 <ams_main_balance_balance_function+0x18>)
 8022922:	f04f 0200 	mov.w	r2, #0
 8022926:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_BALANCE_WAIT;
 8022928:	232c      	movs	r3, #44	; 0x2c
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_BALANCE_BALANCE;
}
 802292a:	4618      	mov	r0, r3
 802292c:	bd80      	pop	{r7, pc}
 802292e:	bf00      	nop
 8022930:	20000a9c 	.word	0x20000a9c

08022934 <ams_main_balance_wait_function>:

ams_state_t ams_main_balance_wait_function() {
 8022934:	b480      	push	{r7}
 8022936:	af00      	add	r7, sp, #0
   if((timer_r3 > 60)) {
 8022938:	4b10      	ldr	r3, [pc, #64]	; (802297c <ams_main_balance_wait_function+0x48>)
 802293a:	edd3 7a00 	vldr	s15, [r3]
 802293e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8022980 <ams_main_balance_wait_function+0x4c>
 8022942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802294a:	dd05      	ble.n	8022958 <ams_main_balance_wait_function+0x24>
       timer_r3 = 0;
 802294c:	4b0b      	ldr	r3, [pc, #44]	; (802297c <ams_main_balance_wait_function+0x48>)
 802294e:	f04f 0200 	mov.w	r2, #0
 8022952:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_BALANCE_BALANCE;
 8022954:	232b      	movs	r3, #43	; 0x2b
 8022956:	e00b      	b.n	8022970 <ams_main_balance_wait_function+0x3c>
   }

   timer_r3 += ams_inputs.Ts;
 8022958:	4b0a      	ldr	r3, [pc, #40]	; (8022984 <ams_main_balance_wait_function+0x50>)
 802295a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 802295e:	4b07      	ldr	r3, [pc, #28]	; (802297c <ams_main_balance_wait_function+0x48>)
 8022960:	edd3 7a00 	vldr	s15, [r3]
 8022964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022968:	4b04      	ldr	r3, [pc, #16]	; (802297c <ams_main_balance_wait_function+0x48>)
 802296a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_BALANCE_WAIT;
 802296e:	232c      	movs	r3, #44	; 0x2c
}
 8022970:	4618      	mov	r0, r3
 8022972:	46bd      	mov	sp, r7
 8022974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022978:	4770      	bx	lr
 802297a:	bf00      	nop
 802297c:	20000a9c 	.word	0x20000a9c
 8022980:	42700000 	.word	0x42700000
 8022984:	2001b168 	.word	0x2001b168

08022988 <ams_main_balance_function>:

ams_state_t ams_main_balance_function() {
 8022988:	b5b0      	push	{r4, r5, r7, lr}
 802298a:	af00      	add	r7, sp, #0
   if(timer_r2 < 0.001*ams_inputs.Ts) {
 802298c:	4b3a      	ldr	r3, [pc, #232]	; (8022a78 <ams_main_balance_function+0xf0>)
 802298e:	681b      	ldr	r3, [r3, #0]
 8022990:	4618      	mov	r0, r3
 8022992:	f7dd fdcb 	bl	800052c <__aeabi_f2d>
 8022996:	4604      	mov	r4, r0
 8022998:	460d      	mov	r5, r1
 802299a:	4b38      	ldr	r3, [pc, #224]	; (8022a7c <ams_main_balance_function+0xf4>)
 802299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802299e:	4618      	mov	r0, r3
 80229a0:	f7dd fdc4 	bl	800052c <__aeabi_f2d>
 80229a4:	a330      	add	r3, pc, #192	; (adr r3, 8022a68 <ams_main_balance_function+0xe0>)
 80229a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229aa:	f7dd fe17 	bl	80005dc <__aeabi_dmul>
 80229ae:	4602      	mov	r2, r0
 80229b0:	460b      	mov	r3, r1
 80229b2:	4620      	mov	r0, r4
 80229b4:	4629      	mov	r1, r5
 80229b6:	f7de f883 	bl	8000ac0 <__aeabi_dcmplt>
 80229ba:	4603      	mov	r3, r0
 80229bc:	2b00      	cmp	r3, #0
 80229be:	d002      	beq.n	80229c6 <ams_main_balance_function+0x3e>
       state_r3 = STATE_AMS_MAIN_BALANCE_0;
 80229c0:	4b2f      	ldr	r3, [pc, #188]	; (8022a80 <ams_main_balance_function+0xf8>)
 80229c2:	222a      	movs	r2, #42	; 0x2a
 80229c4:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r3) {
 80229c6:	4b2e      	ldr	r3, [pc, #184]	; (8022a80 <ams_main_balance_function+0xf8>)
 80229c8:	781b      	ldrb	r3, [r3, #0]
 80229ca:	2b2c      	cmp	r3, #44	; 0x2c
 80229cc:	d014      	beq.n	80229f8 <ams_main_balance_function+0x70>
 80229ce:	2b2c      	cmp	r3, #44	; 0x2c
 80229d0:	dc19      	bgt.n	8022a06 <ams_main_balance_function+0x7e>
 80229d2:	2b2a      	cmp	r3, #42	; 0x2a
 80229d4:	d002      	beq.n	80229dc <ams_main_balance_function+0x54>
 80229d6:	2b2b      	cmp	r3, #43	; 0x2b
 80229d8:	d007      	beq.n	80229ea <ams_main_balance_function+0x62>
 80229da:	e014      	b.n	8022a06 <ams_main_balance_function+0x7e>
       case STATE_AMS_MAIN_BALANCE_0:
           state_r3 = ams_main_balance_0_function();
 80229dc:	f7ff ff8e 	bl	80228fc <ams_main_balance_0_function>
 80229e0:	4603      	mov	r3, r0
 80229e2:	461a      	mov	r2, r3
 80229e4:	4b26      	ldr	r3, [pc, #152]	; (8022a80 <ams_main_balance_function+0xf8>)
 80229e6:	701a      	strb	r2, [r3, #0]
           break;
 80229e8:	e010      	b.n	8022a0c <ams_main_balance_function+0x84>
       case STATE_AMS_MAIN_BALANCE_BALANCE:
           state_r3 = ams_main_balance_balance_function();
 80229ea:	f7ff ff95 	bl	8022918 <ams_main_balance_balance_function>
 80229ee:	4603      	mov	r3, r0
 80229f0:	461a      	mov	r2, r3
 80229f2:	4b23      	ldr	r3, [pc, #140]	; (8022a80 <ams_main_balance_function+0xf8>)
 80229f4:	701a      	strb	r2, [r3, #0]
           break;
 80229f6:	e009      	b.n	8022a0c <ams_main_balance_function+0x84>
       case STATE_AMS_MAIN_BALANCE_WAIT:
           state_r3 = ams_main_balance_wait_function();
 80229f8:	f7ff ff9c 	bl	8022934 <ams_main_balance_wait_function>
 80229fc:	4603      	mov	r3, r0
 80229fe:	461a      	mov	r2, r3
 8022a00:	4b1f      	ldr	r3, [pc, #124]	; (8022a80 <ams_main_balance_function+0xf8>)
 8022a02:	701a      	strb	r2, [r3, #0]
           break;
 8022a04:	e002      	b.n	8022a0c <ams_main_balance_function+0x84>
       default:
           ams_error();
 8022a06:	f7fe fe4e 	bl	80216a6 <ams_error>
           break;
 8022a0a:	bf00      	nop
   }

   if(ams_inputs.SC||(!ams_inputs.balance)||(ams_inputs.cell_voltages_variance<0.005)) {
 8022a0c:	4b1b      	ldr	r3, [pc, #108]	; (8022a7c <ams_main_balance_function+0xf4>)
 8022a0e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8022a12:	2b00      	cmp	r3, #0
 8022a14:	d10f      	bne.n	8022a36 <ams_main_balance_function+0xae>
 8022a16:	4b19      	ldr	r3, [pc, #100]	; (8022a7c <ams_main_balance_function+0xf4>)
 8022a18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8022a1c:	2b00      	cmp	r3, #0
 8022a1e:	d00a      	beq.n	8022a36 <ams_main_balance_function+0xae>
 8022a20:	4b16      	ldr	r3, [pc, #88]	; (8022a7c <ams_main_balance_function+0xf4>)
 8022a22:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8022a26:	a312      	add	r3, pc, #72	; (adr r3, 8022a70 <ams_main_balance_function+0xe8>)
 8022a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a2c:	f7de f848 	bl	8000ac0 <__aeabi_dcmplt>
 8022a30:	4603      	mov	r3, r0
 8022a32:	2b00      	cmp	r3, #0
 8022a34:	d007      	beq.n	8022a46 <ams_main_balance_function+0xbe>
       end_cell_balancing();
 8022a36:	f7f3 f99f 	bl	8015d78 <end_cell_balancing>
       timer_r2 = 0;
 8022a3a:	4b0f      	ldr	r3, [pc, #60]	; (8022a78 <ams_main_balance_function+0xf0>)
 8022a3c:	f04f 0200 	mov.w	r2, #0
 8022a40:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_IDLE;
 8022a42:	2328      	movs	r3, #40	; 0x28
 8022a44:	e00b      	b.n	8022a5e <ams_main_balance_function+0xd6>
   }


   timer_r2 += ams_inputs.Ts;
 8022a46:	4b0d      	ldr	r3, [pc, #52]	; (8022a7c <ams_main_balance_function+0xf4>)
 8022a48:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8022a4c:	4b0a      	ldr	r3, [pc, #40]	; (8022a78 <ams_main_balance_function+0xf0>)
 8022a4e:	edd3 7a00 	vldr	s15, [r3]
 8022a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022a56:	4b08      	ldr	r3, [pc, #32]	; (8022a78 <ams_main_balance_function+0xf0>)
 8022a58:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_BALANCE;
 8022a5c:	2329      	movs	r3, #41	; 0x29
}
 8022a5e:	4618      	mov	r0, r3
 8022a60:	bdb0      	pop	{r4, r5, r7, pc}
 8022a62:	bf00      	nop
 8022a64:	f3af 8000 	nop.w
 8022a68:	d2f1a9fc 	.word	0xd2f1a9fc
 8022a6c:	3f50624d 	.word	0x3f50624d
 8022a70:	47ae147b 	.word	0x47ae147b
 8022a74:	3f747ae1 	.word	0x3f747ae1
 8022a78:	20000a98 	.word	0x20000a98
 8022a7c:	2001b168 	.word	0x2001b168
 8022a80:	20000a8e 	.word	0x20000a8e

08022a84 <ams_main_0_function>:

ams_state_t ams_main_0_function() {
 8022a84:	b480      	push	{r7}
 8022a86:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8022a88:	4b04      	ldr	r3, [pc, #16]	; (8022a9c <ams_main_0_function+0x18>)
 8022a8a:	f04f 0200 	mov.w	r2, #0
 8022a8e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_IDLE;
 8022a90:	2328      	movs	r3, #40	; 0x28
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_MAIN_0;
}
 8022a92:	4618      	mov	r0, r3
 8022a94:	46bd      	mov	sp, r7
 8022a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a9a:	4770      	bx	lr
 8022a9c:	20000a98 	.word	0x20000a98

08022aa0 <ams_main_function>:

ams_state_t ams_main_function() {
 8022aa0:	b5b0      	push	{r4, r5, r7, lr}
 8022aa2:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 8022aa4:	4b6a      	ldr	r3, [pc, #424]	; (8022c50 <ams_main_function+0x1b0>)
 8022aa6:	681b      	ldr	r3, [r3, #0]
 8022aa8:	4618      	mov	r0, r3
 8022aaa:	f7dd fd3f 	bl	800052c <__aeabi_f2d>
 8022aae:	4604      	mov	r4, r0
 8022ab0:	460d      	mov	r5, r1
 8022ab2:	4b68      	ldr	r3, [pc, #416]	; (8022c54 <ams_main_function+0x1b4>)
 8022ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022ab6:	4618      	mov	r0, r3
 8022ab8:	f7dd fd38 	bl	800052c <__aeabi_f2d>
 8022abc:	a362      	add	r3, pc, #392	; (adr r3, 8022c48 <ams_main_function+0x1a8>)
 8022abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ac2:	f7dd fd8b 	bl	80005dc <__aeabi_dmul>
 8022ac6:	4602      	mov	r2, r0
 8022ac8:	460b      	mov	r3, r1
 8022aca:	4620      	mov	r0, r4
 8022acc:	4629      	mov	r1, r5
 8022ace:	f7dd fff7 	bl	8000ac0 <__aeabi_dcmplt>
 8022ad2:	4603      	mov	r3, r0
 8022ad4:	2b00      	cmp	r3, #0
 8022ad6:	d002      	beq.n	8022ade <ams_main_function+0x3e>
       state_r2 = STATE_AMS_MAIN_0;
 8022ad8:	4b5f      	ldr	r3, [pc, #380]	; (8022c58 <ams_main_function+0x1b8>)
 8022ada:	222d      	movs	r2, #45	; 0x2d
 8022adc:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 8022ade:	4b5e      	ldr	r3, [pc, #376]	; (8022c58 <ams_main_function+0x1b8>)
 8022ae0:	781b      	ldrb	r3, [r3, #0]
 8022ae2:	3b08      	subs	r3, #8
 8022ae4:	2b25      	cmp	r3, #37	; 0x25
 8022ae6:	f200 8080 	bhi.w	8022bea <ams_main_function+0x14a>
 8022aea:	a201      	add	r2, pc, #4	; (adr r2, 8022af0 <ams_main_function+0x50>)
 8022aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022af0:	08022b89 	.word	0x08022b89
 8022af4:	08022beb 	.word	0x08022beb
 8022af8:	08022beb 	.word	0x08022beb
 8022afc:	08022beb 	.word	0x08022beb
 8022b00:	08022beb 	.word	0x08022beb
 8022b04:	08022beb 	.word	0x08022beb
 8022b08:	08022beb 	.word	0x08022beb
 8022b0c:	08022beb 	.word	0x08022beb
 8022b10:	08022beb 	.word	0x08022beb
 8022b14:	08022beb 	.word	0x08022beb
 8022b18:	08022b97 	.word	0x08022b97
 8022b1c:	08022beb 	.word	0x08022beb
 8022b20:	08022beb 	.word	0x08022beb
 8022b24:	08022beb 	.word	0x08022beb
 8022b28:	08022beb 	.word	0x08022beb
 8022b2c:	08022beb 	.word	0x08022beb
 8022b30:	08022ba5 	.word	0x08022ba5
 8022b34:	08022beb 	.word	0x08022beb
 8022b38:	08022beb 	.word	0x08022beb
 8022b3c:	08022beb 	.word	0x08022beb
 8022b40:	08022beb 	.word	0x08022beb
 8022b44:	08022beb 	.word	0x08022beb
 8022b48:	08022beb 	.word	0x08022beb
 8022b4c:	08022beb 	.word	0x08022beb
 8022b50:	08022beb 	.word	0x08022beb
 8022b54:	08022beb 	.word	0x08022beb
 8022b58:	08022bb3 	.word	0x08022bb3
 8022b5c:	08022beb 	.word	0x08022beb
 8022b60:	08022beb 	.word	0x08022beb
 8022b64:	08022beb 	.word	0x08022beb
 8022b68:	08022beb 	.word	0x08022beb
 8022b6c:	08022beb 	.word	0x08022beb
 8022b70:	08022bc1 	.word	0x08022bc1
 8022b74:	08022bcf 	.word	0x08022bcf
 8022b78:	08022beb 	.word	0x08022beb
 8022b7c:	08022beb 	.word	0x08022beb
 8022b80:	08022beb 	.word	0x08022beb
 8022b84:	08022bdd 	.word	0x08022bdd
       case STATE_AMS_MAIN_PRECHARGE_DRIVE:
           state_r2 = ams_main_precharge_drive_function();
 8022b88:	f7ff f83e 	bl	8021c08 <ams_main_precharge_drive_function>
 8022b8c:	4603      	mov	r3, r0
 8022b8e:	461a      	mov	r2, r3
 8022b90:	4b31      	ldr	r3, [pc, #196]	; (8022c58 <ams_main_function+0x1b8>)
 8022b92:	701a      	strb	r2, [r3, #0]
           break;
 8022b94:	e02c      	b.n	8022bf0 <ams_main_function+0x150>
       case STATE_AMS_MAIN_DRIVE:
           state_r2 = ams_main_drive_function();
 8022b96:	f7ff f9b7 	bl	8021f08 <ams_main_drive_function>
 8022b9a:	4603      	mov	r3, r0
 8022b9c:	461a      	mov	r2, r3
 8022b9e:	4b2e      	ldr	r3, [pc, #184]	; (8022c58 <ams_main_function+0x1b8>)
 8022ba0:	701a      	strb	r2, [r3, #0]
           break;
 8022ba2:	e025      	b.n	8022bf0 <ams_main_function+0x150>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE:
           state_r2 = ams_main_precharge_charge_function();
 8022ba4:	f7ff fc20 	bl	80223e8 <ams_main_precharge_charge_function>
 8022ba8:	4603      	mov	r3, r0
 8022baa:	461a      	mov	r2, r3
 8022bac:	4b2a      	ldr	r3, [pc, #168]	; (8022c58 <ams_main_function+0x1b8>)
 8022bae:	701a      	strb	r2, [r3, #0]
           break;
 8022bb0:	e01e      	b.n	8022bf0 <ams_main_function+0x150>
       case STATE_AMS_MAIN_CHARGE:
           state_r2 = ams_main_charge_function();
 8022bb2:	f7ff fd9d 	bl	80226f0 <ams_main_charge_function>
 8022bb6:	4603      	mov	r3, r0
 8022bb8:	461a      	mov	r2, r3
 8022bba:	4b27      	ldr	r3, [pc, #156]	; (8022c58 <ams_main_function+0x1b8>)
 8022bbc:	701a      	strb	r2, [r3, #0]
           break;
 8022bbe:	e017      	b.n	8022bf0 <ams_main_function+0x150>
       case STATE_AMS_MAIN_IDLE:
           state_r2 = ams_main_idle_function();
 8022bc0:	f7ff fe16 	bl	80227f0 <ams_main_idle_function>
 8022bc4:	4603      	mov	r3, r0
 8022bc6:	461a      	mov	r2, r3
 8022bc8:	4b23      	ldr	r3, [pc, #140]	; (8022c58 <ams_main_function+0x1b8>)
 8022bca:	701a      	strb	r2, [r3, #0]
           break;
 8022bcc:	e010      	b.n	8022bf0 <ams_main_function+0x150>
       case STATE_AMS_MAIN_BALANCE:
           state_r2 = ams_main_balance_function();
 8022bce:	f7ff fedb 	bl	8022988 <ams_main_balance_function>
 8022bd2:	4603      	mov	r3, r0
 8022bd4:	461a      	mov	r2, r3
 8022bd6:	4b20      	ldr	r3, [pc, #128]	; (8022c58 <ams_main_function+0x1b8>)
 8022bd8:	701a      	strb	r2, [r3, #0]
           break;
 8022bda:	e009      	b.n	8022bf0 <ams_main_function+0x150>
       case STATE_AMS_MAIN_0:
           state_r2 = ams_main_0_function();
 8022bdc:	f7ff ff52 	bl	8022a84 <ams_main_0_function>
 8022be0:	4603      	mov	r3, r0
 8022be2:	461a      	mov	r2, r3
 8022be4:	4b1c      	ldr	r3, [pc, #112]	; (8022c58 <ams_main_function+0x1b8>)
 8022be6:	701a      	strb	r2, [r3, #0]
           break;
 8022be8:	e002      	b.n	8022bf0 <ams_main_function+0x150>
       default:
           ams_error();
 8022bea:	f7fe fd5c 	bl	80216a6 <ams_error>
           break;
 8022bee:	bf00      	nop
   }

   if((timer_r1 > 5)&&(ams_outputs.error||ams_inputs.ams_error||ams_inputs.imd_error)) {
 8022bf0:	4b17      	ldr	r3, [pc, #92]	; (8022c50 <ams_main_function+0x1b0>)
 8022bf2:	edd3 7a00 	vldr	s15, [r3]
 8022bf6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8022bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c02:	dd12      	ble.n	8022c2a <ams_main_function+0x18a>
 8022c04:	4b15      	ldr	r3, [pc, #84]	; (8022c5c <ams_main_function+0x1bc>)
 8022c06:	791b      	ldrb	r3, [r3, #4]
 8022c08:	2b00      	cmp	r3, #0
 8022c0a:	d108      	bne.n	8022c1e <ams_main_function+0x17e>
 8022c0c:	4b11      	ldr	r3, [pc, #68]	; (8022c54 <ams_main_function+0x1b4>)
 8022c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8022c12:	2b00      	cmp	r3, #0
 8022c14:	d103      	bne.n	8022c1e <ams_main_function+0x17e>
 8022c16:	4b0f      	ldr	r3, [pc, #60]	; (8022c54 <ams_main_function+0x1b4>)
 8022c18:	7c1b      	ldrb	r3, [r3, #16]
 8022c1a:	2b00      	cmp	r3, #0
 8022c1c:	d005      	beq.n	8022c2a <ams_main_function+0x18a>
       timer_r1 = 0;
 8022c1e:	4b0c      	ldr	r3, [pc, #48]	; (8022c50 <ams_main_function+0x1b0>)
 8022c20:	f04f 0200 	mov.w	r2, #0
 8022c24:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR;
 8022c26:	2302      	movs	r3, #2
 8022c28:	e00b      	b.n	8022c42 <ams_main_function+0x1a2>
   }


   timer_r1 += ams_inputs.Ts;
 8022c2a:	4b0a      	ldr	r3, [pc, #40]	; (8022c54 <ams_main_function+0x1b4>)
 8022c2c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8022c30:	4b07      	ldr	r3, [pc, #28]	; (8022c50 <ams_main_function+0x1b0>)
 8022c32:	edd3 7a00 	vldr	s15, [r3]
 8022c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022c3a:	4b05      	ldr	r3, [pc, #20]	; (8022c50 <ams_main_function+0x1b0>)
 8022c3c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN;
 8022c40:	2307      	movs	r3, #7
}
 8022c42:	4618      	mov	r0, r3
 8022c44:	bdb0      	pop	{r4, r5, r7, pc}
 8022c46:	bf00      	nop
 8022c48:	d2f1a9fc 	.word	0xd2f1a9fc
 8022c4c:	3f50624d 	.word	0x3f50624d
 8022c50:	20000a94 	.word	0x20000a94
 8022c54:	2001b168 	.word	0x2001b168
 8022c58:	20000a8d 	.word	0x20000a8d
 8022c5c:	2001b1c8 	.word	0x2001b1c8

08022c60 <ams_0_function>:

ams_state_t ams_0_function() {
 8022c60:	b480      	push	{r7}
 8022c62:	af00      	add	r7, sp, #0
   if(1) {
       timer_r1 = 0;
 8022c64:	4b04      	ldr	r3, [pc, #16]	; (8022c78 <ams_0_function+0x18>)
 8022c66:	f04f 0200 	mov.w	r2, #0
 8022c6a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN;
 8022c6c:	2307      	movs	r3, #7
   }

   timer_r1 += ams_inputs.Ts;
   return STATE_AMS_0;
}
 8022c6e:	4618      	mov	r0, r3
 8022c70:	46bd      	mov	sp, r7
 8022c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c76:	4770      	bx	lr
 8022c78:	20000a94 	.word	0x20000a94
 8022c7c:	00000000 	.word	0x00000000

08022c80 <ams_function>:

ams_state_t ams_function() {
 8022c80:	b5b0      	push	{r4, r5, r7, lr}
 8022c82:	af00      	add	r7, sp, #0
   if(timer_r0 < 0.001*ams_inputs.Ts) {
 8022c84:	4b28      	ldr	r3, [pc, #160]	; (8022d28 <ams_function+0xa8>)
 8022c86:	681b      	ldr	r3, [r3, #0]
 8022c88:	4618      	mov	r0, r3
 8022c8a:	f7dd fc4f 	bl	800052c <__aeabi_f2d>
 8022c8e:	4604      	mov	r4, r0
 8022c90:	460d      	mov	r5, r1
 8022c92:	4b26      	ldr	r3, [pc, #152]	; (8022d2c <ams_function+0xac>)
 8022c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022c96:	4618      	mov	r0, r3
 8022c98:	f7dd fc48 	bl	800052c <__aeabi_f2d>
 8022c9c:	a320      	add	r3, pc, #128	; (adr r3, 8022d20 <ams_function+0xa0>)
 8022c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ca2:	f7dd fc9b 	bl	80005dc <__aeabi_dmul>
 8022ca6:	4602      	mov	r2, r0
 8022ca8:	460b      	mov	r3, r1
 8022caa:	4620      	mov	r0, r4
 8022cac:	4629      	mov	r1, r5
 8022cae:	f7dd ff07 	bl	8000ac0 <__aeabi_dcmplt>
 8022cb2:	4603      	mov	r3, r0
 8022cb4:	2b00      	cmp	r3, #0
 8022cb6:	d002      	beq.n	8022cbe <ams_function+0x3e>
       state_r1 = STATE_AMS_0;
 8022cb8:	4b1d      	ldr	r3, [pc, #116]	; (8022d30 <ams_function+0xb0>)
 8022cba:	222e      	movs	r2, #46	; 0x2e
 8022cbc:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r1) {
 8022cbe:	4b1c      	ldr	r3, [pc, #112]	; (8022d30 <ams_function+0xb0>)
 8022cc0:	781b      	ldrb	r3, [r3, #0]
 8022cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8022cc4:	d014      	beq.n	8022cf0 <ams_function+0x70>
 8022cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8022cc8:	dc19      	bgt.n	8022cfe <ams_function+0x7e>
 8022cca:	2b02      	cmp	r3, #2
 8022ccc:	d002      	beq.n	8022cd4 <ams_function+0x54>
 8022cce:	2b07      	cmp	r3, #7
 8022cd0:	d007      	beq.n	8022ce2 <ams_function+0x62>
 8022cd2:	e014      	b.n	8022cfe <ams_function+0x7e>
       case STATE_AMS_ERROR:
           state_r1 = ams_error_function();
 8022cd4:	f7fe fd5c 	bl	8021790 <ams_error_function>
 8022cd8:	4603      	mov	r3, r0
 8022cda:	461a      	mov	r2, r3
 8022cdc:	4b14      	ldr	r3, [pc, #80]	; (8022d30 <ams_function+0xb0>)
 8022cde:	701a      	strb	r2, [r3, #0]
           break;
 8022ce0:	e010      	b.n	8022d04 <ams_function+0x84>
       case STATE_AMS_MAIN:
           state_r1 = ams_main_function();
 8022ce2:	f7ff fedd 	bl	8022aa0 <ams_main_function>
 8022ce6:	4603      	mov	r3, r0
 8022ce8:	461a      	mov	r2, r3
 8022cea:	4b11      	ldr	r3, [pc, #68]	; (8022d30 <ams_function+0xb0>)
 8022cec:	701a      	strb	r2, [r3, #0]
           break;
 8022cee:	e009      	b.n	8022d04 <ams_function+0x84>
       case STATE_AMS_0:
           state_r1 = ams_0_function();
 8022cf0:	f7ff ffb6 	bl	8022c60 <ams_0_function>
 8022cf4:	4603      	mov	r3, r0
 8022cf6:	461a      	mov	r2, r3
 8022cf8:	4b0d      	ldr	r3, [pc, #52]	; (8022d30 <ams_function+0xb0>)
 8022cfa:	701a      	strb	r2, [r3, #0]
           break;
 8022cfc:	e002      	b.n	8022d04 <ams_function+0x84>
       default:
           ams_error();
 8022cfe:	f7fe fcd2 	bl	80216a6 <ams_error>
           break;
 8022d02:	bf00      	nop
   }

   timer_r0 += ams_inputs.Ts;
 8022d04:	4b09      	ldr	r3, [pc, #36]	; (8022d2c <ams_function+0xac>)
 8022d06:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8022d0a:	4b07      	ldr	r3, [pc, #28]	; (8022d28 <ams_function+0xa8>)
 8022d0c:	edd3 7a00 	vldr	s15, [r3]
 8022d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022d14:	4b04      	ldr	r3, [pc, #16]	; (8022d28 <ams_function+0xa8>)
 8022d16:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS;
 8022d1a:	2301      	movs	r3, #1
}
 8022d1c:	4618      	mov	r0, r3
 8022d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8022d20:	d2f1a9fc 	.word	0xd2f1a9fc
 8022d24:	3f50624d 	.word	0x3f50624d
 8022d28:	20000a90 	.word	0x20000a90
 8022d2c:	2001b168 	.word	0x2001b168
 8022d30:	20000a8c 	.word	0x20000a8c

08022d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8022d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8022d6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8022d38:	480d      	ldr	r0, [pc, #52]	; (8022d70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8022d3a:	490e      	ldr	r1, [pc, #56]	; (8022d74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8022d3c:	4a0e      	ldr	r2, [pc, #56]	; (8022d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8022d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8022d40:	e002      	b.n	8022d48 <LoopCopyDataInit>

08022d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8022d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8022d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8022d46:	3304      	adds	r3, #4

08022d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8022d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8022d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8022d4c:	d3f9      	bcc.n	8022d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8022d4e:	4a0b      	ldr	r2, [pc, #44]	; (8022d7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8022d50:	4c0b      	ldr	r4, [pc, #44]	; (8022d80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8022d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8022d54:	e001      	b.n	8022d5a <LoopFillZerobss>

08022d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8022d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8022d58:	3204      	adds	r2, #4

08022d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8022d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8022d5c:	d3fb      	bcc.n	8022d56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8022d5e:	f7f4 fcb5 	bl	80176cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8022d62:	f009 ffbb 	bl	802ccdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8022d66:	f7f3 f957 	bl	8016018 <main>
  bx  lr    
 8022d6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8022d6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8022d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8022d74:	200003d4 	.word	0x200003d4
  ldr r2, =_sidata
 8022d78:	0802e138 	.word	0x0802e138
  ldr r2, =_sbss
 8022d7c:	200003d8 	.word	0x200003d8
  ldr r4, =_ebss
 8022d80:	2001dfd4 	.word	0x2001dfd4

08022d84 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8022d84:	e7fe      	b.n	8022d84 <CAN1_SCE_IRQHandler>
	...

08022d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8022d88:	b580      	push	{r7, lr}
 8022d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8022d8c:	4b0e      	ldr	r3, [pc, #56]	; (8022dc8 <HAL_Init+0x40>)
 8022d8e:	681b      	ldr	r3, [r3, #0]
 8022d90:	4a0d      	ldr	r2, [pc, #52]	; (8022dc8 <HAL_Init+0x40>)
 8022d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8022d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8022d98:	4b0b      	ldr	r3, [pc, #44]	; (8022dc8 <HAL_Init+0x40>)
 8022d9a:	681b      	ldr	r3, [r3, #0]
 8022d9c:	4a0a      	ldr	r2, [pc, #40]	; (8022dc8 <HAL_Init+0x40>)
 8022d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8022da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8022da4:	4b08      	ldr	r3, [pc, #32]	; (8022dc8 <HAL_Init+0x40>)
 8022da6:	681b      	ldr	r3, [r3, #0]
 8022da8:	4a07      	ldr	r2, [pc, #28]	; (8022dc8 <HAL_Init+0x40>)
 8022daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8022db0:	2003      	movs	r0, #3
 8022db2:	f001 fd1e 	bl	80247f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8022db6:	200f      	movs	r0, #15
 8022db8:	f7f4 fb98 	bl	80174ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8022dbc:	f7f4 fb6a 	bl	8017494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8022dc0:	2300      	movs	r3, #0
}
 8022dc2:	4618      	mov	r0, r3
 8022dc4:	bd80      	pop	{r7, pc}
 8022dc6:	bf00      	nop
 8022dc8:	40023c00 	.word	0x40023c00

08022dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8022dcc:	b480      	push	{r7}
 8022dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8022dd0:	4b06      	ldr	r3, [pc, #24]	; (8022dec <HAL_IncTick+0x20>)
 8022dd2:	781b      	ldrb	r3, [r3, #0]
 8022dd4:	461a      	mov	r2, r3
 8022dd6:	4b06      	ldr	r3, [pc, #24]	; (8022df0 <HAL_IncTick+0x24>)
 8022dd8:	681b      	ldr	r3, [r3, #0]
 8022dda:	4413      	add	r3, r2
 8022ddc:	4a04      	ldr	r2, [pc, #16]	; (8022df0 <HAL_IncTick+0x24>)
 8022dde:	6013      	str	r3, [r2, #0]
}
 8022de0:	bf00      	nop
 8022de2:	46bd      	mov	sp, r7
 8022de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022de8:	4770      	bx	lr
 8022dea:	bf00      	nop
 8022dec:	20000364 	.word	0x20000364
 8022df0:	2001dedc 	.word	0x2001dedc

08022df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8022df4:	b480      	push	{r7}
 8022df6:	af00      	add	r7, sp, #0
  return uwTick;
 8022df8:	4b03      	ldr	r3, [pc, #12]	; (8022e08 <HAL_GetTick+0x14>)
 8022dfa:	681b      	ldr	r3, [r3, #0]
}
 8022dfc:	4618      	mov	r0, r3
 8022dfe:	46bd      	mov	sp, r7
 8022e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e04:	4770      	bx	lr
 8022e06:	bf00      	nop
 8022e08:	2001dedc 	.word	0x2001dedc

08022e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8022e0c:	b580      	push	{r7, lr}
 8022e0e:	b084      	sub	sp, #16
 8022e10:	af00      	add	r7, sp, #0
 8022e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8022e14:	f7ff ffee 	bl	8022df4 <HAL_GetTick>
 8022e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8022e1a:	687b      	ldr	r3, [r7, #4]
 8022e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8022e1e:	68fb      	ldr	r3, [r7, #12]
 8022e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022e24:	d005      	beq.n	8022e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8022e26:	4b0a      	ldr	r3, [pc, #40]	; (8022e50 <HAL_Delay+0x44>)
 8022e28:	781b      	ldrb	r3, [r3, #0]
 8022e2a:	461a      	mov	r2, r3
 8022e2c:	68fb      	ldr	r3, [r7, #12]
 8022e2e:	4413      	add	r3, r2
 8022e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8022e32:	bf00      	nop
 8022e34:	f7ff ffde 	bl	8022df4 <HAL_GetTick>
 8022e38:	4602      	mov	r2, r0
 8022e3a:	68bb      	ldr	r3, [r7, #8]
 8022e3c:	1ad3      	subs	r3, r2, r3
 8022e3e:	68fa      	ldr	r2, [r7, #12]
 8022e40:	429a      	cmp	r2, r3
 8022e42:	d8f7      	bhi.n	8022e34 <HAL_Delay+0x28>
  {
  }
}
 8022e44:	bf00      	nop
 8022e46:	bf00      	nop
 8022e48:	3710      	adds	r7, #16
 8022e4a:	46bd      	mov	sp, r7
 8022e4c:	bd80      	pop	{r7, pc}
 8022e4e:	bf00      	nop
 8022e50:	20000364 	.word	0x20000364

08022e54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8022e54:	b580      	push	{r7, lr}
 8022e56:	b084      	sub	sp, #16
 8022e58:	af00      	add	r7, sp, #0
 8022e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8022e5c:	2300      	movs	r3, #0
 8022e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8022e60:	687b      	ldr	r3, [r7, #4]
 8022e62:	2b00      	cmp	r3, #0
 8022e64:	d101      	bne.n	8022e6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8022e66:	2301      	movs	r3, #1
 8022e68:	e033      	b.n	8022ed2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8022e6a:	687b      	ldr	r3, [r7, #4]
 8022e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022e6e:	2b00      	cmp	r3, #0
 8022e70:	d109      	bne.n	8022e86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8022e72:	6878      	ldr	r0, [r7, #4]
 8022e74:	f7f2 f872 	bl	8014f5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8022e78:	687b      	ldr	r3, [r7, #4]
 8022e7a:	2200      	movs	r2, #0
 8022e7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8022e7e:	687b      	ldr	r3, [r7, #4]
 8022e80:	2200      	movs	r2, #0
 8022e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8022e86:	687b      	ldr	r3, [r7, #4]
 8022e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022e8a:	f003 0310 	and.w	r3, r3, #16
 8022e8e:	2b00      	cmp	r3, #0
 8022e90:	d118      	bne.n	8022ec4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8022e92:	687b      	ldr	r3, [r7, #4]
 8022e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022e96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8022e9a:	f023 0302 	bic.w	r3, r3, #2
 8022e9e:	f043 0202 	orr.w	r2, r3, #2
 8022ea2:	687b      	ldr	r3, [r7, #4]
 8022ea4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8022ea6:	6878      	ldr	r0, [r7, #4]
 8022ea8:	f000 fb9e 	bl	80235e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8022eac:	687b      	ldr	r3, [r7, #4]
 8022eae:	2200      	movs	r2, #0
 8022eb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8022eb2:	687b      	ldr	r3, [r7, #4]
 8022eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022eb6:	f023 0303 	bic.w	r3, r3, #3
 8022eba:	f043 0201 	orr.w	r2, r3, #1
 8022ebe:	687b      	ldr	r3, [r7, #4]
 8022ec0:	641a      	str	r2, [r3, #64]	; 0x40
 8022ec2:	e001      	b.n	8022ec8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8022ec4:	2301      	movs	r3, #1
 8022ec6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8022ec8:	687b      	ldr	r3, [r7, #4]
 8022eca:	2200      	movs	r2, #0
 8022ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8022ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8022ed2:	4618      	mov	r0, r3
 8022ed4:	3710      	adds	r7, #16
 8022ed6:	46bd      	mov	sp, r7
 8022ed8:	bd80      	pop	{r7, pc}

08022eda <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8022eda:	b580      	push	{r7, lr}
 8022edc:	b084      	sub	sp, #16
 8022ede:	af00      	add	r7, sp, #0
 8022ee0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8022ee2:	2300      	movs	r3, #0
 8022ee4:	60fb      	str	r3, [r7, #12]
 8022ee6:	2300      	movs	r3, #0
 8022ee8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8022eea:	687b      	ldr	r3, [r7, #4]
 8022eec:	681b      	ldr	r3, [r3, #0]
 8022eee:	681b      	ldr	r3, [r3, #0]
 8022ef0:	f003 0302 	and.w	r3, r3, #2
 8022ef4:	2b02      	cmp	r3, #2
 8022ef6:	bf0c      	ite	eq
 8022ef8:	2301      	moveq	r3, #1
 8022efa:	2300      	movne	r3, #0
 8022efc:	b2db      	uxtb	r3, r3
 8022efe:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8022f00:	687b      	ldr	r3, [r7, #4]
 8022f02:	681b      	ldr	r3, [r3, #0]
 8022f04:	685b      	ldr	r3, [r3, #4]
 8022f06:	f003 0320 	and.w	r3, r3, #32
 8022f0a:	2b20      	cmp	r3, #32
 8022f0c:	bf0c      	ite	eq
 8022f0e:	2301      	moveq	r3, #1
 8022f10:	2300      	movne	r3, #0
 8022f12:	b2db      	uxtb	r3, r3
 8022f14:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8022f16:	68fb      	ldr	r3, [r7, #12]
 8022f18:	2b00      	cmp	r3, #0
 8022f1a:	d049      	beq.n	8022fb0 <HAL_ADC_IRQHandler+0xd6>
 8022f1c:	68bb      	ldr	r3, [r7, #8]
 8022f1e:	2b00      	cmp	r3, #0
 8022f20:	d046      	beq.n	8022fb0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8022f22:	687b      	ldr	r3, [r7, #4]
 8022f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022f26:	f003 0310 	and.w	r3, r3, #16
 8022f2a:	2b00      	cmp	r3, #0
 8022f2c:	d105      	bne.n	8022f3a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8022f2e:	687b      	ldr	r3, [r7, #4]
 8022f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022f32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8022f36:	687b      	ldr	r3, [r7, #4]
 8022f38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8022f3a:	687b      	ldr	r3, [r7, #4]
 8022f3c:	681b      	ldr	r3, [r3, #0]
 8022f3e:	689b      	ldr	r3, [r3, #8]
 8022f40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8022f44:	2b00      	cmp	r3, #0
 8022f46:	d12b      	bne.n	8022fa0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8022f48:	687b      	ldr	r3, [r7, #4]
 8022f4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8022f4c:	2b00      	cmp	r3, #0
 8022f4e:	d127      	bne.n	8022fa0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8022f50:	687b      	ldr	r3, [r7, #4]
 8022f52:	681b      	ldr	r3, [r3, #0]
 8022f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022f56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8022f5a:	2b00      	cmp	r3, #0
 8022f5c:	d006      	beq.n	8022f6c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8022f5e:	687b      	ldr	r3, [r7, #4]
 8022f60:	681b      	ldr	r3, [r3, #0]
 8022f62:	689b      	ldr	r3, [r3, #8]
 8022f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8022f68:	2b00      	cmp	r3, #0
 8022f6a:	d119      	bne.n	8022fa0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8022f6c:	687b      	ldr	r3, [r7, #4]
 8022f6e:	681b      	ldr	r3, [r3, #0]
 8022f70:	685a      	ldr	r2, [r3, #4]
 8022f72:	687b      	ldr	r3, [r7, #4]
 8022f74:	681b      	ldr	r3, [r3, #0]
 8022f76:	f022 0220 	bic.w	r2, r2, #32
 8022f7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8022f7c:	687b      	ldr	r3, [r7, #4]
 8022f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8022f84:	687b      	ldr	r3, [r7, #4]
 8022f86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8022f88:	687b      	ldr	r3, [r7, #4]
 8022f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8022f90:	2b00      	cmp	r3, #0
 8022f92:	d105      	bne.n	8022fa0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8022f94:	687b      	ldr	r3, [r7, #4]
 8022f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022f98:	f043 0201 	orr.w	r2, r3, #1
 8022f9c:	687b      	ldr	r3, [r7, #4]
 8022f9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8022fa0:	6878      	ldr	r0, [r7, #4]
 8022fa2:	f7f2 fa7d 	bl	80154a0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8022fa6:	687b      	ldr	r3, [r7, #4]
 8022fa8:	681b      	ldr	r3, [r3, #0]
 8022faa:	f06f 0212 	mvn.w	r2, #18
 8022fae:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	681b      	ldr	r3, [r3, #0]
 8022fb4:	681b      	ldr	r3, [r3, #0]
 8022fb6:	f003 0304 	and.w	r3, r3, #4
 8022fba:	2b04      	cmp	r3, #4
 8022fbc:	bf0c      	ite	eq
 8022fbe:	2301      	moveq	r3, #1
 8022fc0:	2300      	movne	r3, #0
 8022fc2:	b2db      	uxtb	r3, r3
 8022fc4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8022fc6:	687b      	ldr	r3, [r7, #4]
 8022fc8:	681b      	ldr	r3, [r3, #0]
 8022fca:	685b      	ldr	r3, [r3, #4]
 8022fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022fd0:	2b80      	cmp	r3, #128	; 0x80
 8022fd2:	bf0c      	ite	eq
 8022fd4:	2301      	moveq	r3, #1
 8022fd6:	2300      	movne	r3, #0
 8022fd8:	b2db      	uxtb	r3, r3
 8022fda:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8022fdc:	68fb      	ldr	r3, [r7, #12]
 8022fde:	2b00      	cmp	r3, #0
 8022fe0:	d057      	beq.n	8023092 <HAL_ADC_IRQHandler+0x1b8>
 8022fe2:	68bb      	ldr	r3, [r7, #8]
 8022fe4:	2b00      	cmp	r3, #0
 8022fe6:	d054      	beq.n	8023092 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8022fe8:	687b      	ldr	r3, [r7, #4]
 8022fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022fec:	f003 0310 	and.w	r3, r3, #16
 8022ff0:	2b00      	cmp	r3, #0
 8022ff2:	d105      	bne.n	8023000 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8022ff4:	687b      	ldr	r3, [r7, #4]
 8022ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022ff8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8022ffc:	687b      	ldr	r3, [r7, #4]
 8022ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8023000:	687b      	ldr	r3, [r7, #4]
 8023002:	681b      	ldr	r3, [r3, #0]
 8023004:	689b      	ldr	r3, [r3, #8]
 8023006:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 802300a:	2b00      	cmp	r3, #0
 802300c:	d139      	bne.n	8023082 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 802300e:	687b      	ldr	r3, [r7, #4]
 8023010:	681b      	ldr	r3, [r3, #0]
 8023012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023014:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8023018:	2b00      	cmp	r3, #0
 802301a:	d006      	beq.n	802302a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 802301c:	687b      	ldr	r3, [r7, #4]
 802301e:	681b      	ldr	r3, [r3, #0]
 8023020:	689b      	ldr	r3, [r3, #8]
 8023022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8023026:	2b00      	cmp	r3, #0
 8023028:	d12b      	bne.n	8023082 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 802302a:	687b      	ldr	r3, [r7, #4]
 802302c:	681b      	ldr	r3, [r3, #0]
 802302e:	685b      	ldr	r3, [r3, #4]
 8023030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8023034:	2b00      	cmp	r3, #0
 8023036:	d124      	bne.n	8023082 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8023038:	687b      	ldr	r3, [r7, #4]
 802303a:	681b      	ldr	r3, [r3, #0]
 802303c:	689b      	ldr	r3, [r3, #8]
 802303e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8023042:	2b00      	cmp	r3, #0
 8023044:	d11d      	bne.n	8023082 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8023046:	687b      	ldr	r3, [r7, #4]
 8023048:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 802304a:	2b00      	cmp	r3, #0
 802304c:	d119      	bne.n	8023082 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 802304e:	687b      	ldr	r3, [r7, #4]
 8023050:	681b      	ldr	r3, [r3, #0]
 8023052:	685a      	ldr	r2, [r3, #4]
 8023054:	687b      	ldr	r3, [r7, #4]
 8023056:	681b      	ldr	r3, [r3, #0]
 8023058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802305c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 802305e:	687b      	ldr	r3, [r7, #4]
 8023060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8023066:	687b      	ldr	r3, [r7, #4]
 8023068:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 802306a:	687b      	ldr	r3, [r7, #4]
 802306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023072:	2b00      	cmp	r3, #0
 8023074:	d105      	bne.n	8023082 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8023076:	687b      	ldr	r3, [r7, #4]
 8023078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802307a:	f043 0201 	orr.w	r2, r3, #1
 802307e:	687b      	ldr	r3, [r7, #4]
 8023080:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8023082:	6878      	ldr	r0, [r7, #4]
 8023084:	f000 fc2e 	bl	80238e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8023088:	687b      	ldr	r3, [r7, #4]
 802308a:	681b      	ldr	r3, [r3, #0]
 802308c:	f06f 020c 	mvn.w	r2, #12
 8023090:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8023092:	687b      	ldr	r3, [r7, #4]
 8023094:	681b      	ldr	r3, [r3, #0]
 8023096:	681b      	ldr	r3, [r3, #0]
 8023098:	f003 0301 	and.w	r3, r3, #1
 802309c:	2b01      	cmp	r3, #1
 802309e:	bf0c      	ite	eq
 80230a0:	2301      	moveq	r3, #1
 80230a2:	2300      	movne	r3, #0
 80230a4:	b2db      	uxtb	r3, r3
 80230a6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80230a8:	687b      	ldr	r3, [r7, #4]
 80230aa:	681b      	ldr	r3, [r3, #0]
 80230ac:	685b      	ldr	r3, [r3, #4]
 80230ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80230b2:	2b40      	cmp	r3, #64	; 0x40
 80230b4:	bf0c      	ite	eq
 80230b6:	2301      	moveq	r3, #1
 80230b8:	2300      	movne	r3, #0
 80230ba:	b2db      	uxtb	r3, r3
 80230bc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80230be:	68fb      	ldr	r3, [r7, #12]
 80230c0:	2b00      	cmp	r3, #0
 80230c2:	d017      	beq.n	80230f4 <HAL_ADC_IRQHandler+0x21a>
 80230c4:	68bb      	ldr	r3, [r7, #8]
 80230c6:	2b00      	cmp	r3, #0
 80230c8:	d014      	beq.n	80230f4 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80230ca:	687b      	ldr	r3, [r7, #4]
 80230cc:	681b      	ldr	r3, [r3, #0]
 80230ce:	681b      	ldr	r3, [r3, #0]
 80230d0:	f003 0301 	and.w	r3, r3, #1
 80230d4:	2b01      	cmp	r3, #1
 80230d6:	d10d      	bne.n	80230f4 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80230d8:	687b      	ldr	r3, [r7, #4]
 80230da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80230dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80230e0:	687b      	ldr	r3, [r7, #4]
 80230e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80230e4:	6878      	ldr	r0, [r7, #4]
 80230e6:	f000 f949 	bl	802337c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80230ea:	687b      	ldr	r3, [r7, #4]
 80230ec:	681b      	ldr	r3, [r3, #0]
 80230ee:	f06f 0201 	mvn.w	r2, #1
 80230f2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80230f4:	687b      	ldr	r3, [r7, #4]
 80230f6:	681b      	ldr	r3, [r3, #0]
 80230f8:	681b      	ldr	r3, [r3, #0]
 80230fa:	f003 0320 	and.w	r3, r3, #32
 80230fe:	2b20      	cmp	r3, #32
 8023100:	bf0c      	ite	eq
 8023102:	2301      	moveq	r3, #1
 8023104:	2300      	movne	r3, #0
 8023106:	b2db      	uxtb	r3, r3
 8023108:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 802310a:	687b      	ldr	r3, [r7, #4]
 802310c:	681b      	ldr	r3, [r3, #0]
 802310e:	685b      	ldr	r3, [r3, #4]
 8023110:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8023114:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8023118:	bf0c      	ite	eq
 802311a:	2301      	moveq	r3, #1
 802311c:	2300      	movne	r3, #0
 802311e:	b2db      	uxtb	r3, r3
 8023120:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8023122:	68fb      	ldr	r3, [r7, #12]
 8023124:	2b00      	cmp	r3, #0
 8023126:	d015      	beq.n	8023154 <HAL_ADC_IRQHandler+0x27a>
 8023128:	68bb      	ldr	r3, [r7, #8]
 802312a:	2b00      	cmp	r3, #0
 802312c:	d012      	beq.n	8023154 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 802312e:	687b      	ldr	r3, [r7, #4]
 8023130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023132:	f043 0202 	orr.w	r2, r3, #2
 8023136:	687b      	ldr	r3, [r7, #4]
 8023138:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 802313a:	687b      	ldr	r3, [r7, #4]
 802313c:	681b      	ldr	r3, [r3, #0]
 802313e:	f06f 0220 	mvn.w	r2, #32
 8023142:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8023144:	6878      	ldr	r0, [r7, #4]
 8023146:	f000 f923 	bl	8023390 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 802314a:	687b      	ldr	r3, [r7, #4]
 802314c:	681b      	ldr	r3, [r3, #0]
 802314e:	f06f 0220 	mvn.w	r2, #32
 8023152:	601a      	str	r2, [r3, #0]
  }
}
 8023154:	bf00      	nop
 8023156:	3710      	adds	r7, #16
 8023158:	46bd      	mov	sp, r7
 802315a:	bd80      	pop	{r7, pc}

0802315c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 802315c:	b580      	push	{r7, lr}
 802315e:	b086      	sub	sp, #24
 8023160:	af00      	add	r7, sp, #0
 8023162:	60f8      	str	r0, [r7, #12]
 8023164:	60b9      	str	r1, [r7, #8]
 8023166:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8023168:	2300      	movs	r3, #0
 802316a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802316c:	68fb      	ldr	r3, [r7, #12]
 802316e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023172:	2b01      	cmp	r3, #1
 8023174:	d101      	bne.n	802317a <HAL_ADC_Start_DMA+0x1e>
 8023176:	2302      	movs	r3, #2
 8023178:	e0e9      	b.n	802334e <HAL_ADC_Start_DMA+0x1f2>
 802317a:	68fb      	ldr	r3, [r7, #12]
 802317c:	2201      	movs	r2, #1
 802317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8023182:	68fb      	ldr	r3, [r7, #12]
 8023184:	681b      	ldr	r3, [r3, #0]
 8023186:	689b      	ldr	r3, [r3, #8]
 8023188:	f003 0301 	and.w	r3, r3, #1
 802318c:	2b01      	cmp	r3, #1
 802318e:	d018      	beq.n	80231c2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8023190:	68fb      	ldr	r3, [r7, #12]
 8023192:	681b      	ldr	r3, [r3, #0]
 8023194:	689a      	ldr	r2, [r3, #8]
 8023196:	68fb      	ldr	r3, [r7, #12]
 8023198:	681b      	ldr	r3, [r3, #0]
 802319a:	f042 0201 	orr.w	r2, r2, #1
 802319e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80231a0:	4b6d      	ldr	r3, [pc, #436]	; (8023358 <HAL_ADC_Start_DMA+0x1fc>)
 80231a2:	681b      	ldr	r3, [r3, #0]
 80231a4:	4a6d      	ldr	r2, [pc, #436]	; (802335c <HAL_ADC_Start_DMA+0x200>)
 80231a6:	fba2 2303 	umull	r2, r3, r2, r3
 80231aa:	0c9a      	lsrs	r2, r3, #18
 80231ac:	4613      	mov	r3, r2
 80231ae:	005b      	lsls	r3, r3, #1
 80231b0:	4413      	add	r3, r2
 80231b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80231b4:	e002      	b.n	80231bc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80231b6:	693b      	ldr	r3, [r7, #16]
 80231b8:	3b01      	subs	r3, #1
 80231ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80231bc:	693b      	ldr	r3, [r7, #16]
 80231be:	2b00      	cmp	r3, #0
 80231c0:	d1f9      	bne.n	80231b6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80231c2:	68fb      	ldr	r3, [r7, #12]
 80231c4:	681b      	ldr	r3, [r3, #0]
 80231c6:	689b      	ldr	r3, [r3, #8]
 80231c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80231cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80231d0:	d107      	bne.n	80231e2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80231d2:	68fb      	ldr	r3, [r7, #12]
 80231d4:	681b      	ldr	r3, [r3, #0]
 80231d6:	689a      	ldr	r2, [r3, #8]
 80231d8:	68fb      	ldr	r3, [r7, #12]
 80231da:	681b      	ldr	r3, [r3, #0]
 80231dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80231e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80231e2:	68fb      	ldr	r3, [r7, #12]
 80231e4:	681b      	ldr	r3, [r3, #0]
 80231e6:	689b      	ldr	r3, [r3, #8]
 80231e8:	f003 0301 	and.w	r3, r3, #1
 80231ec:	2b01      	cmp	r3, #1
 80231ee:	f040 80a1 	bne.w	8023334 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80231f2:	68fb      	ldr	r3, [r7, #12]
 80231f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80231fa:	f023 0301 	bic.w	r3, r3, #1
 80231fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8023202:	68fb      	ldr	r3, [r7, #12]
 8023204:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8023206:	68fb      	ldr	r3, [r7, #12]
 8023208:	681b      	ldr	r3, [r3, #0]
 802320a:	685b      	ldr	r3, [r3, #4]
 802320c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8023210:	2b00      	cmp	r3, #0
 8023212:	d007      	beq.n	8023224 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8023214:	68fb      	ldr	r3, [r7, #12]
 8023216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023218:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 802321c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8023220:	68fb      	ldr	r3, [r7, #12]
 8023222:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8023224:	68fb      	ldr	r3, [r7, #12]
 8023226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802322c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023230:	d106      	bne.n	8023240 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8023232:	68fb      	ldr	r3, [r7, #12]
 8023234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023236:	f023 0206 	bic.w	r2, r3, #6
 802323a:	68fb      	ldr	r3, [r7, #12]
 802323c:	645a      	str	r2, [r3, #68]	; 0x44
 802323e:	e002      	b.n	8023246 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8023240:	68fb      	ldr	r3, [r7, #12]
 8023242:	2200      	movs	r2, #0
 8023244:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8023246:	68fb      	ldr	r3, [r7, #12]
 8023248:	2200      	movs	r2, #0
 802324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802324e:	4b44      	ldr	r3, [pc, #272]	; (8023360 <HAL_ADC_Start_DMA+0x204>)
 8023250:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8023252:	68fb      	ldr	r3, [r7, #12]
 8023254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023256:	4a43      	ldr	r2, [pc, #268]	; (8023364 <HAL_ADC_Start_DMA+0x208>)
 8023258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 802325a:	68fb      	ldr	r3, [r7, #12]
 802325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802325e:	4a42      	ldr	r2, [pc, #264]	; (8023368 <HAL_ADC_Start_DMA+0x20c>)
 8023260:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8023262:	68fb      	ldr	r3, [r7, #12]
 8023264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023266:	4a41      	ldr	r2, [pc, #260]	; (802336c <HAL_ADC_Start_DMA+0x210>)
 8023268:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 802326a:	68fb      	ldr	r3, [r7, #12]
 802326c:	681b      	ldr	r3, [r3, #0]
 802326e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8023272:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8023274:	68fb      	ldr	r3, [r7, #12]
 8023276:	681b      	ldr	r3, [r3, #0]
 8023278:	685a      	ldr	r2, [r3, #4]
 802327a:	68fb      	ldr	r3, [r7, #12]
 802327c:	681b      	ldr	r3, [r3, #0]
 802327e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8023282:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8023284:	68fb      	ldr	r3, [r7, #12]
 8023286:	681b      	ldr	r3, [r3, #0]
 8023288:	689a      	ldr	r2, [r3, #8]
 802328a:	68fb      	ldr	r3, [r7, #12]
 802328c:	681b      	ldr	r3, [r3, #0]
 802328e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8023292:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8023294:	68fb      	ldr	r3, [r7, #12]
 8023296:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8023298:	68fb      	ldr	r3, [r7, #12]
 802329a:	681b      	ldr	r3, [r3, #0]
 802329c:	334c      	adds	r3, #76	; 0x4c
 802329e:	4619      	mov	r1, r3
 80232a0:	68ba      	ldr	r2, [r7, #8]
 80232a2:	687b      	ldr	r3, [r7, #4]
 80232a4:	f001 fb88 	bl	80249b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80232a8:	697b      	ldr	r3, [r7, #20]
 80232aa:	685b      	ldr	r3, [r3, #4]
 80232ac:	f003 031f 	and.w	r3, r3, #31
 80232b0:	2b00      	cmp	r3, #0
 80232b2:	d12a      	bne.n	802330a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80232b4:	68fb      	ldr	r3, [r7, #12]
 80232b6:	681b      	ldr	r3, [r3, #0]
 80232b8:	4a2d      	ldr	r2, [pc, #180]	; (8023370 <HAL_ADC_Start_DMA+0x214>)
 80232ba:	4293      	cmp	r3, r2
 80232bc:	d015      	beq.n	80232ea <HAL_ADC_Start_DMA+0x18e>
 80232be:	68fb      	ldr	r3, [r7, #12]
 80232c0:	681b      	ldr	r3, [r3, #0]
 80232c2:	4a2c      	ldr	r2, [pc, #176]	; (8023374 <HAL_ADC_Start_DMA+0x218>)
 80232c4:	4293      	cmp	r3, r2
 80232c6:	d105      	bne.n	80232d4 <HAL_ADC_Start_DMA+0x178>
 80232c8:	4b25      	ldr	r3, [pc, #148]	; (8023360 <HAL_ADC_Start_DMA+0x204>)
 80232ca:	685b      	ldr	r3, [r3, #4]
 80232cc:	f003 031f 	and.w	r3, r3, #31
 80232d0:	2b00      	cmp	r3, #0
 80232d2:	d00a      	beq.n	80232ea <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80232d4:	68fb      	ldr	r3, [r7, #12]
 80232d6:	681b      	ldr	r3, [r3, #0]
 80232d8:	4a27      	ldr	r2, [pc, #156]	; (8023378 <HAL_ADC_Start_DMA+0x21c>)
 80232da:	4293      	cmp	r3, r2
 80232dc:	d136      	bne.n	802334c <HAL_ADC_Start_DMA+0x1f0>
 80232de:	4b20      	ldr	r3, [pc, #128]	; (8023360 <HAL_ADC_Start_DMA+0x204>)
 80232e0:	685b      	ldr	r3, [r3, #4]
 80232e2:	f003 0310 	and.w	r3, r3, #16
 80232e6:	2b00      	cmp	r3, #0
 80232e8:	d130      	bne.n	802334c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80232ea:	68fb      	ldr	r3, [r7, #12]
 80232ec:	681b      	ldr	r3, [r3, #0]
 80232ee:	689b      	ldr	r3, [r3, #8]
 80232f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80232f4:	2b00      	cmp	r3, #0
 80232f6:	d129      	bne.n	802334c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80232f8:	68fb      	ldr	r3, [r7, #12]
 80232fa:	681b      	ldr	r3, [r3, #0]
 80232fc:	689a      	ldr	r2, [r3, #8]
 80232fe:	68fb      	ldr	r3, [r7, #12]
 8023300:	681b      	ldr	r3, [r3, #0]
 8023302:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8023306:	609a      	str	r2, [r3, #8]
 8023308:	e020      	b.n	802334c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 802330a:	68fb      	ldr	r3, [r7, #12]
 802330c:	681b      	ldr	r3, [r3, #0]
 802330e:	4a18      	ldr	r2, [pc, #96]	; (8023370 <HAL_ADC_Start_DMA+0x214>)
 8023310:	4293      	cmp	r3, r2
 8023312:	d11b      	bne.n	802334c <HAL_ADC_Start_DMA+0x1f0>
 8023314:	68fb      	ldr	r3, [r7, #12]
 8023316:	681b      	ldr	r3, [r3, #0]
 8023318:	689b      	ldr	r3, [r3, #8]
 802331a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802331e:	2b00      	cmp	r3, #0
 8023320:	d114      	bne.n	802334c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8023322:	68fb      	ldr	r3, [r7, #12]
 8023324:	681b      	ldr	r3, [r3, #0]
 8023326:	689a      	ldr	r2, [r3, #8]
 8023328:	68fb      	ldr	r3, [r7, #12]
 802332a:	681b      	ldr	r3, [r3, #0]
 802332c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8023330:	609a      	str	r2, [r3, #8]
 8023332:	e00b      	b.n	802334c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8023334:	68fb      	ldr	r3, [r7, #12]
 8023336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023338:	f043 0210 	orr.w	r2, r3, #16
 802333c:	68fb      	ldr	r3, [r7, #12]
 802333e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8023340:	68fb      	ldr	r3, [r7, #12]
 8023342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023344:	f043 0201 	orr.w	r2, r3, #1
 8023348:	68fb      	ldr	r3, [r7, #12]
 802334a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 802334c:	2300      	movs	r3, #0
}
 802334e:	4618      	mov	r0, r3
 8023350:	3718      	adds	r7, #24
 8023352:	46bd      	mov	sp, r7
 8023354:	bd80      	pop	{r7, pc}
 8023356:	bf00      	nop
 8023358:	20000080 	.word	0x20000080
 802335c:	431bde83 	.word	0x431bde83
 8023360:	40012300 	.word	0x40012300
 8023364:	080237e1 	.word	0x080237e1
 8023368:	0802389b 	.word	0x0802389b
 802336c:	080238b7 	.word	0x080238b7
 8023370:	40012000 	.word	0x40012000
 8023374:	40012100 	.word	0x40012100
 8023378:	40012200 	.word	0x40012200

0802337c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 802337c:	b480      	push	{r7}
 802337e:	b083      	sub	sp, #12
 8023380:	af00      	add	r7, sp, #0
 8023382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8023384:	bf00      	nop
 8023386:	370c      	adds	r7, #12
 8023388:	46bd      	mov	sp, r7
 802338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802338e:	4770      	bx	lr

08023390 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8023390:	b480      	push	{r7}
 8023392:	b083      	sub	sp, #12
 8023394:	af00      	add	r7, sp, #0
 8023396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8023398:	bf00      	nop
 802339a:	370c      	adds	r7, #12
 802339c:	46bd      	mov	sp, r7
 802339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233a2:	4770      	bx	lr

080233a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80233a4:	b480      	push	{r7}
 80233a6:	b085      	sub	sp, #20
 80233a8:	af00      	add	r7, sp, #0
 80233aa:	6078      	str	r0, [r7, #4]
 80233ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80233ae:	2300      	movs	r3, #0
 80233b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80233b2:	687b      	ldr	r3, [r7, #4]
 80233b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80233b8:	2b01      	cmp	r3, #1
 80233ba:	d101      	bne.n	80233c0 <HAL_ADC_ConfigChannel+0x1c>
 80233bc:	2302      	movs	r3, #2
 80233be:	e105      	b.n	80235cc <HAL_ADC_ConfigChannel+0x228>
 80233c0:	687b      	ldr	r3, [r7, #4]
 80233c2:	2201      	movs	r2, #1
 80233c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80233c8:	683b      	ldr	r3, [r7, #0]
 80233ca:	681b      	ldr	r3, [r3, #0]
 80233cc:	2b09      	cmp	r3, #9
 80233ce:	d925      	bls.n	802341c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80233d0:	687b      	ldr	r3, [r7, #4]
 80233d2:	681b      	ldr	r3, [r3, #0]
 80233d4:	68d9      	ldr	r1, [r3, #12]
 80233d6:	683b      	ldr	r3, [r7, #0]
 80233d8:	681b      	ldr	r3, [r3, #0]
 80233da:	b29b      	uxth	r3, r3
 80233dc:	461a      	mov	r2, r3
 80233de:	4613      	mov	r3, r2
 80233e0:	005b      	lsls	r3, r3, #1
 80233e2:	4413      	add	r3, r2
 80233e4:	3b1e      	subs	r3, #30
 80233e6:	2207      	movs	r2, #7
 80233e8:	fa02 f303 	lsl.w	r3, r2, r3
 80233ec:	43da      	mvns	r2, r3
 80233ee:	687b      	ldr	r3, [r7, #4]
 80233f0:	681b      	ldr	r3, [r3, #0]
 80233f2:	400a      	ands	r2, r1
 80233f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80233f6:	687b      	ldr	r3, [r7, #4]
 80233f8:	681b      	ldr	r3, [r3, #0]
 80233fa:	68d9      	ldr	r1, [r3, #12]
 80233fc:	683b      	ldr	r3, [r7, #0]
 80233fe:	689a      	ldr	r2, [r3, #8]
 8023400:	683b      	ldr	r3, [r7, #0]
 8023402:	681b      	ldr	r3, [r3, #0]
 8023404:	b29b      	uxth	r3, r3
 8023406:	4618      	mov	r0, r3
 8023408:	4603      	mov	r3, r0
 802340a:	005b      	lsls	r3, r3, #1
 802340c:	4403      	add	r3, r0
 802340e:	3b1e      	subs	r3, #30
 8023410:	409a      	lsls	r2, r3
 8023412:	687b      	ldr	r3, [r7, #4]
 8023414:	681b      	ldr	r3, [r3, #0]
 8023416:	430a      	orrs	r2, r1
 8023418:	60da      	str	r2, [r3, #12]
 802341a:	e022      	b.n	8023462 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 802341c:	687b      	ldr	r3, [r7, #4]
 802341e:	681b      	ldr	r3, [r3, #0]
 8023420:	6919      	ldr	r1, [r3, #16]
 8023422:	683b      	ldr	r3, [r7, #0]
 8023424:	681b      	ldr	r3, [r3, #0]
 8023426:	b29b      	uxth	r3, r3
 8023428:	461a      	mov	r2, r3
 802342a:	4613      	mov	r3, r2
 802342c:	005b      	lsls	r3, r3, #1
 802342e:	4413      	add	r3, r2
 8023430:	2207      	movs	r2, #7
 8023432:	fa02 f303 	lsl.w	r3, r2, r3
 8023436:	43da      	mvns	r2, r3
 8023438:	687b      	ldr	r3, [r7, #4]
 802343a:	681b      	ldr	r3, [r3, #0]
 802343c:	400a      	ands	r2, r1
 802343e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8023440:	687b      	ldr	r3, [r7, #4]
 8023442:	681b      	ldr	r3, [r3, #0]
 8023444:	6919      	ldr	r1, [r3, #16]
 8023446:	683b      	ldr	r3, [r7, #0]
 8023448:	689a      	ldr	r2, [r3, #8]
 802344a:	683b      	ldr	r3, [r7, #0]
 802344c:	681b      	ldr	r3, [r3, #0]
 802344e:	b29b      	uxth	r3, r3
 8023450:	4618      	mov	r0, r3
 8023452:	4603      	mov	r3, r0
 8023454:	005b      	lsls	r3, r3, #1
 8023456:	4403      	add	r3, r0
 8023458:	409a      	lsls	r2, r3
 802345a:	687b      	ldr	r3, [r7, #4]
 802345c:	681b      	ldr	r3, [r3, #0]
 802345e:	430a      	orrs	r2, r1
 8023460:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8023462:	683b      	ldr	r3, [r7, #0]
 8023464:	685b      	ldr	r3, [r3, #4]
 8023466:	2b06      	cmp	r3, #6
 8023468:	d824      	bhi.n	80234b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 802346a:	687b      	ldr	r3, [r7, #4]
 802346c:	681b      	ldr	r3, [r3, #0]
 802346e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8023470:	683b      	ldr	r3, [r7, #0]
 8023472:	685a      	ldr	r2, [r3, #4]
 8023474:	4613      	mov	r3, r2
 8023476:	009b      	lsls	r3, r3, #2
 8023478:	4413      	add	r3, r2
 802347a:	3b05      	subs	r3, #5
 802347c:	221f      	movs	r2, #31
 802347e:	fa02 f303 	lsl.w	r3, r2, r3
 8023482:	43da      	mvns	r2, r3
 8023484:	687b      	ldr	r3, [r7, #4]
 8023486:	681b      	ldr	r3, [r3, #0]
 8023488:	400a      	ands	r2, r1
 802348a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 802348c:	687b      	ldr	r3, [r7, #4]
 802348e:	681b      	ldr	r3, [r3, #0]
 8023490:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8023492:	683b      	ldr	r3, [r7, #0]
 8023494:	681b      	ldr	r3, [r3, #0]
 8023496:	b29b      	uxth	r3, r3
 8023498:	4618      	mov	r0, r3
 802349a:	683b      	ldr	r3, [r7, #0]
 802349c:	685a      	ldr	r2, [r3, #4]
 802349e:	4613      	mov	r3, r2
 80234a0:	009b      	lsls	r3, r3, #2
 80234a2:	4413      	add	r3, r2
 80234a4:	3b05      	subs	r3, #5
 80234a6:	fa00 f203 	lsl.w	r2, r0, r3
 80234aa:	687b      	ldr	r3, [r7, #4]
 80234ac:	681b      	ldr	r3, [r3, #0]
 80234ae:	430a      	orrs	r2, r1
 80234b0:	635a      	str	r2, [r3, #52]	; 0x34
 80234b2:	e04c      	b.n	802354e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80234b4:	683b      	ldr	r3, [r7, #0]
 80234b6:	685b      	ldr	r3, [r3, #4]
 80234b8:	2b0c      	cmp	r3, #12
 80234ba:	d824      	bhi.n	8023506 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80234bc:	687b      	ldr	r3, [r7, #4]
 80234be:	681b      	ldr	r3, [r3, #0]
 80234c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80234c2:	683b      	ldr	r3, [r7, #0]
 80234c4:	685a      	ldr	r2, [r3, #4]
 80234c6:	4613      	mov	r3, r2
 80234c8:	009b      	lsls	r3, r3, #2
 80234ca:	4413      	add	r3, r2
 80234cc:	3b23      	subs	r3, #35	; 0x23
 80234ce:	221f      	movs	r2, #31
 80234d0:	fa02 f303 	lsl.w	r3, r2, r3
 80234d4:	43da      	mvns	r2, r3
 80234d6:	687b      	ldr	r3, [r7, #4]
 80234d8:	681b      	ldr	r3, [r3, #0]
 80234da:	400a      	ands	r2, r1
 80234dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80234de:	687b      	ldr	r3, [r7, #4]
 80234e0:	681b      	ldr	r3, [r3, #0]
 80234e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80234e4:	683b      	ldr	r3, [r7, #0]
 80234e6:	681b      	ldr	r3, [r3, #0]
 80234e8:	b29b      	uxth	r3, r3
 80234ea:	4618      	mov	r0, r3
 80234ec:	683b      	ldr	r3, [r7, #0]
 80234ee:	685a      	ldr	r2, [r3, #4]
 80234f0:	4613      	mov	r3, r2
 80234f2:	009b      	lsls	r3, r3, #2
 80234f4:	4413      	add	r3, r2
 80234f6:	3b23      	subs	r3, #35	; 0x23
 80234f8:	fa00 f203 	lsl.w	r2, r0, r3
 80234fc:	687b      	ldr	r3, [r7, #4]
 80234fe:	681b      	ldr	r3, [r3, #0]
 8023500:	430a      	orrs	r2, r1
 8023502:	631a      	str	r2, [r3, #48]	; 0x30
 8023504:	e023      	b.n	802354e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8023506:	687b      	ldr	r3, [r7, #4]
 8023508:	681b      	ldr	r3, [r3, #0]
 802350a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802350c:	683b      	ldr	r3, [r7, #0]
 802350e:	685a      	ldr	r2, [r3, #4]
 8023510:	4613      	mov	r3, r2
 8023512:	009b      	lsls	r3, r3, #2
 8023514:	4413      	add	r3, r2
 8023516:	3b41      	subs	r3, #65	; 0x41
 8023518:	221f      	movs	r2, #31
 802351a:	fa02 f303 	lsl.w	r3, r2, r3
 802351e:	43da      	mvns	r2, r3
 8023520:	687b      	ldr	r3, [r7, #4]
 8023522:	681b      	ldr	r3, [r3, #0]
 8023524:	400a      	ands	r2, r1
 8023526:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8023528:	687b      	ldr	r3, [r7, #4]
 802352a:	681b      	ldr	r3, [r3, #0]
 802352c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802352e:	683b      	ldr	r3, [r7, #0]
 8023530:	681b      	ldr	r3, [r3, #0]
 8023532:	b29b      	uxth	r3, r3
 8023534:	4618      	mov	r0, r3
 8023536:	683b      	ldr	r3, [r7, #0]
 8023538:	685a      	ldr	r2, [r3, #4]
 802353a:	4613      	mov	r3, r2
 802353c:	009b      	lsls	r3, r3, #2
 802353e:	4413      	add	r3, r2
 8023540:	3b41      	subs	r3, #65	; 0x41
 8023542:	fa00 f203 	lsl.w	r2, r0, r3
 8023546:	687b      	ldr	r3, [r7, #4]
 8023548:	681b      	ldr	r3, [r3, #0]
 802354a:	430a      	orrs	r2, r1
 802354c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802354e:	4b22      	ldr	r3, [pc, #136]	; (80235d8 <HAL_ADC_ConfigChannel+0x234>)
 8023550:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8023552:	687b      	ldr	r3, [r7, #4]
 8023554:	681b      	ldr	r3, [r3, #0]
 8023556:	4a21      	ldr	r2, [pc, #132]	; (80235dc <HAL_ADC_ConfigChannel+0x238>)
 8023558:	4293      	cmp	r3, r2
 802355a:	d109      	bne.n	8023570 <HAL_ADC_ConfigChannel+0x1cc>
 802355c:	683b      	ldr	r3, [r7, #0]
 802355e:	681b      	ldr	r3, [r3, #0]
 8023560:	2b12      	cmp	r3, #18
 8023562:	d105      	bne.n	8023570 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8023564:	68fb      	ldr	r3, [r7, #12]
 8023566:	685b      	ldr	r3, [r3, #4]
 8023568:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 802356c:	68fb      	ldr	r3, [r7, #12]
 802356e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8023570:	687b      	ldr	r3, [r7, #4]
 8023572:	681b      	ldr	r3, [r3, #0]
 8023574:	4a19      	ldr	r2, [pc, #100]	; (80235dc <HAL_ADC_ConfigChannel+0x238>)
 8023576:	4293      	cmp	r3, r2
 8023578:	d123      	bne.n	80235c2 <HAL_ADC_ConfigChannel+0x21e>
 802357a:	683b      	ldr	r3, [r7, #0]
 802357c:	681b      	ldr	r3, [r3, #0]
 802357e:	2b10      	cmp	r3, #16
 8023580:	d003      	beq.n	802358a <HAL_ADC_ConfigChannel+0x1e6>
 8023582:	683b      	ldr	r3, [r7, #0]
 8023584:	681b      	ldr	r3, [r3, #0]
 8023586:	2b11      	cmp	r3, #17
 8023588:	d11b      	bne.n	80235c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 802358a:	68fb      	ldr	r3, [r7, #12]
 802358c:	685b      	ldr	r3, [r3, #4]
 802358e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8023592:	68fb      	ldr	r3, [r7, #12]
 8023594:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8023596:	683b      	ldr	r3, [r7, #0]
 8023598:	681b      	ldr	r3, [r3, #0]
 802359a:	2b10      	cmp	r3, #16
 802359c:	d111      	bne.n	80235c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 802359e:	4b10      	ldr	r3, [pc, #64]	; (80235e0 <HAL_ADC_ConfigChannel+0x23c>)
 80235a0:	681b      	ldr	r3, [r3, #0]
 80235a2:	4a10      	ldr	r2, [pc, #64]	; (80235e4 <HAL_ADC_ConfigChannel+0x240>)
 80235a4:	fba2 2303 	umull	r2, r3, r2, r3
 80235a8:	0c9a      	lsrs	r2, r3, #18
 80235aa:	4613      	mov	r3, r2
 80235ac:	009b      	lsls	r3, r3, #2
 80235ae:	4413      	add	r3, r2
 80235b0:	005b      	lsls	r3, r3, #1
 80235b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80235b4:	e002      	b.n	80235bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80235b6:	68bb      	ldr	r3, [r7, #8]
 80235b8:	3b01      	subs	r3, #1
 80235ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80235bc:	68bb      	ldr	r3, [r7, #8]
 80235be:	2b00      	cmp	r3, #0
 80235c0:	d1f9      	bne.n	80235b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80235c2:	687b      	ldr	r3, [r7, #4]
 80235c4:	2200      	movs	r2, #0
 80235c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80235ca:	2300      	movs	r3, #0
}
 80235cc:	4618      	mov	r0, r3
 80235ce:	3714      	adds	r7, #20
 80235d0:	46bd      	mov	sp, r7
 80235d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235d6:	4770      	bx	lr
 80235d8:	40012300 	.word	0x40012300
 80235dc:	40012000 	.word	0x40012000
 80235e0:	20000080 	.word	0x20000080
 80235e4:	431bde83 	.word	0x431bde83

080235e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80235e8:	b480      	push	{r7}
 80235ea:	b085      	sub	sp, #20
 80235ec:	af00      	add	r7, sp, #0
 80235ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80235f0:	4b79      	ldr	r3, [pc, #484]	; (80237d8 <ADC_Init+0x1f0>)
 80235f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80235f4:	68fb      	ldr	r3, [r7, #12]
 80235f6:	685b      	ldr	r3, [r3, #4]
 80235f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80235fc:	68fb      	ldr	r3, [r7, #12]
 80235fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8023600:	68fb      	ldr	r3, [r7, #12]
 8023602:	685a      	ldr	r2, [r3, #4]
 8023604:	687b      	ldr	r3, [r7, #4]
 8023606:	685b      	ldr	r3, [r3, #4]
 8023608:	431a      	orrs	r2, r3
 802360a:	68fb      	ldr	r3, [r7, #12]
 802360c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 802360e:	687b      	ldr	r3, [r7, #4]
 8023610:	681b      	ldr	r3, [r3, #0]
 8023612:	685a      	ldr	r2, [r3, #4]
 8023614:	687b      	ldr	r3, [r7, #4]
 8023616:	681b      	ldr	r3, [r3, #0]
 8023618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802361c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 802361e:	687b      	ldr	r3, [r7, #4]
 8023620:	681b      	ldr	r3, [r3, #0]
 8023622:	6859      	ldr	r1, [r3, #4]
 8023624:	687b      	ldr	r3, [r7, #4]
 8023626:	691b      	ldr	r3, [r3, #16]
 8023628:	021a      	lsls	r2, r3, #8
 802362a:	687b      	ldr	r3, [r7, #4]
 802362c:	681b      	ldr	r3, [r3, #0]
 802362e:	430a      	orrs	r2, r1
 8023630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8023632:	687b      	ldr	r3, [r7, #4]
 8023634:	681b      	ldr	r3, [r3, #0]
 8023636:	685a      	ldr	r2, [r3, #4]
 8023638:	687b      	ldr	r3, [r7, #4]
 802363a:	681b      	ldr	r3, [r3, #0]
 802363c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8023640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8023642:	687b      	ldr	r3, [r7, #4]
 8023644:	681b      	ldr	r3, [r3, #0]
 8023646:	6859      	ldr	r1, [r3, #4]
 8023648:	687b      	ldr	r3, [r7, #4]
 802364a:	689a      	ldr	r2, [r3, #8]
 802364c:	687b      	ldr	r3, [r7, #4]
 802364e:	681b      	ldr	r3, [r3, #0]
 8023650:	430a      	orrs	r2, r1
 8023652:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8023654:	687b      	ldr	r3, [r7, #4]
 8023656:	681b      	ldr	r3, [r3, #0]
 8023658:	689a      	ldr	r2, [r3, #8]
 802365a:	687b      	ldr	r3, [r7, #4]
 802365c:	681b      	ldr	r3, [r3, #0]
 802365e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8023662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8023664:	687b      	ldr	r3, [r7, #4]
 8023666:	681b      	ldr	r3, [r3, #0]
 8023668:	6899      	ldr	r1, [r3, #8]
 802366a:	687b      	ldr	r3, [r7, #4]
 802366c:	68da      	ldr	r2, [r3, #12]
 802366e:	687b      	ldr	r3, [r7, #4]
 8023670:	681b      	ldr	r3, [r3, #0]
 8023672:	430a      	orrs	r2, r1
 8023674:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8023676:	687b      	ldr	r3, [r7, #4]
 8023678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802367a:	4a58      	ldr	r2, [pc, #352]	; (80237dc <ADC_Init+0x1f4>)
 802367c:	4293      	cmp	r3, r2
 802367e:	d022      	beq.n	80236c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8023680:	687b      	ldr	r3, [r7, #4]
 8023682:	681b      	ldr	r3, [r3, #0]
 8023684:	689a      	ldr	r2, [r3, #8]
 8023686:	687b      	ldr	r3, [r7, #4]
 8023688:	681b      	ldr	r3, [r3, #0]
 802368a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802368e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8023690:	687b      	ldr	r3, [r7, #4]
 8023692:	681b      	ldr	r3, [r3, #0]
 8023694:	6899      	ldr	r1, [r3, #8]
 8023696:	687b      	ldr	r3, [r7, #4]
 8023698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802369a:	687b      	ldr	r3, [r7, #4]
 802369c:	681b      	ldr	r3, [r3, #0]
 802369e:	430a      	orrs	r2, r1
 80236a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80236a2:	687b      	ldr	r3, [r7, #4]
 80236a4:	681b      	ldr	r3, [r3, #0]
 80236a6:	689a      	ldr	r2, [r3, #8]
 80236a8:	687b      	ldr	r3, [r7, #4]
 80236aa:	681b      	ldr	r3, [r3, #0]
 80236ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80236b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80236b2:	687b      	ldr	r3, [r7, #4]
 80236b4:	681b      	ldr	r3, [r3, #0]
 80236b6:	6899      	ldr	r1, [r3, #8]
 80236b8:	687b      	ldr	r3, [r7, #4]
 80236ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80236bc:	687b      	ldr	r3, [r7, #4]
 80236be:	681b      	ldr	r3, [r3, #0]
 80236c0:	430a      	orrs	r2, r1
 80236c2:	609a      	str	r2, [r3, #8]
 80236c4:	e00f      	b.n	80236e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80236c6:	687b      	ldr	r3, [r7, #4]
 80236c8:	681b      	ldr	r3, [r3, #0]
 80236ca:	689a      	ldr	r2, [r3, #8]
 80236cc:	687b      	ldr	r3, [r7, #4]
 80236ce:	681b      	ldr	r3, [r3, #0]
 80236d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80236d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80236d6:	687b      	ldr	r3, [r7, #4]
 80236d8:	681b      	ldr	r3, [r3, #0]
 80236da:	689a      	ldr	r2, [r3, #8]
 80236dc:	687b      	ldr	r3, [r7, #4]
 80236de:	681b      	ldr	r3, [r3, #0]
 80236e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80236e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80236e6:	687b      	ldr	r3, [r7, #4]
 80236e8:	681b      	ldr	r3, [r3, #0]
 80236ea:	689a      	ldr	r2, [r3, #8]
 80236ec:	687b      	ldr	r3, [r7, #4]
 80236ee:	681b      	ldr	r3, [r3, #0]
 80236f0:	f022 0202 	bic.w	r2, r2, #2
 80236f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80236f6:	687b      	ldr	r3, [r7, #4]
 80236f8:	681b      	ldr	r3, [r3, #0]
 80236fa:	6899      	ldr	r1, [r3, #8]
 80236fc:	687b      	ldr	r3, [r7, #4]
 80236fe:	7e1b      	ldrb	r3, [r3, #24]
 8023700:	005a      	lsls	r2, r3, #1
 8023702:	687b      	ldr	r3, [r7, #4]
 8023704:	681b      	ldr	r3, [r3, #0]
 8023706:	430a      	orrs	r2, r1
 8023708:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 802370a:	687b      	ldr	r3, [r7, #4]
 802370c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023710:	2b00      	cmp	r3, #0
 8023712:	d01b      	beq.n	802374c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8023714:	687b      	ldr	r3, [r7, #4]
 8023716:	681b      	ldr	r3, [r3, #0]
 8023718:	685a      	ldr	r2, [r3, #4]
 802371a:	687b      	ldr	r3, [r7, #4]
 802371c:	681b      	ldr	r3, [r3, #0]
 802371e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8023722:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8023724:	687b      	ldr	r3, [r7, #4]
 8023726:	681b      	ldr	r3, [r3, #0]
 8023728:	685a      	ldr	r2, [r3, #4]
 802372a:	687b      	ldr	r3, [r7, #4]
 802372c:	681b      	ldr	r3, [r3, #0]
 802372e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8023732:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8023734:	687b      	ldr	r3, [r7, #4]
 8023736:	681b      	ldr	r3, [r3, #0]
 8023738:	6859      	ldr	r1, [r3, #4]
 802373a:	687b      	ldr	r3, [r7, #4]
 802373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802373e:	3b01      	subs	r3, #1
 8023740:	035a      	lsls	r2, r3, #13
 8023742:	687b      	ldr	r3, [r7, #4]
 8023744:	681b      	ldr	r3, [r3, #0]
 8023746:	430a      	orrs	r2, r1
 8023748:	605a      	str	r2, [r3, #4]
 802374a:	e007      	b.n	802375c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 802374c:	687b      	ldr	r3, [r7, #4]
 802374e:	681b      	ldr	r3, [r3, #0]
 8023750:	685a      	ldr	r2, [r3, #4]
 8023752:	687b      	ldr	r3, [r7, #4]
 8023754:	681b      	ldr	r3, [r3, #0]
 8023756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802375a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 802375c:	687b      	ldr	r3, [r7, #4]
 802375e:	681b      	ldr	r3, [r3, #0]
 8023760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023762:	687b      	ldr	r3, [r7, #4]
 8023764:	681b      	ldr	r3, [r3, #0]
 8023766:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 802376a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 802376c:	687b      	ldr	r3, [r7, #4]
 802376e:	681b      	ldr	r3, [r3, #0]
 8023770:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8023772:	687b      	ldr	r3, [r7, #4]
 8023774:	69db      	ldr	r3, [r3, #28]
 8023776:	3b01      	subs	r3, #1
 8023778:	051a      	lsls	r2, r3, #20
 802377a:	687b      	ldr	r3, [r7, #4]
 802377c:	681b      	ldr	r3, [r3, #0]
 802377e:	430a      	orrs	r2, r1
 8023780:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8023782:	687b      	ldr	r3, [r7, #4]
 8023784:	681b      	ldr	r3, [r3, #0]
 8023786:	689a      	ldr	r2, [r3, #8]
 8023788:	687b      	ldr	r3, [r7, #4]
 802378a:	681b      	ldr	r3, [r3, #0]
 802378c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8023790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8023792:	687b      	ldr	r3, [r7, #4]
 8023794:	681b      	ldr	r3, [r3, #0]
 8023796:	6899      	ldr	r1, [r3, #8]
 8023798:	687b      	ldr	r3, [r7, #4]
 802379a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802379e:	025a      	lsls	r2, r3, #9
 80237a0:	687b      	ldr	r3, [r7, #4]
 80237a2:	681b      	ldr	r3, [r3, #0]
 80237a4:	430a      	orrs	r2, r1
 80237a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80237a8:	687b      	ldr	r3, [r7, #4]
 80237aa:	681b      	ldr	r3, [r3, #0]
 80237ac:	689a      	ldr	r2, [r3, #8]
 80237ae:	687b      	ldr	r3, [r7, #4]
 80237b0:	681b      	ldr	r3, [r3, #0]
 80237b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80237b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80237b8:	687b      	ldr	r3, [r7, #4]
 80237ba:	681b      	ldr	r3, [r3, #0]
 80237bc:	6899      	ldr	r1, [r3, #8]
 80237be:	687b      	ldr	r3, [r7, #4]
 80237c0:	695b      	ldr	r3, [r3, #20]
 80237c2:	029a      	lsls	r2, r3, #10
 80237c4:	687b      	ldr	r3, [r7, #4]
 80237c6:	681b      	ldr	r3, [r3, #0]
 80237c8:	430a      	orrs	r2, r1
 80237ca:	609a      	str	r2, [r3, #8]
}
 80237cc:	bf00      	nop
 80237ce:	3714      	adds	r7, #20
 80237d0:	46bd      	mov	sp, r7
 80237d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237d6:	4770      	bx	lr
 80237d8:	40012300 	.word	0x40012300
 80237dc:	0f000001 	.word	0x0f000001

080237e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80237e0:	b580      	push	{r7, lr}
 80237e2:	b084      	sub	sp, #16
 80237e4:	af00      	add	r7, sp, #0
 80237e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80237e8:	687b      	ldr	r3, [r7, #4]
 80237ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80237ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80237ee:	68fb      	ldr	r3, [r7, #12]
 80237f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80237f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80237f6:	2b00      	cmp	r3, #0
 80237f8:	d13c      	bne.n	8023874 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80237fa:	68fb      	ldr	r3, [r7, #12]
 80237fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80237fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8023802:	68fb      	ldr	r3, [r7, #12]
 8023804:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8023806:	68fb      	ldr	r3, [r7, #12]
 8023808:	681b      	ldr	r3, [r3, #0]
 802380a:	689b      	ldr	r3, [r3, #8]
 802380c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8023810:	2b00      	cmp	r3, #0
 8023812:	d12b      	bne.n	802386c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8023814:	68fb      	ldr	r3, [r7, #12]
 8023816:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8023818:	2b00      	cmp	r3, #0
 802381a:	d127      	bne.n	802386c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 802381c:	68fb      	ldr	r3, [r7, #12]
 802381e:	681b      	ldr	r3, [r3, #0]
 8023820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023822:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8023826:	2b00      	cmp	r3, #0
 8023828:	d006      	beq.n	8023838 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 802382a:	68fb      	ldr	r3, [r7, #12]
 802382c:	681b      	ldr	r3, [r3, #0]
 802382e:	689b      	ldr	r3, [r3, #8]
 8023830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8023834:	2b00      	cmp	r3, #0
 8023836:	d119      	bne.n	802386c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8023838:	68fb      	ldr	r3, [r7, #12]
 802383a:	681b      	ldr	r3, [r3, #0]
 802383c:	685a      	ldr	r2, [r3, #4]
 802383e:	68fb      	ldr	r3, [r7, #12]
 8023840:	681b      	ldr	r3, [r3, #0]
 8023842:	f022 0220 	bic.w	r2, r2, #32
 8023846:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8023848:	68fb      	ldr	r3, [r7, #12]
 802384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802384c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8023850:	68fb      	ldr	r3, [r7, #12]
 8023852:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8023854:	68fb      	ldr	r3, [r7, #12]
 8023856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802385c:	2b00      	cmp	r3, #0
 802385e:	d105      	bne.n	802386c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8023860:	68fb      	ldr	r3, [r7, #12]
 8023862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023864:	f043 0201 	orr.w	r2, r3, #1
 8023868:	68fb      	ldr	r3, [r7, #12]
 802386a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 802386c:	68f8      	ldr	r0, [r7, #12]
 802386e:	f7f1 fe17 	bl	80154a0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8023872:	e00e      	b.n	8023892 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8023874:	68fb      	ldr	r3, [r7, #12]
 8023876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023878:	f003 0310 	and.w	r3, r3, #16
 802387c:	2b00      	cmp	r3, #0
 802387e:	d003      	beq.n	8023888 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8023880:	68f8      	ldr	r0, [r7, #12]
 8023882:	f7ff fd85 	bl	8023390 <HAL_ADC_ErrorCallback>
}
 8023886:	e004      	b.n	8023892 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8023888:	68fb      	ldr	r3, [r7, #12]
 802388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802388e:	6878      	ldr	r0, [r7, #4]
 8023890:	4798      	blx	r3
}
 8023892:	bf00      	nop
 8023894:	3710      	adds	r7, #16
 8023896:	46bd      	mov	sp, r7
 8023898:	bd80      	pop	{r7, pc}

0802389a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 802389a:	b580      	push	{r7, lr}
 802389c:	b084      	sub	sp, #16
 802389e:	af00      	add	r7, sp, #0
 80238a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80238a2:	687b      	ldr	r3, [r7, #4]
 80238a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80238a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80238a8:	68f8      	ldr	r0, [r7, #12]
 80238aa:	f7f1 fdcf 	bl	801544c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80238ae:	bf00      	nop
 80238b0:	3710      	adds	r7, #16
 80238b2:	46bd      	mov	sp, r7
 80238b4:	bd80      	pop	{r7, pc}

080238b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80238b6:	b580      	push	{r7, lr}
 80238b8:	b084      	sub	sp, #16
 80238ba:	af00      	add	r7, sp, #0
 80238bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80238be:	687b      	ldr	r3, [r7, #4]
 80238c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80238c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80238c4:	68fb      	ldr	r3, [r7, #12]
 80238c6:	2240      	movs	r2, #64	; 0x40
 80238c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80238ca:	68fb      	ldr	r3, [r7, #12]
 80238cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80238ce:	f043 0204 	orr.w	r2, r3, #4
 80238d2:	68fb      	ldr	r3, [r7, #12]
 80238d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80238d6:	68f8      	ldr	r0, [r7, #12]
 80238d8:	f7ff fd5a 	bl	8023390 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80238dc:	bf00      	nop
 80238de:	3710      	adds	r7, #16
 80238e0:	46bd      	mov	sp, r7
 80238e2:	bd80      	pop	{r7, pc}

080238e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80238e4:	b480      	push	{r7}
 80238e6:	b083      	sub	sp, #12
 80238e8:	af00      	add	r7, sp, #0
 80238ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80238ec:	bf00      	nop
 80238ee:	370c      	adds	r7, #12
 80238f0:	46bd      	mov	sp, r7
 80238f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238f6:	4770      	bx	lr

080238f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80238f8:	b580      	push	{r7, lr}
 80238fa:	b084      	sub	sp, #16
 80238fc:	af00      	add	r7, sp, #0
 80238fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8023900:	687b      	ldr	r3, [r7, #4]
 8023902:	2b00      	cmp	r3, #0
 8023904:	d101      	bne.n	802390a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8023906:	2301      	movs	r3, #1
 8023908:	e0ed      	b.n	8023ae6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 802390a:	687b      	ldr	r3, [r7, #4]
 802390c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023910:	b2db      	uxtb	r3, r3
 8023912:	2b00      	cmp	r3, #0
 8023914:	d102      	bne.n	802391c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8023916:	6878      	ldr	r0, [r7, #4]
 8023918:	f7f1 fe58 	bl	80155cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 802391c:	687b      	ldr	r3, [r7, #4]
 802391e:	681b      	ldr	r3, [r3, #0]
 8023920:	681a      	ldr	r2, [r3, #0]
 8023922:	687b      	ldr	r3, [r7, #4]
 8023924:	681b      	ldr	r3, [r3, #0]
 8023926:	f042 0201 	orr.w	r2, r2, #1
 802392a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 802392c:	f7ff fa62 	bl	8022df4 <HAL_GetTick>
 8023930:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8023932:	e012      	b.n	802395a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8023934:	f7ff fa5e 	bl	8022df4 <HAL_GetTick>
 8023938:	4602      	mov	r2, r0
 802393a:	68fb      	ldr	r3, [r7, #12]
 802393c:	1ad3      	subs	r3, r2, r3
 802393e:	2b0a      	cmp	r3, #10
 8023940:	d90b      	bls.n	802395a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8023942:	687b      	ldr	r3, [r7, #4]
 8023944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023946:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 802394a:	687b      	ldr	r3, [r7, #4]
 802394c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 802394e:	687b      	ldr	r3, [r7, #4]
 8023950:	2205      	movs	r2, #5
 8023952:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8023956:	2301      	movs	r3, #1
 8023958:	e0c5      	b.n	8023ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	681b      	ldr	r3, [r3, #0]
 802395e:	685b      	ldr	r3, [r3, #4]
 8023960:	f003 0301 	and.w	r3, r3, #1
 8023964:	2b00      	cmp	r3, #0
 8023966:	d0e5      	beq.n	8023934 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8023968:	687b      	ldr	r3, [r7, #4]
 802396a:	681b      	ldr	r3, [r3, #0]
 802396c:	681a      	ldr	r2, [r3, #0]
 802396e:	687b      	ldr	r3, [r7, #4]
 8023970:	681b      	ldr	r3, [r3, #0]
 8023972:	f022 0202 	bic.w	r2, r2, #2
 8023976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8023978:	f7ff fa3c 	bl	8022df4 <HAL_GetTick>
 802397c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 802397e:	e012      	b.n	80239a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8023980:	f7ff fa38 	bl	8022df4 <HAL_GetTick>
 8023984:	4602      	mov	r2, r0
 8023986:	68fb      	ldr	r3, [r7, #12]
 8023988:	1ad3      	subs	r3, r2, r3
 802398a:	2b0a      	cmp	r3, #10
 802398c:	d90b      	bls.n	80239a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 802398e:	687b      	ldr	r3, [r7, #4]
 8023990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023992:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8023996:	687b      	ldr	r3, [r7, #4]
 8023998:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 802399a:	687b      	ldr	r3, [r7, #4]
 802399c:	2205      	movs	r2, #5
 802399e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80239a2:	2301      	movs	r3, #1
 80239a4:	e09f      	b.n	8023ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80239a6:	687b      	ldr	r3, [r7, #4]
 80239a8:	681b      	ldr	r3, [r3, #0]
 80239aa:	685b      	ldr	r3, [r3, #4]
 80239ac:	f003 0302 	and.w	r3, r3, #2
 80239b0:	2b00      	cmp	r3, #0
 80239b2:	d1e5      	bne.n	8023980 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80239b4:	687b      	ldr	r3, [r7, #4]
 80239b6:	7e1b      	ldrb	r3, [r3, #24]
 80239b8:	2b01      	cmp	r3, #1
 80239ba:	d108      	bne.n	80239ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80239bc:	687b      	ldr	r3, [r7, #4]
 80239be:	681b      	ldr	r3, [r3, #0]
 80239c0:	681a      	ldr	r2, [r3, #0]
 80239c2:	687b      	ldr	r3, [r7, #4]
 80239c4:	681b      	ldr	r3, [r3, #0]
 80239c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80239ca:	601a      	str	r2, [r3, #0]
 80239cc:	e007      	b.n	80239de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80239ce:	687b      	ldr	r3, [r7, #4]
 80239d0:	681b      	ldr	r3, [r3, #0]
 80239d2:	681a      	ldr	r2, [r3, #0]
 80239d4:	687b      	ldr	r3, [r7, #4]
 80239d6:	681b      	ldr	r3, [r3, #0]
 80239d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80239dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80239de:	687b      	ldr	r3, [r7, #4]
 80239e0:	7e5b      	ldrb	r3, [r3, #25]
 80239e2:	2b01      	cmp	r3, #1
 80239e4:	d108      	bne.n	80239f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80239e6:	687b      	ldr	r3, [r7, #4]
 80239e8:	681b      	ldr	r3, [r3, #0]
 80239ea:	681a      	ldr	r2, [r3, #0]
 80239ec:	687b      	ldr	r3, [r7, #4]
 80239ee:	681b      	ldr	r3, [r3, #0]
 80239f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80239f4:	601a      	str	r2, [r3, #0]
 80239f6:	e007      	b.n	8023a08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80239f8:	687b      	ldr	r3, [r7, #4]
 80239fa:	681b      	ldr	r3, [r3, #0]
 80239fc:	681a      	ldr	r2, [r3, #0]
 80239fe:	687b      	ldr	r3, [r7, #4]
 8023a00:	681b      	ldr	r3, [r3, #0]
 8023a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8023a08:	687b      	ldr	r3, [r7, #4]
 8023a0a:	7e9b      	ldrb	r3, [r3, #26]
 8023a0c:	2b01      	cmp	r3, #1
 8023a0e:	d108      	bne.n	8023a22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8023a10:	687b      	ldr	r3, [r7, #4]
 8023a12:	681b      	ldr	r3, [r3, #0]
 8023a14:	681a      	ldr	r2, [r3, #0]
 8023a16:	687b      	ldr	r3, [r7, #4]
 8023a18:	681b      	ldr	r3, [r3, #0]
 8023a1a:	f042 0220 	orr.w	r2, r2, #32
 8023a1e:	601a      	str	r2, [r3, #0]
 8023a20:	e007      	b.n	8023a32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8023a22:	687b      	ldr	r3, [r7, #4]
 8023a24:	681b      	ldr	r3, [r3, #0]
 8023a26:	681a      	ldr	r2, [r3, #0]
 8023a28:	687b      	ldr	r3, [r7, #4]
 8023a2a:	681b      	ldr	r3, [r3, #0]
 8023a2c:	f022 0220 	bic.w	r2, r2, #32
 8023a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8023a32:	687b      	ldr	r3, [r7, #4]
 8023a34:	7edb      	ldrb	r3, [r3, #27]
 8023a36:	2b01      	cmp	r3, #1
 8023a38:	d108      	bne.n	8023a4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8023a3a:	687b      	ldr	r3, [r7, #4]
 8023a3c:	681b      	ldr	r3, [r3, #0]
 8023a3e:	681a      	ldr	r2, [r3, #0]
 8023a40:	687b      	ldr	r3, [r7, #4]
 8023a42:	681b      	ldr	r3, [r3, #0]
 8023a44:	f022 0210 	bic.w	r2, r2, #16
 8023a48:	601a      	str	r2, [r3, #0]
 8023a4a:	e007      	b.n	8023a5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8023a4c:	687b      	ldr	r3, [r7, #4]
 8023a4e:	681b      	ldr	r3, [r3, #0]
 8023a50:	681a      	ldr	r2, [r3, #0]
 8023a52:	687b      	ldr	r3, [r7, #4]
 8023a54:	681b      	ldr	r3, [r3, #0]
 8023a56:	f042 0210 	orr.w	r2, r2, #16
 8023a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8023a5c:	687b      	ldr	r3, [r7, #4]
 8023a5e:	7f1b      	ldrb	r3, [r3, #28]
 8023a60:	2b01      	cmp	r3, #1
 8023a62:	d108      	bne.n	8023a76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8023a64:	687b      	ldr	r3, [r7, #4]
 8023a66:	681b      	ldr	r3, [r3, #0]
 8023a68:	681a      	ldr	r2, [r3, #0]
 8023a6a:	687b      	ldr	r3, [r7, #4]
 8023a6c:	681b      	ldr	r3, [r3, #0]
 8023a6e:	f042 0208 	orr.w	r2, r2, #8
 8023a72:	601a      	str	r2, [r3, #0]
 8023a74:	e007      	b.n	8023a86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8023a76:	687b      	ldr	r3, [r7, #4]
 8023a78:	681b      	ldr	r3, [r3, #0]
 8023a7a:	681a      	ldr	r2, [r3, #0]
 8023a7c:	687b      	ldr	r3, [r7, #4]
 8023a7e:	681b      	ldr	r3, [r3, #0]
 8023a80:	f022 0208 	bic.w	r2, r2, #8
 8023a84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8023a86:	687b      	ldr	r3, [r7, #4]
 8023a88:	7f5b      	ldrb	r3, [r3, #29]
 8023a8a:	2b01      	cmp	r3, #1
 8023a8c:	d108      	bne.n	8023aa0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8023a8e:	687b      	ldr	r3, [r7, #4]
 8023a90:	681b      	ldr	r3, [r3, #0]
 8023a92:	681a      	ldr	r2, [r3, #0]
 8023a94:	687b      	ldr	r3, [r7, #4]
 8023a96:	681b      	ldr	r3, [r3, #0]
 8023a98:	f042 0204 	orr.w	r2, r2, #4
 8023a9c:	601a      	str	r2, [r3, #0]
 8023a9e:	e007      	b.n	8023ab0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8023aa0:	687b      	ldr	r3, [r7, #4]
 8023aa2:	681b      	ldr	r3, [r3, #0]
 8023aa4:	681a      	ldr	r2, [r3, #0]
 8023aa6:	687b      	ldr	r3, [r7, #4]
 8023aa8:	681b      	ldr	r3, [r3, #0]
 8023aaa:	f022 0204 	bic.w	r2, r2, #4
 8023aae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8023ab0:	687b      	ldr	r3, [r7, #4]
 8023ab2:	689a      	ldr	r2, [r3, #8]
 8023ab4:	687b      	ldr	r3, [r7, #4]
 8023ab6:	68db      	ldr	r3, [r3, #12]
 8023ab8:	431a      	orrs	r2, r3
 8023aba:	687b      	ldr	r3, [r7, #4]
 8023abc:	691b      	ldr	r3, [r3, #16]
 8023abe:	431a      	orrs	r2, r3
 8023ac0:	687b      	ldr	r3, [r7, #4]
 8023ac2:	695b      	ldr	r3, [r3, #20]
 8023ac4:	ea42 0103 	orr.w	r1, r2, r3
 8023ac8:	687b      	ldr	r3, [r7, #4]
 8023aca:	685b      	ldr	r3, [r3, #4]
 8023acc:	1e5a      	subs	r2, r3, #1
 8023ace:	687b      	ldr	r3, [r7, #4]
 8023ad0:	681b      	ldr	r3, [r3, #0]
 8023ad2:	430a      	orrs	r2, r1
 8023ad4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8023ad6:	687b      	ldr	r3, [r7, #4]
 8023ad8:	2200      	movs	r2, #0
 8023ada:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8023adc:	687b      	ldr	r3, [r7, #4]
 8023ade:	2201      	movs	r2, #1
 8023ae0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8023ae4:	2300      	movs	r3, #0
}
 8023ae6:	4618      	mov	r0, r3
 8023ae8:	3710      	adds	r7, #16
 8023aea:	46bd      	mov	sp, r7
 8023aec:	bd80      	pop	{r7, pc}
	...

08023af0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8023af0:	b480      	push	{r7}
 8023af2:	b087      	sub	sp, #28
 8023af4:	af00      	add	r7, sp, #0
 8023af6:	6078      	str	r0, [r7, #4]
 8023af8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8023afa:	687b      	ldr	r3, [r7, #4]
 8023afc:	681b      	ldr	r3, [r3, #0]
 8023afe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8023b00:	687b      	ldr	r3, [r7, #4]
 8023b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023b06:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8023b08:	7cfb      	ldrb	r3, [r7, #19]
 8023b0a:	2b01      	cmp	r3, #1
 8023b0c:	d003      	beq.n	8023b16 <HAL_CAN_ConfigFilter+0x26>
 8023b0e:	7cfb      	ldrb	r3, [r7, #19]
 8023b10:	2b02      	cmp	r3, #2
 8023b12:	f040 80be 	bne.w	8023c92 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8023b16:	4b65      	ldr	r3, [pc, #404]	; (8023cac <HAL_CAN_ConfigFilter+0x1bc>)
 8023b18:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8023b1a:	697b      	ldr	r3, [r7, #20]
 8023b1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8023b20:	f043 0201 	orr.w	r2, r3, #1
 8023b24:	697b      	ldr	r3, [r7, #20]
 8023b26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8023b2a:	697b      	ldr	r3, [r7, #20]
 8023b2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8023b30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8023b34:	697b      	ldr	r3, [r7, #20]
 8023b36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8023b3a:	697b      	ldr	r3, [r7, #20]
 8023b3c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8023b40:	683b      	ldr	r3, [r7, #0]
 8023b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b44:	021b      	lsls	r3, r3, #8
 8023b46:	431a      	orrs	r2, r3
 8023b48:	697b      	ldr	r3, [r7, #20]
 8023b4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8023b4e:	683b      	ldr	r3, [r7, #0]
 8023b50:	695b      	ldr	r3, [r3, #20]
 8023b52:	f003 031f 	and.w	r3, r3, #31
 8023b56:	2201      	movs	r2, #1
 8023b58:	fa02 f303 	lsl.w	r3, r2, r3
 8023b5c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8023b5e:	697b      	ldr	r3, [r7, #20]
 8023b60:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8023b64:	68fb      	ldr	r3, [r7, #12]
 8023b66:	43db      	mvns	r3, r3
 8023b68:	401a      	ands	r2, r3
 8023b6a:	697b      	ldr	r3, [r7, #20]
 8023b6c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8023b70:	683b      	ldr	r3, [r7, #0]
 8023b72:	69db      	ldr	r3, [r3, #28]
 8023b74:	2b00      	cmp	r3, #0
 8023b76:	d123      	bne.n	8023bc0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8023b78:	697b      	ldr	r3, [r7, #20]
 8023b7a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8023b7e:	68fb      	ldr	r3, [r7, #12]
 8023b80:	43db      	mvns	r3, r3
 8023b82:	401a      	ands	r2, r3
 8023b84:	697b      	ldr	r3, [r7, #20]
 8023b86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8023b8a:	683b      	ldr	r3, [r7, #0]
 8023b8c:	68db      	ldr	r3, [r3, #12]
 8023b8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8023b90:	683b      	ldr	r3, [r7, #0]
 8023b92:	685b      	ldr	r3, [r3, #4]
 8023b94:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8023b96:	683a      	ldr	r2, [r7, #0]
 8023b98:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8023b9a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8023b9c:	697b      	ldr	r3, [r7, #20]
 8023b9e:	3248      	adds	r2, #72	; 0x48
 8023ba0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8023ba4:	683b      	ldr	r3, [r7, #0]
 8023ba6:	689b      	ldr	r3, [r3, #8]
 8023ba8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8023baa:	683b      	ldr	r3, [r7, #0]
 8023bac:	681b      	ldr	r3, [r3, #0]
 8023bae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8023bb0:	683b      	ldr	r3, [r7, #0]
 8023bb2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8023bb4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8023bb6:	6979      	ldr	r1, [r7, #20]
 8023bb8:	3348      	adds	r3, #72	; 0x48
 8023bba:	00db      	lsls	r3, r3, #3
 8023bbc:	440b      	add	r3, r1
 8023bbe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8023bc0:	683b      	ldr	r3, [r7, #0]
 8023bc2:	69db      	ldr	r3, [r3, #28]
 8023bc4:	2b01      	cmp	r3, #1
 8023bc6:	d122      	bne.n	8023c0e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8023bc8:	697b      	ldr	r3, [r7, #20]
 8023bca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8023bce:	68fb      	ldr	r3, [r7, #12]
 8023bd0:	431a      	orrs	r2, r3
 8023bd2:	697b      	ldr	r3, [r7, #20]
 8023bd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8023bd8:	683b      	ldr	r3, [r7, #0]
 8023bda:	681b      	ldr	r3, [r3, #0]
 8023bdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8023bde:	683b      	ldr	r3, [r7, #0]
 8023be0:	685b      	ldr	r3, [r3, #4]
 8023be2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8023be4:	683a      	ldr	r2, [r7, #0]
 8023be6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8023be8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8023bea:	697b      	ldr	r3, [r7, #20]
 8023bec:	3248      	adds	r2, #72	; 0x48
 8023bee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8023bf2:	683b      	ldr	r3, [r7, #0]
 8023bf4:	689b      	ldr	r3, [r3, #8]
 8023bf6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8023bf8:	683b      	ldr	r3, [r7, #0]
 8023bfa:	68db      	ldr	r3, [r3, #12]
 8023bfc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8023bfe:	683b      	ldr	r3, [r7, #0]
 8023c00:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8023c02:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8023c04:	6979      	ldr	r1, [r7, #20]
 8023c06:	3348      	adds	r3, #72	; 0x48
 8023c08:	00db      	lsls	r3, r3, #3
 8023c0a:	440b      	add	r3, r1
 8023c0c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8023c0e:	683b      	ldr	r3, [r7, #0]
 8023c10:	699b      	ldr	r3, [r3, #24]
 8023c12:	2b00      	cmp	r3, #0
 8023c14:	d109      	bne.n	8023c2a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8023c16:	697b      	ldr	r3, [r7, #20]
 8023c18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8023c1c:	68fb      	ldr	r3, [r7, #12]
 8023c1e:	43db      	mvns	r3, r3
 8023c20:	401a      	ands	r2, r3
 8023c22:	697b      	ldr	r3, [r7, #20]
 8023c24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8023c28:	e007      	b.n	8023c3a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8023c2a:	697b      	ldr	r3, [r7, #20]
 8023c2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8023c30:	68fb      	ldr	r3, [r7, #12]
 8023c32:	431a      	orrs	r2, r3
 8023c34:	697b      	ldr	r3, [r7, #20]
 8023c36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8023c3a:	683b      	ldr	r3, [r7, #0]
 8023c3c:	691b      	ldr	r3, [r3, #16]
 8023c3e:	2b00      	cmp	r3, #0
 8023c40:	d109      	bne.n	8023c56 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8023c42:	697b      	ldr	r3, [r7, #20]
 8023c44:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8023c48:	68fb      	ldr	r3, [r7, #12]
 8023c4a:	43db      	mvns	r3, r3
 8023c4c:	401a      	ands	r2, r3
 8023c4e:	697b      	ldr	r3, [r7, #20]
 8023c50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8023c54:	e007      	b.n	8023c66 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8023c56:	697b      	ldr	r3, [r7, #20]
 8023c58:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8023c5c:	68fb      	ldr	r3, [r7, #12]
 8023c5e:	431a      	orrs	r2, r3
 8023c60:	697b      	ldr	r3, [r7, #20]
 8023c62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8023c66:	683b      	ldr	r3, [r7, #0]
 8023c68:	6a1b      	ldr	r3, [r3, #32]
 8023c6a:	2b01      	cmp	r3, #1
 8023c6c:	d107      	bne.n	8023c7e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8023c6e:	697b      	ldr	r3, [r7, #20]
 8023c70:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8023c74:	68fb      	ldr	r3, [r7, #12]
 8023c76:	431a      	orrs	r2, r3
 8023c78:	697b      	ldr	r3, [r7, #20]
 8023c7a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8023c7e:	697b      	ldr	r3, [r7, #20]
 8023c80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8023c84:	f023 0201 	bic.w	r2, r3, #1
 8023c88:	697b      	ldr	r3, [r7, #20]
 8023c8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8023c8e:	2300      	movs	r3, #0
 8023c90:	e006      	b.n	8023ca0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8023c92:	687b      	ldr	r3, [r7, #4]
 8023c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023c96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8023c9a:	687b      	ldr	r3, [r7, #4]
 8023c9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8023c9e:	2301      	movs	r3, #1
  }
}
 8023ca0:	4618      	mov	r0, r3
 8023ca2:	371c      	adds	r7, #28
 8023ca4:	46bd      	mov	sp, r7
 8023ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023caa:	4770      	bx	lr
 8023cac:	40006400 	.word	0x40006400

08023cb0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8023cb0:	b580      	push	{r7, lr}
 8023cb2:	b084      	sub	sp, #16
 8023cb4:	af00      	add	r7, sp, #0
 8023cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8023cb8:	687b      	ldr	r3, [r7, #4]
 8023cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023cbe:	b2db      	uxtb	r3, r3
 8023cc0:	2b01      	cmp	r3, #1
 8023cc2:	d12e      	bne.n	8023d22 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8023cc4:	687b      	ldr	r3, [r7, #4]
 8023cc6:	2202      	movs	r2, #2
 8023cc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8023ccc:	687b      	ldr	r3, [r7, #4]
 8023cce:	681b      	ldr	r3, [r3, #0]
 8023cd0:	681a      	ldr	r2, [r3, #0]
 8023cd2:	687b      	ldr	r3, [r7, #4]
 8023cd4:	681b      	ldr	r3, [r3, #0]
 8023cd6:	f022 0201 	bic.w	r2, r2, #1
 8023cda:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8023cdc:	f7ff f88a 	bl	8022df4 <HAL_GetTick>
 8023ce0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8023ce2:	e012      	b.n	8023d0a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8023ce4:	f7ff f886 	bl	8022df4 <HAL_GetTick>
 8023ce8:	4602      	mov	r2, r0
 8023cea:	68fb      	ldr	r3, [r7, #12]
 8023cec:	1ad3      	subs	r3, r2, r3
 8023cee:	2b0a      	cmp	r3, #10
 8023cf0:	d90b      	bls.n	8023d0a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8023cf2:	687b      	ldr	r3, [r7, #4]
 8023cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023cf6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8023cfa:	687b      	ldr	r3, [r7, #4]
 8023cfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8023cfe:	687b      	ldr	r3, [r7, #4]
 8023d00:	2205      	movs	r2, #5
 8023d02:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8023d06:	2301      	movs	r3, #1
 8023d08:	e012      	b.n	8023d30 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8023d0a:	687b      	ldr	r3, [r7, #4]
 8023d0c:	681b      	ldr	r3, [r3, #0]
 8023d0e:	685b      	ldr	r3, [r3, #4]
 8023d10:	f003 0301 	and.w	r3, r3, #1
 8023d14:	2b00      	cmp	r3, #0
 8023d16:	d1e5      	bne.n	8023ce4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8023d18:	687b      	ldr	r3, [r7, #4]
 8023d1a:	2200      	movs	r2, #0
 8023d1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8023d1e:	2300      	movs	r3, #0
 8023d20:	e006      	b.n	8023d30 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8023d22:	687b      	ldr	r3, [r7, #4]
 8023d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023d26:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8023d2a:	687b      	ldr	r3, [r7, #4]
 8023d2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8023d2e:	2301      	movs	r3, #1
  }
}
 8023d30:	4618      	mov	r0, r3
 8023d32:	3710      	adds	r7, #16
 8023d34:	46bd      	mov	sp, r7
 8023d36:	bd80      	pop	{r7, pc}

08023d38 <HAL_CAN_WakeUp>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
{
 8023d38:	b480      	push	{r7}
 8023d3a:	b087      	sub	sp, #28
 8023d3c:	af00      	add	r7, sp, #0
 8023d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8023d40:	2300      	movs	r3, #0
 8023d42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 1000000U;
 8023d44:	4b1c      	ldr	r3, [pc, #112]	; (8023db8 <HAL_CAN_WakeUp+0x80>)
 8023d46:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8023d48:	687b      	ldr	r3, [r7, #4]
 8023d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023d4e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8023d50:	7cfb      	ldrb	r3, [r7, #19]
 8023d52:	2b01      	cmp	r3, #1
 8023d54:	d002      	beq.n	8023d5c <HAL_CAN_WakeUp+0x24>
 8023d56:	7cfb      	ldrb	r3, [r7, #19]
 8023d58:	2b02      	cmp	r3, #2
 8023d5a:	d11f      	bne.n	8023d9c <HAL_CAN_WakeUp+0x64>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Wake up request */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8023d5c:	687b      	ldr	r3, [r7, #4]
 8023d5e:	681b      	ldr	r3, [r3, #0]
 8023d60:	681a      	ldr	r2, [r3, #0]
 8023d62:	687b      	ldr	r3, [r7, #4]
 8023d64:	681b      	ldr	r3, [r3, #0]
 8023d66:	f022 0202 	bic.w	r2, r2, #2
 8023d6a:	601a      	str	r2, [r3, #0]

    /* Wait sleep mode is exited */
    do
    {
      /* Increment counter */
      count++;
 8023d6c:	68fb      	ldr	r3, [r7, #12]
 8023d6e:	3301      	adds	r3, #1
 8023d70:	60fb      	str	r3, [r7, #12]

      /* Check if timeout is reached */
      if (count > timeout)
 8023d72:	68fb      	ldr	r3, [r7, #12]
 8023d74:	697a      	ldr	r2, [r7, #20]
 8023d76:	429a      	cmp	r2, r3
 8023d78:	d207      	bcs.n	8023d8a <HAL_CAN_WakeUp+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8023d7a:	687b      	ldr	r3, [r7, #4]
 8023d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023d7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8023d82:	687b      	ldr	r3, [r7, #4]
 8023d84:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8023d86:	2301      	movs	r3, #1
 8023d88:	e00f      	b.n	8023daa <HAL_CAN_WakeUp+0x72>
      }
    }
    while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 8023d8a:	687b      	ldr	r3, [r7, #4]
 8023d8c:	681b      	ldr	r3, [r3, #0]
 8023d8e:	685b      	ldr	r3, [r3, #4]
 8023d90:	f003 0302 	and.w	r3, r3, #2
 8023d94:	2b00      	cmp	r3, #0
 8023d96:	d1e9      	bne.n	8023d6c <HAL_CAN_WakeUp+0x34>

    /* Return function status */
    return HAL_OK;
 8023d98:	2300      	movs	r3, #0
 8023d9a:	e006      	b.n	8023daa <HAL_CAN_WakeUp+0x72>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8023d9c:	687b      	ldr	r3, [r7, #4]
 8023d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023da0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8023da4:	687b      	ldr	r3, [r7, #4]
 8023da6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8023da8:	2301      	movs	r3, #1
  }
}
 8023daa:	4618      	mov	r0, r3
 8023dac:	371c      	adds	r7, #28
 8023dae:	46bd      	mov	sp, r7
 8023db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023db4:	4770      	bx	lr
 8023db6:	bf00      	nop
 8023db8:	000f4240 	.word	0x000f4240

08023dbc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8023dbc:	b480      	push	{r7}
 8023dbe:	b089      	sub	sp, #36	; 0x24
 8023dc0:	af00      	add	r7, sp, #0
 8023dc2:	60f8      	str	r0, [r7, #12]
 8023dc4:	60b9      	str	r1, [r7, #8]
 8023dc6:	607a      	str	r2, [r7, #4]
 8023dc8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8023dca:	68fb      	ldr	r3, [r7, #12]
 8023dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023dd0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8023dd2:	68fb      	ldr	r3, [r7, #12]
 8023dd4:	681b      	ldr	r3, [r3, #0]
 8023dd6:	689b      	ldr	r3, [r3, #8]
 8023dd8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8023dda:	7ffb      	ldrb	r3, [r7, #31]
 8023ddc:	2b01      	cmp	r3, #1
 8023dde:	d003      	beq.n	8023de8 <HAL_CAN_AddTxMessage+0x2c>
 8023de0:	7ffb      	ldrb	r3, [r7, #31]
 8023de2:	2b02      	cmp	r3, #2
 8023de4:	f040 80b8 	bne.w	8023f58 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8023de8:	69bb      	ldr	r3, [r7, #24]
 8023dea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8023dee:	2b00      	cmp	r3, #0
 8023df0:	d10a      	bne.n	8023e08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8023df2:	69bb      	ldr	r3, [r7, #24]
 8023df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8023df8:	2b00      	cmp	r3, #0
 8023dfa:	d105      	bne.n	8023e08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8023dfc:	69bb      	ldr	r3, [r7, #24]
 8023dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8023e02:	2b00      	cmp	r3, #0
 8023e04:	f000 80a0 	beq.w	8023f48 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8023e08:	69bb      	ldr	r3, [r7, #24]
 8023e0a:	0e1b      	lsrs	r3, r3, #24
 8023e0c:	f003 0303 	and.w	r3, r3, #3
 8023e10:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8023e12:	697b      	ldr	r3, [r7, #20]
 8023e14:	2b02      	cmp	r3, #2
 8023e16:	d907      	bls.n	8023e28 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8023e18:	68fb      	ldr	r3, [r7, #12]
 8023e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8023e20:	68fb      	ldr	r3, [r7, #12]
 8023e22:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8023e24:	2301      	movs	r3, #1
 8023e26:	e09e      	b.n	8023f66 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8023e28:	2201      	movs	r2, #1
 8023e2a:	697b      	ldr	r3, [r7, #20]
 8023e2c:	409a      	lsls	r2, r3
 8023e2e:	683b      	ldr	r3, [r7, #0]
 8023e30:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8023e32:	68bb      	ldr	r3, [r7, #8]
 8023e34:	689b      	ldr	r3, [r3, #8]
 8023e36:	2b00      	cmp	r3, #0
 8023e38:	d10d      	bne.n	8023e56 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8023e3a:	68bb      	ldr	r3, [r7, #8]
 8023e3c:	681b      	ldr	r3, [r3, #0]
 8023e3e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8023e40:	68bb      	ldr	r3, [r7, #8]
 8023e42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8023e44:	68f9      	ldr	r1, [r7, #12]
 8023e46:	6809      	ldr	r1, [r1, #0]
 8023e48:	431a      	orrs	r2, r3
 8023e4a:	697b      	ldr	r3, [r7, #20]
 8023e4c:	3318      	adds	r3, #24
 8023e4e:	011b      	lsls	r3, r3, #4
 8023e50:	440b      	add	r3, r1
 8023e52:	601a      	str	r2, [r3, #0]
 8023e54:	e00f      	b.n	8023e76 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8023e56:	68bb      	ldr	r3, [r7, #8]
 8023e58:	685b      	ldr	r3, [r3, #4]
 8023e5a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8023e5c:	68bb      	ldr	r3, [r7, #8]
 8023e5e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8023e60:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8023e62:	68bb      	ldr	r3, [r7, #8]
 8023e64:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8023e66:	68f9      	ldr	r1, [r7, #12]
 8023e68:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8023e6a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8023e6c:	697b      	ldr	r3, [r7, #20]
 8023e6e:	3318      	adds	r3, #24
 8023e70:	011b      	lsls	r3, r3, #4
 8023e72:	440b      	add	r3, r1
 8023e74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8023e76:	68fb      	ldr	r3, [r7, #12]
 8023e78:	6819      	ldr	r1, [r3, #0]
 8023e7a:	68bb      	ldr	r3, [r7, #8]
 8023e7c:	691a      	ldr	r2, [r3, #16]
 8023e7e:	697b      	ldr	r3, [r7, #20]
 8023e80:	3318      	adds	r3, #24
 8023e82:	011b      	lsls	r3, r3, #4
 8023e84:	440b      	add	r3, r1
 8023e86:	3304      	adds	r3, #4
 8023e88:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8023e8a:	68bb      	ldr	r3, [r7, #8]
 8023e8c:	7d1b      	ldrb	r3, [r3, #20]
 8023e8e:	2b01      	cmp	r3, #1
 8023e90:	d111      	bne.n	8023eb6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8023e92:	68fb      	ldr	r3, [r7, #12]
 8023e94:	681a      	ldr	r2, [r3, #0]
 8023e96:	697b      	ldr	r3, [r7, #20]
 8023e98:	3318      	adds	r3, #24
 8023e9a:	011b      	lsls	r3, r3, #4
 8023e9c:	4413      	add	r3, r2
 8023e9e:	3304      	adds	r3, #4
 8023ea0:	681b      	ldr	r3, [r3, #0]
 8023ea2:	68fa      	ldr	r2, [r7, #12]
 8023ea4:	6811      	ldr	r1, [r2, #0]
 8023ea6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8023eaa:	697b      	ldr	r3, [r7, #20]
 8023eac:	3318      	adds	r3, #24
 8023eae:	011b      	lsls	r3, r3, #4
 8023eb0:	440b      	add	r3, r1
 8023eb2:	3304      	adds	r3, #4
 8023eb4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8023eb6:	687b      	ldr	r3, [r7, #4]
 8023eb8:	3307      	adds	r3, #7
 8023eba:	781b      	ldrb	r3, [r3, #0]
 8023ebc:	061a      	lsls	r2, r3, #24
 8023ebe:	687b      	ldr	r3, [r7, #4]
 8023ec0:	3306      	adds	r3, #6
 8023ec2:	781b      	ldrb	r3, [r3, #0]
 8023ec4:	041b      	lsls	r3, r3, #16
 8023ec6:	431a      	orrs	r2, r3
 8023ec8:	687b      	ldr	r3, [r7, #4]
 8023eca:	3305      	adds	r3, #5
 8023ecc:	781b      	ldrb	r3, [r3, #0]
 8023ece:	021b      	lsls	r3, r3, #8
 8023ed0:	4313      	orrs	r3, r2
 8023ed2:	687a      	ldr	r2, [r7, #4]
 8023ed4:	3204      	adds	r2, #4
 8023ed6:	7812      	ldrb	r2, [r2, #0]
 8023ed8:	4610      	mov	r0, r2
 8023eda:	68fa      	ldr	r2, [r7, #12]
 8023edc:	6811      	ldr	r1, [r2, #0]
 8023ede:	ea43 0200 	orr.w	r2, r3, r0
 8023ee2:	697b      	ldr	r3, [r7, #20]
 8023ee4:	011b      	lsls	r3, r3, #4
 8023ee6:	440b      	add	r3, r1
 8023ee8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8023eec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8023eee:	687b      	ldr	r3, [r7, #4]
 8023ef0:	3303      	adds	r3, #3
 8023ef2:	781b      	ldrb	r3, [r3, #0]
 8023ef4:	061a      	lsls	r2, r3, #24
 8023ef6:	687b      	ldr	r3, [r7, #4]
 8023ef8:	3302      	adds	r3, #2
 8023efa:	781b      	ldrb	r3, [r3, #0]
 8023efc:	041b      	lsls	r3, r3, #16
 8023efe:	431a      	orrs	r2, r3
 8023f00:	687b      	ldr	r3, [r7, #4]
 8023f02:	3301      	adds	r3, #1
 8023f04:	781b      	ldrb	r3, [r3, #0]
 8023f06:	021b      	lsls	r3, r3, #8
 8023f08:	4313      	orrs	r3, r2
 8023f0a:	687a      	ldr	r2, [r7, #4]
 8023f0c:	7812      	ldrb	r2, [r2, #0]
 8023f0e:	4610      	mov	r0, r2
 8023f10:	68fa      	ldr	r2, [r7, #12]
 8023f12:	6811      	ldr	r1, [r2, #0]
 8023f14:	ea43 0200 	orr.w	r2, r3, r0
 8023f18:	697b      	ldr	r3, [r7, #20]
 8023f1a:	011b      	lsls	r3, r3, #4
 8023f1c:	440b      	add	r3, r1
 8023f1e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8023f22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8023f24:	68fb      	ldr	r3, [r7, #12]
 8023f26:	681a      	ldr	r2, [r3, #0]
 8023f28:	697b      	ldr	r3, [r7, #20]
 8023f2a:	3318      	adds	r3, #24
 8023f2c:	011b      	lsls	r3, r3, #4
 8023f2e:	4413      	add	r3, r2
 8023f30:	681b      	ldr	r3, [r3, #0]
 8023f32:	68fa      	ldr	r2, [r7, #12]
 8023f34:	6811      	ldr	r1, [r2, #0]
 8023f36:	f043 0201 	orr.w	r2, r3, #1
 8023f3a:	697b      	ldr	r3, [r7, #20]
 8023f3c:	3318      	adds	r3, #24
 8023f3e:	011b      	lsls	r3, r3, #4
 8023f40:	440b      	add	r3, r1
 8023f42:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8023f44:	2300      	movs	r3, #0
 8023f46:	e00e      	b.n	8023f66 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8023f48:	68fb      	ldr	r3, [r7, #12]
 8023f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8023f50:	68fb      	ldr	r3, [r7, #12]
 8023f52:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8023f54:	2301      	movs	r3, #1
 8023f56:	e006      	b.n	8023f66 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8023f58:	68fb      	ldr	r3, [r7, #12]
 8023f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8023f60:	68fb      	ldr	r3, [r7, #12]
 8023f62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8023f64:	2301      	movs	r3, #1
  }
}
 8023f66:	4618      	mov	r0, r3
 8023f68:	3724      	adds	r7, #36	; 0x24
 8023f6a:	46bd      	mov	sp, r7
 8023f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f70:	4770      	bx	lr

08023f72 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8023f72:	b480      	push	{r7}
 8023f74:	b085      	sub	sp, #20
 8023f76:	af00      	add	r7, sp, #0
 8023f78:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8023f7a:	2300      	movs	r3, #0
 8023f7c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8023f7e:	687b      	ldr	r3, [r7, #4]
 8023f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023f84:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8023f86:	7afb      	ldrb	r3, [r7, #11]
 8023f88:	2b01      	cmp	r3, #1
 8023f8a:	d002      	beq.n	8023f92 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8023f8c:	7afb      	ldrb	r3, [r7, #11]
 8023f8e:	2b02      	cmp	r3, #2
 8023f90:	d11d      	bne.n	8023fce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8023f92:	687b      	ldr	r3, [r7, #4]
 8023f94:	681b      	ldr	r3, [r3, #0]
 8023f96:	689b      	ldr	r3, [r3, #8]
 8023f98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8023f9c:	2b00      	cmp	r3, #0
 8023f9e:	d002      	beq.n	8023fa6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8023fa0:	68fb      	ldr	r3, [r7, #12]
 8023fa2:	3301      	adds	r3, #1
 8023fa4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8023fa6:	687b      	ldr	r3, [r7, #4]
 8023fa8:	681b      	ldr	r3, [r3, #0]
 8023faa:	689b      	ldr	r3, [r3, #8]
 8023fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8023fb0:	2b00      	cmp	r3, #0
 8023fb2:	d002      	beq.n	8023fba <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8023fb4:	68fb      	ldr	r3, [r7, #12]
 8023fb6:	3301      	adds	r3, #1
 8023fb8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8023fba:	687b      	ldr	r3, [r7, #4]
 8023fbc:	681b      	ldr	r3, [r3, #0]
 8023fbe:	689b      	ldr	r3, [r3, #8]
 8023fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023fc4:	2b00      	cmp	r3, #0
 8023fc6:	d002      	beq.n	8023fce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8023fc8:	68fb      	ldr	r3, [r7, #12]
 8023fca:	3301      	adds	r3, #1
 8023fcc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8023fce:	68fb      	ldr	r3, [r7, #12]
}
 8023fd0:	4618      	mov	r0, r3
 8023fd2:	3714      	adds	r7, #20
 8023fd4:	46bd      	mov	sp, r7
 8023fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fda:	4770      	bx	lr

08023fdc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8023fdc:	b480      	push	{r7}
 8023fde:	b087      	sub	sp, #28
 8023fe0:	af00      	add	r7, sp, #0
 8023fe2:	60f8      	str	r0, [r7, #12]
 8023fe4:	60b9      	str	r1, [r7, #8]
 8023fe6:	607a      	str	r2, [r7, #4]
 8023fe8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8023fea:	68fb      	ldr	r3, [r7, #12]
 8023fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023ff0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8023ff2:	7dfb      	ldrb	r3, [r7, #23]
 8023ff4:	2b01      	cmp	r3, #1
 8023ff6:	d003      	beq.n	8024000 <HAL_CAN_GetRxMessage+0x24>
 8023ff8:	7dfb      	ldrb	r3, [r7, #23]
 8023ffa:	2b02      	cmp	r3, #2
 8023ffc:	f040 80f3 	bne.w	80241e6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8024000:	68bb      	ldr	r3, [r7, #8]
 8024002:	2b00      	cmp	r3, #0
 8024004:	d10e      	bne.n	8024024 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8024006:	68fb      	ldr	r3, [r7, #12]
 8024008:	681b      	ldr	r3, [r3, #0]
 802400a:	68db      	ldr	r3, [r3, #12]
 802400c:	f003 0303 	and.w	r3, r3, #3
 8024010:	2b00      	cmp	r3, #0
 8024012:	d116      	bne.n	8024042 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8024014:	68fb      	ldr	r3, [r7, #12]
 8024016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024018:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802401c:	68fb      	ldr	r3, [r7, #12]
 802401e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8024020:	2301      	movs	r3, #1
 8024022:	e0e7      	b.n	80241f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8024024:	68fb      	ldr	r3, [r7, #12]
 8024026:	681b      	ldr	r3, [r3, #0]
 8024028:	691b      	ldr	r3, [r3, #16]
 802402a:	f003 0303 	and.w	r3, r3, #3
 802402e:	2b00      	cmp	r3, #0
 8024030:	d107      	bne.n	8024042 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8024032:	68fb      	ldr	r3, [r7, #12]
 8024034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024036:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802403a:	68fb      	ldr	r3, [r7, #12]
 802403c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 802403e:	2301      	movs	r3, #1
 8024040:	e0d8      	b.n	80241f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8024042:	68fb      	ldr	r3, [r7, #12]
 8024044:	681a      	ldr	r2, [r3, #0]
 8024046:	68bb      	ldr	r3, [r7, #8]
 8024048:	331b      	adds	r3, #27
 802404a:	011b      	lsls	r3, r3, #4
 802404c:	4413      	add	r3, r2
 802404e:	681b      	ldr	r3, [r3, #0]
 8024050:	f003 0204 	and.w	r2, r3, #4
 8024054:	687b      	ldr	r3, [r7, #4]
 8024056:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8024058:	687b      	ldr	r3, [r7, #4]
 802405a:	689b      	ldr	r3, [r3, #8]
 802405c:	2b00      	cmp	r3, #0
 802405e:	d10c      	bne.n	802407a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8024060:	68fb      	ldr	r3, [r7, #12]
 8024062:	681a      	ldr	r2, [r3, #0]
 8024064:	68bb      	ldr	r3, [r7, #8]
 8024066:	331b      	adds	r3, #27
 8024068:	011b      	lsls	r3, r3, #4
 802406a:	4413      	add	r3, r2
 802406c:	681b      	ldr	r3, [r3, #0]
 802406e:	0d5b      	lsrs	r3, r3, #21
 8024070:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8024074:	687b      	ldr	r3, [r7, #4]
 8024076:	601a      	str	r2, [r3, #0]
 8024078:	e00b      	b.n	8024092 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 802407a:	68fb      	ldr	r3, [r7, #12]
 802407c:	681a      	ldr	r2, [r3, #0]
 802407e:	68bb      	ldr	r3, [r7, #8]
 8024080:	331b      	adds	r3, #27
 8024082:	011b      	lsls	r3, r3, #4
 8024084:	4413      	add	r3, r2
 8024086:	681b      	ldr	r3, [r3, #0]
 8024088:	08db      	lsrs	r3, r3, #3
 802408a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 802408e:	687b      	ldr	r3, [r7, #4]
 8024090:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8024092:	68fb      	ldr	r3, [r7, #12]
 8024094:	681a      	ldr	r2, [r3, #0]
 8024096:	68bb      	ldr	r3, [r7, #8]
 8024098:	331b      	adds	r3, #27
 802409a:	011b      	lsls	r3, r3, #4
 802409c:	4413      	add	r3, r2
 802409e:	681b      	ldr	r3, [r3, #0]
 80240a0:	f003 0202 	and.w	r2, r3, #2
 80240a4:	687b      	ldr	r3, [r7, #4]
 80240a6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80240a8:	68fb      	ldr	r3, [r7, #12]
 80240aa:	681a      	ldr	r2, [r3, #0]
 80240ac:	68bb      	ldr	r3, [r7, #8]
 80240ae:	331b      	adds	r3, #27
 80240b0:	011b      	lsls	r3, r3, #4
 80240b2:	4413      	add	r3, r2
 80240b4:	3304      	adds	r3, #4
 80240b6:	681b      	ldr	r3, [r3, #0]
 80240b8:	f003 020f 	and.w	r2, r3, #15
 80240bc:	687b      	ldr	r3, [r7, #4]
 80240be:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80240c0:	68fb      	ldr	r3, [r7, #12]
 80240c2:	681a      	ldr	r2, [r3, #0]
 80240c4:	68bb      	ldr	r3, [r7, #8]
 80240c6:	331b      	adds	r3, #27
 80240c8:	011b      	lsls	r3, r3, #4
 80240ca:	4413      	add	r3, r2
 80240cc:	3304      	adds	r3, #4
 80240ce:	681b      	ldr	r3, [r3, #0]
 80240d0:	0a1b      	lsrs	r3, r3, #8
 80240d2:	b2da      	uxtb	r2, r3
 80240d4:	687b      	ldr	r3, [r7, #4]
 80240d6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80240d8:	68fb      	ldr	r3, [r7, #12]
 80240da:	681a      	ldr	r2, [r3, #0]
 80240dc:	68bb      	ldr	r3, [r7, #8]
 80240de:	331b      	adds	r3, #27
 80240e0:	011b      	lsls	r3, r3, #4
 80240e2:	4413      	add	r3, r2
 80240e4:	3304      	adds	r3, #4
 80240e6:	681b      	ldr	r3, [r3, #0]
 80240e8:	0c1b      	lsrs	r3, r3, #16
 80240ea:	b29a      	uxth	r2, r3
 80240ec:	687b      	ldr	r3, [r7, #4]
 80240ee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80240f0:	68fb      	ldr	r3, [r7, #12]
 80240f2:	681a      	ldr	r2, [r3, #0]
 80240f4:	68bb      	ldr	r3, [r7, #8]
 80240f6:	011b      	lsls	r3, r3, #4
 80240f8:	4413      	add	r3, r2
 80240fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80240fe:	681b      	ldr	r3, [r3, #0]
 8024100:	b2da      	uxtb	r2, r3
 8024102:	683b      	ldr	r3, [r7, #0]
 8024104:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8024106:	68fb      	ldr	r3, [r7, #12]
 8024108:	681a      	ldr	r2, [r3, #0]
 802410a:	68bb      	ldr	r3, [r7, #8]
 802410c:	011b      	lsls	r3, r3, #4
 802410e:	4413      	add	r3, r2
 8024110:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8024114:	681b      	ldr	r3, [r3, #0]
 8024116:	0a1a      	lsrs	r2, r3, #8
 8024118:	683b      	ldr	r3, [r7, #0]
 802411a:	3301      	adds	r3, #1
 802411c:	b2d2      	uxtb	r2, r2
 802411e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8024120:	68fb      	ldr	r3, [r7, #12]
 8024122:	681a      	ldr	r2, [r3, #0]
 8024124:	68bb      	ldr	r3, [r7, #8]
 8024126:	011b      	lsls	r3, r3, #4
 8024128:	4413      	add	r3, r2
 802412a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 802412e:	681b      	ldr	r3, [r3, #0]
 8024130:	0c1a      	lsrs	r2, r3, #16
 8024132:	683b      	ldr	r3, [r7, #0]
 8024134:	3302      	adds	r3, #2
 8024136:	b2d2      	uxtb	r2, r2
 8024138:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 802413a:	68fb      	ldr	r3, [r7, #12]
 802413c:	681a      	ldr	r2, [r3, #0]
 802413e:	68bb      	ldr	r3, [r7, #8]
 8024140:	011b      	lsls	r3, r3, #4
 8024142:	4413      	add	r3, r2
 8024144:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8024148:	681b      	ldr	r3, [r3, #0]
 802414a:	0e1a      	lsrs	r2, r3, #24
 802414c:	683b      	ldr	r3, [r7, #0]
 802414e:	3303      	adds	r3, #3
 8024150:	b2d2      	uxtb	r2, r2
 8024152:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8024154:	68fb      	ldr	r3, [r7, #12]
 8024156:	681a      	ldr	r2, [r3, #0]
 8024158:	68bb      	ldr	r3, [r7, #8]
 802415a:	011b      	lsls	r3, r3, #4
 802415c:	4413      	add	r3, r2
 802415e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8024162:	681a      	ldr	r2, [r3, #0]
 8024164:	683b      	ldr	r3, [r7, #0]
 8024166:	3304      	adds	r3, #4
 8024168:	b2d2      	uxtb	r2, r2
 802416a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 802416c:	68fb      	ldr	r3, [r7, #12]
 802416e:	681a      	ldr	r2, [r3, #0]
 8024170:	68bb      	ldr	r3, [r7, #8]
 8024172:	011b      	lsls	r3, r3, #4
 8024174:	4413      	add	r3, r2
 8024176:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 802417a:	681b      	ldr	r3, [r3, #0]
 802417c:	0a1a      	lsrs	r2, r3, #8
 802417e:	683b      	ldr	r3, [r7, #0]
 8024180:	3305      	adds	r3, #5
 8024182:	b2d2      	uxtb	r2, r2
 8024184:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8024186:	68fb      	ldr	r3, [r7, #12]
 8024188:	681a      	ldr	r2, [r3, #0]
 802418a:	68bb      	ldr	r3, [r7, #8]
 802418c:	011b      	lsls	r3, r3, #4
 802418e:	4413      	add	r3, r2
 8024190:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8024194:	681b      	ldr	r3, [r3, #0]
 8024196:	0c1a      	lsrs	r2, r3, #16
 8024198:	683b      	ldr	r3, [r7, #0]
 802419a:	3306      	adds	r3, #6
 802419c:	b2d2      	uxtb	r2, r2
 802419e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80241a0:	68fb      	ldr	r3, [r7, #12]
 80241a2:	681a      	ldr	r2, [r3, #0]
 80241a4:	68bb      	ldr	r3, [r7, #8]
 80241a6:	011b      	lsls	r3, r3, #4
 80241a8:	4413      	add	r3, r2
 80241aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80241ae:	681b      	ldr	r3, [r3, #0]
 80241b0:	0e1a      	lsrs	r2, r3, #24
 80241b2:	683b      	ldr	r3, [r7, #0]
 80241b4:	3307      	adds	r3, #7
 80241b6:	b2d2      	uxtb	r2, r2
 80241b8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80241ba:	68bb      	ldr	r3, [r7, #8]
 80241bc:	2b00      	cmp	r3, #0
 80241be:	d108      	bne.n	80241d2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80241c0:	68fb      	ldr	r3, [r7, #12]
 80241c2:	681b      	ldr	r3, [r3, #0]
 80241c4:	68da      	ldr	r2, [r3, #12]
 80241c6:	68fb      	ldr	r3, [r7, #12]
 80241c8:	681b      	ldr	r3, [r3, #0]
 80241ca:	f042 0220 	orr.w	r2, r2, #32
 80241ce:	60da      	str	r2, [r3, #12]
 80241d0:	e007      	b.n	80241e2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80241d2:	68fb      	ldr	r3, [r7, #12]
 80241d4:	681b      	ldr	r3, [r3, #0]
 80241d6:	691a      	ldr	r2, [r3, #16]
 80241d8:	68fb      	ldr	r3, [r7, #12]
 80241da:	681b      	ldr	r3, [r3, #0]
 80241dc:	f042 0220 	orr.w	r2, r2, #32
 80241e0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80241e2:	2300      	movs	r3, #0
 80241e4:	e006      	b.n	80241f4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80241e6:	68fb      	ldr	r3, [r7, #12]
 80241e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80241ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80241ee:	68fb      	ldr	r3, [r7, #12]
 80241f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80241f2:	2301      	movs	r3, #1
  }
}
 80241f4:	4618      	mov	r0, r3
 80241f6:	371c      	adds	r7, #28
 80241f8:	46bd      	mov	sp, r7
 80241fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241fe:	4770      	bx	lr

08024200 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8024200:	b480      	push	{r7}
 8024202:	b085      	sub	sp, #20
 8024204:	af00      	add	r7, sp, #0
 8024206:	6078      	str	r0, [r7, #4]
 8024208:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 802420a:	687b      	ldr	r3, [r7, #4]
 802420c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8024210:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8024212:	7bfb      	ldrb	r3, [r7, #15]
 8024214:	2b01      	cmp	r3, #1
 8024216:	d002      	beq.n	802421e <HAL_CAN_ActivateNotification+0x1e>
 8024218:	7bfb      	ldrb	r3, [r7, #15]
 802421a:	2b02      	cmp	r3, #2
 802421c:	d109      	bne.n	8024232 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 802421e:	687b      	ldr	r3, [r7, #4]
 8024220:	681b      	ldr	r3, [r3, #0]
 8024222:	6959      	ldr	r1, [r3, #20]
 8024224:	687b      	ldr	r3, [r7, #4]
 8024226:	681b      	ldr	r3, [r3, #0]
 8024228:	683a      	ldr	r2, [r7, #0]
 802422a:	430a      	orrs	r2, r1
 802422c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 802422e:	2300      	movs	r3, #0
 8024230:	e006      	b.n	8024240 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8024232:	687b      	ldr	r3, [r7, #4]
 8024234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024236:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 802423a:	687b      	ldr	r3, [r7, #4]
 802423c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 802423e:	2301      	movs	r3, #1
  }
}
 8024240:	4618      	mov	r0, r3
 8024242:	3714      	adds	r7, #20
 8024244:	46bd      	mov	sp, r7
 8024246:	f85d 7b04 	ldr.w	r7, [sp], #4
 802424a:	4770      	bx	lr

0802424c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 802424c:	b580      	push	{r7, lr}
 802424e:	b08a      	sub	sp, #40	; 0x28
 8024250:	af00      	add	r7, sp, #0
 8024252:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8024254:	2300      	movs	r3, #0
 8024256:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8024258:	687b      	ldr	r3, [r7, #4]
 802425a:	681b      	ldr	r3, [r3, #0]
 802425c:	695b      	ldr	r3, [r3, #20]
 802425e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8024260:	687b      	ldr	r3, [r7, #4]
 8024262:	681b      	ldr	r3, [r3, #0]
 8024264:	685b      	ldr	r3, [r3, #4]
 8024266:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8024268:	687b      	ldr	r3, [r7, #4]
 802426a:	681b      	ldr	r3, [r3, #0]
 802426c:	689b      	ldr	r3, [r3, #8]
 802426e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8024270:	687b      	ldr	r3, [r7, #4]
 8024272:	681b      	ldr	r3, [r3, #0]
 8024274:	68db      	ldr	r3, [r3, #12]
 8024276:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8024278:	687b      	ldr	r3, [r7, #4]
 802427a:	681b      	ldr	r3, [r3, #0]
 802427c:	691b      	ldr	r3, [r3, #16]
 802427e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8024280:	687b      	ldr	r3, [r7, #4]
 8024282:	681b      	ldr	r3, [r3, #0]
 8024284:	699b      	ldr	r3, [r3, #24]
 8024286:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8024288:	6a3b      	ldr	r3, [r7, #32]
 802428a:	f003 0301 	and.w	r3, r3, #1
 802428e:	2b00      	cmp	r3, #0
 8024290:	d07c      	beq.n	802438c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8024292:	69bb      	ldr	r3, [r7, #24]
 8024294:	f003 0301 	and.w	r3, r3, #1
 8024298:	2b00      	cmp	r3, #0
 802429a:	d023      	beq.n	80242e4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 802429c:	687b      	ldr	r3, [r7, #4]
 802429e:	681b      	ldr	r3, [r3, #0]
 80242a0:	2201      	movs	r2, #1
 80242a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80242a4:	69bb      	ldr	r3, [r7, #24]
 80242a6:	f003 0302 	and.w	r3, r3, #2
 80242aa:	2b00      	cmp	r3, #0
 80242ac:	d003      	beq.n	80242b6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80242ae:	6878      	ldr	r0, [r7, #4]
 80242b0:	f000 f983 	bl	80245ba <HAL_CAN_TxMailbox0CompleteCallback>
 80242b4:	e016      	b.n	80242e4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80242b6:	69bb      	ldr	r3, [r7, #24]
 80242b8:	f003 0304 	and.w	r3, r3, #4
 80242bc:	2b00      	cmp	r3, #0
 80242be:	d004      	beq.n	80242ca <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80242c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80242c6:	627b      	str	r3, [r7, #36]	; 0x24
 80242c8:	e00c      	b.n	80242e4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80242ca:	69bb      	ldr	r3, [r7, #24]
 80242cc:	f003 0308 	and.w	r3, r3, #8
 80242d0:	2b00      	cmp	r3, #0
 80242d2:	d004      	beq.n	80242de <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80242d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80242da:	627b      	str	r3, [r7, #36]	; 0x24
 80242dc:	e002      	b.n	80242e4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80242de:	6878      	ldr	r0, [r7, #4]
 80242e0:	f000 f989 	bl	80245f6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80242e4:	69bb      	ldr	r3, [r7, #24]
 80242e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80242ea:	2b00      	cmp	r3, #0
 80242ec:	d024      	beq.n	8024338 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80242ee:	687b      	ldr	r3, [r7, #4]
 80242f0:	681b      	ldr	r3, [r3, #0]
 80242f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80242f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80242f8:	69bb      	ldr	r3, [r7, #24]
 80242fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80242fe:	2b00      	cmp	r3, #0
 8024300:	d003      	beq.n	802430a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8024302:	6878      	ldr	r0, [r7, #4]
 8024304:	f000 f963 	bl	80245ce <HAL_CAN_TxMailbox1CompleteCallback>
 8024308:	e016      	b.n	8024338 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 802430a:	69bb      	ldr	r3, [r7, #24]
 802430c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024310:	2b00      	cmp	r3, #0
 8024312:	d004      	beq.n	802431e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8024314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024316:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802431a:	627b      	str	r3, [r7, #36]	; 0x24
 802431c:	e00c      	b.n	8024338 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 802431e:	69bb      	ldr	r3, [r7, #24]
 8024320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8024324:	2b00      	cmp	r3, #0
 8024326:	d004      	beq.n	8024332 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8024328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802432a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802432e:	627b      	str	r3, [r7, #36]	; 0x24
 8024330:	e002      	b.n	8024338 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8024332:	6878      	ldr	r0, [r7, #4]
 8024334:	f000 f969 	bl	802460a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8024338:	69bb      	ldr	r3, [r7, #24]
 802433a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802433e:	2b00      	cmp	r3, #0
 8024340:	d024      	beq.n	802438c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8024342:	687b      	ldr	r3, [r7, #4]
 8024344:	681b      	ldr	r3, [r3, #0]
 8024346:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802434a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 802434c:	69bb      	ldr	r3, [r7, #24]
 802434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024352:	2b00      	cmp	r3, #0
 8024354:	d003      	beq.n	802435e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8024356:	6878      	ldr	r0, [r7, #4]
 8024358:	f000 f943 	bl	80245e2 <HAL_CAN_TxMailbox2CompleteCallback>
 802435c:	e016      	b.n	802438c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 802435e:	69bb      	ldr	r3, [r7, #24]
 8024360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8024364:	2b00      	cmp	r3, #0
 8024366:	d004      	beq.n	8024372 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8024368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802436a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802436e:	627b      	str	r3, [r7, #36]	; 0x24
 8024370:	e00c      	b.n	802438c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8024372:	69bb      	ldr	r3, [r7, #24]
 8024374:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8024378:	2b00      	cmp	r3, #0
 802437a:	d004      	beq.n	8024386 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 802437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802437e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8024382:	627b      	str	r3, [r7, #36]	; 0x24
 8024384:	e002      	b.n	802438c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8024386:	6878      	ldr	r0, [r7, #4]
 8024388:	f000 f949 	bl	802461e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 802438c:	6a3b      	ldr	r3, [r7, #32]
 802438e:	f003 0308 	and.w	r3, r3, #8
 8024392:	2b00      	cmp	r3, #0
 8024394:	d00c      	beq.n	80243b0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8024396:	697b      	ldr	r3, [r7, #20]
 8024398:	f003 0310 	and.w	r3, r3, #16
 802439c:	2b00      	cmp	r3, #0
 802439e:	d007      	beq.n	80243b0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80243a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80243a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80243a8:	687b      	ldr	r3, [r7, #4]
 80243aa:	681b      	ldr	r3, [r3, #0]
 80243ac:	2210      	movs	r2, #16
 80243ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80243b0:	6a3b      	ldr	r3, [r7, #32]
 80243b2:	f003 0304 	and.w	r3, r3, #4
 80243b6:	2b00      	cmp	r3, #0
 80243b8:	d00b      	beq.n	80243d2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80243ba:	697b      	ldr	r3, [r7, #20]
 80243bc:	f003 0308 	and.w	r3, r3, #8
 80243c0:	2b00      	cmp	r3, #0
 80243c2:	d006      	beq.n	80243d2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80243c4:	687b      	ldr	r3, [r7, #4]
 80243c6:	681b      	ldr	r3, [r3, #0]
 80243c8:	2208      	movs	r2, #8
 80243ca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80243cc:	6878      	ldr	r0, [r7, #4]
 80243ce:	f000 f930 	bl	8024632 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80243d2:	6a3b      	ldr	r3, [r7, #32]
 80243d4:	f003 0302 	and.w	r3, r3, #2
 80243d8:	2b00      	cmp	r3, #0
 80243da:	d009      	beq.n	80243f0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80243dc:	687b      	ldr	r3, [r7, #4]
 80243de:	681b      	ldr	r3, [r3, #0]
 80243e0:	68db      	ldr	r3, [r3, #12]
 80243e2:	f003 0303 	and.w	r3, r3, #3
 80243e6:	2b00      	cmp	r3, #0
 80243e8:	d002      	beq.n	80243f0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80243ea:	6878      	ldr	r0, [r7, #4]
 80243ec:	f7ef fbfa 	bl	8013be4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80243f0:	6a3b      	ldr	r3, [r7, #32]
 80243f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80243f6:	2b00      	cmp	r3, #0
 80243f8:	d00c      	beq.n	8024414 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80243fa:	693b      	ldr	r3, [r7, #16]
 80243fc:	f003 0310 	and.w	r3, r3, #16
 8024400:	2b00      	cmp	r3, #0
 8024402:	d007      	beq.n	8024414 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8024404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802440a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 802440c:	687b      	ldr	r3, [r7, #4]
 802440e:	681b      	ldr	r3, [r3, #0]
 8024410:	2210      	movs	r2, #16
 8024412:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8024414:	6a3b      	ldr	r3, [r7, #32]
 8024416:	f003 0320 	and.w	r3, r3, #32
 802441a:	2b00      	cmp	r3, #0
 802441c:	d00b      	beq.n	8024436 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 802441e:	693b      	ldr	r3, [r7, #16]
 8024420:	f003 0308 	and.w	r3, r3, #8
 8024424:	2b00      	cmp	r3, #0
 8024426:	d006      	beq.n	8024436 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8024428:	687b      	ldr	r3, [r7, #4]
 802442a:	681b      	ldr	r3, [r3, #0]
 802442c:	2208      	movs	r2, #8
 802442e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8024430:	6878      	ldr	r0, [r7, #4]
 8024432:	f000 f908 	bl	8024646 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8024436:	6a3b      	ldr	r3, [r7, #32]
 8024438:	f003 0310 	and.w	r3, r3, #16
 802443c:	2b00      	cmp	r3, #0
 802443e:	d009      	beq.n	8024454 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8024440:	687b      	ldr	r3, [r7, #4]
 8024442:	681b      	ldr	r3, [r3, #0]
 8024444:	691b      	ldr	r3, [r3, #16]
 8024446:	f003 0303 	and.w	r3, r3, #3
 802444a:	2b00      	cmp	r3, #0
 802444c:	d002      	beq.n	8024454 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 802444e:	6878      	ldr	r0, [r7, #4]
 8024450:	f7ef fc7c 	bl	8013d4c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8024454:	6a3b      	ldr	r3, [r7, #32]
 8024456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802445a:	2b00      	cmp	r3, #0
 802445c:	d00b      	beq.n	8024476 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 802445e:	69fb      	ldr	r3, [r7, #28]
 8024460:	f003 0310 	and.w	r3, r3, #16
 8024464:	2b00      	cmp	r3, #0
 8024466:	d006      	beq.n	8024476 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8024468:	687b      	ldr	r3, [r7, #4]
 802446a:	681b      	ldr	r3, [r3, #0]
 802446c:	2210      	movs	r2, #16
 802446e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8024470:	6878      	ldr	r0, [r7, #4]
 8024472:	f000 f8f2 	bl	802465a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8024476:	6a3b      	ldr	r3, [r7, #32]
 8024478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802447c:	2b00      	cmp	r3, #0
 802447e:	d00b      	beq.n	8024498 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8024480:	69fb      	ldr	r3, [r7, #28]
 8024482:	f003 0308 	and.w	r3, r3, #8
 8024486:	2b00      	cmp	r3, #0
 8024488:	d006      	beq.n	8024498 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 802448a:	687b      	ldr	r3, [r7, #4]
 802448c:	681b      	ldr	r3, [r3, #0]
 802448e:	2208      	movs	r2, #8
 8024490:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8024492:	6878      	ldr	r0, [r7, #4]
 8024494:	f000 f8eb 	bl	802466e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8024498:	6a3b      	ldr	r3, [r7, #32]
 802449a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802449e:	2b00      	cmp	r3, #0
 80244a0:	d07b      	beq.n	802459a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80244a2:	69fb      	ldr	r3, [r7, #28]
 80244a4:	f003 0304 	and.w	r3, r3, #4
 80244a8:	2b00      	cmp	r3, #0
 80244aa:	d072      	beq.n	8024592 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80244ac:	6a3b      	ldr	r3, [r7, #32]
 80244ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80244b2:	2b00      	cmp	r3, #0
 80244b4:	d008      	beq.n	80244c8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80244b6:	68fb      	ldr	r3, [r7, #12]
 80244b8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80244bc:	2b00      	cmp	r3, #0
 80244be:	d003      	beq.n	80244c8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80244c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244c2:	f043 0301 	orr.w	r3, r3, #1
 80244c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80244c8:	6a3b      	ldr	r3, [r7, #32]
 80244ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80244ce:	2b00      	cmp	r3, #0
 80244d0:	d008      	beq.n	80244e4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80244d2:	68fb      	ldr	r3, [r7, #12]
 80244d4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80244d8:	2b00      	cmp	r3, #0
 80244da:	d003      	beq.n	80244e4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80244dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244de:	f043 0302 	orr.w	r3, r3, #2
 80244e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80244e4:	6a3b      	ldr	r3, [r7, #32]
 80244e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80244ea:	2b00      	cmp	r3, #0
 80244ec:	d008      	beq.n	8024500 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80244ee:	68fb      	ldr	r3, [r7, #12]
 80244f0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80244f4:	2b00      	cmp	r3, #0
 80244f6:	d003      	beq.n	8024500 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80244f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244fa:	f043 0304 	orr.w	r3, r3, #4
 80244fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8024500:	6a3b      	ldr	r3, [r7, #32]
 8024502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8024506:	2b00      	cmp	r3, #0
 8024508:	d043      	beq.n	8024592 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 802450a:	68fb      	ldr	r3, [r7, #12]
 802450c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8024510:	2b00      	cmp	r3, #0
 8024512:	d03e      	beq.n	8024592 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8024514:	68fb      	ldr	r3, [r7, #12]
 8024516:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802451a:	2b60      	cmp	r3, #96	; 0x60
 802451c:	d02b      	beq.n	8024576 <HAL_CAN_IRQHandler+0x32a>
 802451e:	2b60      	cmp	r3, #96	; 0x60
 8024520:	d82e      	bhi.n	8024580 <HAL_CAN_IRQHandler+0x334>
 8024522:	2b50      	cmp	r3, #80	; 0x50
 8024524:	d022      	beq.n	802456c <HAL_CAN_IRQHandler+0x320>
 8024526:	2b50      	cmp	r3, #80	; 0x50
 8024528:	d82a      	bhi.n	8024580 <HAL_CAN_IRQHandler+0x334>
 802452a:	2b40      	cmp	r3, #64	; 0x40
 802452c:	d019      	beq.n	8024562 <HAL_CAN_IRQHandler+0x316>
 802452e:	2b40      	cmp	r3, #64	; 0x40
 8024530:	d826      	bhi.n	8024580 <HAL_CAN_IRQHandler+0x334>
 8024532:	2b30      	cmp	r3, #48	; 0x30
 8024534:	d010      	beq.n	8024558 <HAL_CAN_IRQHandler+0x30c>
 8024536:	2b30      	cmp	r3, #48	; 0x30
 8024538:	d822      	bhi.n	8024580 <HAL_CAN_IRQHandler+0x334>
 802453a:	2b10      	cmp	r3, #16
 802453c:	d002      	beq.n	8024544 <HAL_CAN_IRQHandler+0x2f8>
 802453e:	2b20      	cmp	r3, #32
 8024540:	d005      	beq.n	802454e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8024542:	e01d      	b.n	8024580 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8024544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024546:	f043 0308 	orr.w	r3, r3, #8
 802454a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 802454c:	e019      	b.n	8024582 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 802454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024550:	f043 0310 	orr.w	r3, r3, #16
 8024554:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8024556:	e014      	b.n	8024582 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8024558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802455a:	f043 0320 	orr.w	r3, r3, #32
 802455e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8024560:	e00f      	b.n	8024582 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8024562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024568:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 802456a:	e00a      	b.n	8024582 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 802456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802456e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024572:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8024574:	e005      	b.n	8024582 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8024576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802457c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 802457e:	e000      	b.n	8024582 <HAL_CAN_IRQHandler+0x336>
            break;
 8024580:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8024582:	687b      	ldr	r3, [r7, #4]
 8024584:	681b      	ldr	r3, [r3, #0]
 8024586:	699a      	ldr	r2, [r3, #24]
 8024588:	687b      	ldr	r3, [r7, #4]
 802458a:	681b      	ldr	r3, [r3, #0]
 802458c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8024590:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8024592:	687b      	ldr	r3, [r7, #4]
 8024594:	681b      	ldr	r3, [r3, #0]
 8024596:	2204      	movs	r2, #4
 8024598:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 802459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802459c:	2b00      	cmp	r3, #0
 802459e:	d008      	beq.n	80245b2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80245a0:	687b      	ldr	r3, [r7, #4]
 80245a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80245a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80245a6:	431a      	orrs	r2, r3
 80245a8:	687b      	ldr	r3, [r7, #4]
 80245aa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80245ac:	6878      	ldr	r0, [r7, #4]
 80245ae:	f000 f868 	bl	8024682 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80245b2:	bf00      	nop
 80245b4:	3728      	adds	r7, #40	; 0x28
 80245b6:	46bd      	mov	sp, r7
 80245b8:	bd80      	pop	{r7, pc}

080245ba <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80245ba:	b480      	push	{r7}
 80245bc:	b083      	sub	sp, #12
 80245be:	af00      	add	r7, sp, #0
 80245c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80245c2:	bf00      	nop
 80245c4:	370c      	adds	r7, #12
 80245c6:	46bd      	mov	sp, r7
 80245c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245cc:	4770      	bx	lr

080245ce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80245ce:	b480      	push	{r7}
 80245d0:	b083      	sub	sp, #12
 80245d2:	af00      	add	r7, sp, #0
 80245d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80245d6:	bf00      	nop
 80245d8:	370c      	adds	r7, #12
 80245da:	46bd      	mov	sp, r7
 80245dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245e0:	4770      	bx	lr

080245e2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80245e2:	b480      	push	{r7}
 80245e4:	b083      	sub	sp, #12
 80245e6:	af00      	add	r7, sp, #0
 80245e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80245ea:	bf00      	nop
 80245ec:	370c      	adds	r7, #12
 80245ee:	46bd      	mov	sp, r7
 80245f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245f4:	4770      	bx	lr

080245f6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80245f6:	b480      	push	{r7}
 80245f8:	b083      	sub	sp, #12
 80245fa:	af00      	add	r7, sp, #0
 80245fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80245fe:	bf00      	nop
 8024600:	370c      	adds	r7, #12
 8024602:	46bd      	mov	sp, r7
 8024604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024608:	4770      	bx	lr

0802460a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 802460a:	b480      	push	{r7}
 802460c:	b083      	sub	sp, #12
 802460e:	af00      	add	r7, sp, #0
 8024610:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8024612:	bf00      	nop
 8024614:	370c      	adds	r7, #12
 8024616:	46bd      	mov	sp, r7
 8024618:	f85d 7b04 	ldr.w	r7, [sp], #4
 802461c:	4770      	bx	lr

0802461e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 802461e:	b480      	push	{r7}
 8024620:	b083      	sub	sp, #12
 8024622:	af00      	add	r7, sp, #0
 8024624:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8024626:	bf00      	nop
 8024628:	370c      	adds	r7, #12
 802462a:	46bd      	mov	sp, r7
 802462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024630:	4770      	bx	lr

08024632 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8024632:	b480      	push	{r7}
 8024634:	b083      	sub	sp, #12
 8024636:	af00      	add	r7, sp, #0
 8024638:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 802463a:	bf00      	nop
 802463c:	370c      	adds	r7, #12
 802463e:	46bd      	mov	sp, r7
 8024640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024644:	4770      	bx	lr

08024646 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8024646:	b480      	push	{r7}
 8024648:	b083      	sub	sp, #12
 802464a:	af00      	add	r7, sp, #0
 802464c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 802464e:	bf00      	nop
 8024650:	370c      	adds	r7, #12
 8024652:	46bd      	mov	sp, r7
 8024654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024658:	4770      	bx	lr

0802465a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 802465a:	b480      	push	{r7}
 802465c:	b083      	sub	sp, #12
 802465e:	af00      	add	r7, sp, #0
 8024660:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8024662:	bf00      	nop
 8024664:	370c      	adds	r7, #12
 8024666:	46bd      	mov	sp, r7
 8024668:	f85d 7b04 	ldr.w	r7, [sp], #4
 802466c:	4770      	bx	lr

0802466e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 802466e:	b480      	push	{r7}
 8024670:	b083      	sub	sp, #12
 8024672:	af00      	add	r7, sp, #0
 8024674:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8024676:	bf00      	nop
 8024678:	370c      	adds	r7, #12
 802467a:	46bd      	mov	sp, r7
 802467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024680:	4770      	bx	lr

08024682 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8024682:	b480      	push	{r7}
 8024684:	b083      	sub	sp, #12
 8024686:	af00      	add	r7, sp, #0
 8024688:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 802468a:	bf00      	nop
 802468c:	370c      	adds	r7, #12
 802468e:	46bd      	mov	sp, r7
 8024690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024694:	4770      	bx	lr
	...

08024698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8024698:	b480      	push	{r7}
 802469a:	b085      	sub	sp, #20
 802469c:	af00      	add	r7, sp, #0
 802469e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80246a0:	687b      	ldr	r3, [r7, #4]
 80246a2:	f003 0307 	and.w	r3, r3, #7
 80246a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80246a8:	4b0c      	ldr	r3, [pc, #48]	; (80246dc <__NVIC_SetPriorityGrouping+0x44>)
 80246aa:	68db      	ldr	r3, [r3, #12]
 80246ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80246ae:	68ba      	ldr	r2, [r7, #8]
 80246b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80246b4:	4013      	ands	r3, r2
 80246b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80246b8:	68fb      	ldr	r3, [r7, #12]
 80246ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80246bc:	68bb      	ldr	r3, [r7, #8]
 80246be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80246c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80246c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80246c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80246ca:	4a04      	ldr	r2, [pc, #16]	; (80246dc <__NVIC_SetPriorityGrouping+0x44>)
 80246cc:	68bb      	ldr	r3, [r7, #8]
 80246ce:	60d3      	str	r3, [r2, #12]
}
 80246d0:	bf00      	nop
 80246d2:	3714      	adds	r7, #20
 80246d4:	46bd      	mov	sp, r7
 80246d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246da:	4770      	bx	lr
 80246dc:	e000ed00 	.word	0xe000ed00

080246e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80246e0:	b480      	push	{r7}
 80246e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80246e4:	4b04      	ldr	r3, [pc, #16]	; (80246f8 <__NVIC_GetPriorityGrouping+0x18>)
 80246e6:	68db      	ldr	r3, [r3, #12]
 80246e8:	0a1b      	lsrs	r3, r3, #8
 80246ea:	f003 0307 	and.w	r3, r3, #7
}
 80246ee:	4618      	mov	r0, r3
 80246f0:	46bd      	mov	sp, r7
 80246f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246f6:	4770      	bx	lr
 80246f8:	e000ed00 	.word	0xe000ed00

080246fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80246fc:	b480      	push	{r7}
 80246fe:	b083      	sub	sp, #12
 8024700:	af00      	add	r7, sp, #0
 8024702:	4603      	mov	r3, r0
 8024704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8024706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802470a:	2b00      	cmp	r3, #0
 802470c:	db0b      	blt.n	8024726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802470e:	79fb      	ldrb	r3, [r7, #7]
 8024710:	f003 021f 	and.w	r2, r3, #31
 8024714:	4907      	ldr	r1, [pc, #28]	; (8024734 <__NVIC_EnableIRQ+0x38>)
 8024716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802471a:	095b      	lsrs	r3, r3, #5
 802471c:	2001      	movs	r0, #1
 802471e:	fa00 f202 	lsl.w	r2, r0, r2
 8024722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8024726:	bf00      	nop
 8024728:	370c      	adds	r7, #12
 802472a:	46bd      	mov	sp, r7
 802472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024730:	4770      	bx	lr
 8024732:	bf00      	nop
 8024734:	e000e100 	.word	0xe000e100

08024738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8024738:	b480      	push	{r7}
 802473a:	b083      	sub	sp, #12
 802473c:	af00      	add	r7, sp, #0
 802473e:	4603      	mov	r3, r0
 8024740:	6039      	str	r1, [r7, #0]
 8024742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8024744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024748:	2b00      	cmp	r3, #0
 802474a:	db0a      	blt.n	8024762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802474c:	683b      	ldr	r3, [r7, #0]
 802474e:	b2da      	uxtb	r2, r3
 8024750:	490c      	ldr	r1, [pc, #48]	; (8024784 <__NVIC_SetPriority+0x4c>)
 8024752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024756:	0112      	lsls	r2, r2, #4
 8024758:	b2d2      	uxtb	r2, r2
 802475a:	440b      	add	r3, r1
 802475c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8024760:	e00a      	b.n	8024778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8024762:	683b      	ldr	r3, [r7, #0]
 8024764:	b2da      	uxtb	r2, r3
 8024766:	4908      	ldr	r1, [pc, #32]	; (8024788 <__NVIC_SetPriority+0x50>)
 8024768:	79fb      	ldrb	r3, [r7, #7]
 802476a:	f003 030f 	and.w	r3, r3, #15
 802476e:	3b04      	subs	r3, #4
 8024770:	0112      	lsls	r2, r2, #4
 8024772:	b2d2      	uxtb	r2, r2
 8024774:	440b      	add	r3, r1
 8024776:	761a      	strb	r2, [r3, #24]
}
 8024778:	bf00      	nop
 802477a:	370c      	adds	r7, #12
 802477c:	46bd      	mov	sp, r7
 802477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024782:	4770      	bx	lr
 8024784:	e000e100 	.word	0xe000e100
 8024788:	e000ed00 	.word	0xe000ed00

0802478c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802478c:	b480      	push	{r7}
 802478e:	b089      	sub	sp, #36	; 0x24
 8024790:	af00      	add	r7, sp, #0
 8024792:	60f8      	str	r0, [r7, #12]
 8024794:	60b9      	str	r1, [r7, #8]
 8024796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8024798:	68fb      	ldr	r3, [r7, #12]
 802479a:	f003 0307 	and.w	r3, r3, #7
 802479e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80247a0:	69fb      	ldr	r3, [r7, #28]
 80247a2:	f1c3 0307 	rsb	r3, r3, #7
 80247a6:	2b04      	cmp	r3, #4
 80247a8:	bf28      	it	cs
 80247aa:	2304      	movcs	r3, #4
 80247ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80247ae:	69fb      	ldr	r3, [r7, #28]
 80247b0:	3304      	adds	r3, #4
 80247b2:	2b06      	cmp	r3, #6
 80247b4:	d902      	bls.n	80247bc <NVIC_EncodePriority+0x30>
 80247b6:	69fb      	ldr	r3, [r7, #28]
 80247b8:	3b03      	subs	r3, #3
 80247ba:	e000      	b.n	80247be <NVIC_EncodePriority+0x32>
 80247bc:	2300      	movs	r3, #0
 80247be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80247c0:	f04f 32ff 	mov.w	r2, #4294967295
 80247c4:	69bb      	ldr	r3, [r7, #24]
 80247c6:	fa02 f303 	lsl.w	r3, r2, r3
 80247ca:	43da      	mvns	r2, r3
 80247cc:	68bb      	ldr	r3, [r7, #8]
 80247ce:	401a      	ands	r2, r3
 80247d0:	697b      	ldr	r3, [r7, #20]
 80247d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80247d4:	f04f 31ff 	mov.w	r1, #4294967295
 80247d8:	697b      	ldr	r3, [r7, #20]
 80247da:	fa01 f303 	lsl.w	r3, r1, r3
 80247de:	43d9      	mvns	r1, r3
 80247e0:	687b      	ldr	r3, [r7, #4]
 80247e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80247e4:	4313      	orrs	r3, r2
         );
}
 80247e6:	4618      	mov	r0, r3
 80247e8:	3724      	adds	r7, #36	; 0x24
 80247ea:	46bd      	mov	sp, r7
 80247ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247f0:	4770      	bx	lr

080247f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80247f2:	b580      	push	{r7, lr}
 80247f4:	b082      	sub	sp, #8
 80247f6:	af00      	add	r7, sp, #0
 80247f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80247fa:	6878      	ldr	r0, [r7, #4]
 80247fc:	f7ff ff4c 	bl	8024698 <__NVIC_SetPriorityGrouping>
}
 8024800:	bf00      	nop
 8024802:	3708      	adds	r7, #8
 8024804:	46bd      	mov	sp, r7
 8024806:	bd80      	pop	{r7, pc}

08024808 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8024808:	b580      	push	{r7, lr}
 802480a:	b086      	sub	sp, #24
 802480c:	af00      	add	r7, sp, #0
 802480e:	4603      	mov	r3, r0
 8024810:	60b9      	str	r1, [r7, #8]
 8024812:	607a      	str	r2, [r7, #4]
 8024814:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8024816:	2300      	movs	r3, #0
 8024818:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 802481a:	f7ff ff61 	bl	80246e0 <__NVIC_GetPriorityGrouping>
 802481e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8024820:	687a      	ldr	r2, [r7, #4]
 8024822:	68b9      	ldr	r1, [r7, #8]
 8024824:	6978      	ldr	r0, [r7, #20]
 8024826:	f7ff ffb1 	bl	802478c <NVIC_EncodePriority>
 802482a:	4602      	mov	r2, r0
 802482c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8024830:	4611      	mov	r1, r2
 8024832:	4618      	mov	r0, r3
 8024834:	f7ff ff80 	bl	8024738 <__NVIC_SetPriority>
}
 8024838:	bf00      	nop
 802483a:	3718      	adds	r7, #24
 802483c:	46bd      	mov	sp, r7
 802483e:	bd80      	pop	{r7, pc}

08024840 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8024840:	b580      	push	{r7, lr}
 8024842:	b082      	sub	sp, #8
 8024844:	af00      	add	r7, sp, #0
 8024846:	4603      	mov	r3, r0
 8024848:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802484a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802484e:	4618      	mov	r0, r3
 8024850:	f7ff ff54 	bl	80246fc <__NVIC_EnableIRQ>
}
 8024854:	bf00      	nop
 8024856:	3708      	adds	r7, #8
 8024858:	46bd      	mov	sp, r7
 802485a:	bd80      	pop	{r7, pc}

0802485c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802485c:	b580      	push	{r7, lr}
 802485e:	b086      	sub	sp, #24
 8024860:	af00      	add	r7, sp, #0
 8024862:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8024864:	2300      	movs	r3, #0
 8024866:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8024868:	f7fe fac4 	bl	8022df4 <HAL_GetTick>
 802486c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802486e:	687b      	ldr	r3, [r7, #4]
 8024870:	2b00      	cmp	r3, #0
 8024872:	d101      	bne.n	8024878 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8024874:	2301      	movs	r3, #1
 8024876:	e099      	b.n	80249ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8024878:	687b      	ldr	r3, [r7, #4]
 802487a:	2202      	movs	r2, #2
 802487c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8024880:	687b      	ldr	r3, [r7, #4]
 8024882:	2200      	movs	r2, #0
 8024884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8024888:	687b      	ldr	r3, [r7, #4]
 802488a:	681b      	ldr	r3, [r3, #0]
 802488c:	681a      	ldr	r2, [r3, #0]
 802488e:	687b      	ldr	r3, [r7, #4]
 8024890:	681b      	ldr	r3, [r3, #0]
 8024892:	f022 0201 	bic.w	r2, r2, #1
 8024896:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8024898:	e00f      	b.n	80248ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802489a:	f7fe faab 	bl	8022df4 <HAL_GetTick>
 802489e:	4602      	mov	r2, r0
 80248a0:	693b      	ldr	r3, [r7, #16]
 80248a2:	1ad3      	subs	r3, r2, r3
 80248a4:	2b05      	cmp	r3, #5
 80248a6:	d908      	bls.n	80248ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80248a8:	687b      	ldr	r3, [r7, #4]
 80248aa:	2220      	movs	r2, #32
 80248ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80248ae:	687b      	ldr	r3, [r7, #4]
 80248b0:	2203      	movs	r2, #3
 80248b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80248b6:	2303      	movs	r3, #3
 80248b8:	e078      	b.n	80249ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80248ba:	687b      	ldr	r3, [r7, #4]
 80248bc:	681b      	ldr	r3, [r3, #0]
 80248be:	681b      	ldr	r3, [r3, #0]
 80248c0:	f003 0301 	and.w	r3, r3, #1
 80248c4:	2b00      	cmp	r3, #0
 80248c6:	d1e8      	bne.n	802489a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80248c8:	687b      	ldr	r3, [r7, #4]
 80248ca:	681b      	ldr	r3, [r3, #0]
 80248cc:	681b      	ldr	r3, [r3, #0]
 80248ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80248d0:	697a      	ldr	r2, [r7, #20]
 80248d2:	4b38      	ldr	r3, [pc, #224]	; (80249b4 <HAL_DMA_Init+0x158>)
 80248d4:	4013      	ands	r3, r2
 80248d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80248d8:	687b      	ldr	r3, [r7, #4]
 80248da:	685a      	ldr	r2, [r3, #4]
 80248dc:	687b      	ldr	r3, [r7, #4]
 80248de:	689b      	ldr	r3, [r3, #8]
 80248e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80248e2:	687b      	ldr	r3, [r7, #4]
 80248e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80248e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80248e8:	687b      	ldr	r3, [r7, #4]
 80248ea:	691b      	ldr	r3, [r3, #16]
 80248ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80248ee:	687b      	ldr	r3, [r7, #4]
 80248f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80248f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80248f4:	687b      	ldr	r3, [r7, #4]
 80248f6:	699b      	ldr	r3, [r3, #24]
 80248f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80248fa:	687b      	ldr	r3, [r7, #4]
 80248fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80248fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8024900:	687b      	ldr	r3, [r7, #4]
 8024902:	6a1b      	ldr	r3, [r3, #32]
 8024904:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8024906:	697a      	ldr	r2, [r7, #20]
 8024908:	4313      	orrs	r3, r2
 802490a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802490c:	687b      	ldr	r3, [r7, #4]
 802490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024910:	2b04      	cmp	r3, #4
 8024912:	d107      	bne.n	8024924 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8024914:	687b      	ldr	r3, [r7, #4]
 8024916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024918:	687b      	ldr	r3, [r7, #4]
 802491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802491c:	4313      	orrs	r3, r2
 802491e:	697a      	ldr	r2, [r7, #20]
 8024920:	4313      	orrs	r3, r2
 8024922:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8024924:	687b      	ldr	r3, [r7, #4]
 8024926:	681b      	ldr	r3, [r3, #0]
 8024928:	697a      	ldr	r2, [r7, #20]
 802492a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 802492c:	687b      	ldr	r3, [r7, #4]
 802492e:	681b      	ldr	r3, [r3, #0]
 8024930:	695b      	ldr	r3, [r3, #20]
 8024932:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8024934:	697b      	ldr	r3, [r7, #20]
 8024936:	f023 0307 	bic.w	r3, r3, #7
 802493a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 802493c:	687b      	ldr	r3, [r7, #4]
 802493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024940:	697a      	ldr	r2, [r7, #20]
 8024942:	4313      	orrs	r3, r2
 8024944:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8024946:	687b      	ldr	r3, [r7, #4]
 8024948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802494a:	2b04      	cmp	r3, #4
 802494c:	d117      	bne.n	802497e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 802494e:	687b      	ldr	r3, [r7, #4]
 8024950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024952:	697a      	ldr	r2, [r7, #20]
 8024954:	4313      	orrs	r3, r2
 8024956:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8024958:	687b      	ldr	r3, [r7, #4]
 802495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802495c:	2b00      	cmp	r3, #0
 802495e:	d00e      	beq.n	802497e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8024960:	6878      	ldr	r0, [r7, #4]
 8024962:	f000 fa6f 	bl	8024e44 <DMA_CheckFifoParam>
 8024966:	4603      	mov	r3, r0
 8024968:	2b00      	cmp	r3, #0
 802496a:	d008      	beq.n	802497e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802496c:	687b      	ldr	r3, [r7, #4]
 802496e:	2240      	movs	r2, #64	; 0x40
 8024970:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8024972:	687b      	ldr	r3, [r7, #4]
 8024974:	2201      	movs	r2, #1
 8024976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 802497a:	2301      	movs	r3, #1
 802497c:	e016      	b.n	80249ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 802497e:	687b      	ldr	r3, [r7, #4]
 8024980:	681b      	ldr	r3, [r3, #0]
 8024982:	697a      	ldr	r2, [r7, #20]
 8024984:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8024986:	6878      	ldr	r0, [r7, #4]
 8024988:	f000 fa26 	bl	8024dd8 <DMA_CalcBaseAndBitshift>
 802498c:	4603      	mov	r3, r0
 802498e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8024990:	687b      	ldr	r3, [r7, #4]
 8024992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024994:	223f      	movs	r2, #63	; 0x3f
 8024996:	409a      	lsls	r2, r3
 8024998:	68fb      	ldr	r3, [r7, #12]
 802499a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802499c:	687b      	ldr	r3, [r7, #4]
 802499e:	2200      	movs	r2, #0
 80249a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80249a2:	687b      	ldr	r3, [r7, #4]
 80249a4:	2201      	movs	r2, #1
 80249a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80249aa:	2300      	movs	r3, #0
}
 80249ac:	4618      	mov	r0, r3
 80249ae:	3718      	adds	r7, #24
 80249b0:	46bd      	mov	sp, r7
 80249b2:	bd80      	pop	{r7, pc}
 80249b4:	f010803f 	.word	0xf010803f

080249b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80249b8:	b580      	push	{r7, lr}
 80249ba:	b086      	sub	sp, #24
 80249bc:	af00      	add	r7, sp, #0
 80249be:	60f8      	str	r0, [r7, #12]
 80249c0:	60b9      	str	r1, [r7, #8]
 80249c2:	607a      	str	r2, [r7, #4]
 80249c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80249c6:	2300      	movs	r3, #0
 80249c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80249ca:	68fb      	ldr	r3, [r7, #12]
 80249cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80249ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80249d0:	68fb      	ldr	r3, [r7, #12]
 80249d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80249d6:	2b01      	cmp	r3, #1
 80249d8:	d101      	bne.n	80249de <HAL_DMA_Start_IT+0x26>
 80249da:	2302      	movs	r3, #2
 80249dc:	e040      	b.n	8024a60 <HAL_DMA_Start_IT+0xa8>
 80249de:	68fb      	ldr	r3, [r7, #12]
 80249e0:	2201      	movs	r2, #1
 80249e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80249e6:	68fb      	ldr	r3, [r7, #12]
 80249e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80249ec:	b2db      	uxtb	r3, r3
 80249ee:	2b01      	cmp	r3, #1
 80249f0:	d12f      	bne.n	8024a52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80249f2:	68fb      	ldr	r3, [r7, #12]
 80249f4:	2202      	movs	r2, #2
 80249f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80249fa:	68fb      	ldr	r3, [r7, #12]
 80249fc:	2200      	movs	r2, #0
 80249fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8024a00:	683b      	ldr	r3, [r7, #0]
 8024a02:	687a      	ldr	r2, [r7, #4]
 8024a04:	68b9      	ldr	r1, [r7, #8]
 8024a06:	68f8      	ldr	r0, [r7, #12]
 8024a08:	f000 f9b8 	bl	8024d7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8024a0c:	68fb      	ldr	r3, [r7, #12]
 8024a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024a10:	223f      	movs	r2, #63	; 0x3f
 8024a12:	409a      	lsls	r2, r3
 8024a14:	693b      	ldr	r3, [r7, #16]
 8024a16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8024a18:	68fb      	ldr	r3, [r7, #12]
 8024a1a:	681b      	ldr	r3, [r3, #0]
 8024a1c:	681a      	ldr	r2, [r3, #0]
 8024a1e:	68fb      	ldr	r3, [r7, #12]
 8024a20:	681b      	ldr	r3, [r3, #0]
 8024a22:	f042 0216 	orr.w	r2, r2, #22
 8024a26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8024a28:	68fb      	ldr	r3, [r7, #12]
 8024a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a2c:	2b00      	cmp	r3, #0
 8024a2e:	d007      	beq.n	8024a40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8024a30:	68fb      	ldr	r3, [r7, #12]
 8024a32:	681b      	ldr	r3, [r3, #0]
 8024a34:	681a      	ldr	r2, [r3, #0]
 8024a36:	68fb      	ldr	r3, [r7, #12]
 8024a38:	681b      	ldr	r3, [r3, #0]
 8024a3a:	f042 0208 	orr.w	r2, r2, #8
 8024a3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8024a40:	68fb      	ldr	r3, [r7, #12]
 8024a42:	681b      	ldr	r3, [r3, #0]
 8024a44:	681a      	ldr	r2, [r3, #0]
 8024a46:	68fb      	ldr	r3, [r7, #12]
 8024a48:	681b      	ldr	r3, [r3, #0]
 8024a4a:	f042 0201 	orr.w	r2, r2, #1
 8024a4e:	601a      	str	r2, [r3, #0]
 8024a50:	e005      	b.n	8024a5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8024a52:	68fb      	ldr	r3, [r7, #12]
 8024a54:	2200      	movs	r2, #0
 8024a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8024a5a:	2302      	movs	r3, #2
 8024a5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8024a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8024a60:	4618      	mov	r0, r3
 8024a62:	3718      	adds	r7, #24
 8024a64:	46bd      	mov	sp, r7
 8024a66:	bd80      	pop	{r7, pc}

08024a68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8024a68:	b580      	push	{r7, lr}
 8024a6a:	b086      	sub	sp, #24
 8024a6c:	af00      	add	r7, sp, #0
 8024a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8024a70:	2300      	movs	r3, #0
 8024a72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8024a74:	4b92      	ldr	r3, [pc, #584]	; (8024cc0 <HAL_DMA_IRQHandler+0x258>)
 8024a76:	681b      	ldr	r3, [r3, #0]
 8024a78:	4a92      	ldr	r2, [pc, #584]	; (8024cc4 <HAL_DMA_IRQHandler+0x25c>)
 8024a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8024a7e:	0a9b      	lsrs	r3, r3, #10
 8024a80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8024a82:	687b      	ldr	r3, [r7, #4]
 8024a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024a86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8024a88:	693b      	ldr	r3, [r7, #16]
 8024a8a:	681b      	ldr	r3, [r3, #0]
 8024a8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8024a8e:	687b      	ldr	r3, [r7, #4]
 8024a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024a92:	2208      	movs	r2, #8
 8024a94:	409a      	lsls	r2, r3
 8024a96:	68fb      	ldr	r3, [r7, #12]
 8024a98:	4013      	ands	r3, r2
 8024a9a:	2b00      	cmp	r3, #0
 8024a9c:	d01a      	beq.n	8024ad4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8024a9e:	687b      	ldr	r3, [r7, #4]
 8024aa0:	681b      	ldr	r3, [r3, #0]
 8024aa2:	681b      	ldr	r3, [r3, #0]
 8024aa4:	f003 0304 	and.w	r3, r3, #4
 8024aa8:	2b00      	cmp	r3, #0
 8024aaa:	d013      	beq.n	8024ad4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8024aac:	687b      	ldr	r3, [r7, #4]
 8024aae:	681b      	ldr	r3, [r3, #0]
 8024ab0:	681a      	ldr	r2, [r3, #0]
 8024ab2:	687b      	ldr	r3, [r7, #4]
 8024ab4:	681b      	ldr	r3, [r3, #0]
 8024ab6:	f022 0204 	bic.w	r2, r2, #4
 8024aba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8024abc:	687b      	ldr	r3, [r7, #4]
 8024abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024ac0:	2208      	movs	r2, #8
 8024ac2:	409a      	lsls	r2, r3
 8024ac4:	693b      	ldr	r3, [r7, #16]
 8024ac6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8024ac8:	687b      	ldr	r3, [r7, #4]
 8024aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024acc:	f043 0201 	orr.w	r2, r3, #1
 8024ad0:	687b      	ldr	r3, [r7, #4]
 8024ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8024ad4:	687b      	ldr	r3, [r7, #4]
 8024ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024ad8:	2201      	movs	r2, #1
 8024ada:	409a      	lsls	r2, r3
 8024adc:	68fb      	ldr	r3, [r7, #12]
 8024ade:	4013      	ands	r3, r2
 8024ae0:	2b00      	cmp	r3, #0
 8024ae2:	d012      	beq.n	8024b0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8024ae4:	687b      	ldr	r3, [r7, #4]
 8024ae6:	681b      	ldr	r3, [r3, #0]
 8024ae8:	695b      	ldr	r3, [r3, #20]
 8024aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024aee:	2b00      	cmp	r3, #0
 8024af0:	d00b      	beq.n	8024b0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8024af2:	687b      	ldr	r3, [r7, #4]
 8024af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024af6:	2201      	movs	r2, #1
 8024af8:	409a      	lsls	r2, r3
 8024afa:	693b      	ldr	r3, [r7, #16]
 8024afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8024afe:	687b      	ldr	r3, [r7, #4]
 8024b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024b02:	f043 0202 	orr.w	r2, r3, #2
 8024b06:	687b      	ldr	r3, [r7, #4]
 8024b08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8024b0a:	687b      	ldr	r3, [r7, #4]
 8024b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024b0e:	2204      	movs	r2, #4
 8024b10:	409a      	lsls	r2, r3
 8024b12:	68fb      	ldr	r3, [r7, #12]
 8024b14:	4013      	ands	r3, r2
 8024b16:	2b00      	cmp	r3, #0
 8024b18:	d012      	beq.n	8024b40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8024b1a:	687b      	ldr	r3, [r7, #4]
 8024b1c:	681b      	ldr	r3, [r3, #0]
 8024b1e:	681b      	ldr	r3, [r3, #0]
 8024b20:	f003 0302 	and.w	r3, r3, #2
 8024b24:	2b00      	cmp	r3, #0
 8024b26:	d00b      	beq.n	8024b40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8024b28:	687b      	ldr	r3, [r7, #4]
 8024b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024b2c:	2204      	movs	r2, #4
 8024b2e:	409a      	lsls	r2, r3
 8024b30:	693b      	ldr	r3, [r7, #16]
 8024b32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8024b34:	687b      	ldr	r3, [r7, #4]
 8024b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024b38:	f043 0204 	orr.w	r2, r3, #4
 8024b3c:	687b      	ldr	r3, [r7, #4]
 8024b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8024b40:	687b      	ldr	r3, [r7, #4]
 8024b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024b44:	2210      	movs	r2, #16
 8024b46:	409a      	lsls	r2, r3
 8024b48:	68fb      	ldr	r3, [r7, #12]
 8024b4a:	4013      	ands	r3, r2
 8024b4c:	2b00      	cmp	r3, #0
 8024b4e:	d043      	beq.n	8024bd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8024b50:	687b      	ldr	r3, [r7, #4]
 8024b52:	681b      	ldr	r3, [r3, #0]
 8024b54:	681b      	ldr	r3, [r3, #0]
 8024b56:	f003 0308 	and.w	r3, r3, #8
 8024b5a:	2b00      	cmp	r3, #0
 8024b5c:	d03c      	beq.n	8024bd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8024b5e:	687b      	ldr	r3, [r7, #4]
 8024b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024b62:	2210      	movs	r2, #16
 8024b64:	409a      	lsls	r2, r3
 8024b66:	693b      	ldr	r3, [r7, #16]
 8024b68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8024b6a:	687b      	ldr	r3, [r7, #4]
 8024b6c:	681b      	ldr	r3, [r3, #0]
 8024b6e:	681b      	ldr	r3, [r3, #0]
 8024b70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8024b74:	2b00      	cmp	r3, #0
 8024b76:	d018      	beq.n	8024baa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8024b78:	687b      	ldr	r3, [r7, #4]
 8024b7a:	681b      	ldr	r3, [r3, #0]
 8024b7c:	681b      	ldr	r3, [r3, #0]
 8024b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8024b82:	2b00      	cmp	r3, #0
 8024b84:	d108      	bne.n	8024b98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8024b86:	687b      	ldr	r3, [r7, #4]
 8024b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b8a:	2b00      	cmp	r3, #0
 8024b8c:	d024      	beq.n	8024bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8024b8e:	687b      	ldr	r3, [r7, #4]
 8024b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b92:	6878      	ldr	r0, [r7, #4]
 8024b94:	4798      	blx	r3
 8024b96:	e01f      	b.n	8024bd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8024b98:	687b      	ldr	r3, [r7, #4]
 8024b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024b9c:	2b00      	cmp	r3, #0
 8024b9e:	d01b      	beq.n	8024bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8024ba0:	687b      	ldr	r3, [r7, #4]
 8024ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024ba4:	6878      	ldr	r0, [r7, #4]
 8024ba6:	4798      	blx	r3
 8024ba8:	e016      	b.n	8024bd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8024baa:	687b      	ldr	r3, [r7, #4]
 8024bac:	681b      	ldr	r3, [r3, #0]
 8024bae:	681b      	ldr	r3, [r3, #0]
 8024bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024bb4:	2b00      	cmp	r3, #0
 8024bb6:	d107      	bne.n	8024bc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8024bb8:	687b      	ldr	r3, [r7, #4]
 8024bba:	681b      	ldr	r3, [r3, #0]
 8024bbc:	681a      	ldr	r2, [r3, #0]
 8024bbe:	687b      	ldr	r3, [r7, #4]
 8024bc0:	681b      	ldr	r3, [r3, #0]
 8024bc2:	f022 0208 	bic.w	r2, r2, #8
 8024bc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8024bc8:	687b      	ldr	r3, [r7, #4]
 8024bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024bcc:	2b00      	cmp	r3, #0
 8024bce:	d003      	beq.n	8024bd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8024bd0:	687b      	ldr	r3, [r7, #4]
 8024bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024bd4:	6878      	ldr	r0, [r7, #4]
 8024bd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8024bd8:	687b      	ldr	r3, [r7, #4]
 8024bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024bdc:	2220      	movs	r2, #32
 8024bde:	409a      	lsls	r2, r3
 8024be0:	68fb      	ldr	r3, [r7, #12]
 8024be2:	4013      	ands	r3, r2
 8024be4:	2b00      	cmp	r3, #0
 8024be6:	f000 808e 	beq.w	8024d06 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8024bea:	687b      	ldr	r3, [r7, #4]
 8024bec:	681b      	ldr	r3, [r3, #0]
 8024bee:	681b      	ldr	r3, [r3, #0]
 8024bf0:	f003 0310 	and.w	r3, r3, #16
 8024bf4:	2b00      	cmp	r3, #0
 8024bf6:	f000 8086 	beq.w	8024d06 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8024bfa:	687b      	ldr	r3, [r7, #4]
 8024bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024bfe:	2220      	movs	r2, #32
 8024c00:	409a      	lsls	r2, r3
 8024c02:	693b      	ldr	r3, [r7, #16]
 8024c04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8024c06:	687b      	ldr	r3, [r7, #4]
 8024c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8024c0c:	b2db      	uxtb	r3, r3
 8024c0e:	2b05      	cmp	r3, #5
 8024c10:	d136      	bne.n	8024c80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8024c12:	687b      	ldr	r3, [r7, #4]
 8024c14:	681b      	ldr	r3, [r3, #0]
 8024c16:	681a      	ldr	r2, [r3, #0]
 8024c18:	687b      	ldr	r3, [r7, #4]
 8024c1a:	681b      	ldr	r3, [r3, #0]
 8024c1c:	f022 0216 	bic.w	r2, r2, #22
 8024c20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8024c22:	687b      	ldr	r3, [r7, #4]
 8024c24:	681b      	ldr	r3, [r3, #0]
 8024c26:	695a      	ldr	r2, [r3, #20]
 8024c28:	687b      	ldr	r3, [r7, #4]
 8024c2a:	681b      	ldr	r3, [r3, #0]
 8024c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8024c30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8024c32:	687b      	ldr	r3, [r7, #4]
 8024c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024c36:	2b00      	cmp	r3, #0
 8024c38:	d103      	bne.n	8024c42 <HAL_DMA_IRQHandler+0x1da>
 8024c3a:	687b      	ldr	r3, [r7, #4]
 8024c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024c3e:	2b00      	cmp	r3, #0
 8024c40:	d007      	beq.n	8024c52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8024c42:	687b      	ldr	r3, [r7, #4]
 8024c44:	681b      	ldr	r3, [r3, #0]
 8024c46:	681a      	ldr	r2, [r3, #0]
 8024c48:	687b      	ldr	r3, [r7, #4]
 8024c4a:	681b      	ldr	r3, [r3, #0]
 8024c4c:	f022 0208 	bic.w	r2, r2, #8
 8024c50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8024c52:	687b      	ldr	r3, [r7, #4]
 8024c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024c56:	223f      	movs	r2, #63	; 0x3f
 8024c58:	409a      	lsls	r2, r3
 8024c5a:	693b      	ldr	r3, [r7, #16]
 8024c5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8024c5e:	687b      	ldr	r3, [r7, #4]
 8024c60:	2201      	movs	r2, #1
 8024c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8024c66:	687b      	ldr	r3, [r7, #4]
 8024c68:	2200      	movs	r2, #0
 8024c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8024c6e:	687b      	ldr	r3, [r7, #4]
 8024c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024c72:	2b00      	cmp	r3, #0
 8024c74:	d07d      	beq.n	8024d72 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8024c76:	687b      	ldr	r3, [r7, #4]
 8024c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024c7a:	6878      	ldr	r0, [r7, #4]
 8024c7c:	4798      	blx	r3
        }
        return;
 8024c7e:	e078      	b.n	8024d72 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8024c80:	687b      	ldr	r3, [r7, #4]
 8024c82:	681b      	ldr	r3, [r3, #0]
 8024c84:	681b      	ldr	r3, [r3, #0]
 8024c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8024c8a:	2b00      	cmp	r3, #0
 8024c8c:	d01c      	beq.n	8024cc8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8024c8e:	687b      	ldr	r3, [r7, #4]
 8024c90:	681b      	ldr	r3, [r3, #0]
 8024c92:	681b      	ldr	r3, [r3, #0]
 8024c94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8024c98:	2b00      	cmp	r3, #0
 8024c9a:	d108      	bne.n	8024cae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8024c9c:	687b      	ldr	r3, [r7, #4]
 8024c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024ca0:	2b00      	cmp	r3, #0
 8024ca2:	d030      	beq.n	8024d06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8024ca4:	687b      	ldr	r3, [r7, #4]
 8024ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024ca8:	6878      	ldr	r0, [r7, #4]
 8024caa:	4798      	blx	r3
 8024cac:	e02b      	b.n	8024d06 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8024cae:	687b      	ldr	r3, [r7, #4]
 8024cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024cb2:	2b00      	cmp	r3, #0
 8024cb4:	d027      	beq.n	8024d06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8024cb6:	687b      	ldr	r3, [r7, #4]
 8024cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024cba:	6878      	ldr	r0, [r7, #4]
 8024cbc:	4798      	blx	r3
 8024cbe:	e022      	b.n	8024d06 <HAL_DMA_IRQHandler+0x29e>
 8024cc0:	20000080 	.word	0x20000080
 8024cc4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8024cc8:	687b      	ldr	r3, [r7, #4]
 8024cca:	681b      	ldr	r3, [r3, #0]
 8024ccc:	681b      	ldr	r3, [r3, #0]
 8024cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024cd2:	2b00      	cmp	r3, #0
 8024cd4:	d10f      	bne.n	8024cf6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8024cd6:	687b      	ldr	r3, [r7, #4]
 8024cd8:	681b      	ldr	r3, [r3, #0]
 8024cda:	681a      	ldr	r2, [r3, #0]
 8024cdc:	687b      	ldr	r3, [r7, #4]
 8024cde:	681b      	ldr	r3, [r3, #0]
 8024ce0:	f022 0210 	bic.w	r2, r2, #16
 8024ce4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8024ce6:	687b      	ldr	r3, [r7, #4]
 8024ce8:	2201      	movs	r2, #1
 8024cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8024cee:	687b      	ldr	r3, [r7, #4]
 8024cf0:	2200      	movs	r2, #0
 8024cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8024cf6:	687b      	ldr	r3, [r7, #4]
 8024cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024cfa:	2b00      	cmp	r3, #0
 8024cfc:	d003      	beq.n	8024d06 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8024cfe:	687b      	ldr	r3, [r7, #4]
 8024d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024d02:	6878      	ldr	r0, [r7, #4]
 8024d04:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8024d06:	687b      	ldr	r3, [r7, #4]
 8024d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024d0a:	2b00      	cmp	r3, #0
 8024d0c:	d032      	beq.n	8024d74 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8024d0e:	687b      	ldr	r3, [r7, #4]
 8024d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024d12:	f003 0301 	and.w	r3, r3, #1
 8024d16:	2b00      	cmp	r3, #0
 8024d18:	d022      	beq.n	8024d60 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8024d1a:	687b      	ldr	r3, [r7, #4]
 8024d1c:	2205      	movs	r2, #5
 8024d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8024d22:	687b      	ldr	r3, [r7, #4]
 8024d24:	681b      	ldr	r3, [r3, #0]
 8024d26:	681a      	ldr	r2, [r3, #0]
 8024d28:	687b      	ldr	r3, [r7, #4]
 8024d2a:	681b      	ldr	r3, [r3, #0]
 8024d2c:	f022 0201 	bic.w	r2, r2, #1
 8024d30:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8024d32:	68bb      	ldr	r3, [r7, #8]
 8024d34:	3301      	adds	r3, #1
 8024d36:	60bb      	str	r3, [r7, #8]
 8024d38:	697a      	ldr	r2, [r7, #20]
 8024d3a:	429a      	cmp	r2, r3
 8024d3c:	d307      	bcc.n	8024d4e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8024d3e:	687b      	ldr	r3, [r7, #4]
 8024d40:	681b      	ldr	r3, [r3, #0]
 8024d42:	681b      	ldr	r3, [r3, #0]
 8024d44:	f003 0301 	and.w	r3, r3, #1
 8024d48:	2b00      	cmp	r3, #0
 8024d4a:	d1f2      	bne.n	8024d32 <HAL_DMA_IRQHandler+0x2ca>
 8024d4c:	e000      	b.n	8024d50 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8024d4e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8024d50:	687b      	ldr	r3, [r7, #4]
 8024d52:	2201      	movs	r2, #1
 8024d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8024d58:	687b      	ldr	r3, [r7, #4]
 8024d5a:	2200      	movs	r2, #0
 8024d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8024d60:	687b      	ldr	r3, [r7, #4]
 8024d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024d64:	2b00      	cmp	r3, #0
 8024d66:	d005      	beq.n	8024d74 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8024d68:	687b      	ldr	r3, [r7, #4]
 8024d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024d6c:	6878      	ldr	r0, [r7, #4]
 8024d6e:	4798      	blx	r3
 8024d70:	e000      	b.n	8024d74 <HAL_DMA_IRQHandler+0x30c>
        return;
 8024d72:	bf00      	nop
    }
  }
}
 8024d74:	3718      	adds	r7, #24
 8024d76:	46bd      	mov	sp, r7
 8024d78:	bd80      	pop	{r7, pc}
 8024d7a:	bf00      	nop

08024d7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8024d7c:	b480      	push	{r7}
 8024d7e:	b085      	sub	sp, #20
 8024d80:	af00      	add	r7, sp, #0
 8024d82:	60f8      	str	r0, [r7, #12]
 8024d84:	60b9      	str	r1, [r7, #8]
 8024d86:	607a      	str	r2, [r7, #4]
 8024d88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8024d8a:	68fb      	ldr	r3, [r7, #12]
 8024d8c:	681b      	ldr	r3, [r3, #0]
 8024d8e:	681a      	ldr	r2, [r3, #0]
 8024d90:	68fb      	ldr	r3, [r7, #12]
 8024d92:	681b      	ldr	r3, [r3, #0]
 8024d94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8024d98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8024d9a:	68fb      	ldr	r3, [r7, #12]
 8024d9c:	681b      	ldr	r3, [r3, #0]
 8024d9e:	683a      	ldr	r2, [r7, #0]
 8024da0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8024da2:	68fb      	ldr	r3, [r7, #12]
 8024da4:	689b      	ldr	r3, [r3, #8]
 8024da6:	2b40      	cmp	r3, #64	; 0x40
 8024da8:	d108      	bne.n	8024dbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8024daa:	68fb      	ldr	r3, [r7, #12]
 8024dac:	681b      	ldr	r3, [r3, #0]
 8024dae:	687a      	ldr	r2, [r7, #4]
 8024db0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8024db2:	68fb      	ldr	r3, [r7, #12]
 8024db4:	681b      	ldr	r3, [r3, #0]
 8024db6:	68ba      	ldr	r2, [r7, #8]
 8024db8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8024dba:	e007      	b.n	8024dcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8024dbc:	68fb      	ldr	r3, [r7, #12]
 8024dbe:	681b      	ldr	r3, [r3, #0]
 8024dc0:	68ba      	ldr	r2, [r7, #8]
 8024dc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8024dc4:	68fb      	ldr	r3, [r7, #12]
 8024dc6:	681b      	ldr	r3, [r3, #0]
 8024dc8:	687a      	ldr	r2, [r7, #4]
 8024dca:	60da      	str	r2, [r3, #12]
}
 8024dcc:	bf00      	nop
 8024dce:	3714      	adds	r7, #20
 8024dd0:	46bd      	mov	sp, r7
 8024dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dd6:	4770      	bx	lr

08024dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8024dd8:	b480      	push	{r7}
 8024dda:	b085      	sub	sp, #20
 8024ddc:	af00      	add	r7, sp, #0
 8024dde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8024de0:	687b      	ldr	r3, [r7, #4]
 8024de2:	681b      	ldr	r3, [r3, #0]
 8024de4:	b2db      	uxtb	r3, r3
 8024de6:	3b10      	subs	r3, #16
 8024de8:	4a14      	ldr	r2, [pc, #80]	; (8024e3c <DMA_CalcBaseAndBitshift+0x64>)
 8024dea:	fba2 2303 	umull	r2, r3, r2, r3
 8024dee:	091b      	lsrs	r3, r3, #4
 8024df0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8024df2:	4a13      	ldr	r2, [pc, #76]	; (8024e40 <DMA_CalcBaseAndBitshift+0x68>)
 8024df4:	68fb      	ldr	r3, [r7, #12]
 8024df6:	4413      	add	r3, r2
 8024df8:	781b      	ldrb	r3, [r3, #0]
 8024dfa:	461a      	mov	r2, r3
 8024dfc:	687b      	ldr	r3, [r7, #4]
 8024dfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8024e00:	68fb      	ldr	r3, [r7, #12]
 8024e02:	2b03      	cmp	r3, #3
 8024e04:	d909      	bls.n	8024e1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8024e06:	687b      	ldr	r3, [r7, #4]
 8024e08:	681b      	ldr	r3, [r3, #0]
 8024e0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8024e0e:	f023 0303 	bic.w	r3, r3, #3
 8024e12:	1d1a      	adds	r2, r3, #4
 8024e14:	687b      	ldr	r3, [r7, #4]
 8024e16:	659a      	str	r2, [r3, #88]	; 0x58
 8024e18:	e007      	b.n	8024e2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8024e1a:	687b      	ldr	r3, [r7, #4]
 8024e1c:	681b      	ldr	r3, [r3, #0]
 8024e1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8024e22:	f023 0303 	bic.w	r3, r3, #3
 8024e26:	687a      	ldr	r2, [r7, #4]
 8024e28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8024e2a:	687b      	ldr	r3, [r7, #4]
 8024e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8024e2e:	4618      	mov	r0, r3
 8024e30:	3714      	adds	r7, #20
 8024e32:	46bd      	mov	sp, r7
 8024e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e38:	4770      	bx	lr
 8024e3a:	bf00      	nop
 8024e3c:	aaaaaaab 	.word	0xaaaaaaab
 8024e40:	0802e080 	.word	0x0802e080

08024e44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8024e44:	b480      	push	{r7}
 8024e46:	b085      	sub	sp, #20
 8024e48:	af00      	add	r7, sp, #0
 8024e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8024e4c:	2300      	movs	r3, #0
 8024e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8024e50:	687b      	ldr	r3, [r7, #4]
 8024e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024e54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8024e56:	687b      	ldr	r3, [r7, #4]
 8024e58:	699b      	ldr	r3, [r3, #24]
 8024e5a:	2b00      	cmp	r3, #0
 8024e5c:	d11f      	bne.n	8024e9e <DMA_CheckFifoParam+0x5a>
 8024e5e:	68bb      	ldr	r3, [r7, #8]
 8024e60:	2b03      	cmp	r3, #3
 8024e62:	d856      	bhi.n	8024f12 <DMA_CheckFifoParam+0xce>
 8024e64:	a201      	add	r2, pc, #4	; (adr r2, 8024e6c <DMA_CheckFifoParam+0x28>)
 8024e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024e6a:	bf00      	nop
 8024e6c:	08024e7d 	.word	0x08024e7d
 8024e70:	08024e8f 	.word	0x08024e8f
 8024e74:	08024e7d 	.word	0x08024e7d
 8024e78:	08024f13 	.word	0x08024f13
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8024e7c:	687b      	ldr	r3, [r7, #4]
 8024e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024e84:	2b00      	cmp	r3, #0
 8024e86:	d046      	beq.n	8024f16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8024e88:	2301      	movs	r3, #1
 8024e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8024e8c:	e043      	b.n	8024f16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8024e8e:	687b      	ldr	r3, [r7, #4]
 8024e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024e92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8024e96:	d140      	bne.n	8024f1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8024e98:	2301      	movs	r3, #1
 8024e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8024e9c:	e03d      	b.n	8024f1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8024e9e:	687b      	ldr	r3, [r7, #4]
 8024ea0:	699b      	ldr	r3, [r3, #24]
 8024ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8024ea6:	d121      	bne.n	8024eec <DMA_CheckFifoParam+0xa8>
 8024ea8:	68bb      	ldr	r3, [r7, #8]
 8024eaa:	2b03      	cmp	r3, #3
 8024eac:	d837      	bhi.n	8024f1e <DMA_CheckFifoParam+0xda>
 8024eae:	a201      	add	r2, pc, #4	; (adr r2, 8024eb4 <DMA_CheckFifoParam+0x70>)
 8024eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024eb4:	08024ec5 	.word	0x08024ec5
 8024eb8:	08024ecb 	.word	0x08024ecb
 8024ebc:	08024ec5 	.word	0x08024ec5
 8024ec0:	08024edd 	.word	0x08024edd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8024ec4:	2301      	movs	r3, #1
 8024ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8024ec8:	e030      	b.n	8024f2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8024eca:	687b      	ldr	r3, [r7, #4]
 8024ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024ece:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024ed2:	2b00      	cmp	r3, #0
 8024ed4:	d025      	beq.n	8024f22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8024ed6:	2301      	movs	r3, #1
 8024ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8024eda:	e022      	b.n	8024f22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8024edc:	687b      	ldr	r3, [r7, #4]
 8024ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024ee0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8024ee4:	d11f      	bne.n	8024f26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8024ee6:	2301      	movs	r3, #1
 8024ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8024eea:	e01c      	b.n	8024f26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8024eec:	68bb      	ldr	r3, [r7, #8]
 8024eee:	2b02      	cmp	r3, #2
 8024ef0:	d903      	bls.n	8024efa <DMA_CheckFifoParam+0xb6>
 8024ef2:	68bb      	ldr	r3, [r7, #8]
 8024ef4:	2b03      	cmp	r3, #3
 8024ef6:	d003      	beq.n	8024f00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8024ef8:	e018      	b.n	8024f2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8024efa:	2301      	movs	r3, #1
 8024efc:	73fb      	strb	r3, [r7, #15]
      break;
 8024efe:	e015      	b.n	8024f2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8024f00:	687b      	ldr	r3, [r7, #4]
 8024f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024f08:	2b00      	cmp	r3, #0
 8024f0a:	d00e      	beq.n	8024f2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8024f0c:	2301      	movs	r3, #1
 8024f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8024f10:	e00b      	b.n	8024f2a <DMA_CheckFifoParam+0xe6>
      break;
 8024f12:	bf00      	nop
 8024f14:	e00a      	b.n	8024f2c <DMA_CheckFifoParam+0xe8>
      break;
 8024f16:	bf00      	nop
 8024f18:	e008      	b.n	8024f2c <DMA_CheckFifoParam+0xe8>
      break;
 8024f1a:	bf00      	nop
 8024f1c:	e006      	b.n	8024f2c <DMA_CheckFifoParam+0xe8>
      break;
 8024f1e:	bf00      	nop
 8024f20:	e004      	b.n	8024f2c <DMA_CheckFifoParam+0xe8>
      break;
 8024f22:	bf00      	nop
 8024f24:	e002      	b.n	8024f2c <DMA_CheckFifoParam+0xe8>
      break;   
 8024f26:	bf00      	nop
 8024f28:	e000      	b.n	8024f2c <DMA_CheckFifoParam+0xe8>
      break;
 8024f2a:	bf00      	nop
    }
  } 
  
  return status; 
 8024f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8024f2e:	4618      	mov	r0, r3
 8024f30:	3714      	adds	r7, #20
 8024f32:	46bd      	mov	sp, r7
 8024f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f38:	4770      	bx	lr
 8024f3a:	bf00      	nop

08024f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8024f3c:	b480      	push	{r7}
 8024f3e:	b089      	sub	sp, #36	; 0x24
 8024f40:	af00      	add	r7, sp, #0
 8024f42:	6078      	str	r0, [r7, #4]
 8024f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024f46:	2300      	movs	r3, #0
 8024f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8024f4a:	2300      	movs	r3, #0
 8024f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8024f4e:	2300      	movs	r3, #0
 8024f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024f52:	2300      	movs	r3, #0
 8024f54:	61fb      	str	r3, [r7, #28]
 8024f56:	e16b      	b.n	8025230 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024f58:	2201      	movs	r2, #1
 8024f5a:	69fb      	ldr	r3, [r7, #28]
 8024f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8024f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8024f62:	683b      	ldr	r3, [r7, #0]
 8024f64:	681b      	ldr	r3, [r3, #0]
 8024f66:	697a      	ldr	r2, [r7, #20]
 8024f68:	4013      	ands	r3, r2
 8024f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8024f6c:	693a      	ldr	r2, [r7, #16]
 8024f6e:	697b      	ldr	r3, [r7, #20]
 8024f70:	429a      	cmp	r2, r3
 8024f72:	f040 815a 	bne.w	802522a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8024f76:	683b      	ldr	r3, [r7, #0]
 8024f78:	685b      	ldr	r3, [r3, #4]
 8024f7a:	f003 0303 	and.w	r3, r3, #3
 8024f7e:	2b01      	cmp	r3, #1
 8024f80:	d005      	beq.n	8024f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8024f82:	683b      	ldr	r3, [r7, #0]
 8024f84:	685b      	ldr	r3, [r3, #4]
 8024f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8024f8a:	2b02      	cmp	r3, #2
 8024f8c:	d130      	bne.n	8024ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8024f8e:	687b      	ldr	r3, [r7, #4]
 8024f90:	689b      	ldr	r3, [r3, #8]
 8024f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024f94:	69fb      	ldr	r3, [r7, #28]
 8024f96:	005b      	lsls	r3, r3, #1
 8024f98:	2203      	movs	r2, #3
 8024f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8024f9e:	43db      	mvns	r3, r3
 8024fa0:	69ba      	ldr	r2, [r7, #24]
 8024fa2:	4013      	ands	r3, r2
 8024fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8024fa6:	683b      	ldr	r3, [r7, #0]
 8024fa8:	68da      	ldr	r2, [r3, #12]
 8024faa:	69fb      	ldr	r3, [r7, #28]
 8024fac:	005b      	lsls	r3, r3, #1
 8024fae:	fa02 f303 	lsl.w	r3, r2, r3
 8024fb2:	69ba      	ldr	r2, [r7, #24]
 8024fb4:	4313      	orrs	r3, r2
 8024fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8024fb8:	687b      	ldr	r3, [r7, #4]
 8024fba:	69ba      	ldr	r2, [r7, #24]
 8024fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8024fbe:	687b      	ldr	r3, [r7, #4]
 8024fc0:	685b      	ldr	r3, [r3, #4]
 8024fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024fc4:	2201      	movs	r2, #1
 8024fc6:	69fb      	ldr	r3, [r7, #28]
 8024fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8024fcc:	43db      	mvns	r3, r3
 8024fce:	69ba      	ldr	r2, [r7, #24]
 8024fd0:	4013      	ands	r3, r2
 8024fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8024fd4:	683b      	ldr	r3, [r7, #0]
 8024fd6:	685b      	ldr	r3, [r3, #4]
 8024fd8:	091b      	lsrs	r3, r3, #4
 8024fda:	f003 0201 	and.w	r2, r3, #1
 8024fde:	69fb      	ldr	r3, [r7, #28]
 8024fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8024fe4:	69ba      	ldr	r2, [r7, #24]
 8024fe6:	4313      	orrs	r3, r2
 8024fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8024fea:	687b      	ldr	r3, [r7, #4]
 8024fec:	69ba      	ldr	r2, [r7, #24]
 8024fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8024ff0:	683b      	ldr	r3, [r7, #0]
 8024ff2:	685b      	ldr	r3, [r3, #4]
 8024ff4:	f003 0303 	and.w	r3, r3, #3
 8024ff8:	2b03      	cmp	r3, #3
 8024ffa:	d017      	beq.n	802502c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8024ffc:	687b      	ldr	r3, [r7, #4]
 8024ffe:	68db      	ldr	r3, [r3, #12]
 8025000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8025002:	69fb      	ldr	r3, [r7, #28]
 8025004:	005b      	lsls	r3, r3, #1
 8025006:	2203      	movs	r2, #3
 8025008:	fa02 f303 	lsl.w	r3, r2, r3
 802500c:	43db      	mvns	r3, r3
 802500e:	69ba      	ldr	r2, [r7, #24]
 8025010:	4013      	ands	r3, r2
 8025012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8025014:	683b      	ldr	r3, [r7, #0]
 8025016:	689a      	ldr	r2, [r3, #8]
 8025018:	69fb      	ldr	r3, [r7, #28]
 802501a:	005b      	lsls	r3, r3, #1
 802501c:	fa02 f303 	lsl.w	r3, r2, r3
 8025020:	69ba      	ldr	r2, [r7, #24]
 8025022:	4313      	orrs	r3, r2
 8025024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8025026:	687b      	ldr	r3, [r7, #4]
 8025028:	69ba      	ldr	r2, [r7, #24]
 802502a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802502c:	683b      	ldr	r3, [r7, #0]
 802502e:	685b      	ldr	r3, [r3, #4]
 8025030:	f003 0303 	and.w	r3, r3, #3
 8025034:	2b02      	cmp	r3, #2
 8025036:	d123      	bne.n	8025080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8025038:	69fb      	ldr	r3, [r7, #28]
 802503a:	08da      	lsrs	r2, r3, #3
 802503c:	687b      	ldr	r3, [r7, #4]
 802503e:	3208      	adds	r2, #8
 8025040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8025046:	69fb      	ldr	r3, [r7, #28]
 8025048:	f003 0307 	and.w	r3, r3, #7
 802504c:	009b      	lsls	r3, r3, #2
 802504e:	220f      	movs	r2, #15
 8025050:	fa02 f303 	lsl.w	r3, r2, r3
 8025054:	43db      	mvns	r3, r3
 8025056:	69ba      	ldr	r2, [r7, #24]
 8025058:	4013      	ands	r3, r2
 802505a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 802505c:	683b      	ldr	r3, [r7, #0]
 802505e:	691a      	ldr	r2, [r3, #16]
 8025060:	69fb      	ldr	r3, [r7, #28]
 8025062:	f003 0307 	and.w	r3, r3, #7
 8025066:	009b      	lsls	r3, r3, #2
 8025068:	fa02 f303 	lsl.w	r3, r2, r3
 802506c:	69ba      	ldr	r2, [r7, #24]
 802506e:	4313      	orrs	r3, r2
 8025070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8025072:	69fb      	ldr	r3, [r7, #28]
 8025074:	08da      	lsrs	r2, r3, #3
 8025076:	687b      	ldr	r3, [r7, #4]
 8025078:	3208      	adds	r2, #8
 802507a:	69b9      	ldr	r1, [r7, #24]
 802507c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8025080:	687b      	ldr	r3, [r7, #4]
 8025082:	681b      	ldr	r3, [r3, #0]
 8025084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8025086:	69fb      	ldr	r3, [r7, #28]
 8025088:	005b      	lsls	r3, r3, #1
 802508a:	2203      	movs	r2, #3
 802508c:	fa02 f303 	lsl.w	r3, r2, r3
 8025090:	43db      	mvns	r3, r3
 8025092:	69ba      	ldr	r2, [r7, #24]
 8025094:	4013      	ands	r3, r2
 8025096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8025098:	683b      	ldr	r3, [r7, #0]
 802509a:	685b      	ldr	r3, [r3, #4]
 802509c:	f003 0203 	and.w	r2, r3, #3
 80250a0:	69fb      	ldr	r3, [r7, #28]
 80250a2:	005b      	lsls	r3, r3, #1
 80250a4:	fa02 f303 	lsl.w	r3, r2, r3
 80250a8:	69ba      	ldr	r2, [r7, #24]
 80250aa:	4313      	orrs	r3, r2
 80250ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80250ae:	687b      	ldr	r3, [r7, #4]
 80250b0:	69ba      	ldr	r2, [r7, #24]
 80250b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80250b4:	683b      	ldr	r3, [r7, #0]
 80250b6:	685b      	ldr	r3, [r3, #4]
 80250b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80250bc:	2b00      	cmp	r3, #0
 80250be:	f000 80b4 	beq.w	802522a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80250c2:	2300      	movs	r3, #0
 80250c4:	60fb      	str	r3, [r7, #12]
 80250c6:	4b60      	ldr	r3, [pc, #384]	; (8025248 <HAL_GPIO_Init+0x30c>)
 80250c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80250ca:	4a5f      	ldr	r2, [pc, #380]	; (8025248 <HAL_GPIO_Init+0x30c>)
 80250cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80250d0:	6453      	str	r3, [r2, #68]	; 0x44
 80250d2:	4b5d      	ldr	r3, [pc, #372]	; (8025248 <HAL_GPIO_Init+0x30c>)
 80250d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80250d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80250da:	60fb      	str	r3, [r7, #12]
 80250dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80250de:	4a5b      	ldr	r2, [pc, #364]	; (802524c <HAL_GPIO_Init+0x310>)
 80250e0:	69fb      	ldr	r3, [r7, #28]
 80250e2:	089b      	lsrs	r3, r3, #2
 80250e4:	3302      	adds	r3, #2
 80250e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80250ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80250ec:	69fb      	ldr	r3, [r7, #28]
 80250ee:	f003 0303 	and.w	r3, r3, #3
 80250f2:	009b      	lsls	r3, r3, #2
 80250f4:	220f      	movs	r2, #15
 80250f6:	fa02 f303 	lsl.w	r3, r2, r3
 80250fa:	43db      	mvns	r3, r3
 80250fc:	69ba      	ldr	r2, [r7, #24]
 80250fe:	4013      	ands	r3, r2
 8025100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8025102:	687b      	ldr	r3, [r7, #4]
 8025104:	4a52      	ldr	r2, [pc, #328]	; (8025250 <HAL_GPIO_Init+0x314>)
 8025106:	4293      	cmp	r3, r2
 8025108:	d02b      	beq.n	8025162 <HAL_GPIO_Init+0x226>
 802510a:	687b      	ldr	r3, [r7, #4]
 802510c:	4a51      	ldr	r2, [pc, #324]	; (8025254 <HAL_GPIO_Init+0x318>)
 802510e:	4293      	cmp	r3, r2
 8025110:	d025      	beq.n	802515e <HAL_GPIO_Init+0x222>
 8025112:	687b      	ldr	r3, [r7, #4]
 8025114:	4a50      	ldr	r2, [pc, #320]	; (8025258 <HAL_GPIO_Init+0x31c>)
 8025116:	4293      	cmp	r3, r2
 8025118:	d01f      	beq.n	802515a <HAL_GPIO_Init+0x21e>
 802511a:	687b      	ldr	r3, [r7, #4]
 802511c:	4a4f      	ldr	r2, [pc, #316]	; (802525c <HAL_GPIO_Init+0x320>)
 802511e:	4293      	cmp	r3, r2
 8025120:	d019      	beq.n	8025156 <HAL_GPIO_Init+0x21a>
 8025122:	687b      	ldr	r3, [r7, #4]
 8025124:	4a4e      	ldr	r2, [pc, #312]	; (8025260 <HAL_GPIO_Init+0x324>)
 8025126:	4293      	cmp	r3, r2
 8025128:	d013      	beq.n	8025152 <HAL_GPIO_Init+0x216>
 802512a:	687b      	ldr	r3, [r7, #4]
 802512c:	4a4d      	ldr	r2, [pc, #308]	; (8025264 <HAL_GPIO_Init+0x328>)
 802512e:	4293      	cmp	r3, r2
 8025130:	d00d      	beq.n	802514e <HAL_GPIO_Init+0x212>
 8025132:	687b      	ldr	r3, [r7, #4]
 8025134:	4a4c      	ldr	r2, [pc, #304]	; (8025268 <HAL_GPIO_Init+0x32c>)
 8025136:	4293      	cmp	r3, r2
 8025138:	d007      	beq.n	802514a <HAL_GPIO_Init+0x20e>
 802513a:	687b      	ldr	r3, [r7, #4]
 802513c:	4a4b      	ldr	r2, [pc, #300]	; (802526c <HAL_GPIO_Init+0x330>)
 802513e:	4293      	cmp	r3, r2
 8025140:	d101      	bne.n	8025146 <HAL_GPIO_Init+0x20a>
 8025142:	2307      	movs	r3, #7
 8025144:	e00e      	b.n	8025164 <HAL_GPIO_Init+0x228>
 8025146:	2308      	movs	r3, #8
 8025148:	e00c      	b.n	8025164 <HAL_GPIO_Init+0x228>
 802514a:	2306      	movs	r3, #6
 802514c:	e00a      	b.n	8025164 <HAL_GPIO_Init+0x228>
 802514e:	2305      	movs	r3, #5
 8025150:	e008      	b.n	8025164 <HAL_GPIO_Init+0x228>
 8025152:	2304      	movs	r3, #4
 8025154:	e006      	b.n	8025164 <HAL_GPIO_Init+0x228>
 8025156:	2303      	movs	r3, #3
 8025158:	e004      	b.n	8025164 <HAL_GPIO_Init+0x228>
 802515a:	2302      	movs	r3, #2
 802515c:	e002      	b.n	8025164 <HAL_GPIO_Init+0x228>
 802515e:	2301      	movs	r3, #1
 8025160:	e000      	b.n	8025164 <HAL_GPIO_Init+0x228>
 8025162:	2300      	movs	r3, #0
 8025164:	69fa      	ldr	r2, [r7, #28]
 8025166:	f002 0203 	and.w	r2, r2, #3
 802516a:	0092      	lsls	r2, r2, #2
 802516c:	4093      	lsls	r3, r2
 802516e:	69ba      	ldr	r2, [r7, #24]
 8025170:	4313      	orrs	r3, r2
 8025172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8025174:	4935      	ldr	r1, [pc, #212]	; (802524c <HAL_GPIO_Init+0x310>)
 8025176:	69fb      	ldr	r3, [r7, #28]
 8025178:	089b      	lsrs	r3, r3, #2
 802517a:	3302      	adds	r3, #2
 802517c:	69ba      	ldr	r2, [r7, #24]
 802517e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8025182:	4b3b      	ldr	r3, [pc, #236]	; (8025270 <HAL_GPIO_Init+0x334>)
 8025184:	681b      	ldr	r3, [r3, #0]
 8025186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025188:	693b      	ldr	r3, [r7, #16]
 802518a:	43db      	mvns	r3, r3
 802518c:	69ba      	ldr	r2, [r7, #24]
 802518e:	4013      	ands	r3, r2
 8025190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8025192:	683b      	ldr	r3, [r7, #0]
 8025194:	685b      	ldr	r3, [r3, #4]
 8025196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802519a:	2b00      	cmp	r3, #0
 802519c:	d003      	beq.n	80251a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 802519e:	69ba      	ldr	r2, [r7, #24]
 80251a0:	693b      	ldr	r3, [r7, #16]
 80251a2:	4313      	orrs	r3, r2
 80251a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80251a6:	4a32      	ldr	r2, [pc, #200]	; (8025270 <HAL_GPIO_Init+0x334>)
 80251a8:	69bb      	ldr	r3, [r7, #24]
 80251aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80251ac:	4b30      	ldr	r3, [pc, #192]	; (8025270 <HAL_GPIO_Init+0x334>)
 80251ae:	685b      	ldr	r3, [r3, #4]
 80251b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80251b2:	693b      	ldr	r3, [r7, #16]
 80251b4:	43db      	mvns	r3, r3
 80251b6:	69ba      	ldr	r2, [r7, #24]
 80251b8:	4013      	ands	r3, r2
 80251ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80251bc:	683b      	ldr	r3, [r7, #0]
 80251be:	685b      	ldr	r3, [r3, #4]
 80251c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80251c4:	2b00      	cmp	r3, #0
 80251c6:	d003      	beq.n	80251d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80251c8:	69ba      	ldr	r2, [r7, #24]
 80251ca:	693b      	ldr	r3, [r7, #16]
 80251cc:	4313      	orrs	r3, r2
 80251ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80251d0:	4a27      	ldr	r2, [pc, #156]	; (8025270 <HAL_GPIO_Init+0x334>)
 80251d2:	69bb      	ldr	r3, [r7, #24]
 80251d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80251d6:	4b26      	ldr	r3, [pc, #152]	; (8025270 <HAL_GPIO_Init+0x334>)
 80251d8:	689b      	ldr	r3, [r3, #8]
 80251da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80251dc:	693b      	ldr	r3, [r7, #16]
 80251de:	43db      	mvns	r3, r3
 80251e0:	69ba      	ldr	r2, [r7, #24]
 80251e2:	4013      	ands	r3, r2
 80251e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80251e6:	683b      	ldr	r3, [r7, #0]
 80251e8:	685b      	ldr	r3, [r3, #4]
 80251ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80251ee:	2b00      	cmp	r3, #0
 80251f0:	d003      	beq.n	80251fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80251f2:	69ba      	ldr	r2, [r7, #24]
 80251f4:	693b      	ldr	r3, [r7, #16]
 80251f6:	4313      	orrs	r3, r2
 80251f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80251fa:	4a1d      	ldr	r2, [pc, #116]	; (8025270 <HAL_GPIO_Init+0x334>)
 80251fc:	69bb      	ldr	r3, [r7, #24]
 80251fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8025200:	4b1b      	ldr	r3, [pc, #108]	; (8025270 <HAL_GPIO_Init+0x334>)
 8025202:	68db      	ldr	r3, [r3, #12]
 8025204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025206:	693b      	ldr	r3, [r7, #16]
 8025208:	43db      	mvns	r3, r3
 802520a:	69ba      	ldr	r2, [r7, #24]
 802520c:	4013      	ands	r3, r2
 802520e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8025210:	683b      	ldr	r3, [r7, #0]
 8025212:	685b      	ldr	r3, [r3, #4]
 8025214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8025218:	2b00      	cmp	r3, #0
 802521a:	d003      	beq.n	8025224 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 802521c:	69ba      	ldr	r2, [r7, #24]
 802521e:	693b      	ldr	r3, [r7, #16]
 8025220:	4313      	orrs	r3, r2
 8025222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8025224:	4a12      	ldr	r2, [pc, #72]	; (8025270 <HAL_GPIO_Init+0x334>)
 8025226:	69bb      	ldr	r3, [r7, #24]
 8025228:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802522a:	69fb      	ldr	r3, [r7, #28]
 802522c:	3301      	adds	r3, #1
 802522e:	61fb      	str	r3, [r7, #28]
 8025230:	69fb      	ldr	r3, [r7, #28]
 8025232:	2b0f      	cmp	r3, #15
 8025234:	f67f ae90 	bls.w	8024f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8025238:	bf00      	nop
 802523a:	bf00      	nop
 802523c:	3724      	adds	r7, #36	; 0x24
 802523e:	46bd      	mov	sp, r7
 8025240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025244:	4770      	bx	lr
 8025246:	bf00      	nop
 8025248:	40023800 	.word	0x40023800
 802524c:	40013800 	.word	0x40013800
 8025250:	40020000 	.word	0x40020000
 8025254:	40020400 	.word	0x40020400
 8025258:	40020800 	.word	0x40020800
 802525c:	40020c00 	.word	0x40020c00
 8025260:	40021000 	.word	0x40021000
 8025264:	40021400 	.word	0x40021400
 8025268:	40021800 	.word	0x40021800
 802526c:	40021c00 	.word	0x40021c00
 8025270:	40013c00 	.word	0x40013c00

08025274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8025274:	b480      	push	{r7}
 8025276:	b085      	sub	sp, #20
 8025278:	af00      	add	r7, sp, #0
 802527a:	6078      	str	r0, [r7, #4]
 802527c:	460b      	mov	r3, r1
 802527e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8025280:	687b      	ldr	r3, [r7, #4]
 8025282:	691a      	ldr	r2, [r3, #16]
 8025284:	887b      	ldrh	r3, [r7, #2]
 8025286:	4013      	ands	r3, r2
 8025288:	2b00      	cmp	r3, #0
 802528a:	d002      	beq.n	8025292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 802528c:	2301      	movs	r3, #1
 802528e:	73fb      	strb	r3, [r7, #15]
 8025290:	e001      	b.n	8025296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8025292:	2300      	movs	r3, #0
 8025294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8025296:	7bfb      	ldrb	r3, [r7, #15]
}
 8025298:	4618      	mov	r0, r3
 802529a:	3714      	adds	r7, #20
 802529c:	46bd      	mov	sp, r7
 802529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252a2:	4770      	bx	lr

080252a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80252a4:	b480      	push	{r7}
 80252a6:	b083      	sub	sp, #12
 80252a8:	af00      	add	r7, sp, #0
 80252aa:	6078      	str	r0, [r7, #4]
 80252ac:	460b      	mov	r3, r1
 80252ae:	807b      	strh	r3, [r7, #2]
 80252b0:	4613      	mov	r3, r2
 80252b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80252b4:	787b      	ldrb	r3, [r7, #1]
 80252b6:	2b00      	cmp	r3, #0
 80252b8:	d003      	beq.n	80252c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80252ba:	887a      	ldrh	r2, [r7, #2]
 80252bc:	687b      	ldr	r3, [r7, #4]
 80252be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80252c0:	e003      	b.n	80252ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80252c2:	887b      	ldrh	r3, [r7, #2]
 80252c4:	041a      	lsls	r2, r3, #16
 80252c6:	687b      	ldr	r3, [r7, #4]
 80252c8:	619a      	str	r2, [r3, #24]
}
 80252ca:	bf00      	nop
 80252cc:	370c      	adds	r7, #12
 80252ce:	46bd      	mov	sp, r7
 80252d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252d4:	4770      	bx	lr
	...

080252d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80252d8:	b580      	push	{r7, lr}
 80252da:	b082      	sub	sp, #8
 80252dc:	af00      	add	r7, sp, #0
 80252de:	4603      	mov	r3, r0
 80252e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80252e2:	4b08      	ldr	r3, [pc, #32]	; (8025304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80252e4:	695a      	ldr	r2, [r3, #20]
 80252e6:	88fb      	ldrh	r3, [r7, #6]
 80252e8:	4013      	ands	r3, r2
 80252ea:	2b00      	cmp	r3, #0
 80252ec:	d006      	beq.n	80252fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80252ee:	4a05      	ldr	r2, [pc, #20]	; (8025304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80252f0:	88fb      	ldrh	r3, [r7, #6]
 80252f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80252f4:	88fb      	ldrh	r3, [r7, #6]
 80252f6:	4618      	mov	r0, r3
 80252f8:	f7f0 fe46 	bl	8015f88 <HAL_GPIO_EXTI_Callback>
  }
}
 80252fc:	bf00      	nop
 80252fe:	3708      	adds	r7, #8
 8025300:	46bd      	mov	sp, r7
 8025302:	bd80      	pop	{r7, pc}
 8025304:	40013c00 	.word	0x40013c00

08025308 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8025308:	b480      	push	{r7}
 802530a:	b083      	sub	sp, #12
 802530c:	af00      	add	r7, sp, #0
 802530e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8025310:	687b      	ldr	r3, [r7, #4]
 8025312:	681b      	ldr	r3, [r3, #0]
 8025314:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8025318:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 802531a:	2300      	movs	r3, #0
}
 802531c:	4618      	mov	r0, r3
 802531e:	370c      	adds	r7, #12
 8025320:	46bd      	mov	sp, r7
 8025322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025326:	4770      	bx	lr

08025328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8025328:	b580      	push	{r7, lr}
 802532a:	b086      	sub	sp, #24
 802532c:	af00      	add	r7, sp, #0
 802532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8025330:	687b      	ldr	r3, [r7, #4]
 8025332:	2b00      	cmp	r3, #0
 8025334:	d101      	bne.n	802533a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8025336:	2301      	movs	r3, #1
 8025338:	e264      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802533a:	687b      	ldr	r3, [r7, #4]
 802533c:	681b      	ldr	r3, [r3, #0]
 802533e:	f003 0301 	and.w	r3, r3, #1
 8025342:	2b00      	cmp	r3, #0
 8025344:	d075      	beq.n	8025432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8025346:	4ba3      	ldr	r3, [pc, #652]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 8025348:	689b      	ldr	r3, [r3, #8]
 802534a:	f003 030c 	and.w	r3, r3, #12
 802534e:	2b04      	cmp	r3, #4
 8025350:	d00c      	beq.n	802536c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8025352:	4ba0      	ldr	r3, [pc, #640]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 8025354:	689b      	ldr	r3, [r3, #8]
 8025356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802535a:	2b08      	cmp	r3, #8
 802535c:	d112      	bne.n	8025384 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802535e:	4b9d      	ldr	r3, [pc, #628]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 8025360:	685b      	ldr	r3, [r3, #4]
 8025362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8025366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802536a:	d10b      	bne.n	8025384 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802536c:	4b99      	ldr	r3, [pc, #612]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 802536e:	681b      	ldr	r3, [r3, #0]
 8025370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025374:	2b00      	cmp	r3, #0
 8025376:	d05b      	beq.n	8025430 <HAL_RCC_OscConfig+0x108>
 8025378:	687b      	ldr	r3, [r7, #4]
 802537a:	685b      	ldr	r3, [r3, #4]
 802537c:	2b00      	cmp	r3, #0
 802537e:	d157      	bne.n	8025430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8025380:	2301      	movs	r3, #1
 8025382:	e23f      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8025384:	687b      	ldr	r3, [r7, #4]
 8025386:	685b      	ldr	r3, [r3, #4]
 8025388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802538c:	d106      	bne.n	802539c <HAL_RCC_OscConfig+0x74>
 802538e:	4b91      	ldr	r3, [pc, #580]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 8025390:	681b      	ldr	r3, [r3, #0]
 8025392:	4a90      	ldr	r2, [pc, #576]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 8025394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8025398:	6013      	str	r3, [r2, #0]
 802539a:	e01d      	b.n	80253d8 <HAL_RCC_OscConfig+0xb0>
 802539c:	687b      	ldr	r3, [r7, #4]
 802539e:	685b      	ldr	r3, [r3, #4]
 80253a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80253a4:	d10c      	bne.n	80253c0 <HAL_RCC_OscConfig+0x98>
 80253a6:	4b8b      	ldr	r3, [pc, #556]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 80253a8:	681b      	ldr	r3, [r3, #0]
 80253aa:	4a8a      	ldr	r2, [pc, #552]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 80253ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80253b0:	6013      	str	r3, [r2, #0]
 80253b2:	4b88      	ldr	r3, [pc, #544]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 80253b4:	681b      	ldr	r3, [r3, #0]
 80253b6:	4a87      	ldr	r2, [pc, #540]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 80253b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80253bc:	6013      	str	r3, [r2, #0]
 80253be:	e00b      	b.n	80253d8 <HAL_RCC_OscConfig+0xb0>
 80253c0:	4b84      	ldr	r3, [pc, #528]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 80253c2:	681b      	ldr	r3, [r3, #0]
 80253c4:	4a83      	ldr	r2, [pc, #524]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 80253c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80253ca:	6013      	str	r3, [r2, #0]
 80253cc:	4b81      	ldr	r3, [pc, #516]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 80253ce:	681b      	ldr	r3, [r3, #0]
 80253d0:	4a80      	ldr	r2, [pc, #512]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 80253d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80253d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80253d8:	687b      	ldr	r3, [r7, #4]
 80253da:	685b      	ldr	r3, [r3, #4]
 80253dc:	2b00      	cmp	r3, #0
 80253de:	d013      	beq.n	8025408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80253e0:	f7fd fd08 	bl	8022df4 <HAL_GetTick>
 80253e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80253e6:	e008      	b.n	80253fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80253e8:	f7fd fd04 	bl	8022df4 <HAL_GetTick>
 80253ec:	4602      	mov	r2, r0
 80253ee:	693b      	ldr	r3, [r7, #16]
 80253f0:	1ad3      	subs	r3, r2, r3
 80253f2:	2b64      	cmp	r3, #100	; 0x64
 80253f4:	d901      	bls.n	80253fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80253f6:	2303      	movs	r3, #3
 80253f8:	e204      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80253fa:	4b76      	ldr	r3, [pc, #472]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 80253fc:	681b      	ldr	r3, [r3, #0]
 80253fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025402:	2b00      	cmp	r3, #0
 8025404:	d0f0      	beq.n	80253e8 <HAL_RCC_OscConfig+0xc0>
 8025406:	e014      	b.n	8025432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8025408:	f7fd fcf4 	bl	8022df4 <HAL_GetTick>
 802540c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802540e:	e008      	b.n	8025422 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8025410:	f7fd fcf0 	bl	8022df4 <HAL_GetTick>
 8025414:	4602      	mov	r2, r0
 8025416:	693b      	ldr	r3, [r7, #16]
 8025418:	1ad3      	subs	r3, r2, r3
 802541a:	2b64      	cmp	r3, #100	; 0x64
 802541c:	d901      	bls.n	8025422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802541e:	2303      	movs	r3, #3
 8025420:	e1f0      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8025422:	4b6c      	ldr	r3, [pc, #432]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 8025424:	681b      	ldr	r3, [r3, #0]
 8025426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802542a:	2b00      	cmp	r3, #0
 802542c:	d1f0      	bne.n	8025410 <HAL_RCC_OscConfig+0xe8>
 802542e:	e000      	b.n	8025432 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8025430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8025432:	687b      	ldr	r3, [r7, #4]
 8025434:	681b      	ldr	r3, [r3, #0]
 8025436:	f003 0302 	and.w	r3, r3, #2
 802543a:	2b00      	cmp	r3, #0
 802543c:	d063      	beq.n	8025506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802543e:	4b65      	ldr	r3, [pc, #404]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 8025440:	689b      	ldr	r3, [r3, #8]
 8025442:	f003 030c 	and.w	r3, r3, #12
 8025446:	2b00      	cmp	r3, #0
 8025448:	d00b      	beq.n	8025462 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802544a:	4b62      	ldr	r3, [pc, #392]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 802544c:	689b      	ldr	r3, [r3, #8]
 802544e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8025452:	2b08      	cmp	r3, #8
 8025454:	d11c      	bne.n	8025490 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8025456:	4b5f      	ldr	r3, [pc, #380]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 8025458:	685b      	ldr	r3, [r3, #4]
 802545a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802545e:	2b00      	cmp	r3, #0
 8025460:	d116      	bne.n	8025490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8025462:	4b5c      	ldr	r3, [pc, #368]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 8025464:	681b      	ldr	r3, [r3, #0]
 8025466:	f003 0302 	and.w	r3, r3, #2
 802546a:	2b00      	cmp	r3, #0
 802546c:	d005      	beq.n	802547a <HAL_RCC_OscConfig+0x152>
 802546e:	687b      	ldr	r3, [r7, #4]
 8025470:	68db      	ldr	r3, [r3, #12]
 8025472:	2b01      	cmp	r3, #1
 8025474:	d001      	beq.n	802547a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8025476:	2301      	movs	r3, #1
 8025478:	e1c4      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802547a:	4b56      	ldr	r3, [pc, #344]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 802547c:	681b      	ldr	r3, [r3, #0]
 802547e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8025482:	687b      	ldr	r3, [r7, #4]
 8025484:	691b      	ldr	r3, [r3, #16]
 8025486:	00db      	lsls	r3, r3, #3
 8025488:	4952      	ldr	r1, [pc, #328]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 802548a:	4313      	orrs	r3, r2
 802548c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802548e:	e03a      	b.n	8025506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8025490:	687b      	ldr	r3, [r7, #4]
 8025492:	68db      	ldr	r3, [r3, #12]
 8025494:	2b00      	cmp	r3, #0
 8025496:	d020      	beq.n	80254da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8025498:	4b4f      	ldr	r3, [pc, #316]	; (80255d8 <HAL_RCC_OscConfig+0x2b0>)
 802549a:	2201      	movs	r2, #1
 802549c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802549e:	f7fd fca9 	bl	8022df4 <HAL_GetTick>
 80254a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80254a4:	e008      	b.n	80254b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80254a6:	f7fd fca5 	bl	8022df4 <HAL_GetTick>
 80254aa:	4602      	mov	r2, r0
 80254ac:	693b      	ldr	r3, [r7, #16]
 80254ae:	1ad3      	subs	r3, r2, r3
 80254b0:	2b02      	cmp	r3, #2
 80254b2:	d901      	bls.n	80254b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80254b4:	2303      	movs	r3, #3
 80254b6:	e1a5      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80254b8:	4b46      	ldr	r3, [pc, #280]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 80254ba:	681b      	ldr	r3, [r3, #0]
 80254bc:	f003 0302 	and.w	r3, r3, #2
 80254c0:	2b00      	cmp	r3, #0
 80254c2:	d0f0      	beq.n	80254a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80254c4:	4b43      	ldr	r3, [pc, #268]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 80254c6:	681b      	ldr	r3, [r3, #0]
 80254c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80254cc:	687b      	ldr	r3, [r7, #4]
 80254ce:	691b      	ldr	r3, [r3, #16]
 80254d0:	00db      	lsls	r3, r3, #3
 80254d2:	4940      	ldr	r1, [pc, #256]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 80254d4:	4313      	orrs	r3, r2
 80254d6:	600b      	str	r3, [r1, #0]
 80254d8:	e015      	b.n	8025506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80254da:	4b3f      	ldr	r3, [pc, #252]	; (80255d8 <HAL_RCC_OscConfig+0x2b0>)
 80254dc:	2200      	movs	r2, #0
 80254de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80254e0:	f7fd fc88 	bl	8022df4 <HAL_GetTick>
 80254e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80254e6:	e008      	b.n	80254fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80254e8:	f7fd fc84 	bl	8022df4 <HAL_GetTick>
 80254ec:	4602      	mov	r2, r0
 80254ee:	693b      	ldr	r3, [r7, #16]
 80254f0:	1ad3      	subs	r3, r2, r3
 80254f2:	2b02      	cmp	r3, #2
 80254f4:	d901      	bls.n	80254fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80254f6:	2303      	movs	r3, #3
 80254f8:	e184      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80254fa:	4b36      	ldr	r3, [pc, #216]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 80254fc:	681b      	ldr	r3, [r3, #0]
 80254fe:	f003 0302 	and.w	r3, r3, #2
 8025502:	2b00      	cmp	r3, #0
 8025504:	d1f0      	bne.n	80254e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8025506:	687b      	ldr	r3, [r7, #4]
 8025508:	681b      	ldr	r3, [r3, #0]
 802550a:	f003 0308 	and.w	r3, r3, #8
 802550e:	2b00      	cmp	r3, #0
 8025510:	d030      	beq.n	8025574 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8025512:	687b      	ldr	r3, [r7, #4]
 8025514:	695b      	ldr	r3, [r3, #20]
 8025516:	2b00      	cmp	r3, #0
 8025518:	d016      	beq.n	8025548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802551a:	4b30      	ldr	r3, [pc, #192]	; (80255dc <HAL_RCC_OscConfig+0x2b4>)
 802551c:	2201      	movs	r2, #1
 802551e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8025520:	f7fd fc68 	bl	8022df4 <HAL_GetTick>
 8025524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8025526:	e008      	b.n	802553a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8025528:	f7fd fc64 	bl	8022df4 <HAL_GetTick>
 802552c:	4602      	mov	r2, r0
 802552e:	693b      	ldr	r3, [r7, #16]
 8025530:	1ad3      	subs	r3, r2, r3
 8025532:	2b02      	cmp	r3, #2
 8025534:	d901      	bls.n	802553a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8025536:	2303      	movs	r3, #3
 8025538:	e164      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802553a:	4b26      	ldr	r3, [pc, #152]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 802553c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802553e:	f003 0302 	and.w	r3, r3, #2
 8025542:	2b00      	cmp	r3, #0
 8025544:	d0f0      	beq.n	8025528 <HAL_RCC_OscConfig+0x200>
 8025546:	e015      	b.n	8025574 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8025548:	4b24      	ldr	r3, [pc, #144]	; (80255dc <HAL_RCC_OscConfig+0x2b4>)
 802554a:	2200      	movs	r2, #0
 802554c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802554e:	f7fd fc51 	bl	8022df4 <HAL_GetTick>
 8025552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8025554:	e008      	b.n	8025568 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8025556:	f7fd fc4d 	bl	8022df4 <HAL_GetTick>
 802555a:	4602      	mov	r2, r0
 802555c:	693b      	ldr	r3, [r7, #16]
 802555e:	1ad3      	subs	r3, r2, r3
 8025560:	2b02      	cmp	r3, #2
 8025562:	d901      	bls.n	8025568 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8025564:	2303      	movs	r3, #3
 8025566:	e14d      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8025568:	4b1a      	ldr	r3, [pc, #104]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 802556a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802556c:	f003 0302 	and.w	r3, r3, #2
 8025570:	2b00      	cmp	r3, #0
 8025572:	d1f0      	bne.n	8025556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8025574:	687b      	ldr	r3, [r7, #4]
 8025576:	681b      	ldr	r3, [r3, #0]
 8025578:	f003 0304 	and.w	r3, r3, #4
 802557c:	2b00      	cmp	r3, #0
 802557e:	f000 80a0 	beq.w	80256c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8025582:	2300      	movs	r3, #0
 8025584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8025586:	4b13      	ldr	r3, [pc, #76]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 8025588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802558a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802558e:	2b00      	cmp	r3, #0
 8025590:	d10f      	bne.n	80255b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8025592:	2300      	movs	r3, #0
 8025594:	60bb      	str	r3, [r7, #8]
 8025596:	4b0f      	ldr	r3, [pc, #60]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 8025598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802559a:	4a0e      	ldr	r2, [pc, #56]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 802559c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80255a0:	6413      	str	r3, [r2, #64]	; 0x40
 80255a2:	4b0c      	ldr	r3, [pc, #48]	; (80255d4 <HAL_RCC_OscConfig+0x2ac>)
 80255a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80255a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80255aa:	60bb      	str	r3, [r7, #8]
 80255ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80255ae:	2301      	movs	r3, #1
 80255b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80255b2:	4b0b      	ldr	r3, [pc, #44]	; (80255e0 <HAL_RCC_OscConfig+0x2b8>)
 80255b4:	681b      	ldr	r3, [r3, #0]
 80255b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80255ba:	2b00      	cmp	r3, #0
 80255bc:	d121      	bne.n	8025602 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80255be:	4b08      	ldr	r3, [pc, #32]	; (80255e0 <HAL_RCC_OscConfig+0x2b8>)
 80255c0:	681b      	ldr	r3, [r3, #0]
 80255c2:	4a07      	ldr	r2, [pc, #28]	; (80255e0 <HAL_RCC_OscConfig+0x2b8>)
 80255c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80255c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80255ca:	f7fd fc13 	bl	8022df4 <HAL_GetTick>
 80255ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80255d0:	e011      	b.n	80255f6 <HAL_RCC_OscConfig+0x2ce>
 80255d2:	bf00      	nop
 80255d4:	40023800 	.word	0x40023800
 80255d8:	42470000 	.word	0x42470000
 80255dc:	42470e80 	.word	0x42470e80
 80255e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80255e4:	f7fd fc06 	bl	8022df4 <HAL_GetTick>
 80255e8:	4602      	mov	r2, r0
 80255ea:	693b      	ldr	r3, [r7, #16]
 80255ec:	1ad3      	subs	r3, r2, r3
 80255ee:	2b02      	cmp	r3, #2
 80255f0:	d901      	bls.n	80255f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80255f2:	2303      	movs	r3, #3
 80255f4:	e106      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80255f6:	4b85      	ldr	r3, [pc, #532]	; (802580c <HAL_RCC_OscConfig+0x4e4>)
 80255f8:	681b      	ldr	r3, [r3, #0]
 80255fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80255fe:	2b00      	cmp	r3, #0
 8025600:	d0f0      	beq.n	80255e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8025602:	687b      	ldr	r3, [r7, #4]
 8025604:	689b      	ldr	r3, [r3, #8]
 8025606:	2b01      	cmp	r3, #1
 8025608:	d106      	bne.n	8025618 <HAL_RCC_OscConfig+0x2f0>
 802560a:	4b81      	ldr	r3, [pc, #516]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 802560c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802560e:	4a80      	ldr	r2, [pc, #512]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 8025610:	f043 0301 	orr.w	r3, r3, #1
 8025614:	6713      	str	r3, [r2, #112]	; 0x70
 8025616:	e01c      	b.n	8025652 <HAL_RCC_OscConfig+0x32a>
 8025618:	687b      	ldr	r3, [r7, #4]
 802561a:	689b      	ldr	r3, [r3, #8]
 802561c:	2b05      	cmp	r3, #5
 802561e:	d10c      	bne.n	802563a <HAL_RCC_OscConfig+0x312>
 8025620:	4b7b      	ldr	r3, [pc, #492]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 8025622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025624:	4a7a      	ldr	r2, [pc, #488]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 8025626:	f043 0304 	orr.w	r3, r3, #4
 802562a:	6713      	str	r3, [r2, #112]	; 0x70
 802562c:	4b78      	ldr	r3, [pc, #480]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 802562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025630:	4a77      	ldr	r2, [pc, #476]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 8025632:	f043 0301 	orr.w	r3, r3, #1
 8025636:	6713      	str	r3, [r2, #112]	; 0x70
 8025638:	e00b      	b.n	8025652 <HAL_RCC_OscConfig+0x32a>
 802563a:	4b75      	ldr	r3, [pc, #468]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 802563c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802563e:	4a74      	ldr	r2, [pc, #464]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 8025640:	f023 0301 	bic.w	r3, r3, #1
 8025644:	6713      	str	r3, [r2, #112]	; 0x70
 8025646:	4b72      	ldr	r3, [pc, #456]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 8025648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802564a:	4a71      	ldr	r2, [pc, #452]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 802564c:	f023 0304 	bic.w	r3, r3, #4
 8025650:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8025652:	687b      	ldr	r3, [r7, #4]
 8025654:	689b      	ldr	r3, [r3, #8]
 8025656:	2b00      	cmp	r3, #0
 8025658:	d015      	beq.n	8025686 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802565a:	f7fd fbcb 	bl	8022df4 <HAL_GetTick>
 802565e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8025660:	e00a      	b.n	8025678 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8025662:	f7fd fbc7 	bl	8022df4 <HAL_GetTick>
 8025666:	4602      	mov	r2, r0
 8025668:	693b      	ldr	r3, [r7, #16]
 802566a:	1ad3      	subs	r3, r2, r3
 802566c:	f241 3288 	movw	r2, #5000	; 0x1388
 8025670:	4293      	cmp	r3, r2
 8025672:	d901      	bls.n	8025678 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8025674:	2303      	movs	r3, #3
 8025676:	e0c5      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8025678:	4b65      	ldr	r3, [pc, #404]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 802567a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802567c:	f003 0302 	and.w	r3, r3, #2
 8025680:	2b00      	cmp	r3, #0
 8025682:	d0ee      	beq.n	8025662 <HAL_RCC_OscConfig+0x33a>
 8025684:	e014      	b.n	80256b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8025686:	f7fd fbb5 	bl	8022df4 <HAL_GetTick>
 802568a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802568c:	e00a      	b.n	80256a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802568e:	f7fd fbb1 	bl	8022df4 <HAL_GetTick>
 8025692:	4602      	mov	r2, r0
 8025694:	693b      	ldr	r3, [r7, #16]
 8025696:	1ad3      	subs	r3, r2, r3
 8025698:	f241 3288 	movw	r2, #5000	; 0x1388
 802569c:	4293      	cmp	r3, r2
 802569e:	d901      	bls.n	80256a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80256a0:	2303      	movs	r3, #3
 80256a2:	e0af      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80256a4:	4b5a      	ldr	r3, [pc, #360]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 80256a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80256a8:	f003 0302 	and.w	r3, r3, #2
 80256ac:	2b00      	cmp	r3, #0
 80256ae:	d1ee      	bne.n	802568e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80256b0:	7dfb      	ldrb	r3, [r7, #23]
 80256b2:	2b01      	cmp	r3, #1
 80256b4:	d105      	bne.n	80256c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80256b6:	4b56      	ldr	r3, [pc, #344]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 80256b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80256ba:	4a55      	ldr	r2, [pc, #340]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 80256bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80256c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80256c2:	687b      	ldr	r3, [r7, #4]
 80256c4:	699b      	ldr	r3, [r3, #24]
 80256c6:	2b00      	cmp	r3, #0
 80256c8:	f000 809b 	beq.w	8025802 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80256cc:	4b50      	ldr	r3, [pc, #320]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 80256ce:	689b      	ldr	r3, [r3, #8]
 80256d0:	f003 030c 	and.w	r3, r3, #12
 80256d4:	2b08      	cmp	r3, #8
 80256d6:	d05c      	beq.n	8025792 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80256d8:	687b      	ldr	r3, [r7, #4]
 80256da:	699b      	ldr	r3, [r3, #24]
 80256dc:	2b02      	cmp	r3, #2
 80256de:	d141      	bne.n	8025764 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80256e0:	4b4c      	ldr	r3, [pc, #304]	; (8025814 <HAL_RCC_OscConfig+0x4ec>)
 80256e2:	2200      	movs	r2, #0
 80256e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80256e6:	f7fd fb85 	bl	8022df4 <HAL_GetTick>
 80256ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80256ec:	e008      	b.n	8025700 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80256ee:	f7fd fb81 	bl	8022df4 <HAL_GetTick>
 80256f2:	4602      	mov	r2, r0
 80256f4:	693b      	ldr	r3, [r7, #16]
 80256f6:	1ad3      	subs	r3, r2, r3
 80256f8:	2b02      	cmp	r3, #2
 80256fa:	d901      	bls.n	8025700 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80256fc:	2303      	movs	r3, #3
 80256fe:	e081      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8025700:	4b43      	ldr	r3, [pc, #268]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 8025702:	681b      	ldr	r3, [r3, #0]
 8025704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8025708:	2b00      	cmp	r3, #0
 802570a:	d1f0      	bne.n	80256ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802570c:	687b      	ldr	r3, [r7, #4]
 802570e:	69da      	ldr	r2, [r3, #28]
 8025710:	687b      	ldr	r3, [r7, #4]
 8025712:	6a1b      	ldr	r3, [r3, #32]
 8025714:	431a      	orrs	r2, r3
 8025716:	687b      	ldr	r3, [r7, #4]
 8025718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802571a:	019b      	lsls	r3, r3, #6
 802571c:	431a      	orrs	r2, r3
 802571e:	687b      	ldr	r3, [r7, #4]
 8025720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025722:	085b      	lsrs	r3, r3, #1
 8025724:	3b01      	subs	r3, #1
 8025726:	041b      	lsls	r3, r3, #16
 8025728:	431a      	orrs	r2, r3
 802572a:	687b      	ldr	r3, [r7, #4]
 802572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802572e:	061b      	lsls	r3, r3, #24
 8025730:	4937      	ldr	r1, [pc, #220]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 8025732:	4313      	orrs	r3, r2
 8025734:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8025736:	4b37      	ldr	r3, [pc, #220]	; (8025814 <HAL_RCC_OscConfig+0x4ec>)
 8025738:	2201      	movs	r2, #1
 802573a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802573c:	f7fd fb5a 	bl	8022df4 <HAL_GetTick>
 8025740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8025742:	e008      	b.n	8025756 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8025744:	f7fd fb56 	bl	8022df4 <HAL_GetTick>
 8025748:	4602      	mov	r2, r0
 802574a:	693b      	ldr	r3, [r7, #16]
 802574c:	1ad3      	subs	r3, r2, r3
 802574e:	2b02      	cmp	r3, #2
 8025750:	d901      	bls.n	8025756 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8025752:	2303      	movs	r3, #3
 8025754:	e056      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8025756:	4b2e      	ldr	r3, [pc, #184]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 8025758:	681b      	ldr	r3, [r3, #0]
 802575a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802575e:	2b00      	cmp	r3, #0
 8025760:	d0f0      	beq.n	8025744 <HAL_RCC_OscConfig+0x41c>
 8025762:	e04e      	b.n	8025802 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8025764:	4b2b      	ldr	r3, [pc, #172]	; (8025814 <HAL_RCC_OscConfig+0x4ec>)
 8025766:	2200      	movs	r2, #0
 8025768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802576a:	f7fd fb43 	bl	8022df4 <HAL_GetTick>
 802576e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8025770:	e008      	b.n	8025784 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8025772:	f7fd fb3f 	bl	8022df4 <HAL_GetTick>
 8025776:	4602      	mov	r2, r0
 8025778:	693b      	ldr	r3, [r7, #16]
 802577a:	1ad3      	subs	r3, r2, r3
 802577c:	2b02      	cmp	r3, #2
 802577e:	d901      	bls.n	8025784 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8025780:	2303      	movs	r3, #3
 8025782:	e03f      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8025784:	4b22      	ldr	r3, [pc, #136]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 8025786:	681b      	ldr	r3, [r3, #0]
 8025788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802578c:	2b00      	cmp	r3, #0
 802578e:	d1f0      	bne.n	8025772 <HAL_RCC_OscConfig+0x44a>
 8025790:	e037      	b.n	8025802 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8025792:	687b      	ldr	r3, [r7, #4]
 8025794:	699b      	ldr	r3, [r3, #24]
 8025796:	2b01      	cmp	r3, #1
 8025798:	d101      	bne.n	802579e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 802579a:	2301      	movs	r3, #1
 802579c:	e032      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802579e:	4b1c      	ldr	r3, [pc, #112]	; (8025810 <HAL_RCC_OscConfig+0x4e8>)
 80257a0:	685b      	ldr	r3, [r3, #4]
 80257a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80257a4:	687b      	ldr	r3, [r7, #4]
 80257a6:	699b      	ldr	r3, [r3, #24]
 80257a8:	2b01      	cmp	r3, #1
 80257aa:	d028      	beq.n	80257fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80257ac:	68fb      	ldr	r3, [r7, #12]
 80257ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80257b2:	687b      	ldr	r3, [r7, #4]
 80257b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80257b6:	429a      	cmp	r2, r3
 80257b8:	d121      	bne.n	80257fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80257ba:	68fb      	ldr	r3, [r7, #12]
 80257bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80257c0:	687b      	ldr	r3, [r7, #4]
 80257c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80257c4:	429a      	cmp	r2, r3
 80257c6:	d11a      	bne.n	80257fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80257c8:	68fa      	ldr	r2, [r7, #12]
 80257ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80257ce:	4013      	ands	r3, r2
 80257d0:	687a      	ldr	r2, [r7, #4]
 80257d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80257d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80257d6:	4293      	cmp	r3, r2
 80257d8:	d111      	bne.n	80257fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80257da:	68fb      	ldr	r3, [r7, #12]
 80257dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80257e0:	687b      	ldr	r3, [r7, #4]
 80257e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80257e4:	085b      	lsrs	r3, r3, #1
 80257e6:	3b01      	subs	r3, #1
 80257e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80257ea:	429a      	cmp	r2, r3
 80257ec:	d107      	bne.n	80257fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80257ee:	68fb      	ldr	r3, [r7, #12]
 80257f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80257f4:	687b      	ldr	r3, [r7, #4]
 80257f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80257f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80257fa:	429a      	cmp	r2, r3
 80257fc:	d001      	beq.n	8025802 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80257fe:	2301      	movs	r3, #1
 8025800:	e000      	b.n	8025804 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8025802:	2300      	movs	r3, #0
}
 8025804:	4618      	mov	r0, r3
 8025806:	3718      	adds	r7, #24
 8025808:	46bd      	mov	sp, r7
 802580a:	bd80      	pop	{r7, pc}
 802580c:	40007000 	.word	0x40007000
 8025810:	40023800 	.word	0x40023800
 8025814:	42470060 	.word	0x42470060

08025818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8025818:	b580      	push	{r7, lr}
 802581a:	b084      	sub	sp, #16
 802581c:	af00      	add	r7, sp, #0
 802581e:	6078      	str	r0, [r7, #4]
 8025820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8025822:	687b      	ldr	r3, [r7, #4]
 8025824:	2b00      	cmp	r3, #0
 8025826:	d101      	bne.n	802582c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8025828:	2301      	movs	r3, #1
 802582a:	e0cc      	b.n	80259c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 802582c:	4b68      	ldr	r3, [pc, #416]	; (80259d0 <HAL_RCC_ClockConfig+0x1b8>)
 802582e:	681b      	ldr	r3, [r3, #0]
 8025830:	f003 0307 	and.w	r3, r3, #7
 8025834:	683a      	ldr	r2, [r7, #0]
 8025836:	429a      	cmp	r2, r3
 8025838:	d90c      	bls.n	8025854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802583a:	4b65      	ldr	r3, [pc, #404]	; (80259d0 <HAL_RCC_ClockConfig+0x1b8>)
 802583c:	683a      	ldr	r2, [r7, #0]
 802583e:	b2d2      	uxtb	r2, r2
 8025840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8025842:	4b63      	ldr	r3, [pc, #396]	; (80259d0 <HAL_RCC_ClockConfig+0x1b8>)
 8025844:	681b      	ldr	r3, [r3, #0]
 8025846:	f003 0307 	and.w	r3, r3, #7
 802584a:	683a      	ldr	r2, [r7, #0]
 802584c:	429a      	cmp	r2, r3
 802584e:	d001      	beq.n	8025854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8025850:	2301      	movs	r3, #1
 8025852:	e0b8      	b.n	80259c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8025854:	687b      	ldr	r3, [r7, #4]
 8025856:	681b      	ldr	r3, [r3, #0]
 8025858:	f003 0302 	and.w	r3, r3, #2
 802585c:	2b00      	cmp	r3, #0
 802585e:	d020      	beq.n	80258a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8025860:	687b      	ldr	r3, [r7, #4]
 8025862:	681b      	ldr	r3, [r3, #0]
 8025864:	f003 0304 	and.w	r3, r3, #4
 8025868:	2b00      	cmp	r3, #0
 802586a:	d005      	beq.n	8025878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802586c:	4b59      	ldr	r3, [pc, #356]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 802586e:	689b      	ldr	r3, [r3, #8]
 8025870:	4a58      	ldr	r2, [pc, #352]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 8025872:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8025876:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8025878:	687b      	ldr	r3, [r7, #4]
 802587a:	681b      	ldr	r3, [r3, #0]
 802587c:	f003 0308 	and.w	r3, r3, #8
 8025880:	2b00      	cmp	r3, #0
 8025882:	d005      	beq.n	8025890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8025884:	4b53      	ldr	r3, [pc, #332]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 8025886:	689b      	ldr	r3, [r3, #8]
 8025888:	4a52      	ldr	r2, [pc, #328]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 802588a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802588e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8025890:	4b50      	ldr	r3, [pc, #320]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 8025892:	689b      	ldr	r3, [r3, #8]
 8025894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8025898:	687b      	ldr	r3, [r7, #4]
 802589a:	689b      	ldr	r3, [r3, #8]
 802589c:	494d      	ldr	r1, [pc, #308]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 802589e:	4313      	orrs	r3, r2
 80258a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80258a2:	687b      	ldr	r3, [r7, #4]
 80258a4:	681b      	ldr	r3, [r3, #0]
 80258a6:	f003 0301 	and.w	r3, r3, #1
 80258aa:	2b00      	cmp	r3, #0
 80258ac:	d044      	beq.n	8025938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80258ae:	687b      	ldr	r3, [r7, #4]
 80258b0:	685b      	ldr	r3, [r3, #4]
 80258b2:	2b01      	cmp	r3, #1
 80258b4:	d107      	bne.n	80258c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80258b6:	4b47      	ldr	r3, [pc, #284]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 80258b8:	681b      	ldr	r3, [r3, #0]
 80258ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80258be:	2b00      	cmp	r3, #0
 80258c0:	d119      	bne.n	80258f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80258c2:	2301      	movs	r3, #1
 80258c4:	e07f      	b.n	80259c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80258c6:	687b      	ldr	r3, [r7, #4]
 80258c8:	685b      	ldr	r3, [r3, #4]
 80258ca:	2b02      	cmp	r3, #2
 80258cc:	d003      	beq.n	80258d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80258ce:	687b      	ldr	r3, [r7, #4]
 80258d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80258d2:	2b03      	cmp	r3, #3
 80258d4:	d107      	bne.n	80258e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80258d6:	4b3f      	ldr	r3, [pc, #252]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 80258d8:	681b      	ldr	r3, [r3, #0]
 80258da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80258de:	2b00      	cmp	r3, #0
 80258e0:	d109      	bne.n	80258f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80258e2:	2301      	movs	r3, #1
 80258e4:	e06f      	b.n	80259c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80258e6:	4b3b      	ldr	r3, [pc, #236]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 80258e8:	681b      	ldr	r3, [r3, #0]
 80258ea:	f003 0302 	and.w	r3, r3, #2
 80258ee:	2b00      	cmp	r3, #0
 80258f0:	d101      	bne.n	80258f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80258f2:	2301      	movs	r3, #1
 80258f4:	e067      	b.n	80259c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80258f6:	4b37      	ldr	r3, [pc, #220]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 80258f8:	689b      	ldr	r3, [r3, #8]
 80258fa:	f023 0203 	bic.w	r2, r3, #3
 80258fe:	687b      	ldr	r3, [r7, #4]
 8025900:	685b      	ldr	r3, [r3, #4]
 8025902:	4934      	ldr	r1, [pc, #208]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 8025904:	4313      	orrs	r3, r2
 8025906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8025908:	f7fd fa74 	bl	8022df4 <HAL_GetTick>
 802590c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802590e:	e00a      	b.n	8025926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8025910:	f7fd fa70 	bl	8022df4 <HAL_GetTick>
 8025914:	4602      	mov	r2, r0
 8025916:	68fb      	ldr	r3, [r7, #12]
 8025918:	1ad3      	subs	r3, r2, r3
 802591a:	f241 3288 	movw	r2, #5000	; 0x1388
 802591e:	4293      	cmp	r3, r2
 8025920:	d901      	bls.n	8025926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8025922:	2303      	movs	r3, #3
 8025924:	e04f      	b.n	80259c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8025926:	4b2b      	ldr	r3, [pc, #172]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 8025928:	689b      	ldr	r3, [r3, #8]
 802592a:	f003 020c 	and.w	r2, r3, #12
 802592e:	687b      	ldr	r3, [r7, #4]
 8025930:	685b      	ldr	r3, [r3, #4]
 8025932:	009b      	lsls	r3, r3, #2
 8025934:	429a      	cmp	r2, r3
 8025936:	d1eb      	bne.n	8025910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8025938:	4b25      	ldr	r3, [pc, #148]	; (80259d0 <HAL_RCC_ClockConfig+0x1b8>)
 802593a:	681b      	ldr	r3, [r3, #0]
 802593c:	f003 0307 	and.w	r3, r3, #7
 8025940:	683a      	ldr	r2, [r7, #0]
 8025942:	429a      	cmp	r2, r3
 8025944:	d20c      	bcs.n	8025960 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8025946:	4b22      	ldr	r3, [pc, #136]	; (80259d0 <HAL_RCC_ClockConfig+0x1b8>)
 8025948:	683a      	ldr	r2, [r7, #0]
 802594a:	b2d2      	uxtb	r2, r2
 802594c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802594e:	4b20      	ldr	r3, [pc, #128]	; (80259d0 <HAL_RCC_ClockConfig+0x1b8>)
 8025950:	681b      	ldr	r3, [r3, #0]
 8025952:	f003 0307 	and.w	r3, r3, #7
 8025956:	683a      	ldr	r2, [r7, #0]
 8025958:	429a      	cmp	r2, r3
 802595a:	d001      	beq.n	8025960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802595c:	2301      	movs	r3, #1
 802595e:	e032      	b.n	80259c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8025960:	687b      	ldr	r3, [r7, #4]
 8025962:	681b      	ldr	r3, [r3, #0]
 8025964:	f003 0304 	and.w	r3, r3, #4
 8025968:	2b00      	cmp	r3, #0
 802596a:	d008      	beq.n	802597e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802596c:	4b19      	ldr	r3, [pc, #100]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 802596e:	689b      	ldr	r3, [r3, #8]
 8025970:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8025974:	687b      	ldr	r3, [r7, #4]
 8025976:	68db      	ldr	r3, [r3, #12]
 8025978:	4916      	ldr	r1, [pc, #88]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 802597a:	4313      	orrs	r3, r2
 802597c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802597e:	687b      	ldr	r3, [r7, #4]
 8025980:	681b      	ldr	r3, [r3, #0]
 8025982:	f003 0308 	and.w	r3, r3, #8
 8025986:	2b00      	cmp	r3, #0
 8025988:	d009      	beq.n	802599e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802598a:	4b12      	ldr	r3, [pc, #72]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 802598c:	689b      	ldr	r3, [r3, #8]
 802598e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8025992:	687b      	ldr	r3, [r7, #4]
 8025994:	691b      	ldr	r3, [r3, #16]
 8025996:	00db      	lsls	r3, r3, #3
 8025998:	490e      	ldr	r1, [pc, #56]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 802599a:	4313      	orrs	r3, r2
 802599c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802599e:	f000 f821 	bl	80259e4 <HAL_RCC_GetSysClockFreq>
 80259a2:	4602      	mov	r2, r0
 80259a4:	4b0b      	ldr	r3, [pc, #44]	; (80259d4 <HAL_RCC_ClockConfig+0x1bc>)
 80259a6:	689b      	ldr	r3, [r3, #8]
 80259a8:	091b      	lsrs	r3, r3, #4
 80259aa:	f003 030f 	and.w	r3, r3, #15
 80259ae:	490a      	ldr	r1, [pc, #40]	; (80259d8 <HAL_RCC_ClockConfig+0x1c0>)
 80259b0:	5ccb      	ldrb	r3, [r1, r3]
 80259b2:	fa22 f303 	lsr.w	r3, r2, r3
 80259b6:	4a09      	ldr	r2, [pc, #36]	; (80259dc <HAL_RCC_ClockConfig+0x1c4>)
 80259b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80259ba:	4b09      	ldr	r3, [pc, #36]	; (80259e0 <HAL_RCC_ClockConfig+0x1c8>)
 80259bc:	681b      	ldr	r3, [r3, #0]
 80259be:	4618      	mov	r0, r3
 80259c0:	f7f1 fd94 	bl	80174ec <HAL_InitTick>

  return HAL_OK;
 80259c4:	2300      	movs	r3, #0
}
 80259c6:	4618      	mov	r0, r3
 80259c8:	3710      	adds	r7, #16
 80259ca:	46bd      	mov	sp, r7
 80259cc:	bd80      	pop	{r7, pc}
 80259ce:	bf00      	nop
 80259d0:	40023c00 	.word	0x40023c00
 80259d4:	40023800 	.word	0x40023800
 80259d8:	0802e048 	.word	0x0802e048
 80259dc:	20000080 	.word	0x20000080
 80259e0:	20000360 	.word	0x20000360

080259e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80259e4:	b5b0      	push	{r4, r5, r7, lr}
 80259e6:	b084      	sub	sp, #16
 80259e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80259ea:	2100      	movs	r1, #0
 80259ec:	6079      	str	r1, [r7, #4]
 80259ee:	2100      	movs	r1, #0
 80259f0:	60f9      	str	r1, [r7, #12]
 80259f2:	2100      	movs	r1, #0
 80259f4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80259f6:	2100      	movs	r1, #0
 80259f8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80259fa:	4952      	ldr	r1, [pc, #328]	; (8025b44 <HAL_RCC_GetSysClockFreq+0x160>)
 80259fc:	6889      	ldr	r1, [r1, #8]
 80259fe:	f001 010c 	and.w	r1, r1, #12
 8025a02:	2908      	cmp	r1, #8
 8025a04:	d00d      	beq.n	8025a22 <HAL_RCC_GetSysClockFreq+0x3e>
 8025a06:	2908      	cmp	r1, #8
 8025a08:	f200 8094 	bhi.w	8025b34 <HAL_RCC_GetSysClockFreq+0x150>
 8025a0c:	2900      	cmp	r1, #0
 8025a0e:	d002      	beq.n	8025a16 <HAL_RCC_GetSysClockFreq+0x32>
 8025a10:	2904      	cmp	r1, #4
 8025a12:	d003      	beq.n	8025a1c <HAL_RCC_GetSysClockFreq+0x38>
 8025a14:	e08e      	b.n	8025b34 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8025a16:	4b4c      	ldr	r3, [pc, #304]	; (8025b48 <HAL_RCC_GetSysClockFreq+0x164>)
 8025a18:	60bb      	str	r3, [r7, #8]
       break;
 8025a1a:	e08e      	b.n	8025b3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8025a1c:	4b4b      	ldr	r3, [pc, #300]	; (8025b4c <HAL_RCC_GetSysClockFreq+0x168>)
 8025a1e:	60bb      	str	r3, [r7, #8]
      break;
 8025a20:	e08b      	b.n	8025b3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8025a22:	4948      	ldr	r1, [pc, #288]	; (8025b44 <HAL_RCC_GetSysClockFreq+0x160>)
 8025a24:	6849      	ldr	r1, [r1, #4]
 8025a26:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8025a2a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8025a2c:	4945      	ldr	r1, [pc, #276]	; (8025b44 <HAL_RCC_GetSysClockFreq+0x160>)
 8025a2e:	6849      	ldr	r1, [r1, #4]
 8025a30:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8025a34:	2900      	cmp	r1, #0
 8025a36:	d024      	beq.n	8025a82 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8025a38:	4942      	ldr	r1, [pc, #264]	; (8025b44 <HAL_RCC_GetSysClockFreq+0x160>)
 8025a3a:	6849      	ldr	r1, [r1, #4]
 8025a3c:	0989      	lsrs	r1, r1, #6
 8025a3e:	4608      	mov	r0, r1
 8025a40:	f04f 0100 	mov.w	r1, #0
 8025a44:	f240 14ff 	movw	r4, #511	; 0x1ff
 8025a48:	f04f 0500 	mov.w	r5, #0
 8025a4c:	ea00 0204 	and.w	r2, r0, r4
 8025a50:	ea01 0305 	and.w	r3, r1, r5
 8025a54:	493d      	ldr	r1, [pc, #244]	; (8025b4c <HAL_RCC_GetSysClockFreq+0x168>)
 8025a56:	fb01 f003 	mul.w	r0, r1, r3
 8025a5a:	2100      	movs	r1, #0
 8025a5c:	fb01 f102 	mul.w	r1, r1, r2
 8025a60:	1844      	adds	r4, r0, r1
 8025a62:	493a      	ldr	r1, [pc, #232]	; (8025b4c <HAL_RCC_GetSysClockFreq+0x168>)
 8025a64:	fba2 0101 	umull	r0, r1, r2, r1
 8025a68:	1863      	adds	r3, r4, r1
 8025a6a:	4619      	mov	r1, r3
 8025a6c:	687b      	ldr	r3, [r7, #4]
 8025a6e:	461a      	mov	r2, r3
 8025a70:	f04f 0300 	mov.w	r3, #0
 8025a74:	f7db f8fa 	bl	8000c6c <__aeabi_uldivmod>
 8025a78:	4602      	mov	r2, r0
 8025a7a:	460b      	mov	r3, r1
 8025a7c:	4613      	mov	r3, r2
 8025a7e:	60fb      	str	r3, [r7, #12]
 8025a80:	e04a      	b.n	8025b18 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8025a82:	4b30      	ldr	r3, [pc, #192]	; (8025b44 <HAL_RCC_GetSysClockFreq+0x160>)
 8025a84:	685b      	ldr	r3, [r3, #4]
 8025a86:	099b      	lsrs	r3, r3, #6
 8025a88:	461a      	mov	r2, r3
 8025a8a:	f04f 0300 	mov.w	r3, #0
 8025a8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8025a92:	f04f 0100 	mov.w	r1, #0
 8025a96:	ea02 0400 	and.w	r4, r2, r0
 8025a9a:	ea03 0501 	and.w	r5, r3, r1
 8025a9e:	4620      	mov	r0, r4
 8025aa0:	4629      	mov	r1, r5
 8025aa2:	f04f 0200 	mov.w	r2, #0
 8025aa6:	f04f 0300 	mov.w	r3, #0
 8025aaa:	014b      	lsls	r3, r1, #5
 8025aac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8025ab0:	0142      	lsls	r2, r0, #5
 8025ab2:	4610      	mov	r0, r2
 8025ab4:	4619      	mov	r1, r3
 8025ab6:	1b00      	subs	r0, r0, r4
 8025ab8:	eb61 0105 	sbc.w	r1, r1, r5
 8025abc:	f04f 0200 	mov.w	r2, #0
 8025ac0:	f04f 0300 	mov.w	r3, #0
 8025ac4:	018b      	lsls	r3, r1, #6
 8025ac6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8025aca:	0182      	lsls	r2, r0, #6
 8025acc:	1a12      	subs	r2, r2, r0
 8025ace:	eb63 0301 	sbc.w	r3, r3, r1
 8025ad2:	f04f 0000 	mov.w	r0, #0
 8025ad6:	f04f 0100 	mov.w	r1, #0
 8025ada:	00d9      	lsls	r1, r3, #3
 8025adc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8025ae0:	00d0      	lsls	r0, r2, #3
 8025ae2:	4602      	mov	r2, r0
 8025ae4:	460b      	mov	r3, r1
 8025ae6:	1912      	adds	r2, r2, r4
 8025ae8:	eb45 0303 	adc.w	r3, r5, r3
 8025aec:	f04f 0000 	mov.w	r0, #0
 8025af0:	f04f 0100 	mov.w	r1, #0
 8025af4:	0299      	lsls	r1, r3, #10
 8025af6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8025afa:	0290      	lsls	r0, r2, #10
 8025afc:	4602      	mov	r2, r0
 8025afe:	460b      	mov	r3, r1
 8025b00:	4610      	mov	r0, r2
 8025b02:	4619      	mov	r1, r3
 8025b04:	687b      	ldr	r3, [r7, #4]
 8025b06:	461a      	mov	r2, r3
 8025b08:	f04f 0300 	mov.w	r3, #0
 8025b0c:	f7db f8ae 	bl	8000c6c <__aeabi_uldivmod>
 8025b10:	4602      	mov	r2, r0
 8025b12:	460b      	mov	r3, r1
 8025b14:	4613      	mov	r3, r2
 8025b16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8025b18:	4b0a      	ldr	r3, [pc, #40]	; (8025b44 <HAL_RCC_GetSysClockFreq+0x160>)
 8025b1a:	685b      	ldr	r3, [r3, #4]
 8025b1c:	0c1b      	lsrs	r3, r3, #16
 8025b1e:	f003 0303 	and.w	r3, r3, #3
 8025b22:	3301      	adds	r3, #1
 8025b24:	005b      	lsls	r3, r3, #1
 8025b26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8025b28:	68fa      	ldr	r2, [r7, #12]
 8025b2a:	683b      	ldr	r3, [r7, #0]
 8025b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8025b30:	60bb      	str	r3, [r7, #8]
      break;
 8025b32:	e002      	b.n	8025b3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8025b34:	4b04      	ldr	r3, [pc, #16]	; (8025b48 <HAL_RCC_GetSysClockFreq+0x164>)
 8025b36:	60bb      	str	r3, [r7, #8]
      break;
 8025b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8025b3a:	68bb      	ldr	r3, [r7, #8]
}
 8025b3c:	4618      	mov	r0, r3
 8025b3e:	3710      	adds	r7, #16
 8025b40:	46bd      	mov	sp, r7
 8025b42:	bdb0      	pop	{r4, r5, r7, pc}
 8025b44:	40023800 	.word	0x40023800
 8025b48:	00f42400 	.word	0x00f42400
 8025b4c:	017d7840 	.word	0x017d7840

08025b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8025b50:	b480      	push	{r7}
 8025b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8025b54:	4b03      	ldr	r3, [pc, #12]	; (8025b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8025b56:	681b      	ldr	r3, [r3, #0]
}
 8025b58:	4618      	mov	r0, r3
 8025b5a:	46bd      	mov	sp, r7
 8025b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b60:	4770      	bx	lr
 8025b62:	bf00      	nop
 8025b64:	20000080 	.word	0x20000080

08025b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8025b68:	b580      	push	{r7, lr}
 8025b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8025b6c:	f7ff fff0 	bl	8025b50 <HAL_RCC_GetHCLKFreq>
 8025b70:	4602      	mov	r2, r0
 8025b72:	4b05      	ldr	r3, [pc, #20]	; (8025b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8025b74:	689b      	ldr	r3, [r3, #8]
 8025b76:	0a9b      	lsrs	r3, r3, #10
 8025b78:	f003 0307 	and.w	r3, r3, #7
 8025b7c:	4903      	ldr	r1, [pc, #12]	; (8025b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8025b7e:	5ccb      	ldrb	r3, [r1, r3]
 8025b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8025b84:	4618      	mov	r0, r3
 8025b86:	bd80      	pop	{r7, pc}
 8025b88:	40023800 	.word	0x40023800
 8025b8c:	0802e058 	.word	0x0802e058

08025b90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8025b90:	b480      	push	{r7}
 8025b92:	b083      	sub	sp, #12
 8025b94:	af00      	add	r7, sp, #0
 8025b96:	6078      	str	r0, [r7, #4]
 8025b98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8025b9a:	687b      	ldr	r3, [r7, #4]
 8025b9c:	220f      	movs	r2, #15
 8025b9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8025ba0:	4b12      	ldr	r3, [pc, #72]	; (8025bec <HAL_RCC_GetClockConfig+0x5c>)
 8025ba2:	689b      	ldr	r3, [r3, #8]
 8025ba4:	f003 0203 	and.w	r2, r3, #3
 8025ba8:	687b      	ldr	r3, [r7, #4]
 8025baa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8025bac:	4b0f      	ldr	r3, [pc, #60]	; (8025bec <HAL_RCC_GetClockConfig+0x5c>)
 8025bae:	689b      	ldr	r3, [r3, #8]
 8025bb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8025bb4:	687b      	ldr	r3, [r7, #4]
 8025bb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8025bb8:	4b0c      	ldr	r3, [pc, #48]	; (8025bec <HAL_RCC_GetClockConfig+0x5c>)
 8025bba:	689b      	ldr	r3, [r3, #8]
 8025bbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8025bc0:	687b      	ldr	r3, [r7, #4]
 8025bc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8025bc4:	4b09      	ldr	r3, [pc, #36]	; (8025bec <HAL_RCC_GetClockConfig+0x5c>)
 8025bc6:	689b      	ldr	r3, [r3, #8]
 8025bc8:	08db      	lsrs	r3, r3, #3
 8025bca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8025bce:	687b      	ldr	r3, [r7, #4]
 8025bd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8025bd2:	4b07      	ldr	r3, [pc, #28]	; (8025bf0 <HAL_RCC_GetClockConfig+0x60>)
 8025bd4:	681b      	ldr	r3, [r3, #0]
 8025bd6:	f003 0207 	and.w	r2, r3, #7
 8025bda:	683b      	ldr	r3, [r7, #0]
 8025bdc:	601a      	str	r2, [r3, #0]
}
 8025bde:	bf00      	nop
 8025be0:	370c      	adds	r7, #12
 8025be2:	46bd      	mov	sp, r7
 8025be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025be8:	4770      	bx	lr
 8025bea:	bf00      	nop
 8025bec:	40023800 	.word	0x40023800
 8025bf0:	40023c00 	.word	0x40023c00

08025bf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8025bf4:	b580      	push	{r7, lr}
 8025bf6:	b082      	sub	sp, #8
 8025bf8:	af00      	add	r7, sp, #0
 8025bfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8025bfc:	687b      	ldr	r3, [r7, #4]
 8025bfe:	2b00      	cmp	r3, #0
 8025c00:	d101      	bne.n	8025c06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8025c02:	2301      	movs	r3, #1
 8025c04:	e07b      	b.n	8025cfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8025c06:	687b      	ldr	r3, [r7, #4]
 8025c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c0a:	2b00      	cmp	r3, #0
 8025c0c:	d108      	bne.n	8025c20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8025c0e:	687b      	ldr	r3, [r7, #4]
 8025c10:	685b      	ldr	r3, [r3, #4]
 8025c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8025c16:	d009      	beq.n	8025c2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8025c18:	687b      	ldr	r3, [r7, #4]
 8025c1a:	2200      	movs	r2, #0
 8025c1c:	61da      	str	r2, [r3, #28]
 8025c1e:	e005      	b.n	8025c2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8025c20:	687b      	ldr	r3, [r7, #4]
 8025c22:	2200      	movs	r2, #0
 8025c24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8025c26:	687b      	ldr	r3, [r7, #4]
 8025c28:	2200      	movs	r2, #0
 8025c2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8025c2c:	687b      	ldr	r3, [r7, #4]
 8025c2e:	2200      	movs	r2, #0
 8025c30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8025c32:	687b      	ldr	r3, [r7, #4]
 8025c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8025c38:	b2db      	uxtb	r3, r3
 8025c3a:	2b00      	cmp	r3, #0
 8025c3c:	d106      	bne.n	8025c4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8025c3e:	687b      	ldr	r3, [r7, #4]
 8025c40:	2200      	movs	r2, #0
 8025c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8025c46:	6878      	ldr	r0, [r7, #4]
 8025c48:	f7f1 fbbc 	bl	80173c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8025c4c:	687b      	ldr	r3, [r7, #4]
 8025c4e:	2202      	movs	r2, #2
 8025c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8025c54:	687b      	ldr	r3, [r7, #4]
 8025c56:	681b      	ldr	r3, [r3, #0]
 8025c58:	681a      	ldr	r2, [r3, #0]
 8025c5a:	687b      	ldr	r3, [r7, #4]
 8025c5c:	681b      	ldr	r3, [r3, #0]
 8025c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8025c62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8025c64:	687b      	ldr	r3, [r7, #4]
 8025c66:	685b      	ldr	r3, [r3, #4]
 8025c68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8025c6c:	687b      	ldr	r3, [r7, #4]
 8025c6e:	689b      	ldr	r3, [r3, #8]
 8025c70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8025c74:	431a      	orrs	r2, r3
 8025c76:	687b      	ldr	r3, [r7, #4]
 8025c78:	68db      	ldr	r3, [r3, #12]
 8025c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8025c7e:	431a      	orrs	r2, r3
 8025c80:	687b      	ldr	r3, [r7, #4]
 8025c82:	691b      	ldr	r3, [r3, #16]
 8025c84:	f003 0302 	and.w	r3, r3, #2
 8025c88:	431a      	orrs	r2, r3
 8025c8a:	687b      	ldr	r3, [r7, #4]
 8025c8c:	695b      	ldr	r3, [r3, #20]
 8025c8e:	f003 0301 	and.w	r3, r3, #1
 8025c92:	431a      	orrs	r2, r3
 8025c94:	687b      	ldr	r3, [r7, #4]
 8025c96:	699b      	ldr	r3, [r3, #24]
 8025c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025c9c:	431a      	orrs	r2, r3
 8025c9e:	687b      	ldr	r3, [r7, #4]
 8025ca0:	69db      	ldr	r3, [r3, #28]
 8025ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8025ca6:	431a      	orrs	r2, r3
 8025ca8:	687b      	ldr	r3, [r7, #4]
 8025caa:	6a1b      	ldr	r3, [r3, #32]
 8025cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025cb0:	ea42 0103 	orr.w	r1, r2, r3
 8025cb4:	687b      	ldr	r3, [r7, #4]
 8025cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025cb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8025cbc:	687b      	ldr	r3, [r7, #4]
 8025cbe:	681b      	ldr	r3, [r3, #0]
 8025cc0:	430a      	orrs	r2, r1
 8025cc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8025cc4:	687b      	ldr	r3, [r7, #4]
 8025cc6:	699b      	ldr	r3, [r3, #24]
 8025cc8:	0c1b      	lsrs	r3, r3, #16
 8025cca:	f003 0104 	and.w	r1, r3, #4
 8025cce:	687b      	ldr	r3, [r7, #4]
 8025cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025cd2:	f003 0210 	and.w	r2, r3, #16
 8025cd6:	687b      	ldr	r3, [r7, #4]
 8025cd8:	681b      	ldr	r3, [r3, #0]
 8025cda:	430a      	orrs	r2, r1
 8025cdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8025cde:	687b      	ldr	r3, [r7, #4]
 8025ce0:	681b      	ldr	r3, [r3, #0]
 8025ce2:	69da      	ldr	r2, [r3, #28]
 8025ce4:	687b      	ldr	r3, [r7, #4]
 8025ce6:	681b      	ldr	r3, [r3, #0]
 8025ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8025cec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8025cee:	687b      	ldr	r3, [r7, #4]
 8025cf0:	2200      	movs	r2, #0
 8025cf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8025cf4:	687b      	ldr	r3, [r7, #4]
 8025cf6:	2201      	movs	r2, #1
 8025cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8025cfc:	2300      	movs	r3, #0
}
 8025cfe:	4618      	mov	r0, r3
 8025d00:	3708      	adds	r7, #8
 8025d02:	46bd      	mov	sp, r7
 8025d04:	bd80      	pop	{r7, pc}

08025d06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8025d06:	b580      	push	{r7, lr}
 8025d08:	b088      	sub	sp, #32
 8025d0a:	af00      	add	r7, sp, #0
 8025d0c:	60f8      	str	r0, [r7, #12]
 8025d0e:	60b9      	str	r1, [r7, #8]
 8025d10:	603b      	str	r3, [r7, #0]
 8025d12:	4613      	mov	r3, r2
 8025d14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8025d16:	2300      	movs	r3, #0
 8025d18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8025d1a:	68fb      	ldr	r3, [r7, #12]
 8025d1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8025d20:	2b01      	cmp	r3, #1
 8025d22:	d101      	bne.n	8025d28 <HAL_SPI_Transmit+0x22>
 8025d24:	2302      	movs	r3, #2
 8025d26:	e126      	b.n	8025f76 <HAL_SPI_Transmit+0x270>
 8025d28:	68fb      	ldr	r3, [r7, #12]
 8025d2a:	2201      	movs	r2, #1
 8025d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8025d30:	f7fd f860 	bl	8022df4 <HAL_GetTick>
 8025d34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8025d36:	88fb      	ldrh	r3, [r7, #6]
 8025d38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8025d3a:	68fb      	ldr	r3, [r7, #12]
 8025d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8025d40:	b2db      	uxtb	r3, r3
 8025d42:	2b01      	cmp	r3, #1
 8025d44:	d002      	beq.n	8025d4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8025d46:	2302      	movs	r3, #2
 8025d48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8025d4a:	e10b      	b.n	8025f64 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8025d4c:	68bb      	ldr	r3, [r7, #8]
 8025d4e:	2b00      	cmp	r3, #0
 8025d50:	d002      	beq.n	8025d58 <HAL_SPI_Transmit+0x52>
 8025d52:	88fb      	ldrh	r3, [r7, #6]
 8025d54:	2b00      	cmp	r3, #0
 8025d56:	d102      	bne.n	8025d5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8025d58:	2301      	movs	r3, #1
 8025d5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8025d5c:	e102      	b.n	8025f64 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8025d5e:	68fb      	ldr	r3, [r7, #12]
 8025d60:	2203      	movs	r2, #3
 8025d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8025d66:	68fb      	ldr	r3, [r7, #12]
 8025d68:	2200      	movs	r2, #0
 8025d6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8025d6c:	68fb      	ldr	r3, [r7, #12]
 8025d6e:	68ba      	ldr	r2, [r7, #8]
 8025d70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8025d72:	68fb      	ldr	r3, [r7, #12]
 8025d74:	88fa      	ldrh	r2, [r7, #6]
 8025d76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8025d78:	68fb      	ldr	r3, [r7, #12]
 8025d7a:	88fa      	ldrh	r2, [r7, #6]
 8025d7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8025d7e:	68fb      	ldr	r3, [r7, #12]
 8025d80:	2200      	movs	r2, #0
 8025d82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8025d84:	68fb      	ldr	r3, [r7, #12]
 8025d86:	2200      	movs	r2, #0
 8025d88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8025d8a:	68fb      	ldr	r3, [r7, #12]
 8025d8c:	2200      	movs	r2, #0
 8025d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8025d90:	68fb      	ldr	r3, [r7, #12]
 8025d92:	2200      	movs	r2, #0
 8025d94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8025d96:	68fb      	ldr	r3, [r7, #12]
 8025d98:	2200      	movs	r2, #0
 8025d9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8025d9c:	68fb      	ldr	r3, [r7, #12]
 8025d9e:	689b      	ldr	r3, [r3, #8]
 8025da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8025da4:	d10f      	bne.n	8025dc6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8025da6:	68fb      	ldr	r3, [r7, #12]
 8025da8:	681b      	ldr	r3, [r3, #0]
 8025daa:	681a      	ldr	r2, [r3, #0]
 8025dac:	68fb      	ldr	r3, [r7, #12]
 8025dae:	681b      	ldr	r3, [r3, #0]
 8025db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8025db4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8025db6:	68fb      	ldr	r3, [r7, #12]
 8025db8:	681b      	ldr	r3, [r3, #0]
 8025dba:	681a      	ldr	r2, [r3, #0]
 8025dbc:	68fb      	ldr	r3, [r7, #12]
 8025dbe:	681b      	ldr	r3, [r3, #0]
 8025dc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8025dc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8025dc6:	68fb      	ldr	r3, [r7, #12]
 8025dc8:	681b      	ldr	r3, [r3, #0]
 8025dca:	681b      	ldr	r3, [r3, #0]
 8025dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025dd0:	2b40      	cmp	r3, #64	; 0x40
 8025dd2:	d007      	beq.n	8025de4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8025dd4:	68fb      	ldr	r3, [r7, #12]
 8025dd6:	681b      	ldr	r3, [r3, #0]
 8025dd8:	681a      	ldr	r2, [r3, #0]
 8025dda:	68fb      	ldr	r3, [r7, #12]
 8025ddc:	681b      	ldr	r3, [r3, #0]
 8025dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8025de2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8025de4:	68fb      	ldr	r3, [r7, #12]
 8025de6:	68db      	ldr	r3, [r3, #12]
 8025de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8025dec:	d14b      	bne.n	8025e86 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8025dee:	68fb      	ldr	r3, [r7, #12]
 8025df0:	685b      	ldr	r3, [r3, #4]
 8025df2:	2b00      	cmp	r3, #0
 8025df4:	d002      	beq.n	8025dfc <HAL_SPI_Transmit+0xf6>
 8025df6:	8afb      	ldrh	r3, [r7, #22]
 8025df8:	2b01      	cmp	r3, #1
 8025dfa:	d13e      	bne.n	8025e7a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8025dfc:	68fb      	ldr	r3, [r7, #12]
 8025dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025e00:	881a      	ldrh	r2, [r3, #0]
 8025e02:	68fb      	ldr	r3, [r7, #12]
 8025e04:	681b      	ldr	r3, [r3, #0]
 8025e06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8025e08:	68fb      	ldr	r3, [r7, #12]
 8025e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025e0c:	1c9a      	adds	r2, r3, #2
 8025e0e:	68fb      	ldr	r3, [r7, #12]
 8025e10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8025e12:	68fb      	ldr	r3, [r7, #12]
 8025e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025e16:	b29b      	uxth	r3, r3
 8025e18:	3b01      	subs	r3, #1
 8025e1a:	b29a      	uxth	r2, r3
 8025e1c:	68fb      	ldr	r3, [r7, #12]
 8025e1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8025e20:	e02b      	b.n	8025e7a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8025e22:	68fb      	ldr	r3, [r7, #12]
 8025e24:	681b      	ldr	r3, [r3, #0]
 8025e26:	689b      	ldr	r3, [r3, #8]
 8025e28:	f003 0302 	and.w	r3, r3, #2
 8025e2c:	2b02      	cmp	r3, #2
 8025e2e:	d112      	bne.n	8025e56 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8025e30:	68fb      	ldr	r3, [r7, #12]
 8025e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025e34:	881a      	ldrh	r2, [r3, #0]
 8025e36:	68fb      	ldr	r3, [r7, #12]
 8025e38:	681b      	ldr	r3, [r3, #0]
 8025e3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8025e3c:	68fb      	ldr	r3, [r7, #12]
 8025e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025e40:	1c9a      	adds	r2, r3, #2
 8025e42:	68fb      	ldr	r3, [r7, #12]
 8025e44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8025e46:	68fb      	ldr	r3, [r7, #12]
 8025e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025e4a:	b29b      	uxth	r3, r3
 8025e4c:	3b01      	subs	r3, #1
 8025e4e:	b29a      	uxth	r2, r3
 8025e50:	68fb      	ldr	r3, [r7, #12]
 8025e52:	86da      	strh	r2, [r3, #54]	; 0x36
 8025e54:	e011      	b.n	8025e7a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8025e56:	f7fc ffcd 	bl	8022df4 <HAL_GetTick>
 8025e5a:	4602      	mov	r2, r0
 8025e5c:	69bb      	ldr	r3, [r7, #24]
 8025e5e:	1ad3      	subs	r3, r2, r3
 8025e60:	683a      	ldr	r2, [r7, #0]
 8025e62:	429a      	cmp	r2, r3
 8025e64:	d803      	bhi.n	8025e6e <HAL_SPI_Transmit+0x168>
 8025e66:	683b      	ldr	r3, [r7, #0]
 8025e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025e6c:	d102      	bne.n	8025e74 <HAL_SPI_Transmit+0x16e>
 8025e6e:	683b      	ldr	r3, [r7, #0]
 8025e70:	2b00      	cmp	r3, #0
 8025e72:	d102      	bne.n	8025e7a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8025e74:	2303      	movs	r3, #3
 8025e76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8025e78:	e074      	b.n	8025f64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8025e7a:	68fb      	ldr	r3, [r7, #12]
 8025e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025e7e:	b29b      	uxth	r3, r3
 8025e80:	2b00      	cmp	r3, #0
 8025e82:	d1ce      	bne.n	8025e22 <HAL_SPI_Transmit+0x11c>
 8025e84:	e04c      	b.n	8025f20 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8025e86:	68fb      	ldr	r3, [r7, #12]
 8025e88:	685b      	ldr	r3, [r3, #4]
 8025e8a:	2b00      	cmp	r3, #0
 8025e8c:	d002      	beq.n	8025e94 <HAL_SPI_Transmit+0x18e>
 8025e8e:	8afb      	ldrh	r3, [r7, #22]
 8025e90:	2b01      	cmp	r3, #1
 8025e92:	d140      	bne.n	8025f16 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8025e94:	68fb      	ldr	r3, [r7, #12]
 8025e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8025e98:	68fb      	ldr	r3, [r7, #12]
 8025e9a:	681b      	ldr	r3, [r3, #0]
 8025e9c:	330c      	adds	r3, #12
 8025e9e:	7812      	ldrb	r2, [r2, #0]
 8025ea0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8025ea2:	68fb      	ldr	r3, [r7, #12]
 8025ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025ea6:	1c5a      	adds	r2, r3, #1
 8025ea8:	68fb      	ldr	r3, [r7, #12]
 8025eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8025eac:	68fb      	ldr	r3, [r7, #12]
 8025eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025eb0:	b29b      	uxth	r3, r3
 8025eb2:	3b01      	subs	r3, #1
 8025eb4:	b29a      	uxth	r2, r3
 8025eb6:	68fb      	ldr	r3, [r7, #12]
 8025eb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8025eba:	e02c      	b.n	8025f16 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8025ebc:	68fb      	ldr	r3, [r7, #12]
 8025ebe:	681b      	ldr	r3, [r3, #0]
 8025ec0:	689b      	ldr	r3, [r3, #8]
 8025ec2:	f003 0302 	and.w	r3, r3, #2
 8025ec6:	2b02      	cmp	r3, #2
 8025ec8:	d113      	bne.n	8025ef2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8025eca:	68fb      	ldr	r3, [r7, #12]
 8025ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8025ece:	68fb      	ldr	r3, [r7, #12]
 8025ed0:	681b      	ldr	r3, [r3, #0]
 8025ed2:	330c      	adds	r3, #12
 8025ed4:	7812      	ldrb	r2, [r2, #0]
 8025ed6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8025ed8:	68fb      	ldr	r3, [r7, #12]
 8025eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025edc:	1c5a      	adds	r2, r3, #1
 8025ede:	68fb      	ldr	r3, [r7, #12]
 8025ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8025ee2:	68fb      	ldr	r3, [r7, #12]
 8025ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025ee6:	b29b      	uxth	r3, r3
 8025ee8:	3b01      	subs	r3, #1
 8025eea:	b29a      	uxth	r2, r3
 8025eec:	68fb      	ldr	r3, [r7, #12]
 8025eee:	86da      	strh	r2, [r3, #54]	; 0x36
 8025ef0:	e011      	b.n	8025f16 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8025ef2:	f7fc ff7f 	bl	8022df4 <HAL_GetTick>
 8025ef6:	4602      	mov	r2, r0
 8025ef8:	69bb      	ldr	r3, [r7, #24]
 8025efa:	1ad3      	subs	r3, r2, r3
 8025efc:	683a      	ldr	r2, [r7, #0]
 8025efe:	429a      	cmp	r2, r3
 8025f00:	d803      	bhi.n	8025f0a <HAL_SPI_Transmit+0x204>
 8025f02:	683b      	ldr	r3, [r7, #0]
 8025f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025f08:	d102      	bne.n	8025f10 <HAL_SPI_Transmit+0x20a>
 8025f0a:	683b      	ldr	r3, [r7, #0]
 8025f0c:	2b00      	cmp	r3, #0
 8025f0e:	d102      	bne.n	8025f16 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8025f10:	2303      	movs	r3, #3
 8025f12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8025f14:	e026      	b.n	8025f64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8025f16:	68fb      	ldr	r3, [r7, #12]
 8025f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025f1a:	b29b      	uxth	r3, r3
 8025f1c:	2b00      	cmp	r3, #0
 8025f1e:	d1cd      	bne.n	8025ebc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8025f20:	69ba      	ldr	r2, [r7, #24]
 8025f22:	6839      	ldr	r1, [r7, #0]
 8025f24:	68f8      	ldr	r0, [r7, #12]
 8025f26:	f000 fbcb 	bl	80266c0 <SPI_EndRxTxTransaction>
 8025f2a:	4603      	mov	r3, r0
 8025f2c:	2b00      	cmp	r3, #0
 8025f2e:	d002      	beq.n	8025f36 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8025f30:	68fb      	ldr	r3, [r7, #12]
 8025f32:	2220      	movs	r2, #32
 8025f34:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8025f36:	68fb      	ldr	r3, [r7, #12]
 8025f38:	689b      	ldr	r3, [r3, #8]
 8025f3a:	2b00      	cmp	r3, #0
 8025f3c:	d10a      	bne.n	8025f54 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8025f3e:	2300      	movs	r3, #0
 8025f40:	613b      	str	r3, [r7, #16]
 8025f42:	68fb      	ldr	r3, [r7, #12]
 8025f44:	681b      	ldr	r3, [r3, #0]
 8025f46:	68db      	ldr	r3, [r3, #12]
 8025f48:	613b      	str	r3, [r7, #16]
 8025f4a:	68fb      	ldr	r3, [r7, #12]
 8025f4c:	681b      	ldr	r3, [r3, #0]
 8025f4e:	689b      	ldr	r3, [r3, #8]
 8025f50:	613b      	str	r3, [r7, #16]
 8025f52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8025f54:	68fb      	ldr	r3, [r7, #12]
 8025f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025f58:	2b00      	cmp	r3, #0
 8025f5a:	d002      	beq.n	8025f62 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8025f5c:	2301      	movs	r3, #1
 8025f5e:	77fb      	strb	r3, [r7, #31]
 8025f60:	e000      	b.n	8025f64 <HAL_SPI_Transmit+0x25e>
  }

error:
 8025f62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8025f64:	68fb      	ldr	r3, [r7, #12]
 8025f66:	2201      	movs	r2, #1
 8025f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8025f6c:	68fb      	ldr	r3, [r7, #12]
 8025f6e:	2200      	movs	r2, #0
 8025f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8025f74:	7ffb      	ldrb	r3, [r7, #31]
}
 8025f76:	4618      	mov	r0, r3
 8025f78:	3720      	adds	r7, #32
 8025f7a:	46bd      	mov	sp, r7
 8025f7c:	bd80      	pop	{r7, pc}

08025f7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8025f7e:	b580      	push	{r7, lr}
 8025f80:	b088      	sub	sp, #32
 8025f82:	af02      	add	r7, sp, #8
 8025f84:	60f8      	str	r0, [r7, #12]
 8025f86:	60b9      	str	r1, [r7, #8]
 8025f88:	603b      	str	r3, [r7, #0]
 8025f8a:	4613      	mov	r3, r2
 8025f8c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8025f8e:	2300      	movs	r3, #0
 8025f90:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8025f92:	68fb      	ldr	r3, [r7, #12]
 8025f94:	685b      	ldr	r3, [r3, #4]
 8025f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8025f9a:	d112      	bne.n	8025fc2 <HAL_SPI_Receive+0x44>
 8025f9c:	68fb      	ldr	r3, [r7, #12]
 8025f9e:	689b      	ldr	r3, [r3, #8]
 8025fa0:	2b00      	cmp	r3, #0
 8025fa2:	d10e      	bne.n	8025fc2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8025fa4:	68fb      	ldr	r3, [r7, #12]
 8025fa6:	2204      	movs	r2, #4
 8025fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8025fac:	88fa      	ldrh	r2, [r7, #6]
 8025fae:	683b      	ldr	r3, [r7, #0]
 8025fb0:	9300      	str	r3, [sp, #0]
 8025fb2:	4613      	mov	r3, r2
 8025fb4:	68ba      	ldr	r2, [r7, #8]
 8025fb6:	68b9      	ldr	r1, [r7, #8]
 8025fb8:	68f8      	ldr	r0, [r7, #12]
 8025fba:	f000 f8f1 	bl	80261a0 <HAL_SPI_TransmitReceive>
 8025fbe:	4603      	mov	r3, r0
 8025fc0:	e0ea      	b.n	8026198 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8025fc2:	68fb      	ldr	r3, [r7, #12]
 8025fc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8025fc8:	2b01      	cmp	r3, #1
 8025fca:	d101      	bne.n	8025fd0 <HAL_SPI_Receive+0x52>
 8025fcc:	2302      	movs	r3, #2
 8025fce:	e0e3      	b.n	8026198 <HAL_SPI_Receive+0x21a>
 8025fd0:	68fb      	ldr	r3, [r7, #12]
 8025fd2:	2201      	movs	r2, #1
 8025fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8025fd8:	f7fc ff0c 	bl	8022df4 <HAL_GetTick>
 8025fdc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8025fde:	68fb      	ldr	r3, [r7, #12]
 8025fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8025fe4:	b2db      	uxtb	r3, r3
 8025fe6:	2b01      	cmp	r3, #1
 8025fe8:	d002      	beq.n	8025ff0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8025fea:	2302      	movs	r3, #2
 8025fec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8025fee:	e0ca      	b.n	8026186 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8025ff0:	68bb      	ldr	r3, [r7, #8]
 8025ff2:	2b00      	cmp	r3, #0
 8025ff4:	d002      	beq.n	8025ffc <HAL_SPI_Receive+0x7e>
 8025ff6:	88fb      	ldrh	r3, [r7, #6]
 8025ff8:	2b00      	cmp	r3, #0
 8025ffa:	d102      	bne.n	8026002 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8025ffc:	2301      	movs	r3, #1
 8025ffe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8026000:	e0c1      	b.n	8026186 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8026002:	68fb      	ldr	r3, [r7, #12]
 8026004:	2204      	movs	r2, #4
 8026006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802600a:	68fb      	ldr	r3, [r7, #12]
 802600c:	2200      	movs	r2, #0
 802600e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8026010:	68fb      	ldr	r3, [r7, #12]
 8026012:	68ba      	ldr	r2, [r7, #8]
 8026014:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8026016:	68fb      	ldr	r3, [r7, #12]
 8026018:	88fa      	ldrh	r2, [r7, #6]
 802601a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 802601c:	68fb      	ldr	r3, [r7, #12]
 802601e:	88fa      	ldrh	r2, [r7, #6]
 8026020:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8026022:	68fb      	ldr	r3, [r7, #12]
 8026024:	2200      	movs	r2, #0
 8026026:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8026028:	68fb      	ldr	r3, [r7, #12]
 802602a:	2200      	movs	r2, #0
 802602c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 802602e:	68fb      	ldr	r3, [r7, #12]
 8026030:	2200      	movs	r2, #0
 8026032:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8026034:	68fb      	ldr	r3, [r7, #12]
 8026036:	2200      	movs	r2, #0
 8026038:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 802603a:	68fb      	ldr	r3, [r7, #12]
 802603c:	2200      	movs	r2, #0
 802603e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8026040:	68fb      	ldr	r3, [r7, #12]
 8026042:	689b      	ldr	r3, [r3, #8]
 8026044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8026048:	d10f      	bne.n	802606a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 802604a:	68fb      	ldr	r3, [r7, #12]
 802604c:	681b      	ldr	r3, [r3, #0]
 802604e:	681a      	ldr	r2, [r3, #0]
 8026050:	68fb      	ldr	r3, [r7, #12]
 8026052:	681b      	ldr	r3, [r3, #0]
 8026054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8026058:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 802605a:	68fb      	ldr	r3, [r7, #12]
 802605c:	681b      	ldr	r3, [r3, #0]
 802605e:	681a      	ldr	r2, [r3, #0]
 8026060:	68fb      	ldr	r3, [r7, #12]
 8026062:	681b      	ldr	r3, [r3, #0]
 8026064:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8026068:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802606a:	68fb      	ldr	r3, [r7, #12]
 802606c:	681b      	ldr	r3, [r3, #0]
 802606e:	681b      	ldr	r3, [r3, #0]
 8026070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026074:	2b40      	cmp	r3, #64	; 0x40
 8026076:	d007      	beq.n	8026088 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8026078:	68fb      	ldr	r3, [r7, #12]
 802607a:	681b      	ldr	r3, [r3, #0]
 802607c:	681a      	ldr	r2, [r3, #0]
 802607e:	68fb      	ldr	r3, [r7, #12]
 8026080:	681b      	ldr	r3, [r3, #0]
 8026082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8026086:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8026088:	68fb      	ldr	r3, [r7, #12]
 802608a:	68db      	ldr	r3, [r3, #12]
 802608c:	2b00      	cmp	r3, #0
 802608e:	d162      	bne.n	8026156 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8026090:	e02e      	b.n	80260f0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8026092:	68fb      	ldr	r3, [r7, #12]
 8026094:	681b      	ldr	r3, [r3, #0]
 8026096:	689b      	ldr	r3, [r3, #8]
 8026098:	f003 0301 	and.w	r3, r3, #1
 802609c:	2b01      	cmp	r3, #1
 802609e:	d115      	bne.n	80260cc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80260a0:	68fb      	ldr	r3, [r7, #12]
 80260a2:	681b      	ldr	r3, [r3, #0]
 80260a4:	f103 020c 	add.w	r2, r3, #12
 80260a8:	68fb      	ldr	r3, [r7, #12]
 80260aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80260ac:	7812      	ldrb	r2, [r2, #0]
 80260ae:	b2d2      	uxtb	r2, r2
 80260b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80260b2:	68fb      	ldr	r3, [r7, #12]
 80260b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80260b6:	1c5a      	adds	r2, r3, #1
 80260b8:	68fb      	ldr	r3, [r7, #12]
 80260ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80260bc:	68fb      	ldr	r3, [r7, #12]
 80260be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80260c0:	b29b      	uxth	r3, r3
 80260c2:	3b01      	subs	r3, #1
 80260c4:	b29a      	uxth	r2, r3
 80260c6:	68fb      	ldr	r3, [r7, #12]
 80260c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80260ca:	e011      	b.n	80260f0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80260cc:	f7fc fe92 	bl	8022df4 <HAL_GetTick>
 80260d0:	4602      	mov	r2, r0
 80260d2:	693b      	ldr	r3, [r7, #16]
 80260d4:	1ad3      	subs	r3, r2, r3
 80260d6:	683a      	ldr	r2, [r7, #0]
 80260d8:	429a      	cmp	r2, r3
 80260da:	d803      	bhi.n	80260e4 <HAL_SPI_Receive+0x166>
 80260dc:	683b      	ldr	r3, [r7, #0]
 80260de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80260e2:	d102      	bne.n	80260ea <HAL_SPI_Receive+0x16c>
 80260e4:	683b      	ldr	r3, [r7, #0]
 80260e6:	2b00      	cmp	r3, #0
 80260e8:	d102      	bne.n	80260f0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80260ea:	2303      	movs	r3, #3
 80260ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80260ee:	e04a      	b.n	8026186 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80260f0:	68fb      	ldr	r3, [r7, #12]
 80260f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80260f4:	b29b      	uxth	r3, r3
 80260f6:	2b00      	cmp	r3, #0
 80260f8:	d1cb      	bne.n	8026092 <HAL_SPI_Receive+0x114>
 80260fa:	e031      	b.n	8026160 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80260fc:	68fb      	ldr	r3, [r7, #12]
 80260fe:	681b      	ldr	r3, [r3, #0]
 8026100:	689b      	ldr	r3, [r3, #8]
 8026102:	f003 0301 	and.w	r3, r3, #1
 8026106:	2b01      	cmp	r3, #1
 8026108:	d113      	bne.n	8026132 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 802610a:	68fb      	ldr	r3, [r7, #12]
 802610c:	681b      	ldr	r3, [r3, #0]
 802610e:	68da      	ldr	r2, [r3, #12]
 8026110:	68fb      	ldr	r3, [r7, #12]
 8026112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026114:	b292      	uxth	r2, r2
 8026116:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8026118:	68fb      	ldr	r3, [r7, #12]
 802611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802611c:	1c9a      	adds	r2, r3, #2
 802611e:	68fb      	ldr	r3, [r7, #12]
 8026120:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8026122:	68fb      	ldr	r3, [r7, #12]
 8026124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8026126:	b29b      	uxth	r3, r3
 8026128:	3b01      	subs	r3, #1
 802612a:	b29a      	uxth	r2, r3
 802612c:	68fb      	ldr	r3, [r7, #12]
 802612e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8026130:	e011      	b.n	8026156 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8026132:	f7fc fe5f 	bl	8022df4 <HAL_GetTick>
 8026136:	4602      	mov	r2, r0
 8026138:	693b      	ldr	r3, [r7, #16]
 802613a:	1ad3      	subs	r3, r2, r3
 802613c:	683a      	ldr	r2, [r7, #0]
 802613e:	429a      	cmp	r2, r3
 8026140:	d803      	bhi.n	802614a <HAL_SPI_Receive+0x1cc>
 8026142:	683b      	ldr	r3, [r7, #0]
 8026144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026148:	d102      	bne.n	8026150 <HAL_SPI_Receive+0x1d2>
 802614a:	683b      	ldr	r3, [r7, #0]
 802614c:	2b00      	cmp	r3, #0
 802614e:	d102      	bne.n	8026156 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8026150:	2303      	movs	r3, #3
 8026152:	75fb      	strb	r3, [r7, #23]
          goto error;
 8026154:	e017      	b.n	8026186 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8026156:	68fb      	ldr	r3, [r7, #12]
 8026158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802615a:	b29b      	uxth	r3, r3
 802615c:	2b00      	cmp	r3, #0
 802615e:	d1cd      	bne.n	80260fc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8026160:	693a      	ldr	r2, [r7, #16]
 8026162:	6839      	ldr	r1, [r7, #0]
 8026164:	68f8      	ldr	r0, [r7, #12]
 8026166:	f000 fa45 	bl	80265f4 <SPI_EndRxTransaction>
 802616a:	4603      	mov	r3, r0
 802616c:	2b00      	cmp	r3, #0
 802616e:	d002      	beq.n	8026176 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8026170:	68fb      	ldr	r3, [r7, #12]
 8026172:	2220      	movs	r2, #32
 8026174:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8026176:	68fb      	ldr	r3, [r7, #12]
 8026178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802617a:	2b00      	cmp	r3, #0
 802617c:	d002      	beq.n	8026184 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 802617e:	2301      	movs	r3, #1
 8026180:	75fb      	strb	r3, [r7, #23]
 8026182:	e000      	b.n	8026186 <HAL_SPI_Receive+0x208>
  }

error :
 8026184:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8026186:	68fb      	ldr	r3, [r7, #12]
 8026188:	2201      	movs	r2, #1
 802618a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 802618e:	68fb      	ldr	r3, [r7, #12]
 8026190:	2200      	movs	r2, #0
 8026192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8026196:	7dfb      	ldrb	r3, [r7, #23]
}
 8026198:	4618      	mov	r0, r3
 802619a:	3718      	adds	r7, #24
 802619c:	46bd      	mov	sp, r7
 802619e:	bd80      	pop	{r7, pc}

080261a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80261a0:	b580      	push	{r7, lr}
 80261a2:	b08c      	sub	sp, #48	; 0x30
 80261a4:	af00      	add	r7, sp, #0
 80261a6:	60f8      	str	r0, [r7, #12]
 80261a8:	60b9      	str	r1, [r7, #8]
 80261aa:	607a      	str	r2, [r7, #4]
 80261ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80261ae:	2301      	movs	r3, #1
 80261b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80261b2:	2300      	movs	r3, #0
 80261b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80261b8:	68fb      	ldr	r3, [r7, #12]
 80261ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80261be:	2b01      	cmp	r3, #1
 80261c0:	d101      	bne.n	80261c6 <HAL_SPI_TransmitReceive+0x26>
 80261c2:	2302      	movs	r3, #2
 80261c4:	e18a      	b.n	80264dc <HAL_SPI_TransmitReceive+0x33c>
 80261c6:	68fb      	ldr	r3, [r7, #12]
 80261c8:	2201      	movs	r2, #1
 80261ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80261ce:	f7fc fe11 	bl	8022df4 <HAL_GetTick>
 80261d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80261d4:	68fb      	ldr	r3, [r7, #12]
 80261d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80261da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80261de:	68fb      	ldr	r3, [r7, #12]
 80261e0:	685b      	ldr	r3, [r3, #4]
 80261e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80261e4:	887b      	ldrh	r3, [r7, #2]
 80261e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80261e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80261ec:	2b01      	cmp	r3, #1
 80261ee:	d00f      	beq.n	8026210 <HAL_SPI_TransmitReceive+0x70>
 80261f0:	69fb      	ldr	r3, [r7, #28]
 80261f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80261f6:	d107      	bne.n	8026208 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80261f8:	68fb      	ldr	r3, [r7, #12]
 80261fa:	689b      	ldr	r3, [r3, #8]
 80261fc:	2b00      	cmp	r3, #0
 80261fe:	d103      	bne.n	8026208 <HAL_SPI_TransmitReceive+0x68>
 8026200:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8026204:	2b04      	cmp	r3, #4
 8026206:	d003      	beq.n	8026210 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8026208:	2302      	movs	r3, #2
 802620a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 802620e:	e15b      	b.n	80264c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8026210:	68bb      	ldr	r3, [r7, #8]
 8026212:	2b00      	cmp	r3, #0
 8026214:	d005      	beq.n	8026222 <HAL_SPI_TransmitReceive+0x82>
 8026216:	687b      	ldr	r3, [r7, #4]
 8026218:	2b00      	cmp	r3, #0
 802621a:	d002      	beq.n	8026222 <HAL_SPI_TransmitReceive+0x82>
 802621c:	887b      	ldrh	r3, [r7, #2]
 802621e:	2b00      	cmp	r3, #0
 8026220:	d103      	bne.n	802622a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8026222:	2301      	movs	r3, #1
 8026224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8026228:	e14e      	b.n	80264c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802622a:	68fb      	ldr	r3, [r7, #12]
 802622c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8026230:	b2db      	uxtb	r3, r3
 8026232:	2b04      	cmp	r3, #4
 8026234:	d003      	beq.n	802623e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8026236:	68fb      	ldr	r3, [r7, #12]
 8026238:	2205      	movs	r2, #5
 802623a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802623e:	68fb      	ldr	r3, [r7, #12]
 8026240:	2200      	movs	r2, #0
 8026242:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8026244:	68fb      	ldr	r3, [r7, #12]
 8026246:	687a      	ldr	r2, [r7, #4]
 8026248:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 802624a:	68fb      	ldr	r3, [r7, #12]
 802624c:	887a      	ldrh	r2, [r7, #2]
 802624e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8026250:	68fb      	ldr	r3, [r7, #12]
 8026252:	887a      	ldrh	r2, [r7, #2]
 8026254:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8026256:	68fb      	ldr	r3, [r7, #12]
 8026258:	68ba      	ldr	r2, [r7, #8]
 802625a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 802625c:	68fb      	ldr	r3, [r7, #12]
 802625e:	887a      	ldrh	r2, [r7, #2]
 8026260:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8026262:	68fb      	ldr	r3, [r7, #12]
 8026264:	887a      	ldrh	r2, [r7, #2]
 8026266:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8026268:	68fb      	ldr	r3, [r7, #12]
 802626a:	2200      	movs	r2, #0
 802626c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 802626e:	68fb      	ldr	r3, [r7, #12]
 8026270:	2200      	movs	r2, #0
 8026272:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8026274:	68fb      	ldr	r3, [r7, #12]
 8026276:	681b      	ldr	r3, [r3, #0]
 8026278:	681b      	ldr	r3, [r3, #0]
 802627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802627e:	2b40      	cmp	r3, #64	; 0x40
 8026280:	d007      	beq.n	8026292 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8026282:	68fb      	ldr	r3, [r7, #12]
 8026284:	681b      	ldr	r3, [r3, #0]
 8026286:	681a      	ldr	r2, [r3, #0]
 8026288:	68fb      	ldr	r3, [r7, #12]
 802628a:	681b      	ldr	r3, [r3, #0]
 802628c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8026290:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8026292:	68fb      	ldr	r3, [r7, #12]
 8026294:	68db      	ldr	r3, [r3, #12]
 8026296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802629a:	d178      	bne.n	802638e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802629c:	68fb      	ldr	r3, [r7, #12]
 802629e:	685b      	ldr	r3, [r3, #4]
 80262a0:	2b00      	cmp	r3, #0
 80262a2:	d002      	beq.n	80262aa <HAL_SPI_TransmitReceive+0x10a>
 80262a4:	8b7b      	ldrh	r3, [r7, #26]
 80262a6:	2b01      	cmp	r3, #1
 80262a8:	d166      	bne.n	8026378 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80262aa:	68fb      	ldr	r3, [r7, #12]
 80262ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80262ae:	881a      	ldrh	r2, [r3, #0]
 80262b0:	68fb      	ldr	r3, [r7, #12]
 80262b2:	681b      	ldr	r3, [r3, #0]
 80262b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80262b6:	68fb      	ldr	r3, [r7, #12]
 80262b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80262ba:	1c9a      	adds	r2, r3, #2
 80262bc:	68fb      	ldr	r3, [r7, #12]
 80262be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80262c0:	68fb      	ldr	r3, [r7, #12]
 80262c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80262c4:	b29b      	uxth	r3, r3
 80262c6:	3b01      	subs	r3, #1
 80262c8:	b29a      	uxth	r2, r3
 80262ca:	68fb      	ldr	r3, [r7, #12]
 80262cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80262ce:	e053      	b.n	8026378 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80262d0:	68fb      	ldr	r3, [r7, #12]
 80262d2:	681b      	ldr	r3, [r3, #0]
 80262d4:	689b      	ldr	r3, [r3, #8]
 80262d6:	f003 0302 	and.w	r3, r3, #2
 80262da:	2b02      	cmp	r3, #2
 80262dc:	d11b      	bne.n	8026316 <HAL_SPI_TransmitReceive+0x176>
 80262de:	68fb      	ldr	r3, [r7, #12]
 80262e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80262e2:	b29b      	uxth	r3, r3
 80262e4:	2b00      	cmp	r3, #0
 80262e6:	d016      	beq.n	8026316 <HAL_SPI_TransmitReceive+0x176>
 80262e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80262ea:	2b01      	cmp	r3, #1
 80262ec:	d113      	bne.n	8026316 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80262ee:	68fb      	ldr	r3, [r7, #12]
 80262f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80262f2:	881a      	ldrh	r2, [r3, #0]
 80262f4:	68fb      	ldr	r3, [r7, #12]
 80262f6:	681b      	ldr	r3, [r3, #0]
 80262f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80262fa:	68fb      	ldr	r3, [r7, #12]
 80262fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80262fe:	1c9a      	adds	r2, r3, #2
 8026300:	68fb      	ldr	r3, [r7, #12]
 8026302:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8026304:	68fb      	ldr	r3, [r7, #12]
 8026306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8026308:	b29b      	uxth	r3, r3
 802630a:	3b01      	subs	r3, #1
 802630c:	b29a      	uxth	r2, r3
 802630e:	68fb      	ldr	r3, [r7, #12]
 8026310:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8026312:	2300      	movs	r3, #0
 8026314:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8026316:	68fb      	ldr	r3, [r7, #12]
 8026318:	681b      	ldr	r3, [r3, #0]
 802631a:	689b      	ldr	r3, [r3, #8]
 802631c:	f003 0301 	and.w	r3, r3, #1
 8026320:	2b01      	cmp	r3, #1
 8026322:	d119      	bne.n	8026358 <HAL_SPI_TransmitReceive+0x1b8>
 8026324:	68fb      	ldr	r3, [r7, #12]
 8026326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8026328:	b29b      	uxth	r3, r3
 802632a:	2b00      	cmp	r3, #0
 802632c:	d014      	beq.n	8026358 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 802632e:	68fb      	ldr	r3, [r7, #12]
 8026330:	681b      	ldr	r3, [r3, #0]
 8026332:	68da      	ldr	r2, [r3, #12]
 8026334:	68fb      	ldr	r3, [r7, #12]
 8026336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026338:	b292      	uxth	r2, r2
 802633a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802633c:	68fb      	ldr	r3, [r7, #12]
 802633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026340:	1c9a      	adds	r2, r3, #2
 8026342:	68fb      	ldr	r3, [r7, #12]
 8026344:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8026346:	68fb      	ldr	r3, [r7, #12]
 8026348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802634a:	b29b      	uxth	r3, r3
 802634c:	3b01      	subs	r3, #1
 802634e:	b29a      	uxth	r2, r3
 8026350:	68fb      	ldr	r3, [r7, #12]
 8026352:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8026354:	2301      	movs	r3, #1
 8026356:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8026358:	f7fc fd4c 	bl	8022df4 <HAL_GetTick>
 802635c:	4602      	mov	r2, r0
 802635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026360:	1ad3      	subs	r3, r2, r3
 8026362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026364:	429a      	cmp	r2, r3
 8026366:	d807      	bhi.n	8026378 <HAL_SPI_TransmitReceive+0x1d8>
 8026368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802636a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802636e:	d003      	beq.n	8026378 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8026370:	2303      	movs	r3, #3
 8026372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8026376:	e0a7      	b.n	80264c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8026378:	68fb      	ldr	r3, [r7, #12]
 802637a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802637c:	b29b      	uxth	r3, r3
 802637e:	2b00      	cmp	r3, #0
 8026380:	d1a6      	bne.n	80262d0 <HAL_SPI_TransmitReceive+0x130>
 8026382:	68fb      	ldr	r3, [r7, #12]
 8026384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8026386:	b29b      	uxth	r3, r3
 8026388:	2b00      	cmp	r3, #0
 802638a:	d1a1      	bne.n	80262d0 <HAL_SPI_TransmitReceive+0x130>
 802638c:	e07c      	b.n	8026488 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802638e:	68fb      	ldr	r3, [r7, #12]
 8026390:	685b      	ldr	r3, [r3, #4]
 8026392:	2b00      	cmp	r3, #0
 8026394:	d002      	beq.n	802639c <HAL_SPI_TransmitReceive+0x1fc>
 8026396:	8b7b      	ldrh	r3, [r7, #26]
 8026398:	2b01      	cmp	r3, #1
 802639a:	d16b      	bne.n	8026474 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802639c:	68fb      	ldr	r3, [r7, #12]
 802639e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80263a0:	68fb      	ldr	r3, [r7, #12]
 80263a2:	681b      	ldr	r3, [r3, #0]
 80263a4:	330c      	adds	r3, #12
 80263a6:	7812      	ldrb	r2, [r2, #0]
 80263a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80263aa:	68fb      	ldr	r3, [r7, #12]
 80263ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80263ae:	1c5a      	adds	r2, r3, #1
 80263b0:	68fb      	ldr	r3, [r7, #12]
 80263b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80263b4:	68fb      	ldr	r3, [r7, #12]
 80263b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80263b8:	b29b      	uxth	r3, r3
 80263ba:	3b01      	subs	r3, #1
 80263bc:	b29a      	uxth	r2, r3
 80263be:	68fb      	ldr	r3, [r7, #12]
 80263c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80263c2:	e057      	b.n	8026474 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80263c4:	68fb      	ldr	r3, [r7, #12]
 80263c6:	681b      	ldr	r3, [r3, #0]
 80263c8:	689b      	ldr	r3, [r3, #8]
 80263ca:	f003 0302 	and.w	r3, r3, #2
 80263ce:	2b02      	cmp	r3, #2
 80263d0:	d11c      	bne.n	802640c <HAL_SPI_TransmitReceive+0x26c>
 80263d2:	68fb      	ldr	r3, [r7, #12]
 80263d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80263d6:	b29b      	uxth	r3, r3
 80263d8:	2b00      	cmp	r3, #0
 80263da:	d017      	beq.n	802640c <HAL_SPI_TransmitReceive+0x26c>
 80263dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80263de:	2b01      	cmp	r3, #1
 80263e0:	d114      	bne.n	802640c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80263e2:	68fb      	ldr	r3, [r7, #12]
 80263e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80263e6:	68fb      	ldr	r3, [r7, #12]
 80263e8:	681b      	ldr	r3, [r3, #0]
 80263ea:	330c      	adds	r3, #12
 80263ec:	7812      	ldrb	r2, [r2, #0]
 80263ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80263f0:	68fb      	ldr	r3, [r7, #12]
 80263f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80263f4:	1c5a      	adds	r2, r3, #1
 80263f6:	68fb      	ldr	r3, [r7, #12]
 80263f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80263fa:	68fb      	ldr	r3, [r7, #12]
 80263fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80263fe:	b29b      	uxth	r3, r3
 8026400:	3b01      	subs	r3, #1
 8026402:	b29a      	uxth	r2, r3
 8026404:	68fb      	ldr	r3, [r7, #12]
 8026406:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8026408:	2300      	movs	r3, #0
 802640a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802640c:	68fb      	ldr	r3, [r7, #12]
 802640e:	681b      	ldr	r3, [r3, #0]
 8026410:	689b      	ldr	r3, [r3, #8]
 8026412:	f003 0301 	and.w	r3, r3, #1
 8026416:	2b01      	cmp	r3, #1
 8026418:	d119      	bne.n	802644e <HAL_SPI_TransmitReceive+0x2ae>
 802641a:	68fb      	ldr	r3, [r7, #12]
 802641c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802641e:	b29b      	uxth	r3, r3
 8026420:	2b00      	cmp	r3, #0
 8026422:	d014      	beq.n	802644e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8026424:	68fb      	ldr	r3, [r7, #12]
 8026426:	681b      	ldr	r3, [r3, #0]
 8026428:	68da      	ldr	r2, [r3, #12]
 802642a:	68fb      	ldr	r3, [r7, #12]
 802642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802642e:	b2d2      	uxtb	r2, r2
 8026430:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8026432:	68fb      	ldr	r3, [r7, #12]
 8026434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026436:	1c5a      	adds	r2, r3, #1
 8026438:	68fb      	ldr	r3, [r7, #12]
 802643a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802643c:	68fb      	ldr	r3, [r7, #12]
 802643e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8026440:	b29b      	uxth	r3, r3
 8026442:	3b01      	subs	r3, #1
 8026444:	b29a      	uxth	r2, r3
 8026446:	68fb      	ldr	r3, [r7, #12]
 8026448:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802644a:	2301      	movs	r3, #1
 802644c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 802644e:	f7fc fcd1 	bl	8022df4 <HAL_GetTick>
 8026452:	4602      	mov	r2, r0
 8026454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026456:	1ad3      	subs	r3, r2, r3
 8026458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802645a:	429a      	cmp	r2, r3
 802645c:	d803      	bhi.n	8026466 <HAL_SPI_TransmitReceive+0x2c6>
 802645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026464:	d102      	bne.n	802646c <HAL_SPI_TransmitReceive+0x2cc>
 8026466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026468:	2b00      	cmp	r3, #0
 802646a:	d103      	bne.n	8026474 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 802646c:	2303      	movs	r3, #3
 802646e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8026472:	e029      	b.n	80264c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8026474:	68fb      	ldr	r3, [r7, #12]
 8026476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8026478:	b29b      	uxth	r3, r3
 802647a:	2b00      	cmp	r3, #0
 802647c:	d1a2      	bne.n	80263c4 <HAL_SPI_TransmitReceive+0x224>
 802647e:	68fb      	ldr	r3, [r7, #12]
 8026480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8026482:	b29b      	uxth	r3, r3
 8026484:	2b00      	cmp	r3, #0
 8026486:	d19d      	bne.n	80263c4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8026488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802648a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802648c:	68f8      	ldr	r0, [r7, #12]
 802648e:	f000 f917 	bl	80266c0 <SPI_EndRxTxTransaction>
 8026492:	4603      	mov	r3, r0
 8026494:	2b00      	cmp	r3, #0
 8026496:	d006      	beq.n	80264a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8026498:	2301      	movs	r3, #1
 802649a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802649e:	68fb      	ldr	r3, [r7, #12]
 80264a0:	2220      	movs	r2, #32
 80264a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80264a4:	e010      	b.n	80264c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80264a6:	68fb      	ldr	r3, [r7, #12]
 80264a8:	689b      	ldr	r3, [r3, #8]
 80264aa:	2b00      	cmp	r3, #0
 80264ac:	d10b      	bne.n	80264c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80264ae:	2300      	movs	r3, #0
 80264b0:	617b      	str	r3, [r7, #20]
 80264b2:	68fb      	ldr	r3, [r7, #12]
 80264b4:	681b      	ldr	r3, [r3, #0]
 80264b6:	68db      	ldr	r3, [r3, #12]
 80264b8:	617b      	str	r3, [r7, #20]
 80264ba:	68fb      	ldr	r3, [r7, #12]
 80264bc:	681b      	ldr	r3, [r3, #0]
 80264be:	689b      	ldr	r3, [r3, #8]
 80264c0:	617b      	str	r3, [r7, #20]
 80264c2:	697b      	ldr	r3, [r7, #20]
 80264c4:	e000      	b.n	80264c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80264c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80264c8:	68fb      	ldr	r3, [r7, #12]
 80264ca:	2201      	movs	r2, #1
 80264cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80264d0:	68fb      	ldr	r3, [r7, #12]
 80264d2:	2200      	movs	r2, #0
 80264d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80264d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80264dc:	4618      	mov	r0, r3
 80264de:	3730      	adds	r7, #48	; 0x30
 80264e0:	46bd      	mov	sp, r7
 80264e2:	bd80      	pop	{r7, pc}

080264e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80264e4:	b580      	push	{r7, lr}
 80264e6:	b088      	sub	sp, #32
 80264e8:	af00      	add	r7, sp, #0
 80264ea:	60f8      	str	r0, [r7, #12]
 80264ec:	60b9      	str	r1, [r7, #8]
 80264ee:	603b      	str	r3, [r7, #0]
 80264f0:	4613      	mov	r3, r2
 80264f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80264f4:	f7fc fc7e 	bl	8022df4 <HAL_GetTick>
 80264f8:	4602      	mov	r2, r0
 80264fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80264fc:	1a9b      	subs	r3, r3, r2
 80264fe:	683a      	ldr	r2, [r7, #0]
 8026500:	4413      	add	r3, r2
 8026502:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8026504:	f7fc fc76 	bl	8022df4 <HAL_GetTick>
 8026508:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 802650a:	4b39      	ldr	r3, [pc, #228]	; (80265f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 802650c:	681b      	ldr	r3, [r3, #0]
 802650e:	015b      	lsls	r3, r3, #5
 8026510:	0d1b      	lsrs	r3, r3, #20
 8026512:	69fa      	ldr	r2, [r7, #28]
 8026514:	fb02 f303 	mul.w	r3, r2, r3
 8026518:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802651a:	e054      	b.n	80265c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 802651c:	683b      	ldr	r3, [r7, #0]
 802651e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026522:	d050      	beq.n	80265c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8026524:	f7fc fc66 	bl	8022df4 <HAL_GetTick>
 8026528:	4602      	mov	r2, r0
 802652a:	69bb      	ldr	r3, [r7, #24]
 802652c:	1ad3      	subs	r3, r2, r3
 802652e:	69fa      	ldr	r2, [r7, #28]
 8026530:	429a      	cmp	r2, r3
 8026532:	d902      	bls.n	802653a <SPI_WaitFlagStateUntilTimeout+0x56>
 8026534:	69fb      	ldr	r3, [r7, #28]
 8026536:	2b00      	cmp	r3, #0
 8026538:	d13d      	bne.n	80265b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802653a:	68fb      	ldr	r3, [r7, #12]
 802653c:	681b      	ldr	r3, [r3, #0]
 802653e:	685a      	ldr	r2, [r3, #4]
 8026540:	68fb      	ldr	r3, [r7, #12]
 8026542:	681b      	ldr	r3, [r3, #0]
 8026544:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8026548:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802654a:	68fb      	ldr	r3, [r7, #12]
 802654c:	685b      	ldr	r3, [r3, #4]
 802654e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8026552:	d111      	bne.n	8026578 <SPI_WaitFlagStateUntilTimeout+0x94>
 8026554:	68fb      	ldr	r3, [r7, #12]
 8026556:	689b      	ldr	r3, [r3, #8]
 8026558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802655c:	d004      	beq.n	8026568 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802655e:	68fb      	ldr	r3, [r7, #12]
 8026560:	689b      	ldr	r3, [r3, #8]
 8026562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8026566:	d107      	bne.n	8026578 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8026568:	68fb      	ldr	r3, [r7, #12]
 802656a:	681b      	ldr	r3, [r3, #0]
 802656c:	681a      	ldr	r2, [r3, #0]
 802656e:	68fb      	ldr	r3, [r7, #12]
 8026570:	681b      	ldr	r3, [r3, #0]
 8026572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8026576:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8026578:	68fb      	ldr	r3, [r7, #12]
 802657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802657c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8026580:	d10f      	bne.n	80265a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8026582:	68fb      	ldr	r3, [r7, #12]
 8026584:	681b      	ldr	r3, [r3, #0]
 8026586:	681a      	ldr	r2, [r3, #0]
 8026588:	68fb      	ldr	r3, [r7, #12]
 802658a:	681b      	ldr	r3, [r3, #0]
 802658c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8026590:	601a      	str	r2, [r3, #0]
 8026592:	68fb      	ldr	r3, [r7, #12]
 8026594:	681b      	ldr	r3, [r3, #0]
 8026596:	681a      	ldr	r2, [r3, #0]
 8026598:	68fb      	ldr	r3, [r7, #12]
 802659a:	681b      	ldr	r3, [r3, #0]
 802659c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80265a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80265a2:	68fb      	ldr	r3, [r7, #12]
 80265a4:	2201      	movs	r2, #1
 80265a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80265aa:	68fb      	ldr	r3, [r7, #12]
 80265ac:	2200      	movs	r2, #0
 80265ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80265b2:	2303      	movs	r3, #3
 80265b4:	e017      	b.n	80265e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80265b6:	697b      	ldr	r3, [r7, #20]
 80265b8:	2b00      	cmp	r3, #0
 80265ba:	d101      	bne.n	80265c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80265bc:	2300      	movs	r3, #0
 80265be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80265c0:	697b      	ldr	r3, [r7, #20]
 80265c2:	3b01      	subs	r3, #1
 80265c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80265c6:	68fb      	ldr	r3, [r7, #12]
 80265c8:	681b      	ldr	r3, [r3, #0]
 80265ca:	689a      	ldr	r2, [r3, #8]
 80265cc:	68bb      	ldr	r3, [r7, #8]
 80265ce:	4013      	ands	r3, r2
 80265d0:	68ba      	ldr	r2, [r7, #8]
 80265d2:	429a      	cmp	r2, r3
 80265d4:	bf0c      	ite	eq
 80265d6:	2301      	moveq	r3, #1
 80265d8:	2300      	movne	r3, #0
 80265da:	b2db      	uxtb	r3, r3
 80265dc:	461a      	mov	r2, r3
 80265de:	79fb      	ldrb	r3, [r7, #7]
 80265e0:	429a      	cmp	r2, r3
 80265e2:	d19b      	bne.n	802651c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80265e4:	2300      	movs	r3, #0
}
 80265e6:	4618      	mov	r0, r3
 80265e8:	3720      	adds	r7, #32
 80265ea:	46bd      	mov	sp, r7
 80265ec:	bd80      	pop	{r7, pc}
 80265ee:	bf00      	nop
 80265f0:	20000080 	.word	0x20000080

080265f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80265f4:	b580      	push	{r7, lr}
 80265f6:	b086      	sub	sp, #24
 80265f8:	af02      	add	r7, sp, #8
 80265fa:	60f8      	str	r0, [r7, #12]
 80265fc:	60b9      	str	r1, [r7, #8]
 80265fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8026600:	68fb      	ldr	r3, [r7, #12]
 8026602:	685b      	ldr	r3, [r3, #4]
 8026604:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8026608:	d111      	bne.n	802662e <SPI_EndRxTransaction+0x3a>
 802660a:	68fb      	ldr	r3, [r7, #12]
 802660c:	689b      	ldr	r3, [r3, #8]
 802660e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8026612:	d004      	beq.n	802661e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8026614:	68fb      	ldr	r3, [r7, #12]
 8026616:	689b      	ldr	r3, [r3, #8]
 8026618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802661c:	d107      	bne.n	802662e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 802661e:	68fb      	ldr	r3, [r7, #12]
 8026620:	681b      	ldr	r3, [r3, #0]
 8026622:	681a      	ldr	r2, [r3, #0]
 8026624:	68fb      	ldr	r3, [r7, #12]
 8026626:	681b      	ldr	r3, [r3, #0]
 8026628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802662c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802662e:	68fb      	ldr	r3, [r7, #12]
 8026630:	685b      	ldr	r3, [r3, #4]
 8026632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8026636:	d12a      	bne.n	802668e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8026638:	68fb      	ldr	r3, [r7, #12]
 802663a:	689b      	ldr	r3, [r3, #8]
 802663c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8026640:	d012      	beq.n	8026668 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8026642:	687b      	ldr	r3, [r7, #4]
 8026644:	9300      	str	r3, [sp, #0]
 8026646:	68bb      	ldr	r3, [r7, #8]
 8026648:	2200      	movs	r2, #0
 802664a:	2180      	movs	r1, #128	; 0x80
 802664c:	68f8      	ldr	r0, [r7, #12]
 802664e:	f7ff ff49 	bl	80264e4 <SPI_WaitFlagStateUntilTimeout>
 8026652:	4603      	mov	r3, r0
 8026654:	2b00      	cmp	r3, #0
 8026656:	d02d      	beq.n	80266b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8026658:	68fb      	ldr	r3, [r7, #12]
 802665a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802665c:	f043 0220 	orr.w	r2, r3, #32
 8026660:	68fb      	ldr	r3, [r7, #12]
 8026662:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8026664:	2303      	movs	r3, #3
 8026666:	e026      	b.n	80266b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8026668:	687b      	ldr	r3, [r7, #4]
 802666a:	9300      	str	r3, [sp, #0]
 802666c:	68bb      	ldr	r3, [r7, #8]
 802666e:	2200      	movs	r2, #0
 8026670:	2101      	movs	r1, #1
 8026672:	68f8      	ldr	r0, [r7, #12]
 8026674:	f7ff ff36 	bl	80264e4 <SPI_WaitFlagStateUntilTimeout>
 8026678:	4603      	mov	r3, r0
 802667a:	2b00      	cmp	r3, #0
 802667c:	d01a      	beq.n	80266b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802667e:	68fb      	ldr	r3, [r7, #12]
 8026680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026682:	f043 0220 	orr.w	r2, r3, #32
 8026686:	68fb      	ldr	r3, [r7, #12]
 8026688:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 802668a:	2303      	movs	r3, #3
 802668c:	e013      	b.n	80266b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802668e:	687b      	ldr	r3, [r7, #4]
 8026690:	9300      	str	r3, [sp, #0]
 8026692:	68bb      	ldr	r3, [r7, #8]
 8026694:	2200      	movs	r2, #0
 8026696:	2101      	movs	r1, #1
 8026698:	68f8      	ldr	r0, [r7, #12]
 802669a:	f7ff ff23 	bl	80264e4 <SPI_WaitFlagStateUntilTimeout>
 802669e:	4603      	mov	r3, r0
 80266a0:	2b00      	cmp	r3, #0
 80266a2:	d007      	beq.n	80266b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80266a4:	68fb      	ldr	r3, [r7, #12]
 80266a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80266a8:	f043 0220 	orr.w	r2, r3, #32
 80266ac:	68fb      	ldr	r3, [r7, #12]
 80266ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80266b0:	2303      	movs	r3, #3
 80266b2:	e000      	b.n	80266b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80266b4:	2300      	movs	r3, #0
}
 80266b6:	4618      	mov	r0, r3
 80266b8:	3710      	adds	r7, #16
 80266ba:	46bd      	mov	sp, r7
 80266bc:	bd80      	pop	{r7, pc}
	...

080266c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80266c0:	b580      	push	{r7, lr}
 80266c2:	b088      	sub	sp, #32
 80266c4:	af02      	add	r7, sp, #8
 80266c6:	60f8      	str	r0, [r7, #12]
 80266c8:	60b9      	str	r1, [r7, #8]
 80266ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80266cc:	4b1b      	ldr	r3, [pc, #108]	; (802673c <SPI_EndRxTxTransaction+0x7c>)
 80266ce:	681b      	ldr	r3, [r3, #0]
 80266d0:	4a1b      	ldr	r2, [pc, #108]	; (8026740 <SPI_EndRxTxTransaction+0x80>)
 80266d2:	fba2 2303 	umull	r2, r3, r2, r3
 80266d6:	0d5b      	lsrs	r3, r3, #21
 80266d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80266dc:	fb02 f303 	mul.w	r3, r2, r3
 80266e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80266e2:	68fb      	ldr	r3, [r7, #12]
 80266e4:	685b      	ldr	r3, [r3, #4]
 80266e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80266ea:	d112      	bne.n	8026712 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80266ec:	687b      	ldr	r3, [r7, #4]
 80266ee:	9300      	str	r3, [sp, #0]
 80266f0:	68bb      	ldr	r3, [r7, #8]
 80266f2:	2200      	movs	r2, #0
 80266f4:	2180      	movs	r1, #128	; 0x80
 80266f6:	68f8      	ldr	r0, [r7, #12]
 80266f8:	f7ff fef4 	bl	80264e4 <SPI_WaitFlagStateUntilTimeout>
 80266fc:	4603      	mov	r3, r0
 80266fe:	2b00      	cmp	r3, #0
 8026700:	d016      	beq.n	8026730 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8026702:	68fb      	ldr	r3, [r7, #12]
 8026704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026706:	f043 0220 	orr.w	r2, r3, #32
 802670a:	68fb      	ldr	r3, [r7, #12]
 802670c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802670e:	2303      	movs	r3, #3
 8026710:	e00f      	b.n	8026732 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8026712:	697b      	ldr	r3, [r7, #20]
 8026714:	2b00      	cmp	r3, #0
 8026716:	d00a      	beq.n	802672e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8026718:	697b      	ldr	r3, [r7, #20]
 802671a:	3b01      	subs	r3, #1
 802671c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 802671e:	68fb      	ldr	r3, [r7, #12]
 8026720:	681b      	ldr	r3, [r3, #0]
 8026722:	689b      	ldr	r3, [r3, #8]
 8026724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026728:	2b80      	cmp	r3, #128	; 0x80
 802672a:	d0f2      	beq.n	8026712 <SPI_EndRxTxTransaction+0x52>
 802672c:	e000      	b.n	8026730 <SPI_EndRxTxTransaction+0x70>
        break;
 802672e:	bf00      	nop
  }

  return HAL_OK;
 8026730:	2300      	movs	r3, #0
}
 8026732:	4618      	mov	r0, r3
 8026734:	3718      	adds	r7, #24
 8026736:	46bd      	mov	sp, r7
 8026738:	bd80      	pop	{r7, pc}
 802673a:	bf00      	nop
 802673c:	20000080 	.word	0x20000080
 8026740:	165e9f81 	.word	0x165e9f81

08026744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8026744:	b580      	push	{r7, lr}
 8026746:	b082      	sub	sp, #8
 8026748:	af00      	add	r7, sp, #0
 802674a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802674c:	687b      	ldr	r3, [r7, #4]
 802674e:	2b00      	cmp	r3, #0
 8026750:	d101      	bne.n	8026756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8026752:	2301      	movs	r3, #1
 8026754:	e041      	b.n	80267da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8026756:	687b      	ldr	r3, [r7, #4]
 8026758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802675c:	b2db      	uxtb	r3, r3
 802675e:	2b00      	cmp	r3, #0
 8026760:	d106      	bne.n	8026770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8026762:	687b      	ldr	r3, [r7, #4]
 8026764:	2200      	movs	r2, #0
 8026766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802676a:	6878      	ldr	r0, [r7, #4]
 802676c:	f7f1 f94a 	bl	8017a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8026770:	687b      	ldr	r3, [r7, #4]
 8026772:	2202      	movs	r2, #2
 8026774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8026778:	687b      	ldr	r3, [r7, #4]
 802677a:	681a      	ldr	r2, [r3, #0]
 802677c:	687b      	ldr	r3, [r7, #4]
 802677e:	3304      	adds	r3, #4
 8026780:	4619      	mov	r1, r3
 8026782:	4610      	mov	r0, r2
 8026784:	f001 f858 	bl	8027838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8026788:	687b      	ldr	r3, [r7, #4]
 802678a:	2201      	movs	r2, #1
 802678c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8026790:	687b      	ldr	r3, [r7, #4]
 8026792:	2201      	movs	r2, #1
 8026794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8026798:	687b      	ldr	r3, [r7, #4]
 802679a:	2201      	movs	r2, #1
 802679c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80267a0:	687b      	ldr	r3, [r7, #4]
 80267a2:	2201      	movs	r2, #1
 80267a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80267a8:	687b      	ldr	r3, [r7, #4]
 80267aa:	2201      	movs	r2, #1
 80267ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80267b0:	687b      	ldr	r3, [r7, #4]
 80267b2:	2201      	movs	r2, #1
 80267b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80267b8:	687b      	ldr	r3, [r7, #4]
 80267ba:	2201      	movs	r2, #1
 80267bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80267c0:	687b      	ldr	r3, [r7, #4]
 80267c2:	2201      	movs	r2, #1
 80267c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80267c8:	687b      	ldr	r3, [r7, #4]
 80267ca:	2201      	movs	r2, #1
 80267cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80267d0:	687b      	ldr	r3, [r7, #4]
 80267d2:	2201      	movs	r2, #1
 80267d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80267d8:	2300      	movs	r3, #0
}
 80267da:	4618      	mov	r0, r3
 80267dc:	3708      	adds	r7, #8
 80267de:	46bd      	mov	sp, r7
 80267e0:	bd80      	pop	{r7, pc}
	...

080267e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80267e4:	b480      	push	{r7}
 80267e6:	b085      	sub	sp, #20
 80267e8:	af00      	add	r7, sp, #0
 80267ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80267ec:	687b      	ldr	r3, [r7, #4]
 80267ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80267f2:	b2db      	uxtb	r3, r3
 80267f4:	2b01      	cmp	r3, #1
 80267f6:	d001      	beq.n	80267fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80267f8:	2301      	movs	r3, #1
 80267fa:	e046      	b.n	802688a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80267fc:	687b      	ldr	r3, [r7, #4]
 80267fe:	2202      	movs	r2, #2
 8026800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8026804:	687b      	ldr	r3, [r7, #4]
 8026806:	681b      	ldr	r3, [r3, #0]
 8026808:	4a23      	ldr	r2, [pc, #140]	; (8026898 <HAL_TIM_Base_Start+0xb4>)
 802680a:	4293      	cmp	r3, r2
 802680c:	d022      	beq.n	8026854 <HAL_TIM_Base_Start+0x70>
 802680e:	687b      	ldr	r3, [r7, #4]
 8026810:	681b      	ldr	r3, [r3, #0]
 8026812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8026816:	d01d      	beq.n	8026854 <HAL_TIM_Base_Start+0x70>
 8026818:	687b      	ldr	r3, [r7, #4]
 802681a:	681b      	ldr	r3, [r3, #0]
 802681c:	4a1f      	ldr	r2, [pc, #124]	; (802689c <HAL_TIM_Base_Start+0xb8>)
 802681e:	4293      	cmp	r3, r2
 8026820:	d018      	beq.n	8026854 <HAL_TIM_Base_Start+0x70>
 8026822:	687b      	ldr	r3, [r7, #4]
 8026824:	681b      	ldr	r3, [r3, #0]
 8026826:	4a1e      	ldr	r2, [pc, #120]	; (80268a0 <HAL_TIM_Base_Start+0xbc>)
 8026828:	4293      	cmp	r3, r2
 802682a:	d013      	beq.n	8026854 <HAL_TIM_Base_Start+0x70>
 802682c:	687b      	ldr	r3, [r7, #4]
 802682e:	681b      	ldr	r3, [r3, #0]
 8026830:	4a1c      	ldr	r2, [pc, #112]	; (80268a4 <HAL_TIM_Base_Start+0xc0>)
 8026832:	4293      	cmp	r3, r2
 8026834:	d00e      	beq.n	8026854 <HAL_TIM_Base_Start+0x70>
 8026836:	687b      	ldr	r3, [r7, #4]
 8026838:	681b      	ldr	r3, [r3, #0]
 802683a:	4a1b      	ldr	r2, [pc, #108]	; (80268a8 <HAL_TIM_Base_Start+0xc4>)
 802683c:	4293      	cmp	r3, r2
 802683e:	d009      	beq.n	8026854 <HAL_TIM_Base_Start+0x70>
 8026840:	687b      	ldr	r3, [r7, #4]
 8026842:	681b      	ldr	r3, [r3, #0]
 8026844:	4a19      	ldr	r2, [pc, #100]	; (80268ac <HAL_TIM_Base_Start+0xc8>)
 8026846:	4293      	cmp	r3, r2
 8026848:	d004      	beq.n	8026854 <HAL_TIM_Base_Start+0x70>
 802684a:	687b      	ldr	r3, [r7, #4]
 802684c:	681b      	ldr	r3, [r3, #0]
 802684e:	4a18      	ldr	r2, [pc, #96]	; (80268b0 <HAL_TIM_Base_Start+0xcc>)
 8026850:	4293      	cmp	r3, r2
 8026852:	d111      	bne.n	8026878 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8026854:	687b      	ldr	r3, [r7, #4]
 8026856:	681b      	ldr	r3, [r3, #0]
 8026858:	689b      	ldr	r3, [r3, #8]
 802685a:	f003 0307 	and.w	r3, r3, #7
 802685e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8026860:	68fb      	ldr	r3, [r7, #12]
 8026862:	2b06      	cmp	r3, #6
 8026864:	d010      	beq.n	8026888 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8026866:	687b      	ldr	r3, [r7, #4]
 8026868:	681b      	ldr	r3, [r3, #0]
 802686a:	681a      	ldr	r2, [r3, #0]
 802686c:	687b      	ldr	r3, [r7, #4]
 802686e:	681b      	ldr	r3, [r3, #0]
 8026870:	f042 0201 	orr.w	r2, r2, #1
 8026874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8026876:	e007      	b.n	8026888 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8026878:	687b      	ldr	r3, [r7, #4]
 802687a:	681b      	ldr	r3, [r3, #0]
 802687c:	681a      	ldr	r2, [r3, #0]
 802687e:	687b      	ldr	r3, [r7, #4]
 8026880:	681b      	ldr	r3, [r3, #0]
 8026882:	f042 0201 	orr.w	r2, r2, #1
 8026886:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8026888:	2300      	movs	r3, #0
}
 802688a:	4618      	mov	r0, r3
 802688c:	3714      	adds	r7, #20
 802688e:	46bd      	mov	sp, r7
 8026890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026894:	4770      	bx	lr
 8026896:	bf00      	nop
 8026898:	40010000 	.word	0x40010000
 802689c:	40000400 	.word	0x40000400
 80268a0:	40000800 	.word	0x40000800
 80268a4:	40000c00 	.word	0x40000c00
 80268a8:	40010400 	.word	0x40010400
 80268ac:	40014000 	.word	0x40014000
 80268b0:	40001800 	.word	0x40001800

080268b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80268b4:	b480      	push	{r7}
 80268b6:	b085      	sub	sp, #20
 80268b8:	af00      	add	r7, sp, #0
 80268ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80268bc:	687b      	ldr	r3, [r7, #4]
 80268be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80268c2:	b2db      	uxtb	r3, r3
 80268c4:	2b01      	cmp	r3, #1
 80268c6:	d001      	beq.n	80268cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80268c8:	2301      	movs	r3, #1
 80268ca:	e04e      	b.n	802696a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80268cc:	687b      	ldr	r3, [r7, #4]
 80268ce:	2202      	movs	r2, #2
 80268d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80268d4:	687b      	ldr	r3, [r7, #4]
 80268d6:	681b      	ldr	r3, [r3, #0]
 80268d8:	68da      	ldr	r2, [r3, #12]
 80268da:	687b      	ldr	r3, [r7, #4]
 80268dc:	681b      	ldr	r3, [r3, #0]
 80268de:	f042 0201 	orr.w	r2, r2, #1
 80268e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80268e4:	687b      	ldr	r3, [r7, #4]
 80268e6:	681b      	ldr	r3, [r3, #0]
 80268e8:	4a23      	ldr	r2, [pc, #140]	; (8026978 <HAL_TIM_Base_Start_IT+0xc4>)
 80268ea:	4293      	cmp	r3, r2
 80268ec:	d022      	beq.n	8026934 <HAL_TIM_Base_Start_IT+0x80>
 80268ee:	687b      	ldr	r3, [r7, #4]
 80268f0:	681b      	ldr	r3, [r3, #0]
 80268f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80268f6:	d01d      	beq.n	8026934 <HAL_TIM_Base_Start_IT+0x80>
 80268f8:	687b      	ldr	r3, [r7, #4]
 80268fa:	681b      	ldr	r3, [r3, #0]
 80268fc:	4a1f      	ldr	r2, [pc, #124]	; (802697c <HAL_TIM_Base_Start_IT+0xc8>)
 80268fe:	4293      	cmp	r3, r2
 8026900:	d018      	beq.n	8026934 <HAL_TIM_Base_Start_IT+0x80>
 8026902:	687b      	ldr	r3, [r7, #4]
 8026904:	681b      	ldr	r3, [r3, #0]
 8026906:	4a1e      	ldr	r2, [pc, #120]	; (8026980 <HAL_TIM_Base_Start_IT+0xcc>)
 8026908:	4293      	cmp	r3, r2
 802690a:	d013      	beq.n	8026934 <HAL_TIM_Base_Start_IT+0x80>
 802690c:	687b      	ldr	r3, [r7, #4]
 802690e:	681b      	ldr	r3, [r3, #0]
 8026910:	4a1c      	ldr	r2, [pc, #112]	; (8026984 <HAL_TIM_Base_Start_IT+0xd0>)
 8026912:	4293      	cmp	r3, r2
 8026914:	d00e      	beq.n	8026934 <HAL_TIM_Base_Start_IT+0x80>
 8026916:	687b      	ldr	r3, [r7, #4]
 8026918:	681b      	ldr	r3, [r3, #0]
 802691a:	4a1b      	ldr	r2, [pc, #108]	; (8026988 <HAL_TIM_Base_Start_IT+0xd4>)
 802691c:	4293      	cmp	r3, r2
 802691e:	d009      	beq.n	8026934 <HAL_TIM_Base_Start_IT+0x80>
 8026920:	687b      	ldr	r3, [r7, #4]
 8026922:	681b      	ldr	r3, [r3, #0]
 8026924:	4a19      	ldr	r2, [pc, #100]	; (802698c <HAL_TIM_Base_Start_IT+0xd8>)
 8026926:	4293      	cmp	r3, r2
 8026928:	d004      	beq.n	8026934 <HAL_TIM_Base_Start_IT+0x80>
 802692a:	687b      	ldr	r3, [r7, #4]
 802692c:	681b      	ldr	r3, [r3, #0]
 802692e:	4a18      	ldr	r2, [pc, #96]	; (8026990 <HAL_TIM_Base_Start_IT+0xdc>)
 8026930:	4293      	cmp	r3, r2
 8026932:	d111      	bne.n	8026958 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8026934:	687b      	ldr	r3, [r7, #4]
 8026936:	681b      	ldr	r3, [r3, #0]
 8026938:	689b      	ldr	r3, [r3, #8]
 802693a:	f003 0307 	and.w	r3, r3, #7
 802693e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8026940:	68fb      	ldr	r3, [r7, #12]
 8026942:	2b06      	cmp	r3, #6
 8026944:	d010      	beq.n	8026968 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8026946:	687b      	ldr	r3, [r7, #4]
 8026948:	681b      	ldr	r3, [r3, #0]
 802694a:	681a      	ldr	r2, [r3, #0]
 802694c:	687b      	ldr	r3, [r7, #4]
 802694e:	681b      	ldr	r3, [r3, #0]
 8026950:	f042 0201 	orr.w	r2, r2, #1
 8026954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8026956:	e007      	b.n	8026968 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8026958:	687b      	ldr	r3, [r7, #4]
 802695a:	681b      	ldr	r3, [r3, #0]
 802695c:	681a      	ldr	r2, [r3, #0]
 802695e:	687b      	ldr	r3, [r7, #4]
 8026960:	681b      	ldr	r3, [r3, #0]
 8026962:	f042 0201 	orr.w	r2, r2, #1
 8026966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8026968:	2300      	movs	r3, #0
}
 802696a:	4618      	mov	r0, r3
 802696c:	3714      	adds	r7, #20
 802696e:	46bd      	mov	sp, r7
 8026970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026974:	4770      	bx	lr
 8026976:	bf00      	nop
 8026978:	40010000 	.word	0x40010000
 802697c:	40000400 	.word	0x40000400
 8026980:	40000800 	.word	0x40000800
 8026984:	40000c00 	.word	0x40000c00
 8026988:	40010400 	.word	0x40010400
 802698c:	40014000 	.word	0x40014000
 8026990:	40001800 	.word	0x40001800

08026994 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8026994:	b580      	push	{r7, lr}
 8026996:	b082      	sub	sp, #8
 8026998:	af00      	add	r7, sp, #0
 802699a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802699c:	687b      	ldr	r3, [r7, #4]
 802699e:	2b00      	cmp	r3, #0
 80269a0:	d101      	bne.n	80269a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80269a2:	2301      	movs	r3, #1
 80269a4:	e041      	b.n	8026a2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80269a6:	687b      	ldr	r3, [r7, #4]
 80269a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80269ac:	b2db      	uxtb	r3, r3
 80269ae:	2b00      	cmp	r3, #0
 80269b0:	d106      	bne.n	80269c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80269b2:	687b      	ldr	r3, [r7, #4]
 80269b4:	2200      	movs	r2, #0
 80269b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80269ba:	6878      	ldr	r0, [r7, #4]
 80269bc:	f000 f839 	bl	8026a32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80269c0:	687b      	ldr	r3, [r7, #4]
 80269c2:	2202      	movs	r2, #2
 80269c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80269c8:	687b      	ldr	r3, [r7, #4]
 80269ca:	681a      	ldr	r2, [r3, #0]
 80269cc:	687b      	ldr	r3, [r7, #4]
 80269ce:	3304      	adds	r3, #4
 80269d0:	4619      	mov	r1, r3
 80269d2:	4610      	mov	r0, r2
 80269d4:	f000 ff30 	bl	8027838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80269d8:	687b      	ldr	r3, [r7, #4]
 80269da:	2201      	movs	r2, #1
 80269dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80269e0:	687b      	ldr	r3, [r7, #4]
 80269e2:	2201      	movs	r2, #1
 80269e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80269e8:	687b      	ldr	r3, [r7, #4]
 80269ea:	2201      	movs	r2, #1
 80269ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80269f0:	687b      	ldr	r3, [r7, #4]
 80269f2:	2201      	movs	r2, #1
 80269f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80269f8:	687b      	ldr	r3, [r7, #4]
 80269fa:	2201      	movs	r2, #1
 80269fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8026a00:	687b      	ldr	r3, [r7, #4]
 8026a02:	2201      	movs	r2, #1
 8026a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8026a08:	687b      	ldr	r3, [r7, #4]
 8026a0a:	2201      	movs	r2, #1
 8026a0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8026a10:	687b      	ldr	r3, [r7, #4]
 8026a12:	2201      	movs	r2, #1
 8026a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8026a18:	687b      	ldr	r3, [r7, #4]
 8026a1a:	2201      	movs	r2, #1
 8026a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8026a20:	687b      	ldr	r3, [r7, #4]
 8026a22:	2201      	movs	r2, #1
 8026a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8026a28:	2300      	movs	r3, #0
}
 8026a2a:	4618      	mov	r0, r3
 8026a2c:	3708      	adds	r7, #8
 8026a2e:	46bd      	mov	sp, r7
 8026a30:	bd80      	pop	{r7, pc}

08026a32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8026a32:	b480      	push	{r7}
 8026a34:	b083      	sub	sp, #12
 8026a36:	af00      	add	r7, sp, #0
 8026a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8026a3a:	bf00      	nop
 8026a3c:	370c      	adds	r7, #12
 8026a3e:	46bd      	mov	sp, r7
 8026a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a44:	4770      	bx	lr
	...

08026a48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8026a48:	b580      	push	{r7, lr}
 8026a4a:	b084      	sub	sp, #16
 8026a4c:	af00      	add	r7, sp, #0
 8026a4e:	6078      	str	r0, [r7, #4]
 8026a50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8026a52:	683b      	ldr	r3, [r7, #0]
 8026a54:	2b00      	cmp	r3, #0
 8026a56:	d109      	bne.n	8026a6c <HAL_TIM_PWM_Start+0x24>
 8026a58:	687b      	ldr	r3, [r7, #4]
 8026a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8026a5e:	b2db      	uxtb	r3, r3
 8026a60:	2b01      	cmp	r3, #1
 8026a62:	bf14      	ite	ne
 8026a64:	2301      	movne	r3, #1
 8026a66:	2300      	moveq	r3, #0
 8026a68:	b2db      	uxtb	r3, r3
 8026a6a:	e022      	b.n	8026ab2 <HAL_TIM_PWM_Start+0x6a>
 8026a6c:	683b      	ldr	r3, [r7, #0]
 8026a6e:	2b04      	cmp	r3, #4
 8026a70:	d109      	bne.n	8026a86 <HAL_TIM_PWM_Start+0x3e>
 8026a72:	687b      	ldr	r3, [r7, #4]
 8026a74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8026a78:	b2db      	uxtb	r3, r3
 8026a7a:	2b01      	cmp	r3, #1
 8026a7c:	bf14      	ite	ne
 8026a7e:	2301      	movne	r3, #1
 8026a80:	2300      	moveq	r3, #0
 8026a82:	b2db      	uxtb	r3, r3
 8026a84:	e015      	b.n	8026ab2 <HAL_TIM_PWM_Start+0x6a>
 8026a86:	683b      	ldr	r3, [r7, #0]
 8026a88:	2b08      	cmp	r3, #8
 8026a8a:	d109      	bne.n	8026aa0 <HAL_TIM_PWM_Start+0x58>
 8026a8c:	687b      	ldr	r3, [r7, #4]
 8026a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8026a92:	b2db      	uxtb	r3, r3
 8026a94:	2b01      	cmp	r3, #1
 8026a96:	bf14      	ite	ne
 8026a98:	2301      	movne	r3, #1
 8026a9a:	2300      	moveq	r3, #0
 8026a9c:	b2db      	uxtb	r3, r3
 8026a9e:	e008      	b.n	8026ab2 <HAL_TIM_PWM_Start+0x6a>
 8026aa0:	687b      	ldr	r3, [r7, #4]
 8026aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026aa6:	b2db      	uxtb	r3, r3
 8026aa8:	2b01      	cmp	r3, #1
 8026aaa:	bf14      	ite	ne
 8026aac:	2301      	movne	r3, #1
 8026aae:	2300      	moveq	r3, #0
 8026ab0:	b2db      	uxtb	r3, r3
 8026ab2:	2b00      	cmp	r3, #0
 8026ab4:	d001      	beq.n	8026aba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8026ab6:	2301      	movs	r3, #1
 8026ab8:	e07c      	b.n	8026bb4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8026aba:	683b      	ldr	r3, [r7, #0]
 8026abc:	2b00      	cmp	r3, #0
 8026abe:	d104      	bne.n	8026aca <HAL_TIM_PWM_Start+0x82>
 8026ac0:	687b      	ldr	r3, [r7, #4]
 8026ac2:	2202      	movs	r2, #2
 8026ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8026ac8:	e013      	b.n	8026af2 <HAL_TIM_PWM_Start+0xaa>
 8026aca:	683b      	ldr	r3, [r7, #0]
 8026acc:	2b04      	cmp	r3, #4
 8026ace:	d104      	bne.n	8026ada <HAL_TIM_PWM_Start+0x92>
 8026ad0:	687b      	ldr	r3, [r7, #4]
 8026ad2:	2202      	movs	r2, #2
 8026ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8026ad8:	e00b      	b.n	8026af2 <HAL_TIM_PWM_Start+0xaa>
 8026ada:	683b      	ldr	r3, [r7, #0]
 8026adc:	2b08      	cmp	r3, #8
 8026ade:	d104      	bne.n	8026aea <HAL_TIM_PWM_Start+0xa2>
 8026ae0:	687b      	ldr	r3, [r7, #4]
 8026ae2:	2202      	movs	r2, #2
 8026ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8026ae8:	e003      	b.n	8026af2 <HAL_TIM_PWM_Start+0xaa>
 8026aea:	687b      	ldr	r3, [r7, #4]
 8026aec:	2202      	movs	r2, #2
 8026aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8026af2:	687b      	ldr	r3, [r7, #4]
 8026af4:	681b      	ldr	r3, [r3, #0]
 8026af6:	2201      	movs	r2, #1
 8026af8:	6839      	ldr	r1, [r7, #0]
 8026afa:	4618      	mov	r0, r3
 8026afc:	f001 fb42 	bl	8028184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8026b00:	687b      	ldr	r3, [r7, #4]
 8026b02:	681b      	ldr	r3, [r3, #0]
 8026b04:	4a2d      	ldr	r2, [pc, #180]	; (8026bbc <HAL_TIM_PWM_Start+0x174>)
 8026b06:	4293      	cmp	r3, r2
 8026b08:	d004      	beq.n	8026b14 <HAL_TIM_PWM_Start+0xcc>
 8026b0a:	687b      	ldr	r3, [r7, #4]
 8026b0c:	681b      	ldr	r3, [r3, #0]
 8026b0e:	4a2c      	ldr	r2, [pc, #176]	; (8026bc0 <HAL_TIM_PWM_Start+0x178>)
 8026b10:	4293      	cmp	r3, r2
 8026b12:	d101      	bne.n	8026b18 <HAL_TIM_PWM_Start+0xd0>
 8026b14:	2301      	movs	r3, #1
 8026b16:	e000      	b.n	8026b1a <HAL_TIM_PWM_Start+0xd2>
 8026b18:	2300      	movs	r3, #0
 8026b1a:	2b00      	cmp	r3, #0
 8026b1c:	d007      	beq.n	8026b2e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8026b1e:	687b      	ldr	r3, [r7, #4]
 8026b20:	681b      	ldr	r3, [r3, #0]
 8026b22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8026b24:	687b      	ldr	r3, [r7, #4]
 8026b26:	681b      	ldr	r3, [r3, #0]
 8026b28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8026b2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8026b2e:	687b      	ldr	r3, [r7, #4]
 8026b30:	681b      	ldr	r3, [r3, #0]
 8026b32:	4a22      	ldr	r2, [pc, #136]	; (8026bbc <HAL_TIM_PWM_Start+0x174>)
 8026b34:	4293      	cmp	r3, r2
 8026b36:	d022      	beq.n	8026b7e <HAL_TIM_PWM_Start+0x136>
 8026b38:	687b      	ldr	r3, [r7, #4]
 8026b3a:	681b      	ldr	r3, [r3, #0]
 8026b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8026b40:	d01d      	beq.n	8026b7e <HAL_TIM_PWM_Start+0x136>
 8026b42:	687b      	ldr	r3, [r7, #4]
 8026b44:	681b      	ldr	r3, [r3, #0]
 8026b46:	4a1f      	ldr	r2, [pc, #124]	; (8026bc4 <HAL_TIM_PWM_Start+0x17c>)
 8026b48:	4293      	cmp	r3, r2
 8026b4a:	d018      	beq.n	8026b7e <HAL_TIM_PWM_Start+0x136>
 8026b4c:	687b      	ldr	r3, [r7, #4]
 8026b4e:	681b      	ldr	r3, [r3, #0]
 8026b50:	4a1d      	ldr	r2, [pc, #116]	; (8026bc8 <HAL_TIM_PWM_Start+0x180>)
 8026b52:	4293      	cmp	r3, r2
 8026b54:	d013      	beq.n	8026b7e <HAL_TIM_PWM_Start+0x136>
 8026b56:	687b      	ldr	r3, [r7, #4]
 8026b58:	681b      	ldr	r3, [r3, #0]
 8026b5a:	4a1c      	ldr	r2, [pc, #112]	; (8026bcc <HAL_TIM_PWM_Start+0x184>)
 8026b5c:	4293      	cmp	r3, r2
 8026b5e:	d00e      	beq.n	8026b7e <HAL_TIM_PWM_Start+0x136>
 8026b60:	687b      	ldr	r3, [r7, #4]
 8026b62:	681b      	ldr	r3, [r3, #0]
 8026b64:	4a16      	ldr	r2, [pc, #88]	; (8026bc0 <HAL_TIM_PWM_Start+0x178>)
 8026b66:	4293      	cmp	r3, r2
 8026b68:	d009      	beq.n	8026b7e <HAL_TIM_PWM_Start+0x136>
 8026b6a:	687b      	ldr	r3, [r7, #4]
 8026b6c:	681b      	ldr	r3, [r3, #0]
 8026b6e:	4a18      	ldr	r2, [pc, #96]	; (8026bd0 <HAL_TIM_PWM_Start+0x188>)
 8026b70:	4293      	cmp	r3, r2
 8026b72:	d004      	beq.n	8026b7e <HAL_TIM_PWM_Start+0x136>
 8026b74:	687b      	ldr	r3, [r7, #4]
 8026b76:	681b      	ldr	r3, [r3, #0]
 8026b78:	4a16      	ldr	r2, [pc, #88]	; (8026bd4 <HAL_TIM_PWM_Start+0x18c>)
 8026b7a:	4293      	cmp	r3, r2
 8026b7c:	d111      	bne.n	8026ba2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8026b7e:	687b      	ldr	r3, [r7, #4]
 8026b80:	681b      	ldr	r3, [r3, #0]
 8026b82:	689b      	ldr	r3, [r3, #8]
 8026b84:	f003 0307 	and.w	r3, r3, #7
 8026b88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8026b8a:	68fb      	ldr	r3, [r7, #12]
 8026b8c:	2b06      	cmp	r3, #6
 8026b8e:	d010      	beq.n	8026bb2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8026b90:	687b      	ldr	r3, [r7, #4]
 8026b92:	681b      	ldr	r3, [r3, #0]
 8026b94:	681a      	ldr	r2, [r3, #0]
 8026b96:	687b      	ldr	r3, [r7, #4]
 8026b98:	681b      	ldr	r3, [r3, #0]
 8026b9a:	f042 0201 	orr.w	r2, r2, #1
 8026b9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8026ba0:	e007      	b.n	8026bb2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8026ba2:	687b      	ldr	r3, [r7, #4]
 8026ba4:	681b      	ldr	r3, [r3, #0]
 8026ba6:	681a      	ldr	r2, [r3, #0]
 8026ba8:	687b      	ldr	r3, [r7, #4]
 8026baa:	681b      	ldr	r3, [r3, #0]
 8026bac:	f042 0201 	orr.w	r2, r2, #1
 8026bb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8026bb2:	2300      	movs	r3, #0
}
 8026bb4:	4618      	mov	r0, r3
 8026bb6:	3710      	adds	r7, #16
 8026bb8:	46bd      	mov	sp, r7
 8026bba:	bd80      	pop	{r7, pc}
 8026bbc:	40010000 	.word	0x40010000
 8026bc0:	40010400 	.word	0x40010400
 8026bc4:	40000400 	.word	0x40000400
 8026bc8:	40000800 	.word	0x40000800
 8026bcc:	40000c00 	.word	0x40000c00
 8026bd0:	40014000 	.word	0x40014000
 8026bd4:	40001800 	.word	0x40001800

08026bd8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8026bd8:	b580      	push	{r7, lr}
 8026bda:	b082      	sub	sp, #8
 8026bdc:	af00      	add	r7, sp, #0
 8026bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8026be0:	687b      	ldr	r3, [r7, #4]
 8026be2:	2b00      	cmp	r3, #0
 8026be4:	d101      	bne.n	8026bea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8026be6:	2301      	movs	r3, #1
 8026be8:	e041      	b.n	8026c6e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8026bea:	687b      	ldr	r3, [r7, #4]
 8026bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026bf0:	b2db      	uxtb	r3, r3
 8026bf2:	2b00      	cmp	r3, #0
 8026bf4:	d106      	bne.n	8026c04 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8026bf6:	687b      	ldr	r3, [r7, #4]
 8026bf8:	2200      	movs	r2, #0
 8026bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8026bfe:	6878      	ldr	r0, [r7, #4]
 8026c00:	f000 f839 	bl	8026c76 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8026c04:	687b      	ldr	r3, [r7, #4]
 8026c06:	2202      	movs	r2, #2
 8026c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8026c0c:	687b      	ldr	r3, [r7, #4]
 8026c0e:	681a      	ldr	r2, [r3, #0]
 8026c10:	687b      	ldr	r3, [r7, #4]
 8026c12:	3304      	adds	r3, #4
 8026c14:	4619      	mov	r1, r3
 8026c16:	4610      	mov	r0, r2
 8026c18:	f000 fe0e 	bl	8027838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8026c1c:	687b      	ldr	r3, [r7, #4]
 8026c1e:	2201      	movs	r2, #1
 8026c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8026c24:	687b      	ldr	r3, [r7, #4]
 8026c26:	2201      	movs	r2, #1
 8026c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8026c2c:	687b      	ldr	r3, [r7, #4]
 8026c2e:	2201      	movs	r2, #1
 8026c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8026c34:	687b      	ldr	r3, [r7, #4]
 8026c36:	2201      	movs	r2, #1
 8026c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8026c3c:	687b      	ldr	r3, [r7, #4]
 8026c3e:	2201      	movs	r2, #1
 8026c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8026c44:	687b      	ldr	r3, [r7, #4]
 8026c46:	2201      	movs	r2, #1
 8026c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8026c4c:	687b      	ldr	r3, [r7, #4]
 8026c4e:	2201      	movs	r2, #1
 8026c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8026c54:	687b      	ldr	r3, [r7, #4]
 8026c56:	2201      	movs	r2, #1
 8026c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8026c5c:	687b      	ldr	r3, [r7, #4]
 8026c5e:	2201      	movs	r2, #1
 8026c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8026c64:	687b      	ldr	r3, [r7, #4]
 8026c66:	2201      	movs	r2, #1
 8026c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8026c6c:	2300      	movs	r3, #0
}
 8026c6e:	4618      	mov	r0, r3
 8026c70:	3708      	adds	r7, #8
 8026c72:	46bd      	mov	sp, r7
 8026c74:	bd80      	pop	{r7, pc}

08026c76 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8026c76:	b480      	push	{r7}
 8026c78:	b083      	sub	sp, #12
 8026c7a:	af00      	add	r7, sp, #0
 8026c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8026c7e:	bf00      	nop
 8026c80:	370c      	adds	r7, #12
 8026c82:	46bd      	mov	sp, r7
 8026c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c88:	4770      	bx	lr
	...

08026c8c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8026c8c:	b580      	push	{r7, lr}
 8026c8e:	b084      	sub	sp, #16
 8026c90:	af00      	add	r7, sp, #0
 8026c92:	6078      	str	r0, [r7, #4]
 8026c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8026c96:	683b      	ldr	r3, [r7, #0]
 8026c98:	2b00      	cmp	r3, #0
 8026c9a:	d104      	bne.n	8026ca6 <HAL_TIM_IC_Start+0x1a>
 8026c9c:	687b      	ldr	r3, [r7, #4]
 8026c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8026ca2:	b2db      	uxtb	r3, r3
 8026ca4:	e013      	b.n	8026cce <HAL_TIM_IC_Start+0x42>
 8026ca6:	683b      	ldr	r3, [r7, #0]
 8026ca8:	2b04      	cmp	r3, #4
 8026caa:	d104      	bne.n	8026cb6 <HAL_TIM_IC_Start+0x2a>
 8026cac:	687b      	ldr	r3, [r7, #4]
 8026cae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8026cb2:	b2db      	uxtb	r3, r3
 8026cb4:	e00b      	b.n	8026cce <HAL_TIM_IC_Start+0x42>
 8026cb6:	683b      	ldr	r3, [r7, #0]
 8026cb8:	2b08      	cmp	r3, #8
 8026cba:	d104      	bne.n	8026cc6 <HAL_TIM_IC_Start+0x3a>
 8026cbc:	687b      	ldr	r3, [r7, #4]
 8026cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8026cc2:	b2db      	uxtb	r3, r3
 8026cc4:	e003      	b.n	8026cce <HAL_TIM_IC_Start+0x42>
 8026cc6:	687b      	ldr	r3, [r7, #4]
 8026cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026ccc:	b2db      	uxtb	r3, r3
 8026cce:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8026cd0:	683b      	ldr	r3, [r7, #0]
 8026cd2:	2b00      	cmp	r3, #0
 8026cd4:	d104      	bne.n	8026ce0 <HAL_TIM_IC_Start+0x54>
 8026cd6:	687b      	ldr	r3, [r7, #4]
 8026cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8026cdc:	b2db      	uxtb	r3, r3
 8026cde:	e013      	b.n	8026d08 <HAL_TIM_IC_Start+0x7c>
 8026ce0:	683b      	ldr	r3, [r7, #0]
 8026ce2:	2b04      	cmp	r3, #4
 8026ce4:	d104      	bne.n	8026cf0 <HAL_TIM_IC_Start+0x64>
 8026ce6:	687b      	ldr	r3, [r7, #4]
 8026ce8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8026cec:	b2db      	uxtb	r3, r3
 8026cee:	e00b      	b.n	8026d08 <HAL_TIM_IC_Start+0x7c>
 8026cf0:	683b      	ldr	r3, [r7, #0]
 8026cf2:	2b08      	cmp	r3, #8
 8026cf4:	d104      	bne.n	8026d00 <HAL_TIM_IC_Start+0x74>
 8026cf6:	687b      	ldr	r3, [r7, #4]
 8026cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8026cfc:	b2db      	uxtb	r3, r3
 8026cfe:	e003      	b.n	8026d08 <HAL_TIM_IC_Start+0x7c>
 8026d00:	687b      	ldr	r3, [r7, #4]
 8026d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8026d06:	b2db      	uxtb	r3, r3
 8026d08:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8026d0a:	7bfb      	ldrb	r3, [r7, #15]
 8026d0c:	2b01      	cmp	r3, #1
 8026d0e:	d102      	bne.n	8026d16 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8026d10:	7bbb      	ldrb	r3, [r7, #14]
 8026d12:	2b01      	cmp	r3, #1
 8026d14:	d001      	beq.n	8026d1a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8026d16:	2301      	movs	r3, #1
 8026d18:	e081      	b.n	8026e1e <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8026d1a:	683b      	ldr	r3, [r7, #0]
 8026d1c:	2b00      	cmp	r3, #0
 8026d1e:	d104      	bne.n	8026d2a <HAL_TIM_IC_Start+0x9e>
 8026d20:	687b      	ldr	r3, [r7, #4]
 8026d22:	2202      	movs	r2, #2
 8026d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8026d28:	e013      	b.n	8026d52 <HAL_TIM_IC_Start+0xc6>
 8026d2a:	683b      	ldr	r3, [r7, #0]
 8026d2c:	2b04      	cmp	r3, #4
 8026d2e:	d104      	bne.n	8026d3a <HAL_TIM_IC_Start+0xae>
 8026d30:	687b      	ldr	r3, [r7, #4]
 8026d32:	2202      	movs	r2, #2
 8026d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8026d38:	e00b      	b.n	8026d52 <HAL_TIM_IC_Start+0xc6>
 8026d3a:	683b      	ldr	r3, [r7, #0]
 8026d3c:	2b08      	cmp	r3, #8
 8026d3e:	d104      	bne.n	8026d4a <HAL_TIM_IC_Start+0xbe>
 8026d40:	687b      	ldr	r3, [r7, #4]
 8026d42:	2202      	movs	r2, #2
 8026d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8026d48:	e003      	b.n	8026d52 <HAL_TIM_IC_Start+0xc6>
 8026d4a:	687b      	ldr	r3, [r7, #4]
 8026d4c:	2202      	movs	r2, #2
 8026d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8026d52:	683b      	ldr	r3, [r7, #0]
 8026d54:	2b00      	cmp	r3, #0
 8026d56:	d104      	bne.n	8026d62 <HAL_TIM_IC_Start+0xd6>
 8026d58:	687b      	ldr	r3, [r7, #4]
 8026d5a:	2202      	movs	r2, #2
 8026d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8026d60:	e013      	b.n	8026d8a <HAL_TIM_IC_Start+0xfe>
 8026d62:	683b      	ldr	r3, [r7, #0]
 8026d64:	2b04      	cmp	r3, #4
 8026d66:	d104      	bne.n	8026d72 <HAL_TIM_IC_Start+0xe6>
 8026d68:	687b      	ldr	r3, [r7, #4]
 8026d6a:	2202      	movs	r2, #2
 8026d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8026d70:	e00b      	b.n	8026d8a <HAL_TIM_IC_Start+0xfe>
 8026d72:	683b      	ldr	r3, [r7, #0]
 8026d74:	2b08      	cmp	r3, #8
 8026d76:	d104      	bne.n	8026d82 <HAL_TIM_IC_Start+0xf6>
 8026d78:	687b      	ldr	r3, [r7, #4]
 8026d7a:	2202      	movs	r2, #2
 8026d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8026d80:	e003      	b.n	8026d8a <HAL_TIM_IC_Start+0xfe>
 8026d82:	687b      	ldr	r3, [r7, #4]
 8026d84:	2202      	movs	r2, #2
 8026d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8026d8a:	687b      	ldr	r3, [r7, #4]
 8026d8c:	681b      	ldr	r3, [r3, #0]
 8026d8e:	2201      	movs	r2, #1
 8026d90:	6839      	ldr	r1, [r7, #0]
 8026d92:	4618      	mov	r0, r3
 8026d94:	f001 f9f6 	bl	8028184 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8026d98:	687b      	ldr	r3, [r7, #4]
 8026d9a:	681b      	ldr	r3, [r3, #0]
 8026d9c:	4a22      	ldr	r2, [pc, #136]	; (8026e28 <HAL_TIM_IC_Start+0x19c>)
 8026d9e:	4293      	cmp	r3, r2
 8026da0:	d022      	beq.n	8026de8 <HAL_TIM_IC_Start+0x15c>
 8026da2:	687b      	ldr	r3, [r7, #4]
 8026da4:	681b      	ldr	r3, [r3, #0]
 8026da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8026daa:	d01d      	beq.n	8026de8 <HAL_TIM_IC_Start+0x15c>
 8026dac:	687b      	ldr	r3, [r7, #4]
 8026dae:	681b      	ldr	r3, [r3, #0]
 8026db0:	4a1e      	ldr	r2, [pc, #120]	; (8026e2c <HAL_TIM_IC_Start+0x1a0>)
 8026db2:	4293      	cmp	r3, r2
 8026db4:	d018      	beq.n	8026de8 <HAL_TIM_IC_Start+0x15c>
 8026db6:	687b      	ldr	r3, [r7, #4]
 8026db8:	681b      	ldr	r3, [r3, #0]
 8026dba:	4a1d      	ldr	r2, [pc, #116]	; (8026e30 <HAL_TIM_IC_Start+0x1a4>)
 8026dbc:	4293      	cmp	r3, r2
 8026dbe:	d013      	beq.n	8026de8 <HAL_TIM_IC_Start+0x15c>
 8026dc0:	687b      	ldr	r3, [r7, #4]
 8026dc2:	681b      	ldr	r3, [r3, #0]
 8026dc4:	4a1b      	ldr	r2, [pc, #108]	; (8026e34 <HAL_TIM_IC_Start+0x1a8>)
 8026dc6:	4293      	cmp	r3, r2
 8026dc8:	d00e      	beq.n	8026de8 <HAL_TIM_IC_Start+0x15c>
 8026dca:	687b      	ldr	r3, [r7, #4]
 8026dcc:	681b      	ldr	r3, [r3, #0]
 8026dce:	4a1a      	ldr	r2, [pc, #104]	; (8026e38 <HAL_TIM_IC_Start+0x1ac>)
 8026dd0:	4293      	cmp	r3, r2
 8026dd2:	d009      	beq.n	8026de8 <HAL_TIM_IC_Start+0x15c>
 8026dd4:	687b      	ldr	r3, [r7, #4]
 8026dd6:	681b      	ldr	r3, [r3, #0]
 8026dd8:	4a18      	ldr	r2, [pc, #96]	; (8026e3c <HAL_TIM_IC_Start+0x1b0>)
 8026dda:	4293      	cmp	r3, r2
 8026ddc:	d004      	beq.n	8026de8 <HAL_TIM_IC_Start+0x15c>
 8026dde:	687b      	ldr	r3, [r7, #4]
 8026de0:	681b      	ldr	r3, [r3, #0]
 8026de2:	4a17      	ldr	r2, [pc, #92]	; (8026e40 <HAL_TIM_IC_Start+0x1b4>)
 8026de4:	4293      	cmp	r3, r2
 8026de6:	d111      	bne.n	8026e0c <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8026de8:	687b      	ldr	r3, [r7, #4]
 8026dea:	681b      	ldr	r3, [r3, #0]
 8026dec:	689b      	ldr	r3, [r3, #8]
 8026dee:	f003 0307 	and.w	r3, r3, #7
 8026df2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8026df4:	68bb      	ldr	r3, [r7, #8]
 8026df6:	2b06      	cmp	r3, #6
 8026df8:	d010      	beq.n	8026e1c <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8026dfa:	687b      	ldr	r3, [r7, #4]
 8026dfc:	681b      	ldr	r3, [r3, #0]
 8026dfe:	681a      	ldr	r2, [r3, #0]
 8026e00:	687b      	ldr	r3, [r7, #4]
 8026e02:	681b      	ldr	r3, [r3, #0]
 8026e04:	f042 0201 	orr.w	r2, r2, #1
 8026e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8026e0a:	e007      	b.n	8026e1c <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8026e0c:	687b      	ldr	r3, [r7, #4]
 8026e0e:	681b      	ldr	r3, [r3, #0]
 8026e10:	681a      	ldr	r2, [r3, #0]
 8026e12:	687b      	ldr	r3, [r7, #4]
 8026e14:	681b      	ldr	r3, [r3, #0]
 8026e16:	f042 0201 	orr.w	r2, r2, #1
 8026e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8026e1c:	2300      	movs	r3, #0
}
 8026e1e:	4618      	mov	r0, r3
 8026e20:	3710      	adds	r7, #16
 8026e22:	46bd      	mov	sp, r7
 8026e24:	bd80      	pop	{r7, pc}
 8026e26:	bf00      	nop
 8026e28:	40010000 	.word	0x40010000
 8026e2c:	40000400 	.word	0x40000400
 8026e30:	40000800 	.word	0x40000800
 8026e34:	40000c00 	.word	0x40000c00
 8026e38:	40010400 	.word	0x40010400
 8026e3c:	40014000 	.word	0x40014000
 8026e40:	40001800 	.word	0x40001800

08026e44 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8026e44:	b580      	push	{r7, lr}
 8026e46:	b084      	sub	sp, #16
 8026e48:	af00      	add	r7, sp, #0
 8026e4a:	6078      	str	r0, [r7, #4]
 8026e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8026e4e:	2300      	movs	r3, #0
 8026e50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8026e52:	683b      	ldr	r3, [r7, #0]
 8026e54:	2b00      	cmp	r3, #0
 8026e56:	d104      	bne.n	8026e62 <HAL_TIM_IC_Start_IT+0x1e>
 8026e58:	687b      	ldr	r3, [r7, #4]
 8026e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8026e5e:	b2db      	uxtb	r3, r3
 8026e60:	e013      	b.n	8026e8a <HAL_TIM_IC_Start_IT+0x46>
 8026e62:	683b      	ldr	r3, [r7, #0]
 8026e64:	2b04      	cmp	r3, #4
 8026e66:	d104      	bne.n	8026e72 <HAL_TIM_IC_Start_IT+0x2e>
 8026e68:	687b      	ldr	r3, [r7, #4]
 8026e6a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8026e6e:	b2db      	uxtb	r3, r3
 8026e70:	e00b      	b.n	8026e8a <HAL_TIM_IC_Start_IT+0x46>
 8026e72:	683b      	ldr	r3, [r7, #0]
 8026e74:	2b08      	cmp	r3, #8
 8026e76:	d104      	bne.n	8026e82 <HAL_TIM_IC_Start_IT+0x3e>
 8026e78:	687b      	ldr	r3, [r7, #4]
 8026e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8026e7e:	b2db      	uxtb	r3, r3
 8026e80:	e003      	b.n	8026e8a <HAL_TIM_IC_Start_IT+0x46>
 8026e82:	687b      	ldr	r3, [r7, #4]
 8026e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026e88:	b2db      	uxtb	r3, r3
 8026e8a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8026e8c:	683b      	ldr	r3, [r7, #0]
 8026e8e:	2b00      	cmp	r3, #0
 8026e90:	d104      	bne.n	8026e9c <HAL_TIM_IC_Start_IT+0x58>
 8026e92:	687b      	ldr	r3, [r7, #4]
 8026e94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8026e98:	b2db      	uxtb	r3, r3
 8026e9a:	e013      	b.n	8026ec4 <HAL_TIM_IC_Start_IT+0x80>
 8026e9c:	683b      	ldr	r3, [r7, #0]
 8026e9e:	2b04      	cmp	r3, #4
 8026ea0:	d104      	bne.n	8026eac <HAL_TIM_IC_Start_IT+0x68>
 8026ea2:	687b      	ldr	r3, [r7, #4]
 8026ea4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8026ea8:	b2db      	uxtb	r3, r3
 8026eaa:	e00b      	b.n	8026ec4 <HAL_TIM_IC_Start_IT+0x80>
 8026eac:	683b      	ldr	r3, [r7, #0]
 8026eae:	2b08      	cmp	r3, #8
 8026eb0:	d104      	bne.n	8026ebc <HAL_TIM_IC_Start_IT+0x78>
 8026eb2:	687b      	ldr	r3, [r7, #4]
 8026eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8026eb8:	b2db      	uxtb	r3, r3
 8026eba:	e003      	b.n	8026ec4 <HAL_TIM_IC_Start_IT+0x80>
 8026ebc:	687b      	ldr	r3, [r7, #4]
 8026ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8026ec2:	b2db      	uxtb	r3, r3
 8026ec4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8026ec6:	7bbb      	ldrb	r3, [r7, #14]
 8026ec8:	2b01      	cmp	r3, #1
 8026eca:	d102      	bne.n	8026ed2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8026ecc:	7b7b      	ldrb	r3, [r7, #13]
 8026ece:	2b01      	cmp	r3, #1
 8026ed0:	d001      	beq.n	8026ed6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8026ed2:	2301      	movs	r3, #1
 8026ed4:	e0cc      	b.n	8027070 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8026ed6:	683b      	ldr	r3, [r7, #0]
 8026ed8:	2b00      	cmp	r3, #0
 8026eda:	d104      	bne.n	8026ee6 <HAL_TIM_IC_Start_IT+0xa2>
 8026edc:	687b      	ldr	r3, [r7, #4]
 8026ede:	2202      	movs	r2, #2
 8026ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8026ee4:	e013      	b.n	8026f0e <HAL_TIM_IC_Start_IT+0xca>
 8026ee6:	683b      	ldr	r3, [r7, #0]
 8026ee8:	2b04      	cmp	r3, #4
 8026eea:	d104      	bne.n	8026ef6 <HAL_TIM_IC_Start_IT+0xb2>
 8026eec:	687b      	ldr	r3, [r7, #4]
 8026eee:	2202      	movs	r2, #2
 8026ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8026ef4:	e00b      	b.n	8026f0e <HAL_TIM_IC_Start_IT+0xca>
 8026ef6:	683b      	ldr	r3, [r7, #0]
 8026ef8:	2b08      	cmp	r3, #8
 8026efa:	d104      	bne.n	8026f06 <HAL_TIM_IC_Start_IT+0xc2>
 8026efc:	687b      	ldr	r3, [r7, #4]
 8026efe:	2202      	movs	r2, #2
 8026f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8026f04:	e003      	b.n	8026f0e <HAL_TIM_IC_Start_IT+0xca>
 8026f06:	687b      	ldr	r3, [r7, #4]
 8026f08:	2202      	movs	r2, #2
 8026f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8026f0e:	683b      	ldr	r3, [r7, #0]
 8026f10:	2b00      	cmp	r3, #0
 8026f12:	d104      	bne.n	8026f1e <HAL_TIM_IC_Start_IT+0xda>
 8026f14:	687b      	ldr	r3, [r7, #4]
 8026f16:	2202      	movs	r2, #2
 8026f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8026f1c:	e013      	b.n	8026f46 <HAL_TIM_IC_Start_IT+0x102>
 8026f1e:	683b      	ldr	r3, [r7, #0]
 8026f20:	2b04      	cmp	r3, #4
 8026f22:	d104      	bne.n	8026f2e <HAL_TIM_IC_Start_IT+0xea>
 8026f24:	687b      	ldr	r3, [r7, #4]
 8026f26:	2202      	movs	r2, #2
 8026f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8026f2c:	e00b      	b.n	8026f46 <HAL_TIM_IC_Start_IT+0x102>
 8026f2e:	683b      	ldr	r3, [r7, #0]
 8026f30:	2b08      	cmp	r3, #8
 8026f32:	d104      	bne.n	8026f3e <HAL_TIM_IC_Start_IT+0xfa>
 8026f34:	687b      	ldr	r3, [r7, #4]
 8026f36:	2202      	movs	r2, #2
 8026f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8026f3c:	e003      	b.n	8026f46 <HAL_TIM_IC_Start_IT+0x102>
 8026f3e:	687b      	ldr	r3, [r7, #4]
 8026f40:	2202      	movs	r2, #2
 8026f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8026f46:	683b      	ldr	r3, [r7, #0]
 8026f48:	2b0c      	cmp	r3, #12
 8026f4a:	d841      	bhi.n	8026fd0 <HAL_TIM_IC_Start_IT+0x18c>
 8026f4c:	a201      	add	r2, pc, #4	; (adr r2, 8026f54 <HAL_TIM_IC_Start_IT+0x110>)
 8026f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026f52:	bf00      	nop
 8026f54:	08026f89 	.word	0x08026f89
 8026f58:	08026fd1 	.word	0x08026fd1
 8026f5c:	08026fd1 	.word	0x08026fd1
 8026f60:	08026fd1 	.word	0x08026fd1
 8026f64:	08026f9b 	.word	0x08026f9b
 8026f68:	08026fd1 	.word	0x08026fd1
 8026f6c:	08026fd1 	.word	0x08026fd1
 8026f70:	08026fd1 	.word	0x08026fd1
 8026f74:	08026fad 	.word	0x08026fad
 8026f78:	08026fd1 	.word	0x08026fd1
 8026f7c:	08026fd1 	.word	0x08026fd1
 8026f80:	08026fd1 	.word	0x08026fd1
 8026f84:	08026fbf 	.word	0x08026fbf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8026f88:	687b      	ldr	r3, [r7, #4]
 8026f8a:	681b      	ldr	r3, [r3, #0]
 8026f8c:	68da      	ldr	r2, [r3, #12]
 8026f8e:	687b      	ldr	r3, [r7, #4]
 8026f90:	681b      	ldr	r3, [r3, #0]
 8026f92:	f042 0202 	orr.w	r2, r2, #2
 8026f96:	60da      	str	r2, [r3, #12]
      break;
 8026f98:	e01d      	b.n	8026fd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8026f9a:	687b      	ldr	r3, [r7, #4]
 8026f9c:	681b      	ldr	r3, [r3, #0]
 8026f9e:	68da      	ldr	r2, [r3, #12]
 8026fa0:	687b      	ldr	r3, [r7, #4]
 8026fa2:	681b      	ldr	r3, [r3, #0]
 8026fa4:	f042 0204 	orr.w	r2, r2, #4
 8026fa8:	60da      	str	r2, [r3, #12]
      break;
 8026faa:	e014      	b.n	8026fd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8026fac:	687b      	ldr	r3, [r7, #4]
 8026fae:	681b      	ldr	r3, [r3, #0]
 8026fb0:	68da      	ldr	r2, [r3, #12]
 8026fb2:	687b      	ldr	r3, [r7, #4]
 8026fb4:	681b      	ldr	r3, [r3, #0]
 8026fb6:	f042 0208 	orr.w	r2, r2, #8
 8026fba:	60da      	str	r2, [r3, #12]
      break;
 8026fbc:	e00b      	b.n	8026fd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8026fbe:	687b      	ldr	r3, [r7, #4]
 8026fc0:	681b      	ldr	r3, [r3, #0]
 8026fc2:	68da      	ldr	r2, [r3, #12]
 8026fc4:	687b      	ldr	r3, [r7, #4]
 8026fc6:	681b      	ldr	r3, [r3, #0]
 8026fc8:	f042 0210 	orr.w	r2, r2, #16
 8026fcc:	60da      	str	r2, [r3, #12]
      break;
 8026fce:	e002      	b.n	8026fd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8026fd0:	2301      	movs	r3, #1
 8026fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8026fd4:	bf00      	nop
  }

  if (status == HAL_OK)
 8026fd6:	7bfb      	ldrb	r3, [r7, #15]
 8026fd8:	2b00      	cmp	r3, #0
 8026fda:	d148      	bne.n	802706e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8026fdc:	687b      	ldr	r3, [r7, #4]
 8026fde:	681b      	ldr	r3, [r3, #0]
 8026fe0:	2201      	movs	r2, #1
 8026fe2:	6839      	ldr	r1, [r7, #0]
 8026fe4:	4618      	mov	r0, r3
 8026fe6:	f001 f8cd 	bl	8028184 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8026fea:	687b      	ldr	r3, [r7, #4]
 8026fec:	681b      	ldr	r3, [r3, #0]
 8026fee:	4a22      	ldr	r2, [pc, #136]	; (8027078 <HAL_TIM_IC_Start_IT+0x234>)
 8026ff0:	4293      	cmp	r3, r2
 8026ff2:	d022      	beq.n	802703a <HAL_TIM_IC_Start_IT+0x1f6>
 8026ff4:	687b      	ldr	r3, [r7, #4]
 8026ff6:	681b      	ldr	r3, [r3, #0]
 8026ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8026ffc:	d01d      	beq.n	802703a <HAL_TIM_IC_Start_IT+0x1f6>
 8026ffe:	687b      	ldr	r3, [r7, #4]
 8027000:	681b      	ldr	r3, [r3, #0]
 8027002:	4a1e      	ldr	r2, [pc, #120]	; (802707c <HAL_TIM_IC_Start_IT+0x238>)
 8027004:	4293      	cmp	r3, r2
 8027006:	d018      	beq.n	802703a <HAL_TIM_IC_Start_IT+0x1f6>
 8027008:	687b      	ldr	r3, [r7, #4]
 802700a:	681b      	ldr	r3, [r3, #0]
 802700c:	4a1c      	ldr	r2, [pc, #112]	; (8027080 <HAL_TIM_IC_Start_IT+0x23c>)
 802700e:	4293      	cmp	r3, r2
 8027010:	d013      	beq.n	802703a <HAL_TIM_IC_Start_IT+0x1f6>
 8027012:	687b      	ldr	r3, [r7, #4]
 8027014:	681b      	ldr	r3, [r3, #0]
 8027016:	4a1b      	ldr	r2, [pc, #108]	; (8027084 <HAL_TIM_IC_Start_IT+0x240>)
 8027018:	4293      	cmp	r3, r2
 802701a:	d00e      	beq.n	802703a <HAL_TIM_IC_Start_IT+0x1f6>
 802701c:	687b      	ldr	r3, [r7, #4]
 802701e:	681b      	ldr	r3, [r3, #0]
 8027020:	4a19      	ldr	r2, [pc, #100]	; (8027088 <HAL_TIM_IC_Start_IT+0x244>)
 8027022:	4293      	cmp	r3, r2
 8027024:	d009      	beq.n	802703a <HAL_TIM_IC_Start_IT+0x1f6>
 8027026:	687b      	ldr	r3, [r7, #4]
 8027028:	681b      	ldr	r3, [r3, #0]
 802702a:	4a18      	ldr	r2, [pc, #96]	; (802708c <HAL_TIM_IC_Start_IT+0x248>)
 802702c:	4293      	cmp	r3, r2
 802702e:	d004      	beq.n	802703a <HAL_TIM_IC_Start_IT+0x1f6>
 8027030:	687b      	ldr	r3, [r7, #4]
 8027032:	681b      	ldr	r3, [r3, #0]
 8027034:	4a16      	ldr	r2, [pc, #88]	; (8027090 <HAL_TIM_IC_Start_IT+0x24c>)
 8027036:	4293      	cmp	r3, r2
 8027038:	d111      	bne.n	802705e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802703a:	687b      	ldr	r3, [r7, #4]
 802703c:	681b      	ldr	r3, [r3, #0]
 802703e:	689b      	ldr	r3, [r3, #8]
 8027040:	f003 0307 	and.w	r3, r3, #7
 8027044:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8027046:	68bb      	ldr	r3, [r7, #8]
 8027048:	2b06      	cmp	r3, #6
 802704a:	d010      	beq.n	802706e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 802704c:	687b      	ldr	r3, [r7, #4]
 802704e:	681b      	ldr	r3, [r3, #0]
 8027050:	681a      	ldr	r2, [r3, #0]
 8027052:	687b      	ldr	r3, [r7, #4]
 8027054:	681b      	ldr	r3, [r3, #0]
 8027056:	f042 0201 	orr.w	r2, r2, #1
 802705a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802705c:	e007      	b.n	802706e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 802705e:	687b      	ldr	r3, [r7, #4]
 8027060:	681b      	ldr	r3, [r3, #0]
 8027062:	681a      	ldr	r2, [r3, #0]
 8027064:	687b      	ldr	r3, [r7, #4]
 8027066:	681b      	ldr	r3, [r3, #0]
 8027068:	f042 0201 	orr.w	r2, r2, #1
 802706c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 802706e:	7bfb      	ldrb	r3, [r7, #15]
}
 8027070:	4618      	mov	r0, r3
 8027072:	3710      	adds	r7, #16
 8027074:	46bd      	mov	sp, r7
 8027076:	bd80      	pop	{r7, pc}
 8027078:	40010000 	.word	0x40010000
 802707c:	40000400 	.word	0x40000400
 8027080:	40000800 	.word	0x40000800
 8027084:	40000c00 	.word	0x40000c00
 8027088:	40010400 	.word	0x40010400
 802708c:	40014000 	.word	0x40014000
 8027090:	40001800 	.word	0x40001800

08027094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8027094:	b580      	push	{r7, lr}
 8027096:	b082      	sub	sp, #8
 8027098:	af00      	add	r7, sp, #0
 802709a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 802709c:	687b      	ldr	r3, [r7, #4]
 802709e:	681b      	ldr	r3, [r3, #0]
 80270a0:	691b      	ldr	r3, [r3, #16]
 80270a2:	f003 0302 	and.w	r3, r3, #2
 80270a6:	2b02      	cmp	r3, #2
 80270a8:	d122      	bne.n	80270f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80270aa:	687b      	ldr	r3, [r7, #4]
 80270ac:	681b      	ldr	r3, [r3, #0]
 80270ae:	68db      	ldr	r3, [r3, #12]
 80270b0:	f003 0302 	and.w	r3, r3, #2
 80270b4:	2b02      	cmp	r3, #2
 80270b6:	d11b      	bne.n	80270f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80270b8:	687b      	ldr	r3, [r7, #4]
 80270ba:	681b      	ldr	r3, [r3, #0]
 80270bc:	f06f 0202 	mvn.w	r2, #2
 80270c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80270c2:	687b      	ldr	r3, [r7, #4]
 80270c4:	2201      	movs	r2, #1
 80270c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80270c8:	687b      	ldr	r3, [r7, #4]
 80270ca:	681b      	ldr	r3, [r3, #0]
 80270cc:	699b      	ldr	r3, [r3, #24]
 80270ce:	f003 0303 	and.w	r3, r3, #3
 80270d2:	2b00      	cmp	r3, #0
 80270d4:	d003      	beq.n	80270de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80270d6:	6878      	ldr	r0, [r7, #4]
 80270d8:	f7ed f97e 	bl	80143d8 <HAL_TIM_IC_CaptureCallback>
 80270dc:	e005      	b.n	80270ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80270de:	6878      	ldr	r0, [r7, #4]
 80270e0:	f000 fb8c 	bl	80277fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80270e4:	6878      	ldr	r0, [r7, #4]
 80270e6:	f000 fb93 	bl	8027810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80270ea:	687b      	ldr	r3, [r7, #4]
 80270ec:	2200      	movs	r2, #0
 80270ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80270f0:	687b      	ldr	r3, [r7, #4]
 80270f2:	681b      	ldr	r3, [r3, #0]
 80270f4:	691b      	ldr	r3, [r3, #16]
 80270f6:	f003 0304 	and.w	r3, r3, #4
 80270fa:	2b04      	cmp	r3, #4
 80270fc:	d122      	bne.n	8027144 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80270fe:	687b      	ldr	r3, [r7, #4]
 8027100:	681b      	ldr	r3, [r3, #0]
 8027102:	68db      	ldr	r3, [r3, #12]
 8027104:	f003 0304 	and.w	r3, r3, #4
 8027108:	2b04      	cmp	r3, #4
 802710a:	d11b      	bne.n	8027144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802710c:	687b      	ldr	r3, [r7, #4]
 802710e:	681b      	ldr	r3, [r3, #0]
 8027110:	f06f 0204 	mvn.w	r2, #4
 8027114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8027116:	687b      	ldr	r3, [r7, #4]
 8027118:	2202      	movs	r2, #2
 802711a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802711c:	687b      	ldr	r3, [r7, #4]
 802711e:	681b      	ldr	r3, [r3, #0]
 8027120:	699b      	ldr	r3, [r3, #24]
 8027122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027126:	2b00      	cmp	r3, #0
 8027128:	d003      	beq.n	8027132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802712a:	6878      	ldr	r0, [r7, #4]
 802712c:	f7ed f954 	bl	80143d8 <HAL_TIM_IC_CaptureCallback>
 8027130:	e005      	b.n	802713e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8027132:	6878      	ldr	r0, [r7, #4]
 8027134:	f000 fb62 	bl	80277fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8027138:	6878      	ldr	r0, [r7, #4]
 802713a:	f000 fb69 	bl	8027810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802713e:	687b      	ldr	r3, [r7, #4]
 8027140:	2200      	movs	r2, #0
 8027142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8027144:	687b      	ldr	r3, [r7, #4]
 8027146:	681b      	ldr	r3, [r3, #0]
 8027148:	691b      	ldr	r3, [r3, #16]
 802714a:	f003 0308 	and.w	r3, r3, #8
 802714e:	2b08      	cmp	r3, #8
 8027150:	d122      	bne.n	8027198 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8027152:	687b      	ldr	r3, [r7, #4]
 8027154:	681b      	ldr	r3, [r3, #0]
 8027156:	68db      	ldr	r3, [r3, #12]
 8027158:	f003 0308 	and.w	r3, r3, #8
 802715c:	2b08      	cmp	r3, #8
 802715e:	d11b      	bne.n	8027198 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8027160:	687b      	ldr	r3, [r7, #4]
 8027162:	681b      	ldr	r3, [r3, #0]
 8027164:	f06f 0208 	mvn.w	r2, #8
 8027168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802716a:	687b      	ldr	r3, [r7, #4]
 802716c:	2204      	movs	r2, #4
 802716e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8027170:	687b      	ldr	r3, [r7, #4]
 8027172:	681b      	ldr	r3, [r3, #0]
 8027174:	69db      	ldr	r3, [r3, #28]
 8027176:	f003 0303 	and.w	r3, r3, #3
 802717a:	2b00      	cmp	r3, #0
 802717c:	d003      	beq.n	8027186 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802717e:	6878      	ldr	r0, [r7, #4]
 8027180:	f7ed f92a 	bl	80143d8 <HAL_TIM_IC_CaptureCallback>
 8027184:	e005      	b.n	8027192 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8027186:	6878      	ldr	r0, [r7, #4]
 8027188:	f000 fb38 	bl	80277fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802718c:	6878      	ldr	r0, [r7, #4]
 802718e:	f000 fb3f 	bl	8027810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8027192:	687b      	ldr	r3, [r7, #4]
 8027194:	2200      	movs	r2, #0
 8027196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8027198:	687b      	ldr	r3, [r7, #4]
 802719a:	681b      	ldr	r3, [r3, #0]
 802719c:	691b      	ldr	r3, [r3, #16]
 802719e:	f003 0310 	and.w	r3, r3, #16
 80271a2:	2b10      	cmp	r3, #16
 80271a4:	d122      	bne.n	80271ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80271a6:	687b      	ldr	r3, [r7, #4]
 80271a8:	681b      	ldr	r3, [r3, #0]
 80271aa:	68db      	ldr	r3, [r3, #12]
 80271ac:	f003 0310 	and.w	r3, r3, #16
 80271b0:	2b10      	cmp	r3, #16
 80271b2:	d11b      	bne.n	80271ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80271b4:	687b      	ldr	r3, [r7, #4]
 80271b6:	681b      	ldr	r3, [r3, #0]
 80271b8:	f06f 0210 	mvn.w	r2, #16
 80271bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80271be:	687b      	ldr	r3, [r7, #4]
 80271c0:	2208      	movs	r2, #8
 80271c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80271c4:	687b      	ldr	r3, [r7, #4]
 80271c6:	681b      	ldr	r3, [r3, #0]
 80271c8:	69db      	ldr	r3, [r3, #28]
 80271ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80271ce:	2b00      	cmp	r3, #0
 80271d0:	d003      	beq.n	80271da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80271d2:	6878      	ldr	r0, [r7, #4]
 80271d4:	f7ed f900 	bl	80143d8 <HAL_TIM_IC_CaptureCallback>
 80271d8:	e005      	b.n	80271e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80271da:	6878      	ldr	r0, [r7, #4]
 80271dc:	f000 fb0e 	bl	80277fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80271e0:	6878      	ldr	r0, [r7, #4]
 80271e2:	f000 fb15 	bl	8027810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80271e6:	687b      	ldr	r3, [r7, #4]
 80271e8:	2200      	movs	r2, #0
 80271ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80271ec:	687b      	ldr	r3, [r7, #4]
 80271ee:	681b      	ldr	r3, [r3, #0]
 80271f0:	691b      	ldr	r3, [r3, #16]
 80271f2:	f003 0301 	and.w	r3, r3, #1
 80271f6:	2b01      	cmp	r3, #1
 80271f8:	d10e      	bne.n	8027218 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80271fa:	687b      	ldr	r3, [r7, #4]
 80271fc:	681b      	ldr	r3, [r3, #0]
 80271fe:	68db      	ldr	r3, [r3, #12]
 8027200:	f003 0301 	and.w	r3, r3, #1
 8027204:	2b01      	cmp	r3, #1
 8027206:	d107      	bne.n	8027218 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8027208:	687b      	ldr	r3, [r7, #4]
 802720a:	681b      	ldr	r3, [r3, #0]
 802720c:	f06f 0201 	mvn.w	r2, #1
 8027210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8027212:	6878      	ldr	r0, [r7, #4]
 8027214:	f7ef ffaa 	bl	801716c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8027218:	687b      	ldr	r3, [r7, #4]
 802721a:	681b      	ldr	r3, [r3, #0]
 802721c:	691b      	ldr	r3, [r3, #16]
 802721e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027222:	2b80      	cmp	r3, #128	; 0x80
 8027224:	d10e      	bne.n	8027244 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8027226:	687b      	ldr	r3, [r7, #4]
 8027228:	681b      	ldr	r3, [r3, #0]
 802722a:	68db      	ldr	r3, [r3, #12]
 802722c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027230:	2b80      	cmp	r3, #128	; 0x80
 8027232:	d107      	bne.n	8027244 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8027234:	687b      	ldr	r3, [r7, #4]
 8027236:	681b      	ldr	r3, [r3, #0]
 8027238:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802723c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802723e:	6878      	ldr	r0, [r7, #4]
 8027240:	f001 f89e 	bl	8028380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8027244:	687b      	ldr	r3, [r7, #4]
 8027246:	681b      	ldr	r3, [r3, #0]
 8027248:	691b      	ldr	r3, [r3, #16]
 802724a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802724e:	2b40      	cmp	r3, #64	; 0x40
 8027250:	d10e      	bne.n	8027270 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8027252:	687b      	ldr	r3, [r7, #4]
 8027254:	681b      	ldr	r3, [r3, #0]
 8027256:	68db      	ldr	r3, [r3, #12]
 8027258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802725c:	2b40      	cmp	r3, #64	; 0x40
 802725e:	d107      	bne.n	8027270 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8027260:	687b      	ldr	r3, [r7, #4]
 8027262:	681b      	ldr	r3, [r3, #0]
 8027264:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8027268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802726a:	6878      	ldr	r0, [r7, #4]
 802726c:	f000 fada 	bl	8027824 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8027270:	687b      	ldr	r3, [r7, #4]
 8027272:	681b      	ldr	r3, [r3, #0]
 8027274:	691b      	ldr	r3, [r3, #16]
 8027276:	f003 0320 	and.w	r3, r3, #32
 802727a:	2b20      	cmp	r3, #32
 802727c:	d10e      	bne.n	802729c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802727e:	687b      	ldr	r3, [r7, #4]
 8027280:	681b      	ldr	r3, [r3, #0]
 8027282:	68db      	ldr	r3, [r3, #12]
 8027284:	f003 0320 	and.w	r3, r3, #32
 8027288:	2b20      	cmp	r3, #32
 802728a:	d107      	bne.n	802729c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802728c:	687b      	ldr	r3, [r7, #4]
 802728e:	681b      	ldr	r3, [r3, #0]
 8027290:	f06f 0220 	mvn.w	r2, #32
 8027294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8027296:	6878      	ldr	r0, [r7, #4]
 8027298:	f001 f868 	bl	802836c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802729c:	bf00      	nop
 802729e:	3708      	adds	r7, #8
 80272a0:	46bd      	mov	sp, r7
 80272a2:	bd80      	pop	{r7, pc}

080272a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80272a4:	b580      	push	{r7, lr}
 80272a6:	b086      	sub	sp, #24
 80272a8:	af00      	add	r7, sp, #0
 80272aa:	60f8      	str	r0, [r7, #12]
 80272ac:	60b9      	str	r1, [r7, #8]
 80272ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80272b0:	2300      	movs	r3, #0
 80272b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80272b4:	68fb      	ldr	r3, [r7, #12]
 80272b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80272ba:	2b01      	cmp	r3, #1
 80272bc:	d101      	bne.n	80272c2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80272be:	2302      	movs	r3, #2
 80272c0:	e088      	b.n	80273d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80272c2:	68fb      	ldr	r3, [r7, #12]
 80272c4:	2201      	movs	r2, #1
 80272c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80272ca:	687b      	ldr	r3, [r7, #4]
 80272cc:	2b00      	cmp	r3, #0
 80272ce:	d11b      	bne.n	8027308 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80272d0:	68fb      	ldr	r3, [r7, #12]
 80272d2:	6818      	ldr	r0, [r3, #0]
 80272d4:	68bb      	ldr	r3, [r7, #8]
 80272d6:	6819      	ldr	r1, [r3, #0]
 80272d8:	68bb      	ldr	r3, [r7, #8]
 80272da:	685a      	ldr	r2, [r3, #4]
 80272dc:	68bb      	ldr	r3, [r7, #8]
 80272de:	68db      	ldr	r3, [r3, #12]
 80272e0:	f000 fd8c 	bl	8027dfc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80272e4:	68fb      	ldr	r3, [r7, #12]
 80272e6:	681b      	ldr	r3, [r3, #0]
 80272e8:	699a      	ldr	r2, [r3, #24]
 80272ea:	68fb      	ldr	r3, [r7, #12]
 80272ec:	681b      	ldr	r3, [r3, #0]
 80272ee:	f022 020c 	bic.w	r2, r2, #12
 80272f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80272f4:	68fb      	ldr	r3, [r7, #12]
 80272f6:	681b      	ldr	r3, [r3, #0]
 80272f8:	6999      	ldr	r1, [r3, #24]
 80272fa:	68bb      	ldr	r3, [r7, #8]
 80272fc:	689a      	ldr	r2, [r3, #8]
 80272fe:	68fb      	ldr	r3, [r7, #12]
 8027300:	681b      	ldr	r3, [r3, #0]
 8027302:	430a      	orrs	r2, r1
 8027304:	619a      	str	r2, [r3, #24]
 8027306:	e060      	b.n	80273ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8027308:	687b      	ldr	r3, [r7, #4]
 802730a:	2b04      	cmp	r3, #4
 802730c:	d11c      	bne.n	8027348 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 802730e:	68fb      	ldr	r3, [r7, #12]
 8027310:	6818      	ldr	r0, [r3, #0]
 8027312:	68bb      	ldr	r3, [r7, #8]
 8027314:	6819      	ldr	r1, [r3, #0]
 8027316:	68bb      	ldr	r3, [r7, #8]
 8027318:	685a      	ldr	r2, [r3, #4]
 802731a:	68bb      	ldr	r3, [r7, #8]
 802731c:	68db      	ldr	r3, [r3, #12]
 802731e:	f000 fe10 	bl	8027f42 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8027322:	68fb      	ldr	r3, [r7, #12]
 8027324:	681b      	ldr	r3, [r3, #0]
 8027326:	699a      	ldr	r2, [r3, #24]
 8027328:	68fb      	ldr	r3, [r7, #12]
 802732a:	681b      	ldr	r3, [r3, #0]
 802732c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8027330:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8027332:	68fb      	ldr	r3, [r7, #12]
 8027334:	681b      	ldr	r3, [r3, #0]
 8027336:	6999      	ldr	r1, [r3, #24]
 8027338:	68bb      	ldr	r3, [r7, #8]
 802733a:	689b      	ldr	r3, [r3, #8]
 802733c:	021a      	lsls	r2, r3, #8
 802733e:	68fb      	ldr	r3, [r7, #12]
 8027340:	681b      	ldr	r3, [r3, #0]
 8027342:	430a      	orrs	r2, r1
 8027344:	619a      	str	r2, [r3, #24]
 8027346:	e040      	b.n	80273ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8027348:	687b      	ldr	r3, [r7, #4]
 802734a:	2b08      	cmp	r3, #8
 802734c:	d11b      	bne.n	8027386 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 802734e:	68fb      	ldr	r3, [r7, #12]
 8027350:	6818      	ldr	r0, [r3, #0]
 8027352:	68bb      	ldr	r3, [r7, #8]
 8027354:	6819      	ldr	r1, [r3, #0]
 8027356:	68bb      	ldr	r3, [r7, #8]
 8027358:	685a      	ldr	r2, [r3, #4]
 802735a:	68bb      	ldr	r3, [r7, #8]
 802735c:	68db      	ldr	r3, [r3, #12]
 802735e:	f000 fe5d 	bl	802801c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8027362:	68fb      	ldr	r3, [r7, #12]
 8027364:	681b      	ldr	r3, [r3, #0]
 8027366:	69da      	ldr	r2, [r3, #28]
 8027368:	68fb      	ldr	r3, [r7, #12]
 802736a:	681b      	ldr	r3, [r3, #0]
 802736c:	f022 020c 	bic.w	r2, r2, #12
 8027370:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8027372:	68fb      	ldr	r3, [r7, #12]
 8027374:	681b      	ldr	r3, [r3, #0]
 8027376:	69d9      	ldr	r1, [r3, #28]
 8027378:	68bb      	ldr	r3, [r7, #8]
 802737a:	689a      	ldr	r2, [r3, #8]
 802737c:	68fb      	ldr	r3, [r7, #12]
 802737e:	681b      	ldr	r3, [r3, #0]
 8027380:	430a      	orrs	r2, r1
 8027382:	61da      	str	r2, [r3, #28]
 8027384:	e021      	b.n	80273ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8027386:	687b      	ldr	r3, [r7, #4]
 8027388:	2b0c      	cmp	r3, #12
 802738a:	d11c      	bne.n	80273c6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 802738c:	68fb      	ldr	r3, [r7, #12]
 802738e:	6818      	ldr	r0, [r3, #0]
 8027390:	68bb      	ldr	r3, [r7, #8]
 8027392:	6819      	ldr	r1, [r3, #0]
 8027394:	68bb      	ldr	r3, [r7, #8]
 8027396:	685a      	ldr	r2, [r3, #4]
 8027398:	68bb      	ldr	r3, [r7, #8]
 802739a:	68db      	ldr	r3, [r3, #12]
 802739c:	f000 fe7a 	bl	8028094 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80273a0:	68fb      	ldr	r3, [r7, #12]
 80273a2:	681b      	ldr	r3, [r3, #0]
 80273a4:	69da      	ldr	r2, [r3, #28]
 80273a6:	68fb      	ldr	r3, [r7, #12]
 80273a8:	681b      	ldr	r3, [r3, #0]
 80273aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80273ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80273b0:	68fb      	ldr	r3, [r7, #12]
 80273b2:	681b      	ldr	r3, [r3, #0]
 80273b4:	69d9      	ldr	r1, [r3, #28]
 80273b6:	68bb      	ldr	r3, [r7, #8]
 80273b8:	689b      	ldr	r3, [r3, #8]
 80273ba:	021a      	lsls	r2, r3, #8
 80273bc:	68fb      	ldr	r3, [r7, #12]
 80273be:	681b      	ldr	r3, [r3, #0]
 80273c0:	430a      	orrs	r2, r1
 80273c2:	61da      	str	r2, [r3, #28]
 80273c4:	e001      	b.n	80273ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80273c6:	2301      	movs	r3, #1
 80273c8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80273ca:	68fb      	ldr	r3, [r7, #12]
 80273cc:	2200      	movs	r2, #0
 80273ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80273d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80273d4:	4618      	mov	r0, r3
 80273d6:	3718      	adds	r7, #24
 80273d8:	46bd      	mov	sp, r7
 80273da:	bd80      	pop	{r7, pc}

080273dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80273dc:	b580      	push	{r7, lr}
 80273de:	b086      	sub	sp, #24
 80273e0:	af00      	add	r7, sp, #0
 80273e2:	60f8      	str	r0, [r7, #12]
 80273e4:	60b9      	str	r1, [r7, #8]
 80273e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80273e8:	2300      	movs	r3, #0
 80273ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80273ec:	68fb      	ldr	r3, [r7, #12]
 80273ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80273f2:	2b01      	cmp	r3, #1
 80273f4:	d101      	bne.n	80273fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80273f6:	2302      	movs	r3, #2
 80273f8:	e0ae      	b.n	8027558 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80273fa:	68fb      	ldr	r3, [r7, #12]
 80273fc:	2201      	movs	r2, #1
 80273fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8027402:	687b      	ldr	r3, [r7, #4]
 8027404:	2b0c      	cmp	r3, #12
 8027406:	f200 809f 	bhi.w	8027548 <HAL_TIM_PWM_ConfigChannel+0x16c>
 802740a:	a201      	add	r2, pc, #4	; (adr r2, 8027410 <HAL_TIM_PWM_ConfigChannel+0x34>)
 802740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027410:	08027445 	.word	0x08027445
 8027414:	08027549 	.word	0x08027549
 8027418:	08027549 	.word	0x08027549
 802741c:	08027549 	.word	0x08027549
 8027420:	08027485 	.word	0x08027485
 8027424:	08027549 	.word	0x08027549
 8027428:	08027549 	.word	0x08027549
 802742c:	08027549 	.word	0x08027549
 8027430:	080274c7 	.word	0x080274c7
 8027434:	08027549 	.word	0x08027549
 8027438:	08027549 	.word	0x08027549
 802743c:	08027549 	.word	0x08027549
 8027440:	08027507 	.word	0x08027507
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8027444:	68fb      	ldr	r3, [r7, #12]
 8027446:	681b      	ldr	r3, [r3, #0]
 8027448:	68b9      	ldr	r1, [r7, #8]
 802744a:	4618      	mov	r0, r3
 802744c:	f000 fa94 	bl	8027978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8027450:	68fb      	ldr	r3, [r7, #12]
 8027452:	681b      	ldr	r3, [r3, #0]
 8027454:	699a      	ldr	r2, [r3, #24]
 8027456:	68fb      	ldr	r3, [r7, #12]
 8027458:	681b      	ldr	r3, [r3, #0]
 802745a:	f042 0208 	orr.w	r2, r2, #8
 802745e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8027460:	68fb      	ldr	r3, [r7, #12]
 8027462:	681b      	ldr	r3, [r3, #0]
 8027464:	699a      	ldr	r2, [r3, #24]
 8027466:	68fb      	ldr	r3, [r7, #12]
 8027468:	681b      	ldr	r3, [r3, #0]
 802746a:	f022 0204 	bic.w	r2, r2, #4
 802746e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8027470:	68fb      	ldr	r3, [r7, #12]
 8027472:	681b      	ldr	r3, [r3, #0]
 8027474:	6999      	ldr	r1, [r3, #24]
 8027476:	68bb      	ldr	r3, [r7, #8]
 8027478:	691a      	ldr	r2, [r3, #16]
 802747a:	68fb      	ldr	r3, [r7, #12]
 802747c:	681b      	ldr	r3, [r3, #0]
 802747e:	430a      	orrs	r2, r1
 8027480:	619a      	str	r2, [r3, #24]
      break;
 8027482:	e064      	b.n	802754e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8027484:	68fb      	ldr	r3, [r7, #12]
 8027486:	681b      	ldr	r3, [r3, #0]
 8027488:	68b9      	ldr	r1, [r7, #8]
 802748a:	4618      	mov	r0, r3
 802748c:	f000 fae4 	bl	8027a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8027490:	68fb      	ldr	r3, [r7, #12]
 8027492:	681b      	ldr	r3, [r3, #0]
 8027494:	699a      	ldr	r2, [r3, #24]
 8027496:	68fb      	ldr	r3, [r7, #12]
 8027498:	681b      	ldr	r3, [r3, #0]
 802749a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802749e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80274a0:	68fb      	ldr	r3, [r7, #12]
 80274a2:	681b      	ldr	r3, [r3, #0]
 80274a4:	699a      	ldr	r2, [r3, #24]
 80274a6:	68fb      	ldr	r3, [r7, #12]
 80274a8:	681b      	ldr	r3, [r3, #0]
 80274aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80274ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80274b0:	68fb      	ldr	r3, [r7, #12]
 80274b2:	681b      	ldr	r3, [r3, #0]
 80274b4:	6999      	ldr	r1, [r3, #24]
 80274b6:	68bb      	ldr	r3, [r7, #8]
 80274b8:	691b      	ldr	r3, [r3, #16]
 80274ba:	021a      	lsls	r2, r3, #8
 80274bc:	68fb      	ldr	r3, [r7, #12]
 80274be:	681b      	ldr	r3, [r3, #0]
 80274c0:	430a      	orrs	r2, r1
 80274c2:	619a      	str	r2, [r3, #24]
      break;
 80274c4:	e043      	b.n	802754e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80274c6:	68fb      	ldr	r3, [r7, #12]
 80274c8:	681b      	ldr	r3, [r3, #0]
 80274ca:	68b9      	ldr	r1, [r7, #8]
 80274cc:	4618      	mov	r0, r3
 80274ce:	f000 fb39 	bl	8027b44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80274d2:	68fb      	ldr	r3, [r7, #12]
 80274d4:	681b      	ldr	r3, [r3, #0]
 80274d6:	69da      	ldr	r2, [r3, #28]
 80274d8:	68fb      	ldr	r3, [r7, #12]
 80274da:	681b      	ldr	r3, [r3, #0]
 80274dc:	f042 0208 	orr.w	r2, r2, #8
 80274e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80274e2:	68fb      	ldr	r3, [r7, #12]
 80274e4:	681b      	ldr	r3, [r3, #0]
 80274e6:	69da      	ldr	r2, [r3, #28]
 80274e8:	68fb      	ldr	r3, [r7, #12]
 80274ea:	681b      	ldr	r3, [r3, #0]
 80274ec:	f022 0204 	bic.w	r2, r2, #4
 80274f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80274f2:	68fb      	ldr	r3, [r7, #12]
 80274f4:	681b      	ldr	r3, [r3, #0]
 80274f6:	69d9      	ldr	r1, [r3, #28]
 80274f8:	68bb      	ldr	r3, [r7, #8]
 80274fa:	691a      	ldr	r2, [r3, #16]
 80274fc:	68fb      	ldr	r3, [r7, #12]
 80274fe:	681b      	ldr	r3, [r3, #0]
 8027500:	430a      	orrs	r2, r1
 8027502:	61da      	str	r2, [r3, #28]
      break;
 8027504:	e023      	b.n	802754e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8027506:	68fb      	ldr	r3, [r7, #12]
 8027508:	681b      	ldr	r3, [r3, #0]
 802750a:	68b9      	ldr	r1, [r7, #8]
 802750c:	4618      	mov	r0, r3
 802750e:	f000 fb8d 	bl	8027c2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8027512:	68fb      	ldr	r3, [r7, #12]
 8027514:	681b      	ldr	r3, [r3, #0]
 8027516:	69da      	ldr	r2, [r3, #28]
 8027518:	68fb      	ldr	r3, [r7, #12]
 802751a:	681b      	ldr	r3, [r3, #0]
 802751c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8027520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8027522:	68fb      	ldr	r3, [r7, #12]
 8027524:	681b      	ldr	r3, [r3, #0]
 8027526:	69da      	ldr	r2, [r3, #28]
 8027528:	68fb      	ldr	r3, [r7, #12]
 802752a:	681b      	ldr	r3, [r3, #0]
 802752c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8027530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8027532:	68fb      	ldr	r3, [r7, #12]
 8027534:	681b      	ldr	r3, [r3, #0]
 8027536:	69d9      	ldr	r1, [r3, #28]
 8027538:	68bb      	ldr	r3, [r7, #8]
 802753a:	691b      	ldr	r3, [r3, #16]
 802753c:	021a      	lsls	r2, r3, #8
 802753e:	68fb      	ldr	r3, [r7, #12]
 8027540:	681b      	ldr	r3, [r3, #0]
 8027542:	430a      	orrs	r2, r1
 8027544:	61da      	str	r2, [r3, #28]
      break;
 8027546:	e002      	b.n	802754e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8027548:	2301      	movs	r3, #1
 802754a:	75fb      	strb	r3, [r7, #23]
      break;
 802754c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 802754e:	68fb      	ldr	r3, [r7, #12]
 8027550:	2200      	movs	r2, #0
 8027552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8027556:	7dfb      	ldrb	r3, [r7, #23]
}
 8027558:	4618      	mov	r0, r3
 802755a:	3718      	adds	r7, #24
 802755c:	46bd      	mov	sp, r7
 802755e:	bd80      	pop	{r7, pc}

08027560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8027560:	b580      	push	{r7, lr}
 8027562:	b084      	sub	sp, #16
 8027564:	af00      	add	r7, sp, #0
 8027566:	6078      	str	r0, [r7, #4]
 8027568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802756a:	2300      	movs	r3, #0
 802756c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 802756e:	687b      	ldr	r3, [r7, #4]
 8027570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8027574:	2b01      	cmp	r3, #1
 8027576:	d101      	bne.n	802757c <HAL_TIM_ConfigClockSource+0x1c>
 8027578:	2302      	movs	r3, #2
 802757a:	e0b4      	b.n	80276e6 <HAL_TIM_ConfigClockSource+0x186>
 802757c:	687b      	ldr	r3, [r7, #4]
 802757e:	2201      	movs	r2, #1
 8027580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8027584:	687b      	ldr	r3, [r7, #4]
 8027586:	2202      	movs	r2, #2
 8027588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 802758c:	687b      	ldr	r3, [r7, #4]
 802758e:	681b      	ldr	r3, [r3, #0]
 8027590:	689b      	ldr	r3, [r3, #8]
 8027592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8027594:	68bb      	ldr	r3, [r7, #8]
 8027596:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802759a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802759c:	68bb      	ldr	r3, [r7, #8]
 802759e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80275a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80275a4:	687b      	ldr	r3, [r7, #4]
 80275a6:	681b      	ldr	r3, [r3, #0]
 80275a8:	68ba      	ldr	r2, [r7, #8]
 80275aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80275ac:	683b      	ldr	r3, [r7, #0]
 80275ae:	681b      	ldr	r3, [r3, #0]
 80275b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80275b4:	d03e      	beq.n	8027634 <HAL_TIM_ConfigClockSource+0xd4>
 80275b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80275ba:	f200 8087 	bhi.w	80276cc <HAL_TIM_ConfigClockSource+0x16c>
 80275be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80275c2:	f000 8086 	beq.w	80276d2 <HAL_TIM_ConfigClockSource+0x172>
 80275c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80275ca:	d87f      	bhi.n	80276cc <HAL_TIM_ConfigClockSource+0x16c>
 80275cc:	2b70      	cmp	r3, #112	; 0x70
 80275ce:	d01a      	beq.n	8027606 <HAL_TIM_ConfigClockSource+0xa6>
 80275d0:	2b70      	cmp	r3, #112	; 0x70
 80275d2:	d87b      	bhi.n	80276cc <HAL_TIM_ConfigClockSource+0x16c>
 80275d4:	2b60      	cmp	r3, #96	; 0x60
 80275d6:	d050      	beq.n	802767a <HAL_TIM_ConfigClockSource+0x11a>
 80275d8:	2b60      	cmp	r3, #96	; 0x60
 80275da:	d877      	bhi.n	80276cc <HAL_TIM_ConfigClockSource+0x16c>
 80275dc:	2b50      	cmp	r3, #80	; 0x50
 80275de:	d03c      	beq.n	802765a <HAL_TIM_ConfigClockSource+0xfa>
 80275e0:	2b50      	cmp	r3, #80	; 0x50
 80275e2:	d873      	bhi.n	80276cc <HAL_TIM_ConfigClockSource+0x16c>
 80275e4:	2b40      	cmp	r3, #64	; 0x40
 80275e6:	d058      	beq.n	802769a <HAL_TIM_ConfigClockSource+0x13a>
 80275e8:	2b40      	cmp	r3, #64	; 0x40
 80275ea:	d86f      	bhi.n	80276cc <HAL_TIM_ConfigClockSource+0x16c>
 80275ec:	2b30      	cmp	r3, #48	; 0x30
 80275ee:	d064      	beq.n	80276ba <HAL_TIM_ConfigClockSource+0x15a>
 80275f0:	2b30      	cmp	r3, #48	; 0x30
 80275f2:	d86b      	bhi.n	80276cc <HAL_TIM_ConfigClockSource+0x16c>
 80275f4:	2b20      	cmp	r3, #32
 80275f6:	d060      	beq.n	80276ba <HAL_TIM_ConfigClockSource+0x15a>
 80275f8:	2b20      	cmp	r3, #32
 80275fa:	d867      	bhi.n	80276cc <HAL_TIM_ConfigClockSource+0x16c>
 80275fc:	2b00      	cmp	r3, #0
 80275fe:	d05c      	beq.n	80276ba <HAL_TIM_ConfigClockSource+0x15a>
 8027600:	2b10      	cmp	r3, #16
 8027602:	d05a      	beq.n	80276ba <HAL_TIM_ConfigClockSource+0x15a>
 8027604:	e062      	b.n	80276cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8027606:	687b      	ldr	r3, [r7, #4]
 8027608:	6818      	ldr	r0, [r3, #0]
 802760a:	683b      	ldr	r3, [r7, #0]
 802760c:	6899      	ldr	r1, [r3, #8]
 802760e:	683b      	ldr	r3, [r7, #0]
 8027610:	685a      	ldr	r2, [r3, #4]
 8027612:	683b      	ldr	r3, [r7, #0]
 8027614:	68db      	ldr	r3, [r3, #12]
 8027616:	f000 fd95 	bl	8028144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 802761a:	687b      	ldr	r3, [r7, #4]
 802761c:	681b      	ldr	r3, [r3, #0]
 802761e:	689b      	ldr	r3, [r3, #8]
 8027620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8027622:	68bb      	ldr	r3, [r7, #8]
 8027624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8027628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 802762a:	687b      	ldr	r3, [r7, #4]
 802762c:	681b      	ldr	r3, [r3, #0]
 802762e:	68ba      	ldr	r2, [r7, #8]
 8027630:	609a      	str	r2, [r3, #8]
      break;
 8027632:	e04f      	b.n	80276d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8027634:	687b      	ldr	r3, [r7, #4]
 8027636:	6818      	ldr	r0, [r3, #0]
 8027638:	683b      	ldr	r3, [r7, #0]
 802763a:	6899      	ldr	r1, [r3, #8]
 802763c:	683b      	ldr	r3, [r7, #0]
 802763e:	685a      	ldr	r2, [r3, #4]
 8027640:	683b      	ldr	r3, [r7, #0]
 8027642:	68db      	ldr	r3, [r3, #12]
 8027644:	f000 fd7e 	bl	8028144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8027648:	687b      	ldr	r3, [r7, #4]
 802764a:	681b      	ldr	r3, [r3, #0]
 802764c:	689a      	ldr	r2, [r3, #8]
 802764e:	687b      	ldr	r3, [r7, #4]
 8027650:	681b      	ldr	r3, [r3, #0]
 8027652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8027656:	609a      	str	r2, [r3, #8]
      break;
 8027658:	e03c      	b.n	80276d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802765a:	687b      	ldr	r3, [r7, #4]
 802765c:	6818      	ldr	r0, [r3, #0]
 802765e:	683b      	ldr	r3, [r7, #0]
 8027660:	6859      	ldr	r1, [r3, #4]
 8027662:	683b      	ldr	r3, [r7, #0]
 8027664:	68db      	ldr	r3, [r3, #12]
 8027666:	461a      	mov	r2, r3
 8027668:	f000 fc3c 	bl	8027ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 802766c:	687b      	ldr	r3, [r7, #4]
 802766e:	681b      	ldr	r3, [r3, #0]
 8027670:	2150      	movs	r1, #80	; 0x50
 8027672:	4618      	mov	r0, r3
 8027674:	f000 fd4b 	bl	802810e <TIM_ITRx_SetConfig>
      break;
 8027678:	e02c      	b.n	80276d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 802767a:	687b      	ldr	r3, [r7, #4]
 802767c:	6818      	ldr	r0, [r3, #0]
 802767e:	683b      	ldr	r3, [r7, #0]
 8027680:	6859      	ldr	r1, [r3, #4]
 8027682:	683b      	ldr	r3, [r7, #0]
 8027684:	68db      	ldr	r3, [r3, #12]
 8027686:	461a      	mov	r2, r3
 8027688:	f000 fc98 	bl	8027fbc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802768c:	687b      	ldr	r3, [r7, #4]
 802768e:	681b      	ldr	r3, [r3, #0]
 8027690:	2160      	movs	r1, #96	; 0x60
 8027692:	4618      	mov	r0, r3
 8027694:	f000 fd3b 	bl	802810e <TIM_ITRx_SetConfig>
      break;
 8027698:	e01c      	b.n	80276d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802769a:	687b      	ldr	r3, [r7, #4]
 802769c:	6818      	ldr	r0, [r3, #0]
 802769e:	683b      	ldr	r3, [r7, #0]
 80276a0:	6859      	ldr	r1, [r3, #4]
 80276a2:	683b      	ldr	r3, [r7, #0]
 80276a4:	68db      	ldr	r3, [r3, #12]
 80276a6:	461a      	mov	r2, r3
 80276a8:	f000 fc1c 	bl	8027ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80276ac:	687b      	ldr	r3, [r7, #4]
 80276ae:	681b      	ldr	r3, [r3, #0]
 80276b0:	2140      	movs	r1, #64	; 0x40
 80276b2:	4618      	mov	r0, r3
 80276b4:	f000 fd2b 	bl	802810e <TIM_ITRx_SetConfig>
      break;
 80276b8:	e00c      	b.n	80276d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80276ba:	687b      	ldr	r3, [r7, #4]
 80276bc:	681a      	ldr	r2, [r3, #0]
 80276be:	683b      	ldr	r3, [r7, #0]
 80276c0:	681b      	ldr	r3, [r3, #0]
 80276c2:	4619      	mov	r1, r3
 80276c4:	4610      	mov	r0, r2
 80276c6:	f000 fd22 	bl	802810e <TIM_ITRx_SetConfig>
      break;
 80276ca:	e003      	b.n	80276d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80276cc:	2301      	movs	r3, #1
 80276ce:	73fb      	strb	r3, [r7, #15]
      break;
 80276d0:	e000      	b.n	80276d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80276d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80276d4:	687b      	ldr	r3, [r7, #4]
 80276d6:	2201      	movs	r2, #1
 80276d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80276dc:	687b      	ldr	r3, [r7, #4]
 80276de:	2200      	movs	r2, #0
 80276e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80276e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80276e6:	4618      	mov	r0, r3
 80276e8:	3710      	adds	r7, #16
 80276ea:	46bd      	mov	sp, r7
 80276ec:	bd80      	pop	{r7, pc}

080276ee <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80276ee:	b580      	push	{r7, lr}
 80276f0:	b082      	sub	sp, #8
 80276f2:	af00      	add	r7, sp, #0
 80276f4:	6078      	str	r0, [r7, #4]
 80276f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80276f8:	687b      	ldr	r3, [r7, #4]
 80276fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80276fe:	2b01      	cmp	r3, #1
 8027700:	d101      	bne.n	8027706 <HAL_TIM_SlaveConfigSynchro+0x18>
 8027702:	2302      	movs	r3, #2
 8027704:	e031      	b.n	802776a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8027706:	687b      	ldr	r3, [r7, #4]
 8027708:	2201      	movs	r2, #1
 802770a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802770e:	687b      	ldr	r3, [r7, #4]
 8027710:	2202      	movs	r2, #2
 8027712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8027716:	6839      	ldr	r1, [r7, #0]
 8027718:	6878      	ldr	r0, [r7, #4]
 802771a:	f000 fadd 	bl	8027cd8 <TIM_SlaveTimer_SetConfig>
 802771e:	4603      	mov	r3, r0
 8027720:	2b00      	cmp	r3, #0
 8027722:	d009      	beq.n	8027738 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8027724:	687b      	ldr	r3, [r7, #4]
 8027726:	2201      	movs	r2, #1
 8027728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 802772c:	687b      	ldr	r3, [r7, #4]
 802772e:	2200      	movs	r2, #0
 8027730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8027734:	2301      	movs	r3, #1
 8027736:	e018      	b.n	802776a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8027738:	687b      	ldr	r3, [r7, #4]
 802773a:	681b      	ldr	r3, [r3, #0]
 802773c:	68da      	ldr	r2, [r3, #12]
 802773e:	687b      	ldr	r3, [r7, #4]
 8027740:	681b      	ldr	r3, [r3, #0]
 8027742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027746:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8027748:	687b      	ldr	r3, [r7, #4]
 802774a:	681b      	ldr	r3, [r3, #0]
 802774c:	68da      	ldr	r2, [r3, #12]
 802774e:	687b      	ldr	r3, [r7, #4]
 8027750:	681b      	ldr	r3, [r3, #0]
 8027752:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8027756:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8027758:	687b      	ldr	r3, [r7, #4]
 802775a:	2201      	movs	r2, #1
 802775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8027760:	687b      	ldr	r3, [r7, #4]
 8027762:	2200      	movs	r2, #0
 8027764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8027768:	2300      	movs	r3, #0
}
 802776a:	4618      	mov	r0, r3
 802776c:	3708      	adds	r7, #8
 802776e:	46bd      	mov	sp, r7
 8027770:	bd80      	pop	{r7, pc}
	...

08027774 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8027774:	b480      	push	{r7}
 8027776:	b085      	sub	sp, #20
 8027778:	af00      	add	r7, sp, #0
 802777a:	6078      	str	r0, [r7, #4]
 802777c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 802777e:	2300      	movs	r3, #0
 8027780:	60fb      	str	r3, [r7, #12]
 8027782:	683b      	ldr	r3, [r7, #0]
 8027784:	2b0c      	cmp	r3, #12
 8027786:	d831      	bhi.n	80277ec <HAL_TIM_ReadCapturedValue+0x78>
 8027788:	a201      	add	r2, pc, #4	; (adr r2, 8027790 <HAL_TIM_ReadCapturedValue+0x1c>)
 802778a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802778e:	bf00      	nop
 8027790:	080277c5 	.word	0x080277c5
 8027794:	080277ed 	.word	0x080277ed
 8027798:	080277ed 	.word	0x080277ed
 802779c:	080277ed 	.word	0x080277ed
 80277a0:	080277cf 	.word	0x080277cf
 80277a4:	080277ed 	.word	0x080277ed
 80277a8:	080277ed 	.word	0x080277ed
 80277ac:	080277ed 	.word	0x080277ed
 80277b0:	080277d9 	.word	0x080277d9
 80277b4:	080277ed 	.word	0x080277ed
 80277b8:	080277ed 	.word	0x080277ed
 80277bc:	080277ed 	.word	0x080277ed
 80277c0:	080277e3 	.word	0x080277e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80277c4:	687b      	ldr	r3, [r7, #4]
 80277c6:	681b      	ldr	r3, [r3, #0]
 80277c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80277ca:	60fb      	str	r3, [r7, #12]

      break;
 80277cc:	e00f      	b.n	80277ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80277ce:	687b      	ldr	r3, [r7, #4]
 80277d0:	681b      	ldr	r3, [r3, #0]
 80277d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80277d4:	60fb      	str	r3, [r7, #12]

      break;
 80277d6:	e00a      	b.n	80277ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80277d8:	687b      	ldr	r3, [r7, #4]
 80277da:	681b      	ldr	r3, [r3, #0]
 80277dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80277de:	60fb      	str	r3, [r7, #12]

      break;
 80277e0:	e005      	b.n	80277ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80277e2:	687b      	ldr	r3, [r7, #4]
 80277e4:	681b      	ldr	r3, [r3, #0]
 80277e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80277e8:	60fb      	str	r3, [r7, #12]

      break;
 80277ea:	e000      	b.n	80277ee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80277ec:	bf00      	nop
  }

  return tmpreg;
 80277ee:	68fb      	ldr	r3, [r7, #12]
}
 80277f0:	4618      	mov	r0, r3
 80277f2:	3714      	adds	r7, #20
 80277f4:	46bd      	mov	sp, r7
 80277f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277fa:	4770      	bx	lr

080277fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80277fc:	b480      	push	{r7}
 80277fe:	b083      	sub	sp, #12
 8027800:	af00      	add	r7, sp, #0
 8027802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8027804:	bf00      	nop
 8027806:	370c      	adds	r7, #12
 8027808:	46bd      	mov	sp, r7
 802780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802780e:	4770      	bx	lr

08027810 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8027810:	b480      	push	{r7}
 8027812:	b083      	sub	sp, #12
 8027814:	af00      	add	r7, sp, #0
 8027816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8027818:	bf00      	nop
 802781a:	370c      	adds	r7, #12
 802781c:	46bd      	mov	sp, r7
 802781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027822:	4770      	bx	lr

08027824 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8027824:	b480      	push	{r7}
 8027826:	b083      	sub	sp, #12
 8027828:	af00      	add	r7, sp, #0
 802782a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802782c:	bf00      	nop
 802782e:	370c      	adds	r7, #12
 8027830:	46bd      	mov	sp, r7
 8027832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027836:	4770      	bx	lr

08027838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8027838:	b480      	push	{r7}
 802783a:	b085      	sub	sp, #20
 802783c:	af00      	add	r7, sp, #0
 802783e:	6078      	str	r0, [r7, #4]
 8027840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8027842:	687b      	ldr	r3, [r7, #4]
 8027844:	681b      	ldr	r3, [r3, #0]
 8027846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8027848:	687b      	ldr	r3, [r7, #4]
 802784a:	4a40      	ldr	r2, [pc, #256]	; (802794c <TIM_Base_SetConfig+0x114>)
 802784c:	4293      	cmp	r3, r2
 802784e:	d013      	beq.n	8027878 <TIM_Base_SetConfig+0x40>
 8027850:	687b      	ldr	r3, [r7, #4]
 8027852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8027856:	d00f      	beq.n	8027878 <TIM_Base_SetConfig+0x40>
 8027858:	687b      	ldr	r3, [r7, #4]
 802785a:	4a3d      	ldr	r2, [pc, #244]	; (8027950 <TIM_Base_SetConfig+0x118>)
 802785c:	4293      	cmp	r3, r2
 802785e:	d00b      	beq.n	8027878 <TIM_Base_SetConfig+0x40>
 8027860:	687b      	ldr	r3, [r7, #4]
 8027862:	4a3c      	ldr	r2, [pc, #240]	; (8027954 <TIM_Base_SetConfig+0x11c>)
 8027864:	4293      	cmp	r3, r2
 8027866:	d007      	beq.n	8027878 <TIM_Base_SetConfig+0x40>
 8027868:	687b      	ldr	r3, [r7, #4]
 802786a:	4a3b      	ldr	r2, [pc, #236]	; (8027958 <TIM_Base_SetConfig+0x120>)
 802786c:	4293      	cmp	r3, r2
 802786e:	d003      	beq.n	8027878 <TIM_Base_SetConfig+0x40>
 8027870:	687b      	ldr	r3, [r7, #4]
 8027872:	4a3a      	ldr	r2, [pc, #232]	; (802795c <TIM_Base_SetConfig+0x124>)
 8027874:	4293      	cmp	r3, r2
 8027876:	d108      	bne.n	802788a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8027878:	68fb      	ldr	r3, [r7, #12]
 802787a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802787e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8027880:	683b      	ldr	r3, [r7, #0]
 8027882:	685b      	ldr	r3, [r3, #4]
 8027884:	68fa      	ldr	r2, [r7, #12]
 8027886:	4313      	orrs	r3, r2
 8027888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802788a:	687b      	ldr	r3, [r7, #4]
 802788c:	4a2f      	ldr	r2, [pc, #188]	; (802794c <TIM_Base_SetConfig+0x114>)
 802788e:	4293      	cmp	r3, r2
 8027890:	d02b      	beq.n	80278ea <TIM_Base_SetConfig+0xb2>
 8027892:	687b      	ldr	r3, [r7, #4]
 8027894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8027898:	d027      	beq.n	80278ea <TIM_Base_SetConfig+0xb2>
 802789a:	687b      	ldr	r3, [r7, #4]
 802789c:	4a2c      	ldr	r2, [pc, #176]	; (8027950 <TIM_Base_SetConfig+0x118>)
 802789e:	4293      	cmp	r3, r2
 80278a0:	d023      	beq.n	80278ea <TIM_Base_SetConfig+0xb2>
 80278a2:	687b      	ldr	r3, [r7, #4]
 80278a4:	4a2b      	ldr	r2, [pc, #172]	; (8027954 <TIM_Base_SetConfig+0x11c>)
 80278a6:	4293      	cmp	r3, r2
 80278a8:	d01f      	beq.n	80278ea <TIM_Base_SetConfig+0xb2>
 80278aa:	687b      	ldr	r3, [r7, #4]
 80278ac:	4a2a      	ldr	r2, [pc, #168]	; (8027958 <TIM_Base_SetConfig+0x120>)
 80278ae:	4293      	cmp	r3, r2
 80278b0:	d01b      	beq.n	80278ea <TIM_Base_SetConfig+0xb2>
 80278b2:	687b      	ldr	r3, [r7, #4]
 80278b4:	4a29      	ldr	r2, [pc, #164]	; (802795c <TIM_Base_SetConfig+0x124>)
 80278b6:	4293      	cmp	r3, r2
 80278b8:	d017      	beq.n	80278ea <TIM_Base_SetConfig+0xb2>
 80278ba:	687b      	ldr	r3, [r7, #4]
 80278bc:	4a28      	ldr	r2, [pc, #160]	; (8027960 <TIM_Base_SetConfig+0x128>)
 80278be:	4293      	cmp	r3, r2
 80278c0:	d013      	beq.n	80278ea <TIM_Base_SetConfig+0xb2>
 80278c2:	687b      	ldr	r3, [r7, #4]
 80278c4:	4a27      	ldr	r2, [pc, #156]	; (8027964 <TIM_Base_SetConfig+0x12c>)
 80278c6:	4293      	cmp	r3, r2
 80278c8:	d00f      	beq.n	80278ea <TIM_Base_SetConfig+0xb2>
 80278ca:	687b      	ldr	r3, [r7, #4]
 80278cc:	4a26      	ldr	r2, [pc, #152]	; (8027968 <TIM_Base_SetConfig+0x130>)
 80278ce:	4293      	cmp	r3, r2
 80278d0:	d00b      	beq.n	80278ea <TIM_Base_SetConfig+0xb2>
 80278d2:	687b      	ldr	r3, [r7, #4]
 80278d4:	4a25      	ldr	r2, [pc, #148]	; (802796c <TIM_Base_SetConfig+0x134>)
 80278d6:	4293      	cmp	r3, r2
 80278d8:	d007      	beq.n	80278ea <TIM_Base_SetConfig+0xb2>
 80278da:	687b      	ldr	r3, [r7, #4]
 80278dc:	4a24      	ldr	r2, [pc, #144]	; (8027970 <TIM_Base_SetConfig+0x138>)
 80278de:	4293      	cmp	r3, r2
 80278e0:	d003      	beq.n	80278ea <TIM_Base_SetConfig+0xb2>
 80278e2:	687b      	ldr	r3, [r7, #4]
 80278e4:	4a23      	ldr	r2, [pc, #140]	; (8027974 <TIM_Base_SetConfig+0x13c>)
 80278e6:	4293      	cmp	r3, r2
 80278e8:	d108      	bne.n	80278fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80278ea:	68fb      	ldr	r3, [r7, #12]
 80278ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80278f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80278f2:	683b      	ldr	r3, [r7, #0]
 80278f4:	68db      	ldr	r3, [r3, #12]
 80278f6:	68fa      	ldr	r2, [r7, #12]
 80278f8:	4313      	orrs	r3, r2
 80278fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80278fc:	68fb      	ldr	r3, [r7, #12]
 80278fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8027902:	683b      	ldr	r3, [r7, #0]
 8027904:	695b      	ldr	r3, [r3, #20]
 8027906:	4313      	orrs	r3, r2
 8027908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802790a:	687b      	ldr	r3, [r7, #4]
 802790c:	68fa      	ldr	r2, [r7, #12]
 802790e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8027910:	683b      	ldr	r3, [r7, #0]
 8027912:	689a      	ldr	r2, [r3, #8]
 8027914:	687b      	ldr	r3, [r7, #4]
 8027916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8027918:	683b      	ldr	r3, [r7, #0]
 802791a:	681a      	ldr	r2, [r3, #0]
 802791c:	687b      	ldr	r3, [r7, #4]
 802791e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8027920:	687b      	ldr	r3, [r7, #4]
 8027922:	4a0a      	ldr	r2, [pc, #40]	; (802794c <TIM_Base_SetConfig+0x114>)
 8027924:	4293      	cmp	r3, r2
 8027926:	d003      	beq.n	8027930 <TIM_Base_SetConfig+0xf8>
 8027928:	687b      	ldr	r3, [r7, #4]
 802792a:	4a0c      	ldr	r2, [pc, #48]	; (802795c <TIM_Base_SetConfig+0x124>)
 802792c:	4293      	cmp	r3, r2
 802792e:	d103      	bne.n	8027938 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8027930:	683b      	ldr	r3, [r7, #0]
 8027932:	691a      	ldr	r2, [r3, #16]
 8027934:	687b      	ldr	r3, [r7, #4]
 8027936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8027938:	687b      	ldr	r3, [r7, #4]
 802793a:	2201      	movs	r2, #1
 802793c:	615a      	str	r2, [r3, #20]
}
 802793e:	bf00      	nop
 8027940:	3714      	adds	r7, #20
 8027942:	46bd      	mov	sp, r7
 8027944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027948:	4770      	bx	lr
 802794a:	bf00      	nop
 802794c:	40010000 	.word	0x40010000
 8027950:	40000400 	.word	0x40000400
 8027954:	40000800 	.word	0x40000800
 8027958:	40000c00 	.word	0x40000c00
 802795c:	40010400 	.word	0x40010400
 8027960:	40014000 	.word	0x40014000
 8027964:	40014400 	.word	0x40014400
 8027968:	40014800 	.word	0x40014800
 802796c:	40001800 	.word	0x40001800
 8027970:	40001c00 	.word	0x40001c00
 8027974:	40002000 	.word	0x40002000

08027978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8027978:	b480      	push	{r7}
 802797a:	b087      	sub	sp, #28
 802797c:	af00      	add	r7, sp, #0
 802797e:	6078      	str	r0, [r7, #4]
 8027980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8027982:	687b      	ldr	r3, [r7, #4]
 8027984:	6a1b      	ldr	r3, [r3, #32]
 8027986:	f023 0201 	bic.w	r2, r3, #1
 802798a:	687b      	ldr	r3, [r7, #4]
 802798c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802798e:	687b      	ldr	r3, [r7, #4]
 8027990:	6a1b      	ldr	r3, [r3, #32]
 8027992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8027994:	687b      	ldr	r3, [r7, #4]
 8027996:	685b      	ldr	r3, [r3, #4]
 8027998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802799a:	687b      	ldr	r3, [r7, #4]
 802799c:	699b      	ldr	r3, [r3, #24]
 802799e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80279a0:	68fb      	ldr	r3, [r7, #12]
 80279a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80279a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80279a8:	68fb      	ldr	r3, [r7, #12]
 80279aa:	f023 0303 	bic.w	r3, r3, #3
 80279ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80279b0:	683b      	ldr	r3, [r7, #0]
 80279b2:	681b      	ldr	r3, [r3, #0]
 80279b4:	68fa      	ldr	r2, [r7, #12]
 80279b6:	4313      	orrs	r3, r2
 80279b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80279ba:	697b      	ldr	r3, [r7, #20]
 80279bc:	f023 0302 	bic.w	r3, r3, #2
 80279c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80279c2:	683b      	ldr	r3, [r7, #0]
 80279c4:	689b      	ldr	r3, [r3, #8]
 80279c6:	697a      	ldr	r2, [r7, #20]
 80279c8:	4313      	orrs	r3, r2
 80279ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80279cc:	687b      	ldr	r3, [r7, #4]
 80279ce:	4a20      	ldr	r2, [pc, #128]	; (8027a50 <TIM_OC1_SetConfig+0xd8>)
 80279d0:	4293      	cmp	r3, r2
 80279d2:	d003      	beq.n	80279dc <TIM_OC1_SetConfig+0x64>
 80279d4:	687b      	ldr	r3, [r7, #4]
 80279d6:	4a1f      	ldr	r2, [pc, #124]	; (8027a54 <TIM_OC1_SetConfig+0xdc>)
 80279d8:	4293      	cmp	r3, r2
 80279da:	d10c      	bne.n	80279f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80279dc:	697b      	ldr	r3, [r7, #20]
 80279de:	f023 0308 	bic.w	r3, r3, #8
 80279e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80279e4:	683b      	ldr	r3, [r7, #0]
 80279e6:	68db      	ldr	r3, [r3, #12]
 80279e8:	697a      	ldr	r2, [r7, #20]
 80279ea:	4313      	orrs	r3, r2
 80279ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80279ee:	697b      	ldr	r3, [r7, #20]
 80279f0:	f023 0304 	bic.w	r3, r3, #4
 80279f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80279f6:	687b      	ldr	r3, [r7, #4]
 80279f8:	4a15      	ldr	r2, [pc, #84]	; (8027a50 <TIM_OC1_SetConfig+0xd8>)
 80279fa:	4293      	cmp	r3, r2
 80279fc:	d003      	beq.n	8027a06 <TIM_OC1_SetConfig+0x8e>
 80279fe:	687b      	ldr	r3, [r7, #4]
 8027a00:	4a14      	ldr	r2, [pc, #80]	; (8027a54 <TIM_OC1_SetConfig+0xdc>)
 8027a02:	4293      	cmp	r3, r2
 8027a04:	d111      	bne.n	8027a2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8027a06:	693b      	ldr	r3, [r7, #16]
 8027a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8027a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8027a0e:	693b      	ldr	r3, [r7, #16]
 8027a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8027a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8027a16:	683b      	ldr	r3, [r7, #0]
 8027a18:	695b      	ldr	r3, [r3, #20]
 8027a1a:	693a      	ldr	r2, [r7, #16]
 8027a1c:	4313      	orrs	r3, r2
 8027a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8027a20:	683b      	ldr	r3, [r7, #0]
 8027a22:	699b      	ldr	r3, [r3, #24]
 8027a24:	693a      	ldr	r2, [r7, #16]
 8027a26:	4313      	orrs	r3, r2
 8027a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8027a2a:	687b      	ldr	r3, [r7, #4]
 8027a2c:	693a      	ldr	r2, [r7, #16]
 8027a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8027a30:	687b      	ldr	r3, [r7, #4]
 8027a32:	68fa      	ldr	r2, [r7, #12]
 8027a34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8027a36:	683b      	ldr	r3, [r7, #0]
 8027a38:	685a      	ldr	r2, [r3, #4]
 8027a3a:	687b      	ldr	r3, [r7, #4]
 8027a3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8027a3e:	687b      	ldr	r3, [r7, #4]
 8027a40:	697a      	ldr	r2, [r7, #20]
 8027a42:	621a      	str	r2, [r3, #32]
}
 8027a44:	bf00      	nop
 8027a46:	371c      	adds	r7, #28
 8027a48:	46bd      	mov	sp, r7
 8027a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a4e:	4770      	bx	lr
 8027a50:	40010000 	.word	0x40010000
 8027a54:	40010400 	.word	0x40010400

08027a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8027a58:	b480      	push	{r7}
 8027a5a:	b087      	sub	sp, #28
 8027a5c:	af00      	add	r7, sp, #0
 8027a5e:	6078      	str	r0, [r7, #4]
 8027a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8027a62:	687b      	ldr	r3, [r7, #4]
 8027a64:	6a1b      	ldr	r3, [r3, #32]
 8027a66:	f023 0210 	bic.w	r2, r3, #16
 8027a6a:	687b      	ldr	r3, [r7, #4]
 8027a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8027a6e:	687b      	ldr	r3, [r7, #4]
 8027a70:	6a1b      	ldr	r3, [r3, #32]
 8027a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8027a74:	687b      	ldr	r3, [r7, #4]
 8027a76:	685b      	ldr	r3, [r3, #4]
 8027a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8027a7a:	687b      	ldr	r3, [r7, #4]
 8027a7c:	699b      	ldr	r3, [r3, #24]
 8027a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8027a80:	68fb      	ldr	r3, [r7, #12]
 8027a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8027a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8027a88:	68fb      	ldr	r3, [r7, #12]
 8027a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8027a90:	683b      	ldr	r3, [r7, #0]
 8027a92:	681b      	ldr	r3, [r3, #0]
 8027a94:	021b      	lsls	r3, r3, #8
 8027a96:	68fa      	ldr	r2, [r7, #12]
 8027a98:	4313      	orrs	r3, r2
 8027a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8027a9c:	697b      	ldr	r3, [r7, #20]
 8027a9e:	f023 0320 	bic.w	r3, r3, #32
 8027aa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8027aa4:	683b      	ldr	r3, [r7, #0]
 8027aa6:	689b      	ldr	r3, [r3, #8]
 8027aa8:	011b      	lsls	r3, r3, #4
 8027aaa:	697a      	ldr	r2, [r7, #20]
 8027aac:	4313      	orrs	r3, r2
 8027aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8027ab0:	687b      	ldr	r3, [r7, #4]
 8027ab2:	4a22      	ldr	r2, [pc, #136]	; (8027b3c <TIM_OC2_SetConfig+0xe4>)
 8027ab4:	4293      	cmp	r3, r2
 8027ab6:	d003      	beq.n	8027ac0 <TIM_OC2_SetConfig+0x68>
 8027ab8:	687b      	ldr	r3, [r7, #4]
 8027aba:	4a21      	ldr	r2, [pc, #132]	; (8027b40 <TIM_OC2_SetConfig+0xe8>)
 8027abc:	4293      	cmp	r3, r2
 8027abe:	d10d      	bne.n	8027adc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8027ac0:	697b      	ldr	r3, [r7, #20]
 8027ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8027ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8027ac8:	683b      	ldr	r3, [r7, #0]
 8027aca:	68db      	ldr	r3, [r3, #12]
 8027acc:	011b      	lsls	r3, r3, #4
 8027ace:	697a      	ldr	r2, [r7, #20]
 8027ad0:	4313      	orrs	r3, r2
 8027ad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8027ad4:	697b      	ldr	r3, [r7, #20]
 8027ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8027ada:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8027adc:	687b      	ldr	r3, [r7, #4]
 8027ade:	4a17      	ldr	r2, [pc, #92]	; (8027b3c <TIM_OC2_SetConfig+0xe4>)
 8027ae0:	4293      	cmp	r3, r2
 8027ae2:	d003      	beq.n	8027aec <TIM_OC2_SetConfig+0x94>
 8027ae4:	687b      	ldr	r3, [r7, #4]
 8027ae6:	4a16      	ldr	r2, [pc, #88]	; (8027b40 <TIM_OC2_SetConfig+0xe8>)
 8027ae8:	4293      	cmp	r3, r2
 8027aea:	d113      	bne.n	8027b14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8027aec:	693b      	ldr	r3, [r7, #16]
 8027aee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8027af2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8027af4:	693b      	ldr	r3, [r7, #16]
 8027af6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8027afa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8027afc:	683b      	ldr	r3, [r7, #0]
 8027afe:	695b      	ldr	r3, [r3, #20]
 8027b00:	009b      	lsls	r3, r3, #2
 8027b02:	693a      	ldr	r2, [r7, #16]
 8027b04:	4313      	orrs	r3, r2
 8027b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8027b08:	683b      	ldr	r3, [r7, #0]
 8027b0a:	699b      	ldr	r3, [r3, #24]
 8027b0c:	009b      	lsls	r3, r3, #2
 8027b0e:	693a      	ldr	r2, [r7, #16]
 8027b10:	4313      	orrs	r3, r2
 8027b12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8027b14:	687b      	ldr	r3, [r7, #4]
 8027b16:	693a      	ldr	r2, [r7, #16]
 8027b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8027b1a:	687b      	ldr	r3, [r7, #4]
 8027b1c:	68fa      	ldr	r2, [r7, #12]
 8027b1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8027b20:	683b      	ldr	r3, [r7, #0]
 8027b22:	685a      	ldr	r2, [r3, #4]
 8027b24:	687b      	ldr	r3, [r7, #4]
 8027b26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8027b28:	687b      	ldr	r3, [r7, #4]
 8027b2a:	697a      	ldr	r2, [r7, #20]
 8027b2c:	621a      	str	r2, [r3, #32]
}
 8027b2e:	bf00      	nop
 8027b30:	371c      	adds	r7, #28
 8027b32:	46bd      	mov	sp, r7
 8027b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b38:	4770      	bx	lr
 8027b3a:	bf00      	nop
 8027b3c:	40010000 	.word	0x40010000
 8027b40:	40010400 	.word	0x40010400

08027b44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8027b44:	b480      	push	{r7}
 8027b46:	b087      	sub	sp, #28
 8027b48:	af00      	add	r7, sp, #0
 8027b4a:	6078      	str	r0, [r7, #4]
 8027b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8027b4e:	687b      	ldr	r3, [r7, #4]
 8027b50:	6a1b      	ldr	r3, [r3, #32]
 8027b52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8027b56:	687b      	ldr	r3, [r7, #4]
 8027b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8027b5a:	687b      	ldr	r3, [r7, #4]
 8027b5c:	6a1b      	ldr	r3, [r3, #32]
 8027b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8027b60:	687b      	ldr	r3, [r7, #4]
 8027b62:	685b      	ldr	r3, [r3, #4]
 8027b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8027b66:	687b      	ldr	r3, [r7, #4]
 8027b68:	69db      	ldr	r3, [r3, #28]
 8027b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8027b6c:	68fb      	ldr	r3, [r7, #12]
 8027b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8027b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8027b74:	68fb      	ldr	r3, [r7, #12]
 8027b76:	f023 0303 	bic.w	r3, r3, #3
 8027b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8027b7c:	683b      	ldr	r3, [r7, #0]
 8027b7e:	681b      	ldr	r3, [r3, #0]
 8027b80:	68fa      	ldr	r2, [r7, #12]
 8027b82:	4313      	orrs	r3, r2
 8027b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8027b86:	697b      	ldr	r3, [r7, #20]
 8027b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8027b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8027b8e:	683b      	ldr	r3, [r7, #0]
 8027b90:	689b      	ldr	r3, [r3, #8]
 8027b92:	021b      	lsls	r3, r3, #8
 8027b94:	697a      	ldr	r2, [r7, #20]
 8027b96:	4313      	orrs	r3, r2
 8027b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8027b9a:	687b      	ldr	r3, [r7, #4]
 8027b9c:	4a21      	ldr	r2, [pc, #132]	; (8027c24 <TIM_OC3_SetConfig+0xe0>)
 8027b9e:	4293      	cmp	r3, r2
 8027ba0:	d003      	beq.n	8027baa <TIM_OC3_SetConfig+0x66>
 8027ba2:	687b      	ldr	r3, [r7, #4]
 8027ba4:	4a20      	ldr	r2, [pc, #128]	; (8027c28 <TIM_OC3_SetConfig+0xe4>)
 8027ba6:	4293      	cmp	r3, r2
 8027ba8:	d10d      	bne.n	8027bc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8027baa:	697b      	ldr	r3, [r7, #20]
 8027bac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8027bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8027bb2:	683b      	ldr	r3, [r7, #0]
 8027bb4:	68db      	ldr	r3, [r3, #12]
 8027bb6:	021b      	lsls	r3, r3, #8
 8027bb8:	697a      	ldr	r2, [r7, #20]
 8027bba:	4313      	orrs	r3, r2
 8027bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8027bbe:	697b      	ldr	r3, [r7, #20]
 8027bc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8027bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8027bc6:	687b      	ldr	r3, [r7, #4]
 8027bc8:	4a16      	ldr	r2, [pc, #88]	; (8027c24 <TIM_OC3_SetConfig+0xe0>)
 8027bca:	4293      	cmp	r3, r2
 8027bcc:	d003      	beq.n	8027bd6 <TIM_OC3_SetConfig+0x92>
 8027bce:	687b      	ldr	r3, [r7, #4]
 8027bd0:	4a15      	ldr	r2, [pc, #84]	; (8027c28 <TIM_OC3_SetConfig+0xe4>)
 8027bd2:	4293      	cmp	r3, r2
 8027bd4:	d113      	bne.n	8027bfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8027bd6:	693b      	ldr	r3, [r7, #16]
 8027bd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8027bde:	693b      	ldr	r3, [r7, #16]
 8027be0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8027be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8027be6:	683b      	ldr	r3, [r7, #0]
 8027be8:	695b      	ldr	r3, [r3, #20]
 8027bea:	011b      	lsls	r3, r3, #4
 8027bec:	693a      	ldr	r2, [r7, #16]
 8027bee:	4313      	orrs	r3, r2
 8027bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8027bf2:	683b      	ldr	r3, [r7, #0]
 8027bf4:	699b      	ldr	r3, [r3, #24]
 8027bf6:	011b      	lsls	r3, r3, #4
 8027bf8:	693a      	ldr	r2, [r7, #16]
 8027bfa:	4313      	orrs	r3, r2
 8027bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8027bfe:	687b      	ldr	r3, [r7, #4]
 8027c00:	693a      	ldr	r2, [r7, #16]
 8027c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8027c04:	687b      	ldr	r3, [r7, #4]
 8027c06:	68fa      	ldr	r2, [r7, #12]
 8027c08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8027c0a:	683b      	ldr	r3, [r7, #0]
 8027c0c:	685a      	ldr	r2, [r3, #4]
 8027c0e:	687b      	ldr	r3, [r7, #4]
 8027c10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8027c12:	687b      	ldr	r3, [r7, #4]
 8027c14:	697a      	ldr	r2, [r7, #20]
 8027c16:	621a      	str	r2, [r3, #32]
}
 8027c18:	bf00      	nop
 8027c1a:	371c      	adds	r7, #28
 8027c1c:	46bd      	mov	sp, r7
 8027c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c22:	4770      	bx	lr
 8027c24:	40010000 	.word	0x40010000
 8027c28:	40010400 	.word	0x40010400

08027c2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8027c2c:	b480      	push	{r7}
 8027c2e:	b087      	sub	sp, #28
 8027c30:	af00      	add	r7, sp, #0
 8027c32:	6078      	str	r0, [r7, #4]
 8027c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8027c36:	687b      	ldr	r3, [r7, #4]
 8027c38:	6a1b      	ldr	r3, [r3, #32]
 8027c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8027c3e:	687b      	ldr	r3, [r7, #4]
 8027c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8027c42:	687b      	ldr	r3, [r7, #4]
 8027c44:	6a1b      	ldr	r3, [r3, #32]
 8027c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8027c48:	687b      	ldr	r3, [r7, #4]
 8027c4a:	685b      	ldr	r3, [r3, #4]
 8027c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8027c4e:	687b      	ldr	r3, [r7, #4]
 8027c50:	69db      	ldr	r3, [r3, #28]
 8027c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8027c54:	68fb      	ldr	r3, [r7, #12]
 8027c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8027c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8027c5c:	68fb      	ldr	r3, [r7, #12]
 8027c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8027c64:	683b      	ldr	r3, [r7, #0]
 8027c66:	681b      	ldr	r3, [r3, #0]
 8027c68:	021b      	lsls	r3, r3, #8
 8027c6a:	68fa      	ldr	r2, [r7, #12]
 8027c6c:	4313      	orrs	r3, r2
 8027c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8027c70:	693b      	ldr	r3, [r7, #16]
 8027c72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8027c76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8027c78:	683b      	ldr	r3, [r7, #0]
 8027c7a:	689b      	ldr	r3, [r3, #8]
 8027c7c:	031b      	lsls	r3, r3, #12
 8027c7e:	693a      	ldr	r2, [r7, #16]
 8027c80:	4313      	orrs	r3, r2
 8027c82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8027c84:	687b      	ldr	r3, [r7, #4]
 8027c86:	4a12      	ldr	r2, [pc, #72]	; (8027cd0 <TIM_OC4_SetConfig+0xa4>)
 8027c88:	4293      	cmp	r3, r2
 8027c8a:	d003      	beq.n	8027c94 <TIM_OC4_SetConfig+0x68>
 8027c8c:	687b      	ldr	r3, [r7, #4]
 8027c8e:	4a11      	ldr	r2, [pc, #68]	; (8027cd4 <TIM_OC4_SetConfig+0xa8>)
 8027c90:	4293      	cmp	r3, r2
 8027c92:	d109      	bne.n	8027ca8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8027c94:	697b      	ldr	r3, [r7, #20]
 8027c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8027c9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8027c9c:	683b      	ldr	r3, [r7, #0]
 8027c9e:	695b      	ldr	r3, [r3, #20]
 8027ca0:	019b      	lsls	r3, r3, #6
 8027ca2:	697a      	ldr	r2, [r7, #20]
 8027ca4:	4313      	orrs	r3, r2
 8027ca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8027ca8:	687b      	ldr	r3, [r7, #4]
 8027caa:	697a      	ldr	r2, [r7, #20]
 8027cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8027cae:	687b      	ldr	r3, [r7, #4]
 8027cb0:	68fa      	ldr	r2, [r7, #12]
 8027cb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8027cb4:	683b      	ldr	r3, [r7, #0]
 8027cb6:	685a      	ldr	r2, [r3, #4]
 8027cb8:	687b      	ldr	r3, [r7, #4]
 8027cba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8027cbc:	687b      	ldr	r3, [r7, #4]
 8027cbe:	693a      	ldr	r2, [r7, #16]
 8027cc0:	621a      	str	r2, [r3, #32]
}
 8027cc2:	bf00      	nop
 8027cc4:	371c      	adds	r7, #28
 8027cc6:	46bd      	mov	sp, r7
 8027cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ccc:	4770      	bx	lr
 8027cce:	bf00      	nop
 8027cd0:	40010000 	.word	0x40010000
 8027cd4:	40010400 	.word	0x40010400

08027cd8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8027cd8:	b580      	push	{r7, lr}
 8027cda:	b086      	sub	sp, #24
 8027cdc:	af00      	add	r7, sp, #0
 8027cde:	6078      	str	r0, [r7, #4]
 8027ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8027ce2:	2300      	movs	r3, #0
 8027ce4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8027ce6:	687b      	ldr	r3, [r7, #4]
 8027ce8:	681b      	ldr	r3, [r3, #0]
 8027cea:	689b      	ldr	r3, [r3, #8]
 8027cec:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8027cee:	693b      	ldr	r3, [r7, #16]
 8027cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8027cf4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8027cf6:	683b      	ldr	r3, [r7, #0]
 8027cf8:	685b      	ldr	r3, [r3, #4]
 8027cfa:	693a      	ldr	r2, [r7, #16]
 8027cfc:	4313      	orrs	r3, r2
 8027cfe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8027d00:	693b      	ldr	r3, [r7, #16]
 8027d02:	f023 0307 	bic.w	r3, r3, #7
 8027d06:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8027d08:	683b      	ldr	r3, [r7, #0]
 8027d0a:	681b      	ldr	r3, [r3, #0]
 8027d0c:	693a      	ldr	r2, [r7, #16]
 8027d0e:	4313      	orrs	r3, r2
 8027d10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8027d12:	687b      	ldr	r3, [r7, #4]
 8027d14:	681b      	ldr	r3, [r3, #0]
 8027d16:	693a      	ldr	r2, [r7, #16]
 8027d18:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8027d1a:	683b      	ldr	r3, [r7, #0]
 8027d1c:	685b      	ldr	r3, [r3, #4]
 8027d1e:	2b70      	cmp	r3, #112	; 0x70
 8027d20:	d01a      	beq.n	8027d58 <TIM_SlaveTimer_SetConfig+0x80>
 8027d22:	2b70      	cmp	r3, #112	; 0x70
 8027d24:	d860      	bhi.n	8027de8 <TIM_SlaveTimer_SetConfig+0x110>
 8027d26:	2b60      	cmp	r3, #96	; 0x60
 8027d28:	d054      	beq.n	8027dd4 <TIM_SlaveTimer_SetConfig+0xfc>
 8027d2a:	2b60      	cmp	r3, #96	; 0x60
 8027d2c:	d85c      	bhi.n	8027de8 <TIM_SlaveTimer_SetConfig+0x110>
 8027d2e:	2b50      	cmp	r3, #80	; 0x50
 8027d30:	d046      	beq.n	8027dc0 <TIM_SlaveTimer_SetConfig+0xe8>
 8027d32:	2b50      	cmp	r3, #80	; 0x50
 8027d34:	d858      	bhi.n	8027de8 <TIM_SlaveTimer_SetConfig+0x110>
 8027d36:	2b40      	cmp	r3, #64	; 0x40
 8027d38:	d019      	beq.n	8027d6e <TIM_SlaveTimer_SetConfig+0x96>
 8027d3a:	2b40      	cmp	r3, #64	; 0x40
 8027d3c:	d854      	bhi.n	8027de8 <TIM_SlaveTimer_SetConfig+0x110>
 8027d3e:	2b30      	cmp	r3, #48	; 0x30
 8027d40:	d055      	beq.n	8027dee <TIM_SlaveTimer_SetConfig+0x116>
 8027d42:	2b30      	cmp	r3, #48	; 0x30
 8027d44:	d850      	bhi.n	8027de8 <TIM_SlaveTimer_SetConfig+0x110>
 8027d46:	2b20      	cmp	r3, #32
 8027d48:	d051      	beq.n	8027dee <TIM_SlaveTimer_SetConfig+0x116>
 8027d4a:	2b20      	cmp	r3, #32
 8027d4c:	d84c      	bhi.n	8027de8 <TIM_SlaveTimer_SetConfig+0x110>
 8027d4e:	2b00      	cmp	r3, #0
 8027d50:	d04d      	beq.n	8027dee <TIM_SlaveTimer_SetConfig+0x116>
 8027d52:	2b10      	cmp	r3, #16
 8027d54:	d04b      	beq.n	8027dee <TIM_SlaveTimer_SetConfig+0x116>
 8027d56:	e047      	b.n	8027de8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8027d58:	687b      	ldr	r3, [r7, #4]
 8027d5a:	6818      	ldr	r0, [r3, #0]
 8027d5c:	683b      	ldr	r3, [r7, #0]
 8027d5e:	68d9      	ldr	r1, [r3, #12]
 8027d60:	683b      	ldr	r3, [r7, #0]
 8027d62:	689a      	ldr	r2, [r3, #8]
 8027d64:	683b      	ldr	r3, [r7, #0]
 8027d66:	691b      	ldr	r3, [r3, #16]
 8027d68:	f000 f9ec 	bl	8028144 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8027d6c:	e040      	b.n	8027df0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8027d6e:	683b      	ldr	r3, [r7, #0]
 8027d70:	681b      	ldr	r3, [r3, #0]
 8027d72:	2b05      	cmp	r3, #5
 8027d74:	d101      	bne.n	8027d7a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8027d76:	2301      	movs	r3, #1
 8027d78:	e03b      	b.n	8027df2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8027d7a:	687b      	ldr	r3, [r7, #4]
 8027d7c:	681b      	ldr	r3, [r3, #0]
 8027d7e:	6a1b      	ldr	r3, [r3, #32]
 8027d80:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8027d82:	687b      	ldr	r3, [r7, #4]
 8027d84:	681b      	ldr	r3, [r3, #0]
 8027d86:	6a1a      	ldr	r2, [r3, #32]
 8027d88:	687b      	ldr	r3, [r7, #4]
 8027d8a:	681b      	ldr	r3, [r3, #0]
 8027d8c:	f022 0201 	bic.w	r2, r2, #1
 8027d90:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8027d92:	687b      	ldr	r3, [r7, #4]
 8027d94:	681b      	ldr	r3, [r3, #0]
 8027d96:	699b      	ldr	r3, [r3, #24]
 8027d98:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8027d9a:	68bb      	ldr	r3, [r7, #8]
 8027d9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8027da0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8027da2:	683b      	ldr	r3, [r7, #0]
 8027da4:	691b      	ldr	r3, [r3, #16]
 8027da6:	011b      	lsls	r3, r3, #4
 8027da8:	68ba      	ldr	r2, [r7, #8]
 8027daa:	4313      	orrs	r3, r2
 8027dac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8027dae:	687b      	ldr	r3, [r7, #4]
 8027db0:	681b      	ldr	r3, [r3, #0]
 8027db2:	68ba      	ldr	r2, [r7, #8]
 8027db4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8027db6:	687b      	ldr	r3, [r7, #4]
 8027db8:	681b      	ldr	r3, [r3, #0]
 8027dba:	68fa      	ldr	r2, [r7, #12]
 8027dbc:	621a      	str	r2, [r3, #32]
      break;
 8027dbe:	e017      	b.n	8027df0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8027dc0:	687b      	ldr	r3, [r7, #4]
 8027dc2:	6818      	ldr	r0, [r3, #0]
 8027dc4:	683b      	ldr	r3, [r7, #0]
 8027dc6:	6899      	ldr	r1, [r3, #8]
 8027dc8:	683b      	ldr	r3, [r7, #0]
 8027dca:	691b      	ldr	r3, [r3, #16]
 8027dcc:	461a      	mov	r2, r3
 8027dce:	f000 f889 	bl	8027ee4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8027dd2:	e00d      	b.n	8027df0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8027dd4:	687b      	ldr	r3, [r7, #4]
 8027dd6:	6818      	ldr	r0, [r3, #0]
 8027dd8:	683b      	ldr	r3, [r7, #0]
 8027dda:	6899      	ldr	r1, [r3, #8]
 8027ddc:	683b      	ldr	r3, [r7, #0]
 8027dde:	691b      	ldr	r3, [r3, #16]
 8027de0:	461a      	mov	r2, r3
 8027de2:	f000 f8eb 	bl	8027fbc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8027de6:	e003      	b.n	8027df0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8027de8:	2301      	movs	r3, #1
 8027dea:	75fb      	strb	r3, [r7, #23]
      break;
 8027dec:	e000      	b.n	8027df0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8027dee:	bf00      	nop
  }

  return status;
 8027df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8027df2:	4618      	mov	r0, r3
 8027df4:	3718      	adds	r7, #24
 8027df6:	46bd      	mov	sp, r7
 8027df8:	bd80      	pop	{r7, pc}
	...

08027dfc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8027dfc:	b480      	push	{r7}
 8027dfe:	b087      	sub	sp, #28
 8027e00:	af00      	add	r7, sp, #0
 8027e02:	60f8      	str	r0, [r7, #12]
 8027e04:	60b9      	str	r1, [r7, #8]
 8027e06:	607a      	str	r2, [r7, #4]
 8027e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8027e0a:	68fb      	ldr	r3, [r7, #12]
 8027e0c:	6a1b      	ldr	r3, [r3, #32]
 8027e0e:	f023 0201 	bic.w	r2, r3, #1
 8027e12:	68fb      	ldr	r3, [r7, #12]
 8027e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8027e16:	68fb      	ldr	r3, [r7, #12]
 8027e18:	699b      	ldr	r3, [r3, #24]
 8027e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8027e1c:	68fb      	ldr	r3, [r7, #12]
 8027e1e:	6a1b      	ldr	r3, [r3, #32]
 8027e20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8027e22:	68fb      	ldr	r3, [r7, #12]
 8027e24:	4a28      	ldr	r2, [pc, #160]	; (8027ec8 <TIM_TI1_SetConfig+0xcc>)
 8027e26:	4293      	cmp	r3, r2
 8027e28:	d01b      	beq.n	8027e62 <TIM_TI1_SetConfig+0x66>
 8027e2a:	68fb      	ldr	r3, [r7, #12]
 8027e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8027e30:	d017      	beq.n	8027e62 <TIM_TI1_SetConfig+0x66>
 8027e32:	68fb      	ldr	r3, [r7, #12]
 8027e34:	4a25      	ldr	r2, [pc, #148]	; (8027ecc <TIM_TI1_SetConfig+0xd0>)
 8027e36:	4293      	cmp	r3, r2
 8027e38:	d013      	beq.n	8027e62 <TIM_TI1_SetConfig+0x66>
 8027e3a:	68fb      	ldr	r3, [r7, #12]
 8027e3c:	4a24      	ldr	r2, [pc, #144]	; (8027ed0 <TIM_TI1_SetConfig+0xd4>)
 8027e3e:	4293      	cmp	r3, r2
 8027e40:	d00f      	beq.n	8027e62 <TIM_TI1_SetConfig+0x66>
 8027e42:	68fb      	ldr	r3, [r7, #12]
 8027e44:	4a23      	ldr	r2, [pc, #140]	; (8027ed4 <TIM_TI1_SetConfig+0xd8>)
 8027e46:	4293      	cmp	r3, r2
 8027e48:	d00b      	beq.n	8027e62 <TIM_TI1_SetConfig+0x66>
 8027e4a:	68fb      	ldr	r3, [r7, #12]
 8027e4c:	4a22      	ldr	r2, [pc, #136]	; (8027ed8 <TIM_TI1_SetConfig+0xdc>)
 8027e4e:	4293      	cmp	r3, r2
 8027e50:	d007      	beq.n	8027e62 <TIM_TI1_SetConfig+0x66>
 8027e52:	68fb      	ldr	r3, [r7, #12]
 8027e54:	4a21      	ldr	r2, [pc, #132]	; (8027edc <TIM_TI1_SetConfig+0xe0>)
 8027e56:	4293      	cmp	r3, r2
 8027e58:	d003      	beq.n	8027e62 <TIM_TI1_SetConfig+0x66>
 8027e5a:	68fb      	ldr	r3, [r7, #12]
 8027e5c:	4a20      	ldr	r2, [pc, #128]	; (8027ee0 <TIM_TI1_SetConfig+0xe4>)
 8027e5e:	4293      	cmp	r3, r2
 8027e60:	d101      	bne.n	8027e66 <TIM_TI1_SetConfig+0x6a>
 8027e62:	2301      	movs	r3, #1
 8027e64:	e000      	b.n	8027e68 <TIM_TI1_SetConfig+0x6c>
 8027e66:	2300      	movs	r3, #0
 8027e68:	2b00      	cmp	r3, #0
 8027e6a:	d008      	beq.n	8027e7e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8027e6c:	697b      	ldr	r3, [r7, #20]
 8027e6e:	f023 0303 	bic.w	r3, r3, #3
 8027e72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8027e74:	697a      	ldr	r2, [r7, #20]
 8027e76:	687b      	ldr	r3, [r7, #4]
 8027e78:	4313      	orrs	r3, r2
 8027e7a:	617b      	str	r3, [r7, #20]
 8027e7c:	e003      	b.n	8027e86 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8027e7e:	697b      	ldr	r3, [r7, #20]
 8027e80:	f043 0301 	orr.w	r3, r3, #1
 8027e84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8027e86:	697b      	ldr	r3, [r7, #20]
 8027e88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8027e8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8027e8e:	683b      	ldr	r3, [r7, #0]
 8027e90:	011b      	lsls	r3, r3, #4
 8027e92:	b2db      	uxtb	r3, r3
 8027e94:	697a      	ldr	r2, [r7, #20]
 8027e96:	4313      	orrs	r3, r2
 8027e98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8027e9a:	693b      	ldr	r3, [r7, #16]
 8027e9c:	f023 030a 	bic.w	r3, r3, #10
 8027ea0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8027ea2:	68bb      	ldr	r3, [r7, #8]
 8027ea4:	f003 030a 	and.w	r3, r3, #10
 8027ea8:	693a      	ldr	r2, [r7, #16]
 8027eaa:	4313      	orrs	r3, r2
 8027eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8027eae:	68fb      	ldr	r3, [r7, #12]
 8027eb0:	697a      	ldr	r2, [r7, #20]
 8027eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8027eb4:	68fb      	ldr	r3, [r7, #12]
 8027eb6:	693a      	ldr	r2, [r7, #16]
 8027eb8:	621a      	str	r2, [r3, #32]
}
 8027eba:	bf00      	nop
 8027ebc:	371c      	adds	r7, #28
 8027ebe:	46bd      	mov	sp, r7
 8027ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ec4:	4770      	bx	lr
 8027ec6:	bf00      	nop
 8027ec8:	40010000 	.word	0x40010000
 8027ecc:	40000400 	.word	0x40000400
 8027ed0:	40000800 	.word	0x40000800
 8027ed4:	40000c00 	.word	0x40000c00
 8027ed8:	40010400 	.word	0x40010400
 8027edc:	40014000 	.word	0x40014000
 8027ee0:	40001800 	.word	0x40001800

08027ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8027ee4:	b480      	push	{r7}
 8027ee6:	b087      	sub	sp, #28
 8027ee8:	af00      	add	r7, sp, #0
 8027eea:	60f8      	str	r0, [r7, #12]
 8027eec:	60b9      	str	r1, [r7, #8]
 8027eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8027ef0:	68fb      	ldr	r3, [r7, #12]
 8027ef2:	6a1b      	ldr	r3, [r3, #32]
 8027ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8027ef6:	68fb      	ldr	r3, [r7, #12]
 8027ef8:	6a1b      	ldr	r3, [r3, #32]
 8027efa:	f023 0201 	bic.w	r2, r3, #1
 8027efe:	68fb      	ldr	r3, [r7, #12]
 8027f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8027f02:	68fb      	ldr	r3, [r7, #12]
 8027f04:	699b      	ldr	r3, [r3, #24]
 8027f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8027f08:	693b      	ldr	r3, [r7, #16]
 8027f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8027f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8027f10:	687b      	ldr	r3, [r7, #4]
 8027f12:	011b      	lsls	r3, r3, #4
 8027f14:	693a      	ldr	r2, [r7, #16]
 8027f16:	4313      	orrs	r3, r2
 8027f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8027f1a:	697b      	ldr	r3, [r7, #20]
 8027f1c:	f023 030a 	bic.w	r3, r3, #10
 8027f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8027f22:	697a      	ldr	r2, [r7, #20]
 8027f24:	68bb      	ldr	r3, [r7, #8]
 8027f26:	4313      	orrs	r3, r2
 8027f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8027f2a:	68fb      	ldr	r3, [r7, #12]
 8027f2c:	693a      	ldr	r2, [r7, #16]
 8027f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8027f30:	68fb      	ldr	r3, [r7, #12]
 8027f32:	697a      	ldr	r2, [r7, #20]
 8027f34:	621a      	str	r2, [r3, #32]
}
 8027f36:	bf00      	nop
 8027f38:	371c      	adds	r7, #28
 8027f3a:	46bd      	mov	sp, r7
 8027f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f40:	4770      	bx	lr

08027f42 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8027f42:	b480      	push	{r7}
 8027f44:	b087      	sub	sp, #28
 8027f46:	af00      	add	r7, sp, #0
 8027f48:	60f8      	str	r0, [r7, #12]
 8027f4a:	60b9      	str	r1, [r7, #8]
 8027f4c:	607a      	str	r2, [r7, #4]
 8027f4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8027f50:	68fb      	ldr	r3, [r7, #12]
 8027f52:	6a1b      	ldr	r3, [r3, #32]
 8027f54:	f023 0210 	bic.w	r2, r3, #16
 8027f58:	68fb      	ldr	r3, [r7, #12]
 8027f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8027f5c:	68fb      	ldr	r3, [r7, #12]
 8027f5e:	699b      	ldr	r3, [r3, #24]
 8027f60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8027f62:	68fb      	ldr	r3, [r7, #12]
 8027f64:	6a1b      	ldr	r3, [r3, #32]
 8027f66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8027f68:	697b      	ldr	r3, [r7, #20]
 8027f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027f6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8027f70:	687b      	ldr	r3, [r7, #4]
 8027f72:	021b      	lsls	r3, r3, #8
 8027f74:	697a      	ldr	r2, [r7, #20]
 8027f76:	4313      	orrs	r3, r2
 8027f78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8027f7a:	697b      	ldr	r3, [r7, #20]
 8027f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8027f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8027f82:	683b      	ldr	r3, [r7, #0]
 8027f84:	031b      	lsls	r3, r3, #12
 8027f86:	b29b      	uxth	r3, r3
 8027f88:	697a      	ldr	r2, [r7, #20]
 8027f8a:	4313      	orrs	r3, r2
 8027f8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8027f8e:	693b      	ldr	r3, [r7, #16]
 8027f90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8027f94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8027f96:	68bb      	ldr	r3, [r7, #8]
 8027f98:	011b      	lsls	r3, r3, #4
 8027f9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8027f9e:	693a      	ldr	r2, [r7, #16]
 8027fa0:	4313      	orrs	r3, r2
 8027fa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8027fa4:	68fb      	ldr	r3, [r7, #12]
 8027fa6:	697a      	ldr	r2, [r7, #20]
 8027fa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8027faa:	68fb      	ldr	r3, [r7, #12]
 8027fac:	693a      	ldr	r2, [r7, #16]
 8027fae:	621a      	str	r2, [r3, #32]
}
 8027fb0:	bf00      	nop
 8027fb2:	371c      	adds	r7, #28
 8027fb4:	46bd      	mov	sp, r7
 8027fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fba:	4770      	bx	lr

08027fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8027fbc:	b480      	push	{r7}
 8027fbe:	b087      	sub	sp, #28
 8027fc0:	af00      	add	r7, sp, #0
 8027fc2:	60f8      	str	r0, [r7, #12]
 8027fc4:	60b9      	str	r1, [r7, #8]
 8027fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8027fc8:	68fb      	ldr	r3, [r7, #12]
 8027fca:	6a1b      	ldr	r3, [r3, #32]
 8027fcc:	f023 0210 	bic.w	r2, r3, #16
 8027fd0:	68fb      	ldr	r3, [r7, #12]
 8027fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8027fd4:	68fb      	ldr	r3, [r7, #12]
 8027fd6:	699b      	ldr	r3, [r3, #24]
 8027fd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8027fda:	68fb      	ldr	r3, [r7, #12]
 8027fdc:	6a1b      	ldr	r3, [r3, #32]
 8027fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8027fe0:	697b      	ldr	r3, [r7, #20]
 8027fe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8027fe6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8027fe8:	687b      	ldr	r3, [r7, #4]
 8027fea:	031b      	lsls	r3, r3, #12
 8027fec:	697a      	ldr	r2, [r7, #20]
 8027fee:	4313      	orrs	r3, r2
 8027ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8027ff2:	693b      	ldr	r3, [r7, #16]
 8027ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8027ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8027ffa:	68bb      	ldr	r3, [r7, #8]
 8027ffc:	011b      	lsls	r3, r3, #4
 8027ffe:	693a      	ldr	r2, [r7, #16]
 8028000:	4313      	orrs	r3, r2
 8028002:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8028004:	68fb      	ldr	r3, [r7, #12]
 8028006:	697a      	ldr	r2, [r7, #20]
 8028008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802800a:	68fb      	ldr	r3, [r7, #12]
 802800c:	693a      	ldr	r2, [r7, #16]
 802800e:	621a      	str	r2, [r3, #32]
}
 8028010:	bf00      	nop
 8028012:	371c      	adds	r7, #28
 8028014:	46bd      	mov	sp, r7
 8028016:	f85d 7b04 	ldr.w	r7, [sp], #4
 802801a:	4770      	bx	lr

0802801c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 802801c:	b480      	push	{r7}
 802801e:	b087      	sub	sp, #28
 8028020:	af00      	add	r7, sp, #0
 8028022:	60f8      	str	r0, [r7, #12]
 8028024:	60b9      	str	r1, [r7, #8]
 8028026:	607a      	str	r2, [r7, #4]
 8028028:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802802a:	68fb      	ldr	r3, [r7, #12]
 802802c:	6a1b      	ldr	r3, [r3, #32]
 802802e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8028032:	68fb      	ldr	r3, [r7, #12]
 8028034:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8028036:	68fb      	ldr	r3, [r7, #12]
 8028038:	69db      	ldr	r3, [r3, #28]
 802803a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802803c:	68fb      	ldr	r3, [r7, #12]
 802803e:	6a1b      	ldr	r3, [r3, #32]
 8028040:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8028042:	697b      	ldr	r3, [r7, #20]
 8028044:	f023 0303 	bic.w	r3, r3, #3
 8028048:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 802804a:	697a      	ldr	r2, [r7, #20]
 802804c:	687b      	ldr	r3, [r7, #4]
 802804e:	4313      	orrs	r3, r2
 8028050:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8028052:	697b      	ldr	r3, [r7, #20]
 8028054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8028058:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 802805a:	683b      	ldr	r3, [r7, #0]
 802805c:	011b      	lsls	r3, r3, #4
 802805e:	b2db      	uxtb	r3, r3
 8028060:	697a      	ldr	r2, [r7, #20]
 8028062:	4313      	orrs	r3, r2
 8028064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8028066:	693b      	ldr	r3, [r7, #16]
 8028068:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 802806c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 802806e:	68bb      	ldr	r3, [r7, #8]
 8028070:	021b      	lsls	r3, r3, #8
 8028072:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8028076:	693a      	ldr	r2, [r7, #16]
 8028078:	4313      	orrs	r3, r2
 802807a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 802807c:	68fb      	ldr	r3, [r7, #12]
 802807e:	697a      	ldr	r2, [r7, #20]
 8028080:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8028082:	68fb      	ldr	r3, [r7, #12]
 8028084:	693a      	ldr	r2, [r7, #16]
 8028086:	621a      	str	r2, [r3, #32]
}
 8028088:	bf00      	nop
 802808a:	371c      	adds	r7, #28
 802808c:	46bd      	mov	sp, r7
 802808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028092:	4770      	bx	lr

08028094 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8028094:	b480      	push	{r7}
 8028096:	b087      	sub	sp, #28
 8028098:	af00      	add	r7, sp, #0
 802809a:	60f8      	str	r0, [r7, #12]
 802809c:	60b9      	str	r1, [r7, #8]
 802809e:	607a      	str	r2, [r7, #4]
 80280a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80280a2:	68fb      	ldr	r3, [r7, #12]
 80280a4:	6a1b      	ldr	r3, [r3, #32]
 80280a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80280aa:	68fb      	ldr	r3, [r7, #12]
 80280ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80280ae:	68fb      	ldr	r3, [r7, #12]
 80280b0:	69db      	ldr	r3, [r3, #28]
 80280b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80280b4:	68fb      	ldr	r3, [r7, #12]
 80280b6:	6a1b      	ldr	r3, [r3, #32]
 80280b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80280ba:	697b      	ldr	r3, [r7, #20]
 80280bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80280c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80280c2:	687b      	ldr	r3, [r7, #4]
 80280c4:	021b      	lsls	r3, r3, #8
 80280c6:	697a      	ldr	r2, [r7, #20]
 80280c8:	4313      	orrs	r3, r2
 80280ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80280cc:	697b      	ldr	r3, [r7, #20]
 80280ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80280d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80280d4:	683b      	ldr	r3, [r7, #0]
 80280d6:	031b      	lsls	r3, r3, #12
 80280d8:	b29b      	uxth	r3, r3
 80280da:	697a      	ldr	r2, [r7, #20]
 80280dc:	4313      	orrs	r3, r2
 80280de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80280e0:	693b      	ldr	r3, [r7, #16]
 80280e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80280e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80280e8:	68bb      	ldr	r3, [r7, #8]
 80280ea:	031b      	lsls	r3, r3, #12
 80280ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80280f0:	693a      	ldr	r2, [r7, #16]
 80280f2:	4313      	orrs	r3, r2
 80280f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80280f6:	68fb      	ldr	r3, [r7, #12]
 80280f8:	697a      	ldr	r2, [r7, #20]
 80280fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80280fc:	68fb      	ldr	r3, [r7, #12]
 80280fe:	693a      	ldr	r2, [r7, #16]
 8028100:	621a      	str	r2, [r3, #32]
}
 8028102:	bf00      	nop
 8028104:	371c      	adds	r7, #28
 8028106:	46bd      	mov	sp, r7
 8028108:	f85d 7b04 	ldr.w	r7, [sp], #4
 802810c:	4770      	bx	lr

0802810e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802810e:	b480      	push	{r7}
 8028110:	b085      	sub	sp, #20
 8028112:	af00      	add	r7, sp, #0
 8028114:	6078      	str	r0, [r7, #4]
 8028116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8028118:	687b      	ldr	r3, [r7, #4]
 802811a:	689b      	ldr	r3, [r3, #8]
 802811c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802811e:	68fb      	ldr	r3, [r7, #12]
 8028120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8028126:	683a      	ldr	r2, [r7, #0]
 8028128:	68fb      	ldr	r3, [r7, #12]
 802812a:	4313      	orrs	r3, r2
 802812c:	f043 0307 	orr.w	r3, r3, #7
 8028130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8028132:	687b      	ldr	r3, [r7, #4]
 8028134:	68fa      	ldr	r2, [r7, #12]
 8028136:	609a      	str	r2, [r3, #8]
}
 8028138:	bf00      	nop
 802813a:	3714      	adds	r7, #20
 802813c:	46bd      	mov	sp, r7
 802813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028142:	4770      	bx	lr

08028144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8028144:	b480      	push	{r7}
 8028146:	b087      	sub	sp, #28
 8028148:	af00      	add	r7, sp, #0
 802814a:	60f8      	str	r0, [r7, #12]
 802814c:	60b9      	str	r1, [r7, #8]
 802814e:	607a      	str	r2, [r7, #4]
 8028150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8028152:	68fb      	ldr	r3, [r7, #12]
 8028154:	689b      	ldr	r3, [r3, #8]
 8028156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8028158:	697b      	ldr	r3, [r7, #20]
 802815a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802815e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8028160:	683b      	ldr	r3, [r7, #0]
 8028162:	021a      	lsls	r2, r3, #8
 8028164:	687b      	ldr	r3, [r7, #4]
 8028166:	431a      	orrs	r2, r3
 8028168:	68bb      	ldr	r3, [r7, #8]
 802816a:	4313      	orrs	r3, r2
 802816c:	697a      	ldr	r2, [r7, #20]
 802816e:	4313      	orrs	r3, r2
 8028170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8028172:	68fb      	ldr	r3, [r7, #12]
 8028174:	697a      	ldr	r2, [r7, #20]
 8028176:	609a      	str	r2, [r3, #8]
}
 8028178:	bf00      	nop
 802817a:	371c      	adds	r7, #28
 802817c:	46bd      	mov	sp, r7
 802817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028182:	4770      	bx	lr

08028184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8028184:	b480      	push	{r7}
 8028186:	b087      	sub	sp, #28
 8028188:	af00      	add	r7, sp, #0
 802818a:	60f8      	str	r0, [r7, #12]
 802818c:	60b9      	str	r1, [r7, #8]
 802818e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8028190:	68bb      	ldr	r3, [r7, #8]
 8028192:	f003 031f 	and.w	r3, r3, #31
 8028196:	2201      	movs	r2, #1
 8028198:	fa02 f303 	lsl.w	r3, r2, r3
 802819c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802819e:	68fb      	ldr	r3, [r7, #12]
 80281a0:	6a1a      	ldr	r2, [r3, #32]
 80281a2:	697b      	ldr	r3, [r7, #20]
 80281a4:	43db      	mvns	r3, r3
 80281a6:	401a      	ands	r2, r3
 80281a8:	68fb      	ldr	r3, [r7, #12]
 80281aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80281ac:	68fb      	ldr	r3, [r7, #12]
 80281ae:	6a1a      	ldr	r2, [r3, #32]
 80281b0:	68bb      	ldr	r3, [r7, #8]
 80281b2:	f003 031f 	and.w	r3, r3, #31
 80281b6:	6879      	ldr	r1, [r7, #4]
 80281b8:	fa01 f303 	lsl.w	r3, r1, r3
 80281bc:	431a      	orrs	r2, r3
 80281be:	68fb      	ldr	r3, [r7, #12]
 80281c0:	621a      	str	r2, [r3, #32]
}
 80281c2:	bf00      	nop
 80281c4:	371c      	adds	r7, #28
 80281c6:	46bd      	mov	sp, r7
 80281c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281cc:	4770      	bx	lr
	...

080281d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80281d0:	b480      	push	{r7}
 80281d2:	b085      	sub	sp, #20
 80281d4:	af00      	add	r7, sp, #0
 80281d6:	6078      	str	r0, [r7, #4]
 80281d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80281da:	687b      	ldr	r3, [r7, #4]
 80281dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80281e0:	2b01      	cmp	r3, #1
 80281e2:	d101      	bne.n	80281e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80281e4:	2302      	movs	r3, #2
 80281e6:	e05a      	b.n	802829e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80281e8:	687b      	ldr	r3, [r7, #4]
 80281ea:	2201      	movs	r2, #1
 80281ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80281f0:	687b      	ldr	r3, [r7, #4]
 80281f2:	2202      	movs	r2, #2
 80281f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80281f8:	687b      	ldr	r3, [r7, #4]
 80281fa:	681b      	ldr	r3, [r3, #0]
 80281fc:	685b      	ldr	r3, [r3, #4]
 80281fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8028200:	687b      	ldr	r3, [r7, #4]
 8028202:	681b      	ldr	r3, [r3, #0]
 8028204:	689b      	ldr	r3, [r3, #8]
 8028206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8028208:	68fb      	ldr	r3, [r7, #12]
 802820a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802820e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8028210:	683b      	ldr	r3, [r7, #0]
 8028212:	681b      	ldr	r3, [r3, #0]
 8028214:	68fa      	ldr	r2, [r7, #12]
 8028216:	4313      	orrs	r3, r2
 8028218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802821a:	687b      	ldr	r3, [r7, #4]
 802821c:	681b      	ldr	r3, [r3, #0]
 802821e:	68fa      	ldr	r2, [r7, #12]
 8028220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028222:	687b      	ldr	r3, [r7, #4]
 8028224:	681b      	ldr	r3, [r3, #0]
 8028226:	4a21      	ldr	r2, [pc, #132]	; (80282ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8028228:	4293      	cmp	r3, r2
 802822a:	d022      	beq.n	8028272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802822c:	687b      	ldr	r3, [r7, #4]
 802822e:	681b      	ldr	r3, [r3, #0]
 8028230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028234:	d01d      	beq.n	8028272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028236:	687b      	ldr	r3, [r7, #4]
 8028238:	681b      	ldr	r3, [r3, #0]
 802823a:	4a1d      	ldr	r2, [pc, #116]	; (80282b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802823c:	4293      	cmp	r3, r2
 802823e:	d018      	beq.n	8028272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028240:	687b      	ldr	r3, [r7, #4]
 8028242:	681b      	ldr	r3, [r3, #0]
 8028244:	4a1b      	ldr	r2, [pc, #108]	; (80282b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8028246:	4293      	cmp	r3, r2
 8028248:	d013      	beq.n	8028272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802824a:	687b      	ldr	r3, [r7, #4]
 802824c:	681b      	ldr	r3, [r3, #0]
 802824e:	4a1a      	ldr	r2, [pc, #104]	; (80282b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8028250:	4293      	cmp	r3, r2
 8028252:	d00e      	beq.n	8028272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028254:	687b      	ldr	r3, [r7, #4]
 8028256:	681b      	ldr	r3, [r3, #0]
 8028258:	4a18      	ldr	r2, [pc, #96]	; (80282bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802825a:	4293      	cmp	r3, r2
 802825c:	d009      	beq.n	8028272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802825e:	687b      	ldr	r3, [r7, #4]
 8028260:	681b      	ldr	r3, [r3, #0]
 8028262:	4a17      	ldr	r2, [pc, #92]	; (80282c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8028264:	4293      	cmp	r3, r2
 8028266:	d004      	beq.n	8028272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028268:	687b      	ldr	r3, [r7, #4]
 802826a:	681b      	ldr	r3, [r3, #0]
 802826c:	4a15      	ldr	r2, [pc, #84]	; (80282c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802826e:	4293      	cmp	r3, r2
 8028270:	d10c      	bne.n	802828c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8028272:	68bb      	ldr	r3, [r7, #8]
 8028274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8028278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802827a:	683b      	ldr	r3, [r7, #0]
 802827c:	685b      	ldr	r3, [r3, #4]
 802827e:	68ba      	ldr	r2, [r7, #8]
 8028280:	4313      	orrs	r3, r2
 8028282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8028284:	687b      	ldr	r3, [r7, #4]
 8028286:	681b      	ldr	r3, [r3, #0]
 8028288:	68ba      	ldr	r2, [r7, #8]
 802828a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802828c:	687b      	ldr	r3, [r7, #4]
 802828e:	2201      	movs	r2, #1
 8028290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8028294:	687b      	ldr	r3, [r7, #4]
 8028296:	2200      	movs	r2, #0
 8028298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802829c:	2300      	movs	r3, #0
}
 802829e:	4618      	mov	r0, r3
 80282a0:	3714      	adds	r7, #20
 80282a2:	46bd      	mov	sp, r7
 80282a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282a8:	4770      	bx	lr
 80282aa:	bf00      	nop
 80282ac:	40010000 	.word	0x40010000
 80282b0:	40000400 	.word	0x40000400
 80282b4:	40000800 	.word	0x40000800
 80282b8:	40000c00 	.word	0x40000c00
 80282bc:	40010400 	.word	0x40010400
 80282c0:	40014000 	.word	0x40014000
 80282c4:	40001800 	.word	0x40001800

080282c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80282c8:	b480      	push	{r7}
 80282ca:	b085      	sub	sp, #20
 80282cc:	af00      	add	r7, sp, #0
 80282ce:	6078      	str	r0, [r7, #4]
 80282d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80282d2:	2300      	movs	r3, #0
 80282d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80282d6:	687b      	ldr	r3, [r7, #4]
 80282d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80282dc:	2b01      	cmp	r3, #1
 80282de:	d101      	bne.n	80282e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80282e0:	2302      	movs	r3, #2
 80282e2:	e03d      	b.n	8028360 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80282e4:	687b      	ldr	r3, [r7, #4]
 80282e6:	2201      	movs	r2, #1
 80282e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80282ec:	68fb      	ldr	r3, [r7, #12]
 80282ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80282f2:	683b      	ldr	r3, [r7, #0]
 80282f4:	68db      	ldr	r3, [r3, #12]
 80282f6:	4313      	orrs	r3, r2
 80282f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80282fa:	68fb      	ldr	r3, [r7, #12]
 80282fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8028300:	683b      	ldr	r3, [r7, #0]
 8028302:	689b      	ldr	r3, [r3, #8]
 8028304:	4313      	orrs	r3, r2
 8028306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8028308:	68fb      	ldr	r3, [r7, #12]
 802830a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 802830e:	683b      	ldr	r3, [r7, #0]
 8028310:	685b      	ldr	r3, [r3, #4]
 8028312:	4313      	orrs	r3, r2
 8028314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8028316:	68fb      	ldr	r3, [r7, #12]
 8028318:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 802831c:	683b      	ldr	r3, [r7, #0]
 802831e:	681b      	ldr	r3, [r3, #0]
 8028320:	4313      	orrs	r3, r2
 8028322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8028324:	68fb      	ldr	r3, [r7, #12]
 8028326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802832a:	683b      	ldr	r3, [r7, #0]
 802832c:	691b      	ldr	r3, [r3, #16]
 802832e:	4313      	orrs	r3, r2
 8028330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8028332:	68fb      	ldr	r3, [r7, #12]
 8028334:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8028338:	683b      	ldr	r3, [r7, #0]
 802833a:	695b      	ldr	r3, [r3, #20]
 802833c:	4313      	orrs	r3, r2
 802833e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8028340:	68fb      	ldr	r3, [r7, #12]
 8028342:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8028346:	683b      	ldr	r3, [r7, #0]
 8028348:	69db      	ldr	r3, [r3, #28]
 802834a:	4313      	orrs	r3, r2
 802834c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 802834e:	687b      	ldr	r3, [r7, #4]
 8028350:	681b      	ldr	r3, [r3, #0]
 8028352:	68fa      	ldr	r2, [r7, #12]
 8028354:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8028356:	687b      	ldr	r3, [r7, #4]
 8028358:	2200      	movs	r2, #0
 802835a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802835e:	2300      	movs	r3, #0
}
 8028360:	4618      	mov	r0, r3
 8028362:	3714      	adds	r7, #20
 8028364:	46bd      	mov	sp, r7
 8028366:	f85d 7b04 	ldr.w	r7, [sp], #4
 802836a:	4770      	bx	lr

0802836c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802836c:	b480      	push	{r7}
 802836e:	b083      	sub	sp, #12
 8028370:	af00      	add	r7, sp, #0
 8028372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8028374:	bf00      	nop
 8028376:	370c      	adds	r7, #12
 8028378:	46bd      	mov	sp, r7
 802837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802837e:	4770      	bx	lr

08028380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8028380:	b480      	push	{r7}
 8028382:	b083      	sub	sp, #12
 8028384:	af00      	add	r7, sp, #0
 8028386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8028388:	bf00      	nop
 802838a:	370c      	adds	r7, #12
 802838c:	46bd      	mov	sp, r7
 802838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028392:	4770      	bx	lr

08028394 <__NVIC_SetPriority>:
{
 8028394:	b480      	push	{r7}
 8028396:	b083      	sub	sp, #12
 8028398:	af00      	add	r7, sp, #0
 802839a:	4603      	mov	r3, r0
 802839c:	6039      	str	r1, [r7, #0]
 802839e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80283a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80283a4:	2b00      	cmp	r3, #0
 80283a6:	db0a      	blt.n	80283be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80283a8:	683b      	ldr	r3, [r7, #0]
 80283aa:	b2da      	uxtb	r2, r3
 80283ac:	490c      	ldr	r1, [pc, #48]	; (80283e0 <__NVIC_SetPriority+0x4c>)
 80283ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80283b2:	0112      	lsls	r2, r2, #4
 80283b4:	b2d2      	uxtb	r2, r2
 80283b6:	440b      	add	r3, r1
 80283b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80283bc:	e00a      	b.n	80283d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80283be:	683b      	ldr	r3, [r7, #0]
 80283c0:	b2da      	uxtb	r2, r3
 80283c2:	4908      	ldr	r1, [pc, #32]	; (80283e4 <__NVIC_SetPriority+0x50>)
 80283c4:	79fb      	ldrb	r3, [r7, #7]
 80283c6:	f003 030f 	and.w	r3, r3, #15
 80283ca:	3b04      	subs	r3, #4
 80283cc:	0112      	lsls	r2, r2, #4
 80283ce:	b2d2      	uxtb	r2, r2
 80283d0:	440b      	add	r3, r1
 80283d2:	761a      	strb	r2, [r3, #24]
}
 80283d4:	bf00      	nop
 80283d6:	370c      	adds	r7, #12
 80283d8:	46bd      	mov	sp, r7
 80283da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283de:	4770      	bx	lr
 80283e0:	e000e100 	.word	0xe000e100
 80283e4:	e000ed00 	.word	0xe000ed00

080283e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80283e8:	b580      	push	{r7, lr}
 80283ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80283ec:	4b05      	ldr	r3, [pc, #20]	; (8028404 <SysTick_Handler+0x1c>)
 80283ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80283f0:	f002 f832 	bl	802a458 <xTaskGetSchedulerState>
 80283f4:	4603      	mov	r3, r0
 80283f6:	2b01      	cmp	r3, #1
 80283f8:	d001      	beq.n	80283fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80283fa:	f002 fe25 	bl	802b048 <xPortSysTickHandler>
  }
}
 80283fe:	bf00      	nop
 8028400:	bd80      	pop	{r7, pc}
 8028402:	bf00      	nop
 8028404:	e000e010 	.word	0xe000e010

08028408 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8028408:	b580      	push	{r7, lr}
 802840a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 802840c:	2100      	movs	r1, #0
 802840e:	f06f 0004 	mvn.w	r0, #4
 8028412:	f7ff ffbf 	bl	8028394 <__NVIC_SetPriority>
#endif
}
 8028416:	bf00      	nop
 8028418:	bd80      	pop	{r7, pc}
	...

0802841c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 802841c:	b480      	push	{r7}
 802841e:	b083      	sub	sp, #12
 8028420:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8028422:	f3ef 8305 	mrs	r3, IPSR
 8028426:	603b      	str	r3, [r7, #0]
  return(result);
 8028428:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 802842a:	2b00      	cmp	r3, #0
 802842c:	d003      	beq.n	8028436 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 802842e:	f06f 0305 	mvn.w	r3, #5
 8028432:	607b      	str	r3, [r7, #4]
 8028434:	e00c      	b.n	8028450 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8028436:	4b0a      	ldr	r3, [pc, #40]	; (8028460 <osKernelInitialize+0x44>)
 8028438:	681b      	ldr	r3, [r3, #0]
 802843a:	2b00      	cmp	r3, #0
 802843c:	d105      	bne.n	802844a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 802843e:	4b08      	ldr	r3, [pc, #32]	; (8028460 <osKernelInitialize+0x44>)
 8028440:	2201      	movs	r2, #1
 8028442:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8028444:	2300      	movs	r3, #0
 8028446:	607b      	str	r3, [r7, #4]
 8028448:	e002      	b.n	8028450 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 802844a:	f04f 33ff 	mov.w	r3, #4294967295
 802844e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8028450:	687b      	ldr	r3, [r7, #4]
}
 8028452:	4618      	mov	r0, r3
 8028454:	370c      	adds	r7, #12
 8028456:	46bd      	mov	sp, r7
 8028458:	f85d 7b04 	ldr.w	r7, [sp], #4
 802845c:	4770      	bx	lr
 802845e:	bf00      	nop
 8028460:	20000aa0 	.word	0x20000aa0

08028464 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8028464:	b580      	push	{r7, lr}
 8028466:	b082      	sub	sp, #8
 8028468:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802846a:	f3ef 8305 	mrs	r3, IPSR
 802846e:	603b      	str	r3, [r7, #0]
  return(result);
 8028470:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8028472:	2b00      	cmp	r3, #0
 8028474:	d003      	beq.n	802847e <osKernelStart+0x1a>
    stat = osErrorISR;
 8028476:	f06f 0305 	mvn.w	r3, #5
 802847a:	607b      	str	r3, [r7, #4]
 802847c:	e010      	b.n	80284a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 802847e:	4b0b      	ldr	r3, [pc, #44]	; (80284ac <osKernelStart+0x48>)
 8028480:	681b      	ldr	r3, [r3, #0]
 8028482:	2b01      	cmp	r3, #1
 8028484:	d109      	bne.n	802849a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8028486:	f7ff ffbf 	bl	8028408 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 802848a:	4b08      	ldr	r3, [pc, #32]	; (80284ac <osKernelStart+0x48>)
 802848c:	2202      	movs	r2, #2
 802848e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8028490:	f001 fb08 	bl	8029aa4 <vTaskStartScheduler>
      stat = osOK;
 8028494:	2300      	movs	r3, #0
 8028496:	607b      	str	r3, [r7, #4]
 8028498:	e002      	b.n	80284a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 802849a:	f04f 33ff 	mov.w	r3, #4294967295
 802849e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80284a0:	687b      	ldr	r3, [r7, #4]
}
 80284a2:	4618      	mov	r0, r3
 80284a4:	3708      	adds	r7, #8
 80284a6:	46bd      	mov	sp, r7
 80284a8:	bd80      	pop	{r7, pc}
 80284aa:	bf00      	nop
 80284ac:	20000aa0 	.word	0x20000aa0

080284b0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80284b0:	b580      	push	{r7, lr}
 80284b2:	b082      	sub	sp, #8
 80284b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80284b6:	f3ef 8305 	mrs	r3, IPSR
 80284ba:	603b      	str	r3, [r7, #0]
  return(result);
 80284bc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80284be:	2b00      	cmp	r3, #0
 80284c0:	d003      	beq.n	80284ca <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80284c2:	f001 fc31 	bl	8029d28 <xTaskGetTickCountFromISR>
 80284c6:	6078      	str	r0, [r7, #4]
 80284c8:	e002      	b.n	80284d0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80284ca:	f001 fc1d 	bl	8029d08 <xTaskGetTickCount>
 80284ce:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80284d0:	687b      	ldr	r3, [r7, #4]
}
 80284d2:	4618      	mov	r0, r3
 80284d4:	3708      	adds	r7, #8
 80284d6:	46bd      	mov	sp, r7
 80284d8:	bd80      	pop	{r7, pc}

080284da <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80284da:	b580      	push	{r7, lr}
 80284dc:	b08e      	sub	sp, #56	; 0x38
 80284de:	af04      	add	r7, sp, #16
 80284e0:	60f8      	str	r0, [r7, #12]
 80284e2:	60b9      	str	r1, [r7, #8]
 80284e4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80284e6:	2300      	movs	r3, #0
 80284e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80284ea:	f3ef 8305 	mrs	r3, IPSR
 80284ee:	617b      	str	r3, [r7, #20]
  return(result);
 80284f0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80284f2:	2b00      	cmp	r3, #0
 80284f4:	d17e      	bne.n	80285f4 <osThreadNew+0x11a>
 80284f6:	68fb      	ldr	r3, [r7, #12]
 80284f8:	2b00      	cmp	r3, #0
 80284fa:	d07b      	beq.n	80285f4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80284fc:	2380      	movs	r3, #128	; 0x80
 80284fe:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8028500:	2318      	movs	r3, #24
 8028502:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8028504:	2300      	movs	r3, #0
 8028506:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8028508:	f04f 33ff 	mov.w	r3, #4294967295
 802850c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 802850e:	687b      	ldr	r3, [r7, #4]
 8028510:	2b00      	cmp	r3, #0
 8028512:	d045      	beq.n	80285a0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8028514:	687b      	ldr	r3, [r7, #4]
 8028516:	681b      	ldr	r3, [r3, #0]
 8028518:	2b00      	cmp	r3, #0
 802851a:	d002      	beq.n	8028522 <osThreadNew+0x48>
        name = attr->name;
 802851c:	687b      	ldr	r3, [r7, #4]
 802851e:	681b      	ldr	r3, [r3, #0]
 8028520:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8028522:	687b      	ldr	r3, [r7, #4]
 8028524:	699b      	ldr	r3, [r3, #24]
 8028526:	2b00      	cmp	r3, #0
 8028528:	d002      	beq.n	8028530 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 802852a:	687b      	ldr	r3, [r7, #4]
 802852c:	699b      	ldr	r3, [r3, #24]
 802852e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8028530:	69fb      	ldr	r3, [r7, #28]
 8028532:	2b00      	cmp	r3, #0
 8028534:	d008      	beq.n	8028548 <osThreadNew+0x6e>
 8028536:	69fb      	ldr	r3, [r7, #28]
 8028538:	2b38      	cmp	r3, #56	; 0x38
 802853a:	d805      	bhi.n	8028548 <osThreadNew+0x6e>
 802853c:	687b      	ldr	r3, [r7, #4]
 802853e:	685b      	ldr	r3, [r3, #4]
 8028540:	f003 0301 	and.w	r3, r3, #1
 8028544:	2b00      	cmp	r3, #0
 8028546:	d001      	beq.n	802854c <osThreadNew+0x72>
        return (NULL);
 8028548:	2300      	movs	r3, #0
 802854a:	e054      	b.n	80285f6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 802854c:	687b      	ldr	r3, [r7, #4]
 802854e:	695b      	ldr	r3, [r3, #20]
 8028550:	2b00      	cmp	r3, #0
 8028552:	d003      	beq.n	802855c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8028554:	687b      	ldr	r3, [r7, #4]
 8028556:	695b      	ldr	r3, [r3, #20]
 8028558:	089b      	lsrs	r3, r3, #2
 802855a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 802855c:	687b      	ldr	r3, [r7, #4]
 802855e:	689b      	ldr	r3, [r3, #8]
 8028560:	2b00      	cmp	r3, #0
 8028562:	d00e      	beq.n	8028582 <osThreadNew+0xa8>
 8028564:	687b      	ldr	r3, [r7, #4]
 8028566:	68db      	ldr	r3, [r3, #12]
 8028568:	2bcb      	cmp	r3, #203	; 0xcb
 802856a:	d90a      	bls.n	8028582 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 802856c:	687b      	ldr	r3, [r7, #4]
 802856e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8028570:	2b00      	cmp	r3, #0
 8028572:	d006      	beq.n	8028582 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8028574:	687b      	ldr	r3, [r7, #4]
 8028576:	695b      	ldr	r3, [r3, #20]
 8028578:	2b00      	cmp	r3, #0
 802857a:	d002      	beq.n	8028582 <osThreadNew+0xa8>
        mem = 1;
 802857c:	2301      	movs	r3, #1
 802857e:	61bb      	str	r3, [r7, #24]
 8028580:	e010      	b.n	80285a4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8028582:	687b      	ldr	r3, [r7, #4]
 8028584:	689b      	ldr	r3, [r3, #8]
 8028586:	2b00      	cmp	r3, #0
 8028588:	d10c      	bne.n	80285a4 <osThreadNew+0xca>
 802858a:	687b      	ldr	r3, [r7, #4]
 802858c:	68db      	ldr	r3, [r3, #12]
 802858e:	2b00      	cmp	r3, #0
 8028590:	d108      	bne.n	80285a4 <osThreadNew+0xca>
 8028592:	687b      	ldr	r3, [r7, #4]
 8028594:	691b      	ldr	r3, [r3, #16]
 8028596:	2b00      	cmp	r3, #0
 8028598:	d104      	bne.n	80285a4 <osThreadNew+0xca>
          mem = 0;
 802859a:	2300      	movs	r3, #0
 802859c:	61bb      	str	r3, [r7, #24]
 802859e:	e001      	b.n	80285a4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80285a0:	2300      	movs	r3, #0
 80285a2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80285a4:	69bb      	ldr	r3, [r7, #24]
 80285a6:	2b01      	cmp	r3, #1
 80285a8:	d110      	bne.n	80285cc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80285aa:	687b      	ldr	r3, [r7, #4]
 80285ac:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80285ae:	687a      	ldr	r2, [r7, #4]
 80285b0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80285b2:	9202      	str	r2, [sp, #8]
 80285b4:	9301      	str	r3, [sp, #4]
 80285b6:	69fb      	ldr	r3, [r7, #28]
 80285b8:	9300      	str	r3, [sp, #0]
 80285ba:	68bb      	ldr	r3, [r7, #8]
 80285bc:	6a3a      	ldr	r2, [r7, #32]
 80285be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80285c0:	68f8      	ldr	r0, [r7, #12]
 80285c2:	f000 ffe1 	bl	8029588 <xTaskCreateStatic>
 80285c6:	4603      	mov	r3, r0
 80285c8:	613b      	str	r3, [r7, #16]
 80285ca:	e013      	b.n	80285f4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80285cc:	69bb      	ldr	r3, [r7, #24]
 80285ce:	2b00      	cmp	r3, #0
 80285d0:	d110      	bne.n	80285f4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80285d2:	6a3b      	ldr	r3, [r7, #32]
 80285d4:	b29a      	uxth	r2, r3
 80285d6:	f107 0310 	add.w	r3, r7, #16
 80285da:	9301      	str	r3, [sp, #4]
 80285dc:	69fb      	ldr	r3, [r7, #28]
 80285de:	9300      	str	r3, [sp, #0]
 80285e0:	68bb      	ldr	r3, [r7, #8]
 80285e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80285e4:	68f8      	ldr	r0, [r7, #12]
 80285e6:	f001 f82c 	bl	8029642 <xTaskCreate>
 80285ea:	4603      	mov	r3, r0
 80285ec:	2b01      	cmp	r3, #1
 80285ee:	d001      	beq.n	80285f4 <osThreadNew+0x11a>
            hTask = NULL;
 80285f0:	2300      	movs	r3, #0
 80285f2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80285f4:	693b      	ldr	r3, [r7, #16]
}
 80285f6:	4618      	mov	r0, r3
 80285f8:	3728      	adds	r7, #40	; 0x28
 80285fa:	46bd      	mov	sp, r7
 80285fc:	bd80      	pop	{r7, pc}

080285fe <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80285fe:	b580      	push	{r7, lr}
 8028600:	b084      	sub	sp, #16
 8028602:	af00      	add	r7, sp, #0
 8028604:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8028606:	f3ef 8305 	mrs	r3, IPSR
 802860a:	60bb      	str	r3, [r7, #8]
  return(result);
 802860c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 802860e:	2b00      	cmp	r3, #0
 8028610:	d003      	beq.n	802861a <osDelay+0x1c>
    stat = osErrorISR;
 8028612:	f06f 0305 	mvn.w	r3, #5
 8028616:	60fb      	str	r3, [r7, #12]
 8028618:	e007      	b.n	802862a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 802861a:	2300      	movs	r3, #0
 802861c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 802861e:	687b      	ldr	r3, [r7, #4]
 8028620:	2b00      	cmp	r3, #0
 8028622:	d002      	beq.n	802862a <osDelay+0x2c>
      vTaskDelay(ticks);
 8028624:	6878      	ldr	r0, [r7, #4]
 8028626:	f001 fa05 	bl	8029a34 <vTaskDelay>
    }
  }

  return (stat);
 802862a:	68fb      	ldr	r3, [r7, #12]
}
 802862c:	4618      	mov	r0, r3
 802862e:	3710      	adds	r7, #16
 8028630:	46bd      	mov	sp, r7
 8028632:	bd80      	pop	{r7, pc}

08028634 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8028634:	b580      	push	{r7, lr}
 8028636:	b086      	sub	sp, #24
 8028638:	af00      	add	r7, sp, #0
 802863a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802863c:	f3ef 8305 	mrs	r3, IPSR
 8028640:	60fb      	str	r3, [r7, #12]
  return(result);
 8028642:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8028644:	2b00      	cmp	r3, #0
 8028646:	d003      	beq.n	8028650 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8028648:	f06f 0305 	mvn.w	r3, #5
 802864c:	617b      	str	r3, [r7, #20]
 802864e:	e019      	b.n	8028684 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8028650:	2300      	movs	r3, #0
 8028652:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8028654:	f001 fb58 	bl	8029d08 <xTaskGetTickCount>
 8028658:	4603      	mov	r3, r0
 802865a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 802865c:	68bb      	ldr	r3, [r7, #8]
 802865e:	687a      	ldr	r2, [r7, #4]
 8028660:	1ad3      	subs	r3, r2, r3
 8028662:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8028664:	693b      	ldr	r3, [r7, #16]
 8028666:	2b00      	cmp	r3, #0
 8028668:	d009      	beq.n	802867e <osDelayUntil+0x4a>
 802866a:	693b      	ldr	r3, [r7, #16]
 802866c:	2b00      	cmp	r3, #0
 802866e:	db06      	blt.n	802867e <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8028670:	f107 0308 	add.w	r3, r7, #8
 8028674:	6939      	ldr	r1, [r7, #16]
 8028676:	4618      	mov	r0, r3
 8028678:	f001 f95c 	bl	8029934 <vTaskDelayUntil>
 802867c:	e002      	b.n	8028684 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 802867e:	f06f 0303 	mvn.w	r3, #3
 8028682:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8028684:	697b      	ldr	r3, [r7, #20]
}
 8028686:	4618      	mov	r0, r3
 8028688:	3718      	adds	r7, #24
 802868a:	46bd      	mov	sp, r7
 802868c:	bd80      	pop	{r7, pc}
	...

08028690 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8028690:	b480      	push	{r7}
 8028692:	b085      	sub	sp, #20
 8028694:	af00      	add	r7, sp, #0
 8028696:	60f8      	str	r0, [r7, #12]
 8028698:	60b9      	str	r1, [r7, #8]
 802869a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 802869c:	68fb      	ldr	r3, [r7, #12]
 802869e:	4a07      	ldr	r2, [pc, #28]	; (80286bc <vApplicationGetIdleTaskMemory+0x2c>)
 80286a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80286a2:	68bb      	ldr	r3, [r7, #8]
 80286a4:	4a06      	ldr	r2, [pc, #24]	; (80286c0 <vApplicationGetIdleTaskMemory+0x30>)
 80286a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80286a8:	687b      	ldr	r3, [r7, #4]
 80286aa:	2280      	movs	r2, #128	; 0x80
 80286ac:	601a      	str	r2, [r3, #0]
}
 80286ae:	bf00      	nop
 80286b0:	3714      	adds	r7, #20
 80286b2:	46bd      	mov	sp, r7
 80286b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80286b8:	4770      	bx	lr
 80286ba:	bf00      	nop
 80286bc:	20000aa4 	.word	0x20000aa4
 80286c0:	20000b70 	.word	0x20000b70

080286c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80286c4:	b480      	push	{r7}
 80286c6:	b085      	sub	sp, #20
 80286c8:	af00      	add	r7, sp, #0
 80286ca:	60f8      	str	r0, [r7, #12]
 80286cc:	60b9      	str	r1, [r7, #8]
 80286ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80286d0:	68fb      	ldr	r3, [r7, #12]
 80286d2:	4a07      	ldr	r2, [pc, #28]	; (80286f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80286d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80286d6:	68bb      	ldr	r3, [r7, #8]
 80286d8:	4a06      	ldr	r2, [pc, #24]	; (80286f4 <vApplicationGetTimerTaskMemory+0x30>)
 80286da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80286dc:	687b      	ldr	r3, [r7, #4]
 80286de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80286e2:	601a      	str	r2, [r3, #0]
}
 80286e4:	bf00      	nop
 80286e6:	3714      	adds	r7, #20
 80286e8:	46bd      	mov	sp, r7
 80286ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80286ee:	4770      	bx	lr
 80286f0:	20000d70 	.word	0x20000d70
 80286f4:	20000e3c 	.word	0x20000e3c

080286f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80286f8:	b480      	push	{r7}
 80286fa:	b083      	sub	sp, #12
 80286fc:	af00      	add	r7, sp, #0
 80286fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8028700:	687b      	ldr	r3, [r7, #4]
 8028702:	f103 0208 	add.w	r2, r3, #8
 8028706:	687b      	ldr	r3, [r7, #4]
 8028708:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 802870a:	687b      	ldr	r3, [r7, #4]
 802870c:	f04f 32ff 	mov.w	r2, #4294967295
 8028710:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8028712:	687b      	ldr	r3, [r7, #4]
 8028714:	f103 0208 	add.w	r2, r3, #8
 8028718:	687b      	ldr	r3, [r7, #4]
 802871a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802871c:	687b      	ldr	r3, [r7, #4]
 802871e:	f103 0208 	add.w	r2, r3, #8
 8028722:	687b      	ldr	r3, [r7, #4]
 8028724:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8028726:	687b      	ldr	r3, [r7, #4]
 8028728:	2200      	movs	r2, #0
 802872a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 802872c:	bf00      	nop
 802872e:	370c      	adds	r7, #12
 8028730:	46bd      	mov	sp, r7
 8028732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028736:	4770      	bx	lr

08028738 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8028738:	b480      	push	{r7}
 802873a:	b083      	sub	sp, #12
 802873c:	af00      	add	r7, sp, #0
 802873e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8028740:	687b      	ldr	r3, [r7, #4]
 8028742:	2200      	movs	r2, #0
 8028744:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8028746:	bf00      	nop
 8028748:	370c      	adds	r7, #12
 802874a:	46bd      	mov	sp, r7
 802874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028750:	4770      	bx	lr

08028752 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8028752:	b480      	push	{r7}
 8028754:	b085      	sub	sp, #20
 8028756:	af00      	add	r7, sp, #0
 8028758:	6078      	str	r0, [r7, #4]
 802875a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 802875c:	687b      	ldr	r3, [r7, #4]
 802875e:	685b      	ldr	r3, [r3, #4]
 8028760:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8028762:	683b      	ldr	r3, [r7, #0]
 8028764:	68fa      	ldr	r2, [r7, #12]
 8028766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8028768:	68fb      	ldr	r3, [r7, #12]
 802876a:	689a      	ldr	r2, [r3, #8]
 802876c:	683b      	ldr	r3, [r7, #0]
 802876e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8028770:	68fb      	ldr	r3, [r7, #12]
 8028772:	689b      	ldr	r3, [r3, #8]
 8028774:	683a      	ldr	r2, [r7, #0]
 8028776:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8028778:	68fb      	ldr	r3, [r7, #12]
 802877a:	683a      	ldr	r2, [r7, #0]
 802877c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 802877e:	683b      	ldr	r3, [r7, #0]
 8028780:	687a      	ldr	r2, [r7, #4]
 8028782:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8028784:	687b      	ldr	r3, [r7, #4]
 8028786:	681b      	ldr	r3, [r3, #0]
 8028788:	1c5a      	adds	r2, r3, #1
 802878a:	687b      	ldr	r3, [r7, #4]
 802878c:	601a      	str	r2, [r3, #0]
}
 802878e:	bf00      	nop
 8028790:	3714      	adds	r7, #20
 8028792:	46bd      	mov	sp, r7
 8028794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028798:	4770      	bx	lr

0802879a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802879a:	b480      	push	{r7}
 802879c:	b085      	sub	sp, #20
 802879e:	af00      	add	r7, sp, #0
 80287a0:	6078      	str	r0, [r7, #4]
 80287a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80287a4:	683b      	ldr	r3, [r7, #0]
 80287a6:	681b      	ldr	r3, [r3, #0]
 80287a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80287aa:	68bb      	ldr	r3, [r7, #8]
 80287ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80287b0:	d103      	bne.n	80287ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80287b2:	687b      	ldr	r3, [r7, #4]
 80287b4:	691b      	ldr	r3, [r3, #16]
 80287b6:	60fb      	str	r3, [r7, #12]
 80287b8:	e00c      	b.n	80287d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80287ba:	687b      	ldr	r3, [r7, #4]
 80287bc:	3308      	adds	r3, #8
 80287be:	60fb      	str	r3, [r7, #12]
 80287c0:	e002      	b.n	80287c8 <vListInsert+0x2e>
 80287c2:	68fb      	ldr	r3, [r7, #12]
 80287c4:	685b      	ldr	r3, [r3, #4]
 80287c6:	60fb      	str	r3, [r7, #12]
 80287c8:	68fb      	ldr	r3, [r7, #12]
 80287ca:	685b      	ldr	r3, [r3, #4]
 80287cc:	681b      	ldr	r3, [r3, #0]
 80287ce:	68ba      	ldr	r2, [r7, #8]
 80287d0:	429a      	cmp	r2, r3
 80287d2:	d2f6      	bcs.n	80287c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80287d4:	68fb      	ldr	r3, [r7, #12]
 80287d6:	685a      	ldr	r2, [r3, #4]
 80287d8:	683b      	ldr	r3, [r7, #0]
 80287da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80287dc:	683b      	ldr	r3, [r7, #0]
 80287de:	685b      	ldr	r3, [r3, #4]
 80287e0:	683a      	ldr	r2, [r7, #0]
 80287e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80287e4:	683b      	ldr	r3, [r7, #0]
 80287e6:	68fa      	ldr	r2, [r7, #12]
 80287e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80287ea:	68fb      	ldr	r3, [r7, #12]
 80287ec:	683a      	ldr	r2, [r7, #0]
 80287ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80287f0:	683b      	ldr	r3, [r7, #0]
 80287f2:	687a      	ldr	r2, [r7, #4]
 80287f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80287f6:	687b      	ldr	r3, [r7, #4]
 80287f8:	681b      	ldr	r3, [r3, #0]
 80287fa:	1c5a      	adds	r2, r3, #1
 80287fc:	687b      	ldr	r3, [r7, #4]
 80287fe:	601a      	str	r2, [r3, #0]
}
 8028800:	bf00      	nop
 8028802:	3714      	adds	r7, #20
 8028804:	46bd      	mov	sp, r7
 8028806:	f85d 7b04 	ldr.w	r7, [sp], #4
 802880a:	4770      	bx	lr

0802880c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 802880c:	b480      	push	{r7}
 802880e:	b085      	sub	sp, #20
 8028810:	af00      	add	r7, sp, #0
 8028812:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8028814:	687b      	ldr	r3, [r7, #4]
 8028816:	691b      	ldr	r3, [r3, #16]
 8028818:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 802881a:	687b      	ldr	r3, [r7, #4]
 802881c:	685b      	ldr	r3, [r3, #4]
 802881e:	687a      	ldr	r2, [r7, #4]
 8028820:	6892      	ldr	r2, [r2, #8]
 8028822:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8028824:	687b      	ldr	r3, [r7, #4]
 8028826:	689b      	ldr	r3, [r3, #8]
 8028828:	687a      	ldr	r2, [r7, #4]
 802882a:	6852      	ldr	r2, [r2, #4]
 802882c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 802882e:	68fb      	ldr	r3, [r7, #12]
 8028830:	685b      	ldr	r3, [r3, #4]
 8028832:	687a      	ldr	r2, [r7, #4]
 8028834:	429a      	cmp	r2, r3
 8028836:	d103      	bne.n	8028840 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8028838:	687b      	ldr	r3, [r7, #4]
 802883a:	689a      	ldr	r2, [r3, #8]
 802883c:	68fb      	ldr	r3, [r7, #12]
 802883e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8028840:	687b      	ldr	r3, [r7, #4]
 8028842:	2200      	movs	r2, #0
 8028844:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8028846:	68fb      	ldr	r3, [r7, #12]
 8028848:	681b      	ldr	r3, [r3, #0]
 802884a:	1e5a      	subs	r2, r3, #1
 802884c:	68fb      	ldr	r3, [r7, #12]
 802884e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8028850:	68fb      	ldr	r3, [r7, #12]
 8028852:	681b      	ldr	r3, [r3, #0]
}
 8028854:	4618      	mov	r0, r3
 8028856:	3714      	adds	r7, #20
 8028858:	46bd      	mov	sp, r7
 802885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802885e:	4770      	bx	lr

08028860 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8028860:	b580      	push	{r7, lr}
 8028862:	b084      	sub	sp, #16
 8028864:	af00      	add	r7, sp, #0
 8028866:	6078      	str	r0, [r7, #4]
 8028868:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 802886a:	687b      	ldr	r3, [r7, #4]
 802886c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 802886e:	68fb      	ldr	r3, [r7, #12]
 8028870:	2b00      	cmp	r3, #0
 8028872:	d10a      	bne.n	802888a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8028874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028878:	f383 8811 	msr	BASEPRI, r3
 802887c:	f3bf 8f6f 	isb	sy
 8028880:	f3bf 8f4f 	dsb	sy
 8028884:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8028886:	bf00      	nop
 8028888:	e7fe      	b.n	8028888 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 802888a:	f002 fb4b 	bl	802af24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802888e:	68fb      	ldr	r3, [r7, #12]
 8028890:	681a      	ldr	r2, [r3, #0]
 8028892:	68fb      	ldr	r3, [r7, #12]
 8028894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028896:	68f9      	ldr	r1, [r7, #12]
 8028898:	6c09      	ldr	r1, [r1, #64]	; 0x40
 802889a:	fb01 f303 	mul.w	r3, r1, r3
 802889e:	441a      	add	r2, r3
 80288a0:	68fb      	ldr	r3, [r7, #12]
 80288a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80288a4:	68fb      	ldr	r3, [r7, #12]
 80288a6:	2200      	movs	r2, #0
 80288a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80288aa:	68fb      	ldr	r3, [r7, #12]
 80288ac:	681a      	ldr	r2, [r3, #0]
 80288ae:	68fb      	ldr	r3, [r7, #12]
 80288b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80288b2:	68fb      	ldr	r3, [r7, #12]
 80288b4:	681a      	ldr	r2, [r3, #0]
 80288b6:	68fb      	ldr	r3, [r7, #12]
 80288b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80288ba:	3b01      	subs	r3, #1
 80288bc:	68f9      	ldr	r1, [r7, #12]
 80288be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80288c0:	fb01 f303 	mul.w	r3, r1, r3
 80288c4:	441a      	add	r2, r3
 80288c6:	68fb      	ldr	r3, [r7, #12]
 80288c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80288ca:	68fb      	ldr	r3, [r7, #12]
 80288cc:	22ff      	movs	r2, #255	; 0xff
 80288ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80288d2:	68fb      	ldr	r3, [r7, #12]
 80288d4:	22ff      	movs	r2, #255	; 0xff
 80288d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80288da:	683b      	ldr	r3, [r7, #0]
 80288dc:	2b00      	cmp	r3, #0
 80288de:	d114      	bne.n	802890a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80288e0:	68fb      	ldr	r3, [r7, #12]
 80288e2:	691b      	ldr	r3, [r3, #16]
 80288e4:	2b00      	cmp	r3, #0
 80288e6:	d01a      	beq.n	802891e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80288e8:	68fb      	ldr	r3, [r7, #12]
 80288ea:	3310      	adds	r3, #16
 80288ec:	4618      	mov	r0, r3
 80288ee:	f001 fbb5 	bl	802a05c <xTaskRemoveFromEventList>
 80288f2:	4603      	mov	r3, r0
 80288f4:	2b00      	cmp	r3, #0
 80288f6:	d012      	beq.n	802891e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80288f8:	4b0c      	ldr	r3, [pc, #48]	; (802892c <xQueueGenericReset+0xcc>)
 80288fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80288fe:	601a      	str	r2, [r3, #0]
 8028900:	f3bf 8f4f 	dsb	sy
 8028904:	f3bf 8f6f 	isb	sy
 8028908:	e009      	b.n	802891e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 802890a:	68fb      	ldr	r3, [r7, #12]
 802890c:	3310      	adds	r3, #16
 802890e:	4618      	mov	r0, r3
 8028910:	f7ff fef2 	bl	80286f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8028914:	68fb      	ldr	r3, [r7, #12]
 8028916:	3324      	adds	r3, #36	; 0x24
 8028918:	4618      	mov	r0, r3
 802891a:	f7ff feed 	bl	80286f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 802891e:	f002 fb31 	bl	802af84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8028922:	2301      	movs	r3, #1
}
 8028924:	4618      	mov	r0, r3
 8028926:	3710      	adds	r7, #16
 8028928:	46bd      	mov	sp, r7
 802892a:	bd80      	pop	{r7, pc}
 802892c:	e000ed04 	.word	0xe000ed04

08028930 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8028930:	b580      	push	{r7, lr}
 8028932:	b08e      	sub	sp, #56	; 0x38
 8028934:	af02      	add	r7, sp, #8
 8028936:	60f8      	str	r0, [r7, #12]
 8028938:	60b9      	str	r1, [r7, #8]
 802893a:	607a      	str	r2, [r7, #4]
 802893c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802893e:	68fb      	ldr	r3, [r7, #12]
 8028940:	2b00      	cmp	r3, #0
 8028942:	d10a      	bne.n	802895a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8028944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028948:	f383 8811 	msr	BASEPRI, r3
 802894c:	f3bf 8f6f 	isb	sy
 8028950:	f3bf 8f4f 	dsb	sy
 8028954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8028956:	bf00      	nop
 8028958:	e7fe      	b.n	8028958 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 802895a:	683b      	ldr	r3, [r7, #0]
 802895c:	2b00      	cmp	r3, #0
 802895e:	d10a      	bne.n	8028976 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8028960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028964:	f383 8811 	msr	BASEPRI, r3
 8028968:	f3bf 8f6f 	isb	sy
 802896c:	f3bf 8f4f 	dsb	sy
 8028970:	627b      	str	r3, [r7, #36]	; 0x24
}
 8028972:	bf00      	nop
 8028974:	e7fe      	b.n	8028974 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8028976:	687b      	ldr	r3, [r7, #4]
 8028978:	2b00      	cmp	r3, #0
 802897a:	d002      	beq.n	8028982 <xQueueGenericCreateStatic+0x52>
 802897c:	68bb      	ldr	r3, [r7, #8]
 802897e:	2b00      	cmp	r3, #0
 8028980:	d001      	beq.n	8028986 <xQueueGenericCreateStatic+0x56>
 8028982:	2301      	movs	r3, #1
 8028984:	e000      	b.n	8028988 <xQueueGenericCreateStatic+0x58>
 8028986:	2300      	movs	r3, #0
 8028988:	2b00      	cmp	r3, #0
 802898a:	d10a      	bne.n	80289a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 802898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028990:	f383 8811 	msr	BASEPRI, r3
 8028994:	f3bf 8f6f 	isb	sy
 8028998:	f3bf 8f4f 	dsb	sy
 802899c:	623b      	str	r3, [r7, #32]
}
 802899e:	bf00      	nop
 80289a0:	e7fe      	b.n	80289a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80289a2:	687b      	ldr	r3, [r7, #4]
 80289a4:	2b00      	cmp	r3, #0
 80289a6:	d102      	bne.n	80289ae <xQueueGenericCreateStatic+0x7e>
 80289a8:	68bb      	ldr	r3, [r7, #8]
 80289aa:	2b00      	cmp	r3, #0
 80289ac:	d101      	bne.n	80289b2 <xQueueGenericCreateStatic+0x82>
 80289ae:	2301      	movs	r3, #1
 80289b0:	e000      	b.n	80289b4 <xQueueGenericCreateStatic+0x84>
 80289b2:	2300      	movs	r3, #0
 80289b4:	2b00      	cmp	r3, #0
 80289b6:	d10a      	bne.n	80289ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80289b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80289bc:	f383 8811 	msr	BASEPRI, r3
 80289c0:	f3bf 8f6f 	isb	sy
 80289c4:	f3bf 8f4f 	dsb	sy
 80289c8:	61fb      	str	r3, [r7, #28]
}
 80289ca:	bf00      	nop
 80289cc:	e7fe      	b.n	80289cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80289ce:	2350      	movs	r3, #80	; 0x50
 80289d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80289d2:	697b      	ldr	r3, [r7, #20]
 80289d4:	2b50      	cmp	r3, #80	; 0x50
 80289d6:	d00a      	beq.n	80289ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80289d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80289dc:	f383 8811 	msr	BASEPRI, r3
 80289e0:	f3bf 8f6f 	isb	sy
 80289e4:	f3bf 8f4f 	dsb	sy
 80289e8:	61bb      	str	r3, [r7, #24]
}
 80289ea:	bf00      	nop
 80289ec:	e7fe      	b.n	80289ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80289ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80289f0:	683b      	ldr	r3, [r7, #0]
 80289f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80289f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80289f6:	2b00      	cmp	r3, #0
 80289f8:	d00d      	beq.n	8028a16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80289fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80289fc:	2201      	movs	r2, #1
 80289fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8028a02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8028a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028a08:	9300      	str	r3, [sp, #0]
 8028a0a:	4613      	mov	r3, r2
 8028a0c:	687a      	ldr	r2, [r7, #4]
 8028a0e:	68b9      	ldr	r1, [r7, #8]
 8028a10:	68f8      	ldr	r0, [r7, #12]
 8028a12:	f000 f83f 	bl	8028a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8028a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8028a18:	4618      	mov	r0, r3
 8028a1a:	3730      	adds	r7, #48	; 0x30
 8028a1c:	46bd      	mov	sp, r7
 8028a1e:	bd80      	pop	{r7, pc}

08028a20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8028a20:	b580      	push	{r7, lr}
 8028a22:	b08a      	sub	sp, #40	; 0x28
 8028a24:	af02      	add	r7, sp, #8
 8028a26:	60f8      	str	r0, [r7, #12]
 8028a28:	60b9      	str	r1, [r7, #8]
 8028a2a:	4613      	mov	r3, r2
 8028a2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8028a2e:	68fb      	ldr	r3, [r7, #12]
 8028a30:	2b00      	cmp	r3, #0
 8028a32:	d10a      	bne.n	8028a4a <xQueueGenericCreate+0x2a>
	__asm volatile
 8028a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028a38:	f383 8811 	msr	BASEPRI, r3
 8028a3c:	f3bf 8f6f 	isb	sy
 8028a40:	f3bf 8f4f 	dsb	sy
 8028a44:	613b      	str	r3, [r7, #16]
}
 8028a46:	bf00      	nop
 8028a48:	e7fe      	b.n	8028a48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8028a4a:	68fb      	ldr	r3, [r7, #12]
 8028a4c:	68ba      	ldr	r2, [r7, #8]
 8028a4e:	fb02 f303 	mul.w	r3, r2, r3
 8028a52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8028a54:	69fb      	ldr	r3, [r7, #28]
 8028a56:	3350      	adds	r3, #80	; 0x50
 8028a58:	4618      	mov	r0, r3
 8028a5a:	f002 fb85 	bl	802b168 <pvPortMalloc>
 8028a5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8028a60:	69bb      	ldr	r3, [r7, #24]
 8028a62:	2b00      	cmp	r3, #0
 8028a64:	d011      	beq.n	8028a8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8028a66:	69bb      	ldr	r3, [r7, #24]
 8028a68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8028a6a:	697b      	ldr	r3, [r7, #20]
 8028a6c:	3350      	adds	r3, #80	; 0x50
 8028a6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8028a70:	69bb      	ldr	r3, [r7, #24]
 8028a72:	2200      	movs	r2, #0
 8028a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8028a78:	79fa      	ldrb	r2, [r7, #7]
 8028a7a:	69bb      	ldr	r3, [r7, #24]
 8028a7c:	9300      	str	r3, [sp, #0]
 8028a7e:	4613      	mov	r3, r2
 8028a80:	697a      	ldr	r2, [r7, #20]
 8028a82:	68b9      	ldr	r1, [r7, #8]
 8028a84:	68f8      	ldr	r0, [r7, #12]
 8028a86:	f000 f805 	bl	8028a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8028a8a:	69bb      	ldr	r3, [r7, #24]
	}
 8028a8c:	4618      	mov	r0, r3
 8028a8e:	3720      	adds	r7, #32
 8028a90:	46bd      	mov	sp, r7
 8028a92:	bd80      	pop	{r7, pc}

08028a94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8028a94:	b580      	push	{r7, lr}
 8028a96:	b084      	sub	sp, #16
 8028a98:	af00      	add	r7, sp, #0
 8028a9a:	60f8      	str	r0, [r7, #12]
 8028a9c:	60b9      	str	r1, [r7, #8]
 8028a9e:	607a      	str	r2, [r7, #4]
 8028aa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8028aa2:	68bb      	ldr	r3, [r7, #8]
 8028aa4:	2b00      	cmp	r3, #0
 8028aa6:	d103      	bne.n	8028ab0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8028aa8:	69bb      	ldr	r3, [r7, #24]
 8028aaa:	69ba      	ldr	r2, [r7, #24]
 8028aac:	601a      	str	r2, [r3, #0]
 8028aae:	e002      	b.n	8028ab6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8028ab0:	69bb      	ldr	r3, [r7, #24]
 8028ab2:	687a      	ldr	r2, [r7, #4]
 8028ab4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8028ab6:	69bb      	ldr	r3, [r7, #24]
 8028ab8:	68fa      	ldr	r2, [r7, #12]
 8028aba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8028abc:	69bb      	ldr	r3, [r7, #24]
 8028abe:	68ba      	ldr	r2, [r7, #8]
 8028ac0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8028ac2:	2101      	movs	r1, #1
 8028ac4:	69b8      	ldr	r0, [r7, #24]
 8028ac6:	f7ff fecb 	bl	8028860 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8028aca:	69bb      	ldr	r3, [r7, #24]
 8028acc:	78fa      	ldrb	r2, [r7, #3]
 8028ace:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8028ad2:	78fb      	ldrb	r3, [r7, #3]
 8028ad4:	68ba      	ldr	r2, [r7, #8]
 8028ad6:	68f9      	ldr	r1, [r7, #12]
 8028ad8:	2073      	movs	r0, #115	; 0x73
 8028ada:	f003 facd 	bl	802c078 <SEGGER_SYSVIEW_RecordU32x3>
}
 8028ade:	bf00      	nop
 8028ae0:	3710      	adds	r7, #16
 8028ae2:	46bd      	mov	sp, r7
 8028ae4:	bd80      	pop	{r7, pc}
	...

08028ae8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8028ae8:	b580      	push	{r7, lr}
 8028aea:	b090      	sub	sp, #64	; 0x40
 8028aec:	af02      	add	r7, sp, #8
 8028aee:	60f8      	str	r0, [r7, #12]
 8028af0:	60b9      	str	r1, [r7, #8]
 8028af2:	607a      	str	r2, [r7, #4]
 8028af4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8028af6:	2300      	movs	r3, #0
 8028af8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8028afa:	68fb      	ldr	r3, [r7, #12]
 8028afc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8028afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028b00:	2b00      	cmp	r3, #0
 8028b02:	d10a      	bne.n	8028b1a <xQueueGenericSend+0x32>
	__asm volatile
 8028b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028b08:	f383 8811 	msr	BASEPRI, r3
 8028b0c:	f3bf 8f6f 	isb	sy
 8028b10:	f3bf 8f4f 	dsb	sy
 8028b14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8028b16:	bf00      	nop
 8028b18:	e7fe      	b.n	8028b18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8028b1a:	68bb      	ldr	r3, [r7, #8]
 8028b1c:	2b00      	cmp	r3, #0
 8028b1e:	d103      	bne.n	8028b28 <xQueueGenericSend+0x40>
 8028b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028b24:	2b00      	cmp	r3, #0
 8028b26:	d101      	bne.n	8028b2c <xQueueGenericSend+0x44>
 8028b28:	2301      	movs	r3, #1
 8028b2a:	e000      	b.n	8028b2e <xQueueGenericSend+0x46>
 8028b2c:	2300      	movs	r3, #0
 8028b2e:	2b00      	cmp	r3, #0
 8028b30:	d10a      	bne.n	8028b48 <xQueueGenericSend+0x60>
	__asm volatile
 8028b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028b36:	f383 8811 	msr	BASEPRI, r3
 8028b3a:	f3bf 8f6f 	isb	sy
 8028b3e:	f3bf 8f4f 	dsb	sy
 8028b42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8028b44:	bf00      	nop
 8028b46:	e7fe      	b.n	8028b46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8028b48:	683b      	ldr	r3, [r7, #0]
 8028b4a:	2b02      	cmp	r3, #2
 8028b4c:	d103      	bne.n	8028b56 <xQueueGenericSend+0x6e>
 8028b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028b52:	2b01      	cmp	r3, #1
 8028b54:	d101      	bne.n	8028b5a <xQueueGenericSend+0x72>
 8028b56:	2301      	movs	r3, #1
 8028b58:	e000      	b.n	8028b5c <xQueueGenericSend+0x74>
 8028b5a:	2300      	movs	r3, #0
 8028b5c:	2b00      	cmp	r3, #0
 8028b5e:	d10a      	bne.n	8028b76 <xQueueGenericSend+0x8e>
	__asm volatile
 8028b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028b64:	f383 8811 	msr	BASEPRI, r3
 8028b68:	f3bf 8f6f 	isb	sy
 8028b6c:	f3bf 8f4f 	dsb	sy
 8028b70:	623b      	str	r3, [r7, #32]
}
 8028b72:	bf00      	nop
 8028b74:	e7fe      	b.n	8028b74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8028b76:	f001 fc6f 	bl	802a458 <xTaskGetSchedulerState>
 8028b7a:	4603      	mov	r3, r0
 8028b7c:	2b00      	cmp	r3, #0
 8028b7e:	d102      	bne.n	8028b86 <xQueueGenericSend+0x9e>
 8028b80:	687b      	ldr	r3, [r7, #4]
 8028b82:	2b00      	cmp	r3, #0
 8028b84:	d101      	bne.n	8028b8a <xQueueGenericSend+0xa2>
 8028b86:	2301      	movs	r3, #1
 8028b88:	e000      	b.n	8028b8c <xQueueGenericSend+0xa4>
 8028b8a:	2300      	movs	r3, #0
 8028b8c:	2b00      	cmp	r3, #0
 8028b8e:	d10a      	bne.n	8028ba6 <xQueueGenericSend+0xbe>
	__asm volatile
 8028b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028b94:	f383 8811 	msr	BASEPRI, r3
 8028b98:	f3bf 8f6f 	isb	sy
 8028b9c:	f3bf 8f4f 	dsb	sy
 8028ba0:	61fb      	str	r3, [r7, #28]
}
 8028ba2:	bf00      	nop
 8028ba4:	e7fe      	b.n	8028ba4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8028ba6:	f002 f9bd 	bl	802af24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8028baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028bb2:	429a      	cmp	r2, r3
 8028bb4:	d302      	bcc.n	8028bbc <xQueueGenericSend+0xd4>
 8028bb6:	683b      	ldr	r3, [r7, #0]
 8028bb8:	2b02      	cmp	r3, #2
 8028bba:	d136      	bne.n	8028c2a <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8028bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028bbe:	4618      	mov	r0, r3
 8028bc0:	f003 ff0c 	bl	802c9dc <SEGGER_SYSVIEW_ShrinkId>
 8028bc4:	68ba      	ldr	r2, [r7, #8]
 8028bc6:	6879      	ldr	r1, [r7, #4]
 8028bc8:	683b      	ldr	r3, [r7, #0]
 8028bca:	9300      	str	r3, [sp, #0]
 8028bcc:	460b      	mov	r3, r1
 8028bce:	4601      	mov	r1, r0
 8028bd0:	205a      	movs	r0, #90	; 0x5a
 8028bd2:	f003 fac7 	bl	802c164 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8028bd6:	683a      	ldr	r2, [r7, #0]
 8028bd8:	68b9      	ldr	r1, [r7, #8]
 8028bda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8028bdc:	f000 fb5e 	bl	802929c <prvCopyDataToQueue>
 8028be0:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8028be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028be6:	2b00      	cmp	r3, #0
 8028be8:	d010      	beq.n	8028c0c <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8028bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028bec:	3324      	adds	r3, #36	; 0x24
 8028bee:	4618      	mov	r0, r3
 8028bf0:	f001 fa34 	bl	802a05c <xTaskRemoveFromEventList>
 8028bf4:	4603      	mov	r3, r0
 8028bf6:	2b00      	cmp	r3, #0
 8028bf8:	d013      	beq.n	8028c22 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8028bfa:	4b4d      	ldr	r3, [pc, #308]	; (8028d30 <xQueueGenericSend+0x248>)
 8028bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8028c00:	601a      	str	r2, [r3, #0]
 8028c02:	f3bf 8f4f 	dsb	sy
 8028c06:	f3bf 8f6f 	isb	sy
 8028c0a:	e00a      	b.n	8028c22 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8028c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028c0e:	2b00      	cmp	r3, #0
 8028c10:	d007      	beq.n	8028c22 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8028c12:	4b47      	ldr	r3, [pc, #284]	; (8028d30 <xQueueGenericSend+0x248>)
 8028c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8028c18:	601a      	str	r2, [r3, #0]
 8028c1a:	f3bf 8f4f 	dsb	sy
 8028c1e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8028c22:	f002 f9af 	bl	802af84 <vPortExitCritical>
				return pdPASS;
 8028c26:	2301      	movs	r3, #1
 8028c28:	e07d      	b.n	8028d26 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8028c2a:	687b      	ldr	r3, [r7, #4]
 8028c2c:	2b00      	cmp	r3, #0
 8028c2e:	d110      	bne.n	8028c52 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8028c30:	f002 f9a8 	bl	802af84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8028c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028c36:	4618      	mov	r0, r3
 8028c38:	f003 fed0 	bl	802c9dc <SEGGER_SYSVIEW_ShrinkId>
 8028c3c:	68ba      	ldr	r2, [r7, #8]
 8028c3e:	6879      	ldr	r1, [r7, #4]
 8028c40:	683b      	ldr	r3, [r7, #0]
 8028c42:	9300      	str	r3, [sp, #0]
 8028c44:	460b      	mov	r3, r1
 8028c46:	4601      	mov	r1, r0
 8028c48:	205a      	movs	r0, #90	; 0x5a
 8028c4a:	f003 fa8b 	bl	802c164 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8028c4e:	2300      	movs	r3, #0
 8028c50:	e069      	b.n	8028d26 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8028c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028c54:	2b00      	cmp	r3, #0
 8028c56:	d106      	bne.n	8028c66 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8028c58:	f107 0314 	add.w	r3, r7, #20
 8028c5c:	4618      	mov	r0, r3
 8028c5e:	f001 fa65 	bl	802a12c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8028c62:	2301      	movs	r3, #1
 8028c64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8028c66:	f002 f98d 	bl	802af84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8028c6a:	f000 ff9d 	bl	8029ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8028c6e:	f002 f959 	bl	802af24 <vPortEnterCritical>
 8028c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028c74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8028c78:	b25b      	sxtb	r3, r3
 8028c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028c7e:	d103      	bne.n	8028c88 <xQueueGenericSend+0x1a0>
 8028c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028c82:	2200      	movs	r2, #0
 8028c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8028c8e:	b25b      	sxtb	r3, r3
 8028c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028c94:	d103      	bne.n	8028c9e <xQueueGenericSend+0x1b6>
 8028c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028c98:	2200      	movs	r2, #0
 8028c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8028c9e:	f002 f971 	bl	802af84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8028ca2:	1d3a      	adds	r2, r7, #4
 8028ca4:	f107 0314 	add.w	r3, r7, #20
 8028ca8:	4611      	mov	r1, r2
 8028caa:	4618      	mov	r0, r3
 8028cac:	f001 fa54 	bl	802a158 <xTaskCheckForTimeOut>
 8028cb0:	4603      	mov	r3, r0
 8028cb2:	2b00      	cmp	r3, #0
 8028cb4:	d124      	bne.n	8028d00 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8028cb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8028cb8:	f000 fbe8 	bl	802948c <prvIsQueueFull>
 8028cbc:	4603      	mov	r3, r0
 8028cbe:	2b00      	cmp	r3, #0
 8028cc0:	d018      	beq.n	8028cf4 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8028cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028cc4:	3310      	adds	r3, #16
 8028cc6:	687a      	ldr	r2, [r7, #4]
 8028cc8:	4611      	mov	r1, r2
 8028cca:	4618      	mov	r0, r3
 8028ccc:	f001 f974 	bl	8029fb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8028cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8028cd2:	f000 fb73 	bl	80293bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8028cd6:	f000 ff75 	bl	8029bc4 <xTaskResumeAll>
 8028cda:	4603      	mov	r3, r0
 8028cdc:	2b00      	cmp	r3, #0
 8028cde:	f47f af62 	bne.w	8028ba6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8028ce2:	4b13      	ldr	r3, [pc, #76]	; (8028d30 <xQueueGenericSend+0x248>)
 8028ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8028ce8:	601a      	str	r2, [r3, #0]
 8028cea:	f3bf 8f4f 	dsb	sy
 8028cee:	f3bf 8f6f 	isb	sy
 8028cf2:	e758      	b.n	8028ba6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8028cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8028cf6:	f000 fb61 	bl	80293bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8028cfa:	f000 ff63 	bl	8029bc4 <xTaskResumeAll>
 8028cfe:	e752      	b.n	8028ba6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8028d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8028d02:	f000 fb5b 	bl	80293bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8028d06:	f000 ff5d 	bl	8029bc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8028d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028d0c:	4618      	mov	r0, r3
 8028d0e:	f003 fe65 	bl	802c9dc <SEGGER_SYSVIEW_ShrinkId>
 8028d12:	68ba      	ldr	r2, [r7, #8]
 8028d14:	6879      	ldr	r1, [r7, #4]
 8028d16:	683b      	ldr	r3, [r7, #0]
 8028d18:	9300      	str	r3, [sp, #0]
 8028d1a:	460b      	mov	r3, r1
 8028d1c:	4601      	mov	r1, r0
 8028d1e:	205a      	movs	r0, #90	; 0x5a
 8028d20:	f003 fa20 	bl	802c164 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8028d24:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8028d26:	4618      	mov	r0, r3
 8028d28:	3738      	adds	r7, #56	; 0x38
 8028d2a:	46bd      	mov	sp, r7
 8028d2c:	bd80      	pop	{r7, pc}
 8028d2e:	bf00      	nop
 8028d30:	e000ed04 	.word	0xe000ed04

08028d34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8028d34:	b580      	push	{r7, lr}
 8028d36:	b090      	sub	sp, #64	; 0x40
 8028d38:	af00      	add	r7, sp, #0
 8028d3a:	60f8      	str	r0, [r7, #12]
 8028d3c:	60b9      	str	r1, [r7, #8]
 8028d3e:	607a      	str	r2, [r7, #4]
 8028d40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8028d42:	68fb      	ldr	r3, [r7, #12]
 8028d44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8028d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028d48:	2b00      	cmp	r3, #0
 8028d4a:	d10a      	bne.n	8028d62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8028d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028d50:	f383 8811 	msr	BASEPRI, r3
 8028d54:	f3bf 8f6f 	isb	sy
 8028d58:	f3bf 8f4f 	dsb	sy
 8028d5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8028d5e:	bf00      	nop
 8028d60:	e7fe      	b.n	8028d60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8028d62:	68bb      	ldr	r3, [r7, #8]
 8028d64:	2b00      	cmp	r3, #0
 8028d66:	d103      	bne.n	8028d70 <xQueueGenericSendFromISR+0x3c>
 8028d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028d6c:	2b00      	cmp	r3, #0
 8028d6e:	d101      	bne.n	8028d74 <xQueueGenericSendFromISR+0x40>
 8028d70:	2301      	movs	r3, #1
 8028d72:	e000      	b.n	8028d76 <xQueueGenericSendFromISR+0x42>
 8028d74:	2300      	movs	r3, #0
 8028d76:	2b00      	cmp	r3, #0
 8028d78:	d10a      	bne.n	8028d90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8028d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028d7e:	f383 8811 	msr	BASEPRI, r3
 8028d82:	f3bf 8f6f 	isb	sy
 8028d86:	f3bf 8f4f 	dsb	sy
 8028d8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8028d8c:	bf00      	nop
 8028d8e:	e7fe      	b.n	8028d8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8028d90:	683b      	ldr	r3, [r7, #0]
 8028d92:	2b02      	cmp	r3, #2
 8028d94:	d103      	bne.n	8028d9e <xQueueGenericSendFromISR+0x6a>
 8028d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028d9a:	2b01      	cmp	r3, #1
 8028d9c:	d101      	bne.n	8028da2 <xQueueGenericSendFromISR+0x6e>
 8028d9e:	2301      	movs	r3, #1
 8028da0:	e000      	b.n	8028da4 <xQueueGenericSendFromISR+0x70>
 8028da2:	2300      	movs	r3, #0
 8028da4:	2b00      	cmp	r3, #0
 8028da6:	d10a      	bne.n	8028dbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8028da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028dac:	f383 8811 	msr	BASEPRI, r3
 8028db0:	f3bf 8f6f 	isb	sy
 8028db4:	f3bf 8f4f 	dsb	sy
 8028db8:	623b      	str	r3, [r7, #32]
}
 8028dba:	bf00      	nop
 8028dbc:	e7fe      	b.n	8028dbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8028dbe:	f002 f993 	bl	802b0e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8028dc2:	f3ef 8211 	mrs	r2, BASEPRI
 8028dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028dca:	f383 8811 	msr	BASEPRI, r3
 8028dce:	f3bf 8f6f 	isb	sy
 8028dd2:	f3bf 8f4f 	dsb	sy
 8028dd6:	61fa      	str	r2, [r7, #28]
 8028dd8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8028dda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8028ddc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8028dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028de6:	429a      	cmp	r2, r3
 8028de8:	d302      	bcc.n	8028df0 <xQueueGenericSendFromISR+0xbc>
 8028dea:	683b      	ldr	r3, [r7, #0]
 8028dec:	2b02      	cmp	r3, #2
 8028dee:	d139      	bne.n	8028e64 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8028df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028df2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8028df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8028dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8028e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028e02:	4618      	mov	r0, r3
 8028e04:	f003 fdea 	bl	802c9dc <SEGGER_SYSVIEW_ShrinkId>
 8028e08:	4601      	mov	r1, r0
 8028e0a:	687b      	ldr	r3, [r7, #4]
 8028e0c:	461a      	mov	r2, r3
 8028e0e:	2060      	movs	r0, #96	; 0x60
 8028e10:	f003 f8d8 	bl	802bfc4 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8028e14:	683a      	ldr	r2, [r7, #0]
 8028e16:	68b9      	ldr	r1, [r7, #8]
 8028e18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8028e1a:	f000 fa3f 	bl	802929c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8028e1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8028e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028e26:	d112      	bne.n	8028e4e <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8028e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028e2c:	2b00      	cmp	r3, #0
 8028e2e:	d016      	beq.n	8028e5e <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8028e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028e32:	3324      	adds	r3, #36	; 0x24
 8028e34:	4618      	mov	r0, r3
 8028e36:	f001 f911 	bl	802a05c <xTaskRemoveFromEventList>
 8028e3a:	4603      	mov	r3, r0
 8028e3c:	2b00      	cmp	r3, #0
 8028e3e:	d00e      	beq.n	8028e5e <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8028e40:	687b      	ldr	r3, [r7, #4]
 8028e42:	2b00      	cmp	r3, #0
 8028e44:	d00b      	beq.n	8028e5e <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8028e46:	687b      	ldr	r3, [r7, #4]
 8028e48:	2201      	movs	r2, #1
 8028e4a:	601a      	str	r2, [r3, #0]
 8028e4c:	e007      	b.n	8028e5e <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8028e4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8028e52:	3301      	adds	r3, #1
 8028e54:	b2db      	uxtb	r3, r3
 8028e56:	b25a      	sxtb	r2, r3
 8028e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8028e5e:	2301      	movs	r3, #1
 8028e60:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8028e62:	e00b      	b.n	8028e7c <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8028e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028e66:	4618      	mov	r0, r3
 8028e68:	f003 fdb8 	bl	802c9dc <SEGGER_SYSVIEW_ShrinkId>
 8028e6c:	4601      	mov	r1, r0
 8028e6e:	687b      	ldr	r3, [r7, #4]
 8028e70:	461a      	mov	r2, r3
 8028e72:	2060      	movs	r0, #96	; 0x60
 8028e74:	f003 f8a6 	bl	802bfc4 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8028e78:	2300      	movs	r3, #0
 8028e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8028e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028e7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8028e80:	697b      	ldr	r3, [r7, #20]
 8028e82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8028e86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8028e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8028e8a:	4618      	mov	r0, r3
 8028e8c:	3740      	adds	r7, #64	; 0x40
 8028e8e:	46bd      	mov	sp, r7
 8028e90:	bd80      	pop	{r7, pc}
	...

08028e94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8028e94:	b590      	push	{r4, r7, lr}
 8028e96:	b08f      	sub	sp, #60	; 0x3c
 8028e98:	af02      	add	r7, sp, #8
 8028e9a:	60f8      	str	r0, [r7, #12]
 8028e9c:	60b9      	str	r1, [r7, #8]
 8028e9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8028ea0:	2300      	movs	r3, #0
 8028ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8028ea4:	68fb      	ldr	r3, [r7, #12]
 8028ea6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8028ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028eaa:	2b00      	cmp	r3, #0
 8028eac:	d10a      	bne.n	8028ec4 <xQueueReceive+0x30>
	__asm volatile
 8028eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028eb2:	f383 8811 	msr	BASEPRI, r3
 8028eb6:	f3bf 8f6f 	isb	sy
 8028eba:	f3bf 8f4f 	dsb	sy
 8028ebe:	623b      	str	r3, [r7, #32]
}
 8028ec0:	bf00      	nop
 8028ec2:	e7fe      	b.n	8028ec2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8028ec4:	68bb      	ldr	r3, [r7, #8]
 8028ec6:	2b00      	cmp	r3, #0
 8028ec8:	d103      	bne.n	8028ed2 <xQueueReceive+0x3e>
 8028eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028ece:	2b00      	cmp	r3, #0
 8028ed0:	d101      	bne.n	8028ed6 <xQueueReceive+0x42>
 8028ed2:	2301      	movs	r3, #1
 8028ed4:	e000      	b.n	8028ed8 <xQueueReceive+0x44>
 8028ed6:	2300      	movs	r3, #0
 8028ed8:	2b00      	cmp	r3, #0
 8028eda:	d10a      	bne.n	8028ef2 <xQueueReceive+0x5e>
	__asm volatile
 8028edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028ee0:	f383 8811 	msr	BASEPRI, r3
 8028ee4:	f3bf 8f6f 	isb	sy
 8028ee8:	f3bf 8f4f 	dsb	sy
 8028eec:	61fb      	str	r3, [r7, #28]
}
 8028eee:	bf00      	nop
 8028ef0:	e7fe      	b.n	8028ef0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8028ef2:	f001 fab1 	bl	802a458 <xTaskGetSchedulerState>
 8028ef6:	4603      	mov	r3, r0
 8028ef8:	2b00      	cmp	r3, #0
 8028efa:	d102      	bne.n	8028f02 <xQueueReceive+0x6e>
 8028efc:	687b      	ldr	r3, [r7, #4]
 8028efe:	2b00      	cmp	r3, #0
 8028f00:	d101      	bne.n	8028f06 <xQueueReceive+0x72>
 8028f02:	2301      	movs	r3, #1
 8028f04:	e000      	b.n	8028f08 <xQueueReceive+0x74>
 8028f06:	2300      	movs	r3, #0
 8028f08:	2b00      	cmp	r3, #0
 8028f0a:	d10a      	bne.n	8028f22 <xQueueReceive+0x8e>
	__asm volatile
 8028f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028f10:	f383 8811 	msr	BASEPRI, r3
 8028f14:	f3bf 8f6f 	isb	sy
 8028f18:	f3bf 8f4f 	dsb	sy
 8028f1c:	61bb      	str	r3, [r7, #24]
}
 8028f1e:	bf00      	nop
 8028f20:	e7fe      	b.n	8028f20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8028f22:	f001 ffff 	bl	802af24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8028f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028f2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8028f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f2e:	2b00      	cmp	r3, #0
 8028f30:	d02f      	beq.n	8028f92 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8028f32:	68b9      	ldr	r1, [r7, #8]
 8028f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028f36:	f000 fa1b 	bl	8029370 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8028f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028f3c:	4618      	mov	r0, r3
 8028f3e:	f003 fd4d 	bl	802c9dc <SEGGER_SYSVIEW_ShrinkId>
 8028f42:	4604      	mov	r4, r0
 8028f44:	2000      	movs	r0, #0
 8028f46:	f003 fd49 	bl	802c9dc <SEGGER_SYSVIEW_ShrinkId>
 8028f4a:	4602      	mov	r2, r0
 8028f4c:	687b      	ldr	r3, [r7, #4]
 8028f4e:	2101      	movs	r1, #1
 8028f50:	9100      	str	r1, [sp, #0]
 8028f52:	4621      	mov	r1, r4
 8028f54:	205c      	movs	r0, #92	; 0x5c
 8028f56:	f003 f905 	bl	802c164 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8028f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f5c:	1e5a      	subs	r2, r3, #1
 8028f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028f60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8028f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028f64:	691b      	ldr	r3, [r3, #16]
 8028f66:	2b00      	cmp	r3, #0
 8028f68:	d00f      	beq.n	8028f8a <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8028f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028f6c:	3310      	adds	r3, #16
 8028f6e:	4618      	mov	r0, r3
 8028f70:	f001 f874 	bl	802a05c <xTaskRemoveFromEventList>
 8028f74:	4603      	mov	r3, r0
 8028f76:	2b00      	cmp	r3, #0
 8028f78:	d007      	beq.n	8028f8a <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8028f7a:	4b4d      	ldr	r3, [pc, #308]	; (80290b0 <xQueueReceive+0x21c>)
 8028f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8028f80:	601a      	str	r2, [r3, #0]
 8028f82:	f3bf 8f4f 	dsb	sy
 8028f86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8028f8a:	f001 fffb 	bl	802af84 <vPortExitCritical>
				return pdPASS;
 8028f8e:	2301      	movs	r3, #1
 8028f90:	e08a      	b.n	80290a8 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8028f92:	687b      	ldr	r3, [r7, #4]
 8028f94:	2b00      	cmp	r3, #0
 8028f96:	d113      	bne.n	8028fc0 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8028f98:	f001 fff4 	bl	802af84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8028f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028f9e:	4618      	mov	r0, r3
 8028fa0:	f003 fd1c 	bl	802c9dc <SEGGER_SYSVIEW_ShrinkId>
 8028fa4:	4604      	mov	r4, r0
 8028fa6:	2000      	movs	r0, #0
 8028fa8:	f003 fd18 	bl	802c9dc <SEGGER_SYSVIEW_ShrinkId>
 8028fac:	4602      	mov	r2, r0
 8028fae:	687b      	ldr	r3, [r7, #4]
 8028fb0:	2101      	movs	r1, #1
 8028fb2:	9100      	str	r1, [sp, #0]
 8028fb4:	4621      	mov	r1, r4
 8028fb6:	205c      	movs	r0, #92	; 0x5c
 8028fb8:	f003 f8d4 	bl	802c164 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8028fbc:	2300      	movs	r3, #0
 8028fbe:	e073      	b.n	80290a8 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8028fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028fc2:	2b00      	cmp	r3, #0
 8028fc4:	d106      	bne.n	8028fd4 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8028fc6:	f107 0310 	add.w	r3, r7, #16
 8028fca:	4618      	mov	r0, r3
 8028fcc:	f001 f8ae 	bl	802a12c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8028fd0:	2301      	movs	r3, #1
 8028fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8028fd4:	f001 ffd6 	bl	802af84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8028fd8:	f000 fde6 	bl	8029ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8028fdc:	f001 ffa2 	bl	802af24 <vPortEnterCritical>
 8028fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8028fe6:	b25b      	sxtb	r3, r3
 8028fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028fec:	d103      	bne.n	8028ff6 <xQueueReceive+0x162>
 8028fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028ff0:	2200      	movs	r2, #0
 8028ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8028ffc:	b25b      	sxtb	r3, r3
 8028ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029002:	d103      	bne.n	802900c <xQueueReceive+0x178>
 8029004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029006:	2200      	movs	r2, #0
 8029008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802900c:	f001 ffba 	bl	802af84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8029010:	1d3a      	adds	r2, r7, #4
 8029012:	f107 0310 	add.w	r3, r7, #16
 8029016:	4611      	mov	r1, r2
 8029018:	4618      	mov	r0, r3
 802901a:	f001 f89d 	bl	802a158 <xTaskCheckForTimeOut>
 802901e:	4603      	mov	r3, r0
 8029020:	2b00      	cmp	r3, #0
 8029022:	d124      	bne.n	802906e <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8029024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8029026:	f000 fa1b 	bl	8029460 <prvIsQueueEmpty>
 802902a:	4603      	mov	r3, r0
 802902c:	2b00      	cmp	r3, #0
 802902e:	d018      	beq.n	8029062 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8029030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029032:	3324      	adds	r3, #36	; 0x24
 8029034:	687a      	ldr	r2, [r7, #4]
 8029036:	4611      	mov	r1, r2
 8029038:	4618      	mov	r0, r3
 802903a:	f000 ffbd 	bl	8029fb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802903e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8029040:	f000 f9bc 	bl	80293bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8029044:	f000 fdbe 	bl	8029bc4 <xTaskResumeAll>
 8029048:	4603      	mov	r3, r0
 802904a:	2b00      	cmp	r3, #0
 802904c:	f47f af69 	bne.w	8028f22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8029050:	4b17      	ldr	r3, [pc, #92]	; (80290b0 <xQueueReceive+0x21c>)
 8029052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8029056:	601a      	str	r2, [r3, #0]
 8029058:	f3bf 8f4f 	dsb	sy
 802905c:	f3bf 8f6f 	isb	sy
 8029060:	e75f      	b.n	8028f22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8029062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8029064:	f000 f9aa 	bl	80293bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8029068:	f000 fdac 	bl	8029bc4 <xTaskResumeAll>
 802906c:	e759      	b.n	8028f22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 802906e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8029070:	f000 f9a4 	bl	80293bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8029074:	f000 fda6 	bl	8029bc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8029078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802907a:	f000 f9f1 	bl	8029460 <prvIsQueueEmpty>
 802907e:	4603      	mov	r3, r0
 8029080:	2b00      	cmp	r3, #0
 8029082:	f43f af4e 	beq.w	8028f22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8029086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029088:	4618      	mov	r0, r3
 802908a:	f003 fca7 	bl	802c9dc <SEGGER_SYSVIEW_ShrinkId>
 802908e:	4604      	mov	r4, r0
 8029090:	2000      	movs	r0, #0
 8029092:	f003 fca3 	bl	802c9dc <SEGGER_SYSVIEW_ShrinkId>
 8029096:	4602      	mov	r2, r0
 8029098:	687b      	ldr	r3, [r7, #4]
 802909a:	2101      	movs	r1, #1
 802909c:	9100      	str	r1, [sp, #0]
 802909e:	4621      	mov	r1, r4
 80290a0:	205c      	movs	r0, #92	; 0x5c
 80290a2:	f003 f85f 	bl	802c164 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80290a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80290a8:	4618      	mov	r0, r3
 80290aa:	3734      	adds	r7, #52	; 0x34
 80290ac:	46bd      	mov	sp, r7
 80290ae:	bd90      	pop	{r4, r7, pc}
 80290b0:	e000ed04 	.word	0xe000ed04

080290b4 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80290b4:	b590      	push	{r4, r7, lr}
 80290b6:	b091      	sub	sp, #68	; 0x44
 80290b8:	af02      	add	r7, sp, #8
 80290ba:	60f8      	str	r0, [r7, #12]
 80290bc:	60b9      	str	r1, [r7, #8]
 80290be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80290c0:	2300      	movs	r3, #0
 80290c2:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 80290c4:	68fb      	ldr	r3, [r7, #12]
 80290c6:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80290c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80290ca:	2b00      	cmp	r3, #0
 80290cc:	d10a      	bne.n	80290e4 <xQueuePeek+0x30>
	__asm volatile
 80290ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80290d2:	f383 8811 	msr	BASEPRI, r3
 80290d6:	f3bf 8f6f 	isb	sy
 80290da:	f3bf 8f4f 	dsb	sy
 80290de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80290e0:	bf00      	nop
 80290e2:	e7fe      	b.n	80290e2 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80290e4:	68bb      	ldr	r3, [r7, #8]
 80290e6:	2b00      	cmp	r3, #0
 80290e8:	d103      	bne.n	80290f2 <xQueuePeek+0x3e>
 80290ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80290ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80290ee:	2b00      	cmp	r3, #0
 80290f0:	d101      	bne.n	80290f6 <xQueuePeek+0x42>
 80290f2:	2301      	movs	r3, #1
 80290f4:	e000      	b.n	80290f8 <xQueuePeek+0x44>
 80290f6:	2300      	movs	r3, #0
 80290f8:	2b00      	cmp	r3, #0
 80290fa:	d10a      	bne.n	8029112 <xQueuePeek+0x5e>
	__asm volatile
 80290fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029100:	f383 8811 	msr	BASEPRI, r3
 8029104:	f3bf 8f6f 	isb	sy
 8029108:	f3bf 8f4f 	dsb	sy
 802910c:	623b      	str	r3, [r7, #32]
}
 802910e:	bf00      	nop
 8029110:	e7fe      	b.n	8029110 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8029112:	f001 f9a1 	bl	802a458 <xTaskGetSchedulerState>
 8029116:	4603      	mov	r3, r0
 8029118:	2b00      	cmp	r3, #0
 802911a:	d102      	bne.n	8029122 <xQueuePeek+0x6e>
 802911c:	687b      	ldr	r3, [r7, #4]
 802911e:	2b00      	cmp	r3, #0
 8029120:	d101      	bne.n	8029126 <xQueuePeek+0x72>
 8029122:	2301      	movs	r3, #1
 8029124:	e000      	b.n	8029128 <xQueuePeek+0x74>
 8029126:	2300      	movs	r3, #0
 8029128:	2b00      	cmp	r3, #0
 802912a:	d10a      	bne.n	8029142 <xQueuePeek+0x8e>
	__asm volatile
 802912c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029130:	f383 8811 	msr	BASEPRI, r3
 8029134:	f3bf 8f6f 	isb	sy
 8029138:	f3bf 8f4f 	dsb	sy
 802913c:	61fb      	str	r3, [r7, #28]
}
 802913e:	bf00      	nop
 8029140:	e7fe      	b.n	8029140 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8029142:	f001 feef 	bl	802af24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8029146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802914a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802914e:	2b00      	cmp	r3, #0
 8029150:	d032      	beq.n	80291b8 <xQueuePeek+0x104>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8029152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029154:	68db      	ldr	r3, [r3, #12]
 8029156:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8029158:	68b9      	ldr	r1, [r7, #8]
 802915a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802915c:	f000 f908 	bl	8029370 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );
 8029160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029162:	4618      	mov	r0, r3
 8029164:	f003 fc3a 	bl	802c9dc <SEGGER_SYSVIEW_ShrinkId>
 8029168:	4604      	mov	r4, r0
 802916a:	68bb      	ldr	r3, [r7, #8]
 802916c:	4618      	mov	r0, r3
 802916e:	f003 fc35 	bl	802c9dc <SEGGER_SYSVIEW_ShrinkId>
 8029172:	4602      	mov	r2, r0
 8029174:	687b      	ldr	r3, [r7, #4]
 8029176:	2101      	movs	r1, #1
 8029178:	9100      	str	r1, [sp, #0]
 802917a:	4621      	mov	r1, r4
 802917c:	205c      	movs	r0, #92	; 0x5c
 802917e:	f002 fff1 	bl	802c164 <SEGGER_SYSVIEW_RecordU32x4>

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8029182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8029186:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8029188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802918c:	2b00      	cmp	r3, #0
 802918e:	d00f      	beq.n	80291b0 <xQueuePeek+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8029190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029192:	3324      	adds	r3, #36	; 0x24
 8029194:	4618      	mov	r0, r3
 8029196:	f000 ff61 	bl	802a05c <xTaskRemoveFromEventList>
 802919a:	4603      	mov	r3, r0
 802919c:	2b00      	cmp	r3, #0
 802919e:	d007      	beq.n	80291b0 <xQueuePeek+0xfc>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80291a0:	4b3d      	ldr	r3, [pc, #244]	; (8029298 <xQueuePeek+0x1e4>)
 80291a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80291a6:	601a      	str	r2, [r3, #0]
 80291a8:	f3bf 8f4f 	dsb	sy
 80291ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80291b0:	f001 fee8 	bl	802af84 <vPortExitCritical>
				return pdPASS;
 80291b4:	2301      	movs	r3, #1
 80291b6:	e06a      	b.n	802928e <xQueuePeek+0x1da>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80291b8:	687b      	ldr	r3, [r7, #4]
 80291ba:	2b00      	cmp	r3, #0
 80291bc:	d103      	bne.n	80291c6 <xQueuePeek+0x112>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80291be:	f001 fee1 	bl	802af84 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80291c2:	2300      	movs	r3, #0
 80291c4:	e063      	b.n	802928e <xQueuePeek+0x1da>
				}
				else if( xEntryTimeSet == pdFALSE )
 80291c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80291c8:	2b00      	cmp	r3, #0
 80291ca:	d106      	bne.n	80291da <xQueuePeek+0x126>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80291cc:	f107 0314 	add.w	r3, r7, #20
 80291d0:	4618      	mov	r0, r3
 80291d2:	f000 ffab 	bl	802a12c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80291d6:	2301      	movs	r3, #1
 80291d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80291da:	f001 fed3 	bl	802af84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80291de:	f000 fce3 	bl	8029ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80291e2:	f001 fe9f 	bl	802af24 <vPortEnterCritical>
 80291e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80291e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80291ec:	b25b      	sxtb	r3, r3
 80291ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80291f2:	d103      	bne.n	80291fc <xQueuePeek+0x148>
 80291f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80291f6:	2200      	movs	r2, #0
 80291f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80291fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80291fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8029202:	b25b      	sxtb	r3, r3
 8029204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029208:	d103      	bne.n	8029212 <xQueuePeek+0x15e>
 802920a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802920c:	2200      	movs	r2, #0
 802920e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8029212:	f001 feb7 	bl	802af84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8029216:	1d3a      	adds	r2, r7, #4
 8029218:	f107 0314 	add.w	r3, r7, #20
 802921c:	4611      	mov	r1, r2
 802921e:	4618      	mov	r0, r3
 8029220:	f000 ff9a 	bl	802a158 <xTaskCheckForTimeOut>
 8029224:	4603      	mov	r3, r0
 8029226:	2b00      	cmp	r3, #0
 8029228:	d124      	bne.n	8029274 <xQueuePeek+0x1c0>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802922a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802922c:	f000 f918 	bl	8029460 <prvIsQueueEmpty>
 8029230:	4603      	mov	r3, r0
 8029232:	2b00      	cmp	r3, #0
 8029234:	d018      	beq.n	8029268 <xQueuePeek+0x1b4>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8029236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029238:	3324      	adds	r3, #36	; 0x24
 802923a:	687a      	ldr	r2, [r7, #4]
 802923c:	4611      	mov	r1, r2
 802923e:	4618      	mov	r0, r3
 8029240:	f000 feba 	bl	8029fb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8029244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8029246:	f000 f8b9 	bl	80293bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802924a:	f000 fcbb 	bl	8029bc4 <xTaskResumeAll>
 802924e:	4603      	mov	r3, r0
 8029250:	2b00      	cmp	r3, #0
 8029252:	f47f af76 	bne.w	8029142 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 8029256:	4b10      	ldr	r3, [pc, #64]	; (8029298 <xQueuePeek+0x1e4>)
 8029258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802925c:	601a      	str	r2, [r3, #0]
 802925e:	f3bf 8f4f 	dsb	sy
 8029262:	f3bf 8f6f 	isb	sy
 8029266:	e76c      	b.n	8029142 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8029268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802926a:	f000 f8a7 	bl	80293bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802926e:	f000 fca9 	bl	8029bc4 <xTaskResumeAll>
 8029272:	e766      	b.n	8029142 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8029274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8029276:	f000 f8a1 	bl	80293bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802927a:	f000 fca3 	bl	8029bc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802927e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8029280:	f000 f8ee 	bl	8029460 <prvIsQueueEmpty>
 8029284:	4603      	mov	r3, r0
 8029286:	2b00      	cmp	r3, #0
 8029288:	f43f af5b 	beq.w	8029142 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 802928c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 802928e:	4618      	mov	r0, r3
 8029290:	373c      	adds	r7, #60	; 0x3c
 8029292:	46bd      	mov	sp, r7
 8029294:	bd90      	pop	{r4, r7, pc}
 8029296:	bf00      	nop
 8029298:	e000ed04 	.word	0xe000ed04

0802929c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 802929c:	b580      	push	{r7, lr}
 802929e:	b086      	sub	sp, #24
 80292a0:	af00      	add	r7, sp, #0
 80292a2:	60f8      	str	r0, [r7, #12]
 80292a4:	60b9      	str	r1, [r7, #8]
 80292a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80292a8:	2300      	movs	r3, #0
 80292aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80292ac:	68fb      	ldr	r3, [r7, #12]
 80292ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80292b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80292b2:	68fb      	ldr	r3, [r7, #12]
 80292b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80292b6:	2b00      	cmp	r3, #0
 80292b8:	d10d      	bne.n	80292d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80292ba:	68fb      	ldr	r3, [r7, #12]
 80292bc:	681b      	ldr	r3, [r3, #0]
 80292be:	2b00      	cmp	r3, #0
 80292c0:	d14d      	bne.n	802935e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80292c2:	68fb      	ldr	r3, [r7, #12]
 80292c4:	689b      	ldr	r3, [r3, #8]
 80292c6:	4618      	mov	r0, r3
 80292c8:	f001 f8e4 	bl	802a494 <xTaskPriorityDisinherit>
 80292cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80292ce:	68fb      	ldr	r3, [r7, #12]
 80292d0:	2200      	movs	r2, #0
 80292d2:	609a      	str	r2, [r3, #8]
 80292d4:	e043      	b.n	802935e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80292d6:	687b      	ldr	r3, [r7, #4]
 80292d8:	2b00      	cmp	r3, #0
 80292da:	d119      	bne.n	8029310 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80292dc:	68fb      	ldr	r3, [r7, #12]
 80292de:	6858      	ldr	r0, [r3, #4]
 80292e0:	68fb      	ldr	r3, [r7, #12]
 80292e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80292e4:	461a      	mov	r2, r3
 80292e6:	68b9      	ldr	r1, [r7, #8]
 80292e8:	f003 fd2c 	bl	802cd44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80292ec:	68fb      	ldr	r3, [r7, #12]
 80292ee:	685a      	ldr	r2, [r3, #4]
 80292f0:	68fb      	ldr	r3, [r7, #12]
 80292f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80292f4:	441a      	add	r2, r3
 80292f6:	68fb      	ldr	r3, [r7, #12]
 80292f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80292fa:	68fb      	ldr	r3, [r7, #12]
 80292fc:	685a      	ldr	r2, [r3, #4]
 80292fe:	68fb      	ldr	r3, [r7, #12]
 8029300:	689b      	ldr	r3, [r3, #8]
 8029302:	429a      	cmp	r2, r3
 8029304:	d32b      	bcc.n	802935e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8029306:	68fb      	ldr	r3, [r7, #12]
 8029308:	681a      	ldr	r2, [r3, #0]
 802930a:	68fb      	ldr	r3, [r7, #12]
 802930c:	605a      	str	r2, [r3, #4]
 802930e:	e026      	b.n	802935e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8029310:	68fb      	ldr	r3, [r7, #12]
 8029312:	68d8      	ldr	r0, [r3, #12]
 8029314:	68fb      	ldr	r3, [r7, #12]
 8029316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029318:	461a      	mov	r2, r3
 802931a:	68b9      	ldr	r1, [r7, #8]
 802931c:	f003 fd12 	bl	802cd44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8029320:	68fb      	ldr	r3, [r7, #12]
 8029322:	68da      	ldr	r2, [r3, #12]
 8029324:	68fb      	ldr	r3, [r7, #12]
 8029326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029328:	425b      	negs	r3, r3
 802932a:	441a      	add	r2, r3
 802932c:	68fb      	ldr	r3, [r7, #12]
 802932e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8029330:	68fb      	ldr	r3, [r7, #12]
 8029332:	68da      	ldr	r2, [r3, #12]
 8029334:	68fb      	ldr	r3, [r7, #12]
 8029336:	681b      	ldr	r3, [r3, #0]
 8029338:	429a      	cmp	r2, r3
 802933a:	d207      	bcs.n	802934c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 802933c:	68fb      	ldr	r3, [r7, #12]
 802933e:	689a      	ldr	r2, [r3, #8]
 8029340:	68fb      	ldr	r3, [r7, #12]
 8029342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029344:	425b      	negs	r3, r3
 8029346:	441a      	add	r2, r3
 8029348:	68fb      	ldr	r3, [r7, #12]
 802934a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 802934c:	687b      	ldr	r3, [r7, #4]
 802934e:	2b02      	cmp	r3, #2
 8029350:	d105      	bne.n	802935e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8029352:	693b      	ldr	r3, [r7, #16]
 8029354:	2b00      	cmp	r3, #0
 8029356:	d002      	beq.n	802935e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8029358:	693b      	ldr	r3, [r7, #16]
 802935a:	3b01      	subs	r3, #1
 802935c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 802935e:	693b      	ldr	r3, [r7, #16]
 8029360:	1c5a      	adds	r2, r3, #1
 8029362:	68fb      	ldr	r3, [r7, #12]
 8029364:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8029366:	697b      	ldr	r3, [r7, #20]
}
 8029368:	4618      	mov	r0, r3
 802936a:	3718      	adds	r7, #24
 802936c:	46bd      	mov	sp, r7
 802936e:	bd80      	pop	{r7, pc}

08029370 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8029370:	b580      	push	{r7, lr}
 8029372:	b082      	sub	sp, #8
 8029374:	af00      	add	r7, sp, #0
 8029376:	6078      	str	r0, [r7, #4]
 8029378:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 802937a:	687b      	ldr	r3, [r7, #4]
 802937c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802937e:	2b00      	cmp	r3, #0
 8029380:	d018      	beq.n	80293b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8029382:	687b      	ldr	r3, [r7, #4]
 8029384:	68da      	ldr	r2, [r3, #12]
 8029386:	687b      	ldr	r3, [r7, #4]
 8029388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802938a:	441a      	add	r2, r3
 802938c:	687b      	ldr	r3, [r7, #4]
 802938e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8029390:	687b      	ldr	r3, [r7, #4]
 8029392:	68da      	ldr	r2, [r3, #12]
 8029394:	687b      	ldr	r3, [r7, #4]
 8029396:	689b      	ldr	r3, [r3, #8]
 8029398:	429a      	cmp	r2, r3
 802939a:	d303      	bcc.n	80293a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 802939c:	687b      	ldr	r3, [r7, #4]
 802939e:	681a      	ldr	r2, [r3, #0]
 80293a0:	687b      	ldr	r3, [r7, #4]
 80293a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80293a4:	687b      	ldr	r3, [r7, #4]
 80293a6:	68d9      	ldr	r1, [r3, #12]
 80293a8:	687b      	ldr	r3, [r7, #4]
 80293aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80293ac:	461a      	mov	r2, r3
 80293ae:	6838      	ldr	r0, [r7, #0]
 80293b0:	f003 fcc8 	bl	802cd44 <memcpy>
	}
}
 80293b4:	bf00      	nop
 80293b6:	3708      	adds	r7, #8
 80293b8:	46bd      	mov	sp, r7
 80293ba:	bd80      	pop	{r7, pc}

080293bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80293bc:	b580      	push	{r7, lr}
 80293be:	b084      	sub	sp, #16
 80293c0:	af00      	add	r7, sp, #0
 80293c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80293c4:	f001 fdae 	bl	802af24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80293c8:	687b      	ldr	r3, [r7, #4]
 80293ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80293ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80293d0:	e011      	b.n	80293f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80293d2:	687b      	ldr	r3, [r7, #4]
 80293d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80293d6:	2b00      	cmp	r3, #0
 80293d8:	d012      	beq.n	8029400 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80293da:	687b      	ldr	r3, [r7, #4]
 80293dc:	3324      	adds	r3, #36	; 0x24
 80293de:	4618      	mov	r0, r3
 80293e0:	f000 fe3c 	bl	802a05c <xTaskRemoveFromEventList>
 80293e4:	4603      	mov	r3, r0
 80293e6:	2b00      	cmp	r3, #0
 80293e8:	d001      	beq.n	80293ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80293ea:	f000 ff17 	bl	802a21c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80293ee:	7bfb      	ldrb	r3, [r7, #15]
 80293f0:	3b01      	subs	r3, #1
 80293f2:	b2db      	uxtb	r3, r3
 80293f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80293f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80293fa:	2b00      	cmp	r3, #0
 80293fc:	dce9      	bgt.n	80293d2 <prvUnlockQueue+0x16>
 80293fe:	e000      	b.n	8029402 <prvUnlockQueue+0x46>
					break;
 8029400:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8029402:	687b      	ldr	r3, [r7, #4]
 8029404:	22ff      	movs	r2, #255	; 0xff
 8029406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 802940a:	f001 fdbb 	bl	802af84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 802940e:	f001 fd89 	bl	802af24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8029412:	687b      	ldr	r3, [r7, #4]
 8029414:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8029418:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 802941a:	e011      	b.n	8029440 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802941c:	687b      	ldr	r3, [r7, #4]
 802941e:	691b      	ldr	r3, [r3, #16]
 8029420:	2b00      	cmp	r3, #0
 8029422:	d012      	beq.n	802944a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8029424:	687b      	ldr	r3, [r7, #4]
 8029426:	3310      	adds	r3, #16
 8029428:	4618      	mov	r0, r3
 802942a:	f000 fe17 	bl	802a05c <xTaskRemoveFromEventList>
 802942e:	4603      	mov	r3, r0
 8029430:	2b00      	cmp	r3, #0
 8029432:	d001      	beq.n	8029438 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8029434:	f000 fef2 	bl	802a21c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8029438:	7bbb      	ldrb	r3, [r7, #14]
 802943a:	3b01      	subs	r3, #1
 802943c:	b2db      	uxtb	r3, r3
 802943e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8029440:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8029444:	2b00      	cmp	r3, #0
 8029446:	dce9      	bgt.n	802941c <prvUnlockQueue+0x60>
 8029448:	e000      	b.n	802944c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 802944a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 802944c:	687b      	ldr	r3, [r7, #4]
 802944e:	22ff      	movs	r2, #255	; 0xff
 8029450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8029454:	f001 fd96 	bl	802af84 <vPortExitCritical>
}
 8029458:	bf00      	nop
 802945a:	3710      	adds	r7, #16
 802945c:	46bd      	mov	sp, r7
 802945e:	bd80      	pop	{r7, pc}

08029460 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8029460:	b580      	push	{r7, lr}
 8029462:	b084      	sub	sp, #16
 8029464:	af00      	add	r7, sp, #0
 8029466:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8029468:	f001 fd5c 	bl	802af24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 802946c:	687b      	ldr	r3, [r7, #4]
 802946e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029470:	2b00      	cmp	r3, #0
 8029472:	d102      	bne.n	802947a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8029474:	2301      	movs	r3, #1
 8029476:	60fb      	str	r3, [r7, #12]
 8029478:	e001      	b.n	802947e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 802947a:	2300      	movs	r3, #0
 802947c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 802947e:	f001 fd81 	bl	802af84 <vPortExitCritical>

	return xReturn;
 8029482:	68fb      	ldr	r3, [r7, #12]
}
 8029484:	4618      	mov	r0, r3
 8029486:	3710      	adds	r7, #16
 8029488:	46bd      	mov	sp, r7
 802948a:	bd80      	pop	{r7, pc}

0802948c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 802948c:	b580      	push	{r7, lr}
 802948e:	b084      	sub	sp, #16
 8029490:	af00      	add	r7, sp, #0
 8029492:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8029494:	f001 fd46 	bl	802af24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8029498:	687b      	ldr	r3, [r7, #4]
 802949a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802949c:	687b      	ldr	r3, [r7, #4]
 802949e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80294a0:	429a      	cmp	r2, r3
 80294a2:	d102      	bne.n	80294aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80294a4:	2301      	movs	r3, #1
 80294a6:	60fb      	str	r3, [r7, #12]
 80294a8:	e001      	b.n	80294ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80294aa:	2300      	movs	r3, #0
 80294ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80294ae:	f001 fd69 	bl	802af84 <vPortExitCritical>

	return xReturn;
 80294b2:	68fb      	ldr	r3, [r7, #12]
}
 80294b4:	4618      	mov	r0, r3
 80294b6:	3710      	adds	r7, #16
 80294b8:	46bd      	mov	sp, r7
 80294ba:	bd80      	pop	{r7, pc}

080294bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80294bc:	b580      	push	{r7, lr}
 80294be:	b084      	sub	sp, #16
 80294c0:	af00      	add	r7, sp, #0
 80294c2:	6078      	str	r0, [r7, #4]
 80294c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80294c6:	2300      	movs	r3, #0
 80294c8:	60fb      	str	r3, [r7, #12]
 80294ca:	e01e      	b.n	802950a <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80294cc:	4a13      	ldr	r2, [pc, #76]	; (802951c <vQueueAddToRegistry+0x60>)
 80294ce:	68fb      	ldr	r3, [r7, #12]
 80294d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80294d4:	2b00      	cmp	r3, #0
 80294d6:	d115      	bne.n	8029504 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80294d8:	4910      	ldr	r1, [pc, #64]	; (802951c <vQueueAddToRegistry+0x60>)
 80294da:	68fb      	ldr	r3, [r7, #12]
 80294dc:	683a      	ldr	r2, [r7, #0]
 80294de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80294e2:	4a0e      	ldr	r2, [pc, #56]	; (802951c <vQueueAddToRegistry+0x60>)
 80294e4:	68fb      	ldr	r3, [r7, #12]
 80294e6:	00db      	lsls	r3, r3, #3
 80294e8:	4413      	add	r3, r2
 80294ea:	687a      	ldr	r2, [r7, #4]
 80294ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80294ee:	687b      	ldr	r3, [r7, #4]
 80294f0:	4618      	mov	r0, r3
 80294f2:	f003 fa73 	bl	802c9dc <SEGGER_SYSVIEW_ShrinkId>
 80294f6:	4601      	mov	r1, r0
 80294f8:	683b      	ldr	r3, [r7, #0]
 80294fa:	461a      	mov	r2, r3
 80294fc:	2071      	movs	r0, #113	; 0x71
 80294fe:	f002 fd61 	bl	802bfc4 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8029502:	e006      	b.n	8029512 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8029504:	68fb      	ldr	r3, [r7, #12]
 8029506:	3301      	adds	r3, #1
 8029508:	60fb      	str	r3, [r7, #12]
 802950a:	68fb      	ldr	r3, [r7, #12]
 802950c:	2b07      	cmp	r3, #7
 802950e:	d9dd      	bls.n	80294cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8029510:	bf00      	nop
 8029512:	bf00      	nop
 8029514:	3710      	adds	r7, #16
 8029516:	46bd      	mov	sp, r7
 8029518:	bd80      	pop	{r7, pc}
 802951a:	bf00      	nop
 802951c:	2001dee0 	.word	0x2001dee0

08029520 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8029520:	b580      	push	{r7, lr}
 8029522:	b086      	sub	sp, #24
 8029524:	af00      	add	r7, sp, #0
 8029526:	60f8      	str	r0, [r7, #12]
 8029528:	60b9      	str	r1, [r7, #8]
 802952a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 802952c:	68fb      	ldr	r3, [r7, #12]
 802952e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8029530:	f001 fcf8 	bl	802af24 <vPortEnterCritical>
 8029534:	697b      	ldr	r3, [r7, #20]
 8029536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802953a:	b25b      	sxtb	r3, r3
 802953c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029540:	d103      	bne.n	802954a <vQueueWaitForMessageRestricted+0x2a>
 8029542:	697b      	ldr	r3, [r7, #20]
 8029544:	2200      	movs	r2, #0
 8029546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802954a:	697b      	ldr	r3, [r7, #20]
 802954c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8029550:	b25b      	sxtb	r3, r3
 8029552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029556:	d103      	bne.n	8029560 <vQueueWaitForMessageRestricted+0x40>
 8029558:	697b      	ldr	r3, [r7, #20]
 802955a:	2200      	movs	r2, #0
 802955c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8029560:	f001 fd10 	bl	802af84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8029564:	697b      	ldr	r3, [r7, #20]
 8029566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029568:	2b00      	cmp	r3, #0
 802956a:	d106      	bne.n	802957a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 802956c:	697b      	ldr	r3, [r7, #20]
 802956e:	3324      	adds	r3, #36	; 0x24
 8029570:	687a      	ldr	r2, [r7, #4]
 8029572:	68b9      	ldr	r1, [r7, #8]
 8029574:	4618      	mov	r0, r3
 8029576:	f000 fd43 	bl	802a000 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 802957a:	6978      	ldr	r0, [r7, #20]
 802957c:	f7ff ff1e 	bl	80293bc <prvUnlockQueue>
	}
 8029580:	bf00      	nop
 8029582:	3718      	adds	r7, #24
 8029584:	46bd      	mov	sp, r7
 8029586:	bd80      	pop	{r7, pc}

08029588 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8029588:	b580      	push	{r7, lr}
 802958a:	b08e      	sub	sp, #56	; 0x38
 802958c:	af04      	add	r7, sp, #16
 802958e:	60f8      	str	r0, [r7, #12]
 8029590:	60b9      	str	r1, [r7, #8]
 8029592:	607a      	str	r2, [r7, #4]
 8029594:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8029596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029598:	2b00      	cmp	r3, #0
 802959a:	d10a      	bne.n	80295b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 802959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80295a0:	f383 8811 	msr	BASEPRI, r3
 80295a4:	f3bf 8f6f 	isb	sy
 80295a8:	f3bf 8f4f 	dsb	sy
 80295ac:	623b      	str	r3, [r7, #32]
}
 80295ae:	bf00      	nop
 80295b0:	e7fe      	b.n	80295b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80295b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80295b4:	2b00      	cmp	r3, #0
 80295b6:	d10a      	bne.n	80295ce <xTaskCreateStatic+0x46>
	__asm volatile
 80295b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80295bc:	f383 8811 	msr	BASEPRI, r3
 80295c0:	f3bf 8f6f 	isb	sy
 80295c4:	f3bf 8f4f 	dsb	sy
 80295c8:	61fb      	str	r3, [r7, #28]
}
 80295ca:	bf00      	nop
 80295cc:	e7fe      	b.n	80295cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80295ce:	23cc      	movs	r3, #204	; 0xcc
 80295d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80295d2:	693b      	ldr	r3, [r7, #16]
 80295d4:	2bcc      	cmp	r3, #204	; 0xcc
 80295d6:	d00a      	beq.n	80295ee <xTaskCreateStatic+0x66>
	__asm volatile
 80295d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80295dc:	f383 8811 	msr	BASEPRI, r3
 80295e0:	f3bf 8f6f 	isb	sy
 80295e4:	f3bf 8f4f 	dsb	sy
 80295e8:	61bb      	str	r3, [r7, #24]
}
 80295ea:	bf00      	nop
 80295ec:	e7fe      	b.n	80295ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80295ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80295f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80295f2:	2b00      	cmp	r3, #0
 80295f4:	d01e      	beq.n	8029634 <xTaskCreateStatic+0xac>
 80295f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80295f8:	2b00      	cmp	r3, #0
 80295fa:	d01b      	beq.n	8029634 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80295fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80295fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8029600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029604:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8029606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029608:	2202      	movs	r2, #2
 802960a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 802960e:	2300      	movs	r3, #0
 8029610:	9303      	str	r3, [sp, #12]
 8029612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029614:	9302      	str	r3, [sp, #8]
 8029616:	f107 0314 	add.w	r3, r7, #20
 802961a:	9301      	str	r3, [sp, #4]
 802961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802961e:	9300      	str	r3, [sp, #0]
 8029620:	683b      	ldr	r3, [r7, #0]
 8029622:	687a      	ldr	r2, [r7, #4]
 8029624:	68b9      	ldr	r1, [r7, #8]
 8029626:	68f8      	ldr	r0, [r7, #12]
 8029628:	f000 f850 	bl	80296cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 802962c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802962e:	f000 f8f3 	bl	8029818 <prvAddNewTaskToReadyList>
 8029632:	e001      	b.n	8029638 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8029634:	2300      	movs	r3, #0
 8029636:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8029638:	697b      	ldr	r3, [r7, #20]
	}
 802963a:	4618      	mov	r0, r3
 802963c:	3728      	adds	r7, #40	; 0x28
 802963e:	46bd      	mov	sp, r7
 8029640:	bd80      	pop	{r7, pc}

08029642 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8029642:	b580      	push	{r7, lr}
 8029644:	b08c      	sub	sp, #48	; 0x30
 8029646:	af04      	add	r7, sp, #16
 8029648:	60f8      	str	r0, [r7, #12]
 802964a:	60b9      	str	r1, [r7, #8]
 802964c:	603b      	str	r3, [r7, #0]
 802964e:	4613      	mov	r3, r2
 8029650:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8029652:	88fb      	ldrh	r3, [r7, #6]
 8029654:	009b      	lsls	r3, r3, #2
 8029656:	4618      	mov	r0, r3
 8029658:	f001 fd86 	bl	802b168 <pvPortMalloc>
 802965c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 802965e:	697b      	ldr	r3, [r7, #20]
 8029660:	2b00      	cmp	r3, #0
 8029662:	d00e      	beq.n	8029682 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8029664:	20cc      	movs	r0, #204	; 0xcc
 8029666:	f001 fd7f 	bl	802b168 <pvPortMalloc>
 802966a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 802966c:	69fb      	ldr	r3, [r7, #28]
 802966e:	2b00      	cmp	r3, #0
 8029670:	d003      	beq.n	802967a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8029672:	69fb      	ldr	r3, [r7, #28]
 8029674:	697a      	ldr	r2, [r7, #20]
 8029676:	631a      	str	r2, [r3, #48]	; 0x30
 8029678:	e005      	b.n	8029686 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 802967a:	6978      	ldr	r0, [r7, #20]
 802967c:	f001 fe40 	bl	802b300 <vPortFree>
 8029680:	e001      	b.n	8029686 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8029682:	2300      	movs	r3, #0
 8029684:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8029686:	69fb      	ldr	r3, [r7, #28]
 8029688:	2b00      	cmp	r3, #0
 802968a:	d017      	beq.n	80296bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 802968c:	69fb      	ldr	r3, [r7, #28]
 802968e:	2200      	movs	r2, #0
 8029690:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8029694:	88fa      	ldrh	r2, [r7, #6]
 8029696:	2300      	movs	r3, #0
 8029698:	9303      	str	r3, [sp, #12]
 802969a:	69fb      	ldr	r3, [r7, #28]
 802969c:	9302      	str	r3, [sp, #8]
 802969e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80296a0:	9301      	str	r3, [sp, #4]
 80296a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80296a4:	9300      	str	r3, [sp, #0]
 80296a6:	683b      	ldr	r3, [r7, #0]
 80296a8:	68b9      	ldr	r1, [r7, #8]
 80296aa:	68f8      	ldr	r0, [r7, #12]
 80296ac:	f000 f80e 	bl	80296cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80296b0:	69f8      	ldr	r0, [r7, #28]
 80296b2:	f000 f8b1 	bl	8029818 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80296b6:	2301      	movs	r3, #1
 80296b8:	61bb      	str	r3, [r7, #24]
 80296ba:	e002      	b.n	80296c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80296bc:	f04f 33ff 	mov.w	r3, #4294967295
 80296c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80296c2:	69bb      	ldr	r3, [r7, #24]
	}
 80296c4:	4618      	mov	r0, r3
 80296c6:	3720      	adds	r7, #32
 80296c8:	46bd      	mov	sp, r7
 80296ca:	bd80      	pop	{r7, pc}

080296cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80296cc:	b580      	push	{r7, lr}
 80296ce:	b088      	sub	sp, #32
 80296d0:	af00      	add	r7, sp, #0
 80296d2:	60f8      	str	r0, [r7, #12]
 80296d4:	60b9      	str	r1, [r7, #8]
 80296d6:	607a      	str	r2, [r7, #4]
 80296d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80296da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80296dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80296de:	687b      	ldr	r3, [r7, #4]
 80296e0:	009b      	lsls	r3, r3, #2
 80296e2:	461a      	mov	r2, r3
 80296e4:	21a5      	movs	r1, #165	; 0xa5
 80296e6:	f003 fb3b 	bl	802cd60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80296ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80296ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80296ee:	687b      	ldr	r3, [r7, #4]
 80296f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80296f4:	3b01      	subs	r3, #1
 80296f6:	009b      	lsls	r3, r3, #2
 80296f8:	4413      	add	r3, r2
 80296fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80296fc:	69bb      	ldr	r3, [r7, #24]
 80296fe:	f023 0307 	bic.w	r3, r3, #7
 8029702:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8029704:	69bb      	ldr	r3, [r7, #24]
 8029706:	f003 0307 	and.w	r3, r3, #7
 802970a:	2b00      	cmp	r3, #0
 802970c:	d00a      	beq.n	8029724 <prvInitialiseNewTask+0x58>
	__asm volatile
 802970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029712:	f383 8811 	msr	BASEPRI, r3
 8029716:	f3bf 8f6f 	isb	sy
 802971a:	f3bf 8f4f 	dsb	sy
 802971e:	617b      	str	r3, [r7, #20]
}
 8029720:	bf00      	nop
 8029722:	e7fe      	b.n	8029722 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8029724:	68bb      	ldr	r3, [r7, #8]
 8029726:	2b00      	cmp	r3, #0
 8029728:	d01f      	beq.n	802976a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802972a:	2300      	movs	r3, #0
 802972c:	61fb      	str	r3, [r7, #28]
 802972e:	e012      	b.n	8029756 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8029730:	68ba      	ldr	r2, [r7, #8]
 8029732:	69fb      	ldr	r3, [r7, #28]
 8029734:	4413      	add	r3, r2
 8029736:	7819      	ldrb	r1, [r3, #0]
 8029738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802973a:	69fb      	ldr	r3, [r7, #28]
 802973c:	4413      	add	r3, r2
 802973e:	3334      	adds	r3, #52	; 0x34
 8029740:	460a      	mov	r2, r1
 8029742:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8029744:	68ba      	ldr	r2, [r7, #8]
 8029746:	69fb      	ldr	r3, [r7, #28]
 8029748:	4413      	add	r3, r2
 802974a:	781b      	ldrb	r3, [r3, #0]
 802974c:	2b00      	cmp	r3, #0
 802974e:	d006      	beq.n	802975e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8029750:	69fb      	ldr	r3, [r7, #28]
 8029752:	3301      	adds	r3, #1
 8029754:	61fb      	str	r3, [r7, #28]
 8029756:	69fb      	ldr	r3, [r7, #28]
 8029758:	2b1f      	cmp	r3, #31
 802975a:	d9e9      	bls.n	8029730 <prvInitialiseNewTask+0x64>
 802975c:	e000      	b.n	8029760 <prvInitialiseNewTask+0x94>
			{
				break;
 802975e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8029760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029762:	2200      	movs	r2, #0
 8029764:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8029768:	e003      	b.n	8029772 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 802976a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802976c:	2200      	movs	r2, #0
 802976e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8029772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029774:	2b37      	cmp	r3, #55	; 0x37
 8029776:	d901      	bls.n	802977c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8029778:	2337      	movs	r3, #55	; 0x37
 802977a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 802977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802977e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8029780:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8029782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8029786:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8029788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802978a:	2200      	movs	r2, #0
 802978c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 802978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029790:	3304      	adds	r3, #4
 8029792:	4618      	mov	r0, r3
 8029794:	f7fe ffd0 	bl	8028738 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8029798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802979a:	3318      	adds	r3, #24
 802979c:	4618      	mov	r0, r3
 802979e:	f7fe ffcb 	bl	8028738 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80297a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80297a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80297a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80297a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80297aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80297ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80297b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80297b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80297b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80297b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80297b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80297ba:	2200      	movs	r2, #0
 80297bc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80297c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80297c2:	2200      	movs	r2, #0
 80297c4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80297c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80297ca:	3364      	adds	r3, #100	; 0x64
 80297cc:	2260      	movs	r2, #96	; 0x60
 80297ce:	2100      	movs	r1, #0
 80297d0:	4618      	mov	r0, r3
 80297d2:	f003 fac5 	bl	802cd60 <memset>
 80297d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80297d8:	4a0c      	ldr	r2, [pc, #48]	; (802980c <prvInitialiseNewTask+0x140>)
 80297da:	669a      	str	r2, [r3, #104]	; 0x68
 80297dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80297de:	4a0c      	ldr	r2, [pc, #48]	; (8029810 <prvInitialiseNewTask+0x144>)
 80297e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80297e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80297e4:	4a0b      	ldr	r2, [pc, #44]	; (8029814 <prvInitialiseNewTask+0x148>)
 80297e6:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80297e8:	683a      	ldr	r2, [r7, #0]
 80297ea:	68f9      	ldr	r1, [r7, #12]
 80297ec:	69b8      	ldr	r0, [r7, #24]
 80297ee:	f001 fa69 	bl	802acc4 <pxPortInitialiseStack>
 80297f2:	4602      	mov	r2, r0
 80297f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80297f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80297f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80297fa:	2b00      	cmp	r3, #0
 80297fc:	d002      	beq.n	8029804 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80297fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029802:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8029804:	bf00      	nop
 8029806:	3720      	adds	r7, #32
 8029808:	46bd      	mov	sp, r7
 802980a:	bd80      	pop	{r7, pc}
 802980c:	0802e0b4 	.word	0x0802e0b4
 8029810:	0802e0d4 	.word	0x0802e0d4
 8029814:	0802e094 	.word	0x0802e094

08029818 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8029818:	b5b0      	push	{r4, r5, r7, lr}
 802981a:	b084      	sub	sp, #16
 802981c:	af02      	add	r7, sp, #8
 802981e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8029820:	f001 fb80 	bl	802af24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8029824:	4b3c      	ldr	r3, [pc, #240]	; (8029918 <prvAddNewTaskToReadyList+0x100>)
 8029826:	681b      	ldr	r3, [r3, #0]
 8029828:	3301      	adds	r3, #1
 802982a:	4a3b      	ldr	r2, [pc, #236]	; (8029918 <prvAddNewTaskToReadyList+0x100>)
 802982c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 802982e:	4b3b      	ldr	r3, [pc, #236]	; (802991c <prvAddNewTaskToReadyList+0x104>)
 8029830:	681b      	ldr	r3, [r3, #0]
 8029832:	2b00      	cmp	r3, #0
 8029834:	d109      	bne.n	802984a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8029836:	4a39      	ldr	r2, [pc, #228]	; (802991c <prvAddNewTaskToReadyList+0x104>)
 8029838:	687b      	ldr	r3, [r7, #4]
 802983a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 802983c:	4b36      	ldr	r3, [pc, #216]	; (8029918 <prvAddNewTaskToReadyList+0x100>)
 802983e:	681b      	ldr	r3, [r3, #0]
 8029840:	2b01      	cmp	r3, #1
 8029842:	d110      	bne.n	8029866 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8029844:	f000 fd0e 	bl	802a264 <prvInitialiseTaskLists>
 8029848:	e00d      	b.n	8029866 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 802984a:	4b35      	ldr	r3, [pc, #212]	; (8029920 <prvAddNewTaskToReadyList+0x108>)
 802984c:	681b      	ldr	r3, [r3, #0]
 802984e:	2b00      	cmp	r3, #0
 8029850:	d109      	bne.n	8029866 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8029852:	4b32      	ldr	r3, [pc, #200]	; (802991c <prvAddNewTaskToReadyList+0x104>)
 8029854:	681b      	ldr	r3, [r3, #0]
 8029856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029858:	687b      	ldr	r3, [r7, #4]
 802985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802985c:	429a      	cmp	r2, r3
 802985e:	d802      	bhi.n	8029866 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8029860:	4a2e      	ldr	r2, [pc, #184]	; (802991c <prvAddNewTaskToReadyList+0x104>)
 8029862:	687b      	ldr	r3, [r7, #4]
 8029864:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8029866:	4b2f      	ldr	r3, [pc, #188]	; (8029924 <prvAddNewTaskToReadyList+0x10c>)
 8029868:	681b      	ldr	r3, [r3, #0]
 802986a:	3301      	adds	r3, #1
 802986c:	4a2d      	ldr	r2, [pc, #180]	; (8029924 <prvAddNewTaskToReadyList+0x10c>)
 802986e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8029870:	4b2c      	ldr	r3, [pc, #176]	; (8029924 <prvAddNewTaskToReadyList+0x10c>)
 8029872:	681a      	ldr	r2, [r3, #0]
 8029874:	687b      	ldr	r3, [r7, #4]
 8029876:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8029878:	687b      	ldr	r3, [r7, #4]
 802987a:	2b00      	cmp	r3, #0
 802987c:	d016      	beq.n	80298ac <prvAddNewTaskToReadyList+0x94>
 802987e:	687b      	ldr	r3, [r7, #4]
 8029880:	4618      	mov	r0, r3
 8029882:	f002 ffe5 	bl	802c850 <SEGGER_SYSVIEW_OnTaskCreate>
 8029886:	6878      	ldr	r0, [r7, #4]
 8029888:	687b      	ldr	r3, [r7, #4]
 802988a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 802988e:	687b      	ldr	r3, [r7, #4]
 8029890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029892:	687b      	ldr	r3, [r7, #4]
 8029894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029896:	461d      	mov	r5, r3
 8029898:	687b      	ldr	r3, [r7, #4]
 802989a:	681b      	ldr	r3, [r3, #0]
 802989c:	461c      	mov	r4, r3
 802989e:	687b      	ldr	r3, [r7, #4]
 80298a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80298a2:	1ae3      	subs	r3, r4, r3
 80298a4:	9300      	str	r3, [sp, #0]
 80298a6:	462b      	mov	r3, r5
 80298a8:	f7eb fa52 	bl	8014d50 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80298ac:	687b      	ldr	r3, [r7, #4]
 80298ae:	4618      	mov	r0, r3
 80298b0:	f003 f852 	bl	802c958 <SEGGER_SYSVIEW_OnTaskStartReady>
 80298b4:	687b      	ldr	r3, [r7, #4]
 80298b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80298b8:	4b1b      	ldr	r3, [pc, #108]	; (8029928 <prvAddNewTaskToReadyList+0x110>)
 80298ba:	681b      	ldr	r3, [r3, #0]
 80298bc:	429a      	cmp	r2, r3
 80298be:	d903      	bls.n	80298c8 <prvAddNewTaskToReadyList+0xb0>
 80298c0:	687b      	ldr	r3, [r7, #4]
 80298c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80298c4:	4a18      	ldr	r2, [pc, #96]	; (8029928 <prvAddNewTaskToReadyList+0x110>)
 80298c6:	6013      	str	r3, [r2, #0]
 80298c8:	687b      	ldr	r3, [r7, #4]
 80298ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80298cc:	4613      	mov	r3, r2
 80298ce:	009b      	lsls	r3, r3, #2
 80298d0:	4413      	add	r3, r2
 80298d2:	009b      	lsls	r3, r3, #2
 80298d4:	4a15      	ldr	r2, [pc, #84]	; (802992c <prvAddNewTaskToReadyList+0x114>)
 80298d6:	441a      	add	r2, r3
 80298d8:	687b      	ldr	r3, [r7, #4]
 80298da:	3304      	adds	r3, #4
 80298dc:	4619      	mov	r1, r3
 80298de:	4610      	mov	r0, r2
 80298e0:	f7fe ff37 	bl	8028752 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80298e4:	f001 fb4e 	bl	802af84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80298e8:	4b0d      	ldr	r3, [pc, #52]	; (8029920 <prvAddNewTaskToReadyList+0x108>)
 80298ea:	681b      	ldr	r3, [r3, #0]
 80298ec:	2b00      	cmp	r3, #0
 80298ee:	d00e      	beq.n	802990e <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80298f0:	4b0a      	ldr	r3, [pc, #40]	; (802991c <prvAddNewTaskToReadyList+0x104>)
 80298f2:	681b      	ldr	r3, [r3, #0]
 80298f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80298f6:	687b      	ldr	r3, [r7, #4]
 80298f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80298fa:	429a      	cmp	r2, r3
 80298fc:	d207      	bcs.n	802990e <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80298fe:	4b0c      	ldr	r3, [pc, #48]	; (8029930 <prvAddNewTaskToReadyList+0x118>)
 8029900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8029904:	601a      	str	r2, [r3, #0]
 8029906:	f3bf 8f4f 	dsb	sy
 802990a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802990e:	bf00      	nop
 8029910:	3708      	adds	r7, #8
 8029912:	46bd      	mov	sp, r7
 8029914:	bdb0      	pop	{r4, r5, r7, pc}
 8029916:	bf00      	nop
 8029918:	20001710 	.word	0x20001710
 802991c:	2000123c 	.word	0x2000123c
 8029920:	2000171c 	.word	0x2000171c
 8029924:	2000172c 	.word	0x2000172c
 8029928:	20001718 	.word	0x20001718
 802992c:	20001240 	.word	0x20001240
 8029930:	e000ed04 	.word	0xe000ed04

08029934 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8029934:	b580      	push	{r7, lr}
 8029936:	b08a      	sub	sp, #40	; 0x28
 8029938:	af00      	add	r7, sp, #0
 802993a:	6078      	str	r0, [r7, #4]
 802993c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 802993e:	2300      	movs	r3, #0
 8029940:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8029942:	687b      	ldr	r3, [r7, #4]
 8029944:	2b00      	cmp	r3, #0
 8029946:	d10a      	bne.n	802995e <vTaskDelayUntil+0x2a>
	__asm volatile
 8029948:	f04f 0350 	mov.w	r3, #80	; 0x50
 802994c:	f383 8811 	msr	BASEPRI, r3
 8029950:	f3bf 8f6f 	isb	sy
 8029954:	f3bf 8f4f 	dsb	sy
 8029958:	617b      	str	r3, [r7, #20]
}
 802995a:	bf00      	nop
 802995c:	e7fe      	b.n	802995c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 802995e:	683b      	ldr	r3, [r7, #0]
 8029960:	2b00      	cmp	r3, #0
 8029962:	d10a      	bne.n	802997a <vTaskDelayUntil+0x46>
	__asm volatile
 8029964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029968:	f383 8811 	msr	BASEPRI, r3
 802996c:	f3bf 8f6f 	isb	sy
 8029970:	f3bf 8f4f 	dsb	sy
 8029974:	613b      	str	r3, [r7, #16]
}
 8029976:	bf00      	nop
 8029978:	e7fe      	b.n	8029978 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 802997a:	4b2b      	ldr	r3, [pc, #172]	; (8029a28 <vTaskDelayUntil+0xf4>)
 802997c:	681b      	ldr	r3, [r3, #0]
 802997e:	2b00      	cmp	r3, #0
 8029980:	d00a      	beq.n	8029998 <vTaskDelayUntil+0x64>
	__asm volatile
 8029982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029986:	f383 8811 	msr	BASEPRI, r3
 802998a:	f3bf 8f6f 	isb	sy
 802998e:	f3bf 8f4f 	dsb	sy
 8029992:	60fb      	str	r3, [r7, #12]
}
 8029994:	bf00      	nop
 8029996:	e7fe      	b.n	8029996 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8029998:	f000 f906 	bl	8029ba8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 802999c:	4b23      	ldr	r3, [pc, #140]	; (8029a2c <vTaskDelayUntil+0xf8>)
 802999e:	681b      	ldr	r3, [r3, #0]
 80299a0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80299a2:	687b      	ldr	r3, [r7, #4]
 80299a4:	681b      	ldr	r3, [r3, #0]
 80299a6:	683a      	ldr	r2, [r7, #0]
 80299a8:	4413      	add	r3, r2
 80299aa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80299ac:	687b      	ldr	r3, [r7, #4]
 80299ae:	681b      	ldr	r3, [r3, #0]
 80299b0:	6a3a      	ldr	r2, [r7, #32]
 80299b2:	429a      	cmp	r2, r3
 80299b4:	d20b      	bcs.n	80299ce <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80299b6:	687b      	ldr	r3, [r7, #4]
 80299b8:	681b      	ldr	r3, [r3, #0]
 80299ba:	69fa      	ldr	r2, [r7, #28]
 80299bc:	429a      	cmp	r2, r3
 80299be:	d211      	bcs.n	80299e4 <vTaskDelayUntil+0xb0>
 80299c0:	69fa      	ldr	r2, [r7, #28]
 80299c2:	6a3b      	ldr	r3, [r7, #32]
 80299c4:	429a      	cmp	r2, r3
 80299c6:	d90d      	bls.n	80299e4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80299c8:	2301      	movs	r3, #1
 80299ca:	627b      	str	r3, [r7, #36]	; 0x24
 80299cc:	e00a      	b.n	80299e4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80299ce:	687b      	ldr	r3, [r7, #4]
 80299d0:	681b      	ldr	r3, [r3, #0]
 80299d2:	69fa      	ldr	r2, [r7, #28]
 80299d4:	429a      	cmp	r2, r3
 80299d6:	d303      	bcc.n	80299e0 <vTaskDelayUntil+0xac>
 80299d8:	69fa      	ldr	r2, [r7, #28]
 80299da:	6a3b      	ldr	r3, [r7, #32]
 80299dc:	429a      	cmp	r2, r3
 80299de:	d901      	bls.n	80299e4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80299e0:	2301      	movs	r3, #1
 80299e2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80299e4:	687b      	ldr	r3, [r7, #4]
 80299e6:	69fa      	ldr	r2, [r7, #28]
 80299e8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80299ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80299ec:	2b00      	cmp	r3, #0
 80299ee:	d009      	beq.n	8029a04 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 80299f0:	2024      	movs	r0, #36	; 0x24
 80299f2:	f002 fa8d 	bl	802bf10 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80299f6:	69fa      	ldr	r2, [r7, #28]
 80299f8:	6a3b      	ldr	r3, [r7, #32]
 80299fa:	1ad3      	subs	r3, r2, r3
 80299fc:	2100      	movs	r1, #0
 80299fe:	4618      	mov	r0, r3
 8029a00:	f000 fdbe 	bl	802a580 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8029a04:	f000 f8de 	bl	8029bc4 <xTaskResumeAll>
 8029a08:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8029a0a:	69bb      	ldr	r3, [r7, #24]
 8029a0c:	2b00      	cmp	r3, #0
 8029a0e:	d107      	bne.n	8029a20 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8029a10:	4b07      	ldr	r3, [pc, #28]	; (8029a30 <vTaskDelayUntil+0xfc>)
 8029a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8029a16:	601a      	str	r2, [r3, #0]
 8029a18:	f3bf 8f4f 	dsb	sy
 8029a1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8029a20:	bf00      	nop
 8029a22:	3728      	adds	r7, #40	; 0x28
 8029a24:	46bd      	mov	sp, r7
 8029a26:	bd80      	pop	{r7, pc}
 8029a28:	20001738 	.word	0x20001738
 8029a2c:	20001714 	.word	0x20001714
 8029a30:	e000ed04 	.word	0xe000ed04

08029a34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8029a34:	b580      	push	{r7, lr}
 8029a36:	b084      	sub	sp, #16
 8029a38:	af00      	add	r7, sp, #0
 8029a3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8029a3c:	2300      	movs	r3, #0
 8029a3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8029a40:	687b      	ldr	r3, [r7, #4]
 8029a42:	2b00      	cmp	r3, #0
 8029a44:	d01b      	beq.n	8029a7e <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8029a46:	4b15      	ldr	r3, [pc, #84]	; (8029a9c <vTaskDelay+0x68>)
 8029a48:	681b      	ldr	r3, [r3, #0]
 8029a4a:	2b00      	cmp	r3, #0
 8029a4c:	d00a      	beq.n	8029a64 <vTaskDelay+0x30>
	__asm volatile
 8029a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029a52:	f383 8811 	msr	BASEPRI, r3
 8029a56:	f3bf 8f6f 	isb	sy
 8029a5a:	f3bf 8f4f 	dsb	sy
 8029a5e:	60bb      	str	r3, [r7, #8]
}
 8029a60:	bf00      	nop
 8029a62:	e7fe      	b.n	8029a62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8029a64:	f000 f8a0 	bl	8029ba8 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8029a68:	6879      	ldr	r1, [r7, #4]
 8029a6a:	2023      	movs	r0, #35	; 0x23
 8029a6c:	f002 fa6e 	bl	802bf4c <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8029a70:	2100      	movs	r1, #0
 8029a72:	6878      	ldr	r0, [r7, #4]
 8029a74:	f000 fd84 	bl	802a580 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8029a78:	f000 f8a4 	bl	8029bc4 <xTaskResumeAll>
 8029a7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8029a7e:	68fb      	ldr	r3, [r7, #12]
 8029a80:	2b00      	cmp	r3, #0
 8029a82:	d107      	bne.n	8029a94 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8029a84:	4b06      	ldr	r3, [pc, #24]	; (8029aa0 <vTaskDelay+0x6c>)
 8029a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8029a8a:	601a      	str	r2, [r3, #0]
 8029a8c:	f3bf 8f4f 	dsb	sy
 8029a90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8029a94:	bf00      	nop
 8029a96:	3710      	adds	r7, #16
 8029a98:	46bd      	mov	sp, r7
 8029a9a:	bd80      	pop	{r7, pc}
 8029a9c:	20001738 	.word	0x20001738
 8029aa0:	e000ed04 	.word	0xe000ed04

08029aa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8029aa4:	b580      	push	{r7, lr}
 8029aa6:	b08a      	sub	sp, #40	; 0x28
 8029aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8029aaa:	2300      	movs	r3, #0
 8029aac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8029aae:	2300      	movs	r3, #0
 8029ab0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8029ab2:	463a      	mov	r2, r7
 8029ab4:	1d39      	adds	r1, r7, #4
 8029ab6:	f107 0308 	add.w	r3, r7, #8
 8029aba:	4618      	mov	r0, r3
 8029abc:	f7fe fde8 	bl	8028690 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8029ac0:	6839      	ldr	r1, [r7, #0]
 8029ac2:	687b      	ldr	r3, [r7, #4]
 8029ac4:	68ba      	ldr	r2, [r7, #8]
 8029ac6:	9202      	str	r2, [sp, #8]
 8029ac8:	9301      	str	r3, [sp, #4]
 8029aca:	2300      	movs	r3, #0
 8029acc:	9300      	str	r3, [sp, #0]
 8029ace:	2300      	movs	r3, #0
 8029ad0:	460a      	mov	r2, r1
 8029ad2:	492d      	ldr	r1, [pc, #180]	; (8029b88 <vTaskStartScheduler+0xe4>)
 8029ad4:	482d      	ldr	r0, [pc, #180]	; (8029b8c <vTaskStartScheduler+0xe8>)
 8029ad6:	f7ff fd57 	bl	8029588 <xTaskCreateStatic>
 8029ada:	4603      	mov	r3, r0
 8029adc:	4a2c      	ldr	r2, [pc, #176]	; (8029b90 <vTaskStartScheduler+0xec>)
 8029ade:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8029ae0:	4b2b      	ldr	r3, [pc, #172]	; (8029b90 <vTaskStartScheduler+0xec>)
 8029ae2:	681b      	ldr	r3, [r3, #0]
 8029ae4:	2b00      	cmp	r3, #0
 8029ae6:	d002      	beq.n	8029aee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8029ae8:	2301      	movs	r3, #1
 8029aea:	617b      	str	r3, [r7, #20]
 8029aec:	e001      	b.n	8029af2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8029aee:	2300      	movs	r3, #0
 8029af0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8029af2:	697b      	ldr	r3, [r7, #20]
 8029af4:	2b01      	cmp	r3, #1
 8029af6:	d102      	bne.n	8029afe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8029af8:	f000 fd96 	bl	802a628 <xTimerCreateTimerTask>
 8029afc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8029afe:	697b      	ldr	r3, [r7, #20]
 8029b00:	2b01      	cmp	r3, #1
 8029b02:	d12e      	bne.n	8029b62 <vTaskStartScheduler+0xbe>
	__asm volatile
 8029b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029b08:	f383 8811 	msr	BASEPRI, r3
 8029b0c:	f3bf 8f6f 	isb	sy
 8029b10:	f3bf 8f4f 	dsb	sy
 8029b14:	613b      	str	r3, [r7, #16]
}
 8029b16:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8029b18:	4b1e      	ldr	r3, [pc, #120]	; (8029b94 <vTaskStartScheduler+0xf0>)
 8029b1a:	681b      	ldr	r3, [r3, #0]
 8029b1c:	3364      	adds	r3, #100	; 0x64
 8029b1e:	4a1e      	ldr	r2, [pc, #120]	; (8029b98 <vTaskStartScheduler+0xf4>)
 8029b20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8029b22:	4b1e      	ldr	r3, [pc, #120]	; (8029b9c <vTaskStartScheduler+0xf8>)
 8029b24:	f04f 32ff 	mov.w	r2, #4294967295
 8029b28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8029b2a:	4b1d      	ldr	r3, [pc, #116]	; (8029ba0 <vTaskStartScheduler+0xfc>)
 8029b2c:	2201      	movs	r2, #1
 8029b2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8029b30:	4b1c      	ldr	r3, [pc, #112]	; (8029ba4 <vTaskStartScheduler+0x100>)
 8029b32:	2200      	movs	r2, #0
 8029b34:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8029b36:	4b17      	ldr	r3, [pc, #92]	; (8029b94 <vTaskStartScheduler+0xf0>)
 8029b38:	681b      	ldr	r3, [r3, #0]
 8029b3a:	3334      	adds	r3, #52	; 0x34
 8029b3c:	2205      	movs	r2, #5
 8029b3e:	4912      	ldr	r1, [pc, #72]	; (8029b88 <vTaskStartScheduler+0xe4>)
 8029b40:	4618      	mov	r0, r3
 8029b42:	f003 f8f1 	bl	802cd28 <memcmp>
 8029b46:	4603      	mov	r3, r0
 8029b48:	2b00      	cmp	r3, #0
 8029b4a:	d005      	beq.n	8029b58 <vTaskStartScheduler+0xb4>
 8029b4c:	4b11      	ldr	r3, [pc, #68]	; (8029b94 <vTaskStartScheduler+0xf0>)
 8029b4e:	681b      	ldr	r3, [r3, #0]
 8029b50:	4618      	mov	r0, r3
 8029b52:	f002 febf 	bl	802c8d4 <SEGGER_SYSVIEW_OnTaskStartExec>
 8029b56:	e001      	b.n	8029b5c <vTaskStartScheduler+0xb8>
 8029b58:	f002 fe5e 	bl	802c818 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8029b5c:	f001 f940 	bl	802ade0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8029b60:	e00e      	b.n	8029b80 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8029b62:	697b      	ldr	r3, [r7, #20]
 8029b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029b68:	d10a      	bne.n	8029b80 <vTaskStartScheduler+0xdc>
	__asm volatile
 8029b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029b6e:	f383 8811 	msr	BASEPRI, r3
 8029b72:	f3bf 8f6f 	isb	sy
 8029b76:	f3bf 8f4f 	dsb	sy
 8029b7a:	60fb      	str	r3, [r7, #12]
}
 8029b7c:	bf00      	nop
 8029b7e:	e7fe      	b.n	8029b7e <vTaskStartScheduler+0xda>
}
 8029b80:	bf00      	nop
 8029b82:	3718      	adds	r7, #24
 8029b84:	46bd      	mov	sp, r7
 8029b86:	bd80      	pop	{r7, pc}
 8029b88:	0802daa0 	.word	0x0802daa0
 8029b8c:	0802a235 	.word	0x0802a235
 8029b90:	20001734 	.word	0x20001734
 8029b94:	2000123c 	.word	0x2000123c
 8029b98:	2000036c 	.word	0x2000036c
 8029b9c:	20001730 	.word	0x20001730
 8029ba0:	2000171c 	.word	0x2000171c
 8029ba4:	20001714 	.word	0x20001714

08029ba8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8029ba8:	b480      	push	{r7}
 8029baa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8029bac:	4b04      	ldr	r3, [pc, #16]	; (8029bc0 <vTaskSuspendAll+0x18>)
 8029bae:	681b      	ldr	r3, [r3, #0]
 8029bb0:	3301      	adds	r3, #1
 8029bb2:	4a03      	ldr	r2, [pc, #12]	; (8029bc0 <vTaskSuspendAll+0x18>)
 8029bb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8029bb6:	bf00      	nop
 8029bb8:	46bd      	mov	sp, r7
 8029bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bbe:	4770      	bx	lr
 8029bc0:	20001738 	.word	0x20001738

08029bc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8029bc4:	b580      	push	{r7, lr}
 8029bc6:	b084      	sub	sp, #16
 8029bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8029bca:	2300      	movs	r3, #0
 8029bcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8029bce:	2300      	movs	r3, #0
 8029bd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8029bd2:	4b44      	ldr	r3, [pc, #272]	; (8029ce4 <xTaskResumeAll+0x120>)
 8029bd4:	681b      	ldr	r3, [r3, #0]
 8029bd6:	2b00      	cmp	r3, #0
 8029bd8:	d10a      	bne.n	8029bf0 <xTaskResumeAll+0x2c>
	__asm volatile
 8029bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029bde:	f383 8811 	msr	BASEPRI, r3
 8029be2:	f3bf 8f6f 	isb	sy
 8029be6:	f3bf 8f4f 	dsb	sy
 8029bea:	603b      	str	r3, [r7, #0]
}
 8029bec:	bf00      	nop
 8029bee:	e7fe      	b.n	8029bee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8029bf0:	f001 f998 	bl	802af24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8029bf4:	4b3b      	ldr	r3, [pc, #236]	; (8029ce4 <xTaskResumeAll+0x120>)
 8029bf6:	681b      	ldr	r3, [r3, #0]
 8029bf8:	3b01      	subs	r3, #1
 8029bfa:	4a3a      	ldr	r2, [pc, #232]	; (8029ce4 <xTaskResumeAll+0x120>)
 8029bfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8029bfe:	4b39      	ldr	r3, [pc, #228]	; (8029ce4 <xTaskResumeAll+0x120>)
 8029c00:	681b      	ldr	r3, [r3, #0]
 8029c02:	2b00      	cmp	r3, #0
 8029c04:	d166      	bne.n	8029cd4 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8029c06:	4b38      	ldr	r3, [pc, #224]	; (8029ce8 <xTaskResumeAll+0x124>)
 8029c08:	681b      	ldr	r3, [r3, #0]
 8029c0a:	2b00      	cmp	r3, #0
 8029c0c:	d062      	beq.n	8029cd4 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8029c0e:	e033      	b.n	8029c78 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8029c10:	4b36      	ldr	r3, [pc, #216]	; (8029cec <xTaskResumeAll+0x128>)
 8029c12:	68db      	ldr	r3, [r3, #12]
 8029c14:	68db      	ldr	r3, [r3, #12]
 8029c16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8029c18:	68fb      	ldr	r3, [r7, #12]
 8029c1a:	3318      	adds	r3, #24
 8029c1c:	4618      	mov	r0, r3
 8029c1e:	f7fe fdf5 	bl	802880c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8029c22:	68fb      	ldr	r3, [r7, #12]
 8029c24:	3304      	adds	r3, #4
 8029c26:	4618      	mov	r0, r3
 8029c28:	f7fe fdf0 	bl	802880c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8029c2c:	68fb      	ldr	r3, [r7, #12]
 8029c2e:	4618      	mov	r0, r3
 8029c30:	f002 fe92 	bl	802c958 <SEGGER_SYSVIEW_OnTaskStartReady>
 8029c34:	68fb      	ldr	r3, [r7, #12]
 8029c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029c38:	4b2d      	ldr	r3, [pc, #180]	; (8029cf0 <xTaskResumeAll+0x12c>)
 8029c3a:	681b      	ldr	r3, [r3, #0]
 8029c3c:	429a      	cmp	r2, r3
 8029c3e:	d903      	bls.n	8029c48 <xTaskResumeAll+0x84>
 8029c40:	68fb      	ldr	r3, [r7, #12]
 8029c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029c44:	4a2a      	ldr	r2, [pc, #168]	; (8029cf0 <xTaskResumeAll+0x12c>)
 8029c46:	6013      	str	r3, [r2, #0]
 8029c48:	68fb      	ldr	r3, [r7, #12]
 8029c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029c4c:	4613      	mov	r3, r2
 8029c4e:	009b      	lsls	r3, r3, #2
 8029c50:	4413      	add	r3, r2
 8029c52:	009b      	lsls	r3, r3, #2
 8029c54:	4a27      	ldr	r2, [pc, #156]	; (8029cf4 <xTaskResumeAll+0x130>)
 8029c56:	441a      	add	r2, r3
 8029c58:	68fb      	ldr	r3, [r7, #12]
 8029c5a:	3304      	adds	r3, #4
 8029c5c:	4619      	mov	r1, r3
 8029c5e:	4610      	mov	r0, r2
 8029c60:	f7fe fd77 	bl	8028752 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8029c64:	68fb      	ldr	r3, [r7, #12]
 8029c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029c68:	4b23      	ldr	r3, [pc, #140]	; (8029cf8 <xTaskResumeAll+0x134>)
 8029c6a:	681b      	ldr	r3, [r3, #0]
 8029c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029c6e:	429a      	cmp	r2, r3
 8029c70:	d302      	bcc.n	8029c78 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8029c72:	4b22      	ldr	r3, [pc, #136]	; (8029cfc <xTaskResumeAll+0x138>)
 8029c74:	2201      	movs	r2, #1
 8029c76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8029c78:	4b1c      	ldr	r3, [pc, #112]	; (8029cec <xTaskResumeAll+0x128>)
 8029c7a:	681b      	ldr	r3, [r3, #0]
 8029c7c:	2b00      	cmp	r3, #0
 8029c7e:	d1c7      	bne.n	8029c10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8029c80:	68fb      	ldr	r3, [r7, #12]
 8029c82:	2b00      	cmp	r3, #0
 8029c84:	d001      	beq.n	8029c8a <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8029c86:	f000 fbc7 	bl	802a418 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8029c8a:	4b1d      	ldr	r3, [pc, #116]	; (8029d00 <xTaskResumeAll+0x13c>)
 8029c8c:	681b      	ldr	r3, [r3, #0]
 8029c8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8029c90:	687b      	ldr	r3, [r7, #4]
 8029c92:	2b00      	cmp	r3, #0
 8029c94:	d010      	beq.n	8029cb8 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8029c96:	f000 f859 	bl	8029d4c <xTaskIncrementTick>
 8029c9a:	4603      	mov	r3, r0
 8029c9c:	2b00      	cmp	r3, #0
 8029c9e:	d002      	beq.n	8029ca6 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8029ca0:	4b16      	ldr	r3, [pc, #88]	; (8029cfc <xTaskResumeAll+0x138>)
 8029ca2:	2201      	movs	r2, #1
 8029ca4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8029ca6:	687b      	ldr	r3, [r7, #4]
 8029ca8:	3b01      	subs	r3, #1
 8029caa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8029cac:	687b      	ldr	r3, [r7, #4]
 8029cae:	2b00      	cmp	r3, #0
 8029cb0:	d1f1      	bne.n	8029c96 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8029cb2:	4b13      	ldr	r3, [pc, #76]	; (8029d00 <xTaskResumeAll+0x13c>)
 8029cb4:	2200      	movs	r2, #0
 8029cb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8029cb8:	4b10      	ldr	r3, [pc, #64]	; (8029cfc <xTaskResumeAll+0x138>)
 8029cba:	681b      	ldr	r3, [r3, #0]
 8029cbc:	2b00      	cmp	r3, #0
 8029cbe:	d009      	beq.n	8029cd4 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8029cc0:	2301      	movs	r3, #1
 8029cc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8029cc4:	4b0f      	ldr	r3, [pc, #60]	; (8029d04 <xTaskResumeAll+0x140>)
 8029cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8029cca:	601a      	str	r2, [r3, #0]
 8029ccc:	f3bf 8f4f 	dsb	sy
 8029cd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8029cd4:	f001 f956 	bl	802af84 <vPortExitCritical>

	return xAlreadyYielded;
 8029cd8:	68bb      	ldr	r3, [r7, #8]
}
 8029cda:	4618      	mov	r0, r3
 8029cdc:	3710      	adds	r7, #16
 8029cde:	46bd      	mov	sp, r7
 8029ce0:	bd80      	pop	{r7, pc}
 8029ce2:	bf00      	nop
 8029ce4:	20001738 	.word	0x20001738
 8029ce8:	20001710 	.word	0x20001710
 8029cec:	200016d0 	.word	0x200016d0
 8029cf0:	20001718 	.word	0x20001718
 8029cf4:	20001240 	.word	0x20001240
 8029cf8:	2000123c 	.word	0x2000123c
 8029cfc:	20001724 	.word	0x20001724
 8029d00:	20001720 	.word	0x20001720
 8029d04:	e000ed04 	.word	0xe000ed04

08029d08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8029d08:	b480      	push	{r7}
 8029d0a:	b083      	sub	sp, #12
 8029d0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8029d0e:	4b05      	ldr	r3, [pc, #20]	; (8029d24 <xTaskGetTickCount+0x1c>)
 8029d10:	681b      	ldr	r3, [r3, #0]
 8029d12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8029d14:	687b      	ldr	r3, [r7, #4]
}
 8029d16:	4618      	mov	r0, r3
 8029d18:	370c      	adds	r7, #12
 8029d1a:	46bd      	mov	sp, r7
 8029d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d20:	4770      	bx	lr
 8029d22:	bf00      	nop
 8029d24:	20001714 	.word	0x20001714

08029d28 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8029d28:	b580      	push	{r7, lr}
 8029d2a:	b082      	sub	sp, #8
 8029d2c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8029d2e:	f001 f9db 	bl	802b0e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8029d32:	2300      	movs	r3, #0
 8029d34:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8029d36:	4b04      	ldr	r3, [pc, #16]	; (8029d48 <xTaskGetTickCountFromISR+0x20>)
 8029d38:	681b      	ldr	r3, [r3, #0]
 8029d3a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8029d3c:	683b      	ldr	r3, [r7, #0]
}
 8029d3e:	4618      	mov	r0, r3
 8029d40:	3708      	adds	r7, #8
 8029d42:	46bd      	mov	sp, r7
 8029d44:	bd80      	pop	{r7, pc}
 8029d46:	bf00      	nop
 8029d48:	20001714 	.word	0x20001714

08029d4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8029d4c:	b580      	push	{r7, lr}
 8029d4e:	b086      	sub	sp, #24
 8029d50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8029d52:	2300      	movs	r3, #0
 8029d54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8029d56:	4b51      	ldr	r3, [pc, #324]	; (8029e9c <xTaskIncrementTick+0x150>)
 8029d58:	681b      	ldr	r3, [r3, #0]
 8029d5a:	2b00      	cmp	r3, #0
 8029d5c:	f040 8093 	bne.w	8029e86 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8029d60:	4b4f      	ldr	r3, [pc, #316]	; (8029ea0 <xTaskIncrementTick+0x154>)
 8029d62:	681b      	ldr	r3, [r3, #0]
 8029d64:	3301      	adds	r3, #1
 8029d66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8029d68:	4a4d      	ldr	r2, [pc, #308]	; (8029ea0 <xTaskIncrementTick+0x154>)
 8029d6a:	693b      	ldr	r3, [r7, #16]
 8029d6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8029d6e:	693b      	ldr	r3, [r7, #16]
 8029d70:	2b00      	cmp	r3, #0
 8029d72:	d120      	bne.n	8029db6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8029d74:	4b4b      	ldr	r3, [pc, #300]	; (8029ea4 <xTaskIncrementTick+0x158>)
 8029d76:	681b      	ldr	r3, [r3, #0]
 8029d78:	681b      	ldr	r3, [r3, #0]
 8029d7a:	2b00      	cmp	r3, #0
 8029d7c:	d00a      	beq.n	8029d94 <xTaskIncrementTick+0x48>
	__asm volatile
 8029d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029d82:	f383 8811 	msr	BASEPRI, r3
 8029d86:	f3bf 8f6f 	isb	sy
 8029d8a:	f3bf 8f4f 	dsb	sy
 8029d8e:	603b      	str	r3, [r7, #0]
}
 8029d90:	bf00      	nop
 8029d92:	e7fe      	b.n	8029d92 <xTaskIncrementTick+0x46>
 8029d94:	4b43      	ldr	r3, [pc, #268]	; (8029ea4 <xTaskIncrementTick+0x158>)
 8029d96:	681b      	ldr	r3, [r3, #0]
 8029d98:	60fb      	str	r3, [r7, #12]
 8029d9a:	4b43      	ldr	r3, [pc, #268]	; (8029ea8 <xTaskIncrementTick+0x15c>)
 8029d9c:	681b      	ldr	r3, [r3, #0]
 8029d9e:	4a41      	ldr	r2, [pc, #260]	; (8029ea4 <xTaskIncrementTick+0x158>)
 8029da0:	6013      	str	r3, [r2, #0]
 8029da2:	4a41      	ldr	r2, [pc, #260]	; (8029ea8 <xTaskIncrementTick+0x15c>)
 8029da4:	68fb      	ldr	r3, [r7, #12]
 8029da6:	6013      	str	r3, [r2, #0]
 8029da8:	4b40      	ldr	r3, [pc, #256]	; (8029eac <xTaskIncrementTick+0x160>)
 8029daa:	681b      	ldr	r3, [r3, #0]
 8029dac:	3301      	adds	r3, #1
 8029dae:	4a3f      	ldr	r2, [pc, #252]	; (8029eac <xTaskIncrementTick+0x160>)
 8029db0:	6013      	str	r3, [r2, #0]
 8029db2:	f000 fb31 	bl	802a418 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8029db6:	4b3e      	ldr	r3, [pc, #248]	; (8029eb0 <xTaskIncrementTick+0x164>)
 8029db8:	681b      	ldr	r3, [r3, #0]
 8029dba:	693a      	ldr	r2, [r7, #16]
 8029dbc:	429a      	cmp	r2, r3
 8029dbe:	d34d      	bcc.n	8029e5c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8029dc0:	4b38      	ldr	r3, [pc, #224]	; (8029ea4 <xTaskIncrementTick+0x158>)
 8029dc2:	681b      	ldr	r3, [r3, #0]
 8029dc4:	681b      	ldr	r3, [r3, #0]
 8029dc6:	2b00      	cmp	r3, #0
 8029dc8:	d104      	bne.n	8029dd4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8029dca:	4b39      	ldr	r3, [pc, #228]	; (8029eb0 <xTaskIncrementTick+0x164>)
 8029dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8029dd0:	601a      	str	r2, [r3, #0]
					break;
 8029dd2:	e043      	b.n	8029e5c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8029dd4:	4b33      	ldr	r3, [pc, #204]	; (8029ea4 <xTaskIncrementTick+0x158>)
 8029dd6:	681b      	ldr	r3, [r3, #0]
 8029dd8:	68db      	ldr	r3, [r3, #12]
 8029dda:	68db      	ldr	r3, [r3, #12]
 8029ddc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8029dde:	68bb      	ldr	r3, [r7, #8]
 8029de0:	685b      	ldr	r3, [r3, #4]
 8029de2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8029de4:	693a      	ldr	r2, [r7, #16]
 8029de6:	687b      	ldr	r3, [r7, #4]
 8029de8:	429a      	cmp	r2, r3
 8029dea:	d203      	bcs.n	8029df4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8029dec:	4a30      	ldr	r2, [pc, #192]	; (8029eb0 <xTaskIncrementTick+0x164>)
 8029dee:	687b      	ldr	r3, [r7, #4]
 8029df0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8029df2:	e033      	b.n	8029e5c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8029df4:	68bb      	ldr	r3, [r7, #8]
 8029df6:	3304      	adds	r3, #4
 8029df8:	4618      	mov	r0, r3
 8029dfa:	f7fe fd07 	bl	802880c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8029dfe:	68bb      	ldr	r3, [r7, #8]
 8029e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e02:	2b00      	cmp	r3, #0
 8029e04:	d004      	beq.n	8029e10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8029e06:	68bb      	ldr	r3, [r7, #8]
 8029e08:	3318      	adds	r3, #24
 8029e0a:	4618      	mov	r0, r3
 8029e0c:	f7fe fcfe 	bl	802880c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8029e10:	68bb      	ldr	r3, [r7, #8]
 8029e12:	4618      	mov	r0, r3
 8029e14:	f002 fda0 	bl	802c958 <SEGGER_SYSVIEW_OnTaskStartReady>
 8029e18:	68bb      	ldr	r3, [r7, #8]
 8029e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029e1c:	4b25      	ldr	r3, [pc, #148]	; (8029eb4 <xTaskIncrementTick+0x168>)
 8029e1e:	681b      	ldr	r3, [r3, #0]
 8029e20:	429a      	cmp	r2, r3
 8029e22:	d903      	bls.n	8029e2c <xTaskIncrementTick+0xe0>
 8029e24:	68bb      	ldr	r3, [r7, #8]
 8029e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029e28:	4a22      	ldr	r2, [pc, #136]	; (8029eb4 <xTaskIncrementTick+0x168>)
 8029e2a:	6013      	str	r3, [r2, #0]
 8029e2c:	68bb      	ldr	r3, [r7, #8]
 8029e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029e30:	4613      	mov	r3, r2
 8029e32:	009b      	lsls	r3, r3, #2
 8029e34:	4413      	add	r3, r2
 8029e36:	009b      	lsls	r3, r3, #2
 8029e38:	4a1f      	ldr	r2, [pc, #124]	; (8029eb8 <xTaskIncrementTick+0x16c>)
 8029e3a:	441a      	add	r2, r3
 8029e3c:	68bb      	ldr	r3, [r7, #8]
 8029e3e:	3304      	adds	r3, #4
 8029e40:	4619      	mov	r1, r3
 8029e42:	4610      	mov	r0, r2
 8029e44:	f7fe fc85 	bl	8028752 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8029e48:	68bb      	ldr	r3, [r7, #8]
 8029e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029e4c:	4b1b      	ldr	r3, [pc, #108]	; (8029ebc <xTaskIncrementTick+0x170>)
 8029e4e:	681b      	ldr	r3, [r3, #0]
 8029e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029e52:	429a      	cmp	r2, r3
 8029e54:	d3b4      	bcc.n	8029dc0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8029e56:	2301      	movs	r3, #1
 8029e58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8029e5a:	e7b1      	b.n	8029dc0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8029e5c:	4b17      	ldr	r3, [pc, #92]	; (8029ebc <xTaskIncrementTick+0x170>)
 8029e5e:	681b      	ldr	r3, [r3, #0]
 8029e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029e62:	4915      	ldr	r1, [pc, #84]	; (8029eb8 <xTaskIncrementTick+0x16c>)
 8029e64:	4613      	mov	r3, r2
 8029e66:	009b      	lsls	r3, r3, #2
 8029e68:	4413      	add	r3, r2
 8029e6a:	009b      	lsls	r3, r3, #2
 8029e6c:	440b      	add	r3, r1
 8029e6e:	681b      	ldr	r3, [r3, #0]
 8029e70:	2b01      	cmp	r3, #1
 8029e72:	d901      	bls.n	8029e78 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8029e74:	2301      	movs	r3, #1
 8029e76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8029e78:	4b11      	ldr	r3, [pc, #68]	; (8029ec0 <xTaskIncrementTick+0x174>)
 8029e7a:	681b      	ldr	r3, [r3, #0]
 8029e7c:	2b00      	cmp	r3, #0
 8029e7e:	d007      	beq.n	8029e90 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8029e80:	2301      	movs	r3, #1
 8029e82:	617b      	str	r3, [r7, #20]
 8029e84:	e004      	b.n	8029e90 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8029e86:	4b0f      	ldr	r3, [pc, #60]	; (8029ec4 <xTaskIncrementTick+0x178>)
 8029e88:	681b      	ldr	r3, [r3, #0]
 8029e8a:	3301      	adds	r3, #1
 8029e8c:	4a0d      	ldr	r2, [pc, #52]	; (8029ec4 <xTaskIncrementTick+0x178>)
 8029e8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8029e90:	697b      	ldr	r3, [r7, #20]
}
 8029e92:	4618      	mov	r0, r3
 8029e94:	3718      	adds	r7, #24
 8029e96:	46bd      	mov	sp, r7
 8029e98:	bd80      	pop	{r7, pc}
 8029e9a:	bf00      	nop
 8029e9c:	20001738 	.word	0x20001738
 8029ea0:	20001714 	.word	0x20001714
 8029ea4:	200016c8 	.word	0x200016c8
 8029ea8:	200016cc 	.word	0x200016cc
 8029eac:	20001728 	.word	0x20001728
 8029eb0:	20001730 	.word	0x20001730
 8029eb4:	20001718 	.word	0x20001718
 8029eb8:	20001240 	.word	0x20001240
 8029ebc:	2000123c 	.word	0x2000123c
 8029ec0:	20001724 	.word	0x20001724
 8029ec4:	20001720 	.word	0x20001720

08029ec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8029ec8:	b580      	push	{r7, lr}
 8029eca:	b084      	sub	sp, #16
 8029ecc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8029ece:	4b33      	ldr	r3, [pc, #204]	; (8029f9c <vTaskSwitchContext+0xd4>)
 8029ed0:	681b      	ldr	r3, [r3, #0]
 8029ed2:	2b00      	cmp	r3, #0
 8029ed4:	d003      	beq.n	8029ede <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8029ed6:	4b32      	ldr	r3, [pc, #200]	; (8029fa0 <vTaskSwitchContext+0xd8>)
 8029ed8:	2201      	movs	r2, #1
 8029eda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8029edc:	e059      	b.n	8029f92 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8029ede:	4b30      	ldr	r3, [pc, #192]	; (8029fa0 <vTaskSwitchContext+0xd8>)
 8029ee0:	2200      	movs	r2, #0
 8029ee2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8029ee4:	4b2f      	ldr	r3, [pc, #188]	; (8029fa4 <vTaskSwitchContext+0xdc>)
 8029ee6:	681b      	ldr	r3, [r3, #0]
 8029ee8:	60fb      	str	r3, [r7, #12]
 8029eea:	e010      	b.n	8029f0e <vTaskSwitchContext+0x46>
 8029eec:	68fb      	ldr	r3, [r7, #12]
 8029eee:	2b00      	cmp	r3, #0
 8029ef0:	d10a      	bne.n	8029f08 <vTaskSwitchContext+0x40>
	__asm volatile
 8029ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029ef6:	f383 8811 	msr	BASEPRI, r3
 8029efa:	f3bf 8f6f 	isb	sy
 8029efe:	f3bf 8f4f 	dsb	sy
 8029f02:	607b      	str	r3, [r7, #4]
}
 8029f04:	bf00      	nop
 8029f06:	e7fe      	b.n	8029f06 <vTaskSwitchContext+0x3e>
 8029f08:	68fb      	ldr	r3, [r7, #12]
 8029f0a:	3b01      	subs	r3, #1
 8029f0c:	60fb      	str	r3, [r7, #12]
 8029f0e:	4926      	ldr	r1, [pc, #152]	; (8029fa8 <vTaskSwitchContext+0xe0>)
 8029f10:	68fa      	ldr	r2, [r7, #12]
 8029f12:	4613      	mov	r3, r2
 8029f14:	009b      	lsls	r3, r3, #2
 8029f16:	4413      	add	r3, r2
 8029f18:	009b      	lsls	r3, r3, #2
 8029f1a:	440b      	add	r3, r1
 8029f1c:	681b      	ldr	r3, [r3, #0]
 8029f1e:	2b00      	cmp	r3, #0
 8029f20:	d0e4      	beq.n	8029eec <vTaskSwitchContext+0x24>
 8029f22:	68fa      	ldr	r2, [r7, #12]
 8029f24:	4613      	mov	r3, r2
 8029f26:	009b      	lsls	r3, r3, #2
 8029f28:	4413      	add	r3, r2
 8029f2a:	009b      	lsls	r3, r3, #2
 8029f2c:	4a1e      	ldr	r2, [pc, #120]	; (8029fa8 <vTaskSwitchContext+0xe0>)
 8029f2e:	4413      	add	r3, r2
 8029f30:	60bb      	str	r3, [r7, #8]
 8029f32:	68bb      	ldr	r3, [r7, #8]
 8029f34:	685b      	ldr	r3, [r3, #4]
 8029f36:	685a      	ldr	r2, [r3, #4]
 8029f38:	68bb      	ldr	r3, [r7, #8]
 8029f3a:	605a      	str	r2, [r3, #4]
 8029f3c:	68bb      	ldr	r3, [r7, #8]
 8029f3e:	685a      	ldr	r2, [r3, #4]
 8029f40:	68bb      	ldr	r3, [r7, #8]
 8029f42:	3308      	adds	r3, #8
 8029f44:	429a      	cmp	r2, r3
 8029f46:	d104      	bne.n	8029f52 <vTaskSwitchContext+0x8a>
 8029f48:	68bb      	ldr	r3, [r7, #8]
 8029f4a:	685b      	ldr	r3, [r3, #4]
 8029f4c:	685a      	ldr	r2, [r3, #4]
 8029f4e:	68bb      	ldr	r3, [r7, #8]
 8029f50:	605a      	str	r2, [r3, #4]
 8029f52:	68bb      	ldr	r3, [r7, #8]
 8029f54:	685b      	ldr	r3, [r3, #4]
 8029f56:	68db      	ldr	r3, [r3, #12]
 8029f58:	4a14      	ldr	r2, [pc, #80]	; (8029fac <vTaskSwitchContext+0xe4>)
 8029f5a:	6013      	str	r3, [r2, #0]
 8029f5c:	4a11      	ldr	r2, [pc, #68]	; (8029fa4 <vTaskSwitchContext+0xdc>)
 8029f5e:	68fb      	ldr	r3, [r7, #12]
 8029f60:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8029f62:	4b12      	ldr	r3, [pc, #72]	; (8029fac <vTaskSwitchContext+0xe4>)
 8029f64:	681b      	ldr	r3, [r3, #0]
 8029f66:	3334      	adds	r3, #52	; 0x34
 8029f68:	2205      	movs	r2, #5
 8029f6a:	4911      	ldr	r1, [pc, #68]	; (8029fb0 <vTaskSwitchContext+0xe8>)
 8029f6c:	4618      	mov	r0, r3
 8029f6e:	f002 fedb 	bl	802cd28 <memcmp>
 8029f72:	4603      	mov	r3, r0
 8029f74:	2b00      	cmp	r3, #0
 8029f76:	d005      	beq.n	8029f84 <vTaskSwitchContext+0xbc>
 8029f78:	4b0c      	ldr	r3, [pc, #48]	; (8029fac <vTaskSwitchContext+0xe4>)
 8029f7a:	681b      	ldr	r3, [r3, #0]
 8029f7c:	4618      	mov	r0, r3
 8029f7e:	f002 fca9 	bl	802c8d4 <SEGGER_SYSVIEW_OnTaskStartExec>
 8029f82:	e001      	b.n	8029f88 <vTaskSwitchContext+0xc0>
 8029f84:	f002 fc48 	bl	802c818 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8029f88:	4b08      	ldr	r3, [pc, #32]	; (8029fac <vTaskSwitchContext+0xe4>)
 8029f8a:	681b      	ldr	r3, [r3, #0]
 8029f8c:	3364      	adds	r3, #100	; 0x64
 8029f8e:	4a09      	ldr	r2, [pc, #36]	; (8029fb4 <vTaskSwitchContext+0xec>)
 8029f90:	6013      	str	r3, [r2, #0]
}
 8029f92:	bf00      	nop
 8029f94:	3710      	adds	r7, #16
 8029f96:	46bd      	mov	sp, r7
 8029f98:	bd80      	pop	{r7, pc}
 8029f9a:	bf00      	nop
 8029f9c:	20001738 	.word	0x20001738
 8029fa0:	20001724 	.word	0x20001724
 8029fa4:	20001718 	.word	0x20001718
 8029fa8:	20001240 	.word	0x20001240
 8029fac:	2000123c 	.word	0x2000123c
 8029fb0:	0802daa0 	.word	0x0802daa0
 8029fb4:	2000036c 	.word	0x2000036c

08029fb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8029fb8:	b580      	push	{r7, lr}
 8029fba:	b084      	sub	sp, #16
 8029fbc:	af00      	add	r7, sp, #0
 8029fbe:	6078      	str	r0, [r7, #4]
 8029fc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8029fc2:	687b      	ldr	r3, [r7, #4]
 8029fc4:	2b00      	cmp	r3, #0
 8029fc6:	d10a      	bne.n	8029fde <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8029fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029fcc:	f383 8811 	msr	BASEPRI, r3
 8029fd0:	f3bf 8f6f 	isb	sy
 8029fd4:	f3bf 8f4f 	dsb	sy
 8029fd8:	60fb      	str	r3, [r7, #12]
}
 8029fda:	bf00      	nop
 8029fdc:	e7fe      	b.n	8029fdc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8029fde:	4b07      	ldr	r3, [pc, #28]	; (8029ffc <vTaskPlaceOnEventList+0x44>)
 8029fe0:	681b      	ldr	r3, [r3, #0]
 8029fe2:	3318      	adds	r3, #24
 8029fe4:	4619      	mov	r1, r3
 8029fe6:	6878      	ldr	r0, [r7, #4]
 8029fe8:	f7fe fbd7 	bl	802879a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8029fec:	2101      	movs	r1, #1
 8029fee:	6838      	ldr	r0, [r7, #0]
 8029ff0:	f000 fac6 	bl	802a580 <prvAddCurrentTaskToDelayedList>
}
 8029ff4:	bf00      	nop
 8029ff6:	3710      	adds	r7, #16
 8029ff8:	46bd      	mov	sp, r7
 8029ffa:	bd80      	pop	{r7, pc}
 8029ffc:	2000123c 	.word	0x2000123c

0802a000 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 802a000:	b580      	push	{r7, lr}
 802a002:	b086      	sub	sp, #24
 802a004:	af00      	add	r7, sp, #0
 802a006:	60f8      	str	r0, [r7, #12]
 802a008:	60b9      	str	r1, [r7, #8]
 802a00a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 802a00c:	68fb      	ldr	r3, [r7, #12]
 802a00e:	2b00      	cmp	r3, #0
 802a010:	d10a      	bne.n	802a028 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 802a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a016:	f383 8811 	msr	BASEPRI, r3
 802a01a:	f3bf 8f6f 	isb	sy
 802a01e:	f3bf 8f4f 	dsb	sy
 802a022:	617b      	str	r3, [r7, #20]
}
 802a024:	bf00      	nop
 802a026:	e7fe      	b.n	802a026 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802a028:	4b0b      	ldr	r3, [pc, #44]	; (802a058 <vTaskPlaceOnEventListRestricted+0x58>)
 802a02a:	681b      	ldr	r3, [r3, #0]
 802a02c:	3318      	adds	r3, #24
 802a02e:	4619      	mov	r1, r3
 802a030:	68f8      	ldr	r0, [r7, #12]
 802a032:	f7fe fb8e 	bl	8028752 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 802a036:	687b      	ldr	r3, [r7, #4]
 802a038:	2b00      	cmp	r3, #0
 802a03a:	d002      	beq.n	802a042 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 802a03c:	f04f 33ff 	mov.w	r3, #4294967295
 802a040:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 802a042:	2024      	movs	r0, #36	; 0x24
 802a044:	f001 ff64 	bl	802bf10 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 802a048:	6879      	ldr	r1, [r7, #4]
 802a04a:	68b8      	ldr	r0, [r7, #8]
 802a04c:	f000 fa98 	bl	802a580 <prvAddCurrentTaskToDelayedList>
	}
 802a050:	bf00      	nop
 802a052:	3718      	adds	r7, #24
 802a054:	46bd      	mov	sp, r7
 802a056:	bd80      	pop	{r7, pc}
 802a058:	2000123c 	.word	0x2000123c

0802a05c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 802a05c:	b580      	push	{r7, lr}
 802a05e:	b086      	sub	sp, #24
 802a060:	af00      	add	r7, sp, #0
 802a062:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802a064:	687b      	ldr	r3, [r7, #4]
 802a066:	68db      	ldr	r3, [r3, #12]
 802a068:	68db      	ldr	r3, [r3, #12]
 802a06a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 802a06c:	693b      	ldr	r3, [r7, #16]
 802a06e:	2b00      	cmp	r3, #0
 802a070:	d10a      	bne.n	802a088 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 802a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a076:	f383 8811 	msr	BASEPRI, r3
 802a07a:	f3bf 8f6f 	isb	sy
 802a07e:	f3bf 8f4f 	dsb	sy
 802a082:	60fb      	str	r3, [r7, #12]
}
 802a084:	bf00      	nop
 802a086:	e7fe      	b.n	802a086 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 802a088:	693b      	ldr	r3, [r7, #16]
 802a08a:	3318      	adds	r3, #24
 802a08c:	4618      	mov	r0, r3
 802a08e:	f7fe fbbd 	bl	802880c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802a092:	4b20      	ldr	r3, [pc, #128]	; (802a114 <xTaskRemoveFromEventList+0xb8>)
 802a094:	681b      	ldr	r3, [r3, #0]
 802a096:	2b00      	cmp	r3, #0
 802a098:	d121      	bne.n	802a0de <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 802a09a:	693b      	ldr	r3, [r7, #16]
 802a09c:	3304      	adds	r3, #4
 802a09e:	4618      	mov	r0, r3
 802a0a0:	f7fe fbb4 	bl	802880c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 802a0a4:	693b      	ldr	r3, [r7, #16]
 802a0a6:	4618      	mov	r0, r3
 802a0a8:	f002 fc56 	bl	802c958 <SEGGER_SYSVIEW_OnTaskStartReady>
 802a0ac:	693b      	ldr	r3, [r7, #16]
 802a0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a0b0:	4b19      	ldr	r3, [pc, #100]	; (802a118 <xTaskRemoveFromEventList+0xbc>)
 802a0b2:	681b      	ldr	r3, [r3, #0]
 802a0b4:	429a      	cmp	r2, r3
 802a0b6:	d903      	bls.n	802a0c0 <xTaskRemoveFromEventList+0x64>
 802a0b8:	693b      	ldr	r3, [r7, #16]
 802a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a0bc:	4a16      	ldr	r2, [pc, #88]	; (802a118 <xTaskRemoveFromEventList+0xbc>)
 802a0be:	6013      	str	r3, [r2, #0]
 802a0c0:	693b      	ldr	r3, [r7, #16]
 802a0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a0c4:	4613      	mov	r3, r2
 802a0c6:	009b      	lsls	r3, r3, #2
 802a0c8:	4413      	add	r3, r2
 802a0ca:	009b      	lsls	r3, r3, #2
 802a0cc:	4a13      	ldr	r2, [pc, #76]	; (802a11c <xTaskRemoveFromEventList+0xc0>)
 802a0ce:	441a      	add	r2, r3
 802a0d0:	693b      	ldr	r3, [r7, #16]
 802a0d2:	3304      	adds	r3, #4
 802a0d4:	4619      	mov	r1, r3
 802a0d6:	4610      	mov	r0, r2
 802a0d8:	f7fe fb3b 	bl	8028752 <vListInsertEnd>
 802a0dc:	e005      	b.n	802a0ea <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 802a0de:	693b      	ldr	r3, [r7, #16]
 802a0e0:	3318      	adds	r3, #24
 802a0e2:	4619      	mov	r1, r3
 802a0e4:	480e      	ldr	r0, [pc, #56]	; (802a120 <xTaskRemoveFromEventList+0xc4>)
 802a0e6:	f7fe fb34 	bl	8028752 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 802a0ea:	693b      	ldr	r3, [r7, #16]
 802a0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a0ee:	4b0d      	ldr	r3, [pc, #52]	; (802a124 <xTaskRemoveFromEventList+0xc8>)
 802a0f0:	681b      	ldr	r3, [r3, #0]
 802a0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a0f4:	429a      	cmp	r2, r3
 802a0f6:	d905      	bls.n	802a104 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 802a0f8:	2301      	movs	r3, #1
 802a0fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 802a0fc:	4b0a      	ldr	r3, [pc, #40]	; (802a128 <xTaskRemoveFromEventList+0xcc>)
 802a0fe:	2201      	movs	r2, #1
 802a100:	601a      	str	r2, [r3, #0]
 802a102:	e001      	b.n	802a108 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 802a104:	2300      	movs	r3, #0
 802a106:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 802a108:	697b      	ldr	r3, [r7, #20]
}
 802a10a:	4618      	mov	r0, r3
 802a10c:	3718      	adds	r7, #24
 802a10e:	46bd      	mov	sp, r7
 802a110:	bd80      	pop	{r7, pc}
 802a112:	bf00      	nop
 802a114:	20001738 	.word	0x20001738
 802a118:	20001718 	.word	0x20001718
 802a11c:	20001240 	.word	0x20001240
 802a120:	200016d0 	.word	0x200016d0
 802a124:	2000123c 	.word	0x2000123c
 802a128:	20001724 	.word	0x20001724

0802a12c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 802a12c:	b480      	push	{r7}
 802a12e:	b083      	sub	sp, #12
 802a130:	af00      	add	r7, sp, #0
 802a132:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 802a134:	4b06      	ldr	r3, [pc, #24]	; (802a150 <vTaskInternalSetTimeOutState+0x24>)
 802a136:	681a      	ldr	r2, [r3, #0]
 802a138:	687b      	ldr	r3, [r7, #4]
 802a13a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 802a13c:	4b05      	ldr	r3, [pc, #20]	; (802a154 <vTaskInternalSetTimeOutState+0x28>)
 802a13e:	681a      	ldr	r2, [r3, #0]
 802a140:	687b      	ldr	r3, [r7, #4]
 802a142:	605a      	str	r2, [r3, #4]
}
 802a144:	bf00      	nop
 802a146:	370c      	adds	r7, #12
 802a148:	46bd      	mov	sp, r7
 802a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a14e:	4770      	bx	lr
 802a150:	20001728 	.word	0x20001728
 802a154:	20001714 	.word	0x20001714

0802a158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 802a158:	b580      	push	{r7, lr}
 802a15a:	b088      	sub	sp, #32
 802a15c:	af00      	add	r7, sp, #0
 802a15e:	6078      	str	r0, [r7, #4]
 802a160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 802a162:	687b      	ldr	r3, [r7, #4]
 802a164:	2b00      	cmp	r3, #0
 802a166:	d10a      	bne.n	802a17e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 802a168:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a16c:	f383 8811 	msr	BASEPRI, r3
 802a170:	f3bf 8f6f 	isb	sy
 802a174:	f3bf 8f4f 	dsb	sy
 802a178:	613b      	str	r3, [r7, #16]
}
 802a17a:	bf00      	nop
 802a17c:	e7fe      	b.n	802a17c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 802a17e:	683b      	ldr	r3, [r7, #0]
 802a180:	2b00      	cmp	r3, #0
 802a182:	d10a      	bne.n	802a19a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 802a184:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a188:	f383 8811 	msr	BASEPRI, r3
 802a18c:	f3bf 8f6f 	isb	sy
 802a190:	f3bf 8f4f 	dsb	sy
 802a194:	60fb      	str	r3, [r7, #12]
}
 802a196:	bf00      	nop
 802a198:	e7fe      	b.n	802a198 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 802a19a:	f000 fec3 	bl	802af24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 802a19e:	4b1d      	ldr	r3, [pc, #116]	; (802a214 <xTaskCheckForTimeOut+0xbc>)
 802a1a0:	681b      	ldr	r3, [r3, #0]
 802a1a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 802a1a4:	687b      	ldr	r3, [r7, #4]
 802a1a6:	685b      	ldr	r3, [r3, #4]
 802a1a8:	69ba      	ldr	r2, [r7, #24]
 802a1aa:	1ad3      	subs	r3, r2, r3
 802a1ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 802a1ae:	683b      	ldr	r3, [r7, #0]
 802a1b0:	681b      	ldr	r3, [r3, #0]
 802a1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a1b6:	d102      	bne.n	802a1be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 802a1b8:	2300      	movs	r3, #0
 802a1ba:	61fb      	str	r3, [r7, #28]
 802a1bc:	e023      	b.n	802a206 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 802a1be:	687b      	ldr	r3, [r7, #4]
 802a1c0:	681a      	ldr	r2, [r3, #0]
 802a1c2:	4b15      	ldr	r3, [pc, #84]	; (802a218 <xTaskCheckForTimeOut+0xc0>)
 802a1c4:	681b      	ldr	r3, [r3, #0]
 802a1c6:	429a      	cmp	r2, r3
 802a1c8:	d007      	beq.n	802a1da <xTaskCheckForTimeOut+0x82>
 802a1ca:	687b      	ldr	r3, [r7, #4]
 802a1cc:	685b      	ldr	r3, [r3, #4]
 802a1ce:	69ba      	ldr	r2, [r7, #24]
 802a1d0:	429a      	cmp	r2, r3
 802a1d2:	d302      	bcc.n	802a1da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 802a1d4:	2301      	movs	r3, #1
 802a1d6:	61fb      	str	r3, [r7, #28]
 802a1d8:	e015      	b.n	802a206 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 802a1da:	683b      	ldr	r3, [r7, #0]
 802a1dc:	681b      	ldr	r3, [r3, #0]
 802a1de:	697a      	ldr	r2, [r7, #20]
 802a1e0:	429a      	cmp	r2, r3
 802a1e2:	d20b      	bcs.n	802a1fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 802a1e4:	683b      	ldr	r3, [r7, #0]
 802a1e6:	681a      	ldr	r2, [r3, #0]
 802a1e8:	697b      	ldr	r3, [r7, #20]
 802a1ea:	1ad2      	subs	r2, r2, r3
 802a1ec:	683b      	ldr	r3, [r7, #0]
 802a1ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 802a1f0:	6878      	ldr	r0, [r7, #4]
 802a1f2:	f7ff ff9b 	bl	802a12c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 802a1f6:	2300      	movs	r3, #0
 802a1f8:	61fb      	str	r3, [r7, #28]
 802a1fa:	e004      	b.n	802a206 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 802a1fc:	683b      	ldr	r3, [r7, #0]
 802a1fe:	2200      	movs	r2, #0
 802a200:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 802a202:	2301      	movs	r3, #1
 802a204:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 802a206:	f000 febd 	bl	802af84 <vPortExitCritical>

	return xReturn;
 802a20a:	69fb      	ldr	r3, [r7, #28]
}
 802a20c:	4618      	mov	r0, r3
 802a20e:	3720      	adds	r7, #32
 802a210:	46bd      	mov	sp, r7
 802a212:	bd80      	pop	{r7, pc}
 802a214:	20001714 	.word	0x20001714
 802a218:	20001728 	.word	0x20001728

0802a21c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 802a21c:	b480      	push	{r7}
 802a21e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 802a220:	4b03      	ldr	r3, [pc, #12]	; (802a230 <vTaskMissedYield+0x14>)
 802a222:	2201      	movs	r2, #1
 802a224:	601a      	str	r2, [r3, #0]
}
 802a226:	bf00      	nop
 802a228:	46bd      	mov	sp, r7
 802a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a22e:	4770      	bx	lr
 802a230:	20001724 	.word	0x20001724

0802a234 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 802a234:	b580      	push	{r7, lr}
 802a236:	b082      	sub	sp, #8
 802a238:	af00      	add	r7, sp, #0
 802a23a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 802a23c:	f000 f852 	bl	802a2e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 802a240:	4b06      	ldr	r3, [pc, #24]	; (802a25c <prvIdleTask+0x28>)
 802a242:	681b      	ldr	r3, [r3, #0]
 802a244:	2b01      	cmp	r3, #1
 802a246:	d9f9      	bls.n	802a23c <prvIdleTask+0x8>
			{
				taskYIELD();
 802a248:	4b05      	ldr	r3, [pc, #20]	; (802a260 <prvIdleTask+0x2c>)
 802a24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a24e:	601a      	str	r2, [r3, #0]
 802a250:	f3bf 8f4f 	dsb	sy
 802a254:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 802a258:	e7f0      	b.n	802a23c <prvIdleTask+0x8>
 802a25a:	bf00      	nop
 802a25c:	20001240 	.word	0x20001240
 802a260:	e000ed04 	.word	0xe000ed04

0802a264 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 802a264:	b580      	push	{r7, lr}
 802a266:	b082      	sub	sp, #8
 802a268:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802a26a:	2300      	movs	r3, #0
 802a26c:	607b      	str	r3, [r7, #4]
 802a26e:	e00c      	b.n	802a28a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 802a270:	687a      	ldr	r2, [r7, #4]
 802a272:	4613      	mov	r3, r2
 802a274:	009b      	lsls	r3, r3, #2
 802a276:	4413      	add	r3, r2
 802a278:	009b      	lsls	r3, r3, #2
 802a27a:	4a12      	ldr	r2, [pc, #72]	; (802a2c4 <prvInitialiseTaskLists+0x60>)
 802a27c:	4413      	add	r3, r2
 802a27e:	4618      	mov	r0, r3
 802a280:	f7fe fa3a 	bl	80286f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802a284:	687b      	ldr	r3, [r7, #4]
 802a286:	3301      	adds	r3, #1
 802a288:	607b      	str	r3, [r7, #4]
 802a28a:	687b      	ldr	r3, [r7, #4]
 802a28c:	2b37      	cmp	r3, #55	; 0x37
 802a28e:	d9ef      	bls.n	802a270 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 802a290:	480d      	ldr	r0, [pc, #52]	; (802a2c8 <prvInitialiseTaskLists+0x64>)
 802a292:	f7fe fa31 	bl	80286f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 802a296:	480d      	ldr	r0, [pc, #52]	; (802a2cc <prvInitialiseTaskLists+0x68>)
 802a298:	f7fe fa2e 	bl	80286f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 802a29c:	480c      	ldr	r0, [pc, #48]	; (802a2d0 <prvInitialiseTaskLists+0x6c>)
 802a29e:	f7fe fa2b 	bl	80286f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 802a2a2:	480c      	ldr	r0, [pc, #48]	; (802a2d4 <prvInitialiseTaskLists+0x70>)
 802a2a4:	f7fe fa28 	bl	80286f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 802a2a8:	480b      	ldr	r0, [pc, #44]	; (802a2d8 <prvInitialiseTaskLists+0x74>)
 802a2aa:	f7fe fa25 	bl	80286f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 802a2ae:	4b0b      	ldr	r3, [pc, #44]	; (802a2dc <prvInitialiseTaskLists+0x78>)
 802a2b0:	4a05      	ldr	r2, [pc, #20]	; (802a2c8 <prvInitialiseTaskLists+0x64>)
 802a2b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 802a2b4:	4b0a      	ldr	r3, [pc, #40]	; (802a2e0 <prvInitialiseTaskLists+0x7c>)
 802a2b6:	4a05      	ldr	r2, [pc, #20]	; (802a2cc <prvInitialiseTaskLists+0x68>)
 802a2b8:	601a      	str	r2, [r3, #0]
}
 802a2ba:	bf00      	nop
 802a2bc:	3708      	adds	r7, #8
 802a2be:	46bd      	mov	sp, r7
 802a2c0:	bd80      	pop	{r7, pc}
 802a2c2:	bf00      	nop
 802a2c4:	20001240 	.word	0x20001240
 802a2c8:	200016a0 	.word	0x200016a0
 802a2cc:	200016b4 	.word	0x200016b4
 802a2d0:	200016d0 	.word	0x200016d0
 802a2d4:	200016e4 	.word	0x200016e4
 802a2d8:	200016fc 	.word	0x200016fc
 802a2dc:	200016c8 	.word	0x200016c8
 802a2e0:	200016cc 	.word	0x200016cc

0802a2e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 802a2e4:	b580      	push	{r7, lr}
 802a2e6:	b082      	sub	sp, #8
 802a2e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802a2ea:	e019      	b.n	802a320 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 802a2ec:	f000 fe1a 	bl	802af24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802a2f0:	4b10      	ldr	r3, [pc, #64]	; (802a334 <prvCheckTasksWaitingTermination+0x50>)
 802a2f2:	68db      	ldr	r3, [r3, #12]
 802a2f4:	68db      	ldr	r3, [r3, #12]
 802a2f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802a2f8:	687b      	ldr	r3, [r7, #4]
 802a2fa:	3304      	adds	r3, #4
 802a2fc:	4618      	mov	r0, r3
 802a2fe:	f7fe fa85 	bl	802880c <uxListRemove>
				--uxCurrentNumberOfTasks;
 802a302:	4b0d      	ldr	r3, [pc, #52]	; (802a338 <prvCheckTasksWaitingTermination+0x54>)
 802a304:	681b      	ldr	r3, [r3, #0]
 802a306:	3b01      	subs	r3, #1
 802a308:	4a0b      	ldr	r2, [pc, #44]	; (802a338 <prvCheckTasksWaitingTermination+0x54>)
 802a30a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 802a30c:	4b0b      	ldr	r3, [pc, #44]	; (802a33c <prvCheckTasksWaitingTermination+0x58>)
 802a30e:	681b      	ldr	r3, [r3, #0]
 802a310:	3b01      	subs	r3, #1
 802a312:	4a0a      	ldr	r2, [pc, #40]	; (802a33c <prvCheckTasksWaitingTermination+0x58>)
 802a314:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 802a316:	f000 fe35 	bl	802af84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 802a31a:	6878      	ldr	r0, [r7, #4]
 802a31c:	f000 f848 	bl	802a3b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802a320:	4b06      	ldr	r3, [pc, #24]	; (802a33c <prvCheckTasksWaitingTermination+0x58>)
 802a322:	681b      	ldr	r3, [r3, #0]
 802a324:	2b00      	cmp	r3, #0
 802a326:	d1e1      	bne.n	802a2ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 802a328:	bf00      	nop
 802a32a:	bf00      	nop
 802a32c:	3708      	adds	r7, #8
 802a32e:	46bd      	mov	sp, r7
 802a330:	bd80      	pop	{r7, pc}
 802a332:	bf00      	nop
 802a334:	200016e4 	.word	0x200016e4
 802a338:	20001710 	.word	0x20001710
 802a33c:	200016f8 	.word	0x200016f8

0802a340 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 802a340:	b480      	push	{r7}
 802a342:	b085      	sub	sp, #20
 802a344:	af00      	add	r7, sp, #0
 802a346:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 802a348:	2300      	movs	r3, #0
 802a34a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802a34c:	e005      	b.n	802a35a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 802a34e:	687b      	ldr	r3, [r7, #4]
 802a350:	3301      	adds	r3, #1
 802a352:	607b      	str	r3, [r7, #4]
			ulCount++;
 802a354:	68fb      	ldr	r3, [r7, #12]
 802a356:	3301      	adds	r3, #1
 802a358:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802a35a:	687b      	ldr	r3, [r7, #4]
 802a35c:	781b      	ldrb	r3, [r3, #0]
 802a35e:	2ba5      	cmp	r3, #165	; 0xa5
 802a360:	d0f5      	beq.n	802a34e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 802a362:	68fb      	ldr	r3, [r7, #12]
 802a364:	089b      	lsrs	r3, r3, #2
 802a366:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 802a368:	68fb      	ldr	r3, [r7, #12]
 802a36a:	b29b      	uxth	r3, r3
	}
 802a36c:	4618      	mov	r0, r3
 802a36e:	3714      	adds	r7, #20
 802a370:	46bd      	mov	sp, r7
 802a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a376:	4770      	bx	lr

0802a378 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 802a378:	b580      	push	{r7, lr}
 802a37a:	b086      	sub	sp, #24
 802a37c:	af00      	add	r7, sp, #0
 802a37e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 802a380:	687b      	ldr	r3, [r7, #4]
 802a382:	2b00      	cmp	r3, #0
 802a384:	d102      	bne.n	802a38c <uxTaskGetStackHighWaterMark+0x14>
 802a386:	4b09      	ldr	r3, [pc, #36]	; (802a3ac <uxTaskGetStackHighWaterMark+0x34>)
 802a388:	681b      	ldr	r3, [r3, #0]
 802a38a:	e000      	b.n	802a38e <uxTaskGetStackHighWaterMark+0x16>
 802a38c:	687b      	ldr	r3, [r7, #4]
 802a38e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 802a390:	697b      	ldr	r3, [r7, #20]
 802a392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a394:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 802a396:	6938      	ldr	r0, [r7, #16]
 802a398:	f7ff ffd2 	bl	802a340 <prvTaskCheckFreeStackSpace>
 802a39c:	4603      	mov	r3, r0
 802a39e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 802a3a0:	68fb      	ldr	r3, [r7, #12]
	}
 802a3a2:	4618      	mov	r0, r3
 802a3a4:	3718      	adds	r7, #24
 802a3a6:	46bd      	mov	sp, r7
 802a3a8:	bd80      	pop	{r7, pc}
 802a3aa:	bf00      	nop
 802a3ac:	2000123c 	.word	0x2000123c

0802a3b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 802a3b0:	b580      	push	{r7, lr}
 802a3b2:	b084      	sub	sp, #16
 802a3b4:	af00      	add	r7, sp, #0
 802a3b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 802a3b8:	687b      	ldr	r3, [r7, #4]
 802a3ba:	3364      	adds	r3, #100	; 0x64
 802a3bc:	4618      	mov	r0, r3
 802a3be:	f002 fce5 	bl	802cd8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 802a3c2:	687b      	ldr	r3, [r7, #4]
 802a3c4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 802a3c8:	2b00      	cmp	r3, #0
 802a3ca:	d108      	bne.n	802a3de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 802a3cc:	687b      	ldr	r3, [r7, #4]
 802a3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a3d0:	4618      	mov	r0, r3
 802a3d2:	f000 ff95 	bl	802b300 <vPortFree>
				vPortFree( pxTCB );
 802a3d6:	6878      	ldr	r0, [r7, #4]
 802a3d8:	f000 ff92 	bl	802b300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 802a3dc:	e018      	b.n	802a410 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 802a3de:	687b      	ldr	r3, [r7, #4]
 802a3e0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 802a3e4:	2b01      	cmp	r3, #1
 802a3e6:	d103      	bne.n	802a3f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 802a3e8:	6878      	ldr	r0, [r7, #4]
 802a3ea:	f000 ff89 	bl	802b300 <vPortFree>
	}
 802a3ee:	e00f      	b.n	802a410 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 802a3f0:	687b      	ldr	r3, [r7, #4]
 802a3f2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 802a3f6:	2b02      	cmp	r3, #2
 802a3f8:	d00a      	beq.n	802a410 <prvDeleteTCB+0x60>
	__asm volatile
 802a3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a3fe:	f383 8811 	msr	BASEPRI, r3
 802a402:	f3bf 8f6f 	isb	sy
 802a406:	f3bf 8f4f 	dsb	sy
 802a40a:	60fb      	str	r3, [r7, #12]
}
 802a40c:	bf00      	nop
 802a40e:	e7fe      	b.n	802a40e <prvDeleteTCB+0x5e>
	}
 802a410:	bf00      	nop
 802a412:	3710      	adds	r7, #16
 802a414:	46bd      	mov	sp, r7
 802a416:	bd80      	pop	{r7, pc}

0802a418 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 802a418:	b480      	push	{r7}
 802a41a:	b083      	sub	sp, #12
 802a41c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802a41e:	4b0c      	ldr	r3, [pc, #48]	; (802a450 <prvResetNextTaskUnblockTime+0x38>)
 802a420:	681b      	ldr	r3, [r3, #0]
 802a422:	681b      	ldr	r3, [r3, #0]
 802a424:	2b00      	cmp	r3, #0
 802a426:	d104      	bne.n	802a432 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 802a428:	4b0a      	ldr	r3, [pc, #40]	; (802a454 <prvResetNextTaskUnblockTime+0x3c>)
 802a42a:	f04f 32ff 	mov.w	r2, #4294967295
 802a42e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 802a430:	e008      	b.n	802a444 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802a432:	4b07      	ldr	r3, [pc, #28]	; (802a450 <prvResetNextTaskUnblockTime+0x38>)
 802a434:	681b      	ldr	r3, [r3, #0]
 802a436:	68db      	ldr	r3, [r3, #12]
 802a438:	68db      	ldr	r3, [r3, #12]
 802a43a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 802a43c:	687b      	ldr	r3, [r7, #4]
 802a43e:	685b      	ldr	r3, [r3, #4]
 802a440:	4a04      	ldr	r2, [pc, #16]	; (802a454 <prvResetNextTaskUnblockTime+0x3c>)
 802a442:	6013      	str	r3, [r2, #0]
}
 802a444:	bf00      	nop
 802a446:	370c      	adds	r7, #12
 802a448:	46bd      	mov	sp, r7
 802a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a44e:	4770      	bx	lr
 802a450:	200016c8 	.word	0x200016c8
 802a454:	20001730 	.word	0x20001730

0802a458 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 802a458:	b480      	push	{r7}
 802a45a:	b083      	sub	sp, #12
 802a45c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 802a45e:	4b0b      	ldr	r3, [pc, #44]	; (802a48c <xTaskGetSchedulerState+0x34>)
 802a460:	681b      	ldr	r3, [r3, #0]
 802a462:	2b00      	cmp	r3, #0
 802a464:	d102      	bne.n	802a46c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 802a466:	2301      	movs	r3, #1
 802a468:	607b      	str	r3, [r7, #4]
 802a46a:	e008      	b.n	802a47e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802a46c:	4b08      	ldr	r3, [pc, #32]	; (802a490 <xTaskGetSchedulerState+0x38>)
 802a46e:	681b      	ldr	r3, [r3, #0]
 802a470:	2b00      	cmp	r3, #0
 802a472:	d102      	bne.n	802a47a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 802a474:	2302      	movs	r3, #2
 802a476:	607b      	str	r3, [r7, #4]
 802a478:	e001      	b.n	802a47e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 802a47a:	2300      	movs	r3, #0
 802a47c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 802a47e:	687b      	ldr	r3, [r7, #4]
	}
 802a480:	4618      	mov	r0, r3
 802a482:	370c      	adds	r7, #12
 802a484:	46bd      	mov	sp, r7
 802a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a48a:	4770      	bx	lr
 802a48c:	2000171c 	.word	0x2000171c
 802a490:	20001738 	.word	0x20001738

0802a494 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 802a494:	b580      	push	{r7, lr}
 802a496:	b086      	sub	sp, #24
 802a498:	af00      	add	r7, sp, #0
 802a49a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 802a49c:	687b      	ldr	r3, [r7, #4]
 802a49e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 802a4a0:	2300      	movs	r3, #0
 802a4a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 802a4a4:	687b      	ldr	r3, [r7, #4]
 802a4a6:	2b00      	cmp	r3, #0
 802a4a8:	d05f      	beq.n	802a56a <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 802a4aa:	4b32      	ldr	r3, [pc, #200]	; (802a574 <xTaskPriorityDisinherit+0xe0>)
 802a4ac:	681b      	ldr	r3, [r3, #0]
 802a4ae:	693a      	ldr	r2, [r7, #16]
 802a4b0:	429a      	cmp	r2, r3
 802a4b2:	d00a      	beq.n	802a4ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 802a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a4b8:	f383 8811 	msr	BASEPRI, r3
 802a4bc:	f3bf 8f6f 	isb	sy
 802a4c0:	f3bf 8f4f 	dsb	sy
 802a4c4:	60fb      	str	r3, [r7, #12]
}
 802a4c6:	bf00      	nop
 802a4c8:	e7fe      	b.n	802a4c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 802a4ca:	693b      	ldr	r3, [r7, #16]
 802a4cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a4ce:	2b00      	cmp	r3, #0
 802a4d0:	d10a      	bne.n	802a4e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 802a4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a4d6:	f383 8811 	msr	BASEPRI, r3
 802a4da:	f3bf 8f6f 	isb	sy
 802a4de:	f3bf 8f4f 	dsb	sy
 802a4e2:	60bb      	str	r3, [r7, #8]
}
 802a4e4:	bf00      	nop
 802a4e6:	e7fe      	b.n	802a4e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 802a4e8:	693b      	ldr	r3, [r7, #16]
 802a4ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a4ec:	1e5a      	subs	r2, r3, #1
 802a4ee:	693b      	ldr	r3, [r7, #16]
 802a4f0:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 802a4f2:	693b      	ldr	r3, [r7, #16]
 802a4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a4f6:	693b      	ldr	r3, [r7, #16]
 802a4f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802a4fa:	429a      	cmp	r2, r3
 802a4fc:	d035      	beq.n	802a56a <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 802a4fe:	693b      	ldr	r3, [r7, #16]
 802a500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a502:	2b00      	cmp	r3, #0
 802a504:	d131      	bne.n	802a56a <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802a506:	693b      	ldr	r3, [r7, #16]
 802a508:	3304      	adds	r3, #4
 802a50a:	4618      	mov	r0, r3
 802a50c:	f7fe f97e 	bl	802880c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 802a510:	687b      	ldr	r3, [r7, #4]
 802a512:	4619      	mov	r1, r3
 802a514:	204a      	movs	r0, #74	; 0x4a
 802a516:	f001 fd19 	bl	802bf4c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 802a51a:	693b      	ldr	r3, [r7, #16]
 802a51c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802a51e:	693b      	ldr	r3, [r7, #16]
 802a520:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802a522:	693b      	ldr	r3, [r7, #16]
 802a524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a526:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802a52a:	693b      	ldr	r3, [r7, #16]
 802a52c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 802a52e:	693b      	ldr	r3, [r7, #16]
 802a530:	4618      	mov	r0, r3
 802a532:	f002 fa11 	bl	802c958 <SEGGER_SYSVIEW_OnTaskStartReady>
 802a536:	693b      	ldr	r3, [r7, #16]
 802a538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a53a:	4b0f      	ldr	r3, [pc, #60]	; (802a578 <xTaskPriorityDisinherit+0xe4>)
 802a53c:	681b      	ldr	r3, [r3, #0]
 802a53e:	429a      	cmp	r2, r3
 802a540:	d903      	bls.n	802a54a <xTaskPriorityDisinherit+0xb6>
 802a542:	693b      	ldr	r3, [r7, #16]
 802a544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a546:	4a0c      	ldr	r2, [pc, #48]	; (802a578 <xTaskPriorityDisinherit+0xe4>)
 802a548:	6013      	str	r3, [r2, #0]
 802a54a:	693b      	ldr	r3, [r7, #16]
 802a54c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a54e:	4613      	mov	r3, r2
 802a550:	009b      	lsls	r3, r3, #2
 802a552:	4413      	add	r3, r2
 802a554:	009b      	lsls	r3, r3, #2
 802a556:	4a09      	ldr	r2, [pc, #36]	; (802a57c <xTaskPriorityDisinherit+0xe8>)
 802a558:	441a      	add	r2, r3
 802a55a:	693b      	ldr	r3, [r7, #16]
 802a55c:	3304      	adds	r3, #4
 802a55e:	4619      	mov	r1, r3
 802a560:	4610      	mov	r0, r2
 802a562:	f7fe f8f6 	bl	8028752 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 802a566:	2301      	movs	r3, #1
 802a568:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 802a56a:	697b      	ldr	r3, [r7, #20]
	}
 802a56c:	4618      	mov	r0, r3
 802a56e:	3718      	adds	r7, #24
 802a570:	46bd      	mov	sp, r7
 802a572:	bd80      	pop	{r7, pc}
 802a574:	2000123c 	.word	0x2000123c
 802a578:	20001718 	.word	0x20001718
 802a57c:	20001240 	.word	0x20001240

0802a580 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 802a580:	b580      	push	{r7, lr}
 802a582:	b084      	sub	sp, #16
 802a584:	af00      	add	r7, sp, #0
 802a586:	6078      	str	r0, [r7, #4]
 802a588:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 802a58a:	4b21      	ldr	r3, [pc, #132]	; (802a610 <prvAddCurrentTaskToDelayedList+0x90>)
 802a58c:	681b      	ldr	r3, [r3, #0]
 802a58e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802a590:	4b20      	ldr	r3, [pc, #128]	; (802a614 <prvAddCurrentTaskToDelayedList+0x94>)
 802a592:	681b      	ldr	r3, [r3, #0]
 802a594:	3304      	adds	r3, #4
 802a596:	4618      	mov	r0, r3
 802a598:	f7fe f938 	bl	802880c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 802a59c:	687b      	ldr	r3, [r7, #4]
 802a59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a5a2:	d10a      	bne.n	802a5ba <prvAddCurrentTaskToDelayedList+0x3a>
 802a5a4:	683b      	ldr	r3, [r7, #0]
 802a5a6:	2b00      	cmp	r3, #0
 802a5a8:	d007      	beq.n	802a5ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802a5aa:	4b1a      	ldr	r3, [pc, #104]	; (802a614 <prvAddCurrentTaskToDelayedList+0x94>)
 802a5ac:	681b      	ldr	r3, [r3, #0]
 802a5ae:	3304      	adds	r3, #4
 802a5b0:	4619      	mov	r1, r3
 802a5b2:	4819      	ldr	r0, [pc, #100]	; (802a618 <prvAddCurrentTaskToDelayedList+0x98>)
 802a5b4:	f7fe f8cd 	bl	8028752 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 802a5b8:	e026      	b.n	802a608 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 802a5ba:	68fa      	ldr	r2, [r7, #12]
 802a5bc:	687b      	ldr	r3, [r7, #4]
 802a5be:	4413      	add	r3, r2
 802a5c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 802a5c2:	4b14      	ldr	r3, [pc, #80]	; (802a614 <prvAddCurrentTaskToDelayedList+0x94>)
 802a5c4:	681b      	ldr	r3, [r3, #0]
 802a5c6:	68ba      	ldr	r2, [r7, #8]
 802a5c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 802a5ca:	68ba      	ldr	r2, [r7, #8]
 802a5cc:	68fb      	ldr	r3, [r7, #12]
 802a5ce:	429a      	cmp	r2, r3
 802a5d0:	d209      	bcs.n	802a5e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802a5d2:	4b12      	ldr	r3, [pc, #72]	; (802a61c <prvAddCurrentTaskToDelayedList+0x9c>)
 802a5d4:	681a      	ldr	r2, [r3, #0]
 802a5d6:	4b0f      	ldr	r3, [pc, #60]	; (802a614 <prvAddCurrentTaskToDelayedList+0x94>)
 802a5d8:	681b      	ldr	r3, [r3, #0]
 802a5da:	3304      	adds	r3, #4
 802a5dc:	4619      	mov	r1, r3
 802a5de:	4610      	mov	r0, r2
 802a5e0:	f7fe f8db 	bl	802879a <vListInsert>
}
 802a5e4:	e010      	b.n	802a608 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802a5e6:	4b0e      	ldr	r3, [pc, #56]	; (802a620 <prvAddCurrentTaskToDelayedList+0xa0>)
 802a5e8:	681a      	ldr	r2, [r3, #0]
 802a5ea:	4b0a      	ldr	r3, [pc, #40]	; (802a614 <prvAddCurrentTaskToDelayedList+0x94>)
 802a5ec:	681b      	ldr	r3, [r3, #0]
 802a5ee:	3304      	adds	r3, #4
 802a5f0:	4619      	mov	r1, r3
 802a5f2:	4610      	mov	r0, r2
 802a5f4:	f7fe f8d1 	bl	802879a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 802a5f8:	4b0a      	ldr	r3, [pc, #40]	; (802a624 <prvAddCurrentTaskToDelayedList+0xa4>)
 802a5fa:	681b      	ldr	r3, [r3, #0]
 802a5fc:	68ba      	ldr	r2, [r7, #8]
 802a5fe:	429a      	cmp	r2, r3
 802a600:	d202      	bcs.n	802a608 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 802a602:	4a08      	ldr	r2, [pc, #32]	; (802a624 <prvAddCurrentTaskToDelayedList+0xa4>)
 802a604:	68bb      	ldr	r3, [r7, #8]
 802a606:	6013      	str	r3, [r2, #0]
}
 802a608:	bf00      	nop
 802a60a:	3710      	adds	r7, #16
 802a60c:	46bd      	mov	sp, r7
 802a60e:	bd80      	pop	{r7, pc}
 802a610:	20001714 	.word	0x20001714
 802a614:	2000123c 	.word	0x2000123c
 802a618:	200016fc 	.word	0x200016fc
 802a61c:	200016cc 	.word	0x200016cc
 802a620:	200016c8 	.word	0x200016c8
 802a624:	20001730 	.word	0x20001730

0802a628 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 802a628:	b580      	push	{r7, lr}
 802a62a:	b08a      	sub	sp, #40	; 0x28
 802a62c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 802a62e:	2300      	movs	r3, #0
 802a630:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 802a632:	f000 fb07 	bl	802ac44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 802a636:	4b1c      	ldr	r3, [pc, #112]	; (802a6a8 <xTimerCreateTimerTask+0x80>)
 802a638:	681b      	ldr	r3, [r3, #0]
 802a63a:	2b00      	cmp	r3, #0
 802a63c:	d021      	beq.n	802a682 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 802a63e:	2300      	movs	r3, #0
 802a640:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 802a642:	2300      	movs	r3, #0
 802a644:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 802a646:	1d3a      	adds	r2, r7, #4
 802a648:	f107 0108 	add.w	r1, r7, #8
 802a64c:	f107 030c 	add.w	r3, r7, #12
 802a650:	4618      	mov	r0, r3
 802a652:	f7fe f837 	bl	80286c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 802a656:	6879      	ldr	r1, [r7, #4]
 802a658:	68bb      	ldr	r3, [r7, #8]
 802a65a:	68fa      	ldr	r2, [r7, #12]
 802a65c:	9202      	str	r2, [sp, #8]
 802a65e:	9301      	str	r3, [sp, #4]
 802a660:	2302      	movs	r3, #2
 802a662:	9300      	str	r3, [sp, #0]
 802a664:	2300      	movs	r3, #0
 802a666:	460a      	mov	r2, r1
 802a668:	4910      	ldr	r1, [pc, #64]	; (802a6ac <xTimerCreateTimerTask+0x84>)
 802a66a:	4811      	ldr	r0, [pc, #68]	; (802a6b0 <xTimerCreateTimerTask+0x88>)
 802a66c:	f7fe ff8c 	bl	8029588 <xTaskCreateStatic>
 802a670:	4603      	mov	r3, r0
 802a672:	4a10      	ldr	r2, [pc, #64]	; (802a6b4 <xTimerCreateTimerTask+0x8c>)
 802a674:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 802a676:	4b0f      	ldr	r3, [pc, #60]	; (802a6b4 <xTimerCreateTimerTask+0x8c>)
 802a678:	681b      	ldr	r3, [r3, #0]
 802a67a:	2b00      	cmp	r3, #0
 802a67c:	d001      	beq.n	802a682 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 802a67e:	2301      	movs	r3, #1
 802a680:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 802a682:	697b      	ldr	r3, [r7, #20]
 802a684:	2b00      	cmp	r3, #0
 802a686:	d10a      	bne.n	802a69e <xTimerCreateTimerTask+0x76>
	__asm volatile
 802a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a68c:	f383 8811 	msr	BASEPRI, r3
 802a690:	f3bf 8f6f 	isb	sy
 802a694:	f3bf 8f4f 	dsb	sy
 802a698:	613b      	str	r3, [r7, #16]
}
 802a69a:	bf00      	nop
 802a69c:	e7fe      	b.n	802a69c <xTimerCreateTimerTask+0x74>
	return xReturn;
 802a69e:	697b      	ldr	r3, [r7, #20]
}
 802a6a0:	4618      	mov	r0, r3
 802a6a2:	3718      	adds	r7, #24
 802a6a4:	46bd      	mov	sp, r7
 802a6a6:	bd80      	pop	{r7, pc}
 802a6a8:	2000176c 	.word	0x2000176c
 802a6ac:	0802daa8 	.word	0x0802daa8
 802a6b0:	0802a7ed 	.word	0x0802a7ed
 802a6b4:	20001770 	.word	0x20001770

0802a6b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 802a6b8:	b580      	push	{r7, lr}
 802a6ba:	b08a      	sub	sp, #40	; 0x28
 802a6bc:	af00      	add	r7, sp, #0
 802a6be:	60f8      	str	r0, [r7, #12]
 802a6c0:	60b9      	str	r1, [r7, #8]
 802a6c2:	607a      	str	r2, [r7, #4]
 802a6c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 802a6c6:	2300      	movs	r3, #0
 802a6c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 802a6ca:	68fb      	ldr	r3, [r7, #12]
 802a6cc:	2b00      	cmp	r3, #0
 802a6ce:	d10a      	bne.n	802a6e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 802a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a6d4:	f383 8811 	msr	BASEPRI, r3
 802a6d8:	f3bf 8f6f 	isb	sy
 802a6dc:	f3bf 8f4f 	dsb	sy
 802a6e0:	623b      	str	r3, [r7, #32]
}
 802a6e2:	bf00      	nop
 802a6e4:	e7fe      	b.n	802a6e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 802a6e6:	4b1a      	ldr	r3, [pc, #104]	; (802a750 <xTimerGenericCommand+0x98>)
 802a6e8:	681b      	ldr	r3, [r3, #0]
 802a6ea:	2b00      	cmp	r3, #0
 802a6ec:	d02a      	beq.n	802a744 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 802a6ee:	68bb      	ldr	r3, [r7, #8]
 802a6f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 802a6f2:	687b      	ldr	r3, [r7, #4]
 802a6f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 802a6f6:	68fb      	ldr	r3, [r7, #12]
 802a6f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 802a6fa:	68bb      	ldr	r3, [r7, #8]
 802a6fc:	2b05      	cmp	r3, #5
 802a6fe:	dc18      	bgt.n	802a732 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 802a700:	f7ff feaa 	bl	802a458 <xTaskGetSchedulerState>
 802a704:	4603      	mov	r3, r0
 802a706:	2b02      	cmp	r3, #2
 802a708:	d109      	bne.n	802a71e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 802a70a:	4b11      	ldr	r3, [pc, #68]	; (802a750 <xTimerGenericCommand+0x98>)
 802a70c:	6818      	ldr	r0, [r3, #0]
 802a70e:	f107 0110 	add.w	r1, r7, #16
 802a712:	2300      	movs	r3, #0
 802a714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802a716:	f7fe f9e7 	bl	8028ae8 <xQueueGenericSend>
 802a71a:	6278      	str	r0, [r7, #36]	; 0x24
 802a71c:	e012      	b.n	802a744 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 802a71e:	4b0c      	ldr	r3, [pc, #48]	; (802a750 <xTimerGenericCommand+0x98>)
 802a720:	6818      	ldr	r0, [r3, #0]
 802a722:	f107 0110 	add.w	r1, r7, #16
 802a726:	2300      	movs	r3, #0
 802a728:	2200      	movs	r2, #0
 802a72a:	f7fe f9dd 	bl	8028ae8 <xQueueGenericSend>
 802a72e:	6278      	str	r0, [r7, #36]	; 0x24
 802a730:	e008      	b.n	802a744 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 802a732:	4b07      	ldr	r3, [pc, #28]	; (802a750 <xTimerGenericCommand+0x98>)
 802a734:	6818      	ldr	r0, [r3, #0]
 802a736:	f107 0110 	add.w	r1, r7, #16
 802a73a:	2300      	movs	r3, #0
 802a73c:	683a      	ldr	r2, [r7, #0]
 802a73e:	f7fe faf9 	bl	8028d34 <xQueueGenericSendFromISR>
 802a742:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 802a744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802a746:	4618      	mov	r0, r3
 802a748:	3728      	adds	r7, #40	; 0x28
 802a74a:	46bd      	mov	sp, r7
 802a74c:	bd80      	pop	{r7, pc}
 802a74e:	bf00      	nop
 802a750:	2000176c 	.word	0x2000176c

0802a754 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 802a754:	b580      	push	{r7, lr}
 802a756:	b088      	sub	sp, #32
 802a758:	af02      	add	r7, sp, #8
 802a75a:	6078      	str	r0, [r7, #4]
 802a75c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802a75e:	4b22      	ldr	r3, [pc, #136]	; (802a7e8 <prvProcessExpiredTimer+0x94>)
 802a760:	681b      	ldr	r3, [r3, #0]
 802a762:	68db      	ldr	r3, [r3, #12]
 802a764:	68db      	ldr	r3, [r3, #12]
 802a766:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802a768:	697b      	ldr	r3, [r7, #20]
 802a76a:	3304      	adds	r3, #4
 802a76c:	4618      	mov	r0, r3
 802a76e:	f7fe f84d 	bl	802880c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802a772:	697b      	ldr	r3, [r7, #20]
 802a774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802a778:	f003 0304 	and.w	r3, r3, #4
 802a77c:	2b00      	cmp	r3, #0
 802a77e:	d022      	beq.n	802a7c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 802a780:	697b      	ldr	r3, [r7, #20]
 802a782:	699a      	ldr	r2, [r3, #24]
 802a784:	687b      	ldr	r3, [r7, #4]
 802a786:	18d1      	adds	r1, r2, r3
 802a788:	687b      	ldr	r3, [r7, #4]
 802a78a:	683a      	ldr	r2, [r7, #0]
 802a78c:	6978      	ldr	r0, [r7, #20]
 802a78e:	f000 f8d1 	bl	802a934 <prvInsertTimerInActiveList>
 802a792:	4603      	mov	r3, r0
 802a794:	2b00      	cmp	r3, #0
 802a796:	d01f      	beq.n	802a7d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802a798:	2300      	movs	r3, #0
 802a79a:	9300      	str	r3, [sp, #0]
 802a79c:	2300      	movs	r3, #0
 802a79e:	687a      	ldr	r2, [r7, #4]
 802a7a0:	2100      	movs	r1, #0
 802a7a2:	6978      	ldr	r0, [r7, #20]
 802a7a4:	f7ff ff88 	bl	802a6b8 <xTimerGenericCommand>
 802a7a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 802a7aa:	693b      	ldr	r3, [r7, #16]
 802a7ac:	2b00      	cmp	r3, #0
 802a7ae:	d113      	bne.n	802a7d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 802a7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a7b4:	f383 8811 	msr	BASEPRI, r3
 802a7b8:	f3bf 8f6f 	isb	sy
 802a7bc:	f3bf 8f4f 	dsb	sy
 802a7c0:	60fb      	str	r3, [r7, #12]
}
 802a7c2:	bf00      	nop
 802a7c4:	e7fe      	b.n	802a7c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802a7c6:	697b      	ldr	r3, [r7, #20]
 802a7c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802a7cc:	f023 0301 	bic.w	r3, r3, #1
 802a7d0:	b2da      	uxtb	r2, r3
 802a7d2:	697b      	ldr	r3, [r7, #20]
 802a7d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802a7d8:	697b      	ldr	r3, [r7, #20]
 802a7da:	6a1b      	ldr	r3, [r3, #32]
 802a7dc:	6978      	ldr	r0, [r7, #20]
 802a7de:	4798      	blx	r3
}
 802a7e0:	bf00      	nop
 802a7e2:	3718      	adds	r7, #24
 802a7e4:	46bd      	mov	sp, r7
 802a7e6:	bd80      	pop	{r7, pc}
 802a7e8:	20001764 	.word	0x20001764

0802a7ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 802a7ec:	b580      	push	{r7, lr}
 802a7ee:	b084      	sub	sp, #16
 802a7f0:	af00      	add	r7, sp, #0
 802a7f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 802a7f4:	f107 0308 	add.w	r3, r7, #8
 802a7f8:	4618      	mov	r0, r3
 802a7fa:	f000 f857 	bl	802a8ac <prvGetNextExpireTime>
 802a7fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 802a800:	68bb      	ldr	r3, [r7, #8]
 802a802:	4619      	mov	r1, r3
 802a804:	68f8      	ldr	r0, [r7, #12]
 802a806:	f000 f803 	bl	802a810 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 802a80a:	f000 f8d5 	bl	802a9b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 802a80e:	e7f1      	b.n	802a7f4 <prvTimerTask+0x8>

0802a810 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 802a810:	b580      	push	{r7, lr}
 802a812:	b084      	sub	sp, #16
 802a814:	af00      	add	r7, sp, #0
 802a816:	6078      	str	r0, [r7, #4]
 802a818:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 802a81a:	f7ff f9c5 	bl	8029ba8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802a81e:	f107 0308 	add.w	r3, r7, #8
 802a822:	4618      	mov	r0, r3
 802a824:	f000 f866 	bl	802a8f4 <prvSampleTimeNow>
 802a828:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 802a82a:	68bb      	ldr	r3, [r7, #8]
 802a82c:	2b00      	cmp	r3, #0
 802a82e:	d130      	bne.n	802a892 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 802a830:	683b      	ldr	r3, [r7, #0]
 802a832:	2b00      	cmp	r3, #0
 802a834:	d10a      	bne.n	802a84c <prvProcessTimerOrBlockTask+0x3c>
 802a836:	687a      	ldr	r2, [r7, #4]
 802a838:	68fb      	ldr	r3, [r7, #12]
 802a83a:	429a      	cmp	r2, r3
 802a83c:	d806      	bhi.n	802a84c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 802a83e:	f7ff f9c1 	bl	8029bc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 802a842:	68f9      	ldr	r1, [r7, #12]
 802a844:	6878      	ldr	r0, [r7, #4]
 802a846:	f7ff ff85 	bl	802a754 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 802a84a:	e024      	b.n	802a896 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 802a84c:	683b      	ldr	r3, [r7, #0]
 802a84e:	2b00      	cmp	r3, #0
 802a850:	d008      	beq.n	802a864 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 802a852:	4b13      	ldr	r3, [pc, #76]	; (802a8a0 <prvProcessTimerOrBlockTask+0x90>)
 802a854:	681b      	ldr	r3, [r3, #0]
 802a856:	681b      	ldr	r3, [r3, #0]
 802a858:	2b00      	cmp	r3, #0
 802a85a:	d101      	bne.n	802a860 <prvProcessTimerOrBlockTask+0x50>
 802a85c:	2301      	movs	r3, #1
 802a85e:	e000      	b.n	802a862 <prvProcessTimerOrBlockTask+0x52>
 802a860:	2300      	movs	r3, #0
 802a862:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 802a864:	4b0f      	ldr	r3, [pc, #60]	; (802a8a4 <prvProcessTimerOrBlockTask+0x94>)
 802a866:	6818      	ldr	r0, [r3, #0]
 802a868:	687a      	ldr	r2, [r7, #4]
 802a86a:	68fb      	ldr	r3, [r7, #12]
 802a86c:	1ad3      	subs	r3, r2, r3
 802a86e:	683a      	ldr	r2, [r7, #0]
 802a870:	4619      	mov	r1, r3
 802a872:	f7fe fe55 	bl	8029520 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 802a876:	f7ff f9a5 	bl	8029bc4 <xTaskResumeAll>
 802a87a:	4603      	mov	r3, r0
 802a87c:	2b00      	cmp	r3, #0
 802a87e:	d10a      	bne.n	802a896 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 802a880:	4b09      	ldr	r3, [pc, #36]	; (802a8a8 <prvProcessTimerOrBlockTask+0x98>)
 802a882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a886:	601a      	str	r2, [r3, #0]
 802a888:	f3bf 8f4f 	dsb	sy
 802a88c:	f3bf 8f6f 	isb	sy
}
 802a890:	e001      	b.n	802a896 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 802a892:	f7ff f997 	bl	8029bc4 <xTaskResumeAll>
}
 802a896:	bf00      	nop
 802a898:	3710      	adds	r7, #16
 802a89a:	46bd      	mov	sp, r7
 802a89c:	bd80      	pop	{r7, pc}
 802a89e:	bf00      	nop
 802a8a0:	20001768 	.word	0x20001768
 802a8a4:	2000176c 	.word	0x2000176c
 802a8a8:	e000ed04 	.word	0xe000ed04

0802a8ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 802a8ac:	b480      	push	{r7}
 802a8ae:	b085      	sub	sp, #20
 802a8b0:	af00      	add	r7, sp, #0
 802a8b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 802a8b4:	4b0e      	ldr	r3, [pc, #56]	; (802a8f0 <prvGetNextExpireTime+0x44>)
 802a8b6:	681b      	ldr	r3, [r3, #0]
 802a8b8:	681b      	ldr	r3, [r3, #0]
 802a8ba:	2b00      	cmp	r3, #0
 802a8bc:	d101      	bne.n	802a8c2 <prvGetNextExpireTime+0x16>
 802a8be:	2201      	movs	r2, #1
 802a8c0:	e000      	b.n	802a8c4 <prvGetNextExpireTime+0x18>
 802a8c2:	2200      	movs	r2, #0
 802a8c4:	687b      	ldr	r3, [r7, #4]
 802a8c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 802a8c8:	687b      	ldr	r3, [r7, #4]
 802a8ca:	681b      	ldr	r3, [r3, #0]
 802a8cc:	2b00      	cmp	r3, #0
 802a8ce:	d105      	bne.n	802a8dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802a8d0:	4b07      	ldr	r3, [pc, #28]	; (802a8f0 <prvGetNextExpireTime+0x44>)
 802a8d2:	681b      	ldr	r3, [r3, #0]
 802a8d4:	68db      	ldr	r3, [r3, #12]
 802a8d6:	681b      	ldr	r3, [r3, #0]
 802a8d8:	60fb      	str	r3, [r7, #12]
 802a8da:	e001      	b.n	802a8e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 802a8dc:	2300      	movs	r3, #0
 802a8de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 802a8e0:	68fb      	ldr	r3, [r7, #12]
}
 802a8e2:	4618      	mov	r0, r3
 802a8e4:	3714      	adds	r7, #20
 802a8e6:	46bd      	mov	sp, r7
 802a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8ec:	4770      	bx	lr
 802a8ee:	bf00      	nop
 802a8f0:	20001764 	.word	0x20001764

0802a8f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 802a8f4:	b580      	push	{r7, lr}
 802a8f6:	b084      	sub	sp, #16
 802a8f8:	af00      	add	r7, sp, #0
 802a8fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 802a8fc:	f7ff fa04 	bl	8029d08 <xTaskGetTickCount>
 802a900:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 802a902:	4b0b      	ldr	r3, [pc, #44]	; (802a930 <prvSampleTimeNow+0x3c>)
 802a904:	681b      	ldr	r3, [r3, #0]
 802a906:	68fa      	ldr	r2, [r7, #12]
 802a908:	429a      	cmp	r2, r3
 802a90a:	d205      	bcs.n	802a918 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 802a90c:	f000 f936 	bl	802ab7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 802a910:	687b      	ldr	r3, [r7, #4]
 802a912:	2201      	movs	r2, #1
 802a914:	601a      	str	r2, [r3, #0]
 802a916:	e002      	b.n	802a91e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 802a918:	687b      	ldr	r3, [r7, #4]
 802a91a:	2200      	movs	r2, #0
 802a91c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 802a91e:	4a04      	ldr	r2, [pc, #16]	; (802a930 <prvSampleTimeNow+0x3c>)
 802a920:	68fb      	ldr	r3, [r7, #12]
 802a922:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 802a924:	68fb      	ldr	r3, [r7, #12]
}
 802a926:	4618      	mov	r0, r3
 802a928:	3710      	adds	r7, #16
 802a92a:	46bd      	mov	sp, r7
 802a92c:	bd80      	pop	{r7, pc}
 802a92e:	bf00      	nop
 802a930:	20001774 	.word	0x20001774

0802a934 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 802a934:	b580      	push	{r7, lr}
 802a936:	b086      	sub	sp, #24
 802a938:	af00      	add	r7, sp, #0
 802a93a:	60f8      	str	r0, [r7, #12]
 802a93c:	60b9      	str	r1, [r7, #8]
 802a93e:	607a      	str	r2, [r7, #4]
 802a940:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 802a942:	2300      	movs	r3, #0
 802a944:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 802a946:	68fb      	ldr	r3, [r7, #12]
 802a948:	68ba      	ldr	r2, [r7, #8]
 802a94a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802a94c:	68fb      	ldr	r3, [r7, #12]
 802a94e:	68fa      	ldr	r2, [r7, #12]
 802a950:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 802a952:	68ba      	ldr	r2, [r7, #8]
 802a954:	687b      	ldr	r3, [r7, #4]
 802a956:	429a      	cmp	r2, r3
 802a958:	d812      	bhi.n	802a980 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802a95a:	687a      	ldr	r2, [r7, #4]
 802a95c:	683b      	ldr	r3, [r7, #0]
 802a95e:	1ad2      	subs	r2, r2, r3
 802a960:	68fb      	ldr	r3, [r7, #12]
 802a962:	699b      	ldr	r3, [r3, #24]
 802a964:	429a      	cmp	r2, r3
 802a966:	d302      	bcc.n	802a96e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 802a968:	2301      	movs	r3, #1
 802a96a:	617b      	str	r3, [r7, #20]
 802a96c:	e01b      	b.n	802a9a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 802a96e:	4b10      	ldr	r3, [pc, #64]	; (802a9b0 <prvInsertTimerInActiveList+0x7c>)
 802a970:	681a      	ldr	r2, [r3, #0]
 802a972:	68fb      	ldr	r3, [r7, #12]
 802a974:	3304      	adds	r3, #4
 802a976:	4619      	mov	r1, r3
 802a978:	4610      	mov	r0, r2
 802a97a:	f7fd ff0e 	bl	802879a <vListInsert>
 802a97e:	e012      	b.n	802a9a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 802a980:	687a      	ldr	r2, [r7, #4]
 802a982:	683b      	ldr	r3, [r7, #0]
 802a984:	429a      	cmp	r2, r3
 802a986:	d206      	bcs.n	802a996 <prvInsertTimerInActiveList+0x62>
 802a988:	68ba      	ldr	r2, [r7, #8]
 802a98a:	683b      	ldr	r3, [r7, #0]
 802a98c:	429a      	cmp	r2, r3
 802a98e:	d302      	bcc.n	802a996 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 802a990:	2301      	movs	r3, #1
 802a992:	617b      	str	r3, [r7, #20]
 802a994:	e007      	b.n	802a9a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802a996:	4b07      	ldr	r3, [pc, #28]	; (802a9b4 <prvInsertTimerInActiveList+0x80>)
 802a998:	681a      	ldr	r2, [r3, #0]
 802a99a:	68fb      	ldr	r3, [r7, #12]
 802a99c:	3304      	adds	r3, #4
 802a99e:	4619      	mov	r1, r3
 802a9a0:	4610      	mov	r0, r2
 802a9a2:	f7fd fefa 	bl	802879a <vListInsert>
		}
	}

	return xProcessTimerNow;
 802a9a6:	697b      	ldr	r3, [r7, #20]
}
 802a9a8:	4618      	mov	r0, r3
 802a9aa:	3718      	adds	r7, #24
 802a9ac:	46bd      	mov	sp, r7
 802a9ae:	bd80      	pop	{r7, pc}
 802a9b0:	20001768 	.word	0x20001768
 802a9b4:	20001764 	.word	0x20001764

0802a9b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 802a9b8:	b580      	push	{r7, lr}
 802a9ba:	b08e      	sub	sp, #56	; 0x38
 802a9bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802a9be:	e0ca      	b.n	802ab56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 802a9c0:	687b      	ldr	r3, [r7, #4]
 802a9c2:	2b00      	cmp	r3, #0
 802a9c4:	da18      	bge.n	802a9f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 802a9c6:	1d3b      	adds	r3, r7, #4
 802a9c8:	3304      	adds	r3, #4
 802a9ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 802a9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a9ce:	2b00      	cmp	r3, #0
 802a9d0:	d10a      	bne.n	802a9e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 802a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a9d6:	f383 8811 	msr	BASEPRI, r3
 802a9da:	f3bf 8f6f 	isb	sy
 802a9de:	f3bf 8f4f 	dsb	sy
 802a9e2:	61fb      	str	r3, [r7, #28]
}
 802a9e4:	bf00      	nop
 802a9e6:	e7fe      	b.n	802a9e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 802a9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a9ea:	681b      	ldr	r3, [r3, #0]
 802a9ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802a9ee:	6850      	ldr	r0, [r2, #4]
 802a9f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802a9f2:	6892      	ldr	r2, [r2, #8]
 802a9f4:	4611      	mov	r1, r2
 802a9f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 802a9f8:	687b      	ldr	r3, [r7, #4]
 802a9fa:	2b00      	cmp	r3, #0
 802a9fc:	f2c0 80aa 	blt.w	802ab54 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 802aa00:	68fb      	ldr	r3, [r7, #12]
 802aa02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 802aa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aa06:	695b      	ldr	r3, [r3, #20]
 802aa08:	2b00      	cmp	r3, #0
 802aa0a:	d004      	beq.n	802aa16 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aa0e:	3304      	adds	r3, #4
 802aa10:	4618      	mov	r0, r3
 802aa12:	f7fd fefb 	bl	802880c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802aa16:	463b      	mov	r3, r7
 802aa18:	4618      	mov	r0, r3
 802aa1a:	f7ff ff6b 	bl	802a8f4 <prvSampleTimeNow>
 802aa1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 802aa20:	687b      	ldr	r3, [r7, #4]
 802aa22:	2b09      	cmp	r3, #9
 802aa24:	f200 8097 	bhi.w	802ab56 <prvProcessReceivedCommands+0x19e>
 802aa28:	a201      	add	r2, pc, #4	; (adr r2, 802aa30 <prvProcessReceivedCommands+0x78>)
 802aa2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802aa2e:	bf00      	nop
 802aa30:	0802aa59 	.word	0x0802aa59
 802aa34:	0802aa59 	.word	0x0802aa59
 802aa38:	0802aa59 	.word	0x0802aa59
 802aa3c:	0802aacd 	.word	0x0802aacd
 802aa40:	0802aae1 	.word	0x0802aae1
 802aa44:	0802ab2b 	.word	0x0802ab2b
 802aa48:	0802aa59 	.word	0x0802aa59
 802aa4c:	0802aa59 	.word	0x0802aa59
 802aa50:	0802aacd 	.word	0x0802aacd
 802aa54:	0802aae1 	.word	0x0802aae1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802aa58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aa5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802aa5e:	f043 0301 	orr.w	r3, r3, #1
 802aa62:	b2da      	uxtb	r2, r3
 802aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aa66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 802aa6a:	68ba      	ldr	r2, [r7, #8]
 802aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aa6e:	699b      	ldr	r3, [r3, #24]
 802aa70:	18d1      	adds	r1, r2, r3
 802aa72:	68bb      	ldr	r3, [r7, #8]
 802aa74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802aa76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802aa78:	f7ff ff5c 	bl	802a934 <prvInsertTimerInActiveList>
 802aa7c:	4603      	mov	r3, r0
 802aa7e:	2b00      	cmp	r3, #0
 802aa80:	d069      	beq.n	802ab56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802aa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aa84:	6a1b      	ldr	r3, [r3, #32]
 802aa86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802aa88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802aa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aa8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802aa90:	f003 0304 	and.w	r3, r3, #4
 802aa94:	2b00      	cmp	r3, #0
 802aa96:	d05e      	beq.n	802ab56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 802aa98:	68ba      	ldr	r2, [r7, #8]
 802aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aa9c:	699b      	ldr	r3, [r3, #24]
 802aa9e:	441a      	add	r2, r3
 802aaa0:	2300      	movs	r3, #0
 802aaa2:	9300      	str	r3, [sp, #0]
 802aaa4:	2300      	movs	r3, #0
 802aaa6:	2100      	movs	r1, #0
 802aaa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802aaaa:	f7ff fe05 	bl	802a6b8 <xTimerGenericCommand>
 802aaae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 802aab0:	6a3b      	ldr	r3, [r7, #32]
 802aab2:	2b00      	cmp	r3, #0
 802aab4:	d14f      	bne.n	802ab56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 802aab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 802aaba:	f383 8811 	msr	BASEPRI, r3
 802aabe:	f3bf 8f6f 	isb	sy
 802aac2:	f3bf 8f4f 	dsb	sy
 802aac6:	61bb      	str	r3, [r7, #24]
}
 802aac8:	bf00      	nop
 802aaca:	e7fe      	b.n	802aaca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802aad2:	f023 0301 	bic.w	r3, r3, #1
 802aad6:	b2da      	uxtb	r2, r3
 802aad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 802aade:	e03a      	b.n	802ab56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802aae6:	f043 0301 	orr.w	r3, r3, #1
 802aaea:	b2da      	uxtb	r2, r3
 802aaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aaee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 802aaf2:	68ba      	ldr	r2, [r7, #8]
 802aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aaf6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 802aaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aafa:	699b      	ldr	r3, [r3, #24]
 802aafc:	2b00      	cmp	r3, #0
 802aafe:	d10a      	bne.n	802ab16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 802ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ab04:	f383 8811 	msr	BASEPRI, r3
 802ab08:	f3bf 8f6f 	isb	sy
 802ab0c:	f3bf 8f4f 	dsb	sy
 802ab10:	617b      	str	r3, [r7, #20]
}
 802ab12:	bf00      	nop
 802ab14:	e7fe      	b.n	802ab14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 802ab16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab18:	699a      	ldr	r2, [r3, #24]
 802ab1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ab1c:	18d1      	adds	r1, r2, r3
 802ab1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ab20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ab22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802ab24:	f7ff ff06 	bl	802a934 <prvInsertTimerInActiveList>
					break;
 802ab28:	e015      	b.n	802ab56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 802ab2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802ab30:	f003 0302 	and.w	r3, r3, #2
 802ab34:	2b00      	cmp	r3, #0
 802ab36:	d103      	bne.n	802ab40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 802ab38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802ab3a:	f000 fbe1 	bl	802b300 <vPortFree>
 802ab3e:	e00a      	b.n	802ab56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802ab46:	f023 0301 	bic.w	r3, r3, #1
 802ab4a:	b2da      	uxtb	r2, r3
 802ab4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 802ab52:	e000      	b.n	802ab56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 802ab54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802ab56:	4b08      	ldr	r3, [pc, #32]	; (802ab78 <prvProcessReceivedCommands+0x1c0>)
 802ab58:	681b      	ldr	r3, [r3, #0]
 802ab5a:	1d39      	adds	r1, r7, #4
 802ab5c:	2200      	movs	r2, #0
 802ab5e:	4618      	mov	r0, r3
 802ab60:	f7fe f998 	bl	8028e94 <xQueueReceive>
 802ab64:	4603      	mov	r3, r0
 802ab66:	2b00      	cmp	r3, #0
 802ab68:	f47f af2a 	bne.w	802a9c0 <prvProcessReceivedCommands+0x8>
	}
}
 802ab6c:	bf00      	nop
 802ab6e:	bf00      	nop
 802ab70:	3730      	adds	r7, #48	; 0x30
 802ab72:	46bd      	mov	sp, r7
 802ab74:	bd80      	pop	{r7, pc}
 802ab76:	bf00      	nop
 802ab78:	2000176c 	.word	0x2000176c

0802ab7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 802ab7c:	b580      	push	{r7, lr}
 802ab7e:	b088      	sub	sp, #32
 802ab80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802ab82:	e048      	b.n	802ac16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802ab84:	4b2d      	ldr	r3, [pc, #180]	; (802ac3c <prvSwitchTimerLists+0xc0>)
 802ab86:	681b      	ldr	r3, [r3, #0]
 802ab88:	68db      	ldr	r3, [r3, #12]
 802ab8a:	681b      	ldr	r3, [r3, #0]
 802ab8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802ab8e:	4b2b      	ldr	r3, [pc, #172]	; (802ac3c <prvSwitchTimerLists+0xc0>)
 802ab90:	681b      	ldr	r3, [r3, #0]
 802ab92:	68db      	ldr	r3, [r3, #12]
 802ab94:	68db      	ldr	r3, [r3, #12]
 802ab96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802ab98:	68fb      	ldr	r3, [r7, #12]
 802ab9a:	3304      	adds	r3, #4
 802ab9c:	4618      	mov	r0, r3
 802ab9e:	f7fd fe35 	bl	802880c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802aba2:	68fb      	ldr	r3, [r7, #12]
 802aba4:	6a1b      	ldr	r3, [r3, #32]
 802aba6:	68f8      	ldr	r0, [r7, #12]
 802aba8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802abaa:	68fb      	ldr	r3, [r7, #12]
 802abac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802abb0:	f003 0304 	and.w	r3, r3, #4
 802abb4:	2b00      	cmp	r3, #0
 802abb6:	d02e      	beq.n	802ac16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 802abb8:	68fb      	ldr	r3, [r7, #12]
 802abba:	699b      	ldr	r3, [r3, #24]
 802abbc:	693a      	ldr	r2, [r7, #16]
 802abbe:	4413      	add	r3, r2
 802abc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 802abc2:	68ba      	ldr	r2, [r7, #8]
 802abc4:	693b      	ldr	r3, [r7, #16]
 802abc6:	429a      	cmp	r2, r3
 802abc8:	d90e      	bls.n	802abe8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 802abca:	68fb      	ldr	r3, [r7, #12]
 802abcc:	68ba      	ldr	r2, [r7, #8]
 802abce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802abd0:	68fb      	ldr	r3, [r7, #12]
 802abd2:	68fa      	ldr	r2, [r7, #12]
 802abd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802abd6:	4b19      	ldr	r3, [pc, #100]	; (802ac3c <prvSwitchTimerLists+0xc0>)
 802abd8:	681a      	ldr	r2, [r3, #0]
 802abda:	68fb      	ldr	r3, [r7, #12]
 802abdc:	3304      	adds	r3, #4
 802abde:	4619      	mov	r1, r3
 802abe0:	4610      	mov	r0, r2
 802abe2:	f7fd fdda 	bl	802879a <vListInsert>
 802abe6:	e016      	b.n	802ac16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802abe8:	2300      	movs	r3, #0
 802abea:	9300      	str	r3, [sp, #0]
 802abec:	2300      	movs	r3, #0
 802abee:	693a      	ldr	r2, [r7, #16]
 802abf0:	2100      	movs	r1, #0
 802abf2:	68f8      	ldr	r0, [r7, #12]
 802abf4:	f7ff fd60 	bl	802a6b8 <xTimerGenericCommand>
 802abf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 802abfa:	687b      	ldr	r3, [r7, #4]
 802abfc:	2b00      	cmp	r3, #0
 802abfe:	d10a      	bne.n	802ac16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 802ac00:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ac04:	f383 8811 	msr	BASEPRI, r3
 802ac08:	f3bf 8f6f 	isb	sy
 802ac0c:	f3bf 8f4f 	dsb	sy
 802ac10:	603b      	str	r3, [r7, #0]
}
 802ac12:	bf00      	nop
 802ac14:	e7fe      	b.n	802ac14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802ac16:	4b09      	ldr	r3, [pc, #36]	; (802ac3c <prvSwitchTimerLists+0xc0>)
 802ac18:	681b      	ldr	r3, [r3, #0]
 802ac1a:	681b      	ldr	r3, [r3, #0]
 802ac1c:	2b00      	cmp	r3, #0
 802ac1e:	d1b1      	bne.n	802ab84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 802ac20:	4b06      	ldr	r3, [pc, #24]	; (802ac3c <prvSwitchTimerLists+0xc0>)
 802ac22:	681b      	ldr	r3, [r3, #0]
 802ac24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 802ac26:	4b06      	ldr	r3, [pc, #24]	; (802ac40 <prvSwitchTimerLists+0xc4>)
 802ac28:	681b      	ldr	r3, [r3, #0]
 802ac2a:	4a04      	ldr	r2, [pc, #16]	; (802ac3c <prvSwitchTimerLists+0xc0>)
 802ac2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 802ac2e:	4a04      	ldr	r2, [pc, #16]	; (802ac40 <prvSwitchTimerLists+0xc4>)
 802ac30:	697b      	ldr	r3, [r7, #20]
 802ac32:	6013      	str	r3, [r2, #0]
}
 802ac34:	bf00      	nop
 802ac36:	3718      	adds	r7, #24
 802ac38:	46bd      	mov	sp, r7
 802ac3a:	bd80      	pop	{r7, pc}
 802ac3c:	20001764 	.word	0x20001764
 802ac40:	20001768 	.word	0x20001768

0802ac44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 802ac44:	b580      	push	{r7, lr}
 802ac46:	b082      	sub	sp, #8
 802ac48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 802ac4a:	f000 f96b 	bl	802af24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 802ac4e:	4b15      	ldr	r3, [pc, #84]	; (802aca4 <prvCheckForValidListAndQueue+0x60>)
 802ac50:	681b      	ldr	r3, [r3, #0]
 802ac52:	2b00      	cmp	r3, #0
 802ac54:	d120      	bne.n	802ac98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 802ac56:	4814      	ldr	r0, [pc, #80]	; (802aca8 <prvCheckForValidListAndQueue+0x64>)
 802ac58:	f7fd fd4e 	bl	80286f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 802ac5c:	4813      	ldr	r0, [pc, #76]	; (802acac <prvCheckForValidListAndQueue+0x68>)
 802ac5e:	f7fd fd4b 	bl	80286f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 802ac62:	4b13      	ldr	r3, [pc, #76]	; (802acb0 <prvCheckForValidListAndQueue+0x6c>)
 802ac64:	4a10      	ldr	r2, [pc, #64]	; (802aca8 <prvCheckForValidListAndQueue+0x64>)
 802ac66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 802ac68:	4b12      	ldr	r3, [pc, #72]	; (802acb4 <prvCheckForValidListAndQueue+0x70>)
 802ac6a:	4a10      	ldr	r2, [pc, #64]	; (802acac <prvCheckForValidListAndQueue+0x68>)
 802ac6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 802ac6e:	2300      	movs	r3, #0
 802ac70:	9300      	str	r3, [sp, #0]
 802ac72:	4b11      	ldr	r3, [pc, #68]	; (802acb8 <prvCheckForValidListAndQueue+0x74>)
 802ac74:	4a11      	ldr	r2, [pc, #68]	; (802acbc <prvCheckForValidListAndQueue+0x78>)
 802ac76:	2110      	movs	r1, #16
 802ac78:	200a      	movs	r0, #10
 802ac7a:	f7fd fe59 	bl	8028930 <xQueueGenericCreateStatic>
 802ac7e:	4603      	mov	r3, r0
 802ac80:	4a08      	ldr	r2, [pc, #32]	; (802aca4 <prvCheckForValidListAndQueue+0x60>)
 802ac82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 802ac84:	4b07      	ldr	r3, [pc, #28]	; (802aca4 <prvCheckForValidListAndQueue+0x60>)
 802ac86:	681b      	ldr	r3, [r3, #0]
 802ac88:	2b00      	cmp	r3, #0
 802ac8a:	d005      	beq.n	802ac98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 802ac8c:	4b05      	ldr	r3, [pc, #20]	; (802aca4 <prvCheckForValidListAndQueue+0x60>)
 802ac8e:	681b      	ldr	r3, [r3, #0]
 802ac90:	490b      	ldr	r1, [pc, #44]	; (802acc0 <prvCheckForValidListAndQueue+0x7c>)
 802ac92:	4618      	mov	r0, r3
 802ac94:	f7fe fc12 	bl	80294bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802ac98:	f000 f974 	bl	802af84 <vPortExitCritical>
}
 802ac9c:	bf00      	nop
 802ac9e:	46bd      	mov	sp, r7
 802aca0:	bd80      	pop	{r7, pc}
 802aca2:	bf00      	nop
 802aca4:	2000176c 	.word	0x2000176c
 802aca8:	2000173c 	.word	0x2000173c
 802acac:	20001750 	.word	0x20001750
 802acb0:	20001764 	.word	0x20001764
 802acb4:	20001768 	.word	0x20001768
 802acb8:	20001818 	.word	0x20001818
 802acbc:	20001778 	.word	0x20001778
 802acc0:	0802dab0 	.word	0x0802dab0

0802acc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 802acc4:	b480      	push	{r7}
 802acc6:	b085      	sub	sp, #20
 802acc8:	af00      	add	r7, sp, #0
 802acca:	60f8      	str	r0, [r7, #12]
 802accc:	60b9      	str	r1, [r7, #8]
 802acce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 802acd0:	68fb      	ldr	r3, [r7, #12]
 802acd2:	3b04      	subs	r3, #4
 802acd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 802acd6:	68fb      	ldr	r3, [r7, #12]
 802acd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802acdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802acde:	68fb      	ldr	r3, [r7, #12]
 802ace0:	3b04      	subs	r3, #4
 802ace2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 802ace4:	68bb      	ldr	r3, [r7, #8]
 802ace6:	f023 0201 	bic.w	r2, r3, #1
 802acea:	68fb      	ldr	r3, [r7, #12]
 802acec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802acee:	68fb      	ldr	r3, [r7, #12]
 802acf0:	3b04      	subs	r3, #4
 802acf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 802acf4:	4a0c      	ldr	r2, [pc, #48]	; (802ad28 <pxPortInitialiseStack+0x64>)
 802acf6:	68fb      	ldr	r3, [r7, #12]
 802acf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 802acfa:	68fb      	ldr	r3, [r7, #12]
 802acfc:	3b14      	subs	r3, #20
 802acfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 802ad00:	687a      	ldr	r2, [r7, #4]
 802ad02:	68fb      	ldr	r3, [r7, #12]
 802ad04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 802ad06:	68fb      	ldr	r3, [r7, #12]
 802ad08:	3b04      	subs	r3, #4
 802ad0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 802ad0c:	68fb      	ldr	r3, [r7, #12]
 802ad0e:	f06f 0202 	mvn.w	r2, #2
 802ad12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 802ad14:	68fb      	ldr	r3, [r7, #12]
 802ad16:	3b20      	subs	r3, #32
 802ad18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 802ad1a:	68fb      	ldr	r3, [r7, #12]
}
 802ad1c:	4618      	mov	r0, r3
 802ad1e:	3714      	adds	r7, #20
 802ad20:	46bd      	mov	sp, r7
 802ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad26:	4770      	bx	lr
 802ad28:	0802ad2d 	.word	0x0802ad2d

0802ad2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 802ad2c:	b480      	push	{r7}
 802ad2e:	b085      	sub	sp, #20
 802ad30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 802ad32:	2300      	movs	r3, #0
 802ad34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 802ad36:	4b12      	ldr	r3, [pc, #72]	; (802ad80 <prvTaskExitError+0x54>)
 802ad38:	681b      	ldr	r3, [r3, #0]
 802ad3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ad3e:	d00a      	beq.n	802ad56 <prvTaskExitError+0x2a>
	__asm volatile
 802ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ad44:	f383 8811 	msr	BASEPRI, r3
 802ad48:	f3bf 8f6f 	isb	sy
 802ad4c:	f3bf 8f4f 	dsb	sy
 802ad50:	60fb      	str	r3, [r7, #12]
}
 802ad52:	bf00      	nop
 802ad54:	e7fe      	b.n	802ad54 <prvTaskExitError+0x28>
	__asm volatile
 802ad56:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ad5a:	f383 8811 	msr	BASEPRI, r3
 802ad5e:	f3bf 8f6f 	isb	sy
 802ad62:	f3bf 8f4f 	dsb	sy
 802ad66:	60bb      	str	r3, [r7, #8]
}
 802ad68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 802ad6a:	bf00      	nop
 802ad6c:	687b      	ldr	r3, [r7, #4]
 802ad6e:	2b00      	cmp	r3, #0
 802ad70:	d0fc      	beq.n	802ad6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 802ad72:	bf00      	nop
 802ad74:	bf00      	nop
 802ad76:	3714      	adds	r7, #20
 802ad78:	46bd      	mov	sp, r7
 802ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad7e:	4770      	bx	lr
 802ad80:	20000368 	.word	0x20000368
	...

0802ad90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 802ad90:	4b07      	ldr	r3, [pc, #28]	; (802adb0 <pxCurrentTCBConst2>)
 802ad92:	6819      	ldr	r1, [r3, #0]
 802ad94:	6808      	ldr	r0, [r1, #0]
 802ad96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ad9a:	f380 8809 	msr	PSP, r0
 802ad9e:	f3bf 8f6f 	isb	sy
 802ada2:	f04f 0000 	mov.w	r0, #0
 802ada6:	f380 8811 	msr	BASEPRI, r0
 802adaa:	4770      	bx	lr
 802adac:	f3af 8000 	nop.w

0802adb0 <pxCurrentTCBConst2>:
 802adb0:	2000123c 	.word	0x2000123c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 802adb4:	bf00      	nop
 802adb6:	bf00      	nop

0802adb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 802adb8:	4808      	ldr	r0, [pc, #32]	; (802addc <prvPortStartFirstTask+0x24>)
 802adba:	6800      	ldr	r0, [r0, #0]
 802adbc:	6800      	ldr	r0, [r0, #0]
 802adbe:	f380 8808 	msr	MSP, r0
 802adc2:	f04f 0000 	mov.w	r0, #0
 802adc6:	f380 8814 	msr	CONTROL, r0
 802adca:	b662      	cpsie	i
 802adcc:	b661      	cpsie	f
 802adce:	f3bf 8f4f 	dsb	sy
 802add2:	f3bf 8f6f 	isb	sy
 802add6:	df00      	svc	0
 802add8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802adda:	bf00      	nop
 802addc:	e000ed08 	.word	0xe000ed08

0802ade0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 802ade0:	b580      	push	{r7, lr}
 802ade2:	b086      	sub	sp, #24
 802ade4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 802ade6:	4b46      	ldr	r3, [pc, #280]	; (802af00 <xPortStartScheduler+0x120>)
 802ade8:	681b      	ldr	r3, [r3, #0]
 802adea:	4a46      	ldr	r2, [pc, #280]	; (802af04 <xPortStartScheduler+0x124>)
 802adec:	4293      	cmp	r3, r2
 802adee:	d10a      	bne.n	802ae06 <xPortStartScheduler+0x26>
	__asm volatile
 802adf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 802adf4:	f383 8811 	msr	BASEPRI, r3
 802adf8:	f3bf 8f6f 	isb	sy
 802adfc:	f3bf 8f4f 	dsb	sy
 802ae00:	613b      	str	r3, [r7, #16]
}
 802ae02:	bf00      	nop
 802ae04:	e7fe      	b.n	802ae04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 802ae06:	4b3e      	ldr	r3, [pc, #248]	; (802af00 <xPortStartScheduler+0x120>)
 802ae08:	681b      	ldr	r3, [r3, #0]
 802ae0a:	4a3f      	ldr	r2, [pc, #252]	; (802af08 <xPortStartScheduler+0x128>)
 802ae0c:	4293      	cmp	r3, r2
 802ae0e:	d10a      	bne.n	802ae26 <xPortStartScheduler+0x46>
	__asm volatile
 802ae10:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ae14:	f383 8811 	msr	BASEPRI, r3
 802ae18:	f3bf 8f6f 	isb	sy
 802ae1c:	f3bf 8f4f 	dsb	sy
 802ae20:	60fb      	str	r3, [r7, #12]
}
 802ae22:	bf00      	nop
 802ae24:	e7fe      	b.n	802ae24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 802ae26:	4b39      	ldr	r3, [pc, #228]	; (802af0c <xPortStartScheduler+0x12c>)
 802ae28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 802ae2a:	697b      	ldr	r3, [r7, #20]
 802ae2c:	781b      	ldrb	r3, [r3, #0]
 802ae2e:	b2db      	uxtb	r3, r3
 802ae30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 802ae32:	697b      	ldr	r3, [r7, #20]
 802ae34:	22ff      	movs	r2, #255	; 0xff
 802ae36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 802ae38:	697b      	ldr	r3, [r7, #20]
 802ae3a:	781b      	ldrb	r3, [r3, #0]
 802ae3c:	b2db      	uxtb	r3, r3
 802ae3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 802ae40:	78fb      	ldrb	r3, [r7, #3]
 802ae42:	b2db      	uxtb	r3, r3
 802ae44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 802ae48:	b2da      	uxtb	r2, r3
 802ae4a:	4b31      	ldr	r3, [pc, #196]	; (802af10 <xPortStartScheduler+0x130>)
 802ae4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 802ae4e:	4b31      	ldr	r3, [pc, #196]	; (802af14 <xPortStartScheduler+0x134>)
 802ae50:	2207      	movs	r2, #7
 802ae52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802ae54:	e009      	b.n	802ae6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 802ae56:	4b2f      	ldr	r3, [pc, #188]	; (802af14 <xPortStartScheduler+0x134>)
 802ae58:	681b      	ldr	r3, [r3, #0]
 802ae5a:	3b01      	subs	r3, #1
 802ae5c:	4a2d      	ldr	r2, [pc, #180]	; (802af14 <xPortStartScheduler+0x134>)
 802ae5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 802ae60:	78fb      	ldrb	r3, [r7, #3]
 802ae62:	b2db      	uxtb	r3, r3
 802ae64:	005b      	lsls	r3, r3, #1
 802ae66:	b2db      	uxtb	r3, r3
 802ae68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802ae6a:	78fb      	ldrb	r3, [r7, #3]
 802ae6c:	b2db      	uxtb	r3, r3
 802ae6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802ae72:	2b80      	cmp	r3, #128	; 0x80
 802ae74:	d0ef      	beq.n	802ae56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 802ae76:	4b27      	ldr	r3, [pc, #156]	; (802af14 <xPortStartScheduler+0x134>)
 802ae78:	681b      	ldr	r3, [r3, #0]
 802ae7a:	f1c3 0307 	rsb	r3, r3, #7
 802ae7e:	2b04      	cmp	r3, #4
 802ae80:	d00a      	beq.n	802ae98 <xPortStartScheduler+0xb8>
	__asm volatile
 802ae82:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ae86:	f383 8811 	msr	BASEPRI, r3
 802ae8a:	f3bf 8f6f 	isb	sy
 802ae8e:	f3bf 8f4f 	dsb	sy
 802ae92:	60bb      	str	r3, [r7, #8]
}
 802ae94:	bf00      	nop
 802ae96:	e7fe      	b.n	802ae96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 802ae98:	4b1e      	ldr	r3, [pc, #120]	; (802af14 <xPortStartScheduler+0x134>)
 802ae9a:	681b      	ldr	r3, [r3, #0]
 802ae9c:	021b      	lsls	r3, r3, #8
 802ae9e:	4a1d      	ldr	r2, [pc, #116]	; (802af14 <xPortStartScheduler+0x134>)
 802aea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 802aea2:	4b1c      	ldr	r3, [pc, #112]	; (802af14 <xPortStartScheduler+0x134>)
 802aea4:	681b      	ldr	r3, [r3, #0]
 802aea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802aeaa:	4a1a      	ldr	r2, [pc, #104]	; (802af14 <xPortStartScheduler+0x134>)
 802aeac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 802aeae:	687b      	ldr	r3, [r7, #4]
 802aeb0:	b2da      	uxtb	r2, r3
 802aeb2:	697b      	ldr	r3, [r7, #20]
 802aeb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 802aeb6:	4b18      	ldr	r3, [pc, #96]	; (802af18 <xPortStartScheduler+0x138>)
 802aeb8:	681b      	ldr	r3, [r3, #0]
 802aeba:	4a17      	ldr	r2, [pc, #92]	; (802af18 <xPortStartScheduler+0x138>)
 802aebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802aec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 802aec2:	4b15      	ldr	r3, [pc, #84]	; (802af18 <xPortStartScheduler+0x138>)
 802aec4:	681b      	ldr	r3, [r3, #0]
 802aec6:	4a14      	ldr	r2, [pc, #80]	; (802af18 <xPortStartScheduler+0x138>)
 802aec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 802aecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 802aece:	f000 f8dd 	bl	802b08c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 802aed2:	4b12      	ldr	r3, [pc, #72]	; (802af1c <xPortStartScheduler+0x13c>)
 802aed4:	2200      	movs	r2, #0
 802aed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 802aed8:	f000 f8fc 	bl	802b0d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 802aedc:	4b10      	ldr	r3, [pc, #64]	; (802af20 <xPortStartScheduler+0x140>)
 802aede:	681b      	ldr	r3, [r3, #0]
 802aee0:	4a0f      	ldr	r2, [pc, #60]	; (802af20 <xPortStartScheduler+0x140>)
 802aee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 802aee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 802aee8:	f7ff ff66 	bl	802adb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 802aeec:	f7fe ffec 	bl	8029ec8 <vTaskSwitchContext>
	prvTaskExitError();
 802aef0:	f7ff ff1c 	bl	802ad2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 802aef4:	2300      	movs	r3, #0
}
 802aef6:	4618      	mov	r0, r3
 802aef8:	3718      	adds	r7, #24
 802aefa:	46bd      	mov	sp, r7
 802aefc:	bd80      	pop	{r7, pc}
 802aefe:	bf00      	nop
 802af00:	e000ed00 	.word	0xe000ed00
 802af04:	410fc271 	.word	0x410fc271
 802af08:	410fc270 	.word	0x410fc270
 802af0c:	e000e400 	.word	0xe000e400
 802af10:	20001868 	.word	0x20001868
 802af14:	2000186c 	.word	0x2000186c
 802af18:	e000ed20 	.word	0xe000ed20
 802af1c:	20000368 	.word	0x20000368
 802af20:	e000ef34 	.word	0xe000ef34

0802af24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 802af24:	b480      	push	{r7}
 802af26:	b083      	sub	sp, #12
 802af28:	af00      	add	r7, sp, #0
	__asm volatile
 802af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802af2e:	f383 8811 	msr	BASEPRI, r3
 802af32:	f3bf 8f6f 	isb	sy
 802af36:	f3bf 8f4f 	dsb	sy
 802af3a:	607b      	str	r3, [r7, #4]
}
 802af3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 802af3e:	4b0f      	ldr	r3, [pc, #60]	; (802af7c <vPortEnterCritical+0x58>)
 802af40:	681b      	ldr	r3, [r3, #0]
 802af42:	3301      	adds	r3, #1
 802af44:	4a0d      	ldr	r2, [pc, #52]	; (802af7c <vPortEnterCritical+0x58>)
 802af46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 802af48:	4b0c      	ldr	r3, [pc, #48]	; (802af7c <vPortEnterCritical+0x58>)
 802af4a:	681b      	ldr	r3, [r3, #0]
 802af4c:	2b01      	cmp	r3, #1
 802af4e:	d10f      	bne.n	802af70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 802af50:	4b0b      	ldr	r3, [pc, #44]	; (802af80 <vPortEnterCritical+0x5c>)
 802af52:	681b      	ldr	r3, [r3, #0]
 802af54:	b2db      	uxtb	r3, r3
 802af56:	2b00      	cmp	r3, #0
 802af58:	d00a      	beq.n	802af70 <vPortEnterCritical+0x4c>
	__asm volatile
 802af5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802af5e:	f383 8811 	msr	BASEPRI, r3
 802af62:	f3bf 8f6f 	isb	sy
 802af66:	f3bf 8f4f 	dsb	sy
 802af6a:	603b      	str	r3, [r7, #0]
}
 802af6c:	bf00      	nop
 802af6e:	e7fe      	b.n	802af6e <vPortEnterCritical+0x4a>
	}
}
 802af70:	bf00      	nop
 802af72:	370c      	adds	r7, #12
 802af74:	46bd      	mov	sp, r7
 802af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af7a:	4770      	bx	lr
 802af7c:	20000368 	.word	0x20000368
 802af80:	e000ed04 	.word	0xe000ed04

0802af84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 802af84:	b480      	push	{r7}
 802af86:	b083      	sub	sp, #12
 802af88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 802af8a:	4b12      	ldr	r3, [pc, #72]	; (802afd4 <vPortExitCritical+0x50>)
 802af8c:	681b      	ldr	r3, [r3, #0]
 802af8e:	2b00      	cmp	r3, #0
 802af90:	d10a      	bne.n	802afa8 <vPortExitCritical+0x24>
	__asm volatile
 802af92:	f04f 0350 	mov.w	r3, #80	; 0x50
 802af96:	f383 8811 	msr	BASEPRI, r3
 802af9a:	f3bf 8f6f 	isb	sy
 802af9e:	f3bf 8f4f 	dsb	sy
 802afa2:	607b      	str	r3, [r7, #4]
}
 802afa4:	bf00      	nop
 802afa6:	e7fe      	b.n	802afa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 802afa8:	4b0a      	ldr	r3, [pc, #40]	; (802afd4 <vPortExitCritical+0x50>)
 802afaa:	681b      	ldr	r3, [r3, #0]
 802afac:	3b01      	subs	r3, #1
 802afae:	4a09      	ldr	r2, [pc, #36]	; (802afd4 <vPortExitCritical+0x50>)
 802afb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 802afb2:	4b08      	ldr	r3, [pc, #32]	; (802afd4 <vPortExitCritical+0x50>)
 802afb4:	681b      	ldr	r3, [r3, #0]
 802afb6:	2b00      	cmp	r3, #0
 802afb8:	d105      	bne.n	802afc6 <vPortExitCritical+0x42>
 802afba:	2300      	movs	r3, #0
 802afbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 802afbe:	683b      	ldr	r3, [r7, #0]
 802afc0:	f383 8811 	msr	BASEPRI, r3
}
 802afc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 802afc6:	bf00      	nop
 802afc8:	370c      	adds	r7, #12
 802afca:	46bd      	mov	sp, r7
 802afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802afd0:	4770      	bx	lr
 802afd2:	bf00      	nop
 802afd4:	20000368 	.word	0x20000368
	...

0802afe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 802afe0:	f3ef 8009 	mrs	r0, PSP
 802afe4:	f3bf 8f6f 	isb	sy
 802afe8:	4b15      	ldr	r3, [pc, #84]	; (802b040 <pxCurrentTCBConst>)
 802afea:	681a      	ldr	r2, [r3, #0]
 802afec:	f01e 0f10 	tst.w	lr, #16
 802aff0:	bf08      	it	eq
 802aff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 802aff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802affa:	6010      	str	r0, [r2, #0]
 802affc:	e92d 0009 	stmdb	sp!, {r0, r3}
 802b000:	f04f 0050 	mov.w	r0, #80	; 0x50
 802b004:	f380 8811 	msr	BASEPRI, r0
 802b008:	f3bf 8f4f 	dsb	sy
 802b00c:	f3bf 8f6f 	isb	sy
 802b010:	f7fe ff5a 	bl	8029ec8 <vTaskSwitchContext>
 802b014:	f04f 0000 	mov.w	r0, #0
 802b018:	f380 8811 	msr	BASEPRI, r0
 802b01c:	bc09      	pop	{r0, r3}
 802b01e:	6819      	ldr	r1, [r3, #0]
 802b020:	6808      	ldr	r0, [r1, #0]
 802b022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b026:	f01e 0f10 	tst.w	lr, #16
 802b02a:	bf08      	it	eq
 802b02c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 802b030:	f380 8809 	msr	PSP, r0
 802b034:	f3bf 8f6f 	isb	sy
 802b038:	4770      	bx	lr
 802b03a:	bf00      	nop
 802b03c:	f3af 8000 	nop.w

0802b040 <pxCurrentTCBConst>:
 802b040:	2000123c 	.word	0x2000123c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 802b044:	bf00      	nop
 802b046:	bf00      	nop

0802b048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 802b048:	b580      	push	{r7, lr}
 802b04a:	b082      	sub	sp, #8
 802b04c:	af00      	add	r7, sp, #0
	__asm volatile
 802b04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b052:	f383 8811 	msr	BASEPRI, r3
 802b056:	f3bf 8f6f 	isb	sy
 802b05a:	f3bf 8f4f 	dsb	sy
 802b05e:	607b      	str	r3, [r7, #4]
}
 802b060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 802b062:	f7fe fe73 	bl	8029d4c <xTaskIncrementTick>
 802b066:	4603      	mov	r3, r0
 802b068:	2b00      	cmp	r3, #0
 802b06a:	d003      	beq.n	802b074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 802b06c:	4b06      	ldr	r3, [pc, #24]	; (802b088 <xPortSysTickHandler+0x40>)
 802b06e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802b072:	601a      	str	r2, [r3, #0]
 802b074:	2300      	movs	r3, #0
 802b076:	603b      	str	r3, [r7, #0]
	__asm volatile
 802b078:	683b      	ldr	r3, [r7, #0]
 802b07a:	f383 8811 	msr	BASEPRI, r3
}
 802b07e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 802b080:	bf00      	nop
 802b082:	3708      	adds	r7, #8
 802b084:	46bd      	mov	sp, r7
 802b086:	bd80      	pop	{r7, pc}
 802b088:	e000ed04 	.word	0xe000ed04

0802b08c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 802b08c:	b480      	push	{r7}
 802b08e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 802b090:	4b0b      	ldr	r3, [pc, #44]	; (802b0c0 <vPortSetupTimerInterrupt+0x34>)
 802b092:	2200      	movs	r2, #0
 802b094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 802b096:	4b0b      	ldr	r3, [pc, #44]	; (802b0c4 <vPortSetupTimerInterrupt+0x38>)
 802b098:	2200      	movs	r2, #0
 802b09a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 802b09c:	4b0a      	ldr	r3, [pc, #40]	; (802b0c8 <vPortSetupTimerInterrupt+0x3c>)
 802b09e:	681b      	ldr	r3, [r3, #0]
 802b0a0:	4a0a      	ldr	r2, [pc, #40]	; (802b0cc <vPortSetupTimerInterrupt+0x40>)
 802b0a2:	fba2 2303 	umull	r2, r3, r2, r3
 802b0a6:	099b      	lsrs	r3, r3, #6
 802b0a8:	4a09      	ldr	r2, [pc, #36]	; (802b0d0 <vPortSetupTimerInterrupt+0x44>)
 802b0aa:	3b01      	subs	r3, #1
 802b0ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802b0ae:	4b04      	ldr	r3, [pc, #16]	; (802b0c0 <vPortSetupTimerInterrupt+0x34>)
 802b0b0:	2207      	movs	r2, #7
 802b0b2:	601a      	str	r2, [r3, #0]
}
 802b0b4:	bf00      	nop
 802b0b6:	46bd      	mov	sp, r7
 802b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0bc:	4770      	bx	lr
 802b0be:	bf00      	nop
 802b0c0:	e000e010 	.word	0xe000e010
 802b0c4:	e000e018 	.word	0xe000e018
 802b0c8:	20000080 	.word	0x20000080
 802b0cc:	10624dd3 	.word	0x10624dd3
 802b0d0:	e000e014 	.word	0xe000e014

0802b0d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 802b0d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 802b0e4 <vPortEnableVFP+0x10>
 802b0d8:	6801      	ldr	r1, [r0, #0]
 802b0da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802b0de:	6001      	str	r1, [r0, #0]
 802b0e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 802b0e2:	bf00      	nop
 802b0e4:	e000ed88 	.word	0xe000ed88

0802b0e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 802b0e8:	b480      	push	{r7}
 802b0ea:	b085      	sub	sp, #20
 802b0ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802b0ee:	f3ef 8305 	mrs	r3, IPSR
 802b0f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 802b0f4:	68fb      	ldr	r3, [r7, #12]
 802b0f6:	2b0f      	cmp	r3, #15
 802b0f8:	d914      	bls.n	802b124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802b0fa:	4a17      	ldr	r2, [pc, #92]	; (802b158 <vPortValidateInterruptPriority+0x70>)
 802b0fc:	68fb      	ldr	r3, [r7, #12]
 802b0fe:	4413      	add	r3, r2
 802b100:	781b      	ldrb	r3, [r3, #0]
 802b102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 802b104:	4b15      	ldr	r3, [pc, #84]	; (802b15c <vPortValidateInterruptPriority+0x74>)
 802b106:	781b      	ldrb	r3, [r3, #0]
 802b108:	7afa      	ldrb	r2, [r7, #11]
 802b10a:	429a      	cmp	r2, r3
 802b10c:	d20a      	bcs.n	802b124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 802b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b112:	f383 8811 	msr	BASEPRI, r3
 802b116:	f3bf 8f6f 	isb	sy
 802b11a:	f3bf 8f4f 	dsb	sy
 802b11e:	607b      	str	r3, [r7, #4]
}
 802b120:	bf00      	nop
 802b122:	e7fe      	b.n	802b122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 802b124:	4b0e      	ldr	r3, [pc, #56]	; (802b160 <vPortValidateInterruptPriority+0x78>)
 802b126:	681b      	ldr	r3, [r3, #0]
 802b128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 802b12c:	4b0d      	ldr	r3, [pc, #52]	; (802b164 <vPortValidateInterruptPriority+0x7c>)
 802b12e:	681b      	ldr	r3, [r3, #0]
 802b130:	429a      	cmp	r2, r3
 802b132:	d90a      	bls.n	802b14a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 802b134:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b138:	f383 8811 	msr	BASEPRI, r3
 802b13c:	f3bf 8f6f 	isb	sy
 802b140:	f3bf 8f4f 	dsb	sy
 802b144:	603b      	str	r3, [r7, #0]
}
 802b146:	bf00      	nop
 802b148:	e7fe      	b.n	802b148 <vPortValidateInterruptPriority+0x60>
	}
 802b14a:	bf00      	nop
 802b14c:	3714      	adds	r7, #20
 802b14e:	46bd      	mov	sp, r7
 802b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b154:	4770      	bx	lr
 802b156:	bf00      	nop
 802b158:	e000e3f0 	.word	0xe000e3f0
 802b15c:	20001868 	.word	0x20001868
 802b160:	e000ed0c 	.word	0xe000ed0c
 802b164:	2000186c 	.word	0x2000186c

0802b168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 802b168:	b580      	push	{r7, lr}
 802b16a:	b08a      	sub	sp, #40	; 0x28
 802b16c:	af00      	add	r7, sp, #0
 802b16e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 802b170:	2300      	movs	r3, #0
 802b172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 802b174:	f7fe fd18 	bl	8029ba8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 802b178:	4b5b      	ldr	r3, [pc, #364]	; (802b2e8 <pvPortMalloc+0x180>)
 802b17a:	681b      	ldr	r3, [r3, #0]
 802b17c:	2b00      	cmp	r3, #0
 802b17e:	d101      	bne.n	802b184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 802b180:	f000 f920 	bl	802b3c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 802b184:	4b59      	ldr	r3, [pc, #356]	; (802b2ec <pvPortMalloc+0x184>)
 802b186:	681a      	ldr	r2, [r3, #0]
 802b188:	687b      	ldr	r3, [r7, #4]
 802b18a:	4013      	ands	r3, r2
 802b18c:	2b00      	cmp	r3, #0
 802b18e:	f040 8093 	bne.w	802b2b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 802b192:	687b      	ldr	r3, [r7, #4]
 802b194:	2b00      	cmp	r3, #0
 802b196:	d01d      	beq.n	802b1d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 802b198:	2208      	movs	r2, #8
 802b19a:	687b      	ldr	r3, [r7, #4]
 802b19c:	4413      	add	r3, r2
 802b19e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 802b1a0:	687b      	ldr	r3, [r7, #4]
 802b1a2:	f003 0307 	and.w	r3, r3, #7
 802b1a6:	2b00      	cmp	r3, #0
 802b1a8:	d014      	beq.n	802b1d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 802b1aa:	687b      	ldr	r3, [r7, #4]
 802b1ac:	f023 0307 	bic.w	r3, r3, #7
 802b1b0:	3308      	adds	r3, #8
 802b1b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 802b1b4:	687b      	ldr	r3, [r7, #4]
 802b1b6:	f003 0307 	and.w	r3, r3, #7
 802b1ba:	2b00      	cmp	r3, #0
 802b1bc:	d00a      	beq.n	802b1d4 <pvPortMalloc+0x6c>
	__asm volatile
 802b1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b1c2:	f383 8811 	msr	BASEPRI, r3
 802b1c6:	f3bf 8f6f 	isb	sy
 802b1ca:	f3bf 8f4f 	dsb	sy
 802b1ce:	617b      	str	r3, [r7, #20]
}
 802b1d0:	bf00      	nop
 802b1d2:	e7fe      	b.n	802b1d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 802b1d4:	687b      	ldr	r3, [r7, #4]
 802b1d6:	2b00      	cmp	r3, #0
 802b1d8:	d06e      	beq.n	802b2b8 <pvPortMalloc+0x150>
 802b1da:	4b45      	ldr	r3, [pc, #276]	; (802b2f0 <pvPortMalloc+0x188>)
 802b1dc:	681b      	ldr	r3, [r3, #0]
 802b1de:	687a      	ldr	r2, [r7, #4]
 802b1e0:	429a      	cmp	r2, r3
 802b1e2:	d869      	bhi.n	802b2b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 802b1e4:	4b43      	ldr	r3, [pc, #268]	; (802b2f4 <pvPortMalloc+0x18c>)
 802b1e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 802b1e8:	4b42      	ldr	r3, [pc, #264]	; (802b2f4 <pvPortMalloc+0x18c>)
 802b1ea:	681b      	ldr	r3, [r3, #0]
 802b1ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802b1ee:	e004      	b.n	802b1fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 802b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b1f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 802b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b1f6:	681b      	ldr	r3, [r3, #0]
 802b1f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802b1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b1fc:	685b      	ldr	r3, [r3, #4]
 802b1fe:	687a      	ldr	r2, [r7, #4]
 802b200:	429a      	cmp	r2, r3
 802b202:	d903      	bls.n	802b20c <pvPortMalloc+0xa4>
 802b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b206:	681b      	ldr	r3, [r3, #0]
 802b208:	2b00      	cmp	r3, #0
 802b20a:	d1f1      	bne.n	802b1f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 802b20c:	4b36      	ldr	r3, [pc, #216]	; (802b2e8 <pvPortMalloc+0x180>)
 802b20e:	681b      	ldr	r3, [r3, #0]
 802b210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b212:	429a      	cmp	r2, r3
 802b214:	d050      	beq.n	802b2b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 802b216:	6a3b      	ldr	r3, [r7, #32]
 802b218:	681b      	ldr	r3, [r3, #0]
 802b21a:	2208      	movs	r2, #8
 802b21c:	4413      	add	r3, r2
 802b21e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 802b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b222:	681a      	ldr	r2, [r3, #0]
 802b224:	6a3b      	ldr	r3, [r7, #32]
 802b226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 802b228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b22a:	685a      	ldr	r2, [r3, #4]
 802b22c:	687b      	ldr	r3, [r7, #4]
 802b22e:	1ad2      	subs	r2, r2, r3
 802b230:	2308      	movs	r3, #8
 802b232:	005b      	lsls	r3, r3, #1
 802b234:	429a      	cmp	r2, r3
 802b236:	d91f      	bls.n	802b278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 802b238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b23a:	687b      	ldr	r3, [r7, #4]
 802b23c:	4413      	add	r3, r2
 802b23e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 802b240:	69bb      	ldr	r3, [r7, #24]
 802b242:	f003 0307 	and.w	r3, r3, #7
 802b246:	2b00      	cmp	r3, #0
 802b248:	d00a      	beq.n	802b260 <pvPortMalloc+0xf8>
	__asm volatile
 802b24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b24e:	f383 8811 	msr	BASEPRI, r3
 802b252:	f3bf 8f6f 	isb	sy
 802b256:	f3bf 8f4f 	dsb	sy
 802b25a:	613b      	str	r3, [r7, #16]
}
 802b25c:	bf00      	nop
 802b25e:	e7fe      	b.n	802b25e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 802b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b262:	685a      	ldr	r2, [r3, #4]
 802b264:	687b      	ldr	r3, [r7, #4]
 802b266:	1ad2      	subs	r2, r2, r3
 802b268:	69bb      	ldr	r3, [r7, #24]
 802b26a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 802b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b26e:	687a      	ldr	r2, [r7, #4]
 802b270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 802b272:	69b8      	ldr	r0, [r7, #24]
 802b274:	f000 f90a 	bl	802b48c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 802b278:	4b1d      	ldr	r3, [pc, #116]	; (802b2f0 <pvPortMalloc+0x188>)
 802b27a:	681a      	ldr	r2, [r3, #0]
 802b27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b27e:	685b      	ldr	r3, [r3, #4]
 802b280:	1ad3      	subs	r3, r2, r3
 802b282:	4a1b      	ldr	r2, [pc, #108]	; (802b2f0 <pvPortMalloc+0x188>)
 802b284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 802b286:	4b1a      	ldr	r3, [pc, #104]	; (802b2f0 <pvPortMalloc+0x188>)
 802b288:	681a      	ldr	r2, [r3, #0]
 802b28a:	4b1b      	ldr	r3, [pc, #108]	; (802b2f8 <pvPortMalloc+0x190>)
 802b28c:	681b      	ldr	r3, [r3, #0]
 802b28e:	429a      	cmp	r2, r3
 802b290:	d203      	bcs.n	802b29a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 802b292:	4b17      	ldr	r3, [pc, #92]	; (802b2f0 <pvPortMalloc+0x188>)
 802b294:	681b      	ldr	r3, [r3, #0]
 802b296:	4a18      	ldr	r2, [pc, #96]	; (802b2f8 <pvPortMalloc+0x190>)
 802b298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 802b29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b29c:	685a      	ldr	r2, [r3, #4]
 802b29e:	4b13      	ldr	r3, [pc, #76]	; (802b2ec <pvPortMalloc+0x184>)
 802b2a0:	681b      	ldr	r3, [r3, #0]
 802b2a2:	431a      	orrs	r2, r3
 802b2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b2a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 802b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b2aa:	2200      	movs	r2, #0
 802b2ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 802b2ae:	4b13      	ldr	r3, [pc, #76]	; (802b2fc <pvPortMalloc+0x194>)
 802b2b0:	681b      	ldr	r3, [r3, #0]
 802b2b2:	3301      	adds	r3, #1
 802b2b4:	4a11      	ldr	r2, [pc, #68]	; (802b2fc <pvPortMalloc+0x194>)
 802b2b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 802b2b8:	f7fe fc84 	bl	8029bc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 802b2bc:	69fb      	ldr	r3, [r7, #28]
 802b2be:	f003 0307 	and.w	r3, r3, #7
 802b2c2:	2b00      	cmp	r3, #0
 802b2c4:	d00a      	beq.n	802b2dc <pvPortMalloc+0x174>
	__asm volatile
 802b2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b2ca:	f383 8811 	msr	BASEPRI, r3
 802b2ce:	f3bf 8f6f 	isb	sy
 802b2d2:	f3bf 8f4f 	dsb	sy
 802b2d6:	60fb      	str	r3, [r7, #12]
}
 802b2d8:	bf00      	nop
 802b2da:	e7fe      	b.n	802b2da <pvPortMalloc+0x172>
	return pvReturn;
 802b2dc:	69fb      	ldr	r3, [r7, #28]
}
 802b2de:	4618      	mov	r0, r3
 802b2e0:	3728      	adds	r7, #40	; 0x28
 802b2e2:	46bd      	mov	sp, r7
 802b2e4:	bd80      	pop	{r7, pc}
 802b2e6:	bf00      	nop
 802b2e8:	20019f18 	.word	0x20019f18
 802b2ec:	20019f2c 	.word	0x20019f2c
 802b2f0:	20019f1c 	.word	0x20019f1c
 802b2f4:	20019f10 	.word	0x20019f10
 802b2f8:	20019f20 	.word	0x20019f20
 802b2fc:	20019f24 	.word	0x20019f24

0802b300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 802b300:	b580      	push	{r7, lr}
 802b302:	b086      	sub	sp, #24
 802b304:	af00      	add	r7, sp, #0
 802b306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 802b308:	687b      	ldr	r3, [r7, #4]
 802b30a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 802b30c:	687b      	ldr	r3, [r7, #4]
 802b30e:	2b00      	cmp	r3, #0
 802b310:	d04d      	beq.n	802b3ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 802b312:	2308      	movs	r3, #8
 802b314:	425b      	negs	r3, r3
 802b316:	697a      	ldr	r2, [r7, #20]
 802b318:	4413      	add	r3, r2
 802b31a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 802b31c:	697b      	ldr	r3, [r7, #20]
 802b31e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 802b320:	693b      	ldr	r3, [r7, #16]
 802b322:	685a      	ldr	r2, [r3, #4]
 802b324:	4b24      	ldr	r3, [pc, #144]	; (802b3b8 <vPortFree+0xb8>)
 802b326:	681b      	ldr	r3, [r3, #0]
 802b328:	4013      	ands	r3, r2
 802b32a:	2b00      	cmp	r3, #0
 802b32c:	d10a      	bne.n	802b344 <vPortFree+0x44>
	__asm volatile
 802b32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b332:	f383 8811 	msr	BASEPRI, r3
 802b336:	f3bf 8f6f 	isb	sy
 802b33a:	f3bf 8f4f 	dsb	sy
 802b33e:	60fb      	str	r3, [r7, #12]
}
 802b340:	bf00      	nop
 802b342:	e7fe      	b.n	802b342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 802b344:	693b      	ldr	r3, [r7, #16]
 802b346:	681b      	ldr	r3, [r3, #0]
 802b348:	2b00      	cmp	r3, #0
 802b34a:	d00a      	beq.n	802b362 <vPortFree+0x62>
	__asm volatile
 802b34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b350:	f383 8811 	msr	BASEPRI, r3
 802b354:	f3bf 8f6f 	isb	sy
 802b358:	f3bf 8f4f 	dsb	sy
 802b35c:	60bb      	str	r3, [r7, #8]
}
 802b35e:	bf00      	nop
 802b360:	e7fe      	b.n	802b360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 802b362:	693b      	ldr	r3, [r7, #16]
 802b364:	685a      	ldr	r2, [r3, #4]
 802b366:	4b14      	ldr	r3, [pc, #80]	; (802b3b8 <vPortFree+0xb8>)
 802b368:	681b      	ldr	r3, [r3, #0]
 802b36a:	4013      	ands	r3, r2
 802b36c:	2b00      	cmp	r3, #0
 802b36e:	d01e      	beq.n	802b3ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 802b370:	693b      	ldr	r3, [r7, #16]
 802b372:	681b      	ldr	r3, [r3, #0]
 802b374:	2b00      	cmp	r3, #0
 802b376:	d11a      	bne.n	802b3ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 802b378:	693b      	ldr	r3, [r7, #16]
 802b37a:	685a      	ldr	r2, [r3, #4]
 802b37c:	4b0e      	ldr	r3, [pc, #56]	; (802b3b8 <vPortFree+0xb8>)
 802b37e:	681b      	ldr	r3, [r3, #0]
 802b380:	43db      	mvns	r3, r3
 802b382:	401a      	ands	r2, r3
 802b384:	693b      	ldr	r3, [r7, #16]
 802b386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 802b388:	f7fe fc0e 	bl	8029ba8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 802b38c:	693b      	ldr	r3, [r7, #16]
 802b38e:	685a      	ldr	r2, [r3, #4]
 802b390:	4b0a      	ldr	r3, [pc, #40]	; (802b3bc <vPortFree+0xbc>)
 802b392:	681b      	ldr	r3, [r3, #0]
 802b394:	4413      	add	r3, r2
 802b396:	4a09      	ldr	r2, [pc, #36]	; (802b3bc <vPortFree+0xbc>)
 802b398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 802b39a:	6938      	ldr	r0, [r7, #16]
 802b39c:	f000 f876 	bl	802b48c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 802b3a0:	4b07      	ldr	r3, [pc, #28]	; (802b3c0 <vPortFree+0xc0>)
 802b3a2:	681b      	ldr	r3, [r3, #0]
 802b3a4:	3301      	adds	r3, #1
 802b3a6:	4a06      	ldr	r2, [pc, #24]	; (802b3c0 <vPortFree+0xc0>)
 802b3a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 802b3aa:	f7fe fc0b 	bl	8029bc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 802b3ae:	bf00      	nop
 802b3b0:	3718      	adds	r7, #24
 802b3b2:	46bd      	mov	sp, r7
 802b3b4:	bd80      	pop	{r7, pc}
 802b3b6:	bf00      	nop
 802b3b8:	20019f2c 	.word	0x20019f2c
 802b3bc:	20019f1c 	.word	0x20019f1c
 802b3c0:	20019f28 	.word	0x20019f28

0802b3c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 802b3c4:	b480      	push	{r7}
 802b3c6:	b085      	sub	sp, #20
 802b3c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 802b3ca:	4b29      	ldr	r3, [pc, #164]	; (802b470 <prvHeapInit+0xac>)
 802b3cc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 802b3ce:	4b29      	ldr	r3, [pc, #164]	; (802b474 <prvHeapInit+0xb0>)
 802b3d0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 802b3d2:	68fb      	ldr	r3, [r7, #12]
 802b3d4:	f003 0307 	and.w	r3, r3, #7
 802b3d8:	2b00      	cmp	r3, #0
 802b3da:	d00c      	beq.n	802b3f6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802b3dc:	68fb      	ldr	r3, [r7, #12]
 802b3de:	3307      	adds	r3, #7
 802b3e0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802b3e2:	68fb      	ldr	r3, [r7, #12]
 802b3e4:	f023 0307 	bic.w	r3, r3, #7
 802b3e8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 802b3ea:	68ba      	ldr	r2, [r7, #8]
 802b3ec:	68fb      	ldr	r3, [r7, #12]
 802b3ee:	1ad3      	subs	r3, r2, r3
 802b3f0:	4a20      	ldr	r2, [pc, #128]	; (802b474 <prvHeapInit+0xb0>)
 802b3f2:	4413      	add	r3, r2
 802b3f4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 802b3f6:	68fb      	ldr	r3, [r7, #12]
 802b3f8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802b3fa:	4a1f      	ldr	r2, [pc, #124]	; (802b478 <prvHeapInit+0xb4>)
 802b3fc:	687b      	ldr	r3, [r7, #4]
 802b3fe:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 802b400:	4b1d      	ldr	r3, [pc, #116]	; (802b478 <prvHeapInit+0xb4>)
 802b402:	2200      	movs	r2, #0
 802b404:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 802b406:	687b      	ldr	r3, [r7, #4]
 802b408:	68ba      	ldr	r2, [r7, #8]
 802b40a:	4413      	add	r3, r2
 802b40c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 802b40e:	2208      	movs	r2, #8
 802b410:	68fb      	ldr	r3, [r7, #12]
 802b412:	1a9b      	subs	r3, r3, r2
 802b414:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802b416:	68fb      	ldr	r3, [r7, #12]
 802b418:	f023 0307 	bic.w	r3, r3, #7
 802b41c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 802b41e:	68fb      	ldr	r3, [r7, #12]
 802b420:	4a16      	ldr	r2, [pc, #88]	; (802b47c <prvHeapInit+0xb8>)
 802b422:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 802b424:	4b15      	ldr	r3, [pc, #84]	; (802b47c <prvHeapInit+0xb8>)
 802b426:	681b      	ldr	r3, [r3, #0]
 802b428:	2200      	movs	r2, #0
 802b42a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 802b42c:	4b13      	ldr	r3, [pc, #76]	; (802b47c <prvHeapInit+0xb8>)
 802b42e:	681b      	ldr	r3, [r3, #0]
 802b430:	2200      	movs	r2, #0
 802b432:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 802b434:	687b      	ldr	r3, [r7, #4]
 802b436:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 802b438:	683b      	ldr	r3, [r7, #0]
 802b43a:	68fa      	ldr	r2, [r7, #12]
 802b43c:	1ad2      	subs	r2, r2, r3
 802b43e:	683b      	ldr	r3, [r7, #0]
 802b440:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 802b442:	4b0e      	ldr	r3, [pc, #56]	; (802b47c <prvHeapInit+0xb8>)
 802b444:	681a      	ldr	r2, [r3, #0]
 802b446:	683b      	ldr	r3, [r7, #0]
 802b448:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802b44a:	683b      	ldr	r3, [r7, #0]
 802b44c:	685b      	ldr	r3, [r3, #4]
 802b44e:	4a0c      	ldr	r2, [pc, #48]	; (802b480 <prvHeapInit+0xbc>)
 802b450:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802b452:	683b      	ldr	r3, [r7, #0]
 802b454:	685b      	ldr	r3, [r3, #4]
 802b456:	4a0b      	ldr	r2, [pc, #44]	; (802b484 <prvHeapInit+0xc0>)
 802b458:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 802b45a:	4b0b      	ldr	r3, [pc, #44]	; (802b488 <prvHeapInit+0xc4>)
 802b45c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 802b460:	601a      	str	r2, [r3, #0]
}
 802b462:	bf00      	nop
 802b464:	3714      	adds	r7, #20
 802b466:	46bd      	mov	sp, r7
 802b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b46c:	4770      	bx	lr
 802b46e:	bf00      	nop
 802b470:	000186a0 	.word	0x000186a0
 802b474:	20001870 	.word	0x20001870
 802b478:	20019f10 	.word	0x20019f10
 802b47c:	20019f18 	.word	0x20019f18
 802b480:	20019f20 	.word	0x20019f20
 802b484:	20019f1c 	.word	0x20019f1c
 802b488:	20019f2c 	.word	0x20019f2c

0802b48c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 802b48c:	b480      	push	{r7}
 802b48e:	b085      	sub	sp, #20
 802b490:	af00      	add	r7, sp, #0
 802b492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 802b494:	4b28      	ldr	r3, [pc, #160]	; (802b538 <prvInsertBlockIntoFreeList+0xac>)
 802b496:	60fb      	str	r3, [r7, #12]
 802b498:	e002      	b.n	802b4a0 <prvInsertBlockIntoFreeList+0x14>
 802b49a:	68fb      	ldr	r3, [r7, #12]
 802b49c:	681b      	ldr	r3, [r3, #0]
 802b49e:	60fb      	str	r3, [r7, #12]
 802b4a0:	68fb      	ldr	r3, [r7, #12]
 802b4a2:	681b      	ldr	r3, [r3, #0]
 802b4a4:	687a      	ldr	r2, [r7, #4]
 802b4a6:	429a      	cmp	r2, r3
 802b4a8:	d8f7      	bhi.n	802b49a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 802b4aa:	68fb      	ldr	r3, [r7, #12]
 802b4ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 802b4ae:	68fb      	ldr	r3, [r7, #12]
 802b4b0:	685b      	ldr	r3, [r3, #4]
 802b4b2:	68ba      	ldr	r2, [r7, #8]
 802b4b4:	4413      	add	r3, r2
 802b4b6:	687a      	ldr	r2, [r7, #4]
 802b4b8:	429a      	cmp	r2, r3
 802b4ba:	d108      	bne.n	802b4ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 802b4bc:	68fb      	ldr	r3, [r7, #12]
 802b4be:	685a      	ldr	r2, [r3, #4]
 802b4c0:	687b      	ldr	r3, [r7, #4]
 802b4c2:	685b      	ldr	r3, [r3, #4]
 802b4c4:	441a      	add	r2, r3
 802b4c6:	68fb      	ldr	r3, [r7, #12]
 802b4c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 802b4ca:	68fb      	ldr	r3, [r7, #12]
 802b4cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 802b4ce:	687b      	ldr	r3, [r7, #4]
 802b4d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802b4d2:	687b      	ldr	r3, [r7, #4]
 802b4d4:	685b      	ldr	r3, [r3, #4]
 802b4d6:	68ba      	ldr	r2, [r7, #8]
 802b4d8:	441a      	add	r2, r3
 802b4da:	68fb      	ldr	r3, [r7, #12]
 802b4dc:	681b      	ldr	r3, [r3, #0]
 802b4de:	429a      	cmp	r2, r3
 802b4e0:	d118      	bne.n	802b514 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802b4e2:	68fb      	ldr	r3, [r7, #12]
 802b4e4:	681a      	ldr	r2, [r3, #0]
 802b4e6:	4b15      	ldr	r3, [pc, #84]	; (802b53c <prvInsertBlockIntoFreeList+0xb0>)
 802b4e8:	681b      	ldr	r3, [r3, #0]
 802b4ea:	429a      	cmp	r2, r3
 802b4ec:	d00d      	beq.n	802b50a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 802b4ee:	687b      	ldr	r3, [r7, #4]
 802b4f0:	685a      	ldr	r2, [r3, #4]
 802b4f2:	68fb      	ldr	r3, [r7, #12]
 802b4f4:	681b      	ldr	r3, [r3, #0]
 802b4f6:	685b      	ldr	r3, [r3, #4]
 802b4f8:	441a      	add	r2, r3
 802b4fa:	687b      	ldr	r3, [r7, #4]
 802b4fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 802b4fe:	68fb      	ldr	r3, [r7, #12]
 802b500:	681b      	ldr	r3, [r3, #0]
 802b502:	681a      	ldr	r2, [r3, #0]
 802b504:	687b      	ldr	r3, [r7, #4]
 802b506:	601a      	str	r2, [r3, #0]
 802b508:	e008      	b.n	802b51c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 802b50a:	4b0c      	ldr	r3, [pc, #48]	; (802b53c <prvInsertBlockIntoFreeList+0xb0>)
 802b50c:	681a      	ldr	r2, [r3, #0]
 802b50e:	687b      	ldr	r3, [r7, #4]
 802b510:	601a      	str	r2, [r3, #0]
 802b512:	e003      	b.n	802b51c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 802b514:	68fb      	ldr	r3, [r7, #12]
 802b516:	681a      	ldr	r2, [r3, #0]
 802b518:	687b      	ldr	r3, [r7, #4]
 802b51a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 802b51c:	68fa      	ldr	r2, [r7, #12]
 802b51e:	687b      	ldr	r3, [r7, #4]
 802b520:	429a      	cmp	r2, r3
 802b522:	d002      	beq.n	802b52a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 802b524:	68fb      	ldr	r3, [r7, #12]
 802b526:	687a      	ldr	r2, [r7, #4]
 802b528:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802b52a:	bf00      	nop
 802b52c:	3714      	adds	r7, #20
 802b52e:	46bd      	mov	sp, r7
 802b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b534:	4770      	bx	lr
 802b536:	bf00      	nop
 802b538:	20019f10 	.word	0x20019f10
 802b53c:	20019f18 	.word	0x20019f18

0802b540 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 802b540:	b480      	push	{r7}
 802b542:	b083      	sub	sp, #12
 802b544:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 802b546:	4b24      	ldr	r3, [pc, #144]	; (802b5d8 <_DoInit+0x98>)
 802b548:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 802b54a:	687b      	ldr	r3, [r7, #4]
 802b54c:	2203      	movs	r2, #3
 802b54e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 802b550:	687b      	ldr	r3, [r7, #4]
 802b552:	2203      	movs	r2, #3
 802b554:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 802b556:	687b      	ldr	r3, [r7, #4]
 802b558:	4a20      	ldr	r2, [pc, #128]	; (802b5dc <_DoInit+0x9c>)
 802b55a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 802b55c:	687b      	ldr	r3, [r7, #4]
 802b55e:	4a20      	ldr	r2, [pc, #128]	; (802b5e0 <_DoInit+0xa0>)
 802b560:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 802b562:	687b      	ldr	r3, [r7, #4]
 802b564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802b568:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 802b56a:	687b      	ldr	r3, [r7, #4]
 802b56c:	2200      	movs	r2, #0
 802b56e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 802b570:	687b      	ldr	r3, [r7, #4]
 802b572:	2200      	movs	r2, #0
 802b574:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 802b576:	687b      	ldr	r3, [r7, #4]
 802b578:	2200      	movs	r2, #0
 802b57a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 802b57c:	687b      	ldr	r3, [r7, #4]
 802b57e:	4a17      	ldr	r2, [pc, #92]	; (802b5dc <_DoInit+0x9c>)
 802b580:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 802b582:	687b      	ldr	r3, [r7, #4]
 802b584:	4a17      	ldr	r2, [pc, #92]	; (802b5e4 <_DoInit+0xa4>)
 802b586:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 802b588:	687b      	ldr	r3, [r7, #4]
 802b58a:	2210      	movs	r2, #16
 802b58c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 802b58e:	687b      	ldr	r3, [r7, #4]
 802b590:	2200      	movs	r2, #0
 802b592:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 802b594:	687b      	ldr	r3, [r7, #4]
 802b596:	2200      	movs	r2, #0
 802b598:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 802b59a:	687b      	ldr	r3, [r7, #4]
 802b59c:	2200      	movs	r2, #0
 802b59e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 802b5a0:	687b      	ldr	r3, [r7, #4]
 802b5a2:	3307      	adds	r3, #7
 802b5a4:	4a10      	ldr	r2, [pc, #64]	; (802b5e8 <_DoInit+0xa8>)
 802b5a6:	6810      	ldr	r0, [r2, #0]
 802b5a8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 802b5aa:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 802b5ae:	687b      	ldr	r3, [r7, #4]
 802b5b0:	4a0e      	ldr	r2, [pc, #56]	; (802b5ec <_DoInit+0xac>)
 802b5b2:	6810      	ldr	r0, [r2, #0]
 802b5b4:	6018      	str	r0, [r3, #0]
 802b5b6:	8891      	ldrh	r1, [r2, #4]
 802b5b8:	7992      	ldrb	r2, [r2, #6]
 802b5ba:	8099      	strh	r1, [r3, #4]
 802b5bc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 802b5be:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 802b5c2:	687b      	ldr	r3, [r7, #4]
 802b5c4:	2220      	movs	r2, #32
 802b5c6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 802b5c8:	f3bf 8f5f 	dmb	sy
}
 802b5cc:	bf00      	nop
 802b5ce:	370c      	adds	r7, #12
 802b5d0:	46bd      	mov	sp, r7
 802b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b5d6:	4770      	bx	lr
 802b5d8:	2001df20 	.word	0x2001df20
 802b5dc:	0802dab8 	.word	0x0802dab8
 802b5e0:	20019f30 	.word	0x20019f30
 802b5e4:	2001a330 	.word	0x2001a330
 802b5e8:	0802dac4 	.word	0x0802dac4
 802b5ec:	0802dac8 	.word	0x0802dac8

0802b5f0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 802b5f0:	b580      	push	{r7, lr}
 802b5f2:	b08c      	sub	sp, #48	; 0x30
 802b5f4:	af00      	add	r7, sp, #0
 802b5f6:	60f8      	str	r0, [r7, #12]
 802b5f8:	60b9      	str	r1, [r7, #8]
 802b5fa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 802b5fc:	4b3e      	ldr	r3, [pc, #248]	; (802b6f8 <SEGGER_RTT_ReadNoLock+0x108>)
 802b5fe:	623b      	str	r3, [r7, #32]
 802b600:	6a3b      	ldr	r3, [r7, #32]
 802b602:	781b      	ldrb	r3, [r3, #0]
 802b604:	b2db      	uxtb	r3, r3
 802b606:	2b00      	cmp	r3, #0
 802b608:	d101      	bne.n	802b60e <SEGGER_RTT_ReadNoLock+0x1e>
 802b60a:	f7ff ff99 	bl	802b540 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 802b60e:	68fa      	ldr	r2, [r7, #12]
 802b610:	4613      	mov	r3, r2
 802b612:	005b      	lsls	r3, r3, #1
 802b614:	4413      	add	r3, r2
 802b616:	00db      	lsls	r3, r3, #3
 802b618:	3360      	adds	r3, #96	; 0x60
 802b61a:	4a37      	ldr	r2, [pc, #220]	; (802b6f8 <SEGGER_RTT_ReadNoLock+0x108>)
 802b61c:	4413      	add	r3, r2
 802b61e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 802b620:	68bb      	ldr	r3, [r7, #8]
 802b622:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 802b624:	69fb      	ldr	r3, [r7, #28]
 802b626:	691b      	ldr	r3, [r3, #16]
 802b628:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 802b62a:	69fb      	ldr	r3, [r7, #28]
 802b62c:	68db      	ldr	r3, [r3, #12]
 802b62e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 802b630:	2300      	movs	r3, #0
 802b632:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 802b634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b636:	69bb      	ldr	r3, [r7, #24]
 802b638:	429a      	cmp	r2, r3
 802b63a:	d92b      	bls.n	802b694 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 802b63c:	69fb      	ldr	r3, [r7, #28]
 802b63e:	689a      	ldr	r2, [r3, #8]
 802b640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b642:	1ad3      	subs	r3, r2, r3
 802b644:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 802b646:	697a      	ldr	r2, [r7, #20]
 802b648:	687b      	ldr	r3, [r7, #4]
 802b64a:	4293      	cmp	r3, r2
 802b64c:	bf28      	it	cs
 802b64e:	4613      	movcs	r3, r2
 802b650:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 802b652:	69fb      	ldr	r3, [r7, #28]
 802b654:	685a      	ldr	r2, [r3, #4]
 802b656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b658:	4413      	add	r3, r2
 802b65a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 802b65c:	697a      	ldr	r2, [r7, #20]
 802b65e:	6939      	ldr	r1, [r7, #16]
 802b660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802b662:	f001 fb6f 	bl	802cd44 <memcpy>
    NumBytesRead += NumBytesRem;
 802b666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802b668:	697b      	ldr	r3, [r7, #20]
 802b66a:	4413      	add	r3, r2
 802b66c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 802b66e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b670:	697b      	ldr	r3, [r7, #20]
 802b672:	4413      	add	r3, r2
 802b674:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 802b676:	687a      	ldr	r2, [r7, #4]
 802b678:	697b      	ldr	r3, [r7, #20]
 802b67a:	1ad3      	subs	r3, r2, r3
 802b67c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 802b67e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b680:	697b      	ldr	r3, [r7, #20]
 802b682:	4413      	add	r3, r2
 802b684:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 802b686:	69fb      	ldr	r3, [r7, #28]
 802b688:	689b      	ldr	r3, [r3, #8]
 802b68a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b68c:	429a      	cmp	r2, r3
 802b68e:	d101      	bne.n	802b694 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 802b690:	2300      	movs	r3, #0
 802b692:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 802b694:	69ba      	ldr	r2, [r7, #24]
 802b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b698:	1ad3      	subs	r3, r2, r3
 802b69a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 802b69c:	697a      	ldr	r2, [r7, #20]
 802b69e:	687b      	ldr	r3, [r7, #4]
 802b6a0:	4293      	cmp	r3, r2
 802b6a2:	bf28      	it	cs
 802b6a4:	4613      	movcs	r3, r2
 802b6a6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 802b6a8:	697b      	ldr	r3, [r7, #20]
 802b6aa:	2b00      	cmp	r3, #0
 802b6ac:	d019      	beq.n	802b6e2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 802b6ae:	69fb      	ldr	r3, [r7, #28]
 802b6b0:	685a      	ldr	r2, [r3, #4]
 802b6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b6b4:	4413      	add	r3, r2
 802b6b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 802b6b8:	697a      	ldr	r2, [r7, #20]
 802b6ba:	6939      	ldr	r1, [r7, #16]
 802b6bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802b6be:	f001 fb41 	bl	802cd44 <memcpy>
    NumBytesRead += NumBytesRem;
 802b6c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802b6c4:	697b      	ldr	r3, [r7, #20]
 802b6c6:	4413      	add	r3, r2
 802b6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 802b6ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b6cc:	697b      	ldr	r3, [r7, #20]
 802b6ce:	4413      	add	r3, r2
 802b6d0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 802b6d2:	687a      	ldr	r2, [r7, #4]
 802b6d4:	697b      	ldr	r3, [r7, #20]
 802b6d6:	1ad3      	subs	r3, r2, r3
 802b6d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 802b6da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b6dc:	697b      	ldr	r3, [r7, #20]
 802b6de:	4413      	add	r3, r2
 802b6e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 802b6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b6e4:	2b00      	cmp	r3, #0
 802b6e6:	d002      	beq.n	802b6ee <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 802b6e8:	69fb      	ldr	r3, [r7, #28]
 802b6ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b6ec:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 802b6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802b6f0:	4618      	mov	r0, r3
 802b6f2:	3730      	adds	r7, #48	; 0x30
 802b6f4:	46bd      	mov	sp, r7
 802b6f6:	bd80      	pop	{r7, pc}
 802b6f8:	2001df20 	.word	0x2001df20

0802b6fc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 802b6fc:	b580      	push	{r7, lr}
 802b6fe:	b088      	sub	sp, #32
 802b700:	af00      	add	r7, sp, #0
 802b702:	60f8      	str	r0, [r7, #12]
 802b704:	60b9      	str	r1, [r7, #8]
 802b706:	607a      	str	r2, [r7, #4]
 802b708:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 802b70a:	4b3d      	ldr	r3, [pc, #244]	; (802b800 <SEGGER_RTT_AllocUpBuffer+0x104>)
 802b70c:	61bb      	str	r3, [r7, #24]
 802b70e:	69bb      	ldr	r3, [r7, #24]
 802b710:	781b      	ldrb	r3, [r3, #0]
 802b712:	b2db      	uxtb	r3, r3
 802b714:	2b00      	cmp	r3, #0
 802b716:	d101      	bne.n	802b71c <SEGGER_RTT_AllocUpBuffer+0x20>
 802b718:	f7ff ff12 	bl	802b540 <_DoInit>
  SEGGER_RTT_LOCK();
 802b71c:	f3ef 8311 	mrs	r3, BASEPRI
 802b720:	f04f 0120 	mov.w	r1, #32
 802b724:	f381 8811 	msr	BASEPRI, r1
 802b728:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 802b72a:	4b35      	ldr	r3, [pc, #212]	; (802b800 <SEGGER_RTT_AllocUpBuffer+0x104>)
 802b72c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 802b72e:	2300      	movs	r3, #0
 802b730:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 802b732:	6939      	ldr	r1, [r7, #16]
 802b734:	69fb      	ldr	r3, [r7, #28]
 802b736:	1c5a      	adds	r2, r3, #1
 802b738:	4613      	mov	r3, r2
 802b73a:	005b      	lsls	r3, r3, #1
 802b73c:	4413      	add	r3, r2
 802b73e:	00db      	lsls	r3, r3, #3
 802b740:	440b      	add	r3, r1
 802b742:	3304      	adds	r3, #4
 802b744:	681b      	ldr	r3, [r3, #0]
 802b746:	2b00      	cmp	r3, #0
 802b748:	d008      	beq.n	802b75c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 802b74a:	69fb      	ldr	r3, [r7, #28]
 802b74c:	3301      	adds	r3, #1
 802b74e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 802b750:	693b      	ldr	r3, [r7, #16]
 802b752:	691b      	ldr	r3, [r3, #16]
 802b754:	69fa      	ldr	r2, [r7, #28]
 802b756:	429a      	cmp	r2, r3
 802b758:	dbeb      	blt.n	802b732 <SEGGER_RTT_AllocUpBuffer+0x36>
 802b75a:	e000      	b.n	802b75e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 802b75c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 802b75e:	693b      	ldr	r3, [r7, #16]
 802b760:	691b      	ldr	r3, [r3, #16]
 802b762:	69fa      	ldr	r2, [r7, #28]
 802b764:	429a      	cmp	r2, r3
 802b766:	da3f      	bge.n	802b7e8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 802b768:	6939      	ldr	r1, [r7, #16]
 802b76a:	69fb      	ldr	r3, [r7, #28]
 802b76c:	1c5a      	adds	r2, r3, #1
 802b76e:	4613      	mov	r3, r2
 802b770:	005b      	lsls	r3, r3, #1
 802b772:	4413      	add	r3, r2
 802b774:	00db      	lsls	r3, r3, #3
 802b776:	440b      	add	r3, r1
 802b778:	68fa      	ldr	r2, [r7, #12]
 802b77a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 802b77c:	6939      	ldr	r1, [r7, #16]
 802b77e:	69fb      	ldr	r3, [r7, #28]
 802b780:	1c5a      	adds	r2, r3, #1
 802b782:	4613      	mov	r3, r2
 802b784:	005b      	lsls	r3, r3, #1
 802b786:	4413      	add	r3, r2
 802b788:	00db      	lsls	r3, r3, #3
 802b78a:	440b      	add	r3, r1
 802b78c:	3304      	adds	r3, #4
 802b78e:	68ba      	ldr	r2, [r7, #8]
 802b790:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 802b792:	6939      	ldr	r1, [r7, #16]
 802b794:	69fa      	ldr	r2, [r7, #28]
 802b796:	4613      	mov	r3, r2
 802b798:	005b      	lsls	r3, r3, #1
 802b79a:	4413      	add	r3, r2
 802b79c:	00db      	lsls	r3, r3, #3
 802b79e:	440b      	add	r3, r1
 802b7a0:	3320      	adds	r3, #32
 802b7a2:	687a      	ldr	r2, [r7, #4]
 802b7a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 802b7a6:	6939      	ldr	r1, [r7, #16]
 802b7a8:	69fa      	ldr	r2, [r7, #28]
 802b7aa:	4613      	mov	r3, r2
 802b7ac:	005b      	lsls	r3, r3, #1
 802b7ae:	4413      	add	r3, r2
 802b7b0:	00db      	lsls	r3, r3, #3
 802b7b2:	440b      	add	r3, r1
 802b7b4:	3328      	adds	r3, #40	; 0x28
 802b7b6:	2200      	movs	r2, #0
 802b7b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 802b7ba:	6939      	ldr	r1, [r7, #16]
 802b7bc:	69fa      	ldr	r2, [r7, #28]
 802b7be:	4613      	mov	r3, r2
 802b7c0:	005b      	lsls	r3, r3, #1
 802b7c2:	4413      	add	r3, r2
 802b7c4:	00db      	lsls	r3, r3, #3
 802b7c6:	440b      	add	r3, r1
 802b7c8:	3324      	adds	r3, #36	; 0x24
 802b7ca:	2200      	movs	r2, #0
 802b7cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 802b7ce:	6939      	ldr	r1, [r7, #16]
 802b7d0:	69fa      	ldr	r2, [r7, #28]
 802b7d2:	4613      	mov	r3, r2
 802b7d4:	005b      	lsls	r3, r3, #1
 802b7d6:	4413      	add	r3, r2
 802b7d8:	00db      	lsls	r3, r3, #3
 802b7da:	440b      	add	r3, r1
 802b7dc:	332c      	adds	r3, #44	; 0x2c
 802b7de:	683a      	ldr	r2, [r7, #0]
 802b7e0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 802b7e2:	f3bf 8f5f 	dmb	sy
 802b7e6:	e002      	b.n	802b7ee <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 802b7e8:	f04f 33ff 	mov.w	r3, #4294967295
 802b7ec:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 802b7ee:	697b      	ldr	r3, [r7, #20]
 802b7f0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 802b7f4:	69fb      	ldr	r3, [r7, #28]
}
 802b7f6:	4618      	mov	r0, r3
 802b7f8:	3720      	adds	r7, #32
 802b7fa:	46bd      	mov	sp, r7
 802b7fc:	bd80      	pop	{r7, pc}
 802b7fe:	bf00      	nop
 802b800:	2001df20 	.word	0x2001df20

0802b804 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 802b804:	b580      	push	{r7, lr}
 802b806:	b08a      	sub	sp, #40	; 0x28
 802b808:	af00      	add	r7, sp, #0
 802b80a:	60f8      	str	r0, [r7, #12]
 802b80c:	60b9      	str	r1, [r7, #8]
 802b80e:	607a      	str	r2, [r7, #4]
 802b810:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 802b812:	4b21      	ldr	r3, [pc, #132]	; (802b898 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 802b814:	623b      	str	r3, [r7, #32]
 802b816:	6a3b      	ldr	r3, [r7, #32]
 802b818:	781b      	ldrb	r3, [r3, #0]
 802b81a:	b2db      	uxtb	r3, r3
 802b81c:	2b00      	cmp	r3, #0
 802b81e:	d101      	bne.n	802b824 <SEGGER_RTT_ConfigDownBuffer+0x20>
 802b820:	f7ff fe8e 	bl	802b540 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 802b824:	4b1c      	ldr	r3, [pc, #112]	; (802b898 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 802b826:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 802b828:	68fb      	ldr	r3, [r7, #12]
 802b82a:	2b02      	cmp	r3, #2
 802b82c:	d82c      	bhi.n	802b888 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 802b82e:	f3ef 8311 	mrs	r3, BASEPRI
 802b832:	f04f 0120 	mov.w	r1, #32
 802b836:	f381 8811 	msr	BASEPRI, r1
 802b83a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 802b83c:	68fa      	ldr	r2, [r7, #12]
 802b83e:	4613      	mov	r3, r2
 802b840:	005b      	lsls	r3, r3, #1
 802b842:	4413      	add	r3, r2
 802b844:	00db      	lsls	r3, r3, #3
 802b846:	3360      	adds	r3, #96	; 0x60
 802b848:	69fa      	ldr	r2, [r7, #28]
 802b84a:	4413      	add	r3, r2
 802b84c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 802b84e:	68fb      	ldr	r3, [r7, #12]
 802b850:	2b00      	cmp	r3, #0
 802b852:	d00e      	beq.n	802b872 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 802b854:	697b      	ldr	r3, [r7, #20]
 802b856:	68ba      	ldr	r2, [r7, #8]
 802b858:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 802b85a:	697b      	ldr	r3, [r7, #20]
 802b85c:	687a      	ldr	r2, [r7, #4]
 802b85e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 802b860:	697b      	ldr	r3, [r7, #20]
 802b862:	683a      	ldr	r2, [r7, #0]
 802b864:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 802b866:	697b      	ldr	r3, [r7, #20]
 802b868:	2200      	movs	r2, #0
 802b86a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 802b86c:	697b      	ldr	r3, [r7, #20]
 802b86e:	2200      	movs	r2, #0
 802b870:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 802b872:	697b      	ldr	r3, [r7, #20]
 802b874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b876:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 802b878:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 802b87c:	69bb      	ldr	r3, [r7, #24]
 802b87e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 802b882:	2300      	movs	r3, #0
 802b884:	627b      	str	r3, [r7, #36]	; 0x24
 802b886:	e002      	b.n	802b88e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 802b888:	f04f 33ff 	mov.w	r3, #4294967295
 802b88c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 802b88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802b890:	4618      	mov	r0, r3
 802b892:	3728      	adds	r7, #40	; 0x28
 802b894:	46bd      	mov	sp, r7
 802b896:	bd80      	pop	{r7, pc}
 802b898:	2001df20 	.word	0x2001df20

0802b89c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 802b89c:	b480      	push	{r7}
 802b89e:	b087      	sub	sp, #28
 802b8a0:	af00      	add	r7, sp, #0
 802b8a2:	60f8      	str	r0, [r7, #12]
 802b8a4:	60b9      	str	r1, [r7, #8]
 802b8a6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 802b8a8:	2300      	movs	r3, #0
 802b8aa:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 802b8ac:	68bb      	ldr	r3, [r7, #8]
 802b8ae:	2b00      	cmp	r3, #0
 802b8b0:	d00f      	beq.n	802b8d2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 802b8b2:	e002      	b.n	802b8ba <_EncodeStr+0x1e>
      Len++;
 802b8b4:	693b      	ldr	r3, [r7, #16]
 802b8b6:	3301      	adds	r3, #1
 802b8b8:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 802b8ba:	68ba      	ldr	r2, [r7, #8]
 802b8bc:	693b      	ldr	r3, [r7, #16]
 802b8be:	4413      	add	r3, r2
 802b8c0:	781b      	ldrb	r3, [r3, #0]
 802b8c2:	2b00      	cmp	r3, #0
 802b8c4:	d1f6      	bne.n	802b8b4 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 802b8c6:	693a      	ldr	r2, [r7, #16]
 802b8c8:	687b      	ldr	r3, [r7, #4]
 802b8ca:	429a      	cmp	r2, r3
 802b8cc:	d901      	bls.n	802b8d2 <_EncodeStr+0x36>
      Len = Limit;
 802b8ce:	687b      	ldr	r3, [r7, #4]
 802b8d0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 802b8d2:	693b      	ldr	r3, [r7, #16]
 802b8d4:	2bfe      	cmp	r3, #254	; 0xfe
 802b8d6:	d806      	bhi.n	802b8e6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 802b8d8:	68fb      	ldr	r3, [r7, #12]
 802b8da:	1c5a      	adds	r2, r3, #1
 802b8dc:	60fa      	str	r2, [r7, #12]
 802b8de:	693a      	ldr	r2, [r7, #16]
 802b8e0:	b2d2      	uxtb	r2, r2
 802b8e2:	701a      	strb	r2, [r3, #0]
 802b8e4:	e011      	b.n	802b90a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 802b8e6:	68fb      	ldr	r3, [r7, #12]
 802b8e8:	1c5a      	adds	r2, r3, #1
 802b8ea:	60fa      	str	r2, [r7, #12]
 802b8ec:	22ff      	movs	r2, #255	; 0xff
 802b8ee:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 802b8f0:	68fb      	ldr	r3, [r7, #12]
 802b8f2:	1c5a      	adds	r2, r3, #1
 802b8f4:	60fa      	str	r2, [r7, #12]
 802b8f6:	693a      	ldr	r2, [r7, #16]
 802b8f8:	b2d2      	uxtb	r2, r2
 802b8fa:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 802b8fc:	693b      	ldr	r3, [r7, #16]
 802b8fe:	0a19      	lsrs	r1, r3, #8
 802b900:	68fb      	ldr	r3, [r7, #12]
 802b902:	1c5a      	adds	r2, r3, #1
 802b904:	60fa      	str	r2, [r7, #12]
 802b906:	b2ca      	uxtb	r2, r1
 802b908:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 802b90a:	2300      	movs	r3, #0
 802b90c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 802b90e:	e00a      	b.n	802b926 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 802b910:	68ba      	ldr	r2, [r7, #8]
 802b912:	1c53      	adds	r3, r2, #1
 802b914:	60bb      	str	r3, [r7, #8]
 802b916:	68fb      	ldr	r3, [r7, #12]
 802b918:	1c59      	adds	r1, r3, #1
 802b91a:	60f9      	str	r1, [r7, #12]
 802b91c:	7812      	ldrb	r2, [r2, #0]
 802b91e:	701a      	strb	r2, [r3, #0]
    n++;
 802b920:	697b      	ldr	r3, [r7, #20]
 802b922:	3301      	adds	r3, #1
 802b924:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 802b926:	697a      	ldr	r2, [r7, #20]
 802b928:	693b      	ldr	r3, [r7, #16]
 802b92a:	429a      	cmp	r2, r3
 802b92c:	d3f0      	bcc.n	802b910 <_EncodeStr+0x74>
  }
  return pPayload;
 802b92e:	68fb      	ldr	r3, [r7, #12]
}
 802b930:	4618      	mov	r0, r3
 802b932:	371c      	adds	r7, #28
 802b934:	46bd      	mov	sp, r7
 802b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b93a:	4770      	bx	lr

0802b93c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 802b93c:	b480      	push	{r7}
 802b93e:	b083      	sub	sp, #12
 802b940:	af00      	add	r7, sp, #0
 802b942:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 802b944:	687b      	ldr	r3, [r7, #4]
 802b946:	3304      	adds	r3, #4
}
 802b948:	4618      	mov	r0, r3
 802b94a:	370c      	adds	r7, #12
 802b94c:	46bd      	mov	sp, r7
 802b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b952:	4770      	bx	lr

0802b954 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 802b954:	b580      	push	{r7, lr}
 802b956:	b082      	sub	sp, #8
 802b958:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 802b95a:	4b36      	ldr	r3, [pc, #216]	; (802ba34 <_HandleIncomingPacket+0xe0>)
 802b95c:	7e1b      	ldrb	r3, [r3, #24]
 802b95e:	4618      	mov	r0, r3
 802b960:	1cfb      	adds	r3, r7, #3
 802b962:	2201      	movs	r2, #1
 802b964:	4619      	mov	r1, r3
 802b966:	f7ff fe43 	bl	802b5f0 <SEGGER_RTT_ReadNoLock>
 802b96a:	4603      	mov	r3, r0
 802b96c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 802b96e:	687b      	ldr	r3, [r7, #4]
 802b970:	2b00      	cmp	r3, #0
 802b972:	dd54      	ble.n	802ba1e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 802b974:	78fb      	ldrb	r3, [r7, #3]
 802b976:	2b80      	cmp	r3, #128	; 0x80
 802b978:	d032      	beq.n	802b9e0 <_HandleIncomingPacket+0x8c>
 802b97a:	2b80      	cmp	r3, #128	; 0x80
 802b97c:	dc42      	bgt.n	802ba04 <_HandleIncomingPacket+0xb0>
 802b97e:	2b07      	cmp	r3, #7
 802b980:	dc16      	bgt.n	802b9b0 <_HandleIncomingPacket+0x5c>
 802b982:	2b00      	cmp	r3, #0
 802b984:	dd3e      	ble.n	802ba04 <_HandleIncomingPacket+0xb0>
 802b986:	3b01      	subs	r3, #1
 802b988:	2b06      	cmp	r3, #6
 802b98a:	d83b      	bhi.n	802ba04 <_HandleIncomingPacket+0xb0>
 802b98c:	a201      	add	r2, pc, #4	; (adr r2, 802b994 <_HandleIncomingPacket+0x40>)
 802b98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b992:	bf00      	nop
 802b994:	0802b9b7 	.word	0x0802b9b7
 802b998:	0802b9bd 	.word	0x0802b9bd
 802b99c:	0802b9c3 	.word	0x0802b9c3
 802b9a0:	0802b9c9 	.word	0x0802b9c9
 802b9a4:	0802b9cf 	.word	0x0802b9cf
 802b9a8:	0802b9d5 	.word	0x0802b9d5
 802b9ac:	0802b9db 	.word	0x0802b9db
 802b9b0:	2b7f      	cmp	r3, #127	; 0x7f
 802b9b2:	d036      	beq.n	802ba22 <_HandleIncomingPacket+0xce>
 802b9b4:	e026      	b.n	802ba04 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 802b9b6:	f000 fc67 	bl	802c288 <SEGGER_SYSVIEW_Start>
      break;
 802b9ba:	e037      	b.n	802ba2c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 802b9bc:	f000 fd1e 	bl	802c3fc <SEGGER_SYSVIEW_Stop>
      break;
 802b9c0:	e034      	b.n	802ba2c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 802b9c2:	f000 fef7 	bl	802c7b4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 802b9c6:	e031      	b.n	802ba2c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 802b9c8:	f000 febc 	bl	802c744 <SEGGER_SYSVIEW_SendTaskList>
      break;
 802b9cc:	e02e      	b.n	802ba2c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 802b9ce:	f000 fd3b 	bl	802c448 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 802b9d2:	e02b      	b.n	802ba2c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 802b9d4:	f001 f8b0 	bl	802cb38 <SEGGER_SYSVIEW_SendNumModules>
      break;
 802b9d8:	e028      	b.n	802ba2c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 802b9da:	f001 f88f 	bl	802cafc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 802b9de:	e025      	b.n	802ba2c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 802b9e0:	4b14      	ldr	r3, [pc, #80]	; (802ba34 <_HandleIncomingPacket+0xe0>)
 802b9e2:	7e1b      	ldrb	r3, [r3, #24]
 802b9e4:	4618      	mov	r0, r3
 802b9e6:	1cfb      	adds	r3, r7, #3
 802b9e8:	2201      	movs	r2, #1
 802b9ea:	4619      	mov	r1, r3
 802b9ec:	f7ff fe00 	bl	802b5f0 <SEGGER_RTT_ReadNoLock>
 802b9f0:	4603      	mov	r3, r0
 802b9f2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 802b9f4:	687b      	ldr	r3, [r7, #4]
 802b9f6:	2b00      	cmp	r3, #0
 802b9f8:	dd15      	ble.n	802ba26 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 802b9fa:	78fb      	ldrb	r3, [r7, #3]
 802b9fc:	4618      	mov	r0, r3
 802b9fe:	f000 fffd 	bl	802c9fc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 802ba02:	e010      	b.n	802ba26 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 802ba04:	78fb      	ldrb	r3, [r7, #3]
 802ba06:	b25b      	sxtb	r3, r3
 802ba08:	2b00      	cmp	r3, #0
 802ba0a:	da0e      	bge.n	802ba2a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 802ba0c:	4b09      	ldr	r3, [pc, #36]	; (802ba34 <_HandleIncomingPacket+0xe0>)
 802ba0e:	7e1b      	ldrb	r3, [r3, #24]
 802ba10:	4618      	mov	r0, r3
 802ba12:	1cfb      	adds	r3, r7, #3
 802ba14:	2201      	movs	r2, #1
 802ba16:	4619      	mov	r1, r3
 802ba18:	f7ff fdea 	bl	802b5f0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 802ba1c:	e005      	b.n	802ba2a <_HandleIncomingPacket+0xd6>
    }
  }
 802ba1e:	bf00      	nop
 802ba20:	e004      	b.n	802ba2c <_HandleIncomingPacket+0xd8>
      break;
 802ba22:	bf00      	nop
 802ba24:	e002      	b.n	802ba2c <_HandleIncomingPacket+0xd8>
      break;
 802ba26:	bf00      	nop
 802ba28:	e000      	b.n	802ba2c <_HandleIncomingPacket+0xd8>
      break;
 802ba2a:	bf00      	nop
}
 802ba2c:	bf00      	nop
 802ba2e:	3708      	adds	r7, #8
 802ba30:	46bd      	mov	sp, r7
 802ba32:	bd80      	pop	{r7, pc}
 802ba34:	2001a748 	.word	0x2001a748

0802ba38 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 802ba38:	b580      	push	{r7, lr}
 802ba3a:	b08c      	sub	sp, #48	; 0x30
 802ba3c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 802ba3e:	2301      	movs	r3, #1
 802ba40:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 802ba42:	1d3b      	adds	r3, r7, #4
 802ba44:	3301      	adds	r3, #1
 802ba46:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 802ba48:	69fb      	ldr	r3, [r7, #28]
 802ba4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802ba4c:	4b31      	ldr	r3, [pc, #196]	; (802bb14 <_TrySendOverflowPacket+0xdc>)
 802ba4e:	695b      	ldr	r3, [r3, #20]
 802ba50:	62bb      	str	r3, [r7, #40]	; 0x28
 802ba52:	e00b      	b.n	802ba6c <_TrySendOverflowPacket+0x34>
 802ba54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ba56:	b2da      	uxtb	r2, r3
 802ba58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ba5a:	1c59      	adds	r1, r3, #1
 802ba5c:	62f9      	str	r1, [r7, #44]	; 0x2c
 802ba5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802ba62:	b2d2      	uxtb	r2, r2
 802ba64:	701a      	strb	r2, [r3, #0]
 802ba66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ba68:	09db      	lsrs	r3, r3, #7
 802ba6a:	62bb      	str	r3, [r7, #40]	; 0x28
 802ba6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ba6e:	2b7f      	cmp	r3, #127	; 0x7f
 802ba70:	d8f0      	bhi.n	802ba54 <_TrySendOverflowPacket+0x1c>
 802ba72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ba74:	1c5a      	adds	r2, r3, #1
 802ba76:	62fa      	str	r2, [r7, #44]	; 0x2c
 802ba78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802ba7a:	b2d2      	uxtb	r2, r2
 802ba7c:	701a      	strb	r2, [r3, #0]
 802ba7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ba80:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 802ba82:	4b25      	ldr	r3, [pc, #148]	; (802bb18 <_TrySendOverflowPacket+0xe0>)
 802ba84:	681b      	ldr	r3, [r3, #0]
 802ba86:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 802ba88:	4b22      	ldr	r3, [pc, #136]	; (802bb14 <_TrySendOverflowPacket+0xdc>)
 802ba8a:	68db      	ldr	r3, [r3, #12]
 802ba8c:	69ba      	ldr	r2, [r7, #24]
 802ba8e:	1ad3      	subs	r3, r2, r3
 802ba90:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 802ba92:	69fb      	ldr	r3, [r7, #28]
 802ba94:	627b      	str	r3, [r7, #36]	; 0x24
 802ba96:	697b      	ldr	r3, [r7, #20]
 802ba98:	623b      	str	r3, [r7, #32]
 802ba9a:	e00b      	b.n	802bab4 <_TrySendOverflowPacket+0x7c>
 802ba9c:	6a3b      	ldr	r3, [r7, #32]
 802ba9e:	b2da      	uxtb	r2, r3
 802baa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802baa2:	1c59      	adds	r1, r3, #1
 802baa4:	6279      	str	r1, [r7, #36]	; 0x24
 802baa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802baaa:	b2d2      	uxtb	r2, r2
 802baac:	701a      	strb	r2, [r3, #0]
 802baae:	6a3b      	ldr	r3, [r7, #32]
 802bab0:	09db      	lsrs	r3, r3, #7
 802bab2:	623b      	str	r3, [r7, #32]
 802bab4:	6a3b      	ldr	r3, [r7, #32]
 802bab6:	2b7f      	cmp	r3, #127	; 0x7f
 802bab8:	d8f0      	bhi.n	802ba9c <_TrySendOverflowPacket+0x64>
 802baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802babc:	1c5a      	adds	r2, r3, #1
 802babe:	627a      	str	r2, [r7, #36]	; 0x24
 802bac0:	6a3a      	ldr	r2, [r7, #32]
 802bac2:	b2d2      	uxtb	r2, r2
 802bac4:	701a      	strb	r2, [r3, #0]
 802bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bac8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 802baca:	4b12      	ldr	r3, [pc, #72]	; (802bb14 <_TrySendOverflowPacket+0xdc>)
 802bacc:	785b      	ldrb	r3, [r3, #1]
 802bace:	4618      	mov	r0, r3
 802bad0:	1d3b      	adds	r3, r7, #4
 802bad2:	69fa      	ldr	r2, [r7, #28]
 802bad4:	1ad3      	subs	r3, r2, r3
 802bad6:	461a      	mov	r2, r3
 802bad8:	1d3b      	adds	r3, r7, #4
 802bada:	4619      	mov	r1, r3
 802badc:	f7d4 fb78 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 802bae0:	4603      	mov	r3, r0
 802bae2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 802bae4:	693b      	ldr	r3, [r7, #16]
 802bae6:	2b00      	cmp	r3, #0
 802bae8:	d009      	beq.n	802bafe <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 802baea:	4a0a      	ldr	r2, [pc, #40]	; (802bb14 <_TrySendOverflowPacket+0xdc>)
 802baec:	69bb      	ldr	r3, [r7, #24]
 802baee:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 802baf0:	4b08      	ldr	r3, [pc, #32]	; (802bb14 <_TrySendOverflowPacket+0xdc>)
 802baf2:	781b      	ldrb	r3, [r3, #0]
 802baf4:	3b01      	subs	r3, #1
 802baf6:	b2da      	uxtb	r2, r3
 802baf8:	4b06      	ldr	r3, [pc, #24]	; (802bb14 <_TrySendOverflowPacket+0xdc>)
 802bafa:	701a      	strb	r2, [r3, #0]
 802bafc:	e004      	b.n	802bb08 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 802bafe:	4b05      	ldr	r3, [pc, #20]	; (802bb14 <_TrySendOverflowPacket+0xdc>)
 802bb00:	695b      	ldr	r3, [r3, #20]
 802bb02:	3301      	adds	r3, #1
 802bb04:	4a03      	ldr	r2, [pc, #12]	; (802bb14 <_TrySendOverflowPacket+0xdc>)
 802bb06:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 802bb08:	693b      	ldr	r3, [r7, #16]
}
 802bb0a:	4618      	mov	r0, r3
 802bb0c:	3730      	adds	r7, #48	; 0x30
 802bb0e:	46bd      	mov	sp, r7
 802bb10:	bd80      	pop	{r7, pc}
 802bb12:	bf00      	nop
 802bb14:	2001a748 	.word	0x2001a748
 802bb18:	e0001004 	.word	0xe0001004

0802bb1c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 802bb1c:	b580      	push	{r7, lr}
 802bb1e:	b08a      	sub	sp, #40	; 0x28
 802bb20:	af00      	add	r7, sp, #0
 802bb22:	60f8      	str	r0, [r7, #12]
 802bb24:	60b9      	str	r1, [r7, #8]
 802bb26:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 802bb28:	4b6c      	ldr	r3, [pc, #432]	; (802bcdc <_SendPacket+0x1c0>)
 802bb2a:	781b      	ldrb	r3, [r3, #0]
 802bb2c:	2b01      	cmp	r3, #1
 802bb2e:	d010      	beq.n	802bb52 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 802bb30:	4b6a      	ldr	r3, [pc, #424]	; (802bcdc <_SendPacket+0x1c0>)
 802bb32:	781b      	ldrb	r3, [r3, #0]
 802bb34:	2b00      	cmp	r3, #0
 802bb36:	f000 80a3 	beq.w	802bc80 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 802bb3a:	4b68      	ldr	r3, [pc, #416]	; (802bcdc <_SendPacket+0x1c0>)
 802bb3c:	781b      	ldrb	r3, [r3, #0]
 802bb3e:	2b02      	cmp	r3, #2
 802bb40:	d109      	bne.n	802bb56 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 802bb42:	f7ff ff79 	bl	802ba38 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 802bb46:	4b65      	ldr	r3, [pc, #404]	; (802bcdc <_SendPacket+0x1c0>)
 802bb48:	781b      	ldrb	r3, [r3, #0]
 802bb4a:	2b01      	cmp	r3, #1
 802bb4c:	f040 809a 	bne.w	802bc84 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 802bb50:	e001      	b.n	802bb56 <_SendPacket+0x3a>
    goto Send;
 802bb52:	bf00      	nop
 802bb54:	e000      	b.n	802bb58 <_SendPacket+0x3c>
Send:
 802bb56:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 802bb58:	687b      	ldr	r3, [r7, #4]
 802bb5a:	2b1f      	cmp	r3, #31
 802bb5c:	d809      	bhi.n	802bb72 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 802bb5e:	4b5f      	ldr	r3, [pc, #380]	; (802bcdc <_SendPacket+0x1c0>)
 802bb60:	69da      	ldr	r2, [r3, #28]
 802bb62:	687b      	ldr	r3, [r7, #4]
 802bb64:	fa22 f303 	lsr.w	r3, r2, r3
 802bb68:	f003 0301 	and.w	r3, r3, #1
 802bb6c:	2b00      	cmp	r3, #0
 802bb6e:	f040 808b 	bne.w	802bc88 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 802bb72:	687b      	ldr	r3, [r7, #4]
 802bb74:	2b17      	cmp	r3, #23
 802bb76:	d807      	bhi.n	802bb88 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 802bb78:	68fb      	ldr	r3, [r7, #12]
 802bb7a:	3b01      	subs	r3, #1
 802bb7c:	60fb      	str	r3, [r7, #12]
 802bb7e:	687b      	ldr	r3, [r7, #4]
 802bb80:	b2da      	uxtb	r2, r3
 802bb82:	68fb      	ldr	r3, [r7, #12]
 802bb84:	701a      	strb	r2, [r3, #0]
 802bb86:	e03d      	b.n	802bc04 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 802bb88:	68ba      	ldr	r2, [r7, #8]
 802bb8a:	68fb      	ldr	r3, [r7, #12]
 802bb8c:	1ad3      	subs	r3, r2, r3
 802bb8e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 802bb90:	69fb      	ldr	r3, [r7, #28]
 802bb92:	2b7f      	cmp	r3, #127	; 0x7f
 802bb94:	d912      	bls.n	802bbbc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 802bb96:	69fb      	ldr	r3, [r7, #28]
 802bb98:	09da      	lsrs	r2, r3, #7
 802bb9a:	68fb      	ldr	r3, [r7, #12]
 802bb9c:	3b01      	subs	r3, #1
 802bb9e:	60fb      	str	r3, [r7, #12]
 802bba0:	b2d2      	uxtb	r2, r2
 802bba2:	68fb      	ldr	r3, [r7, #12]
 802bba4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 802bba6:	69fb      	ldr	r3, [r7, #28]
 802bba8:	b2db      	uxtb	r3, r3
 802bbaa:	68fa      	ldr	r2, [r7, #12]
 802bbac:	3a01      	subs	r2, #1
 802bbae:	60fa      	str	r2, [r7, #12]
 802bbb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802bbb4:	b2da      	uxtb	r2, r3
 802bbb6:	68fb      	ldr	r3, [r7, #12]
 802bbb8:	701a      	strb	r2, [r3, #0]
 802bbba:	e006      	b.n	802bbca <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 802bbbc:	68fb      	ldr	r3, [r7, #12]
 802bbbe:	3b01      	subs	r3, #1
 802bbc0:	60fb      	str	r3, [r7, #12]
 802bbc2:	69fb      	ldr	r3, [r7, #28]
 802bbc4:	b2da      	uxtb	r2, r3
 802bbc6:	68fb      	ldr	r3, [r7, #12]
 802bbc8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 802bbca:	687b      	ldr	r3, [r7, #4]
 802bbcc:	2b7f      	cmp	r3, #127	; 0x7f
 802bbce:	d912      	bls.n	802bbf6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 802bbd0:	687b      	ldr	r3, [r7, #4]
 802bbd2:	09da      	lsrs	r2, r3, #7
 802bbd4:	68fb      	ldr	r3, [r7, #12]
 802bbd6:	3b01      	subs	r3, #1
 802bbd8:	60fb      	str	r3, [r7, #12]
 802bbda:	b2d2      	uxtb	r2, r2
 802bbdc:	68fb      	ldr	r3, [r7, #12]
 802bbde:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 802bbe0:	687b      	ldr	r3, [r7, #4]
 802bbe2:	b2db      	uxtb	r3, r3
 802bbe4:	68fa      	ldr	r2, [r7, #12]
 802bbe6:	3a01      	subs	r2, #1
 802bbe8:	60fa      	str	r2, [r7, #12]
 802bbea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802bbee:	b2da      	uxtb	r2, r3
 802bbf0:	68fb      	ldr	r3, [r7, #12]
 802bbf2:	701a      	strb	r2, [r3, #0]
 802bbf4:	e006      	b.n	802bc04 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 802bbf6:	68fb      	ldr	r3, [r7, #12]
 802bbf8:	3b01      	subs	r3, #1
 802bbfa:	60fb      	str	r3, [r7, #12]
 802bbfc:	687b      	ldr	r3, [r7, #4]
 802bbfe:	b2da      	uxtb	r2, r3
 802bc00:	68fb      	ldr	r3, [r7, #12]
 802bc02:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 802bc04:	4b36      	ldr	r3, [pc, #216]	; (802bce0 <_SendPacket+0x1c4>)
 802bc06:	681b      	ldr	r3, [r3, #0]
 802bc08:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 802bc0a:	4b34      	ldr	r3, [pc, #208]	; (802bcdc <_SendPacket+0x1c0>)
 802bc0c:	68db      	ldr	r3, [r3, #12]
 802bc0e:	69ba      	ldr	r2, [r7, #24]
 802bc10:	1ad3      	subs	r3, r2, r3
 802bc12:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 802bc14:	68bb      	ldr	r3, [r7, #8]
 802bc16:	627b      	str	r3, [r7, #36]	; 0x24
 802bc18:	697b      	ldr	r3, [r7, #20]
 802bc1a:	623b      	str	r3, [r7, #32]
 802bc1c:	e00b      	b.n	802bc36 <_SendPacket+0x11a>
 802bc1e:	6a3b      	ldr	r3, [r7, #32]
 802bc20:	b2da      	uxtb	r2, r3
 802bc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc24:	1c59      	adds	r1, r3, #1
 802bc26:	6279      	str	r1, [r7, #36]	; 0x24
 802bc28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802bc2c:	b2d2      	uxtb	r2, r2
 802bc2e:	701a      	strb	r2, [r3, #0]
 802bc30:	6a3b      	ldr	r3, [r7, #32]
 802bc32:	09db      	lsrs	r3, r3, #7
 802bc34:	623b      	str	r3, [r7, #32]
 802bc36:	6a3b      	ldr	r3, [r7, #32]
 802bc38:	2b7f      	cmp	r3, #127	; 0x7f
 802bc3a:	d8f0      	bhi.n	802bc1e <_SendPacket+0x102>
 802bc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc3e:	1c5a      	adds	r2, r3, #1
 802bc40:	627a      	str	r2, [r7, #36]	; 0x24
 802bc42:	6a3a      	ldr	r2, [r7, #32]
 802bc44:	b2d2      	uxtb	r2, r2
 802bc46:	701a      	strb	r2, [r3, #0]
 802bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc4a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 802bc4c:	4b23      	ldr	r3, [pc, #140]	; (802bcdc <_SendPacket+0x1c0>)
 802bc4e:	785b      	ldrb	r3, [r3, #1]
 802bc50:	4618      	mov	r0, r3
 802bc52:	68ba      	ldr	r2, [r7, #8]
 802bc54:	68fb      	ldr	r3, [r7, #12]
 802bc56:	1ad3      	subs	r3, r2, r3
 802bc58:	461a      	mov	r2, r3
 802bc5a:	68f9      	ldr	r1, [r7, #12]
 802bc5c:	f7d4 fab8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 802bc60:	4603      	mov	r3, r0
 802bc62:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 802bc64:	693b      	ldr	r3, [r7, #16]
 802bc66:	2b00      	cmp	r3, #0
 802bc68:	d003      	beq.n	802bc72 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 802bc6a:	4a1c      	ldr	r2, [pc, #112]	; (802bcdc <_SendPacket+0x1c0>)
 802bc6c:	69bb      	ldr	r3, [r7, #24]
 802bc6e:	60d3      	str	r3, [r2, #12]
 802bc70:	e00b      	b.n	802bc8a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 802bc72:	4b1a      	ldr	r3, [pc, #104]	; (802bcdc <_SendPacket+0x1c0>)
 802bc74:	781b      	ldrb	r3, [r3, #0]
 802bc76:	3301      	adds	r3, #1
 802bc78:	b2da      	uxtb	r2, r3
 802bc7a:	4b18      	ldr	r3, [pc, #96]	; (802bcdc <_SendPacket+0x1c0>)
 802bc7c:	701a      	strb	r2, [r3, #0]
 802bc7e:	e004      	b.n	802bc8a <_SendPacket+0x16e>
    goto SendDone;
 802bc80:	bf00      	nop
 802bc82:	e002      	b.n	802bc8a <_SendPacket+0x16e>
      goto SendDone;
 802bc84:	bf00      	nop
 802bc86:	e000      	b.n	802bc8a <_SendPacket+0x16e>
      goto SendDone;
 802bc88:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 802bc8a:	4b14      	ldr	r3, [pc, #80]	; (802bcdc <_SendPacket+0x1c0>)
 802bc8c:	7e1b      	ldrb	r3, [r3, #24]
 802bc8e:	4619      	mov	r1, r3
 802bc90:	4a14      	ldr	r2, [pc, #80]	; (802bce4 <_SendPacket+0x1c8>)
 802bc92:	460b      	mov	r3, r1
 802bc94:	005b      	lsls	r3, r3, #1
 802bc96:	440b      	add	r3, r1
 802bc98:	00db      	lsls	r3, r3, #3
 802bc9a:	4413      	add	r3, r2
 802bc9c:	336c      	adds	r3, #108	; 0x6c
 802bc9e:	681a      	ldr	r2, [r3, #0]
 802bca0:	4b0e      	ldr	r3, [pc, #56]	; (802bcdc <_SendPacket+0x1c0>)
 802bca2:	7e1b      	ldrb	r3, [r3, #24]
 802bca4:	4618      	mov	r0, r3
 802bca6:	490f      	ldr	r1, [pc, #60]	; (802bce4 <_SendPacket+0x1c8>)
 802bca8:	4603      	mov	r3, r0
 802bcaa:	005b      	lsls	r3, r3, #1
 802bcac:	4403      	add	r3, r0
 802bcae:	00db      	lsls	r3, r3, #3
 802bcb0:	440b      	add	r3, r1
 802bcb2:	3370      	adds	r3, #112	; 0x70
 802bcb4:	681b      	ldr	r3, [r3, #0]
 802bcb6:	429a      	cmp	r2, r3
 802bcb8:	d00b      	beq.n	802bcd2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 802bcba:	4b08      	ldr	r3, [pc, #32]	; (802bcdc <_SendPacket+0x1c0>)
 802bcbc:	789b      	ldrb	r3, [r3, #2]
 802bcbe:	2b00      	cmp	r3, #0
 802bcc0:	d107      	bne.n	802bcd2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 802bcc2:	4b06      	ldr	r3, [pc, #24]	; (802bcdc <_SendPacket+0x1c0>)
 802bcc4:	2201      	movs	r2, #1
 802bcc6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 802bcc8:	f7ff fe44 	bl	802b954 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 802bccc:	4b03      	ldr	r3, [pc, #12]	; (802bcdc <_SendPacket+0x1c0>)
 802bcce:	2200      	movs	r2, #0
 802bcd0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 802bcd2:	bf00      	nop
 802bcd4:	3728      	adds	r7, #40	; 0x28
 802bcd6:	46bd      	mov	sp, r7
 802bcd8:	bd80      	pop	{r7, pc}
 802bcda:	bf00      	nop
 802bcdc:	2001a748 	.word	0x2001a748
 802bce0:	e0001004 	.word	0xe0001004
 802bce4:	2001df20 	.word	0x2001df20

0802bce8 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 802bce8:	b580      	push	{r7, lr}
 802bcea:	b0a2      	sub	sp, #136	; 0x88
 802bcec:	af00      	add	r7, sp, #0
 802bcee:	60f8      	str	r0, [r7, #12]
 802bcf0:	60b9      	str	r1, [r7, #8]
 802bcf2:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 802bcf4:	68fb      	ldr	r3, [r7, #12]
 802bcf6:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 802bcf8:	2300      	movs	r3, #0
 802bcfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 802bcfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802bd00:	1c5a      	adds	r2, r3, #1
 802bd02:	67fa      	str	r2, [r7, #124]	; 0x7c
 802bd04:	781b      	ldrb	r3, [r3, #0]
 802bd06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 802bd0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802bd0e:	2b00      	cmp	r3, #0
 802bd10:	d01e      	beq.n	802bd50 <_VPrintHost+0x68>
      break;
    }
    if (c == '%') {
 802bd12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802bd16:	2b25      	cmp	r3, #37	; 0x25
 802bd18:	d1f1      	bne.n	802bcfe <_VPrintHost+0x16>
      c = *p;
 802bd1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802bd1c:	781b      	ldrb	r3, [r3, #0]
 802bd1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 802bd22:	687b      	ldr	r3, [r7, #4]
 802bd24:	681b      	ldr	r3, [r3, #0]
 802bd26:	1d19      	adds	r1, r3, #4
 802bd28:	687a      	ldr	r2, [r7, #4]
 802bd2a:	6011      	str	r1, [r2, #0]
 802bd2c:	6819      	ldr	r1, [r3, #0]
 802bd2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802bd32:	1c5a      	adds	r2, r3, #1
 802bd34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802bd38:	460a      	mov	r2, r1
 802bd3a:	009b      	lsls	r3, r3, #2
 802bd3c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 802bd40:	440b      	add	r3, r1
 802bd42:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 802bd46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802bd4a:	2b10      	cmp	r3, #16
 802bd4c:	d002      	beq.n	802bd54 <_VPrintHost+0x6c>
    c = *p++;
 802bd4e:	e7d6      	b.n	802bcfe <_VPrintHost+0x16>
      break;
 802bd50:	bf00      	nop
 802bd52:	e000      	b.n	802bd56 <_VPrintHost+0x6e>
        break;
 802bd54:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 802bd56:	f3ef 8311 	mrs	r3, BASEPRI
 802bd5a:	f04f 0120 	mov.w	r1, #32
 802bd5e:	f381 8811 	msr	BASEPRI, r1
 802bd62:	65bb      	str	r3, [r7, #88]	; 0x58
 802bd64:	483f      	ldr	r0, [pc, #252]	; (802be64 <_VPrintHost+0x17c>)
 802bd66:	f7ff fde9 	bl	802b93c <_PreparePacket>
 802bd6a:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802bd6c:	2280      	movs	r2, #128	; 0x80
 802bd6e:	68f9      	ldr	r1, [r7, #12]
 802bd70:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802bd72:	f7ff fd93 	bl	802b89c <_EncodeStr>
 802bd76:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 802bd78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802bd7a:	677b      	str	r3, [r7, #116]	; 0x74
 802bd7c:	68bb      	ldr	r3, [r7, #8]
 802bd7e:	673b      	str	r3, [r7, #112]	; 0x70
 802bd80:	e00b      	b.n	802bd9a <_VPrintHost+0xb2>
 802bd82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802bd84:	b2da      	uxtb	r2, r3
 802bd86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802bd88:	1c59      	adds	r1, r3, #1
 802bd8a:	6779      	str	r1, [r7, #116]	; 0x74
 802bd8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802bd90:	b2d2      	uxtb	r2, r2
 802bd92:	701a      	strb	r2, [r3, #0]
 802bd94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802bd96:	09db      	lsrs	r3, r3, #7
 802bd98:	673b      	str	r3, [r7, #112]	; 0x70
 802bd9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802bd9c:	2b7f      	cmp	r3, #127	; 0x7f
 802bd9e:	d8f0      	bhi.n	802bd82 <_VPrintHost+0x9a>
 802bda0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802bda2:	1c5a      	adds	r2, r3, #1
 802bda4:	677a      	str	r2, [r7, #116]	; 0x74
 802bda6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802bda8:	b2d2      	uxtb	r2, r2
 802bdaa:	701a      	strb	r2, [r3, #0]
 802bdac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802bdae:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 802bdb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802bdb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 802bdb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802bdb8:	66bb      	str	r3, [r7, #104]	; 0x68
 802bdba:	e00b      	b.n	802bdd4 <_VPrintHost+0xec>
 802bdbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802bdbe:	b2da      	uxtb	r2, r3
 802bdc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802bdc2:	1c59      	adds	r1, r3, #1
 802bdc4:	66f9      	str	r1, [r7, #108]	; 0x6c
 802bdc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802bdca:	b2d2      	uxtb	r2, r2
 802bdcc:	701a      	strb	r2, [r3, #0]
 802bdce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802bdd0:	09db      	lsrs	r3, r3, #7
 802bdd2:	66bb      	str	r3, [r7, #104]	; 0x68
 802bdd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802bdd6:	2b7f      	cmp	r3, #127	; 0x7f
 802bdd8:	d8f0      	bhi.n	802bdbc <_VPrintHost+0xd4>
 802bdda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802bddc:	1c5a      	adds	r2, r3, #1
 802bdde:	66fa      	str	r2, [r7, #108]	; 0x6c
 802bde0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802bde2:	b2d2      	uxtb	r2, r2
 802bde4:	701a      	strb	r2, [r3, #0]
 802bde6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802bde8:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 802bdea:	f107 0314 	add.w	r3, r7, #20
 802bdee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 802bdf2:	e022      	b.n	802be3a <_VPrintHost+0x152>
      ENCODE_U32(pPayload, (*pParas));
 802bdf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802bdf6:	667b      	str	r3, [r7, #100]	; 0x64
 802bdf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802bdfc:	681b      	ldr	r3, [r3, #0]
 802bdfe:	663b      	str	r3, [r7, #96]	; 0x60
 802be00:	e00b      	b.n	802be1a <_VPrintHost+0x132>
 802be02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802be04:	b2da      	uxtb	r2, r3
 802be06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802be08:	1c59      	adds	r1, r3, #1
 802be0a:	6679      	str	r1, [r7, #100]	; 0x64
 802be0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802be10:	b2d2      	uxtb	r2, r2
 802be12:	701a      	strb	r2, [r3, #0]
 802be14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802be16:	09db      	lsrs	r3, r3, #7
 802be18:	663b      	str	r3, [r7, #96]	; 0x60
 802be1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802be1c:	2b7f      	cmp	r3, #127	; 0x7f
 802be1e:	d8f0      	bhi.n	802be02 <_VPrintHost+0x11a>
 802be20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802be22:	1c5a      	adds	r2, r3, #1
 802be24:	667a      	str	r2, [r7, #100]	; 0x64
 802be26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802be28:	b2d2      	uxtb	r2, r2
 802be2a:	701a      	strb	r2, [r3, #0]
 802be2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802be2e:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 802be30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802be34:	3304      	adds	r3, #4
 802be36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 802be3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802be3e:	1e5a      	subs	r2, r3, #1
 802be40:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802be44:	2b00      	cmp	r3, #0
 802be46:	d1d5      	bne.n	802bdf4 <_VPrintHost+0x10c>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 802be48:	221a      	movs	r2, #26
 802be4a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 802be4c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802be4e:	f7ff fe65 	bl	802bb1c <_SendPacket>
    RECORD_END();
 802be52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802be54:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 802be58:	2300      	movs	r3, #0
}
 802be5a:	4618      	mov	r0, r3
 802be5c:	3788      	adds	r7, #136	; 0x88
 802be5e:	46bd      	mov	sp, r7
 802be60:	bd80      	pop	{r7, pc}
 802be62:	bf00      	nop
 802be64:	2001a778 	.word	0x2001a778

0802be68 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 802be68:	b580      	push	{r7, lr}
 802be6a:	b086      	sub	sp, #24
 802be6c:	af02      	add	r7, sp, #8
 802be6e:	60f8      	str	r0, [r7, #12]
 802be70:	60b9      	str	r1, [r7, #8]
 802be72:	607a      	str	r2, [r7, #4]
 802be74:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 802be76:	2300      	movs	r3, #0
 802be78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802be7c:	4917      	ldr	r1, [pc, #92]	; (802bedc <SEGGER_SYSVIEW_Init+0x74>)
 802be7e:	4818      	ldr	r0, [pc, #96]	; (802bee0 <SEGGER_SYSVIEW_Init+0x78>)
 802be80:	f7ff fc3c 	bl	802b6fc <SEGGER_RTT_AllocUpBuffer>
 802be84:	4603      	mov	r3, r0
 802be86:	b2da      	uxtb	r2, r3
 802be88:	4b16      	ldr	r3, [pc, #88]	; (802bee4 <SEGGER_SYSVIEW_Init+0x7c>)
 802be8a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 802be8c:	4b15      	ldr	r3, [pc, #84]	; (802bee4 <SEGGER_SYSVIEW_Init+0x7c>)
 802be8e:	785a      	ldrb	r2, [r3, #1]
 802be90:	4b14      	ldr	r3, [pc, #80]	; (802bee4 <SEGGER_SYSVIEW_Init+0x7c>)
 802be92:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 802be94:	4b13      	ldr	r3, [pc, #76]	; (802bee4 <SEGGER_SYSVIEW_Init+0x7c>)
 802be96:	7e1b      	ldrb	r3, [r3, #24]
 802be98:	4618      	mov	r0, r3
 802be9a:	2300      	movs	r3, #0
 802be9c:	9300      	str	r3, [sp, #0]
 802be9e:	2308      	movs	r3, #8
 802bea0:	4a11      	ldr	r2, [pc, #68]	; (802bee8 <SEGGER_SYSVIEW_Init+0x80>)
 802bea2:	490f      	ldr	r1, [pc, #60]	; (802bee0 <SEGGER_SYSVIEW_Init+0x78>)
 802bea4:	f7ff fcae 	bl	802b804 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 802bea8:	4b0e      	ldr	r3, [pc, #56]	; (802bee4 <SEGGER_SYSVIEW_Init+0x7c>)
 802beaa:	2200      	movs	r2, #0
 802beac:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 802beae:	4b0f      	ldr	r3, [pc, #60]	; (802beec <SEGGER_SYSVIEW_Init+0x84>)
 802beb0:	681b      	ldr	r3, [r3, #0]
 802beb2:	4a0c      	ldr	r2, [pc, #48]	; (802bee4 <SEGGER_SYSVIEW_Init+0x7c>)
 802beb4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 802beb6:	4a0b      	ldr	r2, [pc, #44]	; (802bee4 <SEGGER_SYSVIEW_Init+0x7c>)
 802beb8:	687b      	ldr	r3, [r7, #4]
 802beba:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 802bebc:	4a09      	ldr	r2, [pc, #36]	; (802bee4 <SEGGER_SYSVIEW_Init+0x7c>)
 802bebe:	68fb      	ldr	r3, [r7, #12]
 802bec0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 802bec2:	4a08      	ldr	r2, [pc, #32]	; (802bee4 <SEGGER_SYSVIEW_Init+0x7c>)
 802bec4:	68bb      	ldr	r3, [r7, #8]
 802bec6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 802bec8:	4a06      	ldr	r2, [pc, #24]	; (802bee4 <SEGGER_SYSVIEW_Init+0x7c>)
 802beca:	683b      	ldr	r3, [r7, #0]
 802becc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 802bece:	4b05      	ldr	r3, [pc, #20]	; (802bee4 <SEGGER_SYSVIEW_Init+0x7c>)
 802bed0:	2200      	movs	r2, #0
 802bed2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 802bed4:	bf00      	nop
 802bed6:	3710      	adds	r7, #16
 802bed8:	46bd      	mov	sp, r7
 802beda:	bd80      	pop	{r7, pc}
 802bedc:	2001a340 	.word	0x2001a340
 802bee0:	0802dad0 	.word	0x0802dad0
 802bee4:	2001a748 	.word	0x2001a748
 802bee8:	2001a740 	.word	0x2001a740
 802beec:	e0001004 	.word	0xe0001004

0802bef0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 802bef0:	b480      	push	{r7}
 802bef2:	b083      	sub	sp, #12
 802bef4:	af00      	add	r7, sp, #0
 802bef6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 802bef8:	4a04      	ldr	r2, [pc, #16]	; (802bf0c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 802befa:	687b      	ldr	r3, [r7, #4]
 802befc:	6113      	str	r3, [r2, #16]
}
 802befe:	bf00      	nop
 802bf00:	370c      	adds	r7, #12
 802bf02:	46bd      	mov	sp, r7
 802bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bf08:	4770      	bx	lr
 802bf0a:	bf00      	nop
 802bf0c:	2001a748 	.word	0x2001a748

0802bf10 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 802bf10:	b580      	push	{r7, lr}
 802bf12:	b084      	sub	sp, #16
 802bf14:	af00      	add	r7, sp, #0
 802bf16:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 802bf18:	f3ef 8311 	mrs	r3, BASEPRI
 802bf1c:	f04f 0120 	mov.w	r1, #32
 802bf20:	f381 8811 	msr	BASEPRI, r1
 802bf24:	60fb      	str	r3, [r7, #12]
 802bf26:	4808      	ldr	r0, [pc, #32]	; (802bf48 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 802bf28:	f7ff fd08 	bl	802b93c <_PreparePacket>
 802bf2c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 802bf2e:	687a      	ldr	r2, [r7, #4]
 802bf30:	68b9      	ldr	r1, [r7, #8]
 802bf32:	68b8      	ldr	r0, [r7, #8]
 802bf34:	f7ff fdf2 	bl	802bb1c <_SendPacket>
  RECORD_END();
 802bf38:	68fb      	ldr	r3, [r7, #12]
 802bf3a:	f383 8811 	msr	BASEPRI, r3
}
 802bf3e:	bf00      	nop
 802bf40:	3710      	adds	r7, #16
 802bf42:	46bd      	mov	sp, r7
 802bf44:	bd80      	pop	{r7, pc}
 802bf46:	bf00      	nop
 802bf48:	2001a778 	.word	0x2001a778

0802bf4c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 802bf4c:	b580      	push	{r7, lr}
 802bf4e:	b088      	sub	sp, #32
 802bf50:	af00      	add	r7, sp, #0
 802bf52:	6078      	str	r0, [r7, #4]
 802bf54:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802bf56:	f3ef 8311 	mrs	r3, BASEPRI
 802bf5a:	f04f 0120 	mov.w	r1, #32
 802bf5e:	f381 8811 	msr	BASEPRI, r1
 802bf62:	617b      	str	r3, [r7, #20]
 802bf64:	4816      	ldr	r0, [pc, #88]	; (802bfc0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 802bf66:	f7ff fce9 	bl	802b93c <_PreparePacket>
 802bf6a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802bf6c:	693b      	ldr	r3, [r7, #16]
 802bf6e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 802bf70:	68fb      	ldr	r3, [r7, #12]
 802bf72:	61fb      	str	r3, [r7, #28]
 802bf74:	683b      	ldr	r3, [r7, #0]
 802bf76:	61bb      	str	r3, [r7, #24]
 802bf78:	e00b      	b.n	802bf92 <SEGGER_SYSVIEW_RecordU32+0x46>
 802bf7a:	69bb      	ldr	r3, [r7, #24]
 802bf7c:	b2da      	uxtb	r2, r3
 802bf7e:	69fb      	ldr	r3, [r7, #28]
 802bf80:	1c59      	adds	r1, r3, #1
 802bf82:	61f9      	str	r1, [r7, #28]
 802bf84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802bf88:	b2d2      	uxtb	r2, r2
 802bf8a:	701a      	strb	r2, [r3, #0]
 802bf8c:	69bb      	ldr	r3, [r7, #24]
 802bf8e:	09db      	lsrs	r3, r3, #7
 802bf90:	61bb      	str	r3, [r7, #24]
 802bf92:	69bb      	ldr	r3, [r7, #24]
 802bf94:	2b7f      	cmp	r3, #127	; 0x7f
 802bf96:	d8f0      	bhi.n	802bf7a <SEGGER_SYSVIEW_RecordU32+0x2e>
 802bf98:	69fb      	ldr	r3, [r7, #28]
 802bf9a:	1c5a      	adds	r2, r3, #1
 802bf9c:	61fa      	str	r2, [r7, #28]
 802bf9e:	69ba      	ldr	r2, [r7, #24]
 802bfa0:	b2d2      	uxtb	r2, r2
 802bfa2:	701a      	strb	r2, [r3, #0]
 802bfa4:	69fb      	ldr	r3, [r7, #28]
 802bfa6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802bfa8:	687a      	ldr	r2, [r7, #4]
 802bfaa:	68f9      	ldr	r1, [r7, #12]
 802bfac:	6938      	ldr	r0, [r7, #16]
 802bfae:	f7ff fdb5 	bl	802bb1c <_SendPacket>
  RECORD_END();
 802bfb2:	697b      	ldr	r3, [r7, #20]
 802bfb4:	f383 8811 	msr	BASEPRI, r3
}
 802bfb8:	bf00      	nop
 802bfba:	3720      	adds	r7, #32
 802bfbc:	46bd      	mov	sp, r7
 802bfbe:	bd80      	pop	{r7, pc}
 802bfc0:	2001a778 	.word	0x2001a778

0802bfc4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 802bfc4:	b580      	push	{r7, lr}
 802bfc6:	b08c      	sub	sp, #48	; 0x30
 802bfc8:	af00      	add	r7, sp, #0
 802bfca:	60f8      	str	r0, [r7, #12]
 802bfcc:	60b9      	str	r1, [r7, #8]
 802bfce:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 802bfd0:	f3ef 8311 	mrs	r3, BASEPRI
 802bfd4:	f04f 0120 	mov.w	r1, #32
 802bfd8:	f381 8811 	msr	BASEPRI, r1
 802bfdc:	61fb      	str	r3, [r7, #28]
 802bfde:	4825      	ldr	r0, [pc, #148]	; (802c074 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 802bfe0:	f7ff fcac 	bl	802b93c <_PreparePacket>
 802bfe4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 802bfe6:	69bb      	ldr	r3, [r7, #24]
 802bfe8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 802bfea:	697b      	ldr	r3, [r7, #20]
 802bfec:	62fb      	str	r3, [r7, #44]	; 0x2c
 802bfee:	68bb      	ldr	r3, [r7, #8]
 802bff0:	62bb      	str	r3, [r7, #40]	; 0x28
 802bff2:	e00b      	b.n	802c00c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 802bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bff6:	b2da      	uxtb	r2, r3
 802bff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bffa:	1c59      	adds	r1, r3, #1
 802bffc:	62f9      	str	r1, [r7, #44]	; 0x2c
 802bffe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c002:	b2d2      	uxtb	r2, r2
 802c004:	701a      	strb	r2, [r3, #0]
 802c006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c008:	09db      	lsrs	r3, r3, #7
 802c00a:	62bb      	str	r3, [r7, #40]	; 0x28
 802c00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c00e:	2b7f      	cmp	r3, #127	; 0x7f
 802c010:	d8f0      	bhi.n	802bff4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 802c012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c014:	1c5a      	adds	r2, r3, #1
 802c016:	62fa      	str	r2, [r7, #44]	; 0x2c
 802c018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802c01a:	b2d2      	uxtb	r2, r2
 802c01c:	701a      	strb	r2, [r3, #0]
 802c01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c020:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 802c022:	697b      	ldr	r3, [r7, #20]
 802c024:	627b      	str	r3, [r7, #36]	; 0x24
 802c026:	687b      	ldr	r3, [r7, #4]
 802c028:	623b      	str	r3, [r7, #32]
 802c02a:	e00b      	b.n	802c044 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 802c02c:	6a3b      	ldr	r3, [r7, #32]
 802c02e:	b2da      	uxtb	r2, r3
 802c030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c032:	1c59      	adds	r1, r3, #1
 802c034:	6279      	str	r1, [r7, #36]	; 0x24
 802c036:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c03a:	b2d2      	uxtb	r2, r2
 802c03c:	701a      	strb	r2, [r3, #0]
 802c03e:	6a3b      	ldr	r3, [r7, #32]
 802c040:	09db      	lsrs	r3, r3, #7
 802c042:	623b      	str	r3, [r7, #32]
 802c044:	6a3b      	ldr	r3, [r7, #32]
 802c046:	2b7f      	cmp	r3, #127	; 0x7f
 802c048:	d8f0      	bhi.n	802c02c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 802c04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c04c:	1c5a      	adds	r2, r3, #1
 802c04e:	627a      	str	r2, [r7, #36]	; 0x24
 802c050:	6a3a      	ldr	r2, [r7, #32]
 802c052:	b2d2      	uxtb	r2, r2
 802c054:	701a      	strb	r2, [r3, #0]
 802c056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c058:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802c05a:	68fa      	ldr	r2, [r7, #12]
 802c05c:	6979      	ldr	r1, [r7, #20]
 802c05e:	69b8      	ldr	r0, [r7, #24]
 802c060:	f7ff fd5c 	bl	802bb1c <_SendPacket>
  RECORD_END();
 802c064:	69fb      	ldr	r3, [r7, #28]
 802c066:	f383 8811 	msr	BASEPRI, r3
}
 802c06a:	bf00      	nop
 802c06c:	3730      	adds	r7, #48	; 0x30
 802c06e:	46bd      	mov	sp, r7
 802c070:	bd80      	pop	{r7, pc}
 802c072:	bf00      	nop
 802c074:	2001a778 	.word	0x2001a778

0802c078 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 802c078:	b580      	push	{r7, lr}
 802c07a:	b08e      	sub	sp, #56	; 0x38
 802c07c:	af00      	add	r7, sp, #0
 802c07e:	60f8      	str	r0, [r7, #12]
 802c080:	60b9      	str	r1, [r7, #8]
 802c082:	607a      	str	r2, [r7, #4]
 802c084:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 802c086:	f3ef 8311 	mrs	r3, BASEPRI
 802c08a:	f04f 0120 	mov.w	r1, #32
 802c08e:	f381 8811 	msr	BASEPRI, r1
 802c092:	61fb      	str	r3, [r7, #28]
 802c094:	4832      	ldr	r0, [pc, #200]	; (802c160 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 802c096:	f7ff fc51 	bl	802b93c <_PreparePacket>
 802c09a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 802c09c:	69bb      	ldr	r3, [r7, #24]
 802c09e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 802c0a0:	697b      	ldr	r3, [r7, #20]
 802c0a2:	637b      	str	r3, [r7, #52]	; 0x34
 802c0a4:	68bb      	ldr	r3, [r7, #8]
 802c0a6:	633b      	str	r3, [r7, #48]	; 0x30
 802c0a8:	e00b      	b.n	802c0c2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 802c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c0ac:	b2da      	uxtb	r2, r3
 802c0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c0b0:	1c59      	adds	r1, r3, #1
 802c0b2:	6379      	str	r1, [r7, #52]	; 0x34
 802c0b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c0b8:	b2d2      	uxtb	r2, r2
 802c0ba:	701a      	strb	r2, [r3, #0]
 802c0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c0be:	09db      	lsrs	r3, r3, #7
 802c0c0:	633b      	str	r3, [r7, #48]	; 0x30
 802c0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c0c4:	2b7f      	cmp	r3, #127	; 0x7f
 802c0c6:	d8f0      	bhi.n	802c0aa <SEGGER_SYSVIEW_RecordU32x3+0x32>
 802c0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c0ca:	1c5a      	adds	r2, r3, #1
 802c0cc:	637a      	str	r2, [r7, #52]	; 0x34
 802c0ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802c0d0:	b2d2      	uxtb	r2, r2
 802c0d2:	701a      	strb	r2, [r3, #0]
 802c0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c0d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 802c0d8:	697b      	ldr	r3, [r7, #20]
 802c0da:	62fb      	str	r3, [r7, #44]	; 0x2c
 802c0dc:	687b      	ldr	r3, [r7, #4]
 802c0de:	62bb      	str	r3, [r7, #40]	; 0x28
 802c0e0:	e00b      	b.n	802c0fa <SEGGER_SYSVIEW_RecordU32x3+0x82>
 802c0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c0e4:	b2da      	uxtb	r2, r3
 802c0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c0e8:	1c59      	adds	r1, r3, #1
 802c0ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 802c0ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c0f0:	b2d2      	uxtb	r2, r2
 802c0f2:	701a      	strb	r2, [r3, #0]
 802c0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c0f6:	09db      	lsrs	r3, r3, #7
 802c0f8:	62bb      	str	r3, [r7, #40]	; 0x28
 802c0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c0fc:	2b7f      	cmp	r3, #127	; 0x7f
 802c0fe:	d8f0      	bhi.n	802c0e2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 802c100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c102:	1c5a      	adds	r2, r3, #1
 802c104:	62fa      	str	r2, [r7, #44]	; 0x2c
 802c106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802c108:	b2d2      	uxtb	r2, r2
 802c10a:	701a      	strb	r2, [r3, #0]
 802c10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c10e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 802c110:	697b      	ldr	r3, [r7, #20]
 802c112:	627b      	str	r3, [r7, #36]	; 0x24
 802c114:	683b      	ldr	r3, [r7, #0]
 802c116:	623b      	str	r3, [r7, #32]
 802c118:	e00b      	b.n	802c132 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 802c11a:	6a3b      	ldr	r3, [r7, #32]
 802c11c:	b2da      	uxtb	r2, r3
 802c11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c120:	1c59      	adds	r1, r3, #1
 802c122:	6279      	str	r1, [r7, #36]	; 0x24
 802c124:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c128:	b2d2      	uxtb	r2, r2
 802c12a:	701a      	strb	r2, [r3, #0]
 802c12c:	6a3b      	ldr	r3, [r7, #32]
 802c12e:	09db      	lsrs	r3, r3, #7
 802c130:	623b      	str	r3, [r7, #32]
 802c132:	6a3b      	ldr	r3, [r7, #32]
 802c134:	2b7f      	cmp	r3, #127	; 0x7f
 802c136:	d8f0      	bhi.n	802c11a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 802c138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c13a:	1c5a      	adds	r2, r3, #1
 802c13c:	627a      	str	r2, [r7, #36]	; 0x24
 802c13e:	6a3a      	ldr	r2, [r7, #32]
 802c140:	b2d2      	uxtb	r2, r2
 802c142:	701a      	strb	r2, [r3, #0]
 802c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c146:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802c148:	68fa      	ldr	r2, [r7, #12]
 802c14a:	6979      	ldr	r1, [r7, #20]
 802c14c:	69b8      	ldr	r0, [r7, #24]
 802c14e:	f7ff fce5 	bl	802bb1c <_SendPacket>
  RECORD_END();
 802c152:	69fb      	ldr	r3, [r7, #28]
 802c154:	f383 8811 	msr	BASEPRI, r3
}
 802c158:	bf00      	nop
 802c15a:	3738      	adds	r7, #56	; 0x38
 802c15c:	46bd      	mov	sp, r7
 802c15e:	bd80      	pop	{r7, pc}
 802c160:	2001a778 	.word	0x2001a778

0802c164 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 802c164:	b580      	push	{r7, lr}
 802c166:	b090      	sub	sp, #64	; 0x40
 802c168:	af00      	add	r7, sp, #0
 802c16a:	60f8      	str	r0, [r7, #12]
 802c16c:	60b9      	str	r1, [r7, #8]
 802c16e:	607a      	str	r2, [r7, #4]
 802c170:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 802c172:	f3ef 8311 	mrs	r3, BASEPRI
 802c176:	f04f 0120 	mov.w	r1, #32
 802c17a:	f381 8811 	msr	BASEPRI, r1
 802c17e:	61fb      	str	r3, [r7, #28]
 802c180:	4840      	ldr	r0, [pc, #256]	; (802c284 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 802c182:	f7ff fbdb 	bl	802b93c <_PreparePacket>
 802c186:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 802c188:	69bb      	ldr	r3, [r7, #24]
 802c18a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 802c18c:	697b      	ldr	r3, [r7, #20]
 802c18e:	63fb      	str	r3, [r7, #60]	; 0x3c
 802c190:	68bb      	ldr	r3, [r7, #8]
 802c192:	63bb      	str	r3, [r7, #56]	; 0x38
 802c194:	e00b      	b.n	802c1ae <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 802c196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c198:	b2da      	uxtb	r2, r3
 802c19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c19c:	1c59      	adds	r1, r3, #1
 802c19e:	63f9      	str	r1, [r7, #60]	; 0x3c
 802c1a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c1a4:	b2d2      	uxtb	r2, r2
 802c1a6:	701a      	strb	r2, [r3, #0]
 802c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c1aa:	09db      	lsrs	r3, r3, #7
 802c1ac:	63bb      	str	r3, [r7, #56]	; 0x38
 802c1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c1b0:	2b7f      	cmp	r3, #127	; 0x7f
 802c1b2:	d8f0      	bhi.n	802c196 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 802c1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c1b6:	1c5a      	adds	r2, r3, #1
 802c1b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 802c1ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802c1bc:	b2d2      	uxtb	r2, r2
 802c1be:	701a      	strb	r2, [r3, #0]
 802c1c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c1c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 802c1c4:	697b      	ldr	r3, [r7, #20]
 802c1c6:	637b      	str	r3, [r7, #52]	; 0x34
 802c1c8:	687b      	ldr	r3, [r7, #4]
 802c1ca:	633b      	str	r3, [r7, #48]	; 0x30
 802c1cc:	e00b      	b.n	802c1e6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 802c1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c1d0:	b2da      	uxtb	r2, r3
 802c1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c1d4:	1c59      	adds	r1, r3, #1
 802c1d6:	6379      	str	r1, [r7, #52]	; 0x34
 802c1d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c1dc:	b2d2      	uxtb	r2, r2
 802c1de:	701a      	strb	r2, [r3, #0]
 802c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c1e2:	09db      	lsrs	r3, r3, #7
 802c1e4:	633b      	str	r3, [r7, #48]	; 0x30
 802c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c1e8:	2b7f      	cmp	r3, #127	; 0x7f
 802c1ea:	d8f0      	bhi.n	802c1ce <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 802c1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c1ee:	1c5a      	adds	r2, r3, #1
 802c1f0:	637a      	str	r2, [r7, #52]	; 0x34
 802c1f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802c1f4:	b2d2      	uxtb	r2, r2
 802c1f6:	701a      	strb	r2, [r3, #0]
 802c1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c1fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 802c1fc:	697b      	ldr	r3, [r7, #20]
 802c1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 802c200:	683b      	ldr	r3, [r7, #0]
 802c202:	62bb      	str	r3, [r7, #40]	; 0x28
 802c204:	e00b      	b.n	802c21e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 802c206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c208:	b2da      	uxtb	r2, r3
 802c20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c20c:	1c59      	adds	r1, r3, #1
 802c20e:	62f9      	str	r1, [r7, #44]	; 0x2c
 802c210:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c214:	b2d2      	uxtb	r2, r2
 802c216:	701a      	strb	r2, [r3, #0]
 802c218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c21a:	09db      	lsrs	r3, r3, #7
 802c21c:	62bb      	str	r3, [r7, #40]	; 0x28
 802c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c220:	2b7f      	cmp	r3, #127	; 0x7f
 802c222:	d8f0      	bhi.n	802c206 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 802c224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c226:	1c5a      	adds	r2, r3, #1
 802c228:	62fa      	str	r2, [r7, #44]	; 0x2c
 802c22a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802c22c:	b2d2      	uxtb	r2, r2
 802c22e:	701a      	strb	r2, [r3, #0]
 802c230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c232:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 802c234:	697b      	ldr	r3, [r7, #20]
 802c236:	627b      	str	r3, [r7, #36]	; 0x24
 802c238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c23a:	623b      	str	r3, [r7, #32]
 802c23c:	e00b      	b.n	802c256 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 802c23e:	6a3b      	ldr	r3, [r7, #32]
 802c240:	b2da      	uxtb	r2, r3
 802c242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c244:	1c59      	adds	r1, r3, #1
 802c246:	6279      	str	r1, [r7, #36]	; 0x24
 802c248:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c24c:	b2d2      	uxtb	r2, r2
 802c24e:	701a      	strb	r2, [r3, #0]
 802c250:	6a3b      	ldr	r3, [r7, #32]
 802c252:	09db      	lsrs	r3, r3, #7
 802c254:	623b      	str	r3, [r7, #32]
 802c256:	6a3b      	ldr	r3, [r7, #32]
 802c258:	2b7f      	cmp	r3, #127	; 0x7f
 802c25a:	d8f0      	bhi.n	802c23e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 802c25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c25e:	1c5a      	adds	r2, r3, #1
 802c260:	627a      	str	r2, [r7, #36]	; 0x24
 802c262:	6a3a      	ldr	r2, [r7, #32]
 802c264:	b2d2      	uxtb	r2, r2
 802c266:	701a      	strb	r2, [r3, #0]
 802c268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c26a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802c26c:	68fa      	ldr	r2, [r7, #12]
 802c26e:	6979      	ldr	r1, [r7, #20]
 802c270:	69b8      	ldr	r0, [r7, #24]
 802c272:	f7ff fc53 	bl	802bb1c <_SendPacket>
  RECORD_END();
 802c276:	69fb      	ldr	r3, [r7, #28]
 802c278:	f383 8811 	msr	BASEPRI, r3
}
 802c27c:	bf00      	nop
 802c27e:	3740      	adds	r7, #64	; 0x40
 802c280:	46bd      	mov	sp, r7
 802c282:	bd80      	pop	{r7, pc}
 802c284:	2001a778 	.word	0x2001a778

0802c288 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 802c288:	b580      	push	{r7, lr}
 802c28a:	b08c      	sub	sp, #48	; 0x30
 802c28c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 802c28e:	4b58      	ldr	r3, [pc, #352]	; (802c3f0 <SEGGER_SYSVIEW_Start+0x168>)
 802c290:	2201      	movs	r2, #1
 802c292:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 802c294:	f3ef 8311 	mrs	r3, BASEPRI
 802c298:	f04f 0120 	mov.w	r1, #32
 802c29c:	f381 8811 	msr	BASEPRI, r1
 802c2a0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 802c2a2:	4b53      	ldr	r3, [pc, #332]	; (802c3f0 <SEGGER_SYSVIEW_Start+0x168>)
 802c2a4:	785b      	ldrb	r3, [r3, #1]
 802c2a6:	220a      	movs	r2, #10
 802c2a8:	4952      	ldr	r1, [pc, #328]	; (802c3f4 <SEGGER_SYSVIEW_Start+0x16c>)
 802c2aa:	4618      	mov	r0, r3
 802c2ac:	f7d3 ff90 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 802c2b0:	68fb      	ldr	r3, [r7, #12]
 802c2b2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 802c2b6:	200a      	movs	r0, #10
 802c2b8:	f7ff fe2a 	bl	802bf10 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 802c2bc:	f3ef 8311 	mrs	r3, BASEPRI
 802c2c0:	f04f 0120 	mov.w	r1, #32
 802c2c4:	f381 8811 	msr	BASEPRI, r1
 802c2c8:	60bb      	str	r3, [r7, #8]
 802c2ca:	484b      	ldr	r0, [pc, #300]	; (802c3f8 <SEGGER_SYSVIEW_Start+0x170>)
 802c2cc:	f7ff fb36 	bl	802b93c <_PreparePacket>
 802c2d0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 802c2d2:	687b      	ldr	r3, [r7, #4]
 802c2d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 802c2d6:	683b      	ldr	r3, [r7, #0]
 802c2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 802c2da:	4b45      	ldr	r3, [pc, #276]	; (802c3f0 <SEGGER_SYSVIEW_Start+0x168>)
 802c2dc:	685b      	ldr	r3, [r3, #4]
 802c2de:	62bb      	str	r3, [r7, #40]	; 0x28
 802c2e0:	e00b      	b.n	802c2fa <SEGGER_SYSVIEW_Start+0x72>
 802c2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c2e4:	b2da      	uxtb	r2, r3
 802c2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c2e8:	1c59      	adds	r1, r3, #1
 802c2ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 802c2ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c2f0:	b2d2      	uxtb	r2, r2
 802c2f2:	701a      	strb	r2, [r3, #0]
 802c2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c2f6:	09db      	lsrs	r3, r3, #7
 802c2f8:	62bb      	str	r3, [r7, #40]	; 0x28
 802c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c2fc:	2b7f      	cmp	r3, #127	; 0x7f
 802c2fe:	d8f0      	bhi.n	802c2e2 <SEGGER_SYSVIEW_Start+0x5a>
 802c300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c302:	1c5a      	adds	r2, r3, #1
 802c304:	62fa      	str	r2, [r7, #44]	; 0x2c
 802c306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802c308:	b2d2      	uxtb	r2, r2
 802c30a:	701a      	strb	r2, [r3, #0]
 802c30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c30e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 802c310:	683b      	ldr	r3, [r7, #0]
 802c312:	627b      	str	r3, [r7, #36]	; 0x24
 802c314:	4b36      	ldr	r3, [pc, #216]	; (802c3f0 <SEGGER_SYSVIEW_Start+0x168>)
 802c316:	689b      	ldr	r3, [r3, #8]
 802c318:	623b      	str	r3, [r7, #32]
 802c31a:	e00b      	b.n	802c334 <SEGGER_SYSVIEW_Start+0xac>
 802c31c:	6a3b      	ldr	r3, [r7, #32]
 802c31e:	b2da      	uxtb	r2, r3
 802c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c322:	1c59      	adds	r1, r3, #1
 802c324:	6279      	str	r1, [r7, #36]	; 0x24
 802c326:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c32a:	b2d2      	uxtb	r2, r2
 802c32c:	701a      	strb	r2, [r3, #0]
 802c32e:	6a3b      	ldr	r3, [r7, #32]
 802c330:	09db      	lsrs	r3, r3, #7
 802c332:	623b      	str	r3, [r7, #32]
 802c334:	6a3b      	ldr	r3, [r7, #32]
 802c336:	2b7f      	cmp	r3, #127	; 0x7f
 802c338:	d8f0      	bhi.n	802c31c <SEGGER_SYSVIEW_Start+0x94>
 802c33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c33c:	1c5a      	adds	r2, r3, #1
 802c33e:	627a      	str	r2, [r7, #36]	; 0x24
 802c340:	6a3a      	ldr	r2, [r7, #32]
 802c342:	b2d2      	uxtb	r2, r2
 802c344:	701a      	strb	r2, [r3, #0]
 802c346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c348:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 802c34a:	683b      	ldr	r3, [r7, #0]
 802c34c:	61fb      	str	r3, [r7, #28]
 802c34e:	4b28      	ldr	r3, [pc, #160]	; (802c3f0 <SEGGER_SYSVIEW_Start+0x168>)
 802c350:	691b      	ldr	r3, [r3, #16]
 802c352:	61bb      	str	r3, [r7, #24]
 802c354:	e00b      	b.n	802c36e <SEGGER_SYSVIEW_Start+0xe6>
 802c356:	69bb      	ldr	r3, [r7, #24]
 802c358:	b2da      	uxtb	r2, r3
 802c35a:	69fb      	ldr	r3, [r7, #28]
 802c35c:	1c59      	adds	r1, r3, #1
 802c35e:	61f9      	str	r1, [r7, #28]
 802c360:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c364:	b2d2      	uxtb	r2, r2
 802c366:	701a      	strb	r2, [r3, #0]
 802c368:	69bb      	ldr	r3, [r7, #24]
 802c36a:	09db      	lsrs	r3, r3, #7
 802c36c:	61bb      	str	r3, [r7, #24]
 802c36e:	69bb      	ldr	r3, [r7, #24]
 802c370:	2b7f      	cmp	r3, #127	; 0x7f
 802c372:	d8f0      	bhi.n	802c356 <SEGGER_SYSVIEW_Start+0xce>
 802c374:	69fb      	ldr	r3, [r7, #28]
 802c376:	1c5a      	adds	r2, r3, #1
 802c378:	61fa      	str	r2, [r7, #28]
 802c37a:	69ba      	ldr	r2, [r7, #24]
 802c37c:	b2d2      	uxtb	r2, r2
 802c37e:	701a      	strb	r2, [r3, #0]
 802c380:	69fb      	ldr	r3, [r7, #28]
 802c382:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 802c384:	683b      	ldr	r3, [r7, #0]
 802c386:	617b      	str	r3, [r7, #20]
 802c388:	2300      	movs	r3, #0
 802c38a:	613b      	str	r3, [r7, #16]
 802c38c:	e00b      	b.n	802c3a6 <SEGGER_SYSVIEW_Start+0x11e>
 802c38e:	693b      	ldr	r3, [r7, #16]
 802c390:	b2da      	uxtb	r2, r3
 802c392:	697b      	ldr	r3, [r7, #20]
 802c394:	1c59      	adds	r1, r3, #1
 802c396:	6179      	str	r1, [r7, #20]
 802c398:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c39c:	b2d2      	uxtb	r2, r2
 802c39e:	701a      	strb	r2, [r3, #0]
 802c3a0:	693b      	ldr	r3, [r7, #16]
 802c3a2:	09db      	lsrs	r3, r3, #7
 802c3a4:	613b      	str	r3, [r7, #16]
 802c3a6:	693b      	ldr	r3, [r7, #16]
 802c3a8:	2b7f      	cmp	r3, #127	; 0x7f
 802c3aa:	d8f0      	bhi.n	802c38e <SEGGER_SYSVIEW_Start+0x106>
 802c3ac:	697b      	ldr	r3, [r7, #20]
 802c3ae:	1c5a      	adds	r2, r3, #1
 802c3b0:	617a      	str	r2, [r7, #20]
 802c3b2:	693a      	ldr	r2, [r7, #16]
 802c3b4:	b2d2      	uxtb	r2, r2
 802c3b6:	701a      	strb	r2, [r3, #0]
 802c3b8:	697b      	ldr	r3, [r7, #20]
 802c3ba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 802c3bc:	2218      	movs	r2, #24
 802c3be:	6839      	ldr	r1, [r7, #0]
 802c3c0:	6878      	ldr	r0, [r7, #4]
 802c3c2:	f7ff fbab 	bl	802bb1c <_SendPacket>
      RECORD_END();
 802c3c6:	68bb      	ldr	r3, [r7, #8]
 802c3c8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 802c3cc:	4b08      	ldr	r3, [pc, #32]	; (802c3f0 <SEGGER_SYSVIEW_Start+0x168>)
 802c3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c3d0:	2b00      	cmp	r3, #0
 802c3d2:	d002      	beq.n	802c3da <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 802c3d4:	4b06      	ldr	r3, [pc, #24]	; (802c3f0 <SEGGER_SYSVIEW_Start+0x168>)
 802c3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c3d8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 802c3da:	f000 f9eb 	bl	802c7b4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 802c3de:	f000 f9b1 	bl	802c744 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 802c3e2:	f000 fba9 	bl	802cb38 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 802c3e6:	bf00      	nop
 802c3e8:	3730      	adds	r7, #48	; 0x30
 802c3ea:	46bd      	mov	sp, r7
 802c3ec:	bd80      	pop	{r7, pc}
 802c3ee:	bf00      	nop
 802c3f0:	2001a748 	.word	0x2001a748
 802c3f4:	0802e088 	.word	0x0802e088
 802c3f8:	2001a778 	.word	0x2001a778

0802c3fc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 802c3fc:	b580      	push	{r7, lr}
 802c3fe:	b082      	sub	sp, #8
 802c400:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 802c402:	f3ef 8311 	mrs	r3, BASEPRI
 802c406:	f04f 0120 	mov.w	r1, #32
 802c40a:	f381 8811 	msr	BASEPRI, r1
 802c40e:	607b      	str	r3, [r7, #4]
 802c410:	480b      	ldr	r0, [pc, #44]	; (802c440 <SEGGER_SYSVIEW_Stop+0x44>)
 802c412:	f7ff fa93 	bl	802b93c <_PreparePacket>
 802c416:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 802c418:	4b0a      	ldr	r3, [pc, #40]	; (802c444 <SEGGER_SYSVIEW_Stop+0x48>)
 802c41a:	781b      	ldrb	r3, [r3, #0]
 802c41c:	2b00      	cmp	r3, #0
 802c41e:	d007      	beq.n	802c430 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 802c420:	220b      	movs	r2, #11
 802c422:	6839      	ldr	r1, [r7, #0]
 802c424:	6838      	ldr	r0, [r7, #0]
 802c426:	f7ff fb79 	bl	802bb1c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 802c42a:	4b06      	ldr	r3, [pc, #24]	; (802c444 <SEGGER_SYSVIEW_Stop+0x48>)
 802c42c:	2200      	movs	r2, #0
 802c42e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 802c430:	687b      	ldr	r3, [r7, #4]
 802c432:	f383 8811 	msr	BASEPRI, r3
}
 802c436:	bf00      	nop
 802c438:	3708      	adds	r7, #8
 802c43a:	46bd      	mov	sp, r7
 802c43c:	bd80      	pop	{r7, pc}
 802c43e:	bf00      	nop
 802c440:	2001a778 	.word	0x2001a778
 802c444:	2001a748 	.word	0x2001a748

0802c448 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 802c448:	b580      	push	{r7, lr}
 802c44a:	b08c      	sub	sp, #48	; 0x30
 802c44c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 802c44e:	f3ef 8311 	mrs	r3, BASEPRI
 802c452:	f04f 0120 	mov.w	r1, #32
 802c456:	f381 8811 	msr	BASEPRI, r1
 802c45a:	60fb      	str	r3, [r7, #12]
 802c45c:	4845      	ldr	r0, [pc, #276]	; (802c574 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 802c45e:	f7ff fa6d 	bl	802b93c <_PreparePacket>
 802c462:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 802c464:	68bb      	ldr	r3, [r7, #8]
 802c466:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 802c468:	687b      	ldr	r3, [r7, #4]
 802c46a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802c46c:	4b42      	ldr	r3, [pc, #264]	; (802c578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802c46e:	685b      	ldr	r3, [r3, #4]
 802c470:	62bb      	str	r3, [r7, #40]	; 0x28
 802c472:	e00b      	b.n	802c48c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 802c474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c476:	b2da      	uxtb	r2, r3
 802c478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c47a:	1c59      	adds	r1, r3, #1
 802c47c:	62f9      	str	r1, [r7, #44]	; 0x2c
 802c47e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c482:	b2d2      	uxtb	r2, r2
 802c484:	701a      	strb	r2, [r3, #0]
 802c486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c488:	09db      	lsrs	r3, r3, #7
 802c48a:	62bb      	str	r3, [r7, #40]	; 0x28
 802c48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c48e:	2b7f      	cmp	r3, #127	; 0x7f
 802c490:	d8f0      	bhi.n	802c474 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 802c492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c494:	1c5a      	adds	r2, r3, #1
 802c496:	62fa      	str	r2, [r7, #44]	; 0x2c
 802c498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802c49a:	b2d2      	uxtb	r2, r2
 802c49c:	701a      	strb	r2, [r3, #0]
 802c49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c4a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 802c4a2:	687b      	ldr	r3, [r7, #4]
 802c4a4:	627b      	str	r3, [r7, #36]	; 0x24
 802c4a6:	4b34      	ldr	r3, [pc, #208]	; (802c578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802c4a8:	689b      	ldr	r3, [r3, #8]
 802c4aa:	623b      	str	r3, [r7, #32]
 802c4ac:	e00b      	b.n	802c4c6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 802c4ae:	6a3b      	ldr	r3, [r7, #32]
 802c4b0:	b2da      	uxtb	r2, r3
 802c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c4b4:	1c59      	adds	r1, r3, #1
 802c4b6:	6279      	str	r1, [r7, #36]	; 0x24
 802c4b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c4bc:	b2d2      	uxtb	r2, r2
 802c4be:	701a      	strb	r2, [r3, #0]
 802c4c0:	6a3b      	ldr	r3, [r7, #32]
 802c4c2:	09db      	lsrs	r3, r3, #7
 802c4c4:	623b      	str	r3, [r7, #32]
 802c4c6:	6a3b      	ldr	r3, [r7, #32]
 802c4c8:	2b7f      	cmp	r3, #127	; 0x7f
 802c4ca:	d8f0      	bhi.n	802c4ae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 802c4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c4ce:	1c5a      	adds	r2, r3, #1
 802c4d0:	627a      	str	r2, [r7, #36]	; 0x24
 802c4d2:	6a3a      	ldr	r2, [r7, #32]
 802c4d4:	b2d2      	uxtb	r2, r2
 802c4d6:	701a      	strb	r2, [r3, #0]
 802c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c4da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 802c4dc:	687b      	ldr	r3, [r7, #4]
 802c4de:	61fb      	str	r3, [r7, #28]
 802c4e0:	4b25      	ldr	r3, [pc, #148]	; (802c578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802c4e2:	691b      	ldr	r3, [r3, #16]
 802c4e4:	61bb      	str	r3, [r7, #24]
 802c4e6:	e00b      	b.n	802c500 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 802c4e8:	69bb      	ldr	r3, [r7, #24]
 802c4ea:	b2da      	uxtb	r2, r3
 802c4ec:	69fb      	ldr	r3, [r7, #28]
 802c4ee:	1c59      	adds	r1, r3, #1
 802c4f0:	61f9      	str	r1, [r7, #28]
 802c4f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c4f6:	b2d2      	uxtb	r2, r2
 802c4f8:	701a      	strb	r2, [r3, #0]
 802c4fa:	69bb      	ldr	r3, [r7, #24]
 802c4fc:	09db      	lsrs	r3, r3, #7
 802c4fe:	61bb      	str	r3, [r7, #24]
 802c500:	69bb      	ldr	r3, [r7, #24]
 802c502:	2b7f      	cmp	r3, #127	; 0x7f
 802c504:	d8f0      	bhi.n	802c4e8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 802c506:	69fb      	ldr	r3, [r7, #28]
 802c508:	1c5a      	adds	r2, r3, #1
 802c50a:	61fa      	str	r2, [r7, #28]
 802c50c:	69ba      	ldr	r2, [r7, #24]
 802c50e:	b2d2      	uxtb	r2, r2
 802c510:	701a      	strb	r2, [r3, #0]
 802c512:	69fb      	ldr	r3, [r7, #28]
 802c514:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 802c516:	687b      	ldr	r3, [r7, #4]
 802c518:	617b      	str	r3, [r7, #20]
 802c51a:	2300      	movs	r3, #0
 802c51c:	613b      	str	r3, [r7, #16]
 802c51e:	e00b      	b.n	802c538 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 802c520:	693b      	ldr	r3, [r7, #16]
 802c522:	b2da      	uxtb	r2, r3
 802c524:	697b      	ldr	r3, [r7, #20]
 802c526:	1c59      	adds	r1, r3, #1
 802c528:	6179      	str	r1, [r7, #20]
 802c52a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c52e:	b2d2      	uxtb	r2, r2
 802c530:	701a      	strb	r2, [r3, #0]
 802c532:	693b      	ldr	r3, [r7, #16]
 802c534:	09db      	lsrs	r3, r3, #7
 802c536:	613b      	str	r3, [r7, #16]
 802c538:	693b      	ldr	r3, [r7, #16]
 802c53a:	2b7f      	cmp	r3, #127	; 0x7f
 802c53c:	d8f0      	bhi.n	802c520 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 802c53e:	697b      	ldr	r3, [r7, #20]
 802c540:	1c5a      	adds	r2, r3, #1
 802c542:	617a      	str	r2, [r7, #20]
 802c544:	693a      	ldr	r2, [r7, #16]
 802c546:	b2d2      	uxtb	r2, r2
 802c548:	701a      	strb	r2, [r3, #0]
 802c54a:	697b      	ldr	r3, [r7, #20]
 802c54c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 802c54e:	2218      	movs	r2, #24
 802c550:	6879      	ldr	r1, [r7, #4]
 802c552:	68b8      	ldr	r0, [r7, #8]
 802c554:	f7ff fae2 	bl	802bb1c <_SendPacket>
  RECORD_END();
 802c558:	68fb      	ldr	r3, [r7, #12]
 802c55a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 802c55e:	4b06      	ldr	r3, [pc, #24]	; (802c578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802c560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c562:	2b00      	cmp	r3, #0
 802c564:	d002      	beq.n	802c56c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 802c566:	4b04      	ldr	r3, [pc, #16]	; (802c578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802c568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c56a:	4798      	blx	r3
  }
}
 802c56c:	bf00      	nop
 802c56e:	3730      	adds	r7, #48	; 0x30
 802c570:	46bd      	mov	sp, r7
 802c572:	bd80      	pop	{r7, pc}
 802c574:	2001a778 	.word	0x2001a778
 802c578:	2001a748 	.word	0x2001a748

0802c57c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 802c57c:	b580      	push	{r7, lr}
 802c57e:	b092      	sub	sp, #72	; 0x48
 802c580:	af00      	add	r7, sp, #0
 802c582:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 802c584:	f3ef 8311 	mrs	r3, BASEPRI
 802c588:	f04f 0120 	mov.w	r1, #32
 802c58c:	f381 8811 	msr	BASEPRI, r1
 802c590:	617b      	str	r3, [r7, #20]
 802c592:	486a      	ldr	r0, [pc, #424]	; (802c73c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 802c594:	f7ff f9d2 	bl	802b93c <_PreparePacket>
 802c598:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802c59a:	693b      	ldr	r3, [r7, #16]
 802c59c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 802c59e:	68fb      	ldr	r3, [r7, #12]
 802c5a0:	647b      	str	r3, [r7, #68]	; 0x44
 802c5a2:	687b      	ldr	r3, [r7, #4]
 802c5a4:	681a      	ldr	r2, [r3, #0]
 802c5a6:	4b66      	ldr	r3, [pc, #408]	; (802c740 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 802c5a8:	691b      	ldr	r3, [r3, #16]
 802c5aa:	1ad3      	subs	r3, r2, r3
 802c5ac:	643b      	str	r3, [r7, #64]	; 0x40
 802c5ae:	e00b      	b.n	802c5c8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 802c5b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c5b2:	b2da      	uxtb	r2, r3
 802c5b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802c5b6:	1c59      	adds	r1, r3, #1
 802c5b8:	6479      	str	r1, [r7, #68]	; 0x44
 802c5ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c5be:	b2d2      	uxtb	r2, r2
 802c5c0:	701a      	strb	r2, [r3, #0]
 802c5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c5c4:	09db      	lsrs	r3, r3, #7
 802c5c6:	643b      	str	r3, [r7, #64]	; 0x40
 802c5c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c5ca:	2b7f      	cmp	r3, #127	; 0x7f
 802c5cc:	d8f0      	bhi.n	802c5b0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 802c5ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802c5d0:	1c5a      	adds	r2, r3, #1
 802c5d2:	647a      	str	r2, [r7, #68]	; 0x44
 802c5d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802c5d6:	b2d2      	uxtb	r2, r2
 802c5d8:	701a      	strb	r2, [r3, #0]
 802c5da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802c5dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 802c5de:	68fb      	ldr	r3, [r7, #12]
 802c5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 802c5e2:	687b      	ldr	r3, [r7, #4]
 802c5e4:	689b      	ldr	r3, [r3, #8]
 802c5e6:	63bb      	str	r3, [r7, #56]	; 0x38
 802c5e8:	e00b      	b.n	802c602 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 802c5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c5ec:	b2da      	uxtb	r2, r3
 802c5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c5f0:	1c59      	adds	r1, r3, #1
 802c5f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 802c5f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c5f8:	b2d2      	uxtb	r2, r2
 802c5fa:	701a      	strb	r2, [r3, #0]
 802c5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c5fe:	09db      	lsrs	r3, r3, #7
 802c600:	63bb      	str	r3, [r7, #56]	; 0x38
 802c602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c604:	2b7f      	cmp	r3, #127	; 0x7f
 802c606:	d8f0      	bhi.n	802c5ea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 802c608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c60a:	1c5a      	adds	r2, r3, #1
 802c60c:	63fa      	str	r2, [r7, #60]	; 0x3c
 802c60e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802c610:	b2d2      	uxtb	r2, r2
 802c612:	701a      	strb	r2, [r3, #0]
 802c614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c616:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 802c618:	687b      	ldr	r3, [r7, #4]
 802c61a:	685b      	ldr	r3, [r3, #4]
 802c61c:	2220      	movs	r2, #32
 802c61e:	4619      	mov	r1, r3
 802c620:	68f8      	ldr	r0, [r7, #12]
 802c622:	f7ff f93b 	bl	802b89c <_EncodeStr>
 802c626:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 802c628:	2209      	movs	r2, #9
 802c62a:	68f9      	ldr	r1, [r7, #12]
 802c62c:	6938      	ldr	r0, [r7, #16]
 802c62e:	f7ff fa75 	bl	802bb1c <_SendPacket>
  //
  pPayload = pPayloadStart;
 802c632:	693b      	ldr	r3, [r7, #16]
 802c634:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 802c636:	68fb      	ldr	r3, [r7, #12]
 802c638:	637b      	str	r3, [r7, #52]	; 0x34
 802c63a:	687b      	ldr	r3, [r7, #4]
 802c63c:	681a      	ldr	r2, [r3, #0]
 802c63e:	4b40      	ldr	r3, [pc, #256]	; (802c740 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 802c640:	691b      	ldr	r3, [r3, #16]
 802c642:	1ad3      	subs	r3, r2, r3
 802c644:	633b      	str	r3, [r7, #48]	; 0x30
 802c646:	e00b      	b.n	802c660 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 802c648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c64a:	b2da      	uxtb	r2, r3
 802c64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c64e:	1c59      	adds	r1, r3, #1
 802c650:	6379      	str	r1, [r7, #52]	; 0x34
 802c652:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c656:	b2d2      	uxtb	r2, r2
 802c658:	701a      	strb	r2, [r3, #0]
 802c65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c65c:	09db      	lsrs	r3, r3, #7
 802c65e:	633b      	str	r3, [r7, #48]	; 0x30
 802c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c662:	2b7f      	cmp	r3, #127	; 0x7f
 802c664:	d8f0      	bhi.n	802c648 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 802c666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c668:	1c5a      	adds	r2, r3, #1
 802c66a:	637a      	str	r2, [r7, #52]	; 0x34
 802c66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802c66e:	b2d2      	uxtb	r2, r2
 802c670:	701a      	strb	r2, [r3, #0]
 802c672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c674:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 802c676:	68fb      	ldr	r3, [r7, #12]
 802c678:	62fb      	str	r3, [r7, #44]	; 0x2c
 802c67a:	687b      	ldr	r3, [r7, #4]
 802c67c:	68db      	ldr	r3, [r3, #12]
 802c67e:	62bb      	str	r3, [r7, #40]	; 0x28
 802c680:	e00b      	b.n	802c69a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 802c682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c684:	b2da      	uxtb	r2, r3
 802c686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c688:	1c59      	adds	r1, r3, #1
 802c68a:	62f9      	str	r1, [r7, #44]	; 0x2c
 802c68c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c690:	b2d2      	uxtb	r2, r2
 802c692:	701a      	strb	r2, [r3, #0]
 802c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c696:	09db      	lsrs	r3, r3, #7
 802c698:	62bb      	str	r3, [r7, #40]	; 0x28
 802c69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c69c:	2b7f      	cmp	r3, #127	; 0x7f
 802c69e:	d8f0      	bhi.n	802c682 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 802c6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c6a2:	1c5a      	adds	r2, r3, #1
 802c6a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 802c6a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802c6a8:	b2d2      	uxtb	r2, r2
 802c6aa:	701a      	strb	r2, [r3, #0]
 802c6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c6ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 802c6b0:	68fb      	ldr	r3, [r7, #12]
 802c6b2:	627b      	str	r3, [r7, #36]	; 0x24
 802c6b4:	687b      	ldr	r3, [r7, #4]
 802c6b6:	691b      	ldr	r3, [r3, #16]
 802c6b8:	623b      	str	r3, [r7, #32]
 802c6ba:	e00b      	b.n	802c6d4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 802c6bc:	6a3b      	ldr	r3, [r7, #32]
 802c6be:	b2da      	uxtb	r2, r3
 802c6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c6c2:	1c59      	adds	r1, r3, #1
 802c6c4:	6279      	str	r1, [r7, #36]	; 0x24
 802c6c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c6ca:	b2d2      	uxtb	r2, r2
 802c6cc:	701a      	strb	r2, [r3, #0]
 802c6ce:	6a3b      	ldr	r3, [r7, #32]
 802c6d0:	09db      	lsrs	r3, r3, #7
 802c6d2:	623b      	str	r3, [r7, #32]
 802c6d4:	6a3b      	ldr	r3, [r7, #32]
 802c6d6:	2b7f      	cmp	r3, #127	; 0x7f
 802c6d8:	d8f0      	bhi.n	802c6bc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 802c6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c6dc:	1c5a      	adds	r2, r3, #1
 802c6de:	627a      	str	r2, [r7, #36]	; 0x24
 802c6e0:	6a3a      	ldr	r2, [r7, #32]
 802c6e2:	b2d2      	uxtb	r2, r2
 802c6e4:	701a      	strb	r2, [r3, #0]
 802c6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c6e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 802c6ea:	68fb      	ldr	r3, [r7, #12]
 802c6ec:	61fb      	str	r3, [r7, #28]
 802c6ee:	2300      	movs	r3, #0
 802c6f0:	61bb      	str	r3, [r7, #24]
 802c6f2:	e00b      	b.n	802c70c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 802c6f4:	69bb      	ldr	r3, [r7, #24]
 802c6f6:	b2da      	uxtb	r2, r3
 802c6f8:	69fb      	ldr	r3, [r7, #28]
 802c6fa:	1c59      	adds	r1, r3, #1
 802c6fc:	61f9      	str	r1, [r7, #28]
 802c6fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c702:	b2d2      	uxtb	r2, r2
 802c704:	701a      	strb	r2, [r3, #0]
 802c706:	69bb      	ldr	r3, [r7, #24]
 802c708:	09db      	lsrs	r3, r3, #7
 802c70a:	61bb      	str	r3, [r7, #24]
 802c70c:	69bb      	ldr	r3, [r7, #24]
 802c70e:	2b7f      	cmp	r3, #127	; 0x7f
 802c710:	d8f0      	bhi.n	802c6f4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 802c712:	69fb      	ldr	r3, [r7, #28]
 802c714:	1c5a      	adds	r2, r3, #1
 802c716:	61fa      	str	r2, [r7, #28]
 802c718:	69ba      	ldr	r2, [r7, #24]
 802c71a:	b2d2      	uxtb	r2, r2
 802c71c:	701a      	strb	r2, [r3, #0]
 802c71e:	69fb      	ldr	r3, [r7, #28]
 802c720:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 802c722:	2215      	movs	r2, #21
 802c724:	68f9      	ldr	r1, [r7, #12]
 802c726:	6938      	ldr	r0, [r7, #16]
 802c728:	f7ff f9f8 	bl	802bb1c <_SendPacket>
  RECORD_END();
 802c72c:	697b      	ldr	r3, [r7, #20]
 802c72e:	f383 8811 	msr	BASEPRI, r3
}
 802c732:	bf00      	nop
 802c734:	3748      	adds	r7, #72	; 0x48
 802c736:	46bd      	mov	sp, r7
 802c738:	bd80      	pop	{r7, pc}
 802c73a:	bf00      	nop
 802c73c:	2001a778 	.word	0x2001a778
 802c740:	2001a748 	.word	0x2001a748

0802c744 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 802c744:	b580      	push	{r7, lr}
 802c746:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 802c748:	4b07      	ldr	r3, [pc, #28]	; (802c768 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 802c74a:	6a1b      	ldr	r3, [r3, #32]
 802c74c:	2b00      	cmp	r3, #0
 802c74e:	d008      	beq.n	802c762 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 802c750:	4b05      	ldr	r3, [pc, #20]	; (802c768 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 802c752:	6a1b      	ldr	r3, [r3, #32]
 802c754:	685b      	ldr	r3, [r3, #4]
 802c756:	2b00      	cmp	r3, #0
 802c758:	d003      	beq.n	802c762 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 802c75a:	4b03      	ldr	r3, [pc, #12]	; (802c768 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 802c75c:	6a1b      	ldr	r3, [r3, #32]
 802c75e:	685b      	ldr	r3, [r3, #4]
 802c760:	4798      	blx	r3
  }
}
 802c762:	bf00      	nop
 802c764:	bd80      	pop	{r7, pc}
 802c766:	bf00      	nop
 802c768:	2001a748 	.word	0x2001a748

0802c76c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 802c76c:	b580      	push	{r7, lr}
 802c76e:	b086      	sub	sp, #24
 802c770:	af00      	add	r7, sp, #0
 802c772:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 802c774:	f3ef 8311 	mrs	r3, BASEPRI
 802c778:	f04f 0120 	mov.w	r1, #32
 802c77c:	f381 8811 	msr	BASEPRI, r1
 802c780:	617b      	str	r3, [r7, #20]
 802c782:	480b      	ldr	r0, [pc, #44]	; (802c7b0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 802c784:	f7ff f8da 	bl	802b93c <_PreparePacket>
 802c788:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802c78a:	2280      	movs	r2, #128	; 0x80
 802c78c:	6879      	ldr	r1, [r7, #4]
 802c78e:	6938      	ldr	r0, [r7, #16]
 802c790:	f7ff f884 	bl	802b89c <_EncodeStr>
 802c794:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 802c796:	220e      	movs	r2, #14
 802c798:	68f9      	ldr	r1, [r7, #12]
 802c79a:	6938      	ldr	r0, [r7, #16]
 802c79c:	f7ff f9be 	bl	802bb1c <_SendPacket>
  RECORD_END();
 802c7a0:	697b      	ldr	r3, [r7, #20]
 802c7a2:	f383 8811 	msr	BASEPRI, r3
}
 802c7a6:	bf00      	nop
 802c7a8:	3718      	adds	r7, #24
 802c7aa:	46bd      	mov	sp, r7
 802c7ac:	bd80      	pop	{r7, pc}
 802c7ae:	bf00      	nop
 802c7b0:	2001a778 	.word	0x2001a778

0802c7b4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 802c7b4:	b590      	push	{r4, r7, lr}
 802c7b6:	b083      	sub	sp, #12
 802c7b8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 802c7ba:	4b15      	ldr	r3, [pc, #84]	; (802c810 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 802c7bc:	6a1b      	ldr	r3, [r3, #32]
 802c7be:	2b00      	cmp	r3, #0
 802c7c0:	d01a      	beq.n	802c7f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 802c7c2:	4b13      	ldr	r3, [pc, #76]	; (802c810 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 802c7c4:	6a1b      	ldr	r3, [r3, #32]
 802c7c6:	681b      	ldr	r3, [r3, #0]
 802c7c8:	2b00      	cmp	r3, #0
 802c7ca:	d015      	beq.n	802c7f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 802c7cc:	4b10      	ldr	r3, [pc, #64]	; (802c810 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 802c7ce:	6a1b      	ldr	r3, [r3, #32]
 802c7d0:	681b      	ldr	r3, [r3, #0]
 802c7d2:	4798      	blx	r3
 802c7d4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 802c7d8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 802c7da:	e9d7 0100 	ldrd	r0, r1, [r7]
 802c7de:	f04f 0200 	mov.w	r2, #0
 802c7e2:	f04f 0300 	mov.w	r3, #0
 802c7e6:	000a      	movs	r2, r1
 802c7e8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 802c7ea:	4613      	mov	r3, r2
 802c7ec:	461a      	mov	r2, r3
 802c7ee:	4621      	mov	r1, r4
 802c7f0:	200d      	movs	r0, #13
 802c7f2:	f7ff fbe7 	bl	802bfc4 <SEGGER_SYSVIEW_RecordU32x2>
 802c7f6:	e006      	b.n	802c806 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 802c7f8:	4b06      	ldr	r3, [pc, #24]	; (802c814 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 802c7fa:	681b      	ldr	r3, [r3, #0]
 802c7fc:	4619      	mov	r1, r3
 802c7fe:	200c      	movs	r0, #12
 802c800:	f7ff fba4 	bl	802bf4c <SEGGER_SYSVIEW_RecordU32>
  }
}
 802c804:	bf00      	nop
 802c806:	bf00      	nop
 802c808:	370c      	adds	r7, #12
 802c80a:	46bd      	mov	sp, r7
 802c80c:	bd90      	pop	{r4, r7, pc}
 802c80e:	bf00      	nop
 802c810:	2001a748 	.word	0x2001a748
 802c814:	e0001004 	.word	0xe0001004

0802c818 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 802c818:	b580      	push	{r7, lr}
 802c81a:	b082      	sub	sp, #8
 802c81c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 802c81e:	f3ef 8311 	mrs	r3, BASEPRI
 802c822:	f04f 0120 	mov.w	r1, #32
 802c826:	f381 8811 	msr	BASEPRI, r1
 802c82a:	607b      	str	r3, [r7, #4]
 802c82c:	4807      	ldr	r0, [pc, #28]	; (802c84c <SEGGER_SYSVIEW_OnIdle+0x34>)
 802c82e:	f7ff f885 	bl	802b93c <_PreparePacket>
 802c832:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 802c834:	2211      	movs	r2, #17
 802c836:	6839      	ldr	r1, [r7, #0]
 802c838:	6838      	ldr	r0, [r7, #0]
 802c83a:	f7ff f96f 	bl	802bb1c <_SendPacket>
  RECORD_END();
 802c83e:	687b      	ldr	r3, [r7, #4]
 802c840:	f383 8811 	msr	BASEPRI, r3
}
 802c844:	bf00      	nop
 802c846:	3708      	adds	r7, #8
 802c848:	46bd      	mov	sp, r7
 802c84a:	bd80      	pop	{r7, pc}
 802c84c:	2001a778 	.word	0x2001a778

0802c850 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 802c850:	b580      	push	{r7, lr}
 802c852:	b088      	sub	sp, #32
 802c854:	af00      	add	r7, sp, #0
 802c856:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802c858:	f3ef 8311 	mrs	r3, BASEPRI
 802c85c:	f04f 0120 	mov.w	r1, #32
 802c860:	f381 8811 	msr	BASEPRI, r1
 802c864:	617b      	str	r3, [r7, #20]
 802c866:	4819      	ldr	r0, [pc, #100]	; (802c8cc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 802c868:	f7ff f868 	bl	802b93c <_PreparePacket>
 802c86c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802c86e:	693b      	ldr	r3, [r7, #16]
 802c870:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 802c872:	4b17      	ldr	r3, [pc, #92]	; (802c8d0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 802c874:	691b      	ldr	r3, [r3, #16]
 802c876:	687a      	ldr	r2, [r7, #4]
 802c878:	1ad3      	subs	r3, r2, r3
 802c87a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 802c87c:	68fb      	ldr	r3, [r7, #12]
 802c87e:	61fb      	str	r3, [r7, #28]
 802c880:	687b      	ldr	r3, [r7, #4]
 802c882:	61bb      	str	r3, [r7, #24]
 802c884:	e00b      	b.n	802c89e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 802c886:	69bb      	ldr	r3, [r7, #24]
 802c888:	b2da      	uxtb	r2, r3
 802c88a:	69fb      	ldr	r3, [r7, #28]
 802c88c:	1c59      	adds	r1, r3, #1
 802c88e:	61f9      	str	r1, [r7, #28]
 802c890:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c894:	b2d2      	uxtb	r2, r2
 802c896:	701a      	strb	r2, [r3, #0]
 802c898:	69bb      	ldr	r3, [r7, #24]
 802c89a:	09db      	lsrs	r3, r3, #7
 802c89c:	61bb      	str	r3, [r7, #24]
 802c89e:	69bb      	ldr	r3, [r7, #24]
 802c8a0:	2b7f      	cmp	r3, #127	; 0x7f
 802c8a2:	d8f0      	bhi.n	802c886 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 802c8a4:	69fb      	ldr	r3, [r7, #28]
 802c8a6:	1c5a      	adds	r2, r3, #1
 802c8a8:	61fa      	str	r2, [r7, #28]
 802c8aa:	69ba      	ldr	r2, [r7, #24]
 802c8ac:	b2d2      	uxtb	r2, r2
 802c8ae:	701a      	strb	r2, [r3, #0]
 802c8b0:	69fb      	ldr	r3, [r7, #28]
 802c8b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 802c8b4:	2208      	movs	r2, #8
 802c8b6:	68f9      	ldr	r1, [r7, #12]
 802c8b8:	6938      	ldr	r0, [r7, #16]
 802c8ba:	f7ff f92f 	bl	802bb1c <_SendPacket>
  RECORD_END();
 802c8be:	697b      	ldr	r3, [r7, #20]
 802c8c0:	f383 8811 	msr	BASEPRI, r3
}
 802c8c4:	bf00      	nop
 802c8c6:	3720      	adds	r7, #32
 802c8c8:	46bd      	mov	sp, r7
 802c8ca:	bd80      	pop	{r7, pc}
 802c8cc:	2001a778 	.word	0x2001a778
 802c8d0:	2001a748 	.word	0x2001a748

0802c8d4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 802c8d4:	b580      	push	{r7, lr}
 802c8d6:	b088      	sub	sp, #32
 802c8d8:	af00      	add	r7, sp, #0
 802c8da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802c8dc:	f3ef 8311 	mrs	r3, BASEPRI
 802c8e0:	f04f 0120 	mov.w	r1, #32
 802c8e4:	f381 8811 	msr	BASEPRI, r1
 802c8e8:	617b      	str	r3, [r7, #20]
 802c8ea:	4819      	ldr	r0, [pc, #100]	; (802c950 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 802c8ec:	f7ff f826 	bl	802b93c <_PreparePacket>
 802c8f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802c8f2:	693b      	ldr	r3, [r7, #16]
 802c8f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 802c8f6:	4b17      	ldr	r3, [pc, #92]	; (802c954 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 802c8f8:	691b      	ldr	r3, [r3, #16]
 802c8fa:	687a      	ldr	r2, [r7, #4]
 802c8fc:	1ad3      	subs	r3, r2, r3
 802c8fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 802c900:	68fb      	ldr	r3, [r7, #12]
 802c902:	61fb      	str	r3, [r7, #28]
 802c904:	687b      	ldr	r3, [r7, #4]
 802c906:	61bb      	str	r3, [r7, #24]
 802c908:	e00b      	b.n	802c922 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 802c90a:	69bb      	ldr	r3, [r7, #24]
 802c90c:	b2da      	uxtb	r2, r3
 802c90e:	69fb      	ldr	r3, [r7, #28]
 802c910:	1c59      	adds	r1, r3, #1
 802c912:	61f9      	str	r1, [r7, #28]
 802c914:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c918:	b2d2      	uxtb	r2, r2
 802c91a:	701a      	strb	r2, [r3, #0]
 802c91c:	69bb      	ldr	r3, [r7, #24]
 802c91e:	09db      	lsrs	r3, r3, #7
 802c920:	61bb      	str	r3, [r7, #24]
 802c922:	69bb      	ldr	r3, [r7, #24]
 802c924:	2b7f      	cmp	r3, #127	; 0x7f
 802c926:	d8f0      	bhi.n	802c90a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 802c928:	69fb      	ldr	r3, [r7, #28]
 802c92a:	1c5a      	adds	r2, r3, #1
 802c92c:	61fa      	str	r2, [r7, #28]
 802c92e:	69ba      	ldr	r2, [r7, #24]
 802c930:	b2d2      	uxtb	r2, r2
 802c932:	701a      	strb	r2, [r3, #0]
 802c934:	69fb      	ldr	r3, [r7, #28]
 802c936:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 802c938:	2204      	movs	r2, #4
 802c93a:	68f9      	ldr	r1, [r7, #12]
 802c93c:	6938      	ldr	r0, [r7, #16]
 802c93e:	f7ff f8ed 	bl	802bb1c <_SendPacket>
  RECORD_END();
 802c942:	697b      	ldr	r3, [r7, #20]
 802c944:	f383 8811 	msr	BASEPRI, r3
}
 802c948:	bf00      	nop
 802c94a:	3720      	adds	r7, #32
 802c94c:	46bd      	mov	sp, r7
 802c94e:	bd80      	pop	{r7, pc}
 802c950:	2001a778 	.word	0x2001a778
 802c954:	2001a748 	.word	0x2001a748

0802c958 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 802c958:	b580      	push	{r7, lr}
 802c95a:	b088      	sub	sp, #32
 802c95c:	af00      	add	r7, sp, #0
 802c95e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802c960:	f3ef 8311 	mrs	r3, BASEPRI
 802c964:	f04f 0120 	mov.w	r1, #32
 802c968:	f381 8811 	msr	BASEPRI, r1
 802c96c:	617b      	str	r3, [r7, #20]
 802c96e:	4819      	ldr	r0, [pc, #100]	; (802c9d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 802c970:	f7fe ffe4 	bl	802b93c <_PreparePacket>
 802c974:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802c976:	693b      	ldr	r3, [r7, #16]
 802c978:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 802c97a:	4b17      	ldr	r3, [pc, #92]	; (802c9d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 802c97c:	691b      	ldr	r3, [r3, #16]
 802c97e:	687a      	ldr	r2, [r7, #4]
 802c980:	1ad3      	subs	r3, r2, r3
 802c982:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 802c984:	68fb      	ldr	r3, [r7, #12]
 802c986:	61fb      	str	r3, [r7, #28]
 802c988:	687b      	ldr	r3, [r7, #4]
 802c98a:	61bb      	str	r3, [r7, #24]
 802c98c:	e00b      	b.n	802c9a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 802c98e:	69bb      	ldr	r3, [r7, #24]
 802c990:	b2da      	uxtb	r2, r3
 802c992:	69fb      	ldr	r3, [r7, #28]
 802c994:	1c59      	adds	r1, r3, #1
 802c996:	61f9      	str	r1, [r7, #28]
 802c998:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802c99c:	b2d2      	uxtb	r2, r2
 802c99e:	701a      	strb	r2, [r3, #0]
 802c9a0:	69bb      	ldr	r3, [r7, #24]
 802c9a2:	09db      	lsrs	r3, r3, #7
 802c9a4:	61bb      	str	r3, [r7, #24]
 802c9a6:	69bb      	ldr	r3, [r7, #24]
 802c9a8:	2b7f      	cmp	r3, #127	; 0x7f
 802c9aa:	d8f0      	bhi.n	802c98e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 802c9ac:	69fb      	ldr	r3, [r7, #28]
 802c9ae:	1c5a      	adds	r2, r3, #1
 802c9b0:	61fa      	str	r2, [r7, #28]
 802c9b2:	69ba      	ldr	r2, [r7, #24]
 802c9b4:	b2d2      	uxtb	r2, r2
 802c9b6:	701a      	strb	r2, [r3, #0]
 802c9b8:	69fb      	ldr	r3, [r7, #28]
 802c9ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 802c9bc:	2206      	movs	r2, #6
 802c9be:	68f9      	ldr	r1, [r7, #12]
 802c9c0:	6938      	ldr	r0, [r7, #16]
 802c9c2:	f7ff f8ab 	bl	802bb1c <_SendPacket>
  RECORD_END();
 802c9c6:	697b      	ldr	r3, [r7, #20]
 802c9c8:	f383 8811 	msr	BASEPRI, r3
}
 802c9cc:	bf00      	nop
 802c9ce:	3720      	adds	r7, #32
 802c9d0:	46bd      	mov	sp, r7
 802c9d2:	bd80      	pop	{r7, pc}
 802c9d4:	2001a778 	.word	0x2001a778
 802c9d8:	2001a748 	.word	0x2001a748

0802c9dc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 802c9dc:	b480      	push	{r7}
 802c9de:	b083      	sub	sp, #12
 802c9e0:	af00      	add	r7, sp, #0
 802c9e2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 802c9e4:	4b04      	ldr	r3, [pc, #16]	; (802c9f8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 802c9e6:	691b      	ldr	r3, [r3, #16]
 802c9e8:	687a      	ldr	r2, [r7, #4]
 802c9ea:	1ad3      	subs	r3, r2, r3
}
 802c9ec:	4618      	mov	r0, r3
 802c9ee:	370c      	adds	r7, #12
 802c9f0:	46bd      	mov	sp, r7
 802c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c9f6:	4770      	bx	lr
 802c9f8:	2001a748 	.word	0x2001a748

0802c9fc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 802c9fc:	b580      	push	{r7, lr}
 802c9fe:	b08c      	sub	sp, #48	; 0x30
 802ca00:	af00      	add	r7, sp, #0
 802ca02:	4603      	mov	r3, r0
 802ca04:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 802ca06:	4b3b      	ldr	r3, [pc, #236]	; (802caf4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 802ca08:	681b      	ldr	r3, [r3, #0]
 802ca0a:	2b00      	cmp	r3, #0
 802ca0c:	d06d      	beq.n	802caea <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 802ca0e:	4b39      	ldr	r3, [pc, #228]	; (802caf4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 802ca10:	681b      	ldr	r3, [r3, #0]
 802ca12:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 802ca14:	2300      	movs	r3, #0
 802ca16:	62bb      	str	r3, [r7, #40]	; 0x28
 802ca18:	e008      	b.n	802ca2c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 802ca1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ca1c:	691b      	ldr	r3, [r3, #16]
 802ca1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 802ca20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ca22:	2b00      	cmp	r3, #0
 802ca24:	d007      	beq.n	802ca36 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 802ca26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ca28:	3301      	adds	r3, #1
 802ca2a:	62bb      	str	r3, [r7, #40]	; 0x28
 802ca2c:	79fb      	ldrb	r3, [r7, #7]
 802ca2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802ca30:	429a      	cmp	r2, r3
 802ca32:	d3f2      	bcc.n	802ca1a <SEGGER_SYSVIEW_SendModule+0x1e>
 802ca34:	e000      	b.n	802ca38 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 802ca36:	bf00      	nop
      }
    }
    if (pModule != 0) {
 802ca38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ca3a:	2b00      	cmp	r3, #0
 802ca3c:	d055      	beq.n	802caea <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 802ca3e:	f3ef 8311 	mrs	r3, BASEPRI
 802ca42:	f04f 0120 	mov.w	r1, #32
 802ca46:	f381 8811 	msr	BASEPRI, r1
 802ca4a:	617b      	str	r3, [r7, #20]
 802ca4c:	482a      	ldr	r0, [pc, #168]	; (802caf8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 802ca4e:	f7fe ff75 	bl	802b93c <_PreparePacket>
 802ca52:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 802ca54:	693b      	ldr	r3, [r7, #16]
 802ca56:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 802ca58:	68fb      	ldr	r3, [r7, #12]
 802ca5a:	627b      	str	r3, [r7, #36]	; 0x24
 802ca5c:	79fb      	ldrb	r3, [r7, #7]
 802ca5e:	623b      	str	r3, [r7, #32]
 802ca60:	e00b      	b.n	802ca7a <SEGGER_SYSVIEW_SendModule+0x7e>
 802ca62:	6a3b      	ldr	r3, [r7, #32]
 802ca64:	b2da      	uxtb	r2, r3
 802ca66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ca68:	1c59      	adds	r1, r3, #1
 802ca6a:	6279      	str	r1, [r7, #36]	; 0x24
 802ca6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802ca70:	b2d2      	uxtb	r2, r2
 802ca72:	701a      	strb	r2, [r3, #0]
 802ca74:	6a3b      	ldr	r3, [r7, #32]
 802ca76:	09db      	lsrs	r3, r3, #7
 802ca78:	623b      	str	r3, [r7, #32]
 802ca7a:	6a3b      	ldr	r3, [r7, #32]
 802ca7c:	2b7f      	cmp	r3, #127	; 0x7f
 802ca7e:	d8f0      	bhi.n	802ca62 <SEGGER_SYSVIEW_SendModule+0x66>
 802ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ca82:	1c5a      	adds	r2, r3, #1
 802ca84:	627a      	str	r2, [r7, #36]	; 0x24
 802ca86:	6a3a      	ldr	r2, [r7, #32]
 802ca88:	b2d2      	uxtb	r2, r2
 802ca8a:	701a      	strb	r2, [r3, #0]
 802ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ca8e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 802ca90:	68fb      	ldr	r3, [r7, #12]
 802ca92:	61fb      	str	r3, [r7, #28]
 802ca94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ca96:	689b      	ldr	r3, [r3, #8]
 802ca98:	61bb      	str	r3, [r7, #24]
 802ca9a:	e00b      	b.n	802cab4 <SEGGER_SYSVIEW_SendModule+0xb8>
 802ca9c:	69bb      	ldr	r3, [r7, #24]
 802ca9e:	b2da      	uxtb	r2, r3
 802caa0:	69fb      	ldr	r3, [r7, #28]
 802caa2:	1c59      	adds	r1, r3, #1
 802caa4:	61f9      	str	r1, [r7, #28]
 802caa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802caaa:	b2d2      	uxtb	r2, r2
 802caac:	701a      	strb	r2, [r3, #0]
 802caae:	69bb      	ldr	r3, [r7, #24]
 802cab0:	09db      	lsrs	r3, r3, #7
 802cab2:	61bb      	str	r3, [r7, #24]
 802cab4:	69bb      	ldr	r3, [r7, #24]
 802cab6:	2b7f      	cmp	r3, #127	; 0x7f
 802cab8:	d8f0      	bhi.n	802ca9c <SEGGER_SYSVIEW_SendModule+0xa0>
 802caba:	69fb      	ldr	r3, [r7, #28]
 802cabc:	1c5a      	adds	r2, r3, #1
 802cabe:	61fa      	str	r2, [r7, #28]
 802cac0:	69ba      	ldr	r2, [r7, #24]
 802cac2:	b2d2      	uxtb	r2, r2
 802cac4:	701a      	strb	r2, [r3, #0]
 802cac6:	69fb      	ldr	r3, [r7, #28]
 802cac8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802caca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cacc:	681b      	ldr	r3, [r3, #0]
 802cace:	2280      	movs	r2, #128	; 0x80
 802cad0:	4619      	mov	r1, r3
 802cad2:	68f8      	ldr	r0, [r7, #12]
 802cad4:	f7fe fee2 	bl	802b89c <_EncodeStr>
 802cad8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 802cada:	2216      	movs	r2, #22
 802cadc:	68f9      	ldr	r1, [r7, #12]
 802cade:	6938      	ldr	r0, [r7, #16]
 802cae0:	f7ff f81c 	bl	802bb1c <_SendPacket>
      RECORD_END();
 802cae4:	697b      	ldr	r3, [r7, #20]
 802cae6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 802caea:	bf00      	nop
 802caec:	3730      	adds	r7, #48	; 0x30
 802caee:	46bd      	mov	sp, r7
 802caf0:	bd80      	pop	{r7, pc}
 802caf2:	bf00      	nop
 802caf4:	2001a770 	.word	0x2001a770
 802caf8:	2001a778 	.word	0x2001a778

0802cafc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 802cafc:	b580      	push	{r7, lr}
 802cafe:	b082      	sub	sp, #8
 802cb00:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 802cb02:	4b0c      	ldr	r3, [pc, #48]	; (802cb34 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 802cb04:	681b      	ldr	r3, [r3, #0]
 802cb06:	2b00      	cmp	r3, #0
 802cb08:	d00f      	beq.n	802cb2a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 802cb0a:	4b0a      	ldr	r3, [pc, #40]	; (802cb34 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 802cb0c:	681b      	ldr	r3, [r3, #0]
 802cb0e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 802cb10:	687b      	ldr	r3, [r7, #4]
 802cb12:	68db      	ldr	r3, [r3, #12]
 802cb14:	2b00      	cmp	r3, #0
 802cb16:	d002      	beq.n	802cb1e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 802cb18:	687b      	ldr	r3, [r7, #4]
 802cb1a:	68db      	ldr	r3, [r3, #12]
 802cb1c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 802cb1e:	687b      	ldr	r3, [r7, #4]
 802cb20:	691b      	ldr	r3, [r3, #16]
 802cb22:	607b      	str	r3, [r7, #4]
    } while (pModule);
 802cb24:	687b      	ldr	r3, [r7, #4]
 802cb26:	2b00      	cmp	r3, #0
 802cb28:	d1f2      	bne.n	802cb10 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 802cb2a:	bf00      	nop
 802cb2c:	3708      	adds	r7, #8
 802cb2e:	46bd      	mov	sp, r7
 802cb30:	bd80      	pop	{r7, pc}
 802cb32:	bf00      	nop
 802cb34:	2001a770 	.word	0x2001a770

0802cb38 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 802cb38:	b580      	push	{r7, lr}
 802cb3a:	b086      	sub	sp, #24
 802cb3c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 802cb3e:	f3ef 8311 	mrs	r3, BASEPRI
 802cb42:	f04f 0120 	mov.w	r1, #32
 802cb46:	f381 8811 	msr	BASEPRI, r1
 802cb4a:	60fb      	str	r3, [r7, #12]
 802cb4c:	4817      	ldr	r0, [pc, #92]	; (802cbac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 802cb4e:	f7fe fef5 	bl	802b93c <_PreparePacket>
 802cb52:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 802cb54:	68bb      	ldr	r3, [r7, #8]
 802cb56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 802cb58:	687b      	ldr	r3, [r7, #4]
 802cb5a:	617b      	str	r3, [r7, #20]
 802cb5c:	4b14      	ldr	r3, [pc, #80]	; (802cbb0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 802cb5e:	781b      	ldrb	r3, [r3, #0]
 802cb60:	613b      	str	r3, [r7, #16]
 802cb62:	e00b      	b.n	802cb7c <SEGGER_SYSVIEW_SendNumModules+0x44>
 802cb64:	693b      	ldr	r3, [r7, #16]
 802cb66:	b2da      	uxtb	r2, r3
 802cb68:	697b      	ldr	r3, [r7, #20]
 802cb6a:	1c59      	adds	r1, r3, #1
 802cb6c:	6179      	str	r1, [r7, #20]
 802cb6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802cb72:	b2d2      	uxtb	r2, r2
 802cb74:	701a      	strb	r2, [r3, #0]
 802cb76:	693b      	ldr	r3, [r7, #16]
 802cb78:	09db      	lsrs	r3, r3, #7
 802cb7a:	613b      	str	r3, [r7, #16]
 802cb7c:	693b      	ldr	r3, [r7, #16]
 802cb7e:	2b7f      	cmp	r3, #127	; 0x7f
 802cb80:	d8f0      	bhi.n	802cb64 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 802cb82:	697b      	ldr	r3, [r7, #20]
 802cb84:	1c5a      	adds	r2, r3, #1
 802cb86:	617a      	str	r2, [r7, #20]
 802cb88:	693a      	ldr	r2, [r7, #16]
 802cb8a:	b2d2      	uxtb	r2, r2
 802cb8c:	701a      	strb	r2, [r3, #0]
 802cb8e:	697b      	ldr	r3, [r7, #20]
 802cb90:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 802cb92:	221b      	movs	r2, #27
 802cb94:	6879      	ldr	r1, [r7, #4]
 802cb96:	68b8      	ldr	r0, [r7, #8]
 802cb98:	f7fe ffc0 	bl	802bb1c <_SendPacket>
  RECORD_END();
 802cb9c:	68fb      	ldr	r3, [r7, #12]
 802cb9e:	f383 8811 	msr	BASEPRI, r3
}
 802cba2:	bf00      	nop
 802cba4:	3718      	adds	r7, #24
 802cba6:	46bd      	mov	sp, r7
 802cba8:	bd80      	pop	{r7, pc}
 802cbaa:	bf00      	nop
 802cbac:	2001a778 	.word	0x2001a778
 802cbb0:	2001a774 	.word	0x2001a774

0802cbb4 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 802cbb4:	b40f      	push	{r0, r1, r2, r3}
 802cbb6:	b580      	push	{r7, lr}
 802cbb8:	b082      	sub	sp, #8
 802cbba:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 802cbbc:	f107 0314 	add.w	r3, r7, #20
 802cbc0:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 802cbc2:	1d3b      	adds	r3, r7, #4
 802cbc4:	461a      	mov	r2, r3
 802cbc6:	2100      	movs	r1, #0
 802cbc8:	6938      	ldr	r0, [r7, #16]
 802cbca:	f7ff f88d 	bl	802bce8 <_VPrintHost>
  va_end(ParamList);
#endif
}
 802cbce:	bf00      	nop
 802cbd0:	3708      	adds	r7, #8
 802cbd2:	46bd      	mov	sp, r7
 802cbd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802cbd8:	b004      	add	sp, #16
 802cbda:	4770      	bx	lr

0802cbdc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 802cbdc:	b580      	push	{r7, lr}
 802cbde:	b08a      	sub	sp, #40	; 0x28
 802cbe0:	af00      	add	r7, sp, #0
 802cbe2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 802cbe4:	f3ef 8311 	mrs	r3, BASEPRI
 802cbe8:	f04f 0120 	mov.w	r1, #32
 802cbec:	f381 8811 	msr	BASEPRI, r1
 802cbf0:	617b      	str	r3, [r7, #20]
 802cbf2:	4827      	ldr	r0, [pc, #156]	; (802cc90 <SEGGER_SYSVIEW_Warn+0xb4>)
 802cbf4:	f7fe fea2 	bl	802b93c <_PreparePacket>
 802cbf8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802cbfa:	2280      	movs	r2, #128	; 0x80
 802cbfc:	6879      	ldr	r1, [r7, #4]
 802cbfe:	6938      	ldr	r0, [r7, #16]
 802cc00:	f7fe fe4c 	bl	802b89c <_EncodeStr>
 802cc04:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 802cc06:	68fb      	ldr	r3, [r7, #12]
 802cc08:	627b      	str	r3, [r7, #36]	; 0x24
 802cc0a:	2301      	movs	r3, #1
 802cc0c:	623b      	str	r3, [r7, #32]
 802cc0e:	e00b      	b.n	802cc28 <SEGGER_SYSVIEW_Warn+0x4c>
 802cc10:	6a3b      	ldr	r3, [r7, #32]
 802cc12:	b2da      	uxtb	r2, r3
 802cc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cc16:	1c59      	adds	r1, r3, #1
 802cc18:	6279      	str	r1, [r7, #36]	; 0x24
 802cc1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802cc1e:	b2d2      	uxtb	r2, r2
 802cc20:	701a      	strb	r2, [r3, #0]
 802cc22:	6a3b      	ldr	r3, [r7, #32]
 802cc24:	09db      	lsrs	r3, r3, #7
 802cc26:	623b      	str	r3, [r7, #32]
 802cc28:	6a3b      	ldr	r3, [r7, #32]
 802cc2a:	2b7f      	cmp	r3, #127	; 0x7f
 802cc2c:	d8f0      	bhi.n	802cc10 <SEGGER_SYSVIEW_Warn+0x34>
 802cc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cc30:	1c5a      	adds	r2, r3, #1
 802cc32:	627a      	str	r2, [r7, #36]	; 0x24
 802cc34:	6a3a      	ldr	r2, [r7, #32]
 802cc36:	b2d2      	uxtb	r2, r2
 802cc38:	701a      	strb	r2, [r3, #0]
 802cc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cc3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 802cc3e:	68fb      	ldr	r3, [r7, #12]
 802cc40:	61fb      	str	r3, [r7, #28]
 802cc42:	2300      	movs	r3, #0
 802cc44:	61bb      	str	r3, [r7, #24]
 802cc46:	e00b      	b.n	802cc60 <SEGGER_SYSVIEW_Warn+0x84>
 802cc48:	69bb      	ldr	r3, [r7, #24]
 802cc4a:	b2da      	uxtb	r2, r3
 802cc4c:	69fb      	ldr	r3, [r7, #28]
 802cc4e:	1c59      	adds	r1, r3, #1
 802cc50:	61f9      	str	r1, [r7, #28]
 802cc52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802cc56:	b2d2      	uxtb	r2, r2
 802cc58:	701a      	strb	r2, [r3, #0]
 802cc5a:	69bb      	ldr	r3, [r7, #24]
 802cc5c:	09db      	lsrs	r3, r3, #7
 802cc5e:	61bb      	str	r3, [r7, #24]
 802cc60:	69bb      	ldr	r3, [r7, #24]
 802cc62:	2b7f      	cmp	r3, #127	; 0x7f
 802cc64:	d8f0      	bhi.n	802cc48 <SEGGER_SYSVIEW_Warn+0x6c>
 802cc66:	69fb      	ldr	r3, [r7, #28]
 802cc68:	1c5a      	adds	r2, r3, #1
 802cc6a:	61fa      	str	r2, [r7, #28]
 802cc6c:	69ba      	ldr	r2, [r7, #24]
 802cc6e:	b2d2      	uxtb	r2, r2
 802cc70:	701a      	strb	r2, [r3, #0]
 802cc72:	69fb      	ldr	r3, [r7, #28]
 802cc74:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 802cc76:	221a      	movs	r2, #26
 802cc78:	68f9      	ldr	r1, [r7, #12]
 802cc7a:	6938      	ldr	r0, [r7, #16]
 802cc7c:	f7fe ff4e 	bl	802bb1c <_SendPacket>
  RECORD_END();
 802cc80:	697b      	ldr	r3, [r7, #20]
 802cc82:	f383 8811 	msr	BASEPRI, r3
}
 802cc86:	bf00      	nop
 802cc88:	3728      	adds	r7, #40	; 0x28
 802cc8a:	46bd      	mov	sp, r7
 802cc8c:	bd80      	pop	{r7, pc}
 802cc8e:	bf00      	nop
 802cc90:	2001a778 	.word	0x2001a778

0802cc94 <arm_pid_init_f32>:
 802cc94:	edd0 6a08 	vldr	s13, [r0, #32]
 802cc98:	edd0 7a06 	vldr	s15, [r0, #24]
 802cc9c:	ed90 7a07 	vldr	s14, [r0, #28]
 802cca0:	edc0 6a02 	vstr	s13, [r0, #8]
 802cca4:	ee37 7a87 	vadd.f32	s14, s15, s14
 802cca8:	ee36 6aa6 	vadd.f32	s12, s13, s13
 802ccac:	eef1 7a67 	vneg.f32	s15, s15
 802ccb0:	ee37 7a26 	vadd.f32	s14, s14, s13
 802ccb4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 802ccb8:	ed80 7a00 	vstr	s14, [r0]
 802ccbc:	edc0 7a01 	vstr	s15, [r0, #4]
 802ccc0:	b901      	cbnz	r1, 802ccc4 <arm_pid_init_f32+0x30>
 802ccc2:	4770      	bx	lr
 802ccc4:	2300      	movs	r3, #0
 802ccc6:	60c3      	str	r3, [r0, #12]
 802ccc8:	6103      	str	r3, [r0, #16]
 802ccca:	6143      	str	r3, [r0, #20]
 802cccc:	4770      	bx	lr
 802ccce:	bf00      	nop

0802ccd0 <__errno>:
 802ccd0:	4b01      	ldr	r3, [pc, #4]	; (802ccd8 <__errno+0x8>)
 802ccd2:	6818      	ldr	r0, [r3, #0]
 802ccd4:	4770      	bx	lr
 802ccd6:	bf00      	nop
 802ccd8:	2000036c 	.word	0x2000036c

0802ccdc <__libc_init_array>:
 802ccdc:	b570      	push	{r4, r5, r6, lr}
 802ccde:	4d0d      	ldr	r5, [pc, #52]	; (802cd14 <__libc_init_array+0x38>)
 802cce0:	4c0d      	ldr	r4, [pc, #52]	; (802cd18 <__libc_init_array+0x3c>)
 802cce2:	1b64      	subs	r4, r4, r5
 802cce4:	10a4      	asrs	r4, r4, #2
 802cce6:	2600      	movs	r6, #0
 802cce8:	42a6      	cmp	r6, r4
 802ccea:	d109      	bne.n	802cd00 <__libc_init_array+0x24>
 802ccec:	4d0b      	ldr	r5, [pc, #44]	; (802cd1c <__libc_init_array+0x40>)
 802ccee:	4c0c      	ldr	r4, [pc, #48]	; (802cd20 <__libc_init_array+0x44>)
 802ccf0:	f000 fe22 	bl	802d938 <_init>
 802ccf4:	1b64      	subs	r4, r4, r5
 802ccf6:	10a4      	asrs	r4, r4, #2
 802ccf8:	2600      	movs	r6, #0
 802ccfa:	42a6      	cmp	r6, r4
 802ccfc:	d105      	bne.n	802cd0a <__libc_init_array+0x2e>
 802ccfe:	bd70      	pop	{r4, r5, r6, pc}
 802cd00:	f855 3b04 	ldr.w	r3, [r5], #4
 802cd04:	4798      	blx	r3
 802cd06:	3601      	adds	r6, #1
 802cd08:	e7ee      	b.n	802cce8 <__libc_init_array+0xc>
 802cd0a:	f855 3b04 	ldr.w	r3, [r5], #4
 802cd0e:	4798      	blx	r3
 802cd10:	3601      	adds	r6, #1
 802cd12:	e7f2      	b.n	802ccfa <__libc_init_array+0x1e>
 802cd14:	0802e130 	.word	0x0802e130
 802cd18:	0802e130 	.word	0x0802e130
 802cd1c:	0802e130 	.word	0x0802e130
 802cd20:	0802e134 	.word	0x0802e134

0802cd24 <__retarget_lock_acquire_recursive>:
 802cd24:	4770      	bx	lr

0802cd26 <__retarget_lock_release_recursive>:
 802cd26:	4770      	bx	lr

0802cd28 <memcmp>:
 802cd28:	b530      	push	{r4, r5, lr}
 802cd2a:	3901      	subs	r1, #1
 802cd2c:	2400      	movs	r4, #0
 802cd2e:	42a2      	cmp	r2, r4
 802cd30:	d101      	bne.n	802cd36 <memcmp+0xe>
 802cd32:	2000      	movs	r0, #0
 802cd34:	e005      	b.n	802cd42 <memcmp+0x1a>
 802cd36:	5d03      	ldrb	r3, [r0, r4]
 802cd38:	3401      	adds	r4, #1
 802cd3a:	5d0d      	ldrb	r5, [r1, r4]
 802cd3c:	42ab      	cmp	r3, r5
 802cd3e:	d0f6      	beq.n	802cd2e <memcmp+0x6>
 802cd40:	1b58      	subs	r0, r3, r5
 802cd42:	bd30      	pop	{r4, r5, pc}

0802cd44 <memcpy>:
 802cd44:	440a      	add	r2, r1
 802cd46:	4291      	cmp	r1, r2
 802cd48:	f100 33ff 	add.w	r3, r0, #4294967295
 802cd4c:	d100      	bne.n	802cd50 <memcpy+0xc>
 802cd4e:	4770      	bx	lr
 802cd50:	b510      	push	{r4, lr}
 802cd52:	f811 4b01 	ldrb.w	r4, [r1], #1
 802cd56:	f803 4f01 	strb.w	r4, [r3, #1]!
 802cd5a:	4291      	cmp	r1, r2
 802cd5c:	d1f9      	bne.n	802cd52 <memcpy+0xe>
 802cd5e:	bd10      	pop	{r4, pc}

0802cd60 <memset>:
 802cd60:	4402      	add	r2, r0
 802cd62:	4603      	mov	r3, r0
 802cd64:	4293      	cmp	r3, r2
 802cd66:	d100      	bne.n	802cd6a <memset+0xa>
 802cd68:	4770      	bx	lr
 802cd6a:	f803 1b01 	strb.w	r1, [r3], #1
 802cd6e:	e7f9      	b.n	802cd64 <memset+0x4>

0802cd70 <cleanup_glue>:
 802cd70:	b538      	push	{r3, r4, r5, lr}
 802cd72:	460c      	mov	r4, r1
 802cd74:	6809      	ldr	r1, [r1, #0]
 802cd76:	4605      	mov	r5, r0
 802cd78:	b109      	cbz	r1, 802cd7e <cleanup_glue+0xe>
 802cd7a:	f7ff fff9 	bl	802cd70 <cleanup_glue>
 802cd7e:	4621      	mov	r1, r4
 802cd80:	4628      	mov	r0, r5
 802cd82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802cd86:	f000 b869 	b.w	802ce5c <_free_r>
	...

0802cd8c <_reclaim_reent>:
 802cd8c:	4b2c      	ldr	r3, [pc, #176]	; (802ce40 <_reclaim_reent+0xb4>)
 802cd8e:	681b      	ldr	r3, [r3, #0]
 802cd90:	4283      	cmp	r3, r0
 802cd92:	b570      	push	{r4, r5, r6, lr}
 802cd94:	4604      	mov	r4, r0
 802cd96:	d051      	beq.n	802ce3c <_reclaim_reent+0xb0>
 802cd98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802cd9a:	b143      	cbz	r3, 802cdae <_reclaim_reent+0x22>
 802cd9c:	68db      	ldr	r3, [r3, #12]
 802cd9e:	2b00      	cmp	r3, #0
 802cda0:	d14a      	bne.n	802ce38 <_reclaim_reent+0xac>
 802cda2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802cda4:	6819      	ldr	r1, [r3, #0]
 802cda6:	b111      	cbz	r1, 802cdae <_reclaim_reent+0x22>
 802cda8:	4620      	mov	r0, r4
 802cdaa:	f000 f857 	bl	802ce5c <_free_r>
 802cdae:	6961      	ldr	r1, [r4, #20]
 802cdb0:	b111      	cbz	r1, 802cdb8 <_reclaim_reent+0x2c>
 802cdb2:	4620      	mov	r0, r4
 802cdb4:	f000 f852 	bl	802ce5c <_free_r>
 802cdb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802cdba:	b111      	cbz	r1, 802cdc2 <_reclaim_reent+0x36>
 802cdbc:	4620      	mov	r0, r4
 802cdbe:	f000 f84d 	bl	802ce5c <_free_r>
 802cdc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802cdc4:	b111      	cbz	r1, 802cdcc <_reclaim_reent+0x40>
 802cdc6:	4620      	mov	r0, r4
 802cdc8:	f000 f848 	bl	802ce5c <_free_r>
 802cdcc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802cdce:	b111      	cbz	r1, 802cdd6 <_reclaim_reent+0x4a>
 802cdd0:	4620      	mov	r0, r4
 802cdd2:	f000 f843 	bl	802ce5c <_free_r>
 802cdd6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802cdd8:	b111      	cbz	r1, 802cde0 <_reclaim_reent+0x54>
 802cdda:	4620      	mov	r0, r4
 802cddc:	f000 f83e 	bl	802ce5c <_free_r>
 802cde0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802cde2:	b111      	cbz	r1, 802cdea <_reclaim_reent+0x5e>
 802cde4:	4620      	mov	r0, r4
 802cde6:	f000 f839 	bl	802ce5c <_free_r>
 802cdea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802cdec:	b111      	cbz	r1, 802cdf4 <_reclaim_reent+0x68>
 802cdee:	4620      	mov	r0, r4
 802cdf0:	f000 f834 	bl	802ce5c <_free_r>
 802cdf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802cdf6:	b111      	cbz	r1, 802cdfe <_reclaim_reent+0x72>
 802cdf8:	4620      	mov	r0, r4
 802cdfa:	f000 f82f 	bl	802ce5c <_free_r>
 802cdfe:	69a3      	ldr	r3, [r4, #24]
 802ce00:	b1e3      	cbz	r3, 802ce3c <_reclaim_reent+0xb0>
 802ce02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802ce04:	4620      	mov	r0, r4
 802ce06:	4798      	blx	r3
 802ce08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802ce0a:	b1b9      	cbz	r1, 802ce3c <_reclaim_reent+0xb0>
 802ce0c:	4620      	mov	r0, r4
 802ce0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802ce12:	f7ff bfad 	b.w	802cd70 <cleanup_glue>
 802ce16:	5949      	ldr	r1, [r1, r5]
 802ce18:	b941      	cbnz	r1, 802ce2c <_reclaim_reent+0xa0>
 802ce1a:	3504      	adds	r5, #4
 802ce1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802ce1e:	2d80      	cmp	r5, #128	; 0x80
 802ce20:	68d9      	ldr	r1, [r3, #12]
 802ce22:	d1f8      	bne.n	802ce16 <_reclaim_reent+0x8a>
 802ce24:	4620      	mov	r0, r4
 802ce26:	f000 f819 	bl	802ce5c <_free_r>
 802ce2a:	e7ba      	b.n	802cda2 <_reclaim_reent+0x16>
 802ce2c:	680e      	ldr	r6, [r1, #0]
 802ce2e:	4620      	mov	r0, r4
 802ce30:	f000 f814 	bl	802ce5c <_free_r>
 802ce34:	4631      	mov	r1, r6
 802ce36:	e7ef      	b.n	802ce18 <_reclaim_reent+0x8c>
 802ce38:	2500      	movs	r5, #0
 802ce3a:	e7ef      	b.n	802ce1c <_reclaim_reent+0x90>
 802ce3c:	bd70      	pop	{r4, r5, r6, pc}
 802ce3e:	bf00      	nop
 802ce40:	2000036c 	.word	0x2000036c

0802ce44 <__malloc_lock>:
 802ce44:	4801      	ldr	r0, [pc, #4]	; (802ce4c <__malloc_lock+0x8>)
 802ce46:	f7ff bf6d 	b.w	802cd24 <__retarget_lock_acquire_recursive>
 802ce4a:	bf00      	nop
 802ce4c:	2001dfc8 	.word	0x2001dfc8

0802ce50 <__malloc_unlock>:
 802ce50:	4801      	ldr	r0, [pc, #4]	; (802ce58 <__malloc_unlock+0x8>)
 802ce52:	f7ff bf68 	b.w	802cd26 <__retarget_lock_release_recursive>
 802ce56:	bf00      	nop
 802ce58:	2001dfc8 	.word	0x2001dfc8

0802ce5c <_free_r>:
 802ce5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802ce5e:	2900      	cmp	r1, #0
 802ce60:	d048      	beq.n	802cef4 <_free_r+0x98>
 802ce62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ce66:	9001      	str	r0, [sp, #4]
 802ce68:	2b00      	cmp	r3, #0
 802ce6a:	f1a1 0404 	sub.w	r4, r1, #4
 802ce6e:	bfb8      	it	lt
 802ce70:	18e4      	addlt	r4, r4, r3
 802ce72:	f7ff ffe7 	bl	802ce44 <__malloc_lock>
 802ce76:	4a20      	ldr	r2, [pc, #128]	; (802cef8 <_free_r+0x9c>)
 802ce78:	9801      	ldr	r0, [sp, #4]
 802ce7a:	6813      	ldr	r3, [r2, #0]
 802ce7c:	4615      	mov	r5, r2
 802ce7e:	b933      	cbnz	r3, 802ce8e <_free_r+0x32>
 802ce80:	6063      	str	r3, [r4, #4]
 802ce82:	6014      	str	r4, [r2, #0]
 802ce84:	b003      	add	sp, #12
 802ce86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ce8a:	f7ff bfe1 	b.w	802ce50 <__malloc_unlock>
 802ce8e:	42a3      	cmp	r3, r4
 802ce90:	d90b      	bls.n	802ceaa <_free_r+0x4e>
 802ce92:	6821      	ldr	r1, [r4, #0]
 802ce94:	1862      	adds	r2, r4, r1
 802ce96:	4293      	cmp	r3, r2
 802ce98:	bf04      	itt	eq
 802ce9a:	681a      	ldreq	r2, [r3, #0]
 802ce9c:	685b      	ldreq	r3, [r3, #4]
 802ce9e:	6063      	str	r3, [r4, #4]
 802cea0:	bf04      	itt	eq
 802cea2:	1852      	addeq	r2, r2, r1
 802cea4:	6022      	streq	r2, [r4, #0]
 802cea6:	602c      	str	r4, [r5, #0]
 802cea8:	e7ec      	b.n	802ce84 <_free_r+0x28>
 802ceaa:	461a      	mov	r2, r3
 802ceac:	685b      	ldr	r3, [r3, #4]
 802ceae:	b10b      	cbz	r3, 802ceb4 <_free_r+0x58>
 802ceb0:	42a3      	cmp	r3, r4
 802ceb2:	d9fa      	bls.n	802ceaa <_free_r+0x4e>
 802ceb4:	6811      	ldr	r1, [r2, #0]
 802ceb6:	1855      	adds	r5, r2, r1
 802ceb8:	42a5      	cmp	r5, r4
 802ceba:	d10b      	bne.n	802ced4 <_free_r+0x78>
 802cebc:	6824      	ldr	r4, [r4, #0]
 802cebe:	4421      	add	r1, r4
 802cec0:	1854      	adds	r4, r2, r1
 802cec2:	42a3      	cmp	r3, r4
 802cec4:	6011      	str	r1, [r2, #0]
 802cec6:	d1dd      	bne.n	802ce84 <_free_r+0x28>
 802cec8:	681c      	ldr	r4, [r3, #0]
 802ceca:	685b      	ldr	r3, [r3, #4]
 802cecc:	6053      	str	r3, [r2, #4]
 802cece:	4421      	add	r1, r4
 802ced0:	6011      	str	r1, [r2, #0]
 802ced2:	e7d7      	b.n	802ce84 <_free_r+0x28>
 802ced4:	d902      	bls.n	802cedc <_free_r+0x80>
 802ced6:	230c      	movs	r3, #12
 802ced8:	6003      	str	r3, [r0, #0]
 802ceda:	e7d3      	b.n	802ce84 <_free_r+0x28>
 802cedc:	6825      	ldr	r5, [r4, #0]
 802cede:	1961      	adds	r1, r4, r5
 802cee0:	428b      	cmp	r3, r1
 802cee2:	bf04      	itt	eq
 802cee4:	6819      	ldreq	r1, [r3, #0]
 802cee6:	685b      	ldreq	r3, [r3, #4]
 802cee8:	6063      	str	r3, [r4, #4]
 802ceea:	bf04      	itt	eq
 802ceec:	1949      	addeq	r1, r1, r5
 802ceee:	6021      	streq	r1, [r4, #0]
 802cef0:	6054      	str	r4, [r2, #4]
 802cef2:	e7c7      	b.n	802ce84 <_free_r+0x28>
 802cef4:	b003      	add	sp, #12
 802cef6:	bd30      	pop	{r4, r5, pc}
 802cef8:	2001a85c 	.word	0x2001a85c

0802cefc <fmax>:
 802cefc:	b508      	push	{r3, lr}
 802cefe:	ed2d 8b04 	vpush	{d8-d9}
 802cf02:	eeb0 8a40 	vmov.f32	s16, s0
 802cf06:	eef0 8a60 	vmov.f32	s17, s1
 802cf0a:	eeb0 9a41 	vmov.f32	s18, s2
 802cf0e:	eef0 9a61 	vmov.f32	s19, s3
 802cf12:	f000 f81b 	bl	802cf4c <__fpclassifyd>
 802cf16:	b168      	cbz	r0, 802cf34 <fmax+0x38>
 802cf18:	eeb0 0a49 	vmov.f32	s0, s18
 802cf1c:	eef0 0a69 	vmov.f32	s1, s19
 802cf20:	f000 f814 	bl	802cf4c <__fpclassifyd>
 802cf24:	b150      	cbz	r0, 802cf3c <fmax+0x40>
 802cf26:	ec53 2b19 	vmov	r2, r3, d9
 802cf2a:	ec51 0b18 	vmov	r0, r1, d8
 802cf2e:	f7d3 fde5 	bl	8000afc <__aeabi_dcmpgt>
 802cf32:	b918      	cbnz	r0, 802cf3c <fmax+0x40>
 802cf34:	eeb0 8a49 	vmov.f32	s16, s18
 802cf38:	eef0 8a69 	vmov.f32	s17, s19
 802cf3c:	eeb0 0a48 	vmov.f32	s0, s16
 802cf40:	eef0 0a68 	vmov.f32	s1, s17
 802cf44:	ecbd 8b04 	vpop	{d8-d9}
 802cf48:	bd08      	pop	{r3, pc}
	...

0802cf4c <__fpclassifyd>:
 802cf4c:	ec51 0b10 	vmov	r0, r1, d0
 802cf50:	b510      	push	{r4, lr}
 802cf52:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 802cf56:	460b      	mov	r3, r1
 802cf58:	d019      	beq.n	802cf8e <__fpclassifyd+0x42>
 802cf5a:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 802cf5e:	490e      	ldr	r1, [pc, #56]	; (802cf98 <__fpclassifyd+0x4c>)
 802cf60:	428a      	cmp	r2, r1
 802cf62:	d90e      	bls.n	802cf82 <__fpclassifyd+0x36>
 802cf64:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 802cf68:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 802cf6c:	428a      	cmp	r2, r1
 802cf6e:	d908      	bls.n	802cf82 <__fpclassifyd+0x36>
 802cf70:	4a0a      	ldr	r2, [pc, #40]	; (802cf9c <__fpclassifyd+0x50>)
 802cf72:	4213      	tst	r3, r2
 802cf74:	d007      	beq.n	802cf86 <__fpclassifyd+0x3a>
 802cf76:	4294      	cmp	r4, r2
 802cf78:	d107      	bne.n	802cf8a <__fpclassifyd+0x3e>
 802cf7a:	fab0 f080 	clz	r0, r0
 802cf7e:	0940      	lsrs	r0, r0, #5
 802cf80:	bd10      	pop	{r4, pc}
 802cf82:	2004      	movs	r0, #4
 802cf84:	e7fc      	b.n	802cf80 <__fpclassifyd+0x34>
 802cf86:	2003      	movs	r0, #3
 802cf88:	e7fa      	b.n	802cf80 <__fpclassifyd+0x34>
 802cf8a:	2000      	movs	r0, #0
 802cf8c:	e7f8      	b.n	802cf80 <__fpclassifyd+0x34>
 802cf8e:	2800      	cmp	r0, #0
 802cf90:	d1ee      	bne.n	802cf70 <__fpclassifyd+0x24>
 802cf92:	2002      	movs	r0, #2
 802cf94:	e7f4      	b.n	802cf80 <__fpclassifyd+0x34>
 802cf96:	bf00      	nop
 802cf98:	7fdfffff 	.word	0x7fdfffff
 802cf9c:	7ff00000 	.word	0x7ff00000

0802cfa0 <exp>:
 802cfa0:	b538      	push	{r3, r4, r5, lr}
 802cfa2:	ed2d 8b02 	vpush	{d8}
 802cfa6:	ec55 4b10 	vmov	r4, r5, d0
 802cfaa:	f000 f8c5 	bl	802d138 <__ieee754_exp>
 802cfae:	4b22      	ldr	r3, [pc, #136]	; (802d038 <exp+0x98>)
 802cfb0:	eeb0 8a40 	vmov.f32	s16, s0
 802cfb4:	eef0 8a60 	vmov.f32	s17, s1
 802cfb8:	f993 3000 	ldrsb.w	r3, [r3]
 802cfbc:	3301      	adds	r3, #1
 802cfbe:	d012      	beq.n	802cfe6 <exp+0x46>
 802cfc0:	ec45 4b10 	vmov	d0, r4, r5
 802cfc4:	f000 fca2 	bl	802d90c <finite>
 802cfc8:	b168      	cbz	r0, 802cfe6 <exp+0x46>
 802cfca:	a313      	add	r3, pc, #76	; (adr r3, 802d018 <exp+0x78>)
 802cfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cfd0:	4620      	mov	r0, r4
 802cfd2:	4629      	mov	r1, r5
 802cfd4:	f7d3 fd92 	bl	8000afc <__aeabi_dcmpgt>
 802cfd8:	b160      	cbz	r0, 802cff4 <exp+0x54>
 802cfda:	f7ff fe79 	bl	802ccd0 <__errno>
 802cfde:	ed9f 8b10 	vldr	d8, [pc, #64]	; 802d020 <exp+0x80>
 802cfe2:	2322      	movs	r3, #34	; 0x22
 802cfe4:	6003      	str	r3, [r0, #0]
 802cfe6:	eeb0 0a48 	vmov.f32	s0, s16
 802cfea:	eef0 0a68 	vmov.f32	s1, s17
 802cfee:	ecbd 8b02 	vpop	{d8}
 802cff2:	bd38      	pop	{r3, r4, r5, pc}
 802cff4:	a30c      	add	r3, pc, #48	; (adr r3, 802d028 <exp+0x88>)
 802cff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cffa:	4620      	mov	r0, r4
 802cffc:	4629      	mov	r1, r5
 802cffe:	f7d3 fd5f 	bl	8000ac0 <__aeabi_dcmplt>
 802d002:	2800      	cmp	r0, #0
 802d004:	d0ef      	beq.n	802cfe6 <exp+0x46>
 802d006:	f7ff fe63 	bl	802ccd0 <__errno>
 802d00a:	2322      	movs	r3, #34	; 0x22
 802d00c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 802d030 <exp+0x90>
 802d010:	6003      	str	r3, [r0, #0]
 802d012:	e7e8      	b.n	802cfe6 <exp+0x46>
 802d014:	f3af 8000 	nop.w
 802d018:	fefa39ef 	.word	0xfefa39ef
 802d01c:	40862e42 	.word	0x40862e42
 802d020:	00000000 	.word	0x00000000
 802d024:	7ff00000 	.word	0x7ff00000
 802d028:	d52d3051 	.word	0xd52d3051
 802d02c:	c0874910 	.word	0xc0874910
	...
 802d038:	200003d0 	.word	0x200003d0
 802d03c:	00000000 	.word	0x00000000

0802d040 <log>:
 802d040:	b538      	push	{r3, r4, r5, lr}
 802d042:	ed2d 8b02 	vpush	{d8}
 802d046:	ec55 4b10 	vmov	r4, r5, d0
 802d04a:	f000 f9f1 	bl	802d430 <__ieee754_log>
 802d04e:	4b1e      	ldr	r3, [pc, #120]	; (802d0c8 <log+0x88>)
 802d050:	eeb0 8a40 	vmov.f32	s16, s0
 802d054:	eef0 8a60 	vmov.f32	s17, s1
 802d058:	f993 3000 	ldrsb.w	r3, [r3]
 802d05c:	3301      	adds	r3, #1
 802d05e:	d01a      	beq.n	802d096 <log+0x56>
 802d060:	4622      	mov	r2, r4
 802d062:	462b      	mov	r3, r5
 802d064:	4620      	mov	r0, r4
 802d066:	4629      	mov	r1, r5
 802d068:	f7d3 fd52 	bl	8000b10 <__aeabi_dcmpun>
 802d06c:	b998      	cbnz	r0, 802d096 <log+0x56>
 802d06e:	2200      	movs	r2, #0
 802d070:	2300      	movs	r3, #0
 802d072:	4620      	mov	r0, r4
 802d074:	4629      	mov	r1, r5
 802d076:	f7d3 fd41 	bl	8000afc <__aeabi_dcmpgt>
 802d07a:	b960      	cbnz	r0, 802d096 <log+0x56>
 802d07c:	2200      	movs	r2, #0
 802d07e:	2300      	movs	r3, #0
 802d080:	4620      	mov	r0, r4
 802d082:	4629      	mov	r1, r5
 802d084:	f7d3 fd12 	bl	8000aac <__aeabi_dcmpeq>
 802d088:	b160      	cbz	r0, 802d0a4 <log+0x64>
 802d08a:	f7ff fe21 	bl	802ccd0 <__errno>
 802d08e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 802d0c0 <log+0x80>
 802d092:	2322      	movs	r3, #34	; 0x22
 802d094:	6003      	str	r3, [r0, #0]
 802d096:	eeb0 0a48 	vmov.f32	s0, s16
 802d09a:	eef0 0a68 	vmov.f32	s1, s17
 802d09e:	ecbd 8b02 	vpop	{d8}
 802d0a2:	bd38      	pop	{r3, r4, r5, pc}
 802d0a4:	f7ff fe14 	bl	802ccd0 <__errno>
 802d0a8:	ecbd 8b02 	vpop	{d8}
 802d0ac:	2321      	movs	r3, #33	; 0x21
 802d0ae:	6003      	str	r3, [r0, #0]
 802d0b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802d0b4:	4805      	ldr	r0, [pc, #20]	; (802d0cc <log+0x8c>)
 802d0b6:	f000 bc37 	b.w	802d928 <nan>
 802d0ba:	bf00      	nop
 802d0bc:	f3af 8000 	nop.w
 802d0c0:	00000000 	.word	0x00000000
 802d0c4:	fff00000 	.word	0xfff00000
 802d0c8:	200003d0 	.word	0x200003d0
 802d0cc:	0802e0f4 	.word	0x0802e0f4

0802d0d0 <sqrt>:
 802d0d0:	b538      	push	{r3, r4, r5, lr}
 802d0d2:	ed2d 8b02 	vpush	{d8}
 802d0d6:	ec55 4b10 	vmov	r4, r5, d0
 802d0da:	f000 fb63 	bl	802d7a4 <__ieee754_sqrt>
 802d0de:	4b15      	ldr	r3, [pc, #84]	; (802d134 <sqrt+0x64>)
 802d0e0:	eeb0 8a40 	vmov.f32	s16, s0
 802d0e4:	eef0 8a60 	vmov.f32	s17, s1
 802d0e8:	f993 3000 	ldrsb.w	r3, [r3]
 802d0ec:	3301      	adds	r3, #1
 802d0ee:	d019      	beq.n	802d124 <sqrt+0x54>
 802d0f0:	4622      	mov	r2, r4
 802d0f2:	462b      	mov	r3, r5
 802d0f4:	4620      	mov	r0, r4
 802d0f6:	4629      	mov	r1, r5
 802d0f8:	f7d3 fd0a 	bl	8000b10 <__aeabi_dcmpun>
 802d0fc:	b990      	cbnz	r0, 802d124 <sqrt+0x54>
 802d0fe:	2200      	movs	r2, #0
 802d100:	2300      	movs	r3, #0
 802d102:	4620      	mov	r0, r4
 802d104:	4629      	mov	r1, r5
 802d106:	f7d3 fcdb 	bl	8000ac0 <__aeabi_dcmplt>
 802d10a:	b158      	cbz	r0, 802d124 <sqrt+0x54>
 802d10c:	f7ff fde0 	bl	802ccd0 <__errno>
 802d110:	2321      	movs	r3, #33	; 0x21
 802d112:	6003      	str	r3, [r0, #0]
 802d114:	2200      	movs	r2, #0
 802d116:	2300      	movs	r3, #0
 802d118:	4610      	mov	r0, r2
 802d11a:	4619      	mov	r1, r3
 802d11c:	f7d3 fb88 	bl	8000830 <__aeabi_ddiv>
 802d120:	ec41 0b18 	vmov	d8, r0, r1
 802d124:	eeb0 0a48 	vmov.f32	s0, s16
 802d128:	eef0 0a68 	vmov.f32	s1, s17
 802d12c:	ecbd 8b02 	vpop	{d8}
 802d130:	bd38      	pop	{r3, r4, r5, pc}
 802d132:	bf00      	nop
 802d134:	200003d0 	.word	0x200003d0

0802d138 <__ieee754_exp>:
 802d138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d13c:	ec55 4b10 	vmov	r4, r5, d0
 802d140:	49b1      	ldr	r1, [pc, #708]	; (802d408 <__ieee754_exp+0x2d0>)
 802d142:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802d146:	428b      	cmp	r3, r1
 802d148:	ed2d 8b04 	vpush	{d8-d9}
 802d14c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 802d150:	d937      	bls.n	802d1c2 <__ieee754_exp+0x8a>
 802d152:	49ae      	ldr	r1, [pc, #696]	; (802d40c <__ieee754_exp+0x2d4>)
 802d154:	428b      	cmp	r3, r1
 802d156:	d916      	bls.n	802d186 <__ieee754_exp+0x4e>
 802d158:	ee10 3a10 	vmov	r3, s0
 802d15c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 802d160:	4313      	orrs	r3, r2
 802d162:	d009      	beq.n	802d178 <__ieee754_exp+0x40>
 802d164:	ee10 2a10 	vmov	r2, s0
 802d168:	462b      	mov	r3, r5
 802d16a:	4620      	mov	r0, r4
 802d16c:	4629      	mov	r1, r5
 802d16e:	f7d3 f87f 	bl	8000270 <__adddf3>
 802d172:	4604      	mov	r4, r0
 802d174:	460d      	mov	r5, r1
 802d176:	e000      	b.n	802d17a <__ieee754_exp+0x42>
 802d178:	bb06      	cbnz	r6, 802d1bc <__ieee754_exp+0x84>
 802d17a:	ecbd 8b04 	vpop	{d8-d9}
 802d17e:	ec45 4b10 	vmov	d0, r4, r5
 802d182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d186:	a38a      	add	r3, pc, #552	; (adr r3, 802d3b0 <__ieee754_exp+0x278>)
 802d188:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d18c:	ee10 0a10 	vmov	r0, s0
 802d190:	4629      	mov	r1, r5
 802d192:	f7d3 fcb3 	bl	8000afc <__aeabi_dcmpgt>
 802d196:	b138      	cbz	r0, 802d1a8 <__ieee754_exp+0x70>
 802d198:	a387      	add	r3, pc, #540	; (adr r3, 802d3b8 <__ieee754_exp+0x280>)
 802d19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d19e:	4610      	mov	r0, r2
 802d1a0:	4619      	mov	r1, r3
 802d1a2:	f7d3 fa1b 	bl	80005dc <__aeabi_dmul>
 802d1a6:	e7e4      	b.n	802d172 <__ieee754_exp+0x3a>
 802d1a8:	a385      	add	r3, pc, #532	; (adr r3, 802d3c0 <__ieee754_exp+0x288>)
 802d1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d1ae:	4620      	mov	r0, r4
 802d1b0:	4629      	mov	r1, r5
 802d1b2:	f7d3 fc85 	bl	8000ac0 <__aeabi_dcmplt>
 802d1b6:	2800      	cmp	r0, #0
 802d1b8:	f000 8087 	beq.w	802d2ca <__ieee754_exp+0x192>
 802d1bc:	2400      	movs	r4, #0
 802d1be:	2500      	movs	r5, #0
 802d1c0:	e7db      	b.n	802d17a <__ieee754_exp+0x42>
 802d1c2:	4a93      	ldr	r2, [pc, #588]	; (802d410 <__ieee754_exp+0x2d8>)
 802d1c4:	4293      	cmp	r3, r2
 802d1c6:	f240 80ac 	bls.w	802d322 <__ieee754_exp+0x1ea>
 802d1ca:	4a92      	ldr	r2, [pc, #584]	; (802d414 <__ieee754_exp+0x2dc>)
 802d1cc:	4293      	cmp	r3, r2
 802d1ce:	d87c      	bhi.n	802d2ca <__ieee754_exp+0x192>
 802d1d0:	4b91      	ldr	r3, [pc, #580]	; (802d418 <__ieee754_exp+0x2e0>)
 802d1d2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802d1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d1da:	ee10 0a10 	vmov	r0, s0
 802d1de:	4629      	mov	r1, r5
 802d1e0:	f7d3 f844 	bl	800026c <__aeabi_dsub>
 802d1e4:	4b8d      	ldr	r3, [pc, #564]	; (802d41c <__ieee754_exp+0x2e4>)
 802d1e6:	00f7      	lsls	r7, r6, #3
 802d1e8:	443b      	add	r3, r7
 802d1ea:	ed93 7b00 	vldr	d7, [r3]
 802d1ee:	f1c6 0a01 	rsb	sl, r6, #1
 802d1f2:	4680      	mov	r8, r0
 802d1f4:	4689      	mov	r9, r1
 802d1f6:	ebaa 0a06 	sub.w	sl, sl, r6
 802d1fa:	eeb0 8a47 	vmov.f32	s16, s14
 802d1fe:	eef0 8a67 	vmov.f32	s17, s15
 802d202:	ec53 2b18 	vmov	r2, r3, d8
 802d206:	4640      	mov	r0, r8
 802d208:	4649      	mov	r1, r9
 802d20a:	f7d3 f82f 	bl	800026c <__aeabi_dsub>
 802d20e:	4604      	mov	r4, r0
 802d210:	460d      	mov	r5, r1
 802d212:	4622      	mov	r2, r4
 802d214:	462b      	mov	r3, r5
 802d216:	4620      	mov	r0, r4
 802d218:	4629      	mov	r1, r5
 802d21a:	f7d3 f9df 	bl	80005dc <__aeabi_dmul>
 802d21e:	a36a      	add	r3, pc, #424	; (adr r3, 802d3c8 <__ieee754_exp+0x290>)
 802d220:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d224:	4606      	mov	r6, r0
 802d226:	460f      	mov	r7, r1
 802d228:	f7d3 f9d8 	bl	80005dc <__aeabi_dmul>
 802d22c:	a368      	add	r3, pc, #416	; (adr r3, 802d3d0 <__ieee754_exp+0x298>)
 802d22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d232:	f7d3 f81b 	bl	800026c <__aeabi_dsub>
 802d236:	4632      	mov	r2, r6
 802d238:	463b      	mov	r3, r7
 802d23a:	f7d3 f9cf 	bl	80005dc <__aeabi_dmul>
 802d23e:	a366      	add	r3, pc, #408	; (adr r3, 802d3d8 <__ieee754_exp+0x2a0>)
 802d240:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d244:	f7d3 f814 	bl	8000270 <__adddf3>
 802d248:	4632      	mov	r2, r6
 802d24a:	463b      	mov	r3, r7
 802d24c:	f7d3 f9c6 	bl	80005dc <__aeabi_dmul>
 802d250:	a363      	add	r3, pc, #396	; (adr r3, 802d3e0 <__ieee754_exp+0x2a8>)
 802d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d256:	f7d3 f809 	bl	800026c <__aeabi_dsub>
 802d25a:	4632      	mov	r2, r6
 802d25c:	463b      	mov	r3, r7
 802d25e:	f7d3 f9bd 	bl	80005dc <__aeabi_dmul>
 802d262:	a361      	add	r3, pc, #388	; (adr r3, 802d3e8 <__ieee754_exp+0x2b0>)
 802d264:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d268:	f7d3 f802 	bl	8000270 <__adddf3>
 802d26c:	4632      	mov	r2, r6
 802d26e:	463b      	mov	r3, r7
 802d270:	f7d3 f9b4 	bl	80005dc <__aeabi_dmul>
 802d274:	4602      	mov	r2, r0
 802d276:	460b      	mov	r3, r1
 802d278:	4620      	mov	r0, r4
 802d27a:	4629      	mov	r1, r5
 802d27c:	f7d2 fff6 	bl	800026c <__aeabi_dsub>
 802d280:	4602      	mov	r2, r0
 802d282:	460b      	mov	r3, r1
 802d284:	4606      	mov	r6, r0
 802d286:	460f      	mov	r7, r1
 802d288:	4620      	mov	r0, r4
 802d28a:	4629      	mov	r1, r5
 802d28c:	f7d3 f9a6 	bl	80005dc <__aeabi_dmul>
 802d290:	ec41 0b19 	vmov	d9, r0, r1
 802d294:	f1ba 0f00 	cmp.w	sl, #0
 802d298:	d15d      	bne.n	802d356 <__ieee754_exp+0x21e>
 802d29a:	2200      	movs	r2, #0
 802d29c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802d2a0:	4630      	mov	r0, r6
 802d2a2:	4639      	mov	r1, r7
 802d2a4:	f7d2 ffe2 	bl	800026c <__aeabi_dsub>
 802d2a8:	4602      	mov	r2, r0
 802d2aa:	460b      	mov	r3, r1
 802d2ac:	ec51 0b19 	vmov	r0, r1, d9
 802d2b0:	f7d3 fabe 	bl	8000830 <__aeabi_ddiv>
 802d2b4:	4622      	mov	r2, r4
 802d2b6:	462b      	mov	r3, r5
 802d2b8:	f7d2 ffd8 	bl	800026c <__aeabi_dsub>
 802d2bc:	4602      	mov	r2, r0
 802d2be:	460b      	mov	r3, r1
 802d2c0:	2000      	movs	r0, #0
 802d2c2:	4957      	ldr	r1, [pc, #348]	; (802d420 <__ieee754_exp+0x2e8>)
 802d2c4:	f7d2 ffd2 	bl	800026c <__aeabi_dsub>
 802d2c8:	e753      	b.n	802d172 <__ieee754_exp+0x3a>
 802d2ca:	4856      	ldr	r0, [pc, #344]	; (802d424 <__ieee754_exp+0x2ec>)
 802d2cc:	a348      	add	r3, pc, #288	; (adr r3, 802d3f0 <__ieee754_exp+0x2b8>)
 802d2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d2d2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 802d2d6:	4629      	mov	r1, r5
 802d2d8:	4620      	mov	r0, r4
 802d2da:	f7d3 f97f 	bl	80005dc <__aeabi_dmul>
 802d2de:	e9d6 2300 	ldrd	r2, r3, [r6]
 802d2e2:	f7d2 ffc5 	bl	8000270 <__adddf3>
 802d2e6:	f7d3 fc29 	bl	8000b3c <__aeabi_d2iz>
 802d2ea:	4682      	mov	sl, r0
 802d2ec:	f7d3 f90c 	bl	8000508 <__aeabi_i2d>
 802d2f0:	a341      	add	r3, pc, #260	; (adr r3, 802d3f8 <__ieee754_exp+0x2c0>)
 802d2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d2f6:	4606      	mov	r6, r0
 802d2f8:	460f      	mov	r7, r1
 802d2fa:	f7d3 f96f 	bl	80005dc <__aeabi_dmul>
 802d2fe:	4602      	mov	r2, r0
 802d300:	460b      	mov	r3, r1
 802d302:	4620      	mov	r0, r4
 802d304:	4629      	mov	r1, r5
 802d306:	f7d2 ffb1 	bl	800026c <__aeabi_dsub>
 802d30a:	a33d      	add	r3, pc, #244	; (adr r3, 802d400 <__ieee754_exp+0x2c8>)
 802d30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d310:	4680      	mov	r8, r0
 802d312:	4689      	mov	r9, r1
 802d314:	4630      	mov	r0, r6
 802d316:	4639      	mov	r1, r7
 802d318:	f7d3 f960 	bl	80005dc <__aeabi_dmul>
 802d31c:	ec41 0b18 	vmov	d8, r0, r1
 802d320:	e76f      	b.n	802d202 <__ieee754_exp+0xca>
 802d322:	4a41      	ldr	r2, [pc, #260]	; (802d428 <__ieee754_exp+0x2f0>)
 802d324:	4293      	cmp	r3, r2
 802d326:	d811      	bhi.n	802d34c <__ieee754_exp+0x214>
 802d328:	a323      	add	r3, pc, #140	; (adr r3, 802d3b8 <__ieee754_exp+0x280>)
 802d32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d32e:	ee10 0a10 	vmov	r0, s0
 802d332:	4629      	mov	r1, r5
 802d334:	f7d2 ff9c 	bl	8000270 <__adddf3>
 802d338:	4b39      	ldr	r3, [pc, #228]	; (802d420 <__ieee754_exp+0x2e8>)
 802d33a:	2200      	movs	r2, #0
 802d33c:	f7d3 fbde 	bl	8000afc <__aeabi_dcmpgt>
 802d340:	b138      	cbz	r0, 802d352 <__ieee754_exp+0x21a>
 802d342:	4b37      	ldr	r3, [pc, #220]	; (802d420 <__ieee754_exp+0x2e8>)
 802d344:	2200      	movs	r2, #0
 802d346:	4620      	mov	r0, r4
 802d348:	4629      	mov	r1, r5
 802d34a:	e710      	b.n	802d16e <__ieee754_exp+0x36>
 802d34c:	f04f 0a00 	mov.w	sl, #0
 802d350:	e75f      	b.n	802d212 <__ieee754_exp+0xda>
 802d352:	4682      	mov	sl, r0
 802d354:	e75d      	b.n	802d212 <__ieee754_exp+0xda>
 802d356:	4632      	mov	r2, r6
 802d358:	463b      	mov	r3, r7
 802d35a:	2000      	movs	r0, #0
 802d35c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 802d360:	f7d2 ff84 	bl	800026c <__aeabi_dsub>
 802d364:	4602      	mov	r2, r0
 802d366:	460b      	mov	r3, r1
 802d368:	ec51 0b19 	vmov	r0, r1, d9
 802d36c:	f7d3 fa60 	bl	8000830 <__aeabi_ddiv>
 802d370:	4602      	mov	r2, r0
 802d372:	460b      	mov	r3, r1
 802d374:	ec51 0b18 	vmov	r0, r1, d8
 802d378:	f7d2 ff78 	bl	800026c <__aeabi_dsub>
 802d37c:	4642      	mov	r2, r8
 802d37e:	464b      	mov	r3, r9
 802d380:	f7d2 ff74 	bl	800026c <__aeabi_dsub>
 802d384:	4602      	mov	r2, r0
 802d386:	460b      	mov	r3, r1
 802d388:	2000      	movs	r0, #0
 802d38a:	4925      	ldr	r1, [pc, #148]	; (802d420 <__ieee754_exp+0x2e8>)
 802d38c:	f7d2 ff6e 	bl	800026c <__aeabi_dsub>
 802d390:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 802d394:	4592      	cmp	sl, r2
 802d396:	db02      	blt.n	802d39e <__ieee754_exp+0x266>
 802d398:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 802d39c:	e6e9      	b.n	802d172 <__ieee754_exp+0x3a>
 802d39e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 802d3a2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 802d3a6:	2200      	movs	r2, #0
 802d3a8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 802d3ac:	e6f9      	b.n	802d1a2 <__ieee754_exp+0x6a>
 802d3ae:	bf00      	nop
 802d3b0:	fefa39ef 	.word	0xfefa39ef
 802d3b4:	40862e42 	.word	0x40862e42
 802d3b8:	8800759c 	.word	0x8800759c
 802d3bc:	7e37e43c 	.word	0x7e37e43c
 802d3c0:	d52d3051 	.word	0xd52d3051
 802d3c4:	c0874910 	.word	0xc0874910
 802d3c8:	72bea4d0 	.word	0x72bea4d0
 802d3cc:	3e663769 	.word	0x3e663769
 802d3d0:	c5d26bf1 	.word	0xc5d26bf1
 802d3d4:	3ebbbd41 	.word	0x3ebbbd41
 802d3d8:	af25de2c 	.word	0xaf25de2c
 802d3dc:	3f11566a 	.word	0x3f11566a
 802d3e0:	16bebd93 	.word	0x16bebd93
 802d3e4:	3f66c16c 	.word	0x3f66c16c
 802d3e8:	5555553e 	.word	0x5555553e
 802d3ec:	3fc55555 	.word	0x3fc55555
 802d3f0:	652b82fe 	.word	0x652b82fe
 802d3f4:	3ff71547 	.word	0x3ff71547
 802d3f8:	fee00000 	.word	0xfee00000
 802d3fc:	3fe62e42 	.word	0x3fe62e42
 802d400:	35793c76 	.word	0x35793c76
 802d404:	3dea39ef 	.word	0x3dea39ef
 802d408:	40862e41 	.word	0x40862e41
 802d40c:	7fefffff 	.word	0x7fefffff
 802d410:	3fd62e42 	.word	0x3fd62e42
 802d414:	3ff0a2b1 	.word	0x3ff0a2b1
 802d418:	0802e108 	.word	0x0802e108
 802d41c:	0802e118 	.word	0x0802e118
 802d420:	3ff00000 	.word	0x3ff00000
 802d424:	0802e0f8 	.word	0x0802e0f8
 802d428:	3e2fffff 	.word	0x3e2fffff
 802d42c:	00000000 	.word	0x00000000

0802d430 <__ieee754_log>:
 802d430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d434:	ec51 0b10 	vmov	r0, r1, d0
 802d438:	ed2d 8b04 	vpush	{d8-d9}
 802d43c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 802d440:	b083      	sub	sp, #12
 802d442:	460d      	mov	r5, r1
 802d444:	da29      	bge.n	802d49a <__ieee754_log+0x6a>
 802d446:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802d44a:	4303      	orrs	r3, r0
 802d44c:	ee10 2a10 	vmov	r2, s0
 802d450:	d10c      	bne.n	802d46c <__ieee754_log+0x3c>
 802d452:	49cf      	ldr	r1, [pc, #828]	; (802d790 <__ieee754_log+0x360>)
 802d454:	2200      	movs	r2, #0
 802d456:	2300      	movs	r3, #0
 802d458:	2000      	movs	r0, #0
 802d45a:	f7d3 f9e9 	bl	8000830 <__aeabi_ddiv>
 802d45e:	ec41 0b10 	vmov	d0, r0, r1
 802d462:	b003      	add	sp, #12
 802d464:	ecbd 8b04 	vpop	{d8-d9}
 802d468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d46c:	2900      	cmp	r1, #0
 802d46e:	da05      	bge.n	802d47c <__ieee754_log+0x4c>
 802d470:	460b      	mov	r3, r1
 802d472:	f7d2 fefb 	bl	800026c <__aeabi_dsub>
 802d476:	2200      	movs	r2, #0
 802d478:	2300      	movs	r3, #0
 802d47a:	e7ee      	b.n	802d45a <__ieee754_log+0x2a>
 802d47c:	4bc5      	ldr	r3, [pc, #788]	; (802d794 <__ieee754_log+0x364>)
 802d47e:	2200      	movs	r2, #0
 802d480:	f7d3 f8ac 	bl	80005dc <__aeabi_dmul>
 802d484:	f06f 0335 	mvn.w	r3, #53	; 0x35
 802d488:	460d      	mov	r5, r1
 802d48a:	4ac3      	ldr	r2, [pc, #780]	; (802d798 <__ieee754_log+0x368>)
 802d48c:	4295      	cmp	r5, r2
 802d48e:	dd06      	ble.n	802d49e <__ieee754_log+0x6e>
 802d490:	4602      	mov	r2, r0
 802d492:	460b      	mov	r3, r1
 802d494:	f7d2 feec 	bl	8000270 <__adddf3>
 802d498:	e7e1      	b.n	802d45e <__ieee754_log+0x2e>
 802d49a:	2300      	movs	r3, #0
 802d49c:	e7f5      	b.n	802d48a <__ieee754_log+0x5a>
 802d49e:	152c      	asrs	r4, r5, #20
 802d4a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 802d4a4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 802d4a8:	441c      	add	r4, r3
 802d4aa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 802d4ae:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 802d4b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802d4b6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 802d4ba:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 802d4be:	ea42 0105 	orr.w	r1, r2, r5
 802d4c2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 802d4c6:	2200      	movs	r2, #0
 802d4c8:	4bb4      	ldr	r3, [pc, #720]	; (802d79c <__ieee754_log+0x36c>)
 802d4ca:	f7d2 fecf 	bl	800026c <__aeabi_dsub>
 802d4ce:	1cab      	adds	r3, r5, #2
 802d4d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802d4d4:	2b02      	cmp	r3, #2
 802d4d6:	4682      	mov	sl, r0
 802d4d8:	468b      	mov	fp, r1
 802d4da:	f04f 0200 	mov.w	r2, #0
 802d4de:	dc53      	bgt.n	802d588 <__ieee754_log+0x158>
 802d4e0:	2300      	movs	r3, #0
 802d4e2:	f7d3 fae3 	bl	8000aac <__aeabi_dcmpeq>
 802d4e6:	b1d0      	cbz	r0, 802d51e <__ieee754_log+0xee>
 802d4e8:	2c00      	cmp	r4, #0
 802d4ea:	f000 8122 	beq.w	802d732 <__ieee754_log+0x302>
 802d4ee:	4620      	mov	r0, r4
 802d4f0:	f7d3 f80a 	bl	8000508 <__aeabi_i2d>
 802d4f4:	a390      	add	r3, pc, #576	; (adr r3, 802d738 <__ieee754_log+0x308>)
 802d4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d4fa:	4606      	mov	r6, r0
 802d4fc:	460f      	mov	r7, r1
 802d4fe:	f7d3 f86d 	bl	80005dc <__aeabi_dmul>
 802d502:	a38f      	add	r3, pc, #572	; (adr r3, 802d740 <__ieee754_log+0x310>)
 802d504:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d508:	4604      	mov	r4, r0
 802d50a:	460d      	mov	r5, r1
 802d50c:	4630      	mov	r0, r6
 802d50e:	4639      	mov	r1, r7
 802d510:	f7d3 f864 	bl	80005dc <__aeabi_dmul>
 802d514:	4602      	mov	r2, r0
 802d516:	460b      	mov	r3, r1
 802d518:	4620      	mov	r0, r4
 802d51a:	4629      	mov	r1, r5
 802d51c:	e7ba      	b.n	802d494 <__ieee754_log+0x64>
 802d51e:	a38a      	add	r3, pc, #552	; (adr r3, 802d748 <__ieee754_log+0x318>)
 802d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d524:	4650      	mov	r0, sl
 802d526:	4659      	mov	r1, fp
 802d528:	f7d3 f858 	bl	80005dc <__aeabi_dmul>
 802d52c:	4602      	mov	r2, r0
 802d52e:	460b      	mov	r3, r1
 802d530:	2000      	movs	r0, #0
 802d532:	499b      	ldr	r1, [pc, #620]	; (802d7a0 <__ieee754_log+0x370>)
 802d534:	f7d2 fe9a 	bl	800026c <__aeabi_dsub>
 802d538:	4652      	mov	r2, sl
 802d53a:	4606      	mov	r6, r0
 802d53c:	460f      	mov	r7, r1
 802d53e:	465b      	mov	r3, fp
 802d540:	4650      	mov	r0, sl
 802d542:	4659      	mov	r1, fp
 802d544:	f7d3 f84a 	bl	80005dc <__aeabi_dmul>
 802d548:	4602      	mov	r2, r0
 802d54a:	460b      	mov	r3, r1
 802d54c:	4630      	mov	r0, r6
 802d54e:	4639      	mov	r1, r7
 802d550:	f7d3 f844 	bl	80005dc <__aeabi_dmul>
 802d554:	4606      	mov	r6, r0
 802d556:	460f      	mov	r7, r1
 802d558:	b914      	cbnz	r4, 802d560 <__ieee754_log+0x130>
 802d55a:	4632      	mov	r2, r6
 802d55c:	463b      	mov	r3, r7
 802d55e:	e0a2      	b.n	802d6a6 <__ieee754_log+0x276>
 802d560:	4620      	mov	r0, r4
 802d562:	f7d2 ffd1 	bl	8000508 <__aeabi_i2d>
 802d566:	a374      	add	r3, pc, #464	; (adr r3, 802d738 <__ieee754_log+0x308>)
 802d568:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d56c:	4680      	mov	r8, r0
 802d56e:	4689      	mov	r9, r1
 802d570:	f7d3 f834 	bl	80005dc <__aeabi_dmul>
 802d574:	a372      	add	r3, pc, #456	; (adr r3, 802d740 <__ieee754_log+0x310>)
 802d576:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d57a:	4604      	mov	r4, r0
 802d57c:	460d      	mov	r5, r1
 802d57e:	4640      	mov	r0, r8
 802d580:	4649      	mov	r1, r9
 802d582:	f7d3 f82b 	bl	80005dc <__aeabi_dmul>
 802d586:	e0a7      	b.n	802d6d8 <__ieee754_log+0x2a8>
 802d588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802d58c:	f7d2 fe70 	bl	8000270 <__adddf3>
 802d590:	4602      	mov	r2, r0
 802d592:	460b      	mov	r3, r1
 802d594:	4650      	mov	r0, sl
 802d596:	4659      	mov	r1, fp
 802d598:	f7d3 f94a 	bl	8000830 <__aeabi_ddiv>
 802d59c:	ec41 0b18 	vmov	d8, r0, r1
 802d5a0:	4620      	mov	r0, r4
 802d5a2:	f7d2 ffb1 	bl	8000508 <__aeabi_i2d>
 802d5a6:	ec53 2b18 	vmov	r2, r3, d8
 802d5aa:	ec41 0b19 	vmov	d9, r0, r1
 802d5ae:	ec51 0b18 	vmov	r0, r1, d8
 802d5b2:	f7d3 f813 	bl	80005dc <__aeabi_dmul>
 802d5b6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 802d5ba:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 802d5be:	9301      	str	r3, [sp, #4]
 802d5c0:	4602      	mov	r2, r0
 802d5c2:	460b      	mov	r3, r1
 802d5c4:	4680      	mov	r8, r0
 802d5c6:	4689      	mov	r9, r1
 802d5c8:	f7d3 f808 	bl	80005dc <__aeabi_dmul>
 802d5cc:	a360      	add	r3, pc, #384	; (adr r3, 802d750 <__ieee754_log+0x320>)
 802d5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d5d2:	4606      	mov	r6, r0
 802d5d4:	460f      	mov	r7, r1
 802d5d6:	f7d3 f801 	bl	80005dc <__aeabi_dmul>
 802d5da:	a35f      	add	r3, pc, #380	; (adr r3, 802d758 <__ieee754_log+0x328>)
 802d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d5e0:	f7d2 fe46 	bl	8000270 <__adddf3>
 802d5e4:	4632      	mov	r2, r6
 802d5e6:	463b      	mov	r3, r7
 802d5e8:	f7d2 fff8 	bl	80005dc <__aeabi_dmul>
 802d5ec:	a35c      	add	r3, pc, #368	; (adr r3, 802d760 <__ieee754_log+0x330>)
 802d5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d5f2:	f7d2 fe3d 	bl	8000270 <__adddf3>
 802d5f6:	4632      	mov	r2, r6
 802d5f8:	463b      	mov	r3, r7
 802d5fa:	f7d2 ffef 	bl	80005dc <__aeabi_dmul>
 802d5fe:	a35a      	add	r3, pc, #360	; (adr r3, 802d768 <__ieee754_log+0x338>)
 802d600:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d604:	f7d2 fe34 	bl	8000270 <__adddf3>
 802d608:	4642      	mov	r2, r8
 802d60a:	464b      	mov	r3, r9
 802d60c:	f7d2 ffe6 	bl	80005dc <__aeabi_dmul>
 802d610:	a357      	add	r3, pc, #348	; (adr r3, 802d770 <__ieee754_log+0x340>)
 802d612:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d616:	4680      	mov	r8, r0
 802d618:	4689      	mov	r9, r1
 802d61a:	4630      	mov	r0, r6
 802d61c:	4639      	mov	r1, r7
 802d61e:	f7d2 ffdd 	bl	80005dc <__aeabi_dmul>
 802d622:	a355      	add	r3, pc, #340	; (adr r3, 802d778 <__ieee754_log+0x348>)
 802d624:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d628:	f7d2 fe22 	bl	8000270 <__adddf3>
 802d62c:	4632      	mov	r2, r6
 802d62e:	463b      	mov	r3, r7
 802d630:	f7d2 ffd4 	bl	80005dc <__aeabi_dmul>
 802d634:	a352      	add	r3, pc, #328	; (adr r3, 802d780 <__ieee754_log+0x350>)
 802d636:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d63a:	f7d2 fe19 	bl	8000270 <__adddf3>
 802d63e:	4632      	mov	r2, r6
 802d640:	463b      	mov	r3, r7
 802d642:	f7d2 ffcb 	bl	80005dc <__aeabi_dmul>
 802d646:	460b      	mov	r3, r1
 802d648:	4602      	mov	r2, r0
 802d64a:	4649      	mov	r1, r9
 802d64c:	4640      	mov	r0, r8
 802d64e:	f7d2 fe0f 	bl	8000270 <__adddf3>
 802d652:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 802d656:	9b01      	ldr	r3, [sp, #4]
 802d658:	3551      	adds	r5, #81	; 0x51
 802d65a:	431d      	orrs	r5, r3
 802d65c:	2d00      	cmp	r5, #0
 802d65e:	4680      	mov	r8, r0
 802d660:	4689      	mov	r9, r1
 802d662:	dd48      	ble.n	802d6f6 <__ieee754_log+0x2c6>
 802d664:	4b4e      	ldr	r3, [pc, #312]	; (802d7a0 <__ieee754_log+0x370>)
 802d666:	2200      	movs	r2, #0
 802d668:	4650      	mov	r0, sl
 802d66a:	4659      	mov	r1, fp
 802d66c:	f7d2 ffb6 	bl	80005dc <__aeabi_dmul>
 802d670:	4652      	mov	r2, sl
 802d672:	465b      	mov	r3, fp
 802d674:	f7d2 ffb2 	bl	80005dc <__aeabi_dmul>
 802d678:	4602      	mov	r2, r0
 802d67a:	460b      	mov	r3, r1
 802d67c:	4606      	mov	r6, r0
 802d67e:	460f      	mov	r7, r1
 802d680:	4640      	mov	r0, r8
 802d682:	4649      	mov	r1, r9
 802d684:	f7d2 fdf4 	bl	8000270 <__adddf3>
 802d688:	ec53 2b18 	vmov	r2, r3, d8
 802d68c:	f7d2 ffa6 	bl	80005dc <__aeabi_dmul>
 802d690:	4680      	mov	r8, r0
 802d692:	4689      	mov	r9, r1
 802d694:	b964      	cbnz	r4, 802d6b0 <__ieee754_log+0x280>
 802d696:	4602      	mov	r2, r0
 802d698:	460b      	mov	r3, r1
 802d69a:	4630      	mov	r0, r6
 802d69c:	4639      	mov	r1, r7
 802d69e:	f7d2 fde5 	bl	800026c <__aeabi_dsub>
 802d6a2:	4602      	mov	r2, r0
 802d6a4:	460b      	mov	r3, r1
 802d6a6:	4650      	mov	r0, sl
 802d6a8:	4659      	mov	r1, fp
 802d6aa:	f7d2 fddf 	bl	800026c <__aeabi_dsub>
 802d6ae:	e6d6      	b.n	802d45e <__ieee754_log+0x2e>
 802d6b0:	a321      	add	r3, pc, #132	; (adr r3, 802d738 <__ieee754_log+0x308>)
 802d6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d6b6:	ec51 0b19 	vmov	r0, r1, d9
 802d6ba:	f7d2 ff8f 	bl	80005dc <__aeabi_dmul>
 802d6be:	a320      	add	r3, pc, #128	; (adr r3, 802d740 <__ieee754_log+0x310>)
 802d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d6c4:	4604      	mov	r4, r0
 802d6c6:	460d      	mov	r5, r1
 802d6c8:	ec51 0b19 	vmov	r0, r1, d9
 802d6cc:	f7d2 ff86 	bl	80005dc <__aeabi_dmul>
 802d6d0:	4642      	mov	r2, r8
 802d6d2:	464b      	mov	r3, r9
 802d6d4:	f7d2 fdcc 	bl	8000270 <__adddf3>
 802d6d8:	4602      	mov	r2, r0
 802d6da:	460b      	mov	r3, r1
 802d6dc:	4630      	mov	r0, r6
 802d6de:	4639      	mov	r1, r7
 802d6e0:	f7d2 fdc4 	bl	800026c <__aeabi_dsub>
 802d6e4:	4652      	mov	r2, sl
 802d6e6:	465b      	mov	r3, fp
 802d6e8:	f7d2 fdc0 	bl	800026c <__aeabi_dsub>
 802d6ec:	4602      	mov	r2, r0
 802d6ee:	460b      	mov	r3, r1
 802d6f0:	4620      	mov	r0, r4
 802d6f2:	4629      	mov	r1, r5
 802d6f4:	e7d9      	b.n	802d6aa <__ieee754_log+0x27a>
 802d6f6:	4602      	mov	r2, r0
 802d6f8:	460b      	mov	r3, r1
 802d6fa:	4650      	mov	r0, sl
 802d6fc:	4659      	mov	r1, fp
 802d6fe:	f7d2 fdb5 	bl	800026c <__aeabi_dsub>
 802d702:	ec53 2b18 	vmov	r2, r3, d8
 802d706:	f7d2 ff69 	bl	80005dc <__aeabi_dmul>
 802d70a:	4606      	mov	r6, r0
 802d70c:	460f      	mov	r7, r1
 802d70e:	2c00      	cmp	r4, #0
 802d710:	f43f af23 	beq.w	802d55a <__ieee754_log+0x12a>
 802d714:	a308      	add	r3, pc, #32	; (adr r3, 802d738 <__ieee754_log+0x308>)
 802d716:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d71a:	ec51 0b19 	vmov	r0, r1, d9
 802d71e:	f7d2 ff5d 	bl	80005dc <__aeabi_dmul>
 802d722:	a307      	add	r3, pc, #28	; (adr r3, 802d740 <__ieee754_log+0x310>)
 802d724:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d728:	4604      	mov	r4, r0
 802d72a:	460d      	mov	r5, r1
 802d72c:	ec51 0b19 	vmov	r0, r1, d9
 802d730:	e727      	b.n	802d582 <__ieee754_log+0x152>
 802d732:	ed9f 0b15 	vldr	d0, [pc, #84]	; 802d788 <__ieee754_log+0x358>
 802d736:	e694      	b.n	802d462 <__ieee754_log+0x32>
 802d738:	fee00000 	.word	0xfee00000
 802d73c:	3fe62e42 	.word	0x3fe62e42
 802d740:	35793c76 	.word	0x35793c76
 802d744:	3dea39ef 	.word	0x3dea39ef
 802d748:	55555555 	.word	0x55555555
 802d74c:	3fd55555 	.word	0x3fd55555
 802d750:	df3e5244 	.word	0xdf3e5244
 802d754:	3fc2f112 	.word	0x3fc2f112
 802d758:	96cb03de 	.word	0x96cb03de
 802d75c:	3fc74664 	.word	0x3fc74664
 802d760:	94229359 	.word	0x94229359
 802d764:	3fd24924 	.word	0x3fd24924
 802d768:	55555593 	.word	0x55555593
 802d76c:	3fe55555 	.word	0x3fe55555
 802d770:	d078c69f 	.word	0xd078c69f
 802d774:	3fc39a09 	.word	0x3fc39a09
 802d778:	1d8e78af 	.word	0x1d8e78af
 802d77c:	3fcc71c5 	.word	0x3fcc71c5
 802d780:	9997fa04 	.word	0x9997fa04
 802d784:	3fd99999 	.word	0x3fd99999
	...
 802d790:	c3500000 	.word	0xc3500000
 802d794:	43500000 	.word	0x43500000
 802d798:	7fefffff 	.word	0x7fefffff
 802d79c:	3ff00000 	.word	0x3ff00000
 802d7a0:	3fe00000 	.word	0x3fe00000

0802d7a4 <__ieee754_sqrt>:
 802d7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d7a8:	ec55 4b10 	vmov	r4, r5, d0
 802d7ac:	4e56      	ldr	r6, [pc, #344]	; (802d908 <__ieee754_sqrt+0x164>)
 802d7ae:	43ae      	bics	r6, r5
 802d7b0:	ee10 0a10 	vmov	r0, s0
 802d7b4:	ee10 3a10 	vmov	r3, s0
 802d7b8:	4629      	mov	r1, r5
 802d7ba:	462a      	mov	r2, r5
 802d7bc:	d110      	bne.n	802d7e0 <__ieee754_sqrt+0x3c>
 802d7be:	ee10 2a10 	vmov	r2, s0
 802d7c2:	462b      	mov	r3, r5
 802d7c4:	f7d2 ff0a 	bl	80005dc <__aeabi_dmul>
 802d7c8:	4602      	mov	r2, r0
 802d7ca:	460b      	mov	r3, r1
 802d7cc:	4620      	mov	r0, r4
 802d7ce:	4629      	mov	r1, r5
 802d7d0:	f7d2 fd4e 	bl	8000270 <__adddf3>
 802d7d4:	4604      	mov	r4, r0
 802d7d6:	460d      	mov	r5, r1
 802d7d8:	ec45 4b10 	vmov	d0, r4, r5
 802d7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d7e0:	2d00      	cmp	r5, #0
 802d7e2:	dc10      	bgt.n	802d806 <__ieee754_sqrt+0x62>
 802d7e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802d7e8:	4330      	orrs	r0, r6
 802d7ea:	d0f5      	beq.n	802d7d8 <__ieee754_sqrt+0x34>
 802d7ec:	b15d      	cbz	r5, 802d806 <__ieee754_sqrt+0x62>
 802d7ee:	ee10 2a10 	vmov	r2, s0
 802d7f2:	462b      	mov	r3, r5
 802d7f4:	ee10 0a10 	vmov	r0, s0
 802d7f8:	f7d2 fd38 	bl	800026c <__aeabi_dsub>
 802d7fc:	4602      	mov	r2, r0
 802d7fe:	460b      	mov	r3, r1
 802d800:	f7d3 f816 	bl	8000830 <__aeabi_ddiv>
 802d804:	e7e6      	b.n	802d7d4 <__ieee754_sqrt+0x30>
 802d806:	1509      	asrs	r1, r1, #20
 802d808:	d076      	beq.n	802d8f8 <__ieee754_sqrt+0x154>
 802d80a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 802d80e:	07ce      	lsls	r6, r1, #31
 802d810:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 802d814:	bf5e      	ittt	pl
 802d816:	0fda      	lsrpl	r2, r3, #31
 802d818:	005b      	lslpl	r3, r3, #1
 802d81a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 802d81e:	0fda      	lsrs	r2, r3, #31
 802d820:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 802d824:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 802d828:	2000      	movs	r0, #0
 802d82a:	106d      	asrs	r5, r5, #1
 802d82c:	005b      	lsls	r3, r3, #1
 802d82e:	f04f 0e16 	mov.w	lr, #22
 802d832:	4684      	mov	ip, r0
 802d834:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802d838:	eb0c 0401 	add.w	r4, ip, r1
 802d83c:	4294      	cmp	r4, r2
 802d83e:	bfde      	ittt	le
 802d840:	1b12      	suble	r2, r2, r4
 802d842:	eb04 0c01 	addle.w	ip, r4, r1
 802d846:	1840      	addle	r0, r0, r1
 802d848:	0052      	lsls	r2, r2, #1
 802d84a:	f1be 0e01 	subs.w	lr, lr, #1
 802d84e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802d852:	ea4f 0151 	mov.w	r1, r1, lsr #1
 802d856:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802d85a:	d1ed      	bne.n	802d838 <__ieee754_sqrt+0x94>
 802d85c:	4671      	mov	r1, lr
 802d85e:	2720      	movs	r7, #32
 802d860:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 802d864:	4562      	cmp	r2, ip
 802d866:	eb04 060e 	add.w	r6, r4, lr
 802d86a:	dc02      	bgt.n	802d872 <__ieee754_sqrt+0xce>
 802d86c:	d113      	bne.n	802d896 <__ieee754_sqrt+0xf2>
 802d86e:	429e      	cmp	r6, r3
 802d870:	d811      	bhi.n	802d896 <__ieee754_sqrt+0xf2>
 802d872:	2e00      	cmp	r6, #0
 802d874:	eb06 0e04 	add.w	lr, r6, r4
 802d878:	da43      	bge.n	802d902 <__ieee754_sqrt+0x15e>
 802d87a:	f1be 0f00 	cmp.w	lr, #0
 802d87e:	db40      	blt.n	802d902 <__ieee754_sqrt+0x15e>
 802d880:	f10c 0801 	add.w	r8, ip, #1
 802d884:	eba2 020c 	sub.w	r2, r2, ip
 802d888:	429e      	cmp	r6, r3
 802d88a:	bf88      	it	hi
 802d88c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 802d890:	1b9b      	subs	r3, r3, r6
 802d892:	4421      	add	r1, r4
 802d894:	46c4      	mov	ip, r8
 802d896:	0052      	lsls	r2, r2, #1
 802d898:	3f01      	subs	r7, #1
 802d89a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802d89e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 802d8a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802d8a6:	d1dd      	bne.n	802d864 <__ieee754_sqrt+0xc0>
 802d8a8:	4313      	orrs	r3, r2
 802d8aa:	d006      	beq.n	802d8ba <__ieee754_sqrt+0x116>
 802d8ac:	1c4c      	adds	r4, r1, #1
 802d8ae:	bf13      	iteet	ne
 802d8b0:	3101      	addne	r1, #1
 802d8b2:	3001      	addeq	r0, #1
 802d8b4:	4639      	moveq	r1, r7
 802d8b6:	f021 0101 	bicne.w	r1, r1, #1
 802d8ba:	1043      	asrs	r3, r0, #1
 802d8bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 802d8c0:	0849      	lsrs	r1, r1, #1
 802d8c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 802d8c6:	07c2      	lsls	r2, r0, #31
 802d8c8:	bf48      	it	mi
 802d8ca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 802d8ce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 802d8d2:	460c      	mov	r4, r1
 802d8d4:	463d      	mov	r5, r7
 802d8d6:	e77f      	b.n	802d7d8 <__ieee754_sqrt+0x34>
 802d8d8:	0ada      	lsrs	r2, r3, #11
 802d8da:	3815      	subs	r0, #21
 802d8dc:	055b      	lsls	r3, r3, #21
 802d8de:	2a00      	cmp	r2, #0
 802d8e0:	d0fa      	beq.n	802d8d8 <__ieee754_sqrt+0x134>
 802d8e2:	02d7      	lsls	r7, r2, #11
 802d8e4:	d50a      	bpl.n	802d8fc <__ieee754_sqrt+0x158>
 802d8e6:	f1c1 0420 	rsb	r4, r1, #32
 802d8ea:	fa23 f404 	lsr.w	r4, r3, r4
 802d8ee:	1e4d      	subs	r5, r1, #1
 802d8f0:	408b      	lsls	r3, r1
 802d8f2:	4322      	orrs	r2, r4
 802d8f4:	1b41      	subs	r1, r0, r5
 802d8f6:	e788      	b.n	802d80a <__ieee754_sqrt+0x66>
 802d8f8:	4608      	mov	r0, r1
 802d8fa:	e7f0      	b.n	802d8de <__ieee754_sqrt+0x13a>
 802d8fc:	0052      	lsls	r2, r2, #1
 802d8fe:	3101      	adds	r1, #1
 802d900:	e7ef      	b.n	802d8e2 <__ieee754_sqrt+0x13e>
 802d902:	46e0      	mov	r8, ip
 802d904:	e7be      	b.n	802d884 <__ieee754_sqrt+0xe0>
 802d906:	bf00      	nop
 802d908:	7ff00000 	.word	0x7ff00000

0802d90c <finite>:
 802d90c:	b082      	sub	sp, #8
 802d90e:	ed8d 0b00 	vstr	d0, [sp]
 802d912:	9801      	ldr	r0, [sp, #4]
 802d914:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 802d918:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802d91c:	0fc0      	lsrs	r0, r0, #31
 802d91e:	b002      	add	sp, #8
 802d920:	4770      	bx	lr
 802d922:	0000      	movs	r0, r0
 802d924:	0000      	movs	r0, r0
	...

0802d928 <nan>:
 802d928:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802d930 <nan+0x8>
 802d92c:	4770      	bx	lr
 802d92e:	bf00      	nop
 802d930:	00000000 	.word	0x00000000
 802d934:	7ff80000 	.word	0x7ff80000

0802d938 <_init>:
 802d938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d93a:	bf00      	nop
 802d93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d93e:	bc08      	pop	{r3}
 802d940:	469e      	mov	lr, r3
 802d942:	4770      	bx	lr

0802d944 <_fini>:
 802d944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d946:	bf00      	nop
 802d948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d94a:	bc08      	pop	{r3}
 802d94c:	469e      	mov	lr, r3
 802d94e:	4770      	bx	lr
