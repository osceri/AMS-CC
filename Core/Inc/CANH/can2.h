/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.0.7 Wed Apr 27 19:24:12 2022.
 */

#ifndef CAN2_H
#define CAN2_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CAN2_AMK1_ACTUAL_VALUES_1_FRAME_ID (0x283u)
#define CAN2_AMK1_ACTUAL_VALUES_2_FRAME_ID (0x285u)
#define CAN2_AMK1_SETPOINTS_1_FRAME_ID (0x184u)
#define CAN2_AMK2_ACTUAL_VALUES_1_FRAME_ID (0x284u)
#define CAN2_AMK2_ACTUAL_VALUES_2_FRAME_ID (0x286u)
#define CAN2_AMK2_SETPOINTS_1_FRAME_ID (0x185u)
#define CAN2_AMK3_ACTUAL_VALUES_1_FRAME_ID (0x287u)
#define CAN2_AMK3_ACTUAL_VALUES_2_FRAME_ID (0x289u)
#define CAN2_AMK3_SETPOINTS_1_FRAME_ID (0x188u)
#define CAN2_AMK4_ACTUAL_VALUES_1_FRAME_ID (0x288u)
#define CAN2_AMK4_ACTUAL_VALUES_2_FRAME_ID (0x290u)
#define CAN2_AMK4_SETPOINTS_1_FRAME_ID (0x189u)
#define CAN2_CHARGER_CONFIG_FRAME_ID (0x270u)
#define CAN2_CC_STATUS_FRAME_ID (0x250u)
#define CAN2_IVT_MSG_RESULT_WH_FRAME_ID (0x528u)
#define CAN2_IVT_MSG_RESULT_AS_FRAME_ID (0x527u)
#define CAN2_IVT_MSG_RESULT_W_FRAME_ID (0x526u)
#define CAN2_IVT_MSG_RESPONSE_FRAME_ID (0x511u)
#define CAN2_IVT_MSG_RESULT_T_FRAME_ID (0x525u)
#define CAN2_IVT_MSG_RESULT_U3_FRAME_ID (0x524u)
#define CAN2_IVT_MSG_RESULT_U2_FRAME_ID (0x523u)
#define CAN2_IVT_MSG_RESULT_U1_FRAME_ID (0x522u)
#define CAN2_IVT_MSG_RESULT_I_FRAME_ID (0x521u)
#define CAN2_IVT_MSG_CMD_FRAME_ID (0x411u)

/* Frame lengths in bytes. */
#define CAN2_AMK1_ACTUAL_VALUES_1_LENGTH (8u)
#define CAN2_AMK1_ACTUAL_VALUES_2_LENGTH (8u)
#define CAN2_AMK1_SETPOINTS_1_LENGTH (8u)
#define CAN2_AMK2_ACTUAL_VALUES_1_LENGTH (8u)
#define CAN2_AMK2_ACTUAL_VALUES_2_LENGTH (8u)
#define CAN2_AMK2_SETPOINTS_1_LENGTH (8u)
#define CAN2_AMK3_ACTUAL_VALUES_1_LENGTH (8u)
#define CAN2_AMK3_ACTUAL_VALUES_2_LENGTH (8u)
#define CAN2_AMK3_SETPOINTS_1_LENGTH (8u)
#define CAN2_AMK4_ACTUAL_VALUES_1_LENGTH (8u)
#define CAN2_AMK4_ACTUAL_VALUES_2_LENGTH (8u)
#define CAN2_AMK4_SETPOINTS_1_LENGTH (8u)
#define CAN2_CHARGER_CONFIG_LENGTH (4u)
#define CAN2_CC_STATUS_LENGTH (1u)
#define CAN2_IVT_MSG_RESULT_WH_LENGTH (6u)
#define CAN2_IVT_MSG_RESULT_AS_LENGTH (6u)
#define CAN2_IVT_MSG_RESULT_W_LENGTH (6u)
#define CAN2_IVT_MSG_RESPONSE_LENGTH (8u)
#define CAN2_IVT_MSG_RESULT_T_LENGTH (6u)
#define CAN2_IVT_MSG_RESULT_U3_LENGTH (6u)
#define CAN2_IVT_MSG_RESULT_U2_LENGTH (6u)
#define CAN2_IVT_MSG_RESULT_U1_LENGTH (6u)
#define CAN2_IVT_MSG_RESULT_I_LENGTH (6u)
#define CAN2_IVT_MSG_CMD_LENGTH (8u)

/* Extended or standard frame types. */
#define CAN2_AMK1_ACTUAL_VALUES_1_IS_EXTENDED (0)
#define CAN2_AMK1_ACTUAL_VALUES_2_IS_EXTENDED (0)
#define CAN2_AMK1_SETPOINTS_1_IS_EXTENDED (0)
#define CAN2_AMK2_ACTUAL_VALUES_1_IS_EXTENDED (0)
#define CAN2_AMK2_ACTUAL_VALUES_2_IS_EXTENDED (0)
#define CAN2_AMK2_SETPOINTS_1_IS_EXTENDED (0)
#define CAN2_AMK3_ACTUAL_VALUES_1_IS_EXTENDED (0)
#define CAN2_AMK3_ACTUAL_VALUES_2_IS_EXTENDED (0)
#define CAN2_AMK3_SETPOINTS_1_IS_EXTENDED (0)
#define CAN2_AMK4_ACTUAL_VALUES_1_IS_EXTENDED (0)
#define CAN2_AMK4_ACTUAL_VALUES_2_IS_EXTENDED (0)
#define CAN2_AMK4_SETPOINTS_1_IS_EXTENDED (0)
#define CAN2_CHARGER_CONFIG_IS_EXTENDED (0)
#define CAN2_CC_STATUS_IS_EXTENDED (0)
#define CAN2_IVT_MSG_RESULT_WH_IS_EXTENDED (0)
#define CAN2_IVT_MSG_RESULT_AS_IS_EXTENDED (0)
#define CAN2_IVT_MSG_RESULT_W_IS_EXTENDED (0)
#define CAN2_IVT_MSG_RESPONSE_IS_EXTENDED (0)
#define CAN2_IVT_MSG_RESULT_T_IS_EXTENDED (0)
#define CAN2_IVT_MSG_RESULT_U3_IS_EXTENDED (0)
#define CAN2_IVT_MSG_RESULT_U2_IS_EXTENDED (0)
#define CAN2_IVT_MSG_RESULT_U1_IS_EXTENDED (0)
#define CAN2_IVT_MSG_RESULT_I_IS_EXTENDED (0)
#define CAN2_IVT_MSG_CMD_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define CAN2_CHARGER_CONFIG_MSG_CHOOSE_CHARGERS_ALL_CHARGERS_CHOICE (255u)

#define CAN2_CHARGER_CONFIG_MSG_SET_ENABLED_DISABLE_CHOICE (0u)
#define CAN2_CHARGER_CONFIG_MSG_SET_ENABLED_ENABLE_CHOICE (1u)

#define CAN2_CC_STATUS_ENABLE_AMS_CHARGING_DISABLE_CHOICE (0u)
#define CAN2_CC_STATUS_ENABLE_AMS_CHARGING_ENABLE_CHOICE (1u)

/**
 * Signals in message amk1_actual_values_1.
 *
 * Periodic 5ms.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_amk1_actual_values_1_t {
    /**
     * System ready (SBM).
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk1_status_system_ready;

    /**
     * Error.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk1_status_error;

    /**
     * Warning.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk1_status_warning;

    /**
     * HV activation acknowledgment.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk1_status_quit_dc_on;

    /**
     * HV activation level.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk1_status_dc_on;

    /**
     * Controller enable acknowledgment.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk1_status_quit_inverter_on;

    /**
     * Controller enable level.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk1_status_inverter_on;

    /**
     * Derating (torque limitation active).
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk1_derating;

    /**
     * Actual speed value.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t amk1_actual_velocity;

    /**
     * Raw data for calculating 'actual torque current'.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t amk1_torque_current;

    /**
     * Raw data for calculating 'actual magnetizing current'.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t amk1_magnetizing_current;
};

/**
 * Signals in message amk1_actual_values_2.
 *
 * Periodic 5ms.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_amk1_actual_values_2_t {
    /**
     * Motor temperature.
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk1_temp_motor;

    /**
     * Cold plate temperature.
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk1_temp_inverter;

    /**
     * Diagnostic number.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t amk1_error_info;

    /**
     * IGBT temperature.
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk1_temp_igbt;
};

/**
 * Signals in message amk1_setpoints_1.
 *
 * Periodic< 50ms.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_amk1_setpoints_1_t {
    /**
     * Controller enable.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk1_control_inverter_on;

    /**
     * HV activation.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk1_control_dc_on;

    /**
     * Driver enable.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk1_control_enable;

    /**
     * Remove error (Setpoints must have value 0).
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk1_control_error_reset;

    /**
     * Speed setpoint.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t amk1_target_velocity;

    /**
     * Positive torque limit.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t amk1_torque_limit_positiv;

    /**
     * Negative torque limit.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t amk1_torque_limit_negativ;
};

/**
 * Signals in message amk2_actual_values_1.
 *
 * Periodic 5ms.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_amk2_actual_values_1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk2_system_ready;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk2_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk2_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk2_status_quit_dc_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk2_status_dc_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk2_status_quit_inverter_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk2_status_inverter_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk2_status_derating;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t amk2_actual_velocity;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t amk2_torque_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t amk2_magnetizing_current;
};

/**
 * Signals in message amk2_actual_values_2.
 *
 * Periodic 5ms.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_amk2_actual_values_2_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk2_temp_motor;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk2_temp_inverter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t amk2_error_info;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t amk2_temp_igbt;
};

/**
 * Signals in message amk2_setpoints_1.
 *
 * Periodic< 50ms.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_amk2_setpoints_1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk2_control_inverter_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk2_control_dc_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk2_control_enable;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t amk2_control_error_reset;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t amk2_target_velocity;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t amk2_torque_limit_positiv;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t amk2_torque_limit_negativ;
};

/**
 * Signals in message amk3_actual_values_1.
 *
 * Periodic 5ms.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_amk3_actual_values_1_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message amk3_actual_values_2.
 *
 * Periodic 5ms.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_amk3_actual_values_2_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message amk3_setpoints_1.
 *
 * Periodic< 50ms.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_amk3_setpoints_1_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message amk4_actual_values_1.
 *
 * Periodic 5ms.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_amk4_actual_values_1_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message amk4_actual_values_2.
 *
 * Periodic 5ms.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_amk4_actual_values_2_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message amk4_setpoints_1.
 *
 * Periodic< 50ms.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_amk4_setpoints_1_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message charger_config.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_charger_config_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t set_mux;

    /**
     * This signal decides which charger the message shall be sent to. 00 is the first charger,  01 is the second charger. Set it to hex(FF)  i.e 255 in decimal to send to all chargers
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t msg_choose_chargers;

    /**
     * Chargers in series should be treated as one unit
     *
     * Range: 0..900 (0..900 Volt)
     * Scale: 1
     * Offset: 0
     */
    uint16_t msg_set_voltage_limit;

    /**
     * Chargers in series should be treated as one unit
     *
     * Range: 0..133 (0..13.3 Ampere)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t msg_set_current_limit;

    /**
     * Chargers in series should be treated as one unit
     *
     * Range: 0..6000 (0..6000 Watt)
     * Scale: 1
     * Offset: 0
     */
    uint16_t msg_set_power_limit;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t msg_set_enabled;

    /**
     * minimun T = 2 sec. message should be sent with a periodicity of T/4.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t msg_set_time_out;
};

/**
 * Signals in message cc_status.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct can2_cc_status_t {
    /**
     * signal that enables/informs AMS to start charging sequence
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t enable_ams_charging;
};

/**
 * Signals in message IVT_Msg_Result_Wh.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_ivt_msg_result_wh_t {
    /**
     * Range: 7..7 (7..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_wh_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_wh_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_wh_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_wh_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_wh;
};

/**
 * Signals in message IVT_Msg_Result_As.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_ivt_msg_result_as_t {
    /**
     * Range: 6..6 (6..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_as_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_as_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_as_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_as_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_as;
};

/**
 * Signals in message IVT_Msg_Result_W.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_ivt_msg_result_w_t {
    /**
     * Range: 5..5 (5..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_w_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_w_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_w_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_w_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_w;
};

/**
 * Signals in message IVT_Msg_Response.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_ivt_msg_response_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_trigger_spare;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ff_wrong_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _bf_restart_alive_cmd_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _80_resp_meas_error_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _81_resp_system_error_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _82_resp_all_log_data_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _83_resp_log_data_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _90_resp_can_id_val_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _91_resp_can_id_val_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _92_resp_can_id_val_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _93_resp_can_id_val_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _94_resp_can_id_val_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _95_resp_can_id_val_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _96_resp_can_id_val_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _97_resp_can_id_val_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _9_d_resp_can_id_val_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _9_f_resp_can_id_val_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a0_resp_sign_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a1_resp_sign_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a2_resp_sign_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a3_resp_sign_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a4_resp_sign_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a5_resp_sign_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a6_resp_sign_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a7_resp_sign_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _b0_resp_reset_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b2_resp_store_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _b3_resp_oc_test_time;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b5_resp_oc_pos_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b6_resp_oc_neg_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b9_resp_device_type;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_major_hw;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _bb_resp_serien_nr;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t _bc_resp_art_n;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t ivt_response_data;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a0_resp_endianess_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a1_resp_endianess_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a2_resp_endianess_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a3_resp_endianess_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a4_resp_endianess_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a5_resp_endianess_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a6_resp_endianess_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a7_resp_endianess_wh;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a0_resp_trigger_mode_i;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a1_resp_trigger_mode_u1;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a2_resp_trigger_mode_u2;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a3_resp_trigger_mode_u3;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a4_resp_trigger_mode_t;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a5_resp_trigger_mode_w;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a6_resp_trigger_mode_as;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _a7_resp_trigger_mode_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b4_resp_actual_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_07_trigger_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _b2_resp_store_device_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_minor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _b9_resp_device_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _80_resp_meas_error_count_mask;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _81_resp_system_error_count_mask;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t _82_resp_all_log_data_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t _83_resp_log_data_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a0_resp_cycle_time_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a1_resp_cycle_time_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a2_resp_cycle_time_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a3_resp_cycle_time_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a4_resp_cycle_time_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a5_resp_cycle_time_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a6_resp_cycle_time_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _a7_resp_cycle_time_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_06_trigger_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_05_trigger_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_04_trigger_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_03_trigger_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_02_trigger_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_01_trigger_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b1_00_trigger_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b4_resp_startup_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _bf_restart_alive_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_revision;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _90_resp_can_id_sn_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _91_resp_can_id_sn_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _92_resp_can_id_sn_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _93_resp_can_id_sn_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _94_resp_can_id_sn_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _95_resp_can_id_sn_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _96_resp_can_id_sn_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _97_resp_can_id_sn_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _9_d_resp_can_id_sn_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _9_f_resp_can_id_sn_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _b0_resp_reset_device_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _b4_resp_code_level;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b5_resp_oc_pos_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _b6_resp_oc_neg_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b9_resp_device_voltage_chan;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_vear;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b9_resp_device_toi;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t _ba_resp_sw_ver_month;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b9_resp_device_com;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_day;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b9_resp_device_v_supply;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _ba_resp_sw_ver_internal;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _b9_resp_device_spare;
};

/**
 * Signals in message IVT_Msg_Result_T.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_ivt_msg_result_t_t {
    /**
     * Range: 4..4 (4..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_t_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_t_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_t_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_t_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_t;

    /**
     * Range: -32767..32768 (-32767..32768 °C)
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_t;
};

/**
 * Signals in message IVT_Msg_Result_U3.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_ivt_msg_result_u3_t {
    /**
     * Range: 3..3 (3..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u3_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u3_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u3_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u3_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_u3;
};

/**
 * Signals in message IVT_Msg_Result_U2.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_ivt_msg_result_u2_t {
    /**
     * Range: 2..2 (2..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u2_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u2_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u2_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u2_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_u2;
};

/**
 * Signals in message IVT_Msg_Result_U1.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_ivt_msg_result_u1_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u1_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u1_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u1_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_u1_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_u1;
};

/**
 * Signals in message IVT_Msg_Result_I.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_ivt_msg_result_i_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_result_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_i_system_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_i_measurement_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_i_channel_error;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_result_i_ocs;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_msg_count_result_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t ivt_result_i;
};

/**
 * Signals in message IVT_Msg_Cmd.
 *
 * All signal values are as on the CAN bus.
 */
struct can2_ivt_msg_cmd_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivt_id_cmd;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_trigger_spare;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _10_set_can_id_val_i;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _11_set_can_id_val_u1;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _12_set_can_id_val_u2;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _13_set_can_id_val_u3;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _14_set_can_id_val_t;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _15_set_can_id_val_w;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _16_set_can_id_val_as;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _17_set_can_id_val_wh;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _1_d_set_can_id_val_command;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t _1_f_set_can_id_val_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _20_conf_sign_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _21_conf_sign_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _22_conf_sign_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _23_conf_sign_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _24_conf_sign_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _25_conf_sign_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _26_conf_sign_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _27_conf_sign_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _30_reset_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _32_store_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _33_oc_test_time;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _35_oc_pos_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _36_oc_neg_set_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _3_a_restart_prescaler;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _3_d_restart_default_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _3_f_restart_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _40_get_meas_error_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _41_get_system_error_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _42_get_all_log_data_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _43_get_log_data_item;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _60_get_result_dummy_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _61_get_result_dummy_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _62_get_result_dummy_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _63_get_result_dummy_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _64_get_result_dummy_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _65_get_result_dummy_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _66_get_result_dummy_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _67_get_result_dummy_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _73_get_oc_test_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _74_get_mode_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _75_get_oc_pos_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _76_get_oc_neg_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _79_get_device_id_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _7_a_get_sw_version_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _7_b_get_serien_nr_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _7_c_get_art_nr_dummy;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t ivt_cmd_data;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _20_conf_endianess_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _21_conf_endianess_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _22_conf_endianess_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _23_conf_endianess_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _24_conf_endianess_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _25_conf_endianess_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _26_conf_endianess_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _27_conf_endianess_wh;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _20_conf_trigger_mode_i;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _21_conf_trigger_mode_u1;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _22_conf_trigger_mode_u2;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _23_conf_trigger_mode_u3;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _24_conf_trigger_mode_t;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _25_conf_trigger_mode_w;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _26_conf_trigger_mode_as;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _27_conf_trigger_mode_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _34_actual_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_07_trigger_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _20_conf_cycle_time_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _21_conf_cycle_time_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _22_conf_cycle_time_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _23_conf_cycle_time_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _24_conf_cycle_time_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _25_conf_cycle_time_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _26_conf_cycle_time_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _27_conf_cycle_time_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_06_trigger_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_05_trigger_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_04_trigger_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_03_trigger_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_02_trigger_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_01_trigger_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _31_00_trigger_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t _34_startup_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _10_set_can_id_sn_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _11_set_can_id_sn_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _12_set_can_id_sn_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _13_set_can_id_sn_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _14_set_can_id_sn_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _15_set_can_id_sn_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _16_set_can_id_sn_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _17_set_can_id_sn_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _1_d_set_can_id_sn_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _1_f_set_can_id_sn_response;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _30_reset_device_sn;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t _34_code_level;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _35_oc_pos_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t _36_oc_neg_reset_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _50_get_can_id_sn_i;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _51_get_can_id_sn_u1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _52_get_can_id_sn_u2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _53_get_can_id_sn_u3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _54_get_can_id_sn_t;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _55_get_can_id_sn_w;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _56_get_can_id_sn_as;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _57_get_can_id_sn_wh;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _5_d_get_can_id_sn_command;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t _5_f_get_can_id_sn_response;
};

/**
 * Pack message amk1_actual_values_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_amk1_actual_values_1_pack(
    uint8_t *dst_p,
    const struct can2_amk1_actual_values_1_t *src_p,
    size_t size);

/**
 * Unpack message amk1_actual_values_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_amk1_actual_values_1_unpack(
    struct can2_amk1_actual_values_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk1_actual_values_1_amk1_status_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_actual_values_1_amk1_status_system_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_actual_values_1_amk1_status_system_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk1_actual_values_1_amk1_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_actual_values_1_amk1_status_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_actual_values_1_amk1_status_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk1_actual_values_1_amk1_status_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_actual_values_1_amk1_status_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_actual_values_1_amk1_status_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk1_actual_values_1_amk1_status_quit_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_actual_values_1_amk1_status_quit_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_actual_values_1_amk1_status_quit_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk1_actual_values_1_amk1_status_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_actual_values_1_amk1_status_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_actual_values_1_amk1_status_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk1_actual_values_1_amk1_status_quit_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_actual_values_1_amk1_status_quit_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_actual_values_1_amk1_status_quit_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk1_actual_values_1_amk1_status_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_actual_values_1_amk1_status_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_actual_values_1_amk1_status_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk1_actual_values_1_amk1_derating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_actual_values_1_amk1_derating_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_actual_values_1_amk1_derating_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_amk1_actual_values_1_amk1_actual_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_actual_values_1_amk1_actual_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_actual_values_1_amk1_actual_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_amk1_actual_values_1_amk1_torque_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_actual_values_1_amk1_torque_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_actual_values_1_amk1_torque_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_amk1_actual_values_1_amk1_magnetizing_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_actual_values_1_amk1_magnetizing_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_actual_values_1_amk1_magnetizing_current_is_in_range(int16_t value);

/**
 * Pack message amk1_actual_values_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_amk1_actual_values_2_pack(
    uint8_t *dst_p,
    const struct can2_amk1_actual_values_2_t *src_p,
    size_t size);

/**
 * Unpack message amk1_actual_values_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_amk1_actual_values_2_unpack(
    struct can2_amk1_actual_values_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_amk1_actual_values_2_amk1_temp_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_actual_values_2_amk1_temp_motor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_actual_values_2_amk1_temp_motor_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_amk1_actual_values_2_amk1_temp_inverter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_actual_values_2_amk1_temp_inverter_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_actual_values_2_amk1_temp_inverter_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_amk1_actual_values_2_amk1_error_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_actual_values_2_amk1_error_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_actual_values_2_amk1_error_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_amk1_actual_values_2_amk1_temp_igbt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_actual_values_2_amk1_temp_igbt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_actual_values_2_amk1_temp_igbt_is_in_range(int16_t value);

/**
 * Pack message amk1_setpoints_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_amk1_setpoints_1_pack(
    uint8_t *dst_p,
    const struct can2_amk1_setpoints_1_t *src_p,
    size_t size);

/**
 * Unpack message amk1_setpoints_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_amk1_setpoints_1_unpack(
    struct can2_amk1_setpoints_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk1_setpoints_1_amk1_control_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_setpoints_1_amk1_control_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_setpoints_1_amk1_control_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk1_setpoints_1_amk1_control_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_setpoints_1_amk1_control_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_setpoints_1_amk1_control_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk1_setpoints_1_amk1_control_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_setpoints_1_amk1_control_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_setpoints_1_amk1_control_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk1_setpoints_1_amk1_control_error_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_setpoints_1_amk1_control_error_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_setpoints_1_amk1_control_error_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_amk1_setpoints_1_amk1_target_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_setpoints_1_amk1_target_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_setpoints_1_amk1_target_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_amk1_setpoints_1_amk1_torque_limit_positiv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_setpoints_1_amk1_torque_limit_positiv_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_amk1_setpoints_1_amk1_torque_limit_negativ_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk1_setpoints_1_amk1_torque_limit_negativ_is_in_range(int16_t value);

/**
 * Pack message amk2_actual_values_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_amk2_actual_values_1_pack(
    uint8_t *dst_p,
    const struct can2_amk2_actual_values_1_t *src_p,
    size_t size);

/**
 * Unpack message amk2_actual_values_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_amk2_actual_values_1_unpack(
    struct can2_amk2_actual_values_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk2_actual_values_1_amk2_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_actual_values_1_amk2_system_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_actual_values_1_amk2_system_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk2_actual_values_1_amk2_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_actual_values_1_amk2_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_actual_values_1_amk2_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk2_actual_values_1_amk2_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_actual_values_1_amk2_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_actual_values_1_amk2_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk2_actual_values_1_amk2_status_quit_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_actual_values_1_amk2_status_quit_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_actual_values_1_amk2_status_quit_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk2_actual_values_1_amk2_status_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_actual_values_1_amk2_status_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_actual_values_1_amk2_status_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk2_actual_values_1_amk2_status_quit_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_actual_values_1_amk2_status_quit_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_actual_values_1_amk2_status_quit_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk2_actual_values_1_amk2_status_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_actual_values_1_amk2_status_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_actual_values_1_amk2_status_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk2_actual_values_1_amk2_status_derating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_actual_values_1_amk2_status_derating_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_actual_values_1_amk2_status_derating_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_amk2_actual_values_1_amk2_actual_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_actual_values_1_amk2_actual_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_actual_values_1_amk2_actual_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_amk2_actual_values_1_amk2_torque_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_actual_values_1_amk2_torque_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_actual_values_1_amk2_torque_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_amk2_actual_values_1_amk2_magnetizing_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_actual_values_1_amk2_magnetizing_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_actual_values_1_amk2_magnetizing_current_is_in_range(int16_t value);

/**
 * Pack message amk2_actual_values_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_amk2_actual_values_2_pack(
    uint8_t *dst_p,
    const struct can2_amk2_actual_values_2_t *src_p,
    size_t size);

/**
 * Unpack message amk2_actual_values_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_amk2_actual_values_2_unpack(
    struct can2_amk2_actual_values_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_amk2_actual_values_2_amk2_temp_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_actual_values_2_amk2_temp_motor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_actual_values_2_amk2_temp_motor_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_amk2_actual_values_2_amk2_temp_inverter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_actual_values_2_amk2_temp_inverter_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_actual_values_2_amk2_temp_inverter_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_amk2_actual_values_2_amk2_error_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_actual_values_2_amk2_error_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_actual_values_2_amk2_error_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_amk2_actual_values_2_amk2_temp_igbt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_actual_values_2_amk2_temp_igbt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_actual_values_2_amk2_temp_igbt_is_in_range(int16_t value);

/**
 * Pack message amk2_setpoints_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_amk2_setpoints_1_pack(
    uint8_t *dst_p,
    const struct can2_amk2_setpoints_1_t *src_p,
    size_t size);

/**
 * Unpack message amk2_setpoints_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_amk2_setpoints_1_unpack(
    struct can2_amk2_setpoints_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk2_setpoints_1_amk2_control_inverter_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_setpoints_1_amk2_control_inverter_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_setpoints_1_amk2_control_inverter_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk2_setpoints_1_amk2_control_dc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_setpoints_1_amk2_control_dc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_setpoints_1_amk2_control_dc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk2_setpoints_1_amk2_control_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_setpoints_1_amk2_control_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_setpoints_1_amk2_control_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_amk2_setpoints_1_amk2_control_error_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_setpoints_1_amk2_control_error_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_setpoints_1_amk2_control_error_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_amk2_setpoints_1_amk2_target_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_setpoints_1_amk2_target_velocity_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_setpoints_1_amk2_target_velocity_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_amk2_setpoints_1_amk2_torque_limit_positiv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_setpoints_1_amk2_torque_limit_positiv_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_setpoints_1_amk2_torque_limit_positiv_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_amk2_setpoints_1_amk2_torque_limit_negativ_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_amk2_setpoints_1_amk2_torque_limit_negativ_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_amk2_setpoints_1_amk2_torque_limit_negativ_is_in_range(uint16_t value);

/**
 * Pack message amk3_actual_values_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_amk3_actual_values_1_pack(
    uint8_t *dst_p,
    const struct can2_amk3_actual_values_1_t *src_p,
    size_t size);

/**
 * Unpack message amk3_actual_values_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_amk3_actual_values_1_unpack(
    struct can2_amk3_actual_values_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message amk3_actual_values_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_amk3_actual_values_2_pack(
    uint8_t *dst_p,
    const struct can2_amk3_actual_values_2_t *src_p,
    size_t size);

/**
 * Unpack message amk3_actual_values_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_amk3_actual_values_2_unpack(
    struct can2_amk3_actual_values_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message amk3_setpoints_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_amk3_setpoints_1_pack(
    uint8_t *dst_p,
    const struct can2_amk3_setpoints_1_t *src_p,
    size_t size);

/**
 * Unpack message amk3_setpoints_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_amk3_setpoints_1_unpack(
    struct can2_amk3_setpoints_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message amk4_actual_values_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_amk4_actual_values_1_pack(
    uint8_t *dst_p,
    const struct can2_amk4_actual_values_1_t *src_p,
    size_t size);

/**
 * Unpack message amk4_actual_values_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_amk4_actual_values_1_unpack(
    struct can2_amk4_actual_values_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message amk4_actual_values_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_amk4_actual_values_2_pack(
    uint8_t *dst_p,
    const struct can2_amk4_actual_values_2_t *src_p,
    size_t size);

/**
 * Unpack message amk4_actual_values_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_amk4_actual_values_2_unpack(
    struct can2_amk4_actual_values_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message amk4_setpoints_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_amk4_setpoints_1_pack(
    uint8_t *dst_p,
    const struct can2_amk4_setpoints_1_t *src_p,
    size_t size);

/**
 * Unpack message amk4_setpoints_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_amk4_setpoints_1_unpack(
    struct can2_amk4_setpoints_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message charger_config.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_charger_config_pack(
    uint8_t *dst_p,
    const struct can2_charger_config_t *src_p,
    size_t size);

/**
 * Unpack message charger_config.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_charger_config_unpack(
    struct can2_charger_config_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_charger_config_set_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_charger_config_set_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_charger_config_set_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_charger_config_msg_choose_chargers_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_charger_config_msg_choose_chargers_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_charger_config_msg_choose_chargers_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_charger_config_msg_set_voltage_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_charger_config_msg_set_voltage_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_charger_config_msg_set_voltage_limit_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_charger_config_msg_set_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_charger_config_msg_set_current_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_charger_config_msg_set_current_limit_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_charger_config_msg_set_power_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_charger_config_msg_set_power_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_charger_config_msg_set_power_limit_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_charger_config_msg_set_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_charger_config_msg_set_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_charger_config_msg_set_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_charger_config_msg_set_time_out_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_charger_config_msg_set_time_out_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_charger_config_msg_set_time_out_is_in_range(uint8_t value);

/**
 * Pack message cc_status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_cc_status_pack(
    uint8_t *dst_p,
    const struct can2_cc_status_t *src_p,
    size_t size);

/**
 * Unpack message cc_status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_cc_status_unpack(
    struct can2_cc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_cc_status_enable_ams_charging_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_cc_status_enable_ams_charging_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_cc_status_enable_ams_charging_is_in_range(uint8_t value);

/**
 * Pack message IVT_Msg_Result_Wh.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_ivt_msg_result_wh_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_wh_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_Wh.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_ivt_msg_result_wh_unpack(
    struct can2_ivt_msg_result_wh_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_wh_ivt_id_result_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_wh_ivt_id_result_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_wh_ivt_id_result_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_wh_ivt_result_wh_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_wh_ivt_result_wh_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_wh_ivt_result_wh_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_wh_ivt_result_wh_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_wh_ivt_result_wh_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_wh_ivt_result_wh_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_wh_ivt_result_wh_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_wh_ivt_result_wh_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_wh_ivt_result_wh_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_wh_ivt_result_wh_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_wh_ivt_result_wh_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_wh_ivt_result_wh_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_wh_ivt_msg_count_result_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_wh_ivt_msg_count_result_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_wh_ivt_msg_count_result_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t can2_ivt_msg_result_wh_ivt_result_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_wh_ivt_result_wh_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_wh_ivt_result_wh_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Result_As.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_ivt_msg_result_as_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_as_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_As.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_ivt_msg_result_as_unpack(
    struct can2_ivt_msg_result_as_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_as_ivt_id_result_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_as_ivt_id_result_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_as_ivt_id_result_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_as_ivt_result_as_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_as_ivt_result_as_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_as_ivt_result_as_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_as_ivt_result_as_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_as_ivt_result_as_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_as_ivt_result_as_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_as_ivt_result_as_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_as_ivt_result_as_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_as_ivt_result_as_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_as_ivt_result_as_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_as_ivt_result_as_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_as_ivt_result_as_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_as_ivt_msg_count_result_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_as_ivt_msg_count_result_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_as_ivt_msg_count_result_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t can2_ivt_msg_result_as_ivt_result_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_as_ivt_result_as_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_as_ivt_result_as_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Result_W.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_ivt_msg_result_w_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_w_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_W.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_ivt_msg_result_w_unpack(
    struct can2_ivt_msg_result_w_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_w_ivt_id_result_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_w_ivt_id_result_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_w_ivt_id_result_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_w_ivt_result_w_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_w_ivt_result_w_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_w_ivt_result_w_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_w_ivt_result_w_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_w_ivt_result_w_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_w_ivt_result_w_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_w_ivt_result_w_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_w_ivt_result_w_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_w_ivt_result_w_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_w_ivt_result_w_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_w_ivt_result_w_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_w_ivt_result_w_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_w_ivt_msg_count_result_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_w_ivt_msg_count_result_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_w_ivt_msg_count_result_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t can2_ivt_msg_result_w_ivt_result_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_w_ivt_result_w_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_w_ivt_result_w_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Response.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_ivt_msg_response_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_response_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Response.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_ivt_msg_response_unpack(
    struct can2_ivt_msg_response_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response_ivt_id_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response_ivt_id_response_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response_ivt_id_response_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b1_trigger_spare_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b1_trigger_spare_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b1_trigger_spare_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__ff_wrong_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__ff_wrong_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__ff_wrong_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__bf_restart_alive_cmd_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__bf_restart_alive_cmd_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__bf_restart_alive_cmd_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__80_resp_meas_error_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__80_resp_meas_error_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__80_resp_meas_error_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__81_resp_system_error_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__81_resp_system_error_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__81_resp_system_error_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__82_resp_all_log_data_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__82_resp_all_log_data_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__82_resp_all_log_data_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__83_resp_log_data_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__83_resp_log_data_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__83_resp_log_data_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__90_resp_can_id_val_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__90_resp_can_id_val_i_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__90_resp_can_id_val_i_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__91_resp_can_id_val_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__91_resp_can_id_val_u1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__91_resp_can_id_val_u1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__92_resp_can_id_val_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__92_resp_can_id_val_u2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__92_resp_can_id_val_u2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__93_resp_can_id_val_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__93_resp_can_id_val_u3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__93_resp_can_id_val_u3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__94_resp_can_id_val_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__94_resp_can_id_val_t_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__94_resp_can_id_val_t_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__95_resp_can_id_val_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__95_resp_can_id_val_w_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__95_resp_can_id_val_w_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__96_resp_can_id_val_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__96_resp_can_id_val_as_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__96_resp_can_id_val_as_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__97_resp_can_id_val_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__97_resp_can_id_val_wh_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__97_resp_can_id_val_wh_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__9_d_resp_can_id_val_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__9_d_resp_can_id_val_command_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__9_d_resp_can_id_val_command_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__9_f_resp_can_id_val_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__9_f_resp_can_id_val_response_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__9_f_resp_can_id_val_response_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a0_resp_sign_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a0_resp_sign_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a0_resp_sign_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a1_resp_sign_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a1_resp_sign_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a1_resp_sign_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a2_resp_sign_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a2_resp_sign_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a2_resp_sign_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a3_resp_sign_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a3_resp_sign_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a3_resp_sign_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a4_resp_sign_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a4_resp_sign_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a4_resp_sign_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a5_resp_sign_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a5_resp_sign_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a5_resp_sign_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a6_resp_sign_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a6_resp_sign_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a6_resp_sign_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a7_resp_sign_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a7_resp_sign_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a7_resp_sign_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__b0_resp_reset_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b0_resp_reset_item_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b0_resp_reset_item_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b2_resp_store_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b2_resp_store_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b2_resp_store_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__b3_resp_oc_test_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b3_resp_oc_test_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b3_resp_oc_test_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_ivt_msg_response__b5_resp_oc_pos_set_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b5_resp_oc_pos_set_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b5_resp_oc_pos_set_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_ivt_msg_response__b6_resp_oc_neg_set_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b6_resp_oc_neg_set_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b6_resp_oc_neg_set_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b9_resp_device_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b9_resp_device_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b9_resp_device_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__ba_resp_sw_ver_major_hw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__ba_resp_sw_ver_major_hw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__ba_resp_sw_ver_major_hw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_response__bb_resp_serien_nr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__bb_resp_serien_nr_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__bb_resp_serien_nr_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t can2_ivt_msg_response__bc_resp_art_n_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__bc_resp_art_n_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__bc_resp_art_n_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t can2_ivt_msg_response_ivt_response_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response_ivt_response_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response_ivt_response_data_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a0_resp_endianess_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a0_resp_endianess_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a0_resp_endianess_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a1_resp_endianess_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a1_resp_endianess_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a1_resp_endianess_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a2_resp_endianess_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a2_resp_endianess_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a2_resp_endianess_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a3_resp_endianess_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a3_resp_endianess_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a3_resp_endianess_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a4_resp_endianess_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a4_resp_endianess_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a4_resp_endianess_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a5_resp_endianess_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a5_resp_endianess_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a5_resp_endianess_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a6_resp_endianess_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a6_resp_endianess_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a6_resp_endianess_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a7_resp_endianess_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a7_resp_endianess_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a7_resp_endianess_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a0_resp_trigger_mode_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a0_resp_trigger_mode_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a0_resp_trigger_mode_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a1_resp_trigger_mode_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a1_resp_trigger_mode_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a1_resp_trigger_mode_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a2_resp_trigger_mode_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a2_resp_trigger_mode_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a2_resp_trigger_mode_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a3_resp_trigger_mode_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a3_resp_trigger_mode_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a3_resp_trigger_mode_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a4_resp_trigger_mode_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a4_resp_trigger_mode_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a4_resp_trigger_mode_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a5_resp_trigger_mode_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a5_resp_trigger_mode_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a5_resp_trigger_mode_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a6_resp_trigger_mode_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a6_resp_trigger_mode_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a6_resp_trigger_mode_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__a7_resp_trigger_mode_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a7_resp_trigger_mode_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a7_resp_trigger_mode_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b4_resp_actual_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b4_resp_actual_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b4_resp_actual_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b1_07_trigger_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b1_07_trigger_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b1_07_trigger_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_response__b2_resp_store_device_sn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b2_resp_store_device_sn_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b2_resp_store_device_sn_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__ba_resp_sw_ver_minor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__ba_resp_sw_ver_minor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__ba_resp_sw_ver_minor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__b9_resp_device_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b9_resp_device_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b9_resp_device_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__80_resp_meas_error_count_mask_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__80_resp_meas_error_count_mask_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__80_resp_meas_error_count_mask_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__81_resp_system_error_count_mask_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__81_resp_system_error_count_mask_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__81_resp_system_error_count_mask_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t can2_ivt_msg_response__82_resp_all_log_data_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__82_resp_all_log_data_counter_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__82_resp_all_log_data_counter_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t can2_ivt_msg_response__83_resp_log_data_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__83_resp_log_data_counter_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__83_resp_log_data_counter_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__a0_resp_cycle_time_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a0_resp_cycle_time_i_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a0_resp_cycle_time_i_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__a1_resp_cycle_time_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a1_resp_cycle_time_u1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a1_resp_cycle_time_u1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__a2_resp_cycle_time_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a2_resp_cycle_time_u2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a2_resp_cycle_time_u2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__a3_resp_cycle_time_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a3_resp_cycle_time_u3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a3_resp_cycle_time_u3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__a4_resp_cycle_time_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a4_resp_cycle_time_t_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a4_resp_cycle_time_t_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__a5_resp_cycle_time_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a5_resp_cycle_time_w_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a5_resp_cycle_time_w_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__a6_resp_cycle_time_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a6_resp_cycle_time_as_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a6_resp_cycle_time_as_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__a7_resp_cycle_time_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__a7_resp_cycle_time_wh_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__a7_resp_cycle_time_wh_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b1_06_trigger_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b1_06_trigger_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b1_06_trigger_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b1_05_trigger_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b1_05_trigger_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b1_05_trigger_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b1_04_trigger_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b1_04_trigger_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b1_04_trigger_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b1_03_trigger_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b1_03_trigger_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b1_03_trigger_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b1_02_trigger_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b1_02_trigger_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b1_02_trigger_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b1_01_trigger_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b1_01_trigger_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b1_01_trigger_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b1_00_trigger_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b1_00_trigger_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b1_00_trigger_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b4_resp_startup_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b4_resp_startup_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b4_resp_startup_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_response__bf_restart_alive_sn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__bf_restart_alive_sn_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__bf_restart_alive_sn_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__ba_resp_sw_ver_revision_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__ba_resp_sw_ver_revision_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__ba_resp_sw_ver_revision_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_response__90_resp_can_id_sn_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__90_resp_can_id_sn_i_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__90_resp_can_id_sn_i_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_response__91_resp_can_id_sn_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__91_resp_can_id_sn_u1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__91_resp_can_id_sn_u1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_response__92_resp_can_id_sn_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__92_resp_can_id_sn_u2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__92_resp_can_id_sn_u2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_response__93_resp_can_id_sn_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__93_resp_can_id_sn_u3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__93_resp_can_id_sn_u3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_response__94_resp_can_id_sn_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__94_resp_can_id_sn_t_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__94_resp_can_id_sn_t_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_response__95_resp_can_id_sn_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__95_resp_can_id_sn_w_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__95_resp_can_id_sn_w_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_response__96_resp_can_id_sn_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__96_resp_can_id_sn_as_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__96_resp_can_id_sn_as_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_response__97_resp_can_id_sn_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__97_resp_can_id_sn_wh_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__97_resp_can_id_sn_wh_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_response__9_d_resp_can_id_sn_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__9_d_resp_can_id_sn_command_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__9_d_resp_can_id_sn_command_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_response__9_f_resp_can_id_sn_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__9_f_resp_can_id_sn_response_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__9_f_resp_can_id_sn_response_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_response__b0_resp_reset_device_sn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b0_resp_reset_device_sn_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b0_resp_reset_device_sn_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_response__b4_resp_code_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b4_resp_code_level_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b4_resp_code_level_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_ivt_msg_response__b5_resp_oc_pos_reset_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b5_resp_oc_pos_reset_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b5_resp_oc_pos_reset_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_ivt_msg_response__b6_resp_oc_neg_reset_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b6_resp_oc_neg_reset_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b6_resp_oc_neg_reset_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b9_resp_device_voltage_chan_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b9_resp_device_voltage_chan_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b9_resp_device_voltage_chan_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__ba_resp_sw_ver_vear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__ba_resp_sw_ver_vear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__ba_resp_sw_ver_vear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b9_resp_device_toi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b9_resp_device_toi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b9_resp_device_toi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t can2_ivt_msg_response__ba_resp_sw_ver_month_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__ba_resp_sw_ver_month_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__ba_resp_sw_ver_month_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b9_resp_device_com_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b9_resp_device_com_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b9_resp_device_com_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__ba_resp_sw_ver_day_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__ba_resp_sw_ver_day_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__ba_resp_sw_ver_day_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b9_resp_device_v_supply_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b9_resp_device_v_supply_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b9_resp_device_v_supply_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__ba_resp_sw_ver_internal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__ba_resp_sw_ver_internal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__ba_resp_sw_ver_internal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_response__b9_resp_device_spare_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_response__b9_resp_device_spare_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_response__b9_resp_device_spare_is_in_range(uint8_t value);

/**
 * Pack message IVT_Msg_Result_T.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_ivt_msg_result_t_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_t_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_T.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_ivt_msg_result_t_unpack(
    struct can2_ivt_msg_result_t_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_t_ivt_id_result_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_t_ivt_id_result_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_t_ivt_id_result_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_t_ivt_result_t_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_t_ivt_result_t_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_t_ivt_result_t_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_t_ivt_result_t_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_t_ivt_result_t_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_t_ivt_result_t_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_t_ivt_result_t_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_t_ivt_result_t_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_t_ivt_result_t_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_t_ivt_result_t_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_t_ivt_result_t_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_t_ivt_result_t_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_t_ivt_msg_count_result_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_t_ivt_msg_count_result_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_t_ivt_msg_count_result_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t can2_ivt_msg_result_t_ivt_result_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_t_ivt_result_t_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_t_ivt_result_t_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Result_U3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_ivt_msg_result_u3_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_u3_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_U3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_ivt_msg_result_u3_unpack(
    struct can2_ivt_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u3_ivt_id_result_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u3_ivt_id_result_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u3_ivt_id_result_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u3_ivt_result_u3_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u3_ivt_result_u3_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u3_ivt_result_u3_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u3_ivt_result_u3_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u3_ivt_result_u3_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u3_ivt_result_u3_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u3_ivt_result_u3_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u3_ivt_result_u3_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u3_ivt_result_u3_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u3_ivt_result_u3_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u3_ivt_result_u3_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u3_ivt_result_u3_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u3_ivt_msg_count_result_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u3_ivt_msg_count_result_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u3_ivt_msg_count_result_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t can2_ivt_msg_result_u3_ivt_result_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u3_ivt_result_u3_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u3_ivt_result_u3_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Result_U2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_ivt_msg_result_u2_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_u2_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_U2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_ivt_msg_result_u2_unpack(
    struct can2_ivt_msg_result_u2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u2_ivt_id_result_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u2_ivt_id_result_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u2_ivt_id_result_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u2_ivt_result_u2_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u2_ivt_result_u2_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u2_ivt_result_u2_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u2_ivt_result_u2_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u2_ivt_result_u2_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u2_ivt_result_u2_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u2_ivt_result_u2_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u2_ivt_result_u2_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u2_ivt_result_u2_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u2_ivt_result_u2_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u2_ivt_result_u2_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u2_ivt_result_u2_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u2_ivt_msg_count_result_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u2_ivt_msg_count_result_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u2_ivt_msg_count_result_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t can2_ivt_msg_result_u2_ivt_result_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u2_ivt_result_u2_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u2_ivt_result_u2_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Result_U1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_ivt_msg_result_u1_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_u1_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_U1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_ivt_msg_result_u1_unpack(
    struct can2_ivt_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u1_ivt_id_result_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u1_ivt_id_result_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u1_ivt_id_result_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u1_ivt_result_u1_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u1_ivt_result_u1_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u1_ivt_result_u1_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u1_ivt_result_u1_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u1_ivt_result_u1_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u1_ivt_result_u1_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u1_ivt_result_u1_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u1_ivt_result_u1_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u1_ivt_result_u1_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u1_ivt_result_u1_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u1_ivt_result_u1_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u1_ivt_result_u1_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_u1_ivt_msg_count_result_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u1_ivt_msg_count_result_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u1_ivt_msg_count_result_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t can2_ivt_msg_result_u1_ivt_result_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_u1_ivt_result_u1_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_u1_ivt_result_u1_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Result_I.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_ivt_msg_result_i_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_i_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Result_I.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_ivt_msg_result_i_unpack(
    struct can2_ivt_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_i_ivt_id_result_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_i_ivt_id_result_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_i_ivt_id_result_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_i_ivt_result_i_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_i_ivt_result_i_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_i_ivt_result_i_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_i_ivt_result_i_measurement_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_i_ivt_result_i_measurement_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_i_ivt_result_i_measurement_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_i_ivt_result_i_channel_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_i_ivt_result_i_channel_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_i_ivt_result_i_channel_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_i_ivt_result_i_ocs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_i_ivt_result_i_ocs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_i_ivt_result_i_ocs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_result_i_ivt_msg_count_result_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_i_ivt_msg_count_result_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_i_ivt_msg_count_result_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t can2_ivt_msg_result_i_ivt_result_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_result_i_ivt_result_i_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_result_i_ivt_result_i_is_in_range(int32_t value);

/**
 * Pack message IVT_Msg_Cmd.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can2_ivt_msg_cmd_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_cmd_t *src_p,
    size_t size);

/**
 * Unpack message IVT_Msg_Cmd.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can2_ivt_msg_cmd_unpack(
    struct can2_ivt_msg_cmd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd_ivt_id_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd_ivt_id_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd_ivt_id_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__31_trigger_spare_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__31_trigger_spare_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__31_trigger_spare_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__10_set_can_id_val_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__10_set_can_id_val_i_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__10_set_can_id_val_i_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__11_set_can_id_val_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__11_set_can_id_val_u1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__11_set_can_id_val_u1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__12_set_can_id_val_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__12_set_can_id_val_u2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__12_set_can_id_val_u2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__13_set_can_id_val_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__13_set_can_id_val_u3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__13_set_can_id_val_u3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__14_set_can_id_val_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__14_set_can_id_val_t_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__14_set_can_id_val_t_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__15_set_can_id_val_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__15_set_can_id_val_w_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__15_set_can_id_val_w_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__16_set_can_id_val_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__16_set_can_id_val_as_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__16_set_can_id_val_as_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__17_set_can_id_val_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__17_set_can_id_val_wh_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__17_set_can_id_val_wh_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__1_d_set_can_id_val_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__1_d_set_can_id_val_command_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__1_d_set_can_id_val_command_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__1_f_set_can_id_val_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__1_f_set_can_id_val_response_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__1_f_set_can_id_val_response_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__20_conf_sign_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__20_conf_sign_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__20_conf_sign_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__21_conf_sign_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__21_conf_sign_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__21_conf_sign_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__22_conf_sign_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__22_conf_sign_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__22_conf_sign_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__23_conf_sign_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__23_conf_sign_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__23_conf_sign_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__24_conf_sign_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__24_conf_sign_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__24_conf_sign_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__25_conf_sign_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__25_conf_sign_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__25_conf_sign_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__26_conf_sign_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__26_conf_sign_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__26_conf_sign_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__27_conf_sign_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__27_conf_sign_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__27_conf_sign_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__30_reset_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__30_reset_item_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__30_reset_item_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__32_store_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__32_store_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__32_store_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__33_oc_test_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__33_oc_test_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__33_oc_test_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_ivt_msg_cmd__35_oc_pos_set_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__35_oc_pos_set_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__35_oc_pos_set_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_ivt_msg_cmd__36_oc_neg_set_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__36_oc_neg_set_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__36_oc_neg_set_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__3_a_restart_prescaler_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__3_a_restart_prescaler_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__3_a_restart_prescaler_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__3_d_restart_default_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__3_d_restart_default_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__3_d_restart_default_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__3_f_restart_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__3_f_restart_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__3_f_restart_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__40_get_meas_error_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__40_get_meas_error_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__40_get_meas_error_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__41_get_system_error_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__41_get_system_error_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__41_get_system_error_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__42_get_all_log_data_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__42_get_all_log_data_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__42_get_all_log_data_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__43_get_log_data_item_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__43_get_log_data_item_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__43_get_log_data_item_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__60_get_result_dummy_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__60_get_result_dummy_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__60_get_result_dummy_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__61_get_result_dummy_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__61_get_result_dummy_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__61_get_result_dummy_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__62_get_result_dummy_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__62_get_result_dummy_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__62_get_result_dummy_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__63_get_result_dummy_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__63_get_result_dummy_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__63_get_result_dummy_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__64_get_result_dummy_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__64_get_result_dummy_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__64_get_result_dummy_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__65_get_result_dummy_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__65_get_result_dummy_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__65_get_result_dummy_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__66_get_result_dummy_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__66_get_result_dummy_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__66_get_result_dummy_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__67_get_result_dummy_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__67_get_result_dummy_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__67_get_result_dummy_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__73_get_oc_test_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__73_get_oc_test_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__73_get_oc_test_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__74_get_mode_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__74_get_mode_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__74_get_mode_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__75_get_oc_pos_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__75_get_oc_pos_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__75_get_oc_pos_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__76_get_oc_neg_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__76_get_oc_neg_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__76_get_oc_neg_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__79_get_device_id_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__79_get_device_id_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__79_get_device_id_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__7_a_get_sw_version_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__7_a_get_sw_version_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__7_a_get_sw_version_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__7_b_get_serien_nr_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__7_b_get_serien_nr_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__7_b_get_serien_nr_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__7_c_get_art_nr_dummy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__7_c_get_art_nr_dummy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__7_c_get_art_nr_dummy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t can2_ivt_msg_cmd_ivt_cmd_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd_ivt_cmd_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd_ivt_cmd_data_is_in_range(uint64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__20_conf_endianess_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__20_conf_endianess_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__20_conf_endianess_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__21_conf_endianess_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__21_conf_endianess_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__21_conf_endianess_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__22_conf_endianess_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__22_conf_endianess_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__22_conf_endianess_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__23_conf_endianess_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__23_conf_endianess_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__23_conf_endianess_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__24_conf_endianess_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__24_conf_endianess_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__24_conf_endianess_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__25_conf_endianess_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__25_conf_endianess_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__25_conf_endianess_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__26_conf_endianess_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__26_conf_endianess_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__26_conf_endianess_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__27_conf_endianess_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__27_conf_endianess_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__27_conf_endianess_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__20_conf_trigger_mode_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__20_conf_trigger_mode_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__20_conf_trigger_mode_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__21_conf_trigger_mode_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__21_conf_trigger_mode_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__21_conf_trigger_mode_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__22_conf_trigger_mode_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__22_conf_trigger_mode_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__22_conf_trigger_mode_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__23_conf_trigger_mode_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__23_conf_trigger_mode_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__23_conf_trigger_mode_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__24_conf_trigger_mode_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__24_conf_trigger_mode_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__24_conf_trigger_mode_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__25_conf_trigger_mode_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__25_conf_trigger_mode_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__25_conf_trigger_mode_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__26_conf_trigger_mode_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__26_conf_trigger_mode_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__26_conf_trigger_mode_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__27_conf_trigger_mode_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__27_conf_trigger_mode_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__27_conf_trigger_mode_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__34_actual_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__34_actual_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__34_actual_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__31_07_trigger_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__31_07_trigger_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__31_07_trigger_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__20_conf_cycle_time_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__20_conf_cycle_time_i_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__20_conf_cycle_time_i_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__21_conf_cycle_time_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__21_conf_cycle_time_u1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__21_conf_cycle_time_u1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__22_conf_cycle_time_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__22_conf_cycle_time_u2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__22_conf_cycle_time_u2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__23_conf_cycle_time_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__23_conf_cycle_time_u3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__23_conf_cycle_time_u3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__24_conf_cycle_time_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__24_conf_cycle_time_t_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__24_conf_cycle_time_t_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__25_conf_cycle_time_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__25_conf_cycle_time_w_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__25_conf_cycle_time_w_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__26_conf_cycle_time_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__26_conf_cycle_time_as_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__26_conf_cycle_time_as_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__27_conf_cycle_time_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__27_conf_cycle_time_wh_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__27_conf_cycle_time_wh_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__31_06_trigger_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__31_06_trigger_as_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__31_06_trigger_as_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__31_05_trigger_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__31_05_trigger_w_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__31_05_trigger_w_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__31_04_trigger_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__31_04_trigger_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__31_04_trigger_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__31_03_trigger_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__31_03_trigger_u3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__31_03_trigger_u3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__31_02_trigger_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__31_02_trigger_u2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__31_02_trigger_u2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__31_01_trigger_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__31_01_trigger_u1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__31_01_trigger_u1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__31_00_trigger_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__31_00_trigger_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__31_00_trigger_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can2_ivt_msg_cmd__34_startup_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__34_startup_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__34_startup_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__10_set_can_id_sn_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__10_set_can_id_sn_i_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__10_set_can_id_sn_i_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__11_set_can_id_sn_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__11_set_can_id_sn_u1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__11_set_can_id_sn_u1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__12_set_can_id_sn_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__12_set_can_id_sn_u2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__12_set_can_id_sn_u2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__13_set_can_id_sn_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__13_set_can_id_sn_u3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__13_set_can_id_sn_u3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__14_set_can_id_sn_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__14_set_can_id_sn_t_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__14_set_can_id_sn_t_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__15_set_can_id_sn_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__15_set_can_id_sn_w_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__15_set_can_id_sn_w_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__16_set_can_id_sn_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__16_set_can_id_sn_as_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__16_set_can_id_sn_as_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__17_set_can_id_sn_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__17_set_can_id_sn_wh_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__17_set_can_id_sn_wh_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__1_d_set_can_id_sn_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__1_d_set_can_id_sn_command_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__1_d_set_can_id_sn_command_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__1_f_set_can_id_sn_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__1_f_set_can_id_sn_response_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__1_f_set_can_id_sn_response_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__30_reset_device_sn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__30_reset_device_sn_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__30_reset_device_sn_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t can2_ivt_msg_cmd__34_code_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__34_code_level_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__34_code_level_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_ivt_msg_cmd__35_oc_pos_reset_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__35_oc_pos_reset_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__35_oc_pos_reset_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t can2_ivt_msg_cmd__36_oc_neg_reset_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__36_oc_neg_reset_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__36_oc_neg_reset_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__50_get_can_id_sn_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__50_get_can_id_sn_i_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__50_get_can_id_sn_i_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__51_get_can_id_sn_u1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__51_get_can_id_sn_u1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__51_get_can_id_sn_u1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__52_get_can_id_sn_u2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__52_get_can_id_sn_u2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__52_get_can_id_sn_u2_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__53_get_can_id_sn_u3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__53_get_can_id_sn_u3_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__53_get_can_id_sn_u3_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__54_get_can_id_sn_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__54_get_can_id_sn_t_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__54_get_can_id_sn_t_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__55_get_can_id_sn_w_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__55_get_can_id_sn_w_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__55_get_can_id_sn_w_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__56_get_can_id_sn_as_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__56_get_can_id_sn_as_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__56_get_can_id_sn_as_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__57_get_can_id_sn_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__57_get_can_id_sn_wh_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__57_get_can_id_sn_wh_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__5_d_get_can_id_sn_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__5_d_get_can_id_sn_command_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__5_d_get_can_id_sn_command_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can2_ivt_msg_cmd__5_f_get_can_id_sn_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can2_ivt_msg_cmd__5_f_get_can_id_sn_response_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can2_ivt_msg_cmd__5_f_get_can_id_sn_response_is_in_range(uint32_t value);


#ifdef __cplusplus
}
#endif

#endif
